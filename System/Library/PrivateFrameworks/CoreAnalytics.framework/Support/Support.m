void sub_100003248(uint64_t a1@<X8>)
{
  os_log_s *v2;
  void *v3;
  double v4;
  double v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  NSDate *v11;
  NSDate *v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  os_log_s *v17;
  id v18;
  NSDate *v19;
  NSDate *v20;
  NSDate *v21;
  void *v22;
  id v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t **v26;
  unsigned __int8 v27;
  uint64_t v28;
  int v29;
  uint64_t *v30;
  unsigned __int8 v31;
  uint64_t v32;
  unsigned __int8 v33[8];
  uint64_t v34;
  unsigned __int8 v35[8];
  unint64_t v36;
  void v37[6];
  void v38[5];
  void v39[9];
  void v40[9];
  void v41[3];
  int v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  double *v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  double *v52;
  uint64_t v53;
  uint64_t v54;
  uint8_t v55[16];
  uint8_t buf[8];
  uint8_t *v57;
  uint64_t v58;
  char v59;
  v2 = (os_log_s *)qword_1001318E8;
  if (os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "[HeartBeatActivity] Will fetch ScreenLocked events from Biome.",  buf,  2u);
  }

  *(void *)a1 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)(a1 + 8) = 0LL;
  *(_BYTE *)a1 = 0;
  sub_1000041AC(a1);
  sub_1000041AC(a1);
  *(void *)buf = 0LL;
  v57 = buf;
  v58 = 0x2020000000LL;
  v59 = 0;
  v51 = 0LL;
  v52 = (double *)&v51;
  v53 = 0x2020000000LL;
  v54 = 0LL;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
  [v3 timeIntervalSince1970];
  v5 = v4;

  v47 = 0LL;
  v48 = (double *)&v47;
  v49 = 0x2020000000LL;
  v50 = v5 + -7200.0;
  v43 = 0LL;
  v44 = &v43;
  v45 = 0x2020000000LL;
  v46 = 0;
  v41[0] = 0LL;
  v41[1] = v41;
  v41[2] = 0x2020000000LL;
  v42 = -1;
  if (objc_opt_class(&OBJC_CLASS___BMStream) && objc_opt_class(&OBJC_CLASS___BMPublisherOptions))
  {
    v6 = BiomeLibrary();
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue([v7 Device]);
    v9 = (void *)objc_claimAutoreleasedReturnValue([v8 ScreenLocked]);

    v10 = objc_alloc(&OBJC_CLASS___BMPublisherOptions);
    v11 = -[NSDate initWithTimeIntervalSince1970:]( objc_alloc(&OBJC_CLASS___NSDate),  "initWithTimeIntervalSince1970:",  v5 + -7200.0);
    v12 = -[NSDate initWithTimeIntervalSince1970:]( objc_alloc(&OBJC_CLASS___NSDate),  "initWithTimeIntervalSince1970:",  v5);
    v13 = [v10 initWithStartDate:v11 endDate:v12 maxEvents:0 lastN:0 reversed:0];

    v14 = (void *)objc_claimAutoreleasedReturnValue([v9 publisherWithOptions:v13]);
    v40[0] = _NSConcreteStackBlock;
    v40[1] = 3221225472LL;
    v40[2] = sub_100003888;
    v40[3] = &unk_1001252D0;
    v40[4] = v41;
    v40[5] = &v51;
    *(double *)&v40[8] = v5;
    v40[6] = &v47;
    v40[7] = buf;
    v39[0] = _NSConcreteStackBlock;
    v39[1] = 3221225472LL;
    v39[2] = sub_100003A30;
    v39[3] = &unk_1001252F8;
    v39[4] = &v43;
    v39[5] = buf;
    v39[6] = v41;
    v39[7] = &v51;
    v39[8] = &v47;
    v15 = [v14 sinkWithCompletion:v40 receiveInput:v39];
    if (*((_BYTE *)v44 + 24))
    {
      v16 = v13;
    }

    else
    {
      v17 = (os_log_s *)qword_1001318E8;
      if (os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v55 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "[HeartBeatActivity] Found no events in the last 2 hour window. Checking the previous 2 hour window.",  v55,  2u);
      }

      v18 = objc_alloc(&OBJC_CLASS___BMPublisherOptions);
      v19 = -[NSDate initWithTimeIntervalSince1970:]( objc_alloc(&OBJC_CLASS___NSDate),  "initWithTimeIntervalSince1970:",  v5 + -14400.0);
      v20 = objc_alloc(&OBJC_CLASS___NSDate);
      v21 = -[NSDate initWithTimeIntervalSince1970:](v20, "initWithTimeIntervalSince1970:", v48[3]);
      v16 = [v18 initWithStartDate:v19 endDate:v21 maxEvents:1 lastN:1 reversed:0];

      v22 = (void *)objc_claimAutoreleasedReturnValue([v9 publisherWithOptions:v16]);
      v38[1] = 3221225472LL;
      v38[2] = sub_100003C4C;
      v38[3] = &unk_100125320;
      v38[4] = buf;
      v37[0] = _NSConcreteStackBlock;
      v37[1] = 3221225472LL;
      v37[2] = sub_100003DB0;
      v37[3] = &unk_100125348;
      v37[4] = buf;
      v37[5] = &v51;
      v38[0] = _NSConcreteStackBlock;
      v14 = v22;
      v23 = [v22 sinkWithCompletion:v38 receiveInput:v37];
    }

    if (v57[24])
    {
      v24 = vcvtmd_s64_f64(v52[3]);
      v35[0] = 5;
      v36 = v24;
      sub_1000041AC((uint64_t)v35);
      sub_1000041AC((uint64_t)v35);
      v25 = sub_100003F94((unsigned __int8 *)a1, "activeTime");
      v26 = (uint64_t **)&v36;
      sub_1000041AC((uint64_t)v35);
      v27 = *(_BYTE *)v25;
      *(_BYTE *)v25 = v35[0];
      v35[0] = v27;
      v28 = v25[1];
      v25[1] = v36;
      v36 = v28;
      sub_1000041AC((uint64_t)v25);
      sub_1000041AC((uint64_t)v35);
      v29 = v35[0];
    }

    else
    {
      v33[0] = 5;
      v34 = 0LL;
      sub_1000041AC((uint64_t)v33);
      sub_1000041AC((uint64_t)v33);
      v30 = sub_100003F94((unsigned __int8 *)a1, "activeTime");
      v26 = (uint64_t **)&v34;
      sub_1000041AC((uint64_t)v33);
      v31 = *(_BYTE *)v30;
      *(_BYTE *)v30 = v33[0];
      v33[0] = v31;
      v32 = v30[1];
      v30[1] = v34;
      v34 = v32;
      sub_1000041AC((uint64_t)v30);
      sub_1000041AC((uint64_t)v33);
      v29 = v33[0];
    }

    sub_10000425C(v26, v29);
  }

  _Block_object_dispose(v41, 8);
  _Block_object_dispose(&v43, 8);
  _Block_object_dispose(&v47, 8);
  _Block_object_dispose(&v51, 8);
  _Block_object_dispose(buf, 8);
}

void sub_100003788( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, char a43, uint64_t a44, uint64_t a45, uint64_t a46, char a47)
{
  _Block_object_dispose(&a43, 8);
  _Block_object_dispose(&a47, 8);
  _Block_object_dispose((const void *)(v51 - 240), 8);
  _Block_object_dispose((const void *)(v51 - 208), 8);
  _Block_object_dispose((const void *)(v51 - 160), 8);
  sub_10000417C(v47);
  _Unwind_Resume(a1);
}

void sub_100003888(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 state])
  {
    v4 = (os_log_s *)(id)qword_1001318E8;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
      id v14 = objc_claimAutoreleasedReturnValue([v13 description]);
      int v15 = 136315138;
      id v16 = [v14 UTF8String];
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "[HeartBeatActivity] Error: %s\n",  (uint8_t *)&v15,  0xCu);
    }

    *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = 0;
  }

  else
  {
    if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL)) {
      *(double *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = *(double *)(a1 + 64)
    }
                                                                  - *(double *)(*(void *)(*(void *)(a1 + 48) + 8LL)
                                                                              + 24LL)
    v5 = (os_log_s *)qword_1001318E8;
    if (os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_DEBUG)) {
      sub_1000D631C(v5, v6, v7, v8, v9, v10, v11, v12);
    }
  }
}

void sub_1000039F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100003A30(void *a1, void *a2)
{
  id v3 = a2;
  *(_BYTE *)(*(void *)(a1[4] + 8LL) + 24LL) = 1;
  *(_BYTE *)(*(void *)(a1[5] + 8LL) + 24LL) = 1;
  v4 = (void *)objc_claimAutoreleasedReturnValue([v3 eventBody]);
  unsigned __int8 v5 = [v4 hasStarting];

  if ((v5 & 1) != 0)
  {
    uint64_t v6 = objc_alloc(&OBJC_CLASS___NSDate);
    [v3 timestamp];
    uint64_t v7 = -[NSDate initWithTimeIntervalSinceReferenceDate:](v6, "initWithTimeIntervalSinceReferenceDate:");
    -[NSDate timeIntervalSince1970](v7, "timeIntervalSince1970");
    double v9 = v8;

    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v3 eventBody]);
    *(_DWORD *)(*(void *)(a1[6] + 8) + 24) = [v10 starting];

    uint64_t v11 = *(void *)(a1[8] + 8LL);
    if (*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL) == 1) {
      *(double *)(*(void *)(a1[7] + 8LL) + 24LL) = v9
    }
    else {
      *(double *)(v11 + 24) = v9;
    }
    uint64_t v12 = (os_log_s *)(id)qword_1001318E8;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue([v3 eventBody]);
      int v14 = 134218240;
      double v15 = v9;
      __int16 v16 = 1024;
      unsigned int v17 = [v13 starting];
      _os_log_debug_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "[HeartBeatActivity] Processed event in window: eventTimestamp:%f, starting: %d",  (uint8_t *)&v14,  0x12u);
    }
  }

  else
  {
    *(_BYTE *)(*(void *)(a1[5] + 8LL) + 24LL) = 0;
  }
}

void sub_100003BFC(_Unwind_Exception *a1)
{
  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_100003C4C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 state];
  unsigned __int8 v5 = (os_log_s *)qword_1001318E8;
  if (v4)
  {
    uint64_t v6 = (os_log_s *)(id)qword_1001318E8;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v14 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
      id v15 = objc_claimAutoreleasedReturnValue([v14 description]);
      int v16 = 136315138;
      id v17 = [v15 UTF8String];
      _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "[HeartBeatActivity] Error: %s\n",  (uint8_t *)&v16,  0xCu);
    }

    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 0;
  }

  else if (os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_DEBUG))
  {
    sub_1000D631C(v5, v7, v8, v9, v10, v11, v12, v13);
  }
}

void sub_100003D74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100003DB0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 eventBody]);
  unsigned __int8 v5 = [v4 hasStarting];

  if ((v5 & 1) != 0)
  {
    uint64_t v6 = objc_alloc(&OBJC_CLASS___NSDate);
    [v3 timestamp];
    uint64_t v7 = -[NSDate initWithTimeIntervalSinceReferenceDate:](v6, "initWithTimeIntervalSinceReferenceDate:");
    -[NSDate timeIntervalSince1970](v7, "timeIntervalSince1970");
    uint64_t v9 = v8;

    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v3 eventBody]);
    unsigned int v11 = [v10 starting];

    double v12 = 7200.0;
    if (v11) {
      double v12 = 0.0;
    }
    *(double *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = v12;
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
    uint64_t v13 = (os_log_s *)(id)qword_1001318E8;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = (void *)objc_claimAutoreleasedReturnValue([v3 eventBody]);
      int v15 = 134218240;
      uint64_t v16 = v9;
      __int16 v17 = 1024;
      unsigned int v18 = [v14 starting];
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "[HeartBeatActivity] No event inside window: eventTimestamp:%f, starting: %d",  (uint8_t *)&v15,  0x12u);
    }
  }

  else
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 0;
  }
}

void sub_100003F44(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t *sub_100003F94(unsigned __int8 *a1, char *__s)
{
  int v4 = *a1;
  if (!*a1)
  {
    *a1 = 1;
    unsigned __int8 v5 = operator new(0x18uLL);
    v5[2] = 0LL;
    v5[1] = 0LL;
    void *v5 = v5 + 1;
    *((void *)a1 + 1) = v5;
    sub_1000041AC((uint64_t)a1);
    int v4 = *a1;
  }

  if (v4 != 1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v10 = (char *)sub_10000528C((char *)a1);
    sub_100005064(&v13, v10);
    unsigned int v11 = std::string::insert(&v13, 0LL, "cannot use operator[] with a string argument with ");
    __int128 v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    std::string::size_type cap = v11->__r_.__value_.__l.__cap_;
    *(_OWORD *)__p = v12;
    v11->__r_.__value_.__l.__size_ = 0LL;
    v11->__r_.__value_.__l.__cap_ = 0LL;
    v11->__r_.__value_.__r.__words[0] = 0LL;
    sub_100005128(305, (uint64_t)__p, exception);
  }

  uint64_t v6 = (uint64_t **)*((void *)a1 + 1);
  sub_100005064(__p, __s);
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  uint64_t v7 = sub_1000052E4(v6, (const void **)__p, (uint64_t)&unk_1000F5000, &v13);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  return v7 + 7;
}

void sub_1000040FC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **sub_10000417C(uint64_t **a1)
{
  return a1;
}

uint64_t sub_1000041AC(uint64_t result)
{
  switch(*(_BYTE *)result)
  {
    case 1:
      if (*(void *)(result + 8)) {
        return result;
      }
      v1 = "m_type != value_t::object or m_value.object != nullptr";
      int v2 = 1220;
      break;
    case 2:
      if (*(void *)(result + 8)) {
        return result;
      }
      v1 = "m_type != value_t::array or m_value.array != nullptr";
      int v2 = 1221;
      break;
    case 3:
      if (*(void *)(result + 8)) {
        return result;
      }
      v1 = "m_type != value_t::string or m_value.string != nullptr";
      int v2 = 1222;
      break;
    case 8:
      if (*(void *)(result + 8)) {
        return result;
      }
      v1 = "m_type != value_t::binary or m_value.binary != nullptr";
      int v2 = 1223;
      break;
    default:
      return result;
  }

  __assert_rtn("assert_invariant", "json.hpp", v2, v1);
}

void sub_10000425C(uint64_t **a1, int a2)
{
  uint64_t v23 = 0LL;
  unint64_t v24 = 0LL;
  unint64_t v25 = 0LL;
  int v3 = a2 - 1;
  if (a2 == 1)
  {
    sub_1000045E0(&v23, (*a1)[2]);
    uint64_t v5 = (uint64_t)(*a1 + 1);
    uint64_t v6 = (void *)**a1;
    unint64_t v4 = v24;
    if (v6 != (void *)v5)
    {
      do
      {
        if (v4 >= v25)
        {
          unint64_t v4 = sub_100004B7C(&v23, (uint64_t)(v6 + 7));
        }

        else
        {
          *(_BYTE *)unint64_t v4 = *((_BYTE *)v6 + 56);
          *(void *)(v4 + 8) = v6[8];
          sub_1000041AC((uint64_t)(v6 + 7));
          *((_BYTE *)v6 + 56) = 0;
          v6[8] = 0LL;
          sub_1000041AC(v4);
          v4 += 16LL;
        }

        unint64_t v24 = v4;
        uint64_t v7 = (void *)v6[1];
        if (v7)
        {
          do
          {
            uint64_t v8 = v7;
            uint64_t v7 = (void *)*v7;
          }

          while (v7);
        }

        else
        {
          do
          {
            uint64_t v8 = (void *)v6[2];
            BOOL v9 = *v8 == (void)v6;
            uint64_t v6 = v8;
          }

          while (!v9);
        }

        uint64_t v6 = v8;
      }

      while (v8 != (void *)v5);
    }
  }

  else
  {
    unint64_t v4 = 0LL;
    if (a2 == 2)
    {
      sub_1000045E0(&v23, ((*a1)[1] - **a1) >> 4);
      sub_100004ADC((uint64_t)&v21, **a1, (*a1)[1], &v23);
      unint64_t v4 = v24;
    }
  }

  if (v23 != v4)
  {
    do
    {
      v21 = (void **)0xAAAAAAAAAAAAAAAALL;
      v22 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
      char v11 = *(_BYTE *)(v4 - 16);
      uint64_t v10 = v4 - 16;
      LOBYTE(v21) = v11;
      v22 = *(uint64_t **)(v10 + 8);
      sub_1000041AC(v10);
      *(_BYTE *)uint64_t v10 = 0;
      *(void *)(v10 + 8) = 0LL;
      sub_1000041AC((uint64_t)&v21);
      sub_100004CA0((uint64_t)&v23, v24 - 16);
      if (v21 == 1)
      {
        __int128 v12 = v22;
        std::string v13 = v22 + 1;
        int v14 = (void *)*v22;
        if ((uint64_t *)*v22 != v22 + 1)
        {
          unint64_t v15 = v24;
          do
          {
            if (v15 >= v25)
            {
              unint64_t v15 = sub_100004B7C(&v23, (uint64_t)(v14 + 7));
            }

            else
            {
              *(_BYTE *)unint64_t v15 = *((_BYTE *)v14 + 56);
              *(void *)(v15 + 8) = v14[8];
              sub_1000041AC((uint64_t)(v14 + 7));
              *((_BYTE *)v14 + 56) = 0;
              v14[8] = 0LL;
              sub_1000041AC(v15);
              v15 += 16LL;
            }

            unint64_t v24 = v15;
            uint64_t v16 = (void *)v14[1];
            if (v16)
            {
              do
              {
                __int16 v17 = v16;
                uint64_t v16 = (void *)*v16;
              }

              while (v16);
            }

            else
            {
              do
              {
                __int16 v17 = (void *)v14[2];
                BOOL v9 = *v17 == (void)v14;
                int v14 = v17;
              }

              while (!v9);
            }

            int v14 = v17;
          }

          while (v17 != v13);
          __int128 v12 = v22;
        }

        sub_100004D00((uint64_t)v12, (char *)v12[1]);
        *__int128 v12 = (uint64_t)(v12 + 1);
        v12[2] = 0LL;
        v12[1] = 0LL;
      }

      else if (v21 == 2)
      {
        sub_100004ADC((uint64_t)&v26, *v22, v22[1], &v23);
        sub_10000469C(v22);
      }

      sub_1000041AC((uint64_t)&v21);
      sub_10000425C(&v22, v21);
      unint64_t v4 = v24;
    }

    while (v23 != v24);
  }

  switch(v3)
  {
    case 0:
      sub_100004D00((uint64_t)*a1, (char *)(*a1)[1]);
      goto LABEL_40;
    case 1:
      v21 = (void **)*a1;
      sub_100004D64(&v21);
      goto LABEL_40;
    case 2:
      unsigned int v18 = *a1;
      v19 = (void *)*v18;
      break;
    case 7:
      unsigned int v18 = *a1;
      v20 = (void *)**a1;
      if (!v20) {
        goto LABEL_41;
      }
      v18[1] = (uint64_t)v20;
      v19 = v20;
      break;
    default:
      goto LABEL_42;
  }

  operator delete(v19);
LABEL_40:
  unsigned int v18 = *a1;
LABEL_41:
  operator delete(v18);
LABEL_42:
  v21 = (void **)&v23;
  sub_100004D64(&v21);
}

void sub_1000045B0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1000045D0(void *a1)
{
}

uint64_t sub_1000045E0(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      sub_1000046F8();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_1000047F4(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 16 * v6;
    sub_10000470C(a1, v7);
    return sub_100004A50((uint64_t)v7);
  }

  return result;
}

void sub_100004688( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_10000469C(void *result)
{
  v1 = result;
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  if (v2 != *result)
  {
    uint64_t v4 = v2 - 16;
    uint64_t v5 = (unsigned __int8 *)(v2 - 16);
    do
    {
      sub_1000041AC(v4);
      unsigned int v6 = *v5;
      v5 -= 16;
      uint64_t result = (void *)sub_10000425C(v4 + 8, v6);
      BOOL v7 = v4 == v3;
      uint64_t v4 = (uint64_t)v5;
    }

    while (!v7);
  }

  v1[1] = v3;
  return result;
}

void sub_1000046F8()
{
}

uint64_t sub_10000470C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100004850((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void sub_100004780(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_1000047D0(exception, a1);
}

void sub_1000047BC(_Unwind_Exception *a1)
{
}

std::logic_error *sub_1000047D0(std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  return result;
}

void *sub_1000047F4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_100004828();
  }
  return operator new(16 * a2);
}

void sub_100004828()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

uint64_t sub_100004850(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v15 = a6;
  *((void *)&v15 + 1) = a7;
  __int128 v14 = v15;
  v16[0] = a1;
  v16[1] = &v14;
  v16[2] = &v15;
  unint64_t v17 = 0xAAAAAAAAAAAAAA00LL;
  if (a3 == a5)
  {
    uint64_t v12 = a6;
  }

  else
  {
    uint64_t v9 = a3 - 16;
    do
    {
      *(_BYTE *)(v7 - 16) = *(_BYTE *)v9;
      uint64_t v10 = v7 - 16;
      *(void *)(v10 + 8) = *(void *)(v9 + 8);
      sub_1000041AC(v9);
      *(_BYTE *)uint64_t v9 = 0;
      *(void *)(v9 + 8) = 0LL;
      sub_1000041AC(v10);
      uint64_t v7 = *((void *)&v15 + 1) - 16LL;
      *((void *)&v15 + 1) -= 16LL;
      BOOL v11 = v9 == a5;
      v9 -= 16LL;
    }

    while (!v11);
    uint64_t v12 = v15;
  }

  LOBYTE(v17) = 1;
  sub_100004944((uint64_t)v16);
  return v12;
}

uint64_t sub_100004944(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_100004978((uint64_t *)a1);
  }
  return a1;
}

uint64_t sub_100004978(uint64_t *a1)
{
  v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v15 = v3;
  uint64_t v16 = v2;
  uint64_t v17 = v3;
  uint64_t v18 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v10 = v7;
  uint64_t v11 = v6;
  uint64_t v12 = v7;
  uint64_t v13 = v6;
  return sub_1000049EC(v4, (uint64_t)v14, (uint64_t)v9);
}

uint64_t sub_1000049EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (i = *(unsigned __int8 **)(a2 + 32); i != *(unsigned __int8 **)(a3 + 32); *(void *)(a2 + 32) = i)
  {
    sub_1000041AC((uint64_t)i);
    uint64_t result = sub_10000425C(i + 8, *i);
    i = (unsigned __int8 *)(*(void *)(a2 + 32) + 16LL);
  }

  return result;
}

uint64_t sub_100004A50(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_100004A84(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      *(void *)(v4 + 16) = v2 - 16;
      sub_1000041AC(v2 - 16);
      uint64_t result = sub_10000425C(v2 - 8, *(unsigned __int8 *)(v2 - 16));
      uint64_t v2 = *(void *)(v4 + 16);
    }

    while (v2 != a2);
  }

  return result;
}

uint64_t sub_100004ADC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    unint64_t v7 = a4[1];
    do
    {
      if (v7 >= a4[2])
      {
        unint64_t v7 = sub_100004B7C(a4, v5);
      }

      else
      {
        *(_BYTE *)unint64_t v7 = *(_BYTE *)v5;
        *(void *)(v7 + 8) = *(void *)(v5 + 8);
        sub_1000041AC(v5);
        *(_BYTE *)uint64_t v5 = 0;
        *(void *)(v5 + 8) = 0LL;
        sub_1000041AC(v7);
        v7 += 16LL;
      }

      a4[1] = v7;
      v5 += 16LL;
    }

    while (v5 != a3);
    return a3;
  }

  return v5;
}

uint64_t sub_100004B7C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  uint64_t v10 = (char *)sub_1000047F4(v7, v9);
  uint64_t v11 = (uint64_t)&v10[16 * v4];
  *(void *)&__int128 v15 = v10;
  *((void *)&v15 + 1) = v11;
  *((void *)&v16 + 1) = &v10[16 * v12];
  *(_BYTE *)uint64_t v11 = *(_BYTE *)a2;
  *(void *)(v11 + 8) = *(void *)(a2 + 8);
  sub_1000041AC(a2);
  *(_BYTE *)a2 = 0;
  *(void *)(a2 + 8) = 0LL;
  sub_1000041AC(v11);
  *(void *)&__int128 v16 = v11 + 16;
  sub_10000470C(a1, &v15);
  uint64_t v13 = a1[1];
  sub_100004A50((uint64_t)&v15);
  return v13;
}

void sub_100004C8C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100004CA0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 8);
  if (v4 != a2)
  {
    uint64_t v5 = v4 - 16;
    uint64_t v6 = (unsigned __int8 *)(v4 - 16);
    do
    {
      sub_1000041AC(v5);
      unsigned int v7 = *v6;
      v6 -= 16;
      uint64_t result = sub_10000425C(v5 + 8, v7);
      BOOL v8 = v5 == a2;
      uint64_t v5 = (uint64_t)v6;
    }

    while (!v8);
  }

  *(void *)(v3 + 8) = a2;
  return result;
}

void sub_100004D00(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_100004D00(a1, *(void *)a2);
    sub_100004D00(a1, *((void *)a2 + 1));
    sub_1000041AC((uint64_t)(a2 + 56));
    sub_10000425C(a2 + 64, a2[56]);
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

void sub_100004D64(void ***a1)
{
  v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = (uint64_t)(v4 - 16);
      unsigned int v7 = v4 - 16;
      do
      {
        sub_1000041AC(v6);
        unsigned int v8 = *v7;
        v7 -= 16;
        sub_10000425C(v6 + 8, v8);
        BOOL v9 = v6 == (void)v2;
        uint64_t v6 = (uint64_t)v7;
      }

      while (!v9);
      uint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void sub_100004DF4(uint64_t a1@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  uint64_t v5 = std::string::append(&v13, ".");
  __int128 v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__l.__cap_ = v5->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0LL;
  v5->__r_.__value_.__l.__cap_ = 0LL;
  v5->__r_.__value_.__r.__words[0] = 0LL;
  std::to_string(&__p, a2);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = __p.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  BOOL v9 = std::string::append(&v14, (const std::string::value_type *)p_p, size);
  __int128 v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__l.__cap_ = v9->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0LL;
  v9->__r_.__value_.__l.__cap_ = 0LL;
  v9->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v11 = std::string::append(&v15, "] ");
  *a3 = *v11;
  v11->__r_.__value_.__l.__size_ = 0LL;
  v11->__r_.__value_.__l.__cap_ = 0LL;
  v11->__r_.__value_.__r.__words[0] = 0LL;
}

void sub_100004F3C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100004FA8(uint64_t a1, int a2, char *a3)
{
  *(void *)a1 = off_100125390;
  *(_DWORD *)(a1 + 8) = a2;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 16), a3);
  return a1;
}

void sub_100004FE4(_Unwind_Exception *a1)
{
}

const char *sub_100004FF8(const std::runtime_error *a1)
{
  return std::runtime_error::what(a1 + 1);
}

void sub_100005000(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)off_100125390;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
}

void sub_100005030(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)off_100125390;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
  operator delete(v2);
}

void *sub_100005064(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8LL) {
    sub_100005114();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    __int128 v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000LL;
    *a1 = v6;
  }

  else
  {
    *((_BYTE *)a1 + 23) = v4;
    __int128 v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }

  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void sub_100005114()
{
}

void sub_100005128(int a1@<W0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    uint64_t v7 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v7 = *(const std::string::value_type **)a2;
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v8 = *(void *)(a2 + 8);
  }
  BOOL v9 = std::string::append(&v14, v7, v8);
  __int128 v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  int64_t cap = v9->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string v15 = v10;
  v9->__r_.__value_.__l.__size_ = 0LL;
  v9->__r_.__value_.__l.__cap_ = 0LL;
  v9->__r_.__value_.__r.__words[0] = 0LL;
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (cap >= 0) {
    uint64_t v11 = (char *)v15;
  }
  else {
    uint64_t v11 = (char *)v15[0];
  }
  sub_100004FA8((uint64_t)a3, a1, v11);
  *a3 = off_1001253D0;
  if (SHIBYTE(cap) < 0) {
    operator delete(v15[0]);
  }
}

void sub_10000523C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *__p, uint64_t a22, int a23, __int16 a24, char a25, char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const char *sub_10000528C(char *a1)
{
  unint64_t v1 = *a1;
  if (v1 > 9) {
    return "number";
  }
  else {
    return off_1001253E8[v1];
  }
}

void sub_1000052B4(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)off_100125390;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
}

uint64_t *sub_1000052E4(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v8 = 0xAAAAAAAAAAAAAAAALL;
  int v6 = (uint64_t **)sub_1000053B0((uint64_t)a1, &v8, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    memset(v9, 170, sizeof(v9));
    sub_10000544C((uint64_t)a1, a4, v9);
    sub_1000054D0(a1, v8, v6, v9[0]);
    return v9[0];
  }

  return result;
}

void *sub_1000053B0(uint64_t a1, void *a2, const void **a3)
{
  size_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        uint64_t v8 = (void *)v4;
        BOOL v9 = (const void **)(v4 + 32);
        uint64_t v4 = *v8;
        size_t v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }

      if (!sub_100005524(v7, v9, a3)) {
        break;
      }
      size_t v5 = v8 + 1;
      uint64_t v4 = v8[1];
    }

    while (v4);
  }

  else
  {
    uint64_t v8 = (void *)(a1 + 8);
  }

LABEL_10:
  *a2 = v8;
  return v5;
}

    operator delete(p_s);
    return;
  }

  BOOL v9 = __s.__r_.__value_.__s.__size_;
  if (__s.__r_.__value_.__s.__size_ < 3u)
  {
    p_s = &__s;
    goto LABEL_16;
  }

    operator delete(p_s);
    return;
  }

  BOOL v9 = __s.__r_.__value_.__s.__size_;
  if (__s.__r_.__value_.__s.__size_ < 3u)
  {
    p_s = &__s;
    goto LABEL_16;
  }

  v29 = "builtOnDate";
  v28 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&uint64_t v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v26 = v8;
  v27 = v8;
  sub_100008780((uint64_t)&v18, &v29, (uint64_t)&v26);
  v21 = (unsigned __int8 *)&v18;
  v22 = 0LL;
  uint64_t v23 = 0LL;
  unint64_t v24 = 0LL;
  unint64_t v25 = 0x8000000000000000LL;
  sub_100008AC8(&v21);
  if (sub_1000087E8((unsigned __int8 **)&v26, &v21))
  {
    BOOL v9 = sub_10009AE9C();
    if (!v9)
    {
LABEL_18:
      uint64_t v7 = "base config does not have builtOnDate?!";
      goto LABEL_19;
    }
  }

  else
  {
    BOOL v9 = (uint64_t)sub_100008924((unsigned __int8 **)&v26);
  }

  if (*(_BYTE *)v9 != 3) {
    goto LABEL_18;
  }
  __int128 v10 = *(__int128 **)(v9 + 8);
  if (!v10) {
    goto LABEL_18;
  }
  if (*((char *)v10 + 23) < 0)
  {
    sub_10000B8BC(&__p, *(void **)v10, *((void *)v10 + 1));
  }

  else
  {
    uint64_t v11 = *v10;
    __p.__r_.__value_.__l.__cap_ = *((void *)v10 + 2);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v11;
  }

  sub_10003E010(&__p, (uint64_t)"%m-%d-%Y %H:%M:%S");
  __int128 v16 = v15;
  if (v16)
  {
    *(_OWORD *)a3 = *(_OWORD *)v20;
    a3 = v20;
    goto LABEL_20;
  }

  uint64_t v7 = "base config builtOnDate could not be parsed";
LABEL_19:
  *a2 = v7;
LABEL_20:
  *a3 = 0LL;
  a3[1] = 0LL;
  sub_1000041AC((uint64_t)&v18);
  sub_10000425C(&v19, v18);
LABEL_21:
  uint64_t v12 = (std::__shared_weak_count *)v20[1];
  if (v20[1])
  {
    char v13 = (unint64_t *)(v20[1] + 8);
    do
      std::string v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

  v16[0] = (void **)&v12;
  sub_1000100E4(v16);
  sub_1000041AC((uint64_t)&v14);
  sub_10000425C(&v15, v14);
}

  __int128 v10 = a2[4];
  if (v10 >= a2[5])
  {
    uint64_t result = sub_100070EB8(a2 + 3, (uint64_t)a3);
  }

  else
  {
    sub_10000C3E4(a2[4], (uint64_t)a3);
    uint64_t result = v10 + 16;
    a2[4] = v10 + 16;
  }

  a2[4] = result;
  return result;
}

uint64_t sub_10000544C@<X0>(uint64_t a1@<X0>, _OWORD **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  memset(a3, 170, 24);
  int v6 = operator new(0x48uLL);
  *a3 = v6;
  a3[1] = v5;
  uint64_t v7 = *a2;
  uint64_t v8 = *((void *)*a2 + 2);
  v6[2] = **a2;
  *((void *)v6 + 6) = v8;
  *uint64_t v7 = 0LL;
  v7[1] = 0LL;
  v7[2] = 0LL;
  *((void *)v6 + 8) = 0LL;
  *((_BYTE *)v6 + 56) = 0;
  uint64_t v9 = (uint64_t)v6 + 56;
  sub_1000041AC((uint64_t)v6 + 56);
  uint64_t result = sub_1000041AC(v9);
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

uint64_t *sub_1000054D0(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0LL;
  a4[1] = 0LL;
  a4[2] = a2;
  *a3 = a4;
  uint64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }

  uint64_t result = sub_10000558C(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

BOOL sub_100005524(uint64_t a1, const void **a2, const void **a3)
{
  int v3 = *((char *)a3 + 23);
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  if (v4 >= 0) {
    int v6 = a2;
  }
  else {
    int v6 = *a2;
  }
  if (v3 >= 0) {
    size_t v7 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v7 = (size_t)a3[1];
  }
  if (v3 >= 0) {
    uint64_t v8 = a3;
  }
  else {
    uint64_t v8 = *a3;
  }
  if (v7 >= v5) {
    size_t v9 = v5;
  }
  else {
    size_t v9 = v7;
  }
  int v10 = memcmp(v6, v8, v9);
  if (v10) {
    return v10 < 0;
  }
  else {
    return v5 < v7;
  }
}

uint64_t *sub_10000558C(uint64_t *result, uint64_t *a2)
{
  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24)) {
        return result;
      }
      int v3 = (uint64_t *)v2[2];
      int v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (int v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            size_t v9 = (uint64_t **)a2[2];
          }

          else
          {
            size_t v9 = (uint64_t **)v2[1];
            int v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              int v3 = (uint64_t *)v2[2];
            }

            v9[2] = v3;
            *(void *)(v2[2] + 8LL * (*(void *)v2[2] != (void)v2)) = v9;
            *size_t v9 = v2;
            v2[2] = (uint64_t)v9;
            int v3 = v9[2];
            uint64_t v2 = (uint64_t *)*v3;
          }

          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          *int v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8LL * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }

      else if (!v4 || (int v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          uint64_t *v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            int v3 = (uint64_t *)v2[2];
          }

          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8LL * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          int v3 = (uint64_t *)a2[2];
        }

        else
        {
          a2 = (uint64_t *)a2[2];
        }

        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        uint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8LL * (*(void *)v3[2] != (void)v3)) = v2;
        uint64_t *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }

      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      _BYTE *v5 = 1;
    }

    while (v3 != result);
  }

  return result;
}

void sub_100005724(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)off_100125390;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
  operator delete(v2);
}

void sub_100005758( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_100005768(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0LL;
}

uint64_t sub_100005770(uint64_t a1)
{
  unsigned int v1 = 1 << -(char)__clz(((unint64_t)a1 >> 30) - 1);
  if (a1 >= 1) {
    return v1;
  }
  else {
    return 0LL;
  }
}

double sub_100005794(uint64_t a1)
{
  double result = (double)((unint64_t)(a1 + 0x10000000) >> 29) * 0.5;
  if (!a1) {
    return 0.0;
  }
  return result;
}

_OWORD *sub_1000057BC(_OWORD *a1)
{
  a1[1] = 0u;
  uint64_t v2 = (uint64_t)(a1 + 1);
  *a1 = 0u;
  sub_100008EC0(&v7);
  sub_100005894(v2, &v7);
  int v3 = (std::__shared_weak_count *)*((void *)&v7 + 1);
  if (*((void *)&v7 + 1))
  {
    int v4 = (unint64_t *)(*((void *)&v7 + 1) + 8LL);
    do
      unint64_t v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  return a1;
}

void sub_100005878(_Unwind_Exception *a1)
{
}

uint64_t sub_100005894(uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  *(void *)a2 = 0LL;
  *((void *)a2 + 1) = 0LL;
  int v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  return a1;
}

uint64_t sub_1000058F8@<X0>(void *a1@<X8>)
{
  return sub_100008F90(a1);
}

void sub_100005948( unsigned __int8 **a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, __int128 *a4@<X8>, double a5@<D0>)
{
  if (*(_BYTE *)a2 != 1)
  {
    uint64_t v12 = qword_100131918;
    if (os_log_type_enabled((os_log_t)qword_100131918, OS_LOG_TYPE_ERROR)) {
      sub_1000D665C(a2, v12);
    }
    goto LABEL_31;
  }

  *(void *)&__int128 v63 = "name";
  unint64_t v72 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)std::string __p = v10;
  *(_OWORD *)&__p[16] = v10;
  sub_100008780(a2, (const std::string::value_type **)&v63, (uint64_t)__p);
  v66 = (unsigned __int8 *)a2;
  v67 = 0LL;
  uint64_t v68 = 0LL;
  uint64_t v69 = 0LL;
  unint64_t v70 = 0x8000000000000000LL;
  sub_100008AC8(&v66);
  if (sub_1000087E8((unsigned __int8 **)__p, &v66))
  {
    uint64_t v11 = sub_10009AE9C();
    if (!v11)
    {
LABEL_13:
      uint64_t v16 = qword_100131918;
      if (os_log_type_enabled((os_log_t)qword_100131918, OS_LOG_TYPE_ERROR)) {
        sub_1000D637C(a2, v16);
      }
LABEL_31:
      *(void *)a4 = 0LL;
      *((void *)a4 + 1) = 0LL;
      return;
    }
  }

  else
  {
    uint64_t v11 = (uint64_t)sub_100008924((unsigned __int8 **)__p);
  }

  if (*(_BYTE *)v11 != 3) {
    goto LABEL_13;
  }
  uint64_t v13 = *(void *)(v11 + 8);
  if (!v13) {
    goto LABEL_13;
  }
  *(void *)&__int128 v63 = "uuid";
  unint64_t v72 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v14 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)std::string __p = v14;
  *(_OWORD *)&__p[16] = v14;
  sub_100008780(a2, (const std::string::value_type **)&v63, (uint64_t)__p);
  v66 = (unsigned __int8 *)a2;
  v67 = 0LL;
  uint64_t v68 = 0LL;
  uint64_t v69 = 0LL;
  unint64_t v70 = 0x8000000000000000LL;
  sub_100008AC8(&v66);
  if (sub_1000087E8((unsigned __int8 **)__p, &v66))
  {
    uint64_t v15 = sub_10009AE9C();
    if (!v15) {
      goto LABEL_21;
    }
  }

  else
  {
    uint64_t v15 = (uint64_t)sub_100008924((unsigned __int8 **)__p);
  }

  if (*(_BYTE *)v15 != 3 || !*(void *)(v15 + 8))
  {
LABEL_21:
    uint64_t v19 = qword_100131918;
    if (os_log_type_enabled((os_log_t)qword_100131918, OS_LOG_TYPE_ERROR)) {
      sub_1000D63FC(a2, v19);
    }
    goto LABEL_31;
  }

  *(void *)&__int128 v63 = "type";
  unint64_t v72 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v17 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)std::string __p = v17;
  *(_OWORD *)&__p[16] = v17;
  sub_100008780(a2, (const std::string::value_type **)&v63, (uint64_t)__p);
  v66 = (unsigned __int8 *)a2;
  v67 = 0LL;
  uint64_t v68 = 0LL;
  uint64_t v69 = 0LL;
  unint64_t v70 = 0x8000000000000000LL;
  sub_100008AC8(&v66);
  if (sub_1000087E8((unsigned __int8 **)__p, &v66))
  {
    uint64_t v18 = sub_10009AE9C();
    if (!v18) {
      goto LABEL_29;
    }
  }

  else
  {
    uint64_t v18 = (uint64_t)sub_100008924((unsigned __int8 **)__p);
  }

  if (*(_BYTE *)v18 != 3 || (v20 = *(uint64_t **)(v18 + 8)) == 0LL)
  {
LABEL_29:
    uint64_t v23 = qword_100131918;
    if (os_log_type_enabled((os_log_t)qword_100131918, OS_LOG_TYPE_ERROR)) {
      sub_1000D647C(a2, v23);
    }
    goto LABEL_31;
  }

  *(void *)&__int128 v63 = "aggPeriod";
  unint64_t v72 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v21 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)std::string __p = v21;
  *(_OWORD *)&__p[16] = v21;
  sub_100008780(a2, (const std::string::value_type **)&v63, (uint64_t)__p);
  v66 = (unsigned __int8 *)a2;
  v67 = 0LL;
  uint64_t v68 = 0LL;
  uint64_t v69 = 0LL;
  unint64_t v70 = 0x8000000000000000LL;
  sub_100008AC8(&v66);
  if (!sub_1000087E8((unsigned __int8 **)__p, &v66))
  {
    uint64_t v22 = (uint64_t)sub_100008924((unsigned __int8 **)__p);
    goto LABEL_34;
  }

  uint64_t v22 = sub_10009AE9C();
  if (v22)
  {
LABEL_34:
    if (*(_BYTE *)v22 == 3 && *(void *)(v22 + 8)) {
      goto LABEL_40;
    }
  }

  unint64_t v24 = (os_log_s *)qword_100131918;
  if (os_log_type_enabled((os_log_t)qword_100131918, OS_LOG_TYPE_DEBUG)) {
    sub_1000D65F0(v24);
  }
  sub_100005064(__p, "Daily");
  sub_100008E5C((uint64_t)v64, (uint64_t)__p);
  unint64_t v25 = sub_100003F94((unsigned __int8 *)a2, "aggPeriod");
  sub_1000041AC((uint64_t)v64);
  unsigned __int8 v26 = *(_BYTE *)v25;
  *(_BYTE *)unint64_t v25 = v64[0];
  v64[0] = v26;
  v27 = (uint64_t *)v25[1];
  v25[1] = (uint64_t)v65;
  v65 = v27;
  sub_1000041AC((uint64_t)v25);
  sub_1000041AC((uint64_t)v64);
  sub_10000425C(&v65, v64[0]);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
LABEL_40:
  v28 = *a1;
  v29 = (std::__shared_weak_count *)a1[1];
  v66 = *a1;
  v67 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      unint64_t v31 = __ldxr(p_shared_owners);
    while (__stxr(v31 + 1, p_shared_owners));
  }

  if (!v28)
  {
    v41 = (os_log_s *)qword_100131918;
    if (os_log_type_enabled((os_log_t)qword_100131918, OS_LOG_TYPE_ERROR)) {
      sub_1000D64FC((uint64_t *)v13, v41, v42);
    }
    *(void *)a4 = 0LL;
    *((void *)a4 + 1) = 0LL;
    goto LABEL_93;
  }

  if (a5 <= 0.0) {
    a5 = 100.0;
  }
  __int128 v63 = 0uLL;
  int v32 = *((char *)v20 + 23);
  if (v32 < 0)
  {
    if (v20[1] != 9) {
      goto LABEL_81;
    }
    v34 = (uint64_t *)*v20;
    if (*(void *)*v20 != 0x7461676572676761LL || *(_BYTE *)(*v20 + 8) != 101) {
      goto LABEL_52;
    }
LABEL_70:
    v61[0] = *(_BYTE *)a2;
    v62 = *(uint64_t **)(a2 + 8);
    sub_1000041AC(a2);
    *(_BYTE *)a2 = 0;
    *(void *)(a2 + 8) = 0LL;
    sub_1000041AC((uint64_t)v61);
    sub_10009DA14((uint64_t)&v66, a3, (uint64_t)v61, (uint64_t)__p, a5);
    __int128 v44 = *(_OWORD *)__p;
    *(void *)std::string __p = 0LL;
    *(void *)&__p[8] = 0LL;
    v45 = (std::__shared_weak_count *)*((void *)&v63 + 1);
    __int128 v63 = v44;
    if (v45)
    {
      v46 = (unint64_t *)&v45->__shared_owners_;
      do
        unint64_t v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }

    v48 = *(std::__shared_weak_count **)&__p[8];
    if (*(void *)&__p[8])
    {
      v49 = (unint64_t *)(*(void *)&__p[8] + 8LL);
      do
        unint64_t v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }

    sub_1000041AC((uint64_t)v61);
    sub_10000425C(&v62, v61[0]);
    goto LABEL_83;
  }

  if (v32 != 9) {
    goto LABEL_81;
  }
  BOOL v33 = *v20 == 0x7461676572676761LL && *((_BYTE *)v20 + 8) == 101;
  v34 = v20;
  if (v33) {
    goto LABEL_70;
  }
LABEL_52:
  uint64_t v35 = *v34;
  int v36 = *((unsigned __int8 *)v34 + 8);
  if (v35 == 0x696F767265736572LL && v36 == 114)
  {
    v38 = a1[3];
    v60[0] = a1[2];
    v60[1] = v38;
    if (v38)
    {
      v39 = (unint64_t *)(v38 + 8);
      do
        unint64_t v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }

    sub_100055BA8((uint64_t)&v66, a3, a2, v60, (uint64_t)__p, a5);
    sub_100005894((uint64_t)&v63, (__int128 *)__p);
    sub_100007004((uint64_t)__p);
    sub_100007004((uint64_t)v60);
    goto LABEL_83;
  }

LABEL_81:
  if (!sub_100006170(v20, "identity"))
  {
    v52 = (os_log_s *)qword_100131918;
    if (os_log_type_enabled((os_log_t)qword_100131918, OS_LOG_TYPE_ERROR)) {
      sub_1000D6574((char *)v20 + 23, v20, v52);
    }
    goto LABEL_88;
  }

  sub_100099A44((uint64_t)&v66, a3, a2, (uint64_t)__p, a5);
  sub_100005894((uint64_t)&v63, (__int128 *)__p);
  sub_100007004((uint64_t)__p);
LABEL_83:
  if ((void)v63)
  {
    uint64_t v51 = *((void *)&v63 + 1);
    *(void *)a4 = v63;
    *((void *)a4 + 1) = v51;
    a4 = &v63;
  }

  else
  {
    v53 = (os_log_s *)qword_100131918;
    if (os_log_type_enabled((os_log_t)qword_100131918, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string __p = 136446466;
      *(void *)&__p[4] = v20;
      *(_WORD *)&__p[12] = 2080;
      *(void *)&__p[14] = v13;
      _os_log_error_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_ERROR,  "[Transform Factory] ERROR: %{public}s transform failed to initialize due to invalid or missing configuration elements '%s'",  __p,  0x16u);
    }
  }

LABEL_88:
  *(void *)a4 = 0LL;
  *((void *)a4 + 1) = 0LL;
  v54 = (std::__shared_weak_count *)*((void *)&v63 + 1);
  if (*((void *)&v63 + 1))
  {
    v55 = (unint64_t *)(*((void *)&v63 + 1) + 8LL);
    do
      unint64_t v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }

LABEL_93:
  v57 = v67;
  if (v67)
  {
    v58 = (unint64_t *)&v67->__shared_owners_;
    do
      unint64_t v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }

void sub_100006104( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
}

BOOL sub_100006170(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1LL) {
        goto LABEL_10;
      }
      a1 = (void *)*a1;
      return memcmp(a1, __s, v4) == 0;
    }
  }

  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1LL) {
LABEL_10:
    }
      sub_100008DD4();
    return memcmp(a1, __s, v4) == 0;
  }

  return 0LL;
}

uint64_t sub_100006200@<X0>( uint64_t a1@<X0>, int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, void *a6@<X8>)
{
  *a6 = 0LL;
  a6[1] = 0LL;
  a6[2] = 0LL;
  memset(__b, 170, sizeof(__b));
  uint64_t v12 = (std::__shared_weak_count *)operator new(0x28uLL);
  v12->__shared_owners_ = 0LL;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  v12->__shared_weak_owners_ = 0LL;
  v12[1].__vftable = (std::__shared_weak_count_vtbl *)off_100125498;
  v12->__vftable = (std::__shared_weak_count_vtbl *)off_100125448;
  v12[1].__shared_owners_ = (uint64_t)a6;
  __int128 v21 = v12;
  uint64_t v22 = &v12[1].__vftable;
  uint64_t v23 = v12;
  do
    unint64_t v14 = __ldxr(p_shared_owners);
  while (__stxr(v14 + 1, p_shared_owners));
  sub_100006EC4((uint64_t)__b, (uint64_t)&v22, a3, a5);
  uint64_t v15 = v23;
  if (v23)
  {
    uint64_t v16 = (unint64_t *)&v23->__shared_owners_;
    do
      unint64_t v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

  if (v21)
  {
    uint64_t v18 = (unint64_t *)&v21->__shared_owners_;
    do
      unint64_t v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }

  sub_1000063D0(__b, a1, a2 >= 0, a4, a2 & ~(a2 >> 31), 0LL);
  return sub_100008750((uint64_t)__b);
}

void sub_10000638C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

uint64_t sub_1000063D0(void (****a1)(void), uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  switch(*(_BYTE *)a2)
  {
    case 0:
      uint64_t v11 = (uint64_t (*)(void))(**a1)[1];
      return v11();
    case 1:
      uint64_t v12 = **a1;
      if (!*(void *)(*(void *)(a2 + 8) + 16LL))
      {
        uint64_t v11 = (uint64_t (*)(void))v12[1];
        return v11();
      }

      if (a3)
      {
        v12[1]();
        unsigned int v13 = a6 + a5;
        unint64_t v14 = a1 + 76;
        if (*((char *)a1 + 631) < 0)
        {
          unint64_t v15 = (unint64_t)a1[77];
          if (v15 >= v13) {
            goto LABEL_7;
          }
        }

        else
        {
          unint64_t v15 = *((unsigned __int8 *)a1 + 631);
          if (v13 <= v15)
          {
LABEL_7:
            uint64_t v16 = *(void **)(a2 + 8);
            unint64_t v17 = (void *)*v16;
            if (v16[2] == 1LL)
            {
              uint64_t v18 = (void *)*v16;
            }

            else
            {
              unint64_t v66 = 0LL;
              do
              {
                v67 = a1 + 76;
                ((void (*)(void (***)(void), void **, void))(**a1)[1])(*a1, v67, (a6 + a5));
                ((void (*)(void (***)(void), uint64_t))***a1)(*a1, 34LL);
                sub_10000705C((uint64_t)a1, v17 + 4, a4);
                ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, ": ", 3LL);
                sub_1000063D0(a1, v17 + 7, 1LL, a4, a5, (a6 + a5));
                ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, ",\n", 2LL);
                uint64_t v68 = (void *)v17[1];
                if (v68)
                {
                  do
                  {
                    uint64_t v18 = v68;
                    uint64_t v68 = (void *)*v68;
                  }

                  while (v68);
                }

                else
                {
                  do
                  {
                    uint64_t v18 = (void *)v17[2];
                    BOOL v50 = *v18 == (void)v17;
                    unint64_t v17 = v18;
                  }

                  while (!v50);
                }

                ++v66;
                uint64_t v16 = *(void **)(a2 + 8);
                unint64_t v17 = v18;
              }

              while (v66 < v16[2] - 1LL);
            }

            uint64_t v69 = v16 + 1;
            if (v18 == v69) {
              sub_1000D6704();
            }
            unint64_t v70 = (void *)v18[1];
            if (v70)
            {
              do
              {
                v71 = v70;
                unint64_t v70 = (void *)*v70;
              }

              while (v70);
            }

            else
            {
              v73 = v18;
              do
              {
                v71 = (void *)v73[2];
                BOOL v50 = *v71 == (void)v73;
                v73 = v71;
              }

              while (!v50);
            }

            if (v71 != v69) {
              sub_1000D672C();
            }
            v74 = a1 + 76;
            ((void (*)(void (***)(void), void **, void))(**a1)[1])(*a1, v74, (a6 + a5));
            ((void (*)(void (***)(void), uint64_t))***a1)(*a1, 34LL);
            sub_10000705C((uint64_t)a1, v18 + 4, a4);
            ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, ": ", 3LL);
            sub_1000063D0(a1, v18 + 7, 1LL, a4, a5, (a6 + a5));
            ((void (*)(void (***)(void), uint64_t))***a1)(*a1, 10LL);
            v65 = (**a1)[1];
            goto LABEL_108;
          }
        }

        std::string::resize((std::string *)(a1 + 76), 2 * v15, 32);
        goto LABEL_7;
      }

      (*v12)();
      uint64_t v45 = *(void *)(a2 + 8);
      v46 = *(void **)v45;
      if (*(void *)(v45 + 16) != 1LL)
      {
        unint64_t v47 = 0LL;
        do
        {
          ((void (*)(void (***)(void), uint64_t))***a1)(*a1, 34LL);
          sub_10000705C((uint64_t)a1, v46 + 4, a4);
          ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, ":", 2LL);
          sub_1000063D0(a1, v46 + 7, 0LL, a4, a5, a6);
          ((void (*)(void (***)(void), uint64_t))***a1)(*a1, 44LL);
          v48 = (void *)v46[1];
          v49 = v46;
          if (v48)
          {
            do
            {
              v46 = v48;
              v48 = (void *)*v48;
            }

            while (v48);
          }

          else
          {
            do
            {
              v46 = (void *)v49[2];
              BOOL v50 = *v46 == (void)v49;
              v49 = v46;
            }

            while (!v50);
          }

          ++v47;
          uint64_t v45 = *(void *)(a2 + 8);
        }

        while (v47 < *(void *)(v45 + 16) - 1LL);
      }

      uint64_t v51 = (void *)(v45 + 8);
      if (v46 == v51) {
        sub_1000D6754();
      }
      v52 = (void *)v46[1];
      if (v52)
      {
        do
        {
          v53 = v52;
          v52 = (void *)*v52;
        }

        while (v52);
      }

      else
      {
        unint64_t v72 = v46;
        do
        {
          v53 = (void *)v72[2];
          BOOL v50 = *v53 == (void)v72;
          unint64_t v72 = v53;
        }

        while (!v50);
      }

      if (v53 != v51) {
        sub_1000D677C();
      }
      ((void (*)(void (***)(void), uint64_t))***a1)(*a1, 34LL);
      sub_10000705C((uint64_t)a1, v46 + 4, a4);
      ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, ":", 2LL);
      sub_1000063D0(a1, v46 + 7, 0LL, a4, a5, a6);
LABEL_109:
      int v32 = (uint64_t (*)(void))***a1;
      return v32();
    case 2:
      unint64_t v19 = *(uint64_t **)(a2 + 8);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      uint64_t v22 = **a1;
      if (v20 == v21)
      {
        uint64_t v11 = (uint64_t (*)(void))v22[1];
        return v11();
      }

      if (a3)
      {
        v22[1]();
        unsigned int v23 = a6 + a5;
        unint64_t v24 = a1 + 76;
        if (*((char *)a1 + 631) < 0)
        {
          unint64_t v25 = (unint64_t)a1[77];
          if (v25 >= v23) {
            goto LABEL_13;
          }
        }

        else
        {
          unint64_t v25 = *((unsigned __int8 *)a1 + 631);
          if (v23 <= v25)
          {
LABEL_13:
            unsigned __int8 v26 = *(uint64_t **)(a2 + 8);
            uint64_t v28 = *v26;
            uint64_t v27 = v26[1];
            if (v28 != v27 - 16)
            {
              do
              {
                v29 = a1 + 76;
                ((void (*)(void (***)(void), void **, void))(**a1)[1])(*a1, v29, (a6 + a5));
                sub_1000063D0(a1, v28, 1LL, a4, a5, (a6 + a5));
                ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, ",\n", 2LL);
                v28 += 16LL;
                v30 = *(uint64_t **)(a2 + 8);
                uint64_t v27 = v30[1];
              }

              while (v28 != v27 - 16);
              uint64_t v28 = *v30;
            }

            if (v28 == v27) {
              sub_1000D67A4();
            }
            unint64_t v31 = a1 + 76;
            ((void (*)(void (***)(void), void **, void))(**a1)[1])(*a1, v31, (a6 + a5));
            sub_1000063D0(a1, *(void *)(*(void *)(a2 + 8) + 8LL) - 16LL, 1LL, a4, a5, (a6 + a5));
            ((void (*)(void (***)(void), uint64_t))***a1)(*a1, 10LL);
            ((void (*)(void (***)(void), void *, void))(**a1)[1])(*a1, v24, a6);
            goto LABEL_95;
          }
        }

        std::string::resize((std::string *)(a1 + 76), 2 * v25, 32);
        goto LABEL_13;
      }

      (*v22)();
      v54 = *(uint64_t **)(a2 + 8);
      uint64_t v56 = *v54;
      uint64_t v55 = v54[1];
      if (v56 == v55 - 16)
      {
        uint64_t v57 = v56;
      }

      else
      {
        uint64_t v57 = v56;
        do
        {
          sub_1000063D0(a1, v57, 0LL, a4, a5, a6);
          ((void (*)(void (***)(void), uint64_t))***a1)(*a1, 44LL);
          v57 += 16LL;
          v58 = *(uint64_t **)(a2 + 8);
          uint64_t v55 = v58[1];
        }

        while (v57 != v55 - 16);
        uint64_t v56 = *v58;
      }

      if (v56 == v55) {
        sub_1000D67CC();
      }
      sub_1000063D0(a1, v57, 0LL, a4, a5, a6);
LABEL_95:
      int v32 = (uint64_t (*)(void))***a1;
      return v32();
    case 3:
      (***a1)();
      sub_10000705C((uint64_t)a1, *(uint64_t **)(a2 + 8), a4);
      int v32 = (uint64_t (*)(void))***a1;
      return v32();
    case 4:
      uint64_t v11 = (uint64_t (*)(void))(**a1)[1];
      return v11();
    case 5:
      return sub_100007738(a1, *(void *)(a2 + 8));
    case 6:
      return sub_100007914(a1, *(void *)(a2 + 8));
    case 7:
      return sub_100007A50((char *)a1, *(double *)(a2 + 8));
    case 8:
      v34 = (**a1)[1];
      if (a3)
      {
        v34();
        uint64_t v35 = (a6 + a5);
        int v36 = a1 + 76;
        if (*((char *)a1 + 631) < 0)
        {
          unint64_t v37 = (unint64_t)a1[77];
          if (v37 >= v35)
          {
            v38 = (uint64_t (***)(void))*a1;
            goto LABEL_62;
          }
        }

        else
        {
          unint64_t v37 = *((unsigned __int8 *)a1 + 631);
          if (v35 <= v37)
          {
            v38 = (uint64_t (***)(void))*a1;
            v39 = a1 + 76;
            goto LABEL_63;
          }
        }

        std::string::resize((std::string *)(a1 + 76), 2 * v37, 32);
        v38 = (uint64_t (***)(void))*a1;
        v39 = a1 + 76;
        if ((*((char *)a1 + 631) & 0x80000000) == 0)
        {
LABEL_63:
          ((void (*)(uint64_t (***)(void), void **, uint64_t))(*v38)[1])(v38, v39, v35);
          ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, "bytes: [", 10LL);
          unint64_t v59 = *(unsigned __int8 ***)(a2 + 8);
          v61 = *v59;
          v60 = v59[1];
          if (v61 != v60)
          {
            if (v61 != v60 - 1)
            {
              do
              {
                unsigned int v62 = *v61++;
                sub_10000768C(a1, v62);
                ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, ", ", 2LL);
              }

              while (v61 != (unsigned __int8 *)(*(void *)(*(void *)(a2 + 8) + 8LL) - 1LL));
            }

            sub_10000768C(a1, *v61);
          }

          ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, "],\n", 3LL);
          __int128 v63 = a1 + 76;
          ((void (*)(void (***)(void), void **, uint64_t))(**a1)[1])(*a1, v63, v35);
          ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, "subtype: ", 11LL);
          uint64_t v64 = *(void *)(a2 + 8);
          if (*(_BYTE *)(v64 + 25)) {
            sub_10000768C(a1, *(unsigned __int8 *)(v64 + 24));
          }
          else {
            ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, "null", 4LL);
          }
          ((void (*)(void (***)(void), uint64_t))***a1)(*a1, 10LL);
          v65 = (**a1)[1];
LABEL_108:
          v65();
          goto LABEL_109;
        }

LABEL_62:
        v39 = (void **)*v36;
        goto LABEL_63;
      }

      v34();
      unint64_t v40 = *(unsigned __int8 ***)(a2 + 8);
      uint64_t v42 = *v40;
      v41 = v40[1];
      if (v42 != v41)
      {
        while (v42 != v41 - 1)
        {
          unsigned int v43 = *v42++;
          sub_10000768C(a1, v43);
          ((void (*)(void (***)(void), uint64_t))***a1)(*a1, 44LL);
          v41 = *(unsigned __int8 **)(*(void *)(a2 + 8) + 8LL);
        }

        sub_10000768C(a1, *v42);
      }

      ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, "],subtype:", 12LL);
      uint64_t v44 = *(void *)(a2 + 8);
      if (*(_BYTE *)(v44 + 25))
      {
        sub_10000768C(a1, *(unsigned __int8 *)(v44 + 24));
        goto LABEL_109;
      }

      uint64_t v11 = (uint64_t (*)(void))(**a1)[1];
      return v11();
    case 9:
      uint64_t v11 = (uint64_t (*)(void))(**a1)[1];
      return v11();
    default:
      sub_1000D66DC();
  }

void sub_100006E6C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100125448;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100006E7C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100125448;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_100006E9C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 16LL))(a1 + 24);
}

void sub_100006EAC(uint64_t a1, std::string::value_type a2)
{
}

std::string *sub_100006EB4(uint64_t a1, const std::string::value_type *a2, std::string::size_type a3)
{
  return std::string::append(*(std::string **)(a1 + 8), a2, a3);
}

uint64_t sub_100006EC4(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)a2 = 0LL;
  *(void *)(a2 + 8) = 0LL;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  __int128 v7 = localeconv();
  *(void *)(a1 + 80) = v7;
  thousands_sep = v7->thousands_sep;
  if (thousands_sep) {
    LOBYTE(thousands_sep) = *thousands_sep;
  }
  *(_BYTE *)(a1 + 88) = (_BYTE)thousands_sep;
  decimal_point = v7->decimal_point;
  *(_OWORD *)(a1 + 90) = 0u;
  *(_BYTE *)(a1 + 89) = (_BYTE)decimal_point;
  *(_OWORD *)(a1 + 106) = 0u;
  *(_OWORD *)(a1 + 122) = 0u;
  *(_OWORD *)(a1 + 138) = 0u;
  *(_OWORD *)(a1 + 154) = 0u;
  *(_OWORD *)(a1 + 170) = 0u;
  *(_OWORD *)(a1 + 186) = 0u;
  *(_OWORD *)(a1 + 202) = 0u;
  *(_OWORD *)(a1 + 218) = 0u;
  *(_OWORD *)(a1 + 234) = 0u;
  *(_OWORD *)(a1 + 250) = 0u;
  *(_OWORD *)(a1 + 266) = 0u;
  *(_OWORD *)(a1 + 282) = 0u;
  *(_OWORD *)(a1 + 298) = 0u;
  *(_OWORD *)(a1 + 314) = 0u;
  *(_OWORD *)(a1 + 330) = 0u;
  *(_OWORD *)(a1 + 346) = 0u;
  *(_OWORD *)(a1 + 362) = 0u;
  *(_OWORD *)(a1 + 378) = 0u;
  *(_OWORD *)(a1 + 394) = 0u;
  *(_OWORD *)(a1 + 410) = 0u;
  *(_OWORD *)(a1 + 426) = 0u;
  *(_OWORD *)(a1 + 442) = 0u;
  *(_OWORD *)(a1 + 458) = 0u;
  *(_OWORD *)(a1 + 474) = 0u;
  *(_OWORD *)(a1 + 490) = 0u;
  *(_OWORD *)(a1 + 506) = 0u;
  *(_OWORD *)(a1 + 522) = 0u;
  *(_OWORD *)(a1 + 538) = 0u;
  *(_OWORD *)(a1 + 554) = 0u;
  *(_OWORD *)(a1 + 570) = 0u;
  *(_OWORD *)(a1 + 586) = 0u;
  *(_BYTE *)(a1 + 602) = a3;
  __int128 v10 = (int8x16_t *)operator new(0x208uLL);
  *(void *)(a1 + 608) = v10;
  *(void *)(a1 + 624) = 0x8000000000000208LL;
  int8x16_t v11 = vdupq_n_s8(a3);
  *(void *)(a1 + 616) = 512LL;
  *__int128 v10 = v11;
  v10[1] = v11;
  v10[2] = v11;
  v10[3] = v11;
  v10[4] = v11;
  v10[5] = v11;
  v10[6] = v11;
  v10[7] = v11;
  v10[8] = v11;
  v10[9] = v11;
  v10[10] = v11;
  v10[11] = v11;
  v10[12] = v11;
  v10[13] = v11;
  v10[14] = v11;
  v10[15] = v11;
  v10[16] = v11;
  v10[17] = v11;
  v10[18] = v11;
  v10[19] = v11;
  v10[20] = v11;
  v10[21] = v11;
  v10[22] = v11;
  v10[23] = v11;
  v10[24] = v11;
  v10[25] = v11;
  v10[26] = v11;
  v10[27] = v11;
  v10[28] = v11;
  v10[29] = v11;
  v10[30] = v11;
  v10[31] = v11;
  v10[32].i8[0] = 0;
  *(_DWORD *)(a1 + 632) = a4;
  return a1;
}

void sub_100006FF0(_Unwind_Exception *a1)
{
}

uint64_t sub_100007004(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      unint64_t v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }

  return a1;
}

uint64_t sub_10000705C(uint64_t result, uint64_t *a2, int a3)
{
  char v45 = 0;
  LOBYTE(v3) = *((char *)a2 + 23) < 0;
  uint64_t v4 = *((unsigned __int8 *)a2 + 23);
  if ((v4 & 0x80u) != 0LL) {
    uint64_t v4 = a2[1];
  }
  if (v4)
  {
    __int128 v7 = (void *)result;
    unint64_t v8 = 0LL;
    uint64_t v9 = 0LL;
    uint64_t v10 = 0LL;
    uint64_t v11 = 0LL;
    unsigned int v46 = -1431655766;
    uint64_t v12 = result + 90;
    while (1)
    {
      if ((v3 & 1) != 0) {
        unsigned int v13 = (uint64_t *)*a2;
      }
      else {
        unsigned int v13 = a2;
      }
      int v14 = *((unsigned __int8 *)v13 + v8);
      double result = sub_100007AC4(&v45, &v46, v14);
      if ((_DWORD)result == 1)
      {
        int v16 = *((_DWORD *)v7 + 158);
        if ((v16 - 1) >= 2)
        {
          if (!v16)
          {
            unint64_t v43 = 0xAAAAAAAAAAAAAAAALL;
            uint64_t v44 = 0x3AAAAAAAAAAAAAALL;
            *(void *)__str = 0xAAAAAAAA00000000LL;
            snprintf(__str, 3uLL, "%.2X", v14);
            exception = __cxa_allocate_exception(0x20uLL);
            std::to_string(&v37, v8);
            uint64_t v27 = std::string::insert(&v37, 0LL, "invalid UTF-8 byte at index ");
            __int128 v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
            v38.__r_.__value_.__l.__cap_ = v27->__r_.__value_.__l.__cap_;
            *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v28;
            v27->__r_.__value_.__l.__size_ = 0LL;
            v27->__r_.__value_.__l.__cap_ = 0LL;
            v27->__r_.__value_.__r.__words[0] = 0LL;
            v29 = std::string::append(&v38, ": 0x");
            __int128 v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
            v39.__r_.__value_.__l.__cap_ = v29->__r_.__value_.__l.__cap_;
            *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v30;
            v29->__r_.__value_.__l.__size_ = 0LL;
            v29->__r_.__value_.__l.__cap_ = 0LL;
            v29->__r_.__value_.__r.__words[0] = 0LL;
            if (v44 >= 0) {
              unint64_t v31 = __str;
            }
            else {
              unint64_t v31 = *(char **)__str;
            }
            if (v44 >= 0) {
              std::string::size_type v32 = HIBYTE(v44);
            }
            else {
              std::string::size_type v32 = v43;
            }
            BOOL v33 = std::string::append(&v39, v31, v32);
            __int128 v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
            std::string::size_type cap = v33->__r_.__value_.__l.__cap_;
            __int128 v40 = v34;
            v33->__r_.__value_.__l.__size_ = 0LL;
            v33->__r_.__value_.__l.__cap_ = 0LL;
            v33->__r_.__value_.__r.__words[0] = 0LL;
            sub_100005128(316, (uint64_t)&v40, exception);
          }

          sub_1000D681C();
        }

        uint64_t v17 = v9 != 0;
        if (v16 == 1)
        {
          uint64_t v18 = v12 + v10;
          if (a3)
          {
            *(_DWORD *)uint64_t v18 = 1717990748;
            *(_WORD *)(v18 + 4) = 25702;
            v10 += 6LL;
          }

          else
          {
            v10 += 3LL;
            *(_WORD *)uint64_t v18 = -16401;
            *(_BYTE *)(v18 + 2) = -67;
          }

          if ((unint64_t)(v10 - 500) <= 0xC)
          {
            double result = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v7 + 8LL))(*v7, v12, v10);
            uint64_t v10 = 0LL;
          }
        }

        uint64_t v9 = 0LL;
        v8 -= v17;
        char v45 = 0;
        uint64_t v11 = v10;
      }

      else if ((_DWORD)result)
      {
        if ((a3 & 1) == 0)
        {
          else {
            unint64_t v19 = (uint64_t *)*a2;
          }
          *(_BYTE *)(v12 + v11++) = *((_BYTE *)v19 + v8);
        }

        ++v9;
      }

      else
      {
        switch(v46)
        {
          case 8u:
            __int16 v15 = 25180;
            goto LABEL_43;
          case 9u:
            __int16 v15 = 29788;
            goto LABEL_43;
          case 0xAu:
            __int16 v15 = 28252;
            goto LABEL_43;
          case 0xBu:
            goto LABEL_29;
          case 0xCu:
            __int16 v15 = 26204;
            goto LABEL_43;
          case 0xDu:
            __int16 v15 = 29276;
            goto LABEL_43;
          default:
            if (v46 == 34)
            {
              __int16 v15 = 8796;
              goto LABEL_43;
            }

            if (v46 == 92)
            {
              __int16 v15 = 23644;
LABEL_43:
              *(_WORD *)(v12 + v11) = v15;
              v11 += 2LL;
              goto LABEL_44;
            }

LABEL_29:
            if (v46 > 0x7E) {
              int v20 = a3;
            }
            else {
              int v20 = 0;
            }
            if (v46 < 0x20 || v20)
            {
              unint64_t v24 = (char *)(v12 + v11);
              if (HIWORD(v46))
              {
                double result = snprintf( v24,  0xDuLL,  "\\u%04x\\u%04x",  (unsigned __int16)((v46 >> 10) - 10304),  v46 & 0x3FF | 0xDC00);
                v11 += 12LL;
              }

              else
              {
                double result = snprintf(v24, 7uLL, "\\u%04x", v46);
                v11 += 6LL;
              }
            }

            else
            {
              else {
                uint64_t v21 = (uint64_t *)*a2;
              }
              *(_BYTE *)(v12 + v11++) = *((_BYTE *)v21 + v8);
            }

  v29 = a2[4];
  if (v29 >= a2[5])
  {
    __int128 v30 = sub_100070EB8(a2 + 3, (uint64_t)&v38);
  }

  else
  {
    sub_10000C3E4(a2[4], (uint64_t)&v38);
    __int128 v30 = v29 + 16;
    a2[4] = v29 + 16;
  }

  a2[4] = v30;
  sub_1000041AC((uint64_t)&v38);
  sub_10000425C((uint64_t **)&v39, v38);
}

    *a3 = v17;
    return v5;
  }

  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }

  uint64_t v11 = a2[1];
  if (v11)
  {
    uint64_t v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      uint64_t v12 = (uint64_t *)*v12;
    }

    while (v12);
  }

  else
  {
    unint64_t v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      int v14 = *a4 == (void)v19;
      unint64_t v19 = a4;
    }

    while (!v14);
  }

  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 8))
  {
    int v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v21 = (uint64_t *)v20;
          int v22 = *(_DWORD *)(v20 + 32);
          if (v6 >= v22) {
            break;
          }
          int v20 = *v21;
          unint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }

        if (v22 >= v6) {
          break;
        }
        unint64_t v5 = v21 + 1;
        int v20 = v21[1];
      }

      while (v20);
    }

    else
    {
      uint64_t v21 = a1 + 1;
    }

LABEL_44:
            if ((unint64_t)(v11 - 500) > 0xC)
            {
              uint64_t v9 = 0LL;
              uint64_t v10 = v11;
            }

            else
            {
              double result = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v7 + 8LL))(*v7, v12, v11);
              uint64_t v11 = 0LL;
              uint64_t v10 = 0LL;
              uint64_t v9 = 0LL;
            }

            break;
        }
      }

      ++v8;
      int v22 = *((char *)a2 + 23);
      unsigned int v3 = v22 >> 31;
      unint64_t v23 = a2[1];
      if (v22 >= 0) {
        unint64_t v23 = *((unsigned __int8 *)a2 + 23);
      }
      if (v8 >= v23)
      {
        if (v45)
        {
          int v25 = *((_DWORD *)v7 + 158);
          switch(v25)
          {
            case 1:
              (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v7 + 8LL))(*v7, v12, v10);
              return (*(uint64_t (**)(void))(*(void *)*v7 + 8LL))();
            case 2:
              return (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v7 + 8LL))(*v7, v12, v10);
            case 0:
              unint64_t v43 = 0xAAAAAAAAAAAAAAAALL;
              uint64_t v44 = 0x3AAAAAAAAAAAAAALL;
              *(void *)__str = 0xAAAAAAAA00000000LL;
              uint64_t v35 = (uint64_t *)*a2;
              if (v22 >= 0) {
                uint64_t v35 = a2;
              }
              snprintf(__str, 3uLL, "%.2X", *((unsigned __int8 *)v35 + v23 - 1));
              int v36 = __cxa_allocate_exception(0x20uLL);
              std::operator+<char>(&v40, "incomplete UTF-8 string; last byte: 0x", __str);
              sub_100005128(316, (uint64_t)&v40, v36);
            default:
              sub_1000D67F4();
          }
        }

        else if (v11)
        {
          return (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v7 + 8LL))(*v7, v12, v11);
        }

        return result;
      }
    }
  }

  return result;
}

    int v25 = 0;
    unsigned __int8 v26 = 1;
    if (!v16) {
      goto LABEL_46;
    }
LABEL_45:
    if (*v16) {
      goto LABEL_64;
    }
LABEL_46:
    uint64_t v27 = (unsigned __int16 *)(v3 + 224);
    __int128 v28 = *(char *)(v3 + 247);
    if (v28 < 0)
    {
      if (*(void *)(v3 + 232) != 3LL)
      {
LABEL_57:
        std::string::size_type v32 = 0;
LABEL_58:
        sub_1000235D8(*(void *)(v3 + 48), v20 | v25 | v21, v32);
        BOOL v33 = **(void (****)(void))(v3 + 128);
        if ((v26 & 1) != 0)
        {
          if (v32) {
            __int128 v34 = v33[11];
          }
          else {
            __int128 v34 = v33[10];
          }
          v34();
        }

        else
        {
          v33[12]();
        }

        goto LABEL_64;
      }

      uint64_t v27 = *(unsigned __int16 **)v27;
    }

    else if (v28 != 3)
    {
      goto LABEL_57;
    }

    v29 = *v27;
    __int128 v30 = *((unsigned __int8 *)v27 + 2);
    std::string::size_type v32 = v29 == 28769 && v30 == 105;
    goto LABEL_58;
  }

      unsigned int v13 = "parent config uuid and tasked config parentUuid do not match";
      goto LABEL_45;
    }

    unint64_t v66 = "error";
    uint64_t v69 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&int v36 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v36 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)buf = v36;
    uint64_t v68 = v36;
    sub_100008780((uint64_t)&v47, &v66, (uint64_t)buf);
    v61 = &v47;
    unsigned int v62 = 0LL;
    __int128 v63 = 0LL;
    uint64_t v64 = 0LL;
    v65 = 0x8000000000000000LL;
    sub_100008AC8((unsigned __int8 **)&v61);
    if (sub_1000087E8((unsigned __int8 **)buf, (unsigned __int8 **)&v61))
    {
      std::string v37 = sub_10009AE9C();
      if (!v37) {
        goto LABEL_50;
      }
    }

    else
    {
      std::string v37 = (uint64_t)sub_100008924((unsigned __int8 **)buf);
    }

    if (*(_BYTE *)v37 == 3)
    {
      std::string v38 = *(const char **)(v37 + 8);
LABEL_51:
      std::string v39 = (os_log_s *)qword_100131940;
      if (os_log_type_enabled((os_log_t)qword_100131940, OS_LOG_TYPE_INFO))
      {
        if (v38)
        {
          if (v38[23] < 0) {
            std::string v38 = *(const char **)v38;
          }
        }

        else
        {
          std::string v38 = "";
        }

        *(_DWORD *)buf = 136315138;
        *(void *)&buf[4] = v38;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, "[CD] Market: Market unknown: %s", buf, 0xCu);
      }

      sub_10000DDFC((uint64_t)v45, "MarketNA");
      __int128 v40 = sub_100003F94((unsigned __int8 *)a2, "market");
      sub_1000041AC((uint64_t)v45);
      v41 = *(_BYTE *)v40;
      *(_BYTE *)__int128 v40 = v45[0];
      v45[0] = v41;
      uint64_t v42 = (uint64_t *)v40[1];
      v40[1] = (uint64_t)v46;
      unsigned int v46 = v42;
      sub_1000041AC((uint64_t)v40);
      sub_1000041AC((uint64_t)v45);
      sub_10000425C(&v46, v45[0]);
LABEL_58:
      sub_1000041AC((uint64_t)&v47);
      sub_10000425C(&v48, v47);
LABEL_59:
      sub_1000041AC((uint64_t)&v51);
      sub_10000425C(&v52, v51);
LABEL_60:
      sub_1000041AC((uint64_t)&v55);
      sub_10000425C(&v56, v55);
      goto LABEL_61;
    }

void sub_1000075C4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25, uint64_t a26, void *a27, uint64_t a28, int a29, __int16 a30, char a31, char a32, uint64_t a33, void *__p, uint64_t a35, int a36, __int16 a37, char a38, char a39)
{
  if (a39 < 0)
  {
    operator delete(__p);
    if ((v40 & 1) == 0)
    {
LABEL_6:
      _Unwind_Resume(a1);
    }
  }

  else if (!v40)
  {
    goto LABEL_6;
  }

  __cxa_free_exception(v39);
  goto LABEL_6;
}

uint64_t sub_10000768C(void *a1, unsigned int a2)
{
  if (!a2) {
    return (**(uint64_t (***)(void, uint64_t))*a1)(*a1, 48LL);
  }
  LOBYTE(v2) = a2;
  if (a2 >= 0xA)
  {
    if (a2 >= 0x64)
    {
      *(_WORD *)((char *)a1 + 17) = *(_WORD *)&a00010203040506[2 * (a2 - 100 * ((41 * a2) >> 12))];
      unint64_t v5 = (char *)a1 + 17;
      unsigned int v2 = (41 * a2) >> 12;
      goto LABEL_10;
    }

    uint64_t v3 = 2LL;
  }

  else
  {
    uint64_t v3 = 1LL;
  }

  unint64_t v5 = (char *)a1 + v3 + 16;
  if (a2 < 0xA)
  {
LABEL_10:
    *(v5 - 1) = v2 | 0x30;
    return (*(uint64_t (**)(void))(*(void *)*a1 + 8LL))(*a1);
  }

  *((_WORD *)v5 - 1) = *(_WORD *)&a00010203040506[2 * a2];
  return (*(uint64_t (**)(void))(*(void *)*a1 + 8LL))(*a1);
}

uint64_t sub_100007738(void *a1, unint64_t a2)
{
  if (!a2) {
    return (**(uint64_t (***)(void, uint64_t))*a1)(*a1, 48LL);
  }
  unint64_t v2 = a2;
  uint64_t v3 = a1 + 2;
  if ((v2 & 0x8000000000000000LL) != 0)
  {
    *uint64_t v3 = 45;
    unint64_t v2 = -(uint64_t)v2;
    if (v2 >= 0xA)
    {
      int v6 = 4;
      unint64_t v10 = v2;
      while (1)
      {
        if (v10 <= 0x63)
        {
          v6 -= 2;
          goto LABEL_24;
        }

        if (v10 <= 0x3E7) {
          break;
        }
        if (v10 >> 4 < 0x271) {
          goto LABEL_24;
        }
        v6 += 4;
        BOOL v9 = v10 >= 0x186A0;
        v10 /= 0x2710uLL;
        if (!v9)
        {
          v6 -= 3;
          goto LABEL_24;
        }
      }

      --v6;
    }

    else
    {
      int v6 = 1;
    }

LABEL_24:
    unsigned int v7 = v6 + 1;
  }

  else
  {
    if (v2 < 0xA)
    {
      uint64_t v4 = (char *)a1 + 17;
LABEL_33:
      *(v4 - 1) = v2 + 48;
      return (*(uint64_t (**)(void))(*(void *)*a1 + 8LL))(*a1);
    }

    unsigned int v7 = 4;
    unint64_t v8 = v2;
    while (1)
    {
      if (v8 <= 0x63)
      {
        v7 -= 2;
        goto LABEL_25;
      }

      if (v8 <= 0x3E7) {
        break;
      }
      if (v8 >> 4 < 0x271) {
        goto LABEL_25;
      }
      v7 += 4;
      BOOL v9 = v8 >= 0x186A0;
      v8 /= 0x2710uLL;
      if (!v9)
      {
        v7 -= 3;
        goto LABEL_25;
      }
    }

    --v7;
  }

    int v16 = (os_log_s *)qword_1001318E8;
    if (os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_DEFAULT))
    {
      else {
        uint64_t v17 = (void *)a2[1];
      }
      int v22 = 136446466;
      unint64_t v23 = v17;
      unint64_t v24 = 2082;
      int v25 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "[CadenceManager] ==== BOOT STATE: OS UPDATE (previous: %{public}s, current: %{public}s) ====",  (uint8_t *)&v22,  0x16u);
    }

    return 1LL;
  }

  int v14 = (os_log_s *)qword_1001318E8;
  __int16 v15 = 0LL;
  if (os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v22) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "[CadenceManager] ==== BOOT STATE: NO DATA ====",  (uint8_t *)&v22,  2u);
    return 0LL;
  }

  return v15;
}

        unint64_t v2 = *(void *)(v2 + 8);
        if (v2 == v1)
        {
          int v6 = v1;
          goto LABEL_27;
        }
      }

      int v6 = v2;
    }

LABEL_25:
  if (v7 >= 0x3F) {
    sub_1000D6844();
  }
  uint64_t v4 = &v3[v7];
  if (v2 < 0x64)
  {
    unint64_t v11 = v2;
  }

  else
  {
    do
    {
      unint64_t v11 = v2 / 0x64;
      *((_WORD *)v4 - 1) = *(_WORD *)&a00010203040506[2 * (v2 % 0x64) + 200];
      v4 -= 2;
      unint64_t v12 = v2 >> 4;
      v2 /= 0x64uLL;
    }

    while (v12 > 0x270);
  }

  if (v11 < 0xA)
  {
    LOBYTE(v2) = v11;
    goto LABEL_33;
  }

  *((_WORD *)v4 - 1) = *(_WORD *)&a00010203040506[2 * v11 + 200];
  return (*(uint64_t (**)(void))(*(void *)*a1 + 8LL))(*a1);
}

    unsigned int v13 = "tasked config does not have a parentUuid";
    goto LABEL_45;
  }

  char *v4 = 0LL;
  v4[1] = 0LL;
LABEL_52:
  int v22 = (std::__shared_weak_count *)v47[1];
  if (v47[1])
  {
    unint64_t v23 = (unint64_t *)(v47[1] + 8);
    do
      unint64_t v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }

  rep = &v19;
  unint64_t v12 = *(dispatch_queue_s **)(a1 + 24);
  block = _NSConcreteStackBlock;
  unint64_t v23 = 0x40000000LL;
  unint64_t v24 = sub_10006D7BC;
  int v25 = &unk_100129988;
  unsigned __int8 v26 = (char **)(a1 + 8);
  p_rep = &rep;
  dispatch_sync(v12, &block);
  sub_10004C6D4(&v19, 0LL);
  std::mutex::unlock(&stru_1001312F8);
}

  int v14 = *v1;
  unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
  int v25 = "user-set-region-format";
  *(void *)&__int16 v15 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)std::string __p = v15;
  unint64_t v23 = v15;
  sub_100008780(v14, &v25, (uint64_t)__p);
  buf = (unint64_t)v14;
  uint64_t v27 = 0LL;
  __int128 v28 = 0LL;
  v29 = 0x8000000000000000LL;
  if (!v14) {
    __assert_rtn("iter_impl", "iter_impl.hpp", 88, "m_object != nullptr");
  }
  sub_100008AC8((unsigned __int8 **)&buf);
  if (sub_1000087E8((unsigned __int8 **)__p, (unsigned __int8 **)&buf))
  {
    int v16 = (_BYTE *)sub_10009AE9C();
    if (!v16) {
      goto LABEL_37;
    }
  }

  else
  {
    int v16 = sub_100008924((unsigned __int8 **)__p);
  }

  if (*v16 == 3)
  {
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
    sub_1000218CC((uint64_t)v16, (std::string *)__p);
    if ((SBYTE7(v23) & 0x80u) == 0) {
      uint64_t v18 = __p;
    }
    else {
      uint64_t v18 = (void **)__p[0];
    }
    unint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v18));
    [v17 setObject:v19 forKey:@"user-set-region-format"];

    if (SBYTE7(v23) < 0) {
      operator delete(__p[0]);
    }
  }

uint64_t sub_100007914(void *a1, unint64_t a2)
{
  if (!a2) {
    return (**(uint64_t (***)(void, uint64_t))*a1)(*a1, 48LL);
  }
  unint64_t v2 = a2;
  if (a2 < 0xA)
  {
    uint64_t v3 = (uint64_t)a1 + 17;
LABEL_21:
    *(_BYTE *)(v3 - 1) = v2 + 48;
    return (*(uint64_t (**)(void))(*(void *)*a1 + 8LL))(*a1);
  }

  unsigned int v5 = 4;
  unint64_t v6 = a2;
  while (1)
  {
    if (v6 <= 0x63)
    {
      v5 -= 2;
      goto LABEL_13;
    }

    if (v6 <= 0x3E7) {
      break;
    }
    if (v6 >> 4 < 0x271) {
      goto LABEL_13;
    }
    unint64_t v7 = v6 >> 5;
    v6 /= 0x2710uLL;
    v5 += 4;
    if (v7 <= 0xC34)
    {
      v5 -= 3;
      goto LABEL_13;
    }
  }

  --v5;
LABEL_13:
  if (v5 >= 0x3F) {
    sub_1000D6844();
  }
  uint64_t v3 = (uint64_t)a1 + v5 + 16;
  if (a2 < 0x64)
  {
    unint64_t v8 = a2;
  }

  else
  {
    do
    {
      unint64_t v8 = v2 / 0x64;
      *(_WORD *)(v3 - 2) = *(_WORD *)&a00010203040506[2 * (v2 % 0x64) + 400];
      v3 -= 2LL;
      unint64_t v9 = v2 >> 4;
      v2 /= 0x64uLL;
    }

    while (v9 > 0x270);
  }

  if (v8 < 0xA)
  {
    LOBYTE(v2) = v8;
    goto LABEL_21;
  }

  *(_WORD *)(v3 - 2) = *(_WORD *)&a00010203040506[2 * v8 + 400];
  return (*(uint64_t (**)(void))(*(void *)*a1 + 8LL))(*a1);
}

uint64_t sub_100007A50(char *a1, double a2)
{
  if ((*(void *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000LL)
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v4 = *(uint64_t (**)(uint64_t, const char *, uint64_t))(**(void **)a1 + 8LL);
    unint64_t v6 = "null";
    uint64_t v3 = 4LL;
  }

  else
  {
    uint64_t v3 = sub_100007B50(a1 + 16, (uint64_t)(a1 + 80), a2) - (a1 + 16);
    uint64_t v4 = *(uint64_t (**)(uint64_t, const char *, uint64_t))(**(void **)a1 + 8LL);
    uint64_t v5 = *(void *)a1;
    unint64_t v6 = a1 + 16;
  }

  return v4(v5, v6, v3);
}

uint64_t sub_100007AC4(_BYTE *a1, unsigned int *a2, int a3)
{
  unsigned int v3 = byte_1000F51E0[a3];
  if (*a1) {
    unsigned int v4 = a3 & 0x3F | (*a2 << 6);
  }
  else {
    unsigned int v4 = (0xFFu >> v3) & a3;
  }
  *a2 = v4;
  unint64_t v5 = 16LL * *a1 + v3 + 256;
  if (v5 >= 0x190) {
    __assert_rtn("decode", "serializer.hpp", 892, "index < 400");
  }
  uint64_t v6 = byte_1000F51E0[v5];
  *a1 = v6;
  return v6;
}

char *sub_100007B50(char *a1, uint64_t a2, double a3)
{
  if ((*(void *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000LL) {
    sub_1000D690C();
  }
  unsigned int v3 = a1;
  if ((*(void *)&a3 & 0x8000000000000000LL) != 0)
  {
    a3 = -a3;
    *a1 = 45;
    unsigned int v3 = a1 + 1;
  }

  if (a3 == 0.0)
  {
    *(_WORD *)unsigned int v3 = 11824;
    double result = v3 + 3;
    v3[2] = 48;
  }

  else
  {
    unint64_t v5 = a2 - (void)v3;
    uint64_t v6 = 0LL;
    sub_100007C4C((uint64_t)v3, (int *)&v6 + 1, &v6, a3);
    if (SHIDWORD(v6) >= 18) {
      sub_1000D6894();
    }
    if (v5 <= 0x15) {
      sub_1000D68BC();
    }
    if (v5 == 22) {
      sub_1000D68E4();
    }
    return sub_100007D04(v3, SHIDWORD(v6), v6, -4, 15);
  }

  return result;
}

uint64_t sub_100007C4C(uint64_t a1, int *a2, _DWORD *a3, double a4)
{
  if ((*(void *)&a4 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000LL) {
    sub_1000D695C();
  }
  if (a4 <= 0.0) {
    sub_1000D6934();
  }
  *(void *)&__int128 v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v11 = v7;
  __int128 v12 = v7;
  __int128 v10 = v7;
  sub_100007F30((uint64_t)&v10, a4);
  return sub_100008078( a1,  a2,  a3,  v11,  *((uint64_t *)&v11 + 1),  v10,  *((uint64_t *)&v10 + 1),  v8,  v12,  *((uint64_t *)&v12 + 1));
}

char *sub_100007D04(char *__src, int a2, int a3, int a4, int a5)
{
  if ((a4 & 0x80000000) == 0) {
    sub_1000D6984();
  }
  if (a5 <= 0) {
    sub_1000D69AC();
  }
  uint64_t v7 = a3 + (uint64_t)a2;
  if ((a3 & 0x80000000) == 0 && (int)v7 <= a5)
  {
    memset(&__src[a2], 48, a3);
    __src[v7] = 46;
    double result = &__src[v7 + 2];
    __src[(int)v7 + 1] = 48;
    return result;
  }

  if ((int)v7 < 1 || (int)v7 > a5)
  {
    if ((int)v7 > a4 && (int)v7 <= 0)
    {
      size_t v10 = -(int)v7;
      memmove(&__src[v10 + 2], __src, a2);
      *(_WORD *)__src = 11824;
      memset(__src + 2, 48, v10);
      return &__src[v10 + 2 + a2];
    }

    if (a2 == 1)
    {
      uint64_t v11 = 1LL;
    }

    else
    {
      memmove(__src + 2, __src + 1, a2 - 1LL);
      __src[1] = 46;
      uint64_t v11 = a2 + 1LL;
    }

    __int128 v12 = &__src[v11];
    *__int128 v12 = 101;
    else {
      char v13 = 45;
    }
    else {
      unsigned int v14 = 1 - v7;
    }
    v12[1] = v13;
    if (v14 > 9)
    {
      if (v14 > 0x63)
      {
        v12[2] = (unsigned __int16)v14 / 0x64u + 48;
        unsigned __int8 v17 = (unsigned __int16)v14 % 0x64u;
        v12[3] = (v17 / 0xAu) | 0x30;
        v12[4] = (v17 % 0xAu) | 0x30;
        uint64_t v16 = 2LL;
        return &v12[v16 + 3];
      }

      v12[2] = v14 / 0xAu + 48;
      char v15 = (v14 % 0xAu) | 0x30;
    }

    else
    {
      v12[2] = 48;
      char v15 = v14 + 48;
    }

    v12[3] = v15;
    uint64_t v16 = 1LL;
    return &v12[v16 + 3];
  }

  if ((a3 & 0x80000000) == 0) {
    sub_1000D6A24();
  }
  unint64_t v9 = &__src[v7];
  memmove(v9 + 1, v9, a2 - (unint64_t)v7);
  *unint64_t v9 = 46;
  return &__src[a2 + 1];
}

uint64_t sub_100007F30@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  if ((*(void *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000LL) {
    sub_1000D6A74();
  }
  if (a2 <= 0.0) {
    sub_1000D6A4C();
  }
  BOOL v3 = (*(void *)&a2 & 0xFFFFFFFFFFFFFLL) == 0;
  if (*(void *)&a2 >> 52) {
    unint64_t v4 = ((*(void *)&a2 >> 52) - 1075) | 0xAAAAAAAA00000000LL;
  }
  else {
    unint64_t v4 = 0xAAAAAAAAFFFFFBCELL;
  }
  if (*(void *)&a2 >> 52) {
    uint64_t v5 = *(void *)&a2 & 0xFFFFFFFFFFFFFLL | 0x10000000000000LL;
  }
  else {
    uint64_t v5 = *(void *)&a2 & 0xFFFFFFFFFFFFFLL;
  }
  BOOL v6 = *(void *)&a2 >> 53 != 0LL;
  BOOL v7 = !v6 || !v3;
  if (v6 && v3) {
    uint64_t v8 = 4 * v5;
  }
  else {
    uint64_t v8 = 2 * v5;
  }
  if (v7) {
    int v9 = v4 - 1;
  }
  else {
    int v9 = v4 - 2;
  }
  uint64_t v18 = v8 - 1;
  int v20 = -1431655766;
  int v19 = v9;
  uint64_t v10 = sub_1000081A0((2 * v5) | 1, (v4 - 1) | 0xAAAAAAAA00000000LL);
  int v12 = v11;
  unint64_t v13 = sub_1000081F4(&v18, v11);
  int v15 = v14;
  uint64_t result = sub_1000081A0(v5, v4);
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v17;
  *(void *)(a1 + 16) = v13;
  *(_DWORD *)(a1 + 24) = v15;
  *(void *)(a1 + 32) = v10;
  *(_DWORD *)(a1 + 40) = v12;
  return result;
}

uint64_t sub_100008078( uint64_t a1, int *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v32[0] = a4;
  v32[1] = a5;
  v31[0] = a6;
  v31[1] = a7;
  v30[0] = a9;
  v30[1] = a10;
  if ((_DWORD)a10 != (_DWORD)a5) {
    sub_1000D6AC4();
  }
  if ((_DWORD)a10 != (_DWORD)a7) {
    sub_1000D6A9C();
  }
  uint64_t v13 = sub_100008260(a10);
  int v15 = v14;
  uint64_t v27 = v13;
  int v29 = -1431655766;
  int v28 = v16;
  unint64_t v17 = sub_100008314(v31, &v27);
  uint64_t v19 = v18;
  unint64_t v20 = sub_100008314(v32, &v27);
  unsigned int v22 = v21;
  unint64_t v23 = sub_100008314(v30, &v27);
  *a3 = -v15;
  return sub_100008374( a1,  a2,  a3,  v20 + 1,  v22 | 0xAAAAAAAA00000000LL,  v17,  v19,  v25,  v23 - 1,  v24 | 0xAAAAAAAA00000000LL);
}

uint64_t sub_1000081A0(uint64_t result, unint64_t a2)
{
  if (!result) {
    __assert_rtn("normalize", "to_chars.hpp", 143, "x.f != 0");
  }
  return result;
}

unint64_t sub_1000081F4(uint64_t *a1, int a2)
{
  int v2 = *((_DWORD *)a1 + 2) - a2;
  if (v2 < 0)
  {
    uint64_t v5 = "delta >= 0";
    int v6 = 162;
    goto LABEL_6;
  }

  uint64_t v3 = *a1;
  unint64_t result = *a1 << v2;
  if (result >> v2 != v3)
  {
    uint64_t v5 = "((x.f << delta) >> delta) == x.f";
    int v6 = 163;
LABEL_6:
    __assert_rtn("normalize_to", "to_chars.hpp", v6, v5);
  }

  return result;
}

uint64_t sub_100008260(int a1)
{
  if (a1 <= -1501) {
    sub_1000D6AEC();
  }
  if (a1 >= 1501) {
    sub_1000D6B14();
  }
  int v1 = 78913 * (-61 - a1) / 0x40000;
  if (a1 < -61) {
    ++v1;
  }
  if (v1 <= -315) {
    sub_1000D6B3C();
  }
  unsigned int v2 = (int)((v1 + 307 + (((__int16)(v1 + 307) >> 28) & 7)) << 16) >> 19;
  if (v2 >= 0x4F) {
    sub_1000D6BB4();
  }
  uint64_t v3 = (void *)((char *)&unk_1000F0CF8 + 16 * (unsigned __int16)v2);
  int v4 = v3[1] + a1;
  if (v4 <= -125) {
    sub_1000D6B64();
  }
  if (v4 >= -95) {
    sub_1000D6B8C();
  }
  return *v3;
}

unint64_t sub_100008314(void *a1, void *a2)
{
  uint64_t v2 = HIDWORD(*a1);
  uint64_t v3 = HIDWORD(*a2);
  unint64_t v4 = v3 * (unint64_t)*a1;
  unint64_t v5 = *a2 * (unint64_t)v2;
  return HIDWORD(v5)
       + v3 * (unint64_t)v2
       + HIDWORD(v4)
       + ((((*a2 * (unint64_t)*a1) >> 32)
         + v4
         + v5
         + 0x80000000) >> 32);
}

uint64_t sub_100008374( uint64_t a1, int *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10)
{
  v47[0] = a4;
  v47[1] = a5;
  v46[0] = a6;
  v46[1] = a7;
  unint64_t v44 = a9;
  uint64_t v45 = a10;
  unint64_t v13 = sub_100008638((uint64_t)&v44, (uint64_t)v47);
  uint64_t v14 = sub_100008638((uint64_t)&v44, (uint64_t)v46);
  int v15 = -(int)v45;
  unint64_t v16 = v44 >> -(char)v45;
  if (!(_DWORD)v16) {
    sub_1000D6C2C();
  }
  unint64_t v17 = v14;
  unint64_t v18 = 1LL << v15;
  uint64_t v19 = (1LL << v15) - 1;
  unint64_t v20 = v19 & v44;
  if (v16 <= 0x3B9AC9FF)
  {
    if (v16 <= 0x5F5E0FF)
    {
      if (v16 <= 0x98967F)
      {
        if (v16 <= 0xF423F)
        {
          unsigned int v23 = v16 >> 5;
          unsigned int v24 = v16 >> 4;
          else {
            int v25 = 10;
          }
          else {
            int v26 = 2;
          }
          else {
            int v27 = 3;
          }
          else {
            int v28 = 100;
          }
          else {
            int v29 = 4;
          }
          else {
            int v30 = 1000;
          }
          if (v24 <= 0x270) {
            int v31 = v29;
          }
          else {
            int v31 = 5;
          }
          if (v24 <= 0x270) {
            int v32 = v30;
          }
          else {
            int v32 = 10000;
          }
          if (v23 <= 0xC34) {
            int v22 = v31;
          }
          else {
            int v22 = 6;
          }
          if (v23 > 0xC34) {
            unsigned int v21 = 100000;
          }
          else {
            unsigned int v21 = v32;
          }
        }

        else
        {
          unsigned int v21 = 1000000;
          int v22 = 7;
        }
      }

      else
      {
        unsigned int v21 = 10000000;
        int v22 = 8;
      }
    }

    else
    {
      unsigned int v21 = 100000000;
      int v22 = 9;
    }
  }

  else
  {
    unsigned int v21 = 1000000000;
    int v22 = 10;
  }

  unsigned int v33 = v22 + 1;
  do
  {
    unsigned int v34 = v16 / v21;
    unint64_t v16 = v16 % v21;
    uint64_t v35 = *a2;
    *a2 = v35 + 1;
    *(_BYTE *)(a1 + v35) = v34 + 48;
    if ((v16 << v15) + v20 <= v13)
    {
      *a3 = *a3 + v33 - 2;
      unint64_t v18 = (unint64_t)v21 << v15;
      int v40 = *a2;
      uint64_t v41 = a1;
      unint64_t v42 = v13;
      v20 += v16 << v15;
      return sub_1000086A4(v41, v40, v17, v42, v20, v18);
    }

    v21 /= 0xAu;
    --v33;
  }

  while (v33 > 1);
  if (v20 <= v13) {
    sub_1000D6CCC();
  }
  int v36 = 0;
  do
  {
    if (v20 >= 0x199999999999999ALL) {
      sub_1000D6C7C();
    }
    unint64_t v37 = (10 * v20) >> v15;
    if (v37 >= 0xA) {
      sub_1000D6CA4();
    }
    uint64_t v38 = *a2;
    *a2 = v38 + 1;
    *(_BYTE *)(a1 + v38) = v37 + 48;
    uint64_t v39 = 5 * v13;
    unint64_t v20 = (10 * v20) & v19;
    v13 *= 10LL;
    v17 *= 10LL;
    --v36;
  }

  while (v20 > 2 * v39);
  *a3 += v36;
  int v40 = *a2;
  uint64_t v41 = a1;
  unint64_t v42 = v13;
  return sub_1000086A4(v41, v40, v17, v42, v20, v18);
}

uint64_t sub_100008638(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8))
  {
    unint64_t v4 = "x.e == y.e";
    int v5 = 66;
LABEL_6:
    __assert_rtn("sub", "to_chars.hpp", v5, v4);
  }

  BOOL v2 = *(void *)a1 >= *(void *)a2;
  uint64_t result = *(void *)a1 - *(void *)a2;
  if (!v2)
  {
    unint64_t v4 = "x.f >= y.f";
    int v5 = 67;
    goto LABEL_6;
  }

  return result;
}

uint64_t sub_1000086A4( uint64_t result, int a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  if (a2 <= 0) {
    sub_1000D6CF4();
  }
  if (a3 > a4) {
    sub_1000D6D1C();
  }
  if (a4 < a5) {
    sub_1000D6D44();
  }
  if (!a6) {
    sub_1000D6D6C();
  }
  if (a5 < a3 && a4 - a5 >= a6)
  {
    uint64_t v6 = (a2 - 1);
    uint64_t v7 = -(uint64_t)a5;
    unint64_t v8 = a6 + a5;
    do
    {
      if (v8 >= a3 && a3 + v7 <= v8 - a3) {
        break;
      }
      int v9 = *(unsigned __int8 *)(result + v6);
      if (v9 == 48) {
        sub_1000D6D94();
      }
      *(_BYTE *)(result + v6) = v9 - 1;
      if (v8 >= a3) {
        break;
      }
      unint64_t v10 = a4 - a6 + v7;
      v7 -= a6;
      v8 += a6;
    }

    while (v10 >= a6);
  }

  return result;
}

uint64_t sub_100008750(uint64_t a1)
{
  return sub_100007004(a1);
}

uint64_t sub_100008780@<X0>(uint64_t a1@<X0>, const std::string::value_type **a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 32) = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)a3 = v6;
  *(_OWORD *)(a3 + 16) = v6;
  uint64_t v7 = (unsigned __int8 **)sub_100008B44((void *)a3, a1);
  uint64_t result = (uint64_t)sub_100008AC8(v7);
  if (*(_BYTE *)a1 == 1)
  {
    uint64_t result = sub_100008B90(*(void *)(a1 + 8), a2);
    *(void *)(a3 + 8) = result;
  }

  return result;
}

BOOL sub_1000087E8(unsigned __int8 **a1, unsigned __int8 **a2)
{
  BOOL v2 = *a1;
  if (*a1 != *a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_100005064(v8, "cannot compare iterators of different containers");
    sub_100008C0C(212, (uint64_t)v8, exception);
  }

  if (!v2) {
    sub_1000D6DBC();
  }
  int v3 = *v2;
  if (v3 == 2)
  {
    unint64_t v4 = a1[2];
    int v5 = a2[2];
  }

  else if (v3 == 1)
  {
    unint64_t v4 = a1[1];
    int v5 = a2[1];
  }

  else
  {
    unint64_t v4 = a1[4];
    int v5 = a2[4];
  }

  return v4 == v5;
}

void sub_1000088E4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }

  else if (!v15)
  {
    goto LABEL_6;
  }

  __cxa_free_exception(v14);
  goto LABEL_6;
}

unsigned __int8 *sub_100008924(unsigned __int8 **a1)
{
  uint64_t result = *a1;
  if (!result) {
    sub_1000D6DE4();
  }
  int v3 = *result;
  if (v3 == 1)
  {
    __int128 v6 = a1[1];
    return v6 + 56;
  }

  else if (v3 == 2)
  {
    int v5 = *(unsigned __int8 **)(*((void *)result + 1) + 8LL);
    uint64_t result = a1[2];
    if (result == v5) {
      sub_1000D6E34();
    }
  }

  else
  {
    if (!*result)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      sub_100005064(v8, "cannot get value");
      sub_100008C0C(214, (uint64_t)v8, exception);
    }

    if (a1[4])
    {
      unint64_t v4 = __cxa_allocate_exception(0x20uLL);
      sub_100005064(v8, "cannot get value");
      sub_100008C0C(214, (uint64_t)v8, v4);
    }
  }

  return result;
}

void sub_100008A88( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if ((v15 & 1) != 0) {
    __cxa_free_exception(v14);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 **sub_100008AC8(unsigned __int8 **result)
{
  int v1 = *result;
  if (!*result) {
    __assert_rtn("set_end", "iter_impl.hpp", 211, "m_object != nullptr");
  }
  int v2 = *v1;
  if (v2 == 2)
  {
    result[2] = *(unsigned __int8 **)(*((void *)v1 + 1) + 8LL);
  }

  else if (v2 == 1)
  {
    result[1] = (unsigned __int8 *)(*((void *)v1 + 1) + 8LL);
  }

  else
  {
    result[4] = (unsigned __int8 *)1;
  }

  return result;
}

void *sub_100008B44(void *result, uint64_t a2)
{
  *uint64_t result = a2;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  result[4] = 0x8000000000000000LL;
  if (!a2) {
    __assert_rtn("iter_impl", "iter_impl.hpp", 88, "m_object != nullptr");
  }
  return result;
}

uint64_t sub_100008B90(uint64_t a1, const std::string::value_type **a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 8;
  do
  {
    int v6 = std::string::compare((const std::string *)(v3 + 32), *a2);
    uint64_t v7 = (uint64_t *)(v3 + 8);
    if (v6 >= 0)
    {
      uint64_t v7 = (uint64_t *)v3;
      uint64_t v5 = v3;
    }

    uint64_t v3 = *v7;
  }

  while (*v7);
  if (v5 == v2 || std::string::compare((const std::string *)(v5 + 32), *a2) >= 1) {
    return v2;
  }
  return v5;
}

void sub_100008C0C(int a1@<W0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    uint64_t v7 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v7 = *(const std::string::value_type **)a2;
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v8 = *(void *)(a2 + 8);
  }
  int v9 = std::string::append(&v14, v7, v8);
  __int128 v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  int64_t cap = v9->__r_.__value_.__l.__cap_;
  *(_OWORD *)char v15 = v10;
  v9->__r_.__value_.__l.__size_ = 0LL;
  v9->__r_.__value_.__l.__cap_ = 0LL;
  v9->__r_.__value_.__r.__words[0] = 0LL;
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (cap >= 0) {
    int v11 = (char *)v15;
  }
  else {
    int v11 = (char *)v15[0];
  }
  sub_100004FA8((uint64_t)a3, a1, v11);
  *a3 = off_100125508;
  if (SHIBYTE(cap) < 0) {
    operator delete(v15[0]);
  }
}

void sub_100008D20( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *__p, uint64_t a22, int a23, __int16 a24, char a25, char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100008D70(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)off_100125390;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
}

void sub_100008DA0(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)off_100125390;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
  operator delete(v2);
}

void sub_100008DD4()
{
}

void sub_100008DE8(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_100008E38(exception, a1);
}

void sub_100008E24(_Unwind_Exception *a1)
{
}

std::logic_error *sub_100008E38(std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  return result;
}

uint64_t sub_100008E5C(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0LL;
  *(_BYTE *)a1 = 3;
  unint64_t v4 = operator new(0x18uLL);
  *(_OWORD *)unint64_t v4 = *(_OWORD *)a2;
  v4[2] = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)a2 = 0LL;
  *(void *)(a1 + 8) = v4;
  sub_1000041AC(a1);
  sub_1000041AC(a1);
  return a1;
}

void *sub_100008EC0@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x9E8uLL);
  uint64_t result = sub_100008F08(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_100008EF4(_Unwind_Exception *a1)
{
}

void *sub_100008F08(void *a1)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_100125530;
  sub_100040C3C(a1 + 3);
  return a1;
}

void sub_100008F3C(_Unwind_Exception *a1)
{
}

void sub_100008F50(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100125530;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100008F60(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100125530;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_100008F80(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_100008F90@<X0>(void *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  uint64_t result = sub_100008FD8((uint64_t)v2);
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_100008FC4(_Unwind_Exception *a1)
{
}

uint64_t sub_100008FD8(uint64_t a1)
{
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = off_100125580;
  sub_1000057BC((_OWORD *)(a1 + 24));
  return a1;
}

void sub_10000900C(_Unwind_Exception *a1)
{
}

void sub_100009020(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100125580;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100009030(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100125580;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_100009050(uint64_t a1)
{
  uint64_t v1 = a1 + 24;
  sub_100007004(a1 + 40);
  return sub_100007004(v1);
}

uint64_t sub_10000907C(uint64_t a1, uint64_t a2, ...)
{
  return sub_100006200(a1, -1, 0x20u, 0LL, 1, (uint64_t *)va);
}

void sub_100009098( void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
}

void sub_1000090AC(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

  ;
}

  ;
}

void sub_1000090D8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
}

  ;
}

void *sub_1000090EC@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100005064(a2, off_100125780[a1]);
}

uint64_t sub_100009100(uint64_t *a1)
{
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    int v2 = *((unsigned __int8 *)a1 + 23);
    uint64_t v3 = a1;
    switch(*((_BYTE *)a1 + 23))
    {
      case 0xA:
        if (*a1 != 0x656C706D6F437372LL || *((_WORD *)a1 + 4) != 25972) {
          goto LABEL_87;
        }
        return 0LL;
      case 0xC:
        goto LABEL_59;
      case 0xD:
        goto LABEL_83;
      case 0x12:
        goto LABEL_75;
      case 0x13:
        if (*a1 == 0x6C6F526572507372LL
          && a1[1] == 0x6576457265766F6CLL
          && *(uint64_t *)((char *)a1 + 11) == 0x73746E6576457265LL)
        {
          return 1LL;
        }

        if (v2 == 18) {
          goto LABEL_75;
        }
        uint64_t v3 = a1;
        if (v2 == 13) {
          goto LABEL_83;
        }
        if (v2 != 12) {
          goto LABEL_87;
        }
LABEL_59:
        if (*a1 != 0x6567676972547372LL || *((_DWORD *)a1 + 2) != 1735347314) {
          goto LABEL_87;
        }
        return 2LL;
      case 0x16:
        if (*a1 == 0x6574656C65447372LL
          && a1[1] == 0x726F66736E617254LL
          && *(uint64_t *)((char *)a1 + 14) == 0x65746174536D726FLL)
        {
          return 3LL;
        }

        uint64_t v3 = a1;
        if (v2 == 13) {
          goto LABEL_83;
        }
        if (v2 != 18) {
          goto LABEL_87;
        }
LABEL_75:
        if (*a1 == 0x74617267694D7372LL && a1[1] == 0x7361626174614465LL && *((_WORD *)a1 + 8) == 29541) {
          return 4LL;
        }
        uint64_t v3 = a1;
        if (v2 == 13) {
          goto LABEL_83;
        }
        goto LABEL_87;
      default:
        goto LABEL_87;
    }
  }

  uint64_t v5 = a1[1];
  if (v5 == 10 && *(void *)*a1 == 0x656C706D6F437372LL && *(_WORD *)(*a1 + 8) == 25972) {
    return 0LL;
  }
  if (v5 == 19)
  {
    if (*(void *)*a1 == 0x6C6F526572507372LL
      && *(void *)(*a1 + 8) == 0x6576457265766F6CLL
      && *(void *)(*a1 + 11) == 0x73746E6576457265LL)
    {
      return 1LL;
    }

    uint64_t v5 = a1[1];
  }

  if (v5 == 12)
  {
    if (*(void *)*a1 == 0x6567676972547372LL && *(_DWORD *)(*a1 + 8) == 1735347314) {
      return 2LL;
    }
    uint64_t v5 = a1[1];
  }

  if (v5 == 22)
  {
    if (*(void *)*a1 == 0x6574656C65447372LL
      && *(void *)(*a1 + 8) == 0x726F66736E617254LL
      && *(void *)(*a1 + 14) == 0x65746174536D726FLL)
    {
      return 3LL;
    }

    uint64_t v5 = a1[1];
  }

  if (v5 == 18)
  {
    if (*(void *)*a1 == 0x74617267694D7372LL
      && *(void *)(*a1 + 8) == 0x7361626174614465LL
      && *(_WORD *)(*a1 + 16) == 29541)
    {
      return 4LL;
    }

    uint64_t v5 = a1[1];
  }

  if (v5 != 13) {
    goto LABEL_87;
  }
  uint64_t v3 = (uint64_t *)*a1;
LABEL_83:
  uint64_t v22 = *v3;
  uint64_t v23 = *(uint64_t *)((char *)v3 + 5);
  if (v22 == 0x666E6F6365527372LL && v23 == 0x6572756769666E6FLL) {
    return 5LL;
  }
LABEL_87:
  if (sub_100006170(a1, "rsPostRolloverEvents")) {
    return 6LL;
  }
  if (sub_100006170(a1, "rsSaveNewCadence")) {
    return 7LL;
  }
  return 0LL;
}

uint64_t *sub_1000094CC@<X0>( void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, void *a5@<X4>, void *a6@<X5>, void *a7@<X6>, void *a8@<X7>, uint64_t *a9@<X8>, void *a10, void *a11)
{
  unint64_t v20 = operator new(0x130uLL);
  sub_100009594((uint64_t)v20, a1, a2, a3, a4, a5, a6, a7, a8, a10, a11);
  return sub_10000CBF0(a9, (uint64_t)v20);
}

void sub_100009578(void *a1)
{
}

uint64_t sub_100009594( uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11)
{
  dispatch_queue_t v18 = dispatch_queue_create("analyticsd.RolloverManagerQueue", 0LL);
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = v18;
  *(void *)a1 = &off_1001255D0;
  *(void *)(a1 + 32) = *a2;
  uint64_t v19 = a2[1];
  *(void *)(a1 + 40) = v19;
  if (v19)
  {
    unint64_t v20 = (unint64_t *)(v19 + 8);
    do
      unint64_t v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }

  *(void *)(a1 + 48) = *a3;
  uint64_t v22 = a3[1];
  *(void *)(a1 + 56) = v22;
  if (v22)
  {
    uint64_t v23 = (unint64_t *)(v22 + 8);
    do
      unint64_t v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }

  *(void *)(a1 + 64) = *a4;
  uint64_t v25 = a4[1];
  *(void *)(a1 + 72) = v25;
  if (v25)
  {
    int v26 = (unint64_t *)(v25 + 8);
    do
      unint64_t v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }

  *(void *)(a1 + 80) = *a6;
  uint64_t v28 = a6[1];
  *(void *)(a1 + 88) = v28;
  if (v28)
  {
    int v29 = (unint64_t *)(v28 + 8);
    do
      unint64_t v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }

  v48 = a3;
  *(void *)(a1 + 96) = *a7;
  uint64_t v31 = a7[1];
  *(void *)(a1 + 104) = v31;
  if (v31)
  {
    int v32 = (unint64_t *)(v31 + 8);
    do
      unint64_t v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }

  *(void *)(a1 + 112) = *a8;
  uint64_t v34 = a8[1];
  *(void *)(a1 + 120) = v34;
  if (v34)
  {
    uint64_t v35 = (unint64_t *)(v34 + 8);
    do
      unint64_t v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }

  *(void *)(a1 + 128) = *a9;
  uint64_t v37 = a9[1];
  *(void *)(a1 + 136) = v37;
  if (v37)
  {
    uint64_t v38 = (unint64_t *)(v37 + 8);
    do
      unint64_t v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }

  *(void *)(a1 + 144) = *a5;
  uint64_t v40 = a5[1];
  *(void *)(a1 + 152) = v40;
  if (v40)
  {
    uint64_t v41 = (unint64_t *)(v40 + 8);
    do
      unint64_t v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }

  unint64_t v43 = operator new(0x50uLL);
  sub_1000519B8(v43, a4, a2, a7, a8, a10);
  *(void *)(a1 + 160) = v43;
  unint64_t v44 = operator new(0x50uLL);
  sub_1000623E4(v44, a5, v48, a7, a8, a11);
  *(void *)(a1 + 168) = v44;
  *(void *)(a1 + 256) = 0LL;
  *(void *)(a1 + 232) = 0LL;
  *(void *)(a1 + 240) = 0LL;
  *(void *)(a1 + 224) = 0LL;
  *(_BYTE *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 208) = 0LL;
  sub_1000041AC(a1 + 248);
  sub_1000041AC(a1 + 248);
  *(void *)(a1 + 296) = 0LL;
  uint64_t v50 = a1;
  id v45 = sub_10000B718((id *)(a1 + 24));
  unsigned int v46 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v45);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10000CF0C;
  block[3] = &unk_1001256F0;
  block[4] = a1 + 8;
  block[5] = &v50;
  dispatch_sync(v46, block);

  return a1;
}

void sub_1000098B8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
}

uint64_t sub_100009958(uint64_t a1)
{
  int v2 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = 0LL;

  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void sub_100009998(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, dispatch_group_t *a4@<X8>)
{
  dispatch_group_t v8 = dispatch_group_create();
  *a4 = v8;
  if (*((char *)a2 + 23) < 0)
  {
    sub_10000B8BC(&__p, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 __p = *a2;
    uint64_t v24 = *((void *)a2 + 2);
  }

  sub_10000C3E4((uint64_t)v25, a3);
  dispatch_group_t group = v8;
  if (group) {
    dispatch_group_enter(group);
  }
  unint64_t v28 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v29 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000CF18(&v28, (void *)(a1 + 8));
  int v9 = (char *)operator new(0x38uLL);
  __int128 v10 = v9;
  *(void *)int v9 = a1;
  if (SHIBYTE(v24) < 0)
  {
    sub_10000B8BC(v9 + 8, (void *)__p, *((unint64_t *)&__p + 1));
  }

  else
  {
    *(_OWORD *)(v9 + 8) = __p;
    *((void *)v9 + 3) = v24;
  }

  sub_10000C3E4((uint64_t)(v10 + 32), (uint64_t)v25);
  int v11 = group;
  *((void *)v10 + 6) = v11;
  dispatch_group_t group = 0LL;

  id v12 = sub_10000B718((id *)(a1 + 24));
  char v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  unint64_t v14 = v28;
  unint64_t v15 = v29;
  if (v29)
  {
    unint64_t v16 = (unint64_t *)(v29 + 8);
    do
      unint64_t v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }

  dispatch_queue_t v18 = v13;
  uint64_t v19 = operator new(0x18uLL);
  void *v19 = v10;
  v19[1] = v14;
  v19[2] = v15;
  dispatch_async_f(v18, v19, (dispatch_function_t)sub_10000CF8C);

  unint64_t v20 = (std::__shared_weak_count *)v29;
  if (v29)
  {
    unint64_t v21 = (unint64_t *)(v29 + 8);
    do
      unint64_t v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }

  sub_10000B720((id *)&group);
  sub_1000041AC((uint64_t)v25);
  sub_10000425C(&v26, v25[0]);
  if (SHIBYTE(v24) < 0) {
    operator delete((void *)__p);
  }
}

void sub_100009BB4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

id *sub_100009C18(id *a1)
{
  id v2 = *a1;
  *a1 = 0LL;

  return a1;
}

void sub_100009C4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1 + 8;
  v6[0] = a1;
  v6[1] = a2;
  v6[2] = a3;
  id v4 = sub_10000B718((id *)(a1 + 24));
  uint64_t v5 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v4);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10000DA20;
  block[3] = &unk_1001256F0;
  block[4] = v3;
  block[5] = v6;
  dispatch_sync(v5, block);
}

void sub_100009CF4(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = a3;
  char v8 = a2;
  uint64_t v4 = a1 + 8;
  v7[0] = a1;
  v7[1] = &v8;
  v7[2] = &v10;
  v7[3] = a4;
  id v5 = sub_10000B718((id *)(a1 + 24));
  int v6 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v5);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10000DA60;
  block[3] = &unk_1001256F0;
  block[4] = v4;
  block[5] = v7;
  dispatch_sync(v6, block);
}

void sub_100009DAC(uint64_t a1)
{
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000CF18(&v14, (void *)(a1 + 8));
  id v2 = operator new(8uLL);
  void *v2 = a1;
  id v3 = sub_10000B718((id *)(a1 + 24));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  unint64_t v5 = v14;
  unint64_t v6 = v15;
  if (v15)
  {
    uint64_t v7 = (unint64_t *)(v15 + 8);
    do
      unint64_t v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }

  int v9 = v4;
  uint64_t v10 = operator new(0x18uLL);
  *uint64_t v10 = v2;
  v10[1] = v5;
  v10[2] = v6;
  dispatch_async_f(v9, v10, (dispatch_function_t)sub_10000DAA4);

  int v11 = (std::__shared_weak_count *)v15;
  if (v15)
  {
    id v12 = (unint64_t *)(v15 + 8);
    do
      unint64_t v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

void sub_100009EBC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

uint64_t sub_100009ED4(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v6 = a1;
  id v2 = sub_10000B718((id *)(a1 + 24));
  id v3 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v2);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_10000DC34;
  v7[3] = &unk_100125710;
  void v7[4] = v1;
  void v7[5] = &v6;
  unint64_t v8 = objc_retainBlock(v7);
  block[0] = _NSConcreteStackBlock;
  unsigned __int8 v10 = -86;
  block[1] = 3221225472LL;
  block[2] = sub_10000DC4C;
  block[3] = &unk_1001256F0;
  block[4] = &v10;
  block[5] = &v8;
  dispatch_sync(v3, block);
  uint64_t v4 = v10;

  return v4;
}

BOOL sub_100009FD4(uint64_t a1)
{
  v2.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v3 = sub_1000107FC(*(void *)(a1 + 32));
  return v2.__d_.__rep_ >= v3 || v2.__d_.__rep_ < v3 - 86400000000LL;
}

void sub_10000A01C(uint64_t a1)
{
  unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v27 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_100092418((uint64_t)"rollover", &v26);
  if (!(_BYTE)v26)
  {
    sub_10000BA40((uint64_t)v24, 0LL, 0LL, 0, 1);
    sub_1000041AC((uint64_t)v24);
    char v2 = v26;
    LOBYTE(v26) = v24[0];
    v24[0] = v2;
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v3 = v27;
    unint64_t v27 = v25;
    uint64_t v25 = v3;
    sub_1000041AC((uint64_t)&v26);
    sub_1000041AC((uint64_t)v24);
    sub_10000425C(&v25, v24[0]);
  }

  unint64_t v33 = "rolloverId";
  *(void *)&__int128 __p = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__dst = v4;
  __int128 v35 = v4;
  sub_100008780((uint64_t)&v26, &v33, (uint64_t)__dst);
  unint64_t v28 = (unsigned __int8 *)&v26;
  uint64_t v29 = 0LL;
  uint64_t v30 = 0LL;
  uint64_t v31 = 0LL;
  unint64_t v32 = 0x8000000000000000LL;
  sub_100008AC8(&v28);
  if (sub_1000087E8((unsigned __int8 **)__dst, &v28))
  {
    uint64_t v5 = sub_10009AE9C();
    if (!v5) {
      goto LABEL_9;
    }
  }

  else
  {
    uint64_t v5 = (uint64_t)sub_100008924((unsigned __int8 **)__dst);
  }

  if (*(_BYTE *)v5 == 3)
  {
    uint64_t v6 = *(__int128 **)(v5 + 8);
    goto LABEL_10;
  }

LABEL_9:
  uint64_t v6 = 0LL;
LABEL_10:
  unint64_t v33 = "lastStep";
  *(void *)&__int128 __p = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__dst = v7;
  __int128 v35 = v7;
  sub_100008780((uint64_t)&v26, &v33, (uint64_t)__dst);
  unint64_t v28 = (unsigned __int8 *)&v26;
  uint64_t v29 = 0LL;
  uint64_t v30 = 0LL;
  uint64_t v31 = 0LL;
  unint64_t v32 = 0x8000000000000000LL;
  sub_100008AC8(&v28);
  if (sub_1000087E8((unsigned __int8 **)__dst, &v28))
  {
    uint64_t v8 = sub_10009AE9C();
    if (!v8) {
      goto LABEL_16;
    }
  }

  else
  {
    uint64_t v8 = (uint64_t)sub_100008924((unsigned __int8 **)__dst);
  }

  if (*(_BYTE *)v8 == 3)
  {
    int v9 = *(__int128 **)(v8 + 8);
    goto LABEL_17;
  }

  if (!os_variant_is_darwinos("com.apple.CoreAnalytics"))
  {
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[OSASystemConfiguration sharedInstance](&OBJC_CLASS___OSASystemConfiguration, "sharedInstance"));
    id v12 = [v11 optInApple];

    uint64_t v8 = (os_log_s *)qword_1001318F0;
    __int128 v13 = os_log_type_enabled((os_log_t)qword_1001318F0, OS_LOG_TYPE_INFO);
    if (v12)
    {
      if (!v13) {
        return 1LL;
      }
      *(_WORD *)buf = 0;
      __int128 v10 = "[RolloverManager] Log writing: PROCEED (device IS opted in";
      int v9 = 1LL;
      goto LABEL_15;
    }

    if (v13)
    {
      *(_WORD *)buf = 0;
      uint64_t v6 = "[RolloverManager] Log writing: SKIP (device IS NOT opted in)";
      __int128 v7 = v8;
      goto LABEL_18;
    }

    return 0LL;
  }

  uint64_t v8 = (os_log_s *)qword_1001318F0;
  int v9 = 1LL;
  if (os_log_type_enabled((os_log_t)qword_1001318F0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    __int128 v10 = "[RolloverManager] Log writing: SKIP (OS variant is darwinOS)";
LABEL_15:
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, v10, buf, 2u);
  }

  return v9;
}

    std::string::push_back(v5, *(_BYTE *)(a1 + 16));
    __int128 v7 = sub_1000193F4((unsigned __int8 **)a1);
    if ((v7 - 48) < 0xA)
    {
      uint64_t v8 = (std::string *)(a1 + 72);
      goto LABEL_11;
    }

    if (v7 == 45 || v7 == 43)
    {
      uint64_t v8 = (std::string *)(a1 + 72);
      std::string::push_back((std::string *)(a1 + 72), *(_BYTE *)(a1 + 16));
      if (sub_1000193F4((unsigned __int8 **)a1) - 48 < 0xA)
      {
LABEL_11:
        std::string::push_back(v8, *(_BYTE *)(a1 + 16));
        if (sub_1000193F4((unsigned __int8 **)a1) - 48 <= 9)
        {
          do
            std::string::push_back((std::string *)(a1 + 72), *(_BYTE *)(a1 + 16));
          while (sub_1000193F4((unsigned __int8 **)a1) - 48 < 0xA);
        }

        goto LABEL_13;
      }

      unint64_t v14 = "invalid number; expected digit after exponent sign";
    }

    else
    {
      unint64_t v14 = "invalid number; expected '+', '-', or digit after exponent";
    }

    std::string::push_back(v5, *(_BYTE *)(a1 + 16));
    __int128 v7 = sub_1000193F4((unsigned __int8 **)a1);
    if ((v7 - 48) < 0xA)
    {
      uint64_t v8 = (std::string *)(a1 + 72);
      goto LABEL_11;
    }

    if (v7 == 45 || v7 == 43)
    {
      uint64_t v8 = (std::string *)(a1 + 72);
      std::string::push_back((std::string *)(a1 + 72), *(_BYTE *)(a1 + 16));
      if (sub_1000193F4((unsigned __int8 **)a1) - 48 < 0xA)
      {
LABEL_11:
        std::string::push_back(v8, *(_BYTE *)(a1 + 16));
        if (sub_1000193F4((unsigned __int8 **)a1) - 48 <= 9)
        {
          do
            std::string::push_back((std::string *)(a1 + 72), *(_BYTE *)(a1 + 16));
          while (sub_1000193F4((unsigned __int8 **)a1) - 48 < 0xA);
        }

        goto LABEL_13;
      }

      unint64_t v14 = "invalid number; expected digit after exponent sign";
    }

    else
    {
      unint64_t v14 = "invalid number; expected '+', '-', or digit after exponent";
    }

    std::string::push_back(v5, *(_BYTE *)(a1 + 16));
    __int128 v7 = sub_100087A48((unsigned __int8 **)a1);
    if ((unint64_t)(v7 - 48) < 0xA)
    {
      uint64_t v8 = (std::string *)(a1 + 80);
      goto LABEL_11;
    }

    if (v7 == 45 || v7 == 43)
    {
      uint64_t v8 = (std::string *)(a1 + 80);
      std::string::push_back((std::string *)(a1 + 80), *(_BYTE *)(a1 + 16));
      if ((unint64_t)(sub_100087A48((unsigned __int8 **)a1) - 48) < 0xA)
      {
LABEL_11:
        std::string::push_back(v8, *(_BYTE *)(a1 + 16));
        if ((unint64_t)(sub_100087A48((unsigned __int8 **)a1) - 48) <= 9)
        {
          do
            std::string::push_back((std::string *)(a1 + 80), *(_BYTE *)(a1 + 16));
          while ((unint64_t)(sub_100087A48((unsigned __int8 **)a1) - 48) < 0xA);
        }

        goto LABEL_13;
      }

      unint64_t v14 = "invalid number; expected digit after exponent sign";
    }

    else
    {
      unint64_t v14 = "invalid number; expected '+', '-', or digit after exponent";
    }

      sub_100018704((unsigned __int8 **)v16);
    }
  }

  return 0LL;
}

LABEL_16:
  int v9 = 0LL;
LABEL_17:
  unint64_t v33 = "reason";
  *(void *)&__int128 __p = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__dst = v10;
  __int128 v35 = v10;
  sub_100008780((uint64_t)&v26, &v33, (uint64_t)__dst);
  unint64_t v28 = (unsigned __int8 *)&v26;
  uint64_t v29 = 0LL;
  uint64_t v30 = 0LL;
  uint64_t v31 = 0LL;
  unint64_t v32 = 0x8000000000000000LL;
  sub_100008AC8(&v28);
  if (sub_1000087E8((unsigned __int8 **)__dst, &v28))
  {
    uint64_t v11 = sub_10009AE9C();
    if (!v11) {
      goto LABEL_23;
    }
  }

  else
  {
    uint64_t v11 = (uint64_t)sub_100008924((unsigned __int8 **)__dst);
  }

  if (*(_BYTE *)v11 == 3)
  {
    id v12 = *(__int128 **)(v11 + 8);
    goto LABEL_24;
  }

    sub_10003520C();
  }

  return v3;
}

  if (v14 == a3
    || (__int128 v15 = *v14, v15 == 93)
    || (__int128 v17 = v14 + 1, v14 + 1 == a3)
    || v15 != 45
    || *v17 == 93)
  {
    if ((char)v26.__r_.__value_.__s.__size_ < 0)
    {
      if (v26.__r_.__value_.__l.__size_)
      {
        if (v26.__r_.__value_.__l.__size_ != 1)
        {
          unint64_t v16 = (std::string *)v26.__r_.__value_.__r.__words[0];
LABEL_40:
          sub_100037EE4( v6,  v16->__r_.__value_.__s.__data_[0],  v16->__r_.__value_.__s.__data_[1]);
          goto LABEL_41;
        }

        unint64_t v16 = (std::string *)v26.__r_.__value_.__r.__words[0];
        goto LABEL_25;
      }
    }

    else if (v26.__r_.__value_.__s.__size_)
    {
      unint64_t v16 = &v26;
      if (v26.__r_.__value_.__s.__size_ != 1) {
        goto LABEL_40;
      }
LABEL_25:
      sub_100035B48(v6, v16->__r_.__value_.__s.__data_[0]);
    }

    __int128 v4 = 0LL;
    goto LABEL_17;
  }

  __int128 v4 = 1LL;
LABEL_17:
  sub_10004C6D4(&v12, 0LL);
  return v4;
}

      *(void *)object = xpc_null_create();
      goto LABEL_18;
    }
  }

    __int128 v13 = (std::__shared_weak_count *)v18[1];
    *a3 = v6;
    a3[1] = v13;
    if (!v13) {
      return;
    }
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      __int128 v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
    goto LABEL_24;
  }

  if (os_log_type_enabled((os_log_t)qword_100131928, OS_LOG_TYPE_ERROR)) {
    sub_1000AF3E0();
  }
  *a3 = 0LL;
  a3[1] = 0LL;
  __int128 v13 = (std::__shared_weak_count *)v18[1];
  if (v18[1])
  {
LABEL_24:
    unint64_t v16 = (unint64_t *)&v13->__shared_owners_;
    do
      __int128 v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v3 = 0LL;
    goto LABEL_17;
  }

  char v2 = (os_log_s *)qword_100131930;
  if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "[Config Store] Deactivated all device configurations",  buf,  2u);
  }

  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v3 = 1LL;
LABEL_17:
  sub_10004C6D4(&v11, 0LL);
  return v3;
}

    uint64_t v5 = 0LL;
    goto LABEL_17;
  }

  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v3 = (os_log_s *)qword_100131930;
  if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_DEFAULT))
  {
    __int128 v4 = **(unsigned __int8 **)(v1 + 8);
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&buf[4] = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "[Config Store] Set disable sampling override to %{public}d",  buf,  8u);
  }

  uint64_t v5 = 1LL;
LABEL_17:
  sub_10004C6D4(&v13, 0LL);
  return v5;
}

LABEL_23:
  id v12 = 0LL;
LABEL_24:
  unint64_t v33 = "options";
  *(void *)&__int128 __p = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v13 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__dst = v13;
  __int128 v35 = v13;
  sub_100008780((uint64_t)&v26, &v33, (uint64_t)__dst);
  unint64_t v28 = (unsigned __int8 *)&v26;
  uint64_t v29 = 0LL;
  uint64_t v30 = 0LL;
  uint64_t v31 = 0LL;
  unint64_t v32 = 0x8000000000000000LL;
  sub_100008AC8(&v28);
  if (!sub_1000087E8((unsigned __int8 **)__dst, &v28))
  {
    unint64_t v14 = sub_100008924((unsigned __int8 **)__dst);
LABEL_28:
    if (*v14 == 1) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }

  unint64_t v14 = (_BYTE *)sub_10009AE9C();
  if (v14) {
    goto LABEL_28;
  }
LABEL_29:
  unint64_t v14 = 0LL;
LABEL_30:
  unint64_t v33 = "stepRetries";
  *(void *)&__int128 __p = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v15 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__dst = v15;
  __int128 v35 = v15;
  sub_100008780((uint64_t)&v26, &v33, (uint64_t)__dst);
  unint64_t v28 = (unsigned __int8 *)&v26;
  uint64_t v29 = 0LL;
  uint64_t v30 = 0LL;
  uint64_t v31 = 0LL;
  unint64_t v32 = 0x8000000000000000LL;
  sub_100008AC8(&v28);
  if (!sub_1000087E8((unsigned __int8 **)__dst, &v28))
  {
    unint64_t v16 = sub_100008924((unsigned __int8 **)__dst);
LABEL_34:
    goto LABEL_35;
  }

  unint64_t v16 = (_BYTE *)sub_10009AE9C();
  if (v16) {
    goto LABEL_34;
  }
LABEL_35:
  unint64_t v16 = 0LL;
LABEL_36:
  if (v6)
  {
    if (*((char *)v6 + 23) < 0)
    {
      sub_10000B8BC(__dst, *(void **)v6, *((void *)v6 + 1));
    }

    else
    {
      __int128 v17 = *v6;
      *(void *)&__int128 v35 = *((void *)v6 + 2);
      *(_OWORD *)__dst = v17;
    }
  }

  else
  {
    sub_100005064(__dst, "<unknown>");
  }

  if (v9)
  {
    if (*((char *)v9 + 23) < 0)
    {
      sub_10000B8BC(v22, *(void **)v9, *((void *)v9 + 1));
    }

    else
    {
      __int128 v18 = *v9;
      uint64_t v23 = *((void *)v9 + 2);
      *(_OWORD *)unint64_t v22 = v18;
    }

    int v19 = sub_100009100((uint64_t *)v22);
  }

  else
  {
    int v19 = 0;
  }

  DWORD2(v35) = v19;
  if (v12)
  {
    if (*((char *)v12 + 23) < 0)
    {
      sub_10000B8BC(&__p, *(void **)v12, *((void *)v12 + 1));
    }

    else
    {
      __int128 v20 = *v12;
      uint64_t v37 = *((void *)v12 + 2);
      __int128 __p = v20;
    }
  }

  else
  {
    sub_100005064(&__p, "");
  }

  if (v14) {
    sub_10000C3E4((uint64_t)v38, (uint64_t)v14);
  }
  else {
    sub_10000BA40((uint64_t)v38, 0LL, 0LL, 0, 1);
  }
  if (v16)
  {
    LODWORD(v28) = -1431655766;
    sub_10000DC80(v16, (unsigned int *)&v28);
    int v21 = (int)v28;
  }

  else
  {
    int v21 = 0;
  }

  int v40 = v21;
  sub_10000A5BC(a1 + 192, (__int128 *)__dst);
  sub_1000041AC((uint64_t)v38);
  sub_10000425C(&v39, v38[0]);
  if (SHIBYTE(v37) < 0) {
    operator delete((void *)__p);
  }
  if (SBYTE7(v35) < 0) {
    operator delete(__dst[0]);
  }
  if (v9 && SHIBYTE(v23) < 0) {
    operator delete(v22[0]);
  }
  sub_1000041AC((uint64_t)&v26);
  sub_10000425C(&v27, v26);
}

          id v12 = v39;
          ++v13;
          if (v38 != v39) {
            continue;
          }
          uint64_t v6 = 0LL;
          break;
        default:
          sub_10003400C();
      }

      break;
    }
  }

  *(void *)uint64_t v41 = &v38;
  sub_100034848((void ***)v41);
  return v6;
}

    *(_DWORD *)a2 = -992;
    return result;
  }

  *(_DWORD *)a2 = -994;
LABEL_25:
  a2[10] = *((void *)result + 2);
  return result;
}

  if (v19[0])
  {
    v19[1] = v19[0];
    operator delete(v19[0]);
  }

        if (!v7) {
          goto LABEL_26;
        }
      }

      sub_100005064(&__p, __s);
      if (v20)
      {
        unint64_t v33 = 0LL;
        sub_100026984(&v20, (uint64_t)&block, 1, &v15);
        uint64_t v8 = (void ***)v33;
        if ((void ***)v33 == &block)
        {
          uint64_t v8 = &block;
          int v9 = 4LL;
        }

        else
        {
          if (!v33) {
            goto LABEL_14;
          }
          int v9 = 5LL;
        }

        ((void (*)(void))(*v8)[v9])();
      }

      else
      {
        sub_10000BA40((uint64_t)&v15, 0LL, 0LL, 0, 1);
      }

  unint64_t v22 = (void **)(a1 + 23);
  unint64_t v14 = (dispatch_queue_s *)a1[3];
  block = _NSConcreteStackBlock;
  uint64_t v31 = 0x40000000LL;
  unint64_t v32 = sub_10006CFE4;
  unint64_t v33 = (void ***)&unk_100129828;
  uint64_t v34 = (unsigned __int8 *)(a1 + 1);
  __int128 v35 = &v22;
  dispatch_sync(v14, &block);
  std::mutex::unlock(&stru_100131238);
}

  unint64_t v22 = sub_100018150((unsigned __int8 **)&v27);
  sub_10000C3E4(a4, (uint64_t)v22);
}

      sub_100005064(a2, v10);
      return;
  }

void sub_10000A52C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t *a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, void *__p, uint64_t a27, int a28, __int16 a29, char a30, char a31, uint64_t a32, void *a33, uint64_t a34, int a35, __int16 a36, char a37, char a38)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  sub_10000417C(&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_10000A5BC(uint64_t a1, __int128 *a2)
{
  __int128 v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
  uint64_t v5 = (void **)(a1 + 32);
  __int128 v6 = a2[2];
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  *(_OWORD *)uint64_t v5 = v6;
  char v7 = *((_BYTE *)a2 + 56);
  *((_BYTE *)a2 + 55) = 0;
  *((_BYTE *)a2 + 32) = 0;
  v11[0] = v7;
  id v12 = (uint64_t *)*((void *)a2 + 8);
  sub_1000041AC((uint64_t)a2 + 56);
  *((_BYTE *)a2 + 56) = 0;
  *((void *)a2 + 8) = 0LL;
  sub_1000041AC((uint64_t)v11);
  sub_1000041AC((uint64_t)v11);
  char v8 = *(_BYTE *)(a1 + 56);
  *(_BYTE *)(a1 + 56) = v11[0];
  v11[0] = v8;
  int v9 = *(uint64_t **)(a1 + 64);
  *(void *)(a1 + 64) = v12;
  id v12 = v9;
  sub_1000041AC(a1 + 56);
  sub_1000041AC((uint64_t)v11);
  sub_10000425C(&v12, v11[0]);
  *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 18);
  return a1;
}

uint64_t sub_10000A6F8(uint64_t a1)
{
  return a1;
}

void sub_10000A74C(uint64_t a1, uint64_t a2)
{
  *(void *)&__int128 v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v73 = v4;
  __int128 v74 = v4;
  __int128 v71 = v4;
  __int128 v72 = v4;
  __int128 __dst = v4;
  uint64_t v5 = (std::string *)(a1 + 192);
  if (*(char *)(a1 + 215) < 0)
  {
    sub_10000B8BC(&__dst, *(void **)(a1 + 192), *(void *)(a1 + 200));
  }

  else
  {
    __int128 __dst = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    *(void *)&__int128 v71 = *(void *)(a1 + 208);
  }

  DWORD2(v71) = *(_DWORD *)(a1 + 216);
  if (*(char *)(a1 + 247) < 0)
  {
    sub_10000B8BC(&v72, *(void **)(a1 + 224), *(void *)(a1 + 232));
  }

  else
  {
    __int128 v72 = *(_OWORD *)(a1 + 224);
    *(void *)&__int128 v73 = *(void *)(a1 + 240);
  }

  sub_10000C3E4((uint64_t)&v73 + 8, a1 + 248);
  DWORD2(v74) = *(_DWORD *)(a1 + 264);
  unint64_t v68 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v69 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10000BA40((uint64_t)&v68, 0LL, 0LL, 0, 1);
  sub_10000B990((uint64_t)v66, a2);
  __int128 v6 = sub_100003F94((unsigned __int8 *)&v68, "rolloverId");
  sub_1000041AC((uint64_t)v66);
  char v7 = *(_BYTE *)v6;
  *(_BYTE *)__int128 v6 = v66[0];
  v66[0] = v7;
  char v8 = (uint64_t *)v6[1];
  v6[1] = (uint64_t)v67;
  v67 = v8;
  sub_1000041AC((uint64_t)v6);
  sub_1000041AC((uint64_t)v66);
  sub_10000425C(&v67, v66[0]);
  sub_10000B990((uint64_t)v64, a2 + 32);
  int v9 = sub_100003F94((unsigned __int8 *)&v68, "reason");
  sub_1000041AC((uint64_t)v64);
  char v10 = *(_BYTE *)v9;
  *(_BYTE *)int v9 = v64[0];
  v64[0] = v10;
  uint64_t v11 = (uint64_t *)v9[1];
  v9[1] = (uint64_t)v65;
  v65 = v11;
  sub_1000041AC((uint64_t)v9);
  sub_1000041AC((uint64_t)v64);
  sub_10000425C(&v65, v64[0]);
  sub_10000C3E4((uint64_t)v62, a2 + 56);
  id v12 = sub_100003F94((unsigned __int8 *)&v68, "options");
  sub_1000041AC((uint64_t)v62);
  char v13 = *(_BYTE *)v12;
  *(_BYTE *)id v12 = v62[0];
  v62[0] = v13;
  unint64_t v14 = (uint64_t *)v12[1];
  v12[1] = (uint64_t)v63;
  __int128 v63 = v14;
  sub_1000041AC((uint64_t)v12);
  sub_1000041AC((uint64_t)v62);
  sub_10000425C(&v63, v62[0]);
  sub_1000090EC(*(_DWORD *)(a2 + 24), &__p);
  sub_100008E5C((uint64_t)v60, (uint64_t)&__p);
  __int128 v15 = sub_100003F94((unsigned __int8 *)&v68, "lastStep");
  sub_1000041AC((uint64_t)v60);
  char v16 = *(_BYTE *)v15;
  *(_BYTE *)__int128 v15 = v60[0];
  v60[0] = v16;
  __int128 v17 = (uint64_t *)v15[1];
  v15[1] = (uint64_t)v61;
  v61 = v17;
  sub_1000041AC((uint64_t)v15);
  sub_1000041AC((uint64_t)v60);
  sub_10000425C(&v61, v60[0]);
  if (v59 < 0) {
    operator delete(__p);
  }
  __int128 v18 = (uint64_t *)*(unsigned int *)(a2 + 72);
  v55[0] = 6;
  uint64_t v56 = v18;
  sub_1000041AC((uint64_t)v55);
  sub_1000041AC((uint64_t)v55);
  int v19 = sub_100003F94((unsigned __int8 *)&v68, "stepRetries");
  sub_1000041AC((uint64_t)v55);
  unsigned __int8 v20 = *(_BYTE *)v19;
  *(_BYTE *)int v19 = v55[0];
  v55[0] = v20;
  int v21 = (uint64_t *)v19[1];
  v19[1] = (uint64_t)v56;
  uint64_t v56 = v21;
  sub_1000041AC((uint64_t)v19);
  sub_1000041AC((uint64_t)v55);
  sub_10000425C(&v56, v55[0]);
  sub_1000925D8((uint64_t)"rollover", (uint64_t)&v68);
  std::string::operator=(v5, (const std::string *)a2);
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 24);
  std::string::operator=((std::string *)(a1 + 224), (const std::string *)(a2 + 32));
  sub_10000C3E4((uint64_t)&__p, a2 + 56);
  sub_1000041AC((uint64_t)&__p);
  char v22 = *(_BYTE *)(a1 + 248);
  *(_BYTE *)(a1 + 248) = (_BYTE)__p;
  LOBYTE(__p) = v22;
  uint64_t v23 = *(uint64_t **)(a1 + 256);
  *(void *)(a1 + 256) = v58;
  v58 = (std::__shared_weak_count *)v23;
  sub_1000041AC(a1 + 248);
  sub_1000041AC((uint64_t)&__p);
  sub_10000425C((uint64_t **)&v58, __p);
  *(_DWORD *)(a1 + 264) = *(_DWORD *)(a2 + 72);
  if (DWORD2(v71))
  {
    unint64_t v53 = 0xAAAAAAAAAAAAAA00LL;
    v54 = 0LL;
    sub_1000041AC((uint64_t)&v53);
    sub_1000041AC((uint64_t)&v53);
    sub_10000DDFC((uint64_t)v51, "rollover");
    uint64_t v24 = sub_100003F94((unsigned __int8 *)&v53, "type");
    sub_1000041AC((uint64_t)v51);
    char v25 = *(_BYTE *)v24;
    *(_BYTE *)uint64_t v24 = v51[0];
    v51[0] = v25;
    unint64_t v26 = (uint64_t *)v24[1];
    v24[1] = (uint64_t)v52;
    v52 = v26;
    sub_1000041AC((uint64_t)v24);
    sub_1000041AC((uint64_t)v51);
    sub_10000425C(&v52, v51[0]);
    sub_10000B990((uint64_t)v49, (uint64_t)&__dst);
    unint64_t v27 = sub_100003F94((unsigned __int8 *)&v53, "id");
    sub_1000041AC((uint64_t)v49);
    char v28 = *(_BYTE *)v27;
    *(_BYTE *)unint64_t v27 = v49[0];
    v49[0] = v28;
    uint64_t v29 = (uint64_t *)v27[1];
    v27[1] = (uint64_t)v50;
    uint64_t v50 = v29;
    sub_1000041AC((uint64_t)v27);
    sub_1000041AC((uint64_t)v49);
    sub_10000425C(&v50, v49[0]);
    sub_10000B990((uint64_t)v47, (uint64_t)&v72);
    uint64_t v30 = sub_100003F94((unsigned __int8 *)&v53, "reason");
    sub_1000041AC((uint64_t)v47);
    char v31 = *(_BYTE *)v30;
    *(_BYTE *)uint64_t v30 = v47[0];
    v47[0] = v31;
    unint64_t v32 = (uint64_t *)v30[1];
    v30[1] = (uint64_t)v48;
    v48 = v32;
    sub_1000041AC((uint64_t)v30);
    sub_1000041AC((uint64_t)v47);
    sub_10000425C(&v48, v47[0]);
    sub_1000090EC(SDWORD2(v71), &__p);
    sub_100008E5C((uint64_t)v45, (uint64_t)&__p);
    unint64_t v33 = sub_100003F94((unsigned __int8 *)&v53, "step");
    sub_1000041AC((uint64_t)v45);
    char v34 = *(_BYTE *)v33;
    *(_BYTE *)unint64_t v33 = v45[0];
    v45[0] = v34;
    __int128 v35 = (uint64_t *)v33[1];
    v33[1] = (uint64_t)v46;
    unsigned int v46 = v35;
    sub_1000041AC((uint64_t)v33);
    sub_1000041AC((uint64_t)v45);
    sub_10000425C(&v46, v45[0]);
    if (v59 < 0) {
      operator delete(__p);
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v36 = 1000 * (std::chrono::system_clock::now().__d_.__rep_ - *(void *)(a1 + 176));
    v43[0] = 5;
    unint64_t v44 = (uint64_t *)v36;
    sub_1000041AC((uint64_t)v43);
    sub_1000041AC((uint64_t)v43);
    uint64_t v37 = sub_100003F94((unsigned __int8 *)&v53, "duration");
    sub_1000041AC((uint64_t)v43);
    unsigned __int8 v38 = *(_BYTE *)v37;
    *(_BYTE *)uint64_t v37 = v43[0];
    v43[0] = v38;
    unint64_t v39 = (uint64_t *)v37[1];
    v37[1] = (uint64_t)v44;
    unint64_t v44 = v39;
    sub_1000041AC((uint64_t)v37);
    sub_1000041AC((uint64_t)v43);
    sub_10000425C(&v44, v43[0]);
    __int128 __p = (void *)0xAAAAAAAAAAAAAAAALL;
    v58 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
    sub_10000DE8C("com.apple.analyticsd.perf.rollover", (uint64_t)&v53, &__p);
    (*(void (**)(void, void **))(**(void **)(a1 + 144) + 16LL))(*(void *)(a1 + 144), &__p);
    int v40 = v58;
    if (v58)
    {
      p_shared_owners = (unint64_t *)&v58->__shared_owners_;
      do
        unint64_t v42 = __ldaxr(p_shared_owners);
      while (__stlxr(v42 - 1, p_shared_owners));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }

    sub_1000041AC((uint64_t)&v53);
    sub_10000425C(&v54, v53);
  }

  *(std::chrono::system_clock::time_point *)(a1 + 176) = std::chrono::system_clock::now();
  sub_1000041AC((uint64_t)&v68);
  sub_10000425C(&v69, v68);
  sub_1000041AC((uint64_t)&v73 + 8);
  sub_10000425C((uint64_t **)&v74, BYTE8(v73));
  if (SBYTE7(v73) < 0) {
    operator delete((void *)v72);
  }
  if (SBYTE7(v71) < 0) {
    operator delete((void *)__dst);
  }
}

void sub_10000AEC0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20, char a21, uint64_t a22, char a23, uint64_t a24, void *__p, uint64_t a26, int a27, __int16 a28, char a29, char a30, char a31, uint64_t a32, char a33, uint64_t a34, char a35, uint64_t a36, char a37)
{
}

uint64_t sub_10000B004(uint64_t a1, unsigned int a2)
{
  if (a2 >= 8) {
    unsigned __int8 v4 = 0;
  }
  else {
    unsigned __int8 v4 = a2;
  }
  *(void *)&__int128 v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v32 = v5;
  __int128 v33 = v5;
  __int128 v30 = v5;
  *(_OWORD *)char v31 = v5;
  *(_OWORD *)__int128 __dst = v5;
  if (*(char *)(a1 + 215) < 0)
  {
    sub_10000B8BC(__dst, *(void **)(a1 + 192), *(void *)(a1 + 200));
  }

  else
  {
    *(_OWORD *)__int128 __dst = *(_OWORD *)(a1 + 192);
    *(void *)&__int128 v30 = *(void *)(a1 + 208);
  }

  DWORD2(v30) = *(_DWORD *)(a1 + 216);
  if (*(char *)(a1 + 247) < 0)
  {
    sub_10000B8BC(v31, *(void **)(a1 + 224), *(void *)(a1 + 232));
  }

  else
  {
    *(_OWORD *)char v31 = *(_OWORD *)(a1 + 224);
    *(void *)&__int128 v32 = *(void *)(a1 + 240);
  }

  sub_10000C3E4((uint64_t)&v32 + 8, a1 + 248);
  unsigned int v6 = *(_DWORD *)(a1 + 264);
  DWORD2(v33) = v6;
  unsigned int v7 = *(_DWORD *)(a1 + 216);
  if (v7 >= 8) {
    LOBYTE(v7) = 0;
  }
  if (a2 && v4 <= v7)
  {
    if (v4 != v7)
    {
      __int128 v17 = (os_log_s *)(id)qword_1001318F0;
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        sub_1000090EC(a2, __p);
        int v19 = v28;
        unsigned __int8 v20 = (void **)__p[0];
        sub_1000090EC(*(_DWORD *)(a1 + 216), buf);
        int v21 = __p;
        if (v19 < 0) {
          int v21 = v20;
        }
        if (v37 >= 0) {
          char v22 = buf;
        }
        else {
          char v22 = *(_BYTE **)buf;
        }
        *(_DWORD *)unsigned __int8 v38 = 136446466;
        unint64_t v39 = v21;
        __int16 v40 = 2082;
        uint64_t v41 = v22;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "[RolloverManager::RolloverStep] Skipping rollover step %{public}s as it has already successfuly completed (cur rent step: %{public}s)",  v38,  0x16u);
        if (v37 < 0) {
          operator delete(*(void **)buf);
        }
        goto LABEL_41;
      }

      goto LABEL_43;
    }

    __int128 v17 = (os_log_s *)(id)qword_1001318F0;
    BOOL v8 = os_log_type_enabled(v17, OS_LOG_TYPE_INFO);
    if (v6 >= 2)
    {
      if (v8)
      {
        sub_1000090EC(*(_DWORD *)(a1 + 216), __p);
        if (v28 >= 0) {
          int v9 = __p;
        }
        else {
          int v9 = (void **)__p[0];
        }
        int v10 = *(_DWORD *)(a1 + 264);
        *(_DWORD *)buf = 136446466;
        *(void *)&buf[4] = v9;
        __int16 v35 = 1026;
        int v36 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "[RolloverManager::RolloverStep] Exceeded max retries for rollover step %{public}s (retries: %{public}d). Skipping step",  buf,  0x12u);
LABEL_41:
        if (v28 < 0) {
          operator delete(__p[0]);
        }
      }

LABEL_43:
      uint64_t v23 = 0LL;
      goto LABEL_52;
    }

    if (v8)
    {
      sub_1000090EC(*(_DWORD *)(a1 + 216), __p);
      uint64_t v24 = v28 >= 0 ? __p : (void **)__p[0];
      int v25 = *(_DWORD *)(a1 + 264);
      *(_DWORD *)buf = 136446466;
      *(void *)&buf[4] = v24;
      __int16 v35 = 1026;
      int v36 = v25;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "[RolloverManager::RolloverStep] Retrying rollover step %{public}s (retries: %{public}d)",  buf,  0x12u);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
    }

    int v16 = DWORD2(v33) + 1;
  }

  else
  {
    uint64_t v11 = (os_log_s *)(id)qword_1001318F0;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      sub_1000090EC(*(_DWORD *)(a1 + 216), __p);
      int v12 = v28;
      char v13 = (void **)__p[0];
      sub_1000090EC(a2, buf);
      unint64_t v14 = __p;
      if (v12 < 0) {
        unint64_t v14 = v13;
      }
      if (v37 >= 0) {
        __int128 v15 = buf;
      }
      else {
        __int128 v15 = *(_BYTE **)buf;
      }
      *(_DWORD *)unsigned __int8 v38 = 136446466;
      unint64_t v39 = v14;
      __int16 v40 = 2082;
      uint64_t v41 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "[RolloverManager::RolloverStep] Executing new rollover step. Progressing from %{public}s --> %{public}s",  v38,  0x16u);
      if (v37 < 0) {
        operator delete(*(void **)buf);
      }
      if (v28 < 0) {
        operator delete(__p[0]);
      }
    }

    int v16 = 0;
    DWORD2(v30) = a2;
  }

  DWORD2(v33) = v16;
  sub_10000A74C(a1, (uint64_t)__dst);
  uint64_t v23 = 1LL;
LABEL_52:
  sub_1000041AC((uint64_t)&v32 + 8);
  sub_10000425C((uint64_t **)&v33, BYTE8(v32));
  if (SBYTE7(v32) < 0) {
    operator delete(v31[0]);
  }
  if (SBYTE7(v30) < 0) {
    operator delete(__dst[0]);
  }
  return v23;
}

    unint64_t v27 = sub_100018150((unsigned __int8 **)v45);
    sub_100006200((uint64_t)v27, -1, 0x20u, 0LL, 0, buf);
    if (*(void *)(a2 + 72)
      || (sub_10004C38C( a1,  "INSERT INTO modify_eventdefs (modify_event_uuid, modify_event_name, modify_event_type, modify_event_defType, modify_event_config) VALUES (?1, ?2, ?3, ?4, ?5);",
            0,
            (sqlite3_stmt **)v47),
          char v28 = *(sqlite3_stmt **)v47,
          *(void *)unint64_t v47 = 0LL,
          sub_10004C6D4((sqlite3_stmt **)(a2 + 72), v28),
          sub_10004C6D4((sqlite3_stmt **)v47, 0LL),
          *(void *)(a2 + 72)))
    {
      __int16 v40 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
      sub_100040E10(&v40, (void *)(a2 + 72));
      unint64_t v39 = 0LL;
      sub_10004C11C(a1, (sqlite3_stmt **)(a2 + 72), 1, (uint64_t)&__p, &v39);
      sub_10004C11C(a1, (sqlite3_stmt **)(a2 + 72), 2, (uint64_t)&v43, &v39);
      sub_10004C11C(a1, (sqlite3_stmt **)(a2 + 72), 3, (uint64_t)&v42, &v39);
      sub_10004C11C(a1, (sqlite3_stmt **)(a2 + 72), 4, (uint64_t)&v41, &v39);
      sub_10004C11C(a1, (sqlite3_stmt **)(a2 + 72), 5, (uint64_t)buf, &v39);
      if (sub_10004C0B4(a1, (sqlite3_stmt **)(a2 + 72), &v39) == 101)
      {
        insert_rowid = sqlite3_last_insert_rowid(*(sqlite3 **)(a1 + 32));
      }

      else
      {
        insert_rowid = sub_1000BC00C(a1, a2, (uint64_t)&__p);
        if (!insert_rowid)
        {
          uint64_t v29 = *(sqlite3 **)(a1 + 32);
          __int128 v30 = (os_log_s *)qword_100131930;
          char v31 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
          if (v29)
          {
            if (v31)
            {
              std::string::size_type size = (char)__p.__r_.__value_.__s.__size_;
              __int128 v33 = __p.__r_.__value_.__r.__words[0];
              char v34 = sqlite3_errmsg(v29);
              p_p = &__p;
              if (size < 0) {
                p_p = (std::string *)v33;
              }
              *(_DWORD *)unint64_t v47 = 136446466;
              *(void *)&v47[4] = p_p;
              v48 = 2080;
              v49 = v34;
              _os_log_error_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_ERROR,  "[Config Store] ERROR: Failed to insert modify event def uuid='%{public}s'; %s",
                v47,
                0x16u);
            }
          }

          else if (v31)
          {
            sub_1000C69B0();
          }

          insert_rowid = 0LL;
        }
      }

      sub_100040E1C(&v40);
    }

    else
    {
      int v36 = *(sqlite3 **)(a1 + 32);
      char v37 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (v36)
      {
        if (v37)
        {
          unsigned __int8 v38 = sqlite3_errmsg(v36);
          sub_1000C697C((uint64_t)v38, (uint64_t)v47);
        }
      }

      else if (v37)
      {
        sub_1000C6924();
      }

      insert_rowid = 0LL;
    }

    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
LABEL_37:
LABEL_32:
LABEL_27:
LABEL_22:
    return insert_rowid;
  }

  if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR)) {
    sub_1000C676C();
  }
  return 0LL;
}

void sub_10000B434( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
  sub_10000A6F8((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_10000B4E0(uint64_t a1, unsigned __int8 *a2)
{
  int v16 = "skipLogWriting";
  unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)buf = v3;
  __int128 v18 = v3;
  sub_100008780((uint64_t)a2, &v16, (uint64_t)buf);
  v15[0] = a2;
  memset(&v15[1], 0, 24);
  v15[4] = (unsigned __int8 *)0x8000000000000000LL;
  sub_100008AC8(v15);
  if (sub_1000087E8((unsigned __int8 **)buf, v15))
  {
    unsigned __int8 v4 = (_BYTE *)sub_10009AE9C();
    if (!v4) {
      goto LABEL_9;
    }
  }

  else
  {
    unsigned __int8 v4 = sub_100008924((unsigned __int8 **)buf);
  }

  if (*v4 == 4 && v4[8])
  {
    uint64_t v5 = qword_1001318F0;
    if (os_log_type_enabled((os_log_t)qword_1001318F0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      unsigned int v6 = "[RolloverManager] Log writing: SKIP (rollover contains skipLogWriting flag";
      unsigned int v7 = (os_log_s *)v5;
LABEL_18:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, v6, buf, 2u);
    }

    return 0LL;
  }

void sub_10000B6E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000B704(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10000B784(a1);
  operator delete(v1);
}

id sub_10000B718(id *a1)
{
  return *a1;
}

id *sub_10000B720(id *a1)
{
  id v2 = sub_10000B718(a1);
  __int128 v3 = (void *)objc_claimAutoreleasedReturnValue(v2);

  if (v3)
  {
    id v4 = sub_10000B718(a1);
    uint64_t v5 = (dispatch_group_s *)objc_claimAutoreleasedReturnValue(v4);
    dispatch_group_leave(v5);
  }

  id v6 = *a1;
  *a1 = 0LL;

  return a1;
}

uint64_t sub_10000B784(uint64_t a1)
{
  *(void *)a1 = &off_1001255D0;
  id v2 = (void *)(a1 + 272);
  __int128 v3 = *(void **)(a1 + 296);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    __int128 v3 = v2;
  }

  else
  {
    if (!v3) {
      goto LABEL_6;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  sub_1000041AC(a1 + 248);
  sub_10000425C((uint64_t **)(a1 + 256), *(unsigned __int8 *)(a1 + 248));
  sub_10000B890((uint64_t *)(a1 + 184), 0LL);
  uint64_t v5 = *(void *)(a1 + 168);
  *(void *)(a1 + 168) = 0LL;
  if (v5) {
    sub_10000CEC0(a1 + 168, v5);
  }
  uint64_t v6 = *(void *)(a1 + 160);
  *(void *)(a1 + 160) = 0LL;
  if (v6) {
    sub_10000CEC0(a1 + 160, v6);
  }
  sub_100007004(a1 + 144);
  sub_100007004(a1 + 128);
  sub_100007004(a1 + 112);
  sub_100007004(a1 + 96);
  sub_100007004(a1 + 80);
  sub_100007004(a1 + 64);
  sub_100007004(a1 + 48);
  sub_100007004(a1 + 32);
  sub_100009958(a1 + 8);
  return a1;
}

void sub_10000B890(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_100071304(v3);
    operator delete(v4);
  }

void *sub_10000B8BC(_BYTE *__dst, void *__src, unint64_t a3)
{
  uint64_t v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8LL) {
      sub_100005114();
    }
    uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v6 = a3 | 7;
    }
    uint64_t v7 = v6 + 1;
    BOOL v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000LL;
    void *v5 = v8;
    uint64_t v5 = v8;
  }

  else
  {
    __dst[23] = a3;
  }

  return memmove(v5, __src, a3 + 1);
}

void sub_10000B948(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10000B990(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0LL;
  *(_BYTE *)a1 = 3;
  *(void *)(a1 + 8) = sub_10000B9D8(a2);
  sub_1000041AC(a1);
  sub_1000041AC(a1);
  return a1;
}

void *sub_10000B9D8(uint64_t a1)
{
  id v2 = operator new(0x18uLL);
  uint64_t v3 = v2;
  if (*(char *)(a1 + 23) < 0)
  {
    sub_10000B8BC(v2, *(void **)a1, *(void *)(a1 + 8));
  }

  else
  {
    *(_OWORD *)id v2 = *(_OWORD *)a1;
    v2[2] = *(void *)(a1 + 16);
  }

  return v3;
}

void sub_10000BA2C(_Unwind_Exception *a1)
{
}

uint64_t sub_10000BA40(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5)
{
  *(_BYTE *)a1 = 0;
  *(void *)(a1 + 8) = 0LL;
  if (!a3)
  {
LABEL_7:
    int v13 = 1;
    if ((a4 & 1) != 0) {
      goto LABEL_17;
    }
    goto LABEL_10;
  }

  uint64_t v10 = 32 * a3;
  uint64_t v11 = (_BYTE **)(a2 + 16);
  while (1)
  {
    unsigned int v12 = *v11;
    if (**v11 != 2
      || *(void *)(*((void *)v12 + 1) + 8LL) - **((void **)v12 + 1) != 32LL
      || *(_BYTE *)sub_10000BD90((uint64_t)v12, 0LL) != 3)
    {
      break;
    }

    v11 += 4;
    v10 -= 32LL;
    if (!v10) {
      goto LABEL_7;
    }
  }

  int v13 = 0;
  if ((a4 & 1) == 0)
  {
LABEL_10:
    if (a5 == 2) {
      int v14 = 0;
    }
    else {
      int v14 = v13;
    }
    if (a5 != 1) {
      LOBYTE(v13) = 1;
    }
    if ((v13 & 1) == 0)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      sub_100005064(v20, "cannot create object from initializer list");
      sub_100005128(301, (uint64_t)v20, exception);
    }

    int v13 = v14;
  }

LABEL_17:
  uint64_t v15 = a2 + 32 * a3;
  if (v13)
  {
    *(_BYTE *)a1 = 1;
    int v16 = operator new(0x18uLL);
    v16[2] = 0LL;
    v16[1] = 0LL;
    *int v16 = v16 + 1;
    *(void *)(a1 + 8) = v16;
    sub_10000BC34(a2, v15, a1);
  }

  else
  {
    *(_BYTE *)a1 = 2;
    uint64_t v19 = v15;
    v20[0] = a2;
    *(void *)(a1 + 8) = sub_10000BD28(v20, &v19);
  }

  sub_1000041AC(a1);
  return a1;
}

    int v13 = 0LL;
LABEL_21:
    sub_1000041AC((uint64_t)&v30);
    sub_10000425C(&v31, v30);
    return v13;
  }

  return 0LL;
}

    int v13 = 0LL;
LABEL_21:
    sub_1000041AC((uint64_t)&v30);
    sub_10000425C(&v31, v30);
    return v13;
  }

  return 0LL;
}

    int v13 = 0LL;
LABEL_21:
    sub_1000041AC((uint64_t)&v30);
    sub_10000425C(&v31, v30);
    return v13;
  }

  return 0LL;
}

    unsigned int v12 = 0LL;
LABEL_21:
    sub_1000041AC((uint64_t)&v29);
    sub_10000425C(&v30, v29);
    return v12;
  }

  return 0LL;
}

    int v13 = 0LL;
LABEL_21:
    sub_1000041AC((uint64_t)&v30);
    sub_10000425C(&v31, v30);
    return v13;
  }

  return 0LL;
}

    unsigned int v12 = 0LL;
LABEL_21:
    sub_1000041AC((uint64_t)&v29);
    sub_10000425C(&v30, v29);
    return v12;
  }

  return 0LL;
}

    int v13 = 0LL;
LABEL_21:
    sub_1000041AC((uint64_t)&v30);
    sub_10000425C(&v31, v30);
    return v13;
  }

  return 0LL;
}

    uint64_t v5 = *(void *)(v5 + 8);
    if (v5 == v4) {
      goto LABEL_18;
    }
  }

  uint64_t result = memcmp(*(const void **)result, v12, *(void *)(result + 8));
  if ((_DWORD)result) {
    goto LABEL_17;
  }
LABEL_19:
  int v13 = *(void *)(v7 + 64);
  *a3 = *(void *)(v7 + 56);
  a3[1] = v13;
  if (v13)
  {
    int v14 = (unint64_t *)(v13 + 8);
    do
      uint64_t v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }

  return result;
}

    uint64_t v5 = *(void *)(v5 + 8);
    if (v5 == v4) {
      goto LABEL_18;
    }
  }

  uint64_t result = memcmp(*(const void **)result, v12, *(void *)(result + 8));
  if ((_DWORD)result) {
    goto LABEL_17;
  }
LABEL_19:
  int v13 = *(void *)(v7 + 64);
  *a3 = *(void *)(v7 + 56);
  a3[1] = v13;
  if (v13)
  {
    int v14 = (unint64_t *)(v13 + 8);
    do
      uint64_t v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }

  return result;
}

    uint64_t v10 = 0;
    goto LABEL_25;
  }

  if (v4 == v2)
  {
    uint64_t v5 = *(_DWORD *)(a2 + 88);
    if ((v5 & 0x80) == 0)
    {
      if ((v5 & 4) == 0)
      {
        uint64_t v6 = *v2;
LABEL_13:
        if (v6 == 95
          || (v6 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16LL) + 4 * v6) & 0x500) != 0)
        {
          uint64_t v10 = 1;
          goto LABEL_25;
        }

        goto LABEL_17;
      }

      goto LABEL_17;
    }
  }

  uint64_t v7 = *(v4 - 1);
  BOOL v8 = *v4;
  uint64_t v9 = v7 == 95 || (v7 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16LL) + 4 * v7) & 0x500) != 0;
  uint64_t v11 = (_DWORD)v8 == 95
     || (v8 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16LL) + 4 * v8) & 0x500) != 0;
  uint64_t v10 = v9 != v11;
LABEL_25:
  if (*(unsigned __int8 *)(result + 40) == v10)
  {
    unsigned int v12 = 0LL;
    int v13 = -993;
  }

  else
  {
    unsigned int v12 = *(void *)(result + 8);
    int v13 = -994;
  }

  *(_DWORD *)a2 = v13;
  *(void *)(a2 + 80) = v12;
  return result;
}

  uint64_t v9 = objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString, "stringWithFormat:", @"%@ (%@)", v10, v8));
  sub_100005064(a3, (char *)[v9 UTF8String]);
}

      sub_10000425C(v17, v20);
      return;
    }

    bytes_ptr = (unsigned __int8 *)xpc_data_get_bytes_ptr(*a1);
    length = xpc_data_get_length(*a1);
    sub_1000A379C(bytes_ptr, length, (std::string *)out);
    sub_100008E5C((uint64_t)v54, (uint64_t)out);
    sub_1000041AC((uint64_t)v54);
    __int128 v32 = *(_BYTE *)a2;
    *(_BYTE *)a2 = v54[0];
    v54[0] = v32;
    __int128 v33 = (uint64_t *)a2[1];
    a2[1] = v55;
    uint64_t v55 = v33;
    sub_1000041AC((uint64_t)a2);
    sub_1000041AC((uint64_t)v54);
    sub_10000425C(&v55, v54[0]);
    if ((out[23] & 0x80000000) == 0) {
      return;
    }
    uint64_t v15 = *(void **)out;
LABEL_15:
    operator delete(v15);
    return;
  }

  memset(out, 170, 24);
  sub_10000BA40((uint64_t)&v45, 0LL, 0LL, 0, 2);
  sub_100057DA0((uint64_t)&v45, out);
  sub_1000041AC((uint64_t)&v45);
  sub_10000425C((uint64_t **)&v45.__r_.__value_.__l.__size_, v45.__r_.__value_.__s.__data_[0]);
  count = xpc_array_get_count(*a1);
  sub_1000045E0((uint64_t *)out, count);
  if (count)
  {
    for (i = 0LL; i != count; ++i)
    {
      uint64_t v23 = xpc_array_get_value(*a1, i);
      uint64_t v24 = v23;
      v44.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
      if (v23)
      {
        xpc_retain(v23);
      }

      else
      {
        uint64_t v24 = xpc_null_create();
        v44.__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
      }

      sub_1000A3A14(&v45, &v44);
      int v25 = *(void *)&out[8];
      if (*(void *)&out[8] >= *(void *)&out[16])
      {
        unint64_t v26 = sub_1000587D0((uint64_t *)out, (uint64_t)&v45);
      }

      else
      {
        **(_BYTE **)&out[8] = v45.__r_.__value_.__s.__data_[0];
        *(void *)(v25 + 8) = v45.__r_.__value_.__l.__size_;
        sub_1000041AC((uint64_t)&v45);
        v45.__r_.__value_.__s.__data_[0] = 0;
        v45.__r_.__value_.__l.__size_ = 0LL;
        sub_1000041AC(v25);
        unint64_t v26 = v25 + 16;
      }

      *(void *)&out[8] = v26;
      sub_1000041AC((uint64_t)&v45);
      sub_10000425C((uint64_t **)&v45.__r_.__value_.__l.__size_, v45.__r_.__value_.__s.__data_[0]);
      xpc_release(v24);
    }
  }

  v56[0] = 2;
  unint64_t v27 = (uint64_t *)operator new(0x18uLL);
  *(_OWORD *)unint64_t v27 = *(_OWORD *)out;
  v27[2] = *(void *)&out[16];
  memset(out, 0, 24);
  uint64_t v57 = v27;
  sub_1000041AC((uint64_t)v56);
  sub_1000041AC((uint64_t)v56);
  sub_1000041AC((uint64_t)v56);
  char v28 = *(_BYTE *)a2;
  *(_BYTE *)a2 = v56[0];
  v56[0] = v28;
  uint64_t v29 = (uint64_t *)a2[1];
  a2[1] = v57;
  uint64_t v57 = v29;
  sub_1000041AC((uint64_t)a2);
  sub_1000041AC((uint64_t)v56);
  sub_10000425C(&v57, v56[0]);
  v45.__r_.__value_.__r.__words[0] = (std::string::size_type)out;
  sub_100004D64((void ***)&v45);
}

    return;
  }

  *a3 = v5;
  uint64_t v9 = a3 + 1;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10000B8BC(v9, *(void **)a2, *(void *)(a2 + 8));
  }

  else
  {
    *(_OWORD *)uint64_t v9 = *(_OWORD *)a2;
    a3[3] = *(void *)(a2 + 16);
  }

  if (data != v8 || size != v9) {
    return 1LL;
  }
  if (a3[1].__r_.__value_.__r.__words[0] != *(void *)(a4 + 24)
    || a3[1].__r_.__value_.__l.__size_ != *(void *)(a4 + 32))
  {
    return 0xFFFFFFFFLL;
  }

  return 0LL;
}

void sub_10000BBF4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
}

uint64_t sub_10000BC34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
      BOOL v8 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
      sub_10000BEE0(v5, (uint64_t)&v7);
      sub_10000BF40(*(uint64_t ***)(a3 + 8), *(const void ***)(*v8 + 8), *(void *)(*v8 + 8), *v8 + 16);
      sub_1000041AC((uint64_t)&v7);
      sub_10000425C(&v8, v7);
      v5 += 32LL;
    }

    while (v5 != a2);
  }

  return a3;
}

void sub_10000BD00( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
}

void *sub_10000BD28(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = operator new(0x18uLL);
  uint64_t v5 = *a1;
  uint64_t v6 = *a2;
  unint64_t v7 = (*a2 - *a1) >> 5;
  v4[1] = 0LL;
  v4[2] = 0LL;
  void *v4 = 0LL;
  sub_10000C0E0(v4, v5, v6, v7);
  return v4;
}

void sub_10000BD7C(_Unwind_Exception *a1)
{
}

uint64_t sub_10000BD90(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)a1 != 2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v5 = (char *)sub_10000528C((char *)a1);
    sub_100005064(&v8, v5);
    uint64_t v6 = std::string::insert(&v8, 0LL, "cannot use operator[] with a numeric argument with ");
    __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    std::string::size_type cap = v6->__r_.__value_.__l.__cap_;
    __int128 v9 = v7;
    v6->__r_.__value_.__l.__size_ = 0LL;
    v6->__r_.__value_.__l.__cap_ = 0LL;
    v6->__r_.__value_.__r.__words[0] = 0LL;
    sub_100005128(305, (uint64_t)&v9, exception);
  }

  return **(void **)(a1 + 8) + 16 * a2;
}

void sub_10000BE80( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }

  else if (!v22)
  {
    goto LABEL_8;
  }

  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t sub_10000BEE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!*(_BYTE *)(a1 + 24)) {
    return sub_10000C3E4(a2, v3);
  }
  *(_BYTE *)a2 = *(_BYTE *)v3;
  *(void *)(a2 + 8) = *(void *)(v3 + 8);
  sub_1000041AC(v3);
  *(_BYTE *)uint64_t v3 = 0;
  *(void *)(v3 + 8) = 0LL;
  return sub_1000041AC(a2);
}

uint64_t *sub_10000BF40(uint64_t **a1, const void **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  __int128 v7 = (uint64_t **)sub_1000053B0((uint64_t)a1, &v9, a2);
  uint64_t result = *v7;
  if (!*v7)
  {
    memset(v10, 170, sizeof(v10));
    sub_10000C004((uint64_t)a1, a3, a4, v10);
    sub_1000054D0(a1, v9, v7, v10[0]);
    return v10[0];
  }

  return result;
}

uint64_t sub_10000C004@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  memset(a4, 170, 24);
  std::string v8 = operator new(0x48uLL);
  *a4 = v8;
  a4[1] = v7;
  v8[2] = *(_OWORD *)a2;
  *((void *)v8 + 6) = *(void *)(a2 + 16);
  *(void *)a2 = 0LL;
  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  char v9 = *(_BYTE *)a3;
  *((void *)v8 + 8) = *(void *)(a3 + 8);
  *((_BYTE *)v8 + 56) = v9;
  uint64_t v10 = (uint64_t)v8 + 56;
  sub_1000041AC(a3);
  *(_BYTE *)a3 = 0;
  *(void *)(a3 + 8) = 0LL;
  uint64_t result = sub_1000041AC(v10);
  *((_BYTE *)a4 + 16) = 1;
  return result;
}

void sub_10000C098(uint64_t a1, void *__p)
{
  if (*(_BYTE *)(a1 + 8)) {
    sub_10000B948(*(void *)a1, (uint64_t)__p + 32);
  }
  if (__p) {
    operator delete(__p);
  }
}

void *sub_10000C0E0(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_10000C194(result, a4);
    uint64_t result = (void *)sub_10000C1D4((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }

  return result;
}

void sub_10000C174(_Unwind_Exception *a1, uint64_t a2, ...)
{
  *(void *)(v2 + 8) = v3;
  sub_100004D64((void ***)va);
  _Unwind_Resume(a1);
}

char *sub_10000C194(void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_1000046F8();
  }
  uint64_t result = (char *)sub_1000047F4((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

uint64_t sub_10000C1D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v8 = a4;
  uint64_t v9 = a4;
  v10[0] = a1;
  v10[1] = &v8;
  v10[2] = &v9;
  unint64_t v11 = 0xAAAAAAAAAAAAAA00LL;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_10000C2A4(v4, v6);
      v6 += 32LL;
      uint64_t v4 = v9 + 16;
      v9 += 16LL;
    }

    while (v6 != a3);
  }

  LOBYTE(v11) = 1;
  sub_10000C348((uint64_t)v10);
  return v4;
}

void sub_10000C290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_10000C2A4(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = v4[0];
  *(void *)(a1 + 8) = v5;
  sub_1000041AC((uint64_t)v4);
  v4[0] = 0;
  uint64_t v5 = 0LL;
  sub_1000041AC(a1);
  sub_1000041AC((uint64_t)v4);
  sub_10000425C(&v5, v4[0]);
  return a1;
}

uint64_t sub_10000C348(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_10000C390( *(void *)a1,  **(void **)(a1 + 16),  **(void **)(a1 + 16),  **(void **)(a1 + 8),  **(void **)(a1 + 8));
  }
  return a1;
}

void sub_10000C390(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3 != a5)
  {
    uint64_t v6 = a3 - 16;
    uint64_t v7 = (unsigned __int8 *)(a3 - 16);
    do
    {
      sub_1000041AC(v6);
      int v8 = *v7;
      v7 -= 16;
      sub_10000425C((uint64_t **)(v6 + 8), v8);
      BOOL v9 = v6 == a5;
      uint64_t v6 = (uint64_t)v7;
    }

    while (!v9);
  }

uint64_t sub_10000C3E4(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = 0LL;
  sub_1000041AC(a2);
  switch(*(_BYTE *)a1)
  {
    case 1:
      uint64_t v4 = sub_10000C48C(*(const void ****)(a2 + 8));
      goto LABEL_8;
    case 2:
      uint64_t v4 = sub_10000C900(*(uint64_t **)(a2 + 8));
      goto LABEL_8;
    case 3:
      uint64_t v4 = sub_10000B9D8(*(void *)(a2 + 8));
      goto LABEL_8;
    case 4:
      uint64_t v4 = (uint64_t *)*(unsigned __int8 *)(a2 + 8);
      goto LABEL_8;
    case 5:
    case 6:
    case 7:
      uint64_t v4 = *(uint64_t **)(a2 + 8);
      goto LABEL_8;
    case 8:
      uint64_t v4 = sub_10000CADC(*(void *)(a2 + 8));
LABEL_8:
      *(void *)(a1 + 8) = v4;
      break;
    default:
      break;
  }

  sub_1000041AC(a1);
  return a1;
}

uint64_t *sub_10000C48C(const void ***a1)
{
  uint64_t v2 = (uint64_t *)operator new(0x18uLL);
  sub_10000C4D4(v2, a1);
  return v2;
}

void sub_10000C4C0(_Unwind_Exception *a1)
{
}

uint64_t *sub_10000C4D4(uint64_t *a1, const void ***a2)
{
  a1[2] = 0LL;
  a1[1] = 0LL;
  *a1 = (uint64_t)(a1 + 1);
  sub_10000C528(a1, *a2, a2 + 1);
  return a1;
}

void sub_10000C510(_Unwind_Exception *a1)
{
}

uint64_t *sub_10000C528(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      uint64_t result = sub_10000C5AC(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      uint64_t v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          int v8 = (const void ***)v7;
          uint64_t v7 = (const void **)*v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          int v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          uint64_t v4 = (const void **)v8;
        }

        while (!v9);
      }

      uint64_t v4 = (const void **)v8;
    }

    while (v8 != a3);
  }

  return result;
}

uint64_t *sub_10000C5AC(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  uint64_t v8 = 0xAAAAAAAAAAAAAAAALL;
  BOOL v9 = (const void **)0xAAAAAAAAAAAAAAAALL;
  uint64_t v6 = (uint64_t **)sub_10000C664(a1, a2, &v9, &v8, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    memset(v10, 170, sizeof(v10));
    sub_10000C7FC((uint64_t)a1, a4, v10);
    sub_1000054D0(a1, (uint64_t)v9, v6, (uint64_t *)v10[0]);
    return (uint64_t *)v10[0];
  }

  return result;
}

const void **sub_10000C664(void *a1, uint64_t *a2, const void ***a3, uint64_t *a4, const void **a5)
{
  BOOL v9 = (const void **)(a1 + 1);
  if (a1 + 1 == a2 || sub_100005524((uint64_t)(a1 + 2), a5, (const void **)a2 + 4))
  {
    if ((uint64_t *)*a1 == a2)
    {
      unsigned int v12 = (const void **)a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }

      else
      {
        *a3 = (const void **)a2;
        return (const void **)a2;
      }
    }

    unint64_t v11 = (const void **)*a2;
    if (*a2)
    {
      do
      {
        unsigned int v12 = v11;
        unint64_t v11 = (const void **)v11[1];
      }

      while (v11);
    }

    else
    {
      int v16 = a2;
      do
      {
        unsigned int v12 = (const void **)v16[2];
        BOOL v17 = *v12 == v16;
        int v16 = (uint64_t *)v12;
      }

      while (v17);
    }

    return (const void **)sub_1000053B0((uint64_t)a1, a3, a5);
  }

  if (sub_100005524((uint64_t)(a1 + 2), (const void **)a2 + 4, a5))
  {
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      int v14 = (const void **)a2[1];
      do
      {
        uint64_t v15 = v14;
        int v14 = (const void **)*v14;
      }

      while (v14);
    }

    else
    {
      __int128 v18 = (const void **)a2;
      do
      {
        uint64_t v15 = (const void **)v18[2];
        BOOL v17 = *v15 == v18;
        __int128 v18 = v15;
      }

      while (!v17);
    }

    if (v15 != v9)
    {
      uint64_t v13 = *a4;
    }

    if (v13)
    {
      *a3 = v15;
      return v15;
    }

    else
    {
      *a3 = (const void **)a2;
    }

    return (const void **)a4;
  }

  *a3 = (const void **)a2;
  *a4 = (uint64_t)a2;
  return (const void **)a4;
}

char *sub_10000C7FC@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, char **a3@<X8>)
{
  uint64_t v5 = (char *)(a1 + 8);
  memset(a3, 170, 24);
  uint64_t v6 = (char *)operator new(0x48uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  uint64_t result = sub_10000C88C(v6 + 32, a2);
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_10000C870(_Unwind_Exception *a1)
{
  void *v1 = 0LL;
  sub_10000C098(v2, v3);
  _Unwind_Resume(a1);
}

char *sub_10000C88C(char *__dst, __int128 *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10000B8BC(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__int128 __dst = v4;
  }

  sub_10000C3E4(__dst + 24, (char *)a2 + 24);
  return __dst;
}

void sub_10000C8E4(_Unwind_Exception *exception_object)
{
}

void *sub_10000C900(uint64_t *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  v2[1] = 0LL;
  v2[2] = 0LL;
  void *v2 = 0LL;
  sub_10000C958(v2, *a1, a1[1], (a1[1] - *a1) >> 4);
  return v2;
}

void sub_10000C944(_Unwind_Exception *a1)
{
}

void *sub_10000C958(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_10000C194(result, a4);
    uint64_t result = (void *)sub_10000CA0C((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }

  return result;
}

void sub_10000C9EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  *(void *)(v2 + 8) = v3;
  sub_100004D64((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10000CA0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v8 = a4;
  uint64_t v9 = a4;
  v10[0] = a1;
  v10[1] = &v8;
  v10[2] = &v9;
  unint64_t v11 = 0xAAAAAAAAAAAAAA00LL;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_10000C3E4(v4, v6);
      v6 += 16LL;
      uint64_t v4 = v9 + 16;
      v9 += 16LL;
    }

    while (v6 != a3);
  }

  LOBYTE(v11) = 1;
  sub_10000C348((uint64_t)v10);
  return v4;
}

void sub_10000CAC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void *sub_10000CADC(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  v2[1] = 0LL;
  v2[2] = 0LL;
  void *v2 = 0LL;
  sub_10000CB38(v2, *(const void **)a1, *(void *)(a1 + 8), *(void *)(a1 + 8) - *(void *)a1);
  *((_WORD *)v2 + 12) = *(_WORD *)(a1 + 24);
  return v2;
}

void sub_10000CB24(_Unwind_Exception *a1)
{
}

void *sub_10000CB38(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    uint64_t v6 = result;
    uint64_t result = sub_10000CBB0(result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_10000CB94(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

char *sub_10000CBB0(void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000LL) != 0) {
    sub_1000046F8();
  }
  uint64_t result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

uint64_t *sub_10000CBF0(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  void *v4 = &off_1001256A0;
  v4[1] = 0LL;
  v4[2] = 0LL;
  v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2) {
    uint64_t v5 = (void *)(a2 + 8);
  }
  else {
    uint64_t v5 = 0LL;
  }
  sub_10000CCC8((uint64_t)a1, v5, a2);
  return a1;
}

void sub_10000CC80( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    sub_10000CD78((uint64_t)&a12, v12);
    __cxa_rethrow();
  }

  _Unwind_Resume(exception_object);
}

void sub_10000CCC8(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = (std::__shared_weak_count *)a2[1];
    if (!v4 || v4->__shared_owners_ == -1)
    {
      uint64_t v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          unint64_t v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
        p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
        do
          unint64_t v9 = __ldxr(p_shared_weak_owners);
        while (__stxr(v9 + 1, p_shared_weak_owners));
        uint64_t v4 = (std::__shared_weak_count *)a2[1];
      }

      *a2 = a3;
      a2[1] = v5;
      if (v4) {
        std::__shared_weak_count::__release_weak(v4);
      }
      if (v5)
      {
        uint64_t v10 = (unint64_t *)&v5->__shared_owners_;
        do
          unint64_t v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
  }

void sub_10000CD78(uint64_t a1, id *a2)
{
  id v3 = sub_10000B718(a2 + 3);
  uint64_t v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v3);
  dispatch_barrier_async_f(v4, a2, (dispatch_function_t)sub_10000CEAC);
}

void sub_10000CDC4(std::__shared_weak_count *a1)
{
}

void sub_10000CDD8(uint64_t a1)
{
  uint64_t v1 = *(id **)(a1 + 24);
  id v2 = sub_10000B718(v1 + 3);
  id v3 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v2);
  dispatch_barrier_async_f(v3, v1, (dispatch_function_t)sub_10000CEAC);
}

uint64_t sub_10000CE20(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

BOOL sub_10000CE60(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1LL;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0LL;
}

uint64_t sub_10000CEAC(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

void sub_10000CEC0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100007004(a2 + 64);
    sub_100007004(a2 + 48);
    sub_100007004(a2 + 32);
    sub_100007004(a2 + 16);
    uint64_t v3 = (void *)sub_100007004(a2);
    operator delete(v3);
  }

void sub_10000CF0C(uint64_t a1)
{
}

void *sub_10000CF18(void *a1, void *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  *a1 = *a2;
  if (!v3)
  {
    a1[1] = 0LL;
LABEL_5:
    sub_10000CF58();
  }

  uint64_t v4 = std::__shared_weak_count::lock(v3);
  a1[1] = v4;
  if (!v4) {
    goto LABEL_5;
  }
  return a1;
}

void sub_10000CF58()
{
  exception = __cxa_allocate_exception(8uLL);
}

void sub_10000CF8C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v48 = v2;
  uint64_t v3 = *(void *)v2;
  uint64_t v4 = (os_log_s *)(id)qword_1001318F0;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = (void *)(v2 + 8);
    sub_100006200(v2 + 32, -1, 0x20u, 0LL, 1, __p);
    if ((SBYTE7(v54) & 0x80u) == 0) {
      uint64_t v6 = __p;
    }
    else {
      uint64_t v6 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&buf[4] = v5;
    *(_WORD *)&_BYTE buf[12] = 2082;
    *(void *)&buf[14] = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[RolloverManager] *** BEGINNING PERFORM ROLLOVER (reason: %{public}s, options: %{public}s)",  buf,  0x16u);
    if (SBYTE7(v54) < 0) {
      operator delete(__p[0]);
    }
  }

  unint64_t v7 = operator new(8uLL);
  sub_1000712D0(v7, "com.apple.analyticsd.rollover");
  sub_10000B890((uint64_t *)(v3 + 184), (uint64_t)v7);
  sub_1000A391C(0);
  if (!*(_DWORD *)(v3 + 216))
  {
    size_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
    id v9 = objc_claimAutoreleasedReturnValue([v8 UUIDString]);
    std::string::assign((std::string *)(v3 + 192), (const std::string::value_type *)[v9 UTF8String]);

    std::string::operator=((std::string *)(v3 + 224), (const std::string *)(v2 + 8));
    sub_10000C3E4((uint64_t)v51, v2 + 32);
    sub_1000041AC((uint64_t)v51);
    unsigned __int8 v10 = *(_BYTE *)(v3 + 248);
    *(_BYTE *)(v3 + 248) = v51[0];
    v51[0] = v10;
    unint64_t v11 = *(uint64_t **)(v3 + 256);
    *(void *)(v3 + 256) = v52;
    v52 = v11;
    sub_1000041AC(v3 + 248);
    sub_1000041AC((uint64_t)v51);
    sub_10000425C(&v52, v51[0]);
    goto LABEL_17;
  }

  if (*(char *)(v3 + 247) < 0)
  {
    if (*(void *)(v3 + 232)) {
      goto LABEL_17;
    }
  }

  else if (*(_BYTE *)(v3 + 247))
  {
    goto LABEL_17;
  }

  std::string::assign((std::string *)(v3 + 224), "scheduled");
  unsigned int v12 = (os_log_s *)qword_1001318F0;
  if (os_log_type_enabled((os_log_t)qword_1001318F0, OS_LOG_TYPE_ERROR)) {
    sub_1000D6E5C((char *)(v3 + 247), (void *)(v3 + 224), v12);
  }
LABEL_17:
  if (sub_10000B004(v3, 2u))
  {
    BOOL v13 = sub_100010F60(*(void *)(v3 + 32));
    if (!v13) {
      sub_100010A0C(*(void *)(v3 + 32));
    }
    if (sub_10000B4E0(v13, (unsigned __int8 *)(v3 + 248)))
    {
      sub_100023834(*(void *)(v3 + 48));
      sub_1000519BC(*(uint64_t **)(v3 + 160), v3 + 224, v3 + 248);
    }
  }

  if (sub_10000B004(v3, 3u))
  {
    v49 = "preserveState";
    unint64_t v55 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v14 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)__int128 __p = v14;
    __int128 v54 = v14;
    sub_100008780(v2 + 32, &v49, (uint64_t)__p);
    *(void *)buf = v2 + 32;
    *(_OWORD *)&buf[8] = 0uLL;
    uint64_t v57 = 0LL;
    unint64_t v58 = 0x8000000000000000LL;
    sub_100008AC8((unsigned __int8 **)buf);
    if (sub_1000087E8((unsigned __int8 **)__p, (unsigned __int8 **)buf))
    {
      uint64_t v15 = (unsigned __int8 *)sub_10009AE9C();
      if (!v15)
      {
        int v16 = 0LL;
        goto LABEL_32;
      }
    }

    else
    {
      uint64_t v15 = sub_100008924((unsigned __int8 **)__p);
    }

    int v18 = *v15;
    BOOL v17 = v15 + 8;
    if (v18 == 4) {
      int v16 = v17;
    }
    else {
      int v16 = 0LL;
    }
LABEL_32:
    v49 = "aggPeriod";
    unint64_t v55 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v19 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)__int128 __p = v19;
    __int128 v54 = v19;
    sub_100008780(v2 + 32, &v49, (uint64_t)__p);
    *(void *)buf = v2 + 32;
    *(_OWORD *)&buf[8] = 0uLL;
    uint64_t v57 = 0LL;
    unint64_t v58 = 0x8000000000000000LL;
    sub_100008AC8((unsigned __int8 **)buf);
    unint64_t v20 = 0xAAAAAA0000000000LL;
    unsigned int v21 = -1431655936;
    if (sub_1000087E8((unsigned __int8 **)__p, (unsigned __int8 **)buf))
    {
      uint64_t v22 = sub_10009AE9C();
      if (!v22) {
        goto LABEL_44;
      }
    }

    else
    {
      uint64_t v22 = (uint64_t)sub_100008924((unsigned __int8 **)__p);
    }

    if (*(_BYTE *)v22 == 3)
    {
      uint64_t v23 = *(char **)(v22 + 8);
      if (v23)
      {
        if (v23[23] < 0) {
          uint64_t v23 = *(char **)v23;
        }
        sub_100005064(__p, v23);
        int v24 = sub_10000D8AC(__p);
        unsigned __int8 v25 = v24;
        unsigned int v21 = v24 & 0xFFFFFF00;
        if (SBYTE7(v54) < 0) {
          operator delete(__p[0]);
        }
        char v26 = 0;
        unint64_t v20 = 0xAAAAAA0100000000LL;
        if (!v16) {
          goto LABEL_46;
        }
        goto LABEL_45;
      }
    }

LABEL_64:
  if (sub_10000B004(v3, 4u))
  {
    uint64_t v35 = *(void *)(v3 + 96) + *(void *)(**(void **)(v3 + 96) - 88LL);
    (*(void (**)(uint64_t))(*(void *)v35 + 16LL))(v35);
    uint64_t v36 = *(void *)(v3 + 112) + *(void *)(**(void **)(v3 + 112) - 88LL);
    (*(void (**)(uint64_t))(*(void *)v36 + 16LL))(v36);
  }

  if (sub_10000B004(v3, 5u))
  {
    v49 = "skipConfigurationActivation";
    unint64_t v55 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v37 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v37 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)__int128 __p = v37;
    __int128 v54 = v37;
    sub_100008780(v2 + 32, &v49, (uint64_t)__p);
    *(void *)buf = v2 + 32;
    *(_OWORD *)&buf[8] = 0uLL;
    uint64_t v57 = 0LL;
    unint64_t v58 = 0x8000000000000000LL;
    sub_100008AC8((unsigned __int8 **)buf);
    if (sub_1000087E8((unsigned __int8 **)__p, (unsigned __int8 **)buf))
    {
      unsigned __int8 v38 = (_BYTE *)sub_10009AE9C();
      if (!v38)
      {
LABEL_73:
        sub_1000AB754(*(void **)(v3 + 80), (dispatch_group_t *)__p);
        dispatch_group_wait((dispatch_group_t)__p[0], 0xFFFFFFFFFFFFFFFFLL);
        unint64_t v39 = __p[0];
        __p[0] = 0LL;

        sub_1000AB59C(*(void **)(v3 + 80), (dispatch_group_t *)__p);
        dispatch_group_wait((dispatch_group_t)__p[0], 0xFFFFFFFFFFFFFFFFLL);
        __int16 v40 = __p[0];
        __p[0] = 0LL;

        goto LABEL_74;
      }
    }

    else
    {
      unsigned __int8 v38 = sub_100008924((unsigned __int8 **)__p);
    }

    if (*v38 != 4 || !v38[8]) {
      goto LABEL_73;
    }
  }

          unint64_t v27 = 0LL;
LABEL_65:
          uint64_t v56 = "builtOnDate";
          unint64_t v55 = 0xAAAAAAAAAAAAAAAALL;
          *(void *)&int v28 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v28 + 1) = 0xAAAAAAAAAAAAAAAALL;
          __int128 __dst = v28;
          __int128 v54 = v28;
          sub_100008780((uint64_t)&v41, &v56, (uint64_t)&__dst);
          uint64_t v48 = (unsigned __int8 *)&v41;
          v49 = 0LL;
          uint64_t v50 = 0LL;
          uint64_t v51 = 0LL;
          v52 = 0x8000000000000000LL;
          sub_100008AC8(&v48);
          if (sub_1000087E8((unsigned __int8 **)&__dst, &v48))
          {
            int v29 = sub_10009AE9C();
            if (!v29) {
              goto LABEL_71;
            }
          }

          else
          {
            int v29 = (uint64_t)sub_100008924((unsigned __int8 **)&__dst);
          }

          if (*(_BYTE *)v29 == 3)
          {
            int v30 = *(__int128 **)(v29 + 8);
            goto LABEL_72;
          }

  uint64_t v23 = sub_100005064(&v38, "com.apple.private.CoreAnalytics.QueryLocation.allow");
  int v24 = sub_100077394((uint64_t)v23, a2, a3, (uint64_t *)&v38);
  unsigned __int8 v25 = v24;
  if (SHIBYTE(v40) < 0)
  {
    operator delete(v38);
    if ((v25 & 1) == 0) {
      goto LABEL_69;
    }
    goto LABEL_68;
  }

  if ((v24 & 1) != 0)
  {
LABEL_68:
    (*(void (**)(void, void **, xpc_object_t *, __int128 *, uint64_t, void))(**(void **)(a1 + 112) + 24LL))( *(void *)(a1 + 112),  __p,  &object,  &v34,  -1LL,  0LL);
    remote_connection = xpc_dictionary_get_remote_connection(*a3);
    xpc_connection_send_message(remote_connection, v7);
  }

LABEL_74:
  if (sub_10000B004(v3, 6u))
  {
    notify_post("com.apple.coreanalytics.dailylogging");
    uint64_t v41 = *(void *)(v3 + 144);
    sub_100005064(__p, "com.apple.coreanalytics.meta.postRollover");
    sub_10000EF2C(v2 + 8, (unsigned __int8 *)(v2 + 32), (uint64_t)&v49);
    sub_1000723B4((__int128 *)__p, (uint64_t)&v49, buf);
    (*(void (**)(uint64_t, _BYTE *))(*(void *)v41 + 24LL))(v41, buf);
    unint64_t v42 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      unint64_t v43 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }

    sub_1000041AC((uint64_t)&v49);
    sub_10000425C(&v50, v49);
    if (SBYTE7(v54) < 0) {
      operator delete(__p[0]);
    }
  }

  if (sub_10000B004(v3, 7u))
  {
    sub_100010B34(*(void *)(v3 + 32));
    sub_100010C5C(*(void *)(v3 + 32));
    sub_100010D84(*(void *)(v3 + 32));
    sub_100010EAC(*(void *)(v3 + 32));
  }

  sub_10000B004(v3, 0);
  sub_1000A391C(0);
  sub_10000B890((uint64_t *)(v3 + 184), 0LL);
  id v45 = (os_log_s *)(id)qword_1001318F0;
  if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v46 = (void *)(v2 + 8);
    sub_100006200(v2 + 32, -1, 0x20u, 0LL, 1, __p);
    if ((SBYTE7(v54) & 0x80u) == 0) {
      unint64_t v47 = __p;
    }
    else {
      unint64_t v47 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&buf[4] = v46;
    *(_WORD *)&_BYTE buf[12] = 2082;
    *(void *)&buf[14] = v47;
    _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "[RolloverManager] *** COMPLETED PERFORM ROLLOVER (reason: %{public}s, options: %{public}s)",  buf,  0x16u);
    if (SBYTE7(v54) < 0) {
      operator delete(__p[0]);
    }
  }

  sub_10000D84C(&v48);
  sub_100007004((uint64_t)(a1 + 1));
  operator delete(a1);
}

void sub_10000D76C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27)
{
  sub_10000D84C(&a10);
  sub_100007004((uint64_t)v27 + 8);
  operator delete(v27);
  _Unwind_Resume(a1);
}

uint64_t *sub_10000D84C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0LL;
  if (v2)
  {
    sub_10000B720((id *)(v2 + 48));
    sub_1000041AC(v2 + 32);
    sub_10000425C((uint64_t **)(v2 + 40), *(unsigned __int8 *)(v2 + 32));
    operator delete((void *)v2);
  }

  return a1;
}

uint64_t sub_10000D8AC(void *a1)
{
  if (*((char *)a1 + 23) < 0)
  {
    uint64_t v2 = a1[1];
    if (v2 == 5 && *(_DWORD *)*a1 == 1818845508 && *(_BYTE *)(*a1 + 4LL) == 121) {
      return 0LL;
    }
    if (v2 == 6)
    {
      if (*(_DWORD *)*a1 == 1801807191 && *(_WORD *)(*a1 + 4LL) == 31084) {
        return 1LL;
      }
      uint64_t v2 = a1[1];
    }

    if (v2 == 7)
    {
      if (*(_DWORD *)*a1 == 1953394509 && *(_DWORD *)(*a1 + 3LL) == 2037147764) {
        return 2LL;
      }
      uint64_t v2 = a1[1];
    }

    if (v2 != 9) {
      return 0LL;
    }
    a1 = (void *)*a1;
    goto LABEL_25;
  }

  int v1 = *((unsigned __int8 *)a1 + 23);
  if (v1 == 6) {
    return *(_DWORD *)a1 == 1801807191 && *((_WORD *)a1 + 2) == 31084;
  }
  if (v1 != 7)
  {
    if (v1 != 9) {
      return 0LL;
    }
LABEL_25:
    unint64_t v6 = bswap64(*a1);
    if (v6 == 0x517561727465726CLL)
    {
      int v7 = *((unsigned __int8 *)a1 + 8) - 121;
    }

    else if (v6 < 0x517561727465726CLL)
    {
      int v7 = -1;
    }

    else
    {
      int v7 = 1;
    }

    if (v7) {
      return 0LL;
    }
    else {
      return 3LL;
    }
  }

  BOOL v11 = *(_DWORD *)a1 == 1953394509 && *(_DWORD *)((char *)a1 + 3) == 2037147764;
  return (2 * v11);
}

void sub_10000DA20(uint64_t a1)
{
  int v1 = *(void **)(a1 + 40);
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v4 = v1[2];
  sub_100023834(*(void *)(*v1 + 48LL));
  sub_1000519BC(*(uint64_t **)(v3 + 160), v2, v4);
}

uint64_t (***sub_10000DA60(uint64_t a1))()
{
  int v1 = *(uint64_t **)(a1 + 40);
  uint64_t v2 = *v1;
  (*(void (**)(void))(**(void **)(*v1 + 48) + 56LL))(*(void *)(*v1 + 48));
  return sub_1000538FC(*(void *)(v2 + 160), *(_BYTE *)v1[1], *(void *)v1[2], v1[3]);
}

void sub_10000DAA4(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  *(void *)&__int128 v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v8 = v4;
  __int128 v9 = v4;
  __int128 v6 = v4;
  *(_OWORD *)__int128 __p = v4;
  *(_OWORD *)uint64_t v5 = v4;
  sub_100005064(v5, "<unknown>");
  DWORD2(v6) = 0;
  sub_100005064(__p, "");
  sub_10000BA40((uint64_t)&v8 + 8, 0LL, 0LL, 0, 1);
  DWORD2(v9) = 0;
  sub_10000A74C(v3, (uint64_t)v5);
  sub_1000041AC((uint64_t)&v8 + 8);
  sub_10000425C((uint64_t **)&v9, BYTE8(v8));
  if (SBYTE7(v8) < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE7(v6) < 0) {
    operator delete(v5[0]);
  }
  operator delete(v2);
  sub_100007004((uint64_t)(a1 + 1));
  operator delete(a1);
}

void sub_10000DBC4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, unsigned __int8 a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  operator delete(v23);
  sub_100007004((uint64_t)v22 + 8);
  operator delete(v22);
  _Unwind_Resume(a1);
}

BOOL sub_10000DC34(uint64_t a1)
{
  return *(_DWORD *)(**(void **)(a1 + 40) + 216LL) != 0;
}

uint64_t sub_10000DC4C(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16LL))();
  **(_BYTE **)(a1 + 32) = result;
  return result;
}

_BYTE *sub_10000DC80(_BYTE *result, unsigned int *a2)
{
  uint64_t v2 = result;
  switch(*result)
  {
    case 4:
      unsigned int v3 = result[8];
      break;
    case 5:
    case 6:
      unsigned int v3 = *((_DWORD *)result + 2);
      break;
    case 7:
      unsigned int v3 = *((double *)result + 1);
      break;
    default:
      exception = __cxa_allocate_exception(0x20uLL);
      uint64_t v5 = (char *)sub_10000528C(v2);
      sub_100005064(&v8, v5);
      __int128 v6 = std::string::insert(&v8, 0LL, "type must be number, but is ");
      __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      std::string::size_type cap = v6->__r_.__value_.__l.__cap_;
      __int128 v9 = v7;
      v6->__r_.__value_.__l.__size_ = 0LL;
      v6->__r_.__value_.__l.__cap_ = 0LL;
      v6->__r_.__value_.__r.__words[0] = 0LL;
      sub_100005128(302, (uint64_t)&v9, exception);
  }

  *a2 = v3;
  return result;
}

void sub_10000DD9C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }

  else if (!v22)
  {
    goto LABEL_8;
  }

  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t sub_10000DDFC(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0LL;
  *(_BYTE *)a1 = 3;
  *(void *)(a1 + 8) = sub_10000DE44(a2);
  sub_1000041AC(a1);
  sub_1000041AC(a1);
  return a1;
}

void *sub_10000DE44(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  sub_100005064(v2, a1);
  return v2;
}

void sub_10000DE78(_Unwind_Exception *a1)
{
}

void sub_10000DE8C(char *a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  __int128 v6 = operator new(0x58uLL);
  sub_10000DEF4(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  sub_10000CCC8((uint64_t)a3, v6 + 3, (uint64_t)(v6 + 3));
}

void sub_10000DEE0(_Unwind_Exception *a1)
{
}

void *sub_10000DEF4(void *a1, char *a2, uint64_t a3)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_100125740;
  char v5 = -86;
  sub_10000E014((int)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_10000DF74(_Unwind_Exception *a1)
{
}

void sub_10000DF88(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100125740;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10000DF98(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100125740;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_10000DFB8(uint64_t a1)
{
  char v1 = -86;
  sub_10000E1A8((uint64_t)&v1, a1 + 24);
}

void sub_10000E014(int a1, uint64_t a2, char *__s, uint64_t a4)
{
  if (v9 < 0) {
    operator delete(__p[0]);
  }
}

void sub_10000E0C0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10000E0F4(uint64_t a1, __int128 *a2, uint64_t a3, char a4, char a5)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0LL;
  uint64_t v9 = a1 + 16;
  if (*((char *)a2 + 23) < 0)
  {
    sub_10000B8BC((_BYTE *)v9, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v10 = *a2;
    *(void *)(v9 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v9 = v10;
  }

  *(_BYTE *)(a1 + 40) = *(_BYTE *)a3;
  *(void *)(a1 + 48) = *(void *)(a3 + 8);
  sub_1000041AC(a3);
  *(_BYTE *)a3 = 0;
  *(void *)(a3 + 8) = 0LL;
  sub_1000041AC(a1 + 40);
  *(_BYTE *)(a1 + 56) = a4;
  *(_BYTE *)(a1 + 57) = a5;
  return a1;
}

void sub_10000E190(_Unwind_Exception *exception_object)
{
  unsigned int v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10000E1A8(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(std::__shared_weak_count **)(a2 + 8);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
}

  ;
}

__n128 sub_10000E204@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, void *a3@<X8>)
{
  __int128 v6 = (char *)operator new(0x50uLL);
  *((void *)v6 + 1) = 0LL;
  *((void *)v6 + 2) = 0LL;
  *(void *)__int128 v6 = off_100125808;
  *((void *)v6 + 3) = off_1001257D0;
  *((_OWORD *)v6 + 2) = *(_OWORD *)a1;
  *((void *)v6 + 6) = *(void *)(a1 + 16);
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  __n128 result = *a2;
  *(__n128 *)(v6 + 56) = *a2;
  *((void *)v6 + 9) = a2[1].n128_u64[0];
  a2->n128_u64[1] = 0LL;
  a2[1].n128_u64[0] = 0LL;
  a2->n128_u64[0] = 0LL;
  *a3 = v6 + 24;
  a3[1] = v6;
  return result;
}

__n128 sub_10000E290(uint64_t a1, __int128 *a2, __n128 *a3)
{
  *(void *)a1 = off_1001257D0;
  __int128 v3 = *a2;
  *(void *)(a1 + 24) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 8) = v3;
  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *(void *)a2 = 0LL;
  __n128 result = *a3;
  *(void *)(a1 + 48) = a3[1].n128_u64[0];
  *(__n128 *)(a1 + 32) = result;
  a3->n128_u64[1] = 0LL;
  a3[1].n128_u64[0] = 0LL;
  a3->n128_u64[0] = 0LL;
  return result;
}

void sub_10000E2D0(uint64_t a1@<X0>, void *a2@<X8>)
{
  char v5 = 0LL;
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(void *__return_ptr, uint64_t, const char **))(*(void *)a1 + 16LL))(a2, a1, &v5);
  if (!*a2)
  {
    __int128 v4 = (os_log_s *)qword_100131780;
    if (os_log_type_enabled((os_log_t)qword_100131780, OS_LOG_TYPE_ERROR)) {
      sub_1000D6ED4(&v5, a1, v4);
    }
  }

void sub_10000E380(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)(a3 + 8) = 0xAAAAAAAAAAAAAAAALL;
  sub_10000BA40(a3, 0LL, 0LL, 0, 1);
  sub_10000B990((uint64_t)v45, a1 + 8);
  __int128 v6 = sub_100003F94((unsigned __int8 *)a3, "name");
  sub_1000041AC((uint64_t)v45);
  char v7 = *(_BYTE *)v6;
  *(_BYTE *)__int128 v6 = v45[0];
  v45[0] = v7;
  std::string v8 = (uint64_t *)v6[1];
  v6[1] = (uint64_t)v46;
  unsigned int v46 = v8;
  sub_1000041AC((uint64_t)v6);
  sub_1000041AC((uint64_t)v45);
  sub_10000425C(&v46, v45[0]);
  sub_10000B990((uint64_t)v43, a1 + 32);
  uint64_t v9 = sub_100003F94((unsigned __int8 *)a3, "path");
  sub_1000041AC((uint64_t)v43);
  char v10 = *(_BYTE *)v9;
  *(_BYTE *)uint64_t v9 = v43[0];
  v43[0] = v10;
  BOOL v11 = (uint64_t *)v9[1];
  v9[1] = (uint64_t)v44;
  unint64_t v44 = v11;
  sub_1000041AC((uint64_t)v9);
  sub_1000041AC((uint64_t)v43);
  sub_10000425C(&v44, v43[0]);
  unint64_t v41 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v42 = 0LL;
  unint64_t v40 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr, uint64_t, char **))(*(void *)a1 + 16LL))(&v40, a1, &v42);
  if (v40)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v40 + 16LL))(&v38);
    unsigned int v12 = sub_100003F94((unsigned __int8 *)a3, "header");
    sub_1000041AC((uint64_t)&v38);
    char v13 = *(_BYTE *)v12;
    *(_BYTE *)unsigned int v12 = v38;
    LOBYTE(v38) = v13;
    __int128 v14 = (uint64_t *)v12[1];
    v12[1] = (uint64_t)v39;
    unint64_t v39 = v14;
    sub_1000041AC((uint64_t)v12);
    sub_1000041AC((uint64_t)&v38);
    sub_10000425C(&v39, v38);
    uint64_t v15 = *(void *)(a2 + 24);
    if (!v15) {
      goto LABEL_8;
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t, unint64_t))(*(void *)v15 + 48LL))(&v36, v15, v40);
    int v16 = sub_100003F94((unsigned __int8 *)a3, "status");
    sub_1000041AC((uint64_t)&v36);
    char v17 = *(_BYTE *)v16;
    *(_BYTE *)int v16 = v36;
    LOBYTE(v36) = v17;
    int v18 = (uint64_t **)&v37;
    uint64_t v19 = v16[1];
    v16[1] = v37;
    uint64_t v37 = v19;
    sub_1000041AC((uint64_t)v16);
    sub_1000041AC((uint64_t)&v36);
    int v20 = v36;
  }

  else
  {
    v34[0] = 4;
    uint64_t v35 = 0LL;
    sub_1000041AC((uint64_t)v34);
    sub_1000041AC((uint64_t)v34);
    unsigned int v21 = sub_100003F94((unsigned __int8 *)a3, "usable");
    sub_1000041AC((uint64_t)v34);
    unsigned __int8 v22 = *(_BYTE *)v21;
    *(_BYTE *)unsigned int v21 = v34[0];
    v34[0] = v22;
    uint64_t v23 = (uint64_t *)v21[1];
    v21[1] = (uint64_t)v35;
    uint64_t v35 = v23;
    sub_1000041AC((uint64_t)v21);
    sub_1000041AC((uint64_t)v34);
    sub_10000425C(&v35, v34[0]);
    uint64_t v24 = v42;
    if (!v42) {
      uint64_t v24 = "unknown";
    }
    char v31 = v24;
    sub_10000E89C((uint64_t)v32, &v31);
    uint64_t v25 = sub_100003F94((unsigned __int8 *)a3, "loadError");
    sub_1000041AC((uint64_t)v32);
    char v26 = *(_BYTE *)v25;
    *(_BYTE *)uint64_t v25 = v32[0];
    v32[0] = v26;
    int v18 = (uint64_t **)&v33;
    uint64_t v27 = v25[1];
    v25[1] = v33;
    uint64_t v33 = v27;
    sub_1000041AC((uint64_t)v25);
    sub_1000041AC((uint64_t)v32);
    int v20 = v32[0];
  }

  sub_10000425C(v18, v20);
LABEL_8:
  int v28 = (std::__shared_weak_count *)v41;
  if (v41)
  {
    int v29 = (unint64_t *)(v41 + 8);
    do
      unint64_t v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }

void sub_10000E72C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

void sub_10000E738(uint64_t a1@<X0>, const char **a2@<X1>, void *a3@<X8>)
{
  unint64_t v8 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  sub_1000861E4((const char *)(a1 + 32), a2, &v8);
  if (v8)
  {
    unint64_t v4 = v9;
    *a3 = v8;
    a3[1] = v4;
  }

  else
  {
    *a3 = 0LL;
    a3[1] = 0LL;
    char v5 = (std::__shared_weak_count *)v9;
    if (v9)
    {
      __int128 v6 = (unint64_t *)(v9 + 8);
      do
        unint64_t v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }

void sub_10000E7EC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

void sub_10000E7FC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10000E810(a1);
  operator delete(v1);
}

uint64_t sub_10000E810(uint64_t a1)
{
  *(void *)a1 = off_1001257D0;
  return a1;
}

void sub_10000E85C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100125808;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10000E86C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100125808;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_10000E88C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_10000E89C(uint64_t a1, char **a2)
{
  *(void *)(a1 + 8) = 0LL;
  *(_BYTE *)a1 = 3;
  *(void *)(a1 + 8) = sub_10000E8E4(a2);
  sub_1000041AC(a1);
  sub_1000041AC(a1);
  return a1;
}

void *sub_10000E8E4(char **a1)
{
  uint64_t v2 = operator new(0x18uLL);
  sub_100005064(v2, *a1);
  return v2;
}

void sub_10000E918(_Unwind_Exception *a1)
{
}

void sub_10000E92C(uint64_t a1@<X8>)
{
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v2 = sub_100043A60();
  __darwin_time_t v3 = sub_100043AF8();
  sub_10000E9E0((uint64_t)__p, v2, v3, a1);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_10000E9BC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void sub_10000E9E0(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)(a4 + 8) = 0LL;
  *(_BYTE *)a4 = 0;
  sub_1000041AC(a4);
  sub_1000041AC(a4);
  sub_10000B990((uint64_t)v21, a1);
  unint64_t v8 = sub_100003F94((unsigned __int8 *)a4, "reason");
  sub_1000041AC((uint64_t)v21);
  char v9 = *(_BYTE *)v8;
  *(_BYTE *)unint64_t v8 = v21[0];
  v21[0] = v9;
  char v10 = (uint64_t *)v8[1];
  v8[1] = (uint64_t)v22;
  unsigned __int8 v22 = v10;
  sub_1000041AC((uint64_t)v8);
  sub_1000041AC((uint64_t)v21);
  sub_10000425C(&v22, v21[0]);
  if ((a2 & 0x8000000000000000LL) == 0)
  {
    v19[0] = 5;
    int v20 = sub_10000FD04((uint64_t *)(a2 / 0xE10));
    sub_1000041AC((uint64_t)v19);
    sub_1000041AC((uint64_t)v19);
    BOOL v11 = sub_100003F94((unsigned __int8 *)a4, "wallUptime");
    sub_1000041AC((uint64_t)v19);
    unsigned __int8 v12 = *(_BYTE *)v11;
    *(_BYTE *)BOOL v11 = v19[0];
    v19[0] = v12;
    char v13 = (uint64_t *)v11[1];
    v11[1] = (uint64_t)v20;
    int v20 = (void **)v13;
    sub_1000041AC((uint64_t)v11);
    sub_1000041AC((uint64_t)v19);
    sub_10000425C((uint64_t **)&v20, v19[0]);
  }

  if ((a3 & 0x8000000000000000LL) == 0)
  {
    v17[0] = 5;
    int v18 = sub_10000FD04((uint64_t *)(a3 / 0xE10));
    sub_1000041AC((uint64_t)v17);
    sub_1000041AC((uint64_t)v17);
    __int128 v14 = sub_100003F94((unsigned __int8 *)a4, "cpuUptime");
    sub_1000041AC((uint64_t)v17);
    unsigned __int8 v15 = *(_BYTE *)v14;
    *(_BYTE *)__int128 v14 = v17[0];
    v17[0] = v15;
    int v16 = (uint64_t *)v14[1];
    v14[1] = (uint64_t)v18;
    int v18 = (void **)v16;
    sub_1000041AC((uint64_t)v14);
    sub_1000041AC((uint64_t)v17);
    sub_10000425C((uint64_t **)&v18, v17[0]);
  }

void sub_10000EC14(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_10000EC58(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_10000ECEC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10000ED10(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)(a4 + 8) = 0LL;
  *(_BYTE *)a4 = 0;
  sub_1000041AC(a4);
  sub_1000041AC(a4);
  sub_10000B990((uint64_t)v21, a1);
  unint64_t v8 = sub_100003F94((unsigned __int8 *)a4, "currentOS");
  sub_1000041AC((uint64_t)v21);
  char v9 = *(_BYTE *)v8;
  *(_BYTE *)unint64_t v8 = v21[0];
  v21[0] = v9;
  char v10 = (uint64_t *)v8[1];
  v8[1] = (uint64_t)v22;
  unsigned __int8 v22 = v10;
  sub_1000041AC((uint64_t)v8);
  sub_1000041AC((uint64_t)v21);
  sub_10000425C(&v22, v21[0]);
  sub_10000B990((uint64_t)v19, a2);
  BOOL v11 = sub_100003F94((unsigned __int8 *)a4, "lastOS");
  sub_1000041AC((uint64_t)v19);
  char v12 = *(_BYTE *)v11;
  *(_BYTE *)BOOL v11 = v19[0];
  v19[0] = v12;
  char v13 = (uint64_t *)v11[1];
  v11[1] = (uint64_t)v20;
  int v20 = v13;
  sub_1000041AC((uint64_t)v11);
  sub_1000041AC((uint64_t)v19);
  sub_10000425C(&v20, v19[0]);
  v17[0] = 4;
  unint64_t v18 = a3;
  sub_1000041AC((uint64_t)v17);
  sub_1000041AC((uint64_t)v17);
  __int128 v14 = sub_100003F94((unsigned __int8 *)a4, "rolloverPerformed");
  sub_1000041AC((uint64_t)v17);
  unsigned __int8 v15 = *(_BYTE *)v14;
  *(_BYTE *)__int128 v14 = v17[0];
  v17[0] = v15;
  int v16 = (uint64_t *)v14[1];
  v14[1] = v18;
  unint64_t v18 = (unint64_t)v16;
  sub_1000041AC((uint64_t)v14);
  sub_1000041AC((uint64_t)v17);
  sub_10000425C((uint64_t **)&v18, v17[0]);
}

void sub_10000EEF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_10000EF2C(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)(a3 + 8) = 0LL;
  *(_BYTE *)a3 = 0;
  sub_1000041AC(a3);
  sub_1000041AC(a3);
  sub_10000B990((uint64_t)v17, a1);
  __int128 v6 = sub_100003F94((unsigned __int8 *)a3, "reason");
  sub_1000041AC((uint64_t)v17);
  char v7 = *(_BYTE *)v6;
  *(_BYTE *)__int128 v6 = v17[0];
  v17[0] = v7;
  unint64_t v8 = (uint64_t *)v6[1];
  v6[1] = (uint64_t)v18;
  unint64_t v18 = v8;
  sub_1000041AC((uint64_t)v6);
  sub_1000041AC((uint64_t)v17);
  sub_10000425C(&v18, v17[0]);
  unsigned __int8 v22 = "skipLogWriting";
  unint64_t v21 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v9 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v20[0] = v9;
  v20[1] = v9;
  sub_100008780((uint64_t)a2, &v22, (uint64_t)v20);
  v19[0] = a2;
  memset(&v19[1], 0, 24);
  v19[4] = (unsigned __int8 *)0x8000000000000000LL;
  sub_100008AC8(v19);
  if (sub_1000087E8((unsigned __int8 **)v20, v19))
  {
    char v10 = (_BYTE *)sub_10009AE9C();
    if (!v10) {
      return;
    }
  }

  else
  {
    char v10 = sub_100008924((unsigned __int8 **)v20);
  }

  if (*v10 == 4)
  {
    BOOL v11 = (uint64_t *)v10[8];
    v15[0] = 4;
    int v16 = v11;
    sub_1000041AC((uint64_t)v15);
    sub_1000041AC((uint64_t)v15);
    char v12 = sub_100003F94((unsigned __int8 *)a3, "skipLogWriting");
    sub_1000041AC((uint64_t)v15);
    unsigned __int8 v13 = *(_BYTE *)v12;
    *(_BYTE *)char v12 = v15[0];
    v15[0] = v13;
    __int128 v14 = (uint64_t *)v12[1];
    v12[1] = (uint64_t)v16;
    int v16 = v14;
    sub_1000041AC((uint64_t)v12);
    sub_1000041AC((uint64_t)v15);
    sub_10000425C(&v16, v15[0]);
  }

void sub_10000F108(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_10000F13C(int *a1@<X0>, uint64_t **a2@<X1>, uint64_t **a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)(a4 + 8) = 0LL;
  *(_BYTE *)a4 = 0;
  sub_1000041AC(a4);
  sub_1000041AC(a4);
  int v8 = *a1;
  int v9 = a1[1] + *a1;
  if (v9 >= 1)
  {
    v126[0] = 5;
    v127 = (uint64_t *)llround((double)(100 * v8 / v9));
    sub_1000041AC((uint64_t)v126);
    sub_1000041AC((uint64_t)v126);
    char v10 = sub_100003F94((unsigned __int8 *)a4, "cacheHitPercent");
    sub_1000041AC((uint64_t)v126);
    unsigned __int8 v11 = *(_BYTE *)v10;
    *(_BYTE *)char v10 = v126[0];
    v126[0] = v11;
    char v12 = (uint64_t *)v10[1];
    v10[1] = (uint64_t)v127;
    v127 = v12;
    sub_1000041AC((uint64_t)v10);
    sub_1000041AC((uint64_t)v126);
    sub_10000425C(&v127, v126[0]);
  }

  unsigned __int8 v13 = (uint64_t *)*((void *)a1 + 1);
  v124[0] = 6;
  v125 = v13;
  sub_1000041AC((uint64_t)v124);
  sub_1000041AC((uint64_t)v124);
  __int128 v14 = sub_100003F94((unsigned __int8 *)a4, "cacheSize");
  sub_1000041AC((uint64_t)v124);
  unsigned __int8 v15 = *(_BYTE *)v14;
  *(_BYTE *)__int128 v14 = v124[0];
  v124[0] = v15;
  int v16 = (uint64_t *)v14[1];
  v14[1] = (uint64_t)v125;
  v125 = v16;
  sub_1000041AC((uint64_t)v14);
  sub_1000041AC((uint64_t)v124);
  sub_10000425C(&v125, v124[0]);
  char v17 = (uint64_t *)*((void *)a1 + 2);
  v122[0] = 6;
  v123 = v17;
  sub_1000041AC((uint64_t)v122);
  sub_1000041AC((uint64_t)v122);
  unint64_t v18 = sub_100003F94((unsigned __int8 *)a4, "cacheCapacity");
  sub_1000041AC((uint64_t)v122);
  unsigned __int8 v19 = *(_BYTE *)v18;
  *(_BYTE *)unint64_t v18 = v122[0];
  v122[0] = v19;
  int v20 = (uint64_t *)v18[1];
  v18[1] = (uint64_t)v123;
  v123 = v20;
  sub_1000041AC((uint64_t)v18);
  sub_1000041AC((uint64_t)v122);
  sub_10000425C(&v123, v122[0]);
  unint64_t v21 = (uint64_t *)*((void *)a1 + 3);
  v120[0] = 6;
  v121 = v21;
  sub_1000041AC((uint64_t)v120);
  sub_1000041AC((uint64_t)v120);
  unsigned __int8 v22 = sub_100003F94((unsigned __int8 *)a4, "cacheEventsCount");
  sub_1000041AC((uint64_t)v120);
  unsigned __int8 v23 = *(_BYTE *)v22;
  *(_BYTE *)unsigned __int8 v22 = v120[0];
  v120[0] = v23;
  uint64_t v24 = (uint64_t *)v22[1];
  v22[1] = (uint64_t)v121;
  v121 = v24;
  sub_1000041AC((uint64_t)v22);
  sub_1000041AC((uint64_t)v120);
  sub_10000425C(&v121, v120[0]);
  uint64_t v25 = (uint64_t *)*((void *)a1 + 4);
  v118[0] = 6;
  v119 = v25;
  sub_1000041AC((uint64_t)v118);
  sub_1000041AC((uint64_t)v118);
  char v26 = sub_100003F94((unsigned __int8 *)a4, "cacheXformCount");
  sub_1000041AC((uint64_t)v118);
  unsigned __int8 v27 = *(_BYTE *)v26;
  *(_BYTE *)char v26 = v118[0];
  v118[0] = v27;
  int v28 = (uint64_t *)v26[1];
  v26[1] = (uint64_t)v119;
  v119 = v28;
  sub_1000041AC((uint64_t)v26);
  sub_1000041AC((uint64_t)v118);
  sub_10000425C(&v119, v118[0]);
  int v29 = (uint64_t *)*a1;
  v116[0] = 5;
  v117 = v29;
  sub_1000041AC((uint64_t)v116);
  sub_1000041AC((uint64_t)v116);
  unint64_t v30 = sub_100003F94((unsigned __int8 *)a4, "cacheHits");
  sub_1000041AC((uint64_t)v116);
  unsigned __int8 v31 = *(_BYTE *)v30;
  *(_BYTE *)unint64_t v30 = v116[0];
  v116[0] = v31;
  BOOL v32 = (uint64_t *)v30[1];
  v30[1] = (uint64_t)v117;
  v117 = v32;
  sub_1000041AC((uint64_t)v30);
  sub_1000041AC((uint64_t)v116);
  sub_10000425C(&v117, v116[0]);
  uint64_t v33 = (uint64_t *)a1[1];
  v114[0] = 5;
  v115 = v33;
  sub_1000041AC((uint64_t)v114);
  sub_1000041AC((uint64_t)v114);
  char v34 = sub_100003F94((unsigned __int8 *)a4, "cacheMisses");
  sub_1000041AC((uint64_t)v114);
  unsigned __int8 v35 = *(_BYTE *)v34;
  *(_BYTE *)char v34 = v114[0];
  v114[0] = v35;
  uint64_t v36 = (uint64_t *)v34[1];
  v34[1] = (uint64_t)v115;
  v115 = v36;
  sub_1000041AC((uint64_t)v34);
  sub_1000041AC((uint64_t)v114);
  sub_10000425C(&v115, v114[0]);
  uint64_t v37 = (uint64_t *)a1[10];
  v112[0] = 5;
  v113 = v37;
  sub_1000041AC((uint64_t)v112);
  sub_1000041AC((uint64_t)v112);
  uint64_t v38 = sub_100003F94((unsigned __int8 *)a4, "XformsInserted");
  sub_1000041AC((uint64_t)v112);
  unsigned __int8 v39 = *(_BYTE *)v38;
  *(_BYTE *)uint64_t v38 = v112[0];
  v112[0] = v39;
  unint64_t v40 = (uint64_t *)v38[1];
  v38[1] = (uint64_t)v113;
  v113 = v40;
  sub_1000041AC((uint64_t)v38);
  sub_1000041AC((uint64_t)v112);
  sub_10000425C(&v113, v112[0]);
  int64_t v41 = sub_1000A3844();
  v110[0] = 5;
  v111 = (uint64_t *)(int)v41;
  sub_1000041AC((uint64_t)v110);
  sub_1000041AC((uint64_t)v110);
  unint64_t v42 = sub_100003F94((unsigned __int8 *)a4, "physFootprint");
  sub_1000041AC((uint64_t)v110);
  unsigned __int8 v43 = *(_BYTE *)v42;
  *(_BYTE *)unint64_t v42 = v110[0];
  v110[0] = v43;
  unint64_t v44 = (uint64_t *)v42[1];
  v42[1] = (uint64_t)v111;
  v111 = v44;
  sub_1000041AC((uint64_t)v42);
  sub_1000041AC((uint64_t)v110);
  sub_10000425C(&v111, v110[0]);
  v108[0] = 5;
  uint64_t v109 = v41 >> 32;
  sub_1000041AC((uint64_t)v108);
  sub_1000041AC((uint64_t)v108);
  id v45 = sub_100003F94((unsigned __int8 *)a4, "physFootprintPeak");
  sub_1000041AC((uint64_t)v108);
  unsigned __int8 v46 = *(_BYTE *)v45;
  *(_BYTE *)id v45 = v108[0];
  v108[0] = v46;
  unint64_t v47 = (uint64_t *)v45[1];
  v45[1] = v109;
  uint64_t v109 = (uint64_t)v47;
  sub_1000041AC((uint64_t)v45);
  sub_1000041AC((uint64_t)v108);
  sub_10000425C((uint64_t **)&v109, v108[0]);
  time_t v48 = sub_10004398C();
  if (v48 != -1)
  {
    v106[0] = 5;
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v107 = std::chrono::system_clock::from_time_t(v48).__d_.__rep_ / 3600000000LL;
    sub_1000041AC((uint64_t)v106);
    sub_1000041AC((uint64_t)v106);
    v49 = sub_100003F94((unsigned __int8 *)a4, "procUptime");
    sub_1000041AC((uint64_t)v106);
    unsigned __int8 v50 = *(_BYTE *)v49;
    *(_BYTE *)v49 = v106[0];
    v106[0] = v50;
    uint64_t v51 = (uint64_t *)v49[1];
    v49[1] = v107;
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v107 = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)v51;
    sub_1000041AC((uint64_t)v49);
    sub_1000041AC((uint64_t)v106);
    sub_10000425C((uint64_t **)&v107, v106[0]);
  }

  __darwin_time_t v52 = sub_100043AF8();
  if (v52 != -1)
  {
    v104[0] = 5;
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v105 = std::chrono::system_clock::from_time_t(v52).__d_.__rep_ / 3600000000LL;
    sub_1000041AC((uint64_t)v104);
    sub_1000041AC((uint64_t)v104);
    unint64_t v53 = sub_100003F94((unsigned __int8 *)a4, "cpuUptime");
    sub_1000041AC((uint64_t)v104);
    unsigned __int8 v54 = *(_BYTE *)v53;
    *(_BYTE *)unint64_t v53 = v104[0];
    v104[0] = v54;
    unint64_t v55 = (uint64_t *)v53[1];
    v53[1] = v105;
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v105 = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)v55;
    sub_1000041AC((uint64_t)v53);
    sub_1000041AC((uint64_t)v104);
    sub_10000425C((uint64_t **)&v105, v104[0]);
  }

  uint64_t v56 = *a2;
  v102[0] = 6;
  v103 = v56;
  sub_1000041AC((uint64_t)v102);
  sub_1000041AC((uint64_t)v102);
  uint64_t v57 = sub_100003F94((unsigned __int8 *)a4, "configEstimatedBytesWritten");
  sub_1000041AC((uint64_t)v102);
  unsigned __int8 v58 = *(_BYTE *)v57;
  *(_BYTE *)uint64_t v57 = v102[0];
  v102[0] = v58;
  char v59 = (uint64_t *)v57[1];
  v57[1] = (uint64_t)v103;
  v103 = v59;
  sub_1000041AC((uint64_t)v57);
  sub_1000041AC((uint64_t)v102);
  sub_10000425C(&v103, v102[0]);
  v60 = a2[1];
  v100[0] = 6;
  v101 = v60;
  sub_1000041AC((uint64_t)v100);
  sub_1000041AC((uint64_t)v100);
  v61 = sub_100003F94((unsigned __int8 *)a4, "configEstimatedBytesRead");
  sub_1000041AC((uint64_t)v100);
  unsigned __int8 v62 = *(_BYTE *)v61;
  *(_BYTE *)v61 = v100[0];
  v100[0] = v62;
  __int128 v63 = (uint64_t *)v61[1];
  v61[1] = (uint64_t)v101;
  v101 = v63;
  sub_1000041AC((uint64_t)v61);
  sub_1000041AC((uint64_t)v100);
  sub_10000425C(&v101, v100[0]);
  uint64_t v64 = a2[2];
  v98[0] = 5;
  v99 = v64;
  sub_1000041AC((uint64_t)v98);
  sub_1000041AC((uint64_t)v98);
  v65 = sub_100003F94((unsigned __int8 *)a4, "configRowsWritten");
  sub_1000041AC((uint64_t)v98);
  unsigned __int8 v66 = *(_BYTE *)v65;
  *(_BYTE *)v65 = v98[0];
  v98[0] = v66;
  v67 = (uint64_t *)v65[1];
  v65[1] = (uint64_t)v99;
  v99 = v67;
  sub_1000041AC((uint64_t)v65);
  sub_1000041AC((uint64_t)v98);
  sub_10000425C(&v99, v98[0]);
  unint64_t v68 = a2[3];
  v96[0] = 5;
  v97 = v68;
  sub_1000041AC((uint64_t)v96);
  sub_1000041AC((uint64_t)v96);
  uint64_t v69 = sub_100003F94((unsigned __int8 *)a4, "configRowsRead");
  sub_1000041AC((uint64_t)v96);
  unsigned __int8 v70 = *(_BYTE *)v69;
  *(_BYTE *)uint64_t v69 = v96[0];
  v96[0] = v70;
  __int128 v71 = (uint64_t *)v69[1];
  v69[1] = (uint64_t)v97;
  v97 = v71;
  sub_1000041AC((uint64_t)v69);
  sub_1000041AC((uint64_t)v96);
  sub_10000425C(&v97, v96[0]);
  __int128 v72 = *a3;
  v94[0] = 6;
  v95 = v72;
  sub_1000041AC((uint64_t)v94);
  sub_1000041AC((uint64_t)v94);
  __int128 v73 = sub_100003F94((unsigned __int8 *)a4, "stateEstimatedBytesWritten");
  sub_1000041AC((uint64_t)v94);
  unsigned __int8 v74 = *(_BYTE *)v73;
  *(_BYTE *)__int128 v73 = v94[0];
  v94[0] = v74;
  v75 = (uint64_t *)v73[1];
  v73[1] = (uint64_t)v95;
  v95 = v75;
  sub_1000041AC((uint64_t)v73);
  sub_1000041AC((uint64_t)v94);
  sub_10000425C(&v95, v94[0]);
  v76 = a3[1];
  v92[0] = 6;
  v93 = v76;
  sub_1000041AC((uint64_t)v92);
  sub_1000041AC((uint64_t)v92);
  v77 = sub_100003F94((unsigned __int8 *)a4, "stateEstimatedBytesRead");
  sub_1000041AC((uint64_t)v92);
  unsigned __int8 v78 = *(_BYTE *)v77;
  *(_BYTE *)v77 = v92[0];
  v92[0] = v78;
  v79 = (uint64_t *)v77[1];
  v77[1] = (uint64_t)v93;
  v93 = v79;
  sub_1000041AC((uint64_t)v77);
  sub_1000041AC((uint64_t)v92);
  sub_10000425C(&v93, v92[0]);
  v80 = a3[2];
  v90[0] = 5;
  v91 = v80;
  sub_1000041AC((uint64_t)v90);
  sub_1000041AC((uint64_t)v90);
  v81 = sub_100003F94((unsigned __int8 *)a4, "stateRowsWritten");
  sub_1000041AC((uint64_t)v90);
  unsigned __int8 v82 = *(_BYTE *)v81;
  *(_BYTE *)v81 = v90[0];
  v90[0] = v82;
  v83 = (uint64_t *)v81[1];
  v81[1] = (uint64_t)v91;
  v91 = v83;
  sub_1000041AC((uint64_t)v81);
  sub_1000041AC((uint64_t)v90);
  sub_10000425C(&v91, v90[0]);
  v84 = a3[3];
  v88[0] = 5;
  v89 = v84;
  sub_1000041AC((uint64_t)v88);
  sub_1000041AC((uint64_t)v88);
  v85 = sub_100003F94((unsigned __int8 *)a4, "stateRowsRead");
  sub_1000041AC((uint64_t)v88);
  unsigned __int8 v86 = *(_BYTE *)v85;
  *(_BYTE *)v85 = v88[0];
  v88[0] = v86;
  v87 = (uint64_t *)v85[1];
  v85[1] = (uint64_t)v89;
  v89 = v87;
  sub_1000041AC((uint64_t)v85);
  sub_1000041AC((uint64_t)v88);
  sub_10000425C(&v89, v88[0]);
}

void sub_10000FBF4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t *a26)
{
}

void **sub_10000FD04(uint64_t *a1)
{
  uint64_t v9 = (uint64_t)a1;
  char v10 = &off_10012CFB8;
  int v15 = -1431655766;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  memset(v14, 0, sizeof(v14));
  LOBYTE(v8) = 5;
  sub_1000041AC((uint64_t)&v8);
  sub_1000041AC((uint64_t)&v8);
  *(void *)&__int128 v13 = sub_100004B7C((uint64_t *)&v12 + 1, (uint64_t)&v8);
  sub_1000041AC((uint64_t)&v8);
  sub_10000425C((uint64_t **)&v9, v8);
  LOBYTE(v8) = 5;
  uint64_t v9 = 2LL;
  sub_1000041AC((uint64_t)&v8);
  sub_1000041AC((uint64_t)&v8);
  uint64_t v1 = v13;
  if ((unint64_t)v13 >= *((void *)&v13 + 1))
  {
    uint64_t v2 = sub_100004B7C((uint64_t *)&v12 + 1, (uint64_t)&v8);
  }

  else
  {
    *(_BYTE *)__int128 v13 = (_BYTE)v8;
    *(void *)(v1 + 8) = v9;
    sub_1000041AC((uint64_t)&v8);
    LOBYTE(v8) = 0;
    uint64_t v9 = 0LL;
    sub_1000041AC(v1);
    uint64_t v2 = v1 + 16;
  }

  *(void *)&__int128 v13 = v2;
  sub_1000041AC((uint64_t)&v8);
  sub_10000425C((uint64_t **)&v9, v8);
  sub_1000B52D8((uint64_t)&v10, (uint64_t *)&v11);
  int v8 = (void **)0xAAAAAAAAAAAAAAAALL;
  sub_10000FF7C(*((unsigned __int8 **)&v12 + 1), (uint64_t *)&v8);
  __darwin_time_t v3 = v8;
  unint64_t v4 = *(std::__shared_weak_count **)&v14[16];
  if (*(void *)&v14[16])
  {
    char v5 = (unint64_t *)(*(void *)&v14[16] + 8LL);
    do
      unint64_t v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  int v8 = (void **)&v12 + 1;
  sub_100004D64(&v8);
  int v8 = (void **)&v11;
  sub_1000100E4(&v8);
  nullsub_4(&v10);
  return v3;
}

void sub_10000FED4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  __darwin_time_t v3 = va_arg(va1, uint64_t *);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v6 = va_arg(va2, void);
  sub_10000417C((uint64_t **)va);
  sub_10000FF04((void **)va2);
  nullsub_4((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void **sub_10000FF04(void **a1)
{
  __darwin_time_t v3 = a1 + 3;
  sub_100004D64(&v3);
  __darwin_time_t v3 = a1;
  sub_1000100E4(&v3);
  return a1;
}

unsigned __int8 *sub_10000FF7C(unsigned __int8 *result, uint64_t *a2)
{
  uint64_t v2 = (char *)result;
  int v3 = *result;
  if (v3 != 5)
  {
    if (v3 == 7)
    {
      uint64_t v4 = (uint64_t)*((double *)result + 1);
      goto LABEL_6;
    }

    if (v3 != 6)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      uint64_t v6 = (char *)sub_10000528C(v2);
      sub_100005064(&v9, v6);
      char v7 = std::string::insert(&v9, 0LL, "type must be number, but is ");
      __int128 v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      std::string::size_type cap = v7->__r_.__value_.__l.__cap_;
      __int128 v10 = v8;
      v7->__r_.__value_.__l.__size_ = 0LL;
      v7->__r_.__value_.__l.__cap_ = 0LL;
      v7->__r_.__value_.__r.__words[0] = 0LL;
      sub_100005128(302, (uint64_t)&v10, exception);
    }
  }

  uint64_t v4 = *((void *)result + 1);
LABEL_6:
  *a2 = v4;
  return result;
}

void sub_100010084( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }

  else if (!v22)
  {
    goto LABEL_8;
  }

  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_1000100E4(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_100007004(v4 - 16);
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void sub_100010158(void *a1@<X8>)
{
  uint64_t v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      unint64_t v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }

void *sub_1000101F8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  unint64_t v4 = operator new(0x120uLL);
  sub_100010248((uint64_t)v4, a1);
  return sub_100011E18(a2, v4);
}

uint64_t sub_100010248(uint64_t a1, void *a2)
{
  dispatch_queue_t v4 = dispatch_queue_create("analyticsd.CadenceManagerQueue", 0LL);
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(void *)(a1 + 136) = 0LL;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  uint64_t v5 = a2[1];
  *(void *)(a1 + 232) = *a2;
  *(void *)(a1 + 240) = v5;
  if (v5)
  {
    uint64_t v6 = (unint64_t *)(v5 + 8);
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }

  *(void *)(a1 + 248) = 0LL;
  *(void *)(a1 + 280) = 0LL;
  return a1;
}

unint64_t sub_1000102DC(uint64_t a1)
{
  uint64_t v6 = a1;
  id v2 = sub_10000B718((id *)(a1 + 16));
  int v3 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v2);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_1000120A8;
  v7[3] = &unk_1001258B8;
  void v7[4] = a1;
  void v7[5] = &v6;
  __int128 v8 = objc_retainBlock(v7);
  block[0] = _NSConcreteStackBlock;
  unint64_t v10 = 0xAAAAAAAAAAAAAAAALL;
  block[1] = 3221225472LL;
  block[2] = sub_1000121B0;
  block[3] = &unk_1001256F0;
  block[4] = &v10;
  block[5] = &v8;
  dispatch_sync(v3, block);
  unint64_t v4 = v10;

  return v4;
}

void sub_1000103DC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1000103E8(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = a1;
  int v3 = v20;
  sub_1000121E4((uint64_t)v20, a2);
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000CF18(&v17, (void *)a1);
  unint64_t v4 = operator new(0x28uLL);
  void *v4 = v19;
  sub_1000121E4((uint64_t)(v4 + 1), (uint64_t)v20);
  id v5 = sub_10000B718((id *)(a1 + 16));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  unint64_t v7 = v17;
  unint64_t v8 = v18;
  if (v18)
  {
    std::string v9 = (unint64_t *)(v18 + 8);
    do
      unint64_t v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }

  __int128 v11 = v6;
  __int128 v12 = operator new(0x18uLL);
  *__int128 v12 = v4;
  v12[1] = v7;
  v12[2] = v8;
  dispatch_async_f(v11, v12, (dispatch_function_t)sub_100012248);

  __int128 v13 = (std::__shared_weak_count *)v18;
  if (v18)
  {
    __int128 v14 = (unint64_t *)(v18 + 8);
    do
      unint64_t v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

  if (v21 == v20)
  {
    uint64_t v16 = 4LL;
  }

  else
  {
    if (!v21) {
      return;
    }
    uint64_t v16 = 5LL;
    int v3 = v21;
  }

  (*(void (**)(void *))(*v3 + 8 * v16))(v3);
}

void sub_100010550(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

void sub_100010568(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = a1;
  int v3 = v20;
  sub_1000125C8((uint64_t)v20, a2);
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000CF18(&v17, (void *)a1);
  unint64_t v4 = operator new(0x28uLL);
  void *v4 = v19;
  sub_1000125C8((uint64_t)(v4 + 1), (uint64_t)v20);
  id v5 = sub_10000B718((id *)(a1 + 16));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  unint64_t v7 = v17;
  unint64_t v8 = v18;
  if (v18)
  {
    std::string v9 = (unint64_t *)(v18 + 8);
    do
      unint64_t v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }

  __int128 v11 = v6;
  __int128 v12 = operator new(0x18uLL);
  *__int128 v12 = v4;
  v12[1] = v7;
  v12[2] = v8;
  dispatch_async_f(v11, v12, (dispatch_function_t)sub_10001262C);

  __int128 v13 = (std::__shared_weak_count *)v18;
  if (v18)
  {
    __int128 v14 = (unint64_t *)(v18 + 8);
    do
      unint64_t v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

  if (v21 == v20)
  {
    uint64_t v16 = 4LL;
  }

  else
  {
    if (!v21) {
      return;
    }
    uint64_t v16 = 5LL;
    int v3 = v21;
  }

  (*(void (**)(void *))(*v3 + 8 * v16))(v3);
}

void sub_1000106D0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

BOOL sub_1000106E8(uint64_t a1)
{
  uint64_t v6 = a1;
  id v2 = sub_10000B718((id *)(a1 + 16));
  int v3 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v2);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100012750;
  v7[3] = &unk_100125710;
  void v7[4] = a1;
  void v7[5] = &v6;
  unint64_t v8 = objc_retainBlock(v7);
  block[0] = _NSConcreteStackBlock;
  char v10 = -86;
  block[1] = 3221225472LL;
  block[2] = sub_100012760;
  block[3] = &unk_1001256F0;
  block[4] = &v10;
  block[5] = &v8;
  dispatch_sync(v3, block);
  BOOL v4 = v10 != 0;

  return v4;
}

void sub_1000107F0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000107FC(uint64_t a1)
{
  uint64_t v6 = a1;
  id v2 = sub_10000B718((id *)(a1 + 16));
  int v3 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v2);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100012794;
  v7[3] = &unk_1001258D8;
  void v7[4] = a1;
  void v7[5] = &v6;
  unint64_t v8 = objc_retainBlock(v7);
  block[0] = _NSConcreteStackBlock;
  uint64_t v10 = 0LL;
  block[1] = 3221225472LL;
  block[2] = sub_1000127A4;
  block[3] = &unk_1001256F0;
  block[4] = &v10;
  block[5] = &v8;
  dispatch_sync(v3, block);
  uint64_t v4 = v10;

  return v4;
}

void sub_1000108F8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100010904(uint64_t a1)
{
  uint64_t v6 = a1;
  id v2 = sub_10000B718((id *)(a1 + 16));
  int v3 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v2);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_1000127D8;
  v7[3] = &unk_1001258D8;
  void v7[4] = a1;
  void v7[5] = &v6;
  unint64_t v8 = objc_retainBlock(v7);
  block[0] = _NSConcreteStackBlock;
  uint64_t v10 = 0LL;
  block[1] = 3221225472LL;
  block[2] = sub_1000127A4;
  block[3] = &unk_1001256F0;
  block[4] = &v10;
  block[5] = &v8;
  dispatch_sync(v3, block);
  uint64_t v4 = v10;

  return v4;
}

void sub_100010A00(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

void sub_100010A0C(uint64_t a1)
{
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000CF18(&v14, (void *)a1);
  id v2 = operator new(8uLL);
  void *v2 = a1;
  id v3 = sub_10000B718((id *)(a1 + 16));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  unint64_t v5 = v14;
  unint64_t v6 = v15;
  if (v15)
  {
    unint64_t v7 = (unint64_t *)(v15 + 8);
    do
      unint64_t v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }

  std::string v9 = v4;
  uint64_t v10 = operator new(0x18uLL);
  *uint64_t v10 = v2;
  v10[1] = v5;
  v10[2] = v6;
  dispatch_async_f(v9, v10, (dispatch_function_t)sub_1000127E8);

  __int128 v11 = (std::__shared_weak_count *)v15;
  if (v15)
  {
    __int128 v12 = (unint64_t *)(v15 + 8);
    do
      unint64_t v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

void sub_100010B1C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

void sub_100010B34(uint64_t a1)
{
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000CF18(&v14, (void *)a1);
  id v2 = operator new(8uLL);
  void *v2 = a1;
  id v3 = sub_10000B718((id *)(a1 + 16));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  unint64_t v5 = v14;
  unint64_t v6 = v15;
  if (v15)
  {
    unint64_t v7 = (unint64_t *)(v15 + 8);
    do
      unint64_t v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }

  std::string v9 = v4;
  uint64_t v10 = operator new(0x18uLL);
  *uint64_t v10 = v2;
  v10[1] = v5;
  v10[2] = v6;
  dispatch_async_f(v9, v10, (dispatch_function_t)sub_1000128D8);

  __int128 v11 = (std::__shared_weak_count *)v15;
  if (v15)
  {
    __int128 v12 = (unint64_t *)(v15 + 8);
    do
      unint64_t v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

void sub_100010C44(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

void sub_100010C5C(uint64_t a1)
{
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000CF18(&v14, (void *)a1);
  id v2 = operator new(8uLL);
  void *v2 = a1;
  id v3 = sub_10000B718((id *)(a1 + 16));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  unint64_t v5 = v14;
  unint64_t v6 = v15;
  if (v15)
  {
    unint64_t v7 = (unint64_t *)(v15 + 8);
    do
      unint64_t v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }

  std::string v9 = v4;
  uint64_t v10 = operator new(0x18uLL);
  *uint64_t v10 = v2;
  v10[1] = v5;
  v10[2] = v6;
  dispatch_async_f(v9, v10, (dispatch_function_t)sub_100012A18);

  __int128 v11 = (std::__shared_weak_count *)v15;
  if (v15)
  {
    __int128 v12 = (unint64_t *)(v15 + 8);
    do
      unint64_t v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

void sub_100010D6C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

void sub_100010D84(uint64_t a1)
{
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000CF18(&v14, (void *)a1);
  id v2 = operator new(8uLL);
  void *v2 = a1;
  id v3 = sub_10000B718((id *)(a1 + 16));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  unint64_t v5 = v14;
  unint64_t v6 = v15;
  if (v15)
  {
    unint64_t v7 = (unint64_t *)(v15 + 8);
    do
      unint64_t v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }

  std::string v9 = v4;
  uint64_t v10 = operator new(0x18uLL);
  *uint64_t v10 = v2;
  v10[1] = v5;
  v10[2] = v6;
  dispatch_async_f(v9, v10, (dispatch_function_t)sub_100012CEC);

  __int128 v11 = (std::__shared_weak_count *)v15;
  if (v15)
  {
    __int128 v12 = (unint64_t *)(v15 + 8);
    do
      unint64_t v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

void sub_100010E94(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

void sub_100010EAC(uint64_t a1)
{
  uint64_t v4 = a1;
  id v2 = sub_10000B718((id *)(a1 + 16));
  id v3 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v2);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100012F84;
  block[3] = &unk_1001256F0;
  block[4] = a1;
  block[5] = &v4;
  dispatch_sync(v3, block);
}

void sub_100010F54(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

BOOL sub_100010F60(uint64_t a1)
{
  uint64_t v6 = a1;
  id v2 = sub_10000B718((id *)(a1 + 16));
  id v3 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v2);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100012FA0;
  v7[3] = &unk_100125710;
  void v7[4] = a1;
  void v7[5] = &v6;
  unint64_t v8 = objc_retainBlock(v7);
  block[0] = _NSConcreteStackBlock;
  char v10 = -86;
  block[1] = 3221225472LL;
  block[2] = sub_100012760;
  block[3] = &unk_1001256F0;
  block[4] = &v10;
  block[5] = &v8;
  dispatch_sync(v3, block);
  BOOL v4 = v10 != 0;

  return v4;
}

void sub_100011068(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_100011074(uint64_t a1)
{
  uint64_t v6 = a1;
  id v2 = sub_10000B718((id *)(a1 + 16));
  id v3 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v2);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100012FAC;
  v7[3] = &unk_100125710;
  void v7[4] = a1;
  void v7[5] = &v6;
  unint64_t v8 = objc_retainBlock(v7);
  block[0] = _NSConcreteStackBlock;
  char v10 = -86;
  block[1] = 3221225472LL;
  block[2] = sub_100012760;
  block[3] = &unk_1001256F0;
  block[4] = &v10;
  block[5] = &v8;
  dispatch_sync(v3, block);
  BOOL v4 = v10 != 0;

  return v4;
}

void sub_10001117C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_100011188(uint64_t a1)
{
  uint64_t v6 = a1;
  id v2 = sub_10000B718((id *)(a1 + 16));
  id v3 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v2);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100012FF0;
  v7[3] = &unk_100125710;
  void v7[4] = a1;
  void v7[5] = &v6;
  unint64_t v8 = objc_retainBlock(v7);
  block[0] = _NSConcreteStackBlock;
  char v10 = -86;
  block[1] = 3221225472LL;
  block[2] = sub_100012760;
  block[3] = &unk_1001256F0;
  block[4] = &v10;
  block[5] = &v8;
  dispatch_sync(v3, block);
  BOOL v4 = v10 != 0;

  return v4;
}

void sub_100011290(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

void sub_10001129C(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  v8[0] = a2;
  v8[1] = a1;
  id v5 = sub_10000B718((id *)(a1 + 16));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_10001303C;
  v9[3] = &unk_100125938;
  v9[4] = a1;
  v9[5] = v8;
  char v10 = objc_retainBlock(v9);
  unint64_t v7 = v6;
  *a3 = 0LL;
  a3[1] = 0LL;
  a3[2] = 0LL;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100013100;
  block[3] = &unk_1001256F0;
  block[4] = a3;
  block[5] = &v10;
  dispatch_sync(v7, block);
}

void sub_1000113A0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1000113AC(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v7 = a1;
  id v4 = sub_10000B718((id *)(a1 + 16));
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  void v8[2] = sub_10001318C;
  void v8[3] = &unk_100125938;
  v8[4] = a1;
  v8[5] = &v7;
  std::string v9 = objc_retainBlock(v8);
  uint64_t v6 = v5;
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100013100;
  block[3] = &unk_1001256F0;
  block[4] = a2;
  block[5] = &v9;
  dispatch_sync(v6, block);
}

void sub_1000114B0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1000114BC(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v7 = a1;
  id v4 = sub_10000B718((id *)(a1 + 16));
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  void v8[2] = sub_1000131BC;
  void v8[3] = &unk_100125938;
  v8[4] = a1;
  v8[5] = &v7;
  std::string v9 = objc_retainBlock(v8);
  uint64_t v6 = v5;
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100013100;
  block[3] = &unk_1001256F0;
  block[4] = a2;
  block[5] = &v9;
  dispatch_sync(v6, block);
}

void sub_1000115C0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1000115CC(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v7 = a1;
  id v4 = sub_10000B718((id *)(a1 + 16));
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  void v8[2] = sub_1000131EC;
  void v8[3] = &unk_100125938;
  v8[4] = a1;
  v8[5] = &v7;
  std::string v9 = objc_retainBlock(v8);
  uint64_t v6 = v5;
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100013100;
  block[3] = &unk_1001256F0;
  block[4] = a2;
  block[5] = &v9;
  dispatch_sync(v6, block);
}

void sub_1000116D0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

unint64_t sub_1000116DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10003E4A4();
  memset(&__str, 170, sizeof(__str));
  (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 232) + 40LL))(&__str);
  uint64_t v5 = *(unsigned __int8 *)(a2 + 31);
  if ((v5 & 0x80u) == 0LL) {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 31);
  }
  else {
    uint64_t v6 = *(void *)(a2 + 16);
  }
  std::string::size_type size = __str.__r_.__value_.__l.__size_;
  if ((__str.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = __str.__r_.__value_.__s.__size_;
  }
  if (v6 == size)
  {
    if ((__str.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_str = &__str;
    }
    else {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if ((v5 & 0x80) != 0)
    {
      LODWORD(v5) = memcmp(*(const void **)(a2 + 8), p_str, *(void *)(a2 + 16)) != 0;
    }

    else if (*(_BYTE *)(a2 + 31))
    {
      uint64_t v9 = v5 - 1;
      char v10 = (unsigned __int8 *)(a2 + 8);
      do
      {
        int v12 = *v10++;
        int v11 = v12;
        int v13 = p_str->__r_.__value_.__s.__data_[0];
        p_str = (std::string *)((char *)p_str + 1);
        BOOL v14 = v11 == v13;
        LODWORD(v5) = v11 != v13;
        BOOL v14 = !v14 || v9-- == 0;
      }

      while (!v14);
    }
  }

  else
  {
    LODWORD(v5) = 1;
  }

  if (!*(void *)(a2 + 192)) {
    LODWORD(v5) = 1;
  }
  if ((_DWORD)v5) {
    uint64_t v15 = v4;
  }
  else {
    uint64_t v15 = *(void *)(a2 + 192);
  }
  BOOL v16 = sub_100011968(a1, a2);
  BOOL v17 = v16;
  if (*(void *)(a2 + 200)) {
    BOOL v18 = 0;
  }
  else {
    BOOL v18 = v16;
  }
  if (v18) {
    *(void *)(a1 + 224) = 1LL;
  }
  *(void *)(a1 + 24) = (*(uint64_t (**)(void))(**(void **)(a1 + 232) + 32LL))(*(void *)(a1 + 232));
  std::string::operator=((std::string *)(a1 + 56), (const std::string *)(a2 + 8));
  std::string::operator=((std::string *)(a1 + 32), &__str);
  std::string::operator=((std::string *)(a1 + 104), (const std::string *)(a2 + 56));
  sub_1000434AC(&v25);
  uint64_t v19 = (void **)(a1 + 80);
  *(_OWORD *)uint64_t v19 = v25;
  *(void *)(a1 + 96) = v26;
  *(void *)(a1 + 128) = *(void *)(a2 + 104);
  *(void *)(a1 + 136) = (*(uint64_t (**)(void))(**(void **)(a1 + 232) + 48LL))(*(void *)(a1 + 232));
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 120);
  std::string::operator=((std::string *)(a1 + 152), (const std::string *)(a2 + 128));
  std::string::operator=((std::string *)(a1 + 176), (const std::string *)(a2 + 152));
  *(void *)(a1 + 200) = *(void *)(a2 + 176);
  if (*(void *)(a2 + 184)) {
    BOOL v20 = 1;
  }
  else {
    BOOL v20 = *(void *)a2 == 0LL;
  }
  if (v20) {
    uint64_t v21 = *(void *)(a2 + 184);
  }
  else {
    uint64_t v21 = v4 - v17;
  }
  *(void *)(a1 + 208) = v21;
  *(void *)(a1 + 216) = v15;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = *(void *)(a1 + 128);
  if (!rep) {
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
  }
  *(void *)(a1 + 248) = rep;
  uint64_t v23 = sub_100011A50(a1, (uint64_t *)a2);
  return v17 | (unint64_t)(v23 << 32);
}

void sub_100011938( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100011968(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 232) + 48LL))(*(void *)(a1 + 232));
  uint64_t v4 = *(void *)(a2 + 112);
  uint64_t v5 = (os_log_s *)qword_1001318E8;
  BOOL v6 = os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_DEFAULT);
  if (v4 == v3)
  {
    if (v6)
    {
      __int16 v10 = 0;
      uint64_t v7 = "[CadenceManager] ==== STARTUP ROLLOVER PERIOD: RESUME (same period) ====";
      unint64_t v8 = (uint8_t *)&v10;
      goto LABEL_6;
    }
  }

  else if (v6)
  {
    __int16 v11 = 0;
    uint64_t v7 = "[CadenceManager] ==== STARTUP ROLLOVER PERIOD: PAST DUE ====";
    unint64_t v8 = (uint8_t *)&v11;
LABEL_6:
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, v7, v8, 2u);
  }

  return v4 != v3;
}

uint64_t sub_100011A50(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (os_log_s *)qword_1001318E8;
  if (os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = (void *)(a1 + 32);
    int v22 = 136446210;
    uint64_t v23 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[CadenceManager] ==== OS BUILD: %{public}s ====",  (uint8_t *)&v22,  0xCu);
  }

  uint64_t v6 = *a2;
  if (*a2)
  {
    uint64_t v7 = (unsigned __int8 **)(a1 + 32);
    uint64_t v8 = *((unsigned __int8 *)a2 + 31);
    if ((v8 & 0x80u) == 0LL) {
      uint64_t v9 = *((unsigned __int8 *)a2 + 31);
    }
    else {
      uint64_t v9 = a2[2];
    }
    uint64_t v10 = *(unsigned __int8 *)(a1 + 55);
    int v11 = (char)v10;
    if ((v10 & 0x80u) != 0LL) {
      uint64_t v10 = *(void *)(a1 + 40);
    }
    if (v9 == v10)
    {
      if (v11 >= 0) {
        int v12 = (unsigned __int8 *)(a1 + 32);
      }
      else {
        int v12 = *v7;
      }
      if ((v8 & 0x80) == 0)
      {
        if (*((_BYTE *)a2 + 31))
        {
          int v13 = (unsigned __int8 *)(a2 + 1);
          while (*v13 == *v12)
          {
            ++v13;
            ++v12;
            if (!--v8) {
              goto LABEL_33;
            }
          }

          goto LABEL_24;
        }

LABEL_33:
        uint64_t v19 = *(void *)(a1 + 24);
        BOOL v20 = (os_log_s *)qword_1001318E8;
        BOOL v21 = os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_DEFAULT);
        if (v6 == v19)
        {
          if (v21)
          {
            LOWORD(v22) = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "[CadenceManager] ==== BOOT STATE: AFTER RESTART ====",  (uint8_t *)&v22,  2u);
          }

          return 3LL;
        }

        else if (v21)
        {
          LOWORD(v22) = 0;
          uint64_t v15 = 2LL;
          _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "[CadenceManager] ==== BOOT STATE: AFTER REBOOT ====",  (uint8_t *)&v22,  2u);
        }

        else
        {
          return 2LL;
        }

        return v15;
      }
    }

uint64_t sub_100011CEC(uint64_t a1)
{
  if (*(void *)(a1 + 224) != 1LL)
  {
    uint64_t v3 = *(void *)(a1 + 280);
    if (!v3) {
      sub_1000129CC();
    }
    (*(void (**)(void **__return_ptr))(*(void *)v3 + 48LL))(__p);
    uint64_t v4 = *(unsigned __int8 *)(a1 + 175);
    if ((v4 & 0x80u) == 0LL) {
      uint64_t v5 = (void *)*(unsigned __int8 *)(a1 + 175);
    }
    else {
      uint64_t v5 = *(void **)(a1 + 160);
    }
    unint64_t v6 = v17;
    int v7 = (char)v17;
    if ((v17 & 0x80u) != 0) {
      unint64_t v6 = (unint64_t)__p[1];
    }
    if (v5 == (void *)v6)
    {
      uint64_t v8 = (const void **)(a1 + 152);
      if ((v17 & 0x80u) == 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      if ((v4 & 0x80) != 0)
      {
        BOOL v1 = memcmp(*v8, v9, *(void *)(a1 + 160)) != 0;
      }

      else
      {
        if (!*(_BYTE *)(a1 + 175))
        {
          BOOL v1 = 0LL;
          goto LABEL_26;
        }

        uint64_t v10 = v4 - 1;
        do
        {
          int v12 = *(unsigned __int8 *)v8;
          uint64_t v8 = (const void **)((char *)v8 + 1);
          int v11 = v12;
          int v13 = *(unsigned __int8 *)v9;
          uint64_t v9 = (void **)((char *)v9 + 1);
          BOOL v1 = v11 != v13;
        }

        while (v11 == v13 && v10-- != 0);
      }

      if ((v7 & 0x80000000) == 0) {
        return v1;
      }
    }

    else
    {
      BOOL v1 = 1LL;
    }

LABEL_26:
    operator delete(__p[0]);
    return v1;
  }

  return 1LL;
}

            uint64_t v9 = v11 - 1;
            unint64_t v42 = v9;
            if (!v9) {
              goto LABEL_36;
            }
            continue;
          }

          break;
        }

        int v12 = sub_100019174(v6);
        *(_DWORD *)(a1 + 32) = v12;
        if (v12 != 13)
        {
          if (v12 != 11)
          {
            uint64_t v26 = *(void *)(a1 + 64);
            sub_10001ACAC(v6, &v40);
            *(_OWORD *)uint64_t v36 = *(_OWORD *)(a1 + 64);
            std::string::size_type cap = *(void *)(a1 + 80);
            sub_100005064(&v34, "object");
            sub_10001B04C(a1, 0xBu, (uint64_t)&v34, &__p);
            sub_10001AD8C(101, (uint64_t *)v36, (uint64_t)&__p, &v38);
            int v22 = sub_10001BE88((uint64_t)a2, v26, (uint64_t)&v40, (uint64_t)&v38);
            goto LABEL_42;
          }

          a2[2] -= 8LL;
          int v11 = v42;
          if (!v42)
          {
            __int128 v25 = 439;
LABEL_53:
            __assert_rtn("sax_parse_internal", "parser.hpp", v25, "not states.empty()");
          }

          goto LABEL_26;
        }

        int v13 = sub_100019174(v6);
        *(_DWORD *)(a1 + 32) = v13;
        if (v13 != 4)
        {
LABEL_51:
          unsigned __int8 v27 = *(void *)(a1 + 64);
          sub_10001ACAC(v6, &v40);
          *(_OWORD *)uint64_t v36 = *(_OWORD *)(a1 + 64);
          std::string::size_type cap = *(void *)(a1 + 80);
          sub_100005064(&v34, "object key");
          sub_10001B04C(a1, 4u, (uint64_t)&v34, &__p);
          sub_10001AD8C(101, (uint64_t *)v36, (uint64_t)&__p, &v38);
          int v22 = sub_10001BE88((uint64_t)a2, v27, (uint64_t)&v40, (uint64_t)&v38);
          goto LABEL_42;
        }

        BOOL v14 = *(uint64_t ***)(*(void *)(a2[2] - 8) + 8LL);
        v38.__vftable = v5;
        uint64_t v15 = sub_100019174(v6);
        *(_DWORD *)(a1 + 32) = v15;
        if (v15 == 12)
        {
LABEL_31:
          BOOL v16 = sub_100019174(v6);
          goto LABEL_32;
        }

            uint64_t v9 = v11 - 1;
            unint64_t v42 = v9;
            if (!v9) {
              goto LABEL_36;
            }
            continue;
          }

          break;
        }

        int v12 = sub_1000272AC(v6);
        *(_DWORD *)(a1 + 32) = v12;
        if (v12 != 13)
        {
          if (v12 != 11)
          {
            uint64_t v26 = *(void *)(a1 + 64);
            sub_100028810(v6, &v40);
            *(_OWORD *)uint64_t v36 = *(_OWORD *)(a1 + 64);
            std::string::size_type cap = *(void *)(a1 + 80);
            sub_100005064(&v34, "object");
            sub_1000288F0(a1, 0xBu, (uint64_t)&v34, &__p);
            sub_10001AD8C(101, (uint64_t *)v36, (uint64_t)&__p, &v38);
            int v22 = sub_10001BE88((uint64_t)a2, v26, (uint64_t)&v40, (uint64_t)&v38);
            goto LABEL_42;
          }

          a2[2] -= 8LL;
          int v11 = v42;
          if (!v42)
          {
            __int128 v25 = 439;
LABEL_53:
            __assert_rtn("sax_parse_internal", "parser.hpp", v25, "not states.empty()");
          }

          goto LABEL_26;
        }

        int v13 = sub_1000272AC(v6);
        *(_DWORD *)(a1 + 32) = v13;
        if (v13 != 4)
        {
LABEL_51:
          unsigned __int8 v27 = *(void *)(a1 + 64);
          sub_100028810(v6, &v40);
          *(_OWORD *)uint64_t v36 = *(_OWORD *)(a1 + 64);
          std::string::size_type cap = *(void *)(a1 + 80);
          sub_100005064(&v34, "object key");
          sub_1000288F0(a1, 4u, (uint64_t)&v34, &__p);
          sub_10001AD8C(101, (uint64_t *)v36, (uint64_t)&__p, &v38);
          int v22 = sub_10001BE88((uint64_t)a2, v27, (uint64_t)&v40, (uint64_t)&v38);
          goto LABEL_42;
        }

        BOOL v14 = *(uint64_t ***)(*(void *)(a2[2] - 8) + 8LL);
        v38.__vftable = v5;
        uint64_t v15 = sub_1000272AC(v6);
        *(_DWORD *)(a1 + 32) = v15;
        if (v15 == 12)
        {
LABEL_31:
          BOOL v16 = sub_1000272AC(v6);
          goto LABEL_32;
        }

    int v12 = 0LL;
    if (v9)
    {
LABEL_27:
      if (!v12)
      {
        int v13 = "parent config does not have a uuid?!";
        goto LABEL_45;
      }

      BOOL v14 = v9[23];
      if ((v14 & 0x80u) == 0LL) {
        uint64_t v15 = v9[23];
      }
      else {
        uint64_t v15 = *((void *)v9 + 1);
      }
      BOOL v16 = v12[23];
      unsigned __int8 v17 = (char)v16;
      if ((v16 & 0x80u) != 0LL) {
        BOOL v16 = *((void *)v12 + 1);
      }
      if (v15 == v16)
      {
        if (v17 >= 0) {
          BOOL v18 = v12;
        }
        else {
          BOOL v18 = *(unsigned __int8 **)v12;
        }
        if ((v14 & 0x80) == 0)
        {
          if (v9[23])
          {
            while (*v9 == *v18)
            {
              ++v9;
              ++v18;
              if (!--v14) {
                goto LABEL_58;
              }
            }

            goto LABEL_44;
          }

  uint64_t v37 = (void **)&v22;
  int v13 = *(dispatch_queue_s **)(a1 + 24);
  block = _NSConcreteStackBlock;
  unsigned __int8 v31 = 0x40000000LL;
  BOOL v32 = (char **)sub_10006C6F0;
  uint64_t v33 = (uint64_t)&unk_100129748;
  p_s = (char **)(a1 + 8);
  unsigned __int8 v35 = &v37;
  dispatch_sync(v13, &block);
  sub_10004C6D4(&v22, 0LL);
  std::mutex::unlock(&stru_1001311F8);
}

            uint64_t v9 = v11 - 1;
            unint64_t v42 = v9;
            if (!v9) {
              goto LABEL_36;
            }
            continue;
          }

          break;
        }

        int v12 = sub_1000877C8(v6);
        *(_DWORD *)(a1 + 32) = v12;
        if (v12 != 13)
        {
          if (v12 != 11)
          {
            uint64_t v26 = *(void *)(a1 + 72);
            sub_1000891B0(v6, &v40);
            *(_OWORD *)uint64_t v36 = *(_OWORD *)(a1 + 72);
            std::string::size_type cap = *(void *)(a1 + 88);
            sub_100005064(&v34, "object");
            sub_100089290(a1, 0xBu, (uint64_t)&v34, &__p);
            sub_10001AD8C(101, (uint64_t *)v36, (uint64_t)&__p, &v38);
            int v22 = sub_10001BE88((uint64_t)a2, v26, (uint64_t)&v40, (uint64_t)&v38);
            goto LABEL_42;
          }

          a2[2] -= 8LL;
          int v11 = v42;
          if (!v42)
          {
            __int128 v25 = 439;
LABEL_53:
            __assert_rtn("sax_parse_internal", "parser.hpp", v25, "not states.empty()");
          }

          goto LABEL_26;
        }

        int v13 = sub_1000877C8(v6);
        *(_DWORD *)(a1 + 32) = v13;
        if (v13 != 4)
        {
LABEL_51:
          unsigned __int8 v27 = *(void *)(a1 + 72);
          sub_1000891B0(v6, &v40);
          *(_OWORD *)uint64_t v36 = *(_OWORD *)(a1 + 72);
          std::string::size_type cap = *(void *)(a1 + 88);
          sub_100005064(&v34, "object key");
          sub_100089290(a1, 4u, (uint64_t)&v34, &__p);
          sub_10001AD8C(101, (uint64_t *)v36, (uint64_t)&__p, &v38);
          int v22 = sub_10001BE88((uint64_t)a2, v27, (uint64_t)&v40, (uint64_t)&v38);
          goto LABEL_42;
        }

        BOOL v14 = *(uint64_t ***)(*(void *)(a2[2] - 8) + 8LL);
        v38.__vftable = v5;
        uint64_t v15 = sub_1000877C8(v6);
        *(_DWORD *)(a1 + 32) = v15;
        if (v15 == 12)
        {
LABEL_31:
          BOOL v16 = sub_1000877C8(v6);
          goto LABEL_32;
        }

void *sub_100011E18(void *a1, void *a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  void *v4 = &off_100125868;
  v4[1] = 0LL;
  v4[2] = 0LL;
  v4[3] = a2;
  a1[1] = v4;
  sub_10000CCC8((uint64_t)a1, a2, (uint64_t)a2);
  return a1;
}

void sub_100011EA0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    sub_100011EE8((uint64_t)&a12, v12);
    __cxa_rethrow();
  }

  _Unwind_Resume(exception_object);
}

void sub_100011EE8(uint64_t a1, id *a2)
{
  id v3 = sub_10000B718(a2 + 2);
  uint64_t v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v3);
  dispatch_barrier_async_f(v4, a2, (dispatch_function_t)sub_100011FD4);
}

void sub_100011F34(std::__shared_weak_count *a1)
{
}

void sub_100011F48(uint64_t a1)
{
  BOOL v1 = *(id **)(a1 + 24);
  id v2 = sub_10000B718(v1 + 2);
  id v3 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v2);
  dispatch_barrier_async_f(v3, v1, (dispatch_function_t)sub_100011FD4);
}

uint64_t sub_100011F94(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

void sub_100011FD4(uint64_t a1)
{
  if (a1)
  {
    BOOL v1 = (void *)sub_100011FF0(a1);
    operator delete(v1);
  }

uint64_t sub_100011FF0(uint64_t a1)
{
  id v2 = (void *)(a1 + 256);
  id v3 = *(void **)(a1 + 280);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    id v3 = v2;
  }

  else
  {
    if (!v3) {
      goto LABEL_6;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  sub_100007004(a1 + 232);
  return sub_100009958(a1);
}

unint64_t sub_1000120A8(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 40);
  (*(void (**)(void **__return_ptr))(**(void **)(v1 + 232) + 16LL))(v4);
  unint64_t v2 = sub_1000116DC(v1, (uint64_t)v4);
  if (v15 < 0) {
    operator delete(__p);
  }
  if (v13 < 0) {
    operator delete(v12);
  }
  if (v11 < 0) {
    operator delete(v10);
  }
  if (v9 < 0) {
    operator delete(v8);
  }
  if (v7 < 0) {
    operator delete(v6);
  }
  if (v5 < 0) {
    operator delete(v4[1]);
  }
  return v2;
}

void sub_100012184( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, void *__p, uint64_t a30, int a31, __int16 a32, char a33, char a34)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  sub_1000D6F7C((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_1000121B0(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16LL))();
  **(void **)(a1 + 32) = result;
  return result;
}

uint64_t sub_1000121E4(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 24) = v4;
  }

  else
  {
    id v3 = (void *)(a1 + 24);
  }

  *id v3 = 0LL;
  return a1;
}

void sub_100012248(void **a1)
{
  unint64_t v2 = *a1;
  sub_10001234C((void *)(*v2 + 256LL), (uint64_t)(v2 + 1));
  sub_1000122E8(&v2);
  sub_100007004((uint64_t)(a1 + 1));
  operator delete(a1);
}

void sub_1000122C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void **sub_1000122E8(void **a1)
{
  unint64_t v2 = *a1;
  *a1 = 0LL;
  if (v2)
  {
    id v3 = (void *)v2[4];
    if (v3 == v2 + 1)
    {
      uint64_t v4 = 4LL;
      id v3 = v2 + 1;
    }

    else
    {
      if (!v3)
      {
LABEL_7:
        operator delete(v2);
        return a1;
      }

      uint64_t v4 = 5LL;
    }

    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_7;
  }

  return a1;
}

void *sub_10001234C(void *a1, uint64_t a2)
{
  id v3 = v7;
  if (v7 == v6)
  {
    uint64_t v4 = 4LL;
    id v3 = v6;
    goto LABEL_5;
  }

  if (v7)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

uint64_t sub_1000123E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24LL))(*(void *)(a2 + 24), a1);
    }

    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16LL))(v3);
    }
  }

  else
  {
    *(void *)(a1 + 24) = 0LL;
  }

  return a1;
}

void *sub_100012448(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    char v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        memset(v6, 170, sizeof(v6));
        (*(void (**)(void *, void *))(*result + 24LL))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = 0LL;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24LL))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
        a2[3] = 0LL;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24LL))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32LL))(v6);
      }

      else
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = a2[3];
      }

      a2[3] = a2;
    }

    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24LL))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }

    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }

  return result;
}

void sub_1000125BC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

uint64_t sub_1000125C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 24) = v4;
  }

  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }

  *uint64_t v3 = 0LL;
  return a1;
}

void sub_10001262C(void **a1)
{
  char v5 = *a1;
  uint64_t v2 = *(void *)(*v5 + 232LL);
  sub_1000123E4((uint64_t)v6, (uint64_t)(v5 + 1));
  (*(void (**)(uint64_t, _BYTE *))(*(void *)v2 + 56LL))(v2, v6);
  uint64_t v3 = v7;
  if (v7 == v6)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v6;
    goto LABEL_5;
  }

  if (v7)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  sub_1000122E8(&v5);
  sub_100007004((uint64_t)(a1 + 1));
  operator delete(a1);
}

void sub_1000126F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  BOOL v16 = a13;
  if (a13 == v14)
  {
    uint64_t v17 = 4LL;
    BOOL v16 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v17 = 5LL;
  }

  (*(void (**)(void))(*(void *)v16 + 8 * v17))();
LABEL_6:
  sub_1000122E8(&a9);
  sub_100007004((uint64_t)v13 + 8);
  operator delete(v13);
  _Unwind_Resume(a1);
}

uint64_t sub_100012750(uint64_t a1)
{
  return *(unsigned __int8 *)(**(void **)(a1 + 40) + 144LL);
}

uint64_t sub_100012760(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16LL))();
  **(_BYTE **)(a1 + 32) = result;
  return result;
}

uint64_t sub_100012794(uint64_t a1)
{
  return *(void *)(**(void **)(a1 + 40) + 136LL);
}

uint64_t sub_1000127A4(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16LL))();
  **(void **)(a1 + 32) = result;
  return result;
}

uint64_t sub_1000127D8(uint64_t a1)
{
  return *(void *)(**(void **)(a1 + 40) + 248LL);
}

void sub_1000127E8(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  int v4 = *(unsigned __int8 *)(v3 + 144);
  *(_BYTE *)(v3 + 144) = 1;
  char v5 = (os_log_s *)qword_1001318E8;
  if (os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_INFO))
  {
    unint64_t v6 = "true";
    if (!v4) {
      unint64_t v6 = "false";
    }
    int v7 = 136446210;
    uint64_t v8 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "[CadenceManager] Partial data flag enabled {prior: %{public}s}",  (uint8_t *)&v7,  0xCu);
  }

  operator delete(v2);
  sub_100007004((uint64_t)(a1 + 1));
  operator delete(a1);
}

void sub_1000128D8(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  if (sub_100011CEC(v3))
  {
    int v4 = (os_log_s *)qword_1001318E8;
    if (os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)char v5 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[CadenceManager] Resetting partial data flag",  v5,  2u);
    }

    *(_BYTE *)(v3 + 144) = 0;
  }

  operator delete(v2);
  sub_100007004((uint64_t)(a1 + 1));
  operator delete(a1);
}

void sub_1000129A8(_Unwind_Exception *a1)
{
}

void sub_1000129CC()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = &off_100125920;
}

void sub_100012A04(std::exception *a1)
{
}

void sub_100012A18(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  memset(&__str, 170, sizeof(__str));
  uint64_t v4 = *(void *)(v3 + 280);
  if (!v4) {
    sub_1000129CC();
  }
  (*(void (**)(std::string *__return_ptr))(*(void *)v4 + 48LL))(&__str);
  char v5 = (const void **)(v3 + 152);
  char v6 = *(_BYTE *)(v3 + 175);
  if (v6 >= 0) {
    uint64_t v7 = *(unsigned __int8 *)(v3 + 175);
  }
  else {
    uint64_t v7 = *(void *)(v3 + 160);
  }
  std::string::size_type size = __str.__r_.__value_.__s.__size_;
  int v9 = (char)__str.__r_.__value_.__s.__size_;
  if ((__str.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  if (v7 != size)
  {
LABEL_19:
    char v13 = (os_log_s *)qword_1001318E8;
    if (os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_INFO))
    {
      if (v6 < 0) {
        BOOL v14 = *v5;
      }
      else {
        BOOL v14 = (const void *)(v3 + 152);
      }
      goto LABEL_28;
    }

    goto LABEL_31;
  }

  if ((__str.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_str = &__str;
  }
  else {
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  if ((*(_BYTE *)(v3 + 175) & 0x80) == 0)
  {
    if (*(_BYTE *)(v3 + 175))
    {
      char v11 = (unsigned __int8 *)(v3 + 152);
      uint64_t v12 = *(unsigned __int8 *)(v3 + 175);
      while (*v11 == p_str->__r_.__value_.__s.__data_[0])
      {
        ++v11;
        p_str = (std::string *)((char *)p_str + 1);
        if (!--v12)
        {
          char v13 = (os_log_s *)qword_1001318E8;
          if (os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_INFO)) {
            goto LABEL_26;
          }
          goto LABEL_32;
        }
      }

      goto LABEL_19;
    }

    char v13 = (os_log_s *)qword_1001318E8;
    if (!os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_INFO)) {
      goto LABEL_32;
    }
LABEL_26:
    BOOL v14 = (const void *)(v3 + 152);
    goto LABEL_36;
  }

  BOOL v14 = *v5;
  int v15 = memcmp(*v5, p_str, *(void *)(v3 + 160));
  char v13 = (os_log_s *)qword_1001318E8;
  BOOL v16 = os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_INFO);
  if (v15)
  {
    if (v16)
    {
LABEL_28:
      uint64_t v17 = (std::string *)__str.__r_.__value_.__r.__words[0];
      if (v9 >= 0) {
        uint64_t v17 = &__str;
      }
      *(_DWORD *)buf = 136380931;
      BOOL v20 = v14;
      __int16 v21 = 2081;
      int v22 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "[CadenceManager] Daily key changed. Rotating day boundary key: {prior: %{private}s, new: %{private}s}",  buf,  0x16u);
    }

LABEL_31:
    std::string::operator=((std::string *)(v3 + 152), &__str);
    goto LABEL_32;
  }

  if (v16)
  {
LABEL_36:
    *(_DWORD *)buf = 136380675;
    BOOL v20 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "[CadenceManager] NO day boundary change. Keeping cached day boundary key: %{private}s",  buf,  0xCu);
  }

LABEL_32:
LABEL_34:
  *(void *)(v3 + 224) = 2LL;
  operator delete(v2);
  sub_100007004((uint64_t)(a1 + 1));
  operator delete(a1);
}

  BOOL v18 = a2[4];
  if (v18 >= a2[5])
  {
    uint64_t v19 = sub_100004B7C(a2 + 3, (uint64_t)&v25);
  }

  else
  {
    *(_BYTE *)BOOL v18 = v25;
    *(void *)(v18 + sub_100007004((uint64_t)v1 + 8) = v26;
    sub_1000041AC((uint64_t)&v25);
    LOBYTE(v25) = 0;
    uint64_t v26 = 0LL;
    sub_1000041AC(v18);
    uint64_t v19 = v18 + 16;
  }

  a2[4] = v19;
  sub_1000041AC((uint64_t)&v25);
  sub_10000425C(&v26, v25);
  sub_1000041AC((uint64_t)&v27);
  sub_10000425C(&v28, v27);
}

void sub_100012CB0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete(v16);
  sub_100007004((uint64_t)v15 + 8);
  operator delete(v15);
  _Unwind_Resume(a1);
}

void sub_100012CEC(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  v4.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v5 = (*(uint64_t (**)(void))(**(void **)(v3 + 232) + 48LL))(*(void *)(v3 + 232));
  char v6 = (os_log_s *)(id)qword_1001318E8;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    char v13 = v2;
    sub_10003DB6C(*(void *)(v3 + 128), (uint64_t)"%Y-%m-%dT%TZ", &v17);
    if ((v17.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v7 = &v17;
    }
    else {
      uint64_t v7 = (std::stringbuf::string_type *)v17.__r_.__value_.__r.__words[0];
    }
    sub_10003DB6C(v4.__d_.__rep_, (uint64_t)"%Y-%m-%dT%TZ", &v16);
    if ((v16.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v8 = &v16;
    }
    else {
      uint64_t v8 = (std::stringbuf::string_type *)v16.__r_.__value_.__r.__words[0];
    }
    sub_10003DB6C(*(void *)(v3 + 136), (uint64_t)"%Y-%m-%dT%TZ", &v15);
    int size = (char)v15.__r_.__value_.__s.__size_;
    std::string::size_type v10 = v15.__r_.__value_.__r.__words[0];
    sub_10003DB6C(v5, (uint64_t)"%Y-%m-%dT%TZ", &__p);
    char v11 = &v15;
    if (size < 0) {
      char v11 = (std::stringbuf::string_type *)v10;
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 136446978;
    uint64_t v19 = v7;
    __int16 v20 = 2082;
    __int16 v21 = v8;
    __int16 v22 = 2082;
    uint64_t v23 = v11;
    __int16 v24 = 2082;
    __int128 v25 = p_p;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "[CadenceManager] Rollover deadlines changed. lastRollover: {prior: %{public}s, new: %{public}s}. nextDeadline: {pr ior: %{public}s, new: %{public}s}.",  buf,  0x2Au);
    uint64_t v2 = v13;
  }

  *(std::chrono::system_clock::time_point *)(v3 + 12sub_100007004((uint64_t)v1 + 8) = v4;
  *(void *)(v3 + 136) = v5;
  *(std::chrono::system_clock::time_point *)(v3 + 24sub_100007004((uint64_t)v1 + 8) = v4;
  operator delete(v2);
  sub_100007004((uint64_t)(a1 + 1));
  operator delete(a1);
}

void sub_100012F00( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25, void *a26, uint64_t a27, int a28, __int16 a29, char a30, char a31)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a31 < 0) {
    operator delete(a26);
  }

  operator delete(a10);
  sub_100007004((uint64_t)v31 + 8);
  operator delete(v31);
  _Unwind_Resume(a1);
}

uint64_t sub_100012F84(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(**(void **)(a1 + 40) + 232LL) + 24LL))( *(void *)(**(void **)(a1 + 40) + 232LL),  **(void **)(a1 + 40) + 24LL);
}

uint64_t sub_100012FA0(uint64_t a1)
{
  return sub_100011CEC(**(void **)(a1 + 40));
}

BOOL sub_100012FAC(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 40);
  return *(void *)(v1 + 224) == 1LL || sub_10003E4A4() == *(void *)(v1 + 208);
}

BOOL sub_100012FF0(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 40);
  if (*(void *)(v1 + 224) == 1LL) {
    return 1LL;
  }
  uint64_t v3 = sub_10003E4A4() - *(void *)(v1 + 200);
  if (v3 < 0) {
    uint64_t v3 = -v3;
  }
  return (unint64_t)v3 < 0x5B;
}

std::string *sub_10001303C@<X0>(std::string *result@<X0>, std::string *a2@<X8>)
{
  std::string::size_type cap = (uint64_t **)result[1].__r_.__value_.__l.__cap_;
  std::chrono::system_clock::time_point v4 = cap[1];
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  a2->__r_.__value_.__r.__words[0] = 0LL;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v5 = *cap;
  int v6 = *((char *)v5 + 23);
  if (v6 < 0)
  {
    if (v5[1] != 5) {
      return result;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v5 = (uint64_t *)*v5;
  }

  else if (v6 != 5)
  {
    return result;
  }

  if (*(_DWORD *)v5 == 1818845508 && *((_BYTE *)v5 + 4) == 121)
  {
    char v11 = (const std::string *)(v4 + 19);
    return std::string::operator=(a2, v11);
  }

  int v8 = *(_DWORD *)v5;
  int v9 = *((unsigned __int8 *)v5 + 4);
  if (v8 == 1631858745 && v9 == 121)
  {
    char v11 = (const std::string *)(v4 + 22);
    return std::string::operator=(a2, v11);
  }

  return result;
}

void sub_1000130E4(_Unwind_Exception *exception_object)
{
}

__n128 sub_100013100(uint64_t a1)
{
  (*(void (**)(__n128 *__return_ptr))(**(void **)(a1 + 40) + 16LL))(&v4);
  uint64_t v2 = *(void *)(a1 + 32);
  __n128 result = v4;
  *(void *)(v2 + 16) = v5;
  *(__n128 *)uint64_t v2 = result;
  return result;
}

void **sub_10001318C@<X0>(void **result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *result[5];
  __int128 v3 = *(_OWORD *)(v2 + 32);
  *(void *)(a2 + 16) = *(void *)(v2 + 48);
  *(_OWORD *)a2 = v3;
  return result;
}

void **sub_1000131BC@<X0>(void **result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *result[5];
  __int128 v3 = *(_OWORD *)(v2 + 56);
  *(void *)(a2 + 16) = *(void *)(v2 + 72);
  *(_OWORD *)a2 = v3;
  return result;
}

void **sub_1000131EC@<X0>(void **result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *result[5];
  __int128 v3 = *(_OWORD *)(v2 + 104);
  *(void *)(a2 + 16) = *(void *)(v2 + 120);
  *(_OWORD *)a2 = v3;
  return result;
}

uint64_t *sub_100013220@<X0>(__int128 *a1@<X0>, uint64_t *a2@<X8>)
{
  __n128 v4 = operator new(0x38uLL);
  __int128 v9 = *a1;
  *(void *)a1 = 0LL;
  *((void *)a1 + 1) = 0LL;
  sub_100013318((uint64_t)v4, (uint64_t)&v9);
  uint64_t v5 = (std::__shared_weak_count *)*((void *)&v9 + 1);
  if (*((void *)&v9 + 1))
  {
    int v6 = (unint64_t *)(*((void *)&v9 + 1) + 8LL);
    do
      unint64_t v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  return sub_100015A34(a2, (uint64_t)v4);
}

void sub_1000132E0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1000045D0(exception_object);
}

uint64_t sub_100013318(uint64_t a1, uint64_t a2)
{
  dispatch_queue_attr_t v4 = dispatch_queue_attr_make_with_qos_class(0LL, QOS_CLASS_UTILITY, 0);
  uint64_t v5 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v4);
  dispatch_queue_t v6 = dispatch_queue_create("analyticsd.MotionStateResolverQueue.myQueue", v5);
  *(void *)(a1 + sub_100007004((uint64_t)v1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = v6;

  *(void *)a1 = off_100125968;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)a2;
  *(void *)a2 = 0LL;
  *(void *)(a2 + sub_100007004((uint64_t)v1 + 8) = 0LL;
  unint64_t v7 = operator new(0x48uLL);
  int v8 = (id **)(a1 + 48);
  v7[8] = 0LL;
  *((_OWORD *)v7 + 2) = 0u;
  *((_OWORD *)v7 + 3) = 0u;
  *(_OWORD *)unint64_t v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  void v7[4] = v7 + 5;
  *(void *)(a1 + 4sub_100007004((uint64_t)v1 + 8) = v7;
  if (objc_opt_class(&OBJC_CLASS___CMMotionActivityManager)
    && +[CMMotionActivityManager isActivityAvailable](&OBJC_CLASS___CMMotionActivityManager, "isActivityAvailable"))
  {
    dispatch_queue_attr_t v9 = dispatch_queue_attr_make_with_qos_class(0LL, QOS_CLASS_DEFAULT, 0);
    std::string::size_type v10 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v9);
    dispatch_queue_t v11 = dispatch_queue_create("analyticsd.MotionStateResolver.CoreMotion.CallbackQueue", v10);
    id v12 = **v8;
    **int v8 = v11;

    char v13 = objc_opt_new(&OBJC_CLASS___CMMotionActivityManager);
    id v14 = (*v8)[2];
    (*v8)[2] = v13;

    id v15 = (*v8)[3];
    (*v8)[3] = 0LL;

    *((_BYTE *)*v8 + 56) = 0;
    std::stringbuf::string_type v16 = objc_opt_new(&OBJC_CLASS___NSOperationQueue);
    id v17 = (*v8)[1];
    (*v8)[1] = v16;

    [(*v8)[1] setName:@"MotionActivityResolverQueue"];
    [(*v8)[1] setMaxConcurrentOperationCount:1];
    id v18 = sub_10000B718(*v8);
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
    [(*v8)[1] setUnderlyingQueue:v19];

    __int16 v20 = *v8;
    unsigned __int8 v47 = 1;
    __int16 v21 = (std::__shared_weak_count *)operator new(0x30uLL);
    v21->__shared_owners_ = 0LL;
    v21->__shared_weak_owners_ = 0LL;
    v21->__vftable = (std::__shared_weak_count_vtbl *)off_100125AC0;
    v21[1].__shared_owners_ = 0LL;
    v21[1].__shared_weak_owners_ = 0LL;
    v21[1].__vftable = 0LL;
    *(void *)buf = v21 + 1;
    v49 = v21;
    sub_10001380C((uint64_t *)v20 + 4, &v47, (uint64_t)buf);
    __int16 v22 = v49;
    if (v49)
    {
      p_shared_owners = (unint64_t *)&v49->__shared_owners_;
      do
        unint64_t v24 = __ldaxr(p_shared_owners);
      while (__stlxr(v24 - 1, p_shared_owners));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }

    __int128 v25 = *v8;
    unsigned __int8 v47 = 2;
    uint64_t v26 = (std::__shared_weak_count *)operator new(0x30uLL);
    v26->__shared_owners_ = 0LL;
    v26->__shared_weak_owners_ = 0LL;
    v26->__vftable = (std::__shared_weak_count_vtbl *)off_100125AC0;
    v26[1].__shared_owners_ = 0LL;
    v26[1].__shared_weak_owners_ = 0LL;
    v26[1].__vftable = 0LL;
    *(void *)buf = v26 + 1;
    v49 = v26;
    sub_10001380C((uint64_t *)v25 + 4, &v47, (uint64_t)buf);
    unsigned __int8 v27 = v49;
    if (v49)
    {
      int v28 = (unint64_t *)&v49->__shared_owners_;
      do
        unint64_t v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }

    unint64_t v30 = *v8;
    unsigned __int8 v47 = 3;
    unsigned __int8 v31 = (std::__shared_weak_count *)operator new(0x30uLL);
    v31->__shared_owners_ = 0LL;
    v31->__shared_weak_owners_ = 0LL;
    v31->__vftable = (std::__shared_weak_count_vtbl *)off_100125AC0;
    v31[1].__shared_owners_ = 0LL;
    v31[1].__shared_weak_owners_ = 0LL;
    v31[1].__vftable = 0LL;
    *(void *)buf = v31 + 1;
    v49 = v31;
    sub_10001380C((uint64_t *)v30 + 4, &v47, (uint64_t)buf);
    BOOL v32 = v49;
    if (v49)
    {
      uint64_t v33 = (unint64_t *)&v49->__shared_owners_;
      do
        unint64_t v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }

    unsigned __int8 v35 = *v8;
    unsigned __int8 v47 = 4;
    uint64_t v36 = (std::__shared_weak_count *)operator new(0x30uLL);
    v36->__shared_owners_ = 0LL;
    v36->__shared_weak_owners_ = 0LL;
    v36->__vftable = (std::__shared_weak_count_vtbl *)off_100125AC0;
    v36[1].__shared_owners_ = 0LL;
    v36[1].__shared_weak_owners_ = 0LL;
    v36[1].__vftable = 0LL;
    *(void *)buf = v36 + 1;
    v49 = v36;
    sub_10001380C((uint64_t *)v35 + 4, &v47, (uint64_t)buf);
    uint64_t v37 = v49;
    if (v49)
    {
      uint64_t v38 = (unint64_t *)&v49->__shared_owners_;
      do
        unint64_t v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }

    unint64_t v40 = *v8;
    unsigned __int8 v47 = 5;
    int64_t v41 = (std::__shared_weak_count *)operator new(0x30uLL);
    v41->__shared_owners_ = 0LL;
    v41->__shared_weak_owners_ = 0LL;
    v41->__vftable = (std::__shared_weak_count_vtbl *)off_100125AC0;
    v41[1].__shared_owners_ = 0LL;
    v41[1].__shared_weak_owners_ = 0LL;
    v41[1].__vftable = 0LL;
    *(void *)buf = v41 + 1;
    v49 = v41;
    sub_10001380C((uint64_t *)v40 + 4, &v47, (uint64_t)buf);
    unint64_t v42 = v49;
    if (v49)
    {
      unsigned __int8 v43 = (unint64_t *)&v49->__shared_owners_;
      do
        unint64_t v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
  }

  else
  {
    id v45 = (os_log_s *)qword_100131948;
    if (os_log_type_enabled((os_log_t)qword_100131948, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_INFO,  "[MotionStateResolver] WARNING: Failed to get any CoreMotion classes",  buf,  2u);
    }
  }

  return a1;
}

void sub_100013794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v7 = *v5;
  uint64_t *v5 = 0LL;
  if (v7) {
    sub_100015C0C((uint64_t)v5, v7);
  }
  sub_100007004(v4);
  sub_100009958(v3);
  _Unwind_Resume(a1);
}

uint64_t *sub_10001380C(uint64_t *result, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = result;
  dispatch_queue_t v6 = (uint64_t **)(result + 1);
  uint64_t v5 = result[1];
  unsigned int v7 = *a2;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        int v8 = (void *)v5;
        unsigned int v9 = *(unsigned __int8 *)(v5 + 32);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        dispatch_queue_t v6 = (uint64_t **)v8;
        if (!*v8) {
          goto LABEL_9;
        }
      }

      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        dispatch_queue_t v6 = (uint64_t **)(v8 + 1);
        goto LABEL_9;
      }
    }
  }

  else
  {
    int v8 = result + 1;
LABEL_9:
    std::string::size_type v10 = (char *)operator new(0x38uLL);
    v10[32] = v7;
    *(_OWORD *)(v10 + 40) = *(_OWORD *)a3;
    *(void *)a3 = 0LL;
    *(void *)(a3 + sub_100007004((uint64_t)v1 + 8) = 0LL;
    *(void *)std::string::size_type v10 = 0LL;
    *((void *)v10 + 1) = 0LL;
    *((void *)v10 + 2) = v8;
    *dispatch_queue_t v6 = (uint64_t *)v10;
    uint64_t v11 = *(void *)*v4;
    if (v11)
    {
      uint64_t *v4 = v11;
      id v12 = *v6;
    }

    else
    {
      id v12 = (uint64_t *)v10;
    }

    __n128 result = sub_10000558C((uint64_t *)v4[1], v12);
    ++v4[2];
  }

  return result;
}

void *sub_1000138DC(void *a1)
{
  *a1 = off_100125968;
  uint64_t v3 = a1 + 6;
  uint64_t v2 = a1[6];
  uint64_t v4 = *(void **)(v2 + 16);
  if (v4)
  {
    [v4 stopActivityUpdates];
    uint64_t v2 = *v3;
    *uint64_t v3 = 0LL;
    if (!v2) {
      goto LABEL_6;
    }
  }

  else
  {
    *uint64_t v3 = 0LL;
  }

  sub_100015C0C((uint64_t)v3, v2);
LABEL_6:
  sub_100007004((uint64_t)(a1 + 4));
  sub_100009958((uint64_t)(a1 + 1));
  return a1;
}

void sub_100013950(void *a1)
{
  uint64_t v1 = sub_1000138DC(a1);
  operator delete(v1);
}

void sub_100013964(char **a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  uint64_t v2 = (char *)operator new(0x60uLL);
  *a1 = v2;
  a1[1] = v2;
  a1[2] = v2 + 96;
  uint64_t v3 = 0LL;
  a1[1] = sub_100015CE0((uint64_t)(a1 + 2), &v4, &v8, v2);
  do
  {
    if (SHIBYTE(v7[v3 + 2]) < 0) {
      operator delete((void *)v7[v3]);
    }
    v3 -= 3LL;
  }

  while (v3 != -12);
}

void sub_100013A7C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  *(void *)(v12 + sub_100007004((uint64_t)v1 + 8) = v13;
  sub_100015E44(&a10);
  uint64_t v15 = 0LL;
  while (1)
  {
    if (*(&a12 + v15 + 95) < 0) {
      operator delete(*(void **)(&a12 + v15 + 72));
    }
    v15 -= 24LL;
    if (v15 == -96) {
      _Unwind_Resume(a1);
    }
  }

void sub_100013AF4(uint64_t a1)
{
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000CF18(&v14, (void *)(a1 + 8));
  uint64_t v2 = operator new(8uLL);
  void *v2 = a1;
  id v3 = sub_10000B718((id *)(a1 + 24));
  __int128 v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  unint64_t v5 = v14;
  unint64_t v6 = v15;
  if (v15)
  {
    unsigned int v7 = (unint64_t *)(v15 + 8);
    do
      unint64_t v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }

  unsigned int v9 = v4;
  std::string::size_type v10 = operator new(0x18uLL);
  *std::string::size_type v10 = v2;
  v10[1] = v5;
  v10[2] = v6;
  dispatch_async_f(v9, v10, (dispatch_function_t)sub_100015ED0);

  uint64_t v11 = (std::__shared_weak_count *)v15;
  if (v15)
  {
    uint64_t v12 = (unint64_t *)(v15 + 8);
    do
      unint64_t v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

void sub_100013C04(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

void sub_100013C1C(void *a1)
{
  uint64_t v2 = (os_log_s *)qword_100131948;
  if (os_log_type_enabled((os_log_t)qword_100131948, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "[MotionStateResolver] Initializing CoreMotion activity",  buf,  2u);
  }

  uint64_t v3 = a1[6];
  if (!*(void *)(v3 + 16))
  {
    id v17 = (os_log_s *)qword_100131948;
    if (!os_log_type_enabled((os_log_t)qword_100131948, OS_LOG_TYPE_INFO)) {
      return;
    }
    *(_WORD *)buf = 0;
    id v18 = "[MotionStateResolver] WARNING: CoreMotionActivityManager instance not found.";
LABEL_27:
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, v18, buf, 2u);
    return;
  }

  if (!*(void *)(v3 + 8))
  {
    id v17 = (os_log_s *)qword_100131948;
    if (!os_log_type_enabled((os_log_t)qword_100131948, OS_LOG_TYPE_INFO)) {
      return;
    }
    *(_WORD *)buf = 0;
    id v18 = "[MotionStateResolver] WARNING: Operation queue instance not found.";
    goto LABEL_27;
  }

  uint64_t v4 = a1[4];
  sub_100005064(buf, "motionState");
  v23[0] = 0;
  unint64_t v24 = 0LL;
  sub_1000041AC((uint64_t)v23);
  sub_1000041AC((uint64_t)v23);
  sub_10000E89C((uint64_t)v21, &off_100125988);
  (*(void (**)(uint64_t, uint8_t *, _BYTE *, _BYTE *, uint64_t, void))(*(void *)v4 + 24LL))( v4,  buf,  v23,  v21,  -1LL,  0LL);
  sub_1000041AC((uint64_t)v21);
  sub_10000425C(&v22, v21[0]);
  sub_1000041AC((uint64_t)v23);
  sub_10000425C(&v24, v23[0]);
  if (v27 < 0) {
    operator delete(*(void **)buf);
  }
  unint64_t v5 = (os_log_s *)qword_100131948;
  if (os_log_type_enabled((os_log_t)qword_100131948, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "[MotionStateResolver] Starting updates for motion activity",  buf,  2u);
  }

  sub_10000CF18(buf, a1 + 1);
  unsigned int v7 = *(void **)buf;
  unint64_t v6 = v26;
  if (v26)
  {
    p_shared_weak_owners = (unint64_t *)&v26->__shared_weak_owners_;
    do
      unint64_t v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      unint64_t v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

  uint64_t v12 = a1[6];
  uint64_t v14 = *(void *)(v12 + 8);
  unint64_t v13 = *(void **)(v12 + 16);
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3321888768LL;
  v19[2] = sub_100013F4C;
  v19[3] = &unk_100125990;
  v19[4] = a1;
  v19[5] = v7;
  __int16 v20 = v6;
  if (v6)
  {
    unint64_t v15 = (unint64_t *)&v6->__shared_weak_owners_;
    do
      unint64_t v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }

  [v13 startActivityUpdatesToQueue:v14 withHandler:v19];
  if (v20) {
    std::__shared_weak_count::__release_weak(v20);
  }
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_100013EF0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, char a17, uint64_t a18, char a19)
{
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  if (v19) {
    std::__shared_weak_count::__release_weak(v19);
  }
  _Unwind_Resume(exception_object);
}

void sub_100013F4C(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v5 = a1[4];
    unint64_t v6 = std::__shared_weak_count::lock(v4);
    if (v6)
    {
      unsigned int v7 = v6;
      uint64_t v8 = a1[5];
      if (v8)
      {
        unint64_t v9 = (id *)(v8 + 24);
        id v10 = v3;
        id v11 = sub_10000B718(v9);
        uint64_t v12 = (dispatch_queue_s *)(id)objc_claimAutoreleasedReturnValue(v11);
        unint64_t v13 = operator new(0x10uLL);
        void *v13 = v5;
        v13[1] = v10;
        unint64_t v16 = 0LL;
        dispatch_async_f(v12, v13, (dispatch_function_t)sub_100015F80);
        sub_100015F44(&v16);
      }

      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        unint64_t v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_10001405C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100014070(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 4sub_100007004((uint64_t)v1 + 8) = v2;
  if (v2)
  {
    id v3 = (unint64_t *)(v2 + 16);
    do
      unint64_t v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }

  return result;
}

void sub_100014094(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_1000140A4(uint64_t a1)
{
  uint64_t v17 = a1;
  uint64_t v2 = *(void *)(a1 + 48);
  id v3 = (id *)(a1 + 24);
  id v4 = sub_10000B718((id *)(a1 + 24));
  uint64_t v5 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v4);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472LL;
  handler[2] = sub_100014280;
  handler[3] = &unk_1001259C0;
  handler[4] = a1;
  notify_register_dispatch("com.apple.backboardd.rawOrientation", (int *)(v2 + 60), v5, handler);

  sub_10001428C(&v17, *(_DWORD *)(*(void *)(a1 + 48) + 60LL));
  uint64_t v15 = a1;
  uint64_t v6 = *(void *)(a1 + 48);
  id v7 = sub_10000B718(v3);
  uint64_t v8 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v7);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_100014490;
  v14[3] = &unk_1001259C0;
  v14[4] = a1;
  notify_register_dispatch("com.apple.backboardd.orientation", (int *)(v6 + 64), v8, v14);

  sub_10001449C(&v15, *(_DWORD *)(*(void *)(a1 + 48) + 64LL));
  uint64_t v13 = a1;
  uint64_t v9 = *(void *)(a1 + 48);
  id v10 = sub_10000B718(v3);
  id v11 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v10);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_1000146A0;
  v12[3] = &unk_1001259C0;
  v12[4] = a1;
  notify_register_dispatch("com.apple.backboardd.orientationlock", (int *)(v9 + 68), v11, v12);

  sub_1000146AC(&v13, *(_DWORD *)(*(void *)(a1 + 48) + 68LL), 1LL);
}

void sub_100014250(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100014280(uint64_t a1, int a2)
{
}

void sub_10001428C(uint64_t *a1, int token)
{
  uint64_t v3 = *a1;
  uint64_t state64 = 0LL;
  if (notify_get_state(token, &state64))
  {
    if (os_log_type_enabled((os_log_t)qword_100131948, OS_LOG_TYPE_ERROR)) {
      sub_1000D705C();
    }
  }

  else
  {
    notify_get_state(token, &state64);
    memset(&v11, 170, sizeof(v11));
    sub_100015800(state64, &v11);
    uint64_t v4 = *(void *)(v3 + 32);
    sub_100005064(__p, "rawDeviceOrientation");
    v7[0] = 0;
    uint64_t v8 = 0LL;
    sub_1000041AC((uint64_t)v7);
    sub_1000041AC((uint64_t)v7);
    sub_10000B990((uint64_t)v5, (uint64_t)&v11);
    (*(void (**)(uint64_t, void **, _BYTE *, _BYTE *, uint64_t, void))(*(void *)v4 + 24LL))( v4,  __p,  v7,  v5,  -1LL,  0LL);
    sub_1000041AC((uint64_t)v5);
    sub_10000425C(&v6, v5[0]);
    sub_1000041AC((uint64_t)v7);
    sub_10000425C(&v8, v7[0]);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (os_log_type_enabled((os_log_t)qword_100131948, OS_LOG_TYPE_DEBUG)) {
      sub_1000D6FE8();
    }
  }

void sub_10001443C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20, int a21, __int16 a22, char a23, char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(a1);
}

void sub_100014490(uint64_t a1, int a2)
{
}

void sub_10001449C(uint64_t *a1, int token)
{
  uint64_t v3 = *a1;
  uint64_t state64 = 0LL;
  if (notify_get_state(token, &state64))
  {
    if (os_log_type_enabled((os_log_t)qword_100131948, OS_LOG_TYPE_ERROR)) {
      sub_1000D7140();
    }
  }

  else
  {
    notify_get_state(token, &state64);
    memset(&v11, 170, sizeof(v11));
    sub_100015800(state64, &v11);
    uint64_t v4 = *(void *)(v3 + 32);
    sub_100005064(__p, "deviceOrientation");
    v7[0] = 0;
    uint64_t v8 = 0LL;
    sub_1000041AC((uint64_t)v7);
    sub_1000041AC((uint64_t)v7);
    sub_10000B990((uint64_t)v5, (uint64_t)&v11);
    (*(void (**)(uint64_t, void **, _BYTE *, _BYTE *, uint64_t, void))(*(void *)v4 + 24LL))( v4,  __p,  v7,  v5,  -1LL,  0LL);
    sub_1000041AC((uint64_t)v5);
    sub_10000425C(&v6, v5[0]);
    sub_1000041AC((uint64_t)v7);
    sub_10000425C(&v8, v7[0]);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (os_log_type_enabled((os_log_t)qword_100131948, OS_LOG_TYPE_DEBUG)) {
      sub_1000D70CC();
    }
  }

void sub_10001464C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20, int a21, __int16 a22, char a23, char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(a1);
}

void sub_1000146A0(uint64_t a1, int a2)
{
}

void sub_1000146AC(uint64_t *a1, int token, uint64_t a3)
{
  uint64_t v5 = *a1;
  uint64_t state64 = 0LL;
  if (notify_get_state(token, &state64))
  {
    if (os_log_type_enabled((os_log_t)qword_100131948, OS_LOG_TYPE_ERROR)) {
      sub_1000D7250();
    }
  }

  else
  {
    notify_get_state(token, &state64);
    uint64_t v6 = state64;
    BOOL v7 = state64 == 1;
    uint64_t v8 = *(void *)(v5 + 32);
    sub_100005064(__p, "deviceOrientationLock");
    v12[0] = 0;
    uint64_t v13 = 0LL;
    sub_1000041AC((uint64_t)v12);
    sub_1000041AC((uint64_t)v12);
    v10[0] = 4;
    std::string v11 = (uint64_t *)v7;
    sub_1000041AC((uint64_t)v10);
    sub_1000041AC((uint64_t)v10);
    (*(void (**)(uint64_t, void **, _BYTE *, unsigned __int8 *, uint64_t, uint64_t))(*(void *)v8 + 24LL))( v8,  __p,  v12,  v10,  -1LL,  1LL);
    sub_1000041AC((uint64_t)v10);
    sub_10000425C(&v11, v10[0]);
    sub_1000041AC((uint64_t)v12);
    sub_10000425C(&v13, v12[0]);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v9 = (os_log_s *)qword_100131948;
    if (os_log_type_enabled((os_log_t)qword_100131948, OS_LOG_TYPE_DEBUG)) {
      sub_1000D71B0(v6 == 1, a3, v9);
    }
  }

void sub_100014860( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t *a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100014894(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(*(void *)(a1 + 48) + 56LL);
  if ((v1 - 2) >= 4)
  {
    if (v1 == 1)
    {
      sub_100014A5C(a1);
    }

    else if (!*(_BYTE *)(*(void *)(a1 + 48) + 56LL))
    {
      sub_1000148C4(a1);
    }
  }

  else
  {
    sub_100014CBC(a1);
  }

void sub_1000148C4(uint64_t a1)
{
  if (([*(id *)(*(void *)(a1 + 48) + 24) unknown] & 1) == 0)
  {
    else {
      int v2 = sub_1000150F8(a1);
    }
    uint64_t v3 = (os_log_s *)(id)qword_100131948;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      sub_10001518C(*(unsigned __int8 *)(*(void *)(a1 + 48) + 56LL), &v9);
      int size = (char)v9.__r_.__value_.__s.__size_;
      std::string::size_type v5 = v9.__r_.__value_.__r.__words[0];
      sub_10001518C(v2, &__p);
      uint64_t v6 = &v9;
      if (size < 0) {
        uint64_t v6 = (std::string *)v5;
      }
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 136315394;
      std::string v11 = v6;
      __int16 v12 = 2080;
      uint64_t v13 = p_p;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "[MotionStateResolver] state is updated from %s to %s",  buf,  0x16u);
    }

    *(_BYTE *)(*(void *)(a1 + 48) + 56LL) = v2;
  }

void sub_100014A2C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_100014A5C(uint64_t a1)
{
  if ((sub_100015074(a1) & 1) == 0 && sub_100015208(a1))
  {
    unsigned int v2 = sub_1000150F8(a1);
    if ((uint64_t)[*(id *)(*(void *)(a1 + 48) + 24) confidence] <= 1)
    {
      if ((v2 & 6) == 4) {
        float v4 = 60.0;
      }
      else {
        float v4 = 30.0;
      }
      if ((uint64_t)[*(id *)(*(void *)(a1 + 48) + 24) confidence] < 1)
      {
      }

      else
      {
        sub_100015294(a1, v2, v4);
      }
    }

    else
    {
      uint64_t v3 = (os_log_s *)(id)qword_100131948;
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      {
        sub_10001518C(*(unsigned __int8 *)(*(void *)(a1 + 48) + 56LL), &v10);
        int size = (char)v10.__r_.__value_.__s.__size_;
        std::string::size_type v6 = v10.__r_.__value_.__r.__words[0];
        sub_10001518C(v2, &__p);
        BOOL v7 = &v10;
        if (size < 0) {
          BOOL v7 = (std::string *)v6;
        }
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)buf = 136315394;
        __int16 v12 = v7;
        __int16 v13 = 2080;
        uint64_t v14 = p_p;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "[MotionStateResolver] ConfidenceHigh, state is updated from %s to %s",  buf,  0x16u);
      }

      *(_BYTE *)(*(void *)(a1 + 48) + 56LL) = v2;
    }
  }

void sub_100014C8C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_100014CBC(uint64_t a1)
{
  if (sub_100015074(a1))
  {
    if ((uint64_t)[*(id *)(*(void *)(a1 + 48) + 24) confidence] <= 1)
    {
      if ((uint64_t)[*(id *)(*(void *)(a1 + 48) + 24) confidence] < 1)
      {
      }

      else
      {
        sub_100015294(a1, 1u, 30.0);
      }
    }

    else
    {
      unsigned int v2 = (os_log_s *)(id)qword_100131948;
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
      {
        sub_10001518C(*(unsigned __int8 *)(*(void *)(a1 + 48) + 56LL), &v14);
        int size = (char)v14.__r_.__value_.__s.__size_;
        std::string::size_type v6 = v14.__r_.__value_.__r.__words[0];
        sub_10001518C(1, &__p);
        BOOL v7 = &v14;
        if (size < 0) {
          BOOL v7 = (std::string *)v6;
        }
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)buf = 136315394;
        unint64_t v16 = v7;
        __int16 v17 = 2080;
        id v18 = p_p;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "[MotionStateResolver] ConfidenceHigh, state is updated from %s to %s",  buf,  0x16u);
      }

      *(_BYTE *)(*(void *)(a1 + 48) + 56LL) = 1;
    }
  }

  else if (sub_100015208(a1) && sub_1000157A0(a1))
  {
    unsigned int v3 = sub_1000150F8(a1);
    if ((uint64_t)[*(id *)(*(void *)(a1 + 48) + 24) confidence] <= 1)
    {
      if ((uint64_t)[*(id *)(*(void *)(a1 + 48) + 24) confidence] < 1)
      {
      }

      else
      {
        sub_100015294(a1, v3, 30.0);
      }
    }

    else
    {
      float v4 = (os_log_s *)(id)qword_100131948;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      {
        sub_10001518C(*(unsigned __int8 *)(*(void *)(a1 + 48) + 56LL), &v14);
        int v9 = (char)v14.__r_.__value_.__s.__size_;
        std::string::size_type v10 = v14.__r_.__value_.__r.__words[0];
        sub_10001518C(v3, &__p);
        std::string v11 = &v14;
        if (v9 < 0) {
          std::string v11 = (std::string *)v10;
        }
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          __int16 v12 = &__p;
        }
        else {
          __int16 v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)buf = 136315394;
        unint64_t v16 = v11;
        __int16 v17 = 2080;
        id v18 = v12;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "[MotionStateResolver] ConfidenceHigh, state is updated from %s to %s",  buf,  0x16u);
      }

      *(_BYTE *)(*(void *)(a1 + 48) + 56LL) = v3;
    }
  }

void sub_10001503C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

id sub_100015074(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 48) + 24) stationary];
  if ((_DWORD)result)
  {
    if (([*(id *)(*(void *)(a1 + 48) + 24) walking] & 1) != 0
      || ([*(id *)(*(void *)(a1 + 48) + 24) running] & 1) != 0
      || ([*(id *)(*(void *)(a1 + 48) + 24) automotive] & 1) != 0
      || ([*(id *)(*(void *)(a1 + 48) + 24) unknown] & 1) != 0)
    {
      return 0LL;
    }

    else
    {
      return (id)([*(id *)(*(void *)(a1 + 48) + 24) cycling] ^ 1);
    }
  }

  return result;
}

uint64_t sub_1000150F8(uint64_t a1)
{
  return 0LL;
}

std::string *sub_10001518C@<X0>(int a1@<W0>, std::string *a2@<X8>)
{
  id result = (std::string *)sub_100005064(a2, "Unknown");
  return result;
}

void sub_1000151EC(_Unwind_Exception *exception_object)
{
}

uint64_t sub_100015208(uint64_t a1)
{
  if (([*(id *)(*(void *)(a1 + 48) + 24) stationary] & 1) != 0
    || ([*(id *)(*(void *)(a1 + 48) + 24) unknown] & 1) != 0)
  {
    return 0LL;
  }

  if (([*(id *)(*(void *)(a1 + 48) + 24) walking] & 1) != 0
    || ([*(id *)(*(void *)(a1 + 48) + 24) running] & 1) != 0
    || ([*(id *)(*(void *)(a1 + 48) + 24) automotive] & 1) != 0)
  {
    return 1LL;
  }

  return (uint64_t)[*(id *)(*(void *)(a1 + 48) + 24) cycling];
}

void sub_100015294(uint64_t a1, unsigned int a2, float a3)
{
  unsigned __int8 v32 = a2;
  time_t v6 = time(0LL);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v10 = *(void *)(v7 + 40);
  uint64_t v8 = v7 + 40;
  uint64_t v9 = v10;
  if (v10)
  {
    time_t v11 = v6;
    uint64_t v12 = v8;
    do
    {
      unsigned int v13 = *(unsigned __int8 *)(v9 + 32);
      BOOL v14 = v13 >= a2;
      if (v13 >= a2) {
        char v15 = (uint64_t *)v9;
      }
      else {
        char v15 = (uint64_t *)(v9 + 8);
      }
      if (v14) {
        uint64_t v12 = v9;
      }
      uint64_t v9 = *v15;
    }

    while (*v15);
    if (v12 != v8 && *(unsigned __int8 *)(v12 + 32) <= a2)
    {
      unint64_t v16 = sub_100015874(v8 - 8, &v32);
      uint64_t v18 = *v16;
      __int16 v17 = (std::__shared_weak_count *)v16[1];
      uint64_t v30 = *v16;
      unsigned __int8 v31 = v17;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          unint64_t v20 = __ldxr(p_shared_owners);
        while (__stxr(v20 + 1, p_shared_owners));
      }

      if ((float)(v11 - *(void *)(v18 + 16)) >= a3)
      {
        *(void *)(v18 + 16) = v11;
        if (!v17) {
          return;
        }
      }

      else
      {
        __int16 v21 = (os_log_s *)(id)qword_100131948;
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
        {
          sub_10001518C(*(unsigned __int8 *)(*(void *)(a1 + 48) + 56LL), &v29);
          int size = (char)v29.__r_.__value_.__s.__size_;
          std::string::size_type v25 = v29.__r_.__value_.__r.__words[0];
          sub_10001518C(a2, &__p);
          uint64_t v26 = &v29;
          if (size < 0) {
            uint64_t v26 = (std::string *)v25;
          }
          if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)buf = 136315394;
          unint64_t v34 = v26;
          __int16 v35 = 2080;
          uint64_t v36 = p_p;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEBUG,  "[MotionStateResolver] ConfidenceMedium, state is updated from %s to %s",  buf,  0x16u);
        }

        *(_BYTE *)(*(void *)(a1 + 48) + 56LL) = a2;
        *(void *)(v18 + 16) = 0LL;
        sub_1000158C8(a1, a2);
        if (!v17) {
          return;
        }
      }

      __int16 v22 = (unint64_t *)&v17->__shared_owners_;
      do
        unint64_t v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }

void sub_1000154CC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }

  sub_100007004((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_10001550C(uint64_t a1, unsigned int a2, float a3)
{
  unsigned __int8 v34 = a2;
  time_t v6 = time(0LL);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v10 = *(void *)(v7 + 40);
  uint64_t v8 = v7 + 40;
  uint64_t v9 = v10;
  if (v10)
  {
    time_t v11 = v6;
    uint64_t v12 = v8;
    do
    {
      unsigned int v13 = *(unsigned __int8 *)(v9 + 32);
      BOOL v14 = v13 >= a2;
      if (v13 >= a2) {
        char v15 = (uint64_t *)v9;
      }
      else {
        char v15 = (uint64_t *)(v9 + 8);
      }
      if (v14) {
        uint64_t v12 = v9;
      }
      uint64_t v9 = *v15;
    }

    while (*v15);
    if (v12 != v8 && *(unsigned __int8 *)(v12 + 32) <= a2)
    {
      unint64_t v16 = sub_100015874(v8 - 8, &v34);
      uint64_t v18 = (void *)*v16;
      __int16 v17 = (std::__shared_weak_count *)v16[1];
      uint64_t v32 = *v16;
      uint64_t v33 = v17;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          unint64_t v20 = __ldxr(p_shared_owners);
        while (__stxr(v20 + 1, p_shared_owners));
      }

      time_t v21 = v18[1];
      float v22 = (float)(v11 - v21);
      if ((float)(v11 - *v18) >= a3)
      {
        if (v22 >= a3)
        {
          time_t v21 = v11;
          time_t v11 = 0LL;
        }

        *uint64_t v18 = v21;
      }

      else if (v22 < a3)
      {
        unint64_t v23 = (os_log_s *)(id)qword_100131948;
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
        {
          sub_10001518C(*(unsigned __int8 *)(*(void *)(a1 + 48) + 56LL), &v31);
          int size = (char)v31.__r_.__value_.__s.__size_;
          std::string::size_type v27 = v31.__r_.__value_.__r.__words[0];
          sub_10001518C(a2, &__p);
          int v28 = &v31;
          if (size < 0) {
            int v28 = (std::string *)v27;
          }
          if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)buf = 136315394;
          uint64_t v36 = v28;
          __int16 v37 = 2080;
          uint64_t v38 = p_p;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEBUG,  "[MotionStateResolver] ConfidenceLow, state is updated from %s to %s",  buf,  0x16u);
        }

        *(_BYTE *)(*(void *)(a1 + 48) + 56LL) = a2;
        *uint64_t v18 = 0LL;
        v18[1] = 0LL;
        sub_1000158C8(a1, a2);
        goto LABEL_23;
      }

      v18[1] = v11;
LABEL_23:
      if (v17)
      {
        unint64_t v24 = (unint64_t *)&v17->__shared_owners_;
        do
          unint64_t v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
    }
  }

void sub_100015760( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }

  sub_100007004((uint64_t)&a19);
  _Unwind_Resume(a1);
}

BOOL sub_1000157A0(uint64_t a1)
{
  int v2 = sub_1000150F8(a1);
  int v3 = *(unsigned __int8 *)(*(void *)(a1 + 48) + 56LL);
  if (v3 == 2 && v2 != 2) {
    return 1LL;
  }
  if (v3 == 3 && v2 != 3) {
    return 1LL;
  }
  if (v3 == 4 && v2 != 4) {
    return 1LL;
  }
  return v3 == 5 && v2 != 5;
}

std::string *sub_100015800@<X0>(unsigned int a1@<W0>, std::string *a2@<X8>)
{
  id result = (std::string *)sub_100005064(a2, "<unknown>");
  if (a1 < 7) {
    return std::string::assign(a2, off_100125B28[a1]);
  }
  return result;
}

void sub_100015858(_Unwind_Exception *exception_object)
{
}

uint64_t *sub_100015874(uint64_t a1, unsigned __int8 *a2)
{
  int v2 = *(uint64_t ***)(a1 + 8);
  if (!v2) {
LABEL_8:
  }
    sub_100008DE8("map::at:  key not found");
  unsigned int v3 = *a2;
  while (1)
  {
    while (1)
    {
      unsigned int v4 = *((unsigned __int8 *)v2 + 32);
      if (v3 >= v4) {
        break;
      }
      int v2 = (uint64_t **)*v2;
      if (!v2) {
        goto LABEL_8;
      }
    }

    if (v4 >= v3) {
      return (uint64_t *)(v2 + 5);
    }
    int v2 = (uint64_t **)v2[1];
    if (!v2) {
      goto LABEL_8;
    }
  }

void sub_1000158C8(uint64_t a1, int a2)
{
  unsigned int v4 = (char *)operator new(5uLL);
  std::string::size_type v5 = (unsigned __int8 *)v4;
  uint64_t v6 = 0LL;
  *(_DWORD *)unsigned int v4 = 84083201;
  uint64_t v7 = (unsigned __int8 *)(v4 + 5);
  v4[4] = 4;
  uint64_t v8 = (unsigned __int8 *)(v4 + 4);
  while (v4[v6] != a2)
  {
    if (++v6 == 5)
    {
      uint64_t v9 = v4 + 5;
      goto LABEL_6;
    }
  }

  uint64_t v9 = &v4[v6];
LABEL_6:
  int64_t v10 = v9 - (char *)v5;
  if (v9 - (char *)v5 != 5)
  {
    if (v10 != 4) {
      memmove(v9, v9 + 1, 4 - v10);
    }
    uint64_t v7 = v8;
  }

  time_t v11 = v5;
  do
  {
    unsigned int v12 = *v11;
    unsigned __int8 v22 = *v11;
    uint64_t v13 = *(void *)(a1 + 48);
    uint64_t v16 = *(void *)(v13 + 40);
    uint64_t v14 = v13 + 40;
    uint64_t v15 = v16;
    if (v16)
    {
      uint64_t v17 = v14;
      do
      {
        unsigned int v18 = *(unsigned __int8 *)(v15 + 32);
        BOOL v19 = v18 >= v12;
        if (v18 >= v12) {
          unint64_t v20 = (uint64_t *)v15;
        }
        else {
          unint64_t v20 = (uint64_t *)(v15 + 8);
        }
        if (v19) {
          uint64_t v17 = v15;
        }
        uint64_t v15 = *v20;
      }

      while (*v20);
      if (v17 != v14 && v12 >= *(unsigned __int8 *)(v17 + 32))
      {
        time_t v21 = (void *)*sub_100015874(v14 - 8, &v22);
        *time_t v21 = 0LL;
        v21[1] = 0LL;
        v21[2] = 0LL;
      }
    }

    ++v11;
  }

  while (v11 != v7);
  operator delete(v5);
}

void sub_100015A20(_Unwind_Exception *a1)
{
}

uint64_t *sub_100015A34(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  unsigned int v4 = operator new(0x20uLL);
  void *v4 = &off_100125A60;
  v4[1] = 0LL;
  v4[2] = 0LL;
  v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2) {
    std::string::size_type v5 = (void *)(a2 + 8);
  }
  else {
    std::string::size_type v5 = 0LL;
  }
  sub_10000CCC8((uint64_t)a1, v5, a2);
  return a1;
}

void sub_100015AC4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    sub_100015B0C((uint64_t)&a12, v12);
    __cxa_rethrow();
  }

  _Unwind_Resume(exception_object);
}

void sub_100015B0C(uint64_t a1, id *a2)
{
  id v3 = sub_10000B718(a2 + 3);
  unsigned int v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v3);
  dispatch_barrier_async_f(v4, a2, (dispatch_function_t)sub_100015BF8);
}

void sub_100015B58(std::__shared_weak_count *a1)
{
}

void sub_100015B6C(uint64_t a1)
{
  uint64_t v1 = *(id **)(a1 + 24);
  id v2 = sub_10000B718(v1 + 3);
  id v3 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v2);
  dispatch_barrier_async_f(v3, v1, (dispatch_function_t)sub_100015BF8);
}

uint64_t sub_100015BB8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

uint64_t sub_100015BF8(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

void sub_100015C0C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100015C68(*(void **)(a2 + 40));

    id v3 = *(id *)a2;
    *(void *)a2 = 0LL;

    operator delete((void *)a2);
  }

void sub_100015C68(void *a1)
{
  if (a1)
  {
    sub_100015C68(*a1);
    sub_100015C68(a1[1]);
    sub_100007004((uint64_t)(a1 + 5));
    operator delete(a1);
  }

void sub_100015CA8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100125AC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100015CB8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100125AC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

char *sub_100015CE0(uint64_t a1, __int128 *a2, __int128 *a3, char *__dst)
{
  unsigned int v4 = __dst;
  uint64_t v9 = __dst;
  int64_t v10 = __dst;
  v11[0] = a1;
  v11[1] = &v9;
  v11[2] = &v10;
  unint64_t v12 = 0xAAAAAAAAAAAAAA00LL;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_10000B8BC(v4, *(void **)v6, *((void *)v6 + 1));
        unsigned int v4 = v10;
      }

      else
      {
        __int128 v7 = *v6;
        *((void *)v4 + 2) = *((void *)v6 + 2);
        *(_OWORD *)unsigned int v4 = v7;
      }

      uint64_t v6 = (__int128 *)((char *)v6 + 24);
      v4 += 24;
      int64_t v10 = v4;
    }

    while (v6 != a3);
  }

  LOBYTE(v12) = 1;
  sub_100015DCC((uint64_t)v11);
  return v4;
}

void sub_100015DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_100015DCC(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_100015E00(a1);
  }
  return a1;
}

void sub_100015E00(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 24LL;
  }

void sub_100015E44(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_100015E84((uint64_t *)v2);
    operator delete(**a1);
  }

void sub_100015E84(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24LL)
  {
  }

  a1[1] = v2;
}

void sub_100015ED0(void ***a1)
{
  uint64_t v2 = *a1;
  id v3 = **a1;
  sub_1000140A4((uint64_t)v3);
  sub_100013C1C(v3);
  operator delete(v2);
  sub_100007004((uint64_t)(a1 + 1));
  operator delete(a1);
}

void sub_100015F20(_Unwind_Exception *a1)
{
}

id **sub_100015F44(id **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0LL;
  if (v2)
  {

    operator delete(v2);
  }

  return a1;
}

id **sub_100015F80(id *a1)
{
  unsigned int v4 = a1;
  uint64_t v1 = *a1;
  objc_storeStrong((id *)(*((void *)*a1 + 6) + 24LL), a1[1]);
  sub_100014894((uint64_t)v1);
  memset(&v11, 170, sizeof(v11));
  sub_10001518C(*(unsigned __int8 *)(v1[6] + 56LL), &v11);
  if (os_log_type_enabled((os_log_t)qword_100131948, OS_LOG_TYPE_DEBUG)) {
    sub_1000D72C0();
  }
  uint64_t v2 = v1[4];
  sub_100005064(__p, "motionState");
  v7[0] = 0;
  uint64_t v8 = 0LL;
  sub_1000041AC((uint64_t)v7);
  sub_1000041AC((uint64_t)v7);
  sub_10000B990((uint64_t)v5, (uint64_t)&v11);
  (*(void (**)(uint64_t, void **, _BYTE *, _BYTE *, uint64_t, void))(*(void *)v2 + 24LL))( v2,  __p,  v7,  v5,  -1LL,  0LL);
  sub_1000041AC((uint64_t)v5);
  sub_10000425C(&v6, v5[0]);
  sub_1000041AC((uint64_t)v7);
  sub_10000425C(&v8, v7[0]);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  return sub_100015F44(&v4);
}

void sub_1000160F0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned __int8 a10, uint64_t a11, unsigned __int8 a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  sub_100015F44((id **)&a9);
  _Unwind_Resume(a1);
}

  ;
}

void sub_10001618C(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

void sub_1000161A0(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

void sub_1000161B4(uint64_t a1@<X8>)
{
  *(void *)(v1 - sub_100007004((uint64_t)v1 + 8) = a1;
}

  ;
}

uint64_t *sub_1000161E8@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = operator new(0x58uLL);
  sub_100016258(v6, a1, a2);
  return sub_100016E70(a3, (uint64_t)v6);
}

void sub_10001623C(void *a1)
{
}

void *sub_100016258(void *a1, void *a2, void *a3)
{
  dispatch_queue_attr_t v6 = dispatch_queue_attr_make_with_qos_class(0LL, QOS_CLASS_UTILITY, 0);
  __int128 v7 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v6);
  dispatch_queue_t v8 = dispatch_queue_create("analyticsd.TrialStateResolverQueue.myQueue", v7);
  a1[1] = 0LL;
  a1[2] = 0LL;
  a1[3] = v8;

  *a1 = off_100125B70;
  a1[4] = off_100125BB0;
  a1[5] = off_100125BF0;
  uint64_t v9 = a2[1];
  a1[6] = *a2;
  a1[7] = v9;
  if (v9)
  {
    char v10 = (unint64_t *)(v9 + 8);
    do
      unint64_t v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }

  uint64_t v12 = a3[1];
  a1[8] = *a3;
  a1[9] = v12;
  if (v12)
  {
    uint64_t v13 = (unint64_t *)(v12 + 8);
    do
      unint64_t v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }

  uint64_t v15 = operator new(8uLL);
  *uint64_t v15 = 0LL;
  a1[10] = v15;
  return a1;
}

void sub_10001633C(_Unwind_Exception *a1)
{
}

uint64_t sub_100016360@<X0>(uint64_t *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  uint64_t v2 = (void *)sub_100017044(a1, off_100125C08);
  uint64_t v3 = v2;
  unint64_t v4 = a1[2];
  a1[1] = (uint64_t)v2;
  if ((unint64_t)v2 >= v4)
  {
    std::string::size_type v5 = (void *)sub_100017044(a1, off_100125C10);
  }

  else
  {
    sub_100005064(v2, "trialDeployment");
    std::string::size_type v5 = v3 + 3;
    a1[1] = (uint64_t)v5;
  }

  a1[1] = (uint64_t)v5;
  if ((unint64_t)v5 >= a1[2])
  {
    dispatch_queue_attr_t v6 = (void *)sub_100017044(a1, off_100125C18);
  }

  else
  {
    sub_100005064(v5, "trialExperiment");
    dispatch_queue_attr_t v6 = v5 + 3;
    a1[1] = (uint64_t)v6;
  }

  a1[1] = (uint64_t)v6;
  if ((unint64_t)v6 >= a1[2])
  {
    uint64_t result = sub_100017044(a1, &off_100125C20);
  }

  else
  {
    sub_100005064(v6, "trialTreatment");
    uint64_t result = (uint64_t)(v6 + 3);
    a1[1] = (uint64_t)(v6 + 3);
  }

  a1[1] = result;
  return result;
}

void sub_100016494( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + sub_100007004((uint64_t)v1 + 8) = v10;
  a9 = (void **)v9;
  sub_100015E44(&a9);
  _Unwind_Resume(a1);
}

void sub_1000164C0(uint64_t a1)
{
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000CF18(&v14, (void *)(a1 + 8));
  uint64_t v2 = operator new(8uLL);
  void *v2 = a1;
  id v3 = sub_10000B718((id *)(a1 + 24));
  unint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  unint64_t v5 = v14;
  unint64_t v6 = v15;
  if (v15)
  {
    __int128 v7 = (unint64_t *)(v15 + 8);
    do
      unint64_t v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }

  uint64_t v9 = v4;
  uint64_t v10 = operator new(0x18uLL);
  *uint64_t v10 = v2;
  v10[1] = v5;
  v10[2] = v6;
  dispatch_async_f(v9, v10, (dispatch_function_t)sub_100017400);

  unint64_t v11 = (std::__shared_weak_count *)v15;
  if (v15)
  {
    uint64_t v12 = (unint64_t *)(v15 + 8);
    do
      unint64_t v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

void sub_1000165D0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

id *sub_1000165E8@<X0>( uint64_t a1@<X0>, char a2@<W1>, __int128 *a3@<X2>, __int128 *a4@<X3>, __int128 *a5@<X4>, __int128 *a6@<X5>, dispatch_group_t *a7@<X8>)
{
  dispatch_group_t v14 = dispatch_group_create();
  *a7 = v14;
  uint64_t v34 = a1;
  unint64_t v15 = v14;
  __int16 v35 = v15;
  if (v15) {
    dispatch_group_enter(v15);
  }
  if (*((char *)a3 + 23) < 0)
  {
    sub_10000B8BC(&v36, *(void **)a3, *((void *)a3 + 1));
  }

  else
  {
    __int128 v36 = *a3;
    uint64_t v37 = *((void *)a3 + 2);
  }

  if (*((char *)a4 + 23) < 0)
  {
    sub_10000B8BC(&v38, *(void **)a4, *((void *)a4 + 1));
  }

  else
  {
    __int128 v38 = *a4;
    uint64_t v39 = *((void *)a4 + 2);
  }

  if (*((char *)a5 + 23) < 0)
  {
    sub_10000B8BC(&v40, *(void **)a5, *((void *)a5 + 1));
  }

  else
  {
    __int128 v40 = *a5;
    uint64_t v41 = *((void *)a5 + 2);
  }

  if (*((char *)a6 + 23) < 0)
  {
    sub_10000B8BC(&__p, *(void **)a6, *((void *)a6 + 1));
  }

  else
  {
    __int128 __p = *a6;
    uint64_t v43 = *((void *)a6 + 2);
  }

  char v44 = a2;
  unint64_t v32 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v33 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000CF18(&v32, (void *)(a1 + 8));
  uint64_t v16 = (char *)operator new(0x78uLL);
  uint64_t v17 = v35;
  *(void *)uint64_t v16 = v34;
  unsigned int v18 = v17;
  *((void *)v16 + 1) = v18;
  __int16 v35 = 0LL;

  if (SHIBYTE(v37) < 0)
  {
    sub_10000B8BC(v16 + 16, (void *)v36, *((unint64_t *)&v36 + 1));
  }

  else
  {
    *((_OWORD *)v16 + 1) = v36;
    *((void *)v16 + 4) = v37;
  }

  if (SHIBYTE(v39) < 0)
  {
    sub_10000B8BC(v16 + 40, (void *)v38, *((unint64_t *)&v38 + 1));
  }

  else
  {
    *(_OWORD *)(v16 + 40) = v38;
    *((void *)v16 + 7) = v39;
  }

  if (SHIBYTE(v41) < 0)
  {
    sub_10000B8BC(v16 + 64, (void *)v40, *((unint64_t *)&v40 + 1));
  }

  else
  {
    *((_OWORD *)v16 + 4) = v40;
    *((void *)v16 + 10) = v41;
  }

  BOOL v19 = v16 + 88;
  if (SHIBYTE(v43) < 0)
  {
    sub_10000B8BC(v19, (void *)__p, *((unint64_t *)&__p + 1));
  }

  else
  {
    *(_OWORD *)BOOL v19 = __p;
    *((void *)v16 + 13) = v43;
  }

  v16[112] = v44;
  id v20 = sub_10000B718((id *)(a1 + 24));
  time_t v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
  unint64_t v22 = v32;
  unint64_t v23 = v33;
  if (v33)
  {
    unint64_t v24 = (unint64_t *)(v33 + 8);
    do
      unint64_t v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }

  uint64_t v26 = v21;
  std::string::size_type v27 = operator new(0x18uLL);
  void *v27 = v16;
  v27[1] = v22;
  v27[2] = v23;
  dispatch_async_f(v26, v27, (dispatch_function_t)sub_10001749C);

  int v28 = (std::__shared_weak_count *)v33;
  if (v33)
  {
    std::string v29 = (unint64_t *)(v33 + 8);
    do
      unint64_t v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }

  if (SHIBYTE(v43) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v41) < 0) {
    operator delete((void *)v40);
  }
  if (SHIBYTE(v39) < 0) {
    operator delete((void *)v38);
  }
  if (SHIBYTE(v37) < 0) {
    operator delete((void *)v36);
  }
  return sub_10000B720((id *)&v35);
}

void sub_100016920( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20, int a21, __int16 a22, char a23, char a24, void *__p, uint64_t a26, int a27, __int16 a28, char a29, char a30)
{
  if (a2)
  {
    if (v30[87] < 0) {
      operator delete(*v33);
    }
    if (v30[63] < 0) {
      operator delete(*v32);
    }
    if (v30[39] < 0) {
      operator delete(*v34);
    }
    sub_10000B720(v31);
    sub_1000045D0(exception_object);
  }

  _Unwind_Resume(exception_object);
}

id *sub_100016A08@<X0>( uint64_t a1@<X0>, char a2@<W1>, __int128 *a3@<X2>, __int128 *a4@<X3>, __int128 *a5@<X4>, __int128 *a6@<X5>, dispatch_group_t *a7@<X8>)
{
  return sub_1000165E8(a1 - 40, a2, a3, a4, a5, a6, a7);
}

dispatch_group_t sub_100016A10@<X0>(uint64_t a1@<X0>, dispatch_group_t *a2@<X8>)
{
  dispatch_group_t result = dispatch_group_create();
  *a2 = result;
  return result;
}

void sub_100016A4C(uint64_t a1)
{
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000CF18(&v14, (void *)(a1 + 8));
  uint64_t v2 = operator new(8uLL);
  void *v2 = a1;
  id v3 = sub_10000B718((id *)(a1 + 24));
  unint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  unint64_t v5 = v14;
  unint64_t v6 = v15;
  if (v15)
  {
    __int128 v7 = (unint64_t *)(v15 + 8);
    do
      unint64_t v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }

  uint64_t v9 = v4;
  uint64_t v10 = operator new(0x18uLL);
  *uint64_t v10 = v2;
  v10[1] = v5;
  v10[2] = v6;
  dispatch_async_f(v9, v10, (dispatch_function_t)sub_100017C3C);

  unint64_t v11 = (std::__shared_weak_count *)v15;
  if (v15)
  {
    uint64_t v12 = (unint64_t *)(v15 + 8);
    do
      unint64_t v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

void sub_100016B5C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

dispatch_group_t sub_100016B74@<X0>(uint64_t a1@<X0>, dispatch_group_t *a2@<X8>)
{
  uint64_t v3 = a1 - 32;
  [**(id **)(a1 + 48) unsubscribeAllUpdateHandlers];
  sub_100016A4C(v3);
  dispatch_group_t result = dispatch_group_create();
  *a2 = result;
  return result;
}

uint64_t sub_100016BB0(uint64_t a1)
{
  *(void *)a1 = off_100125B70;
  *(void *)(a1 + 32) = off_100125BB0;
  *(void *)(a1 + 40) = off_100125BF0;
  sub_100016E34((id **)(a1 + 80), 0LL);
  sub_100007004(a1 + 64);
  sub_100007004(a1 + 48);
  sub_100009958(a1 + 8);
  return a1;
}

void sub_100016C0C(void *a1)
{
  *(void *)a1 = off_100125B70;
  *((void *)a1 + 4) = off_100125BB0;
  *((void *)a1 + 5) = off_100125BF0;
  sub_100016E34((id **)a1 + 10, 0LL);
  sub_100007004((uint64_t)a1 + 64);
  sub_100007004((uint64_t)a1 + 48);
  sub_100009958((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t sub_100016C68(uint64_t a1)
{
  *(void *)(a1 - 32) = off_100125B70;
  *(void *)a1 = off_100125BB0;
  *(void *)(a1 + sub_100007004((uint64_t)v1 + 8) = off_100125BF0;
  sub_100016E34((id **)(a1 + 48), 0LL);
  sub_100007004(a1 + 32);
  sub_100007004(a1 + 16);
  return sub_100009958(a1 - 24);
}

void sub_100016CB8(uint64_t a1)
{
  *(void *)(a1 - 32) = off_100125B70;
  uint64_t v2 = (void *)(a1 - 32);
  *(void *)a1 = off_100125BB0;
  *(void *)(a1 + sub_100007004((uint64_t)v1 + 8) = off_100125BF0;
  sub_100016E34((id **)(a1 + 48), 0LL);
  sub_100007004(a1 + 32);
  sub_100007004(a1 + 16);
  sub_100009958(a1 - 24);
  operator delete(v2);
}

dispatch_group_t sub_100016D14@<X0>(dispatch_group_t *a1@<X8>)
{
  dispatch_group_t result = dispatch_group_create();
  *a1 = result;
  return result;
}

dispatch_group_t sub_100016D38@<X0>(dispatch_group_t *a1@<X8>)
{
  dispatch_group_t result = dispatch_group_create();
  *a1 = result;
  return result;
}

dispatch_group_t sub_100016D5C@<X0>(dispatch_group_t *a1@<X8>)
{
  dispatch_group_t result = dispatch_group_create();
  *a1 = result;
  return result;
}

uint64_t sub_100016D80(uint64_t a1)
{
  *(void *)(a1 - 40) = off_100125B70;
  *(void *)(a1 - sub_100007004((uint64_t)v1 + 8) = off_100125BB0;
  *(void *)a1 = off_100125BF0;
  sub_100016E34((id **)(a1 + 40), 0LL);
  sub_100007004(a1 + 24);
  sub_100007004(a1 + 8);
  return sub_100009958(a1 - 32);
}

void sub_100016DD4(uint64_t a1)
{
  *(void *)(a1 - 40) = off_100125B70;
  uint64_t v2 = (void *)(a1 - 40);
  *(void *)(a1 - sub_100007004((uint64_t)v1 + 8) = off_100125BB0;
  *(void *)a1 = off_100125BF0;
  sub_100016E34((id **)(a1 + 40), 0LL);
  sub_100007004(a1 + 24);
  sub_100007004(a1 + 8);
  sub_100009958(a1 - 32);
  operator delete(v2);
}

void sub_100016E34(id **a1, id *a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {

    operator delete(v2);
  }

uint64_t *sub_100016E70(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  unint64_t v4 = operator new(0x20uLL);
  void *v4 = &off_100125CD8;
  v4[1] = 0LL;
  v4[2] = 0LL;
  v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2) {
    unint64_t v5 = (void *)(a2 + 8);
  }
  else {
    unint64_t v5 = 0LL;
  }
  sub_10000CCC8((uint64_t)a1, v5, a2);
  return a1;
}

void sub_100016F00( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    sub_100016F48((uint64_t)&a12, v12);
    __cxa_rethrow();
  }

  _Unwind_Resume(exception_object);
}

void sub_100016F48(uint64_t a1, id *a2)
{
  id v3 = sub_10000B718(a2 + 3);
  unint64_t v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v3);
  dispatch_barrier_async_f(v4, a2, (dispatch_function_t)sub_100017030);
}

void sub_100016F94(std::__shared_weak_count *a1)
{
}

void sub_100016FA8(uint64_t a1)
{
  uint64_t v1 = *(id **)(a1 + 24);
  id v2 = sub_10000B718(v1 + 3);
  id v3 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v2);
  dispatch_barrier_async_f(v3, v1, (dispatch_function_t)sub_100017030);
}

uint64_t sub_100016FF0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

uint64_t sub_100017030(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

uint64_t sub_100017044(uint64_t *a1, char **a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_1000046F8();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555LL) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_1000171F0(v7, v9);
  }
  else {
    uint64_t v10 = 0LL;
  }
  unint64_t v13 = v10;
  unint64_t v14 = &v10[24 * v4];
  unint64_t v15 = v14;
  uint64_t v16 = &v10[24 * v9];
  sub_100005064(v14, *a2);
  unint64_t v15 = v14 + 24;
  sub_10001717C(a1, &v13);
  uint64_t v11 = a1[1];
  sub_100017378((uint64_t)&v13);
  return v11;
}

void sub_100017168( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10001717C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100017234((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1000171F0(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_100004828();
  }
  return operator new(24 * a2);
}

uint64_t sub_100017234(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v13 = a6;
  *((void *)&v13 + 1) = a7;
  __int128 v12 = v13;
  v14[0] = a1;
  v14[1] = &v12;
  v14[2] = &v13;
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      __int128 v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - sub_100007004((uint64_t)v1 + 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24LL;
      *(void *)(a3 - 16) = 0LL;
      *(void *)(a3 - sub_100007004((uint64_t)v1 + 8) = 0LL;
      *(void *)(a3 - 24) = 0LL;
      v7 -= 24LL;
      a3 -= 24LL;
    }

    while (a3 != a5);
    *((void *)&v13 + 1) = v9;
  }

  LOBYTE(v15) = 1;
  sub_100017300((uint64_t)v14);
  return a6;
}

uint64_t sub_100017300(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_100017334(a1);
  }
  return a1;
}

void sub_100017334(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8LL);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8LL);
  while (v1 != v2)
  {
    v1 += 24LL;
  }

uint64_t sub_100017378(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1000173AC(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        uint64_t v5 = *(void ***)(a1 + 16);
      }

      uint64_t v2 = v5;
    }

    while (v5 != a2);
  }

void sub_100017400(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  if (!**(void **)(v3 + 80))
  {
    unint64_t v4 = -[TrialStateRelay initWithMonitoring:]( objc_alloc(&OBJC_CLASS___TrialStateRelay),  "initWithMonitoring:",  v3 + 40);
    uint64_t v5 = *(void ***)(v3 + 80);
    uint64_t v6 = *v5;
    void *v5 = v4;
  }

  sub_100016A4C(v3);
  operator delete(v2);
  sub_100007004((uint64_t)(a1 + 1));
  operator delete(a1);
}

void sub_100017478(_Unwind_Exception *a1)
{
}

void sub_10001749C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v13 = v2;
  uint64_t v3 = *(void *)v2;
  if (*(_BYTE *)(v2 + 112))
  {
    unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v15 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    sub_100017A54((uint64_t)__p, "namespace");
    uint64_t v17 = __p;
    char v18 = 1;
    uint64_t v20 = sub_10000B990((uint64_t)v19, v2 + 16);
    char v21 = 1;
    sub_10000BA40((uint64_t)v22, (uint64_t)__p, 2LL, 1, 2);
    v23[1] = (uint64_t *)v22;
    char v24 = 1;
    sub_10000BA40((uint64_t)&v14, (uint64_t)v22, 1LL, 1, 2);
    sub_1000041AC((uint64_t)v22);
    sub_10000425C(v23, v22[0]);
    for (uint64_t i = 0LL; i != -64; i -= 32LL)
    {
      sub_1000041AC((uint64_t)&v19[i]);
      sub_10000425C((uint64_t **)&v19[i + 8], v19[i]);
    }

    uint64_t v5 = *(void *)(v3 + 48);
    sub_100005064(__p, "trial");
    sub_10000B990((uint64_t)v22, v2 + 16);
    (*(void (**)(uint64_t, void **, unint64_t *, _BYTE *, uint64_t, uint64_t))(*(void *)v5 + 24LL))( v5,  __p,  &v14,  v22,  -1LL,  1LL);
    sub_1000041AC((uint64_t)v22);
    sub_10000425C(v23, v22[0]);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v6 = *(void *)(v3 + 48);
    sub_100005064(__p, "trialExperiment");
    sub_10000B990((uint64_t)v22, v2 + 40);
    (*(void (**)(uint64_t, void **, unint64_t *, _BYTE *, uint64_t, uint64_t))(*(void *)v6 + 24LL))( v6,  __p,  &v14,  v22,  -1LL,  1LL);
    sub_1000041AC((uint64_t)v22);
    sub_10000425C(v23, v22[0]);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = *(void *)(v3 + 48);
    sub_100005064(__p, "trialDeployment");
    sub_10000B990((uint64_t)v22, v2 + 64);
    (*(void (**)(uint64_t, void **, unint64_t *, _BYTE *, uint64_t, uint64_t))(*(void *)v7 + 24LL))( v7,  __p,  &v14,  v22,  -1LL,  1LL);
    sub_1000041AC((uint64_t)v22);
    sub_10000425C(v23, v22[0]);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v8 = *(void *)(v3 + 48);
    sub_100005064(__p, "trialTreatment");
    sub_10000B990((uint64_t)v22, v2 + 88);
    (*(void (**)(uint64_t, void **, unint64_t *, _BYTE *, uint64_t, uint64_t))(*(void *)v8 + 24LL))( v8,  __p,  &v14,  v22,  -1LL,  1LL);
    sub_1000041AC((uint64_t)v22);
    sub_10000425C(v23, v22[0]);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
    sub_1000041AC((uint64_t)&v14);
    sub_10000425C(&v15, v14);
  }

  else
  {
    uint64_t v9 = *(void *)(v3 + 48);
    sub_100005064(__p, "trial");
    (*(void (**)(uint64_t, void **))(*(void *)v9 + 32LL))(v9, __p);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = *(void *)(v3 + 48);
    sub_100005064(__p, "trialExperiment");
    (*(void (**)(uint64_t, void **))(*(void *)v10 + 32LL))(v10, __p);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v11 = *(void *)(v3 + 48);
    sub_100005064(__p, "trialDeployment");
    (*(void (**)(uint64_t, void **))(*(void *)v11 + 32LL))(v11, __p);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v12 = *(void *)(v3 + 48);
    sub_100005064(__p, "trialTreatment");
    (*(void (**)(uint64_t, void **))(*(void *)v12 + 32LL))(v12, __p);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
  }

  sub_1000179D8(&v13);
  sub_100007004((uint64_t)(a1 + 1));
  operator delete(a1);
}

void sub_1000178A0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_1000179D8(&a9);
  sub_100007004((uint64_t)v23 + 8);
  operator delete(v23);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000179D8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0LL;
  if (v2)
  {
    sub_10000B720((id *)(v2 + 8));
    operator delete((void *)v2);
  }

  return a1;
}

uint64_t sub_100017A54(uint64_t a1, char *a2)
{
  *(void *)(a1 + sub_100007004((uint64_t)v1 + 8) = 0LL;
  *(_BYTE *)a1 = 3;
  *(void *)(a1 + sub_100007004((uint64_t)v1 + 8) = sub_100017A9C(a2);
  sub_1000041AC(a1);
  sub_1000041AC(a1);
  return a1;
}

void *sub_100017A9C(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  sub_100005064(v2, a1);
  return v2;
}

void sub_100017AD0(_Unwind_Exception *a1)
{
}

_BYTE *sub_100017AE4(_BYTE *a1, int a2)
{
  switch(a2)
  {
    case 1:
      uint64_t v3 = operator new(0x18uLL);
      v3[2] = 0LL;
      v3[1] = 0LL;
      *uint64_t v3 = v3 + 1;
      goto LABEL_8;
    case 2:
      uint64_t v3 = operator new(0x18uLL);
      v3[1] = 0LL;
      v3[2] = 0LL;
      *uint64_t v3 = 0LL;
      goto LABEL_8;
    case 3:
      uint64_t v3 = sub_100017B90("");
      goto LABEL_8;
    case 4:
      *a1 = 0;
      return a1;
    case 8:
      uint64_t v3 = operator new(0x20uLL);
      v3[1] = 0LL;
      v3[2] = 0LL;
      *uint64_t v3 = 0LL;
      *((_WORD *)v3 + 12) = 0;
LABEL_8:
      *(void *)a1 = v3;
      break;
    default:
      *(void *)a1 = 0LL;
      break;
  }

  return a1;
}

void *sub_100017B90(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  sub_100005064(v2, a1);
  return v2;
}

void sub_100017BC4(_Unwind_Exception *a1)
{
}

void sub_100017BD8(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)off_100125390;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
}

void sub_100017C08(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)off_100125390;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
  operator delete(v2);
}

void sub_100017C3C(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  memset(v9, 0, sizeof(v9));
  unint64_t v10 = 0xAAAAAAAA3F800000LL;
  uint64_t v4 = *(void *)(v3 + 64);
  sub_100005064(__p, "queried_states");
  v11[0] = &off_100125D78;
  v11[1] = v9;
  v11[2] = v3;
  uint64_t v12 = v11;
  (*(void (**)(uint64_t, void **, void *))(*(void *)v4 + 208LL))(v4, __p, v11);
  uint64_t v5 = v12;
  if (v12 == v11)
  {
    uint64_t v6 = 4LL;
    uint64_t v5 = v11;
  }

  else
  {
    if (!v12) {
      goto LABEL_6;
    }
    uint64_t v6 = 5LL;
  }

  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_1000226EC((uint64_t)v9);
  operator delete(v2);
  sub_100007004((uint64_t)(a1 + 1));
  operator delete(a1);
}

void sub_100017D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

__n128 sub_100017D90(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &off_100125D78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + sub_100007004((uint64_t)v5 + 8) = result;
  return result;
}

__n128 sub_100017DC8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_100125D78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + sub_100007004((uint64_t)v5 + 8) = result;
  return result;
}

void sub_100017DE8(uint64_t a1, uint64_t a2, uint64_t a3, char **a4)
{
  uint64_t v5 = *a4;
  uint64_t v6 = *(void *)(a1 + 16);
  unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v25 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_100005064(__p, v5);
  std::string::size_type v27 = 0LL;
  sub_100018788((uint64_t)__p, (uint64_t)v26, 1, &v24);
  uint64_t v7 = v27;
  if (v27 == v26)
  {
    uint64_t v8 = 4LL;
    uint64_t v7 = v26;
    goto LABEL_5;
  }

  if (v27)
  {
    uint64_t v8 = 5LL;
LABEL_5:
    (*(void (**)(void))&(*v7)[8 * v8])();
  }

  if (SHIBYTE(v21) < 0) {
    operator delete(__p[0]);
  }
  v26[0] = (unsigned __int8 *)&v24;
  v26[1] = 0LL;
  v26[2] = 0LL;
  std::string::size_type v27 = 0LL;
  unint64_t v28 = 0x8000000000000000LL;
  sub_100021128(v26);
  __p[0] = &v24;
  __p[1] = 0LL;
  uint64_t v21 = 0LL;
  uint64_t v22 = 0LL;
  unint64_t v23 = 0x8000000000000000LL;
  sub_1000211FC((unsigned __int8 **)__p);
  while (!sub_10001855C(v26, (unsigned __int8 **)__p))
  {
    uint64_t v9 = sub_100018150(v26);
    unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v10 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v18[0] = v10;
    v18[1] = v10;
    uint64_t v11 = sub_1000182F4(v9, 2uLL);
    sub_1000184F4(v11, "namespace", (uint64_t)v18);
    uint64_t v12 = sub_1000182F4(v9, 2uLL);
    uint64_t v16 = 0LL;
    *(_OWORD *)&__s1.__r_.__value_.__r.__words[1] = 0uLL;
    __s1.__r_.__value_.__r.__words[0] = v12;
    unint64_t v17 = 0x8000000000000000LL;
    sub_1000211FC((unsigned __int8 **)&__s1);
    memset(&__s1, 170, sizeof(__s1));
    uint64_t v13 = sub_100018150((unsigned __int8 **)v18);
    sub_1000218CC((uint64_t)v13, &__s1);
    if ((char)__s1.__r_.__value_.__s.__size_ < 0)
    {
      if (__s1.__r_.__value_.__l.__size_ != 65) {
        goto LABEL_17;
      }
      p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
    }

    else
    {
      if (__s1.__r_.__value_.__s.__size_ != 65) {
        goto LABEL_17;
      }
      p_s1 = &__s1;
    }

    if (memcmp(p_s1, "WIRELESS_DATA_ANALYTICS_CELLULAR_PRODUCT_EXPERIMENTATION_INTERNAL", 0x41uLL))
    {
LABEL_17:
      if (!sub_100021A64(*(void **)(a1 + 8), (unsigned __int8 *)&__s1))
      {
        sub_1000220E4(*(void *)(a1 + 8), (unsigned __int8 *)&__s1, (uint64_t)&__s1);
        sub_100018698(*(void ***)(v6 + 80), (uint64_t *)&__s1);
      }
    }

LABEL_21:
    sub_100018704(v26);
  }

  sub_1000041AC((uint64_t)&v24);
  sub_10000425C(&v25, v24);
}

      unint64_t v32 = (char **)(1000000 * v18);
      unint64_t v33 = 1000000 * v17;
      LOBYTE(p_s) = 1;
      uint64_t v12 = *(void *)(a2 + 24);
      if (!v12) {
        sub_1000129CC();
      }
      (*(void (**)(uint64_t, void **, void ***, void ***))(*(void *)v12 + 48LL))(v12, &__p, &v15, &block);
      sub_1000041AC((uint64_t)&block);
      sub_10000425C((uint64_t **)&v31, block);
      sub_1000041AC((uint64_t)&v15);
      sub_10000425C(&v16, v15);
      if ((SHIBYTE(v25) & 0x80000000) == 0) {
        goto LABEL_23;
      }
      operator delete(__p);
    }

    while (v7);
  }

    uint64_t v8 = (v12 - 1) & v12;
    __int128 v10 = __clz(__rbit64(v12)) + (v5 << 6);
LABEL_22:
    unint64_t v14 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v10);
    uint64_t v16 = *v14;
    unint64_t v15 = v14[1];
    unint64_t v17 = *(void *)((char *)v2 + v44);
    char v18 = *(void *)(v17 + 16);
    swift_bridgeObjectRetain(v15);
    if (!v18) {
      goto LABEL_26;
    }
    swift_bridgeObjectRetain(v15);
    unint64_t v19 = sub_1000A4C24(v16, v15);
    if ((v20 & 1) != 0)
    {
      uint64_t v21 = *(void *)(*(void *)(v17 + 56) + 8 * v19);
      swift_bridgeObjectRelease(v15);
      uint64_t v22 = (void *)(*(uint64_t (**)(uint64_t))((swift_isaMask & *v2) + 0x80LL))(v21);
      unint64_t v23 = String.utf8CString.getter(v16, v15);
      swift_bridgeObjectRelease(v15);
      xpc_dictionary_set_value(xdict, (const char *)(v23 + 32), v22);
      swift_unknownObjectRelease(v22, v24);
      swift_release(v23);
    }

    else
    {
      swift_bridgeObjectRelease(v15);
LABEL_26:
      if (p_info[343] != (__objc2_class_ro *)-1LL) {
        swift_once(&qword_100131AB8, sub_1000A53D4);
      }
      unint64_t v25 = type metadata accessor for Logger(0LL);
      sub_1000A5488(v25, (uint64_t)qword_100131B58);
      uint64_t v26 = swift_bridgeObjectRetain(v15);
      std::string::size_type v27 = (os_log_s *)Logger.logObject.getter(v26);
      unint64_t v28 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v27, v28))
      {
        std::string v29 = p_info;
        unint64_t v30 = v3;
        std::string v31 = swift_slowAlloc(12LL, -1LL);
        unint64_t v32 = swift_slowAlloc(32LL, -1LL);
        id v45 = v32;
        *(_DWORD *)std::string v31 = 136315138;
        swift_bridgeObjectRetain(v15);
        *(void *)(v31 + 4) = sub_1000A45E4(v16, v15, &v45);
        swift_bridgeObjectRelease_n(v15, 3LL);
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "Unexpected argument key: %s", (uint8_t *)v31, 0xCu);
        swift_arrayDestroy(v32, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v32, -1LL, -1LL);
        unint64_t v33 = v31;
        uint64_t v3 = v30;
        p_info = v29;
        uint64_t v2 = v40;
        swift_slowDealloc(v33, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(v15, 2LL);
      }
    }
  }

  uint64_t v13 = v11 + 3;
  if (v13 >= v43)
  {
LABEL_30:

    swift_release(v3);
    return xdict;
  }

  uint64_t v12 = *(void *)(v42 + 8 * v13);
  if (v12)
  {
    uint64_t v5 = v13;
    goto LABEL_21;
  }

  while (1)
  {
    uint64_t v5 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      break;
    }
    if (v5 >= v43) {
      goto LABEL_30;
    }
    uint64_t v12 = *(void *)(v42 + 8 * v5);
    ++v13;
    if (v12) {
      goto LABEL_21;
    }
  }

void sub_100018034( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, uint64_t a30, char a31, uint64_t a32)
{
  __int128 v36 = *(void **)(v33 - 104);
  if (v36 == v32)
  {
    uint64_t v37 = 4LL;
    __int128 v36 = (void *)(v33 - 128);
  }

  else
  {
    if (!v36) {
      goto LABEL_6;
    }
    uint64_t v37 = 5LL;
  }

  (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_6:
  if (a2 == 1)
  {
    __cxa_begin_catch(exception_object);
    a31 = 0;
    a32 = 0LL;
    sub_1000041AC((uint64_t)&a31);
    sub_1000041AC((uint64_t)&a31);
    __cxa_end_catch();
    JUMPOUT(0x100017E7CLL);
  }

  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100018108(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void (**sub_100018144())(std::__shared_weak_count *__hidden this, const std::type_info *)
{
}

unsigned __int8 *sub_100018150(unsigned __int8 **a1)
{
  __n128 result = *a1;
  if (!result) {
    sub_1000D6DE4();
  }
  int v3 = *result;
  if (v3 == 1)
  {
    uint64_t v6 = a1[1];
    return v6 + 56;
  }

  else if (v3 == 2)
  {
    uint64_t v5 = *(unsigned __int8 **)(*((void *)result + 1) + 8LL);
    __n128 result = a1[2];
    if (result == v5) {
      sub_1000D6E34();
    }
  }

  else
  {
    if (!*result)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      sub_100005064(v8, "cannot get value");
      sub_100008C0C(214, (uint64_t)v8, exception);
    }

    if (a1[4])
    {
      uint64_t v4 = __cxa_allocate_exception(0x20uLL);
      sub_100005064(v8, "cannot get value");
      sub_100008C0C(214, (uint64_t)v8, v4);
    }
  }

  return result;
}

void sub_1000182B4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if ((v15 & 1) != 0) {
    __cxa_free_exception(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000182F4(unsigned __int8 *a1, unint64_t a2)
{
  int v4 = *a1;
  if (!*a1)
  {
    *a1 = 2;
    uint64_t v5 = operator new(0x18uLL);
    v5[1] = 0LL;
    v5[2] = 0LL;
    void *v5 = 0LL;
    *((void *)a1 + 1) = v5;
    sub_1000041AC((uint64_t)a1);
    int v4 = *a1;
  }

  if (v4 != 2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v13 = (char *)sub_10000528C((char *)a1);
    sub_100005064(&v16, v13);
    unint64_t v14 = std::string::insert(&v16, 0LL, "cannot use operator[] with a numeric argument with ");
    __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    std::string::size_type cap = v14->__r_.__value_.__l.__cap_;
    __int128 v17 = v15;
    v14->__r_.__value_.__l.__size_ = 0LL;
    v14->__r_.__value_.__l.__cap_ = 0LL;
    v14->__r_.__value_.__r.__words[0] = 0LL;
    sub_100005128(305, (uint64_t)&v17, exception);
  }

  uint64_t v6 = (uint64_t *)*((void *)a1 + 1);
  uint64_t v7 = *v6;
  unint64_t v8 = v6[1];
  unint64_t v9 = (uint64_t)(v8 - *v6) >> 4;
  if (v9 <= a2)
  {
    unint64_t v10 = a2 - v9 + 1;
    LOBYTE(v17) = 0;
    *((void *)&v17 + 1) = 0LL;
    sub_1000041AC((uint64_t)&v17);
    sub_1000041AC((uint64_t)&v17);
    sub_100021278(v6, v8, v10, (unint64_t)&v17);
    sub_1000041AC((uint64_t)&v17);
    sub_10000425C((uint64_t **)&v17 + 1, v17);
    uint64_t v7 = **((void **)a1 + 1);
  }

  return v7 + 16 * a2;
}

void sub_100018484( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
}

uint64_t sub_1000184F4@<X0>(uint64_t a1@<X0>, std::string::value_type *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 32) = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)a3 = v6;
  *(_OWORD *)(a3 + 16) = v6;
  uint64_t v7 = (unsigned __int8 **)sub_1000211B0((void *)a3, a1);
  uint64_t result = (uint64_t)sub_1000211FC(v7);
  if (*(_BYTE *)a1 == 1)
  {
    uint64_t result = sub_100021850(*(void *)(a1 + 8), a2);
    *(void *)(a3 + sub_100007004((uint64_t)v5 + 8) = result;
  }

  return result;
}

BOOL sub_10001855C(unsigned __int8 **a1, unsigned __int8 **a2)
{
  uint64_t v2 = *a1;
  if (*a1 != *a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_100005064(v8, "cannot compare iterators of different containers");
    sub_100008C0C(212, (uint64_t)v8, exception);
  }

  if (!v2) {
    sub_1000D6DBC();
  }
  int v3 = *v2;
  if (v3 == 2)
  {
    int v4 = a1[2];
    uint64_t v5 = a2[2];
  }

  else if (v3 == 1)
  {
    int v4 = a1[1];
    uint64_t v5 = a2[1];
  }

  else
  {
    int v4 = a1[4];
    uint64_t v5 = a2[4];
  }

  return v4 == v5;
}

void sub_100018658( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }

  else if (!v15)
  {
    goto LABEL_6;
  }

  __cxa_free_exception(v14);
  goto LABEL_6;
}

void sub_100018698(void **a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  else {
    int v3 = (uint64_t *)*a2;
  }
  id v4 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v3));
  objc_msgSend(v2, "subscribeToTrialNamespace:");
}

void sub_1000186F0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

unsigned __int8 **sub_100018704(unsigned __int8 **result)
{
  if (!*result) {
    sub_1000D7334();
  }
  int v1 = **result;
  if (v1 == 2)
  {
    result[2] += 16;
  }

  else if (v1 == 1)
  {
    uint64_t v2 = result[1];
    int v3 = (unsigned __int8 *)*((void *)v2 + 1);
    if (v3)
    {
      do
      {
        id v4 = v3;
        int v3 = *(unsigned __int8 **)v3;
      }

      while (v3);
    }

    else
    {
      do
      {
        id v4 = (unsigned __int8 *)*((void *)v2 + 2);
        BOOL v5 = *(void *)v4 == (void)v2;
        uint64_t v2 = v4;
      }

      while (!v5);
    }

    result[1] = v4;
  }

  else
  {
    ++result[4];
  }

  return result;
}

void *sub_100018788@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, void *a4@<X8>)
{
  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0LL;
  *(_BYTE *)a4 = 0;
  sub_1000041AC((uint64_t)a4);
  sub_1000041AC((uint64_t)a4);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 23);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  sub_1000123E4((uint64_t)v17, a2);
  if ((v8 & 0x80u) == 0LL) {
    uint64_t v11 = a1;
  }
  else {
    uint64_t v11 = v9;
  }
  if ((v8 & 0x80u) == 0LL) {
    uint64_t v12 = v8;
  }
  else {
    uint64_t v12 = v10;
  }
  sub_100018924(v11, v11 + v12, (uint64_t)v17, a3, (uint64_t)v19);
  sub_100018A0C((uint64_t)v19, 1, (uint64_t)a4);
  sub_10001A17C((uint64_t)&v21);
  uint64_t v13 = v20;
  if (v20 == v19)
  {
    uint64_t v14 = 4LL;
    uint64_t v13 = v19;
  }

  else
  {
    if (!v20) {
      goto LABEL_12;
    }
    uint64_t v14 = 5LL;
  }

  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_12:
  uint64_t result = v18;
  if (v18 == v17)
  {
    uint64_t v16 = 4LL;
    uint64_t result = v17;
  }

  else
  {
    if (!v18) {
      return result;
    }
    uint64_t v16 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v16))();
}

void sub_1000188C8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13)
{
  int v15 = a12;
  if (a12 == &a9)
  {
    uint64_t v16 = 4LL;
    int v15 = &a9;
  }

  else
  {
    if (!a12) {
      goto LABEL_6;
    }
    uint64_t v16 = 5LL;
  }

  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_6:
  sub_10000417C(v13);
  _Unwind_Resume(a1);
}

void *sub_100018924@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  *(void *)&__int128 v9 = a1;
  *((void *)&v9 + 1) = a2;
  sub_100018FE8((uint64_t)v10, a3);
  sub_10001904C(a5, &v9, (uint64_t)v10, a4);
  uint64_t result = v11;
  if (v11 == v10)
  {
    uint64_t v8 = 4LL;
    uint64_t result = v10;
  }

  else
  {
    if (!v11) {
      return result;
    }
    uint64_t v8 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void sub_1000189D4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  __int128 v17 = a15;
  if (a15 == v15)
  {
    uint64_t v18 = 4LL;
    __int128 v17 = &a12;
  }

  else
  {
    if (!a15) {
      goto LABEL_6;
    }
    uint64_t v18 = 5LL;
  }

  (*(void (**)(void))(*(void *)v17 + 8 * v18))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_100018A0C(uint64_t a1, int a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    unint64_t v45 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v6 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
    __int128 v43 = v6;
    __int128 v44 = v6;
    __int128 v41 = v6;
    __int128 v42 = v6;
    __int128 v39 = v6;
    __int128 v40 = v6;
    *(_OWORD *)&v38[16] = v6;
    *(_OWORD *)&v38[32] = v6;
    *(_OWORD *)__int128 v38 = v6;
    sub_1000123E4((uint64_t)v36, a1);
    sub_10001BFCC((uint64_t)v38, a3, (uint64_t)v36, *(_BYTE *)(a1 + 176));
    uint64_t v7 = v37;
    if (v37 == v36)
    {
      uint64_t v8 = 4LL;
      uint64_t v7 = v36;
    }

    else
    {
      if (!v37)
      {
LABEL_19:
        sub_10001A1BC(a1, (uint64_t *)v38);
        sub_1000041AC(a3);
        if (a2)
        {
          int v14 = sub_100019174(a1 + 40);
          *(_DWORD *)(a1 + 32) = v14;
          if (v14 != 15)
          {
            uint64_t v15 = *(void *)(a1 + 64);
            sub_10001ACAC(a1 + 40, &v35);
            __int128 v31 = *(_OWORD *)(a1 + 64);
            uint64_t v32 = *(void *)(a1 + 80);
            sub_100005064(v28, "value");
            sub_10001B04C(a1, 0xFu, (uint64_t)v28, &__p);
            sub_10001AD8C(101, (uint64_t *)&v31, (uint64_t)&__p, &v33);
            sub_10001AB68((uint64_t)v38, v15, (uint64_t)&v35, (uint64_t)&v33);
            v33.__vftable = (std::exception_vtbl *)off_100125390;
            std::runtime_error::~runtime_error(&v34);
            std::exception::~exception(&v33);
            if (v29 < 0) {
              operator delete(v28[0]);
            }
          }
        }

        if (BYTE8(v41))
        {
          v26[0] = 9;
          uint64_t v16 = (uint64_t **)&v27;
          uint64_t v27 = 0LL;
          sub_1000041AC((uint64_t)v26);
          sub_1000041AC((uint64_t)v26);
          unsigned __int8 v17 = *(_BYTE *)a3;
          *(_BYTE *)a3 = v26[0];
          v26[0] = v17;
          uint64_t v18 = *(void *)(a3 + 8);
          *(void *)(a3 + sub_100007004((uint64_t)v5 + 8) = v27;
          uint64_t v27 = v18;
          sub_1000041AC(a3);
          sub_1000041AC((uint64_t)v26);
          int v19 = v26[0];
        }

        else
        {
          if (*(_BYTE *)a3 != 9)
          {
LABEL_32:
            sub_10001F75C((uint64_t)v38);
            return;
          }

          v24[0] = 0;
          uint64_t v16 = (uint64_t **)&v25;
          uint64_t v25 = 0LL;
          sub_1000041AC((uint64_t)v24);
          sub_1000041AC((uint64_t)v24);
          sub_1000041AC((uint64_t)v24);
          unsigned __int8 v20 = *(_BYTE *)a3;
          *(_BYTE *)a3 = v24[0];
          v24[0] = v20;
          uint64_t v21 = *(void *)(a3 + 8);
          *(void *)(a3 + sub_100007004((uint64_t)v5 + 8) = v25;
          uint64_t v25 = v21;
          sub_1000041AC(a3);
          sub_1000041AC((uint64_t)v24);
          int v19 = v24[0];
        }

        sub_10000425C(v16, v19);
        goto LABEL_32;
      }

      uint64_t v8 = 5LL;
    }

    (*(void (**)(void))(*v7 + 8 * v8))();
    goto LABEL_19;
  }

  char v9 = *(_BYTE *)(a1 + 176);
  *(void *)&v38[40] = 0xAAAAAAAAAAAAAA00LL;
  *(void *)__int128 v38 = a3;
  memset(&v38[8], 0, 32);
  v38[41] = v9;
  sub_10001B4BC(a1, (uint64_t *)v38, a3);
  sub_1000041AC(a3);
  if (a2)
  {
    int v10 = sub_100019174(a1 + 40);
    *(_DWORD *)(a1 + 32) = v10;
    if (v10 != 15)
    {
      uint64_t v11 = *(void *)(a1 + 64);
      sub_10001ACAC(a1 + 40, &v35);
      __int128 v31 = *(_OWORD *)(a1 + 64);
      uint64_t v32 = *(void *)(a1 + 80);
      sub_100005064(v28, "value");
      sub_10001B04C(a1, 0xFu, (uint64_t)v28, &__p);
      sub_10001AD8C(101, (uint64_t *)&v31, (uint64_t)&__p, &v33);
      sub_10001BE88((uint64_t)v38, v11, (uint64_t)&v35, (uint64_t)&v33);
      v33.__vftable = (std::exception_vtbl *)off_100125390;
      std::runtime_error::~runtime_error(&v34);
      std::exception::~exception(&v33);
      if (v29 < 0) {
        operator delete(v28[0]);
      }
    }
  }

  if (v38[40])
  {
    v22[0] = 9;
    unint64_t v23 = 0LL;
    sub_1000041AC((uint64_t)v22);
    sub_1000041AC((uint64_t)v22);
    unsigned __int8 v12 = *(_BYTE *)a3;
    *(_BYTE *)a3 = v22[0];
    v22[0] = v12;
    uint64_t v13 = *(uint64_t **)(a3 + 8);
    *(void *)(a3 + sub_100007004((uint64_t)v5 + 8) = v23;
    unint64_t v23 = v13;
    sub_1000041AC(a3);
    sub_1000041AC((uint64_t)v22);
    sub_10000425C(&v23, v22[0]);
  }

  if (*(void *)&v38[8])
  {
    *(void *)&v38[16] = *(void *)&v38[8];
    operator delete(*(void **)&v38[8]);
  }

void sub_100018E4C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *__p, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, std::exception a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, void *a36, uint64_t a37, int a38, __int16 a39, char a40, char a41, char a42, uint64_t a43, uint64_t a44, uint64_t a45)
{
  a31.__vftable = (std::exception_vtbl *)off_100125390;
  std::runtime_error::~runtime_error(v45 + 1);
  std::exception::~exception(&a31);
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  time_t v48 = *(void **)(v46 - 200);
  if (v48)
  {
    *(void *)(v46 - 192) = v48;
    operator delete(v48);
  }

  _Unwind_Resume(a1);
}

void *sub_100018F94(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = a1;
    goto LABEL_5;
  }

  if (v2)
  {
    uint64_t v3 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }

  return a1;
}

uint64_t sub_100018FE8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 24) = v4;
  }

  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }

  *uint64_t v3 = 0LL;
  return a1;
}

uint64_t sub_10001904C(uint64_t a1, _OWORD *a2, uint64_t a3, char a4)
{
  uint64_t v7 = sub_1000123E4(a1, a3);
  *(_DWORD *)(v7 + 32) = 0;
  uint64_t v8 = v7 + 40;
  *(_OWORD *)(v7 + 40) = *a2;
  *(_DWORD *)(v7 + 56) = -1;
  *(_BYTE *)(v7 + 60) = 0;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_OWORD *)(v7 + 96) = 0u;
  *(_OWORD *)(v7 + 112) = 0u;
  *(void *)(v7 + 12sub_100007004((uint64_t)v5 + 8) = 0LL;
  *(void *)(v7 + 136) = "";
  *(void *)(v7 + 152) = 0LL;
  *(void *)(v7 + 160) = 0LL;
  *(void *)(v7 + 144) = 0LL;
  *(_DWORD *)(a1 + 16sub_100007004((uint64_t)v5 + 8) = sub_10001911C();
  *(_BYTE *)(a1 + 176) = a4;
  *(_DWORD *)(a1 + 32) = sub_100019174(v8);
  return a1;
}

void sub_1000190D8(_Unwind_Exception *a1)
{
  uint64_t v4 = (void *)v1[3];
  if (v4 == v1)
  {
    uint64_t v5 = 4LL;
  }

  else
  {
    if (!v4) {
      goto LABEL_6;
    }
    uint64_t v5 = 5LL;
    int v1 = (void *)v1[3];
  }

  (*(void (**)(void *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(a1);
}

uint64_t sub_10001911C()
{
  v0 = localeconv();
  if (!v0) {
    __assert_rtn("get_decimal_point", "lexer.hpp", 136, "loc != nullptr");
  }
  else {
    return 46;
  }
}

uint64_t sub_100019174(uint64_t a1)
{
  if (!*(void *)(a1 + 24) && !sub_100019394((unsigned __int8 **)a1))
  {
    uint64_t v8 = "invalid BOM; must be 0xEF 0xBB 0xBF if given";
    goto LABEL_19;
  }

  while (2)
  {
    while (1)
    {
      sub_1000193F4((unsigned __int8 **)a1);
      int v2 = *(_DWORD *)(a1 + 16);
      if (v2 > 31) {
        break;
      }
      if ((v2 - 9) >= 2 && v2 != 13)
      {
        goto LABEL_36;
      }
    }

    if (v2 > 90)
    {
      if (v2 <= 109)
      {
        if (v2 == 91) {
          return 8LL;
        }
        if (v2 == 93) {
          return 10LL;
        }
        if (v2 != 102) {
          goto LABEL_36;
        }
        qmemcpy(v9, "false", 5);
        uint64_t v5 = a1;
        unint64_t v6 = 5LL;
        uint64_t v7 = 2LL;
        return sub_100019558(v5, (unsigned __int8 *)v9, v6, v7);
      }

      if (v2 <= 122)
      {
        if (v2 == 110)
        {
          v9[0] = 1819047278;
          uint64_t v5 = a1;
          unint64_t v6 = 4LL;
          uint64_t v7 = 3LL;
        }

        else
        {
          if (v2 != 116) {
            goto LABEL_36;
          }
          v9[0] = 1702195828;
          uint64_t v5 = a1;
          unint64_t v6 = 4LL;
          uint64_t v7 = 1LL;
        }

        return sub_100019558(v5, (unsigned __int8 *)v9, v6, v7);
      }

      if (v2 == 123) {
        return 9LL;
      }
      if (v2 == 125) {
        return 11LL;
      }
LABEL_36:
      uint64_t v8 = "invalid literal";
LABEL_19:
      *(void *)(a1 + 96) = v8;
      return 14LL;
    }

    switch(v2)
    {
      case ' ':
        continue;
      case '""':
        uint64_t result = sub_1000195D8(a1);
        break;
      case ',':
        uint64_t result = 13LL;
        break;
      case '-':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        uint64_t result = sub_100019AC0(a1);
        break;
      case ':':
        uint64_t result = 12LL;
        break;
      default:
        goto LABEL_36;
    }

    return result;
  }

BOOL sub_100019394(unsigned __int8 **a1)
{
  if (sub_1000193F4(a1) == 239)
  {
    return sub_1000193F4(a1) == 187 && sub_1000193F4(a1) == 191;
  }

  else
  {
    sub_100019EB0((uint64_t)a1);
    return 1LL;
  }

uint64_t sub_1000193F4(unsigned __int8 **a1)
{
  *(int64x2_t *)(a1 + 3) = vaddq_s64(*(int64x2_t *)(a1 + 3), vdupq_n_s64(1uLL));
  if (*((_BYTE *)a1 + 20))
  {
    *((_BYTE *)a1 + 20) = 0;
    int v2 = *((_DWORD *)a1 + 4);
  }

  else
  {
    uint64_t v3 = *a1;
    if (*a1 == a1[1])
    {
      int v2 = -1;
    }

    else
    {
      int v2 = *v3;
      *a1 = v3 + 1;
    }

    *((_DWORD *)a1 + 4) = v2;
  }

  if (v2 == -1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v5 = a1[7];
  unint64_t v4 = (unint64_t)a1[8];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = a1 + 6;
    unint64_t v8 = (unint64_t)a1[6];
    char v9 = &v5[-v8];
    uint64_t v10 = (uint64_t)&v5[-v8 + 1];
    if (v10 < 0) {
      sub_1000046F8();
    }
    unint64_t v11 = v4 - v8;
    if (2 * v11 > v10) {
      uint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v12 = v10;
    }
    if (v12) {
      uint64_t v13 = (unsigned __int8 *)operator new(v12);
    }
    else {
      uint64_t v13 = 0LL;
    }
    int v14 = &v13[v12];
    v9[(void)v13] = v2;
    uint64_t v6 = (uint64_t)&v9[(void)v13 + 1];
    if (v5 == (unsigned __int8 *)v8)
    {
      uint64_t v13 = &v9[(void)v13];
    }

    else
    {
      uint64_t v15 = &v5[~v8];
      do
      {
        unsigned __int8 v16 = *--v5;
        (v15--)[(void)v13] = v16;
      }

      while (v5 != (unsigned __int8 *)v8);
      uint64_t v5 = *v7;
    }

    a1[6] = v13;
    a1[7] = (unsigned __int8 *)v6;
    a1[8] = v14;
    if (v5) {
      operator delete(v5);
    }
  }

  else
  {
    unsigned __int8 *v5 = v2;
    uint64_t v6 = (uint64_t)(v5 + 1);
  }

  a1[7] = (unsigned __int8 *)v6;
  uint64_t result = *((unsigned int *)a1 + 4);
  if ((_DWORD)result == 10)
  {
    uint64_t v18 = (uint64_t)(a1[5] + 1);
    a1[4] = 0LL;
    a1[5] = (unsigned __int8 *)v18;
  }

  return result;
}

uint64_t sub_100019558(uint64_t a1, unsigned __int8 *a2, unint64_t a3, uint64_t a4)
{
  if (a3 >= 2)
  {
    unint64_t v6 = a3 - 1;
    uint64_t v7 = a2 + 1;
    while (1)
    {
      unsigned __int8 v8 = sub_1000193F4((unsigned __int8 **)a1);
      int v9 = *v7++;
      if (v9 != v8) {
        break;
      }
      if (!--v6) {
        return a4;
      }
    }

    *(void *)(a1 + 96) = "invalid literal";
    return 14LL;
  }

  return a4;
}

uint64_t sub_1000195D8(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 16) != 34) {
    sub_1000D73AC();
  }
  while (2)
  {
    while (2)
    {
      int v2 = sub_1000193F4((unsigned __int8 **)a1) + 1;
      uint64_t result = 4LL;
      unint64_t v4 = "invalid string: missing closing quote";
      switch(v2)
      {
        case 0:
          goto LABEL_82;
        case 1:
          unint64_t v4 = "invalid string: control character U+0000 (NUL) must be escaped to \\u0000";
          goto LABEL_82;
        case 2:
          unint64_t v4 = "invalid string: control character U+0001 (SOH) must be escaped to \\u0001";
          goto LABEL_82;
        case 3:
          unint64_t v4 = "invalid string: control character U+0002 (STX) must be escaped to \\u0002";
          goto LABEL_82;
        case 4:
          unint64_t v4 = "invalid string: control character U+0003 (ETX) must be escaped to \\u0003";
          goto LABEL_82;
        case 5:
          unint64_t v4 = "invalid string: control character U+0004 (EOT) must be escaped to \\u0004";
          goto LABEL_82;
        case 6:
          unint64_t v4 = "invalid string: control character U+0005 (ENQ) must be escaped to \\u0005";
          goto LABEL_82;
        case 7:
          unint64_t v4 = "invalid string: control character U+0006 (ACK) must be escaped to \\u0006";
          goto LABEL_82;
        case 8:
          unint64_t v4 = "invalid string: control character U+0007 (BEL) must be escaped to \\u0007";
          goto LABEL_82;
        case 9:
          unint64_t v4 = "invalid string: control character U+0008 (BS) must be escaped to \\u0008 or \\b";
          goto LABEL_82;
        case 10:
          unint64_t v4 = "invalid string: control character U+0009 (HT) must be escaped to \\u0009 or \\t";
          goto LABEL_82;
        case 11:
          unint64_t v4 = "invalid string: control character U+000A (LF) must be escaped to \\u000A or \\n";
          goto LABEL_82;
        case 12:
          unint64_t v4 = "invalid string: control character U+000B (VT) must be escaped to \\u000B";
          goto LABEL_82;
        case 13:
          unint64_t v4 = "invalid string: control character U+000C (FF) must be escaped to \\u000C or \\f";
          goto LABEL_82;
        case 14:
          unint64_t v4 = "invalid string: control character U+000D (CR) must be escaped to \\u000D or \\r";
          goto LABEL_82;
        case 15:
          unint64_t v4 = "invalid string: control character U+000E (SO) must be escaped to \\u000E";
          goto LABEL_82;
        case 16:
          unint64_t v4 = "invalid string: control character U+000F (SI) must be escaped to \\u000F";
          goto LABEL_82;
        case 17:
          unint64_t v4 = "invalid string: control character U+0010 (DLE) must be escaped to \\u0010";
          goto LABEL_82;
        case 18:
          unint64_t v4 = "invalid string: control character U+0011 (DC1) must be escaped to \\u0011";
          goto LABEL_82;
        case 19:
          unint64_t v4 = "invalid string: control character U+0012 (DC2) must be escaped to \\u0012";
          goto LABEL_82;
        case 20:
          unint64_t v4 = "invalid string: control character U+0013 (DC3) must be escaped to \\u0013";
          goto LABEL_82;
        case 21:
          unint64_t v4 = "invalid string: control character U+0014 (DC4) must be escaped to \\u0014";
          goto LABEL_82;
        case 22:
          unint64_t v4 = "invalid string: control character U+0015 (NAK) must be escaped to \\u0015";
          goto LABEL_82;
        case 23:
          unint64_t v4 = "invalid string: control character U+0016 (SYN) must be escaped to \\u0016";
          goto LABEL_82;
        case 24:
          unint64_t v4 = "invalid string: control character U+0017 (ETB) must be escaped to \\u0017";
          goto LABEL_82;
        case 25:
          unint64_t v4 = "invalid string: control character U+0018 (CAN) must be escaped to \\u0018";
          goto LABEL_82;
        case 26:
          unint64_t v4 = "invalid string: control character U+0019 (EM) must be escaped to \\u0019";
          goto LABEL_82;
        case 27:
          unint64_t v4 = "invalid string: control character U+001A (SUB) must be escaped to \\u001A";
          goto LABEL_82;
        case 28:
          unint64_t v4 = "invalid string: control character U+001B (ESC) must be escaped to \\u001B";
          goto LABEL_82;
        case 29:
          unint64_t v4 = "invalid string: control character U+001C (FS) must be escaped to \\u001C";
          goto LABEL_82;
        case 30:
          unint64_t v4 = "invalid string: control character U+001D (GS) must be escaped to \\u001D";
          goto LABEL_82;
        case 31:
          unint64_t v4 = "invalid string: control character U+001E (RS) must be escaped to \\u001E";
          goto LABEL_82;
        case 32:
          unint64_t v4 = "invalid string: control character U+001F (US) must be escaped to \\u001F";
          goto LABEL_82;
        case 33:
        case 34:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
          int v5 = *(_DWORD *)(a1 + 16);
          goto LABEL_4;
        case 35:
          return result;
        case 93:
          int v10 = sub_1000193F4((unsigned __int8 **)a1);
          unint64_t v4 = "invalid string: forbidden character after backslash";
          if (v10 <= 97)
          {
            switch(v10)
            {
              case '""':
                LOBYTE(v5) = 34;
                break;
              case '/':
                LOBYTE(v5) = 47;
                break;
              case '\\':
                LOBYTE(v5) = 92;
                break;
              default:
                goto LABEL_82;
            }

            goto LABEL_4;
          }

          break;
        case 195:
        case 196:
        case 197:
        case 198:
        case 199:
        case 200:
        case 201:
        case 202:
        case 203:
        case 204:
        case 205:
        case 206:
        case 207:
        case 208:
        case 209:
        case 210:
        case 211:
        case 212:
        case 213:
        case 214:
        case 215:
        case 216:
        case 217:
        case 218:
        case 219:
        case 220:
        case 221:
        case 222:
        case 223:
        case 224:
          *(void *)&__int128 v14 = 0xBF00000080LL;
          unint64_t v6 = (std::string *)a1;
          unint64_t v7 = 2LL;
          goto LABEL_19;
        case 225:
          __int128 v8 = xmmword_1000F20E0;
          goto LABEL_7;
        case 226:
        case 227:
        case 228:
        case 229:
        case 230:
        case 231:
        case 232:
        case 233:
        case 234:
        case 235:
        case 236:
        case 237:
        case 239:
        case 240:
          __int128 v8 = xmmword_1000F20D0;
          goto LABEL_7;
        case 238:
          __int128 v8 = xmmword_1000F20C0;
LABEL_7:
          __int128 v14 = v8;
          unint64_t v6 = (std::string *)a1;
          unint64_t v7 = 4LL;
          goto LABEL_19;
        case 241:
          uint64_t v15 = 0xBF00000080LL;
          int v9 = &xmmword_1000F1FC0;
          goto LABEL_18;
        case 242:
        case 243:
        case 244:
          uint64_t v15 = 0xBF00000080LL;
          int v9 = &xmmword_1000F1FD8;
          goto LABEL_18;
        case 245:
          uint64_t v15 = 0xBF00000080LL;
          int v9 = &xmmword_1000F1FF0;
LABEL_18:
          __int128 v14 = *v9;
          unint64_t v6 = (std::string *)a1;
          unint64_t v7 = 6LL;
LABEL_19:
          if ((sub_10001A0C8(v6, &v14, v7) & 1) == 0) {
            return 14LL;
          }
          continue;
        default:
          unint64_t v4 = "invalid string: ill-formed UTF-8 byte";
          goto LABEL_82;
      }

      break;
    }

    switch(v10)
    {
      case 'n':
        LOBYTE(v5) = 10;
        goto LABEL_4;
      case 'o':
      case 'p':
      case 'q':
      case 's':
        goto LABEL_82;
      case 'r':
        LOBYTE(v5) = 13;
        goto LABEL_4;
      case 't':
        LOBYTE(v5) = 9;
        goto LABEL_4;
      case 'u':
        unsigned int v11 = sub_100019FD8(a1);
        if (v11 == -1) {
          goto LABEL_85;
        }
        unsigned int v12 = v11;
        if ((v11 & 0xFFFFFC00) != 0xD800)
        {
          if ((v11 & 0xFFFFFC00) == 0xDC00)
          {
            unint64_t v4 = "invalid string: surrogate U+DC00..U+DFFF must follow U+D800..U+DBFF";
            goto LABEL_82;
          }

          if (v11 >= 0x110000) {
            sub_1000D7384();
          }
          if (v11 > 0x7F)
          {
            if (v11 <= 0x7FF)
            {
              std::string::push_back((std::string *)(a1 + 72), (v11 >> 6) | 0xC0);
              goto LABEL_39;
            }

            if (!HIWORD(v11))
            {
              std::string::push_back((std::string *)(a1 + 72), (v11 >> 12) | 0xE0);
              goto LABEL_38;
            }

LABEL_37:
            std::string::push_back((std::string *)(a1 + 72), (v12 >> 18) | 0xF0);
            std::string::push_back((std::string *)(a1 + 72), (v12 >> 12) & 0x3F | 0x80);
LABEL_38:
            std::string::push_back((std::string *)(a1 + 72), (v12 >> 6) & 0x3F | 0x80);
LABEL_39:
            LOBYTE(v5) = v12 & 0x3F | 0x80;
            goto LABEL_4;
          }

          LOBYTE(v5) = v11;
LABEL_4:
          std::string::push_back((std::string *)(a1 + 72), v5);
          continue;
        }

        if (sub_1000193F4((unsigned __int8 **)a1) != 92
          || sub_1000193F4((unsigned __int8 **)a1) != 117)
        {
LABEL_86:
          unint64_t v4 = "invalid string: surrogate U+D800..U+DBFF must be followed by U+DC00..U+DFFF";
          goto LABEL_82;
        }

        unsigned int v13 = sub_100019FD8(a1);
        if (v13 != -1)
        {
          if (v13 >> 10 != 55) {
            goto LABEL_86;
          }
          unsigned int v12 = v13 + (v12 << 10) - 56613888;
          goto LABEL_37;
        }

            std::string::push_back((std::string *)(a1 + 72), (v12 >> 18) | 0xF0);
            std::string::push_back((std::string *)(a1 + 72), (v12 >> 12) & 0x3F | 0x80);
LABEL_38:
            std::string::push_back((std::string *)(a1 + 72), (v12 >> 6) & 0x3F | 0x80);
LABEL_39:
            LOBYTE(v5) = v12 & 0x3F | 0x80;
            goto LABEL_4;
          }

          LOBYTE(v5) = v11;
LABEL_4:
          std::string::push_back((std::string *)(a1 + 72), v5);
          continue;
        }

        if (sub_1000193F4((unsigned __int8 **)a1) != 92
          || sub_1000193F4((unsigned __int8 **)a1) != 117)
        {
LABEL_86:
          unint64_t v4 = "invalid string: surrogate U+D800..U+DBFF must be followed by U+DC00..U+DFFF";
          goto LABEL_82;
        }

        unsigned int v13 = sub_100019FD8(a1);
        if (v13 != -1)
        {
          if (v13 >> 10 != 55) {
            goto LABEL_86;
          }
          unsigned int v12 = v13 + (v12 << 10) - 56613888;
          goto LABEL_37;
        }

            std::string::push_back((std::string *)(a1 + 80), (v14 >> 18) | 0xF0);
            std::string::push_back((std::string *)(a1 + 80), (v14 >> 12) & 0x3F | 0x80);
LABEL_38:
            std::string::push_back((std::string *)(a1 + 80), (v14 >> 6) & 0x3F | 0x80);
LABEL_39:
            int v5 = v14 & 0x3F | 0x80;
            goto LABEL_4;
          }

          int v5 = v13;
LABEL_4:
          std::string::push_back((std::string *)(a1 + 80), v5);
          continue;
        }

        if (sub_100087A48((unsigned __int8 **)a1) != 92 || sub_100087A48((unsigned __int8 **)a1) != 117)
        {
LABEL_86:
          unint64_t v4 = "invalid string: surrogate U+D800..U+DBFF must be followed by U+DC00..U+DFFF";
          goto LABEL_82;
        }

        uint64_t v15 = sub_100088614(a1);
        if (v15 != -1)
        {
          if (v15 >> 10 != 55) {
            goto LABEL_86;
          }
          __int128 v14 = v15 + (v14 << 10) - 56613888;
          goto LABEL_37;
        }

  unsigned __int8 v20 = (os_log_s *)(id)qword_1001318E8;
  if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
  {
    sub_100006200(*v1, -1, 0x20u, 0LL, 1, __p);
    if ((SBYTE7(v23) & 0x80u) == 0) {
      uint64_t v21 = __p;
    }
    else {
      uint64_t v21 = (void **)__p[0];
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v21;
    _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "[DaemonState] set local info: %s",  (uint8_t *)&buf,  0xCu);
    if (SBYTE7(v23) < 0) {
      operator delete(__p[0]);
    }
  }
}

  __break(1u);
LABEL_38:
  swift_once(&qword_100131AB8, sub_1000A53D4);
LABEL_32:
  std::runtime_error v34 = type metadata accessor for Logger(0LL);
  std::string v35 = sub_1000A5488(v34, (uint64_t)qword_100131B58);
  __int128 v36 = (os_log_s *)Logger.logObject.getter(v35);
  uint64_t v37 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v36, v37))
  {
    __int128 v38 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)__int128 v38 = 0;
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "Invalid parameter type. Expected a set of strings.", v38, 2u);
    swift_slowDealloc(v38, -1LL, -1LL);
  }

  else
  {
  }

  return xdict;
}

LABEL_85:
        unint64_t v4 = "invalid string: '\\u' must be followed by 4 hex digits";
LABEL_82:
        *(void *)(a1 + 96) = v4;
        return 14LL;
      default:
        if (v10 == 98)
        {
          LOBYTE(v5) = 8;
        }

        else
        {
          if (v10 != 102) {
            goto LABEL_82;
          }
          LOBYTE(v5) = 12;
        }

        goto LABEL_4;
    }
  }

        unint64_t v4 = "invalid string: '\\u' must be followed by 4 hex digits";
LABEL_82:
        *(void *)(a1 + 96) = v4;
        return 14LL;
      default:
        if (v10 == 98)
        {
          LOBYTE(v5) = 8;
        }

        else
        {
          if (v10 != 102) {
            goto LABEL_82;
          }
          LOBYTE(v5) = 12;
        }

        goto LABEL_4;
    }
  }

        unint64_t v4 = "invalid string: '\\u' must be followed by 4 hex digits";
LABEL_82:
        *(void *)(a1 + 104) = v4;
        return 14LL;
      default:
        if (v11 == 98)
        {
          int v5 = 8;
        }

        else
        {
          if (v11 != 102) {
            goto LABEL_82;
          }
          int v5 = 12;
        }

        goto LABEL_4;
    }
  }

uint64_t sub_100019AC0(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if ((v2 - 49) >= 9)
  {
    if (v2 == 48)
    {
      std::string::push_back((std::string *)(a1 + 72), 48);
      int v4 = 5;
    }

    else
    {
      if (v2 != 45) {
        sub_1000D73D4();
      }
      uint64_t v3 = (std::string *)(a1 + 72);
      std::string::push_back((std::string *)(a1 + 72), 45);
      int v13 = sub_1000193F4((unsigned __int8 **)a1);
      if ((v13 - 49) < 9)
      {
        int v2 = *(_DWORD *)(a1 + 16);
        int v4 = 6;
        goto LABEL_3;
      }

      if (v13 != 48)
      {
        __int128 v14 = "invalid number; expected digit after '-'";
        goto LABEL_52;
      }

      std::string::push_back((std::string *)(a1 + 72), *(_BYTE *)(a1 + 16));
      int v4 = 6;
    }

    int v15 = sub_1000193F4((unsigned __int8 **)a1);
    if (v15 == 101 || v15 == 69)
    {
      int v5 = (std::string *)(a1 + 72);
      goto LABEL_9;
    }

    if (v15 != 46) {
      goto LABEL_40;
    }
    int v5 = (std::string *)(a1 + 72);
LABEL_34:
    std::string::push_back(v5, *(_BYTE *)(a1 + 128));
    if (sub_1000193F4((unsigned __int8 **)a1) - 48 > 9)
    {
      __int128 v14 = "invalid number; expected digit after '.'";
      goto LABEL_52;
    }

    int v5 = (std::string *)(a1 + 72);
    do
    {
      std::string::push_back((std::string *)(a1 + 72), *(_BYTE *)(a1 + 16));
      int v16 = sub_1000193F4((unsigned __int8 **)a1);
    }

    while ((v16 - 48) < 0xA);
    if (v16 != 101 && v16 != 69)
    {
LABEL_13:
      sub_100019EB0(a1);
      uint64_t v25 = 0LL;
      *__error() = 0;
      goto LABEL_14;
    }

LABEL_52:
    *(void *)(a1 + 96) = v14;
    return 14LL;
  }

  uint64_t v3 = (std::string *)(a1 + 72);
  int v4 = 5;
LABEL_3:
  std::string::push_back(v3, v2);
  int v5 = (std::string *)(a1 + 72);
  while (1)
  {
    int v6 = sub_1000193F4((unsigned __int8 **)a1);
    std::string::push_back((std::string *)(a1 + 72), *(_BYTE *)(a1 + 16));
  }

  if (v6 == 46) {
    goto LABEL_34;
  }
  if (v6 == 69 || v6 == 101) {
    goto LABEL_9;
  }
LABEL_40:
  sub_100019EB0(a1);
  uint64_t v25 = 0LL;
  *__error() = 0;
  if (v4 == 6)
  {
    uint64_t v21 = (const char **)(a1 + 72);
    uint64_t v22 = (const char *)(a1 + 72);
    uint64_t v23 = strtoll(v22, &v25, 10);
    if (*(char *)(a1 + 95) < 0)
    {
      uint64_t v21 = *(const char ***)(a1 + 72);
      uint64_t v24 = *(void *)(a1 + 80);
    }

    else
    {
      uint64_t v24 = *(unsigned __int8 *)(a1 + 95);
    }

    if (!*__error())
    {
      *(void *)(a1 + 104) = v23;
      return 6LL;
    }
  }

  else
  {
    unsigned __int8 v17 = (const char **)(a1 + 72);
    uint64_t v18 = (const char *)(a1 + 72);
    unint64_t v19 = strtoull(v18, &v25, 10);
    if (*(char *)(a1 + 95) < 0)
    {
      unsigned __int8 v17 = *(const char ***)(a1 + 72);
      uint64_t v20 = *(void *)(a1 + 80);
    }

    else
    {
      uint64_t v20 = *(unsigned __int8 *)(a1 + 95);
    }

    if (!*__error())
    {
      *(void *)(a1 + 112) = v19;
      return 5LL;
    }
  }

    *(void *)(a1 + 96) = v14;
    return 14LL;
  }

  uint64_t v3 = (std::string *)(a1 + 72);
  int v4 = 5;
LABEL_3:
  std::string::push_back(v3, v2);
  int v5 = (std::string *)(a1 + 72);
  while (1)
  {
    int v6 = sub_1000193F4((unsigned __int8 **)a1);
    std::string::push_back((std::string *)(a1 + 72), *(_BYTE *)(a1 + 16));
  }

  if (v6 == 46) {
    goto LABEL_34;
  }
  if (v6 == 69 || v6 == 101) {
    goto LABEL_9;
  }
LABEL_40:
  sub_100019EB0(a1);
  uint64_t v25 = 0LL;
  *__error() = 0;
  if (v4 == 6)
  {
    uint64_t v21 = (const char **)(a1 + 72);
    uint64_t v22 = (const char *)(a1 + 72);
    uint64_t v23 = strtoll(v22, &v25, 10);
    if (*(char *)(a1 + 95) < 0)
    {
      uint64_t v21 = *(const char ***)(a1 + 72);
      uint64_t v24 = *(void *)(a1 + 80);
    }

    else
    {
      uint64_t v24 = *(unsigned __int8 *)(a1 + 95);
    }

    if (!*__error())
    {
      *(void *)(a1 + 104) = v23;
      return 6LL;
    }
  }

  else
  {
    unsigned __int8 v17 = (const char **)(a1 + 72);
    uint64_t v18 = (const char *)(a1 + 72);
    unint64_t v19 = strtoull(v18, &v25, 10);
    if (*(char *)(a1 + 95) < 0)
    {
      unsigned __int8 v17 = *(const char ***)(a1 + 72);
      uint64_t v20 = *(void *)(a1 + 80);
    }

    else
    {
      uint64_t v20 = *(unsigned __int8 *)(a1 + 95);
    }

    if (!*__error())
    {
      *(void *)(a1 + 112) = v19;
      return 5LL;
    }
  }

    *(void *)(a1 + 104) = v14;
    return 14LL;
  }

  uint64_t v3 = (std::string *)(a1 + 80);
  int v4 = 5;
LABEL_3:
  std::string::push_back(v3, v2);
  int v5 = (std::string *)(a1 + 80);
  while (1)
  {
    int v6 = sub_100087A48((unsigned __int8 **)a1);
    std::string::push_back((std::string *)(a1 + 80), *(_BYTE *)(a1 + 16));
  }

  if (v6 == 46) {
    goto LABEL_34;
  }
  if (v6 == 69 || v6 == 101) {
    goto LABEL_9;
  }
LABEL_40:
  sub_1000884EC(a1);
  uint64_t v25 = 0LL;
  *__error() = 0;
  if (v4 == 6)
  {
    uint64_t v21 = (const char **)(a1 + 80);
    uint64_t v22 = (const char *)(a1 + 80);
    uint64_t v23 = strtoll(v22, &v25, 10);
    if (*(char *)(a1 + 103) < 0)
    {
      uint64_t v21 = *(const char ***)(a1 + 80);
      uint64_t v24 = *(void *)(a1 + 88);
    }

    else
    {
      uint64_t v24 = *(unsigned __int8 *)(a1 + 103);
    }

    if (!*__error())
    {
      *(void *)(a1 + 112) = v23;
      return 6LL;
    }
  }

  else
  {
    unsigned __int8 v17 = (const char **)(a1 + 80);
    uint64_t v18 = (const char *)(a1 + 80);
    unint64_t v19 = strtoull(v18, &v25, 10);
    if (*(char *)(a1 + 103) < 0)
    {
      unsigned __int8 v17 = *(const char ***)(a1 + 80);
      uint64_t v20 = *(void *)(a1 + 88);
    }

    else
    {
      uint64_t v20 = *(unsigned __int8 *)(a1 + 103);
    }

    if (!*__error())
    {
      *(void *)(a1 + 120) = v19;
      return 5LL;
    }
  }

      uint64_t v22 = 0LL;
LABEL_53:
      uint64_t v37 = 0xAAAAAAAAAAAAAAAALL;
      __int128 v38 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
      (*(void (**)(unint64_t *__return_ptr))(**(void **)(a1 + 64) + 96LL))(&v37);
      uint64_t v24 = (os_log_s *)qword_100131928;
      if (os_log_type_enabled((os_log_t)qword_100131928, OS_LOG_TYPE_DEFAULT))
      {
        sub_100006200((uint64_t)&v37, -1, 0x20u, 0LL, 1, &__p);
        uint64_t v25 = SHIBYTE(v46) >= 0 ? &__p : (__int128 *)__p;
        *(_DWORD *)buf = 136446210;
        *(void *)__darwin_time_t v52 = v25;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "[Configurer] == Next config: %{public}s",  buf,  0xCu);
        if (SHIBYTE(v46) < 0) {
          operator delete((void *)__p);
        }
      }

      std::string v35 = 0xAAAAAAAAAAAAAAAALL;
      __int128 v36 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
      sub_10002BC40((uint64_t)&__p, "changed");
      uint64_t v46 = &__p;
      unsigned __int8 v47 = 1;
      v48[0] = 4;
      v49[0] = v22;
      sub_1000041AC((uint64_t)v48);
      sub_1000041AC((uint64_t)v48);
      v49[1] = v48;
      unsigned __int8 v50 = 1;
      sub_10000BA40((uint64_t)buf, (uint64_t)&__p, 2LL, 1, 2);
      unint64_t v53 = buf;
      unsigned __int8 v54 = 1;
      sub_10000BA40((uint64_t)&v35, (uint64_t)buf, 1LL, 0, 1);
      sub_1000041AC((uint64_t)buf);
      sub_10000425C((uint64_t **)&v52[4], buf[0]);
      for (uint64_t i = 0LL; i != -8; i -= 4LL)
      {
        sub_1000041AC((uint64_t)&v48[i * 8]);
        sub_10000425C((uint64_t **)&v49[i], v48[i * 8]);
      }

      uint64_t v27 = *(void *)(a1 + 80);
      sub_100005064(&__p, "com.apple.coreanalytics.meta.ConfigurationComplete");
      sub_1000723B4(&__p, (uint64_t)&v35, buf);
      (*(void (**)(uint64_t, uint8_t *))(*(void *)v27 + 24LL))(v27, buf);
      unint64_t v28 = *(std::__shared_weak_count **)&v52[4];
      if (*(void *)&v52[4])
      {
        char v29 = (unint64_t *)(*(void *)&v52[4] + 8LL);
        do
          unint64_t v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }

      if (SHIBYTE(v46) < 0) {
        operator delete((void *)__p);
      }
      sub_1000041AC((uint64_t)&v35);
      sub_10000425C(&v36, v35);
      sub_1000041AC((uint64_t)&v37);
      sub_10000425C(&v38, v37);
      goto LABEL_72;
    }

    if (os_log_type_enabled((os_log_t)qword_100131928, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(void *)v7 + 16LL))(buf, v7);
      sub_100006200((uint64_t)buf, -1, 0x20u, 0LL, 1, &__p);
      sub_1000AF590();
    }
  }

  else
  {
    int v15 = (os_log_s *)qword_100131928;
    if (os_log_type_enabled((os_log_t)qword_100131928, OS_LOG_TYPE_ERROR)) {
      sub_1000AF4C8(v15);
    }
    (*(void (**)(void))(**(void **)(a1 + 64) + 104LL))(*(void *)(a1 + 64));
  }

LABEL_14:
  int v9 = (const char **)(a1 + 72);
  int v10 = (const char *)(a1 + 72);
  *(double *)(a1 + 120) = strtod(v10, &v25);
  if (*(char *)(a1 + 95) < 0)
  {
    int v9 = *(const char ***)(a1 + 72);
    uint64_t v11 = *(void *)(a1 + 80);
  }

  else
  {
    uint64_t v11 = *(unsigned __int8 *)(a1 + 95);
  }

  return 7LL;
}

  __int128 v14 = (os_log_s *)qword_100131920;
  if (os_log_type_enabled((os_log_t)qword_100131920, OS_LOG_TYPE_DEBUG))
  {
    int v15 = *(void *)v1[1];
    int v16 = (void *)(v15 + 16);
    *(_DWORD *)buf = 136316162;
    uint64_t v23 = v16;
    uint64_t v24 = 2050;
    uint64_t v25 = v21;
    uint64_t v26 = 2050;
    uint64_t v27 = v20;
    unint64_t v28 = 2050;
    char v29 = v19;
    unint64_t v30 = 2050;
    __int128 v31 = v18;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "[Transform Cache] Cache performance for input event %s: { transforms: %{public}zu, hit: %{public}zu, loaded: %{pub lic}zu, inserted: %{public}zu}",  buf,  0x34u);
  }

  sub_1000243A4(v2);
}

  int v9 = (const char **)(a1 + 72);
  int v10 = (const char *)(a1 + 72);
  *(double *)(a1 + 120) = strtod(v10, &v25);
  if (*(char *)(a1 + 95) < 0)
  {
    int v9 = *(const char ***)(a1 + 72);
    uint64_t v11 = *(void *)(a1 + 80);
  }

  else
  {
    uint64_t v11 = *(unsigned __int8 *)(a1 + 95);
  }

  return 7LL;
}

    if (this)
    {
      int v6 = this;
      goto LABEL_16;
    }

    goto LABEL_49;
  }

  if ((_DWORD)v5 == 34 || (_DWORD)v5 == 47) {
    goto LABEL_14;
  }
LABEL_21:
  if ((v5 & 0xFFFFFFF8) != 0x30) {
    goto LABEL_52;
  }
  int v7 = v5 - 48;
  __int128 v8 = a2 + 1;
  if (a2 + 1 != a3)
  {
    if ((*v8 & 0xF8) != 0x30) {
      goto LABEL_39;
    }
    int v7 = *v8 + 8 * v7 - 48;
    if (a2 + 2 != a3)
    {
      int v9 = a2[2];
      int v10 = v9 & 0xF8;
      uint64_t v11 = v9 + 8 * v7 - 48;
      if (v10 == 48) {
        __int128 v8 = a2 + 3;
      }
      else {
        __int128 v8 = a2 + 2;
      }
      if (v10 == 48) {
        int v7 = v11;
      }
      goto LABEL_39;
    }
  }

  __int128 v8 = a3;
LABEL_39:
  if (this) {
    std::string::operator=(this, v7);
  }
  else {
    sub_100035128(a1, v7);
  }
  return v8;
}

    sub_100033D50( (char **)a4,  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3),  (__int128 *)(a4 + 24));
    if (sub_10003AF8C(a1, a3, a3, (uint64_t *)a4, v14, 0))
    {
      if (*(void *)(a4 + 8) == *(void *)a4) {
        int v10 = (uint64_t *)(a4 + 24);
      }
      else {
        int v10 = *(uint64_t **)a4;
      }
      goto LABEL_8;
    }
  }

  uint64_t result = 0LL;
  *(void *)(a4 + sub_100007004((uint64_t)v5 + 8) = *(void *)a4;
  return result;
}

      if (v19)
      {
        __int128 v40 = 0LL;
        sub_100026984(&v19, (uint64_t)&v37, 1, &block);
        int v10 = v40;
        if (v40 == &v37)
        {
          int v10 = &v37;
          uint64_t v11 = 4LL;
        }

        else
        {
          if (!v40) {
            goto LABEL_21;
          }
          uint64_t v11 = 5LL;
        }

        ((void (*)(void))(*v10)[v11])();
      }

      else
      {
        LOBYTE(block) = 0;
        __int128 v31 = 0LL;
        sub_1000041AC((uint64_t)&block);
        sub_1000041AC((uint64_t)&block);
      }

    int v2 = 0LL;
    goto LABEL_15;
  }

  int v2 = 1LL;
LABEL_15:
  sub_10004C6D4(&v10, 0LL);
  return v2;
}

    object = xpc_null_create();
LABEL_16:
    xpc_release(v12);
    int v13 = object;
    if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_dictionary)
    {
      unsigned __int8 v17 = xpc_string_create("not entitled");
      if (!v17) {
        unsigned __int8 v17 = xpc_null_create();
      }
      *(void *)buf = &object;
      v22[0] = "error";
      sub_100077630((uint64_t)buf, &v17, &v18);
      xpc_release(v18);
      uint64_t v18 = 0LL;
      xpc_release(v17);
      unsigned __int8 v17 = 0LL;
      xpc_connection_send_message(*a2, object);
      int v13 = object;
    }

    xpc_release(v13);
LABEL_21:
    xpc_release(v20);
    return v7;
  }

  return 0LL;
}

  int v9 = (const char **)(a1 + 80);
  int v10 = (const char *)(a1 + 80);
  *(double *)(a1 + 12sub_100007004((uint64_t)v5 + 8) = strtod(v10, &v25);
  if (*(char *)(a1 + 103) < 0)
  {
    int v9 = *(const char ***)(a1 + 80);
    uint64_t v11 = *(void *)(a1 + 88);
  }

  else
  {
    uint64_t v11 = *(unsigned __int8 *)(a1 + 103);
  }

  return 7LL;
}

  int v9 = (a4 - v4 + size) & ~((uint64_t)(a4 - v4 + size) >> 63);
  if (a4 >= 0) {
    int v9 = a4;
  }
  if (v9 >= v7) {
    int v9 = v7;
  }
  std::string::resize(v5, v9 + v4, 0);
  return std::string::erase(v5, 0LL, v4);
}

    uint64_t v3 = 0LL;
    goto LABEL_20;
  }

  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
LABEL_19:
  uint64_t v3 = memcmp(p_p, v4, size) == 0;
LABEL_20:
  v9[0] = 4;
  int v10 = (uint64_t *)v3;
  sub_1000041AC((uint64_t)v9);
  sub_1000041AC((uint64_t)v9);
  int v7 = a2[4];
  if (v7 >= a2[5])
  {
    __int128 v8 = sub_100004B7C(a2 + 3, (uint64_t)v9);
  }

  else
  {
    *(_BYTE *)int v7 = v9[0];
    *(void *)(v7 + sub_100007004((uint64_t)v5 + 8) = v10;
    sub_1000041AC((uint64_t)v9);
    v9[0] = 0;
    int v10 = 0LL;
    sub_1000041AC(v7);
    __int128 v8 = v7 + 16;
  }

  a2[4] = v8;
  sub_1000041AC((uint64_t)v9);
  sub_10000425C(&v10, v9[0]);
  sub_1000041AC((uint64_t)&v11);
  sub_10000425C(&v12, v11);
}

    uint64_t v3 = 0LL;
    goto LABEL_20;
  }

  int v6 = *((unsigned __int8 *)v4 + 23);
  if (size > v6) {
    goto LABEL_14;
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
LABEL_19:
  uint64_t v3 = memcmp(p_p, (char *)v4 + v6 - size, size) == 0;
LABEL_20:
  v10[0] = 4;
  uint64_t v11 = (uint64_t *)v3;
  sub_1000041AC((uint64_t)v10);
  sub_1000041AC((uint64_t)v10);
  __int128 v8 = a2[4];
  if (v8 >= a2[5])
  {
    int v9 = sub_100004B7C(a2 + 3, (uint64_t)v10);
  }

  else
  {
    *(_BYTE *)__int128 v8 = v10[0];
    *(void *)(v8 + sub_100007004((uint64_t)v5 + 8) = v11;
    sub_1000041AC((uint64_t)v10);
    v10[0] = 0;
    uint64_t v11 = 0LL;
    sub_1000041AC(v8);
    int v9 = v8 + 16;
  }

  a2[4] = v9;
  sub_1000041AC((uint64_t)v10);
  sub_10000425C(&v11, v10[0]);
  sub_1000041AC((uint64_t)&v12);
  sub_10000425C(&v13, v12);
}

    uint64_t v3 = 1LL;
    goto LABEL_15;
  }

  uint64_t v3 = (int)sub_10004C31C(v2, &v11, 0) > 0;
LABEL_15:
  sub_10004C6D4(&v11, 0LL);
  return v3;
}

void sub_100019EA4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100019EB0(uint64_t result)
{
  int v1 = (void *)(result + 32);
  uint64_t v2 = *(void *)(result + 32);
  *(_BYTE *)(result + 20) = 1;
  --*(void *)(result + 24);
  if (v2 || (v1 = (void *)(result + 40), (uint64_t v2 = *(void *)(result + 40)) != 0)) {
    void *v1 = v2 - 1;
  }
  if (*(_DWORD *)(result + 16) != -1)
  {
    uint64_t v3 = *(void *)(result + 56);
    if (*(void *)(result + 48) == v3) {
      sub_1000D7474();
    }
    *(void *)(result + 56) = v3 - 1;
  }

  return result;
}

void sub_100019F18(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0)
  {
    **(_BYTE **)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0LL;
  }

  else
  {
    *(_BYTE *)(a1 + 72) = 0;
    *(_BYTE *)(a1 + 95) = 0;
  }

  uint64_t v2 = *(_BYTE **)(a1 + 48);
  *(void *)(a1 + 56) = v2;
  int v3 = *(_DWORD *)(a1 + 16);
  unint64_t v4 = *(void *)(a1 + 64);
  if ((unint64_t)v2 >= v4)
  {
    unint64_t v6 = v4 - (void)v2;
    uint64_t v7 = 2 * v6;
    if (2 * v6 <= 1) {
      uint64_t v7 = 1LL;
    }
    if (v6 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v8 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v8 = v7;
    }
    int v9 = operator new(v8);
    *int v9 = v3;
    int v5 = v9 + 1;
    *(void *)(a1 + 4sub_100007004((uint64_t)v5 + 8) = v9;
    *(void *)(a1 + 56) = v9 + 1;
    *(void *)(a1 + 64) = &v9[v8];
    if (v2) {
      operator delete(v2);
    }
  }

  else
  {
    _BYTE *v2 = v3;
    int v5 = v2 + 1;
  }

  *(void *)(a1 + 56) = v5;
}

uint64_t sub_100019FD8(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 16) != 117) {
    sub_1000D74C4();
  }
  uint64_t v2 = 0LL;
  LODWORD(v3) = 0;
  __int128 v8 = xmmword_1000F20F0;
  do
  {
    int v4 = *(_DWORD *)((char *)&v8 + v2);
    sub_1000193F4((unsigned __int8 **)a1);
    int v5 = *(_DWORD *)(a1 + 16);
    int v6 = v5 - 48;
    if ((v5 - 48) >= 0xA)
    {
      if ((v5 - 65) > 5)
      {
        int v6 = v5 - 87;
      }

      else
      {
        int v6 = v5 - 55;
      }
    }

    uint64_t v3 = ((v6 << v4) + v3);
    v2 += 4LL;
  }

  while (v2 != 16);
  return v3;
}

uint64_t sub_10001A0C8(std::string *a1, _DWORD *a2, unint64_t a3)
{
  if (a3 > 6 || ((1LL << a3) & 0x54) == 0) {
    sub_1000D74EC();
  }
  int v6 = a1 + 3;
  std::string::push_back(a1 + 3, a1->__r_.__value_.__s.__data_[16]);
  uint64_t v7 = &a2[a3];
  while (1)
  {
    sub_1000193F4((unsigned __int8 **)a1);
    int v8 = a1->__r_.__value_.__r.__words[2];
    if (*a2 > v8 || v8 > a2[1]) {
      break;
    }
    std::string::push_back(v6, v8);
    a2 += 2;
    if (a2 == v7) {
      return 1LL;
    }
  }

  uint64_t result = 0LL;
  a1[4].__r_.__value_.__r.__words[0] = (std::string::size_type)"invalid string: ill-formed UTF-8 byte";
  return result;
}

uint64_t sub_10001A17C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }

  return a1;
}

uint64_t sub_10001A1BC(uint64_t a1, uint64_t *a2)
{
  __int128 v39 = 0LL;
  uint64_t v40 = 0LL;
  uint64_t v41 = 0LL;
  int v4 = (__int128 *)(a1 + 112);
  uint64_t v5 = a1 + 40;
  while (2)
  {
    switch(*(_DWORD *)(a1 + 32))
    {
      case 1:
        LOBYTE(v36.__vftable) = 1;
        sub_10001E39C(a2, (unsigned __int8 *)&v36, 0LL);
        goto LABEL_19;
      case 2:
        LOBYTE(v36.__vftable) = 0;
        sub_10001E39C(a2, (unsigned __int8 *)&v36, 0LL);
        goto LABEL_19;
      case 3:
        v36.__vftable = 0LL;
        sub_10001E6E0(a2, (uint64_t)&v36, 0LL);
        goto LABEL_19;
      case 4:
        sub_10001ED60(a2, (uint64_t)v4, 0LL);
        goto LABEL_19;
      case 5:
        v36.__vftable = *(std::exception_vtbl **)(a1 + 152);
        sub_10001F08C(a2, (uint64_t **)&v36, 0LL);
        goto LABEL_19;
      case 6:
        v36.__vftable = *(std::exception_vtbl **)(a1 + 144);
        sub_10001EA1C(a2, (uint64_t **)&v36, 0LL);
        goto LABEL_19;
      case 7:
        if ((*(void *)(a1 + 160) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000LL)
        {
          v36.__vftable = *(std::exception_vtbl **)(a1 + 160);
          sub_10001E054(a2, (uint64_t **)&v36, 0LL);
          goto LABEL_19;
        }

        uint64_t v27 = *(void *)(a1 + 64);
        sub_10001ACAC(v5, &v38);
        sub_10001ACAC(v5, &v32);
        unint64_t v28 = std::string::insert(&v32, 0LL, "number overflow parsing '");
        __int128 v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__l.__cap_ = v28->__r_.__value_.__l.__cap_;
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v29;
        v28->__r_.__value_.__l.__size_ = 0LL;
        v28->__r_.__value_.__l.__cap_ = 0LL;
        v28->__r_.__value_.__r.__words[0] = 0LL;
        unint64_t v30 = std::string::append(&__p, "'");
        __int128 v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        std::string::size_type cap = v30->__r_.__value_.__l.__cap_;
        *(_OWORD *)std::runtime_error v34 = v31;
        v30->__r_.__value_.__l.__size_ = 0LL;
        v30->__r_.__value_.__l.__cap_ = 0LL;
        v30->__r_.__value_.__r.__words[0] = 0LL;
        sub_10001CF7C(406, (uint64_t)v34, &v36);
        uint64_t v17 = sub_10001AB68((uint64_t)a2, v27, (uint64_t)&v38, (uint64_t)&v36);
        v36.__vftable = (std::exception_vtbl *)off_100125390;
        std::runtime_error::~runtime_error(&v37);
        std::exception::~exception(&v36);
        if (SHIBYTE(cap) < 0) {
          operator delete(v34[0]);
        }
        goto LABEL_50;
      case 8:
        int v6 = sub_100019174(v5);
        *(_DWORD *)(a1 + 32) = v6;
        if (v6 == 10)
        {
          char v7 = sub_10001CE24(a2);
          goto LABEL_13;
        }

        LOBYTE(v36.__vftable) = 1;
        sub_10001C114((uint64_t)&v39, &v36);
        continue;
      case 9:
        if ((sub_10001C588(a2, 0xFFFFFFFFFFFFFFFFLL) & 1) == 0) {
          goto LABEL_56;
        }
        int v8 = sub_100019174(v5);
        *(_DWORD *)(a1 + 32) = v8;
        if (v8 != 11)
        {
          if (v8 != 4) {
            goto LABEL_59;
          }
          int v16 = sub_100019174(v5);
          *(_DWORD *)(a1 + 32) = v16;
          if (v16 != 12) {
            goto LABEL_60;
          }
          LOBYTE(v36.__vftable) = 0;
          sub_10001C114((uint64_t)&v39, &v36);
          int v15 = sub_100019174(v5);
LABEL_37:
          *(_DWORD *)(a1 + 32) = v15;
          continue;
        }

        char v7 = sub_10001C810(a2);
LABEL_13:
        if ((v7 & 1) == 0)
        {
LABEL_56:
          uint64_t v17 = 0LL;
          goto LABEL_44;
        }

LABEL_19:
        uint64_t v9 = v40;
        if (!v40)
        {
LABEL_43:
          uint64_t v17 = 1LL;
          goto LABEL_44;
        }

        while (2)
        {
          if (((*(void *)&v39[((unint64_t)(v9 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8LL] >> (v9 - 1)) & 1) != 0)
          {
            int v10 = sub_100019174(v5);
            *(_DWORD *)(a1 + 32) = v10;
            if (v10 == 13) {
              goto LABEL_36;
            }
            if (v10 != 10)
            {
              uint64_t v22 = *(void *)(a1 + 64);
              sub_10001ACAC(v5, &v38);
              *(_OWORD *)std::runtime_error v34 = *(_OWORD *)(a1 + 64);
              std::string::size_type cap = *(void *)(a1 + 80);
              sub_100005064(&v32, "array");
              sub_10001B04C(a1, 0xAu, (uint64_t)&v32, &__p);
              sub_10001AD8C(101, (uint64_t *)v34, (uint64_t)&__p, &v36);
              uint64_t v20 = sub_10001AB68((uint64_t)a2, v22, (uint64_t)&v38, (uint64_t)&v36);
              goto LABEL_49;
            }

            uint64_t v11 = v40;
            if (!v40)
            {
              int v23 = 383;
              goto LABEL_62;
            }

    uint64_t v3 = *(void *)(v3 + 8);
    if (v3 == v2) {
      return v2;
    }
  }

  if (memcmp(*v12, v7, v10)) {
    goto LABEL_19;
  }
LABEL_21:
  if (v3 == v2) {
    return v2;
  }
  int v14 = v4[23];
  if (v14 >= 0) {
    int v15 = v4[23];
  }
  else {
    int v15 = *((void *)v4 + 1);
  }
  if (v14 < 0) {
    int v4 = *(_BYTE **)v4;
  }
  int v16 = v3;
  do
  {
    uint64_t v17 = *(void *)(v16 + 16);
    uint64_t v18 = *(unsigned __int8 *)(v17 + 55);
    uint64_t v19 = *(void *)(v17 + 40);
    uint64_t v20 = (v18 & 0x80u) == 0LL ? *(unsigned __int8 *)(v17 + 55) : *(void *)(v17 + 40);
    if (v20 != v15) {
      break;
    }
    uint64_t v21 = (const void **)(v17 + 32);
    if ((v18 & 0x80) != 0)
    {
      if (memcmp(*v21, v4, v19)) {
        return v3;
      }
    }

    else if ((_DWORD)v18)
    {
      uint64_t v22 = v4;
      while (*(unsigned __int8 *)v21 == *v22)
      {
        uint64_t v21 = (const void **)((char *)v21 + 1);
        ++v22;
        if (!--v18) {
          goto LABEL_39;
        }
      }

      return v3;
    }

        uint64_t v9 = v40;
        if (!v40)
        {
LABEL_43:
          uint64_t v17 = 1LL;
          goto LABEL_44;
        }

        while (2)
        {
          if (((*(void *)&v39[((unint64_t)(v9 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8LL] >> (v9 - 1)) & 1) != 0)
          {
            int v10 = sub_1000272AC(v5);
            *(_DWORD *)(a1 + 32) = v10;
            if (v10 == 13) {
              goto LABEL_36;
            }
            if (v10 != 10)
            {
              uint64_t v22 = *(void *)(a1 + 64);
              sub_100028810(v5, &v38);
              *(_OWORD *)std::runtime_error v34 = *(_OWORD *)(a1 + 64);
              std::string::size_type cap = *(void *)(a1 + 80);
              sub_100005064(&v32, "array");
              sub_1000288F0(a1, 0xAu, (uint64_t)&v32, &__p);
              sub_10001AD8C(101, (uint64_t *)v34, (uint64_t)&__p, &v36);
              uint64_t v20 = sub_10001AB68((uint64_t)a2, v22, (uint64_t)&v38, (uint64_t)&v36);
              goto LABEL_49;
            }

            uint64_t v11 = v40;
            if (!v40)
            {
              int v23 = 383;
              goto LABEL_62;
            }

  *int v12 = &v9[v17];
  return result;
}

    char v7 = 0LL;
    goto LABEL_20;
  }

  char v7 = 1LL;
LABEL_20:
  sub_10004C6D4(&v12, 0LL);
  return v7;
}

    char v7 = 0LL;
    goto LABEL_20;
  }

  char v7 = 1LL;
LABEL_20:
  sub_10004C6D4(&v12, 0LL);
  return v7;
}

        uint64_t v9 = v40;
        if (!v40)
        {
LABEL_43:
          uint64_t v17 = 1LL;
          goto LABEL_44;
        }

        while (2)
        {
          if (((*(void *)&v39[((unint64_t)(v9 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8LL] >> (v9 - 1)) & 1) != 0)
          {
            int v10 = sub_1000877C8(v5);
            *(_DWORD *)(a1 + 32) = v10;
            if (v10 == 13) {
              goto LABEL_36;
            }
            if (v10 != 10)
            {
              uint64_t v22 = *(void *)(a1 + 72);
              sub_1000891B0(v5, &v38);
              *(_OWORD *)std::runtime_error v34 = *(_OWORD *)(a1 + 72);
              std::string::size_type cap = *(void *)(a1 + 88);
              sub_100005064(&v32, "array");
              sub_100089290(a1, 0xAu, (uint64_t)&v32, &__p);
              sub_10001AD8C(101, (uint64_t *)v34, (uint64_t)&__p, &v36);
              uint64_t v20 = sub_10001AB68((uint64_t)a2, v22, (uint64_t)&v38, (uint64_t)&v36);
              goto LABEL_49;
            }

            uint64_t v11 = v40;
            if (!v40)
            {
              int v23 = 383;
              goto LABEL_62;
            }

    sub_100018704((unsigned __int8 **)v27);
  }

  uint64_t v20 = (std::__shared_weak_count *)*((void *)&v29 + 1);
  if (*((void *)&v29 + 1))
  {
    uint64_t v21 = (unint64_t *)(*((void *)&v29 + 1) + 8LL);
    do
      uint64_t v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }

  if (v8[3] == v8[4]) {
    sub_10009F828(v8 + 3, (a4[1] - *a4) >> 4);
  }
  uint64_t v17 = *a4;
  uint64_t v18 = a4[1];
  uint64_t v19 = (v18 - *a4) >> 4;
  if (v19 == (uint64_t)(*(void *)(a1 + 176) - *(void *)(a1 + 168)) >> 2 && v19 == (v8[4] - v8[3]) >> 4)
  {
    if (v18 != v17)
    {
      uint64_t v20 = 0LL;
      uint64_t v21 = 0LL;
      do
      {
        sub_10009F858( *(_DWORD *)(*(void *)(a1 + 168) + 4 * v21++),  (unsigned __int8 *)(v8[3] + v20),  (unsigned __int8 *)(v17 + v20));
        uint64_t v17 = *a4;
        v20 += 16LL;
      }

      while (v21 < (a4[1] - *a4) >> 4);
    }

    uint64_t v22 = *a2;
    int v23 = (void *)(v22 + 16);
    uint64_t v24 = strlen("com.apple.coreanalytics.heartbeat.2hours");
    if (*(char *)(v22 + 39) < 0)
    {
      if (v24 == *(void *)(v22 + 24))
      {
        if (v24 == -1LL) {
          goto LABEL_54;
        }
        int v23 = (void *)*v23;
LABEL_35:
        if (!memcmp(v23, "com.apple.coreanalytics.heartbeat.2hours", v24))
        {
          *(void *)&uint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v26 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)&uint8_t buf[16] = v26;
          uint64_t v40 = v26;
          *(_OWORD *)buf = v26;
          sub_10009EEA4(v8, v8 + 3, (std::string *)buf);
          uint64_t v27 = (os_log_s *)qword_100131970;
          if (os_log_type_enabled((os_log_t)qword_100131970, OS_LOG_TYPE_DEFAULT))
          {
            unint64_t v28 = &buf[24];
            __int128 v29 = buf;
            if (buf[23] < 0) {
              __int128 v29 = *(_BYTE **)buf;
            }
            if (v40 < 0) {
              unint64_t v28 = *(_BYTE **)&buf[24];
            }
            *(_DWORD *)std::runtime_error v34 = 136446722;
            *(void *)&v34[4] = "com.apple.coreanalytics.heartbeat.2hours";
            std::string v35 = 2080;
            std::exception v36 = v29;
            std::runtime_error v37 = 2080;
            std::string v38 = v28;
            _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "[AggregatingTransform: %{public}s] After accumulation: dimensions: %s, measures: %s",  v34,  0x20u);
          }

          if (SHIBYTE(v40) < 0) {
            operator delete(*(void **)&buf[24]);
          }
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }
      }
    }

    else if (v24 == *(unsigned __int8 *)(v22 + 39))
    {
      if (v24 == -1LL) {
LABEL_54:
      }
        sub_100008DD4();
      goto LABEL_35;
    }

    if ((v10 & 1) != 0)
    {
      sub_10009F8EC(a1, (uint64_t)v8);
      sub_10008E3F0(a1);
    }

    return;
  }

  uint64_t v25 = (os_log_s *)qword_100131918;
  if (os_log_type_enabled((os_log_t)qword_100131918, OS_LOG_TYPE_ERROR))
  {
    sub_10008D06C(a1, v34);
    unint64_t v30 = v37 >= 0 ? v34 : *(_BYTE **)v34;
    __int128 v31 = (uint64_t)(*(void *)(a1 + 176) - *(void *)(a1 + 168)) >> 2;
    std::string v32 = (v8[4] - v8[3]) >> 4;
    std::exception v33 = (a4[1] - *a4) >> 4;
    *(_DWORD *)buf = 136446978;
    *(void *)&uint8_t buf[4] = v30;
    *(_WORD *)&_BYTE buf[12] = 2048;
    *(void *)&buf[14] = v31;
    *(_WORD *)&buf[22] = 2048;
    *(void *)&_BYTE buf[24] = v32;
    LOWORD(v40) = 2048;
    *(void *)((char *)&v40 + 2) = v33;
    _os_log_error_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_ERROR,  "[%{public}sTransform] Error: transform has a size mismatch between extracted measures, aggregating measures, and a ggregation functions { functions=%zd, running_measures=%zd, extracted_measures=%zd} ",  buf,  0x2Au);
    if (SHIBYTE(v37) < 0) {
      operator delete(*(void **)v34);
    }
  }

        sub_100040E1C(&v33);
        if (v13 != 101) {
          return v11;
        }
        sub_100018704((unsigned __int8 **)v41);
      }
    }

    unint64_t v28 = *(sqlite3 **)(a1 + 32);
    __int128 v29 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v28)
    {
      if (v29)
      {
        unint64_t v30 = sqlite3_errmsg(v28);
        sub_1000C729C((uint64_t)v30, (uint64_t)v41);
      }
    }

    else if (v29)
    {
      sub_1000C7244();
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR))
  {
    sub_1000C7328();
  }

  return 0LL;
}

        sub_100040E1C(&v33);
        if (v13 != 101) {
          return v11;
        }
        sub_100018704((unsigned __int8 **)v41);
      }
    }

    unint64_t v28 = *(sqlite3 **)(a1 + 32);
    __int128 v29 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v28)
    {
      if (v29)
      {
        unint64_t v30 = sqlite3_errmsg(v28);
        sub_1000C7430((uint64_t)v30, (uint64_t)v41);
      }
    }

    else if (v29)
    {
      sub_1000C73D8();
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR))
  {
    sub_1000C74BC();
  }

  return 0LL;
}

        sub_100040E1C(&v33);
        if (v13 != 101) {
          return v11;
        }
        sub_100018704((unsigned __int8 **)v41);
      }

      uint64_t v21 = qword_100131930;
      uint64_t v22 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (v14)
      {
        if (!v22) {
          goto LABEL_19;
        }
        int size = (char)__p.__r_.__value_.__s.__size_;
        __int128 v31 = __p.__r_.__value_.__r.__words[0];
        uint64_t v24 = sqlite3_errmsg(v14);
        *(_DWORD *)buf = 136446466;
        uint64_t v25 = &__p;
        if (size < 0) {
          uint64_t v25 = (std::string *)v31;
        }
        std::string v38 = v25;
        __int128 v39 = 2080;
        uint64_t v40 = v24;
        uint64_t v18 = (os_log_s *)v21;
        uint64_t v19 = "[Config Store] ERROR: Failed to remove modify-eventdefs (uuid='%{public}s'); %s";
        uint64_t v20 = 22;
      }

      else
      {
        if (!v22) {
          goto LABEL_19;
        }
        uint64_t v26 = &__p;
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          uint64_t v26 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)buf = 136446210;
        std::string v38 = v26;
        uint64_t v18 = (os_log_s *)v21;
        uint64_t v19 = "[Config Store] ERROR: Failed to remove modify-eventdefs (uuid='%{public}s')[null database]";
        uint64_t v20 = 12;
      }

      goto LABEL_26;
    }

    unint64_t v28 = *(sqlite3 **)(a1 + 32);
    __int128 v29 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v28)
    {
      if (v29)
      {
        unint64_t v30 = sqlite3_errmsg(v28);
        sub_1000C75C4((uint64_t)v30, (uint64_t)v41);
      }
    }

    else if (v29)
    {
      sub_1000C756C();
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR))
  {
    sub_1000C7650();
  }

  return 0LL;
}

        sub_100040E1C(&v33);
        if (v13 != 101) {
          return v11;
        }
        sub_100018704((unsigned __int8 **)v41);
      }
    }

    unint64_t v28 = *(sqlite3 **)(a1 + 32);
    __int128 v29 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v28)
    {
      if (v29)
      {
        unint64_t v30 = sqlite3_errmsg(v28);
        sub_1000C7700((uint64_t)v30, (uint64_t)v41);
      }
    }

    else if (v29)
    {
      sub_1000C76A8();
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR))
  {
    sub_1000C7328();
  }

  return 0LL;
}

LABEL_30:
            uint64_t v9 = v11 - 1;
            uint64_t v40 = v9;
            if (!v9) {
              goto LABEL_43;
            }
            continue;
          }

          break;
        }

        int v12 = sub_100019174(v5);
        *(_DWORD *)(a1 + 32) = v12;
        if (v12 != 13)
        {
          if (v12 != 11)
          {
            uint64_t v24 = *(void *)(a1 + 64);
            sub_10001ACAC(v5, &v38);
            *(_OWORD *)std::runtime_error v34 = *(_OWORD *)(a1 + 64);
            std::string::size_type cap = *(void *)(a1 + 80);
            sub_100005064(&v32, "object");
            sub_10001B04C(a1, 0xBu, (uint64_t)&v32, &__p);
            sub_10001AD8C(101, (uint64_t *)v34, (uint64_t)&__p, &v36);
            uint64_t v20 = sub_10001AB68((uint64_t)a2, v24, (uint64_t)&v38, (uint64_t)&v36);
            goto LABEL_49;
          }

          uint64_t v11 = v40;
          if (!v40)
          {
            int v23 = 439;
LABEL_62:
            __assert_rtn("sax_parse_internal", "parser.hpp", v23, "not states.empty()");
          }

          goto LABEL_30;
        }

        int v13 = sub_100019174(v5);
        *(_DWORD *)(a1 + 32) = v13;
        if (v13 != 4)
        {
LABEL_59:
          uint64_t v25 = *(void *)(a1 + 64);
          sub_10001ACAC(v5, &v38);
          *(_OWORD *)std::runtime_error v34 = *(_OWORD *)(a1 + 64);
          std::string::size_type cap = *(void *)(a1 + 80);
          sub_100005064(&v32, "object key");
          sub_10001B04C(a1, 4u, (uint64_t)&v32, &__p);
          sub_10001AD8C(101, (uint64_t *)v34, (uint64_t)&__p, &v36);
          uint64_t v20 = sub_10001AB68((uint64_t)a2, v25, (uint64_t)&v38, (uint64_t)&v36);
          goto LABEL_49;
        }

        int v14 = sub_100019174(v5);
        *(_DWORD *)(a1 + 32) = v14;
        if (v14 == 12)
        {
LABEL_36:
          int v15 = sub_100019174(v5);
          goto LABEL_37;
        }

            uint64_t v9 = v11 - 1;
            uint64_t v40 = v9;
            if (!v9) {
              goto LABEL_43;
            }
            continue;
          }

          break;
        }

        int v12 = sub_1000272AC(v5);
        *(_DWORD *)(a1 + 32) = v12;
        if (v12 != 13)
        {
          if (v12 != 11)
          {
            uint64_t v24 = *(void *)(a1 + 64);
            sub_100028810(v5, &v38);
            *(_OWORD *)std::runtime_error v34 = *(_OWORD *)(a1 + 64);
            std::string::size_type cap = *(void *)(a1 + 80);
            sub_100005064(&v32, "object");
            sub_1000288F0(a1, 0xBu, (uint64_t)&v32, &__p);
            sub_10001AD8C(101, (uint64_t *)v34, (uint64_t)&__p, &v36);
            uint64_t v20 = sub_10001AB68((uint64_t)a2, v24, (uint64_t)&v38, (uint64_t)&v36);
            goto LABEL_49;
          }

          uint64_t v11 = v40;
          if (!v40)
          {
            int v23 = 439;
LABEL_62:
            __assert_rtn("sax_parse_internal", "parser.hpp", v23, "not states.empty()");
          }

          goto LABEL_30;
        }

        int v13 = sub_1000272AC(v5);
        *(_DWORD *)(a1 + 32) = v13;
        if (v13 != 4)
        {
LABEL_59:
          uint64_t v25 = *(void *)(a1 + 64);
          sub_100028810(v5, &v38);
          *(_OWORD *)std::runtime_error v34 = *(_OWORD *)(a1 + 64);
          std::string::size_type cap = *(void *)(a1 + 80);
          sub_100005064(&v32, "object key");
          sub_1000288F0(a1, 4u, (uint64_t)&v32, &__p);
          sub_10001AD8C(101, (uint64_t *)v34, (uint64_t)&__p, &v36);
          uint64_t v20 = sub_10001AB68((uint64_t)a2, v25, (uint64_t)&v38, (uint64_t)&v36);
          goto LABEL_49;
        }

        int v14 = sub_1000272AC(v5);
        *(_DWORD *)(a1 + 32) = v14;
        if (v14 == 12)
        {
LABEL_36:
          int v15 = sub_1000272AC(v5);
          goto LABEL_37;
        }

      __int128 v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        int v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    uint64_t v25 = 1LL;
  }
  else {
    uint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&unsigned __int8 v54 = sub_10001C3B0((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&unint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  unint64_t v53 = operator new(0xFC0uLL);
  sub_10003C2B0(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  unint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_10003C3C4((uint64_t)&v54, v27);
  }

  __int128 v29 = (char *)*a1;
  unint64_t v30 = v54;
  __int128 v31 = v55;
  *(void *)&unsigned __int8 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  std::string v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  unint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&unint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

            uint64_t v9 = v11 - 1;
            uint64_t v40 = v9;
            if (!v9) {
              goto LABEL_43;
            }
            continue;
          }

          break;
        }

        int v12 = sub_1000877C8(v5);
        *(_DWORD *)(a1 + 32) = v12;
        if (v12 != 13)
        {
          if (v12 != 11)
          {
            uint64_t v24 = *(void *)(a1 + 72);
            sub_1000891B0(v5, &v38);
            *(_OWORD *)std::runtime_error v34 = *(_OWORD *)(a1 + 72);
            std::string::size_type cap = *(void *)(a1 + 88);
            sub_100005064(&v32, "object");
            sub_100089290(a1, 0xBu, (uint64_t)&v32, &__p);
            sub_10001AD8C(101, (uint64_t *)v34, (uint64_t)&__p, &v36);
            uint64_t v20 = sub_10001AB68((uint64_t)a2, v24, (uint64_t)&v38, (uint64_t)&v36);
            goto LABEL_49;
          }

          uint64_t v11 = v40;
          if (!v40)
          {
            int v23 = 439;
LABEL_62:
            __assert_rtn("sax_parse_internal", "parser.hpp", v23, "not states.empty()");
          }

          goto LABEL_30;
        }

        int v13 = sub_1000877C8(v5);
        *(_DWORD *)(a1 + 32) = v13;
        if (v13 != 4)
        {
LABEL_59:
          uint64_t v25 = *(void *)(a1 + 72);
          sub_1000891B0(v5, &v38);
          *(_OWORD *)std::runtime_error v34 = *(_OWORD *)(a1 + 72);
          std::string::size_type cap = *(void *)(a1 + 88);
          sub_100005064(&v32, "object key");
          sub_100089290(a1, 4u, (uint64_t)&v32, &__p);
          sub_10001AD8C(101, (uint64_t *)v34, (uint64_t)&__p, &v36);
          uint64_t v20 = sub_10001AB68((uint64_t)a2, v25, (uint64_t)&v38, (uint64_t)&v36);
          goto LABEL_49;
        }

        int v14 = sub_1000877C8(v5);
        *(_DWORD *)(a1 + 32) = v14;
        if (v14 == 12)
        {
LABEL_36:
          int v15 = sub_1000877C8(v5);
          goto LABEL_37;
        }

      __int128 v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        int v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    uint64_t v25 = 1LL;
  }
  else {
    uint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&unsigned __int8 v54 = sub_10001C3B0((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&unint64_t v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  unint64_t v53 = operator new(0x1000uLL);
  sub_10003C2B0(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  unint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_10003C3C4((uint64_t)&v54, v27);
  }

  __int128 v29 = (char *)*a1;
  unint64_t v30 = v54;
  __int128 v31 = v55;
  *(void *)&unsigned __int8 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  std::string v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  unint64_t v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&unint64_t v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

LABEL_60:
        uint64_t v26 = *(void *)(a1 + 64);
        sub_10001ACAC(v5, &v38);
        *(_OWORD *)std::runtime_error v34 = *(_OWORD *)(a1 + 64);
        std::string::size_type cap = *(void *)(a1 + 80);
        sub_100005064(&v32, "object separator");
        sub_10001B04C(a1, 0xCu, (uint64_t)&v32, &__p);
        sub_10001AD8C(101, (uint64_t *)v34, (uint64_t)&__p, &v36);
        uint64_t v20 = sub_10001AB68((uint64_t)a2, v26, (uint64_t)&v38, (uint64_t)&v36);
LABEL_49:
        uint64_t v17 = v20;
        v36.__vftable = (std::exception_vtbl *)off_100125390;
        std::runtime_error::~runtime_error(&v37);
        std::exception::~exception(&v36);
LABEL_50:
LABEL_44:
        if (v39) {
          operator delete(v39);
        }
        return v17;
      case 0xE:
        uint64_t v19 = *(void *)(a1 + 64);
        sub_10001ACAC(v5, &v38);
        *(_OWORD *)std::runtime_error v34 = *(_OWORD *)(a1 + 64);
        std::string::size_type cap = *(void *)(a1 + 80);
        sub_100005064(&v32, "value");
        sub_10001B04C(a1, 0, (uint64_t)&v32, &__p);
        sub_10001AD8C(101, (uint64_t *)v34, (uint64_t)&__p, &v36);
        uint64_t v20 = sub_10001AB68((uint64_t)a2, v19, (uint64_t)&v38, (uint64_t)&v36);
        goto LABEL_49;
      default:
        uint64_t v21 = *(void *)(a1 + 64);
        sub_10001ACAC(v5, &v38);
        *(_OWORD *)std::runtime_error v34 = *(_OWORD *)(a1 + 64);
        std::string::size_type cap = *(void *)(a1 + 80);
        sub_100005064(&v32, "value");
        sub_10001B04C(a1, 0x10u, (uint64_t)&v32, &__p);
        sub_10001AD8C(101, (uint64_t *)v34, (uint64_t)&__p, &v36);
        uint64_t v20 = sub_10001AB68((uint64_t)a2, v21, (uint64_t)&v38, (uint64_t)&v36);
        goto LABEL_49;
    }
  }

        uint64_t v26 = *(void *)(a1 + 64);
        sub_100028810(v5, &v38);
        *(_OWORD *)std::runtime_error v34 = *(_OWORD *)(a1 + 64);
        std::string::size_type cap = *(void *)(a1 + 80);
        sub_100005064(&v32, "object separator");
        sub_1000288F0(a1, 0xCu, (uint64_t)&v32, &__p);
        sub_10001AD8C(101, (uint64_t *)v34, (uint64_t)&__p, &v36);
        uint64_t v20 = sub_10001AB68((uint64_t)a2, v26, (uint64_t)&v38, (uint64_t)&v36);
LABEL_49:
        uint64_t v17 = v20;
        v36.__vftable = (std::exception_vtbl *)off_100125390;
        std::runtime_error::~runtime_error(&v37);
        std::exception::~exception(&v36);
LABEL_50:
LABEL_44:
        if (v39) {
          operator delete(v39);
        }
        return v17;
      case 0xE:
        uint64_t v19 = *(void *)(a1 + 64);
        sub_100028810(v5, &v38);
        *(_OWORD *)std::runtime_error v34 = *(_OWORD *)(a1 + 64);
        std::string::size_type cap = *(void *)(a1 + 80);
        sub_100005064(&v32, "value");
        sub_1000288F0(a1, 0, (uint64_t)&v32, &__p);
        sub_10001AD8C(101, (uint64_t *)v34, (uint64_t)&__p, &v36);
        uint64_t v20 = sub_10001AB68((uint64_t)a2, v19, (uint64_t)&v38, (uint64_t)&v36);
        goto LABEL_49;
      default:
        uint64_t v21 = *(void *)(a1 + 64);
        sub_100028810(v5, &v38);
        *(_OWORD *)std::runtime_error v34 = *(_OWORD *)(a1 + 64);
        std::string::size_type cap = *(void *)(a1 + 80);
        sub_100005064(&v32, "value");
        sub_1000288F0(a1, 0x10u, (uint64_t)&v32, &__p);
        sub_10001AD8C(101, (uint64_t *)v34, (uint64_t)&__p, &v36);
        uint64_t v20 = sub_10001AB68((uint64_t)a2, v21, (uint64_t)&v38, (uint64_t)&v36);
        goto LABEL_49;
    }
  }

      sub_1000041AC((uint64_t)&v60);
      sub_10000425C(&v61, v60);
      uint64_t v19 = v62[0];
    }

    if (v19)
    {
      v62[1] = v19;
      operator delete(v19);
    }

    v13 += 80LL;
  }

  while (v13 != v51);
  int v6 = v50;
  if (v50) {
    goto LABEL_70;
  }
LABEL_72:
  __int128 v42 = a1[24];
  for (uint64_t i = a1[25]; v42 != i; v42 += 16LL)
  {
    v62[0] = (void *)0xAAAAAAAAAAAAAAAALL;
    __int128 v44 = *(std::__shared_weak_count **)(v42 + 8);
    if (v44)
    {
      unint64_t v45 = std::__shared_weak_count::lock(v44);
      v62[1] = v45;
      if (v45)
      {
        uint64_t v46 = v45;
        unsigned __int8 v47 = *(void **)v42;
        v62[0] = v47;
        if (v47) {
          (*(void (**)(void *, uint64_t))(*(void *)v47 + 16LL))(v47, a2);
        }
        time_t v48 = (unint64_t *)&v46->__shared_owners_;
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
    }
  }

        uint64_t v26 = *(void *)(a1 + 72);
        sub_1000891B0(v5, &v38);
        *(_OWORD *)std::runtime_error v34 = *(_OWORD *)(a1 + 72);
        std::string::size_type cap = *(void *)(a1 + 88);
        sub_100005064(&v32, "object separator");
        sub_100089290(a1, 0xCu, (uint64_t)&v32, &__p);
        sub_10001AD8C(101, (uint64_t *)v34, (uint64_t)&__p, &v36);
        uint64_t v20 = sub_10001AB68((uint64_t)a2, v26, (uint64_t)&v38, (uint64_t)&v36);
LABEL_49:
        uint64_t v17 = v20;
        v36.__vftable = (std::exception_vtbl *)off_100125390;
        std::runtime_error::~runtime_error(&v37);
        std::exception::~exception(&v36);
LABEL_50:
LABEL_44:
        if (v39) {
          operator delete(v39);
        }
        return v17;
      case 0xE:
        uint64_t v19 = *(void *)(a1 + 72);
        sub_1000891B0(v5, &v38);
        *(_OWORD *)std::runtime_error v34 = *(_OWORD *)(a1 + 72);
        std::string::size_type cap = *(void *)(a1 + 88);
        sub_100005064(&v32, "value");
        sub_100089290(a1, 0, (uint64_t)&v32, &__p);
        sub_10001AD8C(101, (uint64_t *)v34, (uint64_t)&__p, &v36);
        uint64_t v20 = sub_10001AB68((uint64_t)a2, v19, (uint64_t)&v38, (uint64_t)&v36);
        goto LABEL_49;
      default:
        uint64_t v21 = *(void *)(a1 + 72);
        sub_1000891B0(v5, &v38);
        *(_OWORD *)std::runtime_error v34 = *(_OWORD *)(a1 + 72);
        std::string::size_type cap = *(void *)(a1 + 88);
        sub_100005064(&v32, "value");
        sub_100089290(a1, 0x10u, (uint64_t)&v32, &__p);
        sub_10001AD8C(101, (uint64_t *)v34, (uint64_t)&__p, &v36);
        uint64_t v20 = sub_10001AB68((uint64_t)a2, v21, (uint64_t)&v38, (uint64_t)&v36);
        goto LABEL_49;
    }
  }

void sub_10001A9F4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, std::exception a30)
{
  a30.__vftable = (std::exception_vtbl *)off_100125390;
  std::runtime_error::~runtime_error(v30 + 1);
  std::exception::~exception(&a30);
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  std::exception v33 = *(void **)(v31 - 96);
  if (v33) {
    operator delete(v33);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10001AB68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_BYTE *)(a1 + 8sub_100007004((uint64_t)v5 + 8) = 1;
  if (*(_BYTE *)(a1 + 128))
  {
    switch(~(100 * (*(_DWORD *)(a4 + 8) / 100 / 100)) + *(_DWORD *)(a4 + 8) / 100)
    {
      case 0:
        exception = __cxa_allocate_exception(0x28uLL);
        int v6 = (void *)sub_10001F3D0((uint64_t)exception, a4);
      case 1:
        char v7 = __cxa_allocate_exception(0x20uLL);
        int v8 = (void *)sub_10001F474((uint64_t)v7, a4);
      case 2:
        uint64_t v9 = __cxa_allocate_exception(0x20uLL);
        int v10 = (void *)sub_10001F4C0((uint64_t)v9, a4);
      case 3:
        uint64_t v11 = __cxa_allocate_exception(0x20uLL);
        int v12 = (void *)sub_10001F428((uint64_t)v11, a4);
      case 4:
        int v13 = __cxa_allocate_exception(0x20uLL);
        int v14 = (void *)sub_10001F50C((uint64_t)v13, a4);
      default:
        sub_1000D7514();
    }
  }

  return 0LL;
}

void sub_10001ACAC(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  uint64_t v3 = *(unsigned __int8 **)(a1 + 48);
  for (uint64_t i = *(unsigned __int8 **)(a1 + 56); v3 != i; ++v3)
  {
    unsigned int v5 = *v3;
    if (v5 > 0x1F)
    {
      std::string::push_back(a2, v5);
    }

    else
    {
      char v7 = 0;
      *(void *)std::string __str = 0LL;
      snprintf(__str, 9uLL, "<U+%.4X>", v5);
      std::string::append(a2, __str);
    }
  }

void sub_10001AD6C(_Unwind_Exception *exception_object)
{
}

void sub_10001AD8C(int a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  int v8 = std::string::append(&v26, "parse error");
  __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0LL;
  v8->__r_.__value_.__l.__cap_ = 0LL;
  v8->__r_.__value_.__r.__words[0] = 0LL;
  sub_10001F58C((uint64_t)a2, &__p);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = __p.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  int v12 = std::string::append(&v27, (const std::string::value_type *)p_p, size);
  __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0LL;
  v12->__r_.__value_.__l.__cap_ = 0LL;
  v12->__r_.__value_.__r.__words[0] = 0LL;
  int v14 = std::string::append(&v28, ": ");
  __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0LL;
  v14->__r_.__value_.__l.__cap_ = 0LL;
  v14->__r_.__value_.__r.__words[0] = 0LL;
  int v16 = *(char *)(a3 + 23);
  if (v16 >= 0) {
    uint64_t v17 = (const std::string::value_type *)a3;
  }
  else {
    uint64_t v17 = *(const std::string::value_type **)a3;
  }
  if (v16 >= 0) {
    std::string::size_type v18 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v18 = *(void *)(a3 + 8);
  }
  uint64_t v19 = std::string::append(&v29, v17, v18);
  __int128 v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  *(void *)&v30[16] = v19->__r_.__value_.__l.__cap_;
  *(_OWORD *)unint64_t v30 = v20;
  v19->__r_.__value_.__l.__size_ = 0LL;
  v19->__r_.__value_.__l.__cap_ = 0LL;
  v19->__r_.__value_.__r.__words[0] = 0LL;
  if (v25 < 0) {
    operator delete(v24[0]);
  }
  uint64_t v21 = *a2;
  if (v30[23] >= 0) {
    uint64_t v22 = v30;
  }
  else {
    uint64_t v22 = *(char **)v30;
  }
  sub_100004FA8((uint64_t)a4, a1, v22);
  *a4 = off_100125E50;
  a4[4] = v21;
  if ((v30[23] & 0x80000000) != 0) {
    operator delete(*(void **)v30);
  }
}

void sub_10001AF9C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33, uint64_t a34, void *__p, uint64_t a36, int a37, __int16 a38, char a39, char a40)
{
}

void sub_10001B04C(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  uint64_t v8 = *(unsigned __int8 *)(a3 + 23);
  if ((v8 & 0x80u) != 0LL) {
    uint64_t v8 = *(void *)(a3 + 8);
  }
  if (v8)
  {
    std::operator+<char>(&v38, "while parsing ", a3);
    __int128 v9 = std::string::append(&v38, " ");
    __int128 v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    int64_t cap = v9->__r_.__value_.__l.__cap_;
    __int128 v39 = v10;
    v9->__r_.__value_.__l.__size_ = 0LL;
    v9->__r_.__value_.__l.__cap_ = 0LL;
    v9->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      uint64_t v11 = (const std::string::value_type *)&v39;
    }
    else {
      uint64_t v11 = (const std::string::value_type *)v39;
    }
    if (cap >= 0) {
      std::string::size_type v12 = HIBYTE(cap);
    }
    else {
      std::string::size_type v12 = *((void *)&v39 + 1);
    }
    std::string::append(a4, v11, v12);
    if (SHIBYTE(cap) < 0) {
      operator delete((void *)v39);
    }
  }

  std::string::append(a4, "- ");
  unsigned int v13 = *(_DWORD *)(a1 + 32);
  if (v13 == 14)
  {
    sub_100005064(&v36, *(char **)(a1 + 136));
    int v14 = std::string::append(&v36, "; last read: '");
    __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0LL;
    v14->__r_.__value_.__l.__cap_ = 0LL;
    v14->__r_.__value_.__r.__words[0] = 0LL;
    sub_10001ACAC(a1 + 40, &__p);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type size = __p.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::string::size_type v18 = std::string::append(&v37, (const std::string::value_type *)p_p, size);
    __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__l.__cap_ = v18->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0LL;
    v18->__r_.__value_.__l.__cap_ = 0LL;
    v18->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v20 = std::string::append(&v38, "'");
    __int128 v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    int64_t cap = v20->__r_.__value_.__l.__cap_;
    __int128 v39 = v21;
    v20->__r_.__value_.__l.__size_ = 0LL;
    v20->__r_.__value_.__l.__cap_ = 0LL;
    v20->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      uint64_t v22 = (const std::string::value_type *)&v39;
    }
    else {
      uint64_t v22 = (const std::string::value_type *)v39;
    }
    if (cap >= 0) {
      std::string::size_type v23 = HIBYTE(cap);
    }
    else {
      std::string::size_type v23 = *((void *)&v39 + 1);
    }
    std::string::append(a4, v22, v23);
    if (SHIBYTE(cap) < 0) {
      operator delete((void *)v39);
    }
    if ((char)v36.__r_.__value_.__s.__size_ < 0)
    {
      uint64_t v24 = (void *)v36.__r_.__value_.__r.__words[0];
      goto LABEL_49;
    }

LABEL_46:
    if (!a2) {
      return;
    }
    goto LABEL_50;
  }

  char v25 = (char *)sub_10001F738(v13);
  sub_100005064(&v38, v25);
  std::string v26 = std::string::insert(&v38, 0LL, "unexpected ");
  __int128 v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  int64_t cap = v26->__r_.__value_.__l.__cap_;
  __int128 v39 = v27;
  v26->__r_.__value_.__l.__size_ = 0LL;
  v26->__r_.__value_.__l.__cap_ = 0LL;
  v26->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    std::string v28 = (const std::string::value_type *)&v39;
  }
  else {
    std::string v28 = (const std::string::value_type *)v39;
  }
  if (cap >= 0) {
    std::string::size_type v29 = HIBYTE(cap);
  }
  else {
    std::string::size_type v29 = *((void *)&v39 + 1);
  }
  std::string::append(a4, v28, v29);
  if (SHIBYTE(cap) < 0) {
    operator delete((void *)v39);
  }
  uint64_t v24 = (void *)v38.__r_.__value_.__r.__words[0];
LABEL_49:
  operator delete(v24);
  if (!a2) {
    return;
  }
LABEL_50:
  unint64_t v30 = (char *)sub_10001F738(a2);
  sub_100005064(&v38, v30);
  uint64_t v31 = std::string::insert(&v38, 0LL, "; expected ");
  __int128 v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  int64_t cap = v31->__r_.__value_.__l.__cap_;
  __int128 v39 = v32;
  v31->__r_.__value_.__l.__size_ = 0LL;
  v31->__r_.__value_.__l.__cap_ = 0LL;
  v31->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    std::exception v33 = (const std::string::value_type *)&v39;
  }
  else {
    std::exception v33 = (const std::string::value_type *)v39;
  }
  if (cap >= 0) {
    std::string::size_type v34 = HIBYTE(cap);
  }
  else {
    std::string::size_type v34 = *((void *)&v39 + 1);
  }
  std::string::append(a4, v33, v34);
  if (SHIBYTE(cap) < 0) {
    operator delete((void *)v39);
  }
}

    if (!a2) {
      return;
    }
    goto LABEL_50;
  }

  char v25 = (char *)sub_10001F738(v13);
  sub_100005064(&v38, v25);
  std::string v26 = std::string::insert(&v38, 0LL, "unexpected ");
  __int128 v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  int64_t cap = v26->__r_.__value_.__l.__cap_;
  __int128 v39 = v27;
  v26->__r_.__value_.__l.__size_ = 0LL;
  v26->__r_.__value_.__l.__cap_ = 0LL;
  v26->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    std::string v28 = (const std::string::value_type *)&v39;
  }
  else {
    std::string v28 = (const std::string::value_type *)v39;
  }
  if (cap >= 0) {
    std::string::size_type v29 = HIBYTE(cap);
  }
  else {
    std::string::size_type v29 = *((void *)&v39 + 1);
  }
  std::string::append(a4, v28, v29);
  if (SHIBYTE(cap) < 0) {
    operator delete((void *)v39);
  }
  uint64_t v24 = (void *)v38.__r_.__value_.__r.__words[0];
LABEL_49:
  operator delete(v24);
  if (!a2) {
    return;
  }
LABEL_50:
  unint64_t v30 = (char *)sub_10001F738(a2);
  sub_100005064(&v38, v30);
  uint64_t v31 = std::string::insert(&v38, 0LL, "; expected ");
  __int128 v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  int64_t cap = v31->__r_.__value_.__l.__cap_;
  __int128 v39 = v32;
  v31->__r_.__value_.__l.__size_ = 0LL;
  v31->__r_.__value_.__l.__cap_ = 0LL;
  v31->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    std::exception v33 = (const std::string::value_type *)&v39;
  }
  else {
    std::exception v33 = (const std::string::value_type *)v39;
  }
  if (cap >= 0) {
    std::string::size_type v34 = HIBYTE(cap);
  }
  else {
    std::string::size_type v34 = *((void *)&v39 + 1);
  }
  std::string::append(a4, v33, v34);
  if (SHIBYTE(cap) < 0) {
    operator delete((void *)v39);
  }
}

  std::string::size_type v12 = v20;
LABEL_47:
  *(void *)(a1 + 40) = v12;
  *(void *)(a1 + 4sub_100007004((uint64_t)v5 + 8) = v19;
  *(void *)(a1 + 56) = v21;
  if (v5) {
    operator delete(v5);
  }
LABEL_49:
  *(void *)(a1 + 4sub_100007004((uint64_t)v5 + 8) = v19;
}

  std::string::size_type v12 = v20;
LABEL_47:
  *(void *)(a1 + 64) = v12;
  *(void *)(a1 + 72) = v19;
  *(void *)(a1 + 80) = v21;
  if (v5) {
    operator delete(v5);
  }
LABEL_49:
  *(void *)(a1 + 72) = v19;
}

    if (!a2) {
      return;
    }
    goto LABEL_50;
  }

  char v25 = (char *)sub_10001F738(v13);
  sub_100005064(&v38, v25);
  std::string v26 = std::string::insert(&v38, 0LL, "unexpected ");
  __int128 v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  int64_t cap = v26->__r_.__value_.__l.__cap_;
  __int128 v39 = v27;
  v26->__r_.__value_.__l.__size_ = 0LL;
  v26->__r_.__value_.__l.__cap_ = 0LL;
  v26->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    std::string v28 = (const std::string::value_type *)&v39;
  }
  else {
    std::string v28 = (const std::string::value_type *)v39;
  }
  if (cap >= 0) {
    std::string::size_type v29 = HIBYTE(cap);
  }
  else {
    std::string::size_type v29 = *((void *)&v39 + 1);
  }
  std::string::append(a4, v28, v29);
  if (SHIBYTE(cap) < 0) {
    operator delete((void *)v39);
  }
  uint64_t v24 = (void *)v38.__r_.__value_.__r.__words[0];
LABEL_49:
  operator delete(v24);
  if (!a2) {
    return;
  }
LABEL_50:
  unint64_t v30 = (char *)sub_10001F738(a2);
  sub_100005064(&v38, v30);
  uint64_t v31 = std::string::insert(&v38, 0LL, "; expected ");
  __int128 v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  int64_t cap = v31->__r_.__value_.__l.__cap_;
  __int128 v39 = v32;
  v31->__r_.__value_.__l.__size_ = 0LL;
  v31->__r_.__value_.__l.__cap_ = 0LL;
  v31->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    std::exception v33 = (const std::string::value_type *)&v39;
  }
  else {
    std::exception v33 = (const std::string::value_type *)v39;
  }
  if (cap >= 0) {
    std::string::size_type v34 = HIBYTE(cap);
  }
  else {
    std::string::size_type v34 = *((void *)&v39 + 1);
  }
  std::string::append(a4, v33, v34);
  if (SHIBYTE(cap) < 0) {
    operator delete((void *)v39);
  }
}

  if (data[23] < 0)
  {
    std::string::size_type v18 = *(std::string::pointer *)data;
    __int128 v19 = *((void *)data + 1);
  }

  else
  {
    std::string::size_type v18 = data;
    __int128 v19 = data[23];
  }

  if (v19 <= v8) {
    goto LABEL_53;
  }
  __int128 v20 = v8;
  while (v18[v20] != 47)
  {
    if (v19 == ++v20) {
      goto LABEL_53;
    }
  }

  if (v19 == v20 || v20 == -1LL) {
LABEL_53:
  }
    __int128 v20 = v3;
  if (data[23] < 0) {
    data = *(std::string::pointer *)data;
  }
  sub_1000CEE80(v1, &data[v8], &data[v20], v20 - v8);
}

void sub_10001B3AC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, void *__p, uint64_t a29, int a30, __int16 a31, char a32, char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_10001B48C(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)off_100125390;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
}

uint64_t sub_10001B4BC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v41 = 0LL;
  uint64_t v42 = 0LL;
  uint64_t v43 = 0LL;
  unsigned int v5 = (std::exception_vtbl *)(a1 + 112);
  uint64_t v6 = a1 + 40;
  while (2)
  {
    switch(*(_DWORD *)(a1 + 32))
    {
      case 1:
        LOBYTE(v38.__vftable) = 1;
        sub_100020290(a2, (unsigned __int8 *)&v38, a3);
        goto LABEL_17;
      case 2:
        LOBYTE(v38.__vftable) = 0;
        sub_100020290(a2, (unsigned __int8 *)&v38, a3);
        goto LABEL_17;
      case 3:
        v38.__vftable = 0LL;
        sub_100020594(a2, (uint64_t)&v38, a3);
        goto LABEL_17;
      case 4:
        sub_100020B68(a2, (uint64_t)v5, a3);
        goto LABEL_17;
      case 5:
        v38.__vftable = *(std::exception_vtbl **)(a1 + 152);
        sub_100020E24(a2, (uint64_t *)&v38, a3);
        goto LABEL_17;
      case 6:
        v38.__vftable = *(std::exception_vtbl **)(a1 + 144);
        sub_100020864(a2, (uint64_t *)&v38, a3);
        goto LABEL_17;
      case 7:
        if ((*(void *)(a1 + 160) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000LL)
        {
          v38.__vftable = *(std::exception_vtbl **)(a1 + 160);
          sub_10001FF8C(a2, (uint64_t *)&v38, a3);
          goto LABEL_17;
        }

        uint64_t v29 = *(void *)(a1 + 64);
        sub_10001ACAC(v6, &v40);
        sub_10001ACAC(v6, &v34);
        unint64_t v30 = std::string::insert(&v34, 0LL, "number overflow parsing '");
        __int128 v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__l.__cap_ = v30->__r_.__value_.__l.__cap_;
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v31;
        v30->__r_.__value_.__l.__size_ = 0LL;
        v30->__r_.__value_.__l.__cap_ = 0LL;
        v30->__r_.__value_.__r.__words[0] = 0LL;
        __int128 v32 = std::string::append(&__p, "'");
        __int128 v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        std::string::size_type cap = v32->__r_.__value_.__l.__cap_;
        *(_OWORD *)std::string v36 = v33;
        v32->__r_.__value_.__l.__size_ = 0LL;
        v32->__r_.__value_.__l.__cap_ = 0LL;
        v32->__r_.__value_.__r.__words[0] = 0LL;
        sub_10001CF7C(406, (uint64_t)v36, &v38);
        uint64_t v19 = sub_10001BE88((uint64_t)a2, v29, (uint64_t)&v40, (uint64_t)&v38);
        v38.__vftable = (std::exception_vtbl *)off_100125390;
        std::runtime_error::~runtime_error(&v39);
        std::exception::~exception(&v38);
        if (SHIBYTE(cap) < 0) {
          operator delete(v36[0]);
        }
        goto LABEL_43;
      case 8:
        int v7 = sub_100019174(v6);
        *(_DWORD *)(a1 + 32) = v7;
        if (v7 == 10) {
          goto LABEL_12;
        }
        LOBYTE(v38.__vftable) = 1;
        sub_10001C114((uint64_t)&v41, &v38);
        continue;
      case 9:
        if ((sub_10001F7E8(a2, 0xFFFFFFFFFFFFFFFFLL, a3) & 1) == 0)
        {
LABEL_55:
          uint64_t v19 = 0LL;
          goto LABEL_37;
        }

        int v8 = sub_100019174(v6);
        *(_DWORD *)(a1 + 32) = v8;
        if (v8 != 11)
        {
          if (v8 != 4) {
            goto LABEL_51;
          }
          uint64_t v17 = *(uint64_t ***)(*(void *)(a2[2] - 8) + 8LL);
          v38.__vftable = v5;
          a2[4] = (uint64_t)(sub_10001DE5C( v17,  (const void **)&v5->~exception,  (uint64_t)&unk_1000F5000,  (__int128 **)&v38)
                          + 7);
          int v18 = sub_100019174(v6);
          *(_DWORD *)(a1 + 32) = v18;
          if (v18 != 12) {
            goto LABEL_54;
          }
          LOBYTE(v38.__vftable) = 0;
          sub_10001C114((uint64_t)&v41, &v38);
          int v16 = sub_100019174(v6);
LABEL_32:
          *(_DWORD *)(a1 + 32) = v16;
          continue;
        }

LABEL_12:
        a2[2] -= 8LL;
LABEL_17:
        uint64_t v9 = v42;
        if (!v42)
        {
LABEL_36:
          uint64_t v19 = 1LL;
          goto LABEL_37;
        }

        while (2)
        {
          if (((*(void *)&v41[((unint64_t)(v9 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8LL] >> (v9 - 1)) & 1) != 0)
          {
            int v10 = sub_100019174(v6);
            *(_DWORD *)(a1 + 32) = v10;
            if (v10 == 13) {
              goto LABEL_31;
            }
            if (v10 != 10)
            {
              uint64_t v24 = *(void *)(a1 + 64);
              sub_10001ACAC(v6, &v40);
              *(_OWORD *)std::string v36 = *(_OWORD *)(a1 + 64);
              std::string::size_type cap = *(void *)(a1 + 80);
              sub_100005064(&v34, "array");
              sub_10001B04C(a1, 0xAu, (uint64_t)&v34, &__p);
              sub_10001AD8C(101, (uint64_t *)v36, (uint64_t)&__p, &v38);
              uint64_t v22 = sub_10001BE88((uint64_t)a2, v24, (uint64_t)&v40, (uint64_t)&v38);
              goto LABEL_42;
            }

            a2[2] -= 8LL;
            uint64_t v11 = v42;
            if (!v42)
            {
              int v25 = 383;
              goto LABEL_53;
            }

        a2[2] -= 8LL;
LABEL_17:
        uint64_t v9 = v42;
        if (!v42)
        {
LABEL_36:
          uint64_t v19 = 1LL;
          goto LABEL_37;
        }

        while (2)
        {
          if (((*(void *)&v41[((unint64_t)(v9 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8LL] >> (v9 - 1)) & 1) != 0)
          {
            int v10 = sub_1000272AC(v6);
            *(_DWORD *)(a1 + 32) = v10;
            if (v10 == 13) {
              goto LABEL_31;
            }
            if (v10 != 10)
            {
              uint64_t v24 = *(void *)(a1 + 64);
              sub_100028810(v6, &v40);
              *(_OWORD *)std::string v36 = *(_OWORD *)(a1 + 64);
              std::string::size_type cap = *(void *)(a1 + 80);
              sub_100005064(&v34, "array");
              sub_1000288F0(a1, 0xAu, (uint64_t)&v34, &__p);
              sub_10001AD8C(101, (uint64_t *)v36, (uint64_t)&__p, &v38);
              uint64_t v22 = sub_10001BE88((uint64_t)a2, v24, (uint64_t)&v40, (uint64_t)&v38);
              goto LABEL_42;
            }

            a2[2] -= 8LL;
            uint64_t v11 = v42;
            if (!v42)
            {
              int v25 = 383;
              goto LABEL_53;
            }

  uint64_t v28 = *(_DWORD *)(a1 + 72) - 1;
  if (v28 > 2) {
    uint64_t v29 = "Daily";
  }
  else {
    uint64_t v29 = off_100128348[v28];
  }
  sub_100005064(&v69, v29);
  sub_100008E5C((uint64_t)v49, (uint64_t)&v69);
  unint64_t v30 = sub_100003F94((unsigned __int8 *)a2, "aggregationPeriod");
  sub_1000041AC((uint64_t)v49);
  __int128 v31 = *(_BYTE *)v30;
  *(_BYTE *)unint64_t v30 = v49[0];
  v49[0] = v31;
  __int128 v32 = (uint64_t *)v30[1];
  v30[1] = (uint64_t)v50;
  unsigned __int8 v50 = v32;
  sub_1000041AC((uint64_t)v30);
  sub_1000041AC((uint64_t)v49);
  sub_10000425C(&v50, v49[0]);
  if (SBYTE7(v70) < 0) {
    operator delete((void *)v69);
  }
  if (*(_DWORD *)(a1 + 72))
  {
    sub_100043840((const std::chrono::system_clock::time_point *)(a1 + 80), (std::stringbuf::string_type *)&v69);
    sub_100008E5C((uint64_t)v47, (uint64_t)&v69);
    __int128 v33 = sub_100003F94((unsigned __int8 *)a2, "aggregationPeriodStartTimestamp");
    sub_1000041AC((uint64_t)v47);
    std::string v34 = *(_BYTE *)v33;
    *(_BYTE *)__int128 v33 = v47[0];
    v47[0] = v34;
    std::string v35 = (uint64_t *)v33[1];
    v33[1] = (uint64_t)v48;
    time_t v48 = v35;
    sub_1000041AC((uint64_t)v33);
    sub_1000041AC((uint64_t)v47);
    sub_10000425C(&v48, v47[0]);
    if (SBYTE7(v70) < 0) {
      operator delete((void *)v69);
    }
  }

  v36.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  std::string v37 = *(_DWORD *)(a1 + 72);
  std::exception v38 = *(void *)(a1 + 80);
  __int128 v72 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&std::runtime_error v39 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v39 + 1) = 0xAAAAAAAAAAAAAAAALL;
  unsigned __int8 v70 = v39;
  __int128 v71 = v39;
  uint64_t v69 = v39;
  sub_10003E608(v38, (uint64_t)&v69);
  switch(v37)
  {
    case 0:
      v65 = v69;
      unsigned __int8 v66 = v70;
      v67 = v71;
      unint64_t v68 = v72;
      v40.__d_.__rep_ = sub_10003E688((uint64_t)&v65).__d_.__rep_;
      break;
    case 1:
      v65 = v69;
      unsigned __int8 v66 = v70;
      v67 = v71;
      unint64_t v68 = v72;
      v40.__d_.__rep_ = sub_10003E710((uint64_t)&v65).__d_.__rep_;
      break;
    case 2:
      v65 = v69;
      unsigned __int8 v66 = v70;
      v67 = v71;
      unint64_t v68 = v72;
      v40.__d_.__rep_ = sub_10003E7DC((uint64_t)&v65).__d_.__rep_;
      break;
    case 3:
      v65 = v69;
      unsigned __int8 v66 = v70;
      v67 = v71;
      unint64_t v68 = v72;
      v40.__d_.__rep_ = sub_10003E880((uint64_t)&v65).__d_.__rep_;
      break;
    default:
      v40.__d_.__rep_ = 0LL;
      break;
  }

  if (v36.__d_.__rep_ < v40.__d_.__rep_) {
    v40.__d_.__rep_ = v36.__d_.__rep_;
  }
  uint64_t v41 = (uint64_t *)sub_10003E5CC(v40.__d_.__rep_, *(void *)(a1 + 80));
  v45[0] = 6;
  uint64_t v46 = v41;
  sub_1000041AC((uint64_t)v45);
  sub_1000041AC((uint64_t)v45);
  uint64_t v42 = sub_100003F94((unsigned __int8 *)a2, "numDaysAggregated");
  sub_1000041AC((uint64_t)v45);
  uint64_t v43 = *(_BYTE *)v42;
  *(_BYTE *)uint64_t v42 = v45[0];
  v45[0] = v43;
  __int128 v44 = (uint64_t *)v42[1];
  v42[1] = (uint64_t)v46;
  uint64_t v46 = v44;
  sub_1000041AC((uint64_t)v42);
  sub_1000041AC((uint64_t)v45);
  sub_10000425C(&v46, v45[0]);
}

        a2[2] -= 8LL;
LABEL_17:
        uint64_t v9 = v42;
        if (!v42)
        {
LABEL_36:
          uint64_t v19 = 1LL;
          goto LABEL_37;
        }

        while (2)
        {
          if (((*(void *)&v41[((unint64_t)(v9 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8LL] >> (v9 - 1)) & 1) != 0)
          {
            int v10 = sub_1000877C8(v6);
            *(_DWORD *)(a1 + 32) = v10;
            if (v10 == 13) {
              goto LABEL_31;
            }
            if (v10 != 10)
            {
              uint64_t v24 = *(void *)(a1 + 72);
              sub_1000891B0(v6, &v40);
              *(_OWORD *)std::string v36 = *(_OWORD *)(a1 + 72);
              std::string::size_type cap = *(void *)(a1 + 88);
              sub_100005064(&v34, "array");
              sub_100089290(a1, 0xAu, (uint64_t)&v34, &__p);
              sub_10001AD8C(101, (uint64_t *)v36, (uint64_t)&__p, &v38);
              uint64_t v22 = sub_10001BE88((uint64_t)a2, v24, (uint64_t)&v40, (uint64_t)&v38);
              goto LABEL_42;
            }

            a2[2] -= 8LL;
            uint64_t v11 = v42;
            if (!v42)
            {
              int v25 = 383;
              goto LABEL_53;
            }

    int v7 = v8;
  }

  while (v8);
  uint64_t v3 = v21;
  if (v4 == *(uint64_t **)(v21 + 144))
  {
    unsigned int v5 = v20;
LABEL_20:
    std::string v37 = 0u;
    std::exception v38 = 0u;
    std::string v36 = 0u;
    int v4 = (uint64_t *)sub_10009F990(v5, v4, (uint64_t)&v36);
    __int128 v33 = (void **)&v37 + 1;
    sub_100004D64(&v33);
    __int128 v33 = (void **)&v36;
    sub_100004D64(&v33);
    sub_1000A2FF8(*a2, a2[1], v4);
    uint64_t v28 = 0xAAAAAAAAAAAAAAAALL;
    uint64_t v29 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    sub_100057B94((uint64_t)&v36, a2);
    sub_10009DE10(v3, (uint64_t)&v36, &v28);
    sub_1000041AC((uint64_t)&v36);
    sub_10000425C((uint64_t **)&v36 + 1, v36);
    if (v28 == 2)
    {
      int v25 = (void **)&v28;
      uint64_t v26 = 0uLL;
      *(void *)&uint64_t v27 = 0LL;
      *((void *)&v27 + 1) = 0x8000000000000000LL;
      sub_100021128((unsigned __int8 **)&v25);
      uint64_t v22 = (unsigned __int8 *)&v28;
      uint64_t v23 = 0uLL;
      *(void *)&uint64_t v24 = 0LL;
      *((void *)&v24 + 1) = 0x8000000000000000LL;
      sub_1000211FC(&v22);
      std::string v34 = v26;
      std::string v35 = v27;
      __int128 v31 = v23;
      __int128 v32 = v24;
      *(void *)&int v18 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
      std::string v37 = v18;
      std::exception v38 = v18;
      std::string v36 = v18;
      __int128 v33 = v25;
      unint64_t v30 = v22;
      sub_1000A3088((uint64_t)&v33, &v30, v4 + 3, (uint64_t)&v36);
    }

    sub_1000041AC((uint64_t)&v28);
    sub_10000425C(&v29, v28);
    return v4;
  }

  int v14 = (unsigned __int8 *)*v4;
  int v15 = (unsigned __int8 *)v4[1];
  int v16 = (unsigned __int8 *)*a2;
  uint64_t v17 = (unsigned __int8 *)a2[1];
  unsigned int v5 = v20;
  if (&v15[-*v4] != &v17[-*a2]) {
    goto LABEL_20;
  }
  while (v14 != v15 && v16 != v17)
  {
    v14 += 16;
    v16 += 16;
  }

  if (v14 != v15 || v16 != v17) {
    goto LABEL_20;
  }
  return v4;
}

    uint64_t v3 = 0LL;
    goto LABEL_27;
  }

  uint64_t v6 = *((unsigned __int8 *)v4 + 23);
  if (size > v6) {
    goto LABEL_12;
  }
LABEL_14:
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (size)
  {
    int v8 = (char *)v4 + v6;
    if ((uint64_t)v6 >= (uint64_t)size)
    {
      int v13 = p_p->__r_.__value_.__s.__data_[0];
      int v14 = v4;
      do
      {
        int v15 = v6 - size;
        if (v15 == -1LL) {
          break;
        }
        int v16 = (char *)memchr(v14, v13, v15 + 1);
        if (!v16) {
          break;
        }
        uint64_t v9 = v16;
        if (!memcmp(v16, p_p, size)) {
          goto LABEL_20;
        }
        int v14 = v9 + 1;
        uint64_t v6 = v8 - (v9 + 1);
      }

      while ((uint64_t)v6 >= (uint64_t)size);
    }

    uint64_t v9 = v8;
LABEL_20:
    uint64_t v3 = v9 != v8 && v9 - (char *)v4 != -1;
  }

  else
  {
    uint64_t v3 = 1LL;
  }

LABEL_54:
        uint64_t v28 = *(void *)(a1 + 64);
        sub_10001ACAC(v6, &v40);
        *(_OWORD *)std::string v36 = *(_OWORD *)(a1 + 64);
        std::string::size_type cap = *(void *)(a1 + 80);
        sub_100005064(&v34, "object separator");
        sub_10001B04C(a1, 0xCu, (uint64_t)&v34, &__p);
        sub_10001AD8C(101, (uint64_t *)v36, (uint64_t)&__p, &v38);
        uint64_t v22 = sub_10001BE88((uint64_t)a2, v28, (uint64_t)&v40, (uint64_t)&v38);
LABEL_42:
        uint64_t v19 = v22;
        v38.__vftable = (std::exception_vtbl *)off_100125390;
        std::runtime_error::~runtime_error(&v39);
        std::exception::~exception(&v38);
LABEL_43:
LABEL_37:
        if (v41) {
          operator delete(v41);
        }
        return v19;
      case 0xE:
        uint64_t v21 = *(void *)(a1 + 64);
        sub_10001ACAC(v6, &v40);
        *(_OWORD *)std::string v36 = *(_OWORD *)(a1 + 64);
        std::string::size_type cap = *(void *)(a1 + 80);
        sub_100005064(&v34, "value");
        sub_10001B04C(a1, 0, (uint64_t)&v34, &__p);
        sub_10001AD8C(101, (uint64_t *)v36, (uint64_t)&__p, &v38);
        uint64_t v22 = sub_10001BE88((uint64_t)a2, v21, (uint64_t)&v40, (uint64_t)&v38);
        goto LABEL_42;
      default:
        uint64_t v23 = *(void *)(a1 + 64);
        sub_10001ACAC(v6, &v40);
        *(_OWORD *)std::string v36 = *(_OWORD *)(a1 + 64);
        std::string::size_type cap = *(void *)(a1 + 80);
        sub_100005064(&v34, "value");
        sub_10001B04C(a1, 0x10u, (uint64_t)&v34, &__p);
        sub_10001AD8C(101, (uint64_t *)v36, (uint64_t)&__p, &v38);
        uint64_t v22 = sub_10001BE88((uint64_t)a2, v23, (uint64_t)&v40, (uint64_t)&v38);
        goto LABEL_42;
    }
  }

        uint64_t v28 = *(void *)(a1 + 64);
        sub_100028810(v6, &v40);
        *(_OWORD *)std::string v36 = *(_OWORD *)(a1 + 64);
        std::string::size_type cap = *(void *)(a1 + 80);
        sub_100005064(&v34, "object separator");
        sub_1000288F0(a1, 0xCu, (uint64_t)&v34, &__p);
        sub_10001AD8C(101, (uint64_t *)v36, (uint64_t)&__p, &v38);
        uint64_t v22 = sub_10001BE88((uint64_t)a2, v28, (uint64_t)&v40, (uint64_t)&v38);
LABEL_42:
        uint64_t v19 = v22;
        v38.__vftable = (std::exception_vtbl *)off_100125390;
        std::runtime_error::~runtime_error(&v39);
        std::exception::~exception(&v38);
LABEL_43:
LABEL_37:
        if (v41) {
          operator delete(v41);
        }
        return v19;
      case 0xE:
        uint64_t v21 = *(void *)(a1 + 64);
        sub_100028810(v6, &v40);
        *(_OWORD *)std::string v36 = *(_OWORD *)(a1 + 64);
        std::string::size_type cap = *(void *)(a1 + 80);
        sub_100005064(&v34, "value");
        sub_1000288F0(a1, 0, (uint64_t)&v34, &__p);
        sub_10001AD8C(101, (uint64_t *)v36, (uint64_t)&__p, &v38);
        uint64_t v22 = sub_10001BE88((uint64_t)a2, v21, (uint64_t)&v40, (uint64_t)&v38);
        goto LABEL_42;
      default:
        uint64_t v23 = *(void *)(a1 + 64);
        sub_100028810(v6, &v40);
        *(_OWORD *)std::string v36 = *(_OWORD *)(a1 + 64);
        std::string::size_type cap = *(void *)(a1 + 80);
        sub_100005064(&v34, "value");
        sub_1000288F0(a1, 0x10u, (uint64_t)&v34, &__p);
        sub_10001AD8C(101, (uint64_t *)v36, (uint64_t)&__p, &v38);
        uint64_t v22 = sub_10001BE88((uint64_t)a2, v23, (uint64_t)&v40, (uint64_t)&v38);
        goto LABEL_42;
    }
  }

        uint64_t v28 = *(void *)(a1 + 72);
        sub_1000891B0(v6, &v40);
        *(_OWORD *)std::string v36 = *(_OWORD *)(a1 + 72);
        std::string::size_type cap = *(void *)(a1 + 88);
        sub_100005064(&v34, "object separator");
        sub_100089290(a1, 0xCu, (uint64_t)&v34, &__p);
        sub_10001AD8C(101, (uint64_t *)v36, (uint64_t)&__p, &v38);
        uint64_t v22 = sub_10001BE88((uint64_t)a2, v28, (uint64_t)&v40, (uint64_t)&v38);
LABEL_42:
        uint64_t v19 = v22;
        v38.__vftable = (std::exception_vtbl *)off_100125390;
        std::runtime_error::~runtime_error(&v39);
        std::exception::~exception(&v38);
LABEL_43:
LABEL_37:
        if (v41) {
          operator delete(v41);
        }
        return v19;
      case 0xE:
        uint64_t v21 = *(void *)(a1 + 72);
        sub_1000891B0(v6, &v40);
        *(_OWORD *)std::string v36 = *(_OWORD *)(a1 + 72);
        std::string::size_type cap = *(void *)(a1 + 88);
        sub_100005064(&v34, "value");
        sub_100089290(a1, 0, (uint64_t)&v34, &__p);
        sub_10001AD8C(101, (uint64_t *)v36, (uint64_t)&__p, &v38);
        uint64_t v22 = sub_10001BE88((uint64_t)a2, v21, (uint64_t)&v40, (uint64_t)&v38);
        goto LABEL_42;
      default:
        uint64_t v23 = *(void *)(a1 + 72);
        sub_1000891B0(v6, &v40);
        *(_OWORD *)std::string v36 = *(_OWORD *)(a1 + 72);
        std::string::size_type cap = *(void *)(a1 + 88);
        sub_100005064(&v34, "value");
        sub_100089290(a1, 0x10u, (uint64_t)&v34, &__p);
        sub_10001AD8C(101, (uint64_t *)v36, (uint64_t)&__p, &v38);
        uint64_t v22 = sub_10001BE88((uint64_t)a2, v23, (uint64_t)&v40, (uint64_t)&v38);
        goto LABEL_42;
    }
  }

void sub_10001BD14( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, std::exception a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, void *a35, uint64_t a36, int a37, __int16 a38, char a39, char a40)
{
  a30.__vftable = (std::exception_vtbl *)off_100125390;
  std::runtime_error::~runtime_error(v40 + 1);
  std::exception::~exception(&a30);
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  uint64_t v43 = *(void **)(v41 - 112);
  if (v43) {
    operator delete(v43);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10001BE88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_BYTE *)(a1 + 40) = 1;
  if (*(_BYTE *)(a1 + 41))
  {
    switch(~(100 * (*(_DWORD *)(a4 + 8) / 100 / 100)) + *(_DWORD *)(a4 + 8) / 100)
    {
      case 0:
        exception = __cxa_allocate_exception(0x28uLL);
        uint64_t v6 = (void *)sub_10001F3D0((uint64_t)exception, a4);
      case 1:
        int v7 = __cxa_allocate_exception(0x20uLL);
        int v8 = (void *)sub_10001F474((uint64_t)v7, a4);
      case 2:
        uint64_t v9 = __cxa_allocate_exception(0x20uLL);
        int v10 = (void *)sub_10001F4C0((uint64_t)v9, a4);
      case 3:
        uint64_t v11 = __cxa_allocate_exception(0x20uLL);
        int v12 = (void *)sub_10001F428((uint64_t)v11, a4);
      case 4:
        int v13 = __cxa_allocate_exception(0x20uLL);
        int v14 = (void *)sub_10001F50C((uint64_t)v13, a4);
      default:
        sub_1000D753C();
    }
  }

  return 0LL;
}

uint64_t sub_10001BFCC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + sub_100007004((uint64_t)v5 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  uint64_t v6 = a1 + 32;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_BYTE *)(a1 + 8sub_100007004((uint64_t)v5 + 8) = 0;
  sub_1000123E4(a1 + 96, a3);
  *(_BYTE *)(a1 + 136) = 9;
  *(_BYTE *)(a1 + 12sub_100007004((uint64_t)v5 + 8) = a4;
  *(void *)(a1 + 144) = 0LL;
  sub_1000041AC(a1 + 136);
  char v8 = 1;
  sub_10001C114(v6, &v8);
  return a1;
}

void sub_10001C09C(_Unwind_Exception *a1)
{
  uint64_t v6 = v3;
  sub_10000417C(v4);
  char v8 = (void *)v1[15];
  if (v8 == v6)
  {
    uint64_t v9 = v6;
    uint64_t v10 = 4LL;
  }

  else
  {
    if (!v8) {
      goto LABEL_6;
    }
    uint64_t v10 = 5LL;
    uint64_t v9 = (void *)v1[15];
  }

  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  uint64_t v11 = (void *)v1[7];
  if (v11) {
    operator delete(v11);
  }
  if (*v2) {
    operator delete(*v2);
  }
  int v12 = *v5;
  if (*v5)
  {
    v1[2] = v12;
    operator delete(v12);
  }

  _Unwind_Resume(a1);
}

void sub_10001C114(uint64_t a1, _BYTE *a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v4 == v5 << 6)
  {
    unint64_t v6 = v5 << 7;
    if (v6 <= (v4 & 0xFFFFFFFFFFFFFFC0LL) + 64) {
      unint64_t v6 = (v4 & 0xFFFFFFFFFFFFFFC0LL) + 64;
    }
    if (v4 <= 0x3FFFFFFFFFFFFFFELL) {
      unint64_t v7 = v6;
    }
    else {
      unint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
    }
    sub_10001C1B8((char **)a1, v7);
    unint64_t v4 = *(void *)(a1 + 8);
  }

  *(void *)(a1 + sub_100007004((uint64_t)v5 + 8) = v4 + 1;
  char v8 = *(char **)a1;
  unint64_t v9 = v4 >> 6;
  uint64_t v10 = 1LL << v4;
  if (*a2) {
    uint64_t v11 = *(void *)&v8[8 * v9] | v10;
  }
  else {
    uint64_t v11 = *(void *)&v8[8 * v9] & ~v10;
  }
  *(void *)&v8[8 * v9] = v11;
}

void sub_10001C1B8(char **a1, unint64_t a2)
{
  if (a2 > (void)a1[2] << 6)
  {
    if ((a2 & 0x8000000000000000LL) != 0) {
      sub_1000046F8();
    }
    unint64_t v6 = 0LL;
    __int128 v7 = 0uLL;
    sub_10001C2A0(&v6, a2);
    unint64_t v3 = (unint64_t)a1[1];
    uint64_t v10 = *a1;
    int v11 = 0;
    char v8 = &v10[8 * (v3 >> 6)];
    int v9 = v3 & 0x3F;
    sub_10001C2E4(&v6, (uint64_t)&v10, (uint64_t)&v8, v3);
    unint64_t v4 = *a1;
    *a1 = v6;
    unint64_t v6 = v4;
    __int128 v5 = *(_OWORD *)(a1 + 1);
    *(_OWORD *)(a1 + 1) = v7;
    __int128 v7 = v5;
    if (v4) {
      operator delete(v4);
    }
  }

void sub_10001C288( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10001C2A0(void *a1, uint64_t a2)
{
  if (a2 < 0) {
    sub_1000046F8();
  }
  uint64_t result = sub_10001C3B0((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0LL;
  a1[2] = v4;
  return result;
}

void sub_10001C2E4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = v4 + a4;
  a1[1] = v4 + a4;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41) {
      unint64_t v6 = (v5 - 1) >> 6;
    }
    else {
      unint64_t v6 = 0LL;
    }
    *(void *)(*a1 + 8 * v6) = 0LL;
  }

  int v7 = *(_DWORD *)(a2 + 8);
  uint64_t v8 = *(void *)a3;
  int v9 = *(_DWORD *)(a3 + 8);
  uint64_t v10 = *a1 + 8 * (v4 >> 6);
  uint64_t v16 = *(void *)a2;
  int v17 = v7;
  uint64_t v14 = v8;
  int v15 = v9;
  uint64_t v12 = v10;
  int v13 = v4 & 0x3F;
  sub_10001C3E4(&v16, &v14, &v12, (uint64_t)v11);
}

void *sub_10001C3B0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_100004828();
  }
  return operator new(8 * a2);
}

void sub_10001C3E4(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = *a1;
  int v6 = *((_DWORD *)a1 + 2);
  uint64_t v7 = *a2;
  int v8 = *((_DWORD *)a2 + 2);
  *(void *)&__int128 v9 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v20 = v9;
  __int128 v21 = v9;
  uint64_t v18 = v5;
  int v19 = v6;
  uint64_t v16 = v7;
  int v17 = v8;
  int v10 = *((_DWORD *)a3 + 2);
  uint64_t v14 = *a3;
  int v15 = v10;
  sub_10001C4B8((uint64_t)&v18, (uint64_t)&v16, (uint64_t)&v14, (uint64_t)&v20);
  int v11 = DWORD2(v20);
  uint64_t v12 = v21;
  int v13 = DWORD2(v21);
  *(void *)a4 = v20;
  *(_DWORD *)(a4 + sub_100007004((uint64_t)v5 + 8) = v11;
  *(void *)(a4 + 16) = v12;
  *(_DWORD *)(a4 + 24) = v13;
}

void sub_10001C4B8(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  unint64_t v4 = *(void **)a1;
  int v5 = *(_DWORD *)(a1 + 8);
  for (i = *(_DWORD *)(a3 + 8); *(void *)a1 != *(void *)a2 || v5 != *(_DWORD *)(a2 + 8); int v5 = *(_DWORD *)(a1 + 8))
  {
    int v8 = *(uint64_t **)a3;
    uint64_t v9 = 1LL << i;
    if (((*v4 >> v5) & 1) != 0) {
      uint64_t v10 = *v8 | v9;
    }
    else {
      uint64_t v10 = *v8 & ~v9;
    }
    *int v8 = v10;
    if (v5 == 63)
    {
      int v11 = 0;
      *(void *)a1 = v4 + 1;
    }

    else
    {
      int v11 = v5 + 1;
    }

    *(_DWORD *)(a1 + sub_100007004((uint64_t)v5 + 8) = v11;
    int v12 = *(_DWORD *)(a3 + 8);
    if (v12 == 63)
    {
      int i = 0;
      *(void *)a3 += 8LL;
    }

    else
    {
      int i = v12 + 1;
    }

    *(_DWORD *)(a3 + sub_100007004((uint64_t)v5 + 8) = i;
    unint64_t v4 = *(void **)a1;
  }

  *(void *)a4 = v4;
  *(_DWORD *)(a4 + sub_100007004((uint64_t)v5 + 8) = v5;
  *(void *)(a4 + 16) = *(void *)a3;
  *(_DWORD *)(a4 + 24) = i;
}

uint64_t sub_10001C588(uint64_t *a1, unint64_t a2)
{
  unint64_t v4 = (void **)(a1 + 2);
  int v5 = (char **)(a1 + 1);
  char v31 = sub_10001D110((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 0);
  sub_10001C114((uint64_t)(v4 + 2), &v31);
  LOBYTE(v29) = 1;
  sub_10001D17C(a1, (unsigned __int8 *)&v29, 1LL);
  uint64_t v7 = v6;
  int v8 = *v4;
  unint64_t v9 = a1[3];
  if ((unint64_t)v8 >= v9)
  {
    uint64_t v11 = ((char *)v8 - *v5) >> 3;
    uint64_t v12 = v9 - (void)*v5;
    uint64_t v13 = v12 >> 2;
    else {
      unint64_t v14 = v13;
    }
    if (v14) {
      int v15 = (char *)sub_10001C3B0((uint64_t)(a1 + 3), v14);
    }
    else {
      int v15 = 0LL;
    }
    uint64_t v16 = &v15[8 * v11];
    int v17 = &v15[8 * v14];
    *(void *)uint64_t v16 = v7;
    uint64_t v10 = v16 + 8;
    int v19 = (char *)a1[1];
    uint64_t v18 = (char *)a1[2];
    if (v18 != v19)
    {
      do
      {
        uint64_t v20 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v16 - 1) = v20;
        v16 -= 8;
      }

      while (v18 != v19);
      uint64_t v18 = *v5;
    }

    a1[1] = (uint64_t)v16;
    a1[2] = (uint64_t)v10;
    a1[3] = (uint64_t)v17;
    if (v18) {
      operator delete(v18);
    }
  }

  else
  {
    *int v8 = v6;
    uint64_t v10 = v8 + 1;
  }

  a1[2] = (uint64_t)v10;
  if (a2 != -1LL)
  {
    __int128 v21 = (char *)*(v10 - 1);
    if (v21)
    {
      unint64_t v22 = *v21;
      if (v22 > 2) {
        unint64_t v23 = 1LL;
      }
      else {
        unint64_t v23 = qword_1000F20A0[v22];
      }
      if (v23 < a2)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        std::to_string(&v28, a2);
        uint64_t v26 = std::string::insert(&v28, 0LL, "excessive object size: ");
        __int128 v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        std::string::size_type cap = v26->__r_.__value_.__l.__cap_;
        __int128 v29 = v27;
        v26->__r_.__value_.__l.__size_ = 0LL;
        v26->__r_.__value_.__l.__cap_ = 0LL;
        v26->__r_.__value_.__r.__words[0] = 0LL;
        sub_10001CF7C(408, (uint64_t)&v29, exception);
      }
    }
  }

  return 1LL;
}

void sub_10001C7A8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
}

uint64_t sub_10001C810(void *a1)
{
  uint64_t v2 = a1[2];
  if (*(void *)(v2 - 8)
    && (sub_10001D110((uint64_t)(a1 + 12), ((unint64_t)(v2 - a1[1]) >> 3) - 1, 1) & 1) == 0)
  {
    uint64_t v3 = sub_10000C3E4((uint64_t)v25, (uint64_t)(a1 + 17));
    uint64_t v4 = *(void *)(a1[2] - 8LL);
    sub_1000041AC(v3);
    char v5 = *(_BYTE *)v4;
    *(_BYTE *)uint64_t v4 = v25[0];
    v25[0] = v5;
    uint64_t v6 = *(uint64_t **)(v4 + 8);
    *(void *)(v4 + sub_100007004((uint64_t)v5 + 8) = v26;
    uint64_t v26 = v6;
    sub_1000041AC(v4);
    sub_1000041AC((uint64_t)v25);
    sub_10000425C(&v26, v25[0]);
  }

  uint64_t v8 = a1[1];
  uint64_t v7 = a1[2];
  if (v8 == v7) {
    sub_1000D7564();
  }
  uint64_t v9 = a1[5];
  if (!v9) {
    sub_1000D758C();
  }
  a1[2] = v7 - 8;
  a1[5] = v9 - 1;
  if (v8 != v7 - 8)
  {
    uint64_t v10 = *(unsigned __int8 **)(v7 - 16);
    if (v10)
    {
      if (*v10 - 1 <= 1)
      {
        *(void *)&v24[32] = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&__int128 v11 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)uint64_t v24 = v11;
        *(_OWORD *)&v24[16] = v11;
        sub_1000211B0(v24, (uint64_t)v10);
        sub_100021128((unsigned __int8 **)v24);
        uint64_t v12 = *(void *)(a1[2] - 8LL);
        *(void *)&__int128 v13 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
        __int128 v21 = v13;
        __int128 v22 = v13;
        unint64_t v23 = 0xAAAAAAAAAAAAAAAALL;
        sub_1000211B0(&v21, v12);
        sub_1000211FC((unsigned __int8 **)&v21);
        if (!sub_10001855C((unsigned __int8 **)v24, (unsigned __int8 **)&v21))
        {
          while (*sub_10001D4BC((unsigned __int8 **)v24) != 9)
          {
            sub_100018704((unsigned __int8 **)v24);
            uint64_t v14 = *(void *)(a1[2] - 8LL);
            *(void *)&__int128 v15 = 0xAAAAAAAAAAAAAAAALL;
            *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
            __int128 v21 = v15;
            __int128 v22 = v15;
            unint64_t v23 = 0xAAAAAAAAAAAAAAAALL;
            sub_1000211B0(&v21, v14);
            sub_1000211FC((unsigned __int8 **)&v21);
          }

          uint64_t v16 = *(unsigned __int8 **)(a1[2] - 8LL);
          uint64_t v18 = *(void *)v24;
          __int128 v19 = *(_OWORD *)&v24[8];
          __int128 v20 = *(_OWORD *)&v24[24];
          sub_10001D610(v16, (uint64_t)&v18, (uint64_t)&v21);
        }
      }
    }
  }

  return 1LL;
}

uint64_t sub_10001CA20(void *a1, __int128 *a2)
{
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  __int128 v13 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10000B990((uint64_t)&v12, (uint64_t)a2);
  char v11 = sub_10001D110((uint64_t)(a1 + 12), (a1[2] - a1[1]) >> 3, 4);
  sub_10001C114((uint64_t)(a1 + 7), &v11);
  if (v11 && *(void *)(a1[2] - 8LL))
  {
    sub_10000C3E4((uint64_t)v9, (uint64_t)(a1 + 17));
    uint64_t v4 = *(uint64_t ***)(*(void *)(a1[2] - 8LL) + 8LL);
    uint64_t v14 = a2;
    char v5 = sub_10001DE5C(v4, (const void **)a2, (uint64_t)&unk_1000F5000, &v14);
    sub_1000041AC((uint64_t)v9);
    char v6 = *((_BYTE *)v5 + 56);
    v5 += 7;
    *(_BYTE *)char v5 = v9[0];
    v9[0] = v6;
    uint64_t v7 = (uint64_t *)v5[1];
    v5[1] = (uint64_t)v10;
    uint64_t v10 = v7;
    sub_1000041AC((uint64_t)v5);
    a1[10] = v5;
    sub_1000041AC((uint64_t)v9);
    sub_10000425C(&v10, v9[0]);
  }

  sub_1000041AC((uint64_t)&v12);
  sub_10000425C(&v13, v12);
  return 1LL;
}

void sub_10001CB70( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
}

uint64_t sub_10001CB9C(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = (void **)(a1 + 2);
  char v5 = (char **)(a1 + 1);
  char v31 = sub_10001D110((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 2);
  sub_10001C114((uint64_t)(v4 + 2), &v31);
  LOBYTE(v29) = 2;
  sub_10001D17C(a1, (unsigned __int8 *)&v29, 1LL);
  uint64_t v7 = v6;
  uint64_t v8 = *v4;
  unint64_t v9 = a1[3];
  if ((unint64_t)v8 >= v9)
  {
    uint64_t v11 = ((char *)v8 - *v5) >> 3;
    uint64_t v12 = v9 - (void)*v5;
    uint64_t v13 = v12 >> 2;
    else {
      unint64_t v14 = v13;
    }
    if (v14) {
      __int128 v15 = (char *)sub_10001C3B0((uint64_t)(a1 + 3), v14);
    }
    else {
      __int128 v15 = 0LL;
    }
    uint64_t v16 = &v15[8 * v11];
    int v17 = &v15[8 * v14];
    *(void *)uint64_t v16 = v7;
    uint64_t v10 = v16 + 8;
    __int128 v19 = (char *)a1[1];
    uint64_t v18 = (char *)a1[2];
    if (v18 != v19)
    {
      do
      {
        uint64_t v20 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v16 - 1) = v20;
        v16 -= 8;
      }

      while (v18 != v19);
      uint64_t v18 = *v5;
    }

    a1[1] = (uint64_t)v16;
    a1[2] = (uint64_t)v10;
    a1[3] = (uint64_t)v17;
    if (v18) {
      operator delete(v18);
    }
  }

  else
  {
    *uint64_t v8 = v6;
    uint64_t v10 = v8 + 1;
  }

  a1[2] = (uint64_t)v10;
  if (a2 != -1LL)
  {
    __int128 v21 = (char *)*(v10 - 1);
    if (v21)
    {
      unint64_t v22 = *v21;
      if (v22 > 2) {
        unint64_t v23 = 1LL;
      }
      else {
        unint64_t v23 = qword_1000F20A0[v22];
      }
      if (v23 < a2)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        std::to_string(&v28, a2);
        uint64_t v26 = std::string::insert(&v28, 0LL, "excessive array size: ");
        __int128 v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        std::string::size_type cap = v26->__r_.__value_.__l.__cap_;
        __int128 v29 = v27;
        v26->__r_.__value_.__l.__size_ = 0LL;
        v26->__r_.__value_.__l.__cap_ = 0LL;
        v26->__r_.__value_.__r.__words[0] = 0LL;
        sub_10001CF7C(408, (uint64_t)&v29, exception);
      }
    }
  }

  return 1LL;
}

void sub_10001CDBC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
}

uint64_t sub_10001CE24(void *a1)
{
  uint64_t v2 = a1[2];
  if (*(void *)(v2 - 8)
    && (sub_10001D110((uint64_t)(a1 + 12), ((unint64_t)(v2 - a1[1]) >> 3) - 1, 3) & 1) == 0)
  {
    sub_10000C3E4((uint64_t)v12, (uint64_t)(a1 + 17));
    uint64_t v4 = *(void *)(a1[2] - 8LL);
    sub_1000041AC((uint64_t)v12);
    char v5 = *(_BYTE *)v4;
    *(_BYTE *)uint64_t v4 = v12[0];
    v12[0] = v5;
    uint64_t v6 = *(uint64_t **)(v4 + 8);
    *(void *)(v4 + sub_100007004((uint64_t)v5 + 8) = v13;
    uint64_t v13 = v6;
    sub_1000041AC(v4);
    sub_1000041AC((uint64_t)v12);
    sub_10000425C(&v13, v12[0]);
    char v3 = 0;
  }

  else
  {
    char v3 = 1;
  }

  uint64_t v8 = a1[1];
  uint64_t v7 = a1[2];
  if (v8 == v7) {
    sub_1000D75B4();
  }
  uint64_t v9 = a1[5];
  if (!v9) {
    sub_1000D75DC();
  }
  a1[2] = v7 - 8;
  a1[5] = v9 - 1;
  if (v8 == v7 - 8) {
    char v3 = 1;
  }
  if ((v3 & 1) == 0)
  {
    uint64_t v10 = *(void *)(v7 - 16);
    if (*(_BYTE *)v10 == 2) {
      sub_100004CA0(*(void *)(v10 + 8), *(void *)(*(void *)(v10 + 8) + 8LL) - 16LL);
    }
  }

  return 1LL;
}

void sub_10001CF7C(int a1@<W0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    uint64_t v7 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v7 = *(const std::string::value_type **)a2;
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v8 = *(void *)(a2 + 8);
  }
  uint64_t v9 = std::string::append(&v14, v7, v8);
  __int128 v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  int64_t cap = v9->__r_.__value_.__l.__cap_;
  *(_OWORD *)__int128 v15 = v10;
  v9->__r_.__value_.__l.__size_ = 0LL;
  v9->__r_.__value_.__l.__cap_ = 0LL;
  v9->__r_.__value_.__r.__words[0] = 0LL;
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (cap >= 0) {
    uint64_t v11 = (char *)v15;
  }
  else {
    uint64_t v11 = (char *)v15[0];
  }
  sub_100004FA8((uint64_t)a3, a1, v11);
  *a3 = off_100125E10;
  if (SHIBYTE(cap) < 0) {
    operator delete(v15[0]);
  }
}

void sub_10001D090( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *__p, uint64_t a22, int a23, __int16 a24, char a25, char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10001D0E0(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)off_100125390;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
}

uint64_t sub_10001D110(uint64_t a1, int a2, char a3)
{
  int v6 = a2;
  char v5 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    sub_1000129CC();
  }
  return (*(uint64_t (**)(uint64_t, int *, char *))(*(void *)v3 + 48LL))(v3, &v6, &v5);
}

uint64_t sub_10001D17C(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = a1[5];
  if (!v3) {
    sub_1000D7604((uint64_t)a1, (uint64_t)a2, a3);
  }
  if (((*(void *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8LL)) >> (v3 - 1)) & 1) != 0)
  {
    char v5 = a3;
    unint64_t v30 = 0xAAAAAAAAAAAAAAAALL;
    char v31 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    int v6 = *a2;
    LOBYTE(v30) = v6;
    sub_100017AE4(&v31, v6);
    sub_1000041AC((uint64_t)&v30);
    if ((v5 & 1) != 0 || (sub_10001D110((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      uint64_t v7 = a1[2];
      if (a1[1] == v7)
      {
        v28[0] = v30;
        __int128 v29 = v31;
        sub_1000041AC((uint64_t)&v30);
        LOBYTE(v30) = 0;
        char v31 = 0LL;
        sub_1000041AC((uint64_t)v28);
        uint64_t v14 = *a1;
        sub_1000041AC((uint64_t)v28);
        char v15 = *(_BYTE *)v14;
        *(_BYTE *)uint64_t v14 = v28[0];
        v28[0] = v15;
        uint64_t v16 = *(uint64_t **)(v14 + 8);
        *(void *)(v14 + sub_100007004((uint64_t)v5 + 8) = v29;
        __int128 v29 = v16;
        sub_1000041AC(v14);
        sub_1000041AC((uint64_t)v28);
        sub_10000425C(&v29, v28[0]);
LABEL_20:
        uint64_t v13 = 1LL;
        goto LABEL_21;
      }

      std::string::size_type v8 = *(unsigned __int8 **)(v7 - 8);
      if (v8)
      {
        int v9 = *v8;
        if (v9 == 2)
        {
          __int128 v10 = (uint64_t *)*((void *)v8 + 1);
          unint64_t v11 = v10[1];
          if (v11 >= v10[2])
          {
            uint64_t v12 = sub_100004B7C(v10, (uint64_t)&v30);
          }

          else
          {
            *(_BYTE *)unint64_t v11 = v30;
            *(void *)(v11 + sub_100007004((uint64_t)v5 + 8) = v31;
            sub_1000041AC((uint64_t)&v30);
            LOBYTE(v30) = 0;
            char v31 = 0LL;
            sub_1000041AC(v11);
            uint64_t v12 = v11 + 16;
          }

          v10[1] = v12;
          goto LABEL_20;
        }

        if (v9 == 1)
        {
          uint64_t v17 = a1[8];
          if (v17)
          {
            unint64_t v18 = v17 - 1;
            unint64_t v19 = *(void *)(a1[7] + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL));
            a1[8] = v18;
            if (((v19 >> v18) & 1) != 0)
            {
              if (!a1[10]) {
                __assert_rtn("handle_value", "json_sax.hpp", 624, "object_element");
              }
              v26[0] = v30;
              __int128 v27 = v31;
              sub_1000041AC((uint64_t)&v30);
              LOBYTE(v30) = 0;
              char v31 = 0LL;
              sub_1000041AC((uint64_t)v26);
              uint64_t v20 = a1[10];
              sub_1000041AC((uint64_t)v26);
              char v21 = *(_BYTE *)v20;
              *(_BYTE *)uint64_t v20 = v26[0];
              v26[0] = v21;
              unint64_t v22 = *(uint64_t **)(v20 + 8);
              *(void *)(v20 + sub_100007004((uint64_t)v5 + 8) = v27;
              __int128 v27 = v22;
              sub_1000041AC(v20);
              sub_1000041AC((uint64_t)v26);
              sub_10000425C(&v27, v26[0]);
              goto LABEL_20;
            }

            goto LABEL_17;
          }

          uint64_t v24 = "not key_keep_stack.empty()";
          int v25 = 615;
        }

        else
        {
          uint64_t v24 = "ref_stack.back()->is_array() or ref_stack.back()->is_object()";
          int v25 = 603;
        }

        __assert_rtn("handle_value", "json_sax.hpp", v25, v24);
      }
    }

void sub_10001D49C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

unsigned __int8 *sub_10001D4BC(unsigned __int8 **a1)
{
  uint64_t result = *a1;
  if (!result) {
    sub_1000D7628();
  }
  int v3 = *result;
  if (v3 == 2)
  {
    char v5 = *(unsigned __int8 **)(*((void *)result + 1) + 8LL);
    uint64_t result = a1[2];
    if (result == v5) {
      sub_1000D7678();
    }
  }

  else if (v3 == 1)
  {
    uint64_t v4 = a1[1];
    return v4 + 56;
  }

  else if (a1[4])
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_100005064(v7, "cannot get value");
    sub_100008C0C(214, (uint64_t)v7, exception);
  }

  return result;
}

void sub_10001D5D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }

  else if (!v15)
  {
    goto LABEL_6;
  }

  __cxa_free_exception(v14);
  goto LABEL_6;
}

uint64_t sub_10001D610@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(unsigned __int8 **)a2 != a1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_100005064(&v24, "iterator does not fit current value");
    sub_100008C0C(202, (uint64_t)&v24, exception);
  }

  *(void *)(a3 + 32) = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)a3 = v6;
  *(_OWORD *)(a3 + 16) = v6;
  uint64_t v7 = (unsigned __int8 **)sub_1000211B0((void *)a3, (uint64_t)a1);
  sub_1000211FC(v7);
  int v8 = *a1;
  if ((v8 - 3) < 6)
  {
    if (*(void *)(a2 + 32))
    {
      unint64_t v18 = __cxa_allocate_exception(0x20uLL);
      sub_100005064(&v24, "iterator out of range");
      sub_100008C0C(205, (uint64_t)&v24, v18);
    }

    if (v8 == 8)
    {
      __int128 v10 = (void **)(a1 + 8);
      int v9 = (void **)*((void *)a1 + 1);
      uint64_t v16 = *v9;
      if (*v9)
      {
        v9[1] = v16;
        unint64_t v11 = v16;
        goto LABEL_13;
      }
    }

    else
    {
      if (v8 != 3)
      {
LABEL_15:
        *a1 = 0;
        return sub_1000041AC((uint64_t)a1);
      }

      __int128 v10 = (void **)(a1 + 8);
      int v9 = (void **)*((void *)a1 + 1);
      if (*((char *)v9 + 23) < 0)
      {
        unint64_t v11 = *v9;
LABEL_13:
        operator delete(v11);
        int v9 = (void **)*v10;
      }
    }

    operator delete(v9);
    *__int128 v10 = 0LL;
    goto LABEL_15;
  }

  if (v8 == 1)
  {
    uint64_t result = (uint64_t)sub_10001D924(*((uint64_t ***)a1 + 1), *(uint64_t **)(a2 + 8));
    *(void *)(a3 + sub_100007004((uint64_t)v5 + 8) = result;
  }

  else
  {
    if (v8 != 2)
    {
      unint64_t v19 = __cxa_allocate_exception(0x20uLL);
      uint64_t v20 = (char *)sub_10000528C((char *)a1);
      sub_100005064(&v23, v20);
      char v21 = std::string::insert(&v23, 0LL, "cannot use erase() with ");
      __int128 v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      std::string::size_type cap = v21->__r_.__value_.__l.__cap_;
      __int128 v24 = v22;
      v21->__r_.__value_.__l.__size_ = 0LL;
      v21->__r_.__value_.__l.__cap_ = 0LL;
      v21->__r_.__value_.__r.__words[0] = 0LL;
      sub_100005128(307, (uint64_t)&v24, v19);
    }

    uint64_t v12 = *((void *)a1 + 1);
    uint64_t v13 = *(void *)(a2 + 16);
    sub_10001DD60((uint64_t)&v24, v13 + 16, *(void *)(v12 + 8), v13);
    uint64_t result = sub_100004CA0(v12, v14);
    *(void *)(a3 + 16) = v13;
  }

  return result;
}

void sub_10001D8A4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if ((v22 & 1) != 0) {
    __cxa_free_exception(v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10001D924(uint64_t **a1, uint64_t *a2)
{
  uint64_t v4 = sub_10001D96C(a1, a2);
  sub_10000B948((uint64_t)(a1 + 1), (uint64_t)(a2 + 4));
  operator delete(a2);
  return v4;
}

uint64_t *sub_10001D96C(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      int v3 = v2;
      uint64_t v2 = (uint64_t *)*v2;
    }

    while (v2);
  }

  else
  {
    uint64_t v4 = a2;
    do
    {
      int v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      uint64_t v4 = v3;
    }

    while (!v5);
  }

  if (*a1 == a2) {
    *a1 = v3;
  }
  __int128 v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  sub_10001D9DC(v6, a2);
  return v3;
}

uint64_t *sub_10001D9DC(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  int v3 = a2;
  if (*a2)
  {
    uint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      int v3 = a2;
      goto LABEL_7;
    }

    do
    {
      int v3 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }

    while (v4);
  }

  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }

  int v5 = 1;
LABEL_8:
  __int128 v6 = (uint64_t **)v3[2];
  uint64_t v7 = *v6;
  if (*v6 == v3)
  {
    *__int128 v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      uint64_t v7 = 0LL;
      uint64_t result = (uint64_t *)v2;
    }

    else
    {
      uint64_t v7 = v6[1];
    }
  }

  else
  {
    v6[1] = (uint64_t *)v2;
  }

  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8LL * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    *int v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2) {
      uint64_t result = v3;
    }
  }

  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }

  while (1)
  {
    uint64_t v12 = v7[2];
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      uint64_t v13 = *(uint64_t **)(v12 + 8);
      uint64_t v14 = *v13;
      *(void *)(v12 + sub_100007004((uint64_t)v5 + 8) = *v13;
      if (v14) {
        *(void *)(v14 + 16) = v12;
      }
      v13[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8LL * (**(void **)(v12 + 16) != v12)) = v13;
      uint64_t *v13 = v12;
      *(void *)(v12 + 16) = v13;
      uint64_t v7 = *(uint64_t **)(*v7 + 8);
    }

    int v15 = (void *)*v7;
    if (*v7 && !*((_BYTE *)v15 + 24))
    {
      uint64_t v16 = (uint64_t *)v7[1];
      if (!v16) {
        goto LABEL_56;
      }
LABEL_55:
      if (*((_BYTE *)v16 + 24))
      {
LABEL_56:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        uint64_t v22 = v15[1];
        *uint64_t v7 = v22;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        v15[2] = v7[2];
        *(void *)(v7[2] + 8LL * (*(void *)v7[2] != (void)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        uint64_t v16 = v7;
      }

      else
      {
        int v15 = v7;
      }

      uint64_t v23 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      __int128 v24 = *(uint64_t **)(v23 + 8);
      uint64_t v25 = *v24;
      *(void *)(v23 + sub_100007004((uint64_t)v5 + 8) = *v24;
      if (v25) {
        *(void *)(v25 + 16) = v23;
      }
      v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8LL * (**(void **)(v23 + 16) != v23)) = v24;
      *__int128 v24 = v23;
      goto LABEL_72;
    }

    uint64_t v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24)) {
      goto LABEL_55;
    }
    *((_BYTE *)v7 + 24) = 0;
    uint64_t v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      uint64_t v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }

    if (!*((_BYTE *)v17 + 24)) {
      goto LABEL_53;
    }
LABEL_49:
    uint64_t v7 = *(uint64_t **)(v17[2] + 8LL * (*(void *)v17[2] == (void)v17));
  }

  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    uint64_t v18 = v7[1];
    *(void *)uint64_t v12 = v18;
    if (v18) {
      *(void *)(v18 + 16) = v12;
    }
    v7[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8LL * (**(void **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(void *)(v12 + 16) = v7;
    uint64_t v7 = *(uint64_t **)v12;
  }

  unint64_t v19 = (void *)*v7;
  if (*v7 && !*((_BYTE *)v19 + 24)) {
    goto LABEL_68;
  }
  uint64_t v20 = (uint64_t *)v7[1];
  if (!v20 || *((_BYTE *)v20 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    uint64_t v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }

  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_68:
    uint64_t v20 = v7;
  }

  else
  {
    *((_BYTE *)v20 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    uint64_t v26 = *v20;
    v7[1] = *v20;
    if (v26) {
      *(void *)(v26 + 16) = v7;
    }
    _OWORD v20[2] = v7[2];
    *(void *)(v7[2] + 8LL * (*(void *)v7[2] != (void)v7)) = v20;
    uint64_t *v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    unint64_t v19 = v7;
  }

  uint64_t v23 = v20[2];
  *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  __int128 v24 = *(uint64_t **)v23;
  uint64_t v27 = *(void *)(*(void *)v23 + 8LL);
  *(void *)uint64_t v23 = v27;
  if (v27) {
    *(void *)(v27 + 16) = v23;
  }
  v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8LL * (**(void **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

uint64_t sub_10001DD60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    v10[0] = *(_BYTE *)v5;
    uint64_t v11 = *(uint64_t **)(v5 + 8);
    sub_1000041AC(v5);
    *(_BYTE *)uint64_t v5 = 0;
    *(void *)(v5 + sub_100007004((uint64_t)v5 + 8) = 0LL;
    sub_1000041AC((uint64_t)v10);
    sub_1000041AC((uint64_t)v10);
    unsigned __int8 v7 = *(_BYTE *)a4;
    *(_BYTE *)a4 = v10[0];
    v10[0] = v7;
    int v8 = *(uint64_t **)(a4 + 8);
    *(void *)(a4 + sub_100007004((uint64_t)v5 + 8) = v11;
    uint64_t v11 = v8;
    sub_1000041AC(a4);
    sub_1000041AC((uint64_t)v10);
    sub_10000425C(&v11, v10[0]);
    a4 += 16LL;
    v5 += 16LL;
  }

  while (v5 != v6);
  return v6;
}

uint64_t *sub_10001DE5C(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t v8 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v6 = (uint64_t **)sub_1000053B0((uint64_t)a1, &v8, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    memset(v9, 170, sizeof(v9));
    sub_10001DF28((uint64_t)a1, a4, v9);
    sub_1000054D0(a1, v8, v6, v9[0]);
    return v9[0];
  }

  return result;
}

void *sub_10001DF28@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  memset(a3, 170, 24);
  uint64_t v6 = operator new(0x48uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  uint64_t result = sub_10001DFB8(v6 + 4, *a2);
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_10001DF9C(_Unwind_Exception *a1)
{
  void *v1 = 0LL;
  sub_10000C098(v2, v3);
  _Unwind_Resume(a1);
}

void *sub_10001DFB8(void *__dst, __int128 *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10000B8BC(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v3 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)__int128 __dst = v3;
  }

  *((_BYTE *)__dst + 24) = 0;
  __dst[4] = 0LL;
  sub_1000041AC((uint64_t)(__dst + 3));
  sub_1000041AC((uint64_t)(__dst + 3));
  return __dst;
}

void sub_10001E020(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)off_100125390;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
  operator delete(v2);
}

uint64_t sub_10001E054(uint64_t *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v3 = a1[5];
  if (!v3) {
    sub_1000D7604((uint64_t)a1, (uint64_t)a2, a3);
  }
  if (((*(void *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8LL)) >> (v3 - 1)) & 1) != 0)
  {
    char v5 = a3;
    unint64_t v30 = 0xAAAAAAAAAAAAAAAALL;
    uint64_t v6 = *a2;
    LOBYTE(v30) = 7;
    char v31 = v6;
    sub_1000041AC((uint64_t)&v30);
    sub_1000041AC((uint64_t)&v30);
    if ((v5 & 1) != 0 || (sub_10001D110((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      uint64_t v7 = a1[2];
      if (a1[1] == v7)
      {
        v28[0] = v30;
        __int128 v29 = v31;
        sub_1000041AC((uint64_t)&v30);
        LOBYTE(v30) = 0;
        char v31 = 0LL;
        sub_1000041AC((uint64_t)v28);
        uint64_t v14 = *a1;
        sub_1000041AC((uint64_t)v28);
        char v15 = *(_BYTE *)v14;
        *(_BYTE *)uint64_t v14 = v28[0];
        v28[0] = v15;
        uint64_t v16 = *(uint64_t **)(v14 + 8);
        *(void *)(v14 + sub_100007004((uint64_t)v5 + 8) = v29;
        __int128 v29 = v16;
        sub_1000041AC(v14);
        sub_1000041AC((uint64_t)v28);
        sub_10000425C(&v29, v28[0]);
LABEL_20:
        uint64_t v13 = 1LL;
        goto LABEL_21;
      }

      uint64_t v8 = *(unsigned __int8 **)(v7 - 8);
      if (v8)
      {
        int v9 = *v8;
        if (v9 == 2)
        {
          uint64_t v10 = (uint64_t *)*((void *)v8 + 1);
          unint64_t v11 = v10[1];
          if (v11 >= v10[2])
          {
            uint64_t v12 = sub_100004B7C(v10, (uint64_t)&v30);
          }

          else
          {
            *(_BYTE *)unint64_t v11 = v30;
            *(void *)(v11 + sub_100007004((uint64_t)v5 + 8) = v31;
            sub_1000041AC((uint64_t)&v30);
            LOBYTE(v30) = 0;
            char v31 = 0LL;
            sub_1000041AC(v11);
            uint64_t v12 = v11 + 16;
          }

          v10[1] = v12;
          goto LABEL_20;
        }

        if (v9 == 1)
        {
          uint64_t v17 = a1[8];
          if (v17)
          {
            unint64_t v18 = v17 - 1;
            unint64_t v19 = *(void *)(a1[7] + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL));
            a1[8] = v18;
            if (((v19 >> v18) & 1) != 0)
            {
              if (!a1[10]) {
                __assert_rtn("handle_value", "json_sax.hpp", 624, "object_element");
              }
              v26[0] = v30;
              uint64_t v27 = v31;
              sub_1000041AC((uint64_t)&v30);
              LOBYTE(v30) = 0;
              char v31 = 0LL;
              sub_1000041AC((uint64_t)v26);
              uint64_t v20 = a1[10];
              sub_1000041AC((uint64_t)v26);
              char v21 = *(_BYTE *)v20;
              *(_BYTE *)uint64_t v20 = v26[0];
              v26[0] = v21;
              uint64_t v22 = *(uint64_t **)(v20 + 8);
              *(void *)(v20 + sub_100007004((uint64_t)v5 + 8) = v27;
              uint64_t v27 = v22;
              sub_1000041AC(v20);
              sub_1000041AC((uint64_t)v26);
              sub_10000425C(&v27, v26[0]);
              goto LABEL_20;
            }

            goto LABEL_17;
          }

          __int128 v24 = "not key_keep_stack.empty()";
          int v25 = 615;
        }

        else
        {
          __int128 v24 = "ref_stack.back()->is_array() or ref_stack.back()->is_object()";
          int v25 = 603;
        }

        __assert_rtn("handle_value", "json_sax.hpp", v25, v24);
      }
    }

void sub_10001E37C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

uint64_t sub_10001E39C(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = a1[5];
  if (!v3) {
    sub_1000D7604((uint64_t)a1, (uint64_t)a2, a3);
  }
  if (((*(void *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8LL)) >> (v3 - 1)) & 1) != 0)
  {
    char v5 = a3;
    uint64_t v6 = (uint64_t *)*a2;
    unint64_t v30 = 0xAAAAAAAAAAAAAA04LL;
    char v31 = v6;
    sub_1000041AC((uint64_t)&v30);
    sub_1000041AC((uint64_t)&v30);
    if ((v5 & 1) != 0 || (sub_10001D110((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      uint64_t v7 = a1[2];
      if (a1[1] == v7)
      {
        v28[0] = v30;
        __int128 v29 = v31;
        sub_1000041AC((uint64_t)&v30);
        LOBYTE(v30) = 0;
        char v31 = 0LL;
        sub_1000041AC((uint64_t)v28);
        uint64_t v14 = *a1;
        sub_1000041AC((uint64_t)v28);
        char v15 = *(_BYTE *)v14;
        *(_BYTE *)uint64_t v14 = v28[0];
        v28[0] = v15;
        uint64_t v16 = *(uint64_t **)(v14 + 8);
        *(void *)(v14 + sub_100007004((uint64_t)v5 + 8) = v29;
        __int128 v29 = v16;
        sub_1000041AC(v14);
        sub_1000041AC((uint64_t)v28);
        sub_10000425C(&v29, v28[0]);
LABEL_20:
        uint64_t v13 = 1LL;
        goto LABEL_21;
      }

      uint64_t v8 = *(unsigned __int8 **)(v7 - 8);
      if (v8)
      {
        int v9 = *v8;
        if (v9 == 2)
        {
          uint64_t v10 = (uint64_t *)*((void *)v8 + 1);
          unint64_t v11 = v10[1];
          if (v11 >= v10[2])
          {
            uint64_t v12 = sub_100004B7C(v10, (uint64_t)&v30);
          }

          else
          {
            *(_BYTE *)unint64_t v11 = v30;
            *(void *)(v11 + sub_100007004((uint64_t)v5 + 8) = v31;
            sub_1000041AC((uint64_t)&v30);
            LOBYTE(v30) = 0;
            char v31 = 0LL;
            sub_1000041AC(v11);
            uint64_t v12 = v11 + 16;
          }

          v10[1] = v12;
          goto LABEL_20;
        }

        if (v9 == 1)
        {
          uint64_t v17 = a1[8];
          if (v17)
          {
            unint64_t v18 = v17 - 1;
            unint64_t v19 = *(void *)(a1[7] + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL));
            a1[8] = v18;
            if (((v19 >> v18) & 1) != 0)
            {
              if (!a1[10]) {
                __assert_rtn("handle_value", "json_sax.hpp", 624, "object_element");
              }
              v26[0] = v30;
              uint64_t v27 = v31;
              sub_1000041AC((uint64_t)&v30);
              LOBYTE(v30) = 0;
              char v31 = 0LL;
              sub_1000041AC((uint64_t)v26);
              uint64_t v20 = a1[10];
              sub_1000041AC((uint64_t)v26);
              char v21 = *(_BYTE *)v20;
              *(_BYTE *)uint64_t v20 = v26[0];
              v26[0] = v21;
              uint64_t v22 = *(uint64_t **)(v20 + 8);
              *(void *)(v20 + sub_100007004((uint64_t)v5 + 8) = v27;
              uint64_t v27 = v22;
              sub_1000041AC(v20);
              sub_1000041AC((uint64_t)v26);
              sub_10000425C(&v27, v26[0]);
              goto LABEL_20;
            }

            goto LABEL_17;
          }

          __int128 v24 = "not key_keep_stack.empty()";
          int v25 = 615;
        }

        else
        {
          __int128 v24 = "ref_stack.back()->is_array() or ref_stack.back()->is_object()";
          int v25 = 603;
        }

        __assert_rtn("handle_value", "json_sax.hpp", v25, v24);
      }
    }

void sub_10001E6C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

uint64_t sub_10001E6E0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1[5];
  if (!v3) {
    sub_1000D7604((uint64_t)a1, a2, a3);
  }
  if (((*(void *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8LL)) >> (v3 - 1)) & 1) != 0)
  {
    char v5 = a3;
    unint64_t v29 = 0xAAAAAAAAAAAAAA00LL;
    unint64_t v30 = 0LL;
    sub_1000041AC((uint64_t)&v29);
    sub_1000041AC((uint64_t)&v29);
    if ((v5 & 1) != 0 || (sub_10001D110((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      uint64_t v6 = a1[2];
      if (a1[1] == v6)
      {
        v27[0] = v29;
        std::string v28 = v30;
        sub_1000041AC((uint64_t)&v29);
        LOBYTE(v29) = 0;
        unint64_t v30 = 0LL;
        sub_1000041AC((uint64_t)v27);
        uint64_t v13 = *a1;
        sub_1000041AC((uint64_t)v27);
        char v14 = *(_BYTE *)v13;
        *(_BYTE *)uint64_t v13 = v27[0];
        v27[0] = v14;
        char v15 = *(uint64_t **)(v13 + 8);
        *(void *)(v13 + sub_100007004((uint64_t)v5 + 8) = v28;
        std::string v28 = v15;
        sub_1000041AC(v13);
        sub_1000041AC((uint64_t)v27);
        sub_10000425C(&v28, v27[0]);
LABEL_20:
        uint64_t v12 = 1LL;
        goto LABEL_21;
      }

      uint64_t v7 = *(unsigned __int8 **)(v6 - 8);
      if (v7)
      {
        int v8 = *v7;
        if (v8 == 2)
        {
          int v9 = (uint64_t *)*((void *)v7 + 1);
          unint64_t v10 = v9[1];
          if (v10 >= v9[2])
          {
            uint64_t v11 = sub_100004B7C(v9, (uint64_t)&v29);
          }

          else
          {
            *(_BYTE *)unint64_t v10 = v29;
            *(void *)(v10 + sub_100007004((uint64_t)v5 + 8) = v30;
            sub_1000041AC((uint64_t)&v29);
            LOBYTE(v29) = 0;
            unint64_t v30 = 0LL;
            sub_1000041AC(v10);
            uint64_t v11 = v10 + 16;
          }

          v9[1] = v11;
          goto LABEL_20;
        }

        if (v8 == 1)
        {
          uint64_t v16 = a1[8];
          if (v16)
          {
            unint64_t v17 = v16 - 1;
            unint64_t v18 = *(void *)(a1[7] + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL));
            a1[8] = v17;
            if (((v18 >> v17) & 1) != 0)
            {
              if (!a1[10]) {
                __assert_rtn("handle_value", "json_sax.hpp", 624, "object_element");
              }
              v25[0] = v29;
              uint64_t v26 = v30;
              sub_1000041AC((uint64_t)&v29);
              LOBYTE(v29) = 0;
              unint64_t v30 = 0LL;
              sub_1000041AC((uint64_t)v25);
              uint64_t v19 = a1[10];
              sub_1000041AC((uint64_t)v25);
              char v20 = *(_BYTE *)v19;
              *(_BYTE *)uint64_t v19 = v25[0];
              v25[0] = v20;
              char v21 = *(uint64_t **)(v19 + 8);
              *(void *)(v19 + sub_100007004((uint64_t)v5 + 8) = v26;
              uint64_t v26 = v21;
              sub_1000041AC(v19);
              sub_1000041AC((uint64_t)v25);
              sub_10000425C(&v26, v25[0]);
              goto LABEL_20;
            }

            goto LABEL_17;
          }

          uint64_t v23 = "not key_keep_stack.empty()";
          int v24 = 615;
        }

        else
        {
          uint64_t v23 = "ref_stack.back()->is_array() or ref_stack.back()->is_object()";
          int v24 = 603;
        }

        __assert_rtn("handle_value", "json_sax.hpp", v24, v23);
      }
    }

void sub_10001E9FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

uint64_t sub_10001EA1C(uint64_t *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v3 = a1[5];
  if (!v3) {
    sub_1000D7604((uint64_t)a1, (uint64_t)a2, a3);
  }
  if (((*(void *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8LL)) >> (v3 - 1)) & 1) != 0)
  {
    char v5 = a3;
    uint64_t v6 = *a2;
    unint64_t v30 = 0xAAAAAAAAAAAAAA05LL;
    char v31 = v6;
    sub_1000041AC((uint64_t)&v30);
    sub_1000041AC((uint64_t)&v30);
    if ((v5 & 1) != 0 || (sub_10001D110((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      uint64_t v7 = a1[2];
      if (a1[1] == v7)
      {
        v28[0] = v30;
        unint64_t v29 = v31;
        sub_1000041AC((uint64_t)&v30);
        LOBYTE(v30) = 0;
        char v31 = 0LL;
        sub_1000041AC((uint64_t)v28);
        uint64_t v14 = *a1;
        sub_1000041AC((uint64_t)v28);
        char v15 = *(_BYTE *)v14;
        *(_BYTE *)uint64_t v14 = v28[0];
        v28[0] = v15;
        uint64_t v16 = *(uint64_t **)(v14 + 8);
        *(void *)(v14 + sub_100007004((uint64_t)v5 + 8) = v29;
        unint64_t v29 = v16;
        sub_1000041AC(v14);
        sub_1000041AC((uint64_t)v28);
        sub_10000425C(&v29, v28[0]);
LABEL_20:
        uint64_t v13 = 1LL;
        goto LABEL_21;
      }

      int v8 = *(unsigned __int8 **)(v7 - 8);
      if (v8)
      {
        int v9 = *v8;
        if (v9 == 2)
        {
          unint64_t v10 = (uint64_t *)*((void *)v8 + 1);
          unint64_t v11 = v10[1];
          if (v11 >= v10[2])
          {
            uint64_t v12 = sub_100004B7C(v10, (uint64_t)&v30);
          }

          else
          {
            *(_BYTE *)unint64_t v11 = v30;
            *(void *)(v11 + sub_100007004((uint64_t)v5 + 8) = v31;
            sub_1000041AC((uint64_t)&v30);
            LOBYTE(v30) = 0;
            char v31 = 0LL;
            sub_1000041AC(v11);
            uint64_t v12 = v11 + 16;
          }

          v10[1] = v12;
          goto LABEL_20;
        }

        if (v9 == 1)
        {
          uint64_t v17 = a1[8];
          if (v17)
          {
            unint64_t v18 = v17 - 1;
            unint64_t v19 = *(void *)(a1[7] + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL));
            a1[8] = v18;
            if (((v19 >> v18) & 1) != 0)
            {
              if (!a1[10]) {
                __assert_rtn("handle_value", "json_sax.hpp", 624, "object_element");
              }
              v26[0] = v30;
              uint64_t v27 = v31;
              sub_1000041AC((uint64_t)&v30);
              LOBYTE(v30) = 0;
              char v31 = 0LL;
              sub_1000041AC((uint64_t)v26);
              uint64_t v20 = a1[10];
              sub_1000041AC((uint64_t)v26);
              char v21 = *(_BYTE *)v20;
              *(_BYTE *)uint64_t v20 = v26[0];
              v26[0] = v21;
              uint64_t v22 = *(uint64_t **)(v20 + 8);
              *(void *)(v20 + sub_100007004((uint64_t)v5 + 8) = v27;
              uint64_t v27 = v22;
              sub_1000041AC(v20);
              sub_1000041AC((uint64_t)v26);
              sub_10000425C(&v27, v26[0]);
              goto LABEL_20;
            }

            goto LABEL_17;
          }

          int v24 = "not key_keep_stack.empty()";
          int v25 = 615;
        }

        else
        {
          int v24 = "ref_stack.back()->is_array() or ref_stack.back()->is_object()";
          int v25 = 603;
        }

        __assert_rtn("handle_value", "json_sax.hpp", v25, v24);
      }
    }

void sub_10001ED40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

uint64_t sub_10001ED60(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1[5];
  if (!v3) {
    sub_1000D7604((uint64_t)a1, a2, a3);
  }
  if (((*(void *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8LL)) >> (v3 - 1)) & 1) != 0)
  {
    char v5 = a3;
    unint64_t v29 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v30 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    sub_10000B990((uint64_t)&v29, a2);
    if ((v5 & 1) != 0 || (sub_10001D110((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      uint64_t v6 = a1[2];
      if (a1[1] == v6)
      {
        v27[0] = v29;
        std::string v28 = v30;
        sub_1000041AC((uint64_t)&v29);
        LOBYTE(v29) = 0;
        unint64_t v30 = 0LL;
        sub_1000041AC((uint64_t)v27);
        uint64_t v13 = *a1;
        sub_1000041AC((uint64_t)v27);
        char v14 = *(_BYTE *)v13;
        *(_BYTE *)uint64_t v13 = v27[0];
        v27[0] = v14;
        char v15 = *(uint64_t **)(v13 + 8);
        *(void *)(v13 + sub_100007004((uint64_t)v5 + 8) = v28;
        std::string v28 = v15;
        sub_1000041AC(v13);
        sub_1000041AC((uint64_t)v27);
        sub_10000425C(&v28, v27[0]);
LABEL_20:
        uint64_t v12 = 1LL;
        goto LABEL_21;
      }

      uint64_t v7 = *(unsigned __int8 **)(v6 - 8);
      if (v7)
      {
        int v8 = *v7;
        if (v8 == 2)
        {
          int v9 = (uint64_t *)*((void *)v7 + 1);
          unint64_t v10 = v9[1];
          if (v10 >= v9[2])
          {
            uint64_t v11 = sub_100004B7C(v9, (uint64_t)&v29);
          }

          else
          {
            *(_BYTE *)unint64_t v10 = v29;
            *(void *)(v10 + sub_100007004((uint64_t)v5 + 8) = v30;
            sub_1000041AC((uint64_t)&v29);
            LOBYTE(v29) = 0;
            unint64_t v30 = 0LL;
            sub_1000041AC(v10);
            uint64_t v11 = v10 + 16;
          }

          v9[1] = v11;
          goto LABEL_20;
        }

        if (v8 == 1)
        {
          uint64_t v16 = a1[8];
          if (v16)
          {
            unint64_t v17 = v16 - 1;
            unint64_t v18 = *(void *)(a1[7] + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL));
            a1[8] = v17;
            if (((v18 >> v17) & 1) != 0)
            {
              if (!a1[10]) {
                __assert_rtn("handle_value", "json_sax.hpp", 624, "object_element");
              }
              v25[0] = v29;
              uint64_t v26 = v30;
              sub_1000041AC((uint64_t)&v29);
              LOBYTE(v29) = 0;
              unint64_t v30 = 0LL;
              sub_1000041AC((uint64_t)v25);
              uint64_t v19 = a1[10];
              sub_1000041AC((uint64_t)v25);
              char v20 = *(_BYTE *)v19;
              *(_BYTE *)uint64_t v19 = v25[0];
              v25[0] = v20;
              char v21 = *(uint64_t **)(v19 + 8);
              *(void *)(v19 + sub_100007004((uint64_t)v5 + 8) = v26;
              uint64_t v26 = v21;
              sub_1000041AC(v19);
              sub_1000041AC((uint64_t)v25);
              sub_10000425C(&v26, v25[0]);
              goto LABEL_20;
            }

            goto LABEL_17;
          }

          uint64_t v23 = "not key_keep_stack.empty()";
          int v24 = 615;
        }

        else
        {
          uint64_t v23 = "ref_stack.back()->is_array() or ref_stack.back()->is_object()";
          int v24 = 603;
        }

        __assert_rtn("handle_value", "json_sax.hpp", v24, v23);
      }
    }

void sub_10001F06C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

uint64_t sub_10001F08C(uint64_t *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v3 = a1[5];
  if (!v3) {
    sub_1000D7604((uint64_t)a1, (uint64_t)a2, a3);
  }
  if (((*(void *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8LL)) >> (v3 - 1)) & 1) != 0)
  {
    char v5 = a3;
    uint64_t v6 = *a2;
    unint64_t v30 = 0xAAAAAAAAAAAAAA06LL;
    char v31 = v6;
    sub_1000041AC((uint64_t)&v30);
    sub_1000041AC((uint64_t)&v30);
    if ((v5 & 1) != 0 || (sub_10001D110((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      uint64_t v7 = a1[2];
      if (a1[1] == v7)
      {
        v28[0] = v30;
        unint64_t v29 = v31;
        sub_1000041AC((uint64_t)&v30);
        LOBYTE(v30) = 0;
        char v31 = 0LL;
        sub_1000041AC((uint64_t)v28);
        uint64_t v14 = *a1;
        sub_1000041AC((uint64_t)v28);
        char v15 = *(_BYTE *)v14;
        *(_BYTE *)uint64_t v14 = v28[0];
        v28[0] = v15;
        uint64_t v16 = *(uint64_t **)(v14 + 8);
        *(void *)(v14 + sub_100007004((uint64_t)v5 + 8) = v29;
        unint64_t v29 = v16;
        sub_1000041AC(v14);
        sub_1000041AC((uint64_t)v28);
        sub_10000425C(&v29, v28[0]);
LABEL_20:
        uint64_t v13 = 1LL;
        goto LABEL_21;
      }

      int v8 = *(unsigned __int8 **)(v7 - 8);
      if (v8)
      {
        int v9 = *v8;
        if (v9 == 2)
        {
          unint64_t v10 = (uint64_t *)*((void *)v8 + 1);
          unint64_t v11 = v10[1];
          if (v11 >= v10[2])
          {
            uint64_t v12 = sub_100004B7C(v10, (uint64_t)&v30);
          }

          else
          {
            *(_BYTE *)unint64_t v11 = v30;
            *(void *)(v11 + sub_100007004((uint64_t)v5 + 8) = v31;
            sub_1000041AC((uint64_t)&v30);
            LOBYTE(v30) = 0;
            char v31 = 0LL;
            sub_1000041AC(v11);
            uint64_t v12 = v11 + 16;
          }

          v10[1] = v12;
          goto LABEL_20;
        }

        if (v9 == 1)
        {
          uint64_t v17 = a1[8];
          if (v17)
          {
            unint64_t v18 = v17 - 1;
            unint64_t v19 = *(void *)(a1[7] + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL));
            a1[8] = v18;
            if (((v19 >> v18) & 1) != 0)
            {
              if (!a1[10]) {
                __assert_rtn("handle_value", "json_sax.hpp", 624, "object_element");
              }
              v26[0] = v30;
              uint64_t v27 = v31;
              sub_1000041AC((uint64_t)&v30);
              LOBYTE(v30) = 0;
              char v31 = 0LL;
              sub_1000041AC((uint64_t)v26);
              uint64_t v20 = a1[10];
              sub_1000041AC((uint64_t)v26);
              char v21 = *(_BYTE *)v20;
              *(_BYTE *)uint64_t v20 = v26[0];
              v26[0] = v21;
              uint64_t v22 = *(uint64_t **)(v20 + 8);
              *(void *)(v20 + sub_100007004((uint64_t)v5 + 8) = v27;
              uint64_t v27 = v22;
              sub_1000041AC(v20);
              sub_1000041AC((uint64_t)v26);
              sub_10000425C(&v27, v26[0]);
              goto LABEL_20;
            }

            goto LABEL_17;
          }

          int v24 = "not key_keep_stack.empty()";
          int v25 = 615;
        }

        else
        {
          int v24 = "ref_stack.back()->is_array() or ref_stack.back()->is_object()";
          int v25 = 603;
        }

        __assert_rtn("handle_value", "json_sax.hpp", v25, v24);
      }
    }

void sub_10001F3B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

uint64_t sub_10001F3D0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_100125390;
  *(_DWORD *)(a1 + sub_100007004((uint64_t)v5 + 8) = *(_DWORD *)(a2 + 8);
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 16), (const std::runtime_error *)(a2 + 16));
  *(void *)a1 = off_100125E50;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t sub_10001F428(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_100125390;
  *(_DWORD *)(a1 + sub_100007004((uint64_t)v5 + 8) = *(_DWORD *)(a2 + 8);
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 16), (const std::runtime_error *)(a2 + 16));
  *(void *)a1 = off_100125E10;
  return a1;
}

uint64_t sub_10001F474(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_100125390;
  *(_DWORD *)(a1 + sub_100007004((uint64_t)v5 + 8) = *(_DWORD *)(a2 + 8);
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 16), (const std::runtime_error *)(a2 + 16));
  *(void *)a1 = off_100125508;
  return a1;
}

uint64_t sub_10001F4C0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_100125390;
  *(_DWORD *)(a1 + sub_100007004((uint64_t)v5 + 8) = *(_DWORD *)(a2 + 8);
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 16), (const std::runtime_error *)(a2 + 16));
  *(void *)a1 = off_1001253D0;
  return a1;
}

uint64_t sub_10001F50C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_100125390;
  *(_DWORD *)(a1 + sub_100007004((uint64_t)v5 + 8) = *(_DWORD *)(a2 + 8);
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 16), (const std::runtime_error *)(a2 + 16));
  *(void *)a1 = off_100125D50;
  return a1;
}

void sub_10001F558(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)off_100125390;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
  operator delete(v2);
}

void sub_10001F58C(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4 = std::string::insert(&v12, 0LL, " at line ");
  __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__l.__cap_ = v4->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0LL;
  v4->__r_.__value_.__l.__cap_ = 0LL;
  v4->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v6 = std::string::append(&v13, ", column ");
  __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__l.__cap_ = v6->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0LL;
  v6->__r_.__value_.__l.__cap_ = 0LL;
  v6->__r_.__value_.__r.__words[0] = 0LL;
  std::to_string(&__p, *(void *)(a1 + 8));
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = __p.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  unint64_t v10 = std::string::append(&v14, (const std::string::value_type *)p_p, size);
  *a2 = *v10;
  v10->__r_.__value_.__l.__size_ = 0LL;
  v10->__r_.__value_.__l.__cap_ = 0LL;
  v10->__r_.__value_.__r.__words[0] = 0LL;
}

void sub_10001F6CC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

const char *sub_10001F738(unsigned int a1)
{
  if (a1 > 0x10) {
    return "unknown token";
  }
  else {
    return off_100125E78[a1];
  }
}

uint64_t sub_10001F75C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 120);
  if (v2 == (void *)(a1 + 96))
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = (void *)(a1 + 96);
  }

  else
  {
    if (!v2) {
      goto LABEL_6;
    }
    uint64_t v3 = 5LL;
  }

  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  uint64_t v4 = *(void **)(a1 + 56);
  if (v4) {
    operator delete(v4);
  }
  __int128 v5 = *(void **)(a1 + 32);
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(a1 + 8);
  if (v6)
  {
    *(void *)(a1 + 16) = v6;
    operator delete(v6);
  }

  return a1;
}

uint64_t sub_10001F7E8(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  LOBYTE(v27) = 1;
  uint64_t v5 = sub_10001FC78(a1, (unsigned __int8 *)&v27, a3);
  unint64_t v6 = a1[3];
  __int128 v7 = (uint64_t *)a1[2];
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = a1[1];
    uint64_t v10 = ((uint64_t)v7 - v9) >> 3;
    uint64_t v11 = v6 - v9;
    uint64_t v12 = v11 >> 2;
    else {
      unint64_t v13 = v12;
    }
    if (v13) {
      std::string v14 = (char *)sub_10001C3B0((uint64_t)(a1 + 3), v13);
    }
    else {
      std::string v14 = 0LL;
    }
    char v15 = (uint64_t *)&v14[8 * v10];
    uint64_t v16 = &v14[8 * v13];
    *char v15 = v5;
    int v8 = v15 + 1;
    unint64_t v18 = (char *)a1[1];
    uint64_t v17 = (char *)a1[2];
    if (v17 != v18)
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *--char v15 = v19;
      }

      while (v17 != v18);
      uint64_t v17 = (char *)a1[1];
    }

    a1[1] = (uint64_t)v15;
    a1[2] = (uint64_t)v8;
    a1[3] = (uint64_t)v16;
    if (v17) {
      operator delete(v17);
    }
  }

  else
  {
    *__int128 v7 = v5;
    int v8 = v7 + 1;
  }

  a1[2] = (uint64_t)v8;
  if (a2 != -1LL)
  {
    unint64_t v20 = *(char *)*(v8 - 1);
    if (v20 > 2) {
      unint64_t v21 = 1LL;
    }
    else {
      unint64_t v21 = qword_1000F20A0[v20];
    }
    if (v21 < a2)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      std::to_string(&v26, a2);
      int v24 = std::string::insert(&v26, 0LL, "excessive object size: ");
      __int128 v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      std::string::size_type cap = v24->__r_.__value_.__l.__cap_;
      __int128 v27 = v25;
      v24->__r_.__value_.__l.__size_ = 0LL;
      v24->__r_.__value_.__l.__cap_ = 0LL;
      v24->__r_.__value_.__r.__words[0] = 0LL;
      sub_10001CF7C(408, (uint64_t)&v27, exception);
    }
  }

  return 1LL;
}

void sub_10001F9C8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
}

uint64_t sub_10001FA30(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  LOBYTE(v27) = 2;
  uint64_t v5 = sub_10001FC78(a1, (unsigned __int8 *)&v27, a3);
  unint64_t v6 = a1[3];
  __int128 v7 = (uint64_t *)a1[2];
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = a1[1];
    uint64_t v10 = ((uint64_t)v7 - v9) >> 3;
    uint64_t v11 = v6 - v9;
    uint64_t v12 = v11 >> 2;
    else {
      unint64_t v13 = v12;
    }
    if (v13) {
      std::string v14 = (char *)sub_10001C3B0((uint64_t)(a1 + 3), v13);
    }
    else {
      std::string v14 = 0LL;
    }
    char v15 = (uint64_t *)&v14[8 * v10];
    uint64_t v16 = &v14[8 * v13];
    *char v15 = v5;
    int v8 = v15 + 1;
    unint64_t v18 = (char *)a1[1];
    uint64_t v17 = (char *)a1[2];
    if (v17 != v18)
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *--char v15 = v19;
      }

      while (v17 != v18);
      uint64_t v17 = (char *)a1[1];
    }

    a1[1] = (uint64_t)v15;
    a1[2] = (uint64_t)v8;
    a1[3] = (uint64_t)v16;
    if (v17) {
      operator delete(v17);
    }
  }

  else
  {
    *__int128 v7 = v5;
    int v8 = v7 + 1;
  }

  a1[2] = (uint64_t)v8;
  if (a2 != -1LL)
  {
    unint64_t v20 = *(char *)*(v8 - 1);
    if (v20 > 2) {
      unint64_t v21 = 1LL;
    }
    else {
      unint64_t v21 = qword_1000F20A0[v20];
    }
    if (v21 < a2)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      std::to_string(&v26, a2);
      int v24 = std::string::insert(&v26, 0LL, "excessive array size: ");
      __int128 v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      std::string::size_type cap = v24->__r_.__value_.__l.__cap_;
      __int128 v27 = v25;
      v24->__r_.__value_.__l.__size_ = 0LL;
      v24->__r_.__value_.__l.__cap_ = 0LL;
      v24->__r_.__value_.__r.__words[0] = 0LL;
      sub_10001CF7C(408, (uint64_t)&v27, exception);
    }
  }

  return 1LL;
}

void sub_10001FC10( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
}

uint64_t sub_10001FC78(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = a1[2];
  if (a1[1] == v4)
  {
    int v10 = *a2;
    v21[0] = v10;
    sub_100017AE4(&v22, v10);
    sub_1000041AC((uint64_t)v21);
    uint64_t v11 = *a1;
    sub_1000041AC((uint64_t)v21);
    unsigned __int8 v12 = *(_BYTE *)v11;
    *(_BYTE *)uint64_t v11 = v21[0];
    v21[0] = v12;
    unint64_t v13 = *(uint64_t **)(v11 + 8);
    *(void *)(v11 + sub_100007004((uint64_t)v5 + 8) = v22;
    uint64_t v22 = v13;
    sub_1000041AC(v11);
    sub_1000041AC((uint64_t)v21);
    sub_10000425C(&v22, v21[0]);
    return *a1;
  }

  else
  {
    uint64_t v5 = *(unsigned __int8 **)(v4 - 8);
    int v6 = *v5;
    if (v6 == 2)
    {
      __int128 v7 = (uint64_t *)*((void *)v5 + 1);
      unint64_t v8 = v7[1];
      if (v8 >= v7[2])
      {
        uint64_t v9 = sub_10001FE68(v7, a2);
      }

      else
      {
        sub_10001FE20((uint64_t)v7, a2);
        uint64_t v9 = v8 + 16;
      }

      v7[1] = v9;
      return *(void *)(*(void *)(*(void *)(a1[2] - 8) + 8LL) + 8LL) - 16LL;
    }

    else
    {
      if (v6 != 1) {
        sub_1000D76A0((uint64_t)a1, (uint64_t)a2, a3);
      }
      if (!a1[4]) {
        sub_1000D76C4((uint64_t)a1, (uint64_t)a2, a3);
      }
      int v15 = *a2;
      v19[0] = v15;
      sub_100017AE4(&v20, v15);
      sub_1000041AC((uint64_t)v19);
      uint64_t v16 = a1[4];
      sub_1000041AC((uint64_t)v19);
      unsigned __int8 v17 = *(_BYTE *)v16;
      *(_BYTE *)uint64_t v16 = v19[0];
      v19[0] = v17;
      unint64_t v18 = *(uint64_t **)(v16 + 8);
      *(void *)(v16 + sub_100007004((uint64_t)v5 + 8) = v20;
      unint64_t v20 = v18;
      sub_1000041AC(v16);
      sub_1000041AC((uint64_t)v19);
      sub_10000425C(&v20, v19[0]);
      return a1[4];
    }
  }

uint64_t sub_10001FE20(uint64_t a1, unsigned __int8 *a2)
{
  int v4 = *a2;
  uint64_t v3 = *(_BYTE **)(a1 + 8);
  *uint64_t v3 = v4;
  sub_100017AE4(v3 + 8, v4);
  uint64_t result = sub_1000041AC((uint64_t)v3);
  *(void *)(a1 + sub_100007004((uint64_t)v5 + 8) = v3 + 16;
  return result;
}

void sub_10001FE60(_Unwind_Exception *a1)
{
  *(void *)(v1 + sub_100007004((uint64_t)v5 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_10001FE68(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v18 = a1 + 2;
  if (v9) {
    int v10 = (char *)sub_1000047F4(v7, v9);
  }
  else {
    int v10 = 0LL;
  }
  uint64_t v11 = &v10[16 * v4];
  v15[0] = v10;
  v15[1] = v11;
  uint64_t v16 = v11;
  unsigned __int8 v17 = &v10[16 * v9];
  int v12 = *a2;
  *uint64_t v11 = v12;
  sub_100017AE4(v11 + 8, v12);
  sub_1000041AC((uint64_t)v11);
  v16 += 16;
  sub_10000470C(a1, v15);
  uint64_t v13 = a1[1];
  sub_100004A50((uint64_t)v15);
  return v13;
}

void sub_10001FF78( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10001FF8C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1[2];
  if (a1[1] == v4)
  {
    uint64_t v11 = (uint64_t *)*a2;
    v22[0] = 7;
    uint64_t v23 = v11;
    sub_1000041AC((uint64_t)v22);
    sub_1000041AC((uint64_t)v22);
    uint64_t v12 = *a1;
    sub_1000041AC((uint64_t)v22);
    unsigned __int8 v13 = *(_BYTE *)v12;
    *(_BYTE *)uint64_t v12 = v22[0];
    v22[0] = v13;
    std::string v14 = *(uint64_t **)(v12 + 8);
    *(void *)(v12 + sub_100007004((uint64_t)v5 + 8) = v23;
    uint64_t v23 = v14;
    sub_1000041AC(v12);
    sub_1000041AC((uint64_t)v22);
    sub_10000425C(&v23, v22[0]);
    return *a1;
  }

  else
  {
    unint64_t v5 = *(unsigned __int8 **)(v4 - 8);
    int v6 = *v5;
    if (v6 == 2)
    {
      uint64_t v7 = (uint64_t *)*((void *)v5 + 1);
      unint64_t v8 = v7[1];
      if (v8 >= v7[2])
      {
        uint64_t v10 = sub_100020170(v7, a2);
      }

      else
      {
        *(void *)(v8 + sub_100007004((uint64_t)v5 + 8) = 0LL;
        uint64_t v9 = *a2;
        *(_BYTE *)unint64_t v8 = 7;
        *(void *)(v8 + sub_100007004((uint64_t)v5 + 8) = v9;
        sub_1000041AC(v8);
        sub_1000041AC(v8);
        uint64_t v10 = v8 + 16;
      }

      v7[1] = v10;
      return *(void *)(*(void *)(*(void *)(a1[2] - 8) + 8LL) + 8LL) - 16LL;
    }

    else
    {
      if (v6 != 1) {
        sub_1000D76A0((uint64_t)a1, (uint64_t)a2, a3);
      }
      if (!a1[4]) {
        sub_1000D76C4((uint64_t)a1, (uint64_t)a2, a3);
      }
      uint64_t v16 = (uint64_t *)*a2;
      v20[0] = 7;
      unint64_t v21 = v16;
      sub_1000041AC((uint64_t)v20);
      sub_1000041AC((uint64_t)v20);
      uint64_t v17 = a1[4];
      sub_1000041AC((uint64_t)v20);
      unsigned __int8 v18 = *(_BYTE *)v17;
      *(_BYTE *)uint64_t v17 = v20[0];
      v20[0] = v18;
      uint64_t v19 = *(uint64_t **)(v17 + 8);
      *(void *)(v17 + sub_100007004((uint64_t)v5 + 8) = v21;
      unint64_t v21 = v19;
      sub_1000041AC(v17);
      sub_1000041AC((uint64_t)v20);
      sub_10000425C(&v21, v20[0]);
      return a1[4];
    }
  }

uint64_t sub_100020170(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  else {
    unint64_t v9 = v5;
  }
  unsigned __int8 v18 = a1 + 2;
  uint64_t v10 = (char *)sub_1000047F4(v7, v9);
  uint64_t v11 = (uint64_t)&v10[16 * v4];
  *(void *)&__int128 v16 = v10;
  *((void *)&v16 + 1) = v11;
  *((void *)&v17 + 1) = &v10[16 * v12];
  *(void *)(v11 + sub_100007004((uint64_t)v5 + 8) = 0LL;
  uint64_t v13 = *a2;
  *(_BYTE *)uint64_t v11 = 7;
  *(void *)(v11 + sub_100007004((uint64_t)v5 + 8) = v13;
  sub_1000041AC(v11);
  sub_1000041AC(v11);
  *(void *)&__int128 v17 = v11 + 16;
  sub_10000470C(a1, &v16);
  uint64_t v14 = a1[1];
  sub_100004A50((uint64_t)&v16);
  return v14;
}

void sub_10002027C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100020290(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = a1[2];
  if (a1[1] == v4)
  {
    uint64_t v11 = (uint64_t *)*a2;
    v22[0] = 4;
    uint64_t v23 = v11;
    sub_1000041AC((uint64_t)v22);
    sub_1000041AC((uint64_t)v22);
    uint64_t v12 = *a1;
    sub_1000041AC((uint64_t)v22);
    unsigned __int8 v13 = *(_BYTE *)v12;
    *(_BYTE *)uint64_t v12 = v22[0];
    v22[0] = v13;
    uint64_t v14 = *(uint64_t **)(v12 + 8);
    *(void *)(v12 + sub_100007004((uint64_t)v5 + 8) = v23;
    uint64_t v23 = v14;
    sub_1000041AC(v12);
    sub_1000041AC((uint64_t)v22);
    sub_10000425C(&v23, v22[0]);
    return *a1;
  }

  else
  {
    unint64_t v5 = *(unsigned __int8 **)(v4 - 8);
    int v6 = *v5;
    if (v6 == 2)
    {
      uint64_t v7 = (uint64_t *)*((void *)v5 + 1);
      unint64_t v8 = v7[1];
      if (v8 >= v7[2])
      {
        uint64_t v10 = sub_100020474(v7, a2);
      }

      else
      {
        *(void *)(v8 + sub_100007004((uint64_t)v5 + 8) = 0LL;
        uint64_t v9 = *a2;
        *(_BYTE *)unint64_t v8 = 4;
        *(void *)(v8 + sub_100007004((uint64_t)v5 + 8) = v9;
        sub_1000041AC(v8);
        sub_1000041AC(v8);
        uint64_t v10 = v8 + 16;
      }

      v7[1] = v10;
      return *(void *)(*(void *)(*(void *)(a1[2] - 8) + 8LL) + 8LL) - 16LL;
    }

    else
    {
      if (v6 != 1) {
        sub_1000D76A0((uint64_t)a1, (uint64_t)a2, a3);
      }
      if (!a1[4]) {
        sub_1000D76C4((uint64_t)a1, (uint64_t)a2, a3);
      }
      __int128 v16 = (uint64_t *)*a2;
      v20[0] = 4;
      unint64_t v21 = v16;
      sub_1000041AC((uint64_t)v20);
      sub_1000041AC((uint64_t)v20);
      uint64_t v17 = a1[4];
      sub_1000041AC((uint64_t)v20);
      unsigned __int8 v18 = *(_BYTE *)v17;
      *(_BYTE *)uint64_t v17 = v20[0];
      v20[0] = v18;
      uint64_t v19 = *(uint64_t **)(v17 + 8);
      *(void *)(v17 + sub_100007004((uint64_t)v5 + 8) = v21;
      unint64_t v21 = v19;
      sub_1000041AC(v17);
      sub_1000041AC((uint64_t)v20);
      sub_10000425C(&v21, v20[0]);
      return a1[4];
    }
  }

uint64_t sub_100020474(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  else {
    unint64_t v9 = v5;
  }
  unsigned __int8 v18 = a1 + 2;
  uint64_t v10 = (char *)sub_1000047F4(v7, v9);
  uint64_t v11 = (uint64_t)&v10[16 * v4];
  *(void *)&__int128 v16 = v10;
  *((void *)&v16 + 1) = v11;
  *((void *)&v17 + 1) = &v10[16 * v12];
  *(void *)(v11 + sub_100007004((uint64_t)v5 + 8) = 0LL;
  uint64_t v13 = *a2;
  *(_BYTE *)uint64_t v11 = 4;
  *(void *)(v11 + sub_100007004((uint64_t)v5 + 8) = v13;
  sub_1000041AC(v11);
  sub_1000041AC(v11);
  *(void *)&__int128 v17 = v11 + 16;
  sub_10000470C(a1, &v16);
  uint64_t v14 = a1[1];
  sub_100004A50((uint64_t)&v16);
  return v14;
}

void sub_100020580( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100020594(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1[2];
  if (a1[1] == v4)
  {
    v19[0] = 0;
    unint64_t v20 = 0LL;
    sub_1000041AC((uint64_t)v19);
    sub_1000041AC((uint64_t)v19);
    uint64_t v10 = *a1;
    sub_1000041AC((uint64_t)v19);
    unsigned __int8 v11 = *(_BYTE *)v10;
    *(_BYTE *)uint64_t v10 = v19[0];
    v19[0] = v11;
    uint64_t v12 = *(uint64_t **)(v10 + 8);
    *(void *)(v10 + sub_100007004((uint64_t)v5 + 8) = v20;
    unint64_t v20 = v12;
    sub_1000041AC(v10);
    sub_1000041AC((uint64_t)v19);
    sub_10000425C(&v20, v19[0]);
    return *a1;
  }

  else
  {
    unint64_t v5 = *(unsigned __int8 **)(v4 - 8);
    int v6 = *v5;
    if (v6 == 2)
    {
      uint64_t v7 = (uint64_t *)*((void *)v5 + 1);
      unint64_t v8 = v7[1];
      if (v8 >= v7[2])
      {
        uint64_t v9 = sub_10002075C(v7);
      }

      else
      {
        *(_BYTE *)unint64_t v8 = 0;
        *(void *)(v8 + sub_100007004((uint64_t)v5 + 8) = 0LL;
        sub_1000041AC(v8);
        sub_1000041AC(v8);
        uint64_t v9 = v8 + 16;
      }

      v7[1] = v9;
      return *(void *)(*(void *)(*(void *)(a1[2] - 8) + 8LL) + 8LL) - 16LL;
    }

    else
    {
      if (v6 != 1) {
        sub_1000D76A0((uint64_t)a1, a2, a3);
      }
      if (!a1[4]) {
        sub_1000D76C4((uint64_t)a1, a2, a3);
      }
      v17[0] = 0;
      unsigned __int8 v18 = 0LL;
      sub_1000041AC((uint64_t)v17);
      sub_1000041AC((uint64_t)v17);
      uint64_t v14 = a1[4];
      sub_1000041AC((uint64_t)v17);
      unsigned __int8 v15 = *(_BYTE *)v14;
      *(_BYTE *)uint64_t v14 = v17[0];
      v17[0] = v15;
      __int128 v16 = *(uint64_t **)(v14 + 8);
      *(void *)(v14 + sub_100007004((uint64_t)v5 + 8) = v18;
      unsigned __int8 v18 = v16;
      sub_1000041AC(v14);
      sub_1000041AC((uint64_t)v17);
      sub_10000425C(&v18, v17[0]);
      return a1[4];
    }
  }

uint64_t sub_10002075C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (a1[1] - *a1) >> 4;
  unint64_t v4 = v3 + 1;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  uint64_t v5 = (uint64_t)(a1 + 2);
  uint64_t v6 = a1[2] - v2;
  if (v6 >> 3 > v4) {
    unint64_t v4 = v6 >> 3;
  }
  else {
    unint64_t v7 = v4;
  }
  unsigned __int8 v15 = a1 + 2;
  unint64_t v8 = (char *)sub_1000047F4(v5, v7);
  uint64_t v9 = (uint64_t)&v8[16 * v3];
  *(void *)&__int128 v13 = v8;
  *((void *)&v13 + 1) = v9;
  *((void *)&v14 + 1) = &v8[16 * v10];
  *(_BYTE *)uint64_t v9 = 0;
  *(void *)(v9 + sub_100007004((uint64_t)v5 + 8) = 0LL;
  sub_1000041AC(v9);
  sub_1000041AC(v9);
  *(void *)&__int128 v14 = v9 + 16;
  sub_10000470C(a1, &v13);
  uint64_t v11 = a1[1];
  sub_100004A50((uint64_t)&v13);
  return v11;
}

void sub_100020850( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100020864(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1[2];
  if (a1[1] == v4)
  {
    uint64_t v11 = (uint64_t *)*a2;
    v22[0] = 5;
    uint64_t v23 = v11;
    sub_1000041AC((uint64_t)v22);
    sub_1000041AC((uint64_t)v22);
    uint64_t v12 = *a1;
    sub_1000041AC((uint64_t)v22);
    unsigned __int8 v13 = *(_BYTE *)v12;
    *(_BYTE *)uint64_t v12 = v22[0];
    v22[0] = v13;
    __int128 v14 = *(uint64_t **)(v12 + 8);
    *(void *)(v12 + sub_100007004((uint64_t)v5 + 8) = v23;
    uint64_t v23 = v14;
    sub_1000041AC(v12);
    sub_1000041AC((uint64_t)v22);
    sub_10000425C(&v23, v22[0]);
    return *a1;
  }

  else
  {
    uint64_t v5 = *(unsigned __int8 **)(v4 - 8);
    int v6 = *v5;
    if (v6 == 2)
    {
      unint64_t v7 = (uint64_t *)*((void *)v5 + 1);
      unint64_t v8 = v7[1];
      if (v8 >= v7[2])
      {
        uint64_t v10 = sub_100020A48(v7, a2);
      }

      else
      {
        *(void *)(v8 + sub_100007004((uint64_t)v5 + 8) = 0LL;
        uint64_t v9 = *a2;
        *(_BYTE *)unint64_t v8 = 5;
        *(void *)(v8 + sub_100007004((uint64_t)v5 + 8) = v9;
        sub_1000041AC(v8);
        sub_1000041AC(v8);
        uint64_t v10 = v8 + 16;
      }

      v7[1] = v10;
      return *(void *)(*(void *)(*(void *)(a1[2] - 8) + 8LL) + 8LL) - 16LL;
    }

    else
    {
      if (v6 != 1) {
        sub_1000D76A0((uint64_t)a1, (uint64_t)a2, a3);
      }
      if (!a1[4]) {
        sub_1000D76C4((uint64_t)a1, (uint64_t)a2, a3);
      }
      __int128 v16 = (uint64_t *)*a2;
      v20[0] = 5;
      unint64_t v21 = v16;
      sub_1000041AC((uint64_t)v20);
      sub_1000041AC((uint64_t)v20);
      uint64_t v17 = a1[4];
      sub_1000041AC((uint64_t)v20);
      unsigned __int8 v18 = *(_BYTE *)v17;
      *(_BYTE *)uint64_t v17 = v20[0];
      v20[0] = v18;
      uint64_t v19 = *(uint64_t **)(v17 + 8);
      *(void *)(v17 + sub_100007004((uint64_t)v5 + 8) = v21;
      unint64_t v21 = v19;
      sub_1000041AC(v17);
      sub_1000041AC((uint64_t)v20);
      sub_10000425C(&v21, v20[0]);
      return a1[4];
    }
  }

uint64_t sub_100020A48(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  else {
    unint64_t v9 = v5;
  }
  unsigned __int8 v18 = a1 + 2;
  uint64_t v10 = (char *)sub_1000047F4(v7, v9);
  uint64_t v11 = (uint64_t)&v10[16 * v4];
  *(void *)&__int128 v16 = v10;
  *((void *)&v16 + 1) = v11;
  *((void *)&v17 + 1) = &v10[16 * v12];
  *(void *)(v11 + sub_100007004((uint64_t)v5 + 8) = 0LL;
  uint64_t v13 = *a2;
  *(_BYTE *)uint64_t v11 = 5;
  *(void *)(v11 + sub_100007004((uint64_t)v5 + 8) = v13;
  sub_1000041AC(v11);
  sub_1000041AC(v11);
  *(void *)&__int128 v17 = v11 + 16;
  sub_10000470C(a1, &v16);
  uint64_t v14 = a1[1];
  sub_100004A50((uint64_t)&v16);
  return v14;
}

void sub_100020B54( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100020B68(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1[2];
  if (a1[1] == v4)
  {
    sub_10000B990((uint64_t)v19, a2);
    uint64_t v10 = *a1;
    sub_1000041AC((uint64_t)v19);
    unsigned __int8 v11 = *(_BYTE *)v10;
    *(_BYTE *)uint64_t v10 = v19[0];
    v19[0] = v11;
    uint64_t v12 = *(uint64_t **)(v10 + 8);
    *(void *)(v10 + sub_100007004((uint64_t)v5 + 8) = v20;
    unint64_t v20 = v12;
    sub_1000041AC(v10);
    sub_1000041AC((uint64_t)v19);
    sub_10000425C(&v20, v19[0]);
    return *a1;
  }

  else
  {
    unint64_t v5 = *(unsigned __int8 **)(v4 - 8);
    int v6 = *v5;
    if (v6 == 2)
    {
      uint64_t v7 = (uint64_t *)*((void *)v5 + 1);
      unint64_t v8 = v7[1];
      if (v8 >= v7[2])
      {
        uint64_t v9 = sub_100020D0C(v7, a2);
      }

      else
      {
        sub_10000B990(v7[1], a2);
        uint64_t v9 = v8 + 16;
        v7[1] = v8 + 16;
      }

      v7[1] = v9;
      return *(void *)(*(void *)(*(void *)(a1[2] - 8) + 8LL) + 8LL) - 16LL;
    }

    else
    {
      if (v6 != 1) {
        sub_1000D76A0((uint64_t)a1, a2, a3);
      }
      if (!a1[4]) {
        sub_1000D76C4((uint64_t)a1, a2, a3);
      }
      sub_10000B990((uint64_t)v17, a2);
      uint64_t v14 = a1[4];
      sub_1000041AC((uint64_t)v17);
      unsigned __int8 v15 = *(_BYTE *)v14;
      *(_BYTE *)uint64_t v14 = v17[0];
      v17[0] = v15;
      __int128 v16 = *(uint64_t **)(v14 + 8);
      *(void *)(v14 + sub_100007004((uint64_t)v5 + 8) = v18;
      unsigned __int8 v18 = v16;
      sub_1000041AC(v14);
      sub_1000041AC((uint64_t)v17);
      sub_10000425C(&v18, v17[0]);
      return a1[4];
    }
  }

void sub_100020D00(_Unwind_Exception *a1)
{
  *(void *)(v1 + sub_100007004((uint64_t)v5 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100020D0C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  else {
    unint64_t v9 = v5;
  }
  __int128 v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_1000047F4(v7, v9);
  }
  else {
    uint64_t v10 = 0LL;
  }
  uint64_t v13 = v10;
  uint64_t v14 = &v10[16 * v4];
  __int128 v16 = &v10[16 * v9];
  sub_10000B990((uint64_t)v14, a2);
  unsigned __int8 v15 = v14 + 16;
  sub_10000470C(a1, &v13);
  uint64_t v11 = a1[1];
  sub_100004A50((uint64_t)&v13);
  return v11;
}

void sub_100020E10( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100020E24(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1[2];
  if (a1[1] == v4)
  {
    uint64_t v11 = (uint64_t *)*a2;
    v22[0] = 6;
    uint64_t v23 = v11;
    sub_1000041AC((uint64_t)v22);
    sub_1000041AC((uint64_t)v22);
    uint64_t v12 = *a1;
    sub_1000041AC((uint64_t)v22);
    unsigned __int8 v13 = *(_BYTE *)v12;
    *(_BYTE *)uint64_t v12 = v22[0];
    v22[0] = v13;
    uint64_t v14 = *(uint64_t **)(v12 + 8);
    *(void *)(v12 + sub_100007004((uint64_t)v5 + 8) = v23;
    uint64_t v23 = v14;
    sub_1000041AC(v12);
    sub_1000041AC((uint64_t)v22);
    sub_10000425C(&v23, v22[0]);
    return *a1;
  }

  else
  {
    unint64_t v5 = *(unsigned __int8 **)(v4 - 8);
    int v6 = *v5;
    if (v6 == 2)
    {
      uint64_t v7 = (uint64_t *)*((void *)v5 + 1);
      unint64_t v8 = v7[1];
      if (v8 >= v7[2])
      {
        uint64_t v10 = sub_100021008(v7, a2);
      }

      else
      {
        *(void *)(v8 + sub_100007004((uint64_t)v5 + 8) = 0LL;
        uint64_t v9 = *a2;
        *(_BYTE *)unint64_t v8 = 6;
        *(void *)(v8 + sub_100007004((uint64_t)v5 + 8) = v9;
        sub_1000041AC(v8);
        sub_1000041AC(v8);
        uint64_t v10 = v8 + 16;
      }

      v7[1] = v10;
      return *(void *)(*(void *)(*(void *)(a1[2] - 8) + 8LL) + 8LL) - 16LL;
    }

    else
    {
      if (v6 != 1) {
        sub_1000D76A0((uint64_t)a1, (uint64_t)a2, a3);
      }
      if (!a1[4]) {
        sub_1000D76C4((uint64_t)a1, (uint64_t)a2, a3);
      }
      __int128 v16 = (uint64_t *)*a2;
      v20[0] = 6;
      unint64_t v21 = v16;
      sub_1000041AC((uint64_t)v20);
      sub_1000041AC((uint64_t)v20);
      uint64_t v17 = a1[4];
      sub_1000041AC((uint64_t)v20);
      unsigned __int8 v18 = *(_BYTE *)v17;
      *(_BYTE *)uint64_t v17 = v20[0];
      v20[0] = v18;
      uint64_t v19 = *(uint64_t **)(v17 + 8);
      *(void *)(v17 + sub_100007004((uint64_t)v5 + 8) = v21;
      unint64_t v21 = v19;
      sub_1000041AC(v17);
      sub_1000041AC((uint64_t)v20);
      sub_10000425C(&v21, v20[0]);
      return a1[4];
    }
  }

uint64_t sub_100021008(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  else {
    unint64_t v9 = v5;
  }
  unsigned __int8 v18 = a1 + 2;
  uint64_t v10 = (char *)sub_1000047F4(v7, v9);
  uint64_t v11 = (uint64_t)&v10[16 * v4];
  *(void *)&__int128 v16 = v10;
  *((void *)&v16 + 1) = v11;
  *((void *)&v17 + 1) = &v10[16 * v12];
  *(void *)(v11 + sub_100007004((uint64_t)v5 + 8) = 0LL;
  uint64_t v13 = *a2;
  *(_BYTE *)uint64_t v11 = 6;
  *(void *)(v11 + sub_100007004((uint64_t)v5 + 8) = v13;
  sub_1000041AC(v11);
  sub_1000041AC(v11);
  *(void *)&__int128 v17 = v11 + 16;
  sub_10000470C(a1, &v16);
  uint64_t v14 = a1[1];
  sub_100004A50((uint64_t)&v16);
  return v14;
}

void sub_100021114( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unsigned __int8 **sub_100021128(unsigned __int8 **result)
{
  uint64_t v1 = *result;
  if (!*result) {
    __assert_rtn("set_begin", "iter_impl.hpp", 174, "m_object != nullptr");
  }
  int v2 = *v1;
  if (*v1)
  {
    if (v2 == 2)
    {
      result[2] = (unsigned __int8 *)**((void **)v1 + 1);
    }

    else if (v2 == 1)
    {
      result[1] = (unsigned __int8 *)**((void **)v1 + 1);
    }

    else
    {
      result[4] = 0LL;
    }
  }

  else
  {
    result[4] = (unsigned __int8 *)1;
  }

  return result;
}

void *sub_1000211B0(void *result, uint64_t a2)
{
  *uint64_t result = a2;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  result[4] = 0x8000000000000000LL;
  if (!a2) {
    __assert_rtn("iter_impl", "iter_impl.hpp", 88, "m_object != nullptr");
  }
  return result;
}

unsigned __int8 **sub_1000211FC(unsigned __int8 **result)
{
  uint64_t v1 = *result;
  if (!*result) {
    __assert_rtn("set_end", "iter_impl.hpp", 211, "m_object != nullptr");
  }
  int v2 = *v1;
  if (v2 == 2)
  {
    result[2] = *(unsigned __int8 **)(*((void *)v1 + 1) + 8LL);
  }

  else if (v2 == 1)
  {
    result[1] = (unsigned __int8 *)(*((void *)v1 + 1) + 8LL);
  }

  else
  {
    result[4] = (unsigned __int8 *)1;
  }

  return result;
}

unint64_t sub_100021278(uint64_t *a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4 = a2;
  if (a3)
  {
    uint64_t v10 = a1[2];
    uint64_t v8 = (uint64_t)(a1 + 2);
    uint64_t v9 = v10;
    unint64_t v11 = *(void *)(v8 - 8);
    if (a3 <= (uint64_t)(v10 - v11) >> 4)
    {
      uint64_t v19 = v11 - a2;
      uint64_t v20 = a3;
      uint64_t v21 = 0LL;
      uint64_t v20 = v19 >> 4;
      unint64_t v22 = v11 + 16 * (a3 - (v19 >> 4));
      uint64_t v23 = 16 * a3 - 16 * (v19 >> 4);
      do
      {
        sub_10000C3E4(v11 + v21, a4);
        v21 += 16LL;
      }

      while (v23 != v21);
      a1[1] = v22;
      if (v11 != v4)
      {
LABEL_15:
        sub_1000214DC((uint64_t)a1, v4, v11, v4 + 16 * a3);
        if (v4 <= a4)
        {
          if (a1[1] <= a4) {
            unint64_t v24 = 0LL;
          }
          else {
            unint64_t v24 = a3;
          }
          a4 += 16 * v24;
        }

        uint64_t v25 = v4;
        do
        {
          sub_10000C3E4((uint64_t)&v32, a4);
          sub_1000041AC((uint64_t)&v32);
          char v26 = *(_BYTE *)v25;
          *(_BYTE *)uint64_t v25 = v32;
          LOBYTE(v32) = v26;
          uint64_t v27 = *(void *)(v25 + 8);
          *(void *)(v25 + sub_100007004((uint64_t)v5 + 8) = *((void *)&v32 + 1);
          *((void *)&v32 + 1) = v27;
          sub_1000041AC(v25);
          sub_1000041AC((uint64_t)&v32);
          sub_10000425C((uint64_t **)&v32 + 1, v32);
          v25 += 16LL;
          --v20;
        }

        while (v20);
      }
    }

    else
    {
      uint64_t v12 = *a1;
      __int128 v32 = 0u;
      __int128 v33 = 0u;
      unint64_t v13 = a3 + ((uint64_t)(v11 - v12) >> 4);
      if (v13 >> 60) {
        sub_1000046F8();
      }
      uint64_t v14 = (uint64_t)(a2 - v12) >> 4;
      uint64_t v15 = v9 - v12;
      uint64_t v16 = v15 >> 3;
      if (v15 >> 3 <= v13) {
        uint64_t v16 = v13;
      }
      else {
        unint64_t v17 = v16;
      }
      uint64_t v34 = v8;
      if (v17) {
        unsigned __int8 v18 = (char *)sub_1000047F4(v8, v17);
      }
      else {
        unsigned __int8 v18 = 0LL;
      }
      uint64_t v28 = (uint64_t)&v18[16 * v14];
      *(void *)&__int128 v32 = v18;
      *((void *)&v32 + 1) = v28;
      *(void *)&__int128 v33 = v28;
      *((void *)&v33 + 1) = &v18[16 * v17];
      uint64_t v29 = 16 * a3;
      unint64_t v30 = v28 + 16 * a3;
      do
      {
        sub_10000C3E4(v28, a4);
        v28 += 16LL;
        v29 -= 16LL;
      }

      while (v29);
      *(void *)&__int128 v33 = v30;
      unint64_t v4 = sub_1000215C0(a1, &v32, v4);
      sub_100004A50((uint64_t)&v32);
    }
  }

  return v4;
}

void sub_1000214A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1000214DC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v10 = a2 + v6 - a4;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      *(_BYTE *)uint64_t v8 = *(_BYTE *)v10;
      *(void *)(v8 + sub_100007004((uint64_t)v5 + 8) = *(void *)(v10 + 8);
      sub_1000041AC(v10);
      *(_BYTE *)unint64_t v10 = 0;
      *(void *)(v10 + sub_100007004((uint64_t)v5 + 8) = 0LL;
      sub_1000041AC(v8);
      v8 += 16LL;
      v10 += 16LL;
    }

    while (v10 < a3);
  }

  *(void *)(a1 + sub_100007004((uint64_t)v5 + 8) = v8;
  return sub_100021670((uint64_t)&v12, a2, v7, v6);
}

uint64_t sub_1000215C0(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  sub_100004850((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_10002177C(v7, a3, a1[1], a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_100021670(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = 0LL;
    do
    {
      v12[0] = *(_BYTE *)(a3 + v7 - 16);
      unint64_t v13 = *(uint64_t **)(a3 + v7 - 8);
      sub_1000041AC(a3 + v7 - 16);
      *(_BYTE *)(a3 + v7 - 16) = 0;
      *(void *)(a3 + v7 - sub_100007004((uint64_t)v5 + 8) = 0LL;
      sub_1000041AC((uint64_t)v12);
      sub_1000041AC((uint64_t)v12);
      char v9 = *(_BYTE *)(a4 + v7 - 16);
      uint64_t v8 = a4 + v7 - 16;
      *(_BYTE *)uint64_t v8 = v12[0];
      v12[0] = v9;
      uint64_t v10 = *(uint64_t **)(a4 + v7 - 8);
      *(void *)(v8 + sub_100007004((uint64_t)v5 + 8) = v13;
      unint64_t v13 = v10;
      sub_1000041AC(v8);
      sub_1000041AC((uint64_t)v12);
      sub_10000425C(&v13, v12[0]);
      v7 -= 16LL;
    }

    while (a3 + v7 != a2);
  }

  return a3;
}

uint64_t sub_10002177C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v8 = a4;
  uint64_t v9 = a4;
  v10[0] = a1;
  v10[1] = &v8;
  v10[2] = &v9;
  unint64_t v11 = 0xAAAAAAAAAAAAAAAALL;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(_BYTE *)uint64_t v4 = *(_BYTE *)v6;
      *(void *)(v4 + sub_100007004((uint64_t)v5 + 8) = *(void *)(v6 + 8);
      sub_1000041AC(v6);
      *(_BYTE *)uint64_t v6 = 0;
      *(void *)(v6 + sub_100007004((uint64_t)v5 + 8) = 0LL;
      sub_1000041AC(v4);
      uint64_t v4 = v9 + 16;
      v9 += 16LL;
      v6 += 16LL;
    }

    while (v6 != a3);
  }

  LOBYTE(v11) = 1;
  sub_10000C348((uint64_t)v10);
  return v4;
}

uint64_t sub_100021850(uint64_t a1, std::string::value_type *__s)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 8;
  do
  {
    int v6 = std::string::compare((const std::string *)(v3 + 32), __s);
    uint64_t v7 = (uint64_t *)(v3 + 8);
    if (v6 >= 0)
    {
      uint64_t v7 = (uint64_t *)v3;
      uint64_t v5 = v3;
    }

    uint64_t v3 = *v7;
  }

  while (*v7);
  if (v5 == v2 || std::string::compare((const std::string *)(v5 + 32), __s) >= 1) {
    return v2;
  }
  return v5;
}

std::string *sub_1000218CC@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  return sub_100021914(a1, a2);
}

void sub_1000218F8(_Unwind_Exception *exception_object)
{
}

std::string *sub_100021914(uint64_t a1, std::string *this)
{
  if (*(_BYTE *)a1 != 3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v5 = (char *)sub_10000528C((char *)a1);
    sub_100005064(&v8, v5);
    int v6 = std::string::insert(&v8, 0LL, "type must be string, but is ");
    __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    std::string::size_type cap = v6->__r_.__value_.__l.__cap_;
    __int128 v9 = v7;
    v6->__r_.__value_.__l.__size_ = 0LL;
    v6->__r_.__value_.__l.__cap_ = 0LL;
    v6->__r_.__value_.__r.__words[0] = 0LL;
    sub_100005128(302, (uint64_t)&v9, exception);
  }

  return std::string::operator=(this, *(const std::string **)(a1 + 8));
}

void sub_100021A04( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }

  else if (!v22)
  {
    goto LABEL_8;
  }

  __cxa_free_exception(v21);
  goto LABEL_8;
}

unsigned __int8 *sub_100021A64(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = sub_100021B64((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0LL;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }

  else
  {
    unint64_t v9 = (*(void *)&v5 - 1LL) & v4;
  }

  uint64_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0LL;
  }
  unint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v13 == v6)
      {
        if ((sub_100021BD4(v12, v11 + 16, a2) & 1) != 0) {
          return v11;
        }
      }

      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }

        else
        {
          v13 &= *(void *)&v5 - 1LL;
        }

        if (v13 != v9) {
          return 0LL;
        }
      }

      unint64_t v11 = *(unsigned __int8 **)v11;
    }

    while (v11);
  }

  return v11;
}

unint64_t sub_100021B64(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }

  else
  {
    a2 = *(void *)a2;
    unint64_t v3 = v2;
  }

  return sub_100021C78((uint64_t)&v5, (uint64_t *)a2, v3);
}

void sub_100021BC8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

uint64_t sub_100021BD4(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unint64_t v3 = a3;
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0LL) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = a3[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0LL) {
    uint64_t v6 = *((void *)a3 + 1);
  }
  if (v5 != v6) {
    return 0LL;
  }
  if (v7 < 0) {
    unint64_t v3 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a2, v3, *((void *)a2 + 1)) == 0;
  }
  if (!a2[23]) {
    return 1LL;
  }
  uint64_t v8 = v4 - 1;
  do
  {
    int v10 = *a2++;
    int v9 = v10;
    int v12 = *v3++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    uint64_t result = v9 == v11;
  }

  while (v9 == v11 && v14);
  return result;
}

unint64_t sub_100021C78(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v11 = v7 + v9;
      unint64_t v12 = 0x9DDFEA08EB382D69LL
          * (v6 ^ ((0x9DDFEA08EB382D69LL * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69LL * (v6 ^ (v4 + a3))));
      unint64_t v13 = 0x9DDFEA08EB382D69LL * (v12 ^ (v12 >> 47));
      unint64_t v14 = v8 + a3 + v7 + v4;
      uint64_t v15 = v14 + v5;
      unint64_t v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297LL * (v12 ^ (v12 >> 47)), 21);
      uint64_t v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v18 = v17 + v6 + v9;
      uint64_t v19 = __ROR8__(v18, 44);
      uint64_t v20 = v18 + v10;
      uint64_t v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      uint64_t v23 = *a2;
      int v22 = a2 + 4;
      unint64_t v24 = v23 - 0x4B6D499041670D8DLL * v5;
      uint64_t v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0LL);
      do
      {
        uint64_t v26 = *(v22 - 3);
        uint64_t v27 = v24 + v15 + v11 + v26;
        uint64_t v28 = v22[2];
        uint64_t v29 = v22[3];
        uint64_t v30 = v22[1];
        unint64_t v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        uint64_t v31 = v13 + v20;
        uint64_t v32 = *(v22 - 2);
        uint64_t v33 = *(v22 - 1);
        uint64_t v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        uint64_t v35 = v34 + v20 + v33;
        uint64_t v36 = v34 + v26 + v32;
        uint64_t v15 = v36 + v33;
        uint64_t v37 = __ROR8__(v36, 44) + v34;
        unint64_t v38 = (0xB492B66FBE98F273LL * __ROR8__(v27, 37)) ^ v21;
        unint64_t v24 = 0xB492B66FBE98F273LL * __ROR8__(v31, 33);
        unint64_t v16 = v37 + __ROR8__(v35 + v38, 21);
        unint64_t v39 = v24 + v21 + *v22;
        uint64_t v20 = v39 + v30 + v28 + v29;
        uint64_t v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        unint64_t v13 = v38;
        v25 += 64LL;
      }

      while (v25);
      unint64_t v40 = v24
          - 0x622015F714C7D297LL
          * ((0x9DDFEA08EB382D69LL
            * (v21 ^ ((0x9DDFEA08EB382D69LL * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69LL * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69LL * (v21 ^ ((0x9DDFEA08EB382D69LL * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69LL * (v21 ^ v16)))) >> 47));
      unint64_t v41 = 0x9DDFEA08EB382D69LL
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297LL
                  * ((0x9DDFEA08EB382D69LL
                    * (v20 ^ ((0x9DDFEA08EB382D69LL * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69LL * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69LL * (v20 ^ ((0x9DDFEA08EB382D69LL * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69LL * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69LL
           * ((0x9DDFEA08EB382D69LL * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69LL * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }

    else
    {
      return sub_100022024(a2, a3);
    }
  }

  else if (a3 > 0x10)
  {
    return sub_100021F78(a2, a3);
  }

  else
  {
    return sub_100021E80(a2, a3);
  }

unint64_t sub_100021E80(_DWORD *a1, unint64_t a2)
{
  if (a2 < 9)
  {
    if (a2 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        unint64_t v8 = (0xC949D7C7509E6557LL * (a2 + 4LL * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }

    else
    {
      uint64_t v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      unint64_t v7 = 0x9DDFEA08EB382D69LL * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69LL
           * ((0x9DDFEA08EB382D69LL * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69LL * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }

  else
  {
    uint64_t v3 = *(void *)((char *)a1 + a2 - 8);
    uint64_t v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69LL
          * ((0x9DDFEA08EB382D69LL
            * (v4 ^ ((0x9DDFEA08EB382D69LL * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69LL * (v4 ^ *(void *)a1)))) ^ ((0x9DDFEA08EB382D69LL * (v4 ^ ((0x9DDFEA08EB382D69LL * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69LL * (v4 ^ *(void *)a1)))) >> 47))) ^ v3;
  }

  return result;
}

unint64_t sub_100021F78(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  unint64_t v3 = 0xB492B66FBE98F273LL * *a1;
  uint64_t v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  unint64_t v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557LL, 20) - 0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8);
  unint64_t v6 = 0x9DDFEA08EB382D69LL * (v5 ^ (v4 - 0x3C5A37A36834CED9LL * *(void *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69LL
       * ((0x9DDFEA08EB382D69LL * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69LL * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t sub_100022024(void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)((char *)a1 + a2 - 16);
  uint64_t v3 = *a1 - 0x3C5A37A36834CED9LL * (v2 + a2);
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v6 = __ROR8__(v3 + v4, 52);
  uint64_t v7 = v3 + a1[1];
  uint64_t v8 = __ROR8__(v7, 7);
  uint64_t v9 = v7 + v5;
  uint64_t v10 = *(void *)((char *)a1 + a2 - 32) + v5;
  uint64_t v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9LL * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  uint64_t v12 = *(void *)((char *)a1 + a2 - 24) + v10 + v2;
  unint64_t v13 = 0xC3A5C85C97CB3127LL * (v12 + *(void *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1LL
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(void *)((char *)a1 + a2 - 24) + v10, 7)
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9LL * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9LL * (v13 ^ (v13 >> 47))) >> 47));
}

unsigned __int8 *sub_1000220E4(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = (void *)(a1 + 24);
  unint64_t v7 = sub_100021B64(a1 + 24, (uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v12 = v7;
      if (v7 >= v9) {
        unint64_t v12 = v7 % v9;
      }
    }

    else
    {
      unint64_t v12 = (v9 - 1) & v7;
    }

    unint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v12);
    if (v13)
    {
      uint64_t v25 = a3;
      for (int i = *v13; i; int i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v8)
        {
          if ((sub_100021BD4(a1 + 32, i + 16, a2) & 1) != 0) {
            return i;
          }
        }

        else
        {
          if (v11 > 1)
          {
            if (v15 >= v9) {
              v15 %= v9;
            }
          }

          else
          {
            v15 &= v9 - 1;
          }

          if (v15 != v12) {
            break;
          }
        }
      }

      a3 = v25;
    }
  }

  else
  {
    unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  }

  memset(v26, 170, sizeof(v26));
  sub_1000223BC(a1, v8, a3, v26);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v17 = *(float *)(a1 + 32);
  if ((((float)(v17 * (float)v9) >= v16) & ~(v9 == 0)) == 0)
  {
    BOOL v18 = 1LL;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_10002246C(a1, v21);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v12 = v8 % v9;
      }
      else {
        unint64_t v12 = v8;
      }
    }

    else
    {
      unint64_t v12 = (v9 - 1) & v8;
    }
  }

  int v22 = *(void **)(*(void *)a1 + 8 * v12);
  if (v22)
  {
    *(void *)v26[0] = *v22;
    void *v22 = v26[0];
  }

  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v12) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v23 = *(void *)(*(void *)v26[0] + 8LL);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v23 >= v9) {
          v23 %= v9;
        }
      }

      else
      {
        v23 &= v9 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v23) = v26[0];
    }
  }

  int i = (unsigned __int8 *)v26[0];
  ++*v6;
  return i;
}

void sub_100022394( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **__p)
{
  if (__p) {
    sub_1000226A0(v11, __p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000223BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  memset(a4, 170, 24);
  unint64_t v8 = operator new(0x28uLL);
  *a4 = v8;
  a4[1] = v7;
  *((_BYTE *)a4 + 16) = 0;
  *unint64_t v8 = 0LL;
  v8[1] = a2;
  unint64_t result = v8 + 2;
  if (*(char *)(a3 + 23) < 0)
  {
    unint64_t result = sub_10000B8BC(result, *(void **)a3, *(void *)(a3 + 8));
  }

  else
  {
    *(_OWORD *)unint64_t result = *(_OWORD *)a3;
    result[2] = *(void *)(a3 + 16);
  }

  *((_BYTE *)a4 + 16) = 1;
  return result;
}

void sub_100022450(_Unwind_Exception *a1)
{
  void *v1 = 0LL;
  sub_1000226A0(v2, v3);
  _Unwind_Resume(a1);
}

void sub_10002246C(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2LL;
  }

  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }

  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }

    else
    {
      uint64_t v7 = 1LL << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }

    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4) {
LABEL_16:
    }
      sub_100022548(a1, prime);
  }

void sub_100022548(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_100004828();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0LL;
    *(void *)(a1 + sub_100007004((uint64_t)v5 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0LL;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }

      else
      {
        v8 &= a2 - 1;
      }

      *(void *)(*(void *)a1 + 8 * vsub_100007004((uint64_t)v5 + 8) = a1 + 16;
      uint64_t v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }

          else
          {
            v12 &= a2 - 1;
          }

          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }

            *uint64_t v7 = *v11;
            *uint64_t v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            uint64_t v11 = v7;
          }

          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          uint64_t v11 = (void *)*v11;
          unint64_t v8 = v12;
        }

        while (v11);
      }
    }
  }

  else
  {
    uint8x8_t v10 = *(void **)a1;
    *(void *)a1 = 0LL;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + sub_100007004((uint64_t)v5 + 8) = 0LL;
  }

void sub_1000226A0(uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
  }

  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t sub_1000226EC(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100022724(int a1, void **__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void **)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }

    while (v3);
  }

void sub_100022768(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
}

void sub_100022770(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
}

void sub_100022778(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
}

uint64_t *sub_100022780@<X0>( void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, void *a5@<X4>, void *a6@<X5>, void *a7@<X6>, uint64_t *a8@<X8>)
{
  float v16 = operator new(0x1A0uLL);
  sub_100022830((uint64_t)v16, a1, a2, a3, a4, a5, a6, a7);
  return sub_1000245B4(a8, (uint64_t)v16);
}

void sub_100022814(void *a1)
{
}

uint64_t sub_100022830( uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  dispatch_queue_t v16 = dispatch_queue_create("analyticsd.TransformManagerQueue", 0LL);
  *(void *)(a1 + sub_100007004((uint64_t)v5 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = v16;
  if (v16)
  {
    float v17 = v16;
    dispatch_retain(v16);
    dispatch_release(v17);
  }

  *(void *)a1 = off_100125F48;
  *(void *)(a1 + 32) = off_100125FA8;
  *(void *)(a1 + 40) = off_100125FD0;
  *(void *)(a1 + 4sub_100007004((uint64_t)v5 + 8) = off_100126000;
  *(void *)(a1 + 56) = *a2;
  uint64_t v18 = a2[1];
  *(void *)(a1 + 64) = v18;
  if (v18)
  {
    unint64_t v19 = (unint64_t *)(v18 + 8);
    do
      unint64_t v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }

  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 80) = 0LL;
  *(void *)(a1 + 8sub_100007004((uint64_t)v5 + 8) = *a3;
  uint64_t v21 = a3[1];
  *(void *)(a1 + 96) = v21;
  if (v21)
  {
    int v22 = (unint64_t *)(v21 + 8);
    do
      unint64_t v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }

  *(void *)(a1 + 104) = *a4;
  uint64_t v24 = a4[1];
  *(void *)(a1 + 112) = v24;
  if (v24)
  {
    uint64_t v25 = (unint64_t *)(v24 + 8);
    do
      unint64_t v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }

  *(void *)(a1 + 120) = *a5;
  uint64_t v27 = a5[1];
  *(void *)(a1 + 12sub_100007004((uint64_t)v5 + 8) = v27;
  if (v27)
  {
    uint64_t v28 = (unint64_t *)(v27 + 8);
    do
      unint64_t v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }

  *(void *)(a1 + 136) = *a6;
  uint64_t v30 = a6[1];
  *(void *)(a1 + 144) = v30;
  if (v30)
  {
    uint64_t v31 = (unint64_t *)(v30 + 8);
    do
      unint64_t v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }

  *(void *)(a1 + 152) = *a7;
  uint64_t v33 = a7[1];
  *(void *)(a1 + 160) = v33;
  if (v33)
  {
    uint64_t v34 = (unint64_t *)(v33 + 8);
    do
      unint64_t v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }

  *(void *)(a1 + 16sub_100007004((uint64_t)v5 + 8) = *a8;
  uint64_t v36 = a8[1];
  *(void *)(a1 + 176) = v36;
  if (v36)
  {
    uint64_t v37 = (unint64_t *)(v36 + 8);
    do
      unint64_t v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }

  unsigned int v39 = sub_100092740();
  v47[0] = &off_100126148;
  v47[1] = sub_100022BF0;
  time_t v48 = v47;
  v45[0] = &off_1001261F8;
  v45[1] = sub_100022BF8;
  uint64_t v46 = v45;
  sub_100024824(a1 + 184, v39, (uint64_t)v47, (uint64_t)v45);
  unint64_t v40 = v46;
  if (v46 == v45)
  {
    uint64_t v41 = 4LL;
    unint64_t v40 = v45;
  }

  else
  {
    if (!v46) {
      goto LABEL_29;
    }
    uint64_t v41 = 5LL;
  }

  (*(void (**)(void))(*v40 + 8 * v41))();
LABEL_29:
  uint64_t v42 = v48;
  if (v48 == v47)
  {
    uint64_t v43 = 4LL;
    uint64_t v42 = v47;
    goto LABEL_33;
  }

  if (v48)
  {
    uint64_t v43 = 5LL;
LABEL_33:
    (*(void (**)(void))(*v42 + 8 * v43))();
  }

  *(void *)(a1 + 400) = std::chrono::system_clock::now().__d_.__rep_ + 60000000;
  *(_DWORD *)(a1 + 40sub_100007004((uint64_t)v5 + 8) = 100000;
  return a1;
}

void sub_100022B28( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
}

uint64_t sub_100022BF0()
{
  return 1LL;
}

uint64_t sub_100022BF8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = (os_log_s *)qword_100131918;
  if (os_log_type_enabled((os_log_t)qword_100131918, OS_LOG_TYPE_DEBUG)) {
    sub_1000D76E8(a2, v3);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)*a2 + 40LL))(*a2);
}

uint64_t sub_100022C54(uint64_t a1)
{
  uint64_t v2 = *(dispatch_object_s **)(a1 + 16);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void *sub_100022C8C(void *a1)
{
  *a1 = off_100125F48;
  a1[4] = off_100125FA8;
  a1[5] = off_100125FD0;
  a1[6] = off_100126000;
  uint64_t v2 = (os_log_s *)qword_100131918;
  if (os_log_type_enabled((os_log_t)qword_100131918, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)int8x8_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "[Transform Manager] Destructor called", v4, 2u);
  }

  sub_100022DB0(a1 + 23);
  sub_100024C8C((uint64_t)(a1 + 23));
  sub_100007004((uint64_t)(a1 + 21));
  sub_100007004((uint64_t)(a1 + 19));
  sub_100007004((uint64_t)(a1 + 17));
  sub_100007004((uint64_t)(a1 + 15));
  sub_100007004((uint64_t)(a1 + 13));
  sub_100007004((uint64_t)(a1 + 11));
  sub_100007004((uint64_t)(a1 + 9));
  sub_100007004((uint64_t)(a1 + 7));
  sub_100022C54((uint64_t)(a1 + 1));
  return a1;
}

void sub_100022DA4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

void sub_100022DB0(void *a1)
{
  while (a1[21])
  {
    sub_100024D64(a1, *(void *)(a1[20] + 16LL));
    uint64_t v2 = (uint64_t *)a1[20];
    uint64_t v3 = a1[21];
    uint64_t v4 = *v2;
    *(void *)(v4 + sub_100007004((uint64_t)v5 + 8) = v2[1];
    *(void *)v2[1] = v4;
    a1[21] = v3 - 1;
    operator delete(v2);
  }

  a1[1] = 0LL;
}

void *sub_100022E18(uint64_t a1)
{
  return sub_100022C8C((void *)(a1 - 32));
}

void *sub_100022E20(uint64_t a1)
{
  return sub_100022C8C((void *)(a1 - 40));
}

void *sub_100022E28(uint64_t a1)
{
  return sub_100022C8C((void *)(a1 - 48));
}

void sub_100022E30(void *a1)
{
  uint64_t v1 = sub_100022C8C(a1);
  operator delete(v1);
}

void sub_100022E44(uint64_t a1)
{
  uint64_t v1 = sub_100022C8C((void *)(a1 - 32));
  operator delete(v1);
}

void sub_100022E5C(uint64_t a1)
{
  uint64_t v1 = sub_100022C8C((void *)(a1 - 40));
  operator delete(v1);
}

void sub_100022E74(uint64_t a1)
{
  uint64_t v1 = sub_100022C8C((void *)(a1 - 48));
  operator delete(v1);
}

void sub_100022E8C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }

  unint64_t v21 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000CF18(&v21, (void *)(a1 + 8));
  uint64_t v7 = operator new(0x18uLL);
  *uint64_t v7 = a1;
  v7[1] = v4;
  v7[2] = v3;
  if (v3)
  {
    unint64_t v8 = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }

  uint8x8_t v10 = *(dispatch_queue_s **)(a1 + 24);
  unint64_t v11 = v21;
  unint64_t v12 = v22;
  if (v22)
  {
    uint64_t v13 = (unint64_t *)(v22 + 8);
    do
      unint64_t v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }

  uint64_t v15 = operator new(0x18uLL);
  *uint64_t v15 = v7;
  v15[1] = v11;
  void v15[2] = v12;
  dispatch_async_f(v10, v15, (dispatch_function_t)sub_100024EA4);
  uint64_t v16 = (std::__shared_weak_count *)v22;
  if (v22)
  {
    uint64_t v17 = (unint64_t *)(v22 + 8);
    do
      unint64_t v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }

  if (v3)
  {
    unint64_t v19 = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

void sub_100022FFC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

void sub_10002300C(uint64_t a1@<X0>, dispatch_group_t *a2@<X8>)
{
  dispatch_group_t v4 = dispatch_group_create();
  unint64_t v5 = v4;
  *a2 = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v5);
  }

  unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000CF18(&v16, (void *)(a1 + 8));
  unint64_t v6 = operator new(0x10uLL);
  *unint64_t v6 = a1;
  v6[1] = v5;
  uint64_t v7 = *(dispatch_queue_s **)(a1 + 24);
  unint64_t v8 = v16;
  unint64_t v9 = v17;
  if (v17)
  {
    uint8x8_t v10 = (unint64_t *)(v17 + 8);
    do
      unint64_t v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }

  unint64_t v12 = operator new(0x18uLL);
  *unint64_t v12 = v6;
  v12[1] = v8;
  v12[2] = v9;
  dispatch_async_f(v7, v12, (dispatch_function_t)sub_100025388);
  uint64_t v13 = (std::__shared_weak_count *)v17;
  if (v17)
  {
    unint64_t v14 = (unint64_t *)(v17 + 8);
    do
      unint64_t v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

void sub_10002312C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

void sub_10002313C(uint64_t a1@<X0>, dispatch_group_t *a2@<X8>)
{
  dispatch_group_t v4 = dispatch_group_create();
  unint64_t v5 = v4;
  *a2 = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v5);
  }

  unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000CF18(&v16, (void *)(a1 + 8));
  unint64_t v6 = operator new(0x10uLL);
  *unint64_t v6 = a1;
  v6[1] = v5;
  uint64_t v7 = *(dispatch_queue_s **)(a1 + 24);
  unint64_t v8 = v16;
  unint64_t v9 = v17;
  if (v17)
  {
    uint8x8_t v10 = (unint64_t *)(v17 + 8);
    do
      unint64_t v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }

  unint64_t v12 = operator new(0x18uLL);
  *unint64_t v12 = v6;
  v12[1] = v8;
  v12[2] = v9;
  dispatch_async_f(v7, v12, (dispatch_function_t)sub_100025470);
  uint64_t v13 = (std::__shared_weak_count *)v17;
  if (v17)
  {
    unint64_t v14 = (unint64_t *)(v17 + 8);
    do
      unint64_t v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

void sub_10002325C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

void sub_10002326C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 8;
  v4[0] = a1;
  v4[1] = a2;
  uint64_t v3 = *(dispatch_queue_s **)(a1 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_1000255D4;
  block[3] = &unk_100126318;
  block[4] = v2;
  block[5] = v4;
  dispatch_sync(v3, block);
}

void sub_1000232F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 - 40;
  v4[0] = a1 - 48;
  v4[1] = a2;
  uint64_t v3 = *(dispatch_queue_s **)(a1 - 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_1000255D4;
  block[3] = &unk_100126318;
  block[4] = v2;
  block[5] = v4;
  dispatch_sync(v3, block);
}

void sub_100023388(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = a1;
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(dispatch_queue_s **)(a1 + 24);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000LL;
  v5[2] = sub_10002A9C0;
  void v5[3] = &unk_100126668;
  v5[4] = v2;
  v5[5] = &v4;
  unint64_t v6 = v5;
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_10002AC7C;
  block[3] = &unk_100126688;
  block[4] = a2;
  block[5] = &v6;
  dispatch_sync(v3, block);
}

uint64_t sub_100023448(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 8;
  v5[0] = a1;
  v5[1] = a2;
  uint64_t v3 = *(dispatch_queue_s **)(a1 + 24);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000LL;
  v6[2] = sub_10002ADD4;
  void v6[3] = &unk_1001266A8;
  v6[4] = v2;
  v6[5] = v5;
  uint64_t v7 = v6;
  unsigned __int8 v9 = -86;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_10002AF98;
  block[3] = &unk_1001266C8;
  block[4] = &v9;
  block[5] = &v7;
  dispatch_sync(v3, block);
  return v9;
}

uint64_t sub_100023510(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 8;
  v5[0] = a1;
  v5[1] = a2;
  uint64_t v3 = *(dispatch_queue_s **)(a1 + 24);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000LL;
  v6[2] = sub_10002AFCC;
  void v6[3] = &unk_1001266E8;
  v6[4] = v2;
  v6[5] = v5;
  uint64_t v7 = v6;
  unsigned __int8 v9 = -86;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_10002AF98;
  block[3] = &unk_1001266C8;
  block[4] = &v9;
  block[5] = &v7;
  dispatch_sync(v3, block);
  return v9;
}

void sub_1000235D8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v8 = a2;
  char v6 = a3;
  uint64_t v3 = a1 + 8;
  v5[0] = a1;
  v5[1] = &v8;
  void v5[2] = &v6;
  uint64_t v4 = *(dispatch_queue_s **)(a1 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_10002B144;
  block[3] = &unk_100126708;
  block[4] = v3;
  block[5] = v5;
  dispatch_sync(v4, block);
}

void sub_100023678(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  v5[0] = a1;
  v5[1] = a2;
  uint64_t v4 = *(dispatch_queue_s **)(a1 + 24);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000LL;
  v6[2] = sub_10002B15C;
  void v6[3] = &unk_100126728;
  v6[4] = a1 + 8;
  v6[5] = v5;
  uint64_t v7 = v6;
  *a3 = 0xAAAAAAAAAAAAAA00LL;
  a3[1] = 0LL;
  sub_1000041AC((uint64_t)a3);
  sub_1000041AC((uint64_t)a3);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_10002BAFC;
  block[3] = &unk_100126748;
  block[4] = a3;
  block[5] = &v7;
  dispatch_sync(v4, block);
}

void sub_10002376C(uint64_t a1@<X0>, char a2@<W1>, _OWORD *a3@<X8>)
{
  char v7 = a2;
  uint64_t v3 = a1 + 8;
  v6[0] = a1;
  v6[1] = &v7;
  uint64_t v4 = *(dispatch_queue_s **)(a1 + 24);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 0x40000000LL;
  void v8[2] = sub_10002BDF0;
  void v8[3] = &unk_100126768;
  v8[4] = v3;
  v8[5] = v6;
  unsigned __int8 v9 = v8;
  block[0] = _NSConcreteStackBlock;
  *(void *)&__int128 v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = v5;
  a3[2] = v5;
  *a3 = v5;
  block[1] = 0x40000000LL;
  block[2] = sub_10002BE04;
  block[3] = &unk_100126788;
  block[4] = a3;
  block[5] = &v9;
  dispatch_sync(v4, block);
}

void sub_100023834(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v3 = a1;
  uint64_t v2 = *(dispatch_queue_s **)(a1 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_10002BE80;
  block[3] = &unk_1001267A8;
  block[4] = v1;
  block[5] = &v3;
  dispatch_sync(v2, block);
}

void sub_1000238C0(uint64_t a1, __int128 *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10000B8BC(&__p, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 __p = *a2;
    uint64_t v16 = *((void *)a2 + 2);
  }

  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000CF18(&v17, (void *)(a1 + 8));
  uint64_t v3 = operator new(0x20uLL);
  *uint64_t v3 = a1;
  uint64_t v4 = v3 + 1;
  if (SHIBYTE(v16) < 0)
  {
    sub_10000B8BC(v4, (void *)__p, *((unint64_t *)&__p + 1));
  }

  else
  {
    *(_OWORD *)uint64_t v4 = __p;
    v3[3] = v16;
  }

  __int128 v5 = *(dispatch_queue_s **)(a1 + 24);
  unint64_t v6 = v17;
  unint64_t v7 = v18;
  if (v18)
  {
    uint64_t v8 = (unint64_t *)(v18 + 8);
    do
      unint64_t v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }

  uint8x8_t v10 = operator new(0x18uLL);
  *uint8x8_t v10 = v3;
  v10[1] = v6;
  v10[2] = v7;
  dispatch_async_f(v5, v10, (dispatch_function_t)sub_10002BE90);
  unint64_t v11 = (std::__shared_weak_count *)v18;
  if (v18)
  {
    unint64_t v12 = (unint64_t *)(v18 + 8);
    do
      unint64_t v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  if (SHIBYTE(v16) < 0) {
    operator delete((void *)__p);
  }
}

void sub_100023A2C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

void sub_100023A3C(uint64_t a1, __int128 *a2)
{
}

void sub_100023A44(uint64_t a1)
{
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000CF18(&v12, (void *)(a1 + 8));
  uint64_t v2 = operator new(8uLL);
  void *v2 = a1;
  uint64_t v3 = *(dispatch_queue_s **)(a1 + 24);
  unint64_t v4 = v12;
  unint64_t v5 = v13;
  if (v13)
  {
    unint64_t v6 = (unint64_t *)(v13 + 8);
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }

  uint64_t v8 = operator new(0x18uLL);
  *uint64_t v8 = v2;
  v8[1] = v4;
  void v8[2] = v5;
  dispatch_async_f(v3, v8, (dispatch_function_t)sub_10002C04C);
  unint64_t v9 = (std::__shared_weak_count *)v13;
  if (v13)
  {
    uint8x8_t v10 = (unint64_t *)(v13 + 8);
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

void sub_100023B3C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

void sub_100023B4C(uint64_t a1)
{
}

void sub_100023B54(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v3 = a1;
  uint64_t v2 = *(dispatch_queue_s **)(a1 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_10002C0B8;
  block[3] = &unk_1001267C8;
  block[4] = v1;
  block[5] = &v3;
  dispatch_sync(v2, block);
}

void sub_100023BE0(uint64_t a1)
{
  uint64_t v1 = a1 - 32;
  uint64_t v3 = a1 - 40;
  uint64_t v2 = *(dispatch_queue_s **)(a1 - 16);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_10002C0B8;
  block[3] = &unk_1001267C8;
  block[4] = v1;
  block[5] = &v3;
  dispatch_sync(v2, block);
}

void sub_100023C70(uint64_t a1, int a2)
{
  v4.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = v4.__d_.__rep_;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v6 = *(void *)(a1 + 400);
  int v7 = *(_DWORD *)(a1 + 408);
  if ((a2 & 1) == 0 && v6 >= v4.__d_.__rep_ && v7 != 0)
  {
    *(_DWORD *)(a1 + 40sub_100007004((uint64_t)v5 + 8) = v7 - 1;
    return;
  }

  if (a2)
  {
    uint64_t v9 = qword_100131920;
    if (os_log_type_enabled((os_log_t)qword_100131920, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      uint8x8_t v10 = "[Transform Cache] Checkpoint initiated (forced)";
      unint64_t v11 = (os_log_s *)v9;
      uint32_t v12 = 2;
LABEL_16:
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, v10, buf, v12);
    }
  }

  else
  {
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v13 = v6 - v4.__d_.__rep_;
    if (v6 >= v4.__d_.__rep_)
    {
      if (!v7)
      {
        uint64_t v15 = qword_100131920;
        if (os_log_type_enabled((os_log_t)qword_100131920, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 134217984;
          *(void *)unint64_t v22 = v13 / 1000000;
          uint8x8_t v10 = "[Transform Cache] Checkpoint initiated. Persistence event countdown reached. Additional info {throttleTi"
                "meRemaining (s): %lld}";
          unint64_t v11 = (os_log_s *)v15;
          uint32_t v12 = 12;
          goto LABEL_16;
        }
      }
    }

    else
    {
      uint64_t v14 = qword_100131920;
      if (os_log_type_enabled((os_log_t)qword_100131920, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)unint64_t v22 = 100000 - v7;
        *(_WORD *)&v22[4] = 1024;
        *(_DWORD *)&v22[6] = 100000;
        uint8x8_t v10 = "[Transform Cache] Checkpoint initiated. Persistence time throttle expired. Additional info {eventsSeen: %u"
              ", eventsRequired: %u}";
        unint64_t v11 = (os_log_s *)v14;
        uint32_t v12 = 14;
        goto LABEL_16;
      }
    }
  }

  uint64_t v16 = *(void *)(a1 + 344);
  if (v16 == a1 + 336)
  {
    int v17 = 0;
  }

  else
  {
    int v17 = 0;
    do
    {
      v17 += (*(uint64_t (**)(void))(**(void **)(*(void *)(v16 + 16) + 56LL) + 40LL))(*(void *)(*(void *)(v16 + 16) + 56LL)) ^ 1;
      uint64_t v16 = *(void *)(v16 + 8);
    }

    while (v16 != a1 + 336);
  }

  unint64_t v18 = (os_log_s *)qword_100131920;
  if (os_log_type_enabled((os_log_t)qword_100131920, OS_LOG_TYPE_INFO))
  {
    uint64_t v19 = *(void *)(a1 + 352);
    *(_DWORD *)buf = 134218240;
    *(void *)unint64_t v22 = v19;
    *(_WORD *)&unsigned __int8 v22[8] = 1024;
    int v23 = v17;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "[Transform Cache] Checkpoint %lu transforms attempted to persisted. %u failures.",  buf,  0x12u);
  }

  *(void *)(a1 + 400) = rep + 60000000;
  *(_DWORD *)(a1 + 40sub_100007004((uint64_t)v5 + 8) = 100000;
  sub_100092C70();
  sub_10008A5DC(*(void **)(a1 + 136), (dispatch_group_t *)&object);
  if (object) {
    dispatch_release(object);
  }
}

uint64_t sub_100023EFC(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_100131918;
  if (os_log_type_enabled((os_log_t)qword_100131918, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::chrono::system_clock::time_point v4 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "[Transform Manager] re-enabling all budgeted transform",  v4,  2u);
  }

  return (*(uint64_t (**)(void))(**(void **)(a1 + 88) + 144LL))(*(void *)(a1 + 88));
}

uint64_t sub_100023FA4(uint64_t a1, uint64_t a2, int a3)
{
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v6 = (os_log_s *)qword_100131918;
  if (os_log_type_enabled((os_log_t)qword_100131918, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint32_t v12 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[Transform Manager] cleanup expired transform state",  v12,  2u);
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v6 = (os_log_s *)qword_100131918;
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint32_t v12 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[Transform Manager] purging all in-memory transforms",  v12,  2u);
  }

  sub_100022DB0((void *)(a1 + 184));
  int v7 = (os_log_s *)qword_100131918;
  if (os_log_type_enabled((os_log_t)qword_100131918, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint32_t v12 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[Transform Manager] removing expired, persisted transform state",  v12,  2u);
  }

  uint64_t v8 = **(void (****)(void))(a1 + 104);
  if ((a2 & 0xFF00000000LL) != 0)
  {
    v8[18]();
  }

  else
  {
    if (a3) {
      uint64_t v9 = v8[16];
    }
    else {
      uint64_t v9 = v8[17];
    }
    v9();
  }

  uint8x8_t v10 = (os_log_s *)qword_100131918;
  if (os_log_type_enabled((os_log_t)qword_100131918, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint32_t v12 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "[Transform Manager] resetting all budget usage",  v12,  2u);
  }

  return sub_100023EFC(a1);
}

uint64_t sub_10002414C@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(int32x2_t *)a3 = vrev64_s32(*(int32x2_t *)(a1 + 16));
  *(int8x16_t *)(a3 + sub_100007004((uint64_t)v5 + 8) = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
  uint64_t result = sub_10002C0C8(a1);
  uint64_t v7 = *(void *)(a1 + 168);
  *(void *)(a3 + 24) = result;
  *(void *)(a3 + 32) = v7;
  *(_DWORD *)(a3 + 40) = *(_DWORD *)(a1 + 24);
  if (a2)
  {
    *(void *)(a1 + 16) = 0LL;
    *(_DWORD *)(a1 + 24) = 0;
  }

  return result;
}

uint64_t sub_1000241BC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = result + 336;
  uint64_t v5 = *(void *)(result + 344);
  if (v5 == result + 336)
  {
LABEL_18:
    *a3 = 0LL;
    a3[1] = 0LL;
    return result;
  }

  while (1)
  {
    uint64_t v7 = *(void *)(v5 + 16);
    uint64_t result = sub_10008D2D4(*(void *)(v7 + 56));
    uint64_t v8 = *(unsigned __int8 *)(result + 23);
    if ((v8 & 0x80u) == 0LL) {
      uint64_t v9 = *(unsigned __int8 *)(result + 23);
    }
    else {
      uint64_t v9 = *(void *)(result + 8);
    }
    uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
    int v11 = (char)v10;
    if ((v10 & 0x80u) != 0LL) {
      uint64_t v10 = *(void *)(a2 + 8);
    }
    if (v9 != v10) {
      goto LABEL_17;
    }
    uint32_t v12 = v11 >= 0 ? (unsigned __int8 *)a2 : *(unsigned __int8 **)a2;
    if ((v8 & 0x80) != 0) {
      break;
    }
    if (!*(_BYTE *)(result + 23)) {
      goto LABEL_19;
    }
    while (*(unsigned __int8 *)result == *v12)
    {
      ++result;
      ++v12;
      if (!--v8) {
        goto LABEL_19;
      }
    }

uint64_t sub_1000242B0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = result + 336;
  uint64_t v5 = *(void *)(result + 344);
  if (v5 == result + 336)
  {
LABEL_18:
    *a3 = 0LL;
    a3[1] = 0LL;
    return result;
  }

  while (1)
  {
    uint64_t v7 = *(void *)(v5 + 16);
    uint64_t result = sub_10008D0C4(*(void *)(v7 + 56));
    uint64_t v8 = *(unsigned __int8 *)(result + 23);
    if ((v8 & 0x80u) == 0LL) {
      uint64_t v9 = *(unsigned __int8 *)(result + 23);
    }
    else {
      uint64_t v9 = *(void *)(result + 8);
    }
    uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
    int v11 = (char)v10;
    if ((v10 & 0x80u) != 0LL) {
      uint64_t v10 = *(void *)(a2 + 8);
    }
    if (v9 != v10) {
      goto LABEL_17;
    }
    uint32_t v12 = v11 >= 0 ? (unsigned __int8 *)a2 : *(unsigned __int8 **)a2;
    if ((v8 & 0x80) != 0) {
      break;
    }
    if (!*(_BYTE *)(result + 23)) {
      goto LABEL_19;
    }
    while (*(unsigned __int8 *)result == *v12)
    {
      ++result;
      ++v12;
      if (!--v8) {
        goto LABEL_19;
      }
    }

void sub_1000243A4(uint64_t a1)
{
  int v1 = dword_1001316E8++;
  HIDWORD(v2) = -1030792151 * v1 + 85899344;
  LODWORD(v2) = HIDWORD(v2);
  if ((v2 >> 1) <= 0x51EB850)
  {
    uint64_t v5 = *(int *)(a1 + 200);
    uint64_t v4 = *(int *)(a1 + 204);
    uint64_t v6 = *(void *)(a1 + 192);
    sub_10002C0C8(a1 + 184);
    uint64_t v7 = *(void *)(a1 + 352);
    uint64_t v8 = v5 + v4;
    int v9 = dword_1001316E8 % 1000;
    uint64_t v10 = (os_log_s *)qword_100131920;
    if (dword_1001316E8 % 1000)
    {
      if (os_log_type_enabled((os_log_t)qword_100131920, OS_LOG_TYPE_DEBUG))
      {
        int v11 = 67110400;
        int v12 = v4;
        __int16 v13 = 2048;
        uint64_t v14 = v8;
        __int16 v15 = 2048;
        double v16 = (double)(int)v4 * 100.0 / (double)(int)v8;
        __int16 v17 = 2048;
        uint64_t v18 = v7;
        __int16 v19 = 2048;
        uint64_t v20 = v7;
        __int16 v21 = 2048;
        uint64_t v22 = v6;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "[Transform Manager] Cache performance: {cacheHits: %d / %ld (%.2f%%), keyCount: %zu, nodeCount: %zu, cacheCost: %zu}",  (uint8_t *)&v11,  0x3Au);
      }
    }

    else if (os_log_type_enabled((os_log_t)qword_100131920, OS_LOG_TYPE_INFO))
    {
      int v11 = 67110400;
      int v12 = v4;
      __int16 v13 = 2048;
      uint64_t v14 = v8;
      __int16 v15 = 2048;
      double v16 = (double)(int)v4 * 100.0 / (double)(int)v8;
      __int16 v17 = 2048;
      uint64_t v18 = v7;
      __int16 v19 = 2048;
      uint64_t v20 = v7;
      __int16 v21 = 2048;
      uint64_t v22 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "[Transform Manager] Cache performance: {cacheHits: %d / %ld (%.2f%%), keyCount: %zu, nodeCount: %zu, cacheCost: %zu}",  (uint8_t *)&v11,  0x3Au);
    }

    sub_1000A391C(v9 != 0);
  }

dispatch_group_t sub_100024590@<X0>(dispatch_group_t *a1@<X8>)
{
  dispatch_group_t result = dispatch_group_create();
  *a1 = result;
  return result;
}

uint64_t *sub_1000245B4(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  void *v4 = &off_1001260E8;
  v4[1] = 0LL;
  void v4[2] = 0LL;
  v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2) {
    uint64_t v5 = (void *)(a2 + 8);
  }
  else {
    uint64_t v5 = 0LL;
  }
  sub_10000CCC8((uint64_t)a1, v5, a2);
  return a1;
}

void sub_100024610(void *a1)
{
}

void sub_100024630(_Unwind_Exception *a1)
{
}

void sub_100024648(std::__shared_weak_count *a1)
{
}

void sub_10002465C(uint64_t a1)
{
}

uint64_t sub_100024670(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

uint64_t sub_1000246B0(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

void *sub_1000246CC(uint64_t a1)
{
  dispatch_group_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *dispatch_group_t result = &off_100126148;
  result[1] = v3;
  return result;
}

uint64_t sub_100024700(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_100126148;
  a2[1] = v2;
  return result;
}

uint64_t sub_10002471C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(a2, a3);
}

uint64_t sub_10002472C(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_100024768()
{
  return &off_1001261C8;
}

void *sub_10002477C(uint64_t a1)
{
  dispatch_group_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *dispatch_group_t result = &off_1001261F8;
  result[1] = v3;
  return result;
}

uint64_t sub_1000247B0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1001261F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_1000247CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(a2, a3);
}

uint64_t sub_1000247DC(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_100024818()
{
  return &off_100126278;
}

uint64_t sub_100024824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + sub_100007004((uint64_t)v5 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + 24) = 0;
  sub_100024988(a1 + 32, a4);
  sub_1000249EC(a1 + 64, a3);
  *(_OWORD *)(a1 + 184) = 0u;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 104) = 0LL;
  *(void *)(a1 + 112) = 0LL;
  *(_OWORD *)(a1 + 120) = xmmword_1000F2140;
  *(_OWORD *)(a1 + 136) = xmmword_1000F2150;
  *(void *)(a1 + 152) = a1 + 152;
  *(void *)(a1 + 160) = a1 + 152;
  *(_OWORD *)(a1 + 200) = 0u;
  *(void *)(a1 + 192) = a1 + 184;
  *(void *)(a1 + 200) = a1 + 184;
  *(void *)(a1 + 16sub_100007004((uint64_t)v5 + 8) = 0LL;
  *(void *)(a1 + 176) = 0LL;
  if (!a2) {
    __assert_rtn("LruCache", "LruCache.h", 115, "nodeCapacity > 0");
  }
  return a1;
}

void sub_1000248F8(_Unwind_Exception *a1)
{
  if (*(void *)v6) {
    sub_1000D77B4(*(void **)v6);
  }
  *(void *)uint64_t v6 = 0LL;
  *(void *)(v6 + sub_100007004((uint64_t)v5 + 8) = 0LL;
  *(void *)(v6 + 16) = 0LL;
  sub_100024A50(v5);
  sub_100024AB0(v4);
  uint64_t v8 = *(void **)(v2 + 88);
  if (v8 == v3)
  {
    uint64_t v9 = 4LL;
  }

  else
  {
    if (!v8) {
      goto LABEL_8;
    }
    uint64_t v9 = 5LL;
    uint64_t v3 = *(void **)(v2 + 88);
  }

  (*(void (**)(void *))(*v3 + 8 * v9))(v3);
LABEL_8:
  uint64_t v10 = *(void **)(v2 + 56);
  if (v10 == v1)
  {
    uint64_t v11 = 4LL;
  }

  else
  {
    if (!v10) {
      goto LABEL_13;
    }
    uint64_t v11 = 5LL;
    int v1 = *(void **)(v2 + 56);
  }

  (*(void (**)(void *))(*v1 + 8 * v11))(v1);
LABEL_13:
  _Unwind_Resume(a1);
}

uint64_t sub_100024988(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 24) = v4;
  }

  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }

  *uint64_t v3 = 0LL;
  return a1;
}

uint64_t sub_1000249EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 24) = v4;
  }

  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }

  *uint64_t v3 = 0LL;
  return a1;
}

void *sub_100024A50(void *result)
{
  if (result[2])
  {
    int v1 = result;
    dispatch_group_t result = (void *)result[1];
    uint64_t v2 = *v1;
    uint64_t v3 = *result;
    *(void *)(v3 + sub_100007004((uint64_t)v5 + 8) = *(void *)(*v1 + 8LL);
    **(void **)(v2 + sub_100007004((uint64_t)v5 + 8) = v3;
    v1[2] = 0LL;
    if (result != v1)
    {
      do
      {
        uint64_t v4 = (void *)result[1];
        operator delete(result);
        dispatch_group_t result = v4;
      }

      while (v4 != v1);
    }
  }

  return result;
}

void **sub_100024AB0(void **a1)
{
  uint64_t v2 = (char *)a1[1];
  if (v2)
  {
    unint64_t v3 = (unint64_t)a1[3];
    if (v3 <= 8) {
      unint64_t v3 = 8LL;
    }
    unint64_t v4 = (v3 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    if (!v4) {
      __assert_rtn("alloc_size", "pool.hpp", 353, "s >= min_alloc_size");
    }
    uint64_t v5 = (char *)*a1;
    uint64_t v6 = (char *)a1[2];
    do
    {
      uint64_t v7 = *(char **)&v6[(void)v2 - 16];
      uint64_t v8 = *(char **)&v6[(void)v2 - 8];
      if (v2 == &v6[(void)v2 - 16]) {
        goto LABEL_16;
      }
      uint64_t v9 = 0LL;
      uint64_t v10 = v6 - 16;
      do
      {
        uint64_t v11 = &v9[(void)v2];
        if (&v9[(void)v2] == v5)
        {
          uint64_t v5 = *(char **)v11;
        }

        else
        {
          sub_100007004((uint64_t)(v11 + 56));
          if (v11[55] < 0) {
            operator delete(*(void **)&v9[(void)v2 + 32]);
          }
          if (*(void *)v11) {
            __assert_rtn("destructor_impl", "generic_hook.hpp", 48, "!hook.is_linked()");
          }
        }

        v9 += v4;
      }

      while (v10 != v9);
      if (v2) {
LABEL_16:
      }
        operator delete[](v2);
      uint64_t v6 = v8;
      uint64_t v2 = v7;
    }

    while (v7);
    a1[1] = 0LL;
  }

  sub_100024C30(a1);
  return a1;
}

void *sub_100024BF0(void *result)
{
  if (*result) {
    __assert_rtn("destructor_impl", "generic_hook.hpp", 48, "!hook.is_linked()");
  }
  return result;
}

BOOL sub_100024C30(void *a1)
{
  uint64_t v1 = a1[1];
  if (v1)
  {
    uint64_t v3 = a1[2];
    unint64_t v4 = (char *)a1[1];
    do
    {
      uint64_t v5 = *(char **)&v4[v3 - 16];
      uint64_t v3 = *(void *)&v4[v3 - 8];
      operator delete[](v4);
      unint64_t v4 = v5;
    }

    while (v5);
    *a1 = 0LL;
    a1[1] = 0LL;
    a1[4] = a1[5];
  }

  return v1 != 0;
}

uint64_t sub_100024C8C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 184);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)v2[1];
      if (v3)
      {
        v2[1] = v3[2];
        v3[2] = v2;
      }

      else
      {
        uint64_t v3 = (void *)v2[2];
        void *v2 = 0LL;
        v2[1] = 0LL;
        v2[2] = 0LL;
      }

      uint64_t v2 = v3;
    }

    while (v3);
  }

  *(void *)(a1 + 184) = 0LL;
  *(void *)(a1 + 192) = 0LL;
  *(void *)(a1 + 200) = 0LL;
  sub_100024A50((void *)(a1 + 152));
  sub_100024AB0((void **)(a1 + 96));
  unint64_t v4 = *(void **)(a1 + 88);
  if (v4 == (void *)(a1 + 64))
  {
    uint64_t v5 = 4LL;
    unint64_t v4 = (void *)(a1 + 64);
  }

  else
  {
    if (!v4) {
      goto LABEL_11;
    }
    uint64_t v5 = 5LL;
  }

  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_11:
  uint64_t v6 = *(void **)(a1 + 56);
  if (v6 == (void *)(a1 + 32))
  {
    uint64_t v7 = 4LL;
    uint64_t v6 = (void *)(a1 + 32);
    goto LABEL_15;
  }

  if (v6)
  {
    uint64_t v7 = 5LL;
LABEL_15:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }

  return a1;
}

void sub_100024D64(void *a1, unint64_t a2)
{
  uint64_t v3 = a1[7];
  if (!v3) {
    sub_1000129CC();
  }
  uint64_t v5 = *(void *)(a2 + 72);
  (*(void (**)(uint64_t, unint64_t, unint64_t))(*(void *)v3 + 48LL))(v3, a2 + 32, a2 + 56);
  sub_100024E10(a1 + 12, a2);
  a1[1] -= v5;
}

uint64_t sub_100024DC8(uint64_t result)
{
  uint64_t v1 = result + 8;
  uint64_t v2 = *(void **)(result + 8);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)v2[1];
      if (v3)
      {
        v2[1] = v3[2];
        v3[2] = v2;
      }

      else
      {
        uint64_t v3 = (void *)v2[2];
        void *v2 = 0LL;
        v2[1] = 0LL;
        v2[2] = 0LL;
      }

      uint64_t v2 = v3;
    }

    while (v3);
  }

  *(void *)(result + 16) = v1;
  *(void *)(result + 24) = v1;
  *(_DWORD *)(result + 32) = 0;
  *(void *)dispatch_group_t result = 0LL;
  *(void *)(result + sub_100007004((uint64_t)v5 + 8) = 0LL;
  return result;
}

void sub_100024E10(unint64_t *a1, unint64_t a2)
{
  if (*(void *)a2) {
    __assert_rtn("destructor_impl", "generic_hook.hpp", 48, "!hook.is_linked()");
  }
  unint64_t v4 = (unint64_t *)*a1;
  if (*a1 && (unint64_t)v4 <= a2)
  {
    do
    {
      a1 = v4;
      unint64_t v4 = (unint64_t *)*v4;
      if (v4) {
        BOOL v5 = (unint64_t)v4 > a2;
      }
      else {
        BOOL v5 = 1;
      }
    }

    while (!v5);
  }

  *(void *)a2 = v4;
  *a1 = a2;
}

void sub_100024EA4(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (uint64_t *)**a1;
  unint64_t v4 = operator new(0x80uLL);
  v4[1] = 0LL;
  void v4[2] = 0LL;
  void *v4 = off_1001262A8;
  v4[3] = off_1001262F8;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  *((_OWORD *)v4 + 4) = 0u;
  *((_OWORD *)v4 + 5) = 0u;
  *((_OWORD *)v4 + 6) = 0u;
  *((_OWORD *)v4 + 7) = 0u;
  BOOL v5 = v3 + 9;
  *(void *)&__int128 v22 = v4 + 3;
  *((void *)&v22 + 1) = v4;
  sub_100005894((uint64_t)(v3 + 9), &v22);
  uint64_t v6 = (std::__shared_weak_count *)*((void *)&v22 + 1);
  if (*((void *)&v22 + 1))
  {
    uint64_t v7 = (unint64_t *)(*((void *)&v22 + 1) + 8LL);
    do
      unint64_t v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

  sub_100025178((void *)(v3[9] + 8), v2 + 1);
  sub_100025178((void *)(v3[9] + 24), v3 + 21);
  sub_10000CF18(&v22, v3 + 1);
  sub_1000251F0((uint64_t *)(*v5 + 40LL), &v22);
  uint64_t v9 = (std::__shared_weak_count *)*((void *)&v22 + 1);
  if (*((void *)&v22 + 1))
  {
    uint64_t v10 = (unint64_t *)(*((void *)&v22 + 1) + 8LL);
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  sub_10000CF18(&v22, v3 + 1);
  sub_100025260((uint64_t *)(*v5 + 56LL), &v22);
  int v12 = (std::__shared_weak_count *)*((void *)&v22 + 1);
  if (*((void *)&v22 + 1))
  {
    __int16 v13 = (unint64_t *)(*((void *)&v22 + 1) + 8LL);
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

  sub_100025178((void *)(v3[9] + 72), v3 + 13);
  sub_100025178((void *)(v3[9] + 88), v3 + 19);
  uint64_t v15 = v3[7];
  uint64_t v16 = v3[10];
  *(void *)&__int128 v22 = v3[9];
  *((void *)&v22 + 1) = v16;
  if (v16)
  {
    __int16 v17 = (unint64_t *)(v16 + 8);
    do
      unint64_t v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }

  sub_100005944(v15, &v22);
  __int16 v19 = (std::__shared_weak_count *)*((void *)&v22 + 1);
  if (*((void *)&v22 + 1))
  {
    uint64_t v20 = (unint64_t *)(*((void *)&v22 + 1) + 8LL);
    do
      unint64_t v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }

  sub_100007004((uint64_t)(v2 + 1));
  operator delete(v2);
  sub_100007004((uint64_t)(a1 + 1));
  operator delete(a1);
}

void sub_10002510C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      unint64_t v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }

  sub_100007004((uint64_t)v12 + 8);
  operator delete(v12);
  sub_100007004((uint64_t)v11 + 8);
  operator delete(v11);
  _Unwind_Resume(a1);
}

void *sub_100025178(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3)
  {
    BOOL v5 = (unint64_t *)(v3 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  uint64_t v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

  return a1;
}

uint64_t *sub_1000251F0(uint64_t *a1, void *a2)
{
  uint64_t v3 = a2[1];
  if (*a2) {
    uint64_t v4 = *a2 + 32LL;
  }
  else {
    uint64_t v4 = 0LL;
  }
  *a2 = 0LL;
  a2[1] = 0LL;
  BOOL v5 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      unint64_t v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  return a1;
}

uint64_t *sub_100025260(uint64_t *a1, void *a2)
{
  uint64_t v3 = a2[1];
  if (*a2) {
    uint64_t v4 = *a2 + 40LL;
  }
  else {
    uint64_t v4 = 0LL;
  }
  *a2 = 0LL;
  a2[1] = 0LL;
  BOOL v5 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      unint64_t v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  return a1;
}

void sub_1000252D0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001262A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000252E0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001262A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_100025300(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_100025314(void *a1)
{
  uint64_t v1 = sub_100025328(a1);
  operator delete(v1);
}

void *sub_100025328(void *a1)
{
  *a1 = off_1001262F8;
  uint64_t v2 = (uint64_t)(a1 + 1);
  sub_100007004((uint64_t)(a1 + 11));
  sub_100007004((uint64_t)(a1 + 9));
  sub_100007004((uint64_t)(a1 + 7));
  sub_100007004((uint64_t)(a1 + 5));
  sub_100007004((uint64_t)(a1 + 3));
  sub_100007004(v2);
  return a1;
}

void sub_100025388(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  uint64_t v4 = (os_log_s *)qword_100131928;
  if (os_log_type_enabled((os_log_t)qword_100131928, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unint64_t v7 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[Transform Manager] Pre-configuration activation: inserting new aggregation sessions",  v7,  2u);
  }

  (*(void (**)(void))(**(void **)(v3 + 120) + 72LL))(*(void *)(v3 + 120));
  BOOL v5 = (dispatch_group_s *)v2[1];
  if (v5)
  {
    dispatch_group_leave(v5);
    unint64_t v6 = (dispatch_object_s *)v2[1];
    if (v6) {
      dispatch_release(v6);
    }
  }

  operator delete(v2);
  sub_100007004((uint64_t)(a1 + 1));
  operator delete(a1);
}

void sub_100025470(void **a1)
{
  uint64_t v4 = *a1;
  uint64_t v2 = *v4;
  uint64_t v3 = (os_log_s *)qword_100131928;
  if (*(void *)(*v4 + 88LL))
  {
    if (os_log_type_enabled((os_log_t)qword_100131928, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "[Transform Manager] Pre-reconfiguration: Clearing transform cache before configuration conditions change",  buf,  2u);
    }

    sub_100022DB0((void *)(v2 + 184));
  }

  else if (os_log_type_enabled((os_log_t)qword_100131928, OS_LOG_TYPE_ERROR))
  {
    sub_1000D77E4(v3);
  }

  sub_100025588(&v4);
  sub_100007004((uint64_t)(a1 + 1));
  operator delete(a1);
}

void sub_10002555C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void **sub_100025588(void **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0LL;
  if (v2)
  {
    uint64_t v3 = (dispatch_group_s *)v2[1];
    if (v3)
    {
      dispatch_group_leave(v3);
      uint64_t v4 = (dispatch_object_s *)v2[1];
      if (v4) {
        dispatch_release(v4);
      }
    }

    operator delete(v2);
  }

  return a1;
}

void sub_1000255D4(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t v2 = *v1;
  uint64_t v3 = (void *)v1[1];
  uint64_t v20 = 0LL;
  uint64_t v21 = 0LL;
  uint64_t v4 = (const void **)(*v3 + 16LL);
  BOOL v5 = (uint8_t *)operator new(0x20uLL);
  *(void *)BOOL v5 = &off_100126458;
  *((void *)v5 + 1) = v3;
  *((void *)v5 + 2) = &v21;
  *((void *)v5 + 3) = &v20;
  uint64_t v27 = v5;
  sub_100025848(v2 + 184, v4, (uint64_t)buf);
  unint64_t v6 = v27;
  if (v27 == buf)
  {
    uint64_t v7 = 4LL;
    unint64_t v6 = buf;
  }

  else
  {
    if (!v27) {
      goto LABEL_6;
    }
    uint64_t v7 = 5LL;
  }

  (*(void (**)(void))(*(void *)v6 + 8 * v7))();
LABEL_6:
  uint64_t v18 = 0LL;
  uint64_t v19 = 0LL;
  char v17 = 0;
  if (v20) {
    goto LABEL_14;
  }
  uint64_t v8 = *(void *)(v2 + 88);
  unint64_t v9 = (uint64_t *)v1[1];
  uint64_t v10 = *v9;
  unint64_t v11 = (uint8_t *)operator new(0x38uLL);
  *(void *)unint64_t v11 = &off_1001264E8;
  *((void *)v11 + 1) = v2;
  *((void *)v11 + 2) = v9;
  *((void *)v11 + 3) = &v21;
  *((void *)v11 + 4) = &v18;
  *((void *)v11 + 5) = &v19;
  *((void *)v11 + 6) = &v17;
  uint64_t v27 = v11;
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)v8 + 112LL))(v8, v10 + 16, buf);
  int v12 = v27;
  if (v27 == buf)
  {
    uint64_t v13 = 4LL;
    int v12 = buf;
  }

  else
  {
    if (!v27) {
      goto LABEL_12;
    }
    uint64_t v13 = 5LL;
  }

  (*(void (**)(void))(*(void *)v12 + 8 * v13))();
LABEL_12:
  if (v17)
  {
    sub_100022DB0((void *)(v2 + 184));
    uint64_t v18 = 0LL;
  }

void sub_100025808( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  uint64_t v20 = a18;
  if (a18 == v18)
  {
    uint64_t v21 = 4LL;
    uint64_t v20 = &a15;
  }

  else
  {
    if (!a18) {
      goto LABEL_6;
    }
    uint64_t v21 = 5LL;
  }

  (*(void (**)(void))(*(void *)v20 + 8 * v21))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t *sub_100025848(uint64_t a1, const void **a2, uint64_t a3)
{
  unint64_t v9 = (uint64_t *)(a1 + 184);
  v10[0] = a1 + 184;
  dispatch_group_t result = sub_100025A4C(&v9, a2, a2, (uint64_t)v10, 1, 1);
  if (result == v7)
  {
    ++*(_DWORD *)(a1 + 16);
  }

  else
  {
    ++*(_DWORD *)(a1 + 20);
    v10[0] = &off_1001263D8;
    v10[1] = a3;
    unint64_t v11 = v10;
    sub_10002597C(a1, a2, (uint64_t)v10);
    dispatch_group_t result = v11;
    if (v11 == v10)
    {
      uint64_t v8 = 4LL;
      dispatch_group_t result = v10;
    }

    else
    {
      if (!v11) {
        return result;
      }
      uint64_t v8 = 5LL;
    }

    return (uint64_t *)(*(uint64_t (**)(void))(*result + 8 * v8))();
  }

  return result;
}

void sub_10002593C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v15 = a13;
  if (a13 == v13)
  {
    uint64_t v16 = 4LL;
    uint64_t v15 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v16 = 5LL;
  }

  (*(void (**)(void))(*(void *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void *sub_10002597C(uint64_t a1, void *a2, uint64_t a3)
{
  v5[0] = &off_100126348;
  v5[1] = a1;
  void v5[2] = a3;
  unint64_t v6 = v5;
  sub_100025C68(a1, a2, (uint64_t)v5);
  dispatch_group_t result = v6;
  if (v6 == v5)
  {
    uint64_t v4 = 4LL;
    dispatch_group_t result = v5;
  }

  else
  {
    if (!v6) {
      return result;
    }
    uint64_t v4 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_100025A10( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  unint64_t v14 = a13;
  if (a13 == &a10)
  {
    uint64_t v15 = 4LL;
    unint64_t v14 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v15 = 5LL;
  }

  (*(void (**)(void))(*(void *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t *sub_100025A4C(uint64_t **a1, const void **a2, const void **a3, uint64_t a4, char a5, char a6)
{
  unint64_t v6 = *a1;
  uint64_t v7 = **a1;
  if (!v7) {
    return *a1;
  }
  while (1)
  {
    if (sub_100005524((uint64_t)&v26, (const void **)(v7 + 32), a2))
    {
      int v12 = (uint64_t *)(v7 + 16);
      goto LABEL_7;
    }

    int v12 = (uint64_t *)(v7 + 8);
    unint64_t v6 = (uint64_t *)v7;
LABEL_7:
    uint64_t v7 = *v12;
    uint64_t v13 = v6;
    if (!*v12) {
      return v13;
    }
  }

  if ((a5 & 1) == 0
    && (a6 & 1) == 0
    && !sub_100005524((uint64_t)&v26, a2, (const void **)(v7 + 32))
    && !sub_100005524((uint64_t)&v26, (const void **)(v7 + 32), a3))
  {
    sub_1000D7878();
  }

  if ((a5 & 1) != 0)
  {
    uint64_t v14 = *(void *)(v7 + 8);
    uint64_t v13 = (uint64_t *)v7;
    if (v14)
    {
      uint64_t v13 = (uint64_t *)v7;
      do
      {
        BOOL v15 = sub_100005524((uint64_t)&v26, (const void **)(v14 + 32), a2);
        if (v15) {
          uint64_t v16 = 16LL;
        }
        else {
          uint64_t v16 = 8LL;
        }
        if (!v15) {
          uint64_t v13 = (uint64_t *)v14;
        }
        uint64_t v14 = *(void *)(v14 + v16);
      }

      while (v14);
    }
  }

  else
  {
    uint64_t v13 = v6;
    uint64_t v17 = v7;
    do
    {
      BOOL v18 = sub_100005524((uint64_t)&v26, a2, (const void **)(v17 + 32));
      if (v18) {
        uint64_t v19 = 8LL;
      }
      else {
        uint64_t v19 = 16LL;
      }
      if (v18) {
        uint64_t v13 = (uint64_t *)v17;
      }
      uint64_t v17 = *(void *)(v17 + v19);
    }

    while (v17);
  }

  if ((a6 & 1) != 0)
  {
    for (uint64_t i = *(void *)(v7 + 16); i; uint64_t i = *(void *)(i + v22))
    {
      else {
        uint64_t v22 = 16LL;
      }
    }
  }

  else
  {
    do
    {
      else {
        uint64_t v24 = 8LL;
      }
      uint64_t v7 = *(void *)(v7 + v24);
    }

    while (v7);
  }

  return v13;
}

void sub_100025C68(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = sub_100025E60(a1, a2);
  int v23 = 0LL;
  uint64_t v24 = 0LL;
  uint64_t v25 = 0LL;
  if ((void *)v5 != v6)
  {
    uint64_t v7 = (void *)v5;
    uint64_t v8 = v6;
    do
    {
      unint64_t v9 = (void **)v7;
      unint64_t v11 = v7 + 1;
      uint64_t v7 = (void *)v7[1];
      uint64_t v10 = v11[1];
      int v12 = *v9;
      v12[1] = v7;
      *v9[1] = v12;
      --*(void *)(a1 + 168);
      operator delete(v9);
      if (v24 >= v25)
      {
        uint64_t v14 = (v24 - v23) >> 3;
        unint64_t v15 = (v25 - v23) >> 2;
        if (v15 <= v14 + 1) {
          unint64_t v15 = v14 + 1;
        }
        else {
          unint64_t v16 = v15;
        }
        if (v16) {
          uint64_t v17 = (char *)sub_10001C3B0((uint64_t)&v25, v16);
        }
        else {
          uint64_t v17 = 0LL;
        }
        BOOL v18 = &v17[8 * v14];
        *(void *)BOOL v18 = v10;
        uint64_t v13 = v18 + 8;
        uint64_t v19 = v24;
        if (v24 != v23)
        {
          do
          {
            uint64_t v20 = *((void *)v19 - 1);
            v19 -= 8;
            *((void *)v18 - 1) = v20;
            v18 -= 8;
          }

          while (v19 != v23);
          uint64_t v19 = v23;
        }

        int v23 = v18;
        uint64_t v25 = &v17[8 * v16];
        if (v19) {
          operator delete(v19);
        }
      }

      else
      {
        *(void *)uint64_t v24 = v10;
        uint64_t v13 = v24 + 8;
      }

      uint64_t v24 = v13;
    }

    while (v7 != v8);
    uint64_t v21 = v23;
    if (v23 == v13) {
      goto LABEL_24;
    }
    do
    {
      uint64_t v26 = *(void *)v21;
      uint64_t v22 = *(void *)(a3 + 24);
      if (!v22) {
        sub_1000129CC();
      }
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v22 + 48LL))(v22, &v26);
      v21 += 8;
    }

    while (v21 != v13);
    uint64_t v13 = v23;
    if (v23) {
LABEL_24:
    }
      operator delete(v13);
  }

void sub_100025E38( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100025E60(uint64_t a1, void *a2)
{
  uint64_t v2 = a1 + 152;
  uint64_t v3 = *(void *)(a1 + 160);
  if (v3 == a1 + 152) {
    return v2;
  }
  uint64_t v4 = a2;
  char v5 = *((_BYTE *)a2 + 23);
  uint64_t v6 = v5 >= 0 ? *((unsigned __int8 *)a2 + 23) : a2[1];
  uint64_t v7 = v5 >= 0 ? (unsigned __int8 *)a2 : (unsigned __int8 *)*a2;
  while (1)
  {
    uint64_t v8 = *(void *)(v3 + 16);
    uint64_t v9 = *(unsigned __int8 *)(v8 + 55);
    size_t v10 = *(void *)(v8 + 40);
    if ((v9 & 0x80u) == 0LL) {
      uint64_t v11 = *(unsigned __int8 *)(v8 + 55);
    }
    else {
      uint64_t v11 = *(void *)(v8 + 40);
    }
    if (v11 != v6) {
      goto LABEL_19;
    }
    int v12 = (const void **)(v8 + 32);
    if ((v9 & 0x80) != 0) {
      break;
    }
    if (!(_DWORD)v9) {
      goto LABEL_21;
    }
    uint64_t v13 = v7;
    while (*(unsigned __int8 *)v12 == *v13)
    {
      int v12 = (const void **)((char *)v12 + 1);
      ++v13;
      if (!--v9) {
        goto LABEL_21;
      }
    }

LABEL_39:
    uint64_t v16 = *(void *)(v16 + 8);
  }

  while (v16 != v2);
  return v3;
}

  ++*v7;
  return i;
}

      sub_1000AD5CC(a1, (uint64_t)v10, a2);
      sub_1000AD784(a1, v16, a2);
      uint64_t v17 = sub_1000D19A4(*(void *)(a1 + 64), v7);
      uint64_t v18 = (os_log_s *)qword_100131928;
      if (v17)
      {
        if (os_log_type_enabled((os_log_t)qword_100131928, OS_LOG_TYPE_DEFAULT))
        {
          (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(void *)v7 + 16LL))(buf, v7);
          sub_100006200((uint64_t)buf, -1, 0x20u, 0LL, 1, &__p);
          if (SHIBYTE(v46) >= 0) {
            uint64_t v20 = &__p;
          }
          else {
            uint64_t v20 = (__int128 *)__p;
          }
          *(_DWORD *)unint64_t v55 = 136446210;
          uint64_t v56 = v20;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "[Configurer] Successfully activated next config %{public}s",  v55,  0xCu);
          if (SHIBYTE(v46) < 0) {
            operator delete((void *)__p);
          }
          sub_1000041AC((uint64_t)buf);
          sub_10000425C((uint64_t **)&v52[4], buf[0]);
        }

        sub_1000AD900(a1, v19, a2);
        sub_1000ADA7C(a1, v21, a2);
        uint64_t v22 = 1LL;
        goto LABEL_53;
      }

      if (os_log_type_enabled((os_log_t)qword_100131928, OS_LOG_TYPE_ERROR))
      {
        (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v7 + 16LL))(v39, v7);
        sub_100006200((uint64_t)v39, -1, 0x20u, 0LL, 1, v55);
        sub_1000AF534();
      }

__n128 sub_100025FDC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &off_100126348;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + sub_100007004((uint64_t)v5 + 8) = result;
  return result;
}

__n128 sub_100026014(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_100126348;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + sub_100007004((uint64_t)v5 + 8) = result;
  return result;
}

uint64_t sub_100026034(uint64_t a1, uint64_t *a2)
{
  return sub_100026084((void *)(a1 + 8), a2);
}

uint64_t sub_10002603C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void (**sub_100026078())(std::__shared_weak_count *__hidden this, const std::type_info *)
{
}

uint64_t sub_100026084(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 88LL);
  if (!v4) {
    goto LABEL_4;
  }
  uint64_t v5 = *a2;
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 48LL))(v4, *a2 + 32, *a2 + 56);
  *(void *)(v3 + 8) += v6 - *(void *)(v5 + 72);
  *(void *)(v5 + 72) = v6;
  uint64_t v7 = operator new(0x18uLL);
  v7[2] = v5;
  uint64_t v9 = *(void *)(v3 + 152);
  uint64_t v8 = (void *)(v3 + 152);
  *uint64_t v7 = v9;
  v7[1] = v8;
  *(void *)(v9 + sub_100007004((uint64_t)v5 + 8) = v7;
  *uint64_t v8 = v7;
  ++v8[2];
  uint64_t v10 = a1[1];
  uint64_t v13 = v5;
  uint64_t v11 = *(void *)(v10 + 24);
  if (!v11) {
LABEL_4:
  }
    sub_1000129CC();
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v11 + 48LL))(v11, &v13);
}

void *sub_100026170(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &off_1001263D8;
  result[1] = v3;
  return result;
}

uint64_t sub_1000261A4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1001263D8;
  a2[1] = v2;
  return result;
}

uint64_t sub_1000261C0(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 24LL);
  if (!v2) {
    sub_1000129CC();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 48LL))(v2, *a2 + 56LL);
}

uint64_t sub_1000261F0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void (**sub_10002622C())(std::__shared_weak_count *__hidden this, const std::type_info *)
{
}

__n128 sub_100026240(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &off_100126458;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + sub_100007004((uint64_t)v5 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_100026280(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_100126458;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + sub_100007004((uint64_t)v5 + 8) = result;
  return result;
}

void sub_1000262A8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }

  uint64_t v7 = *(void *)(a1 + 8);
  ++**(void **)(a1 + 16);
  ++**(void **)(a1 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 16LL))(v3, v7);
  if (v4)
  {
    uint64_t v8 = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

void sub_100026348(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000D78A0();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100026360(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void (**sub_10002639C())(std::__shared_weak_count *__hidden this, const std::type_info *)
{
}

__n128 sub_1000263B0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v2 = &off_1001264E8;
  *(_OWORD *)(v2 + sub_100007004((uint64_t)v5 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 sub_1000263F8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_1001264E8;
  __n128 result = *(__n128 *)(a1 + 8);
  __int128 v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + sub_100007004((uint64_t)v5 + 8) = result;
  return result;
}

void sub_100026428(uint64_t a1, char **a2, const char **a3, double *a4, void *a5)
{
  double v9 = *a4;
  uint64_t v29 = *a3;
  uint64_t v10 = *(void *)(a1 + 8);
  ++**(void **)(a1 + 24);
  ++**(void **)(a1 + 40);
  *(void *)&__int128 v28 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v28 + 1) = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v11 = *(unsigned __int8 ***)(v10 + 56);
  unint64_t v35 = 0LL;
  sub_100026984(&v29, (uint64_t)buf, 1, &v26);
  int v12 = v35;
  if (v35 == buf)
  {
    uint64_t v13 = 4LL;
    int v12 = buf;
  }

  else
  {
    if (!v35) {
      goto LABEL_6;
    }
    uint64_t v13 = 5LL;
  }

  (*(void (**)(void))(*(void *)v12 + 8 * v13))();
LABEL_6:
  sub_100005948(v11, (uint64_t)&v26, a5, &v28, v9);
  sub_1000041AC((uint64_t)&v26);
  sub_10000425C(&v27, v26);
  uint64_t v14 = v28;
  if ((void)v28)
  {
    uint64_t v15 = (os_log_s *)qword_100131920;
    if (os_log_type_enabled((os_log_t)qword_100131920, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v19 = sub_10008D2D4(v14);
      else {
        uint64_t v20 = *(void *)v19;
      }
      uint64_t v21 = __p;
      if (v25 < 0) {
        uint64_t v21 = (void **)__p[0];
      }
      uint64_t v22 = **(void **)(a1 + 16);
      int v23 = (uint8_t *)(v22 + 16);
      *(_DWORD *)buf = 136315650;
      uint64_t v31 = v20;
      __int16 v32 = 2080;
      uint64_t v33 = v21;
      __int16 v34 = 2080;
      unint64_t v35 = v23;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "[Transform Cache] Cache miss. Loading %s - %s for input event %s",  buf,  0x20u);
      uint64_t v14 = v28;
    }

    (*(void (**)(uint64_t, void))(*(void *)v14 + 16LL))(v14, *(void *)(a1 + 16));
    ++**(void **)(a1 + 32);
    **(_BYTE **)(a1 + 4sub_100007004((uint64_t)v5 + 8) = sub_1000267DC(v10 + 184, (unsigned __int8 *)(**(void **)(a1 + 16) + 16LL), &v28) ^ 1;
  }

  uint64_t v16 = (std::__shared_weak_count *)*((void *)&v28 + 1);
  if (*((void *)&v28 + 1))
  {
    uint64_t v17 = (unint64_t *)(*((void *)&v28 + 1) + 8LL);
    do
      unint64_t v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }

  if (v25 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1000266AC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, unsigned __int8 a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100026794(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void (**sub_1000267D0())(std::__shared_weak_count *__hidden this, const std::type_info *)
{
}

uint64_t sub_1000267DC(uint64_t a1, unsigned __int8 *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 88);
  if (!v4) {
    sub_1000129CC();
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 48LL))(v4);
  v16[0] = (uint64_t *)&off_100126568;
  uint64_t v17 = v16;
  sub_10002597C(a1, a2, (uint64_t)v16);
  uint64_t v8 = v17;
  if (v17 == v16)
  {
    uint64_t v9 = 4LL;
    uint64_t v8 = v16;
  }

  else
  {
    if (!v17) {
      goto LABEL_7;
    }
    uint64_t v9 = 5LL;
  }

  ((void (*)(void))(*v8)[v9])();
LABEL_7:
  int v10 = sub_100029788((unint64_t *)a1, a2, v7);
  uint64_t v11 = (uint64_t *)(a1 + 96);
  int v12 = *(uint64_t **)(a1 + 96);
  if (v12) {
    *uint64_t v11 = *v12;
  }
  else {
    int v12 = sub_10002A2DC((void **)v11);
  }
  sub_10002A504(v12, (__int128 *)a2, a3, v7);
  uint64_t v13 = operator new(0x18uLL);
  v13[1] = a1 + 152;
  v13[2] = v12;
  uint64_t v14 = *(void *)(a1 + 152);
  void *v13 = v14;
  *(void *)(v14 + sub_100007004((uint64_t)v5 + 8) = v13;
  *(void *)(a1 + 152) = v13;
  ++*(void *)(a1 + 168);
  sub_10002A5A0((void *)(a1 + 176), v12, v16);
  ++*(_DWORD *)(a1 + 24);
  return v10 ^ 1u;
}

void sub_100026944( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v15 = a13;
  if (a13 == v13)
  {
    uint64_t v16 = 4LL;
    uint64_t v15 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v16 = 5LL;
  }

  (*(void (**)(void))(*(void *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void *sub_100026984@<X0>(const char **a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, void *a4@<X8>)
{
  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0LL;
  *(_BYTE *)a4 = 0;
  sub_1000041AC((uint64_t)a4);
  sub_1000041AC((uint64_t)a4);
  uint64_t v8 = *a1;
  size_t v9 = strlen(v8);
  sub_1000123E4((uint64_t)v14, a2);
  sub_100026B14((uint64_t)v8, (uint64_t)&v8[v9], (uint64_t)v14, a3, (uint64_t)v16);
  sub_100026BFC((uint64_t)v16, 1, (uint64_t)a4);
  sub_10001A17C((uint64_t)&v18);
  int v10 = v17;
  if (v17 == v16)
  {
    uint64_t v11 = 4LL;
    int v10 = v16;
  }

  else
  {
    if (!v17) {
      goto LABEL_6;
    }
    uint64_t v11 = 5LL;
  }

  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_6:
  __n128 result = v15;
  if (v15 == v14)
  {
    uint64_t v13 = 4LL;
    __n128 result = v14;
  }

  else
  {
    if (!v15) {
      return result;
    }
    uint64_t v13 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v13))();
}

void sub_100026AB8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13)
{
  uint64_t v15 = a12;
  if (a12 == &a9)
  {
    uint64_t v16 = 4LL;
    uint64_t v15 = &a9;
  }

  else
  {
    if (!a12) {
      goto LABEL_6;
    }
    uint64_t v16 = 5LL;
  }

  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_6:
  sub_10000417C(v13);
  _Unwind_Resume(a1);
}

void *sub_100026B14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  *(void *)&__int128 v9 = a1;
  *((void *)&v9 + 1) = a2;
  sub_100018FE8((uint64_t)v10, a3);
  sub_100027184(a5, &v9, (uint64_t)v10, a4);
  __n128 result = v11;
  if (v11 == v10)
  {
    uint64_t v8 = 4LL;
    __n128 result = v10;
  }

  else
  {
    if (!v11) {
      return result;
    }
    uint64_t v8 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void sub_100026BC4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  uint64_t v17 = a15;
  if (a15 == v15)
  {
    uint64_t v18 = 4LL;
    uint64_t v17 = &a12;
  }

  else
  {
    if (!a15) {
      goto LABEL_6;
    }
    uint64_t v18 = 5LL;
  }

  (*(void (**)(void))(*(void *)v17 + 8 * v18))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_100026BFC(uint64_t a1, int a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    unint64_t v45 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v6 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
    __int128 v43 = v6;
    __int128 v44 = v6;
    __int128 v41 = v6;
    __int128 v42 = v6;
    __int128 v39 = v6;
    __int128 v40 = v6;
    *(_OWORD *)&v38[16] = v6;
    *(_OWORD *)&v38[32] = v6;
    *(_OWORD *)unint64_t v38 = v6;
    sub_1000123E4((uint64_t)v36, a1);
    sub_10001BFCC((uint64_t)v38, a3, (uint64_t)v36, *(_BYTE *)(a1 + 176));
    uint64_t v7 = v37;
    if (v37 == v36)
    {
      uint64_t v8 = 4LL;
      uint64_t v7 = v36;
    }

    else
    {
      if (!v37)
      {
LABEL_19:
        sub_100027E64(a1, (uint64_t *)v38);
        sub_1000041AC(a3);
        if (a2)
        {
          int v14 = sub_1000272AC(a1 + 40);
          *(_DWORD *)(a1 + 32) = v14;
          if (v14 != 15)
          {
            uint64_t v15 = *(void *)(a1 + 64);
            sub_100028810(a1 + 40, &v35);
            __int128 v31 = *(_OWORD *)(a1 + 64);
            uint64_t v32 = *(void *)(a1 + 80);
            sub_100005064(v28, "value");
            sub_1000288F0(a1, 0xFu, (uint64_t)v28, &__p);
            sub_10001AD8C(101, (uint64_t *)&v31, (uint64_t)&__p, &v33);
            sub_10001AB68((uint64_t)v38, v15, (uint64_t)&v35, (uint64_t)&v33);
            v33.__vftable = (std::exception_vtbl *)off_100125390;
            std::runtime_error::~runtime_error(&v34);
            std::exception::~exception(&v33);
            if (v29 < 0) {
              operator delete(v28[0]);
            }
          }
        }

        if (BYTE8(v41))
        {
          v26[0] = 9;
          uint64_t v16 = (uint64_t **)&v27;
          uint64_t v27 = 0LL;
          sub_1000041AC((uint64_t)v26);
          sub_1000041AC((uint64_t)v26);
          unsigned __int8 v17 = *(_BYTE *)a3;
          *(_BYTE *)a3 = v26[0];
          v26[0] = v17;
          uint64_t v18 = *(void *)(a3 + 8);
          *(void *)(a3 + sub_100007004((uint64_t)v5 + 8) = v27;
          uint64_t v27 = v18;
          sub_1000041AC(a3);
          sub_1000041AC((uint64_t)v26);
          int v19 = v26[0];
        }

        else
        {
          if (*(_BYTE *)a3 != 9)
          {
LABEL_32:
            sub_10001F75C((uint64_t)v38);
            return;
          }

          v24[0] = 0;
          uint64_t v16 = (uint64_t **)&v25;
          uint64_t v25 = 0LL;
          sub_1000041AC((uint64_t)v24);
          sub_1000041AC((uint64_t)v24);
          sub_1000041AC((uint64_t)v24);
          unsigned __int8 v20 = *(_BYTE *)a3;
          *(_BYTE *)a3 = v24[0];
          v24[0] = v20;
          uint64_t v21 = *(void *)(a3 + 8);
          *(void *)(a3 + sub_100007004((uint64_t)v5 + 8) = v25;
          uint64_t v25 = v21;
          sub_1000041AC(a3);
          sub_1000041AC((uint64_t)v24);
          int v19 = v24[0];
        }

        sub_10000425C(v16, v19);
        goto LABEL_32;
      }

      uint64_t v8 = 5LL;
    }

    (*(void (**)(void))(*v7 + 8 * v8))();
    goto LABEL_19;
  }

  char v9 = *(_BYTE *)(a1 + 176);
  *(void *)&v38[40] = 0xAAAAAAAAAAAAAA00LL;
  *(void *)unint64_t v38 = a3;
  memset(&v38[8], 0, 32);
  v38[41] = v9;
  sub_100028D30(a1, (uint64_t *)v38, a3);
  sub_1000041AC(a3);
  if (a2)
  {
    int v10 = sub_1000272AC(a1 + 40);
    *(_DWORD *)(a1 + 32) = v10;
    if (v10 != 15)
    {
      uint64_t v11 = *(void *)(a1 + 64);
      sub_100028810(a1 + 40, &v35);
      __int128 v31 = *(_OWORD *)(a1 + 64);
      uint64_t v32 = *(void *)(a1 + 80);
      sub_100005064(v28, "value");
      sub_1000288F0(a1, 0xFu, (uint64_t)v28, &__p);
      sub_10001AD8C(101, (uint64_t *)&v31, (uint64_t)&__p, &v33);
      sub_10001BE88((uint64_t)v38, v11, (uint64_t)&v35, (uint64_t)&v33);
      v33.__vftable = (std::exception_vtbl *)off_100125390;
      std::runtime_error::~runtime_error(&v34);
      std::exception::~exception(&v33);
      if (v29 < 0) {
        operator delete(v28[0]);
      }
    }
  }

  if (v38[40])
  {
    v22[0] = 9;
    uint64_t v23 = 0LL;
    sub_1000041AC((uint64_t)v22);
    sub_1000041AC((uint64_t)v22);
    unsigned __int8 v12 = *(_BYTE *)a3;
    *(_BYTE *)a3 = v22[0];
    v22[0] = v12;
    uint64_t v13 = *(uint64_t **)(a3 + 8);
    *(void *)(a3 + sub_100007004((uint64_t)v5 + 8) = v23;
    uint64_t v23 = v13;
    sub_1000041AC(a3);
    sub_1000041AC((uint64_t)v22);
    sub_10000425C(&v23, v22[0]);
  }

  if (*(void *)&v38[8])
  {
    *(void *)&v38[16] = *(void *)&v38[8];
    operator delete(*(void **)&v38[8]);
  }

void sub_10002703C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *__p, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, std::exception a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, void *a36, uint64_t a37, int a38, __int16 a39, char a40, char a41, char a42, uint64_t a43, uint64_t a44, uint64_t a45)
{
  a31.__vftable = (std::exception_vtbl *)off_100125390;
  std::runtime_error::~runtime_error(v45 + 1);
  std::exception::~exception(&a31);
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  time_t v48 = *(void **)(v46 - 200);
  if (v48)
  {
    *(void *)(v46 - 192) = v48;
    operator delete(v48);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_100027184(uint64_t a1, _OWORD *a2, uint64_t a3, char a4)
{
  uint64_t v7 = sub_1000123E4(a1, a3);
  *(_DWORD *)(v7 + 32) = 0;
  uint64_t v8 = v7 + 40;
  *(_OWORD *)(v7 + 40) = *a2;
  *(_DWORD *)(v7 + 56) = -1;
  *(_BYTE *)(v7 + 60) = 0;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_OWORD *)(v7 + 96) = 0u;
  *(_OWORD *)(v7 + 112) = 0u;
  *(void *)(v7 + 12sub_100007004((uint64_t)v5 + 8) = 0LL;
  *(void *)(v7 + 136) = "";
  *(void *)(v7 + 152) = 0LL;
  *(void *)(v7 + 160) = 0LL;
  *(void *)(v7 + 144) = 0LL;
  *(_DWORD *)(a1 + 16sub_100007004((uint64_t)v5 + 8) = sub_100027254();
  *(_BYTE *)(a1 + 176) = a4;
  *(_DWORD *)(a1 + 32) = sub_1000272AC(v8);
  return a1;
}

void sub_100027210(_Unwind_Exception *a1)
{
  uint64_t v4 = (void *)v1[3];
  if (v4 == v1)
  {
    uint64_t v5 = 4LL;
  }

  else
  {
    if (!v4) {
      goto LABEL_6;
    }
    uint64_t v5 = 5LL;
    uint64_t v1 = (void *)v1[3];
  }

  (*(void (**)(void *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(a1);
}

uint64_t sub_100027254()
{
  v0 = localeconv();
  if (!v0) {
    __assert_rtn("get_decimal_point", "lexer.hpp", 136, "loc != nullptr");
  }
  else {
    return 46;
  }
}

uint64_t sub_1000272AC(uint64_t a1)
{
  if (!*(void *)(a1 + 24) && !sub_100019394((unsigned __int8 **)a1))
  {
    uint64_t v8 = "invalid BOM; must be 0xEF 0xBB 0xBF if given";
    goto LABEL_19;
  }

  while (2)
  {
    while (1)
    {
      sub_1000193F4((unsigned __int8 **)a1);
      int v2 = *(_DWORD *)(a1 + 16);
      if (v2 > 31) {
        break;
      }
      if ((v2 - 9) >= 2 && v2 != 13)
      {
        goto LABEL_36;
      }
    }

    if (v2 > 90)
    {
      if (v2 <= 109)
      {
        if (v2 == 91) {
          return 8LL;
        }
        if (v2 == 93) {
          return 10LL;
        }
        if (v2 != 102) {
          goto LABEL_36;
        }
        qmemcpy(v9, "false", 5);
        uint64_t v5 = a1;
        unint64_t v6 = 5LL;
        uint64_t v7 = 2LL;
        return sub_100019558(v5, (unsigned __int8 *)v9, v6, v7);
      }

      if (v2 <= 122)
      {
        if (v2 == 110)
        {
          v9[0] = 1819047278;
          uint64_t v5 = a1;
          unint64_t v6 = 4LL;
          uint64_t v7 = 3LL;
        }

        else
        {
          if (v2 != 116) {
            goto LABEL_36;
          }
          v9[0] = 1702195828;
          uint64_t v5 = a1;
          unint64_t v6 = 4LL;
          uint64_t v7 = 1LL;
        }

        return sub_100019558(v5, (unsigned __int8 *)v9, v6, v7);
      }

      if (v2 == 123) {
        return 9LL;
      }
      if (v2 == 125) {
        return 11LL;
      }
LABEL_36:
      uint64_t v8 = "invalid literal";
LABEL_19:
      *(void *)(a1 + 96) = v8;
      return 14LL;
    }

    switch(v2)
    {
      case ' ':
        continue;
      case '""':
        uint64_t result = sub_1000274CC(a1);
        break;
      case ',':
        uint64_t result = 13LL;
        break;
      case '-':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        uint64_t result = sub_1000279B4(a1);
        break;
      case ':':
        uint64_t result = 12LL;
        break;
      default:
        goto LABEL_36;
    }

    return result;
  }

uint64_t sub_1000274CC(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 16) != 34) {
    sub_1000D73AC();
  }
  while (2)
  {
    while (2)
    {
      int v2 = sub_1000193F4((unsigned __int8 **)a1) + 1;
      uint64_t result = 4LL;
      uint64_t v4 = "invalid string: missing closing quote";
      switch(v2)
      {
        case 0:
          goto LABEL_82;
        case 1:
          uint64_t v4 = "invalid string: control character U+0000 (NUL) must be escaped to \\u0000";
          goto LABEL_82;
        case 2:
          uint64_t v4 = "invalid string: control character U+0001 (SOH) must be escaped to \\u0001";
          goto LABEL_82;
        case 3:
          uint64_t v4 = "invalid string: control character U+0002 (STX) must be escaped to \\u0002";
          goto LABEL_82;
        case 4:
          uint64_t v4 = "invalid string: control character U+0003 (ETX) must be escaped to \\u0003";
          goto LABEL_82;
        case 5:
          uint64_t v4 = "invalid string: control character U+0004 (EOT) must be escaped to \\u0004";
          goto LABEL_82;
        case 6:
          uint64_t v4 = "invalid string: control character U+0005 (ENQ) must be escaped to \\u0005";
          goto LABEL_82;
        case 7:
          uint64_t v4 = "invalid string: control character U+0006 (ACK) must be escaped to \\u0006";
          goto LABEL_82;
        case 8:
          uint64_t v4 = "invalid string: control character U+0007 (BEL) must be escaped to \\u0007";
          goto LABEL_82;
        case 9:
          uint64_t v4 = "invalid string: control character U+0008 (BS) must be escaped to \\u0008 or \\b";
          goto LABEL_82;
        case 10:
          uint64_t v4 = "invalid string: control character U+0009 (HT) must be escaped to \\u0009 or \\t";
          goto LABEL_82;
        case 11:
          uint64_t v4 = "invalid string: control character U+000A (LF) must be escaped to \\u000A or \\n";
          goto LABEL_82;
        case 12:
          uint64_t v4 = "invalid string: control character U+000B (VT) must be escaped to \\u000B";
          goto LABEL_82;
        case 13:
          uint64_t v4 = "invalid string: control character U+000C (FF) must be escaped to \\u000C or \\f";
          goto LABEL_82;
        case 14:
          uint64_t v4 = "invalid string: control character U+000D (CR) must be escaped to \\u000D or \\r";
          goto LABEL_82;
        case 15:
          uint64_t v4 = "invalid string: control character U+000E (SO) must be escaped to \\u000E";
          goto LABEL_82;
        case 16:
          uint64_t v4 = "invalid string: control character U+000F (SI) must be escaped to \\u000F";
          goto LABEL_82;
        case 17:
          uint64_t v4 = "invalid string: control character U+0010 (DLE) must be escaped to \\u0010";
          goto LABEL_82;
        case 18:
          uint64_t v4 = "invalid string: control character U+0011 (DC1) must be escaped to \\u0011";
          goto LABEL_82;
        case 19:
          uint64_t v4 = "invalid string: control character U+0012 (DC2) must be escaped to \\u0012";
          goto LABEL_82;
        case 20:
          uint64_t v4 = "invalid string: control character U+0013 (DC3) must be escaped to \\u0013";
          goto LABEL_82;
        case 21:
          uint64_t v4 = "invalid string: control character U+0014 (DC4) must be escaped to \\u0014";
          goto LABEL_82;
        case 22:
          uint64_t v4 = "invalid string: control character U+0015 (NAK) must be escaped to \\u0015";
          goto LABEL_82;
        case 23:
          uint64_t v4 = "invalid string: control character U+0016 (SYN) must be escaped to \\u0016";
          goto LABEL_82;
        case 24:
          uint64_t v4 = "invalid string: control character U+0017 (ETB) must be escaped to \\u0017";
          goto LABEL_82;
        case 25:
          uint64_t v4 = "invalid string: control character U+0018 (CAN) must be escaped to \\u0018";
          goto LABEL_82;
        case 26:
          uint64_t v4 = "invalid string: control character U+0019 (EM) must be escaped to \\u0019";
          goto LABEL_82;
        case 27:
          uint64_t v4 = "invalid string: control character U+001A (SUB) must be escaped to \\u001A";
          goto LABEL_82;
        case 28:
          uint64_t v4 = "invalid string: control character U+001B (ESC) must be escaped to \\u001B";
          goto LABEL_82;
        case 29:
          uint64_t v4 = "invalid string: control character U+001C (FS) must be escaped to \\u001C";
          goto LABEL_82;
        case 30:
          uint64_t v4 = "invalid string: control character U+001D (GS) must be escaped to \\u001D";
          goto LABEL_82;
        case 31:
          uint64_t v4 = "invalid string: control character U+001E (RS) must be escaped to \\u001E";
          goto LABEL_82;
        case 32:
          uint64_t v4 = "invalid string: control character U+001F (US) must be escaped to \\u001F";
          goto LABEL_82;
        case 33:
        case 34:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
          int v5 = *(_DWORD *)(a1 + 16);
          goto LABEL_4;
        case 35:
          return result;
        case 93:
          int v10 = sub_1000193F4((unsigned __int8 **)a1);
          uint64_t v4 = "invalid string: forbidden character after backslash";
          if (v10 <= 97)
          {
            switch(v10)
            {
              case '""':
                LOBYTE(v5) = 34;
                break;
              case '/':
                LOBYTE(v5) = 47;
                break;
              case '\\':
                LOBYTE(v5) = 92;
                break;
              default:
                goto LABEL_82;
            }

            goto LABEL_4;
          }

          break;
        case 195:
        case 196:
        case 197:
        case 198:
        case 199:
        case 200:
        case 201:
        case 202:
        case 203:
        case 204:
        case 205:
        case 206:
        case 207:
        case 208:
        case 209:
        case 210:
        case 211:
        case 212:
        case 213:
        case 214:
        case 215:
        case 216:
        case 217:
        case 218:
        case 219:
        case 220:
        case 221:
        case 222:
        case 223:
        case 224:
          *(void *)&__int128 v14 = 0xBF00000080LL;
          unint64_t v6 = (std::string *)a1;
          unint64_t v7 = 2LL;
          goto LABEL_19;
        case 225:
          __int128 v8 = xmmword_1000F20E0;
          goto LABEL_7;
        case 226:
        case 227:
        case 228:
        case 229:
        case 230:
        case 231:
        case 232:
        case 233:
        case 234:
        case 235:
        case 236:
        case 237:
        case 239:
        case 240:
          __int128 v8 = xmmword_1000F20D0;
          goto LABEL_7;
        case 238:
          __int128 v8 = xmmword_1000F20C0;
LABEL_7:
          __int128 v14 = v8;
          unint64_t v6 = (std::string *)a1;
          unint64_t v7 = 4LL;
          goto LABEL_19;
        case 241:
          uint64_t v15 = 0xBF00000080LL;
          char v9 = &xmmword_1000F3030;
          goto LABEL_18;
        case 242:
        case 243:
        case 244:
          uint64_t v15 = 0xBF00000080LL;
          char v9 = &xmmword_1000F3048;
          goto LABEL_18;
        case 245:
          uint64_t v15 = 0xBF00000080LL;
          char v9 = &xmmword_1000F3060;
LABEL_18:
          __int128 v14 = *v9;
          unint64_t v6 = (std::string *)a1;
          unint64_t v7 = 6LL;
LABEL_19:
          if ((sub_10001A0C8(v6, &v14, v7) & 1) == 0) {
            return 14LL;
          }
          continue;
        default:
          uint64_t v4 = "invalid string: ill-formed UTF-8 byte";
          goto LABEL_82;
      }

      break;
    }

    switch(v10)
    {
      case 'n':
        LOBYTE(v5) = 10;
        goto LABEL_4;
      case 'o':
      case 'p':
      case 'q':
      case 's':
        goto LABEL_82;
      case 'r':
        LOBYTE(v5) = 13;
        goto LABEL_4;
      case 't':
        LOBYTE(v5) = 9;
        goto LABEL_4;
      case 'u':
        unsigned int v11 = sub_100019FD8(a1);
        if (v11 == -1) {
          goto LABEL_85;
        }
        unsigned int v12 = v11;
        if ((v11 & 0xFFFFFC00) != 0xD800)
        {
          if ((v11 & 0xFFFFFC00) == 0xDC00)
          {
            uint64_t v4 = "invalid string: surrogate U+DC00..U+DFFF must follow U+D800..U+DBFF";
            goto LABEL_82;
          }

          if (v11 >= 0x110000) {
            sub_1000D7384();
          }
          if (v11 > 0x7F)
          {
            if (v11 <= 0x7FF)
            {
              std::string::push_back((std::string *)(a1 + 72), (v11 >> 6) | 0xC0);
              goto LABEL_39;
            }

            if (!HIWORD(v11))
            {
              std::string::push_back((std::string *)(a1 + 72), (v11 >> 12) | 0xE0);
              goto LABEL_38;
            }

uint64_t sub_1000279B4(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if ((v2 - 49) >= 9)
  {
    if (v2 == 48)
    {
      std::string::push_back((std::string *)(a1 + 72), 48);
      int v4 = 5;
    }

    else
    {
      if (v2 != 45) {
        sub_1000D73D4();
      }
      __int128 v3 = (std::string *)(a1 + 72);
      std::string::push_back((std::string *)(a1 + 72), 45);
      int v13 = sub_1000193F4((unsigned __int8 **)a1);
      if ((v13 - 49) < 9)
      {
        int v2 = *(_DWORD *)(a1 + 16);
        int v4 = 6;
        goto LABEL_3;
      }

      if (v13 != 48)
      {
        __int128 v14 = "invalid number; expected digit after '-'";
        goto LABEL_52;
      }

      std::string::push_back((std::string *)(a1 + 72), *(_BYTE *)(a1 + 16));
      int v4 = 6;
    }

    int v15 = sub_1000193F4((unsigned __int8 **)a1);
    if (v15 == 101 || v15 == 69)
    {
      int v5 = (std::string *)(a1 + 72);
      goto LABEL_9;
    }

    if (v15 != 46) {
      goto LABEL_40;
    }
    int v5 = (std::string *)(a1 + 72);
LABEL_34:
    std::string::push_back(v5, *(_BYTE *)(a1 + 128));
    if (sub_1000193F4((unsigned __int8 **)a1) - 48 > 9)
    {
      __int128 v14 = "invalid number; expected digit after '.'";
      goto LABEL_52;
    }

    int v5 = (std::string *)(a1 + 72);
    do
    {
      std::string::push_back((std::string *)(a1 + 72), *(_BYTE *)(a1 + 16));
      int v16 = sub_1000193F4((unsigned __int8 **)a1);
    }

    while ((v16 - 48) < 0xA);
    if (v16 != 101 && v16 != 69)
    {
LABEL_13:
      sub_100019EB0(a1);
      uint64_t v25 = 0LL;
      *__error() = 0;
      goto LABEL_14;
    }

void sub_100027D98(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

void sub_100027DA4(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0)
  {
    **(_BYTE **)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0LL;
  }

  else
  {
    *(_BYTE *)(a1 + 72) = 0;
    *(_BYTE *)(a1 + 95) = 0;
  }

  int v2 = *(_BYTE **)(a1 + 48);
  *(void *)(a1 + 56) = v2;
  int v3 = *(_DWORD *)(a1 + 16);
  unint64_t v4 = *(void *)(a1 + 64);
  if ((unint64_t)v2 >= v4)
  {
    unint64_t v6 = v4 - (void)v2;
    uint64_t v7 = 2 * v6;
    if (2 * v6 <= 1) {
      uint64_t v7 = 1LL;
    }
    if (v6 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v8 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v8 = v7;
    }
    char v9 = operator new(v8);
    *char v9 = v3;
    int v5 = v9 + 1;
    *(void *)(a1 + 4sub_100007004((uint64_t)v5 + 8) = v9;
    *(void *)(a1 + 56) = v9 + 1;
    *(void *)(a1 + 64) = &v9[v8];
    if (v2) {
      operator delete(v2);
    }
  }

  else
  {
    _BYTE *v2 = v3;
    int v5 = v2 + 1;
  }

  *(void *)(a1 + 56) = v5;
}

uint64_t sub_100027E64(uint64_t a1, uint64_t *a2)
{
  __int128 v39 = 0LL;
  uint64_t v40 = 0LL;
  uint64_t v41 = 0LL;
  unint64_t v4 = (__int128 *)(a1 + 112);
  uint64_t v5 = a1 + 40;
  while (2)
  {
    switch(*(_DWORD *)(a1 + 32))
    {
      case 1:
        LOBYTE(v36.__vftable) = 1;
        sub_10001E39C(a2, (unsigned __int8 *)&v36, 0LL);
        goto LABEL_19;
      case 2:
        LOBYTE(v36.__vftable) = 0;
        sub_10001E39C(a2, (unsigned __int8 *)&v36, 0LL);
        goto LABEL_19;
      case 3:
        v36.__vftable = 0LL;
        sub_10001E6E0(a2, (uint64_t)&v36, 0LL);
        goto LABEL_19;
      case 4:
        sub_10001ED60(a2, (uint64_t)v4, 0LL);
        goto LABEL_19;
      case 5:
        v36.__vftable = *(std::exception_vtbl **)(a1 + 152);
        sub_10001F08C(a2, (uint64_t **)&v36, 0LL);
        goto LABEL_19;
      case 6:
        v36.__vftable = *(std::exception_vtbl **)(a1 + 144);
        sub_10001EA1C(a2, (uint64_t **)&v36, 0LL);
        goto LABEL_19;
      case 7:
        if ((*(void *)(a1 + 160) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000LL)
        {
          v36.__vftable = *(std::exception_vtbl **)(a1 + 160);
          sub_10001E054(a2, (uint64_t **)&v36, 0LL);
          goto LABEL_19;
        }

        uint64_t v27 = *(void *)(a1 + 64);
        sub_100028810(v5, &v38);
        sub_100028810(v5, &v32);
        __int128 v28 = std::string::insert(&v32, 0LL, "number overflow parsing '");
        __int128 v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__l.__cap_ = v28->__r_.__value_.__l.__cap_;
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v29;
        v28->__r_.__value_.__l.__size_ = 0LL;
        v28->__r_.__value_.__l.__cap_ = 0LL;
        v28->__r_.__value_.__r.__words[0] = 0LL;
        __int16 v30 = std::string::append(&__p, "'");
        __int128 v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        std::string::size_type cap = v30->__r_.__value_.__l.__cap_;
        *(_OWORD *)std::runtime_error v34 = v31;
        v30->__r_.__value_.__l.__size_ = 0LL;
        v30->__r_.__value_.__l.__cap_ = 0LL;
        v30->__r_.__value_.__r.__words[0] = 0LL;
        sub_10001CF7C(406, (uint64_t)v34, &v36);
        uint64_t v17 = sub_10001AB68((uint64_t)a2, v27, (uint64_t)&v38, (uint64_t)&v36);
        v36.__vftable = (std::exception_vtbl *)off_100125390;
        std::runtime_error::~runtime_error(&v37);
        std::exception::~exception(&v36);
        if (SHIBYTE(cap) < 0) {
          operator delete(v34[0]);
        }
        goto LABEL_50;
      case 8:
        int v6 = sub_1000272AC(v5);
        *(_DWORD *)(a1 + 32) = v6;
        if (v6 == 10)
        {
          char v7 = sub_10001CE24(a2);
          goto LABEL_13;
        }

        LOBYTE(v36.__vftable) = 1;
        sub_10001C114((uint64_t)&v39, &v36);
        continue;
      case 9:
        if ((sub_10001C588(a2, 0xFFFFFFFFFFFFFFFFLL) & 1) == 0) {
          goto LABEL_56;
        }
        int v8 = sub_1000272AC(v5);
        *(_DWORD *)(a1 + 32) = v8;
        if (v8 != 11)
        {
          if (v8 != 4) {
            goto LABEL_59;
          }
          int v16 = sub_1000272AC(v5);
          *(_DWORD *)(a1 + 32) = v16;
          if (v16 != 12) {
            goto LABEL_60;
          }
          LOBYTE(v36.__vftable) = 0;
          sub_10001C114((uint64_t)&v39, &v36);
          int v15 = sub_1000272AC(v5);
LABEL_37:
          *(_DWORD *)(a1 + 32) = v15;
          continue;
        }

        char v7 = sub_10001C810(a2);
LABEL_13:
        if ((v7 & 1) == 0)
        {
LABEL_56:
          uint64_t v17 = 0LL;
          goto LABEL_44;
        }

void sub_10002869C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, std::exception a30)
{
  a30.__vftable = (std::exception_vtbl *)off_100125390;
  std::runtime_error::~runtime_error(v30 + 1);
  std::exception::~exception(&a30);
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  std::exception v33 = *(void **)(v31 - 96);
  if (v33) {
    operator delete(v33);
  }
  _Unwind_Resume(a1);
}

void sub_100028810(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  int v3 = *(unsigned __int8 **)(a1 + 48);
  for (uint64_t i = *(unsigned __int8 **)(a1 + 56); v3 != i; ++v3)
  {
    unsigned int v5 = *v3;
    if (v5 > 0x1F)
    {
      std::string::push_back(a2, v5);
    }

    else
    {
      char v7 = 0;
      *(void *)std::string __str = 0LL;
      snprintf(__str, 9uLL, "<U+%.4X>", v5);
      std::string::append(a2, __str);
    }
  }

void sub_1000288D0(_Unwind_Exception *exception_object)
{
}

void sub_1000288F0(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  uint64_t v8 = *(unsigned __int8 *)(a3 + 23);
  if ((v8 & 0x80u) != 0LL) {
    uint64_t v8 = *(void *)(a3 + 8);
  }
  if (v8)
  {
    std::operator+<char>(&v38, "while parsing ", a3);
    uint64_t v9 = std::string::append(&v38, " ");
    __int128 v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    int64_t cap = v9->__r_.__value_.__l.__cap_;
    __int128 v39 = v10;
    v9->__r_.__value_.__l.__size_ = 0LL;
    v9->__r_.__value_.__l.__cap_ = 0LL;
    v9->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      uint64_t v11 = (const std::string::value_type *)&v39;
    }
    else {
      uint64_t v11 = (const std::string::value_type *)v39;
    }
    if (cap >= 0) {
      std::string::size_type v12 = HIBYTE(cap);
    }
    else {
      std::string::size_type v12 = *((void *)&v39 + 1);
    }
    std::string::append(a4, v11, v12);
    if (SHIBYTE(cap) < 0) {
      operator delete((void *)v39);
    }
  }

  std::string::append(a4, "- ");
  unsigned int v13 = *(_DWORD *)(a1 + 32);
  if (v13 == 14)
  {
    sub_100005064(&v36, *(char **)(a1 + 136));
    int v14 = std::string::append(&v36, "; last read: '");
    __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0LL;
    v14->__r_.__value_.__l.__cap_ = 0LL;
    v14->__r_.__value_.__r.__words[0] = 0LL;
    sub_100028810(a1 + 40, &__p);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type size = __p.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v18 = std::string::append(&v37, (const std::string::value_type *)p_p, size);
    __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__l.__cap_ = v18->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0LL;
    v18->__r_.__value_.__l.__cap_ = 0LL;
    v18->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v20 = std::string::append(&v38, "'");
    __int128 v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    int64_t cap = v20->__r_.__value_.__l.__cap_;
    __int128 v39 = v21;
    v20->__r_.__value_.__l.__size_ = 0LL;
    v20->__r_.__value_.__l.__cap_ = 0LL;
    v20->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      uint64_t v22 = (const std::string::value_type *)&v39;
    }
    else {
      uint64_t v22 = (const std::string::value_type *)v39;
    }
    if (cap >= 0) {
      std::string::size_type v23 = HIBYTE(cap);
    }
    else {
      std::string::size_type v23 = *((void *)&v39 + 1);
    }
    std::string::append(a4, v22, v23);
    if (SHIBYTE(cap) < 0) {
      operator delete((void *)v39);
    }
    if ((char)v36.__r_.__value_.__s.__size_ < 0)
    {
      uint64_t v24 = (void *)v36.__r_.__value_.__r.__words[0];
      goto LABEL_49;
    }

void sub_100028C50( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, void *__p, uint64_t a29, int a30, __int16 a31, char a32, char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100028D30(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v41 = 0LL;
  uint64_t v42 = 0LL;
  uint64_t v43 = 0LL;
  unsigned int v5 = (std::exception_vtbl *)(a1 + 112);
  uint64_t v6 = a1 + 40;
  while (2)
  {
    switch(*(_DWORD *)(a1 + 32))
    {
      case 1:
        LOBYTE(v38.__vftable) = 1;
        sub_100020290(a2, (unsigned __int8 *)&v38, a3);
        goto LABEL_17;
      case 2:
        LOBYTE(v38.__vftable) = 0;
        sub_100020290(a2, (unsigned __int8 *)&v38, a3);
        goto LABEL_17;
      case 3:
        v38.__vftable = 0LL;
        sub_100020594(a2, (uint64_t)&v38, a3);
        goto LABEL_17;
      case 4:
        sub_100020B68(a2, (uint64_t)v5, a3);
        goto LABEL_17;
      case 5:
        v38.__vftable = *(std::exception_vtbl **)(a1 + 152);
        sub_100020E24(a2, (uint64_t *)&v38, a3);
        goto LABEL_17;
      case 6:
        v38.__vftable = *(std::exception_vtbl **)(a1 + 144);
        sub_100020864(a2, (uint64_t *)&v38, a3);
        goto LABEL_17;
      case 7:
        if ((*(void *)(a1 + 160) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000LL)
        {
          v38.__vftable = *(std::exception_vtbl **)(a1 + 160);
          sub_10001FF8C(a2, (uint64_t *)&v38, a3);
          goto LABEL_17;
        }

        uint64_t v29 = *(void *)(a1 + 64);
        sub_100028810(v6, &v40);
        sub_100028810(v6, &v34);
        __int16 v30 = std::string::insert(&v34, 0LL, "number overflow parsing '");
        __int128 v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__l.__cap_ = v30->__r_.__value_.__l.__cap_;
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v31;
        v30->__r_.__value_.__l.__size_ = 0LL;
        v30->__r_.__value_.__l.__cap_ = 0LL;
        v30->__r_.__value_.__r.__words[0] = 0LL;
        __int128 v32 = std::string::append(&__p, "'");
        __int128 v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        std::string::size_type cap = v32->__r_.__value_.__l.__cap_;
        *(_OWORD *)std::string v36 = v33;
        v32->__r_.__value_.__l.__size_ = 0LL;
        v32->__r_.__value_.__l.__cap_ = 0LL;
        v32->__r_.__value_.__r.__words[0] = 0LL;
        sub_10001CF7C(406, (uint64_t)v36, &v38);
        uint64_t v19 = sub_10001BE88((uint64_t)a2, v29, (uint64_t)&v40, (uint64_t)&v38);
        v38.__vftable = (std::exception_vtbl *)off_100125390;
        std::runtime_error::~runtime_error(&v39);
        std::exception::~exception(&v38);
        if (SHIBYTE(cap) < 0) {
          operator delete(v36[0]);
        }
        goto LABEL_43;
      case 8:
        int v7 = sub_1000272AC(v6);
        *(_DWORD *)(a1 + 32) = v7;
        if (v7 == 10) {
          goto LABEL_12;
        }
        LOBYTE(v38.__vftable) = 1;
        sub_10001C114((uint64_t)&v41, &v38);
        continue;
      case 9:
        if ((sub_10001F7E8(a2, 0xFFFFFFFFFFFFFFFFLL, a3) & 1) == 0)
        {
LABEL_55:
          uint64_t v19 = 0LL;
          goto LABEL_37;
        }

        int v8 = sub_1000272AC(v6);
        *(_DWORD *)(a1 + 32) = v8;
        if (v8 != 11)
        {
          if (v8 != 4) {
            goto LABEL_51;
          }
          uint64_t v17 = *(uint64_t ***)(*(void *)(a2[2] - 8) + 8LL);
          v38.__vftable = v5;
          a2[4] = (uint64_t)(sub_10001DE5C( v17,  (const void **)&v5->~exception,  (uint64_t)&unk_1000F5000,  (__int128 **)&v38)
                          + 7);
          int v18 = sub_1000272AC(v6);
          *(_DWORD *)(a1 + 32) = v18;
          if (v18 != 12) {
            goto LABEL_54;
          }
          LOBYTE(v38.__vftable) = 0;
          sub_10001C114((uint64_t)&v41, &v38);
          int v16 = sub_1000272AC(v6);
LABEL_32:
          *(_DWORD *)(a1 + 32) = v16;
          continue;
        }

void sub_100029588( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, std::exception a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, void *a35, uint64_t a36, int a37, __int16 a38, char a39, char a40)
{
  a30.__vftable = (std::exception_vtbl *)off_100125390;
  std::runtime_error::~runtime_error(v40 + 1);
  std::exception::~exception(&a30);
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  uint64_t v43 = *(void **)(v41 - 112);
  if (v43) {
    operator delete(v43);
  }
  _Unwind_Resume(a1);
}

void sub_1000296FC(uint64_t a1, uint64_t a2)
{
  int v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_100029740((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }

void sub_100029740(uint64_t a1)
{
}

uint64_t sub_100029788(unint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3 = *a1;
  unint64_t v4 = a1[1] + a3;
  a1[1] = v4;
  if (v4 > v3)
  {
    char v7 = 0;
    while (1)
    {
      if (!a1[21]) {
        return v7 & 1;
      }
      int v8 = (uint64_t *)a1[20];
      unint64_t v9 = v8[2];
      uint64_t v10 = a2[23];
      if ((v10 & 0x80u) == 0LL) {
        uint64_t v11 = a2[23];
      }
      else {
        uint64_t v11 = *((void *)a2 + 1);
      }
      uint64_t v12 = *(unsigned __int8 *)(v9 + 55);
      int v13 = (char)v12;
      if ((v12 & 0x80u) != 0LL) {
        uint64_t v12 = *(void *)(v9 + 40);
      }
      if (v11 == v12)
      {
        if (v13 >= 0) {
          int v14 = (unsigned __int8 *)(v9 + 32);
        }
        else {
          int v14 = *(unsigned __int8 **)(v9 + 32);
        }
        if ((v10 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)a2, v14, *((void *)a2 + 1)))
          {
LABEL_21:
            sub_100029954((uint64_t)a1, v9);
            uint64_t v16 = *v8;
            *(void *)(v16 + sub_100007004((uint64_t)v5 + 8) = v8[1];
            *(void *)v8[1] = v16;
            --a1[21];
            operator delete(v8);
            sub_100024D64(a1, v9);
            char v7 = 1;
            goto LABEL_22;
          }
        }

        else
        {
          if (!a2[23]) {
            goto LABEL_21;
          }
          int v15 = a2;
          while (*v15 == *v14)
          {
            ++v15;
            ++v14;
            if (!--v10) {
              goto LABEL_21;
            }
          }
        }
      }

      sub_100029A5C((uint64_t)a1, (const void **)(v9 + 32));
LABEL_22:
      if (a1[1] <= *a1) {
        return v7 & 1;
      }
    }
  }

  char v7 = 0;
  return v7 & 1;
}

void *sub_1000298CC()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_100126568;
  return result;
}

void sub_1000298F0(uint64_t a1, void *a2)
{
  *a2 = &off_100126568;
}

uint64_t sub_10002990C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void (**sub_100029948())(std::__shared_weak_count *__hidden this, const std::type_info *)
{
}

uint64_t *sub_100029954(uint64_t a1, uint64_t a2)
{
  int v14 = (uint64_t *)(a1 + 184);
  uint64_t v15 = a1 + 184;
  uint64_t result = sub_100025A4C(&v14, (const void **)(a2 + 32), (const void **)(a2 + 32), (uint64_t)&v15, 1, 1);
  uint64_t v7 = v5;
  if (result != (uint64_t *)v5)
  {
    int v8 = (void *)(a1 + 176);
    do
    {
      uint64_t v9 = result[2];
      uint64_t v10 = result;
      if (v9)
      {
        do
        {
          uint64_t v11 = (uint64_t *)v9;
          uint64_t v9 = *(void *)(v9 + 8);
        }

        while (v9);
        if (!result) {
          goto LABEL_16;
        }
      }

      else
      {
        do
        {
          uint64_t v12 = v10;
          uint64_t v10 = (uint64_t *)*v10;
        }

        while (v12 == (uint64_t *)v10[2]);
        else {
          uint64_t v11 = v10;
        }
        if (!result) {
LABEL_16:
        }
          sub_1000D78D4((uint64_t)result, v5, v6);
      }

      if (result == (uint64_t *)a2)
      {
        uint64_t v13 = a2;
        sub_100029B44(v8, &v13, &v15);
      }

      uint64_t result = v11;
    }

    while (v11 != (uint64_t *)v7);
  }

  return result;
}

void *sub_100029A5C(uint64_t a1, const void **a2)
{
  v6[0] = &off_1001265E8;
  v6[1] = a1;
  uint64_t v7 = v6;
  sub_100025C68(a1, a2, (uint64_t)v6);
  uint64_t result = v7;
  if (v7 == v6)
  {
    uint64_t v5 = 4LL;
    uint64_t result = v6;
  }

  else
  {
    if (!v7) {
      return result;
    }
    uint64_t v5 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_100029B0C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v15 = a13;
  if (a13 == v13)
  {
    uint64_t v16 = 4LL;
    uint64_t v15 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v16 = 5LL;
  }

  (*(void (**)(void))(*(void *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_100029B44@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = (void *)*a2;
  uint64_t v6 = *(void **)(*a2 + 16);
  if (v6)
  {
    do
    {
      uint64_t v7 = v6;
      uint64_t v6 = (void *)v6[1];
    }

    while (v6);
  }

  else
  {
    int v8 = (void *)*a2;
    do
    {
      uint64_t v9 = v8;
      int v8 = (void *)*v8;
    }

    while (v9 == (void *)v8[2]);
    if ((void *)v9[2] == v8) {
      uint64_t v7 = v9;
    }
    else {
      uint64_t v7 = v8;
    }
  }

  if (!*v5) {
    __assert_rtn("erase", "bstree.hpp", 1418, "!safemode_or_autounlink || !node_algorithms::unique(to_erase)");
  }
  uint64_t result = sub_100029C00(a1 + 1, *a2);
  --*a1;
  void *v5 = 0LL;
  v5[1] = 0LL;
  void v5[2] = 0LL;
  *a3 = v7;
  return result;
}

uint64_t sub_100029C00(uint64_t *a1, uint64_t a2)
{
  if (v6[2] == (uint64_t *)a2)
  {
    if (!*(_DWORD *)(a2 + 24)) {
      return a2;
    }
    goto LABEL_3;
  }

  int v4 = *((_DWORD *)v6[2] + 6);
  *((_DWORD *)v6[2] + 6) = *(_DWORD *)(a2 + 24);
  if (v4) {
LABEL_3:
  }
    sub_100029E14(a1, v6[0], v6[1]);
  return a2;
}

void sub_100029CA0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

void *sub_100029CAC(void *result, void *a2, void *a3)
{
  int v4 = (void *)a2[1];
  unint64_t v3 = (void *)a2[2];
  uint64_t v5 = v3;
  if (v4 && (uint64_t v5 = (void *)a2[1], v3))
  {
    uint64_t v6 = (void *)a2[2];
    do
    {
      uint64_t v7 = v6;
      uint64_t v6 = (void *)v6[1];
    }

    while (v6);
    uint64_t v5 = (void *)v7[2];
    int v8 = (void *)*a2;
    uint64_t v9 = (void *)(*a2 + 8LL);
    uint64_t v10 = (void *)*v9;
    BOOL v11 = *v9 == (void)a2;
    if (v7 != a2)
    {
      void *v4 = v7;
      v7[1] = v4;
      if (v7 != v3)
      {
        v7[2] = v3;
        *unint64_t v3 = v7;
        unint64_t v3 = (void *)*v7;
        if (*(void **)(*v7 + 8LL) != v7) {
          sub_1000D7970();
        }
        if (v5) {
          void *v5 = v3;
        }
        v3[1] = v5;
      }

      *uint64_t v7 = v8;
      uint64_t v12 = 2LL;
      if (v10 == a2) {
        uint64_t v12 = 1LL;
      }
      if (v8 == result) {
        uint64_t v12 = 0LL;
      }
      v8[v12] = v7;
      int v8 = v3;
      goto LABEL_35;
    }
  }

  else
  {
    int v8 = (void *)*a2;
    uint64_t v9 = (void *)(*a2 + 8LL);
    BOOL v11 = *v9 == (void)a2;
  }

  if (v5) {
    void *v5 = v8;
  }
  uint64_t v13 = v8 + 2;
  if (v11) {
    uint64_t v13 = v9;
  }
  if (v8 == result) {
    uint64_t v13 = v8;
  }
  void *v13 = v5;
  if ((void *)result[1] == a2)
  {
    if (v4) {
      sub_1000D7948();
    }
    int v14 = v8;
    if (v3)
    {
      uint64_t v15 = v3;
      do
      {
        int v14 = v15;
        uint64_t v15 = (void *)v15[1];
      }

      while (v15);
    }

    result[1] = v14;
  }

  if ((void *)result[2] == a2)
  {
    if (v3) {
      sub_1000D7920();
    }
    for (i = v8; v4; int v4 = (void *)v4[2])
      uint64_t i = v4;
    result[2] = i;
  }

  uint64_t v7 = a2;
LABEL_35:
  *a3 = v5;
  a3[2] = v7;
  if (v5 && (void *)*v5 != v8) {
    sub_1000D78F8();
  }
  a3[1] = v8;
  return result;
}

uint64_t *sub_100029E14(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  if (a3 == result) {
    goto LABEL_73;
  }
  while (1)
  {
    unint64_t v3 = a3;
    if (a2 && *((_DWORD *)a2 + 6) != 1)
    {
      unint64_t v3 = a2;
      goto LABEL_74;
    }

    int v4 = (uint64_t **)a3[1];
    if (!*((_DWORD *)v4 + 6))
    {
      *((_DWORD *)v4 + 6) = 1;
      *((_DWORD *)a3 + 6) = 0;
      uint64_t v5 = (uint64_t *)*a3;
      uint64_t v6 = *(uint64_t **)(*a3 + 8);
      uint64_t v7 = (uint64_t **)v4[2];
      a3[1] = (uint64_t)v7;
      if (v7) {
        *uint64_t v7 = a3;
      }
      void v4[2] = a3;
      *a3 = (uint64_t)v4;
      void *v4 = v5;
      if (v6 == a3) {
        uint64_t v8 = 1LL;
      }
      else {
        uint64_t v8 = 2LL;
      }
      if (v5 == result) {
        uint64_t v8 = 0LL;
      }
      v5[v8] = (uint64_t)v4;
      int v4 = (uint64_t **)a3[1];
      if (!v4)
      {
        int v31 = 516;
        goto LABEL_79;
      }
    }

    uint64_t v9 = v4[1];
    uint64_t v10 = v4[2];
    if (v10 && *((_DWORD *)v10 + 6) != 1)
    {
      if (v9 && *((_DWORD *)v9 + 6) != 1)
      {
LABEL_47:
        *((_DWORD *)v4 + 6) = *((_DWORD *)a3 + 6);
        *((_DWORD *)a3 + 6) = 1;
        goto LABEL_48;
      }

      *((_DWORD *)v10 + 6) = 1;
      *((_DWORD *)v4 + 6) = 0;
      uint64_t v17 = *v4;
      int v18 = (uint64_t **)(*v4)[1];
      uint64_t v19 = (uint64_t *)v10[1];
      void v4[2] = v19;
      if (v19) {
        uint64_t *v19 = (uint64_t)v4;
      }
      void *v4 = v10;
      *uint64_t v10 = (uint64_t)v17;
      v10[1] = (uint64_t)v4;
      BOOL v20 = v18 == v4;
      uint64_t v21 = 2LL;
      if (v20) {
        uint64_t v21 = 1LL;
      }
      if (v17 == result) {
        uint64_t v21 = 0LL;
      }
      v17[v21] = (uint64_t)v10;
      int v4 = (uint64_t **)a3[1];
      if (v4)
      {
        uint64_t v9 = v4[1];
        *((_DWORD *)v4 + 6) = *((_DWORD *)a3 + 6);
        *((_DWORD *)a3 + 6) = 1;
        if (!v9)
        {
LABEL_49:
          uint64_t v22 = (uint64_t *)*a3;
          uint64_t v23 = *(uint64_t **)(*a3 + 8);
          uint64_t v24 = (uint64_t **)v4[2];
          a3[1] = (uint64_t)v24;
          if (v24) {
            *uint64_t v24 = a3;
          }
          void v4[2] = a3;
          *a3 = (uint64_t)v4;
          goto LABEL_68;
        }

LABEL_48:
        *((_DWORD *)v9 + 6) = 1;
        goto LABEL_49;
      }

      int v31 = 532;
      goto LABEL_79;
    }

    if (v9 && *((_DWORD *)v9 + 6) != 1) {
      goto LABEL_47;
    }
LABEL_33:
    *((_DWORD *)v4 + 6) = 0;
    a3 = (uint64_t *)*a3;
    a2 = v3;
  }

  int v4 = (uint64_t **)a3[2];
  if (!v4)
  {
    int v31 = 475;
    goto LABEL_79;
  }

  if (!*((_DWORD *)v4 + 6))
  {
    *((_DWORD *)v4 + 6) = 1;
    *((_DWORD *)a3 + 6) = 0;
    BOOL v11 = (uint64_t *)*a3;
    uint64_t v12 = *(uint64_t **)(*a3 + 8);
    uint64_t v13 = (uint64_t **)v4[1];
    a3[2] = (uint64_t)v13;
    if (v13) {
      void *v13 = a3;
    }
    *a3 = (uint64_t)v4;
    void *v4 = v11;
    v4[1] = a3;
    if (v12 == a3) {
      uint64_t v14 = 1LL;
    }
    else {
      uint64_t v14 = 2LL;
    }
    if (v11 == result) {
      uint64_t v14 = 0LL;
    }
    v11[v14] = (uint64_t)v4;
    int v4 = (uint64_t **)a3[2];
    if (!v4)
    {
      int v31 = 481;
      goto LABEL_79;
    }
  }

  uint64_t v15 = v4[1];
  uint64_t v16 = v4[2];
  if (!v15 || *((_DWORD *)v15 + 6) == 1)
  {
    if (v16 && *((_DWORD *)v16 + 6) != 1) {
      goto LABEL_63;
    }
    goto LABEL_33;
  }

  if (!v16 || *((_DWORD *)v16 + 6) == 1)
  {
    *((_DWORD *)v15 + 6) = 1;
    *((_DWORD *)v4 + 6) = 0;
    int v25 = *v4;
    uint64_t v26 = (uint64_t **)(*v4)[1];
    uint64_t v27 = (uint64_t *)v15[2];
    v4[1] = v27;
    if (v27) {
      uint64_t *v27 = (uint64_t)v4;
    }
    void v15[2] = (uint64_t)v4;
    void *v4 = v15;
    *uint64_t v15 = (uint64_t)v25;
    BOOL v20 = v26 == v4;
    uint64_t v28 = 2LL;
    if (v20) {
      uint64_t v28 = 1LL;
    }
    if (v25 == result) {
      uint64_t v28 = 0LL;
    }
    v25[v28] = (uint64_t)v15;
    int v4 = (uint64_t **)a3[2];
    if (v4)
    {
      uint64_t v16 = v4[2];
      *((_DWORD *)v4 + 6) = *((_DWORD *)a3 + 6);
      *((_DWORD *)a3 + 6) = 1;
      if (!v16) {
        goto LABEL_65;
      }
      goto LABEL_64;
    }

    int v31 = 497;
LABEL_79:
    __assert_rtn("rebalance_after_erasure_restore_invariants", "rbtree_algorithms.hpp", v31, "w");
  }

  uint64_t v21 = 0LL;
LABEL_49:
  unsigned __int8 v70 = "lastOSProductNameWithVersion";
  __int128 v73 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&uint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v22 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)buf = v22;
  __int128 v72 = v22;
  sub_100008780((uint64_t)&v63, &v70, (uint64_t)buf);
  v65 = (unsigned __int8 *)&v63;
  unsigned __int8 v66 = 0LL;
  v67 = 0LL;
  unint64_t v68 = 0LL;
  uint64_t v69 = 0x8000000000000000LL;
  sub_100008AC8(&v65);
  if (sub_1000087E8((unsigned __int8 **)buf, &v65))
  {
    uint64_t v23 = sub_10009AE9C();
    if (!v23) {
      goto LABEL_55;
    }
  }

  else
  {
    uint64_t v23 = (uint64_t)sub_100008924((unsigned __int8 **)buf);
  }

  if (*(_BYTE *)v23 == 3)
  {
    char v59 = *(__int128 **)(v23 + 8);
    goto LABEL_56;
  }

    *a3 = v21;
    return v5;
  }

  if (v11)
  {
    *a3 = a4;
  }

  else
  {
    *a3 = a2;
    return a2 + 1;
  }

  return a4;
}

  if ((v7 & 0x80) != 0) {
    int v2 = *(_BYTE **)v2;
  }
  return (char *)sub_100036DD4((void *)a2, &result[(void)v2], &result[(void)v2 + v4], v4);
}

LABEL_63:
  *((_DWORD *)v4 + 6) = *((_DWORD *)a3 + 6);
  *((_DWORD *)a3 + 6) = 1;
LABEL_64:
  *((_DWORD *)v16 + 6) = 1;
LABEL_65:
  uint64_t v22 = (uint64_t *)*a3;
  uint64_t v23 = *(uint64_t **)(*a3 + 8);
  uint64_t v29 = (uint64_t **)v4[1];
  a3[2] = (uint64_t)v29;
  if (v29) {
    const char *v29 = a3;
  }
  *a3 = (uint64_t)v4;
  v4[1] = a3;
LABEL_68:
  void *v4 = v22;
  uint64_t v30 = 2LL;
  if (v23 == a3) {
    uint64_t v30 = 1LL;
  }
  if (v22 == result) {
    uint64_t v30 = 0LL;
  }
  v22[v30] = (uint64_t)v4;
LABEL_73:
  unint64_t v3 = a2;
  if (a2) {
LABEL_74:
  }
    *((_DWORD *)v3 + 6) = 1;
  return result;
}

uint64_t *sub_10002A148(uint64_t a1, const void **a2)
{
  uint64_t v12 = (uint64_t *)(a1 + 184);
  uint64_t v13 = a1 + 184;
  uint64_t result = sub_100025A4C(&v12, a2, a2, (uint64_t)&v13, 1, 1);
  uint64_t v5 = v4;
  if (result != v4)
  {
    uint64_t v6 = (void *)(a1 + 176);
    do
    {
      uint64_t v7 = result[2];
      uint64_t v8 = result;
      if (v7)
      {
        do
        {
          uint64_t v9 = (uint64_t *)v7;
          uint64_t v7 = *(void *)(v7 + 8);
        }

        while (v7);
      }

      else
      {
        do
        {
          uint64_t v10 = v8;
          uint64_t v8 = (uint64_t *)*v8;
        }

        while (v10 == (uint64_t *)v8[2]);
        else {
          uint64_t v9 = v8;
        }
      }

      BOOL v11 = result;
      sub_100029B44(v6, (uint64_t *)&v11, &v13);
      uint64_t result = v9;
    }

    while (v9 != v5);
  }

  return result;
}

void *sub_10002A238(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1001265E8;
  result[1] = v3;
  return result;
}

uint64_t sub_10002A26C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1001265E8;
  a2[1] = v2;
  return result;
}

void sub_10002A288(uint64_t a1, unint64_t *a2)
{
}

uint64_t sub_10002A294(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void (**sub_10002A2D0())(std::__shared_weak_count *__hidden this, const std::type_info *)
{
}

void *sub_10002A2DC(void **a1)
{
  unint64_t v1 = (unint64_t)a1[3];
  uint64_t v2 = 8LL;
  if (v1 > 8) {
    uint64_t v2 = (uint64_t)a1[3];
  }
  unint64_t v3 = (v2 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  if (!v3) {
    sub_1000D7998();
  }
  unint64_t v5 = (unint64_t)a1[4];
  size_t v6 = v5 * v3 + 16;
  uint64_t result = operator new[](v6, &std::nothrow);
  if (result) {
    goto LABEL_5;
  }
  if (v5 < 5) {
    return 0LL;
  }
  v5 >>= 1;
  a1[4] = (void *)v5;
  size_t v6 = v5 * v3 + 16;
  uint64_t result = operator new[](v6, &std::nothrow);
  if (result)
  {
LABEL_5:
    uint64_t v8 = result;
    unint64_t v9 = (unint64_t)a1[6];
    if (v9)
    {
      if (v5 * v3 / v1 >= v9) {
        goto LABEL_15;
      }
      unint64_t v10 = v9 * v1 / v3;
      if (v10 >= 2 * v5) {
        unint64_t v10 = 2 * v5;
      }
    }

    else
    {
      unint64_t v10 = 2 * v5;
    }

    a1[4] = (void *)v10;
LABEL_15:
    sub_10002A448(a1, result, v6 - 16, v3);
    uint64_t v12 = (char *)(a1 + 1);
    BOOL v11 = a1[1];
    if (v11 && v11 <= v8)
    {
      uint64_t v13 = (size_t *)(a1 + 2);
      do
      {
        uint64_t v14 = (char *)v11 + *v13;
        BOOL v11 = (void *)*((void *)v14 - 2);
        uint64_t v13 = (size_t *)(v14 - 8);
        if (v11) {
          BOOL v15 = v11 > v8;
        }
        else {
          BOOL v15 = 1;
        }
      }

      while (!v15);
      uint64_t v12 = v14 - 16;
      uint64_t v16 = (void *)*((void *)v14 - 1);
      *(void *)((char *)v8 + v6 - 16) = v11;
    }

    else
    {
      *(void *)((char *)v8 + v6 - 16) = v11;
      uint64_t v13 = (size_t *)(a1 + 2);
      uint64_t v16 = a1[2];
    }

    *(void *)((char *)v8 + v6 - sub_100007004((uint64_t)v5 + 8) = v16;
    *(void *)uint64_t v12 = v8;
    size_t *v13 = v6;
    uint64_t result = *a1;
    *a1 = (void *)**a1;
  }

  return result;
}

void **sub_10002A448(void **result, void *a2, uint64_t a3, unint64_t a4)
{
  int v4 = *result;
  if (*result) {
    BOOL v5 = v4 > a2;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    size_t v6 = (void *)((char *)a2 + (a3 - a4) / a4 * a4);
    *size_t v6 = v4;
    if (a3 - a4 != (a3 - a4) % a4)
    {
      for (uint64_t i = (void *)((char *)v6 - a4); i != a2; uint64_t i = (void *)((char *)i - a4))
      {
        *(void *)((char *)v6 - a4) = v6;
        size_t v6 = i;
      }

      goto LABEL_18;
    }
  }

  else
  {
    do
    {
      uint64_t result = (void **)v4;
      int v4 = (void *)*v4;
      if (v4) {
        BOOL v8 = v4 > a2;
      }
      else {
        BOOL v8 = 1;
      }
    }

    while (!v8);
    size_t v6 = (void *)((char *)a2 + (a3 - a4) / a4 * a4);
    *size_t v6 = v4;
    if (a3 - a4 != (a3 - a4) % a4)
    {
      for (j = (void *)((char *)v6 - a4); j != a2; j = (void *)((char *)j - a4))
      {
        *(void *)((char *)v6 - a4) = v6;
        size_t v6 = j;
      }

LABEL_18:
      *a2 = v6;
    }
  }

  *uint64_t result = a2;
  return result;
}

    unint64_t v9 = 0LL;
LABEL_19:
    uint64_t v56 = "uuid";
    unint64_t v55 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&unint64_t v10 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
    __int128 __dst = v10;
    unsigned __int8 v54 = v10;
    sub_100008780((uint64_t)&v41, &v56, (uint64_t)&__dst);
    time_t v48 = (unsigned __int8 *)&v41;
    v49 = 0LL;
    unsigned __int8 v50 = 0LL;
    uint64_t v51 = 0LL;
    __darwin_time_t v52 = 0x8000000000000000LL;
    sub_100008AC8(&v48);
    if (sub_1000087E8((unsigned __int8 **)&__dst, &v48))
    {
      BOOL v11 = sub_10009AE9C();
      if (!v11) {
        goto LABEL_26;
      }
    }

    else
    {
      BOOL v11 = (uint64_t)sub_100008924((unsigned __int8 **)&__dst);
    }

    if (*(_BYTE *)v11 == 3)
    {
      uint64_t v12 = *(unsigned __int8 **)(v11 + 8);
      if (v9) {
        goto LABEL_27;
      }
      goto LABEL_25;
    }

  uint64_t v12 = a1[11] + a1[12];
  uint64_t v13 = a1[8];
  uint64_t v14 = (char *)(v13 + 8 * (v12 >> 8));
  if (a1[9] == v13) {
    BOOL v15 = 0LL;
  }
  else {
    BOOL v15 = *(void *)v14 + 16LL * v12;
  }
  return sub_10008AD20(a1 + 7, (char *)v4, v6, v14, v15);
}

  uint64_t v14 = a2[4];
  if (v14 >= a2[5])
  {
    BOOL v15 = sub_100004B7C(a2 + 3, (uint64_t)&v36);
  }

  else
  {
    *(_BYTE *)uint64_t v14 = v36;
    *(void *)(v14 + sub_100007004((uint64_t)v5 + 8) = v37;
    sub_1000041AC((uint64_t)&v36);
    LOBYTE(v36) = 0;
    std::string v37 = 0LL;
    sub_1000041AC(v14);
    BOOL v15 = v14 + 16;
  }

  a2[4] = v15;
  sub_1000041AC((uint64_t)&v36);
  sub_10000425C(&v37, v36);
  sub_1000041AC((uint64_t)&v38);
  sub_10000425C(&v39, v38);
}

    sub_10004C248(a1, &v26, 2, &v25);
    uint64_t v12 = 0LL;
    uint64_t v13 = 1;
LABEL_19:
    memset(__p, 170, 24);
    sub_100006200(a2, -1, 0x20u, 0LL, 0, __p);
    sub_10004C11C(a1, &v26, 3, (uint64_t)__p, &v25);
    uint64_t v14 = sub_10004C0B4(a1, &v26, &v25);
    BOOL v15 = *(sqlite3 **)(a1 + 32);
    if (v14 == 101)
    {
      insert_rowid = sqlite3_last_insert_rowid(*(sqlite3 **)(a1 + 32));
      if (insert_rowid)
      {
        if ((v13 & 1) != 0 || (sub_1000BA4D4(a1, insert_rowid, v12) & 1) != 0)
        {
          uint64_t v16 = (os_log_s *)qword_100131930;
          if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v17 = &v27;
            if ((v27.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              uint64_t v17 = (std::string *)v27.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = v17;
            _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "[Config Store] Config header with uuid '%{public}s' inserted successfully",  buf,  0xCu);
          }

          goto LABEL_42;
        }

        if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR)) {
          sub_1000C59AC();
        }
      }

      else if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR))
      {
        sub_1000C5948();
      }
    }

    else
    {
      int v18 = (os_log_s *)qword_100131930;
      uint64_t v19 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (v15)
      {
        if (v19)
        {
          BOOL v20 = (char)v27.__r_.__value_.__s.__size_;
          uint64_t v21 = v27.__r_.__value_.__r.__words[0];
          uint64_t v22 = sqlite3_errmsg(v15);
          uint64_t v23 = &v27;
          if (v20 < 0) {
            uint64_t v23 = (std::string *)v21;
          }
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = v23;
          *(_WORD *)&_BYTE buf[12] = 2080;
          *(void *)&buf[14] = v22;
          _os_log_error_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "[Config Store] ERROR: Config header with uuid '%{public}s' failed to insert new row; %s",
            buf,
            0x16u);
        }
      }

      else if (v19)
      {
        sub_1000C5A10();
      }
    }

    insert_rowid = 0LL;
LABEL_42:
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
LABEL_44:
    sub_10004C6D4(&v26, 0LL);
    goto LABEL_45;
  }

  if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR)) {
    sub_1000C5864();
  }
  insert_rowid = 0LL;
LABEL_45:
  return insert_rowid;
}

void *sub_10002A504(void *a1, __int128 *a2, void *a3, uint64_t a4)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  uint64_t v7 = a1 + 4;
  if (*((char *)a2 + 23) < 0)
  {
    sub_10000B8BC(v7, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v8 = *a2;
    v7[2] = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v7 = v8;
  }

  uint64_t v9 = a3[1];
  a1[7] = *a3;
  a1[8] = v9;
  if (v9)
  {
    unint64_t v10 = (unint64_t *)(v9 + 8);
    do
      unint64_t v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }

  a1[9] = a4;
  return a1;
}

void sub_10002A58C(_Unwind_Exception *a1)
{
}

uint64_t *sub_10002A5A0@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t **a3@<X8>)
{
  if (*a2) {
    sub_1000D79C0();
  }
  size_t v6 = a1 + 1;
  *a3 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  __int128 v8 = a1 + 1;
  sub_10002A650(a1 + 1, a2, (uint64_t *)&v8, 0LL);
  uint64_t result = sub_10002A6DC(v6, a2);
  *a3 = a2;
  ++*a1;
  return result;
}

void *sub_10002A650(void *a1, void *a2, uint64_t *a3, void *a4)
{
  v8[0] = 0xAAAAAAAAAAAAAA00LL;
  v8[1] = 0LL;
  uint64_t v7 = *a3;
  sub_10002A820((uint64_t)a1, (uint64_t)a2, (uint64_t)&v7, (uint64_t)v8, a4);
  sub_10002A938(a1, a2, (uint64_t)v8);
  return a2;
}

uint64_t *sub_10002A6DC(uint64_t *result, uint64_t *a2)
{
  *((_DWORD *)a2 + 6) = 0;
  uint64_t v2 = (uint64_t **)*a2;
  if ((uint64_t *)*a2 != result)
  {
    do
    {
      unint64_t v3 = *v2;
      if (*((_DWORD *)v2 + 6) == 1 || v3 == result) {
        break;
      }
      *((_DWORD *)v3 + 6) = 0;
      BOOL v5 = (uint64_t **)v3[1];
      size_t v6 = v5;
      if (v2 == v5) {
        size_t v6 = (uint64_t **)v3[2];
      }
      if (!v6 || *((_DWORD *)v6 + 6))
      {
        uint64_t v7 = v2[1];
        if (v2 == v5)
        {
          if (v7 == a2)
          {
            a2 = (uint64_t *)v2;
          }

          else
          {
            __int128 v8 = (uint64_t *)a2[1];
            v2[2] = v8;
            if (v8) {
              *__int128 v8 = (uint64_t)v2;
            }
            a2[1] = (uint64_t)v2;
            void *v2 = a2;
          }

          unint64_t v10 = (uint64_t **)*v3;
          uint64_t v13 = *(uint64_t **)(*v3 + 8);
          uint64_t v14 = (uint64_t **)a2[2];
          v3[1] = (uint64_t)v14;
          if (v14) {
            *uint64_t v14 = v3;
          }
          a2[2] = (uint64_t)v3;
          *unint64_t v3 = (uint64_t)a2;
          *a2 = (uint64_t)v10;
          BOOL v12 = v13 == v3;
        }

        else
        {
          if (v7 == a2)
          {
            uint64_t v9 = (uint64_t *)a2[2];
            v2[1] = v9;
            if (v9) {
              *uint64_t v9 = (uint64_t)v2;
            }
            a2[2] = (uint64_t)v2;
            void *v2 = a2;
            uint64_t v7 = (uint64_t *)a2[1];
          }

          else
          {
            a2 = (uint64_t *)v2;
          }

          unint64_t v10 = (uint64_t **)*v3;
          unint64_t v11 = *(uint64_t **)(*v3 + 8);
          v3[2] = (uint64_t)v7;
          if (v7) {
            *uint64_t v7 = (uint64_t)v3;
          }
          *unint64_t v3 = (uint64_t)a2;
          *a2 = (uint64_t)v10;
          a2[1] = (uint64_t)v3;
          BOOL v12 = v11 == v3;
        }

        uint64_t v15 = 2LL;
        if (v12) {
          uint64_t v15 = 1LL;
        }
        v10[v15] = a2;
        *((_DWORD *)a2 + 6) = 1;
        break;
      }

      *((_DWORD *)v6 + 6) = 1;
      *((_DWORD *)v2 + 6) = 1;
      uint64_t v2 = (uint64_t **)*v3;
      a2 = v3;
    }

    while ((uint64_t *)*v3 != result);
  }

  *(_DWORD *)(*result + 24) = 1;
  return result;
}

BOOL sub_10002A820(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v8 = a1;
  uint64_t v9 = *(void *)a1;
  if (*(void *)a1)
  {
    uint64_t v10 = 0LL;
    do
    {
      if (!a2) {
        sub_1000D78D4(a1, a2, a3);
      }
      uint64_t v11 = v9;
      ++v10;
      a1 = sub_100005524((uint64_t)&v14, (const void **)(a2 + 32), (const void **)(v9 + 32));
      if ((_DWORD)a1) {
        uint64_t v12 = 8LL;
      }
      else {
        uint64_t v12 = 16LL;
      }
      uint64_t v9 = *(void *)(v11 + v12);
    }

    while (v9);
    if (a5) {
      goto LABEL_9;
    }
  }

  else
  {
    uint64_t v10 = 0LL;
    uint64_t v11 = a1;
    if (a5) {
LABEL_9:
    }
      *a5 = v10;
  }

  if (v11 == v8)
  {
    BOOL result = 1LL;
  }

  else
  {
    if (!a2) {
      sub_1000D78D4(a1, a2, a3);
    }
    BOOL result = sub_100005524((uint64_t)&v15, (const void **)(a2 + 32), (const void **)(v11 + 32));
  }

  *(_BYTE *)a4 = result;
  *(void *)(a4 + sub_100007004((uint64_t)v5 + 8) = v11;
  return result;
}

void *sub_10002A938(void *a1, void *a2, uint64_t a3)
{
  unint64_t v3 = *(void **)(a3 + 8);
  if (!v3) {
    __assert_rtn("insert_commit", "bstree_algorithms.hpp", 1774, "commit_data.node != node_ptr()");
  }
  if (v3 == a1)
  {
    *a1 = a2;
    a1[2] = a2;
    BOOL result = a1 + 1;
LABEL_8:
    *BOOL result = a2;
    goto LABEL_9;
  }

  if (*(_BYTE *)a3)
  {
    v3[1] = a2;
    size_t v6 = (void *)a1[1];
    BOOL result = a1 + 1;
    BOOL v5 = v6;
  }

  else
  {
    v3[2] = a2;
    uint64_t v7 = (void *)a1[2];
    BOOL result = a1 + 2;
    BOOL v5 = v7;
  }

  if (v3 == v5) {
    goto LABEL_8;
  }
LABEL_9:
  a2[1] = 0LL;
  a2[2] = 0LL;
  *a2 = v3;
  return result;
}

void sub_10002A9C0(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = **(void **)(a1 + 40);
  a2[2] = 0LL;
  *a2 = 0LL;
  a2[1] = 0LL;
  uint64_t v4 = v3 + 336;
  uint64_t v5 = *(void *)(v3 + 344);
  if (v5 != v3 + 336)
  {
    do
    {
      uint64_t v6 = *(void *)(v5 + 16);
      uint64_t v7 = sub_10008D0C4(*(void *)(v6 + 56));
      uint64_t v8 = (char *)v7;
      else {
        size_t v9 = *(void *)(v7 + 8);
      }
      memset(&v30, 170, sizeof(v30));
      sub_10002AD50((uint64_t)&v30, v9 + 3);
      if ((v30.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v10 = &v30;
      }
      else {
        uint64_t v10 = (std::string *)v30.__r_.__value_.__r.__words[0];
      }
      if (v9)
      {
        if (v8[23] >= 0) {
          uint64_t v11 = v8;
        }
        else {
          uint64_t v11 = *(char **)v8;
        }
        memmove(v10, v11, v9);
      }

      *(_DWORD *)((char *)&v10->__r_.__value_.__l.__data_ + v9) = 2108704;
      uint64_t v12 = sub_10008D2D4(*(void *)(v6 + 56));
      int v13 = *(char *)(v12 + 23);
      if (v13 >= 0) {
        char v14 = (const std::string::value_type *)v12;
      }
      else {
        char v14 = *(const std::string::value_type **)v12;
      }
      if (v13 >= 0) {
        std::string::size_type v15 = *(unsigned __int8 *)(v12 + 23);
      }
      else {
        std::string::size_type v15 = *(void *)(v12 + 8);
      }
      uint64_t v16 = std::string::append(&v30, v14, v15);
      std::string::size_type v17 = v16->__r_.__value_.__r.__words[0];
      v32[0] = v16->__r_.__value_.__l.__size_;
      *(void *)((char *)v32 + 7) = *(std::string::size_type *)((char *)&v16->__r_.__value_.__r.__words[1] + 7);
      unsigned __int8 size = v16->__r_.__value_.__s.__size_;
      v16->__r_.__value_.__l.__size_ = 0LL;
      v16->__r_.__value_.__l.__cap_ = 0LL;
      v16->__r_.__value_.__r.__words[0] = 0LL;
      unint64_t v19 = a2[1];
      unint64_t v20 = a2[2];
      if (v19 >= v20)
      {
        unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - *a2) >> 3);
        unint64_t v24 = v23 + 1;
        if (v23 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_1000046F8();
        }
        unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - *a2) >> 3);
        if (2 * v25 > v24) {
          unint64_t v24 = 2 * v25;
        }
        if (v25 >= 0x555555555555555LL) {
          unint64_t v26 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v26 = v24;
        }
        v31[4] = a2 + 2;
        if (v26) {
          uint64_t v27 = (char *)sub_1000171F0((uint64_t)(a2 + 2), v26);
        }
        else {
          uint64_t v27 = 0LL;
        }
        uint64_t v28 = &v27[24 * v23];
        v31[0] = v27;
        v31[1] = v28;
        v31[3] = &v27[24 * v26];
        uint64_t v29 = v32[0];
        *(void *)uint64_t v28 = v17;
        *((void *)v28 + 1) = v29;
        *(void *)(v28 + 15) = *(void *)((char *)v32 + 7);
        v28[23] = size;
        void v31[2] = v28 + 24;
        sub_10001717C(a2, v31);
        uint64_t v22 = a2[1];
        sub_100017378((uint64_t)v31);
      }

      else
      {
        uint64_t v21 = v32[0];
        *(void *)unint64_t v19 = v17;
        *(void *)(v19 + sub_100007004((uint64_t)v5 + 8) = v21;
        *(void *)(v19 + 15) = *(void *)((char *)v32 + 7);
        *(_BYTE *)(v19 + 23) = size;
        uint64_t v22 = v19 + 24;
        a2[1] = v19 + 24;
      }

      a2[1] = v22;
      uint64_t v5 = *(void *)(v5 + 8);
    }

    while (v5 != v4);
  }

void sub_10002AC24( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (v17 < 0) {
    operator delete(v16);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_100015E44((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_10002AC7C(uint64_t a1)
{
  (*(void (**)(__int128 *__return_ptr))(**(void **)(a1 + 40) + 16LL))(&v3);
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  sub_10002AD18(v2);
  *(_OWORD *)uint64_t v2 = v3;
  v2[2] = v4;
  __int128 v3 = 0uLL;
  uint64_t v4 = 0LL;
  uint64_t v5 = (void **)&v3;
  sub_100015E44(&v5);
}

void sub_10002AD18(uint64_t *a1)
{
  if (*a1)
  {
    sub_100015E84(a1);
    operator delete((void *)*a1);
    *a1 = 0LL;
    a1[1] = 0LL;
    a1[2] = 0LL;
  }

uint64_t sub_10002AD50(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8LL) {
    sub_100005114();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    uint64_t v6 = operator new(v4 + 1);
    *(void *)(a1 + sub_100007004((uint64_t)v5 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000LL;
    *(void *)a1 = v6;
  }

  else
  {
    *(void *)(a1 + sub_100007004((uint64_t)v5 + 8) = 0LL;
    *(void *)(a1 + 16) = 0LL;
    *(void *)a1 = 0LL;
    *(_BYTE *)(a1 + 23) = a2;
  }

  return a1;
}

uint64_t sub_10002ADD4(uint64_t a1)
{
  unint64_t v1 = *(uint64_t **)(a1 + 40);
  *(void *)&__int128 v20 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v2 = *v1;
  sub_1000241BC(*v1, v1[1], &v20);
  uint64_t v3 = v20;
  if ((void)v20) {
    goto LABEL_13;
  }
  sub_1000242B0(v2, v1[1], v19);
  __int128 v4 = *(_OWORD *)v19;
  *(_OWORD *)unint64_t v19 = 0uLL;
  uint64_t v5 = (std::__shared_weak_count *)*((void *)&v20 + 1);
  __int128 v20 = v4;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      unint64_t v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  uint64_t v8 = (std::__shared_weak_count *)v19[1];
  if (v19[1])
  {
    size_t v9 = (unint64_t *)(v19[1] + 8);
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  uint64_t v3 = v20;
  if ((void)v20)
  {
LABEL_13:
    sub_10008F358(v3, v19);
    uint64_t v12 = (const void **)v19[1];
    uint64_t v11 = (const void **)v19[0];
    if (v19[0] != v19[1])
    {
      uint64_t v13 = v2 + 184;
      do
      {
        sub_100029A5C(v13, v11);
        v11 += 3;
      }

      while (v11 != v12);
    }

    uint64_t v21 = (void **)v19;
    sub_100015E44(&v21);
    uint64_t v14 = 1LL;
  }

  else
  {
    uint64_t v14 = 0LL;
  }

  std::string::size_type v15 = (std::__shared_weak_count *)*((void *)&v20 + 1);
  if (*((void *)&v20 + 1))
  {
    uint64_t v16 = (unint64_t *)(*((void *)&v20 + 1) + 8LL);
    do
      unint64_t v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

  return v14;
}

void sub_10002AF68( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
  a15 = (void **)&a9;
  sub_100015E44(&a15);
  if (a14) {
    sub_1000D79E8();
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10002AF98(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16LL))();
  **(_BYTE **)(a1 + 32) = result;
  return result;
}

uint64_t sub_10002AFCC(uint64_t a1)
{
  unint64_t v1 = *(uint64_t **)(a1 + 40);
  *(void *)&__int128 v17 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v2 = *v1;
  sub_1000241BC(*v1, v1[1], &v17);
  uint64_t v3 = v17;
  if ((void)v17) {
    goto LABEL_13;
  }
  sub_1000242B0(v2, v1[1], &v16);
  __int128 v4 = v16;
  __int128 v16 = 0uLL;
  uint64_t v5 = (std::__shared_weak_count *)*((void *)&v17 + 1);
  __int128 v17 = v4;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      unint64_t v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  uint64_t v8 = (std::__shared_weak_count *)*((void *)&v16 + 1);
  if (*((void *)&v16 + 1))
  {
    size_t v9 = (unint64_t *)(*((void *)&v16 + 1) + 8LL);
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  uint64_t v3 = v17;
  if ((void)v17) {
LABEL_13:
  }
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 40LL))(v3);
  else {
    uint64_t v11 = 0LL;
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v17 + 1);
  if (*((void *)&v17 + 1))
  {
    uint64_t v13 = (unint64_t *)(*((void *)&v17 + 1) + 8LL);
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

  return v11;
}

void sub_10002B124( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    sub_1000D78A0();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10002B144(uint64_t a1)
{
  return sub_100023FA4( **(void **)(a1 + 40),  **(void **)(*(void *)(a1 + 40) + 8LL),  **(unsigned __int8 **)(*(void *)(a1 + 40) + 16LL));
}

void sub_10002B15C(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(uint64_t **)(a1 + 40);
  *(void *)&__int128 v31 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v31 + 1) = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v4 = *v3;
  sub_1000241BC(*v3, v3[1], &v31);
  uint64_t v5 = v31;
  if (!(void)v31)
  {
    sub_1000242B0(v4, v3[1], &v77);
    __int128 v6 = v77;
    __int128 v77 = 0uLL;
    unint64_t v7 = (std::__shared_weak_count *)*((void *)&v31 + 1);
    __int128 v31 = v6;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        unint64_t v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }

    unint64_t v10 = (std::__shared_weak_count *)*((void *)&v77 + 1);
    if (*((void *)&v77 + 1))
    {
      uint64_t v11 = (unint64_t *)(*((void *)&v77 + 1) + 8LL);
      do
        unint64_t v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }

    uint64_t v5 = v31;
  }

  *a2 = 0xAAAAAAAAAAAAAA00LL;
  a2[1] = 0LL;
  sub_1000041AC((uint64_t)a2);
  sub_1000041AC((uint64_t)a2);
  if (v5)
  {
    uint64_t v13 = sub_10008D2D4(v5);
    uint64_t v14 = sub_10008D0C4(v5);
    sub_10002BBB0((uint64_t)v68, "Name");
    uint64_t v69 = v68;
    char v70 = 1;
    uint64_t v72 = sub_10000B990((uint64_t)v71, v13);
    char v73 = 1;
    sub_10000BA40((uint64_t)v74, (uint64_t)v68, 2LL, 1, 2);
    v75[1] = (uint64_t *)v74;
    char v76 = 1;
    sub_10000BA40((uint64_t)&v77, (uint64_t)v74, 1LL, 1, 2);
    unsigned __int8 v78 = &v77;
    char v79 = 1;
    sub_10002BBB0((uint64_t)v59, "uuid");
    v60 = v59;
    char v61 = 1;
    uint64_t v63 = sub_10000B990((uint64_t)v62, v14);
    char v64 = 1;
    sub_10000BA40((uint64_t)v65, (uint64_t)v59, 2LL, 1, 2);
    v66[1] = (uint64_t *)v65;
    char v67 = 1;
    sub_10000BA40((uint64_t)v80, (uint64_t)v65, 1LL, 1, 2);
    v80[2] = v80;
    char v81 = 1;
    sub_10002BC40((uint64_t)v50, "Enabled");
    uint64_t v51 = v50;
    char v52 = 1;
    unsigned int v15 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v4 + 88) + 120LL))(*(void *)(v4 + 88), v14);
    v53[0] = 4;
    v54[0] = v15;
    sub_1000041AC((uint64_t)v53);
    sub_1000041AC((uint64_t)v53);
    v54[1] = v53;
    char v55 = 1;
    sub_10000BA40((uint64_t)v56, (uint64_t)v50, 2LL, 1, 2);
    v57[1] = (uint64_t *)v56;
    char v58 = 1;
    sub_10000BA40((uint64_t)v82, (uint64_t)v56, 1LL, 1, 2);
    v82[2] = v82;
    char v83 = 1;
    sub_10002BCD0((uint64_t)v41, "Budget (bytes)");
    uint64_t v42 = v41;
    char v43 = 1;
    unsigned int v16 = sub_10008D2CC(v5);
    v44[0] = 6;
    v45[0] = v16;
    sub_1000041AC((uint64_t)v44);
    sub_1000041AC((uint64_t)v44);
    v45[1] = v44;
    char v46 = 1;
    sub_10000BA40((uint64_t)v47, (uint64_t)v41, 2LL, 1, 2);
    v48[1] = (uint64_t *)v47;
    char v49 = 1;
    sub_10000BA40((uint64_t)v84, (uint64_t)v47, 1LL, 1, 2);
    v84[2] = v84;
    char v85 = 1;
    sub_10002BD60((uint64_t)v32, "Budget Usage (bytes)");
    __int128 v33 = v32;
    char v34 = 1;
    unsigned int v17 = sub_10008D2B4(v5);
    v35[0] = 6;
    v36[0] = v17;
    sub_1000041AC((uint64_t)v35);
    sub_1000041AC((uint64_t)v35);
    v36[1] = v35;
    char v37 = 1;
    sub_10000BA40((uint64_t)v38, (uint64_t)v32, 2LL, 1, 2);
    v39[1] = (uint64_t *)v38;
    char v40 = 1;
    sub_10000BA40((uint64_t)v86, (uint64_t)v38, 1LL, 1, 2);
    v87 = v86;
    char v88 = 1;
    sub_10000BA40((uint64_t)v29, (uint64_t)&v77, 5LL, 1, 2);
    sub_1000041AC((uint64_t)v29);
    char v18 = *(_BYTE *)a2;
    *(_BYTE *)a2 = v29[0];
    v29[0] = v18;
    unint64_t v19 = (uint64_t *)a2[1];
    a2[1] = v30;
    std::string v30 = v19;
    sub_1000041AC((uint64_t)a2);
    sub_1000041AC((uint64_t)v29);
    sub_10000425C(&v30, v29[0]);
    for (uint64_t i = 0LL; i != -160; i -= 32LL)
    {
      sub_1000041AC((uint64_t)&v86[i]);
      sub_10000425C((uint64_t **)&v86[i + 8], v86[i]);
    }

    sub_1000041AC((uint64_t)v38);
    sub_10000425C(v39, v38[0]);
    for (uint64_t j = 0LL; j != -8; j -= 4LL)
    {
      sub_1000041AC((uint64_t)&v35[j * 8]);
      sub_10000425C((uint64_t **)&v36[j], v35[j * 8]);
    }

    sub_1000041AC((uint64_t)v47);
    sub_10000425C(v48, v47[0]);
    for (uint64_t k = 0LL; k != -8; k -= 4LL)
    {
      sub_1000041AC((uint64_t)&v44[k * 8]);
      sub_10000425C((uint64_t **)&v45[k], v44[k * 8]);
    }

    sub_1000041AC((uint64_t)v56);
    sub_10000425C(v57, v56[0]);
    for (uint64_t m = 0LL; m != -8; m -= 4LL)
    {
      sub_1000041AC((uint64_t)&v53[m * 8]);
      sub_10000425C((uint64_t **)&v54[m], v53[m * 8]);
    }

    sub_1000041AC((uint64_t)v65);
    sub_10000425C(v66, v65[0]);
    for (uint64_t n = 0LL; n != -64; n -= 32LL)
    {
      sub_1000041AC((uint64_t)&v62[n]);
      sub_10000425C((uint64_t **)&v62[n + 8], v62[n]);
    }

    sub_1000041AC((uint64_t)v74);
    sub_10000425C(v75, v74[0]);
    for (iuint64_t i = 0LL; ii != -64; ii -= 32LL)
    {
      sub_1000041AC((uint64_t)&v71[ii]);
      sub_10000425C((uint64_t **)&v71[ii + 8], v71[ii]);
    }
  }

  unint64_t v26 = (std::__shared_weak_count *)*((void *)&v31 + 1);
  if (*((void *)&v31 + 1))
  {
    uint64_t v27 = (unint64_t *)(*((void *)&v31 + 1) + 8LL);
    do
      unint64_t v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }

void sub_10002B7DC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, unsigned __int8 a21, uint64_t *a22, uint64_t a23, uint64_t a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, unsigned __int8 a33, uint64_t *a34, uint64_t a35, uint64_t a36, char a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, unsigned __int8 a45, uint64_t *a46, uint64_t a47, uint64_t a48, char a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,unsigned __int8 a57,uint64_t *a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  for (uint64_t i = 0LL; i != -64; i -= 32LL)
  {
    sub_1000041AC((uint64_t)(&a13 + i + 32));
    sub_10000425C((uint64_t **)(&a13 + i + 40), *(&a13 + i + 32));
  }

  sub_1000041AC((uint64_t)&a33);
  sub_10000425C(&a34, a33);
  for (uint64_t j = 0LL; j != -64; j -= 32LL)
  {
    sub_1000041AC((uint64_t)(&a25 + j + 32));
    sub_10000425C((uint64_t **)(&a25 + j + 40), *(&a25 + j + 32));
  }

  sub_1000041AC((uint64_t)&a45);
  sub_10000425C(&a46, a45);
  for (uint64_t k = 0LL; k != -64; k -= 32LL)
  {
    sub_1000041AC((uint64_t)(&a37 + k + 32));
    sub_10000425C((uint64_t **)(&a37 + k + 40), *(&a37 + k + 32));
  }

  sub_1000041AC((uint64_t)&a57);
  sub_10000425C(&a58, a57);
  for (uint64_t m = 0LL; m != -64; m -= 32LL)
  {
    sub_1000041AC((uint64_t)(&a49 + m + 32));
    sub_10000425C((uint64_t **)(&a49 + m + 40), *(&a49 + m + 32));
  }

  sub_1000041AC((uint64_t)&a69);
  sub_10000425C(&a70, a69);
  for (uint64_t n = 0LL; n != -64; n -= 32LL)
  {
    sub_1000041AC((uint64_t)(&a61 + n + 32));
    sub_10000425C((uint64_t **)(&a61 + n + 40), *(&a61 + n + 32));
  }

  sub_1000041AC((uint64_t)v70);
  sub_10000425C(v71, *v70);
  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      unint64_t v81 = __ldaxr(p_shared_owners);
    while (__stlxr(v81 - 1, p_shared_owners));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }

  _Unwind_Resume(a1);
}

void sub_10002BA60()
{
}

void sub_10002BA6C()
{
}

void sub_10002BA7C()
{
}

void sub_10002BA88( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, unsigned __int8 a49, uint64_t *a50)
{
}

void sub_10002BAB4()
{
}

void sub_10002BAC4()
{
}

void sub_10002BAD4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,unsigned __int8 a61,uint64_t *a62)
{
}

void sub_10002BAF4()
{
}

void sub_10002BAFC(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 40) + 16LL))(&v5);
  uint64_t v2 = *(void *)(a1 + 32);
  sub_1000041AC((uint64_t)&v5);
  char v3 = *(_BYTE *)v2;
  *(_BYTE *)uint64_t v2 = v5;
  LOBYTE(v5) = v3;
  uint64_t v4 = *(uint64_t **)(v2 + 8);
  *(void *)(v2 + sub_100007004((uint64_t)v5 + 8) = v6;
  __int128 v6 = v4;
  sub_1000041AC(v2);
  sub_1000041AC((uint64_t)&v5);
  sub_10000425C(&v6, v5);
}

uint64_t sub_10002BBB0(uint64_t a1, char *a2)
{
  *(void *)(a1 + sub_100007004((uint64_t)v5 + 8) = 0LL;
  *(_BYTE *)a1 = 3;
  *(void *)(a1 + sub_100007004((uint64_t)v5 + 8) = sub_10002BBF8(a2);
  sub_1000041AC(a1);
  sub_1000041AC(a1);
  return a1;
}

void *sub_10002BBF8(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  sub_100005064(v2, a1);
  return v2;
}

void sub_10002BC2C(_Unwind_Exception *a1)
{
}

uint64_t sub_10002BC40(uint64_t a1, char *a2)
{
  *(void *)(a1 + sub_100007004((uint64_t)v5 + 8) = 0LL;
  *(_BYTE *)a1 = 3;
  *(void *)(a1 + sub_100007004((uint64_t)v5 + 8) = sub_10002BC88(a2);
  sub_1000041AC(a1);
  sub_1000041AC(a1);
  return a1;
}

void *sub_10002BC88(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  sub_100005064(v2, a1);
  return v2;
}

void sub_10002BCBC(_Unwind_Exception *a1)
{
}

uint64_t sub_10002BCD0(uint64_t a1, char *a2)
{
  *(void *)(a1 + sub_100007004((uint64_t)v5 + 8) = 0LL;
  *(_BYTE *)a1 = 3;
  *(void *)(a1 + sub_100007004((uint64_t)v5 + 8) = sub_10002BD18(a2);
  sub_1000041AC(a1);
  sub_1000041AC(a1);
  return a1;
}

void *sub_10002BD18(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  sub_100005064(v2, a1);
  return v2;
}

void sub_10002BD4C(_Unwind_Exception *a1)
{
}

uint64_t sub_10002BD60(uint64_t a1, char *a2)
{
  *(void *)(a1 + sub_100007004((uint64_t)v5 + 8) = 0LL;
  *(_BYTE *)a1 = 3;
  *(void *)(a1 + sub_100007004((uint64_t)v5 + 8) = sub_10002BDA8(a2);
  sub_1000041AC(a1);
  sub_1000041AC(a1);
  return a1;
}

void *sub_10002BDA8(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  sub_100005064(v2, a1);
  return v2;
}

void sub_10002BDDC(_Unwind_Exception *a1)
{
}

uint64_t sub_10002BDF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10002414C(**(void **)(a1 + 40) + 184LL, **(unsigned __int8 **)(*(void *)(a1 + 40) + 8LL), a2);
}

__n128 sub_10002BE04(uint64_t a1)
{
  (*(void (**)(_OWORD *__return_ptr))(**(void **)(a1 + 40) + 16LL))(v5);
  uint64_t v2 = *(void *)(a1 + 32);
  __n128 result = (__n128)v5[0];
  __int128 v4 = v5[2];
  *(_OWORD *)(v2 + 16) = v5[1];
  *(_OWORD *)(v2 + 32) = v4;
  *(__n128 *)uint64_t v2 = result;
  return result;
}

void sub_10002BE80(uint64_t a1)
{
}

void sub_10002BE90(uint64_t *a1)
{
  unint64_t v9 = (uint64_t *)*a1;
  uint64_t v2 = *v9;
  (*(void (**)(void, uint64_t *))(**(void **)(*v9 + 88) + 136LL))(*(void *)(*v9 + 88), v9 + 1);
  uint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  sub_1000242B0(v2, (uint64_t)(v9 + 1), &v12);
  if (v12)
  {
    sub_10008F358(v12, (uint64_t *)&v10);
    char v3 = v10;
    __int128 v4 = v11;
    if (v10 != v11)
    {
      uint64_t v5 = v2 + 184;
      do
      {
        sub_100029A5C(v5, v3);
        v3 += 3;
      }

      while (v3 != v4);
    }

    uint64_t v14 = &v10;
    sub_100015E44((void ***)&v14);
  }

  __int128 v6 = (std::__shared_weak_count *)v13;
  if (v13)
  {
    unint64_t v7 = (unint64_t *)(v13 + 8);
    do
      unint64_t v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

  sub_10002C008((uint64_t *)&v9);
  sub_100007004((uint64_t)(a1 + 1));
  operator delete(a1);
}

void sub_10002BFC0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
  a15 = (void **)&a10;
  sub_100015E44(&a15);
  if (a14) {
    sub_1000D79E8();
  }
  sub_10002C008(&a9);
  sub_100007004((uint64_t)v15 + 8);
  operator delete(v15);
  _Unwind_Resume(a1);
}

uint64_t *sub_10002C008(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0LL;
  if (v2)
  {
    operator delete((void *)v2);
  }

  return a1;
}

void sub_10002C04C(uint64_t **a1)
{
  uint64_t v2 = *a1;
  sub_100023C70(**a1, 0);
  operator delete(v2);
  sub_100007004((uint64_t)(a1 + 1));
  operator delete(a1);
}

void sub_10002C094(_Unwind_Exception *a1)
{
}

void sub_10002C0B8(uint64_t a1)
{
}

uint64_t sub_10002C0C8(uint64_t a1)
{
  uint64_t v1 = a1 + 152;
  uint64_t v2 = *(void *)(a1 + 160);
  if (v2 == a1 + 152) {
    return 0LL;
  }
  uint64_t v3 = 0LL;
  do
  {
    memset(__p, 170, sizeof(__p));
    uint64_t v4 = *(void *)(v2 + 16);
    if (*(char *)(v4 + 55) < 0)
    {
      sub_10000B8BC(__p, *(void **)(v4 + 32), *(void *)(v4 + 40));
    }

    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)(v4 + 32);
      __p[2] = *(void **)(v4 + 48);
    }

    char v5 = HIBYTE(__p[2]);
    uint64_t v6 = v1;
    if (v2 != v1)
    {
      if (SHIBYTE(__p[2]) >= 0) {
        unint64_t v7 = (void *)HIBYTE(__p[2]);
      }
      else {
        unint64_t v7 = __p[1];
      }
      if (SHIBYTE(__p[2]) >= 0) {
        unint64_t v8 = __p;
      }
      else {
        unint64_t v8 = (void **)__p[0];
      }
      while (1)
      {
        uint64_t v9 = *(void *)(v2 + 16);
        uint64_t v10 = *(unsigned __int8 *)(v9 + 55);
        size_t v11 = *(void *)(v9 + 40);
        uint64_t v12 = (v10 & 0x80u) == 0LL ? (void *)*(unsigned __int8 *)(v9 + 55) : *(void **)(v9 + 40);
        if (v12 != v7) {
          break;
        }
        unint64_t v13 = (const void **)(v9 + 32);
        if ((v10 & 0x80) != 0)
        {
          if (memcmp(*v13, v8, v11)) {
            break;
          }
        }

        else if ((_DWORD)v10)
        {
          uint64_t v14 = v8;
          while (*(unsigned __int8 *)v13 == *(unsigned __int8 *)v14)
          {
            unint64_t v13 = (const void **)((char *)v13 + 1);
            uint64_t v14 = (void **)((char *)v14 + 1);
            if (!--v10) {
              goto LABEL_24;
            }
          }

          break;
        }

LABEL_27:
    if (v5 < 0) {
      operator delete(__p[0]);
    }
    ++v3;
    uint64_t v2 = v6;
  }

  while (v6 != v1);
  return v3;
}

  LOBYTE(v20) = 0;
  uint64_t v21 = 1;
LABEL_28:
  if (*(char *)(a2 + 23) < 0)
  {
    unint64_t v23 = *(void *)(a2 + 8);
    if (v23 != 3)
    {
      if (v23 == 8 && **(void **)a2 == 0x657461647055736FLL) {
        goto LABEL_43;
      }
      goto LABEL_42;
    }

    a2 = *(void *)a2;
  }

  else
  {
    uint64_t v22 = *(unsigned __int8 *)(a2 + 23);
    if (v22 != 3)
    {
      if (v22 == 8 && *(void *)a2 == 0x657461647055736FLL) {
        goto LABEL_43;
      }
      goto LABEL_42;
    }
  }

  if (*(_WORD *)a2 != 28769 || *(_BYTE *)(a2 + 2) != 105) {
LABEL_42:
  }
    uint64_t v21 = 0;
LABEL_43:
  char v64 = kOSALogOptionOverrideFilePrefix;
  v65 = @"Analytics";
  unint64_t v25 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v65,  &v64,  1LL));
  char v43 = [v25 mutableCopy];

  sub_10006F298(buf);
  if (buf[23] >= 0) {
    unint64_t v26 = buf;
  }
  else {
    unint64_t v26 = *(_BYTE **)buf;
  }
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v26));
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if ([v27 length]) {
    [v43 setObject:v27 forKeyedSubscript:kOSALogOptionOverrideFileExtension];
  }
  *(void *)buf = 0LL;
  *(void *)&uint8_t buf[8] = buf;
  *(void *)&uint8_t buf[16] = 0x4012000000LL;
  *(void *)&_BYTE buf[24] = sub_1000533F8;
  v60 = sub_10005343C;
  char v61 = &unk_10011CA12;
  unsigned __int8 v62 = 0xAAAAAAAAAAAAAA00LL;
  uint64_t v63 = 0LL;
  sub_1000041AC((uint64_t)&v62);
  sub_1000041AC((uint64_t)&v62);
  std::string __p = 0LL;
  char v46 = &__p;
  unsigned __int8 v47 = 0x2020000000LL;
  time_t v48 = 0LL;
  __int128 v44 = 0LL;
  v52[0] = _NSConcreteStackBlock;
  v52[1] = 3321888768LL;
  v52[2] = sub_100053468;
  v52[3] = &unk_100127FE8;
  v52[6] = a1;
  uint64_t v41 = v53;
  sub_10000C3E4((uint64_t)v53, (uint64_t)&v49);
  char v55 = v21;
  v54[1] = (uint64_t *)v51.__d_.__rep_;
  void v54[2] = (uint64_t *)(v16 | v17 | v20);
  v52[4] = buf;
  v52[5] = &__p;
  unint64_t v28 = (void *)objc_claimAutoreleasedReturnValue( +[OSALog createForSubmission:metadata:options:error:writing:]( &OBJC_CLASS___OSALog,  "createForSubmission:metadata:options:error:writing:",  @"211",  v42,  v43,  &v44,  v52));
  uint64_t v29 = v44;
  std::string v30 = (os_log_s *)qword_100131940;
  if (v28)
  {
    if (os_log_type_enabled((os_log_t)qword_100131940, OS_LOG_TYPE_DEFAULT))
    {
      __int128 v31 = v46[3];
      *(_DWORD *)uint64_t v56 = 134218242;
      *(void *)&v56[4] = v31;
      *(_WORD *)&v56[12] = 2114;
      *(void *)&v56[14] = v42;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "[DefaultSink] Successfully wrote CA log with %llu messages and metadata %{public}@",  v56,  0x16u);
    }

    char v58 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v32 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v32 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v56[16] = v32;
    uint64_t v57 = v32;
    *(_OWORD *)uint64_t v56 = v32;
    __int128 v33 = objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "filepath", v53));
    sub_100005064(v56, (char *)[v33 UTF8String]);
    *(std::chrono::system_clock::time_point *)&v56[24] = v51;
    *(std::chrono::system_clock::time_point *)&uint64_t v57 = std::chrono::system_clock::now();
    char v34 = *(void *)&buf[8] + 48LL;
    BYTE8(v57) = *(_BYTE *)(*(void *)&buf[8] + 48LL);
    char v58 = *(uint64_t **)(*(void *)&buf[8] + 56LL);
    sub_1000041AC(*(void *)&buf[8] + 48LL);
    *(_BYTE *)char v34 = 0;
    *(void *)(v34 + sub_100007004((uint64_t)v1 + 8) = 0LL;
    sub_1000041AC((uint64_t)&v57 + 8);

    sub_1000545CC(v35, (uint64_t)v56);
    sub_100054784(v36, (uint64_t)v56);
    sub_1000041AC((uint64_t)&v57 + 8);
    sub_10000425C(&v58, BYTE8(v57));
    if ((v56[23] & 0x80000000) != 0) {
      operator delete(*(void **)v56);
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_100131940, OS_LOG_TYPE_ERROR))
  {
    sub_1000D8F4C((uint64_t)v29, v30);
  }

  sub_1000041AC((uint64_t)v41);
  sub_10000425C(v54, v53[0]);

  _Block_object_dispose(&__p, 8);
  _Block_object_dispose(buf, 8);
  sub_1000041AC((uint64_t)&v62);
  sub_10000425C(&v63, v62);

  sub_1000041AC((uint64_t)&v49);
  sub_10000425C(&v50, v49);
}

  v17[0] = 4;
  char v18 = (uint64_t *)v3;
  sub_1000041AC((uint64_t)v17);
  sub_1000041AC((uint64_t)v17);
  size_t v11 = a2[4];
  if (v11 >= a2[5])
  {
    uint64_t v12 = sub_100004B7C(a2 + 3, (uint64_t)v17);
  }

  else
  {
    *(_BYTE *)size_t v11 = v17[0];
    *(void *)(v11 + sub_100007004((uint64_t)v1 + 8) = v18;
    sub_1000041AC((uint64_t)v17);
    v17[0] = 0;
    char v18 = 0LL;
    sub_1000041AC(v11);
    uint64_t v12 = v11 + 16;
  }

  a2[4] = v12;
  sub_1000041AC((uint64_t)v17);
  sub_10000425C(&v18, v17[0]);
  sub_1000041AC((uint64_t)&v19);
  sub_10000425C((uint64_t **)&__s, v19);
}

uint64_t sub_10002C248()
{
  return (*(uint64_t (**)(uint64_t))(*(void *)v0 + 16LL))(v0);
}

void sub_10002C258(unint64_t *a1@<X8>)
{
  unint64_t v1 = __ldaxr(a1);
  __stlxr(v1 - 1, a1);
}

void sub_10002C268(std::__shared_weak_count *this)
{
}

  ;
}

  ;
}

void sub_10002C284(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
}

char *sub_10002C28C@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x48uLL);
  v2[1] = 0LL;
  v2[2] = 0LL;
  void *v2 = off_100126870;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_DWORD *)v2 + 16) = 1065353216;
  a1[1] = v2;
  v2[3] = off_1001267F8;
  __n128 result = (char *)(v2 + 3);
  *a1 = result;
  return result;
}

void sub_10002C2E8(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = sub_10002C9B0((void *)(a1 + 8), (__int128 *)__p);
  sub_1000041AC((uint64_t)v11);
  sub_10000425C(&v12, v11[0]);
  if (v10 < 0)
  {
    operator delete(__p[0]);
    if (v6) {
      goto LABEL_3;
    }
LABEL_5:
    char v8 = 0;
    *(_BYTE *)a4 = 0;
    goto LABEL_6;
  }

  if (!v6) {
    goto LABEL_5;
  }
LABEL_3:
  sub_10000C3E4(a4, (uint64_t)(v6 + 56));
  __int128 v7 = *(_OWORD *)(v6 + 72);
  *(_BYTE *)(a4 + 32) = v6[88];
  *(_OWORD *)(a4 + 16) = v7;
  char v8 = 1;
LABEL_6:
  *(_BYTE *)(a4 + 40) = v8;
}

void sub_10002C3C4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

void sub_10002C3D0(__int128 *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (*(_BYTE *)a2 == 1 && *(void *)(*(void *)(a2 + 8) + 16LL))
  {
    sub_10000C3E4((uint64_t)v5, a2);
  }

  else
  {
    v5[0] = 0;
    uint64_t v6 = 0LL;
    sub_1000041AC((uint64_t)v5);
    sub_1000041AC((uint64_t)v5);
  }

  sub_10002C828(a3, a1, (uint64_t)v5);
  sub_1000041AC((uint64_t)v5);
  sub_10000425C(&v6, v5[0]);
}

void sub_10002C490( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t sub_10002C4AC(uint64_t a1)
{
  return a1;
}

uint64_t sub_10002C4F0(uint64_t result, uint64_t a2)
{
  for (uint64_t i = (void *)(result + 24);
        ;
        __n128 result = (*(uint64_t (**)(uint64_t, void *, void *, void *))(*(void *)v4 + 48LL))( v4,  i + 2,  i + 5,  i + 7))
  {
    uint64_t i = (void *)*i;
    if (!i) {
      break;
    }
    uint64_t v4 = *(void *)(a2 + 24);
    if (!v4) {
      sub_1000129CC();
    }
  }

  return result;
}

uint64_t sub_10002C54C(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v15 = __p;
  uint64_t v6 = sub_10002D298(a1 + 8, (__int128 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v15);
  sub_10000C3E4((uint64_t)&v15, a4);
  sub_1000041AC((uint64_t)&v15);
  unsigned __int8 v7 = v6[56];
  v6 += 56;
  *uint64_t v6 = v15;
  LOBYTE(v15) = v7;
  char v8 = (uint64_t *)*((void *)v6 + 1);
  *((void *)v6 + 1) = v16;
  unsigned int v16 = v8;
  sub_1000041AC((uint64_t)v6);
  sub_1000041AC((uint64_t)&v15);
  sub_10000425C(&v16, v15);
  __int128 v9 = *(_OWORD *)(a4 + 16);
  v6[32] = *(_BYTE *)(a4 + 32);
  *((_OWORD *)v6 + 1) = v9;
  sub_1000041AC((uint64_t)v13);
  sub_10000425C(&v14, v13[0]);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return 1LL;
}

void sub_10002C674(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10002C684(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 24);
  if (v2)
  {
    char v4 = 0;
    char v5 = (void *)(a1 + 8);
    while (1)
    {
      uint64_t v6 = *((unsigned __int8 *)v2 + 39);
      if ((v6 & 0x80u) == 0LL) {
        uint64_t v7 = *((unsigned __int8 *)v2 + 39);
      }
      else {
        uint64_t v7 = v2[3];
      }
      uint64_t v8 = a2[23];
      int v9 = (char)v8;
      if ((v8 & 0x80u) != 0LL) {
        uint64_t v8 = *((void *)a2 + 1);
      }
      if (v7 == v8)
      {
        char v10 = (const void **)(v2 + 2);
        if (v9 >= 0) {
          size_t v11 = a2;
        }
        else {
          size_t v11 = *(unsigned __int8 **)a2;
        }
        if ((v6 & 0x80) != 0)
        {
          if (!memcmp(*v10, v11, v2[3]))
          {
LABEL_19:
            char v12 = (uint64_t *)*v2;
            sub_10002D708(v5, v2, (uint64_t)v14);
            sub_10002D6C4((uint64_t)v14, 0LL);
            char v4 = 1;
            goto LABEL_20;
          }
        }

        else
        {
          if (!*((_BYTE *)v2 + 39)) {
            goto LABEL_19;
          }
          while (*(unsigned __int8 *)v10 == *v11)
          {
            char v10 = (const void **)((char *)v10 + 1);
            ++v11;
            if (!--v6) {
              goto LABEL_19;
            }
          }
        }
      }

      char v12 = (uint64_t *)*v2;
LABEL_20:
      uint64_t v2 = v12;
      if (!v12) {
        return v4 & 1;
      }
    }
  }

  char v4 = 0;
  return v4 & 1;
}

uint64_t sub_10002C7AC(uint64_t a1)
{
  return 1LL;
}

void *sub_10002C7C8(void *a1)
{
  *a1 = off_1001267F8;
  sub_10002C8A0((uint64_t)(a1 + 1));
  return a1;
}

void sub_10002C7F8(void *a1)
{
  *a1 = off_1001267F8;
  sub_10002C8A0((uint64_t)(a1 + 1));
  operator delete(a1);
}

void *sub_10002C828(void *__dst, __int128 *a2, uint64_t a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10000B8BC(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v5 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)__int128 __dst = v5;
  }

  sub_10000C3E4((uint64_t)(__dst + 3), a3);
  return __dst;
}

void sub_10002C884(_Unwind_Exception *exception_object)
{
}

uint64_t sub_10002C8A0(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_10002C8D8(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_10002C914((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }

    while (v3);
  }

void sub_10002C914(uint64_t a1)
{
}

void sub_10002C970(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100126870;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10002C980(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100126870;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_10002C9A0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

unsigned __int8 *sub_10002C9B0(void *a1, __int128 *a2)
{
  unint64_t v4 = sub_10002CAB0((uint64_t)(a1 + 3), a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0LL;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }

  else
  {
    unint64_t v9 = (*(void *)&v5 - 1LL) & v4;
  }

  char v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0LL;
  }
  size_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v13 == v6)
      {
      }

      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }

        else
        {
          v13 &= *(void *)&v5 - 1LL;
        }

        if (v13 != v9) {
          return 0LL;
        }
      }

      size_t v11 = *(unsigned __int8 **)v11;
    }

    while (v11);
  }

  return v11;
}

unint64_t sub_10002CAB0(uint64_t a1, __int128 *a2)
{
  unint64_t v3 = sub_10002CB60(a1, (char *)__p);
  sub_1000041AC((uint64_t)v7);
  sub_10000425C(&v8, v7[0]);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return v3;
}

void sub_10002CB44( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unint64_t sub_10002CB60(uint64_t a1, char *a2)
{
  char v7 = -86;
  unint64_t v3 = sub_10002CCA8((uint64_t)&v7, a2);
  unint64_t v4 = sub_10002CC18((uint64_t)&v6, (uint64_t)(a2 + 24));
  return 0xC6A4A7935BD1E995LL
       * ((0xC6A4A7935BD1E995LL * ((0xC6A4A7935BD1E995LL * v4) ^ ((0xC6A4A7935BD1E995LL * v4) >> 47))) ^ (0x35A98F4D286A90B9LL * ((0xC6A4A7935BD1E995LL * v3) ^ ((0xC6A4A7935BD1E995LL * v3) >> 47)) + 3864292196u))
       + 3864292196u;
}

unint64_t sub_10002CC18(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = sub_100021B64((uint64_t)&v6, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

unint64_t sub_10002CCA8(uint64_t a1, char *a2)
{
  uint64_t v2 = a2[23];
  if ((v2 & 0x80u) == 0LL) {
    unint64_t v3 = a2;
  }
  else {
    unint64_t v3 = *(char **)a2;
  }
  unint64_t result = 0LL;
  if ((v2 & 0x80u) != 0LL) {
    uint64_t v2 = *((void *)a2 + 1);
  }
  for (; v2; --v2)
  {
    uint64_t v5 = *v3++;
    unint64_t result = 3864292196u
           - 0x395B586CA42E166BLL
           * ((0xC6A4A7935BD1E995LL * ((0xC6A4A7935BD1E995LL * v5) ^ ((0xC6A4A7935BD1E995LL * v5) >> 47))) ^ result);
  }

  return result;
}

void *sub_10002CD04(void *__dst, __int128 *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10000B8BC(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)__int128 __dst = v4;
  }

  sub_10000C3E4((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_10002CD5C(_Unwind_Exception *exception_object)
{
}

uint64_t sub_10002CD78(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v4 = a2[23];
  size_t v5 = *((void *)a2 + 1);
  if ((v4 & 0x80u) == 0LL) {
    uint64_t v6 = a2[23];
  }
  else {
    uint64_t v6 = *((void *)a2 + 1);
  }
  uint64_t v7 = a3[23];
  int v8 = (char)v7;
  if ((v7 & 0x80u) != 0LL) {
    uint64_t v7 = *((void *)a3 + 1);
  }
  if (v6 != v7) {
    return 0LL;
  }
  if (v8 >= 0) {
    char v10 = a3;
  }
  else {
    char v10 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0)
  {
    return 0LL;
  }

  if ((_DWORD)v4)
  {
    for (uint64_t i = a2; *i == *v10; ++i)
    {
      ++v10;
      if (!--v4) {
        return sub_10002CE28(a2 + 24, a3 + 24);
      }
    }

    return 0LL;
  }

  return sub_10002CE28(a2 + 24, a3 + 24);
}

uint64_t sub_10002CE28(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v3 = *a1;
  int v4 = *a2;
  if (v3 != v4)
  {
    if (v3 == 5 && v4 == 7)
    {
      double v12 = (double)*((uint64_t *)a1 + 1);
    }

    else
    {
      if (v3 == 7 && v4 == 5)
      {
        double v10 = *((double *)a1 + 1);
        double v11 = (double)*((uint64_t *)a2 + 1);
        return v10 == v11;
      }

      if (v3 != 6 || v4 != 7)
      {
        if (v3 != 7 || v4 != 6)
        {
          if (v3 != 6 || v4 != 5)
          {
            uint64_t result = 0LL;
            if (v3 != 5 || v4 != 6) {
              return result;
            }
          }

          return *((void *)a1 + 1) == *((void *)a2 + 1);
        }

        double v10 = *((double *)a1 + 1);
        double v11 = (double)*((unint64_t *)a2 + 1);
        return v10 == v11;
      }

      double v12 = (double)*((unint64_t *)a1 + 1);
    }

    return *((double *)a2 + 1) == v12;
  }

  uint64_t result = 1LL;
  switch(v3)
  {
    case 0:
      return result;
    case 1:
      unint64_t v13 = (void *)*((void *)a1 + 1);
      uint64_t v14 = (void *)*((void *)a2 + 1);
      if (v13[2] != v14[2]) {
        return 0LL;
      }
      unsigned int v17 = (void *)*v13;
      unsigned int v15 = v13 + 1;
      unsigned int v16 = v17;
      if (v17 == v15) {
        return result;
      }
      char v18 = (void *)*v14;
      break;
    case 2:
      uint64_t v29 = (uint64_t *)*((void *)a1 + 1);
      std::string v30 = (uint64_t *)*((void *)a2 + 1);
      uint64_t v31 = *v29;
      uint64_t v32 = v29[1];
      uint64_t v33 = *v30;
      if (v32 - *v29 != v30[1] - *v30) {
        return 0LL;
      }
      while (v31 != v32)
      {
        uint64_t result = sub_10002CE28(v31, v33);
        if (!(_DWORD)result) {
          break;
        }
        v31 += 16LL;
        v33 += 16LL;
      }

      return result;
    case 3:
      char v34 = (unsigned __int8 *)*((void *)a1 + 1);
      std::string v35 = (unsigned __int8 **)*((void *)a2 + 1);
      uint64_t v36 = v34[23];
      if ((v36 & 0x80u) == 0LL) {
        char v37 = (unsigned __int8 *)v34[23];
      }
      else {
        char v37 = (unsigned __int8 *)*((void *)v34 + 1);
      }
      std::exception v38 = (unsigned __int8 *)*((unsigned __int8 *)v35 + 23);
      int v39 = (char)v38;
      if (v37 != v38) {
        return 0LL;
      }
      if (v39 >= 0) {
        char v40 = (unsigned __int8 *)*((void *)a2 + 1);
      }
      else {
        char v40 = *v35;
      }
      if ((v36 & 0x80) != 0) {
        return memcmp(*(const void **)v34, v40, *((void *)v34 + 1)) == 0;
      }
      if (v34[23])
      {
        uint64_t v41 = v36 - 1;
        do
        {
          int v43 = *v34++;
          int v42 = v43;
          int v45 = *v40++;
          int v44 = v45;
          BOOL v47 = v41-- != 0;
          uint64_t result = v42 == v44;
        }

        while (v42 == v44 && v47);
      }

      return result;
    case 4:
      return a1[8] == a2[8];
    case 5:
    case 6:
      return *((void *)a1 + 1) == *((void *)a2 + 1);
    case 7:
      double v10 = *((double *)a1 + 1);
      double v11 = *((double *)a2 + 1);
      return v10 == v11;
    case 8:
      uint64_t v48 = *((void *)a2 + 1);
      v50[0] = *((void *)a1 + 1);
      v50[1] = v50[0] + 24LL;
      v50[2] = v50[0] + 25LL;
      v49[0] = v48;
      v49[1] = v48 + 24;
      v49[2] = v48 + 25;
      return sub_10002D1BC((uint64_t)&v51, (uint64_t)v50, (uint64_t)v49);
    default:
      return 0LL;
  }

  while (1)
  {
    uint64_t v19 = *((unsigned __int8 *)v16 + 55);
    if ((v19 & 0x80u) == 0LL) {
      uint64_t v20 = *((unsigned __int8 *)v16 + 55);
    }
    else {
      uint64_t v20 = v16[5];
    }
    uint64_t v21 = *((unsigned __int8 *)v18 + 55);
    int v22 = (char)v21;
    if ((v21 & 0x80u) != 0LL) {
      uint64_t v21 = v18[5];
    }
    if (v20 != v21) {
      return 0LL;
    }
    unint64_t v23 = (const void **)(v16 + 4);
    if (v22 >= 0) {
      unint64_t v24 = (unsigned __int8 *)(v18 + 4);
    }
    else {
      unint64_t v24 = (unsigned __int8 *)v18[4];
    }
    if ((v19 & 0x80) != 0)
    {
      if (memcmp(*v23, v24, v16[5])) {
        return 0LL;
      }
    }

    else if (*((_BYTE *)v16 + 55))
    {
      while (*(unsigned __int8 *)v23 == *v24)
      {
        unint64_t v23 = (const void **)((char *)v23 + 1);
        ++v24;
        if (!--v19) {
          goto LABEL_41;
        }
      }

      return 0LL;
    }

LABEL_41:
    uint64_t result = sub_10002CE28(v16 + 7, v18 + 7);
    if ((_DWORD)result)
    {
      unint64_t v25 = (void *)v16[1];
      unint64_t v26 = v16;
      if (v25)
      {
        do
        {
          unsigned int v16 = v25;
          unint64_t v25 = (void *)*v25;
        }

        while (v25);
      }

      else
      {
        do
        {
          unsigned int v16 = (void *)v26[2];
          BOOL v6 = *v16 == (void)v26;
          unint64_t v26 = v16;
        }

        while (!v6);
      }

      uint64_t v27 = (void *)v18[1];
      if (v27)
      {
        do
        {
          unint64_t v28 = v27;
          uint64_t v27 = (void *)*v27;
        }

        while (v27);
      }

      else
      {
        do
        {
          unint64_t v28 = (void *)v18[2];
          BOOL v6 = *v28 == (void)v18;
          char v18 = v28;
        }

        while (!v6);
      }

      uint64_t result = 1LL;
      char v18 = v28;
      if (v16 != v15) {
        continue;
      }
    }

    return result;
  }

    uint64_t v21 = 1;
    int v4 = v14;
    goto LABEL_42;
  }

  memset(&v25, 0, sizeof(v25));
  int v4 = v14 + 2;
  if (v14 + 2 != a3 && *v17 == 91 && *v4 == 46)
  {
    char v18 = sub_1000376D8(a1, v14 + 3, a3, (uint64_t)&v25);
LABEL_55:
    int v4 = v18;
    goto LABEL_56;
  }

  if ((v11 | 0x40) == 0x40)
  {
    LODWORD(v17) = *v17;
    if ((_DWORD)v17 == 92)
    {
      if (v11) {
        char v18 = sub_100037914(a1, v14 + 2, a3, &v25);
      }
      else {
        char v18 = (char *)sub_1000377F0(a1, (unsigned __int8 *)v14 + 2, a3, &v25, v6);
      }
      goto LABEL_55;
    }
  }

  else
  {
    LOBYTE(v17) = *v17;
  }

  std::string::operator=(&v25, (std::string::value_type)v17);
LABEL_56:
  unint64_t v24 = v26;
  std::string __p = v25;
  memset(&v25, 0, sizeof(v25));
  memset(&v26, 0, sizeof(v26));
  sub_100037AEC(v6, (char *)&v24, (char *)&__p);
  uint64_t v21 = 1;
LABEL_42:
  if ((v21 & 1) != 0) {
    return v4;
  }
  return (char *)v6;
}
}

  char v18 = 0LL;
LABEL_42:
  char v70 = "osProductNameWithVersion";
  uint64_t v73 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&uint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)buf = v19;
  uint64_t v72 = v19;
  sub_100008780((uint64_t)&v63, &v70, (uint64_t)buf);
  v65 = (unsigned __int8 *)&v63;
  unsigned __int8 v66 = 0LL;
  char v67 = 0LL;
  unint64_t v68 = 0LL;
  uint64_t v69 = 0x8000000000000000LL;
  sub_100008AC8(&v65);
  if (sub_1000087E8((unsigned __int8 **)buf, &v65))
  {
    uint64_t v20 = sub_10009AE9C();
    if (!v20) {
      goto LABEL_48;
    }
  }

  else
  {
    uint64_t v20 = (uint64_t)sub_100008924((unsigned __int8 **)buf);
  }

  if (*(_BYTE *)v20 == 3)
  {
    uint64_t v21 = *(__int128 **)(v20 + 8);
    goto LABEL_49;
  }

  __break(1u);
  return result;
}

void sub_10002D1B0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

BOOL sub_10002D1BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10002D254((uint64_t)&v6, (const void ***)a2, (uint64_t *)a3)
}

BOOL sub_10002D254(uint64_t a1, const void ***a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  int v4 = **a2;
  size_t v5 = (_BYTE *)(*a2)[1] - v4;
  return v5 == *(void *)(v3 + 8) - *(void *)v3 && memcmp(v4, *(const void **)v3, v5) == 0;
}

unsigned __int8 *sub_10002D298(uint64_t a1, __int128 *a2, uint64_t a3, __int128 **a4)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_10002CAB0(a1 + 24, a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    unint64_t v26 = a4;
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v13 = v8;
      if (v8 >= v10) {
        unint64_t v13 = v8 % v10;
      }
    }

    else
    {
      unint64_t v13 = (v10 - 1) & v8;
    }

    uint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v13);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v9)
        {
        }

        else
        {
          if (v12 > 1)
          {
            if (v16 >= v10) {
              v16 %= v10;
            }
          }

          else
          {
            v16 &= v10 - 1;
          }

          if (v16 != v13) {
            break;
          }
        }
      }
    }

    a4 = v26;
  }

  else
  {
    unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  }

  memset(v27, 170, sizeof(v27));
  sub_10002D58C(a1, v9, a4, v27);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v18 = *(float *)(a1 + 32);
  if ((((float)(v18 * (float)v10) >= v17) & ~(v10 == 0)) == 0)
  {
    BOOL v19 = 1LL;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_10002246C(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v13 = v9 % v10;
      }
      else {
        unint64_t v13 = v9;
      }
    }

    else
    {
      unint64_t v13 = (v10 - 1) & v9;
    }
  }

  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v13);
  if (v23)
  {
    *(void *)v27[0] = *v23;
    *unint64_t v23 = v27[0];
  }

  else
  {
    *(void *)v27[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27[0];
    *(void *)(*(void *)a1 + 8 * v13) = a1 + 16;
    if (*(void *)v27[0])
    {
      unint64_t v24 = *(void *)(*(void *)v27[0] + 8LL);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v24 >= v10) {
          v24 %= v10;
        }
      }

      else
      {
        v24 &= v10 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v24) = v27[0];
    }
  }

  uint64_t i = (unsigned __int8 *)v27[0];
  v27[0] = 0LL;
  ++*v7;
  sub_10002D6C4((uint64_t)v27, 0LL);
  return i;
}

void sub_10002D56C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void *sub_10002D58C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, void *a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  memset(a4, 170, 24);
  unint64_t v8 = operator new(0x60uLL);
  *a4 = v8;
  a4[1] = v7;
  *((_BYTE *)a4 + 16) = 0;
  *unint64_t v8 = 0LL;
  v8[1] = a2;
  uint64_t result = sub_10002D604(v8 + 2, *a3);
  *((_BYTE *)a4 + 16) = 1;
  return result;
}

void sub_10002D5EC(_Unwind_Exception *a1)
{
}

void *sub_10002D604(void *a1, __int128 *a2)
{
  uint64_t v3 = sub_10002D650(a1, a2);
  v3[9] = 0LL;
  *(_OWORD *)(v3 + 7) = 0u;
  *(_OWORD *)(v3 + 5) = 0u;
  uint64_t v4 = (uint64_t)(v3 + 5);
  sub_1000041AC((uint64_t)(v3 + 5));
  sub_1000041AC(v4);
  a1[7] = 0LL;
  return a1;
}

void *sub_10002D650(void *__dst, __int128 *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10000B8BC(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)__int128 __dst = v4;
  }

  sub_10000C3E4((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_10002D6A8(_Unwind_Exception *exception_object)
{
}

void sub_10002D6C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_10002C914((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }

void *sub_10002D708@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }

  else
  {
    v4 &= *(void *)&v3 - 1LL;
  }

  char v6 = *(void **)(*result + 8 * v4);
  do
  {
    uint64_t v7 = v6;
    char v6 = (void *)*v6;
  }

  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }

  else
  {
    v8 &= *(void *)&v3 - 1LL;
  }

  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8LL);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }

    else
    {
      v9 &= *(void *)&v3 - 1LL;
    }

    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0LL;
  }

  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }

    else
    {
      v11 &= *(void *)&v3 - 1LL;
    }

    if (v11 != v4)
    {
      *(void *)(*result + 8 * v11) = v7;
      uint64_t v10 = *a2;
    }
  }

  *uint64_t v7 = v10;
  *a2 = 0LL;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + sub_100007004((uint64_t)v1 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_10002D83C(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_10002C8D8(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0LL;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0LL; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0LL;
    }

    *(void *)(a1 + 24) = 0LL;
  }

void *sub_10002D890@<X0>(uint64_t *a1@<X0>, __int128 *a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  if (os_log_type_enabled((os_log_t)qword_100131910, OS_LOG_TYPE_DEBUG)) {
    sub_1000D7A64();
  }
  return sub_10002DCB4(a1, a2, a3, a4);
}

void *sub_10002D948(void *a1, uint64_t *a2, __int128 *a3, void *a4)
{
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  *a1 = off_1001268C0;
  a1[1] = v7;
  a1[2] = v6;
  if (v6)
  {
    unint64_t v8 = (unint64_t *)(v6 + 16);
    do
      unint64_t v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }

  uint64_t v10 = a1 + 3;
  if (*((char *)a3 + 23) < 0)
  {
    sub_10000B8BC(v10, *(void **)a3, *((void *)a3 + 1));
  }

  else
  {
    __int128 v11 = *a3;
    a1[5] = *((void *)a3 + 2);
    *(_OWORD *)uint64_t v10 = v11;
  }

  a1[6] = *a4;
  return a1;
}

void sub_10002D9C8(_Unwind_Exception *exception_object)
{
  int8x8_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10002D9E0(uint64_t a1)
{
  *(void *)a1 = off_1001268C0;
  if (os_log_type_enabled((os_log_t)qword_100131910, OS_LOG_TYPE_DEBUG)) {
    sub_1000D7AE4();
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_10002DA5C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10002D9E0(a1);
  operator delete(v1);
}

void sub_10002DA70(uint64_t a1, void *a2)
{
  unint64_t v23 = 0xAAAAAAAAAAAAAA00LL;
  unint64_t v24 = 0LL;
  sub_1000041AC((uint64_t)&v23);
  sub_1000041AC((uint64_t)&v23);
  sub_10000B990((uint64_t)v21, *a2 + 16LL);
  unint64_t v4 = sub_100003F94((unsigned __int8 *)&v23, "name");
  sub_1000041AC((uint64_t)v21);
  char v5 = *(_BYTE *)v4;
  *(_BYTE *)unint64_t v4 = v21[0];
  v21[0] = v5;
  uint64_t v6 = (uint64_t *)v4[1];
  v4[1] = (uint64_t)v22;
  size_t v22 = v6;
  sub_1000041AC((uint64_t)v4);
  sub_1000041AC((uint64_t)v21);
  sub_10000425C(&v22, v21[0]);
  sub_10000C3E4((uint64_t)v19, *a2 + 40LL);
  uint64_t v7 = sub_100003F94((unsigned __int8 *)&v23, "message");
  sub_1000041AC((uint64_t)v19);
  char v8 = *(_BYTE *)v7;
  *(_BYTE *)uint64_t v7 = v19[0];
  v19[0] = v8;
  unint64_t v9 = (uint64_t *)v7[1];
  v7[1] = (uint64_t)v20;
  unint64_t v20 = v9;
  sub_1000041AC((uint64_t)v7);
  sub_1000041AC((uint64_t)v19);
  sub_10000425C(&v20, v19[0]);
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 16);
  if (v10)
  {
    __int128 v11 = std::__shared_weak_count::lock(v10);
    float v18 = v11;
    if (v11)
    {
      unint64_t v12 = v11;
      unint64_t v13 = *(void *)(a1 + 8);
      unint64_t v17 = v13;
      if (v13)
      {
        (*(void (**)(dispatch_object_t *__return_ptr, unint64_t, uint64_t, unint64_t *))(*(void *)v13 + 16LL))( &object,  v13,  a1 + 48,  &v23);
        if (object) {
          dispatch_release(object);
        }
      }

      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        unint64_t v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }

  sub_1000041AC((uint64_t)&v23);
  sub_10000425C(&v24, v23);
}

void sub_10002DC6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_100007004((uint64_t)va);
  sub_10000417C((uint64_t **)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_10002DCAC(uint64_t a1)
{
  return a1 + 24;
}

void *sub_10002DCB4@<X0>(uint64_t *a1@<X1>, __int128 *a2@<X2>, void *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x50uLL);
  uint64_t result = sub_10002DD24(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_10002DD10(_Unwind_Exception *a1)
{
}

void *sub_10002DD24(void *a1, uint64_t *a2, __int128 *a3, void *a4)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_100126910;
  char v6 = -86;
  sub_10002DDFC((uint64_t)&v6, a1 + 3, a2, a3, a4);
  return a1;
}

void sub_10002DDA8(_Unwind_Exception *a1)
{
}

void sub_10002DDBC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100126910;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10002DDCC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100126910;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_10002DDEC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_10002DDFC(uint64_t a1, void *a2, uint64_t *a3, __int128 *a4, void *a5)
{
  uint64_t v5 = (std::__shared_weak_count *)a3[1];
  v8[0] = *a3;
  v8[1] = (uint64_t)v5;
  if (v5)
  {
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      unint64_t v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
  }

  sub_10002D948(a2, v8, a4, a5);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_10002DEAC(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

  ;
}

void sub_10002DEDC(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

uint64_t *sub_10002DEE8@<X0>( void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10 = operator new(0x120uLL);
  sub_10002DF70((uint64_t)v10, a1, a2, a3, a4);
  return sub_100030994(a5, (uint64_t)v10);
}

void sub_10002DF54(void *a1)
{
}

uint64_t sub_10002DF70(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  *(void *)a1 = off_100126AB8;
  *(void *)(a1 + sub_100007004((uint64_t)v1 + 8) = off_100126AF0;
  *(void *)(a1 + 16) = off_100126B20;
  dispatch_queue_t v10 = dispatch_queue_create("analyticsd.EventBrokerQueue", 0LL);
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = v10;
  if (v10)
  {
    __int128 v11 = v10;
    dispatch_retain(v10);
    dispatch_release(v11);
  }

  *(void *)a1 = off_100126960;
  *(void *)(a1 + sub_100007004((uint64_t)v1 + 8) = off_1001269B0;
  *(void *)(a1 + 16) = off_1001269E0;
  *(void *)(a1 + 4sub_100007004((uint64_t)v1 + 8) = *a2;
  uint64_t v12 = a2[1];
  *(void *)(a1 + 56) = v12;
  if (v12)
  {
    unint64_t v13 = (unint64_t *)(v12 + 8);
    do
      unint64_t v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }

  *(void *)(a1 + 64) = *a3;
  uint64_t v15 = a3[1];
  *(void *)(a1 + 72) = v15;
  if (v15)
  {
    unint64_t v16 = (unint64_t *)(v15 + 8);
    do
      unint64_t v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }

  *(void *)(a1 + 80) = 0LL;
  *(void *)(a1 + 8sub_100007004((uint64_t)v1 + 8) = 0LL;
  *(void *)(a1 + 96) = *a4;
  uint64_t v18 = a4[1];
  *(void *)(a1 + 104) = v18;
  if (v18)
  {
    BOOL v19 = (unint64_t *)(v18 + 8);
    do
      unint64_t v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }

  *(void *)(a1 + 112) = *a5;
  uint64_t v21 = a5[1];
  *(void *)(a1 + 120) = v21;
  if (v21)
  {
    size_t v22 = (unint64_t *)(v21 + 8);
    do
      unint64_t v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }

  *(_OWORD *)(a1 + 12sub_100007004((uint64_t)v1 + 8) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 160) = 1065353216;
  *(_OWORD *)(a1 + 16sub_100007004((uint64_t)v1 + 8) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  unint64_t v24 = operator new(0x18uLL);
  *unint64_t v24 = 0LL;
  v24[1] = 0LL;
  v24[2] = 0LL;
  *(void *)(a1 + 216) = v24;
  *(void *)(a1 + 24sub_100007004((uint64_t)v1 + 8) = 0LL;
  *(void *)(a1 + 280) = 0LL;
  return a1;
}

void sub_10002E158( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v18 = v17;
  a9 = (void **)(v10 + 192);
  sub_100030CAC(&a9);
  a9 = v18;
  sub_100030BF4(&a9);
  sub_100030B10(v13);
  sub_100007004(v16);
  sub_100007004(v15);
  sub_100007004(v14);
  sub_100007004(v12);
  sub_100007004(v11);
  sub_100022C54(v9);
  _Unwind_Resume(a1);
}

void sub_10002E1BC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }

  unint64_t v21 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000CF18(&v21, (void *)(a1 + 24));
  unint64_t v7 = operator new(0x18uLL);
  *unint64_t v7 = a1;
  v7[1] = v4;
  v7[2] = v3;
  if (v3)
  {
    uint64_t v8 = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }

  uint64_t v10 = *(dispatch_queue_s **)(a1 + 40);
  unint64_t v11 = v21;
  unint64_t v12 = v22;
  if (v22)
  {
    uint64_t v13 = (unint64_t *)(v22 + 8);
    do
      unint64_t v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }

  uint64_t v15 = operator new(0x18uLL);
  *uint64_t v15 = v7;
  v15[1] = v11;
  void v15[2] = v12;
  dispatch_async_f(v10, v15, (dispatch_function_t)sub_100030D34);
  uint64_t v16 = (std::__shared_weak_count *)v22;
  if (v22)
  {
    unint64_t v17 = (unint64_t *)(v22 + 8);
    do
      unint64_t v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }

  if (v3)
  {
    BOOL v19 = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

void sub_10002E32C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

void sub_10002E33C(uint64_t a1, uint64_t *a2, __int128 *a3, int a4)
{
  int v4 = a4;
  int v6 = *((char *)a3 + 23);
  if (v6 < 0)
  {
    if (*((void *)a3 + 1) != 1LL) {
      goto LABEL_9;
    }
    unint64_t v7 = *(_BYTE **)a3;
  }

  else
  {
    unint64_t v7 = a3;
    if (v6 != 1) {
      goto LABEL_9;
    }
  }

  if (*v7 == 42) {
    int v4 = 2;
  }
  else {
    int v4 = a4;
  }
LABEL_9:
  uint64_t v9 = *a2;
  uint64_t v8 = (std::__shared_weak_count *)a2[1];
  *(void *)&__int128 v25 = a1;
  *((void *)&v25 + 1) = v9;
  unint64_t v26 = v8;
  if (v8)
  {
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      unint64_t v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
    LOBYTE(v6) = *((_BYTE *)a3 + 23);
  }

  if ((v6 & 0x80) != 0)
  {
    sub_10000B8BC(&__p, *(void **)a3, *((void *)a3 + 1));
  }

  else
  {
    __int128 __p = *a3;
    uint64_t v28 = *((void *)a3 + 2);
  }

  int v29 = v4;
  unint64_t v23 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000CF18(&v23, (void *)(a1 + 24));
  unint64_t v12 = (char *)operator new(0x38uLL);
  *(_OWORD *)unint64_t v12 = v25;
  *((void *)v12 + 2) = v26;
  *((void *)&v25 + 1) = 0LL;
  unint64_t v26 = 0LL;
  uint64_t v13 = v12 + 24;
  if (SHIBYTE(v28) < 0)
  {
    sub_10000B8BC(v13, (void *)__p, *((unint64_t *)&__p + 1));
  }

  else
  {
    *(_OWORD *)uint64_t v13 = __p;
    *((void *)v12 + 5) = v28;
  }

  *((_DWORD *)v12 + 12) = v29;
  unint64_t v14 = *(dispatch_queue_s **)(a1 + 40);
  unint64_t v15 = v23;
  unint64_t v16 = v24;
  if (v24)
  {
    unint64_t v17 = (unint64_t *)(v24 + 8);
    do
      unint64_t v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }

  BOOL v19 = operator new(0x18uLL);
  void *v19 = v12;
  v19[1] = v15;
  v19[2] = v16;
  dispatch_async_f(v14, v19, (dispatch_function_t)sub_100030D90);
  unint64_t v20 = (std::__shared_weak_count *)v24;
  if (v24)
  {
    unint64_t v21 = (unint64_t *)(v24 + 8);
    do
      unint64_t v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }

  if (SHIBYTE(v28) < 0) {
    operator delete((void *)__p);
  }
  if (v26) {
    std::__shared_weak_count::__release_weak(v26);
  }
}

void sub_10002E52C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a2)
  {
    unint64_t v15 = *(std::__shared_weak_count **)(v13 + 16);
    if (v15) {
      std::__shared_weak_count::__release_weak(v15);
    }
    sub_1000045D0(exception_object);
  }

  _Unwind_Resume(exception_object);
}

void sub_10002E574(uint64_t a1, uint64_t *a2, __int128 *a3, int a4)
{
}

void sub_10002E57C(uint64_t a1, void *a2, __int128 *a3)
{
  int v4 = (std::__shared_weak_count *)a2[1];
  *(void *)&__int128 v18 = a1;
  *((void *)&v18 + 1) = *a2;
  BOOL v19 = v4;
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      unint64_t v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
  }

  if (*((char *)a3 + 23) < 0)
  {
    sub_10000B8BC(&__p, *(void **)a3, *((void *)a3 + 1));
  }

  else
  {
    __int128 __p = *a3;
    uint64_t v21 = *((void *)a3 + 2);
  }

  unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v23 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000CF18(&v22, (void *)(a1 + 24));
  unint64_t v7 = (char *)operator new(0x30uLL);
  *(_OWORD *)unint64_t v7 = v18;
  *((void *)v7 + 2) = v19;
  uint64_t v8 = v7 + 24;
  if (SHIBYTE(v21) < 0)
  {
    sub_10000B8BC(v8, (void *)__p, *((unint64_t *)&__p + 1));
  }

  else
  {
    *(_OWORD *)uint64_t v8 = __p;
    *((void *)v7 + 5) = v21;
  }

  uint64_t v9 = *(dispatch_queue_s **)(a1 + 40);
  unint64_t v10 = v22;
  unint64_t v11 = v23;
  if (v23)
  {
    unint64_t v12 = (unint64_t *)(v23 + 8);
    do
      unint64_t v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }

  unint64_t v14 = operator new(0x18uLL);
  *unint64_t v14 = v7;
  v14[1] = v10;
  v14[2] = v11;
  dispatch_async_f(v9, v14, (dispatch_function_t)sub_10003A1DC);
  unint64_t v15 = (std::__shared_weak_count *)v23;
  if (v23)
  {
    unint64_t v16 = (unint64_t *)(v23 + 8);
    do
      unint64_t v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

  if (SHIBYTE(v21) < 0) {
    operator delete((void *)__p);
  }
}

void sub_10002E720( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a2)
  {
    unint64_t v13 = *(std::__shared_weak_count **)(v11 + 16);
    if (v13) {
      std::__shared_weak_count::__release_weak(v13);
    }
    sub_1000045D0(exception_object);
  }

  _Unwind_Resume(exception_object);
}

void sub_10002E768(uint64_t a1, void *a2, __int128 *a3)
{
}

void sub_10002E770(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a1 + 24);
  uint64_t v18 = a1;
  int v4 = v19;
  sub_10003A4E8((uint64_t)v19, a2);
  unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000CF18(&v16, v3);
  uint64_t v5 = operator new(0x28uLL);
  void *v5 = v18;
  sub_10003A4E8((uint64_t)(v5 + 1), (uint64_t)v19);
  unint64_t v6 = *(dispatch_queue_s **)(a1 + 40);
  unint64_t v7 = v16;
  unint64_t v8 = v17;
  if (v17)
  {
    uint64_t v9 = (unint64_t *)(v17 + 8);
    do
      unint64_t v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }

  uint64_t v11 = operator new(0x18uLL);
  *uint64_t v11 = v5;
  v11[1] = v7;
  v11[2] = v8;
  dispatch_async_f(v6, v11, (dispatch_function_t)sub_10003A54C);
  unint64_t v12 = (std::__shared_weak_count *)v17;
  if (v17)
  {
    unint64_t v13 = (unint64_t *)(v17 + 8);
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

  if (v20 == v19)
  {
    uint64_t v15 = 4LL;
  }

  else
  {
    if (!v20) {
      return;
    }
    uint64_t v15 = 5LL;
    int v4 = v20;
  }

  (*(void (**)(void *))(*v4 + 8 * v15))(v4);
}

void sub_10002E8C4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

void sub_10002E8D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a1 + 24);
  uint64_t v18 = a1;
  int v4 = v19;
  sub_10003A4E8((uint64_t)v19, a2);
  unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000CF18(&v16, v3);
  uint64_t v5 = operator new(0x28uLL);
  void *v5 = v18;
  sub_10003A4E8((uint64_t)(v5 + 1), (uint64_t)v19);
  unint64_t v6 = *(dispatch_queue_s **)(a1 + 40);
  unint64_t v7 = v16;
  unint64_t v8 = v17;
  if (v17)
  {
    uint64_t v9 = (unint64_t *)(v17 + 8);
    do
      unint64_t v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }

  uint64_t v11 = operator new(0x18uLL);
  *uint64_t v11 = v5;
  v11[1] = v7;
  v11[2] = v8;
  dispatch_async_f(v6, v11, (dispatch_function_t)sub_10003A65C);
  unint64_t v12 = (std::__shared_weak_count *)v17;
  if (v17)
  {
    unint64_t v13 = (unint64_t *)(v17 + 8);
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

  if (v20 == v19)
  {
    uint64_t v15 = 4LL;
  }

  else
  {
    if (!v20) {
      return;
    }
    uint64_t v15 = 5LL;
    int v4 = v20;
  }

  (*(void (**)(void *))(*v4 + 8 * v15))(v4);
}

void sub_10002EA28(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

void sub_10002EA38(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, dispatch_group_s **a4@<X8>)
{
  unint64_t v8 = dispatch_group_create();
  *a4 = v8;
  if (*((char *)a2 + 23) < 0)
  {
    sub_10000B8BC(&__p, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 __p = *a2;
    uint64_t v21 = *((void *)a2 + 2);
  }

  sub_10000C3E4((uint64_t)v22, a3);
  dispatch_group_t group = v8;
  if (v8)
  {
    dispatch_retain(v8);
    dispatch_group_enter(v8);
  }

  unint64_t v25 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000CF18(&v25, (void *)(a1 + 24));
  uint64_t v9 = (char *)operator new(0x38uLL);
  unint64_t v10 = v9;
  *(void *)uint64_t v9 = a1;
  if (SHIBYTE(v21) < 0)
  {
    sub_10000B8BC(v9 + 8, (void *)__p, *((unint64_t *)&__p + 1));
  }

  else
  {
    *(_OWORD *)(v9 + sub_100007004((uint64_t)v1 + 8) = __p;
    *((void *)v9 + 3) = v21;
  }

  sub_10000C3E4((uint64_t)(v10 + 32), (uint64_t)v22);
  unint64_t v11 = v25;
  *((void *)v10 + 6) = group;
  dispatch_group_t group = 0LL;
  unint64_t v12 = *(dispatch_queue_s **)(a1 + 40);
  unint64_t v13 = v26;
  if (v26)
  {
    unint64_t v14 = (unint64_t *)(v26 + 8);
    do
      unint64_t v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }

  unint64_t v16 = operator new(0x18uLL);
  *unint64_t v16 = v10;
  v16[1] = v11;
  v16[2] = v13;
  dispatch_async_f(v12, v16, (dispatch_function_t)sub_10003A6DC);
  unint64_t v17 = (std::__shared_weak_count *)v26;
  if (v26)
  {
    uint64_t v18 = (unint64_t *)(v26 + 8);
    do
      unint64_t v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }

  sub_1000041AC((uint64_t)v22);
  sub_10000425C(&v23, v22[0]);
  if (SHIBYTE(v21) < 0) {
    operator delete((void *)__p);
  }
}

void sub_10002EC3C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (v15) {
    dispatch_release(v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_10002ECA0(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, dispatch_group_s **a4@<X8>)
{
}

void sub_10002ECA8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a1 + 24;
  uint64_t v4 = *a2;
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  v11[0] = a1;
  v11[1] = v4;
  unint64_t v12 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }

  unint64_t v7 = *(dispatch_queue_s **)(a1 + 40);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_10003A9A8;
  block[3] = &unk_1001272E0;
  block[4] = v2;
  block[5] = v11;
  dispatch_sync(v7, block);
  unint64_t v8 = v12;
  if (v12)
  {
    uint64_t v9 = (unint64_t *)&v12->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

void sub_10002ED94(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 24;
  v4[0] = a1;
  v4[1] = a2;
  uint64_t v3 = *(dispatch_queue_s **)(a1 + 40);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_10003A9B4;
  block[3] = &unk_100127300;
  block[4] = v2;
  block[5] = v4;
  dispatch_sync(v3, block);
}

void sub_10002EE20(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }

  unint64_t v21 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000CF18(&v21, (void *)(a1 + 24));
  unint64_t v7 = operator new(0x18uLL);
  *unint64_t v7 = a1;
  v7[1] = v4;
  v7[2] = v3;
  if (v3)
  {
    unint64_t v8 = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }

  unint64_t v10 = *(dispatch_queue_s **)(a1 + 40);
  unint64_t v11 = v21;
  unint64_t v12 = v22;
  if (v22)
  {
    unint64_t v13 = (unint64_t *)(v22 + 8);
    do
      unint64_t v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }

  unint64_t v15 = operator new(0x18uLL);
  *unint64_t v15 = v7;
  v15[1] = v11;
  void v15[2] = v12;
  dispatch_async_f(v10, v15, (dispatch_function_t)sub_10003A9C0);
  unint64_t v16 = (std::__shared_weak_count *)v22;
  if (v22)
  {
    unint64_t v17 = (unint64_t *)(v22 + 8);
    do
      unint64_t v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }

  if (v3)
  {
    unint64_t v19 = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

void sub_10002EF90(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

void sub_10002EFA0(uint64_t a1)
{
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000CF18(&v12, (void *)(a1 + 24));
  uint64_t v2 = operator new(8uLL);
  void *v2 = a1;
  uint64_t v3 = *(dispatch_queue_s **)(a1 + 40);
  unint64_t v4 = v12;
  unint64_t v5 = v13;
  if (v13)
  {
    unint64_t v6 = (unint64_t *)(v13 + 8);
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }

  unint64_t v8 = operator new(0x18uLL);
  *unint64_t v8 = v2;
  v8[1] = v4;
  uint64_t v8[2] = v5;
  dispatch_async_f(v3, v8, (dispatch_function_t)sub_10003AA40);
  unint64_t v9 = (std::__shared_weak_count *)v13;
  if (v13)
  {
    unint64_t v10 = (unint64_t *)(v13 + 8);
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

void sub_10002F098(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

void sub_10002F0A8(uint64_t a1)
{
  uint64_t v1 = (void ***)(a1 + 216);
  uint64_t v2 = (os_log_s *)qword_1001318F8;
  if (*(void *)(a1 + 216))
  {
    if (os_log_type_enabled((os_log_t)qword_1001318F8, OS_LOG_TYPE_ERROR)) {
      sub_1000D7B78(v2, v3, v4, v5, v6, v7, v8, v9);
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1001318F8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v11) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "[EventBroker] event processing paused. Events will be queued.",  (uint8_t *)&v11,  2u);
    }

    unint64_t v10 = (void **)operator new(0x18uLL);
    *unint64_t v10 = 0LL;
    v10[1] = 0LL;
    v10[2] = 0LL;
    unint64_t v11 = 0LL;
    sub_100030AA4(v1, v10);
    sub_100030AA4(&v11, 0LL);
  }

void sub_10002F190(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 216);
  if (v1)
  {
    *(void *)(a1 + 216) = 0LL;
    unint64_t v15 = (void **)v1;
    uint64_t v3 = (os_log_s *)qword_1001318F8;
    if (os_log_type_enabled((os_log_t)qword_1001318F8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = (uint64_t)(*(void *)(v1 + 8) - *(void *)v1) >> 4;
      *(_DWORD *)buf = 134217984;
      uint64_t v17 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "[EventBroker] event processing resumed; %zd events queued.",
        buf,
        0xCu);
    }

    uint64_t v5 = *(uint64_t **)v1;
    uint64_t v6 = *(uint64_t **)(v1 + 8);
    while (v5 != v6)
    {
      sub_10002F2D0(a1, v5);
      v5 += 2;
    }

    sub_100030AA4(&v15, 0LL);
  }

  else
  {
    uint64_t v7 = (os_log_s *)qword_1001318F8;
    if (os_log_type_enabled((os_log_t)qword_1001318F8, OS_LOG_TYPE_ERROR)) {
      sub_1000D7BD8(v7, v8, v9, v10, v11, v12, v13, v14);
    }
  }

void sub_10002F2B0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t sub_10002F2D0(uint64_t a1, uint64_t *a2)
{
  unint64_t v29 = 0xAAAAAAAAAAAAAAAALL;
  sub_1000712D0(&v29, "com.apple.analyticsd.post-event");
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 112) + 16LL))(*(void *)(a1 + 112), a2);
  memset(v28, 170, sizeof(v28));
  sub_10007260C(*a2, v28);
  uint64_t v4 = (uint64_t *)v28[0];
  uint64_t v5 = v28[1];
  while (v4 != (uint64_t *)v5)
  {
    uint64_t v7 = *v4;
    uint64_t v6 = (std::__shared_weak_count *)v4[1];
    uint64_t v26 = *v4;
    uint64_t v27 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        unint64_t v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }

    int v10 = *(char *)(v7 + 39);
    uint64_t v11 = *(unsigned __int8 *)(v7 + 39);
    if (v10 >= 0) {
      uint64_t v12 = *(unsigned __int8 *)(v7 + 39);
    }
    else {
      uint64_t v12 = *(void *)(v7 + 24);
    }
    if (v12)
    {
      uint64_t v13 = 0LL;
      if (v10 >= 0) {
        uint64_t v14 = v7 + 16;
      }
      else {
        uint64_t v14 = *(void *)(v7 + 16);
      }
      uint64_t v15 = v12 - 1;
      uint64_t v16 = v15 + 1;
      while (*(unsigned __int8 *)(v14 + v13) == aComAppleCorean_1[v13])
      {
        if (v16 == ++v13)
        {
          if (v13 == 24)
          {
            uint64_t v17 = (os_log_s *)qword_100131908;
            if (os_log_type_enabled((os_log_t)qword_100131908, OS_LOG_TYPE_DEBUG))
            {
              sub_100006200(v7 + 40, -1, 0x20u, 0LL, 1, buf);
              unint64_t v24 = buf;
              if (v31 < 0) {
                unint64_t v24 = *(_BYTE **)buf;
              }
              *(_DWORD *)uint64_t v32 = 136315394;
              uint64_t v33 = v14;
              __int16 v34 = 2080;
              std::string v35 = v24;
              _os_log_debug_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "%s %s", v32, 0x16u);
              if (v31 < 0) {
                operator delete(*(void **)buf);
              }
              uint64_t v7 = v26;
              uint64_t v11 = *(unsigned __int8 *)(v26 + 39);
            }
          }

          break;
        }
      }
    }

    unint64_t v18 = (void *)(v7 + 16);
    size_t v19 = strlen("com.apple.coreanalytics.heartbeat.2hours");
    if ((v11 & 0x80) != 0)
    {
      if (v19 == *(void *)(v7 + 24))
      {
        if (v19 == -1LL) {
LABEL_44:
        }
          sub_100008DD4();
        unint64_t v18 = (void *)*v18;
        goto LABEL_26;
      }
    }

    else if (v19 == v11)
    {
      if (v19 == -1LL) {
        goto LABEL_44;
      }
LABEL_26:
      if (!memcmp(v18, "com.apple.coreanalytics.heartbeat.2hours", v19))
      {
        unint64_t v20 = (os_log_s *)qword_100131970;
        if (os_log_type_enabled((os_log_t)qword_100131970, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "com.apple.coreanalytics.heartbeat.2hours";
          _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "[EventBroker] Loading event handlers for %{public}s.",  buf,  0xCu);
        }
      }
    }

    (*(void (**)(void, uint64_t *))(**(void **)(a1 + 48) + 16LL))(*(void *)(a1 + 48), &v26);
    if (*(_BYTE *)(v26 + 57) == 1) {
      (*(void (**)(void))(**(void **)(a1 + 64) + 16LL))(*(void *)(a1 + 64));
    }
    sub_10002FD64((void *)a1, (uint64_t)&v26);
    unint64_t v21 = v27;
    if (v27)
    {
      unint64_t v22 = (unint64_t *)&v27->__shared_owners_;
      do
        unint64_t v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }

    v4 += 2;
  }

  *(void *)buf = v28;
  sub_1000100E4((void ***)buf);
  return sub_100071304(&v29);
}

void sub_10002F634( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
}

char *sub_10002F684(uint64_t a1, __int128 *a2)
{
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 80) + 40LL))(*(void *)(a1 + 80)))
  {
    sub_100005064(__p, "scheduled");
    v12[0] = 0;
    uint64_t v13 = 0LL;
    sub_1000041AC((uint64_t)v12);
    sub_1000041AC((uint64_t)v12);
    sub_10002F940(a1, (uint64_t *)__p, (uint64_t)v12, (dispatch_group_t *)&object);
    if (object) {
      dispatch_release(object);
    }
    sub_1000041AC((uint64_t)v12);
    sub_10000425C(&v13, v12[0]);
    if (v16 < 0) {
      operator delete(*(void **)__p);
    }
    sub_10006F2A8();
  }

  uint64_t v4 = *(char ***)(a1 + 216);
  uint64_t v5 = *(void *)a2;
  uint64_t v6 = (void *)(*(void *)a2 + 16LL);
  size_t v7 = strlen("com.apple.coreanalytics.heartbeat.2hours");
  uint64_t v8 = *(unsigned __int8 *)(*(void *)a2 + 39LL);
  if (v4)
  {
    if ((v8 & 0x80) != 0)
    {
      if (v7 == *(void *)(v5 + 24))
      {
        if (v7 == -1LL) {
          goto LABEL_30;
        }
        uint64_t v6 = (void *)*v6;
LABEL_19:
        if (!memcmp(v6, "com.apple.coreanalytics.heartbeat.2hours", v7))
        {
          unint64_t v9 = (os_log_s *)qword_100131970;
          if (os_log_type_enabled((os_log_t)qword_100131970, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__int128 __p = 136446210;
            *(void *)&__p[4] = "com.apple.coreanalytics.heartbeat.2hours";
            _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "[EventBroker] Queuing %{public}s onto the paused event queue.",  __p,  0xCu);
            uint64_t v4 = *(char ***)(a1 + 216);
          }
        }
      }
    }

    else if (v7 == v8)
    {
      if (v7 == -1LL) {
LABEL_30:
      }
        sub_100008DD4();
      goto LABEL_19;
    }

    return sub_10002FBF4(v4, a2);
  }

  if ((v8 & 0x80) != 0)
  {
    if (v7 == *(void *)(v5 + 24))
    {
      if (v7 == -1LL) {
        goto LABEL_31;
      }
      uint64_t v6 = (void *)*v6;
LABEL_26:
      if (!memcmp(v6, "com.apple.coreanalytics.heartbeat.2hours", v7))
      {
        uint64_t v11 = (os_log_s *)qword_100131970;
        if (os_log_type_enabled((os_log_t)qword_100131970, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 __p = 136446210;
          *(void *)&__p[4] = "com.apple.coreanalytics.heartbeat.2hours";
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "[EventBroker] Posting event %{public}s.",  __p,  0xCu);
        }
      }
    }
  }

  else if (v7 == v8)
  {
    if (v7 == -1LL) {
LABEL_31:
    }
      sub_100008DD4();
    goto LABEL_26;
  }

  return (char *)sub_10002F2D0(a1, (uint64_t *)a2);
}

void sub_10002F900( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a2) {
    sub_1000045D0(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10002F940(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, dispatch_group_t *a4@<X8>)
{
  dispatch_group_t v8 = dispatch_group_create();
  *a4 = v8;
  if ((sub_10008A708(*(void *)(a1 + 96)) & 1) == 0)
  {
    uint64_t v12 = qword_1001318F0;
    if (!os_log_type_enabled((os_log_t)qword_1001318F0, OS_LOG_TYPE_INFO)) {
      return;
    }
    LOWORD(__p[0]) = 0;
    int v10 = " *** DAILY ROLLOVER EXPIRATION SKIPPED: daemon restart is in progress";
    uint64_t v11 = (os_log_s *)v12;
    goto LABEL_7;
  }

  unint64_t v9 = (os_log_s *)qword_1001318F0;
  if (*(void *)(a1 + 216))
  {
    if (!os_log_type_enabled((os_log_t)qword_1001318F0, OS_LOG_TYPE_INFO)) {
      return;
    }
    LOWORD(__p[0]) = 0;
    int v10 = " *** DAILY ROLLOVER EXPIRATION SKIPPED: rollover is currently in progress ***";
    uint64_t v11 = v9;
LABEL_7:
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, v10, (uint8_t *)__p, 2u);
    return;
  }

  if (os_log_type_enabled((os_log_t)qword_1001318F0, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  " *** DAILY ROLLOVER EXPIRATION ***",  (uint8_t *)__p,  2u);
    unint64_t v9 = (os_log_s *)qword_1001318F0;
  }

  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = *((char *)a2 + 23);
    uint64_t v14 = (uint64_t *)*a2;
    sub_100006200(a3, -1, 0x20u, 0LL, 1, __p);
    uint64_t v15 = (uint64_t)(v13 >= 0 ? a2 : v14);
    char v16 = v21 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    __int16 v23 = 2080;
    unint64_t v24 = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  " *** Rollover configured with {reason: '%{public}s', options: %s}",  buf,  0x16u);
    if (v21 < 0) {
      operator delete(__p[0]);
    }
  }

  uint64_t v17 = *(void *)(a1 + 248);
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 48LL))(v17);
  }
  sub_10002F0A8(a1);
  (*(void (**)(_BYTE *__return_ptr, void, uint64_t *, uint64_t))(**(void **)(a1 + 80) + 16LL))( buf,  *(void *)(a1 + 80),  a2,  a3);
  if (v8)
  {
    dispatch_retain(v8);
    dispatch_group_enter(v8);
  }

  unint64_t v18 = *(dispatch_queue_s **)(a1 + 40);
  size_t v19 = operator new(0x10uLL);
  void *v19 = a1;
  v19[1] = v8;
  __p[0] = 0LL;
  dispatch_group_notify_f(*(dispatch_group_t *)buf, v18, v19, (dispatch_function_t)sub_10003D140);
  sub_100025588((void **)__p);
  if (*(void *)buf) {
    dispatch_release(*(dispatch_object_t *)buf);
  }
}

void sub_10002FBC4(_Unwind_Exception *exception_object)
{
  if (v1) {
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10002FBF4(char **a1, __int128 *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  size_t v7 = *(char **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v12 = (v7 - *a1) >> 4;
    unint64_t v13 = v12 + 1;
    uint64_t v14 = v5 - (void)*a1;
    if (v14 >> 3 > v13) {
      unint64_t v13 = v14 >> 3;
    }
    else {
      unint64_t v15 = v13;
    }
    uint64_t v32 = v4;
    char v16 = (char *)sub_1000047F4(v4, v15);
    unint64_t v18 = &v16[16 * v12];
    __int128 v19 = *a2;
    *(_OWORD *)unint64_t v18 = *a2;
    if (*((void *)&v19 + 1))
    {
      unint64_t v20 = (unint64_t *)(*((void *)&v19 + 1) + 8LL);
      do
        unint64_t v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }

    __int16 v23 = *a1;
    unint64_t v22 = a1[1];
    if (v22 == *a1)
    {
      int64x2_t v26 = vdupq_n_s64((unint64_t)v22);
      unint64_t v24 = &v16[16 * v12];
    }

    else
    {
      unint64_t v24 = &v16[16 * v12];
      do
      {
        __int128 v25 = *((_OWORD *)v22 - 1);
        v22 -= 16;
        *((_OWORD *)v24 - 1) = v25;
        v24 -= 16;
        *(void *)unint64_t v22 = 0LL;
        *((void *)v22 + 1) = 0LL;
      }

      while (v22 != v23);
      int64x2_t v26 = *(int64x2_t *)a1;
    }

    uint64_t v11 = v18 + 16;
    *a1 = v24;
    a1[1] = v18 + 16;
    int64x2_t v30 = v26;
    uint64_t v27 = a1[2];
    a1[2] = &v16[16 * v17];
    char v31 = v27;
    uint64_t v29 = v26.i64[0];
    sub_10003AAA8((uint64_t)&v29);
  }

  else
  {
    *(void *)size_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    *((void *)v7 + 1) = v8;
    if (v8)
    {
      unint64_t v9 = (unint64_t *)(v8 + 8);
      do
        unint64_t v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }

    uint64_t v11 = v7 + 16;
  }

  a1[1] = v11;
  return v11 - 16;
}

void sub_10002FD64(void *a1, uint64_t a2)
{
  uint64_t v3 = sub_100021A64(a1 + 16, (unsigned __int8 *)(*(void *)a2 + 16LL));
  if (v3)
  {
    uint64_t v4 = *((void *)v3 + 5);
    uint64_t v5 = *((void *)v3 + 6);
    if (v4 != v5)
    {
      int v6 = 0;
      do
      {
        v62[0] = (void *)0xAAAAAAAAAAAAAAAALL;
        size_t v7 = *(std::__shared_weak_count **)(v4 + 8);
        if (v7)
        {
          uint64_t v8 = std::__shared_weak_count::lock(v7);
          v62[1] = v8;
          if (v8)
          {
            unint64_t v9 = v8;
            unint64_t v10 = *(void **)v4;
            v62[0] = v10;
            if (v10)
            {
              (*(void (**)(void *, uint64_t))(*(void *)v10 + 16LL))(v10, a2);
              ++v6;
            }

            p_shared_owners = (unint64_t *)&v9->__shared_owners_;
            do
              unint64_t v12 = __ldaxr(p_shared_owners);
            while (__stlxr(v12 - 1, p_shared_owners));
            if (!v12)
            {
              ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
              std::__shared_weak_count::__release_weak(v9);
            }
          }
        }

        v4 += 16LL;
      }

      while (v4 != v5);
      if (v6)
      {
LABEL_70:
        uint64_t v41 = (os_log_s *)qword_1001318F8;
        if (os_log_type_enabled((os_log_t)qword_1001318F8, OS_LOG_TYPE_DEBUG)) {
          sub_1000D7C38(a2, v6, v41);
        }
        goto LABEL_72;
      }
    }
  }

  uint64_t v13 = a1[21];
  uint64_t v51 = a1[22];
  if (v13 == v51) {
    goto LABEL_72;
  }
  int v50 = 0;
  do
  {
    *(void *)&__int128 v14 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
    __int128 v64 = v14;
    v63[6] = 0xAAAAAAAAAAAAAA00LL;
    v63[3] = 0xAAAAAAAAAAAAAAAALL;
    v63[4] = 0LL;
    v63[5] = 0LL;
    v63[7] = 0LL;
    v63[8] = 0LL;
    LOBYTE(v64) = 0;
    BYTE8(v64) = 0;
    uint64_t v65 = 0LL;
    *(_OWORD *)unsigned __int8 v62 = 0u;
    memset(v63, 0, 25);
    int v15 = *(char *)(*(void *)a2 + 39LL);
    if (v15 >= 0) {
      uint64_t v16 = *(void *)a2 + 16LL;
    }
    else {
      uint64_t v16 = *(void *)(*(void *)a2 + 16LL);
    }
    if (v15 >= 0) {
      uint64_t v17 = *(unsigned __int8 *)(*(void *)a2 + 39LL);
    }
    else {
      uint64_t v17 = *(void *)(*(void *)a2 + 24LL);
    }
    int v18 = sub_10003AAF4(v16, v16 + v17, (uint64_t)v62, v13, 0);
    __int128 v19 = v62[0];
    if (v18 && 0xAAAAAAAAAAAAAAABLL * (((char *)v62[1] - (char *)v62[0]) >> 3) >= 2)
    {
      unint64_t v60 = 0xAAAAAAAAAAAAAAAALL;
      char v61 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
      sub_10000C3E4((uint64_t)&v60, *(void *)a2 + 40LL);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v62[1] - (char *)v62[0]) >> 3) >= 2)
      {
        unint64_t v20 = 1LL;
        do
        {
          sub_100030454(v62, v20, &__p);
          sub_100008E5C((uint64_t)v58, (uint64_t)&__p);
          sub_100005064(&v54, "_extract");
          std::to_string(&v53, v20);
          if ((v53.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            unint64_t v21 = &v53;
          }
          else {
            unint64_t v21 = (std::string *)v53.__r_.__value_.__r.__words[0];
          }
          if ((v53.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type size = v53.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type size = v53.__r_.__value_.__l.__size_;
          }
          __int16 v23 = std::string::append(&v54, (const std::string::value_type *)v21, size);
          __int128 v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
          std::string::size_type cap = v23->__r_.__value_.__l.__cap_;
          __int128 buf = v24;
          v23->__r_.__value_.__l.__size_ = 0LL;
          v23->__r_.__value_.__l.__cap_ = 0LL;
          v23->__r_.__value_.__r.__words[0] = 0LL;
          __int128 v25 = sub_1000304A4((unsigned __int8 *)&v60, (const void **)&buf);
          sub_1000041AC((uint64_t)v58);
          char v26 = *(_BYTE *)v25;
          *(_BYTE *)__int128 v25 = v58[0];
          v58[0] = v26;
          uint64_t v27 = (uint64_t *)v25[1];
          v25[1] = (uint64_t)v59;
          char v59 = v27;
          sub_1000041AC((uint64_t)v25);
          if (SHIBYTE(cap) < 0) {
            operator delete((void *)buf);
          }
          sub_1000041AC((uint64_t)v58);
          sub_10000425C(&v59, v58[0]);
          if (v57 < 0) {
            operator delete(__p);
          }
          ++v20;
        }

        while (v20 < 0xAAAAAAAAAAAAAAABLL * (((char *)v62[1] - (char *)v62[0]) >> 3));
      }

      uint64_t v28 = *(void *)a2;
      sub_100005064(&__p, "value");
      LODWORD(buf) = 0;
      int v29 = sub_10003064C((char *)(v28 + 40), (const void **)&__p, (unsigned int *)&buf);
      if (v57 < 0) {
        operator delete(__p);
      }
      if (v29 >= 1)
      {
        int64x2_t v30 = (os_log_s *)qword_1001318F8;
        if (os_log_type_enabled((os_log_t)qword_1001318F8, OS_LOG_TYPE_DEBUG))
        {
          sub_100006200((uint64_t)&v60, -1, 0x20u, 0LL, 1, &__p);
          p_p = &__p;
          if (v57 < 0) {
            p_p = __p;
          }
          LODWORD(buf) = 136315138;
          *(void *)((char *)&buf + 4) = p_p;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEBUG,  "[EventBroker] matched event %s",  (uint8_t *)&buf,  0xCu);
          if (v57 < 0) {
            operator delete(__p);
          }
        }
      }

      __int128 __p = (void *)0xAAAAAAAAAAAAAAAALL;
      char v31 = *(std::__shared_weak_count **)(v13 + 72);
      if (!v31) {
        goto LABEL_60;
      }
      uint64_t v32 = std::__shared_weak_count::lock(v31);
      uint64_t v56 = v32;
      if (!v32) {
        goto LABEL_60;
      }
      uint64_t v33 = *(void **)(v13 + 64);
      __int128 __p = v33;
      if (v33)
      {
        sub_1000723B4((__int128 *)(*(void *)a2 + 16LL), (uint64_t)&v60, &buf);
        (*(void (**)(void *, __int128 *))(*(void *)v33 + 16LL))(v33, &buf);
        __int16 v34 = (std::__shared_weak_count *)*((void *)&buf + 1);
        if (*((void *)&buf + 1))
        {
          std::string v35 = (unint64_t *)(*((void *)&buf + 1) + 8LL);
          do
            unint64_t v36 = __ldaxr(v35);
          while (__stlxr(v36 - 1, v35));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }

        ++v50;
        char v37 = v56;
        if (!v56) {
          goto LABEL_60;
        }
      }

      else
      {
        char v37 = v32;
      }

      std::exception v38 = (unint64_t *)&v37->__shared_owners_;
      do
        unint64_t v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }

void sub_10003036C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, void *a24, uint64_t a25, int a26, __int16 a27, char a28, char a29, void *a30, uint64_t a31, int a32, __int16 a33, char a34, char a35, char a36, uint64_t a37, char a38, uint64_t a39, void *__p, uint64_t a41)
{
}

void *sub_100030454@<X0>(void *result@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  else {
    uint64_t v3 = *result + 24 * a2;
  }
  if (*(_BYTE *)(v3 + 16)) {
    return sub_100036DD4(a3, *(char **)v3, *(char **)(v3 + 8), *(void *)(v3 + 8) - *(void *)v3);
  }
  *a3 = 0LL;
  a3[1] = 0LL;
  a3[2] = 0LL;
  return result;
}

uint64_t *sub_1000304A4(unsigned __int8 *a1, const void **a2)
{
  int v4 = *a1;
  if (!*a1)
  {
    *a1 = 1;
    uint64_t v5 = operator new(0x18uLL);
    void v5[2] = 0LL;
    v5[1] = 0LL;
    void *v5 = v5 + 1;
    *((void *)a1 + 1) = v5;
    sub_1000041AC((uint64_t)a1);
    int v4 = *a1;
  }

  if (v4 != 1)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    unint64_t v9 = (char *)sub_10000528C((char *)a1);
    sub_100005064(&v12, v9);
    unint64_t v10 = std::string::insert(&v12, 0LL, "cannot use operator[] with a string argument with ");
    __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    std::string::size_type cap = v10->__r_.__value_.__l.__cap_;
    __int128 v13 = v11;
    v10->__r_.__value_.__l.__size_ = 0LL;
    v10->__r_.__value_.__l.__cap_ = 0LL;
    v10->__r_.__value_.__r.__words[0] = 0LL;
    sub_100005128(305, (uint64_t)&v13, exception);
  }

  int v6 = (uint64_t **)*((void *)a1 + 1);
  *(void *)&__int128 v13 = a2;
  return sub_10001DE5C(v6, a2, (uint64_t)&unk_1000F5000, (__int128 **)&v13) + 7;
}

void sub_1000305E4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
}

uint64_t sub_10003064C(char *a1, const void **a2, unsigned int *a3)
{
  if (*a1 != 1)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    unint64_t v10 = (char *)sub_10000528C(a1);
    sub_100005064(v13, v10);
    __int128 v11 = std::string::insert((std::string *)v13, 0LL, "cannot use value() with ");
    __int128 v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    *(void *)&__int128 v16 = v11->__r_.__value_.__l.__cap_;
    __int128 v15 = v12;
    v11->__r_.__value_.__l.__size_ = 0LL;
    v11->__r_.__value_.__l.__cap_ = 0LL;
    v11->__r_.__value_.__r.__words[0] = 0LL;
    sub_100005128(306, (uint64_t)&v15, exception);
  }

  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v15 = v5;
  __int128 v16 = v5;
  sub_10003CED0((uint64_t)a1, a2, (uint64_t)&v15);
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v13[0] = v6;
  v13[1] = v6;
  sub_100008B44(v13, (uint64_t)a1);
  sub_100008AC8((unsigned __int8 **)v13);
  uint64_t v8 = sub_100008924((unsigned __int8 **)&v15);
  LODWORD(v13[0]) = -1431655766;
  sub_10003CFC4(v8, (int *)v13);
  return LODWORD(v13[0]);
}

void sub_1000307A4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
}

void sub_100030810(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100030864(a1);
  operator delete(v1);
}

uint64_t sub_100030824(uint64_t a1)
{
  return sub_100030864(a1 - 8);
}

void sub_10003082C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100030864(a1 - 8);
  operator delete(v1);
}

uint64_t sub_100030844(uint64_t a1)
{
  return sub_100030864(a1 - 16);
}

void sub_10003084C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100030864(a1 - 16);
  operator delete(v1);
}

uint64_t sub_100030864(uint64_t a1)
{
  *(void *)a1 = off_100126960;
  *(void *)(a1 + sub_100007004((uint64_t)v1 + 8) = off_1001269B0;
  *(void *)(a1 + 16) = off_1001269E0;
  uint64_t v2 = (void *)(a1 + 256);
  uint64_t v3 = *(void **)(a1 + 280);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
  }

  else
  {
    if (!v3) {
      goto LABEL_6;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  __int128 v5 = *(void **)(a1 + 248);
  if (v5 == (void *)(a1 + 224))
  {
    uint64_t v6 = 4LL;
    __int128 v5 = (void *)(a1 + 224);
    goto LABEL_10;
  }

  if (v5)
  {
    uint64_t v6 = 5LL;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }

  sub_100030AA4((void ***)(a1 + 216), 0LL);
  uint64_t v8 = (void **)(a1 + 192);
  sub_100030CAC(&v8);
  uint64_t v8 = (void **)(a1 + 168);
  sub_100030BF4(&v8);
  sub_100030B10(a1 + 128);
  sub_100007004(a1 + 112);
  sub_100007004(a1 + 96);
  sub_100007004(a1 + 80);
  sub_100007004(a1 + 64);
  sub_100007004(a1 + 48);
  sub_100022C54(a1 + 24);
  return a1;
}

uint64_t *sub_100030994(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  void *v4 = &off_100126B48;
  v4[1] = 0LL;
  void v4[2] = 0LL;
  v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2) {
    __int128 v5 = (void *)(a2 + 24);
  }
  else {
    __int128 v5 = 0LL;
  }
  sub_10000CCC8((uint64_t)a1, v5, a2);
  return a1;
}

void sub_1000309F0(void *a1)
{
}

void sub_100030A10(_Unwind_Exception *a1)
{
}

void sub_100030A28(std::__shared_weak_count *a1)
{
}

void sub_100030A3C(uint64_t a1)
{
}

uint64_t sub_100030A50(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

uint64_t sub_100030A90(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

void sub_100030AA4(void ***a1, void **a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    uint64_t v3 = v2;
    sub_1000100E4(&v3);
    operator delete(v2);
  }

uint64_t sub_100030B10(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100030B48(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_100030B84((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }

    while (v3);
  }

void sub_100030B84(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 24);
  sub_100030CAC(&v2);
}

void sub_100030BF4(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (std::locale *)**a1;
  if (v2)
  {
    uint64_t v4 = (std::locale *)v1[1];
    __int128 v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 10;
        sub_100030C78((uint64_t)(v1 + 2), v4);
      }

      while (v4 != v2);
      __int128 v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void sub_100030C78(uint64_t a1, std::locale *a2)
{
  locale = (std::__shared_weak_count *)a2[9].__locale_;
  if (locale) {
    std::__shared_weak_count::__release_weak(locale);
  }
  sub_100007004((uint64_t)&a2[5]);
  std::locale::~locale(a2);
}

void sub_100030CAC(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_100030CEC((uint64_t *)v2);
    operator delete(**a1);
  }

void sub_100030CEC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16LL)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  a1[1] = v2;
}

void sub_100030D34(void *a1)
{
  uint64_t v2 = (uint64_t)a1 + 8;
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = (uint64_t *)(*(void *)a1 + 8LL);
  sub_100025178((void *)(**(void **)a1 + 80LL), v4);
  sub_100007004((uint64_t)v4);
  operator delete(v3);
  sub_100007004(v2);
  operator delete(a1);
}

void sub_100030D90(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v15 = v2;
  uint64_t v3 = *(uint64_t **)v2;
  int v4 = *(_DWORD *)(v2 + 48);
  switch(v4)
  {
    case 2:
      __int128 v5 = v3 + 24;
      goto LABEL_8;
    case 1:
      sub_100031C80(&v16, v2 + 24, 0);
      sub_100031C18(&v18, (uint64_t)&v16, (std::locale::__imp **)(v2 + 8));
      unint64_t v6 = v3[22];
      if (v6 >= v3[23])
      {
        uint64_t v8 = sub_1000317FC(v3 + 21, (uint64_t)&v18);
      }

      else
      {
        __n128 v7 = sub_10003179C((uint64_t)(v3 + 21), (uint64_t)&v18);
        uint64_t v8 = v6 + 80;
      }

      v3[22] = v8;
      if (v20) {
        std::__shared_weak_count::__release_weak(v20);
      }
      unint64_t v9 = v19;
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          unint64_t v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v9->__on_zero_shared)(v9, v7);
          std::__shared_weak_count::__release_weak(v9);
        }
      }

      std::locale::~locale(&v18);
      __int128 v12 = v17;
      if (v17)
      {
        __int128 v13 = (unint64_t *)&v17->__shared_owners_;
        do
          unint64_t v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }

      std::locale::~locale(&v16);
      break;
    case 0:
      v18.__locale_ = (std::locale::__imp *)(v2 + 24);
      __int128 v5 = (uint64_t *)(sub_100031190( (uint64_t)(v3 + 16),  (unsigned __int8 *)(v2 + 24),  (uint64_t)&unk_1000F5000,  (__int128 **)&v18)
                     + 40);
LABEL_8:
      sub_100031038(v5, (__int128 *)(v2 + 8));
      break;
  }

  sub_100030FE8(&v15);
  sub_100007004((uint64_t)(a1 + 1));
  operator delete(a1);
}

void sub_100030F48( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::locale a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, std::__shared_weak_count *a27)
{
  if (a27) {
    std::__shared_weak_count::__release_weak(a27);
  }
  sub_1000D7D54(&a18, &a10);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    uint64_t v32 = (os_log_s *)qword_1001318F8;
    if (os_log_type_enabled((os_log_t)qword_1001318F8, OS_LOG_TYPE_ERROR)) {
      sub_1000D7CD0(v28, v29, v32);
    }
    __cxa_end_catch();
    JUMPOUT(0x100030EFCLL);
  }

  sub_100030FE8(&a9);
  sub_100007004((uint64_t)v27 + 8);
  operator delete(v27);
  _Unwind_Resume(a1);
}

uint64_t *sub_100030FE8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0LL;
  if (v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 16);
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    operator delete((void *)v2);
  }

  return a1;
}

void *sub_100031038(uint64_t *a1, __int128 *a2)
{
  unint64_t v6 = a1[2];
  int v4 = a1 + 2;
  unint64_t v5 = v6;
  __n128 v7 = (void *)*(v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v12 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v13 = v12 + 1;
    uint64_t v14 = v5 - *a1;
    if (v14 >> 3 > v13) {
      unint64_t v13 = v14 >> 3;
    }
    else {
      unint64_t v15 = v13;
    }
    v23[4] = v4;
    std::locale v16 = (char *)sub_1000047F4((uint64_t)v4, v15);
    unint64_t v17 = &v16[16 * v12];
    v23[0] = v16;
    v23[1] = v17;
    v23[3] = &v16[16 * v18];
    __int128 v19 = *a2;
    *(_OWORD *)unint64_t v17 = *a2;
    if (*((void *)&v19 + 1))
    {
      unint64_t v20 = (unint64_t *)(*((void *)&v19 + 1) + 16LL);
      do
        unint64_t v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }

    v23[2] = v17 + 16;
    sub_100031574(a1, v23);
    unint64_t v11 = (void *)a1[1];
    sub_10003171C(v23);
  }

  else
  {
    *__n128 v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8)
    {
      unint64_t v9 = (unint64_t *)(v8 + 16);
      do
        unint64_t v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }

    unint64_t v11 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }

  a1[1] = (uint64_t)v11;
  return v11 - 2;
}

void sub_10003117C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

unsigned __int8 *sub_100031190(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  __n128 v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_100021B64(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    char v26 = a4;
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v13 = v8;
      if (v8 >= v10) {
        unint64_t v13 = v8 % v10;
      }
    }

    else
    {
      unint64_t v13 = (v10 - 1) & v8;
    }

    uint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v13);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v9)
        {
          if ((sub_100021BD4(a1 + 32, i + 16, a2) & 1) != 0) {
            return i;
          }
        }

        else
        {
          if (v12 > 1)
          {
            if (v16 >= v10) {
              v16 %= v10;
            }
          }

          else
          {
            v16 &= v10 - 1;
          }

          if (v16 != v13) {
            break;
          }
        }
      }
    }

    a4 = v26;
  }

  else
  {
    unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  }

  memset(v27, 170, sizeof(v27));
  sub_100031484(a1, v9, a4, v27);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v18 = *(float *)(a1 + 32);
  if ((((float)(v18 * (float)v10) >= v17) & ~(v10 == 0)) == 0)
  {
    BOOL v19 = 1LL;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_10002246C(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v13 = v9 % v10;
      }
      else {
        unint64_t v13 = v9;
      }
    }

    else
    {
      unint64_t v13 = (v10 - 1) & v9;
    }
  }

  __int16 v23 = *(void **)(*(void *)a1 + 8 * v13);
  if (v23)
  {
    *(void *)v27[0] = *v23;
    *__int16 v23 = v27[0];
  }

  else
  {
    *(void *)v27[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27[0];
    *(void *)(*(void *)a1 + 8 * v13) = a1 + 16;
    if (*(void *)v27[0])
    {
      unint64_t v24 = *(void *)(*(void *)v27[0] + 8LL);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v24 >= v10) {
          v24 %= v10;
        }
      }

      else
      {
        v24 &= v10 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v24) = v27[0];
    }
  }

  uint64_t i = (unsigned __int8 *)v27[0];
  v27[0] = 0LL;
  ++*v7;
  sub_100031530((uint64_t)v27, 0LL);
  return i;
}

void sub_100031464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

_BYTE *sub_100031484@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, void *a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  memset(a4, 170, 24);
  unint64_t v8 = operator new(0x40uLL);
  *a4 = v8;
  a4[1] = v7;
  *((_BYTE *)a4 + 16) = 0;
  *unint64_t v8 = 0LL;
  v8[1] = a2;
  uint64_t result = v8 + 2;
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    uint64_t result = sub_10000B8BC(result, *(void **)v10, *((void *)v10 + 1));
  }

  else
  {
    __int128 v11 = *v10;
    v8[4] = *((void *)v10 + 2);
    *(_OWORD *)uint64_t result = v11;
  }

  v8[5] = 0LL;
  void v8[6] = 0LL;
  v8[7] = 0LL;
  *((_BYTE *)a4 + 16) = 1;
  return result;
}

void sub_100031518(_Unwind_Exception *a1)
{
}

void sub_100031530(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_100030B84((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }

uint64_t sub_100031574(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1000315E8((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1000315E8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v13 = a6;
  *((void *)&v13 + 1) = a7;
  __int128 v12 = v13;
  v14[0] = a1;
  v14[1] = &v12;
  v14[2] = &v13;
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }

  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      __int128 v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0LL;
      a3[1] = 0LL;
      *((void *)&v13 + 1) = v8;
      v7 -= 16LL;
      --v8;
    }

    while (a3 != a5);
    uint64_t v10 = v13;
  }

  LOBYTE(v15) = 1;
  sub_1000316A8((uint64_t)v14);
  return v10;
}

uint64_t sub_1000316A8(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_1000316DC(a1);
  }
  return a1;
}

void sub_1000316DC(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8LL);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8LL);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    v1 += 16LL;
  }

void **sub_10003171C(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_10003174C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 16;
    int v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_weak(v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }

    else
    {
      v1 -= 16LL;
    }
  }

__n128 sub_10003179C(uint64_t a1, uint64_t a2)
{
  int v4 = std::locale::locale(*(std::locale **)(a1 + 8), (const std::locale *)a2);
  *(_OWORD *)&v4[1].__locale_ = *(_OWORD *)(a2 + 8);
  *(_OWORD *)&v4[3].__locale_ = *(_OWORD *)(a2 + 24);
  *(_OWORD *)&v4[5].__locale_ = *(_OWORD *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  *(void *)(a2 + 4sub_100007004((uint64_t)v1 + 8) = 0LL;
  __n128 result = *(__n128 *)(a2 + 56);
  *(__n128 *)&v4[7].__locale_ = result;
  v4[9].__locale_ = *(std::locale::__imp **)(a2 + 72);
  *(void *)(a2 + 64) = 0LL;
  *(void *)(a2 + 72) = 0LL;
  *(void *)(a1 + sub_100007004((uint64_t)v1 + 8) = v4 + 10;
  return result;
}

uint64_t sub_1000317FC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x333333333333333LL) {
    sub_1000046F8();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x199999999999999LL) {
    unint64_t v9 = 0x333333333333333LL;
  }
  else {
    unint64_t v9 = v5;
  }
  float v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_1000319D4(v7, v9);
  }
  else {
    uint64_t v10 = 0LL;
  }
  unint64_t v15 = 0LL;
  __int128 v11 = &v10[80 * v4];
  v14[0] = v10;
  v14[1] = v11;
  unint64_t v16 = &v10[80 * v9];
  std::locale::locale((std::locale *)v11, (const std::locale *)a2);
  *(_OWORD *)(v11 + sub_100007004((uint64_t)v1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(v11 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  *(void *)(a2 + 4sub_100007004((uint64_t)v1 + 8) = 0LL;
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(a2 + 56);
  *((void *)v11 + 9) = *(void *)(a2 + 72);
  *(void *)(a2 + 64) = 0LL;
  *(void *)(a2 + 72) = 0LL;
  unint64_t v15 = v11 + 80;
  sub_100031960(a1, v14);
  uint64_t v12 = a1[1];
  sub_100031BA4(v14);
  return v12;
}

void sub_10003194C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t sub_100031960(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100031A18((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1000319D4(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334LL) {
    sub_100004828();
  }
  return operator new(80 * a2);
}

uint64_t sub_100031A18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v13 = a6;
  *((void *)&v13 + 1) = a7;
  __int128 v12 = v13;
  v14[0] = a1;
  v14[1] = &v12;
  v14[2] = &v13;
  unint64_t v15 = 0xAAAAAAAAAAAAAA00LL;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }

  else
  {
    uint64_t v9 = a3;
    do
    {
      std::locale::locale((std::locale *)(v7 - 80), (const std::locale *)(v9 - 80));
      *(_OWORD *)(v7 - 72) = *(_OWORD *)(v9 - 72);
      *(_OWORD *)(v7 - 56) = *(_OWORD *)(v9 - 56);
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(v9 - 40);
      *(void *)(v9 - 40) = 0LL;
      *(void *)(v9 - 32) = 0LL;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(v9 - 24);
      *(void *)(v7 - sub_100007004((uint64_t)v1 + 8) = *(void *)(v9 - 8);
      *(void *)(v9 - 16) = 0LL;
      *(void *)(v9 - sub_100007004((uint64_t)v1 + 8) = 0LL;
      uint64_t v7 = *((void *)&v13 + 1) - 80LL;
      *((void *)&v13 + 1) -= 80LL;
      v9 -= 80LL;
    }

    while (v9 != a5);
    uint64_t v10 = v13;
  }

  LOBYTE(v15) = 1;
  sub_100031B20((uint64_t)v14);
  return v10;
}

uint64_t sub_100031B20(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_100031B54((uint64_t *)a1);
  }
  return a1;
}

void sub_100031B54(uint64_t *a1)
{
  uint64_t v1 = *(std::locale **)(a1[2] + 8);
  uint64_t v2 = *(std::locale **)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_100030C78(v3, v1);
      v1 += 10;
    }

    while (v1 != v2);
  }

void **sub_100031BA4(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_100031BD4(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 80;
    sub_100030C78(v4, (std::locale *)(i - 80));
  }

std::locale *sub_100031C18(std::locale *a1, uint64_t a2, std::locale::__imp **a3)
{
  uint64_t result = std::locale::locale(a1, (const std::locale *)a2);
  *(_OWORD *)&result[1].__locale_ = *(_OWORD *)(a2 + 8);
  *(_OWORD *)&result[3].__locale_ = *(_OWORD *)(a2 + 24);
  *(_OWORD *)&result[5].__locale_ = *(_OWORD *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  *(void *)(a2 + 4sub_100007004((uint64_t)v1 + 8) = 0LL;
  uint64_t v7 = *a3;
  uint64_t v6 = (unint64_t *)a3[1];
  result[7].__locale_ = *(std::locale::__imp **)(a2 + 56);
  result[8].__locale_ = v7;
  result[9].__locale_ = (std::locale::__imp *)v6;
  if (v6)
  {
    uint64_t v8 = v6 + 2;
    do
      unint64_t v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }

  return result;
}

std::locale *sub_100031C80(std::locale *a1, uint64_t a2, int a3)
{
  uint64_t v6 = sub_100031D18(a1);
  LODWORD(v6[3].__locale_) = a3;
  *(_OWORD *)((char *)&v6[3].__locale_ + 4) = 0u;
  *(_OWORD *)((char *)&v6[5].__locale_ + 4) = 0u;
  HIDWORD(v6[7].__locale_) = 0;
  uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  if ((v7 & 0x80u) == 0LL) {
    uint64_t v8 = (char *)a2;
  }
  else {
    uint64_t v8 = *(char **)a2;
  }
  if ((v7 & 0x80u) != 0LL) {
    uint64_t v7 = *(void *)(a2 + 8);
  }
  return a1;
}

void sub_100031CFC(_Unwind_Exception *a1)
{
}

std::locale *sub_100031D18(std::locale *a1)
{
  uint64_t v2 = std::locale::locale(a1);
  a1[1].__locale_ = (std::locale::__imp *)std::locale::use_facet(v2, &std::ctype<char>::id);
  a1[2].__locale_ = (std::locale::__imp *)std::locale::use_facet(a1, &std::collate<char>::id);
  return a1;
}

void sub_100031D60(_Unwind_Exception *a1)
{
}

char *sub_100031D74(uint64_t a1, char *a2, char *a3)
{
  uint64_t v6 = operator new(8uLL);
  *uint64_t v6 = &off_100126BA8;
  uint64_t v7 = operator new(0x10uLL);
  *uint64_t v7 = &off_100126C78;
  v7[1] = v6;
  sub_100031F10((void *)(a1 + 40), (uint64_t)v7);
  *(void *)(a1 + 56) = *(void *)(a1 + 40);
  unsigned int v8 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v8 > 0x3F)
  {
    switch(v8)
    {
      case 0x40u:
        return sub_1000321D8(a1, a2, a3);
      case 0x80u:
        return (char *)sub_100032278(a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
      case 0x100u:
        return sub_1000323A8(a1, a2, a3);
      default:
        goto LABEL_14;
    }
  }

  else if (v8)
  {
    if (v8 != 16)
    {
      if (v8 != 32) {
LABEL_14:
      }
        sub_1000324D8();
      return sub_1000321D8(a1, a2, a3);
    }

    return sub_1000320AC(a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
  }

  else
  {
    return sub_100031FAC(a1, (unsigned __int8 *)a2, a3);
  }

void sub_100031EA8(_Unwind_Exception *a1)
{
}

void sub_100031EC4()
{
  exceptiouint64_t n = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, __re_err_parse);
}

void sub_100031EFC(_Unwind_Exception *a1)
{
}

void sub_100031F10(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  __int128 v4 = v7;
  *(void *)&__int128 v7 = *a1;
  *((void *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

char *sub_100031FAC(uint64_t a1, unsigned __int8 *a2, char *a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  __int128 v7 = sub_10003273C(a1, a2, a3);
  if (v7 == a2)
  {
    unsigned int v8 = operator new(0x10uLL);
    uint64_t v9 = *(void *)(a1 + 56);
    uint64_t v10 = *(void *)(v9 + 8);
    *unsigned int v8 = &off_100126C78;
    v8[1] = v10;
    *(void *)(v9 + sub_100007004((uint64_t)v1 + 8) = v8;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8LL);
  }

  while (*v7 == 124)
  {
    uint64_t v11 = *(void *)(a1 + 56);
    __int128 v12 = v7 + 1;
    __int128 v7 = sub_10003273C(a1, v7 + 1, a3);
    if (v12 == v7)
    {
      __int128 v13 = operator new(0x10uLL);
      uint64_t v14 = *(void *)(a1 + 56);
      uint64_t v15 = *(void *)(v14 + 8);
      void *v13 = &off_100126C78;
      v13[1] = v15;
      *(void *)(v14 + sub_100007004((uint64_t)v1 + 8) = v13;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8LL);
    }

    sub_100032784(a1, v6, v11);
  }

  return (char *)v7;
}

char *sub_1000320AC(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return (char *)a2;
  }
  __int128 v4 = (char *)a3;
  if (*a2 == 94)
  {
    uint64_t v6 = operator new(0x18uLL);
    BOOL v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v8 = *(void *)(a1 + 56);
    uint64_t v9 = *(void *)(v8 + 8);
    *uint64_t v6 = &off_100126D20;
    v6[1] = v9;
    *((_BYTE *)v6 + 16) = v7;
    *(void *)(v8 + sub_100007004((uint64_t)v1 + 8) = v6;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8LL);
    ++v3;
  }

  if (v3 != (unsigned __int8 *)v4)
  {
    do
    {
      uint64_t v10 = v3;
      uint64_t v3 = sub_1000397E4(a1, (uint64_t)v3, v4);
    }

    while (v10 != v3);
    if (v10 != v4)
    {
      if (v10 + 1 != v4 || *v10 != 36) {
        sub_100039798();
      }
      uint64_t v11 = operator new(0x18uLL);
      BOOL v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      uint64_t v13 = *(void *)(a1 + 56);
      uint64_t v14 = *(void *)(v13 + 8);
      *uint64_t v11 = &off_100126D68;
      v11[1] = v14;
      *((_BYTE *)v11 + 16) = v12;
      *(void *)(v13 + sub_100007004((uint64_t)v1 + 8) = v11;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8LL);
    }
  }

  return v4;
}

char *sub_1000321D8(uint64_t a1, char *a2, char *a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  BOOL v7 = sub_100039DEC(a1, a2, a3);
  if (v7 == (unsigned __int8 *)a2) {
LABEL_9:
  }
    sub_100039798();
  uint64_t v8 = v7;
  while (v8 != (unsigned __int8 *)a3)
  {
    if (*v8 != 124) {
      return (char *)v8;
    }
    uint64_t v9 = *(void *)(a1 + 56);
    uint64_t v10 = sub_100039DEC(a1, (char *)v8 + 1, a3);
    if (v8 + 1 == v10) {
      goto LABEL_9;
    }
    uint64_t v8 = v10;
    sub_100032784(a1, v6, v9);
  }

  return a3;
}

unsigned __int8 *sub_100032278(uint64_t a1, unsigned __int8 *__s, unsigned __int8 *a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  BOOL v7 = (unsigned __int8 *)memchr(__s, 10, a3 - __s);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = a3;
  }
  if (v8 == __s)
  {
    uint64_t v9 = operator new(0x10uLL);
    uint64_t v10 = *(void *)(v6 + 8);
    *uint64_t v9 = &off_100126C78;
    v9[1] = v10;
    *(void *)(v6 + sub_100007004((uint64_t)v1 + 8) = v9;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8LL);
  }

  else
  {
    sub_1000320AC(a1, __s, v8);
  }

  if (v8 != a3) {
    ++v8;
  }
  while (v8 != a3)
  {
    uint64_t v11 = (unsigned __int8 *)memchr(v8, 10, a3 - v8);
    if (v11) {
      BOOL v12 = v11;
    }
    else {
      BOOL v12 = a3;
    }
    uint64_t v13 = *(void *)(a1 + 56);
    if (v12 == v8)
    {
      uint64_t v14 = operator new(0x10uLL);
      uint64_t v15 = *(void *)(v13 + 8);
      *uint64_t v14 = &off_100126C78;
      v14[1] = v15;
      *(void *)(v13 + sub_100007004((uint64_t)v1 + 8) = v14;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8LL);
    }

    else
    {
      sub_1000320AC(a1, v8, v12);
    }

    sub_100032784(a1, v6, v13);
    if (v12 == a3) {
      uint64_t v8 = v12;
    }
    else {
      uint64_t v8 = v12 + 1;
    }
  }

  return a3;
}

char *sub_1000323A8(uint64_t a1, char *__s, char *a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  BOOL v7 = (char *)memchr(__s, 10, a3 - __s);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = a3;
  }
  if (v8 == __s)
  {
    uint64_t v9 = operator new(0x10uLL);
    uint64_t v10 = *(void *)(v6 + 8);
    *uint64_t v9 = &off_100126C78;
    v9[1] = v10;
    *(void *)(v6 + sub_100007004((uint64_t)v1 + 8) = v9;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8LL);
  }

  else
  {
    sub_1000321D8(a1, __s, v8);
  }

  if (v8 != a3) {
    ++v8;
  }
  while (v8 != a3)
  {
    uint64_t v11 = (char *)memchr(v8, 10, a3 - v8);
    if (v11) {
      BOOL v12 = v11;
    }
    else {
      BOOL v12 = a3;
    }
    uint64_t v13 = *(void *)(a1 + 56);
    if (v12 == v8)
    {
      uint64_t v14 = operator new(0x10uLL);
      uint64_t v15 = *(void *)(v13 + 8);
      *uint64_t v14 = &off_100126C78;
      v14[1] = v15;
      *(void *)(v13 + sub_100007004((uint64_t)v1 + 8) = v14;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8LL);
    }

    else
    {
      sub_1000321D8(a1, v8, v12);
    }

    sub_100032784(a1, v6, v13);
    if (v12 == a3) {
      uint64_t v8 = v12;
    }
    else {
      uint64_t v8 = v12 + 1;
    }
  }

  return a3;
}

void sub_1000324D8()
{
  exceptiouint64_t n = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, __re_err_grammar);
}

void sub_100032510(_Unwind_Exception *a1)
{
}

void sub_10003252C(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

void *sub_100032540(void *a1, uint64_t a2)
{
  *a1 = a2;
  __int128 v4 = operator new(0x20uLL);
  void *v4 = &off_100126C00;
  v4[1] = 0LL;
  void v4[2] = 0LL;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_100032588(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000325AC(std::__shared_weak_count *a1)
{
}

uint64_t sub_1000325C0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

uint64_t sub_1000325D8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

void *sub_100032618(void *a1)
{
  *a1 = &off_100126CF0;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  return a1;
}

void sub_10003265C(void *__p)
{
  *__int128 __p = &off_100126CF0;
  uint64_t v2 = __p[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  operator delete(__p);
}

uint64_t sub_1000326A0(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void *sub_1000326B4(void *a1)
{
  *a1 = &off_100126CF0;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  return a1;
}

void sub_1000326F8(void *__p)
{
  *__int128 __p = &off_100126CF0;
  uint64_t v2 = __p[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  operator delete(__p);
}

unsigned __int8 *sub_10003273C(uint64_t a1, unsigned __int8 *a2, char *a3)
{
  do
  {
    uint64_t v5 = a2;
    a2 = sub_100032834(a1, (char *)a2, a3);
  }

  while (v5 != a2);
  return v5;
}

void *sub_100032784(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = operator new(0x18uLL);
  uint64_t v7 = *(void *)(a3 + 8);
  v6[1] = *(void *)(a2 + 8);
  void v6[2] = v7;
  *uint64_t v6 = &off_1001271E8;
  *(void *)(a2 + sub_100007004((uint64_t)v1 + 8) = v6;
  *(void *)(a3 + sub_100007004((uint64_t)v1 + 8) = 0LL;
  uint64_t v8 = operator new(0x10uLL);
  uint64_t v9 = *(void *)(*(void *)(a1 + 56) + 8LL);
  *uint64_t v8 = &off_100126C78;
  v8[1] = v9;
  *(void *)(a3 + sub_100007004((uint64_t)v1 + 8) = v8;
  *(void *)(*(void *)(a1 + 56) + 8LL) = 0LL;
  uint64_t result = operator new(0x10uLL);
  uint64_t v11 = *(void *)(a3 + 8);
  *uint64_t result = &off_100127230;
  result[1] = v11;
  *(void *)(*(void *)(a1 + 56) + 8LL) = result;
  *(void *)(a1 + 56) = *(void *)(a3 + 8);
  return result;
}

unsigned __int8 *sub_100032834(uint64_t a1, char *a2, char *a3)
{
  uint64_t result = (unsigned __int8 *)sub_1000328C8(a1, a2, a3);
  if (result == (unsigned __int8 *)a2)
  {
    uint64_t v7 = *(void *)(a1 + 56);
    int v8 = *(_DWORD *)(a1 + 28);
    uint64_t v9 = sub_100032BA4(a1, (unsigned __int8 *)a2, a3);
    uint64_t result = (unsigned __int8 *)a2;
  }

  return result;
}

char *sub_1000328C8(uint64_t a1, char *a2, char *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  int v6 = *a2;
  if (v6 <= 91)
  {
    if (v6 != 36)
    {
      if (v6 == 40 && a2 + 1 != a3 && a2[1] == 63 && a2 + 2 != a3)
      {
        int v7 = a2[2];
        if (v7 == 33)
        {
          *(void *)&__int128 v19 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v22[1] = v19;
          v22[2] = v19;
          __int128 v21 = v19;
          v22[0] = v19;
          sub_100031D18((std::locale *)&v21);
          memset((char *)v22 + 8, 0, 40);
          DWORD2(v22[0]) = *(_DWORD *)(a1 + 24);
          uint64_t v9 = (char *)sub_100031D74(&v21, v3 + 3, a3);
          int v20 = HIDWORD(v22[0]);
          sub_10003312C(a1, (uint64_t)&v21, 1, *(_DWORD *)(a1 + 28));
          *(_DWORD *)(a1 + 28) += v20;
          if (v9 == a3 || *v9 != 41) {
            sub_1000331B0();
          }
          goto LABEL_27;
        }

        if (v7 == 61)
        {
          *(void *)&__int128 v8 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v22[1] = v8;
          v22[2] = v8;
          __int128 v21 = v8;
          v22[0] = v8;
          sub_100031D18((std::locale *)&v21);
          memset((char *)v22 + 8, 0, 40);
          DWORD2(v22[0]) = *(_DWORD *)(a1 + 24);
          uint64_t v9 = (char *)sub_100031D74(&v21, v3 + 3, a3);
          int v10 = HIDWORD(v22[0]);
          sub_10003312C(a1, (uint64_t)&v21, 0, *(_DWORD *)(a1 + 28));
          *(_DWORD *)(a1 + 28) += v10;
          if (v9 == a3 || *v9 != 41) {
            sub_1000331B0();
          }
LABEL_27:
          uint64_t v3 = v9 + 1;
          sub_100007004((uint64_t)&v22[1] + 8);
          std::locale::~locale((std::locale *)&v21);
          return v3;
        }
      }

      return v3;
    }

    uint64_t v11 = operator new(0x18uLL);
    BOOL v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v13 = *(void *)(a1 + 56);
    uint64_t v14 = *(void *)(v13 + 8);
LABEL_17:
    *uint64_t v11 = v15 + 2;
    v11[1] = v14;
    *((_BYTE *)v11 + 16) = v12;
    *(void *)(v13 + sub_100007004((uint64_t)v1 + 8) = v11;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8LL);
    return ++v3;
  }

  if (v6 != 92)
  {
    if (v6 != 94) {
      return v3;
    }
    uint64_t v11 = operator new(0x18uLL);
    BOOL v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v13 = *(void *)(a1 + 56);
    uint64_t v14 = *(void *)(v13 + 8);
    goto LABEL_17;
  }

  if (a2 + 1 != a3)
  {
    int v17 = a2[1];
    if (v17 == 66)
    {
      char v18 = 1;
    }

    else
    {
      if (v17 != 98) {
        return v3;
      }
      char v18 = 0;
    }

    sub_1000330B8(a1, v18);
    v3 += 2;
  }

  return v3;
}

void sub_100032B70( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
}

unsigned __int8 *sub_100032BA4(uint64_t a1, unsigned __int8 *a2, char *a3)
{
  uint64_t v3 = a2;
  if (a2 != (unsigned __int8 *)a3)
  {
    int v6 = (char)*a2;
    if (v6 <= 62)
    {
      if (v6 == 40)
      {
        uint64_t v11 = a2 + 1;
        if (a2 + 1 != (unsigned __int8 *)a3)
        {
          if (a2 + 2 != (unsigned __int8 *)a3 && *v11 == 63 && a2[2] == 58)
          {
            ++*(_DWORD *)(a1 + 36);
            BOOL v12 = (char *)sub_100031FAC(a1, a2 + 3, a3);
            if (v12 != a3 && *v12 == 41)
            {
              --*(_DWORD *)(a1 + 36);
              return (unsigned __int8 *)(v12 + 1);
            }
          }

          else
          {
            sub_100034A7C((void *)a1);
            int v13 = *(_DWORD *)(a1 + 28);
            ++*(_DWORD *)(a1 + 36);
            uint64_t v14 = (char *)sub_100031FAC(a1, v11, a3);
            if (v14 != a3)
            {
              uint64_t v15 = v14;
              if (*v14 == 41)
              {
                sub_100034AE0((void *)a1, v13);
                --*(_DWORD *)(a1 + 36);
                return (unsigned __int8 *)(v15 + 1);
              }
            }
          }
        }

        sub_1000331B0();
      }

      if (v6 == 46)
      {
        int v7 = operator new(0x10uLL);
        uint64_t v8 = *(void *)(a1 + 56);
        uint64_t v9 = *(void *)(v8 + 8);
        *int v7 = &off_100126E40;
        v7[1] = v9;
        *(void *)(v8 + sub_100007004((uint64_t)v1 + 8) = v7;
        *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8LL);
        return ++v3;
      }

LABEL_28:
      sub_100034B3C();
    }

    if (v6 > 91)
    {
      if (v6 == 92) {
        return sub_1000348CC(a1, a2, (unsigned __int8 *)a3);
      }
      if (v6 == 123) {
        goto LABEL_28;
      }
    }

    else
    {
      if (v6 == 91) {
        return (unsigned __int8 *)sub_10003496C(a1, (char *)a2, a3);
      }
      if (v6 == 63) {
        goto LABEL_28;
      }
    }

    return sub_100034B88(a1, a2, a3);
  }

  return v3;
}

  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return v7 + 2;
}

  sub_100040F68((uint64_t)&v12);
LABEL_29:
  sub_100041140((uint64_t)&v12);
  return 0LL;
}

  return v7;
}

  sub_100040F68((uint64_t)&v12);
LABEL_29:
  sub_100041140((uint64_t)&v12);
  return 0LL;
}

unsigned __int8 *sub_100032D7C( uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, int a5, int a6)
{
  if (a2 == a3) {
    return a2;
  }
  int v6 = a6;
  int v7 = a5;
  uint64_t v10 = a1;
  int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  int v12 = (char)*a2;
  if (v12 > 62)
  {
    if (v12 == 63)
    {
      int v13 = a2 + 1;
      if (v11) {
        BOOL v20 = 1;
      }
      else {
        BOOL v20 = v13 == a3;
      }
      if (!v20 && *v13 == 63)
      {
        int v13 = a2 + 2;
        uint64_t v14 = 0LL;
        uint64_t v18 = 1LL;
        goto LABEL_33;
      }

      uint64_t v14 = 0LL;
      uint64_t v18 = 1LL;
      goto LABEL_45;
    }

    int v13 = a2;
    if (v12 != 123) {
      return v13;
    }
    int v28 = -1431655766;
    uint64_t v15 = a2 + 1;
    unint64_t v16 = sub_10003920C(a1, a2 + 1, a3, &v28);
    if (v15 != v16)
    {
      if (v16 != a3)
      {
        int v17 = (char)*v16;
        if (v17 != 44)
        {
          if (v17 == 125)
          {
            int v13 = v16 + 1;
            if (!v11 && v13 != a3 && *v13 == 63)
            {
              int v13 = v16 + 2;
              uint64_t v14 = v28;
              a5 = v7;
              a6 = v6;
              a1 = v10;
              uint64_t v18 = v28;
LABEL_33:
              uint64_t v21 = a4;
              char v22 = 0;
LABEL_46:
              sub_1000390D8(a1, v14, v18, v21, a5, a6, v22);
              return v13;
            }

            uint64_t v14 = v28;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            uint64_t v18 = v28;
LABEL_45:
            uint64_t v21 = a4;
            char v22 = 1;
            goto LABEL_46;
          }

          goto LABEL_58;
        }

        __int16 v23 = v16 + 1;
        if (v16 + 1 == a3) {
          goto LABEL_58;
        }
        if (*v23 == 125)
        {
          int v13 = v16 + 2;
          if (!v11 && v13 != a3 && *v13 == 63)
          {
            int v13 = v16 + 3;
            uint64_t v14 = v28;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            goto LABEL_26;
          }

          uint64_t v14 = v28;
          a5 = v7;
          a6 = v6;
          a1 = v10;
LABEL_36:
          uint64_t v18 = -1LL;
          goto LABEL_45;
        }

        int v27 = -1;
        __int128 v25 = sub_10003920C(v10, v23, a3, &v27);
        if (v23 != v25 && v25 != a3 && *v25 == 125)
        {
          uint64_t v18 = v27;
          uint64_t v14 = v28;
          if (v27 >= v28)
          {
            int v13 = v25 + 1;
            char v22 = 1;
            if (!v11 && v13 != a3)
            {
              int v26 = v25[1];
              char v22 = v26 != 63;
              if (v26 == 63) {
                int v13 = v25 + 2;
              }
            }

            a5 = v7;
            a6 = v6;
            a1 = v10;
            uint64_t v21 = a4;
            goto LABEL_46;
          }

          goto LABEL_58;
        }
      }

      sub_1000392F4();
    }

LABEL_58:
    sub_1000392A8();
  }

  if (v12 == 42)
  {
    int v13 = a2 + 1;
    if (v11) {
      BOOL v19 = 1;
    }
    else {
      BOOL v19 = v13 == a3;
    }
    if (!v19 && *v13 == 63)
    {
      int v13 = a2 + 2;
      uint64_t v14 = 0LL;
      goto LABEL_26;
    }

    uint64_t v14 = 0LL;
    goto LABEL_36;
  }

  int v13 = a2;
  if (v12 == 43)
  {
    int v13 = a2 + 1;
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      int v13 = a2 + 2;
      uint64_t v14 = 1LL;
LABEL_26:
      uint64_t v18 = -1LL;
      goto LABEL_33;
    }

    uint64_t v14 = 1LL;
    goto LABEL_36;
  }

  return v13;
}

          uint64_t v56 = "builtOnDate";
          char v55 = 0xAAAAAAAAAAAAAAAALL;
          *(void *)&__int128 v25 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v25 + 1) = 0xAAAAAAAAAAAAAAAALL;
          __int128 __dst = v25;
          std::string v54 = v25;
          sub_100008780((uint64_t)&v43, &v56, (uint64_t)&__dst);
          uint64_t v48 = (unsigned __int8 *)&v43;
          unint64_t v49 = 0LL;
          int v50 = 0LL;
          uint64_t v51 = 0LL;
          char v52 = 0x8000000000000000LL;
          sub_100008AC8(&v48);
          if (sub_1000087E8((unsigned __int8 **)&__dst, &v48))
          {
            int v26 = sub_10009AE9C();
            if (!v26) {
              goto LABEL_64;
            }
          }

          else
          {
            int v26 = (uint64_t)sub_100008924((unsigned __int8 **)&__dst);
          }

          if (*(_BYTE *)v26 == 3)
          {
            int v27 = *(__int128 **)(v26 + 8);
            goto LABEL_65;
          }

__n128 sub_1000330B8(uint64_t a1, char a2)
{
  __int128 v4 = (char *)operator new(0x30uLL);
  uint64_t v5 = *(void *)(*(void *)(a1 + 56) + 8LL);
  *(void *)__int128 v4 = off_100126DB0;
  *((void *)v4 + 1) = v5;
  std::locale::locale((std::locale *)v4 + 2, (const std::locale *)a1);
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v4 + 24) = result;
  v4[40] = a2;
  *(void *)(*(void *)(a1 + 56) + 8LL) = v4;
  *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8LL);
  return result;
}

uint64_t sub_10003312C(uint64_t a1, uint64_t a2, char a3, int a4)
{
  uint64_t v8 = operator new(0x58uLL);
  uint64_t result = sub_100033580((uint64_t)v8, a2, a3, *(void *)(*(void *)(a1 + 56) + 8LL), a4);
  *(void *)(*(void *)(a1 + 56) + 8LL) = v8;
  *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8LL);
  return result;
}

void sub_10003319C(_Unwind_Exception *a1)
{
}

void sub_1000331B0()
{
  exceptiouint64_t n = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_paren);
}

void sub_1000331E8(_Unwind_Exception *a1)
{
}

void *sub_1000331FC(void *a1)
{
  *a1 = &off_100126CF0;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  return a1;
}

void sub_100033240(void *__p)
{
  *__int128 __p = &off_100126CF0;
  uint64_t v2 = __p[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  operator delete(__p);
}

uint64_t sub_100033284(uint64_t result, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 92))
  {
    if (*(void *)(a2 + 16) != *(void *)(a2 + 8) || (*(_BYTE *)(a2 + 88) & 1) != 0)
    {
LABEL_12:
      uint64_t v4 = 0LL;
      *(_DWORD *)a2 = -993;
      goto LABEL_13;
    }
  }

  else
  {
    if (!*(_BYTE *)(result + 16)) {
      goto LABEL_12;
    }
    int v2 = *(unsigned __int8 *)(*(void *)(a2 + 16) - 1LL);
    if (v2 != 13 && v2 != 10) {
      goto LABEL_12;
    }
  }

  *(_DWORD *)a2 = -994;
  uint64_t v4 = *(void *)(result + 8);
LABEL_13:
  *(void *)(a2 + 80) = v4;
  return result;
}

void *sub_1000332E4(void *a1)
{
  *a1 = &off_100126CF0;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  return a1;
}

void sub_100033328(void *__p)
{
  *__int128 __p = &off_100126CF0;
  uint64_t v2 = __p[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  operator delete(__p);
}

uint64_t sub_10003336C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(_BYTE *)(a2 + 88) & 2) == 0
    || *(_BYTE *)(result + 16) && ((int v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    uint64_t v5 = *(void *)(result + 8);
  }

  else
  {
    uint64_t v5 = 0LL;
    *(_DWORD *)a2 = -993;
  }

  *(void *)(a2 + 80) = v5;
  return result;
}

std::locale *sub_1000333BC(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_100126DB0;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_100126CF0;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8LL))(locale);
  }
  return a1;
}

void sub_100033414(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_100126DB0;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_100126CF0;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8LL))(locale);
  }
  operator delete(a1);
}

uint64_t sub_10003346C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 8);
  int v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3) {
    goto LABEL_17;
  }
  BOOL v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 == v3)
  {
    if ((*(_BYTE *)(a2 + 88) & 8) == 0)
    {
      uint64_t v6 = *(v3 - 1);
      goto LABEL_13;
    }

uint64_t sub_100033580(uint64_t a1, uint64_t a2, char a3, uint64_t a4, int a5)
{
  *(void *)a1 = off_100126DF8;
  *(void *)(a1 + sub_100007004((uint64_t)v1 + 8) = a4;
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 40);
  *(void *)(a1 + 64) = v9;
  if (v9)
  {
    int v10 = (unint64_t *)(v9 + 8);
    do
      unint64_t v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }

  *(void *)(a1 + 72) = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 80) = a5;
  *(_BYTE *)(a1 + 84) = a3;
  return a1;
}

std::locale *sub_10003360C(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_100126DF8;
  uint64_t v2 = a1 + 2;
  sub_100007004((uint64_t)&a1[7]);
  std::locale::~locale(v2);
  a1->__locale_ = (std::locale::__imp *)&off_100126CF0;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8LL))(locale);
  }
  return a1;
}

void sub_100033674(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_100126DF8;
  uint64_t v2 = a1 + 2;
  sub_100007004((uint64_t)&a1[7]);
  std::locale::~locale(v2);
  a1->__locale_ = (std::locale::__imp *)&off_100126CF0;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8LL))(locale);
  }
  operator delete(a1);
}

void sub_1000336DC(uint64_t a1, uint64_t a2)
{
  *(void *)&__int128 v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v23 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v25 = 0xAAAAAAAAAAAAAA00LL;
  __int128 v27 = v4;
  uint64_t v24 = 0LL;
  __int128 v26 = 0uLL;
  LOBYTE(v27) = 0;
  BYTE8(v27) = 0;
  uint64_t v28 = 0LL;
  __int128 __p = 0LL;
  BOOL v20 = 0LL;
  unint64_t v5 = (*(_DWORD *)(a1 + 44) + 1);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v21 = 0LL;
  *(void *)&__int128 v22 = v6;
  *((void *)&v22 + 1) = v6;
  LOBYTE(v23) = 0;
  sub_100033D50((char **)&__p, v5, &v22);
  *((void *)&v23 + 1) = v7;
  uint64_t v24 = v7;
  LOBYTE(v25) = 0;
  __int128 v26 = v22;
  LOBYTE(v27) = v23;
  uint64_t v28 = v7;
  BYTE8(v27) = 1;
  uint64_t v8 = *(void *)(a2 + 16);
  if (*(_BYTE *)(a2 + 92)) {
    BOOL v9 = v8 == *(void *)(a2 + 8);
  }
  else {
    BOOL v9 = 0;
  }
  char v10 = v9;
  if (*(unsigned __int8 *)(a1 + 84) == sub_10003390C( a1 + 16,  v8,  *(void *)(a2 + 24),  (uint64_t *)&__p,  *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u,  v10))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0LL;
    unint64_t v11 = (char *)__p;
    goto LABEL_13;
  }

  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(a1 + 8);
  unint64_t v11 = (char *)__p;
  unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v20 - (_BYTE *)__p) >> 3);
  if (v12 < 2)
  {
LABEL_13:
    if (!v11) {
      return;
    }
    goto LABEL_14;
  }

  int v13 = 0;
  int v14 = *(_DWORD *)(a1 + 80);
  uint64_t v15 = *(void *)(a2 + 32);
  unint64_t v16 = 1LL;
  do
  {
    int v17 = &v11[24 * v16];
    uint64_t v18 = v15 + 24LL * (v14 + v13);
    *(_OWORD *)uint64_t v18 = *(_OWORD *)v17;
    *(_BYTE *)(v18 + 16) = v17[16];
    unint64_t v16 = (v13 + 2);
    ++v13;
  }

  while (v12 > v16);
LABEL_14:
  BOOL v20 = v11;
  operator delete(v11);
}

void sub_10003387C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10003389C(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(a1 + 24) = a4;
  uint64_t v8 = (_OWORD *)(a1 + 24);
  *(void *)(a1 + 32) = a4;
  *(_BYTE *)(a1 + 40) = 0;
  uint64_t result = sub_100033D50((char **)a1, a2, (__int128 *)(a1 + 24));
  *(void *)(a1 + 4sub_100007004((uint64_t)v1 + 8) = a3;
  *(void *)(a1 + 56) = a3;
  *(_BYTE *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = *v8;
  *(_BYTE *)(a1 + 8sub_100007004((uint64_t)v1 + 8) = *(_BYTE *)(a1 + 40);
  if ((a5 & 1) == 0) {
    *(void *)(a1 + 104) = a3;
  }
  *(_BYTE *)(a1 + 96) = 1;
  return result;
}

uint64_t sub_10003390C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  std::exception v38 = 0LL;
  unint64_t v39 = 0LL;
  unint64_t v40 = 0LL;
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    *((void *)&v42 + 1) = a3;
    unint64_t v43 = 0xAAAAAAAAAAAAAA00LL;
    *(void *)&__int128 v42 = a3;
    *(_DWORD *)uint64_t v41 = 0;
    memset(&v41[8], 0, 85);
    unint64_t v39 = (_OWORD *)sub_100034058((uint64_t *)&v38, (uint64_t)v41);
    if (*(void *)&v41[56])
    {
      *(void *)&v41[64] = *(void *)&v41[56];
      operator delete(*(void **)&v41[56]);
    }

    if (*(void *)&v41[32])
    {
      *(void *)&v41[40] = *(void *)&v41[32];
      operator delete(*(void **)&v41[32]);
    }

    std::string v35 = a4;
    unint64_t v11 = v39;
    *((_DWORD *)v39 - 24) = 0;
    *((void *)v11 - 11) = a2;
    *((void *)v11 - 10) = a2;
    *((void *)v11 - 9) = a3;
    sub_100033F54((uint64_t)(v11 - 4), *(unsigned int *)(a1 + 28), &v42);
    sub_100033F90((uint64_t)v39 - 40, *(unsigned int *)(a1 + 32));
    unint64_t v12 = v39;
    *((void *)v39 - 2) = v6;
    *((_DWORD *)v12 - 2) = a5;
    *((_BYTE *)v12 - 4) = a6;
    unsigned int v13 = 1;
    while (2)
    {
      uint64_t v15 = v12 - 1;
      uint64_t v14 = *((void *)v12 - 2);
      unint64_t v16 = v12 - 6;
      if (v14) {
        (*(void (**)(uint64_t, _OWORD *))(*(void *)v14 + 16LL))(v14, v12 - 6);
      }
      switch(*(_DWORD *)v16)
      {
        case 0xFFFFFC18:
          uint64_t v17 = *((void *)v12 - 10);
          if ((a5 & 0x20) != 0 && v17 == a2 || (a5 & 0x1000) != 0 && v17 != a3) {
            goto LABEL_16;
          }
          uint64_t v26 = *v35;
          *(void *)uint64_t v26 = a2;
          *(void *)(v26 + sub_100007004((uint64_t)v1 + 8) = v17;
          *(_BYTE *)(v26 + 16) = 1;
          uint64_t v27 = *((void *)v12 - 8);
          uint64_t v28 = *((void *)v12 - 7) - v27;
          if (v28)
          {
            unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * (v28 >> 3);
            int64x2_t v30 = (_BYTE *)(v27 + 16);
            unsigned int v31 = 1;
            do
            {
              uint64_t v32 = v26 + 24LL * v31;
              *(_OWORD *)uint64_t v32 = *((_OWORD *)v30 - 1);
              char v33 = *v30;
              v30 += 24;
              *(_BYTE *)(v32 + 16) = v33;
            }

            while (v29 > v31++);
          }

          uint64_t v6 = 1LL;
          break;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_23;
        case 0xFFFFFC1F:
LABEL_16:
          uint64_t v18 = v39 - 6;
          sub_100034424((uint64_t)&v40, (void *)v39 - 12);
          unint64_t v39 = v18;
          goto LABEL_23;
        case 0xFFFFFC20:
          *(void *)&__int128 v19 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)&v41[64] = v19;
          *(_OWORD *)&v41[80] = v19;
          *(_OWORD *)&v41[32] = v19;
          *(_OWORD *)&v41[48] = v19;
          *(_OWORD *)uint64_t v41 = v19;
          *(_OWORD *)&_BYTE v41[16] = v19;
          __int128 v20 = *(v12 - 5);
          *(_OWORD *)uint64_t v41 = *v16;
          *(_OWORD *)&_BYTE v41[16] = v20;
          memset(&v41[32], 0, 24);
          sub_10003475C( &v41[32],  *((__int128 **)v12 - 8),  *((__int128 **)v12 - 7),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v12 - 7) - *((void *)v12 - 8)) >> 3));
          memset(&v41[56], 0, 24);
          sub_1000347D8( &v41[56],  *((__int128 **)v12 - 5),  *((__int128 **)v12 - 4),  (uint64_t)(*((void *)v12 - 4) - *((void *)v12 - 5)) >> 4);
          uint64_t v21 = *v15;
          *(void *)&v41[85] = *(void *)((char *)v12 - 11);
          *(void *)&v41[80] = v21;
          (*(void (**)(void, uint64_t, _OWORD *))(*(void *)*v15 + 24LL))(*v15, 1LL, v12 - 6);
          (*(void (**)(void, void, _BYTE *))(**(void **)&v41[80] + 24LL))( *(void *)&v41[80],  0LL,  v41);
          __int128 v22 = v39;
          if ((unint64_t)v39 >= v40)
          {
            unint64_t v39 = (_OWORD *)sub_100034058((uint64_t *)&v38, (uint64_t)v41);
            if (*(void *)&v41[56])
            {
              *(void *)&v41[64] = *(void *)&v41[56];
              operator delete(*(void **)&v41[56]);
            }
          }

          else
          {
            __int128 v23 = *(_OWORD *)&v41[16];
            _OWORD *v39 = *(_OWORD *)v41;
            v22[1] = v23;
            *((void *)v22 + 4) = 0LL;
            *((void *)v22 + 5) = 0LL;
            *((void *)v22 + 6) = 0LL;
            *((void *)v22 + 7) = 0LL;
            v22[2] = *(_OWORD *)&v41[32];
            *((void *)v22 + 6) = *(void *)&v41[48];
            memset(&v41[32], 0, 24);
            *((void *)v22 + sub_100007004((uint64_t)v1 + 8) = 0LL;
            *((void *)v22 + 9) = 0LL;
            *(_OWORD *)((char *)v22 + 56) = *(_OWORD *)&v41[56];
            *((void *)v22 + 9) = *(void *)&v41[72];
            memset(&v41[56], 0, 24);
            uint64_t v24 = *(void *)&v41[80];
            *(void *)((char *)v22 + 85) = *(void *)&v41[85];
            *((void *)v22 + 10) = v24;
            unint64_t v39 = v22 + 6;
          }

          if (*(void *)&v41[32])
          {
            *(void *)&v41[40] = *(void *)&v41[32];
            operator delete(*(void **)&v41[32]);
          }

void sub_100033CF8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17, uint64_t a18, uint64_t a19, uint64_t a20, void *__p, uint64_t a22)
{
  a17 = &a14;
  sub_100034848((void ***)&a17);
  _Unwind_Resume(a1);
}

char *sub_100033D50(char **a1, unint64_t a2, __int128 *a3)
{
  uint64_t v6 = (uint64_t)a1[2];
  uint64_t result = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (uint64_t)result) >> 3) >= a2)
  {
    uint64_t v15 = a1[1];
    unint64_t v16 = (v15 - result) / 24;
    if (v16 >= a2) {
      uint64_t v17 = a2;
    }
    else {
      uint64_t v17 = (v15 - result) / 24;
    }
    if (v17)
    {
      uint64_t v18 = result;
      do
      {
        *(_OWORD *)uint64_t v18 = *a3;
        v18[16] = *((_BYTE *)a3 + 16);
        v18 += 24;
        --v17;
      }

      while (v17);
    }

    if (a2 <= v16)
    {
      a1[1] = &result[24 * a2];
    }

    else
    {
      __int128 v19 = &v15[24 * (a2 - v16)];
      uint64_t v20 = 24 * a2 - 24 * v16;
      do
      {
        __int128 v21 = *a3;
        *((void *)v15 + 2) = *((void *)a3 + 2);
        *(_OWORD *)uint64_t v15 = v21;
        v15 += 24;
        v20 -= 24LL;
      }

      while (v20);
      a1[1] = v19;
    }
  }

  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v6 = 0LL;
      *a1 = 0LL;
      a1[1] = 0LL;
      a1[2] = 0LL;
    }

    if (a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_1000046F8();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    uint64_t v9 = 2 * v8;
    if (2 * v8 <= a2) {
      uint64_t v9 = a2;
    }
    if (v8 >= 0x555555555555555LL) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v9;
    }
    uint64_t result = sub_100033EC4(a1, v10);
    unint64_t v11 = a1[1];
    unint64_t v12 = &v11[24 * a2];
    uint64_t v13 = 24 * a2;
    do
    {
      __int128 v14 = *a3;
      *((void *)v11 + 2) = *((void *)a3 + 2);
      *(_OWORD *)unint64_t v11 = v14;
      v11 += 24;
      v13 -= 24LL;
    }

    while (v13);
    a1[1] = v12;
  }

  return result;
}

char *sub_100033EC4(void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_1000046F8();
  }
  uint64_t result = (char *)sub_1000171F0((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *sub_100033F14(void *a1)
{
  uint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }

  int v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }

  return a1;
}

void sub_100033F54(uint64_t a1, unint64_t a2, __int128 *a3)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  BOOL v4 = a2 >= v3;
  unint64_t v5 = a2 - v3;
  if (v5 != 0 && v4)
  {
    sub_1000344DC((void **)a1, v5, a3);
  }

  else if (!v4)
  {
    *(void *)(a1 + sub_100007004((uint64_t)v1 + 8) = *(void *)a1 + 24 * a2;
  }

void sub_100033F90(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + sub_100007004((uint64_t)v1 + 8) = *(void *)a1 + 16 * a2;
    }
  }

  else
  {
    sub_100034650((void **)a1, a2 - v2);
  }

void sub_100033FC0()
{
  exceptiouint64_t n = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_complexity);
}

void sub_100033FF8(_Unwind_Exception *a1)
{
}

void sub_10003400C()
{
  exceptiouint64_t n = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, __re_err_unknown);
}

void sub_100034044(_Unwind_Exception *a1)
{
}

uint64_t sub_100034058(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x2AAAAAAAAAAAAAALL) {
    sub_1000046F8();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x155555555555555LL) {
    unint64_t v9 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  __int128 v19 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)sub_10003424C(v7, v9);
  }
  else {
    unint64_t v10 = 0LL;
  }
  uint64_t v17 = 0LL;
  unint64_t v11 = &v10[96 * v4];
  v16[0] = v10;
  v16[1] = v11;
  uint64_t v18 = &v10[96 * v9];
  __int128 v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)unint64_t v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v12;
  *((void *)v11 + 5) = 0LL;
  *((void *)v11 + 6) = 0LL;
  *((void *)v11 + 4) = 0LL;
  *((_OWORD *)v11 + 2) = *(_OWORD *)(a2 + 32);
  *((void *)v11 + 6) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 40) = 0LL;
  *(void *)(a2 + 4sub_100007004((uint64_t)v1 + 8) = 0LL;
  *((void *)v11 + 7) = 0LL;
  *((void *)v11 + sub_100007004((uint64_t)v1 + 8) = 0LL;
  *((void *)v11 + 9) = 0LL;
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(a2 + 56);
  *((void *)v11 + 9) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0LL;
  *(void *)(a2 + 64) = 0LL;
  *(void *)(a2 + 72) = 0LL;
  uint64_t v13 = *(void *)(a2 + 80);
  *(void *)(v11 + 85) = *(void *)(a2 + 85);
  *((void *)v11 + 10) = v13;
  uint64_t v17 = v11 + 96;
  sub_1000341D8(a1, v16);
  uint64_t v14 = a1[1];
  sub_100034468(v16);
  return v14;
}

void sub_1000341C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t sub_1000341D8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100034290((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_10003424C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL) {
    sub_100004828();
  }
  return operator new(96 * a2);
}

uint64_t sub_100034290(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v13 = a6;
  *((void *)&v13 + 1) = a7;
  __int128 v12 = v13;
  v14[0] = a1;
  v14[1] = &v12;
  v14[2] = &v13;
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }

  else
  {
    do
    {
      __int128 v8 = *(_OWORD *)(a3 - 80);
      *(_OWORD *)(v7 - 96) = *(_OWORD *)(a3 - 96);
      *(_OWORD *)(v7 - 80) = v8;
      *(void *)(v7 - 56) = 0LL;
      *(void *)(v7 - 4sub_100007004((uint64_t)v1 + 8) = 0LL;
      *(void *)(v7 - 64) = 0LL;
      *(_OWORD *)(v7 - 64) = *(_OWORD *)(a3 - 64);
      *(void *)(v7 - 4sub_100007004((uint64_t)v1 + 8) = *(void *)(a3 - 48);
      *(void *)(a3 - 64) = 0LL;
      *(void *)(a3 - 56) = 0LL;
      *(void *)(a3 - 4sub_100007004((uint64_t)v1 + 8) = 0LL;
      *(void *)(v7 - 40) = 0LL;
      *(void *)(v7 - 32) = 0LL;
      *(void *)(v7 - 24) = 0LL;
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 - 40);
      *(void *)(v7 - 24) = *(void *)(a3 - 24);
      *(void *)(a3 - 40) = 0LL;
      *(void *)(a3 - 32) = 0LL;
      *(void *)(a3 - 24) = 0LL;
      uint64_t v9 = *(void *)(a3 - 16);
      *(void *)(v7 - 11) = *(void *)(a3 - 11);
      *(void *)(v7 - 16) = v9;
      uint64_t v7 = *((void *)&v13 + 1) - 96LL;
      *((void *)&v13 + 1) -= 96LL;
      a3 -= 96LL;
    }

    while (a3 != a5);
    uint64_t v10 = v13;
  }

  LOBYTE(v15) = 1;
  sub_1000343A0((uint64_t)v14);
  return v10;
}

uint64_t sub_1000343A0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_1000343D4((uint64_t *)a1);
  }
  return a1;
}

void sub_1000343D4(uint64_t *a1)
{
  uint64_t v1 = *(void **)(a1[2] + 8);
  unint64_t v2 = *(void **)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_100034424(v3, v1);
      v1 += 12;
    }

    while (v1 != v2);
  }

void sub_100034424(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)a2[7];
  if (v3)
  {
    a2[8] = v3;
    operator delete(v3);
  }

  unint64_t v4 = (void *)a2[4];
  if (v4)
  {
    a2[5] = v4;
    operator delete(v4);
  }

void **sub_100034468(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_100034498(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 96;
    sub_100034424(v4, (void *)(i - 96));
  }

void sub_1000344DC(void **a1, unint64_t a2, __int128 *a3)
{
  __int128 v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  uint64_t v7 = v8;
  uint64_t v9 = *(void **)(v6 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (_BYTE *)v9) >> 3) >= a2)
  {
    if (a2)
    {
      unint64_t v15 = &v9[3 * a2];
      uint64_t v16 = 24 * a2;
      do
      {
        __int128 v17 = *a3;
        _DWORD v9[2] = *((void *)a3 + 2);
        *(_OWORD *)uint64_t v9 = v17;
        v9 += 3;
        v16 -= 24LL;
      }

      while (v16);
      uint64_t v9 = v15;
    }

    a1[1] = v9;
  }

  else
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (_BYTE *)*a1) >> 3);
    unint64_t v11 = v10 + a2;
    if (v10 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_1000046F8();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)*a1) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x555555555555555LL) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13) {
      uint64_t v14 = (char *)sub_1000171F0(v6, v13);
    }
    else {
      uint64_t v14 = 0LL;
    }
    uint64_t v18 = &v14[24 * v10];
    __int128 v19 = &v18[24 * a2];
    uint64_t v20 = 24 * a2;
    __int128 v21 = v18;
    do
    {
      __int128 v22 = *a3;
      *((void *)v21 + 2) = *((void *)a3 + 2);
      *(_OWORD *)__int128 v21 = v22;
      v21 += 24;
      v20 -= 24LL;
    }

    while (v20);
    __int128 v23 = &v14[24 * v13];
    unint64_t v25 = (char *)*a1;
    uint64_t v24 = (char *)a1[1];
    if (v24 != *a1)
    {
      do
      {
        __int128 v26 = *(_OWORD *)(v24 - 24);
        *((void *)v18 - 1) = *((void *)v24 - 1);
        *(_OWORD *)(v18 - 24) = v26;
        v18 -= 24;
        v24 -= 24;
      }

      while (v24 != v25);
      uint64_t v24 = (char *)*a1;
    }

    *a1 = v18;
    a1[1] = v19;
    a1[2] = v23;
    if (v24) {
      operator delete(v24);
    }
  }

void sub_100034650(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }

    a1[1] = v7;
  }

  else
  {
    uint64_t v8 = v7 - (_BYTE *)*a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      sub_1000046F8();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      unint64_t v13 = (char *)sub_1000047F4(v4, v12);
    }
    else {
      unint64_t v13 = 0LL;
    }
    uint64_t v14 = &v13[16 * v10];
    unint64_t v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    uint64_t v16 = &v14[16 * a2];
    uint64_t v18 = (char *)*a1;
    __int128 v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }

      while (v17 != v18);
      __int128 v17 = (char *)*a1;
    }

    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17) {
      operator delete(v17);
    }
  }

char *sub_10003475C(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_100033EC4(result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      __int128 v8 = *a2;
      *(void *)(v7 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v7 = v8;
      v7 += 24LL;
      a2 = (__int128 *)((char *)a2 + 24);
    }

    *((void *)v6 + 1) = v7;
  }

  return result;
}

void sub_1000347BC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + sub_100007004((uint64_t)v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

char *sub_1000347D8(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_10000C194(result, a4);
    uint64_t v7 = (_OWORD *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      __int128 v8 = *a2++;
      *v7++ = v8;
    }

    *((void *)v6 + 1) = v7;
  }

  return result;
}

void sub_10003482C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + sub_100007004((uint64_t)v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void sub_100034848(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 12;
        sub_100034424((uint64_t)(v1 + 2), v4);
      }

      while (v4 != v2);
      uint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

unsigned __int8 *sub_1000348CC(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3 || *a2 != 92) {
    return a2;
  }
  uint64_t v5 = a2 + 1;
  if (a2 + 1 == a3) {
    sub_100034C80();
  }
  uint64_t result = sub_100034CCC(a1, a2 + 1, a3);
  if (v5 == result)
  {
    uint64_t result = (unsigned __int8 *)sub_100034D80(a1, (char *)a2 + 1, (char *)a3);
    if (v5 == result)
    {
      uint64_t result = sub_100034E4C(a1, a2 + 1, (char *)a3, 0LL);
      if (v5 == result) {
        return a2;
      }
    }
  }

  return result;
}

char *sub_10003496C(uint64_t a1, char *a2, char *a3)
{
  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3) {
      goto LABEL_20;
    }
    uint64_t v5 = a2[1] == 94 ? a2 + 2 : a2 + 1;
    uint64_t v6 = (uint64_t *)sub_100035AD0(a1, a2[1] == 94);
    if (v5 == a3) {
      goto LABEL_20;
    }
    uint64_t v7 = v6;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v5 == 93)
    {
      sub_100035B48((uint64_t)v6, 93LL);
      ++v5;
    }

    if (v5 == a3) {
      goto LABEL_20;
    }
    do
    {
      __int128 v8 = v5;
      uint64_t v5 = sub_100037008(a1, v5, a3, v7);
    }

    while (v8 != v5);
    if (v8 == a3) {
      goto LABEL_20;
    }
    if (*v8 == 45)
    {
      sub_100035B48((uint64_t)v7, 45LL);
      ++v8;
    }

    if (v8 == a3 || *v8 != 93) {
LABEL_20:
    }
      sub_100036FBC();
    return v8 + 1;
  }

  return a2;
}

void *sub_100034A7C(void *result)
{
  if ((result[3] & 2) == 0)
  {
    uint64_t v1 = result;
    uint64_t result = operator new(0x18uLL);
    int v2 = *((_DWORD *)v1 + 7) + 1;
    *((_DWORD *)v1 + 7) = v2;
    uint64_t v3 = v1[7];
    uint64_t v4 = *(void *)(v3 + 8);
    *uint64_t result = &off_100127080;
    result[1] = v4;
    *((_DWORD *)result + 4) = v2;
    *(void *)(v3 + sub_100007004((uint64_t)v1 + 8) = result;
    v1[7] = *(void *)(v1[7] + 8LL);
  }

  return result;
}

void *sub_100034AE0(void *result, int a2)
{
  if ((result[3] & 2) == 0)
  {
    uint64_t v3 = result;
    uint64_t result = operator new(0x18uLL);
    uint64_t v4 = v3[7];
    uint64_t v5 = *(void *)(v4 + 8);
    *uint64_t result = &off_1001270C8;
    result[1] = v5;
    *((_DWORD *)result + 4) = a2;
    *(void *)(v4 + sub_100007004((uint64_t)v1 + 8) = result;
    v3[7] = *(void *)(v3[7] + 8LL);
  }

  return result;
}

void sub_100034B3C()
{
  exceptiouint64_t n = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_badrepeat);
}

void sub_100034B74(_Unwind_Exception *a1)
{
}

_BYTE *sub_100034B88(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  uint64_t v3 = a2;
  if (a2 != a3)
  {
    int v4 = (char)*a2;
    BOOL v5 = (v4 - 36) > 0x3A || ((1LL << (*a2 - 36)) & 0x7800000080004F1LL) == 0;
    if (v5 && (v4 - 123) >= 3)
    {
      sub_100035128(a1, (char)v4);
      ++v3;
    }
  }

  return v3;
}

void *sub_100034BF8(void *a1)
{
  *a1 = &off_100126CF0;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  return a1;
}

void sub_100034C3C(void *__p)
{
  *__int128 __p = &off_100126CF0;
  uint64_t v2 = __p[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  operator delete(__p);
}

void sub_100034C80()
{
  exceptiouint64_t n = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_escape);
}

void sub_100034CB8(_Unwind_Exception *a1)
{
}

unsigned __int8 *sub_100034CCC(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a2;
  if (a2 != a3)
  {
    int v4 = *a2;
    uint64_t v5 = (v4 - 48);
    if (v4 == 48)
    {
      sub_100035128(a1, v5);
      return ++v3;
    }

    if (++v3 == a3)
    {
      uint64_t v3 = a3;
    }

    else
    {
      while (1)
      {
        int v6 = *v3;
        ++v3;
        LODWORD(v5) = v6 + 10 * v5 - 48;
        if (v3 == a3)
        {
          uint64_t v3 = a3;
          break;
        }
      }

      if (!(_DWORD)v5) {
        goto LABEL_16;
      }
    }

    if (v5 <= *(_DWORD *)(a1 + 28))
    {
      sub_100035258(a1, v5);
      return v3;
    }

char *sub_100034D80(uint64_t a1, char *a2, char *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  int v4 = *a2;
  if (v4 > 99)
  {
    if (v4 == 119)
    {
      char v5 = 0;
      goto LABEL_15;
    }

    if (v4 == 115)
    {
      char v9 = 0;
      goto LABEL_17;
    }

    if (v4 != 100) {
      return v3;
    }
    char v6 = 0;
LABEL_12:
    uint64_t v7 = sub_100035AD0(a1, v6);
    int v8 = v7[40] | 0x400;
LABEL_18:
    v7[40] = v8;
    goto LABEL_19;
  }

  switch(v4)
  {
    case 'D':
      char v6 = 1;
      goto LABEL_12;
    case 'S':
      char v9 = 1;
LABEL_17:
      uint64_t v7 = sub_100035AD0(a1, v9);
      int v8 = v7[40] | 0x4000;
      goto LABEL_18;
    case 'W':
      char v5 = 1;
LABEL_15:
      uint64_t v10 = sub_100035AD0(a1, v5);
      v10[40] |= 0x500u;
      sub_100035B48((uint64_t)v10, 95LL);
LABEL_19:
      ++v3;
      break;
  }

  return v3;
}

unsigned __int8 *sub_100034E4C(uint64_t a1, unsigned __int8 *a2, char *a3, std::string *this)
{
  int v4 = a2;
  if (a2 != (unsigned __int8 *)a3)
  {
    int v5 = (char)*a2;
    if (v5 > 109)
    {
      char v6 = 0;
      switch(*a2)
      {
        case 'n':
          if (this)
          {
            uint64_t v7 = this;
            LOBYTE(vsub_100007004((uint64_t)v1 + 8) = 10;
            goto LABEL_52;
          }

          uint64_t v8 = 10LL;
          goto LABEL_61;
        case 'r':
          if (this)
          {
            uint64_t v7 = this;
            LOBYTE(vsub_100007004((uint64_t)v1 + 8) = 13;
            goto LABEL_52;
          }

          uint64_t v8 = 13LL;
          goto LABEL_61;
        case 't':
          if (this)
          {
            uint64_t v7 = this;
            LOBYTE(vsub_100007004((uint64_t)v1 + 8) = 9;
            goto LABEL_52;
          }

          uint64_t v8 = 9LL;
          goto LABEL_61;
        case 'u':
          int v9 = a2[1];
          if ((v9 & 0xF8) != 0x30 && (v9 & 0xFE) != 0x38 && (v9 | 0x20u) - 97 >= 6) {
            goto LABEL_66;
          }
          int v4 = a2 + 2;
          int v10 = *v4;
          char v11 = -48;
          if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38) {
            goto LABEL_24;
          }
          v10 |= 0x20u;
          char v11 = -87;
LABEL_24:
          char v6 = 16 * (v11 + v10);
LABEL_25:
          int v12 = v4[1];
          char v13 = -48;
          if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38) {
            goto LABEL_30;
          }
          v12 |= 0x20u;
          char v13 = -87;
LABEL_30:
          int v14 = v4[2];
          char v15 = -48;
          if ((v14 & 0xF8) == 0x30 || (v14 & 0xFE) == 0x38) {
            goto LABEL_35;
          }
          v14 |= 0x20u;
          char v15 = -87;
LABEL_35:
          if (this) {
            std::string::operator=(this, v15 + v14 + 16 * (v13 + v12 + v6));
          }
          else {
            sub_100035128(a1, (char)(v15 + v14 + 16 * (v13 + v12 + v6)));
          }
          v4 += 3;
          return v4;
        case 'v':
          if (this)
          {
            uint64_t v7 = this;
            LOBYTE(vsub_100007004((uint64_t)v1 + 8) = 11;
            goto LABEL_52;
          }

          uint64_t v8 = 11LL;
          break;
        case 'x':
          goto LABEL_25;
        default:
          goto LABEL_47;
      }

      goto LABEL_61;
    }

    if (v5 == 48)
    {
      if (this)
      {
        uint64_t v7 = this;
        LOBYTE(vsub_100007004((uint64_t)v1 + 8) = 0;
        goto LABEL_52;
      }

      uint64_t v8 = 0LL;
LABEL_61:
      sub_100035128(a1, v8);
      return ++v4;
    }

    if (v5 != 99)
    {
      if (v5 == 102)
      {
        if (this)
        {
          uint64_t v7 = this;
          LOBYTE(vsub_100007004((uint64_t)v1 + 8) = 12;
LABEL_52:
          std::string::operator=(v7, v8);
          return ++v4;
        }

        uint64_t v8 = 12LL;
        goto LABEL_61;
      }

LABEL_47:
      if (*a2 != 95
        && ((v5 & 0x80) != 0 || (*(_DWORD *)(*(void *)(*(void *)(a1 + 8) + 16LL) + 4LL * *a2) & 0x500) == 0))
      {
        uint64_t v8 = (char)v5;
        if (this)
        {
          uint64_t v7 = this;
          goto LABEL_52;
        }

        goto LABEL_61;
      }

    if (v8 == 1684956531)
    {
      sub_100076C34((uint64_t)v2, v4, *(xpc_object_t **)v1);
      goto LABEL_390;
    }
  }

LABEL_66:
      sub_100034C80();
    }

    unsigned int v16 = a2[1];
    if (this) {
      std::string::operator=(this, v16 & 0x1F);
    }
    else {
      sub_100035128(a1, v16 & 0x1F);
    }
    v4 += 2;
  }

  return v4;
}

  unint64_t v43 = *(_DWORD *)(a1 + 164);
  if (v43 || *(void *)(a1 + 64) != *(void *)(a1 + 72))
  {
    if ((v39 & 0x80) != 0 || (*(_DWORD *)(*(void *)(*(void *)(a1 + 24) + 16LL) + 4LL * v39) & v43) == 0) {
      int v44 = (v39 == 95) & (v43 >> 7);
    }
    else {
      LOBYTE(v44) = 1;
    }
    int v45 = *(void **)(a1 + 72);
    char v46 = memchr(*(const void **)(a1 + 64), (char)v39, (size_t)v45 - *(void *)(a1 + 64));
    BOOL v47 = v46 ? v46 : v45;
    if ((v44 & 1) == 0 && v47 == v45) {
      goto LABEL_77;
    }
  }

  unint64_t v49 = *(void *)(a1 + 88);
  uint64_t v48 = *(void *)(a1 + 96);
  if (v49 != v48)
  {
    memset(&__p, 170, sizeof(__p));
    if (*(_BYTE *)(a1 + 170))
    {
      sub_100036B20(a1 + 16, (char *)&v121, (char *)&v122);
      unint64_t v49 = *(void *)(a1 + 88);
      uint64_t v48 = *(void *)(a1 + 96);
    }

    else
    {
      __p.__r_.__value_.__s.__size_ = 1;
      LOWORD(__p.__r_.__value_.__l.__data_) = v39;
    }

    int v50 = v48 - v49;
    if (v50)
    {
      v117 = v37;
      v114 = v36;
      uint64_t v51 = 0LL;
      char v52 = v50 / 48;
      v112 = __p.__r_.__value_.__s.__size_;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string v53 = __p.__r_.__value_.__s.__size_;
      }
      else {
        std::string v53 = __p.__r_.__value_.__l.__size_;
      }
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string v54 = &__p;
      }
      else {
        std::string v54 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (v52 <= 1) {
        char v55 = 1LL;
      }
      else {
        char v55 = v50 / 48;
      }
      uint64_t v56 = 1;
      while (1)
      {
        char v57 = *(char *)(v49 + 23);
        if (v57 >= 0) {
          char v58 = *(unsigned __int8 *)(v49 + 23);
        }
        else {
          char v58 = *(void *)(v49 + 8);
        }
        if (v57 >= 0) {
          char v59 = (const void *)v49;
        }
        else {
          char v59 = *(const void **)v49;
        }
        if (v58 >= v53) {
          unint64_t v60 = v53;
        }
        else {
          unint64_t v60 = v58;
        }
        char v61 = memcmp(v54, v59, v60);
        unsigned __int8 v62 = v53 >= v58;
        if (v61) {
          unsigned __int8 v62 = v61 >= 0;
        }
        if (v62)
        {
          uint64_t v63 = *(char *)(v49 + 47);
          if (v63 >= 0) {
            __int128 v64 = *(unsigned __int8 *)(v49 + 47);
          }
          else {
            __int128 v64 = *(void *)(v49 + 32);
          }
          if (v63 >= 0) {
            uint64_t v65 = (const void *)(v49 + 24);
          }
          else {
            uint64_t v65 = *(const void **)(v49 + 24);
          }
          if (v53 >= v64) {
            unsigned __int8 v66 = v64;
          }
          else {
            unsigned __int8 v66 = v53;
          }
          char v67 = memcmp(v65, v54, v66);
          unint64_t v68 = v64 >= v53;
          if (v67) {
            unint64_t v68 = v67 >= 0;
          }
          if (v68) {
            break;
          }
        }

        uint64_t v56 = ++v51 < v52;
        v49 += 48LL;
        if (v55 == v51)
        {
          unint64_t v36 = v114;
          goto LABEL_123;
        }
      }

      unint64_t v36 = 1;
LABEL_123:
      char v37 = v117;
      if ((v112 & 0x80) == 0) {
        goto LABEL_125;
      }
    }

    else
    {
      uint64_t v56 = 0;
      if ((__p.__r_.__value_.__s.__size_ & 0x80) == 0) {
        goto LABEL_125;
      }
    }

    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_125:
    if (v56) {
      goto LABEL_221;
    }
  }

  if (*(void *)(a1 + 136) == *(void *)(a1 + 144)) {
    goto LABEL_154;
  }
  memset(&__p, 170, sizeof(__p));
  sub_100036E78(a1 + 16, (char *)&v121, (char *)&v122, &__p);
  uint64_t v69 = *(void *)(a1 + 136);
  char v70 = __p.__r_.__value_.__s.__size_;
  __int128 v71 = *(void *)(a1 + 144) - v69;
  if (v71)
  {
    v118 = v37;
    uint64_t v72 = 0LL;
    uint64_t v73 = v71 / 24;
    unsigned __int8 v74 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      v75 = __p.__r_.__value_.__s.__size_;
    }
    else {
      v75 = __p.__r_.__value_.__l.__size_;
    }
    if (v73 <= 1) {
      char v76 = 1LL;
    }
    else {
      char v76 = v71 / 24;
    }
    __int128 v77 = 1;
    while (1)
    {
      unsigned __int8 v78 = (unsigned __int8 **)(v69 + 24 * v72);
      char v79 = (unsigned __int8 *)*((unsigned __int8 *)v78 + 23);
      v80 = (char)v79;
      if ((unsigned __int8 *)v75 == v79)
      {
        if (v80 >= 0) {
          unint64_t v81 = (unsigned __int8 *)(v69 + 24 * v72);
        }
        else {
          unint64_t v81 = *v78;
        }
        if ((v70 & 0x80) != 0)
        {
          v115 = v36;
          v84 = v73;
          v113 = v76;
          char v85 = memcmp((const void *)v74, v81, *((size_t *)&v74 + 1));
          char v76 = v113;
          uint64_t v73 = v84;
          unint64_t v36 = v115;
          if (!v85)
          {
            unint64_t v36 = 1;
            char v37 = v118;
            goto LABEL_152;
          }
        }

        else
        {
          if (!(_DWORD)v70)
          {
            unint64_t v36 = 1;
            char v37 = v118;
            if (!v77) {
              goto LABEL_154;
            }
            goto LABEL_221;
          }

          unsigned __int8 v82 = &__p;
          char v83 = v70;
          while (v82->__r_.__value_.__s.__data_[0] == *v81)
          {
            unsigned __int8 v82 = (std::string *)((char *)v82 + 1);
            ++v81;
            if (!--v83)
            {
              unint64_t v36 = 1;
              goto LABEL_149;
            }
          }
        }
      }

      __int128 v77 = ++v72 < v73;
      if (v72 == v76)
      {
LABEL_149:
        char v37 = v118;
        if ((v70 & 0x80) == 0) {
          goto LABEL_153;
        }
        goto LABEL_152;
      }
    }
  }

  __int128 v77 = 0;
  if ((__p.__r_.__value_.__s.__size_ & 0x80) != 0) {
LABEL_152:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_153:
  if (!v77)
  {
LABEL_154:
    unsigned __int8 v86 = *(_DWORD *)(a1 + 160);
    if ((*(_DWORD *)(*(void *)(*(void *)(a1 + 24) + 16LL) + 4LL * v121) & v86) == 0)
    {
      v87 = (v86 >> 7) & 1;
      if (v121 != 95) {
        v87 = 0;
      }
      if (v87 != 1) {
        goto LABEL_221;
      }
    }

    goto LABEL_77;
  }

uint64_t sub_100035128(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 24);
  if ((v4 & 1) != 0)
  {
    uint64_t v8 = (char *)operator new(0x30uLL);
    uint64_t result = sub_100035324((uint64_t)v8, a1, a2, *(void *)(*(void *)(a1 + 56) + 8LL));
LABEL_6:
    *(void *)(*(void *)(a1 + 56) + 8LL) = v8;
    goto LABEL_7;
  }

  if ((v4 & 8) != 0)
  {
    uint64_t v8 = (char *)operator new(0x30uLL);
    uint64_t v9 = *(void *)(*(void *)(a1 + 56) + 8LL);
    *(void *)uint64_t v8 = off_100126ED0;
    *((void *)v8 + 1) = v9;
    uint64_t result = (uint64_t)std::locale::locale((std::locale *)v8 + 2, (const std::locale *)a1);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)(a1 + 8);
    v8[40] = a2;
    goto LABEL_6;
  }

  uint64_t result = (uint64_t)operator new(0x18uLL);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(v6 + 8);
  *(void *)uint64_t result = &off_100126F18;
  *(void *)(result + sub_100007004((uint64_t)v1 + 8) = v7;
  *(_BYTE *)(result + 16) = a2;
  *(void *)(v6 + sub_100007004((uint64_t)v1 + 8) = result;
LABEL_7:
  *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8LL);
  return result;
}

void sub_1000351F8(_Unwind_Exception *a1)
{
}

void sub_10003520C()
{
  exceptiouint64_t n = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_backref);
}

void sub_100035244(_Unwind_Exception *a1)
{
}

void *sub_100035258(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)(a1 + 24);
  if ((v4 & 1) != 0)
  {
    uint64_t v8 = (std::locale *)operator new(0x30uLL);
    uint64_t v9 = v8;
    int v10 = *(std::locale::__imp **)(*(void *)(a1 + 56) + 8LL);
LABEL_6:
    v8->__locale_ = (std::locale::__imp *)(v11 + 2);
    v8[1].__locale_ = v10;
    uint64_t result = std::locale::locale(v8 + 2, (const std::locale *)a1);
    *(_OWORD *)&v9[3].__locale_ = *(_OWORD *)(a1 + 8);
    LODWORD(v9[5].__locale_) = a2;
    *(void *)(*(void *)(a1 + 56) + 8LL) = v9;
    goto LABEL_7;
  }

  if ((v4 & 8) != 0)
  {
    uint64_t v8 = (std::locale *)operator new(0x30uLL);
    uint64_t v9 = v8;
    int v10 = *(std::locale::__imp **)(*(void *)(a1 + 56) + 8LL);
    goto LABEL_6;
  }

  uint64_t result = operator new(0x18uLL);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(v6 + 8);
  *uint64_t result = &off_100126FF0;
  result[1] = v7;
  *((_DWORD *)result + 4) = a2;
  *(void *)(v6 + sub_100007004((uint64_t)v1 + 8) = result;
LABEL_7:
  *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8LL);
  return result;
}

uint64_t sub_100035324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_100126E88;
  *(void *)(a1 + sub_100007004((uint64_t)v1 + 8) = a4;
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 40) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 8) + 40LL))( *(void *)(a2 + 8),  a3);
  return a1;
}

void sub_100035390(_Unwind_Exception *a1)
{
  void *v1 = &off_100126CF0;
  uint64_t v4 = v1[1];
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  _Unwind_Resume(a1);
}

std::locale *sub_1000353C8(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_100126E88;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_100126CF0;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8LL))(locale);
  }
  return a1;
}

void sub_100035420(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_100126E88;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_100126CF0;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8LL))(locale);
  }
  operator delete(a1);
}

uint64_t sub_100035478(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (uint64_t v4 = result,
        uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(result + 24) + 40LL))( *(void *)(result + 24),  *v3),  *(unsigned __int8 *)(v4 + 40) != result))
  {
    uint64_t v5 = 0LL;
    *(_DWORD *)a2 = -993;
  }

  else
  {
    *(_DWORD *)a2 = -995;
    ++*(void *)(a2 + 16);
    uint64_t v5 = *(void *)(v4 + 8);
  }

  *(void *)(a2 + 80) = v5;
  return result;
}

std::locale *sub_1000354F0(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_100126ED0;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_100126CF0;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8LL))(locale);
  }
  return a1;
}

void sub_100035548(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_100126ED0;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_100126CF0;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8LL))(locale);
  }
  operator delete(a1);
}

uint64_t sub_1000355A0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    uint64_t v3 = 0LL;
    *(_DWORD *)a2 = -993;
  }

  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }

  *(void *)(a2 + 80) = v3;
  return result;
}

void *sub_1000355E8(void *a1)
{
  *a1 = &off_100126CF0;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  return a1;
}

void sub_10003562C(void *__p)
{
  *__int128 __p = &off_100126CF0;
  uint64_t v2 = __p[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  operator delete(__p);
}

uint64_t sub_100035670(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    uint64_t v3 = 0LL;
    *(_DWORD *)a2 = -993;
  }

  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }

  *(void *)(a2 + 80) = v3;
  return result;
}

std::locale *sub_1000356B8(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_100126F60;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_100126CF0;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8LL))(locale);
  }
  return a1;
}

void sub_100035710(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_100126F60;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_100126CF0;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8LL))(locale);
  }
  operator delete(a1);
}

uint64_t sub_100035768(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32) + 24LL * (*(_DWORD *)(result + 40) - 1);
  if (*(_BYTE *)(v3 + 16))
  {
    uint64_t v4 = *(void *)(v3 + 8) - *(void *)v3;
    uint64_t v5 = *(void *)(a2 + 16);
    if (*(void *)(a2 + 24) - v5 >= v4)
    {
      uint64_t v7 = result;
      if (v4 < 1)
      {
LABEL_9:
        *(_DWORD *)a2 = -994;
        *(void *)(a2 + 16) = v5 + v4;
        uint64_t v6 = *(void *)(v7 + 8);
        goto LABEL_10;
      }

      uint64_t v8 = 0LL;
      while (1)
      {
        int v9 = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40LL))( *(void *)(v7 + 24),  *(char *)(*(void *)v3 + v8));
        uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40LL))( *(void *)(v7 + 24),  *(char *)(*(void *)(a2 + 16) + v8));
        if (v9 != (_DWORD)result) {
          break;
        }
        if (v4 == ++v8)
        {
          uint64_t v5 = *(void *)(a2 + 16);
          goto LABEL_9;
        }
      }
    }
  }

  uint64_t v6 = 0LL;
  *(_DWORD *)a2 = -993;
LABEL_10:
  *(void *)(a2 + 80) = v6;
  return result;
}

std::locale *sub_10003584C(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_100126FA8;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_100126CF0;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8LL))(locale);
  }
  return a1;
}

void sub_1000358A4(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_100126FA8;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_100126CF0;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8LL))(locale);
  }
  operator delete(a1);
}

uint64_t sub_1000358FC(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 40) - 1;
  uint64_t v3 = *(void *)(a2 + 32);
  if (*(_BYTE *)(v3 + 24LL * v2 + 16))
  {
    uint64_t v4 = (unsigned __int8 **)(v3 + 24LL * v2);
    uint64_t v5 = *v4;
    uint64_t v6 = v4[1] - *v4;
    uint64_t v7 = *(void *)(a2 + 16);
    if (*(void *)(a2 + 24) - v7 >= v6)
    {
      if (v6 < 1)
      {
LABEL_8:
        *(_DWORD *)a2 = -994;
        *(void *)(a2 + 16) = v7 + v6;
        uint64_t v8 = *(void *)(result + 8);
        goto LABEL_9;
      }

      int v9 = *(unsigned __int8 **)(a2 + 16);
      uint64_t v10 = v6;
      while (1)
      {
        int v12 = *v5++;
        int v11 = v12;
        int v13 = *v9++;
        if (v11 != v13) {
          break;
        }
        if (!--v10) {
          goto LABEL_8;
        }
      }
    }
  }

  uint64_t v8 = 0LL;
  *(_DWORD *)a2 = -993;
LABEL_9:
  *(void *)(a2 + 80) = v8;
  return result;
}

void *sub_10003598C(void *a1)
{
  *a1 = &off_100126CF0;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  return a1;
}

void sub_1000359D0(void *__p)
{
  *__int128 __p = &off_100126CF0;
  uint64_t v2 = __p[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  operator delete(__p);
}

unsigned int *sub_100035A14(unsigned int *result, uint64_t a2)
{
  unint64_t v2 = result[4];
  uint64_t v3 = *(void *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 40) - v3) >> 3) < v2) {
    sub_10003520C();
  }
  unsigned int v5 = v2 - 1;
  if (*(_BYTE *)(v3 + 24LL * v5 + 16)
    && (uint64_t v6 = result,
        uint64_t v7 = v3 + 24LL * v5,
        uint64_t result = *(unsigned int **)v7,
        int64_t v8 = *(void *)(v7 + 8) - *(void *)v7,
        uint64_t v9 = *(void *)(a2 + 16),
        *(void *)(a2 + 24) - v9 >= v8)
    && (uint64_t result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !(_DWORD)result))
  {
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 16) = v9 + v8;
    uint64_t v10 = *((void *)v6 + 1);
  }

  else
  {
    uint64_t v10 = 0LL;
    *(_DWORD *)a2 = -993;
  }

  *(void *)(a2 + 80) = v10;
  return result;
}

void *sub_100035AD0(uint64_t a1, char a2)
{
  uint64_t v4 = operator new(0xB0uLL);
  sub_100035D74( (uint64_t)v4,  a1,  *(void *)(*(void *)(a1 + 56) + 8LL),  a2,  *(_DWORD *)(a1 + 24) & 1,  (*(_DWORD *)(a1 + 24) & 8) != 0);
  *(void *)(*(void *)(a1 + 56) + 8LL) = v4;
  *(void *)(a1 + 56) = v4;
  return v4;
}

void sub_100035B34(_Unwind_Exception *a1)
{
}

void sub_100035B48(uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (*(_BYTE *)(a1 + 169))
  {
    char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40LL))(*(void *)(a1 + 24), a2);
    unsigned int v5 = *(_BYTE **)(a1 + 48);
    unint64_t v4 = *(void *)(a1 + 56);
    if ((unint64_t)v5 >= v4)
    {
      uint64_t v6 = (unint64_t *)(a1 + 40);
      unint64_t v7 = *(void *)(a1 + 40);
      int64_t v8 = &v5[-v7];
      uint64_t v9 = (uint64_t)&v5[-v7 + 1];
      if (v9 >= 0)
      {
        unint64_t v10 = v4 - v7;
        if (2 * v10 > v9) {
          uint64_t v9 = 2 * v10;
        }
        if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v11 = v9;
        }
        if (v11) {
          int v12 = operator new(v11);
        }
        else {
          int v12 = 0LL;
        }
        uint64_t v20 = &v8[(void)v12];
        __int128 v21 = (char *)v12 + v11;
        v8[(void)v12] = v2;
        uint64_t v19 = (uint64_t)&v8[(void)v12 + 1];
        if (v5 != (_BYTE *)v7)
        {
          __int128 v22 = &v5[~v7];
          do
          {
            char v23 = *--v5;
            (v22--)[(void)v12] = v23;
          }

          while (v5 != (_BYTE *)v7);
LABEL_45:
          unsigned int v5 = (_BYTE *)*v6;
          goto LABEL_47;
        }

        goto LABEL_46;
      }

LABEL_50:
      sub_1000046F8();
    }

    goto LABEL_22;
  }

  uint64_t v6 = (unint64_t *)(a1 + 40);
  unsigned int v5 = *(_BYTE **)(a1 + 48);
  unint64_t v13 = *(void *)(a1 + 56);
  if (!*(_BYTE *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v13)
    {
      unint64_t v24 = *v6;
      unint64_t v25 = &v5[-*v6];
      unint64_t v26 = (unint64_t)(v25 + 1);
      if ((uint64_t)(v25 + 1) >= 0)
      {
        unint64_t v27 = v13 - v24;
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v28 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v28 = v26;
        }
        if (v28) {
          int v12 = operator new(v28);
        }
        else {
          int v12 = 0LL;
        }
        uint64_t v20 = &v25[(void)v12];
        __int128 v21 = (char *)v12 + v28;
        v25[(void)v12] = v2;
        uint64_t v19 = (uint64_t)&v25[(void)v12 + 1];
        if (v5 != (_BYTE *)v24)
        {
          unsigned int v31 = &v5[~v24];
          do
          {
            char v32 = *--v5;
            (v31--)[(void)v12] = v32;
          }

          while (v5 != (_BYTE *)v24);
          goto LABEL_45;
        }

        goto LABEL_46;
      }

      goto LABEL_50;
    }

      sub_1000046F8();
    }

    goto LABEL_22;
  }

  uint64_t v6 = (unint64_t *)(a1 + 64);
  unsigned int v5 = *(_BYTE **)(a1 + 72);
  unint64_t v13 = *(void *)(a1 + 80);
  if (!*(_BYTE *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v13)
    {
      unint64_t v24 = *v6;
      unint64_t v25 = &v5[-*v6];
      unint64_t v26 = (unint64_t)(v25 + 1);
      if ((uint64_t)(v25 + 1) >= 0)
      {
        unint64_t v27 = v13 - v24;
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v28 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v28 = v26;
        }
        if (v28) {
          int v12 = operator new(v28);
        }
        else {
          int v12 = 0LL;
        }
        uint64_t v20 = &v25[(void)v12];
        __int128 v21 = (char *)v12 + v28;
        v25[(void)v12] = v2;
        uint64_t v19 = (uint64_t)&v25[(void)v12 + 1];
        if (v5 != (_BYTE *)v24)
        {
          unsigned int v31 = &v5[~v24];
          do
          {
            char v32 = *--v5;
            (v31--)[(void)v12] = v32;
          }

          while (v5 != (_BYTE *)v24);
          goto LABEL_45;
        }

        goto LABEL_46;
      }

      goto LABEL_50;
    }
    }

    else
    {
      unint64_t v17 = (os_log_s *)qword_1001318E8;
      if (os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "[AppUsage] WARNING: Failed to get _DKEventQuery class",  buf,  2u);
      }

      char v85 = 0;
    }

    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = v85;
    if (*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL)) {
      sub_100092DCC(v4);
    }
  }

    std::exception v38 = 0LL;
    goto LABEL_51;
  }

  size_t v11 = (os_log_s *)qword_100131940;
  if (os_log_type_enabled((os_log_t)qword_100131940, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "[CD] Market: Location framework not supported",  buf,  2u);
  }

  sub_1000993D4((uint64_t)v57, "LocationFrameworkNotSupported");
  int v12 = sub_100003F94((unsigned __int8 *)a2, "market");
  sub_1000041AC((uint64_t)v57);
  unint64_t v13 = *(_BYTE *)v12;
  *(_BYTE *)int v12 = v57[0];
  v57[0] = v13;
  unint64_t v14 = (uint64_t *)v12[1];
  v12[1] = (uint64_t)v58;
  char v58 = v14;
  sub_1000041AC((uint64_t)v12);
  sub_1000041AC((uint64_t)v57);
  sub_10000425C(&v58, v57[0]);
LABEL_61:
  objc_autoreleasePoolPop(v4);
}

          char v23 = (os_log_s *)qword_100131928;
          if (os_log_type_enabled((os_log_t)qword_100131928, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(__p) = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "[Configurer] -- Built next config and the header did not change.",  (uint8_t *)&__p,  2u);
          }

          goto LABEL_52;
        }

        if (!memcmp(__s1.__r_.__value_.__l.__data_, v10, __s1.__r_.__value_.__l.__size_)) {
          goto LABEL_50;
        }
      }

LABEL_22:
    _BYTE *v5 = v2;
    uint64_t v19 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }

  unint64_t v14 = *v6;
  char v15 = &v5[-*v6];
  unint64_t v16 = (unint64_t)(v15 + 1);
  unint64_t v17 = v13 - v14;
  if (2 * v17 > v16) {
    unint64_t v16 = 2 * v17;
  }
  if (v17 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v18 = v16;
  }
  if (v18) {
    int v12 = operator new(v18);
  }
  else {
    int v12 = 0LL;
  }
  uint64_t v20 = &v15[(void)v12];
  __int128 v21 = (char *)v12 + v18;
  v15[(void)v12] = v2;
  uint64_t v19 = (uint64_t)&v15[(void)v12 + 1];
  if (v5 != (_BYTE *)v14)
  {
    unint64_t v29 = &v5[~v14];
    do
    {
      char v30 = *--v5;
      (v29--)[(void)v12] = v30;
    }

    while (v5 != (_BYTE *)v14);
    goto LABEL_45;
  }

    _BYTE *v5 = v2;
    uint64_t v19 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }

  unint64_t v14 = *v6;
  char v15 = &v5[-*v6];
  unint64_t v16 = (unint64_t)(v15 + 1);
  unint64_t v17 = v13 - v14;
  if (2 * v17 > v16) {
    unint64_t v16 = 2 * v17;
  }
  if (v17 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v18 = v16;
  }
  if (v18) {
    int v12 = operator new(v18);
  }
  else {
    int v12 = 0LL;
  }
  uint64_t v20 = &v15[(void)v12];
  __int128 v21 = (char *)v12 + v18;
  v15[(void)v12] = v2;
  uint64_t v19 = (uint64_t)&v15[(void)v12 + 1];
  if (v5 != (_BYTE *)v14)
  {
    unint64_t v29 = &v5[~v14];
    do
    {
      char v30 = *--v5;
      (v29--)[(void)v12] = v30;
    }

    while (v5 != (_BYTE *)v14);
    goto LABEL_45;
  }

        v103 = 0xAAAAAAAAAAAAAAAALL;
        v104 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
        *((void *)&v118 + 1) = 0LL;
        sub_100026984(&v106, (uint64_t)buf, 1, &v103);
        char v23 = (uint8_t *)*((void *)&v118 + 1);
        if (*((uint8_t **)&v118 + 1) == buf)
        {
          unint64_t v24 = 4LL;
          char v23 = buf;
        }

        else
        {
          if (!*((void *)&v118 + 1)) {
            goto LABEL_30;
          }
          unint64_t v24 = 5LL;
        }

        (*(void (**)(void))(*(void *)v23 + 8 * v24))();
LABEL_30:
        v102 = &v103;
        sub_1000638FC((uint64_t *)&v102, (uint64_t)buf);
        sub_10006397C((uint64_t *)&v102, (uint64_t)&v94);
        while (!sub_10001855C((unsigned __int8 **)buf, &v94))
        {
          v114 = -1431655766;
          *(_OWORD *)v110 = 0u;
          v111 = 0u;
          v112 = 0u;
          memset(v113, 0, sizeof(v113));
          sub_100025178(&v113[8], *(uint64_t **)(a1 + 8));
          unint64_t v27 = (__int128 *)sub_100005064(v115, v4);
          sub_100072258(v27, &v93);
          size_t v28 = (char *)v110[1];
          if (v110[1] >= (void *)v111)
          {
            unint64_t v29 = ((char *)v110[1] - (char *)v110[0]) >> 4;
            char v30 = v29 + 1;
            unsigned int v31 = v111 - (unint64_t)v110[0];
            else {
              char v32 = v30;
            }
            uint64_t v109 = &v111;
            char v33 = (char *)sub_1000047F4((uint64_t)&v111, v32);
            std::string v35 = &v33[16 * v29];
            *(_OWORD *)std::string v35 = v93;
            v93 = 0uLL;
            char v37 = v110[0];
            unint64_t v36 = v110[1];
            if (v110[1] == v110[0])
            {
              unint64_t v40 = vdupq_n_s64((unint64_t)v110[1]);
              std::exception v38 = &v33[16 * v29];
            }

            else
            {
              std::exception v38 = &v33[16 * v29];
              do
              {
                unint64_t v39 = *((_OWORD *)v36 - 1);
                v36 -= 2;
                *((_OWORD *)v38 - 1) = v39;
                v38 -= 16;
                *unint64_t v36 = 0LL;
                v36[1] = 0LL;
              }

              while (v36 != v37);
              unint64_t v40 = *(int64x2_t *)v110;
            }

            uint64_t v41 = v35 + 16;
            v110[0] = v38;
            v110[1] = v35 + 16;
            *(int64x2_t *)&v107[8] = v40;
            __int128 v42 = v111;
            *(void *)&v111 = &v33[16 * v34];
            v108 = v42;
            *(void *)std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v107 = v40.i64[0];
            sub_10003AAA8((uint64_t)v107);
            unint64_t v43 = (std::__shared_weak_count *)*((void *)&v93 + 1);
            v110[1] = v41;
            if (*((void *)&v93 + 1))
            {
              int v44 = (unint64_t *)(*((void *)&v93 + 1) + 8LL);
              do
                int v45 = __ldaxr(v44);
              while (__stlxr(v45 - 1, v44));
              if (!v45)
              {
                ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
                std::__shared_weak_count::__release_weak(v43);
              }
            }
          }

          else
          {
            *(_OWORD *)v110[1] = v93;
            v93 = 0uLL;
            v110[1] = v28 + 16;
          }

          if (v116 < 0) {
            operator delete(*(void **)v115);
          }
          char v46 = (void **)v7[6];
          BOOL v47 = sub_100018150((unsigned __int8 **)buf);
          sub_1000B0590(v46, (uint64_t)v110, v47);
          (*(void (**)(void, void *))(*(void *)*v7 + 24LL))(*v7, v110[0]);
          uint64_t v48 = *(std::__shared_weak_count **)&v113[16];
          if (*(void *)&v113[16])
          {
            unint64_t v49 = (unint64_t *)(*(void *)&v113[16] + 8LL);
            do
              int v50 = __ldaxr(v49);
            while (__stlxr(v50 - 1, v49));
            if (!v50)
            {
              ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
              std::__shared_weak_count::__release_weak(v48);
            }
          }

          *(void *)std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v107 = (char *)&v111 + 8;
          sub_100004D64((void ***)v107);
          *(void *)std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v107 = v110;
          sub_1000100E4((void ***)v107);
          sub_100018704((unsigned __int8 **)buf);
          ++*((void *)&v119 + 1);
        }

        if (v101 < 0) {
          operator delete(__p);
        }
        if (v99 < 0) {
          operator delete(v98);
        }
        if (v123 < 0) {
          operator delete(v122);
        }
        if (SHIBYTE(v121) < 0) {
          operator delete(*(void **)&v120[8]);
        }
        goto LABEL_127;
      }
    }

    else if (SHIBYTE(v105[2]) == 10)
    {
      if (v105[0] != (void *)0x6C6143746E657665LL || LOWORD(v105[1]) != 29548)
      {
        uint64_t v9 = v105;
        goto LABEL_16;
      }

      goto LABEL_22;
    }

      if (!v8) {
        goto LABEL_23;
      }
    }

    __int128 v22 = (void **)0xAAAAAAAAAAAAAAAALL;
    char v23 = 0xAAAAAAAAAAAAAAAALL;
    char v33 = 0LL;
    sub_100026984(&v21, (uint64_t)&block, 1, &v22);
    p_blocuint64_t k = v33;
    if (v33 == &block)
    {
      p_blocuint64_t k = &block;
      unint64_t v10 = 4LL;
    }

    else
    {
      if (!v33) {
        goto LABEL_11;
      }
      unint64_t v10 = 5LL;
    }

    ((void (*)(void))(*p_block)[v10])();
LABEL_11:
    unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v17 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    if (v20)
    {
      char v33 = 0LL;
      sub_100026984(&v20, (uint64_t)&block, 1, &v16);
      size_t v11 = v33;
      if (v33 == &block)
      {
        size_t v11 = &block;
        int v12 = 4LL;
        goto LABEL_17;
      }

      if (v33)
      {
        int v12 = 5LL;
LABEL_17:
        ((void (*)(void))(*v11)[v12])();
      }
    }

    else
    {
      LOBYTE(v16) = 0;
      unint64_t v17 = 0LL;
      sub_1000041AC((uint64_t)&v16);
      sub_1000041AC((uint64_t)&v16);
    }

    if (v22 | v16)
    {
      unint64_t v13 = *(void *)(a3 + 24);
      if (!v13) {
        sub_1000129CC();
      }
      (*(void (**)(uint64_t, void ***, unint64_t *))(*(void *)v13 + 48LL))(v13, &v22, &v16);
    }

    sub_1000041AC((uint64_t)&v16);
    sub_10000425C(&v17, v16);
    sub_1000041AC((uint64_t)&v22);
    sub_10000425C((uint64_t **)&v23, v22);
    goto LABEL_22;
  }

  sub_10008ED38(a1, (unsigned __int8 *)&v34, a3, (uint64_t)&v29);
  char v23 = *(_DWORD *)(a1 + 108);
  unint64_t v24 = *(double *)(a1 + 72);
  unint64_t v25 = *(_DWORD *)(a1 + 80);
  unint64_t v26 = *(void *)(*(void *)(a1 + 40) + 88LL);
  size_t v28 = sub_10008F0B8(v27, (std::string *)&v34);
  sub_10008F234((unsigned __int8 *)&v34, (uint64_t)v38);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, void **))(*(void *)v26 + 16LL))(v31, v26, v28, v38);
  uint64_t v41 = *(_OWORD *)v31;
  __int128 v42 = v31[2];
  memset(v31, 0, 24);
  unint64_t v43 = 1;
  sub_10008FA68( a4,  a2,  (__int128 *)&__p,  (__int128 *)&__dst,  (uint64_t)&v29,  v23,  v12,  v25,  v24,  (void *)(a1 + 88),  &v41);
  if (v43 && SHIBYTE(v42) < 0) {
    operator delete((void *)v41);
  }
  if (SHIBYTE(v31[2]) < 0) {
    operator delete(v31[0]);
  }
  if (v40 && v39 < 0) {
    operator delete(v38[0]);
  }
  sub_1000041AC((uint64_t)&v29);
  sub_10000425C((uint64_t **)&v29.__r_.__value_.__l.__size_, v29.__r_.__value_.__s.__data_[0]);
  sub_1000041AC((uint64_t)&v34);
  sub_10000425C(&v35, v34);
}

    uint64_t v19 = (v24 - 1) & v24;
    __int128 v71 = v25;
    __int128 v22 = __clz(__rbit64(v24)) + (v25 << 6);
LABEL_23:
    unint64_t v27 = (uint64_t *)(*(void *)(v14 + 48) + 16 * v22);
    size_t v28 = *v27;
    unint64_t v29 = v27[1];
    char v30 = *(void *)((char *)v11 + v70);
    unsigned int v31 = *(void *)(v30 + 16);
    swift_bridgeObjectRetain(v29);
    if (!v31) {
      goto LABEL_28;
    }
    swift_bridgeObjectRetain(v29);
    char v32 = sub_1000A4C24(v28, v29);
    if ((v33 & 1) != 0)
    {
      __int16 v34 = *(void *)(*(void *)(v30 + 56) + 8 * v32);
      swift_bridgeObjectRelease_n(v29, 2LL);
      std::string v35 = (void *)(*(uint64_t (**)(uint64_t))((swift_isaMask & *(void *)v11) + 0x80LL))(v34);
      type = xpc_get_type(v35);
      if (type == (xpc_type_t)XPC_TYPE_DICTIONARY.getter() && xpc_dictionary_get_string(v35, "error"))
      {
        uint64_t v48 = sub_1000A5440();
        unint64_t v49 = v62;
        int v50 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v62, v48, v2);
        uint64_t v51 = (os_log_s *)Logger.logObject.getter(v50);
        char v52 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v51, v52))
        {
          std::string v53 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)std::string v53 = 0;
          _os_log_impl((void *)&_mh_execute_header, v51, v52, "Failed to subscribe to user data changes", v53, 2u);
          swift_slowDealloc(v53, -1LL, -1LL);
        }

        swift_unknownObjectRelease(v35, v54);
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v49, v2);
        uint64_t v20 = v63;
        char v15 = v71;
      }

      else
      {
        uint64_t result = swift_unknownObjectRelease(v35, v37);
        char v15 = v71;
      }
    }

    else
    {
      swift_bridgeObjectRelease(v29);
LABEL_28:
      std::exception v38 = sub_1000A5440();
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v20, v38, v2);
      unint64_t v39 = swift_bridgeObjectRetain(v29);
      unint64_t v40 = (os_log_s *)Logger.logObject.getter(v39);
      uint64_t v41 = v20;
      __int128 v42 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v40, v42))
      {
        unint64_t v43 = swift_slowAlloc(12LL, -1LL);
        int v44 = v3;
        int v45 = v2;
        char v46 = swift_slowAlloc(32LL, -1LL);
        uint64_t v72 = v46;
        *(_DWORD *)unint64_t v43 = v65;
        swift_bridgeObjectRetain(v29);
        *(void *)(v43 + 4) = sub_1000A45E4(v28, v29, &v72);
        swift_bridgeObjectRelease_n(v29, 3LL);
        _os_log_impl((void *)&_mh_execute_header, v40, v42, "Unexpected argument key: %s", (uint8_t *)v43, 0xCu);
        swift_arrayDestroy(v46, 1LL, v64);
        BOOL v47 = v46;
        char v2 = v45;
        uint64_t v3 = v44;
        size_t v11 = v66;
        swift_slowDealloc(v47, -1LL, -1LL);
        swift_slowDealloc(v43, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(v29, 2LL);
      }

      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v41, v2);
      uint64_t v20 = v41;
      unint64_t v14 = v68;
      char v15 = v71;
    }
  }

  unint64_t v26 = v15 + 4;
  if (v15 + 4 >= v69)
  {
LABEL_34:

    return swift_release(v14);
  }

  unint64_t v24 = *(void *)(v67 + 8 * v26);
  if (v24)
  {
    unint64_t v25 = v15 + 4;
    goto LABEL_22;
  }

  while (1)
  {
    unint64_t v25 = v26 + 1;
    if (__OFADD__(v26, 1LL)) {
      break;
    }
    if (v25 >= v69) {
      goto LABEL_34;
    }
    unint64_t v24 = *(void *)(v67 + 8 * v25);
    ++v26;
    if (v24) {
      goto LABEL_22;
    }
  }

        uint64_t v20 = 1;
LABEL_40:
        sub_1000041AC((uint64_t)v29);
        sub_10000425C(&v29[1], LOBYTE(v29[0]));
        if (v20) {
          return v9;
        }
      }

      __int128 v21 = sub_100018150((unsigned __int8 **)v28);
      LODWORD(__p) = 7;
      __int128 v22 = *(void *)(a2 + 24);
      if (!v22) {
        goto LABEL_48;
      }
      goto LABEL_38;
    }
  }

  return 0LL;
}

uint64_t sub_100035D74(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  *(void *)a1 = off_100127038;
  *(void *)(a1 + sub_100007004((uint64_t)v1 + 8) = a3;
  size_t v11 = (const std::locale *)(a1 + 16);
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  __int128 v12 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 8sub_100007004((uint64_t)v1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = v12;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_BYTE *)(a1 + 16sub_100007004((uint64_t)v1 + 8) = a4;
  *(_BYTE *)(a1 + 169) = a5;
  *(_BYTE *)(a1 + 170) = a6;
  std::locale::locale(&v15, v11);
  std::locale::name(&v16, &v15);
  if ((char)v16.__r_.__value_.__s.__size_ < 0)
  {
    BOOL v13 = v16.__r_.__value_.__l.__size_ != 1 || *v16.__r_.__value_.__l.__data_ != 67;
    operator delete(v16.__r_.__value_.__l.__data_);
  }

  else
  {
    BOOL v13 = v16.__r_.__value_.__s.__size_ != 1 || v16.__r_.__value_.__s.__data_[0] != 67;
  }

  std::locale::~locale(&v15);
  *(_BYTE *)(a1 + 171) = v13;
  return a1;
}

void sub_100035EB0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, void *a11)
{
  a11 = v11 + 17;
  sub_100015E44((void ***)&a11);
  std::locale v15 = (void *)v11[14];
  if (v15)
  {
    v11[15] = v15;
    operator delete(v15);
  }

  sub_100036A18((void ***)&a11);
  std::string v16 = (void *)v11[8];
  if (v16)
  {
    v11[9] = v16;
    operator delete(v16);
  }

  unint64_t v17 = *v13;
  if (*v13)
  {
    v11[6] = v17;
    operator delete(v17);
  }

  std::locale::~locale(v12);
  *size_t v11 = &off_100126CF0;
  uint64_t v18 = v11[1];
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
  }
  _Unwind_Resume(a1);
}

std::locale *sub_100035F3C(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_100127038;
  unint64_t v7 = a1 + 17;
  sub_100015E44((void ***)&v7);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }

  unint64_t v7 = a1 + 11;
  sub_100036A18((void ***)&v7);
  uint64_t v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }

  unint64_t v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }

  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_100126CF0;
  unsigned int v5 = a1[1].__locale_;
  if (v5) {
    (*(void (**)(std::locale::__imp *))(*(void *)v5 + 8LL))(v5);
  }
  return a1;
}

void sub_10003601C(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_100127038;
  uint64_t v6 = a1 + 17;
  sub_100015E44((void ***)&v6);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }

  uint64_t v6 = a1 + 11;
  sub_100036A18((void ***)&v6);
  uint64_t v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }

  unint64_t v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }

  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_100126CF0;
  unsigned int v5 = a1[1].__locale_;
  if (v5) {
    (*(void (**)(std::locale::__imp *))(*(void *)v5 + 8LL))(v5);
  }
  operator delete(a1);
}

void sub_100036100(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(signed __int8 **)(a2 + 16);
  unsigned int v5 = *(signed __int8 **)(a2 + 24);
  if (v4 == v5)
  {
    uint64_t v37 = 0LL;
    int v36 = *(unsigned __int8 *)(a1 + 168);
    goto LABEL_221;
  }

  if (!*(_BYTE *)(a1 + 171) || v4 + 1 == v5) {
    goto LABEL_58;
  }
  signed __int8 v6 = *v4;
  unsigned __int8 v121 = *v4;
  signed __int8 v7 = v4[1];
  unsigned __int8 v122 = v7;
  if (*(_BYTE *)(a1 + 169))
  {
    unsigned __int8 v121 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40LL))( *(void *)(a1 + 24),  v6);
    unsigned __int8 v122 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40LL))( *(void *)(a1 + 24),  v7);
  }

  uint64_t v8 = a1 + 16;
  sub_100036C04(a1 + 16, (char *)&v121, (char *)&v123, &__p);
  if (((char)__p.__r_.__value_.__s.__size_ & 0x80000000) == 0)
  {
    if (__p.__r_.__value_.__s.__size_) {
      goto LABEL_8;
    }
LABEL_58:
    int v36 = 0;
    uint64_t v37 = 1LL;
    goto LABEL_59;
  }

  std::string::size_type size = __p.__r_.__value_.__l.__size_;
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!size) {
    goto LABEL_58;
  }
LABEL_8:
  uint64_t v9 = *(void *)(a1 + 112);
  uint64_t v10 = *(void *)(a1 + 120) - v9;
  if (v10)
  {
    uint64_t v11 = v10 >> 1;
    __int128 v12 = (_BYTE *)(v9 + 1);
    do
    {
      v12 += 2;
      --v11;
    }

    while (v11);
  }

  if (!*(_BYTE *)(a1 + 170) || *(void *)(a1 + 88) == *(void *)(a1 + 96))
  {
    int v36 = 0;
  }

  else
  {
    memset(&__p, 170, sizeof(__p));
    sub_100036B20(a1 + 16, (char *)&v121, (char *)&v123);
    uint64_t v14 = *(void *)(a1 + 88);
    unsigned __int8 v15 = __p.__r_.__value_.__s.__size_;
    uint64_t v16 = *(void *)(a1 + 96) - v14;
    if (v16)
    {
      uint64_t v17 = 0LL;
      unint64_t v18 = v16 / 48;
      unsigned __int8 v111 = __p.__r_.__value_.__s.__size_;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v19 = __p.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v19 = __p.__r_.__value_.__l.__size_;
      }
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (v18 <= 1) {
        uint64_t v21 = 1LL;
      }
      else {
        uint64_t v21 = v16 / 48;
      }
      BOOL v22 = 1;
      while (1)
      {
        int v23 = *(char *)(v14 + 23);
        if (v23 >= 0) {
          size_t v24 = *(unsigned __int8 *)(v14 + 23);
        }
        else {
          size_t v24 = *(void *)(v14 + 8);
        }
        if (v23 >= 0) {
          unint64_t v25 = (const void *)v14;
        }
        else {
          unint64_t v25 = *(const void **)v14;
        }
        if (v24 >= v19) {
          size_t v26 = v19;
        }
        else {
          size_t v26 = v24;
        }
        int v27 = memcmp(p_p, v25, v26);
        BOOL v28 = v19 >= v24;
        if (v27) {
          BOOL v28 = v27 >= 0;
        }
        if (v28)
        {
          int v29 = *(char *)(v14 + 47);
          if (v29 >= 0) {
            size_t v30 = *(unsigned __int8 *)(v14 + 47);
          }
          else {
            size_t v30 = *(void *)(v14 + 32);
          }
          if (v29 >= 0) {
            unsigned int v31 = (const void *)(v14 + 24);
          }
          else {
            unsigned int v31 = *(const void **)(v14 + 24);
          }
          if (v19 >= v30) {
            size_t v32 = v30;
          }
          else {
            size_t v32 = v19;
          }
          int v33 = memcmp(v31, p_p, v32);
          BOOL v34 = v30 >= v19;
          if (v33) {
            BOOL v34 = v33 >= 0;
          }
          if (v34) {
            break;
          }
        }

        BOOL v22 = ++v17 < v18;
        v14 += 48LL;
        if (v21 == v17)
        {
          int v35 = 0;
          int v36 = 0;
          goto LABEL_162;
        }
      }

      int v36 = 1;
      int v35 = 5;
LABEL_162:
      uint64_t v8 = a1 + 16;
      unsigned __int8 v15 = v111;
    }

    else
    {
      BOOL v22 = 0;
      int v35 = 0;
      int v36 = 0;
    }

    if ((v15 & 0x80) != 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v22) {
      goto LABEL_195;
    }
  }

  if (*(void *)(a1 + 136) == *(void *)(a1 + 144)) {
    goto LABEL_200;
  }
  memset(&__p, 170, sizeof(__p));
  sub_100036E78(v8, (char *)&v121, (char *)&v123, &__p);
  uint64_t v88 = *(void *)(a1 + 136);
  uint64_t v89 = __p.__r_.__value_.__s.__size_;
  uint64_t v90 = *(void *)(a1 + 144) - v88;
  if (v90)
  {
    uint64_t v91 = 0LL;
    unint64_t v92 = v90 / 24;
    __int128 v93 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v94 = __p.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v94 = __p.__r_.__value_.__l.__size_;
    }
    if (v92 <= 1) {
      uint64_t v95 = 1LL;
    }
    else {
      uint64_t v95 = v90 / 24;
    }
    BOOL v96 = 1;
    while (1)
    {
      v97 = (unsigned __int8 **)(v88 + 24 * v91);
      v98 = (unsigned __int8 *)*((unsigned __int8 *)v97 + 23);
      int v99 = (char)v98;
      if ((unsigned __int8 *)v94 == v98)
      {
        if (v99 >= 0) {
          v100 = (unsigned __int8 *)(v88 + 24 * v91);
        }
        else {
          v100 = *v97;
        }
        if ((v89 & 0x80) == 0)
        {
          if ((_DWORD)v89)
          {
            v101 = &__p;
            uint64_t v102 = v89;
            do
            {
              v101 = (std::string *)((char *)v101 + 1);
              ++v100;
              --v102;
            }

            while (v102);
            int v36 = 1;
            int v35 = 5;
            goto LABEL_192;
          }

          int v36 = 1;
          if (v96) {
            goto LABEL_220;
          }
LABEL_200:
          if ((char)v121 < 0)
          {
            int v107 = *(_DWORD *)(a1 + 164);
            goto LABEL_213;
          }

          int v104 = *(_DWORD *)(a1 + 160);
          uint64_t v105 = *(void *)(*(void *)(a1 + 24) + 16LL);
          int v106 = *(_DWORD *)(v105 + 4LL * v121);
          if ((v106 & v104) == 0 && (v121 != 95 || (v104 & 0x80) == 0)
            || (char)v122 < 0
            || (*(_DWORD *)(v105 + 4LL * v122) & v104) == 0 && ((v104 & 0x80) == 0 || v122 != 95))
          {
            int v107 = *(_DWORD *)(a1 + 164);
            if ((v106 & v107) != 0 || v121 == 95 && (v107 & 0x80) != 0)
            {
LABEL_217:
              int v108 = v36;
              goto LABEL_219;
            }

LABEL_213:
            if (((char)v122 & 0x80000000) == 0)
            {
              if ((*(_DWORD *)(*(void *)(*(void *)(a1 + 24) + 16LL) + 4LL * v122) & v107) != 0) {
                goto LABEL_217;
              }
              int v108 = 1;
              if (v122 == 95 && (v107 & 0x80) != 0) {
                goto LABEL_217;
              }
LABEL_219:
              int v36 = v108;
LABEL_220:
              uint64_t v37 = 2LL;
              goto LABEL_221;
            }
          }

LABEL_218:
          int v108 = 1;
          goto LABEL_219;
        }

        unint64_t v116 = v92;
        uint64_t v119 = v89;
        int v103 = memcmp((const void *)v93, v100, *((size_t *)&v93 + 1));
        unint64_t v92 = v116;
        uint64_t v89 = v119;
        if (!v103) {
          break;
        }
      }

LABEL_188:
      BOOL v96 = ++v91 < v92;
      if (v91 == v95) {
        goto LABEL_191;
      }
    }

    int v35 = 5;
    int v36 = 1;
    goto LABEL_193;
  }

  BOOL v96 = 0;
LABEL_191:
  int v35 = 0;
LABEL_192:
  if ((v89 & 0x80) != 0) {
LABEL_193:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!v96) {
    goto LABEL_200;
  }
LABEL_195:
  if (v35) {
    goto LABEL_220;
  }
  uint64_t v37 = 2LL;
LABEL_59:
  unsigned __int8 v39 = **(_BYTE **)(a2 + 16);
  unsigned __int8 v121 = v39;
  if (*(_BYTE *)(a1 + 169))
  {
    unsigned __int8 v39 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40LL))( *(void *)(a1 + 24),  (char)v39);
    unsigned __int8 v121 = v39;
  }

  unint64_t v40 = *(unsigned __int8 **)(a1 + 40);
  unint64_t v41 = *(void *)(a1 + 48) - (void)v40;
  if (v41)
  {
    if (v41 <= 1) {
      unint64_t v41 = 1LL;
    }
    while (1)
    {
      int v42 = *v40++;
      if (v42 == v39) {
        break;
      }
      if (!--v41) {
        goto LABEL_66;
      }
    }

LABEL_77:
    int v36 = 1;
    goto LABEL_221;
  }

LABEL_221:
  if (v36 == *(unsigned __int8 *)(a1 + 168))
  {
    uint64_t v109 = 0LL;
    int v110 = -993;
  }

  else
  {
    *(void *)(a2 + 16) += v37;
    uint64_t v109 = *(void *)(a1 + 8);
    int v110 = -995;
  }

  *(_DWORD *)a2 = v110;
  *(void *)(a2 + 80) = v109;
}

void sub_100036A18(void ***a1)
{
  uint64_t v1 = *a1;
  char v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unsigned int v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48LL;
        sub_100036A9C((uint64_t)(v1 + 2), v4);
      }

      while ((void *)v4 != v2);
      unsigned int v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void sub_100036A9C(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100036AE0(uint64_t a1)
{
  return a1;
}

void sub_100036B20(uint64_t a1, char *a2, char *a3)
{
  uint64_t v4 = (char *)__p[1];
  if (SHIBYTE(__p[2]) >= 0) {
    unsigned int v5 = __p;
  }
  else {
    unsigned int v5 = (void **)__p[0];
  }
  if (SHIBYTE(__p[2]) >= 0) {
    uint64_t v4 = (char *)HIBYTE(__p[2]);
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 16) + 32LL))( *(void *)(a1 + 16),  v5,  &v4[(void)v5]);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_100036BE0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100036C04(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, std::string *a4@<X8>)
{
  a4->__r_.__value_.__r.__words[0] = 0LL;
  a4->__r_.__value_.__l.__size_ = 0LL;
  a4->__r_.__value_.__l.__cap_ = 0LL;
  if ((char)__s.__r_.__value_.__s.__size_ < 0)
  {
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
    if (!__s.__r_.__value_.__l.__size_) {
      goto LABEL_10;
    }
  }

  else
  {
    if (!__s.__r_.__value_.__s.__size_) {
      return;
    }
    p_s = &__s;
  }

  std::__get_collation_name(&v12, (const char *)p_s);
  *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)&v12.__r_.__value_.__l.__data_;
  std::string::size_type cap = v12.__r_.__value_.__l.__cap_;
  a4->__r_.__value_.__l.__cap_ = v12.__r_.__value_.__l.__cap_;
  std::string::size_type size = HIBYTE(cap);
  if ((size & 0x80u) != 0LL) {
    std::string::size_type size = a4->__r_.__value_.__l.__size_;
  }
  if (size) {
    goto LABEL_8;
  }
  if ((char)__s.__r_.__value_.__s.__size_ < 0)
  {
    std::string::size_type v9 = __s.__r_.__value_.__l.__size_;
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
    if (__s.__r_.__value_.__l.__size_ < 3)
    {
LABEL_16:
      (*(void (**)(std::string *__return_ptr, void, std::string *, char *))(**(void **)(a1 + 16) + 32LL))( &v12,  *(void *)(a1 + 16),  p_s,  (char *)p_s + v9);
      *a4 = v12;
      if ((char)a4->__r_.__value_.__s.__size_ < 0)
      {
        std::string::size_type v11 = a4->__r_.__value_.__l.__size_;
        if (v11 != 1 && v11 != 12)
        {
          *a4->__r_.__value_.__l.__data_ = 0;
          a4->__r_.__value_.__l.__size_ = 0LL;
          goto LABEL_8;
        }
      }

      else
      {
        int v10 = a4->__r_.__value_.__s.__size_;
        if (v10 != 12 && v10 != 1)
        {
          a4->__r_.__value_.__s.__data_[0] = 0;
          a4->__r_.__value_.__s.__size_ = 0;
LABEL_8:
          p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
          goto LABEL_10;
        }
      }

      std::string::operator=(a4, &__s);
      goto LABEL_8;
    }

void sub_100036D98( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100036DD4(void *result, char *a2, char *a3, unint64_t a4)
{
  uint64_t v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8LL) {
    sub_100005114();
  }
  if (a4 > 0x16)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t result = operator new(v8 + 1);
    v4[1] = a4;
    void v4[2] = v9 | 0x8000000000000000LL;
    void *v4 = result;
    uint64_t v4 = result;
  }

  else
  {
    *((_BYTE *)result + 23) = a4;
  }

  while (a2 != a3)
  {
    char v10 = *a2++;
    *(_BYTE *)uint64_t v4 = v10;
    uint64_t v4 = (void *)((char *)v4 + 1);
  }

  *(_BYTE *)uint64_t v4 = 0;
  return result;
}

void sub_100036E78(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, void *a4@<X8>)
{
  signed __int8 v6 = (char *)__p[1];
  if (SHIBYTE(__p[2]) >= 0) {
    signed __int8 v7 = __p;
  }
  else {
    signed __int8 v7 = (void **)__p[0];
  }
  if (SHIBYTE(__p[2]) >= 0) {
    signed __int8 v6 = (char *)HIBYTE(__p[2]);
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 16) + 32LL))( *(void *)(a1 + 16),  v7,  &v6[(void)v7]);
  uint64_t v8 = *((unsigned __int8 *)a4 + 23);
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0LL) {
    uint64_t v8 = a4[1];
  }
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0) {
        char v10 = a4;
      }
      else {
        char v10 = (_BYTE *)*a4;
      }
      v10[11] = v10[3];
    }

    else if (v9 < 0)
    {
      *(_BYTE *)*a4 = 0;
      a4[1] = 0LL;
    }

    else
    {
      *(_BYTE *)a4 = 0;
      *((_BYTE *)a4 + 23) = 0;
    }
  }

  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_100036F98( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100036FBC()
{
  exceptiouint64_t n = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_brack);
}

void sub_100036FF4(_Unwind_Exception *a1)
{
}

char *sub_100037008(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  uint64_t v4 = a2;
  if (a2 == a3) {
    return v4;
  }
  int v5 = *a2;
  if (v5 == 93) {
    return v4;
  }
  uint64_t v6 = (uint64_t)a4;
  memset(&v26, 0, sizeof(v26));
  if (a2 + 1 == a3 || v5 != 91)
  {
LABEL_9:
    int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_10;
  }

  int v9 = a2[1];
  if (v9 != 46)
  {
    if (v9 == 58)
    {
      char v10 = sub_100037628(a1, a2 + 2, a3, (uint64_t)a4);
      goto LABEL_38;
    }

    if (v9 == 61)
    {
      char v10 = sub_1000373F4(a1, a2 + 2, a3, a4);
LABEL_38:
      uint64_t v6 = (uint64_t)v10;
      char v21 = 0;
      goto LABEL_42;
    }

    goto LABEL_9;
  }

  std::string::size_type v19 = sub_1000376D8(a1, a2 + 2, a3, (uint64_t)&v26);
  uint64_t v4 = v19;
  int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  std::string::size_type size = v26.__r_.__value_.__s.__size_;
  if ((v26.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    std::string::size_type size = v26.__r_.__value_.__l.__size_;
  }
  uint64_t v14 = v19;
  if (!size)
  {
LABEL_10:
    if ((v11 | 0x40) == 0x40)
    {
      int v12 = *v4;
      if (v12 == 92)
      {
        BOOL v13 = v4 + 1;
        if (v11)
        {
          uint64_t v14 = sub_100037914(a1, v13, a3, &v26);
        }

        else
        {
          uint64_t v14 = (char *)sub_1000377F0(a1, (unsigned __int8 *)v13, a3, &v26, v6);
          int v11 = 0;
        }

        goto LABEL_16;
      }
    }

    else
    {
      LOBYTE(v12) = *v4;
    }

    std::string::operator=(&v26, v12);
    uint64_t v14 = v4 + 1;
  }

void sub_10003737C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *__p, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1000373F4(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_33;
  }
  uint64_t v6 = a3 - 2;
  signed __int8 v7 = a2;
  uint64_t v8 = a2;
  for (i = a2; ; uint64_t v8 = i)
  {
    int v10 = *i++;
    if (v10 == 61 && *i == 93) {
      break;
    }
    if (a2 == v6) {
      goto LABEL_33;
    }
    ++v7;
    --v6;
  }

  if (v8 == a3) {
LABEL_33:
  }
    sub_100036FBC();
  memset(&v18, 170, sizeof(v18));
  sub_100038198(a1, a2, v7, &v18);
  if (((char)v18.__r_.__value_.__s.__size_ & 0x80000000) == 0)
  {
    std::string::size_type size = v18.__r_.__value_.__s.__size_;
    if (v18.__r_.__value_.__s.__size_)
    {
      memset(__p, 170, sizeof(__p));
      int v12 = &v18;
      goto LABEL_14;
    }

LABEL_34:
    sub_10003810C();
  }

  std::string::size_type size = v18.__r_.__value_.__l.__size_;
  if (!v18.__r_.__value_.__l.__size_) {
    goto LABEL_34;
  }
  memset(__p, 170, sizeof(__p));
  int v12 = (std::string *)v18.__r_.__value_.__r.__words[0];
LABEL_14:
  sub_100038368(a1, (char *)v12, (char *)v12 + size, __p);
  if (SHIBYTE(__p[2]) < 0)
  {
    if (__p[1]) {
      goto LABEL_16;
    }
  }

  else if (HIBYTE(__p[2]))
  {
LABEL_16:
    sub_100038158(a4, (__int128 *)__p);
    goto LABEL_28;
  }

  std::string::size_type v13 = v18.__r_.__value_.__s.__size_;
  if ((v18.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    std::string::size_type v13 = v18.__r_.__value_.__l.__size_;
  }
  if (v13 == 2)
  {
    int v15 = &v18;
    if ((v18.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      int v15 = (std::string *)v18.__r_.__value_.__r.__words[0];
    }
    sub_100037EE4( (uint64_t)a4,  v15->__r_.__value_.__s.__data_[0],  v15->__r_.__value_.__s.__data_[1]);
  }

  else
  {
    if (v13 != 1) {
      sub_10003810C();
    }
    uint64_t v14 = &v18;
    if ((v18.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      uint64_t v14 = (std::string *)v18.__r_.__value_.__r.__words[0];
    }
    sub_100035B48((uint64_t)a4, v14->__r_.__value_.__s.__data_[0]);
  }

  int v15 = 0LL;
LABEL_35:
  uint64_t v70 = "lastOSVersion";
  unint64_t v73 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&uint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__int128 buf = v16;
  uint64_t v72 = v16;
  sub_100008780((uint64_t)&v63, &v70, (uint64_t)buf);
  uint64_t v65 = (unsigned __int8 *)&v63;
  size_t v66 = 0LL;
  int v67 = 0LL;
  BOOL v68 = 0LL;
  uint64_t v69 = 0x8000000000000000LL;
  sub_100008AC8(&v65);
  if (sub_1000087E8((unsigned __int8 **)buf, &v65))
  {
    uint64_t v17 = sub_10009AE9C();
    if (!v17) {
      goto LABEL_41;
    }
  }

  else
  {
    uint64_t v17 = (uint64_t)sub_100008924((unsigned __int8 **)buf);
  }

  if (*(_BYTE *)v17 == 3)
  {
    std::string v18 = *(__int128 **)(v17 + 8);
    goto LABEL_42;
  }

void sub_1000375E8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100037628(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_11;
  }
  int v5 = a3 - 2;
  uint64_t v6 = a2;
  signed __int8 v7 = a2;
  for (i = a2; ; signed __int8 v7 = i)
  {
    int v9 = *i++;
    if (v9 == 58 && *i == 93) {
      break;
    }
    if (a2 == v5) {
      goto LABEL_11;
    }
    ++v6;
    --v5;
  }

  if (v7 == a3) {
LABEL_11:
  }
    sub_100036FBC();
  int v10 = sub_1000386A8(a1, a2, v6, *(_DWORD *)(a1 + 24) & 1);
  if (!v10) {
    sub_10003865C();
  }
  *(_DWORD *)(a4 + 160) |= v10;
  return v6 + 2;
}

char *sub_1000376D8(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_15;
  }
  int v5 = a3 - 2;
  uint64_t v6 = a2;
  signed __int8 v7 = a2;
  for (i = a2; ; signed __int8 v7 = i)
  {
    int v9 = *i++;
    if (v9 == 46 && *i == 93) {
      break;
    }
    if (a2 == v5) {
      goto LABEL_15;
    }
    ++v6;
    --v5;
  }

  if (v7 == a3) {
LABEL_15:
  }
    sub_100036FBC();
  sub_100038198(a1, a2, v6, &v13);
  *(_OWORD *)a4 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
  std::string::size_type cap = v13.__r_.__value_.__l.__cap_;
  *(void *)(a4 + 16) = v13.__r_.__value_.__l.__cap_;
  std::string::size_type v11 = HIBYTE(cap);
  if ((v11 & 0x80u) != 0LL) {
    std::string::size_type v11 = *(void *)(a4 + 8);
  }
  if (v11 - 1 >= 2) {
    sub_10003810C();
  }
  return v6 + 2;
}

unsigned __int8 *sub_1000377F0(uint64_t a1, unsigned __int8 *a2, char *a3, std::string *this, uint64_t a5)
{
  int v6 = (char)*a2;
  if (v6 > 97)
  {
    if (v6 > 114)
    {
      if (v6 != 115)
      {
        if (v6 != 119) {
          return sub_100034E4C(a1, a2, a3, this);
        }
        *(_DWORD *)(a5 + 160) |= 0x500u;
        sub_100035B48(a5, 95LL);
        return a2 + 1;
      }

      int v8 = *(_DWORD *)(a5 + 160) | 0x4000;
    }

    else
    {
      if (v6 == 98)
      {
        int v10 = this;
        std::string::value_type v9 = 8;
LABEL_19:
        std::string::operator=(v10, v9);
        return a2 + 1;
      }

      if (v6 != 100) {
        return sub_100034E4C(a1, a2, a3, this);
      }
      int v8 = *(_DWORD *)(a5 + 160) | 0x400;
    }

    *(_DWORD *)(a5 + 160) = v8;
    return a2 + 1;
  }

  if (v6 <= 82)
  {
    if (*a2)
    {
      if (v6 == 68)
      {
        int v7 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_21:
        *(_DWORD *)(a5 + 164) = v7;
        return a2 + 1;
      }

      return sub_100034E4C(a1, a2, a3, this);
    }

    std::string::value_type v9 = 0;
    int v10 = this;
    goto LABEL_19;
  }

  if (v6 == 83)
  {
    int v7 = *(_DWORD *)(a5 + 164) | 0x4000;
    goto LABEL_21;
  }

  if (v6 == 87)
  {
    *(_DWORD *)(a5 + 164) |= 0x500u;
    sub_1000387AC(a5, 95LL);
    return a2 + 1;
  }

  return sub_100034E4C(a1, a2, a3, this);
}

char *sub_100037914(uint64_t a1, char *a2, char *a3, std::string *this)
{
  if (a2 == a3) {
LABEL_52:
  }
    sub_100034C80();
  uint64_t v5 = *a2;
  if ((int)v5 > 97)
  {
    switch((int)v5)
    {
      case 'n':
        if (this)
        {
          int v6 = this;
          LOBYTE(v5) = 10;
          goto LABEL_16;
        }

        uint64_t v5 = 10LL;
        goto LABEL_49;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_21;
      case 'r':
        if (this)
        {
          int v6 = this;
          LOBYTE(v5) = 13;
          goto LABEL_16;
        }

        uint64_t v5 = 13LL;
        goto LABEL_49;
      case 't':
        if (this)
        {
          int v6 = this;
          LOBYTE(v5) = 9;
          goto LABEL_16;
        }

        uint64_t v5 = 9LL;
        goto LABEL_49;
      case 'v':
        if (this)
        {
          int v6 = this;
          LOBYTE(v5) = 11;
          goto LABEL_16;
        }

        uint64_t v5 = 11LL;
        goto LABEL_49;
      default:
        if ((_DWORD)v5 == 98)
        {
          if (this)
          {
            int v6 = this;
            LOBYTE(v5) = 8;
            goto LABEL_16;
          }

          uint64_t v5 = 8LL;
        }

        else
        {
          if ((_DWORD)v5 != 102) {
            goto LABEL_21;
          }
          if (this)
          {
            int v6 = this;
            LOBYTE(v5) = 12;
            goto LABEL_16;
          }

          uint64_t v5 = 12LL;
        }

        break;
    }

    goto LABEL_49;
  }

  if ((int)v5 > 91)
  {
    if ((_DWORD)v5 != 92)
    {
      if ((_DWORD)v5 != 97) {
        goto LABEL_21;
      }
      if (this)
      {
        int v6 = this;
        LOBYTE(v5) = 7;
LABEL_16:
        std::string::operator=(v6, v5);
        return a2 + 1;
      }

      uint64_t v5 = 7LL;
LABEL_49:
      sub_100035128(a1, v5);
      return a2 + 1;
    }

void sub_100037AEC(uint64_t a1, char *a2, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2;
  if (*(_BYTE *)(a1 + 170))
  {
    if (*(_BYTE *)(a1 + 169))
    {
      for (unint64_t i = 0LL; ; ++i)
      {
        unint64_t v7 = v4[23] < 0 ? *((void *)v4 + 1) : v4[23];
        if (i >= v7) {
          break;
        }
        int v8 = v4;
        if (v4[23] < 0) {
          int v8 = *(char **)v4;
        }
        char v9 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40LL))( *(void *)(a1 + 24),  v8[i]);
        int v10 = v4;
        if (v4[23] < 0) {
          int v10 = *(char **)v4;
        }
        v10[i] = v9;
      }

      for (unint64_t j = 0LL; ; ++j)
      {
        unint64_t v12 = v3[23] < 0 ? *((void *)v3 + 1) : v3[23];
        if (j >= v12) {
          break;
        }
        std::string v13 = v3;
        if (v3[23] < 0) {
          std::string v13 = *(char **)v3;
        }
        char v14 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40LL))( *(void *)(a1 + 24),  v13[j]);
        int v15 = v3;
        if (v3[23] < 0) {
          int v15 = *(char **)v3;
        }
        v15[j] = v14;
      }
    }

    else
    {
      for (unint64_t k = 0LL; ; ++k)
      {
        unint64_t v18 = a2[23] < 0 ? *((void *)a2 + 1) : a2[23];
        if (k >= v18) {
          break;
        }
        std::string::size_type v19 = a2;
        if (a2[23] < 0) {
          std::string::size_type v19 = *(char **)a2;
        }
        uint64_t v20 = a2;
        if (a2[23] < 0) {
          uint64_t v20 = *(char **)a2;
        }
        v20[k] = v19[k];
      }

      for (unint64_t m = 0LL; ; ++m)
      {
        unint64_t v22 = a3[23] < 0 ? *((void *)a3 + 1) : a3[23];
        if (m >= v22) {
          break;
        }
        int v23 = a3;
        if (a3[23] < 0) {
          int v23 = *(char **)a3;
        }
        std::string v24 = a3;
        if (a3[23] < 0) {
          std::string v24 = *(char **)a3;
        }
        v24[m] = v23[m];
      }
    }

    if (v4[23] < 0)
    {
      std::string v26 = v4;
      uint64_t v4 = *(char **)v4;
      uint64_t v25 = *((void *)v26 + 1);
    }

    else
    {
      uint64_t v25 = v4[23];
    }

    sub_100038B6C(a1 + 16, v4, &v4[v25]);
    if (v3[23] < 0)
    {
      BOOL v28 = v3;
      uint64_t v3 = *(char **)v3;
      uint64_t v27 = *((void *)v28 + 1);
    }

    else
    {
      uint64_t v27 = v3[23];
    }

    sub_100038B6C(a1 + 16, v3, &v3[v27]);
    *(_OWORD *)unint64_t v40 = v38;
    uint64_t v41 = v39;
    *(_OWORD *)std::string __p = *(_OWORD *)v36;
    uint64_t v43 = v37;
    sub_1000389D8((uint64_t *)(a1 + 88), (__int128 *)v40);
    if (SHIBYTE(v43) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v41) < 0) {
      operator delete(v40[0]);
    }
  }

  else
  {
    if (a2[23] < 0) {
      uint64_t v16 = *((void *)a2 + 1);
    }
    else {
      uint64_t v16 = a2[23];
    }
    if (*(_BYTE *)(a1 + 169))
    {
      size_t v30 = a2;
      if (a2[23] < 0) {
        size_t v30 = *(char **)a2;
      }
      char v31 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40LL))( *(void *)(a1 + 24),  *v30);
      size_t v32 = v4;
      if (v4[23] < 0) {
        size_t v32 = *(_BYTE **)v4;
      }
      *size_t v32 = v31;
      int v33 = v3;
      if (v3[23] < 0) {
        int v33 = *(char **)v3;
      }
      char v34 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40LL))( *(void *)(a1 + 24),  *v33);
      int v35 = v3;
      if (v3[23] < 0) {
        int v35 = *(_BYTE **)v3;
      }
      *int v35 = v34;
    }

    *(_OWORD *)unint64_t v40 = *(_OWORD *)v4;
    uint64_t v41 = *((void *)v4 + 2);
    *((void *)v4 + 1) = 0LL;
    *((void *)v4 + 2) = 0LL;
    *(void *)uint64_t v4 = 0LL;
    *(_OWORD *)std::string __p = *(_OWORD *)v3;
    uint64_t v43 = *((void *)v3 + 2);
    *(void *)uint64_t v3 = 0LL;
    *((void *)v3 + 1) = 0LL;
    *((void *)v3 + 2) = 0LL;
    sub_1000389D8((uint64_t *)(a1 + 88), (__int128 *)v40);
    if (SHIBYTE(v43) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v41) < 0) {
      operator delete(v40[0]);
    }
  }

void sub_100037E90( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, char a21)
{
}

void sub_100037EE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(_BYTE *)(a1 + 169))
  {
    uint64_t v18 = a1 + 128;
    unint64_t v19 = *(void *)(a1 + 128);
    int v10 = (char **)(a1 + 112);
    __int16 v8 = a2 | (unsigned __int16)((_WORD)a3 << 8);
    char v9 = *(_WORD **)(a1 + 120);
    if (*(_BYTE *)(a1 + 170))
    {
      uint64_t v20 = (char *)v9 - *v10;
      if (v20 > -3)
      {
        uint64_t v21 = v20 >> 1;
        unint64_t v22 = v19 - (void)*v10;
        if (v22 <= (v20 >> 1) + 1) {
          unint64_t v23 = v21 + 1;
        }
        else {
          unint64_t v23 = v22;
        }
        if (v22 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v24 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v24 = v23;
        }
        if (v24) {
          uint64_t v25 = (char *)sub_100038F30(v18, v24);
        }
        else {
          uint64_t v25 = 0LL;
        }
        uint64_t v27 = &v25[2 * v21];
        BOOL v28 = &v25[2 * v24];
        *(_WORD *)uint64_t v27 = v8;
        std::string v26 = v27 + 2;
        __int128 v38 = *(char **)(a1 + 112);
        uint64_t v29 = *(char **)(a1 + 120);
        if (v29 == v38) {
          goto LABEL_46;
        }
        do
        {
          __int16 v39 = *((_WORD *)v29 - 1);
          v29 -= 2;
          *((_WORD *)v27 - 1) = v39;
          v27 -= 2;
        }

        while (v29 != v38);
        goto LABEL_45;
      }
    }

    else
    {
      uint64_t v32 = (char *)v9 - *v10;
      if (v32 > -3)
      {
        uint64_t v33 = v32 >> 1;
        unint64_t v34 = v19 - (void)*v10;
        if (v34 <= (v32 >> 1) + 1) {
          unint64_t v35 = v33 + 1;
        }
        else {
          unint64_t v35 = v34;
        }
        if (v34 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v36 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v36 = v35;
        }
        if (v36) {
          uint64_t v37 = (char *)sub_100038F30(v18, v36);
        }
        else {
          uint64_t v37 = 0LL;
        }
        uint64_t v27 = &v37[2 * v33];
        BOOL v28 = &v37[2 * v36];
        *(_WORD *)uint64_t v27 = v8;
        std::string v26 = v27 + 2;
        unint64_t v40 = *(char **)(a1 + 112);
        uint64_t v29 = *(char **)(a1 + 120);
        if (v29 == v40) {
          goto LABEL_46;
        }
        do
        {
          __int16 v41 = *((_WORD *)v29 - 1);
          v29 -= 2;
          *((_WORD *)v27 - 1) = v41;
          v27 -= 2;
        }

        while (v29 != v40);
        goto LABEL_45;
      }
    }

LABEL_49:
    sub_1000046F8();
  }

  unsigned __int8 v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40LL))(*(void *)(a1 + 24), a2);
  __int16 v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40LL))(*(void *)(a1 + 24), a3);
  unint64_t v7 = *(void *)(a1 + 128);
  __int16 v8 = v5 | (unsigned __int16)(v6 << 8);
  char v9 = *(_WORD **)(a1 + 120);
  if ((unint64_t)v9 < v7)
  {
LABEL_24:
    *char v9 = v8;
    std::string v26 = v9 + 1;
    goto LABEL_48;
  }

  int v10 = (char **)(a1 + 112);
  uint64_t v11 = *(void *)(a1 + 112);
  uint64_t v12 = (uint64_t)v9 - v11;
  uint64_t v13 = v12 >> 1;
  unint64_t v14 = v7 - v11;
  if (v14 <= (v12 >> 1) + 1) {
    unint64_t v15 = v13 + 1;
  }
  else {
    unint64_t v15 = v14;
  }
  if (v14 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v16 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v16 = v15;
  }
  if (v16) {
    uint64_t v17 = (char *)sub_100038F30(a1 + 128, v16);
  }
  else {
    uint64_t v17 = 0LL;
  }
  uint64_t v27 = &v17[2 * v13];
  BOOL v28 = &v17[2 * v16];
  *(_WORD *)uint64_t v27 = v8;
  std::string v26 = v27 + 2;
  size_t v30 = *(char **)(a1 + 112);
  uint64_t v29 = *(char **)(a1 + 120);
  if (v29 == v30) {
    goto LABEL_46;
  }
  do
  {
    __int16 v31 = *((_WORD *)v29 - 1);
    v29 -= 2;
    *((_WORD *)v27 - 1) = v31;
    v27 -= 2;
  }

  while (v29 != v30);
LABEL_45:
  uint64_t v29 = *v10;
LABEL_46:
  *(void *)(a1 + 112) = v27;
  *(void *)(a1 + 120) = v26;
  *(void *)(a1 + 12sub_100007004((uint64_t)v1 + 8) = v28;
  if (v29) {
    operator delete(v29);
  }
LABEL_48:
  *(void *)(a1 + 120) = v26;
}

void sub_10003810C()
{
  exceptiouint64_t n = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_collate);
}

void sub_100038144(_Unwind_Exception *a1)
{
}

uint64_t sub_100038158(uint64_t *a1, __int128 *a2)
{
  uint64_t v3 = a1 + 17;
  unint64_t v4 = a1[18];
  if (v4 >= a1[19])
  {
    uint64_t result = sub_100038508(v3, a2);
  }

  else
  {
    sub_1000384AC(v3, a2);
    uint64_t result = v4 + 24;
  }

  a1[18] = result;
  return result;
}

void sub_100038198(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, std::string *a4@<X8>)
{
  a4->__r_.__value_.__r.__words[0] = 0LL;
  a4->__r_.__value_.__l.__size_ = 0LL;
  a4->__r_.__value_.__l.__cap_ = 0LL;
  if ((char)__s.__r_.__value_.__s.__size_ < 0)
  {
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
    if (!__s.__r_.__value_.__l.__size_) {
      goto LABEL_10;
    }
  }

  else
  {
    if (!__s.__r_.__value_.__s.__size_) {
      return;
    }
    p_s = &__s;
  }

  std::__get_collation_name(&v12, (const char *)p_s);
  *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)&v12.__r_.__value_.__l.__data_;
  std::string::size_type cap = v12.__r_.__value_.__l.__cap_;
  a4->__r_.__value_.__l.__cap_ = v12.__r_.__value_.__l.__cap_;
  std::string::size_type size = HIBYTE(cap);
  if ((size & 0x80u) != 0LL) {
    std::string::size_type size = a4->__r_.__value_.__l.__size_;
  }
  if (size) {
    goto LABEL_8;
  }
  if ((char)__s.__r_.__value_.__s.__size_ < 0)
  {
    std::string::size_type v9 = __s.__r_.__value_.__l.__size_;
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
    if (__s.__r_.__value_.__l.__size_ < 3)
    {
LABEL_16:
      (*(void (**)(std::string *__return_ptr, void, std::string *, char *))(**(void **)(a1 + 16) + 32LL))( &v12,  *(void *)(a1 + 16),  p_s,  (char *)p_s + v9);
      *a4 = v12;
      if ((char)a4->__r_.__value_.__s.__size_ < 0)
      {
        std::string::size_type v11 = a4->__r_.__value_.__l.__size_;
        if (v11 != 1 && v11 != 12)
        {
          *a4->__r_.__value_.__l.__data_ = 0;
          a4->__r_.__value_.__l.__size_ = 0LL;
          goto LABEL_8;
        }
      }

      else
      {
        int v10 = a4->__r_.__value_.__s.__size_;
        if (v10 != 12 && v10 != 1)
        {
          a4->__r_.__value_.__s.__data_[0] = 0;
          a4->__r_.__value_.__s.__size_ = 0;
LABEL_8:
          p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
          goto LABEL_10;
        }
      }

      std::string::operator=(a4, &__s);
      goto LABEL_8;
    }

void sub_10003832C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100038368(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, void *a4@<X8>)
{
  __int16 v6 = (char *)__p[1];
  if (SHIBYTE(__p[2]) >= 0) {
    unint64_t v7 = __p;
  }
  else {
    unint64_t v7 = (void **)__p[0];
  }
  if (SHIBYTE(__p[2]) >= 0) {
    __int16 v6 = (char *)HIBYTE(__p[2]);
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 16) + 32LL))( *(void *)(a1 + 16),  v7,  &v6[(void)v7]);
  uint64_t v8 = *((unsigned __int8 *)a4 + 23);
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0LL) {
    uint64_t v8 = a4[1];
  }
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0) {
        int v10 = a4;
      }
      else {
        int v10 = (_BYTE *)*a4;
      }
      v10[11] = v10[3];
    }

    else if (v9 < 0)
    {
      *(_BYTE *)*a4 = 0;
      a4[1] = 0LL;
    }

    else
    {
      *(_BYTE *)a4 = 0;
      *((_BYTE *)a4 + 23) = 0;
    }
  }

  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_100038488( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000384AC(void *result, __int128 *a2)
{
  char v2 = result;
  uint64_t v3 = result[1];
  if (*((char *)a2 + 23) < 0)
  {
    uint64_t result = sub_10000B8BC((_BYTE *)result[1], *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v4 = *a2;
    *(void *)(v3 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }

  v2[1] = v3 + 24;
  return result;
}

void sub_100038500(_Unwind_Exception *a1)
{
  *(void *)(v1 + sub_100007004((uint64_t)v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100038508(uint64_t *a1, __int128 *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_1000046F8();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555LL) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v18 = a1 + 2;
  if (v9) {
    int v10 = (char *)sub_1000171F0(v7, v9);
  }
  else {
    int v10 = 0LL;
  }
  std::string::size_type v11 = &v10[24 * v4];
  v15[0] = v10;
  v15[1] = v11;
  uint64_t v16 = v11;
  uint64_t v17 = &v10[24 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    sub_10000B8BC(v11, *(void **)a2, *((void *)a2 + 1));
    std::string::size_type v11 = v16;
  }

  else
  {
    __int128 v12 = *a2;
    *((void *)v11 + 2) = *((void *)a2 + 2);
    *(_OWORD *)std::string::size_type v11 = v12;
  }

  uint64_t v16 = v11 + 24;
  sub_10001717C(a1, v15);
  uint64_t v13 = a1[1];
  sub_100017378((uint64_t)v15);
  return v13;
}

void sub_100038648( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10003865C()
{
  exceptiouint64_t n = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_ctype);
}

void sub_100038694(_Unwind_Exception *a1)
{
}

uint64_t sub_1000386A8(uint64_t a1, char *a2, char *a3, BOOL a4)
{
  __int16 v6 = (char *)__p[1];
  if (SHIBYTE(__p[2]) >= 0) {
    uint64_t v7 = __p;
  }
  else {
    uint64_t v7 = (void **)__p[0];
  }
  if (SHIBYTE(__p[2]) >= 0) {
    __int16 v6 = (char *)HIBYTE(__p[2]);
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 8) + 48LL))( *(void *)(a1 + 8),  v7,  &v6[(void)v7]);
  if (SHIBYTE(__p[2]) >= 0) {
    unint64_t v8 = __p;
  }
  else {
    unint64_t v8 = (void **)__p[0];
  }
  uint64_t classname = std::__get_classname((const char *)v8, a4);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return classname;
}

void sub_100038788( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void sub_1000387AC(uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (*(_BYTE *)(a1 + 169))
  {
    char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40LL))(*(void *)(a1 + 24), a2);
    unint64_t v5 = *(_BYTE **)(a1 + 72);
    unint64_t v4 = *(void *)(a1 + 80);
    if ((unint64_t)v5 >= v4)
    {
      __int16 v6 = (unint64_t *)(a1 + 64);
      unint64_t v7 = *(void *)(a1 + 64);
      unint64_t v8 = &v5[-v7];
      uint64_t v9 = (uint64_t)&v5[-v7 + 1];
      if (v9 >= 0)
      {
        unint64_t v10 = v4 - v7;
        if (2 * v10 > v9) {
          uint64_t v9 = 2 * v10;
        }
        if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v11 = v9;
        }
        if (v11) {
          __int128 v12 = operator new(v11);
        }
        else {
          __int128 v12 = 0LL;
        }
        uint64_t v20 = &v8[(void)v12];
        uint64_t v21 = (char *)v12 + v11;
        v8[(void)v12] = v2;
        uint64_t v19 = (uint64_t)&v8[(void)v12 + 1];
        if (v5 != (_BYTE *)v7)
        {
          unint64_t v22 = &v5[~v7];
          do
          {
            char v23 = *--v5;
            (v22--)[(void)v12] = v23;
          }

          while (v5 != (_BYTE *)v7);
LABEL_45:
          unint64_t v5 = (_BYTE *)*v6;
          goto LABEL_47;
        }

        goto LABEL_46;
      }

void **sub_1000389D8(uint64_t *a1, __int128 *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = (unint64_t)*(result - 1);
  if (v7 >= v6)
  {
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 4);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555LL) {
      sub_1000046F8();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 4);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v14 = 0x555555555555555LL;
    }
    else {
      unint64_t v14 = v12;
    }
    uint64_t v19[4] = result;
    if (v14) {
      unint64_t v15 = (char *)sub_100038D10((uint64_t)result, v14);
    }
    else {
      unint64_t v15 = 0LL;
    }
    unint64_t v16 = &v15[48 * v11];
    v19[0] = v15;
    v19[1] = v16;
    v19[3] = &v15[48 * v14];
    __int128 v17 = *a2;
    *((void *)v16 + 2) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v16 = v17;
    *((void *)a2 + 1) = 0LL;
    *((void *)a2 + 2) = 0LL;
    *(void *)a2 = 0LL;
    __int128 v18 = *(__int128 *)((char *)a2 + 24);
    *((void *)v16 + 5) = *((void *)a2 + 5);
    *(_OWORD *)(v16 + 24) = v18;
    *((void *)a2 + 4) = 0LL;
    *((void *)a2 + 5) = 0LL;
    *((void *)a2 + 3) = 0LL;
    v19[2] = v16 + 48;
    sub_100038C9C(a1, v19);
    uint64_t v10 = a1[1];
    uint64_t result = sub_100038EBC(v19);
  }

  else
  {
    __int128 v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    *((void *)a2 + 1) = 0LL;
    *((void *)a2 + 2) = 0LL;
    *(void *)a2 = 0LL;
    __int128 v9 = *(__int128 *)((char *)a2 + 24);
    *(void *)(v7 + 40) = *((void *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((void *)a2 + 4) = 0LL;
    *((void *)a2 + 5) = 0LL;
    *((void *)a2 + 3) = 0LL;
    uint64_t v10 = v7 + 48;
    a1[1] = v7 + 48;
  }

  a1[1] = v10;
  return result;
}

void sub_100038B58( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_100038B6C(uint64_t a1, char *a2, char *a3)
{
  unint64_t v4 = (char *)__p[1];
  if (SHIBYTE(__p[2]) >= 0) {
    unint64_t v5 = __p;
  }
  else {
    unint64_t v5 = (void **)__p[0];
  }
  if (SHIBYTE(__p[2]) >= 0) {
    unint64_t v4 = (char *)HIBYTE(__p[2]);
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 16) + 32LL))( *(void *)(a1 + 16),  v5,  &v4[(void)v5]);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_100038C2C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100038C50()
{
  exceptiouint64_t n = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_range);
}

void sub_100038C88(_Unwind_Exception *a1)
{
}

uint64_t sub_100038C9C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100038D54((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_100038D10(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556LL) {
    sub_100004828();
  }
  return operator new(48 * a2);
}

uint64_t sub_100038D54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v14 = a6;
  *((void *)&v14 + 1) = a7;
  __int128 v13 = v14;
  v15[0] = a1;
  v15[1] = &v13;
  void v15[2] = &v14;
  unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      __int128 v10 = *(_OWORD *)(a3 - 48);
      *(void *)(v9 - 32) = *(void *)(a3 - 32);
      *(_OWORD *)(v9 - 4sub_100007004((uint64_t)v1 + 8) = v10;
      *(void *)(a3 - 40) = 0LL;
      *(void *)(a3 - 32) = 0LL;
      *(void *)(a3 - 4sub_100007004((uint64_t)v1 + 8) = 0LL;
      __int128 v11 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - sub_100007004((uint64_t)v1 + 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v11;
      v9 -= 48LL;
      *(void *)(a3 - 16) = 0LL;
      *(void *)(a3 - sub_100007004((uint64_t)v1 + 8) = 0LL;
      *(void *)(a3 - 24) = 0LL;
      v7 -= 48LL;
      a3 -= 48LL;
    }

    while (a3 != a5);
    *((void *)&v14 + 1) = v9;
  }

  LOBYTE(v16) = 1;
  sub_100038E38((uint64_t)v15);
  return a6;
}

uint64_t sub_100038E38(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_100038E6C((uint64_t *)a1);
  }
  return a1;
}

void sub_100038E6C(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_100036A9C(v3, v1);
      v1 += 48LL;
    }

    while (v1 != v2);
  }

void **sub_100038EBC(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_100038EEC(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 48;
    sub_100036A9C(v4, i - 48);
  }

void *sub_100038F30(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    sub_100004828();
  }
  return operator new(2 * a2);
}

void *sub_100038F60(void *a1)
{
  *a1 = &off_100126CF0;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  return a1;
}

void sub_100038FA4(void *__p)
{
  *std::string __p = &off_100126CF0;
  uint64_t v2 = __p[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  operator delete(__p);
}

uint64_t sub_100038FE8(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(*(void *)(a2 + 32) + 24LL * (*(_DWORD *)(result + 16) - 1)) = *(void *)(a2 + 16);
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void *sub_100039018(void *a1)
{
  *a1 = &off_100126CF0;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  return a1;
}

void sub_10003905C(void *__p)
{
  *std::string __p = &off_100126CF0;
  uint64_t v2 = __p[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  operator delete(__p);
}

uint64_t sub_1000390A0(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  uint64_t v2 = *(void *)(a2 + 32) + 24LL * (*(_DWORD *)(result + 16) - 1);
  *(void *)(v2 + sub_100007004((uint64_t)v1 + 8) = *(void *)(a2 + 16);
  *(_BYTE *)(v2 + 16) = 1;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void *sub_1000390D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, char a7)
{
  __int128 v14 = operator new(0x10uLL);
  uint64_t v15 = *(void *)(a1 + 56);
  uint64_t v16 = *(void *)(v15 + 8);
  *__int128 v14 = &off_100126C78;
  v14[1] = v16;
  *(void *)(v15 + sub_100007004((uint64_t)v1 + 8) = 0LL;
  __int128 v17 = operator new(0x38uLL);
  LODWORD(v16) = *(_DWORD *)(a1 + 32);
  uint64_t v18 = *(void *)(a4 + 8);
  *__int128 v17 = &off_100127110;
  v17[1] = v18;
  v17[2] = v14;
  v17[3] = a2;
  v17[4] = a3;
  *((_DWORD *)v17 + 10) = v16;
  *((_DWORD *)v17 + 11) = a5;
  *((_DWORD *)v17 + 12) = a6;
  *((_BYTE *)v17 + 52) = a7;
  *(void *)(a4 + sub_100007004((uint64_t)v1 + 8) = 0LL;
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_1001271A0;
  result[1] = v17;
  *(void *)(*(void *)(a1 + 56) + 8LL) = result;
  *(void *)(a1 + 56) = v17[2];
  *(void *)(a4 + sub_100007004((uint64_t)v1 + 8) = v17;
  *(_DWORD *)(a1 + 32) = v16 + 1;
  return result;
}

void sub_1000391C4(_Unwind_Exception *a1)
{
}

unsigned __int8 *sub_10003920C(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, int *a4)
{
  if (a2 != a3)
  {
    int v4 = *a2;
    if ((v4 & 0xF8) == 0x30 || (v4 & 0xFE) == 0x38)
    {
      int v5 = v4 - 48;
      *a4 = v5;
      if (++a2 == a3)
      {
        return a3;
      }

      else
      {
        while (1)
        {
          int v6 = *a2;
          if ((v6 & 0xF8) != 0x30 && (v6 & 0xFE) != 0x38) {
            break;
          }
          if (v5 >= 214748364) {
            sub_1000392A8();
          }
          int v5 = v6 + 10 * v5 - 48;
          *a4 = v5;
          if (++a2 == a3) {
            return a3;
          }
        }
      }
    }
  }

  return a2;
}

void sub_1000392A8()
{
  exceptiouint64_t n = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_badbrace);
}

void sub_1000392E0(_Unwind_Exception *a1)
{
}

void sub_1000392F4()
{
  exceptiouint64_t n = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_brace);
}

void sub_10003932C(_Unwind_Exception *a1)
{
}

void *sub_100039340(void *a1)
{
  *a1 = &off_100127170;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  *a1 = &off_100126CF0;
  uint64_t v3 = a1[1];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  return a1;
}

void sub_1000393A8(void *__p)
{
  *std::string __p = &off_100127170;
  uint64_t v2 = __p[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  *std::string __p = &off_100126CF0;
  uint64_t v3 = __p[1];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  operator delete(__p);
}

unsigned int *sub_100039410(unsigned int *result, void *a2)
{
  uint64_t v2 = result[10];
  uint64_t v3 = a2[7];
  int v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 == -991)
  {
    unint64_t v5 = *v4 + 1;
    unint64_t *v4 = v5;
    unint64_t v6 = *((void *)result + 3);
    unint64_t v7 = *((void *)result + 4);
    BOOL v8 = v5 < v7;
    if (v5 < v7 && v5 >= v6)
    {
      uint64_t v10 = *(void *)(v3 + 16 * v2 + 8);
      BOOL v8 = v5 < v7 && v10 != a2[2];
    }

    if (!v8 || v5 < v6)
    {
      *(_DWORD *)a2 = -994;
      if (!v8) {
        goto LABEL_25;
      }
LABEL_22:
      a2[10] = *((void *)result + 1);
      return sub_1000395C4(result, a2);
    }

    goto LABEL_23;
  }

  unint64_t *v4 = 0LL;
  if (*((void *)result + 4))
  {
    if (*((void *)result + 3))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_22;
    }

unsigned int *sub_1000394C4(unsigned int *result, int a2, void *a3)
{
  *(_DWORD *)a3 = -994;
  if (*((unsigned __int8 *)result + 52) == a2)
  {
    a3[10] = *((void *)result + 2);
  }

  else
  {
    a3[10] = *((void *)result + 1);
    return sub_1000395C4(result, a3);
  }

  return result;
}

void *sub_1000394F4(void *a1)
{
  *a1 = &off_100127170;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  *a1 = &off_100126CF0;
  uint64_t v3 = a1[1];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  return a1;
}

void sub_10003955C(void *__p)
{
  *std::string __p = &off_100127170;
  uint64_t v2 = __p[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  *std::string __p = &off_100126CF0;
  uint64_t v3 = __p[1];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  operator delete(__p);
}

unsigned int *sub_1000395C4(unsigned int *result, void *a2)
{
  unsigned int v2 = result[11];
  *(void *)(a2[7] + 16LL * result[10] + sub_100007004((uint64_t)v1 + 8) = a2[2];
  unsigned int v3 = result[12];
  if (v2 != v3)
  {
    uint64_t v4 = v2 - 1;
    uint64_t v5 = a2[3];
    uint64_t v6 = v3 - 1 - v4;
    uint64_t v7 = a2[4] + 24LL * v4 + 8;
    do
    {
      *(void *)(v7 - sub_100007004((uint64_t)v1 + 8) = v5;
      *(void *)uint64_t v7 = v5;
      *(_BYTE *)(v7 + sub_100007004((uint64_t)v1 + 8) = 0;
      v7 += 24LL;
      --v6;
    }

    while (v6);
  }

  return result;
}

uint64_t sub_100039620(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void *sub_100039634(void *a1)
{
  *a1 = &off_100127170;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  *a1 = &off_100126CF0;
  uint64_t v3 = a1[1];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  return a1;
}

void sub_10003969C(void *__p)
{
  *std::string __p = &off_100127170;
  uint64_t v2 = __p[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  *std::string __p = &off_100126CF0;
  uint64_t v3 = __p[1];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  operator delete(__p);
}

void sub_100039704(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t sub_100039710(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)a3 = -994;
  uint64_t v3 = 8LL;
  if (a2) {
    uint64_t v3 = 16LL;
  }
  *(void *)(a3 + 80) = *(void *)(result + v3);
  return result;
}

uint64_t sub_10003973C(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

uint64_t sub_100039750(uint64_t a1, uint64_t a2, uint64_t a3)
{
  do
  {
    uint64_t v5 = a2;
    a2 = sub_1000397E4(a1, a2, a3);
  }

  while (v5 != a2);
  return v5;
}

void sub_100039798()
{
  exceptiouint64_t n = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, __re_err_empty);
}

void sub_1000397D0(_Unwind_Exception *a1)
{
}

unsigned __int8 *sub_1000397E4(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  int v7 = *(_DWORD *)(a1 + 28);
  BOOL v8 = (unsigned __int8 *)sub_10003986C(a1, a2, a3);
  else {
    return sub_10003997C(a1, v8, (unsigned __int8 *)a3, v6, v7 + 1, *(_DWORD *)(a1 + 28) + 1);
  }
}

char *sub_10003986C(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v6 = sub_100039B48(a1, (char *)a2, a3);
  int v7 = v6;
  if ((char *)a2 == v6 && (char *)a2 != a3 && (char *)(a2 + 1) != a3)
  {
    uint64_t v9 = (uint64_t)v6;
    if (*(_BYTE *)a2 == 92) {
      uint64_t v9 = a2 + 2LL * (*(_BYTE *)(a2 + 1) == 40);
    }
    if (v9 == a2)
    {
      if (*(_BYTE *)a2 == 92)
      {
        int v12 = sub_100039D90(a1, *(_BYTE *)(a2 + 1));
        uint64_t v13 = 2LL;
        if (!v12) {
          uint64_t v13 = 0LL;
        }
        return (char *)(a2 + v13);
      }
    }

    else
    {
      sub_100034A7C((void *)a1);
      int v10 = *(_DWORD *)(a1 + 28);
      __int128 v11 = (char *)sub_100039750(a1, v9, (uint64_t)a3);
      if (v11 == a3 || v11 + 1 == a3 || *v11 != 92 || v11[1] != 41) {
        sub_1000331B0();
      }
      int v7 = v11 + 2;
      sub_100034AE0((void *)a1, v10);
    }
  }

  return v7;
}

unsigned __int8 *sub_10003997C( uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, int a5, int a6)
{
  uint64_t v6 = a2;
  if (a2 != a3)
  {
    int v11 = *a2;
    if (v11 == 42)
    {
      sub_1000390D8(a1, 0LL, -1LL, a4, a5, a6, 1);
      return ++v6;
    }

    if (a2 + 1 != a3 && v11 == 92 && a2[1] == 123)
    {
      uint64_t v13 = a2 + 2;
      int v25 = 0;
      __int128 v14 = sub_10003920C(a1, a2 + 2, a3, &v25);
      if (v13 == v14) {
        goto LABEL_16;
      }
      if (v14 != a3)
      {
        uint64_t v15 = v14 + 1;
        int v16 = *v14;
        if (v16 == 44)
        {
          int v24 = -1;
          __int128 v17 = sub_10003920C(a1, v15, a3, &v24);
          if (v17 != a3 && v17 + 1 != a3 && *v17 == 92 && v17[1] == 125)
          {
            uint64_t v19 = v24;
            uint64_t v18 = v25;
            if (v24 == -1)
            {
              uint64_t v19 = -1LL;
            }

            else if (v24 < v25)
            {
LABEL_16:
              sub_1000392A8();
            }

            uint64_t v6 = &v17[2 * (v17[1] == 125)];
            int v20 = a5;
            int v21 = a6;
            uint64_t v22 = a1;
LABEL_23:
            sub_1000390D8(v22, v18, v19, a4, v20, v21, 1);
            return v6;
          }
        }

        else if (v15 != a3 && v16 == 92 && *v15 == 125)
        {
          uint64_t v6 = v14 + 2;
          uint64_t v18 = v25;
          int v20 = a5;
          int v21 = a6;
          uint64_t v22 = a1;
          uint64_t v19 = v25;
          goto LABEL_23;
        }
      }

      sub_1000392F4();
    }
  }

  return v6;
}

char *sub_100039B48(uint64_t a1, char *a2, char *a3)
{
  if (a2 == a3)
  {
    uint64_t result = sub_100039C50(a1, a2, a3);
    if (result != a2) {
      return result;
    }
    return sub_10003496C(a1, a2, a3);
  }

  int v6 = *a2;
  if ((a2 + 1 != a3 || v6 != 36)
    && ((v6 - 46) > 0x2E || ((1LL << (v6 - 46)) & 0x600000000001LL) == 0))
  {
    sub_100035128(a1, (char)v6);
    return a2 + 1;
  }

  uint64_t result = sub_100039C50(a1, a2, a3);
  if (result != a2) {
    return result;
  }
  if (*a2 != 46) {
    return sub_10003496C(a1, a2, a3);
  }
  uint64_t v9 = operator new(0x10uLL);
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v11 = *(void *)(v10 + 8);
  *uint64_t v9 = &off_100127278;
  v9[1] = v11;
  *(void *)(v10 + sub_100007004((uint64_t)v1 + 8) = v9;
  *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8LL);
  return a2 + 1;
}

_BYTE *sub_100039C50(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  uint64_t v3 = a2;
  if (a2 != a3 && a2 + 1 != a3 && *a2 == 92)
  {
    int v4 = (char)a2[1];
    if ((v4 - 36) <= 0x3A && ((1LL << (a2[1] - 36)) & 0x580000000000441LL) != 0)
    {
      sub_100035128(a1, (char)v4);
      v3 += 2;
    }
  }

  return v3;
}

void *sub_100039CC8(void *a1)
{
  *a1 = &off_100126CF0;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  return a1;
}

void sub_100039D0C(void *__p)
{
  *std::string __p = &off_100126CF0;
  uint64_t v2 = __p[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  operator delete(__p);
}

uint64_t sub_100039D50(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(_BYTE **)(a2 + 16);
  if (v2 == *(_BYTE **)(a2 + 24) || !*v2)
  {
    uint64_t v3 = 0LL;
    *(_DWORD *)a2 = -993;
  }

  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }

  *(void *)(a2 + 80) = v3;
  return result;
}

uint64_t sub_100039D90(uint64_t a1, unsigned __int8 a2)
{
  return 1LL;
}

unsigned __int8 *sub_100039DEC(uint64_t a1, char *a2, char *a3)
{
  int v6 = sub_100039E48(a1, a2, a3);
  do
  {
    int v7 = v6;
    int v6 = sub_100039E48(a1, (char *)v6, a3);
  }

  while (v7 != v6);
  return v7;
}

unsigned __int8 *sub_100039E48(uint64_t a1, char *a2, char *a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  int v7 = *(_DWORD *)(a1 + 28);
  BOOL v8 = sub_100039FD8(a1, a2, a3);
  uint64_t v9 = (unsigned __int8 *)v8;
  if (v8 != a2 || v8 == a3) {
    goto LABEL_12;
  }
  int v10 = *a2;
  switch(v10)
  {
    case '$':
      uint64_t v11 = operator new(0x18uLL);
      BOOL v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      uint64_t v13 = *(void *)(a1 + 56);
      goto LABEL_8;
    case '(':
      sub_100034A7C((void *)a1);
      int v16 = *(_DWORD *)(a1 + 28);
      ++*(_DWORD *)(a1 + 36);
      __int128 v17 = (char *)sub_1000321D8(a1, a2 + 1, a3);
      if (v17 == a3 || (uint64_t v18 = v17, *v17 != 41)) {
        sub_1000331B0();
      }
      sub_100034AE0((void *)a1, v16);
      --*(_DWORD *)(a1 + 36);
      uint64_t v9 = (unsigned __int8 *)(v18 + 1);
LABEL_12:
      return (unsigned __int8 *)a2;
    case '^':
      uint64_t v11 = operator new(0x18uLL);
      BOOL v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      uint64_t v13 = *(void *)(a1 + 56);
LABEL_8:
      uint64_t v15 = *(void *)(v13 + 8);
      *uint64_t v11 = v14 + 2;
      v11[1] = v15;
      *((_BYTE *)v11 + 16) = v12;
      *(void *)(v13 + sub_100007004((uint64_t)v1 + 8) = v11;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8LL);
      uint64_t v9 = (unsigned __int8 *)(a2 + 1);
      return sub_100032D7C(a1, v9, (unsigned __int8 *)a3, v6, v7 + 1, *(_DWORD *)(a1 + 28) + 1);
  }

  return (unsigned __int8 *)a2;
}

char *sub_100039FD8(uint64_t a1, char *a2, char *a3)
{
  uint64_t result = sub_10003A090(a1, a2, a3);
  if (result == a2)
  {
    uint64_t result = sub_10003A118(a1, a2, a3);
    if (result == a2)
    {
      if (a2 == a3 || *a2 != 46)
      {
        return sub_10003496C(a1, a2, a3);
      }

      else
      {
        int v7 = operator new(0x10uLL);
        uint64_t v8 = *(void *)(a1 + 56);
        uint64_t v9 = *(void *)(v8 + 8);
        *int v7 = &off_100127278;
        v7[1] = v9;
        *(void *)(v8 + sub_100007004((uint64_t)v1 + 8) = v7;
        *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8LL);
        return a2 + 1;
      }
    }
  }

  return result;
}

char *sub_10003A090(uint64_t a1, char *a2, char *a3)
{
  uint64_t v3 = a2;
  if (a2 != a3)
  {
    int v4 = *a2;
    uint64_t v5 = (v4 - 36);
    if (v5 == 5)
    {
      if (*(_DWORD *)(a1 + 36)) {
        return v3;
      }
    }

    else
    {
LABEL_8:
    }

    sub_100035128(a1, *a2);
    ++v3;
  }

  return v3;
}

char *sub_10003A118(uint64_t a1, char *a2, char *a3)
{
  uint64_t v3 = a2;
  if (a2 != a3)
  {
    int v4 = a2 + 1;
    if (v3 + 1 != a3 && *v3 == 92)
    {
      int v5 = *v4;
      signed __int8 v6 = *v4;
      BOOL v7 = (v5 - 36) > 0x3A || ((1LL << (*v4 - 36)) & 0x5800000080004F1LL) == 0;
      if (v7 && (v5 - 123) >= 3)
      {
        if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
        {
          return sub_100037914(a1, v4, a3, 0LL);
        }

        else
        {
          int v9 = sub_100039D90(a1, v6);
          uint64_t v10 = 2LL;
          if (!v9) {
            uint64_t v10 = 0LL;
          }
          v3 += v10;
        }
      }

      else
      {
        sub_100035128(a1, v6);
        v3 += 2;
      }
    }
  }

  return v3;
}

void sub_10003A1DC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v12 = v2;
  uint64_t v3 = (void *)(*(void *)v2 + 128LL);
  int v4 = sub_100021A64(v3, (unsigned __int8 *)(v2 + 24));
  int v5 = v4;
  if (v4)
  {
    signed __int8 v6 = (uint64_t *)*((void *)v4 + 5);
    BOOL v7 = (uint64_t *)*((void *)v5 + 6);
    uint64_t v8 = *(std::__shared_weak_count **)(v2 + 16);
    uint64_t v13 = *(void *)(v2 + 8);
    __int128 v14 = v8;
    if (v8)
    {
      p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
      do
        unint64_t v10 = __ldxr(p_shared_weak_owners);
      while (__stxr(v10 + 1, p_shared_weak_owners));
    }

    uint64_t v11 = sub_10003A328(v6, v7, (uint64_t)&v13);
    if (v14) {
      std::__shared_weak_count::__release_weak(v14);
    }
    sub_10003A3D0((uint64_t)(v5 + 40), (uint64_t)v11, *((__int128 **)v5 + 6));
    if (*((void *)v5 + 5) == *((void *)v5 + 6))
    {
      sub_10002D708(v3, v5, (uint64_t)v15);
      sub_100031530((uint64_t)v15, 0LL);
    }
  }

  sub_100030FE8(&v12);
  sub_100007004((uint64_t)(a1 + 1));
  operator delete(a1);
}

void sub_10003A2F0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_weak(a12);
  }
  sub_100030FE8(&a10);
  sub_100007004((uint64_t)v12 + 8);
  operator delete(v12);
  _Unwind_Resume(a1);
}

uint64_t *sub_10003A328(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 == a2) {
    return a2;
  }
  for (uint64_t i = a1 + 2; *(i - 1) != *(void *)(a3 + 8); i += 2)
  {
    if (i == a2) {
      return a2;
    }
  }

  BOOL v7 = i - 2;
  if (i - 2 == a2) {
    return a2;
  }
  while (i != a2)
  {
    uint64_t v8 = i[1];
    if (v8 != *(void *)(a3 + 8))
    {
      uint64_t v9 = *i;
      uint64_t *i = 0LL;
      i[1] = 0LL;
      unint64_t v10 = (std::__shared_weak_count *)v7[1];
      *BOOL v7 = v9;
      v7[1] = v8;
      if (v10) {
        std::__shared_weak_count::__release_weak(v10);
      }
      v7 += 2;
    }

    i += 2;
  }

  return v7;
}

uint64_t sub_10003A3D0(uint64_t a1, uint64_t a2, __int128 *a3)
{
  if ((__int128 *)a2 != a3)
  {
    int v5 = (uint64_t *)(a1 + 8);
    sub_10003A480((uint64_t)&v11, a3, *(__int128 **)(a1 + 8), a2);
    uint64_t v7 = v6;
    for (uint64_t i = *v5; i != v7; i -= 16LL)
    {
      uint64_t v9 = *(std::__shared_weak_count **)(i - 8);
      if (v9) {
        std::__shared_weak_count::__release_weak(v9);
      }
    }

    *(void *)(a1 + sub_100007004((uint64_t)v1 + 8) = v7;
  }

  return a2;
}

__int128 *sub_10003A480(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  int v5 = a2;
  if (a2 != a3)
  {
    do
    {
      __int128 v7 = *v5;
      *(void *)int v5 = 0LL;
      *((void *)v5 + 1) = 0LL;
      uint64_t v8 = *(std::__shared_weak_count **)(a4 + 8);
      *(_OWORD *)a4 = v7;
      if (v8) {
        std::__shared_weak_count::__release_weak(v8);
      }
      ++v5;
      a4 += 16LL;
    }

    while (v5 != a3);
    return a3;
  }

  return v5;
}

uint64_t sub_10003A4E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 24) = v4;
  }

  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }

  *uint64_t v3 = 0LL;
  return a1;
}

void sub_10003A54C(void *a1)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)a1 + 8LL;
  sub_10003A5CC((void *)(**(void **)a1 + 256LL), v3);
  uint64_t v4 = (void *)v2[4];
  if (v4 == (void *)v3)
  {
    uint64_t v5 = 4LL;
    uint64_t v4 = (void *)v3;
    goto LABEL_5;
  }

  if (v4)
  {
    uint64_t v5 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }

  operator delete(v2);
  sub_100007004((uint64_t)a1 + 8);
  operator delete(a1);
}

void *sub_10003A5CC(void *a1, uint64_t a2)
{
  uint64_t v4 = (void *)a1[3];
  a1[3] = 0LL;
  if (v4 == a1)
  {
    uint64_t v5 = 4LL;
    uint64_t v4 = a1;
  }

  else
  {
    if (!v4) {
      goto LABEL_6;
    }
    uint64_t v5 = 5LL;
  }

  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  uint64_t v6 = *(void *)(a2 + 24);
  if (v6)
  {
    if (v6 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24LL))(*(void *)(a2 + 24), a1);
    }

    else
    {
      a1[3] = v6;
      *(void *)(a2 + 24) = 0LL;
    }
  }

  else
  {
    a1[3] = 0LL;
  }

  return a1;
}

void sub_10003A65C(void *a1)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)a1 + 8LL;
  sub_10003A5CC((void *)(**(void **)a1 + 224LL), v3);
  uint64_t v4 = (void *)v2[4];
  if (v4 == (void *)v3)
  {
    uint64_t v5 = 4LL;
    uint64_t v4 = (void *)v3;
    goto LABEL_5;
  }

  if (v4)
  {
    uint64_t v5 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }

  operator delete(v2);
  sub_100007004((uint64_t)a1 + 8);
  operator delete(a1);
}

void sub_10003A6DC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  sub_10002F940(*(void *)v2, (uint64_t *)(v2 + 8), v2 + 32, (dispatch_group_t *)&object);
  sub_10003A820((dispatch_object_t *)(v2 + 48), (dispatch_group_s **)&object);
  if (object) {
    dispatch_release(object);
  }
  sub_10003A7B0(&v2);
  sub_100007004((uint64_t)(a1 + 1));
  operator delete(a1);
}

void sub_10003A778( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  sub_10003A7B0(&a10);
  sub_100007004((uint64_t)v11 + 8);
  operator delete(v11);
  _Unwind_Resume(a1);
}

uint64_t *sub_10003A7B0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0LL;
  if (v2)
  {
    uint64_t v3 = *(dispatch_group_s **)(v2 + 48);
    if (v3)
    {
      dispatch_group_leave(v3);
      uint64_t v4 = *(dispatch_object_s **)(v2 + 48);
      if (v4) {
        dispatch_release(v4);
      }
    }

    sub_1000041AC(v2 + 32);
    sub_10000425C((uint64_t **)(v2 + 40), *(unsigned __int8 *)(v2 + 32));
    operator delete((void *)v2);
  }

  return a1;
}

void sub_10003A820(dispatch_object_t *a1, dispatch_group_s **a2)
{
  uint64_t v2 = (dispatch_group_s *)*a1;
  if (*a1) {
    BOOL v3 = *a2 == 0LL;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    dispatch_retain(*a1);
    dispatch_group_enter(v2);
    uint64_t v5 = *a2;
    dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 1174405120LL;
    v7[2] = nullsub_31;
    void v7[3] = &unk_1001272B0;
    dispatch_group_t group = v2;
    dispatch_retain(v2);
    dispatch_group_enter(v2);
    dispatch_group_notify(v5, global_queue, v7);
    if (group)
    {
      dispatch_group_leave(group);
      if (group) {
        dispatch_release(group);
      }
    }

    dispatch_group_leave(v2);
    dispatch_release(v2);
  }

void sub_10003A92C(uint64_t a1, uint64_t a2)
{
  BOOL v3 = *(dispatch_object_s **)(a2 + 32);
  *(void *)(a1 + 32) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    uint64_t v4 = *(dispatch_group_s **)(a1 + 32);
    if (v4) {
      dispatch_group_enter(v4);
    }
  }

void sub_10003A96C(uint64_t a1)
{
  uint64_t v2 = *(dispatch_group_s **)(a1 + 32);
  if (v2)
  {
    dispatch_group_leave(v2);
    BOOL v3 = *(dispatch_object_s **)(a1 + 32);
    if (v3) {
      dispatch_release(v3);
    }
  }

char *sub_10003A9A8(uint64_t a1)
{
  return sub_10002F684(**(void **)(a1 + 40), (__int128 *)(*(void *)(a1 + 40) + 8LL));
}

uint64_t sub_10003A9B4(uint64_t a1)
{
  return sub_10002F2D0(**(void **)(a1 + 40), *(uint64_t **)(*(void *)(a1 + 40) + 8LL));
}

void sub_10003A9C0(uint64_t **a1)
{
  uint64_t v2 = *a1;
  BOOL v3 = (__int128 *)(*a1 + 1);
  sub_10002F684(**a1, v3);
  sub_100007004((uint64_t)v3);
  operator delete(v2);
  sub_100007004((uint64_t)(a1 + 1));
  operator delete(a1);
}

void sub_10003AA14(_Unwind_Exception *a1)
{
}

void sub_10003AA40(uint64_t **a1)
{
  uint64_t v2 = *a1;
  sub_10002F190(**a1);
  operator delete(v2);
  sub_100007004((uint64_t)(a1 + 1));
  operator delete(a1);
}

void sub_10003AA84(_Unwind_Exception *a1)
{
}

uint64_t sub_10003AAA8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 16;
    sub_100007004(i - 16);
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_10003AAF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  __int16 v5 = a5;
  *(void *)&__int128 v9 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v13[3] = 0xAAAAAAAAAAAAAAAALL;
  v13[6] = 0xAAAAAAAAAAAAAA00LL;
  __int128 v15 = v9;
  v13[5] = 0LL;
  __int128 v14 = 0uLL;
  LOBYTE(v15) = 0;
  BYTE8(v15) = 0;
  uint64_t v16 = 0LL;
  *(_OWORD *)std::string __p = 0u;
  memset(v13, 0, 24);
  int v10 = sub_10003AC28(a4, a1, a2, (uint64_t)__p, a5 | 0x1040u);
  sub_10003AE00(a3, a1, a2, (uint64_t *)__p, (v5 & 0x800) != 0);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

  if (!v10) {
    return 0LL;
  }
  if (!*(_BYTE *)(a3 + 88)) {
    return 1LL;
  }
  uint64_t result = 0LL;
  *(void *)(a3 + sub_100007004((uint64_t)v1 + 8) = *(void *)a3;
  return result;
}

void sub_10003AC0C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10003AC28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if ((a5 & 0x80) != 0) {
    int v9 = a5 & 0xFFA;
  }
  else {
    int v9 = a5;
  }
  sub_10003389C(a4, *(_DWORD *)(a1 + 28) + 1, a2, a3, (unsigned __int16)(v9 & 0x800) >> 11);
  if (sub_10003AF8C(a1, a2, a3, (uint64_t *)a4, v9, (v9 & 0x800) == 0))
  {
    if (*(void *)(a4 + 8) == *(void *)a4) {
      int v10 = (uint64_t *)(a4 + 24);
    }
    else {
      int v10 = *(uint64_t **)a4;
    }
LABEL_8:
    uint64_t v11 = *v10;
    *(void *)(a4 + 56) = *v10;
    *(_BYTE *)(a4 + 64) = *(void *)(a4 + 48) != v11;
    uint64_t v12 = v10[1];
    *(void *)(a4 + 72) = v12;
    *(_BYTE *)(a4 + 8sub_100007004((uint64_t)v1 + 8) = v12 != *(void *)(a4 + 80);
    return 1LL;
  }

  if (a2 != a3 && (v9 & 0x40) == 0)
  {
    int v14 = v9 | 0x80;
    uint64_t v15 = a2 + 1;
    if (v15 != a3)
    {
      while (1)
      {
        sub_100033D50( (char **)a4,  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3),  (__int128 *)(a4 + 24));
        int v16 = sub_10003AF8C(a1, v15, a3, (uint64_t *)a4, v14, 0);
        uint64_t v18 = *(void *)a4;
        uint64_t v17 = *(void *)(a4 + 8);
        if (v16) {
          break;
        }
        sub_100033D50((char **)a4, 0xAAAAAAAAAAAAAAABLL * ((v17 - v18) >> 3), (__int128 *)(a4 + 24));
        if (++v15 == a3) {
          goto LABEL_14;
        }
      }

      if (v17 == v18) {
        int v10 = (uint64_t *)(a4 + 24);
      }
      else {
        int v10 = *(uint64_t **)a4;
      }
      goto LABEL_8;
    }

void sub_10003AE00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, char a5)
{
  uint64_t v10 = a4[6];
  sub_10003CD2C(a1, 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3));
  uint64_t v11 = *(void *)a1;
  if (*(void *)(a1 + 8) != *(void *)a1)
  {
    uint64_t v12 = 0LL;
    unint64_t v13 = 0LL;
    uint64_t v15 = *a4;
    uint64_t v14 = a4[1];
    do
    {
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v15) >> 3);
      uint64_t v17 = (void *)(v15 + v12);
      if (v16 <= v13) {
        uint64_t v18 = a4 + 3;
      }
      else {
        uint64_t v18 = v17;
      }
      *(void *)(v11 + v12) = a2 + *v18 - v10;
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v13) {
        uint64_t v19 = a4 + 3;
      }
      else {
        uint64_t v19 = (uint64_t *)(*a4 + v12);
      }
      *(void *)(*(void *)a1 + v12 + sub_100007004((uint64_t)v1 + 8) = a2 + v19[1] - v10;
      uint64_t v15 = *a4;
      uint64_t v14 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v14 - *a4) >> 3) <= v13) {
        int v20 = a4 + 3;
      }
      else {
        int v20 = (uint64_t *)(*a4 + v12);
      }
      char v21 = *((_BYTE *)v20 + 16);
      uint64_t v11 = *(void *)a1;
      uint64_t v22 = *(void *)(a1 + 8);
      *(_BYTE *)(*(void *)a1 + v12 + 16) = v21;
      ++v13;
      v12 += 24LL;
    }

    while (v13 < 0xAAAAAAAAAAAAAAABLL * ((v22 - v11) >> 3));
  }

  *(void *)(a1 + 24) = a3;
  *(void *)(a1 + 32) = a3;
  *(_BYTE *)(a1 + 40) = 0;
  uint64_t v23 = a2 + a4[6] - v10;
  *(void *)(a1 + 4sub_100007004((uint64_t)v1 + 8) = v23;
  *(void *)(a1 + 56) = a2 + a4[7] - v10;
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a4 + 64);
  *(void *)(a1 + 72) = a2 + a4[9] - v10;
  *(void *)(a1 + 80) = a2 + a4[10] - v10;
  *(_BYTE *)(a1 + 8sub_100007004((uint64_t)v1 + 8) = *((_BYTE *)a4 + 88);
  if ((a5 & 1) == 0) {
    *(void *)(a1 + 104) = v23;
  }
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a4 + 96);
}

uint64_t sub_10003AF8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0) {
    return sub_10003390C(a1, a2, a3, a4, a5, a6);
  }
  if (*(_DWORD *)(a1 + 28)) {
    return sub_10003B520(a1, a2, a3, a4, a5, a6);
  }
  return sub_10003AFAC(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_10003AFAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  __int128 v57 = 0u;
  __int128 v58 = 0u;
  __int128 v56 = 0u;
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    *(_DWORD *)char v59 = 0;
    memset(&v59[8], 0, 85);
    sub_10003BAC8(&v56, (uint64_t)v59);
    if (*(void *)&v59[56])
    {
      *(void *)&v59[64] = *(void *)&v59[56];
      operator delete(*(void **)&v59[56]);
    }

    if (*(void *)&v59[32])
    {
      *(void *)&v59[40] = *(void *)&v59[32];
      operator delete(*(void **)&v59[32]);
    }

    uint64_t v12 = *((void *)&v56 + 1);
    unint64_t v13 = *((void *)&v58 + 1) + v58 - 1;
    unint64_t v14 = v13 / 0x2A;
    uint64_t v15 = *(void *)(*((void *)&v56 + 1) + 8 * (v13 / 0x2A));
    unint64_t v16 = 3 * (v13 % 0x2A);
    uint64_t v17 = v15 + 32 * v16;
    *(_DWORD *)uint64_t v17 = 0;
    *(void *)(v17 + sub_100007004((uint64_t)v1 + 8) = a2;
    *(void *)(*(void *)(v12 + 8 * v14) + 32 * v16 + 16) = a2;
    *(void *)(*(void *)(v12 + 8 * v14) + 32 * v16 + 24) = a3;
    sub_100033F90(*(void *)(v12 + 8 * v14) + 32 * v16 + 56, *(unsigned int *)(a1 + 32));
    uint64_t v52 = 0LL;
    uint64_t v53 = a2;
    char v54 = 0;
    unsigned int v18 = 0;
    uint64_t v19 = a3 - a2;
    uint64_t v20 = *((void *)&v58 + 1);
    uint64_t v21 = *((void *)&v56 + 1);
    unint64_t v22 = *((void *)&v58 + 1) + v58 - 1;
    unint64_t v23 = v22 / 0x2A;
    unint64_t v24 = 3 * (v22 % 0x2A);
    *(void *)(*(void *)(*((void *)&v56 + 1) + 8 * v23) + 32 * v24 + 80) = v6;
    uint64_t v25 = *(void *)(v21 + 8 * v23) + 32 * v24;
    *(_DWORD *)(v25 + 8sub_100007004((uint64_t)v1 + 8) = a5;
    *(_BYTE *)(v25 + 92) = a6;
    while (2)
    {
      unint64_t v27 = v20 + v58 - 1;
      uint64_t v28 = *(void *)(*((void *)&v56 + 1) + 8 * (v27 / 0x2A));
      unint64_t v29 = v27 % 0x2A;
      uint64_t v30 = v28 + 96 * (v27 % 0x2A);
      char v32 = (void *)(v30 + 80);
      uint64_t v31 = *(void *)(v30 + 80);
      if (v31) {
        (*(void (**)(uint64_t, unint64_t))(*(void *)v31 + 16LL))(v31, v28 + 96 * v29);
      }
      switch(*(_DWORD *)v30)
      {
        case 0xFFFFFC18:
          uint64_t v33 = *(void *)(v28 + 96 * v29 + 16);
          BOOL v35 = (a5 & 0x1000) == 0 || v33 == a3;
          BOOL v36 = v33 != v53 || (a5 & 0x20) == 0;
          if (!v36 || !v35) {
            goto LABEL_37;
          }
          uint64_t v37 = v33 - *(void *)(v28 + 96 * v29 + 8);
          uint64_t v38 = v52;
          if (v38 != v19)
          {
            uint64_t v52 = v38;
            sub_10003BBC8(&v56);
            char v54 = 1;
            goto LABEL_38;
          }

          __int16 v39 = (void **)*((void *)&v56 + 1);
          uint64_t v40 = v57;
          if ((void)v57 == *((void *)&v56 + 1))
          {
            uint64_t v40 = *((void *)&v56 + 1);
          }

          else
          {
            __int16 v41 = (void *)(*((void *)&v56 + 1) + 8 * ((unint64_t)v58 / 0x2A));
            int v42 = (void *)(*v41 + 96 * ((unint64_t)v58 % 0x2A));
            unint64_t v43 = *(void *)(*((void *)&v56 + 1) + 8 * ((*((void *)&v58 + 1) + (void)v58) / 0x2AuLL))
                + 96 * ((*((void *)&v58 + 1) + (void)v58) % 0x2AuLL);
            if (v42 != (void *)v43)
            {
              do
              {
                sub_100034424((uint64_t)&v58 + 8, v42);
                v42 += 12;
                if ((void *)((char *)v42 - *v41) == (void *)4032)
                {
                  int v44 = (void *)v41[1];
                  ++v41;
                  int v42 = v44;
                }
              }

              while (v42 != (void *)v43);
              __int16 v39 = (void **)*((void *)&v56 + 1);
              uint64_t v40 = v57;
            }
          }

          *((void *)&v58 + 1) = 0LL;
          unint64_t v48 = v40 - (void)v39;
          if (v48 >= 0x11)
          {
            do
            {
              operator delete(*v39);
              __int16 v39 = (void **)(*((void *)&v56 + 1) + 8LL);
              *((void *)&v56 + 1) = v39;
              unint64_t v48 = v57 - (void)v39;
            }

            while ((void)v57 - (void)v39 > 0x10uLL);
          }

          if (v48 >> 3 == 1)
          {
            uint64_t v49 = 21LL;
          }

          else
          {
            if (v48 >> 3 != 2) {
              goto LABEL_53;
            }
            uint64_t v49 = 42LL;
          }

          *(void *)&__int128 v58 = v49;
LABEL_53:
          char v54 = 1;
          uint64_t v52 = v19;
LABEL_38:
          uint64_t v20 = *((void *)&v58 + 1);
          if (*((void *)&v58 + 1)) {
            continue;
          }
          if ((v54 & 1) != 0)
          {
            uint64_t v50 = *a4;
            *(void *)uint64_t v50 = v53;
            *(void *)(v50 + sub_100007004((uint64_t)v1 + 8) = v53 + v52;
            uint64_t v6 = 1LL;
            *(_BYTE *)(v50 + 16) = 1;
          }

          else
          {
            uint64_t v6 = 0LL;
          }

          break;
        case 0xFFFFFC19:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_38;
        case 0xFFFFFC1D:
          sub_10003BC48((uint64_t)&v56, v28 + 96 * v29);
          goto LABEL_37;
        case 0xFFFFFC1F:
LABEL_37:
          sub_10003BBC8(&v56);
          goto LABEL_38;
        case 0xFFFFFC20:
          *(void *)&__int128 v45 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v45 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)&v59[64] = v45;
          *(_OWORD *)&v59[80] = v45;
          *(_OWORD *)&v59[32] = v45;
          *(_OWORD *)&v59[48] = v45;
          *(_OWORD *)char v59 = v45;
          *(_OWORD *)&_BYTE v59[16] = v45;
          __int128 v46 = *(_OWORD *)(v30 + 16);
          *(_OWORD *)char v59 = *(_OWORD *)v30;
          *(_OWORD *)&_BYTE v59[16] = v46;
          memset(&v59[32], 0, 24);
          sub_10003475C( &v59[32],  *(__int128 **)(v28 + 96 * v29 + 32),  *(__int128 **)(v28 + 96 * v29 + 40),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v28 + 96 * v29 + 40) - *(void *)(v28 + 96 * v29 + 32)) >> 3));
          memset(&v59[56], 0, 24);
          sub_1000347D8( &v59[56],  *(__int128 **)(v28 + 96 * v29 + 56),  *(__int128 **)(v28 + 96 * v29 + 64),  (uint64_t)(*(void *)(v28 + 96 * v29 + 64) - *(void *)(v28 + 96 * v29 + 56)) >> 4);
          uint64_t v47 = *v32;
          *(void *)&v59[85] = *(void *)(v30 + 85);
          *(void *)&v59[80] = v47;
          (*(void (**)(void, uint64_t, unint64_t))(*(void *)*v32 + 24LL))( *v32,  1LL,  v28 + 96 * v29);
          (*(void (**)(void, void, _BYTE *))(**(void **)&v59[80] + 24LL))( *(void *)&v59[80],  0LL,  v59);
          sub_10003BAC8(&v56, (uint64_t)v59);
          if (*(void *)&v59[56])
          {
            *(void *)&v59[64] = *(void *)&v59[56];
            operator delete(*(void **)&v59[56]);
          }

          if (*(void *)&v59[32])
          {
            *(void *)&v59[40] = *(void *)&v59[32];
            operator delete(*(void **)&v59[32]);
          }

          goto LABEL_38;
        default:
          sub_10003400C();
      }

      break;
    }
  }

  sub_10003C89C(&v56);
  return v6;
}

void sub_10003B4D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, void *__p, uint64_t a28)
{
}

uint64_t sub_10003B520(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  unint64_t v48 = 0LL;
  uint64_t v49 = 0LL;
  unint64_t v50 = 0LL;
  *(_DWORD *)&v56[36] = -1431655766;
  *(void *)char v54 = 0xAAAAAAAA00000000LL;
  memset(&v54[8], 0, 32);
  __int128 v55 = 0u;
  memset(v56, 0, 36);
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    *((void *)&v52 + 1) = a3;
    unint64_t v53 = 0xAAAAAAAAAAAAAA00LL;
    *(void *)&__int128 v52 = a3;
    *(_DWORD *)uint64_t v51 = 0;
    memset(&v51[8], 0, 85);
    uint64_t v49 = (_OWORD *)sub_100034058((uint64_t *)&v48, (uint64_t)v51);
    if (*(void *)&v51[56])
    {
      *(void *)&v51[64] = *(void *)&v51[56];
      operator delete(*(void **)&v51[56]);
    }

    if (*(void *)&v51[32])
    {
      *(void *)&v51[40] = *(void *)&v51[32];
      operator delete(*(void **)&v51[32]);
    }

    unint64_t v43 = a4;
    uint64_t v11 = v49;
    *((_DWORD *)v49 - 24) = 0;
    *((void *)v11 - 11) = a2;
    *((void *)v11 - 10) = a2;
    *((void *)v11 - 9) = a3;
    sub_100033F54((uint64_t)(v11 - 4), *(unsigned int *)(a1 + 28), &v52);
    sub_100033F90((uint64_t)v49 - 40, *(unsigned int *)(a1 + 32));
    uint64_t v44 = a3;
    uint64_t v45 = 0LL;
    char v12 = 0;
    unsigned int v13 = 0;
    uint64_t v14 = a3 - a2;
    uint64_t v15 = v49;
    *((void *)v49 - 2) = v6;
    *((_DWORD *)v15 - 2) = a5;
    *((_BYTE *)v15 - 4) = a6;
    do
    {
      BOOL v16 = (++v13 & 0xFFF) != 0 || (int)(v13 >> 12) < (int)v14;
      if (!v16) {
        sub_100033FC0();
      }
      unsigned int v18 = v15 - 1;
      uint64_t v17 = *((void *)v15 - 2);
      uint64_t v19 = v15 - 6;
      if (v17) {
        (*(void (**)(uint64_t, _OWORD *))(*(void *)v17 + 16LL))(v17, v15 - 6);
      }
      switch(*(_DWORD *)v19)
      {
        case 0xFFFFFC18:
          uint64_t v20 = *((void *)v15 - 10);
          if ((a5 & 0x20) != 0 && v20 == a2 || (a5 & 0x1000) != 0 && v20 != v44) {
            goto LABEL_19;
          }
          char v28 = v12;
          uint64_t v29 = v20 - *((void *)v15 - 11);
          uint64_t v30 = v45;
          if ((v28 & (v45 >= v29)) == 0)
          {
            __int128 v31 = *(v15 - 5);
            *(_OWORD *)char v54 = *(_OWORD *)v19;
            *(_OWORD *)&v54[16] = v31;
            if (v54 != v19)
            {
              sub_10003CA2C( &v54[32],  *((__int128 **)v15 - 8),  *((__int128 **)v15 - 7),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v15 - 7) - *((void *)v15 - 8)) >> 3));
              sub_10003CBE0( v56,  *((uint64_t **)v15 - 5),  *((uint64_t **)v15 - 4),  (uint64_t)(*((void *)v15 - 4) - *((void *)v15 - 5)) >> 4);
            }

            uint64_t v32 = *v18;
            *(void *)&v56[29] = *(void *)((char *)v15 - 11);
            *(void *)&v56[24] = v32;
            uint64_t v30 = v29;
          }

          uint64_t v33 = v49;
          if (v30 == v14)
          {
            uint64_t v34 = (uint64_t)v48;
            while (v33 != (void *)v34)
            {
              v33 -= 12;
              sub_100034424((uint64_t)&v50, v33);
            }

            uint64_t v49 = (_OWORD *)v34;
            char v12 = 1;
            uint64_t v45 = v14;
          }

          else
          {
            uint64_t v45 = v30;
            BOOL v35 = v49 - 6;
            sub_100034424((uint64_t)&v50, (void *)v49 - 12);
            uint64_t v49 = v35;
            char v12 = 1;
          }

          break;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          break;
        case 0xFFFFFC1F:
LABEL_19:
          uint64_t v21 = v49 - 6;
          sub_100034424((uint64_t)&v50, (void *)v49 - 12);
          uint64_t v49 = v21;
          break;
        case 0xFFFFFC20:
          *(void *)&__int128 v22 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v22 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)&v51[64] = v22;
          *(_OWORD *)&v51[80] = v22;
          *(_OWORD *)&v51[32] = v22;
          *(_OWORD *)&v51[48] = v22;
          *(_OWORD *)uint64_t v51 = v22;
          *(_OWORD *)&v51[16] = v22;
          __int128 v23 = *(v15 - 5);
          *(_OWORD *)uint64_t v51 = *(_OWORD *)v19;
          *(_OWORD *)&v51[16] = v23;
          memset(&v51[32], 0, 24);
          sub_10003475C( &v51[32],  *((__int128 **)v15 - 8),  *((__int128 **)v15 - 7),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v15 - 7) - *((void *)v15 - 8)) >> 3));
          memset(&v51[56], 0, 24);
          sub_1000347D8( &v51[56],  *((__int128 **)v15 - 5),  *((__int128 **)v15 - 4),  (uint64_t)(*((void *)v15 - 4) - *((void *)v15 - 5)) >> 4);
          uint64_t v24 = *v18;
          *(void *)&v51[85] = *(void *)((char *)v15 - 11);
          *(void *)&v51[80] = v24;
          (*(void (**)(void, uint64_t, _OWORD *))(*(void *)*v18 + 24LL))(*v18, 1LL, v15 - 6);
          (*(void (**)(void, void, _BYTE *))(**(void **)&v51[80] + 24LL))( *(void *)&v51[80],  0LL,  v51);
          uint64_t v25 = v49;
          if ((unint64_t)v49 >= v50)
          {
            uint64_t v49 = (_OWORD *)sub_100034058((uint64_t *)&v48, (uint64_t)v51);
            if (*(void *)&v51[56])
            {
              *(void *)&v51[64] = *(void *)&v51[56];
              operator delete(*(void **)&v51[56]);
            }
          }

          else
          {
            __int128 v26 = *(_OWORD *)&v51[16];
            _OWORD *v49 = *(_OWORD *)v51;
            v25[1] = v26;
            *((void *)v25 + 4) = 0LL;
            *((void *)v25 + 5) = 0LL;
            *((void *)v25 + 6) = 0LL;
            *((void *)v25 + 7) = 0LL;
            v25[2] = *(_OWORD *)&v51[32];
            *((void *)v25 + 6) = *(void *)&v51[48];
            memset(&v51[32], 0, 24);
            *((void *)v25 + sub_100007004((uint64_t)v1 + 8) = 0LL;
            *((void *)v25 + 9) = 0LL;
            *(_OWORD *)((char *)v25 + 56) = *(_OWORD *)&v51[56];
            *((void *)v25 + 9) = *(void *)&v51[72];
            memset(&v51[56], 0, 24);
            uint64_t v27 = *(void *)&v51[80];
            *(void *)((char *)v25 + 85) = *(void *)&v51[85];
            *((void *)v25 + 10) = v27;
            uint64_t v49 = v25 + 6;
          }

          if (*(void *)&v51[32])
          {
            *(void *)&v51[40] = *(void *)&v51[32];
            operator delete(*(void **)&v51[32]);
          }

          break;
        default:
          sub_10003400C();
      }

      uint64_t v15 = v49;
    }

    while (v48 != v49);
    if ((v12 & 1) != 0)
    {
      uint64_t v36 = *v43;
      *(void *)uint64_t v36 = a2;
      *(void *)(v36 + sub_100007004((uint64_t)v1 + 8) = a2 + v45;
      *(_BYTE *)(v36 + 16) = 1;
      if ((void)v55 != *(void *)&v54[32])
      {
        unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v55 - *(void *)&v54[32]) >> 3);
        uint64_t v38 = (_BYTE *)(*(void *)&v54[32] + 16LL);
        unsigned int v39 = 1;
        do
        {
          uint64_t v40 = v36 + 24LL * v39;
          *(_OWORD *)uint64_t v40 = *((_OWORD *)v38 - 1);
          char v41 = *v38;
          v38 += 24;
          *(_BYTE *)(v40 + 16) = v41;
          BOOL v16 = v37 > v39++;
        }

        while (v16);
      }

      uint64_t v6 = 1LL;
    }

    else
    {
      uint64_t v6 = 0LL;
    }
  }

  if (*(void *)v56)
  {
    *(void *)&_BYTE v56[8] = *(void *)v56;
    operator delete(*(void **)v56);
  }

  if (*(void *)&v54[32])
  {
    *(void *)&__int128 v55 = *(void *)&v54[32];
    operator delete(*(void **)&v54[32]);
  }

  *(void *)char v54 = &v48;
  sub_100034848((void ***)v54);
  return v6;
}

void sub_10003BA6C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, void *__p, uint64_t a26)
{
  char v28 = (void ***)sub_100033F14((void *)(v26 - 208));
  *(void *)(v26 - 20sub_100007004((uint64_t)v1 + 8) = &a18;
  sub_100034848(v28);
  _Unwind_Resume(a1);
}

__n128 sub_10003BAC8(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 42 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10003BD38(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }

  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x2A)) + 96 * (v7 % 0x2A);
  __int128 v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 16) = v9;
  *(void *)(v8 + 40) = 0LL;
  *(void *)(v8 + 4sub_100007004((uint64_t)v1 + 8) = 0LL;
  *(void *)(v8 + 32) = 0LL;
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(v8 + 4sub_100007004((uint64_t)v1 + 8) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 40) = 0LL;
  *(void *)(a2 + 4sub_100007004((uint64_t)v1 + 8) = 0LL;
  *(void *)(v8 + 56) = 0LL;
  *(void *)(v8 + 64) = 0LL;
  *(void *)(v8 + 72) = 0LL;
  __n128 result = *(__n128 *)(a2 + 56);
  *(__n128 *)(v8 + 56) = result;
  *(void *)(v8 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0LL;
  *(void *)(a2 + 64) = 0LL;
  *(void *)(a2 + 72) = 0LL;
  uint64_t v11 = *(void *)(a2 + 80);
  *(void *)(v8 + 85) = *(void *)(a2 + 85);
  *(void *)(v8 + 80) = v11;
  ++a1[5];
  return result;
}

uint64_t sub_10003BBC8(void *a1)
{
  uint64_t v2 = a1 + 5;
  unint64_t v3 = a1[5] + a1[4] - 1LL;
  sub_100034424((uint64_t)(a1 + 5), (void *)(*(void *)(a1[1] + 8 * (v3 / 0x2A)) + 96 * (v3 % 0x2A)));
  --*v2;
  return sub_10003C4DC(a1, 1);
}

int64x2_t sub_10003BC48(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 32);
  if (!v4)
  {
    sub_10003C550((void **)a1);
    unint64_t v4 = *(void *)(a1 + 32);
  }

  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = (void *)(v5 + 8 * (v4 / 0x2A));
  uint64_t v7 = *v6 + 96 * (v4 % 0x2A);
  if (*(void *)(a1 + 16) == v5) {
    uint64_t v7 = 0LL;
  }
  if (v7 == *v6) {
    uint64_t v7 = *(v6 - 1) + 4032LL;
  }
  __int128 v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v7 - 96) = *(_OWORD *)a2;
  *(_OWORD *)(v7 - 80) = v8;
  *(void *)(v7 - 56) = 0LL;
  *(void *)(v7 - 4sub_100007004((uint64_t)v1 + 8) = 0LL;
  *(void *)(v7 - 64) = 0LL;
  *(_OWORD *)(v7 - 64) = *(_OWORD *)(a2 + 32);
  *(void *)(v7 - 4sub_100007004((uint64_t)v1 + 8) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 40) = 0LL;
  *(void *)(a2 + 4sub_100007004((uint64_t)v1 + 8) = 0LL;
  *(void *)(v7 - 40) = 0LL;
  *(void *)(v7 - 32) = 0LL;
  *(void *)(v7 - 24) = 0LL;
  *(_OWORD *)(v7 - 40) = *(_OWORD *)(a2 + 56);
  *(void *)(v7 - 24) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0LL;
  *(void *)(a2 + 64) = 0LL;
  *(void *)(a2 + 72) = 0LL;
  uint64_t v9 = *(void *)(a2 + 80);
  *(void *)(v7 - 11) = *(void *)(a2 + 85);
  *(void *)(v7 - 16) = v9;
  int64x2_t result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_1000F3C40);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

void sub_10003BD38(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x2A;
  unint64_t v4 = v2 - 42;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    __int128 v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)__int128 v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_10001C3B0(v5, v33);
      BOOL v35 = &v34[8 * (v33 >> 2)];
      unint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      __int128 v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        __int128 v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        char v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)char v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }

    __int128 v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&__int128 v54 = operator new(0xFC0uLL);
      sub_10003C080(a1, &v54);
      return;
    }

    *(void *)&__int128 v54 = operator new(0xFC0uLL);
    sub_10003C194((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    __int128 v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_10001C3B0((uint64_t)(a1 + 3), v46);
      BOOL v35 = &v34[8 * (v46 >> 2)];
      unint64_t v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      __int128 v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        __int128 v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

        sub_100018704((unsigned __int8 **)v31);
        int64x2_t result = sub_10001855C((unsigned __int8 **)v31, (unsigned __int8 **)v29);
        if ((result & 1) != 0) {
          return result;
        }
      }

      while (1)
      {
        BOOL v14 = sub_100008924((unsigned __int8 **)v27);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"matching";
        *(void *)&BOOL v35 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&uint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v33[0].__locale_ = v15;
        uint64_t v34 = v15;
        sub_100008780((uint64_t)v14, (const std::string::value_type **)&__p.__r_.__value_.__l.__data_, (uint64_t)v33);
        uint64_t v39 = 0LL;
        uint64_t v40 = 0LL;
        uint64_t v38 = 0LL;
        unint64_t v37 = v14;
        char v41 = 0x8000000000000000LL;
        sub_100008AC8(&v37);
        if (sub_1000087E8((unsigned __int8 **)v33, &v37))
        {
          uint64_t v16 = (unsigned __int8 *)sub_10009AE9C();
          if (!v16) {
            goto LABEL_36;
          }
        }

        else
        {
          uint64_t v16 = sub_100008924((unsigned __int8 **)v33);
        }

        if ((sub_100044E90(v16, "regex") & 1) == 0)
        {
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"event";
          *(void *)&BOOL v35 = 0xAAAAAAAAAAAAAAAALL;
          *(void *)&uint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)&v33[0].__locale_ = v17;
          uint64_t v34 = v17;
          sub_100008780((uint64_t)v14, (const std::string::value_type **)&__p.__r_.__value_.__l.__data_, (uint64_t)v33);
          uint64_t v39 = 0LL;
          uint64_t v40 = 0LL;
          uint64_t v38 = 0LL;
          unint64_t v37 = v14;
          char v41 = 0x8000000000000000LL;
          sub_100008AC8(&v37);
          if (sub_1000087E8((unsigned __int8 **)v33, &v37))
          {
            uint64_t v18 = (_BYTE *)sub_10009AE9C();
            if (!v18) {
              goto LABEL_36;
            }
          }

          else
          {
            uint64_t v18 = sub_100008924((unsigned __int8 **)v33);
          }

          if (*v18 == 3)
          {
            memset(&__p, 170, sizeof(__p));
            sub_1000218CC((uint64_t)v18, &__p);
            if (((char)__p.__r_.__value_.__s.__size_ & 0x80000000) == 0)
            {
              if (__p.__r_.__value_.__s.__size_ == 1)
              {
                p_p = &__p;
                goto LABEL_27;
              }

              goto LABEL_28;
            }

            if (__p.__r_.__value_.__l.__size_ != 1) {
              goto LABEL_28;
            }
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
LABEL_27:
            if (p_p->__r_.__value_.__s.__data_[0] != 42)
            {
LABEL_28:
              *(void *)&int64_t v20 = 0xAAAAAAAAAAAAAAAALL;
              *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
              BOOL v35 = v20;
              uint64_t v36 = v20;
              *(_OWORD *)&v33[0].__locale_ = v20;
              uint64_t v34 = v20;
              sub_100031C80(v33, (uint64_t)&__p, 0);
              uint64_t v21 = (std::__shared_weak_count *)v36;
              if ((void)v36)
              {
                unint64_t v22 = (unint64_t *)(v36 + 8);
                do
                  uint64_t v23 = __ldaxr(v22);
                while (__stlxr(v23 - 1, v22));
                if (!v23)
                {
                  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
                  std::__shared_weak_count::__release_weak(v21);
                }
              }

              std::locale::~locale(v33);
            }
          }
        }

  *a2 = xpc_null_create();
LABEL_7:
  xpc_release(v4);
}

  *a1 = xpc_null_create();
LABEL_7:
  xpc_release(v3);
}

    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }

    __int128 v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&__int128 v54 = operator new(0x1000uLL);
      sub_10003C080(a1, &v54);
      return;
    }

    *(void *)&__int128 v54 = operator new(0x1000uLL);
    sub_10003C194((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    __int128 v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_10001C3B0((uint64_t)(a1 + 3), v46);
      BOOL v35 = &v34[8 * (v46 >> 2)];
      unint64_t v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      __int128 v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        __int128 v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

  *a1 = v8;
  if ((a6 & 0x8000000000000000LL) != 0) {
    return 0LL;
  }
  else {
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
  }
}

void sub_10003C02C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
}

void sub_10003C080(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  uint64_t v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    uint64_t v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v19 = (char *)sub_10001C3B0(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      unint64_t v22 = (uint64_t *)a1[1];
      uint64_t v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        uint64_t v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v24 = 8 * (v23 >> 3);
        unint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)unint64_t v25 = v26;
          v25 += 8;
          v24 -= 8LL;
        }

        while (v24);
      }

      uint64_t v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        uint64_t v6 = (char *)a1[2];
      }
    }

    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        uint64_t v6 = (char *)a1[1];
      }

      uint64_t v17 = &v6[8 * v13];
      uint64_t v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }

  *(void *)uint64_t v6 = *a2;
  a1[2] += 8LL;
}

void sub_10003C194(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    uint64_t v7 = *(_BYTE **)(a1 + 24);
    uint64_t v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1LL;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)sub_10001C3B0(v6, v12);
      uint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8LL];
      int64_t v16 = *(uint64_t **)(a1 + 8);
      uint64_t v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        uint64_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8LL;
        }

        while (v19);
      }

      unint64_t v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + sub_100007004((uint64_t)v1 + 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }

    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      uint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }

      *(void *)(a1 + sub_100007004((uint64_t)v1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }

  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }

  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8LL;
}

void sub_10003C2B0(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)sub_10001C3B0(a1[4], v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8LL;
        }

        while (v22);
      }

      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }

    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }

      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }

  *(void *)uint64_t v4 = *a2;
  a1[2] += 8LL;
}

void sub_10003C3C4(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(_BYTE **)(a1 + 16);
    uint64_t v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        unint64_t v11 = 1LL;
      }
      else {
        unint64_t v11 = (v7 - v4) >> 2;
      }
      uint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)sub_10001C3B0(*(void *)(a1 + 32), v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8LL];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      unint64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        unint64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8LL;
        }

        while (v18);
      }

      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + sub_100007004((uint64_t)v1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }

    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }

      *(void *)(a1 + sub_100007004((uint64_t)v1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }

  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }

  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8LL;
}

uint64_t sub_10003C4DC(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0LL;
  }
  else {
    uint64_t v4 = 42 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x2A) {
    a2 = 1;
  }
  if (v5 < 0x54) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8LL;
  }

  return v7 ^ 1u;
}

void sub_10003C550(void **a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  unint64_t v4 = (v3 - v2) >> 3;
  if (v3 == v2) {
    uint64_t v5 = 0LL;
  }
  else {
    uint64_t v5 = 42 * v4 - 1;
  }
  uint64_t v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(void)a1[5]] < 0x2A)
  {
    uint64_t v7 = (uint64_t)(a1 + 3);
    uint64_t v8 = a1[3];
    uint64_t v9 = *a1;
    uint64_t v10 = v8 - (_BYTE *)*a1;
    if (v4 >= v10 >> 3)
    {
      if (v8 == v9) {
        unint64_t v11 = 1LL;
      }
      else {
        unint64_t v11 = v10 >> 2;
      }
      unint64_t v46 = a1 + 3;
      std::string __p = sub_10001C3B0(v7, v11);
      unint64_t v43 = (char *)__p;
      uint64_t v44 = (char *)__p;
      uint64_t v45 = (char *)__p + 8 * v12;
      char v41 = operator new(0xFC0uLL);
      sub_10003C2B0(&__p, &v41);
      uint64_t v13 = (char *)a1[1];
      uint64_t v14 = v44;
      if (v13 == a1[2])
      {
        unint64_t v33 = (char *)a1[1];
      }

      else
      {
        do
        {
          if (v14 == v45)
          {
            int64_t v15 = v43 - (_BYTE *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p) {
                unint64_t v23 = 1LL;
              }
              else {
                unint64_t v23 = (v14 - (_BYTE *)__p) >> 2;
              }
              uint64_t v24 = (char *)sub_10001C3B0((uint64_t)v46, v23);
              uint64_t v26 = v43;
              uint64_t v14 = &v24[8 * (v23 >> 2)];
              uint64_t v27 = v44 - v43;
              if (v44 != v43)
              {
                uint64_t v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8LL)];
                uint64_t v28 = 8 * (v27 >> 3);
                uint64_t v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  uint64_t v30 = *(void *)v26;
                  v26 += 8;
                  *(void *)uint64_t v29 = v30;
                  v29 += 8;
                  v28 -= 8LL;
                }

                while (v28);
              }

              __int128 v31 = __p;
              std::string __p = v24;
              unint64_t v43 = &v24[8 * (v23 >> 2)];
              uint64_t v44 = v14;
              uint64_t v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                uint64_t v14 = v44;
              }
            }

            else
            {
              uint64_t v16 = v15 >> 3;
              BOOL v17 = v15 >> 3 < -1;
              uint64_t v18 = (v15 >> 3) + 2;
              if (v17) {
                uint64_t v19 = v18;
              }
              else {
                uint64_t v19 = v16 + 1;
              }
              uint64_t v20 = &v43[-8 * (v19 >> 1)];
              int64_t v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                uint64_t v14 = v43;
              }

              uint64_t v22 = &v14[-8 * (v19 >> 1)];
              uint64_t v14 = &v20[v21];
              unint64_t v43 = v22;
              uint64_t v44 = &v20[v21];
            }
          }

          uint64_t v32 = *(void *)v13;
          v13 += 8;
          *(void *)uint64_t v14 = v32;
          uint64_t v14 = v44 + 8;
          v44 += 8;
        }

        while (v13 != a1[2]);
        unint64_t v33 = (char *)a1[1];
      }

      uint64_t v36 = *a1;
      unint64_t v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      std::string __p = v36;
      unint64_t v43 = v33;
      uint64_t v38 = (char *)a1[3];
      uint64_t v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      uint64_t v44 = v13;
      uint64_t v45 = v38;
      if (v14 - v37 == 8) {
        uint64_t v40 = 21LL;
      }
      else {
        uint64_t v40 = (uint64_t)a1[4] + 42;
      }
      a1[4] = (void *)v40;
      if (v13 != v33) {
        uint64_t v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8LL];
      }
      if (v36) {
        operator delete(v36);
      }
    }

    else
    {
      if (v2 == v9)
      {
        std::string __p = operator new(0xFC0uLL);
        sub_10003C080(a1, &__p);
        uint64_t v34 = a1[2];
        std::string __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }

      else
      {
        std::string __p = operator new(0xFC0uLL);
      }

      sub_10003C194((uint64_t)a1, &__p);
      if ((_BYTE *)a1[2] - (_BYTE *)a1[1] == 8) {
        uint64_t v35 = 21LL;
      }
      else {
        uint64_t v35 = (uint64_t)a1[4] + 42;
      }
      a1[4] = (void *)v35;
    }
  }

  else
  {
    a1[4] = v6 + 42;
    std::string __p = (void *)*((void *)v3 - 1);
    a1[2] = v3 - 8;
    sub_10003C194((uint64_t)a1, &__p);
  }

void sub_10003C848( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10003C89C(void *a1)
{
  uint64_t v2 = a1 + 5;
  uint64_t v3 = (void **)a1[1];
  unint64_t v4 = (void **)a1[2];
  if (v4 == v3)
  {
    unint64_t v4 = (void **)a1[1];
  }

  else
  {
    unint64_t v5 = a1[4];
    uint64_t v6 = &v3[v5 / 0x2A];
    uint64_t v7 = (char *)*v6 + 96 * (v5 % 0x2A);
    unint64_t v8 = (unint64_t)v3[(a1[5] + v5) / 0x2A] + 96 * ((a1[5] + v5) % 0x2A);
    if (v7 != (char *)v8)
    {
      do
      {
        sub_100034424((uint64_t)v2, v7);
        v7 += 96;
        if (v7 - (_BYTE *)*v6 == 4032)
        {
          uint64_t v9 = (char *)v6[1];
          ++v6;
          uint64_t v7 = v9;
        }
      }

      while (v7 != (char *)v8);
      uint64_t v3 = (void **)a1[1];
      unint64_t v4 = (void **)a1[2];
    }
  }

  void *v2 = 0LL;
  unint64_t v10 = (char *)v4 - (char *)v3;
  if ((unint64_t)((char *)v4 - (char *)v3) >= 0x11)
  {
    do
    {
      operator delete(*v3);
      unint64_t v4 = (void **)a1[2];
      uint64_t v3 = (void **)(a1[1] + 8LL);
      a1[1] = v3;
      unint64_t v10 = (char *)v4 - (char *)v3;
    }

    while ((unint64_t)((char *)v4 - (char *)v3) > 0x10);
  }

  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 21LL;
  }

  else
  {
    if (v11 != 2) {
      goto LABEL_16;
    }
    uint64_t v12 = 42LL;
  }

  a1[4] = v12;
LABEL_16:
  while (v3 != v4)
  {
    uint64_t v13 = *v3++;
    operator delete(v13);
  }

  return sub_10003C9E0((uint64_t)a1);
}

uint64_t sub_10003C9E0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  }
  unint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

char *sub_10003CA2C(void *a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  int64x2_t result = (char *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) >= a4)
  {
    uint64_t v19 = (char *)a1[1];
    uint64_t v14 = a1 + 1;
    uint64_t v13 = v19;
    unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((v19 - result) >> 3);
    if (v20 >= a4)
    {
      uint64_t v25 = result;
      if (a2 != a3)
      {
        uint64_t v26 = result;
        do
        {
          *(_OWORD *)uint64_t v26 = *v6;
          v26[16] = *((_BYTE *)v6 + 16);
          v25 += 24;
          uint64_t v6 = (__int128 *)((char *)v6 + 24);
          v26 += 24;
        }

        while (v6 != a3);
      }

      int64_t v18 = v25 - result;
      uint64_t v13 = result;
    }

    else
    {
      int64_t v21 = (__int128 *)((char *)a2 + 24 * v20);
      if (v13 != result)
      {
        do
        {
          *(_OWORD *)int64x2_t result = *v6;
          result[16] = *((_BYTE *)v6 + 16);
          uint64_t v6 = (__int128 *)((char *)v6 + 24);
          result += 24;
        }

        while (v6 != v21);
      }

      uint64_t v22 = v13;
      if (v21 != a3)
      {
        unint64_t v23 = v13;
        do
        {
          __int128 v24 = *v21;
          *((void *)v23 + 2) = *((void *)v21 + 2);
          *(_OWORD *)unint64_t v23 = v24;
          v23 += 24;
          int64_t v21 = (__int128 *)((char *)v21 + 24);
          v22 += 24;
        }

        while (v21 != a3);
      }

      int64_t v18 = v22 - v13;
    }
  }

  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0LL;
      *a1 = 0LL;
      a1[1] = 0LL;
      a1[2] = 0LL;
    }

    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      sub_1000046F8();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x555555555555555LL) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v11;
    }
    int64x2_t result = sub_100033EC4(a1, v12);
    int64_t v15 = (char *)a1[1];
    uint64_t v14 = a1 + 1;
    uint64_t v13 = v15;
    uint64_t v16 = v15;
    if (v6 != a3)
    {
      uint64_t v16 = v13;
      do
      {
        __int128 v17 = *v6;
        *((void *)v16 + 2) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v16 = v17;
        v16 += 24;
        uint64_t v6 = (__int128 *)((char *)v6 + 24);
      }

      while (v6 != a3);
    }

    int64_t v18 = v16 - v13;
  }

  *uint64_t v14 = &v13[v18];
  return result;
}

char *sub_10003CBE0(void *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  int64x2_t result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 4)
  {
    int64_t v18 = (char *)a1[1];
    uint64_t v13 = a1 + 1;
    unint64_t v12 = v18;
    unint64_t v19 = (v18 - result) >> 4;
    if (v19 >= a4)
    {
      uint64_t v26 = result;
      if (a2 != a3)
      {
        uint64_t v27 = result;
        do
        {
          uint64_t v28 = *v6;
          uint64_t v29 = v6[1];
          v6 += 2;
          *(void *)uint64_t v27 = v28;
          *((void *)v27 + 1) = v29;
          v27 += 16;
          v26 += 16;
        }

        while (v6 != a3);
      }

      __int128 v17 = (char *)(v26 - result);
      unint64_t v12 = result;
    }

    else
    {
      unint64_t v20 = (__int128 *)&a2[2 * v19];
      if (v12 != result)
      {
        do
        {
          uint64_t v21 = *v6;
          uint64_t v22 = v6[1];
          v6 += 2;
          *(void *)int64x2_t result = v21;
          *((void *)result + 1) = v22;
          result += 16;
        }

        while (v6 != (uint64_t *)v20);
      }

      unint64_t v23 = v12;
      if (v20 != (__int128 *)a3)
      {
        __int128 v24 = v12;
        do
        {
          __int128 v25 = *v20++;
          *(_OWORD *)__int128 v24 = v25;
          v24 += 16;
          v23 += 16;
        }

        while (v20 != (__int128 *)a3);
      }

      __int128 v17 = (char *)(v23 - v12);
    }
  }

  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0LL;
      *a1 = 0LL;
      a1[1] = 0LL;
      a1[2] = 0LL;
    }

    if (a4 >> 60) {
      sub_1000046F8();
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    else {
      unint64_t v11 = v10;
    }
    int64x2_t result = sub_10000C194(a1, v11);
    uint64_t v14 = (char *)a1[1];
    uint64_t v13 = a1 + 1;
    unint64_t v12 = v14;
    int64_t v15 = v14;
    if (v6 != a3)
    {
      int64_t v15 = v12;
      do
      {
        __int128 v16 = *(_OWORD *)v6;
        v6 += 2;
        *(_OWORD *)int64_t v15 = v16;
        v15 += 16;
      }

      while (v6 != a3);
    }

    __int128 v17 = (char *)(v15 - v12);
  }

  void *v13 = &v17[(void)v12];
  return result;
}

void sub_10003CD2C(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_10003CD68((void **)a1, v4);
  }

  else if (!v3)
  {
    *(void *)(a1 + sub_100007004((uint64_t)v1 + 8) = *(void *)a1 + 24 * a2;
  }

void sub_10003CD68(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(void **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (_BYTE *)v7) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = &v7[3 * a2];
      uint64_t v14 = 24 * a2;
      do
      {
        *uint64_t v7 = 0LL;
        v7[1] = 0LL;
        *((_BYTE *)v7 + 16) = 0;
        v7 += 3;
        v14 -= 24LL;
      }

      while (v14);
      uint64_t v7 = v13;
    }

    a1[1] = v7;
  }

  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (_BYTE *)*a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_1000046F8();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555LL) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      unint64_t v12 = (char *)sub_1000171F0(v4, v11);
    }
    else {
      unint64_t v12 = 0LL;
    }
    int64_t v15 = &v12[24 * v8];
    __int128 v16 = &v15[24 * a2];
    uint64_t v17 = 24 * a2;
    int64_t v18 = v15;
    do
    {
      *(void *)int64_t v18 = 0LL;
      *((void *)v18 + 1) = 0LL;
      v18[16] = 0;
      v18 += 24;
      v17 -= 24LL;
    }

    while (v17);
    unint64_t v19 = &v12[24 * v11];
    uint64_t v21 = (char *)*a1;
    unint64_t v20 = (char *)a1[1];
    if (v20 != *a1)
    {
      do
      {
        __int128 v22 = *(_OWORD *)(v20 - 24);
        *((void *)v15 - 1) = *((void *)v20 - 1);
        *(_OWORD *)(v15 - 24) = v22;
        v15 -= 24;
        v20 -= 24;
      }

      while (v20 != v21);
      unint64_t v20 = (char *)*a1;
    }

    *a1 = v15;
    a1[1] = v16;
    a1[2] = v19;
    if (v20) {
      operator delete(v20);
    }
  }

uint64_t sub_10003CED0@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 32) = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)a3 = v6;
  *(_OWORD *)(a3 + 16) = v6;
  uint64_t v7 = (unsigned __int8 **)sub_100008B44((void *)a3, a1);
  uint64_t result = (uint64_t)sub_100008AC8(v7);
  if (*(_BYTE *)a1 == 1)
  {
    uint64_t result = sub_10003CF38(*(void *)(a1 + 8), a2);
    *(void *)(a3 + sub_100007004((uint64_t)v1 + 8) = result;
  }

  return result;
}

uint64_t sub_10003CF38(uint64_t a1, const void **a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 16;
  uint64_t v6 = a1 + 8;
  do
  {
    BOOL v7 = sub_100005524(v5, (const void **)(v3 + 32), a2);
    unint64_t v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      unint64_t v8 = (uint64_t *)v3;
      uint64_t v6 = v3;
    }

    uint64_t v3 = *v8;
  }

  while (*v8);
  return v6;
}

_BYTE *sub_10003CFC4(_BYTE *result, int *a2)
{
  uint64_t v2 = result;
  switch(*result)
  {
    case 4:
      int v3 = result[8];
      break;
    case 5:
    case 6:
      int v3 = *((_DWORD *)result + 2);
      break;
    case 7:
      int v3 = (int)*((double *)result + 1);
      break;
    default:
      exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
      uint64_t v5 = (char *)sub_10000528C(v2);
      sub_100005064(&v8, v5);
      uint64_t v6 = std::string::insert(&v8, 0LL, "type must be number, but is ");
      __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      std::string::size_type cap = v6->__r_.__value_.__l.__cap_;
      __int128 v9 = v7;
      v6->__r_.__value_.__l.__size_ = 0LL;
      v6->__r_.__value_.__l.__cap_ = 0LL;
      v6->__r_.__value_.__r.__words[0] = 0LL;
      sub_100005128(302, (uint64_t)&v9, exception);
  }

  *a2 = v3;
  return result;
}

void sub_10003D0E0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }

  else if (!v22)
  {
    goto LABEL_8;
  }

  __cxa_free_exception(v21);
  goto LABEL_8;
}

void **sub_10003D140(void *a1)
{
  uint64_t v5 = a1;
  uint64_t v1 = *a1;
  uint64_t v2 = (os_log_s *)qword_1001318F0;
  if (os_log_type_enabled((os_log_t)qword_1001318F0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  " *** DAILY ROLLOVER EXPIRATION COMPLETE ***",  buf,  2u);
  }

  uint64_t v3 = *(void *)(v1 + 280);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 48LL))(v3);
  }
  sub_10002F190(v1);
  sub_10008A7CC(*(void *)(v1 + 96));
  return sub_100025588(&v5);
}

void sub_10003D208(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_10003D21C( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void *sub_10003D22C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, void *a5@<X8>)
{
  *a5 = 0xAAAAAAAAAAAAAAAALL;
  a5[1] = 0LL;
  *(_BYTE *)a5 = 0;
  sub_1000041AC((uint64_t)a5);
  sub_1000041AC((uint64_t)a5);
  sub_1000123E4((uint64_t)v14, a3);
  sub_100026B14(a1, a2, (uint64_t)v14, a4, (uint64_t)v16);
  sub_100026BFC((uint64_t)v16, 1, (uint64_t)a5);
  sub_10001A17C((uint64_t)&v18);
  unint64_t v10 = v17;
  if (v17 == v16)
  {
    uint64_t v11 = 4LL;
    unint64_t v10 = v16;
  }

  else
  {
    if (!v17) {
      goto LABEL_6;
    }
    uint64_t v11 = 5LL;
  }

  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_6:
  uint64_t result = v15;
  if (v15 == v14)
  {
    uint64_t v13 = 4LL;
    uint64_t result = v14;
  }

  else
  {
    if (!v15) {
      return result;
    }
    uint64_t v13 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v13))();
}

void sub_10003D354( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13)
{
  int64_t v15 = a12;
  if (a12 == &a9)
  {
    uint64_t v16 = 4LL;
    int64_t v15 = &a9;
  }

  else
  {
    if (!a12) {
      goto LABEL_6;
    }
    uint64_t v16 = 5LL;
  }

  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_6:
  sub_10000417C(v13);
  _Unwind_Resume(a1);
}

void sub_10003D3B0(uint64_t a1@<X0>, void *a2@<X8>)
{
  errorString[0] = 0LL;
  uint64_t v4 = (void *)IOCFUnserializeWithSize( (const char *)(a1 + 72),  *(unsigned int *)(a1 + 4),  kCFAllocatorDefault,  0LL,  errorString);
  uint64_t v5 = (os_log_s *)qword_100131968;
  if (v4)
  {
    if (os_log_type_enabled((os_log_t)qword_100131968, OS_LOG_TYPE_DEBUG)) {
      sub_1000D7E88(a1, (uint64_t)v4, v5);
    }
    *a2 = 0xAAAAAAAAAAAAAAAALL;
    a2[1] = 0xAAAAAAAAAAAAAAAALL;
    sub_1000588F4(v4, (uint64_t)a2);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_100131968, OS_LOG_TYPE_ERROR)) {
      sub_1000D7DFC(a1, (uint64_t *)errorString, v5);
    }
    *(_BYTE *)a2 = 0;
    a2[1] = 0LL;
    sub_1000041AC((uint64_t)a2);
    sub_1000041AC((uint64_t)a2);
  }

void sub_10003D4C0( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 buf, int a12, __int16 a13, __int16 a14, void *a15)
{
  if (a2 == 1)
  {
    id v21 = objc_begin_catch(a1);
    int v22 = (os_log_s *)*(id *)(v18 + 128);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      unint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v21 name]);
      __int128 v24 = (void *)objc_claimAutoreleasedReturnValue([v21 reason]);
      LODWORD(buf) = 136315650;
      *(void *)((char *)&buf + 4) = v16 + 8;
      WORD6(buf) = 2114;
      *(void *)((char *)&buf + 14) = v23;
      a14 = 2114;
      a15 = v24;
      _os_log_error_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "[KernelEventToJson] Error: Unable to convert deserialized event %s to json: %{public}@ (%{public}@)",  (uint8_t *)&buf,  0x20u);
    }

    *(_BYTE *)uint64_t v15 = 0;
    *(void *)(v15 + sub_100007004((uint64_t)v1 + 8) = 0LL;
    sub_1000041AC(v15);
    sub_1000041AC(v15);

    objc_end_catch();
    JUMPOUT(0x10003D48CLL);
  }

  _Unwind_Resume(a1);
}

BOOL sub_10003D5C8(const char *a1)
{
  return !strcmp(a1, "Time")
      || !strcmp(a1, "TimeNanoSec")
      || !strcmp(a1, "ASLMessageID")
      || !strcmp(a1, "Message")
      || !strcmp(a1, "Facility")
      || !strcmp(a1, "Sender")
      || !strcmp(a1, "PID")
      || strncmp(a1, "com.apple.message.", 0x12uLL) == 0;
}

void sub_10003D690(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v16 = 0LL;
  uint64_t v17 = (unsigned __int8 *)&v16;
  uint64_t v18 = 0x3802000000LL;
  unint64_t v19 = sub_10003D8E0;
  unint64_t v20 = sub_10003D924;
  unint64_t v21 = 0xAAAAAAAAAAAAAAAALL;
  int v22 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10000BA40((uint64_t)&v21, 0LL, 0LL, 0, 1);
  string = xpc_dictionary_get_string(a1, "com.apple.message.summarize");
  if (string) {
    BOOL v5 = strncmp(string, "YES", 3uLL) == 0;
  }
  else {
    BOOL v5 = 0;
  }
  applier[0] = _NSConcreteStackBlock;
  applier[1] = 0x40000000LL;
  applier[2] = sub_10003D950;
  applier[3] = &unk_100127328;
  BOOL v15 = v5;
  applier[4] = &v16;
  xpc_dictionary_apply(a1, applier);
  uint64_t v6 = (char *)xpc_dictionary_get_string(a1, "Message");
  uint64_t v13 = v6;
  if (v6)
  {
    if (*v6)
    {
      sub_10000E89C((uint64_t)v11, &v13);
      __int128 v7 = sub_100003F94(v17 + 40, "Message");
      sub_1000041AC((uint64_t)v11);
      char v8 = *(_BYTE *)v7;
      *(_BYTE *)__int128 v7 = v11[0];
      v11[0] = v8;
      __int128 v9 = (uint64_t *)v7[1];
      v7[1] = (uint64_t)v12;
      unint64_t v12 = v9;
      sub_1000041AC((uint64_t)v7);
      sub_1000041AC((uint64_t)v11);
      sub_10000425C(&v12, v11[0]);
      unint64_t v10 = (os_log_s *)qword_1001318F8;
      if (os_log_type_enabled((os_log_t)qword_1001318F8, OS_LOG_TYPE_DEBUG)) {
        sub_1000D7F10((uint64_t *)&v13, v10);
      }
    }
  }

  sub_10000C3E4(a2, (uint64_t)(v17 + 40));
  _Block_object_dispose(&v16, 8);
  sub_1000041AC((uint64_t)&v21);
  sub_10000425C(&v22, v21);
}

void sub_10003D8A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v4 = va_arg(va1, uint64_t *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  sub_10000417C((uint64_t **)va);
  _Block_object_dispose(va1, 8);
  sub_10000417C(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_10003D8E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 40;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  uint64_t v3 = a1 + 40;
  *(void *)(a1 + 4sub_100007004((uint64_t)v1 + 8) = *(void *)(a2 + 48);
  sub_1000041AC(a2 + 40);
  *(_BYTE *)uint64_t v2 = 0;
  *(void *)(v2 + sub_100007004((uint64_t)v1 + 8) = 0LL;
  return sub_1000041AC(v3);
}

void sub_10003D924(uint64_t a1)
{
}

uint64_t sub_10003D950(uint64_t a1, char *a2, void *a3)
{
  if (sub_10003D5C8(a2))
  {
    string_ptr = (char *)xpc_string_get_string_ptr(a3);
    unint64_t v23 = string_ptr;
    if (string_ptr)
    {
      uint64_t v7 = string_ptr;
      if (strncmp(a2, "com.apple.message.domain", 0x18uLL))
      {
        if (*(_BYTE *)(a1 + 40) && !strncmp(a2, "com.apple.message.value", 0x17uLL))
        {
          double v13 = strtod(v7, 0LL);
          uint64_t v14 = (os_log_s *)qword_1001318F8;
          if (os_log_type_enabled((os_log_t)qword_1001318F8, OS_LOG_TYPE_DEBUG)) {
            sub_1000D7F88((uint64_t)v7, v14, v13);
          }
          v21[0] = 7;
          double v22 = v13;
          sub_1000041AC((uint64_t)v21);
          sub_1000041AC((uint64_t)v21);
          BOOL v15 = sub_100003F94((unsigned __int8 *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL), a2);
          uint64_t v10 = (uint64_t **)&v22;
          sub_1000041AC((uint64_t)v21);
          unsigned __int8 v16 = *(_BYTE *)v15;
          *(_BYTE *)BOOL v15 = v21[0];
          v21[0] = v16;
          uint64_t v17 = v15[1];
          *((double *)v15 + 1) = v22;
          double v22 = *(double *)&v17;
          sub_1000041AC((uint64_t)v15);
          sub_1000041AC((uint64_t)v21);
          int v12 = v21[0];
        }

        else
        {
          sub_10000E89C((uint64_t)v19, &v23);
          uint64_t v8 = sub_100003F94((unsigned __int8 *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL), a2);
          sub_1000041AC((uint64_t)v19);
          char v9 = *(_BYTE *)v8;
          *(_BYTE *)uint64_t v8 = v19[0];
          v19[0] = v9;
          uint64_t v10 = (uint64_t **)&v20;
          uint64_t v11 = v8[1];
          v8[1] = v20;
          uint64_t v20 = v11;
          sub_1000041AC((uint64_t)v8);
          sub_1000041AC((uint64_t)v19);
          int v12 = v19[0];
        }

        sub_10000425C(v10, v12);
      }
    }
  }

  return 1LL;
}

void sub_10003DB40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_10003DB6C@<X0>( std::chrono::duration<long long, std::ratio<1, 1000000>>::rep a1@<X0>, uint64_t a2@<X1>, std::stringbuf::string_type *a3@<X8>)
{
  __t.__d_.__rep_ = a1;
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v14[7] = v5;
  _BYTE v14[8] = v5;
  void v14[5] = v5;
  v14[6] = v5;
  void v14[3] = v5;
  v14[4] = v5;
  v14[1] = v5;
  v14[2] = v5;
  __int128 v13 = v5;
  v14[0] = v5;
  *(_OWORD *)std::string __p = v5;
  __int128 v12 = v5;
  v10[2] = v5;
  void v10[3] = v5;
  v10[0] = v5;
  v10[1] = v5;
  sub_10003DCB4((uint64_t)v10);
  time_t v8 = std::chrono::system_clock::to_time_t(&__t);
  v7[0] = (uint64_t)gmtime(&v8);
  v7[1] = a2;
  sub_10003DDA0(v10, v7);
  std::stringbuf::str(a3, (const std::stringbuf *)((char *)v10 + 8));
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf((char *)v10 + 8);
  return std::ios::~ios(v14);
}

void sub_10003DC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_10003DCB4(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  *(void *)a1 = v3;
  *(void *)(a1 + *(void *)(v3 - 24)) = v4;
  __int128 v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24LL));
  std::ios_base::init(v5, (void *)(a1 + 8));
  v5[1].__vftable = 0LL;
  v5[1].__fmtflags_ = -1;
  std::streambuf::basic_streambuf(v2);
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8sub_100007004((uint64_t)v1 + 8) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_10003DD78(_Unwind_Exception *a1)
{
}

void *sub_10003DDA0(void *a1, uint64_t *a2)
{
  v13[0] = 0xAAAAAAAAAAAAAAAALL;
  v13[1] = 0xAAAAAAAAAAAAAAAALL;
  std::ostream::sentry::sentry(v13, a1);
  if (LOBYTE(v13[0]))
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24LL)));
    uint64_t v4 = std::locale::use_facet(&v14, &std::time_put<char,std::ostreambuf_iterator<char>>::id);
    std::locale::~locale(&v14);
    __int128 v5 = (const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24LL));
    rd__int128 buf = v5->__rdbuf_;
    std::ios_base::fmtflags fmtflags = v5[1].__fmtflags_;
    if (fmtflags == -1)
    {
      std::ios_base::getloc(v5);
      time_t v8 = std::locale::use_facet(&v14, &std::ctype<char>::id);
      std::ios_base::fmtflags fmtflags = ((uint64_t (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 32LL);
      std::locale::~locale(&v14);
      v5[1].__fmtflags_ = fmtflags;
    }

    uint64_t v10 = *a2;
    char v9 = (const char *)a2[1];
    size_t v11 = strlen(v9);
    if (!std::time_put<char,std::ostreambuf_iterator<char>>::put( v4,  rdbuf,  v5,  (char)fmtflags,  v10,  v9,  &v9[v11])) {
      std::ios_base::clear( (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24LL)),  *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24LL) + 32) | 1);
    }
  }

  std::ostream::sentry::~sentry(v13);
  return a1;
}

void sub_10003DF04( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11)
{
  if (a2)
  {
    std::ostream::sentry::~sentry(&a9);
    __cxa_begin_catch(exception_object);
    std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v11 + *(void *)(*v11 - 24LL)));
    __cxa_end_catch();
    JUMPOUT(0x10003DEC8LL);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_10003DF8C(uint64_t a1)
{
  uint64_t v3 = a1 + 8;
  std::streambuf::~streambuf(v3);
  std::ios::~ios(a1 + 112);
  return a1;
}

unint64_t sub_10003E010(const std::string *a1, uint64_t a2)
{
  *(void *)&__int128 v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v16[8] = v3;
  v16[9] = v3;
  v16[6] = v3;
  v16[7] = v3;
  v16[4] = v3;
  v16[5] = v3;
  v16[2] = v3;
  void v16[3] = v3;
  v16[0] = v3;
  v16[1] = v3;
  *(_OWORD *)std::string __p = v3;
  __int128 v15 = v3;
  v13[1] = v3;
  void v13[2] = v3;
  __int128 v12 = v3;
  v13[0] = v3;
  __int128 v11 = v3;
  sub_10003E1B4((void (__cdecl ***)(std::istringstream *__hidden))&v11, a1, 8);
  memset(&v10, 0, sizeof(v10));
  v9[0] = (uint64_t)&v10;
  v9[1] = a2;
  sub_10003E298(&v11, v9);
  if ((*((_BYTE *)v13 + *(void *)(v11 - 24)) & 5) != 0)
  {
    uint64_t rep_low = 0LL;
    unint64_t v5 = 0LL;
  }

  else
  {
    time_t v6 = mktime(&v10);
    v7.__d_.__rep_ = std::chrono::system_clock::from_time_t(v6 - timezone).__d_.__rep_;
    unint64_t v5 = v7.__d_.__rep_ & 0xFFFFFFFFFFFFFF00LL;
    uint64_t rep_low = LOBYTE(v7.__d_.__rep_);
  }

  if (SBYTE7(v15) < 0) {
    operator delete(__p[0]);
  }
  std::streambuf::~streambuf(&v12);
  std::ios::~ios((char *)v16 + 8);
  return v5 | rep_low;
}

void sub_10003E194( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void (__cdecl ***sub_10003E1B4( void (__cdecl ***a1)(std::istringstream *__hidden this), const std::string *a2, int a3))(std::istringstream *__hidden this)
{
  uint64_t v6 = (uint64_t)(a1 + 2);
  *a1 = v7;
  *(void *)((char *)*(v7 - 3) + (void)a1) = v8;
  a1[1] = 0LL;
  char v9 = (std::ios_base *)((char *)*(*a1 - 3) + (void)a1);
  std::ios_base::init(v9, a1 + 2);
  v9[1].__vftable = 0LL;
  v9[1].__fmtflags_ = -1;
  sub_10003FE04(v6, a2, a3 | 8);
  return a1;
}

void sub_10003E270(_Unwind_Exception *a1)
{
}

void *sub_10003E298(void *a1, uint64_t *a2)
{
  char v11 = -86;
  std::istream::sentry::sentry(&v11, a1, 0LL);
  if (v11)
  {
    int v10 = 0;
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24LL)));
    uint64_t v4 = std::locale::use_facet(&v9, &std::time_get<char,std::istreambuf_iterator<char>>::id);
    std::locale::~locale(&v9);
    uint64_t v6 = *a2;
    unint64_t v5 = (const char *)a2[1];
    size_t v7 = strlen(v5);
    std::time_get<char,std::istreambuf_iterator<char>>::get( v4,  *(void *)((char *)a1 + *(void *)(*a1 - 24LL) + 40),  0LL,  (char *)a1 + *(void *)(*a1 - 24LL),  &v10,  v6,  v5,  &v5[v7]);
    std::ios_base::clear( (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24LL)),  *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24LL) + 32) | v10);
  }

  return a1;
}

void sub_10003E3B0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  if (a2)
  {
    std::locale::~locale(&a10);
    __cxa_begin_catch(exception_object);
    std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v10 + *(void *)(*v10 - 24LL)));
    __cxa_end_catch();
    JUMPOUT(0x10003E378LL);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_10003E420(uint64_t a1)
{
  uint64_t v3 = a1 + 16;
  std::streambuf::~streambuf(v3);
  std::ios::~ios(a1 + 120);
  return a1;
}

uint64_t sub_10003E4A4()
{
  int v3 = -1431655766;
  sub_10003FB7C(&v3, 0x7B2u, 1u, 1u);
  unsigned int v2 = -1431655766;
  unint64_t v0 = sub_10003FFA4();
  int v4 = v0;
  __int16 v5 = WORD2(v0);
  sub_100040524(&v2, &v4);
  return sub_10003E538(&v2, &v3);
}

uint64_t sub_10003E538(unsigned int *a1, int *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  int v8 = *a2;
  unsigned int v9 = v2;
  int v5 = sub_10003FD80(&v9, &v8);
  unint64_t v6 = 0x7FFFFFFFFFFFFFFELL;
  if (!v5) {
    unint64_t v6 = 0x8000000000000000LL;
  }
  if (v5 == -1) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    return v6;
  }
}

unint64_t sub_10003E5CC(uint64_t a1, uint64_t a2)
{
  return (unint64_t)fabs((double)(a1 - a2) / 1000000.0) / 0x15180 + 1;
}

__n128 sub_10003E608@<Q0>( std::chrono::duration<long long, std::ratio<1, 1000000>>::rep a1@<X0>, uint64_t a2@<X8>)
{
  __t.__d_.__rep_ = a1;
  time_t v6 = std::chrono::system_clock::to_time_t(&__t);
  uint64_t v3 = gmtime(&v6);
  __int128 v4 = *(_OWORD *)&v3->tm_mon;
  *(_OWORD *)a2 = *(_OWORD *)&v3->tm_sec;
  *(_OWORD *)(a2 + 16) = v4;
  __n128 result = *(__n128 *)&v3->tm_isdst;
  *(__n128 *)(a2 + 32) = result;
  *(void *)(a2 + 4std::istream::~istream(v2, v3 + 8) = v3->tm_zone;
  return result;
}

std::chrono::system_clock::time_point sub_10003E688(uint64_t a1)
{
  __int128 v1 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v4.tm_sec = *(_OWORD *)a1;
  *(_OWORD *)&v4.tm_mouint64_t n = v1;
  *(_OWORD *)&v4.tm_isdst = *(_OWORD *)(a1 + 32);
  v4.tm_zone = *(char **)(a1 + 48);
  v4.tm_hour = 0;
  ++v4.tm_mday;
  *(void *)&v4.tm_sec = 0LL;
  time_t v2 = mktime(&v4);
  return std::chrono::system_clock::from_time_t(v2 - timezone);
}

std::chrono::system_clock::time_point sub_10003E710(uint64_t a1)
{
  *(_OWORD *)&v4.tm_sec = *(_OWORD *)a1;
  *(void *)&v4.tm_mouint64_t n = *(void *)(a1 + 16);
  int v1 = (8 - *(_DWORD *)(a1 + 24)) % 7;
  if (!v1) {
    int v1 = 7;
  }
  v4.tm_wday = *(_DWORD *)(a1 + 24);
  *(_OWORD *)&v4.tm_yday = *(_OWORD *)(a1 + 28);
  *(_OWORD *)&v4.tm_gmtoff = *(_OWORD *)(a1 + 40);
  v4.tm_hour = 0;
  v4.tm_mday += v1;
  *(void *)&v4.tm_sec = 0LL;
  time_t v2 = mktime(&v4);
  return std::chrono::system_clock::from_time_t(v2 - timezone);
}

std::chrono::system_clock::time_point sub_10003E7DC(uint64_t a1)
{
  __int128 v1 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v4.tm_sec = *(_OWORD *)a1;
  *(_OWORD *)&v4.tm_mouint64_t n = v1;
  *(_OWORD *)&v4.tm_isdst = *(_OWORD *)(a1 + 32);
  v4.tm_zone = *(char **)(a1 + 48);
  v4.tm_mouint64_t n = v1 + 1;
  if ((int)v1 >= 11)
  {
    v4.tm_mouint64_t n = 0;
    ++v4.tm_year;
  }

  *(_OWORD *)&v4.tm_sec = xmmword_1000F3C80;
  time_t v2 = mktime(&v4);
  return std::chrono::system_clock::from_time_t(v2 - timezone);
}

std::chrono::system_clock::time_point sub_10003E880(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  *(_OWORD *)&v4.tm_year = *(_OWORD *)(a1 + 20);
  *(_OWORD *)(&v4.tm_isdst + 1) = *(_OWORD *)(a1 + 36);
  HIDWORD(v4.tm_zone) = *(_DWORD *)(a1 + 52);
  v4.tm_mouint64_t n = 3 * ((v1 + 3) / 3);
  if (v4.tm_mon >= 12)
  {
    v4.tm_mouint64_t n = 0;
    ++v4.tm_year;
  }

  *(_OWORD *)&v4.tm_sec = xmmword_1000F3C80;
  time_t v2 = mktime(&v4);
  return std::chrono::system_clock::from_time_t(v2 - timezone);
}

_WORD *sub_10003E940(_WORD *result, unsigned int a2)
{
  if (a2 <= 0x577 || a2 >> 4 >= 0x271) {
    sub_10003E974();
  }
  *__n128 result = a2;
  return result;
}

void sub_10003E974()
{
}

void sub_10003E9A8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::out_of_range a10)
{
}

void sub_10003E9C4(const std::logic_error *a1)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
  sub_10003EA18((uint64_t)exception, a1);
}

void sub_10003EA00(_Unwind_Exception *a1)
{
}

uint64_t sub_10003EA18(uint64_t a1, const std::logic_error *a2)
{
  *(void *)a1 = &off_100127450;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), a2);
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 4std::istream::~istream(v2, v3 + 8) = 0LL;
  *(_DWORD *)(a1 + 56) = -1;
  *(void *)a1 = &off_1001273D8;
  *(void *)(a1 + std::istream::~istream(v2, v3 + 8) = off_100127408;
  *(void *)(a1 + 24) = off_100127430;
  *(void *)(a1 + 32) = 0LL;
  return a1;
}

uint64_t sub_10003EA74(uint64_t a1)
{
  *(void *)(a1 + 24) = &off_1001274A8;
  sub_10003ED4C((uint64_t *)(a1 + 32));
  std::out_of_range::~out_of_range((std::out_of_range *)(a1 + 8));
  return a1;
}

char *sub_10003EAB4(uint64_t a1)
{
  time_t v2 = (char *)operator new(0x40uLL);
  *(void *)time_t v2 = &off_100127450;
  std::logic_error::logic_error((std::logic_error *)(v2 + 8), (const std::logic_error *)(a1 + 8));
  *((void *)v2 + 1) = &off_100127480;
  *((void *)v2 + 3) = &off_1001274A8;
  uint64_t v3 = *(void *)(a1 + 32);
  *((void *)v2 + 4) = v3;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
  }
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *((_DWORD *)v2 + 14) = *(_DWORD *)(a1 + 56);
  *(void *)time_t v2 = &off_1001273D8;
  *((void *)v2 + 1) = off_100127408;
  *((void *)v2 + 3) = off_100127430;
  sub_10003EE4C((uint64_t)(v2 + 24), a1 + 24);
  return v2;
}

void sub_10003EB7C(_Unwind_Exception *a1)
{
}

void sub_10003EBB0(uint64_t a1)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
  sub_10003ED8C((uint64_t)exception, a1);
}

void sub_10003EBEC(_Unwind_Exception *a1)
{
}

void sub_10003EC00(uint64_t a1)
{
  *(void *)(a1 + 24) = &off_1001274A8;
  sub_10003ED4C((uint64_t *)(a1 + 32));
  std::out_of_range::~out_of_range((std::out_of_range *)(a1 + 8));
  operator delete((void *)a1);
}

void sub_10003EC40(uint64_t a1)
{
  *(void *)(a1 + 16) = &off_1001274A8;
  sub_10003ED4C((uint64_t *)(a1 + 24));
  std::out_of_range::~out_of_range((std::out_of_range *)a1);
}

void sub_10003EC78(uint64_t a1)
{
  time_t v2 = (void *)(a1 - 8);
  *(void *)(a1 + 16) = &off_1001274A8;
  sub_10003ED4C((uint64_t *)(a1 + 24));
  std::out_of_range::~out_of_range((std::out_of_range *)a1);
  operator delete(v2);
}

void sub_10003ECBC(void *a1)
{
  *a1 = &off_1001274A8;
  sub_10003ED4C(a1 + 1);
  std::out_of_range::~out_of_range((std::out_of_range *)a1 - 1);
}

void sub_10003ECF4(void *a1)
{
  time_t v2 = a1 - 3;
  *a1 = &off_1001274A8;
  sub_10003ED4C(a1 + 1);
  std::out_of_range::~out_of_range((std::out_of_range *)a1 - 1);
  operator delete(v2);
}

void sub_10003ED38(std::out_of_range *a1)
{
}

uint64_t *sub_10003ED4C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  return a1;
}

uint64_t sub_10003ED8C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_100127450;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), (const std::logic_error *)(a2 + 8));
  *(void *)(a1 + std::istream::~istream(v2, v3 + 8) = &off_100127480;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = &off_1001274A8;
  *(void *)(a1 + 32) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
  }
  __int128 v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(void *)a1 = &off_1001273D8;
  *(void *)(a1 + std::istream::~istream(v2, v3 + 8) = off_100127408;
  *(void *)(a1 + 24) = off_100127430;
  return a1;
}

void sub_10003EE38(_Unwind_Exception *a1)
{
}

uint64_t sub_10003EE4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v4 + 40LL))(&v7);
    uint64_t v5 = v7;
    if (v7)
    {
      (*(void (**)(uint64_t))(*(void *)v7 + 24LL))(v7);
      if (v7) {
        (*(void (**)(uint64_t))(*(void *)v7 + 32LL))(v7);
      }
    }
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 32LL))(result);
  }
  *(void *)(a1 + std::istream::~istream(v2, v3 + 8) = v5;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 24LL))(v5);
    return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 32LL))(v5);
  }

  return result;
}

void sub_10003EF40( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1000045D0(exception_object);
}

std::logic_error *sub_10003EFA8(std::logic_error *a1)
{
  a1->__vftable = (std::logic_error_vtbl *)&off_100127480;
  return a1;
}

void sub_10003F048( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_WORD *sub_10003F06C(_WORD *result, unsigned int a2)
{
  if (!a2 || a2 >= 0xD) {
    sub_10003F098();
  }
  *uint64_t result = a2;
  return result;
}

void sub_10003F098()
{
}

void sub_10003F0CC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::out_of_range a10)
{
}

void sub_10003F0E8(const std::logic_error *a1)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
  sub_10003F13C((uint64_t)exception, a1);
}

void sub_10003F124(_Unwind_Exception *a1)
{
}

uint64_t sub_10003F13C(uint64_t a1, const std::logic_error *a2)
{
  *(void *)a1 = &off_100127450;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), a2);
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 4std::istream::~istream(v2, v3 + 8) = 0LL;
  *(_DWORD *)(a1 + 56) = -1;
  *(void *)a1 = &off_100127528;
  *(void *)(a1 + std::istream::~istream(v2, v3 + 8) = off_100127558;
  *(void *)(a1 + 24) = off_100127580;
  *(void *)(a1 + 32) = 0LL;
  return a1;
}

uint64_t sub_10003F198(uint64_t a1)
{
  *(void *)(a1 + 24) = &off_1001274A8;
  sub_10003ED4C((uint64_t *)(a1 + 32));
  std::out_of_range::~out_of_range((std::out_of_range *)(a1 + 8));
  return a1;
}

char *sub_10003F1D8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = &off_100127450;
  std::logic_error::logic_error((std::logic_error *)(v2 + 8), (const std::logic_error *)(a1 + 8));
  *((void *)v2 + 1) = &off_1001275A0;
  *((void *)v2 + 3) = &off_1001274A8;
  uint64_t v3 = *(void *)(a1 + 32);
  *((void *)v2 + 4) = v3;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
  }
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *((_DWORD *)v2 + 14) = *(_DWORD *)(a1 + 56);
  *(void *)uint64_t v2 = &off_100127528;
  *((void *)v2 + 1) = off_100127558;
  *((void *)v2 + 3) = off_100127580;
  sub_10003EE4C((uint64_t)(v2 + 24), a1 + 24);
  return v2;
}

void sub_10003F2A0(_Unwind_Exception *a1)
{
}

void sub_10003F2D4(uint64_t a1)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
  sub_10003F470((uint64_t)exception, a1);
}

void sub_10003F310(_Unwind_Exception *a1)
{
}

void sub_10003F324(uint64_t a1)
{
  *(void *)(a1 + 24) = &off_1001274A8;
  sub_10003ED4C((uint64_t *)(a1 + 32));
  std::out_of_range::~out_of_range((std::out_of_range *)(a1 + 8));
  operator delete((void *)a1);
}

void sub_10003F364(uint64_t a1)
{
  *(void *)(a1 + 16) = &off_1001274A8;
  sub_10003ED4C((uint64_t *)(a1 + 24));
  std::out_of_range::~out_of_range((std::out_of_range *)a1);
}

void sub_10003F39C(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 8);
  *(void *)(a1 + 16) = &off_1001274A8;
  sub_10003ED4C((uint64_t *)(a1 + 24));
  std::out_of_range::~out_of_range((std::out_of_range *)a1);
  operator delete(v2);
}

void sub_10003F3E0(void *a1)
{
  *a1 = &off_1001274A8;
  sub_10003ED4C(a1 + 1);
  std::out_of_range::~out_of_range((std::out_of_range *)a1 - 1);
}

void sub_10003F418(void *a1)
{
  uint64_t v2 = a1 - 3;
  *a1 = &off_1001274A8;
  sub_10003ED4C(a1 + 1);
  std::out_of_range::~out_of_range((std::out_of_range *)a1 - 1);
  operator delete(v2);
}

void sub_10003F45C(std::out_of_range *a1)
{
}

uint64_t sub_10003F470(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_100127450;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), (const std::logic_error *)(a2 + 8));
  *(void *)(a1 + std::istream::~istream(v2, v3 + 8) = &off_1001275A0;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = &off_1001274A8;
  *(void *)(a1 + 32) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
  }
  __int128 v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(void *)a1 = &off_100127528;
  *(void *)(a1 + std::istream::~istream(v2, v3 + 8) = off_100127558;
  *(void *)(a1 + 24) = off_100127580;
  return a1;
}

void sub_10003F51C(_Unwind_Exception *a1)
{
}

std::logic_error *sub_10003F530(std::logic_error *a1)
{
  a1->__vftable = (std::logic_error_vtbl *)&off_1001275A0;
  return a1;
}

void sub_10003F5D0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_WORD *sub_10003F5F4(_WORD *result, unsigned int a2)
{
  if (!a2 || a2 >= 0x20) {
    sub_10003F620();
  }
  *uint64_t result = a2;
  return result;
}

void sub_10003F620()
{
}

void sub_10003F654( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::out_of_range a10)
{
}

void sub_10003F670(const std::logic_error *a1)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
  sub_10003F6C4((uint64_t)exception, a1);
}

void sub_10003F6AC(_Unwind_Exception *a1)
{
}

uint64_t sub_10003F6C4(uint64_t a1, const std::logic_error *a2)
{
  *(void *)a1 = &off_100127450;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), a2);
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 4std::istream::~istream(v2, v3 + 8) = 0LL;
  *(_DWORD *)(a1 + 56) = -1;
  *(void *)a1 = &off_100127628;
  *(void *)(a1 + std::istream::~istream(v2, v3 + 8) = off_100127658;
  *(void *)(a1 + 24) = off_100127680;
  *(void *)(a1 + 32) = 0LL;
  return a1;
}

uint64_t sub_10003F720(uint64_t a1)
{
  *(void *)(a1 + 24) = &off_1001274A8;
  sub_10003ED4C((uint64_t *)(a1 + 32));
  std::out_of_range::~out_of_range((std::out_of_range *)(a1 + 8));
  return a1;
}

char *sub_10003F760(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = &off_100127450;
  std::logic_error::logic_error((std::logic_error *)(v2 + 8), (const std::logic_error *)(a1 + 8));
  *((void *)v2 + 1) = &off_1001276A0;
  *((void *)v2 + 3) = &off_1001274A8;
  uint64_t v3 = *(void *)(a1 + 32);
  *((void *)v2 + 4) = v3;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
  }
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *((_DWORD *)v2 + 14) = *(_DWORD *)(a1 + 56);
  *(void *)uint64_t v2 = &off_100127628;
  *((void *)v2 + 1) = off_100127658;
  *((void *)v2 + 3) = off_100127680;
  sub_10003EE4C((uint64_t)(v2 + 24), a1 + 24);
  return v2;
}

void sub_10003F828(_Unwind_Exception *a1)
{
}

void sub_10003F85C(uint64_t a1)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
  sub_10003F9F8((uint64_t)exception, a1);
}

void sub_10003F898(_Unwind_Exception *a1)
{
}

void sub_10003F8AC(uint64_t a1)
{
  *(void *)(a1 + 24) = &off_1001274A8;
  sub_10003ED4C((uint64_t *)(a1 + 32));
  std::out_of_range::~out_of_range((std::out_of_range *)(a1 + 8));
  operator delete((void *)a1);
}

void sub_10003F8EC(uint64_t a1)
{
  *(void *)(a1 + 16) = &off_1001274A8;
  sub_10003ED4C((uint64_t *)(a1 + 24));
  std::out_of_range::~out_of_range((std::out_of_range *)a1);
}

void sub_10003F924(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 8);
  *(void *)(a1 + 16) = &off_1001274A8;
  sub_10003ED4C((uint64_t *)(a1 + 24));
  std::out_of_range::~out_of_range((std::out_of_range *)a1);
  operator delete(v2);
}

void sub_10003F968(void *a1)
{
  *a1 = &off_1001274A8;
  sub_10003ED4C(a1 + 1);
  std::out_of_range::~out_of_range((std::out_of_range *)a1 - 1);
}

void sub_10003F9A0(void *a1)
{
  uint64_t v2 = a1 - 3;
  *a1 = &off_1001274A8;
  sub_10003ED4C(a1 + 1);
  std::out_of_range::~out_of_range((std::out_of_range *)a1 - 1);
  operator delete(v2);
}

void sub_10003F9E4(std::out_of_range *a1)
{
}

uint64_t sub_10003F9F8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_100127450;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), (const std::logic_error *)(a2 + 8));
  *(void *)(a1 + std::istream::~istream(v2, v3 + 8) = &off_1001276A0;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = &off_1001274A8;
  *(void *)(a1 + 32) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
  }
  __int128 v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(void *)a1 = &off_100127628;
  *(void *)(a1 + std::istream::~istream(v2, v3 + 8) = off_100127658;
  *(void *)(a1 + 24) = off_100127680;
  return a1;
}

void sub_10003FAA4(_Unwind_Exception *a1)
{
}

std::logic_error *sub_10003FAB8(std::logic_error *a1)
{
  a1->__vftable = (std::logic_error_vtbl *)&off_1001276A0;
  return a1;
}

void sub_10003FB58( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_10003FB7C(_DWORD *a1, unsigned __int16 a2, unsigned __int16 a3, unsigned __int16 a4)
{
  uint64_t result = sub_10003FCDC(a1, a2, a3, a4);
  if (a3 > 0xBu) {
    goto LABEL_14;
  }
  if (((1 << a3) & 0xA50) != 0)
  {
    unsigned __int16 v8 = 30;
    goto LABEL_4;
  }

  if (a3 == 2)
  {
    unsigned __int16 v8 = 28;
    if ((a2 & 3) == 0)
    {
      HIDWORD(v10) = -1030792151 * a2;
      LODWORD(v10) = HIDWORD(v10);
      unsigned int v9 = v10 >> 2;
      LODWORD(v10) = HIDWORD(v10);
      else {
        unsigned __int16 v8 = 28;
      }
    }
  }

  else
  {
LABEL_14:
    unsigned __int16 v8 = 31;
  }

LABEL_4:
  if (v8 < a4)
  {
    sub_100005064(&v12, "Day of month is not valid for year");
    std::logic_error::logic_error(&v13, &v12);
    v13.__vftable = (std::logic_error_vtbl *)&off_1001276A0;
    sub_10003F670(&v13);
  }

  return result;
}

void sub_10003FCA8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::out_of_range a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

_DWORD *sub_10003FCDC(_DWORD *result, __int16 a2, unsigned __int16 a3, unsigned __int16 a4)
{
  int v4 = (14 - a3) / 12;
  *uint64_t result = 365 * (unsigned __int16)(a2 - v4 + 4800)
          + a4
          + ((unsigned __int16)(a2 - v4 + 4800) >> 2)
          - (unsigned __int16)(a2 - v4 + 4800) / 0x64u
          + (unsigned __int16)(a2 - v4 + 4800) / 0x190u
  return result;
}

uint64_t sub_10003FD80(unsigned int *a1, int *a2)
{
  uint64_t result = *a1;
  if ((result + 2) >= 3)
  {
    int v3 = *a2;
  }

  else
  {
    if ((_DWORD)result == -2) {
      return result;
    }
    int v3 = *a2;
  }

  if (v3 == -2) {
    return 4294967294LL;
  }
  if (!(_DWORD)result)
  {
    if (!v3) {
      return 4294967294LL;
    }
    return result;
  }

  if ((_DWORD)result != -1)
  {
    if (v3 == -1) {
      return 0LL;
    }
    if (!v3) {
      return 0xFFFFFFFFLL;
    }
    return (result - v3);
  }

  if (v3 == -1) {
    return 4294967294LL;
  }
  return result;
}

uint64_t sub_10003FE04(uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6 = std::streambuf::basic_streambuf(a1);
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  sub_10003FE94(a1);
  return a1;
}

void sub_10003FE70(_Unwind_Exception *a1)
{
}

void sub_10003FE94(uint64_t a1)
{
  *(void *)(a1 + 8std::istream::~istream(v2, v3 + 8) = 0LL;
  uint64_t v2 = (std::string *)(a1 + 64);
  char v3 = *(_BYTE *)(a1 + 87);
  if (v3 < 0)
  {
    int v4 = *(std::string **)(a1 + 64);
    unint64_t v5 = *(void *)(a1 + 72);
  }

  else
  {
    int v4 = v2;
    unint64_t v5 = *(unsigned __int8 *)(a1 + 87);
  }

  int v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(void *)(a1 + 8std::istream::~istream(v2, v3 + 8) = (char *)v4 + v5;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = (char *)v4 + v5;
  }

  if ((v6 & 0x10) != 0)
  {
    *(void *)(a1 + 8std::istream::~istream(v2, v3 + 8) = (char *)v4 + v5;
    std::string::size_type v7 = v3 < 0 ? (*(void *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22LL;
    std::string::resize(v2, v7, 0);
    uint64_t v8 = *(char *)(a1 + 87) < 0 ? *(void *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(void *)(a1 + 40) = v4;
    *(void *)(a1 + 4std::istream::~istream(v2, v3 + 8) = v4;
    *(void *)(a1 + 56) = (char *)v4 + v8;
    if ((*(_BYTE *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        uint64_t v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        unint64_t v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        int v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        unint64_t v5 = v5 - v10 - 0x7FFFFFFF;
        *(void *)(a1 + 4std::istream::~istream(v2, v3 + 8) = v4;
      }

      if (v5) {
        *(void *)(a1 + 4std::istream::~istream(v2, v3 + 8) = (char *)v4 + v5;
      }
    }
  }

unint64_t sub_10003FFA4()
{
  v9.tm_zone = (char *)0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v0 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v0 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v9.tm_mouint64_t n = v0;
  *(_OWORD *)&v9.tm_isdst = v0;
  *(_OWORD *)&v9.tm_sec = v0;
  uint64_t v1 = (unsigned __int16 *)sub_10004006C(&v9);
  unsigned __int16 v2 = v1[10] + 1900;
  unsigned __int16 v8 = 1400;
  sub_10003E940(&v8, v2);
  unsigned __int16 v3 = v1[8] + 1;
  unsigned __int16 v7 = 1;
  sub_10003F06C(&v7, v3);
  unsigned int v4 = v1[6];
  unsigned __int16 v6 = 1;
  sub_10003F5F4(&v6, v4);
  return v8 | ((unint64_t)v7 << 16) | ((unint64_t)v6 << 32);
}

tm *sub_10004006C(tm *a1)
{
  time_t v3 = 0xAAAAAAAAAAAAAAAALL;
  time(&v3);
  uint64_t result = gmtime_r(&v3, a1);
  if (!result)
  {
    std::runtime_error::runtime_error(&v4, "could not convert calendar time to UTC time");
    sub_100040114(&v4);
  }

  return result;
}

void sub_1000400F8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10)
{
}

void sub_100040114(const std::runtime_error *a1)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
  sub_100040164((uint64_t)exception, a1);
}

void sub_100040150(_Unwind_Exception *a1)
{
}

uint64_t sub_100040164(uint64_t a1, const std::runtime_error *a2)
{
  *(void *)a1 = &off_100127450;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), a2);
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 4std::istream::~istream(v2, v3 + 8) = 0LL;
  *(_DWORD *)(a1 + 56) = -1;
  *(void *)a1 = &off_100127710;
  *(void *)(a1 + std::istream::~istream(v2, v3 + 8) = off_100127740;
  *(void *)(a1 + 24) = off_100127768;
  *(void *)(a1 + 32) = 0LL;
  return a1;
}

uint64_t sub_1000401C0(uint64_t a1)
{
  *(void *)(a1 + 24) = &off_1001274A8;
  sub_10003ED4C((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

char *sub_100040200(uint64_t a1)
{
  unsigned __int16 v2 = (char *)operator new(0x40uLL);
  *(void *)unsigned __int16 v2 = &off_100127450;
  std::runtime_error::runtime_error((std::runtime_error *)(v2 + 8), (const std::runtime_error *)(a1 + 8));
  *((void *)v2 + 3) = &off_1001274A8;
  uint64_t v3 = *(void *)(a1 + 32);
  *((void *)v2 + 4) = v3;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
  }
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *((_DWORD *)v2 + 14) = *(_DWORD *)(a1 + 56);
  *(void *)unsigned __int16 v2 = &off_100127710;
  *((void *)v2 + 1) = off_100127740;
  *((void *)v2 + 3) = off_100127768;
  sub_10003EE4C((uint64_t)(v2 + 24), a1 + 24);
  return v2;
}

void sub_1000402B8(_Unwind_Exception *a1)
{
}

void sub_1000402EC(uint64_t a1)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
  sub_100040474((uint64_t)exception, a1);
}

void sub_100040328(_Unwind_Exception *a1)
{
}

void sub_10004033C(uint64_t a1)
{
  *(void *)(a1 + 24) = &off_1001274A8;
  sub_10003ED4C((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  operator delete((void *)a1);
}

void sub_10004037C(uint64_t a1)
{
  *(void *)(a1 + 16) = &off_1001274A8;
  sub_10003ED4C((uint64_t *)(a1 + 24));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

void sub_1000403B4(uint64_t a1)
{
  unsigned __int16 v2 = (void *)(a1 - 8);
  *(void *)(a1 + 16) = &off_1001274A8;
  sub_10003ED4C((uint64_t *)(a1 + 24));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
  operator delete(v2);
}

void sub_1000403F8(void *a1)
{
  *a1 = &off_1001274A8;
  sub_10003ED4C(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)a1 - 1);
}

void sub_100040430(void *a1)
{
  unsigned __int16 v2 = a1 - 3;
  *a1 = &off_1001274A8;
  sub_10003ED4C(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)a1 - 1);
  operator delete(v2);
}

uint64_t sub_100040474(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_100127450;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = &off_1001274A8;
  *(void *)(a1 + 32) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
  }
  __int128 v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(void *)a1 = &off_100127710;
  *(void *)(a1 + std::istream::~istream(v2, v3 + 8) = off_100127740;
  *(void *)(a1 + 24) = off_100127768;
  return a1;
}

void sub_100040510(_Unwind_Exception *a1)
{
}

_DWORD *sub_100040524(_DWORD *result, _WORD *a2)
{
  int v2 = (unsigned __int16)a2[1];
  int v3 = (14 - v2) / 12;
  *uint64_t result = (unsigned __int16)a2[2]
          + 365 * (unsigned __int16)(*a2 - v3 + 4800)
          + ((unsigned __int16)(*a2 - v3 + 4800) >> 2)
          - (unsigned __int16)(*a2 - v3 + 4800) / 0x64u
          + (unsigned __int16)(*a2 - v3 + 4800) / 0x190u
          - 32045
          + ((858993460 * (unint64_t)(153 * (unsigned __int16)(v2 + 12 * v3 - 3) + 2)) >> 32);
  return result;
}

uint64_t sub_1000405CC(unsigned __int8 *a1)
{
  unint64_t v48 = "function";
  unint64_t v47 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v45 = v2;
  __int128 v46 = v2;
  sub_100008780((uint64_t)a1, &v48, (uint64_t)&v45);
  uint64_t v40 = a1;
  uint64_t v41 = 0LL;
  uint64_t v42 = 0LL;
  uint64_t v43 = 0LL;
  unint64_t v44 = 0x8000000000000000LL;
  sub_100008AC8(&v40);
  if (sub_1000087E8((unsigned __int8 **)&v45, &v40))
  {
    uint64_t v3 = sub_10009AE9C();
    if (!v3) {
      goto LABEL_7;
    }
  }

  else
  {
    uint64_t v3 = (uint64_t)sub_100008924((unsigned __int8 **)&v45);
  }

  if (*(_BYTE *)v3 == 3)
  {
    uint64_t v4 = *(unsigned int **)(v3 + 8);
    goto LABEL_8;
  }

LABEL_7:
  uint64_t v4 = 0LL;
LABEL_8:
  unint64_t v48 = "type";
  unint64_t v47 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v45 = v5;
  __int128 v46 = v5;
  sub_100008780((uint64_t)a1, &v48, (uint64_t)&v45);
  uint64_t v40 = a1;
  uint64_t v41 = 0LL;
  uint64_t v42 = 0LL;
  uint64_t v43 = 0LL;
  unint64_t v44 = 0x8000000000000000LL;
  sub_100008AC8(&v40);
  if (sub_1000087E8((unsigned __int8 **)&v45, &v40))
  {
    uint64_t v6 = sub_10009AE9C();
    if (!v6) {
      goto LABEL_15;
    }
  }

  else
  {
    uint64_t v6 = (uint64_t)sub_100008924((unsigned __int8 **)&v45);
  }

  if (*(_BYTE *)v6 == 3)
  {
    unsigned __int16 v7 = *(uint64_t ***)(v6 + 8);
    if (!v4) {
      return 0LL;
    }
    goto LABEL_16;
  }

  unint64_t v10 = @"??? ???";
LABEL_8:
  if (*((char *)a2 + 23) < 0)
  {
    if (!a2[1])
    {
LABEL_15:
      int v8 = @"???";
      goto LABEL_17;
    }

    a2 = (uint64_t *)*a2;
  }

  else if (!*((_BYTE *)a2 + 23))
  {
    goto LABEL_15;
  }

  uint64_t v6 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", a2));
  if (-[__CFString containsString:](v6, "containsString:", @"-"))
  {
    unsigned __int16 v7 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString componentsSeparatedByString:](v6, "componentsSeparatedByString:", @"-"));
    int v8 = (__CFString *)objc_claimAutoreleasedReturnValue([v7 firstObject]);
  }

  else
  {
    int v8 = v6;
  }

  __int128 v5 = 0LL;
LABEL_8:
  uint64_t v6 = *(void *)(v1 + 32);
  unsigned __int8 v16 = (unsigned __int8 *)OSAStateMonitorEventCALogWrittenStartTimestampKey;
  sub_100043840((const std::chrono::system_clock::time_point *)(v1 + 24), &__p);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  int v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", p_p));
  *(void *)&unsigned int v21 = v8;
  uint64_t v17 = OSAStateMonitorEventCALogWrittenTotalHeartbeatCountKey;
  tm v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v5));
  *((void *)&v21 + 1) = v9;
  uint64_t v18 = OSAStateMonitorEventCALogWrittenEndTimestampKey;
  unint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSince1970:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSince1970:",  (double)(v6 / 1000000)));
  *(void *)&int v22 = v10;
  int v19 = OSAStateMonitorEventCALogWrittenLogPathKey;
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v1));
  *((void *)&v22 + 1) = v11;
  std::string v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v21,  &v16,  4LL));
  +[OSAStateMonitor recordEvent:with:]( &OBJC_CLASS___OSAStateMonitor,  "recordEvent:with:",  OSAStateMonitorEventCALogWritten,  v12);

  return sub_100054D7C(&v14);
}

    uint64_t v4 = 0LL;
    goto LABEL_8;
  }

  return result;
}

  __int128 v5 = 1LL;
LABEL_18:
  sub_100041140((uint64_t)&v11);
  return v5;
}

  v23[0] = "field";
  int v29 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&unint64_t v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  unsigned int v27 = v10;
  int v28 = v10;
  sub_100008780(a2, v23, (uint64_t)&v27);
  BOOL v24 = (unint64_t)a2;
  unsigned int v25 = 0uLL;
  unsigned int v26 = 0x8000000000000000LL;
  sub_100008AC8((unsigned __int8 **)&v24);
  if (sub_1000087E8((unsigned __int8 **)&v27, (unsigned __int8 **)&v24))
  {
    uint64_t v11 = sub_10009AE9C();
    if (!v11)
    {
LABEL_15:
      v23[0] = "name";
      int v29 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&unsigned __int8 v16 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
      unsigned int v27 = v16;
      int v28 = v16;
      sub_100008780(a2, v23, (uint64_t)&v27);
      BOOL v24 = (unint64_t)a2;
      unsigned int v25 = 0uLL;
      unsigned int v26 = 0x8000000000000000LL;
      sub_100008AC8((unsigned __int8 **)&v24);
      if (sub_1000087E8((unsigned __int8 **)&v27, (unsigned __int8 **)&v24))
      {
        uint64_t v17 = sub_10009AE9C();
        if (!v17) {
          goto LABEL_22;
        }
      }

      else
      {
        uint64_t v17 = (uint64_t)sub_100008924((unsigned __int8 **)&v27);
      }

      if (*(_BYTE *)v17 != 3) {
        goto LABEL_22;
      }
      uint64_t v18 = *(const void ***)(v17 + 8);
      if (!v18) {
        goto LABEL_22;
      }
      int v29 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&int v19 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
      unsigned int v27 = v19;
      int v28 = v19;
      sub_10006505C(*(void *)a3 + 40LL, v18, (uint64_t)&v27);
      uint64_t v20 = *(void *)a3 + 40LL;
      *(void *)&unsigned int v21 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
      BOOL v24 = v21;
      unsigned int v25 = v21;
      unsigned int v26 = 0xAAAAAAAAAAAAAAAALL;
      sub_1000211B0(&v24, v20);
      sub_1000211FC((unsigned __int8 **)&v24);
      goto LABEL_23;
    }
  }

  else
  {
    uint64_t v11 = (uint64_t)sub_100008924((unsigned __int8 **)&v27);
  }

  if (*(_BYTE *)v11 != 3) {
    goto LABEL_15;
  }
  std::string v12 = *(const void ***)(v11 + 8);
  if (!v12) {
    goto LABEL_15;
  }
  int v29 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&std::logic_error v13 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
  unsigned int v27 = v13;
  int v28 = v13;
  sub_10006505C(*(void *)a3 + 40LL, v12, (uint64_t)&v27);
  std::locale v14 = *(void *)a3 + 40LL;
  *(void *)&__int128 v15 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
  BOOL v24 = v15;
  unsigned int v25 = v15;
  unsigned int v26 = 0xAAAAAAAAAAAAAAAALL;
  sub_1000211B0(&v24, v14);
  sub_1000211FC((unsigned __int8 **)&v24);
  if (sub_10001855C((unsigned __int8 **)&v27, (unsigned __int8 **)&v24))
  {
LABEL_22:
    *(_BYTE *)a4 = 0;
    *(void *)(a4 + std::istream::~istream(v2, v3 + 8) = 0LL;
    sub_1000041AC(a4);
    sub_1000041AC(a4);
    return;
  }

LABEL_15:
  unsigned __int16 v7 = 0LL;
  if (!v4) {
    return 0LL;
  }
LABEL_16:
  int v8 = *((unsigned __int8 *)v4 + 23);
  if ((*((char *)v4 + 23) & 0x80000000) == 0)
  {
    if (v8 != 3)
    {
      if (v8 != 4)
      {
        if (v8 == 5)
        {
          if (*v4 != 1853189987 || *((_BYTE *)v4 + 4) != 116)
          {
            if (*v4 != 1936877926 || *((_BYTE *)v4 + 4) != 116) {
              return 0LL;
            }
            return 8LL;
          }

          return 1LL;
        }

        return 0LL;
      }

      goto LABEL_95;
    }

    if (*(_WORD *)v4 != 30067 || *((_BYTE *)v4 + 2) != 109)
    {
      if (*(_WORD *)v4 != 26989 || *((_BYTE *)v4 + 2) != 110)
      {
LABEL_56:
        if (*(_WORD *)v4 != 24941 || *((_BYTE *)v4 + 2) != 120) {
          return 0LL;
        }
        goto LABEL_103;
      }

    *(void *)(a2 + 32) = v9;
    goto LABEL_16;
  }

  std::locale v14 = 0xAAAAAAAAAAAAAAAALL;
  __int128 v15 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  __int128 v5 = (char *)(*(void *)__p[0] + 40LL);
  v12[0] = 0;
  std::logic_error v13 = 0LL;
  sub_1000041AC((uint64_t)v12);
  sub_1000041AC((uint64_t)v12);
  sub_1000CE3E8(v5, (const void **)&__p[1], v12, (uint64_t)&v14);
  sub_1000041AC((uint64_t)v12);
  sub_10000425C(&v13, v12[0]);
  uint64_t v6 = *(void *)(a2 + 32);
  if (v6 >= *(void *)(a2 + 40))
  {
    unsigned __int16 v7 = sub_1000587D0((uint64_t *)(a2 + 24), (uint64_t)&v14);
  }

  else
  {
    *(_BYTE *)uint64_t v6 = v14;
    *(void *)(v6 + std::istream::~istream(v2, v3 + 8) = v15;
    sub_1000041AC((uint64_t)&v14);
    LOBYTE(v14) = 0;
    __int128 v15 = 0LL;
    sub_1000041AC(v6);
    unsigned __int16 v7 = v6 + 16;
  }

  *(void *)(a2 + 32) = v7;
  sub_1000041AC((uint64_t)&v14);
  sub_10000425C(&v15, v14);
LABEL_16:
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[1]);
  }
}

    uint64_t v4 = *a1;
    __int128 v5 = *(DIR **)&(*a1)->d_name[27];
    if (!v5)
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)*a1;
      *a1 = 0LL;
      p_p = (unsigned int **)&__p;
LABEL_42:
      sub_1000D41BC(p_p);
      goto LABEL_46;
    }

    if ((__src.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_src = &__src;
    }
    else {
      p_src = (std::string *)__src.__r_.__value_.__r.__words[0];
    }
    if (p_src->__r_.__value_.__s.__data_[0] != 46) {
      break;
    }
    std::string v12 = (__src.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__src : (std::string *)__src.__r_.__value_.__r.__words[0];
    std::logic_error v13 = v12->__r_.__value_.__s.__data_[1];
    if (v13)
    {
      if (v13 != 46) {
        break;
      }
      std::locale v14 = (__src.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__src : (std::string *)__src.__r_.__value_.__r.__words[0];
      if (v14->__r_.__value_.__s.__data_[2]) {
        break;
      }
    }
  }

  else {
    std::string __p = __src;
  }
  sub_1000D5870((std::string *)&v4->d_seekoff);
  sub_1000D532C((std::string *)&v4->d_seekoff, &__p);
  *(void *)&uint64_t v17 = 0xFFFF00000000LL;
  *((void *)&v17 + 1) = 0xFFFF00000000LL;
  *(_OWORD *)&v4->d_name[11] = v17;
LABEL_46:
}

LABEL_70:
      int v23 = *((char *)v7 + 23);
      if (v23 < 0)
      {
        unsigned __int16 v7 = (uint64_t **)*v7;
      }

      else if (v23 != 5)
      {
        return 3LL;
      }

      unsigned int v27 = bswap32(*(_DWORD *)v7);
      if (v27 == 1718382433)
      {
        int v28 = *((unsigned __int8 *)v7 + 4) - 116;
      }

      else if (v27 < 0x666C6F61)
      {
        int v28 = -1;
      }

      else
      {
        int v28 = 1;
      }

      BOOL v24 = v28 == 0;
      unsigned int v25 = 3;
      unsigned int v26 = 6;
      goto LABEL_119;
    }

LABEL_61:
    int v19 = *((char *)v7 + 23);
    if (v19 < 0)
    {
      unsigned __int16 v7 = (uint64_t **)*v7;
    }

    else if (v19 != 5)
    {
      return 2LL;
    }

    unsigned int v21 = bswap32(*(_DWORD *)v7);
    if (v21 == 1718382433)
    {
      int v22 = *((unsigned __int8 *)v7 + 4) - 116;
    }

    else if (v21 < 0x666C6F61)
    {
      int v22 = -1;
    }

    else
    {
      int v22 = 1;
    }

    BOOL v24 = v22 == 0;
    unsigned int v25 = 2;
    unsigned int v26 = 5;
    goto LABEL_119;
  }

  uint64_t v11 = *((void *)v4 + 1);
  if (v11 == 3)
  {
    if (**(_WORD **)v4 == 30067 && *(_BYTE *)(*(void *)v4 + 2LL) == 109) {
      goto LABEL_61;
    }
    uint64_t v11 = *((void *)v4 + 1);
    if (v11 == 3)
    {
      std::locale v14 = *(unsigned __int16 **)v4;
      if (**(_WORD **)v4 == 26989 && *(_BYTE *)(*(void *)v4 + 2LL) == 110) {
        goto LABEL_70;
      }
      if ((v8 & 0x80) == 0)
      {
        if (v8 != 3) {
          return 0LL;
        }
        goto LABEL_56;
      }

      int v29 = *v14;
      int v30 = *((unsigned __int8 *)v14 + 2);
      if (v29 == 24941 && v30 == 120)
      {
LABEL_103:
        int v37 = *((char *)v7 + 23);
        if (v37 < 0)
        {
          unsigned __int16 v7 = (uint64_t **)*v7;
        }

        else if (v37 != 5)
        {
          return 4LL;
        }

        unsigned int v38 = bswap32(*(_DWORD *)v7);
        if (v38 == 1718382433)
        {
          int v39 = *((unsigned __int8 *)v7 + 4) - 116;
        }

        else if (v38 < 0x666C6F61)
        {
          int v39 = -1;
        }

        else
        {
          int v39 = 1;
        }

        BOOL v24 = v39 == 0;
        unsigned int v25 = 4;
        unsigned int v26 = 7;
LABEL_119:
        if (v24) {
          return v26;
        }
        else {
          return v25;
        }
      }

      uint64_t v11 = *((void *)v4 + 1);
    }
  }

  else if (v11 == 5 && **(_DWORD **)v4 == 1853189987 && *(_BYTE *)(*(void *)v4 + 4LL) == 116)
  {
    return 1LL;
  }

  if (v11 == 5)
  {
    if (**(_DWORD **)v4 == 1936877926 && *(_BYTE *)(*(void *)v4 + 4LL) == 116) {
      return 8LL;
    }
    uint64_t v11 = *((void *)v4 + 1);
  }

  if (v11 != 4) {
    return 0LL;
  }
  uint64_t v4 = *(unsigned int **)v4;
LABEL_95:
  unsigned int v33 = bswap32(*v4);
  BOOL v34 = v33 >= 0x6C617374;
  int v35 = v33 > 0x6C617374;
  int v36 = !v34;
  if (v35 == v36) {
    return 9LL;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100040A68(uint64_t a1)
{
  *(void *)a1 = &off_100127788;
  unsigned int v2 = 5489;
  *(_DWORD *)(a1 + std::istream::~istream(v2, v3 + 8) = 5489;
  uint64_t v3 = (void *)(a1 + 8);
  uint64_t v4 = 1LL;
  for (uint64_t i = 3LL; i != 626; ++i)
  {
    int v6 = 1812433253 * (v2 ^ (v2 >> 30));
    unsigned int v2 = v6 + v4;
    *(_DWORD *)(a1 + 4 * i) = i + v6 - 2;
    ++v4;
  }

  *(void *)(a1 + 2504) = 0LL;
  v10.__padding_ = -1431655766;
  sub_100040B98(&v10);
  std::random_device::result_type v7 = std::random_device::operator()(&v10);
  LODWORD(__src[0]) = v7;
  for (uint64_t j = 1LL; j != 624; ++j)
  {
    std::random_device::result_type v7 = j + 1812433253 * (v7 ^ (v7 >> 30));
    *((_DWORD *)__src + j) = v7;
  }

  __src[312] = 0LL;
  memcpy(v3, __src, 0x9C8uLL);
  std::random_device::~random_device(&v10);
  return a1;
}

void sub_100040B7C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, std::random_device a11, std::random_device a12)
{
}

std::random_device *sub_100040B98(std::random_device *a1)
{
  return a1;
}

void sub_100040C18( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100040C40(uint64_t a1, int a2, int a3)
{
  v4[0] = a2;
  v4[1] = a3;
  return sub_100040CA0((uint64_t)v4, a1 + 8, v4);
}

uint64_t sub_100040CA0(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result = a3[1];
  int v4 = result - *a3;
  if ((_DWORD)result != *a3)
  {
    unsigned int v6 = v4 + 1;
    if (v4 == -1)
    {
      return sub_100040D50(a2);
    }

    else
    {
      uint64_t v8 = __clz(v6);
      uint64_t v9 = 31LL;
      if (((v6 << v8) & 0x7FFFFFFF) != 0) {
        uint64_t v9 = 32LL;
      }
      unint64_t v10 = v9 - v8;
      unint64_t v11 = v10 >> 5;
      if ((v10 & 0x1F) != 0) {
        ++v11;
      }
      if (v11 <= v10) {
        unsigned int v12 = 0xFFFFFFFF >> -(v10 / v11);
      }
      else {
        unsigned int v12 = 0;
      }
      do
        unsigned int v13 = sub_100040D50(a2) & v12;
      while (v13 >= v6);
      return *a3 + v13;
    }
  }

  return result;
}

uint64_t sub_100040D50(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 2496);
  unint64_t v2 = (v1 + 1) % 0x270uLL;
  unsigned int v3 = *(_DWORD *)(a1 + 4 * ((v1 + 397) % 0x270uLL)) ^ ((*(_DWORD *)(a1 + 4 * v2) & 0x7FFFFFFE | *(_DWORD *)(a1 + 4 * v1) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a1 + 4 * v2) << 31) >> 31) & 0x9908B0DF;
  *(_DWORD *)(a1 + 4 * v1) = v3;
  *(void *)(a1 + 2496) = v2;
  LODWORD(v1) = ((v3 ^ (v3 >> 11)) << 7) & 0x9D2C5680 ^ v3 ^ (v3 >> 11);
  return ((_DWORD)v1 << 15) & 0xEFC60000 ^ v1 ^ ((((_DWORD)v1 << 15) & 0xEFC60000 ^ v1) >> 18);
}

uint64_t sub_100040DF0(int a1, sqlite3 *a2)
{
  if (a2) {
    return sqlite3_close(a2);
  }
  return result;
}

uint64_t sub_100040E00(int a1, sqlite3_stmt *pStmt)
{
  if (pStmt) {
    return sqlite3_finalize(pStmt);
  }
  return result;
}

void *sub_100040E10(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

sqlite3_stmt **sub_100040E1C(sqlite3_stmt **a1)
{
  return a1;
}

BOOL sub_100040E48(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 9)) {
    return 0LL;
  }
  if (!sqlite3_exec(*(sqlite3 **)a1, "BEGIN;", 0LL, 0LL, 0LL))
  {
    BOOL result = 1LL;
    *(_BYTE *)(a1 + 9) = 1;
    return result;
  }

  unsigned int v3 = *(sqlite3 **)a1;
  int v4 = (os_log_s *)qword_100131930;
  BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
  if (v3)
  {
    if (result)
    {
      unsigned int v12 = sqlite3_errmsg(v3);
      sub_1000D806C((uint64_t)v12, (uint64_t)&v13, v4);
      return 0LL;
    }
  }

  else if (result)
  {
    sub_1000D8010(v4, v5, v6, v7, v8, v9, v10, v11);
    return 0LL;
  }

  return result;
}

void sub_100040F20(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

uint64_t sub_100040F2C(uint64_t a1, void *a2)
{
  *(void *)a1 = *a2;
  *(_WORD *)(a1 + std::istream::~istream(v2, v3 + 8) = 0;
  if (*a2) {
    sub_100040E48(a1);
  }
  return a1;
}

BOOL sub_100040F68(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 9) || *(_BYTE *)(a1 + 8)) {
    return 0LL;
  }
  if (!sqlite3_exec(*(sqlite3 **)a1, "ROLLBACK;", 0LL, 0LL, 0LL))
  {
    BOOL result = 1LL;
    *(_BYTE *)(a1 + std::istream::~istream(v2, v3 + 8) = 1;
    return result;
  }

  unsigned int v3 = *(sqlite3 **)a1;
  int v4 = (os_log_s *)qword_100131930;
  BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
  if (v3)
  {
    if (result)
    {
      unsigned int v12 = sqlite3_errmsg(v3);
      sub_1000D8100((uint64_t)v12, (uint64_t)&v13, v4);
      return 0LL;
    }
  }

  else if (result)
  {
    sub_1000D80A4(v4, v5, v6, v7, v8, v9, v10, v11);
    return 0LL;
  }

  return result;
}

void sub_100041048(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

BOOL sub_100041054(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 9) || *(_BYTE *)(a1 + 8)) {
    return 0LL;
  }
  if (!sqlite3_exec(*(sqlite3 **)a1, "END;", 0LL, 0LL, 0LL))
  {
    BOOL result = 1LL;
    *(_BYTE *)(a1 + std::istream::~istream(v2, v3 + 8) = 1;
    return result;
  }

  unsigned int v3 = *(sqlite3 **)a1;
  int v4 = (os_log_s *)qword_100131930;
  BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
  if (v3)
  {
    if (result)
    {
      unsigned int v12 = sqlite3_errmsg(v3);
      sub_1000D8194((uint64_t)v12, (uint64_t)&v13, v4);
      return 0LL;
    }
  }

  else if (result)
  {
    sub_1000D8138(v4, v5, v6, v7, v8, v9, v10, v11);
    return 0LL;
  }

  return result;
}

void sub_100041134(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

uint64_t sub_100041140(uint64_t a1)
{
  return a1;
}

void sub_100041164(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
}

  ;
}

uint64_t sub_10004117C(uint64_t a1)
{
  return a1;
}

__int128 *sub_1000411AC()
{
  if (qword_100131708 != -1) {
    dispatch_once(&qword_100131708, &stru_1001277C8);
  }
  return &xmmword_1001316F0;
}

void *sub_1000411EC@<X0>(void *a1@<X8>)
{
  return sub_100005064(a1, "/AppleInternal/Library/CoreAnalytics/defaultConfig.json");
}

void sub_1000411FC(std::string *a1@<X8>)
{
  if (qword_100131708 != -1) {
    dispatch_once(&qword_100131708, &stru_1001277C8);
  }
  sub_100005064(&__p, "devTaskedConfig.json");
  memset(a1, 170, sizeof(std::string));
  if (byte_100131707 < 0)
  {
    sub_10000B8BC(a1, (void *)xmmword_1001316F0, *((unint64_t *)&xmmword_1001316F0 + 1));
  }

  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = xmmword_1001316F0;
    a1->__r_.__value_.__l.__cap_ = unk_100131700;
  }

  sub_1000D51D8(a1, &__p);
}

void sub_1000412E8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100041324(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (!v1) {
    sub_1000129CC();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 48LL))(v1);
}

void sub_100041348(std::string *a1@<X8>)
{
  if (qword_100131708 != -1) {
    dispatch_once(&qword_100131708, &stru_1001277C8);
  }
  sub_100005064(&__p, "events.allowlist");
  memset(a1, 170, sizeof(std::string));
  if (byte_1001316F0[23] < 0)
  {
    sub_10000B8BC(a1, *(void **)byte_1001316F0, *(unint64_t *)&byte_1001316F0[8]);
  }

  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)byte_1001316F0;
    a1->__r_.__value_.__l.__cap_ = *(void *)&byte_1001316F0[16];
  }

  sub_1000D51D8(a1, &__p);
}

void sub_100041434( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100041470(std::string *a1@<X8>)
{
  if (qword_100131708 != -1) {
    dispatch_once(&qword_100131708, &stru_1001277C8);
  }
  sub_100005064(&__p, "events.whitelist");
  memset(a1, 170, sizeof(std::string));
  if (byte_1001316F0[23] < 0)
  {
    sub_10000B8BC(a1, *(void **)byte_1001316F0, *(unint64_t *)&byte_1001316F0[8]);
  }

  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)byte_1001316F0;
    a1->__r_.__value_.__l.__cap_ = *(void *)&byte_1001316F0[16];
  }

  sub_1000D51D8(a1, &__p);
}

void sub_10004155C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100041598(std::string *a1@<X8>)
{
  if (qword_100131708 != -1) {
    dispatch_once(&qword_100131708, &stru_1001277C8);
  }
  sub_100005064(&__p, "currentConfiguration.json");
  memset(a1, 170, sizeof(std::string));
  if (byte_1001316F0[23] < 0)
  {
    sub_10000B8BC(a1, *(void **)byte_1001316F0, *(unint64_t *)&byte_1001316F0[8]);
  }

  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)byte_1001316F0;
    a1->__r_.__value_.__l.__cap_ = *(void *)&byte_1001316F0[16];
  }

  sub_1000D51D8(a1, &__p);
}

void sub_100041684( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000416C0(std::string *a1@<X8>)
{
  if (qword_100131708 != -1) {
    dispatch_once(&qword_100131708, &stru_1001277C8);
  }
  sub_100005064(&__p, "journals");
  memset(a1, 170, sizeof(std::string));
  if (byte_1001316F0[23] < 0)
  {
    sub_10000B8BC(a1, *(void **)byte_1001316F0, *(unint64_t *)&byte_1001316F0[8]);
  }

  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)byte_1001316F0;
    a1->__r_.__value_.__l.__cap_ = *(void *)&byte_1001316F0[16];
  }

  sub_1000D51D8(a1, &__p);
}

void sub_1000417AC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000417E8(std::string *a1@<X8>)
{
  if (qword_100131708 != -1) {
    dispatch_once(&qword_100131708, &stru_1001277C8);
  }
  sub_100005064(&__p, "state");
  memset(a1, 170, sizeof(std::string));
  if (byte_1001316F0[23] < 0)
  {
    sub_10000B8BC(a1, *(void **)byte_1001316F0, *(unint64_t *)&byte_1001316F0[8]);
  }

  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)byte_1001316F0;
    a1->__r_.__value_.__l.__cap_ = *(void *)&byte_1001316F0[16];
  }

  sub_1000D51D8(a1, &__p);
}

void sub_1000418D4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100041910(std::string *a1@<X8>)
{
  if (qword_100131708 != -1) {
    dispatch_once(&qword_100131708, &stru_1001277C8);
  }
  sub_100005064(&__p, "identity/budget_info.json");
  memset(a1, 170, sizeof(std::string));
  if (byte_1001316F0[23] < 0)
  {
    sub_10000B8BC(a1, *(void **)byte_1001316F0, *(unint64_t *)&byte_1001316F0[8]);
  }

  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)byte_1001316F0;
    a1->__r_.__value_.__l.__cap_ = *(void *)&byte_1001316F0[16];
  }

  sub_1000D51D8(a1, &__p);
}

void sub_1000419FC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100041A38(std::string *a1@<X8>)
{
  if (qword_100131708 != -1) {
    dispatch_once(&qword_100131708, &stru_1001277C8);
  }
  sub_100005064(&__p, "identity/budget_info.stage");
  memset(a1, 170, sizeof(std::string));
  if (byte_1001316F0[23] < 0)
  {
    sub_10000B8BC(a1, *(void **)byte_1001316F0, *(unint64_t *)&byte_1001316F0[8]);
  }

  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)byte_1001316F0;
    a1->__r_.__value_.__l.__cap_ = *(void *)&byte_1001316F0[16];
  }

  sub_1000D51D8(a1, &__p);
}

void sub_100041B24( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100041B60(char **a1@<X8>)
{
  if (qword_100131708 != -1) {
    dispatch_once(&qword_100131708, &stru_1001277C8);
  }
  sub_100005064(&v6, "aggregates");
  memset(&__dst, 170, sizeof(__dst));
  if (byte_1001316F0[23] < 0) {
    sub_10000B8BC(&__dst, *(void **)byte_1001316F0, *(unint64_t *)&byte_1001316F0[8]);
  }
  else {
    std::string __dst = *(std::string *)byte_1001316F0;
  }
  sub_1000D51D8(&__dst, &v6);
  sub_100005064(&v5, "reservoirs");
  memset(&v10, 170, sizeof(v10));
  if (byte_1001316F0[23] < 0) {
    sub_10000B8BC(&v10, *(void **)byte_1001316F0, *(unint64_t *)&byte_1001316F0[8]);
  }
  else {
    std::string v10 = *(std::string *)byte_1001316F0;
  }
  sub_1000D51D8(&v10, &v5);
  sub_100005064(&__p, "identity");
  memset(&v11, 170, sizeof(v11));
  if (byte_1001316F0[23] < 0) {
    sub_10000B8BC(&v11, *(void **)byte_1001316F0, *(unint64_t *)&byte_1001316F0[8]);
  }
  else {
    std::string v11 = *(std::string *)byte_1001316F0;
  }
  sub_1000D51D8(&v11, &__p);
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  uint64_t v7 = a1;
  unint64_t v8 = 0xAAAAAAAAAAAAAA00LL;
  unint64_t v2 = (char *)operator new(0x48uLL);
  *a1 = v2;
  a1[1] = v2;
  a1[2] = v2 + 72;
  uint64_t v3 = 0LL;
  a1[1] = sub_100043C68((uint64_t)(a1 + 2), (__int128 *)&__dst, &v12, v2);
  do
  {
    if (SHIBYTE(v11.__r_.__value_.__r.__words[v3 + 2]) < 0) {
      operator delete(*(void **)((char *)&v11.__r_.__value_.__l.__data_ + v3 * 8));
    }
    v3 -= 3LL;
  }

  while (v3 != -9);
}

void sub_100041D88( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, char a28, uint64_t a29, void *a30, uint64_t a31, int a32, __int16 a33, char a34, char a35, void *a36, uint64_t a37, int a38, __int16 a39, char a40, char a41, void *a42, uint64_t a43, int a44, __int16 a45, char a46, char a47)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  for (; v47 != &a30; v47 -= 3)
  {
  }

  _Unwind_Resume(exception_object);
}

void sub_100041EB8()
{
}

void sub_100041EC0(char **a1@<X8>)
{
  if (qword_100131708 != -1) {
    dispatch_once(&qword_100131708, &stru_1001277C8);
  }
  sub_100005064(&v29, "aggregates");
  memset(&__dst, 170, sizeof(__dst));
  if (byte_1001316F0[23] < 0) {
    sub_10000B8BC(&__dst, *(void **)byte_1001316F0, *(unint64_t *)&byte_1001316F0[8]);
  }
  else {
    std::string __dst = *(std::string *)byte_1001316F0;
  }
  sub_1000D51D8(&__dst, &v29);
  sub_100005064(&v28, "Daily");
  sub_1000D51D8(&__dst, &v28);
  v33[0] = __dst;
  memset(&__dst, 0, sizeof(__dst));
  sub_100005064(&v26, "aggregates");
  memset(&v27, 170, sizeof(v27));
  if (byte_1001316F0[23] < 0) {
    sub_10000B8BC(&v27, *(void **)byte_1001316F0, *(unint64_t *)&byte_1001316F0[8]);
  }
  else {
    std::string v27 = *(std::string *)byte_1001316F0;
  }
  sub_1000D51D8(&v27, &v26);
  sub_100005064(&v25, "90Day");
  sub_1000D51D8(&v27, &v25);
  v33[1] = v27;
  memset(&v27, 0, sizeof(v27));
  sub_100005064(&v23, "aggregates");
  memset(&v24, 170, sizeof(v24));
  if (byte_1001316F0[23] < 0) {
    sub_10000B8BC(&v24, *(void **)byte_1001316F0, *(unint64_t *)&byte_1001316F0[8]);
  }
  else {
    std::string v24 = *(std::string *)byte_1001316F0;
  }
  sub_1000D51D8(&v24, &v23);
  sub_100005064(&v22, "Never");
  sub_1000D51D8(&v24, &v22);
  v33[2] = v24;
  memset(&v24, 0, sizeof(v24));
  sub_100005064(&v20, "reservoirs");
  memset(&v21, 170, sizeof(v21));
  if (byte_1001316F0[23] < 0) {
    sub_10000B8BC(&v21, *(void **)byte_1001316F0, *(unint64_t *)&byte_1001316F0[8]);
  }
  else {
    std::string v21 = *(std::string *)byte_1001316F0;
  }
  sub_1000D51D8(&v21, &v20);
  sub_100005064(&v19, "Daily");
  sub_1000D51D8(&v21, &v19);
  v33[3] = v21;
  memset(&v21, 0, sizeof(v21));
  sub_100005064(&v17, "reservoirs");
  memset(&v18, 170, sizeof(v18));
  if (byte_1001316F0[23] < 0) {
    sub_10000B8BC(&v18, *(void **)byte_1001316F0, *(unint64_t *)&byte_1001316F0[8]);
  }
  else {
    std::string v18 = *(std::string *)byte_1001316F0;
  }
  sub_1000D51D8(&v18, &v17);
  sub_100005064(&v16, "90Day");
  sub_1000D51D8(&v18, &v16);
  v33[4] = v18;
  memset(&v18, 0, sizeof(v18));
  sub_100005064(&v14, "reservoirs");
  memset(&v15, 170, sizeof(v15));
  if (byte_1001316F0[23] < 0) {
    sub_10000B8BC(&v15, *(void **)byte_1001316F0, *(unint64_t *)&byte_1001316F0[8]);
  }
  else {
    std::string v15 = *(std::string *)byte_1001316F0;
  }
  sub_1000D51D8(&v15, &v14);
  sub_100005064(&v13, "Never");
  sub_1000D51D8(&v15, &v13);
  v33[5] = v15;
  memset(&v15, 0, sizeof(v15));
  sub_100005064(&v11, "identity");
  memset(&v12, 170, sizeof(v12));
  if (byte_1001316F0[23] < 0) {
    sub_10000B8BC(&v12, *(void **)byte_1001316F0, *(unint64_t *)&byte_1001316F0[8]);
  }
  else {
    std::string v12 = *(std::string *)byte_1001316F0;
  }
  sub_1000D51D8(&v12, &v11);
  sub_100005064(&v10, "Daily");
  sub_1000D51D8(&v12, &v10);
  v33[6] = v12;
  memset(&v12, 0, sizeof(v12));
  sub_100005064(&v8, "identity");
  memset(&v9, 170, sizeof(v9));
  if (byte_1001316F0[23] < 0) {
    sub_10000B8BC(&v9, *(void **)byte_1001316F0, *(unint64_t *)&byte_1001316F0[8]);
  }
  else {
    std::string v9 = *(std::string *)byte_1001316F0;
  }
  sub_1000D51D8(&v9, &v8);
  sub_100005064(&v7, "90Day");
  sub_1000D51D8(&v9, &v7);
  v33[7] = v9;
  memset(&v9, 0, sizeof(v9));
  sub_100005064(&v5, "identity");
  memset(&v6, 170, sizeof(v6));
  if (byte_1001316F0[23] < 0) {
    sub_10000B8BC(&v6, *(void **)byte_1001316F0, *(unint64_t *)&byte_1001316F0[8]);
  }
  else {
    std::string v6 = *(std::string *)byte_1001316F0;
  }
  sub_1000D51D8(&v6, &v5);
  sub_100005064(&__p, "Never");
  sub_1000D51D8(&v6, &__p);
  std::string v34 = v6;
  memset(&v6, 0, sizeof(v6));
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = 0LL;
  unint64_t v32 = 0xAAAAAAAAAAAAAA00LL;
  __int128 v31 = a1;
  unint64_t v2 = (char *)operator new(0xD8uLL);
  *a1 = v2;
  a1[1] = v2;
  a1[2] = v2 + 216;
  uint64_t v3 = 0LL;
  a1[1] = sub_100043C68((uint64_t)(a1 + 2), (__int128 *)v33, &v35, v2);
  do
  {
    if (SHIBYTE(v34.__r_.__value_.__r.__words[v3 + 2]) < 0) {
      operator delete(*(void **)((char *)&v34.__r_.__value_.__l.__data_ + v3 * 8));
    }
    v3 -= 3LL;
  }

  while (v3 != -27);
}

void sub_100042670( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20, uint64_t a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33, void *a34, uint64_t a35, int a36, __int16 a37, char a38, char a39, uint64_t a40, void *a41, uint64_t a42, int a43, __int16 a44, char a45, char a46, void *a47, uint64_t a48, int a49, __int16 a50,char a51,char a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a46 < 0) {
    operator delete(a41);
  }
  if (a58 < 0) {
    operator delete(a53);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a65 < 0) {
    operator delete(a60);
  }
  if (a73 < 0) {
    operator delete(a72);
  }
  if (a71 < 0) {
    operator delete(a66);
  }
  if (a75 < 0) {
    operator delete(a74);
  }
  if (a79 < 0) {
    operator delete(a78);
  }
  if (a77 < 0) {
    operator delete(a76);
  }
  if (a81 < 0) {
    operator delete(a80);
  }
  if (a85 < 0) {
    operator delete(a84);
  }
  if (a83 < 0) {
    operator delete(a82);
  }
  if (a87 < 0) {
    operator delete(a86);
  }
  if (SLOBYTE(STACK[0x227]) < 0) {
    operator delete((void *)STACK[0x210]);
  }
  if (SLOBYTE(STACK[0x20F]) < 0) {
    operator delete(a88);
  }
  if (SLOBYTE(STACK[0x247]) < 0) {
    operator delete((void *)STACK[0x230]);
  }
  if (SLOBYTE(STACK[0x277]) < 0) {
    operator delete((void *)STACK[0x260]);
  }
  if (SLOBYTE(STACK[0x25F]) < 0) {
    operator delete((void *)STACK[0x248]);
  }
  if (SLOBYTE(STACK[0x297]) < 0) {
    operator delete((void *)STACK[0x280]);
  }
  if (SLOBYTE(STACK[0x2C7]) < 0) {
    operator delete((void *)STACK[0x2B0]);
  }
  if (SLOBYTE(STACK[0x2AF]) < 0) {
    operator delete((void *)STACK[0x298]);
  }
  for (; v88 != &STACK[0x2E0]; v88 -= 3)
  {
  }

  _Unwind_Resume(a1);
}

void sub_10004299C()
{
}

void sub_1000429A8( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, void *__p, uint64_t a46, int a47, __int16 a48, char a49, char a50)
{
  if (a50 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x100042864LL);
}

void sub_1000429C4()
{
}

void sub_1000429D4()
{
}

void sub_1000429E0( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a60 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x100042894LL);
}

void sub_1000429FC()
{
}

void sub_100042A0C()
{
}

void sub_100042A18( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a70 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1000428C4LL);
}

void sub_100042A34()
{
}

void sub_100042A44()
{
}

void sub_100042A50()
{
  if (SLOBYTE(STACK[0x227]) < 0) {
    operator delete((void *)STACK[0x210]);
  }
  JUMPOUT(0x1000428F4LL);
}

void sub_100042A6C()
{
}

void sub_100042A7C()
{
}

void sub_100042A88()
{
  if (SLOBYTE(STACK[0x277]) < 0) {
    operator delete((void *)STACK[0x260]);
  }
  JUMPOUT(0x100042924LL);
}

void sub_100042AA4()
{
}

void sub_100042AB0()
{
}

void sub_100042AC0()
{
}

void sub_100042AD0()
{
  if (SLOBYTE(STACK[0x2C7]) < 0) {
    operator delete((void *)STACK[0x2B0]);
  }
  JUMPOUT(0x100042954LL);
}

void sub_100042AF0()
{
}

void sub_100042AF8(char **a1@<X8>)
{
  if (qword_100131708 != -1) {
    dispatch_once(&qword_100131708, &stru_1001277C8);
  }
  sub_100005064(&v8, "aggregate_persist_temp");
  memset(&__dst, 170, sizeof(__dst));
  if (byte_1001316F0[23] < 0) {
    sub_10000B8BC(&__dst, *(void **)byte_1001316F0, *(unint64_t *)&byte_1001316F0[8]);
  }
  else {
    std::string __dst = *(std::string *)byte_1001316F0;
  }
  sub_1000D51D8(&__dst, &v8);
  sub_100005064(&v7, "aggregate_resume_stage");
  memset(&v12, 170, sizeof(v12));
  if (byte_1001316F0[23] < 0) {
    sub_10000B8BC(&v12, *(void **)byte_1001316F0, *(unint64_t *)&byte_1001316F0[8]);
  }
  else {
    std::string v12 = *(std::string *)byte_1001316F0;
  }
  sub_1000D51D8(&v12, &v7);
  sub_100005064(&v6, "reservoir_persist_temp");
  memset(&v13, 170, sizeof(v13));
  if (byte_1001316F0[23] < 0) {
    sub_10000B8BC(&v13, *(void **)byte_1001316F0, *(unint64_t *)&byte_1001316F0[8]);
  }
  else {
    std::string v13 = *(std::string *)byte_1001316F0;
  }
  sub_1000D51D8(&v13, &v6);
  sub_100005064(&v5, "reservoir_resume_stage");
  memset(&v14, 170, sizeof(v14));
  if (byte_1001316F0[23] < 0) {
    sub_10000B8BC(&v14, *(void **)byte_1001316F0, *(unint64_t *)&byte_1001316F0[8]);
  }
  else {
    std::string v14 = *(std::string *)byte_1001316F0;
  }
  sub_1000D51D8(&v14, &v5);
  sub_100005064(&__p, "identity_persist_temp");
  memset(&v15, 170, sizeof(v15));
  if (byte_1001316F0[23] < 0) {
    sub_10000B8BC(&v15, *(void **)byte_1001316F0, *(unint64_t *)&byte_1001316F0[8]);
  }
  else {
    std::string v15 = *(std::string *)byte_1001316F0;
  }
  sub_1000D51D8(&v15, &__p);
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  std::string v9 = a1;
  unint64_t v10 = 0xAAAAAAAAAAAAAA00LL;
  unint64_t v2 = (char *)operator new(0x78uLL);
  *a1 = v2;
  a1[1] = v2;
  a1[2] = v2 + 120;
  uint64_t v3 = 0LL;
  a1[1] = sub_100043C68((uint64_t)(a1 + 2), (__int128 *)&__dst, &v16, v2);
  do
  {
    if (SHIBYTE(v15.__r_.__value_.__r.__words[v3 + 2]) < 0) {
      operator delete(*(void **)((char *)&v15.__r_.__value_.__l.__data_ + v3 * 8));
    }
    v3 -= 3LL;
  }

  while (v3 != -15);
}

void sub_100042DF8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33, void *a34, uint64_t a35, int a36, __int16 a37, char a38, char a39, uint64_t a40, uint64_t a41, void *a42)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  for (; v42 != &a42; v42 -= 3)
  {
  }

  _Unwind_Resume(a1);
}

void sub_100042F98()
{
}

void sub_100042FA0(std::string *a1@<X8>)
{
  if (qword_100131708 != -1) {
    dispatch_once(&qword_100131708, &stru_1001277C8);
  }
  sub_100005064(&__p, "config.sqlite");
  memset(a1, 170, sizeof(std::string));
  if (byte_100131707 < 0)
  {
    sub_10000B8BC(a1, (void *)xmmword_1001316F0, *((unint64_t *)&xmmword_1001316F0 + 1));
  }

  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = xmmword_1001316F0;
    a1->__r_.__value_.__l.__cap_ = unk_100131700;
  }

  sub_1000D51D8(a1, &__p);
}

void sub_10004308C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000430C8(std::string *a1@<X8>)
{
  if (qword_100131708 != -1) {
    dispatch_once(&qword_100131708, &stru_1001277C8);
  }
  sub_100005064(&__p, "state.sqlite");
  memset(a1, 170, sizeof(std::string));
  if (byte_100131707 < 0)
  {
    sub_10000B8BC(a1, (void *)xmmword_1001316F0, *((unint64_t *)&xmmword_1001316F0 + 1));
  }

  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = xmmword_1001316F0;
    a1->__r_.__value_.__l.__cap_ = unk_100131700;
  }

  sub_1000D51D8(a1, &__p);
}

void sub_1000431B4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000431F0(std::string *a1@<X8>)
{
  unint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[OSASystemConfiguration sharedInstance](&OBJC_CLASS___OSASystemConfiguration, "sharedInstance"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 pathCATasking]);

  if (v3)
  {
    memset(v6, 170, sizeof(v6));
    sub_100005064(v6, (char *)[v3 fileSystemRepresentation]);
    sub_100005064(&__p, "taskedConfig.json");
    memset(a1, 170, sizeof(std::string));
    if (SHIBYTE(v6[2]) < 0)
    {
      sub_10000B8BC(a1, v6[0], (unint64_t)v6[1]);
    }

    else
    {
      *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)v6;
      a1->__r_.__value_.__l.__cap_ = (std::string::size_type)v6[2];
    }

    sub_1000D51D8(a1, &__p);
    if (SHIBYTE(v6[2]) < 0) {
      operator delete(v6[0]);
    }
  }

  else
  {
    int v4 = (os_log_s *)qword_100131790;
    if (os_log_type_enabled((os_log_t)qword_100131790, OS_LOG_TYPE_FAULT)) {
      sub_1000D81CC(v4);
    }
    a1->__r_.__value_.__r.__words[0] = 0LL;
    a1->__r_.__value_.__l.__size_ = 0LL;
    a1->__r_.__value_.__l.__cap_ = 0LL;
  }
}

void sub_100043340( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }

  _Unwind_Resume(a1);
}

void sub_1000433AC(void *a1@<X8>)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[OSASystemConfiguration sharedInstance](&OBJC_CLASS___OSASystemConfiguration, "sharedInstance"));
  id v2 = objc_claimAutoreleasedReturnValue([v3 targetAudience]);
  sub_100005064(a1, (char *)[v2 UTF8String]);
}

void sub_10004340C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_10004342C(void *a1@<X8>)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[OSASystemConfiguration sharedInstance](&OBJC_CLASS___OSASystemConfiguration, "sharedInstance"));
  id v2 = objc_claimAutoreleasedReturnValue([v3 buildVersion]);
  sub_100005064(a1, (char *)[v2 UTF8String]);
}

void sub_10004348C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1000434AC(void *a1@<X8>)
{
  id v6 = (id)objc_claimAutoreleasedReturnValue(+[OSASystemConfiguration sharedInstance](&OBJC_CLASS___OSASystemConfiguration, "sharedInstance"));
  id v2 = (void *)objc_claimAutoreleasedReturnValue([v6 productName]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[OSASystemConfiguration sharedInstance](&OBJC_CLASS___OSASystemConfiguration, "sharedInstance"));
  int v4 = (void *)objc_claimAutoreleasedReturnValue([v3 productVersion]);
  id v5 = objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString, "stringWithFormat:", @"%@ %@", v2, v4));
  sub_100005064(a1, (char *)[v5 UTF8String]);
}

void sub_100043568( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_1000435AC(void *a1@<X8>)
{
  id v6 = (id)objc_claimAutoreleasedReturnValue(+[OSASystemConfiguration sharedInstance](&OBJC_CLASS___OSASystemConfiguration, "sharedInstance"));
  id v2 = (void *)objc_claimAutoreleasedReturnValue([v6 buildVersion]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[OSASystemConfiguration sharedInstance](&OBJC_CLASS___OSASystemConfiguration, "sharedInstance"));
  int v4 = (void *)objc_claimAutoreleasedReturnValue([v3 targetAudience]);
  id v5 = objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString, "stringWithFormat:", @"%@-%@", v2, v4));
  sub_100005064(a1, (char *)[v5 UTF8String]);
}

void sub_100043668( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_1000436AC(uint64_t *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  int v4 = a1;
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)a1 + 23)) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v10 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v4));
    goto LABEL_8;
  }

  if (a1[1])
  {
    int v4 = (uint64_t *)*a1;
    goto LABEL_6;
  }

void sub_1000437F8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100043840@<X0>( const std::chrono::system_clock::time_point *a1@<X0>, std::stringbuf::string_type *a2@<X8>)
{
  time_t v3 = std::chrono::system_clock::to_time_t(a1);
  double v4 = OSATimeIntervalApproximate((double)v3);
  v5.__d_.__rep_ = std::chrono::system_clock::from_time_t((uint64_t)v4).__d_.__rep_;
  return sub_10003DB6C(v5.__d_.__rep_, (uint64_t)"%Y-%m-%dT%TZ", a2);
}

uint64_t sub_10004387C()
{
  time_t v1 = time(0LL);
  localtime_r(&v1, &v2);
  return v2.tm_gmtoff;
}

uint64_t sub_1000438EC()
{
  *(void *)id v6 = 0x1500000001LL;
  unint64_t v4 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v5 = 0xAAAAAAAAAAAAAAAALL;
  size_t v3 = 16LL;
  int v0 = sysctl(v6, 2u, &v4, &v3, 0LL, 0LL);
  if (v4) {
    BOOL v1 = v0 == -1;
  }
  else {
    BOOL v1 = 1;
  }
  if (v1) {
    return 0LL;
  }
  else {
    return (int)v5 + 1000000 * v4;
  }
}

std::chrono::duration<long long, std::ratio<1, 1000000>>::rep sub_10004398C()
{
  *(void *)unint64_t v4 = 0xE00000001LL;
  int v5 = 1;
  pid_t v6 = getpid();
  memset(__b, 170, sizeof(__b));
  size_t v2 = 648LL;
  if (sysctl(v4, 4u, __b, &v2, 0LL, 0LL) < 0) {
    return -1LL;
  }
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
  return (rep - std::chrono::system_clock::from_time_t(__b[0]).__d_.__rep_) / 1000000;
}

std::chrono::duration<long long, std::ratio<1, 1000000>>::rep sub_100043A60()
{
  uint64_t v0 = sub_1000438EC();
  if (v0 < 1)
  {
    unint64_t v4 = (os_log_s *)qword_100131790;
    if (os_log_type_enabled((os_log_t)qword_100131790, OS_LOG_TYPE_ERROR)) {
      sub_1000D8234(v4, v5, v6, v7, v8, v9, v10, v11);
    }
    return -1LL;
  }

  else
  {
    unint64_t v1 = v0;
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
    return (rep - std::chrono::system_clock::from_time_t(v1 / 0xF4240).__d_.__rep_) / 1000000;
  }

__darwin_time_t sub_100043AF8()
{
  __tp.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  __tp.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  int v0 = clock_gettime(_CLOCK_UPTIME_RAW, &__tp);
  if (!v0) {
    return __tp.tv_sec;
  }
  int v1 = v0;
  size_t v2 = (os_log_s *)qword_100131790;
  if (os_log_type_enabled((os_log_t)qword_100131790, OS_LOG_TYPE_ERROR)) {
    sub_1000D8290(v1, v2);
  }
  return -1LL;
}

uint64_t sub_100043B9C()
{
  size_t v9 = 8LL;
  uint64_t v10 = 0LL;
  if (sysctlbyname("hw.memsize", &v10, &v9, 0LL, 0LL) == -1)
  {
    int v0 = (os_log_s *)qword_100131790;
    if (os_log_type_enabled((os_log_t)qword_100131790, OS_LOG_TYPE_ERROR)) {
      sub_1000D8300(v0, v1, v2, v3, v4, v5, v6, v7);
    }
  }

  return v10;
}

void sub_100043C44(id a1)
{
  uid_t v1 = getuid();
  uint64_t v2 = getpwuid(v1);
  std::string::assign((std::string *)&xmmword_1001316F0, v2->pw_dir);
}

char *sub_100043C68(uint64_t a1, __int128 *a2, __int128 *a3, char *__dst)
{
  uint64_t v4 = __dst;
  size_t v9 = __dst;
  uint64_t v10 = __dst;
  v11[0] = a1;
  v11[1] = &v9;
  void v11[2] = &v10;
  unint64_t v12 = 0xAAAAAAAAAAAAAA00LL;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_10000B8BC(v4, *(void **)v6, *((void *)v6 + 1));
        uint64_t v4 = v10;
      }

      else
      {
        __int128 v7 = *v6;
        *((void *)v4 + 2) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v4 = v7;
      }

      uint64_t v6 = (__int128 *)((char *)v6 + 24);
      v4 += 24;
      uint64_t v10 = v4;
    }

    while (v6 != a3);
  }

  LOBYTE(v12) = 1;
  sub_100043D54((uint64_t)v11);
  return v4;
}

void sub_100043D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_100043D54(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_100015E00(a1);
  }
  return a1;
}

void sub_100043D88()
{
  int v0 = objc_autoreleasePoolPush();
  unk_100131700 = 0LL;
  xmmword_1001316F0 = 0uLL;
  __cxa_atexit((void (*)(void *))sub_10004117C, &xmmword_1001316F0, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

uint64_t sub_100043DD0(uint64_t a1, char *a2, unsigned __int8 *a3)
{
  v9[0] = 0xAAAAAAAAAAAAAAAALL;
  v9[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_10009AF28(v9, a1);
  v8[0] = 0xAAAAAAAAAAAAAAAALL;
  v8[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_1000473C8(v8, a1);
  v7[0] = 0xAAAAAAAAAAAAAAAALL;
  v7[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_1000446AC(v7, a1);
  sub_10009AF60((uint64_t)v9, a2, (uint64_t)a3);
  sub_100047400((uint64_t)v8, a2, a3);
  sub_1000446E4(v7, a2, a3);
  j_nullsub_4(v7);
  j_nullsub_4_0(v8);
  return j_nullsub_4_2(v9);
}

void sub_100043EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  j_nullsub_4_0((uint64_t *)va);
  j_nullsub_4_2(va1);
  _Unwind_Resume(a1);
}

double sub_100043EEC@<D0>(__int128 *a1@<X0>, __n128 *a2@<X1>, void *a3@<X2>, _OWORD *a4@<X8>)
{
  double result = v6[0];
  *a4 = *(_OWORD *)v6;
  return result;
}

void sub_100043F5C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

void sub_100043F68(uint64_t a1@<X0>, const char **a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v4 = a3;
  if (!*(void *)(a1 + 56))
  {
    *a2 = "no parent config candidate present to load for tasked config";
    *a3 = 0LL;
    a3[1] = 0LL;
    return;
  }

  v47[0] = 0xAAAAAAAAAAAAAAAALL;
  v47[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_1000861E4((const char *)(a1 + 32), a2, v47);
  if (v47[0])
  {
    unint64_t v45 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v46 = 0xAAAAAAAAAAAAAAAALL;
    uint64_t v6 = *(void *)(a1 + 56);
    if (*(char *)(v6 + 55) < 0)
    {
      sub_10000B8BC(&__dst, *(void **)(v6 + 32), *(void *)(v6 + 40));
    }

    else
    {
      __int128 __dst = *(_OWORD *)(v6 + 32);
      *(void *)&__int128 v54 = *(void *)(v6 + 48);
    }

    sub_1000861E4((const char *)&__dst, a2, &v45);
    if (SBYTE7(v54) < 0) {
      operator delete((void *)__dst);
    }
    if (!v45)
    {
      unint64_t *v4 = 0LL;
      v4[1] = 0LL;
LABEL_47:
      std::string v19 = (std::__shared_weak_count *)v46;
      if (v46)
      {
        std::string v20 = (unint64_t *)(v46 + 8);
        do
          unint64_t v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }

      goto LABEL_52;
    }

    unint64_t v43 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v44 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    (*(void (**)(unint64_t *__return_ptr))(*(void *)v47[0] + 16LL))(&v43);
    unint64_t v41 = 0xAAAAAAAAAAAAAAAALL;
    uint64_t v42 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    (*(void (**)(unint64_t *__return_ptr))(*(void *)v45 + 16LL))(&v41);
    __int128 v56 = "parentUuid";
    unint64_t v55 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v7 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
    __int128 __dst = v7;
    __int128 v54 = v7;
    sub_100008780((uint64_t)&v43, &v56, (uint64_t)&__dst);
    unint64_t v48 = (unsigned __int8 *)&v43;
    uint64_t v49 = 0LL;
    uint64_t v50 = 0LL;
    uint64_t v51 = 0LL;
    unint64_t v52 = 0x8000000000000000LL;
    sub_100008AC8(&v48);
    if (sub_1000087E8((unsigned __int8 **)&__dst, &v48))
    {
      uint64_t v8 = sub_10009AE9C();
      if (!v8) {
        goto LABEL_18;
      }
    }

    else
    {
      uint64_t v8 = (uint64_t)sub_100008924((unsigned __int8 **)&__dst);
    }

    if (*(_BYTE *)v8 == 3)
    {
      size_t v9 = *(unsigned __int8 **)(v8 + 8);
      goto LABEL_19;
    }

LABEL_71:
          int v30 = 0LL;
LABEL_72:
          if (v27)
          {
            if (v30)
            {
              if (*((char *)v27 + 23) < 0)
              {
                sub_10000B8BC(&__p, *(void **)v27, *((void *)v27 + 1));
              }

              else
              {
                __int128 v31 = *v27;
                __p.__r_.__value_.__l.__cap_ = *((void *)v27 + 2);
                *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v31;
              }

              int64_t v32 = sub_10003E010(&__p, (uint64_t)"%m-%d-%Y %H:%M:%S");
              char v34 = v33;
              if (*((char *)v30 + 23) < 0)
              {
                sub_10000B8BC(&v39, *(void **)v30, *((void *)v30 + 1));
              }

              else
              {
                __int128 v35 = *v30;
                v39.__r_.__value_.__l.__cap_ = *((void *)v30 + 2);
                *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v35;
              }

              int64_t v36 = sub_10003E010(&v39, (uint64_t)"%m-%d-%Y %H:%M:%S");
              char v38 = v37;
              if (v34)
              {
                if (v38)
                {
                  if (v32 >= v36)
                  {
                    *(_OWORD *)uint64_t v4 = *(_OWORD *)v47;
                    uint64_t v4 = v47;
                    goto LABEL_46;
                  }

                  std::string v13 = "tasked config has an older builtOnDate than the parent config";
                }

                else
                {
                  std::string v13 = "parent config builtOnDate could not be parsed";
                }
              }

              else
              {
                std::string v13 = "tasked config builtOnDate could not be parsed";
              }
            }

            else
            {
              std::string v13 = "parent config does not have builtOnDate?!";
            }
          }

          else
          {
            std::string v13 = "tasked config does not have builtOnDate?!";
          }

LABEL_45:
          *a2 = v13;
LABEL_46:
          unint64_t *v4 = 0LL;
          v4[1] = 0LL;
          sub_1000041AC((uint64_t)&v41);
          sub_10000425C(&v42, v41);
          sub_1000041AC((uint64_t)&v43);
          sub_10000425C(&v44, v43);
          goto LABEL_47;
        }
      }

void sub_100044508(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

uint64_t sub_100044514(uint64_t a1)
{
  return sub_10000E810(a1);
}

void sub_10004453C(uint64_t a1)
{
  uint64_t v2 = (void *)sub_10000E810(a1);
  operator delete(v2);
}

void *sub_100044568@<X0>(__int128 *a1@<X1>, __n128 *a2@<X2>, void *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x60uLL);
  double result = sub_1000445D8(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1000445C4(_Unwind_Exception *a1)
{
}

void *sub_1000445D8(void *a1, __int128 *a2, __n128 *a3, void *a4)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_100127838;
  sub_10000E290((uint64_t)(a1 + 3), a2, a3);
  a1[3] = off_1001277F8;
  uint64_t v6 = a4[1];
  a1[10] = *a4;
  a1[11] = v6;
  if (v6)
  {
    __int128 v7 = (unint64_t *)(v6 + 8);
    do
      unint64_t v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }

  return a1;
}

void sub_10004463C(_Unwind_Exception *a1)
{
}

void sub_100044650(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100127838;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100044660(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100127838;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_100044680(uint64_t a1)
{
  uint64_t v1 = a1 + 24;
  sub_100007004(a1 + 80);
  return sub_10000E810(v1);
}

void *sub_1000446AC(void *a1, uint64_t a2)
{
  double result = sub_10006E8B8(a1, a2);
  *double result = &off_100127888;
  return result;
}

void sub_1000446D0(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

uint64_t sub_1000446E8(uint64_t a1, char *a2, unsigned __int8 *a3)
{
  uint64_t result = sub_10006E8D0(a1, (uint64_t)"RegexCheckingConfigPass", a2, (uint64_t)a3);
  if ((_DWORD)result)
  {
    uint64_t v5 = sub_100003F94(a3, "transforms");
    unint64_t v32 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v6 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v31[0] = v6;
    v31[1] = v6;
    __int128 v7 = (unsigned __int8 **)sub_1000211B0(v31, (uint64_t)v5);
    sub_100021128(v7);
    unint64_t v30 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v8 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v29[0] = v8;
    v29[1] = v8;
    sub_1000211B0(v29, (uint64_t)v5);
    sub_1000211FC((unsigned __int8 **)v29);
    uint64_t result = sub_10001855C((unsigned __int8 **)v31, (unsigned __int8 **)v29);
    if ((result & 1) == 0)
    {
      while (1)
      {
        size_t v9 = sub_100018150((unsigned __int8 **)v31);
        if ((sub_10006ECC0((uint64_t)v9) & 0xFFFFFFFD) == 0)
        {
          *(void *)&v27[0] = "inputs";
          *(void *)&__int128 v35 = 0xAAAAAAAAAAAAAAAALL;
          *(void *)&__int128 v10 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)&v33[0].__locale_ = v10;
          __int128 v34 = v10;
          sub_100008780((uint64_t)v9, (const std::string::value_type **)v27, (uint64_t)v33);
          uint64_t v39 = 0LL;
          uint64_t v40 = 0LL;
          uint64_t v38 = 0LL;
          char v37 = v9;
          unint64_t v41 = 0x8000000000000000LL;
          sub_100008AC8(&v37);
          if (sub_1000087E8((unsigned __int8 **)v33, &v37))
          {
            uint64_t v11 = sub_10009AE9C();
            if (!v11) {
              goto LABEL_5;
            }
          }

          else
          {
            uint64_t v11 = (uint64_t)sub_100008924((unsigned __int8 **)v33);
          }

          unint64_t v28 = 0xAAAAAAAAAAAAAAAALL;
          *(void *)&__int128 v12 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v27[0] = v12;
          v27[1] = v12;
          sub_100008B44(v27, v11);
          sub_100045378((unsigned __int8 **)v27);
          unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
          *(void *)&__int128 v13 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v25[0] = v13;
          v25[1] = v13;
          sub_100008B44(v25, v11);
          sub_100008AC8((unsigned __int8 **)v25);
        }

LABEL_36:
        sub_100018704((unsigned __int8 **)v27);
      }
    }
  }

  return result;
}

        if (v13 == 81 || v13 == 83) {
          goto LABEL_38;
        }
        goto LABEL_42;
      }
    }

    __int128 v20 = [v12 longLongValue];
    unint64_t v21 = 5;
LABEL_39:
    *(_BYTE *)a3 = v21;
    *(void *)(a3 + std::istream::~istream(v2, v3 + 8) = v20;
    goto LABEL_40;
  }

  uint64_t v11 = objc_opt_class(&OBJC_CLASS___NSDictionary);
  if ((objc_opt_isKindOfClass(v5, v11) & 1) != 0)
  {
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472LL;
    _OWORD v27[2] = sub_10005992C;
    void v27[3] = &unk_1001285D0;
    v27[4] = &__p;
    unint64_t v28 = a2;
    [v5 enumerateKeysAndObjectsUsingBlock:v27];
    sub_100059D30(a3, &__p);
    sub_100004D00((uint64_t)&__p, (char *)__p.__r_.__value_.__l.__size_);
  }

  else
  {
    uint64_t v16 = objc_opt_class(&OBJC_CLASS___NSArray);
    if ((objc_opt_isKindOfClass(v5, v16) & 1) != 0)
    {
      memset(&__p, 0, sizeof(__p));
      sub_1000045E0((uint64_t *)&__p, (unint64_t)[v5 count]);
      v25[0] = _NSConcreteStackBlock;
      v25[1] = 3221225472LL;
      _OWORD v25[2] = sub_100059A8C;
      v25[3] = &unk_1001285F0;
      v25[4] = &__p;
      unint64_t v26 = a2;
      [v5 enumerateObjectsUsingBlock:v25];
      *(void *)(a3 + std::istream::~istream(v2, v3 + 8) = 0LL;
      *(_BYTE *)a3 = 2;
      __int128 v17 = (std::string *)operator new(0x18uLL);
      *__int128 v17 = __p;
      memset(&__p, 0, sizeof(__p));
      *(void *)(a3 + std::istream::~istream(v2, v3 + 8) = v17;
      sub_1000041AC(a3);
      sub_1000041AC(a3);
      p_p = &__p;
      sub_100004D64((void ***)&p_p);
    }

    else
    {
      std::string v18 = objc_opt_class(&OBJC_CLASS___NSData);
      if ((objc_opt_isKindOfClass(v5, v18) & 1) != 0)
      {
        std::string v19 = v5;
        sub_1000A379C((unsigned __int8 *)[v19 bytes], (uint64_t)objc_msgSend(v19, "length"), &__p);
        sub_100008E5C(a3, (uint64_t)&__p);
      }

      else
      {
        std::string v22 = objc_opt_class(&OBJC_CLASS___NSNull);
        if ((objc_opt_isKindOfClass(v5, v22) & 1) == 0) {
          +[NSException raise:format:]( &OBJC_CLASS___NSException,  "raise:format:",  NSInvalidArgumentException,  @"Invalid type in JSON write (%@)",  objc_opt_class(v5));
        }
        *(_BYTE *)a3 = 0;
        *(void *)(a3 + std::istream::~istream(v2, v3 + 8) = 0LL;
        sub_1000041AC(a3);
        sub_1000041AC(a3);
      }
    }
  }

    unint64_t v24 = sub_100018150((unsigned __int8 **)v48);
    sub_100006200((uint64_t)v24, -1, 0x20u, 0LL, 0, v43);
    v41[0] = 0LL;
    v41[1] = 0LL;
    uint64_t v42 = 0LL;
    sub_1000184F4(a3, "defType", (uint64_t)buf);
    *(void *)unint64_t v48 = *(void *)buf;
    *(_OWORD *)&v48[8] = *(_OWORD *)&buf[8];
    *(_OWORD *)&v48[24] = *(_OWORD *)&buf[24];
    *(void *)&buf[32] = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v25 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v25 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)__int128 buf = v25;
    *(_OWORD *)&uint8_t buf[16] = v25;
    unint64_t v26 = (unsigned __int8 **)sub_1000211B0(buf, a3);
    sub_1000211FC(v26);
    if (!sub_10001855C((unsigned __int8 **)v48, (unsigned __int8 **)buf)
      && *sub_100018150((unsigned __int8 **)v48) == 3)
    {
      std::string v27 = sub_100018150((unsigned __int8 **)v48);
      sub_1000218CC((uint64_t)v27, (std::string *)buf);
      *(_OWORD *)unint64_t v41 = *(_OWORD *)buf;
      uint64_t v42 = *(void *)&buf[16];
    }

    if (*(void *)(a2 + 56)
      || (sub_10004C38C( a1,  "INSERT INTO eventdefs (event_uuid, event_name, event_type, event_defType, event_config) VALUES (?1, ?2, ?3, ?4, ?5);",
            0,
            (sqlite3_stmt **)buf),
          unint64_t v28 = *(sqlite3_stmt **)buf,
          *(void *)__int128 buf = 0LL,
          sub_10004C6D4((sqlite3_stmt **)(a2 + 56), v28),
          sub_10004C6D4((sqlite3_stmt **)buf, 0LL),
          *(void *)(a2 + 56)))
    {
      uint64_t v40 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
      sub_100040E10(&v40, (void *)(a2 + 56));
      uint64_t v39 = 0LL;
      sub_10004C11C(a1, (sqlite3_stmt **)(a2 + 56), 1, (uint64_t)&__p, &v39);
      sub_10004C11C(a1, (sqlite3_stmt **)(a2 + 56), 2, (uint64_t)&v46, &v39);
      sub_10004C11C(a1, (sqlite3_stmt **)(a2 + 56), 3, (uint64_t)&v45, &v39);
      sub_10004C11C(a1, (sqlite3_stmt **)(a2 + 56), 4, (uint64_t)v41, &v39);
      sub_10004C11C(a1, (sqlite3_stmt **)(a2 + 56), 5, (uint64_t)v43, &v39);
      if (sub_10004C0B4(a1, (sqlite3_stmt **)(a2 + 56), &v39) == 101)
      {
        insert_rowid = sqlite3_last_insert_rowid(*(sqlite3 **)(a1 + 32));
      }

      else
      {
        insert_rowid = sub_1000BB7C8(a1, a2, (uint64_t)&__p);
        if (!insert_rowid)
        {
          uint64_t v29 = *(sqlite3 **)(a1 + 32);
          unint64_t v30 = (os_log_s *)qword_100131930;
          __int128 v31 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
          if (v29)
          {
            if (v31)
            {
              std::string::size_type size = (char)__p.__r_.__value_.__s.__size_;
              char v33 = __p.__r_.__value_.__r.__words[0];
              __int128 v34 = sqlite3_errmsg(v29);
              p_p = &__p;
              if (size < 0) {
                p_p = (std::string *)v33;
              }
              *(_DWORD *)__int128 buf = 136446466;
              *(void *)&uint8_t buf[4] = p_p;
              *(_WORD *)&_BYTE buf[12] = 2080;
              *(void *)&buf[14] = v34;
              _os_log_error_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_ERROR,  "[Config Store] ERROR: Failed to insert event def uuid='%{public}s'; %s",
                buf,
                0x16u);
            }
          }

          else if (v31)
          {
            sub_1000C667C();
          }

          insert_rowid = 0LL;
        }
      }

      sub_100040E1C(&v40);
    }

    else
    {
      __int128 v36 = *(sqlite3 **)(a1 + 32);
      char v37 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (v36)
      {
        if (v37)
        {
          uint64_t v38 = sqlite3_errmsg(v36);
          sub_1000C6648((uint64_t)v38, (uint64_t)buf);
        }
      }

      else if (v37)
      {
        sub_1000C65F0();
      }

      insert_rowid = 0LL;
    }

    if (SHIBYTE(v42) < 0) {
      operator delete(v41[0]);
    }
    if (v44 < 0) {
      operator delete(v43[0]);
    }
LABEL_30:
LABEL_25:
LABEL_20:
    return insert_rowid;
  }

  if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR)) {
    sub_1000C6490();
  }
  return 0LL;
}

void sub_100044D9C()
{
  if (v1 < 0) {
    operator delete(v0);
  }
  JUMPOUT(0x100044E88LL);
}

void sub_100044DA4( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t *a25, uint64_t a26, uint64_t *a27, uint64_t a28, void *__p, uint64_t a30, int a31, __int16 a32, char a33, char a34)
{
  for (uint64_t i = 32LL; i != -32; i -= 32LL)
    sub_100045348((uint64_t **)(v34 - 208 + i));
  sub_10000417C(&a27);
  if (a34 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x100044E3CLL);
}

void sub_100044E54(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100044E90(unsigned __int8 *a1, char *a2)
{
  __int128 v6 = a2;
  sub_10000E89C((uint64_t)v4, &v6);
  LODWORD(a1) = sub_10002CE28(a1, v4);
  sub_1000041AC((uint64_t)v4);
  sub_10000425C(&v5, v4[0]);
  return a1 ^ 1;
}

void sub_100044F1C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

void sub_100044F28(char *__s@<X2>, char *a2@<X0>, const void **a3@<X1>, std::string *a4@<X8>)
{
  if (v8 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100044FB8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100044FDC(uint64_t a1, char *a2, uint64_t a3, char *a4, char *a5, unsigned __int8 *a6)
{
  __int128 v36 = a5;
  char v37 = a2;
  sub_10000E89C((uint64_t)v34, &v36);
  __int128 v10 = sub_100003F94(a6, "message");
  sub_1000041AC((uint64_t)v34);
  char v11 = *(_BYTE *)v10;
  *(_BYTE *)__int128 v10 = v34[0];
  v34[0] = v11;
  __int128 v12 = (uint64_t *)v10[1];
  v10[1] = (uint64_t)v35;
  __int128 v35 = v12;
  sub_1000041AC((uint64_t)v10);
  sub_1000041AC((uint64_t)v34);
  sub_10000425C(&v35, v34[0]);
  sub_10000E89C((uint64_t)v32, &v37);
  __int128 v13 = sub_100003F94(a6, "source");
  sub_1000041AC((uint64_t)v32);
  char v14 = *(_BYTE *)v13;
  *(_BYTE *)__int128 v13 = v32[0];
  v32[0] = v14;
  __int128 v15 = (uint64_t *)v13[1];
  v13[1] = (uint64_t)v33;
  char v33 = v15;
  sub_1000041AC((uint64_t)v13);
  sub_1000041AC((uint64_t)v32);
  sub_10000425C(&v33, v32[0]);
  sub_100005064(v27, "name");
  sub_100044F28("<unknown>", a4, (const void **)v27, &__p);
  sub_100008E5C((uint64_t)v30, (uint64_t)&__p);
  uint64_t v16 = sub_100003F94(a6, "transformName");
  sub_1000041AC((uint64_t)v30);
  char v17 = *(_BYTE *)v16;
  *(_BYTE *)uint64_t v16 = v30[0];
  v30[0] = v17;
  std::string v18 = (uint64_t *)v16[1];
  v16[1] = (uint64_t)v31;
  __int128 v31 = v18;
  sub_1000041AC((uint64_t)v16);
  sub_1000041AC((uint64_t)v30);
  sub_10000425C(&v31, v30[0]);
  if (v28 < 0) {
    operator delete(v27[0]);
  }
  sub_10000C3E4((uint64_t)v25, a3);
  std::string v19 = sub_100003F94(a6, "transformUuid");
  sub_1000041AC((uint64_t)v25);
  char v20 = *(_BYTE *)v19;
  *(_BYTE *)std::string v19 = v25[0];
  v25[0] = v20;
  unint64_t v21 = (uint64_t *)v19[1];
  v19[1] = (uint64_t)v26;
  unint64_t v26 = v21;
  sub_1000041AC((uint64_t)v19);
  sub_1000041AC((uint64_t)v25);
  sub_10000425C(&v26, v25[0]);
  uint64_t v22 = *(void *)(a1 + 8);
  sub_10000C3E4((uint64_t)v23, (uint64_t)a6);
  (*(void (**)(uint64_t, const char *, _BYTE *))(*(void *)v22 + 40LL))(v22, "RegexCheckingConfigPass", v23);
  sub_1000041AC((uint64_t)v23);
  sub_10000425C(&v24, v23[0]);
}

void sub_100045288( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p, uint64_t a21, int a22, __int16 a23, char a24, char a25, char a26, uint64_t a27, char a28)
{
}

uint64_t sub_100045308(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(void *)(a1 + std::istream::~istream(v2, v3 + 8) = 0LL;
  sub_1000041AC(a1);
  sub_1000041AC(a1);
  *(void *)(a1 + 16) = a2;
  *(_BYTE *)(a1 + 24) = 0;
  return a1;
}

uint64_t **sub_100045348(uint64_t **a1)
{
  return a1;
}

unsigned __int8 **sub_100045378(unsigned __int8 **result)
{
  char v1 = *result;
  if (!*result) {
    __assert_rtn("set_begin", "iter_impl.hpp", 174, "m_object != nullptr");
  }
  int v2 = *v1;
  if (*v1)
  {
    if (v2 == 2)
    {
      result[2] = (unsigned __int8 *)**((void **)v1 + 1);
    }

    else if (v2 == 1)
    {
      result[1] = (unsigned __int8 *)**((void **)v1 + 1);
    }

    else
    {
      result[4] = 0LL;
    }
  }

  else
  {
    result[4] = (unsigned __int8 *)1;
  }

  return result;
}

std::string *sub_100045400@<X0>(char *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  if (*a1 != 1)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    __int128 v12 = (char *)sub_10000528C(a1);
    sub_100005064(v15, v12);
    __int128 v13 = std::string::insert((std::string *)v15, 0LL, "cannot use value() with ");
    __int128 v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    *(void *)&__int128 v18 = v13->__r_.__value_.__l.__cap_;
    __int128 v17 = v14;
    v13->__r_.__value_.__l.__size_ = 0LL;
    v13->__r_.__value_.__l.__cap_ = 0LL;
    v13->__r_.__value_.__r.__words[0] = 0LL;
    sub_100005128(306, (uint64_t)&v17, exception);
  }

  unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v17 = v7;
  __int128 v18 = v7;
  sub_10003CED0((uint64_t)a1, a2, (uint64_t)&v17);
  unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v15[0] = v8;
  v15[1] = v8;
  sub_100008B44(v15, (uint64_t)a1);
  sub_100008AC8((unsigned __int8 **)v15);
  uint64_t result = (std::string *)sub_1000087E8((unsigned __int8 **)&v17, (unsigned __int8 **)v15);
  if ((result & 1) != 0)
  {
    if (*(char *)(a3 + 23) < 0)
    {
      return (std::string *)sub_10000B8BC(a4, *(void **)a3, *(void *)(a3 + 8));
    }

    else
    {
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      a4->__r_.__value_.__l.__cap_ = *(void *)(a3 + 16);
    }
  }

  else
  {
    __int128 v10 = sub_100008924((unsigned __int8 **)&v17);
    return sub_1000218CC((uint64_t)v10, a4);
  }

  return result;
}

void sub_100045574( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
}

uint64_t sub_1000455DC(uint64_t a1, char *a2)
{
  *(void *)(a1 + std::istream::~istream(v2, v3 + 8) = 0LL;
  *(_BYTE *)a1 = 3;
  *(void *)(a1 + std::istream::~istream(v2, v3 + 8) = sub_100045624(a2);
  sub_1000041AC(a1);
  sub_1000041AC(a1);
  return a1;
}

void *sub_100045624(char *a1)
{
  int v2 = operator new(0x18uLL);
  sub_100005064(v2, a1);
  return v2;
}

void sub_100045658(_Unwind_Exception *a1)
{
}

uint64_t *sub_10004566C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = operator new(0x48uLL);
  sub_1000456BC(v4, a1);
  return sub_100046DBC(a2, (uint64_t)v4);
}

void *sub_1000456BC(void *a1, void *a2)
{
  dispatch_queue_t v4 = dispatch_queue_create("analyticsd.DefaultQueriedStateCacheQueue", 0LL);
  a1[1] = 0LL;
  a1[2] = 0LL;
  a1[3] = v4;
  if (v4)
  {
    uint64_t v5 = v4;
    dispatch_retain(v4);
    dispatch_release(v5);
  }

  *a1 = off_1001278C8;
  uint64_t v6 = a2[1];
  a1[4] = *a2;
  a1[5] = v6;
  if (v6)
  {
    __int128 v7 = (unint64_t *)(v6 + 8);
    do
      unint64_t v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }

  a1[6] = 0LL;
  a1[7] = 0LL;
  a1[8] = 0LL;
  return a1;
}

void sub_100045748(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 8;
  v4[0] = a1;
  v4[1] = a2;
  uint64_t v3 = *(dispatch_queue_s **)(a1 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_100046ECC;
  block[3] = &unk_1001279D0;
  block[4] = v2;
  block[5] = v4;
  dispatch_sync(v3, block);
}

void sub_1000457D4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3)
  {
    uint64_t v5 = (unint64_t *)(v3 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000CF18(&v17, (void *)(a1 + 8));
  __int128 v7 = operator new(0x18uLL);
  *__int128 v7 = a1;
  v7[1] = v4;
  void v7[2] = v3;
  unint64_t v8 = *(dispatch_queue_s **)(a1 + 24);
  unint64_t v9 = v17;
  unint64_t v10 = v18;
  if (v18)
  {
    char v11 = (unint64_t *)(v18 + 8);
    do
      unint64_t v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }

  __int128 v13 = operator new(0x18uLL);
  void *v13 = v7;
  v13[1] = v9;
  void v13[2] = v10;
  dispatch_async_f(v8, v13, (dispatch_function_t)sub_100046EE4);
  __int128 v14 = (std::__shared_weak_count *)v18;
  if (v18)
  {
    __int128 v15 = (unint64_t *)(v18 + 8);
    do
      unint64_t v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }

void sub_1000458F0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

void sub_100045900(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  v6[0] = a1;
  v6[1] = a2;
  double v6[2] = a3;
  uint64_t v5 = *(dispatch_queue_s **)(a1 + 24);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000LL;
  void v7[2] = sub_1000470BC;
  void v7[3] = &unk_1001279F0;
  void v7[4] = a1 + 8;
  void v7[5] = v6;
  unint64_t v8 = v7;
  *a4 = 0xAAAAAAAAAAAAAA00LL;
  a4[1] = 0LL;
  sub_1000041AC((uint64_t)a4);
  sub_1000041AC((uint64_t)a4);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_1000470CC;
  block[3] = &unk_100127A10;
  block[4] = a4;
  block[5] = &v8;
  dispatch_sync(v5, block);
}

uint64_t **sub_1000459F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)&__int128 v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v26 = v5;
  __int128 v27 = v5;
  __int128 v25 = v5;
  (*(void (**)(__int128 *__return_ptr))(**(void **)(a1 + 32) + 32LL))(&v25);
  if (BYTE8(v27))
  {
    v6.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (!BYTE8(v27)) {
      goto LABEL_10;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v7 = 0x7FFFFFFFFFFFFFFFLL;
    if (v6.__d_.__rep_ < v7)
    {
      if ((_BYTE)v25)
      {
        sub_10000B990((uint64_t)v48, a2);
        uint64_t v49 = v48;
        char v50 = 1;
        uint64_t v52 = sub_10000C3E4((uint64_t)v51, (uint64_t)&v25);
        char v53 = 1;
        sub_10000BA40((uint64_t)v33, (uint64_t)v48, 2LL, 1, 2);
        uint64_t v34 = v33;
        char v35 = 1;
        sub_100017A54((uint64_t)v42, "expiresAt");
        unint64_t v43 = v42;
        char v44 = 1;
        if (BYTE8(v27))
        {
          else {
            std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v8 = v26 + *((void *)&v26 + 1);
          }
        }

        else
        {
          std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v8 = 0x8000000000000000LL;
        }

        sub_10003DB6C(v8, (uint64_t)"%Y-%m-%dT%TZ", &__p);
        uint64_t v46 = sub_100008E5C((uint64_t)v45, (uint64_t)&__p);
        char v47 = 1;
        sub_10000BA40((uint64_t)v36, (uint64_t)v42, 2LL, 1, 2);
        char v37 = v36;
        char v38 = 1;
        sub_10000BA40(a3, (uint64_t)v33, 2LL, 1, 2);
        for (uint64_t i = 0LL; i != -64; i -= 32LL)
        {
          sub_1000041AC((uint64_t)&v36[i]);
          sub_10000425C((uint64_t **)&v36[i + 8], v36[i]);
        }

        for (uint64_t j = 0LL; j != -64; j -= 32LL)
        {
          sub_1000041AC((uint64_t)&v45[j]);
          sub_10000425C((uint64_t **)&v45[j + 8], v45[j]);
        }

        for (uint64_t k = 0LL; k != -64; k -= 32LL)
        {
          sub_1000041AC((uint64_t)&v51[k]);
          sub_10000425C((uint64_t **)&v51[k + 8], v51[k]);
        }
      }

      else
      {
        sub_10002BBB0((uint64_t)v48, "name");
        uint64_t v49 = v48;
        char v50 = 1;
        uint64_t v52 = sub_10000B990((uint64_t)v51, a2);
        char v53 = 1;
        sub_10000BA40((uint64_t)v33, (uint64_t)v48, 2LL, 1, 2);
        uint64_t v34 = v33;
        char v35 = 1;
        sub_1000455DC((uint64_t)v42, "error");
        unint64_t v43 = v42;
        char v44 = 1;
        uint64_t v46 = sub_10000E89C((uint64_t)v45, &off_1001311F0);
        char v47 = 1;
        sub_10000BA40((uint64_t)v36, (uint64_t)v42, 2LL, 1, 2);
        char v37 = v36;
        char v38 = 1;
        sub_100017A54((uint64_t)&__p, "expiresAt");
        __p.__r_.__value_.__l.__cap_ = (std::string::size_type)&__p;
        char v29 = 1;
        if (BYTE8(v27))
        {
          else {
            std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v15 = v26 + *((void *)&v26 + 1);
          }
        }

        else
        {
          std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v15 = 0x8000000000000000LL;
        }

        sub_10003DB6C(v15, (uint64_t)"%Y-%m-%dT%TZ", &v24);
        uint64_t v31 = sub_100008E5C((uint64_t)v30, (uint64_t)&v24);
        char v32 = 1;
        sub_10000BA40((uint64_t)v39, (uint64_t)&__p, 2LL, 1, 2);
        uint64_t v40 = v39;
        char v41 = 1;
        sub_10000BA40(a3, (uint64_t)v33, 3LL, 1, 2);
        for (uint64_t m = 0LL; m != -96; m -= 32LL)
        {
          sub_1000041AC((uint64_t)&v39[m]);
          sub_10000425C((uint64_t **)&v39[m + 8], v39[m]);
        }

        for (uint64_t n = 0LL; n != -64; n -= 32LL)
        {
          sub_1000041AC((uint64_t)&v30[n]);
          sub_10000425C((uint64_t **)&v30[n + 8], v30[n]);
        }

        for (iuint64_t i = 0LL; ii != -64; ii -= 32LL)
        {
          sub_1000041AC((uint64_t)&v45[ii]);
          sub_10000425C((uint64_t **)&v45[ii + 8], v45[ii]);
        }

        for (juint64_t j = 0LL; jj != -64; jj -= 32LL)
        {
          sub_1000041AC((uint64_t)&v51[jj]);
          sub_10000425C((uint64_t **)&v51[jj + 8], v51[jj]);
        }
      }
    }

    else
    {
LABEL_10:
      sub_10002BBB0((uint64_t)v48, "name");
      uint64_t v49 = v48;
      char v50 = 1;
      uint64_t v52 = sub_10000B990((uint64_t)v51, a2);
      char v53 = 1;
      sub_10000BA40((uint64_t)v33, (uint64_t)v48, 2LL, 1, 2);
      uint64_t v34 = v33;
      char v35 = 1;
      sub_1000455DC((uint64_t)v42, "error");
      unint64_t v43 = v42;
      char v44 = 1;
      sub_100005064(&__p, "CacheEntryExpired");
      uint64_t v46 = sub_100008E5C((uint64_t)v45, (uint64_t)&__p);
      char v47 = 1;
      sub_10000BA40((uint64_t)v36, (uint64_t)v42, 2LL, 1, 2);
      char v37 = v36;
      char v38 = 1;
      sub_10000BA40(a3, (uint64_t)v33, 2LL, 1, 2);
      for (kuint64_t k = 0LL; kk != -64; kk -= 32LL)
      {
        sub_1000041AC((uint64_t)&v36[kk]);
        sub_10000425C((uint64_t **)&v36[kk + 8], v36[kk]);
      }

      for (muint64_t m = 0LL; mm != -64; mm -= 32LL)
      {
        sub_1000041AC((uint64_t)&v45[mm]);
        sub_10000425C((uint64_t **)&v45[mm + 8], v45[mm]);
      }

      for (nuint64_t n = 0LL; nn != -64; nn -= 32LL)
      {
        sub_1000041AC((uint64_t)&v51[nn]);
        sub_10000425C((uint64_t **)&v51[nn + 8], v51[nn]);
      }
    }
  }

  else
  {
    sub_10002BBB0((uint64_t)v48, "name");
    uint64_t v49 = v48;
    char v50 = 1;
    uint64_t v52 = sub_10000B990((uint64_t)v51, a2);
    char v53 = 1;
    sub_10000BA40((uint64_t)v33, (uint64_t)v48, 2LL, 1, 2);
    uint64_t v34 = v33;
    char v35 = 1;
    sub_1000455DC((uint64_t)v42, "error");
    unint64_t v43 = v42;
    char v44 = 1;
    sub_100005064(&__p, "CacheEntryAbsent");
    uint64_t v46 = sub_100008E5C((uint64_t)v45, (uint64_t)&__p);
    char v47 = 1;
    sub_10000BA40((uint64_t)v36, (uint64_t)v42, 2LL, 1, 2);
    char v37 = v36;
    char v38 = 1;
    sub_10000BA40(a3, (uint64_t)v33, 2LL, 1, 2);
    for (uint64_t i1 = 0LL; i1 != -64; i1 -= 32LL)
    {
      sub_1000041AC((uint64_t)&v36[i1]);
      sub_10000425C((uint64_t **)&v36[i1 + 8], v36[i1]);
    }

    for (uint64_t i2 = 0LL; i2 != -64; i2 -= 32LL)
    {
      sub_1000041AC((uint64_t)&v45[i2]);
      sub_10000425C((uint64_t **)&v45[i2 + 8], v45[i2]);
    }

    for (uint64_t i3 = 0LL; i3 != -64; i3 -= 32LL)
    {
      sub_1000041AC((uint64_t)&v51[i3]);
      sub_10000425C((uint64_t **)&v51[i3 + 8], v51[i3]);
    }
  }

  return sub_100046D80((uint64_t **)&v25);
}

void sub_100046164( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, char a34)
{
  for (uint64_t i = 64LL; i != -32; i -= 32LL)
    sub_100045348((uint64_t **)(v34 + i));
  for (uint64_t j = 32LL; j != -32; j -= 32LL)
    sub_100045348((uint64_t **)((char *)&a23 + j));
  if (a15 < 0) {
    operator delete(__p);
  }
  for (uint64_t k = 32LL; k != -32; k -= 32LL)
    sub_100045348((uint64_t **)(v35 - 184 + k));
  for (uint64_t m = 32LL; m != -32; m -= 32LL)
    sub_100045348((uint64_t **)(v35 - 120 + m));
  sub_100046D80(&a16);
  _Unwind_Resume(a1);
}

void sub_100046598(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v10 = a5;
  char v9 = a6;
  uint64_t v6 = a1 + 8;
  v8[0] = a1;
  v8[1] = a2;
  void v8[2] = a3;
  void v8[3] = a4;
  v8[4] = &v10;
  v8[5] = &v9;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v7 = *(dispatch_queue_s **)(a1 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_100047180;
  block[3] = &unk_100127A30;
  block[4] = v6;
  block[5] = v8;
  dispatch_sync(v7, block);
}

void sub_10004663C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v11 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v12 = v11;
  __int128 v13 = v11;
  sub_10000C3E4((uint64_t)&v12, a4);
  *(std::chrono::system_clock::time_point *)&__int128 v13 = std::chrono::system_clock::now();
  *((void *)&v13 + 1) = 1000000 * a5;
  LOBYTE(v14) = a6;
  (*(void (**)(void, uint64_t, uint64_t, __int128 *))(**(void **)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  a2,  a3,  &v12);
  sub_1000041AC((uint64_t)&v12);
  sub_10000425C((uint64_t **)&v12 + 1, v12);
}

void sub_100046714( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
}

void sub_100046730(uint64_t a1, __int128 *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10000B8BC(&__p, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 __p = *a2;
    uint64_t v16 = *((void *)a2 + 2);
  }

  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000CF18(&v17, (void *)(a1 + 8));
  uint64_t v3 = operator new(0x20uLL);
  *uint64_t v3 = a1;
  uint64_t v4 = v3 + 1;
  if (SHIBYTE(v16) < 0)
  {
    sub_10000B8BC(v4, (void *)__p, *((unint64_t *)&__p + 1));
  }

  else
  {
    *(_OWORD *)uint64_t v4 = __p;
    v3[3] = v16;
  }

  __int128 v5 = *(dispatch_queue_s **)(a1 + 24);
  unint64_t v6 = v17;
  unint64_t v7 = v18;
  if (v18)
  {
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v8 = (unint64_t *)(v18 + 8);
    do
      unint64_t v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }

  uint64_t v10 = operator new(0x18uLL);
  *uint64_t v10 = v3;
  v10[1] = v6;
  v10[2] = v7;
  dispatch_async_f(v5, v10, (dispatch_function_t)sub_10004719C);
  __int128 v11 = (std::__shared_weak_count *)v18;
  if (v18)
  {
    __int128 v12 = (unint64_t *)(v18 + 8);
    do
      unint64_t v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  if (SHIBYTE(v16) < 0) {
    operator delete((void *)__p);
  }
}

void sub_10004689C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000468AC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (os_log_s *)qword_100131948;
  if (os_log_type_enabled((os_log_t)qword_100131948, OS_LOG_TYPE_DEBUG)) {
    sub_1000D835C(a2, v4);
  }
  return (*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 32) + 40LL))(*(void *)(a1 + 32), a2);
}

void sub_100046918(uint64_t a1)
{
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000CF18(&v12, (void *)(a1 + 8));
  uint64_t v2 = operator new(8uLL);
  void *v2 = a1;
  uint64_t v3 = *(dispatch_queue_s **)(a1 + 24);
  unint64_t v4 = v12;
  unint64_t v5 = v13;
  if (v13)
  {
    unint64_t v6 = (unint64_t *)(v13 + 8);
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }

  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v8 = operator new(0x18uLL);
  *std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v8 = v2;
  v8[1] = v4;
  void v8[2] = v5;
  dispatch_async_f(v3, v8, (dispatch_function_t)sub_1000471F8);
  unint64_t v9 = (std::__shared_weak_count *)v13;
  if (v13)
  {
    uint64_t v10 = (unint64_t *)(v13 + 8);
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

void sub_100046A10(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100046A20(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_100131948;
  if (os_log_type_enabled((os_log_t)qword_100131948, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)unint64_t v4 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "[StateCache] Invalidating all cache entries",  v4,  2u);
  }

  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 48LL))(*(void *)(a1 + 32));
}

void sub_100046AC8(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = a1;
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(dispatch_queue_s **)(a1 + 24);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000LL;
  void v5[2] = sub_100047240;
  _OWORD v5[3] = &unk_100127A50;
  v5[4] = v2;
  v5[5] = &v4;
  unint64_t v6 = v5;
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_10004724C;
  block[3] = &unk_100127A70;
  block[4] = a2;
  block[5] = &v6;
  dispatch_sync(v3, block);
}

void sub_100046B88(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  uint64_t v3 = *(void *)(a1 + 48);
  for (uint64_t i = *(void *)(a1 + 56); v3 != i; v3 += 16LL)
  {
    memset(v5, 170, sizeof(v5));
    (*(void (**)(__int128 **__return_ptr))(**(void **)v3 + 24LL))(v5);
    sub_1000472E8(v5[0], v5[1], a2);
    unint64_t v6 = v5;
    sub_100015E44((void ***)&v6);
  }

void sub_100046C44( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, void ***a13)
{
  a13 = &a10;
  sub_100015E44((void ***)&a13);
  sub_100015E44(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_100046C74(uint64_t a1)
{
  *(void *)a1 = off_1001278C8;
  uint64_t v2 = a1 + 8;
  uint64_t v4 = (void **)(a1 + 48);
  sub_1000100E4(&v4);
  sub_100007004(a1 + 32);
  sub_100022C54(v2);
  return a1;
}

void sub_100046CF8(char *a1)
{
  *(void *)a1 = off_1001278C8;
  uint64_t v2 = (uint64_t)(a1 + 8);
  uint64_t v3 = (void **)(a1 + 48);
  sub_1000100E4(&v3);
  sub_100007004((uint64_t)(a1 + 32));
  sub_100022C54(v2);
  operator delete(a1);
}

uint64_t **sub_100046D80(uint64_t **a1)
{
  if (*((_BYTE *)a1 + 40))
  {
    sub_1000041AC((uint64_t)a1);
    sub_10000425C(a1 + 1, *(unsigned __int8 *)a1);
  }

  return a1;
}

uint64_t *sub_100046DBC(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  void *v4 = &off_100127980;
  v4[1] = 0LL;
  void v4[2] = 0LL;
  v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2) {
    unint64_t v5 = (void *)(a2 + 8);
  }
  else {
    unint64_t v5 = 0LL;
  }
  sub_10000CCC8((uint64_t)a1, v5, a2);
  return a1;
}

void sub_100046E18(void *a1)
{
}

void sub_100046E38(_Unwind_Exception *a1)
{
}

void sub_100046E50(std::__shared_weak_count *a1)
{
}

void sub_100046E64(uint64_t a1)
{
}

uint64_t sub_100046E78(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

uint64_t sub_100046EB8(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

uint64_t sub_100046ECC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)(**(void **)(a1 + 40) + 32LL) + 56LL))( *(void *)(**(void **)(a1 + 40) + 32LL),  *(void *)(*(void *)(a1 + 40) + 8LL));
}

void sub_100046EE4(void **a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  uint64_t v3 = (char *)*a1 + 8;
  if (*v3)
  {
    uint64_t v4 = *v2;
    sub_100046F84((char **)(*v2 + 48), (uint64_t)v3);
    (*(void (**)(void))(**(void **)(*(void *)(v4 + 56) - 16LL) + 16LL))(*(void *)(*(void *)(v4 + 56) - 16LL));
  }

  sub_100007004((uint64_t)v3);
  operator delete(v2);
  sub_100007004((uint64_t)(a1 + 1));
  operator delete(a1);
}

void sub_100046F58(_Unwind_Exception *a1)
{
}

char *sub_100046F84(char **a1, uint64_t a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(char **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = (v7 - *a1) >> 4;
    uint64_t v10 = v5 - (void)*a1;
    uint64_t v11 = v10 >> 3;
    else {
      unint64_t v12 = v11;
    }
    uint64_t v26 = v4;
    unint64_t v13 = (char *)sub_1000047F4(v4, v12);
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v15 = &v13[16 * v9];
    *(_OWORD *)std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v15 = *(_OWORD *)a2;
    *(void *)a2 = 0LL;
    *(void *)(a2 + sub_100007004((uint64_t)v1 + 8) = 0LL;
    unint64_t v17 = *a1;
    uint64_t v16 = a1[1];
    if (v16 == *a1)
    {
      int64x2_t v20 = vdupq_n_s64((unint64_t)v16);
      unint64_t v18 = &v13[16 * v9];
    }

    else
    {
      unint64_t v18 = &v13[16 * v9];
      do
      {
        __int128 v19 = *((_OWORD *)v16 - 1);
        v16 -= 16;
        *((_OWORD *)v18 - 1) = v19;
        v18 -= 16;
        *(void *)uint64_t v16 = 0LL;
        *((void *)v16 + 1) = 0LL;
      }

      while (v16 != v17);
      int64x2_t v20 = *(int64x2_t *)a1;
    }

    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v8 = v15 + 16;
    *a1 = v18;
    a1[1] = v15 + 16;
    int64x2_t v24 = v20;
    unint64_t v21 = a1[2];
    a1[2] = &v13[16 * v14];
    __int128 v25 = v21;
    uint64_t v23 = v20.i64[0];
    sub_10003AAA8((uint64_t)&v23);
  }

  else
  {
    *(_OWORD *)unint64_t v7 = *(_OWORD *)a2;
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v8 = v7 + 16;
    *(void *)a2 = 0LL;
    *(void *)(a2 + sub_100007004((uint64_t)v1 + 8) = 0LL;
  }

  a1[1] = v8;
  return v8 - 16;
}

uint64_t **sub_1000470BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000459F8(**(void **)(a1 + 40), *(void *)(*(void *)(a1 + 40) + 8LL), a2);
}

void sub_1000470CC(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 40) + 16LL))(&v5);
  uint64_t v2 = *(void *)(a1 + 32);
  sub_1000041AC((uint64_t)&v5);
  char v3 = *(_BYTE *)v2;
  *(_BYTE *)uint64_t v2 = v5;
  LOBYTE(v5) = v3;
  uint64_t v4 = *(uint64_t **)(v2 + 8);
  *(void *)(v2 + sub_100007004((uint64_t)v1 + 8) = v6;
  unint64_t v6 = v4;
  sub_1000041AC(v2);
  sub_1000041AC((uint64_t)&v5);
  sub_10000425C(&v6, v5);
}

void sub_100047180(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  sub_10004663C( *(void *)v1,  *(void *)(v1 + 8),  *(void *)(v1 + 16),  *(void *)(v1 + 24),  **(void **)(v1 + 32),  **(_BYTE **)(v1 + 40));
}

void sub_10004719C(uint64_t **a1)
{
  uint64_t v2 = *a1;
  sub_1000468AC(**a1, *a1 + 1);
  operator delete(v2);
  sub_100007004((uint64_t)(a1 + 1));
  operator delete(a1);
}

void sub_1000471F8(uint64_t **a1)
{
  uint64_t v2 = (uint64_t)(a1 + 1);
  char v3 = *a1;
  sub_100046A20(**a1);
  operator delete(v3);
  sub_100007004(v2);
  operator delete(a1);
}

void sub_100047240(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_10004724C(uint64_t a1)
{
  (*(void (**)(__int128 *__return_ptr))(**(void **)(a1 + 40) + 16LL))(&v3);
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  sub_10002AD18(v2);
  *(_OWORD *)uint64_t v2 = v3;
  v2[2] = v4;
  __int128 v3 = 0uLL;
  uint64_t v4 = 0LL;
  uint64_t v5 = (void **)&v3;
  sub_100015E44(&v5);
}

__int128 *sub_1000472E8(__int128 *a1, __int128 *a2, uint64_t *a3)
{
  __int128 v3 = a1;
  unint64_t v6 = a3;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v4 = a2;
  do
  {
    sub_100047378(&v6, v3);
    __int128 v3 = (__int128 *)((char *)v3 + 24);
  }

  while (v3 != v4);
  return v4;
}

uint64_t **sub_100047378(uint64_t **a1, __int128 *a2)
{
  __int128 v3 = *a1;
  unint64_t v5 = (*a1)[1];
  unint64_t v4 = (*a1)[2];
  unint64_t v6 = *a1;
  if (v5 >= v4)
  {
    uint64_t v7 = sub_100038508(v6, a2);
  }

  else
  {
    sub_1000384AC(v6, a2);
    uint64_t v7 = v5 + 24;
  }

  v3[1] = v7;
  return a1;
}

void *sub_1000473C8(void *a1, uint64_t a2)
{
  uint64_t result = sub_10006E8B8(a1, a2);
  *uint64_t result = &off_100127AA0;
  return result;
}

void sub_1000473EC(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_100047400(uint64_t a1, char *a2, unsigned __int8 *a3)
{
  uint64_t v3 = v37[0];
  uint64_t v27 = v37[1];
  if (v37[0] != v37[1])
  {
    while ((*(char *)(v3 + 23) & 0x80000000) == 0)
    {
      unsigned int v4 = *(unsigned __int8 *)(v3 + 23);
      if (v4 <= 9)
      {
        unint64_t v5 = (unsigned __int8 *)v3;
        if (v4 != 5)
        {
          if (v4 != 6) {
            goto LABEL_55;
          }
          if (*(_DWORD *)v3 != 1684104552 || *(_WORD *)(v3 + 4) != 29285) {
            goto LABEL_55;
          }
          goto LABEL_66;
        }

        goto LABEL_45;
      }

      if (v4 == 10)
      {
        if (*(void *)v3 != 0x726F66736E617274LL || *(_WORD *)(v3 + 8) != 29549)
        {
LABEL_55:
          uint64_t v18 = *(void *)(a1 + 8);
          sub_10002BC40((uint64_t)v44, "message");
          unint64_t v45 = v44;
          char v46 = 1;
          std::operator+<char>(&v30, "Removing unrecognized key '", v3);
          __int128 v19 = std::string::append(&v30, "'");
          __int128 v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
          std::string::size_type cap = v19->__r_.__value_.__l.__cap_;
          *(_OWORD *)__int128 __p = v20;
          v19->__r_.__value_.__l.__size_ = 0LL;
          v19->__r_.__value_.__l.__cap_ = 0LL;
          v19->__r_.__value_.__r.__words[0] = 0LL;
          sub_100008E5C((uint64_t)v33, (uint64_t)__p);
          v47[0] = v33[0];
          v48[0] = v34;
          sub_1000041AC((uint64_t)v33);
          v33[0] = 0;
          uint64_t v34 = 0LL;
          sub_1000041AC((uint64_t)v47);
          v48[1] = v47;
          char v49 = 1;
          sub_10000BA40((uint64_t)v50, (uint64_t)v44, 2LL, 1, 2);
          v50[2] = (void **)v50;
          char v51 = 1;
          sub_10004A4C4((uint64_t)v38, "source");
          uint64_t v39 = v38;
          char v40 = 1;
          sub_10004A434((uint64_t)v28, "configSource");
          v41[0] = v28[0];
          v42[0] = v29;
          sub_1000041AC((uint64_t)v28);
          v28[0] = 0;
          char v29 = 0LL;
          sub_1000041AC((uint64_t)v41);
          v42[1] = v41;
          char v43 = 1;
          sub_10000BA40((uint64_t)v52, (uint64_t)v38, 2LL, 1, 2);
          char v53 = v52;
          char v54 = 1;
          sub_10000BA40((uint64_t)v35, (uint64_t)v50, 2LL, 0, 1);
          (*(void (**)(uint64_t, const char *, _BYTE *))(*(void *)v18 + 32LL))( v18,  "SyntaxCheckingConfigPass",  v35);
          sub_1000041AC((uint64_t)v35);
          sub_10000425C(&v36, v35[0]);
          for (uint64_t i = 0LL; i != -64; i -= 32LL)
          {
            sub_1000041AC((uint64_t)&v52[i]);
            sub_10000425C((uint64_t **)&v52[i + 8], v52[i]);
          }

          for (uint64_t j = 0LL; j != -8; j -= 4LL)
          {
            sub_1000041AC((uint64_t)&v41[j * 8]);
            sub_10000425C((uint64_t **)&v42[j], v41[j * 8]);
          }

          sub_1000041AC((uint64_t)v28);
          sub_10000425C(&v29, v28[0]);
          for (uint64_t k = 0LL; k != -8; k -= 4LL)
          {
            sub_1000041AC((uint64_t)&v47[k * 8]);
            sub_10000425C((uint64_t **)&v48[k], v47[k * 8]);
          }

          sub_1000041AC((uint64_t)v33);
          sub_10000425C(&v34, v33[0]);
          if (SHIBYTE(cap) < 0) {
            operator delete(__p[0]);
          }
          sub_100048324((uint64_t)a3, (const void **)v3);
          goto LABEL_66;
        }

LABEL_68:
        sub_100047AD0(a1, a2, a3);
        goto LABEL_66;
      }

      if (v4 != 22) {
        goto LABEL_55;
      }
      BOOL v12 = *(void *)v3 == 0x6C616E7265747865LL && *(void *)(v3 + 8) == 0x72756769666E6F43LL;
      if (!v12 || *(void *)(v3 + 14) != 0x736E6F6974617275LL) {
        goto LABEL_55;
      }
LABEL_66:
      v3 += 24LL;
      if (v3 == v27) {
        goto LABEL_69;
      }
    }

    uint64_t v7 = *(void *)(v3 + 8);
    if (v7 == 6)
    {
      if (**(_DWORD **)v3 == 1684104552 && *(_WORD *)(*(void *)v3 + 4LL) == 29285) {
        goto LABEL_66;
      }
      uint64_t v7 = *(void *)(v3 + 8);
    }

    else if (v7 == 10 && **(void **)v3 == 0x726F66736E617274LL && *(_WORD *)(*(void *)v3 + 8LL) == 29549)
    {
      goto LABEL_68;
    }

    if (v7 == 22)
    {
      if (**(void **)v3 == 0x6C616E7265747865LL
        && *(void *)(*(void *)v3 + 8LL) == 0x72756769666E6F43LL
        && *(void *)(*(void *)v3 + 14LL) == 0x736E6F6974617275LL)
      {
        goto LABEL_66;
      }

      uint64_t v7 = *(void *)(v3 + 8);
    }

    if (v7 != 5) {
      goto LABEL_55;
    }
    unint64_t v5 = *(unsigned __int8 **)v3;
LABEL_45:
    int v14 = *(_DWORD *)v5;
    int v15 = v5[4];
    if (v14 != 1802398067 || v15 != 115) {
      goto LABEL_55;
    }
    goto LABEL_66;
  }

LABEL_69:
  v50[0] = (void **)v37;
  sub_100015E44(v50);
}

  sub_1000041AC((uint64_t)&object);
  sub_10000425C(&v31, object);
  sub_1000041AC((uint64_t)&v34);
  sub_10000425C((uint64_t **)&v34 + 1, v34);
  if (SHIBYTE(v37) < 0) {
    operator delete(__p[0]);
  }
LABEL_71:
  xpc_release(v7);
}

void sub_100047940( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, void *__p, uint64_t a25, int a26, __int16 a27, char a28, char a29, char a30, uint64_t a31, char a32, uint64_t a33, char a34, uint64_t a35, uint64_t a36, char a37)
{
}

uint64_t sub_100047AD0(uint64_t a1, char *a2, unsigned __int8 *a3)
{
  uint64_t result = sub_10006E8D0(a1, (uint64_t)"SyntaxCheckingConfigPass", a2, (uint64_t)a3);
  if ((_DWORD)result)
  {
    uint64_t v7 = sub_100003F94(a3, "transforms");
    unint64_t v69 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v8 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v68[0] = v8;
    v68[1] = v8;
    uint64_t v9 = (unsigned __int8 **)sub_1000211B0(v68, (uint64_t)v7);
    sub_100021128(v9);
    unint64_t v67 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v10 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v66[0] = v10;
    v66[1] = v10;
    sub_1000211B0(v66, (uint64_t)v7);
    sub_1000211FC((unsigned __int8 **)v66);
    for (uint64_t result = sub_10001855C((unsigned __int8 **)v68, (unsigned __int8 **)v66);
          (result & 1) == 0;
          uint64_t result = sub_10001855C((unsigned __int8 **)v68, (unsigned __int8 **)v66))
    {
      uint64_t v11 = sub_100018150((unsigned __int8 **)v68);
      memset(&__p, 170, sizeof(__p));
      sub_100005064(&v70, "uuid");
      sub_100044F28("", (char *)v11, (const void **)&v70, &__p);
      if (SBYTE7(v71) < 0) {
        operator delete((void *)v70);
      }
      unint64_t v64 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&__int128 v12 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v63[0] = v12;
      v63[1] = v12;
      sub_1000184F4((uint64_t)v11, "type", (uint64_t)v63);
      v72[0] = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&__int128 v13 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
      __int128 v70 = v13;
      __int128 v71 = v13;
      int v14 = (unsigned __int8 **)sub_1000211B0(&v70, (uint64_t)v11);
      sub_1000211FC(v14);
      if (sub_10001855C((unsigned __int8 **)v63, (unsigned __int8 **)&v70))
      {
        sub_10000B990((uint64_t)&v70, (uint64_t)&__p);
        sub_10000BA40((uint64_t)v61, 0LL, 0LL, 0, 1);
        sub_10004846C(a1, a2, (uint64_t)&v70, (char *)v11, "Transform has no type", v61);
        sub_1000041AC((uint64_t)v61);
        int v15 = v61[0];
        uint64_t v16 = (uint64_t **)&v62;
      }

      else
      {
        char v28 = sub_100018150((unsigned __int8 **)v63);
        if (sub_100048798(v28, "aggregate"))
        {
          uint64_t v29 = sub_10000B990((uint64_t)&v70, (uint64_t)&__p);
          char v32 = sub_100048830(v29, v30, v31, v11);
          sub_1000041AC((uint64_t)&v70);
          sub_10000425C((uint64_t **)&v70 + 1, v70);
          if ((v32 & 1) != 0) {
            goto LABEL_10;
          }
          sub_10000B990((uint64_t)&v70, (uint64_t)&__p);
          sub_10000BA40((uint64_t)v59, 0LL, 0LL, 0, 1);
          sub_10004846C(a1, a2, (uint64_t)&v70, (char *)v11, "Aggregate syntax error", v59);
          sub_1000041AC((uint64_t)v59);
          int v15 = v59[0];
          uint64_t v16 = (uint64_t **)&v60;
        }

        else
        {
          char v33 = sub_100018150((unsigned __int8 **)v63);
          if (sub_100048798(v33, "identity"))
          {
            uint64_t v34 = sub_10000B990((uint64_t)&v70, (uint64_t)&__p);
            char v37 = sub_100048E94(v34, v35, v36, (uint64_t)v11);
            sub_1000041AC((uint64_t)&v70);
            sub_10000425C((uint64_t **)&v70 + 1, v70);
            if ((v37 & 1) != 0) {
              goto LABEL_10;
            }
            sub_10000B990((uint64_t)&v70, (uint64_t)&__p);
            sub_10000BA40((uint64_t)v57, 0LL, 0LL, 0, 1);
            sub_10004846C(a1, a2, (uint64_t)&v70, (char *)v11, "Identity syntax error", v57);
            sub_1000041AC((uint64_t)v57);
            int v15 = v57[0];
            uint64_t v16 = (uint64_t **)&v58;
          }

          else
          {
            char v38 = sub_100018150((unsigned __int8 **)v63);
            if (!sub_100048798(v38, "markov"))
            {
              sub_10000B990((uint64_t)v53, (uint64_t)&__p);
              sub_10000DDFC((uint64_t)&v70, "typeSeen");
              *(void *)&__int128 v71 = &v70;
              BYTE8(v71) = 1;
              char v43 = sub_100018150((unsigned __int8 **)v63);
              sub_10000C3E4((uint64_t)v72, (uint64_t)v43);
              v72[2] = v72;
              char v73 = 1;
              sub_10000BA40((uint64_t)v74, (uint64_t)&v70, 2LL, 1, 2);
              v75[1] = (uint64_t *)v74;
              char v76 = 1;
              sub_10000BA40((uint64_t)v51, (uint64_t)v74, 1LL, 1, 2);
              sub_10004846C(a1, a2, (uint64_t)v53, (char *)v11, "Transform type not supported", v51);
              sub_1000041AC((uint64_t)v51);
              sub_10000425C(&v52, v51[0]);
              sub_1000041AC((uint64_t)v74);
              sub_10000425C(v75, v74[0]);
              for (uint64_t i = 0LL; i != -8; i -= 4LL)
              {
                sub_1000041AC((uint64_t)&v72[i]);
                sub_10000425C((uint64_t **)&v72[i + 1], LOBYTE(v72[i]));
              }

              sub_1000041AC((uint64_t)v53);
              int v17 = v53[0];
              uint64_t v18 = (uint64_t **)&v54;
              goto LABEL_9;
            }

            uint64_t v39 = sub_10000B990((uint64_t)&v70, (uint64_t)&__p);
            BOOL v42 = sub_100049424(v39, v40, v41, v11);
            sub_1000041AC((uint64_t)&v70);
            sub_10000425C((uint64_t **)&v70 + 1, v70);
            if (v42) {
              goto LABEL_10;
            }
            sub_10000B990((uint64_t)&v70, (uint64_t)&__p);
            sub_10000BA40((uint64_t)v55, 0LL, 0LL, 0, 1);
            sub_10004846C(a1, a2, (uint64_t)&v70, (char *)v11, "Markov syntax error", v55);
            sub_1000041AC((uint64_t)v55);
            int v15 = v55[0];
            uint64_t v16 = (uint64_t **)&v56;
          }
        }
      }

      sub_10000425C(v16, v15);
      sub_1000041AC((uint64_t)&v70);
      int v17 = v70;
      uint64_t v18 = (uint64_t **)&v70 + 1;
LABEL_9:
      sub_10000425C(v18, v17);
      v49[0] = 4;
      char v50 = 0LL;
      sub_1000041AC((uint64_t)v49);
      sub_1000041AC((uint64_t)v49);
      __int128 v19 = sub_100003F94(v11, "_ca_transformEnabled");
      sub_1000041AC((uint64_t)v49);
      unsigned __int8 v20 = *(_BYTE *)v19;
      *(_BYTE *)__int128 v19 = v49[0];
      v49[0] = v20;
      unint64_t v21 = (uint64_t *)v19[1];
      v19[1] = (uint64_t)v50;
      char v50 = v21;
      sub_1000041AC((uint64_t)v19);
      sub_1000041AC((uint64_t)v49);
      sub_10000425C(&v50, v49[0]);
      v47[0] = 5;
      uint64_t v48 = 1LL;
      sub_1000041AC((uint64_t)v47);
      sub_1000041AC((uint64_t)v47);
      uint64_t v22 = sub_100003F94(v11, "_ca_transformEnabledPriority");
      sub_1000041AC((uint64_t)v47);
      unsigned __int8 v23 = *(_BYTE *)v22;
      *(_BYTE *)uint64_t v22 = v47[0];
      v47[0] = v23;
      int64x2_t v24 = (uint64_t *)v22[1];
      v22[1] = v48;
      uint64_t v48 = (uint64_t)v24;
      sub_1000041AC((uint64_t)v22);
      sub_1000041AC((uint64_t)v47);
      sub_10000425C((uint64_t **)&v48, v47[0]);
      *(void *)&__int128 v70 = "syntaxCheck";
      sub_10000E89C((uint64_t)v45, (char **)&v70);
      __int128 v25 = sub_100003F94(v11, "_ca_transformEnabledBy");
      sub_1000041AC((uint64_t)v45);
      char v26 = *(_BYTE *)v25;
      *(_BYTE *)__int128 v25 = v45[0];
      v45[0] = v26;
      uint64_t v27 = (uint64_t *)v25[1];
      v25[1] = (uint64_t)v46;
      char v46 = v27;
      sub_1000041AC((uint64_t)v25);
      sub_1000041AC((uint64_t)v45);
      sub_10000425C(&v46, v45[0]);
LABEL_10:
      sub_100018704((unsigned __int8 **)v68);
    }
  }

  return result;
}

void sub_1000481E4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, char a25, uint64_t a26, char a27, uint64_t a28, char a29, uint64_t a30, char a31, uint64_t a32, uint64_t *a33, uint64_t a34, char a35, uint64_t a36, char a37, uint64_t a38, char a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, void *__p, uint64_t a47, int a48, __int16 a49, char a50,char a51)
{
  if (a51 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100048324(uint64_t a1, const void **a2)
{
  if (*(_BYTE *)a1 != 1)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    unint64_t v5 = (char *)sub_10000528C((char *)a1);
    sub_100005064(&v8, v5);
    unint64_t v6 = std::string::insert(&v8, 0LL, "cannot use erase() with ");
    __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    std::string::size_type cap = v6->__r_.__value_.__l.__cap_;
    __int128 v9 = v7;
    v6->__r_.__value_.__l.__size_ = 0LL;
    v6->__r_.__value_.__l.__cap_ = 0LL;
    v6->__r_.__value_.__r.__words[0] = 0LL;
    sub_100005128(307, (uint64_t)&v9, exception);
  }

  return sub_10004A554(*(uint64_t ***)(a1 + 8), a2);
}

void sub_10004840C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }

  else if (!v22)
  {
    goto LABEL_8;
  }

  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_10004846C(uint64_t a1, char *a2, uint64_t a3, char *a4, char *a5, unsigned __int8 *a6)
{
  uint64_t v36 = a5;
  char v37 = a2;
  sub_10000E89C((uint64_t)v34, &v36);
  __int128 v10 = sub_100003F94(a6, "message");
  sub_1000041AC((uint64_t)v34);
  char v11 = *(_BYTE *)v10;
  *(_BYTE *)__int128 v10 = v34[0];
  v34[0] = v11;
  __int128 v12 = (uint64_t *)v10[1];
  v10[1] = (uint64_t)v35;
  uint64_t v35 = v12;
  sub_1000041AC((uint64_t)v10);
  sub_1000041AC((uint64_t)v34);
  sub_10000425C(&v35, v34[0]);
  sub_10000E89C((uint64_t)v32, &v37);
  __int128 v13 = sub_100003F94(a6, "source");
  sub_1000041AC((uint64_t)v32);
  char v14 = *(_BYTE *)v13;
  *(_BYTE *)__int128 v13 = v32[0];
  v32[0] = v14;
  int v15 = (uint64_t *)v13[1];
  v13[1] = (uint64_t)v33;
  char v33 = v15;
  sub_1000041AC((uint64_t)v13);
  sub_1000041AC((uint64_t)v32);
  sub_10000425C(&v33, v32[0]);
  sub_100005064(v27, "name");
  sub_100044F28("<unknown>", a4, (const void **)v27, &__p);
  sub_100008E5C((uint64_t)v30, (uint64_t)&__p);
  uint64_t v16 = sub_100003F94(a6, "transformName");
  sub_1000041AC((uint64_t)v30);
  char v17 = *(_BYTE *)v16;
  *(_BYTE *)uint64_t v16 = v30[0];
  v30[0] = v17;
  uint64_t v18 = (uint64_t *)v16[1];
  v16[1] = (uint64_t)v31;
  uint64_t v31 = v18;
  sub_1000041AC((uint64_t)v16);
  sub_1000041AC((uint64_t)v30);
  sub_10000425C(&v31, v30[0]);
  if (v28 < 0) {
    operator delete(v27[0]);
  }
  sub_10000C3E4((uint64_t)v25, a3);
  __int128 v19 = sub_100003F94(a6, "transformUuid");
  sub_1000041AC((uint64_t)v25);
  char v20 = *(_BYTE *)v19;
  *(_BYTE *)__int128 v19 = v25[0];
  v25[0] = v20;
  unint64_t v21 = (uint64_t *)v19[1];
  v19[1] = (uint64_t)v26;
  char v26 = v21;
  sub_1000041AC((uint64_t)v19);
  sub_1000041AC((uint64_t)v25);
  sub_10000425C(&v26, v25[0]);
  uint64_t v22 = *(void *)(a1 + 8);
  sub_10000C3E4((uint64_t)v23, (uint64_t)a6);
  (*(void (**)(uint64_t, const char *, _BYTE *))(*(void *)v22 + 40LL))(v22, "SyntaxCheckingConfigPass", v23);
  sub_1000041AC((uint64_t)v23);
  sub_10000425C(&v24, v23[0]);
}

void sub_100048718( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p, uint64_t a21, int a22, __int16 a23, char a24, char a25, char a26, uint64_t a27, char a28)
{
}

uint64_t sub_100048798(unsigned __int8 *a1, char *a2)
{
  __int128 v7 = a2;
  sub_10000E89C((uint64_t)v5, &v7);
  uint64_t v3 = sub_10002CE28(a1, v5);
  sub_1000041AC((uint64_t)v5);
  sub_10000425C(&v6, v5[0]);
  return v3;
}

void sub_100048824(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

uint64_t sub_100048830(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  char v37 = "inputs";
  unint64_t v43 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v41 = v5;
  __int128 v42 = v5;
  sub_100008780((uint64_t)a4, &v37, (uint64_t)&v41);
  __int128 v47 = (unint64_t)a4;
  __int128 v48 = 0uLL;
  unint64_t v49 = 0x8000000000000000LL;
  sub_100008AC8((unsigned __int8 **)&v47);
  if (!sub_1000087E8((unsigned __int8 **)&v41, (unsigned __int8 **)&v47)
    && *sub_10004A598((unsigned __int8 **)&v41) == 2)
  {
    unint64_t v6 = sub_10004A598((unsigned __int8 **)&v41);
    unint64_t v40 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v7 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)char v38 = v7;
    __int128 v39 = v7;
    sub_100008B44(v38, (uint64_t)v6);
    sub_100045378((unsigned __int8 **)v38);
    std::string v8 = sub_10004A598((unsigned __int8 **)&v41);
    unint64_t v36 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v9 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v35[0] = v9;
    v35[1] = v9;
    sub_100008B44(v35, (uint64_t)v8);
    sub_100008AC8((unsigned __int8 **)v35);
    if (sub_1000087E8((unsigned __int8 **)v38, (unsigned __int8 **)v35))
    {
LABEL_4:
      *(void *)&v35[0] = "outputs";
      unint64_t v49 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&__int128 v10 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
      __int128 v47 = v10;
      __int128 v48 = v10;
      sub_100008780((uint64_t)a4, (const std::string::value_type **)v35, (uint64_t)&v47);
      __p[0] = a4;
      __p[1] = 0LL;
      __int128 v45 = 0uLL;
      unint64_t v46 = 0x8000000000000000LL;
      sub_100008AC8((unsigned __int8 **)__p);
      if (!sub_1000087E8((unsigned __int8 **)&v47, (unsigned __int8 **)__p)
        && *sub_10004A598((unsigned __int8 **)&v47) == 2)
      {
        char v11 = sub_10004A598((unsigned __int8 **)&v47);
        unint64_t v43 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&__int128 v12 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
        __int128 v41 = v12;
        __int128 v42 = v12;
        sub_100008B44(&v41, (uint64_t)v11);
        sub_100045378((unsigned __int8 **)&v41);
        __int128 v13 = sub_10004A598((unsigned __int8 **)&v47);
        unint64_t v40 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&__int128 v14 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)char v38 = v14;
        __int128 v39 = v14;
        sub_100008B44(v38, (uint64_t)v13);
        sub_100008AC8((unsigned __int8 **)v38);
        if (sub_1000087E8((unsigned __int8 **)&v41, (unsigned __int8 **)v38))
        {
LABEL_11:
          *(void *)&v35[0] = "dimensions";
          unint64_t v49 = 0xAAAAAAAAAAAAAAAALL;
          *(void *)&__int128 v16 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
          __int128 v47 = v16;
          __int128 v48 = v16;
          sub_100008780((uint64_t)a4, (const std::string::value_type **)v35, (uint64_t)&v47);
          __p[0] = a4;
          __p[1] = 0LL;
          __int128 v45 = 0uLL;
          unint64_t v46 = 0x8000000000000000LL;
          sub_100008AC8((unsigned __int8 **)__p);
          if (!sub_1000087E8((unsigned __int8 **)&v47, (unsigned __int8 **)__p)
            && *sub_10004A598((unsigned __int8 **)&v47) == 2)
          {
            char v17 = sub_10004A598((unsigned __int8 **)&v47);
            unint64_t v43 = 0xAAAAAAAAAAAAAAAALL;
            *(void *)&__int128 v18 = 0xAAAAAAAAAAAAAAAALL;
            *((void *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
            __int128 v41 = v18;
            __int128 v42 = v18;
            sub_100008B44(&v41, (uint64_t)v17);
            sub_100045378((unsigned __int8 **)&v41);
            __int128 v19 = sub_10004A598((unsigned __int8 **)&v47);
            unint64_t v40 = 0xAAAAAAAAAAAAAAAALL;
            *(void *)&__int128 v20 = 0xAAAAAAAAAAAAAAAALL;
            *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
            *(_OWORD *)char v38 = v20;
            __int128 v39 = v20;
            sub_100008B44(v38, (uint64_t)v19);
            sub_100008AC8((unsigned __int8 **)v38);
            if (sub_1000087E8((unsigned __int8 **)&v41, (unsigned __int8 **)v38))
            {
LABEL_14:
              *(void *)&v35[0] = "measures";
              unint64_t v49 = 0xAAAAAAAAAAAAAAAALL;
              *(void *)&__int128 v21 = 0xAAAAAAAAAAAAAAAALL;
              *((void *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
              __int128 v47 = v21;
              __int128 v48 = v21;
              sub_100008780((uint64_t)a4, (const std::string::value_type **)v35, (uint64_t)&v47);
              __p[0] = a4;
              __p[1] = 0LL;
              __int128 v45 = 0uLL;
              unint64_t v46 = 0x8000000000000000LL;
              sub_100008AC8((unsigned __int8 **)__p);
              if (!sub_1000087E8((unsigned __int8 **)&v47, (unsigned __int8 **)__p)
                && *sub_10004A598((unsigned __int8 **)&v47) == 2)
              {
                uint64_t v22 = sub_10004A598((unsigned __int8 **)&v47);
                unint64_t v46 = 0xAAAAAAAAAAAAAAAALL;
                *(void *)&__int128 v23 = 0xAAAAAAAAAAAAAAAALL;
                *((void *)&v23 + 1) = 0xAAAAAAAAAAAAAAAALL;
                *(_OWORD *)std::string __p = v23;
                __int128 v45 = v23;
                sub_100008B44(__p, (uint64_t)v22);
                sub_100045378((unsigned __int8 **)__p);
                int64x2_t v24 = sub_10004A598((unsigned __int8 **)&v47);
                unint64_t v43 = 0xAAAAAAAAAAAAAAAALL;
                *(void *)&__int128 v25 = 0xAAAAAAAAAAAAAAAALL;
                *((void *)&v25 + 1) = 0xAAAAAAAAAAAAAAAALL;
                __int128 v41 = v25;
                __int128 v42 = v25;
                sub_100008B44(&v41, (uint64_t)v24);
                sub_100008AC8((unsigned __int8 **)&v41);
                while (1)
                {
                  uint64_t v31 = sub_100008924((unsigned __int8 **)__p);
                  if (!sub_10004A6EC((uint64_t)v31, "name")
                    || !sub_10004A6EC((uint64_t)v31, "type")
                    || !sub_10004A6EC((uint64_t)v31, "function"))
                  {
                    break;
                  }

                  char v32 = (unsigned __int8 *)sub_10004AA8C((uint64_t)v31, "function");
                  if (!sub_100048798(v32, "count"))
                  {
                    LOBYTE(v50) = sub_10004A6EC((uint64_t)v31, "field");
                    BYTE1(v50) = sub_10004A8D0((uint64_t)v31);
                    sub_10004A994(v38, &v50, 2LL);
                    BOOL v33 = sub_10004A864((uint64_t)v38);
                    if (v38[0])
                    {
                      operator delete(v38[0]);
                      if (!v33) {
                        return 0LL;
                      }
                    }

                    else if (!v33)
                    {
                      return 0LL;
                    }
                  }

                  sub_100018704((unsigned __int8 **)__p);
                  BOOL v34 = sub_1000087E8((unsigned __int8 **)__p, (unsigned __int8 **)&v41);
                  uint64_t result = 1LL;
                  if (v34) {
                    return result;
                  }
                }
              }
            }

            else
            {
              while (1)
              {
                uint64_t v29 = sub_100008924((unsigned __int8 **)&v41);
                LOBYTE(v50) = sub_10004A6EC((uint64_t)v29, "field");
                BYTE1(v50) = sub_10004A8D0((uint64_t)v29);
                sub_10004A994(__p, &v50, 2LL);
                BOOL v30 = sub_10004A864((uint64_t)__p);
                if (__p[0])
                {
                  operator delete(__p[0]);
                  if (!v30) {
                    return 0LL;
                  }
                }

                else if (!v30)
                {
                  return 0LL;
                }

                sub_100018704((unsigned __int8 **)&v41);
              }
            }
          }
        }

        else
        {
          while (1)
          {
            int v15 = sub_100008924((unsigned __int8 **)&v41);
            if (!sub_10004A6EC((uint64_t)v15, "event")
              && (!sub_10004A6EC((uint64_t)v15, "message") || !sub_10004A6EC((uint64_t)v15, "sink")))
            {
              break;
            }

            sub_100018704((unsigned __int8 **)&v41);
          }
        }
      }
    }

    else
    {
      while (1)
      {
        uint64_t v27 = sub_100008924((unsigned __int8 **)v38);
        char v50 = "transformation";
        unint64_t v49 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&__int128 v28 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v28 + 1) = 0xAAAAAAAAAAAAAAAALL;
        __int128 v47 = v28;
        __int128 v48 = v28;
        sub_100008780((uint64_t)v27, &v50, (uint64_t)&v47);
        __int128 v45 = 0uLL;
        __p[1] = 0LL;
        __p[0] = v27;
        unint64_t v46 = 0x8000000000000000LL;
        sub_100008AC8((unsigned __int8 **)__p);
        sub_100018704((unsigned __int8 **)v38);
      }
    }
  }

  return 0LL;
}

uint64_t sub_100048E94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v42 = "inputs";
  unint64_t v41 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v40[0] = v5;
  v40[1] = v5;
  sub_100008780(a4, &v42, (uint64_t)v40);
  __int128 v50 = (unint64_t)a4;
  __int128 v51 = 0uLL;
  unint64_t v52 = 0x8000000000000000LL;
  sub_100008AC8((unsigned __int8 **)&v50);
  unint64_t v6 = sub_10004A598((unsigned __int8 **)v40);
  unint64_t v39 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v38[0] = v7;
  v38[1] = v7;
  sub_100008B44(v38, (uint64_t)v6);
  sub_100045378((unsigned __int8 **)v38);
  std::string v8 = sub_10004A598((unsigned __int8 **)v40);
  unint64_t v37 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v9 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v36[0] = v9;
  v36[1] = v9;
  sub_100008B44(v36, (uint64_t)v8);
  sub_100008AC8((unsigned __int8 **)v36);
  while (!sub_1000087E8((unsigned __int8 **)v38, (unsigned __int8 **)v36))
  {
    __int128 v23 = sub_100008924((unsigned __int8 **)v38);
    if (!sub_10004A6EC((uint64_t)v23, "event")
      || !sub_10004A7A8((uint64_t)v23, "transformation")
      || !sub_10004A7A8((uint64_t)v23, "ignoreIf"))
    {
      return 0LL;
    }

    unint64_t v43 = "queryStates";
    unint64_t v52 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v24 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
    __int128 v50 = v24;
    __int128 v51 = v24;
    sub_100008780((uint64_t)v23, &v43, (uint64_t)&v50);
    __int128 v48 = 0uLL;
    __int128 v47 = (unint64_t)v23;
    unint64_t v49 = 0x8000000000000000LL;
    sub_100008AC8((unsigned __int8 **)&v47);
    if (!sub_1000087E8((unsigned __int8 **)&v50, (unsigned __int8 **)&v47))
    {
      __int128 v25 = sub_10004A598((unsigned __int8 **)&v50);
      unint64_t v46 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&__int128 v26 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v26 + 1) = 0xAAAAAAAAAAAAAAAALL;
      __int128 v44 = v26;
      __int128 v45 = v26;
      sub_100008B44(&v44, (uint64_t)v25);
      sub_100045378((unsigned __int8 **)&v44);
      uint64_t v27 = sub_10004A598((unsigned __int8 **)&v50);
      unint64_t v55 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&__int128 v28 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v28 + 1) = 0xAAAAAAAAAAAAAAAALL;
      __int128 v53 = v28;
      __int128 v54 = v28;
      uint64_t v29 = (unsigned __int8 **)sub_100008B44(&v53, (uint64_t)v27);
      sub_100008AC8(v29);
      while (!sub_1000087E8((unsigned __int8 **)&v44, (unsigned __int8 **)&v53))
      {
        BOOL v30 = sub_100008924((unsigned __int8 **)&v44);
        sub_100018704((unsigned __int8 **)&v44);
      }
    }

    sub_100018704((unsigned __int8 **)v38);
  }

  *(void *)&v40[0] = "outputs";
  unint64_t v52 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v50 = v10;
  __int128 v51 = v10;
  sub_100008780(a4, (const std::string::value_type **)v40, (uint64_t)&v50);
  __int128 v47 = (unint64_t)a4;
  __int128 v48 = 0uLL;
  unint64_t v49 = 0x8000000000000000LL;
  sub_100008AC8((unsigned __int8 **)&v47);
  if (sub_1000087E8((unsigned __int8 **)&v50, (unsigned __int8 **)&v47)
    || *sub_10004A598((unsigned __int8 **)&v50) != 2)
  {
    return 0LL;
  }

  char v11 = sub_10004A598((unsigned __int8 **)&v50);
  unint64_t v46 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v12 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v44 = v12;
  __int128 v45 = v12;
  sub_100008B44(&v44, (uint64_t)v11);
  sub_100045378((unsigned __int8 **)&v44);
  __int128 v13 = sub_10004A598((unsigned __int8 **)&v50);
  unint64_t v55 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v14 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v53 = v14;
  __int128 v54 = v14;
  int v15 = (unsigned __int8 **)sub_100008B44(&v53, (uint64_t)v13);
  sub_100008AC8(v15);
  while (!sub_1000087E8((unsigned __int8 **)&v44, (unsigned __int8 **)&v53))
  {
    __int128 v16 = sub_100008924((unsigned __int8 **)&v44);
    if (!sub_10004A6EC((uint64_t)v16, "event")
      && (!sub_10004A6EC((uint64_t)v16, "message") || !sub_10004A6EC((uint64_t)v16, "sink")))
    {
      return 0LL;
    }

    sub_100018704((unsigned __int8 **)&v44);
  }

  *(void *)&v38[0] = "outputs";
  unint64_t v52 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v17 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v50 = v17;
  __int128 v51 = v17;
  sub_100008780(a4, (const std::string::value_type **)v38, (uint64_t)&v50);
  __int128 v47 = (unint64_t)a4;
  __int128 v48 = 0uLL;
  unint64_t v49 = 0x8000000000000000LL;
  sub_100008AC8((unsigned __int8 **)&v47);
  if (sub_1000087E8((unsigned __int8 **)&v50, (unsigned __int8 **)&v47)
    || *sub_10004A598((unsigned __int8 **)&v50) != 2)
  {
    return 0LL;
  }

  __int128 v18 = sub_10004A598((unsigned __int8 **)&v50);
  unint64_t v49 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v19 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v47 = v19;
  __int128 v48 = v19;
  sub_100008B44(&v47, (uint64_t)v18);
  sub_100045378((unsigned __int8 **)&v47);
  __int128 v20 = sub_10004A598((unsigned __int8 **)&v50);
  unint64_t v46 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v21 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v44 = v21;
  __int128 v45 = v21;
  sub_100008B44(&v44, (uint64_t)v20);
  sub_100008AC8((unsigned __int8 **)&v44);
  if (!sub_1000087E8((unsigned __int8 **)&v47, (unsigned __int8 **)&v44))
  {
    while (1)
    {
      uint64_t v31 = sub_100008924((unsigned __int8 **)&v47);
      uint64_t v32 = 0LL;
      uint64_t v33 = 0LL;
      *(void *)&__int128 v53 = "event";
      *((void *)&v53 + 1) = "message";
      do
      {
        *(void *)&v40[0] = *(void *)((char *)&v53 + v32);
        if (*v31 == 1) {
          uint64_t v34 = sub_10004AC10(*((void *)v31 + 1), (const std::string::value_type **)v40);
        }
        else {
          uint64_t v34 = 0LL;
        }
        v33 += v34;
        v32 += 8LL;
      }

      while (v32 != 16);
      if (v33 != 1
        || !sub_10004A6EC((uint64_t)v31, "event")
        && (!sub_10004A6EC((uint64_t)v31, "message") || !sub_10004A6EC((uint64_t)v31, "sink")))
      {
        break;
      }

      BOOL v22 = sub_10004A7A8((uint64_t)v31, "transformation");
      if (v22)
      {
        sub_100018704((unsigned __int8 **)&v47);
      }

      return v22;
    }

    return 0LL;
  }

  return 1LL;
}

BOOL sub_100049424(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  *(void *)&v55[0] = "inputs";
  unint64_t v71 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v69 = v5;
  __int128 v70 = v5;
  sub_100008780((uint64_t)a4, (const std::string::value_type **)v55, (uint64_t)&v69);
  unint64_t v64 = a4;
  uint64_t v65 = 0LL;
  uint64_t v66 = 0LL;
  uint64_t v67 = 0LL;
  unint64_t v68 = 0x8000000000000000LL;
  sub_100008AC8(&v64);
  unint64_t v6 = sub_10004A598((unsigned __int8 **)&v69);
  unint64_t v63 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v61 = v7;
  __int128 v62 = v7;
  std::string v8 = (unsigned __int8 **)sub_100008B44(&v61, (uint64_t)v6);
  sub_100045378(v8);
  __int128 v9 = sub_10004A598((unsigned __int8 **)&v69);
  unint64_t v60 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v58 = v10;
  __int128 v59 = v10;
  sub_100008B44(&v58, (uint64_t)v9);
  sub_100008AC8((unsigned __int8 **)&v58);
  while (!sub_1000087E8((unsigned __int8 **)&v61, (unsigned __int8 **)&v58))
  {
    char v11 = sub_100008924((unsigned __int8 **)&v61);
    sub_100018704((unsigned __int8 **)&v61);
  }

  *(void *)&v55[0] = "states";
  unint64_t v71 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v12 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v69 = v12;
  __int128 v70 = v12;
  sub_100008780((uint64_t)a4, (const std::string::value_type **)v55, (uint64_t)&v69);
  unint64_t v64 = a4;
  uint64_t v65 = 0LL;
  uint64_t v66 = 0LL;
  uint64_t v67 = 0LL;
  unint64_t v68 = 0x8000000000000000LL;
  sub_100008AC8(&v64);
  __int128 v13 = sub_10004A598((unsigned __int8 **)&v69);
  unint64_t v63 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v14 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v61 = v14;
  __int128 v62 = v14;
  int v15 = (unsigned __int8 **)sub_100008B44(&v61, (uint64_t)v13);
  sub_100045378(v15);
  __int128 v16 = sub_10004A598((unsigned __int8 **)&v69);
  unint64_t v60 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v17 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v58 = v17;
  __int128 v59 = v17;
  sub_100008B44(&v58, (uint64_t)v16);
  sub_100008AC8((unsigned __int8 **)&v58);
  while (!sub_1000087E8((unsigned __int8 **)&v61, (unsigned __int8 **)&v58))
  {
    __int128 v18 = sub_100008924((unsigned __int8 **)&v61);
    sub_100018704((unsigned __int8 **)&v61);
  }

  unint64_t v49 = 0xAAAAAAAAAAAAAAAALL;
  __int128 v50 = "edges";
  *(void *)&__int128 v19 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v48[0] = v19;
  v48[1] = v19;
  sub_100008780((uint64_t)a4, &v50, (uint64_t)v48);
  __int128 v69 = (unint64_t)a4;
  __int128 v70 = 0uLL;
  unint64_t v71 = 0x8000000000000000LL;
  sub_100008AC8((unsigned __int8 **)&v69);
  __int128 v20 = sub_10004A598((unsigned __int8 **)v48);
  unint64_t v47 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v21 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v46[0] = v21;
  v46[1] = v21;
  sub_100008B44(v46, (uint64_t)v20);
  sub_100045378((unsigned __int8 **)v46);
  BOOL v22 = sub_10004A598((unsigned __int8 **)v48);
  unint64_t v45 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v23 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v23 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v44[0] = v23;
  v44[1] = v23;
  sub_100008B44(v44, (uint64_t)v22);
  sub_100008AC8((unsigned __int8 **)v44);
  do
  {
    __int128 v25 = sub_100008924((unsigned __int8 **)v46);
    BOOL result = sub_10004AD34((uint64_t)v25, "startingState");
    if (!result) {
      break;
    }
    BOOL result = sub_10004AD34((uint64_t)v25, "targetState");
    if (!result) {
      break;
    }
    BOOL result = sub_10004AD34((uint64_t)v25, "event");
    if (!result) {
      break;
    }
    unint64_t v56 = 0xAAAAAAAAAAAAAAAALL;
    __int128 v57 = "actions";
    *(void *)&__int128 v26 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v26 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v55[0] = v26;
    v55[1] = v26;
    sub_100008780((uint64_t)v25, &v57, (uint64_t)v55);
    __int128 v70 = 0uLL;
    __int128 v69 = (unint64_t)v25;
    unint64_t v71 = 0x8000000000000000LL;
    sub_100008AC8((unsigned __int8 **)&v69);
    if (!sub_1000087E8((unsigned __int8 **)v55, (unsigned __int8 **)&v69))
    {
      uint64_t v27 = sub_10004A598((unsigned __int8 **)v55);
      unint64_t v54 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&__int128 v28 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v28 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v53[0] = v28;
      v53[1] = v28;
      sub_100008B44(v53, (uint64_t)v27);
      sub_100045378((unsigned __int8 **)v53);
      uint64_t v29 = sub_10004A598((unsigned __int8 **)v55);
      unint64_t v52 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&__int128 v30 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v30 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v51[0] = v30;
      v51[1] = v30;
      sub_100008B44(v51, (uint64_t)v29);
      sub_100008AC8((unsigned __int8 **)v51);
      while (!sub_1000087E8((unsigned __int8 **)v53, (unsigned __int8 **)v51))
      {
        uint64_t v32 = sub_100008924((unsigned __int8 **)v53);
        uint64_t v33 = v32;
        uint64_t v34 = (unsigned __int8 *)sub_10004AA8C((uint64_t)v33, "action");
        if (sub_100048798(v34, "sendEvent"))
        {
          unint64_t v71 = 0xAAAAAAAAAAAAAAAALL;
          uint64_t v72 = "fields";
          *(void *)&__int128 v35 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v35 + 1) = 0xAAAAAAAAAAAAAAAALL;
          __int128 v69 = v35;
          __int128 v70 = v35;
          sub_100008780((uint64_t)v33, &v72, (uint64_t)&v69);
          uint64_t v66 = 0LL;
          uint64_t v67 = 0LL;
          uint64_t v65 = 0LL;
          unint64_t v64 = v33;
          unint64_t v68 = 0x8000000000000000LL;
          sub_100008AC8(&v64);
          unint64_t v36 = sub_10004A598((unsigned __int8 **)&v69);
          unint64_t v63 = 0xAAAAAAAAAAAAAAAALL;
          *(void *)&__int128 v37 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v37 + 1) = 0xAAAAAAAAAAAAAAAALL;
          __int128 v61 = v37;
          __int128 v62 = v37;
          char v38 = (unsigned __int8 **)sub_100008B44(&v61, (uint64_t)v36);
          sub_100045378(v38);
          unint64_t v39 = sub_10004A598((unsigned __int8 **)&v69);
          unint64_t v60 = 0xAAAAAAAAAAAAAAAALL;
          *(void *)&__int128 v40 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v40 + 1) = 0xAAAAAAAAAAAAAAAALL;
          __int128 v58 = v40;
          __int128 v59 = v40;
          sub_100008B44(&v58, (uint64_t)v39);
          sub_100008AC8((unsigned __int8 **)&v58);
          for (BOOL i = sub_1000087E8((unsigned __int8 **)&v61, (unsigned __int8 **)&v58);
                !i;
                BOOL i = sub_1000087E8((unsigned __int8 **)&v61, (unsigned __int8 **)&v58))
          {
            __int128 v42 = sub_100008924((unsigned __int8 **)&v61);
            if (!sub_10004A6EC((uint64_t)v42, "name")
              || !sub_10004A6EC((uint64_t)v42, "type")
              || !sub_10004A7A8((uint64_t)v42, "expression"))
            {
              return 0LL;
            }

            sub_100018704((unsigned __int8 **)&v61);
          }
        }

        else
        {
          unint64_t v43 = (unsigned __int8 *)sub_10004AA8C((uint64_t)v33, "action");
        }

        sub_100018704((unsigned __int8 **)v53);
      }
    }

    sub_100018704((unsigned __int8 **)v46);
    BOOL v31 = sub_1000087E8((unsigned __int8 **)v46, (unsigned __int8 **)v44);
    BOOL result = 1LL;
  }

  while (!v31);
  return result;
}

void sub_100049A8C(uint64_t a1@<X0>, void *a2@<X8>)
{
  a2[2] = 0LL;
  a2[1] = 0LL;
  *a2 = a2 + 1;
  sub_100049AD4(a1, (uint64_t)a2);
}

void sub_100049ABC(_Unwind_Exception *a1)
{
}

void sub_100049AD4(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)a1 != 1)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    std::string v8 = (char *)sub_10000528C((char *)a1);
    sub_100005064(&v11, v8);
    __int128 v9 = std::string::insert(&v11, 0LL, "type must be object, but is ");
    __int128 v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    std::string::size_type cap = v9->__r_.__value_.__l.__cap_;
    __int128 v12 = v10;
    v9->__r_.__value_.__l.__size_ = 0LL;
    v9->__r_.__value_.__l.__cap_ = 0LL;
    v9->__r_.__value_.__r.__words[0] = 0LL;
    sub_100005128(302, (uint64_t)&v12, exception);
  }

  *((void *)&v12 + 1) = 0LL;
  std::string::size_type cap = 0LL;
  *(void *)&__int128 v12 = (char *)&v12 + 8;
  sub_100049C9C(**(__int128 ***)(a1 + 8), (__int128 *)(*(void *)(a1 + 8) + 8LL), (uint64_t)&v12, (uint64_t)&v12 + 8);
  uint64_t v4 = a2 + 8;
  sub_100004D00(a2, *(char **)(a2 + 8));
  uint64_t v5 = *((void *)&v12 + 1);
  *(void *)a2 = v12;
  *(void *)(a2 + sub_100007004((uint64_t)v1 + 8) = v5;
  std::string::size_type v6 = cap;
  *(void *)(a2 + 16) = cap;
  if (v6)
  {
    *(void *)(v5 + 16) = v4;
    *(void *)&__int128 v12 = (char *)&v12 + 8;
    *((void *)&v12 + 1) = 0LL;
    std::string::size_type cap = 0LL;
    uint64_t v5 = 0LL;
  }

  else
  {
    *(void *)a2 = v4;
  }

  sub_100004D00((uint64_t)&v12, (char *)v5);
}

void sub_100049C28( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, char *a17, int a18, __int16 a19, char a20, char a21)
{
}

uint64_t sub_100049C9C(__int128 *a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  v14[0] = a3;
  v14[1] = a4;
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      sub_10000C3E4((uint64_t)v15, (uint64_t)v5 + 56);
      sub_100049E58(__p, v5 + 2, (uint64_t)v15);
      sub_1000041AC((uint64_t)v15);
      sub_10000425C(&v16, v15[0]);
      sub_100049DF0((uint64_t)v14, (const void **)__p);
      sub_1000041AC((uint64_t)v12);
      sub_10000425C(&v13, v12[0]);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
      std::string::size_type v6 = (__int128 *)*((void *)v5 + 1);
      if (v6)
      {
        do
        {
          __int128 v7 = v6;
          std::string::size_type v6 = *(__int128 **)v6;
        }

        while (v6);
      }

      else
      {
        do
        {
          __int128 v7 = (__int128 *)*((void *)v5 + 2);
          BOOL v8 = *(void *)v7 == (void)v5;
          uint64_t v5 = v7;
        }

        while (!v8);
      }

      uint64_t v5 = v7;
    }

    while (v7 != a2);
    return v14[0];
  }

  return a3;
}

void sub_100049DC4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100049DF0(uint64_t a1, const void **a2)
{
  uint64_t v3 = sub_100049EDC(*(uint64_t ***)a1, *(uint64_t **)(a1 + 8), a2, (__int128 *)a2);
  *(void *)(a1 + sub_100007004((uint64_t)v1 + 8) = v3;
  uint64_t v4 = (uint64_t *)v3[1];
  if (v4)
  {
    do
    {
      uint64_t v5 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }

    while (v4);
  }

  else
  {
    do
    {
      uint64_t v5 = (uint64_t *)v3[2];
      BOOL v6 = *v5 == (void)v3;
      uint64_t v3 = v5;
    }

    while (!v6);
  }

  *(void *)(a1 + sub_100007004((uint64_t)v1 + 8) = v5;
  return a1;
}

void *sub_100049E58(void *__dst, __int128 *a2, uint64_t a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10000B8BC(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v5 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)__int128 __dst = v5;
  }

  *((_BYTE *)__dst + 24) = *(_BYTE *)a3;
  __dst[4] = *(void *)(a3 + 8);
  sub_1000041AC(a3);
  *(_BYTE *)a3 = 0;
  *(void *)(a3 + sub_100007004((uint64_t)v1 + 8) = 0LL;
  sub_1000041AC((uint64_t)(__dst + 3));
  return __dst;
}

uint64_t *sub_100049EDC(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  uint64_t v8 = 0xAAAAAAAAAAAAAAAALL;
  __int128 v9 = (const void **)0xAAAAAAAAAAAAAAAALL;
  BOOL v6 = (uint64_t **)sub_10000C664(a1, a2, &v9, &v8, a3);
  BOOL result = *v6;
  if (!*v6)
  {
    memset(v10, 170, sizeof(v10));
    sub_100049F94((uint64_t)a1, a4, v10);
    sub_1000054D0(a1, (uint64_t)v9, v6, v10[0]);
    return v10[0];
  }

  return result;
}

void *sub_100049F94@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  memset(a3, 170, 24);
  BOOL v6 = operator new(0x48uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  BOOL result = sub_10004A024(v6 + 4, a2);
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_10004A008(_Unwind_Exception *a1)
{
  void *v1 = 0LL;
  sub_10000C098(v2, v3);
  _Unwind_Resume(a1);
}

void *sub_10004A024(void *__dst, __int128 *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10000B8BC(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)__int128 __dst = v4;
  }

  char v6 = *((_BYTE *)a2 + 24);
  uint64_t v5 = (uint64_t)a2 + 24;
  *((_BYTE *)__dst + 24) = v6;
  __dst[4] = *(void *)(v5 + 8);
  sub_1000041AC(v5);
  *(_BYTE *)uint64_t v5 = 0;
  *(void *)(v5 + sub_100007004((uint64_t)v1 + 8) = 0LL;
  sub_1000041AC((uint64_t)(__dst + 3));
  return __dst;
}

uint64_t sub_10004A0A4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  uint64_t result = sub_10004A1A8(a2, a1[2]);
  __int128 v7 = (void *)*a1;
  uint64_t v5 = a1 + 1;
  char v6 = v7;
  if (v7 != v5)
  {
    unint64_t v8 = a2[1];
    do
    {
      __int128 v9 = (__int128 *)(v6 + 4);
      if (v8 >= a2[2])
      {
        uint64_t result = sub_10004A2E0(a2, v9);
        unint64_t v8 = result;
      }

      else
      {
        uint64_t result = (uint64_t)sub_10004A284(a2, v9);
        v8 += 24LL;
      }

      a2[1] = v8;
      __int128 v10 = (void *)v6[1];
      if (v10)
      {
        do
        {
          char v11 = v10;
          __int128 v10 = (void *)*v10;
        }

        while (v10);
      }

      else
      {
        do
        {
          char v11 = (void *)v6[2];
          BOOL v12 = *v11 == (void)v6;
          char v6 = v11;
        }

        while (!v12);
      }

      char v6 = v11;
    }

    while (v11 != v5);
  }

  return result;
}

void sub_10004A18C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t sub_10004A1A8(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_1000046F8();
    }
    uint64_t v5 = a1[1] - *a1;
    void v7[4] = result;
    v7[0] = sub_1000171F0(result, a2);
    v7[1] = v7[0] + v5;
    void v7[2] = v7[0] + v5;
    void v7[3] = v7[0] + 24 * v6;
    sub_10001717C(a1, v7);
    return sub_100017378((uint64_t)v7);
  }

  return result;
}

void sub_10004A270( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_10004A284(void *result, __int128 *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = result[1];
  if (*((char *)a2 + 23) < 0)
  {
    uint64_t result = sub_10000B8BC((_BYTE *)result[1], *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v4 = *a2;
    *(void *)(v3 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }

  v2[1] = v3 + 24;
  return result;
}

void sub_10004A2D8(_Unwind_Exception *a1)
{
  *(void *)(v1 + sub_100007004((uint64_t)v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_10004A2E0(uint64_t *a1, __int128 *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_1000046F8();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555LL) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  __int128 v18 = a1 + 2;
  if (v9) {
    __int128 v10 = (char *)sub_1000171F0(v7, v9);
  }
  else {
    __int128 v10 = 0LL;
  }
  char v11 = &v10[24 * v4];
  v15[0] = v10;
  v15[1] = v11;
  __int128 v16 = v11;
  __int128 v17 = &v10[24 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    sub_10000B8BC(v11, *(void **)a2, *((void *)a2 + 1));
    char v11 = v16;
  }

  else
  {
    __int128 v12 = *a2;
    *((void *)v11 + 2) = *((void *)a2 + 2);
    *(_OWORD *)char v11 = v12;
  }

  __int128 v16 = v11 + 24;
  sub_10001717C(a1, v15);
  uint64_t v13 = a1[1];
  sub_100017378((uint64_t)v15);
  return v13;
}

void sub_10004A420( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10004A434(uint64_t a1, char *a2)
{
  *(void *)(a1 + sub_100007004((uint64_t)v1 + 8) = 0LL;
  *(_BYTE *)a1 = 3;
  *(void *)(a1 + sub_100007004((uint64_t)v1 + 8) = sub_10004A47C(a2);
  sub_1000041AC(a1);
  sub_1000041AC(a1);
  return a1;
}

void *sub_10004A47C(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  sub_100005064(v2, a1);
  return v2;
}

void sub_10004A4B0(_Unwind_Exception *a1)
{
}

uint64_t sub_10004A4C4(uint64_t a1, char *a2)
{
  *(void *)(a1 + sub_100007004((uint64_t)v1 + 8) = 0LL;
  *(_BYTE *)a1 = 3;
  *(void *)(a1 + sub_100007004((uint64_t)v1 + 8) = sub_10004A50C(a2);
  sub_1000041AC(a1);
  sub_1000041AC(a1);
  return a1;
}

void *sub_10004A50C(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  sub_100005064(v2, a1);
  return v2;
}

void sub_10004A540(_Unwind_Exception *a1)
{
}

uint64_t sub_10004A554(uint64_t **a1, const void **a2)
{
  uint64_t v3 = (uint64_t *)sub_10003CF38((uint64_t)a1, a2);
  sub_10001D924(a1, v3);
  return 1LL;
}

unsigned __int8 *sub_10004A598(unsigned __int8 **a1)
{
  uint64_t result = *a1;
  if (!result) {
    sub_1000D7628();
  }
  int v3 = *result;
  if (v3 == 2)
  {
    unint64_t v5 = *(unsigned __int8 **)(*((void *)result + 1) + 8LL);
    uint64_t result = a1[2];
    if (result == v5) {
      sub_1000D7678();
    }
  }

  else if (v3 == 1)
  {
    unint64_t v4 = a1[1];
    return v4 + 56;
  }

  else if (a1[4])
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    sub_100005064(v7, "cannot get value");
    sub_100008C0C(214, (uint64_t)v7, exception);
  }

  return result;
}

void sub_10004A6AC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }

  else if (!v15)
  {
    goto LABEL_6;
  }

  __cxa_free_exception(v14);
  goto LABEL_6;
}

BOOL sub_10004A6EC(uint64_t a1, const std::string::value_type *a2)
{
  __int128 v10 = a2;
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v8[0] = v3;
  v8[1] = v3;
  sub_100008780(a1, &v10, (uint64_t)v8);
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v6[0] = v4;
  v6[1] = v4;
  sub_100008B44(v6, a1);
  sub_100008AC8((unsigned __int8 **)v6);
  return !sub_1000087E8((unsigned __int8 **)v8, (unsigned __int8 **)v6) && *sub_10004A598((unsigned __int8 **)v8) == 3;
}

BOOL sub_10004A7A8(uint64_t a1, const std::string::value_type *a2)
{
  __int128 v10 = a2;
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v8[0] = v3;
  v8[1] = v3;
  sub_100008780(a1, &v10, (uint64_t)v8);
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v6[0] = v4;
  v6[1] = v4;
  sub_100008B44(v6, a1);
  sub_100008AC8((unsigned __int8 **)v6);
  return sub_1000087E8((unsigned __int8 **)v8, (unsigned __int8 **)v6) || *sub_10004A598((unsigned __int8 **)v8) == 2;
}

BOOL sub_10004A864(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  int v2 = v1 & 0x3F;
  if (v1 <= 0x3F && v2 == 0) {
    return 0LL;
  }
  int v4 = 0;
  uint64_t v5 = 0LL;
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(void *)a1 + 8 * (v1 >> 6);
  do
  {
    v5 += (*v6 >> v4) & 1LL;
    v6 += v4 == 63;
    if (v4 == 63) {
      int v4 = 0;
    }
    else {
      ++v4;
    }
  }

  while (v4 != v2 || v6 != (void *)v7);
  return v5 == 1;
}

BOOL sub_10004A8D0(uint64_t a1)
{
  unint64_t v9 = "expression";
  unint64_t v8 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v7[0] = v2;
  v7[1] = v2;
  sub_100008780(a1, &v9, (uint64_t)v7);
  unint64_t v6 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v5[0] = v3;
  v5[1] = v3;
  sub_100008B44(v5, a1);
  sub_100008AC8((unsigned __int8 **)v5);
  return !sub_1000087E8((unsigned __int8 **)v7, (unsigned __int8 **)v5) && *sub_10004A598((unsigned __int8 **)v7) == 2;
}

void *sub_10004A994(void *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a3)
  {
    sub_10001C2A0(a1, a3);
    sub_10004A9F0(a1, a2, &a2[a3], a3);
  }

  return a1;
}

void *sub_10004A9F0(void *result, _BYTE *a2, _BYTE *a3, uint64_t a4)
{
  unint64_t v4 = result[1];
  unint64_t v5 = v4 + a4;
  result[1] = v4 + a4;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41) {
      unint64_t v6 = (v5 - 1) >> 6;
    }
    else {
      unint64_t v6 = 0LL;
    }
    *(void *)(*result + 8 * v6) = 0LL;
  }

  if (a2 != a3)
  {
    int v7 = v4 & 0x3F;
    unint64_t v8 = (uint64_t *)(*result + 8 * (v4 >> 6));
    do
    {
      uint64_t v9 = 1LL << v7;
      if (*a2) {
        uint64_t v10 = *v8 | v9;
      }
      else {
        uint64_t v10 = *v8 & ~v9;
      }
      *unint64_t v8 = v10;
      ++a2;
      v8 += v7 == 63;
      if (v7 == 63) {
        int v7 = 0;
      }
      else {
        ++v7;
      }
    }

    while (a2 != a3);
  }

  return result;
}

uint64_t sub_10004AA8C(uint64_t a1, const std::string::value_type *a2)
{
  __int128 v12 = a2;
  if (*(_BYTE *)a1 != 1)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    unint64_t v6 = (char *)sub_10000528C((char *)a1);
    sub_100005064(&v9, v6);
    int v7 = std::string::insert(&v9, 0LL, "cannot use operator[] with a string argument with ");
    __int128 v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    std::string::size_type cap = v7->__r_.__value_.__l.__cap_;
    __int128 v10 = v8;
    v7->__r_.__value_.__l.__size_ = 0LL;
    v7->__r_.__value_.__l.__cap_ = 0LL;
    v7->__r_.__value_.__r.__words[0] = 0LL;
    sub_100005128(305, (uint64_t)&v10, exception);
  }

  __int128 v3 = (uint64_t *)(a1 + 8);
  if (*(void *)(a1 + 8) + 8LL == sub_100008B90(*(void *)(a1 + 8), &v12)) {
    sub_1000D83E0();
  }
  return sub_100008B90(*v3, &v12) + 56;
}

void sub_10004ABA8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }

  else if (!v22)
  {
    goto LABEL_8;
  }

  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t sub_10004AC10(uint64_t a1, const std::string::value_type **a2)
{
  __int128 v2 = (void *)(a1 + 8);
  __int128 v3 = *(uint64_t **)(a1 + 8);
  if (!v3) {
    return 0LL;
  }
  while (std::string::compare((const std::string *)(v3 + 4), *a2) > 0)
  {
    __int128 v2 = v3;
LABEL_6:
    __int128 v3 = (uint64_t *)*v3;
    if (!v3) {
      return 0LL;
    }
  }

  if (std::string::compare((const std::string *)(v3 + 4), *a2) < 0)
  {
    ++v3;
    goto LABEL_6;
  }

  uint64_t v6 = *v3;
  int v7 = v3;
  if (*v3)
  {
    int v7 = v3;
    do
    {
      int v8 = std::string::compare((const std::string *)(v6 + 32), *a2);
      std::string v9 = (uint64_t *)(v6 + 8);
      if (v8 >= 0)
      {
        std::string v9 = (uint64_t *)v6;
        int v7 = (void *)v6;
      }

      uint64_t v6 = *v9;
    }

    while (*v9);
  }

  uint64_t v10 = v3[1];
  if (v10)
  {
    do
    {
      int v11 = std::string::compare((const std::string *)(v10 + 32), *a2);
      __int128 v12 = (uint64_t *)(v10 + 8);
      if (v11 > 0)
      {
        __int128 v12 = (uint64_t *)v10;
        __int128 v2 = (void *)v10;
      }

      uint64_t v10 = *v12;
    }

    while (*v12);
  }

  if (v7 == v2) {
    return 0LL;
  }
  uint64_t result = 0LL;
  do
  {
    uint64_t v13 = (void *)v7[1];
    if (v13)
    {
      do
      {
        __int128 v14 = v13;
        uint64_t v13 = (void *)*v13;
      }

      while (v13);
    }

    else
    {
      do
      {
        __int128 v14 = (void *)v7[2];
        BOOL v15 = *v14 == (void)v7;
        int v7 = v14;
      }

      while (!v15);
    }

    ++result;
    int v7 = v14;
  }

  while (v14 != v2);
  return result;
}

BOOL sub_10004AD34(uint64_t a1, const std::string::value_type *a2)
{
  uint64_t v10 = a2;
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v8[0] = v3;
  v8[1] = v3;
  sub_100008780(a1, &v10, (uint64_t)v8);
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v6[0] = v4;
  v6[1] = v4;
  sub_100008B44(v6, a1);
  sub_100008AC8((unsigned __int8 **)v6);
  return *sub_10004A598((unsigned __int8 **)v8) == 0;
}

void sub_10004B058( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_10004B0F8(id a1, BPSCompletion *a2)
{
  __int128 v2 = a2;
  id v3 = -[BPSCompletion state](v2, "state");
  __int128 v4 = (os_log_s *)qword_1001318E8;
  if (v3)
  {
    unint64_t v5 = (os_log_s *)(id)qword_1001318E8;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(-[BPSCompletion error](v2, "error"));
      id v7 = objc_claimAutoreleasedReturnValue([v6 description]);
      int v8 = 136315138;
      id v9 = [v7 UTF8String];
      _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "HighEngagementDevices Error: %s\n",  (uint8_t *)&v8,  0xCu);
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_INFO))
  {
    LOWORD(vsub_100007004((uint64_t)v1 + 8) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "HighEngagementDevices Complete\n\n",  (uint8_t *)&v8,  2u);
  }
}

void sub_10004B228(_Unwind_Exception *a1)
{
  unint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_10004B268(uint64_t a1, void *a2)
{
  id v23 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v23 eventBody]);
  uint64_t v4 = objc_claimAutoreleasedReturnValue([v3 topCategory1]);
  unint64_t v5 = (void *)v4;
  if (v4) {
    uint64_t v6 = (const __CFString *)v4;
  }
  else {
    uint64_t v6 = &stru_10012E768;
  }
  [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:@"TopCategory1"];

  id v7 = (void *)objc_claimAutoreleasedReturnValue([v23 eventBody]);
  uint64_t v8 = objc_claimAutoreleasedReturnValue([v7 topCategory2]);
  id v9 = (void *)v8;
  if (v8) {
    uint64_t v10 = (const __CFString *)v8;
  }
  else {
    uint64_t v10 = &stru_10012E768;
  }
  [*(id *)(a1 + 32) setObject:v10 forKeyedSubscript:@"TopCategory2"];

  int v11 = (void *)objc_claimAutoreleasedReturnValue([v23 eventBody]);
  uint64_t v12 = objc_claimAutoreleasedReturnValue([v11 topCategory3]);
  uint64_t v13 = (void *)v12;
  if (v12) {
    __int128 v14 = (const __CFString *)v12;
  }
  else {
    __int128 v14 = &stru_10012E768;
  }
  [*(id *)(a1 + 32) setObject:v14 forKeyedSubscript:@"TopCategory3"];

  BOOL v15 = (void *)objc_claimAutoreleasedReturnValue([v23 eventBody]);
  uint64_t v16 = objc_claimAutoreleasedReturnValue([v15 highEngagementCategory1]);
  __int128 v17 = (void *)v16;
  if (v16) {
    __int128 v18 = (const __CFString *)v16;
  }
  else {
    __int128 v18 = &stru_10012E768;
  }
  [*(id *)(a1 + 32) setObject:v18 forKeyedSubscript:@"HighEngagementCategory1"];

  __int128 v19 = (void *)objc_claimAutoreleasedReturnValue([v23 eventBody]);
  uint64_t v20 = objc_claimAutoreleasedReturnValue([v19 highEngagementCategory2]);
  __int128 v21 = (void *)v20;
  if (v20) {
    int v22 = (const __CFString *)v20;
  }
  else {
    int v22 = &stru_10012E768;
  }
  [*(id *)(a1 + 32) setObject:v22 forKeyedSubscript:@"HighEngagementCategory2"];
}

void sub_10004B3D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t *sub_10004B41C(uint64_t *a1, uint64_t *a2, dispatch_object_s **a3, __int128 *a4, uint64_t *a5)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  id v9 = a1 + 1;
  uint64_t v10 = *a3;
  void v9[2] = *a3;
  if (v10) {
    dispatch_retain(v10);
  }
  uint64_t v11 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(void *)(v11 - 8sub_100004D00(v1, *(char **)(v1 + 8)) = a2[1];
  a1[4] = 0LL;
  uint64_t v12 = a1 + 5;
  if (*((char *)a4 + 23) < 0)
  {
    sub_10000B8BC(v12, *(void **)a4, *((void *)a4 + 1));
  }

  else
  {
    __int128 v13 = *a4;
    a1[7] = *((void *)a4 + 2);
    *(_OWORD *)uint64_t v12 = v13;
  }

  a1[8] = *a5;
  uint64_t v14 = a5[1];
  a1[9] = v14;
  if (v14)
  {
    BOOL v15 = (unint64_t *)(v14 + 8);
    do
      unint64_t v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }

  __int128 v19 = a1;
  __int128 v17 = (dispatch_queue_s *)a1[3];
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_10004C95C;
  block[3] = &unk_100127BA8;
  block[4] = v9;
  block[5] = &v19;
  dispatch_sync(v17, block);
  return a1;
}

void sub_10004B554(_Unwind_Exception *a1)
{
}

BOOL sub_10004B574(uint64_t a1)
{
  if (sqlite3_exec(*(sqlite3 **)(a1 + 32), "PRAGMA journal_mode=WAL", 0LL, 0LL, 0LL))
  {
    uint64_t v2 = *(void *)(a1 + 32);
    id v3 = (os_log_s *)qword_100131930;
    BOOL v4 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v2)
    {
      if (v4)
      {
        sub_1000D5A60((_BYTE *)(a1 + 40), (uint64_t)__p);
        int v5 = v21;
        uint64_t v6 = (void **)__p[0];
        id v7 = sqlite3_errmsg(*(sqlite3 **)(a1 + 32));
        uint64_t v8 = __p;
        if (v5 < 0) {
          uint64_t v8 = v6;
        }
        *(_DWORD *)__int128 buf = 136446466;
        id v23 = v8;
        __int16 v24 = 2080;
        __int128 v25 = v7;
        _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "[Sqlite Store %{public}s] Failed to set journaling mode; %s",
          buf,
          0x16u);
        if (v21 < 0) {
          operator delete(__p[0]);
        }
      }
    }

    else if (v4)
    {
      sub_1000D5A60((_BYTE *)(a1 + 40), (uint64_t)__p);
      sub_1000D8458();
    }

    return 0LL;
  }

  else
  {
    int v19 = 0;
    int v9 = sqlite3_db_config(*(sqlite3 **)(a1 + 32), 1012, &v19, 0LL);
    BOOL v10 = v9 == 0;
    if (v9)
    {
      uint64_t v11 = *(void *)(a1 + 32);
      uint64_t v12 = (os_log_s *)qword_100131930;
      BOOL v13 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (v11)
      {
        if (v13)
        {
          sub_1000D5A60((_BYTE *)(a1 + 40), (uint64_t)__p);
          int v14 = v21;
          BOOL v15 = (void **)__p[0];
          unint64_t v16 = sqlite3_errmsg(*(sqlite3 **)(a1 + 32));
          __int128 v17 = __p;
          if (v14 < 0) {
            __int128 v17 = v15;
          }
          *(_DWORD *)__int128 buf = 136446466;
          id v23 = v17;
          __int16 v24 = 2080;
          __int128 v25 = v16;
          _os_log_error_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "[Sqlite Store %{public}s] Failed to disable legacy alter table; %s",
            buf,
            0x16u);
          if (v21 < 0) {
            operator delete(__p[0]);
          }
        }
      }

      else if (v13)
      {
        sub_1000D5A60((_BYTE *)(a1 + 40), (uint64_t)__p);
        sub_1000D8410();
      }
    }
  }

  return v10;
}

void sub_10004B7B0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

uint64_t sub_10004B7BC(uint64_t a1)
{
  unsigned int v5 = 0;
  uint64_t v1 = a1 + 8;
  v4[0] = (char *)&v5 + 3;
  v4[1] = a1;
  void v4[2] = (char *)&v5 + 1;
  v4[3] = (char *)&v5 + 2;
  v4[4] = &v5;
  uint64_t v2 = *(dispatch_queue_s **)(a1 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_10004CAD0;
  block[3] = &unk_100127BC8;
  block[4] = v1;
  block[5] = v4;
  dispatch_sync(v2, block);
  return _byteswap_ulong(v5);
}

void sub_10004B884(uint64_t a1@<X0>, char a2@<W1>, _OWORD *a3@<X8>)
{
  char v7 = a2;
  uint64_t v3 = a1 + 8;
  v6[0] = a1;
  v6[1] = &v7;
  BOOL v4 = *(dispatch_queue_s **)(a1 + 24);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 0x40000000LL;
  _OWORD v8[2] = sub_10004CEF4;
  void v8[3] = &unk_100127BE8;
  v8[4] = v3;
  v8[5] = v6;
  int v9 = v8;
  block[0] = _NSConcreteStackBlock;
  *(void *)&__int128 v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *a3 = v5;
  a3[1] = v5;
  block[1] = 0x40000000LL;
  block[2] = sub_10004CF1C;
  block[3] = &unk_100127C08;
  block[4] = a3;
  block[5] = &v9;
  dispatch_sync(v4, block);
}

void sub_10004B948(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v3 = a1;
  uint64_t v2 = *(dispatch_queue_s **)(a1 + 24);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 0x40000000LL;
  void v4[2] = sub_10004CF90;
  v4[3] = &unk_100127C28;
  v4[4] = v1;
  void v4[5] = &v3;
  __int128 v5 = v4;
  block[0] = _NSConcreteStackBlock;
  char v7 = -86;
  block[1] = 0x40000000LL;
  block[2] = sub_10004CF9C;
  block[3] = &unk_100127C48;
  block[4] = &v7;
  block[5] = &v5;
  dispatch_sync(v2, block);
}

uint64_t sub_10004BA08(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v4 = a1;
  uint64_t v2 = *(dispatch_queue_s **)(a1 + 24);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000LL;
  _OWORD v5[2] = sub_10004CFD0;
  _OWORD v5[3] = &unk_100127C68;
  v5[4] = v1;
  v5[5] = &v4;
  uint64_t v6 = v5;
  block[0] = _NSConcreteStackBlock;
  unsigned __int8 v8 = -86;
  block[1] = 0x40000000LL;
  block[2] = sub_10004CF9C;
  block[3] = &unk_100127C48;
  block[4] = &v8;
  block[5] = &v6;
  dispatch_sync(v2, block);
  return v8;
}

uint64_t sub_10004BACC(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v4 = a1;
  uint64_t v2 = *(dispatch_queue_s **)(a1 + 24);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000LL;
  _OWORD v5[2] = sub_10004CFE8;
  _OWORD v5[3] = &unk_100127C88;
  v5[4] = v1;
  v5[5] = &v4;
  uint64_t v6 = v5;
  block[0] = _NSConcreteStackBlock;
  unsigned int v8 = -1431655766;
  block[1] = 0x40000000LL;
  block[2] = sub_10004CFF4;
  block[3] = &unk_100127CA8;
  block[4] = &v8;
  block[5] = &v6;
  dispatch_sync(v2, block);
  return v8;
}

uint64_t sub_10004BB90(uint64_t a1)
{
  uint64_t v2 = (_BYTE *)(a1 + 40);
  int v3 = *(char *)(a1 + 63);
  uint64_t v4 = a1 + 40;
  if (v3 < 0) {
    uint64_t v4 = *(void *)v2;
  }
  int v5 = _sqlite3_integrity_check(v4);
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    char v7 = (os_log_s *)qword_100131930;
    BOOL v8 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (!v6)
    {
      if (v8)
      {
        sub_1000D5A60(v2, (uint64_t)buf);
        sub_1000D84A0();
      }

      return 1LL;
    }

    if (!v8) {
      return 1LL;
    }
    sub_1000D5A60(v2, (uint64_t)v22);
    int v9 = v23;
    BOOL v10 = *(uint8_t **)v22;
    uint64_t v11 = sqlite3_errmsg(*(sqlite3 **)(a1 + 32));
    uint64_t v12 = v22;
    *(_DWORD *)__int128 buf = 136446722;
    if (v9 < 0) {
      uint64_t v12 = v10;
    }
    *(void *)&uint8_t buf[4] = v12;
    __int16 v25 = 1026;
    int v26 = v5;
    __int16 v27 = 2080;
    __int128 v28 = v11;
    _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "[Sqlite Store %{public}s] State database is corrupted! DB Integrity check failed. Status = %{public}d; %s",
      buf,
      0x1Cu);
LABEL_15:
    if (v23 < 0)
    {
      __int128 v18 = *(void **)v22;
LABEL_28:
      operator delete(v18);
    }

    return 1LL;
  }

  int v13 = sub_10004BE44(a1);
  int v14 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + *(void *)(*(void *)a1 - 88LL)) + 56LL))(a1 + *(void *)(*(void *)a1 - 88LL));
  if (v13 > v14)
  {
    int v15 = v14;
    unint64_t v16 = (os_log_s *)qword_100131930;
    if (!os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_FAULT)) {
      return 1LL;
    }
    sub_1000D5A60(v2, (uint64_t)v22);
    if (v23 >= 0) {
      __int128 v17 = v22;
    }
    else {
      __int128 v17 = *(uint8_t **)v22;
    }
    *(_DWORD *)__int128 buf = 136446722;
    *(void *)&uint8_t buf[4] = v17;
    __int16 v25 = 1026;
    int v26 = v13;
    __int16 v27 = 1026;
    LODWORD(v2sub_100007004((uint64_t)v1 + 8) = v15;
    _os_log_fault_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_FAULT,  "[Sqlite Store %{public}s] Stored database version is greater than expected version (Stored Version: V%{public}d, E xpected Version: V%{public}d)?!!",  buf,  0x18u);
    goto LABEL_15;
  }

  if (!v13)
  {
    uint64_t v20 = (os_log_s *)qword_100131930;
    if (!os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_DEFAULT)) {
      return 1LL;
    }
    sub_1000D5A60(v2, (uint64_t)buf);
    char v21 = SBYTE3(v28) >= 0 ? buf : *(_BYTE **)buf;
    *(_DWORD *)int v22 = 136446210;
    *(void *)&v22[4] = v21;
    _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "[State Store %{public}s] Stored config database version is not currently set",  v22,  0xCu);
    if ((SBYTE3(v28) & 0x80000000) == 0) {
      return 1LL;
    }
    __int128 v18 = *(void **)buf;
    goto LABEL_28;
  }

  return 0LL;
}

void sub_10004BE38(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

uint64_t sub_10004BE44(uint64_t a1)
{
  uint64_t v20 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
  sub_10004C38C(a1, "PRAGMA user_version;", 0, &v20);
  if (!v20)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = (os_log_s *)qword_100131930;
    BOOL v5 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (!v3)
    {
      if (v5)
      {
        sub_1000D5A60((_BYTE *)(a1 + 40), (uint64_t)__p);
        sub_1000D84E4();
      }

      goto LABEL_20;
    }

    if (v5)
    {
      sub_1000D5A60((_BYTE *)(a1 + 40), (uint64_t)__p);
      int v6 = v19;
      char v7 = (void **)__p[0];
      BOOL v8 = sqlite3_errmsg(*(sqlite3 **)(a1 + 32));
      int v9 = __p;
      if (v6 < 0) {
        int v9 = v7;
      }
      *(_DWORD *)__int128 buf = 136446466;
      int v22 = v9;
      __int16 v23 = 2080;
      __int16 v24 = v8;
      BOOL v10 = "[Sqlite Store %{public}s] Error preparing database version query; %s";
      goto LABEL_14;
    }

LABEL_20:
    uint64_t v2 = 0LL;
    goto LABEL_21;
  }

  if (sub_10004C078(a1, &v20) != 100)
  {
    uint64_t v11 = *(void *)(a1 + 32);
    uint64_t v4 = (os_log_s *)qword_100131930;
    BOOL v12 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (!v11)
    {
      if (v12)
      {
        sub_1000D5A60((_BYTE *)(a1 + 40), (uint64_t)__p);
        sub_1000D852C();
      }

      goto LABEL_20;
    }

    if (v12)
    {
      sub_1000D5A60((_BYTE *)(a1 + 40), (uint64_t)__p);
      int v13 = v19;
      int v14 = (void **)__p[0];
      int v15 = sqlite3_errmsg(*(sqlite3 **)(a1 + 32));
      unint64_t v16 = __p;
      if (v13 < 0) {
        unint64_t v16 = v14;
      }
      *(_DWORD *)__int128 buf = 136446466;
      int v22 = v16;
      __int16 v23 = 2080;
      __int16 v24 = v15;
      BOOL v10 = "[Sqlite Store %{public}s] Failed to retrieve database version query; %s";
LABEL_14:
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, v10, buf, 0x16u);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_20;
    }

    goto LABEL_20;
  }

  uint64_t v2 = sub_10004C31C(a1, &v20, 0);
LABEL_21:
  sub_10004C6D4(&v20, 0LL);
  return v2;
}

  std::string __p = "aggPeriod";
  unint64_t v60 = (void (*)(uint64_t))0xAAAAAAAAAAAAAAAALL;
  *(void *)&int v15 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__int128 buf = v15;
  *(_OWORD *)&uint8_t buf[16] = v15;
  sub_100008780(a3, (const std::string::value_type **)&__p, (uint64_t)buf);
  *(void *)unint64_t v56 = a3;
  memset(&v56[8], 0, 24);
  *(void *)&__int128 v57 = 0x8000000000000000LL;
  sub_100008AC8((unsigned __int8 **)v56);
  unint64_t v16 = 0xAAAAAA0000000000LL;
  __int128 v17 = -1431655936;
  if (sub_1000087E8((unsigned __int8 **)buf, (unsigned __int8 **)v56))
  {
    __int128 v18 = sub_10009AE9C();
    if (!v18) {
      goto LABEL_27;
    }
  }

  else
  {
    __int128 v18 = (uint64_t)sub_100008924((unsigned __int8 **)buf);
  }

  if (*(_BYTE *)v18 == 3)
  {
    char v19 = *(void **)(v18 + 8);
    if (v19)
    {
      uint64_t v20 = sub_10000D8AC(v19);
      char v21 = 0;
      __int128 v17 = v20 & 0xFFFFFF00;
      unint64_t v16 = 0xAAAAAA0100000000LL;
      goto LABEL_28;
    }
  }

    int v22 = (os_log_s *)qword_1001318F0;
    if (os_log_type_enabled((os_log_t)qword_1001318F0, OS_LOG_TYPE_ERROR)) {
      sub_1000D956C((uint64_t)v5, v22);
    }
    goto LABEL_128;
  }

  BOOL v10 = (os_log_s *)qword_1001318F0;
  if (os_log_type_enabled((os_log_t)qword_1001318F0, OS_LOG_TYPE_ERROR)) {
    sub_1000D94AC(v10, v11, v12, v13, v14, v15, v16, v17);
  }
}

void sub_10004C06C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

uint64_t sub_10004C078(uint64_t a1, sqlite3_stmt **a2)
{
  uint64_t result = sqlite3_step(*a2);
  if ((_DWORD)result == 101) {
    ++*(void *)(a1 + 96);
  }
  return result;
}

uint64_t sub_10004C0B4(uint64_t a1, sqlite3_stmt **a2, void *a3)
{
  uint64_t v5 = sqlite3_step(*a2);
  if ((_DWORD)v5 == 101)
  {
    *(void *)(a1 + 104) += sqlite3_changes64(*(sqlite3 **)(a1 + 32));
    *(void *)(a1 + 80) += *a3;
  }

  return v5;
}

uint64_t sub_10004C11C(int a1, sqlite3_stmt **a2, int a3, uint64_t a4, void *a5)
{
  uint64_t result = sub_10004C160(a1, a2, a3, a4);
  uint64_t v8 = *(unsigned __int8 *)(a4 + 23);
  if ((v8 & 0x80u) != 0LL) {
    uint64_t v8 = *(void *)(a4 + 8);
  }
  *a5 += v8;
  return result;
}

uint64_t sub_10004C160(int a1, sqlite3_stmt **a2, int a3, uint64_t a4)
{
  int v5 = *(char *)(a4 + 23);
  if (v5 >= 0) {
    int v6 = (const char *)a4;
  }
  else {
    int v6 = *(const char **)a4;
  }
  if (v5 >= 0) {
    int v7 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    int v7 = *(_DWORD *)(a4 + 8);
  }
  return sqlite3_bind_text(*a2, a3, v6, v7, 0LL);
}

uint64_t sub_10004C1A4(int a1, sqlite3_stmt **a2, int a3, sqlite3_int64 *a4, void *a5)
{
  uint64_t result = sqlite3_bind_int64(*a2, a3, *a4);
  *a5 += 8LL;
  return result;
}

uint64_t sub_10004C1E4(int a1, sqlite3_stmt **a2, int a3, sqlite3_int64 *a4)
{
  return sqlite3_bind_int64(*a2, a3, *a4);
}

uint64_t sub_10004C20C(int a1, sqlite3_stmt **a2, int a3, double *a4, void *a5)
{
  uint64_t result = sqlite3_bind_double(*a2, a3, *a4);
  *a5 += 8LL;
  return result;
}

uint64_t sub_10004C248(int a1, sqlite3_stmt **a2, int a3, void *a4)
{
  uint64_t result = sqlite3_bind_null(*a2, a3);
  ++*a4;
  return result;
}

const unsigned __int8 *sub_10004C280(uint64_t a1, sqlite3_stmt **a2, int iCol)
{
  int v6 = sqlite3_column_text(*a2, iCol);
  if (v6)
  {
    int v7 = sqlite3_column_bytes(*a2, iCol);
    *(void *)(a1 + 88) += v7 & ~(v7 >> 31);
  }

  return v6;
}

sqlite3_int64 sub_10004C2E4(uint64_t a1, sqlite3_stmt **a2, int iCol)
{
  sqlite3_int64 result = sqlite3_column_int64(*a2, iCol);
  *(void *)(a1 + 88) += 8LL;
  return result;
}

uint64_t sub_10004C31C(uint64_t a1, sqlite3_stmt **a2, int iCol)
{
  uint64_t result = sqlite3_column_int(*a2, iCol);
  *(void *)(a1 + 88) += 4LL;
  return result;
}

void sub_10004C354(uint64_t a1, sqlite3_stmt **a2, int iCol)
{
  *(void *)(a1 + 88) += 8LL;
}

sqlite3_stmt **sub_10004C38C@<X0>(uint64_t a1@<X0>, const char *a2@<X1>, int a3@<W2>, sqlite3_stmt **a4@<X8>)
{
  *a4 = 0LL;
  uint64_t result = *(sqlite3_stmt ***)(a1 + 32);
  if (result)
  {
    int v7 = 0LL;
    if (a3) {
      unsigned int v6 = 1;
    }
    else {
      unsigned int v6 = 2;
    }
    uint64_t result = (sqlite3_stmt **)sqlite3_prepare_v3((sqlite3 *)result, a2, -1, v6, &v7, 0LL);
    if (!(_DWORD)result) {
      return sub_10004C6D4(a4, v7);
    }
  }

  return result;
}

void sub_10004C418(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

BOOL sub_10004C424(uint64_t a1, int a2)
{
  uint64_t v4 = (os_log_s *)qword_100131930;
  if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = __p;
    sub_1000D5A60((_BYTE *)(a1 + 40), (uint64_t)__p);
    if (SHIBYTE(__p[2]) < 0) {
      int v5 = (void **)__p[0];
    }
    int v6 = sub_10004BE44(a1);
    *(_DWORD *)__int128 buf = 136446722;
    *(void *)&uint8_t buf[4] = v5;
    *(_WORD *)&_BYTE buf[12] = 1026;
    *(_DWORD *)&buf[14] = v6;
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[Sqlite Store %{public}s] DATABASE MIGRATE VERSION: Version migration from schema version V%{public}d to V%{public}d",  buf,  0x18u);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
  }

  memset(__p, 170, 24);
  std::to_string(&v23, a2);
  int v7 = std::string::insert(&v23, 0LL, "PRAGMA user_version = ");
  __int128 v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  *(void *)&uint8_t buf[16] = v7->__r_.__value_.__l.__cap_;
  *(_OWORD *)__int128 buf = v8;
  v7->__r_.__value_.__l.__size_ = 0LL;
  v7->__r_.__value_.__l.__cap_ = 0LL;
  v7->__r_.__value_.__r.__words[0] = 0LL;
  int v9 = std::string::append((std::string *)buf, ";");
  __int128 v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  __p[2] = (void *)v9->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string __p = v10;
  v9->__r_.__value_.__l.__size_ = 0LL;
  v9->__r_.__value_.__l.__cap_ = 0LL;
  v9->__r_.__value_.__r.__words[0] = 0LL;
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (SHIBYTE(__p[2]) >= 0) {
    uint64_t v11 = __p;
  }
  else {
    uint64_t v11 = (void **)__p[0];
  }
  int v12 = sqlite3_exec(*(sqlite3 **)(a1 + 32), (const char *)v11, 0LL, 0LL, 0LL);
  if (v12)
  {
    uint64_t v13 = *(void *)(a1 + 32);
    int v14 = (os_log_s *)qword_100131930;
    BOOL v15 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v13)
    {
      if (v15)
      {
        sub_1000D5A60((_BYTE *)(a1 + 40), (uint64_t)&v23);
        int size = (char)v23.__r_.__value_.__s.__size_;
        std::string::size_type v17 = v23.__r_.__value_.__r.__words[0];
        __int128 v18 = sqlite3_errmsg(*(sqlite3 **)(a1 + 32));
        char v19 = &v23;
        *(_DWORD *)__int128 buf = 136446722;
        if (size < 0) {
          char v19 = (std::string *)v17;
        }
        *(void *)&uint8_t buf[4] = v19;
        *(_WORD *)&_BYTE buf[12] = 1026;
        *(_DWORD *)&buf[14] = a2;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = v18;
        _os_log_error_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "[Sqlite Store %{public}s] Failed to update schema version to V%{public}d; %s",
          buf,
          0x1Cu);
      }
    }

    else if (v15)
    {
      sub_1000D5A60((_BYTE *)(a1 + 40), (uint64_t)buf);
      sub_1000D8574();
    }
  }

  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return v12 == 0;
}

void sub_10004C6C8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

sqlite3_stmt **sub_10004C6D4(sqlite3_stmt **result, sqlite3_stmt *a2)
{
  uint64_t v3 = *result;
  *uint64_t result = a2;
  if (v3) {
    return (sqlite3_stmt **)sub_100040E00((int)result, v3);
  }
  return result;
}

BOOL sub_10004C6FC(uint64_t a1)
{
  if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR))
  {
    sub_1000D5A60((_BYTE *)(a1 + 40), (uint64_t)v18);
    sub_1000D8648();
  }

  if (_sqlite3_db_truncate(*(void *)(a1 + 32), 0LL))
  {
    uint64_t v2 = *(void *)(a1 + 32);
    uint64_t v3 = (os_log_s *)qword_100131930;
    BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (!v2)
    {
      if (!result) {
        return result;
      }
      sub_1000D5A60((_BYTE *)(a1 + 40), (uint64_t)__p);
      sub_1000D8600();
      return 0LL;
    }

    if (!result) {
      return result;
    }
    sub_1000D5A60((_BYTE *)(a1 + 40), (uint64_t)__p);
    int v5 = v17;
    int v6 = (void **)__p[0];
    int v7 = sqlite3_errmsg(*(sqlite3 **)(a1 + 32));
    __int128 v8 = __p;
    if (v5 < 0) {
      __int128 v8 = v6;
    }
    *(_DWORD *)__int128 buf = 136446466;
    uint64_t v20 = v8;
    __int16 v21 = 2080;
    int v22 = v7;
    int v9 = "[Sqlite Store %{public}s] Failed to truncate database during clear; %s";
    goto LABEL_17;
  }

  uint64_t v10 = a1 + 40;
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v3 = (os_log_s *)qword_100131930;
  BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
  if (v11)
  {
    if (!result) {
      return result;
    }
    sub_1000D5A60((_BYTE *)(a1 + 40), (uint64_t)__p);
    int v12 = v17;
    uint64_t v13 = (void **)__p[0];
    int v14 = sqlite3_errmsg(*(sqlite3 **)(a1 + 32));
    BOOL v15 = __p;
    if (v12 < 0) {
      BOOL v15 = v13;
    }
    *(_DWORD *)__int128 buf = 136446466;
    uint64_t v20 = v15;
    __int16 v21 = 2080;
    int v22 = v14;
    int v9 = "[Sqlite Store %{public}s] Failed to check database integrity after database clear; %s";
LABEL_17:
    _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, v9, buf, 0x16u);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    return 0LL;
  }

  if (!result) {
    return result;
  }
  sub_1000D5A60((_BYTE *)(a1 + 40), (uint64_t)__p);
  sub_1000D85B8();
  return 0LL;
}

void sub_10004C928(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

sqlite3 **sub_10004C934(sqlite3 **result, sqlite3 *a2)
{
  uint64_t v3 = *result;
  *BOOL result = a2;
  if (v3) {
    return (sqlite3 **)sub_100040DF0((int)result, v3);
  }
  return result;
}

BOOL sub_10004C95C(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 40);
  ppDb = 0LL;
  uint64_t v2 = (const char *)(v1 + 40);
  int v3 = sqlite3_open_v2(v2, &ppDb, 6, 0LL);
  sub_10004C934((sqlite3 **)(v1 + 32), ppDb);
  if (v3)
  {
    uint64_t v4 = (os_log_s *)qword_100131930;
    if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR))
    {
      sub_1000D5A60((_BYTE *)(v1 + 40), (uint64_t)__p);
      int v6 = v11;
      int v7 = (void **)__p[0];
      __int128 v8 = sqlite3_errstr(v3);
      int v9 = __p;
      *(_DWORD *)__int128 buf = 136446722;
      if (v6 < 0) {
        int v9 = v7;
      }
      int v14 = v9;
      __int16 v15 = 1024;
      int v16 = v3;
      __int16 v17 = 2082;
      __int128 v18 = v8;
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "[Sqlite Store %{public}s] Failed to open database; err=%d (%{public}s)",
        buf,
        0x1Cu);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }
  }

  return sub_10004B574(v1);
}

void sub_10004CAAC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10004CAD0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(v1 + 8);
  unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
  sub_1000712D0(&v19, "com.apple.analyticsd.database-migration");
  int v3 = sub_10004BB90(v2);
  **(_BYTE **)uint64_t v1 = v3;
  if (v3)
  {
    uint64_t v4 = (os_log_s *)qword_100131930;
    if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_DEFAULT))
    {
      sub_1000D5A60((_BYTE *)(v2 + 40), (uint64_t)__p);
      int v5 = v26 >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)__int128 buf = 136446210;
      *(void *)&uint8_t buf[4] = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[Sqlite Store %{public}s] ## DATABASE WIPE: Attempting wipe",  buf,  0xCu);
      if (SHIBYTE(v26) < 0) {
        operator delete(*(void **)__p);
      }
    }

    BOOL v6 = sub_10004C6FC(v2);
    **(_BYTE **)(v1 + 16) = v6;
    int v7 = (os_log_s *)qword_100131930;
    if (!v6)
    {
      if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR))
      {
        sub_1000D5A60((_BYTE *)(v2 + 40), (uint64_t)__p);
        sub_1000D8690();
      }

      return sub_100071304(&v19);
    }

    if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_DEFAULT))
    {
      sub_1000D5A60((_BYTE *)(v2 + 40), (uint64_t)__p);
      __int128 v8 = v26 >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)__int128 buf = 136446210;
      *(void *)&uint8_t buf[4] = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[Sqlite Store %{public}s] ## DATABASE WIPE: Wipe succeeded",  buf,  0xCu);
      if (SHIBYTE(v26) < 0) {
        operator delete(*(void **)__p);
      }
    }
  }

  int v9 = sub_10004BE44(v2);
  int v10 = (*(uint64_t (**)(uint64_t))(*(void *)(v2 + *(void *)(*(void *)v2 - 88LL)) + 56LL))(v2 + *(void *)(*(void *)v2 - 88LL));
  **(_BYTE **)(v1 + 24) = v9 != v10;
  if (v9 != v10)
  {
    int v11 = v10;
    int v12 = (os_log_s *)qword_100131930;
    if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_DEFAULT))
    {
      sub_1000D5A60((_BYTE *)(v2 + 40), (uint64_t)buf);
      uint64_t v13 = v21 >= 0 ? buf : *(_BYTE **)buf;
      *(_DWORD *)std::string __p = 136446722;
      *(void *)&__p[4] = v13;
      __int16 v23 = 1026;
      int v24 = v9;
      __int16 v25 = 1026;
      int v26 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "[Sqlite Store %{public}s] ## DATABASE MIGRATION: Attempting migration (Stored version: V%{public}d, Expected ver sion: V%{public}d)",  __p,  0x18u);
      if (v21 < 0) {
        operator delete(*(void **)buf);
      }
    }

    int v14 = sub_10004BE44(v2);
    __int16 v15 = (os_log_s *)qword_100131930;
    if (**(_BYTE **)(v1 + 32))
    {
      if (!os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_DEFAULT)) {
        return sub_100071304(&v19);
      }
      sub_1000D5A60((_BYTE *)(v2 + 40), (uint64_t)buf);
      if (v21 >= 0) {
        int v16 = buf;
      }
      else {
        int v16 = *(_BYTE **)buf;
      }
      *(_DWORD *)std::string __p = 136446722;
      *(void *)&__p[4] = v16;
      __int16 v23 = 1026;
      int v24 = v14;
      __int16 v25 = 1026;
      int v26 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "[Sqlite Store %{public}s] ## DATABASE MIGRATION: Migration complete (Stored version: V%{public}d, Expected versi on: V%{public}d)",  __p,  0x18u);
    }

    else
    {
      if (!os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR)) {
        return sub_100071304(&v19);
      }
      sub_1000D5A60((_BYTE *)(v2 + 40), (uint64_t)buf);
      if (v21 >= 0) {
        __int128 v18 = buf;
      }
      else {
        __int128 v18 = *(_BYTE **)buf;
      }
      *(_DWORD *)std::string __p = 136446722;
      *(void *)&__p[4] = v18;
      __int16 v23 = 1026;
      int v24 = v14;
      __int16 v25 = 1026;
      int v26 = v11;
      _os_log_error_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "[Sqlite Store %{public}s] ## DATABASE MIGRATION: Migration failed (Stored version: V%{public}d, Expected version: V%{public}d)",  __p,  0x18u);
    }

    if (v21 < 0) {
      operator delete(*(void **)buf);
    }
  }

  return sub_100071304(&v19);
}

void sub_10004CEC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

double sub_10004CEF4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(uint64_t **)(a1 + 40);
  uint64_t v3 = *v2;
  uint64_t v4 = (_BYTE *)v2[1];
  __int128 v6 = *(_OWORD *)(v3 + 80);
  int8x16_t v7 = *(int8x16_t *)(v3 + 96);
  int v5 = (_OWORD *)(v3 + 80);
  *(_OWORD *)a2 = v6;
  *(int8x16_t *)(a2 + 16) = vextq_s8(v7, v7, 8uLL);
  if (*v4)
  {
    *(void *)&__int128 v6 = 0LL;
    _OWORD *v5 = 0u;
    v5[1] = 0u;
  }

  return *(double *)&v6;
}

double sub_10004CF1C(uint64_t a1)
{
  (*(void (**)(_OWORD *__return_ptr))(**(void **)(a1 + 40) + 16LL))(v5);
  uint64_t v2 = *(_OWORD **)(a1 + 32);
  double result = *(double *)v5;
  __int128 v4 = v5[1];
  _OWORD *v2 = v5[0];
  v2[1] = v4;
  return result;
}

BOOL sub_10004CF90(uint64_t a1)
{
  return sub_10004C6FC(**(void **)(a1 + 40));
}

uint64_t sub_10004CF9C(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16LL))();
  **(_BYTE **)(a1 + 32) = result;
  return result;
}

BOOL sub_10004CFD0(uint64_t a1)
{
  return *(void *)(**(void **)(a1 + 40) + 32LL) != 0LL;
}

uint64_t sub_10004CFE8(uint64_t a1)
{
  return sub_10004BE44(**(void **)(a1 + 40));
}

uint64_t sub_10004CFF4(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16LL))();
  **(_DWORD **)(a1 + 32) = result;
  return result;
}

  ;
}

void sub_10004D040()
{
}

void sub_10004D048(uint64_t a1@<X1>, uint64_t a2@<X8>, float a3@<S0>)
{
  *(float *)a1 = a3;
  *(void *)(a1 + 4) = a2;
}

void *sub_10004D054(void *result, uint64_t a2, int a3, float a4)
{
  if (v4 >= 0) {
    int v5 = result;
  }
  else {
    int v5 = (void *)*result;
  }
  *(float *)a2 = a4;
  *(void *)(a2 + 4) = v5;
  *(_WORD *)(a2 + 12) = 1026;
  *(_DWORD *)(a2 + 14) = a3;
  return result;
}

void sub_10004D078(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, os_log_s *a4@<X8>)
{
}

  ;
}

uint64_t sub_10004D09C(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2 != (void *)-1LL)
  {
    munmap(v2, *(void *)(a1 + 8));
    *(void *)a1 = -1LL;
  }

  return a1;
}

FILE *sub_10004D0E0@<X0>(const char *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = fopen(a1, "rb");
  int v4 = result;
  if (result)
  {
    int v5 = fileno(result);
    if (v5 < 0) {
      goto LABEL_4;
    }
    int v6 = v5;
    v7.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v7.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    *(timespec *)&v10.st_blkint size = v7;
    *(timespec *)v10.st_qspare = v7;
    v10.st_birthtimespec = v7;
    *(timespec *)&v10.st_int size = v7;
    v10.st_mtimespec = v7;
    v10.st_ctimespec = v7;
    *(timespec *)&v10.st_uid = v7;
    v10.st_atimespec = v7;
    *(timespec *)&v10.st_dev = v7;
    if (fstat(v5, &v10) || (st_size = v10.st_size, int v9 = mmap(0LL, v10.st_size, 1, 1025, v6, 0LL), v9 == (void *)-1LL))
    {
LABEL_4:
      *a2 = -1LL;
      a2[1] = 0LL;
    }

    else
    {
      *a2 = v9;
      a2[1] = st_size;
    }

    return (FILE *)fclose(v4);
  }

  else
  {
    *a2 = -1LL;
    a2[1] = 0LL;
  }

  return result;
}

void sub_10004D1CC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

void *sub_10004D1D8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = xpc_get_type(*(xpc_object_t *)a1);
  if (result != &_xpc_type_null && (uint64_t result = xpc_get_type(*(xpc_object_t *)a1), result == &_xpc_type_shmem))
  {
    uint64_t v7 = 0LL;
    uint64_t result = (void *)xpc_shmem_map(*(xpc_object_t *)a1, (void **)&v7);
    uint64_t v5 = v7;
    if (v7 != 0 && result != 0LL)
    {
      uint64_t v6 = *(void *)(a1 + 8);
    }

    else
    {
      uint64_t v5 = -1LL;
      uint64_t v6 = 0LL;
    }

    *a2 = v5;
    a2[1] = v6;
  }

  else
  {
    *a2 = -1LL;
    a2[1] = 0LL;
  }

  return result;
}

void sub_10004D2A0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

void sub_10004D2AC(uint64_t a1@<X0>, xpc_object_t *a2@<X8>)
{
  int v4 = *(void **)a1;
  if (v4 == (void *)-1LL)
  {
    *a2 = xpc_null_create();
    a2[1] = 0LL;
  }

  else
  {
    xpc_object_t v5 = xpc_shmem_create(v4, *(void *)(a1 + 8));
    if (!v5) {
      xpc_object_t v5 = xpc_null_create();
    }
    uint64_t v6 = *(void **)(a1 + 8);
    *a2 = v5;
    xpc_object_t v7 = xpc_null_create();
    a2[1] = v6;
    xpc_release(v7);
  }

void sub_10004D4C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004D5A0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)&OBJC_CLASS___WiFiStateRelay;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void *sub_10004D5E0(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 32);
  if (result[8])
  {
    [result deregisterForCWEventTypes];
    [*(id *)(*(void *)(a1 + 32) + 64) invalidate];
    uint64_t result = *(void **)(a1 + 32);
  }

  if (result[2]) {
    return _[result teardownSCDynamicStore];
  }
  return result;
}

void sub_10004D7A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004D920(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004D938(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  obuint64_t j = a2;
  id v5 = [obj countByEnumeratingWithState:&v23 objects:v22 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v24;
    uint64_t v7 = kSCEntNetLinkQuality;
    do
    {
      __int128 v8 = 0LL;
      do
      {
        if (*(void *)v24 != v6) {
          objc_enumerationMutation(obj);
        }
        int v9 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*((void *)&v23 + 1) + 8 * (void)v8) componentsSeparatedByString:@"/"]);
        stat v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithArray:](&OBJC_CLASS___NSMutableArray, "arrayWithArray:", v9));

        if ([v10 count] == (id)5)
        {
          int v11 = (void *)objc_claimAutoreleasedReturnValue([v10 objectAtIndex:4]);
          unsigned int v12 = [v11 isEqualToString:v7];

          if (v12)
          {
            uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v10 objectAtIndex:3]);
            if (v4)
            {
              [v4 getQueue];
              int v14 = v21;
            }

            else
            {
              int v14 = 0LL;
              char v21 = 0LL;
            }

            block[0] = _NSConcreteStackBlock;
            block[1] = 3221225472LL;
            block[2] = sub_10004E6D8;
            block[3] = &unk_100127D20;
            id v19 = v4;
            id v20 = v13;
            id v15 = v13;
            dispatch_async(v14, block);
            int v16 = v21;
            char v21 = 0LL;
          }
        }

        __int128 v8 = (char *)v8 + 1;
      }

      while (v5 != v8);
      id v5 = [obj countByEnumeratingWithState:&v23 objects:v22 count:16];
    }

    while (v5);
  }
}

void sub_10004DB88( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_10004DCCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10004DD78(uint64_t a1)
{
  return _[*(id *)(a1 + 32) refreshWiFiRadioTech];
}

void sub_10004DE10( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  if (v10) {

  }
  _Unwind_Resume(exception_object);
}

void sub_10004DF3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004E084(_Unwind_Exception *a1)
{
}

void sub_10004E0A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    if ((char *)[v3 type] - 1 < (char *)3)
    {
      if (WeakRetained)
      {
        [WeakRetained getQueue];
        id v5 = v9;
      }

      else
      {
        id v5 = 0LL;
        int v9 = 0LL;
      }

      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_10004E1D8;
      block[3] = &unk_100127CD0;
      id v8 = WeakRetained;
      dispatch_async(v5, block);
      uint64_t v6 = v9;
      int v9 = 0LL;
    }
  }
}

void sub_10004E1B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10004E1D8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) refreshWiFiRadioTech];
}

void sub_10004E29C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a16)
  {
    if (a15 < 0) {
      operator delete(__p);
    }
  }

  _Unwind_Resume(exception_object);
}

void sub_10004E3B4(_Unwind_Exception *exception_object)
{
  if (*(_BYTE *)(v1 + 24))
  {
  }

  _Unwind_Resume(exception_object);
}

std::string *sub_10004E3F0(std::string *__dst, const std::string *a2)
{
  if (__dst[1].__r_.__value_.__s.__data_[0])
  {
    std::string::operator=(__dst, a2);
  }

  else
  {
    if ((char)a2->__r_.__value_.__s.__size_ < 0)
    {
      sub_10000B8BC(__dst, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }

    else
    {
      __int128 v3 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      __dst->__r_.__value_.__l.__cap_ = a2->__r_.__value_.__l.__cap_;
      *(_OWORD *)&__dst->__r_.__value_.__l.__data_ = v3;
    }

    __dst[1].__r_.__value_.__s.__data_[0] = 1;
  }

  return __dst;
}

std::string *sub_10004E458(std::string *a1, std::string::value_type **a2)
{
  __int128 v3 = *a2;
  if (a1[1].__r_.__value_.__s.__data_[0])
  {
    std::string::assign(a1, v3);
  }

  else
  {
    sub_100005064(a1, v3);
    a1[1].__r_.__value_.__s.__data_[0] = 1;
  }

  return a1;
}

void sub_10004E594(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004E650(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10004E6D8(uint64_t a1)
{
  return [*(id *)(a1 + 32) refreshWiFiLQM:*(void *)(a1 + 40)];
}

char *sub_10004E6E4(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  int v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0LL;
      *uint64_t v7 = 0LL;
      v7[1] = 0LL;
      _OWORD v7[2] = 0LL;
    }

    if (a4 >> 61) {
      sub_1000046F8();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = sub_10004E7EC(v7, v11);
    uint64_t v13 = (char *)v7[1];
    unsigned int v12 = (void **)(v7 + 1);
    int v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      __int128 v18 = v9;
      id v19 = __src;
      goto LABEL_18;
    }

    goto LABEL_19;
  }

  unsigned int v12 = (void **)(result + 8);
  int v14 = (_BYTE *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  int v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    int v9 = (char *)*v12;
  }

  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    __int128 v18 = v9;
    id v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }

char *sub_10004E7EC(void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_1000046F8();
  }
  uint64_t result = (char *)sub_10001C3B0((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void sub_10004E82C( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_10004E83C()
{
  int v0 = objc_autoreleasePoolPush();
  sub_100005064(qword_100131710, "wiFiRadioTech");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_100131710, (void *)&_mh_execute_header);
  sub_100005064(qword_100131728, "wiFiLQM");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_100131728, (void *)&_mh_execute_header);
  sub_100005064(qword_100131740, "OFF");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_100131740, (void *)&_mh_execute_header);
  sub_100005064(qword_100131758, "DISCONNECTED");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_100131758, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

_OWORD *sub_10004E918(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = operator new(0x148uLL);
  _OWORD *v4 = 0u;
  v4[1] = 0u;
  void v4[2] = 0u;
  v4[3] = 0u;
  v4[4] = 0u;
  void v4[5] = 0u;
  void v4[6] = 0u;
  v4[7] = 0u;
  uint8_t v4[8] = 0u;
  v4[9] = 0u;
  v4[10] = 0u;
  v4[11] = 0u;
  v4[12] = 0u;
  v4[13] = 0u;
  v4[14] = 0u;
  v4[15] = 0u;
  v4[16] = 0u;
  v4[17] = 0u;
  v4[18] = 0u;
  v4[19] = 0u;
  *((void *)v4 + 40) = 0LL;
  sub_100063A5C(v4);
  *(void *)uint64_t v4 = off_100127D70;
  *((void *)v4 + sub_100007004((uint64_t)v1 + 8) = 0LL;
  *((void *)v4 + 39) = 0LL;
  *((void *)v4 + 40) = 0LL;
  uint64_t v5 = a2[1];
  uint64_t v14 = *a2;
  unint64_t v15 = (std::__shared_weak_count *)v5;
  if (v5)
  {
    uint64_t v6 = (unint64_t *)(v5 + 8);
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }

  char v8 = sub_10004EA7C((uint64_t)v4, a1, &v14);
  char v9 = v8;
  uint64_t v10 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      if ((v9 & 1) != 0) {
        return v4;
      }
      goto LABEL_9;
    }
  }

  if ((v8 & 1) == 0)
  {
LABEL_9:
    (*(void (**)(_OWORD *))(*(void *)v4 + 24LL))(v4);
    return 0LL;
  }

  return v4;
}

void sub_10004EA58(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10004EA7C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = (os_log_s *)qword_100131968;
  if (os_log_type_enabled((os_log_t)qword_100131968, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[KernelClient] Starting up kernel listener.",  buf,  2u);
  }

  *(void *)(a1 + sub_100007004((uint64_t)v1 + 8) = a2;
  if (a2)
  {
    sub_100025178((void *)(a1 + 312), a3);
    if (*(void *)(a1 + 312))
    {
      mach_error_t v7 = sub_100063B40(a1, *(void *)(a1 + 8));
      if ((v7 & 1) != 0) {
        return 1LL;
      }
      mach_error_t v9 = v7;
      if (os_log_type_enabled((os_log_t)qword_100131968, OS_LOG_TYPE_ERROR)) {
        sub_1000D88D4(v9);
      }
    }

    else if (os_log_type_enabled((os_log_t)qword_100131968, OS_LOG_TYPE_ERROR))
    {
      sub_1000D887C();
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_100131968, OS_LOG_TYPE_ERROR))
  {
    sub_1000D8824();
  }

  uint64_t v10 = (os_log_s *)qword_100131968;
  BOOL v11 = os_log_type_enabled((os_log_t)qword_100131968, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0LL;
  if (v11)
  {
    *(_WORD *)unint64_t v12 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "[KernelClient] initWithCFRunLoop Failed",  v12,  2u);
    return 0LL;
  }

  return result;
}

void sub_10004EC14(uint64_t a1, io_service_t a2)
{
  uint64_t v4 = (os_log_s *)qword_100131968;
  if (os_log_type_enabled((os_log_t)qword_100131968, OS_LOG_TYPE_INFO))
  {
    LOWORD(vsub_100007004((uint64_t)v1 + 8) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "[KernelClient] CoreAnalyticsClient::servicePublished",  (uint8_t *)&v8,  2u);
  }

  if (a2)
  {
    mach_error_t v5 = sub_10004ED44(a1, a2);
  }

  else
  {
    mach_error_t v5 = -536870201;
    if (os_log_type_enabled((os_log_t)qword_100131968, OS_LOG_TYPE_ERROR)) {
      sub_1000D893C();
    }
  }

  uint64_t v6 = (os_log_s *)qword_100131968;
  if (os_log_type_enabled((os_log_t)qword_100131968, OS_LOG_TYPE_INFO))
  {
    mach_error_t v7 = mach_error_string(v5);
    int v8 = 136446210;
    mach_error_t v9 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "[KernelClient] CoreAnalyticsClient::servicePublished done %{public}s",  (uint8_t *)&v8,  0xCu);
  }

uint64_t sub_10004ED44(uint64_t a1, io_service_t a2)
{
  uint64_t v4 = (os_log_s *)qword_100131968;
  if (os_log_type_enabled((os_log_t)qword_100131968, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "[KernelClient] CoreAnalyticsClient::Start",  buf,  2u);
  }

  if (a2)
  {
    *(_DWORD *)(a1 + 276) = a2;
    uint64_t v5 = IOServiceOpen(a2, mach_task_self_, 0, (io_connect_t *)(a1 + 272));
    if ((_DWORD)v5)
    {
      uint64_t v8 = v5;
      if (os_log_type_enabled((os_log_t)qword_100131968, OS_LOG_TYPE_ERROR)) {
        sub_1000D89FC(v8);
      }
    }

    else
    {
      uint64_t v6 = sub_10004F0D8(a1);
      if (!(_DWORD)v6)
      {
        *(void *)(a1 + 304) = dispatch_semaphore_create(0LL);
        mach_error_t v7 = (os_log_s *)qword_100131968;
        if (os_log_type_enabled((os_log_t)qword_100131968, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)uint64_t v13 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "[KernelClient] CoreAnalyticsClient::Start complete",  v13,  2u);
        }

        return 0LL;
      }

      uint64_t v8 = v6;
      if (os_log_type_enabled((os_log_t)qword_100131968, OS_LOG_TYPE_ERROR)) {
        sub_1000D8994(v8);
      }
    }
  }

  else
  {
    uint64_t v8 = 3758097095LL;
    uint64_t v10 = (os_log_s *)qword_100131968;
    if (os_log_type_enabled((os_log_t)qword_100131968, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "[KernelClient] Start no io_service_t",  v14,  2u);
    }
  }

  io_connect_t v11 = *(_DWORD *)(a1 + 272);
  if (v11)
  {
    IOServiceClose(v11);
    *(_DWORD *)(a1 + 272) = 0;
  }

  unint64_t v12 = *(dispatch_object_s **)(a1 + 304);
  if (v12)
  {
    dispatch_release(v12);
    *(void *)(a1 + 304) = 0LL;
  }

  return v8;
}

void sub_10004EF28(uint64_t a1)
{
  uint64_t v1 = (os_log_s *)qword_100131968;
  if (os_log_type_enabled((os_log_t)qword_100131968, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_INFO,  "[KernelClient] CoreAnalyticsClient::serviceTerminated completed",  v2,  2u);
  }

uint64_t sub_10004EFC0(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_100131968;
  if (os_log_type_enabled((os_log_t)qword_100131968, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "[KernelClient] CoreAnalyticsClient::Stop", buf, 2u);
  }

  mach_port_name_t v3 = *(_DWORD *)(a1 + 88);
  if (v3)
  {
    mach_port_mod_refs(mach_task_self_, v3, 1u, -1);
    *(_DWORD *)(a1 + 8sub_100007004((uint64_t)v1 + 8) = 0;
  }

  uint64_t v4 = *(dispatch_object_s **)(a1 + 304);
  if (v4)
  {
    dispatch_release(v4);
    *(void *)(a1 + 304) = 0LL;
  }

  *(_DWORD *)(a1 + 276) = 0;
  uint64_t v5 = (os_log_s *)qword_100131968;
  if (os_log_type_enabled((os_log_t)qword_100131968, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)mach_error_t v7 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "[KernelClient]  CoreAnalyticsClient::Stop complete",  v7,  2u);
  }

  return 0LL;
}

uint64_t sub_10004F0D8(uint64_t a1)
{
  mach_vm_size_t v14 = 0LL;
  uint64_t v2 = dispatch_queue_attr_make_with_qos_class(0LL, QOS_CLASS_UTILITY, 0);
  mach_port_t NotificationPort = IODataQueueAllocateNotificationPort();
  *(_DWORD *)(a1 + 8sub_100007004((uint64_t)v1 + 8) = NotificationPort;
  if (!NotificationPort)
  {
    uint64_t v11 = 3758097086LL;
    if (os_log_type_enabled((os_log_t)qword_100131968, OS_LOG_TYPE_ERROR)) {
      sub_1000D8A64();
    }
    goto LABEL_23;
  }

  dispatch_queue_t v4 = dispatch_queue_create("ControllerResponseQueue", v2);
  *(void *)(a1 + 280) = v4;
  if (!v4)
  {
    uint64_t v11 = 3758097086LL;
    if (os_log_type_enabled((os_log_t)qword_100131968, OS_LOG_TYPE_ERROR)) {
      sub_1000D8ABC();
    }
    goto LABEL_23;
  }

  uint64_t v5 = IOConnectSetNotificationPort(*(_DWORD *)(a1 + 272), 0, *(_DWORD *)(a1 + 88), 0LL);
  if ((_DWORD)v5)
  {
    uint64_t v11 = v5;
    if (os_log_type_enabled((os_log_t)qword_100131968, OS_LOG_TYPE_ERROR)) {
      sub_1000D8994(v11);
    }
    goto LABEL_23;
  }

  IONotificationPortRef v6 = IONotificationPortCreate(kIOMainPortDefault);
  *(void *)(a1 + 96) = v6;
  if (v6)
  {
    mach_error_t v7 = dispatch_queue_create("ControllerNotificationQueue", v2);
    *(void *)(a1 + 28sub_100007004((uint64_t)v1 + 8) = v7;
    if (v7)
    {
      IONotificationPortSetDispatchQueue(*(IONotificationPortRef *)(a1 + 96), v7);
      uint64_t v8 = IOServiceAddInterestNotification( *(IONotificationPortRef *)(a1 + 96),  *(_DWORD *)(a1 + 276),  "IOGeneralInterest",  (IOServiceInterestCallback)sub_10004F39C,  (void *)a1,  (io_object_t *)(a1 + 104));
      if ((_DWORD)v8)
      {
        uint64_t v11 = v8;
        goto LABEL_23;
      }

      uint64_t v9 = IOConnectMapMemory(*(_DWORD *)(a1 + 272), 0, mach_task_self_, (mach_vm_address_t *)(a1 + 72), &v14, 1u);
      if ((_DWORD)v9)
      {
        uint64_t v11 = v9;
        if (os_log_type_enabled((os_log_t)qword_100131968, OS_LOG_TYPE_ERROR)) {
          sub_1000D8994(v11);
        }
        goto LABEL_23;
      }

      dispatch_source_t v10 = dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_mach_recv,  *(unsigned int *)(a1 + 88),  0LL,  *(dispatch_queue_t *)(a1 + 280));
      *(void *)(a1 + 296) = v10;
      if (v10)
      {
        dispatch_set_context(v10, (void *)a1);
        dispatch_source_set_event_handler_f(*(dispatch_source_t *)(a1 + 296), (dispatch_function_t)sub_10004F3A4);
        dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(a1 + 296), (dispatch_function_t)sub_10004F480);
        dispatch_resume(*(dispatch_object_t *)(a1 + 296));
        return 0LL;
      }

      if (os_log_type_enabled((os_log_t)qword_100131968, OS_LOG_TYPE_ERROR)) {
        sub_1000D8B14();
      }
    }
  }

  uint64_t v11 = 3758097086LL;
LABEL_23:
  mach_port_name_t v13 = *(_DWORD *)(a1 + 88);
  if (v13)
  {
    mach_port_mod_refs(mach_task_self_, v13, 1u, -1);
    *(_DWORD *)(a1 + 8sub_100007004((uint64_t)v1 + 8) = 0;
  }

  return v11;
}

void sub_10004F39C(uint64_t a1, uint64_t a2, int a3)
{
}

void sub_10004F3A4(IODataQueueEntry *a1)
{
  mach_msg_return_t v5;
  mach_msg_size_t v2 = 92;
  mach_port_name_t v3 = (mach_msg_header_t *)CFAllocatorAllocate(kCFAllocatorDefault, 92LL, 0LL);
  for (v3->msgh_mach_port_name_t size = 92; ; v3->msgh_mach_port_name_t size = v2)
  {
    v3->msgh_bits = 0;
    mach_port_name_t size = a1[11].size;
    v3->msgh_remote_port = 0;
    v3->msgh_local_port = size;
    v3->msgh_id = 0;
    uint64_t v5 = mach_msg(v3, 117440518, 0, v2, size, 0, 0);
    if (v5 != 268451844) {
      break;
    }
    mach_msg_size_t v2 = (v3->msgh_size + 71) & 0xFFFFFFFC;
    mach_port_name_t v3 = (mach_msg_header_t *)CFAllocatorReallocate(kCFAllocatorDefault, v3, v2, 0LL);
  }

  if (!v5) {
    sub_10004F484(a1);
  }
  CFAllocatorDeallocate(kCFAllocatorSystemDefault, v3);
}

IODataQueueEntry *sub_10004F484(IODataQueueEntry *result)
{
  uint64_t v1 = (IODataQueueMemory *)result[9];
  if (v1)
  {
    mach_msg_size_t v2 = result;
    uint32_t dataSize = -1431655766;
    uint64_t result = IODataQueuePeek(v1);
    if (result)
    {
      mach_port_name_t v3 = result;
      do
      {
        UInt32 size = v3->size;
        uint64_t v5 = (os_log_s *)qword_100131968;
        if (v3->size)
        {
          if (os_log_type_enabled((os_log_t)qword_100131968, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)__int128 buf = 67109120;
            UInt32 v10 = size;
            _os_log_debug_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "[KernelClient] Got data from _queueAddr %u\n",  buf,  8u);
          }

          if (v3->data[0] == 1) {
            (*(void (**)(void, UInt8 *, void))(**(void **)&v2[39] + 32LL))( *(void *)&v2[39],  v3->data,  v3->size);
          }
        }

        else if (os_log_type_enabled((os_log_t)qword_100131968, OS_LOG_TYPE_ERROR))
        {
          sub_1000D8B6C(&v7, v8, v5);
        }

        uint32_t dataSize = 0;
        IODataQueueDequeue(v1, 0LL, &dataSize);
        uint64_t result = IODataQueuePeek(v1);
        mach_port_name_t v3 = result;
      }

      while (result);
    }
  }

  return result;
}

void sub_10004F600(uint64_t a1)
{
  mach_msg_size_t v2 = *(dispatch_object_s **)(a1 + 280);
  if (v2)
  {
    dispatch_release(v2);
    *(void *)(a1 + 280) = 0LL;
  }

  mach_port_name_t v3 = *(dispatch_object_s **)(a1 + 288);
  if (v3)
  {
    dispatch_release(v3);
    *(void *)(a1 + 28sub_100007004((uint64_t)v1 + 8) = 0LL;
  }

  mach_vm_address_t v4 = *(void *)(a1 + 72);
  if (v4)
  {
    IOConnectUnmapMemory(*(_DWORD *)(a1 + 272), 0, mach_task_self_, v4);
    *(void *)(a1 + 72) = 0LL;
  }

  io_connect_t v5 = *(_DWORD *)(a1 + 272);
  if (v5)
  {
    if (*(void *)(a1 + 96))
    {
      IONotificationPortDestroy(*(IONotificationPortRef *)(a1 + 96));
      io_connect_t v5 = *(_DWORD *)(a1 + 272);
    }

    IOServiceClose(v5);
    *(void *)(a1 + 96) = 0LL;
    *(_DWORD *)(a1 + 272) = 0;
  }

  mach_port_name_t v6 = *(_DWORD *)(a1 + 88);
  if (v6)
  {
    mach_port_mod_refs(mach_task_self_, v6, 1u, -1);
    *(_DWORD *)(a1 + 8sub_100007004((uint64_t)v1 + 8) = 0;
  }

  uint8_t v7 = *(IONotificationPort **)(a1 + 96);
  if (v7) {
    IONotificationPortDestroy(v7);
  }
  *(_DWORD *)(a1 + 276) = 0;
}

void sub_10004F6B4(uint64_t a1, int a2)
{
  if (!a2)
  {
    mach_port_name_t v3 = (os_log_s *)qword_100131968;
    if (os_log_type_enabled((os_log_t)qword_100131968, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "[KernelClient] Received notice of data availability.",  buf,  2u);
    }

    mach_vm_address_t v4 = *(dispatch_queue_s **)(a1 + 280);
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000LL;
    block[2] = sub_10004F788;
    block[3] = &unk_100127D40;
    void block[4] = a1;
    dispatch_sync(v4, block);
  }

IODataQueueEntry *sub_10004F788(uint64_t a1)
{
  return sub_10004F484(*(IODataQueueEntry **)(a1 + 32));
}

void *sub_10004F790(void *a1)
{
  *a1 = off_100127D70;
  sub_100007004((uint64_t)(a1 + 39));
  return sub_100063A6C(a1);
}

void sub_10004F7C4(void *a1)
{
  *a1 = off_100127D70;
  sub_100007004((uint64_t)(a1 + 39));
  mach_msg_size_t v2 = sub_100063A6C(a1);
  operator delete(v2);
}

void sub_10004F7FC( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

  ;
}

char *sub_10004F828(mach_error_t error_value)
{
  return mach_error_string(error_value);
}

  ;
}

double sub_10004F83C@<D0>(__int128 *a1@<X0>, __n128 *a2@<X1>, _OWORD *a3@<X8>)
{
  double result = v5[0];
  *a3 = *(_OWORD *)v5;
  return result;
}

void sub_10004F8A8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

void sub_10004F8B4(uint64_t a1@<X0>, const char **a2@<X1>, unint64_t *a3@<X8>)
{
  v20[0] = 0xAAAAAAAAAAAAAAAALL;
  v20[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_1000861E4((const char *)(a1 + 32), a2, v20);
  if (!v20[0])
  {
    *a3 = 0LL;
    a3[1] = 0LL;
    goto LABEL_21;
  }

  unint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
  id v19 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr))(*(void *)v20[0] + 16LL))(&v18);
  uint64_t v29 = "parentUuid";
  unint64_t v28 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v26 = v5;
  __int128 v27 = v5;
  sub_100008780((uint64_t)&v18, &v29, (uint64_t)&v26);
  char v21 = (unsigned __int8 *)&v18;
  uint64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  uint64_t v24 = 0LL;
  unint64_t v25 = 0x8000000000000000LL;
  sub_100008AC8(&v21);
  if (sub_1000087E8((unsigned __int8 **)&v26, &v21))
  {
    uint64_t v6 = sub_10009AE9C();
    if (!v6) {
      goto LABEL_10;
    }
  }

  else
  {
    uint64_t v6 = (uint64_t)sub_100008924((unsigned __int8 **)&v26);
  }

  if (*(_BYTE *)v6 == 3 && *(void *)(v6 + 8))
  {
    uint8_t v7 = "parent config has a parentUuid but it should NOT!";
    goto LABEL_19;
  }

void sub_10004FB24(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

void sub_10004FB34(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10000E810(a1);
  operator delete(v1);
}

void *sub_10004FB48@<X0>(__int128 *a1@<X1>, __n128 *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x50uLL);
  double result = sub_10004FBA8(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_10004FB94(_Unwind_Exception *a1)
{
}

void *sub_10004FBA8(void *a1, __int128 *a2, __n128 *a3)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_100127DF8;
  sub_10000E290((uint64_t)(a1 + 3), a2, a3);
  a1[3] = &off_100127DB8;
  return a1;
}

void sub_10004FBE8(_Unwind_Exception *a1)
{
}

void sub_10004FBFC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100127DF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10004FC0C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100127DF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_10004FC2C(uint64_t a1)
{
  return sub_10000E810(a1 + 24);
}

BOOL sub_10004FC38(void *a1)
{
  id v1 = a1;
  uint64_t v9 = 0LL;
  UInt32 v10 = &v9;
  uint64_t v11 = 0x2020000000LL;
  char v12 = 0;
  if (os_variant_is_darwinos("com.apple.CoreAnalytics"))
  {
    mach_msg_size_t v2 = (os_log_s *)qword_1001318E8;
    if (os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "[AppUsage] WARNING: Ignoring AppUsage::iteratePayloads on darwinOS.",  buf,  2u);
    }

    int v3 = *((unsigned __int8 *)v10 + 24);
  }

  else
  {
    if (qword_100131778 != -1) {
      dispatch_once(&qword_100131778, &stru_100127E38);
    }
    mach_vm_address_t v4 = (dispatch_queue_s *)qword_100131770;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    void v6[2] = sub_10004FDFC;
    void v6[3] = &unk_100127E60;
    __int128 v8 = &v9;
    id v7 = v1;
    dispatch_sync(v4, v6);
    int v3 = *((unsigned __int8 *)v10 + 24);
  }

  _Block_object_dispose(&v9, 8);

  return v3 != 0;
}

void sub_10004FDAC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  _Unwind_Resume(a1);
}

void sub_10004FDD0(id a1)
{
  dispatch_queue_t v1 = dispatch_queue_create("analyticsd.AppUsageQueue", 0LL);
  mach_msg_size_t v2 = (void *)qword_100131770;
  qword_100131770 = (uint64_t)v1;
}

void sub_10004FDFC(uint64_t a1)
{
  double v1 = sub_100092D10();
  if (v1 <= 0.0)
  {
    char v16 = (os_log_s *)qword_1001318E8;
    if (os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_ERROR)) {
      sub_1000D8D20(v16);
    }
  }

  else
  {
    double v2 = v1;
    int v87 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
    [v87 timeIntervalSince1970];
    double v4 = v3;
    if (v3 - v2 > 86400.0)
    {
      double v2 = v3 + -86400.0;
      __int128 v5 = (os_log_s *)qword_1001318E8;
      if (os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_DEBUG)) {
        sub_1000D8CB4(v5);
      }
    }

    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSince1970:](&OBJC_CLASS___NSDate, "dateWithTimeIntervalSince1970:", v2));
    id v7 = *(void **)(a1 + 32);
    id v88 = v6;
    id v92 = v87;
    uint64_t v90 = v7;
    if (objc_opt_class(&OBJC_CLASS____DKEventQuery))
    {
      uint64_t v89 = (void *)objc_opt_new(&OBJC_CLASS____DKEventQuery);
      __int128 v8 = (void *)objc_claimAutoreleasedReturnValue(+[_DKSystemEventStreams appInFocusStream](&OBJC_CLASS____DKSystemEventStreams, "appInFocusStream"));
      v125 = v8;
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v125, 1LL));
      [v89 setEventStreams:v9];

      UInt32 v10 = (void *)objc_claimAutoreleasedReturnValue( +[_DKQuery predicateForEventsIntersectingDateRangeFrom:to:]( &OBJC_CLASS____DKQuery,  "predicateForEventsIntersectingDateRangeFrom:to:",  v88,  v92));
      [v89 setPredicate:v10];

      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[_DKQuery startDateSortDescriptorAscending:]( &OBJC_CLASS____DKQuery,  "startDateSortDescriptorAscending:",  1LL));
      v124[0] = v11;
      char v12 = (void *)objc_claimAutoreleasedReturnValue( +[_DKQuery endDateSortDescriptorAscending:]( &OBJC_CLASS____DKQuery,  "endDateSortDescriptorAscending:",  1LL));
      v124[1] = v12;
      mach_port_name_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v124, 2LL));
      [v89 setSortDescriptors:v13];

      unint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[_DKKnowledgeStore knowledgeStore](&OBJC_CLASS____DKKnowledgeStore, "knowledgeStore"));
      id v115 = 0LL;
      unint64_t v84 = (void *)objc_claimAutoreleasedReturnValue([v14 executeQuery:v89 error:&v115]);
      id v86 = v115;

      BOOL v85 = v86 == 0LL;
      if (v86)
      {
        obuint64_t j = (os_log_s *)(id)qword_1001318E8;
        if (os_log_type_enabled(obj, OS_LOG_TYPE_ERROR))
        {
          char v15 = (void *)objc_claimAutoreleasedReturnValue([v86 description]);
          sub_1000D8C64(v15, buf, obj);
        }
      }

      else
      {
        __int128 v122 = 0u;
        __int128 v123 = 0u;
        __int128 v120 = 0u;
        __int128 v121 = 0u;
        obuint64_t j = v84;
        id v18 = -[os_log_s countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v120,  buf,  16LL);
        if (v18)
        {
          uint64_t v95 = *(void *)v121;
          *(void *)&__int128 v19 = 138412546LL;
          __int128 v83 = v19;
          while (2)
          {
            for (BOOL i = 0LL; i != v18; BOOL i = (char *)i + 1)
            {
              if (*(void *)v121 != v95) {
                objc_enumerationMutation(obj);
              }
              char v21 = *(void **)(*((void *)&v120 + 1) + 8LL * (void)i);
              uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "startDate", v83));
              if (!v22
                || (uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v21 endDate]),
                    BOOL v24 = v23 == 0LL,
                    v23,
                    v22,
                    v24))
              {
                uint64_t v29 = (os_log_s *)(id)qword_1001318E8;
                if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
                {
                  BOOL v31 = (void *)objc_claimAutoreleasedReturnValue([v21 stringValue]);
                  sub_1000D8BA8(v31, v117, &v118, v29);
                }
              }

              else
              {
                unint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v21 endDate]);
                __int128 v26 = (void *)objc_claimAutoreleasedReturnValue([v21 startDate]);
                [v25 timeIntervalSinceDate:v26];
                double v28 = v27;

                if (v28 >= 0.0)
                {
                  uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([v21 endDate]);
                  [v92 timeIntervalSinceDate:v32];
                  BOOL v34 = v33 < 0.0;

                  if (v34)
                  {
                    int v80 = (os_log_s *)(id)qword_1001318E8;
                    if (os_log_type_enabled(v80, OS_LOG_TYPE_DEBUG))
                    {
                      unint64_t v81 = (void *)objc_claimAutoreleasedReturnValue([v21 stringValue]);
                      unsigned __int8 v82 = (void *)objc_claimAutoreleasedReturnValue([v21 endDate]);
                      sub_1000D8BFC(v81, v82, v116, v80);
                    }

                    goto LABEL_50;
                  }

                  __int128 v35 = (void *)objc_claimAutoreleasedReturnValue([v21 stringValue]);
                  id v36 = [v35 copy];

                  if ([v36 containsString:@"/"])
                  {
                    id v94 = (id)objc_claimAutoreleasedReturnValue([v36 lastPathComponent]);
                    uint64_t v29 = 0LL;
                  }

                  else
                  {
                    uint64_t v29 = (os_log_s *)v36;
                    id v94 = 0LL;
                  }

                  __int128 v37 = (void *)objc_claimAutoreleasedReturnValue([v21 metadata]);
                  char v38 = (void *)objc_claimAutoreleasedReturnValue( +[_DKApplicationMetadataKey dyldPlatform]( &OBJC_CLASS____DKApplicationMetadataKey,  "dyldPlatform"));
                  unint64_t v39 = (void *)objc_claimAutoreleasedReturnValue([v37 objectForKeyedSubscript:v38]);

                  __int128 v40 = (void *)objc_claimAutoreleasedReturnValue([v21 metadata]);
                  unint64_t v41 = (void *)objc_claimAutoreleasedReturnValue( +[_DKApplicationMetadataKey isNativeArchitecture]( &OBJC_CLASS____DKApplicationMetadataKey,  "isNativeArchitecture"));
                  __int128 v42 = (void *)objc_claimAutoreleasedReturnValue([v40 objectForKeyedSubscript:v41]);

                  unint64_t v43 = (void *)objc_claimAutoreleasedReturnValue([v21 metadata]);
                  __int128 v44 = (void *)objc_claimAutoreleasedReturnValue( +[_DKApplicationMetadataKey shortVersionString]( &OBJC_CLASS____DKApplicationMetadataKey,  "shortVersionString"));
                  unint64_t v45 = (void *)objc_claimAutoreleasedReturnValue([v43 objectForKeyedSubscript:v44]);

                  unint64_t v46 = (void *)objc_claimAutoreleasedReturnValue([v21 metadata]);
                  unint64_t v47 = (void *)objc_claimAutoreleasedReturnValue( +[_DKApplicationMetadataKey exactBundleVersion]( &OBJC_CLASS____DKApplicationMetadataKey,  "exactBundleVersion"));
                  __int128 v48 = (void *)objc_claimAutoreleasedReturnValue([v46 objectForKeyedSubscript:v47]);

                  *(void *)unint64_t v116 = 0xAAAAAAAAAAAAAA00LL;
                  *(void *)&unsigned __int8 v116[8] = 0LL;
                  sub_1000041AC((uint64_t)v116);
                  sub_1000041AC((uint64_t)v116);
                  if (v29) {
                    unint64_t v49 = (char *)-[os_log_s UTF8String](v29, "UTF8String");
                  }
                  else {
                    unint64_t v49 = "<unknown>";
                  }
                  unsigned __int8 v112 = v49;
                  sub_10000E89C((uint64_t)v113, &v112);
                  __int128 v50 = sub_100003F94(v116, "bundleID");
                  sub_1000041AC((uint64_t)v113);
                  char v51 = *(_BYTE *)v50;
                  *(_BYTE *)__int128 v50 = v113[0];
                  v113[0] = v51;
                  unint64_t v52 = (uint64_t *)v50[1];
                  v50[1] = (uint64_t)v114;
                  int v114 = v52;
                  sub_1000041AC((uint64_t)v50);
                  sub_1000041AC((uint64_t)v113);
                  sub_10000425C(&v114, v113[0]);
                  sub_100050F04((uint64_t)v110, "foreground");
                  __int128 v53 = sub_100003F94(v116, "state");
                  sub_1000041AC((uint64_t)v110);
                  char v54 = *(_BYTE *)v53;
                  *(_BYTE *)__int128 v53 = v110[0];
                  v110[0] = v54;
                  unint64_t v55 = (uint64_t *)v53[1];
                  v53[1] = (uint64_t)v111;
                  unsigned __int8 v111 = v55;
                  sub_1000041AC((uint64_t)v53);
                  sub_1000041AC((uint64_t)v110);
                  sub_10000425C(&v111, v110[0]);
                  sub_100050F04((uint64_t)v108, "activation");
                  unint64_t v56 = sub_100003F94(v116, "reason");
                  sub_1000041AC((uint64_t)v108);
                  char v57 = *(_BYTE *)v56;
                  *(_BYTE *)unint64_t v56 = v108[0];
                  v108[0] = v57;
                  __int128 v58 = (uint64_t *)v56[1];
                  v56[1] = (uint64_t)v109;
                  uint64_t v109 = v58;
                  sub_1000041AC((uint64_t)v56);
                  sub_1000041AC((uint64_t)v108);
                  sub_10000425C(&v109, v108[0]);
                  LODWORD(v59) = vcvtmd_u64_f64(v28);
                  v106[0] = 6;
                  int v107 = v59;
                  sub_1000041AC((uint64_t)v106);
                  sub_1000041AC((uint64_t)v106);
                  unint64_t v60 = sub_100003F94(v116, "duration");
                  sub_1000041AC((uint64_t)v106);
                  unsigned __int8 v61 = *(_BYTE *)v60;
                  *(_BYTE *)unint64_t v60 = v106[0];
                  v106[0] = v61;
                  __int128 v62 = (uint64_t *)v60[1];
                  v60[1] = (uint64_t)v107;
                  int v107 = v62;
                  sub_1000041AC((uint64_t)v60);
                  sub_1000041AC((uint64_t)v106);
                  sub_10000425C(&v107, v106[0]);
                  if (v94)
                  {
                    unsigned __int8 v112 = (char *)[v94 UTF8String];
                    sub_10000E89C((uint64_t)v104, &v112);
                    unint64_t v63 = sub_100003F94(v116, "executableName");
                    sub_1000041AC((uint64_t)v104);
                    char v64 = *(_BYTE *)v63;
                    *(_BYTE *)unint64_t v63 = v104[0];
                    v104[0] = v64;
                    uint64_t v65 = (uint64_t *)v63[1];
                    v63[1] = (uint64_t)v105;
                    uint64_t v105 = v65;
                    sub_1000041AC((uint64_t)v63);
                    sub_1000041AC((uint64_t)v104);
                    sub_10000425C(&v105, v104[0]);
                  }

                  if (v39)
                  {
                    signed int v66 = [v39 intValue];
                    v102[0] = 5;
                    int v103 = (uint64_t *)v66;
                    sub_1000041AC((uint64_t)v102);
                    sub_1000041AC((uint64_t)v102);
                    uint64_t v67 = sub_100003F94(v116, "dyldPlatform");
                    sub_1000041AC((uint64_t)v102);
                    unsigned __int8 v68 = *(_BYTE *)v67;
                    *(_BYTE *)uint64_t v67 = v102[0];
                    v102[0] = v68;
                    __int128 v69 = (uint64_t *)v67[1];
                    v67[1] = (uint64_t)v103;
                    int v103 = v69;
                    sub_1000041AC((uint64_t)v67);
                    sub_1000041AC((uint64_t)v102);
                    sub_10000425C(&v103, v102[0]);
                  }

                  if (v42)
                  {
                    unsigned int v70 = [v42 BOOLValue];
                    v100[0] = 4;
                    unint64_t v101 = v70;
                    sub_1000041AC((uint64_t)v100);
                    sub_1000041AC((uint64_t)v100);
                    unint64_t v71 = sub_100003F94(v116, "isNativeArch");
                    sub_1000041AC((uint64_t)v100);
                    unsigned __int8 v72 = *(_BYTE *)v71;
                    *(_BYTE *)unint64_t v71 = v100[0];
                    v100[0] = v72;
                    char v73 = (uint64_t *)v71[1];
                    v71[1] = v101;
                    unint64_t v101 = (unint64_t)v73;
                    sub_1000041AC((uint64_t)v71);
                    sub_1000041AC((uint64_t)v100);
                    sub_10000425C((uint64_t **)&v101, v100[0]);
                  }

                  if (v45)
                  {
                    unsigned __int8 v112 = (char *)[v45 UTF8String];
                    sub_10000E89C((uint64_t)v98, &v112);
                    __int128 v74 = sub_100003F94(v116, "shortVersion");
                    sub_1000041AC((uint64_t)v98);
                    char v75 = *(_BYTE *)v74;
                    *(_BYTE *)__int128 v74 = v98[0];
                    v98[0] = v75;
                    char v76 = (uint64_t *)v74[1];
                    v74[1] = (uint64_t)v99;
                    int v99 = v76;
                    sub_1000041AC((uint64_t)v74);
                    sub_1000041AC((uint64_t)v98);
                    sub_10000425C(&v99, v98[0]);
                  }

                  if (v48)
                  {
                    unsigned __int8 v112 = (char *)[v48 UTF8String];
                    sub_10000E89C((uint64_t)v96, &v112);
                    BOOL v77 = sub_100003F94(v116, "exactBundleVersion");
                    sub_1000041AC((uint64_t)v96);
                    char v78 = *(_BYTE *)v77;
                    *(_BYTE *)BOOL v77 = v96[0];
                    v96[0] = v78;
                    char v79 = (uint64_t *)v77[1];
                    v77[1] = (uint64_t)v97;
                    v97 = v79;
                    sub_1000041AC((uint64_t)v77);
                    sub_1000041AC((uint64_t)v96);
                    sub_10000425C(&v97, v96[0]);
                  }

                  v90[2](v90, v116);
                  sub_1000041AC((uint64_t)v116);
                  sub_10000425C((uint64_t **)&v116[8], v116[0]);
                }

                else
                {
                  uint64_t v29 = (os_log_s *)(id)qword_1001318E8;
                  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
                  {
                    __int128 v30 = (void *)objc_claimAutoreleasedReturnValue([v21 stringValue]);
                    *(_DWORD *)unint64_t v116 = v83;
                    *(void *)&v116[4] = v30;
                    *(_WORD *)&v116[12] = 2048;
                    *(double *)&v116[14] = v28;
                    _os_log_debug_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEBUG,  "[AppUsage] Skipping event for %@ with negative time interval of %f",  v116,  0x16u);
                  }
                }
              }
            }

            id v18 = -[os_log_s countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v120,  buf,  16LL);
            if (v18) {
              continue;
            }
            break;
          }
        }
      }

void sub_100050A4C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20, void *a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, void *a27, uint64_t a28, uint64_t a29, void *a30, void *a31)
{
  _Unwind_Resume(a1);
}

void sub_100050CF0(int a1)
{
  if (os_variant_is_darwinos("com.apple.CoreAnalytics"))
  {
    double v2 = (os_log_s *)qword_1001318E8;
    if (os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "[AppUsage] WARNING: Ignoring AppUsage::initializeSyncTime on darwinOS.",  buf,  2u);
    }
  }

  else if (a1 == 1 && sub_100092D10() <= 0.0)
  {
    double v3 = (os_log_s *)qword_1001318E8;
    if (os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)double v4 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "[AppUsage] Setting app usage sync time after an OS update",  v4,  2u);
    }

    sub_100050DFC();
  }

void sub_100050DFC()
{
  if (os_variant_is_darwinos("com.apple.CoreAnalytics"))
  {
    int v0 = (os_log_s *)qword_1001318E8;
    if (os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_INFO,  "[AppUsage] WARNING: Ignoring AppUsage::resetSyncTime on darwinOS.",  buf,  2u);
    }
  }

  else
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
    [v2 timeIntervalSince1970];
    sub_100092DCC(v1);
  }

void sub_100050EE8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

uint64_t sub_100050F04(uint64_t a1, char *a2)
{
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(_BYTE *)a1 = 3;
  *(void *)(a1 + _Block_object_dispose(va, 8) = sub_100050F4C(a2);
  sub_1000041AC(a1);
  sub_1000041AC(a1);
  return a1;
}

void *sub_100050F4C(char *a1)
{
  id v2 = operator new(0x18uLL);
  sub_100005064(v2, a1);
  return v2;
}

void sub_100050F80(_Unwind_Exception *a1)
{
}

void *sub_100050F94@<X0>(void *a1@<X8>)
{
  id v2 = operator new(0x20uLL);
  v2[1] = 0LL;
  v2[2] = 0LL;
  void *v2 = off_100127EE0;
  a1[1] = v2;
  v2[3] = &off_100127E90;
  double result = v2 + 3;
  *a1 = result;
  return result;
}

void sub_100050FDC(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  __int128 v31 = 0uLL;
  if (sub_10006F0AC())
  {
    sub_100005064(v28, "file:internal-defaultConfig");
    sub_1000411EC(&__p);
    sub_10004F83C((__int128 *)v28, (__n128 *)&__p, &v30);
    __int128 v2 = v30;
    __int128 v30 = 0uLL;
    double v3 = (std::__shared_weak_count *)*((void *)&v31 + 1);
    __int128 v31 = v2;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        unint64_t v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }

    uint64_t v6 = (std::__shared_weak_count *)*((void *)&v30 + 1);
    if (*((void *)&v30 + 1))
    {
      id v7 = (unint64_t *)(*((void *)&v30 + 1) + 8LL);
      do
        unint64_t v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }

    if (v29 < 0) {
      operator delete(v28[0]);
    }
    if ((void)v31)
    {
      sub_10002FBF4((char **)a1, &v31);
      if ((void)v31) {
        goto LABEL_34;
      }
    }
  }

  sub_100005064(v28, "file:external-defaultConfig");
  sub_10006F208(&__p);
  sub_10004F83C((__int128 *)v28, (__n128 *)&__p, &v30);
  __int128 v9 = v30;
  __int128 v30 = 0uLL;
  UInt32 v10 = (std::__shared_weak_count *)*((void *)&v31 + 1);
  __int128 v31 = v9;
  if (v10)
  {
    uint64_t v11 = (unint64_t *)&v10->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

  mach_port_name_t v13 = (std::__shared_weak_count *)*((void *)&v30 + 1);
  if (*((void *)&v30 + 1))
  {
    unint64_t v14 = (unint64_t *)(*((void *)&v30 + 1) + 8LL);
    do
      unint64_t v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

  if (v29 < 0) {
    operator delete(v28[0]);
  }
  if ((void)v31)
  {
    sub_10002FBF4((char **)a1, &v31);
    if ((void)v31)
    {
LABEL_34:
      *(void *)&__int128 v30 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v30 + 1) = 0xAAAAAAAAAAAAAAAALL;
      sub_100005064(v28, "file:tasking");
      sub_1000431F0(&__p);
      v16.n128_f64[0] = sub_100043EEC((__int128 *)v28, (__n128 *)&__p, &v31, &v30);
      if (v29 < 0) {
        operator delete(v28[0]);
      }
      if ((void)v30) {
        sub_10002FBF4((char **)a1, &v30);
      }
      size_t v17 = (std::__shared_weak_count *)*((void *)&v30 + 1);
      if (*((void *)&v30 + 1))
      {
        id v18 = (unint64_t *)(*((void *)&v30 + 1) + 8LL);
        do
          unint64_t v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v17->__on_zero_shared)(v17, v16);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
    }
  }

  if (sub_10006F0AC())
  {
    *(void *)&__int128 v30 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v30 + 1) = 0xAAAAAAAAAAAAAAAALL;
    sub_100005064(v28, "file:developer");
    sub_1000411FC(&__p);
    __n128 v20 = sub_10000E204((uint64_t)v28, (__n128 *)&__p, &v30);
    if (v29 < 0) {
      operator delete(v28[0]);
    }
    if ((void)v30) {
      sub_10002FBF4((char **)a1, &v30);
    }
    char v21 = (std::__shared_weak_count *)*((void *)&v30 + 1);
    if (*((void *)&v30 + 1))
    {
      uint64_t v22 = (unint64_t *)(*((void *)&v30 + 1) + 8LL);
      do
        unint64_t v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v21->__on_zero_shared)(v21, v20);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }

  BOOL v24 = (std::__shared_weak_count *)*((void *)&v31 + 1);
  if (*((void *)&v31 + 1))
  {
    unint64_t v25 = (unint64_t *)(*((void *)&v31 + 1) + 8LL);
    do
      unint64_t v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }

void sub_10005137C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

void sub_100051390(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100127EE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000513A0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100127EE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_1000513C0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

BOOL sub_1000513D0(unsigned int **a1)
{
  double v1 = *a1;
  if (*a1 == (unsigned int *)-1LL)
  {
    id v7 = (os_log_s *)qword_100131780;
    BOOL result = os_log_type_enabled((os_log_t)qword_100131780, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    sub_1000D8D8C(v7);
    return 0LL;
  }

  a1[2] = v1;
  uint64_t v2 = *v1;
  if ((_DWORD)v2 != -258926936)
  {
    unint64_t v8 = (os_log_s *)qword_100131780;
    BOOL result = os_log_type_enabled((os_log_t)qword_100131780, OS_LOG_TYPE_FAULT);
    if (!result) {
      return result;
    }
    sub_1000D8EE8(v2, v8, v9, v10, v11, v12, v13, v14);
    return 0LL;
  }

  if (v1[1] != 1)
  {
    unint64_t v15 = (os_log_s *)qword_100131780;
    BOOL result = os_log_type_enabled((os_log_t)qword_100131780, OS_LOG_TYPE_FAULT);
    if (!result) {
      return result;
    }
    sub_1000D8E78(v15, v16, v17, v18, v19, v20, v21, v22);
    return 0LL;
  }

  unint64_t v3 = v1[5];
  unint64_t v4 = (unint64_t)a1[1];
  if (v4 < v3)
  {
    unint64_t v5 = (os_log_s *)qword_100131780;
    BOOL result = os_log_type_enabled((os_log_t)qword_100131780, OS_LOG_TYPE_FAULT);
    if (!result) {
      return result;
    }
    sub_1000D8DF4(v3, v4, v5);
    return 0LL;
  }

  a1[3] = (unsigned int *)((char *)v1 + v3 + 1);
  return 1LL;
}

uint64_t *sub_100051500@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X8>)
{
  unint64_t v4 = (uint64_t *)operator new(0x20uLL);
  if (*(char *)(a1 + 23) < 0)
  {
    sub_10000B8BC(__p, *(void **)a1, *(void *)(a1 + 8));
  }

  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a1;
    uint64_t v8 = *(void *)(a1 + 16);
  }

  sub_100051614(v4, (const char *)__p);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[0]);
  }
  if (sub_1000513D0((unsigned int **)v4))
  {
    *a2 = v4;
    BOOL result = (uint64_t *)operator new(0x20uLL);
    *BOOL result = (uint64_t)&off_100127F30;
    result[1] = 0LL;
    result[2] = 0LL;
    result[3] = (uint64_t)v4;
  }

  else
  {
    uint64_t v6 = (void *)sub_10004D0DC((uint64_t)v4);
    operator delete(v6);
    BOOL result = 0LL;
    *a2 = 0LL;
  }

  a2[1] = result;
  return result;
}

void sub_1000515F0(_Unwind_Exception *a1)
{
}

uint64_t *sub_100051614(uint64_t *a1, const char *a2)
{
  *a1 = -1LL;
  a1[1] = 0LL;
  a1[3] = 0LL;
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  sub_10004D0E0(a2, &v8);
  uint64_t v3 = v8;
  uint64_t v4 = v9;
  uint64_t v8 = -1LL;
  uint64_t v9 = 0LL;
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  v10[0] = v5;
  v10[1] = v6;
  sub_10004D0DC((uint64_t)v10);
  sub_10004D0DC((uint64_t)&v8);
  return a1;
}

uint64_t sub_1000516B0(uint64_t *a1, const void *a2, size_t a3)
{
  uint64_t v3 = *a1;
  if (*a1 == -1) {
    uint64_t v3 = 0LL;
  }
  uint64_t v19 = v3;
  unsigned int v4 = *(_DWORD *)(a1[2] + 8);
  __p[0] = 0LL;
  __p[1] = 0LL;
  uint64_t v24 = 0LL;
  if (!v4) {
    return 0LL;
  }
  unsigned int v7 = 1;
  while (1)
  {
    unsigned int v8 = (v7 + v4) >> 1;
    sub_100005064(&v21, (char *)(v19 + *(unsigned int *)(a1[2] + 4LL * (v8 - 1) + 24)));
    if (SHIBYTE(v24) < 0) {
      operator delete(__p[0]);
    }
    *(_OWORD *)std::string __p = v21;
    uint64_t v9 = (void *)v21;
    uint64_t v24 = v22;
    int v10 = SHIBYTE(v22);
    size_t v11 = v22 >= 0 ? HIBYTE(v22) : *((void *)&v21 + 1);
    uint64_t v12 = v22 >= 0 ? __p : (void **)v21;
    if (a3 == v11 && !memcmp(a2, v12, a3)) {
      break;
    }
    if (v11 >= a3) {
      size_t v13 = a3;
    }
    else {
      size_t v13 = v11;
    }
    int v14 = memcmp(a2, v12, v13);
    BOOL v15 = a3 < v11;
    if (a3 == v11 || v14 != 0) {
      BOOL v15 = v14 < 0;
    }
    if (v15) {
      unsigned int v4 = v8 - 1;
    }
    else {
      unsigned int v7 = v8 + 1;
    }
    if (v7 > v4)
    {
      uint64_t v17 = 0LL;
      if ((v10 & 0x80000000) == 0) {
        return v17;
      }
      goto LABEL_31;
    }
  }

  uint64_t v17 = 1LL;
  if ((v10 & 0x80000000) == 0) {
    return v17;
  }
LABEL_31:
  operator delete(v9);
  return v17;
}

void sub_100051838(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

void sub_100051844(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (*a1 == -1LL)
  {
    *(void *)a2 = xpc_null_create();
    *(void *)(a2 + _Block_object_dispose(va, 8) = 0LL;
  }

  else
  {
    sub_10004D2AC((uint64_t)a1, (xpc_object_t *)a2);
  }

void sub_10005188C(std::__shared_weak_count *a1)
{
}

void sub_1000518A0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1)
  {
    uint64_t v2 = (void *)sub_10004D0DC(v1);
    operator delete(v2);
  }

uint64_t sub_1000518C4(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

void sub_100051904( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void *sub_100051914(void *result, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  uint64_t v6 = a2[1];
  *BOOL result = *a2;
  result[1] = v6;
  if (v6)
  {
    unsigned int v7 = (unint64_t *)(v6 + 8);
    do
      unint64_t v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }

  uint64_t v9 = a3[1];
  result[2] = *a3;
  result[3] = v9;
  if (v9)
  {
    int v10 = (unint64_t *)(v9 + 8);
    do
      unint64_t v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }

  uint64_t v12 = a4[1];
  result[4] = *a4;
  result[5] = v12;
  if (v12)
  {
    size_t v13 = (unint64_t *)(v12 + 8);
    do
      unint64_t v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }

  uint64_t v15 = a5[1];
  result[6] = *a5;
  result[7] = v15;
  if (v15)
  {
    uint64_t v16 = (unint64_t *)(v15 + 8);
    do
      unint64_t v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }

  uint64_t v18 = a6[1];
  result[8] = *a6;
  result[9] = v18;
  if (v18)
  {
    uint64_t v19 = (unint64_t *)(v18 + 8);
    do
      unint64_t v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }

  return result;
}

void sub_1000519BC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v6 = sub_100010904(a1[2]);
  __int128 v50 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  v51.__d_.__rep_ = v6;
  unint64_t v49 = 0xAAAAAAAAAAAAAAAALL;
  sub_10005227C(a1, a2, &v51, (uint64_t)&v49);
  sub_1000527A0((uint64_t)a1, (unsigned __int8 *)&v49);
  unsigned int v7 = (os_log_s *)(id)qword_100131940;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    else {
      unint64_t v8 = *(void **)a2;
    }
    sub_100006200(a3, -1, 0x20u, 0LL, 1, v56);
    int v9 = v56[23];
    int v10 = *(_BYTE **)v56;
    sub_100006200((uint64_t)&v49, -1, 0x20u, 0LL, 1, &__p);
    unint64_t v11 = v56;
    if (v9 < 0) {
      unint64_t v11 = v10;
    }
    if (v47 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    *(_DWORD *)__int128 buf = 136446722;
    *(void *)&uint8_t buf[4] = v8;
    *(_WORD *)&_BYTE buf[12] = 2082;
    *(void *)&buf[14] = v11;
    *(_WORD *)&buf[22] = 2082;
    *(void *)&_BYTE buf[24] = p_p;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[DefaultSink] Triggering CA log with reason: %{public}s, options: %{public}s, public header elements: %{public}s",  buf,  0x20u);
    if (SHIBYTE(v47) < 0) {
      operator delete(__p);
    }
    if ((v56[23] & 0x80000000) != 0) {
      operator delete(*(void **)v56);
    }
  }

  sub_100052A8C((uint64_t)a1, (unsigned __int8 *)&v49);
  __int128 v42 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
  int v13 = *(char *)(a2 + 23);
  if (v13 < 0)
  {
    if (*(void *)(a2 + 8) != 8LL) {
      goto LABEL_20;
    }
    unint64_t v14 = *(void **)a2;
  }

  else
  {
    unint64_t v14 = (void *)a2;
    if (v13 != 8) {
      goto LABEL_20;
    }
  }

  if (*v14 != 0x657461647055736FLL) {
    goto LABEL_20;
  }
  std::string __p = "overrideOSBuildString";
  unint64_t v60 = (void (*)(uint64_t))0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v37 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v37 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__int128 buf = v37;
  *(_OWORD *)&uint8_t buf[16] = v37;
  sub_100008780(a3, (const std::string::value_type **)&__p, (uint64_t)buf);
  *(void *)unint64_t v56 = a3;
  memset(&v56[8], 0, 24);
  *(void *)&__int128 v57 = 0x8000000000000000LL;
  sub_100008AC8((unsigned __int8 **)v56);
  if (sub_1000087E8((unsigned __int8 **)buf, (unsigned __int8 **)v56))
  {
    uint64_t v38 = sub_10009AE9C();
    if (!v38) {
      goto LABEL_20;
    }
  }

  else
  {
    uint64_t v38 = (uint64_t)sub_100008924((unsigned __int8 **)buf);
  }

  if (*(_BYTE *)v38 == 3)
  {
    unint64_t v39 = *(uint64_t **)(v38 + 8);
    if (v39)
    {
      __int128 v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v39));
      -[NSMutableDictionary setObject:forKeyedSubscript:](v42, "setObject:forKeyedSubscript:", v40, @"os_version");
    }
  }

void sub_10005214C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t *a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, void *__p, uint64_t a34, int a35, __int16 a36, char a37, char a38)
{
  sub_10000417C(&a18);
  _Unwind_Resume(a1);
}

void sub_10005227C( uint64_t *a1@<X0>, uint64_t a2@<X1>, const std::chrono::system_clock::time_point *a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)(a4 + _Block_object_dispose(va, 8) = 0LL;
  *(_BYTE *)a4 = 0;
  sub_1000041AC(a4);
  sub_1000041AC(a4);
  sub_100050F04((uint64_t)v51, "<metadata>");
  unint64_t v8 = sub_100003F94((unsigned __int8 *)a4, "_marker");
  sub_1000041AC((uint64_t)v51);
  char v9 = *(_BYTE *)v8;
  *(_BYTE *)unint64_t v8 = v51[0];
  v51[0] = v9;
  int v10 = (uint64_t *)v8[1];
  v8[1] = (uint64_t)v52;
  unint64_t v52 = v10;
  sub_1000041AC((uint64_t)v8);
  sub_1000041AC((uint64_t)v51);
  sub_10000425C(&v52, v51[0]);
  sub_100054CEC((uint64_t)v49, "2.4");
  unint64_t v11 = sub_100003F94((unsigned __int8 *)a4, "version");
  sub_1000041AC((uint64_t)v49);
  char v12 = *(_BYTE *)v11;
  *(_BYTE *)unint64_t v11 = v49[0];
  v49[0] = v12;
  int v13 = (uint64_t *)v11[1];
  v11[1] = (uint64_t)v50;
  __int128 v50 = v13;
  sub_1000041AC((uint64_t)v11);
  sub_1000041AC((uint64_t)v49);
  sub_10000425C(&v50, v49[0]);
  sub_100043840(a3, &__p);
  sub_100008E5C((uint64_t)v47, (uint64_t)&__p);
  unint64_t v14 = sub_100003F94((unsigned __int8 *)a4, "startTimestamp");
  sub_1000041AC((uint64_t)v47);
  char v15 = *(_BYTE *)v14;
  *(_BYTE *)unint64_t v14 = v47[0];
  v47[0] = v15;
  unint64_t v16 = (uint64_t *)v14[1];
  v14[1] = (uint64_t)v48;
  uint64_t v48 = v16;
  sub_1000041AC((uint64_t)v14);
  sub_1000041AC((uint64_t)v47);
  sub_10000425C(&v48, v47[0]);
  sub_10000B990((uint64_t)v44, a2);
  unsigned int v17 = sub_100003F94((unsigned __int8 *)a4, "rolloverReason");
  sub_1000041AC((uint64_t)v44);
  char v18 = *(_BYTE *)v17;
  *(_BYTE *)unsigned int v17 = v44[0];
  v44[0] = v18;
  uint64_t v19 = (uint64_t *)v17[1];
  v17[1] = (uint64_t)v45;
  unint64_t v45 = v19;
  sub_1000041AC((uint64_t)v17);
  sub_1000041AC((uint64_t)v44);
  sub_10000425C(&v45, v44[0]);
  if (sub_1000106E8(a1[2]))
  {
    v42[0] = 4;
    uint64_t v43 = 1LL;
    sub_1000041AC((uint64_t)v42);
    sub_1000041AC((uint64_t)v42);
    int v20 = sub_100003F94((unsigned __int8 *)a4, "partialDataFromDay");
    sub_1000041AC((uint64_t)v42);
    unsigned __int8 v21 = *(_BYTE *)v20;
    *(_BYTE *)int v20 = v42[0];
    v42[0] = v21;
    int v22 = (uint64_t *)v20[1];
    v20[1] = v43;
    uint64_t v43 = (uint64_t)v22;
    sub_1000041AC((uint64_t)v20);
    sub_1000041AC((uint64_t)v42);
    sub_10000425C((uint64_t **)&v43, v42[0]);
  }

  sub_10004A4C4((uint64_t)v40, "sqlite");
  uint64_t v23 = sub_100003F94((unsigned __int8 *)a4, "stateDbType");
  sub_1000041AC((uint64_t)v40);
  char v24 = *(_BYTE *)v23;
  *(_BYTE *)uint64_t v23 = v40[0];
  v40[0] = v24;
  unint64_t v25 = (uint64_t *)v23[1];
  v23[1] = (uint64_t)v41;
  unint64_t v41 = v25;
  sub_1000041AC((uint64_t)v23);
  sub_1000041AC((uint64_t)v40);
  sub_10000425C(&v41, v40[0]);
  uint64_t v26 = a1[6] + *(void *)(*(void *)a1[6] - 88LL);
  int v27 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 40LL))(v26);
  v38[0] = 5;
  unint64_t v39 = (uint64_t *)v27;
  sub_1000041AC((uint64_t)v38);
  sub_1000041AC((uint64_t)v38);
  double v28 = sub_100003F94((unsigned __int8 *)a4, "stateDbVersion");
  sub_1000041AC((uint64_t)v38);
  unsigned __int8 v29 = *(_BYTE *)v28;
  *(_BYTE *)double v28 = v38[0];
  v38[0] = v29;
  __int128 v30 = (uint64_t *)v28[1];
  v28[1] = (uint64_t)v39;
  unint64_t v39 = v30;
  sub_1000041AC((uint64_t)v28);
  sub_1000041AC((uint64_t)v38);
  sub_10000425C(&v39, v38[0]);
  uint64_t v31 = a1[4] + *(void *)(*(void *)a1[4] - 88LL);
  int v32 = (*(uint64_t (**)(uint64_t))(*(void *)v31 + 40LL))(v31);
  v36[0] = 5;
  __int128 v37 = (uint64_t *)v32;
  sub_1000041AC((uint64_t)v36);
  sub_1000041AC((uint64_t)v36);
  id v33 = sub_100003F94((unsigned __int8 *)a4, "configDbVersion");
  sub_1000041AC((uint64_t)v36);
  unsigned __int8 v34 = *(_BYTE *)v33;
  *(_BYTE *)id v33 = v36[0];
  v36[0] = v34;
  uint64_t v35 = (uint64_t *)v33[1];
  v33[1] = (uint64_t)v37;
  __int128 v37 = v35;
  sub_1000041AC((uint64_t)v33);
  sub_1000041AC((uint64_t)v36);
  sub_10000425C(&v37, v36[0]);
}

void sub_100052708( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t *a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24, char a25)
{
}

void sub_1000527A0(uint64_t a1, unsigned __int8 *a2)
{
  unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
  int v20 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr))(**(void **)(a1 + 32) + 96LL))(&v19);
  if (v19 == 1)
  {
    double v28 = "uuid";
    unint64_t v27 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v3 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)std::stringbuf::string_type __p = v3;
    *(_OWORD *)&__p[16] = v3;
    sub_100008780((uint64_t)&v19, &v28, (uint64_t)__p);
    unsigned __int8 v21 = (unsigned __int8 *)&v19;
    uint64_t v22 = 0LL;
    uint64_t v23 = 0LL;
    uint64_t v24 = 0LL;
    unint64_t v25 = 0x8000000000000000LL;
    sub_100008AC8(&v21);
    else {
      uint64_t v4 = (uint64_t)sub_100008924((unsigned __int8 **)__p);
    }
    uint64_t v5 = (_BYTE *)v4;
    double v28 = "parentUuid";
    unint64_t v27 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v6 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)std::stringbuf::string_type __p = v6;
    *(_OWORD *)&__p[16] = v6;
    sub_100008780((uint64_t)&v19, &v28, (uint64_t)__p);
    unsigned __int8 v21 = (unsigned __int8 *)&v19;
    uint64_t v22 = 0LL;
    uint64_t v23 = 0LL;
    uint64_t v24 = 0LL;
    unint64_t v25 = 0x8000000000000000LL;
    sub_100008AC8(&v21);
    else {
      uint64_t v7 = (uint64_t)sub_100008924((unsigned __int8 **)__p);
    }
    unint64_t v8 = (_BYTE *)v7;
    memset(__p, 170, 24);
    sub_100006200((uint64_t)&v19, -1, 0x20u, 0LL, 0, __p);
    if (*v5 == 3)
    {
      sub_10000C3E4((uint64_t)v17, (uint64_t)v5);
      char v9 = sub_100003F94(a2, "configUuid");
      sub_1000041AC((uint64_t)v17);
      char v10 = *(_BYTE *)v9;
      *(_BYTE *)char v9 = v17[0];
      v17[0] = v10;
      unint64_t v11 = (uint64_t *)v9[1];
      v9[1] = (uint64_t)v18;
      char v18 = v11;
      sub_1000041AC((uint64_t)v9);
      sub_1000041AC((uint64_t)v17);
      sub_10000425C(&v18, v17[0]);
    }

    if (*v8 == 3)
    {
      sub_10000C3E4((uint64_t)v15, (uint64_t)v8);
      char v12 = sub_100003F94(a2, "configParentUuid");
      sub_1000041AC((uint64_t)v15);
      char v13 = *(_BYTE *)v12;
      *(_BYTE *)char v12 = v15[0];
      v15[0] = v13;
      unint64_t v14 = (uint64_t *)v12[1];
      v12[1] = (uint64_t)v16;
      unint64_t v16 = v14;
      sub_1000041AC((uint64_t)v12);
      sub_1000041AC((uint64_t)v15);
      sub_10000425C(&v16, v15[0]);
    }

    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
  }

  sub_1000041AC((uint64_t)&v19);
  sub_10000425C(&v20, v19);
}

void sub_100052A3C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, char a12, uint64_t a13, uint64_t *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *__p, uint64_t a22, int a23, __int16 a24, char a25, char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  sub_10000417C(&a14);
  _Unwind_Resume(a1);
}

void sub_100052A8C(uint64_t a1, unsigned __int8 *a2)
{
  unint64_t v98 = 0xAAAAAAAAAAAAAAAALL;
  int v99 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10009288C(&v98);
  uint64_t v4 = sub_100003F94((unsigned __int8 *)&v98, "preferred-user-interface-language");
  sub_10000C3E4((uint64_t)v96, (uint64_t)v4);
  uint64_t v5 = sub_100003F94(a2, "_preferredUserInterfaceLanguage");
  sub_1000041AC((uint64_t)v96);
  char v6 = *(_BYTE *)v5;
  *(_BYTE *)uint64_t v5 = v96[0];
  v96[0] = v6;
  uint64_t v7 = (uint64_t *)v5[1];
  v5[1] = (uint64_t)v97;
  v97 = v7;
  sub_1000041AC((uint64_t)v5);
  sub_1000041AC((uint64_t)v96);
  sub_10000425C(&v97, v96[0]);
  unint64_t v8 = sub_100003F94((unsigned __int8 *)&v98, "user-interface-language");
  sub_10000C3E4((uint64_t)v94, (uint64_t)v8);
  char v9 = sub_100003F94(a2, "_userInterfaceLanguage");
  sub_1000041AC((uint64_t)v94);
  char v10 = *(_BYTE *)v9;
  *(_BYTE *)char v9 = v94[0];
  v94[0] = v10;
  unint64_t v11 = (uint64_t *)v9[1];
  v9[1] = (uint64_t)v95;
  uint64_t v95 = v11;
  sub_1000041AC((uint64_t)v9);
  sub_1000041AC((uint64_t)v94);
  sub_10000425C(&v95, v94[0]);
  char v12 = sub_100003F94((unsigned __int8 *)&v98, "user-set-region-format");
  sub_10000C3E4((uint64_t)v92, (uint64_t)v12);
  char v13 = sub_100003F94(a2, "_userSetRegionFormat");
  sub_1000041AC((uint64_t)v92);
  char v14 = *(_BYTE *)v13;
  *(_BYTE *)char v13 = v92[0];
  v92[0] = v14;
  char v15 = (uint64_t *)v13[1];
  v13[1] = (uint64_t)v93;
  __int128 v93 = v15;
  sub_1000041AC((uint64_t)v13);
  sub_1000041AC((uint64_t)v92);
  sub_10000425C(&v93, v92[0]);
  unint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[OSASystemConfiguration sharedInstance](&OBJC_CLASS___OSASystemConfiguration, "sharedInstance"));
  v90[0] = 4;
  unint64_t v91 = [v16 optIn3rdParty];
  sub_1000041AC((uint64_t)v90);
  sub_1000041AC((uint64_t)v90);
  unsigned int v17 = sub_100003F94(a2, "optIn3rdParty");
  sub_1000041AC((uint64_t)v90);
  unsigned __int8 v18 = *(_BYTE *)v17;
  *(_BYTE *)unsigned int v17 = v90[0];
  v90[0] = v18;
  unint64_t v19 = (uint64_t *)v17[1];
  v17[1] = v91;
  unint64_t v91 = (unint64_t)v19;
  sub_1000041AC((uint64_t)v17);
  sub_1000041AC((uint64_t)v90);
  sub_10000425C((uint64_t **)&v91, v90[0]);

  char v89 = -86;
  v87[0] = 5;
  id v88 = (uint64_t *)(int)sub_100097AC0();
  sub_1000041AC((uint64_t)v87);
  sub_1000041AC((uint64_t)v87);
  int v20 = sub_100003F94(a2, "deviceCapacity");
  sub_1000041AC((uint64_t)v87);
  unsigned __int8 v21 = *(_BYTE *)v20;
  *(_BYTE *)int v20 = v87[0];
  v87[0] = v21;
  uint64_t v22 = (uint64_t *)v20[1];
  v20[1] = (uint64_t)v88;
  id v88 = v22;
  sub_1000041AC((uint64_t)v20);
  sub_1000041AC((uint64_t)v87);
  sub_10000425C(&v88, v87[0]);
  unint64_t v85 = 0xAAAAAAAAAAAAAAAALL;
  id v86 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_100097B8C((uint64_t)&v85);
  if ((_BYTE)v85)
  {
    if (v85 == 2)
    {
      if (*v86 == v86[1]) {
        goto LABEL_8;
      }
    }

    else if (v85 == 1 && !v86[2])
    {
      goto LABEL_8;
    }

    char v79 = (unsigned __int8 *)&v85;
    __int128 v80 = 0uLL;
    *(void *)&__int128 v81 = 0LL;
    *((void *)&v81 + 1) = 0x8000000000000000LL;
    sub_100021128(&v79);
    unsigned __int8 v82 = v79;
    __int128 v83 = v80;
    __int128 v84 = v81;
    char v73 = (unsigned __int8 *)&v85;
    __int128 v74 = 0uLL;
    *(void *)&__int128 v75 = 0LL;
    *((void *)&v75 + 1) = 0x8000000000000000LL;
    sub_1000211FC(&v73);
    char v76 = v73;
    __int128 v77 = v74;
    __int128 v78 = v75;
    sub_1000548E4((uint64_t)a2, (uint64_t)&v82, (uint64_t)&v76);
  }

LABEL_8:
  unint64_t v71 = 0xAAAAAAAAAAAAAAAALL;
  unsigned __int8 v72 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_100097DE4((uint64_t)&v71);
  char v79 = (unsigned __int8 *)&v71;
  __int128 v80 = 0uLL;
  *(void *)&__int128 v81 = 0LL;
  *((void *)&v81 + 1) = 0x8000000000000000LL;
  sub_100021128(&v79);
  unsigned __int8 v68 = v79;
  __int128 v69 = v80;
  __int128 v70 = v81;
  char v73 = (unsigned __int8 *)&v71;
  __int128 v74 = 0uLL;
  *(void *)&__int128 v75 = 0LL;
  *((void *)&v75 + 1) = 0x8000000000000000LL;
  sub_1000211FC(&v73);
  uint64_t v65 = v73;
  __int128 v66 = v74;
  __int128 v67 = v75;
  sub_1000548E4((uint64_t)a2, (uint64_t)&v68, (uint64_t)&v65);
  unint64_t v63 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v64 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_100098314((uint64_t)&v63);
  char v79 = (unsigned __int8 *)&v63;
  __int128 v80 = 0uLL;
  *(void *)&__int128 v81 = 0LL;
  *((void *)&v81 + 1) = 0x8000000000000000LL;
  sub_100021128(&v79);
  unint64_t v60 = v79;
  __int128 v61 = v80;
  __int128 v62 = v81;
  char v73 = (unsigned __int8 *)&v63;
  __int128 v74 = 0uLL;
  *(void *)&__int128 v75 = 0LL;
  *((void *)&v75 + 1) = 0x8000000000000000LL;
  sub_1000211FC(&v73);
  __int128 v57 = v73;
  __int128 v58 = v74;
  __int128 v59 = v75;
  sub_1000548E4((uint64_t)a2, (uint64_t)&v60, (uint64_t)&v57);
  unint64_t v55 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v56 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_100092F28(&v55);
  char v79 = (unsigned __int8 *)&v55;
  __int128 v80 = 0uLL;
  *(void *)&__int128 v81 = 0LL;
  *((void *)&v81 + 1) = 0x8000000000000000LL;
  sub_100021128(&v79);
  unint64_t v52 = v79;
  __int128 v53 = v80;
  __int128 v54 = v81;
  char v73 = (unsigned __int8 *)&v55;
  __int128 v74 = 0uLL;
  *(void *)&__int128 v75 = 0LL;
  *((void *)&v75 + 1) = 0x8000000000000000LL;
  sub_1000211FC(&v73);
  unint64_t v49 = v73;
  __int128 v50 = v74;
  __int128 v51 = v75;
  sub_1000548E4((uint64_t)a2, (uint64_t)&v52, (uint64_t)&v49);
  unint64_t v47 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v48 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000985D4((uint64_t *)(a1 + 64), (uint64_t)&v47);
  char v79 = (unsigned __int8 *)&v47;
  __int128 v80 = 0uLL;
  *(void *)&__int128 v81 = 0LL;
  *((void *)&v81 + 1) = 0x8000000000000000LL;
  sub_100021128(&v79);
  id v44 = v79;
  __int128 v45 = v80;
  __int128 v46 = v81;
  char v73 = (unsigned __int8 *)&v47;
  __int128 v74 = 0uLL;
  *(void *)&__int128 v75 = 0LL;
  *((void *)&v75 + 1) = 0x8000000000000000LL;
  sub_1000211FC(&v73);
  unint64_t v41 = v73;
  __int128 v42 = v74;
  __int128 v43 = v75;
  sub_1000548E4((uint64_t)a2, (uint64_t)&v44, (uint64_t)&v41);
  unint64_t v39 = 0xAAAAAAAAAAAAAAAALL;
  __int128 v40 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_100098FF8((uint64_t)&v39);
  char v79 = (unsigned __int8 *)&v39;
  __int128 v80 = 0uLL;
  *(void *)&__int128 v81 = 0LL;
  *((void *)&v81 + 1) = 0x8000000000000000LL;
  sub_100021128(&v79);
  uint64_t v36 = v79;
  __int128 v37 = v80;
  __int128 v38 = v81;
  char v73 = (unsigned __int8 *)&v39;
  __int128 v74 = 0uLL;
  *(void *)&__int128 v75 = 0LL;
  *((void *)&v75 + 1) = 0x8000000000000000LL;
  sub_1000211FC(&v73);
  id v33 = v73;
  __int128 v34 = v74;
  __int128 v35 = v75;
  sub_1000548E4((uint64_t)a2, (uint64_t)&v36, (uint64_t)&v33);
  v31[0] = 4;
  int v32 = (uint64_t *)sub_100092968();
  sub_1000041AC((uint64_t)v31);
  sub_1000041AC((uint64_t)v31);
  uint64_t v23 = sub_100003F94(a2, "isGreyMatterAvailable");
  sub_1000041AC((uint64_t)v31);
  unsigned __int8 v24 = *(_BYTE *)v23;
  *(_BYTE *)uint64_t v23 = v31[0];
  v31[0] = v24;
  unint64_t v25 = (uint64_t *)v23[1];
  v23[1] = (uint64_t)v32;
  int v32 = v25;
  sub_1000041AC((uint64_t)v23);
  sub_1000041AC((uint64_t)v31);
  sub_10000425C(&v32, v31[0]);
  v29[0] = 7;
  double v30 = sub_100098FD4();
  sub_1000041AC((uint64_t)v29);
  sub_1000041AC((uint64_t)v29);
  uint64_t v26 = sub_100003F94(a2, "dramSize");
  sub_1000041AC((uint64_t)v29);
  unsigned __int8 v27 = *(_BYTE *)v26;
  *(_BYTE *)uint64_t v26 = v29[0];
  v29[0] = v27;
  double v28 = (uint64_t *)v26[1];
  *((double *)v26 + 1) = v30;
  double v30 = *(double *)&v28;
  sub_1000041AC((uint64_t)v26);
  sub_1000041AC((uint64_t)v29);
  sub_10000425C((uint64_t **)&v30, v29[0]);
  sub_1000041AC((uint64_t)&v39);
  sub_10000425C(&v40, v39);
  sub_1000041AC((uint64_t)&v47);
  sub_10000425C(&v48, v47);
  sub_1000041AC((uint64_t)&v55);
  sub_10000425C(&v56, v55);
  sub_1000041AC((uint64_t)&v63);
  sub_10000425C(&v64, v63);
  sub_1000041AC((uint64_t)&v71);
  sub_10000425C(&v72, v71);
  sub_1000041AC((uint64_t)&v85);
  sub_10000425C(&v86, v85);
  sub_1000041AC((uint64_t)&v98);
  sub_10000425C(&v99, v98);
}

void sub_1000532EC(_Unwind_Exception *a1)
{
}

uint64_t sub_1000533F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 48;
  *(_BYTE *)(a1 + 4_Block_object_dispose(va, 8) = *(_BYTE *)(a2 + 48);
  uint64_t v3 = a1 + 48;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  sub_1000041AC(a2 + 48);
  *(_BYTE *)uint64_t v2 = 0;
  *(void *)(v2 + _Block_object_dispose(va, 8) = 0LL;
  return sub_1000041AC(v3);
}

void sub_10005343C(uint64_t a1)
{
}

void sub_100053468(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 48);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3321888768LL;
  v12[2] = sub_100053618;
  v12[3] = &unk_100127FB0;
  uint64_t v15 = v4;
  id v5 = v3;
  id v13 = v5;
  sub_10000C3E4((uint64_t)v16, a1 + 56);
  char v19 = *(_BYTE *)(a1 + 88);
  __int128 v18 = *(_OWORD *)(a1 + 72);
  __int128 v14 = *(_OWORD *)(a1 + 32);
  v20[0] = off_1001280B8;
  v20[1] = objc_retainBlock(v12);
  unsigned __int8 v21 = v20;
  sub_100041324((uint64_t)v20);
  char v10 = v21;
  if (v21 == v20)
  {
    uint64_t v11 = 4LL;
    char v10 = v20;
    goto LABEL_5;
  }

  if (v21)
  {
    uint64_t v11 = 5LL;
LABEL_5:
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(*v10 + 8 * v11))(v10, v6, v7, v8, v9);
  }

  sub_1000041AC((uint64_t)v16);
  sub_10000425C(&v17, v16[0]);
}

void sub_1000535B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  unsigned int v17 = *(void **)(v15 - 48);
  if (v17 == (void *)(v15 - 72))
  {
    uint64_t v18 = 4LL;
    unsigned int v17 = (void *)(v15 - 72);
  }

  else
  {
    if (!v17) {
      goto LABEL_6;
    }
    uint64_t v18 = 5LL;
  }

  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_6:
  sub_10000417C(v14);

  _Unwind_Resume(a1);
}

void sub_100053618(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  id v3 = [*(id *)(a1 + 32) fileDescriptor];
  int v4 = (int)v3;
  sub_1000537CC((uint64_t)v3, a1 + 64, (int)v3);
  char v5 = *(_BYTE *)(a1 + 96) != 0;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  void v11[2] = sub_100053A5C;
  void v11[3] = &unk_100127F88;
  uint64_t v6 = *(void *)(a1 + 80);
  uint64_t v7 = *(void *)(a1 + 88);
  uint64_t v13 = v2;
  uint64_t v14 = v6;
  int v15 = v4;
  __int128 v12 = *(_OWORD *)(a1 + 40);
  unint64_t v16 = off_100128028;
  unsigned int v17 = objc_retainBlock(v11);
  uint64_t v18 = &v16;
  sub_1000538FC(v2, v5, v7, (uint64_t)&v16);
  uint64_t v8 = v18;
  if (v18 == &v16)
  {
    uint64_t v9 = 4LL;
    uint64_t v8 = &v16;
    goto LABEL_5;
  }

  if (v18)
  {
    uint64_t v9 = 5LL;
LABEL_5:
    (*v8)[v9]();
  }

  char v10 = sub_100054488(&v16);
  sub_1000537CC((uint64_t)v10, (uint64_t)&v16, v4);
  sub_1000041AC((uint64_t)&v16);
  sub_10000425C(&v17, v16);
}

void sub_100053778( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
}

uint64_t sub_1000537CC(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 <= 0)
  {
    uint64_t v8 = (os_log_s *)qword_100131940;
    if (os_log_type_enabled((os_log_t)qword_100131940, OS_LOG_TYPE_ERROR)) {
      sub_1000D8FC0(v8, v9, v10, v11, v12, v13, v14, v15);
    }
    return -1LL;
  }

  else
  {
    memset(__p, 170, sizeof(__p));
    sub_100006200(a2, -1, 0x20u, 0LL, 0, __p);
    if (SHIBYTE(__p[2]) >= 0) {
      int v4 = __p;
    }
    else {
      int v4 = (void **)__p[0];
    }
    if (SHIBYTE(__p[2]) >= 0) {
      size_t v5 = HIBYTE(__p[2]);
    }
    else {
      size_t v5 = (size_t)__p[1];
    }
    ssize_t v6 = write(a3, v4, v5);
    ssize_t v7 = write(a3, "\n", 1uLL) + v6;
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
  }

  return v7;
}

void sub_1000538D8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

uint64_t (***sub_1000538FC(uint64_t a1, char a2, uint64_t a3, uint64_t a4))()
{
  char v12 = a2;
  ssize_t v7 = (os_log_s *)qword_100131918;
  if (os_log_type_enabled((os_log_t)qword_100131918, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[DefaultSink] emitting messages for persisted xform states",  buf,  2u);
  }

  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
  *(void *)__int128 buf = &v12;
  p_std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = &rep;
  uint64_t v15 = a1;
  uint64_t v16 = a4;
  uint64_t v8 = *(void *)(a1 + 48);
  if ((a3 & 0xFF00000000LL) == 0)
  {
    unsigned int v17 = &off_1001282C8;
    uint64_t v18 = buf;
    int v20 = &v17;
    (*(void (**)(uint64_t, uint64_t (***)()))(*(void *)v8 + 112LL))(v8, &v17);
    BOOL result = v20;
    if (v20 != &v17) {
      goto LABEL_5;
    }
LABEL_8:
    uint64_t v10 = 4LL;
    BOOL result = &v17;
    return (uint64_t (***)())((uint64_t (*)(uint64_t (***)()))(*result)[v10])(result);
  }

  unsigned int v17 = &off_100128148;
  uint64_t v18 = buf;
  char v19 = &rep;
  int v20 = &v17;
  (*(void (**)(uint64_t, uint64_t, uint64_t (***)()))(*(void *)v8 + 104LL))(v8, a3, &v17);
  BOOL result = v20;
  if (v20 == &v17) {
    goto LABEL_8;
  }
LABEL_5:
  if (!result) {
    return result;
  }
  uint64_t v10 = 5LL;
  return (uint64_t (***)())((uint64_t (*)(uint64_t (***)()))(*result)[v10])(result);
}

void sub_100053A5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned __int8 *)(a2 + 55);
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0LL) {
    uint64_t v4 = *(void *)(a2 + 40);
  }
  if (v5 >= 0) {
    ssize_t v6 = (char *)(a2 + 32);
  }
  else {
    ssize_t v6 = *(char **)(a2 + 32);
  }
  if (v4 >= 36)
  {
    ssize_t v7 = &v6[v4];
    uint64_t v8 = v6;
    do
    {
      uint64_t v9 = (char *)memchr(v8, 98, v4 - 35);
      if (!v9) {
        break;
      }
      uint64_t v10 = v9;
      if (!memcmp(v9, "b5427173-7342-4a02-b223-56969d089ca1", 0x24uLL))
      {
        if (v10 != v7 && v10 - v6 != -1)
        {
          sub_100005064(&__p, "Count");
          unsigned int v21 = 0;
          int v11 = sub_10003064C((char *)(a2 + 56), (const void **)&__p.__r_.__value_.__l.__data_, &v21);
          v23[0] = 5;
          unsigned __int8 v24 = (uint64_t *)v11;
          sub_1000041AC((uint64_t)v23);
          sub_1000041AC((uint64_t)v23);
          char v12 = sub_100003F94( (unsigned __int8 *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 48LL),  "Total_CA_Heartbeats");
          sub_1000041AC((uint64_t)v23);
          unsigned __int8 v13 = *(_BYTE *)v12;
          *(_BYTE *)char v12 = v23[0];
          v23[0] = v13;
          uint64_t v14 = (uint64_t *)v12[1];
          v12[1] = (uint64_t)v24;
          unsigned __int8 v24 = v14;
          sub_1000041AC((uint64_t)v12);
          sub_1000041AC((uint64_t)v23);
          sub_10000425C(&v24, v23[0]);
          sub_10003DB6C(*(void *)(a1 + 56), (uint64_t)"%Y-%m-%dT%TZ", &__p);
          sub_100008E5C((uint64_t)v19, (uint64_t)&__p);
          uint64_t v15 = sub_100003F94((unsigned __int8 *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 48LL), "datestamp");
          sub_1000041AC((uint64_t)v19);
          unsigned __int8 v16 = *(_BYTE *)v15;
          *(_BYTE *)uint64_t v15 = v19[0];
          v19[0] = v16;
          unsigned int v17 = (uint64_t *)v15[1];
          v15[1] = (uint64_t)v20;
          int v20 = v17;
          sub_1000041AC((uint64_t)v15);
          sub_1000041AC((uint64_t)v19);
          sub_10000425C(&v20, v19[0]);
        }

        break;
      }

      uint64_t v8 = v10 + 1;
      uint64_t v4 = v7 - (v10 + 1);
    }

    while (v4 >= 36);
  }

  sub_100053D30(a2, (uint64_t)&__p);
  sub_1000537CC(v18, (uint64_t)&__p, *(_DWORD *)(a1 + 64));
  sub_1000041AC((uint64_t)&__p);
  sub_10000425C((uint64_t **)&__p.__r_.__value_.__l.__size_, __p.__r_.__value_.__s.__data_[0]);
  ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
}

void sub_100053CDC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100053D30(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)(a2 + _Block_object_dispose(va, 8) = 0xAAAAAAAAAAAAAAAALL;
  sub_10000BA40(a2, 0LL, 0LL, 0, 1);
  sub_10000B990((uint64_t)v63, a1 + 8);
  uint64_t v4 = sub_100003F94((unsigned __int8 *)a2, "name");
  sub_1000041AC((uint64_t)v63);
  char v5 = *(_BYTE *)v4;
  *(_BYTE *)uint64_t v4 = v63[0];
  v63[0] = v5;
  ssize_t v6 = (uint64_t *)v4[1];
  v4[1] = (uint64_t)v64;
  uint64_t v64 = v6;
  sub_1000041AC((uint64_t)v4);
  sub_1000041AC((uint64_t)v63);
  sub_10000425C(&v64, v63[0]);
  sub_10000B990((uint64_t)v61, a1 + 32);
  ssize_t v7 = sub_100003F94((unsigned __int8 *)a2, "uuid");
  sub_1000041AC((uint64_t)v61);
  char v8 = *(_BYTE *)v7;
  *(_BYTE *)ssize_t v7 = v61[0];
  v61[0] = v8;
  uint64_t v9 = (uint64_t *)v7[1];
  v7[1] = (uint64_t)v62;
  __int128 v62 = v9;
  sub_1000041AC((uint64_t)v7);
  sub_1000041AC((uint64_t)v61);
  sub_10000425C(&v62, v61[0]);
  sub_10000C3E4((uint64_t)v59, a1 + 56);
  uint64_t v10 = sub_100003F94((unsigned __int8 *)a2, "message");
  sub_1000041AC((uint64_t)v59);
  char v11 = *(_BYTE *)v10;
  *(_BYTE *)uint64_t v10 = v59[0];
  v59[0] = v11;
  char v12 = (uint64_t *)v10[1];
  v10[1] = (uint64_t)v60;
  unint64_t v60 = v12;
  sub_1000041AC((uint64_t)v10);
  sub_1000041AC((uint64_t)v59);
  sub_10000425C(&v60, v59[0]);
  unsigned __int8 v13 = *(uint64_t **)(a1 + 128);
  v57[0] = 7;
  __int128 v58 = v13;
  sub_1000041AC((uint64_t)v57);
  sub_1000041AC((uint64_t)v57);
  uint64_t v14 = sub_100003F94((unsigned __int8 *)a2, "sampling");
  sub_1000041AC((uint64_t)v57);
  unsigned __int8 v15 = *(_BYTE *)v14;
  *(_BYTE *)uint64_t v14 = v57[0];
  v57[0] = v15;
  unsigned __int8 v16 = (uint64_t *)v14[1];
  v14[1] = (uint64_t)v58;
  __int128 v58 = v16;
  sub_1000041AC((uint64_t)v14);
  sub_1000041AC((uint64_t)v57);
  sub_10000425C(&v58, v57[0]);
  unsigned int v17 = (uint64_t *)*(unsigned int *)(a1 + 120);
  if ((_DWORD)v17 && *(_DWORD *)a1 == 2)
  {
    v55[0] = 6;
    unint64_t v56 = v17;
    sub_1000041AC((uint64_t)v55);
    sub_1000041AC((uint64_t)v55);
    uint64_t v18 = sub_100003F94((unsigned __int8 *)a2, "eventCount");
    sub_1000041AC((uint64_t)v55);
    unsigned __int8 v19 = *(_BYTE *)v18;
    *(_BYTE *)uint64_t v18 = v55[0];
    v55[0] = v19;
    int v20 = (uint64_t *)v18[1];
    v18[1] = (uint64_t)v56;
    unint64_t v56 = v20;
    sub_1000041AC((uint64_t)v18);
    sub_1000041AC((uint64_t)v55);
    sub_10000425C(&v56, v55[0]);
  }

  unsigned int v21 = (uint64_t *)*(unsigned __int8 *)(a1 + 136);
  if (*(_BYTE *)(a1 + 136))
  {
    v53[0] = 4;
    __int128 v54 = v21;
    sub_1000041AC((uint64_t)v53);
    sub_1000041AC((uint64_t)v53);
    uint64_t v22 = sub_100003F94((unsigned __int8 *)a2, "budgeted");
    sub_1000041AC((uint64_t)v53);
    unsigned __int8 v23 = *(_BYTE *)v22;
    *(_BYTE *)uint64_t v22 = v53[0];
    v53[0] = v23;
    unsigned __int8 v24 = (uint64_t *)v22[1];
    v22[1] = (uint64_t)v54;
    __int128 v54 = v24;
    sub_1000041AC((uint64_t)v22);
    sub_1000041AC((uint64_t)v53);
    sub_10000425C(&v54, v53[0]);
  }

  if (*(_BYTE *)(a1 + 112))
  {
    if (*(char *)(a1 + 111) < 0)
    {
      if (!*(void *)(a1 + 96)) {
        goto LABEL_12;
      }
    }

    else if (!*(_BYTE *)(a1 + 111))
    {
      goto LABEL_12;
    }

    sub_10000B990((uint64_t)v51, a1 + 88);
    unint64_t v25 = sub_100003F94((unsigned __int8 *)a2, "deviceId");
    sub_1000041AC((uint64_t)v51);
    char v26 = *(_BYTE *)v25;
    *(_BYTE *)unint64_t v25 = v51[0];
    v51[0] = v26;
    unsigned __int8 v27 = (uint64_t *)v25[1];
    v25[1] = (uint64_t)v52;
    unint64_t v52 = v27;
    sub_1000041AC((uint64_t)v25);
    sub_1000041AC((uint64_t)v51);
    sub_10000425C(&v52, v51[0]);
  }

void sub_1000543C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void *sub_100054488@<X0>(void *a1@<X8>)
{
  uint64_t v4 = 0LL;
  sub_10003D22C((uint64_t)"{_marker:<end-of-file>}", (uint64_t)"", (uint64_t)v3, 1, a1);
  BOOL result = v4;
  if (v4 == v3)
  {
    uint64_t v2 = 4LL;
    BOOL result = v3;
  }

  else
  {
    if (!v4) {
      return result;
    }
    uint64_t v2 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v2))();
}

void sub_100054520( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v14 = a13;
  if (a13 == &a10)
  {
    uint64_t v15 = 4LL;
    uint64_t v14 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v15 = 5LL;
  }

  (*(void (**)(void))(*(void *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_10005455C(uint64_t a1, uint64_t a2)
{
  return sub_10000C3E4(a1 + 64, a2 + 64);
}

void sub_100054568(uint64_t a1)
{
}

uint64_t sub_100054594(uint64_t a1, uint64_t a2)
{
  return sub_10000C3E4(a1 + 56, a2 + 56);
}

void sub_1000545A0(uint64_t a1)
{
}

void sub_1000545CC(uint64_t a1, uint64_t a2)
{
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(global_queue);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10000B8BC(__p, *(void **)a2, *(void *)(a2 + 8));
  }

  else
  {
    *(_OWORD *)std::stringbuf::string_type __p = *(_OWORD *)a2;
    uint64_t v9 = *(void *)(a2 + 16);
  }

  __int128 v10 = *(_OWORD *)(a2 + 24);
  sub_10000C3E4((uint64_t)v11, a2 + 40);
  char v5 = v4;
  ssize_t v6 = (char *)operator new(0x38uLL);
  ssize_t v7 = v6;
  if (SHIBYTE(v9) < 0)
  {
    sub_10000B8BC(v6, __p[0], (unint64_t)__p[1]);
  }

  else
  {
    *(_OWORD *)ssize_t v6 = *(_OWORD *)__p;
    *((void *)v6 + 2) = v9;
  }

  *(_OWORD *)(v7 + 24) = v10;
  sub_10000C3E4((uint64_t)(v7 + 40), (uint64_t)v11);
  uint64_t v13 = 0LL;
  dispatch_async_f(v5, v7, (dispatch_function_t)sub_100054DD4);
  sub_100054D7C(&v13);

  sub_1000041AC((uint64_t)v11);
  sub_10000425C(&v12, v11[0]);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
}

void sub_100054728( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

void sub_100054784(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (unsigned __int8 *)(a2 + 40);
  id v3 = (os_log_s *)qword_100131940;
  if (*(_BYTE *)(a2 + 40) == 1)
  {
    if (os_log_type_enabled((os_log_t)qword_100131940, OS_LOG_TYPE_INFO))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "[DefaultSink] Sending debug heartbeat event to RTCReporting",  (uint8_t *)__p,  2u);
    }

    sub_100005064(__p, "analyticsd_hb");
    id v4 = sub_100058F08(v2);
    sub_100096430((uint64_t)__p, 1001, 1002, v4);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_100131940, OS_LOG_TYPE_ERROR))
  {
    sub_1000D9020(v3, v5, v6, v7, v8, v9, v10, v11);
  }

void sub_10005487C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

uint64_t sub_1000548A0(uint64_t a1)
{
  return a1;
}

uint64_t *sub_1000548E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)a1 != 1)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    uint64_t v6 = (char *)sub_10000528C((char *)a1);
    sub_100005064(&v11, v6);
    uint64_t v7 = std::string::insert(&v11, 0LL, "cannot use insert() with ");
    __int128 v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    std::string::size_type cap = v7->__r_.__value_.__l.__cap_;
    __int128 v12 = v8;
    v7->__r_.__value_.__l.__size_ = 0LL;
    v7->__r_.__value_.__l.__cap_ = 0LL;
    v7->__r_.__value_.__r.__words[0] = 0LL;
    sub_100005128(309, (uint64_t)&v12, exception);
  }

  if (*(void *)a2 != *(void *)a3)
  {
    uint64_t v9 = __cxa_allocate_exception(0x20uLL);
    sub_100005064(&v12, "iterators do not fit");
    sub_100008C0C(210, (uint64_t)&v12, v9);
  }

  if (**(_BYTE **)a2 != 1)
  {
    uint64_t v10 = __cxa_allocate_exception(0x20uLL);
    sub_100005064(&v12, "iterators first and last must point to objects");
    sub_100008C0C(202, (uint64_t)&v12, v10);
  }

  return sub_10000C528(*(uint64_t **)(a1 + 8), *(const void ***)(a2 + 8), *(const void ****)(a3 + 8));
}

void sub_100054A90( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if ((v22 & 1) != 0) {
    __cxa_free_exception(v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100054B08(uint64_t a1)
{
  return a1;
}

void sub_100054B30(id *a1)
{
}

uint64_t sub_100054B58()
{
  return 0LL;
}

id sub_100054B60(uint64_t a1, void *a2)
{
  *a2 = off_100128028;
  id result = objc_retainBlock(*(id *)(a1 + 8));
  a2[1] = result;
  return result;
}

void sub_100054B94(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 8);
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
}

uint64_t sub_100054BA4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16LL))();
}

uint64_t sub_100054BB0(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_100054BEC()
{
  return &off_100128098;
}

uint64_t sub_100054BF8(uint64_t a1)
{
  return a1;
}

void sub_100054C20(id *a1)
{
}

uint64_t sub_100054C48()
{
  return 0LL;
}

id sub_100054C50(uint64_t a1, void *a2)
{
  *a2 = off_1001280B8;
  id result = objc_retainBlock(*(id *)(a1 + 8));
  a2[1] = result;
  return result;
}

void sub_100054C88(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 8);
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
}

uint64_t sub_100054C98(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16LL))();
}

uint64_t sub_100054CA4(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_100054CE0()
{
  return &off_100128128;
}

uint64_t sub_100054CEC(uint64_t a1, char *a2)
{
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(_BYTE *)a1 = 3;
  *(void *)(a1 + _Block_object_dispose(va, 8) = sub_100054D34(a2);
  sub_1000041AC(a1);
  sub_1000041AC(a1);
  return a1;
}

void *sub_100054D34(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  sub_100005064(v2, a1);
  return v2;
}

void sub_100054D68(_Unwind_Exception *a1)
{
}

uint64_t *sub_100054D7C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0LL;
  if (v2)
  {
    sub_1000041AC(v2 + 40);
    sub_10000425C((uint64_t **)(v2 + 48), *(unsigned __int8 *)(v2 + 40));
    operator delete((void *)v2);
  }

  return a1;
}

uint64_t *sub_100054DD4(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = (unsigned __int8 *)(a1 + 40);
  uint64_t v14 = a1;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"Total_CA_Heartbeats";
  unint64_t v23 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v21 = v3;
  __int128 v22 = v3;
  sub_100008780(a1 + 40, (const std::string::value_type **)&__p.__r_.__value_.__l.__data_, (uint64_t)&v21);
  unsigned __int8 v16 = v2;
  uint64_t v17 = 0LL;
  uint64_t v18 = 0LL;
  uint64_t v19 = 0LL;
  unint64_t v20 = 0x8000000000000000LL;
  sub_100008AC8(&v16);
  if (sub_1000087E8((unsigned __int8 **)&v21, &v16))
  {
    id v4 = (_BYTE *)sub_10009AE9C();
    if (!v4) {
      goto LABEL_7;
    }
  }

  else
  {
    id v4 = sub_100008924((unsigned __int8 **)&v21);
  }

  if (*v4 - 5 <= 2)
  {
    LODWORD(v21) = -1431655766;
    sub_10000DC80(v4, (unsigned int *)&v21);
    uint64_t v5 = v21;
    goto LABEL_8;
  }

void sub_100055038( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  __int128 v21 = v17;

  if (a16 < 0) {
    operator delete(__p);
  }
  sub_100054D7C(&a10);
  _Unwind_Resume(a1);
}

__n128 sub_1000550B4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &off_100128148;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + _Block_object_dispose(va, 8) = result;
  return result;
}

__n128 sub_1000550EC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_100128148;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + _Block_object_dispose(va, 8) = result;
  return result;
}

void sub_10005510C(uint64_t a1, char *a2, void *a3)
{
}

uint64_t sub_100055118(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void (**sub_100055154())(std::__shared_weak_count *__hidden this, const std::type_info *)
{
}

void sub_100055160(uint64_t a1, char *a2, void *a3, void *a4)
{
  uint64_t v5 = a2;
  uint64_t v7 = *(void *)(a1 + 16);
  __int128 v35 = 0uLL;
  if (!**(_BYTE **)a1 && **(void **)(a1 + 8) < *a4) {
    return;
  }
  memset(__p, 170, sizeof(__p));
  double v34 = NAN;
  uint64_t v8 = *(void *)(v7 + 32);
  if (a2[23] < 0) {
    a2 = *(char **)a2;
  }
  sub_100005064(buf, a2);
  (*(void (**)(void **__return_ptr, uint64_t, _BYTE *))(*(void *)v8 + 224LL))(__p, v8, buf);
  if (v39 < 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v9 = (void *)HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) < 0) {
    uint64_t v9 = __p[1];
  }
  uint64_t v10 = (os_log_s *)qword_100131918;
  if (!v9)
  {
    if (os_log_type_enabled((os_log_t)qword_100131918, OS_LOG_TYPE_INFO))
    {
      if (v5[23] >= 0) {
        char v13 = v5;
      }
      else {
        char v13 = *(char **)v5;
      }
      *(_DWORD *)__int128 buf = 136315138;
      *(void *)&uint8_t buf[4] = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "[DefaultSink] WARNING: found transform state for %s but no definition in config. Is the correct config active?",  buf,  0xCu);
    }

    goto LABEL_43;
  }

  if (os_log_type_enabled((os_log_t)qword_100131918, OS_LOG_TYPE_DEBUG))
  {
    if (v5[23] >= 0) {
      unsigned __int8 v29 = v5;
    }
    else {
      unsigned __int8 v29 = *(char **)v5;
    }
    double v30 = (void *)HIBYTE(__p[2]);
    if (SHIBYTE(__p[2]) < 0) {
      double v30 = __p[1];
    }
    *(_DWORD *)__int128 buf = 136446466;
    *(void *)&uint8_t buf[4] = v29;
    *(_WORD *)&_BYTE buf[12] = 2048;
    *(void *)&buf[14] = v30;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "[DefaultSink] Retrieved transform definition for %{public}s with %zu bytes",  buf,  0x16u);
  }

  unint64_t v31 = 0xAAAAAAAAAAAAAAAALL;
  int v32 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  std::chrono::system_clock::time_point v40 = 0LL;
  sub_100055628((uint64_t)__p, (uint64_t)buf, 1, &v31);
  std::string v11 = v40;
  if (v40 == buf)
  {
    uint64_t v12 = 4LL;
    std::string v11 = buf;
    goto LABEL_20;
  }

  if (v40)
  {
    uint64_t v12 = 5LL;
LABEL_20:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }

  sub_100005948(*(unsigned __int8 ***)v7, (uint64_t)&v31, a3, (__int128 *)buf, v34);
  __int128 v14 = *(_OWORD *)buf;
  *(void *)__int128 buf = 0LL;
  *(void *)&uint8_t buf[8] = 0LL;
  uint64_t v15 = (std::__shared_weak_count *)*((void *)&v35 + 1);
  __int128 v35 = v14;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      unint64_t v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

  uint64_t v18 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    uint64_t v19 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }

  uint64_t v21 = v35;
  if (!(void)v35) {
    goto LABEL_42;
  }
  sub_1000123E4((uint64_t)v36, *(void *)(a1 + 24));
  sub_1000557C4((uint64_t)buf, (uint64_t)v36);
  (*(void (**)(uint64_t, _BYTE *))(*(void *)v21 + 48LL))(v21, buf);
  __int128 v22 = v40;
  if (v40 == buf)
  {
    uint64_t v23 = 4LL;
    __int128 v22 = buf;
  }

  else
  {
    if (!v40) {
      goto LABEL_37;
    }
    uint64_t v23 = 5LL;
  }

  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_37:
  unsigned __int8 v24 = v37;
  if (v37 == v36)
  {
    uint64_t v25 = 4LL;
    unsigned __int8 v24 = v36;
    goto LABEL_41;
  }

  if (v37)
  {
    uint64_t v25 = 5LL;
LABEL_41:
    (*(void (**)(void))(*v24 + 8 * v25))();
  }

LABEL_42:
  sub_1000041AC((uint64_t)&v31);
  sub_10000425C(&v32, v31);
LABEL_43:
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  char v26 = (std::__shared_weak_count *)*((void *)&v35 + 1);
  if (*((void *)&v35 + 1))
  {
    unsigned __int8 v27 = (unint64_t *)(*((void *)&v35 + 1) + 8LL);
    do
      unint64_t v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }

        +[NSException raise:format:]( NSException, "raise:format:", NSInvalidArgumentException, @"Invalid number type in JSON write (%c)", *(char *)[v12 objCType]);
        *(_BYTE *)a3 = 0;
        *(void *)(a3 + _Block_object_dispose(va, 8) = 0LL;
        goto LABEL_40;
      }
    }

    else
    {
      if (((1 << (v13 - 99)) & 0x14241) == 0)
      {
        if (v13 == 100)
        {
          [v12 doubleValue];
          unsigned __int8 v24 = v23;
          if (fabs(v23) == INFINITY) {
            +[NSException raise:format:]( &OBJC_CLASS___NSException,  "raise:format:",  NSInvalidArgumentException,  @"Invalid number value (infinite) in JSON write");
          }
          *(_BYTE *)a3 = 7;
          *(double *)(a3 + _Block_object_dispose(va, 8) = v24;
          goto LABEL_40;
        }

        if (v13 == 102)
        {
          [v12 floatValue];
          uint64_t v15 = v14;
          if (fabsf(v14) == INFINITY) {
            +[NSException raise:format:]( &OBJC_CLASS___NSException,  "raise:format:",  NSInvalidArgumentException,  @"Invalid number value (infinite) in JSON conversion");
          }
          *(_BYTE *)a3 = 7;
          *(double *)(a3 + _Block_object_dispose(va, 8) = v15;
          goto LABEL_40;
        }

void sub_100055514( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t *a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22, uint64_t a23, uint64_t a24, char *a25)
{
  unint64_t v28 = *(void **)(v26 - 72);
  if (v28 == v25)
  {
    uint64_t v29 = 4LL;
    unint64_t v28 = (void *)(v26 - 96);
  }

  else
  {
    if (!v28) {
      goto LABEL_6;
    }
    uint64_t v29 = 5LL;
  }

  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_6:
  double v30 = a25;
  if (a25 == &a22)
  {
    uint64_t v31 = 4LL;
    double v30 = &a22;
  }

  else
  {
    if (!a25) {
      goto LABEL_11;
    }
    uint64_t v31 = 5LL;
  }

  (*(void (**)(void))(*(void *)v30 + 8 * v31))();
LABEL_11:
  sub_10000417C(&a9);
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_100007004((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void *sub_100055628@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, void *a4@<X8>)
{
  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0LL;
  *(_BYTE *)a4 = 0;
  sub_1000041AC((uint64_t)a4);
  sub_1000041AC((uint64_t)a4);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 23);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  sub_1000123E4((uint64_t)v17, a2);
  if ((v8 & 0x80u) == 0LL) {
    uint64_t v11 = a1;
  }
  else {
    uint64_t v11 = v9;
  }
  if ((v8 & 0x80u) == 0LL) {
    uint64_t v12 = v8;
  }
  else {
    uint64_t v12 = v10;
  }
  sub_100018924(v11, v11 + v12, (uint64_t)v17, a3, (uint64_t)v19);
  sub_100018A0C((uint64_t)v19, 1, (uint64_t)a4);
  sub_10001A17C((uint64_t)&v21);
  char v13 = v20;
  if (v20 == v19)
  {
    uint64_t v14 = 4LL;
    char v13 = v19;
  }

  else
  {
    if (!v20) {
      goto LABEL_12;
    }
    uint64_t v14 = 5LL;
  }

  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_12:
  __n128 result = v18;
  if (v18 == v17)
  {
    uint64_t v16 = 4LL;
    __n128 result = v17;
  }

  else
  {
    if (!v18) {
      return result;
    }
    uint64_t v16 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v16))();
}

void sub_100055768( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13)
{
  uint64_t v15 = a12;
  if (a12 == &a9)
  {
    uint64_t v16 = 4LL;
    uint64_t v15 = &a9;
  }

  else
  {
    if (!a12) {
      goto LABEL_6;
    }
    uint64_t v16 = 5LL;
  }

  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_6:
  sub_10000417C(v13);
  _Unwind_Resume(a1);
}

uint64_t sub_1000557C4(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0LL;
  if (*(void *)(a2 + 24))
  {
    id v4 = operator new(0x28uLL);
    void *v4 = &off_1001281C8;
    sub_100055A38((uint64_t)(v4 + 1), a2);
    *(void *)(a1 + 24) = v4;
  }

  return a1;
}

void *sub_100055820(void *a1)
{
  *a1 = &off_1001281C8;
  uint64_t v2 = a1 + 1;
  __int128 v3 = (void *)a1[4];
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    __int128 v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void sub_10005587C(char *__p)
{
  *(void *)std::stringbuf::string_type __p = &off_1001281C8;
  uint64_t v2 = __p + 8;
  __int128 v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    __int128 v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

void *sub_1000558D8(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  void *v2 = &off_1001281C8;
  sub_1000123E4((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_100055918(_Unwind_Exception *a1)
{
}

uint64_t sub_10005592C(uint64_t a1, void *a2)
{
  *a2 = &off_1001281C8;
  return sub_1000123E4((uint64_t)(a2 + 1), a1 + 8);
}

void *sub_100055948(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  __n128 result = *(void **)(a1 + 32);
  if (result == v1)
  {
    uint64_t v3 = 4LL;
    __n128 result = v1;
  }

  else
  {
    if (!result) {
      return result;
    }
    uint64_t v3 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_10005597C(char *__p)
{
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

uint64_t sub_1000559CC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    sub_1000129CC();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 48LL))(v1);
}

uint64_t sub_1000559F0(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_100055A2C()
{
}

uint64_t sub_100055A38(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 24) = v4;
  }

  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }

  *uint64_t v3 = 0LL;
  return a1;
}

void *sub_100055AA4(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &off_1001282C8;
  result[1] = v3;
  return result;
}

uint64_t sub_100055AD8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1001282C8;
  a2[1] = v2;
  return result;
}

void sub_100055AF4(uint64_t a1, char *a2, void *a3, void *a4)
{
}

uint64_t sub_100055AFC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void (**sub_100055B38())(std::__shared_weak_count *__hidden this, const std::type_info *)
{
}

os_log_t sub_100055B44()
{
  qword_100131780 = (uint64_t)os_log_create("com.apple.CoreAnalytics.Shared.critical", "config");
  qword_100131788 = (uint64_t)os_log_create("com.apple.CoreAnalytics.Shared.critical", "evaluator");
  os_log_t result = os_log_create("com.apple.CoreAnalytics.Shared.critical", "utils");
  qword_100131790 = (uint64_t)result;
  return result;
}

void sub_100055BA8( uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  double v11 = a6;
  *(void *)&__int128 v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  sub_100057254(a1, &v11, a2, a3, a4, &v10);
  if ((*(unsigned int (**)(void))(*(void *)v10 + 56LL))(v10))
  {
    *(_OWORD *)a5 = v10;
  }

  else
  {
    *(void *)a5 = 0LL;
    *(void *)(a5 + _Block_object_dispose(va, 8) = 0LL;
    uint64_t v7 = (std::__shared_weak_count *)*((void *)&v10 + 1);
    if (*((void *)&v10 + 1))
    {
      uint64_t v8 = (unint64_t *)(*((void *)&v10 + 1) + 8LL);
      do
        unint64_t v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }

uint64_t sub_100055C80(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, double a6)
{
  uint64_t v8 = sub_10008CA44(a1, a2, a3, a4, a6);
  *(void *)uint64_t v8 = off_100128378;
  *(_BYTE *)(v8 + 120) = 0;
  *(_BYTE *)(v8 + 144) = 0;
  *(void *)(v8 + 152) = 0LL;
  *(void *)(v8 + 160) = *a5;
  uint64_t v9 = a5[1];
  *(void *)(v8 + 16_Block_object_dispose(va, 8) = v9;
  if (v9)
  {
    __int128 v10 = (unint64_t *)(v9 + 8);
    do
      unint64_t v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }

  *(_WORD *)(a1 + 176) = sub_100055D68(a1);
  return a1;
}

void sub_100055D38( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  if (*(_BYTE *)(v9 + 144)) {
    sub_100004D64(&a9);
  }
  sub_10008C9EC(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_100055D68(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v14[0] = v2;
  v14[1] = v2;
  sub_100055F38(a1 + 56, "reservoirSize", (uint64_t)v14);
  unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v12[0] = v3;
  v12[1] = v3;
  sub_100008B44(v12, v1);
  sub_100008AC8((unsigned __int8 **)v12);
  if (!sub_1000087E8((unsigned __int8 **)v14, (unsigned __int8 **)v12)
    && *sub_10004A598((unsigned __int8 **)v14) - 5 <= 1)
  {
    uint64_t v4 = sub_100008924((unsigned __int8 **)v14);
    LOBYTE(v10) = 5;
    unint64_t v11 = 0LL;
    sub_1000041AC((uint64_t)&v10);
    sub_1000041AC((uint64_t)&v10);
    if (sub_100055FA0(&v10, v4))
    {
      uint64_t v5 = (double *)sub_100008924((unsigned __int8 **)v14);
      v8[0] = 5;
      uint64_t v9 = 0xFFFFLL;
      sub_1000041AC((uint64_t)v8);
      sub_1000041AC((uint64_t)v8);
      LOBYTE(v5) = sub_100055FA0(v5, v8);
      sub_1000041AC((uint64_t)v8);
      sub_10000425C((uint64_t **)&v9, v8[0]);
      sub_1000041AC((uint64_t)&v10);
      sub_10000425C(&v11, LOBYTE(v10));
      if ((v5 & 1) != 0)
      {
        uint64_t v6 = sub_100008924((unsigned __int8 **)v14);
        LOWORD(v12[0]) = -21846;
        sub_100057774((char *)v6, v12);
        return LOWORD(v12[0]);
      }
    }

    else
    {
      sub_1000041AC((uint64_t)&v10);
      sub_10000425C(&v11, LOBYTE(v10));
    }
  }

  return 10LL;
}

void sub_100055F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_100055F30()
{
  return 2LL;
}

uint64_t sub_100055F38@<X0>(uint64_t a1@<X0>, std::string::value_type *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 32) = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)a3 = v6;
  *(_OWORD *)(a3 + 16) = v6;
  uint64_t v7 = (unsigned __int8 **)sub_100008B44((void *)a3, a1);
  uint64_t result = (uint64_t)sub_100008AC8(v7);
  if (*(_BYTE *)a1 == 1)
  {
    uint64_t result = sub_100021850(*(void *)(a1 + 8), a2);
    *(void *)(a3 + _Block_object_dispose(va, 8) = result;
  }

  return result;
}

uint64_t sub_100055FA0(double *a1, unsigned __int8 *a2)
{
  uint64_t v2 = *(unsigned __int8 *)a1;
  uint64_t v3 = *a2;
  if ((_DWORD)v2 != (_DWORD)v3)
  {
    if ((_DWORD)v2 != 5 || (_DWORD)v3 != 7)
    {
      if ((_DWORD)v2 == 7 && (_DWORD)v3 == 5)
      {
        double v8 = a1[1];
        double v9 = (double)*((uint64_t *)a2 + 1);
      }

      else
      {
        if ((_DWORD)v2 == 6 && (_DWORD)v3 == 7)
        {
          double v7 = (double)*((unint64_t *)a1 + 1);
          return *((double *)a2 + 1) > v7;
        }

        if ((_DWORD)v2 != 7 || (_DWORD)v3 != 6)
        {
          if ((_DWORD)v2 == 5 && (_DWORD)v3 == 6 || (_DWORD)v2 == 6 && (_DWORD)v3 == 5) {
            return *((void *)a1 + 1) < *((void *)a2 + 1);
          }
          uint64_t result = 0LL;
          if (v2 <= 8 && v3 <= 8)
          {
            unsigned int v20 = byte_1000F9044[v2];
            unsigned int v21 = byte_1000F9044[v3];
LABEL_40:
            BOOL v22 = v20 >= v21;
            return !v22;
          }

          return result;
        }

        double v8 = a1[1];
        double v9 = (double)*((unint64_t *)a2 + 1);
      }

      return v8 < v9;
    }

    double v7 = (double)*((uint64_t *)a1 + 1);
    return *((double *)a2 + 1) > v7;
  }

  switch(*(_BYTE *)a1)
  {
    case 1:
      return sub_100057530( **((void ***)a1 + 1),  (void *)(*((void *)a1 + 1) + 8LL),  **((void ***)a2 + 1),  (void *)(*((void *)a2 + 1) + 8LL));
    case 2:
      return sub_1000574A8( **((void **)a1 + 1),  *(void *)(*((void *)a1 + 1) + 8LL),  **((void **)a2 + 1),  *(void *)(*((void *)a2 + 1) + 8LL));
    case 3:
      uint64_t v10 = *((void *)a1 + 1);
      uint64_t v11 = *((void *)a2 + 1);
      int v12 = *(char *)(v11 + 23);
      int v13 = *(char *)(v10 + 23);
      if (v13 >= 0) {
        size_t v14 = *(unsigned __int8 *)(v10 + 23);
      }
      else {
        size_t v14 = *(void *)(v10 + 8);
      }
      if (v13 >= 0) {
        unint64_t v15 = (const void *)*((void *)a1 + 1);
      }
      else {
        unint64_t v15 = *(const void **)v10;
      }
      if (v12 >= 0) {
        size_t v16 = *(unsigned __int8 *)(v11 + 23);
      }
      else {
        size_t v16 = *(void *)(v11 + 8);
      }
      if (v12 >= 0) {
        unint64_t v17 = (const void *)*((void *)a2 + 1);
      }
      else {
        unint64_t v17 = *(const void **)v11;
      }
      if (v16 >= v14) {
        size_t v18 = v14;
      }
      else {
        size_t v18 = v16;
      }
      int v19 = memcmp(v15, v17, v18);
      if (v19) {
        return v19 < 0;
      }
      else {
        return v14 < v16;
      }
    case 4:
      unsigned int v20 = *((unsigned __int8 *)a1 + 8);
      unsigned int v21 = a2[8];
      goto LABEL_40;
    case 5:
      return *((void *)a1 + 1) < *((void *)a2 + 1);
    case 6:
      BOOL v22 = *((void *)a1 + 1) >= *((void *)a2 + 1);
      return !v22;
    case 7:
      double v8 = a1[1];
      double v9 = *((double *)a2 + 1);
      return v8 < v9;
    case 8:
      uint64_t v23 = (uint64_t *)*((void *)a2 + 1);
      uint64_t v25 = *v23;
      uint64_t v24 = v23[1];
      if (v25 == v24) {
        return 0LL;
      }
      unsigned __int8 v27 = (unsigned __int8 *)**((void **)a1 + 1);
      uint64_t v26 = *(unsigned __int8 **)(*((void *)a1 + 1) + 8LL);
      uint64_t v28 = v25 + 1;
      break;
    default:
      return 0LL;
  }

  while (v27 != v26)
  {
    unsigned int v29 = *v27;
    unsigned int v30 = *(unsigned __int8 *)(v28 - 1);
    if (v29 < v30) {
      break;
    }
    uint64_t result = 0LL;
    ++v27;
    if (v30 < v29 || v28++ == v24) {
      return result;
    }
  }

  return 1LL;
}

void sub_100056224(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

BOOL sub_100056230(uint64_t a1)
{
  BOOL result = sub_10008D0EC(a1);
  if (result)
  {
    double v8 = "fields";
    unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v3 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v6[0] = v3;
    v6[1] = v3;
    sub_100008780(a1 + 56, &v8, (uint64_t)v6);
    v5[0] = (unsigned __int8 *)(a1 + 56);
    memset(&v5[1], 0, 24);
    v5[4] = (unsigned __int8 *)0x8000000000000000LL;
    sub_100008AC8(v5);
    if (sub_1000087E8((unsigned __int8 **)v6, v5))
    {
      uint64_t v4 = (_BYTE *)sub_10009AE9C();
      if (!v4) {
        goto LABEL_7;
      }
    }

    else
    {
      uint64_t v4 = sub_100008924((unsigned __int8 **)v6);
    }

    if (*v4 == 2)
    {
LABEL_8:
      *(void *)(a1 + 152) = v4;
      return v4 != 0LL;
    }

void sub_100056310(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

uint64_t sub_10005631C(uint64_t a1)
{
  else {
    return 1LL;
  }
}

uint64_t sub_10005635C(uint64_t a1)
{
  unsigned __int8 v7 = 0;
  sub_100005064(__p, "persist to store");
  v8[0] = &off_100128450;
  v8[1] = a1;
  _OWORD v8[2] = &v7;
  double v9 = v8;
  sub_10008CD68(a1, (uint64_t)__p, (uint64_t)v8);
  uint64_t v2 = v9;
  if (v9 == v8)
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = v8;
  }

  else
  {
    if (!v9) {
      goto LABEL_7;
    }
    uint64_t v3 = 5LL;
  }

  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_7:
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return v7;
}

void sub_10005645C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

void sub_100056468(void *a1@<X0>, void *a2@<X8>)
{
  unint64_t v6 = 0xAAAAAAAAAAAAAAAALL;
  unsigned __int8 v7 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10000BA40((uint64_t)&v6, 0LL, 0LL, 0, 2);
  uint64_t v4 = a1[15];
  for (uint64_t i = a1[16]; v4 != i; v4 += 16LL)
  {
    sub_10000C3E4((uint64_t)v8, v4);
    sub_100057BDC((uint64_t)&v6, (uint64_t)v8);
    sub_1000041AC((uint64_t)v8);
    sub_10000425C(&v9, v8[0]);
  }

  sub_100057DA0((uint64_t)&v6, a2);
  sub_1000041AC((uint64_t)&v6);
  sub_10000425C(&v7, v6);
}

void sub_100056588( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1000045D0(exception_object);
}

void sub_1000565B8(uint64_t a1, __int128 *a2)
{
  if (!sub_10008E380((_DWORD *)a1) && (sub_10008E084(a1, *(_BYTE **)(a1 + 24), a2) & 1) == 0)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 88LL))(a1);
    unsigned int v4 = *(_DWORD *)(a1 + 108);
    if (*(_BYTE *)(a1 + 112) && v4 > *(unsigned __int16 *)(a1 + 176))
    {
      unsigned int v5 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 160) + 16LL))(*(void *)(a1 + 160), 0LL);
    }

    else
    {
      LOWORD(v5) = v4 - 1;
    }

    sub_100056668((uint64_t *)a1, a2, (unsigned __int16)v5);
  }

void sub_100056668(uint64_t *a1, __int128 *a2, unsigned int a3)
{
  size_t v16 = v14;
  sub_100004D64((void ***)&v16);
  sub_100056860(a1, (uint64_t *)v15, a3);
  unint64_t v6 = a1[16];
  if (a3 >= (unint64_t)((uint64_t)(v6 - a1[15]) >> 4))
  {
    if (v6 >= a1[17])
    {
      uint64_t v11 = sub_1000582C4(a1 + 15, (uint64_t)v15);
    }

    else
    {
      sub_10005827C((uint64_t)(a1 + 15), (uint64_t)v15);
      uint64_t v11 = v6 + 16;
    }

    a1[16] = v11;
  }

  else
  {
    v12[0] = 2;
    unsigned __int8 v7 = (uint64_t *)operator new(0x18uLL);
    *(_OWORD *)unsigned __int8 v7 = v15[0];
    _OWORD v7[2] = *(void *)&v15[1];
    memset(v15, 0, 24);
    int v13 = v7;
    sub_1000041AC((uint64_t)v12);
    sub_1000041AC((uint64_t)v12);
    uint64_t v8 = a1[15] + 16LL * a3;
    sub_1000041AC((uint64_t)v12);
    unsigned __int8 v9 = *(_BYTE *)v8;
    *(_BYTE *)uint64_t v8 = v12[0];
    v12[0] = v9;
    uint64_t v10 = *(uint64_t **)(v8 + 8);
    *(void *)(v8 + _Block_object_dispose(va, 8) = v13;
    int v13 = v10;
    sub_1000041AC(v8);
    sub_1000041AC((uint64_t)v12);
    sub_10000425C(&v13, v12[0]);
  }

  sub_10008E3F0((uint64_t)a1);
  (*(void (**)(uint64_t *))(*a1 + 40))(a1);
  v14[0] = (void **)v15;
  sub_100004D64(v14);
}

void sub_100056840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_100056860(void *a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v6 = sub_100056958(v9);
  sub_1000041AC((uint64_t)v9);
  sub_10000425C(&v10, v9[0]);
  uint64_t v7 = a1[15];
  return (*(uint64_t (**)(void *, uint64_t))(*a1 + 80LL))(a1, v6);
}

void sub_10005693C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100056958(_BYTE *a1)
{
  uint64_t i = 1LL;
  switch(*a1)
  {
    case 1:
      unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&__int128 v3 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)std::stringbuf::string_type __p = v3;
      __int128 v21 = v3;
      sub_100008B44(__p, (uint64_t)a1);
      sub_100045378((unsigned __int8 **)__p);
      unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&__int128 v4 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
      __int128 v17 = v4;
      __int128 v18 = v4;
      sub_100008B44(&v17, (uint64_t)a1);
      sub_100008AC8((unsigned __int8 **)&v17);
      for (uint64_t i = 0LL; !sub_1000087E8((unsigned __int8 **)__p, (unsigned __int8 **)&v17); uint64_t i = (v6 + i + v8))
      {
        uint64_t v5 = sub_10005714C(__p);
        sub_10000B990((uint64_t)v15, v5);
        int v6 = sub_100056958(v15);
        uint64_t v7 = sub_100008924((unsigned __int8 **)__p);
        int v8 = sub_100056958(v7);
        sub_1000041AC((uint64_t)v15);
        sub_10000425C(&v16, v15[0]);
        sub_100018704((unsigned __int8 **)__p);
      }

      break;
    case 2:
      unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&__int128 v9 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)std::stringbuf::string_type __p = v9;
      __int128 v21 = v9;
      sub_100008B44(__p, (uint64_t)a1);
      sub_100045378((unsigned __int8 **)__p);
      unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&__int128 v10 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
      __int128 v17 = v10;
      __int128 v18 = v10;
      sub_100008B44(&v17, (uint64_t)a1);
      sub_100008AC8((unsigned __int8 **)&v17);
      for (uint64_t i = 0LL; !sub_1000087E8((unsigned __int8 **)__p, (unsigned __int8 **)&v17); uint64_t i = (v12 + i))
      {
        uint64_t v11 = sub_100008924((unsigned __int8 **)__p);
        int v12 = sub_100056958(v11);
        sub_100018704((unsigned __int8 **)__p);
      }

      break;
    case 3:
      sub_1000218CC((uint64_t)a1, (std::string *)__p);
      if (SBYTE7(v21) < 0)
      {
        int v13 = (int)__p[1];
        operator delete(__p[0]);
      }

      else
      {
        int v13 = BYTE7(v21);
      }

      uint64_t i = (v13 + 1);
      break;
    case 4:
      return i;
    case 7:
      uint64_t i = 8LL;
      break;
    default:
      uint64_t i = 8 * (*a1 - 5 < 3);
      break;
  }

  return i;
}

void sub_100056B78( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
}

void sub_100056B94(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 144))
  {
    uint64_t v2 = (void **)(a1 + 120);
    sub_100004D64(&v2);
    *(_BYTE *)(a1 + 144) = 0;
  }

void sub_100056C04(uint64_t a1)
{
  v6[0] = &off_1001284D0;
  v6[1] = a1;
  uint64_t v7 = v6;
  sub_10008CD68(a1, (uint64_t)__p, (uint64_t)v6);
  uint64_t v2 = v7;
  if (v7 == v6)
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = v6;
  }

  else
  {
    if (!v7) {
      goto LABEL_6;
    }
    uint64_t v3 = 5LL;
  }

  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100056CC8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

BOOL sub_100056CD4(uint64_t a1)
{
  BOOL result = sub_10008D294(a1);
  if (result) {
    return *(_BYTE *)(a1 + 144) != 0;
  }
  return result;
}

void sub_100056D04(void *a1, uint64_t a2)
{
  uint64_t v3 = (unsigned __int8 *)a1[15];
  __int128 v4 = (unsigned __int8 *)a1[16];
  if (v3 != v4)
  {
    while (*v3 != 2)
    {
LABEL_22:
      v3 += 16;
      if (v3 == v4) {
        goto LABEL_23;
      }
    }

    unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
    __int128 v18 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    sub_10000BA40((uint64_t)&v17, 0LL, 0LL, 0, 1);
    int v5 = *v3;
    if (*v3)
    {
      if (v5 == 1)
      {
        uint64_t v6 = *(void *)(*((void *)v3 + 1) + 16LL);
        if (!v6) {
          goto LABEL_13;
        }
      }

      else if (v5 == 2)
      {
        uint64_t v6 = (uint64_t)(*(void *)(*((void *)v3 + 1) + 8LL) - **((void **)v3 + 1)) >> 4;
        if (!v6) {
          goto LABEL_13;
        }
      }

      else
      {
        uint64_t v6 = 1LL;
      }

      for (uint64_t i = 0LL; i != v6; ++i)
      {
        uint64_t v8 = sub_10000BD90((uint64_t)v3, i);
        sub_10000C3E4((uint64_t)v15, v8);
        __int128 v9 = sub_100003F94((unsigned __int8 *)&v17, *((char **)v19[0] + i));
        sub_1000041AC((uint64_t)v15);
        char v10 = *(_BYTE *)v9;
        *(_BYTE *)__int128 v9 = v15[0];
        v15[0] = v10;
        uint64_t v11 = (uint64_t *)v9[1];
        v9[1] = (uint64_t)v16;
        size_t v16 = v11;
        sub_1000041AC((uint64_t)v9);
        sub_1000041AC((uint64_t)v15);
        sub_10000425C(&v16, v15[0]);
      }
    }

LABEL_13:
    int v12 = (*(uint64_t (**)(void *))(*a1 + 24LL))(a1);
    sub_10008E8C8((uint64_t)a1, v12, (uint64_t)&v17, (uint64_t)v20);
    uint64_t v13 = *(void *)(a2 + 24);
    if (!v13) {
      sub_1000129CC();
    }
    (*(void (**)(uint64_t, _BYTE *))(*(void *)v13 + 48LL))(v13, v20);
    if (v28 && v27 < 0) {
      operator delete(v26[3]);
    }
    sub_1000041AC((uint64_t)v25);
    sub_10000425C(v26, v25[0]);
    if (v24 < 0) {
      operator delete(v23);
    }
    if (v22 < 0) {
      operator delete(v21);
    }
    sub_1000041AC((uint64_t)&v17);
    sub_10000425C(&v18, v17);
    goto LABEL_22;
  }

  uint64_t v8 = *v1;
  char v24 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v25 = "preferred-user-interface-language";
  *(void *)&__int128 v9 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)std::stringbuf::string_type __p = v9;
  uint64_t v23 = v9;
  sub_100008780(v8, &v25, (uint64_t)__p);
  __int128 buf = (unint64_t)v8;
  char v27 = 0LL;
  char v28 = 0LL;
  unsigned int v29 = 0x8000000000000000LL;
  if (!v8) {
    __assert_rtn("iter_impl", "iter_impl.hpp", 88, "m_object != nullptr");
  }
  sub_100008AC8((unsigned __int8 **)&buf);
  if (sub_1000087E8((unsigned __int8 **)__p, (unsigned __int8 **)&buf))
  {
    char v10 = (_BYTE *)sub_10009AE9C();
    if (!v10) {
      goto LABEL_25;
    }
  }

  else
  {
    char v10 = sub_100008924((unsigned __int8 **)__p);
  }

  if (*v10 == 3)
  {
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
    sub_1000218CC((uint64_t)v10, (std::string *)__p);
    if ((SBYTE7(v23) & 0x80u) == 0) {
      int v12 = __p;
    }
    else {
      int v12 = (void **)__p[0];
    }
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v12));
    [v11 setObject:v13 forKey:@"preferred-user-interface-language"];

    if (SBYTE7(v23) < 0) {
      operator delete(__p[0]);
    }
  }

    BOOL result = sub_1000A486C(a5, a6);
    *a1 = v13;
    return result;
  }

  if ((a6 & 0x1000000000000000LL) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000LL) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }

  uint64_t v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "Swift/StringTesting.swift",  25LL,  2,  151LL,  0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    BOOL result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory overlapping range",  58LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  v14,  1173LL,  0);
    __break(1u);
    return result;
  }

  unint64_t v17 = (void **)&v11;
  sub_100004D64(&v17);
  sub_1000041AC((uint64_t)&v13);
  sub_10000425C(&v14, v13);
  sub_1000041AC((uint64_t)&v15);
  sub_10000425C(&v16, v15);
}

  if ((size & 0x80) != 0)
  {
    p_UInt32 size = &v1[1].__r_.__value_.__l.__size_;
    uint64_t v8 = v1[1].__r_.__value_.__l.__size_ + v1->__r_.__value_.__l.__size_;
    v1[1].__r_.__value_.__l.__size_ = v8;
    if (v8 >= v3)
    {
LABEL_61:
      *v1->__r_.__value_.__l.__data_ = 0;
      v1->__r_.__value_.__l.__size_ = 0LL;
      return;
    }
  }

  else
  {
    p_UInt32 size = &v1[1].__r_.__value_.__l.__size_;
    uint64_t v8 = v1[1].__r_.__value_.__l.__size_ + size;
    v1[1].__r_.__value_.__l.__size_ = v8;
    if (v8 >= v3)
    {
LABEL_15:
      v1->__r_.__value_.__s.__data_[0] = 0;
      v1->__r_.__value_.__s.__size_ = 0;
      return;
    }
  }

  __int128 v9 = data;
  if (data[23] < 0) {
    __int128 v9 = *(std::string::pointer *)data;
  }
  if (v9[v8] == 47)
  {
    __int128 v21 = 0LL;
    if (data[23] < 0) {
      data = *(std::string::pointer *)data;
    }
    char v10 = sub_1000D54E4(data, v3, &v21);
    uint64_t v8 = *p_size;
    if (*p_size == v10)
    {
      if ((char)v1->__r_.__value_.__s.__size_ < 0)
      {
        if (v1->__r_.__value_.__l.__size_ == v21)
        {
          v1->__r_.__value_.__l.__size_ = 1LL;
          uint64_t v1 = (std::string *)v1->__r_.__value_.__r.__words[0];
          goto LABEL_28;
        }
      }

      else if (v21 == v1->__r_.__value_.__s.__size_)
      {
        v1->__r_.__value_.__s.__size_ = 1;
LABEL_28:
        LOWORD(v1->__r_.__value_.__l.__data_) = 47;
        return;
      }
    }

    for (data = v1[1].__r_.__value_.__l.__data_; v3 != v8; *p_UInt32 size = ++v8)
    {
      uint64_t v11 = data;
      if (data[23] < 0) {
        uint64_t v11 = *(std::string::pointer *)data;
      }
      if (v11[v8] != 47) {
        goto LABEL_46;
      }
    }

    int v12 = v3 - 1 >= v10 ? v10 : v3 - 1;
    uint64_t v13 = data[23] >= 0 ? data : *(std::string::pointer *)data;
    size_t v14 = v13 - 2;
    unint64_t v15 = v3;
    while (1)
    {
      size_t v16 = v15 - 1;
      if (v15 - 1 <= v10) {
        break;
      }
      unint64_t v17 = v14[v15--];
      if (v17 != 47) {
        goto LABEL_45;
      }
    }

    size_t v16 = v12;
LABEL_45:
    uint64_t v8 = v3;
    if (v16 != v10)
    {
      v1[1].__r_.__value_.__l.__size_ = v3 - 1;
      goto LABEL_61;
    }
  }

void sub_100056F7C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17)
{
}

uint64_t sub_100056FD8(uint64_t a1)
{
  return a1;
}

uint64_t sub_100057044(uint64_t a1)
{
  *(void *)a1 = off_100128378;
  sub_100007004(a1 + 160);
  if (*(_BYTE *)(a1 + 144))
  {
    uint64_t v3 = (void **)(a1 + 120);
    sub_100004D64(&v3);
  }

  sub_10008C9EC(a1);
  return a1;
}

void sub_1000570C8(uint64_t a1)
{
  *(void *)a1 = off_100128378;
  sub_100007004(a1 + 160);
  if (*(_BYTE *)(a1 + 144))
  {
    uint64_t v3 = (void **)(a1 + 120);
    sub_100004D64(&v3);
  }

  uint64_t v2 = (void *)sub_10008C9EC(a1);
  operator delete(v2);
}

uint64_t sub_10005714C(void *a1)
{
  if (!*a1) {
    sub_1000D90D0();
  }
  if (*(_BYTE *)*a1 != 1)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    sub_100005064(v3, "cannot use key() for non-object iterators");
    sub_100008C0C(207, (uint64_t)v3, exception);
  }

  return a1[1] + 32LL;
}

void sub_100057214( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }

  else if (!v15)
  {
    goto LABEL_6;
  }

  __cxa_free_exception(v14);
  goto LABEL_6;
}

void sub_100057254( uint64_t a1@<X1>, double *a2@<X2>, void *a3@<X3>, uint64_t a4@<X4>, void *a5@<X5>, void *a6@<X8>)
{
  int v12 = operator new(0xD0uLL);
  sub_1000572E4(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  sub_10000CCC8((uint64_t)a6, v12 + 4, (uint64_t)(v12 + 3));
}

void sub_1000572D0(_Unwind_Exception *a1)
{
}

void *sub_1000572E4(void *a1, uint64_t a2, double *a3, void *a4, uint64_t a5, void *a6)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_100128400;
  char v8 = -86;
  sub_1000573C4((uint64_t)&v8, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6);
  return a1;
}

void sub_100057370(_Unwind_Exception *a1)
{
}

void sub_100057384(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100128400;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100057394(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100128400;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_1000573B4(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1000573C4(uint64_t a1, uint64_t a2, uint64_t a3, double *a4, void *a5, uint64_t a6, void *a7)
{
  double v7 = *a4;
  char v8 = (std::__shared_weak_count *)a7[1];
  v11[0] = *a7;
  v11[1] = v8;
  *a7 = 0LL;
  a7[1] = 0LL;
  sub_100055C80(a2, a3, a5, a6, v11, v7);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

void sub_100057494(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1000574A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 == a4) {
    return 0LL;
  }
  uint64_t v5 = a3;
  while (a1 != a2 && (sub_100055FA0(a1, v5) & 1) == 0)
  {
    char v8 = sub_100055FA0(v5, a1);
    uint64_t result = 0LL;
    if ((v8 & 1) == 0)
    {
      a1 += 16LL;
      v5 += 16LL;
      if (v5 != a4) {
        continue;
      }
    }

    return result;
  }

  return 1LL;
}

uint64_t sub_100057530(void *a1, void *a2, void *a3, void *a4)
{
  if (a3 == a4) {
    return 0LL;
  }
  __int128 v4 = a3;
  while (a1 != a2)
  {
    size_t v6 = *((unsigned __int8 *)v4 + 55);
    unsigned __int8 v7 = *((_BYTE *)a1 + 55);
    unsigned __int8 v40 = v7;
    size_t v44 = v7;
    __int128 v45 = (const void *)a1[4];
    size_t v41 = v4[5];
    size_t v42 = a1[5];
    if ((v7 & 0x80u) == 0) {
      size_t v8 = *((unsigned __int8 *)a1 + 55);
    }
    else {
      size_t v8 = a1[5];
    }
    if ((v7 & 0x80u) == 0) {
      __int128 v9 = a1 + 4;
    }
    else {
      __int128 v9 = (const void *)a1[4];
    }
    if ((v6 & 0x80u) == 0LL) {
      size_t v10 = *((unsigned __int8 *)v4 + 55);
    }
    else {
      size_t v10 = v4[5];
    }
    unsigned __int8 v43 = (const void *)v4[4];
    if ((v6 & 0x80u) == 0LL) {
      uint64_t v11 = v4 + 4;
    }
    else {
      uint64_t v11 = (const void *)v4[4];
    }
    if (v10 >= v8) {
      size_t v12 = v8;
    }
    else {
      size_t v12 = v10;
    }
    int v13 = memcmp(v9, v11, v12);
    BOOL v14 = v8 < v10;
    if (v13) {
      BOOL v14 = v13 < 0;
    }
    if (v14) {
      break;
    }
    int v15 = memcmp(v11, v9, v12);
    BOOL v16 = v10 < v8;
    if (v15) {
      BOOL v16 = v15 < 0;
    }
    if (v16)
    {
      size_t v18 = v44;
      unint64_t v17 = v45;
      size_t v20 = v42;
      unint64_t v19 = v43;
      size_t v21 = v41;
      unsigned __int8 v23 = v40;
      char v22 = v6;
    }

    else
    {
      if ((sub_100055FA0(a1 + 7, v4 + 7) & 1) != 0) {
        return 1LL;
      }
      size_t v18 = *((unsigned __int8 *)a1 + 55);
      unint64_t v17 = (const void *)a1[4];
      size_t v20 = a1[5];
      size_t v6 = *((unsigned __int8 *)v4 + 55);
      unint64_t v19 = (const void *)v4[4];
      size_t v21 = v4[5];
      char v22 = *((_BYTE *)v4 + 55);
      unsigned __int8 v23 = *((_BYTE *)a1 + 55);
    }

    if (v22 >= 0)
    {
      char v24 = v4 + 4;
    }

    else
    {
      size_t v6 = v21;
      char v24 = v19;
    }

    if ((v23 & 0x80u) == 0) {
      size_t v25 = v18;
    }
    else {
      size_t v25 = v20;
    }
    if ((v23 & 0x80u) == 0) {
      uint64_t v26 = a1 + 4;
    }
    else {
      uint64_t v26 = v17;
    }
    if (v25 >= v6) {
      size_t v27 = v6;
    }
    else {
      size_t v27 = v25;
    }
    int v28 = memcmp(v24, v26, v27);
    BOOL v29 = v6 < v25;
    if (v28) {
      BOOL v29 = v28 < 0;
    }
    if (!v29)
    {
      int v30 = memcmp(v26, v24, v27);
      BOOL v31 = v25 < v6;
      if (v30) {
        BOOL v31 = v30 < 0;
      }
      if (v31 || (sub_100055FA0(v4 + 7, a1 + 7) & 1) == 0)
      {
        int v32 = (void *)a1[1];
        if (v32)
        {
          do
          {
            id v33 = v32;
            int v32 = (void *)*v32;
          }

          while (v32);
        }

        else
        {
          do
          {
            id v33 = (void *)a1[2];
            BOOL v34 = *v33 == (void)a1;
            a1 = v33;
          }

          while (!v34);
        }

        __int128 v35 = (void *)v4[1];
        if (v35)
        {
          do
          {
            std::chrono::system_clock::time_point v36 = v35;
            __int128 v35 = (void *)*v35;
          }

          while (v35);
        }

        else
        {
          do
          {
            std::chrono::system_clock::time_point v36 = (void *)v4[2];
            BOOL v34 = *v36 == (void)v4;
            __int128 v4 = v36;
          }

          while (!v34);
        }

        a1 = v33;
        __int128 v4 = v36;
        if (v36 != a4) {
          continue;
        }
      }
    }

    return 0LL;
  }

  return 1LL;
}

char *sub_100057774(char *result, _WORD *a2)
{
  uint64_t v2 = result;
  switch(*result)
  {
    case 4:
      LOWORD(v3) = result[8];
      break;
    case 5:
    case 6:
      LOWORD(v3) = *((_WORD *)result + 4);
      break;
    case 7:
      int v3 = (int)*((double *)result + 1);
      break;
    default:
      exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
      uint64_t v5 = (char *)sub_10000528C(v2);
      sub_100005064(&v8, v5);
      size_t v6 = std::string::insert(&v8, 0LL, "type must be number, but is ");
      __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      std::string::size_type cap = v6->__r_.__value_.__l.__cap_;
      __int128 v9 = v7;
      v6->__r_.__value_.__l.__size_ = 0LL;
      v6->__r_.__value_.__l.__cap_ = 0LL;
      v6->__r_.__value_.__r.__words[0] = 0LL;
      sub_100005128(302, (uint64_t)&v9, exception);
  }

  *a2 = v3;
  return result;
}

void sub_100057890( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }

  else if (!v22)
  {
    goto LABEL_8;
  }

  __cxa_free_exception(v21);
  goto LABEL_8;
}

__n128 sub_1000578F8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &off_100128450;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + _Block_object_dispose(va, 8) = result;
  return result;
}

__n128 sub_100057930(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_100128450;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + _Block_object_dispose(va, 8) = result;
  return result;
}

void sub_100057950(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = sub_10008D0C4(v2);
  memset(v15, 170, sizeof(v15));
  sub_100056468((void *)v2, v15);
  if (v15[0] == v15[1])
  {
    __int128 v9 = (os_log_s *)qword_100131918;
    if (os_log_type_enabled((os_log_t)qword_100131918, OS_LOG_TYPE_ERROR))
    {
      sub_10008D06C(v2, &__p);
      if (v14 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      else {
        uint64_t v11 = *(void *)v3;
      }
      *(_DWORD *)__int128 buf = 136446466;
      unint64_t v17 = p_p;
      __int16 v18 = 2080;
      uint64_t v19 = v11;
      _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "[%{public}sTransform] transform '%s' has no data to persist",  buf,  0x16u);
      if (v14 < 0) {
        operator delete(__p);
      }
    }
  }

  else
  {
    uint64_t v4 = *(void *)(*(void *)(v2 + 40) + 72LL);
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24LL))(v2);
    uint64_t v6 = *(unsigned int *)(v2 + 100);
    uint64_t v7 = *(unsigned int *)(v2 + 108);
    uint64_t v8 = *(unsigned int *)(v2 + 80);
    sub_100057B94((uint64_t)&__p, v15);
    **(_BYTE **)(a1 + 16) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void **))(*(void *)v4 + 152LL))( v4,  v5,  v3,  v6,  v7,  v8,  v2 + 88,  &__p);
    sub_1000041AC((uint64_t)&__p);
    sub_10000425C(&v13, __p);
  }

  std::stringbuf::string_type __p = v15;
  sub_100004D64((void ***)&__p);
}

void sub_100057B2C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, char a12)
{
  a9 = (void **)&a12;
  sub_100004D64(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100057B4C(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

void (**sub_100057B88())(std::__shared_weak_count *__hidden this, const std::type_info *)
{
}

uint64_t sub_100057B94(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(_BYTE *)a1 = 2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = sub_10000C900(a2);
  sub_1000041AC(a1);
  sub_1000041AC(a1);
  return a1;
}

uint64_t sub_100057BDC(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)a1)
  {
    if (*(_BYTE *)a1 != 2)
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
      __int128 v9 = (char *)sub_10000528C((char *)a1);
      sub_100005064(&v12, v9);
      size_t v10 = std::string::insert(&v12, 0LL, "cannot use push_back() with ");
      __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      std::string::size_type cap = v10->__r_.__value_.__l.__cap_;
      __int128 v13 = v11;
      v10->__r_.__value_.__l.__size_ = 0LL;
      v10->__r_.__value_.__l.__cap_ = 0LL;
      v10->__r_.__value_.__r.__words[0] = 0LL;
      sub_100005128(308, (uint64_t)&v13, exception);
    }
  }

  else
  {
    *(_BYTE *)a1 = 2;
    uint64_t v4 = operator new(0x18uLL);
    v4[1] = 0LL;
    void v4[2] = 0LL;
    void *v4 = 0LL;
    *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
    sub_1000041AC(a1);
  }

  uint64_t v5 = *(uint64_t **)(a1 + 8);
  unint64_t v6 = v5[1];
  if (v6 >= v5[2])
  {
    uint64_t result = sub_100004B7C(v5, a2);
  }

  else
  {
    *(_BYTE *)unint64_t v6 = *(_BYTE *)a2;
    *(void *)(v6 + _Block_object_dispose(va, 8) = *(void *)(a2 + 8);
    sub_1000041AC(a2);
    *(_BYTE *)a2 = 0;
    *(void *)(a2 + _Block_object_dispose(va, 8) = 0LL;
    sub_1000041AC(v6);
    uint64_t result = v6 + 16;
  }

  v5[1] = result;
  return result;
}

void sub_100057D40( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }

  else if (!v22)
  {
    goto LABEL_8;
  }

  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t sub_100057DA0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  return sub_100057E18(a1, (uint64_t)a2);
}

void sub_100057E00( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t sub_100057E18(uint64_t result, uint64_t a2)
{
  uint64_t v2 = (char *)result;
  if (*(_BYTE *)result != 2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    uint64_t v5 = (char *)sub_10000528C(v2);
    sub_100005064(&v8, v5);
    unint64_t v6 = std::string::insert(&v8, 0LL, "type must be array, but is ");
    __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    std::string::size_type cap = v6->__r_.__value_.__l.__cap_;
    __int128 v9 = v7;
    v6->__r_.__value_.__l.__size_ = 0LL;
    v6->__r_.__value_.__l.__cap_ = 0LL;
    v6->__r_.__value_.__r.__words[0] = 0LL;
    sub_100005128(302, (uint64_t)&v9, exception);
  }

  uint64_t v3 = *(uint64_t **)(result + 8);
  return result;
}

void sub_100057F48( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }

  else if (!v22)
  {
    goto LABEL_8;
  }

  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t sub_100057FA8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(void *)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)
  {
    sub_100058114((void **)a1);
    if (a4 >> 60) {
      sub_1000046F8();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= a4) {
      uint64_t v11 = a4;
    }
    else {
      unint64_t v12 = v11;
    }
    sub_10000C194((void *)a1, v12);
    uint64_t result = sub_10000CA0C(v8, a2, a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }

  unint64_t v14 = (*(void *)(a1 + 8) - v9) >> 4;
  if (v14 < a4)
  {
    uint64_t v15 = a2 + 16 * v14;
    sub_10005814C((uint64_t)&v17, a2, v15, v9);
    uint64_t result = sub_10000CA0C(v8, v15, a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + _Block_object_dispose(va, 8) = result;
    return result;
  }

  sub_10005814C((uint64_t)&v18, a2, a3, v9);
  return sub_100004CA0(a1, v16);
}

void sub_100058100(_Unwind_Exception *a1)
{
  *(void *)(v1 + _Block_object_dispose(va, 8) = v2;
  _Unwind_Resume(a1);
}

void sub_100058108(_Unwind_Exception *a1)
{
  *(void *)(v1 + _Block_object_dispose(va, 8) = v2;
  _Unwind_Resume(a1);
}

void sub_100058114(void **a1)
{
  if (*a1)
  {
    sub_10000469C(a1);
    operator delete(*a1);
    *a1 = 0LL;
    a1[1] = 0LL;
    a1[2] = 0LL;
  }

uint64_t sub_10005814C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    sub_10000C3E4((uint64_t)v10, v5);
    sub_1000041AC((uint64_t)v10);
    unsigned __int8 v7 = *(_BYTE *)a4;
    *(_BYTE *)a4 = v10[0];
    v10[0] = v7;
    uint64_t v8 = *(uint64_t **)(a4 + 8);
    *(void *)(a4 + _Block_object_dispose(va, 8) = v11;
    uint64_t v11 = v8;
    sub_1000041AC(a4);
    sub_1000041AC((uint64_t)v10);
    sub_10000425C(&v11, v10[0]);
    v5 += 16LL;
    a4 += 16LL;
  }

  while (v5 != v6);
  return v6;
}

uint64_t sub_10005822C(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 2;
  uint64_t v4 = operator new(0x18uLL);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
  void v4[2] = *(void *)(a2 + 16);
  *(void *)a2 = 0LL;
  *(void *)(a2 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  return sub_1000041AC(a1);
}

uint64_t sub_10005827C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *(_BYTE *)uint64_t v3 = 0;
  *(void *)(v3 + _Block_object_dispose(va, 8) = 0LL;
  sub_10005822C(v3, a2);
  uint64_t result = sub_1000041AC(v3);
  *(void *)(a1 + _Block_object_dispose(va, 8) = v3 + 16;
  return result;
}

void sub_1000582BC(_Unwind_Exception *a1)
{
  *(void *)(v1 + _Block_object_dispose(va, 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1000582C4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  else {
    unint64_t v9 = v5;
  }
  char v17 = a1 + 2;
  uint64_t v10 = (char *)sub_1000047F4(v7, v9);
  uint64_t v11 = (uint64_t)&v10[16 * v4];
  *(void *)&__int128 v15 = v10;
  *((void *)&v15 + 1) = v11;
  *(void *)&__int128 v16 = v11;
  *((void *)&v16 + 1) = &v10[16 * v12];
  *(_BYTE *)uint64_t v11 = 0;
  *(void *)(v11 + _Block_object_dispose(va, 8) = 0LL;
  sub_10005822C(v11, a2);
  sub_1000041AC(v11);
  *(void *)&__int128 v16 = v16 + 16;
  sub_10000470C(a1, &v15);
  uint64_t v13 = a1[1];
  sub_100004A50((uint64_t)&v15);
  return v13;
}

void sub_1000583CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_1000583E8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1001284D0;
  result[1] = v3;
  return result;
}

uint64_t sub_10005841C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1001284D0;
  a2[1] = v2;
  return result;
}

__n128 *sub_100058438(__n128 *result)
{
  uint64_t v1 = result->n128_i64[1];
  if (!*(_BYTE *)(v1 + 144))
  {
    v5[0] = 2;
    uint64_t v7 = 0LL;
    uint64_t v8 = 0LL;
    uint64_t v6 = sub_10000BD28((uint64_t *)&v8, &v7);
    sub_1000041AC((uint64_t)v5);
    sub_100057DA0((uint64_t)v5, &v9);
    LOBYTE(v10) = 1;
    sub_1000585F0(v1 + 120, &v9);
    if ((_BYTE)v10)
    {
      uint64_t v8 = &v9;
      sub_100004D64((void ***)&v8);
    }

    sub_1000041AC((uint64_t)v5);
    sub_10000425C(&v6, v5[0]);
    uint64_t v2 = *(void *)(*(void *)(v1 + 40) + 72LL);
    uint64_t v3 = sub_10008D0C4(v1);
    v9.n128_u64[0] = (unint64_t)&off_100128540;
    v9.n128_u64[1] = v1;
    uint64_t v10 = &v9;
    (*(void (**)(uint64_t, uint64_t, __n128 *))(*(void *)v2 + 80LL))(v2, v3, &v9);
    uint64_t result = v10;
    if (v10 == &v9)
    {
      uint64_t v4 = 4LL;
      uint64_t result = &v9;
    }

    else
    {
      if (!v10) {
        return result;
      }
      uint64_t v4 = 5LL;
    }

    return (__n128 *)(*(uint64_t (**)(void))(result->n128_u64[0] + 8 * v4))();
  }

  return result;
}

void sub_100058570( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    sub_1000045D0(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000585A8(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

void (**sub_1000585E4())(std::__shared_weak_count *__hidden this, const std::type_info *)
{
}

__n128 sub_1000585F0(uint64_t a1, __n128 *a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(_BYTE *)(a1 + 24))
    {
      sub_100058114((void **)a1);
      __n128 result = *a2;
      *(__n128 *)a1 = *a2;
      *(void *)(a1 + 16) = a2[1].n128_u64[0];
      a2->n128_u64[0] = 0LL;
      a2->n128_u64[1] = 0LL;
      a2[1].n128_u64[0] = 0LL;
    }
  }

  else if (*(_BYTE *)(a1 + 24))
  {
    unint64_t v5 = (void **)a1;
    sub_100004D64(&v5);
    *(_BYTE *)(a1 + memset(v15, 170, 24) = 0;
  }

  else
  {
    *(void *)a1 = 0LL;
    *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
    *(void *)(a1 + 16) = 0LL;
    __n128 result = *a2;
    *(__n128 *)a1 = *a2;
    *(void *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0LL;
    a2->n128_u64[1] = 0LL;
    a2[1].n128_u64[0] = 0LL;
    *(_BYTE *)(a1 + memset(v15, 170, 24) = 1;
  }

  return result;
}

void *sub_1000586C4(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &off_100128540;
  result[1] = v3;
  return result;
}

uint64_t sub_1000586F8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_100128540;
  a2[1] = v2;
  return result;
}

uint64_t sub_100058714(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  unint64_t v5 = v4[16];
  if (v5 >= v4[17])
  {
    uint64_t result = sub_1000587D0(v4 + 15, a3);
  }

  else
  {
    *(_BYTE *)unint64_t v5 = *(_BYTE *)a3;
    *(void *)(v5 + _Block_object_dispose(va, 8) = *(void *)(a3 + 8);
    sub_1000041AC(a3);
    *(_BYTE *)a3 = 0;
    *(void *)(a3 + _Block_object_dispose(va, 8) = 0LL;
    sub_1000041AC(v5);
    uint64_t result = v5 + 16;
  }

  uint8_t v4[16] = result;
  return result;
}

uint64_t sub_100058788(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void (**sub_1000587C4())(std::__shared_weak_count *__hidden this, const std::type_info *)
{
}

uint64_t sub_1000587D0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  else {
    unint64_t v9 = v5;
  }
  char v17 = a1 + 2;
  uint64_t v10 = (char *)sub_1000047F4(v7, v9);
  uint64_t v11 = (uint64_t)&v10[16 * v4];
  *(void *)&__int128 v15 = v10;
  *((void *)&v15 + 1) = v11;
  *((void *)&v16 + 1) = &v10[16 * v12];
  *(_BYTE *)uint64_t v11 = *(_BYTE *)a2;
  *(void *)(v11 + _Block_object_dispose(va, 8) = *(void *)(a2 + 8);
  sub_1000041AC(a2);
  *(_BYTE *)a2 = 0;
  *(void *)(a2 + _Block_object_dispose(va, 8) = 0LL;
  sub_1000041AC(v11);
  *(void *)&__int128 v16 = v11 + 16;
  sub_10000470C(a1, &v15);
  uint64_t v13 = a1[1];
  sub_100004A50((uint64_t)&v15);
  return v13;
}

void sub_1000588E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000588F4(void *a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_1000588FC(void *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  id v5 = a1;
  if (a2 >= 0xB) {
    +[NSException raise:format:]( &OBJC_CLASS___NSException,  "raise:format:",  NSInvalidArgumentException,  @"Object exceeded the max depth");
  }
  uint64_t v6 = objc_opt_class(&OBJC_CLASS___NSString);
  if ((objc_opt_isKindOfClass(v5, v6) & 1) != 0)
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)[v5 UTF8String];
    if (!__p.__r_.__value_.__r.__words[0]) {
      +[NSException raise:format:]( &OBJC_CLASS___NSException,  "raise:format:",  NSInvalidArgumentException,  @"Invalid non-UTF8 character(s) in string value");
    }
    sub_10000E89C(a3, &__p.__r_.__value_.__l.__data_);
    goto LABEL_41;
  }

  uint64_t v7 = objc_opt_class(&OBJC_CLASS___NSNumber);
  if ((objc_opt_isKindOfClass(v5, v7) & 1) != 0)
  {
    id v8 = v5;
    CFTypeID v9 = CFGetTypeID(v8);
    if (v9 == CFBooleanGetTypeID())
    {
      unsigned int v10 = [v8 BOOLValue];
      *(_BYTE *)a3 = 4;
      *(void *)(a3 + _Block_object_dispose(va, 8) = v10;
LABEL_40:
      sub_1000041AC(a3);
      sub_1000041AC(a3);

      goto LABEL_41;
    }

    id v12 = v8;
    int v13 = *(char *)[v12 objCType];
    if (v13 <= 80)
    {
      if (v13 > 72)
      {
        if (v13 == 73 || v13 == 76) {
          goto LABEL_38;
        }
        goto LABEL_42;
      }

      if (v13 != 66)
      {
        if (v13 == 67)
        {
LABEL_38:
          id v20 = [v12 unsignedLongLongValue];
          char v21 = 6;
          goto LABEL_39;
        }

void sub_100058E80( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
  _Unwind_Resume(a1);
}

id sub_100058F08(unsigned __int8 *a1)
{
  int v2 = *a1;
  if (v2 == 6)
  {
    __p.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
    sub_100059F20(a1, (unint64_t *)&__p);
    uint64_t v3 = objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  __p.__r_.__value_.__r.__words[0]));
    goto LABEL_7;
  }

  if (v2 == 4)
  {
    __p.__r_.__value_.__s.__data_[0] = -86;
    sub_100059DD4((char *)a1, &__p);
    uint64_t v3 = objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  __p.__r_.__value_.__s.__data_[0]));
LABEL_7:
    uint64_t v4 = (void *)v3;
    return v4;
  }

  if ((v2 - 5) <= 1)
  {
    __p.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
    sub_10000FF7C(a1, (uint64_t *)&__p);
    uint64_t v3 = objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithLongLong:",  __p.__r_.__value_.__r.__words[0]));
    goto LABEL_7;
  }

  uint64_t v4 = 0LL;
  switch(*a1)
  {
    case 0u:
      uint64_t v3 = objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
      goto LABEL_7;
    case 1u:
      int64x2_t v67 = 0uLL;
      v68[0] = 0LL;
      __int128 v66 = 0LL;
      int64x2_t v65 = 0uLL;
      sub_100059694((char **)&v67, *(void *)(*((void *)a1 + 1) + 16LL));
      unint64_t v8 = *a1;
      if (*a1)
      {
        if ((_DWORD)v8 == 1)
        {
          unint64_t v8 = *(void *)(*((void *)a1 + 1) + 16LL);
        }

        else if ((_DWORD)v8 == 2)
        {
          unint64_t v8 = (uint64_t)(*(void *)(*((void *)a1 + 1) + 8LL) - **((void **)a1 + 1)) >> 4;
        }

        else
        {
          unint64_t v8 = 1LL;
        }
      }

      sub_100059694((char **)&v65, v8);
      __int128 v45 = &v66;
      uint64_t v64 = a1;
      sub_100059778((uint64_t *)&v64, (uint64_t)&__p);
      sub_1000597F8((uint64_t *)&v64, (uint64_t)v53);
      while (!sub_1000087E8((unsigned __int8 **)&__p, v53))
      {
        *(void *)&__int128 v10 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)unint64_t v52 = v10;
        *(_OWORD *)&_BYTE v52[16] = v10;
        __int128 v51 = v10;
        std::string v48 = __p;
        __int128 v49 = v58;
        __int128 v50 = v59;
        if (SHIBYTE(v61) < 0)
        {
          sub_10000B8BC(&v51, (void *)v60, *((unint64_t *)&v60 + 1));
        }

        else
        {
          __int128 v51 = v60;
          *(void *)unint64_t v52 = v61;
        }

        if (SHIBYTE(v63) < 0)
        {
          sub_10000B8BC(&v52[8], (void *)v62, *((unint64_t *)&v62 + 1));
        }

        else
        {
          *(_OWORD *)&v52[8] = v62;
          *(void *)&v52[24] = v63;
        }

        uint64_t v11 = sub_100059878((unsigned __int8 **)&v48);
        else {
          uint64_t v12 = *(void *)v11;
        }
        uint64_t v13 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v12, v45));
        uint64_t v14 = v13;
        uint64_t v15 = v67.i64[1];
        if (v67.i64[1] >= v68[0])
        {
          uint64_t v17 = (v67.i64[1] - v67.i64[0]) >> 3;
          unint64_t v18 = (v68[0] - v67.i64[0]) >> 2;
          if (v18 <= v17 + 1) {
            unint64_t v18 = v17 + 1;
          }
          if (v68[0] - v67.i64[0] >= 0x7FFFFFFFFFFFFFF8uLL) {
            unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v19 = v18;
          }
          unint64_t v72 = (char **)v68;
          if (v19) {
            id v20 = (char *)sub_10001C3B0((uint64_t)v68, v19);
          }
          else {
            id v20 = 0LL;
          }
          char v21 = (uint64_t *)&v20[8 * v17];
          uint64_t v22 = &v20[8 * v19];
          __int128 v71 = v22;
          *char v21 = v14;
          uint64_t v16 = v21 + 1;
          v70.i64[1] = (uint64_t)(v21 + 1);
          double v23 = (void *)v67.i64[1];
          double v24 = (void *)v67.i64[0];
          if (v67.i64[1] == v67.i64[0])
          {
            int64x2_t v26 = vdupq_n_s64(v67.u64[1]);
          }

          else
          {
            do
            {
              uint64_t v25 = *--v23;
              *double v23 = 0LL;
              *--char v21 = v25;
            }

            while (v23 != v24);
            int64x2_t v26 = v67;
            uint64_t v16 = (void *)v70.i64[1];
            uint64_t v22 = v71;
          }

          v67.i64[0] = (uint64_t)v21;
          v67.i64[1] = (uint64_t)v16;
          int64x2_t v70 = v26;
          size_t v27 = (char *)v68[0];
          v68[0] = v22;
          __int128 v71 = v27;
          uint64_t v69 = v26.i64[0];
          sub_10005A268((uint64_t)&v69);
        }

        else
        {
          *(void *)v67.i64[1] = v13;
          uint64_t v16 = (void *)(v15 + 8);
        }

        v67.i64[1] = (uint64_t)v16;
        char v28 = sub_100008924((unsigned __int8 **)&v48);
        uint64_t v29 = sub_100058F08(v28);
        uint64_t v30 = objc_claimAutoreleasedReturnValue(v29);
        uint64_t v31 = v30;
        uint64_t v32 = v65.i64[1];
        if (v65.i64[1] >= (unint64_t)v66)
        {
          uint64_t v34 = (v65.i64[1] - v65.i64[0]) >> 3;
          unint64_t v35 = (uint64_t)&v66[-v65.i64[0]] >> 2;
          if (v35 <= v34 + 1) {
            unint64_t v35 = v34 + 1;
          }
          else {
            unint64_t v36 = v35;
          }
          unint64_t v72 = v45;
          if (v36) {
            int v37 = (char *)sub_10001C3B0((uint64_t)v45, v36);
          }
          else {
            int v37 = 0LL;
          }
          std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v38 = (uint64_t *)&v37[8 * v34];
          char v39 = &v37[8 * v36];
          __int128 v71 = v39;
          uint64_t *v38 = v31;
          id v33 = v38 + 1;
          v70.i64[1] = (uint64_t)(v38 + 1);
          unsigned __int8 v40 = (void *)v65.i64[1];
          size_t v41 = (void *)v65.i64[0];
          if (v65.i64[1] == v65.i64[0])
          {
            int64x2_t v43 = vdupq_n_s64(v65.u64[1]);
          }

          else
          {
            do
            {
              uint64_t v42 = *--v40;
              *unsigned __int8 v40 = 0LL;
              *--std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v38 = v42;
            }

            while (v40 != v41);
            int64x2_t v43 = v65;
            id v33 = (void *)v70.i64[1];
            char v39 = v71;
          }

          v65.i64[0] = (uint64_t)v38;
          v65.i64[1] = (uint64_t)v33;
          int64x2_t v70 = v43;
          size_t v44 = v66;
          __int128 v66 = v39;
          __int128 v71 = v44;
          uint64_t v69 = v43.i64[0];
          sub_10005A268((uint64_t)&v69);
        }

        else
        {
          *(void *)v65.i64[1] = v30;
          id v33 = (void *)(v32 + 8);
        }

        v65.i64[1] = (uint64_t)v33;
        if ((v52[31] & 0x80000000) != 0) {
          operator delete(*(void **)&v52[8]);
        }
        if ((v52[7] & 0x80000000) != 0) {
          operator delete((void *)v51);
        }
        sub_100018704((unsigned __int8 **)&__p);
        *(void *)&__int128 v59 = v59 + 1;
      }

      if (v56 < 0) {
        operator delete(v55);
      }
      if (v54 < 0) {
        operator delete(v53[7]);
      }
      if (SHIBYTE(v63) < 0) {
        operator delete((void *)v62);
      }
      if (SHIBYTE(v61) < 0) {
        operator delete((void *)v60);
      }
      uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v45));
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v65;
      sub_10005A1FC((void ***)&__p);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v67;
      sub_10005A1FC((void ***)&__p);
      break;
    case 2u:
      memset(&__p, 0, sizeof(__p));
      sub_100059694( &__p.__r_.__value_.__l.__data_,  (uint64_t)(*(void *)(*((void *)a1 + 1) + 8LL) - **((void **)a1 + 1)) >> 4);
      v47[0] = a1;
      memset(&v47[1], 0, 24);
      v47[4] = (unsigned __int8 *)0x8000000000000000LL;
      sub_100045378(v47);
      v46[0] = a1;
      memset(&v46[1], 0, 24);
      v46[4] = (unsigned __int8 *)0x8000000000000000LL;
      sub_100008AC8(v46);
      v53[0] = (unsigned __int8 *)&__p;
      while (!sub_1000087E8(v47, v46))
      {
        uint64_t v6 = sub_100008924(v47);
        uint64_t v7 = sub_100058F08(v6);
        v48.__r_.__value_.__r.__words[0] = objc_claimAutoreleasedReturnValue(v7);
        sub_10005A398((char ***)v53, (uint64_t *)&v48);

        sub_100018704(v47);
      }

      uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:"));
      v53[0] = (unsigned __int8 *)&__p;
      sub_10005A1FC((void ***)v53);
      break;
    case 3u:
      sub_1000218CC((uint64_t)a1, &__p);
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", p_p));
      break;
    case 7u:
      __p.__r_.__value_.__r.__words[0] = -1LL;
      sub_10005A088(a1, (double *)&__p);
      uint64_t v3 = objc_claimAutoreleasedReturnValue( +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  *(double *)&__p.__r_.__value_.__l.__data_));
      goto LABEL_7;
    default:
      return v4;
  }

  return v4;
}

void sub_1000595B8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (a55 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100059694(char **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 3)
  {
    if (a2 >> 61) {
      sub_1000046F8();
    }
    uint64_t v5 = a1[1] - *a1;
    uint64_t v17 = result;
    uint64_t v6 = (char *)sub_10001C3B0(result, a2);
    CFTypeID v9 = *a1;
    unint64_t v8 = a1[1];
    if (v8 == *a1)
    {
      int64x2_t v12 = vdupq_n_s64((unint64_t)v8);
      __int128 v10 = &v6[v5 & 0xFFFFFFFFFFFFFFF8LL];
    }

    else
    {
      __int128 v10 = &v6[v5 & 0xFFFFFFFFFFFFFFF8LL];
      do
      {
        uint64_t v11 = *((void *)v8 - 1);
        v8 -= 8;
        *(void *)unint64_t v8 = 0LL;
        *((void *)v10 - 1) = v11;
        v10 -= 8;
      }

      while (v8 != v9);
      int64x2_t v12 = *(int64x2_t *)a1;
    }

    *a1 = v10;
    a1[1] = &v6[v5 & 0xFFFFFFFFFFFFFFF8LL];
    int64x2_t v15 = v12;
    uint64_t v13 = a1[2];
    a1[2] = &v6[8 * v7];
    uint64_t v16 = v13;
    uint64_t v14 = v12.i64[0];
    return sub_10005A268((uint64_t)&v14);
  }

  return result;
}

uint64_t sub_100059778@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  *(void *)&__int128 v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v6[0] = v4;
  v6[1] = v4;
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  sub_100008B44(v6, v3);
  sub_100045378((unsigned __int8 **)v6);
  return sub_10005A2B8(a2, (uint64_t)v6);
}

uint64_t sub_1000597F8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  *(void *)&__int128 v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v6[0] = v4;
  v6[1] = v4;
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  sub_100008B44(v6, v3);
  sub_100008AC8((unsigned __int8 **)v6);
  return sub_10005A2B8(a2, (uint64_t)v6);
}

uint64_t sub_100059878(unsigned __int8 **a1)
{
  if (!*a1) {
    sub_1000D90F8();
  }
  int v2 = **a1;
  if (v2 == 1) {
    return sub_10005714C(a1);
  }
  if (v2 != 2) {
    return (uint64_t)(a1 + 10);
  }
  unint64_t v3 = (unint64_t)a1[5];
  if ((unsigned __int8 *)v3 != a1[6])
  {
    sub_10005A318((uint64_t)(a1 + 7), v3);
    a1[6] = a1[5];
  }

  return (uint64_t)(a1 + 7);
}

uint64_t sub_1000598EC(uint64_t a1)
{
  return a1;
}

void sub_10005992C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = objc_opt_class(&OBJC_CLASS___NSString);
  if ((objc_opt_isKindOfClass(v5, v7) & 1) != 0)
  {
    uint64_t v11 = (char *)[v5 UTF8String];
    if (!v11) {
      +[NSException raise:format:]( &OBJC_CLASS___NSException,  "raise:format:",  NSInvalidArgumentException,  @"Invalid non-UTF8 character(s) in dictionary key");
    }
    unint64_t v8 = *(uint64_t ***)(a1 + 32);
    sub_1000588FC(&v9, v6, (*(_BYTE *)(a1 + 40) + 1));
    sub_100059B78(v8, &v11, (uint64_t)&v9);
    sub_1000041AC((uint64_t)&v9);
    sub_10000425C(&v10, v9);
  }

  else
  {
    +[NSException raise:format:]( &OBJC_CLASS___NSException,  "raise:format:",  NSInvalidArgumentException,  @"Invalid (non-string) key in JSON dictionary");
  }
}

void sub_100059A58( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  _Unwind_Resume(a1);
}

void sub_100059A8C(uint64_t a1, uint64_t a2)
{
  int v2 = *(uint64_t **)(a1 + 32);
  sub_1000588FC(&v5, a2, (*(_BYTE *)(a1 + 40) + 1));
  unint64_t v3 = v2[1];
  if (v3 >= v2[2])
  {
    uint64_t v4 = sub_1000587D0(v2, (uint64_t)&v5);
  }

  else
  {
    *(_BYTE *)unint64_t v3 = v5;
    *(void *)(v3 + _Block_object_dispose(va, 8) = v6;
    sub_1000041AC((uint64_t)&v5);
    LOBYTE(v5) = 0;
    id v6 = 0LL;
    sub_1000041AC(v3);
    uint64_t v4 = v3 + 16;
  }

  v2[1] = v4;
  sub_1000041AC((uint64_t)&v5);
  sub_10000425C(&v6, v5);
}

void sub_100059B5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t *sub_100059B78(uint64_t **a1, char **a2, uint64_t a3)
{
  uint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v4 = (uint64_t **)sub_1000053B0((uint64_t)a1, &v7, (const void **)v8[0] + 4);
  uint64_t v5 = *v4;
  if (!*v4)
  {
    sub_1000054D0(a1, v7, v4, v8[0]);
    uint64_t v5 = v8[0];
    v8[0] = 0LL;
  }

  sub_1000296FC((uint64_t)v8, 0LL);
  return v5;
}

void sub_100059C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void *sub_100059C54@<X0>(uint64_t a1@<X0>, char **a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  memset(a4, 170, 24);
  unint64_t v8 = operator new(0x48uLL);
  *a4 = v8;
  a4[1] = v7;
  *((_BYTE *)a4 + 16) = 0;
  uint64_t result = sub_100059CD0(v8 + 4, a2, a3);
  *((_BYTE *)a4 + 16) = 1;
  return result;
}

void sub_100059CB8(_Unwind_Exception *a1)
{
}

void *sub_100059CD0(void *a1, char **a2, uint64_t a3)
{
  uint64_t v5 = sub_100005064(a1, *a2);
  *((_BYTE *)v5 + memset(v15, 170, 24) = *(_BYTE *)a3;
  uint64_t v6 = (uint64_t)(v5 + 3);
  v5[4] = *(void *)(a3 + 8);
  sub_1000041AC(a3);
  *(_BYTE *)a3 = 0;
  *(void *)(a3 + _Block_object_dispose(va, 8) = 0LL;
  sub_1000041AC(v6);
  return a1;
}

uint64_t sub_100059D30(uint64_t a1, void *a2)
{
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(_BYTE *)a1 = 1;
  *(void *)(a1 + _Block_object_dispose(va, 8) = sub_100059D78(a2);
  sub_1000041AC(a1);
  sub_1000041AC(a1);
  return a1;
}

void *sub_100059D78(void *a1)
{
  uint64_t result = operator new(0x18uLL);
  unint64_t v3 = a1 + 1;
  uint64_t v4 = a1[1];
  *uint64_t result = *a1;
  result[1] = v4;
  uint64_t v5 = result + 1;
  uint64_t v6 = a1[2];
  result[2] = v6;
  if (v6)
  {
    *(void *)(v4 + 16) = v5;
    *a1 = v3;
    *unint64_t v3 = 0LL;
    a1[2] = 0LL;
  }

  else
  {
    *uint64_t result = v5;
  }

  return result;
}

char *sub_100059DD4(char *result, _BYTE *a2)
{
  int v2 = result;
  if (*result != 4)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    uint64_t v4 = (char *)sub_10000528C(v2);
    sub_100005064(&v7, v4);
    uint64_t v5 = std::string::insert(&v7, 0LL, "type must be BOOLean, but is ");
    __int128 v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    std::string::size_type cap = v5->__r_.__value_.__l.__cap_;
    __int128 v8 = v6;
    v5->__r_.__value_.__l.__size_ = 0LL;
    v5->__r_.__value_.__l.__cap_ = 0LL;
    v5->__r_.__value_.__r.__words[0] = 0LL;
    sub_100005128(302, (uint64_t)&v8, exception);
  }

  *a2 = result[8];
  return result;
}

void sub_100059EC0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }

  else if (!v22)
  {
    goto LABEL_8;
  }

  __cxa_free_exception(v21);
  goto LABEL_8;
}

unsigned __int8 *sub_100059F20(unsigned __int8 *result, unint64_t *a2)
{
  int v2 = (char *)result;
  int v3 = *result;
  if (v3 != 5)
  {
    if (v3 == 7)
    {
      unint64_t v4 = (unint64_t)*((double *)result + 1);
      goto LABEL_6;
    }

    if (v3 != 6)
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
      __int128 v6 = (char *)sub_10000528C(v2);
      sub_100005064(&v9, v6);
      std::string v7 = std::string::insert(&v9, 0LL, "type must be number, but is ");
      __int128 v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      std::string::size_type cap = v7->__r_.__value_.__l.__cap_;
      __int128 v10 = v8;
      v7->__r_.__value_.__l.__size_ = 0LL;
      v7->__r_.__value_.__l.__cap_ = 0LL;
      v7->__r_.__value_.__r.__words[0] = 0LL;
      sub_100005128(302, (uint64_t)&v10, exception);
    }
  }

  unint64_t v4 = *((void *)result + 1);
LABEL_6:
  *a2 = v4;
  return result;
}

void sub_10005A028( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }

  else if (!v22)
  {
    goto LABEL_8;
  }

  __cxa_free_exception(v21);
  goto LABEL_8;
}

unsigned __int8 *sub_10005A088(unsigned __int8 *result, double *a2)
{
  int v2 = (char *)result;
  int v3 = *result;
  switch(v3)
  {
    case 5:
      double v4 = (double)*((uint64_t *)result + 1);
      break;
    case 7:
      double v4 = *((double *)result + 1);
      break;
    case 6:
      double v4 = (double)*((unint64_t *)result + 1);
      break;
    default:
      exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
      __int128 v6 = (char *)sub_10000528C(v2);
      sub_100005064(&v9, v6);
      std::string v7 = std::string::insert(&v9, 0LL, "type must be number, but is ");
      __int128 v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      std::string::size_type cap = v7->__r_.__value_.__l.__cap_;
      __int128 v10 = v8;
      v7->__r_.__value_.__l.__size_ = 0LL;
      v7->__r_.__value_.__l.__cap_ = 0LL;
      v7->__r_.__value_.__r.__words[0] = 0LL;
      sub_100005128(302, (uint64_t)&v10, exception);
  }

  *a2 = v4;
  return result;
}

void sub_10005A19C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }

  else if (!v22)
  {
    goto LABEL_8;
  }

  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_10005A1FC(void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = (char *)**a1;
  if (v2)
  {
    double v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        __int128 v6 = (void *)*((void *)v4 - 1);
        v4 -= 8;
      }

      while (v4 != v2);
      uint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

uint64_t sub_10005A268(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_10005A2B8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + memset(v15, 170, 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = v3;
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
  sub_100005064((void *)(a1 + 56), "0");
  sub_100005064((void *)(a1 + 80), "");
  return a1;
}

double sub_10005A318(uint64_t a1, unint64_t __val)
{
  double result = *(double *)&v4.__r_.__value_.__l.__data_;
  *(std::string *)a1 = v4;
  return result;
}

char ***sub_10005A398(char ***a1, uint64_t *a2)
{
  std::string v4 = *a1;
  uint64_t v5 = (*a1)[1];
  __int128 v6 = *a1;
  unint64_t v9 = (unint64_t)v6[2];
  uint64_t v7 = (uint64_t)(v6 + 2);
  unint64_t v8 = v9;
  if ((unint64_t)v5 >= v9)
  {
    uint64_t v12 = (v5 - *v4) >> 3;
    uint64_t v13 = v8 - (void)*v4;
    uint64_t v14 = v13 >> 2;
    else {
      unint64_t v15 = v14;
    }
    uint64_t v29 = v7;
    if (v15) {
      uint64_t v16 = (char *)sub_10001C3B0(v7, v15);
    }
    else {
      uint64_t v16 = 0LL;
    }
    uint64_t v17 = &v16[8 * v12];
    unint64_t v18 = &v16[8 * v15];
    char v28 = v18;
    uint64_t v19 = *a2;
    *a2 = 0LL;
    *(void *)uint64_t v17 = v19;
    uint64_t v11 = v17 + 8;
    size_t v27 = v17 + 8;
    char v21 = *v4;
    id v20 = v4[1];
    if (v20 == *v4)
    {
      double v23 = v4[1];
    }

    else
    {
      do
      {
        uint64_t v22 = *((void *)v20 - 1);
        v20 -= 8;
        *(void *)id v20 = 0LL;
        *((void *)v17 - 1) = v22;
        v17 -= 8;
      }

      while (v20 != v21);
      double v23 = *v4;
      id v20 = v4[1];
      uint64_t v11 = v27;
      unint64_t v18 = v28;
    }

    char *v4 = v17;
    v26[0] = v23;
    v26[1] = v23;
    v4[1] = v11;
    size_t v27 = v20;
    double v24 = v4[2];
    void v4[2] = v18;
    char v28 = v24;
    sub_10005A268((uint64_t)v26);
  }

  else
  {
    uint64_t v10 = *a2;
    *a2 = 0LL;
    *(void *)uint64_t v5 = v10;
    uint64_t v11 = v5 + 8;
  }

  v4[1] = v11;
  return a1;
}

__CFString *sub_10005A4EC(void *a1)
{
  uint64_t v1 = a1;
  int v2 = v1;
  if (v1)
  {
    if ((-[__CFString isEqualToString:](v1, "isEqualToString:", @"China") & 1) != 0)
    {
      __int128 v3 = @"China mainland";
LABEL_10:

      int v2 = (__CFString *)v3;
      return v2;
    }

    if ((-[__CFString isEqualToString:](v2, "isEqualToString:", @"Taiwan (China)") & 1) != 0)
    {
      __int128 v3 = @"Taiwan";
      goto LABEL_10;
    }

    if ((-[__CFString isEqualToString:](v2, "isEqualToString:", @"Hong Kong (China)") & 1) != 0)
    {
      __int128 v3 = @"Hong Kong";
      goto LABEL_10;
    }

    if (-[__CFString isEqualToString:](v2, "isEqualToString:", @"Macao (China)"))
    {
      __int128 v3 = @"Macao";
      goto LABEL_10;
    }
  }

  return v2;
}

void sub_10005A598(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t start()
{
  out_tokeuint64_t n = -1;
  __int128 v686 = 0uLL;
  __int128 v685 = 0uLL;
  __int128 v684 = 0uLL;
  context = objc_autoreleasePoolPush();
  sub_100092280();
  sub_100055B44();
  int v0 = getenv("USER");
  if (!v0) {
    int v0 = "";
  }
  if (strcmp(v0, "_analyticsd"))
  {
    v582 = (os_log_s *)qword_1001318E8;
    if (os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_ERROR)) {
      sub_1000D9278(v582);
    }
    v583 = (os_log_s *)qword_1001318E8;
    if (os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_ERROR)) {
      sub_1000D9218(v583, v584, v585);
    }
    exit(1);
  }

  sub_10006EF40();
  memset(&v710, 0, sizeof(v710));
  uid_t v1 = getuid();
  int v2 = 10;
  while (1)
  {
    __int128 v3 = sub_1000411AC();
    BOOL v4 = !stat((const char *)v3, &v710) && v710.st_uid == v1;
    if (v4 && (~v710.st_mode & 0x1C0) == 0) {
      break;
    }
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1000D91E0(&v689, &v690, v5);
    }
    sleep(0xAu);
    if (!--v2)
    {
      uid_t st_uid = v710.st_uid;
      BOOL v7 = (~v710.st_mode & 0x1C0) == 0;
      goto LABEL_18;
    }
  }

  BOOL v7 = 1;
  uid_t st_uid = v1;
LABEL_18:
  if (st_uid != v1 || !v7)
  {
    unint64_t v8 = sub_1000411AC();
    else {
      unint64_t v9 = *(const char **)v8;
    }
    memset(&v710, 0, sizeof(v710));
    *__error() = 0;
    stat(v9, &v710);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT))
    {
      uid_t v577 = v710.st_uid;
      int st_mode = v710.st_mode;
      int v579 = *__error();
      v580 = __error();
      v581 = strerror(*v580);
      *(_DWORD *)v691 = 67110146;
      *(_DWORD *)&v691[4] = v577;
      *(_WORD *)&v691[8] = 1024;
      *(_DWORD *)&v691[10] = st_mode;
      *(_WORD *)&v691[14] = 1024;
      LODWORD(v692) = v579;
      WORD2(v692) = 2082;
      *(void *)((char *)&v692 + 6) = v581;
      HIWORD(v692) = 2082;
      *(void *)&__int128 v693 = v9;
      _os_log_fault_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_FAULT,  "==== DEACTIVATING! Home directory uid: %d mode: 0x%X errno: %d errno string: %{public}s path: %{public}s ====",  v691,  0x28u);
    }

    uint64_t v10 = xpc_connection_create_mach_service("com.apple.analyticsd", 0LL, 1uLL);
    uint64_t v11 = v10;
    if (!v10) {
      uint64_t v11 = (_xpc_connection_s *)xpc_null_create();
    }

    xpc_connection_set_event_handler(v11, &stru_100128630);
    uint64_t v12 = xpc_connection_create_mach_service("com.apple.analyticsd.messagetracer", 0LL, 1uLL);
    uint64_t v13 = v12;
    if (!v12) {
      uint64_t v13 = (_xpc_connection_s *)xpc_null_create();
    }

    xpc_connection_set_event_handler(v13, &stru_100128650);
    xpc_connection_activate(v11);
    xpc_connection_activate(v13);
    CFRunLoopRun();
  }

  sub_10006F218();
  dispatch_source_t v14 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_signal, 0xFuLL, 0LL, &_dispatch_main_q);
  unint64_t v15 = (void *)qword_1001317F8;
  qword_1001317F8 = (uint64_t)v14;

  if (qword_1001317F8)
  {
    dispatch_source_set_event_handler((dispatch_source_t)qword_1001317F8, &stru_100128670);
    dispatch_resume((dispatch_object_t)qword_1001317F8);
  }

  uint64_t v16 = (os_log_s *)(id)qword_1001318E8;
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v710.st_dev) = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "==== START ====", (uint8_t *)&v710, 2u);
  }

  uint64_t v17 = dispatch_queue_create("analyticsd.MTShim ConnectionAnalyticsStartupQueue", 0LL);
  unint64_t v18 = v17;

  dispatch_queue_attr_t v19 = dispatch_queue_attr_make_with_qos_class(0LL, QOS_CLASS_UTILITY, 0);
  id v20 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v19);
  dispatch_queue_t v616 = dispatch_queue_create("analyticsd.MessageTracerShimQueue", v20);

  *((void *)&v683 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v683 = 0xAAAAAAAAAAAAAAAALL;
  sub_100010158(&v683);
  memset(buf, 170, sizeof(buf));
  sub_10008511C(&v683, (uint64_t *)buf);
  uint64_t v21 = v683;
  __darwin_ino64_t v22 = *(void *)buf;
  uint64_t v23 = *(void *)&buf[8];
  if (*(void *)&buf[8])
  {
    double v24 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }

  *(void *)&v710.st_dev = off_1001286D0;
  v710.st_ino = v22;
  uint64_t v682 = 0LL;
  uint64_t v681 = 0LL;
  *(void *)&v710.uid_t st_uid = v23;
  *(void *)&v710.st_rdev = &v710;
  sub_1000103E8(v21, (uint64_t)&v710);
  int64x2_t v26 = *(stat **)&v710.st_rdev;
  if (*(stat **)&v710.st_rdev == &v710)
  {
    uint64_t v27 = 4LL;
    int64x2_t v26 = &v710;
  }

  else
  {
    if (!*(void *)&v710.st_rdev) {
      goto LABEL_42;
    }
    uint64_t v27 = 5LL;
  }

  (*(void (**)(void))(*(void *)&v26->st_dev + 8 * v27))();
LABEL_42:
  unint64_t v680 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v679 = 0xAAAAAAAAAAAAAAAALL;
  sub_1000B046C(&v679);
  __darwin_time_t v678 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v677 = 0xAAAAAAAAAAAAAAAALL;
  sub_1000430C8((std::string *)&v710);
  sub_100065D6C((__int128 *)&v710.st_dev, &v679, (uint64_t)&v677);
  if (SHIBYTE(v710.st_gid) < 0) {
    operator delete(*(void **)&v710.st_dev);
  }
  __darwin_ino64_t v676 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v675 = 0xAAAAAAAAAAAAAAAALL;
  sub_100042FA0((std::string *)&v710);
  sub_1000B7808((__int128 *)&v710.st_dev, &v679, (uint64_t)&v675);
  if (SHIBYTE(v710.st_gid) < 0) {
    operator delete(*(void **)&v710.st_dev);
  }
  unint64_t v674 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v673 = 0xAAAAAAAAAAAAAAAALL;
  sub_1000058F8(&v673);
  unint64_t v672 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v671 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&v710.st_dev = &off_100128760;
  *(void *)&v710.st_rdev = &v710;
  sub_10008A440((uint64_t)&v710, &v671);
  char v28 = *(stat **)&v710.st_rdev;
  if (*(stat **)&v710.st_rdev == &v710)
  {
    uint64_t v29 = 4LL;
    char v28 = &v710;
  }

  else
  {
    if (!*(void *)&v710.st_rdev) {
      goto LABEL_51;
    }
    uint64_t v29 = 5LL;
  }

  (*(void (**)(void))(*(void *)&v28->st_dev + 8 * v29))();
LABEL_51:
  if (v675) {
    unint64_t v30 = v675 + 112;
  }
  else {
    unint64_t v30 = 0LL;
  }
  *(void *)v691 = v30;
  *(void *)&v691[8] = v676;
  if (v676)
  {
    uint64_t v31 = (unint64_t *)(v676 + 8);
    do
      unint64_t v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }

  uint64_t v33 = v677;
  unint64_t v34 = v677 + 120;
  if (!v677) {
    unint64_t v34 = 0LL;
  }
  unint64_t v669 = v34;
  __darwin_ino64_t v670 = v678;
  if (v678)
  {
    unint64_t v35 = (unint64_t *)(v678 + 8);
    do
      unint64_t v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
    if (v33) {
      uint64_t v37 = v33 + 128;
    }
    else {
      uint64_t v37 = 0LL;
    }
    uint64_t v667 = v37;
    v668 = (std::__shared_weak_count *)v678;
    if (v678)
    {
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v38 = (unint64_t *)(v678 + 8);
      do
        unint64_t v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
    }
  }

  else
  {
    if (v677) {
      uint64_t v40 = v677 + 128;
    }
    else {
      uint64_t v40 = 0LL;
    }
    uint64_t v667 = v40;
    v668 = 0LL;
  }

  uint64_t v665 = *(void *)buf;
  unint64_t v666 = *(void *)&buf[8];
  if (*(void *)&buf[8])
  {
    size_t v41 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }

  sub_100022780(&v673, v691, &v669, &v667, &v671, &v665, &v679, (uint64_t *)&v710.st_dev);
  __int128 v43 = *(_OWORD *)&v710.st_dev;
  v710.st_ino = 0LL;
  *(void *)&v710.st_dev = 0LL;
  size_t v44 = (std::__shared_weak_count *)*((void *)&v684 + 1);
  __int128 v684 = v43;
  if (v44)
  {
    p_shared_owners = (unint64_t *)&v44->__shared_owners_;
    do
      unint64_t v46 = __ldaxr(p_shared_owners);
    while (__stlxr(v46 - 1, p_shared_owners));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }

  st_ino = (std::__shared_weak_count *)v710.st_ino;
  if (v710.st_ino)
  {
    std::string v48 = (unint64_t *)(v710.st_ino + 8);
    do
      unint64_t v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))st_ino->__on_zero_shared)(st_ino);
      std::__shared_weak_count::__release_weak(st_ino);
    }
  }

  __int128 v50 = (std::__shared_weak_count *)v666;
  if (v666)
  {
    __int128 v51 = (unint64_t *)(v666 + 8);
    do
      unint64_t v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }

  __int128 v53 = v668;
  if (v668)
  {
    char v54 = (unint64_t *)&v668->__shared_owners_;
    do
      unint64_t v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }

  char v56 = (std::__shared_weak_count *)v670;
  if (v670)
  {
    __int128 v57 = (unint64_t *)(v670 + 8);
    do
      unint64_t v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }

  __int128 v59 = *(std::__shared_weak_count **)&v691[8];
  if (*(void *)&v691[8])
  {
    __int128 v60 = (unint64_t *)(*(void *)&v691[8] + 8LL);
    do
      unint64_t v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }

  __darwin_ino64_t v670 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v669 = 0xAAAAAAAAAAAAAAAALL;
  sub_10002C28C(v691);
  *(_OWORD *)&v710.st_dev = *(_OWORD *)v691;
  memset(v691, 0, sizeof(v691));
  sub_10007341C(&v710, &v669);
  __int128 v62 = (std::__shared_weak_count *)v710.st_ino;
  if (v710.st_ino)
  {
    uint64_t v63 = (unint64_t *)(v710.st_ino + 8);
    do
      unint64_t v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }

  int64x2_t v65 = *(std::__shared_weak_count **)&v691[8];
  if (*(void *)&v691[8])
  {
    __int128 v66 = (unint64_t *)(*(void *)&v691[8] + 8LL);
    do
      unint64_t v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }

  v668 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v667 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&v710.st_dev = v669;
  v710.st_ino = v670;
  if (v670)
  {
    unint64_t v68 = (unint64_t *)(v670 + 8);
    do
      unint64_t v69 = __ldxr(v68);
    while (__stxr(v69 + 1, v68));
  }

  sub_10004566C(&v710, &v667);
  int64x2_t v70 = (std::__shared_weak_count *)v710.st_ino;
  if (v710.st_ino)
  {
    __int128 v71 = (unint64_t *)(v710.st_ino + 8);
    do
      unint64_t v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }

  unint64_t v666 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v665 = 0xAAAAAAAAAAAAAAAALL;
  if (v675) {
    unint64_t v73 = v675 + 112;
  }
  else {
    unint64_t v73 = 0LL;
  }
  *(void *)&v710.st_dev = v73;
  v710.st_ino = v676;
  if (v676)
  {
    __int128 v74 = (unint64_t *)(v676 + 8);
    do
      unint64_t v75 = __ldxr(v74);
    while (__stxr(v75 + 1, v74));
  }

  *(void *)v691 = v667;
  *(void *)&v691[8] = v668;
  if (v668)
  {
    char v76 = (unint64_t *)&v668->__shared_owners_;
    do
      unint64_t v77 = __ldxr(v76);
    while (__stxr(v77 + 1, v76));
  }

  sub_10006406C((uint64_t *)&v710.st_dev, v691, &v679, &v665);
  __int128 v78 = *(std::__shared_weak_count **)&v691[8];
  if (*(void *)&v691[8])
  {
    char v79 = (unint64_t *)(*(void *)&v691[8] + 8LL);
    do
      unint64_t v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }

  __int128 v81 = (std::__shared_weak_count *)v710.st_ino;
  if (v710.st_ino)
  {
    unsigned __int8 v82 = (unint64_t *)(v710.st_ino + 8);
    do
      unint64_t v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }

  __darwin_ino64_t v664 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v663 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v84 = v684;
  uint64_t v85 = v684 + 48;
  if (!(void)v684) {
    uint64_t v85 = 0LL;
  }
  *(void *)&v710.st_dev = v85;
  v710.st_ino = *((void *)&v684 + 1);
  if (*((void *)&v684 + 1))
  {
    id v86 = (unint64_t *)(*((void *)&v684 + 1) + 8LL);
    do
      unint64_t v87 = __ldxr(v86);
    while (__stxr(v87 + 1, v86));
    if (v84) {
      uint64_t v88 = v84 + 40;
    }
    else {
      uint64_t v88 = 0LL;
    }
    *(void *)v691 = v88;
    *(void *)&v691[8] = *((void *)&v684 + 1);
    if (*((void *)&v684 + 1))
    {
      char v89 = (unint64_t *)(*((void *)&v684 + 1) + 8LL);
      do
        unint64_t v90 = __ldxr(v89);
      while (__stxr(v90 + 1, v89));
    }
  }

  else
  {
    if ((void)v684) {
      uint64_t v91 = v684 + 40;
    }
    else {
      uint64_t v91 = 0LL;
    }
    *(void *)v691 = v91;
    *(void *)&v691[8] = 0LL;
  }

  if (v665) {
    uint64_t v92 = v665 + 32;
  }
  else {
    uint64_t v92 = 0LL;
  }
  uint64_t v661 = v92;
  unint64_t v662 = v666;
  if (v666)
  {
    __int128 v93 = (unint64_t *)(v666 + 8);
    do
      unint64_t v94 = __ldxr(v93);
    while (__stxr(v94 + 1, v93));
  }

  sub_10002DEE8(&v710, v691, &v671, &v661, &v663);
  uint64_t v95 = (std::__shared_weak_count *)v662;
  if (v662)
  {
    BOOL v96 = (unint64_t *)(v662 + 8);
    do
      unint64_t v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }

  unint64_t v98 = *(std::__shared_weak_count **)&v691[8];
  if (*(void *)&v691[8])
  {
    int v99 = (unint64_t *)(*(void *)&v691[8] + 8LL);
    do
      unint64_t v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }

  unint64_t v101 = (std::__shared_weak_count *)v710.st_ino;
  if (v710.st_ino)
  {
    uint64_t v102 = (unint64_t *)(v710.st_ino + 8);
    do
      unint64_t v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }

  unint64_t v662 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v661 = 0xAAAAAAAAAAAAAAAALL;
  if (v675) {
    unint64_t v104 = v675 + 112;
  }
  else {
    unint64_t v104 = 0LL;
  }
  *(void *)&v710.st_dev = v104;
  v710.st_ino = v676;
  if (v676)
  {
    uint64_t v105 = (unint64_t *)(v676 + 8);
    do
      unint64_t v106 = __ldxr(v105);
    while (__stxr(v106 + 1, v105));
  }

  sub_100050F94(&v660);
  *(_OWORD *)v691 = v660;
  __int128 v660 = 0uLL;
  unint64_t v658 = v663;
  unint64_t v659 = v664;
  if (v664)
  {
    int v107 = (unint64_t *)(v664 + 8);
    do
      unint64_t v108 = __ldxr(v107);
    while (__stxr(v108 + 1, v107));
  }

  sub_1000AAF7C(&v710, v691, &v658, &v679, &v661);
  uint64_t v109 = (std::__shared_weak_count *)v659;
  if (v659)
  {
    int v110 = (unint64_t *)(v659 + 8);
    do
      unint64_t v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }

  unsigned __int8 v112 = *(std::__shared_weak_count **)&v691[8];
  if (*(void *)&v691[8])
  {
    uint64_t v113 = (unint64_t *)(*(void *)&v691[8] + 8LL);
    do
      unint64_t v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }

  id v115 = (std::__shared_weak_count *)*((void *)&v660 + 1);
  if (*((void *)&v660 + 1))
  {
    unint64_t v116 = (unint64_t *)(*((void *)&v660 + 1) + 8LL);
    do
      unint64_t v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }

  uint64_t v118 = (std::__shared_weak_count *)v710.st_ino;
  if (v710.st_ino)
  {
    uint64_t v119 = (unint64_t *)(v710.st_ino + 8);
    do
      unint64_t v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }

  *((void *)&v660 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v660 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&v710.st_dev = v663;
  v710.st_ino = v664;
  if (v664)
  {
    __int128 v121 = (unint64_t *)(v664 + 8);
    do
      unint64_t v122 = __ldxr(v121);
    while (__stxr(v122 + 1, v121));
  }

  if (v675) {
    unint64_t v123 = v675 + 112;
  }
  else {
    unint64_t v123 = 0LL;
  }
  *(void *)v691 = v123;
  *(void *)&v691[8] = v676;
  if (v676)
  {
    v124 = (unint64_t *)(v676 + 8);
    do
      unint64_t v125 = __ldxr(v124);
    while (__stxr(v125 + 1, v124));
  }

  uint64_t v126 = v677;
  unint64_t v127 = v677 + 120;
  if (!v677) {
    unint64_t v127 = 0LL;
  }
  unint64_t v658 = v127;
  unint64_t v659 = v678;
  if (v678)
  {
    v128 = (unint64_t *)(v678 + 8);
    do
      unint64_t v129 = __ldxr(v128);
    while (__stxr(v129 + 1, v128));
    if (v126) {
      unint64_t v130 = v126 + 128;
    }
    else {
      unint64_t v130 = 0LL;
    }
    unint64_t v656 = v130;
    unint64_t v657 = v678;
    if (v678)
    {
      v131 = (unint64_t *)(v678 + 8);
      do
        unint64_t v132 = __ldxr(v131);
      while (__stxr(v132 + 1, v131));
    }
  }

  else
  {
    if (v677) {
      unint64_t v133 = v677 + 128;
    }
    else {
      unint64_t v133 = 0LL;
    }
    unint64_t v656 = v133;
    unint64_t v657 = 0LL;
  }

  unint64_t v654 = v667;
  unint64_t v655 = (unint64_t)v668;
  if (v668)
  {
    v134 = (unint64_t *)&v668->__shared_owners_;
    do
      unint64_t v135 = __ldxr(v134);
    while (__stxr(v135 + 1, v134));
  }

  sub_1000094CC(&v683, &v684, &v673, &v710, &v661, v691, &v658, &v656, (uint64_t *)&v660, &v654, &v679);
  v136 = (std::__shared_weak_count *)v655;
  if (v655)
  {
    v137 = (unint64_t *)(v655 + 8);
    do
      unint64_t v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }

  v139 = (std::__shared_weak_count *)v657;
  if (v657)
  {
    v140 = (unint64_t *)(v657 + 8);
    do
      unint64_t v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }

  v142 = (std::__shared_weak_count *)v659;
  if (v659)
  {
    v143 = (unint64_t *)(v659 + 8);
    do
      unint64_t v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }

  v145 = *(std::__shared_weak_count **)&v691[8];
  if (*(void *)&v691[8])
  {
    v146 = (unint64_t *)(*(void *)&v691[8] + 8LL);
    do
      unint64_t v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }

  v148 = (std::__shared_weak_count *)v710.st_ino;
  if (v710.st_ino)
  {
    v149 = (unint64_t *)(v710.st_ino + 8);
    do
      unint64_t v150 = __ldaxr(v149);
    while (__stlxr(v150 - 1, v149));
    if (!v150)
    {
      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
      std::__shared_weak_count::__release_weak(v148);
    }
  }

  unint64_t v659 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v658 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v652 = v667;
  v653 = v668;
  if (v668)
  {
    v151 = (unint64_t *)&v668->__shared_owners_;
    do
      unint64_t v152 = __ldxr(v151);
    while (__stxr(v152 + 1, v151));
  }

  sub_100005768(&v658);
  if (v653)
  {
    v153 = &v653->__shared_owners_;
    do
      unint64_t v154 = __ldaxr((unint64_t *)v153);
    while (__stlxr(v154 - 1, (unint64_t *)v153));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v653->__on_zero_shared)(v653);
      std::__shared_weak_count::__release_weak(v653);
    }
  }

  unint64_t v657 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v656 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v650 = v667;
  v651 = v668;
  if (v668)
  {
    v155 = (unint64_t *)&v668->__shared_owners_;
    do
      unint64_t v156 = __ldxr(v155);
    while (__stxr(v156 + 1, v155));
  }

  sub_100090C7C(&v656, &v650);
  v157 = v651;
  if (v651)
  {
    v158 = (unint64_t *)&v651->__shared_owners_;
    do
      unint64_t v159 = __ldaxr(v158);
    while (__stlxr(v159 - 1, v158));
    if (!v159)
    {
      ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
      std::__shared_weak_count::__release_weak(v157);
    }
  }

  unint64_t v654 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v655 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v648 = v667;
  v649 = v668;
  if (v668)
  {
    v160 = (unint64_t *)&v668->__shared_owners_;
    do
      unint64_t v161 = __ldxr(v160);
    while (__stxr(v161 + 1, v160));
  }

  sub_10001321C(&v654, &v648);
  v162 = v649;
  if (v649)
  {
    v163 = (unint64_t *)&v649->__shared_owners_;
    do
      unint64_t v164 = __ldaxr(v163);
    while (__stlxr(v164 - 1, v163));
    if (!v164)
    {
      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
      std::__shared_weak_count::__release_weak(v162);
    }
  }

  unint64_t v646 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v647 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v644 = v667;
  v645 = v668;
  if (v668)
  {
    v165 = (unint64_t *)&v668->__shared_owners_;
    do
      unint64_t v166 = __ldxr(v165);
    while (__stxr(v166 + 1, v165));
  }

  sub_100005768(&v646);
  if (v645)
  {
    v167 = &v645->__shared_owners_;
    do
      unint64_t v168 = __ldaxr((unint64_t *)v167);
    while (__stlxr(v168 - 1, (unint64_t *)v167));
    if (!v168)
    {
      ((void (*)(std::__shared_weak_count *))v645->__on_zero_shared)(v645);
      std::__shared_weak_count::__release_weak(v645);
    }
  }

  *(void *)&__int128 v643 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v643 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&v710.st_dev = v667;
  v710.st_ino = (__darwin_ino64_t)v668;
  if (v668)
  {
    v169 = (unint64_t *)&v668->__shared_owners_;
    do
      unint64_t v170 = __ldxr(v169);
    while (__stxr(v170 + 1, v169));
  }

  if (v675) {
    unint64_t v171 = v675 + 112;
  }
  else {
    unint64_t v171 = 0LL;
  }
  *(void *)v691 = v171;
  *(void *)&v691[8] = v676;
  if (v676)
  {
    v172 = (unint64_t *)(v676 + 8);
    do
      unint64_t v173 = __ldxr(v172);
    while (__stxr(v173 + 1, v172));
  }

  sub_1000161E8(&v710, v691, (uint64_t *)&v643);
  v174 = *(std::__shared_weak_count **)&v691[8];
  if (*(void *)&v691[8])
  {
    v175 = (unint64_t *)(*(void *)&v691[8] + 8LL);
    do
      unint64_t v176 = __ldaxr(v175);
    while (__stlxr(v176 - 1, v175));
    if (!v176)
    {
      ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
      std::__shared_weak_count::__release_weak(v174);
    }
  }

  v177 = (std::__shared_weak_count *)v710.st_ino;
  if (v710.st_ino)
  {
    v178 = (unint64_t *)(v710.st_ino + 8);
    do
      unint64_t v179 = __ldaxr(v178);
    while (__stlxr(v179 - 1, v178));
    if (!v179)
    {
      ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
      std::__shared_weak_count::__release_weak(v177);
    }
  }

  uint64_t v641 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v642 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v180 = v663;
  *(void *)&v710.st_dev = v663;
  v710.st_ino = v664;
  if (v664)
  {
    v181 = (unint64_t *)(v664 + 8);
    do
      unint64_t v182 = __ldxr(v181);
    while (__stxr(v182 + 1, v181));
    BOOL v183 = v180 == 0;
    uint64_t v184 = v180 + 8;
    if (!v180) {
      uint64_t v184 = 0LL;
    }
    *(void *)v691 = v184;
    *(void *)&v691[8] = v664;
    if (v664)
    {
      v185 = (unint64_t *)(v664 + 8);
      do
        unint64_t v186 = __ldxr(v185);
      while (__stxr(v186 + 1, v185));
    }
  }

  else
  {
    BOOL v183 = v663 == 0;
    uint64_t v187 = v663 + 8;
    if (!v663) {
      uint64_t v187 = 0LL;
    }
    *(void *)v691 = v187;
    *(void *)&v691[8] = 0LL;
  }

  __int128 v640 = v660;
  if (*((void *)&v660 + 1))
  {
    v188 = (unint64_t *)(*((void *)&v660 + 1) + 8LL);
    do
      unint64_t v189 = __ldxr(v188);
    while (__stxr(v189 + 1, v188));
  }

  uint64_t v638 = v667;
  v639 = v668;
  if (v668)
  {
    v190 = (unint64_t *)&v668->__shared_owners_;
    do
      unint64_t v191 = __ldxr(v190);
    while (__stxr(v191 + 1, v190));
  }

  if (v183) {
    uint64_t v192 = 0LL;
  }
  else {
    uint64_t v192 = v180 + 16;
  }
  v636 = (char *)v192;
  v637 = (std::__shared_weak_count *)v664;
  if (v664)
  {
    v193 = (unint64_t *)(v664 + 8);
    do
      unint64_t v194 = __ldxr(v193);
    while (__stxr(v194 + 1, v193));
  }

  if (v675) {
    unint64_t v195 = v675 + 112;
  }
  else {
    unint64_t v195 = 0LL;
  }
  unint64_t v634 = v195;
  v635 = (std::__shared_weak_count *)v676;
  if (v676)
  {
    v196 = (unint64_t *)(v676 + 8);
    do
      unint64_t v197 = __ldxr(v196);
    while (__stxr(v197 + 1, v196));
  }

  if (v677) {
    uint64_t v198 = v677 + 120;
  }
  else {
    uint64_t v198 = 0LL;
  }
  uint64_t v632 = v198;
  v633 = (std::__shared_weak_count *)v678;
  if (v678)
  {
    v199 = (unint64_t *)(v678 + 8);
    do
      unint64_t v200 = __ldxr(v199);
    while (__stxr(v200 + 1, v199));
  }

  sub_10007629C(&v710, v691, &v683, &v640, &v638, &v661, &v684, &v636, &v641, &v634, &v632);
  v201 = v633;
  if (v633)
  {
    v202 = (unint64_t *)&v633->__shared_owners_;
    do
      unint64_t v203 = __ldaxr(v202);
    while (__stlxr(v203 - 1, v202));
    if (!v203)
    {
      ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
      std::__shared_weak_count::__release_weak(v201);
    }
  }

  v204 = v635;
  if (v635)
  {
    v205 = (unint64_t *)&v635->__shared_owners_;
    do
      unint64_t v206 = __ldaxr(v205);
    while (__stlxr(v206 - 1, v205));
    if (!v206)
    {
      ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
      std::__shared_weak_count::__release_weak(v204);
    }
  }

  v207 = v637;
  if (v637)
  {
    v208 = (unint64_t *)&v637->__shared_owners_;
    do
      unint64_t v209 = __ldaxr(v208);
    while (__stlxr(v209 - 1, v208));
    if (!v209)
    {
      ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
      std::__shared_weak_count::__release_weak(v207);
    }
  }

  v210 = v639;
  if (v639)
  {
    v211 = (unint64_t *)&v639->__shared_owners_;
    do
      unint64_t v212 = __ldaxr(v211);
    while (__stlxr(v212 - 1, v211));
    if (!v212)
    {
      ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
      std::__shared_weak_count::__release_weak(v210);
    }
  }

  v213 = (std::__shared_weak_count *)*((void *)&v640 + 1);
  if (*((void *)&v640 + 1))
  {
    v214 = (unint64_t *)(*((void *)&v640 + 1) + 8LL);
    do
      unint64_t v215 = __ldaxr(v214);
    while (__stlxr(v215 - 1, v214));
    if (!v215)
    {
      ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
      std::__shared_weak_count::__release_weak(v213);
    }
  }

  v216 = *(std::__shared_weak_count **)&v691[8];
  if (*(void *)&v691[8])
  {
    v217 = (unint64_t *)(*(void *)&v691[8] + 8LL);
    do
      unint64_t v218 = __ldaxr(v217);
    while (__stlxr(v218 - 1, v217));
    if (!v218)
    {
      ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
      std::__shared_weak_count::__release_weak(v216);
    }
  }

  v219 = (std::__shared_weak_count *)v710.st_ino;
  if (v710.st_ino)
  {
    v220 = (unint64_t *)(v710.st_ino + 8);
    do
      unint64_t v221 = __ldaxr(v220);
    while (__stlxr(v221 - 1, v220));
    if (!v221)
    {
      ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
      std::__shared_weak_count::__release_weak(v219);
    }
  }

  *(void *)v691 = v641;
  *(void *)&v691[8] = v642;
  if (v642)
  {
    v222 = (unint64_t *)(v642 + 8);
    do
      unint64_t v223 = __ldxr(v222);
    while (__stxr(v223 + 1, v222));
  }

  sub_100074524(v691, &v710);
  __int128 v224 = *(_OWORD *)&v710.st_dev;
  v710.st_ino = 0LL;
  *(void *)&v710.st_dev = 0LL;
  v225 = (std::__shared_weak_count *)*((void *)&v686 + 1);
  __int128 v686 = v224;
  if (v225)
  {
    v226 = (unint64_t *)&v225->__shared_owners_;
    do
      unint64_t v227 = __ldaxr(v226);
    while (__stlxr(v227 - 1, v226));
    if (!v227)
    {
      ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
      std::__shared_weak_count::__release_weak(v225);
    }
  }

  v228 = (std::__shared_weak_count *)v710.st_ino;
  if (v710.st_ino)
  {
    v229 = (unint64_t *)(v710.st_ino + 8);
    do
      unint64_t v230 = __ldaxr(v229);
    while (__stlxr(v230 - 1, v229));
    if (!v230)
    {
      ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
      std::__shared_weak_count::__release_weak(v228);
    }
  }

  v231 = *(std::__shared_weak_count **)&v691[8];
  if (*(void *)&v691[8])
  {
    v232 = (unint64_t *)(*(void *)&v691[8] + 8LL);
    do
      unint64_t v233 = __ldaxr(v232);
    while (__stlxr(v233 - 1, v232));
    if (!v233)
    {
      ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
      std::__shared_weak_count::__release_weak(v231);
    }
  }

  *(void *)v691 = v641;
  *(void *)&v691[8] = v642;
  if (v642)
  {
    v234 = (unint64_t *)(v642 + 8);
    do
      unint64_t v235 = __ldxr(v234);
    while (__stxr(v235 + 1, v234));
  }

  sub_100074010(v691, &v710);
  __int128 v236 = *(_OWORD *)&v710.st_dev;
  v710.st_ino = 0LL;
  *(void *)&v710.st_dev = 0LL;
  v237 = (std::__shared_weak_count *)*((void *)&v685 + 1);
  __int128 v685 = v236;
  if (v237)
  {
    v238 = (unint64_t *)&v237->__shared_owners_;
    do
      unint64_t v239 = __ldaxr(v238);
    while (__stlxr(v239 - 1, v238));
    if (!v239)
    {
      ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
      std::__shared_weak_count::__release_weak(v237);
    }
  }

  v240 = (std::__shared_weak_count *)v710.st_ino;
  if (v710.st_ino)
  {
    v241 = (unint64_t *)(v710.st_ino + 8);
    do
      unint64_t v242 = __ldaxr(v241);
    while (__stlxr(v242 - 1, v241));
    if (!v242)
    {
      ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
      std::__shared_weak_count::__release_weak(v240);
    }
  }

  v243 = *(std::__shared_weak_count **)&v691[8];
  if (*(void *)&v691[8])
  {
    v244 = (unint64_t *)(*(void *)&v691[8] + 8LL);
    do
      unint64_t v245 = __ldaxr(v244);
    while (__stlxr(v245 - 1, v244));
    if (!v245)
    {
      ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
      std::__shared_weak_count::__release_weak(v243);
    }
  }

  uint64_t v246 = v663;
  *(_OWORD *)&v710.st_dev = v660;
  if (*((void *)&v660 + 1))
  {
    v247 = (unint64_t *)(*((void *)&v660 + 1) + 8LL);
    do
      unint64_t v248 = __ldxr(v247);
    while (__stxr(v248 + 1, v247));
  }

  sub_10002E1BC(v246, (uint64_t *)&v710.st_dev);
  v249 = (std::__shared_weak_count *)v710.st_ino;
  if (v710.st_ino)
  {
    v250 = (unint64_t *)(v710.st_ino + 8);
    do
      unint64_t v251 = __ldaxr(v250);
    while (__stlxr(v251 - 1, v250));
    if (!v251)
    {
      ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
      std::__shared_weak_count::__release_weak(v249);
    }
  }

  uint64_t v252 = v684;
  *(void *)&v710.st_dev = v663;
  v710.st_ino = v664;
  if (v664)
  {
    v253 = (unint64_t *)(v664 + 8);
    do
      unint64_t v254 = __ldxr(v253);
    while (__stxr(v254 + 1, v253));
  }

  sub_100022E8C(v252, (uint64_t *)&v710.st_dev);
  v255 = (std::__shared_weak_count *)v710.st_ino;
  if (v710.st_ino)
  {
    v256 = (unint64_t *)(v710.st_ino + 8);
    do
      unint64_t v257 = __ldaxr(v256);
    while (__stlxr(v257 - 1, v256));
    if (!v257)
    {
      ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
      std::__shared_weak_count::__release_weak(v255);
    }
  }

  CFRunLoopRef Current = CFRunLoopGetCurrent();
  uint64_t v630 = v641;
  v631 = (std::__shared_weak_count *)v642;
  if (v642)
  {
    v259 = (unint64_t *)(v642 + 8);
    do
      unint64_t v260 = __ldxr(v259);
    while (__stxr(v260 + 1, v259));
  }

  v261 = sub_10004E918((uint64_t)Current, &v630);
  v262 = v631;
  if (v631)
  {
    v263 = (unint64_t *)&v631->__shared_owners_;
    do
      unint64_t v264 = __ldaxr(v263);
    while (__stlxr(v264 - 1, v263));
    if (!v264)
    {
      ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
      std::__shared_weak_count::__release_weak(v262);
    }
  }

  uint64_t v265 = v663;
  __int128 v266 = v686;
  if (*((void *)&v686 + 1))
  {
    v267 = (unint64_t *)(*((void *)&v686 + 1) + 8LL);
    do
      unint64_t v268 = __ldxr(v267);
    while (__stxr(v268 + 1, v267));
  }

  *(void *)&v710.st_dev = off_100128800;
  *(_OWORD *)&v710.st_ino = v266;
  *(void *)&v710.st_rdev = &v710;
  sub_10002E8D4(v265, (uint64_t)&v710);
  v269 = *(stat **)&v710.st_rdev;
  if (*(stat **)&v710.st_rdev == &v710)
  {
    uint64_t v270 = 4LL;
    v269 = &v710;
  }

  else
  {
    if (!*(void *)&v710.st_rdev) {
      goto LABEL_452;
    }
    uint64_t v270 = 5LL;
  }

  (*(void (**)(void))(*(void *)&v269->st_dev + 8 * v270))();
LABEL_452:
  uint64_t v271 = v663;
  if (*((void *)&v266 + 1))
  {
    v272 = (unint64_t *)(*((void *)&v266 + 1) + 8LL);
    do
      unint64_t v273 = __ldxr(v272);
    while (__stxr(v273 + 1, v272));
  }

  *(void *)&v710.st_dev = off_100128880;
  *(_OWORD *)&v710.st_ino = v266;
  *(void *)&v710.st_rdev = &v710;
  sub_10002E770(v271, (uint64_t)&v710);
  v274 = *(stat **)&v710.st_rdev;
  if (*(stat **)&v710.st_rdev == &v710)
  {
    uint64_t v275 = 4LL;
    v274 = &v710;
    goto LABEL_459;
  }

  if (*(void *)&v710.st_rdev)
  {
    uint64_t v275 = 5LL;
LABEL_459:
    (*(void (**)(void))(*(void *)&v274->st_dev + 8 * v275))();
  }

  v276 = operator new(0x20uLL);
  v276[1] = 0LL;
  v277 = v276 + 1;
  v276[2] = 0LL;
  void *v276 = off_100128900;
  v276[3] = 0LL;
  *(void *)&__int128 v640 = v276 + 3;
  *((void *)&v640 + 1) = v276;
  v278 = operator new(0x20uLL);
  v278[1] = 0LL;
  v279 = v278 + 1;
  v278[2] = 0LL;
  void *v278 = off_100128950;
  *((_BYTE *)v278 + memset(v15, 170, 24) = 0;
  uint64_t v638 = (uint64_t)(v278 + 3);
  v639 = (std::__shared_weak_count *)v278;
  v280 = operator new(0x20uLL);
  v280[1] = 0LL;
  v281 = v280 + 1;
  v280[2] = 0LL;
  void *v280 = off_100128950;
  *((_BYTE *)v280 + memset(v15, 170, 24) = 0;
  *(void *)&__int128 v625 = v280 + 3;
  *((void *)&v625 + 1) = v280;
  v636 = (char *)(v280 + 3);
  v637 = (std::__shared_weak_count *)v280;
  uint32_t v282 = notify_register_check("com.apple.analyticsd.running", &out_token);
  if (v282)
  {
    v283 = (os_log_s *)qword_1001318E8;
    if (os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_DEFAULT))
    {
      v710.st_dev = 67109120;
      *(_DWORD *)&v710.int st_mode = v282;
      _os_log_impl( (void *)&_mh_execute_header,  v283,  OS_LOG_TYPE_DEFAULT,  "[Notify] failed to register token for daemon running notification (%d)",  (uint8_t *)&v710,  8u);
    }
  }

  uint32_t v284 = notify_set_state(out_token, 1uLL);
  if (v284)
  {
    v285 = (os_log_s *)qword_1001318E8;
    if (os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_DEFAULT))
    {
      v710.st_dev = 67109120;
      *(_DWORD *)&v710.int st_mode = v284;
      _os_log_impl( (void *)&_mh_execute_header,  v285,  OS_LOG_TYPE_DEFAULT,  "[Notify] failed to set state to ready for daemon running notification (%d)",  (uint8_t *)&v710,  8u);
    }
  }

  uint32_t v286 = notify_post("com.apple.analyticsd.running");
  if (v286)
  {
    v287 = (os_log_s *)qword_1001318E8;
    if (os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_DEFAULT))
    {
      v710.st_dev = 67109120;
      *(_DWORD *)&v710.int st_mode = v286;
      _os_log_impl( (void *)&_mh_execute_header,  v287,  OS_LOG_TYPE_DEFAULT,  "[Notify] failed to post daemon running notification (%d)",  (uint8_t *)&v710,  8u);
    }
  }

  unint64_t v288 = sub_100092C64();
  unint64_t v289 = sub_100092B8C();
  v290 = v18;
  *(_OWORD *)v691 = v685;
  if (*((void *)&v685 + 1))
  {
    v291 = (unint64_t *)(*((void *)&v685 + 1) + 8LL);
    do
      unint64_t v292 = __ldxr(v291);
    while (__stxr(v292 + 1, v291));
  }

  __int128 v692 = v683;
  if (*((void *)&v683 + 1))
  {
    v293 = (unint64_t *)(*((void *)&v683 + 1) + 8LL);
    do
      unint64_t v294 = __ldxr(v293);
    while (__stxr(v294 + 1, v293));
  }

  __int128 v693 = v660;
  if (*((void *)&v660 + 1))
  {
    v295 = (unint64_t *)(*((void *)&v660 + 1) + 8LL);
    do
      unint64_t v296 = __ldxr(v295);
    while (__stxr(v296 + 1, v295));
  }

  uint64_t v694 = v675;
  v695.__darwin_time_t tv_sec = v676;
  if (v676)
  {
    v297 = (unint64_t *)(v676 + 8);
    do
      unint64_t v298 = __ldxr(v297);
    while (__stxr(v298 + 1, v297));
  }

  v695.uint64_t tv_nsec = v677;
  v696.__darwin_time_t tv_sec = v678;
  if (v678)
  {
    v299 = (unint64_t *)(v678 + 8);
    do
      unint64_t v300 = __ldxr(v299);
    while (__stxr(v300 + 1, v299));
  }

  v696.uint64_t tv_nsec = v661;
  off_t v697 = v662;
  if (v662)
  {
    v301 = (unint64_t *)(v662 + 8);
    do
      unint64_t v302 = __ldxr(v301);
    while (__stxr(v302 + 1, v301));
  }

  blkcnt_t v698 = v667;
  v699 = v668;
  if (v668)
  {
    v303 = (unint64_t *)&v668->__shared_owners_;
    do
      unint64_t v304 = __ldxr(v303);
    while (__stxr(v304 + 1, v303));
  }

  unint64_t v700 = v658;
  uint64_t_t v701 = v659;
  if (v659)
  {
    v305 = (unint64_t *)(v659 + 8);
    do
      unint64_t v306 = __ldxr(v305);
    while (__stxr(v306 + 1, v305));
  }

  uint64_t_t v702 = v656;
  *(void *)&__int128 v703 = v657;
  if (v657)
  {
    v307 = (unint64_t *)(v657 + 8);
    do
      unint64_t v308 = __ldxr(v307);
    while (__stxr(v308 + 1, v307));
  }

  *((void *)&v703 + 1) = v654;
  *(void *)&__int128 v704 = v655;
  if (v655)
  {
    v309 = (unint64_t *)(v655 + 8);
    do
      unint64_t v310 = __ldxr(v309);
    while (__stxr(v310 + 1, v309));
  }

  *((void *)&v704 + 1) = v646;
  unint64_t v705 = v647;
  if (v647)
  {
    v311 = (unint64_t *)(v647 + 8);
    do
      unint64_t v312 = __ldxr(v311);
    while (__stxr(v312 + 1, v311));
  }

  *(void *)&__int128 v587 = v289;
  *((void *)&v587 + 1) = v288;
  __darwin_time_t v622 = (__darwin_time_t)v261;
  __int128 v706 = v643;
  if (*((void *)&v643 + 1))
  {
    v313 = (unint64_t *)(*((void *)&v643 + 1) + 8LL);
    do
      unint64_t v314 = __ldxr(v313);
    while (__stxr(v314 + 1, v313));
  }

  *(void *)&__int128 v707 = v278 + 3;
  *((void *)&v707 + 1) = v278;
  do
    unint64_t v315 = __ldxr(v279);
  while (__stxr(v315 + 1, v279));
  __int128 v708 = v625;
  do
    unint64_t v316 = __ldxr(v281);
  while (__stxr(v316 + 1, v281));
  *(void *)&__int128 v709 = v276 + 3;
  *((void *)&v709 + 1) = v276;
  do
    unint64_t v317 = __ldxr(v277);
  while (__stxr(v317 + 1, v277));
  v627 = v290;
  v318 = dispatch_group_create();
  v319 = v318;
  *(void *)&v710.st_dev = v318;
  if (v318) {
    dispatch_group_enter(v318);
  }
  *(_OWORD *)&v710.st_ino = *(_OWORD *)v691;
  memset(v691, 0, sizeof(v691));
  *(_OWORD *)&v710.st_rdev = v692;
  __int128 v692 = 0uLL;
  *(_OWORD *)&v710.st_atimespec.uint64_t tv_nsec = v693;
  __int128 v693 = 0uLL;
  uint64_t v626 = v694;
  v710.st_mtimespec.uint64_t tv_nsec = v694;
  __darwin_time_t tv_sec = v695.tv_sec;
  v607 = v319;
  v710.st_ctimespec = v695;
  uint64_t v694 = 0LL;
  __darwin_time_t v595 = v696.tv_sec;
  uint64_t tv_nsec = v695.tv_nsec;
  v710.st_birthtimespec = v696;
  timespec v695 = (timespec)0LL;
  off_t v591 = v697;
  uint64_t v593 = v696.tv_nsec;
  v710.st_UInt32 size = v697;
  timespec v696 = (timespec)0LL;
  off_t v697 = 0LL;
  v588 = v699;
  blkcnt_t v589 = v698;
  v710.st_blocks = v698;
  *(void *)&v710.st_blkUInt32 size = v699;
  blkcnt_t v698 = 0LL;
  v699 = 0LL;
  unint64_t v320 = v700;
  uint64_t_t v321 = v701;
  *(void *)&v710.st_geuint64_t n = v700;
  v710.st_qspare[0] = v701;
  unint64_t v700 = 0LL;
  uint64_t_t v701 = 0LL;
  uint64_t_t v322 = v702;
  uint64_t v323 = v703;
  v710.st_qspare[1] = v702;
  __int128 v711 = v703;
  uint64_t_t v702 = 0LL;
  uint64_t v324 = *((void *)&v703 + 1);
  uint64_t v325 = v704;
  __int128 v712 = v704;
  __int128 v703 = 0uLL;
  uint64_t v326 = *((void *)&v704 + 1);
  unint64_t v327 = v705;
  *(void *)&__int128 v713 = v705;
  __int128 v704 = 0uLL;
  unint64_t v705 = 0LL;
  __int128 v618 = v706;
  __int128 v613 = v707;
  __int128 v706 = 0uLL;
  __int128 v707 = 0uLL;
  __int128 v629 = v708;
  __int128 v623 = v709;
  __int128 v708 = 0uLL;
  __int128 v709 = 0uLL;
  v328 = v627;
  v329 = (char *)operator new(0xF8uLL);
  *(_OWORD *)v329 = *(_OWORD *)&v710.st_dev;
  *((void *)v329 + 2) = *(void *)&v710.st_uid;
  v710.st_ino = 0LL;
  *(void *)&v710.uid_t st_uid = 0LL;
  *(_OWORD *)(v329 + memset(v15, 170, 24) = *(_OWORD *)&v710.st_rdev;
  *(void *)&v710.st_rdev = 0LL;
  v710.st_atimespec.__darwin_time_t tv_sec = 0LL;
  *(_OWORD *)(v329 + 40) = *(_OWORD *)&v710.st_atimespec.tv_nsec;
  v710.st_atimespec.uint64_t tv_nsec = 0LL;
  v710.st_mtimespec.__darwin_time_t tv_sec = 0LL;
  *((void *)v329 + 7) = v626;
  *((void *)v329 + _Block_object_dispose(va, 8) = tv_sec;
  v710.st_mtimespec.uint64_t tv_nsec = 0LL;
  v710.st_ctimespec.__darwin_time_t tv_sec = 0LL;
  *((void *)v329 + 9) = tv_nsec;
  *((void *)v329 + 10) = v595;
  v710.st_ctimespec.uint64_t tv_nsec = 0LL;
  v710.st_birthtimespec.__darwin_time_t tv_sec = 0LL;
  *((void *)v329 + 11) = v593;
  *((void *)v329 + 12) = v591;
  v710.st_birthtimespec.uint64_t tv_nsec = 0LL;
  v710.st_UInt32 size = 0LL;
  *((void *)v329 + 13) = v589;
  *((void *)v329 + 14) = v588;
  *((void *)v329 + 15) = v320;
  v710.st_blocks = 0LL;
  *(void *)&v710.st_blkUInt32 size = 0LL;
  *((void *)v329 + 16) = v321;
  *((void *)v329 + 17) = v322;
  *(void *)&v710.st_geuint64_t n = 0LL;
  v710.st_qspare[0] = 0LL;
  *((void *)v329 + 1_Block_object_dispose(va, 8) = v323;
  *((void *)v329 + 19) = v324;
  v710.st_qspare[1] = 0LL;
  *(void *)&__int128 v711 = 0LL;
  *((void *)v329 + 20) = v325;
  *((void *)v329 + 21) = v326;
  *((void *)&v711 + 1) = 0LL;
  *(void *)&__int128 v712 = 0LL;
  *((void *)v329 + 22) = v327;
  *((void *)&v712 + 1) = 0LL;
  *(void *)&__int128 v713 = 0LL;
  *(_OWORD *)(v329 + 184) = v618;
  *(void *)&v710.st_dev = 0LL;
  *((void *)&v713 + 1) = 0LL;
  *(_OWORD *)(v329 + 200) = v613;
  uint64_t v714 = 0LL;
  uint64_t v715 = 0LL;
  *(_OWORD *)(v329 + 216) = v629;
  uint64_t v716 = 0LL;
  uint64_t v717 = 0LL;
  *(_OWORD *)(v329 + 232) = v623;
  uint64_t v720 = 0LL;
  uint64_t v718 = 0LL;
  uint64_t v719 = 0LL;
  dispatch_async_f(v328, v329, (dispatch_function_t)sub_10005F2B4);

  sub_10005EB80((id *)&v710);
  v330 = v607;

  sub_10005E160((uint64_t)v691);
  v331 = v328;
  __int128 v332 = v660;
  if (*((void *)&v660 + 1))
  {
    v333 = (unint64_t *)(*((void *)&v660 + 1) + 8LL);
    do
      unint64_t v334 = __ldxr(v333);
    while (__stxr(v334 + 1, v333));
  }

  __int128 v335 = v683;
  if (*((void *)&v683 + 1))
  {
    v336 = (unint64_t *)(*((void *)&v683 + 1) + 8LL);
    do
      unint64_t v337 = __ldxr(v336);
    while (__stxr(v337 + 1, v336));
  }

  v624 = v636;
  v628 = v637;
  if (v637)
  {
    v338 = (unint64_t *)&v637->__shared_owners_;
    do
      unint64_t v339 = __ldxr(v338);
    while (__stxr(v339 + 1, v338));
  }

  __int128 v340 = v640;
  if (*((void *)&v640 + 1))
  {
    v341 = (unint64_t *)(*((void *)&v640 + 1) + 8LL);
    do
      unint64_t v342 = __ldxr(v341);
    while (__stxr(v342 + 1, v341));
  }

  v343 = v331;
  dispatch_group_t v344 = dispatch_group_create();
  dispatch_group_t v345 = v344;
  if (v607)
  {
    v346 = v330;
    dispatch_group_enter(v346);
    v347 = v345;
    v348 = v347;
    if (v347) {
      dispatch_group_enter(v347);
    }
    v349 = v343;
    v350 = (char *)operator new(0x48uLL);
    *(void *)v350 = v348;
    *((void *)v350 + 1) = v332;
    *(void *)&v710.st_dev = 0LL;
    v710.st_ino = 0LL;
    *((void *)v350 + 2) = *((void *)&v332 + 1);
    *((void *)v350 + 3) = v335;
    *(void *)&v710.uid_t st_uid = 0LL;
    *(void *)&v710.st_rdev = 0LL;
    *((void *)v350 + 4) = *((void *)&v335 + 1);
    *((void *)v350 + 5) = v624;
    v710.st_atimespec.__darwin_time_t tv_sec = 0LL;
    v710.st_atimespec.uint64_t tv_nsec = 0LL;
    *((void *)v350 + 6) = v628;
    *(_OWORD *)(v350 + 56) = v340;
    memset(&v710.st_mtimespec, 0, 24);
    dispatch_group_notify_f(v346, v349, v350, (dispatch_function_t)sub_10005F394);

    sub_10005F30C((id *)&v710);
    dispatch_group_leave(v346);
  }

  else
  {
    v351 = v344;
    v352 = v351;
    if (v351) {
      dispatch_group_enter(v351);
    }
    v353 = v343;
    v354 = (char *)operator new(0x48uLL);
    *(void *)v354 = v352;
    *((void *)v354 + 1) = v332;
    *(void *)&v710.st_dev = 0LL;
    v710.st_ino = 0LL;
    *((void *)v354 + 2) = *((void *)&v332 + 1);
    *((void *)v354 + 3) = v335;
    *(void *)&v710.uid_t st_uid = 0LL;
    *(void *)&v710.st_rdev = 0LL;
    *((void *)v354 + 4) = *((void *)&v335 + 1);
    *((void *)v354 + 5) = v624;
    v710.st_atimespec.__darwin_time_t tv_sec = 0LL;
    v710.st_atimespec.uint64_t tv_nsec = 0LL;
    *((void *)v354 + 6) = v628;
    *(_OWORD *)(v354 + 56) = v340;
    memset(&v710.st_mtimespec, 0, 24);
    dispatch_async_f(v353, v354, (dispatch_function_t)sub_10005F7A0);

    sub_10005F30C((id *)&v710);
  }

  v355 = v345;
  v356 = v343;
  __int128 v357 = v683;
  if (*((void *)&v683 + 1))
  {
    v358 = (unint64_t *)(*((void *)&v683 + 1) + 8LL);
    do
      unint64_t v359 = __ldxr(v358);
    while (__stxr(v359 + 1, v358));
  }

  __int128 v360 = v684;
  if (*((void *)&v684 + 1))
  {
    v361 = (unint64_t *)(*((void *)&v684 + 1) + 8LL);
    do
      unint64_t v362 = __ldxr(v361);
    while (__stxr(v362 + 1, v361));
  }

  uint64_t v611 = v661;
  unint64_t v363 = v662;
  if (v662)
  {
    v364 = (unint64_t *)(v662 + 8);
    do
      unint64_t v365 = __ldxr(v364);
    while (__stxr(v365 + 1, v364));
  }

  unint64_t v608 = v675;
  __darwin_ino64_t v366 = v676;
  if (v676)
  {
    v367 = (unint64_t *)(v676 + 8);
    do
      unint64_t v368 = __ldxr(v367);
    while (__stxr(v368 + 1, v367));
  }

  uint64_t v604 = v677;
  __darwin_time_t v369 = v678;
  if (v678)
  {
    v370 = (unint64_t *)(v678 + 8);
    do
      unint64_t v371 = __ldxr(v370);
    while (__stxr(v371 + 1, v370));
  }

  if (*((void *)&v340 + 1))
  {
    v372 = (unint64_t *)(*((void *)&v340 + 1) + 8LL);
    do
      unint64_t v373 = __ldxr(v372);
    while (__stxr(v373 + 1, v372));
  }

  v374 = v639;
  uint64_t v600 = v638;
  if (v639)
  {
    v375 = (unint64_t *)&v639->__shared_owners_;
    do
      unint64_t v376 = __ldxr(v375);
    while (__stxr(v376 + 1, v375));
  }

  v377 = v356;
  dispatch_group_t v378 = dispatch_group_create();
  dispatch_group_t v379 = v378;
  v619 = v355;
  if (v355)
  {
    v380 = v355;
    dispatch_group_enter(v380);
    dispatch_group_t v596 = v379;
    v381 = v379;
    v382 = v381;
    *(void *)&v710.st_dev = v381;
    if (v381) {
      dispatch_group_enter(v381);
    }
    v383 = v377;
    v384 = operator new(0x78uLL);
    void *v384 = v382;
    v384[1] = v357;
    *(void *)&v710.st_dev = 0LL;
    v710.st_ino = 0LL;
    v384[2] = *((void *)&v357 + 1);
    v384[3] = v360;
    *(void *)&v710.uid_t st_uid = 0LL;
    *(void *)&v710.st_rdev = 0LL;
    v384[4] = *((void *)&v360 + 1);
    v384[5] = v611;
    v710.st_atimespec.__darwin_time_t tv_sec = 0LL;
    v710.st_atimespec.uint64_t tv_nsec = 0LL;
    v384[6] = v363;
    v384[7] = v608;
    v710.st_mtimespec.__darwin_time_t tv_sec = 0LL;
    v710.st_mtimespec.uint64_t tv_nsec = 0LL;
    v384[8] = v366;
    v384[9] = v604;
    v710.st_ctimespec.__darwin_time_t tv_sec = 0LL;
    v710.st_ctimespec.uint64_t tv_nsec = 0LL;
    v384[10] = v369;
    v384[11] = v340;
    v710.st_birthtimespec.__darwin_time_t tv_sec = 0LL;
    v710.st_birthtimespec.uint64_t tv_nsec = 0LL;
    v384[12] = *((void *)&v340 + 1);
    v384[13] = v600;
    v384[14] = v374;
    memset(&v710.st_size, 0, 24);
    dispatch_group_notify_f(v380, v383, v384, (dispatch_function_t)sub_10005F910);

    v385 = v619;
    dispatch_group_t v386 = v596;
    sub_10005F870((id *)&v710);
    dispatch_group_leave(v380);
  }

  else
  {
    dispatch_group_t v387 = v378;
    v388 = v378;
    v389 = v388;
    *(void *)&v710.st_dev = v388;
    if (v388) {
      dispatch_group_enter(v388);
    }
    v390 = v377;
    v391 = operator new(0x78uLL);
    void *v391 = v389;
    v391[1] = v357;
    *(void *)&v710.st_dev = 0LL;
    v710.st_ino = 0LL;
    v391[2] = *((void *)&v357 + 1);
    v391[3] = v360;
    *(void *)&v710.uid_t st_uid = 0LL;
    *(void *)&v710.st_rdev = 0LL;
    v391[4] = *((void *)&v360 + 1);
    v391[5] = v611;
    v710.st_atimespec.__darwin_time_t tv_sec = 0LL;
    v710.st_atimespec.uint64_t tv_nsec = 0LL;
    v391[6] = v363;
    v391[7] = v608;
    v710.st_mtimespec.__darwin_time_t tv_sec = 0LL;
    v710.st_mtimespec.uint64_t tv_nsec = 0LL;
    v391[8] = v366;
    v391[9] = v604;
    v710.st_ctimespec.__darwin_time_t tv_sec = 0LL;
    v710.st_ctimespec.uint64_t tv_nsec = 0LL;
    v391[10] = v369;
    v391[11] = v340;
    v710.st_birthtimespec.__darwin_time_t tv_sec = 0LL;
    v710.st_birthtimespec.uint64_t tv_nsec = 0LL;
    v391[12] = *((void *)&v340 + 1);
    v391[13] = v600;
    v391[14] = v374;
    memset(&v710.st_size, 0, 24);
    dispatch_async_f(v390, v391, (dispatch_function_t)sub_10005FBC4);

    v385 = 0LL;
    dispatch_group_t v386 = v387;
    sub_10005F870((id *)&v710);
  }

  v392 = v386;
  v393 = v377;
  unint64_t v620 = v675;
  __darwin_ino64_t v394 = v676;
  if (v676)
  {
    v395 = (unint64_t *)(v676 + 8);
    do
      unint64_t v396 = __ldxr(v395);
    while (__stxr(v396 + 1, v395));
  }

  __int128 v397 = v684;
  if (*((void *)&v684 + 1))
  {
    v398 = (unint64_t *)(*((void *)&v684 + 1) + 8LL);
    do
      unint64_t v399 = __ldxr(v398);
    while (__stxr(v399 + 1, v398));
  }

  unint64_t v400 = v642;
  uint64_t v614 = v641;
  if (v642)
  {
    v401 = (unint64_t *)(v642 + 8);
    do
      unint64_t v402 = __ldxr(v401);
    while (__stxr(v402 + 1, v401));
  }

  uint64_t v612 = v665;
  unint64_t v403 = v666;
  if (v666)
  {
    v404 = (unint64_t *)(v666 + 8);
    do
      unint64_t v405 = __ldxr(v404);
    while (__stxr(v405 + 1, v404));
  }

  uint64_t v609 = v661;
  unint64_t v406 = v662;
  if (v662)
  {
    v407 = (unint64_t *)(v662 + 8);
    do
      unint64_t v408 = __ldxr(v407);
    while (__stxr(v408 + 1, v407));
  }

  if (*((void *)&v340 + 1))
  {
    v409 = (unint64_t *)(*((void *)&v340 + 1) + 8LL);
    do
      unint64_t v410 = __ldxr(v409);
    while (__stxr(v410 + 1, v409));
  }

  uint64_t v411 = *((void *)&v643 + 1);
  uint64_t v605 = v643;
  if (*((void *)&v643 + 1))
  {
    v412 = (unint64_t *)(*((void *)&v643 + 1) + 8LL);
    do
      unint64_t v413 = __ldxr(v412);
    while (__stxr(v413 + 1, v412));
  }

  v414 = v393;
  dispatch_group_t v415 = dispatch_group_create();
  dispatch_group_t v416 = v415;
  dispatch_group_t v601 = v415;
  if (v392)
  {
    v597 = v392;
    v417 = v392;
    dispatch_group_enter(v417);
    v418 = v416;
    v419 = v418;
    *(void *)&v710.st_dev = v418;
    if (v418) {
      dispatch_group_enter(v418);
    }
    v420 = v414;
    v421 = operator new(0x80uLL);
    void *v421 = v419;
    v421[1] = v620;
    *(void *)&v710.st_dev = 0LL;
    v710.st_ino = 0LL;
    v421[2] = v394;
    v421[3] = v397;
    *(void *)&v710.uid_t st_uid = 0LL;
    *(void *)&v710.st_rdev = 0LL;
    v421[4] = *((void *)&v397 + 1);
    v421[5] = v614;
    v710.st_atimespec.__darwin_time_t tv_sec = 0LL;
    v710.st_atimespec.uint64_t tv_nsec = 0LL;
    v421[6] = v400;
    v421[7] = v612;
    v710.st_mtimespec.__darwin_time_t tv_sec = 0LL;
    v710.st_mtimespec.uint64_t tv_nsec = 0LL;
    v421[8] = v403;
    v421[9] = v609;
    v421[10] = v406;
    v710.st_ctimespec.__darwin_time_t tv_sec = 0LL;
    v710.st_ctimespec.uint64_t tv_nsec = 0LL;
    *((_OWORD *)v421 + 6) = v340;
    v710.st_birthtimespec.__darwin_time_t tv_sec = 0LL;
    v710.st_UInt32 size = 0LL;
    v421[14] = v605;
    v421[15] = v411;
    memset(&v710.st_blocks, 0, 24);
    dispatch_group_notify_f(v417, v420, v421, (dispatch_function_t)sub_10005FCBC);

    v422 = v597;
    sub_10005FC1C((id *)&v710);
    dispatch_group_leave(v417);
  }

  else
  {
    v423 = v415;
    v424 = v423;
    *(void *)&v710.st_dev = v423;
    if (v423) {
      dispatch_group_enter(v423);
    }
    v425 = v414;
    v426 = operator new(0x80uLL);
    void *v426 = v424;
    v426[1] = v620;
    *(void *)&v710.st_dev = 0LL;
    v710.st_ino = 0LL;
    v426[2] = v394;
    v426[3] = v397;
    *(void *)&v710.uid_t st_uid = 0LL;
    *(void *)&v710.st_rdev = 0LL;
    v426[4] = *((void *)&v397 + 1);
    v426[5] = v614;
    v710.st_atimespec.__darwin_time_t tv_sec = 0LL;
    v710.st_atimespec.uint64_t tv_nsec = 0LL;
    v426[6] = v400;
    v426[7] = v612;
    v710.st_mtimespec.__darwin_time_t tv_sec = 0LL;
    v710.st_mtimespec.uint64_t tv_nsec = 0LL;
    v426[8] = v403;
    v426[9] = v609;
    v426[10] = v406;
    v710.st_ctimespec.__darwin_time_t tv_sec = 0LL;
    v710.st_ctimespec.uint64_t tv_nsec = 0LL;
    *((_OWORD *)v426 + 6) = v340;
    v710.st_birthtimespec.__darwin_time_t tv_sec = 0LL;
    v710.st_UInt32 size = 0LL;
    v426[14] = v605;
    v426[15] = v411;
    memset(&v710.st_blocks, 0, 24);
    dispatch_async_f(v425, v426, (dispatch_function_t)sub_100060164);

    v422 = 0LL;
    sub_10005FC1C((id *)&v710);
  }

  v621 = v601;
  v427 = v414;
  __int128 v428 = v686;
  if (*((void *)&v686 + 1))
  {
    v429 = (unint64_t *)(*((void *)&v686 + 1) + 8LL);
    do
      unint64_t v430 = __ldxr(v429);
    while (__stxr(v430 + 1, v429));
  }

  uint64_t v431 = v663;
  uint64_t v432 = v664;
  if (v664)
  {
    v433 = (unint64_t *)(v664 + 8);
    do
      unint64_t v434 = __ldxr(v433);
    while (__stxr(v434 + 1, v433));
  }

  __int128 v435 = v683;
  if (*((void *)&v683 + 1))
  {
    v436 = (unint64_t *)(*((void *)&v683 + 1) + 8LL);
    do
      unint64_t v437 = __ldxr(v436);
    while (__stxr(v437 + 1, v436));
  }

  unint64_t v438 = v671;
  unint64_t v439 = v672;
  if (v672)
  {
    v440 = (unint64_t *)(v672 + 8);
    do
      unint64_t v441 = __ldxr(v440);
    while (__stxr(v441 + 1, v440));
  }

  uint64_t v442 = v667;
  v443 = v668;
  if (v668)
  {
    v444 = (unint64_t *)&v668->__shared_owners_;
    do
      unint64_t v445 = __ldxr(v444);
    while (__stxr(v445 + 1, v444));
  }

  uint64_t v594 = v677;
  __darwin_time_t v446 = v678;
  if (v678)
  {
    v447 = (unint64_t *)(v678 + 8);
    do
      unint64_t v448 = __ldxr(v447);
    while (__stxr(v448 + 1, v447));
  }

  unint64_t v590 = v675;
  __darwin_ino64_t v449 = v676;
  if (v676)
  {
    v450 = (unint64_t *)(v676 + 8);
    do
      unint64_t v451 = __ldxr(v450);
    while (__stxr(v451 + 1, v450));
  }

  if (v628)
  {
    v452 = (unint64_t *)&v628->__shared_owners_;
    do
      unint64_t v453 = __ldxr(v452);
    while (__stxr(v453 + 1, v452));
  }

  __darwin_ino64_t v592 = v449;
  __darwin_time_t v598 = v446;
  uint64_t v615 = v438;
  if (*((void *)&v340 + 1))
  {
    v454 = (unint64_t *)(*((void *)&v340 + 1) + 8LL);
    do
      unint64_t v455 = __ldxr(v454);
    while (__stxr(v455 + 1, v454));
  }

  v456 = v427;
  dispatch_group_t v457 = dispatch_group_create();
  dispatch_group_t v458 = v457;
  unint64_t v610 = v439;
  dispatch_group_t v586 = v457;
  uint64_t v602 = v442;
  v606 = v443;
  if (v621)
  {
    v459 = v621;
    dispatch_group_enter(v459);
    v460 = v458;
    v461 = v460;
    *(void *)&v710.st_dev = v460;
    if (v460) {
      dispatch_group_enter(v460);
    }
    v462 = v456;
    v710.st_ino = (__darwin_ino64_t)v462;

    *(_OWORD *)&v710.uid_t st_uid = v428;
    v710.st_atimespec.__darwin_time_t tv_sec = v435;
    v710.st_atimespec.uint64_t tv_nsec = v432;
    v710.st_mtimespec = (timespec)v435;
    v710.st_ctimespec.__darwin_time_t tv_sec = v622;
    v710.st_ctimespec.uint64_t tv_nsec = v615;
    __int128 v713 = v587;
    v463 = (dispatch_queue_s *)v462;
    v464 = operator new(0xC0uLL);
    void *v464 = v461;
    v464[1] = v463;
    *((_OWORD *)v464 + 1) = v428;
    *(_OWORD *)&v710.uid_t st_uid = 0u;
    v464[4] = v435;
    v464[5] = v432;
    v710.st_atimespec = 0u;
    *((_OWORD *)v464 + 3) = v435;
    v710.st_mtimespec = 0u;
    v464[8] = v622;
    v464[9] = v615;
    *(_OWORD *)&v710.st_ctimespec.uint64_t tv_nsec = 0u;
    v464[10] = v610;
    v464[11] = v602;
    *(_OWORD *)&v710.st_birthtimespec.uint64_t tv_nsec = 0u;
    v464[12] = v443;
    *(_OWORD *)&v710.st_blocks = 0u;
    v464[13] = v594;
    v464[14] = v598;
    v464[15] = v590;
    v464[16] = v592;
    *(_OWORD *)&v710.st_geuint64_t n = 0u;
    v464[18] = v624;
    v464[19] = v628;
    *(_OWORD *)&v710.st_dev = 0u;
    __int128 v711 = 0u;
    *((_OWORD *)v464 + 10) = v340;
    __int128 v712 = 0u;
    *((_OWORD *)v464 + 11) = v713;
    dispatch_group_notify_f(v459, v463, v464, (dispatch_function_t)sub_10006027C);

    sub_1000601BC((id *)&v710);
    dispatch_group_leave(v459);
  }

  else
  {
    __darwin_time_t v465 = v431;
    v466 = v457;
    v467 = v466;
    *(void *)&v710.st_dev = v466;
    if (v466) {
      dispatch_group_enter(v466);
    }
    v468 = v456;
    v710.st_ino = (__darwin_ino64_t)v468;

    *(_OWORD *)&v710.uid_t st_uid = v428;
    v710.st_atimespec.__darwin_time_t tv_sec = v465;
    v710.st_atimespec.uint64_t tv_nsec = v432;
    v710.st_mtimespec = (timespec)v435;
    v710.st_ctimespec.__darwin_time_t tv_sec = v622;
    v710.st_ctimespec.uint64_t tv_nsec = v615;
    __int128 v713 = v587;
    v469 = (dispatch_queue_s *)v468;
    v470 = operator new(0xC0uLL);
    void *v470 = v467;
    v470[1] = v469;
    *((_OWORD *)v470 + 1) = v428;
    *(_OWORD *)&v710.uid_t st_uid = 0u;
    v470[4] = v465;
    v470[5] = v432;
    v710.st_atimespec = 0u;
    *((_OWORD *)v470 + 3) = v435;
    v710.st_mtimespec = 0u;
    v470[8] = v622;
    v470[9] = v615;
    *(_OWORD *)&v710.st_ctimespec.uint64_t tv_nsec = 0u;
    v470[10] = v439;
    v470[11] = v442;
    *(_OWORD *)&v710.st_birthtimespec.uint64_t tv_nsec = 0u;
    v470[12] = v606;
    *(_OWORD *)&v710.st_blocks = 0u;
    v470[13] = v594;
    v470[14] = v598;
    v470[15] = v590;
    v470[16] = v592;
    *(_OWORD *)&v710.st_geuint64_t n = 0u;
    v470[18] = v624;
    v470[19] = v628;
    *(_OWORD *)&v710.st_dev = 0u;
    __int128 v711 = 0u;
    *((_OWORD *)v470 + 10) = v340;
    __int128 v712 = 0u;
    *((_OWORD *)v470 + 11) = v713;
    dispatch_async_f(v469, v470, (dispatch_function_t)sub_1000613AC);

    sub_1000601BC((id *)&v710);
  }

  v471 = v586;
  v472 = (os_log_s *)(id)qword_1001318E8;
  if (os_log_type_enabled(v472, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v710.st_dev) = 0;
    _os_log_impl((void *)&_mh_execute_header, v472, OS_LOG_TYPE_DEFAULT, "==== running main loop", (uint8_t *)&v710, 2u);
  }

  if (v628)
  {
    v473 = (unint64_t *)&v628->__shared_owners_;
    do
      unint64_t v474 = __ldaxr(v473);
    while (__stlxr(v474 - 1, v473));
    if (!v474)
    {
      ((void (*)(std::__shared_weak_count *))v628->__on_zero_shared)(v628);
      std::__shared_weak_count::__release_weak(v628);
    }
  }

  v475 = v639;
  if (v639)
  {
    v476 = (unint64_t *)&v639->__shared_owners_;
    do
      unint64_t v477 = __ldaxr(v476);
    while (__stlxr(v477 - 1, v476));
    if (!v477)
    {
      ((void (*)(std::__shared_weak_count *))v475->__on_zero_shared)(v475);
      std::__shared_weak_count::__release_weak(v475);
    }
  }

  v478 = (std::__shared_weak_count *)*((void *)&v640 + 1);
  if (*((void *)&v640 + 1))
  {
    v479 = (unint64_t *)(*((void *)&v640 + 1) + 8LL);
    do
      unint64_t v480 = __ldaxr(v479);
    while (__stlxr(v480 - 1, v479));
    if (!v480)
    {
      ((void (*)(std::__shared_weak_count *))v478->__on_zero_shared)(v478);
      std::__shared_weak_count::__release_weak(v478);
    }
  }

  v481 = (std::__shared_weak_count *)v642;
  if (v642)
  {
    v482 = (unint64_t *)(v642 + 8);
    do
      unint64_t v483 = __ldaxr(v482);
    while (__stlxr(v483 - 1, v482));
    if (!v483)
    {
      ((void (*)(std::__shared_weak_count *))v481->__on_zero_shared)(v481);
      std::__shared_weak_count::__release_weak(v481);
    }
  }

  v484 = (std::__shared_weak_count *)*((void *)&v643 + 1);
  if (*((void *)&v643 + 1))
  {
    v485 = (unint64_t *)(*((void *)&v643 + 1) + 8LL);
    do
      unint64_t v486 = __ldaxr(v485);
    while (__stlxr(v486 - 1, v485));
    if (!v486)
    {
      ((void (*)(std::__shared_weak_count *))v484->__on_zero_shared)(v484);
      std::__shared_weak_count::__release_weak(v484);
    }
  }

  v487 = (std::__shared_weak_count *)v647;
  if (v647)
  {
    v488 = (unint64_t *)(v647 + 8);
    do
      unint64_t v489 = __ldaxr(v488);
    while (__stlxr(v489 - 1, v488));
    if (!v489)
    {
      ((void (*)(std::__shared_weak_count *))v487->__on_zero_shared)(v487);
      std::__shared_weak_count::__release_weak(v487);
    }
  }

  v490 = (std::__shared_weak_count *)v655;
  if (v655)
  {
    v491 = (unint64_t *)(v655 + 8);
    do
      unint64_t v492 = __ldaxr(v491);
    while (__stlxr(v492 - 1, v491));
    if (!v492)
    {
      ((void (*)(std::__shared_weak_count *))v490->__on_zero_shared)(v490);
      std::__shared_weak_count::__release_weak(v490);
    }
  }

  v493 = (std::__shared_weak_count *)v657;
  if (v657)
  {
    v494 = (unint64_t *)(v657 + 8);
    do
      unint64_t v495 = __ldaxr(v494);
    while (__stlxr(v495 - 1, v494));
    if (!v495)
    {
      ((void (*)(std::__shared_weak_count *))v493->__on_zero_shared)(v493);
      std::__shared_weak_count::__release_weak(v493);
    }
  }

  v496 = (std::__shared_weak_count *)v659;
  if (v659)
  {
    v497 = (unint64_t *)(v659 + 8);
    do
      unint64_t v498 = __ldaxr(v497);
    while (__stlxr(v498 - 1, v497));
    if (!v498)
    {
      ((void (*)(std::__shared_weak_count *))v496->__on_zero_shared)(v496);
      std::__shared_weak_count::__release_weak(v496);
    }
  }

  v499 = (std::__shared_weak_count *)*((void *)&v660 + 1);
  if (*((void *)&v660 + 1))
  {
    v500 = (unint64_t *)(*((void *)&v660 + 1) + 8LL);
    do
      unint64_t v501 = __ldaxr(v500);
    while (__stlxr(v501 - 1, v500));
    if (!v501)
    {
      ((void (*)(std::__shared_weak_count *))v499->__on_zero_shared)(v499);
      std::__shared_weak_count::__release_weak(v499);
    }
  }

  v502 = (std::__shared_weak_count *)v662;
  if (v662)
  {
    v503 = (unint64_t *)(v662 + 8);
    do
      unint64_t v504 = __ldaxr(v503);
    while (__stlxr(v504 - 1, v503));
    if (!v504)
    {
      ((void (*)(std::__shared_weak_count *))v502->__on_zero_shared)(v502);
      std::__shared_weak_count::__release_weak(v502);
    }
  }

  v505 = (std::__shared_weak_count *)v664;
  if (v664)
  {
    v506 = (unint64_t *)(v664 + 8);
    do
      unint64_t v507 = __ldaxr(v506);
    while (__stlxr(v507 - 1, v506));
    if (!v507)
    {
      ((void (*)(std::__shared_weak_count *))v505->__on_zero_shared)(v505);
      std::__shared_weak_count::__release_weak(v505);
    }
  }

  v508 = (std::__shared_weak_count *)v666;
  if (v666)
  {
    v509 = (unint64_t *)(v666 + 8);
    do
      unint64_t v510 = __ldaxr(v509);
    while (__stlxr(v510 - 1, v509));
    if (!v510)
    {
      ((void (*)(std::__shared_weak_count *))v508->__on_zero_shared)(v508);
      std::__shared_weak_count::__release_weak(v508);
    }
  }

  v511 = v668;
  if (v668)
  {
    v512 = (unint64_t *)&v668->__shared_owners_;
    do
      unint64_t v513 = __ldaxr(v512);
    while (__stlxr(v513 - 1, v512));
    if (!v513)
    {
      ((void (*)(std::__shared_weak_count *))v511->__on_zero_shared)(v511);
      std::__shared_weak_count::__release_weak(v511);
    }
  }

  v514 = (std::__shared_weak_count *)v670;
  if (v670)
  {
    v515 = (unint64_t *)(v670 + 8);
    do
      unint64_t v516 = __ldaxr(v515);
    while (__stlxr(v516 - 1, v515));
    if (!v516)
    {
      ((void (*)(std::__shared_weak_count *))v514->__on_zero_shared)(v514);
      std::__shared_weak_count::__release_weak(v514);
    }
  }

  v517 = (std::__shared_weak_count *)v672;
  if (v672)
  {
    v518 = (unint64_t *)(v672 + 8);
    do
      unint64_t v519 = __ldaxr(v518);
    while (__stlxr(v519 - 1, v518));
    if (!v519)
    {
      ((void (*)(std::__shared_weak_count *))v517->__on_zero_shared)(v517);
      std::__shared_weak_count::__release_weak(v517);
    }
  }

  v520 = (std::__shared_weak_count *)v674;
  if (v674)
  {
    v521 = (unint64_t *)(v674 + 8);
    do
      unint64_t v522 = __ldaxr(v521);
    while (__stlxr(v522 - 1, v521));
    if (!v522)
    {
      ((void (*)(std::__shared_weak_count *))v520->__on_zero_shared)(v520);
      std::__shared_weak_count::__release_weak(v520);
    }
  }

  v523 = (std::__shared_weak_count *)v676;
  if (v676)
  {
    v524 = (unint64_t *)(v676 + 8);
    do
      unint64_t v525 = __ldaxr(v524);
    while (__stlxr(v525 - 1, v524));
    if (!v525)
    {
      ((void (*)(std::__shared_weak_count *))v523->__on_zero_shared)(v523);
      std::__shared_weak_count::__release_weak(v523);
    }
  }

  v526 = (std::__shared_weak_count *)v678;
  if (v678)
  {
    v527 = (unint64_t *)(v678 + 8);
    do
      unint64_t v528 = __ldaxr(v527);
    while (__stlxr(v528 - 1, v527));
    if (!v528)
    {
      ((void (*)(std::__shared_weak_count *))v526->__on_zero_shared)(v526);
      std::__shared_weak_count::__release_weak(v526);
    }
  }

  v529 = (std::__shared_weak_count *)v680;
  if (v680)
  {
    v530 = (unint64_t *)(v680 + 8);
    do
      unint64_t v531 = __ldaxr(v530);
    while (__stlxr(v531 - 1, v530));
    if (!v531)
    {
      ((void (*)(std::__shared_weak_count *))v529->__on_zero_shared)(v529);
      std::__shared_weak_count::__release_weak(v529);
    }
  }

  v532 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    v533 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v534 = __ldaxr(v533);
    while (__stlxr(v534 - 1, v533));
    if (!v534)
    {
      ((void (*)(std::__shared_weak_count *))v532->__on_zero_shared)(v532);
      std::__shared_weak_count::__release_weak(v532);
    }
  }

  v535 = (std::__shared_weak_count *)*((void *)&v683 + 1);
  if (*((void *)&v683 + 1))
  {
    v536 = (unint64_t *)(*((void *)&v683 + 1) + 8LL);
    do
      unint64_t v537 = __ldaxr(v536);
    while (__stlxr(v537 - 1, v536));
    if (!v537)
    {
      ((void (*)(std::__shared_weak_count *))v535->__on_zero_shared)(v535);
      std::__shared_weak_count::__release_weak(v535);
    }
  }

  objc_autoreleasePoolPop(context);
  CFRunLoopRun();
  uint32_t v538 = notify_set_state(out_token, 0LL);
  if (v538)
  {
    v539 = (os_log_s *)qword_1001318E8;
    if (os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_DEFAULT))
    {
      v710.st_dev = 67109120;
      *(_DWORD *)&v710.int st_mode = v538;
      _os_log_impl( (void *)&_mh_execute_header,  v539,  OS_LOG_TYPE_DEFAULT,  "[Notify] failed to set state to stopped (%d)",  (uint8_t *)&v710,  8u);
    }
  }

  uint32_t v540 = notify_post("com.apple.analyticsd.running");
  v541 = (os_log_s *)qword_1001318E8;
  if (v540 && os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_DEFAULT))
  {
    v710.st_dev = 67109120;
    *(_DWORD *)&v710.int st_mode = v540;
    _os_log_impl( (void *)&_mh_execute_header,  v541,  OS_LOG_TYPE_DEFAULT,  "[Notify] failed to post (%d)",  (uint8_t *)&v710,  8u);
    v541 = (os_log_s *)qword_1001318E8;
  }

  v542 = v541;
  if (os_log_type_enabled(v542, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v710.st_dev) = 0;
    _os_log_impl((void *)&_mh_execute_header, v542, OS_LOG_TYPE_DEFAULT, "==== stopping", (uint8_t *)&v710, 2u);
  }

  v543 = (os_log_s *)(id)qword_1001318E8;
  if (os_log_type_enabled(v543, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v710.st_dev) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v543,  OS_LOG_TYPE_DEFAULT,  "==== stopping kernel listener",  (uint8_t *)&v710,  2u);
  }

  sub_10004EFC0(v622);
  v544 = (os_log_s *)(id)qword_1001318E8;
  if (os_log_type_enabled(v544, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v710.st_dev) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v544,  OS_LOG_TYPE_DEFAULT,  "==== stopping XPC/MTShimXpc Servers",  (uint8_t *)&v710,  2u);
  }

  *(void *)&v710.st_dev = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&v710.st_dev = dispatch_group_create();
  *(void *)v691 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(uint8_t *__return_ptr))(*(void *)v686 + 8LL))(v691);
  sub_10005E1F0((id *)&v710, (id *)v691);
  *(void *)&__int128 v683 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(__int128 *__return_ptr))(*(void *)v685 + 8LL))(&v683);
  sub_10005E1F0((id *)&v710, (id *)&v683);
  v545 = (dispatch_group_s *)*(id *)&v710.st_dev;
  dispatch_time_t v546 = dispatch_time(0LL, 5000000000LL);
  BOOL v547 = dispatch_group_wait(v545, v546) == 0;

  if (!v547)
  {
    v548 = (os_log_s *)(id)qword_1001318E8;
    if (os_log_type_enabled(v548, OS_LOG_TYPE_ERROR)) {
      sub_1000D9180(v548, v549, v550);
    }
  }

  v551 = (os_log_s *)(id)qword_1001318E8;
  if (os_log_type_enabled(v551, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v551,  OS_LOG_TYPE_DEFAULT,  "==== stopping and persisting transform cache",  buf,  2u);
  }

  sub_100023834(v684);
  v552 = (void *)v683;
  *(void *)&__int128 v683 = 0LL;

  v553 = *(void **)v691;
  *(void *)v691 = 0LL;

  v554 = *(void **)&v710.st_dev;
  *(void *)&v710.st_dev = 0LL;

  v555 = (os_log_s *)(id)qword_1001318E8;
  if (os_log_type_enabled(v555, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v710.st_dev) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v555,  OS_LOG_TYPE_DEFAULT,  "==== EXITING ONCE DAEMON IS CLEAN ====",  (uint8_t *)&v710,  2u);
  }

  xpc_transaction_exit_clean();
  v556 = dispatch_group_create();

  if (v556)
  {
    v557 = v556;
    dispatch_group_enter(v557);
  }

  BOOL v558 = v556 == 0LL;
  v559 = v556;
  dispatch_time_t v560 = dispatch_time(0LL, 5000000000LL);
  uint64_t v561 = dispatch_group_wait(v559, v560);

  v562 = v559;
  if (!v558)
  {
    v563 = v562;
    dispatch_group_leave(v563);
  }

  if (v561)
  {
    v564 = (os_log_s *)(id)qword_1001318E8;
    if (os_log_type_enabled(v564, OS_LOG_TYPE_ERROR)) {
      sub_1000D9120(v564, v565, v566);
    }
  }

  v567 = (std::__shared_weak_count *)*((void *)&v684 + 1);
  if (*((void *)&v684 + 1))
  {
    v568 = (unint64_t *)(*((void *)&v684 + 1) + 8LL);
    do
      unint64_t v569 = __ldaxr(v568);
    while (__stlxr(v569 - 1, v568));
    if (!v569)
    {
      ((void (*)(std::__shared_weak_count *))v567->__on_zero_shared)(v567);
      std::__shared_weak_count::__release_weak(v567);
    }
  }

  v570 = (std::__shared_weak_count *)*((void *)&v685 + 1);
  if (*((void *)&v685 + 1))
  {
    v571 = (unint64_t *)(*((void *)&v685 + 1) + 8LL);
    do
      unint64_t v572 = __ldaxr(v571);
    while (__stlxr(v572 - 1, v571));
    if (!v572)
    {
      ((void (*)(std::__shared_weak_count *))v570->__on_zero_shared)(v570);
      std::__shared_weak_count::__release_weak(v570);
    }
  }

  v573 = (std::__shared_weak_count *)*((void *)&v686 + 1);
  if (*((void *)&v686 + 1))
  {
    v574 = (unint64_t *)(*((void *)&v686 + 1) + 8LL);
    do
      unint64_t v575 = __ldaxr(v574);
    while (__stlxr(v575 - 1, v574));
    if (!v575)
    {
      ((void (*)(std::__shared_weak_count *))v573->__on_zero_shared)(v573);
      std::__shared_weak_count::__release_weak(v573);
    }
  }

  return 0LL;
}

void sub_10005DC80(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10005E160(uint64_t a1)
{
  return sub_100007004(a1);
}

void sub_10005E1F0(id *a1, id *a2)
{
  if (*a1) {
    BOOL v2 = *a2 == 0LL;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2)
  {
    BOOL v4 = (dispatch_group_s *)*a1;
    dispatch_group_enter(v4);
    id v5 = sub_10000B718(a2);
    __int128 v6 = (dispatch_group_s *)objc_claimAutoreleasedReturnValue(v5);
    dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
    unint64_t v8 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3321888768LL;
    void v11[2] = nullsub_46;
    void v11[3] = &unk_100128690;
    unint64_t v9 = v4;
    dispatch_group_t group = v9;
    dispatch_group_enter(v9);
    dispatch_group_notify(v6, v8, v11);

    if (group) {
      dispatch_group_leave(group);
    }
    dispatch_group_t v10 = group;
    dispatch_group_t group = 0LL;

    dispatch_group_leave(v9);
  }

void sub_10005E330(id a1, OS_xpc_object *a2)
{
  xdict = a2;
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  remote_connectiouint64_t n = xpc_dictionary_get_remote_connection(xdict);
  BOOL v4 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);
  xpc_connection_send_message(v4, reply);
}

void sub_10005E384( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v12 = v11;

  _Unwind_Resume(a1);
}

void sub_10005E3B4(id a1)
{
  uid_t v1 = (os_log_s *)qword_1001318E8;
  if (os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "=== SIGTERM captured: Restart started", v3, 2u);
  }

  Maiuint64_t n = CFRunLoopGetMain();
  CFRunLoopStop(Main);
}

void sub_10005E454(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  __int128 v3 = (id *)(a1 + 32);
  id v4 = sub_10000B718(v3);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  if (v5)
  {
    id v6 = sub_10000B718(v3);
    BOOL v7 = (dispatch_group_s *)objc_claimAutoreleasedReturnValue(v6);
    dispatch_group_enter(v7);
  }

void sub_10005E4C4(uint64_t a1)
{
  uid_t v1 = (id *)(a1 + 32);
  id v2 = sub_10000B718((id *)(a1 + 32));
  __int128 v3 = (void *)objc_claimAutoreleasedReturnValue(v2);

  if (v3)
  {
    id v4 = sub_10000B718(v1);
    id v5 = (dispatch_group_s *)objc_claimAutoreleasedReturnValue(v4);
    dispatch_group_leave(v5);
  }

  id v6 = *v1;
  id *v1 = 0LL;
}

void *sub_10005E520(void *a1)
{
  *a1 = off_1001286D0;
  sub_100007004((uint64_t)(a1 + 1));
  return a1;
}

void sub_10005E550(void *a1)
{
  *a1 = off_1001286D0;
  sub_100007004((uint64_t)(a1 + 1));
  operator delete(a1);
}

void *sub_10005E580(uint64_t a1)
{
  double result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *double result = off_1001286D0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    id v5 = (unint64_t *)(v3 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  return result;
}

uint64_t sub_10005E5D0(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = off_1001286D0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    uint64_t v4 = (unint64_t *)(v2 + 8);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }

  return result;
}

uint64_t sub_10005E600(uint64_t a1)
{
  return sub_100007004(a1 + 8);
}

void sub_10005E608(void *a1)
{
}

uint64_t sub_10005E630(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 24LL))(*(void *)(a1 + 8));
}

uint64_t sub_10005E640(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

void (**sub_10005E67C())(std::__shared_weak_count *__hidden this, const std::type_info *)
{
}

void *sub_10005E690()
{
  double result = operator new(0x10uLL);
  *double result = &off_100128760;
  return result;
}

void sub_10005E6B4(uint64_t a1, void *a2)
{
  *a2 = &off_100128760;
}

void sub_10005E6CC()
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10005E79C;
  block[3] = &unk_1001287C0;
  void block[4] = &v0;
  dispatch_sync(&_dispatch_main_q, block);
}

uint64_t sub_10005E754(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

void (**sub_10005E790())(std::__shared_weak_count *__hidden this, const std::type_info *)
{
}

void sub_10005E79C()
{
  char v0 = (os_log_s *)qword_1001318E8;
  if (os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_DEFAULT,  "[DaemonPerf] Restart started after perf check",  v2,  2u);
  }

  Maiuint64_t n = CFRunLoopGetMain();
  CFRunLoopStop(Main);
}

void *sub_10005E838(void *a1)
{
  *a1 = off_100128800;
  sub_100007004((uint64_t)(a1 + 1));
  return a1;
}

void sub_10005E868(void *a1)
{
  *a1 = off_100128800;
  sub_100007004((uint64_t)(a1 + 1));
  operator delete(a1);
}

void *sub_10005E898(uint64_t a1)
{
  double result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *double result = off_100128800;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    unint64_t v5 = (unint64_t *)(v3 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  return result;
}

uint64_t sub_10005E8E8(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = off_100128800;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    uint64_t v4 = (unint64_t *)(v2 + 8);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }

  return result;
}

uint64_t sub_10005E918(uint64_t a1)
{
  return sub_100007004(a1 + 8);
}

void sub_10005E920(void *a1)
{
}

uint64_t sub_10005E948(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 24LL))(*(void *)(a1 + 8));
}

uint64_t sub_10005E958(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

void (**sub_10005E994())(std::__shared_weak_count *__hidden this, const std::type_info *)
{
}

void *sub_10005E9A0(void *a1)
{
  *a1 = off_100128880;
  sub_100007004((uint64_t)(a1 + 1));
  return a1;
}

void sub_10005E9D0(void *a1)
{
  *a1 = off_100128880;
  sub_100007004((uint64_t)(a1 + 1));
  operator delete(a1);
}

void *sub_10005EA00(uint64_t a1)
{
  double result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *double result = off_100128880;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    unint64_t v5 = (unint64_t *)(v3 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  return result;
}

uint64_t sub_10005EA50(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = off_100128880;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    uint64_t v4 = (unint64_t *)(v2 + 8);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }

  return result;
}

uint64_t sub_10005EA80(uint64_t a1)
{
  return sub_100007004(a1 + 8);
}

void sub_10005EA88(void *a1)
{
}

uint64_t sub_10005EAB0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16LL))(*(void *)(a1 + 8));
}

uint64_t sub_10005EAC0(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

void (**sub_10005EAFC())(std::__shared_weak_count *__hidden this, const std::type_info *)
{
}

void sub_10005EB08(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100128900;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10005EB18(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100128900;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_10005EB40(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100128950;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10005EB54(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100128950;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

id *sub_10005EB80(id *a1)
{
  id v2 = sub_10000B718(a1);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);

  if (v3)
  {
    id v4 = sub_10000B718(a1);
    unint64_t v5 = (dispatch_group_s *)objc_claimAutoreleasedReturnValue(v4);
    dispatch_group_leave(v5);
  }

  id v6 = *a1;
  *a1 = 0LL;

  return a1;
}

void sub_10005EBEC(uint64_t a1)
{
  **(void **)(a1 + 2memset(v15, 170, 24) = sub_1000102DC(*(void *)(a1 + 16));
  int v2 = sub_100095784();
  sub_1000956B4();
  int v3 = sub_10004B7BC(*(void *)(a1 + 48));
  int v4 = sub_10004B7BC(*(void *)(a1 + 64));
  unint64_t v5 = (os_log_s *)qword_1001318E8;
  if (os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "==== STARTUP: Starting mtShimServer early",  buf,  2u);
  }

  (***(void (****)(void))a1)(*(void *)a1);
  if (*(_DWORD *)(*(void *)(a1 + 224) + 4LL) == 1) {
    sub_100009DAC(*(void *)(a1 + 32));
  }
  if (sub_1000933B0())
  {
    sub_1000AB508(*(void *)(a1 + 80), 1);
    sub_1000AB59C(*(void **)(a1 + 80), &v57);
    dispatch_group_t v6 = v57;
    dispatch_group_t v57 = 0LL;
  }

  uint64_t v7 = *(void *)(a1 + 96);
  unint64_t v8 = *(std::__shared_weak_count **)(a1 + 120);
  *(void *)__int128 buf = *(void *)(a1 + 112);
  __int128 v59 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }

  sub_1000457D4(v7, (uint64_t *)buf);
  uint64_t v11 = v59;
  if (v59)
  {
    uint64_t v12 = (unint64_t *)&v59->__shared_owners_;
    do
      unint64_t v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  uint64_t v14 = *(void *)(a1 + 96);
  unint64_t v15 = *(std::__shared_weak_count **)(a1 + 136);
  *(void *)__int128 buf = *(void *)(a1 + 128);
  __int128 v59 = v15;
  if (v15)
  {
    uint64_t v16 = (unint64_t *)&v15->__shared_owners_;
    do
      unint64_t v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }

  sub_1000457D4(v14, (uint64_t *)buf);
  unint64_t v18 = v59;
  if (v59)
  {
    dispatch_queue_attr_t v19 = (unint64_t *)&v59->__shared_owners_;
    do
      unint64_t v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }

  uint64_t v21 = *(void *)(a1 + 96);
  __darwin_ino64_t v22 = *(std::__shared_weak_count **)(a1 + 152);
  *(void *)__int128 buf = *(void *)(a1 + 144);
  __int128 v59 = v22;
  if (v22)
  {
    uint64_t v23 = (unint64_t *)&v22->__shared_owners_;
    do
      unint64_t v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }

  sub_1000457D4(v21, (uint64_t *)buf);
  unint64_t v25 = v59;
  if (v59)
  {
    int64x2_t v26 = (unint64_t *)&v59->__shared_owners_;
    do
      unint64_t v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }

  uint64_t v28 = *(void *)(a1 + 96);
  uint64_t v29 = *(std::__shared_weak_count **)(a1 + 168);
  *(void *)__int128 buf = *(void *)(a1 + 160);
  __int128 v59 = v29;
  if (v29)
  {
    unint64_t v30 = (unint64_t *)&v29->__shared_owners_;
    do
      unint64_t v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }

  sub_1000457D4(v28, (uint64_t *)buf);
  unint64_t v32 = v59;
  if (v59)
  {
    uint64_t v33 = (unint64_t *)&v59->__shared_owners_;
    do
      unint64_t v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }

  uint64_t v35 = *(void *)(a1 + 96);
  unint64_t v36 = *(std::__shared_weak_count **)(a1 + 184);
  *(void *)__int128 buf = *(void *)(a1 + 176);
  __int128 v59 = v36;
  if (v36)
  {
    uint64_t v37 = (unint64_t *)&v36->__shared_owners_;
    do
      unint64_t v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }

  sub_1000457D4(v35, (uint64_t *)buf);
  unint64_t v39 = v59;
  if (v59)
  {
    uint64_t v40 = (unint64_t *)&v59->__shared_owners_;
    do
      unint64_t v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }

  unint64_t v55 = 0xAAAAAAAAAAAAAAAALL;
  char v56 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000B7D3C(*(void *)(a1 + 48), &v55);
  unint64_t v42 = (os_log_s *)(id)qword_1001318E8;
  if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
  {
    sub_100006200((uint64_t)&v55, -1, 0x20u, 0LL, 1, buf);
    __int128 v43 = v60 >= 0 ? buf : *(uint8_t **)buf;
    *(_DWORD *)unint64_t v61 = 136446210;
    __int128 v62 = v43;
    _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "==== STARTUP CONFIG: Booting with active configuration: %{public}s",  v61,  0xCu);
    if (v60 < 0) {
      operator delete(*(void **)buf);
    }
  }

  int v44 = (v3 | v4) & 1;
  if (v2)
  {
    __int128 v45 = (os_log_s *)qword_1001318E8;
    if (os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "==== ABNORMAL STATE: CONTAINS LEGACY TRANSFORM STATE",  buf,  2u);
    }

    **(_BYTE **)(a1 + 192) = 1;
  }

  if (v44)
  {
    unint64_t v46 = (os_log_s *)qword_1001318E8;
    if (os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "==== ABNORMAL STATE: DATABASE WIPE ATTEMPTED",  buf,  2u);
    }

    **(_BYTE **)(a1 + 192) = 1;
  }

  if (!*(_DWORD *)(*(void *)(a1 + 224) + 4LL))
  {
    unint64_t v47 = (os_log_s *)qword_1001318E8;
    if (os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "==== ABNORMAL STATE: NO DATA", buf, 2u);
    }

    **(_BYTE **)(a1 + 192) = 1;
  }

  if (v55 != 1)
  {
    char v54 = (os_log_s *)qword_1001318E8;
    if (os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_DEFAULT,  "==== ABNORMAL STATE: NO ACTIVE CONFIG",  buf,  2u);
    }

    __int128 v53 = (_BYTE **)(a1 + 192);
    goto LABEL_84;
  }

  if (!**(_BYTE **)(a1 + 192))
  {
    std::string v48 = (os_log_s *)qword_1001318E8;
    if (os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "==== STARTUP: State normal", buf, 2u);
    }

    uint64_t v49 = *(void *)(a1 + 224);
    if (*(_BYTE *)v49)
    {
      __int128 v50 = (os_log_s *)qword_1001318E8;
      if (os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "==== STARTUP ROLLOVER: PAST DUE", buf, 2u);
      }

      **(_BYTE **)(a1 + 20_Block_object_dispose(va, 8) = 1;
      uint64_t v49 = *(void *)(a1 + 224);
    }

    if (*(_DWORD *)(v49 + 4) == 1)
    {
      __int128 v51 = (os_log_s *)qword_1001318E8;
      if (os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "==== STARTUP ROLLOVER: OS UPDATE", buf, 2u);
      }

      **(_BYTE **)(a1 + 20_Block_object_dispose(va, 8) = 1;
    }

    if (sub_100009ED4(*(void *)(a1 + 32)))
    {
      unint64_t v52 = (os_log_s *)qword_1001318E8;
      if (os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEFAULT,  "==== STARTUP ROLLOVER: PARTIAL ROLLOVER",  buf,  2u);
      }

      __int128 v53 = (_BYTE **)(a1 + 208);
LABEL_84:
      *std::__shared_weak_count *v53 = 1;
    }
  }

  sub_1000041AC((uint64_t)&v55);
  sub_10000425C(&v56, v55);
}

void sub_10005F26C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_10005F2B4(id *a1)
{
  if (a1)
  {
    int v2 = sub_10005EB80(a1);
    operator delete(v2);
  }

void sub_10005F2F0(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    int v3 = sub_10005EB80(v1);
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

id *sub_10005F30C(id *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 1);
  sub_100007004((uint64_t)(a1 + 7));
  sub_100007004((uint64_t)(a1 + 5));
  sub_100007004((uint64_t)(a1 + 3));
  sub_100007004(v2);
  id v3 = sub_10000B718(a1);
  int v4 = (void *)objc_claimAutoreleasedReturnValue(v3);

  if (v4)
  {
    id v5 = sub_10000B718(a1);
    dispatch_group_t v6 = (dispatch_group_s *)objc_claimAutoreleasedReturnValue(v5);
    dispatch_group_leave(v6);
  }

  id v7 = *a1;
  *a1 = 0LL;

  return a1;
}

void sub_10005F394(uint64_t a1)
{
  int v4 = (dispatch_group_s *)0xAAAAAAAAAAAAAAAALL;
  sub_10005F464((void *)(a1 + 8), &v4);
  sub_10003A820((dispatch_object_t *)a1, &v4);
  uint64_t v2 = v4;
  int v4 = 0LL;

  id v3 = sub_10005F30C((id *)a1);
  operator delete(v3);
}

void sub_10005F424( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  if (v9)
  {
    uint64_t v11 = sub_10005F30C(v9);
    operator delete(v11);
  }

  _Unwind_Resume(a1);
}

void sub_10005F464(void *a1@<X0>, dispatch_group_t *a2@<X8>)
{
  if (*(_BYTE *)a1[4])
  {
    id v3 = (os_log_s *)qword_1001318E8;
    if (os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "==== STARTUP ROLLOVER BEGINNING ===",  (uint8_t *)&buf,  2u);
    }

    memset(&buf, 170, sizeof(buf));
    sub_100005064(&buf, "scheduled");
    unint64_t v20 = 0xAAAAAAAAAAAAAA00LL;
    uint64_t v21 = 0LL;
    sub_1000041AC((uint64_t)&v20);
    sub_1000041AC((uint64_t)&v20);
    if (*(_DWORD *)(a1[6] + 4LL) == 1)
    {
      std::string::assign(&buf, "osUpdate");
      sub_1000115CC(a1[2], v14);
      sub_1000114BC(a1[2], v12);
      sub_1000436AC((uint64_t *)v14, (uint64_t *)v12, __p);
      sub_100008E5C((uint64_t)v18, (uint64_t)__p);
      int v4 = sub_100003F94((unsigned __int8 *)&v20, "overrideOSBuildString");
      sub_1000041AC((uint64_t)v18);
      char v5 = *(_BYTE *)v4;
      *(_BYTE *)int v4 = v18[0];
      v18[0] = v5;
      dispatch_group_t v6 = (uint64_t *)v4[1];
      v4[1] = (uint64_t)v19;
      dispatch_queue_attr_t v19 = v6;
      sub_1000041AC((uint64_t)v4);
      sub_1000041AC((uint64_t)v18);
      sub_10000425C(&v19, v18[0]);
      if (v17 < 0) {
        operator delete(__p[0]);
      }
      if (v13 < 0) {
        operator delete(v12[0]);
      }
      if (v15 < 0) {
        operator delete(v14[0]);
      }
      v10[0] = 4;
      uint64_t v11 = 1LL;
      sub_1000041AC((uint64_t)v10);
      sub_1000041AC((uint64_t)v10);
      id v7 = sub_100003F94((unsigned __int8 *)&v20, "skipConfigurationActivation");
      sub_1000041AC((uint64_t)v10);
      unsigned __int8 v8 = *(_BYTE *)v7;
      *(_BYTE *)id v7 = v10[0];
      v10[0] = v8;
      unint64_t v9 = (uint64_t *)v7[1];
      v7[1] = v11;
      uint64_t v11 = (uint64_t)v9;
      sub_1000041AC((uint64_t)v7);
      sub_1000041AC((uint64_t)v10);
      sub_10000425C((uint64_t **)&v11, v10[0]);
    }

    (*(void (**)(void, std::string *, unint64_t *))(*(void *)*a1 + 16LL))(*a1, &buf, &v20);
    sub_1000041AC((uint64_t)&v20);
    sub_10000425C(&v21, v20);
  }

  else
  {
    *a2 = dispatch_group_create();
  }

void sub_10005F708( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, void *__p, uint64_t a25, int a26, __int16 a27, char a28, char a29, char a30)
{
}

void sub_10005F7A0(uint64_t a1)
{
  int v4 = (dispatch_group_s *)0xAAAAAAAAAAAAAAAALL;
  sub_10005F464((void *)(a1 + 8), &v4);
  sub_10003A820((dispatch_object_t *)a1, &v4);
  uint64_t v2 = v4;
  int v4 = 0LL;

  id v3 = sub_10005F30C((id *)a1);
  operator delete(v3);
}

void sub_10005F830( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  if (v9)
  {
    uint64_t v11 = sub_10005F30C(v9);
    operator delete(v11);
  }

  _Unwind_Resume(a1);
}

id *sub_10005F870(id *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 1);
  sub_100007004((uint64_t)(a1 + 13));
  sub_100007004((uint64_t)(a1 + 11));
  sub_100007004((uint64_t)(a1 + 9));
  sub_100007004((uint64_t)(a1 + 7));
  sub_100007004((uint64_t)(a1 + 5));
  sub_100007004((uint64_t)(a1 + 3));
  sub_100007004(v2);
  id v3 = sub_10000B718(a1);
  int v4 = (void *)objc_claimAutoreleasedReturnValue(v3);

  if (v4)
  {
    id v5 = sub_10000B718(a1);
    dispatch_group_t v6 = (dispatch_group_s *)objc_claimAutoreleasedReturnValue(v5);
    dispatch_group_leave(v6);
  }

  id v7 = *a1;
  *a1 = 0LL;

  return a1;
}

void sub_10005F910(id *a1)
{
  if (a1)
  {
    uint64_t v2 = sub_10005F870(a1);
    operator delete(v2);
  }

void sub_10005F94C(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    id v3 = sub_10005F870(v1);
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void sub_10005F968(uint64_t a1)
{
  if (**(_BYTE **)(a1 + 96) || *(_DWORD *)(*(void *)(a1 + 80) + 4LL) == 1)
  {
    uint64_t v2 = (os_log_s *)qword_1001318E8;
    if (os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_DEFAULT))
    {
      id v3 = "true";
      if (**(_BYTE **)(a1 + 96)) {
        int v4 = "true";
      }
      else {
        int v4 = "false";
      }
      if (*(_DWORD *)(*(void *)(a1 + 80) + 4LL) != 1) {
        id v3 = "false";
      }
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v12 = v4;
      __int16 v13 = 2082;
      uint64_t v14 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "==== WIPE STATE BEGINNING (abnormal-state: %{public}s, os-update: %{public}s)",  buf,  0x16u);
    }

    if (*(_DWORD *)(*(void *)(a1 + 80) + 4LL))
    {
      id v5 = (os_log_s *)qword_1001318E8;
      if (os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "==== WIPE: Marking partial data flag. Data wipe is occurring but device did not do a clean install",  buf,  2u);
      }

      sub_100010A0C(*(void *)a1);
      sub_100010EAC(*(void *)a1);
    }

    dispatch_group_t v6 = (os_log_s *)qword_1001318E8;
    if (os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "==== WIPE: Recreating configuration database",  buf,  2u);
    }

    sub_10004B948(*(void *)(a1 + 48));
    sub_10004B7BC(*(void *)(a1 + 48));
    id v7 = (os_log_s *)qword_1001318E8;
    if (os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "==== WIPE: Recreating state database",  buf,  2u);
    }

    sub_10004B948(*(void *)(a1 + 64));
    sub_10004B7BC(*(void *)(a1 + 64));
    unsigned __int8 v8 = (os_log_s *)qword_1001318E8;
    if (os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "==== WIPE: Resetting of sampling override on new build",  buf,  2u);
    }

    sub_1000AB508(*(void *)(a1 + 32), 0);
    sub_1000AB59C(*(void **)(a1 + 32), &v10);
    dispatch_group_t v9 = v10;
    dispatch_group_t v10 = 0LL;
  }

void sub_10005FBC4(id *a1)
{
  if (a1)
  {
    uint64_t v2 = sub_10005F870(a1);
    operator delete(v2);
  }

void sub_10005FC00(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    id v3 = sub_10005F870(v1);
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

id *sub_10005FC1C(id *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 1);
  sub_100007004((uint64_t)(a1 + 14));
  sub_100007004((uint64_t)(a1 + 12));
  sub_100007004((uint64_t)(a1 + 9));
  sub_100007004((uint64_t)(a1 + 7));
  sub_100007004((uint64_t)(a1 + 5));
  sub_100007004((uint64_t)(a1 + 3));
  sub_100007004(v2);
  id v3 = sub_10000B718(a1);
  int v4 = (void *)objc_claimAutoreleasedReturnValue(v3);

  if (v4)
  {
    id v5 = sub_10000B718(a1);
    dispatch_group_t v6 = (dispatch_group_s *)objc_claimAutoreleasedReturnValue(v5);
    dispatch_group_leave(v6);
  }

  id v7 = *a1;
  *a1 = 0LL;

  return a1;
}

void sub_10005FCBC(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = sub_10005FC1C((id *)a1);
    operator delete(v2);
  }

void sub_10005FCF8(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    id v3 = sub_10005FC1C(v1);
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void sub_10005FD14(uint64_t *a1)
{
  unint64_t v39 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v40 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000B7D3C(*a1, &v39);
  if (*(_DWORD *)(a1[11] + 4) <= 2u && sub_100092AD0())
  {
    uint64_t v2 = (os_log_s *)qword_1001318E8;
    if (os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "==== STARTUP CONFIG: removing dev config after reboot",  (uint8_t *)&buf,  2u);
    }

    sub_1000411FC(&buf);
    sub_10008672C((const char *)&buf);
    v37[0] = 0;
    unint64_t v38 = 0LL;
    sub_1000041AC((uint64_t)v37);
    sub_1000041AC((uint64_t)v37);
    sub_1000041AC((uint64_t)v37);
    unsigned __int8 v3 = v39;
    LOBYTE(v39) = v37[0];
    v37[0] = v3;
    int v4 = v40;
    uint64_t v40 = v38;
    unint64_t v38 = v4;
    sub_1000041AC((uint64_t)&v39);
    sub_1000041AC((uint64_t)v37);
    sub_10000425C(&v38, v37[0]);
    sub_100092A24(0);
  }

  id v5 = (void *)a1[8];
  uint64_t v6 = a1[3];
  *(void *)&__int128 v36 = a1[2];
  *((void *)&v36 + 1) = v6;
  if (v6)
  {
    id v7 = (unint64_t *)(v6 + 16);
    do
      unint64_t v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }

  sub_1000AB3EC(v5, &v36);
  if (*((void *)&v36 + 1)) {
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v36 + 1));
  }
  dispatch_group_t v9 = (void *)a1[8];
  uint64_t v11 = a1[4];
  uint64_t v10 = a1[5];
  if (v11) {
    uint64_t v12 = v11 + 32;
  }
  else {
    uint64_t v12 = 0LL;
  }
  *(void *)&__int128 v35 = v12;
  *((void *)&v35 + 1) = v10;
  if (v10)
  {
    __int16 v13 = (unint64_t *)(v10 + 16);
    do
      unint64_t v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }

  sub_1000AB3EC(v9, &v35);
  if (*((void *)&v35 + 1)) {
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v35 + 1));
  }
  uint64_t v16 = a1[7];
  char v15 = (void *)a1[8];
  *(void *)&__int128 v34 = a1[6];
  *((void *)&v34 + 1) = v16;
  if (v16)
  {
    char v17 = (unint64_t *)(v16 + 16);
    do
      unint64_t v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }

  sub_1000AB3EC(v15, &v34);
  if (*((void *)&v34 + 1)) {
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v34 + 1));
  }
  dispatch_queue_attr_t v19 = (void *)a1[8];
  uint64_t v21 = a1[13];
  uint64_t v20 = a1[14];
  if (v21) {
    uint64_t v22 = v21 + 32;
  }
  else {
    uint64_t v22 = 0LL;
  }
  *(void *)&__int128 v33 = v22;
  *((void *)&v33 + 1) = v20;
  if (v20)
  {
    uint64_t v23 = (unint64_t *)(v20 + 16);
    do
      unint64_t v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }

  sub_1000AB3EC(v19, &v33);
  if (*((void *)&v33 + 1)) {
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v33 + 1));
  }
  if (v39 == 1)
  {
    sub_1000AB0E0((void *)a1[8], (dispatch_group_t *)&buf);
    dispatch_group_wait((dispatch_group_t)buf.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL);
    unint64_t v25 = (void *)buf.__r_.__value_.__r.__words[0];
    buf.__r_.__value_.__r.__words[0] = 0LL;
  }

  else
  {
    sub_1000AB754((void *)a1[8], (dispatch_group_t *)&buf);
    dispatch_group_wait((dispatch_group_t)buf.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL);
    int64x2_t v26 = (void *)buf.__r_.__value_.__r.__words[0];
    buf.__r_.__value_.__r.__words[0] = 0LL;

    sub_1000B7D3C(*a1, &v31);
    sub_1000041AC((uint64_t)&v31);
    char v27 = v39;
    LOBYTE(v39) = v31;
    LOBYTE(v31) = v27;
    uint64_t v28 = v40;
    uint64_t v40 = v32;
    unint64_t v32 = v28;
    sub_1000041AC((uint64_t)&v39);
    sub_1000041AC((uint64_t)&v31);
    sub_10000425C(&v32, v31);
  }

  uint64_t v29 = (os_log_s *)(id)qword_1001318E8;
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    sub_100006200((uint64_t)&v39, -1, 0x20u, 0LL, 1, &buf);
    if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_std::string buf = &buf;
    }
    else {
      p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)unint64_t v42 = 136446210;
    __int128 v43 = p_buf;
    _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "==== STARTUP CONFIG: fully resuming with active config: %{public}s",  v42,  0xCu);
  }

  sub_1000041AC((uint64_t)&v39);
  sub_10000425C(&v40, v39);
}

void sub_1000600D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t *a21)
{
}

void sub_100060164(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = sub_10005FC1C((id *)a1);
    operator delete(v2);
  }

void sub_1000601A0(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    unsigned __int8 v3 = sub_10005FC1C(v1);
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

id *sub_1000601BC(id *a1)
{
  id v2 = a1[1];
  a1[1] = 0LL;

  id v3 = sub_10000B718(a1);
  int v4 = (void *)objc_claimAutoreleasedReturnValue(v3);

  if (v4)
  {
    id v5 = sub_10000B718(a1);
    uint64_t v6 = (dispatch_group_s *)objc_claimAutoreleasedReturnValue(v5);
    dispatch_group_leave(v6);
  }

  id v7 = *a1;
  *a1 = 0LL;

  return a1;
}

void sub_10006027C(id *a1)
{
  if (a1)
  {
    id v2 = sub_1000601BC(a1);
    operator delete(v2);
  }

void sub_1000602B8(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    id v3 = sub_1000601BC(v1);
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void sub_1000602D4(uint64_t a1)
{
  if (**(_BYTE **)(a1 + 152)) {
    sub_10006F2A8();
  }
  id v2 = (os_log_s *)qword_1001318E8;
  if (os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf[0].__d_.__rep_) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "==== startup complete; starting services",
      (uint8_t *)buf,
      2u);
  }

  sub_100010EAC(*(void *)(a1 + 40));
  memset(&v47, 170, sizeof(v47));
  buf[0].__d_.__rep_ = sub_100010904(*(void *)(a1 + 40));
  sub_100043840(buf, &v47);
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = *(id *)a1;
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  id v44 = v4;
  *(void *)&__int128 v45 = v6;
  *((void *)&v45 + 1) = v5;
  if (v5)
  {
    id v7 = (unint64_t *)(v5 + 8);
    do
      unint64_t v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }

  else {
    std::stringbuf::string_type __p = v47;
  }
  __int128 v50 = 0LL;
  dispatch_group_t v9 = (std::chrono::system_clock::time_point *)operator new(0x38uLL);
  v9->__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)off_1001289A0;
  id v10 = v44;
  v9[1].__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)v10;
  id v44 = 0LL;

  __int128 v11 = v45;
  __int128 v45 = 0uLL;
  __int128 v12 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&v9[2].__d_.__rep_ = v11;
  *(_OWORD *)&v9[4].__d_.__rep_ = v12;
  v9[6].__d_.__rep_ = __p.__r_.__value_.__r.__words[2];
  memset(&__p, 0, sizeof(__p));
  __int128 v50 = v9;
  sub_100010568(v3, (uint64_t)buf);
  __int16 v13 = v50;
  if (v50 == buf)
  {
    uint64_t v14 = 4LL;
    __int16 v13 = buf;
  }

  else
  {
    if (!v50) {
      goto LABEL_16;
    }
    uint64_t v14 = 5LL;
  }

  (*(void (**)(void))(v13->__d_.__rep_ + 8 * v14))();
LABEL_16:
  if (*((void *)&v45 + 1))
  {
    char v15 = (unint64_t *)(*((void *)&v45 + 1) + 8LL);
    do
      unint64_t v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      (*(void (**)(void))(**((void **)&v45 + 1) + 16LL))(*((void *)&v45 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v45 + 1));
    }
  }

  id v17 = v44;
  id v44 = 0LL;

  uint64_t v18 = *(void *)(a1 + 80);
  uint64_t v20 = *(void *)(a1 + 96);
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v19 = *(void *)(a1 + 104);
  if (v20) {
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v21 = v20 + 112;
  }
  else {
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v21 = 0LL;
  }
  buf[0].__d_.__rep_ = v21;
  buf[1].__d_.__rep_ = v19;
  if (v19)
  {
    uint64_t v22 = (unint64_t *)(v19 + 8);
    do
      unint64_t v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }

  sub_100045748(v18, (uint64_t)buf);
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = (std::__shared_weak_count *)buf[1].__d_.__rep_;
  if (buf[1].__d_.__rep_)
  {
    unint64_t v25 = (unint64_t *)(buf[1].__d_.__rep_ + 8);
    do
      unint64_t v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))rep->__on_zero_shared)(rep);
      std::__shared_weak_count::__release_weak(rep);
    }
  }

  sub_10002EFA0(*(void *)(a1 + 24));
  (***(void (****)(void))(a1 + 8))(*(void *)(a1 + 8));
  char v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObjects:](&OBJC_CLASS___NSSet, "setWithObjects:", @"locale-prefs-subscribe", 0LL));
  +[AnalyticsXPCSubscriptionManager subscribeToUserDataChangesWithArguments:]( &OBJC_CLASS____TtC10analyticsd31AnalyticsXPCSubscriptionManager,  "subscribeToUserDataChangesWithArguments:",  v27);
  if (*(_DWORD *)(*(void *)(a1 + 152) + 4LL) <= 2u)
  {
    uint64_t v28 = *(void *)(a1 + 24);
    sub_100005064(buf, "com.apple.coreanalytics.systemUptime");
    sub_10000EC58(*(void *)(a1 + 176), *(void *)(a1 + 168), (uint64_t)v40);
    sub_1000723B4((__int128 *)&buf[0].__d_.__rep_, (uint64_t)v40, &v42);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v28 + 16LL))(v28, &v42);
    uint64_t v29 = v43;
    if (v43)
    {
      p_shared_owners = (unint64_t *)&v43->__shared_owners_;
      do
        unint64_t v31 = __ldaxr(p_shared_owners);
      while (__stlxr(v31 - 1, p_shared_owners));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }

    sub_1000041AC((uint64_t)v40);
    sub_10000425C(&v41, v40[0]);
    if (v49 < 0) {
      operator delete((void *)buf[0].__d_.__rep_);
    }
    if (*(_DWORD *)(*(void *)(a1 + 152) + 4LL) == 1)
    {
      uint64_t v32 = *(void *)(a1 + 24);
      sub_100005064(buf, "com.apple.coreanalytics.OSUpdate");
      sub_1000113AC(*(void *)(a1 + 40), v38);
      sub_1000114BC(*(void *)(a1 + 40), v36);
      sub_10000ED10((uint64_t)v38, (uint64_t)v36, **(unsigned __int8 **)(a1 + 136), (uint64_t)v40);
      sub_1000723B4((__int128 *)&buf[0].__d_.__rep_, (uint64_t)v40, &v42);
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v32 + 16LL))(v32, &v42);
      __int128 v33 = v43;
      if (v43)
      {
        __int128 v34 = (unint64_t *)&v43->__shared_owners_;
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }

      sub_1000041AC((uint64_t)v40);
      sub_10000425C(&v41, v40[0]);
      if (v37 < 0) {
        operator delete(v36[0]);
      }
      if (v39 < 0) {
        operator delete(v38[0]);
      }
      if (v49 < 0) {
        operator delete((void *)buf[0].__d_.__rep_);
      }
    }
  }

  sub_10004EC10(*(void *)(a1 + 56));
  sub_10008A7CC(*(void *)(a1 + 64));
}

void sub_1000607A8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t *a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1000608D8(uint64_t a1)
{
  id v2 = *(id *)a1;
  *(void *)a1 = 0LL;

  return a1;
}

uint64_t sub_100060924(uint64_t a1)
{
  *(void *)a1 = off_1001289A0;
  sub_100007004(a1 + 16);
  id v2 = *(void **)(a1 + 8);
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;

  return a1;
}

void sub_10006097C(void **a1)
{
  *a1 = off_1001289A0;
  sub_100007004((uint64_t)(a1 + 2));
  id v2 = a1[1];
  a1[1] = 0LL;

  operator delete(a1);
}

void *sub_1000609D4(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  id v2 = operator new(0x38uLL);
  void *v2 = off_1001289A0;
  sub_100060C54(v2 + 1, v1);
  return v2;
}

void sub_100060A14(_Unwind_Exception *a1)
{
}

void *sub_100060A28(uint64_t a1, void *a2)
{
  *a2 = off_1001289A0;
  return sub_100060C54(a2 + 1, a1 + 8);
}

void sub_100060A44(uint64_t a1)
{
}

void sub_100060A4C(void *a1)
{
}

void sub_100060A74(uint64_t a1, int *a2)
{
  int v3 = *a2;
  uint64_t v4 = *(void *)(a1 + 24);
  *(void *)&__int128 v10 = *(void *)(a1 + 16);
  *((void *)&v10 + 1) = v4;
  if (v4)
  {
    uint64_t v5 = (unint64_t *)(v4 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  int v11 = v3;
  if (*(char *)(a1 + 55) < 0)
  {
    sub_10000B8BC(&__p, *(void **)(a1 + 32), *(void *)(a1 + 40));
  }

  else
  {
    __int128 __p = *(_OWORD *)(a1 + 32);
    uint64_t v13 = *(void *)(a1 + 48);
  }

  id v7 = sub_10000B718((id *)(a1 + 8));
  unint64_t v8 = (dispatch_queue_s *)(id)objc_claimAutoreleasedReturnValue(v7);
  dispatch_group_t v9 = (char *)operator new(0x30uLL);
  *(_OWORD *)dispatch_group_t v9 = v10;
  *((_DWORD *)v9 + 4) = v11;
  *(_OWORD *)(v9 + memset(v15, 170, 24) = __p;
  *((void *)v9 + 5) = v13;
  __int128 __p = 0uLL;
  uint64_t v13 = 0LL;
  uint64_t v14 = 0LL;
  dispatch_async_f(v8, v9, (dispatch_function_t)sub_100060D94);
  sub_100060D4C(&v14);

  if (SHIBYTE(v13) < 0) {
    operator delete((void *)__p);
  }
}

void sub_100060BD8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000D9308(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100060C0C(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

void (**sub_100060C48())(std::__shared_weak_count *__hidden this, const std::type_info *)
{
}

void *sub_100060C54(void *a1, uint64_t a2)
{
  *a1 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  a1[1] = *(void *)(a2 + 8);
  a1[2] = v4;
  if (v4)
  {
    uint64_t v5 = (unint64_t *)(v4 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  id v7 = a1 + 3;
  if (*(char *)(a2 + 47) < 0)
  {
    sub_10000B8BC(v7, *(void **)(a2 + 24), *(void *)(a2 + 32));
  }

  else
  {
    __int128 v8 = *(_OWORD *)(a2 + 24);
    a1[5] = *(void *)(a2 + 40);
    *(_OWORD *)id v7 = v8;
  }

  return a1;
}

void sub_100060CE0(_Unwind_Exception *a1)
{
  id v4 = *v1;
  id *v1 = 0LL;

  _Unwind_Resume(a1);
}

void sub_100060D08(uint64_t a1)
{
  id v2 = *(id *)a1;
  *(void *)a1 = 0LL;
}

uint64_t *sub_100060D4C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0LL;
  if (v2)
  {
    int v3 = (void *)sub_100007004(v2);
    operator delete(v3);
  }

  return a1;
}

uint64_t *sub_100060D94(uint64_t a1)
{
  uint64_t v21 = a1;
  int v2 = *(_DWORD *)(a1 + 16);
  if (*(char *)(a1 + 47) < 0)
  {
    sub_10000B8BC(__p, *(void **)(a1 + 24), *(void *)(a1 + 32));
  }

  else
  {
    *(_OWORD *)__int128 __p = *(_OWORD *)(a1 + 24);
    uint64_t v23 = *(void *)(a1 + 40);
  }

  if (v2)
  {
    if (v2 == 1)
    {
      *(void *)std::string buf = _NSConcreteStackBlock;
      uint64_t v28 = 3221225472LL;
      uint64_t v29 = sub_1000612A0;
      uint64_t v30 = &unk_100128A10;
      uint64_t v31 = a1;
      sub_10004FC38(buf);
    }

    else if (v2 == 2)
    {
      uint64_t v3 = *(void *)a1;
      id v4 = (__int128 *)sub_100005064(buf, "com.apple.coreanalytics.heartbeat.1day");
      sub_100072258(v4, v26);
      (*(void (**)(uint64_t, _BYTE *))(*(void *)v3 + 16LL))(v3, v26);
      uint64_t v5 = *(std::__shared_weak_count **)&v26[8];
      if (*(void *)&v26[8])
      {
        unint64_t v6 = (unint64_t *)(*(void *)&v26[8] + 8LL);
        do
          unint64_t v7 = __ldaxr(v6);
        while (__stlxr(v7 - 1, v6));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }

      if (SHIBYTE(v29) < 0) {
        operator delete(*(void **)buf);
      }
    }
  }

  else
  {
    __int128 v8 = (os_log_s *)qword_1001318E8;
    if (os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "=== Two Hour Timer fired.", buf, 2u);
    }

    unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v25 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    sub_100003248((uint64_t)&v24);
    dispatch_group_t v9 = (os_log_s *)(id)qword_100131970;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      sub_100006200((uint64_t)&v24, -1, 0x20u, 0LL, 1, buf);
      __int128 v10 = SHIBYTE(v29) >= 0 ? buf : *(uint8_t **)buf;
      *(_DWORD *)unint64_t v26 = 136446466;
      *(void *)&v26[4] = "com.apple.coreanalytics.heartbeat.2hours";
      *(_WORD *)&v26[12] = 2080;
      *(void *)&v26[14] = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%{public}s %s", v26, 0x16u);
      if (SHIBYTE(v29) < 0) {
        operator delete(*(void **)buf);
      }
    }

    uint64_t v11 = *(void *)a1;
    __int128 v12 = (__int128 *)sub_100005064(buf, "com.apple.coreanalytics.heartbeat.2hours");
    sub_1000723B4(v12, (uint64_t)&v24, v26);
    (*(void (**)(uint64_t, _BYTE *))(*(void *)v11 + 16LL))(v11, v26);
    uint64_t v13 = *(std::__shared_weak_count **)&v26[8];
    if (*(void *)&v26[8])
    {
      uint64_t v14 = (unint64_t *)(*(void *)&v26[8] + 8LL);
      do
        unint64_t v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }

    if (SHIBYTE(v29) < 0) {
      operator delete(*(void **)buf);
    }
    sub_100005064(buf, "analyticsd");
    unint64_t v16 = objc_opt_new(&OBJC_CLASS___NSDictionary);
    sub_100096430((uint64_t)buf, 1001, 1001, v16);

    if (SHIBYTE(v29) < 0) {
      operator delete(*(void **)buf);
    }
    *(void *)unint64_t v26 = OSAStateMonitorEventCA2HrHeartbeatStartTimestampKey;
    if (v23 >= 0) {
      id v17 = __p;
    }
    else {
      id v17 = (void **)__p[0];
    }
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v17));
    *(void *)std::string buf = v18;
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  buf,  v26,  1LL));
    +[OSAStateMonitor recordEvent:with:]( &OBJC_CLASS___OSAStateMonitor,  "recordEvent:with:",  OSAStateMonitorEventCA2HrHeartbeat,  v19);

    sub_1000041AC((uint64_t)&v24);
    sub_10000425C(&v25, v24);
  }

  if (SHIBYTE(v23) < 0) {
    operator delete(__p[0]);
  }
  return sub_100060D4C(&v21);
}

void sub_100061160( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, unsigned __int8 a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  sub_1000041AC((uint64_t)&a18);
  sub_10000425C((uint64_t **)&a19, a18);
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_100060D4C(&a10);
  _Unwind_Resume(a1);
}

void sub_1000612A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = **(void **)(a1 + 32);
  sub_100005064(__p, "com.apple.coreanalytics.appUsage");
  sub_1000723B4((__int128 *)__p, a2, &v9);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v3 + 16LL))(v3, &v9);
  id v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      unint64_t v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  if (v8 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100061378( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1000613AC(id *a1)
{
  if (a1)
  {
    int v2 = sub_1000601BC(a1);
    operator delete(v2);
  }

void sub_1000613E8(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    uint64_t v3 = sub_1000601BC(v1);
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void sub_100061404(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

void sub_100061410()
{
  char v0 = objc_autoreleasePoolPush();
  sub_100005064(qword_100131798, "primaryNetworkInterface");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_100131798, (void *)&_mh_execute_header);
  sub_100005064(qword_1001317B0, "wiFiRadioTech");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1001317B0, (void *)&_mh_execute_header);
  sub_100005064(qword_1001317C8, "wiFiLQM");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1001317C8, (void *)&_mh_execute_header);
  sub_100005064(qword_1001317E0, "wirelessTrialIdentifier");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1001317E0, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

void sub_100061818( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_100061A20( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, objc_super a11)
{
  a11.super_class = (Class)&OBJC_CLASS___TrialStateRelay;
  -[_Unwind_Exception dealloc](&a11, "dealloc");
  _Unwind_Resume(a1);
}

void sub_100061BF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100061DC4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_100061E30(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained refreshTrialState:*(void *)(a1 + 32)];
}

void sub_100061E6C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_100061F88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100062200( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20, char a21, char a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28, void *a29, uint64_t a30, int a31, __int16 a32, char a33, char a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }

  if (a22 < 0) {
    operator delete(a17);
  }
  if (a28 < 0) {
    operator delete(a23);
  }

  if (a34 < 0) {
    operator delete(a29);
  }

  _Unwind_Resume(a1);
}

void *sub_100062340(void *result, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  uint64_t v6 = a2[1];
  *double result = *a2;
  result[1] = v6;
  if (v6)
  {
    unint64_t v7 = (unint64_t *)(v6 + 8);
    do
      unint64_t v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }

  uint64_t v9 = a3[1];
  result[2] = *a3;
  result[3] = v9;
  if (v9)
  {
    __int128 v10 = (unint64_t *)(v9 + 8);
    do
      unint64_t v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }

  uint64_t v12 = a4[1];
  result[4] = *a4;
  result[5] = v12;
  if (v12)
  {
    uint64_t v13 = (unint64_t *)(v12 + 8);
    do
      unint64_t v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }

  uint64_t v15 = a6[1];
  result[6] = *a6;
  result[7] = v15;
  if (v15)
  {
    unint64_t v16 = (unint64_t *)(v15 + 8);
    do
      unint64_t v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }

  uint64_t v18 = a5[1];
  result[8] = *a5;
  result[9] = v18;
  if (v18)
  {
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v19 = (unint64_t *)(v18 + 8);
    do
      unint64_t v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }

  return result;
}

void sub_1000623E8(uint64_t *a1)
{
  int v2 = (os_log_s *)qword_1001318F0;
  if (os_log_type_enabled((os_log_t)qword_1001318F0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Emitting CA meta pre-rollover events", buf, 2u);
  }

  uint64_t v3 = *a1;
  id v4 = (__int128 *)sub_100005064(buf, "com.apple.coreanalytics.meta.preRollover");
  sub_100072258(v4, &v25);
  (*(void (**)(uint64_t, uint64_t **))(*(void *)v3 + 24LL))(v3, &v25);
  uint64_t v5 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      unint64_t v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  if (v34 < 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v8 = *a1;
  sub_100005064(__p, "com.apple.coreanalytics.meta.Telemetry");
  sub_10002376C(a1[2], 1, buf);
  uint64_t v9 = a1[4] + *(void *)(*(void *)a1[4] - 88LL);
  (*(void (**)(uint64_t **__return_ptr, uint64_t, uint64_t))(*(void *)v9 + 48LL))(&v25, v9, 1LL);
  uint64_t v10 = a1[8] + *(void *)(*(void *)a1[8] - 88LL);
  (*(void (**)(uint64_t **__return_ptr, uint64_t, uint64_t))(*(void *)v10 + 48LL))(&v23, v10, 1LL);
  sub_10000F13C((int *)buf, &v25, &v23, (uint64_t)v27);
  sub_1000723B4((__int128 *)__p, (uint64_t)v27, &v31);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v8 + 24LL))(v8, &v31);
  unint64_t v11 = v32;
  if (v32)
  {
    uint64_t v12 = (unint64_t *)&v32->__shared_owners_;
    do
      unint64_t v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  sub_1000041AC((uint64_t)v27);
  sub_10000425C(&v28, v27[0]);
  if (v30 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v14 = *a1;
  sub_100005064(buf, "com.apple.coreanalytics.systemUptime");
  sub_10000E92C((uint64_t)&v23);
  sub_1000723B4((__int128 *)buf, (uint64_t)&v23, &v25);
  (*(void (**)(uint64_t, uint64_t **))(*(void *)v14 + 24LL))(v14, &v25);
  uint64_t v15 = v26;
  if (v26)
  {
    unint64_t v16 = (unint64_t *)&v26->__shared_owners_;
    do
      unint64_t v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

  sub_1000041AC((uint64_t)&v23);
  sub_10000425C(&v24, v23);
  if (v34 < 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v18 = (os_log_s *)qword_1001318F0;
  if (os_log_type_enabled((os_log_t)qword_1001318F0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Emitting IOReporter pre-rollover events",  buf,  2u);
  }

  sub_100062874((uint64_t)a1);
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v19 = (os_log_s *)qword_1001318F0;
  if (os_log_type_enabled((os_log_t)qword_1001318F0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Emitting AppUsage pre-rollover events",  buf,  2u);
  }

  v22[0] = _NSConcreteStackBlock;
  v22[1] = 0x40000000LL;
  v22[2] = sub_1000629BC;
  _OWORD v22[3] = &unk_100128A68;
  v22[4] = a1;
  if (!sub_10004FC38(v22)) {
    sub_100050DFC();
  }
  unint64_t v20 = (os_log_s *)qword_1001318F0;
  if (os_log_type_enabled((os_log_t)qword_1001318F0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Emitting Trial pre-rollover events", buf, 2u);
  }

  v21[0] = _NSConcreteStackBlock;
  v21[1] = 0x40000000LL;
  v21[2] = sub_100062AC8;
  v21[3] = &unk_100128A88;
  v21[4] = a1;
  sub_1000900A8(v21);
}

void sub_1000627E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v14 = va_arg(va1, uint64_t *);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  sub_100007004((uint64_t)va1);
  sub_10000417C((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_100062874(uint64_t a1)
{
  uint64_t v10 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v11 = 0xAAAAAAAAAAAAAAAALL;
  sub_10007135C(&v10);
  sub_1000713EC(v10);
  uint64_t v2 = *(void *)(a1 + 32);
  sub_100005064(__p, "ioreporter");
  v12[0] = &off_100128AB8;
  v12[1] = &v10;
  _OWORD v12[2] = a1;
  unint64_t v13 = v12;
  (*(void (**)(uint64_t, void **, void *))(*(void *)v2 + 192LL))(v2, __p, v12);
  uint64_t v3 = v13;
  if (v13 == v12)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v12;
  }

  else
  {
    if (!v13) {
      goto LABEL_6;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v5 = (std::__shared_weak_count *)v11;
  if (v11)
  {
    uint64_t v6 = (unint64_t *)(v11 + 8);
    do
      unint64_t v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

void sub_10006299C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void sub_1000629BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = **(void **)(a1 + 32);
  sub_100005064(__p, "com.apple.coreanalytics.appUsage");
  sub_1000723B4((__int128 *)__p, a2, &v9);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v3 + 24LL))(v3, &v9);
  uint64_t v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      unint64_t v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  if (v8 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100062A94( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100062AC8(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v4 = **(void **)(a1 + 32);
  sub_100005064(__p, a2);
  sub_1000723B4((__int128 *)__p, a3, &v10);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v4 + 24LL))(v4, &v10);
  uint64_t v5 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  if (v9 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100062B94( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 sub_100062BD0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &off_100128AB8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + _Block_object_dispose(va, 8) = result;
  return result;
}

__n128 sub_100062C08(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_100128AB8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + _Block_object_dispose(va, 8) = result;
  return result;
}

void sub_100062C28(uint64_t a1, char **a2, char **a3, const char **a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  unint64_t v106 = *a4;
  if (v5)
  {
    unint64_t v7 = *(void **)(a1 + 16);
    memset(v105, 170, sizeof(v105));
    sub_100005064(v105, v5);
    if (SHIBYTE(v105[2]) < 0)
    {
      if (v105[1] == (void *)10)
      {
        char v9 = (void **)v105[0];
        if (*(void *)v105[0] != 0x6C6143746E657665LL || *((_WORD *)v105[0] + 4) != 29548)
        {
LABEL_16:
          std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v19 = *v9;
          int v20 = *((unsigned __int16 *)v9 + 4);
          unint64_t v103 = 0xAAAAAAAAAAAAAAAALL;
          unint64_t v104 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
          *((void *)&v118 + 1) = 0LL;
          sub_100026984(&v106, (uint64_t)buf, 1, &v103);
          unint64_t v25 = (uint8_t *)*((void *)&v118 + 1);
          if (*((uint8_t **)&v118 + 1) == buf)
          {
            uint64_t v26 = 4LL;
            unint64_t v25 = buf;
          }

          else
          {
            if (!*((void *)&v118 + 1)) {
              goto LABEL_68;
            }
            uint64_t v26 = 5LL;
          }

          (*(void (**)(void))(*(void *)v25 + 8 * v26))();
LABEL_68:
          uint64_t v51 = v103;
          if (!(_BYTE)v103) {
            goto LABEL_74;
          }
          if (v103 == 1)
          {
            uint64_t v52 = v104[2];
          }

          else
          {
            uint64_t v52 = (v104[1] - *v104) >> 4;
          }

          if (v52 != 1)
          {
LABEL_74:
            __int128 v53 = (os_log_s *)qword_1001318F0;
            if (os_log_type_enabled((os_log_t)qword_1001318F0, OS_LOG_TYPE_INFO))
            {
              if ((_DWORD)v51)
              {
                if ((_DWORD)v51 == 1)
                {
                  uint64_t v51 = v104[2];
                }

                else if ((_DWORD)v51 == 2)
                {
                  uint64_t v51 = (v104[1] - *v104) >> 4;
                }

                else
                {
                  uint64_t v51 = 1LL;
                }
              }

              *(_DWORD *)std::string buf = 134217984;
              *(void *)&uint8_t buf[4] = v51;
              _os_log_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_INFO,  "[IOReporter] WARNING: expression type event config length != 1: %lu",  buf,  0xCu);
            }
          }

LABEL_82:
          int v121 = -1431655766;
          *(_OWORD *)std::string buf = 0u;
          __int128 v118 = 0u;
          __int128 v119 = 0u;
          memset(v120, 0, sizeof(v120));
          sub_100025178(&v120[8], *(uint64_t **)(a1 + 8));
          sub_100005064(v110, v4);
          sub_100072258((__int128 *)v110, v107);
          uint64_t v54 = *(void *)&buf[8];
          if (*(void *)&buf[8] >= (unint64_t)v118)
          {
            uint64_t v55 = (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 4;
            unint64_t v56 = v55 + 1;
            uint64_t v57 = v118 - *(void *)buf;
            else {
              unint64_t v58 = v56;
            }
            unint64_t v97 = &v118;
            __int128 v59 = (char *)sub_1000047F4((uint64_t)&v118, v58);
            unint64_t v61 = &v59[16 * v55];
            *(_OWORD *)unint64_t v61 = *(_OWORD *)v107;
            *(void *)int v107 = 0LL;
            *(void *)&v107[8] = 0LL;
            uint64_t v63 = *(void **)buf;
            __int128 v62 = *(void **)&buf[8];
            if (*(void *)&buf[8] == *(void *)buf)
            {
              int64x2_t v66 = vdupq_n_s64(*(unint64_t *)&buf[8]);
              unint64_t v64 = &v59[16 * v55];
            }

            else
            {
              unint64_t v64 = &v59[16 * v55];
              do
              {
                __int128 v65 = *((_OWORD *)v62 - 1);
                v62 -= 2;
                *((_OWORD *)v64 - 1) = v65;
                v64 -= 16;
                void *v62 = 0LL;
                v62[1] = 0LL;
              }

              while (v62 != v63);
              int64x2_t v66 = *(int64x2_t *)buf;
            }

            unint64_t v67 = v61 + 16;
            *(void *)std::string buf = v64;
            *(void *)&uint8_t buf[8] = v61 + 16;
            int64x2_t v95 = v66;
            uint64_t v68 = v118;
            *(void *)&__int128 v118 = &v59[16 * v60];
            uint64_t v96 = v68;
            unint64_t v94 = (unsigned __int8 *)v66.i64[0];
            sub_10003AAA8((uint64_t)&v94);
            unint64_t v69 = *(std::__shared_weak_count **)&v107[8];
            *(void *)&uint8_t buf[8] = v67;
            if (*(void *)&v107[8])
            {
              int64x2_t v70 = (unint64_t *)(*(void *)&v107[8] + 8LL);
              do
                unint64_t v71 = __ldaxr(v70);
              while (__stlxr(v71 - 1, v70));
              if (!v71)
              {
                ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                std::__shared_weak_count::__release_weak(v69);
              }
            }
          }

          else
          {
            **(_OWORD **)&uint8_t buf[8] = *(_OWORD *)v107;
            *(void *)int v107 = 0LL;
            *(void *)&v107[8] = 0LL;
            *(void *)&uint8_t buf[8] = v54 + 16;
          }

          if (SBYTE7(v111) < 0) {
            operator delete(v110[0]);
          }
          unint64_t v72 = (void **)v7[6];
          unint64_t v73 = (_BYTE *)sub_1000182F4((unsigned __int8 *)&v103, 0LL);
          sub_1000B0590(v72, (uint64_t)buf, v73);
          __int128 v74 = (void *)*((void *)&v118 + 1);
          if (**((_BYTE **)&v118 + 1) == 2)
          {
            unint64_t v94 = (unsigned __int8 *)*((void *)&v118 + 1);
            int64x2_t v95 = 0uLL;
            uint64_t v96 = 0LL;
            unint64_t v97 = (__int128 *)0x8000000000000000LL;
            sub_100021128(&v94);
            v110[0] = v74;
            v110[1] = 0LL;
            __int128 v111 = 0uLL;
            *(void *)&__int128 v112 = 0x8000000000000000LL;
            sub_1000211FC((unsigned __int8 **)v110);
            while (!sub_10001855C(&v94, (unsigned __int8 **)v110))
            {
              unint64_t v75 = sub_100018150(&v94);
              char v76 = (os_log_s *)qword_100131900;
              if (os_log_type_enabled((os_log_t)qword_100131900, OS_LOG_TYPE_DEBUG))
              {
                sub_100006200((uint64_t)v75, -1, 0x20u, 0LL, 1, v107);
                __int128 v81 = v107[23] >= 0 ? v107 : *(_BYTE **)v107;
                *(_DWORD *)id v115 = 136315394;
                *(void *)&v115[4] = v4;
                *(_WORD *)&v115[12] = 2080;
                *(void *)&v115[14] = v81;
                _os_log_debug_impl( (void *)&_mh_execute_header,  v76,  OS_LOG_TYPE_DEBUG,  "[IOReporter] Event: %s %s",  v115,  0x16u);
                if ((v107[23] & 0x80000000) != 0) {
                  operator delete(*(void **)v107);
                }
              }

              uint64_t v77 = *v7;
              sub_100005064(v107, v4);
              sub_1000723B4((__int128 *)v107, (uint64_t)v75, v115);
              (*(void (**)(uint64_t, _BYTE *))(*(void *)v77 + 24LL))(v77, v115);
              __int128 v78 = *(std::__shared_weak_count **)&v115[8];
              if (*(void *)&v115[8])
              {
                char v79 = (unint64_t *)(*(void *)&v115[8] + 8LL);
                do
                  unint64_t v80 = __ldaxr(v79);
                while (__stlxr(v80 - 1, v79));
                if (!v80)
                {
                  ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                  std::__shared_weak_count::__release_weak(v78);
                }
              }

              if ((v107[23] & 0x80000000) != 0) {
                operator delete(*(void **)v107);
              }
              sub_100018704(&v94);
            }
          }

          else
          {
            unsigned __int8 v82 = (os_log_s *)qword_1001318F0;
            if (os_log_type_enabled((os_log_t)qword_1001318F0, OS_LOG_TYPE_ERROR)) {
              sub_1000D950C(v82, v83, v84, v85, v86, v87, v88, v89);
            }
          }

          unint64_t v90 = *(std::__shared_weak_count **)&v120[16];
          if (*(void *)&v120[16])
          {
            uint64_t v91 = (unint64_t *)(*(void *)&v120[16] + 8LL);
            do
              unint64_t v92 = __ldaxr(v91);
            while (__stlxr(v92 - 1, v91));
            if (!v92)
            {
              ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
              std::__shared_weak_count::__release_weak(v90);
            }
          }

          unint64_t v94 = (unsigned __int8 *)&v118 + 8;
          sub_100004D64((void ***)&v94);
          unint64_t v94 = buf;
          sub_1000100E4((void ***)&v94);
LABEL_127:
          sub_1000041AC((uint64_t)&v103);
          sub_10000425C(&v104, v103);
LABEL_128:
          if (SHIBYTE(v105[2]) < 0) {
            operator delete(v105[0]);
          }
          return;
        }

void sub_100063588( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25, void *a26, uint64_t a27, int a28, __int16 a29, char a30, char a31, uint64_t a32, unsigned __int8 a33, uint64_t a34, void *a35, uint64_t a36, int a37, __int16 a38, char a39, char a40, uint64_t a41, uint64_t a42, std::__shared_weak_count *a43, int a44, __int16 a45, char a46, char a47, uint64_t a48, uint64_t a49, uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  unint64_t v64 = a43;
  if (a43)
  {
    p_shared_owners = (unint64_t *)&a43->__shared_owners_;
    do
      unint64_t v66 = __ldaxr(p_shared_owners);
    while (__stlxr(v66 - 1, p_shared_owners));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }

  if (a56 < 0) {
    operator delete(__p);
  }
  unint64_t v67 = *(std::__shared_weak_count **)(v62 - 144);
  if (v67)
  {
    uint64_t v68 = (unint64_t *)&v67->__shared_owners_;
    do
      unint64_t v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }

  __int128 __p = (void *)(v62 - 184);
  sub_100004D64((void ***)&__p);
  __int128 __p = (void *)(v62 - 208);
  sub_1000100E4((void ***)&__p);
  sub_1000041AC((uint64_t)&a33);
  sub_10000425C((uint64_t **)&a34, a33);
  if (a40 < 0) {
    operator delete(a35);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000638B4(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

void (**sub_1000638F0())(std::__shared_weak_count *__hidden this, const std::type_info *)
{
}

uint64_t sub_1000638FC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  *(void *)&__int128 v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v6[0] = v4;
  v6[1] = v4;
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  sub_1000211B0(v6, v3);
  sub_100021128((unsigned __int8 **)v6);
  return sub_1000639FC(a2, (uint64_t)v6);
}

uint64_t sub_10006397C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  *(void *)&__int128 v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v6[0] = v4;
  v6[1] = v4;
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  sub_1000211B0(v6, v3);
  sub_1000211FC((unsigned __int8 **)v6);
  return sub_1000639FC(a2, (uint64_t)v6);
}

uint64_t sub_1000639FC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + memset(v15, 170, 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = v3;
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
  sub_100005064((void *)(a1 + 56), "0");
  sub_100005064((void *)(a1 + 80), "");
  return a1;
}

void *sub_100063A5C(void *result)
{
  *__n128 result = &off_100128B38;
  return result;
}

void *sub_100063A6C(void *a1)
{
  *a1 = &off_100128B38;
  sub_100063AA0((uint64_t)a1);
  return a1;
}

void sub_100063AA0(uint64_t a1)
{
  uint64_t v2 = *(__CFRunLoop **)(a1 + 8);
  if (v2)
  {
    __int128 v3 = *(__CFRunLoopSource **)(a1 + 16);
    if (v3) {
      CFRunLoopRemoveSource(v2, v3, kCFRunLoopDefaultMode);
    }
  }

  __int128 v4 = *(const void **)(a1 + 16);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 16) = 0LL;
  }

  io_object_t v5 = *(_DWORD *)(a1 + 40);
  if (v5)
  {
    IOObjectRelease(v5);
    *(_DWORD *)(a1 + 40) = 0;
  }

  io_object_t v6 = *(_DWORD *)(a1 + 44);
  if (v6)
  {
    IOObjectRelease(v6);
    *(_DWORD *)(a1 + 44) = 0;
  }

  mach_port_name_t v7 = *(_DWORD *)(a1 + 24);
  if (v7)
  {
    mach_port_deallocate(mach_task_self_, v7);
    *(_DWORD *)(a1 + memset(v15, 170, 24) = 0;
  }

  char v8 = *(const void **)(a1 + 48);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
  }

uint64_t sub_100063B40(uint64_t a1, uint64_t a2)
{
  CFMutableDictionaryRef v4 = IOServiceMatching("CoreAnalyticsHub");
  uint64_t v5 = sub_100063B98(a1, a2, v4);
  CFRelease(v4);
  return v5;
}

uint64_t sub_100063B98(uint64_t a1, uint64_t a2, const void *a3)
{
  io_object_t v6 = (os_log_s *)qword_100131968;
  if (os_log_type_enabled((os_log_t)qword_100131968, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "[KernelDriverMatch] configureNotificationsForMatchingDict",  buf,  2u);
  }

  *(_DWORD *)(a1 + memset(v15, 170, 24) = 0;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + _Block_object_dispose(va, 8) = a2;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  *(_BYTE *)(a1 + 56) = 0;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = a3;
  CFRetain(a3);
  if (IOMainPort(0, (mach_port_t *)(a1 + 24))
    || (mach_port_name_t v7 = IONotificationPortCreate(*(_DWORD *)(a1 + 24)), (*(void *)(a1 + 32) = v7) == 0LL)
    || (RunLoopSource = IONotificationPortGetRunLoopSource(v7), (*(void *)(a1 + 16) = RunLoopSource) == 0LL)
    || (CFRunLoopAddSource(*(CFRunLoopRef *)(a1 + 8), RunLoopSource, kCFRunLoopDefaultMode),
        CFRetain(*(CFTypeRef *)(a1 + 48)),
        IOServiceAddMatchingNotification( *(IONotificationPortRef *)(a1 + 32),  "IOServicePublish",  *(CFDictionaryRef *)(a1 + 48),  (IOServiceMatchingCallback)sub_100063D94,  (void *)a1,  (io_iterator_t *)(a1 + 40)))
    || (CFRetain(*(CFTypeRef *)(a1 + 48)),
        IOServiceAddMatchingNotification( *(IONotificationPortRef *)(a1 + 32),  "IOServiceTerminate",  *(CFDictionaryRef *)(a1 + 48),  (IOServiceMatchingCallback)sub_100063D98,  (void *)a1,  (io_iterator_t *)(a1 + 44))))
  {
    uint64_t v12 = (os_log_s *)qword_100131968;
    if (os_log_type_enabled((os_log_t)qword_100131968, OS_LOG_TYPE_ERROR)) {
      sub_1000D95E0(v12, v13, v14, v15, v16, v17, v18, v19);
    }
    sub_100063AA0(a1);
    return 0LL;
  }

  else
  {
    uint64_t v9 = 1LL;
    *(_BYTE *)(a1 + 56) = 1;
    uint64_t v10 = (os_log_s *)qword_100131968;
    if (os_log_type_enabled((os_log_t)qword_100131968, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int v20 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "[KernelDriverMatch] configureNotificationsForMatchingDict complete",  v20,  2u);
    }
  }

  return v9;
}

uint64_t sub_100063D9C(uint64_t a1)
{
  io_iterator_t existing = 0;
  uint64_t v2 = (os_log_s *)qword_100131968;
  if (os_log_type_enabled((os_log_t)qword_100131968, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "[KernelDriverMatch] scanServices", buf, 2u);
  }

  mach_port_t v3 = *(_DWORD *)(a1 + 24);
  if (v3)
  {
    if (!IOServiceGetMatchingServices(v3, *(CFDictionaryRef *)(a1 + 48), &existing))
    {
      sub_100063EEC((void (***)(void, uint64_t))a1, existing);
      CFMutableDictionaryRef v4 = (os_log_s *)qword_100131968;
      if (os_log_type_enabled((os_log_t)qword_100131968, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "[KernelDriverMatch] scanServices complete",  buf,  2u);
      }

      goto LABEL_7;
    }
  }

  else
  {
    io_object_t v6 = (os_log_s *)qword_100131968;
    if (os_log_type_enabled((os_log_t)qword_100131968, OS_LOG_TYPE_ERROR)) {
      sub_1000D9698(v6, v7, v8, v9, v10, v11, v12, v13);
    }
  }

  uint64_t v14 = (os_log_s *)qword_100131968;
  if (os_log_type_enabled((os_log_t)qword_100131968, OS_LOG_TYPE_ERROR)) {
    sub_1000D963C(v14, v15, v16, v17, v18, v19, v20, v21);
  }
LABEL_7:
  uint64_t result = existing;
  if (existing) {
    return IOObjectRelease(existing);
  }
  return result;
}

void sub_100063EEC(void (***a1)(void, uint64_t), io_iterator_t a2)
{
  CFMutableDictionaryRef v4 = (os_log_s *)qword_100131968;
  if (os_log_type_enabled((os_log_t)qword_100131968, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[KernelDriverMatch] CoreAnalyticsClient::servicesPublished...\n",  buf,  2u);
  }

  uint64_t v5 = IOIteratorNext(a2);
  if ((_DWORD)v5)
  {
    uint64_t v6 = v5;
    do
    {
      (**a1)(a1, v6);
      IOObjectRelease(v6);
      uint64_t v6 = IOIteratorNext(a2);
    }

    while ((_DWORD)v6);
  }

  uint64_t v7 = (os_log_s *)qword_100131968;
  if (os_log_type_enabled((os_log_t)qword_100131968, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[KernelDriverMatch] CoreAnalyticsClient::servicesPublished done\n",  v8,  2u);
  }

uint64_t sub_100064008(uint64_t a1, io_iterator_t iterator)
{
  uint64_t result = IOIteratorNext(iterator);
  if ((_DWORD)result)
  {
    uint64_t v5 = result;
    do
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 8LL))(a1, v5);
      IOObjectRelease(v5);
      uint64_t result = IOIteratorNext(iterator);
      uint64_t v5 = result;
    }

    while ((_DWORD)result);
  }

  return result;
}

uint64_t *sub_10006406C@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = operator new(0x88uLL);
  sub_1000640D4((uint64_t)v8, a1, a2, a3);
  return sub_1000652B0(a4, (uint64_t)v8);
}

uint64_t sub_1000640D4(uint64_t a1, uint64_t *a2, void *a3, void *a4)
{
  dispatch_queue_t v8 = dispatch_queue_create("analyticsd.ModifyEventManagerQueue", 0LL);
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + memset(v15, 170, 24) = v8;
  if (v8)
  {
    uint64_t v9 = v8;
    dispatch_retain(v8);
    dispatch_release(v9);
  }

  *(void *)a1 = off_100128B78;
  uint64_t v11 = *a2;
  uint64_t v10 = a2[1];
  *(void *)(a1 + 32) = off_100128BC0;
  *(void *)(a1 + 40) = v11;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = v10;
  if (v10)
  {
    uint64_t v12 = (unint64_t *)(v10 + 8);
    do
      unint64_t v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }

  uint64_t v14 = a3[1];
  *(void *)(a1 + 56) = *a3;
  *(void *)(a1 + 64) = v14;
  if (v14)
  {
    uint64_t v15 = (unint64_t *)(v14 + 8);
    do
      unint64_t v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }

  uint64_t v17 = a4[1];
  *(void *)(a1 + 72) = *a4;
  *(void *)(a1 + 80) = v17;
  if (v17)
  {
    uint64_t v18 = (unint64_t *)(v17 + 8);
    do
      unint64_t v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }

  *(_BYTE *)(a1 + 8_Block_object_dispose(va, 8) = 0;
  *(_BYTE *)(a1 + 12_Block_object_dispose(va, 8) = 0;
  return a1;
}

void sub_1000641B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 8;
  v4[0] = a1;
  v4[1] = a2;
  mach_port_t v3 = *(dispatch_queue_s **)(a1 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_1000653C0;
  block[3] = &unk_100128CB8;
  void block[4] = v2;
  void block[5] = v4;
  dispatch_sync(v3, block);
}

void sub_100064244(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 - 24;
  v4[0] = a1 - 32;
  v4[1] = a2;
  mach_port_t v3 = *(dispatch_queue_s **)(a1 - 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_1000653C0;
  block[3] = &unk_100128CB8;
  void block[4] = v2;
  void block[5] = v4;
  dispatch_sync(v3, block);
}

void sub_1000642D4(uint64_t a1@<X0>, dispatch_group_t *a2@<X8>)
{
  dispatch_group_t v4 = dispatch_group_create();
  uint64_t v5 = v4;
  *a2 = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v5);
  }

  unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000CF18(&v16, (void *)(a1 + 8));
  uint64_t v6 = operator new(0x10uLL);
  *uint64_t v6 = a1;
  v6[1] = v5;
  uint64_t v7 = *(dispatch_queue_s **)(a1 + 24);
  unint64_t v8 = v16;
  unint64_t v9 = v17;
  if (v17)
  {
    uint64_t v10 = (unint64_t *)(v17 + 8);
    do
      unint64_t v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }

  uint64_t v12 = operator new(0x18uLL);
  *uint64_t v12 = v6;
  v12[1] = v8;
  _OWORD v12[2] = v9;
  dispatch_async_f(v7, v12, (dispatch_function_t)sub_1000658C8);
  unint64_t v13 = (std::__shared_weak_count *)v17;
  if (v17)
  {
    uint64_t v14 = (unint64_t *)(v17 + 8);
    do
      unint64_t v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

void sub_1000643F4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

void sub_100064404(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1001318F8;
  if (os_log_type_enabled((os_log_t)qword_1001318F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "[ModifyEventManager] Reconfiguring modify event manager",  buf,  2u);
  }

  if (!*(_BYTE *)(a1 + 128))
  {
    sub_100065964((uint64_t)__p, 0x20000uLL, 0LL);
    sub_1000645E4(a1 + 88, (uint64_t)buf);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }

  mach_port_t v3 = *(void **)(a1 + 96);
  uint64_t v4 = *(void *)(a1 + 104) - (void)v3;
  if (v4 >= 1) {
    bzero(v3, 8 * (((unint64_t)v4 >> 3) - ((unint64_t)v4 > 7)) + 8);
  }
  uint64_t v5 = *(void *)(a1 + 40);
  sub_100005064(v8, "queried_states");
  *(void *)std::string buf = &off_100128D68;
  __p[0] = (void *)a1;
  uint64_t v12 = buf;
  (*(void (**)(uint64_t, void **, uint8_t *))(*(void *)v5 + 208LL))(v5, v8, buf);
  uint64_t v6 = v12;
  if (v12 == buf)
  {
    uint64_t v7 = 4LL;
    uint64_t v6 = buf;
  }

  else
  {
    if (!v12) {
      goto LABEL_14;
    }
    uint64_t v7 = 5LL;
  }

  (*(void (**)(void))(*(void *)v6 + 8 * v7))();
LABEL_14:
  if (v9 < 0) {
    operator delete(v8[0]);
  }
}

void sub_1000645B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_1000645E4(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 40);
  *(_WORD *)a1 = *(_WORD *)a2;
  if (v4)
  {
    if (a2 != a1)
    {
      uint64_t v5 = (_OWORD *)(a2 + 8);
      sub_100065B54(a1 + 8, (__n128 *)(a2 + 8));
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      uint64_t v6 = *(void **)(a2 + 8);
      if (v6)
      {
        *(void *)(a2 + 16) = v6;
        operator delete(v6);
      }

      _OWORD *v5 = 0u;
      *(_OWORD *)(a2 + memset(v15, 170, 24) = 0u;
    }
  }

  else
  {
    *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
    *(void *)(a1 + 16) = 0LL;
    *(void *)(a1 + memset(v15, 170, 24) = 0LL;
    *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = *(_OWORD *)(a2 + 8);
    uint64_t v7 = *(void *)(a2 + 32);
    *(void *)(a1 + memset(v15, 170, 24) = *(void *)(a2 + 24);
    *(void *)(a2 + _Block_object_dispose(va, 8) = 0LL;
    *(void *)(a2 + 16) = 0LL;
    *(void *)(a2 + memset(v15, 170, 24) = 0LL;
    *(void *)(a1 + 32) = v7;
    *(_OWORD *)(a2 + memset(v15, 170, 24) = 0u;
    *(_OWORD *)(a2 + _Block_object_dispose(va, 8) = 0u;
    *(_BYTE *)(a1 + 40) = 1;
  }

  return a1;
}

uint64_t sub_100064694(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 8);
  mach_port_t v3 = *v2;
  if (*v2)
  {
    *(void *)(a1 + 16) = v3;
    operator delete(v3);
  }

  return a1;
}

void sub_1000646FC(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  int v4 = (void *)a3;
  int v6 = *(char *)(a3 + 23);
  if (v6 < 0)
  {
    if (*(void *)(a3 + 8) != 13LL)
    {
      unint64_t v8 = (os_log_s *)qword_1001318F8;
      if (!os_log_type_enabled((os_log_t)qword_1001318F8, OS_LOG_TYPE_ERROR)) {
        return;
      }
LABEL_15:
      int v4 = (void *)*v4;
LABEL_16:
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v4;
      _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "[ModifyEventManager] ERROR: Invalid defType for queried state: %s",  buf,  0xCu);
      return;
    }

    uint64_t v7 = *(uint64_t **)a3;
  }

  else
  {
    uint64_t v7 = (uint64_t *)a3;
    if (v6 != 13)
    {
      unint64_t v8 = (os_log_s *)qword_1001318F8;
      if (!os_log_type_enabled((os_log_t)qword_1001318F8, OS_LOG_TYPE_ERROR)) {
        return;
      }
      goto LABEL_16;
    }
  }

  uint64_t v9 = *v7;
  uint64_t v10 = *(uint64_t *)((char *)v7 + 5);
  if (v9 != 0x6572707865627573LL || v10 != 0x6E6F697373657270LL)
  {
    unint64_t v8 = (os_log_s *)qword_1001318F8;
    if (!os_log_type_enabled((os_log_t)qword_1001318F8, OS_LOG_TYPE_ERROR)) {
      return;
    }
    if ((v6 & 0x80000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }

  unint64_t v44 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v45 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v67 = 0LL;
  sub_100055628(a4, (uint64_t)buf, 1, &v44);
  uint64_t v12 = (void *)v67;
  if ((_BYTE *)v67 == buf)
  {
    uint64_t v13 = 4LL;
    uint64_t v12 = buf;
  }

  else
  {
    if (!(void)v67) {
      goto LABEL_22;
    }
    uint64_t v13 = 5LL;
  }

  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_22:
  v43[0] = (unsigned __int8 *)&v44;
  memset(&v43[1], 0, 24);
  v43[4] = (unsigned __int8 *)0x8000000000000000LL;
  sub_100021128(v43);
  v42[0] = (unsigned __int8 *)&v44;
  memset(&v42[1], 0, 24);
  uint8_t v42[4] = (unsigned __int8 *)0x8000000000000000LL;
  sub_1000211FC(v42);
  while (!sub_10001855C(v43, v42))
  {
    uint64_t v14 = sub_100018150(v43);
    unint64_t v40 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v41 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    unint64_t v15 = (void **)a1[9];
    unint64_t v16 = (__int128 *)sub_100005064(buf, "");
    sub_100072258(v16, v58);
    uint64_t v17 = a1[8];
    uint64_t v52 = (unsigned __int8 *)a1[7];
    *(void *)&__int128 v53 = v17;
    if (v17)
    {
      uint64_t v18 = (unint64_t *)(v17 + 8);
      do
        unint64_t v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }

    sub_1000B07BC(v15, v58, (uint64_t *)&v52, v14, (uint64_t)&v40);
    uint64_t v20 = (std::__shared_weak_count *)v53;
    if ((void)v53)
    {
      uint64_t v21 = (unint64_t *)(v53 + 8);
      do
        unint64_t v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }

    uint64_t v23 = (std::__shared_weak_count *)*((void *)&v58[0] + 1);
    if (*((void *)&v58[0] + 1))
    {
      uint64_t v24 = (unint64_t *)(*((void *)&v58[0] + 1) + 8LL);
      do
        unint64_t v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }

    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    v38[0] = v40;
    __int128 v39 = v41;
    sub_1000041AC((uint64_t)&v40);
    LOBYTE(v40) = 0;
    unint64_t v41 = 0LL;
    sub_1000041AC((uint64_t)v38);
    if (v38[0] == 1)
    {
      uint64_t v63 = v38;
      sub_1000638FC((uint64_t *)&v63, (uint64_t)buf);
      sub_10006397C((uint64_t *)&v63, (uint64_t)v58);
      while (!sub_10001855C((unsigned __int8 **)buf, (unsigned __int8 **)v58))
      {
        *(void *)&__int128 v26 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v26 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)uint64_t v57 = v26;
        *(_OWORD *)&v57[16] = v26;
        __int128 v56 = v26;
        uint64_t v52 = *(unsigned __int8 **)buf;
        __int128 v53 = *(_OWORD *)&buf[8];
        __int128 v54 = v67;
        __int128 v55 = v68;
        if (SHIBYTE(v70) < 0)
        {
          sub_10000B8BC(&v56, (void *)v69, *((unint64_t *)&v69 + 1));
        }

        else
        {
          __int128 v56 = v69;
          *(void *)uint64_t v57 = v70;
        }

        if (SHIBYTE(v72) < 0)
        {
          sub_10000B8BC(&v57[8], (void *)v71, *((unint64_t *)&v71 + 1));
        }

        else
        {
          *(_OWORD *)&unsigned __int8 v57[8] = v71;
          *(void *)&v57[24] = v72;
        }

        unint64_t v50 = 0xAAAAAAAAAAAAAAAALL;
        uint64_t v51 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
        uint64_t v27 = sub_100018150(&v52);
        sub_10000C3E4((uint64_t)&v50, (uint64_t)v27);
        uint64_t v28 = *a2;
        int64_t v29 = (const void **)sub_1000650C4(&v52);
        sub_10006505C(v28 + 40, v29, (uint64_t)v49);
        unint64_t v30 = (unsigned __int8 *)(*a2 + 40LL);
        memset(&v48[1], 0, 24);
        v48[0] = v30;
        v48[4] = (unsigned __int8 *)0x8000000000000000LL;
        sub_1000211FC(v48);
        if (!sub_10001855C(v49, v48))
        {
          sub_1000041AC((uint64_t)&v50);
          sub_10000425C(&v51, v50);
          if ((v57[31] & 0x80000000) != 0) {
            operator delete(*(void **)&v57[8]);
          }
          if ((v57[7] & 0x80000000) != 0) {
            operator delete((void *)v56);
          }
          break;
        }

        v46[0] = v50;
        std::stringbuf::string_type v47 = v51;
        sub_1000041AC((uint64_t)&v50);
        LOBYTE(v50) = 0;
        uint64_t v51 = 0LL;
        sub_1000041AC((uint64_t)v46);
        uint64_t v31 = *a2;
        unint64_t v32 = (const void **)sub_1000650C4(&v52);
        __int128 v33 = sub_1000304A4((unsigned __int8 *)(v31 + 40), v32);
        sub_1000041AC((uint64_t)v46);
        char v34 = *(_BYTE *)v33;
        *(_BYTE *)__int128 v33 = v46[0];
        v46[0] = v34;
        unint64_t v35 = (uint64_t *)v33[1];
        v33[1] = (uint64_t)v47;
        std::stringbuf::string_type v47 = v35;
        sub_1000041AC((uint64_t)v33);
        sub_1000041AC((uint64_t)v46);
        sub_10000425C(&v47, v46[0]);
        sub_1000041AC((uint64_t)&v50);
        sub_10000425C(&v51, v50);
        if ((v57[31] & 0x80000000) != 0) {
          operator delete(*(void **)&v57[8]);
        }
        if ((v57[7] & 0x80000000) != 0) {
          operator delete((void *)v56);
        }
        sub_100018704((unsigned __int8 **)buf);
        *(void *)&__int128 v68 = v68 + 1;
      }

      if (v62 < 0) {
        operator delete(v61);
      }
      if (v60 < 0) {
        operator delete(v59);
      }
      if (SHIBYTE(v72) < 0) {
        operator delete((void *)v71);
      }
      if (SHIBYTE(v70) < 0) {
        operator delete((void *)v69);
      }
    }

    else
    {
      __int128 v36 = (os_log_s *)qword_1001318F8;
      if (os_log_type_enabled((os_log_t)qword_1001318F8, OS_LOG_TYPE_ERROR)) {
        sub_1000D96F4(&v64, v65, v36);
      }
    }

    sub_1000041AC((uint64_t)v38);
    sub_10000425C(&v39, v38[0]);
    sub_1000041AC((uint64_t)&v40);
    sub_10000425C(&v41, v40);
    sub_100018704(v43);
  }

  sub_1000041AC((uint64_t)&v44);
  sub_10000425C(&v45, v44);
}

void sub_100064D78( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, char a32, uint64_t a33)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __int128 v36 = *(void **)(v33 - 184);
  if (v36 == (void *)(v33 - 208))
  {
    uint64_t v37 = 4LL;
    __int128 v36 = (void *)(v33 - 208);
  }

  else
  {
    if (!v36) {
      goto LABEL_7;
    }
    uint64_t v37 = 5LL;
  }

  (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_7:
  if (a2 == 2)
  {
    __cxa_begin_catch(a1);
    a32 = 0;
    a33 = 0LL;
    sub_1000041AC((uint64_t)&a32);
    sub_1000041AC((uint64_t)&a32);
    __cxa_end_catch();
    JUMPOUT(0x100064888LL);
  }

  sub_1000045D0(a1);
}

void *sub_100064E7C(void *a1)
{
  *a1 = off_100128B78;
  a1[4] = off_100128BC0;
  sub_100065240((uint64_t)(a1 + 11));
  sub_100007004((uint64_t)(a1 + 9));
  sub_100007004((uint64_t)(a1 + 7));
  sub_100007004((uint64_t)(a1 + 5));
  sub_100022C54((uint64_t)(a1 + 1));
  return a1;
}

void sub_100064ED8(void *a1)
{
  *a1 = off_100128B78;
  a1[4] = off_100128BC0;
  sub_100065240((uint64_t)(a1 + 11));
  sub_100007004((uint64_t)(a1 + 9));
  sub_100007004((uint64_t)(a1 + 7));
  sub_100007004((uint64_t)(a1 + 5));
  sub_100022C54((uint64_t)(a1 + 1));
  operator delete(a1);
}

uint64_t sub_100064F34(void *a1)
{
  *(a1 - 4) = off_100128B78;
  *a1 = off_100128BC0;
  sub_100065240((uint64_t)(a1 + 7));
  sub_100007004((uint64_t)(a1 + 5));
  sub_100007004((uint64_t)(a1 + 3));
  sub_100007004((uint64_t)(a1 + 1));
  return sub_100022C54((uint64_t)(a1 - 3));
}

void sub_100064F84(void *a1)
{
  *(a1 - 4) = off_100128B78;
  uint64_t v2 = a1 - 4;
  *a1 = off_100128BC0;
  uint64_t v3 = (uint64_t)(a1 - 3);
  sub_100065240((uint64_t)(a1 + 7));
  sub_100007004((uint64_t)(a1 + 5));
  sub_100007004((uint64_t)(a1 + 3));
  sub_100007004((uint64_t)(a1 + 1));
  sub_100022C54(v3);
  operator delete(v2);
}

BOOL sub_100064FF0(uint64_t *a1)
{
  unint64_t v1 = a1[3];
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = v1 & 0x3F;
  if ((v1 & 0x3F) != 0)
  {
    if (v3 == v2) {
      sub_1000D9730();
    }
    if (*(void *)(v3 - 8) >> v4) {
      return 0LL;
    }
  }

  unint64_t v5 = (v3 - v2) >> 3;
  if (v5 > (a1[2] - v2) >> 3) {
    return 0LL;
  }
  unint64_t v7 = v1 >> 6;
  if (v4) {
    ++v7;
  }
  return v5 == v7;
}

uint64_t sub_10006505C@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 32) = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)a3 = v6;
  *(_OWORD *)(a3 + 16) = v6;
  unint64_t v7 = (unsigned __int8 **)sub_1000211B0((void *)a3, a1);
  uint64_t result = (uint64_t)sub_1000211FC(v7);
  if (*(_BYTE *)a1 == 1)
  {
    uint64_t result = sub_10003CF38(*(void *)(a1 + 8), a2);
    *(void *)(a3 + _Block_object_dispose(va, 8) = result;
  }

  return result;
}

uint64_t sub_1000650C4(unsigned __int8 **a1)
{
  if (!*a1) {
    sub_1000D90F8();
  }
  int v2 = **a1;
  if (v2 == 1) {
    return sub_100065138(a1);
  }
  if (v2 != 2) {
    return (uint64_t)(a1 + 10);
  }
  unint64_t v3 = (unint64_t)a1[5];
  if ((unsigned __int8 *)v3 != a1[6])
  {
    sub_10005A318((uint64_t)(a1 + 7), v3);
    a1[6] = a1[5];
  }

  return (uint64_t)(a1 + 7);
}

uint64_t sub_100065138(void *a1)
{
  if (!*a1) {
    sub_1000D90D0();
  }
  if (*(_BYTE *)*a1 != 1)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    sub_100005064(v3, "cannot use key() for non-object iterators");
    sub_100008C0C(207, (uint64_t)v3, exception);
  }

  return a1[1] + 32LL;
}

void sub_100065200( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }

  else if (!v15)
  {
    goto LABEL_6;
  }

  __cxa_free_exception(v14);
  goto LABEL_6;
}

uint64_t sub_100065240(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 40))
  {
    int v2 = (void **)(a1 + 8);
    unint64_t v3 = *v2;
    if (*v2)
    {
      *(void *)(a1 + 16) = v3;
      operator delete(v3);
    }
  }

  return a1;
}

uint64_t *sub_1000652B0(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  void *v4 = &off_100128C68;
  v4[1] = 0LL;
  void v4[2] = 0LL;
  v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2) {
    unint64_t v5 = (void *)(a2 + 8);
  }
  else {
    unint64_t v5 = 0LL;
  }
  sub_10000CCC8((uint64_t)a1, v5, a2);
  return a1;
}

void sub_10006530C(void *a1)
{
}

void sub_10006532C(_Unwind_Exception *a1)
{
}

void sub_100065344(std::__shared_weak_count *a1)
{
}

void sub_100065358(uint64_t a1)
{
}

uint64_t sub_10006536C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

uint64_t sub_1000653AC(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

__int128 *sub_1000653C0(uint64_t a1)
{
  unint64_t v1 = *(void ***)(a1 + 40);
  int v2 = *v1;
  if (*((_BYTE *)*v1 + 128))
  {
    uint64_t result = (__int128 *)sub_10006557C((uint64_t)(v2 + 88), (char *)(*v1[1] + 16LL));
    if (!(_DWORD)result) {
      return result;
    }
  }

  uint64_t v4 = v1[1];
  uint64_t v5 = *v4;
  __int128 v6 = (void *)(*v4 + 16LL);
  size_t v7 = strlen("com.apple.coreanalytics.heartbeat.2hours");
  if (*(char *)(*v4 + 39LL) < 0)
  {
    if (v7 == *(void *)(v5 + 24))
    {
      if (v7 == -1LL) {
        goto LABEL_19;
      }
      __int128 v6 = (void *)*v6;
LABEL_10:
      if (!memcmp(v6, "com.apple.coreanalytics.heartbeat.2hours", v7))
      {
        unint64_t v8 = (os_log_s *)qword_100131970;
        if (os_log_type_enabled((os_log_t)qword_100131970, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(v11) = 136446210;
          *(void *)((char *)&v11 + 4) = "com.apple.coreanalytics.heartbeat.2hours";
          _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "[ModifyEventManager] Retrieving Modify Event Definitions for %{public}s.",  (uint8_t *)&v11,  0xCu);
          uint64_t v4 = v1[1];
          uint64_t v5 = *v4;
        }
      }
    }
  }

  else if (v7 == *(unsigned __int8 *)(*v4 + 39LL))
  {
    if (v7 == -1LL) {
LABEL_19:
    }
      sub_100008DD4();
    goto LABEL_10;
  }

  uint64_t v9 = *((void *)v2 + 5);
  *(void *)&__int128 v11 = &off_100128CE8;
  *((void *)&v11 + 1) = v2;
  uint64_t v12 = v4;
  uint64_t v13 = &v11;
  (*(void (**)(uint64_t, uint64_t, __int128 *))(*(void *)v9 + 200LL))(v9, v5 + 16, &v11);
  uint64_t result = v13;
  if (v13 == &v11)
  {
    uint64_t v10 = 4LL;
    uint64_t result = &v11;
  }

  else
  {
    if (!v13) {
      return result;
    }
    uint64_t v10 = 5LL;
  }

  return (__int128 *)(*(uint64_t (**)(void))(*(void *)result + 8 * v10))();
}

void sub_100065570(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

uint64_t sub_10006557C(uint64_t a1, char *a2)
{
  unint64_t v4 = sub_10002CCA8(a1, a2);
  if (((*(void *)(*(void *)(a1 + 8) + (((v4 % *(void *)(a1 + 32)) >> 3) & 0x1FFFFFFFFFFFFFF8LL)) >> (v4 % *(void *)(a1 + 32))) & 1) != 0) {
    return 1LL;
  }
  unint64_t v6 = sub_1000655FC(a1 + 1, a2);
  return (*(void *)(*(void *)(a1 + 8) + (((v6 % *(void *)(a1 + 32)) >> 3) & 0x1FFFFFFFFFFFFFF8LL)) >> (v6 % *(void *)(a1 + 32))) & 1LL;
}

uint64_t sub_1000655FC(uint64_t a1, char *a2)
{
  uint64_t v2 = a2[23];
  if ((v2 & 0x80u) == 0LL) {
    unint64_t v3 = a2;
  }
  else {
    unint64_t v3 = *(char **)a2;
  }
  if ((v2 & 0x80u) != 0LL) {
    uint64_t v2 = *((void *)a2 + 1);
  }
  if (!v2) {
    return 13LL;
  }
  unint64_t v4 = 0LL;
  do
  {
    uint64_t v5 = *v3++;
    unint64_t v6 = 0xC6A4A7935BD1E995LL
       * ((0xC6A4A7935BD1E995LL * ((0xC6A4A7935BD1E995LL * v5) ^ ((0xC6A4A7935BD1E995LL * v5) >> 47))) ^ v4);
    unint64_t v4 = v6 + 3864292196u;
    --v2;
  }

  while (v2);
  return v6 + 3864292209u;
}

__n128 sub_100065674(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &off_100128CE8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + _Block_object_dispose(va, 8) = result;
  return result;
}

__n128 sub_1000656AC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_100128CE8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + _Block_object_dispose(va, 8) = result;
  return result;
}

void sub_1000656CC(uint64_t a1, char **a2, char **a3, char **a4)
{
  uint64_t v5 = *a2;
  unint64_t v6 = *a3;
  size_t v7 = *a4;
  unint64_t v8 = *(void **)(a1 + 8);
  sub_100005064(&v16, *a2);
  if (v17 < 0)
  {
    if (*((void *)&v16 + 1) != 14LL)
    {
      operator delete((void *)v16);
LABEL_22:
      uint64_t v13 = (os_log_s *)qword_1001318F8;
      if (os_log_type_enabled((os_log_t)qword_1001318F8, OS_LOG_TYPE_ERROR)) {
        sub_1000D9758((uint64_t)v5, v13);
      }
      return;
    }

    BOOL v11 = *(void *)v16 != 0x5F64656972657571LL || *(void *)(v16 + 6) != 0x7365746174735F64LL;
    operator delete((void *)v16);
    if (v11) {
      goto LABEL_22;
    }
  }

  else
  {
    if (v17 != 14) {
      goto LABEL_22;
    }
  }

  uint64_t v12 = *(void **)(a1 + 16);
  sub_100005064(&v16, v6);
  sub_100005064(__p, v7);
  sub_1000646FC(v8, v12, (uint64_t)&v16, (uint64_t)__p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v17 < 0) {
    operator delete((void *)v16);
  }
}

void sub_10006585C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100065880(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void (**sub_1000658BC())(std::__shared_weak_count *__hidden this, const std::type_info *)
{
}

void sub_1000658C8(uint64_t **a1)
{
  uint64_t v2 = *a1;
  sub_100064404(*v2);
  sub_100025588(&v2);
  sub_100007004((uint64_t)(a1 + 1));
  operator delete(a1);
}

void sub_100065940( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t sub_100065964(uint64_t a1, unint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  sub_1000659AC((void *)a1, a2, a3);
  return a1;
}

void sub_100065990(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + sub_100007004((uint64_t)v9 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void sub_1000659AC(void *a1, unint64_t a2, uint64_t a3)
{
  if (a1[1] != *a1) {
    sub_1000D97CC();
  }
  if ((a2 & 0x3F) != 0) {
    unint64_t v6 = (a2 >> 6) + 1;
  }
  else {
    unint64_t v6 = a2 >> 6;
  }
  sub_100065A1C((uint64_t)a1, v6);
  a1[3] = a2;
  uint64_t v7 = -1LL;
  if (a2 < 0x40) {
    uint64_t v7 = ~(-1LL << a2);
  }
  uint64_t v8 = v7 & a3;
  if (v8) {
    *(void *)*a1 = v8;
  }
}

void sub_100065A1C(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + sub_100007004((uint64_t)v9 + 8) = *(void *)a1 + 8 * a2;
    }
  }

  else
  {
    sub_100065A4C((char **)a1, a2 - v2);
  }

void sub_100065A4C(char **a1, unint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }

    a1[1] = v7;
  }

  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 3);
    if (v10 >> 61) {
      sub_1000046F8();
    }
    uint64_t v11 = v9 >> 3;
    uint64_t v12 = v5 - v8;
    if (v12 >> 2 > v10) {
      unint64_t v10 = v12 >> 2;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      uint64_t v14 = (char *)sub_10001C3B0(v4, v13);
      uint64_t v8 = *a1;
      uint64_t v7 = a1[1];
    }

    else
    {
      uint64_t v14 = 0LL;
    }

    char v15 = &v14[8 * v11];
    __int128 v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    char v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      uint64_t v18 = *((void *)v7 - 1);
      v7 -= 8;
      *((void *)v15 - 1) = v18;
      v15 -= 8;
    }

    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8) {
      operator delete(v8);
    }
  }

__n128 sub_100065B54(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = *(void **)a1;
  if (v4)
  {
    *(void *)(a1 + sub_100007004((uint64_t)v9 + 8) = v4;
    operator delete(v4);
    *(void *)a1 = 0LL;
    *(void *)(a1 + sub_100007004((uint64_t)v9 + 8) = 0LL;
    *(void *)(a1 + 16) = 0LL;
  }

  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  *(void *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0LL;
  a2->n128_u64[1] = 0LL;
  a2[1].n128_u64[0] = 0LL;
  return result;
}

void *sub_100065BAC(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &off_100128D68;
  result[1] = v3;
  return result;
}

uint64_t sub_100065BE0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_100128D68;
  a2[1] = v2;
  return result;
}

void sub_100065BFC(uint64_t a1, char **a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  sub_100005064(__p, *a2);
  sub_100065CE0(v2 + 88, (char *)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100065C74( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100065C98(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

void (**sub_100065CD4())(std::__shared_weak_count *__hidden this, const std::type_info *)
{
}

unint64_t sub_100065CE0(uint64_t a1, char *a2)
{
  unint64_t v4 = sub_10002CCA8(a1, a2);
  *(void *)(*(void *)(a1 + 8) + (((v4 % *(void *)(a1 + 32)) >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << (v4 % *(void *)(a1 + 32));
  unint64_t result = sub_1000655FC(a1 + 1, a2);
  *(void *)(*(void *)(a1 + 8) + (((result % *(void *)(a1 + 32)) >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << (result % *(void *)(a1 + 32));
  return result;
}

void sub_100065D6C(__int128 *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)&__int128 v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  sub_10006B980(a1, a2, &v7);
  if (sub_10004BA08(v7))
  {
    *(_OWORD *)a3 = v7;
  }

  else
  {
    *(void *)a3 = 0LL;
    *(void *)(a3 + sub_100007004((uint64_t)v9 + 8) = 0LL;
    unint64_t v4 = (std::__shared_weak_count *)*((void *)&v7 + 1);
    if (*((void *)&v7 + 1))
    {
      uint64_t v5 = (unint64_t *)(*((void *)&v7 + 1) + 8LL);
      do
        unint64_t v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }

uint64_t sub_100065E2C(uint64_t a1, __int128 *a2, uint64_t *a3)
{
  *(void *)a1 = off_1001295D0;
  dispatch_object_t object = dispatch_queue_create("analyticsd.SqliteStateStoreQueue", 0LL);
  sub_10004B41C((uint64_t *)a1, (uint64_t *)off_100129140, &object, a2, a3);
  if (object) {
    dispatch_release(object);
  }
  *(void *)a1 = off_100128E30;
  *(void *)(a1 + 112) = off_100128F38;
  *(void *)(a1 + 120) = off_100128FD0;
  *(void *)(a1 + 12sub_100007004((uint64_t)v9 + 8) = off_1001290C8;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 16sub_100007004((uint64_t)v9 + 8) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(void *)(a1 + 216) = 0LL;
  return a1;
}

void sub_100065F14(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

uint64_t sub_100065F20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 8;
  uint64_t v7 = a1;
  uint64_t v5 = *(dispatch_queue_s **)(a1 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_10006BA38;
  block[3] = &unk_100129668;
  void block[4] = v4;
  void block[5] = &v7;
  dispatch_sync(v5, block);
  sub_10004C6D4((sqlite3_stmt **)(a1 + 216), 0LL);
  sub_10004C6D4((sqlite3_stmt **)(a1 + 208), 0LL);
  sub_10004C6D4((sqlite3_stmt **)(a1 + 200), 0LL);
  sub_10004C6D4((sqlite3_stmt **)(a1 + 192), 0LL);
  sub_10004C6D4((sqlite3_stmt **)(a1 + 184), 0LL);
  sub_10004C6D4((sqlite3_stmt **)(a1 + 176), 0LL);
  sub_10004C6D4((sqlite3_stmt **)(a1 + 168), 0LL);
  sub_10004C6D4((sqlite3_stmt **)(a1 + 160), 0LL);
  sub_10004C6D4((sqlite3_stmt **)(a1 + 152), 0LL);
  sub_10004C6D4((sqlite3_stmt **)(a1 + 144), 0LL);
  sub_10004C6D4((sqlite3_stmt **)(a1 + 136), 0LL);
  sub_100066050(a1, (uint64_t *)(a2 + 8));
  return a1;
}

uint64_t sub_100066050(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v3 - 8sub_100004D00(v1, *(char **)(v1 + 8)) = a2[1];
  sub_100007004(a1 + 64);
  sub_10004C934((sqlite3 **)(a1 + 32), 0LL);
  sub_100022C54(a1 + 8);
  return a1;
}

uint64_t sub_1000660B0(uint64_t a1)
{
  return sub_100065F20(a1, (uint64_t)&off_100129138);
}

uint64_t sub_1000660BC(uint64_t a1)
{
  return sub_100065F20(a1 - 112, (uint64_t)&off_100129138);
}

uint64_t sub_1000660CC(uint64_t a1)
{
  return sub_100065F20(a1 - 120, (uint64_t)&off_100129138);
}

uint64_t sub_1000660DC(uint64_t a1)
{
  return sub_100065F20(a1 - 128, (uint64_t)&off_100129138);
}

void sub_1000660EC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100065F20(a1, (uint64_t)&off_100129138);
  operator delete(v1);
}

void sub_100066108(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100065F20(a1 - 112, (uint64_t)&off_100129138);
  operator delete(v1);
}

void sub_100066128(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100065F20(a1 - 120, (uint64_t)&off_100129138);
  operator delete(v1);
}

void sub_100066148(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100065F20(a1 - 128, (uint64_t)&off_100129138);
  operator delete(v1);
}

uint64_t sub_100066170(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v7[0] = a1;
  v7[1] = a2;
  uint64_t v4 = a1 + 8;
  _OWORD v7[2] = a3;
  void v7[3] = a4;
  uint64_t v5 = *(dispatch_queue_s **)(a1 + 24);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 0x40000000LL;
  _OWORD v8[2] = sub_10006BAD8;
  void v8[3] = &unk_100129688;
  v8[4] = v4;
  v8[5] = v7;
  uint64_t v9 = v8;
  block[0] = _NSConcreteStackBlock;
  unsigned __int8 v11 = -86;
  block[1] = 0x40000000LL;
  block[2] = sub_10006BE88;
  block[3] = &unk_1001296A8;
  void block[4] = &v11;
  void block[5] = &v9;
  dispatch_sync(v5, block);
  return v11;
}

uint64_t sub_100066238(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100066170(a1 - 112, a2, a3, a4);
}

void sub_100066240(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v7[0] = a1;
  v7[1] = a2;
  uint64_t v4 = a1 + 8;
  _OWORD v7[2] = a3;
  uint64_t v5 = *(dispatch_queue_s **)(a1 + 24);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 0x40000000LL;
  _OWORD v8[2] = sub_10006BEBC;
  void v8[3] = &unk_1001296C8;
  v8[4] = v4;
  v8[5] = v7;
  uint64_t v9 = v8;
  block[0] = _NSConcreteStackBlock;
  *(void *)&__int128 v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)(a4 + 16) = v6;
  *(_OWORD *)(a4 + 32) = v6;
  *(_OWORD *)a4 = v6;
  *(_BYTE *)a4 = 0;
  *(_BYTE *)(a4 + 40) = 0;
  block[1] = 0x40000000LL;
  block[2] = sub_10006C23C;
  block[3] = &unk_1001296E8;
  void block[4] = a4;
  void block[5] = &v9;
  dispatch_sync(v5, block);
}

void sub_10006630C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
}

void sub_100066314(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)&qword_100131800);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_100131800))
  {
    __cxa_atexit((void (*)(void *))&std::mutex::~mutex, &stru_1001311F8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_100131800);
  }

  std::mutex::lock(&stru_1001311F8);
  unint64_t v22 = 0LL;
  __int128 __p = &v22;
  uint64_t v24 = a1;
  uint64_t v4 = *(dispatch_queue_s **)(a1 + 24);
  uint64_t v37 = _NSConcreteStackBlock;
  uint64_t v38 = 0x40000000LL;
  __int128 v39 = sub_10006C464;
  unint64_t v40 = (void ***)&unk_100129708;
  unint64_t v41 = (unsigned __int8 *)(a1 + 8);
  p_p = &__p;
  char v15 = (void **)&v37;
  LOBYTE(sub_100005064(__p, __s) = -86;
  blocuint64_t k = _NSConcreteStackBlock;
  uint64_t v31 = 0x40000000LL;
  unint64_t v32 = (char **)sub_10006BE88;
  uint64_t v33 = (uint64_t)&unk_1001296A8;
  p_s = &__s;
  unint64_t v35 = &v15;
  dispatch_sync(v4, &block);
  if ((_BYTE)__s)
  {
    uint64_t v5 = (os_log_s *)qword_100131930;
    if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_INFO))
    {
      LOWORD(block) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "[State Store] Iterating all persisted queried states",  (uint8_t *)&block,  2u);
    }

    do
    {
      while (1)
      {
        uint64_t v20 = 0LL;
        std::string __s = 0LL;
        uint64_t v18 = -1LL;
        unint64_t v19 = 0LL;
        uint64_t v17 = -1LL;
        blocuint64_t k = (void **)a1;
        uint64_t v31 = (uint64_t)&v22;
        unint64_t v32 = &__s;
        uint64_t v33 = (uint64_t)&v20;
        p_s = (char **)&v19;
        unint64_t v35 = (void ***)&v18;
        __int128 v36 = &v17;
        __int128 v6 = *(dispatch_queue_s **)(a1 + 24);
        __int128 __p = _NSConcreteStackBlock;
        uint64_t v24 = 0x40000000LL;
        unint64_t v25 = sub_10006C550;
        __int128 v26 = &unk_100129728;
        uint64_t v27 = a1 + 8;
        p_blocuint64_t k = &block;
        char v15 = &__p;
        unsigned __int8 v29 = -86;
        uint64_t v37 = _NSConcreteStackBlock;
        uint64_t v38 = 0x40000000LL;
        __int128 v39 = sub_10006BE88;
        unint64_t v40 = (void ***)&unk_1001296A8;
        unint64_t v41 = &v29;
        p_p = (void **)&v15;
        dispatch_sync(v6, &v37);
        int v7 = v29;
        if (v29)
        {
          if (__s) {
            break;
          }
        }

void sub_100066824(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x100066830LL);
  }
  JUMPOUT(0x100066838LL);
}

void sub_100066840(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100066848(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 8;
  v5[0] = a1;
  v5[1] = a2;
  unsigned __int8 v3 = *(dispatch_queue_s **)(a1 + 24);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000LL;
  _OWORD v6[2] = sub_10006C700;
  void v6[3] = &unk_100129768;
  void v6[4] = v2;
  v6[5] = v5;
  int v7 = v6;
  unsigned __int8 v9 = -86;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_10006BE88;
  block[3] = &unk_1001296A8;
  void block[4] = &v9;
  void block[5] = &v7;
  dispatch_sync(v3, block);
  return v9;
}

uint64_t sub_100066910(uint64_t a1, uint64_t a2)
{
  return sub_100066848(a1 - 112, a2);
}

uint64_t sub_100066918(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v4 = a1;
  uint64_t v2 = *(dispatch_queue_s **)(a1 + 24);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000LL;
  void v5[2] = sub_10006C8E4;
  _OWORD v5[3] = &unk_100129788;
  v5[4] = v1;
  v5[5] = &v4;
  __int128 v6 = v5;
  block[0] = _NSConcreteStackBlock;
  unsigned __int8 v8 = -86;
  block[1] = 0x40000000LL;
  block[2] = sub_10006BE88;
  block[3] = &unk_1001296A8;
  void block[4] = &v8;
  void block[5] = &v6;
  dispatch_sync(v2, block);
  return v8;
}

uint64_t sub_1000669DC(uint64_t a1)
{
  return sub_100066918(a1 - 112);
}

void sub_1000669E4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  v6[0] = a1;
  v6[1] = a2;
  _OWORD v6[2] = a3;
  uint64_t v5 = *(dispatch_queue_s **)(a1 + 24);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000LL;
  _OWORD v7[2] = sub_10006CAB4;
  void v7[3] = &unk_1001297A8;
  void v7[4] = a1 + 8;
  void v7[5] = v6;
  unsigned __int8 v8 = v7;
  *a4 = 0xAAAAAAAAAAAAAA00LL;
  a4[1] = 0LL;
  sub_1000041AC((uint64_t)a4);
  sub_1000041AC((uint64_t)a4);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_10006CD64;
  block[3] = &unk_1001297C8;
  void block[4] = a4;
  void block[5] = &v8;
  dispatch_sync(v5, block);
}

void sub_100066ADC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
}

void sub_100066AE4(uint64_t *a1, const char **a2, uint64_t a3)
{
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)&qword_100131808);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_100131808))
  {
    __cxa_atexit((void (*)(void *))&std::mutex::~mutex, &stru_100131238, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_100131808);
  }

  std::mutex::lock(&stru_100131238);
  unint64_t v16 = (unint64_t)(a1 + 23);
  uint64_t v17 = a1;
  uint64_t v18 = a2;
  __int128 v6 = (dispatch_queue_s *)a1[3];
  unint64_t v22 = _NSConcreteStackBlock;
  unint64_t v23 = 0x40000000LL;
  uint64_t v24 = sub_10006CE18;
  unint64_t v25 = &unk_1001297E8;
  __int128 v26 = a1 + 1;
  uint64_t v27 = &v16;
  uint64_t v28 = &v22;
  LOBYTE(v21) = -86;
  blocuint64_t k = _NSConcreteStackBlock;
  uint64_t v31 = 0x40000000LL;
  unint64_t v32 = sub_10006BE88;
  uint64_t v33 = (void ***)&unk_1001296A8;
  char v34 = (unsigned __int8 *)&v21;
  unint64_t v35 = (void ***)&v28;
  dispatch_sync(v6, &block);
  if ((_BYTE)v21)
  {
    while (1)
    {
      uint64_t v20 = 0LL;
      uint64_t v21 = 0LL;
      unint64_t v16 = (unint64_t)a1;
      uint64_t v17 = a1 + 23;
      uint64_t v18 = &v21;
      unint64_t v19 = &v20;
      int v7 = (dispatch_queue_s *)a1[3];
      unint64_t v22 = _NSConcreteStackBlock;
      unint64_t v23 = 0x40000000LL;
      uint64_t v24 = sub_10006CF1C;
      unint64_t v25 = &unk_100129808;
      __int128 v26 = a1 + 1;
      uint64_t v27 = &v16;
      uint64_t v28 = &v22;
      unsigned __int8 v29 = -86;
      blocuint64_t k = _NSConcreteStackBlock;
      uint64_t v31 = 0x40000000LL;
      unint64_t v32 = sub_10006BE88;
      uint64_t v33 = (void ***)&unk_1001296A8;
      char v34 = &v29;
      unint64_t v35 = (void ***)&v28;
      dispatch_sync(v7, &block);
      int v8 = v29;
      if (v29)
      {
        if (v21 && v20) {
          break;
        }
      }

void sub_100066F24(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x100066F30LL);
  }
  JUMPOUT(0x100066F38LL);
}

void sub_100066F40(uint64_t a1, const char **a2, uint64_t a3)
{
}

uint64_t sub_100066F48(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 8;
  v5[0] = a1;
  v5[1] = a2;
  unsigned __int8 v3 = *(dispatch_queue_s **)(a1 + 24);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000LL;
  _OWORD v6[2] = sub_10006D048;
  void v6[3] = &unk_100129848;
  void v6[4] = v2;
  v6[5] = v5;
  int v7 = v6;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_10006D1C0;
  block[3] = &unk_100129868;
  void block[4] = &v9;
  void block[5] = &v7;
  uint64_t v9 = 0LL;
  dispatch_sync(v3, block);
  return v9;
}

uint64_t sub_10006700C(uint64_t a1, uint64_t a2)
{
  return sub_100066F48(a1 - 120, a2);
}

void sub_100067014(void *a1, uint64_t a2)
{
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)&qword_100131810);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_100131810))
  {
    __cxa_atexit((void (*)(void *))&std::mutex::~mutex, &stru_100131278, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_100131810);
  }

  std::mutex::lock(&stru_100131278);
  uint64_t v21 = 0LL;
  unint64_t v22 = (void **)&v21;
  uint64_t v23 = (uint64_t)a1;
  uint64_t v4 = (dispatch_queue_s *)a1[3];
  uint64_t v30 = 0x40000000LL;
  uint64_t v31 = sub_10006D1F4;
  unint64_t v32 = &unk_100129888;
  uint64_t v33 = (unsigned __int8 *)(a1 + 1);
  char v34 = &v22;
  uint64_t v28 = &v29;
  unsigned __int8 v29 = _NSConcreteStackBlock;
  LOBYTE(sub_100005064(__p, __s) = -86;
  blocuint64_t k = _NSConcreteStackBlock;
  uint64_t v11 = 0x40000000LL;
  uint64_t v12 = (int *)sub_10006BE88;
  uint64_t v13 = (char **)&unk_1001296A8;
  p_s = &__s;
  char v15 = (void ***)&v28;
  dispatch_sync(v4, &block);
  if ((_BYTE)__s)
  {
    do
    {
      int v20 = 1;
      uint64_t v18 = 0LL;
      std::string __s = 0LL;
      unint64_t v16 = &v17;
      uint64_t v17 = 0LL;
      blocuint64_t k = (void **)a1;
      uint64_t v11 = (uint64_t)&v21;
      uint64_t v12 = &v20;
      uint64_t v13 = &__s;
      p_s = (char **)((char *)&v18 + 4);
      char v15 = (void ***)&v18;
      unsigned __int8 v5 = (dispatch_queue_s *)a1[3];
      unint64_t v22 = _NSConcreteStackBlock;
      uint64_t v23 = 0x40000000LL;
      uint64_t v24 = sub_10006D2E0;
      unint64_t v25 = &unk_1001298A8;
      __int128 v26 = a1 + 1;
      p_blocuint64_t k = &block;
      uint64_t v28 = &v22;
      unsigned __int8 v29 = _NSConcreteStackBlock;
      unsigned __int8 v35 = -86;
      uint64_t v30 = 0x40000000LL;
      uint64_t v31 = sub_10006BE88;
      unint64_t v32 = &unk_1001296A8;
      uint64_t v33 = &v35;
      char v34 = &v28;
      dispatch_sync(v5, &v29);
      int v6 = v35;
      if (v35)
      {
        if (__s)
        {
          int v7 = v20;
          sub_100005064(&block, __s);
          sub_1000672B4(a2, v7, (uint64_t)&block, SHIDWORD(v18), v18);
          if (SHIBYTE(v12) < 0) {
            operator delete(block);
          }
        }
      }
    }

    while (v6);
  }

  unsigned __int8 v29 = (void **)&v21;
  int v8 = (dispatch_queue_s *)a1[3];
  blocuint64_t k = _NSConcreteStackBlock;
  uint64_t v11 = 0x40000000LL;
  uint64_t v12 = (int *)sub_10006D3FC;
  uint64_t v13 = (char **)&unk_1001298C8;
  p_s = (char **)(a1 + 1);
  char v15 = &v29;
  dispatch_sync(v8, &block);
  sub_10004C6D4(&v21, 0LL);
  std::mutex::unlock(&stru_100131278);
}

void sub_1000672A4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000672B4(uint64_t a1, int a2, uint64_t a3, int a4, int a5)
{
  int v9 = a2;
  int v7 = a5;
  int v8 = a4;
  uint64_t v5 = *(void *)(a1 + 24);
  if (!v5) {
    sub_1000129CC();
  }
  return (*(uint64_t (**)(uint64_t, int *, uint64_t, int *, int *))(*(void *)v5 + 48LL))( v5,  &v9,  a3,  &v8,  &v7);
}

void sub_100067324(uint64_t a1, uint64_t a2)
{
}

void sub_10006732C(uint64_t a1, int a2, uint64_t a3)
{
  int v20 = a2;
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)&qword_100131818);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_100131818))
  {
    __cxa_atexit((void (*)(void *))&std::mutex::~mutex, &stru_1001312B8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_100131818);
  }

  std::mutex::lock(&stru_1001312B8);
  unint64_t v19 = 0LL;
  uint64_t v13 = &v19;
  uint64_t v14 = (sqlite3_stmt **)a1;
  char v15 = (char **)&v20;
  uint64_t v5 = *(dispatch_queue_s **)(a1 + 24);
  unsigned __int8 v29 = (sqlite3_stmt **)_NSConcreteStackBlock;
  unint64_t v30 = 0x40000000LL;
  uint64_t v31 = sub_10006D40C;
  unint64_t v32 = &unk_1001298E8;
  uint64_t v33 = a1 + 8;
  char v34 = &v13;
  uint64_t v21 = &v29;
  LOBYTE(v1sub_100007004((uint64_t)v9 + 8) = -86;
  blocuint64_t k = _NSConcreteStackBlock;
  uint64_t v24 = 0x40000000LL;
  unint64_t v25 = sub_10006BE88;
  __int128 v26 = &unk_1001296A8;
  uint64_t v27 = &v18;
  uint64_t v28 = (sqlite3_stmt ***)&v21;
  dispatch_sync(v5, &block);
  if ((_BYTE)v18)
  {
    while (1)
    {
      std::string __s = 0LL;
      uint64_t v18 = 0LL;
      uint64_t v13 = (sqlite3_stmt **)a1;
      uint64_t v14 = &v19;
      char v15 = &v18;
      p_s = &__s;
      int v6 = *(dispatch_queue_s **)(a1 + 24);
      uint64_t v28 = (sqlite3_stmt ***)&v21;
      unsigned __int8 v29 = (sqlite3_stmt **)_NSConcreteStackBlock;
      unint64_t v30 = 0x40000000LL;
      uint64_t v31 = sub_10006D518;
      unint64_t v32 = &unk_100129908;
      uint64_t v33 = a1 + 8;
      char v34 = &v13;
      uint64_t v21 = &v29;
      unsigned __int8 v22 = -86;
      blocuint64_t k = _NSConcreteStackBlock;
      uint64_t v24 = 0x40000000LL;
      unint64_t v25 = sub_10006BE88;
      __int128 v26 = &unk_1001296A8;
      uint64_t v27 = (char **)&v22;
      dispatch_sync(v6, &block);
      int v7 = v22;
      if (!v22 || !v18 || !__s) {
        goto LABEL_12;
      }
      unsigned __int8 v29 = (sqlite3_stmt **)0xAAAAAAAAAAAAAAAALL;
      unint64_t v30 = 0xAAAAAAAAAAAAAAAALL;
      sub_100005064(&__p, __s);
      unsigned __int8 v29 = (sqlite3_stmt **)sub_10003E010(&__p, (uint64_t)"%Y-%m-%dT%H:%M:%S");
      unint64_t v30 = v8;
      if ((char)__p.__r_.__value_.__s.__size_ < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((_BYTE)v30) {
          goto LABEL_10;
        }
LABEL_12:
        if (!v7) {
          break;
        }
      }

      else
      {
        if (!(_BYTE)v8) {
          goto LABEL_12;
        }
LABEL_10:
        sub_100005064(&block, v18);
        uint64_t v9 = *(void *)(a3 + 24);
        if (!v9) {
          sub_1000129CC();
        }
        (*(void (**)(uint64_t, void ***, sqlite3_stmt ***))(*(void *)v9 + 48LL))(v9, &block, &v29);
        if ((SHIBYTE(v25) & 0x80000000) == 0) {
          goto LABEL_12;
        }
        operator delete(block);
        if (!v7) {
          break;
        }
      }
    }
  }

  unsigned __int8 v29 = &v19;
  uint64_t v10 = *(dispatch_queue_s **)(a1 + 24);
  blocuint64_t k = _NSConcreteStackBlock;
  uint64_t v24 = 0x40000000LL;
  unint64_t v25 = sub_10006D5E0;
  __int128 v26 = &unk_100129928;
  uint64_t v27 = (char **)(a1 + 8);
  uint64_t v28 = &v29;
  dispatch_sync(v10, &block);
  sub_10004C6D4(&v19, 0LL);
  std::mutex::unlock(&stru_1001312B8);
}

void sub_100067618(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

void sub_100067628(uint64_t a1, int a2, uint64_t a3)
{
}

void sub_100067630(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)&qword_100131820);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_100131820))
  {
    __cxa_atexit((void (*)(void *))&std::mutex::~mutex, &stru_1001312F8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_100131820);
  }

  std::mutex::lock(&stru_1001312F8);
  unint64_t v19 = 0LL;
  uint64_t v28 = &v19;
  unsigned __int8 v29 = (sqlite3_stmt **)a1;
  unsigned __int8 v4 = *(dispatch_queue_s **)(a1 + 24);
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = (sqlite3_stmt **)_NSConcreteStackBlock;
  unint64_t v34 = 0x40000000LL;
  unsigned __int8 v35 = sub_10006D5F0;
  __int128 v36 = &unk_100129948;
  uint64_t v37 = a1 + 8;
  uint64_t v38 = &v28;
  int v20 = &rep;
  LOBYTE(v1sub_100007004((uint64_t)v9 + 8) = -86;
  blocuint64_t k = _NSConcreteStackBlock;
  uint64_t v23 = 0x40000000LL;
  uint64_t v24 = sub_10006BE88;
  unint64_t v25 = &unk_1001296A8;
  __int128 v26 = &v18;
  p_std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = (sqlite3_stmt ***)&v20;
  dispatch_sync(v4, &block);
  if ((_BYTE)v18)
  {
    do
    {
      while (1)
      {
        std::string __s = 0LL;
        uint64_t v18 = 0LL;
        unint64_t v16 = 0LL;
        uint64_t v28 = (sqlite3_stmt **)a1;
        unsigned __int8 v29 = &v19;
        unint64_t v30 = &v18;
        p_s = &__s;
        unint64_t v32 = &v16;
        uint64_t v5 = *(dispatch_queue_s **)(a1 + 24);
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = (sqlite3_stmt **)_NSConcreteStackBlock;
        unint64_t v34 = 0x40000000LL;
        unsigned __int8 v35 = sub_10006D6DC;
        __int128 v36 = &unk_100129968;
        uint64_t v37 = a1 + 8;
        uint64_t v38 = &v28;
        int v20 = &rep;
        unsigned __int8 v21 = -86;
        blocuint64_t k = _NSConcreteStackBlock;
        uint64_t v23 = 0x40000000LL;
        uint64_t v24 = sub_10006BE88;
        unint64_t v25 = &unk_1001296A8;
        __int128 v26 = (char **)&v21;
        p_std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = (sqlite3_stmt ***)&v20;
        dispatch_sync(v5, &block);
        int v6 = v21;
        if (v21)
        {
          if (v18)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = (sqlite3_stmt **)0xAAAAAAAAAAAAAA00LL;
            unint64_t v34 = 0xAAAAAAAAAAAAAA00LL;
            uint64_t v28 = (sqlite3_stmt **)0xAAAAAAAAAAAAAA00LL;
            unsigned __int8 v29 = (sqlite3_stmt **)0xAAAAAAAAAAAAAA00LL;
            if (__s)
            {
              sub_100005064(&__p, __s);
              std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = (sqlite3_stmt **)sub_10003E010(&__p, (uint64_t)"%Y-%m-%dT%H:%M:%S");
              LOBYTE(v34) = v7;
            }

            else
            {
              v8.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
              if (!(_BYTE)v34) {
                LOBYTE(v34) = 1;
              }
              std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = (sqlite3_stmt **)v8.__d_.__rep_;
            }

            if (v16)
            {
              sub_100005064(&v14, v16);
              uint64_t v28 = (sqlite3_stmt **)sub_10003E010(&v14, (uint64_t)"%Y-%m-%dT%H:%M:%S");
              LOBYTE(v29) = v9;
              if ((char)v14.__r_.__value_.__s.__size_ < 0)
              {
                operator delete(v14.__r_.__value_.__l.__data_);
                int v10 = v29;
              }

              else
              {
                int v10 = v9;
              }
            }

            else
            {
              if (!(_BYTE)v29) {
                LOBYTE(v29) = 1;
              }
              uint64_t v28 = (sqlite3_stmt **)0x8000000000000000LL;
              int v10 = 1;
            }

            if ((_BYTE)v34 && v10)
            {
              sub_100005064(&block, v18);
              uint64_t v11 = *(void *)(a2 + 24);
              if (!v11) {
                sub_1000129CC();
              }
              (*(void (**)(uint64_t, void ***, sqlite3_stmt ***, sqlite3_stmt ***))(*(void *)v11 + 48LL))( v11,  &block,  &rep,  &v28);
              if (SHIBYTE(v24) < 0) {
                break;
              }
            }
          }
        }

        if (!v6) {
          goto LABEL_25;
        }
      }

      operator delete(block);
    }

    while (v6);
  }

void sub_1000679AC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1000679BC(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1000679C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 8;
  v5[0] = a1;
  v5[1] = a2;
  unsigned __int8 v3 = *(dispatch_queue_s **)(a1 + 24);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000LL;
  _OWORD v6[2] = sub_10006D7CC;
  void v6[3] = &unk_1001299A8;
  void v6[4] = v2;
  v6[5] = v5;
  char v7 = v6;
  unsigned __int8 v9 = -86;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_10006BE88;
  block[3] = &unk_1001296A8;
  void block[4] = &v9;
  void block[5] = &v7;
  dispatch_sync(v3, block);
  return v9;
}

uint64_t sub_100067A8C(uint64_t a1, uint64_t a2)
{
  return sub_1000679C4(a1 - 120, a2);
}

uint64_t sub_100067A94(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v4 = a1;
  uint64_t v2 = *(dispatch_queue_s **)(a1 + 24);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000LL;
  void v5[2] = sub_10006D8FC;
  _OWORD v5[3] = &unk_1001299C8;
  v5[4] = v1;
  v5[5] = &v4;
  int v6 = v5;
  block[0] = _NSConcreteStackBlock;
  unsigned __int8 v8 = -86;
  block[1] = 0x40000000LL;
  block[2] = sub_10006BE88;
  block[3] = &unk_1001296A8;
  void block[4] = &v8;
  void block[5] = &v6;
  dispatch_sync(v2, block);
  return v8;
}

uint64_t sub_100067B58(uint64_t a1)
{
  return sub_100067A94(a1 - 120);
}

uint64_t sub_100067B60(uint64_t a1, int a2)
{
  int v6 = a2;
  uint64_t v2 = a1 + 8;
  v5[0] = a1;
  v5[1] = &v6;
  unsigned __int8 v3 = *(dispatch_queue_s **)(a1 + 24);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000LL;
  _OWORD v7[2] = sub_10006DA24;
  void v7[3] = &unk_1001299E8;
  void v7[4] = v2;
  void v7[5] = v5;
  unsigned __int8 v8 = v7;
  unsigned __int8 v10 = -86;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_10006BE88;
  block[3] = &unk_1001296A8;
  void block[4] = &v10;
  void block[5] = &v8;
  dispatch_sync(v3, block);
  return v10;
}

uint64_t sub_100067C30(uint64_t a1, int a2)
{
  return sub_100067B60(a1 - 120, a2);
}

uint64_t sub_100067C38(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v4 = a1;
  uint64_t v2 = *(dispatch_queue_s **)(a1 + 24);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000LL;
  void v5[2] = sub_10006DB5C;
  _OWORD v5[3] = &unk_100129A08;
  v5[4] = v1;
  v5[5] = &v4;
  int v6 = v5;
  block[0] = _NSConcreteStackBlock;
  unsigned __int8 v8 = -86;
  block[1] = 0x40000000LL;
  block[2] = sub_10006BE88;
  block[3] = &unk_1001296A8;
  void block[4] = &v8;
  void block[5] = &v6;
  dispatch_sync(v2, block);
  return v8;
}

uint64_t sub_100067CFC(uint64_t a1)
{
  return sub_100067C38(a1 - 120);
}

uint64_t sub_100067D04(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v4 = a1;
  uint64_t v2 = *(dispatch_queue_s **)(a1 + 24);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000LL;
  void v5[2] = sub_10006DC84;
  _OWORD v5[3] = &unk_100129A28;
  v5[4] = v1;
  v5[5] = &v4;
  int v6 = v5;
  block[0] = _NSConcreteStackBlock;
  unsigned __int8 v8 = -86;
  block[1] = 0x40000000LL;
  block[2] = sub_10006BE88;
  block[3] = &unk_1001296A8;
  void block[4] = &v8;
  void block[5] = &v6;
  dispatch_sync(v2, block);
  return v8;
}

uint64_t sub_100067DC8(uint64_t a1)
{
  return sub_100067D04(a1 - 128);
}

uint64_t sub_100067DD0(uint64_t a1, int a2)
{
  int v6 = a2;
  uint64_t v2 = a1 + 8;
  v5[0] = a1;
  v5[1] = &v6;
  unsigned __int8 v3 = *(dispatch_queue_s **)(a1 + 24);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000LL;
  _OWORD v7[2] = sub_10006DDF8;
  void v7[3] = &unk_100129A48;
  void v7[4] = v2;
  void v7[5] = v5;
  unsigned __int8 v8 = v7;
  unsigned __int8 v10 = -86;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_10006BE88;
  block[3] = &unk_1001296A8;
  void block[4] = &v10;
  void block[5] = &v8;
  dispatch_sync(v3, block);
  return v10;
}

uint64_t sub_100067EA0(uint64_t a1, int a2)
{
  return sub_100067DD0(a1 - 128, a2);
}

uint64_t sub_100067EA8(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v4 = a1;
  uint64_t v2 = *(dispatch_queue_s **)(a1 + 24);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000LL;
  void v5[2] = sub_10006E014;
  _OWORD v5[3] = &unk_100129A68;
  v5[4] = v1;
  v5[5] = &v4;
  int v6 = v5;
  block[0] = _NSConcreteStackBlock;
  unsigned __int8 v8 = -86;
  block[1] = 0x40000000LL;
  block[2] = sub_10006BE88;
  block[3] = &unk_1001296A8;
  void block[4] = &v8;
  void block[5] = &v6;
  dispatch_sync(v2, block);
  return v8;
}

uint64_t sub_100067F6C(uint64_t a1)
{
  return sub_100067EA8(a1 - 128);
}

uint64_t sub_100067F74(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v4 = a1;
  uint64_t v2 = *(dispatch_queue_s **)(a1 + 24);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000LL;
  void v5[2] = sub_10006E238;
  _OWORD v5[3] = &unk_100129A88;
  v5[4] = v1;
  v5[5] = &v4;
  int v6 = v5;
  block[0] = _NSConcreteStackBlock;
  unsigned __int8 v8 = -86;
  block[1] = 0x40000000LL;
  block[2] = sub_10006BE88;
  block[3] = &unk_1001296A8;
  void block[4] = &v8;
  void block[5] = &v6;
  dispatch_sync(v2, block);
  return v8;
}

uint64_t sub_100068038(uint64_t a1)
{
  return sub_100067F74(a1 - 128);
}

uint64_t sub_100068040(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v4 = a1;
  uint64_t v2 = *(dispatch_queue_s **)(a1 + 24);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000LL;
  void v5[2] = sub_10006E468;
  _OWORD v5[3] = &unk_100129AA8;
  v5[4] = v1;
  v5[5] = &v4;
  int v6 = v5;
  block[0] = _NSConcreteStackBlock;
  unsigned __int8 v8 = -86;
  block[1] = 0x40000000LL;
  block[2] = sub_10006BE88;
  block[3] = &unk_1001296A8;
  void block[4] = &v8;
  void block[5] = &v6;
  dispatch_sync(v2, block);
  return v8;
}

uint64_t sub_100068104(uint64_t a1)
{
  return sub_100068040(a1 - 128);
}

uint64_t sub_10006810C(uint64_t a1, int a2, uint64_t a3, int a4, int a5, int a6, uint64_t a7, uint64_t a8)
{
  int v14 = a4;
  int v15 = a2;
  int v12 = a6;
  int v13 = a5;
  uint64_t v8 = a1 + 8;
  v11[0] = a1;
  v11[1] = a3;
  void v11[2] = &v15;
  void v11[3] = &v14;
  void v11[4] = &v13;
  v11[5] = &v12;
  v11[6] = a7;
  v11[7] = a8;
  unsigned __int8 v9 = *(dispatch_queue_s **)(a1 + 24);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 0x40000000LL;
  v16[2] = sub_10006E6A8;
  void v16[3] = &unk_100129AC8;
  v16[4] = v8;
  v16[5] = v11;
  uint64_t v17 = v16;
  block[0] = _NSConcreteStackBlock;
  unsigned __int8 v19 = -86;
  block[1] = 0x40000000LL;
  block[2] = sub_10006BE88;
  block[3] = &unk_1001296A8;
  void block[4] = &v19;
  void block[5] = &v17;
  dispatch_sync(v9, block);
  return v19;
}

uint64_t sub_1000681F4(uint64_t a1, int a2, uint64_t a3, int a4, int a5, int a6, uint64_t a7, uint64_t a8)
{
  return sub_10006810C(a1 - 120, a2, a3, a4, a5, a6, a7, a8);
}

BOOL sub_1000681FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v16[0] = v6;
  v16[1] = v6;
  sub_100008B44(v16, a3);
  sub_100045378((unsigned __int8 **)v16);
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v14[0] = v7;
  v14[1] = v7;
  sub_100008B44(v14, a3);
  sub_100008AC8((unsigned __int8 **)v14);
  while (1)
  {
    BOOL v8 = sub_1000087E8((unsigned __int8 **)v16, (unsigned __int8 **)v14);
    if (v8) {
      break;
    }
    unsigned __int8 v9 = sub_100008924((unsigned __int8 **)v16);
    uint64_t v10 = sub_10000BD90((uint64_t)v9, 0LL);
    if (!sub_100068334(a1, a2, v10)) {
      break;
    }
    uint64_t v11 = sub_10000BD90((uint64_t)v9, 0LL);
    uint64_t v12 = sub_10000BD90((uint64_t)v9, 1LL);
    if (!sub_100068584(a1, a2, v11, v12)) {
      break;
    }
    sub_100018704((unsigned __int8 **)v16);
  }

  return v8;
}

void sub_100068328(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

BOOL sub_100068334(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6 = (sqlite3_stmt **)(a1 + 208);
  if (*(void *)(a1 + 208)
    || (sub_10004C38C( a1,  "DELETE FROM transform_states WHERE transform_metadata_id IN (SELECT transform_metadata_id FROM transform_metad ata WHERE transform_uuid=?1 LIMIT 1) AND transform_key=?2",  1,  (sqlite3_stmt **)__p),  __int128 v7 = (sqlite3_stmt *)__p[0],  __p[0] = 0LL,  sub_10004C6D4(v6, v7),  sub_10004C6D4((sqlite3_stmt **)__p, 0LL),  *(void *)(a1 + 208)))
  {
    unsigned __int8 v22 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
    sub_100040E10(&v22, v6);
    uint64_t v21 = 0LL;
    sub_10004C11C(a1, v6, 1, a2, &v21);
    memset(__p, 170, sizeof(__p));
    sub_100006200(a3, -1, 0x20u, 0LL, 0, __p);
    sub_10004C11C(a1, v6, 2, (uint64_t)__p, &v21);
    int v8 = sub_10004C0B4(a1, v6, &v21);
    BOOL v9 = v8 == 101;
    if (v8 != 101)
    {
      uint64_t v10 = *(sqlite3 **)(a1 + 32);
      uint64_t v11 = (os_log_s *)qword_100131930;
      BOOL v12 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (v10)
      {
        if (v12)
        {
          int v13 = *(char *)(a2 + 23);
          uint64_t v14 = *(void *)a2;
          unint64_t v15 = sqlite3_errmsg(v10);
          if (v13 >= 0) {
            uint64_t v16 = a2;
          }
          else {
            uint64_t v16 = v14;
          }
          *(_DWORD *)std::string buf = 136446466;
          uint64_t v24 = v16;
          __int16 v25 = 2080;
          __int128 v26 = v15;
          _os_log_error_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "[State Store] Failed to remove keyed transform state for (uuid='%{public}s'); %s",
            buf,
            0x16u);
        }
      }

      else if (v12)
      {
        sub_1000D98A8();
      }
    }

    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    sub_100040E1C(&v22);
  }

  else
  {
    uint64_t v18 = *(sqlite3 **)(a1 + 32);
    BOOL v19 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v18)
    {
      if (v19)
      {
        int v20 = sqlite3_errmsg(v18);
        sub_1000D9874((uint64_t)v20, (uint64_t)__p);
      }
    }

    else if (v19)
    {
      sub_1000D981C();
    }

    return 0LL;
  }

  return v9;
}

void sub_100068578(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

BOOL sub_100068584(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = (sqlite3_stmt **)(a1 + 160);
  if (*(void *)(a1 + 160)
    || (sub_10004C38C( a1,  "INSERT INTO transform_states (transform_metadata_id, transform_key, transform_value) VALUES ((SELECT transform _metadata_id FROM transform_metadata WHERE transform_uuid=?1 LIMIT 1), ?2, ?3)",  1,  (sqlite3_stmt **)v30),  BOOL v9 = (sqlite3_stmt *)v30[0],  v30[0] = 0LL,  sub_10004C6D4(v8, v9),  sub_10004C6D4((sqlite3_stmt **)v30, 0LL),  *(void *)(a1 + 160)))
  {
    __int16 v25 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
    sub_100040E10(&v25, v8);
    uint64_t v24 = 0LL;
    sub_10004C11C(a1, v8, 1, a2, &v24);
    memset(v30, 170, sizeof(v30));
    sub_100006200(a3, -1, 0x20u, 0LL, 0, v30);
    sub_10004C11C(a1, v8, 2, (uint64_t)v30, &v24);
    memset(__p, 170, sizeof(__p));
    sub_100006200(a4, -1, 0x20u, 0LL, 0, __p);
    sub_10004C11C(a1, v8, 3, (uint64_t)__p, &v24);
    int v10 = sub_10004C0B4(a1, v8, &v24);
    uint64_t v11 = *(sqlite3 **)(a1 + 32);
    if (v10 == 101)
    {
      BOOL v12 = sqlite3_last_insert_rowid(*(sqlite3 **)(a1 + 32)) != 0;
    }

    else
    {
      int v13 = (os_log_s *)qword_100131930;
      BOOL v14 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (v11)
      {
        if (v14)
        {
          int v15 = *(char *)(a2 + 23);
          uint64_t v16 = *(void *)a2;
          unint64_t v17 = sqlite3_errmsg(v11);
          if (v15 >= 0) {
            uint64_t v18 = a2;
          }
          else {
            uint64_t v18 = v16;
          }
          *(_DWORD *)std::string buf = 136315394;
          uint64_t v27 = v18;
          __int16 v28 = 2080;
          unsigned __int8 v29 = v17;
          _os_log_error_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "[State Store] Failed to insert transform state for uuid='%s'; %s",
            buf,
            0x16u);
        }
      }

      else if (v14)
      {
        sub_1000D9998();
      }

      BOOL v12 = 0LL;
    }

    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v30[2]) < 0) {
      operator delete(v30[0]);
    }
    sub_100040E1C(&v25);
  }

  else
  {
    int v20 = *(sqlite3 **)(a1 + 32);
    BOOL v21 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v20)
    {
      if (v21)
      {
        unsigned __int8 v22 = sqlite3_errmsg(v20);
        sub_1000D9964((uint64_t)v22, (uint64_t)v30);
      }
    }

    else if (v21)
    {
      sub_1000D990C();
    }

    return 0LL;
  }

  return v12;
}

void sub_100068830(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

BOOL sub_10006883C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!sub_100068980(a1, a2)) {
    return 0LL;
  }
  unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v15[0] = v6;
  v15[1] = v6;
  sub_100008B44(v15, a3);
  sub_100045378((unsigned __int8 **)v15);
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v13[0] = v7;
  v13[1] = v7;
  sub_100008B44(v13, a3);
  sub_100008AC8((unsigned __int8 **)v13);
  while (1)
  {
    BOOL v8 = sub_1000087E8((unsigned __int8 **)v15, (unsigned __int8 **)v13);
    if (v8) {
      break;
    }
    BOOL v9 = sub_100008924((unsigned __int8 **)v15);
    v11[0] = 0;
    BOOL v12 = 0LL;
    sub_1000041AC((uint64_t)v11);
    sub_1000041AC((uint64_t)v11);
    LODWORD(v9) = sub_100068584(a1, a2, (uint64_t)v11, (uint64_t)v9);
    sub_1000041AC((uint64_t)v11);
    sub_10000425C(&v12, v11[0]);
    if (!(_DWORD)v9) {
      break;
    }
    sub_100018704((unsigned __int8 **)v15);
  }

  return v8;
}

void sub_100068974(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

BOOL sub_100068980(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (sqlite3_stmt **)(a1 + 200);
  if (*(void *)(a1 + 200)
    || (sub_10004C38C( a1,  "DELETE FROM transform_states WHERE transform_metadata_id IN (SELECT transform_metadata_id FROM transform_metad ata WHERE transform_uuid=?1 LIMIT 1)",  1,  (sqlite3_stmt **)buf),  uint64_t v5 = *(sqlite3_stmt **)buf,  *(void *)buf = 0LL,  sub_10004C6D4(v4, v5),  sub_10004C6D4((sqlite3_stmt **)buf, 0LL),  *(void *)(a1 + 200)))
  {
    int v20 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
    sub_100040E10(&v20, v4);
    uint64_t v19 = 0LL;
    sub_10004C11C(a1, v4, 1, a2, &v19);
    int v6 = sub_10004C0B4(a1, v4, &v19);
    BOOL v7 = v6 == 101;
    if (v6 != 101)
    {
      BOOL v8 = *(sqlite3 **)(a1 + 32);
      BOOL v9 = (os_log_s *)qword_100131930;
      BOOL v10 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (v8)
      {
        if (v10)
        {
          int v11 = *(char *)(a2 + 23);
          uint64_t v12 = *(void *)a2;
          int v13 = sqlite3_errmsg(v8);
          if (v11 >= 0) {
            uint64_t v14 = a2;
          }
          else {
            uint64_t v14 = v12;
          }
          *(_DWORD *)std::string buf = 136446466;
          *(void *)&uint8_t buf[4] = v14;
          __int16 v22 = 2080;
          uint64_t v23 = v13;
          _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "[State Store] Failed to remove transform_state for (uuid='%{public}s'); %s",
            buf,
            0x16u);
        }
      }

      else if (v10)
      {
        sub_1000D9A88();
      }
    }

    sub_100040E1C(&v20);
  }

  else
  {
    unint64_t v16 = *(sqlite3 **)(a1 + 32);
    BOOL v17 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v16)
    {
      if (v17)
      {
        uint64_t v18 = sqlite3_errmsg(v16);
        sub_1000D9A54((uint64_t)v18, (uint64_t)buf);
      }
    }

    else if (v17)
    {
      sub_1000D99FC();
    }

    return 0LL;
  }

  return v7;
}

void sub_100068B74(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

BOOL sub_100068B80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[0] = 0;
  BOOL v9 = 0LL;
  sub_1000041AC((uint64_t)v8);
  sub_1000041AC((uint64_t)v8);
  BOOL v6 = sub_100068584(a1, a2, (uint64_t)v8, a3);
  sub_1000041AC((uint64_t)v8);
  sub_10000425C(&v9, v8[0]);
  return v6;
}

BOOL sub_100068C30( uint64_t a1, int a2, uint64_t a3, unsigned int a4, unsigned int a5, int a6, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *a7)
{
  uint64_t v14 = (sqlite3_stmt **)(a1 + 168);
  if (*(void *)(a1 + 168)
    || (sub_10004C38C( a1,  "INSERT INTO transform_metadata (transform_uuid, transform_type, transform_budget_used, transform_event_count, agg_session_id) VALUES (?1, ?2, ?3, ?4, (SELECT COALESCE((SELECT agg_session_id FROM agg_session WHERE agg_ses sion_period=?5 AND agg_session_start_timestamp<=?6 ORDER BY agg_session_start_timestamp ASC LIMIT 1), (SELECT agg_session_id FROM agg_session WHERE agg_session_period=?5 ORDER BY agg_session_start_timestamp ASC LIMIT 1)))) ON CONFLICT(transform_uuid) DO UPDATE SET transform_budget_used=?3, transform_event_count=?4 WHERE transform_uuid=?1",  1,  (sqlite3_stmt **)&__p),  int v15 = (sqlite3_stmt *)__p.__r_.__value_.__r.__words[0],  __p.__r_.__value_.__r.__words[0] = 0LL,  sub_10004C6D4(v14, v15),  sub_10004C6D4((sqlite3_stmt **)&__p, 0LL),  *(void *)(a1 + 168)))
  {
    unint64_t v30 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
    sub_100040E10(&v30, v14);
    uint64_t v29 = 0LL;
    sub_10004C11C(a1, v14, 1, a3, &v29);
    __p.__r_.__value_.__r.__words[0] = a2;
    sub_10004C1A4(a1, v14, 2, (sqlite3_int64 *)&__p, &v29);
    __p.__r_.__value_.__r.__words[0] = a4;
    sub_10004C1A4(a1, v14, 3, (sqlite3_int64 *)&__p, &v29);
    __p.__r_.__value_.__r.__words[0] = a5;
    sub_10004C1A4(a1, v14, 4, (sqlite3_int64 *)&__p, &v29);
    __p.__r_.__value_.__r.__words[0] = a6;
    sub_10004C1A4(a1, v14, 5, (sqlite3_int64 *)&__p, &v29);
    memset(&__p, 170, sizeof(__p));
    sub_10003DB6C(*a7, (uint64_t)"%Y-%m-%dT%H:%M:%S", &__p);
    sub_10004C11C(a1, v14, 6, (uint64_t)&__p, &v29);
    int v16 = sub_10004C0B4(a1, v14, &v29);
    BOOL v17 = v16 == 101;
    if (v16 != 101)
    {
      uint64_t v18 = *(sqlite3 **)(a1 + 32);
      uint64_t v19 = (os_log_s *)qword_100131930;
      BOOL v20 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (v18)
      {
        if (v20)
        {
          int v21 = *(char *)(a3 + 23);
          uint64_t v22 = *(void *)a3;
          uint64_t v23 = sqlite3_errmsg(v18);
          if (v21 >= 0) {
            uint64_t v24 = a3;
          }
          else {
            uint64_t v24 = v22;
          }
          *(_DWORD *)std::string buf = 136315394;
          uint64_t v32 = v24;
          __int16 v33 = 2080;
          unint64_t v34 = v23;
          _os_log_error_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "[State Store] Failed to insert transform metadata for uuid='%s'; %s",
            buf,
            0x16u);
        }
      }

      else if (v20)
      {
        sub_1000D9B78();
      }
    }

    sub_100040E1C(&v30);
  }

  else
  {
    __int128 v26 = *(sqlite3 **)(a1 + 32);
    BOOL v27 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v26)
    {
      if (v27)
      {
        __int16 v28 = sqlite3_errmsg(v26);
        sub_1000D9B44((uint64_t)v28, (uint64_t)&__p);
      }
    }

    else if (v27)
    {
      sub_1000D9AEC();
    }

    return 0LL;
  }

  return v17;
}

void sub_100068F0C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

BOOL sub_100068F18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (sqlite3_stmt **)(a1 + 216);
  if (*(void *)(a1 + 216)
    || (sub_10004C38C(a1, "DELETE FROM transform_metadata WHERE transform_uuid=?1", 1, (sqlite3_stmt **)buf),
        uint64_t v5 = *(sqlite3_stmt **)buf,
        *(void *)std::string buf = 0LL,
        sub_10004C6D4(v4, v5),
        sub_10004C6D4((sqlite3_stmt **)buf, 0LL),
        *(void *)(a1 + 216)))
  {
    BOOL v20 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
    sub_100040E10(&v20, v4);
    uint64_t v19 = 0LL;
    sub_10004C11C(a1, v4, 1, a2, &v19);
    int v6 = sub_10004C0B4(a1, v4, &v19);
    BOOL v7 = v6 == 101;
    if (v6 != 101)
    {
      BOOL v8 = *(sqlite3 **)(a1 + 32);
      BOOL v9 = (os_log_s *)qword_100131930;
      BOOL v10 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (v8)
      {
        if (v10)
        {
          int v11 = *(char *)(a2 + 23);
          uint64_t v12 = *(void *)a2;
          int v13 = sqlite3_errmsg(v8);
          if (v11 >= 0) {
            uint64_t v14 = a2;
          }
          else {
            uint64_t v14 = v12;
          }
          *(_DWORD *)std::string buf = 136446466;
          *(void *)&uint8_t buf[4] = v14;
          __int16 v22 = 2080;
          uint64_t v23 = v13;
          _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "[State Store] Failed to remove transform_metadata for (uuid='%{public}s'); %s",
            buf,
            0x16u);
        }
      }

      else if (v10)
      {
        sub_1000D9C68();
      }
    }

    sub_100040E1C(&v20);
  }

  else
  {
    int v16 = *(sqlite3 **)(a1 + 32);
    BOOL v17 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v16)
    {
      if (v17)
      {
        uint64_t v18 = sqlite3_errmsg(v16);
        sub_1000D9C34((uint64_t)v18, (uint64_t)buf);
      }
    }

    else if (v17)
    {
      sub_1000D9BDC();
    }

    return 0LL;
  }

  return v7;
}

void sub_10006910C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

uint64_t sub_100069118(uint64_t a1)
{
  uint64_t v12 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
  sub_10004C38C(a1, "DELETE FROM transform_states", 0, &v12);
  uint64_t v2 = v12;
  unsigned __int8 v3 = *(sqlite3 **)(a1 + 32);
  BOOL v4 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
  if (!v2)
  {
    if (v3)
    {
      if (v4)
      {
        int v6 = sqlite3_errmsg(v3);
        sub_1000D9D24((uint64_t)v6, (uint64_t)v14);
      }
    }

    else if (v4)
    {
      sub_1000D9CCC();
    }

    goto LABEL_19;
  }

  if (v3)
  {
    if (v4)
    {
      uint64_t v5 = sqlite3_errmsg(v3);
      sub_1000D9E3C((uint64_t)v5, (uint64_t)v14);
    }
  }

  else if (v4)
  {
    sub_1000D9DE4();
  }

  v13[0] = 0LL;
  if (sub_10004C0B4(a1, &v12, v13) != 101)
  {
    BOOL v8 = *(sqlite3 **)(a1 + 32);
    BOOL v9 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v8)
    {
      if (v9)
      {
        BOOL v10 = sqlite3_errmsg(v8);
        sub_1000D9DB0((uint64_t)v10, (uint64_t)v13);
      }
    }

    else if (v9)
    {
      sub_1000D9D58();
    }

void sub_100069298(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

uint64_t sub_1000692A4(uint64_t a1)
{
  uint64_t v12 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
  sub_10004C38C(a1, "DELETE FROM transform_metadata", 0, &v12);
  uint64_t v2 = v12;
  unsigned __int8 v3 = *(sqlite3 **)(a1 + 32);
  BOOL v4 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
  if (!v2)
  {
    if (v3)
    {
      if (v4)
      {
        int v6 = sqlite3_errmsg(v3);
        sub_1000D9EC8((uint64_t)v6, (uint64_t)v14);
      }
    }

    else if (v4)
    {
      sub_1000D9E70();
    }

    goto LABEL_19;
  }

  if (v3)
  {
    if (v4)
    {
      uint64_t v5 = sqlite3_errmsg(v3);
      sub_1000D9FE0((uint64_t)v5, (uint64_t)v14);
    }
  }

  else if (v4)
  {
    sub_1000D9F88();
  }

  v13[0] = 0LL;
  if (sub_10004C0B4(a1, &v12, v13) != 101)
  {
    BOOL v8 = *(sqlite3 **)(a1 + 32);
    BOOL v9 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v8)
    {
      if (v9)
      {
        BOOL v10 = sqlite3_errmsg(v8);
        sub_1000D9F54((uint64_t)v10, (uint64_t)v13);
      }
    }

    else if (v9)
    {
      sub_1000D9EFC();
    }

void sub_100069424(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

BOOL sub_100069430(uint64_t a1, int a2)
{
  BOOL v20 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
  sub_10004C38C( a1,  "DELETE FROM transform_states WHERE transform_metadata_id IN (SELECT tm.transform_metadata_id FROM transform_metadata AS tm JOIN agg_session ON tm.agg_session_id = agg_session.agg_session_id WHERE agg_session.agg_session_period = ?1)",  1,  &v20);
  if (v20)
  {
    uint64_t v19 = 0LL;
    __p[0] = (void *)a2;
    sub_10004C1A4(a1, &v20, 1, (sqlite3_int64 *)__p, &v19);
    int v4 = sub_10004C0B4(a1, &v20, &v19);
    BOOL v5 = v4 == 101;
    if (v4 != 101)
    {
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v7 = (os_log_s *)qword_100131930;
      BOOL v8 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (v6)
      {
        if (v8)
        {
          else {
            BOOL v9 = off_100129AE8[a2 - 1];
          }
          sub_100005064(__p, v9);
          int v15 = v22;
          int v16 = (void **)__p[0];
          BOOL v17 = sqlite3_errmsg(*(sqlite3 **)(a1 + 32));
          uint64_t v18 = __p;
          if (v15 < 0) {
            uint64_t v18 = v16;
          }
          *(_DWORD *)std::string buf = 136315394;
          uint64_t v24 = v18;
          __int16 v25 = 2080;
          __int128 v26 = v17;
          _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "[State Store] Failed to remove transforms states for aggregation period='%s'; %s",
            buf,
            0x16u);
          if (v22 < 0) {
            operator delete(__p[0]);
          }
        }
      }

      else if (v8)
      {
        else {
          uint64_t v14 = off_100129AE8[a2 - 1];
        }
        sub_100005064(__p, v14);
        sub_1000DA0A0();
      }
    }
  }

  else
  {
    BOOL v10 = *(sqlite3 **)(a1 + 32);
    BOOL v11 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v10)
    {
      if (v11)
      {
        uint64_t v12 = sqlite3_errmsg(v10);
        sub_1000DA06C((uint64_t)v12, (uint64_t)__p);
      }
    }

    else if (v11)
    {
      sub_1000DA014();
    }

    BOOL v5 = 0LL;
  }

  sub_10004C6D4(&v20, 0LL);
  return v5;
}

void sub_100069668(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

BOOL sub_100069674(uint64_t a1, int a2)
{
  BOOL v20 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
  sub_10004C38C( a1,  "DELETE FROM transform_metadata WHERE agg_session_id IN (SELECT agg_session_id FROM agg_session WHERE agg_session_period = ?1)",  1,  &v20);
  if (v20)
  {
    uint64_t v19 = 0LL;
    __p[0] = (void *)a2;
    sub_10004C1A4(a1, &v20, 1, (sqlite3_int64 *)__p, &v19);
    int v4 = sub_10004C0B4(a1, &v20, &v19);
    BOOL v5 = v4 == 101;
    if (v4 != 101)
    {
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v7 = (os_log_s *)qword_100131930;
      BOOL v8 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (v6)
      {
        if (v8)
        {
          else {
            BOOL v9 = off_100129AE8[a2 - 1];
          }
          sub_100005064(__p, v9);
          int v15 = v22;
          int v16 = (void **)__p[0];
          BOOL v17 = sqlite3_errmsg(*(sqlite3 **)(a1 + 32));
          uint64_t v18 = __p;
          if (v15 < 0) {
            uint64_t v18 = v16;
          }
          *(_DWORD *)std::string buf = 136315394;
          uint64_t v24 = v18;
          __int16 v25 = 2080;
          __int128 v26 = v17;
          _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "[State Store] Failed to remove transforms metadata for aggregation period='%s'; %s",
            buf,
            0x16u);
          if (v22 < 0) {
            operator delete(__p[0]);
          }
        }
      }

      else if (v8)
      {
        else {
          uint64_t v14 = off_100129AE8[a2 - 1];
        }
        sub_100005064(__p, v14);
        sub_1000DA178();
      }
    }
  }

  else
  {
    BOOL v10 = *(sqlite3 **)(a1 + 32);
    BOOL v11 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v10)
    {
      if (v11)
      {
        uint64_t v12 = sqlite3_errmsg(v10);
        sub_1000DA144((uint64_t)v12, (uint64_t)__p);
      }
    }

    else if (v11)
    {
      sub_1000DA0EC();
    }

    BOOL v5 = 0LL;
  }

  sub_10004C6D4(&v20, 0LL);
  return v5;
}

void sub_1000698AC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

BOOL sub_1000698B8(uint64_t a1)
{
  int v13 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
  sub_10004C38C( a1,  "DELETE FROM transform_states WHERE transform_metadata_id IN (SELECT tm.transform_metadata_id FROM transform_metadata AS tm LEFT JOIN agg_session ON tm.agg_session_id = agg_session.agg_session_id WHERE agg_session.agg_session_end_bou ndary <= ?1 OR tm.agg_session_id IS NULL)",  1,  &v13);
  if (v13)
  {
    uint64_t v12 = 0LL;
    memset(&__p, 170, sizeof(__p));
    v2.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    sub_10003DB6C(v2.__d_.__rep_, (uint64_t)"%Y-%m-%dT%H:%M:%S", &__p);
    sub_10004C11C(a1, &v13, 1, (uint64_t)&__p, &v12);
    int v3 = sub_10004C0B4(a1, &v13, &v12);
    BOOL v4 = v3 == 101;
    if (v3 != 101)
    {
      BOOL v5 = *(sqlite3 **)(a1 + 32);
      BOOL v6 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (v5)
      {
        if (v6)
        {
          uint64_t v7 = sqlite3_errmsg(v5);
          sub_1000DA2A8((uint64_t)v7, (uint64_t)v14);
        }
      }

      else if (v6)
      {
        sub_1000DA250();
      }
    }
  }

  else
  {
    BOOL v8 = *(sqlite3 **)(a1 + 32);
    BOOL v9 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v8)
    {
      if (v9)
      {
        BOOL v10 = sqlite3_errmsg(v8);
        sub_1000DA21C((uint64_t)v10, (uint64_t)&__p);
      }
    }

    else if (v9)
    {
      sub_1000DA1C4();
    }

    BOOL v4 = 0LL;
  }

  sub_10004C6D4(&v13, 0LL);
  return v4;
}

void sub_100069A50(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

BOOL sub_100069A5C(uint64_t a1)
{
  int v13 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
  sub_10004C38C( a1,  "DELETE FROM transform_metadata WHERE agg_session_id IN (SELECT agg_session_id FROM agg_session WHERE agg_session_end _boundary <= ?1) OR agg_session_id IS NULL",  1,  &v13);
  if (v13)
  {
    uint64_t v12 = 0LL;
    memset(&__p, 170, sizeof(__p));
    v2.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    sub_10003DB6C(v2.__d_.__rep_, (uint64_t)"%Y-%m-%dT%H:%M:%S", &__p);
    sub_10004C11C(a1, &v13, 1, (uint64_t)&__p, &v12);
    int v3 = sub_10004C0B4(a1, &v13, &v12);
    BOOL v4 = v3 == 101;
    if (v3 != 101)
    {
      BOOL v5 = *(sqlite3 **)(a1 + 32);
      BOOL v6 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (v5)
      {
        if (v6)
        {
          uint64_t v7 = sqlite3_errmsg(v5);
          sub_1000DA3C0((uint64_t)v7, (uint64_t)v14);
        }
      }

      else if (v6)
      {
        sub_1000DA368();
      }
    }
  }

  else
  {
    BOOL v8 = *(sqlite3 **)(a1 + 32);
    BOOL v9 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v8)
    {
      if (v9)
      {
        BOOL v10 = sqlite3_errmsg(v8);
        sub_1000DA334((uint64_t)v10, (uint64_t)&__p);
      }
    }

    else if (v9)
    {
      sub_1000DA2DC();
    }

    BOOL v4 = 0LL;
  }

  sub_10004C6D4(&v13, 0LL);
  return v4;
}

void sub_100069BF4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

BOOL sub_100069C00(uint64_t a1, int a2)
{
  BOOL v9 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
  sub_10004C38C(a1, "SELECT 1 FROM agg_session WHERE agg_session_period=?1", 1, &v9);
  if (v9)
  {
    v10[0] = a2;
    sub_10004C1E4(a1, &v9, 1, v10);
    BOOL v4 = sub_10004C078(a1, &v9) == 100;
  }

  else
  {
    BOOL v5 = *(sqlite3 **)(a1 + 32);
    BOOL v6 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v5)
    {
      if (v6)
      {
        uint64_t v7 = sqlite3_errmsg(v5);
        sub_1000DA44C((uint64_t)v7, (uint64_t)v10);
      }
    }

    else if (v6)
    {
      sub_1000DA3F4();
    }

    BOOL v4 = 0LL;
  }

  sub_10004C6D4(&v9, 0LL);
  return v4;
}

void sub_100069D10(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

BOOL sub_100069D1C(uint64_t a1, int a2, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *a3)
{
  __int16 v25 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
  sub_10004C38C(a1, "INSERT INTO agg_session (agg_session_end_boundary, agg_session_period) VALUES (?1, ?2)", 1, &v25);
  if (v25)
  {
    uint64_t v24 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
    sub_100040E10(&v24, &v25);
    uint64_t v23 = 0LL;
    memset(&__p, 170, sizeof(__p));
    sub_10003DB6C(*a3, (uint64_t)"%Y-%m-%dT%H:%M:%S", &__p);
    sub_10004C11C(a1, &v25, 1, (uint64_t)&__p, &v23);
    v21[0] = (void *)a2;
    sub_10004C1A4(a1, &v25, 2, (sqlite3_int64 *)v21, &v23);
    int v6 = sub_10004C0B4(a1, &v25, &v23);
    BOOL v7 = v6 == 101;
    if (v6 != 101)
    {
      uint64_t v8 = *(void *)(a1 + 32);
      BOOL v9 = (os_log_s *)qword_100131930;
      BOOL v10 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (v8)
      {
        if (v10)
        {
          else {
            BOOL v11 = off_100129AE8[a2 - 1];
          }
          sub_100005064(v21, v11);
          int v17 = v22;
          uint64_t v18 = (void **)v21[0];
          uint64_t v19 = sqlite3_errmsg(*(sqlite3 **)(a1 + 32));
          BOOL v20 = v21;
          if (v17 < 0) {
            BOOL v20 = v18;
          }
          *(_DWORD *)std::string buf = 136315394;
          BOOL v27 = v20;
          __int16 v28 = 2080;
          uint64_t v29 = v19;
          _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "[State Store] Failed to insert aggregation session for aggregation period='%s'; %s",
            buf,
            0x16u);
          if (v22 < 0) {
            operator delete(v21[0]);
          }
        }
      }

      else if (v10)
      {
        else {
          int v16 = off_100129AE8[a2 - 1];
        }
        sub_100005064(v21, v16);
        sub_1000DA50C();
      }
    }

    sub_100040E1C(&v24);
  }

  else
  {
    uint64_t v12 = *(sqlite3 **)(a1 + 32);
    BOOL v13 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v12)
    {
      if (v13)
      {
        uint64_t v14 = sqlite3_errmsg(v12);
        sub_1000DA4D8((uint64_t)v14, (uint64_t)&__p);
      }
    }

    else if (v13)
    {
      sub_1000DA480();
    }

    BOOL v7 = 0LL;
  }

  sub_10004C6D4(&v25, 0LL);
  return v7;
}

void sub_100069FB8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

BOOL sub_100069FC4(uint64_t a1)
{
  BOOL v13 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
  sub_10004C38C(a1, "DELETE FROM agg_session WHERE agg_session_end_boundary <= ?1", 1, &v13);
  if (v13)
  {
    uint64_t v12 = 0LL;
    memset(&__p, 170, sizeof(__p));
    v2.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    sub_10003DB6C(v2.__d_.__rep_, (uint64_t)"%Y-%m-%dT%H:%M:%S", &__p);
    sub_10004C11C(a1, &v13, 1, (uint64_t)&__p, &v12);
    int v3 = sub_10004C0B4(a1, &v13, &v12);
    BOOL v4 = v3 == 101;
    if (v3 != 101)
    {
      BOOL v5 = *(sqlite3 **)(a1 + 32);
      BOOL v6 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (v5)
      {
        if (v6)
        {
          BOOL v7 = sqlite3_errmsg(v5);
          sub_1000DA63C((uint64_t)v7, (uint64_t)v14);
        }
      }

      else if (v6)
      {
        sub_1000DA5E4();
      }
    }
  }

  else
  {
    uint64_t v8 = *(sqlite3 **)(a1 + 32);
    BOOL v9 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v8)
    {
      if (v9)
      {
        BOOL v10 = sqlite3_errmsg(v8);
        sub_1000DA5B0((uint64_t)v10, (uint64_t)&__p);
      }
    }

    else if (v9)
    {
      sub_1000DA558();
    }

    BOOL v4 = 0LL;
  }

  sub_10004C6D4(&v13, 0LL);
  return v4;
}

void sub_10006A15C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

BOOL sub_10006A168(uint64_t a1)
{
  uint64_t v12 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
  sub_10004C38C(a1, "DELETE FROM agg_session", 1, &v12);
  if (v12)
  {
    uint64_t v11 = 0LL;
    int v2 = sub_10004C0B4(a1, &v12, &v11);
    BOOL v3 = v2 == 101;
    if (v2 != 101)
    {
      BOOL v4 = *(sqlite3 **)(a1 + 32);
      BOOL v5 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (v4)
      {
        if (v5)
        {
          BOOL v6 = sqlite3_errmsg(v4);
          sub_1000DA754((uint64_t)v6, (uint64_t)v13);
        }
      }

      else if (v5)
      {
        sub_1000DA6FC();
      }
    }
  }

  else
  {
    BOOL v7 = *(sqlite3 **)(a1 + 32);
    BOOL v8 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v7)
    {
      if (v8)
      {
        BOOL v9 = sqlite3_errmsg(v7);
        sub_1000DA6C8((uint64_t)v9, (uint64_t)v13);
      }
    }

    else if (v8)
    {
      sub_1000DA670();
    }

    BOOL v3 = 0LL;
  }

  sub_10004C6D4(&v12, 0LL);
  return v3;
}

void sub_10006A2BC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

BOOL sub_10006A2C8(uint64_t a1, int a2)
{
  uint64_t v14 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
  sub_10004C38C(a1, "DELETE FROM agg_session WHERE agg_session_period = ?1", 1, &v14);
  if (v14)
  {
    uint64_t v13 = 0LL;
    v15[0] = a2;
    sub_10004C1A4(a1, &v14, 1, v15, &v13);
    int v4 = sub_10004C0B4(a1, &v14, &v13);
    BOOL v5 = v4 == 101;
    if (v4 != 101)
    {
      BOOL v6 = *(sqlite3 **)(a1 + 32);
      BOOL v7 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (v6)
      {
        if (v7)
        {
          BOOL v8 = sqlite3_errmsg(v6);
          sub_1000DA86C((uint64_t)v8, (uint64_t)v15);
        }
      }

      else if (v7)
      {
        sub_1000DA814();
      }
    }
  }

  else
  {
    BOOL v9 = *(sqlite3 **)(a1 + 32);
    BOOL v10 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v9)
    {
      if (v10)
      {
        uint64_t v11 = sqlite3_errmsg(v9);
        sub_1000DA7E0((uint64_t)v11, (uint64_t)v15);
      }
    }

    else if (v10)
    {
      sub_1000DA788();
    }

    BOOL v5 = 0LL;
  }

  sub_10004C6D4(&v14, 0LL);
  return v5;
}

void sub_10006A440(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

BOOL sub_10006A44C(uint64_t a1)
{
  int v2 = (os_log_s *)qword_100131930;
  if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "[State Store] DATABASE INITIALIZATION: modifying for V1 schema",  v12,  2u);
  }

  int v3 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n CREATE TABLE queried_states\n (\n queried_state_id INTEGER PRIMARY KEY ASC,\n queried_state_name STRING UNIQUE,\n queried_state_params STRING,\n queried_state_value STRING,\n queried_state_error STRING,\n queried_state_last_modified TEXT DEFAULT (strftime('%s', 'now')),\n queried_state_ttl INTEGER,\n CONSTRAINT queried_state_identifier UNIQUE (queried_state_name, queried_state_params)\n)\n ",  0LL,  0LL,  0LL);
  int v4 = *(sqlite3 **)(a1 + 32);
  if (v3)
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v4)
    {
      if (!result) {
        return result;
      }
      BOOL v6 = sqlite3_errmsg(v4);
      sub_1000DAA10((uint64_t)v6, (uint64_t)v12);
    }

    else
    {
      if (!result) {
        return result;
      }
      sub_1000DA9B8();
    }
  }

  else
  {
    int v7 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n CREATE TRIGGER update_queried_state_last_modified_time AFTER UPDATE ON queried_states\n BEGIN\n UPDATE queried_states SET queried_state_last_modified = strftime('%s', 'now') WHERE  queried _state_id = new.queried_state_id;\n"
           "         END\n"
           "    ",
           0LL,
           0LL,
           0LL);
    BOOL v8 = *(sqlite3 **)(a1 + 32);
    if (v7)
    {
      BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (v8)
      {
        if (!result) {
          return result;
        }
        BOOL v9 = sqlite3_errmsg(v8);
        sub_1000DA984((uint64_t)v9, (uint64_t)v12);
      }

      else
      {
        if (!result) {
          return result;
        }
        sub_1000DA92C();
      }
    }

    else
    {
      if (!sqlite3_exec( *(sqlite3 **)(a1 + 32),  "CREATE UNIQUE INDEX index1 ON queried_states(queried_state_name, queried_state_params);",
              0LL,
              0LL,
              0LL))
        return sub_10004C424(a1, 1);
      BOOL v10 = *(sqlite3 **)(a1 + 32);
      BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (v10)
      {
        if (!result) {
          return result;
        }
        uint64_t v11 = sqlite3_errmsg(v10);
        sub_1000DA8F8((uint64_t)v11, (uint64_t)v12);
      }

      else
      {
        if (!result) {
          return result;
        }
        sub_1000DA8A0();
      }
    }
  }

  return 0LL;
}

void sub_10006A628(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

BOOL sub_10006A634(uint64_t a1)
{
  int v2 = (os_log_s *)qword_100131930;
  if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v21 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "[State Store] DATABASE INITIALIZATION: modifying for V2 schema",  v21,  2u);
  }

  int v3 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n CREATE TABLE transform_states\n (\n transform_state_id INTEGER PRIMARY KEY ASC,\n transform_uuid STRING,\n transform_key STRING,\n transform_value STRING,\n CONSTRAINT fk_transform_states_transform_metadata FOREIGN KEY (transform_uuid) REFERENCES transform_m etadata(transform_uuid)\n)\n ",  0LL,  0LL,  0LL);
  int v4 = *(sqlite3 **)(a1 + 32);
  if (v3)
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v4)
    {
      if (!result) {
        return result;
      }
      BOOL v6 = sqlite3_errmsg(v4);
      sub_1000DAD58((uint64_t)v6, (uint64_t)v21);
    }

    else
    {
      if (!result) {
        return result;
      }
      sub_1000DAD00();
    }
  }

  else
  {
    int v7 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n CREATE TABLE transform_metadata\n (\n transform_metdata_id INTEGER PRIMARY KEY ASC,\n transform_type INTEGER,\n transform_uuid STRING UNIQUE,\n transform_budget_used INTEGER,\n transform_other_metadata STRING DEFAULT 'null',\n transform_metadata_created_at TEXT DEFAULT (strftime('%s', 'now'))\n)\n ",  0LL,  0LL,  0LL);
    BOOL v8 = *(sqlite3 **)(a1 + 32);
    if (v7)
    {
      BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (v8)
      {
        if (!result) {
          return result;
        }
        BOOL v9 = sqlite3_errmsg(v8);
        sub_1000DACCC((uint64_t)v9, (uint64_t)v21);
      }

      else
      {
        if (!result) {
          return result;
        }
        sub_1000DAC74();
      }
    }

    else
    {
      int v10 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "CREATE INDEX index2 ON transform_states(transform_uuid);",
              0LL,
              0LL,
              0LL);
      uint64_t v11 = *(sqlite3 **)(a1 + 32);
      if (v10)
      {
        BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
        if (v11)
        {
          if (!result) {
            return result;
          }
          uint64_t v12 = sqlite3_errmsg(v11);
          sub_1000DAC40((uint64_t)v12, (uint64_t)v21);
        }

        else
        {
          if (!result) {
            return result;
          }
          sub_1000DABE8();
        }
      }

      else
      {
        int v13 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "CREATE INDEX index3 ON transform_states(transform_key);",
                0LL,
                0LL,
                0LL);
        uint64_t v14 = *(sqlite3 **)(a1 + 32);
        if (v13)
        {
          BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
          if (v14)
          {
            if (!result) {
              return result;
            }
            int v15 = sqlite3_errmsg(v14);
            sub_1000DABB4((uint64_t)v15, (uint64_t)v21);
          }

          else
          {
            if (!result) {
              return result;
            }
            sub_1000DAB5C();
          }
        }

        else
        {
          int v16 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "CREATE UNIQUE INDEX index4 ON transform_metadata(transform_uuid);",
                  0LL,
                  0LL,
                  0LL);
          int v17 = *(sqlite3 **)(a1 + 32);
          if (v16)
          {
            BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
            if (v17)
            {
              if (!result) {
                return result;
              }
              uint64_t v18 = sqlite3_errmsg(v17);
              sub_1000DAB28((uint64_t)v18, (uint64_t)v21);
            }

            else
            {
              if (!result) {
                return result;
              }
              sub_1000DAAD0();
            }
          }

          else
          {
            if (!sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n CREATE VIEW transform_metadata_and_states AS\n SELECT tm.transform_uuid, tm.transform_type, tm.transform_budget_used, tm.transform_other _metadata, tm.transform_metadata_created_at, tb.transform_key, tb.transform_value\n FROM transform_states AS tb\n INNER JOIN transform_metadata AS tm\n ON tb.transform_uuid=tm.transform_uuid\n ",  0LL,  0LL,  0LL)) {
              return sub_10004C424(a1, 2);
            }
            uint64_t v19 = *(sqlite3 **)(a1 + 32);
            BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
            if (v19)
            {
              if (!result) {
                return result;
              }
              BOOL v20 = sqlite3_errmsg(v19);
              sub_1000DAA9C((uint64_t)v20, (uint64_t)v21);
            }

            else
            {
              if (!result) {
                return result;
              }
              sub_1000DAA44();
            }
          }
        }
      }
    }
  }

  return 0LL;
}

void sub_10006A93C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

BOOL sub_10006A948(uint64_t a1)
{
  int v2 = (os_log_s *)qword_100131930;
  if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unint64_t v30 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "[State Store] DATABASE INITIALIZATION: modifying for V3 schema",  v30,  2u);
  }

  int v3 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n         DROP VIEW transform_metadata_and_states;\n    ", 0LL, 0LL, 0LL);
  int v4 = *(sqlite3 **)(a1 + 32);
  if (v3)
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v4)
    {
      if (!result) {
        return result;
      }
      BOOL v6 = sqlite3_errmsg(v4);
      sub_1000DB244((uint64_t)v6, (uint64_t)v30);
    }

    else
    {
      if (!result) {
        return result;
      }
      sub_1000DB1EC();
    }
  }

  else
  {
    int v7 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n ALTER TABLE transform_metadata\n RENAME COLUMN transform_metdata_id TO transform_metadata_id;\n"
           "    ",
           0LL,
           0LL,
           0LL);
    BOOL v8 = *(sqlite3 **)(a1 + 32);
    if (v7)
    {
      BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (v8)
      {
        if (!result) {
          return result;
        }
        BOOL v9 = sqlite3_errmsg(v8);
        sub_1000DB1B8((uint64_t)v9, (uint64_t)v30);
      }

      else
      {
        if (!result) {
          return result;
        }
        sub_1000DB160();
      }
    }

    else
    {
      int v10 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n CREATE TABLE transform_states_new\n (\n transform_state_id INTEGER PRIMARY KEY ASC,\n transform_metadata_id INTEGER NOT NULL,\n transform_key STRING,\n transform_value STRING,\n CONSTRAINT fk_transform_states_transform_metadata_id FOREIGN KEY (transform_metadata_id) REFERENCES transform_metadata(transform_metadata_id)\n)\n ",  0LL,  0LL,  0LL);
      uint64_t v11 = *(sqlite3 **)(a1 + 32);
      if (v10)
      {
        BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
        if (v11)
        {
          if (!result) {
            return result;
          }
          uint64_t v12 = sqlite3_errmsg(v11);
          sub_1000DB12C((uint64_t)v12, (uint64_t)v30);
        }

        else
        {
          if (!result) {
            return result;
          }
          sub_1000DB0D4();
        }
      }

      else
      {
        int v13 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n INSERT INTO transform_states_new (transform_state_id, transform_metadata_id, transform_key, tra nsform_value) SELECT ts.transform_state_id, tm.transform_metadata_id, ts.transform_key, ts.transform_val ue\n FROM transform_states AS ts\n INNER JOIN transform_metadata AS tm\n ON ts.transform_uuid=tm.transform_uuid;\n"
                "    ",
                0LL,
                0LL,
                0LL);
        uint64_t v14 = *(sqlite3 **)(a1 + 32);
        if (v13)
        {
          BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
          if (v14)
          {
            if (!result) {
              return result;
            }
            int v15 = sqlite3_errmsg(v14);
            sub_1000DB0A0((uint64_t)v15, (uint64_t)v30);
          }

          else
          {
            if (!result) {
              return result;
            }
            sub_1000DB048();
          }
        }

        else
        {
          int v16 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n        DROP TABLE transform_states;\n    ", 0LL, 0LL, 0LL);
          int v17 = *(sqlite3 **)(a1 + 32);
          if (v16)
          {
            BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
            if (v17)
            {
              if (!result) {
                return result;
              }
              uint64_t v18 = sqlite3_errmsg(v17);
              sub_1000DB014((uint64_t)v18, (uint64_t)v30);
            }

            else
            {
              if (!result) {
                return result;
              }
              sub_1000DAFBC();
            }
          }

          else
          {
            int v19 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n      ALTER TABLE transform_states_new\n      RENAME TO transform_states;\n    ",
                    0LL,
                    0LL,
                    0LL);
            BOOL v20 = *(sqlite3 **)(a1 + 32);
            if (v19)
            {
              BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
              if (v20)
              {
                if (!result) {
                  return result;
                }
                int v21 = sqlite3_errmsg(v20);
                sub_1000DAF88((uint64_t)v21, (uint64_t)v30);
              }

              else
              {
                if (!result) {
                  return result;
                }
                sub_1000DAF30();
              }
            }

            else
            {
              int v22 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "CREATE INDEX index2 ON transform_states(transform_metadata_id);",
                      0LL,
                      0LL,
                      0LL);
              uint64_t v23 = *(sqlite3 **)(a1 + 32);
              if (v22)
              {
                BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
                if (v23)
                {
                  if (!result) {
                    return result;
                  }
                  uint64_t v24 = sqlite3_errmsg(v23);
                  sub_1000DAEFC((uint64_t)v24, (uint64_t)v30);
                }

                else
                {
                  if (!result) {
                    return result;
                  }
                  sub_1000DAEA4();
                }
              }

              else
              {
                int v25 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "CREATE INDEX index3 ON transform_states(transform_key);",
                        0LL,
                        0LL,
                        0LL);
                __int128 v26 = *(sqlite3 **)(a1 + 32);
                if (v25)
                {
                  BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
                  if (v26)
                  {
                    if (!result) {
                      return result;
                    }
                    BOOL v27 = sqlite3_errmsg(v26);
                    sub_1000DAE70((uint64_t)v27, (uint64_t)v30);
                  }

                  else
                  {
                    if (!result) {
                      return result;
                    }
                    sub_1000DAE18();
                  }
                }

                else
                {
                  if (!sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n CREATE VIEW transform_metadata_and_states AS\n SELECT tm.transform_uuid, tm.transform_type, tm.transform_budget_used, tm.transform _other_metadata, tm.transform_metadata_created_at, ts.transform_key, ts.transform_value, ts.tr ansform_state_id, tm.transform_metadata_id\n FROM transform_states AS ts\n INNER JOIN transform_metadata AS tm\n ON ts.transform_metadata_id=tm.transform_metadata_id\n ",  0LL,  0LL,  0LL)) {
                    return sub_10004C424(a1, 3);
                  }
                  __int16 v28 = *(sqlite3 **)(a1 + 32);
                  BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
                  if (v28)
                  {
                    if (!result) {
                      return result;
                    }
                    uint64_t v29 = sqlite3_errmsg(v28);
                    sub_1000DADE4((uint64_t)v29, (uint64_t)v30);
                  }

                  else
                  {
                    if (!result) {
                      return result;
                    }
                    sub_1000DAD8C();
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  return 0LL;
}

void sub_10006AD7C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

BOOL sub_10006AD88(uint64_t a1)
{
  int v2 = (os_log_s *)qword_100131930;
  if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v15 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "[State Store] DATABASE INITIALIZATION: modifying for V4 schema",  v15,  2u);
  }

  int v3 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n CREATE TABLE agg_session\n (\n agg_session_id INTEGER PRIMARY KEY ASC,\n agg_session_start_timestamp TEXT DEFAULT (strftime('%Y-%m-%dT%H:%M:%S', 'now')),\n agg_session_end_boundary TEXT,\n agg_session_period INTEGER\n)\n ",  0LL,  0LL,  0LL);
  int v4 = *(sqlite3 **)(a1 + 32);
  if (v3)
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v4)
    {
      if (!result) {
        return result;
      }
      BOOL v6 = sqlite3_errmsg(v4);
      sub_1000DB474((uint64_t)v6, (uint64_t)v15);
    }

    else
    {
      if (!result) {
        return result;
      }
      sub_1000DB41C();
    }
  }

  else
  {
    int v7 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n ALTER TABLE transform_metadata\n ADD COLUMN agg_session_id INTEGER REFERENCES agg_session(agg_session_id)\n ",  0LL,  0LL,  0LL);
    BOOL v8 = *(sqlite3 **)(a1 + 32);
    if (v7)
    {
      BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (v8)
      {
        if (!result) {
          return result;
        }
        BOOL v9 = sqlite3_errmsg(v8);
        sub_1000DB3E8((uint64_t)v9, (uint64_t)v15);
      }

      else
      {
        if (!result) {
          return result;
        }
        sub_1000DB390();
      }
    }

    else
    {
      int v10 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "CREATE INDEX IX_agg_session_agg_session_end_boundary ON agg_session(agg_session_end_boundary);",
              0LL,
              0LL,
              0LL);
      uint64_t v11 = *(sqlite3 **)(a1 + 32);
      if (v10)
      {
        BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
        if (v11)
        {
          if (!result) {
            return result;
          }
          uint64_t v12 = sqlite3_errmsg(v11);
          sub_1000DB35C((uint64_t)v12, (uint64_t)v15);
        }

        else
        {
          if (!result) {
            return result;
          }
          sub_1000DB304();
        }
      }

      else
      {
        if (!sqlite3_exec( *(sqlite3 **)(a1 + 32),  "CREATE INDEX IX_agg_session_agg_session_period_agg_session_start_timestamp ON agg_session(agg_session_pe riod, agg_session_start_timestamp);",
                0LL,
                0LL,
                0LL))
          return sub_10004C424(a1, 4);
        int v13 = *(sqlite3 **)(a1 + 32);
        BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
        if (v13)
        {
          if (!result) {
            return result;
          }
          uint64_t v14 = sqlite3_errmsg(v13);
          sub_1000DB2D0((uint64_t)v14, (uint64_t)v15);
        }

        else
        {
          if (!result) {
            return result;
          }
          sub_1000DB278();
        }
      }
    }
  }

  return 0LL;
}

void sub_10006AFC8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

BOOL sub_10006AFD4(uint64_t a1)
{
  int v2 = (os_log_s *)qword_100131930;
  if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "[State Store] DATABASE INITIALIZATION: modifying for V5 schema",  v18,  2u);
  }

  int v3 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n      ALTER TABLE transform_metadata\n      ADD COLUMN transform_event_count INTEGER DEFAULT 0\n    ",  0LL,  0LL,  0LL);
  int v4 = *(sqlite3 **)(a1 + 32);
  if (v3)
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v4)
    {
      if (!result) {
        return result;
      }
      BOOL v6 = sqlite3_errmsg(v4);
      sub_1000DB6A4((uint64_t)v6, (uint64_t)v18);
    }

    else
    {
      if (!result) {
        return result;
      }
      sub_1000DB64C();
    }
  }

  else
  {
    int v7 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n UPDATE transform_metadata SET transform_event_count=CAST(REPLACE(REPLACE(transform_other_metadata,'{ev entsSeen_:',''), '}', '') AS INTEGER) WHERE transform_other_metadata!=null;\n"
           "    ",
           0LL,
           0LL,
           0LL);
    BOOL v8 = *(sqlite3 **)(a1 + 32);
    if (v7)
    {
      BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (v8)
      {
        if (!result) {
          return result;
        }
        BOOL v9 = sqlite3_errmsg(v8);
        sub_1000DB618((uint64_t)v9, (uint64_t)v18);
      }

      else
      {
        if (!result) {
          return result;
        }
        sub_1000DB5C0();
      }
    }

    else
    {
      int v10 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n      ALTER TABLE transform_metadata\n      DROP COLUMN transform_other_metadata;\n    ",
              0LL,
              0LL,
              0LL);
      uint64_t v11 = *(sqlite3 **)(a1 + 32);
      if (v10)
      {
        BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
        if (v11)
        {
          if (!result) {
            return result;
          }
          uint64_t v12 = sqlite3_errmsg(v11);
          sub_1000DB58C((uint64_t)v12, (uint64_t)v18);
        }

        else
        {
          if (!result) {
            return result;
          }
          sub_1000DB534();
        }
      }

      else
      {
        int v13 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "CREATE INDEX IX_transform_metadata_transform_event_count ON transform_metadata(transform_event_count);",
                0LL,
                0LL,
                0LL);
        uint64_t v14 = *(sqlite3 **)(a1 + 32);
        if (v13)
        {
          BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
          if (v14)
          {
            if (!result) {
              return result;
            }
            int v15 = sqlite3_errmsg(v14);
            sub_1000DB500((uint64_t)v15, (uint64_t)v18);
          }

          else
          {
            if (!result) {
              return result;
            }
            sub_1000DB4A8();
          }
        }

        else
        {
          if (!sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n DROP VIEW transform_metadata_and_states; CREATE VIEW transform_metadata_and_states AS\n"
                  "           SELECT transform_metadata.*, transform_states.*\n"
                  "           FROM transform_metadata\n"
                  "           LEFT JOIN transform_states\n"
                  "           ON transform_metadata.transform_metadata_id=transform_states.transform_metadata_id\n"
                  "    ",
                  0LL,
                  0LL,
                  0LL))
            return sub_10004C424(a1, 5);
          int v16 = *(sqlite3 **)(a1 + 32);
          BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
          if (v16)
          {
            if (!result) {
              return result;
            }
            int v17 = sqlite3_errmsg(v16);
            sub_1000DADE4((uint64_t)v17, (uint64_t)v18);
          }

          else
          {
            if (!result) {
              return result;
            }
            sub_1000DAD8C();
          }
        }
      }
    }
  }

  return 0LL;
}

void sub_10006B278(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

BOOL sub_10006B284(uint64_t a1)
{
  int v2 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n CREATE TABLE queried_states_new\n (\n queried_state_id INTEGER PRIMARY KEY ASC,\n queried_state_name STRING,\n queried_state_params STRING,\n queried_state_value STRING,\n queried_state_error STRING,\n queried_state_last_modified TEXT DEFAULT (strftime('%s', 'now')),\n queried_state_ttl INTEGER\n)\n ",  0LL,  0LL,  0LL);
  int v3 = *(sqlite3 **)(a1 + 32);
  if (v2)
  {
    BOOL v4 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v3)
    {
      if (v4)
      {
        BOOL v5 = sqlite3_errmsg(v3);
        sub_1000DB960((uint64_t)v5, (uint64_t)v22);
      }
    }

    else if (v4)
    {
      sub_1000DB908();
    }
  }

  else
  {
    int v6 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n INSERT INTO queried_states_new (queried_state_id, queried_state_name, queried_state_params, queried_ state_value, queried_state_error, queried_state_last_modified, queried_state_ttl) SELECT qs.queried_state_id, qs.queried_state_name, qs.queried_state_params, qs.queried_state_value, qs.queried_state_error, qs.queried_s tate_last_modified, qs.queried_state_ttl\n FROM queried_states AS qs;\n"
           "    ",
           0LL,
           0LL,
           0LL);
    int v7 = *(sqlite3 **)(a1 + 32);
    if (v6)
    {
      BOOL v8 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (v7)
      {
        if (v8)
        {
          BOOL v9 = sqlite3_errmsg(v7);
          sub_1000DB8D4((uint64_t)v9, (uint64_t)v22);
        }
      }

      else if (v8)
      {
        sub_1000DB87C();
      }
    }

    else
    {
      int v10 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n        DROP TABLE queried_states; ALTER TABLE queried_states_new RENAME TO queried_states;\n    ",
              0LL,
              0LL,
              0LL);
      uint64_t v11 = *(sqlite3 **)(a1 + 32);
      if (v10)
      {
        BOOL v12 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
        if (v11)
        {
          if (v12)
          {
            int v13 = sqlite3_errmsg(v11);
            sub_1000DB848((uint64_t)v13, (uint64_t)v22);
          }
        }

        else if (v12)
        {
          sub_1000DB7F0();
        }
      }

      else
      {
        int v14 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n CREATE TRIGGER update_queried_state_last_modified_time AFTER UPDATE ON queried_states\n BEGIN\n UPDATE queried_states SET queried_state_last_modified = strftime('%s', 'now') WHERE  qu eried_state_id = new.queried_state_id;\n"
                "         END\n"
                "    ",
                0LL,
                0LL,
                0LL);
        int v15 = *(sqlite3 **)(a1 + 32);
        if (v14)
        {
          BOOL v16 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
          if (v15)
          {
            if (v16)
            {
              int v17 = sqlite3_errmsg(v15);
              sub_1000DB7BC((uint64_t)v17, (uint64_t)v22);
            }
          }

          else if (v16)
          {
            sub_1000DB764();
          }
        }

        else
        {
          if (!sqlite3_exec( *(sqlite3 **)(a1 + 32),  "CREATE UNIQUE INDEX UIX_queried_states_queried_state_name_queried_state_params ON queried_states(queri ed_state_name, queried_state_params);",
                  0LL,
                  0LL,
                  0LL))
            return sub_10004C424(a1, 6);
          uint64_t v18 = *(sqlite3 **)(a1 + 32);
          BOOL v19 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
          if (v18)
          {
            if (v19)
            {
              BOOL v20 = sqlite3_errmsg(v18);
              sub_1000DB730((uint64_t)v20, (uint64_t)v22);
            }
          }

          else if (v19)
          {
            sub_1000DB6D8();
          }
        }
      }
    }
  }

  return 0LL;
}

void sub_10006B538(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

BOOL sub_10006B544(uint64_t a1)
{
  int v2 = (os_log_s *)qword_100131930;
  if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v12) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "[State Store] DATABASE INITIALIZATION: begin schema migration",  (uint8_t *)&v12,  2u);
  }

  if (!sub_10004BE44(a1))
  {
    unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
    sub_100040F2C((uint64_t)&v12, (void *)(a1 + 32));
    if (!BYTE1(v13))
    {
      BOOL v4 = *(sqlite3 **)(a1 + 32);
      BOOL v5 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (!v4)
      {
        if (!v5) {
          goto LABEL_29;
        }
        goto LABEL_59;
      }

      if (!v5) {
        goto LABEL_29;
      }
LABEL_53:
      uint64_t v11 = sqlite3_errmsg(v4);
      sub_1000DB9EC((uint64_t)v11, (uint64_t)v14);
      goto LABEL_29;
    }

    if (!sub_10006A44C(a1)) {
      goto LABEL_28;
    }
    sub_100041054((uint64_t)&v12);
    sub_100041140((uint64_t)&v12);
  }

  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  sub_100040F2C((uint64_t)&v12, (void *)(a1 + 32));
  if (!BYTE1(v13))
  {
    BOOL v4 = *(sqlite3 **)(a1 + 32);
    BOOL v6 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (!v4)
    {
      if (!v6) {
        goto LABEL_29;
      }
      goto LABEL_59;
    }

    if (!v6) {
      goto LABEL_29;
    }
    goto LABEL_53;
  }

  if (!sub_10006A634(a1)) {
    goto LABEL_28;
  }
  sub_100041054((uint64_t)&v12);
  sub_100041140((uint64_t)&v12);
LABEL_8:
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  sub_100040F2C((uint64_t)&v12, (void *)(a1 + 32));
  if (!BYTE1(v13))
  {
    BOOL v4 = *(sqlite3 **)(a1 + 32);
    BOOL v7 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (!v4)
    {
      if (!v7) {
        goto LABEL_29;
      }
      goto LABEL_59;
    }

    if (!v7) {
      goto LABEL_29;
    }
    goto LABEL_53;
  }

  if (!sub_10006A948(a1)) {
    goto LABEL_28;
  }
  sub_100041054((uint64_t)&v12);
  sub_100041140((uint64_t)&v12);
LABEL_12:
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  sub_100040F2C((uint64_t)&v12, (void *)(a1 + 32));
  if (!BYTE1(v13))
  {
    BOOL v4 = *(sqlite3 **)(a1 + 32);
    BOOL v8 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (!v4)
    {
      if (!v8) {
        goto LABEL_29;
      }
      goto LABEL_59;
    }

    if (!v8) {
      goto LABEL_29;
    }
    goto LABEL_53;
  }

  if (!sub_10006AD88(a1)) {
    goto LABEL_28;
  }
  sub_100041054((uint64_t)&v12);
  sub_100041140((uint64_t)&v12);
LABEL_16:
  if (sub_10004BE44(a1) != 4)
  {
LABEL_20:
    unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
    sub_100040F2C((uint64_t)&v12, (void *)(a1 + 32));
    if (BYTE1(v13))
    {
      if (sub_10006B284(a1))
      {
        sub_100041054((uint64_t)&v12);
        sub_100041140((uint64_t)&v12);
        return sub_10004BE44(a1) == 6;
      }

      goto LABEL_28;
    }

    BOOL v4 = *(sqlite3 **)(a1 + 32);
    BOOL v10 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v4)
    {
      if (!v10) {
        goto LABEL_29;
      }
      goto LABEL_53;
    }

    if (!v10) {
      goto LABEL_29;
    }
LABEL_59:
    sub_1000DB994();
    goto LABEL_29;
  }

  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  sub_100040F2C((uint64_t)&v12, (void *)(a1 + 32));
  if (!BYTE1(v13))
  {
    BOOL v4 = *(sqlite3 **)(a1 + 32);
    BOOL v9 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (!v4)
    {
      if (!v9) {
        goto LABEL_29;
      }
      goto LABEL_59;
    }

    if (!v9) {
      goto LABEL_29;
    }
    goto LABEL_53;
  }

  if (sub_10006AFD4(a1))
  {
    sub_100041054((uint64_t)&v12);
    sub_100041140((uint64_t)&v12);
    goto LABEL_20;
  }

void sub_10006B96C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

uint64_t sub_10006B978()
{
  return 6LL;
}

void sub_10006B980(__int128 *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  BOOL v6 = operator new(0xF8uLL);
  v6[1] = 0LL;
  _OWORD v6[2] = 0LL;
  *BOOL v6 = off_100129628;
  sub_100065E2C((uint64_t)(v6 + 3), a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  sub_10000CCC8((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_10006B9F4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100129628;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10006BA04(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100129628;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_10006BA24(uint64_t a1)
{
  return sub_100065F20(a1 + 24, (uint64_t)&off_100129138);
}

sqlite3_stmt **sub_10006BA38(uint64_t a1)
{
  uint64_t v1 = **(sqlite3_stmt ****)(a1 + 40);
  sub_10004C6D4(v1 + 17, 0LL);
  sub_10004C6D4(v1 + 18, 0LL);
  sub_10004C6D4(v1 + 19, 0LL);
  sub_10004C6D4(v1 + 20, 0LL);
  sub_10004C6D4(v1 + 21, 0LL);
  sub_10004C6D4(v1 + 22, 0LL);
  sub_10004C6D4(v1 + 23, 0LL);
  sub_10004C6D4(v1 + 24, 0LL);
  sub_10004C6D4(v1 + 25, 0LL);
  sub_10004C6D4(v1 + 26, 0LL);
  return sub_10004C6D4(v1 + 27, 0LL);
}

BOOL sub_10006BAD8(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t v2 = *v1;
  int v3 = (sqlite3_stmt **)(*v1 + 136);
  if (*v3
    || (sub_10004C38C( *v1,  "INSERT OR REPLACE INTO queried_states (queried_state_name, queried_state_params, queried_state_value, queried_ state_error, queried_state_ttl) VALUES (?1, ?2, ?3, ?4, ?5)",  1,  (sqlite3_stmt **)buf),  BOOL v4 = *(sqlite3_stmt **)buf,  *(void *)buf = 0LL,  sub_10004C6D4(v3, v4),  sub_10004C6D4((sqlite3_stmt **)buf, 0LL),  *(void *)(v2 + 136)))
  {
    uint64_t v23 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
    sub_100040E10(&v23, v3);
    uint64_t v22 = 0LL;
    sub_10004C11C(v2, v3, 1, v1[1], &v22);
    memset(&v21, 170, sizeof(v21));
    sub_100006200(v1[2], -1, 0x20u, 0LL, 0, &v21);
    uint64_t v5 = v1[2];
    if (*(_BYTE *)v5 != 1 || !*(void *)(*(void *)(v5 + 8) + 16LL)) {
      std::string::assign(&v21, "");
    }
    sub_10004C11C(v2, v3, 2, (uint64_t)&v21, &v22);
    memset(__p, 170, sizeof(__p));
    sub_100006200(v1[3], -1, 0x20u, 0LL, 0, __p);
    if (*(_BYTE *)v1[3]) {
      sub_10004C11C(v2, v3, 3, (uint64_t)__p, &v22);
    }
    else {
      sub_10004C248(v2, v3, 3, &v22);
    }
    sub_10004C248(v2, v3, 4, &v22);
    *(void *)std::string buf = *(void *)(v1[3] + 24) / 1000000LL;
    sub_10004C1A4(v2, v3, 5, (sqlite3_int64 *)buf, &v22);
    int v6 = sub_10004C0B4(v2, v3, &v22);
    BOOL v7 = *(sqlite3 **)(v2 + 32);
    if (v6 == 101)
    {
      BOOL v8 = sqlite3_last_insert_rowid(*(sqlite3 **)(v2 + 32)) != 0;
    }

    else
    {
      BOOL v9 = (os_log_s *)qword_100131930;
      BOOL v10 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (v7)
      {
        if (v10)
        {
          uint64_t v11 = v1[1];
          int size = (char)v21.__r_.__value_.__s.__size_;
          std::string::size_type v13 = v21.__r_.__value_.__r.__words[0];
          int v14 = sqlite3_errmsg(v7);
          int v15 = &v21;
          *(_DWORD *)std::string buf = 136315650;
          if (size < 0) {
            int v15 = (std::string *)v13;
          }
          *(void *)&uint8_t buf[4] = v11;
          __int16 v25 = 2080;
          __int128 v26 = v15;
          __int16 v27 = 2080;
          __int16 v28 = v14;
          _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "[State Store] Failed to insert queried_state for stateName='%s' and params='%s'; %s",
            buf,
            0x20u);
        }
      }

      else if (v10)
      {
        sub_1000DBAF0();
      }

      BOOL v8 = 0LL;
    }

    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    sub_100040E1C(&v23);
  }

  else
  {
    int v17 = *(sqlite3 **)(v2 + 32);
    uint64_t v18 = (os_log_s *)qword_100131930;
    BOOL v19 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v17)
    {
      if (v19) {
        sub_1000DBA78(v17, v18);
      }
    }

    else if (v19)
    {
      sub_1000DBA20();
    }

    return 0LL;
  }

  return v8;
}

void sub_10006BE34( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, uint64_t a21, sqlite3_stmt *a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  sub_100040E1C(&a22);
  _Unwind_Resume(a1);
}

uint64_t sub_10006BE88(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16LL))();
  **(_BYTE **)(a1 + 32) = result;
  return result;
}

void sub_10006BEBC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = *(uint64_t **)(a1 + 40);
  uint64_t v4 = *v3;
  uint64_t v5 = (sqlite3_stmt **)(*v3 + 144);
  if (*v5
    || (sub_10004C38C( *v3,  "SELECT queried_state_value, queried_state_last_modified, queried_state_ttl FROM queried_states WHERE queried_s tate_name=?1 AND (queried_state_params = '' OR queried_state_params IS NULL OR  queried_state_params=?2) LIMIT 1;",
          1,
          &v18),
        int v6 = v18,
        uint64_t v18 = 0LL,
        sub_10004C6D4(v5, v6),
        sub_10004C6D4(&v18, 0LL),
        *(void *)(v4 + 144)))
  {
    int v17 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
    sub_100040E10(&v17, v5);
    sub_10004C160(v4, v5, 1, v3[1]);
    memset(&v16, 170, sizeof(v16));
    sub_100006200(v3[2], -1, 0x20u, 0LL, 0, &v16);
    uint64_t v7 = v3[2];
    if (*(_BYTE *)v7 != 1 || !*(void *)(*(void *)(v7 + 8) + 16LL)) {
      std::string::assign(&v16, "");
    }
    sub_10004C160(v4, v5, 2, (uint64_t)&v16);
    if (sub_10004C078(v4, v5) != 100)
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 40) = 0;
LABEL_19:
      sub_100040E1C(&v17);
      return;
    }

    int v15 = (const char *)sub_10004C280(v4, v5, 0);
    sqlite3_int64 v8 = sub_10004C2E4(v4, v5, 1);
    sqlite3_int64 v9 = sub_10004C2E4(v4, v5, 2);
    if (v15)
    {
      uint64_t v23 = 0LL;
      sub_100026984(&v15, (uint64_t)v22, 1, &v18);
      BOOL v10 = v23;
      if (v23 == v22)
      {
        uint64_t v11 = 4LL;
        BOOL v10 = v22;
        goto LABEL_17;
      }

      if (v23)
      {
        uint64_t v11 = 5LL;
LABEL_17:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }
    }

    else
    {
      LOBYTE(v1sub_100007004((uint64_t)v9 + 8) = 0;
      BOOL v19 = 0LL;
      sub_1000041AC((uint64_t)&v18);
      sub_1000041AC((uint64_t)&v18);
    }

    *(void *)&__int128 v20 = 1000000 * v8;
    *((void *)&v20 + 1) = 1000000 * v9;
    char v21 = 1;
    *(_BYTE *)a2 = (_BYTE)v18;
    *(void *)(a2 + sub_100007004((uint64_t)v9 + 8) = v19;
    sub_1000041AC((uint64_t)&v18);
    LOBYTE(v1sub_100007004((uint64_t)v9 + 8) = 0;
    BOOL v19 = 0LL;
    sub_1000041AC(a2);
    *(_OWORD *)(a2 + 16) = v20;
    *(_BYTE *)(a2 + 32) = v21;
    *(_BYTE *)(a2 + 40) = 1;
    sub_1000041AC((uint64_t)&v18);
    sub_10000425C(&v19, v18);
    goto LABEL_19;
  }

  unint64_t v12 = *(sqlite3 **)(v4 + 32);
  std::string::size_type v13 = (os_log_s *)qword_100131930;
  BOOL v14 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
  if (v12)
  {
    if (v14) {
      sub_1000DBBDC(v12, v13);
    }
  }

  else if (v14)
  {
    sub_1000DBB84();
  }

  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 40) = 0;
}

void sub_10006C19C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, sqlite3_stmt *a17, __int16 a18, char a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, char a25, uint64_t a26, uint64_t a27, char *a28)
{
  unint64_t v30 = a28;
  if (a28 == &a25)
  {
    uint64_t v31 = 4LL;
    unint64_t v30 = &a25;
  }

  else
  {
    if (!a28) {
      goto LABEL_6;
    }
    uint64_t v31 = 5LL;
  }

  (*(void (**)(void))(*(void *)v30 + 8 * v31))();
LABEL_6:
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    LOBYTE(a1sub_100007004((uint64_t)v9 + 8) = 0;
    a21 = 0LL;
    sub_1000041AC((uint64_t)&a18);
    sub_1000041AC((uint64_t)&a18);
    __cxa_end_catch();
    JUMPOUT(0x10006C0C4LL);
  }

  if (a16 < 0) {
    operator delete(__p);
  }
  sub_100040E1C(&a17);
  _Unwind_Resume(a1);
}

uint64_t **sub_10006C23C(uint64_t a1)
{
  (*(void (**)(__n128 *__return_ptr))(**(void **)(a1 + 40) + 16LL))(v3);
  sub_10006C2C0(*(void *)(a1 + 32), v3);
  return sub_100046D80((uint64_t **)v3);
}

void sub_10006C2B4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

__n128 sub_10006C2C0(uint64_t a1, __n128 *a2)
{
  if (*(unsigned __int8 *)(a1 + 40) == a2[2].n128_u8[8])
  {
    if (*(_BYTE *)(a1 + 40))
    {
      v7[0] = a2->n128_u8[0];
      sqlite3_int64 v8 = (uint64_t *)a2->n128_u64[1];
      sub_1000041AC((uint64_t)a2);
      a2->n128_u8[0] = 0;
      a2->n128_u64[1] = 0LL;
      sub_1000041AC((uint64_t)v7);
      sub_1000041AC((uint64_t)v7);
      unsigned __int8 v4 = *(_BYTE *)a1;
      *(_BYTE *)a1 = v7[0];
      v7[0] = v4;
      uint64_t v5 = *(uint64_t **)(a1 + 8);
      *(void *)(a1 + sub_100007004((uint64_t)v9 + 8) = v8;
      sqlite3_int64 v8 = v5;
      sub_1000041AC(a1);
      sub_1000041AC((uint64_t)v7);
      sub_10000425C(&v8, v7[0]);
      __n128 result = a2[1];
      *(_BYTE *)(a1 + 32) = a2[2].n128_u8[0];
      *(__n128 *)(a1 + 16) = result;
    }
  }

  else if (*(_BYTE *)(a1 + 40))
  {
    sub_10006C42C((uint64_t **)a1);
  }

  else
  {
    *(_BYTE *)a1 = a2->n128_u8[0];
    *(void *)(a1 + sub_100007004((uint64_t)v9 + 8) = a2->n128_u64[1];
    sub_1000041AC((uint64_t)a2);
    a2->n128_u8[0] = 0;
    a2->n128_u64[1] = 0LL;
    sub_1000041AC(a1);
    __n128 result = a2[1];
    *(_BYTE *)(a1 + 32) = a2[2].n128_u8[0];
    *(__n128 *)(a1 + 16) = result;
    *(_BYTE *)(a1 + 40) = 1;
  }

  return result;
}

void sub_10006C42C(uint64_t **a1)
{
  if (*((_BYTE *)a1 + 40))
  {
    sub_1000041AC((uint64_t)a1);
    sub_10000425C(a1 + 1, *(unsigned __int8 *)a1);
    *((_BYTE *)a1 + 40) = 0;
  }

BOOL sub_10006C464(uint64_t a1)
{
  uint64_t v1 = *(sqlite3_stmt ****)(a1 + 40);
  uint64_t v2 = (uint64_t)v1[1];
  sub_10004C38C( v2,  "SELECT queried_state_name, queried_state_params, queried_state_value, queried_state_last_modified, queried_state_ttl FROM queried_states",  0,  &v10);
  int v3 = *v1;
  unsigned __int8 v4 = v10;
  BOOL v10 = 0LL;
  sub_10004C6D4(v3, v4);
  sub_10004C6D4(&v10, 0LL);
  uint64_t v5 = **v1;
  if (!v5)
  {
    int v6 = *(sqlite3 **)(v2 + 32);
    uint64_t v7 = (os_log_s *)qword_100131930;
    BOOL v8 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v6)
    {
      if (v8) {
        sub_1000DBCAC(v6, v7);
      }
    }

    else if (v8)
    {
      sub_1000DBC54();
    }
  }

  return v5 != 0LL;
}

uint64_t sub_10006C550(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)v1;
  int v3 = sub_10004C078(*(void *)v1, *(sqlite3_stmt ***)(v1 + 8));
  if (v3 == 100)
  {
    **(void **)(v1 + 16) = sub_10004C280(v2, *(sqlite3_stmt ***)(v1 + 8), 0);
    if (**(void **)(v1 + 16))
    {
      uint64_t v7 = 1LL;
      **(void **)(v1 + memset(v15, 170, 24) = sub_10004C280(v2, *(sqlite3_stmt ***)(v1 + 8), 1);
      **(void **)(v1 + 32) = sub_10004C280(v2, *(sqlite3_stmt ***)(v1 + 8), 2);
      **(void **)(v1 + 40) = sub_10004C2E4(v2, *(sqlite3_stmt ***)(v1 + 8), 3);
      **(void **)(v1 + 4sub_100007004((uint64_t)v9 + 8) = sub_10004C2E4(v2, *(sqlite3_stmt ***)(v1 + 8), 4);
    }

    else
    {
      BOOL v8 = (os_log_s *)qword_100131930;
      uint64_t v7 = 1LL;
      if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)BOOL v10 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "[State Store] WARNING: Iterate queried states weirdness: got a row but no state name? (iterate-queried-states)",  v10,  2u);
      }
    }
  }

  else
  {
    if (v3 != 101)
    {
      unsigned __int8 v4 = *(sqlite3 **)(v2 + 32);
      uint64_t v5 = (os_log_s *)qword_100131930;
      BOOL v6 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (v4)
      {
        if (v6) {
          sub_1000DBD74(v4, v5);
        }
      }

      else if (v6)
      {
        sub_1000DBD1C();
      }
    }

    return 0LL;
  }

  return v7;
}

sqlite3_stmt **sub_10006C6F0(uint64_t a1)
{
  return sub_10004C6D4(**(sqlite3_stmt ****)(a1 + 40), 0LL);
}

BOOL sub_10006C700(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t v2 = *v1;
  int v3 = (sqlite3_stmt **)(*v1 + 152);
  if (*v3
    || (sub_10004C38C(*v1, "DELETE FROM queried_states WHERE queried_state_name=?1;", 1, v19),
        unsigned __int8 v4 = v19[0],
        v19[0] = 0LL,
        sub_10004C6D4(v3, v4),
        sub_10004C6D4(v19, 0LL),
        *(void *)(v2 + 152)))
  {
    uint64_t v18 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
    sub_100040E10(&v18, v3);
    uint64_t v17 = 0LL;
    uint64_t v6 = v1[1];
    uint64_t v5 = v1 + 1;
    sub_10004C11C(v2, v3, 1, v6, &v17);
    int v7 = sub_10004C0B4(v2, v3, &v17);
    BOOL v8 = *(sqlite3 **)(v2 + 32);
    if (v7 == 101)
    {
      BOOL v9 = sqlite3_changes(*(sqlite3 **)(v2 + 32)) > 0;
    }

    else
    {
      BOOL v10 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (v8)
      {
        if (v10)
        {
          uint64_t v11 = *v5;
          unint64_t v12 = sqlite3_errmsg(v8);
          sub_1000DBF28(v11, (uint64_t)v12, (uint64_t)v19);
        }
      }

      else if (v10)
      {
        sub_1000DBEB4();
      }

      BOOL v9 = 0LL;
    }

    sub_100040E1C(&v18);
  }

  else
  {
    BOOL v14 = *(sqlite3 **)(v2 + 32);
    int v15 = (os_log_s *)qword_100131930;
    BOOL v16 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v14)
    {
      if (v16) {
        sub_1000DBE3C(v14, v15);
      }
    }

    else if (v16)
    {
      sub_1000DBDE4();
    }

    return 0LL;
  }

  return v9;
}

void sub_10006C8C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10006C8E4(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 40);
  unint64_t v12 = 0LL;
  sub_10004C38C(v1, "DELETE FROM queried_states;", 0, (sqlite3_stmt **)buf);
  uint64_t v2 = *(sqlite3_stmt **)buf;
  *(void *)std::string buf = 0LL;
  sub_10004C6D4(&v12, v2);
  sub_10004C6D4((sqlite3_stmt **)buf, 0LL);
  if (!v12)
  {
    uint64_t v5 = *(sqlite3 **)(v1 + 32);
    BOOL v6 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v5)
    {
      if (v6)
      {
        int v7 = sqlite3_errmsg(v5);
        sub_1000DBF64((uint64_t)v7, (uint64_t)buf);
      }
    }

    else if (v6)
    {
      sub_1000DBDE4();
    }

    goto LABEL_16;
  }

  int v3 = (os_log_s *)qword_100131930;
  if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "[State Store] Removing all queried states",  buf,  2u);
  }

  *(void *)std::string buf = 0LL;
  if (sub_10004C0B4(v1, &v12, buf) != 101)
  {
    BOOL v8 = *(sqlite3 **)(v1 + 32);
    BOOL v9 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v8)
    {
      if (v9)
      {
        BOOL v10 = sqlite3_errmsg(v8);
        sub_1000DBFF0((uint64_t)v10, (uint64_t)buf);
      }
    }

    else if (v9)
    {
      sub_1000DBF98();
    }

void sub_10006CA90(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

sqlite3_stmt **sub_10006CAB4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  int v3 = *(uint64_t **)(a1 + 40);
  uint64_t v4 = *v3;
  uint64_t v5 = (sqlite3_stmt **)(*v3 + 176);
  if (*v5
    || (sub_10004C38C( *v3,  "SELECT transform_value FROM transform_metadata_and_states WHERE (transform_uuid=?1 AND transform_key=?2) ORDER BY transform_state_id LIMIT 1",  1,  v16),  BOOL v6 = v16[0],  v16[0] = 0LL,  sub_10004C6D4(v5, v6),  sub_10004C6D4(v16, 0LL),  *(void *)(v4 + 176)))
  {
    int v15 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
    sub_100040E10(&v15, v5);
    sub_10004C160(v4, v5, 1, v3[1]);
    memset(__p, 170, sizeof(__p));
    sub_100006200(v3[2], -1, 0x20u, 0LL, 0, __p);
    sub_10004C160(v4, v5, 2, (uint64_t)__p);
    if (sub_10004C078(v4, v5) == 100 && (std::string::size_type v13 = (const char *)sub_10004C280(v4, v5, 0)) != 0LL)
    {
      uint64_t v17 = 0LL;
      sub_100026984(&v13, (uint64_t)v16, 1, a2);
      int v7 = v17;
      if (v17 == v16)
      {
        uint64_t v8 = 4LL;
        int v7 = v16;
        goto LABEL_13;
      }

      if (v17)
      {
        uint64_t v8 = 5LL;
LABEL_13:
        (*((void (**)(sqlite3_stmt **))*v7 + v8))(v7);
      }
    }

    else
    {
      *(_BYTE *)a2 = 0;
      a2[1] = 0LL;
      sub_1000041AC((uint64_t)a2);
      sub_1000041AC((uint64_t)a2);
    }

    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    return sub_100040E1C(&v15);
  }

  BOOL v9 = *(sqlite3 **)(v4 + 32);
  BOOL v10 = (os_log_s *)qword_100131930;
  BOOL v11 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
  if (v9)
  {
    if (v11) {
      sub_1000DC07C(v9, v10);
    }
  }

  else if (v11)
  {
    sub_1000DC024();
  }

  *(_BYTE *)a2 = 0;
  a2[1] = 0LL;
  sub_1000041AC((uint64_t)a2);
  return (sqlite3_stmt **)sub_1000041AC((uint64_t)a2);
}

void sub_10006CCCC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, sqlite3_stmt *a16, __int16 a17, char a18, char a19, uint64_t a20, uint64_t a21, __int16 *a22)
{
  __int128 v26 = a22;
  if (a22 == v23)
  {
    uint64_t v27 = 4LL;
    __int128 v26 = &a17;
  }

  else
  {
    if (!a22) {
      goto LABEL_6;
    }
    uint64_t v27 = 5LL;
  }

  (*(void (**)(void))(*(void *)v26 + 8 * v27))();
LABEL_6:
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    *(_BYTE *)uint64_t v22 = 0;
    *(void *)(v22 + sub_100007004((uint64_t)v9 + 8) = 0LL;
    sub_1000041AC(v22);
    sub_1000041AC(v22);
    __cxa_end_catch();
    JUMPOUT(0x10006CC58LL);
  }

  if (a15 < 0) {
    operator delete(__p);
  }
  sub_100040E1C(&a16);
  _Unwind_Resume(a1);
}

void sub_10006CD64(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 40) + 16LL))(&v5);
  uint64_t v2 = *(void *)(a1 + 32);
  sub_1000041AC((uint64_t)&v5);
  char v3 = *(_BYTE *)v2;
  *(_BYTE *)uint64_t v2 = v5;
  LOBYTE(v5) = v3;
  uint64_t v4 = *(uint64_t **)(v2 + 8);
  *(void *)(v2 + sub_100007004((uint64_t)v9 + 8) = v6;
  BOOL v6 = v4;
  sub_1000041AC(v2);
  sub_1000041AC((uint64_t)&v5);
  sub_10000425C(&v6, v5);
}

uint64_t sub_10006CE18(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(sqlite3_stmt ***)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  if (**(void **)v1
    || (sub_10004C38C( *(void *)(v1 + 8),  "SELECT transform_key, transform_value FROM transform_metadata_and_states WHERE transform_uuid=?1 ORDER BY transform_state_id",  1,  &v12),  v4 = *(sqlite3_stmt ***)v1,  v5 = v12,  unint64_t v12 = 0LL,  sub_10004C6D4(v4, v5),  sub_10004C6D4(&v12, 0LL),  v2 = *(sqlite3_stmt ***)v1,  **(void **)v1))
  {
    uint64_t v6 = *(void *)(v1 + 16);
    uint64_t v7 = 1LL;
    sub_10004C160(v3, v2, 1, v6);
  }

  else
  {
    BOOL v9 = *(sqlite3 **)(v3 + 32);
    BOOL v10 = (os_log_s *)qword_100131930;
    BOOL v11 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v9)
    {
      if (v11) {
        sub_1000DC14C(v9, v10);
      }
    }

    else if (v11)
    {
      sub_1000DC0F4();
    }

    return 0LL;
  }

  return v7;
}

uint64_t sub_10006CF1C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)v1;
  int v3 = sub_10004C078(*(void *)v1, *(sqlite3_stmt ***)(v1 + 8));
  if (v3 == 100)
  {
    **(void **)(v1 + 16) = sub_10004C280(v2, *(sqlite3_stmt ***)(v1 + 8), 0);
    uint64_t v7 = 1LL;
    **(void **)(v1 + memset(v15, 170, 24) = sub_10004C280(v2, *(sqlite3_stmt ***)(v1 + 8), 1);
  }

  else
  {
    if (v3 != 101)
    {
      uint64_t v4 = *(sqlite3 **)(v2 + 32);
      uint64_t v5 = (os_log_s *)qword_100131930;
      BOOL v6 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (v4)
      {
        if (v6) {
          sub_1000DC214(v4, v5);
        }
      }

      else if (v6)
      {
        sub_1000DC1BC();
      }
    }

    return 0LL;
  }

  return v7;
}

sqlite3_stmt **sub_10006CFE4(uint64_t a1)
{
  uint64_t v1 = *(void ***)(a1 + 40);
  int v3 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
  sub_100040E10(&v3, *v1);
  return sub_100040E1C(&v3);
}

unint64_t sub_10006D048(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t v2 = *v1;
  int v3 = (sqlite3_stmt **)(*v1 + 192);
  if (*v3
    || (sub_10004C38C( *v1,  "SELECT transform_budget_used, transform_event_count FROM transform_metadata WHERE transform_uuid=?1",  1,  &v11),  v4 = v11,  BOOL v11 = 0LL,  sub_10004C6D4(v3, v4),  sub_10004C6D4(&v11, 0LL),  *(void *)(v2 + 192)))
  {
    BOOL v11 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
    sub_100040E10(&v11, v3);
    sub_10004C160(v2, v3, 1, v1[1]);
    if (sub_10004C078(v2, v3) == 100)
    {
      unsigned int v5 = sub_10004C2E4(v2, v3, 0);
      unsigned int v6 = sub_10004C2E4(v2, v3, 1);
    }

    else
    {
      unsigned int v5 = 0;
      unsigned int v6 = 0;
    }

    sub_100040E1C(&v11);
  }

  else
  {
    uint64_t v8 = *(sqlite3 **)(v2 + 32);
    BOOL v9 = (os_log_s *)qword_100131930;
    BOOL v10 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v8)
    {
      if (v10) {
        sub_1000DC2DC(v8, v9);
      }
    }

    else if (v10)
    {
      sub_1000DC284();
    }

    unsigned int v5 = 0;
    unsigned int v6 = 0;
  }

  return v5 | ((unint64_t)v6 << 32);
}

uint64_t sub_10006D1C0(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16LL))();
  **(void **)(a1 + 32) = result;
  return result;
}

BOOL sub_10006D1F4(uint64_t a1)
{
  uint64_t v1 = *(sqlite3_stmt ****)(a1 + 40);
  uint64_t v2 = (uint64_t)v1[1];
  sub_10004C38C( v2,  "SELECT transform_type, transform_uuid, transform_budget_used, transform_event_count, transform_metadata_created_at F ROM transform_metadata ORDER BY transform_event_count DESC",  0,  &v10);
  int v3 = *v1;
  uint64_t v4 = v10;
  BOOL v10 = 0LL;
  sub_10004C6D4(v3, v4);
  sub_10004C6D4(&v10, 0LL);
  unsigned int v5 = **v1;
  if (!v5)
  {
    unsigned int v6 = *(sqlite3 **)(v2 + 32);
    uint64_t v7 = (os_log_s *)qword_100131930;
    BOOL v8 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v6)
    {
      if (v8) {
        sub_1000DC3A4(v6, v7);
      }
    }

    else if (v8)
    {
      sub_1000DC34C();
    }
  }

  return v5 != 0LL;
}

uint64_t sub_10006D2E0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)v1;
  int v3 = sub_10004C078(*(void *)v1, *(sqlite3_stmt ***)(v1 + 8));
  if (v3 == 100)
  {
    int v7 = sub_10004C31C(v2, *(sqlite3_stmt ***)(v1 + 8), 0);
    BOOL v8 = *(sqlite3_stmt ***)(v1 + 8);
    **(_DWORD **)(v1 + 16) = v7;
    uint64_t v9 = 1LL;
    **(void **)(v1 + memset(v15, 170, 24) = sub_10004C280(v2, v8, 1);
    **(_DWORD **)(v1 + 32) = sub_10004C2E4(v2, *(sqlite3_stmt ***)(v1 + 8), 2);
    **(_DWORD **)(v1 + 40) = sub_10004C2E4(v2, *(sqlite3_stmt ***)(v1 + 8), 3);
    sqlite3_int64 v10 = sub_10004C2E4(v2, *(sqlite3_stmt ***)(v1 + 8), 4);
    if ((v10 & 0x8000000000000000LL) == 0) {
      **(void **)(v1 + 4sub_100007004((uint64_t)v9 + 8) = 1000000 * v10;
    }
  }

  else
  {
    if (v3 != 101)
    {
      uint64_t v4 = *(sqlite3 **)(v2 + 32);
      unsigned int v5 = (os_log_s *)qword_100131930;
      BOOL v6 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (v4)
      {
        if (v6) {
          sub_1000DC46C(v4, v5);
        }
      }

      else if (v6)
      {
        sub_1000DC414();
      }
    }

    return 0LL;
  }

  return v9;
}

sqlite3_stmt **sub_10006D3FC(uint64_t a1)
{
  return sub_10004C6D4(**(sqlite3_stmt ****)(a1 + 40), 0LL);
}

BOOL sub_10006D40C(uint64_t a1)
{
  uint64_t v1 = *(sqlite3_stmt ****)(a1 + 40);
  uint64_t v2 = (uint64_t)v1[1];
  sub_10004C38C( v2,  "SELECT transform_metadata.transform_uuid, agg_session.agg_session_start_timestamp FROM transform_metadata JOIN agg_s ession ON transform_metadata.agg_session_id = agg_session.agg_session_id WHERE agg_session.agg_session_period = ?1",  1,  &v11);
  int v3 = *v1;
  uint64_t v4 = v11;
  BOOL v11 = 0LL;
  sub_10004C6D4(v3, v4);
  sub_10004C6D4(&v11, 0LL);
  unsigned int v5 = *v1;
  BOOL v6 = **v1;
  if (v6)
  {
    BOOL v11 = (sqlite3_stmt *)*(int *)v1[2];
    sub_10004C1E4(v2, v5, 1, (sqlite3_int64 *)&v11);
  }

  else
  {
    int v7 = *(sqlite3 **)(v2 + 32);
    BOOL v8 = (os_log_s *)qword_100131930;
    BOOL v9 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v7)
    {
      if (v9) {
        sub_1000DC534(v7, v8);
      }
    }

    else if (v9)
    {
      sub_1000DC4DC();
    }
  }

  return v6 != 0LL;
}

uint64_t sub_10006D518(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)v1;
  int v3 = sub_10004C078(*(void *)v1, *(sqlite3_stmt ***)(v1 + 8));
  if (v3 == 100)
  {
    **(void **)(v1 + 16) = sub_10004C280(v2, *(sqlite3_stmt ***)(v1 + 8), 0);
    uint64_t v7 = 1LL;
    **(void **)(v1 + memset(v15, 170, 24) = sub_10004C280(v2, *(sqlite3_stmt ***)(v1 + 8), 1);
  }

  else
  {
    if (v3 != 101)
    {
      uint64_t v4 = *(sqlite3 **)(v2 + 32);
      unsigned int v5 = (os_log_s *)qword_100131930;
      BOOL v6 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (v4)
      {
        if (v6) {
          sub_1000DC5FC(v4, v5);
        }
      }

      else if (v6)
      {
        sub_1000DC5A4();
      }
    }

    return 0LL;
  }

  return v7;
}

sqlite3_stmt **sub_10006D5E0(uint64_t a1)
{
  return sub_10004C6D4(**(sqlite3_stmt ****)(a1 + 40), 0LL);
}

BOOL sub_10006D5F0(uint64_t a1)
{
  uint64_t v1 = *(sqlite3_stmt ****)(a1 + 40);
  uint64_t v2 = (uint64_t)v1[1];
  sub_10004C38C( v2,  "SELECT transform_metadata.transform_uuid, agg_session.agg_session_start_timestamp, agg_session.agg_session_end_bound ary FROM transform_metadata LEFT JOIN agg_session ON transform_metadata.agg_session_id = agg_session.agg_session_id",  1,  &v10);
  int v3 = *v1;
  uint64_t v4 = v10;
  sqlite3_int64 v10 = 0LL;
  sub_10004C6D4(v3, v4);
  sub_10004C6D4(&v10, 0LL);
  unsigned int v5 = **v1;
  if (!v5)
  {
    BOOL v6 = *(sqlite3 **)(v2 + 32);
    uint64_t v7 = (os_log_s *)qword_100131930;
    BOOL v8 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v6)
    {
      if (v8) {
        sub_1000DC6C4(v6, v7);
      }
    }

    else if (v8)
    {
      sub_1000DC66C();
    }
  }

  return v5 != 0LL;
}

uint64_t sub_10006D6DC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)v1;
  int v3 = sub_10004C078(*(void *)v1, *(sqlite3_stmt ***)(v1 + 8));
  if (v3 == 100)
  {
    **(void **)(v1 + 16) = sub_10004C280(v2, *(sqlite3_stmt ***)(v1 + 8), 0);
    uint64_t v7 = 1LL;
    **(void **)(v1 + memset(v15, 170, 24) = sub_10004C280(v2, *(sqlite3_stmt ***)(v1 + 8), 1);
    **(void **)(v1 + 32) = sub_10004C280(v2, *(sqlite3_stmt ***)(v1 + 8), 2);
  }

  else
  {
    if (v3 != 101)
    {
      uint64_t v4 = *(sqlite3 **)(v2 + 32);
      unsigned int v5 = (os_log_s *)qword_100131930;
      BOOL v6 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (v4)
      {
        if (v6) {
          sub_1000DC78C(v4, v5);
        }
      }

      else if (v6)
      {
        sub_1000DC734();
      }
    }

    return 0LL;
  }

  return v7;
}

sqlite3_stmt **sub_10006D7BC(uint64_t a1)
{
  return sub_10004C6D4(**(sqlite3_stmt ****)(a1 + 40), 0LL);
}

uint64_t sub_10006D7CC(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t v2 = *v1;
  int v3 = (sqlite3 **)(*v1 + 32);
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v10 = 0xAAAAAAAAAAAAAAAALL;
  sub_100040F2C((uint64_t)&v9, v3);
  if (!BYTE1(v10))
  {
    BOOL v6 = *v3;
    BOOL v7 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v6)
    {
      if (v7)
      {
        BOOL v8 = sqlite3_errmsg(v6);
        sub_1000DC854((uint64_t)v8, (uint64_t)v11);
      }
    }

    else if (v7)
    {
      sub_1000DC7FC();
    }

    goto LABEL_6;
  }

  if (!sub_100068980(v2, v1[1]) || !sub_100068F18(v2, v1[1]))
  {
    sub_100040F68((uint64_t)&v9);
LABEL_6:
    uint64_t v4 = 0LL;
    goto LABEL_7;
  }

  uint64_t v4 = 1LL;
LABEL_7:
  sub_100041140((uint64_t)&v9);
  return v4;
}

void sub_10006D8E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10006D8FC(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 40);
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v8 = 0xAAAAAAAAAAAAAAAALL;
  sub_100040F2C((uint64_t)&v7, (void *)(v1 + 32));
  if (!BYTE1(v8))
  {
    uint64_t v4 = *(sqlite3 **)(v1 + 32);
    BOOL v5 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v4)
    {
      if (v5)
      {
        BOOL v6 = sqlite3_errmsg(v4);
        sub_1000DC8E0((uint64_t)v6, (uint64_t)v9);
      }
    }

    else if (v5)
    {
      sub_1000DC888();
    }

    goto LABEL_6;
  }

  if ((sub_100069118(v1) & 1) == 0 || (sub_1000692A4(v1) & 1) == 0)
  {
    sub_100040F68((uint64_t)&v7);
LABEL_6:
    uint64_t v2 = 0LL;
    goto LABEL_7;
  }

  uint64_t v2 = 1LL;
LABEL_7:
  sub_100041140((uint64_t)&v7);
  return v2;
}

void sub_10006DA08( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10006DA24(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)v1;
  int v3 = (sqlite3 **)(*(void *)v1 + 32LL);
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v10 = 0xAAAAAAAAAAAAAAAALL;
  sub_100040F2C((uint64_t)&v9, v3);
  if (!BYTE1(v10))
  {
    BOOL v6 = *v3;
    BOOL v7 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v6)
    {
      if (v7)
      {
        unint64_t v8 = sqlite3_errmsg(v6);
        sub_1000DC96C((uint64_t)v8, (uint64_t)v11);
      }
    }

    else if (v7)
    {
      sub_1000DC914();
    }

    goto LABEL_6;
  }

  if (!sub_100069430(v2, **(_DWORD **)(v1 + 8)) || !sub_100069674(v2, **(_DWORD **)(v1 + 8)))
  {
    sub_100040F68((uint64_t)&v9);
LABEL_6:
    uint64_t v4 = 0LL;
    goto LABEL_7;
  }

  uint64_t v4 = 1LL;
LABEL_7:
  sub_100041140((uint64_t)&v9);
  return v4;
}

void sub_10006DB40( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10006DB5C(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 40);
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v8 = 0xAAAAAAAAAAAAAAAALL;
  sub_100040F2C((uint64_t)&v7, (void *)(v1 + 32));
  if (!BYTE1(v8))
  {
    uint64_t v4 = *(sqlite3 **)(v1 + 32);
    BOOL v5 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v4)
    {
      if (v5)
      {
        BOOL v6 = sqlite3_errmsg(v4);
        sub_1000DC96C((uint64_t)v6, (uint64_t)v9);
      }
    }

    else if (v5)
    {
      sub_1000DC914();
    }

    goto LABEL_6;
  }

  if (!sub_1000698B8(v1) || !sub_100069A5C(v1))
  {
    sub_100040F68((uint64_t)&v7);
LABEL_6:
    uint64_t v2 = 0LL;
    goto LABEL_7;
  }

  uint64_t v2 = 1LL;
LABEL_7:
  sub_100041140((uint64_t)&v7);
  return v2;
}

void sub_10006DC68( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10006DC84(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 40);
  unint64_t v10 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
  sub_10004C38C(v1, "DELETE FROM agg_session", 1, &v10);
  if (!v10)
  {
    int v3 = *(sqlite3 **)(v1 + 32);
    BOOL v4 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v3)
    {
      if (v4)
      {
        BOOL v5 = sqlite3_errmsg(v3);
        sub_1000DC9F8((uint64_t)v5, (uint64_t)v11);
      }
    }

    else if (v4)
    {
      sub_1000DC9A0();
    }

    goto LABEL_14;
  }

  v11[0] = 0LL;
  if (sub_10004C0B4(v1, &v10, v11) != 101)
  {
    BOOL v6 = *(sqlite3 **)(v1 + 32);
    BOOL v7 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v6)
    {
      if (v7)
      {
        unint64_t v8 = sqlite3_errmsg(v6);
        sub_1000DCA84((uint64_t)v8, (uint64_t)v11);
      }
    }

    else if (v7)
    {
      sub_1000DCA2C();
    }

void sub_10006DDD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10006DDF8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)v1;
  int v3 = (sqlite3 **)(*(void *)v1 + 32LL);
  unint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
  sub_100040F2C((uint64_t)&v18, v3);
  if (!BYTE1(v19))
  {
    unint64_t v8 = *v3;
    BOOL v9 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v8)
    {
      if (v9)
      {
        unint64_t v10 = sqlite3_errmsg(v8);
        sub_1000DCB10((uint64_t)v10, (uint64_t)&v20);
      }
    }

    else if (v9)
    {
      sub_1000DCAB8();
    }

    goto LABEL_17;
  }

  if (!sub_10006A2C8(v2, **(_DWORD **)(v1 + 8))) {
    goto LABEL_16;
  }
  int v4 = **(_DWORD **)(v1 + 8);
  v5.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  unint64_t v23 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v21 = v6;
  __int128 v22 = v6;
  __int128 v20 = v6;
  sub_10003E608(v5.__d_.__rep_, (uint64_t)&v20);
  switch(v4)
  {
    case 0:
      __int128 v14 = v20;
      __int128 v15 = v21;
      __int128 v16 = v22;
      unint64_t v17 = v23;
      v7.__d_.__rep_ = sub_10003E688((uint64_t)&v14).__d_.__rep_;
      break;
    case 1:
      __int128 v14 = v20;
      __int128 v15 = v21;
      __int128 v16 = v22;
      unint64_t v17 = v23;
      v7.__d_.__rep_ = sub_10003E710((uint64_t)&v14).__d_.__rep_;
      break;
    case 2:
      __int128 v14 = v20;
      __int128 v15 = v21;
      __int128 v16 = v22;
      unint64_t v17 = v23;
      v7.__d_.__rep_ = sub_10003E7DC((uint64_t)&v14).__d_.__rep_;
      break;
    case 3:
      __int128 v14 = v20;
      __int128 v15 = v21;
      __int128 v16 = v22;
      unint64_t v17 = v23;
      v7.__d_.__rep_ = sub_10003E880((uint64_t)&v14).__d_.__rep_;
      break;
    default:
      v7.__d_.__rep_ = 0LL;
      break;
  }

  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = v7.__d_.__rep_;
  if (!sub_100069D1C(v2, v4, &rep))
  {
LABEL_16:
    sub_100040F68((uint64_t)&v18);
LABEL_17:
    uint64_t v11 = 0LL;
    goto LABEL_18;
  }

  uint64_t v11 = 1LL;
LABEL_18:
  sub_100041140((uint64_t)&v18);
  return v11;
}

void sub_10006DFF4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_10006E014(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 40);
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
  sub_100040F2C((uint64_t)&v17, (void *)(v1 + 32));
  if (BYTE1(v18))
  {
    uint64_t v2 = 0LL;
    while (1)
    {
      int v3 = dword_1000F5BF0[v2];
      v4.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&__int128 v5 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
      __int128 v20 = v5;
      __int128 v21 = v5;
      __int128 v19 = v5;
      sub_10003E608(v4.__d_.__rep_, (uint64_t)&v19);
      switch(v3)
      {
        case 0:
          __int128 v13 = v19;
          __int128 v14 = v20;
          __int128 v15 = v21;
          unint64_t v16 = v22;
          v6.__d_.__rep_ = sub_10003E688((uint64_t)&v13).__d_.__rep_;
          break;
        case 1:
          __int128 v13 = v19;
          __int128 v14 = v20;
          __int128 v15 = v21;
          unint64_t v16 = v22;
          v6.__d_.__rep_ = sub_10003E710((uint64_t)&v13).__d_.__rep_;
          break;
        case 2:
          __int128 v13 = v19;
          __int128 v14 = v20;
          __int128 v15 = v21;
          unint64_t v16 = v22;
          v6.__d_.__rep_ = sub_10003E7DC((uint64_t)&v13).__d_.__rep_;
          break;
        case 3:
          __int128 v13 = v19;
          __int128 v14 = v20;
          __int128 v15 = v21;
          unint64_t v16 = v22;
          v6.__d_.__rep_ = sub_10003E880((uint64_t)&v13).__d_.__rep_;
          break;
        default:
          v6.__d_.__rep_ = 0LL;
          break;
      }

      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = v6.__d_.__rep_;
      if (!sub_100069D1C(v1, v3, &rep)) {
        break;
      }
      if (++v2 == 4)
      {
        uint64_t v7 = 1LL;
        goto LABEL_17;
      }
    }

    sub_100040F68((uint64_t)&v17);
  }

  else
  {
    unint64_t v8 = *(sqlite3 **)(v1 + 32);
    BOOL v9 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v8)
    {
      if (v9)
      {
        unint64_t v10 = sqlite3_errmsg(v8);
        sub_1000DCB9C((uint64_t)v10, (uint64_t)&v19);
      }
    }

    else if (v9)
    {
      sub_1000DCB44();
    }
  }

  uint64_t v7 = 0LL;
LABEL_17:
  sub_100041140((uint64_t)&v17);
  return v7;
}

void sub_10006E218( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_10006E238(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 40);
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
  sub_100040F2C((uint64_t)&v17, (void *)(v1 + 32));
  if (BYTE1(v18))
  {
    if (sub_10006A168(v1))
    {
      uint64_t v2 = 0LL;
      while (1)
      {
        int v3 = dword_1000F5BF0[v2];
        v4.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&__int128 v5 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
        __int128 v20 = v5;
        __int128 v21 = v5;
        __int128 v19 = v5;
        sub_10003E608(v4.__d_.__rep_, (uint64_t)&v19);
        switch(v3)
        {
          case 0:
            __int128 v13 = v19;
            __int128 v14 = v20;
            __int128 v15 = v21;
            unint64_t v16 = v22;
            v6.__d_.__rep_ = sub_10003E688((uint64_t)&v13).__d_.__rep_;
            break;
          case 1:
            __int128 v13 = v19;
            __int128 v14 = v20;
            __int128 v15 = v21;
            unint64_t v16 = v22;
            v6.__d_.__rep_ = sub_10003E710((uint64_t)&v13).__d_.__rep_;
            break;
          case 2:
            __int128 v13 = v19;
            __int128 v14 = v20;
            __int128 v15 = v21;
            unint64_t v16 = v22;
            v6.__d_.__rep_ = sub_10003E7DC((uint64_t)&v13).__d_.__rep_;
            break;
          case 3:
            __int128 v13 = v19;
            __int128 v14 = v20;
            __int128 v15 = v21;
            unint64_t v16 = v22;
            v6.__d_.__rep_ = sub_10003E880((uint64_t)&v13).__d_.__rep_;
            break;
          default:
            v6.__d_.__rep_ = 0LL;
            break;
        }

        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = v6.__d_.__rep_;
        if (!sub_100069D1C(v1, v3, &rep)) {
          break;
        }
        if (++v2 == 4)
        {
          uint64_t v7 = 1LL;
          goto LABEL_15;
        }
      }
    }

    sub_100040F68((uint64_t)&v17);
  }

  else
  {
    BOOL v9 = *(sqlite3 **)(v1 + 32);
    BOOL v10 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v9)
    {
      if (v10)
      {
        uint64_t v11 = sqlite3_errmsg(v9);
        sub_1000DCC28((uint64_t)v11, (uint64_t)&v19);
      }
    }

    else if (v10)
    {
      sub_1000DCBD0();
    }
  }

  uint64_t v7 = 0LL;
LABEL_15:
  sub_100041140((uint64_t)&v17);
  return v7;
}

void sub_10006E448( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_10006E468(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 40);
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
  sub_100040F2C((uint64_t)&v17, (void *)(v1 + 32));
  if (BYTE1(v18))
  {
    if (sub_100069FC4(v1))
    {
      uint64_t v2 = 0LL;
      while (1)
      {
        int v3 = dword_1000F5BF0[v2];
        v4.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&__int128 v5 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
        __int128 v20 = v5;
        __int128 v21 = v5;
        __int128 v19 = v5;
        sub_10003E608(v4.__d_.__rep_, (uint64_t)&v19);
        switch(v3)
        {
          case 0:
            __int128 v13 = v19;
            __int128 v14 = v20;
            __int128 v15 = v21;
            unint64_t v16 = v22;
            v6.__d_.__rep_ = sub_10003E688((uint64_t)&v13).__d_.__rep_;
            break;
          case 1:
            __int128 v13 = v19;
            __int128 v14 = v20;
            __int128 v15 = v21;
            unint64_t v16 = v22;
            v6.__d_.__rep_ = sub_10003E710((uint64_t)&v13).__d_.__rep_;
            break;
          case 2:
            __int128 v13 = v19;
            __int128 v14 = v20;
            __int128 v15 = v21;
            unint64_t v16 = v22;
            v6.__d_.__rep_ = sub_10003E7DC((uint64_t)&v13).__d_.__rep_;
            break;
          case 3:
            __int128 v13 = v19;
            __int128 v14 = v20;
            __int128 v15 = v21;
            unint64_t v16 = v22;
            v6.__d_.__rep_ = sub_10003E880((uint64_t)&v13).__d_.__rep_;
            break;
          default:
            v6.__d_.__rep_ = 0LL;
            break;
        }

        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = v6.__d_.__rep_;
        if (!sub_100069C00(v1, v3) && !sub_100069D1C(v1, v3, &rep)) {
          break;
        }
        if (++v2 == 4)
        {
          uint64_t v7 = 1LL;
          goto LABEL_21;
        }
      }
    }

    sub_100040F68((uint64_t)&v17);
  }

  else
  {
    unint64_t v8 = *(sqlite3 **)(v1 + 32);
    BOOL v9 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v8)
    {
      if (v9)
      {
        BOOL v10 = sqlite3_errmsg(v8);
        sub_1000DCCB4((uint64_t)v10, (uint64_t)&v19);
      }
    }

    else if (v9)
    {
      sub_1000DCC5C();
    }
  }

  uint64_t v7 = 0LL;
LABEL_21:
  sub_100041140((uint64_t)&v17);
  return v7;
}

void sub_10006E688( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_10006E6A8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)v1;
  int v3 = (sqlite3 **)(*(void *)v1 + 32LL);
  unint64_t v11 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  sub_100040F2C((uint64_t)&v11, v3);
  if (!BYTE1(v12))
  {
    std::chrono::system_clock::time_point v6 = *v3;
    BOOL v7 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v6)
    {
      if (v7)
      {
        uint64_t v8 = *(void *)(v1 + 8);
        BOOL v9 = sqlite3_errmsg(v6);
        sub_1000DCD5C(v8, (uint64_t)v9, (uint64_t)v13);
      }
    }

    else if (v7)
    {
      sub_1000DCCE8();
    }

    goto LABEL_17;
  }

  if (!sub_100068C30( v2,  **(_DWORD **)(v1 + 16),  *(void *)(v1 + 8),  **(_DWORD **)(v1 + 24),  **(_DWORD **)(v1 + 32),  **(_DWORD **)(v1 + 40),  *(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep **)(v1 + 48))) {
    goto LABEL_16;
  }
  int v4 = **(_DWORD **)(v1 + 16);
  if (v4 == 3)
  {
    if (!sub_100068B80(v2, *(void *)(v1 + 8), *(void *)(v1 + 56))) {
      goto LABEL_16;
    }
  }

  else
  {
    if (v4 != 2)
    {
      if (v4 != 1 || sub_1000681FC(v2, *(void *)(v1 + 8), *(void *)(v1 + 56))) {
        goto LABEL_7;
      }
      goto LABEL_16;
    }

    if (!sub_10006883C(v2, *(void *)(v1 + 8), *(void *)(v1 + 56)))
    {
LABEL_16:
      sub_100040F68((uint64_t)&v11);
LABEL_17:
      uint64_t v5 = 0LL;
      goto LABEL_18;
    }
  }

void sub_10006E840( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10006E85C(uint64_t result, uint64_t a2, float a3)
{
  *(float *)a2 = a3;
  *(void *)(a2 + 4) = result;
  return result;
}

void sub_10006E868(uint64_t a1@<X8>)
{
  *(void *)(v1 - sub_100007004((uint64_t)v9 + 8) = a1;
}

const char *sub_10006E880(sqlite3 *a1)
{
  return sqlite3_errmsg(a1);
}

  ;
}

void sub_10006E894(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

uint64_t sub_10006E8A0(uint64_t result, uint64_t a2, uint64_t a3, float a4)
{
  *(float *)a3 = a4;
  *(void *)(a3 + 4) = result;
  *(_WORD *)(a3 + 12) = 2080;
  *(void *)(a3 + 14) = a2;
  return result;
}

void *sub_10006E8B8(void *result, uint64_t a2)
{
  *uint64_t result = off_100129B10;
  result[1] = a2;
  return result;
}

uint64_t sub_10006E8D0(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
  __int16 v25 = a3;
  *(void *)&__int128 v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v23[0] = v7;
  v23[1] = v7;
  sub_100008780(a4, (const std::string::value_type **)off_100125F00, (uint64_t)v23);
  v40[0] = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v38 = v8;
  __int128 v39 = v8;
  BOOL v9 = (unsigned __int8 **)sub_100008B44(&v38, a4);
  sub_100008AC8(v9);
  if (sub_1000087E8((unsigned __int8 **)v23, (unsigned __int8 **)&v38))
  {
    uint64_t v10 = *(void *)(a1 + 8);
    sub_10002BC40((uint64_t)v32, "message");
    __int16 v33 = v32;
    char v34 = 1;
    uint64_t v36 = sub_10006EE20((uint64_t)v35, "Input config has no transforms defined.");
    char v37 = 1;
    sub_10000BA40((uint64_t)&v38, (uint64_t)v32, 2LL, 1, 2);
    *(void *)&__int128 v39 = &v38;
    BYTE8(v39) = 1;
    sub_10004A4C4((uint64_t)v26, "source");
    uint64_t v27 = v26;
    char v28 = 1;
    sub_10000E89C((uint64_t)v29, &v25);
    unint64_t v30 = v29;
    char v31 = 1;
    uint64_t v41 = sub_10000BA40((uint64_t)v40, (uint64_t)v26, 2LL, 1, 2);
    char v42 = 1;
    sub_10000BA40((uint64_t)v21, (uint64_t)&v38, 2LL, 1, 2);
    (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(void *)v10 + 16LL))(v10, a2, v21);
    sub_1000041AC((uint64_t)v21);
    sub_10000425C(&v22, v21[0]);
    for (uint64_t i = 0LL; i != -8; i -= 4LL)
    {
      sub_1000041AC((uint64_t)&v40[i]);
      sub_10000425C((uint64_t **)&v40[i + 1], LOBYTE(v40[i]));
    }

    for (uint64_t j = 0LL; j != -64; j -= 32LL)
    {
      sub_1000041AC((uint64_t)&v29[j]);
      sub_10000425C((uint64_t **)&v29[j + 8], v29[j]);
    }

    for (uint64_t k = 0LL; k != -64; k -= 32LL)
    {
      sub_1000041AC((uint64_t)&v35[k]);
      sub_10000425C((uint64_t **)&v35[k + 8], v35[k]);
    }
  }

  else
  {
    uint64_t v15 = *(void *)(a1 + 8);
    sub_10002BC40((uint64_t)v32, "message");
    __int16 v33 = v32;
    char v34 = 1;
    uint64_t v36 = sub_10006EEB0((uint64_t)v35, "Invalid type for the transform array");
    char v37 = 1;
    sub_10000BA40((uint64_t)&v38, (uint64_t)v32, 2LL, 1, 2);
    *(void *)&__int128 v39 = &v38;
    BYTE8(v39) = 1;
    sub_10004A4C4((uint64_t)v26, "source");
    uint64_t v27 = v26;
    char v28 = 1;
    sub_10000E89C((uint64_t)v29, &v25);
    unint64_t v30 = v29;
    char v31 = 1;
    uint64_t v41 = sub_10000BA40((uint64_t)v40, (uint64_t)v26, 2LL, 1, 2);
    char v42 = 1;
    sub_10000BA40((uint64_t)v19, (uint64_t)&v38, 2LL, 1, 2);
    (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(void *)v15 + 40LL))(v15, a2, v19);
    sub_1000041AC((uint64_t)v19);
    sub_10000425C(&v20, v19[0]);
    for (uint64_t m = 0LL; m != -8; m -= 4LL)
    {
      sub_1000041AC((uint64_t)&v40[m]);
      sub_10000425C((uint64_t **)&v40[m + 1], LOBYTE(v40[m]));
    }

    for (uint64_t n = 0LL; n != -64; n -= 32LL)
    {
      sub_1000041AC((uint64_t)&v29[n]);
      sub_10000425C((uint64_t **)&v29[n + 8], v29[n]);
    }

    for (iuint64_t i = 0LL; ii != -64; ii -= 32LL)
    {
      sub_1000041AC((uint64_t)&v35[ii]);
      sub_10000425C((uint64_t **)&v35[ii + 8], v35[ii]);
    }
  }

  return 0LL;
}

void sub_10006ECB4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

uint64_t sub_10006ECC0(uint64_t a1)
{
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v14[0] = v2;
  v14[1] = v2;
  sub_100008780(a1, (const std::string::value_type **)off_100125F20, (uint64_t)v14);
  unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v11 = v3;
  __int128 v12 = v3;
  sub_100008B44(&v11, a1);
  sub_100008AC8((unsigned __int8 **)&v11);
  int v4 = sub_100008924((unsigned __int8 **)v14);
  LOBYTE(v11) = -86;
  sub_100059DD4((char *)v4, &v11);
  if ((_BYTE)v11) {
    return 0LL;
  }
  unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v11 = v6;
  __int128 v12 = v6;
  sub_100008780(a1, (const std::string::value_type **)off_100125F28, (uint64_t)&v11);
  unint64_t v10 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v9[0] = v7;
  v9[1] = v7;
  sub_100008B44(v9, a1);
  sub_100008AC8((unsigned __int8 **)v9);
  if (sub_1000087E8((unsigned __int8 **)&v11, (unsigned __int8 **)v9)
    || *sub_10004A598((unsigned __int8 **)&v11) - 5 > 2)
  {
    return 1LL;
  }

  __int128 v8 = sub_100008924((unsigned __int8 **)&v11);
  LODWORD(v9[0]) = -1431655766;
  sub_10003CFC4(v8, (int *)v9);
  else {
    return LODWORD(v9[0]);
  }
}

uint64_t sub_10006EE20(uint64_t a1, char *a2)
{
  *(void *)(a1 + sub_100007004((uint64_t)v9 + 8) = 0LL;
  *(_BYTE *)a1 = 3;
  *(void *)(a1 + sub_100007004((uint64_t)v9 + 8) = sub_10006EE68(a2);
  sub_1000041AC(a1);
  sub_1000041AC(a1);
  return a1;
}

void *sub_10006EE68(char *a1)
{
  __int128 v2 = operator new(0x18uLL);
  sub_100005064(v2, a1);
  return v2;
}

void sub_10006EE9C(_Unwind_Exception *a1)
{
}

uint64_t sub_10006EEB0(uint64_t a1, char *a2)
{
  *(void *)(a1 + sub_100007004((uint64_t)v9 + 8) = 0LL;
  *(_BYTE *)a1 = 3;
  *(void *)(a1 + sub_100007004((uint64_t)v9 + 8) = sub_10006EEF8(a2);
  sub_1000041AC(a1);
  sub_1000041AC(a1);
  return a1;
}

void *sub_10006EEF8(char *a1)
{
  __int128 v2 = operator new(0x18uLL);
  sub_100005064(v2, a1);
  return v2;
}

void sub_10006EF2C(_Unwind_Exception *a1)
{
}

void sub_10006EF40()
{
  char v0 = (os_log_s *)qword_1001318E8;
  if (os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "[Sandboxing] Entering the sandbox", buf, 2u);
  }

  bzero(buf, 0x400uLL);
  if (!_set_user_dir_suffix("com.apple.analyticsd") || !confstr(65537, (char *)buf, 0x400uLL))
  {
    __int128 v2 = (os_log_s *)(id)qword_1001318E8;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      __int128 v3 = __error();
      sub_1000DCD98(v3, (uint64_t)v6, v2);
    }

    exit(1);
  }

  uint64_t v1 = realpath_DARWIN_EXTSN((const char *)buf, 0LL);
  if (!v1)
  {
    int v4 = (os_log_s *)(id)qword_1001318E8;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = __error();
      sub_1000DCDD4(v5, (uint64_t)v6, v4);
    }

    exit(1);
  }

  free(v1);
}

void sub_10006F090(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_10006F0AC()
{
  if (v3 < 0)
  {
    BOOL v0 = v2[1] == (void *)8 && *(void *)v2[0] == 0x6C616E7265746E49LL;
    operator delete(v2[0]);
  }

  else
  {
    return v3 == 8 && v2[0] == (void *)0x6C616E7265746E49LL;
  }

  return v0;
}

void sub_10006F174(void *a1@<X8>)
{
  id v3 = (id)MGCopyAnswer(@"ProductType", 0LL);
  if (v3 && (uint64_t v2 = objc_opt_class(&OBJC_CLASS___NSString), (objc_opt_isKindOfClass(v3, v2) & 1) != 0))
  {
    sub_100005064(a1, (char *)[v3 UTF8String]);
  }

  else
  {
    *a1 = 0LL;
    a1[1] = 0LL;
    a1[2] = 0LL;
  }
}

void sub_10006F1F4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void *sub_10006F208@<X0>(void *a1@<X8>)
{
  return sub_100005064(a1, "/System/Library/PrivateFrameworks/CoreAnalytics.framework/defaultConfig.json");
}

uint64_t sub_10006F218()
{
  BOOL v0 = sub_1000411AC();
  uint64_t result = open((const char *)v0, 0x1000000);
  if ((_DWORD)result != -1)
  {
    int v2 = result;
    if (fcntl(result, 63) != 4) {
      fcntl(v2, 64, 4LL);
    }
    return close(v2);
  }

  return result;
}

void *sub_10006F298@<X0>(void *a1@<X8>)
{
  return sub_100005064(a1, "ips.ca.synced");
}

void sub_10006F2A8()
{
  mach_service = xpc_connection_create_mach_service("com.apple.aggregated.addaily", 0LL, 0LL);
  if (mach_service)
  {
    connectiouint64_t n = mach_service;
    xpc_connection_set_event_handler(mach_service, &stru_100129B48);
    xpc_connection_resume(connection);
    xpc_object_t empty = xpc_dictionary_create_empty();
    int v2 = empty;
    if (empty)
    {
      xpc_dictionary_set_int64(empty, "operation", 3LL);
      xpc_connection_send_message(connection, v2);
    }

    mach_service = connection;
  }
}

void sub_10006F32C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_10006F354(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
}

uint64_t sub_10006F364@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  __int128 v6 = operator new(1uLL);
  uint64_t result = sub_10006F4A4((uint64_t)v6, a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10006F3A8(uint64_t a1)
{
  int v2 = (os_log_s *)qword_100131928;
  if (os_log_type_enabled((os_log_t)qword_100131928, OS_LOG_TYPE_INFO))
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    __int128 v7 = p_p;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "[FwConfigWriter] Deleted framework config file at %s",  buf,  0xCu);
  }

  return a1;
}

void sub_10006F494(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

uint64_t sub_10006F4A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6 = operator new(0x20uLL);
  *__int128 v6 = &off_100129B78;
  v6[1] = a2;
  _OWORD v6[2] = a3;
  void v6[3] = a1;
  __int128 v11 = v6;
  sub_100041324((uint64_t)v10);
  __int128 v7 = v11;
  if (v11 == v10)
  {
    uint64_t v8 = 4LL;
    __int128 v7 = v10;
    goto LABEL_5;
  }

  if (v11)
  {
    uint64_t v8 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }

  return a1;
}

void sub_10006F560(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

void *sub_10006F56C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v14 = 0LL;
  __int128 v7 = operator new(0x20uLL);
  *__int128 v7 = &off_100129DB0;
  v7[1] = &v14;
  _OWORD v7[2] = a3;
  void v7[3] = a4;
  unint64_t v16 = v7;
  (*(void (**)(uint64_t, void *))(*(void *)a2 + 176LL))(a2, v15);
  uint64_t result = v16;
  if (v16 == v15)
  {
    uint64_t v9 = 4LL;
    uint64_t result = v15;
  }

  else
  {
    if (!v16) {
      goto LABEL_6;
    }
    uint64_t v9 = 5LL;
  }

  uint64_t result = (void *)(*(uint64_t (**)(void))(*result + 8 * v9))();
LABEL_6:
  unint64_t v10 = v14;
  for (uint64_t i = *a3; v10 < 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3); uint64_t i = *a3)
  {
    __int128 v12 = (uint64_t **)(i + 24 * v10);
    v15[0] = v12;
    uint64_t v13 = *(void *)(a4 + 24);
    if (!v13) {
      sub_1000129CC();
    }
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *))(*(void *)v13 + 48LL))(v13, v15);
    unint64_t v10 = v14 + 1;
    unint64_t v14 = v10;
  }

  return result;
}

void sub_10006F6B8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

__n128 sub_10006F6D0(uint64_t a1)
{
  int v2 = (char *)operator new(0x20uLL);
  *(void *)int v2 = &off_100129B78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + sub_100007004((uint64_t)v9 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_10006F710(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_100129B78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + memset(v15, 170, 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + sub_100007004((uint64_t)v9 + 8) = result;
  return result;
}

void sub_10006F738(uint64_t a1)
{
  if (v2)
  {
    id v3 = (os_log_s *)qword_100131928;
    if (os_log_type_enabled((os_log_t)qword_100131928, OS_LOG_TYPE_INFO))
    {
      int v4 = &v37;
      if ((v37.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        int v4 = (std::string *)v37.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "[FwConfigWriter] Deleted framework config file at %s before writing a new one.",  buf,  0xCu);
    }
  }

  sub_1000D4248((const char *)&v37, 0LL, (int *)buf);
  if (*(_DWORD *)buf >= 2u) {
    __assert_rtn( "operator()",  "FrameworkConfigurationWriter.cpp",  62,  "boost::filesystem::exists(allowlistPath) == false");
  }
  memset(buf, 170, sizeof(buf));
  sub_10006FEA8((void (__cdecl ***)(std::ofstream *__hidden))buf, (uint64_t *)&v37, 16);
  unint64_t v40 = 0xAAAAAAAAAAAAAAAALL;
  int v41 = -1431655766;
  int v36 = 0;
  _OWORD v38[2] = 0x1F09116A8LL;
  int v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 232LL))(*(void *)(a1 + 8));
  int v6 = *(_DWORD *)(*(void *)(a1 + 16) + 16LL);
  unint64_t v7 = (v5 + v6);
  int v39 = v5 + v6;
  memset(v35, 170, sizeof(v35));
  LODWORD(v45) = 0;
  sub_1000701D8(v35, v7, &v45);
  int v8 = 4 * v7;
  uint64_t v9 = (4 * v7 + 24);
  int v34 = v8 + 24;
  std::string __p = (void *)0xAAAAAAAAAAAAAAAALL;
  unint64_t v32 = 0xAAAAAAAAAAAAAAAALL;
  std::ostream::sentry::sentry(&__p, buf);
  unint64_t v10 = &buf[*(void *)(*(void *)buf - 24LL)];
  if ((v10[32] & 5) == 0)
  {
    uint64_t v11 = *((void *)v10 + 5);
    __int128 v51 = 0u;
    __int128 v52 = 0u;
    __int128 v49 = 0u;
    __int128 v50 = 0u;
    __int128 v47 = 0u;
    __int128 v48 = 0u;
    __int128 v45 = 0u;
    __int128 v46 = 0u;
    uint64_t v53 = v9;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, __int128 *, uint64_t))(*(void *)v11 + 40LL))( v43,  v11,  &v45,  16LL);
    if (v44 == -1) {
      std::ios_base::clear( (std::ios_base *)&buf[*(void *)(*(void *)buf - 24LL)],  *(_DWORD *)&buf[*(void *)(*(void *)buf - 24LL) + 32] | 4);
    }
  }

  std::ostream::sentry::~sentry(&__p);
  LOBYTE(v45) = 10;
  sub_1000702CC(buf, (uint64_t)&v45, 1LL);
  ++v34;
  uint64_t v12 = *(void *)(a1 + 8);
  sub_1000706AC(v43, **(void ***)(a1 + 16), (void *)(*(void *)(a1 + 16) + 8LL));
  uint64_t v13 = operator new(0x28uLL);
  void *v13 = &off_100129BE8;
  v13[1] = v35;
  void v13[2] = &v36;
  _OWORD v13[3] = &v34;
  v13[4] = buf;
  *((void *)&v46 + 1) = v13;
  sub_10006F56C((uint64_t)v13, v12, v43, (uint64_t)&v45);
  unint64_t v14 = (__int128 *)*((void *)&v46 + 1);
  if (*((__int128 **)&v46 + 1) == &v45)
  {
    uint64_t v15 = 4LL;
    unint64_t v14 = &v45;
  }

  else
  {
    if (!*((void *)&v46 + 1)) {
      goto LABEL_15;
    }
    uint64_t v15 = 5LL;
  }

  (*(void (**)(void))(*(void *)v14 + 8 * v15))();
LABEL_15:
  *(void *)&__int128 v45 = v43;
  sub_100015E44((void ***)&v45);
  std::string __p = 0LL;
  unint64_t v32 = 0LL;
  uint64_t v33 = 0LL;
  unint64_t v29 = 0xAAAAAAAAAAAAAA02LL;
  *(void *)&__int128 v45 = 0LL;
  v43[0] = 0LL;
  unint64_t v30 = sub_10000BD28((uint64_t *)&v45, v43);
  sub_1000041AC((uint64_t)&v29);
  uint64_t v16 = *(void *)(a1 + 8);
  *(void *)&__int128 v45 = &off_100129C78;
  *((void *)&v45 + 1) = &__p;
  *(void *)&__int128 v46 = &v29;
  *((void *)&v46 + 1) = &v45;
  (*(void (**)(uint64_t, __int128 *))(*(void *)v16 + 216LL))(v16, &v45);
  unint64_t v17 = (__int128 *)*((void *)&v46 + 1);
  if (*((__int128 **)&v46 + 1) == &v45)
  {
    uint64_t v18 = 4LL;
    unint64_t v17 = &v45;
  }

  else
  {
    if (!*((void *)&v46 + 1)) {
      goto LABEL_20;
    }
    uint64_t v18 = 5LL;
  }

  (*(void (**)(__int128 *))(*(void *)v17 + 8 * v18))(v17);
LABEL_20:
  if (v33 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if (v33 >= 0) {
    uint64_t v20 = HIBYTE(v33);
  }
  else {
    uint64_t v20 = v32;
  }
  sub_1000702CC(buf, (uint64_t)p_p, v20);
  __int128 v21 = &buf[*(void *)(*(void *)buf - 24LL)];
  if ((v21[32] & 5) != 0)
  {
    int v22 = -1;
  }

  else
  {
    (*(void (**)(__int128 *__return_ptr, void, void, uint64_t, uint64_t))(**((void **)v21 + 5) + 32LL))( &v45,  *((void *)v21 + 5),  0LL,  1LL,  16LL);
    int v22 = v53;
  }

  int v41 = v22;
  LOBYTE(v45) = 10;
  sub_1000702CC(buf, (uint64_t)&v45, 1LL);
  sub_10006FFBC((uint64_t *)buf, (uint64_t)&v29);
  unint64_t v23 = &buf[*(void *)(*(void *)buf - 24LL)];
  if ((v23[32] & 5) != 0)
  {
    int v24 = -1;
  }

  else
  {
    (*(void (**)(__int128 *__return_ptr, void, void, uint64_t, uint64_t))(**((void **)v23 + 5) + 32LL))( &v45,  *((void *)v23 + 5),  0LL,  1LL,  16LL);
    int v24 = v53;
  }

  LODWORD(v40) = v24;
  v38[0] = 0xAAAAAAAAAAAAAAAALL;
  v38[1] = 0xAAAAAAAAAAAAAAAALL;
  std::ostream::sentry::sentry(v38, buf);
  __int16 v25 = &buf[*(void *)(*(void *)buf - 24LL)];
  if ((v25[32] & 5) == 0)
  {
    uint64_t v26 = *((void *)v25 + 5);
    uint64_t v53 = 0LL;
    __int128 v51 = 0u;
    __int128 v52 = 0u;
    __int128 v49 = 0u;
    __int128 v50 = 0u;
    __int128 v47 = 0u;
    __int128 v48 = 0u;
    __int128 v45 = 0u;
    __int128 v46 = 0u;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, __int128 *, uint64_t))(*(void *)v26 + 40LL))( v43,  v26,  &v45,  16LL);
    if (v44 == -1) {
      std::ios_base::clear( (std::ios_base *)&buf[*(void *)(*(void *)buf - 24LL)],  *(_DWORD *)&buf[*(void *)(*(void *)buf - 24LL) + 32] | 4);
    }
  }

  std::ostream::sentry::~sentry(v38);
  HIDWORD(v40) = v34;
  std::ostream::write(buf);
  uint64_t v27 = v35[0];
  char v28 = v35[1];
  while (v27 != v28)
  {
    LODWORD(v45) = *v27;
    std::ostream::write(buf);
    ++v27;
  }

  if (!std::filebuf::close(&buf[8])) {
    std::ios_base::clear( (std::ios_base *)&buf[*(void *)(*(void *)buf - 24LL)],  *(_DWORD *)&buf[*(void *)(*(void *)buf - 24LL) + 32] | 4);
  }
  sub_1000041AC((uint64_t)&v29);
  sub_10000425C(&v30, v29);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  if (v35[0])
  {
    v35[1] = v35[0];
    operator delete(v35[0]);
  }

  std::filebuf::~filebuf(&buf[8]);
  std::ios::~ios(&buf[416]);
}

void sub_10006FD38( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20, uint64_t a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, char a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a18)
  {
    a19 = (uint64_t)a18;
    operator delete(a18);
  }

  std::filebuf::~filebuf(&a34);
  std::ios::~ios(&STACK[0x230]);
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10006FE60(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void (**sub_10006FE9C())(std::__shared_weak_count *__hidden this, const std::type_info *)
{
}

void (__cdecl ***sub_10006FEA8( void (__cdecl ***a1)(std::ofstream *__hidden this), uint64_t *a2, int a3))(std::ofstream *__hidden this)
{
  int v6 = a1 + 1;
  *a1 = v7;
  *(void *)((char *)*(v7 - 3) + (void)a1) = v8;
  uint64_t v9 = (std::ios_base *)((char *)*(*a1 - 3) + (void)a1);
  std::ios_base::init(v9, a1 + 1);
  v9[1].__vftable = 0LL;
  v9[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf(v6);
  else {
    unint64_t v10 = (uint64_t *)*a2;
  }
  if (!std::filebuf::open(v6, v10, a3 | 0x10u)) {
    std::ios_base::clear( (std::ios_base *)((char *)*(*a1 - 3) + (void)a1),  *(_DWORD *)((char *)*(*a1 - 3) + (void)a1 + 32) | 4);
  }
  return a1;
}

void sub_10006FF84(_Unwind_Exception *a1)
{
}

uint64_t *sub_10006FFBC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  int v5 = (char *)a1 + *(void *)(*a1 - 24);
  uint64_t v6 = *((void *)v5 + 3);
  *((void *)v5 + 3) = 0LL;
  memset(__b, 170, sizeof(__b));
  unint64_t v7 = (std::__shared_weak_count *)operator new(0x28uLL);
  v7->__shared_weak_owners_ = 0LL;
  v7->__vftable = (std::__shared_weak_count_vtbl *)off_100129D08;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)off_100129D58;
  v7[1].__shared_owners_ = (uint64_t)a1;
  __int128 v19 = v7;
  uint64_t v20 = &v7[1].__vftable;
  __int128 v21 = v7;
  v7->__shared_owners_ = 0LL;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    unint64_t v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  unint64_t v10 = (const std::ios_base *)((char *)a1 + *(void *)(v4 - 24));
  std::ios_base::fmtflags fmtflags = v10[1].__fmtflags_;
  if (fmtflags == -1)
  {
    std::ios_base::getloc(v10);
    uint64_t v12 = std::locale::use_facet(&v22, &std::ctype<char>::id);
    std::ios_base::fmtflags fmtflags = ((uint64_t (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 32LL);
    std::locale::~locale(&v22);
    v10[1].__fmtflags_ = fmtflags;
  }

  sub_100006EC4((uint64_t)__b, (uint64_t)&v20, (char)fmtflags, 0);
  uint64_t v13 = v21;
  if (v21)
  {
    unint64_t v14 = (unint64_t *)&v21->__shared_owners_;
    do
      unint64_t v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

  if (v19)
  {
    uint64_t v16 = (unint64_t *)&v19->__shared_owners_;
    do
      unint64_t v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }

  sub_1000063D0(__b, a2, v6 > 0, 0LL, v6 & ~(v6 >> 63), 0LL);
  sub_100008750((uint64_t)__b);
  return a1;
}

void sub_10007019C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, std::locale a13, char a14)
{
}

void *sub_1000701D8(void *a1, unint64_t a2, _DWORD *a3)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a2)
  {
    sub_100070258(a1, a2);
    uint64_t v6 = (_DWORD *)a1[1];
    unint64_t v7 = &v6[a2];
    uint64_t v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4LL;
    }

    while (v8);
    a1[1] = v7;
  }

  return a1;
}

void sub_10007023C(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::ostream::~ostream(v1, v2 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

char *sub_100070258(void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    sub_1000046F8();
  }
  __n128 result = (char *)sub_100070298((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void *sub_100070298(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    sub_100004828();
  }
  return operator new(4 * a2);
}

void *sub_1000702CC(void *a1, uint64_t a2, uint64_t a3)
{
  v13[0] = 0xAAAAAAAAAAAAAAAALL;
  v13[1] = 0xAAAAAAAAAAAAAAAALL;
  std::ostream::sentry::sentry(v13, a1);
  if (LOBYTE(v13[0]))
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24LL)));
      unint64_t v10 = std::locale::use_facet(&v14, &std::ctype<char>::id);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32LL);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }

    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!sub_100070488(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear( (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24LL)),  *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24LL) + 32) | 5);
    }
  }

  std::ostream::sentry::~sentry(v13);
  return a1;
}

void sub_100070408( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11)
{
  if (a2)
  {
    std::ostream::sentry::~sentry(&a9);
    __cxa_begin_catch(exception_object);
    std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v11 + *(void *)(*v11 - 24LL)));
    __cxa_end_catch();
    JUMPOUT(0x1000703CCLL);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_100070488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0LL;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (v12 >= 1)
    {
      memset(__p, 170, sizeof(__p));
      sub_100070604(__p, v12, __c);
      uint64_t v13 = SHIBYTE(__p[2]) >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96LL))(v6, v13, v12);
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0LL;
      }
    }

    uint64_t v15 = a4 - a3;
    else {
      return 0LL;
    }
  }

  return v6;
}

void sub_1000705E0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100070604(void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8LL) {
    sub_100005114();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000LL;
    *__b = v6;
  }

  else
  {
    *((_BYTE *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }

  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

void *sub_1000706AC(void *a1, void *a2, void *a3)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a2 == a3)
  {
    unint64_t v4 = 0LL;
  }

  else
  {
    unint64_t v4 = 0LL;
    int v5 = a2;
    do
    {
      uint64_t v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          size_t v7 = v6;
          uint64_t v6 = (void *)*v6;
        }

        while (v6);
      }

      else
      {
        do
        {
          size_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          int v5 = v7;
        }

        while (!v8);
      }

      ++v4;
      int v5 = v7;
    }

    while (v7 != a3);
  }

  sub_100070730(a1, a2, a3, v4);
  return a1;
}

void *sub_100070730(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_100033EC4(result, a4);
    __n128 result = sub_1000707E4((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }

  return result;
}

void sub_1000707C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  *(void *)(v2 + std::ostream::~ostream(v1, v2 + 8) = v3;
  sub_100015E44((void ***)va);
  _Unwind_Resume(a1);
}

void *sub_1000707E4(uint64_t a1, void *a2, void *a3, void *__dst)
{
  unint64_t v4 = __dst;
  int64_t v12 = __dst;
  uint64_t v13 = (char *)__dst;
  v14[0] = a1;
  v14[1] = &v12;
  _OWORD v14[2] = &v13;
  unint64_t v15 = 0xAAAAAAAAAAAAAA00LL;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 55) < 0)
      {
        sub_10000B8BC(v4, (void *)v6[4], v6[5]);
      }

      else
      {
        __int128 v7 = *((_OWORD *)v6 + 2);
        void v4[2] = v6[6];
        *(_OWORD *)unint64_t v4 = v7;
      }

      BOOL v8 = (void *)v6[1];
      if (v8)
      {
        do
        {
          int v9 = v8;
          BOOL v8 = (void *)*v8;
        }

        while (v8);
      }

      else
      {
        do
        {
          int v9 = (void *)v6[2];
          BOOL v10 = *v9 == (void)v6;
          uint64_t v6 = v9;
        }

        while (!v10);
      }

      unint64_t v4 = v13 + 24;
      v13 += 24;
      uint64_t v6 = v9;
    }

    while (v9 != a3);
  }

  LOBYTE(v15) = 1;
  sub_100015DCC((uint64_t)v14);
  return v4;
}

void sub_1000708EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

__n128 sub_100070908(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &off_100129BE8;
  *(_OWORD *)(v2 + std::ostream::~ostream(v1, v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + memset(v15, 170, 24) = result;
  return result;
}

__n128 sub_100070948(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_100129BE8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + memset(v15, 170, 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + std::ostream::~ostream(v1, v2 + 8) = result;
  return result;
}

size_t sub_100070970(uint64_t a1, const char **a2)
{
  uint64_t v2 = a1 + 24;
  uint64_t v3 = *a2;
  unint64_t v4 = *(_DWORD **)(a1 + 16);
  *(_DWORD *)(**(void **)(a1 + 8) + 4LL * (*v4)++) = **(_DWORD **)(a1 + 24);
  int v5 = *(void **)(a1 + 32);
  size_t v6 = strlen(v3);
  sub_1000702CC(v5, (uint64_t)v3, v6);
  __int128 v7 = *(void **)(v2 + 8);
  char v9 = 0;
  sub_1000702CC(v7, (uint64_t)&v9, 1LL);
  size_t result = strlen(v3);
  **(_DWORD **)v2 += result + 1;
  return result;
}

uint64_t sub_100070A40(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void (**sub_100070A7C())(std::__shared_weak_count *__hidden this, const std::type_info *)
{
}

__n128 sub_100070A90(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &off_100129C78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + std::ostream::~ostream(v1, v2 + 8) = result;
  return result;
}

__n128 sub_100070AC8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_100129C78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + std::ostream::~ostream(v1, v2 + 8) = result;
  return result;
}

void sub_100070AE8(uint64_t a1, const char **a2, const std::string::value_type **a3)
{
  unint64_t v4 = *a2;
  int v5 = *a3;
  BOOL v10 = *a3;
  if (!strcmp(v4, "CoreAnalyticsFramework"))
  {
    std::string::assign(*(std::string **)(a1 + 8), v5);
    return;
  }

  int64_t v12 = 0LL;
  sub_100026984(&v10, (uint64_t)v11, 1, &v8);
  size_t v6 = v12;
  if (v12 == v11)
  {
    uint64_t v7 = 4LL;
    size_t v6 = v11;
    goto LABEL_7;
  }

  if (v12)
  {
    uint64_t v7 = 5LL;
LABEL_7:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }

  sub_100070CFC(*(void *)(a1 + 16), (uint64_t)&v8);
  sub_1000041AC((uint64_t)&v8);
  sub_10000425C(&v9, v8);
}

void sub_100070C00( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t *a10)
{
  if (a2 == 1)
  {
    uint64_t v13 = __cxa_begin_catch(a1);
    uint64_t v14 = (os_log_s *)qword_100131928;
    if (os_log_type_enabled((os_log_t)qword_100131928, OS_LOG_TYPE_ERROR)) {
      sub_1000DCEC4(v10, (uint64_t)v13, v14);
    }
    __cxa_end_catch();
    JUMPOUT(0x100070BD0LL);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_100070CB4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void (**sub_100070CF0())(std::__shared_weak_count *__hidden this, const std::type_info *)
{
}

uint64_t sub_100070CFC(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)a1)
  {
    if (*(_BYTE *)a1 != 2)
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
      char v9 = (char *)sub_10000528C((char *)a1);
      sub_100005064(&v12, v9);
      uint64_t v10 = std::string::insert(&v12, 0LL, "cannot use push_back() with ");
      __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      std::string::size_type cap = v10->__r_.__value_.__l.__cap_;
      __int128 v13 = v11;
      v10->__r_.__value_.__l.__size_ = 0LL;
      v10->__r_.__value_.__l.__cap_ = 0LL;
      v10->__r_.__value_.__r.__words[0] = 0LL;
      sub_100005128(308, (uint64_t)&v13, exception);
    }
  }

  else
  {
    *(_BYTE *)a1 = 2;
    unint64_t v4 = operator new(0x18uLL);
    v4[1] = 0LL;
    void v4[2] = 0LL;
    void *v4 = 0LL;
    *(void *)(a1 + std::ostream::~ostream(v1, v2 + 8) = v4;
    sub_1000041AC(a1);
  }

  int v5 = *(uint64_t **)(a1 + 8);
  unint64_t v6 = v5[1];
  if (v6 >= v5[2])
  {
    uint64_t result = sub_100070EB8(v5, a2);
  }

  else
  {
    sub_10000C3E4(v5[1], a2);
    uint64_t result = v6 + 16;
    v5[1] = v6 + 16;
  }

  v5[1] = result;
  return result;
}

void sub_100070E48( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  *(void *)(v21 + std::ostream::~ostream(v1, v2 + 8) = v22;
  _Unwind_Resume(exception_object);
}

uint64_t sub_100070EB8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_1000047F4(v7, v9);
  }
  else {
    uint64_t v10 = 0LL;
  }
  __int128 v13 = v10;
  uint64_t v14 = &v10[16 * v4];
  uint64_t v16 = &v10[16 * v9];
  sub_10000C3E4((uint64_t)v14, a2);
  unint64_t v15 = v14 + 16;
  sub_10000470C(a1, &v13);
  uint64_t v11 = a1[1];
  sub_100004A50((uint64_t)&v13);
  return v11;
}