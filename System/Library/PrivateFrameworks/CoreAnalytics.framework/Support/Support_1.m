void sub_100070FBC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100004A50((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100070FD0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100129D08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100070FE0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100129D08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_100071000(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 16LL))(a1 + 24);
}

uint64_t sub_100071010(uint64_t a1)
{
  return std::ostream::put(*(void *)(a1 + 8));
}

uint64_t sub_100071018(uint64_t a1)
{
  return std::ostream::write(*(void *)(a1 + 8));
}

__n128 sub_100071030(uint64_t a1)
{
  v2 = (char *)operator new(0x20uLL);
  *(void *)v2 = &off_100129DB0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_100071070(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_100129DB0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100071098(uint64_t a1, const std::string::value_type **a2)
{
  v3 = *a2;
  unint64_t v4 = **(void **)(a1 + 8);
  uint64_t v5 = **(void **)(a1 + 16);
  if (v4 < 0xAAAAAAAAAAAAAAABLL * ((*(void *)(*(void *)(a1 + 16) + 8LL) - v5) >> 3))
  {
    while (std::string::compare((const std::string *)(v5 + 24 * v4), v3) < 0)
    {
      v6 = (os_log_s *)qword_100131928;
      if (os_log_type_enabled((os_log_t)qword_100131928, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v11 = **(void **)(a1 + 16) + 24LL * **(void **)(a1 + 8);
        *(_DWORD *)buf = 136315138;
        *(void *)&buf[4] = v11;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "[FwConfigWriter] Adding additionally requested event %s to the allowlist.",  buf,  0xCu);
      }

      uint64_t v7 = *(void *)(a1 + 24);
      uint64_t v8 = **(void **)(a1 + 16) + 24LL * **(void **)(a1 + 8);
      *(void *)buf = v8;
      uint64_t v9 = *(void *)(v7 + 24);
      if (!v9) {
        goto LABEL_14;
      }
      (*(void (**)(uint64_t, uint8_t *))(*(void *)v9 + 48LL))(v9, buf);
      v10 = *(unint64_t **)(a1 + 8);
      unint64_t v4 = *v10 + 1;
      unint64_t *v10 = v4;
      uint64_t v5 = **(void **)(a1 + 16);
      if (v4 >= 0xAAAAAAAAAAAAAAABLL * ((*(void *)(*(void *)(a1 + 16) + 8LL) - v5) >> 3)) {
        break;
      }
    }
  }

  uint64_t v12 = *(void *)(a1 + 24);
  *(void *)buf = v3;
  uint64_t v13 = *(void *)(v12 + 24);
  if (!v13) {
LABEL_14:
  }
    sub_1000129CC();
  return (*(uint64_t (**)(uint64_t, uint8_t *))(*(void *)v13 + 48LL))(v13, buf);
}

uint64_t sub_100071254(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void (**sub_100071290())(std::__shared_weak_count *__hidden this, const std::type_info *)
{
}

uint64_t *sub_10007129C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = os_transaction_create(a2);
  *a1 = v3;
  if (!v3) {
    sub_1000DCF60();
  }
  return a1;
}

void **sub_1000712D4(void **a1)
{
  v2 = *a1;
  if (v2) {
    os_release(v2);
  }
  return a1;
}

void sub_100071308()
{
  v0 = objc_autoreleasePoolPush();
  sub_100005064(qword_100131828, "wirelessTrialIdentifier");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_100131828, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

char *sub_10007135C@<X0>(void *a1@<X8>)
{
  v2 = (char *)operator new(0x50uLL);
  *((void *)v2 + 1) = 0LL;
  *((void *)v2 + 2) = 0LL;
  *(void *)v2 = off_100129F28;
  *((void *)v2 + 9) = 0LL;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *((_DWORD *)v2 + 18) = 1065353216;
  a1[1] = v2;
  *(_OWORD *)(v2 + 24) = 0u;
  __n128 result = v2 + 24;
  *a1 = result;
  return result;
}

uint64_t sub_1000713B4(uint64_t a1)
{
  v2 = *(const void **)(a1 + 8);
  if (v2) {
    CFRelease(v2);
  }
  sub_1000226EC(a1 + 16);
  return a1;
}

void sub_1000713EC(uint64_t a1)
{
  v2 = *(const void **)(a1 + 8);
  if (v2) {
    CFRelease(v2);
  }
  sub_100071DA0(a1 + 16);
  *(_BYTE *)a1 = 0;
  uint64_t v3 = IOReportCopyChannelsInCategories(256LL, 2LL, 0LL);
  if (v3)
  {
    unint64_t v4 = (const void *)v3;
    IOReportPrune(v3, &stru_100129EB0);
    CFTypeRef cf = 0LL;
    uint64_t v5 = IOReportCreateSubscription(0LL, v4, &cf, 0LL, 0LL);
    if (v5)
    {
      v6 = (const void *)v5;
      *(void *)(a1 + 8) = IOReportCreateSamples(v5, cf, 0LL);
      if (cf) {
        CFRelease(cf);
      }
      CFRelease(v6);
    }

    CFRelease(v4);
    *(_BYTE *)a1 = 1;
  }

int sub_1000714D8(id a1, __CFDictionary *a2)
{
  return 16 * (IOReportChannelGetFormat(a2) != 1);
}

void sub_1000714FC(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v24 = 0LL;
  v25 = &v24;
  uint64_t v26 = 0x4002000000LL;
  v27 = sub_1000718B0;
  v28 = sub_1000718D4;
  v30[0] = 0LL;
  v30[1] = 0LL;
  uint64_t v29 = 0LL;
  if (!*(_BYTE *)a1)
  {
    uint64_t v12 = (os_log_s *)qword_1001318F0;
    if (os_log_type_enabled((os_log_t)qword_1001318F0, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "[IOReporter] ERROR: Channels not yet sampled.",  buf,  2u);
      v14 = (__int128 **)(v25 + 5);
      uint64_t v13 = (__int128 **)(v25 + 6);
    }

    else
    {
      uint64_t v13 = (__int128 **)v30;
      v14 = (__int128 **)&v29;
    }

    *(void *)a4 = 0LL;
    *(void *)(a4 + 8) = 0LL;
    *(void *)(a4 + 16) = 0LL;
    sub_100071DF4((char *)a4, *v14, *v13, 0xAAAAAAAAAAAAAAABLL * (((char *)*v13 - (char *)*v14) >> 3));
    goto LABEL_36;
  }

  Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 8), @"IOReportChannelGroups");
  if (Value)
  {
    if (a2[23] >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = *(const char **)a2;
    }
    CFStringRef v9 = CFStringCreateWithCString(kCFAllocatorDefault, v8, 0x8000100u);
    v10 = (const __CFDictionary *)CFDictionaryGetValue(Value, v9);
    if (v10)
    {
      if (*(char *)(a3 + 23) < 0)
      {
        if (!*(void *)(a3 + 8))
        {
LABEL_29:
          CFStringRef v17 = 0LL;
LABEL_30:
          v23[0] = _NSConcreteStackBlock;
          v23[1] = 0x40000000LL;
          v23[2] = sub_100071928;
          v23[3] = &unk_100129ED8;
          v23[4] = &v24;
          IOReportIterate(v10, v23);
LABEL_31:
          if (v9) {
            CFRelease(v9);
          }
          if (v17) {
            CFRelease(v17);
          }
          v22 = v25;
          *(void *)(a4 + 8) = 0LL;
          *(void *)(a4 + 16) = 0LL;
          *(void *)a4 = 0LL;
          sub_100071DF4( (char *)a4,  (__int128 *)v22[5],  (__int128 *)v22[6],  0xAAAAAAAAAAAAAAABLL * ((v22[6] - v22[5]) >> 3));
          goto LABEL_36;
        }

        uint64_t v11 = *(const char **)a3;
      }

      else
      {
        uint64_t v11 = (const char *)a3;
        if (!*(_BYTE *)(a3 + 23)) {
          goto LABEL_29;
        }
      }

      CFStringRef v17 = CFStringCreateWithCString(kCFAllocatorDefault, v11, 0x8000100u);
      v18 = (const __CFDictionary *)CFDictionaryGetValue(v10, @"IOReportChannelGroups");
      if (v18)
      {
        v10 = (const __CFDictionary *)CFDictionaryGetValue(v18, v17);
        if (v10) {
          goto LABEL_30;
        }
      }
    }

    else
    {
      CFStringRef v17 = 0LL;
    }

    v19 = (os_log_s *)qword_1001318F0;
    if (os_log_type_enabled((os_log_t)qword_1001318F0, OS_LOG_TYPE_DEBUG))
    {
      if (a2[23] >= 0) {
        v20 = a2;
      }
      else {
        v20 = *(char **)a2;
      }
      else {
        v21 = *(const char **)a3;
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&buf[4] = v20;
      __int16 v32 = 2080;
      v33 = v21;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEBUG,  "[IOReporter] ERROR: Could not find Channel Group(%s) - Subgroup (%s) pair.",  buf,  0x16u);
    }

    goto LABEL_31;
  }

  v15 = (os_log_s *)qword_1001318F0;
  if (os_log_type_enabled((os_log_t)qword_1001318F0, OS_LOG_TYPE_ERROR)) {
    sub_1000DCF88((uint64_t *)a2, v15);
  }
  v16 = v25;
  *(void *)(a4 + 8) = 0LL;
  *(void *)(a4 + 16) = 0LL;
  *(void *)a4 = 0LL;
  sub_100071DF4((char *)a4, (__int128 *)v16[5], (__int128 *)v16[6], 0xAAAAAAAAAAAAAAABLL * ((v16[6] - v16[5]) >> 3));
LABEL_36:
  _Block_object_dispose(&v24, 8);
  *(void *)buf = &v29;
  sub_100015E44((void ***)buf);
}

void sub_100071874( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  *(void *)(v8 - 96) = v7;
  sub_100015E44((void ***)(v8 - 96));
  _Unwind_Resume(a1);
}

__n128 sub_1000718B0(void *a1, uint64_t a2)
{
  a1[5] = 0LL;
  a1[6] = 0LL;
  a1[7] = 0LL;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0LL;
  *(void *)(a2 + 4_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a2 + 56) = 0LL;
  return result;
}

void sub_1000718D4(uint64_t a1)
{
  v1 = (void **)(a1 + 40);
  sub_100015E44(&v1);
}

uint64_t sub_100071928(uint64_t a1, uint64_t a2)
{
  ChannelName = (const __CFString *)IOReportChannelGetChannelName(a2);
  unint64_t v4 = (char *)sub_100071AF0(ChannelName);
  if (v4)
  {
    uint64_t v5 = v4;
    v6 = *(uint64_t **)(*(void *)(a1 + 32) + 8LL);
    sub_100005064(__p, v4);
    unint64_t v7 = v6[7];
    unint64_t v8 = v6[6];
    if (v8 >= v7)
    {
      uint64_t v10 = v6[5];
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - v10) >> 3);
      unint64_t v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_1000046F8();
      }
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - v10) >> 3);
      if (2 * v13 > v12) {
        unint64_t v12 = 2 * v13;
      }
      if (v13 >= 0x555555555555555LL) {
        unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v14 = v12;
      }
      v23[4] = v6 + 7;
      if (v14) {
        v15 = (char *)sub_1000171F0((uint64_t)(v6 + 7), v14);
      }
      else {
        v15 = 0LL;
      }
      v16 = &v15[24 * v11];
      v23[0] = v15;
      v23[1] = v16;
      v23[3] = &v15[24 * v14];
      __int128 v17 = *(_OWORD *)__p;
      *((void *)v16 + 2) = v22;
      *(_OWORD *)v16 = v17;
      __p[1] = 0LL;
      uint64_t v22 = 0LL;
      __p[0] = 0LL;
      v23[2] = v16 + 24;
      sub_10001717C(v6 + 5, v23);
      uint64_t v18 = v6[6];
      sub_100017378((uint64_t)v23);
      int v19 = SHIBYTE(v22);
      v6[6] = v18;
      if (v19 < 0) {
        operator delete(__p[0]);
      }
    }

    else
    {
      __int128 v9 = *(_OWORD *)__p;
      *(void *)(v8 + 16) = v22;
      *(_OWORD *)unint64_t v8 = v9;
      v6[6] = v8 + 24;
    }

    operator delete[](v5);
  }

  return 0LL;
}

void sub_100071ABC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_100071AF0(const __CFString *a1)
{
  CFIndex Length = CFStringGetLength(a1);
  CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
  CFIndex v4 = MaximumSizeForEncoding + 1;
  uint64_t v5 = operator new[]((MaximumSizeForEncoding + 1));
  if (!CFStringGetCString(a1, (char *)v5, v4, 0x8000100u))
  {
    operator delete[](v5);
    return 0LL;
  }

  return v5;
}

unint64_t sub_100071B60(uint64_t a1, unsigned __int8 *a2)
{
  if (!*(_BYTE *)a1)
  {
    __int128 v9 = (os_log_s *)qword_1001318F0;
    if (os_log_type_enabled((os_log_t)qword_1001318F0, OS_LOG_TYPE_ERROR)) {
      sub_1000DD00C(v9);
    }
    goto LABEL_7;
  }

  CFIndex v4 = (void *)(a1 + 16);
  uint64_t v5 = sub_100021A64((void *)(a1 + 16), a2);
  if (!v5)
  {
    uint64_t v6 = *(void *)(a1 + 8);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 0x40000000LL;
    v11[2] = sub_100071C70;
    v11[3] = &unk_100129EF8;
    v11[4] = a1;
    IOReportIterate(v6, v11);
    uint64_t v5 = sub_100021A64(v4, a2);
    if (!v5)
    {
LABEL_7:
      LOBYTE(v7) = 0;
      unint64_t v8 = 0LL;
      return v8 | v7;
    }
  }

  uint64_t v7 = *((void *)v5 + 5);
  unint64_t v8 = v7 & 0xFFFFFFFFFFFFFF00LL;
  return v8 | v7;
}

uint64_t sub_100071C70(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  ChannelName = (const __CFString *)IOReportChannelGetChannelName(a2);
  uint64_t v5 = (char *)sub_100071AF0(ChannelName);
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t IntegerValue = IOReportSimpleGetIntegerValue(a2, 0LL);
    sub_100005064(__p, v6);
    unint64_t v11 = __p;
    *((void *)sub_100071F94(v3 + 16, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v11) + 5) = IntegerValue;
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    operator delete[](v6);
  }

  return 0LL;
}

void sub_100071D40( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100071D64(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100129F28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100071D74(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100129F28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_100071D94(uint64_t a1)
{
  return sub_1000713B4(a1 + 24);
}

void sub_100071DA0(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_100022724(a1, *(void ***)(a1 + 16));
    *(void *)(a1 + 16) = 0LL;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0LL; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0LL;
    }

    *(void *)(a1 + 24) = 0LL;
  }

char *sub_100071DF4(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_100033EC4(result, a4);
    __n128 result = sub_100071EA8((uint64_t)(v6 + 16), a2, a3, *((char **)v6 + 1));
    *((void *)v6 + 1) = result;
  }

  return result;
}

void sub_100071E88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  *(void *)(v2 + _Block_object_dispose(va, 8) = v3;
  sub_100015E44((void ***)va);
  _Unwind_Resume(a1);
}

char *sub_100071EA8(uint64_t a1, __int128 *a2, __int128 *a3, char *__dst)
{
  CFIndex v4 = __dst;
  __int128 v9 = __dst;
  char v10 = __dst;
  v11[0] = a1;
  v11[1] = &v9;
  v11[2] = &v10;
  unint64_t v12 = 0xAAAAAAAAAAAAAA00LL;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_10000B8BC(v4, *(void **)v6, *((void *)v6 + 1));
        CFIndex v4 = v10;
      }

      else
      {
        __int128 v7 = *v6;
        *((void *)v4 + 2) = *((void *)v6 + 2);
        *(_OWORD *)CFIndex v4 = v7;
      }

      uint64_t v6 = (__int128 *)((char *)v6 + 24);
      v4 += 24;
      char v10 = v4;
    }

    while (v6 != a3);
  }

  LOBYTE(v12) = 1;
  sub_100015DCC((uint64_t)v11);
  return v4;
}

void sub_100071F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void *sub_100071F94(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  __int128 v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_100021B64(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v13 = v8;
      if (v8 >= v10) {
        unint64_t v13 = v8 % v10;
      }
    }

    else
    {
      unint64_t v13 = (v10 - 1) & v8;
    }

    unint64_t v14 = *(void ***)(*(void *)a1 + 8 * v13);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(void **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v9)
        {
        }

        else
        {
          if (v12 > 1)
          {
            if (v16 >= v10) {
              v16 %= v10;
            }
          }

          else
          {
            v16 &= v10 - 1;
          }

          if (v16 != v13) {
            break;
          }
        }
      }
    }
  }

  else
  {
    unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  }

  __int128 v17 = (void *)(a1 + 16);
  uint64_t i = operator new(0x30uLL);
  *(void *)uint64_t i = 0LL;
  *((void *)i + 1) = v9;
  uint64_t v18 = *a4;
  __int128 v19 = **a4;
  *((void *)i + 4) = *((void *)*a4 + 2);
  *((_OWORD *)i + 1) = v19;
  *((void *)v18 + 1) = 0LL;
  *((void *)v18 + 2) = 0LL;
  *(void *)uint64_t v18 = 0LL;
  *((void *)i + 5) = 0LL;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v21 = *(float *)(a1 + 32);
  if (!v10 || (float)(v21 * (float)v10) < v20)
  {
    BOOL v22 = 1LL;
    if (v10 >= 3) {
      BOOL v22 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v10);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    sub_10002246C(a1, v25);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v13 = v9 % v10;
      }
      else {
        unint64_t v13 = v9;
      }
    }

    else
    {
      unint64_t v13 = (v10 - 1) & v9;
    }
  }

  uint64_t v26 = *(void *)a1;
  v27 = *(void **)(*(void *)a1 + 8 * v13);
  if (v27)
  {
    *(void *)uint64_t i = *v27;
LABEL_38:
    void *v27 = i;
    goto LABEL_39;
  }

  *(void *)uint64_t i = *v17;
  *__int128 v17 = i;
  *(void *)(v26 + 8 * v13) = v17;
  if (*(void *)i)
  {
    unint64_t v28 = *(void *)(*(void *)i + 8LL);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v28 >= v10) {
        v28 %= v10;
      }
    }

    else
    {
      v28 &= v10 - 1;
    }

    v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_38;
  }

void sub_10007223C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
}

void sub_100072258(__int128 *a1@<X0>, void *a2@<X8>)
{
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  sub_1000041AC((uint64_t)v4);
  sub_10000425C(&v5, v4[0]);
}

void sub_100072338( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t sub_100072364(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_1000723B4(__int128 *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  v6[0] = *(_BYTE *)a2;
  __int128 v7 = *(uint64_t **)(a2 + 8);
  sub_1000041AC(a2);
  *(_BYTE *)a2 = 0;
  *(void *)(a2 + _Block_object_dispose(va, 8) = 0LL;
  sub_1000041AC((uint64_t)v6);
  sub_10000E0F4((uint64_t)v8, a1, (uint64_t)v6, 0, 0);
  sub_10007301C((uint64_t)v8, a3);
  sub_1000041AC((uint64_t)v12);
  sub_10000425C(&v13, v12[0]);
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  sub_1000041AC((uint64_t)v6);
  sub_10000425C(&v7, v6[0]);
}

void sub_1000724B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10, uint64_t a11, char a12)
{
}

void sub_1000724D8(__int128 *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, void *a5@<X8>)
{
  v10[0] = *(_BYTE *)a2;
  char v11 = *(uint64_t **)(a2 + 8);
  sub_1000041AC(a2);
  *(_BYTE *)a2 = 0;
  *(void *)(a2 + _Block_object_dispose(va, 8) = 0LL;
  sub_1000041AC((uint64_t)v10);
  sub_10000E0F4((uint64_t)v12, a1, (uint64_t)v10, a3, a4);
  sub_10007301C((uint64_t)v12, a5);
  sub_1000041AC((uint64_t)v16);
  sub_10000425C(&v17, v16[0]);
  if (v15 < 0) {
    operator delete(__p);
  }
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
  sub_1000041AC((uint64_t)v10);
  sub_10000425C(&v11, v10[0]);
}

void sub_1000725E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10, uint64_t a11, char a12)
{
}

void sub_10007260C(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  CFIndex v4 = (unsigned __int8 *)(a1 + 40);
  if (*(_BYTE *)(a1 + 40) == 1 && !sub_1000731A4(*(void *)(a1 + 48), "timestamp"))
  {
    v110[0] = 5;
    rep = (uint64_t *)std::chrono::system_clock::now().__d_.__rep_;
    sub_1000041AC((uint64_t)v110);
    sub_1000041AC((uint64_t)v110);
    uint64_t v5 = sub_100003F94(v4, "timestamp");
    sub_1000041AC((uint64_t)v110);
    unsigned __int8 v6 = *(_BYTE *)v5;
    *(_BYTE *)uint64_t v5 = v110[0];
    v110[0] = v6;
    __int128 v7 = (uint64_t *)v5[1];
    v5[1] = (uint64_t)rep;
    rep = v7;
    sub_1000041AC((uint64_t)v5);
    sub_1000041AC((uint64_t)v110);
    sub_10000425C(&rep, v110[0]);
  }

  if (*(_BYTE *)(a1 + 56) == 1)
  {
    a2[2] = 0LL;
    uint64_t v79 = (uint64_t)(a2 + 2);
    *a2 = 0LL;
    a2[1] = 0LL;
    unint64_t v108 = 0xAAAAAAAAAAAAAA00LL;
    v109 = 0LL;
    sub_1000041AC((uint64_t)&v108);
    sub_1000041AC((uint64_t)&v108);
    unint64_t v106 = 0xAAAAAAAAAAAAAA00LL;
    v107 = 0LL;
    sub_1000041AC((uint64_t)&v106);
    sub_1000041AC((uint64_t)&v106);
    v112[0] = v4;
    sub_1000638FC((uint64_t *)v112, (uint64_t)&v97);
    sub_10006397C((uint64_t *)v112, (uint64_t)v92);
    while (!sub_10001855C(&v97, (unsigned __int8 **)v92))
    {
      if (*sub_100018150(&v97) == 2)
      {
        unint64_t v13 = sub_100018150(&v97);
        sub_10000C3E4((uint64_t)v90, (uint64_t)v13);
        unint64_t v14 = (const void **)sub_1000650C4(&v97);
        char v15 = sub_1000304A4((unsigned __int8 *)&v106, v14);
        sub_1000041AC((uint64_t)v90);
        unsigned __int8 v16 = *(_BYTE *)v15;
        *(_BYTE *)char v15 = v90[0];
        v90[0] = v16;
        uint64_t v17 = v15[1];
        v15[1] = v91;
        uint64_t v91 = v17;
        sub_1000041AC((uint64_t)v15);
        sub_1000041AC((uint64_t)v90);
        int v18 = v90[0];
        __int128 v19 = (uint64_t **)&v91;
      }

      else
      {
        float v20 = sub_100018150(&v97);
        sub_10000C3E4((uint64_t)v88, (uint64_t)v20);
        float v21 = (const void **)sub_1000650C4(&v97);
        BOOL v22 = sub_1000304A4((unsigned __int8 *)&v108, v21);
        sub_1000041AC((uint64_t)v88);
        unsigned __int8 v23 = *(_BYTE *)v22;
        *(_BYTE *)BOOL v22 = v88[0];
        v88[0] = v23;
        uint64_t v24 = v22[1];
        v22[1] = v89;
        uint64_t v89 = v24;
        sub_1000041AC((uint64_t)v22);
        sub_1000041AC((uint64_t)v88);
        int v18 = v88[0];
        __int128 v19 = (uint64_t **)&v89;
      }

      sub_10000425C(v19, v18);
      sub_100018704(&v97);
      ++v101;
    }

    if (v96 < 0) {
      operator delete(__p);
    }
    if (v94 < 0) {
      operator delete(v93);
    }
    if (v105 < 0) {
      operator delete(v104);
    }
    if (v103 < 0) {
      operator delete(v102);
    }
    if (!(_BYTE)v106) {
      goto LABEL_30;
    }
    if (v106 == 1)
    {
      if (!v107[2]) {
        goto LABEL_30;
      }
    }

    else if (v106 == 2 && !((v107[1] - *v107) >> 4))
    {
LABEL_30:
      sub_1000724D8((__int128 *)(a1 + 16), (uint64_t)&v108, 0, *(_BYTE *)(a1 + 57), v92);
      uint64_t v26 = (_OWORD *)a2[1];
      unint64_t v25 = a2[2];
      if ((unint64_t)v26 >= v25)
      {
        uint64_t v62 = ((uint64_t)v26 - *a2) >> 4;
        unint64_t v63 = v62 + 1;
        uint64_t v64 = v25 - *a2;
        if (v64 >> 3 > v63) {
          unint64_t v63 = v64 >> 3;
        }
        else {
          unint64_t v65 = v63;
        }
        v100 = a2 + 2;
        v66 = (char *)sub_1000047F4(v79, v65);
        v68 = &v66[16 * v62];
        *(_OWORD *)v68 = v92[0];
        v92[0] = 0uLL;
        v70 = (void *)*a2;
        v69 = (void *)a2[1];
        if (v69 == (void *)*a2)
        {
          int64x2_t v73 = vdupq_n_s64((unint64_t)v69);
          v71 = &v66[16 * v62];
        }

        else
        {
          v71 = &v66[16 * v62];
          do
          {
            __int128 v72 = *((_OWORD *)v69 - 1);
            v69 -= 2;
            *((_OWORD *)v71 - sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = v72;
            v71 -= 16;
            void *v69 = 0LL;
            v69[1] = 0LL;
          }

          while (v69 != v70);
          int64x2_t v73 = *(int64x2_t *)a2;
        }

        v74 = v68 + 16;
        *a2 = (uint64_t)v71;
        a2[1] = (uint64_t)(v68 + 16);
        int64x2_t v98 = v73;
        uint64_t v75 = a2[2];
        a2[2] = (uint64_t)&v66[16 * v67];
        uint64_t v99 = v75;
        v97 = (unsigned __int8 *)v73.i64[0];
        sub_10003AAA8((uint64_t)&v97);
        v76 = (std::__shared_weak_count *)*((void *)&v92[0] + 1);
        a2[1] = (uint64_t)v74;
        if (v76)
        {
          p_shared_owners = (unint64_t *)&v76->__shared_owners_;
          do
            unint64_t v78 = __ldaxr(p_shared_owners);
          while (__stlxr(v78 - 1, p_shared_owners));
          if (!v78)
          {
            ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
            std::__shared_weak_count::__release_weak(v76);
          }
        }
      }

      else
      {
        *uint64_t v26 = v92[0];
        a2[1] = (uint64_t)(v26 + 1);
      }

LABEL_104:
      sub_1000041AC((uint64_t)&v106);
      sub_10000425C(&v107, v106);
      sub_1000041AC((uint64_t)&v108);
      sub_10000425C(&v109, v108);
      return;
    }

    v87 = &v106;
    sub_1000638FC((uint64_t *)&v87, (uint64_t)&v97);
    sub_10006397C((uint64_t *)&v87, (uint64_t)v92);
    uint64_t v27 = a1;
    unint64_t v28 = (__int128 *)(a1 + 16);
    while (!sub_10001855C(&v97, (unsigned __int8 **)v92))
    {
      uint64_t v29 = sub_1000650C4(&v97);
      v30 = sub_100018150(&v97);
      for (uint64_t i = 0LL; ; uint64_t i = (uint64_t *)((char *)i + 1))
      {
        unint64_t v32 = *v30;
        if (*v30)
        {
          if ((_DWORD)v32 == 1)
          {
            unint64_t v32 = *(void *)(*((void *)v30 + 1) + 16LL);
          }

          else if ((_DWORD)v32 == 2)
          {
            unint64_t v32 = (uint64_t)(*(void *)(*((void *)v30 + 1) + 8LL) - **((void **)v30 + 1)) >> 4;
          }

          else
          {
            unint64_t v32 = 1LL;
          }
        }

        unint64_t v85 = 0xAAAAAAAAAAAAAAAALL;
        v86 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
        sub_10000C3E4((uint64_t)&v85, (uint64_t)&v108);
        if (*(_BYTE *)sub_10000BD90((uint64_t)v30, (uint64_t)i))
        {
          v83[0] = 6;
          v84 = i;
          sub_1000041AC((uint64_t)v83);
          sub_1000041AC((uint64_t)v83);
          v33 = sub_1000304A4((unsigned __int8 *)&v85, (const void **)v29);
          sub_1000041AC((uint64_t)v83);
          unsigned __int8 v34 = *(_BYTE *)v33;
          *(_BYTE *)v33 = v83[0];
          v83[0] = v34;
          v35 = (uint64_t *)v33[1];
          v33[1] = (uint64_t)v84;
          v84 = v35;
          sub_1000041AC((uint64_t)v33);
          sub_1000041AC((uint64_t)v83);
          sub_10000425C(&v84, v83[0]);
          uint64_t v36 = sub_10000BD90((uint64_t)v30, (uint64_t)i);
          sub_10000C3E4((uint64_t)v81, v36);
          else {
            size_t v37 = *(void *)(v29 + 8);
          }
          memset(v112, 170, 24);
          sub_10002AD50((uint64_t)v112, v37 + 6);
          if (SHIBYTE(v112[2]) >= 0) {
            v38 = v112;
          }
          else {
            v38 = (const void **)v112[0];
          }
          if (v37)
          {
            else {
              v39 = *(const void **)v29;
            }
            memmove(v38, v39, v37);
          }

          strcpy((char *)v38 + v37, "_value");
          v40 = sub_1000304A4((unsigned __int8 *)&v85, v112);
          sub_1000041AC((uint64_t)v81);
          unsigned __int8 v41 = *(_BYTE *)v40;
          *(_BYTE *)v40 = v81[0];
          v81[0] = v41;
          v42 = (uint64_t *)v40[1];
          v40[1] = (uint64_t)v82;
          v82 = v42;
          sub_1000041AC((uint64_t)v40);
          if (SHIBYTE(v112[2]) < 0) {
            operator delete((void *)v112[0]);
          }
          sub_1000041AC((uint64_t)v81);
          sub_10000425C(&v82, v81[0]);
          sub_1000724D8(v28, (uint64_t)&v85, 0, *(_BYTE *)(v27 + 57), &v80);
          v44 = (_OWORD *)a2[1];
          unint64_t v43 = a2[2];
          if ((unint64_t)v44 >= v43)
          {
            uint64_t v45 = ((uint64_t)v44 - *a2) >> 4;
            unint64_t v46 = v45 + 1;
            uint64_t v47 = v43 - *a2;
            if (v47 >> 3 > v46) {
              unint64_t v46 = v47 >> 3;
            }
            else {
              unint64_t v48 = v46;
            }
            v112[4] = a2 + 2;
            v49 = (char *)sub_1000047F4(v79, v48);
            v51 = &v49[16 * v45];
            *(_OWORD *)v51 = v80;
            __int128 v80 = 0uLL;
            v53 = (void *)*a2;
            v52 = (void *)a2[1];
            if (v52 == (void *)*a2)
            {
              int64x2_t v56 = vdupq_n_s64((unint64_t)v52);
              v54 = &v49[16 * v45];
            }

            else
            {
              v54 = &v49[16 * v45];
              do
              {
                __int128 v55 = *((_OWORD *)v52 - 1);
                v52 -= 2;
                *((_OWORD *)v54 - sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = v55;
                v54 -= 16;
                void *v52 = 0LL;
                v52[1] = 0LL;
              }

              while (v52 != v53);
              int64x2_t v56 = *(int64x2_t *)a2;
            }

            v57 = v51 + 16;
            *a2 = (uint64_t)v54;
            a2[1] = (uint64_t)(v51 + 16);
            *(int64x2_t *)&v112[1] = v56;
            v58 = (const void *)a2[2];
            a2[2] = (uint64_t)&v49[16 * v50];
            v112[3] = v58;
            v112[0] = (const void *)v56.i64[0];
            sub_10003AAA8((uint64_t)v112);
            v59 = (std::__shared_weak_count *)*((void *)&v80 + 1);
            a2[1] = (uint64_t)v57;
            if (v59)
            {
              v60 = (unint64_t *)&v59->__shared_owners_;
              do
                unint64_t v61 = __ldaxr(v60);
              while (__stlxr(v61 - 1, v60));
              if (!v61)
              {
                ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                std::__shared_weak_count::__release_weak(v59);
              }
            }
          }

          else
          {
            _OWORD *v44 = v80;
            a2[1] = (uint64_t)(v44 + 1);
          }
        }

        sub_1000041AC((uint64_t)&v85);
        sub_10000425C(&v86, v85);
      }

      sub_100018704(&v97);
      ++v101;
    }

    if (v96 < 0) {
      operator delete(__p);
    }
    if (v94 < 0) {
      operator delete(v93);
    }
    if (v105 < 0) {
      operator delete(v104);
    }
    if (v103 < 0) {
      operator delete(v102);
    }
    goto LABEL_104;
  }

  if (*(_BYTE *)(a1 + 56))
  {
    *a2 = 0LL;
    a2[1] = 0LL;
    a2[2] = 0LL;
  }

  else
  {
    *a2 = 0LL;
    a2[1] = 0LL;
    a2[2] = 0LL;
    uint64_t v8 = *(void *)(a1 + 8);
    v97 = *(unsigned __int8 **)a1;
    v98.i64[0] = v8;
    if (!v8) {
      goto LABEL_32;
    }
    char v9 = (unint64_t *)(v8 + 16);
    do
      unint64_t v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    unint64_t v11 = a2[1];
    if (v11 < a2[2])
    {
      sub_10000CF18((void *)a2[1], &v97);
      uint64_t v12 = v11 + 16;
      a2[1] = v11 + 16;
    }

    else
    {
LABEL_32:
      uint64_t v12 = sub_1000732C8(a2, &v97);
    }

    a2[1] = v12;
    if (v98.i64[0]) {
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v98.i64[0]);
    }
  }

void sub_100072F0C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20, uint64_t a21, char a22, uint64_t a23, uint64_t a24, char a25, uint64_t a26, char a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, std::__shared_weak_count *a43)
{
  *(void *)(v43 + _Block_object_dispose(va, 8) = v44;
  if (a43) {
    std::__shared_weak_count::__release_weak(a43);
  }
  a42 = v43;
  sub_1000100E4((void ***)&a42);
  _Unwind_Resume(a1);
}

void sub_10007301C(uint64_t a1@<X1>, void *a2@<X8>)
{
  CFIndex v4 = operator new(0x58uLL);
  sub_10007307C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_10000CCC8((uint64_t)a2, v4 + 3, (uint64_t)(v4 + 3));
}

void sub_100073068(_Unwind_Exception *a1)
{
}

void *sub_10007307C(void *a1, uint64_t a2)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_100125740;
  char v4 = -86;
  sub_10007310C((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1000730F8(_Unwind_Exception *a1)
{
}

uint64_t sub_10007310C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = 0LL;
  *(void *)(a2 + _Block_object_dispose(va, 8) = 0LL;
  uint64_t v5 = (_BYTE *)(a2 + 16);
  if (*(char *)(a3 + 39) < 0)
  {
    sub_10000B8BC(v5, *(void **)(a3 + 16), *(void *)(a3 + 24));
  }

  else
  {
    __int128 v6 = *(_OWORD *)(a3 + 16);
    *(void *)(a2 + 32) = *(void *)(a3 + 32);
    *(_OWORD *)uint64_t v5 = v6;
  }

  char v8 = *(_BYTE *)(a3 + 40);
  uint64_t v7 = a3 + 40;
  *(_BYTE *)(a2 + 40) = v8;
  uint64_t v9 = a2 + 40;
  *(void *)(v9 + _Block_object_dispose(va, 8) = *(void *)(v7 + 8);
  sub_1000041AC(v7);
  *(_BYTE *)uint64_t v7 = 0;
  *(void *)(v7 + _Block_object_dispose(va, 8) = 0LL;
  uint64_t result = sub_1000041AC(v9);
  *(_WORD *)(v9 + 16) = *(_WORD *)(v7 + 16);
  return result;
}

void sub_10007318C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000731A4(uint64_t a1, std::string::value_type *__s)
{
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v3 = *(uint64_t **)(a1 + 8);
  if (!v3) {
    return 0LL;
  }
  while (std::string::compare((const std::string *)(v3 + 4), __s) > 0)
  {
    uint64_t v2 = v3;
LABEL_6:
    uint64_t v3 = (uint64_t *)*v3;
    if (!v3) {
      return 0LL;
    }
  }

  if (std::string::compare((const std::string *)(v3 + 4), __s) < 0)
  {
    ++v3;
    goto LABEL_6;
  }

  uint64_t v6 = *v3;
  uint64_t v7 = v3;
  if (*v3)
  {
    uint64_t v7 = v3;
    do
    {
      int v8 = std::string::compare((const std::string *)(v6 + 32), __s);
      uint64_t v9 = (uint64_t *)(v6 + 8);
      if (v8 >= 0)
      {
        uint64_t v9 = (uint64_t *)v6;
        uint64_t v7 = (void *)v6;
      }

      uint64_t v6 = *v9;
    }

    while (*v9);
  }

  uint64_t v10 = v3[1];
  if (v10)
  {
    do
    {
      int v11 = std::string::compare((const std::string *)(v10 + 32), __s);
      uint64_t v12 = (uint64_t *)(v10 + 8);
      if (v11 > 0)
      {
        uint64_t v12 = (uint64_t *)v10;
        uint64_t v2 = (void *)v10;
      }

      uint64_t v10 = *v12;
    }

    while (*v12);
  }

  if (v7 == v2) {
    return 0LL;
  }
  uint64_t result = 0LL;
  do
  {
    unint64_t v13 = (void *)v7[1];
    if (v13)
    {
      do
      {
        unint64_t v14 = v13;
        unint64_t v13 = (void *)*v13;
      }

      while (v13);
    }

    else
    {
      do
      {
        unint64_t v14 = (void *)v7[2];
        BOOL v15 = *v14 == (void)v7;
        uint64_t v7 = v14;
      }

      while (!v15);
    }

    ++result;
    uint64_t v7 = v14;
  }

  while (v14 != v2);
  return result;
}

uint64_t sub_1000732C8(uint64_t *a1, void *a2)
{
  uint64_t v3 = (void *)*a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - (void)v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  else {
    unint64_t v9 = v5;
  }
  BOOL v22 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_1000047F4(v7, v9);
  }
  else {
    uint64_t v10 = 0LL;
  }
  __int128 v19 = v10;
  v20.i64[0] = (uint64_t)&v10[16 * v4];
  float v21 = &v10[16 * v9];
  sub_10000CF18(v20.i64[0], a2);
  uint64_t v11 = v20.i64[0];
  uint64_t v12 = v20.i64[0] + 16;
  v20.i64[1] = v20.i64[0] + 16;
  unint64_t v14 = (void *)*a1;
  unint64_t v13 = (void *)a1[1];
  if (v13 == (void *)*a1)
  {
    int64x2_t v16 = vdupq_n_s64((unint64_t)v13);
  }

  else
  {
    do
    {
      __int128 v15 = *((_OWORD *)v13 - 1);
      v13 -= 2;
      *(_OWORD *)(v11 - 16) = v15;
      v11 -= 16LL;
      *unint64_t v13 = 0LL;
      v13[1] = 0LL;
    }

    while (v13 != v14);
    int64x2_t v16 = *(int64x2_t *)a1;
    uint64_t v12 = v20.i64[1];
  }

  *a1 = v11;
  a1[1] = v12;
  int64x2_t v20 = v16;
  uint64_t v17 = (char *)a1[2];
  a1[2] = (uint64_t)v21;
  float v21 = v17;
  __int128 v19 = (char *)v16.i64[0];
  sub_10003AAA8((uint64_t)&v19);
  return v12;
}

void sub_100073408( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_10007341C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_1000738D8(a1, a2);
}

void sub_10007346C(void *a1, uint64_t *a2)
{
  if (!*a2) {
    return;
  }
  sub_100025178(a1 + 3, a2);
  (*(void (**)(void))(*(void *)a1[3] + 48LL))(a1[3]);
  unint64_t v9 = 0LL;
  uint64_t v10 = 0LL;
  uint64_t v3 = a1[1];
  uint64_t v11 = 0LL;
  __p[0] = &off_10012A030;
  __p[1] = a1;
  __p[2] = &v9;
  unint64_t v13 = __p;
  (*(void (**)(uint64_t, void **))(*(void *)v3 + 24LL))(v3, __p);
  uint64_t v4 = v13;
  if (v13 == __p)
  {
    uint64_t v5 = 4LL;
    uint64_t v4 = __p;
    goto LABEL_6;
  }

  if (v13)
  {
    uint64_t v5 = 5LL;
LABEL_6:
    (*((void (**)(void))*v4 + v5))();
  }

  uint64_t v6 = v9;
  for (i = v10; v6 != i; uint64_t v6 = (__int128 *)((char *)v6 + 24))
  {
    memset(__p, 170, sizeof(__p));
    if (*((char *)v6 + 23) < 0)
    {
      sub_10000B8BC(__p, *(void **)v6, *((void *)v6 + 1));
    }

    else
    {
      __int128 v8 = *v6;
      __p[2] = *((void **)v6 + 2);
      *(_OWORD *)__p = v8;
    }

    (*(void (**)(void, void **))(*(void *)a1[1] + 40LL))(a1[1], __p);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
  }

  __p[0] = &v9;
  sub_100015E44((void ***)__p);
}

void sub_1000735C4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

uint64_t sub_1000735D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5) {
    BOOL v6 = *(_BYTE *)(a4 + 32) == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6) {
    uint64_t v5 = *(void *)(a1 + 8);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16LL))(v5);
}

uint64_t **sub_1000735F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __n128 *a4@<X8>)
{
  v8.n128_u64[0] = 0xAAAAAAAAAAAAAAAALL;
  v8.n128_u64[1] = 0xAAAAAAAAAAAAAAAALL;
  v11[1] = v8;
  __n128 v12 = v8;
  v11[0] = v8;
  (*(void (**)(__n128 *__return_ptr))(**(void **)(a1 + 8) + 32LL))(v11);
  if (v12.n128_u8[8])
  {
    sub_100073840(a4, v11);
  }

  else
  {
    uint64_t v9 = *(void *)(a1 + 24);
    if (v9)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9 + 32LL))(v9, a2, a3);
    }

    else
    {
      a4->n128_u8[0] = 0;
      a4[2].n128_u8[8] = 0;
    }
  }

  return sub_100046D80((uint64_t **)v11);
}

uint64_t sub_1000736C8(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 24LL))(result, a2);
  }
  return result;
}

uint64_t sub_100073718(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40LL))(result, a2);
  }
  return result;
}

uint64_t sub_100073774(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48LL))(*(void *)(a1 + 8));
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3) {
    return (*(unsigned int (**)(uint64_t))(*(void *)v3 + 48LL))(v3) & v2;
  }
  return v2;
}

void *sub_1000737C0(void *a1)
{
  *a1 = off_100129F78;
  uint64_t v2 = (uint64_t)(a1 + 1);
  sub_100007004((uint64_t)(a1 + 3));
  sub_100007004(v2);
  return a1;
}

void sub_100073800(void *a1)
{
  *a1 = off_100129F78;
  uint64_t v2 = (uint64_t)(a1 + 1);
  sub_100007004((uint64_t)(a1 + 3));
  sub_100007004(v2);
  operator delete(a1);
}

__n128 *sub_100073840(__n128 *a1, __n128 *a2)
{
  a1->n128_u8[0] = 0;
  a1[2].n128_u8[8] = 0;
  sub_100073870(a1, a2);
  return a1;
}

__n128 sub_100073870(__n128 *a1, __n128 *a2)
{
  if (a2[2].n128_u8[8])
  {
    a1->n128_u8[0] = a2->n128_u8[0];
    a1->n128_u64[1] = a2->n128_u64[1];
    sub_1000041AC((uint64_t)a2);
    a2->n128_u8[0] = 0;
    a2->n128_u64[1] = 0LL;
    sub_1000041AC((uint64_t)a1);
    __n128 result = a2[1];
    a1[2].n128_u8[0] = a2[2].n128_u8[0];
    a1[1] = result;
    a1[2].n128_u8[8] = 1;
  }

  return result;
}

void *sub_1000738D8@<X0>(void *a1@<X1>, void *a2@<X8>)
{
  __n128 result = operator new(0x40uLL);
  result[1] = 0LL;
  result[2] = 0LL;
  *__n128 result = off_100129FE0;
  result[3] = off_100129F78;
  uint64_t v5 = a1[1];
  result[4] = *a1;
  result[5] = v5;
  if (v5)
  {
    BOOL v6 = (unint64_t *)(v5 + 8);
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }

  result[6] = 0LL;
  result[7] = 0LL;
  *a2 = result + 3;
  a2[1] = result;
  return result;
}

void sub_100073948(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100129FE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100073958(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100129FE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_100073978(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 sub_100073990(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &off_10012A030;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + _Block_object_dispose(va, 8) = result;
  return result;
}

__n128 sub_1000739C8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10012A030;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + _Block_object_dispose(va, 8) = result;
  return result;
}

uint64_t sub_1000739E8(uint64_t result, __int128 *a2, uint64_t a3, uint64_t a4)
{
  if (*(_BYTE *)(a4 + 32))
  {
    uint64_t v5 = result;
    (*(void (**)(void))(**(void **)(*(void *)(result + 8) + 24LL) + 16LL))(*(void *)(*(void *)(result + 8) + 24LL));
    BOOL v6 = *(uint64_t **)(v5 + 16);
    unint64_t v7 = v6[1];
    if (v7 >= v6[2])
    {
      __n128 result = sub_100073AA0(v6, a2);
    }

    else
    {
      sub_1000384AC(v6, a2);
      __n128 result = v7 + 24;
    }

    v6[1] = result;
  }

  return result;
}

uint64_t sub_100073A58(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void (**sub_100073A94())(std::__shared_weak_count *__hidden this, const std::type_info *)
{
}

uint64_t sub_100073AA0(uint64_t *a1, __int128 *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_1000046F8();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555LL) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  int v18 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_1000171F0(v7, v9);
  }
  else {
    uint64_t v10 = 0LL;
  }
  uint64_t v11 = &v10[24 * v4];
  v15[0] = v10;
  v15[1] = v11;
  int64x2_t v16 = v11;
  uint64_t v17 = &v10[24 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    sub_10000B8BC(v11, *(void **)a2, *((void *)a2 + 1));
    uint64_t v11 = v16;
  }

  else
  {
    __int128 v12 = *a2;
    *((void *)v11 + 2) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v11 = v12;
  }

  int64x2_t v16 = v11 + 24;
  sub_10001717C(a1, v15);
  uint64_t v13 = a1[1];
  sub_100017378((uint64_t)v15);
  return v13;
}

void sub_100073BE0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100073BF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = (os_log_s *)qword_100131780;
  if (os_log_type_enabled((os_log_t)qword_100131780, OS_LOG_TYPE_DEFAULT))
  {
    sub_100006200(a3, -1, 0x20u, 0LL, 1, __p);
    if (v8 >= 0) {
      BOOL v6 = __p;
    }
    else {
      BOOL v6 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v10 = a2;
    __int16 v11 = 2082;
    __int128 v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[%{public}s] PROGRESS: %{public}s", buf, 0x16u);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }

void sub_100073CF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = (os_log_s *)qword_100131780;
  if (os_log_type_enabled((os_log_t)qword_100131780, OS_LOG_TYPE_INFO))
  {
    sub_100006200(a3, -1, 0x20u, 0LL, 1, __p);
    if (v8 >= 0) {
      BOOL v6 = __p;
    }
    else {
      BOOL v6 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v10 = a2;
    __int16 v11 = 2082;
    __int128 v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "[%{public}s] INFO: %{public}s", buf, 0x16u);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }

void sub_100073DF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = (os_log_s *)qword_100131780;
  if (os_log_type_enabled((os_log_t)qword_100131780, OS_LOG_TYPE_INFO))
  {
    sub_100006200(a3, -1, 0x20u, 0LL, 1, __p);
    if (v8 >= 0) {
      BOOL v6 = __p;
    }
    else {
      BOOL v6 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v10 = a2;
    __int16 v11 = 2082;
    __int128 v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "[%{public}s] WARNING: %{public}s", buf, 0x16u);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }

void sub_100073EF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = (os_log_s *)qword_100131780;
  if (os_log_type_enabled((os_log_t)qword_100131780, OS_LOG_TYPE_ERROR))
  {
    sub_100006200(a3, -1, 0x20u, 0LL, 1, __p);
    if (v8 >= 0) {
      BOOL v6 = __p;
    }
    else {
      BOOL v6 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v10 = a2;
    __int16 v11 = 2082;
    __int128 v12 = v6;
    _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[%{public}s] ERROR: %{public}s", buf, 0x16u);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }

void sub_100073FFC(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

double sub_100074010@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  unint64_t v4 = operator new(0x70uLL);
  sub_1000740C4(v4, a1);
  sub_100074414((uint64_t *)v6, (uint64_t)v4);
  double result = v6[0];
  *a2 = *(_OWORD *)v6;
  return result;
}

void sub_100074094(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1000045D0(exception_object);
}

void *sub_1000740C4(void *a1, void *a2)
{
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *a1 = off_10012A118;
  return a1;
}

void sub_100074158( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10007417C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = (os_log_s *)qword_100131950;
  if (os_log_type_enabled((os_log_t)qword_100131950, OS_LOG_TYPE_DEBUG)) {
    sub_1000DD078(v5);
  }
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 96) + 24LL))(*(void *)(a1 + 96), a3);
}

uint64_t sub_1000741E4(uint64_t a1)
{
  *(void *)a1 = off_10012A1E8;
  sub_100007004(a1 + 96);
  unint64_t v4 = (void **)(a1 + 72);
  sub_100074350(&v4);
  uint64_t v2 = *(dispatch_object_s **)(a1 + 64);
  if (v2) {
    dispatch_release(v2);
  }
  xpc_release(*(xpc_object_t *)(a1 + 56));
  *(void *)(a1 + 56) = 0LL;
  sub_100022C54(a1 + 8);
  return a1;
}

void sub_10007428C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

void sub_100074298(char *a1)
{
  *(void *)a1 = off_10012A1E8;
  sub_100007004((uint64_t)(a1 + 96));
  uint64_t v3 = (void **)(a1 + 72);
  sub_100074350(&v3);
  uint64_t v2 = (dispatch_object_s *)*((void *)a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  xpc_release(*((xpc_object_t *)a1 + 7));
  *((void *)a1 + 7) = 0LL;
  if (a1[55] < 0) {
    operator delete(*((void **)a1 + 4));
  }
  sub_100022C54((uint64_t)(a1 + 8));
  operator delete(a1);
}

void sub_100074344(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

void sub_100074350(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (xpc_connection_t *)**a1;
  if (v2)
  {
    unint64_t v4 = (xpc_connection_t *)v1[1];
    unint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        unint64_t v4 = sub_1000743C0(v4 - 1);
      while (v4 != v2);
      unint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

xpc_connection_t *sub_1000743C0(xpc_connection_t *a1)
{
  if (xpc_get_type(*a1) == (xpc_type_t)&_xpc_type_connection) {
    xpc_connection_cancel(*a1);
  }
  xpc_release(*a1);
  *a1 = 0LL;
  return a1;
}

uint64_t *sub_100074414(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  unint64_t v4 = operator new(0x20uLL);
  *unint64_t v4 = &off_10012A188;
  v4[1] = 0LL;
  v4[2] = 0LL;
  v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2) {
    unint64_t v5 = (void *)(a2 + 8);
  }
  else {
    unint64_t v5 = 0LL;
  }
  sub_10000CCC8((uint64_t)a1, v5, a2);
  return a1;
}

void sub_100074470(void *a1)
{
}

void sub_100074490(_Unwind_Exception *a1)
{
}

void sub_1000744A8(std::__shared_weak_count *a1)
{
}

void sub_1000744BC(uint64_t a1)
{
}

uint64_t sub_1000744D0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

uint64_t sub_100074510(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 40LL))(result);
  }
  return result;
}

double sub_100074524@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  unint64_t v4 = operator new(0x70uLL);
  sub_1000747A4(v4, a1);
  sub_100075738((uint64_t *)v6, (uint64_t)v4);
  double result = v6[0];
  *a2 = *(_OWORD *)v6;
  return result;
}

void sub_1000745A8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1000045D0(exception_object);
}

void *sub_1000745D8(void *a1, const void **a2, void *a3)
{
  else {
    size_t v6 = (size_t)a2[1];
  }
  memset(__p, 170, sizeof(__p));
  uint64_t v7 = __p;
  sub_10002AD50((uint64_t)__p, v6 + 4);
  if (SHIBYTE(__p[2]) < 0) {
    uint64_t v7 = (void **)__p[0];
  }
  if (v6)
  {
    else {
      char v8 = *a2;
    }
    memmove(v7, v8, v6);
  }

  strcpy((char *)v7 + v6, ".XPC");
  if (SHIBYTE(__p[2]) >= 0) {
    unint64_t v9 = __p;
  }
  else {
    unint64_t v9 = (void **)__p[0];
  }
  dispatch_queue_t v10 = dispatch_queue_create((const char *)v9, 0LL);
  a1[1] = 0LL;
  a1[2] = 0LL;
  a1[3] = v10;
  if (v10)
  {
    __int16 v11 = v10;
    dispatch_retain(v10);
    dispatch_release(v11);
  }

  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *a1 = off_10012A1E8;
  __int128 v12 = a1 + 4;
  if (*((char *)a2 + 23) < 0)
  {
    sub_10000B8BC(v12, (void *)*a2, (unint64_t)a2[1]);
  }

  else
  {
    __int128 v13 = *(_OWORD *)a2;
    a1[6] = a2[2];
    *(_OWORD *)__int128 v12 = v13;
  }

  a1[7] = xpc_null_create();
  a1[8] = dispatch_group_create();
  a1[9] = 0LL;
  a1[10] = 0LL;
  a1[11] = 0LL;
  a1[12] = *a3;
  uint64_t v14 = a3[1];
  a1[13] = v14;
  if (v14)
  {
    __int128 v15 = (unint64_t *)(v14 + 8);
    do
      unint64_t v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }

  return a1;
}

void sub_100074778(_Unwind_Exception *a1)
{
}

void *sub_1000747A4(void *a1, void *a2)
{
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_10007482C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100074850(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v3 = a1;
  uint64_t v2 = *(dispatch_queue_s **)(a1 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_100075848;
  block[3] = &unk_10012A330;
  block[4] = v1;
  block[5] = &v3;
  dispatch_sync(v2, block);
}

void sub_1000748DC(uint64_t a1@<X0>, dispatch_object_s **a2@<X8>)
{
  uint64_t v4 = a1 + 8;
  uint64_t v7 = a1;
  unint64_t v5 = *(dispatch_queue_s **)(a1 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_100075DD4;
  block[3] = &unk_10012A380;
  block[4] = v4;
  block[5] = &v7;
  dispatch_sync(v5, block);
  char v6 = *(dispatch_object_s **)(a1 + 64);
  *a2 = v6;
  if (v6) {
    dispatch_retain(v6);
  }
}

void sub_100074988(uint64_t a1)
{
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000CF18(&v12, (void *)(a1 + 8));
  uint64_t v2 = operator new(8uLL);
  void *v2 = a1;
  uint64_t v3 = *(dispatch_queue_s **)(a1 + 24);
  unint64_t v4 = v12;
  unint64_t v5 = v13;
  if (v13)
  {
    char v6 = (unint64_t *)(v13 + 8);
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }

  char v8 = operator new(0x18uLL);
  *char v8 = v2;
  v8[1] = v4;
  v8[2] = v5;
  dispatch_async_f(v3, v8, (dispatch_function_t)sub_100075E1C);
  unint64_t v9 = (std::__shared_weak_count *)v13;
  if (v13)
  {
    dispatch_queue_t v10 = (unint64_t *)(v13 + 8);
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

void sub_100074A80(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

void sub_100074A90(uint64_t a1)
{
  if (xpc_get_type(*(xpc_object_t *)(a1 + 56)) == (xpc_type_t)&_xpc_type_connection)
  {
    uint64_t v2 = (os_log_s *)qword_100131950;
    if (os_log_type_enabled((os_log_t)qword_100131950, OS_LOG_TYPE_INFO))
    {
      uint64_t v3 = (void *)(a1 + 32);
      int v7 = 136446210;
      char v8 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "[%{public}s XPC Server] Suspending server",  (uint8_t *)&v7,  0xCu);
    }

    xpc_connection_suspend(*(xpc_connection_t *)(a1 + 56));
    unint64_t v5 = *(_xpc_connection_s ***)(a1 + 72);
    unint64_t v4 = *(_xpc_connection_s ***)(a1 + 80);
    while (v5 != v4)
    {
      char v6 = *v5++;
      xpc_connection_suspend(v6);
    }
  }

void sub_100074B7C(uint64_t a1)
{
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000CF18(&v12, (void *)(a1 + 8));
  uint64_t v2 = operator new(8uLL);
  void *v2 = a1;
  uint64_t v3 = *(dispatch_queue_s **)(a1 + 24);
  unint64_t v4 = v12;
  unint64_t v5 = v13;
  if (v13)
  {
    char v6 = (unint64_t *)(v13 + 8);
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }

  char v8 = operator new(0x18uLL);
  *char v8 = v2;
  v8[1] = v4;
  v8[2] = v5;
  dispatch_async_f(v3, v8, (dispatch_function_t)sub_100075E84);
  unint64_t v9 = (std::__shared_weak_count *)v13;
  if (v13)
  {
    dispatch_queue_t v10 = (unint64_t *)(v13 + 8);
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

void sub_100074C74(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

void sub_100074C84(uint64_t a1)
{
  if (xpc_get_type(*(xpc_object_t *)(a1 + 56)) == (xpc_type_t)&_xpc_type_connection)
  {
    uint64_t v2 = (os_log_s *)qword_100131950;
    if (os_log_type_enabled((os_log_t)qword_100131950, OS_LOG_TYPE_INFO))
    {
      uint64_t v3 = (void *)(a1 + 32);
      int v7 = 136446210;
      char v8 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "[%{public}s XPC Server] Resuming server",  (uint8_t *)&v7,  0xCu);
    }

    unint64_t v4 = *(_xpc_connection_s ***)(a1 + 72);
    unint64_t v5 = *(_xpc_connection_s ***)(a1 + 80);
    while (v4 != v5)
    {
      char v6 = *v4++;
      xpc_connection_resume(v6);
    }

    xpc_connection_resume(*(xpc_connection_t *)(a1 + 56));
  }

xpc_object_t *sub_100074D78(xpc_object_t *a1, xpc_object_t *a2, xpc_object_t *a3)
{
  if (a1 == a2)
  {
LABEL_5:
    unint64_t v5 = a2;
  }

  else
  {
    unint64_t v5 = a1;
    while (!xpc_equal(*v5, *a3))
    {
      if (++v5 == a2) {
        goto LABEL_5;
      }
    }
  }

  if (v5 != a2)
  {
    for (uint64_t i = v5 + 1; i != a2; ++i)
    {
      if (!xpc_equal(*i, *a3)) {
        sub_100075EEC(v5++, i);
      }
    }
  }

  return v5;
}

xpc_object_t *sub_100074E0C(uint64_t a1, xpc_object_t *a2, xpc_connection_t *a3)
{
  if (a2 != (xpc_object_t *)a3)
  {
    unint64_t v5 = a3;
    char v6 = *(xpc_object_t **)(a1 + 8);
    if (a3 == (xpc_connection_t *)v6)
    {
      char v8 = a2;
    }

    else
    {
      uint64_t v7 = ((char *)a3 - (char *)a2) >> 3;
      char v8 = a2;
      do
      {
        sub_100075EEC(v8, &v8[v7]);
        ++v8;
      }

      while (&v8[v7] != v6);
      unint64_t v5 = *(xpc_connection_t **)(a1 + 8);
    }

    while (v5 != (xpc_connection_t *)v8)
      unint64_t v5 = sub_1000743C0(v5 - 1);
    *(void *)(a1 + _Block_object_dispose(va, 8) = v8;
  }

  return a2;
}

void sub_100074EA8(uint64_t a1, xpc_object_t *a2)
{
  if (os_log_type_enabled((os_log_t)qword_100131950, OS_LOG_TYPE_DEBUG)) {
    sub_1000DD0E4();
  }
  unint64_t v4 = *(void *)(a1 + 80);
  if (v4 >= *(void *)(a1 + 88))
  {
    uint64_t v5 = sub_100076030((void *)(a1 + 72), a2);
  }

  else
  {
    sub_100076150(a1 + 88, *(void **)(a1 + 80), a2);
    uint64_t v5 = v4 + 8;
    *(void *)(a1 + 80) = v4 + 8;
  }

  *(void *)(a1 + 80) = v5;
  dispatch_group_enter(*(dispatch_group_t *)(a1 + 64));
  char v6 = (_xpc_connection_s *)*a2;
  sub_10000CF18(&v18, (void *)(a1 + 8));
  uint64_t v8 = v18;
  uint64_t v7 = v19;
  if (v19)
  {
    p_shared_weak_owners = (unint64_t *)&v19->__shared_weak_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

  handler[0] = _NSConcreteStackBlock;
  handler[1] = 1174405120LL;
  handler[2] = sub_1000750B0;
  handler[3] = &unk_10012A230;
  handler[4] = a1;
  handler[5] = v8;
  unint64_t v16 = v7;
  if (v7)
  {
    unint64_t v13 = (unint64_t *)&v7->__shared_weak_owners_;
    do
      unint64_t v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }

  uint64_t v17 = v6;
  xpc_connection_set_event_handler(v6, handler);
  xpc_connection_set_target_queue(v6, *(dispatch_queue_t *)(a1 + 24));
  xpc_connection_resume(v6);
  (*(void (**)(uint64_t, xpc_object_t *))(*(void *)a1 + 48LL))(a1, a2);
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_100075074( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  *(void *)(v16 + 80) = v17;
  _Unwind_Resume(exception_object);
}

void sub_1000750B0(void *a1, void *a2)
{
  uint64_t v3 = a1[4];
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    char v6 = std::__shared_weak_count::lock(v4);
    uint64_t v18 = v6;
    if (v6)
    {
      uint64_t v7 = v6;
      unint64_t v17 = a1[5];
      if (!v17)
      {
LABEL_28:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          unint64_t v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }

        return;
      }

      xpc_object_t v8 = (xpc_object_t)a1[7];
      if (v8)
      {
        xpc_retain(v8);
        if (a2)
        {
LABEL_6:
          xpc_retain(a2);
          xpc_object_t v9 = a2;
LABEL_9:
          xpc_type_t type = xpc_get_type(a2);
          if (type == (xpc_type_t)&_xpc_type_dictionary)
          {
            v19[0] = v8;
            if (v8 && xpc_get_type(v8) == (xpc_type_t)&_xpc_type_connection) {
              xpc_retain(v8);
            }
            else {
              v19[0] = xpc_null_create();
            }
            xpc_object_t object = v9;
            if (v9 && xpc_get_type(v9) == (xpc_type_t)&_xpc_type_dictionary) {
              xpc_retain(v9);
            }
            else {
              xpc_object_t object = xpc_null_create();
            }
            (*(void (**)(uint64_t, xpc_object_t *, xpc_object_t *))(*(void *)v3 + 64LL))(v3, v19, &object);
            xpc_release(object);
            xpc_release(v19[0]);
          }

          else if (type == (xpc_type_t)&_xpc_type_error)
          {
            v19[0] = v8;
            if (v8 && xpc_get_type(v8) == (xpc_type_t)&_xpc_type_connection) {
              xpc_retain(v8);
            }
            else {
              v19[0] = xpc_null_create();
            }
            (*(void (**)(uint64_t, xpc_object_t *))(*(void *)v3 + 56LL))(v3, v19);
            xpc_release(v19[0]);
            v19[0] = v8;
            if (v8 && xpc_get_type(v8) == (xpc_type_t)&_xpc_type_connection) {
              xpc_retain(v8);
            }
            else {
              v19[0] = xpc_null_create();
            }
            __int128 v15 = sub_100074D78(*(xpc_object_t **)(v3 + 72), *(xpc_object_t **)(v3 + 80), v19);
            sub_100074E0C(v3 + 72, v15, *(xpc_connection_t **)(v3 + 80));
            xpc_release(v19[0]);
            if (a2 == &_xpc_error_connection_invalid)
            {
              if (os_log_type_enabled((os_log_t)qword_100131950, OS_LOG_TYPE_DEBUG))
              {
                xpc_dictionary_get_string(&_xpc_error_connection_invalid, _xpc_error_key_description);
                sub_1000DD16C();
              }

              dispatch_group_leave(*(dispatch_group_t *)(v3 + 64));
            }

            else if (a2 == &_xpc_error_connection_interrupted)
            {
              if (os_log_type_enabled((os_log_t)qword_100131950, OS_LOG_TYPE_DEBUG))
              {
                xpc_dictionary_get_string(&_xpc_error_connection_interrupted, _xpc_error_key_description);
                sub_1000DD1A4();
              }
            }

            else if (os_log_type_enabled((os_log_t)qword_100131950, OS_LOG_TYPE_ERROR))
            {
              xpc_dictionary_get_string(a2, _xpc_error_key_description);
              sub_1000DD1DC();
            }
          }

          else if (os_log_type_enabled((os_log_t)qword_100131950, OS_LOG_TYPE_ERROR))
          {
            sub_1000DD210();
          }

          xpc_object_t reply = xpc_dictionary_create_reply(a2);
          if (reply)
          {
            remote_connection = xpc_dictionary_get_remote_connection(a2);
            xpc_connection_send_message(remote_connection, reply);
            xpc_release(reply);
          }

          xpc_release(v9);
          xpc_release(v8);
          goto LABEL_28;
        }
      }

      else
      {
        xpc_object_t v8 = xpc_null_create();
        if (a2) {
          goto LABEL_6;
        }
      }

      xpc_object_t v9 = xpc_null_create();
      goto LABEL_9;
    }
  }

void sub_1000754A0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, char a11, uint64_t a12, xpc_object_t object)
{
}

uint64_t sub_10007556C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 4_Block_object_dispose(va, 8) = v2;
  if (v2)
  {
    uint64_t v3 = (unint64_t *)(v2 + 16);
    do
      unint64_t v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }

  return result;
}

void sub_100075590(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t sub_1000755A0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40LL))( *(void *)(a1 + 96),  a2,  1LL);
}

uint64_t sub_1000755B4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 16LL))(*(void *)(a1 + 96));
}

uint64_t sub_1000755C4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 48LL))(*(void *)(a1 + 96));
}

uint64_t sub_1000755D4(uint64_t a1)
{
  *(void *)a1 = off_10012A1E8;
  sub_100007004(a1 + 96);
  unint64_t v4 = (void **)(a1 + 72);
  sub_100074350(&v4);
  uint64_t v2 = *(dispatch_object_s **)(a1 + 64);
  if (v2) {
    dispatch_release(v2);
  }
  xpc_release(*(xpc_object_t *)(a1 + 56));
  *(void *)(a1 + 56) = 0LL;
  sub_100022C54(a1 + 8);
  return a1;
}

void sub_100075678(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

void sub_100075684(char *a1)
{
  *(void *)a1 = off_10012A1E8;
  sub_100007004((uint64_t)(a1 + 96));
  uint64_t v3 = (void **)(a1 + 72);
  sub_100074350(&v3);
  uint64_t v2 = (dispatch_object_s *)*((void *)a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  xpc_release(*((xpc_object_t *)a1 + 7));
  *((void *)a1 + 7) = 0LL;
  if (a1[55] < 0) {
    operator delete(*((void **)a1 + 4));
  }
  sub_100022C54((uint64_t)(a1 + 8));
  operator delete(a1);
}

void sub_10007572C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

uint64_t *sub_100075738(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  unint64_t v4 = operator new(0x20uLL);
  *unint64_t v4 = &off_10012A2E0;
  v4[1] = 0LL;
  v4[2] = 0LL;
  v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2) {
    uint64_t v5 = (void *)(a2 + 8);
  }
  else {
    uint64_t v5 = 0LL;
  }
  sub_10000CCC8((uint64_t)a1, v5, a2);
  return a1;
}

void sub_100075794(void *a1)
{
}

void sub_1000757B4(_Unwind_Exception *a1)
{
}

void sub_1000757CC(std::__shared_weak_count *a1)
{
}

void sub_1000757E0(uint64_t a1)
{
}

uint64_t sub_1000757F4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

uint64_t sub_100075834(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 40LL))(result);
  }
  return result;
}

void sub_100075848(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 40);
  uint64_t v2 = (const char *)(v1 + 32);
  mach_service = xpc_connection_create_mach_service(v2, *(dispatch_queue_t *)(v1 + 24), 1uLL);
  if ((mach_service || (mach_service = xpc_null_create()) != 0LL)
    && xpc_get_type(mach_service) == (xpc_type_t)&_xpc_type_connection)
  {
    xpc_retain(mach_service);
    xpc_object_t v4 = mach_service;
  }

  else
  {
    xpc_object_t v4 = xpc_null_create();
  }

  xpc_object_t v5 = xpc_null_create();
  char v6 = *(void **)(v1 + 56);
  *(void *)(v1 + 56) = v4;
  xpc_release(v6);
  xpc_release(v5);
  xpc_release(mach_service);
  sub_10000CF18(&v16, (void *)(v1 + 8));
  xpc_object_t v8 = v16;
  uint64_t v7 = (std::__shared_weak_count *)v17;
  if (v17)
  {
    xpc_object_t v9 = (unint64_t *)(v17 + 16);
    do
      unint64_t v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

  dispatch_group_enter(*(dispatch_group_t *)(v1 + 64));
  unint64_t v13 = *(_xpc_connection_s **)(v1 + 56);
  uint64_t v16 = _NSConcreteStackBlock;
  uint64_t v17 = 1174405120LL;
  uint64_t v18 = sub_100075A58;
  __int128 v19 = &unk_10012A350;
  uint64_t v20 = v1;
  float v21 = v8;
  BOOL v22 = v7;
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      unint64_t v15 = __ldxr(p_shared_weak_owners);
    while (__stxr(v15 + 1, p_shared_weak_owners));
  }

  xpc_connection_set_event_handler(v13, &v16);
  sub_100074C84(v1);
  if (v22) {
    std::__shared_weak_count::__release_weak(v22);
  }
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_100075A00( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1000045D0(exception_object);
}

void sub_100075A58(void *a1, xpc_object_t a2)
{
  uint64_t v3 = a1[4];
  xpc_object_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    char v6 = std::__shared_weak_count::lock(v4);
    unint64_t v15 = v6;
    if (v6)
    {
      uint64_t v7 = v6;
      if (!a1[5])
      {
LABEL_29:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          unint64_t v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }

        return;
      }

      xpc_type_t type = xpc_get_type(a2);
      if (type != (xpc_type_t)&_xpc_type_connection)
      {
        if (type == (xpc_type_t)&_xpc_type_error)
        {
          if (a2 == &_xpc_error_connection_invalid)
          {
            unint64_t v10 = (os_log_s *)qword_100131950;
            if (os_log_type_enabled((os_log_t)qword_100131950, OS_LOG_TYPE_DEFAULT))
            {
              unint64_t v11 = (void *)(v3 + 32);
              *(_DWORD *)xpc_object_t object = 136446466;
              *(void *)&object[4] = v11;
              __int16 v17 = 2080;
              string = xpc_dictionary_get_string(&_xpc_error_connection_invalid, _xpc_error_key_description);
              _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "[%{public}s XPC Server] recieved connection invalidated: %s",  object,  0x16u);
            }

            dispatch_group_leave(*(dispatch_group_t *)(v3 + 64));
          }

          else
          {
            xpc_object_t v9 = (os_log_s *)qword_100131950;
            if (a2 == &_xpc_error_connection_interrupted)
            {
              if (os_log_type_enabled((os_log_t)qword_100131950, OS_LOG_TYPE_DEFAULT))
              {
                unint64_t v12 = (void *)(v3 + 32);
                *(_DWORD *)xpc_object_t object = 136446466;
                *(void *)&object[4] = v12;
                __int16 v17 = 2080;
                string = xpc_dictionary_get_string(&_xpc_error_connection_interrupted, _xpc_error_key_description);
                _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "[%{public}s XPC Server] recieved connection interrupted: %s",  object,  0x16u);
              }
            }

            else if (os_log_type_enabled((os_log_t)qword_100131950, OS_LOG_TYPE_ERROR))
            {
              xpc_dictionary_get_string(a2, _xpc_error_key_description);
              sub_1000DD27C();
            }
          }
        }

        else if (os_log_type_enabled((os_log_t)qword_100131950, OS_LOG_TYPE_ERROR))
        {
          sub_1000DD2B0();
        }

        goto LABEL_29;
      }

      if (a2)
      {
        xpc_retain(a2);
        *(void *)xpc_object_t object = a2;
      }

      else
      {
        a2 = xpc_null_create();
        *(void *)xpc_object_t object = a2;
        if (!a2) {
          goto LABEL_16;
        }
      }

      if (xpc_get_type(a2) == (xpc_type_t)&_xpc_type_connection)
      {
        xpc_retain(a2);
LABEL_18:
        sub_100074EA8(v3, (xpc_object_t *)object);
        xpc_release(*(xpc_object_t *)object);
        *(void *)xpc_object_t object = 0LL;
        xpc_release(a2);
        uint64_t v7 = v15;
        if (!v15) {
          return;
        }
        goto LABEL_29;
      }

void sub_100075D6C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
}

void sub_100075DD4(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t v2 = *v1;
  if (xpc_get_type(*(xpc_object_t *)(*v1 + 56)) == (xpc_type_t)&_xpc_type_connection) {
    xpc_connection_cancel(*(xpc_connection_t *)(v2 + 56));
  }
}

void sub_100075E1C(uint64_t **a1)
{
  uint64_t v2 = *a1;
  sub_100074A90(**a1);
  operator delete(v2);
  sub_100007004((uint64_t)(a1 + 1));
  operator delete(a1);
}

void sub_100075E60(_Unwind_Exception *a1)
{
}

void sub_100075E84(uint64_t **a1)
{
  uint64_t v2 = *a1;
  sub_100074C84(**a1);
  operator delete(v2);
  sub_100007004((uint64_t)(a1 + 1));
  operator delete(a1);
}

void sub_100075EC8(_Unwind_Exception *a1)
{
}

xpc_object_t *sub_100075EEC(xpc_object_t *a1, xpc_object_t *a2)
{
  xpc_object_t v4 = xpc_null_create();
  xpc_object_t v6 = *a2;
  *a2 = v4;
  sub_100075F74(a1, &v6);
  sub_1000743C0((xpc_connection_t *)&v6);
  return a1;
}

void sub_100075F68(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

void sub_100075F74(xpc_object_t *a1, xpc_object_t *a2)
{
  xpc_object_t v4 = *a1;
  *a1 = xpc_null_create();
  xpc_object_t v5 = *a2;
  *a2 = xpc_null_create();
  xpc_object_t v6 = *a1;
  *a1 = v5;
  xpc_release(v6);
  xpc_object_t v7 = xpc_null_create();
  xpc_object_t v8 = *a2;
  *a2 = v4;
  xpc_release(v8);
  xpc_release(v7);
}

void *sub_100075FF4(void *a1, void *a2)
{
  xpc_object_t v4 = xpc_null_create();
  *a1 = v4;
  *a1 = *a2;
  *a2 = v4;
  return a1;
}

uint64_t sub_100076030(void *a1, xpc_object_t *a2)
{
  uint64_t v3 = (uint64_t)(a1[1] - *a1) >> 3;
  unint64_t v4 = v3 + 1;
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 2 > v4) {
    unint64_t v4 = v6 >> 2;
  }
  else {
    unint64_t v7 = v4;
  }
  unint64_t v15 = a1 + 2;
  if (v7) {
    xpc_object_t v8 = (char *)sub_10001C3B0((uint64_t)(a1 + 2), v7);
  }
  else {
    xpc_object_t v8 = 0LL;
  }
  unint64_t v11 = v8;
  unint64_t v12 = &v8[8 * v3];
  unint64_t v14 = &v8[8 * v7];
  sub_100076150((uint64_t)(a1 + 2), v12, a2);
  unint64_t v13 = v12 + 8;
  sub_1000761A0(a1, &v11);
  uint64_t v9 = a1[1];
  sub_100076224((uint64_t)&v11);
  return v9;
}

void sub_10007613C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100076150(uint64_t a1, void *a2, xpc_object_t *a3)
{
  xpc_object_t v4 = *a3;
  if (*a3) {
    xpc_retain(*a3);
  }
  else {
    xpc_object_t v4 = xpc_null_create();
  }
  *a2 = v4;
  xpc_object_t v5 = xpc_null_create();
  xpc_release(v5);
}

void *sub_1000761A0(void *a1, void *a2)
{
  xpc_object_t v5 = (void *)*a1;
  xpc_object_t v4 = (void *)a1[1];
  double result = (void *)a2[1];
  while (v4 != v5)
    double result = sub_100075FF4(result - 1, --v4);
  a2[1] = result;
  unint64_t v7 = (void *)*a1;
  *a1 = result;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100076224(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    sub_1000743C0((xpc_connection_t *)(i - 8));
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100076270(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, os_log_s *a4@<X8>)
{
}

void sub_100076280(uint64_t a1@<X8>)
{
  *(void *)(v1 - sub_100007004((uint64_t)v1 + 8) = a1;
}

  ;
}

uint64_t *sub_10007629C@<X0>( void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, void *a5@<X4>, void *a6@<X5>, void *a7@<X6>, void *a8@<X7>, uint64_t *a9@<X8>, void *a10, void *a11)
{
  uint64_t v20 = operator new(0x118uLL);
  sub_10007634C((uint64_t)v20, a1, a2, a3, a4, a5, a6, a7, a8, a10, a11);
  return sub_10007E280(a9, (uint64_t)v20);
}

uint64_t sub_10007634C( uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11)
{
  dispatch_queue_t v19 = dispatch_queue_create("analyticsd.ClientManagerQueue", 0LL);
  *(void *)(a1 + sub_100007004((uint64_t)v1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = v19;
  if (v19)
  {
    uint64_t v20 = v19;
    dispatch_retain(v19);
    dispatch_release(v20);
  }

  *(void *)a1 = off_10012A3B0;
  *(void *)(a1 + 32) = off_10012A408;
  *(void *)(a1 + 40) = off_10012A448;
  uint64_t v21 = a2[1];
  *(void *)(a1 + 4sub_100007004((uint64_t)v1 + 8) = *a2;
  *(void *)(a1 + 56) = v21;
  if (v21)
  {
    BOOL v22 = (unint64_t *)(v21 + 8);
    do
      unint64_t v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }

  uint64_t v24 = a3[1];
  *(void *)(a1 + 64) = *a3;
  *(void *)(a1 + 72) = v24;
  if (v24)
  {
    unint64_t v25 = (unint64_t *)(v24 + 8);
    do
      unint64_t v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }

  uint64_t v27 = a4[1];
  *(void *)(a1 + 80) = *a4;
  *(void *)(a1 + 8sub_100007004((uint64_t)v1 + 8) = v27;
  if (v27)
  {
    unint64_t v28 = (unint64_t *)(v27 + 8);
    do
      unint64_t v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }

  uint64_t v30 = a5[1];
  *(void *)(a1 + 96) = *a5;
  *(void *)(a1 + 104) = v30;
  if (v30)
  {
    v31 = (unint64_t *)(v30 + 8);
    do
      unint64_t v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }

  uint64_t v33 = a6[1];
  *(void *)(a1 + 112) = *a6;
  *(void *)(a1 + 120) = v33;
  if (v33)
  {
    unsigned __int8 v34 = (unint64_t *)(v33 + 8);
    do
      unint64_t v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }

  uint64_t v36 = a7[1];
  *(void *)(a1 + 12sub_100007004((uint64_t)v1 + 8) = *a7;
  *(void *)(a1 + 136) = v36;
  if (v36)
  {
    size_t v37 = (unint64_t *)(v36 + 8);
    do
      unint64_t v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }

  uint64_t v39 = a8[1];
  *(void *)(a1 + 144) = *a8;
  *(void *)(a1 + 152) = v39;
  if (v39)
  {
    v40 = (unint64_t *)(v39 + 8);
    do
      unint64_t v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }

  uint64_t v42 = a9[1];
  *(void *)(a1 + 160) = *a9;
  *(void *)(a1 + 16sub_100007004((uint64_t)v1 + 8) = v42;
  if (v42)
  {
    uint64_t v43 = (unint64_t *)(v42 + 8);
    do
      unint64_t v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
  }

  uint64_t v45 = a10[1];
  *(void *)(a1 + 176) = *a10;
  *(void *)(a1 + 184) = v45;
  if (v45)
  {
    unint64_t v46 = (unint64_t *)(v45 + 8);
    do
      unint64_t v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }

  uint64_t v48 = a11[1];
  *(void *)(a1 + 192) = *a11;
  *(void *)(a1 + 200) = v48;
  if (v48)
  {
    v49 = (unint64_t *)(v48 + 8);
    do
      unint64_t v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
  }

  *(_OWORD *)(a1 + 20sub_100007004((uint64_t)v1 + 8) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_DWORD *)(a1 + 240) = 1065353216;
  *(_OWORD *)(a1 + 24sub_100007004((uint64_t)v1 + 8) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  return a1;
}

void sub_100076554(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1 + 8;
  v5[0] = a3;
  v5[1] = a1;
  v5[2] = a2;
  xpc_object_t v4 = *(dispatch_queue_s **)(a1 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_10007E390;
  block[3] = &unk_10012A588;
  block[4] = v3;
  block[5] = v5;
  dispatch_sync(v4, block);
}

void sub_1000765E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 8;
  v4[0] = a2;
  v4[1] = a1;
  uint64_t v3 = *(dispatch_queue_s **)(a1 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_10007F898;
  block[3] = &unk_10012A5A8;
  block[4] = v2;
  block[5] = v4;
  dispatch_sync(v3, block);
}

void sub_100076670(uint64_t a1, const void *a2, size_t a3)
{
  if (a3 < 0x1049)
  {
    memcpy(__b, a2, a3);
    unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
    sub_10000CF18(&v16, (void *)(a1 + 8));
    uint64_t v6 = operator new(0x1050uLL);
    void *v6 = a1;
    memcpy(v6 + 1, __b, 0x1048uLL);
    unint64_t v7 = *(dispatch_queue_s **)(a1 + 24);
    unint64_t v8 = v16;
    unint64_t v9 = v17;
    if (v17)
    {
      unint64_t v10 = (unint64_t *)(v17 + 8);
      do
        unint64_t v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }

    unint64_t v12 = operator new(0x18uLL);
    *unint64_t v12 = v6;
    v12[1] = v8;
    v12[2] = v9;
    dispatch_async_f(v7, v12, (dispatch_function_t)sub_10007FC40);
    unint64_t v13 = (std::__shared_weak_count *)v17;
    if (v17)
    {
      unint64_t v14 = (unint64_t *)(v17 + 8);
      do
        unint64_t v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1001318F8, OS_LOG_TYPE_ERROR))
  {
    sub_1000DD31C();
  }

void sub_1000767F8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

void sub_100076808(uint64_t a1, uint64_t a2, char a3)
{
  char v6 = a3;
  uint64_t v3 = a1 + 8;
  v5[0] = a1;
  v5[1] = a2;
  v5[2] = &v6;
  xpc_object_t v4 = *(dispatch_queue_s **)(a1 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_10007FF44;
  block[3] = &unk_10012A5C8;
  block[4] = v3;
  block[5] = v5;
  dispatch_sync(v4, block);
}

void sub_1000768A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 8;
  v4[0] = a1;
  v4[1] = a2;
  uint64_t v3 = *(dispatch_queue_s **)(a1 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_100080758;
  block[3] = &unk_10012A5E8;
  block[4] = v2;
  block[5] = v4;
  dispatch_sync(v3, block);
}

void sub_10007692C(uint64_t a1@<X0>, dispatch_group_t *a2@<X8>)
{
  dispatch_group_t v4 = dispatch_group_create();
  xpc_object_t v5 = v4;
  *a2 = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v5);
  }

  unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000CF18(&v16, (void *)(a1 + 8));
  char v6 = operator new(0x10uLL);
  void *v6 = a1;
  v6[1] = v5;
  unint64_t v7 = *(dispatch_queue_s **)(a1 + 24);
  unint64_t v8 = v16;
  unint64_t v9 = v17;
  if (v17)
  {
    unint64_t v10 = (unint64_t *)(v17 + 8);
    do
      unint64_t v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }

  unint64_t v12 = operator new(0x18uLL);
  *unint64_t v12 = v6;
  v12[1] = v8;
  v12[2] = v9;
  dispatch_async_f(v7, v12, (dispatch_function_t)sub_100080924);
  unint64_t v13 = (std::__shared_weak_count *)v17;
  if (v17)
  {
    unint64_t v14 = (unint64_t *)(v17 + 8);
    do
      unint64_t v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

void sub_100076A4C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

void sub_100076A5C(uint64_t a1@<X0>, dispatch_group_t *a2@<X8>)
{
}

void sub_100076A64(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, dispatch_group_s **a4@<X8>)
{
  unint64_t v8 = dispatch_group_create();
  *a4 = v8;
  *(void *)&__int128 v19 = a1;
  *((void *)&v19 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = *a2;
  sub_10000C3E4((uint64_t)v20, a3);
  dispatch_group_t group = v8;
  if (v8)
  {
    dispatch_retain(v8);
    dispatch_group_enter(v8);
  }

  unint64_t v23 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000CF18(&v23, (void *)(a1 + 8));
  unint64_t v9 = operator new(0x28uLL);
  *(_OWORD *)unint64_t v9 = v19;
  sub_10000C3E4((uint64_t)(v9 + 2), (uint64_t)v20);
  unint64_t v10 = v23;
  v9[4] = group;
  dispatch_group_t group = 0LL;
  unint64_t v11 = *(dispatch_queue_s **)(a1 + 24);
  unint64_t v12 = v24;
  if (v24)
  {
    unint64_t v13 = (unint64_t *)(v24 + 8);
    do
      unint64_t v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }

  unint64_t v15 = operator new(0x18uLL);
  void *v15 = v9;
  v15[1] = v10;
  void v15[2] = v12;
  dispatch_async_f(v11, v15, (dispatch_function_t)sub_100080C70);
  unint64_t v16 = (std::__shared_weak_count *)v24;
  if (v24)
  {
    unint64_t v17 = (unint64_t *)(v24 + 8);
    do
      unint64_t v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }

  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }

  sub_1000041AC((uint64_t)v20);
  sub_10000425C(&v21, v20[0]);
}

void sub_100076BFC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1000045D0(exception_object);
}

void sub_100076C2C(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, dispatch_group_s **a4@<X8>)
{
}

void sub_100076C34(uint64_t a1, uint64_t a2, xpc_object_t *a3)
{
  __p[0] = a3;
  __p[1] = "event";
  sub_100077350((uint64_t)__p, &object);
  uint64_t v42 = 0LL;
  uint64_t v43 = 0LL;
  uint64_t v44 = 0LL;
  applesauce::xpc::dyn_cast_or_default(v41, &object, &v42);
  if (SHIBYTE(v44) < 0) {
    operator delete(v42);
  }
  xpc_release(object);
  xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAA00LL;
  *(void *)v40 = 0LL;
  sub_1000041AC((uint64_t)&object);
  sub_1000041AC((uint64_t)&object);
  uint64_t v42 = a3;
  uint64_t v43 = "json";
  sub_100077350((uint64_t)&v42, &v38);
  if (xpc_get_type(v38) != (xpc_type_t)&_xpc_type_null)
  {
    uint64_t v42 = 0LL;
    uint64_t v43 = 0LL;
    uint64_t v44 = 0LL;
    applesauce::xpc::dyn_cast_or_default(__p, &v38, &v42);
    if (SHIBYTE(v44) < 0) {
      operator delete(v42);
    }
    uint64_t v45 = 0LL;
    sub_100018788((uint64_t)__p, (uint64_t)&v42, 1, &v36);
    xpc_object_t v5 = v45;
    if (v45 == (void **)&v42)
    {
      uint64_t v6 = 4LL;
      xpc_object_t v5 = (void **)&v42;
    }

    else
    {
      if (!v45) {
        goto LABEL_14;
      }
      uint64_t v6 = 5LL;
    }

    (*((void (**)(void))*v5 + v6))();
LABEL_14:
    sub_1000041AC((uint64_t)&v36);
    char v11 = (char)object;
    LOBYTE(object) = v36;
    LOBYTE(v36) = v11;
    unint64_t v12 = *(uint64_t **)v40;
    *(void *)v40 = v37;
    size_t v37 = v12;
    sub_1000041AC((uint64_t)&object);
    sub_1000041AC((uint64_t)&v36);
    sub_10000425C(&v37, v36);
    if (v35 < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_16;
  }

  uint64_t v42 = a3;
  uint64_t v43 = "xpc";
  sub_100077350((uint64_t)&v42, __p);
  if (xpc_get_type(__p[0]) != (xpc_type_t)&_xpc_type_null)
  {
    sub_1000A4498(__p, &v32);
    sub_1000041AC((uint64_t)&v32);
    char v7 = (char)object;
    LOBYTE(object) = v32;
    LOBYTE(v32) = v7;
    unint64_t v8 = &v33;
    unint64_t v9 = *(uint64_t **)v40;
    *(void *)v40 = v33;
    uint64_t v33 = v9;
    sub_1000041AC((uint64_t)&object);
    sub_1000041AC((uint64_t)&v32);
    int v10 = v32;
LABEL_11:
    sub_10000425C(v8, v10);
    xpc_release(__p[0]);
LABEL_16:
    xpc_release(v38);
    if (object == 1)
    {
      if (!sub_1000731A4(*(uint64_t *)v40, "timestamp"))
      {
        uint64_t v42 = a3;
        uint64_t v43 = "timestamp";
        sub_100077350((uint64_t)&v42, __p);
        unint64_t v14 = (uint64_t *)applesauce::xpc::dyn_cast_or_default((applesauce::xpc *)__p, 0LL, v13);
        xpc_release(__p[0]);
        if (v14)
        {
          v28[0] = 6;
          unint64_t v29 = v14;
          sub_1000041AC((uint64_t)v28);
          sub_1000041AC((uint64_t)v28);
          unint64_t v15 = sub_100003F94((unsigned __int8 *)&object, "timestamp");
          sub_1000041AC((uint64_t)v28);
          unsigned __int8 v16 = *(_BYTE *)v15;
          *(_BYTE *)unint64_t v15 = v28[0];
          v28[0] = v16;
          unint64_t v17 = (uint64_t *)v15[1];
          v15[1] = (uint64_t)v29;
          unint64_t v29 = v17;
          sub_1000041AC((uint64_t)v15);
          sub_1000041AC((uint64_t)v28);
          sub_10000425C(&v29, v28[0]);
        }
      }

      uint64_t v42 = a3;
      uint64_t v43 = "priority";
      sub_100077350((uint64_t)&v42, __p);
      if (xpc_get_type(__p[0]) == (xpc_type_t)&_xpc_type_null) {
        char v19 = 0;
      }
      else {
        char v19 = applesauce::xpc::dyn_cast_or_default((applesauce::xpc *)__p, 0LL, v18);
      }
      xpc_release(__p[0]);
      uint64_t v42 = a3;
      uint64_t v43 = "format";
      sub_100077350((uint64_t)&v42, __p);
      if (xpc_get_type(__p[0]) == (xpc_type_t)&_xpc_type_null) {
        char v21 = 0;
      }
      else {
        char v21 = applesauce::xpc::dyn_cast_or_default((applesauce::xpc *)__p, 0LL, v20);
      }
      xpc_release(__p[0]);
      uint64_t v22 = *(void *)(a1 + 48);
      if (v22)
      {
        sub_1000724D8((__int128 *)v41, (uint64_t)&object, v21, v19, &v42);
        (*(void (**)(uint64_t, xpc_object_t **))(*(void *)v22 + 16LL))(v22, &v42);
        unint64_t v23 = (std::__shared_weak_count *)v43;
        if (v43)
        {
          unint64_t v24 = (unint64_t *)(v43 + 8);
          do
            unint64_t v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
      }

      else if (os_log_type_enabled((os_log_t)qword_1001318F8, OS_LOG_TYPE_ERROR))
      {
        sub_1000DD398();
      }
    }

    else if (os_log_type_enabled((os_log_t)qword_1001318F8, OS_LOG_TYPE_ERROR))
    {
      sub_1000DD3F8();
    }

    goto LABEL_40;
  }

  if (!xpc_dictionary_get_value(*a3, "xpc"))
  {
    sub_10000BA40((uint64_t)v30, 0LL, 0LL, 0, 1);
    sub_1000041AC((uint64_t)v30);
    unsigned __int8 v26 = object;
    LOBYTE(object) = v30[0];
    v30[0] = v26;
    unint64_t v8 = (uint64_t **)&v31;
    uint64_t v27 = *(void *)v40;
    *(void *)v40 = v31;
    uint64_t v31 = v27;
    sub_1000041AC((uint64_t)&object);
    sub_1000041AC((uint64_t)v30);
    int v10 = v30[0];
    goto LABEL_11;
  }

  if (os_log_type_enabled((os_log_t)qword_1001318F8, OS_LOG_TYPE_ERROR)) {
    sub_1000DD458();
  }
  xpc_release(__p[0]);
  xpc_release(v38);
LABEL_40:
  sub_1000041AC((uint64_t)&object);
  sub_10000425C((uint64_t **)v40, object);
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
}

void sub_1000771A0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, xpc_object_t object, uint64_t a16, int a17, __int16 a18, char a19, char a20, char a21, uint64_t a22, xpc_object_t a23, xpc_object_t a24, uint64_t a25, void *__p, uint64_t a27, int a28, __int16 a29, char a30, char a31)
{
  if (a2) {
    sub_1000045D0(exception_object);
  }
  _Unwind_Resume(exception_object);
}

xpc_object_t sub_100077350@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  xpc_object_t value = xpc_dictionary_get_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8));
  *a2 = value;
  if (value) {
    return xpc_retain(value);
  }
  xpc_object_t result = xpc_null_create();
  *a2 = result;
  return result;
}

uint64_t sub_100077394(uint64_t a1, xpc_connection_t *a2, xpc_object_t *a3, uint64_t *a4)
{
  if (xpc_get_type(*a2) == (xpc_type_t)&_xpc_type_connection)
  {
    else {
      unint64_t v8 = (uint64_t *)*a4;
    }
    xpc_object_t v20 = (xpc_object_t)xpc_connection_copy_entitlement_value(*a2, v8);
    if (!v20) {
      xpc_object_t v20 = xpc_null_create();
    }
    uint64_t v7 = applesauce::xpc::dyn_cast_or_default((applesauce::xpc *)&v20, 0LL, v9);
    if ((v7 & 1) != 0) {
      goto LABEL_21;
    }
    int v10 = (os_log_s *)qword_100131910;
    if (os_log_type_enabled((os_log_t)qword_100131910, OS_LOG_TYPE_ERROR))
    {
      pid_t pid = xpc_connection_get_pid(*a2);
      else {
        unsigned __int8 v16 = (uint64_t *)*a4;
      }
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&uint8_t buf[4] = pid;
      LOWORD(v22[0]) = 2082;
      *(void *)((char *)v22 + 2) = v16;
      _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "[ClientManager] ERROR: Client(%u) not entitled for entitlement: %{public}s",  buf,  0x12u);
    }

    xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    xpc_object_t reply = xpc_dictionary_create_reply(*a3);
    xpc_object_t v12 = reply;
    if (reply)
    {
      xpc_object_t object = reply;
    }

    else
    {
      xpc_object_t v12 = xpc_null_create();
      xpc_object_t object = v12;
      if (!v12) {
        goto LABEL_14;
      }
    }

    if (xpc_get_type(v12) == (xpc_type_t)&_xpc_type_dictionary)
    {
      xpc_retain(v12);
      goto LABEL_16;
    }

void sub_1000775C4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t a11, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1000045D0(exception_object);
}

xpc_object_t sub_100077630@<X0>(uint64_t a1@<X0>, xpc_object_t *a2@<X1>, xpc_object_t *a3@<X8>)
{
  *a3 = *a2;
  xpc_object_t result = xpc_null_create();
  *a2 = result;
  return result;
}

void sub_100077678(uint64_t a1, uint64_t a2, xpc_object_t *a3)
{
  xpc_object_t reply = xpc_dictionary_create_reply(*a3);
  if (reply)
  {
    xpc_object_t v6 = reply;
    xpc_object_t object = reply;
  }

  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t object = v6;
    if (!v6)
    {
LABEL_5:
      xpc_object_t object = xpc_null_create();
      goto LABEL_7;
    }
  }

  if (xpc_get_type(v6) != (xpc_type_t)&_xpc_type_dictionary) {
    goto LABEL_5;
  }
  xpc_retain(v6);
LABEL_7:
  xpc_release(v6);
  xpc_object_t v7 = object;
  if (xpc_get_type(object) != (xpc_type_t)&_xpc_type_dictionary)
  {
    if (os_log_type_enabled((os_log_t)qword_100131910, OS_LOG_TYPE_ERROR)) {
      sub_1000DD4B8();
    }
    goto LABEL_31;
  }

  __p[0] = 0LL;
  __p[1] = 0LL;
  uint64_t v21 = 0LL;
  unint64_t v23 = (uint64_t (**)())a3;
  unint64_t v24 = "aggPeriod";
  sub_100077350((uint64_t)&v23, v15);
  xpc_type_t type = xpc_get_type(v15[0]);
  if (type != (xpc_type_t)&_xpc_type_null)
  {
    unint64_t v23 = 0LL;
    unint64_t v24 = 0LL;
    uint64_t v25 = 0LL;
    applesauce::xpc::dyn_cast_or_default(&v18, v15, &v23);
    if (SHIBYTE(v25) < 0) {
      operator delete(v23);
    }
    if (SHIBYTE(v21) < 0) {
      operator delete(__p[0]);
    }
    *(_OWORD *)__p = v18;
    uint64_t v21 = v19;
  }

  xpc_release(v15[0]);
  *(void *)&__int128 v18 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v18 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  sub_10000BA40((uint64_t)&v18, 0LL, 0LL, 0, 2);
  uint64_t v9 = *(void *)(a1 + 96);
  unsigned int v10 = sub_10000D8AC(__p);
  unint64_t v23 = &off_10012A618;
  unint64_t v24 = (const char *)&v18;
  unsigned __int8 v26 = (void **)&v23;
  (*(void (**)(uint64_t, BOOL, unint64_t, uint64_t (***)()))(*(void *)v9 + 32LL))( v9,  type == (xpc_type_t)&_xpc_type_null,  v10 | (unint64_t)&_mh_execute_header,  &v23);
  char v11 = (uint64_t (***)())v26;
  if (v26 == (void **)&v23)
  {
    uint64_t v12 = 4LL;
    char v11 = &v23;
    goto LABEL_20;
  }

  if (v26)
  {
    uint64_t v12 = 5LL;
LABEL_20:
    (*v11)[v12]();
  }

  sub_100006200((uint64_t)&v18, -1, 0x20u, 0LL, 0, &v23);
  if (v25 >= 0) {
    xpc_object_t v13 = (const char *)&v23;
  }
  else {
    xpc_object_t v13 = (const char *)v23;
  }
  xpc_object_t v16 = xpc_string_create(v13);
  if (!v16) {
    xpc_object_t v16 = xpc_null_create();
  }
  v15[0] = &object;
  v15[1] = "log-dump";
  sub_100077630((uint64_t)v15, &v16, &v17);
  xpc_release(v17);
  xpc_object_t v17 = 0LL;
  xpc_release(v16);
  xpc_object_t v16 = 0LL;
  if (SHIBYTE(v25) < 0) {
    operator delete(v23);
  }
  remote_connection = xpc_dictionary_get_remote_connection(*a3);
  xpc_connection_send_message(remote_connection, object);
  sub_1000041AC((uint64_t)&v18);
  sub_10000425C((uint64_t **)&v18 + 1, v18);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p[0]);
  }
  xpc_object_t v7 = object;
LABEL_31:
  xpc_release(v7);
}

void sub_10007796C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22, uint64_t a23, xpc_object_t a24)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1000045D0(exception_object);
}

void sub_100077A54(uint64_t a1, uint64_t a2, xpc_object_t *a3)
{
  xpc_object_t reply = xpc_dictionary_create_reply(*a3);
  if (reply)
  {
    xpc_object_t v6 = reply;
    xpc_object_t v52 = reply;
  }

  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t v52 = v6;
    if (!v6)
    {
LABEL_5:
      xpc_object_t v52 = xpc_null_create();
      goto LABEL_7;
    }
  }

  if (xpc_get_type(v6) != (xpc_type_t)&_xpc_type_dictionary) {
    goto LABEL_5;
  }
  xpc_retain(v6);
LABEL_7:
  xpc_release(v6);
  xpc_object_t v7 = v52;
  if (xpc_get_type(v52) != (xpc_type_t)&_xpc_type_dictionary)
  {
    if (os_log_type_enabled((os_log_t)qword_100131910, OS_LOG_TYPE_ERROR)) {
      sub_1000DD510();
    }
    goto LABEL_27;
  }

  (*(void (**)(void))(**(void **)(a1 + 144) + 56LL))(*(void *)(a1 + 144));
  memset(v51, 170, 24);
  uint64_t v8 = sub_10000BA40((uint64_t)&v53, 0LL, 0LL, 0, 2);
  sub_100057DA0(v8, v51);
  sub_1000041AC((uint64_t)&v53);
  sub_10000425C((uint64_t **)&v53.__r_.__value_.__l.__size_, v53.__r_.__value_.__s.__data_[0]);
  unint64_t v50 = 0LL;
  uint64_t v48 = "%Y-%m-%dT%TZ";
  v49 = 0LL;
  uint64_t v9 = *(void *)(a1 + 192);
  unsigned int v10 = (std::stringbuf::string_type *)operator new(0x28uLL);
  v10->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_10012A698;
  v10->__r_.__value_.__l.__size_ = (std::string::size_type)&v50;
  v10->__r_.__value_.__l.__cap_ = (std::string::size_type)&v49;
  v10[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v51;
  v10[1].__r_.__value_.__l.__size_ = (std::string::size_type)&v48;
  v54 = v10;
  (*(void (**)(uint64_t, std::stringbuf::string_type *))(*(void *)v9 + 96LL))(v9, &v53);
  char v11 = v54;
  if (v54 == &v53)
  {
    uint64_t v12 = 4LL;
    char v11 = &v53;
    goto LABEL_14;
  }

  if (v54)
  {
    uint64_t v12 = 5LL;
LABEL_14:
    (*(void (**)(void))(v11->__r_.__value_.__r.__words[0] + 8 * v12))();
  }

  unint64_t v46 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v47 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10000BA40((uint64_t)&v46, 0LL, 0LL, 0, 1);
  v44[0] = 6;
  uint64_t v45 = v50;
  sub_1000041AC((uint64_t)v44);
  sub_1000041AC((uint64_t)v44);
  xpc_object_t v13 = sub_100003F94((unsigned __int8 *)&v46, "totalEvents");
  sub_1000041AC((uint64_t)v44);
  unsigned __int8 v14 = *(_BYTE *)v13;
  *(_BYTE *)xpc_object_t v13 = v44[0];
  v44[0] = v14;
  unint64_t v15 = (uint64_t *)v13[1];
  v13[1] = (uint64_t)v45;
  uint64_t v45 = v15;
  sub_1000041AC((uint64_t)v13);
  sub_1000041AC((uint64_t)v44);
  sub_10000425C(&v45, v44[0]);
  v42[0] = 6;
  uint64_t v43 = v49;
  sub_1000041AC((uint64_t)v42);
  sub_1000041AC((uint64_t)v42);
  xpc_object_t v16 = sub_100003F94((unsigned __int8 *)&v46, "totalBudgetUsed");
  sub_1000041AC((uint64_t)v42);
  unsigned __int8 v17 = *(_BYTE *)v16;
  *(_BYTE *)xpc_object_t v16 = v42[0];
  v42[0] = v17;
  __int128 v18 = (uint64_t *)v16[1];
  v16[1] = (uint64_t)v43;
  uint64_t v43 = v18;
  sub_1000041AC((uint64_t)v16);
  sub_1000041AC((uint64_t)v42);
  sub_10000425C(&v43, v42[0]);
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v19 = sub_100010904(*(void *)(a1 + 80));
  sub_10003DB6C(v19, (uint64_t)v48, &v53);
  sub_100008E5C((uint64_t)v40, (uint64_t)&v53);
  xpc_object_t v20 = sub_100003F94((unsigned __int8 *)&v46, "startTime");
  sub_1000041AC((uint64_t)v40);
  char v21 = *(_BYTE *)v20;
  *(_BYTE *)xpc_object_t v20 = v40[0];
  v40[0] = v21;
  uint64_t v22 = (uint64_t *)v20[1];
  v20[1] = (uint64_t)v41;
  unint64_t v41 = v22;
  sub_1000041AC((uint64_t)v20);
  sub_1000041AC((uint64_t)v40);
  sub_10000425C(&v41, v40[0]);
  v23.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  sub_10003DB6C(v23.__d_.__rep_, (uint64_t)v48, &v53);
  sub_100008E5C((uint64_t)v38, (uint64_t)&v53);
  unint64_t v24 = sub_100003F94((unsigned __int8 *)&v46, "currentTime");
  sub_1000041AC((uint64_t)v38);
  char v25 = *(_BYTE *)v24;
  *(_BYTE *)unint64_t v24 = v38[0];
  v38[0] = v25;
  unsigned __int8 v26 = (uint64_t *)v24[1];
  v24[1] = (uint64_t)v39;
  uint64_t v39 = v26;
  sub_1000041AC((uint64_t)v24);
  sub_1000041AC((uint64_t)v38);
  sub_10000425C(&v39, v38[0]);
  v36[0] = 2;
  uint64_t v27 = (uint64_t *)operator new(0x18uLL);
  *(_OWORD *)uint64_t v27 = v51[0];
  v27[2] = *(void *)&v51[1];
  memset(v51, 0, 24);
  size_t v37 = v27;
  sub_1000041AC((uint64_t)v36);
  sub_1000041AC((uint64_t)v36);
  unint64_t v28 = sub_100003F94((unsigned __int8 *)&v46, "counts");
  sub_1000041AC((uint64_t)v36);
  unsigned __int8 v29 = *(_BYTE *)v28;
  *(_BYTE *)unint64_t v28 = v36[0];
  v36[0] = v29;
  uint64_t v30 = (uint64_t *)v28[1];
  v28[1] = (uint64_t)v37;
  size_t v37 = v30;
  sub_1000041AC((uint64_t)v28);
  sub_1000041AC((uint64_t)v36);
  sub_10000425C(&v37, v36[0]);
  sub_100006200((uint64_t)&v46, -1, 0x20u, 0LL, 0, &v53);
  if ((v53.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v31 = &v53;
  }
  else {
    uint64_t v31 = (std::stringbuf::string_type *)v53.__r_.__value_.__r.__words[0];
  }
  xpc_object_t v34 = xpc_string_create((const char *)v31);
  if (!v34) {
    xpc_object_t v34 = xpc_null_create();
  }
  v33[0] = &v52;
  v33[1] = "log-transform-counts";
  sub_100077630((uint64_t)v33, &v34, &object);
  xpc_release(object);
  xpc_object_t object = 0LL;
  xpc_release(v34);
  xpc_object_t v34 = 0LL;
  remote_connection = xpc_dictionary_get_remote_connection(*a3);
  xpc_connection_send_message(remote_connection, v52);
  sub_1000041AC((uint64_t)&v46);
  sub_10000425C(&v47, v46);
  v53.__r_.__value_.__r.__words[0] = (std::string::size_type)v51;
  sub_100004D64((void ***)&v53);
  xpc_object_t v7 = v52;
LABEL_27:
  xpc_release(v7);
}

void sub_100077FD4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20, uint64_t a21, char a22, uint64_t a23, char a24)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1000045D0(exception_object);
}

void sub_1000780D4(uint64_t a1, uint64_t a2, xpc_object_t *a3)
{
  xpc_object_t reply = xpc_dictionary_create_reply(*a3);
  if (reply)
  {
    xpc_object_t v6 = reply;
    xpc_object_t object = reply;
  }

  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t object = v6;
    if (!v6)
    {
LABEL_5:
      xpc_object_t object = xpc_null_create();
      goto LABEL_7;
    }
  }

  if (xpc_get_type(v6) != (xpc_type_t)&_xpc_type_dictionary) {
    goto LABEL_5;
  }
  xpc_retain(v6);
LABEL_7:
  xpc_release(v6);
  xpc_object_t v7 = object;
  xpc_type_t type = xpc_get_type(object);
  uint64_t v9 = (os_log_s *)qword_100131910;
  if (type == (xpc_type_t)&_xpc_type_dictionary)
  {
    if (os_log_type_enabled((os_log_t)qword_100131910, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "[ClientManager] MANAGE: list configs for debug purpose",  buf,  2u);
    }

    unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
    xpc_object_t v16 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    sub_1000AB20C(*(void *)(a1 + 128), &v15);
    sub_100006200((uint64_t)&v15, -1, 0x20u, 0LL, 0, buf);
    if (v19 >= 0) {
      unsigned int v10 = buf;
    }
    else {
      unsigned int v10 = *(uint8_t **)buf;
    }
    xpc_object_t v13 = xpc_string_create((const char *)v10);
    if (!v13) {
      xpc_object_t v13 = xpc_null_create();
    }
    v12[0] = &object;
    v12[1] = "config-list";
    sub_100077630((uint64_t)v12, &v13, &v14);
    xpc_release(v14);
    xpc_object_t v14 = 0LL;
    xpc_release(v13);
    xpc_object_t v13 = 0LL;
    if (v19 < 0) {
      operator delete(*(void **)buf);
    }
    remote_connection = xpc_dictionary_get_remote_connection(*a3);
    xpc_connection_send_message(remote_connection, object);
    sub_1000041AC((uint64_t)&v15);
    sub_10000425C(&v16, v15);
    xpc_object_t v7 = object;
  }

  else if (os_log_type_enabled((os_log_t)qword_100131910, OS_LOG_TYPE_ERROR))
  {
    sub_1000DD568();
  }

  xpc_release(v7);
}

void sub_1000782E0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1000045D0(exception_object);
}

void sub_10007834C(uint64_t a1, uint64_t a2, xpc_object_t *a3)
{
  xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t reply = xpc_dictionary_create_reply(*a3);
  if (reply)
  {
    xpc_object_t v6 = reply;
    xpc_object_t object = reply;
  }

  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t object = v6;
    if (!v6)
    {
LABEL_5:
      xpc_object_t object = xpc_null_create();
      goto LABEL_7;
    }
  }

  if (xpc_get_type(v6) != (xpc_type_t)&_xpc_type_dictionary) {
    goto LABEL_5;
  }
  xpc_retain(v6);
LABEL_7:
  xpc_release(v6);
  xpc_type_t type = xpc_get_type(object);
  uint64_t v8 = (os_log_s *)qword_100131910;
  if (type == (xpc_type_t)&_xpc_type_dictionary)
  {
    if (os_log_type_enabled((os_log_t)qword_100131910, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "[ClientManager] MANAGE: get config-info for debug purpose",  buf,  2u);
    }

    unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
    unsigned __int8 v17 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    sub_1000AB2FC(*(void *)(a1 + 128), &v16);
    if ((_BYTE)v16)
    {
      sub_100006200((uint64_t)&v16, -1, 0x20u, 0LL, 0, buf);
      if (v21 >= 0) {
        uint64_t v9 = buf;
      }
      else {
        uint64_t v9 = *(uint8_t **)buf;
      }
      xpc_object_t v14 = xpc_string_create((const char *)v9);
      if (!v14) {
        xpc_object_t v14 = xpc_null_create();
      }
      v13[0] = &object;
      v13[1] = "config-info";
      sub_100077630((uint64_t)v13, &v14, &v15);
      xpc_release(v15);
      xpc_object_t v15 = 0LL;
      xpc_release(v14);
      xpc_object_t v14 = 0LL;
      if (v21 < 0) {
        operator delete(*(void **)buf);
      }
    }

    else
    {
      xpc_object_t v11 = xpc_string_create("No active config");
      if (!v11) {
        xpc_object_t v11 = xpc_null_create();
      }
      *(void *)buf = &object;
      xpc_object_t v20 = "error";
      sub_100077630((uint64_t)buf, &v11, &v12);
      xpc_release(v12);
      xpc_object_t v12 = 0LL;
      xpc_release(v11);
      xpc_object_t v11 = 0LL;
    }

    remote_connection = xpc_dictionary_get_remote_connection(*a3);
    xpc_connection_send_message(remote_connection, object);
    sub_1000041AC((uint64_t)&v16);
    sub_10000425C(&v17, v16);
  }

  else if (os_log_type_enabled((os_log_t)qword_100131910, OS_LOG_TYPE_ERROR))
  {
    sub_1000DD5C0();
  }

  xpc_release(object);
}

void sub_1000785B0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1000045D0(exception_object);
}

void sub_100078628(uint64_t a1, uint64_t a2, xpc_object_t *a3)
{
  xpc_object_t reply = xpc_dictionary_create_reply(*a3);
  if (reply)
  {
    xpc_object_t v5 = reply;
    xpc_object_t xdict = reply;
  }

  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t xdict = v5;
    if (!v5)
    {
LABEL_5:
      xpc_object_t xdict = xpc_null_create();
      goto LABEL_7;
    }
  }

  if (xpc_get_type(v5) != (xpc_type_t)&_xpc_type_dictionary) {
    goto LABEL_5;
  }
  xpc_retain(v5);
LABEL_7:
  xpc_release(v5);
  (*(void (**)(void))(**(void **)(a1 + 144) + 56LL))(*(void *)(a1 + 144));
  xpc_object_t v8 = xpc_BOOL_create(1);
  if (!v8) {
    xpc_object_t v8 = xpc_null_create();
  }
  v7[0] = &xdict;
  v7[1] = "commit";
  sub_100077630((uint64_t)v7, &v8, &object);
  xpc_release(object);
  xpc_object_t object = 0LL;
  xpc_release(v8);
  xpc_object_t v8 = 0LL;
  remote_connection = xpc_dictionary_get_remote_connection(xdict);
  xpc_connection_send_message(remote_connection, xdict);
  xpc_release(xdict);
}

void sub_10007874C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1000045D0(exception_object);
}

void sub_100078794(void *a1, uint64_t a2, xpc_object_t *a3)
{
  xpc_object_t reply = xpc_dictionary_create_reply(*a3);
  if ((reply || (xpc_object_t reply = xpc_null_create()) != 0LL) && xpc_get_type(reply) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_retain(reply);
    xpc_object_t v6 = reply;
  }

  else
  {
    xpc_object_t v6 = xpc_null_create();
  }

  xpc_release(reply);
  sub_100023834(a1[18]);
  sub_1000AB6C8(a1[16]);
  dispatch_group_t v7 = dispatch_group_create();
  xpc_object_t v8 = (dispatch_queue_s *)a1[3];
  dispatch_group_t v9 = dispatch_group_create();
  unsigned int v10 = v9;
  if (v7)
  {
    dispatch_retain(v7);
    dispatch_group_enter(v7);
    if (v10)
    {
      dispatch_retain(v10);
      dispatch_group_enter(v10);
    }

    xpc_object_t v11 = operator new(0x10uLL);
    *xpc_object_t v11 = v10;
    v11[1] = a1;
    uint64_t v31 = 0LL;
    dispatch_group_notify_f(v7, v8, v11, (dispatch_function_t)sub_100081738);
    sub_1000816EC(&v31);
    dispatch_group_leave(v7);
    dispatch_release(v7);
    dispatch_release(v7);
  }

  else
  {
    if (v9)
    {
      dispatch_retain(v9);
      dispatch_group_enter(v10);
    }

    xpc_object_t v12 = operator new(0x10uLL);
    *xpc_object_t v12 = v10;
    v12[1] = a1;
    uint64_t v31 = 0LL;
    dispatch_async_f(v8, v12, (dispatch_function_t)sub_1000817E8);
    sub_1000816EC(&v31);
  }

  xpc_object_t v13 = (dispatch_queue_s *)a1[3];
  dispatch_group_t v14 = dispatch_group_create();
  xpc_object_t v15 = v14;
  if (v10)
  {
    dispatch_retain(v10);
    dispatch_group_enter(v10);
    if (v15)
    {
      dispatch_retain(v15);
      dispatch_group_enter(v15);
    }

    unint64_t v16 = operator new(0x10uLL);
    void *v16 = v15;
    v16[1] = a1;
    uint64_t v31 = 0LL;
    dispatch_group_notify_f(v10, v13, v16, (dispatch_function_t)sub_100081898);
    sub_1000816EC(&v31);
    dispatch_group_leave(v10);
    dispatch_release(v10);
    dispatch_release(v10);
  }

  else
  {
    if (v14)
    {
      dispatch_retain(v14);
      dispatch_group_enter(v15);
    }

    unsigned __int8 v17 = operator new(0x10uLL);
    *unsigned __int8 v17 = v15;
    v17[1] = a1;
    uint64_t v31 = 0LL;
    dispatch_async_f(v13, v17, (dispatch_function_t)sub_100081948);
    sub_1000816EC(&v31);
  }

  __int128 v18 = (dispatch_queue_s *)a1[3];
  xpc_object_t v19 = *a3;
  if (*a3) {
    xpc_retain(*a3);
  }
  else {
    xpc_object_t v19 = xpc_null_create();
  }
  xpc_object_t v20 = xpc_null_create();
  dispatch_group_t v21 = dispatch_group_create();
  uint64_t v22 = v21;
  if (v15)
  {
    dispatch_retain(v15);
    dispatch_group_enter(v15);
    if (v22)
    {
      dispatch_retain(v22);
      dispatch_group_enter(v22);
    }

    xpc_object_t v23 = xpc_null_create();
    xpc_object_t v24 = xpc_null_create();
    char v25 = operator new(0x18uLL);
    void *v25 = v22;
    v25[1] = v19;
    xpc_object_t v26 = xpc_null_create();
    v25[2] = v6;
    xpc_object_t v27 = xpc_null_create();
    uint64_t v31 = 0LL;
    dispatch_group_notify_f(v15, v18, v25, (dispatch_function_t)sub_100081A64);
    sub_1000819F8((uint64_t *)&v31);
    xpc_release(v27);
    xpc_release(v26);
    dispatch_group_leave(v15);
    dispatch_release(v15);
    dispatch_release(v15);
  }

  else
  {
    if (v21)
    {
      dispatch_retain(v21);
      dispatch_group_enter(v22);
    }

    xpc_object_t v23 = xpc_null_create();
    xpc_object_t v24 = xpc_null_create();
    unint64_t v28 = operator new(0x18uLL);
    *unint64_t v28 = v22;
    v28[1] = v19;
    xpc_object_t v29 = xpc_null_create();
    v28[2] = v6;
    xpc_object_t v30 = xpc_null_create();
    uint64_t v31 = 0LL;
    dispatch_async_f(v18, v28, (dispatch_function_t)sub_100081B68);
    sub_100081AFC((uint64_t *)&v31);
    xpc_release(v30);
    xpc_release(v29);
  }

  xpc_release(v24);
  xpc_release(v23);
  if (v22) {
    dispatch_release(v22);
  }
  xpc_release(v20);
}

void sub_100078B6C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1000045D0(exception_object);
}

void sub_100078BFC(void *a1, uint64_t a2, xpc_object_t *a3)
{
  xpc_object_t reply = xpc_dictionary_create_reply(*a3);
  if ((reply || (xpc_object_t reply = xpc_null_create()) != 0LL) && xpc_get_type(reply) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_retain(reply);
    xpc_object_t v6 = reply;
  }

  else
  {
    xpc_object_t v6 = xpc_null_create();
  }

  xpc_release(reply);
  dispatch_object_t v28 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  uint64_t v7 = a1[20];
  sub_100005064(__p, "api");
  xpc_object_t v8 = *a3;
  xpc_object_t object = v8;
  if (v8) {
    xpc_retain(v8);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  sub_1000A4498(&object, &v24);
  (*(void (**)(dispatch_object_t *__return_ptr, uint64_t, void **, uint64_t *))(*(void *)v7 + 16LL))( &v28,  v7,  __p,  &v24);
  sub_1000041AC((uint64_t)&v24);
  sub_10000425C(&v25, v24);
  xpc_release(object);
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  dispatch_group_t v9 = (dispatch_queue_s *)a1[3];
  xpc_object_t v10 = *a3;
  if (*a3) {
    xpc_retain(*a3);
  }
  else {
    xpc_object_t v10 = xpc_null_create();
  }
  xpc_object_t v11 = xpc_null_create();
  dispatch_group_t v12 = dispatch_group_create();
  xpc_object_t v13 = v12;
  dispatch_group_t v14 = (dispatch_group_s *)v28;
  if (v28)
  {
    dispatch_retain(v28);
    dispatch_group_enter(v14);
    if (v13)
    {
      dispatch_retain(v13);
      dispatch_group_enter(v13);
    }

    xpc_object_t v15 = xpc_null_create();
    xpc_object_t v16 = xpc_null_create();
    unsigned __int8 v17 = operator new(0x18uLL);
    *unsigned __int8 v17 = v13;
    v17[1] = v10;
    xpc_object_t v18 = xpc_null_create();
    v17[2] = v6;
    xpc_object_t v19 = xpc_null_create();
    __p[0] = 0LL;
    dispatch_group_notify_f(v14, v9, v17, (dispatch_function_t)sub_100081C6C);
    sub_100081C00((uint64_t *)__p);
    xpc_release(v19);
    xpc_release(v18);
    dispatch_group_leave(v14);
    dispatch_release(v14);
  }

  else
  {
    if (v12)
    {
      dispatch_retain(v12);
      dispatch_group_enter(v13);
    }

    xpc_object_t v15 = xpc_null_create();
    xpc_object_t v16 = xpc_null_create();
    xpc_object_t v20 = operator new(0x18uLL);
    void *v20 = v13;
    v20[1] = v10;
    xpc_object_t v21 = xpc_null_create();
    v20[2] = v6;
    xpc_object_t v22 = xpc_null_create();
    __p[0] = 0LL;
    dispatch_async_f(v9, v20, (dispatch_function_t)sub_100081E34);
    sub_100081DC8((uint64_t *)__p);
    xpc_release(v22);
    xpc_release(v21);
  }

  if (v13) {
    dispatch_release(v13);
  }
  xpc_release(v16);
  xpc_release(v15);
  if (v28) {
    dispatch_release(v28);
  }
  xpc_release(v11);
}

void sub_100078EE0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1000045D0(exception_object);
}

void sub_100078F9C(void *a1, uint64_t a2, xpc_object_t *a3)
{
  xpc_object_t reply = xpc_dictionary_create_reply(*a3);
  if ((reply || (xpc_object_t reply = xpc_null_create()) != 0LL) && xpc_get_type(reply) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_retain(reply);
    xpc_object_t v6 = reply;
  }

  else
  {
    xpc_object_t v6 = xpc_null_create();
  }

  xpc_release(reply);
  dispatch_object_t v28 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  uint64_t v7 = a1[20];
  sub_100005064(__p, "api");
  xpc_object_t v8 = *a3;
  xpc_object_t object = v8;
  if (v8) {
    xpc_retain(v8);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  sub_1000A4498(&object, &v24);
  (*(void (**)(dispatch_object_t *__return_ptr, uint64_t, void **, uint64_t *))(*(void *)v7 + 16LL))( &v28,  v7,  __p,  &v24);
  sub_1000041AC((uint64_t)&v24);
  sub_10000425C(&v25, v24);
  xpc_release(object);
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  dispatch_group_t v9 = (dispatch_queue_s *)a1[3];
  xpc_object_t v10 = *a3;
  if (*a3) {
    xpc_retain(*a3);
  }
  else {
    xpc_object_t v10 = xpc_null_create();
  }
  xpc_object_t v11 = xpc_null_create();
  dispatch_group_t v12 = dispatch_group_create();
  xpc_object_t v13 = v12;
  dispatch_group_t v14 = (dispatch_group_s *)v28;
  if (v28)
  {
    dispatch_retain(v28);
    dispatch_group_enter(v14);
    if (v13)
    {
      dispatch_retain(v13);
      dispatch_group_enter(v13);
    }

    xpc_object_t v15 = xpc_null_create();
    xpc_object_t v16 = xpc_null_create();
    unsigned __int8 v17 = operator new(0x18uLL);
    *unsigned __int8 v17 = v13;
    v17[1] = v10;
    xpc_object_t v18 = xpc_null_create();
    v17[2] = v6;
    xpc_object_t v19 = xpc_null_create();
    __p[0] = 0LL;
    dispatch_group_notify_f(v14, v9, v17, (dispatch_function_t)sub_100081F14);
    sub_100081EA8((uint64_t *)__p);
    xpc_release(v19);
    xpc_release(v18);
    dispatch_group_leave(v14);
    dispatch_release(v14);
  }

  else
  {
    if (v12)
    {
      dispatch_retain(v12);
      dispatch_group_enter(v13);
    }

    xpc_object_t v15 = xpc_null_create();
    xpc_object_t v16 = xpc_null_create();
    xpc_object_t v20 = operator new(0x18uLL);
    void *v20 = v13;
    v20[1] = v10;
    xpc_object_t v21 = xpc_null_create();
    v20[2] = v6;
    xpc_object_t v22 = xpc_null_create();
    __p[0] = 0LL;
    dispatch_async_f(v9, v20, (dispatch_function_t)sub_1000820DC);
    sub_100082070((uint64_t *)__p);
    xpc_release(v22);
    xpc_release(v21);
  }

  if (v13) {
    dispatch_release(v13);
  }
  xpc_release(v16);
  xpc_release(v15);
  if (v28) {
    dispatch_release(v28);
  }
  xpc_release(v11);
}

void sub_100079280( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1000045D0(exception_object);
}

void sub_10007933C(void *a1, xpc_object_t *a2, xpc_object_t *a3)
{
  xpc_object_t reply = xpc_dictionary_create_reply(*a3);
  if ((reply || (xpc_object_t reply = xpc_null_create()) != 0LL) && xpc_get_type(reply) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_retain(reply);
    xpc_object_t v6 = reply;
  }

  else
  {
    xpc_object_t v6 = xpc_null_create();
  }

  xpc_release(reply);
  if (xpc_get_type(v6) == (xpc_type_t)&_xpc_type_dictionary)
  {
    uint64_t v7 = sub_100080634(a1 + 26, a2);
    if (v7)
    {
      xpc_object_t v68 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      *(void *)buf = a3;
      *(void *)&uint8_t buf[8] = "events";
      sub_100079A68((uint64_t)buf, &v68);
      *(void *)buf = v68;
      if (v68) {
        xpc_retain(v68);
      }
      else {
        *(void *)buf = xpc_null_create();
      }
      sub_10007E108(&v66, (void **)buf, 0LL);
      xpc_release(*(xpc_object_t *)buf);
      sub_100079AF4(&v68, &v64);
      uint64_t v8 = v67;
      if (v67 != v65 || (dispatch_group_t v9 = v66, v66 != v64))
      {
        xpc_object_t v56 = v6;
        xpc_object_t v10 = (uint64_t *)(v7 + 3);
        while (1)
        {
          v63[0] = &v66;
          v63[1] = v8;
          memset(__p, 170, sizeof(__p));
          sub_100079BE4((uint64_t)v63, &object);
          memset(buf, 0, sizeof(buf));
          applesauce::xpc::dyn_cast_or_default(__p, &object, buf);
          xpc_release((xpc_object_t)object);
          dispatch_group_t v12 = v7[8];
          xpc_object_t v11 = v7[9];
          if (v12 == v11)
          {
LABEL_56:
            uint64_t v31 = (os_log_s *)qword_100131910;
            if (os_log_type_enabled((os_log_t)qword_100131910, OS_LOG_TYPE_DEBUG))
            {
              if (SHIBYTE(__p[2]) >= 0) {
                std::stringbuf::string_type v53 = __p;
              }
              else {
                std::stringbuf::string_type v53 = (void **)__p[0];
              }
              uint64_t v54 = *v10;
              *(_DWORD *)buf = 136315394;
              *(void *)&uint8_t buf[4] = v53;
              *(_WORD *)&_BYTE buf[12] = 2048;
              *(void *)&buf[14] = v54;
              _os_log_debug_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEBUG,  "[EventStreamingObserver] creating observer for event '%s' for client id %llu",  buf,  0x16u);
            }

            *(void *)&__int128 object = 0xAAAAAAAAAAAAAAAALL;
            *((void *)&object + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
            sub_10000CF18(buf, a1 + 1);
            uint64_t v32 = *(std::__shared_weak_count **)&buf[8];
            if (*(void *)&buf[8])
            {
              uint64_t v33 = *(void *)buf;
              xpc_object_t v34 = (unint64_t *)(*(void *)&buf[8] + 16LL);
              do
                unint64_t v35 = __ldxr(v34);
              while (__stxr(v35 + 1, v34));
              p_shared_owners = (unint64_t *)&v32->__shared_owners_;
              do
                unint64_t v37 = __ldaxr(p_shared_owners);
              while (__stlxr(v37 - 1, p_shared_owners));
              if (!v37)
              {
                ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
                std::__shared_weak_count::__release_weak(v32);
              }

              uint64_t v59 = 0LL;
              v60 = 0LL;
              xpc_object_t v38 = std::__shared_weak_count::lock(v32);
              uint64_t v39 = v38;
              if (v38)
              {
                uint64_t v40 = v33 + 40;
                if (!v33) {
                  uint64_t v40 = 0LL;
                }
                p_shared_weak_owners = (unint64_t *)&v38->__shared_weak_owners_;
                do
                  unint64_t v42 = __ldxr(p_shared_weak_owners);
                while (__stxr(v42 + 1, p_shared_weak_owners));
              }

              else
              {
                uint64_t v40 = 0LL;
              }

              uint64_t v43 = v60;
              uint64_t v59 = v40;
              v60 = v39;
              if (v43) {
                std::__shared_weak_count::__release_weak(v43);
              }
              std::__shared_weak_count::__release_weak(v32);
              if (v39)
              {
                uint64_t v44 = (unint64_t *)&v39->__shared_owners_;
                do
                  unint64_t v45 = __ldaxr(v44);
                while (__stlxr(v45 - 1, v44));
                if (!v45)
                {
                  ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                  std::__shared_weak_count::__release_weak(v39);
                }
              }
            }

            else
            {
              uint64_t v59 = 0LL;
              v60 = 0LL;
            }

            sub_10002D890(&v59, (__int128 *)__p, v7 + 3, &object);
            if (v60) {
              std::__shared_weak_count::__release_weak(v60);
            }
            uint64_t v46 = a1[8];
            __int128 v58 = object;
            if (*((void *)&object + 1))
            {
              unint64_t v47 = (unint64_t *)(*((void *)&object + 1) + 16LL);
              do
                unint64_t v48 = __ldxr(v47);
              while (__stxr(v48 + 1, v47));
            }

            (*(void (**)(uint64_t, __int128 *, void **, void))(*(void *)v46 + 16LL))(v46, &v58, __p, 0LL);
            if (*((void *)&v58 + 1)) {
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v58 + 1));
            }
            sub_100079C28((char **)v7 + 8, &object);
            v49 = (std::__shared_weak_count *)*((void *)&object + 1);
            if (*((void *)&object + 1))
            {
              unint64_t v50 = (unint64_t *)(*((void *)&object + 1) + 8LL);
              do
                unint64_t v51 = __ldaxr(v50);
              while (__stlxr(v51 - 1, v50));
              if (!v51)
              {
                ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                std::__shared_weak_count::__release_weak(v49);
              }
            }

            goto LABEL_91;
          }

          char v13 = 0;
          do
          {
            uint64_t v15 = *v12;
            dispatch_group_t v14 = (std::__shared_weak_count *)v12[1];
            *(void *)&__int128 object = *v12;
            *((void *)&object + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = v14;
            if (v14)
            {
              xpc_object_t v16 = (unint64_t *)&v14->__shared_owners_;
              do
                unint64_t v17 = __ldxr(v16);
              while (__stxr(v17 + 1, v16));
            }

            xpc_object_t v18 = (unsigned __int8 *)sub_10002DCAC(v15);
            uint64_t v19 = v18[23];
            if ((v19 & 0x80u) == 0LL) {
              xpc_object_t v20 = (void *)v18[23];
            }
            else {
              xpc_object_t v20 = (void *)*((void *)v18 + 1);
            }
            xpc_object_t v21 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0) {
              xpc_object_t v21 = __p[1];
            }
            if (v20 != v21) {
              goto LABEL_38;
            }
            if (SHIBYTE(__p[2]) >= 0) {
              xpc_object_t v22 = __p;
            }
            else {
              xpc_object_t v22 = (void **)__p[0];
            }
            if ((v19 & 0x80) != 0)
            {
            }

            else if (v18[23])
            {
              while (*v18 == *(unsigned __int8 *)v22)
              {
                ++v18;
                xpc_object_t v22 = (void **)((char *)v22 + 1);
                if (!--v19) {
                  goto LABEL_40;
                }
              }

LABEL_38:
              char v23 = 0;
              if (!v14) {
                goto LABEL_46;
              }
LABEL_42:
              char v25 = (unint64_t *)&v14->__shared_owners_;
              do
                unint64_t v26 = __ldaxr(v25);
              while (__stlxr(v26 - 1, v25));
              if (!v26)
              {
                ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
                std::__shared_weak_count::__release_weak(v14);
              }

              goto LABEL_46;
            }

LABEL_40:
            uint64_t v24 = (os_log_s *)qword_100131910;
            if (os_log_type_enabled((os_log_t)qword_100131910, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v28 = sub_10002DCAC(v15);
              else {
                uint64_t v29 = *(void *)v28;
              }
              uint64_t v30 = *v10;
              *(_DWORD *)buf = 136315394;
              *(void *)&uint8_t buf[4] = v29;
              *(_WORD *)&_BYTE buf[12] = 2048;
              *(void *)&buf[14] = v30;
              _os_log_debug_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEBUG,  "[EventStreamingObserver] skipping existing observer for event '%s' for client id %llu",  buf,  0x16u);
            }

            char v23 = 1;
            char v13 = 1;
            if (v14) {
              goto LABEL_42;
            }
LABEL_46:
            v12 += 2;
            if (v12 == v11) {
              char v27 = 1;
            }
            else {
              char v27 = v23;
            }
          }

          while ((v27 & 1) == 0);
          if ((v13 & 1) == 0) {
            goto LABEL_56;
          }
LABEL_91:
          if (SHIBYTE(__p[2]) < 0) {
            operator delete(__p[0]);
          }
          dispatch_group_t v9 = v66;
          uint64_t v8 = v67 + 1;
          uint64_t v67 = v8;
          if (v8 == v65 && v66 == v64)
          {
            xpc_object_t v6 = v56;
            break;
          }
        }
      }

      xpc_release(v9);
      xpc_release(v66);
      xpc_release(v68);
    }

    remote_connection = xpc_dictionary_get_remote_connection(*a3);
    xpc_connection_send_message(remote_connection, v6);
    goto LABEL_105;
  }

  if (os_log_type_enabled((os_log_t)qword_100131910, OS_LOG_TYPE_ERROR)) {
    sub_1000DD618();
  }
LABEL_105:
  xpc_release(v6);
}

void sub_100079950( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, std::__shared_weak_count *a20, xpc_object_t a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, uint64_t a30, xpc_object_t a31)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1000045D0(exception_object);
}

void sub_100079A68(uint64_t a1@<X0>, xpc_object_t *a2@<X8>)
{
  xpc_object_t value = xpc_dictionary_get_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8));
  if (value)
  {
    xpc_object_t v4 = value;
    xpc_retain(value);
    *a2 = v4;
  }

  else
  {
    xpc_object_t v4 = xpc_null_create();
    *a2 = v4;
    if (!v4) {
      goto LABEL_5;
    }
  }

  if (xpc_get_type(v4) == (xpc_type_t)&_xpc_type_array)
  {
    xpc_retain(v4);
    goto LABEL_7;
  }

void sub_100079AF4(xpc_object_t *a1@<X0>, void **a2@<X8>)
{
  xpc_object_t v4 = *a1;
  xpc_object_t object = v4;
  if (v4) {
    xpc_retain(v4);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  if (xpc_get_type(*a1) == (xpc_type_t)&_xpc_type_array) {
    count = (void *)xpc_array_get_count(*a1);
  }
  else {
    count = 0LL;
  }
  sub_10007E108(a2, &object, count);
  xpc_release(object);
}

void sub_100079BB4(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1000045D0(exception_object);
}

xpc_object_t sub_100079BE4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  xpc_object_t value = xpc_array_get_value(**(xpc_object_t **)a1, *(void *)(a1 + 8));
  *a2 = value;
  if (value) {
    return xpc_retain(value);
  }
  xpc_object_t result = xpc_null_create();
  *a2 = result;
  return result;
}

uint64_t sub_100079C28(char **a1, __int128 *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(char **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v12 = (v7 - *a1) >> 4;
    unint64_t v13 = v12 + 1;
    uint64_t v14 = v5 - (void)*a1;
    if (v14 >> 3 > v13) {
      unint64_t v13 = v14 >> 3;
    }
    else {
      unint64_t v15 = v13;
    }
    uint64_t v31 = result;
    xpc_object_t v16 = (char *)sub_1000047F4(result, v15);
    xpc_object_t v18 = &v16[16 * v12];
    __int128 v19 = *a2;
    *(_OWORD *)xpc_object_t v18 = *a2;
    if (*((void *)&v19 + 1))
    {
      xpc_object_t v20 = (unint64_t *)(*((void *)&v19 + 1) + 8LL);
      do
        unint64_t v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }

    char v23 = *a1;
    xpc_object_t v22 = a1[1];
    if (v22 == *a1)
    {
      int64x2_t v26 = vdupq_n_s64((unint64_t)v22);
      uint64_t v24 = &v16[16 * v12];
    }

    else
    {
      uint64_t v24 = &v16[16 * v12];
      do
      {
        __int128 v25 = *((_OWORD *)v22 - 1);
        v22 -= 16;
        *((_OWORD *)v24 - sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = v25;
        v24 -= 16;
        *(void *)xpc_object_t v22 = 0LL;
        *((void *)v22 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0LL;
      }

      while (v22 != v23);
      int64x2_t v26 = *(int64x2_t *)a1;
    }

    xpc_object_t v11 = v18 + 16;
    *a1 = v24;
    a1[1] = v18 + 16;
    int64x2_t v29 = v26;
    char v27 = a1[2];
    a1[2] = &v16[16 * v17];
    uint64_t v30 = v27;
    uint64_t v28 = v26.i64[0];
    uint64_t result = sub_10003AAA8((uint64_t)&v28);
  }

  else
  {
    *(void *)uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    *((void *)v7 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = v8;
    if (v8)
    {
      dispatch_group_t v9 = (unint64_t *)(v8 + 8);
      do
        unint64_t v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }

    xpc_object_t v11 = v7 + 16;
  }

  a1[1] = v11;
  return result;
}

void sub_100079D94(uint64_t a1, uint64_t a2, xpc_object_t *a3)
{
  xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t reply = xpc_dictionary_create_reply(*a3);
  if (reply)
  {
    xpc_object_t v5 = reply;
    xpc_object_t object = reply;
  }

  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t object = v5;
    if (!v5)
    {
LABEL_5:
      xpc_object_t object = xpc_null_create();
      goto LABEL_7;
    }
  }

  if (xpc_get_type(v5) != (xpc_type_t)&_xpc_type_dictionary) {
    goto LABEL_5;
  }
  xpc_retain(v5);
LABEL_7:
  xpc_release(v5);
  if (xpc_get_type(object) != (xpc_type_t)&_xpc_type_dictionary)
  {
    if (os_log_type_enabled((os_log_t)qword_100131910, OS_LOG_TYPE_ERROR)) {
      sub_1000DD778();
    }
    goto LABEL_43;
  }

  __s = (char *)0xAAAAAAAAAAAAAAAALL;
  __s = (char *)xpc_dictionary_get_string(*a3, "string-config");
  if (__s)
  {
    unint64_t v31 = 0xAAAAAAAAAAAAAA00LL;
    uint64_t v32 = 0LL;
    sub_1000041AC((uint64_t)&v31);
    sub_1000041AC((uint64_t)&v31);
    unint64_t v37 = 0LL;
    sub_100026984((const char **)&__s, (uint64_t)v36, 1, &v29);
    sub_1000041AC((uint64_t)&v29);
    char v6 = v31;
    LOBYTE(v3sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = v29;
    LOBYTE(v29) = v6;
    uint64_t v7 = v32;
    uint64_t v32 = v30;
    uint64_t v30 = v7;
    sub_1000041AC((uint64_t)&v31);
    sub_1000041AC((uint64_t)&v29);
    sub_10000425C(&v30, v29);
    uint64_t v8 = v37;
    if (v37 == v36)
    {
      uint64_t v9 = 4LL;
      uint64_t v8 = v36;
    }

    else
    {
      if (!v37) {
        goto LABEL_18;
      }
      uint64_t v9 = 5LL;
    }

    (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_18:
    if (v31 == 1)
    {
      sub_1000411FC(&buf);
      BOOL v10 = sub_1000868CC((char *)&buf, (uint64_t)&v31);
      BOOL v11 = v10;
      if ((char)buf.__r_.__value_.__s.__size_ < 0)
      {
        operator delete(buf.__r_.__value_.__l.__data_);
        if (v11) {
          goto LABEL_21;
        }
      }

      else if (v10)
      {
LABEL_21:
        xpc_object_t v27 = xpc_BOOL_create(1);
        if (!v27) {
          xpc_object_t v27 = xpc_null_create();
        }
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
        buf.__r_.__value_.__l.__size_ = (std::string::size_type)"set-tasking-old";
        sub_100077630((uint64_t)&buf, &v27, &v28);
        xpc_release(v28);
        xpc_object_t v28 = 0LL;
        xpc_release(v27);
        xpc_object_t v27 = 0LL;
        uint64_t v12 = qword_100131910;
        if (!os_log_type_enabled((os_log_t)qword_100131910, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_42;
        }
        size_t v13 = strlen(__s);
        LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v13;
        uint64_t v14 = "[ClientManager] set-dev tasking saved new dev config (%zd bytes)";
        unint64_t v15 = (os_log_s *)v12;
        uint32_t v16 = 12;
LABEL_31:
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, v14, (uint8_t *)&buf, v16);
LABEL_42:
        remote_connection = xpc_dictionary_get_remote_connection(*a3);
        xpc_connection_send_message(remote_connection, object);
        sub_1000041AC((uint64_t)&v31);
        sub_10000425C(&v32, v31);
        goto LABEL_43;
      }

      xpc_object_t v25 = xpc_string_create("failed to write dev config");
      if (!v25) {
        xpc_object_t v25 = xpc_null_create();
      }
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
      buf.__r_.__value_.__l.__size_ = (std::string::size_type)"error";
      sub_100077630((uint64_t)&buf, &v25, &v26);
      xpc_release(v26);
      xpc_object_t v26 = 0LL;
      xpc_release(v25);
      xpc_object_t v25 = 0LL;
      if (os_log_type_enabled((os_log_t)qword_100131910, OS_LOG_TYPE_ERROR)) {
        sub_1000DD6C8();
      }
      goto LABEL_42;
    }

    sub_1000411FC(&buf);
    BOOL v17 = sub_10008672C((const char *)&buf);
    BOOL v18 = v17;
    if ((char)buf.__r_.__value_.__s.__size_ < 0)
    {
      operator delete(buf.__r_.__value_.__l.__data_);
      if (v18) {
        goto LABEL_27;
      }
    }

    else if (v17)
    {
LABEL_27:
      xpc_object_t v23 = xpc_BOOL_create(1);
      if (!v23) {
        xpc_object_t v23 = xpc_null_create();
      }
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
      buf.__r_.__value_.__l.__size_ = (std::string::size_type)"set-tasking-old";
      sub_100077630((uint64_t)&buf, &v23, &v24);
      xpc_release(v24);
      xpc_object_t v24 = 0LL;
      xpc_release(v23);
      xpc_object_t v23 = 0LL;
      uint64_t v19 = qword_100131910;
      if (!os_log_type_enabled((os_log_t)qword_100131910, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_42;
      }
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      uint64_t v14 = "[ClientManager] set-dev tasking removed tasked config (if it existed)";
      unint64_t v15 = (os_log_s *)v19;
      uint32_t v16 = 2;
      goto LABEL_31;
    }

    xpc_object_t v21 = xpc_string_create("failed to remove dev config");
    if (!v21) {
      xpc_object_t v21 = xpc_null_create();
    }
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
    buf.__r_.__value_.__l.__size_ = (std::string::size_type)"error";
    sub_100077630((uint64_t)&buf, &v21, &v22);
    xpc_release(v22);
    xpc_object_t v22 = 0LL;
    xpc_release(v21);
    xpc_object_t v21 = 0LL;
    if (os_log_type_enabled((os_log_t)qword_100131910, OS_LOG_TYPE_ERROR)) {
      sub_1000DD720();
    }
    goto LABEL_42;
  }

  if (os_log_type_enabled((os_log_t)qword_100131910, OS_LOG_TYPE_ERROR)) {
    sub_1000DD670();
  }
LABEL_43:
  xpc_release(object);
}

void sub_10007A268( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1000045D0(exception_object);
}

void sub_10007A3DC(uint64_t a1, uint64_t a2, xpc_object_t *a3)
{
  xpc_object_t reply = xpc_dictionary_create_reply(*a3);
  if (reply)
  {
    xpc_object_t v6 = reply;
    xpc_object_t xdict = reply;
  }

  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t xdict = v6;
    if (!v6)
    {
LABEL_5:
      xpc_object_t xdict = xpc_null_create();
      goto LABEL_7;
    }
  }

  if (xpc_get_type(v6) != (xpc_type_t)&_xpc_type_dictionary) {
    goto LABEL_5;
  }
  xpc_retain(v6);
LABEL_7:
  xpc_release(v6);
  __p[0] = 0LL;
  __p[1] = 0LL;
  uint64_t v16 = 0LL;
  *(void *)&__int128 buf = a3;
  *((void *)&buf + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = "tasking-id";
  sub_100077350((uint64_t)&buf, &object);
  if (xpc_get_type(object) != (xpc_type_t)&_xpc_type_null)
  {
    __int128 buf = 0uLL;
    uint64_t v19 = 0LL;
    applesauce::xpc::dyn_cast_or_default(&v12, &object, &buf);
    if (SHIBYTE(v19) < 0) {
      operator delete((void *)buf);
    }
    *(_OWORD *)__p = v12;
    uint64_t v16 = v13;
  }

  xpc_release(object);
  uint64_t v7 = (os_log_s *)qword_100131928;
  if (os_log_type_enabled((os_log_t)qword_100131928, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = __p;
    if (v16 < 0) {
      uint64_t v8 = (void **)__p[0];
    }
    LODWORD(buf) = 136446210;
    *(void *)((char *)&buf + 4) = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[ClientManager] === Tasking notification recieved with taskingId: %{public}s! Locating and storing (but not activa ting) new configurations",  (uint8_t *)&buf,  0xCu);
  }

  sub_1000AB6C8(*(void *)(a1 + 128));
  if (xpc_get_type(xdict) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_object_t v10 = xpc_BOOL_create(1);
    if (!v10) {
      xpc_object_t v10 = xpc_null_create();
    }
    *(void *)&__int128 buf = &xdict;
    *((void *)&buf + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = "tasking-notify";
    sub_100077630((uint64_t)&buf, &v10, &v11);
    xpc_release(v11);
    xpc_object_t v11 = 0LL;
    xpc_release(v10);
    xpc_object_t v10 = 0LL;
    remote_connection = xpc_dictionary_get_remote_connection(xdict);
    xpc_connection_send_message(remote_connection, xdict);
  }

  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  xpc_release(xdict);
}

void sub_10007A604( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t object, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, xpc_object_t a21)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1000045D0(exception_object);
}

void sub_10007A694(uint64_t a1, uint64_t a2, xpc_object_t *a3)
{
  xpc_object_t v23 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t reply = xpc_dictionary_create_reply(*a3);
  if (reply)
  {
    xpc_object_t v5 = reply;
    xpc_object_t v23 = reply;
  }

  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t v23 = v5;
    if (!v5)
    {
LABEL_5:
      xpc_object_t v23 = xpc_null_create();
      goto LABEL_7;
    }
  }

  if (xpc_get_type(v5) != (xpc_type_t)&_xpc_type_dictionary) {
    goto LABEL_5;
  }
  xpc_retain(v5);
LABEL_7:
  xpc_release(v5);
  if (xpc_get_type(v23) == (xpc_type_t)&_xpc_type_dictionary)
  {
    v22[0] = a3;
    v22[1] = "mmap-config";
    v21[0] = a3;
    v21[1] = "mmap-config-size";
    if (xpc_dictionary_get_value(*a3, "mmap-config"))
    {
      v20[0] = 0xAAAAAAAAAAAAAAAALL;
      v20[1] = 0xAAAAAAAAAAAAAAAALL;
      sub_100077350((uint64_t)v21, &v14);
      unint64_t v7 = applesauce::xpc::dyn_cast_or_default((applesauce::xpc *)&v14, 0LL, v6);
      sub_100077350((uint64_t)v22, &object);
      unint64_t v19 = v7;
      sub_10004D1D8((uint64_t)&object, v20);
      xpc_release(object);
      xpc_object_t object = 0LL;
      xpc_release(v14);
      xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
      sub_1000CF540(v20, &object);
      if (object)
      {
        if (sub_1000CFEAC((uint64_t)object))
        {
          xpc_object_t v16 = xpc_BOOL_create(1);
          if (!v16) {
            xpc_object_t v16 = xpc_null_create();
          }
          xpc_object_t v14 = &v23;
          unint64_t v15 = "set-tasking";
          sub_100077630((uint64_t)&v14, &v16, &v17);
          xpc_release(v17);
          xpc_object_t v17 = 0LL;
          xpc_release(v16);
          xpc_object_t v16 = 0LL;
        }

        else
        {
          xpc_object_t v12 = xpc_string_create("failed to write ndjson config");
          if (!v12) {
            xpc_object_t v12 = xpc_null_create();
          }
          xpc_object_t v14 = &v23;
          unint64_t v15 = "error";
          sub_100077630((uint64_t)&v14, &v12, &v13);
          xpc_release(v13);
          xpc_object_t v13 = 0LL;
          xpc_release(v12);
          xpc_object_t v12 = 0LL;
          if (os_log_type_enabled((os_log_t)qword_100131910, OS_LOG_TYPE_ERROR)) {
            sub_1000DD880();
          }
        }

        remote_connection = xpc_dictionary_get_remote_connection(*a3);
        xpc_connection_send_message(remote_connection, v23);
      }

      else if (os_log_type_enabled((os_log_t)qword_100131910, OS_LOG_TYPE_ERROR))
      {
        sub_1000DD828();
      }

      uint64_t v9 = (std::__shared_weak_count *)v19;
      if (v19)
      {
        xpc_object_t v10 = (unint64_t *)(v19 + 8);
        do
          unint64_t v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }

      sub_10004D0DC((uint64_t)v20);
    }

    else if (os_log_type_enabled((os_log_t)qword_100131910, OS_LOG_TYPE_ERROR))
    {
      sub_1000DD7D0();
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_100131910, OS_LOG_TYPE_ERROR))
  {
    sub_1000DD8D8();
  }

  xpc_release(v23);
}

void sub_10007A9A8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1000045D0(exception_object);
}

void sub_10007AA4C(uint64_t a1, uint64_t a2, xpc_object_t *a3)
{
  xpc_object_t reply = xpc_dictionary_create_reply(*a3);
  if ((reply || (xpc_object_t reply = xpc_null_create()) != 0LL) && xpc_get_type(reply) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_retain(reply);
    xpc_object_t v5 = reply;
  }

  else
  {
    xpc_object_t v5 = xpc_null_create();
  }

  xpc_release(reply);
  if (xpc_get_type(v5) == (xpc_type_t)&_xpc_type_dictionary)
  {
    char v6 = xpc_dictionary_get_BOOL(*a3, "should-clear-config-after-reboot");
    sub_100092A24(v6);
    remote_connection = xpc_dictionary_get_remote_connection(*a3);
    xpc_connection_send_message(remote_connection, v5);
  }

  else if (os_log_type_enabled((os_log_t)qword_100131910, OS_LOG_TYPE_ERROR))
  {
    sub_1000DD930();
  }

  xpc_release(v5);
}

void sub_10007AB3C(_Unwind_Exception *a1)
{
}

void sub_10007AB54(uint64_t a1, xpc_connection_t *a2, xpc_object_t *a3)
{
  xpc_object_t reply = xpc_dictionary_create_reply(*a3);
  if ((reply || (xpc_object_t reply = xpc_null_create()) != 0LL) && xpc_get_type(reply) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_retain(reply);
    xpc_object_t v7 = reply;
  }

  else
  {
    xpc_object_t v7 = xpc_null_create();
  }

  xpc_release(reply);
  if (xpc_get_type(v7) != (xpc_type_t)&_xpc_type_dictionary)
  {
    if (os_log_type_enabled((os_log_t)qword_100131910, OS_LOG_TYPE_ERROR)) {
      sub_1000DD988();
    }
    goto LABEL_71;
  }

  __p[0] = 0LL;
  __p[1] = 0LL;
  uint64_t v37 = 0LL;
  xpc_object_t v38 = a3;
  uint64_t v39 = "state-name";
  sub_100077350((uint64_t)&v38, &object);
  if (xpc_get_type(object) != (xpc_type_t)&_xpc_type_null)
  {
    xpc_object_t v38 = 0LL;
    uint64_t v39 = 0LL;
    uint64_t v40 = 0LL;
    applesauce::xpc::dyn_cast_or_default(&v34, &object, &v38);
    if (SHIBYTE(v40) < 0) {
      operator delete(v38);
    }
    *(_OWORD *)__p = v34;
    uint64_t v37 = v35;
  }

  xpc_release(object);
  __int128 v34 = 0xAAAAAAAAAAAAAA00LL;
  sub_1000041AC((uint64_t)&v34);
  sub_1000041AC((uint64_t)&v34);
  xpc_object_t v38 = a3;
  uint64_t v39 = "state";
  sub_100077350((uint64_t)&v38, &object);
  if (xpc_get_type(object) != (xpc_type_t)&_xpc_type_null)
  {
    sub_1000A4498(&object, &v32);
    sub_1000041AC((uint64_t)&v32);
    char v8 = v34;
    LOBYTE(v34) = v32;
    LOBYTE(v32) = v8;
    uint64_t v9 = (uint64_t *)*((void *)&v34 + 1);
    *((void *)&v34 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = v33;
    uint64_t v33 = v9;
    sub_1000041AC((uint64_t)&v34);
    sub_1000041AC((uint64_t)&v32);
    sub_10000425C(&v33, v32);
  }

  xpc_release(object);
  xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAA00LL;
  unint64_t v31 = 0LL;
  sub_1000041AC((uint64_t)&object);
  sub_1000041AC((uint64_t)&object);
  xpc_object_t v38 = a3;
  uint64_t v39 = "state-parameters";
  sub_100077350((uint64_t)&v38, &v29);
  if (xpc_get_type(v29) != (xpc_type_t)&_xpc_type_null)
  {
    sub_1000A4498(&v29, &v27);
    sub_1000041AC((uint64_t)&v27);
    char v10 = (char)object;
    LOBYTE(object) = v27;
    LOBYTE(v27) = v10;
    unint64_t v11 = v31;
    unint64_t v31 = v28;
    xpc_object_t v28 = v11;
    sub_1000041AC((uint64_t)&object);
    sub_1000041AC((uint64_t)&v27);
    sub_10000425C(&v28, v27);
  }

  xpc_release(v29);
  if (v37 < 0)
  {
    xpc_object_t v12 = __p[1];
    if (__p[1] == (void *)8)
    {
      if (*(void *)__p[0] == 0x6E6F697461636F6CLL || *(void *)__p[0] == 0x656475746974616CLL) {
        goto LABEL_64;
      }
      xpc_object_t v12 = __p[1];
    }

    if (v12 == (void *)9)
    {
      if (*(void *)__p[0] == 0x64757469676E6F6CLL && *((_BYTE *)__p[0] + 8) == 101) {
        goto LABEL_64;
      }
      xpc_object_t v12 = __p[1];
    }

    if (v12 == (void *)6)
    {
      if (*(_DWORD *)__p[0] == 1802658157 && *((_WORD *)__p[0] + 2) == 29797) {
        goto LABEL_64;
      }
      xpc_object_t v12 = __p[1];
    }

    unint64_t v15 = (void **)__p[0];
LABEL_45:
    xpc_object_t v16 = *v15;
    xpc_object_t v17 = v15[1];
    int v18 = *((unsigned __int8 *)v15 + 16);
    goto LABEL_64;
  }

  if (HIBYTE(v37) > 8u)
  {
    if (HIBYTE(v37) == 9)
    {
      goto LABEL_64;
    }

    if (HIBYTE(v37) != 17) {
      goto LABEL_68;
    }
    unint64_t v15 = __p;
    goto LABEL_45;
  }

  if (HIBYTE(v37) == 6)
  {
    if (LODWORD(__p[0]) != 1802658157 || WORD2(__p[0]) != 29797) {
      goto LABEL_68;
    }
  }

  else if (HIBYTE(v37) != 8 || __p[0] != (void *)0x656475746974616CLL && __p[0] != (void *)0x6E6F697461636F6CLL)
  {
    goto LABEL_68;
  }

void sub_10007B098( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t a11, xpc_object_t object, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  xpc_release(v24);
  _Unwind_Resume(a1);
}

void sub_10007B18C(uint64_t a1, xpc_connection_t *a2, xpc_object_t *a3)
{
  xpc_object_t reply = xpc_dictionary_create_reply(*a3);
  if (reply)
  {
    xpc_object_t v7 = reply;
    xpc_object_t v52 = reply;
  }

  else
  {
    xpc_object_t v7 = xpc_null_create();
    xpc_object_t v52 = v7;
    if (!v7)
    {
LABEL_5:
      xpc_object_t v52 = xpc_null_create();
      goto LABEL_7;
    }
  }

  if (xpc_get_type(v7) != (xpc_type_t)&_xpc_type_dictionary) {
    goto LABEL_5;
  }
  xpc_retain(v7);
LABEL_7:
  xpc_release(v7);
  xpc_object_t v8 = v52;
  if (xpc_get_type(v52) != (xpc_type_t)&_xpc_type_dictionary)
  {
    if (os_log_type_enabled((os_log_t)qword_100131910, OS_LOG_TYPE_ERROR)) {
      sub_1000DD9E0();
    }
    goto LABEL_90;
  }

  __p[0] = 0LL;
  __p[1] = 0LL;
  uint64_t v51 = 0LL;
  std::stringbuf::string_type v53 = a3;
  uint64_t v54 = "state-name";
  sub_100077350((uint64_t)&v53, &object);
  if (xpc_get_type(object) != (xpc_type_t)&_xpc_type_null)
  {
    std::stringbuf::string_type v53 = 0LL;
    uint64_t v54 = 0LL;
    uint64_t v55 = 0LL;
    applesauce::xpc::dyn_cast_or_default(&v48, &object, &v53);
    if (SHIBYTE(v55) < 0) {
      operator delete(v53);
    }
    if (SHIBYTE(v51) < 0) {
      operator delete(__p[0]);
    }
    *(_OWORD *)__p = v48;
    uint64_t v51 = v49;
  }

  xpc_release(object);
  __int128 v48 = 0xAAAAAAAAAAAAAA00LL;
  sub_1000041AC((uint64_t)&v48);
  sub_1000041AC((uint64_t)&v48);
  std::stringbuf::string_type v53 = a3;
  uint64_t v54 = "state-parameters";
  sub_100077350((uint64_t)&v53, &object);
  if (xpc_get_type(object) != (xpc_type_t)&_xpc_type_null)
  {
    sub_1000A4498(&object, &v46);
    sub_1000041AC((uint64_t)&v46);
    char v9 = v48;
    LOBYTE(v4sub_100007004((uint64_t)v1 + 8) = v46;
    LOBYTE(v46) = v9;
    char v10 = (uint64_t *)*((void *)&v48 + 1);
    *((void *)&v48 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = v47;
    unint64_t v47 = v10;
    sub_1000041AC((uint64_t)&v48);
    sub_1000041AC((uint64_t)&v46);
    sub_10000425C(&v47, v46);
  }

  xpc_release(object);
  if (v51 < 0)
  {
    unint64_t v11 = __p[1];
    if (__p[1] == (void *)8)
    {
      if (*(void *)__p[0] == 0x6E6F697461636F6CLL || *(void *)__p[0] == 0x656475746974616CLL) {
        goto LABEL_65;
      }
      unint64_t v11 = __p[1];
    }

    if (v11 == (void *)9)
    {
      if (*(void *)__p[0] == 0x64757469676E6F6CLL && *((_BYTE *)__p[0] + 8) == 101) {
        goto LABEL_65;
      }
      unint64_t v11 = __p[1];
    }

    if (v11 == (void *)6)
    {
      if (*(_DWORD *)__p[0] == 1802658157 && *((_WORD *)__p[0] + 2) == 29797) {
        goto LABEL_65;
      }
      unint64_t v11 = __p[1];
    }

    xpc_object_t v14 = (void **)__p[0];
    goto LABEL_46;
  }

  if (HIBYTE(v51) > 8u)
  {
    if (HIBYTE(v51) == 9)
    {
LABEL_69:
      xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAA00LL;
      unint64_t v45 = 0LL;
      sub_1000041AC((uint64_t)&object);
      sub_1000041AC((uint64_t)&object);
      if (SHIBYTE(v51) < 0)
      {
        uint64_t v25 = (void **)__p[0];
      }

      else
      {
        if (SHIBYTE(v51) != 3) {
          goto LABEL_78;
        }
        uint64_t v25 = __p;
      }

      int v26 = *(unsigned __int16 *)v25;
      int v27 = *((unsigned __int8 *)v25 + 2);
      if (v26 == 27745 && v27 == 108)
      {
        (*(void (**)(xpc_object_t **__return_ptr))(**(void **)(a1 + 112) + 48LL))(&v53);
        uint64_t v33 = (char *)v53;
        __int128 v34 = v54;
        if (v53 != (xpc_object_t *)v54)
        {
          do
          {
            uint64_t v35 = *(void *)(a1 + 112);
            v40[0] = 0;
            unint64_t v41 = 0LL;
            sub_1000041AC((uint64_t)v40);
            sub_1000041AC((uint64_t)v40);
            (*(void (**)(xpc_object_t ***__return_ptr, uint64_t, char *, char *))(*(void *)v35 + 16LL))( &v42,  v35,  v33,  v40);
            sub_100057BDC((uint64_t)&object, (uint64_t)&v42);
            sub_1000041AC((uint64_t)&v42);
            sub_10000425C((uint64_t **)&v43, v42);
            sub_1000041AC((uint64_t)v40);
            sub_10000425C(&v41, v40[0]);
            v33 += 24;
          }

          while (v33 != v34);
        }

        unint64_t v42 = &v53;
        sub_100015E44((void ***)&v42);
        goto LABEL_79;
      }

LABEL_78:
      (*(void (**)(uint64_t *__return_ptr, void, void **, __int128 *))(**(void **)(a1 + 112) + 16LL))( &v38,  *(void *)(a1 + 112),  __p,  &v48);
      sub_1000041AC((uint64_t)&v38);
      char v29 = (char)object;
      LOBYTE(object) = v38;
      LOBYTE(v3sub_100007004((uint64_t)v1 + 8) = v29;
      uint64_t v30 = v45;
      unint64_t v45 = v39;
      uint64_t v39 = v30;
      sub_1000041AC((uint64_t)&object);
      sub_1000041AC((uint64_t)&v38);
      sub_10000425C(&v39, v38);
LABEL_79:
      sub_100006200((uint64_t)&object, -1, 0x20u, 0LL, 0, &v53);
      if (v55 >= 0) {
        unint64_t v31 = (const char *)&v53;
      }
      else {
        unint64_t v31 = (const char *)v53;
      }
      xpc_object_t v36 = xpc_string_create(v31);
      if (!v36) {
        xpc_object_t v36 = xpc_null_create();
      }
      unint64_t v42 = (xpc_object_t **)&v52;
      uint64_t v43 = "query-state";
      sub_100077630((uint64_t)&v42, &v36, &v37);
      xpc_release(v37);
      xpc_object_t v37 = 0LL;
      xpc_release(v36);
      xpc_object_t v36 = 0LL;
      if (SHIBYTE(v55) < 0) {
        operator delete(v53);
      }
      remote_connection = xpc_dictionary_get_remote_connection(*a3);
      xpc_connection_send_message(remote_connection, v52);
      sub_1000041AC((uint64_t)&object);
      sub_10000425C(&v45, object);
      goto LABEL_87;
    }

    if (HIBYTE(v51) != 17) {
      goto LABEL_69;
    }
    xpc_object_t v14 = __p;
LABEL_46:
    unint64_t v15 = *v14;
    xpc_object_t v16 = v14[1];
    int v17 = *((unsigned __int8 *)v14 + 16);
    goto LABEL_69;
  }

  if (HIBYTE(v51) == 6)
  {
    if (LODWORD(__p[0]) == 1802658157 && WORD2(__p[0]) == 29797) {
      goto LABEL_65;
    }
    goto LABEL_69;
  }

LABEL_65:
  xpc_object_t v22 = sub_100005064(&v53, "com.apple.private.CoreAnalytics.QueryLocation.allow");
  char v23 = sub_100077394((uint64_t)v22, a2, a3, (uint64_t *)&v53);
  char v24 = v23;
  if (SHIBYTE(v55) < 0)
  {
    operator delete(v53);
    if ((v24 & 1) != 0) {
      goto LABEL_69;
    }
  }

  else if ((v23 & 1) != 0)
  {
    goto LABEL_69;
  }

LABEL_87:
  sub_1000041AC((uint64_t)&v48);
  sub_10000425C((uint64_t **)&v48 + 1, v48);
  if (SHIBYTE(v51) < 0) {
    operator delete(__p[0]);
  }
  xpc_object_t v8 = v52;
LABEL_90:
  xpc_release(v8);
}

        uint64_t v33 = *(xpc_connection_t **)(v1 + 16);
        __int128 v34 = *(xpc_object_t **)v1;
        uint64_t v35 = sub_100005064(&v117[3], "com.apple.private.CoreAnalytics.ObserveEvents.allow");
        xpc_object_t v36 = sub_100077394((uint64_t)v35, v33, v34, (uint64_t *)&v117[3]);
        if (SHIBYTE(v118) < 0) {
          operator delete(v117[3]);
        }
        if (!v36) {
          break;
        }
        sub_10007933C(v2, *(xpc_object_t **)(v1 + 16), *(xpc_object_t **)v1);
        goto LABEL_390;
      default:
        xpc_object_t v8 = *(_DWORD *)v117[0];
        goto LABEL_47;
    }
  }

  else
  {
    xpc_object_t v5 = v117;
    switch(HIBYTE(v117[2]))
    {
      case 7:
        goto LABEL_17;
      case 8:
        char v9 = v117[0];
        goto LABEL_50;
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xF:
      case 0x12:
      case 0x13:
      case 0x14:
        goto LABEL_95;
      case 0xE:
        goto LABEL_70;
      case 0x10:
        goto LABEL_57;
      case 0x11:
        if (v117[0] != (void *)0x656C62616E656572LL
          || v117[1] != (void *)0x6E696C706D61732DLL
          || LOBYTE(v117[2]) != 103)
        {
          goto LABEL_95;
        }

        goto LABEL_91;
      case 0x15:
        if (v117[0] != (void *)0x652D657461657263LL
          || v117[1] != (void *)0x73626F2D746E6576LL
          || *(void **)((char *)&v117[1] + 5) != (void *)0x726576726573626FLL)
        {
          goto LABEL_95;
        }

        goto LABEL_87;
      default:
        xpc_object_t v8 = (int)v117[0];
        break;
    }

  xpc_object_t v37 = v18;
  uint64_t v38 = 0LL;
LABEL_88:
  v70 = "pastDueLegacy";
  int64x2_t v73 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&uint64_t v39 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v39 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__int128 buf = v39;
  __int128 v72 = v39;
  sub_100008780((uint64_t)&v63, &v70, (uint64_t)buf);
  uint64_t v65 = (unsigned __int8 *)&v63;
  v66 = 0LL;
  uint64_t v67 = 0LL;
  xpc_object_t v68 = 0LL;
  v69 = 0x8000000000000000LL;
  sub_100008AC8(&v65);
  if (sub_1000087E8((unsigned __int8 **)buf, &v65))
  {
    uint64_t v40 = (unsigned __int8 *)sub_10009AE9C();
    if (!v40) {
      goto LABEL_93;
    }
  }

  else
  {
    uint64_t v40 = sub_100008924((unsigned __int8 **)buf);
  }

  if (*v40 - 5 >= 3) {
LABEL_93:
  }
    uint64_t v40 = 0LL;
  if (!v3 || !v62 || !v61 || !v15)
  {
    unint64_t v42 = (os_log_s *)qword_1001318E8;
    if (os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_INFO,  "[CadenceManager] Retrieved cadence but did not match schema. Treating as no-data.",  buf,  2u);
    }

    goto LABEL_102;
  }

  *(void *)__int128 buf = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FF7C(v3, (uint64_t *)buf);
  *(void *)a1 = *(void *)buf;
  if (*((char *)v15 + 23) < 0)
  {
    sub_10000B8BC((_BYTE *)(a1 + 8), *(void **)v15, *((void *)v15 + 1));
  }

  else
  {
    unint64_t v41 = *v15;
    *(void *)(a1 + 24) = *((void *)v15 + 2);
    *(_OWORD *)(a1 + sub_100007004((uint64_t)v1 + 8) = v41;
  }

  uint64_t v43 = (_BYTE *)(a1 + 32);
  if (v37)
  {
    if (*((char *)v37 + 23) < 0)
    {
      sub_10000B8BC(v43, *(void **)v37, *((void *)v37 + 1));
    }

    else
    {
      uint64_t v44 = *v37;
      *(void *)(a1 + 4sub_100007004((uint64_t)v1 + 8) = *((void *)v37 + 2);
      *(_OWORD *)uint64_t v43 = v44;
    }
  }

  else
  {
    sub_100005064(v43, "");
  }

  if (v36)
  {
    unint64_t v45 = v36;
    uint64_t v46 = *((char *)v36 + 23);
    unint64_t v47 = v35;
    if (v46 < 0)
    {
      sub_10000B8BC((_BYTE *)(a1 + 56), *(void **)v45, *((void *)v45 + 1));
    }

    else
    {
      __int128 v48 = *v45;
      *(void *)(a1 + 72) = *((void *)v45 + 2);
      *(_OWORD *)(a1 + 56) = v48;
    }
  }

  else
  {
    sub_100005064((void *)(a1 + 56), "");
    unint64_t v47 = v35;
  }

  if (v59)
  {
    if (*((char *)v59 + 23) < 0)
    {
      sub_10000B8BC((_BYTE *)(a1 + 80), *(void **)v59, *((void *)v59 + 1));
    }

    else
    {
      uint64_t v49 = *v59;
      *(void *)(a1 + 96) = *((void *)v59 + 2);
      *(_OWORD *)(a1 + 80) = v49;
    }
  }

  else
  {
    sub_100005064((void *)(a1 + 80), "");
  }

  *(void *)__int128 buf = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FF7C(v62, (uint64_t *)buf);
  *(std::chrono::system_clock::time_point *)(a1 + 104) = std::chrono::system_clock::from_time_t(*(time_t *)buf);
  *(void *)__int128 buf = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FF7C(v61, (uint64_t *)buf);
  *(std::chrono::system_clock::time_point *)(a1 + 112) = std::chrono::system_clock::from_time_t(*(time_t *)buf);
  unint64_t v50 = (char)v60;
  if (v60) {
    unint64_t v50 = *v60 != 0;
  }
  *(_BYTE *)(a1 + 120) = v50;
  if (v32)
  {
    if (*((char *)v32 + 23) < 0)
    {
      sub_10000B8BC((_BYTE *)(a1 + 128), *(void **)v32, *((void *)v32 + 1));
    }

    else
    {
      uint64_t v51 = *v32;
      *(void *)(a1 + 144) = *((void *)v32 + 2);
      *(_OWORD *)(a1 + 12sub_100007004((uint64_t)v1 + 8) = v51;
    }
  }

  else
  {
    sub_100005064((void *)(a1 + 128), "");
  }

  if (v38)
  {
    xpc_object_t v52 = v58;
    if (*((char *)v38 + 23) < 0)
    {
      sub_10000B8BC((_BYTE *)(a1 + 152), *(void **)v38, *((void *)v38 + 1));
    }

    else
    {
      std::stringbuf::string_type v53 = *v38;
      *(void *)(a1 + 16sub_100007004((uint64_t)v1 + 8) = *((void *)v38 + 2);
      *(_OWORD *)(a1 + 152) = v53;
    }
  }

  else
  {
    sub_100005064((void *)(a1 + 152), "");
    xpc_object_t v52 = v58;
  }

  if (v29)
  {
    *(void *)__int128 buf = 0xAAAAAAAAAAAAAAAALL;
    sub_10000FF7C(v29, (uint64_t *)buf);
    uint64_t v54 = *(void *)buf;
  }

  else
  {
    uint64_t v54 = 0LL;
  }

  *(void *)(a1 + 176) = v54;
  if (v52)
  {
    *(void *)__int128 buf = 0xAAAAAAAAAAAAAAAALL;
    sub_10000FF7C(v52, (uint64_t *)buf);
    uint64_t v55 = *(void *)buf;
  }

  else
  {
    uint64_t v55 = 0LL;
  }

  *(void *)(a1 + 184) = v55;
  if (v47)
  {
    *(void *)__int128 buf = 0xAAAAAAAAAAAAAAAALL;
    sub_10000FF7C(v47, (uint64_t *)buf);
    xpc_object_t v56 = *(void *)buf;
  }

  else
  {
    xpc_object_t v56 = 0LL;
  }

  *(void *)(a1 + 192) = v56;
  if (v40)
  {
    *(void *)__int128 buf = 0xAAAAAAAAAAAAAAAALL;
    sub_10000FF7C(v40, (uint64_t *)buf);
    v57 = *(void *)buf;
  }

  else
  {
    v57 = 0LL;
  }

  *(void *)(a1 + 200) = v57;
LABEL_144:
  sub_1000041AC((uint64_t)&v63);
  sub_10000425C(&v64, v63);
}

void sub_10007B840( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, xpc_object_t object, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t *a22, uint64_t a23, uint64_t a24, void *__p, uint64_t a26, int a27, __int16 a28, char a29, char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  xpc_release(*(xpc_object_t *)(v30 - 120));
  _Unwind_Resume(a1);
}

void sub_10007B968(uint64_t a1, uint64_t a2, xpc_object_t *a3)
{
  xpc_object_t reply = xpc_dictionary_create_reply(*a3);
  if (reply)
  {
    xpc_object_t v6 = reply;
    xpc_object_t v19 = reply;
  }

  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t v19 = v6;
    if (!v6)
    {
LABEL_5:
      xpc_object_t v19 = xpc_null_create();
      goto LABEL_7;
    }
  }

  if (xpc_get_type(v6) != (xpc_type_t)&_xpc_type_dictionary) {
    goto LABEL_5;
  }
  xpc_retain(v6);
LABEL_7:
  xpc_release(v6);
  xpc_object_t v7 = v19;
  if (xpc_get_type(v19) == (xpc_type_t)&_xpc_type_dictionary)
  {
    unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
    int v18 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    sub_10000BA40((uint64_t)&v17, 0LL, 0LL, 0, 2);
    (*(void (**)(void **__return_ptr))(**(void **)(a1 + 112) + 48LL))(__p);
    xpc_object_t v8 = (char *)__p[0];
    char v9 = (char *)__p[1];
    while (v8 != v9)
    {
      sub_10007BC0C((uint64_t)&v17, (uint64_t)v8);
      v8 += 24;
    }

    v12[0] = __p;
    sub_100015E44(v12);
    sub_100006200((uint64_t)&v17, -1, 0x20u, 0LL, 0, __p);
    if (v16 >= 0) {
      char v10 = __p;
    }
    else {
      char v10 = (void **)__p[0];
    }
    xpc_object_t v13 = xpc_string_create((const char *)v10);
    if (!v13) {
      xpc_object_t v13 = xpc_null_create();
    }
    v12[0] = &v19;
    v12[1] = (void **)"query-list";
    sub_100077630((uint64_t)v12, &v13, &object);
    xpc_release(object);
    xpc_object_t object = 0LL;
    xpc_release(v13);
    xpc_object_t v13 = 0LL;
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    remote_connection = xpc_dictionary_get_remote_connection(*a3);
    xpc_connection_send_message(remote_connection, v19);
    sub_1000041AC((uint64_t)&v17);
    sub_10000425C(&v18, v17);
    xpc_object_t v7 = v19;
  }

  else if (os_log_type_enabled((os_log_t)qword_100131910, OS_LOG_TYPE_ERROR))
  {
    sub_1000DDA38();
  }

  xpc_release(v7);
}

void sub_10007BB84( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1000045D0(exception_object);
}

uint64_t sub_10007BC0C(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)a1)
  {
    if (*(_BYTE *)a1 != 2)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      char v10 = (char *)sub_10000528C((char *)a1);
      sub_100005064(&v13, v10);
      unint64_t v11 = std::string::insert(&v13, 0LL, "cannot use emplace_back() with ");
      __int128 v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      std::string::size_type cap = v11->__r_.__value_.__l.__cap_;
      __int128 v14 = v12;
      v11->__r_.__value_.__l.__size_ = 0LL;
      v11->__r_.__value_.__l.__cap_ = 0LL;
      v11->__r_.__value_.__r.__words[0] = 0LL;
      sub_100005128(311, (uint64_t)&v14, exception);
    }
  }

  else
  {
    *(_BYTE *)a1 = 2;
    xpc_object_t v4 = operator new(0x18uLL);
    v4[1] = 0LL;
    void v4[2] = 0LL;
    *xpc_object_t v4 = 0LL;
    *(void *)(a1 + sub_100007004((uint64_t)v1 + 8) = v4;
    sub_1000041AC(a1);
  }

  xpc_object_t v5 = *(uint64_t **)(a1 + 8);
  unint64_t v6 = v5[1];
  if (v6 >= v5[2])
  {
    uint64_t v7 = sub_100082150(v5, a2);
  }

  else
  {
    sub_10000B990(v5[1], a2);
    uint64_t v7 = v6 + 16;
    v5[1] = v6 + 16;
  }

  v5[1] = v7;
  return v7 - 16;
}

void sub_10007BD5C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  *(void *)(v21 + sub_100007004((uint64_t)v1 + 8) = v22;
  _Unwind_Resume(exception_object);
}

void sub_10007BDCC(uint64_t a1, uint64_t a2, xpc_object_t *a3)
{
  xpc_object_t reply = xpc_dictionary_create_reply(*a3);
  if ((reply || (xpc_object_t reply = xpc_null_create()) != 0LL) && xpc_get_type(reply) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_retain(reply);
    xpc_object_t v6 = reply;
  }

  else
  {
    xpc_object_t v6 = xpc_null_create();
  }

  xpc_release(reply);
  if (xpc_get_type(v6) == (xpc_type_t)&_xpc_type_dictionary)
  {
    v13[0] = 0LL;
    v13[1] = 0LL;
    uint64_t v14 = 0LL;
    __p = a3;
    char v16 = "state-name";
    sub_100077350((uint64_t)&__p, &object);
    if (xpc_get_type(object) != (xpc_type_t)&_xpc_type_null)
    {
      __p = 0LL;
      char v16 = 0LL;
      uint64_t v17 = 0LL;
      applesauce::xpc::dyn_cast_or_default(&v10, &object, &__p);
      if (SHIBYTE(v17) < 0) {
        operator delete(__p);
      }
      *(_OWORD *)std::string v13 = v10;
      uint64_t v14 = v11;
    }

    xpc_release(object);
    if (v14 >= 0) {
      uint64_t v7 = (void *)HIBYTE(v14);
    }
    else {
      uint64_t v7 = v13[1];
    }
    uint64_t v8 = **(void **)(a1 + 112);
    if (v7) {
      (*(void (**)(void))(v8 + 40))();
    }
    else {
      (*(void (**)(void))(v8 + 32))();
    }
    remote_connection = xpc_dictionary_get_remote_connection(*a3);
    xpc_connection_send_message(remote_connection, v6);
    if (SHIBYTE(v14) < 0) {
      operator delete(v13[0]);
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_100131910, OS_LOG_TYPE_ERROR))
  {
    sub_1000DDA90();
  }

  xpc_release(v6);
}

void sub_10007BF98( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p, uint64_t a21, int a22, __int16 a23, char a24, char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  xpc_release(object);
  xpc_release(v25);
  _Unwind_Resume(a1);
}

void sub_10007C024(uint64_t a1, uint64_t a2, xpc_object_t *a3)
{
  xpc_object_t reply = xpc_dictionary_create_reply(*a3);
  if (reply)
  {
    xpc_object_t v6 = reply;
    xpc_object_t v17 = reply;
  }

  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t v17 = v6;
    if (!v6)
    {
LABEL_5:
      xpc_object_t v17 = xpc_null_create();
      goto LABEL_7;
    }
  }

  if (xpc_get_type(v6) != (xpc_type_t)&_xpc_type_dictionary) {
    goto LABEL_5;
  }
  xpc_retain(v6);
LABEL_7:
  xpc_release(v6);
  memset(v16, 170, sizeof(v16));
  sub_100023388(*(void *)(a1 + 144), v16);
  unint64_t v14 = 0xAAAAAAAAAAAAAA02LL;
  __p[0] = (void *)v16[0];
  v9[0] = v16[1];
  unint64_t v15 = sub_100082268((uint64_t *)__p, v9);
  sub_1000041AC((uint64_t)&v14);
  sub_1000041AC((uint64_t)&v14);
  sub_100006200((uint64_t)&v14, -1, 0x20u, 0LL, 0, __p);
  if (v11 >= 0) {
    uint64_t v7 = __p;
  }
  else {
    uint64_t v7 = (void **)__p[0];
  }
  xpc_object_t v12 = xpc_string_create((const char *)v7);
  if (!v12) {
    xpc_object_t v12 = xpc_null_create();
  }
  v9[0] = (uint64_t)&v17;
  v9[1] = (uint64_t)"transforms-in-cache";
  sub_100077630((uint64_t)v9, &v12, &object);
  xpc_release(object);
  xpc_object_t object = 0LL;
  xpc_release(v12);
  xpc_object_t v12 = 0LL;
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  remote_connection = xpc_dictionary_get_remote_connection(*a3);
  xpc_connection_send_message(remote_connection, v17);
  sub_1000041AC((uint64_t)&v14);
  sub_10000425C(&v15, v14);
  __p[0] = v16;
  sub_100015E44((void ***)__p);
  xpc_release(v17);
}

void sub_10007C1FC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1000045D0(exception_object);
}

void sub_10007C270(uint64_t a1, xpc_object_t *a2, uint64_t a3)
{
  xpc_object_t v4 = sub_100080634((void *)(a1 + 208), a2);
  if (v4)
  {
    xpc_object_t v5 = v4;
    if (!*((_BYTE *)v4 + 56))
    {
      v7[0] = a3;
      v7[1] = "process";
      sub_100077350((uint64_t)v7, &object);
      applesauce::xpc::dyn_cast_or_default(__p, (applesauce::xpc *)&object, (const object *)"<unknown>", v6);
      sub_10007C370((uint64_t)(v5 + 4), (__int128 *)__p);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      xpc_release(object);
    }
  }

void sub_10007C328( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a2) {
    sub_1000045D0(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10007C370(uint64_t a1, __int128 *a2)
{
  if (*(_BYTE *)(a1 + 24))
  {
    __int128 v4 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v4;
    *((_BYTE *)a2 + 23) = 0;
    *(_BYTE *)a2 = 0;
  }

  else
  {
    __int128 v5 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v5;
    *((void *)a2 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0LL;
    *((void *)a2 + 2) = 0LL;
    *(void *)a2 = 0LL;
    *(_BYTE *)(a1 + 24) = 1;
  }

  return a1;
}

void sub_10007C3E8(uint64_t a1, xpc_connection_t *a2, xpc_object_t *a3)
{
  xpc_object_t reply = xpc_dictionary_create_reply(*a3);
  if ((reply || (xpc_object_t reply = xpc_null_create()) != 0LL) && xpc_get_type(reply) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_retain(reply);
    xpc_object_t v5 = reply;
  }

  else
  {
    xpc_object_t v5 = xpc_null_create();
  }

  xpc_release(reply);
  if (xpc_get_type(v5) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_connection_send_message(*a2, v5);
  }

  else if (os_log_type_enabled((os_log_t)qword_100131910, OS_LOG_TYPE_ERROR))
  {
    sub_1000DDAE8();
  }

  xpc_release(v5);
}

void sub_10007C4BC(_Unwind_Exception *a1)
{
}

void sub_10007C4D8(uint64_t a1, uint64_t a2, xpc_object_t *a3)
{
  xpc_object_t reply = xpc_dictionary_create_reply(*a3);
  if (reply)
  {
    xpc_object_t v6 = reply;
    xpc_object_t object = reply;
  }

  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t object = v6;
    if (!v6)
    {
LABEL_5:
      xpc_object_t object = xpc_null_create();
      goto LABEL_7;
    }
  }

  if (xpc_get_type(v6) != (xpc_type_t)&_xpc_type_dictionary) {
    goto LABEL_5;
  }
  xpc_retain(v6);
LABEL_7:
  xpc_release(v6);
  xpc_object_t v7 = object;
  if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_dictionary)
  {
    std::string v13 = a3;
    unint64_t v14 = "name";
    memset(__p, 170, sizeof(__p));
    sub_100077350((uint64_t)&v13, v10);
    v17[0] = 0LL;
    v17[1] = 0LL;
    uint64_t v18 = 0LL;
    applesauce::xpc::dyn_cast_or_default(__p, v10, v17);
    if (SHIBYTE(v18) < 0) {
      operator delete(v17[0]);
    }
    xpc_release(v10[0]);
    sub_100023678(*(void *)(a1 + 144), (uint64_t)__p, &v13);
    sub_100006200((uint64_t)&v13, -1, 0x20u, 0LL, 0, v17);
    if (v18 >= 0) {
      uint64_t v8 = (const char *)v17;
    }
    else {
      uint64_t v8 = (const char *)v17[0];
    }
    xpc_object_t v11 = xpc_string_create(v8);
    if (!v11) {
      xpc_object_t v11 = xpc_null_create();
    }
    v10[0] = &object;
    v10[1] = "transform-info";
    sub_100077630((uint64_t)v10, &v11, &v12);
    xpc_release(v12);
    xpc_object_t v12 = 0LL;
    xpc_release(v11);
    xpc_object_t v11 = 0LL;
    if (SHIBYTE(v18) < 0) {
      operator delete(v17[0]);
    }
    sub_1000041AC((uint64_t)&v13);
    sub_10000425C((uint64_t **)&v14, v13);
    remote_connection = xpc_dictionary_get_remote_connection(*a3);
    xpc_connection_send_message(remote_connection, object);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    xpc_object_t v7 = object;
  }

  else if (os_log_type_enabled((os_log_t)qword_100131910, OS_LOG_TYPE_ERROR))
  {
    sub_1000DDB40();
  }

  xpc_release(v7);
}

void sub_10007C704( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1000045D0(exception_object);
}

void sub_10007C7B4(uint64_t a1, uint64_t a2, xpc_object_t *a3)
{
  xpc_object_t reply = xpc_dictionary_create_reply(*a3);
  if (reply)
  {
    xpc_object_t v6 = reply;
    xpc_object_t object = reply;
  }

  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t object = v6;
    if (!v6)
    {
LABEL_5:
      xpc_object_t object = xpc_null_create();
      goto LABEL_7;
    }
  }

  if (xpc_get_type(v6) != (xpc_type_t)&_xpc_type_dictionary) {
    goto LABEL_5;
  }
  xpc_retain(v6);
LABEL_7:
  xpc_release(v6);
  xpc_object_t v7 = object;
  if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_dictionary)
  {
    memset(__p, 170, sizeof(__p));
    v12[0] = a3;
    v12[1] = "name";
    sub_100077350((uint64_t)v12, &v13);
    p_xpc_object_t object = 0LL;
    xpc_object_t v17 = 0LL;
    uint64_t v18 = 0LL;
    applesauce::xpc::dyn_cast_or_default(__p, &v13, &p_object);
    if (SHIBYTE(v18) < 0) {
      operator delete(p_object);
    }
    xpc_release(v13);
    char v8 = (*(uint64_t (**)(void, void **))(**(void **)(a1 + 176) + 128LL))(*(void *)(a1 + 176), __p);
    xpc_object_t v10 = xpc_BOOL_create(v8);
    if (!v10) {
      xpc_object_t v10 = xpc_null_create();
    }
    p_xpc_object_t object = &object;
    xpc_object_t v17 = "event-used";
    sub_100077630((uint64_t)&p_object, &v10, &v11);
    xpc_release(v11);
    xpc_object_t v11 = 0LL;
    xpc_release(v10);
    xpc_object_t v10 = 0LL;
    remote_connection = xpc_dictionary_get_remote_connection(*a3);
    xpc_connection_send_message(remote_connection, object);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    xpc_object_t v7 = object;
  }

  else if (os_log_type_enabled((os_log_t)qword_100131910, OS_LOG_TYPE_ERROR))
  {
    sub_1000DDB98();
  }

  xpc_release(v7);
}

void sub_10007C98C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t object, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, xpc_object_t a21)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1000045D0(exception_object);
}

void sub_10007CA28(uint64_t a1, uint64_t a2, xpc_object_t *a3)
{
  xpc_object_t reply = xpc_dictionary_create_reply(*a3);
  if (reply)
  {
    xpc_object_t v6 = reply;
    xpc_object_t object = reply;
  }

  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t object = v6;
    if (!v6)
    {
LABEL_5:
      xpc_object_t object = xpc_null_create();
      goto LABEL_7;
    }
  }

  if (xpc_get_type(v6) != (xpc_type_t)&_xpc_type_dictionary) {
    goto LABEL_5;
  }
  xpc_retain(v6);
LABEL_7:
  xpc_release(v6);
  xpc_object_t v7 = object;
  if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_dictionary)
  {
    memset(__p, 170, sizeof(__p));
    v12[0] = a3;
    v12[1] = "name";
    sub_100077350((uint64_t)v12, &v13);
    p_xpc_object_t object = 0LL;
    xpc_object_t v17 = 0LL;
    uint64_t v18 = 0LL;
    applesauce::xpc::dyn_cast_or_default(__p, &v13, &p_object);
    if (SHIBYTE(v18) < 0) {
      operator delete(p_object);
    }
    xpc_release(v13);
    char v8 = sub_100023510(*(void *)(a1 + 144), (uint64_t)__p);
    xpc_object_t v10 = xpc_BOOL_create(v8);
    if (!v10) {
      xpc_object_t v10 = xpc_null_create();
    }
    p_xpc_object_t object = &object;
    xpc_object_t v17 = "transform-persist";
    sub_100077630((uint64_t)&p_object, &v10, &v11);
    xpc_release(v11);
    xpc_object_t v11 = 0LL;
    xpc_release(v10);
    xpc_object_t v10 = 0LL;
    remote_connection = xpc_dictionary_get_remote_connection(*a3);
    xpc_connection_send_message(remote_connection, object);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    xpc_object_t v7 = object;
  }

  else if (os_log_type_enabled((os_log_t)qword_100131910, OS_LOG_TYPE_ERROR))
  {
    sub_1000DDBF0();
  }

  xpc_release(v7);
}

void sub_10007CBF8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t object, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, xpc_object_t a21)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1000045D0(exception_object);
}

void sub_10007CC94(uint64_t a1, uint64_t a2, xpc_object_t *a3)
{
  xpc_object_t reply = xpc_dictionary_create_reply(*a3);
  if ((reply || (xpc_object_t reply = xpc_null_create()) != 0LL) && xpc_get_type(reply) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_retain(reply);
    xpc_object_t v5 = reply;
  }

  else
  {
    xpc_object_t v5 = xpc_null_create();
  }

  xpc_release(reply);
  if (xpc_get_type(v5) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_object_t v6 = *a3;
    xpc_object_t object = v6;
    if (v6) {
      xpc_retain(v6);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    sub_1000A4498(&object, &v9);
    sub_1000927E4((uint64_t)&v9);
    sub_1000041AC((uint64_t)&v9);
    sub_10000425C(&v10, v9);
    xpc_release(object);
    remote_connection = xpc_dictionary_get_remote_connection(*a3);
    xpc_connection_send_message(remote_connection, v5);
  }

  else if (os_log_type_enabled((os_log_t)qword_100131910, OS_LOG_TYPE_ERROR))
  {
    sub_1000DDC48();
  }

  xpc_release(v5);
}

void sub_10007CDE4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, char a10)
{
}

void sub_10007CE50(uint64_t a1, uint64_t a2, xpc_object_t *a3)
{
  xpc_object_t reply = xpc_dictionary_create_reply(*a3);
  if (reply)
  {
    xpc_object_t v6 = reply;
    xpc_object_t object = reply;
  }

  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t object = v6;
    if (!v6)
    {
LABEL_5:
      xpc_object_t object = xpc_null_create();
      goto LABEL_7;
    }
  }

  if (xpc_get_type(v6) != (xpc_type_t)&_xpc_type_dictionary) {
    goto LABEL_5;
  }
  xpc_retain(v6);
LABEL_7:
  xpc_release(v6);
  xpc_object_t v7 = object;
  if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_dictionary)
  {
    memset(__p, 170, sizeof(__p));
    v12[0] = a3;
    v12[1] = "name";
    sub_100077350((uint64_t)v12, &v13);
    p_xpc_object_t object = 0LL;
    xpc_object_t v17 = 0LL;
    uint64_t v18 = 0LL;
    applesauce::xpc::dyn_cast_or_default(__p, &v13, &p_object);
    if (SHIBYTE(v18) < 0) {
      operator delete(p_object);
    }
    xpc_release(v13);
    char v8 = sub_100023448(*(void *)(a1 + 144), (uint64_t)__p);
    xpc_object_t v10 = xpc_BOOL_create(v8);
    if (!v10) {
      xpc_object_t v10 = xpc_null_create();
    }
    p_xpc_object_t object = &object;
    xpc_object_t v17 = "transform-evict";
    sub_100077630((uint64_t)&p_object, &v10, &v11);
    xpc_release(v11);
    xpc_object_t v11 = 0LL;
    xpc_release(v10);
    xpc_object_t v10 = 0LL;
    remote_connection = xpc_dictionary_get_remote_connection(*a3);
    xpc_connection_send_message(remote_connection, object);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    xpc_object_t v7 = object;
  }

  else if (os_log_type_enabled((os_log_t)qword_100131910, OS_LOG_TYPE_ERROR))
  {
    sub_1000DDCA0();
  }

  xpc_release(v7);
}

void sub_10007D020( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t object, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, xpc_object_t a21)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1000045D0(exception_object);
}

void sub_10007D0BC(uint64_t a1, xpc_connection_t *a2, uint64_t a3, uint64_t a4)
{
  xpc_object_t v15 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  sub_10007D284(&v15);
  xpc_object_t object = xpc_string_create("configuration-change");
  if (!object) {
    xpc_object_t object = xpc_null_create();
  }
  xpc_object_t v11 = &v15;
  xpc_object_t v12 = "notification";
  sub_100077630((uint64_t)&v11, &object, &v14);
  xpc_release(v14);
  xpc_object_t v14 = 0LL;
  xpc_release(object);
  xpc_object_t object = 0LL;
  xpc_object_t v6 = *(void **)a4;
  xpc_object_t v9 = v6;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    xpc_object_t v9 = xpc_null_create();
  }
  xpc_object_t v11 = &v15;
  xpc_object_t v12 = "configuration";
  sub_100077630((uint64_t)&v11, &v9, &v10);
  xpc_release(v10);
  xpc_object_t v10 = 0LL;
  xpc_release(v9);
  xpc_object_t v9 = 0LL;
  xpc_object_t v7 = xpc_int64_create(*(void *)(a4 + 8));
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_object_t v11 = &v15;
  xpc_object_t v12 = "configuration-size";
  sub_100077630((uint64_t)&v11, &v7, &v8);
  xpc_release(v8);
  xpc_object_t v8 = 0LL;
  xpc_release(v7);
  xpc_object_t v7 = 0LL;
  xpc_connection_send_message(*a2, v15);
  xpc_release(v15);
}

void sub_10007D22C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1000045D0(exception_object);
}

void sub_10007D284(xpc_object_t *a1@<X8>)
{
  xpc_object_t v2 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_object_t v3 = v2;
  if (v2)
  {
    *a1 = v2;
  }

  else
  {
    xpc_object_t v3 = xpc_null_create();
    *a1 = v3;
    if (!v3) {
      goto LABEL_5;
    }
  }

  if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_retain(v3);
    goto LABEL_7;
  }

void sub_10007D314(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  for (uint64_t i = *(uint64_t ***)(a1 + 224); i; uint64_t i = (uint64_t **)*i)
  {
    if (i[3] == *a2)
    {
      xpc_object_t message = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      sub_10007D284(&message);
      xpc_object_t v12 = xpc_string_create("message-emit");
      if (!v12) {
        xpc_object_t v12 = xpc_null_create();
      }
      __p[0] = &message;
      __p[1] = "notification";
      sub_100077630((uint64_t)__p, &v12, &object);
      xpc_release(object);
      xpc_object_t object = 0LL;
      xpc_release(v12);
      xpc_object_t v12 = 0LL;
      sub_100006200(a3, -1, 0x20u, 0LL, 0, __p);
      if (v9 >= 0) {
        xpc_object_t v6 = __p;
      }
      else {
        xpc_object_t v6 = (void **)__p[0];
      }
      xpc_object_t v10 = xpc_string_create((const char *)v6);
      if (!v10) {
        xpc_object_t v10 = xpc_null_create();
      }
      v7[0] = &message;
      v7[1] = "message";
      sub_100077630((uint64_t)v7, &v10, &v11);
      xpc_release(v11);
      xpc_object_t v11 = 0LL;
      xpc_release(v10);
      xpc_object_t v10 = 0LL;
      if (v9 < 0) {
        operator delete(__p[0]);
      }
      xpc_connection_send_message((xpc_connection_t)i[2], message);
      xpc_release(message);
    }
  }

void sub_10007D4AC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1000045D0(exception_object);
}

void sub_10007D4FC(uint64_t a1, uint64_t a2, xpc_object_t *a3)
{
  xpc_object_t reply = xpc_dictionary_create_reply(*a3);
  if (reply)
  {
    xpc_object_t v6 = reply;
    xpc_object_t v23 = reply;
  }

  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t v23 = v6;
    if (!v6)
    {
LABEL_5:
      xpc_object_t v23 = xpc_null_create();
      goto LABEL_7;
    }
  }

  if (xpc_get_type(v6) != (xpc_type_t)&_xpc_type_dictionary) {
    goto LABEL_5;
  }
  xpc_retain(v6);
LABEL_7:
  xpc_release(v6);
  xpc_object_t v7 = v23;
  if (xpc_get_type(v23) == (xpc_type_t)&_xpc_type_dictionary)
  {
    uint64_t v16 = 0LL;
    xpc_object_t v17 = &v16;
    uint64_t v18 = 0x3802000000LL;
    xpc_object_t v19 = sub_10007D7C8;
    xpc_object_t v20 = sub_10007D80C;
    unint64_t v21 = 0xAAAAAAAAAAAAAAAALL;
    uint64_t v22 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    sub_10000BA40((uint64_t)&v21, 0LL, 0LL, 0, 2);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 0x40000000LL;
    xpc_object_t v15[2] = sub_10007D838;
    v15[3] = &unk_10012A468;
    v15[4] = &v16;
    v15[5] = a1;
    sub_10004FC38(v15);
    sub_100006200((uint64_t)(v17 + 5), -1, 0x20u, 0LL, 0, __p);
    if (v12 >= 0) {
      xpc_object_t v8 = __p;
    }
    else {
      xpc_object_t v8 = (void **)__p[0];
    }
    xpc_object_t v13 = xpc_string_create((const char *)v8);
    if (!v13) {
      xpc_object_t v13 = xpc_null_create();
    }
    v10[0] = &v23;
    v10[1] = "appusage";
    sub_100077630((uint64_t)v10, &v13, &object);
    xpc_release(object);
    xpc_object_t object = 0LL;
    xpc_release(v13);
    xpc_object_t v13 = 0LL;
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    remote_connection = xpc_dictionary_get_remote_connection(*a3);
    xpc_connection_send_message(remote_connection, v23);
    _Block_object_dispose(&v16, 8);
    sub_1000041AC((uint64_t)&v21);
    sub_10000425C(&v22, v21);
    xpc_object_t v7 = v23;
  }

  else if (os_log_type_enabled((os_log_t)qword_100131910, OS_LOG_TYPE_ERROR))
  {
    sub_1000DDCF8();
  }

  xpc_release(v7);
}

void sub_10007D750( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1000045D0(exception_object);
}

uint64_t sub_10007D7C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 40;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  uint64_t v3 = a1 + 40;
  *(void *)(a1 + 4sub_100007004((uint64_t)v1 + 8) = *(void *)(a2 + 48);
  sub_1000041AC(a2 + 40);
  *(_BYTE *)uint64_t v2 = 0;
  *(void *)(v2 + sub_100007004((uint64_t)v1 + 8) = 0LL;
  return sub_1000041AC(v3);
}

void sub_10007D80C(uint64_t a1)
{
}

void sub_10007D838(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  sub_100070CFC(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL, a2);
  uint64_t v4 = *(void *)(v3 + 48);
  sub_100005064(__p, "com.apple.coreanalytics.appUsage");
  sub_1000723B4((__int128 *)__p, a2, &v10);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v4 + 16LL))(v4, &v10);
  xpc_object_t v5 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  if (v9 < 0) {
    operator delete(__p[0]);
  }
}

void sub_10007D91C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10007D950(uint64_t a1, uint64_t a2, xpc_object_t *a3)
{
  xpc_object_t reply = xpc_dictionary_create_reply(*a3);
  if ((reply || (xpc_object_t reply = xpc_null_create()) != 0LL) && xpc_get_type(reply) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_retain(reply);
    xpc_object_t v6 = reply;
  }

  else
  {
    xpc_object_t v6 = xpc_null_create();
  }

  xpc_release(reply);
  if (xpc_get_type(v6) != (xpc_type_t)&_xpc_type_dictionary)
  {
    if (os_log_type_enabled((os_log_t)qword_100131910, OS_LOG_TYPE_ERROR)) {
      sub_1000DDD50();
    }
    goto LABEL_30;
  }

  dispatch_object_t v28 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  uint64_t v7 = *(void *)(a1 + 160);
  sub_100005064(__p, "api");
  xpc_object_t v8 = *a3;
  xpc_object_t object = v8;
  if (v8) {
    xpc_retain(v8);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  sub_1000A4498(&object, &v24);
  (*(void (**)(dispatch_object_t *__return_ptr, uint64_t, void **, uint64_t *))(*(void *)v7 + 16LL))( &v28,  v7,  __p,  &v24);
  sub_1000041AC((uint64_t)&v24);
  sub_10000425C(&v25, v24);
  xpc_release(object);
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  char v9 = *(dispatch_queue_s **)(a1 + 24);
  xpc_object_t v10 = *a3;
  if (!*a3)
  {
    xpc_object_t v10 = xpc_null_create();
    if (v6) {
      goto LABEL_16;
    }
LABEL_18:
    xpc_object_t v11 = xpc_null_create();
    goto LABEL_19;
  }

  xpc_retain(*a3);
  if (!v6) {
    goto LABEL_18;
  }
LABEL_16:
  xpc_retain(v6);
  xpc_object_t v11 = v6;
LABEL_19:
  dispatch_group_t v12 = dispatch_group_create();
  xpc_object_t v13 = v12;
  xpc_object_t v14 = (dispatch_group_s *)v28;
  if (v28)
  {
    dispatch_retain(v28);
    dispatch_group_enter(v14);
    if (v13)
    {
      dispatch_retain(v13);
      dispatch_group_enter(v13);
    }

    xpc_object_t v15 = xpc_null_create();
    xpc_object_t v16 = xpc_null_create();
    xpc_object_t v17 = operator new(0x18uLL);
    *xpc_object_t v17 = v13;
    v17[1] = v10;
    xpc_object_t v18 = xpc_null_create();
    v17[2] = v11;
    xpc_object_t v19 = xpc_null_create();
    __p[0] = 0LL;
    dispatch_group_notify_f(v14, v9, v17, (dispatch_function_t)sub_1000824CC);
    sub_100082460((uint64_t *)__p);
    xpc_release(v19);
    xpc_release(v18);
    dispatch_group_leave(v14);
    dispatch_release(v14);
  }

  else
  {
    if (v12)
    {
      dispatch_retain(v12);
      dispatch_group_enter(v13);
    }

    xpc_object_t v15 = xpc_null_create();
    xpc_object_t v16 = xpc_null_create();
    xpc_object_t v20 = operator new(0x18uLL);
    void *v20 = v13;
    v20[1] = v10;
    xpc_object_t v21 = xpc_null_create();
    uint64_t v20[2] = v11;
    xpc_object_t v22 = xpc_null_create();
    __p[0] = 0LL;
    dispatch_async_f(v9, v20, (dispatch_function_t)sub_100082698);
    sub_10008262C((uint64_t *)__p);
    xpc_release(v22);
    xpc_release(v21);
  }

  if (v13) {
    dispatch_release(v13);
  }
  xpc_release(v16);
  xpc_release(v15);
  if (v28) {
    dispatch_release(v28);
  }
LABEL_30:
  xpc_release(v6);
}

void sub_10007DC78( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1000045D0(exception_object);
}

void sub_10007DD40(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + sub_100007004((uint64_t)v1 + 8) = 0LL;
  *(void *)a2 = a2 + 8;
  for (uint64_t i = *(void **)(a1 + 224); i; uint64_t i = (void *)*i)
  {
    uint64_t v4 = (uint64_t *)i[8];
    xpc_object_t v5 = (uint64_t *)i[9];
    while (v4 != v5)
    {
      uint64_t v6 = *v4;
      uint64_t v7 = (std::__shared_weak_count *)v4[1];
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          unint64_t v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }

      xpc_object_t v10 = (const void **)sub_10002DCAC(v6);
      sub_10008270C((uint64_t **)a2, v10, (uint64_t)v10);
      if (v7)
      {
        xpc_object_t v11 = (unint64_t *)&v7->__shared_owners_;
        do
          unint64_t v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }

      v4 += 2;
    }
  }

void sub_10007DE3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *sub_10007DE5C(void *a1)
{
  *a1 = off_10012A3B0;
  a1[4] = off_10012A408;
  a1[5] = off_10012A448;
  sub_100007004((uint64_t)(a1 + 33));
  sub_10007E150(a1 + 32, 0LL);
  sub_10007E17C((uint64_t)(a1 + 26));
  sub_100007004((uint64_t)(a1 + 24));
  sub_100007004((uint64_t)(a1 + 22));
  sub_100007004((uint64_t)(a1 + 20));
  sub_100007004((uint64_t)(a1 + 18));
  sub_100007004((uint64_t)(a1 + 16));
  sub_100007004((uint64_t)(a1 + 14));
  sub_100007004((uint64_t)(a1 + 12));
  sub_100007004((uint64_t)(a1 + 10));
  sub_100007004((uint64_t)(a1 + 8));
  sub_100007004((uint64_t)(a1 + 6));
  sub_100022C54((uint64_t)(a1 + 1));
  return a1;
}

void sub_10007DF08(uint64_t *a1)
{
  *a1 = (uint64_t)off_10012A3B0;
  a1[4] = (uint64_t)off_10012A408;
  a1[5] = (uint64_t)off_10012A448;
  sub_100007004((uint64_t)(a1 + 33));
  sub_10007E150(a1 + 32, 0LL);
  sub_10007E17C((uint64_t)(a1 + 26));
  sub_100007004((uint64_t)(a1 + 24));
  sub_100007004((uint64_t)(a1 + 22));
  sub_100007004((uint64_t)(a1 + 20));
  sub_100007004((uint64_t)(a1 + 18));
  sub_100007004((uint64_t)(a1 + 16));
  sub_100007004((uint64_t)(a1 + 14));
  sub_100007004((uint64_t)(a1 + 12));
  sub_100007004((uint64_t)(a1 + 10));
  sub_100007004((uint64_t)(a1 + 8));
  sub_100007004((uint64_t)(a1 + 6));
  sub_100022C54((uint64_t)(a1 + 1));
  operator delete(a1);
}

uint64_t sub_10007DFB4(void *a1)
{
  *(a1 - 4) = off_10012A3B0;
  *a1 = off_10012A408;
  a1[1] = off_10012A448;
  sub_100007004((uint64_t)(a1 + 29));
  sub_10007E150(a1 + 28, 0LL);
  sub_10007E17C((uint64_t)(a1 + 22));
  sub_100007004((uint64_t)(a1 + 20));
  sub_100007004((uint64_t)(a1 + 18));
  sub_100007004((uint64_t)(a1 + 16));
  sub_100007004((uint64_t)(a1 + 14));
  sub_100007004((uint64_t)(a1 + 12));
  sub_100007004((uint64_t)(a1 + 10));
  sub_100007004((uint64_t)(a1 + 8));
  sub_100007004((uint64_t)(a1 + 6));
  sub_100007004((uint64_t)(a1 + 4));
  sub_100007004((uint64_t)(a1 + 2));
  return sub_100022C54((uint64_t)(a1 - 3));
}

void sub_10007E054(uint64_t a1)
{
}

uint64_t sub_10007E05C(void *a1)
{
  *(a1 - 5) = off_10012A3B0;
  *(a1 - sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = off_10012A408;
  *a1 = off_10012A448;
  sub_100007004((uint64_t)(a1 + 28));
  sub_10007E150(a1 + 27, 0LL);
  sub_10007E17C((uint64_t)(a1 + 21));
  sub_100007004((uint64_t)(a1 + 19));
  sub_100007004((uint64_t)(a1 + 17));
  sub_100007004((uint64_t)(a1 + 15));
  sub_100007004((uint64_t)(a1 + 13));
  sub_100007004((uint64_t)(a1 + 11));
  sub_100007004((uint64_t)(a1 + 9));
  sub_100007004((uint64_t)(a1 + 7));
  sub_100007004((uint64_t)(a1 + 5));
  sub_100007004((uint64_t)(a1 + 3));
  sub_100007004((uint64_t)(a1 + 1));
  return sub_100022C54((uint64_t)(a1 - 4));
}

void sub_10007E100(uint64_t a1)
{
}

void **sub_10007E108(void **a1, void **a2, void *a3)
{
  xpc_object_t v5 = *a2;
  *a1 = *a2;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    *a1 = xpc_null_create();
  }
  a1[1] = a3;
  return a1;
}

void sub_10007E150(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_10006F4A0(v3);
    operator delete(v4);
  }

uint64_t sub_10007E17C(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_10007E1B4(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_10007E1F0((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }

    while (v3);
  }

void sub_10007E1F0(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 48);
  sub_1000100E4(&v2);
  xpc_release(*(xpc_object_t *)a1);
  *(void *)a1 = 0LL;
}

void sub_10007E274(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

uint64_t *sub_10007E280(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = &off_10012A538;
  v4[1] = 0LL;
  void v4[2] = 0LL;
  v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2) {
    xpc_object_t v5 = (void *)(a2 + 8);
  }
  else {
    xpc_object_t v5 = 0LL;
  }
  sub_10000CCC8((uint64_t)a1, v5, a2);
  return a1;
}

void sub_10007E2DC(void *a1)
{
}

void sub_10007E2FC(_Unwind_Exception *a1)
{
}

void sub_10007E314(std::__shared_weak_count *a1)
{
}

void sub_10007E328(uint64_t a1)
{
}

uint64_t sub_10007E33C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

uint64_t sub_10007E37C(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

void sub_10007E390(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void **)(v1 + 8);
  memset(v117, 170, 24);
  *(void *)__int128 buf = *(void *)v1;
  *(void *)&uint8_t buf[8] = "command";
  sub_100077350((uint64_t)buf, &object);
  v117[3] = 0LL;
  v117[4] = 0LL;
  uint64_t v118 = 0LL;
  applesauce::xpc::dyn_cast_or_default(v117, &object, &v117[3]);
  if (SHIBYTE(v118) < 0) {
    operator delete(v117[3]);
  }
  xpc_release(object);
  if ((HIBYTE(v117[2]) & 0x80) != 0)
  {
    switch((unint64_t)v117[1])
    {
      case 7uLL:
LABEL_17:
        sub_10007C270((uint64_t)v2, *(xpc_object_t **)(v1 + 16), *(void *)v1);
        goto LABEL_390;
      case 8uLL:
        unint64_t v9 = *(void **)v117[0];
LABEL_50:
        sub_10007C3E8(v3, *(xpc_connection_t **)(v1 + 16), *(xpc_object_t **)v1);
        goto LABEL_390;
      case 9uLL:
      case 0xAuLL:
      case 0xBuLL:
      case 0xCuLL:
      case 0xDuLL:
      case 0xFuLL:
      case 0x12uLL:
      case 0x13uLL:
      case 0x14uLL:
        break;
      case 0xEuLL:
        goto LABEL_69;
      case 0x10uLL:
        if (*(void *)v117[0] != 0x2D656C6261736964LL || *((void *)v117[0] + 1) != 0x676E696C706D6173LL) {
          break;
        }
LABEL_57:
        xpc_object_t v16 = *(xpc_connection_t **)(v1 + 16);
        xpc_object_t v17 = *(xpc_object_t **)v1;
        xpc_object_t v18 = sub_100005064(&v117[3], "com.apple.private.CoreAnalytics.TransformSampling.manage");
        int v20 = sub_100077394((uint64_t)v18, v16, v17, (uint64_t *)&v117[3]);
        if (SHIBYTE(v118) < 0) {
          operator delete(v117[3]);
        }
        if (!v20) {
          break;
        }
        sub_100078BFC(v2, v19, *(xpc_object_t **)v1);
        goto LABEL_390;
      case 0x11uLL:
        if (*(void *)v117[0] == 0x656C62616E656572LL
          && *((void *)v117[0] + 1) == 0x6E696C706D61732DLL
          && *((_BYTE *)v117[0] + 16) == 103)
        {
LABEL_91:
          xpc_object_t v37 = *(xpc_connection_t **)(v1 + 16);
          uint64_t v38 = *(xpc_object_t **)v1;
          uint64_t v39 = sub_100005064(&v117[3], "com.apple.private.CoreAnalytics.TransformSampling.manage");
          int v41 = sub_100077394((uint64_t)v39, v37, v38, (uint64_t *)&v117[3]);
          if (SHIBYTE(v118) < 0) {
            operator delete(v117[3]);
          }
          if (v41)
          {
            sub_100078F9C(v2, v40, *(xpc_object_t **)v1);
            goto LABEL_390;
          }
        }

        else
        {
LABEL_69:
          xpc_object_t v5 = (void **)v117[0];
LABEL_70:
          xpc_object_t v23 = *v5;
          uint64_t v24 = *(uint64_t *)((char *)v5 + 6);
          if (v23 == (void *)0x2D676E696B736174LL && v24 == 0x796669746F6E2D67LL)
          {
            int v26 = *(xpc_connection_t **)(v1 + 16);
            char v27 = *(xpc_object_t **)v1;
            dispatch_object_t v28 = sub_100005064(&v117[3], "com.apple.private.CoreAnalytics.Tasking.notify");
            int v30 = sub_100077394((uint64_t)v28, v26, v27, (uint64_t *)&v117[3]);
            if (SHIBYTE(v118) < 0) {
              operator delete(v117[3]);
            }
            if (v30)
            {
              sub_10007A3DC((uint64_t)v2, v29, *(xpc_object_t **)v1);
              goto LABEL_390;
            }
          }
        }

        break;
      case 0x15uLL:
        if (*(void *)v117[0] != 0x652D657461657263LL
          || *((void *)v117[0] + 1) != 0x73626F2D746E6576LL
          || *(void *)((char *)v117[0] + 13) != 0x726576726573626FLL)
        {
          break;
        }

LABEL_95:
  unint64_t v42 = *(xpc_connection_t **)(v1 + 16);
  uint64_t v43 = *(xpc_object_t **)v1;
  uint64_t v44 = sub_100005064(&v117[3], "com.apple.private.CoreAnalytics.ManagementCommands.allow");
  uint64_t v45 = sub_100077394((uint64_t)v44, v42, v43, (uint64_t *)&v117[3]);
  char v47 = v45;
  if (SHIBYTE(v118) < 0)
  {
    operator delete(v117[3]);
    if ((v47 & 1) == 0) {
      goto LABEL_390;
    }
  }

  else if ((v45 & 1) == 0)
  {
    goto LABEL_390;
  }

  char v48 = HIBYTE(v117[2]);
  if ((SHIBYTE(v117[2]) & 0x80000000) == 0)
  {
    switch(HIBYTE(v117[2]))
    {
      case 6:
        goto LABEL_101;
      case 8:
LABEL_143:
        if (HIBYTE(v117[2]) == 6) {
          goto LABEL_101;
        }
        if (HIBYTE(v117[2]) == 8) {
          goto LABEL_269;
        }
        goto LABEL_389;
      case 0xA:
        goto LABEL_211;
      case 0xB:
LABEL_148:
        if (v117[0] != (void *)0x6C2D6769666E6F63LL || *(void **)((char *)v117 + 3) != (void *)0x7473696C2D676966LL)
        {
          switch(HIBYTE(v117[2]))
          {
            case 6:
              goto LABEL_101;
            case 8:
              goto LABEL_269;
            case 0xA:
              goto LABEL_211;
            case 0xB:
              if (v117[0] != (void *)0x692D6769666E6F63LL
                || *(void **)((char *)v117 + 3) != (void *)0x6F666E692D676966LL)
              {
                goto LABEL_157;
              }

              goto LABEL_407;
            default:
              goto LABEL_389;
          }
        }

        goto LABEL_163;
      case 0xD:
LABEL_164:
        if (HIBYTE(v117[2]) == 8) {
          goto LABEL_269;
        }
        if (HIBYTE(v117[2]) == 10) {
          goto LABEL_211;
        }
        if (HIBYTE(v117[2]) != 11) {
          goto LABEL_389;
        }
LABEL_171:
        if ((HIBYTE(v117[2]) & 0x80) != 0) {
          goto LABEL_294;
        }
        if (HIBYTE(v117[2]) == 8) {
          goto LABEL_269;
        }
        if (HIBYTE(v117[2]) == 10) {
          goto LABEL_211;
        }
        if (HIBYTE(v117[2]) != 11) {
          goto LABEL_389;
        }
LABEL_204:
        if ((HIBYTE(v117[2]) & 0x80) != 0) {
          goto LABEL_330;
        }
        if (HIBYTE(v117[2]) != 11)
        {
          if (HIBYTE(v117[2]) != 10) {
            goto LABEL_389;
          }
          goto LABEL_211;
        }

        break;
      case 0xE:
LABEL_225:
        if (HIBYTE(v117[2]) != 14) {
          break;
        }
        goto LABEL_260;
      case 0xF:
LABEL_180:
        if (v117[0] != (void *)0x6B7361742D746573LL || *(void **)((char *)v117 + 7) != (void *)0x646C6F2D676E696BLL)
        {
          switch(HIBYTE(v117[2]))
          {
            case 8:
              goto LABEL_269;
            case 0xA:
              goto LABEL_211;
            case 0xB:
              goto LABEL_204;
            case 0xE:
              goto LABEL_225;
            case 0xF:
              goto LABEL_255;
            default:
              goto LABEL_389;
          }
        }

        goto LABEL_396;
      case 0x11:
LABEL_237:
        if (v117[0] == (void *)0x726F66736E617274LL
          && v117[1] == (void *)0x7369737265702D6DLL
          && LOBYTE(v117[2]) == 116)
        {
          goto LABEL_400;
        }

        if (HIBYTE(v117[2]) == 14) {
          goto LABEL_260;
        }
        if (HIBYTE(v117[2]) != 17) {
          goto LABEL_389;
        }
        BOOL v77 = v117[0] == (void *)0x6F6C2D65726F7473LL && v117[1] == (void *)0x666E692D656C6163LL;
        if (!v77 || LOBYTE(v117[2]) != 111) {
          goto LABEL_389;
        }
        goto LABEL_417;
      case 0x12:
LABEL_196:
        if (v117[0] != (void *)0x712D747265736E69LL
          || v117[1] != (void *)0x6174732D79726575LL
          || LOWORD(v117[2]) != 25972)
        {
          switch(HIBYTE(v117[2]))
          {
            case 0xA:
              goto LABEL_211;
            case 0xB:
              goto LABEL_204;
            case 0xE:
              goto LABEL_225;
            case 0xF:
              goto LABEL_255;
            case 0x11:
              goto LABEL_237;
            default:
              goto LABEL_389;
          }
        }

        goto LABEL_399;
      case 0x14:
        if (v117[0] != (void *)0x6E6172742D676F6CLL
          || v117[1] != (void *)0x6F632D6D726F6673LL
          || LODWORD(v117[2]) != 1937010293)
        {
          switch(HIBYTE(v117[2]))
          {
            case 6:
              goto LABEL_101;
            case 8:
              goto LABEL_143;
            case 0xA:
              goto LABEL_211;
            case 0xB:
              goto LABEL_148;
            case 0xD:
              goto LABEL_164;
            case 0xE:
              goto LABEL_225;
            case 0xF:
              goto LABEL_180;
            case 0x11:
              goto LABEL_237;
            case 0x12:
              goto LABEL_196;
            default:
              goto LABEL_389;
          }
        }

        goto LABEL_147;
      case 0x18:
LABEL_217:
        if (v117[0] != (void *)0x6172742D7473696CLL
          || v117[1] != (void *)0x2D736D726F66736ELL
          || v117[2] != (void *)0x65686361632D6E69LL)
        {
          switch(HIBYTE(v117[2]))
          {
            case 0xA:
              goto LABEL_231;
            case 0xE:
              goto LABEL_225;
            case 0xF:
              goto LABEL_255;
            case 0x11:
              goto LABEL_237;
            default:
              goto LABEL_389;
          }
        }

        goto LABEL_401;
      case 0x1D:
        if (v117[0] != (void *)0x61656C632D746573LL
          || v117[1] != (void *)0x6769666E6F632D72LL
          || v117[2] != (void *)0x722D72657466612DLL
          || *(void **)((char *)&v117[2] + 5) != (void *)0x746F6F6265722D72LL)
        {
          switch(HIBYTE(v117[2]))
          {
            case 8:
              goto LABEL_269;
            case 0xA:
              goto LABEL_211;
            case 0xB:
              goto LABEL_204;
            case 0xE:
              goto LABEL_225;
            case 0xF:
LABEL_255:
              if (v117[0] != (void *)0x726F66736E617274LL
                || *(void **)((char *)v117 + 7) != (void *)0x74636976652D6D72LL)
              {
                goto LABEL_259;
              }

              goto LABEL_416;
            case 0x11:
              goto LABEL_237;
            case 0x12:
              goto LABEL_196;
            case 0x18:
              goto LABEL_217;
            default:
              goto LABEL_389;
          }
        }

        goto LABEL_398;
      default:
        goto LABEL_389;
    }

LABEL_230:
    if (HIBYTE(v117[2]) != 10) {
      goto LABEL_389;
    }
LABEL_231:
    if (v117[0] != (void *)0x73752D746E657665LL || LOWORD(v117[1]) != 25701)
    {
      if ((HIBYTE(v117[2]) & 0x80) == 0) {
        goto LABEL_389;
      }
      goto LABEL_363;
    }

    goto LABEL_408;
  }

  unint64_t v50 = v117[1];
  if (v117[1] == (void *)8 && *(void *)v117[0] == 0x706D75642D676F6CLL)
  {
LABEL_134:
    sub_100077678((uint64_t)v2, v46, *(xpc_object_t **)v1);
    goto LABEL_390;
  }

  if (v117[1] == (void *)20)
  {
    if (*(void *)v117[0] == 0x6E6172742D676F6CLL
      && *((void *)v117[0] + 1) == 0x6F632D6D726F6673LL
      && *((_DWORD *)v117[0] + 4) == 1937010293)
    {
LABEL_147:
      sub_100077A54((uint64_t)v2, v46, *(xpc_object_t **)v1);
      goto LABEL_390;
    }

    unint64_t v50 = v117[1];
  }

  if (v50 == (void *)8)
  {
    if (*(void *)v117[0] == 0x676F6C2D65766173LL)
    {
LABEL_144:
      uint64_t v57 = v2[12];
      sub_100005064(&v117[3], "api");
      buf[0] = 0;
      *(void *)&uint8_t buf[8] = 0LL;
      sub_1000041AC((uint64_t)buf);
      sub_1000041AC((uint64_t)buf);
      (*(void (**)(uint64_t, void **, _BYTE *))(*(void *)v57 + 24LL))(v57, &v117[3], buf);
      sub_1000041AC((uint64_t)buf);
      sub_10000425C((uint64_t **)&buf[8], buf[0]);
LABEL_145:
      if (SHIBYTE(v118) < 0) {
        operator delete(v117[3]);
      }
      goto LABEL_390;
    }

    unint64_t v50 = v117[1];
  }

  if (v50 == (void *)11)
  {
    if (*(void *)v117[0] == 0x6C2D6769666E6F63LL && *(void *)((char *)v117[0] + 3) == 0x7473696C2D676966LL)
    {
LABEL_163:
      sub_1000780D4((uint64_t)v2, v46, *(xpc_object_t **)v1);
      goto LABEL_390;
    }

    unint64_t v50 = v117[1];
    if (v117[1] == (void *)11)
    {
      if ((HIBYTE(v117[2]) & 0x80) == 0)
      {
        switch(HIBYTE(v117[2]))
        {
          case 6:
LABEL_101:
            if (LODWORD(v117[0]) == 1835888483 && WORD2(v117[0]) == 29801) {
              goto LABEL_393;
            }
            if ((HIBYTE(v117[2]) & 0x80) != 0) {
              goto LABEL_282;
            }
            goto LABEL_389;
          case 8:
LABEL_269:
            if ((HIBYTE(v117[2]) & 0x80) != 0) {
              goto LABEL_315;
            }
            goto LABEL_389;
          case 0xA:
LABEL_211:
            if ((HIBYTE(v117[2]) & 0x80) != 0) {
              goto LABEL_336;
            }
            goto LABEL_230;
          case 0xB:
LABEL_157:
            if ((HIBYTE(v117[2]) & 0x80) == 0)
            {
              switch(HIBYTE(v117[2]))
              {
                case 6:
                  goto LABEL_101;
                case 8:
                  goto LABEL_269;
                case 0xA:
                  goto LABEL_211;
                case 0xB:
                  goto LABEL_171;
                default:
                  goto LABEL_389;
              }
            }

            goto LABEL_276;
          default:
            goto LABEL_389;
        }
      }

      if (*(void *)v117[0] == 0x642D6769666E6F63LL && *(void *)((char *)v117[0] + 3) == 0x706D75642D676966LL)
      {
LABEL_407:
        sub_10007834C((uint64_t)v2, v46, *(xpc_object_t **)v1);
        goto LABEL_390;
      }

LABEL_276:
      unint64_t v50 = v117[1];
    }
  }

  if (v50 == (void *)6)
  {
    if (*(_DWORD *)v117[0] == 1835888483 && *((_WORD *)v117[0] + 2) == 29801)
    {
LABEL_393:
      sub_100078628((uint64_t)v2, v46, *(xpc_object_t **)v1);
      goto LABEL_390;
    }

LABEL_282:
    unint64_t v50 = v117[1];
  }

  if (v50 == (void *)13)
  {
    if (*(void *)v117[0] == 0x722D6769666E6F63LL && *(void *)((char *)v117[0] + 5) == 0x64616F6C65722D67LL)
    {
LABEL_394:
      sub_100078794(v2, v46, *(xpc_object_t **)v1);
      goto LABEL_390;
    }

    unint64_t v50 = v117[1];
  }

  if (v50 == (void *)11)
  {
    if (*(void *)v117[0] == 0x6B7361742D746573LL && *(void *)((char *)v117[0] + 3) == 0x676E696B7361742DLL)
    {
LABEL_406:
      sub_10007A694(v45, v46, *(xpc_object_t **)v1);
      goto LABEL_390;
    }

LABEL_294:
    unint64_t v50 = v117[1];
  }

  if (v50 == (void *)15)
  {
    if (*(void *)v117[0] == 0x6B7361742D746573LL && *(void *)((char *)v117[0] + 7) == 0x646C6F2D676E696BLL)
    {
LABEL_396:
      sub_100079D94(v45, v46, *(xpc_object_t **)v1);
      goto LABEL_390;
    }

    unint64_t v50 = v117[1];
  }

  if (v50 == (void *)29)
  {
    if (*(void *)v117[0] == 0x61656C632D746573LL
      && *((void *)v117[0] + 1) == 0x6769666E6F632D72LL
      && *((void *)v117[0] + 2) == 0x722D72657466612DLL
      && *(void *)((char *)v117[0] + 21) == 0x746F6F6265722D72LL)
    {
LABEL_398:
      sub_10007AA4C(v45, v46, *(xpc_object_t **)v1);
      goto LABEL_390;
    }

    unint64_t v50 = v117[1];
  }

  if (v50 != (void *)8)
  {
LABEL_316:
    if (v50 == (void *)18)
    {
      if (*(void *)v117[0] == 0x712D747265736E69LL
        && *((void *)v117[0] + 1) == 0x6174732D79726575LL
        && *((_WORD *)v117[0] + 8) == 25972)
      {
LABEL_399:
        sub_10007AB54((uint64_t)v2, *(xpc_connection_t **)(v1 + 16), *(xpc_object_t **)v1);
        goto LABEL_390;
      }

      unint64_t v50 = v117[1];
    }

    if (v50 == (void *)11)
    {
      if (*(void *)v117[0] == 0x74732D7972657571LL && *(void *)((char *)v117[0] + 3) == 0x65746174732D7972LL)
      {
LABEL_415:
        sub_10007B18C((uint64_t)v2, *(xpc_connection_t **)(v1 + 16), *(xpc_object_t **)v1);
        goto LABEL_390;
      }

LABEL_330:
      unint64_t v50 = v117[1];
    }

    if (v50 == (void *)10)
    {
      if (*(void *)v117[0] == 0x696C2D7972657571LL && *((_WORD *)v117[0] + 4) == 29811)
      {
LABEL_395:
        sub_10007B968((uint64_t)v2, v46, *(xpc_object_t **)v1);
        goto LABEL_390;
      }

LABEL_336:
      unint64_t v50 = v117[1];
    }

    if (v50 == (void *)11)
    {
      if (*(void *)v117[0] == 0x6C632D7972657571LL && *(void *)((char *)v117[0] + 3) == 0x7261656C632D7972LL)
      {
LABEL_423:
        sub_10007BDCC((uint64_t)v2, v46, *(xpc_object_t **)v1);
        goto LABEL_390;
      }

      unint64_t v50 = v117[1];
    }

    if (v50 == (void *)24)
    {
      if (*(void *)v117[0] == 0x6172742D7473696CLL
        && *((void *)v117[0] + 1) == 0x2D736D726F66736ELL
        && *((void *)v117[0] + 2) == 0x65686361632D6E69LL)
      {
LABEL_401:
        sub_10007C024((uint64_t)v2, v46, *(xpc_object_t **)v1);
        goto LABEL_390;
      }

      unint64_t v50 = v117[1];
    }

    if (v50 == (void *)14)
    {
      if (*(void *)v117[0] == 0x726F66736E617274LL && *(void *)((char *)v117[0] + 6) == 0x6F666E692D6D726FLL)
      {
LABEL_397:
        sub_10007C4D8((uint64_t)v2, v46, *(xpc_object_t **)v1);
        goto LABEL_390;
      }

      unint64_t v50 = v117[1];
    }

    if (v50 != (void *)10)
    {
LABEL_364:
      if (v50 == (void *)15)
      {
        if (*(void *)v117[0] == 0x726F66736E617274LL && *(void *)((char *)v117[0] + 7) == 0x74636976652D6D72LL)
        {
LABEL_416:
          sub_10007CE50((uint64_t)v2, v46, *(xpc_object_t **)v1);
          goto LABEL_390;
        }

        unint64_t v50 = v117[1];
      }

      if (*(void *)v117[0] == 0x726F66736E617274LL
        && *((void *)v117[0] + 1) == 0x7369737265702D6DLL
        && *((_BYTE *)v117[0] + 16) == 116)
      {
LABEL_400:
        sub_10007CA28((uint64_t)v2, v46, *(xpc_object_t **)v1);
        goto LABEL_390;
      }

      unint64_t v50 = v117[1];
      if (*(void *)v117[0] == 0x6F6C2D65726F7473LL
        && *((void *)v117[0] + 1) == 0x666E692D656C6163LL
        && *((_BYTE *)v117[0] + 16) == 111)
      {
LABEL_417:
        sub_10007CC94(v45, v46, *(xpc_object_t **)v1);
        goto LABEL_390;
      }

      if ((HIBYTE(v117[2]) & 0x80) == 0)
      {
LABEL_259:
        if (HIBYTE(v117[2]) == 14)
        {
LABEL_260:
          __int128 v80 = v117;
          goto LABEL_261;
        }
      }

      else
      {
LABEL_387:
        if (v50 == (void *)14)
        {
          __int128 v80 = (void **)v117[0];
LABEL_261:
          v81 = *v80;
          uint64_t v82 = *(uint64_t *)((char *)v80 + 6);
          if (v81 == (void *)0x676173752D707061LL && v82 == 0x636E79732D656761LL)
          {
            sub_10007D4FC((uint64_t)v2, v46, *(xpc_object_t **)v1);
            goto LABEL_390;
          }
        }
      }

LABEL_389:
      unint64_t v106 = (os_log_s *)qword_100131910;
      if (!os_log_type_enabled((os_log_t)qword_100131910, OS_LOG_TYPE_ERROR)) {
        goto LABEL_390;
      }
      v112 = (void **)v117[0];
      applesauce::xpc::object::to_string(*(applesauce::xpc::object **)v1);
      v113 = v117;
      if (v48 < 0) {
        v113 = v112;
      }
      if (v118 >= 0) {
        v114 = &v117[3];
      }
      else {
        v114 = (void **)v117[3];
      }
      *(_DWORD *)__int128 buf = 136315394;
      *(void *)&uint8_t buf[4] = v113;
      *(_WORD *)&_BYTE buf[12] = 2080;
      *(void *)&buf[14] = v114;
      _os_log_error_impl( (void *)&_mh_execute_header,  v106,  OS_LOG_TYPE_ERROR,  "[ClientManager] ERROR: Unrecognized command: %s (message=%s)",  buf,  0x16u);
      goto LABEL_145;
    }

    if (*(void *)v117[0] != 0x73752D746E657665LL || *((_WORD *)v117[0] + 4) != 25701)
    {
LABEL_363:
      unint64_t v50 = v117[1];
      goto LABEL_364;
    }

LABEL_408:
    sub_10007C7B4((uint64_t)v2, v46, *(xpc_object_t **)v1);
    goto LABEL_390;
  }

  if (*(void *)v117[0] != 0x7265766F6C6C6F72LL)
  {
LABEL_315:
    unint64_t v50 = v117[1];
    goto LABEL_316;
  }

LABEL_402:
  v107 = *(xpc_connection_t **)(v1 + 16);
  unint64_t v108 = *(xpc_object_t **)v1;
  v109 = sub_100005064(&v117[3], "com.apple.private.CoreAnalytics.RolloverEvents.allow");
  int v111 = sub_100077394((uint64_t)v109, v107, v108, (uint64_t *)&v117[3]);
  if (SHIBYTE(v118) < 0) {
    operator delete(v117[3]);
  }
  if (v111) {
    sub_10007D950((uint64_t)v2, v110, *(xpc_object_t **)v1);
  }
LABEL_390:
  if (SHIBYTE(v117[2]) < 0) {
    operator delete(v117[0]);
  }
}

void sub_10007F7D8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22, char a23)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_10007F898(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(v1 + 8);
  string = xpc_dictionary_get_string(**(xpc_object_t **)v1, "com.apple.message.domain");
  uint64_t v4 = (char *)string;
  if (string && ((xpc_object_t v5 = *(uint64_t **)(v2 + 264)) == 0LL || (v6 = strlen(string), (sub_1000516B0(v5, v4, v6) & 1) != 0)))
  {
    unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
    xpc_object_t v15 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    sub_10003D690(**(void ***)v1, (uint64_t)&v14);
    memset(__p, 170, 24);
    sub_100006200((uint64_t)&v14, -1, 0x20u, 0LL, 0, __p);
    if (os_log_type_enabled((os_log_t)qword_100131908, OS_LOG_TYPE_DEBUG)) {
      sub_1000DDE08();
    }
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = *(void *)(v2 + 48);
    if (v7)
    {
      sub_100005064(__p, v4);
      sub_1000723B4((__int128 *)__p, (uint64_t)&v14, &v12);
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v7 + 16LL))(v7, &v12);
      int v8 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          unint64_t v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }

      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
    }

    else if (os_log_type_enabled((os_log_t)qword_1001318F8, OS_LOG_TYPE_ERROR))
    {
      sub_1000DDDA8();
    }

    sub_1000041AC((uint64_t)&v14);
    sub_10000425C(&v15, v14);
  }

  else
  {
    xpc_object_t v11 = (os_log_s *)qword_1001318F8;
    if (os_log_type_enabled((os_log_t)qword_1001318F8, OS_LOG_TYPE_INFO))
    {
      LODWORD(__p[0]) = 136446210;
      *(void **)((char *)__p + 4) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "[MT Shim] Dropping %{public}s as it isn't used in any transform (not in the config or budgeted?)",  (uint8_t *)__p,  0xCu);
    }
  }

void sub_10007FAC0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, std::__shared_weak_count *a11, int a12, __int16 a13, char a14, char a15, unsigned __int8 a16, uint64_t a17, void *__p, int a19, __int16 a20, uint64_t a21, char a22, char a23, uint64_t a24)
{
  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      unint64_t v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }

  if (SHIBYTE(a21) < 0) {
    operator delete(__p);
  }
  sub_1000041AC((uint64_t)&a16);
  sub_10000425C((uint64_t **)&a17, a16);
  _Unwind_Resume(a1);
}

void sub_10007FC40(char **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)*a1;
  uint64_t v4 = *(uint64_t **)(v3 + 264);
  if (v4 && (size_t v5 = strlen(v2 + 16), (sub_1000516B0(v4, v2 + 16, v5) & 1) != 0))
  {
    unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
    xpc_object_t v16 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    sub_10003D3B0((uint64_t)(v2 + 8), &v15);
    uint64_t v6 = *(void *)(v3 + 48);
    if (v6) {
      BOOL v7 = v15 == 1;
    }
    else {
      BOOL v7 = 0;
    }
    if (v7)
    {
      int v8 = (os_log_s *)qword_100131908;
      if (os_log_type_enabled((os_log_t)qword_100131908, OS_LOG_TYPE_DEBUG))
      {
        sub_100006200((uint64_t)&v15, -1, 0x20u, 0LL, 1, __p);
        if (v14 >= 0) {
          uint64_t v12 = __p;
        }
        else {
          uint64_t v12 = (void **)__p[0];
        }
        *(_DWORD *)__int128 buf = 136315394;
        *(void *)xpc_object_t v18 = v2 + 16;
        *(_WORD *)&v18[8] = 2080;
        *(void *)&v18[10] = v12;
        _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%s %s", buf, 0x16u);
        if (v14 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v6 = *(void *)(v3 + 48);
      }

      sub_100005064(__p, v2 + 16);
      sub_1000723B4((__int128 *)__p, (uint64_t)&v15, buf);
      (*(void (**)(uint64_t, uint8_t *))(*(void *)v6 + 16LL))(v6, buf);
      unint64_t v9 = *(std::__shared_weak_count **)&v18[4];
      if (*(void *)&v18[4])
      {
        unint64_t v10 = (unint64_t *)(*(void *)&v18[4] + 8LL);
        do
          unint64_t v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }

      if (v14 < 0) {
        operator delete(__p[0]);
      }
    }

    else if (os_log_type_enabled((os_log_t)qword_1001318F8, OS_LOG_TYPE_ERROR))
    {
      sub_1000DDF04();
    }

    sub_1000041AC((uint64_t)&v15);
    sub_10000425C(&v16, v15);
  }

  else if (os_log_type_enabled((os_log_t)qword_1001318F8, OS_LOG_TYPE_DEBUG))
  {
    sub_1000DDE94();
  }

  operator delete(v2);
  sub_100007004((uint64_t)(a1 + 1));
  operator delete(a1);
}

void sub_10007FE9C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, unsigned __int8 a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
}

void sub_10007FF44(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t v3 = *v1;
  uint64_t v2 = (void **)v1[1];
  uint64_t v4 = *v1 + 208;
  size_t v5 = (void *)(*(void *)(*v1 + 248) + 1LL);
  *(void *)(*v1 + 24sub_100007004((uint64_t)v19 + 8) = v5;
  xpc_object_t v11 = v5;
  LOBYTE(v12) = 0;
  char v14 = 0;
  memset(v15, 0, sizeof(v15));
  sub_100080594((uint64_t)&object, v2, (uint64_t *)&v11);
  sub_1000801E0(v4, &object, (uint64_t)&object);
  char v7 = v6;
  unint64_t v10 = (void **)&v21;
  sub_1000100E4(&v10);
  if (v20 && v19 < 0) {
    operator delete(__p);
  }
  xpc_release(object);
  xpc_object_t object = 0LL;
  unint64_t v10 = v15;
  sub_1000100E4(&v10);
  if (v14 && v13 < 0) {
    operator delete(v12);
  }
  if (v7)
  {
    if (*(_BYTE *)v1[2])
    {
      xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
      xpc_object_t object = xpc_null_create();
      unint64_t v17 = 0LL;
      unint64_t v9 = *(void **)(v3 + 264);
      if (v9)
      {
        sub_100051844(v9, (uint64_t)&v11);
        sub_10008018C((uint64_t)&object, &v11);
        xpc_release(v11);
      }

      sub_10007D0BC((uint64_t)v9, (xpc_connection_t *)v1[1], v8, (uint64_t)&object);
      xpc_release(object);
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_100131910, OS_LOG_TYPE_ERROR))
  {
    sub_1000DDF64();
  }

void sub_1000800DC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21, xpc_object_t object, uint64_t a23, void *__p, uint64_t a25, int a26, __int16 a27, char a28, char a29, char a30)
{
}

uint64_t sub_10008018C(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v4 = *a2;
  *a2 = xpc_null_create();
  size_t v5 = *(void **)a1;
  *(void *)a1 = v4;
  xpc_release(v5);
  *(void *)(a1 + sub_100007004((uint64_t)v19 + 8) = a2[1];
  return a1;
}

uint64_t **sub_1000801E0(uint64_t a1, xpc_object_t *a2, uint64_t a3)
{
  unint64_t v5 = 0x9DDFEA08EB382D69LL * ((8 * *a2 + 8LL) ^ ((unint64_t)*a2 >> 32));
  unint64_t v6 = (0x9DDFEA08EB382D69LL * (((unint64_t)*a2 >> 32) ^ (v5 >> 47) ^ v5)) ^ ((0x9DDFEA08EB382D69LL
                                                                                    * (((unint64_t)*a2 >> 32) ^ (v5 >> 47) ^ v5)) >> 47);
  unint64_t v7 = 0x9DDFEA08EB382D69LL * v6;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v12 = 0x9DDFEA08EB382D69LL * v6;
      if (v7 >= v8) {
        unint64_t v12 = v7 % v8;
      }
    }

    else
    {
      unint64_t v12 = v7 & (v8 - 1);
    }

    char v13 = *(uint64_t ****)(*(void *)a1 + 8 * v12);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = (uint64_t **)*i)
      {
        unint64_t v15 = (unint64_t)i[1];
        if (v15 == v7)
        {
          if (xpc_equal(i[2], *a2)) {
            return i;
          }
        }

        else
        {
          if (v11 > 1)
          {
            if (v15 >= v8) {
              v15 %= v8;
            }
          }

          else
          {
            v15 &= v8 - 1;
          }

          if (v15 != v12) {
            break;
          }
        }
      }
    }
  }

  else
  {
    unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  }

  unint64_t v27 = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v16 = operator new(0x58uLL);
  v26[0] = v16;
  v26[1] = a1 + 16;
  void *v16 = 0LL;
  v16[1] = v7;
  sub_1000804BC((uint64_t)(v16 + 2), a3);
  LOBYTE(v27) = 1;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v18 = *(float *)(a1 + 32);
  if (!v8 || (float)(v18 * (float)v8) < v17)
  {
    BOOL v19 = 1LL;
    if (v8 >= 3) {
      BOOL v19 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v8);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_10002246C(a1, v22);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v12 = v7 % v8;
      }
      else {
        unint64_t v12 = v7;
      }
    }

    else
    {
      unint64_t v12 = (v8 - 1) & v7;
    }
  }

  xpc_object_t v23 = *(void **)(*(void *)a1 + 8 * v12);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *xpc_object_t v23 = v26[0];
  }

  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v12) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8LL);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v24 >= v8) {
          v24 %= v8;
        }
      }

      else
      {
        v24 &= v8 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }

  uint64_t i = (uint64_t **)v26[0];
  v26[0] = 0LL;
  ++*(void *)(a1 + 24);
  sub_100080550((uint64_t)v26, 0LL);
  return i;
}

void sub_1000804A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1000804BC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)a2 = xpc_null_create();
  uint64_t v4 = *(void *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = 0;
  *(void *)(a1 + sub_100007004((uint64_t)v19 + 8) = v4;
  *(_BYTE *)(a1 + 40) = 0;
  if (*(_BYTE *)(a2 + 40))
  {
    __int128 v5 = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = v5;
    *(void *)(a2 + 24) = 0LL;
    *(void *)(a2 + 32) = 0LL;
    *(void *)(a2 + 16) = 0LL;
    *(_BYTE *)(a1 + 40) = 1;
  }

  *(void *)(a1 + 4sub_100007004((uint64_t)v19 + 8) = 0LL;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  *(_OWORD *)(a1 + 4sub_100007004((uint64_t)v19 + 8) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 4sub_100007004((uint64_t)v19 + 8) = 0LL;
  *(void *)(a2 + 56) = 0LL;
  *(void *)(a2 + 64) = 0LL;
  return a1;
}

void sub_100080550(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_10007E1F0((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }

uint64_t sub_100080594(uint64_t a1, void **a2, uint64_t *a3)
{
  __int128 v5 = *a2;
  *(void *)a1 = *a2;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    *(void *)a1 = xpc_null_create();
  }
  uint64_t v6 = *a3;
  *(_BYTE *)(a1 + 16) = 0;
  *(void *)(a1 + sub_100007004((uint64_t)v19 + 8) = v6;
  *(_BYTE *)(a1 + 40) = 0;
  if (*((_BYTE *)a3 + 32))
  {
    __int128 v7 = *(_OWORD *)(a3 + 1);
    *(void *)(a1 + 32) = a3[3];
    *(_OWORD *)(a1 + 16) = v7;
    a3[2] = 0LL;
    a3[3] = 0LL;
    a3[1] = 0LL;
    *(_BYTE *)(a1 + 40) = 1;
  }

  *(void *)(a1 + 4sub_100007004((uint64_t)v19 + 8) = 0LL;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  *(_OWORD *)(a1 + 4sub_100007004((uint64_t)v19 + 8) = *(_OWORD *)(a3 + 5);
  *(void *)(a1 + 64) = a3[7];
  a3[5] = 0LL;
  a3[6] = 0LL;
  a3[7] = 0LL;
  return a1;
}

uint64_t **sub_100080634(void *a1, xpc_object_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0LL;
  }
  unint64_t v4 = 0x9DDFEA08EB382D69LL * ((8 * *a2 + 8LL) ^ ((unint64_t)*a2 >> 32));
  unint64_t v5 = 0x9DDFEA08EB382D69LL
     * ((0x9DDFEA08EB382D69LL * (((unint64_t)*a2 >> 32) ^ (v4 >> 47) ^ v4)) ^ ((0x9DDFEA08EB382D69LL
                                                                                     * (((unint64_t)*a2 >> 32) ^ (v4 >> 47) ^ v4)) >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  unint64_t v7 = v6.u32[0];
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v8 = 0x9DDFEA08EB382D69LL
       * ((0x9DDFEA08EB382D69LL * (((unint64_t)*a2 >> 32) ^ (v4 >> 47) ^ v4)) ^ ((0x9DDFEA08EB382D69LL
                                                                                       * (((unint64_t)*a2 >> 32) ^ (v4 >> 47) ^ v4)) >> 47));
    if (v5 >= *(void *)&v2) {
      unint64_t v8 = v5 % *(void *)&v2;
    }
  }

  else
  {
    unint64_t v8 = v5 & (*(void *)&v2 - 1LL);
  }

  unint64_t v9 = *(uint64_t ****)(*a1 + 8 * v8);
  if (!v9) {
    return 0LL;
  }
  for (uint64_t i = *v9; i; uint64_t i = (uint64_t **)*i)
  {
    unint64_t v11 = (unint64_t)i[1];
    if (v11 == v5)
    {
      if (xpc_equal(i[2], *a2)) {
        return i;
      }
    }

    else
    {
      if (v7 > 1)
      {
        if (v11 >= *(void *)&v2) {
          v11 %= *(void *)&v2;
        }
      }

      else
      {
        v11 &= *(void *)&v2 - 1LL;
      }

      if (v11 != v8) {
        return 0LL;
      }
    }
  }

  return i;
}

void sub_100080758(uint64_t a1)
{
  uint64_t v1 = *(xpc_object_t ***)(a1 + 40);
  int8x8_t v2 = *v1;
  uint64_t v3 = *v1 + 26;
  unint64_t v4 = sub_100080634(v3, v1[1]);
  if (v4)
  {
    unint64_t v5 = v4;
    uint8x8_t v6 = v4[8];
    unint64_t v7 = v4[9];
    while (v6 != v7)
    {
      uint64_t v8 = *v6;
      unint64_t v9 = (std::__shared_weak_count *)v6[1];
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          unint64_t v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
        xpc_object_t v12 = v2[8];
        p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
        do
          unint64_t v14 = __ldxr(p_shared_weak_owners);
        while (__stxr(v14 + 1, p_shared_weak_owners));
      }

      else
      {
        xpc_object_t v12 = v2[8];
      }

      uint64_t v18 = v8;
      BOOL v19 = v9;
      uint64_t v15 = sub_10002DCAC(v8);
      (*(void (**)(xpc_object_t, uint64_t *, uint64_t))(*(void *)v12 + 24LL))(v12, &v18, v15);
      if (v19) {
        std::__shared_weak_count::__release_weak(v19);
      }
      if (v9)
      {
        xpc_object_t v16 = (unint64_t *)&v9->__shared_owners_;
        do
          unint64_t v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }

      v6 += 2;
    }

    sub_10002D708(v3, v5, (uint64_t)v20);
    sub_100080550((uint64_t)v20, 0LL);
  }

void sub_1000808A4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_weak(a10);
  }
  sub_1000DDFBC(v10 == 0LL, v10);
  _Unwind_Resume(a1);
}

void sub_1000808D4(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_1000808D4(a1, *(void *)a2);
    sub_1000808D4(a1, *((void *)a2 + 1));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }

void sub_100080924(void **a1)
{
  unint64_t v17 = *a1;
  int8x8_t v2 = (void *)*v17;
  if (*(void *)(*v17 + 176LL))
  {
    sub_10007E150(v2 + 32, 0LL);
    uint64_t v3 = v2[22];
    sub_10007DD40((uint64_t)v2, (uint64_t)&__p);
    sub_10006F364(v3, (uint64_t)&__p, (uint64_t *)&object);
    uint64_t v4 = object.__r_.__value_.__r.__words[0];
    object.__r_.__value_.__r.__words[0] = 0LL;
    sub_10007E150(v2 + 32, v4);
    uint64_t v5 = object.__r_.__value_.__r.__words[0];
    object.__r_.__value_.__r.__words[0] = 0LL;
    if (v5)
    {
      uint8x8_t v6 = (void *)sub_10006F4A0(v5);
      operator delete(v6);
    }

    sub_1000808D4((uint64_t)&__p, (char *)__p.__r_.__value_.__l.__size_);
    if (v2[32])
    {
      sub_100041348(&object);
      else {
        std::string __p = object;
      }
      sub_100051500((uint64_t)&__p, (uint64_t **)buf);
      unint64_t v7 = (void **)(v2 + 33);
      sub_100005894((uint64_t)(v2 + 33), (__int128 *)buf);
      uint64_t v8 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8])
      {
        unint64_t v9 = (unint64_t *)(*(void *)&buf[8] + 8LL);
        do
          unint64_t v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }

      unint64_t v11 = *v7;
      if (*v7)
      {
        object.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
        object.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
        sub_100051844(v11, (uint64_t)&object);
        xpc_object_t v12 = (os_log_s *)qword_100131928;
        BOOL v13 = os_log_type_enabled((os_log_t)qword_100131928, OS_LOG_TYPE_DEFAULT);
        if (v13)
        {
          uint64_t v15 = v2[29];
          *(_DWORD *)__int128 buf = 134217984;
          *(void *)&uint8_t buf[4] = v15;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "[ClientManager Reconfigure] Posting configuration to %zd clients",  buf,  0xCu);
        }

        for (uint64_t i = v2 + 28; ; sub_10007D0BC(v13, (xpc_connection_t *)i + 2, v14, (uint64_t)&object))
        {
          uint64_t i = (void *)*i;
          if (!i) {
            break;
          }
        }

        xpc_release(object.__r_.__value_.__l.__data_);
      }

      else if (os_log_type_enabled((os_log_t)qword_100131928, OS_LOG_TYPE_ERROR))
      {
        sub_1000DE0BC();
      }
    }

    else if (os_log_type_enabled((os_log_t)qword_100131928, OS_LOG_TYPE_ERROR))
    {
      sub_1000DE064();
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_100131928, OS_LOG_TYPE_ERROR)) {
      sub_1000DE00C();
    }
    sub_10007E150(v2 + 32, 0LL);
  }

  sub_100025588(&v17);
  sub_100007004((uint64_t)(a1 + 1));
  operator delete(a1);
}

void sub_100080BD8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_100025588((void **)&a9);
  sub_100007004((uint64_t)v21 + 8);
  operator delete(v21);
  _Unwind_Resume(a1);
}

void sub_100080C70(uint64_t *a1)
{
  uint64_t v2 = *a1;
  sub_10007D314(*(void *)v2, (uint64_t **)(v2 + 8), v2 + 16);
  sub_100080D10(&v2);
  sub_100007004((uint64_t)(a1 + 1));
  operator delete(a1);
}

void sub_100080CEC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_100080D10(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0LL;
  if (v2)
  {
    uint64_t v3 = *(dispatch_group_s **)(v2 + 32);
    if (v3)
    {
      dispatch_group_leave(v3);
      uint64_t v4 = *(dispatch_object_s **)(v2 + 32);
      if (v4) {
        dispatch_release(v4);
      }
    }

    sub_1000041AC(v2 + 16);
    sub_10000425C((uint64_t **)(v2 + 24), *(unsigned __int8 *)(v2 + 16));
    operator delete((void *)v2);
  }

  return a1;
}

void *sub_100080D78(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_10012A618;
  result[1] = v3;
  return result;
}

uint64_t sub_100080DAC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10012A618;
  a2[1] = v2;
  return result;
}

void sub_100080DC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  sub_100053D30(a2, (uint64_t)v3);
  sub_100080EB8(v2, (uint64_t)v3);
  sub_1000041AC((uint64_t)v3);
  sub_10000425C(&v4, v3[0]);
}

void sub_100080E48( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
}

uint64_t sub_100080E70(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void (**sub_100080EAC())(std::__shared_weak_count *__hidden this, const std::type_info *)
{
}

uint64_t sub_100080EB8(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)a1)
  {
    if (*(_BYTE *)a1 != 2)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      uint64_t v10 = (char *)sub_10000528C((char *)a1);
      sub_100005064(&v13, v10);
      unint64_t v11 = std::string::insert(&v13, 0LL, "cannot use emplace_back() with ");
      __int128 v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      std::string::size_type cap = v11->__r_.__value_.__l.__cap_;
      __int128 v14 = v12;
      v11->__r_.__value_.__l.__size_ = 0LL;
      v11->__r_.__value_.__l.__cap_ = 0LL;
      v11->__r_.__value_.__r.__words[0] = 0LL;
      sub_100005128(311, (uint64_t)&v14, exception);
    }
  }

  else
  {
    *(_BYTE *)a1 = 2;
    uint64_t v4 = operator new(0x18uLL);
    v4[1] = 0LL;
    void v4[2] = 0LL;
    *uint64_t v4 = 0LL;
    *(void *)(a1 + sub_100007004((uint64_t)v9 + 8) = v4;
    sub_1000041AC(a1);
  }

  uint64_t v5 = *(uint64_t **)(a1 + 8);
  unint64_t v6 = v5[1];
  if (v6 >= v5[2])
  {
    uint64_t v7 = sub_1000587D0(v5, a2);
  }

  else
  {
    *(_BYTE *)unint64_t v6 = *(_BYTE *)a2;
    *(void *)(v6 + sub_100007004((uint64_t)v9 + 8) = *(void *)(a2 + 8);
    sub_1000041AC(a2);
    *(_BYTE *)a2 = 0;
    *(void *)(a2 + sub_100007004((uint64_t)v9 + 8) = 0LL;
    sub_1000041AC(v6);
    uint64_t v7 = v6 + 16;
  }

  v5[1] = v7;
  return v7 - 16;
}

void sub_100081020( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }

  else if (!v22)
  {
    goto LABEL_8;
  }

  __cxa_free_exception(v21);
  goto LABEL_8;
}

__n128 sub_100081088(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &off_10012A698;
  *(_OWORD *)(v2 + sub_100007004((uint64_t)v9 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1000810C8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10012A698;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + sub_100007004((uint64_t)v9 + 8) = result;
  return result;
}

void sub_1000810F0( void **a1, uint64_t a2, uint64_t a3, unsigned int *a4, unsigned int *a5, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *a6)
{
  uint64_t v9 = *a4;
  uint64_t v10 = *a5;
  *a1[1] += v10;
  *a1[2] += v9;
  unint64_t v11 = a1[3];
  sub_10002BBB0((uint64_t)v40, "uuid");
  int v41 = v40;
  char v42 = 1;
  uint64_t v44 = sub_10000B990((uint64_t)v43, a3);
  char v45 = 1;
  sub_10000BA40((uint64_t)v46, (uint64_t)v40, 2LL, 1, 2);
  char v47 = v46;
  char v48 = 1;
  sub_10004A4C4((uint64_t)v34, "events");
  uint64_t v35 = v34;
  char v36 = 1;
  v37[0] = 6;
  v38[0] = v10;
  sub_1000041AC((uint64_t)v37);
  sub_1000041AC((uint64_t)v37);
  v38[1] = v37;
  char v39 = 1;
  sub_10000BA40((uint64_t)v49, (uint64_t)v34, 2LL, 1, 2);
  v49[2] = v49;
  char v50 = 1;
  sub_100050F04((uint64_t)v28, "budgetUsed");
  uint64_t v29 = v28;
  char v30 = 1;
  v31[0] = 6;
  v32[0] = v9;
  sub_1000041AC((uint64_t)v31);
  sub_1000041AC((uint64_t)v31);
  v32[1] = v31;
  char v33 = 1;
  sub_10000BA40((uint64_t)v51, (uint64_t)v28, 2LL, 1, 2);
  _OWORD v51[2] = v51;
  char v52 = 1;
  sub_100017A54((uint64_t)v22, "createdAt");
  xpc_object_t v23 = v22;
  char v24 = 1;
  sub_10003DB6C(*a6, *a1[4], &__p);
  uint64_t v26 = sub_100008E5C((uint64_t)v25, (uint64_t)&__p);
  char v27 = 1;
  sub_10000BA40((uint64_t)v53, (uint64_t)v22, 2LL, 1, 2);
  uint64_t v54 = v53;
  char v55 = 1;
  sub_10000BA40((uint64_t)v20, (uint64_t)v46, 4LL, 1, 2);
  unint64_t v12 = v11[1];
  if (v12 >= v11[2])
  {
    uint64_t v13 = sub_100004B7C(v11, (uint64_t)v20);
  }

  else
  {
    *(_BYTE *)unint64_t v12 = v20[0];
    *(void *)(v12 + sub_100007004((uint64_t)v9 + 8) = v21;
    sub_1000041AC((uint64_t)v20);
    v20[0] = 0;
    unint64_t v21 = 0LL;
    sub_1000041AC(v12);
    uint64_t v13 = v12 + 16;
  }

  v11[1] = v13;
  sub_1000041AC((uint64_t)v20);
  sub_10000425C(&v21, v20[0]);
  for (uint64_t i = 0LL; i != -128; i -= 32LL)
  {
    sub_1000041AC((uint64_t)&v53[i]);
    sub_10000425C((uint64_t **)&v53[i + 8], v53[i]);
  }

  for (uint64_t j = 0LL; j != -64; j -= 32LL)
  {
    sub_1000041AC((uint64_t)&v25[j]);
    sub_10000425C((uint64_t **)&v25[j + 8], v25[j]);
  }

  for (uint64_t k = 0LL; k != -8; k -= 4LL)
  {
    sub_1000041AC((uint64_t)&v31[k * 8]);
    sub_10000425C((uint64_t **)&v32[k], v31[k * 8]);
  }

  for (uint64_t m = 0LL; m != -8; m -= 4LL)
  {
    sub_1000041AC((uint64_t)&v37[m * 8]);
    sub_10000425C((uint64_t **)&v38[m], v37[m * 8]);
  }

  for (uint64_t n = 0LL; n != -64; n -= 32LL)
  {
    sub_1000041AC((uint64_t)&v43[n]);
    sub_10000425C((uint64_t **)&v43[n + 8], v43[n]);
  }

void sub_1000814A8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, unsigned __int8 a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, char a41)
{
  uint64_t v44 = 0LL;
  uint64_t v45 = v42 - 216;
  do
  {
    sub_1000041AC(v45 + v44 + 96);
    sub_10000425C((uint64_t **)(v45 + v44 + 104), *(unsigned __int8 *)(v45 + v44 + 96));
    v44 -= 32LL;
  }

  while (v44 != -128);
  for (uint64_t i = 0LL; i != -64; i -= 32LL)
  {
    sub_1000041AC((uint64_t)&a21 + i);
    sub_10000425C((uint64_t **)((char *)&a22 + i), *((unsigned __int8 *)&a21 + i));
  }

  if (a14 < 0) {
    operator delete(__p);
  }
  for (uint64_t j = 0LL; j != -64; j -= 32LL)
  {
    sub_1000041AC((uint64_t)&a29 + j);
    sub_10000425C((uint64_t **)((char *)&a30 + j), *((unsigned __int8 *)&a29 + j));
  }

  for (uint64_t k = 0LL; k != -64; k -= 32LL)
  {
    sub_1000041AC((uint64_t)&a37 + k);
    sub_10000425C((uint64_t **)((char *)&a38 + k), *((unsigned __int8 *)&a37 + k));
  }

  for (uint64_t m = 0LL; m != -64; m -= 32LL)
  {
    sub_1000041AC((uint64_t)(&a41 + m + 32));
    sub_10000425C((uint64_t **)(&a41 + m + 40), *(&a41 + m + 32));
  }

  _Unwind_Resume(a1);
}

void sub_100081660()
{
}

void sub_10008166C()
{
}

void sub_10008167C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, unsigned __int8 a38, uint64_t *a39)
{
}

void sub_10008169C()
{
}

uint64_t sub_1000816A4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void (**sub_1000816E0())(std::__shared_weak_count *__hidden this, const std::type_info *)
{
}

dispatch_group_t **sub_1000816EC(dispatch_group_t **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0LL;
  if (v2)
  {
    if (*v2)
    {
      dispatch_group_leave(*v2);
      if (*v2) {
        dispatch_release(*v2);
      }
    }

    operator delete(v2);
  }

  return a1;
}

dispatch_group_t **sub_100081738(uint64_t a1)
{
  uint64_t v3 = (dispatch_group_t *)a1;
  dispatch_object_t object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  sub_1000AB754(*(void **)(*(void *)(a1 + 8) + 128LL), (dispatch_group_t *)&object);
  sub_10003A820((dispatch_object_t *)a1, (dispatch_group_s **)&object);
  if (object) {
    dispatch_release(object);
  }
  return sub_1000816EC(&v3);
}

void sub_1000817C0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_group_t *a10, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  sub_1000816EC(&a10);
  _Unwind_Resume(a1);
}

dispatch_group_t **sub_1000817E8(uint64_t a1)
{
  uint64_t v3 = (dispatch_group_t *)a1;
  dispatch_object_t object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  sub_1000AB754(*(void **)(*(void *)(a1 + 8) + 128LL), (dispatch_group_t *)&object);
  sub_10003A820((dispatch_object_t *)a1, (dispatch_group_s **)&object);
  if (object) {
    dispatch_release(object);
  }
  return sub_1000816EC(&v3);
}

void sub_100081870( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_group_t *a10, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  sub_1000816EC(&a10);
  _Unwind_Resume(a1);
}

dispatch_group_t **sub_100081898(uint64_t a1)
{
  uint64_t v3 = (dispatch_group_t *)a1;
  dispatch_object_t object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  sub_1000AB0E0(*(void **)(*(void *)(a1 + 8) + 128LL), (dispatch_group_t *)&object);
  sub_10003A820((dispatch_object_t *)a1, (dispatch_group_s **)&object);
  if (object) {
    dispatch_release(object);
  }
  return sub_1000816EC(&v3);
}

void sub_100081920( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_group_t *a10, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  sub_1000816EC(&a10);
  _Unwind_Resume(a1);
}

dispatch_group_t **sub_100081948(uint64_t a1)
{
  uint64_t v3 = (dispatch_group_t *)a1;
  dispatch_object_t object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  sub_1000AB0E0(*(void **)(*(void *)(a1 + 8) + 128LL), (dispatch_group_t *)&object);
  sub_10003A820((dispatch_object_t *)a1, (dispatch_group_s **)&object);
  if (object) {
    dispatch_release(object);
  }
  return sub_1000816EC(&v3);
}

void sub_1000819D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_group_t *a10, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  sub_1000816EC(&a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000819F8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0LL;
  if (v2)
  {
    xpc_release(*(xpc_object_t *)(v2 + 16));
    *(void *)(v2 + 16) = 0LL;
    xpc_release(*(xpc_object_t *)(v2 + 8));
    *(void *)(v2 + sub_100007004((uint64_t)v9 + 8) = 0LL;
    if (*(void *)v2)
    {
      dispatch_group_leave(*(dispatch_group_t *)v2);
      if (*(void *)v2) {
        dispatch_release(*(dispatch_object_t *)v2);
      }
    }

    operator delete((void *)v2);
  }

  return a1;
}

uint64_t *sub_100081A64(uint64_t a1)
{
  uint64_t v4 = a1;
  if (xpc_get_type(*(xpc_object_t *)(a1 + 16)) == (xpc_type_t)&_xpc_type_dictionary)
  {
    remote_connectiouint64_t n = xpc_dictionary_get_remote_connection(*(xpc_object_t *)(a1 + 16));
    xpc_connection_send_message(remote_connection, *(xpc_object_t *)(a1 + 16));
  }

  return sub_1000819F8(&v4);
}

void sub_100081AE8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_100081AFC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0LL;
  if (v2)
  {
    xpc_release(*(xpc_object_t *)(v2 + 16));
    *(void *)(v2 + 16) = 0LL;
    xpc_release(*(xpc_object_t *)(v2 + 8));
    *(void *)(v2 + sub_100007004((uint64_t)v9 + 8) = 0LL;
    if (*(void *)v2)
    {
      dispatch_group_leave(*(dispatch_group_t *)v2);
      if (*(void *)v2) {
        dispatch_release(*(dispatch_object_t *)v2);
      }
    }

    operator delete((void *)v2);
  }

  return a1;
}

uint64_t *sub_100081B68(uint64_t a1)
{
  uint64_t v4 = a1;
  if (xpc_get_type(*(xpc_object_t *)(a1 + 16)) == (xpc_type_t)&_xpc_type_dictionary)
  {
    remote_connectiouint64_t n = xpc_dictionary_get_remote_connection(*(xpc_object_t *)(a1 + 16));
    xpc_connection_send_message(remote_connection, *(xpc_object_t *)(a1 + 16));
  }

  return sub_100081AFC(&v4);
}

void sub_100081BEC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_100081C00(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0LL;
  if (v2)
  {
    xpc_release(*(xpc_object_t *)(v2 + 16));
    *(void *)(v2 + 16) = 0LL;
    xpc_release(*(xpc_object_t *)(v2 + 8));
    *(void *)(v2 + sub_100007004((uint64_t)v9 + 8) = 0LL;
    if (*(void *)v2)
    {
      dispatch_group_leave(*(dispatch_group_t *)v2);
      if (*(void *)v2) {
        dispatch_release(*(dispatch_object_t *)v2);
      }
    }

    operator delete((void *)v2);
  }

  return a1;
}

uint64_t *sub_100081C6C(uint64_t a1)
{
  uint64_t v2 = a1;
  sub_100081CE0(a1 + 8);
  return sub_100081C00(&v2);
}

void sub_100081CCC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100081CE0(uint64_t a1)
{
  uint64_t v1 = (xpc_object_t *)(a1 + 8);
  if (xpc_get_type(*(xpc_object_t *)(a1 + 8)) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_object_t v4 = xpc_BOOL_create(1);
    if (!v4) {
      xpc_object_t v4 = xpc_null_create();
    }
    v3[0] = v1;
    v3[1] = "disable-sampling";
    sub_100077630((uint64_t)v3, &v4, &object);
    xpc_release(object);
    xpc_object_t object = 0LL;
    xpc_release(v4);
    xpc_object_t v4 = 0LL;
    remote_connectiouint64_t n = xpc_dictionary_get_remote_connection(*v1);
    xpc_connection_send_message(remote_connection, *v1);
  }

void sub_100081DA4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_100081DC8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0LL;
  if (v2)
  {
    xpc_release(*(xpc_object_t *)(v2 + 16));
    *(void *)(v2 + 16) = 0LL;
    xpc_release(*(xpc_object_t *)(v2 + 8));
    *(void *)(v2 + sub_100007004((uint64_t)v9 + 8) = 0LL;
    if (*(void *)v2)
    {
      dispatch_group_leave(*(dispatch_group_t *)v2);
      if (*(void *)v2) {
        dispatch_release(*(dispatch_object_t *)v2);
      }
    }

    operator delete((void *)v2);
  }

  return a1;
}

uint64_t *sub_100081E34(uint64_t a1)
{
  uint64_t v2 = a1;
  sub_100081CE0(a1 + 8);
  return sub_100081DC8(&v2);
}

void sub_100081E94( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_100081EA8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0LL;
  if (v2)
  {
    xpc_release(*(xpc_object_t *)(v2 + 16));
    *(void *)(v2 + 16) = 0LL;
    xpc_release(*(xpc_object_t *)(v2 + 8));
    *(void *)(v2 + sub_100007004((uint64_t)v9 + 8) = 0LL;
    if (*(void *)v2)
    {
      dispatch_group_leave(*(dispatch_group_t *)v2);
      if (*(void *)v2) {
        dispatch_release(*(dispatch_object_t *)v2);
      }
    }

    operator delete((void *)v2);
  }

  return a1;
}

uint64_t *sub_100081F14(uint64_t a1)
{
  uint64_t v2 = a1;
  sub_100081F88(a1 + 8);
  return sub_100081EA8(&v2);
}

void sub_100081F74( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100081F88(uint64_t a1)
{
  uint64_t v1 = (xpc_object_t *)(a1 + 8);
  if (xpc_get_type(*(xpc_object_t *)(a1 + 8)) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_object_t v4 = xpc_BOOL_create(1);
    if (!v4) {
      xpc_object_t v4 = xpc_null_create();
    }
    v3[0] = v1;
    v3[1] = "reenable-sampling";
    sub_100077630((uint64_t)v3, &v4, &object);
    xpc_release(object);
    xpc_object_t object = 0LL;
    xpc_release(v4);
    xpc_object_t v4 = 0LL;
    remote_connectiouint64_t n = xpc_dictionary_get_remote_connection(*v1);
    xpc_connection_send_message(remote_connection, *v1);
  }

void sub_10008204C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_100082070(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0LL;
  if (v2)
  {
    xpc_release(*(xpc_object_t *)(v2 + 16));
    *(void *)(v2 + 16) = 0LL;
    xpc_release(*(xpc_object_t *)(v2 + 8));
    *(void *)(v2 + sub_100007004((uint64_t)v9 + 8) = 0LL;
    if (*(void *)v2)
    {
      dispatch_group_leave(*(dispatch_group_t *)v2);
      if (*(void *)v2) {
        dispatch_release(*(dispatch_object_t *)v2);
      }
    }

    operator delete((void *)v2);
  }

  return a1;
}

uint64_t *sub_1000820DC(uint64_t a1)
{
  uint64_t v2 = a1;
  sub_100081F88(a1 + 8);
  return sub_100082070(&v2);
}

void sub_10008213C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100082150(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_1000047F4(v7, v9);
  }
  else {
    uint64_t v10 = 0LL;
  }
  uint64_t v13 = v10;
  __int128 v14 = &v10[16 * v4];
  xpc_object_t v16 = &v10[16 * v9];
  sub_10000B990((uint64_t)v14, a2);
  uint64_t v15 = v14 + 16;
  sub_10000470C(a1, &v13);
  uint64_t v11 = a1[1];
  sub_100004A50((uint64_t)&v13);
  return v11;
}

void sub_100082254( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_100082268(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = operator new(0x18uLL);
  uint64_t v5 = *a1;
  uint64_t v6 = *a2;
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((*a2 - *a1) >> 3);
  v4[1] = 0LL;
  void v4[2] = 0LL;
  *uint64_t v4 = 0LL;
  sub_1000822DC(v4, v5, v6, v7);
  return v4;
}

void sub_1000822C8(_Unwind_Exception *a1)
{
}

void *sub_1000822DC(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_10000C194(result, a4);
    __n128 result = (void *)sub_100082390((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }

  return result;
}

void sub_100082370(_Unwind_Exception *a1, uint64_t a2, ...)
{
  *(void *)(v2 + sub_100007004((uint64_t)v9 + 8) = v3;
  sub_100004D64((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100082390(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v8 = a4;
  uint64_t v9 = a4;
  v10[0] = a1;
  v10[1] = &v8;
  void v10[2] = &v9;
  unint64_t v11 = 0xAAAAAAAAAAAAAA00LL;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_10000B990(v4, v6);
      v6 += 24LL;
      uint64_t v4 = v9 + 16;
      v9 += 16LL;
    }

    while (v6 != a3);
  }

  LOBYTE(sub_1000226A0(v12, v11) = 1;
  sub_10000C348((uint64_t)v10);
  return v4;
}

void sub_10008244C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t *sub_100082460(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0LL;
  if (v2)
  {
    xpc_release(*(xpc_object_t *)(v2 + 16));
    *(void *)(v2 + 16) = 0LL;
    xpc_release(*(xpc_object_t *)(v2 + 8));
    *(void *)(v2 + sub_100007004((uint64_t)v9 + 8) = 0LL;
    if (*(void *)v2)
    {
      dispatch_group_leave(*(dispatch_group_t *)v2);
      if (*(void *)v2) {
        dispatch_release(*(dispatch_object_t *)v2);
      }
    }

    operator delete((void *)v2);
  }

  return a1;
}

uint64_t *sub_1000824CC(uint64_t a1)
{
  uint64_t v2 = a1;
  sub_100082540((xpc_object_t *)(a1 + 8));
  return sub_100082460(&v2);
}

void sub_10008252C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100082540(xpc_object_t *a1)
{
  uint64_t v2 = a1 + 1;
  if (xpc_get_type(a1[1]) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_object_t v5 = xpc_BOOL_create(1);
    if (!v5) {
      xpc_object_t v5 = xpc_null_create();
    }
    v4[0] = v2;
    v4[1] = "rollover";
    sub_100077630((uint64_t)v4, &v5, &object);
    xpc_release(object);
    xpc_object_t object = 0LL;
    xpc_release(v5);
    xpc_object_t v5 = 0LL;
    remote_connectiouint64_t n = xpc_dictionary_get_remote_connection(*a1);
    xpc_connection_send_message(remote_connection, a1[1]);
  }

void sub_100082608(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_10008262C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0LL;
  if (v2)
  {
    xpc_release(*(xpc_object_t *)(v2 + 16));
    *(void *)(v2 + 16) = 0LL;
    xpc_release(*(xpc_object_t *)(v2 + 8));
    *(void *)(v2 + sub_100007004((uint64_t)v9 + 8) = 0LL;
    if (*(void *)v2)
    {
      dispatch_group_leave(*(dispatch_group_t *)v2);
      if (*(void *)v2) {
        dispatch_release(*(dispatch_object_t *)v2);
      }
    }

    operator delete((void *)v2);
  }

  return a1;
}

uint64_t *sub_100082698(uint64_t a1)
{
  uint64_t v2 = a1;
  sub_100082540((xpc_object_t *)(a1 + 8));
  return sub_10008262C(&v2);
}

void sub_1000826F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_10008270C(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v5 = (uint64_t **)sub_1000053B0((uint64_t)a1, &v7, a2);
  __n128 result = *v5;
  if (!*v5)
  {
    memset(v8, 170, sizeof(v8));
    sub_1000827C0((uint64_t)a1, a3, v8);
    sub_1000054D0(a1, v7, v5, v8[0]);
    return v8[0];
  }

  return result;
}

void *sub_1000827C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  memset(a3, 170, 24);
  uint64_t v6 = (char *)operator new(0x38uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  __n128 result = v6 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    __n128 result = sub_10000B8BC(result, *(void **)a2, *(void *)(a2 + 8));
  }

  else
  {
    *(_OWORD *)__n128 result = *(_OWORD *)a2;
    result[2] = *(void *)(a2 + 16);
  }

  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_100082850(_Unwind_Exception *a1)
{
  void *v1 = 0LL;
  sub_10008286C(v2, v3);
  _Unwind_Resume(a1);
}

void sub_10008286C(uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
  }

  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t sub_1000828B8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = operator new(0x40uLL);
  sub_100082974(v2);
  uint64_t v4 = v2;
  sub_100084850(a1, (uint64_t *)&v4);
  uint64_t result = (uint64_t)v4;
  uint64_t v4 = 0LL;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

void sub_100082940( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8LL))(a9);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100082974(void *a1)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_10012A728;
  a1[3] = sub_1000438EC();
  a1[7] = 0LL;
  return a1;
}

void sub_1000829B0(_Unwind_Exception *a1)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  nullsub_4(v1);
  _Unwind_Resume(a1);
}

void sub_1000829D0(uint64_t a1@<X8>)
{
  unint64_t v63 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v64 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_100092418((uint64_t)"cadence", &v63);
  if (v63 != 1)
  {
LABEL_102:
    *(_OWORD *)(a1 + 105) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 4sub_100007004((uint64_t)v9 + 8) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 12sub_100007004((uint64_t)v9 + 8) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    *(_OWORD *)(a1 + 192) = 0u;
    goto LABEL_144;
  }

  v70 = "bootToken";
  unint64_t v73 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__int128 buf = v2;
  __int128 v72 = v2;
  sub_100008780((uint64_t)&v63, &v70, (uint64_t)buf);
  uint64_t v65 = (unsigned __int8 *)&v63;
  uint64_t v66 = 0LL;
  uint64_t v67 = 0LL;
  uint64_t v68 = 0LL;
  unint64_t v69 = 0x8000000000000000LL;
  sub_100008AC8(&v65);
  if (!sub_1000087E8((unsigned __int8 **)buf, &v65))
  {
    uint64_t v3 = sub_100008924((unsigned __int8 **)buf);
LABEL_6:
    goto LABEL_7;
  }

  uint64_t v3 = (unsigned __int8 *)sub_10009AE9C();
  if (v3) {
    goto LABEL_6;
  }
LABEL_7:
  uint64_t v3 = 0LL;
LABEL_8:
  v70 = "lastSubmission";
  unint64_t v73 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__int128 buf = v4;
  __int128 v72 = v4;
  sub_100008780((uint64_t)&v63, &v70, (uint64_t)buf);
  uint64_t v65 = (unsigned __int8 *)&v63;
  uint64_t v66 = 0LL;
  uint64_t v67 = 0LL;
  uint64_t v68 = 0LL;
  unint64_t v69 = 0x8000000000000000LL;
  sub_100008AC8(&v65);
  if (!sub_1000087E8((unsigned __int8 **)buf, &v65))
  {
    uint64_t v5 = sub_100008924((unsigned __int8 **)buf);
LABEL_12:
    goto LABEL_13;
  }

  uint64_t v5 = (unsigned __int8 *)sub_10009AE9C();
  if (v5) {
    goto LABEL_12;
  }
LABEL_13:
  uint64_t v5 = 0LL;
LABEL_14:
  uint64_t v62 = v5;
  v70 = "nextSubmission";
  unint64_t v73 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__int128 buf = v6;
  __int128 v72 = v6;
  sub_100008780((uint64_t)&v63, &v70, (uint64_t)buf);
  uint64_t v65 = (unsigned __int8 *)&v63;
  uint64_t v66 = 0LL;
  uint64_t v67 = 0LL;
  uint64_t v68 = 0LL;
  unint64_t v69 = 0x8000000000000000LL;
  sub_100008AC8(&v65);
  if (!sub_1000087E8((unsigned __int8 **)buf, &v65))
  {
    uint64_t v7 = sub_100008924((unsigned __int8 **)buf);
LABEL_18:
    goto LABEL_19;
  }

  uint64_t v7 = (unsigned __int8 *)sub_10009AE9C();
  if (v7) {
    goto LABEL_18;
  }
LABEL_19:
  uint64_t v7 = 0LL;
LABEL_20:
  unint64_t v61 = v7;
  v70 = "rolloverContainsPartialData";
  unint64_t v73 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__int128 buf = v8;
  __int128 v72 = v8;
  sub_100008780((uint64_t)&v63, &v70, (uint64_t)buf);
  uint64_t v65 = (unsigned __int8 *)&v63;
  uint64_t v66 = 0LL;
  uint64_t v67 = 0LL;
  uint64_t v68 = 0LL;
  unint64_t v69 = 0x8000000000000000LL;
  sub_100008AC8(&v65);
  if (sub_1000087E8((unsigned __int8 **)buf, &v65))
  {
    uint64_t v9 = (unsigned __int8 *)sub_10009AE9C();
    if (!v9)
    {
      v60 = 0LL;
      goto LABEL_28;
    }
  }

  else
  {
    uint64_t v9 = sub_100008924((unsigned __int8 **)buf);
  }

  int v11 = *v9;
  uint64_t v10 = v9 + 8;
  if (v11 == 4) {
    unint64_t v12 = v10;
  }
  else {
    unint64_t v12 = 0LL;
  }
  v60 = v12;
LABEL_28:
  v70 = "osVersion";
  unint64_t v73 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v13 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v13 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__int128 buf = v13;
  __int128 v72 = v13;
  sub_100008780((uint64_t)&v63, &v70, (uint64_t)buf);
  uint64_t v65 = (unsigned __int8 *)&v63;
  uint64_t v66 = 0LL;
  uint64_t v67 = 0LL;
  uint64_t v68 = 0LL;
  unint64_t v69 = 0x8000000000000000LL;
  sub_100008AC8(&v65);
  if (sub_1000087E8((unsigned __int8 **)buf, &v65))
  {
    uint64_t v14 = sub_10009AE9C();
    if (!v14) {
      goto LABEL_34;
    }
  }

  else
  {
    uint64_t v14 = (uint64_t)sub_100008924((unsigned __int8 **)buf);
  }

  if (*(_BYTE *)v14 == 3)
  {
    uint64_t v15 = *(__int128 **)(v14 + 8);
    goto LABEL_35;
  }

LABEL_55:
  uint64_t v59 = 0LL;
LABEL_56:
  v70 = "lastOSChangeDaySeen";
  unint64_t v73 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v24 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v24 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__int128 buf = v24;
  __int128 v72 = v24;
  sub_100008780((uint64_t)&v63, &v70, (uint64_t)buf);
  uint64_t v65 = (unsigned __int8 *)&v63;
  uint64_t v66 = 0LL;
  uint64_t v67 = 0LL;
  uint64_t v68 = 0LL;
  unint64_t v69 = 0x8000000000000000LL;
  sub_100008AC8(&v65);
  if (!sub_1000087E8((unsigned __int8 **)buf, &v65))
  {
    uint64_t v25 = sub_100008924((unsigned __int8 **)buf);
LABEL_60:
    goto LABEL_61;
  }

  uint64_t v25 = (unsigned __int8 *)sub_10009AE9C();
  if (v25) {
    goto LABEL_60;
  }
LABEL_61:
  uint64_t v25 = 0LL;
LABEL_62:
  v70 = "lastDailyDaySeen";
  unint64_t v73 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v26 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v26 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__int128 buf = v26;
  __int128 v72 = v26;
  sub_100008780((uint64_t)&v63, &v70, (uint64_t)buf);
  uint64_t v65 = (unsigned __int8 *)&v63;
  uint64_t v66 = 0LL;
  uint64_t v67 = 0LL;
  uint64_t v68 = 0LL;
  unint64_t v69 = 0x8000000000000000LL;
  sub_100008AC8(&v65);
  if (!sub_1000087E8((unsigned __int8 **)buf, &v65))
  {
    char v27 = sub_100008924((unsigned __int8 **)buf);
LABEL_66:
    goto LABEL_67;
  }

  char v27 = (unsigned __int8 *)sub_10009AE9C();
  if (v27) {
    goto LABEL_66;
  }
LABEL_67:
  char v27 = 0LL;
LABEL_68:
  v70 = "last91stDaySeen";
  unint64_t v73 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v28 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v28 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__int128 buf = v28;
  __int128 v72 = v28;
  sub_100008780((uint64_t)&v63, &v70, (uint64_t)buf);
  uint64_t v65 = (unsigned __int8 *)&v63;
  uint64_t v66 = 0LL;
  uint64_t v67 = 0LL;
  uint64_t v68 = 0LL;
  unint64_t v69 = 0x8000000000000000LL;
  sub_100008AC8(&v65);
  if (!sub_1000087E8((unsigned __int8 **)buf, &v65))
  {
    uint64_t v29 = sub_100008924((unsigned __int8 **)buf);
LABEL_72:
    goto LABEL_73;
  }

  uint64_t v29 = (unsigned __int8 *)sub_10009AE9C();
  if (v29) {
    goto LABEL_72;
  }
LABEL_73:
  uint64_t v29 = 0LL;
LABEL_74:
  v70 = "Daily";
  unint64_t v73 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v30 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v30 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__int128 buf = v30;
  __int128 v72 = v30;
  sub_100008780((uint64_t)&v63, &v70, (uint64_t)buf);
  uint64_t v65 = (unsigned __int8 *)&v63;
  uint64_t v66 = 0LL;
  uint64_t v67 = 0LL;
  uint64_t v68 = 0LL;
  unint64_t v69 = 0x8000000000000000LL;
  sub_100008AC8(&v65);
  __int128 v58 = v27;
  if (sub_1000087E8((unsigned __int8 **)buf, &v65))
  {
    uint64_t v31 = sub_10009AE9C();
    if (!v31) {
      goto LABEL_80;
    }
  }

  else
  {
    uint64_t v31 = (uint64_t)sub_100008924((unsigned __int8 **)buf);
  }

  if (*(_BYTE *)v31 == 3)
  {
    uint64_t v32 = *(__int128 **)(v31 + 8);
    goto LABEL_81;
  }

LABEL_80:
  uint64_t v32 = 0LL;
LABEL_81:
  v70 = "90Day";
  unint64_t v73 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v33 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v33 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__int128 buf = v33;
  __int128 v72 = v33;
  sub_100008780((uint64_t)&v63, &v70, (uint64_t)buf);
  uint64_t v65 = (unsigned __int8 *)&v63;
  uint64_t v66 = 0LL;
  uint64_t v67 = 0LL;
  uint64_t v68 = 0LL;
  unint64_t v69 = 0x8000000000000000LL;
  sub_100008AC8(&v65);
  if (sub_1000087E8((unsigned __int8 **)buf, &v65))
  {
    uint64_t v34 = sub_10009AE9C();
    uint64_t v35 = v25;
    if (!v34)
    {
      char v36 = v21;
      goto LABEL_87;
    }
  }

  else
  {
    uint64_t v34 = (uint64_t)sub_100008924((unsigned __int8 **)buf);
    uint64_t v35 = v25;
  }

  char v36 = v21;
  if (*(_BYTE *)v34 == 3)
  {
    xpc_object_t v37 = v18;
    uint64_t v38 = *(__int128 **)(v34 + 8);
    goto LABEL_88;
  }

void sub_100083514( _Unwind_Exception *a1, uint64_t a2, void **a3, void **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  if (v9[151] < 0) {
    operator delete(*v10);
  }
  if (v9[103] < 0) {
    operator delete(*v12);
  }
  if (v9[79] < 0) {
    operator delete(*v11);
  }
  if (v9[55] < 0) {
    operator delete(*a3);
  }
  if (v9[31] < 0) {
    operator delete(*a4);
  }
  sub_10000417C((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_100083608(uint64_t a1, uint64_t a2)
{
  unint64_t v84 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v85 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10000BA40((uint64_t)&v84, 0LL, 0LL, 0, 1);
  v82[0] = 5;
  uint64_t v83 = 1LL;
  sub_1000041AC((uint64_t)v82);
  sub_1000041AC((uint64_t)v82);
  uint64_t v3 = sub_100003F94((unsigned __int8 *)&v84, "version");
  sub_1000041AC((uint64_t)v82);
  unsigned __int8 v4 = *(_BYTE *)v3;
  *(_BYTE *)uint64_t v3 = v82[0];
  v82[0] = v4;
  uint64_t v5 = (uint64_t *)v3[1];
  v3[1] = v83;
  uint64_t v83 = (uint64_t)v5;
  sub_1000041AC((uint64_t)v3);
  sub_1000041AC((uint64_t)v82);
  sub_10000425C((uint64_t **)&v83, v82[0]);
  __int128 v6 = *(uint64_t **)a2;
  v80[0] = 5;
  v81 = v6;
  sub_1000041AC((uint64_t)v80);
  sub_1000041AC((uint64_t)v80);
  uint64_t v7 = sub_100003F94((unsigned __int8 *)&v84, "bootToken");
  sub_1000041AC((uint64_t)v80);
  unsigned __int8 v8 = *(_BYTE *)v7;
  *(_BYTE *)uint64_t v7 = v80[0];
  v80[0] = v8;
  uint64_t v9 = (uint64_t *)v7[1];
  v7[1] = (uint64_t)v81;
  v81 = v9;
  sub_1000041AC((uint64_t)v7);
  sub_1000041AC((uint64_t)v80);
  sub_10000425C(&v81, v80[0]);
  sub_10000B990((uint64_t)v78, a2 + 8);
  uint64_t v10 = sub_100003F94((unsigned __int8 *)&v84, "osVersion");
  sub_1000041AC((uint64_t)v78);
  char v11 = *(_BYTE *)v10;
  *(_BYTE *)uint64_t v10 = v78[0];
  v78[0] = v11;
  unint64_t v12 = (uint64_t *)v10[1];
  v10[1] = (uint64_t)v79;
  uint64_t v79 = v12;
  sub_1000041AC((uint64_t)v10);
  sub_1000041AC((uint64_t)v78);
  sub_10000425C(&v79, v78[0]);
  sub_10000B990((uint64_t)v76, a2 + 32);
  __int128 v13 = sub_100003F94((unsigned __int8 *)&v84, "lastOSVersion");
  sub_1000041AC((uint64_t)v76);
  char v14 = *(_BYTE *)v13;
  *(_BYTE *)__int128 v13 = v76[0];
  v76[0] = v14;
  uint64_t v15 = (uint64_t *)v13[1];
  v13[1] = (uint64_t)v77;
  BOOL v77 = v15;
  sub_1000041AC((uint64_t)v13);
  sub_1000041AC((uint64_t)v76);
  sub_10000425C(&v77, v76[0]);
  sub_10000B990((uint64_t)v74, a2 + 56);
  __int128 v16 = sub_100003F94((unsigned __int8 *)&v84, "osProductNameWithVersion");
  sub_1000041AC((uint64_t)v74);
  char v17 = *(_BYTE *)v16;
  *(_BYTE *)__int128 v16 = v74[0];
  v74[0] = v17;
  uint64_t v18 = (uint64_t *)v16[1];
  v16[1] = (uint64_t)v75;
  uint64_t v75 = v18;
  sub_1000041AC((uint64_t)v16);
  sub_1000041AC((uint64_t)v74);
  sub_10000425C(&v75, v74[0]);
  sub_10000B990((uint64_t)v72, a2 + 80);
  __int128 v19 = sub_100003F94((unsigned __int8 *)&v84, "lastOSProductNameWithVersion");
  sub_1000041AC((uint64_t)v72);
  char v20 = *(_BYTE *)v19;
  *(_BYTE *)__int128 v19 = v72[0];
  v72[0] = v20;
  unint64_t v21 = (uint64_t *)v19[1];
  v19[1] = (uint64_t)v73;
  unint64_t v73 = v21;
  sub_1000041AC((uint64_t)v19);
  sub_1000041AC((uint64_t)v72);
  sub_10000425C(&v73, v72[0]);
  v70[0] = 5;
  v71 = (uint64_t *)std::chrono::system_clock::to_time_t((const std::chrono::system_clock::time_point *)(a2 + 104));
  sub_1000041AC((uint64_t)v70);
  sub_1000041AC((uint64_t)v70);
  __int128 v22 = sub_100003F94((unsigned __int8 *)&v84, "lastSubmission");
  sub_1000041AC((uint64_t)v70);
  unsigned __int8 v23 = *(_BYTE *)v22;
  *(_BYTE *)__int128 v22 = v70[0];
  v70[0] = v23;
  __int128 v24 = (uint64_t *)v22[1];
  v22[1] = (uint64_t)v71;
  v71 = v24;
  sub_1000041AC((uint64_t)v22);
  sub_1000041AC((uint64_t)v70);
  sub_10000425C(&v71, v70[0]);
  v68[0] = 5;
  unint64_t v69 = (uint64_t *)std::chrono::system_clock::to_time_t((const std::chrono::system_clock::time_point *)(a2 + 112));
  sub_1000041AC((uint64_t)v68);
  sub_1000041AC((uint64_t)v68);
  uint64_t v25 = sub_100003F94((unsigned __int8 *)&v84, "nextSubmission");
  sub_1000041AC((uint64_t)v68);
  unsigned __int8 v26 = *(_BYTE *)v25;
  *(_BYTE *)uint64_t v25 = v68[0];
  v68[0] = v26;
  char v27 = (uint64_t *)v25[1];
  v25[1] = (uint64_t)v69;
  unint64_t v69 = v27;
  sub_1000041AC((uint64_t)v25);
  sub_1000041AC((uint64_t)v68);
  sub_10000425C(&v69, v68[0]);
  __int128 v28 = (uint64_t *)*(unsigned __int8 *)(a2 + 120);
  v66[0] = 4;
  uint64_t v67 = v28;
  sub_1000041AC((uint64_t)v66);
  sub_1000041AC((uint64_t)v66);
  uint64_t v29 = sub_100003F94((unsigned __int8 *)&v84, "rolloverContainsPartialData");
  sub_1000041AC((uint64_t)v66);
  unsigned __int8 v30 = *(_BYTE *)v29;
  *(_BYTE *)uint64_t v29 = v66[0];
  v66[0] = v30;
  uint64_t v31 = (uint64_t *)v29[1];
  v29[1] = (uint64_t)v67;
  uint64_t v67 = v31;
  sub_1000041AC((uint64_t)v29);
  sub_1000041AC((uint64_t)v66);
  sub_10000425C(&v67, v66[0]);
  sub_10000B990((uint64_t)v64, a2 + 128);
  uint64_t v32 = sub_100003F94((unsigned __int8 *)&v84, "Daily");
  sub_1000041AC((uint64_t)v64);
  char v33 = *(_BYTE *)v32;
  *(_BYTE *)uint64_t v32 = v64[0];
  v64[0] = v33;
  uint64_t v34 = (uint64_t *)v32[1];
  v32[1] = (uint64_t)v65;
  uint64_t v65 = v34;
  sub_1000041AC((uint64_t)v32);
  sub_1000041AC((uint64_t)v64);
  sub_10000425C(&v65, v64[0]);
  sub_10000B990((uint64_t)v62, a2 + 152);
  uint64_t v35 = sub_100003F94((unsigned __int8 *)&v84, "90Day");
  sub_1000041AC((uint64_t)v62);
  char v36 = *(_BYTE *)v35;
  *(_BYTE *)uint64_t v35 = v62[0];
  v62[0] = v36;
  xpc_object_t v37 = (uint64_t *)v35[1];
  v35[1] = (uint64_t)v63;
  unint64_t v63 = v37;
  sub_1000041AC((uint64_t)v35);
  sub_1000041AC((uint64_t)v62);
  sub_10000425C(&v63, v62[0]);
  uint64_t v38 = *(uint64_t **)(a2 + 184);
  v60[0] = 5;
  unint64_t v61 = v38;
  sub_1000041AC((uint64_t)v60);
  sub_1000041AC((uint64_t)v60);
  __int128 v39 = sub_100003F94((unsigned __int8 *)&v84, "lastDailyDaySeen");
  sub_1000041AC((uint64_t)v60);
  unsigned __int8 v40 = *(_BYTE *)v39;
  *(_BYTE *)__int128 v39 = v60[0];
  v60[0] = v40;
  __int128 v41 = (uint64_t *)v39[1];
  v39[1] = (uint64_t)v61;
  unint64_t v61 = v41;
  sub_1000041AC((uint64_t)v39);
  sub_1000041AC((uint64_t)v60);
  sub_10000425C(&v61, v60[0]);
  uint64_t v42 = *(uint64_t **)(a2 + 176);
  v58[0] = 5;
  uint64_t v59 = v42;
  sub_1000041AC((uint64_t)v58);
  sub_1000041AC((uint64_t)v58);
  uint64_t v43 = sub_100003F94((unsigned __int8 *)&v84, "last91stDaySeen");
  sub_1000041AC((uint64_t)v58);
  unsigned __int8 v44 = *(_BYTE *)v43;
  *(_BYTE *)uint64_t v43 = v58[0];
  v58[0] = v44;
  uint64_t v45 = (uint64_t *)v43[1];
  v43[1] = (uint64_t)v59;
  uint64_t v59 = v45;
  sub_1000041AC((uint64_t)v43);
  sub_1000041AC((uint64_t)v58);
  sub_10000425C(&v59, v58[0]);
  int v46 = *(uint64_t **)(a2 + 192);
  v56[0] = 5;
  uint64_t v57 = v46;
  sub_1000041AC((uint64_t)v56);
  sub_1000041AC((uint64_t)v56);
  char v47 = sub_100003F94((unsigned __int8 *)&v84, "lastOSChangeDaySeen");
  sub_1000041AC((uint64_t)v56);
  unsigned __int8 v48 = *(_BYTE *)v47;
  *(_BYTE *)char v47 = v56[0];
  v56[0] = v48;
  __int128 v49 = (uint64_t *)v47[1];
  v47[1] = (uint64_t)v57;
  uint64_t v57 = v49;
  sub_1000041AC((uint64_t)v47);
  sub_1000041AC((uint64_t)v56);
  sub_10000425C(&v57, v56[0]);
  BOOL v50 = *(uint64_t **)(a2 + 200);
  v54[0] = 5;
  uint64_t v55 = v50;
  sub_1000041AC((uint64_t)v54);
  sub_1000041AC((uint64_t)v54);
  __int128 v51 = sub_100003F94((unsigned __int8 *)&v84, "pastDueLegacy");
  sub_1000041AC((uint64_t)v54);
  unsigned __int8 v52 = *(_BYTE *)v51;
  *(_BYTE *)__int128 v51 = v54[0];
  v54[0] = v52;
  __int128 v53 = (uint64_t *)v51[1];
  v51[1] = (uint64_t)v55;
  uint64_t v55 = v53;
  sub_1000041AC((uint64_t)v51);
  sub_1000041AC((uint64_t)v54);
  sub_10000425C(&v55, v54[0]);
  sub_1000925D8((uint64_t)"cadence", (uint64_t)&v84);
  sub_1000041AC((uint64_t)&v84);
  sub_10000425C(&v85, v84);
}

void sub_100083DA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100083E78(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

std::chrono::system_clock::time_point sub_100083E84()
{
  result.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  if (result.__d_.__rep_ % 86400000000LL > 0) {
    return (std::chrono::system_clock::time_point)(result.__d_.__rep_
  }
                                                 + 86400000000LL
                                                 - result.__d_.__rep_ % 86400000000LL);
  return result;
}

void sub_100083ED4(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4 = handler;
  uint64_t v3 = (std::__shared_weak_count *)v23;
  if (v23)
  {
    uint64_t v5 = (unint64_t *)(v23 + 16);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  uint64_t v9 = (os_log_s *)qword_1001318E8;
  if (os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_DEBUG)) {
    sub_1000DE114(v9);
  }
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 1174405120LL;
  uint64_t v20[2] = sub_1000841D0;
  v20[3] = &unk_10012A768;
  v20[4] = v4;
  unint64_t v21 = v3;
  if (v3)
  {
    p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
    do
      unint64_t v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
  }

  handler = _NSConcreteStackBlock;
  uint64_t v23 = 0x40000000LL;
  __int128 v24 = sub_100084574;
  uint64_t v25 = &unk_10012A848;
  char v27 = "com.apple.CoreAnalytics.2Hours";
  uint64_t v28 = 7200LL;
  unsigned __int8 v26 = v20;
  xpc_activity_register("com.apple.CoreAnalytics.2Hours", XPC_ACTIVITY_CHECK_IN, &handler);
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 1174405120LL;
  v18[2] = sub_1000842E0;
  v18[3] = &unk_10012A798;
  v18[4] = v4;
  __int128 v19 = v3;
  if (v3)
  {
    unint64_t v12 = (unint64_t *)&v3->__shared_weak_owners_;
    do
      unint64_t v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }

  handler = _NSConcreteStackBlock;
  uint64_t v23 = 0x40000000LL;
  __int128 v24 = sub_100084574;
  uint64_t v25 = &unk_10012A848;
  char v27 = "com.apple.CoreAnalytics.6Hours";
  uint64_t v28 = 21600LL;
  unsigned __int8 v26 = v18;
  xpc_activity_register("com.apple.CoreAnalytics.6Hours", XPC_ACTIVITY_CHECK_IN, &handler);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 1174405120LL;
  v16[2] = sub_1000843C0;
  void v16[3] = &unk_10012A7C8;
  v16[4] = v4;
  char v17 = v3;
  if (v3)
  {
    char v14 = (unint64_t *)&v3->__shared_weak_owners_;
    do
      unint64_t v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }

  handler = _NSConcreteStackBlock;
  uint64_t v23 = 0x40000000LL;
  __int128 v24 = sub_100084574;
  uint64_t v25 = &unk_10012A848;
  char v27 = "com.apple.CoreAnalytics.Daily";
  uint64_t v28 = 86400LL;
  unsigned __int8 v26 = v16;
  xpc_activity_register("com.apple.CoreAnalytics.Daily", XPC_ACTIVITY_CHECK_IN, &handler);
  if (v17) {
    std::__shared_weak_count::__release_weak(v17);
  }
  if (v19) {
    std::__shared_weak_count::__release_weak(v19);
  }
  if (v21) {
    std::__shared_weak_count::__release_weak(v21);
  }
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_10008416C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, std::__shared_weak_count *a26)
{
  if (a14) {
    std::__shared_weak_count::__release_weak(a14);
  }
  if (a20) {
    std::__shared_weak_count::__release_weak(a20);
  }
  if (a26) {
    std::__shared_weak_count::__release_weak(a26);
  }
  if (v26) {
    std::__shared_weak_count::__release_weak(v26);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000841D0(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      unsigned __int8 v4 = v3;
      uint64_t v5 = *(void *)(a1 + 32);
      if (v5)
      {
        uint64_t v6 = *(void *)(v5 + 56);
        if (v6)
        {
          int v9 = 0;
          (*(void (**)(uint64_t, int *))(*(void *)v6 + 48LL))(v6, &v9);
        }
      }

      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        unint64_t v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }

void sub_100084298( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1000842AC(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2)
  {
    uint64_t v3 = (unint64_t *)(v2 + 16);
    do
      unint64_t v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }

  return result;
}

void sub_1000842D0(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_1000842E0(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      unint64_t v4 = v3;
      uint64_t v5 = *(void *)(a1 + 32);
      if (v5)
      {
        uint64_t v6 = *(void *)(v5 + 56);
        if (v6)
        {
          int v9 = 1;
          (*(void (**)(uint64_t, int *))(*(void *)v6 + 48LL))(v6, &v9);
        }
      }

      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        unint64_t v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }

void sub_1000843AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000843C0(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      unint64_t v4 = v3;
      uint64_t v5 = *(void *)(a1 + 32);
      if (v5)
      {
        uint64_t v6 = *(void *)(v5 + 56);
        if (v6)
        {
          int v9 = 2;
          (*(void (**)(uint64_t, int *))(*(void *)v6 + 48LL))(v6, &v9);
        }
      }

      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        unint64_t v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }

void sub_10008448C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1000844A0(void *a1)
{
  *a1 = off_10012A728;
  uint64_t v2 = a1 + 4;
  uint64_t v3 = (void *)a1[7];
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
  }

  else
  {
    if (!v3) {
      goto LABEL_6;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  uint64_t v5 = (std::__shared_weak_count *)a1[2];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  return nullsub_4(a1);
}

void sub_100084508(void *a1)
{
  *a1 = off_10012A728;
  uint64_t v2 = a1 + 4;
  uint64_t v3 = (void *)a1[7];
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
  }

  else
  {
    if (!v3) {
      goto LABEL_6;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  uint64_t v5 = (std::__shared_weak_count *)a1[2];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = (void *)nullsub_4(a1);
  operator delete(v6);
}

void sub_100084574(uint64_t a1, xpc_activity_t activity)
{
  xpc_activity_state_t state = xpc_activity_get_state(activity);
  xpc_object_t v5 = xpc_activity_copy_criteria(activity);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  if (state == 2)
  {
    uint64_t v10 = (os_log_s *)qword_1001318E8;
    if (os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 40);
      int v15 = 136315138;
      uint64_t v16 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "[Cadence] *** Timer action! (%s)",  (uint8_t *)&v15,  0xCu);
    }

    dispatch_async(&_dispatch_main_q, *(dispatch_block_t *)(a1 + 32));
  }

  else if (!state)
  {
    xpc_type_t type = xpc_get_type(v5);
    uint64_t v7 = (os_log_s *)qword_1001318E8;
    BOOL v8 = os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_DEFAULT);
    if (type == (xpc_type_t)&_xpc_type_null)
    {
      if (v8)
      {
        uint64_t v12 = *(void *)(a1 + 40);
        int v15 = 136315138;
        uint64_t v16 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[Cadence] Creating new timer (%s)",  (uint8_t *)&v15,  0xCu);
      }

      xpc_object_t v13 = xpc_dictionary_create(0LL, 0LL, 0LL);
      if (!v13) {
        xpc_object_t v13 = xpc_null_create();
      }
      xpc_release(v5);
      int64_t v14 = *(void *)(a1 + 48);
      xpc_dictionary_set_BOOL(v13, XPC_ACTIVITY_REPEATING, 1);
      xpc_dictionary_set_int64(v13, XPC_ACTIVITY_INTERVAL, v14);
      xpc_dictionary_set_int64(v13, XPC_ACTIVITY_DELAY, v14);
      xpc_dictionary_set_int64(v13, XPC_ACTIVITY_GRACE_PERIOD, XPC_ACTIVITY_INTERVAL_5_MIN);
      xpc_dictionary_set_string(v13, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_UTILITY);
      xpc_dictionary_set_BOOL(v13, XPC_ACTIVITY_ALLOW_BATTERY, 1);
      xpc_activity_set_criteria(activity, v13);
      xpc_object_t v5 = v13;
    }

    else if (v8)
    {
      uint64_t v9 = *(void *)(a1 + 40);
      int v15 = 136315138;
      uint64_t v16 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[Cadence] Resuming timer (%s)",  (uint8_t *)&v15,  0xCu);
    }
  }

  xpc_release(v5);
}

void sub_10008480C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1000045D0(exception_object);
}

uint64_t *sub_100084850(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a1 = *a2;
  if (v4)
  {
    xpc_object_t v5 = operator new(0x20uLL);
    uint64_t v6 = *a2;
    *xpc_object_t v5 = &off_10012A878;
    v5[1] = 0LL;
    v5[2] = 0LL;
    void v5[3] = v6;
    a1[1] = (uint64_t)v5;
    if (*a2) {
      uint64_t v7 = (void *)(*a2 + 8);
    }
    else {
      uint64_t v7 = 0LL;
    }
    sub_10000CCC8((uint64_t)a1, v7, *a2);
  }

  else
  {
    a1[1] = 0LL;
  }

  *a2 = 0LL;
  return a1;
}

void sub_1000848C8(std::__shared_weak_count *a1)
{
}

uint64_t sub_1000848DC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

uint64_t sub_1000848F4(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

void sub_100084A30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100084B0C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)&OBJC_CLASS___NetworkStateRelay;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

id sub_100084B4C(uint64_t a1)
{
  id result = *(id *)(*(void *)(a1 + 32) + 40LL);
  if (result) {
    return _objc_msgSend(result, "removeObserver:forKeyPath:");
  }
  return result;
}

void sub_100084C24( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_100084D38( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  _Unwind_Resume(a1);
}

void sub_100084D58(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) path]);
  uint64_t v3 = v2;
  if (v2 && (uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 interface]), v4, v4))
  {
    xpc_object_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 interface]);
    objc_msgSend(WeakRetained, "updatePrimaryNetworkInterfaceType:", objc_msgSend(v5, "type"), 1);
  }

  else
  {
    objc_msgSend(WeakRetained, "updatePrimaryNetworkInterfaceType:", 0, 0);
  }
}

void sub_100084E00( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100084FB8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100085068()
{
  v0 = objc_autoreleasePoolPush();
  sub_100005064(qword_100131840, "wiFiRadioTech");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_100131840, (void *)&_mh_execute_header);
  sub_100005064(qword_100131858, "wiFiLQM");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_100131858, (void *)&_mh_execute_header);
  sub_100005064(qword_100131870, "primaryNetworkInterface");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_100131870, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

uint64_t *sub_10008511C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = operator new(0x48uLL);
  sub_100085184(v4, a1);
  return sub_100085848(a2, (uint64_t)v4);
}

void sub_100085168(void *a1)
{
}

void *sub_100085184(void *a1, void *a2)
{
  dispatch_queue_t v4 = dispatch_queue_create("analyticsd.DeviceKeyManagerQueue", 0LL);
  a1[1] = 0LL;
  a1[2] = 0LL;
  a1[3] = v4;
  *a1 = off_10012A900;
  uint64_t v5 = a2[1];
  a1[4] = *a2;
  a1[5] = v5;
  if (v5)
  {
    uint64_t v6 = (unint64_t *)(v5 + 8);
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }

  sub_100093674((uint64_t)(a1 + 6));
  return a1;
}

void sub_100085208(_Unwind_Exception *a1)
{
}

void sub_100085224(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  int v10 = a2;
  v9[0] = a1;
  v9[1] = &v10;
  uint64_t v9[2] = a3;
  id v6 = sub_10000B718((id *)(a1 + 24));
  unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  __n128 v11[2] = sub_100085A20;
  void v11[3] = &unk_100125938;
  v11[4] = a1 + 8;
  void v11[5] = v9;
  uint64_t v12 = objc_retainBlock(v11);
  BOOL v8 = v7;
  *a4 = 0LL;
  a4[1] = 0LL;
  a4[2] = 0LL;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100085B10;
  block[3] = &unk_1001256F0;
  block[4] = a4;
  block[5] = &v12;
  dispatch_sync(v8, block);
}

void sub_100085338(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

void sub_100085344(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v7 = a1;
  id v4 = sub_10000B718((id *)(a1 + 24));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_100085C3C;
  v8[3] = &unk_100125938;
  v8[4] = a1 + 8;
  v8[5] = &v7;
  uint64_t v9 = objc_retainBlock(v8);
  id v6 = v5;
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100085B10;
  block[3] = &unk_1001256F0;
  block[4] = a2;
  block[5] = &v9;
  dispatch_sync(v6, block);
}

void sub_10008544C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

void sub_100085458(uint64_t a1@<X0>, int a2@<W1>, _BYTE *a3@<X2>, uint64_t a4@<X3>, std::string *a5@<X8>)
{
  id v6 = a3;
  if (a3[24] {
    || (*(void *)&__int128 v13 = 0xAAAAAAAAAAAAAAAALL,
  }
        *((void *)&v13 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL,
        *(_OWORD *)c.count = v13,
        *(_OWORD *)c.hash = v13,
        sub_100085628(a1, a2, (uint64_t)&c),
        !LOBYTE(c.hash[1])))
  {
    *(void *)&__int128 v10 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v10 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
    md[2] = v10;
    md[3] = v10;
    md[0] = v10;
    md[1] = v10;
    *(_OWORD *)&c.w_BYTE buf[12] = v10;
    *(_OWORD *)&c.wbuf[14] = v10;
    *(_OWORD *)&c.wuint8_t buf[8] = v10;
    *(_OWORD *)&c.wbuf[10] = v10;
    *(_OWORD *)&c.wbuf[6] = v10;
    *(_OWORD *)&c.wbuf[2] = v10;
    *(_OWORD *)&c.wuint8_t buf[4] = v10;
    *(_OWORD *)&c.hash[6] = v10;
    *(_OWORD *)c.w__int128 buf = v10;
    *(_OWORD *)&c.hash[2] = v10;
    *(_OWORD *)&c.hash[4] = v10;
    *(_OWORD *)c.count = v10;
    *(_OWORD *)c.hash = v10;
    CC_SHA512_Init(&c);
    if (*(char *)(a1 + 71) < 0)
    {
      uint64_t v11 = *(const void **)(a1 + 48);
      uint64_t v12 = *(void *)(a1 + 56);
    }

    else
    {
      uint64_t v11 = (const void *)(a1 + 48);
      LODWORD(v12) = *(unsigned __int8 *)(a1 + 71);
    }

    CC_SHA512_Update(&c, v11, v12);
    if (v6[24])
    {
      if ((char)v6[23] < 0)
      {
        int v15 = v6;
        id v6 = *(_BYTE **)v6;
        uint64_t v14 = *((void *)v15 + 1);
      }

      else
      {
        LODWORD(v14) = v6[23];
      }

      CC_SHA512_Update(&c, v6, v14);
    }

    if (a2 >= 1)
    {
      uint64_t data = a4 / a2;
      CC_SHA512_Update(&c, &data, 8u);
    }

    CC_SHA512_Final((unsigned __int8 *)md, &c);
    sub_1000A379C((unsigned __int8 *)md, 20LL, a5);
  }

  else if (SHIBYTE(c.hash[0]) < 0)
  {
    sub_10000B8BC(a5, (void *)c.count[0], c.count[1]);
    if (LOBYTE(c.hash[1]) && SHIBYTE(c.hash[0]) < 0) {
      operator delete((void *)c.count[0]);
    }
  }

  else
  {
    *(_OWORD *)&a5->__r_.__value_.__l.__data_ = *(_OWORD *)c.count;
    a5->__r_.__value_.__l.__cap_ = c.hash[0];
  }

void sub_1000855FC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a17)
  {
    if (a16 < 0) {
      operator delete(__p);
    }
  }

  _Unwind_Resume(exception_object);
}

void sub_100085628(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (a2 == 90)
  {
    if (sub_100011188(*(void *)(a1 + 32)))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      sub_100005064(__p, "90Day");
      sub_10001129C(v6, (uint64_t)__p, &v11);
      goto LABEL_9;
    }

LABEL_11:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
    return;
  }

  if (a2 != 1)
  {
    if (a2 == -1)
    {
      id v8 = (id)objc_claimAutoreleasedReturnValue(+[OSASystemConfiguration sharedInstance](&OBJC_CLASS___OSASystemConfiguration, "sharedInstance"));
      id v5 = objc_claimAutoreleasedReturnValue([v8 crashReporterKey]);
      sub_100005064((void *)a3, (char *)[v5 UTF8String]);
      *(_BYTE *)(a3 + 24) = 1;

      return;
    }

    goto LABEL_11;
  }

  if (!sub_100011074(*(void *)(a1 + 32))) {
    goto LABEL_11;
  }
  uint64_t v7 = *(void *)(a1 + 32);
  sub_100005064(__p, "Daily");
  sub_10001129C(v7, (uint64_t)__p, &v11);
LABEL_9:
  *(_OWORD *)a3 = v11;
  *(void *)(a3 + 16) = v12;
  uint64_t v12 = 0LL;
  __int128 v11 = 0uLL;
  *(_BYTE *)(a3 + 24) = 1;
  if (v10 < 0) {
    operator delete(__p[0]);
  }
}

  if (!sub_10008E380(a1) && !sub_10008E084((uint64_t)a1, (_BYTE *)a1[3], a3))
  {
    (*(void (**)(uint64_t *))(*a1 + 88))(a1);
    memset(v29, 170, sizeof(v29));
    sub_100057DA0(a1[15], buf);
    sub_10008F584((uint64_t)a1, (uint64_t *)buf, a3, v29);
    *(void *)unsigned __int8 v30 = buf;
    sub_100004D64((void ***)v30);
    memset(v28, 170, sizeof(v28));
    sub_100057DA0(a1[16], buf);
    sub_10008F584((uint64_t)a1, (uint64_t *)buf, a3, v28);
    *(void *)unsigned __int8 v30 = buf;
    sub_100004D64((void ***)v30);
    int v15 = (void *)(*(void *)a3 + 16LL);
    uint64_t v16 = strlen("com.apple.coreanalytics.heartbeat.2hours");
    if (*(char *)(*(void *)a3 + 39LL) < 0)
    {
      if (v16 == *(void *)(*(void *)a3 + 24LL))
      {
        if (v16 == -1LL) {
          goto LABEL_50;
        }
        int v15 = (void *)*v15;
LABEL_26:
        if (!memcmp(v15, "com.apple.coreanalytics.heartbeat.2hours", v16))
        {
          char v17 = (os_log_s *)qword_100131970;
          if (os_log_type_enabled((os_log_t)qword_100131970, OS_LOG_TYPE_DEFAULT))
          {
            sub_100006200(a1[15], -1, 0x20u, 0LL, 1, v30);
            uint64_t v18 = SHIBYTE(v33);
            __int128 v19 = *(_BYTE **)v30;
            sub_100006200(a1[16], -1, 0x20u, 0LL, 1, __p);
            char v20 = v30;
            if (v18 < 0) {
              char v20 = v19;
            }
            if (v27 >= 0) {
              unint64_t v21 = __p;
            }
            else {
              unint64_t v21 = (void **)__p[0];
            }
            *(_DWORD *)__int128 buf = 136446722;
            *(void *)&uint8_t buf[4] = "com.apple.coreanalytics.heartbeat.2hours";
            *(_WORD *)&_BYTE buf[12] = 2080;
            *(void *)&buf[14] = v20;
            *(_WORD *)&_BYTE buf[22] = 2080;
            *(void *)&uint8_t buf[24] = v21;
            _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "[AggregatingTransform: %{public}s] Spec: Dimensions: %s, Measures: %s",  buf,  0x20u);
            if (v27 < 0) {
              operator delete(__p[0]);
            }
            if (SHIBYTE(v33) < 0) {
              operator delete(*(void **)v30);
            }
          }

          *(void *)&__int128 v22 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v22 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)&uint8_t buf[16] = v22;
          char v36 = v22;
          *(_OWORD *)__int128 buf = v22;
          sub_10009EEA4(v29, v28, (std::string *)buf);
          uint64_t v23 = (os_log_s *)qword_100131970;
          if (os_log_type_enabled((os_log_t)qword_100131970, OS_LOG_TYPE_DEFAULT))
          {
            __int128 v24 = &buf[24];
            uint64_t v25 = buf;
            if (buf[23] < 0) {
              uint64_t v25 = *(_BYTE **)buf;
            }
            if (v36 < 0) {
              __int128 v24 = *(_BYTE **)&buf[24];
            }
            *(_DWORD *)unsigned __int8 v30 = 136446722;
            *(void *)&v30[4] = "com.apple.coreanalytics.heartbeat.2hours";
            uint64_t v31 = 2080;
            uint64_t v32 = v25;
            char v33 = 2080;
            uint64_t v34 = v24;
            _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "[AggregatingTransform: %{public}s] Values: Dimensions: %s, Measures: %s",  v30,  0x20u);
          }

          if (SHIBYTE(v36) < 0) {
            operator delete(*(void **)&buf[24]);
          }
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }
      }
    }

    else if (v16 == *(unsigned __int8 *)(*(void *)a3 + 39LL))
    {
      if (v16 == -1LL) {
LABEL_50:
      }
        sub_100008DD4();
      goto LABEL_26;
    }

    sub_10009F08C((uint64_t)a1, (uint64_t *)a3, v29, v28);
    *(void *)__int128 buf = v28;
    sub_100004D64((void ***)buf);
    *(void *)__int128 buf = v29;
    sub_100004D64((void ***)buf);
    return 1LL;
  }

  id v8 = (os_log_s *)qword_100131918;
  uint64_t v9 = os_log_type_enabled((os_log_t)qword_100131918, OS_LOG_TYPE_DEFAULT);
  id result = 0LL;
  if (v9)
  {
    __int128 v11 = *(void *)a3;
    uint64_t v12 = (void *)(*(void *)a3 + 16LL);
    __int128 v13 = sub_10008E380(a1);
    uint64_t v14 = "Config";
    if (v13) {
      uint64_t v14 = "Budget Exceeded";
    }
    *(_DWORD *)__int128 buf = 136315394;
    *(void *)&uint8_t buf[4] = v12;
    *(_WORD *)&_BYTE buf[12] = 2080;
    *(void *)&buf[14] = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "[AggregatingTransform] Ignoring event %s. Reason: %s",  buf,  0x16u);
    return 0LL;
  }

  return result;
}

void sub_1000857A0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000857E8(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000857FC(a1);
  operator delete(v1);
}

uint64_t sub_1000857FC(uint64_t a1)
{
  *(void *)a1 = off_10012A900;
  sub_100007004(a1 + 32);
  sub_100009958(a1 + 8);
  return a1;
}

uint64_t *sub_100085848(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  id v4 = operator new(0x20uLL);
  *id v4 = &off_10012A9A0;
  v4[1] = 0LL;
  void v4[2] = 0LL;
  v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2) {
    id v5 = (void *)(a2 + 8);
  }
  else {
    id v5 = 0LL;
  }
  sub_10000CCC8((uint64_t)a1, v5, a2);
  return a1;
}

void sub_1000858D8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    sub_100085920((uint64_t)&a12, v12);
    __cxa_rethrow();
  }

  _Unwind_Resume(exception_object);
}

void sub_100085920(uint64_t a1, id *a2)
{
  id v3 = sub_10000B718(a2 + 3);
  id v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v3);
  dispatch_barrier_async_f(v4, a2, (dispatch_function_t)sub_100085A0C);
}

void sub_10008596C(std::__shared_weak_count *a1)
{
}

void sub_100085980(uint64_t a1)
{
  uint64_t v1 = *(id **)(a1 + 24);
  id v2 = sub_10000B718(v1 + 3);
  id v3 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v2);
  dispatch_barrier_async_f(v3, v1, (dispatch_function_t)sub_100085A0C);
}

uint64_t sub_1000859CC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

uint64_t sub_100085A0C(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

void sub_100085A20(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)v3;
  uint64_t v5 = sub_100010904(*(void *)(*(void *)v3 + 32LL));
  uint64_t v6 = *(__int128 **)(v3 + 16);
  LODWORD(v3) = **(_DWORD **)(v3 + 8);
  sub_100085B9C((uint64_t)__p, v6);
  sub_100085458(v4, v3, __p, v5 / 86400000000LL, a2);
  if (v9)
  {
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }

void sub_100085AE4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a16)
  {
    if (a15 < 0) {
      operator delete(__p);
    }
  }

  _Unwind_Resume(exception_object);
}

__n128 sub_100085B10(uint64_t a1)
{
  (*(void (**)(__n128 *__return_ptr))(**(void **)(a1 + 40) + 16LL))(&v4);
  uint64_t v2 = *(void *)(a1 + 32);
  __n128 result = v4;
  *(void *)(v2 + 16) = v5;
  *(__n128 *)uint64_t v2 = result;
  return result;
}

uint64_t sub_100085B9C(uint64_t a1, __int128 *a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  sub_100085BE4((_OWORD *)a1, a2);
  return a1;
}

void sub_100085BC8(_Unwind_Exception *exception_object)
{
  if (*(_BYTE *)(v1 + 24)) {
    sub_1000DE180(v1);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_100085BE4(_OWORD *__dst, __int128 *a2)
{
  if (*((_BYTE *)a2 + 24))
  {
    uint64_t v2 = __dst;
    if (*((char *)a2 + 23) < 0)
    {
      __dst = sub_10000B8BC(__dst, *(void **)a2, *((void *)a2 + 1));
    }

    else
    {
      __int128 v3 = *a2;
      *((void *)__dst + 2) = *((void *)a2 + 2);
      *__dst = v3;
    }

    v2[24] = 1;
  }

  return __dst;
}

void sub_100085C3C(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3 = **(void **)(a1 + 40);
  sub_100005064(__p, "");
  char v7 = 1;
  uint64_t v4 = sub_10003E4A4();
  sub_100085458(v3, 1, __p, v4, a2);
  if (v7)
  {
    if (v6 < 0) {
      operator delete(__p[0]);
    }
  }

void sub_100085CE0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

void sub_100085D0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (os_log_s *)qword_100131928;
  if (os_log_type_enabled((os_log_t)qword_100131928, OS_LOG_TYPE_DEFAULT))
  {
    sub_100006200(a3, -1, 0x20u, 0LL, 1, __p);
    if (v8 >= 0) {
      char v6 = __p;
    }
    else {
      char v6 = (void **)__p[0];
    }
    *(_DWORD *)__int128 buf = 136446466;
    uint64_t v10 = a2;
    __int16 v11 = 2082;
    uint64_t v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[%{public}s] PROGRESS: %{public}s", buf, 0x16u);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }

void sub_100085E0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (os_log_s *)qword_100131928;
  if (os_log_type_enabled((os_log_t)qword_100131928, OS_LOG_TYPE_INFO))
  {
    sub_100006200(a3, -1, 0x20u, 0LL, 1, __p);
    if (v8 >= 0) {
      char v6 = __p;
    }
    else {
      char v6 = (void **)__p[0];
    }
    *(_DWORD *)__int128 buf = 136446466;
    uint64_t v10 = a2;
    __int16 v11 = 2082;
    uint64_t v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "[%{public}s] INFO: %{public}s", buf, 0x16u);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }

uint64_t sub_100085F0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = (os_log_s *)qword_100131928;
  if (os_log_type_enabled((os_log_t)qword_100131928, OS_LOG_TYPE_INFO))
  {
    sub_100006200(a3, -1, 0x20u, 0LL, 1, __p);
    if (v10 >= 0) {
      char v7 = __p;
    }
    else {
      char v7 = (void **)__p[0];
    }
    *(_DWORD *)__int128 buf = 136446466;
    uint64_t v12 = a2;
    __int16 v13 = 2082;
    uint64_t v14 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "[%{public}s] WARNING: %{public}s", buf, 0x16u);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }

  return sub_100057BDC(a1 + 8, a3);
}

uint64_t sub_100086024(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = (os_log_s *)qword_100131928;
  if (os_log_type_enabled((os_log_t)qword_100131928, OS_LOG_TYPE_ERROR))
  {
    sub_100006200(a3, -1, 0x20u, 0LL, 1, __p);
    if (v10 >= 0) {
      char v8 = __p;
    }
    else {
      char v8 = (void **)__p[0];
    }
    *(_DWORD *)__int128 buf = 136446466;
    uint64_t v12 = a2;
    __int16 v13 = 2082;
    uint64_t v14 = v8;
    _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "[%{public}s] ERROR: %{public}s", buf, 0x16u);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }

  return sub_100057BDC(a1 + 24, a3);
}

uint64_t sub_100086140(uint64_t a1)
{
  *(void *)a1 = off_10012AA00;
  sub_1000041AC(a1 + 24);
  sub_10000425C((uint64_t **)(a1 + 32), *(unsigned __int8 *)(a1 + 24));
  sub_1000041AC(a1 + 8);
  sub_10000425C((uint64_t **)(a1 + 16), *(unsigned __int8 *)(a1 + 8));
  return nullsub_4(a1);
}

void sub_100086190(uint64_t a1)
{
  *(void *)a1 = off_10012AA00;
  sub_1000041AC(a1 + 24);
  sub_10000425C((uint64_t **)(a1 + 32), *(unsigned __int8 *)(a1 + 24));
  sub_1000041AC(a1 + 8);
  sub_10000425C((uint64_t **)(a1 + 16), *(unsigned __int8 *)(a1 + 8));
  uint64_t v2 = (void *)nullsub_4(a1);
  operator delete(v2);
}

uint64_t sub_1000861E4@<X0>(const char *a1@<X0>, const char **a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v4 = a1;
  v16[0] = 0xAAAAAAAAAAAAAAAALL;
  v16[1] = 0xAAAAAAAAAAAAAAAALL;
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  sub_10004D0E0(a1, v16);
  if (v16[0] == -1)
  {
    sub_1000D4248(v4, 0LL, (int *)&v17);
    if (v17 <= 1)
    {
      char v9 = "file does not exist";
    }

    else
    {
      sub_1000D4248(v4, 0LL, (int *)&v17);
      if (v17 == 2) {
        char v9 = "file exists but could not be read";
      }
      else {
        char v9 = "path exists but is not a file";
      }
    }

    *a2 = v9;
    char v10 = (os_log_s *)qword_100131780;
    if (os_log_type_enabled((os_log_t)qword_100131780, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = *a2;
      if (!*a2) {
        uint64_t v12 = "unknown";
      }
      if (v4[23] >= 0) {
        __int16 v13 = (uint64_t *)v4;
      }
      else {
        __int16 v13 = *(uint64_t **)v4;
      }
      *(_DWORD *)__int128 buf = 136446466;
      __int128 v19 = v12;
      __int16 v20 = 2082;
      unint64_t v21 = v13;
      _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "[ConfigUtils] ERROR: Failed to load buffer from file: error='%{public}s', path='%{public}s'",  buf,  0x16u);
    }

    *a3 = 0LL;
    a3[1] = 0LL;
  }

  else
  {
    *a3 = 0xAAAAAAAAAAAAAAAALL;
    a3[1] = 0xAAAAAAAAAAAAAAAALL;
    sub_100086494(v16, a2, a3);
    unint64_t v6 = *a3;
    char v7 = (os_log_s *)qword_100131780;
    if (!v6 && os_log_type_enabled((os_log_t)qword_100131780, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = *a2;
      if (!*a2) {
        uint64_t v14 = "unknown";
      }
      if (v4[23] >= 0) {
        int v15 = (uint64_t *)v4;
      }
      else {
        int v15 = *(uint64_t **)v4;
      }
      *(_DWORD *)__int128 buf = 136446466;
      __int128 v19 = v14;
      __int16 v20 = 2082;
      unint64_t v21 = v15;
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "[ConfigUtils] ERROR: Failed to load config: error='%{public}s', path='%{public}s'",  buf,  0x16u);
      char v7 = (os_log_s *)qword_100131780;
    }

    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      if (v4[23] >= 0) {
        char v8 = v4;
      }
      else {
        char v8 = *(const char **)v4;
      }
      *(_DWORD *)__int128 buf = 136446210;
      __int128 v19 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[ConfigUtils] Successfully loaded config from path='%{public}s",  buf,  0xCu);
    }
  }

  return sub_10004D0DC((uint64_t)v16);
}

void sub_10008645C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    void *v10 = "filesystem error";
    __cxa_end_catch();
    JUMPOUT(0x10008632CLL);
  }

  _Unwind_Resume(exception_object);
}

void sub_100086494(uint64_t *a1@<X0>, const char **a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v5 = *a1;
  if (*a1 == -1)
  {
    char v7 = "invalid buffer";
    goto LABEL_5;
  }

  unint64_t v6 = a1[1];
  if (v6 >= 0x40000001)
  {
    char v7 = "too large";
LABEL_5:
    *a2 = v7;
    *a3 = 0LL;
    a3[1] = 0LL;
    return;
  }

  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
  sub_1000CF540(a1, &v17);
  if (v17)
  {
    unint64_t v8 = v18;
    *a3 = v17;
    a3[1] = v8;
    return;
  }

  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v16 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  __int16 v20 = 0LL;
  sub_100086E4C(v5, v5 + v6, (uint64_t)v19, 1, &v15);
  char v9 = v20;
  if (v20 == v19)
  {
    uint64_t v10 = 4LL;
    char v9 = v19;
    goto LABEL_13;
  }

  if (v20)
  {
    uint64_t v10 = 5LL;
LABEL_13:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }

  if (v15 == 1)
  {
    v19[0] = &off_10012A0C0;
    sub_100043DD0((uint64_t)v19, "config", (unsigned __int8 *)&v15);
    if (v15 == 1)
    {
      __int16 v11 = operator new(0x30uLL);
      v11[1] = 0LL;
      __n128 v11[2] = 0LL;
      *__int16 v11 = off_10012AAC8;
      *a3 = sub_1000D11CC(v11 + 3, &v15);
      a3[1] = (unint64_t)v11;
    }

    else
    {
      *a2 = "legacy json config build failure";
      *a3 = 0LL;
      a3[1] = 0LL;
    }

    nullsub_4(v19);
  }

  else
  {
    *a2 = "ndjson config failed to load and config is not a legacy json";
    *a3 = 0LL;
    a3[1] = 0LL;
  }

  sub_1000041AC((uint64_t)&v15);
  sub_10000425C(&v16, v15);
  uint64_t v12 = (std::__shared_weak_count *)v18;
  if (v18)
  {
    __int16 v13 = (unint64_t *)(v18 + 8);
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

void sub_10008668C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, uint64_t *);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v6 = va_arg(va2, void);
  uint64_t v8 = va_arg(va2, void);
  nullsub_4(va2);
  sub_10000417C((uint64_t **)va);
  sub_100007004((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL sub_10008672C(const char *a1)
{
  if (LODWORD(v13[0]) < 2 || (sub_1000D4248(a1, 0LL, (int *)v13), LODWORD(v13[0]) != 2))
  {
    uint64_t v3 = (os_log_s *)qword_100131780;
    if (os_log_type_enabled((os_log_t)qword_100131780, OS_LOG_TYPE_ERROR)) {
      sub_1000DE240(v3, v4, v5, v6, v7, v8, v9, v10);
    }
    return 1LL;
  }

  v13[0] = 0LL;
  v13[1] = 0LL;
  uint64_t v14 = 0LL;
  sub_1000D4D90((uint64_t)a1, v13);
  if ((v14 & 1) == 0 || v14 == 1 && !LODWORD(v13[0]))
  {
    uint64_t v2 = (os_log_s *)qword_100131780;
    if (os_log_type_enabled((os_log_t)qword_100131780, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "[ConfigUtils] Remove task config from disk: success",  buf,  2u);
    }

    return 1LL;
  }

  uint64_t v12 = (os_log_s *)qword_100131780;
  BOOL result = os_log_type_enabled((os_log_t)qword_100131780, OS_LOG_TYPE_ERROR);
  if (result)
  {
    sub_1000DE194((unsigned int *)v13, v12);
    return 0LL;
  }

  return result;
}

void sub_100086888(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

std::string *sub_100086894@<X0>(unsigned int *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *((void *)a1 + 2);
  if (v2)
  {
    if (v2 == 1) {
      return std::error_code::message(a2, (const std::error_code *)a1);
    }
    uint64_t v4 = (uint64_t (***)())*((void *)a1 + 1);
  }

  else
  {
    uint64_t v4 = &boost::system::detail::system_cat_holder<void>::instance;
  }

  return (std::string *)((uint64_t (*)(uint64_t (***)(), void))(*v4)[4])(v4, *a1);
}

BOOL sub_1000868CC(char *a1, uint64_t a2)
{
  v18[0] = 0LL;
  v18[1] = 0LL;
  uint64_t v19 = 0LL;
  memset(__p, 170, sizeof(__p));
  sub_100086BCC(a1, __p);
  sub_1000D4248((const char *)__p, 0LL, (int *)&buf);
  if (LODWORD(buf.__r_.__value_.__l.__data_) <= 1)
  {
    sub_1000D47AC((uint64_t)__p, v18);
    if ((v19 & 1) != 0 && (v19 != 1 || LODWORD(v18[0])))
    {
      __int16 v11 = (os_log_s *)qword_100131780;
      if (os_log_type_enabled((os_log_t)qword_100131780, OS_LOG_TYPE_ERROR))
      {
        int v13 = SHIBYTE(__p[2]);
        uint64_t v14 = (void **)__p[0];
        sub_100086894((unsigned int *)v18, &buf);
        unint64_t v15 = __p;
        if (v13 < 0) {
          unint64_t v15 = v14;
        }
        if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          p_std::string buf = &buf;
        }
        else {
          p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)uint64_t v23 = 136446466;
        __int128 v24 = v15;
        __int16 v25 = 2082;
        unsigned __int8 v26 = p_buf;
        _os_log_error_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "[Tasked Config] ERROR: Save task config: failed to create parent directory %{public}s (%{public}s)",  v23,  0x16u);
      }

      goto LABEL_17;
    }
  }

  sub_1000D4248((const char *)__p, 0LL, (int *)&buf);
  if (LODWORD(buf.__r_.__value_.__l.__data_) != 3)
  {
    uint64_t v7 = (os_log_s *)qword_100131780;
    if (os_log_type_enabled((os_log_t)qword_100131780, OS_LOG_TYPE_ERROR)) {
      sub_1000DE2A0((uint64_t *)__p, v7, v8);
    }
LABEL_17:
    BOOL v10 = 0LL;
    goto LABEL_18;
  }

  v23[0] = 1;
  sub_1000D4D90((uint64_t)a1, v18);
  __int128 v22 = 0LL;
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = &off_10012AB18;
  v4[1] = a1;
  void v4[2] = a2;
  v4[3] = v23;
  __int128 v22 = v4;
  sub_100041324((uint64_t)v21);
  uint64_t v5 = v22;
  if (v22 == v21)
  {
    uint64_t v6 = 4LL;
    uint64_t v5 = v21;
    goto LABEL_12;
  }

  if (v22)
  {
    uint64_t v6 = 5LL;
LABEL_12:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }

  uint64_t v9 = (os_log_s *)qword_100131780;
  if (os_log_type_enabled((os_log_t)qword_100131780, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "[Tasked Config] Save task config: success",  (uint8_t *)&buf,  2u);
  }

  BOOL v10 = v23[0] != 0;
LABEL_18:
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return v10;
}

void sub_100086B58( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22, uint64_t a23, uint64_t a24, uint64_t a25)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100086BCC@<X0>(char *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = a1;
  if (a1[23] < 0) {
    uint64_t v3 = *(char **)a1;
  }
  unint64_t v4 = sub_1000D58C8(a1);
  return sub_100036DD4(a2, v3, &v3[v4], v4);
}

const char *sub_100086C0C()
{
  return "system";
}

uint64_t sub_100086C18(uint64_t a1, unsigned int a2)
{
  return a2;
}

uint64_t sub_100086C24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 8);
  if (!v4)
  {
    if (!v5) {
      return 1LL;
    }
    uint64_t v9 = *(void *)(v5 + 8);
    return v9 == 0xB2AB117A257EDFD0LL;
  }

  if (!v5)
  {
    uint64_t v9 = *(void *)(v4 + 8);
    return v9 == 0xB2AB117A257EDFD0LL;
  }

  uint64_t v6 = *(void *)(v5 + 8);
  BOOL v7 = v5 == v4;
  if (v6) {
    return *(void *)(v4 + 8) == v6;
  }
  else {
    return v7;
  }
}

BOOL sub_100086CC0(uint64_t a1, uint64_t a2, int a3)
{
  return sub_100086D7C(a2, a3, a1);
}

void *sub_100086CD4@<X0>(int __errnum@<W1>, void *a2@<X8>)
{
  uint64_t v3 = strerror(__errnum);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = "Unknown error";
  }
  return sub_100005064(a2, v4);
}

const char *sub_100086D0C(int a1, int __errnum, char *a3, uint64_t a4)
{
  uint64_t v4 = a3;
  if (a4)
  {
    uint64_t v5 = a3;
    size_t v6 = a4 - 1;
    if (a4 != 1)
    {
      BOOL v7 = strerror(__errnum);
      if (!v7) {
        return "Unknown error";
      }
      strncpy(v4, v7, v6);
      uint64_t v5 = &v4[v6];
    }

    *uint64_t v5 = 0;
  }

  return v4;
}

BOOL sub_100086D70(uint64_t a1, int a2)
{
  return a2 != 0;
}

BOOL sub_100086D7C(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3 == 1)
  {
    if (*(void *)(a3 + 8) == 0xB2AB117A257EDFD2LL) {
      return *(_DWORD *)a1 + 1000 * (*(void *)(a1 + 8) % 0x1FFFF7uLL) == a2;
    }
    return 0LL;
  }

  if (!v3) {
    return !a2 && *(void *)(a3 + 8) == 0xB2AB117A257EDFD1LL;
  }
  if (*(_DWORD *)a1 != a2) {
    return 0LL;
  }
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(v6 + 8);
  BOOL v8 = v6 == a3;
  if (v7) {
    return *(void *)(a3 + 8) == v7;
  }
  else {
    return v8;
  }
}

void *sub_100086E4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, void *a5@<X8>)
{
  *a5 = 0xAAAAAAAAAAAAAAAALL;
  a5[1] = 0LL;
  *(_BYTE *)a5 = 0;
  sub_1000041AC((uint64_t)a5);
  sub_1000041AC((uint64_t)a5);
  sub_1000123E4((uint64_t)v14, a3);
  sub_100086FD0(a1, a2, (uint64_t)v14, a4, (uint64_t)v16);
  sub_1000870B8((uint64_t)v16, 1, (uint64_t)a5);
  sub_1000887C4((uint64_t)&v18);
  BOOL v10 = v17;
  if (v17 == v16)
  {
    uint64_t v11 = 4LL;
    BOOL v10 = v16;
  }

  else
  {
    if (!v17) {
      goto LABEL_6;
    }
    uint64_t v11 = 5LL;
  }

  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_6:
  BOOL result = v15;
  if (v15 == v14)
  {
    uint64_t v13 = 4LL;
    BOOL result = v14;
  }

  else
  {
    if (!v15) {
      return result;
    }
    uint64_t v13 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v13))();
}

void sub_100086F74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  BOOL v10 = va_arg(va1, void *);
  sub_100087640((uint64_t *)va1);
  va_list v4 = (va_list)v10;
  if (v10 == (void *)va)
  {
    uint64_t v5 = 4LL;
    va_copy(v4, va);
  }

  else
  {
    if (!v10) {
      goto LABEL_6;
    }
    uint64_t v5 = 5LL;
  }

  (*(void (**)(void))(*(void *)v4 + 8 * v5))();
LABEL_6:
  sub_10000417C(v2);
  _Unwind_Resume(a1);
}

void *sub_100086FD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  *(void *)&__int128 v9 = a1;
  *((void *)&v9 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = a2;
  sub_100018FE8((uint64_t)v10, a3);
  sub_100087694(a5, &v9, (uint64_t)v10, a4);
  BOOL result = v11;
  if (v11 == v10)
  {
    uint64_t v8 = 4LL;
    BOOL result = v10;
  }

  else
  {
    if (!v11) {
      return result;
    }
    uint64_t v8 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void sub_100087080( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  unint64_t v17 = a15;
  if (a15 == v15)
  {
    uint64_t v18 = 4LL;
    unint64_t v17 = &a12;
  }

  else
  {
    if (!a15) {
      goto LABEL_6;
    }
    uint64_t v18 = 5LL;
  }

  (*(void (**)(void))(*(void *)v17 + 8 * v18))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1000870B8(uint64_t a1, int a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    unint64_t v45 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v6 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v6 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
    __int128 v43 = v6;
    __int128 v44 = v6;
    __int128 v41 = v6;
    __int128 v42 = v6;
    __int128 v39 = v6;
    __int128 v40 = v6;
    *(_OWORD *)&v38[16] = v6;
    *(_OWORD *)&v38[32] = v6;
    *(_OWORD *)uint64_t v38 = v6;
    sub_1000123E4((uint64_t)v36, a1);
    sub_10001BFCC((uint64_t)v38, a3, (uint64_t)v36, *(_BYTE *)(a1 + 184));
    uint64_t v7 = v37;
    if (v37 == v36)
    {
      uint64_t v8 = 4LL;
      uint64_t v7 = v36;
    }

    else
    {
      if (!v37)
      {
LABEL_19:
        sub_100088804(a1, (uint64_t *)v38);
        sub_1000041AC(a3);
        if (a2)
        {
          int v14 = sub_1000877C8(a1 + 40);
          *(_DWORD *)(a1 + 32) = v14;
          if (v14 != 15)
          {
            uint64_t v15 = *(void *)(a1 + 72);
            sub_1000891B0(a1 + 40, &v35);
            __int128 v31 = *(_OWORD *)(a1 + 72);
            uint64_t v32 = *(void *)(a1 + 88);
            sub_100005064(v28, "value");
            sub_100089290(a1, 0xFu, (uint64_t)v28, &__p);
            sub_10001AD8C(101, (uint64_t *)&v31, (uint64_t)&__p, &v33);
            sub_10001AB68((uint64_t)v38, v15, (uint64_t)&v35, (uint64_t)&v33);
            v33.__vftable = (std::exception_vtbl *)off_100125390;
            std::runtime_error::~runtime_error(&v34);
            std::exception::~exception(&v33);
            if (v29 < 0) {
              operator delete(v28[0]);
            }
          }
        }

        if (BYTE8(v41))
        {
          v26[0] = 9;
          uint64_t v16 = (uint64_t **)&v27;
          uint64_t v27 = 0LL;
          sub_1000041AC((uint64_t)v26);
          sub_1000041AC((uint64_t)v26);
          unsigned __int8 v17 = *(_BYTE *)a3;
          *(_BYTE *)a3 = v26[0];
          v26[0] = v17;
          uint64_t v18 = *(void *)(a3 + 8);
          *(void *)(a3 + sub_100007004((uint64_t)v9 + 8) = v27;
          uint64_t v27 = v18;
          sub_1000041AC(a3);
          sub_1000041AC((uint64_t)v26);
          int v19 = v26[0];
        }

        else
        {
          if (*(_BYTE *)a3 != 9)
          {
LABEL_32:
            sub_10001F75C((uint64_t)v38);
            return;
          }

          v24[0] = 0;
          uint64_t v16 = (uint64_t **)&v25;
          uint64_t v25 = 0LL;
          sub_1000041AC((uint64_t)v24);
          sub_1000041AC((uint64_t)v24);
          sub_1000041AC((uint64_t)v24);
          unsigned __int8 v20 = *(_BYTE *)a3;
          *(_BYTE *)a3 = v24[0];
          v24[0] = v20;
          uint64_t v21 = *(void *)(a3 + 8);
          *(void *)(a3 + sub_100007004((uint64_t)v9 + 8) = v25;
          uint64_t v25 = v21;
          sub_1000041AC(a3);
          sub_1000041AC((uint64_t)v24);
          int v19 = v24[0];
        }

        sub_10000425C(v16, v19);
        goto LABEL_32;
      }

      uint64_t v8 = 5LL;
    }

    (*(void (**)(void))(*v7 + 8 * v8))();
    goto LABEL_19;
  }

  char v9 = *(_BYTE *)(a1 + 184);
  *(void *)&v38[40] = 0xAAAAAAAAAAAAAA00LL;
  *(void *)uint64_t v38 = a3;
  memset(&v38[8], 0, 32);
  v38[41] = v9;
  sub_1000896D0(a1, (uint64_t *)v38, a3);
  sub_1000041AC(a3);
  if (a2)
  {
    int v10 = sub_1000877C8(a1 + 40);
    *(_DWORD *)(a1 + 32) = v10;
    if (v10 != 15)
    {
      uint64_t v11 = *(void *)(a1 + 72);
      sub_1000891B0(a1 + 40, &v35);
      __int128 v31 = *(_OWORD *)(a1 + 72);
      uint64_t v32 = *(void *)(a1 + 88);
      sub_100005064(v28, "value");
      sub_100089290(a1, 0xFu, (uint64_t)v28, &__p);
      sub_10001AD8C(101, (uint64_t *)&v31, (uint64_t)&__p, &v33);
      sub_10001BE88((uint64_t)v38, v11, (uint64_t)&v35, (uint64_t)&v33);
      v33.__vftable = (std::exception_vtbl *)off_100125390;
      std::runtime_error::~runtime_error(&v34);
      std::exception::~exception(&v33);
      if (v29 < 0) {
        operator delete(v28[0]);
      }
    }
  }

  if (v38[40])
  {
    v22[0] = 9;
    uint64_t v23 = 0LL;
    sub_1000041AC((uint64_t)v22);
    sub_1000041AC((uint64_t)v22);
    unsigned __int8 v12 = *(_BYTE *)a3;
    *(_BYTE *)a3 = v22[0];
    v22[0] = v12;
    uint64_t v13 = *(uint64_t **)(a3 + 8);
    *(void *)(a3 + sub_100007004((uint64_t)v9 + 8) = v23;
    uint64_t v23 = v13;
    sub_1000041AC(a3);
    sub_1000041AC((uint64_t)v22);
    sub_10000425C(&v23, v22[0]);
  }

  if (*(void *)&v38[8])
  {
    *(void *)&v38[16] = *(void *)&v38[8];
    operator delete(*(void **)&v38[8]);
  }

void sub_1000874F8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *__p, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, std::exception a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, void *a36, uint64_t a37, int a38, __int16 a39, char a40, char a41, char a42, uint64_t a43, uint64_t a44, uint64_t a45)
{
  a31.__vftable = (std::exception_vtbl *)off_100125390;
  std::runtime_error::~runtime_error(v45 + 1);
  std::exception::~exception(&a31);
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  unsigned __int8 v48 = *(void **)(v46 - 200);
  if (v48)
  {
    *(void *)(v46 - 192) = v48;
    operator delete(v48);
  }

  _Unwind_Resume(a1);
}

void *sub_100087640(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = a1;
    goto LABEL_5;
  }

  if (v2)
  {
    uint64_t v3 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }

  return a1;
}

uint64_t sub_100087694(uint64_t a1, _OWORD *a2, uint64_t a3, char a4)
{
  uint64_t v7 = sub_1000123E4(a1, a3);
  *(_DWORD *)(v7 + 32) = 0;
  uint64_t v8 = v7 + 40;
  *(_OWORD *)(v7 + 40) = *a2;
  *(void *)(v7 + 56) = -1LL;
  *(_BYTE *)(v7 + 64) = 0;
  *(_OWORD *)(v7 + 72) = 0u;
  *(_OWORD *)(v7 + 8sub_100007004((uint64_t)v9 + 8) = 0u;
  *(_OWORD *)(v7 + 104) = 0u;
  *(_OWORD *)(v7 + 120) = 0u;
  *(void *)(v7 + 136) = 0LL;
  *(void *)(v7 + 144) = "";
  *(void *)(v7 + 160) = 0LL;
  *(void *)(v7 + 16sub_100007004((uint64_t)v9 + 8) = 0LL;
  *(void *)(v7 + 152) = 0LL;
  *(void *)(a1 + 176) = (int)sub_100087770();
  *(_BYTE *)(a1 + 184) = a4;
  *(_DWORD *)(a1 + 32) = sub_1000877C8(v8);
  return a1;
}

void sub_10008772C(_Unwind_Exception *a1)
{
  va_list v4 = (void *)v1[3];
  if (v4 == v1)
  {
    uint64_t v5 = 4LL;
  }

  else
  {
    if (!v4) {
      goto LABEL_6;
    }
    uint64_t v5 = 5LL;
    uint64_t v1 = (void *)v1[3];
  }

  (*(void (**)(void *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(a1);
}

uint64_t sub_100087770()
{
  v0 = localeconv();
  if (!v0) {
    __assert_rtn("get_decimal_point", "lexer.hpp", 136, "loc != nullptr");
  }
  else {
    return 46;
  }
}

uint64_t sub_1000877C8(uint64_t a1)
{
  if (!*(void *)(a1 + 32) && !sub_1000879E8((unsigned __int8 **)a1))
  {
    uint64_t v8 = "invalid BOM; must be 0xEF 0xBB 0xBF if given";
    goto LABEL_19;
  }

  while (2)
  {
    while (1)
    {
      sub_100087A48((unsigned __int8 **)a1);
      uint64_t v2 = *(void *)(a1 + 16);
      if (v2 > 31) {
        break;
      }
      if ((unint64_t)(v2 - 9) >= 2 && v2 != 13)
      {
        goto LABEL_36;
      }
    }

    if (v2 > 90)
    {
      if (v2 <= 109)
      {
        if (v2 == 91) {
          return 8LL;
        }
        if (v2 == 93) {
          return 10LL;
        }
        if (v2 != 102) {
          goto LABEL_36;
        }
        qmemcpy(v9, "false", 5);
        uint64_t v5 = a1;
        unint64_t v6 = 5LL;
        uint64_t v7 = 2LL;
        return sub_100087BAC(v5, (unsigned __int8 *)v9, v6, v7);
      }

      if (v2 <= 122)
      {
        if (v2 == 110)
        {
          v9[0] = 1819047278;
          uint64_t v5 = a1;
          unint64_t v6 = 4LL;
          uint64_t v7 = 3LL;
        }

        else
        {
          if (v2 != 116) {
            goto LABEL_36;
          }
          v9[0] = 1702195828;
          uint64_t v5 = a1;
          unint64_t v6 = 4LL;
          uint64_t v7 = 1LL;
        }

        return sub_100087BAC(v5, (unsigned __int8 *)v9, v6, v7);
      }

      if (v2 == 123) {
        return 9LL;
      }
      if (v2 == 125) {
        return 11LL;
      }
LABEL_36:
      uint64_t v8 = "invalid literal";
LABEL_19:
      *(void *)(a1 + 104) = v8;
      return 14LL;
    }

    switch(v2)
    {
      case ' ':
        continue;
      case '""':
        uint64_t result = sub_100087C2C(a1);
        break;
      case ',':
        uint64_t result = 13LL;
        break;
      case '-':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        uint64_t result = sub_1000880FC(a1);
        break;
      case ':':
        uint64_t result = 12LL;
        break;
      default:
        goto LABEL_36;
    }

    return result;
  }

BOOL sub_1000879E8(unsigned __int8 **a1)
{
  if (sub_100087A48(a1) == 239)
  {
    return sub_100087A48(a1) == 187 && sub_100087A48(a1) == 191;
  }

  else
  {
    sub_1000884EC((uint64_t)a1);
    return 1LL;
  }

uint64_t sub_100087A48(unsigned __int8 **a1)
{
  *((int64x2_t *)a1 + 2) = vaddq_s64(*((int64x2_t *)a1 + 2), vdupq_n_s64(1uLL));
  if (*((_BYTE *)a1 + 24))
  {
    *((_BYTE *)a1 + 24) = 0;
    uint64_t v2 = (uint64_t)a1[2];
  }

  else
  {
    uint64_t v3 = *a1;
    if (*a1 == a1[1])
    {
      uint64_t v2 = -1LL;
    }

    else
    {
      uint64_t v2 = *v3;
      *a1 = v3 + 1;
    }

    a1[2] = (unsigned __int8 *)v2;
  }

  if (v2 == -1) {
    return -1LL;
  }
  uint64_t v5 = a1[8];
  unint64_t v4 = (unint64_t)a1[9];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = a1 + 7;
    unint64_t v8 = (unint64_t)a1[7];
    char v9 = &v5[-v8];
    uint64_t v10 = (uint64_t)&v5[-v8 + 1];
    if (v10 < 0) {
      sub_1000046F8();
    }
    unint64_t v11 = v4 - v8;
    if (2 * v11 > v10) {
      uint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v12 = v10;
    }
    if (v12) {
      uint64_t v13 = (unsigned __int8 *)operator new(v12);
    }
    else {
      uint64_t v13 = 0LL;
    }
    int v14 = &v13[v12];
    v9[(void)v13] = v2;
    uint64_t v6 = (uint64_t)&v9[(void)v13 + 1];
    if (v5 == (unsigned __int8 *)v8)
    {
      uint64_t v13 = &v9[(void)v13];
    }

    else
    {
      uint64_t v15 = &v5[~v8];
      do
      {
        unsigned __int8 v16 = *--v5;
        (v15--)[(void)v13] = v16;
      }

      while (v5 != (unsigned __int8 *)v8);
      uint64_t v5 = *v7;
    }

    a1[7] = v13;
    a1[8] = (unsigned __int8 *)v6;
    a1[9] = v14;
    if (v5) {
      operator delete(v5);
    }
  }

  else
  {
    *uint64_t v5 = v2;
    uint64_t v6 = (uint64_t)(v5 + 1);
  }

  a1[8] = (unsigned __int8 *)v6;
  uint64_t result = (uint64_t)a1[2];
  if (result == 10)
  {
    uint64_t v18 = (uint64_t)(a1[6] + 1);
    a1[5] = 0LL;
    a1[6] = (unsigned __int8 *)v18;
  }

  return result;
}

uint64_t sub_100087BAC(uint64_t a1, unsigned __int8 *a2, unint64_t a3, uint64_t a4)
{
  if (a3 >= 2)
  {
    unint64_t v6 = a3 - 1;
    uint64_t v7 = a2 + 1;
    while (1)
    {
      unsigned __int8 v8 = sub_100087A48((unsigned __int8 **)a1);
      int v9 = *v7++;
      if (v9 != v8) {
        break;
      }
      if (!--v6) {
        return a4;
      }
    }

    *(void *)(a1 + 104) = "invalid literal";
    return 14LL;
  }

  return a4;
}

uint64_t sub_100087C2C(uint64_t a1)
{
  if (*(void *)(a1 + 16) != 34LL) {
    sub_1000D73AC();
  }
  while (2)
  {
    while (2)
    {
      uint64_t v2 = sub_100087A48((unsigned __int8 **)a1) + 1;
      uint64_t result = 4LL;
      unint64_t v4 = "invalid string: missing closing quote";
      switch(v2)
      {
        case 0LL:
          goto LABEL_82;
        case 1LL:
          unint64_t v4 = "invalid string: control character U+0000 (NUL) must be escaped to \\u0000";
          goto LABEL_82;
        case 2LL:
          unint64_t v4 = "invalid string: control character U+0001 (SOH) must be escaped to \\u0001";
          goto LABEL_82;
        case 3LL:
          unint64_t v4 = "invalid string: control character U+0002 (STX) must be escaped to \\u0002";
          goto LABEL_82;
        case 4LL:
          unint64_t v4 = "invalid string: control character U+0003 (ETX) must be escaped to \\u0003";
          goto LABEL_82;
        case 5LL:
          unint64_t v4 = "invalid string: control character U+0004 (EOT) must be escaped to \\u0004";
          goto LABEL_82;
        case 6LL:
          unint64_t v4 = "invalid string: control character U+0005 (ENQ) must be escaped to \\u0005";
          goto LABEL_82;
        case 7LL:
          unint64_t v4 = "invalid string: control character U+0006 (ACK) must be escaped to \\u0006";
          goto LABEL_82;
        case 8LL:
          unint64_t v4 = "invalid string: control character U+0007 (BEL) must be escaped to \\u0007";
          goto LABEL_82;
        case 9LL:
          unint64_t v4 = "invalid string: control character U+0008 (BS) must be escaped to \\u0008 or \\b";
          goto LABEL_82;
        case 10LL:
          unint64_t v4 = "invalid string: control character U+0009 (HT) must be escaped to \\u0009 or \\t";
          goto LABEL_82;
        case 11LL:
          unint64_t v4 = "invalid string: control character U+000A (LF) must be escaped to \\u000A or \\n";
          goto LABEL_82;
        case 12LL:
          unint64_t v4 = "invalid string: control character U+000B (VT) must be escaped to \\u000B";
          goto LABEL_82;
        case 13LL:
          unint64_t v4 = "invalid string: control character U+000C (FF) must be escaped to \\u000C or \\f";
          goto LABEL_82;
        case 14LL:
          unint64_t v4 = "invalid string: control character U+000D (CR) must be escaped to \\u000D or \\r";
          goto LABEL_82;
        case 15LL:
          unint64_t v4 = "invalid string: control character U+000E (SO) must be escaped to \\u000E";
          goto LABEL_82;
        case 16LL:
          unint64_t v4 = "invalid string: control character U+000F (SI) must be escaped to \\u000F";
          goto LABEL_82;
        case 17LL:
          unint64_t v4 = "invalid string: control character U+0010 (DLE) must be escaped to \\u0010";
          goto LABEL_82;
        case 18LL:
          unint64_t v4 = "invalid string: control character U+0011 (DC1) must be escaped to \\u0011";
          goto LABEL_82;
        case 19LL:
          unint64_t v4 = "invalid string: control character U+0012 (DC2) must be escaped to \\u0012";
          goto LABEL_82;
        case 20LL:
          unint64_t v4 = "invalid string: control character U+0013 (DC3) must be escaped to \\u0013";
          goto LABEL_82;
        case 21LL:
          unint64_t v4 = "invalid string: control character U+0014 (DC4) must be escaped to \\u0014";
          goto LABEL_82;
        case 22LL:
          unint64_t v4 = "invalid string: control character U+0015 (NAK) must be escaped to \\u0015";
          goto LABEL_82;
        case 23LL:
          unint64_t v4 = "invalid string: control character U+0016 (SYN) must be escaped to \\u0016";
          goto LABEL_82;
        case 24LL:
          unint64_t v4 = "invalid string: control character U+0017 (ETB) must be escaped to \\u0017";
          goto LABEL_82;
        case 25LL:
          unint64_t v4 = "invalid string: control character U+0018 (CAN) must be escaped to \\u0018";
          goto LABEL_82;
        case 26LL:
          unint64_t v4 = "invalid string: control character U+0019 (EM) must be escaped to \\u0019";
          goto LABEL_82;
        case 27LL:
          unint64_t v4 = "invalid string: control character U+001A (SUB) must be escaped to \\u001A";
          goto LABEL_82;
        case 28LL:
          unint64_t v4 = "invalid string: control character U+001B (ESC) must be escaped to \\u001B";
          goto LABEL_82;
        case 29LL:
          unint64_t v4 = "invalid string: control character U+001C (FS) must be escaped to \\u001C";
          goto LABEL_82;
        case 30LL:
          unint64_t v4 = "invalid string: control character U+001D (GS) must be escaped to \\u001D";
          goto LABEL_82;
        case 31LL:
          unint64_t v4 = "invalid string: control character U+001E (RS) must be escaped to \\u001E";
          goto LABEL_82;
        case 32LL:
          unint64_t v4 = "invalid string: control character U+001F (US) must be escaped to \\u001F";
          goto LABEL_82;
        case 33LL:
        case 34LL:
        case 36LL:
        case 37LL:
        case 38LL:
        case 39LL:
        case 40LL:
        case 41LL:
        case 42LL:
        case 43LL:
        case 44LL:
        case 45LL:
        case 46LL:
        case 47LL:
        case 48LL:
        case 49LL:
        case 50LL:
        case 51LL:
        case 52LL:
        case 53LL:
        case 54LL:
        case 55LL:
        case 56LL:
        case 57LL:
        case 58LL:
        case 59LL:
        case 60LL:
        case 61LL:
        case 62LL:
        case 63LL:
        case 64LL:
        case 65LL:
        case 66LL:
        case 67LL:
        case 68LL:
        case 69LL:
        case 70LL:
        case 71LL:
        case 72LL:
        case 73LL:
        case 74LL:
        case 75LL:
        case 76LL:
        case 77LL:
        case 78LL:
        case 79LL:
        case 80LL:
        case 81LL:
        case 82LL:
        case 83LL:
        case 84LL:
        case 85LL:
        case 86LL:
        case 87LL:
        case 88LL:
        case 89LL:
        case 90LL:
        case 91LL:
        case 92LL:
        case 94LL:
        case 95LL:
        case 96LL:
        case 97LL:
        case 98LL:
        case 99LL:
        case 100LL:
        case 101LL:
        case 102LL:
        case 103LL:
        case 104LL:
        case 105LL:
        case 106LL:
        case 107LL:
        case 108LL:
        case 109LL:
        case 110LL:
        case 111LL:
        case 112LL:
        case 113LL:
        case 114LL:
        case 115LL:
        case 116LL:
        case 117LL:
        case 118LL:
        case 119LL:
        case 120LL:
        case 121LL:
        case 122LL:
        case 123LL:
        case 124LL:
        case 125LL:
        case 126LL:
        case 127LL:
        case 128LL:
          std::string::value_type v5 = *(_BYTE *)(a1 + 16);
          goto LABEL_4;
        case 35LL:
          return result;
        case 93LL:
          uint64_t v11 = sub_100087A48((unsigned __int8 **)a1);
          unint64_t v4 = "invalid string: forbidden character after backslash";
          if (v11 <= 97)
          {
            switch(v11)
            {
              case '""':
                std::string::value_type v5 = 34;
                break;
              case '/':
                std::string::value_type v5 = 47;
                break;
              case '\\':
                std::string::value_type v5 = 92;
                break;
              default:
                goto LABEL_82;
            }

            goto LABEL_4;
          }

          break;
        case 195LL:
        case 196LL:
        case 197LL:
        case 198LL:
        case 199LL:
        case 200LL:
        case 201LL:
        case 202LL:
        case 203LL:
        case 204LL:
        case 205LL:
        case 206LL:
        case 207LL:
        case 208LL:
        case 209LL:
        case 210LL:
        case 211LL:
        case 212LL:
        case 213LL:
        case 214LL:
        case 215LL:
        case 216LL:
        case 217LL:
        case 218LL:
        case 219LL:
        case 220LL:
        case 221LL:
        case 222LL:
        case 223LL:
        case 224LL:
          __int128 v16 = xmmword_1000F7A40;
          uint64_t v6 = a1;
          unint64_t v7 = 2LL;
          goto LABEL_19;
        case 225LL:
          unsigned __int8 v8 = &xmmword_1000F7738;
          goto LABEL_7;
        case 226LL:
        case 227LL:
        case 228LL:
        case 229LL:
        case 230LL:
        case 231LL:
        case 232LL:
        case 233LL:
        case 234LL:
        case 235LL:
        case 236LL:
        case 237LL:
        case 239LL:
        case 240LL:
          unsigned __int8 v8 = &xmmword_1000F7758;
          goto LABEL_7;
        case 238LL:
          unsigned __int8 v8 = &xmmword_1000F7778;
LABEL_7:
          __int128 v9 = v8[1];
          __int128 v16 = *v8;
          __int128 v17 = v9;
          uint64_t v6 = a1;
          unint64_t v7 = 4LL;
          goto LABEL_19;
        case 241LL:
          uint64_t v10 = &xmmword_1000F7798;
          goto LABEL_18;
        case 242LL:
        case 243LL:
        case 244LL:
          uint64_t v10 = &xmmword_1000F77C8;
          goto LABEL_18;
        case 245LL:
          uint64_t v10 = &xmmword_1000F77F8;
LABEL_18:
          __int128 v12 = v10[1];
          __int128 v16 = *v10;
          __int128 v17 = v12;
          __int128 v18 = v10[2];
          uint64_t v6 = a1;
          unint64_t v7 = 6LL;
LABEL_19:
          continue;
        default:
          unint64_t v4 = "invalid string: ill-formed UTF-8 byte";
          goto LABEL_82;
      }

      break;
    }

    switch(v11)
    {
      case 'n':
        std::string::value_type v5 = 10;
        goto LABEL_4;
      case 'o':
      case 'p':
      case 'q':
      case 's':
        goto LABEL_82;
      case 'r':
        std::string::value_type v5 = 13;
        goto LABEL_4;
      case 't':
        std::string::value_type v5 = 9;
        goto LABEL_4;
      case 'u':
        unsigned int v13 = sub_100088614(a1);
        if (v13 == -1) {
          goto LABEL_85;
        }
        unsigned int v14 = v13;
        if ((v13 & 0xFFFFFC00) != 0xD800)
        {
          if ((v13 & 0xFFFFFC00) == 0xDC00)
          {
            unint64_t v4 = "invalid string: surrogate U+DC00..U+DFFF must follow U+D800..U+DBFF";
            goto LABEL_82;
          }

          if (v13 >= 0x110000) {
            sub_1000D7384();
          }
          if (v13 > 0x7F)
          {
            if (v13 <= 0x7FF)
            {
              std::string::push_back((std::string *)(a1 + 80), (v13 >> 6) | 0xC0);
              goto LABEL_39;
            }

            if (!HIWORD(v13))
            {
              std::string::push_back((std::string *)(a1 + 80), (v13 >> 12) | 0xE0);
              goto LABEL_38;
            }

uint64_t sub_1000880FC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if ((unint64_t)(v2 - 49) >= 9)
  {
    if (v2 == 48)
    {
      std::string::push_back((std::string *)(a1 + 80), 48);
      int v4 = 5;
    }

    else
    {
      if (v2 != 45) {
        sub_1000D73D4();
      }
      uint64_t v3 = (std::string *)(a1 + 80);
      std::string::push_back((std::string *)(a1 + 80), 45);
      uint64_t v13 = sub_100087A48((unsigned __int8 **)a1);
      if ((unint64_t)(v13 - 49) < 9)
      {
        uint64_t v2 = *(void *)(a1 + 16);
        int v4 = 6;
        goto LABEL_3;
      }

      if (v13 != 48)
      {
        unsigned int v14 = "invalid number; expected digit after '-'";
        goto LABEL_52;
      }

      std::string::push_back((std::string *)(a1 + 80), *(_BYTE *)(a1 + 16));
      int v4 = 6;
    }

    uint64_t v15 = sub_100087A48((unsigned __int8 **)a1);
    if (v15 == 101 || v15 == 69)
    {
      std::string::value_type v5 = (std::string *)(a1 + 80);
      goto LABEL_9;
    }

    if (v15 != 46) {
      goto LABEL_40;
    }
    std::string::value_type v5 = (std::string *)(a1 + 80);
LABEL_34:
    std::string::push_back(v5, *(_BYTE *)(a1 + 136));
    if ((unint64_t)(sub_100087A48((unsigned __int8 **)a1) - 48) > 9)
    {
      unsigned int v14 = "invalid number; expected digit after '.'";
      goto LABEL_52;
    }

    std::string::value_type v5 = (std::string *)(a1 + 80);
    do
    {
      std::string::push_back((std::string *)(a1 + 80), *(_BYTE *)(a1 + 16));
      uint64_t v16 = sub_100087A48((unsigned __int8 **)a1);
    }

    while ((unint64_t)(v16 - 48) < 0xA);
    if (v16 != 101 && v16 != 69)
    {
LABEL_13:
      sub_1000884EC(a1);
      uint64_t v25 = 0LL;
      *__error() = 0;
      goto LABEL_14;
    }

void sub_1000884E0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000884EC(uint64_t result)
{
  uint64_t v1 = (void *)(result + 40);
  uint64_t v2 = *(void *)(result + 40);
  *(_BYTE *)(result + 24) = 1;
  --*(void *)(result + 32);
  if (v2 || (v1 = (void *)(result + 48), (uint64_t v2 = *(void *)(result + 48)) != 0)) {
    void *v1 = v2 - 1;
  }
  if (*(void *)(result + 16) != -1LL)
  {
    uint64_t v3 = *(void *)(result + 64);
    if (*(void *)(result + 56) == v3) {
      sub_1000D7474();
    }
    *(void *)(result + 64) = v3 - 1;
  }

  return result;
}

void sub_100088554(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0)
  {
    **(_BYTE **)(a1 + 80) = 0;
    *(void *)(a1 + 8sub_100007004((uint64_t)v9 + 8) = 0LL;
  }

  else
  {
    *(_BYTE *)(a1 + 80) = 0;
    *(_BYTE *)(a1 + 103) = 0;
  }

  uint64_t v2 = *(_BYTE **)(a1 + 56);
  *(void *)(a1 + 64) = v2;
  char v3 = *(_BYTE *)(a1 + 16);
  unint64_t v4 = *(void *)(a1 + 72);
  if ((unint64_t)v2 >= v4)
  {
    unint64_t v6 = v4 - (void)v2;
    uint64_t v7 = 2 * v6;
    if (2 * v6 <= 1) {
      uint64_t v7 = 1LL;
    }
    if (v6 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v8 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v8 = v7;
    }
    __int128 v9 = operator new(v8);
    *__int128 v9 = v3;
    std::string::value_type v5 = v9 + 1;
    *(void *)(a1 + 56) = v9;
    *(void *)(a1 + 64) = v9 + 1;
    *(void *)(a1 + 72) = &v9[v8];
    if (v2) {
      operator delete(v2);
    }
  }

  else
  {
    _BYTE *v2 = v3;
    std::string::value_type v5 = v2 + 1;
  }

  *(void *)(a1 + 64) = v5;
}

uint64_t sub_100088614(uint64_t a1)
{
  if (*(void *)(a1 + 16) != 117LL) {
    sub_1000D74C4();
  }
  uint64_t v2 = 0LL;
  LODWORD(v3) = 0;
  __int128 v8 = xmmword_1000F20F0;
  do
  {
    int v4 = *(_DWORD *)((char *)&v8 + v2);
    sub_100087A48((unsigned __int8 **)a1);
    uint64_t v5 = *(void *)(a1 + 16);
    if ((unint64_t)(v5 - 48) >= 0xA)
    {
      if ((unint64_t)(v5 - 65) >= 6)
      {
        int v6 = -87;
      }

      else
      {
        int v6 = -55;
      }
    }

    else
    {
      int v6 = -48;
    }

    uint64_t v3 = (((v6 + (_DWORD)v5) << v4) + v3);
    v2 += 4LL;
  }

  while (v2 != 16);
  return v3;
}

uint64_t sub_100088710(uint64_t a1, unint64_t *a2, unint64_t a3)
{
  if (a3 > 6 || ((1LL << a3) & 0x54) == 0) {
    sub_1000D74EC();
  }
  int v6 = (std::string *)(a1 + 80);
  std::string::push_back((std::string *)(a1 + 80), *(_BYTE *)(a1 + 16));
  uint64_t v7 = &a2[a3];
  while (1)
  {
    sub_100087A48((unsigned __int8 **)a1);
    unint64_t v8 = *(void *)(a1 + 16);
    if (*a2 > v8 || v8 > a2[1]) {
      break;
    }
    std::string::push_back(v6, v8);
    a2 += 2;
    if (a2 == v7) {
      return 1LL;
    }
  }

  uint64_t result = 0LL;
  *(void *)(a1 + 104) = "invalid string: ill-formed UTF-8 byte";
  return result;
}

uint64_t sub_1000887C4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }

  return a1;
}

uint64_t sub_100088804(uint64_t a1, uint64_t *a2)
{
  __int128 v39 = 0LL;
  uint64_t v40 = 0LL;
  uint64_t v41 = 0LL;
  int v4 = (__int128 *)(a1 + 120);
  uint64_t v5 = a1 + 40;
  while (2)
  {
    switch(*(_DWORD *)(a1 + 32))
    {
      case 1:
        LOBYTE(v36.__vftable) = 1;
        sub_10001E39C(a2, (unsigned __int8 *)&v36, 0LL);
        goto LABEL_19;
      case 2:
        LOBYTE(v36.__vftable) = 0;
        sub_10001E39C(a2, (unsigned __int8 *)&v36, 0LL);
        goto LABEL_19;
      case 3:
        v36.__vftable = 0LL;
        sub_10001E6E0(a2, (uint64_t)&v36, 0LL);
        goto LABEL_19;
      case 4:
        sub_10001ED60(a2, (uint64_t)v4, 0LL);
        goto LABEL_19;
      case 5:
        v36.__vftable = *(std::exception_vtbl **)(a1 + 160);
        sub_10001F08C(a2, (uint64_t **)&v36, 0LL);
        goto LABEL_19;
      case 6:
        v36.__vftable = *(std::exception_vtbl **)(a1 + 152);
        sub_10001EA1C(a2, (uint64_t **)&v36, 0LL);
        goto LABEL_19;
      case 7:
        if ((*(void *)(a1 + 168) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000LL)
        {
          v36.__vftable = *(std::exception_vtbl **)(a1 + 168);
          sub_10001E054(a2, (uint64_t **)&v36, 0LL);
          goto LABEL_19;
        }

        uint64_t v27 = *(void *)(a1 + 72);
        sub_1000891B0(v5, &v38);
        sub_1000891B0(v5, &v32);
        uint64_t v28 = std::string::insert(&v32, 0LL, "number overflow parsing '");
        __int128 v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__l.__cap_ = v28->__r_.__value_.__l.__cap_;
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v29;
        v28->__r_.__value_.__l.__size_ = 0LL;
        v28->__r_.__value_.__l.__cap_ = 0LL;
        v28->__r_.__value_.__r.__words[0] = 0LL;
        unsigned __int8 v30 = std::string::append(&__p, "'");
        __int128 v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        std::string::size_type cap = v30->__r_.__value_.__l.__cap_;
        *(_OWORD *)std::runtime_error v34 = v31;
        v30->__r_.__value_.__l.__size_ = 0LL;
        v30->__r_.__value_.__l.__cap_ = 0LL;
        v30->__r_.__value_.__r.__words[0] = 0LL;
        sub_10001CF7C(406, (uint64_t)v34, &v36);
        uint64_t v17 = sub_10001AB68((uint64_t)a2, v27, (uint64_t)&v38, (uint64_t)&v36);
        v36.__vftable = (std::exception_vtbl *)off_100125390;
        std::runtime_error::~runtime_error(&v37);
        std::exception::~exception(&v36);
        if (SHIBYTE(cap) < 0) {
          operator delete(v34[0]);
        }
        goto LABEL_50;
      case 8:
        int v6 = sub_1000877C8(v5);
        *(_DWORD *)(a1 + 32) = v6;
        if (v6 == 10)
        {
          char v7 = sub_10001CE24(a2);
          goto LABEL_13;
        }

        LOBYTE(v36.__vftable) = 1;
        sub_10001C114((uint64_t)&v39, &v36);
        continue;
      case 9:
        if ((sub_10001C588(a2, 0xFFFFFFFFFFFFFFFFLL) & 1) == 0) {
          goto LABEL_56;
        }
        int v8 = sub_1000877C8(v5);
        *(_DWORD *)(a1 + 32) = v8;
        if (v8 != 11)
        {
          if (v8 != 4) {
            goto LABEL_59;
          }
          int v16 = sub_1000877C8(v5);
          *(_DWORD *)(a1 + 32) = v16;
          if (v16 != 12) {
            goto LABEL_60;
          }
          LOBYTE(v36.__vftable) = 0;
          sub_10001C114((uint64_t)&v39, &v36);
          int v15 = sub_1000877C8(v5);
LABEL_37:
          *(_DWORD *)(a1 + 32) = v15;
          continue;
        }

        char v7 = sub_10001C810(a2);
LABEL_13:
        if ((v7 & 1) == 0)
        {
LABEL_56:
          uint64_t v17 = 0LL;
          goto LABEL_44;
        }

void sub_10008903C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, std::exception a30)
{
  a30.__vftable = (std::exception_vtbl *)off_100125390;
  std::runtime_error::~runtime_error(v30 + 1);
  std::exception::~exception(&a30);
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  std::exception v33 = *(void **)(v31 - 96);
  if (v33) {
    operator delete(v33);
  }
  _Unwind_Resume(a1);
}

void sub_1000891B0(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  uint64_t v3 = *(unsigned __int8 **)(a1 + 56);
  for (uint64_t i = *(unsigned __int8 **)(a1 + 64); v3 != i; ++v3)
  {
    unsigned int v5 = *v3;
    if (v5 > 0x1F)
    {
      std::string::push_back(a2, v5);
    }

    else
    {
      char v7 = 0;
      *(void *)__str = 0LL;
      snprintf(__str, 9uLL, "<U+%.4X>", v5);
      std::string::append(a2, __str);
    }
  }

void sub_100089270(_Unwind_Exception *exception_object)
{
}

void sub_100089290(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  uint64_t v8 = *(unsigned __int8 *)(a3 + 23);
  if ((v8 & 0x80u) != 0LL) {
    uint64_t v8 = *(void *)(a3 + 8);
  }
  if (v8)
  {
    std::operator+<char>(&v38, "while parsing ", a3);
    uint64_t v9 = std::string::append(&v38, " ");
    __int128 v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    int64_t cap = v9->__r_.__value_.__l.__cap_;
    __int128 v39 = v10;
    v9->__r_.__value_.__l.__size_ = 0LL;
    v9->__r_.__value_.__l.__cap_ = 0LL;
    v9->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      uint64_t v11 = (const std::string::value_type *)&v39;
    }
    else {
      uint64_t v11 = (const std::string::value_type *)v39;
    }
    if (cap >= 0) {
      std::string::size_type v12 = HIBYTE(cap);
    }
    else {
      std::string::size_type v12 = *((void *)&v39 + 1);
    }
    std::string::append(a4, v11, v12);
    if (SHIBYTE(cap) < 0) {
      operator delete((void *)v39);
    }
  }

  std::string::append(a4, "- ");
  unsigned int v13 = *(_DWORD *)(a1 + 32);
  if (v13 == 14)
  {
    sub_100005064(&v36, *(char **)(a1 + 144));
    int v14 = std::string::append(&v36, "; last read: '");
    __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0LL;
    v14->__r_.__value_.__l.__cap_ = 0LL;
    v14->__r_.__value_.__r.__words[0] = 0LL;
    sub_1000891B0(a1 + 40, &__p);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type size = __p.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    __int128 v18 = std::string::append(&v37, (const std::string::value_type *)p_p, size);
    __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__l.__cap_ = v18->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0LL;
    v18->__r_.__value_.__l.__cap_ = 0LL;
    v18->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v20 = std::string::append(&v38, "'");
    __int128 v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    int64_t cap = v20->__r_.__value_.__l.__cap_;
    __int128 v39 = v21;
    v20->__r_.__value_.__l.__size_ = 0LL;
    v20->__r_.__value_.__l.__cap_ = 0LL;
    v20->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      uint64_t v22 = (const std::string::value_type *)&v39;
    }
    else {
      uint64_t v22 = (const std::string::value_type *)v39;
    }
    if (cap >= 0) {
      std::string::size_type v23 = HIBYTE(cap);
    }
    else {
      std::string::size_type v23 = *((void *)&v39 + 1);
    }
    std::string::append(a4, v22, v23);
    if (SHIBYTE(cap) < 0) {
      operator delete((void *)v39);
    }
    if ((char)v36.__r_.__value_.__s.__size_ < 0)
    {
      uint64_t v24 = (void *)v36.__r_.__value_.__r.__words[0];
      goto LABEL_49;
    }

void sub_1000895F0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, void *__p, uint64_t a29, int a30, __int16 a31, char a32, char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000896D0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v41 = 0LL;
  uint64_t v42 = 0LL;
  uint64_t v43 = 0LL;
  unsigned int v5 = (std::exception_vtbl *)(a1 + 120);
  uint64_t v6 = a1 + 40;
  while (2)
  {
    switch(*(_DWORD *)(a1 + 32))
    {
      case 1:
        LOBYTE(v38.__vftable) = 1;
        sub_100020290(a2, (unsigned __int8 *)&v38, a3);
        goto LABEL_17;
      case 2:
        LOBYTE(v38.__vftable) = 0;
        sub_100020290(a2, (unsigned __int8 *)&v38, a3);
        goto LABEL_17;
      case 3:
        v38.__vftable = 0LL;
        sub_100020594(a2, (uint64_t)&v38, a3);
        goto LABEL_17;
      case 4:
        sub_100020B68(a2, (uint64_t)v5, a3);
        goto LABEL_17;
      case 5:
        v38.__vftable = *(std::exception_vtbl **)(a1 + 160);
        sub_100020E24(a2, (uint64_t *)&v38, a3);
        goto LABEL_17;
      case 6:
        v38.__vftable = *(std::exception_vtbl **)(a1 + 152);
        sub_100020864(a2, (uint64_t *)&v38, a3);
        goto LABEL_17;
      case 7:
        if ((*(void *)(a1 + 168) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000LL)
        {
          v38.__vftable = *(std::exception_vtbl **)(a1 + 168);
          sub_10001FF8C(a2, (uint64_t *)&v38, a3);
          goto LABEL_17;
        }

        uint64_t v29 = *(void *)(a1 + 72);
        sub_1000891B0(v6, &v40);
        sub_1000891B0(v6, &v34);
        unsigned __int8 v30 = std::string::insert(&v34, 0LL, "number overflow parsing '");
        __int128 v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__l.__cap_ = v30->__r_.__value_.__l.__cap_;
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v31;
        v30->__r_.__value_.__l.__size_ = 0LL;
        v30->__r_.__value_.__l.__cap_ = 0LL;
        v30->__r_.__value_.__r.__words[0] = 0LL;
        __int128 v32 = std::string::append(&__p, "'");
        __int128 v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        std::string::size_type cap = v32->__r_.__value_.__l.__cap_;
        *(_OWORD *)std::string v36 = v33;
        v32->__r_.__value_.__l.__size_ = 0LL;
        v32->__r_.__value_.__l.__cap_ = 0LL;
        v32->__r_.__value_.__r.__words[0] = 0LL;
        sub_10001CF7C(406, (uint64_t)v36, &v38);
        uint64_t v19 = sub_10001BE88((uint64_t)a2, v29, (uint64_t)&v40, (uint64_t)&v38);
        v38.__vftable = (std::exception_vtbl *)off_100125390;
        std::runtime_error::~runtime_error(&v39);
        std::exception::~exception(&v38);
        if (SHIBYTE(cap) < 0) {
          operator delete(v36[0]);
        }
        goto LABEL_43;
      case 8:
        int v7 = sub_1000877C8(v6);
        *(_DWORD *)(a1 + 32) = v7;
        if (v7 == 10) {
          goto LABEL_12;
        }
        LOBYTE(v38.__vftable) = 1;
        sub_10001C114((uint64_t)&v41, &v38);
        continue;
      case 9:
        if ((sub_10001F7E8(a2, 0xFFFFFFFFFFFFFFFFLL, a3) & 1) == 0)
        {
LABEL_55:
          uint64_t v19 = 0LL;
          goto LABEL_37;
        }

        int v8 = sub_1000877C8(v6);
        *(_DWORD *)(a1 + 32) = v8;
        if (v8 != 11)
        {
          if (v8 != 4) {
            goto LABEL_51;
          }
          uint64_t v17 = *(uint64_t ***)(*(void *)(a2[2] - 8) + 8LL);
          v38.__vftable = v5;
          a2[4] = (uint64_t)(sub_10001DE5C( v17,  (const void **)&v5->~exception,  (uint64_t)&unk_1000F5000,  (__int128 **)&v38)
                          + 7);
          int v18 = sub_1000877C8(v6);
          *(_DWORD *)(a1 + 32) = v18;
          if (v18 != 12) {
            goto LABEL_54;
          }
          LOBYTE(v38.__vftable) = 0;
          sub_10001C114((uint64_t)&v41, &v38);
          int v16 = sub_1000877C8(v6);
LABEL_32:
          *(_DWORD *)(a1 + 32) = v16;
          continue;
        }

void sub_100089F28( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, std::exception a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, void *a35, uint64_t a36, int a37, __int16 a38, char a39, char a40)
{
  a30.__vftable = (std::exception_vtbl *)off_100125390;
  std::runtime_error::~runtime_error(v40 + 1);
  std::exception::~exception(&a30);
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  uint64_t v43 = *(void **)(v41 - 112);
  if (v43) {
    operator delete(v43);
  }
  _Unwind_Resume(a1);
}

void sub_10008A09C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10012AAC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10008A0AC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10012AAC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_10008A0CC(uint64_t a1)
{
  return sub_1000D1204(a1 + 24);
}

__n128 sub_10008A0E0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &off_10012AB18;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + sub_100007004((uint64_t)v9 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_10008A120(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10012AB18;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + sub_100007004((uint64_t)v9 + 8) = result;
  return result;
}

uint64_t sub_10008A148(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  sub_10008A338(v6, v2, 16);
  if (v6[16])
  {
    sub_10006FFBC((uint64_t *)v6, *(void *)(a1 + 16));
  }

  else
  {
    uint64_t v3 = (os_log_s *)qword_100131780;
    if (os_log_type_enabled((os_log_t)qword_100131780, OS_LOG_TYPE_ERROR)) {
      sub_1000DE31C(a1 + 8, v3, v4);
    }
    **(_BYTE **)(a1 + 24) = 0;
  }

  std::filebuf::~filebuf(&v6[1]);
  return std::ios::~ios(&v6[52]);
}

void sub_10008A258( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    int v10 = (os_log_s *)qword_100131780;
    if (os_log_type_enabled((os_log_t)qword_100131780, OS_LOG_TYPE_ERROR)) {
      sub_1000DE398(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    **(_BYTE **)(v9 + 24) = 0;
    __cxa_end_catch();
    JUMPOUT(0x10008A1ECLL);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_10008A2F0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void (**sub_10008A32C())(std::__shared_weak_count *__hidden this, const std::type_info *)
{
}

void (__cdecl ***sub_10008A338( void (__cdecl ***a1)(std::ofstream *__hidden this), uint64_t a2, int a3))(std::ofstream *__hidden this)
{
  uint64_t v6 = a1 + 1;
  *a1 = v7;
  *(void *)((char *)*(v7 - 3) + (void)asub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = v8;
  uint64_t v9 = (std::ios_base *)((char *)*(*a1 - 3) + (void)a1);
  std::ios_base::init(v9, a1 + 1);
  v9[1].__vftable = 0LL;
  v9[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf(v6);
  if (!std::filebuf::open(v6, a2, a3 | 0x10u)) {
    std::ios_base::clear( (std::ios_base *)((char *)*(*a1 - 3) + (void)a1),  *(_DWORD *)((char *)*(*a1 - 3) + (void)a1 + 32) | 4);
  }
  return a1;
}

void sub_10008A408(_Unwind_Exception *a1)
{
}

void *sub_10008A440@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x80uLL);
  sub_10008A4A8((uint64_t)v4, a1);
  return sub_10008BC50(a2, v4);
}

void sub_10008A48C(void *a1)
{
}

uint64_t sub_10008A4A8(uint64_t a1, uint64_t a2)
{
  dispatch_queue_t v4 = dispatch_queue_create("analyticsd.DaemonPerfManagerQueue", 0LL);
  *(void *)a1 = 0LL;
  *(void *)(a1 + std::ostream::~ostream(v1, v2 + 8) = 0LL;
  *(void *)(a1 + 16) = v4;
  if (v4)
  {
    unsigned int v5 = v4;
    dispatch_retain(v4);
    dispatch_release(v5);
  }

  sub_10003A4E8(a1 + 24, a2);
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 104) = 0LL;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8std::ostream::~ostream(v1, v2 + 8) = 0u;
  *(std::chrono::system_clock::time_point *)(a1 + 112) = std::chrono::system_clock::now();
  *(_WORD *)(a1 + 120) = 1;
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  int v8 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_100093004((uint64_t)&v7);
  sub_1000041AC((uint64_t)&v7);
  sub_10000425C(&v8, v7);
  return a1;
}

void sub_10008A590(_Unwind_Exception *a1)
{
  unsigned int v5 = *(void **)(v1 + 48);
  if (v5 == v2)
  {
    uint64_t v6 = 4LL;
    unsigned int v5 = v2;
  }

  else
  {
    if (!v5) {
      goto LABEL_6;
    }
    uint64_t v6 = 5LL;
  }

  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  sub_100022C54(v1);
  _Unwind_Resume(a1);
}

void sub_10008A5DC(void *a1@<X0>, dispatch_group_t *a2@<X8>)
{
  dispatch_group_t v4 = dispatch_group_create();
  unsigned int v5 = v4;
  *a2 = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v5);
  }

  unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000CF18(&v16, a1);
  uint64_t v6 = operator new(0x10uLL);
  void *v6 = a1;
  v6[1] = v5;
  unint64_t v7 = (dispatch_queue_s *)a1[2];
  unint64_t v8 = v16;
  unint64_t v9 = v17;
  if (v17)
  {
    int v10 = (unint64_t *)(v17 + 8);
    do
      unint64_t v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }

  uint64_t v12 = operator new(0x18uLL);
  *uint64_t v12 = v6;
  v12[1] = v8;
  void v12[2] = v9;
  dispatch_async_f(v7, v12, (dispatch_function_t)sub_10008BE3C);
  uint64_t v13 = (std::__shared_weak_count *)v17;
  if (v17)
  {
    uint64_t v14 = (unint64_t *)(v17 + 8);
    do
      unint64_t v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

void sub_10008A6F8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10008A708(uint64_t a1)
{
  uint64_t v3 = a1;
  uint64_t v1 = *(dispatch_queue_s **)(a1 + 16);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 0x40000000LL;
  void v4[2] = sub_10008BED8;
  v4[3] = &unk_10012ABE8;
  v4[4] = a1;
  v4[5] = &v3;
  unsigned int v5 = v4;
  block[0] = _NSConcreteStackBlock;
  unsigned __int8 v7 = -86;
  block[1] = 0x40000000LL;
  block[2] = sub_10008BEE4;
  block[3] = &unk_10012AC08;
  block[4] = &v7;
  block[5] = &v5;
  dispatch_sync(v1, block);
  return v7;
}

uint64_t sub_10008A7CC(uint64_t a1)
{
  uint64_t v3 = a1;
  uint64_t v1 = *(dispatch_queue_s **)(a1 + 16);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 0x40000000LL;
  void v4[2] = sub_10008BF18;
  v4[3] = &unk_10012AC28;
  v4[4] = a1;
  v4[5] = &v3;
  unsigned int v5 = v4;
  block[0] = _NSConcreteStackBlock;
  unsigned __int8 v7 = -86;
  block[1] = 0x40000000LL;
  block[2] = sub_10008BEE4;
  block[3] = &unk_10012AC08;
  block[4] = &v7;
  block[5] = &v5;
  dispatch_sync(v1, block);
  return v7;
}

BOOL sub_10008A890(uint64_t a1)
{
  v2.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v3 = *(void *)(a1 + 112);
  if (v2.__d_.__rep_ >= v3)
  {
    sub_100093004((uint64_t)v7);
    sub_100005064(__p, "perf_check_throttle");
    *(void *)(a1 + 112) = v2.__d_.__rep_ + 1000000 * sub_10008A99C(v7, (const void **)__p, (uint64_t)&unk_1000F7A60);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    sub_1000041AC((uint64_t)v7);
    sub_10000425C(&v8, v7[0]);
  }

  return v2.__d_.__rep_ < v3;
}

void sub_10008A968( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_10000417C(&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_10008A99C(char *a1, const void **a2, uint64_t a3)
{
  if (*a1 != 1)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    int v10 = (char *)sub_10000528C(a1);
    sub_100005064(v13, v10);
    unint64_t v11 = std::string::insert((std::string *)v13, 0LL, "cannot use value() with ");
    __int128 v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    *(void *)&__int128 v16 = v11->__r_.__value_.__l.__cap_;
    __int128 v15 = v12;
    v11->__r_.__value_.__l.__size_ = 0LL;
    v11->__r_.__value_.__l.__cap_ = 0LL;
    v11->__r_.__value_.__r.__words[0] = 0LL;
    sub_100005128(306, (uint64_t)&v15, exception);
  }

  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v15 = v5;
  __int128 v16 = v5;
  sub_10003CED0((uint64_t)a1, a2, (uint64_t)&v15);
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  v13[0] = v6;
  v13[1] = v6;
  sub_100008B44(v13, (uint64_t)a1);
  sub_100008AC8((unsigned __int8 **)v13);
  unint64_t v8 = sub_100008924((unsigned __int8 **)&v15);
  *(void *)&v13[0] = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FF7C(v8, (uint64_t *)v13);
  return *(void *)&v13[0];
}

void sub_10008AAF4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
}

__n128 sub_10008AB5C(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10008BF24(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }

  __n128 result = *a2;
  *(__n128 *)(*(void *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8LL)) + 16LL * v7) = *a2;
  ++a1[5];
  return result;
}

void *sub_10008ABE4(void *a1)
{
  unint64_t v2 = a1[11];
  uint64_t v3 = a1[8];
  uint64_t v4 = (void *)(v3 + 8 * (v2 >> 8));
  if (a1[9] == v3)
  {
    uint64_t v6 = 0LL;
  }

  else
  {
    uint64_t v5 = (void *)(*v4 + 16LL * v2);
    uint64_t v6 = *(void *)(v3 + (((a1[12] + v2) >> 5) & 0x7FFFFFFFFFFFFF8LL))
       + 16LL * (*((_BYTE *)a1 + 96) + v2);
    if (v5 != (void *)v6)
    {
      while (!sub_10008C26C(*v5, v5[1]))
      {
        v5 += 2;
        if ((void *)((char *)v5 - *v4) == (void *)4096)
        {
          unint64_t v7 = (void *)v4[1];
          ++v4;
          uint64_t v5 = v7;
        }

        if (v5 == (void *)v6) {
          goto LABEL_18;
        }
      }
    }

    if (v5 != (void *)v6)
    {
      unint64_t v8 = v5;
      unint64_t v9 = v4;
      while (1)
      {
        v8 += 2;
        if ((void *)((char *)v8 - *v9) == (void *)4096)
        {
          int v10 = (void *)v9[1];
          ++v9;
          unint64_t v8 = v10;
        }

        if (v8 == (void *)v6) {
          break;
        }
        if (!sub_10008C26C(*v8, v8[1]))
        {
          *(_OWORD *)uint64_t v5 = *(_OWORD *)v8;
          v5 += 2;
          if ((void *)((char *)v5 - *v4) == (void *)4096)
          {
            unint64_t v11 = (void *)v4[1];
            ++v4;
            uint64_t v5 = v11;
          }
        }
      }

      uint64_t v6 = (uint64_t)v5;
    }
  }

void *sub_10008AD20(void *a1, char *a2, uint64_t a3, char *a4, uint64_t a5)
{
  if (a5 == a3) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = ((a5 - *(void *)a4) >> 4) + 32 * (a4 - a2) - ((a3 - *(void *)a2) >> 4);
  }
  unint64_t v7 = a1[4];
  uint64_t v8 = a1[1];
  unint64_t v9 = (char *)(v8 + 8 * (v7 >> 8));
  if (a1[2] == v8) {
    uint64_t v10 = 0LL;
  }
  else {
    uint64_t v10 = *(void *)v9 + 16LL * v7;
  }
  std::string v36 = (char **)v9;
  std::string v37 = (char *)v10;
  if (v10 == a3) {
    unint64_t v11 = 0LL;
  }
  else {
    unint64_t v11 = ((a3 - *(void *)a2) >> 4) + 32 * (a2 - v9) - ((v10 - *(void *)v9) >> 4);
  }
  unint64_t v12 = (char **)sub_10008C37C((uint64_t)&v36, v11);
  unint64_t v14 = v13;
  v35.n128_u64[0] = (unint64_t)v12;
  v35.n128_u64[1] = (unint64_t)v13;
  if (v6 >= 1)
  {
    if (v11 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      uint64_t v21 = v36;
      uint64_t v22 = v37;
      uint64_t v23 = sub_10008C37C((uint64_t)&v35, v6);
      v24.n128_u64[0] = 0xAAAAAAAAAAAAAAAALL;
      v24.n128_u64[1] = 0xAAAAAAAAAAAAAAAALL;
      __n128 v38 = v24;
      __n128 v39 = v24;
      sub_10008C4A0(v21, v22, v12, v14, v23, v25, &v38);
      uint64_t v26 = v37;
      if (v37 != (char *)v39.n128_u64[1])
      {
        uint64_t v27 = v36;
        do
        {
          v26 += 16;
          std::string v37 = v26;
          if (v26 - *v27 == 4096)
          {
            uint64_t v28 = v27[1];
            ++v27;
            uint64_t v26 = v28;
            std::string v36 = v27;
            std::string v37 = v28;
          }
        }

        while (v26 != (char *)v39.n128_u64[1]);
      }

      uint64_t v29 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v29;
    }

    else
    {
      uint64_t v15 = (char **)sub_10008C37C((uint64_t)&v35, v6);
      unint64_t v17 = a1[4] + a1[5];
      uint64_t v18 = a1[1];
      uint64_t v19 = (char **)(v18 + 8 * (v17 >> 8));
      if (a1[2] == v18) {
        uint64_t v20 = 0LL;
      }
      else {
        uint64_t v20 = &(*v19)[16 * v17];
      }
      __n128 v38 = v35;
      sub_10008C6BC(v15, v16, v19, v20, (uint64_t)&v38);
      a1[5] -= v6;
      while ((sub_10008C434(a1, 1) & 1) != 0)
        ;
    }
  }

  unint64_t v30 = a1[4];
  uint64_t v31 = a1[1];
  __int128 v32 = (void *)(v31 + 8 * (v30 >> 8));
  if (a1[2] == v31) {
    uint64_t v33 = 0LL;
  }
  else {
    uint64_t v33 = *v32 + 16LL * v30;
  }
  v38.n128_u64[0] = (unint64_t)v32;
  v38.n128_u64[1] = v33;
  return sub_10008C37C((uint64_t)&v38, v11);
}

BOOL sub_10008AF9C(uint64_t a1)
{
  if (!*(void *)(a1 + 96))
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_100131958, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    sub_1000DE3F8();
    return 0LL;
  }

  time_t v2 = sub_10004398C();
  int v3 = sub_1000A3A0C();
  sub_100093004((uint64_t)&v26);
  sub_100005064(__p, "restart_allow_scale_memory_limit");
  double v4 = sub_10008B430((char *)&v26, (const void **)__p, (uint64_t)&unk_1000F7A68);
  if ((v29[9] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  double v5 = v4 * (double)v3;
  sub_1000041AC((uint64_t)&v26);
  sub_10000425C(&v27, v26);
  double v6 = sub_10008B5F0((void *)a1);
  unint64_t v7 = (os_log_s *)qword_100131958;
  if (os_log_type_enabled((os_log_t)qword_100131958, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = *(void *)(a1 + 96);
    unint64_t v9 = (int *)(*(void *)(*(void *)(a1 + 64)
    int v10 = *v9;
    LODWORD(v9) = v9[1];
    *(_DWORD *)std::string __p = 67110656;
    *(_DWORD *)&__p[4] = v10;
    *(_WORD *)&__p[8] = 1024;
    *(_DWORD *)&__p[10] = (_DWORD)v9;
    *(_WORD *)uint64_t v29 = 2048;
    *(void *)&v29[2] = v2;
    __int16 v30 = 2048;
    uint64_t v31 = v8;
    __int16 v32 = 2048;
    double v33 = v6;
    __int16 v34 = 1024;
    int v35 = v3;
    __int16 v36 = 2048;
    double v37 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "[Daemon perf] Current: {Memory footprint: %d, Peak: %d, Process uptime: %ld, Samples in window: %lu, Memory Moving Average: %f, Jetsam Limit: %d, Restart Limit: %f}",  __p,  0x3Cu);
  }

  if (*(_BYTE *)(a1 + 121))
  {
    uint64_t v11 = qword_100131958;
    BOOL result = os_log_type_enabled((os_log_t)qword_100131958, OS_LOG_TYPE_INFO);
    if (!result) {
      return result;
    }
    *(_WORD *)std::string __p = 0;
    uint64_t v13 = "[Daemon perf] No restart queued. Restart already in progress";
LABEL_14:
    unint64_t v14 = (os_log_s *)v11;
    os_log_type_t v15 = OS_LOG_TYPE_INFO;
    uint32_t v16 = 2;
LABEL_15:
    _os_log_impl((void *)&_mh_execute_header, v14, v15, v13, __p, v16);
    return 0LL;
  }

  if (*(_BYTE *)(a1 + 120))
  {
    uint64_t v11 = qword_100131958;
    BOOL result = os_log_type_enabled((os_log_t)qword_100131958, OS_LOG_TYPE_INFO);
    if (!result) {
      return result;
    }
    *(_WORD *)std::string __p = 0;
    uint64_t v13 = "[Daemon perf] No restart queued. Restarts are suspended";
    goto LABEL_14;
  }

  if (v6 < 0.0)
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_100131958, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1000DE450();
      return 0LL;
    }

    return result;
  }

  if (v3 < 0)
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_100131958, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1000DE4A8();
      return 0LL;
    }

    return result;
  }

  unint64_t v17 = *(void *)(a1 + 96);
  sub_100093004((uint64_t)&v26);
  sub_100005064(__p, "restart_allow_minumum_samples");
  unint64_t v18 = sub_10008B678((char *)&v26, (const void **)__p, (uint64_t)&unk_1000F7A70);
  if ((v29[9] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  sub_1000041AC((uint64_t)&v26);
  sub_10000425C(&v27, v26);
  if (v17 < v18)
  {
    uint64_t v19 = qword_100131958;
    BOOL result = os_log_type_enabled((os_log_t)qword_100131958, OS_LOG_TYPE_INFO);
    if (!result) {
      return result;
    }
    uint64_t v20 = *(void *)(a1 + 96);
    *(_DWORD *)std::string __p = 134217984;
    *(void *)&__p[4] = v20;
    uint64_t v13 = "[Daemon perf] No restart queued. Not enough samples to evaluate average memory: {Samples in window: %lu}";
    unint64_t v14 = (os_log_s *)v19;
    goto LABEL_27;
  }

  if (v6 > v5)
  {
    v21.__d_.__rep_ = std::chrono::system_clock::from_time_t(v2).__d_.__rep_;
    sub_100093004((uint64_t)&v26);
    sub_100005064(__p, "restart_allow_after");
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v22 = 1000000 * sub_10008A99C((char *)&v26, (const void **)__p, (uint64_t)&unk_1000F7A78);
    if ((v29[9] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    sub_10000417C(&v26);
    if (v22 < v21.__d_.__rep_) {
      return 1LL;
    }
    uint64_t v25 = qword_100131958;
    BOOL result = os_log_type_enabled((os_log_t)qword_100131958, OS_LOG_TYPE_INFO);
    if (!result) {
      return result;
    }
    *(_DWORD *)std::string __p = 134217984;
    *(void *)&__p[4] = v2;
    uint64_t v13 = "[Daemon perf] No restart queued. Process hasn't been alive for long enough to attempt a retart. {Process Uptime: %ld}";
    unint64_t v14 = (os_log_s *)v25;
LABEL_27:
    os_log_type_t v15 = OS_LOG_TYPE_INFO;
    uint32_t v16 = 12;
    goto LABEL_15;
  }

  uint64_t v23 = qword_100131958;
  BOOL v24 = os_log_type_enabled((os_log_t)qword_100131958, OS_LOG_TYPE_DEFAULT);
  BOOL result = 0LL;
  if (v24)
  {
    *(_DWORD *)std::string __p = 134218240;
    *(double *)&__p[4] = v6;
    *(_WORD *)&__p[12] = 2048;
    *(double *)uint64_t v29 = v5;
    uint64_t v13 = "[Daemon perf] No restart queued. Operating below memory limit. {Average memory: %f, Restart Limit: %f}";
    unint64_t v14 = (os_log_s *)v23;
    os_log_type_t v15 = OS_LOG_TYPE_DEFAULT;
    uint32_t v16 = 22;
    goto LABEL_15;
  }

  return result;
}

void sub_10008B3EC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_10000417C((uint64_t **)&a9);
  _Unwind_Resume(a1);
}

double sub_10008B430(char *a1, const void **a2, uint64_t a3)
{
  if (*a1 != 1)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    int v10 = (char *)sub_10000528C(a1);
    sub_100005064(v13, v10);
    uint64_t v11 = std::string::insert((std::string *)v13, 0LL, "cannot use value() with ");
    __int128 v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    *(void *)&__int128 v16 = v11->__r_.__value_.__l.__cap_;
    __int128 v15 = v12;
    v11->__r_.__value_.__l.__size_ = 0LL;
    v11->__r_.__value_.__l.__cap_ = 0LL;
    v11->__r_.__value_.__r.__words[0] = 0LL;
    sub_100005128(306, (uint64_t)&v15, exception);
  }

  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v15 = v5;
  __int128 v16 = v5;
  sub_10003CED0((uint64_t)a1, a2, (uint64_t)&v15);
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  v13[0] = v6;
  v13[1] = v6;
  sub_100008B44(v13, (uint64_t)a1);
  sub_100008AC8((unsigned __int8 **)v13);
  uint64_t v8 = sub_100008924((unsigned __int8 **)&v15);
  *(void *)&v13[0] = -1LL;
  sub_10005A088(v8, (double *)v13);
  return *(double *)v13;
}

void sub_10008B588( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
}

double sub_10008B5F0(void *a1)
{
  unint64_t v1 = a1[12];
  if (!v1) {
    return -1.0;
  }
  uint64_t v2 = a1[8];
  double v3 = 0.0;
  if (a1[9] != v2)
  {
    unint64_t v4 = a1[11];
    __int128 v5 = (char **)(v2 + 8 * (v4 >> 8));
    __int128 v6 = *v5;
    unint64_t v7 = &(*v5)[16 * v4];
    uint64_t v8 = *(void *)(v2 + (((v4 + v1) >> 5) & 0x7FFFFFFFFFFFFF8LL)) + 16LL * (v4 + v1);
    if (v7 != (char *)v8)
    {
      int v9 = 0;
      do
      {
        int v11 = *(_DWORD *)v7;
        v7 += 16;
        int v10 = v11;
        if (v7 - v6 == 4096)
        {
          __int128 v12 = v5[1];
          ++v5;
          __int128 v6 = v12;
          unint64_t v7 = v12;
        }

        v9 += v10;
      }

      while (v7 != (char *)v8);
      double v3 = (double)v9;
    }
  }

  return v3 / (double)v1;
}

uint64_t sub_10008B678(char *a1, const void **a2, uint64_t a3)
{
  if (*a1 != 1)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    int v10 = (char *)sub_10000528C(a1);
    sub_100005064(v13, v10);
    int v11 = std::string::insert((std::string *)v13, 0LL, "cannot use value() with ");
    __int128 v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    *(void *)&__int128 v16 = v11->__r_.__value_.__l.__cap_;
    __int128 v15 = v12;
    v11->__r_.__value_.__l.__size_ = 0LL;
    v11->__r_.__value_.__l.__cap_ = 0LL;
    v11->__r_.__value_.__r.__words[0] = 0LL;
    sub_100005128(306, (uint64_t)&v15, exception);
  }

  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v15 = v5;
  __int128 v16 = v5;
  sub_10003CED0((uint64_t)a1, a2, (uint64_t)&v15);
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  v13[0] = v6;
  v13[1] = v6;
  sub_100008B44(v13, (uint64_t)a1);
  sub_100008AC8((unsigned __int8 **)v13);
  uint64_t v8 = sub_100008924((unsigned __int8 **)&v15);
  *(void *)&v13[0] = 0xAAAAAAAAAAAAAAAALL;
  sub_10008C870(v8, (unint64_t *)v13);
  return *(void *)&v13[0];
}

void sub_10008B7D0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
}

BOOL sub_10008B838(uint64_t a1)
{
  int rep_low = LOBYTE(__t.__d_.__rep_);
  sub_1000041AC((uint64_t)&__t);
  sub_10000425C(&v7, LOBYTE(__t.__d_.__rep_));
  if (!rep_low) {
    return 0LL;
  }
  if (sub_10008A890(a1))
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_100131958, OS_LOG_TYPE_DEBUG);
    if (!result) {
      return result;
    }
    sub_1000DE500();
    return 0LL;
  }

  unint64_t v4 = sub_1000A3844();
  __t.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  time_t v5 = std::chrono::system_clock::to_time_t(&__t);
  return sub_10008B91C(a1, v4, v5);
}

BOOL sub_10008B91C(uint64_t a1, unint64_t a2, unint64_t a3)
{
  int v6 = v10.n128_u8[0];
  sub_1000041AC((uint64_t)&v10);
  sub_10000425C((uint64_t **)&v10.n128_u64[1], v10.n128_u8[0]);
  if (!v6) {
    return 0LL;
  }
  v10.n128_u64[0] = a2;
  v10.n128_u64[1] = a3;
  if ((_DWORD)a2 == -1)
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_100131958, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1000DE564();
      return 0LL;
    }
  }

  else
  {
    sub_10008AB5C((void *)(a1 + 56), &v10);
    sub_10008ABE4((void *)a1);
    BOOL result = sub_10008AF9C(a1);
    if (result)
    {
      uint64_t v8 = (os_log_s *)qword_100131958;
      if (os_log_type_enabled((os_log_t)qword_100131958, OS_LOG_TYPE_DEFAULT))
      {
        v10.n128_u16[0] = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "[Daemon perf] Restart being queued. Operating above memory limit and been alive for long enough",  (uint8_t *)&v10,  2u);
      }

      sub_10008BA7C(a1);
      *(_BYTE *)(a1 + 12sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 1;
      uint64_t v9 = *(void *)(a1 + 48);
      if (!v9) {
        sub_1000129CC();
      }
      (*(void (**)(uint64_t))(*(void *)v9 + 48LL))(v9);
      return 1LL;
    }
  }

  return result;
}

BOOL sub_10008BA7C(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 121);
  if (*(_BYTE *)(a1 + 121))
  {
    if (os_log_type_enabled((os_log_t)qword_100131958, OS_LOG_TYPE_ERROR)) {
      sub_1000DE5BC();
    }
  }

  else if (!*(_BYTE *)(a1 + 120))
  {
    double v3 = (os_log_s *)qword_100131958;
    if (os_log_type_enabled((os_log_t)qword_100131958, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)time_t v5 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "[Daemon perf] Ability to restart suspended",  v5,  2u);
    }

    *(_BYTE *)(a1 + 120) = 1;
  }

  return v1 == 0;
}

BOOL sub_10008BB68(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 121);
  if (*(_BYTE *)(a1 + 121))
  {
    if (os_log_type_enabled((os_log_t)qword_100131958, OS_LOG_TYPE_ERROR)) {
      sub_1000DE614();
    }
  }

  else if (*(_BYTE *)(a1 + 120))
  {
    double v3 = (os_log_s *)qword_100131958;
    if (os_log_type_enabled((os_log_t)qword_100131958, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)time_t v5 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "[Daemon perf] Ability to restart resumed",  v5,  2u);
    }

    *(_BYTE *)(a1 + 120) = 0;
  }

  return v1 == 0;
}

void *sub_10008BC50(void *a1, void *a2)
{
  *a1 = a2;
  unint64_t v4 = operator new(0x20uLL);
  *unint64_t v4 = &off_10012AB98;
  v4[1] = 0LL;
  void v4[2] = 0LL;
  v4[3] = a2;
  a1[1] = v4;
  sub_10000CCC8((uint64_t)a1, a2, (uint64_t)a2);
  return a1;
}

void sub_10008BCA4(void *a1)
{
}

void sub_10008BCC4(_Unwind_Exception *a1)
{
}

void sub_10008BCDC(std::__shared_weak_count *a1)
{
}

void sub_10008BCF0(uint64_t a1)
{
}

uint64_t sub_10008BD04(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

void sub_10008BD44(uint64_t a1)
{
  if (a1)
  {
    sub_10008BDA8((void *)(a1 + 56));
    uint64_t v2 = *(void **)(a1 + 48);
    if (v2 == (void *)(a1 + 24))
    {
      uint64_t v3 = 4LL;
      uint64_t v2 = (void *)(a1 + 24);
    }

    else
    {
      if (!v2)
      {
LABEL_8:
        unint64_t v4 = (void *)sub_100022C54(a1);
        operator delete(v4);
        return;
      }

      uint64_t v3 = 5LL;
    }

    (*(void (**)(void))(*v2 + 8 * v3))();
    goto LABEL_8;
  }

uint64_t sub_10008BDA8(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0LL;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8LL);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }

    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }

  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 128LL;
  }

  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 256LL;
  }

  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    unint64_t v7 = *v2++;
    operator delete(v7);
  }

  return sub_10003C9E0((uint64_t)a1);
}

void sub_10008BE3C(uint64_t **a1)
{
  uint64_t v2 = *a1;
  sub_10008B838(*v2);
  sub_100025588(&v2);
  sub_100007004((uint64_t)(a1 + 1));
  operator delete(a1);
}

void sub_10008BEB4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

BOOL sub_10008BED8(uint64_t a1)
{
  return sub_10008BA7C(**(void **)(a1 + 40));
}

uint64_t sub_10008BEE4(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16LL))();
  **(_BYTE **)(a1 + 32) = result;
  return result;
}

BOOL sub_10008BF18(uint64_t a1)
{
  return sub_10008BB68(**(void **)(a1 + 40));
}

void sub_10008BF24(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int16 v34 = (char *)sub_10001C3B0(v5, v33);
      int v35 = &v34[8 * (v33 >> 2)];
      double v37 = &v34[8 * v36];
      __n128 v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_10008C218( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
}

BOOL sub_10008C26C(int a1, time_t __t)
{
  v2.__d_.__rep_ = std::chrono::system_clock::from_time_t(__t).__d_.__rep_;
  sub_100093004((uint64_t)v8);
  sub_100005064(__p, "window_samples_expire_after");
  uint64_t v3 = sub_10008A99C(v8, (const void **)__p, (uint64_t)"\b\a");
  v4.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  sub_1000041AC((uint64_t)v8);
  sub_10000425C(&v9, v8[0]);
  return v2.__d_.__rep_ + 1000000 * v3 < v4.__d_.__rep_;
}

void sub_10008C344( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_10000417C(&a15);
  _Unwind_Resume(a1);
}

void *sub_10008C37C(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)a1;
  if (a2)
  {
    uint64_t v4 = a2 + ((uint64_t)(*(void *)(a1 + 8) - *result) >> 4);
    if (v4 < 1) {
      result -= (unint64_t)(255 - v4) >> 8;
    }
    else {
      result += (unint64_t)v4 >> 8;
    }
  }

  return result;
}

uint64_t sub_10008C3D8(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x100) {
    a2 = 1;
  }
  if (v2 < 0x200) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8LL;
    *(void *)(a1 + 32) -= 256LL;
  }

  return v4 ^ 1u;
}

uint64_t sub_10008C434(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0LL;
  }
  else {
    uint64_t v4 = 32 * (v2 - v3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x100) {
    a2 = 1;
  }
  if (v5 < 0x200) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8LL;
  }

  return v7 ^ 1u;
}

__n128 sub_10008C4A0@<Q0>( char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, void *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    memset(v20, 170, sizeof(v20));
    sub_10008C604(a2, a4, a5, a6, v20);
  }

  else
  {
    uint64_t v12 = *a3;
    memset(v20, 170, sizeof(v20));
    sub_10008C604(v12, a4, a5, a6, v20);
    uint64_t v13 = (void *)v20[1];
    BOOL v14 = (char *)v20[2];
    for (uint64_t i = a3 - 1; i != a1; --i)
    {
      uint64_t v16 = *i;
      uint64_t v17 = *i + 4096;
      memset(v20, 170, sizeof(v20));
      sub_10008C604(v16, v17, v13, v14, v20);
      uint64_t v13 = (void *)v20[1];
      BOOL v14 = (char *)v20[2];
    }

    uint64_t v18 = *a1 + 4096;
    memset(v20, 170, sizeof(v20));
    sub_10008C604(a2, v18, v13, v14, v20);
  }

  __n128 result = *(__n128 *)&v20[1];
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_10008C604@<X0>(char *a1@<X1>, char *a2@<X2>, void *a3@<X3>, char *a4@<X4>, void *a5@<X8>)
{
  uint64_t v6 = a3;
  if (a1 == a2)
  {
    uint64_t v9 = a1;
  }

  else
  {
    uint64_t v9 = a2;
    uint64_t v10 = *a3;
    uint64_t v11 = a2;
    while (1)
    {
      uint64_t v12 = (uint64_t)&a4[-v10];
      if ((v11 - a1) >> 4 >= v12 >> 4) {
        uint64_t v13 = v12 >> 4;
      }
      else {
        uint64_t v13 = (v11 - a1) >> 4;
      }
      v11 -= 16 * v13;
      a4 -= 16 * v13;
      if (v13) {
        __n128 result = memmove(a4, v11, 16 * v13);
      }
      if (v11 == a1) {
        break;
      }
      uint64_t v15 = *--v6;
      uint64_t v10 = v15;
      a4 = (char *)(v15 + 4096);
    }

    if ((char *)(*v6 + 4096LL) == a4)
    {
      uint64_t v16 = (char *)v6[1];
      ++v6;
      a4 = v16;
    }
  }

  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double sub_10008C6BC(char **a1, char *__src, char **a3, char *a4, uint64_t a5)
{
  if (a1 == a3)
  {
    uint64_t v11 = *(void ***)a5;
    uint64_t v12 = *(char **)(a5 + 8);
    uint64_t v10 = __src;
  }

  else
  {
    uint64_t v8 = a1 + 1;
    sub_10008C7B4(__src, *(char **)(a5 + 8), *a1 + 4096, *(void ***)a5, &v14);
    for (*(_OWORD *)a5 = v15; v8 != a3; *(_OWORD *)a5 = v15)
    {
      uint64_t v9 = *v8++;
      sub_10008C7B4(v9, *(char **)(a5 + 8), v9 + 4096, *(void ***)a5, &v14);
    }

    uint64_t v10 = *a3;
    uint64_t v11 = *(void ***)a5;
    uint64_t v12 = *(char **)(a5 + 8);
  }

  sub_10008C7B4(v10, v12, a4, v11, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

char *sub_10008C7B4@<X0>(char *__src@<X0>, char *__dst@<X3>, char *a3@<X1>, void **a4@<X2>, char **a5@<X8>)
{
  uint64_t v6 = a4;
  if (__src != a3)
  {
    uint64_t v9 = __src;
    uint64_t v6 = a4 + 1;
    uint64_t v10 = (char *)*a4;
    while (1)
    {
      uint64_t v11 = v10 - __dst + 4096;
      uint64_t v12 = (a3 - v9) >> 4 >= v11 >> 4 ? v11 >> 4 : (a3 - v9) >> 4;
      if (v12) {
        __srCC_SHA512_CTX c = (char *)memmove(__dst, v9, 16 * v12);
      }
      v9 += 16 * v12;
      if (v9 == a3) {
        break;
      }
      uint64_t v13 = (char *)*v6++;
      uint64_t v10 = v13;
      __dst = v13;
    }

    __dst += 16 * v12;
    else {
      --v6;
    }
  }

  *a5 = a3;
  a5[1] = (char *)v6;
  a5[2] = __dst;
  return __src;
}

_BYTE *sub_10008C870(_BYTE *result, unint64_t *a2)
{
  uint64_t v2 = result;
  switch(*result)
  {
    case 4:
      unint64_t v3 = result[8];
      break;
    case 5:
    case 6:
      unint64_t v3 = *((void *)result + 1);
      break;
    case 7:
      unint64_t v3 = (unint64_t)*((double *)result + 1);
      break;
    default:
      exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
      unint64_t v5 = (char *)sub_10000528C(v2);
      sub_100005064(&v8, v5);
      uint64_t v6 = std::string::insert(&v8, 0LL, "type must be number, but is ");
      __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      std::string::size_type cap = v6->__r_.__value_.__l.__cap_;
      __int128 v9 = v7;
      v6->__r_.__value_.__l.__size_ = 0LL;
      v6->__r_.__value_.__l.__cap_ = 0LL;
      v6->__r_.__value_.__r.__words[0] = 0LL;
      sub_100005128(302, (uint64_t)&v9, exception);
  }

  *a2 = v3;
  return result;
}

void sub_10008C98C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }

  else if (!v22)
  {
    goto LABEL_8;
  }

  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t sub_10008C9EC(uint64_t a1)
{
  *(void *)a1 = off_10012AC58;
  sub_1000041AC(a1 + 56);
  sub_10000425C((uint64_t **)(a1 + 64), *(unsigned __int8 *)(a1 + 56));
  sub_100007004(a1 + 40);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t sub_10008CA44(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, double a5)
{
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  *(void *)a1 = off_10012AC58;
  *(void *)(a1 + sub_100007004((uint64_t)v9 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)a2;
  *(void *)a2 = 0LL;
  *(void *)(a2 + sub_100007004((uint64_t)v9 + 8) = 0LL;
  uint64_t v8 = a1 + 56;
  if (*(_BYTE *)a4 == 1)
  {
    *(_BYTE *)(a1 + 56) = 1;
    *(void *)(a1 + 64) = *(void *)(a4 + 8);
    sub_1000041AC(a4);
    *(_BYTE *)a4 = 0;
    *(void *)(a4 + sub_100007004((uint64_t)v9 + 8) = 0LL;
  }

  else
  {
    *(_BYTE *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0LL;
    sub_1000041AC(a1 + 56);
  }

  sub_1000041AC(v8);
  *(double *)(a1 + 72) = a5;
  *(_DWORD *)(a1 + 80) = sub_10008CB1C(a1);
  *(void *)(a1 + 8sub_100007004((uint64_t)v9 + 8) = *a3;
  *(_DWORD *)(a1 + 96) = sub_10008CC00(a1);
  *(_BYTE *)(a1 + 100) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 10sub_100007004((uint64_t)v9 + 8) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  return a1;
}

uint64_t sub_10008CB1C(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  sub_100055F38(a1 + 56, "aggPeriod", (uint64_t)&__p);
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  v6[0] = v2;
  v6[1] = v2;
  sub_100008B44(v6, v1);
  sub_100008AC8((unsigned __int8 **)v6);
  uint64_t v4 = sub_10004AA8C(v1, "aggPeriod");
  sub_1000218CC(v4, &__p);
  uint64_t v3 = sub_10000D8AC(&__p);
  return v3;
}

void sub_10008CBF4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

uint64_t sub_10008CC00(uint64_t a1)
{
  uint64_t v1 = (unsigned __int8 *)(a1 + 56);
  BOOL v14 = "budget";
  unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v11 = v2;
  __int128 v12 = v2;
  sub_100008780(a1 + 56, &v14, (uint64_t)&v11);
  uint64_t v6 = v1;
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  unint64_t v10 = 0x8000000000000000LL;
  sub_100008AC8(&v6);
  if (sub_1000087E8((unsigned __int8 **)&v11, &v6))
  {
    uint64_t v3 = (_BYTE *)sub_10009AE9C();
    if (!v3) {
      goto LABEL_6;
    }
  }

  else
  {
    uint64_t v3 = sub_100008924((unsigned __int8 **)&v11);
  }

LABEL_6:
  BOOL v14 = "storage_budget";
  unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v11 = v4;
  __int128 v12 = v4;
  sub_100008780((uint64_t)v1, &v14, (uint64_t)&v11);
  uint64_t v6 = v1;
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  unint64_t v10 = 0x8000000000000000LL;
  sub_100008AC8(&v6);
  if (sub_1000087E8((unsigned __int8 **)&v11, &v6))
  {
    uint64_t v3 = (_BYTE *)sub_10009AE9C();
    if (!v3) {
      return sub_100092688();
    }
  }

  else
  {
    uint64_t v3 = sub_100008924((unsigned __int8 **)&v11);
  }

  if (*v3 - 5 <= 2)
  {
LABEL_11:
    LODWORD(sub_1000226A0(v12, v11) = -1431655766;
    sub_10000DC80(v3, (unsigned int *)&v11);
    return v11;
  }

  return sub_100092688();
}

void sub_10008CD5C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

uint64_t sub_10008CD68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 24);
  if (!v3) {
    sub_1000129CC();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 48LL))(v3);
}

void sub_10008CDE8( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, __int128 buf, int a17, __int16 a18, char a19, char a20, uint64_t a21, __int128 a22)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  if (a2 == 3)
  {
    unint64_t v25 = __cxa_begin_catch(a1);
    uint64_t v26 = qword_100131918;
    if (!os_log_type_enabled((os_log_t)qword_100131918, OS_LOG_TYPE_FAULT)) {
      goto LABEL_24;
    }
    p_p = &__p;
    sub_10008D06C(v23, &__p);
    if (a15 < 0) {
      p_p = __p;
    }
    uint64_t v28 = (*(uint64_t (**)(void *))(*(void *)v25 + 16LL))(v25);
    uint64_t v29 = sub_10008D0C4(v23);
    else {
      uint64_t v30 = *(void *)v29;
    }
    LODWORD(buf) = 136446978;
    *(void *)((char *)&buf + 4) = p_p;
    WORD6(buf) = 2082;
    *(void *)((char *)&buf + 14) = v22;
    a19 = 34;
    a20 = 8;
    a21 = v28;
    LOWORD(a22) = 2082;
    *(void *)((char *)&a22 + 2) = v30;
    __int128 v31 = "[%{public}sTransform] ERROR: Exception (json: %{public}s). Failed to %{public}s for xform: %{public}s";
  }

  else
  {
    __int128 v32 = __cxa_begin_catch(a1);
    uint64_t v26 = qword_100131918;
    BOOL v33 = os_log_type_enabled((os_log_t)qword_100131918, OS_LOG_TYPE_FAULT);
    if (a2 != 2)
    {
      if (!v33) {
        goto LABEL_24;
      }
      uint64_t v40 = &__p;
      sub_10008D06C(v23, &__p);
      if (a15 < 0) {
        uint64_t v40 = __p;
      }
      uint64_t v41 = sub_10008D0C4(v23);
      else {
        uint64_t v42 = *(void *)v41;
      }
      LODWORD(buf) = 136446722;
      *(void *)((char *)&buf + 4) = v40;
      WORD6(buf) = 2082;
      *(void *)((char *)&buf + 14) = v22;
      a19 = 34;
      a20 = 8;
      a21 = v42;
      __int128 v31 = "[%{public}sTransform] ERROR: Exception encountered. Failed to %{public}s for xform: %{public}s";
      __n128 v38 = (os_log_s *)v26;
      uint32_t v39 = 32;
      goto LABEL_33;
    }

    if (!v33) {
      goto LABEL_24;
    }
    __int16 v34 = &__p;
    sub_10008D06C(v23, &__p);
    if (a15 < 0) {
      __int16 v34 = __p;
    }
    uint64_t v35 = (*(uint64_t (**)(void *))(*(void *)v32 + 16LL))(v32);
    uint64_t v36 = sub_10008D0C4(v23);
    else {
      uint64_t v37 = *(void *)v36;
    }
    LODWORD(buf) = 136446978;
    *(void *)((char *)&buf + 4) = v34;
    WORD6(buf) = 2082;
    *(void *)((char *)&buf + 14) = v35;
    a19 = 34;
    a20 = 8;
    a21 = v22;
    LOWORD(a22) = 2082;
    *(void *)((char *)&a22 + 2) = v37;
    __int128 v31 = "[%{public}sTransform] ERROR: Exception (stl: %{public}s). Failed to %{public}s for xform: %{public}s";
  }

  __n128 v38 = (os_log_s *)v26;
  uint32_t v39 = 42;
LABEL_33:
  _os_log_fault_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_FAULT, v31, (uint8_t *)&buf, v39);
  if (a15 < 0) {
    operator delete(__p);
  }
LABEL_24:
  __cxa_end_catch();
  JUMPOUT(0x10008CDACLL);
}

void *sub_10008D06C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  unsigned int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24LL))(a1) - 1;
  if (v3 > 2) {
    __int128 v4 = "Unknown";
  }
  else {
    __int128 v4 = off_10012AD80[v3];
  }
  return sub_100005064(a2, v4);
}

uint64_t sub_10008D0C4(uint64_t a1)
{
  uint64_t v1 = sub_10004AA8C(a1 + 56, "uuid");
  return sub_10008FC30(v1);
}

BOOL sub_10008D0EC(uint64_t a1)
{
  __int128 v2 = (unsigned __int8 *)(a1 + 56);
  uint64_t v18 = "inputs";
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v15 = v3;
  __int128 v16 = v3;
  sub_100008780(a1 + 56, &v18, (uint64_t)&v15);
  unint64_t v10 = v2;
  uint64_t v11 = 0LL;
  uint64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  unint64_t v14 = 0x8000000000000000LL;
  sub_100008AC8(&v10);
  if (!sub_1000087E8((unsigned __int8 **)&v15, &v10))
  {
    __int128 v4 = sub_100008924((unsigned __int8 **)&v15);
LABEL_5:
    if (*v4 == 2) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }

  __int128 v4 = (_BYTE *)sub_10009AE9C();
  if (v4) {
    goto LABEL_5;
  }
LABEL_6:
  __int128 v4 = 0LL;
LABEL_7:
  *(void *)(a1 + 24) = v4;
  uint64_t v18 = "outputs";
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v15 = v5;
  __int128 v16 = v5;
  sub_100008780((uint64_t)v2, &v18, (uint64_t)&v15);
  unint64_t v10 = v2;
  uint64_t v11 = 0LL;
  uint64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  unint64_t v14 = 0x8000000000000000LL;
  sub_100008AC8(&v10);
  if (!sub_1000087E8((unsigned __int8 **)&v15, &v10))
  {
    uint64_t v6 = sub_100008924((unsigned __int8 **)&v15);
LABEL_11:
    if (*v6 == 2) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }

  uint64_t v6 = (_BYTE *)sub_10009AE9C();
  if (v6) {
    goto LABEL_11;
  }
LABEL_12:
  uint64_t v6 = 0LL;
LABEL_13:
  *(void *)(a1 + 32) = v6;
  uint64_t v7 = *(_BYTE **)(a1 + 24);
  if (!v7) {
    return 0LL;
  }
  uint64_t v8 = 0LL;
  if (v6 && *v7 == 2) {
    return *v6 == 2;
  }
  return v8;
}

void sub_10008D26C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

uint64_t sub_10008D278(uint64_t result)
{
  if (*(_BYTE *)(result + 104)) {
    *(_BYTE *)(result + 104) = 0;
  }
  if (*(_BYTE *)(result + 112)) {
    *(_BYTE *)(result + 112) = 0;
  }
  return result;
}

BOOL sub_10008D294(uint64_t a1)
{
  return *(_BYTE *)(a1 + 104) && *(_BYTE *)(a1 + 112) != 0;
}

uint64_t sub_10008D2B4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 104)) {
    return *(unsigned int *)(a1 + 100);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10008D2CC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 96);
}

uint64_t sub_10008D2D4(uint64_t a1)
{
  uint64_t v1 = sub_10004AA8C(a1 + 56, "name");
  return sub_10008FC30(v1);
}

void sub_10008D2FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (os_log_s *)qword_100131918;
  if (os_log_type_enabled((os_log_t)qword_100131918, OS_LOG_TYPE_ERROR))
  {
    uint64_t v20 = sub_10008D2D4(a1);
    else {
      uint64_t v21 = *(void *)v20;
    }
    uint64_t v22 = sub_10008D0C4(a1);
    else {
      uint64_t v23 = *(void *)v22;
    }
    else {
      uint64_t v24 = *(void *)a2;
    }
    else {
      uint64_t v25 = *(void *)a3;
    }
    uint64_t v26 = (void *)(*(void *)a4 + 16LL);
    *(_DWORD *)std::string buf = 136447234;
    *(void *)&uint8_t buf[4] = v21;
    __int16 v55 = 2082;
    *(void *)uint64_t v56 = v23;
    *(_WORD *)&unsigned __int8 v56[8] = 2080;
    uint64_t v57 = v24;
    __int16 v58 = 2080;
    uint64_t v59 = v25;
    __int16 v60 = 2080;
    *(void *)unint64_t v61 = v26;
    _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "[Transform] Error: Transform '%{public}s' with uuid=%{public}s error with reason='%s' and context='%s' with event='%s'",  buf,  0x34u);
  }

  unint64_t v27 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v28 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10004A4C4((uint64_t)&v47, "reason");
  uint64_t v49 = &v47;
  char v50 = 1;
  uint64_t v52 = sub_10000B990((uint64_t)v51, a2);
  char v53 = 1;
  sub_10000BA40((uint64_t)buf, (uint64_t)&v47, 2LL, 1, 2);
  *(void *)&v56[2] = buf;
  LOBYTE(v57) = 1;
  sub_10002BC40((uint64_t)v41, "context");
  uint64_t v42 = v41;
  char v43 = 1;
  sub_10000B990((uint64_t)v44, a3);
  uint64_t v45 = v44;
  char v46 = 1;
  *(void *)&v61[4] = sub_10000BA40((uint64_t)&v58, (uint64_t)v41, 2LL, 1, 2);
  char v62 = 1;
  sub_10008FD7C((uint64_t)v35, "transformUuid");
  uint64_t v36 = v35;
  char v37 = 1;
  uint64_t v9 = sub_10008D0C4(a1);
  sub_10000B990((uint64_t)v38, v9);
  uint32_t v39 = v38;
  char v40 = 1;
  void v63[2] = sub_10000BA40((uint64_t)v63, (uint64_t)v35, 2LL, 1, 2);
  char v64 = 1;
  sub_100017A54((uint64_t)v29, "eventName");
  uint64_t v30 = v29;
  char v31 = 1;
  sub_10000B990((uint64_t)v32, *(void *)a4 + 16LL);
  BOOL v33 = v32;
  char v34 = 1;
  uint64_t v66 = sub_10000BA40((uint64_t)v65, (uint64_t)v29, 2LL, 1, 2);
  char v67 = 1;
  sub_10000BA40((uint64_t)&v27, (uint64_t)buf, 4LL, 1, 2);
  for (uint64_t i = 0LL; i != -128; i -= 32LL)
  {
    sub_1000041AC((uint64_t)&v65[i]);
    sub_10000425C((uint64_t **)&v65[i + 8], v65[i]);
  }

  for (uint64_t j = 0LL; j != -64; j -= 32LL)
  {
    sub_1000041AC((uint64_t)&v32[j]);
    sub_10000425C((uint64_t **)&v32[j + 8], v32[j]);
  }

  for (uint64_t k = 0LL; k != -64; k -= 32LL)
  {
    sub_1000041AC((uint64_t)&v38[k]);
    sub_10000425C((uint64_t **)&v38[k + 8], v38[k]);
  }

  for (uint64_t m = 0LL; m != -64; m -= 32LL)
  {
    sub_1000041AC((uint64_t)&v44[m]);
    sub_10000425C((uint64_t **)&v44[m + 8], v44[m]);
  }

  for (uint64_t n = 0LL; n != -64; n -= 32LL)
  {
    sub_1000041AC((uint64_t)&v51[n]);
    sub_10000425C((uint64_t **)&v51[n + 8], v51[n]);
  }

  uint64_t v15 = *(void *)(*(void *)(a1 + 40) + 8LL);
  __int128 v16 = (__int128 *)sub_100005064(buf, "com.apple.coreanalytics.meta.TransformExpressionFailure");
  sub_1000723B4(v16, (uint64_t)&v27, &v47);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v15 + 32LL))(v15, &v47);
  unint64_t v17 = v48;
  if (v48)
  {
    p_shared_owners = (unint64_t *)&v48->__shared_owners_;
    do
      unint64_t v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  if ((v56[9] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_1000041AC((uint64_t)&v27);
  sub_10000425C(&v28, v27);
}

void sub_10008D76C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

void sub_10008D778(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (os_log_s *)qword_100131918;
  if (os_log_type_enabled((os_log_t)qword_100131918, OS_LOG_TYPE_ERROR))
  {
    uint64_t v21 = sub_10008D2D4(a1);
    else {
      uint64_t v22 = *(void *)v21;
    }
    uint64_t v23 = sub_10008D0C4(a1);
    else {
      uint64_t v24 = *(void *)v23;
    }
    else {
      uint64_t v25 = *(void *)a2;
    }
    else {
      uint64_t v26 = *(void *)a3;
    }
    unint64_t v27 = (void *)(*(void *)a4 + 16LL);
    *(_DWORD *)std::string buf = 136447234;
    *(void *)&uint8_t buf[4] = v22;
    __int16 v62 = 2082;
    *(void *)unint64_t v63 = v24;
    *(_WORD *)&v63[8] = 2080;
    uint64_t v64 = v25;
    __int16 v65 = 2080;
    uint64_t v66 = v26;
    __int16 v67 = 2080;
    *(void *)uint64_t v68 = v27;
    _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "[Transform] FAULT: Transform '%{public}s'  with uuid=%{public}s hit unrecoverable error with reason='%s' and conte xt='%s' with event='%s'",  buf,  0x34u);
  }

  unint64_t v28 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v29 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10004A4C4((uint64_t)&v54, "reason");
  uint64_t v56 = &v54;
  char v57 = 1;
  uint64_t v59 = sub_10000B990((uint64_t)v58, a2);
  char v60 = 1;
  sub_10000BA40((uint64_t)buf, (uint64_t)&v54, 2LL, 1, 2);
  *(void *)&void v63[2] = buf;
  LOBYTE(v64) = 1;
  sub_10002BC40((uint64_t)v48, "context");
  uint64_t v49 = v48;
  char v50 = 1;
  sub_10000B990((uint64_t)v51, a3);
  uint64_t v52 = v51;
  char v53 = 1;
  *(void *)&v68[4] = sub_10000BA40((uint64_t)&v65, (uint64_t)v48, 2LL, 1, 2);
  char v69 = 1;
  sub_10008FD7C((uint64_t)v42, "transformUuid");
  char v43 = v42;
  char v44 = 1;
  uint64_t v9 = sub_10008D0C4(a1);
  sub_10000B990((uint64_t)v45, v9);
  char v46 = v45;
  char v47 = 1;
  v70[2] = sub_10000BA40((uint64_t)v70, (uint64_t)v42, 2LL, 1, 2);
  char v71 = 1;
  sub_1000455DC((uint64_t)v36, "fault");
  char v37 = v36;
  char v38 = 1;
  v39[0] = 4;
  v40[0] = 1LL;
  sub_1000041AC((uint64_t)v39);
  sub_1000041AC((uint64_t)v39);
  v40[1] = v39;
  char v41 = 1;
  sub_10000BA40((uint64_t)v72, (uint64_t)v36, 2LL, 1, 2);
  v72[2] = v72;
  char v73 = 1;
  sub_100017A54((uint64_t)v30, "eventName");
  char v31 = v30;
  char v32 = 1;
  sub_10000B990((uint64_t)v33, *(void *)a4 + 16LL);
  char v34 = v33;
  char v35 = 1;
  uint64_t v75 = sub_10000BA40((uint64_t)v74, (uint64_t)v30, 2LL, 1, 2);
  char v76 = 1;
  sub_10000BA40((uint64_t)&v28, (uint64_t)buf, 5LL, 1, 2);
  for (uint64_t i = 0LL; i != -160; i -= 32LL)
  {
    sub_1000041AC((uint64_t)&v74[i]);
    sub_10000425C((uint64_t **)&v74[i + 8], v74[i]);
  }

  for (uint64_t j = 0LL; j != -64; j -= 32LL)
  {
    sub_1000041AC((uint64_t)&v33[j]);
    sub_10000425C((uint64_t **)&v33[j + 8], v33[j]);
  }

  for (uint64_t k = 0LL; k != -8; k -= 4LL)
  {
    sub_1000041AC((uint64_t)&v39[k * 8]);
    sub_10000425C((uint64_t **)&v40[k], v39[k * 8]);
  }

  for (uint64_t m = 0LL; m != -64; m -= 32LL)
  {
    sub_1000041AC((uint64_t)&v45[m]);
    sub_10000425C((uint64_t **)&v45[m + 8], v45[m]);
  }

  for (uint64_t n = 0LL; n != -64; n -= 32LL)
  {
    sub_1000041AC((uint64_t)&v51[n]);
    sub_10000425C((uint64_t **)&v51[n + 8], v51[n]);
  }

  for (iuint64_t i = 0LL; ii != -64; ii -= 32LL)
  {
    sub_1000041AC((uint64_t)&v58[ii]);
    sub_10000425C((uint64_t **)&v58[ii + 8], v58[ii]);
  }

  uint64_t v16 = *(void *)(*(void *)(a1 + 40) + 8LL);
  unint64_t v17 = (__int128 *)sub_100005064(buf, "com.apple.coreanalytics.meta.TransformExpressionFailure");
  sub_1000723B4(v17, (uint64_t)&v28, &v54);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v16 + 32LL))(v16, &v54);
  uint64_t v18 = v55;
  if (v55)
  {
    p_shared_owners = (unint64_t *)&v55->__shared_owners_;
    do
      unint64_t v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }

  if ((v63[9] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_1000041AC((uint64_t)&v28);
  sub_10000425C(&v29, v28);
}

void sub_10008DC84(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

void sub_10008DC90(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  v23[0] = "expression";
  unint64_t v29 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v27 = v8;
  __int128 v28 = v8;
  sub_100008780(a2, v23, (uint64_t)&v27);
  __int128 v24 = (unint64_t)a2;
  __int128 v25 = 0uLL;
  unint64_t v26 = 0x8000000000000000LL;
  sub_100008AC8((unsigned __int8 **)&v24);
  if (sub_1000087E8((unsigned __int8 **)&v27, (unsigned __int8 **)&v24))
  {
    uint64_t v9 = (_BYTE *)sub_10009AE9C();
    if (!v9) {
      goto LABEL_7;
    }
  }

  else
  {
    uint64_t v9 = sub_100008924((unsigned __int8 **)&v27);
  }

  if (*v9 == 2)
  {
    sub_1000B0A20(*(void ***)(*(void *)(a1 + 40) + 24LL), a3, v9, a4);
    return;
  }

void sub_10008DF78( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, void *a25, uint64_t a26, int a27, __int16 a28, char a29, char a30)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    sub_100005064(&a25, "ExpressionError");
    sub_100005064(&a10, "name");
    sub_100044F28("<unknown>", v32, (const void **)&a10, (std::string *)&__p);
    if (a2 == 2) {
      sub_10008D2FC(v33, (uint64_t)&a25, (uint64_t)&__p, v31);
    }
    else {
      sub_10008D778(v33, (uint64_t)&a25, (uint64_t)&__p, v31);
    }
    if (a21 < 0) {
      operator delete(__p);
    }
    if (a15 < 0) {
      operator delete(a10);
    }
    if (a30 < 0) {
      operator delete(a25);
    }
    *(_BYTE *)uint64_t v30 = 0;
    *(void *)(v30 + sub_100007004((uint64_t)v9 + 8) = 0LL;
    sub_1000041AC(v30);
    sub_1000041AC(v30);
    __cxa_end_catch();
    JUMPOUT(0x10008DF2CLL);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_10008E084(uint64_t a1, _BYTE *a2, __int128 *a3)
{
  if (*a2 == 2)
  {
    unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v6 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v6 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
    v16[0] = v6;
    v16[1] = v6;
    sub_100008B44(v16, (uint64_t)a2);
    sub_100045378((unsigned __int8 **)v16);
    unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v7 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v7 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
    v14[0] = v7;
    v14[1] = v7;
    sub_100008B44(v14, (uint64_t)a2);
    sub_100008AC8((unsigned __int8 **)v14);
    while (!sub_1000087E8((unsigned __int8 **)v16, (unsigned __int8 **)v14))
    {
      __int128 v8 = sub_100008924((unsigned __int8 **)v16);
      __int128 v21 = "ignoreIf";
      unint64_t v20 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&__int128 v9 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v9 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
      v19[0] = v9;
      v19[1] = v9;
      sub_100008780((uint64_t)v8, &v21, (uint64_t)v19);
      memset(&v18[1], 0, 24);
      v18[0] = v8;
      v18[4] = (unsigned __int8 *)0x8000000000000000LL;
      sub_100008AC8(v18);
      if (sub_1000087E8((unsigned __int8 **)v19, v18))
      {
        __int128 v10 = (_BYTE *)sub_10009AE9C();
        if (!v10) {
          goto LABEL_9;
        }
      }

      else
      {
        __int128 v10 = sub_100008924((unsigned __int8 **)v19);
      }

      if (*v10 == 2)
      {
        *(void *)&v19[0] = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v19[0] + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
        sub_1000B0A20(*(void ***)(*(void *)(a1 + 40) + 24LL), a3, v10, (uint64_t)v19);
        uint64_t v11 = 1LL;
        char v12 = sub_10008FE0C((unsigned __int8 *)v19, 1u);
        sub_1000041AC((uint64_t)v19);
        sub_10000425C((uint64_t **)v19 + 1, LOBYTE(v19[0]));
        if ((v12 & 1) != 0) {
          return v11;
        }
      }

void sub_10008E254( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p, uint64_t a21, int a22, __int16 a23, char a24, char a25, uint64_t a26, uint64_t a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    sub_100005064(&a28, "IgnoreIfError");
    sub_100005064(&__p, "ignoreIf");
    if (a2 == 2) {
      sub_10008D2FC(v34, (uint64_t)&a28, (uint64_t)&__p, v33);
    }
    else {
      sub_10008D778(v34, (uint64_t)&a28, (uint64_t)&__p, v33);
    }
    if (a25 < 0) {
      operator delete(__p);
    }
    if (a33 < 0) {
      operator delete(a28);
    }
    __cxa_end_catch();
    JUMPOUT(0x10008E214LL);
  }

  _Unwind_Resume(exception_object);
}

BOOL sub_10008E380(_DWORD *a1)
{
  __int128 v3 = (os_log_s *)qword_100131918;
  BOOL result = os_log_type_enabled((os_log_t)qword_100131918, OS_LOG_TYPE_FAULT);
  if (result)
  {
    sub_1000DE66C((uint64_t)a1, v3);
    return 0LL;
  }

  return result;
}

void sub_10008E3F0(uint64_t a1)
{
  uint64_t v2 = sub_10008D0C4(a1);
  uint64_t v3 = sub_10008D2D4(a1);
  if (sub_10008E380((_DWORD *)a1))
  {
    unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v17 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    sub_10002BBB0((uint64_t)&v24, "uuid");
    unint64_t v26 = &v24;
    char v27 = 1;
    uint64_t v29 = sub_10000B990((uint64_t)v28, v2);
    char v30 = 1;
    sub_10000BA40((uint64_t)__p, (uint64_t)&v24, 2LL, 1, 2);
    *(void *)&void v33[2] = __p;
    LOBYTE(v34) = 1;
    sub_10002BBB0((uint64_t)v18, "name");
    __int128 v19 = v18;
    char v20 = 1;
    sub_10000B990((uint64_t)v21, v3);
    uint64_t v22 = v21;
    char v23 = 1;
    uint64_t v36 = sub_10000BA40((uint64_t)v35, (uint64_t)v18, 2LL, 1, 2);
    char v37 = 1;
    sub_10000BA40((uint64_t)&v16, (uint64_t)__p, 2LL, 1, 2);
    for (uint64_t i = 0LL; i != -64; i -= 32LL)
    {
      sub_1000041AC((uint64_t)&v35[i]);
      sub_10000425C((uint64_t **)&v35[i + 8], v35[i]);
    }

    for (uint64_t j = 0LL; j != -64; j -= 32LL)
    {
      sub_1000041AC((uint64_t)&v21[j]);
      sub_10000425C((uint64_t **)&v21[j + 8], v21[j]);
    }

    for (uint64_t k = 0LL; k != -64; k -= 32LL)
    {
      sub_1000041AC((uint64_t)&v28[k]);
      sub_10000425C((uint64_t **)&v28[k + 8], v28[k]);
    }

    uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8LL);
    sub_100005064(__p, "com.apple.coreanalytics.meta.TransformBudgetExceeded");
    sub_1000723B4((__int128 *)__p, (uint64_t)&v16, &v24);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v7 + 32LL))(v7, &v24);
    __int128 v8 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        unint64_t v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }

    if ((v33[9] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    uint64_t v11 = (os_log_s *)qword_100131918;
    if (os_log_type_enabled((os_log_t)qword_100131918, OS_LOG_TYPE_INFO))
    {
      else {
        uint64_t v12 = *(void *)v2;
      }
      uint64_t v13 = sub_10008D2D4(a1);
      else {
        uint64_t v14 = *(void *)v13;
      }
      int v15 = *(_DWORD *)(a1 + 100);
      *(_DWORD *)std::string __p = 136446722;
      *(void *)&__p[4] = v12;
      __int16 v32 = 2082;
      *(void *)uint64_t v33 = v14;
      *(_WORD *)&v33[8] = 1024;
      int v34 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "[Transform] WARNING: Transform budget exceeded for %{public}s with uuid %{public}s (storage budget used %u)",  __p,  0x1Cu);
    }

    (*(void (**)(void, uint64_t))(**(void **)(*(void *)(a1 + 40) + 40LL) + 16LL))( *(void *)(*(void *)(a1 + 40) + 40LL),  v2);
    sub_1000041AC((uint64_t)&v16);
    sub_10000425C(&v17, v16);
  }

void sub_10008E724(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

void sub_10008E730(uint64_t a1)
{
  v6[0] = &off_10012AD10;
  v6[1] = a1;
  uint64_t v7 = v6;
  sub_10008CD68(a1, (uint64_t)__p, (uint64_t)v6);
  uint64_t v2 = v7;
  if (v7 == v6)
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = v6;
  }

  else
  {
    if (!v7) {
      goto LABEL_6;
    }
    uint64_t v3 = 5LL;
  }

  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_10008E7F0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

uint64_t sub_10008E7FC(_DWORD *a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 72LL))(a1);
  if ((result & 1) == 0) {
    __assert_rtn("updateStorageBudget", "Transform.cpp", 261, "initialized()");
  }
  a1[25] = (a1[25] + a2) & ~((a1[25] + a2) >> 63);
  return result;
}

uint64_t sub_10008E868(_DWORD *a1)
{
  uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 72LL))(a1);
  if ((result & 1) == 0) {
    __assert_rtn("incrementEventCount", "Transform.cpp", 266, "initialized()");
  }
  ++a1[27];
  return result;
}

void sub_10008E8C8(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_10008D2D4(a1);
  if (*(char *)(v8 + 23) < 0)
  {
    sub_10000B8BC(&__p, *(void **)v8, *(void *)(v8 + 8));
  }

  else
  {
    __int128 v9 = *(_OWORD *)v8;
    __p.__r_.__value_.__l.__cap_ = *(void *)(v8 + 16);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v9;
  }

  memset(&__dst, 170, sizeof(__dst));
  uint64_t v10 = sub_10008D0C4(a1);
  if (*(char *)(v10 + 23) < 0)
  {
    sub_10000B8BC(&__dst, *(void **)v10, *(void *)(v10 + 8));
  }

  else
  {
    __int128 v11 = *(_OWORD *)v10;
    __dst.__r_.__value_.__l.__cap_ = *(void *)(v10 + 16);
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v11;
  }

  char v12 = sub_10008E380((_DWORD *)a1);
  unint64_t v34 = 0xAAAAAAAAAAAAAA00LL;
  char v35 = 0LL;
  sub_1000041AC((uint64_t)&v34);
  sub_1000041AC((uint64_t)&v34);
  uint64_t v13 = *(unsigned __int8 **)(a1 + 32);
  int v14 = *v13;
  if (*v13)
  {
    if (v14 == 1)
    {
      if (!*(void *)(*((void *)v13 + 1) + 16LL)) {
        goto LABEL_22;
      }
    }

    else if (v14 == 2 && !((uint64_t)(*(void *)(*((void *)v13 + 1) + 8LL) - **((void **)v13 + 1)) >> 4))
    {
      goto LABEL_22;
    }

    v31[4] = (void *)0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v15 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v15 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)uint64_t v31 = v15;
    *(_OWORD *)&v31[2] = v15;
    sub_100008B44(v31, (uint64_t)v13);
    sub_100045378((unsigned __int8 **)v31);
    unint64_t v16 = sub_100008924((unsigned __int8 **)v31);
    sub_10000C3E4((uint64_t)v32, (uint64_t)v16);
    sub_1000041AC((uint64_t)v32);
    char v17 = v34;
    LOBYTE(v34) = v32[0];
    v32[0] = v17;
    uint64_t v18 = v35;
    char v35 = v33;
    uint64_t v33 = v18;
    sub_1000041AC((uint64_t)&v34);
    sub_1000041AC((uint64_t)v32);
    sub_10000425C(&v33, v32[0]);
    v31[4] = (void *)0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v19 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v19 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)uint64_t v31 = v19;
    *(_OWORD *)&v31[2] = v19;
    sub_1000184F4((uint64_t)&v34, "message", (uint64_t)v31);
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = (unint64_t)&v34;
    v29.__r_.__value_.__l.__cap_ = 0LL;
    *(void *)&__int128 v30 = 0LL;
    *((void *)&v30 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0x8000000000000000LL;
    sub_1000211FC((unsigned __int8 **)&v29);
    if (!sub_10001855C((unsigned __int8 **)v31, (unsigned __int8 **)&v29))
    {
      char v20 = sub_100018150((unsigned __int8 **)v31);
      sub_1000218CC((uint64_t)v20, &v29);
      std::string __p = v29;
    }

    sub_1000184F4((uint64_t)&v34, "uuid", (uint64_t)&v29);
    __int128 v21 = (void *)v29.__r_.__value_.__r.__words[0];
    *(_OWORD *)&v31[1] = *(_OWORD *)&v29.__r_.__value_.__r.__words[1];
    *(_OWORD *)&v31[3] = v30;
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = (unint64_t)&v34;
    v29.__r_.__value_.__l.__cap_ = 0LL;
    *(void *)&__int128 v30 = 0LL;
    *((void *)&v30 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0x8000000000000000LL;
    v31[0] = v21;
    sub_1000211FC((unsigned __int8 **)&v29);
    if (!sub_10001855C((unsigned __int8 **)v31, (unsigned __int8 **)&v29))
    {
      uint64_t v22 = sub_100018150((unsigned __int8 **)v31);
      sub_1000218CC((uint64_t)v22, &v29);
      std::string __dst = v29;
    }
  }

void sub_10008ED2C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

void sub_10008ED38(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*a2 != 1)
  {
    *(_BYTE *)a4 = *(_BYTE *)a3;
    *(void *)(a4 + sub_100007004((uint64_t)v9 + 8) = *(void *)(a3 + 8);
    sub_1000041AC(a3);
    *(_BYTE *)a3 = 0;
    *(void *)(a3 + sub_100007004((uint64_t)v9 + 8) = 0LL;
    sub_1000041AC(a4);
    return;
  }

  *(void *)&v27[0] = "fields";
  unint64_t v37 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v35 = v8;
  __int128 v36 = v8;
  sub_100008780((uint64_t)a2, (const std::string::value_type **)v27, (uint64_t)&v35);
  __int128 v30 = a2;
  uint64_t v31 = 0LL;
  uint64_t v32 = 0LL;
  uint64_t v33 = 0LL;
  unint64_t v34 = 0x8000000000000000LL;
  sub_100008AC8(&v30);
  if (sub_1000087E8((unsigned __int8 **)&v35, &v30))
  {
    __int128 v9 = (_BYTE *)sub_10009AE9C();
    if (!v9) {
      goto LABEL_20;
    }
  }

  else
  {
    __int128 v9 = sub_100008924((unsigned __int8 **)&v35);
  }

  if (*v9 != 2)
  {
LABEL_20:
    *(_BYTE *)a4 = *(_BYTE *)a3;
    *(void *)(a4 + sub_100007004((uint64_t)v9 + 8) = *(void *)(a3 + 8);
    sub_1000041AC(a3);
    *(_BYTE *)a3 = 0;
    *(void *)(a3 + sub_100007004((uint64_t)v9 + 8) = 0LL;
    sub_1000041AC(a4);
    return;
  }

  *(void *)a4 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)(a4 + sub_100007004((uint64_t)v9 + 8) = 0xAAAAAAAAAAAAAAAALL;
  sub_10000BA40(a4, 0LL, 0LL, 0, 1);
  *(void *)&__int128 v29 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v29 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v10 = (__int128 *)sub_100005064(&v35, "message");
  sub_1000723B4(v10, a3, &v29);
  if (SBYTE7(v36) < 0) {
    operator delete((void *)v35);
  }
  unint64_t v28 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v11 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v11 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  v27[0] = v11;
  v27[1] = v11;
  sub_100008B44(v27, (uint64_t)v9);
  sub_100045378((unsigned __int8 **)v27);
  unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v12 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v12 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  v25[0] = v12;
  v25[1] = v12;
  sub_100008B44(v25, (uint64_t)v9);
  sub_100008AC8((unsigned __int8 **)v25);
  while (!sub_1000087E8((unsigned __int8 **)v27, (unsigned __int8 **)v25))
  {
    uint64_t v13 = sub_100008924((unsigned __int8 **)v27);
    char v38 = "name";
    unint64_t v37 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v14 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v14 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
    __int128 v35 = v14;
    __int128 v36 = v14;
    sub_100008780((uint64_t)v13, &v38, (uint64_t)&v35);
    uint64_t v32 = 0LL;
    uint64_t v33 = 0LL;
    uint64_t v31 = 0LL;
    __int128 v30 = v13;
    unint64_t v34 = 0x8000000000000000LL;
    sub_100008AC8(&v30);
    if (sub_1000087E8((unsigned __int8 **)&v35, &v30))
    {
      uint64_t v15 = sub_10009AE9C();
      if (!v15) {
        goto LABEL_19;
      }
    }

    else
    {
      uint64_t v15 = (uint64_t)sub_100008924((unsigned __int8 **)&v35);
    }

    if (*(_BYTE *)v15 == 3)
    {
      unint64_t v16 = *(const void ***)(v15 + 8);
      if (v16)
      {
        sub_10008DC90(a1, (uint64_t)v13, &v29, (uint64_t)v23);
        char v17 = sub_1000304A4((unsigned __int8 *)a4, v16);
        sub_1000041AC((uint64_t)v23);
        char v18 = *(_BYTE *)v17;
        *(_BYTE *)char v17 = v23[0];
        v23[0] = v18;
        __int128 v19 = (uint64_t *)v17[1];
        v17[1] = (uint64_t)v24;
        double v24 = v19;
        sub_1000041AC((uint64_t)v17);
        sub_1000041AC((uint64_t)v23);
        sub_10000425C(&v24, v23[0]);
      }
    }

void sub_10008F0A8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10008F0B8(uint64_t a1, std::string *a2)
{
  if ((char)__p.__r_.__value_.__s.__size_ < 0)
  {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__l.__size_ != 5)
    {
      uint64_t v7 = 1LL;
LABEL_25:
      operator delete(p_p);
      goto LABEL_28;
    }

    if (*(_DWORD *)__p.__r_.__value_.__l.__data_ != 1702257998
      || *(_BYTE *)(__p.__r_.__value_.__r.__words[0] + 4) != 114)
    {
      goto LABEL_13;
    }

    uint64_t v7 = 0xFFFFFFFFLL;
    if ((char)__p.__r_.__value_.__s.__size_ < 0)
    {
LABEL_24:
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      goto LABEL_25;
    }
  }

  else
  {
    if (__p.__r_.__value_.__s.__size_ != 5)
    {
      uint64_t v7 = 1LL;
      goto LABEL_28;
    }

    if (LODWORD(__p.__r_.__value_.__l.__data_) != 1702257998 || __p.__r_.__value_.__s.__data_[4] != 114)
    {
      p_p = &__p;
LABEL_13:
      unsigned int v5 = bswap32(p_p->__r_.__value_.__l.__data_);
      if (v5 == 959464545)
      {
        int v6 = p_p->__r_.__value_.__s.__data_[4] - 121;
      }

      else if (v5 < 0x39304461)
      {
        int v6 = -1;
      }

      else
      {
        int v6 = 1;
      }

      if (v6) {
        uint64_t v7 = 1LL;
      }
      else {
        uint64_t v7 = 90LL;
      }
      goto LABEL_24;
    }

    uint64_t v7 = 0xFFFFFFFFLL;
  }

void sub_10008F210( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10008F234(unsigned __int8 *a1@<X1>, uint64_t a2@<X8>)
{
  if (*a1 != 1) {
    goto LABEL_10;
  }
  __int128 v12 = "correlation_group_uuid";
  unint64_t v11 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  v10[0] = v4;
  v10[1] = v4;
  sub_100008780((uint64_t)a1, &v12, (uint64_t)v10);
  v9[0] = a1;
  memset(&v9[1], 0, 24);
  v9[4] = (unsigned __int8 *)0x8000000000000000LL;
  sub_100008AC8(v9);
  if (sub_1000087E8((unsigned __int8 **)v10, v9))
  {
    uint64_t v5 = sub_10009AE9C();
    if (!v5)
    {
LABEL_10:
      char v8 = 0;
      *(_BYTE *)a2 = 0;
      goto LABEL_11;
    }
  }

  else
  {
    uint64_t v5 = (uint64_t)sub_100008924((unsigned __int8 **)v10);
  }

  if (*(_BYTE *)v5 != 3) {
    goto LABEL_10;
  }
  int v6 = *(__int128 **)(v5 + 8);
  if (!v6) {
    goto LABEL_10;
  }
  if (*((char *)v6 + 23) < 0)
  {
    sub_10000B8BC((_BYTE *)a2, *(void **)v6, *((void *)v6 + 1));
  }

  else
  {
    __int128 v7 = *v6;
    *(void *)(a2 + 16) = *((void *)v6 + 2);
    *(_OWORD *)a2 = v7;
  }

  char v8 = 1;
LABEL_11:
  *(_BYTE *)(a2 + 24) = v8;
}

void sub_10008F34C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

BOOL sub_10008F358@<W0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  a2[2] = 0LL;
  *a2 = 0LL;
  a2[1] = 0LL;
  uint64_t v3 = *(void *)(a1 + 24);
  unint64_t v25 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  v24[0] = v4;
  v24[1] = v4;
  sub_100008B44(v24, v3);
  sub_100045378((unsigned __int8 **)v24);
  unint64_t v23 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  v22[0] = v5;
  v22[1] = v5;
  sub_100008B44(v22, v3);
  sub_100008AC8((unsigned __int8 **)v22);
  while (1)
  {
    BOOL result = sub_1000087E8((unsigned __int8 **)v24, (unsigned __int8 **)v22);
    if (result) {
      break;
    }
    __int128 v7 = sub_100008924((unsigned __int8 **)v24);
    uint64_t v8 = sub_10004AA8C((uint64_t)v7, "event");
    sub_1000218CC(v8, &__p);
    unint64_t v10 = a2[1];
    unint64_t v9 = a2[2];
    if (v10 >= v9)
    {
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - *a2) >> 3);
      unint64_t v13 = v12 + 1;
      if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_1000046F8();
      }
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *a2) >> 3);
      if (2 * v14 > v13) {
        unint64_t v13 = 2 * v14;
      }
      if (v14 >= 0x555555555555555LL) {
        unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v15 = v13;
      }
      v26[4] = a2 + 2;
      if (v15) {
        unint64_t v16 = (char *)sub_1000171F0((uint64_t)(a2 + 2), v15);
      }
      else {
        unint64_t v16 = 0LL;
      }
      char v17 = &v16[24 * v12];
      v26[0] = v16;
      v26[1] = v17;
      v26[3] = &v16[24 * v15];
      __int128 v18 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *((void *)v17 + 2) = __p.__r_.__value_.__l.__cap_;
      *(_OWORD *)char v17 = v18;
      memset(&__p, 0, sizeof(__p));
      void v26[2] = v17 + 24;
      sub_10001717C(a2, v26);
      uint64_t v19 = a2[1];
      sub_100017378((uint64_t)v26);
      int size = (char)__p.__r_.__value_.__s.__size_;
      a2[1] = v19;
      if (size < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }

    else
    {
      __int128 v11 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v10 + 16) = __p.__r_.__value_.__l.__cap_;
      *(_OWORD *)unint64_t v10 = v11;
      a2[1] = v10 + 24;
    }

    sub_100018704((unsigned __int8 **)v24);
  }

  return result;
}

void sub_10008F554( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, char a25)
{
  if (a2)
  {
    sub_100017378((uint64_t)&a25);
    sub_1000045D0(exception_object);
  }

  _Unwind_Resume(exception_object);
}

void sub_10008F584(uint64_t a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  for (uint64_t i = a4; v8 != v9; v8 += 16LL)
  {
    sub_10008DC90(a1, v8, a3, (uint64_t)v10);
    sub_10008FBB4(&i, (uint64_t)v10);
    sub_1000041AC((uint64_t)v10);
    sub_10000425C(&v11, v10[0]);
  }

void sub_10008F6A4(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1000045D0(exception_object);
}

BOOL sub_10008F6D0@<W0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0LL;
  *(void *)(a2 + sub_100007004((uint64_t)v9 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)&__int128 v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  v15[0] = v4;
  v15[1] = v4;
  unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
  sub_100008B44(v15, a1);
  sub_100045378((unsigned __int8 **)v15);
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  v13[0] = v5;
  v13[1] = v5;
  sub_100008B44(v13, a1);
  sub_100008AC8((unsigned __int8 **)v13);
  char v17 = (void **)a2;
  for (BOOL result = sub_1000087E8((unsigned __int8 **)v15, (unsigned __int8 **)v13);
        !result;
        BOOL result = sub_1000087E8((unsigned __int8 **)v15, (unsigned __int8 **)v13))
  {
    __int128 v7 = sub_100008924((unsigned __int8 **)v15);
    unint64_t v20 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v8 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v8 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
    v19[0] = v8;
    v19[1] = v8;
    sub_100055F38((uint64_t)v7, "name", (uint64_t)v19);
    memset(&v18[1], 0, 24);
    v18[0] = v7;
    v18[4] = (unsigned __int8 *)0x8000000000000000LL;
    sub_100008AC8(v18);
    if (sub_1000087E8((unsigned __int8 **)v19, v18))
    {
      uint64_t v9 = "<illegal-name>";
    }

    else
    {
      unint64_t v10 = sub_10004A598((unsigned __int8 **)v19);
      uint64_t v9 = "<illegal-name>";
      if (*v10 == 3)
      {
        __int128 v11 = sub_100008924((unsigned __int8 **)v19);
        uint64_t v9 = (const char *)*((void *)v11 + 1);
        if (*v11 == 3) {
          uint64_t v12 = *((void *)v11 + 1);
        }
        else {
          uint64_t v12 = 0LL;
        }
      }
    }

    *(void *)&v19[0] = v9;
    sub_10008FFB8(&v17, v19);
    sub_100018704((unsigned __int8 **)v15);
  }

  return result;
}

void sub_10008F870(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + sub_100007004((uint64_t)v9 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

std::string *sub_10008F890@<X0>(std::string *result@<X0>, std::string *a2@<X8>)
{
  if (result->__r_.__value_.__s.__data_[0] != 1) {
    goto LABEL_5;
  }
  uint64_t v3 = (uint64_t)result;
  unint64_t v10 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  v9[0] = v4;
  v9[1] = v4;
  sub_100055F38((uint64_t)result, "sink", (uint64_t)v9);
  unint64_t v8 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  v7[0] = v5;
  v7[1] = v5;
  sub_100008B44(v7, v3);
  sub_100008AC8((unsigned __int8 **)v7);
  BOOL result = (std::string *)sub_1000087E8((unsigned __int8 **)v9, (unsigned __int8 **)v7);
  BOOL result = (std::string *)sub_10004A598((unsigned __int8 **)v9);
  if (result->__r_.__value_.__s.__data_[0] == 3)
  {
    int v6 = sub_100008924((unsigned __int8 **)v9);
    return sub_1000218CC((uint64_t)v6, a2);
  }

  else
  {
LABEL_5:
    a2->__r_.__value_.__r.__words[0] = 0LL;
    a2->__r_.__value_.__l.__size_ = 0LL;
    a2->__r_.__value_.__l.__cap_ = 0LL;
  }

  return result;
}

std::string *sub_10008F97C@<X0>(const std::string *a1@<X0>, std::string *a2@<X8>)
{
  BOOL result = (std::string *)sub_100005064(a2, "Daily");
  int size = (char)a1->__r_.__value_.__s.__size_;
  if (size < 0)
  {
    if (a1->__r_.__value_.__l.__size_ != 5) {
      return result;
    }
    __int128 v7 = (const std::string *)a1->__r_.__value_.__r.__words[0];
    if (*(_DWORD *)a1->__r_.__value_.__l.__data_ == 1631858745
      && *(_BYTE *)(a1->__r_.__value_.__r.__words[0] + 4) == 121)
    {
      return std::string::operator=(a2, a1);
    }
  }

  else
  {
    if (size != 5) {
      return result;
    }
    BOOL v6 = LODWORD(a1->__r_.__value_.__l.__data_) == 1631858745 && a1->__r_.__value_.__s.__data_[4] == 121;
    __int128 v7 = a1;
    if (v6) {
      return std::string::operator=(a2, a1);
    }
  }

  int data = (int)v7->__r_.__value_.__l.__data_;
  int v10 = v7->__r_.__value_.__s.__data_[4];
  if (data == 1702257998 && v10 == 114) {
    return std::string::operator=(a2, a1);
  }
  return result;
}

void sub_10008FA4C(_Unwind_Exception *exception_object)
{
}

uint64_t sub_10008FA68( uint64_t a1, int a2, __int128 *a3, __int128 *a4, uint64_t a5, int a6, char a7, int a8, double a9, void *a10, __int128 *a11)
{
  *(_DWORD *)a1 = a2;
  if (*((char *)a3 + 23) < 0)
  {
    sub_10000B8BC((_BYTE *)(a1 + 8), *(void **)a3, *((void *)a3 + 1));
  }

  else
  {
    __int128 v18 = *a3;
    *(void *)(a1 + 24) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + sub_100007004((uint64_t)v9 + 8) = v18;
  }

  if (*((char *)a4 + 23) < 0)
  {
    sub_10000B8BC((_BYTE *)(a1 + 32), *(void **)a4, *((void *)a4 + 1));
  }

  else
  {
    __int128 v19 = *a4;
    *(void *)(a1 + 4sub_100007004((uint64_t)v9 + 8) = *((void *)a4 + 2);
    *(_OWORD *)(a1 + 3sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = v19;
  }

  *(_BYTE *)(a1 + 56) = *(_BYTE *)a5;
  *(void *)(a1 + 64) = *(void *)(a5 + 8);
  sub_1000041AC(a5);
  *(_BYTE *)a5 = 0;
  *(void *)(a5 + sub_100007004((uint64_t)v9 + 8) = 0LL;
  sub_1000041AC(a1 + 56);
  *(_DWORD *)(a1 + 7sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = a8;
  *(void *)(a1 + 80) = *a10;
  sub_100085B9C(a1 + 88, a11);
  *(_DWORD *)(a1 + 120) = a6;
  *(double *)(a1 + 12sub_100007004((uint64_t)v9 + 8) = a9;
  *(_BYTE *)(a1 + 136) = a7;
  return a1;
}

void sub_10008FB78(_Unwind_Exception *exception_object)
{
}

uint64_t **sub_10008FBB4(uint64_t **a1, uint64_t a2)
{
  __int128 v4 = *a1;
  unint64_t v5 = (*a1)[1];
  if (v5 >= (*a1)[2])
  {
    uint64_t v6 = sub_100004B7C(*a1, a2);
  }

  else
  {
    *(_BYTE *)unint64_t v5 = *(_BYTE *)a2;
    *(void *)(v5 + sub_100007004((uint64_t)v9 + 8) = *(void *)(a2 + 8);
    sub_1000041AC(a2);
    *(_BYTE *)a2 = 0;
    *(void *)(a2 + sub_100007004((uint64_t)v9 + 8) = 0LL;
    sub_1000041AC(v5);
    uint64_t v6 = v5 + 16;
  }

  v4[1] = v6;
  return a1;
}

uint64_t sub_10008FC30(uint64_t a1)
{
  if (*(_BYTE *)a1 != 3 || (uint64_t result = *(void *)(a1 + 8)) == 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    __int128 v4 = (char *)sub_10000528C((char *)a1);
    sub_100005064(&v7, v4);
    unint64_t v5 = std::string::insert(&v7, 0LL, "incompatible ReferenceType for get_ref, actual type is ");
    __int128 v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    std::string::size_type cap = v5->__r_.__value_.__l.__cap_;
    __int128 v8 = v6;
    v5->__r_.__value_.__l.__size_ = 0LL;
    v5->__r_.__value_.__l.__cap_ = 0LL;
    v5->__r_.__value_.__r.__words[0] = 0LL;
    sub_100005128(303, (uint64_t)&v8, exception);
  }

  return result;
}

void sub_10008FD1C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }

  else if (!v22)
  {
    goto LABEL_8;
  }

  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t sub_10008FD7C(uint64_t a1, char *a2)
{
  *(void *)(a1 + sub_100007004((uint64_t)v9 + 8) = 0LL;
  *(_BYTE *)a1 = 3;
  *(void *)(a1 + sub_100007004((uint64_t)v9 + 8) = sub_10008FDC4(a2);
  sub_1000041AC(a1);
  sub_1000041AC(a1);
  return a1;
}

void *sub_10008FDC4(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  sub_100005064(v2, a1);
  return v2;
}

void sub_10008FDF8(_Unwind_Exception *a1)
{
}

uint64_t sub_10008FE0C(unsigned __int8 *a1, unsigned int a2)
{
  v5[0] = 4;
  unint64_t v6 = a2;
  sub_1000041AC((uint64_t)v5);
  sub_1000041AC((uint64_t)v5);
  uint64_t v3 = sub_10002CE28(a1, v5);
  sub_1000041AC((uint64_t)v5);
  sub_10000425C((uint64_t **)&v6, v5[0]);
  return v3;
}

void *sub_10008FEB4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_10012AD10;
  result[1] = v3;
  return result;
}

uint64_t sub_10008FEE8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10012AD10;
  a2[1] = v2;
  return result;
}

uint64_t sub_10008FF04(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 72LL))(v1);
  if ((result & 1) == 0)
  {
    uint64_t v3 = *(void *)(*(void *)(v1 + 40) + 72LL);
    uint64_t v4 = sub_10008D0C4(v1);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 88LL))(v3, v4);
    *(_DWORD *)(v1 + 100) = result;
    *(_BYTE *)(v1 + 104) = 1;
    *(_DWORD *)(v1 + 10sub_100007004((uint64_t)v9 + 8) = HIDWORD(result);
    *(_BYTE *)(v1 + 11sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = 1;
  }

  return result;
}

uint64_t sub_10008FF70(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

void (**sub_10008FFAC())(std::__shared_weak_count *__hidden this, const std::type_info *)
{
}

void ***sub_10008FFB8(void ***a1, void *a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = (*a1)[1];
  unint64_t v6 = *a1;
  unint64_t v9 = (unint64_t)v6[2];
  uint64_t v7 = (uint64_t)(v6 + 2);
  unint64_t v8 = v9;
  if ((unint64_t)v5 >= v9)
  {
    uint64_t v11 = ((char *)v5 - (_BYTE *)*v4) >> 3;
    uint64_t v12 = v8 - (void)*v4;
    uint64_t v13 = v12 >> 2;
    else {
      unint64_t v14 = v13;
    }
    if (v14) {
      unint64_t v15 = (char *)sub_10001C3B0(v7, v14);
    }
    else {
      unint64_t v15 = 0LL;
    }
    unint64_t v16 = &v15[8 * v11];
    char v17 = &v15[8 * v14];
    *(void *)unint64_t v16 = *a2;
    int v10 = v16 + 8;
    __int128 v19 = (char *)*v4;
    __int128 v18 = (char *)v4[1];
    if (v18 != *v4)
    {
      do
      {
        uint64_t v20 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v16 - sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = v20;
        v16 -= 8;
      }

      while (v18 != v19);
      __int128 v18 = (char *)*v4;
    }

    *uint64_t v4 = v16;
    v4[1] = v10;
    void v4[2] = v17;
    if (v18) {
      operator delete(v18);
    }
  }

  else
  {
    *unint64_t v5 = *a2;
    int v10 = v5 + 1;
  }

  v4[1] = v10;
  return a1;
}

uint64_t sub_1000900A0()
{
  return 0LL;
}

void sub_1000900A8(void *a1)
{
  id v1 = a1;
  if (objc_opt_class(&OBJC_CLASS___TRIAllocationStatus))
  {
    uint64_t v43 = 0LL;
    char v44 = &v43;
    uint64_t v45 = 0x2020000000LL;
    int v46 = 0;
    uint64_t v39 = 0LL;
    char v40 = &v39;
    uint64_t v41 = 0x2020000000LL;
    int v42 = 0;
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[TRIAllocationStatus defaultProvider](&OBJC_CLASS___TRIAllocationStatus, "defaultProvider"));
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[OSASystemConfiguration sharedInstance](&OBJC_CLASS___OSASystemConfiguration, "sharedInstance"));
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 crashReporterKey]);
    id v38 = 0LL;
    v35[0] = _NSConcreteStackBlock;
    v35[1] = 3221225472LL;
    v35[2] = sub_100090588;
    v35[3] = &unk_10012ADA0;
    id v5 = v1;
    id v36 = v5;
    unint64_t v37 = &v39;
    unsigned __int8 v6 = [v2 enumerateSampledActiveExperimentsForEnvironment:0 correlationID:v4 error:&v38 block:v35];
    id v7 = v38;

    if ((v6 & 1) == 0)
    {
      unint64_t v8 = (os_log_s *)(id)qword_1001318E8;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        unint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v7 localizedDescription]);
        sub_1000DE77C(v9, (uint64_t)v48, v8);
      }
    }

    int v10 = (void *)objc_claimAutoreleasedReturnValue(+[OSASystemConfiguration sharedInstance](&OBJC_CLASS___OSASystemConfiguration, "sharedInstance"));
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 crashReporterKey]);
    id v34 = v7;
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472LL;
    v31[2] = sub_1000908BC;
    v31[3] = &unk_10012ADC8;
    id v12 = v5;
    id v32 = v12;
    uint64_t v33 = &v43;
    unsigned __int8 v13 = [v2 enumerateSampledActiveRolloutsForCorrelationID:v11 error:&v34 block:v31];
    id v14 = v34;

    if ((v13 & 1) == 0)
    {
      unint64_t v15 = (os_log_s *)(id)qword_1001318E8;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        unint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v14 localizedDescription]);
        sub_1000DE734(v16, (uint64_t)v47, v15);
      }
    }

    unint64_t v29 = 0xAAAAAAAAAAAAAA00LL;
    __int128 v30 = 0LL;
    sub_1000041AC((uint64_t)&v29);
    sub_1000041AC((uint64_t)&v29);
    char v17 = (uint64_t *)*((unsigned int *)v40 + 6);
    v27[0] = 6;
    unint64_t v28 = v17;
    sub_1000041AC((uint64_t)v27);
    sub_1000041AC((uint64_t)v27);
    __int128 v18 = sub_100003F94((unsigned __int8 *)&v29, "num_experiments");
    sub_1000041AC((uint64_t)v27);
    unsigned __int8 v19 = *(_BYTE *)v18;
    *(_BYTE *)__int128 v18 = v27[0];
    v27[0] = v19;
    uint64_t v20 = (uint64_t *)v18[1];
    v18[1] = (uint64_t)v28;
    unint64_t v28 = v20;
    sub_1000041AC((uint64_t)v18);
    sub_1000041AC((uint64_t)v27);
    sub_10000425C(&v28, v27[0]);
    __int128 v21 = (uint64_t *)*((unsigned int *)v44 + 6);
    v25[0] = 6;
    unint64_t v26 = v21;
    sub_1000041AC((uint64_t)v25);
    sub_1000041AC((uint64_t)v25);
    int v22 = sub_100003F94((unsigned __int8 *)&v29, "num_rollouts");
    sub_1000041AC((uint64_t)v25);
    unsigned __int8 v23 = *(_BYTE *)v22;
    *(_BYTE *)int v22 = v25[0];
    v25[0] = v23;
    double v24 = (uint64_t *)v22[1];
    v22[1] = (uint64_t)v26;
    unint64_t v26 = v24;
    sub_1000041AC((uint64_t)v22);
    sub_1000041AC((uint64_t)v25);
    sub_10000425C(&v26, v25[0]);
    (*((void (**)(id, const char *, unint64_t *))v12 + 2))( v12,  "com.apple.com.apple.trial.identifiers-counts",  &v29);
    sub_100092E78(*((_DWORD *)v44 + 6), *((_DWORD *)v40 + 6));
    sub_1000041AC((uint64_t)&v29);
    sub_10000425C(&v30, v29);

    _Block_object_dispose(&v39, 8);
    _Block_object_dispose(&v43, 8);
  }
}

void sub_1000904A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, void *a26, uint64_t a27, uint64_t a28, char a29)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v33 - 176), 8);

  _Unwind_Resume(a1);
}

void sub_100090588(uint64_t a1, void *a2)
{
  id v3 = a2;
  unint64_t v24 = 0xAAAAAAAAAAAAAA00LL;
  unint64_t v25 = 0LL;
  sub_1000041AC((uint64_t)&v24);
  sub_1000041AC((uint64_t)&v24);
  id v4 = objc_claimAutoreleasedReturnValue([v3 experimentId]);
  __int128 v21 = (char *)[v4 UTF8String];
  sub_10000E89C((uint64_t)v22, &v21);
  id v5 = sub_100003F94((unsigned __int8 *)&v24, "experimentId");
  sub_1000041AC((uint64_t)v22);
  char v6 = *(_BYTE *)v5;
  *(_BYTE *)id v5 = v22[0];
  v22[0] = v6;
  id v7 = (uint64_t *)v5[1];
  v5[1] = (uint64_t)v23;
  unsigned __int8 v23 = v7;
  sub_1000041AC((uint64_t)v5);
  sub_1000041AC((uint64_t)v22);
  sub_10000425C(&v23, v22[0]);

  v19[0] = 5;
  uint64_t v20 = (uint64_t *)(int)[v3 deploymentId];
  sub_1000041AC((uint64_t)v19);
  sub_1000041AC((uint64_t)v19);
  unint64_t v8 = sub_100003F94((unsigned __int8 *)&v24, "deploymentId");
  unint64_t v9 = &v20;
  sub_1000041AC((uint64_t)v19);
  unsigned __int8 v10 = *(_BYTE *)v8;
  *(_BYTE *)unint64_t v8 = v19[0];
  v19[0] = v10;
  uint64_t v11 = (uint64_t *)v8[1];
  v8[1] = (uint64_t)v20;
  uint64_t v20 = v11;
  sub_1000041AC((uint64_t)v8);
  sub_1000041AC((uint64_t)v19);
  sub_10000425C(&v20, v19[0]);
  id v12 = (void *)objc_claimAutoreleasedReturnValue([v3 treatmentId]);
  if (v12)
  {
    unint64_t v9 = (uint64_t **) objc_claimAutoreleasedReturnValue([v3 treatmentId]);
    unsigned __int8 v13 = (char *)[v9 UTF8String];
  }

  else
  {
    unsigned __int8 v13 = "<unknown>";
  }

  __int128 v21 = v13;
  sub_10000E89C((uint64_t)v17, &v21);
  id v14 = sub_100003F94((unsigned __int8 *)&v24, "treatmentId");
  sub_1000041AC((uint64_t)v17);
  char v15 = *(_BYTE *)v14;
  *(_BYTE *)id v14 = v17[0];
  v17[0] = v15;
  unint64_t v16 = (uint64_t *)v14[1];
  v14[1] = (uint64_t)v18;
  __int128 v18 = v16;
  sub_1000041AC((uint64_t)v14);
  sub_1000041AC((uint64_t)v17);
  sub_10000425C(&v18, v17[0]);
  if (v12) {

  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  ++*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  sub_1000041AC((uint64_t)&v24);
  sub_10000425C(&v25, v24);
}

void sub_10009082C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  sub_10000417C((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_1000908BC(uint64_t a1, void *a2)
{
  id v2 = a2;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 factorPackIds]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 allValues]);

  obuint64_t j = v4;
  id v5 = [v4 countByEnumeratingWithState:&v32 objects:v31 count:16];
  if (v5)
  {
    uint64_t v20 = *(void *)v33;
    do
    {
      for (uint64_t i = 0LL; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v33 != v20) {
          objc_enumerationMutation(obj);
        }
        id v7 = *(void **)(*((void *)&v32 + 1) + 8LL * (void)i);
        unint64_t v29 = 0xAAAAAAAAAAAAAA00LL;
        __int128 v30 = 0LL;
        sub_1000041AC((uint64_t)&v29);
        sub_1000041AC((uint64_t)&v29);
        id v8 = objc_claimAutoreleasedReturnValue([v2 rolloutId]);
        unint64_t v26 = (char *)[v8 UTF8String];
        sub_10000E89C((uint64_t)v27, &v26);
        unint64_t v9 = sub_100003F94((unsigned __int8 *)&v29, "rolloutId");
        sub_1000041AC((uint64_t)v27);
        char v10 = *(_BYTE *)v9;
        *(_BYTE *)unint64_t v9 = v27[0];
        v27[0] = v10;
        uint64_t v11 = (uint64_t *)v9[1];
        v9[1] = (uint64_t)v28;
        unint64_t v28 = v11;
        sub_1000041AC((uint64_t)v9);
        sub_1000041AC((uint64_t)v27);
        sub_10000425C(&v28, v27[0]);

        signed int v12 = [v2 deploymentId];
        v24[0] = 5;
        unint64_t v25 = (uint64_t *)v12;
        sub_1000041AC((uint64_t)v24);
        sub_1000041AC((uint64_t)v24);
        unsigned __int8 v13 = sub_100003F94((unsigned __int8 *)&v29, "deploymentId");
        sub_1000041AC((uint64_t)v24);
        unsigned __int8 v14 = *(_BYTE *)v13;
        *(_BYTE *)unsigned __int8 v13 = v24[0];
        v24[0] = v14;
        char v15 = (uint64_t *)v13[1];
        v13[1] = (uint64_t)v25;
        unint64_t v25 = v15;
        sub_1000041AC((uint64_t)v13);
        sub_1000041AC((uint64_t)v24);
        sub_10000425C(&v25, v24[0]);
        unint64_t v26 = (char *)[v7 UTF8String];
        sub_10000E89C((uint64_t)v22, &v26);
        unint64_t v16 = sub_100003F94((unsigned __int8 *)&v29, "factorPackId");
        sub_1000041AC((uint64_t)v22);
        char v17 = *(_BYTE *)v16;
        *(_BYTE *)unint64_t v16 = v22[0];
        v22[0] = v17;
        __int128 v18 = (uint64_t *)v16[1];
        v16[1] = (uint64_t)v23;
        unsigned __int8 v23 = v18;
        sub_1000041AC((uint64_t)v16);
        sub_1000041AC((uint64_t)v22);
        sub_10000425C(&v23, v22[0]);
        (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
        sub_1000041AC((uint64_t)&v29);
        sub_10000425C(&v30, v29);
      }

      id v5 = [obj countByEnumeratingWithState:&v32 objects:v31 count:16];
    }

    while (v5);
  }

  ++*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
}

void sub_100090BEC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t *sub_100090C80@<X0>(__int128 *a1@<X0>, uint64_t *a2@<X8>)
{
  id v4 = operator new(0x48uLL);
  __int128 v9 = *a1;
  *(void *)a1 = 0LL;
  *((void *)a1 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0LL;
  sub_100090D78((uint64_t)v4, (uint64_t)&v9);
  id v5 = (std::__shared_weak_count *)*((void *)&v9 + 1);
  if (*((void *)&v9 + 1))
  {
    char v6 = (unint64_t *)(*((void *)&v9 + 1) + 8LL);
    do
      unint64_t v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  return sub_100091938(a2, (uint64_t)v4);
}

void sub_100090D40(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1000045D0(exception_object);
}

uint64_t sub_100090D78(uint64_t a1, uint64_t a2)
{
  dispatch_queue_attr_t v4 = dispatch_queue_attr_make_with_qos_class(0LL, QOS_CLASS_UTILITY, 0);
  id v5 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v4);
  dispatch_queue_t v6 = dispatch_queue_create("analyticsd.NetworkingStateResolverQueue", v5);
  *(void *)(a1 + sub_100007004((uint64_t)v9 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = v6;

  *(void *)a1 = off_10012ADF8;
  *(void *)(a1 + 3sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = off_10012AE40;
  *(void *)(a1 + 40) = off_10012AE68;
  *(_OWORD *)(a1 + 4sub_100007004((uint64_t)v9 + 8) = *(_OWORD *)a2;
  *(void *)a2 = 0LL;
  *(void *)(a2 + sub_100007004((uint64_t)v9 + 8) = 0LL;
  unint64_t v7 = operator new(0x20uLL);
  *unint64_t v7 = 0u;
  v7[1] = 0u;
  *(void *)(a1 + 64) = v7;
  return a1;
}

void sub_100090E18(_Unwind_Exception *a1)
{
}

void sub_100090E34(uint64_t a1)
{
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000CF18(&v14, (void *)(a1 + 8));
  uint64_t v2 = operator new(8uLL);
  void *v2 = a1;
  id v3 = sub_10000B718((id *)(a1 + 24));
  dispatch_queue_attr_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  unint64_t v5 = v14;
  unint64_t v6 = v15;
  if (v15)
  {
    unint64_t v7 = (unint64_t *)(v15 + 8);
    do
      unint64_t v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }

  __int128 v9 = v4;
  char v10 = operator new(0x18uLL);
  void *v10 = v2;
  v10[1] = v5;
  _OWORD v10[2] = v6;
  dispatch_async_f(v9, v10, (dispatch_function_t)sub_100091B0C);

  uint64_t v11 = (std::__shared_weak_count *)v15;
  if (v15)
  {
    signed int v12 = (unint64_t *)(v15 + 8);
    do
      unint64_t v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

void sub_100090F44(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

void sub_100090F5C(char **a1@<X8>)
{
  if (byte_10013189F < 0)
  {
    sub_10000B8BC(&__dst, (void *)xmmword_100131888, *((unint64_t *)&xmmword_100131888 + 1));
  }

  else
  {
    __int128 __dst = xmmword_100131888;
    uint64_t v5 = unk_100131898;
  }

  if (byte_1001318B7 < 0)
  {
    sub_10000B8BC(&v6, (void *)xmmword_1001318A0, *((unint64_t *)&xmmword_1001318A0 + 1));
  }

  else
  {
    __int128 v6 = xmmword_1001318A0;
    uint64_t v7 = unk_1001318B0;
  }

  if (byte_1001318CF < 0)
  {
    sub_10000B8BC(&v8, (void *)xmmword_1001318B8, *((unint64_t *)&xmmword_1001318B8 + 1));
  }

  else
  {
    __int128 v8 = xmmword_1001318B8;
    uint64_t v9 = unk_1001318C8;
  }

  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  uint64_t v2 = (char *)operator new(0x48uLL);
  *a1 = v2;
  a1[1] = v2;
  a1[2] = v2 + 72;
  uint64_t v3 = 0LL;
  a1[1] = sub_100015CE0((uint64_t)(a1 + 2), &__dst, &v10, v2);
  do
  {
    v3 -= 24LL;
  }

  while (v3 != -72);
}

void sub_1000910E4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_10009115C(uint64_t a1@<X0>, __int128 *a2@<X1>, dispatch_group_t *a3@<X8>)
{
  dispatch_group_t v6 = dispatch_group_create();
  *a3 = v6;
  uint64_t v23 = a1;
  sub_100085B9C((uint64_t)&__p, a2);
  dispatch_group_t group = v6;
  if (group) {
    dispatch_group_enter(group);
  }
  unint64_t v21 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000CF18(&v21, (void *)(a1 + 8));
  uint64_t v7 = (char *)operator new(0x30uLL);
  __int128 v8 = v7;
  *(void *)uint64_t v7 = v23;
  char v7[8] = 0;
  v7[32] = 0;
  if (v26)
  {
    *(_OWORD *)(v7 + sub_100007004((uint64_t)v9 + 8) = __p;
    *((void *)v7 + 3) = v25;
    uint64_t v25 = 0LL;
    __int128 __p = 0uLL;
    v7[32] = 1;
  }

  uint64_t v9 = group;
  *((void *)v8 + 5) = v9;
  dispatch_group_t group = 0LL;

  id v10 = sub_10000B718((id *)(a1 + 24));
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  unint64_t v12 = v21;
  unint64_t v13 = v22;
  if (v22)
  {
    unint64_t v14 = (unint64_t *)(v22 + 8);
    do
      unint64_t v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }

  unint64_t v16 = v11;
  char v17 = operator new(0x18uLL);
  *char v17 = v8;
  v17[1] = v12;
  v17[2] = v13;
  dispatch_async_f(v16, v17, (dispatch_function_t)sub_100091BD8);

  __int128 v18 = (std::__shared_weak_count *)v22;
  if (v22)
  {
    unsigned __int8 v19 = (unint64_t *)(v22 + 8);
    do
      unint64_t v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }

  sub_10000B720((id *)&group);
  if (v26)
  {
    if (SHIBYTE(v25) < 0) {
      operator delete((void *)__p);
    }
  }

void sub_100091328(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_1000045D0(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100091358(uint64_t a1@<X0>, __int128 *a2@<X1>, dispatch_group_t *a3@<X8>)
{
}

id *sub_100091360@<X0>(uint64_t a1@<X0>, __int16 a2@<W1>, dispatch_group_t *a3@<X8>)
{
  dispatch_group_t v6 = dispatch_group_create();
  *a3 = v6;
  __int16 v22 = a2;
  uint64_t v7 = v6;
  __int128 v8 = v7;
  uint64_t v23 = v7;
  if (v7) {
    dispatch_group_enter(v7);
  }
  unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v25 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000CF18(&v24, (void *)(a1 + 8));
  uint64_t v9 = operator new(0x18uLL);
  *(void *)uint64_t v9 = a1;
  v9[4] = v22;
  *((void *)v9 + sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = v8;
  uint64_t v23 = 0LL;
  id v10 = sub_10000B718((id *)(a1 + 24));
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  unint64_t v12 = v24;
  unint64_t v13 = v25;
  if (v25)
  {
    unint64_t v14 = (unint64_t *)(v25 + 8);
    do
      unint64_t v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }

  unint64_t v16 = v11;
  char v17 = operator new(0x18uLL);
  *char v17 = v9;
  v17[1] = v12;
  v17[2] = v13;
  dispatch_async_f(v16, v17, (dispatch_function_t)sub_100091DF0);

  __int128 v18 = (std::__shared_weak_count *)v25;
  if (v25)
  {
    unsigned __int8 v19 = (unint64_t *)(v25 + 8);
    do
      unint64_t v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }

  return sub_10000B720((id *)&v23);
}

void sub_1000914C8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

id *sub_1000914E0@<X0>(uint64_t a1@<X0>, __int16 a2@<W1>, dispatch_group_t *a3@<X8>)
{
  return sub_100091360(a1 - 40, a2, a3);
}

void sub_1000914EC(uint64_t a1@<X0>, __int128 *a2@<X1>, dispatch_group_t *a3@<X8>)
{
  dispatch_group_t v6 = dispatch_group_create();
  *a3 = v6;
  uint64_t v25 = a1;
  LOBYTE(__p) = 0;
  char v28 = 0;
  int v7 = *((unsigned __int8 *)a2 + 24);
  if (*((_BYTE *)a2 + 24))
  {
    __int128 __p = *a2;
    uint64_t v27 = *((void *)a2 + 2);
    *((void *)a2 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0LL;
    *((void *)a2 + sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = 0LL;
    *(void *)a2 = 0LL;
    char v28 = 1;
  }

  __int128 v8 = v6;
  uint64_t v9 = v8;
  unint64_t v29 = v8;
  if (v8) {
    dispatch_group_enter(v8);
  }
  unint64_t v23 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000CF18(&v23, (void *)(a1 + 8));
  id v10 = (char *)operator new(0x30uLL);
  uint64_t v11 = v10;
  *(void *)id v10 = a1;
  char v10[8] = 0;
  v10[32] = 0;
  if (v7)
  {
    *(_OWORD *)(v10 + sub_100007004((uint64_t)v9 + 8) = __p;
    *((void *)v10 + 3) = v27;
    uint64_t v27 = 0LL;
    __int128 __p = 0uLL;
    v10[32] = 1;
  }

  *((void *)v10 + 5) = v9;
  unint64_t v29 = 0LL;
  id v12 = sub_10000B718((id *)(a1 + 24));
  unint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  unint64_t v14 = v23;
  unint64_t v15 = v24;
  if (v24)
  {
    unint64_t v16 = (unint64_t *)(v24 + 8);
    do
      unint64_t v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }

  __int128 v18 = v13;
  unsigned __int8 v19 = operator new(0x18uLL);
  void *v19 = v11;
  v19[1] = v14;
  _OWORD v19[2] = v15;
  dispatch_async_f(v18, v19, (dispatch_function_t)sub_100091FCC);

  unint64_t v20 = (std::__shared_weak_count *)v24;
  if (v24)
  {
    unint64_t v21 = (unint64_t *)(v24 + 8);
    do
      unint64_t v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }

  sub_10000B720((id *)&v29);
  if (v28)
  {
    if (SHIBYTE(v27) < 0) {
      operator delete((void *)__p);
    }
  }

void sub_1000916C8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

void sub_1000916E0(uint64_t a1@<X0>, __int128 *a2@<X1>, dispatch_group_t *a3@<X8>)
{
}

void *sub_1000916E8(void *a1)
{
  *a1 = off_10012ADF8;
  a1[4] = off_10012AE40;
  a1[5] = off_10012AE68;
  dispatch_queue_attr_t v4 = (id *)a1[8];
  uint64_t v2 = a1 + 8;
  uint64_t v3 = v4;
  void *v2 = 0LL;
  if (v4) {
    sub_1000918F0((uint64_t)v2, v3);
  }
  sub_100007004((uint64_t)(a1 + 6));
  sub_100009958((uint64_t)(a1 + 1));
  return a1;
}

void sub_100091740(void *a1)
{
  *a1 = off_10012ADF8;
  a1[4] = off_10012AE40;
  a1[5] = off_10012AE68;
  dispatch_queue_attr_t v4 = (id *)a1[8];
  uint64_t v2 = a1 + 8;
  uint64_t v3 = v4;
  void *v2 = 0LL;
  if (v4) {
    sub_1000918F0((uint64_t)v2, v3);
  }
  sub_100007004((uint64_t)(a1 + 6));
  sub_100009958((uint64_t)(a1 + 1));
  operator delete(a1);
}

uint64_t sub_100091798(void *a1)
{
  *(a1 - 4) = off_10012ADF8;
  *a1 = off_10012AE40;
  a1[1] = off_10012AE68;
  dispatch_queue_attr_t v4 = (id *)a1[4];
  uint64_t v2 = a1 + 4;
  uint64_t v3 = v4;
  void *v2 = 0LL;
  if (v4) {
    sub_1000918F0((uint64_t)v2, v3);
  }
  sub_100007004((uint64_t)(a1 + 2));
  return sub_100009958((uint64_t)(a1 - 3));
}

void sub_1000917E8(void *a1)
{
  *(a1 - 4) = off_10012ADF8;
  uint64_t v2 = a1 - 4;
  *a1 = off_10012AE40;
  a1[1] = off_10012AE68;
  uint64_t v5 = (id *)a1[4];
  uint64_t v3 = a1 + 4;
  dispatch_queue_attr_t v4 = v5;
  void *v3 = 0LL;
  if (v5) {
    sub_1000918F0((uint64_t)v3, v4);
  }
  sub_100007004((uint64_t)(a1 + 2));
  sub_100009958((uint64_t)(a1 - 3));
  operator delete(v2);
}

uint64_t sub_100091844(void *a1)
{
  *(a1 - 5) = off_10012ADF8;
  *(a1 - sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = off_10012AE40;
  *a1 = off_10012AE68;
  dispatch_queue_attr_t v4 = (id *)a1[3];
  uint64_t v2 = a1 + 3;
  uint64_t v3 = v4;
  void *v2 = 0LL;
  if (v4) {
    sub_1000918F0((uint64_t)v2, v3);
  }
  sub_100007004((uint64_t)(a1 + 1));
  return sub_100009958((uint64_t)(a1 - 4));
}

void sub_100091894(void *a1)
{
  *(a1 - 5) = off_10012ADF8;
  uint64_t v2 = a1 - 5;
  *(a1 - sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = off_10012AE40;
  *a1 = off_10012AE68;
  uint64_t v5 = (id *)a1[3];
  uint64_t v3 = a1 + 3;
  dispatch_queue_attr_t v4 = v5;
  void *v3 = 0LL;
  if (v5) {
    sub_1000918F0((uint64_t)v3, v4);
  }
  sub_100007004((uint64_t)(a1 + 1));
  sub_100009958((uint64_t)(a1 - 4));
  operator delete(v2);
}

void sub_1000918F0(uint64_t a1, id *a2)
{
  if (a2)
  {

    operator delete(a2);
  }

uint64_t *sub_100091938(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  dispatch_queue_attr_t v4 = operator new(0x20uLL);
  *dispatch_queue_attr_t v4 = &off_10012AF38;
  v4[1] = 0LL;
  void v4[2] = 0LL;
  v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2) {
    uint64_t v5 = (void *)(a2 + 8);
  }
  else {
    uint64_t v5 = 0LL;
  }
  sub_10000CCC8((uint64_t)a1, v5, a2);
  return a1;
}

void sub_1000919C8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    sub_100091A10((uint64_t)&a12, v12);
    __cxa_rethrow();
  }

  _Unwind_Resume(exception_object);
}

void sub_100091A10(uint64_t a1, id *a2)
{
  id v3 = sub_10000B718(a2 + 3);
  dispatch_queue_attr_t v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v3);
  dispatch_barrier_async_f(v4, a2, (dispatch_function_t)sub_100091AF8);
}

void sub_100091A5C(std::__shared_weak_count *a1)
{
}

void sub_100091A70(uint64_t a1)
{
  uint64_t v1 = *(id **)(a1 + 24);
  id v2 = sub_10000B718(v1 + 3);
  id v3 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v2);
  dispatch_barrier_async_f(v3, v1, (dispatch_function_t)sub_100091AF8);
}

uint64_t sub_100091AB8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

uint64_t sub_100091AF8(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

void sub_100091B0C(uint64_t **a1)
{
  id v2 = *a1;
  uint64_t v3 = **a1;
  dispatch_queue_attr_t v4 = *(void **)(v3 + 64);
  if (!v4[1])
  {
    uint64_t v5 = -[WiFiStateRelay initWithMonitoring:](objc_alloc(&OBJC_CLASS___WiFiStateRelay), "initWithMonitoring:", v3 + 40);
    uint64_t v6 = *(void *)(v3 + 64);
    int v7 = *(void **)(v6 + 8);
    *(void *)(v6 + sub_100007004((uint64_t)v9 + 8) = v5;

    dispatch_queue_attr_t v4 = *(void **)(v3 + 64);
  }

  if (!*v4)
  {
    __int128 v8 = -[NetworkStateRelay initWithMonitoring:withWiFiStateRelay:withTelephonyStateRelay:]( objc_alloc(&OBJC_CLASS___NetworkStateRelay),  "initWithMonitoring:withWiFiStateRelay:withTelephonyStateRelay:",  v3 + 32,  *(void *)(*(void *)(v3 + 64) + 8LL),  *(void *)(*(void *)(v3 + 64) + 16LL));
    uint64_t v9 = *(void ***)(v3 + 64);
    id v10 = *v9;
    *uint64_t v9 = v8;
  }

  operator delete(v2);
  sub_100007004((uint64_t)(a1 + 1));
  operator delete(a1);
}

void sub_100091BB4(_Unwind_Exception *a1)
{
}

void sub_100091BD8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v6 = v2;
  uint64_t v3 = *(void *)v2;
  if (*(_BYTE *)(v2 + 32))
  {
    dispatch_queue_attr_t v4 = (os_log_s *)qword_100131948;
    if (os_log_type_enabled((os_log_t)qword_100131948, OS_LOG_TYPE_DEBUG)) {
      sub_1000DE7C4(v2, (void *)(v2 + 8), v4);
    }
    uint64_t v5 = *(void *)(v3 + 48);
    v9[0] = 0;
    id v10 = 0LL;
    sub_1000041AC((uint64_t)v9);
    sub_1000041AC((uint64_t)v9);
    sub_10000B990((uint64_t)v7, v2 + 8);
    (*(void (**)(uint64_t, __int128 *, _BYTE *, _BYTE *, uint64_t, uint64_t))(*(void *)v5 + 24LL))( v5,  &xmmword_100131888,  v9,  v7,  -1LL,  1LL);
    sub_1000041AC((uint64_t)v7);
    sub_10000425C(&v8, v7[0]);
    sub_1000041AC((uint64_t)v9);
    sub_10000425C(&v10, v9[0]);
  }

  else
  {
    (*(void (**)(void, __int128 *))(**(void **)(v3 + 48) + 32LL))( *(void *)(v3 + 48),  &xmmword_100131888);
  }

  sub_100091D9C(&v6);
  sub_100007004((uint64_t)(a1 + 1));
  operator delete(a1);
}

void sub_100091D38( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
}

uint64_t *sub_100091D9C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0LL;
  if (v2)
  {
    sub_10000B720((id *)(v2 + 40));
    operator delete((void *)v2);
  }

  return a1;
}

void sub_100091DF0(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  if (*((_BYTE *)*a1 + 9))
  {
    dispatch_queue_attr_t v4 = (os_log_s *)qword_100131948;
    if (os_log_type_enabled((os_log_t)qword_100131948, OS_LOG_TYPE_DEBUG)) {
      sub_1000DE838((char *)v2 + 8, v4);
    }
    uint64_t v5 = *(void *)(v3 + 48);
    v9[0] = 0;
    id v10 = 0LL;
    sub_1000041AC((uint64_t)v9);
    sub_1000041AC((uint64_t)v9);
    uint64_t v6 = (uint64_t *)*((char *)v2 + 8);
    v7[0] = 5;
    __int128 v8 = v6;
    sub_1000041AC((uint64_t)v7);
    sub_1000041AC((uint64_t)v7);
    (*(void (**)(uint64_t, __int128 *, _BYTE *, unsigned __int8 *, uint64_t, void))(*(void *)v5 + 24LL))( v5,  &xmmword_1001318B8,  v9,  v7,  -1LL,  0LL);
    sub_1000041AC((uint64_t)v7);
    sub_10000425C(&v8, v7[0]);
    sub_1000041AC((uint64_t)v9);
    sub_10000425C(&v10, v9[0]);
  }

  else
  {
    (*(void (**)(void, __int128 *))(**(void **)(v3 + 48) + 32LL))( *(void *)(v3 + 48),  &xmmword_1001318B8);
  }

  sub_10000B720((id *)v2 + 2);
  operator delete(v2);
  sub_100007004((uint64_t)(a1 + 1));
  operator delete(a1);
}

void sub_100091F68( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
}

void sub_100091FCC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v6 = v2;
  uint64_t v3 = *(void *)v2;
  if (*(_BYTE *)(v2 + 32))
  {
    dispatch_queue_attr_t v4 = (os_log_s *)qword_100131948;
    if (os_log_type_enabled((os_log_t)qword_100131948, OS_LOG_TYPE_DEBUG)) {
      sub_1000DE8B0(v2, (void *)(v2 + 8), v4);
    }
    uint64_t v5 = *(void *)(v3 + 48);
    v9[0] = 0;
    id v10 = 0LL;
    sub_1000041AC((uint64_t)v9);
    sub_1000041AC((uint64_t)v9);
    sub_10000B990((uint64_t)v7, v2 + 8);
    (*(void (**)(uint64_t, __int128 *, _BYTE *, _BYTE *, uint64_t, uint64_t))(*(void *)v5 + 24LL))( v5,  &xmmword_1001318A0,  v9,  v7,  -1LL,  1LL);
    sub_1000041AC((uint64_t)v7);
    sub_10000425C(&v8, v7[0]);
    sub_1000041AC((uint64_t)v9);
    sub_10000425C(&v10, v9[0]);
  }

  else
  {
    (*(void (**)(void, __int128 *))(**(void **)(v3 + 48) + 32LL))( *(void *)(v3 + 48),  &xmmword_1001318A0);
  }

  sub_100091D9C(&v6);
  sub_100007004((uint64_t)(a1 + 1));
  operator delete(a1);
}

void sub_10009212C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
}

void sub_100092190(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

void sub_1000921A4()
{
  v0 = objc_autoreleasePoolPush();
  sub_100005064(&xmmword_100131888, "primaryNetworkInterface");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100131888, (void *)&_mh_execute_header);
  sub_100005064(&xmmword_1001318A0, "wiFiRadioTech");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1001318A0, (void *)&_mh_execute_header);
  sub_100005064(&xmmword_1001318B8, "wiFiLQM");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1001318B8, (void *)&_mh_execute_header);
  sub_100005064(qword_1001318D0, "wirelessTrialIdentifier");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1001318D0, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

os_log_t sub_100092280()
{
  qword_1001318E8 = (uint64_t)os_log_create("com.apple.analyticsd.critical", "main");
  qword_1001318F0 = (uint64_t)os_log_create("com.apple.analyticsd.critical", "rollover");
  qword_1001318F8 = (uint64_t)os_log_create("com.apple.analyticsd.critical", "event_process");
  qword_100131900 = (uint64_t)os_log_create("com.apple.CoreAnalytics", "send");
  qword_100131908 = (uint64_t)os_log_create("com.apple.analyticsd.event", "recv");
  qword_100131910 = (uint64_t)os_log_create("com.apple.analyticsd", "client");
  qword_100131918 = (uint64_t)os_log_create("com.apple.analyticsd.critical", "xform");
  qword_100131920 = (uint64_t)os_log_create("com.apple.analyticsd.critical", "xform_cache");
  qword_100131928 = (uint64_t)os_log_create("com.apple.analyticsd.critical", "config");
  qword_100131930 = (uint64_t)os_log_create("com.apple.analyticsd.critical", "db");
  qword_100131940 = (uint64_t)os_log_create("com.apple.analyticsd.critical", "sink");
  qword_100131948 = (uint64_t)os_log_create("com.apple.analyticsd.critical", "query-state");
  qword_100131950 = (uint64_t)os_log_create("com.apple.analyticsd.critical", "xpc");
  qword_100131958 = (uint64_t)os_log_create("com.apple.analyticsd.critical", "perf");
  qword_100131960 = (uint64_t)os_log_create("com.apple.analyticsd.critical", "tracer");
  qword_100131968 = (uint64_t)os_log_create("com.apple.analyticsd", "kernellistener");
  os_log_t result = os_log_create("com.apple.CoreAnalytics.data-quality", "heartbeat-2hr");
  qword_100131970 = (uint64_t)result;
  return result;
}

void sub_100092418(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v7 = a1;
  sub_100092500(&v6);
  uint64_t v5 = &v7;
  id v3 = v6;
  *a2 = 0xAAAAAAAAAAAAAA00LL;
  a2[1] = 0LL;
  dispatch_queue_attr_t v4 = (dispatch_queue_s *)v3;
  sub_1000041AC((uint64_t)a2);
  sub_1000041AC((uint64_t)a2);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100093B08;
  block[3] = &unk_1001256F0;
  block[4] = a2;
  block[5] = &v5;
  dispatch_sync(v4, block);
}

id sub_100092500@<X0>(void *a1@<X8>)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)&qword_1001319E8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1001319E8))
  {
    qword_1001319E0 = 0LL;
    __cxa_atexit((void (*)(void *))sub_1000925A4, &qword_1001319E0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1001319E8);
  }

  if (qword_1001319F0 != -1) {
    dispatch_once(&qword_1001319F0, &stru_10012B010);
  }
  id result = (id)qword_1001319E0;
  *a1 = result;
  return result;
}

id *sub_1000925A4(id *a1)
{
  id v2 = *a1;
  *a1 = 0LL;

  return a1;
}

void sub_1000925D8(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a1;
  sub_100092500(&queue);
  v4[0] = a2;
  v4[1] = &v6;
  dispatch_queue_t v3 = queue;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100094004;
  block[3] = &unk_1001287C0;
  block[4] = v4;
  dispatch_sync(queue, block);
}

uint64_t sub_100092688()
{
  if (qword_100131980 != -1) {
    dispatch_once(&qword_100131980, &stru_10012AF90);
  }
  return dword_100131978;
}

void sub_1000926C8(id a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  dword_100131978 = [v1 integerForKey:@"budget"];

  if (!dword_100131978)
  {
    dword_100131978 = 16000;
    if (sub_10006F0AC()) {
      dword_100131978 *= 2;
    }
  }

void sub_100092730(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100092740()
{
  if (qword_100131990 != -1) {
    dispatch_once(&qword_100131990, &stru_10012AFB0);
  }
  return dword_100131988;
}

void sub_100092780(id a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  dword_100131988 = [v1 integerForKey:@"cache_size"];

  if (!dword_100131988) {
    dword_100131988 = 30;
  }
}

void sub_1000927D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000927E4(uint64_t a1)
{
  uint64_t v3 = a1;
  dispatch_queue_t v2 = queue;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100094274;
  block[3] = &unk_1001287C0;
  block[4] = &v3;
  dispatch_sync(queue, block);
}

void sub_10009288C(void *a1@<X8>)
{
  id v2 = v5;
  *a1 = 0xAAAAAAAAAAAAAA00LL;
  a1[1] = 0LL;
  uint64_t v3 = (dispatch_queue_s *)v2;
  sub_1000041AC((uint64_t)a1);
  sub_1000041AC((uint64_t)a1);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100094740;
  block[3] = &unk_1001256F0;
  block[4] = a1;
  void block[5] = &v4;
  dispatch_sync(v3, block);
}

BOOL sub_100092968()
{
  dispatch_queue_t v0 = queue;
  char v6 = -86;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100094C24;
  block[3] = &unk_1001256F0;
  block[4] = &v6;
  void block[5] = &v3;
  dispatch_sync(queue, block);
  BOOL v1 = v6 != 0;

  return v1;
}

void sub_100092A24(char a1)
{
  char v4 = a1;
  sub_100092500(&queue);
  id v2 = &v4;
  dispatch_queue_t v1 = queue;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100094E5C;
  block[3] = &unk_1001287C0;
  block[4] = &v2;
  dispatch_sync(queue, block);
}

BOOL sub_100092AD0()
{
  dispatch_queue_t v0 = queue;
  char v6 = -86;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100094EC0;
  block[3] = &unk_1001256F0;
  block[4] = &v6;
  void block[5] = &v3;
  dispatch_sync(queue, block);
  BOOL v1 = v6 != 0;

  return v1;
}

unint64_t sub_100092B8C()
{
  return sub_100092B98(@"cpu_uptime");
}

unint64_t sub_100092B98(void *a1)
{
  id v6 = a1;
  sub_100092500(&queue);
  char v4 = &v6;
  dispatch_queue_t v1 = queue;
  unint64_t v8 = 0xAAAAAAAAAAAAAAAALL;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000938F0;
  block[3] = &unk_1001256F0;
  block[4] = &v8;
  void block[5] = &v4;
  dispatch_sync(queue, block);
  unint64_t v2 = v8;

  return v2;
}

unint64_t sub_100092C64()
{
  return sub_100092B98(@"wall_uptime");
}

void sub_100092C70()
{
  dispatch_queue_t v0 = queue;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100094F24;
  block[3] = &unk_1001287C0;
  block[4] = &v1;
  dispatch_sync(queue, block);
}

double sub_100092D10()
{
  dispatch_queue_t v0 = queue;
  uint64_t v6 = -1LL;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100095084;
  block[3] = &unk_1001256F0;
  block[4] = &v6;
  void block[5] = &v3;
  dispatch_sync(queue, block);
  double v1 = *(double *)&v6;

  return v1;
}

void sub_100092DCC(double a1)
{
  double v4 = a1;
  sub_100092500(&queue);
  unint64_t v2 = &v4;
  dispatch_queue_t v1 = queue;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000950E8;
  block[3] = &unk_1001287C0;
  block[4] = &v2;
  dispatch_sync(queue, block);
}

void sub_100092E78(int a1, int a2)
{
  int v5 = a2;
  int v6 = a1;
  sub_100092500(&queue);
  v3[0] = &v6;
  v3[1] = &v5;
  dispatch_queue_t v2 = queue;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10009514C;
  block[3] = &unk_1001287C0;
  block[4] = v3;
  dispatch_sync(queue, block);
}

void sub_100092F28(void *a1@<X8>)
{
  id v2 = v5;
  *a1 = 0xAAAAAAAAAAAAAA00LL;
  a1[1] = 0LL;
  char v3 = (dispatch_queue_s *)v2;
  sub_1000041AC((uint64_t)a1);
  sub_1000041AC((uint64_t)a1);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100095170;
  block[3] = &unk_1001256F0;
  block[4] = a1;
  void block[5] = &v4;
  dispatch_sync(v3, block);
}

uint64_t sub_100093004@<X0>(uint64_t a1@<X8>)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)&qword_1001319A8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1001319A8))
  {
    byte_100131998 = 0;
    qword_1001319A0 = 0LL;
    sub_1000041AC((uint64_t)&byte_100131998);
    sub_1000041AC((uint64_t)&byte_100131998);
    __cxa_atexit((void (*)(void *))sub_10000417C, &byte_100131998, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1001319A8);
  }

  if (qword_1001319B0 != -1) {
    dispatch_once(&qword_1001319B0, &stru_10012AFD0);
  }
  return sub_10000C3E4(a1, (uint64_t)&byte_100131998);
}

void sub_1000930BC(id a1)
{
  dispatch_queue_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  unsigned __int8 v2 = (void *)objc_claimAutoreleasedReturnValue([v1 stringForKey:@"daemon_perf_params"]);

  if (!v2 || ![v2 length]) {
    goto LABEL_10;
  }
  sub_100005064(__p, (char *)[v2 UTF8String]);
  unint64_t v16 = 0LL;
  sub_100018788((uint64_t)__p, (uint64_t)buf, 1, &v10);
  char v3 = v16;
  if (v16 == buf)
  {
    uint64_t v4 = 4LL;
    char v3 = buf;
  }

  else
  {
    if (!v16) {
      goto LABEL_8;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*(void *)v3 + 8 * v4))();
LABEL_8:
  sub_1000041AC((uint64_t)&v10);
  char v5 = byte_100131998;
  byte_100131998 = v10;
  LOBYTE(v10) = v5;
  int v6 = (uint64_t *)qword_1001319A0;
  qword_1001319A0 = (uint64_t)v11;
  uint64_t v11 = v6;
  sub_1000041AC((uint64_t)&byte_100131998);
  sub_1000041AC((uint64_t)&v10);
  sub_10000425C(&v11, v10);
  if (v13 < 0) {
    operator delete(*(void **)__p);
  }
LABEL_10:
  uint64_t v7 = (os_log_s *)qword_100131958;
  if (byte_100131998)
  {
    unint64_t v8 = (os_log_s *)(id)qword_100131958;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      sub_100006200((uint64_t)&byte_100131998, -1, 0x20u, 0LL, 1, buf);
      if (v15 >= 0) {
        uint64_t v9 = buf;
      }
      else {
        uint64_t v9 = *(uint8_t **)buf;
      }
      *(_DWORD *)__int128 __p = 136315138;
      *(void *)&__p[4] = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "[DaemonState] Reporting specified daemon perf params parameters: %s",  __p,  0xCu);
      if (v15 < 0) {
        operator delete(*(void **)buf);
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_100131958, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "[DaemonState] Demon perf checks are disabled. Please update the daemon perf params in defaults if you wish to turn on perf checks.",  buf,  2u);
  }
}

void sub_1000932F8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  unint64_t v23 = v22;

  _Unwind_Resume(a1);
}

BOOL sub_1000933B0()
{
  dispatch_queue_t v0 = queue;
  char v6 = -86;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000953E4;
  block[3] = &unk_1001256F0;
  block[4] = &v6;
  void block[5] = &v3;
  dispatch_sync(queue, block);
  BOOL v1 = v6 != 0;

  return v1;
}

BOOL sub_10009346C()
{
  dispatch_queue_t v0 = queue;
  char v6 = -86;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000954C8;
  block[3] = &unk_1001256F0;
  block[4] = &v6;
  void block[5] = &v3;
  dispatch_sync(queue, block);
  BOOL v1 = v6 != 0;

  return v1;
}

void sub_100093528(char a1)
{
  char v4 = a1;
  sub_100092500(&queue);
  unsigned __int8 v2 = &v4;
  dispatch_queue_t v1 = queue;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100095558;
  block[3] = &unk_1001287C0;
  block[4] = &v2;
  dispatch_sync(queue, block);
}

void sub_1000935D4()
{
  dispatch_queue_t v0 = queue;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000955BC;
  block[3] = &unk_1001287C0;
  block[4] = &v1;
  dispatch_sync(queue, block);
}

void sub_100093674(uint64_t a1@<X8>)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)&qword_1001319D0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1001319D0))
  {
    xmmword_1001319B8 = 0uLL;
    unk_1001319C8 = 0LL;
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1001319B8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1001319D0);
  }

  if (qword_1001319D8 != -1) {
    dispatch_once(&qword_1001319D8, &stru_10012AFF0);
  }
  if (byte_1001319CF < 0)
  {
    sub_10000B8BC((_BYTE *)a1, (void *)xmmword_1001319B8, *((unint64_t *)&xmmword_1001319B8 + 1));
  }

  else
  {
    *(_OWORD *)a1 = xmmword_1001319B8;
    *(void *)(a1 + 16) = unk_1001319C8;
  }

void sub_10009374C(id a1)
{
  char v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  unsigned __int8 v2 = (void *)objc_claimAutoreleasedReturnValue([v1 stringForKey:@"nonce"]);

  if (!v2)
  {
    char v3 = (os_log_s *)qword_1001318E8;
    if (os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "[DeviceKeyManager] WARNING: Device nonce not present; generating and storing new nonce",
        v7,
        2u);
    }

    char v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
    unsigned __int8 v2 = (void *)objc_claimAutoreleasedReturnValue([v4 UUIDString]);

    char v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
    [v5 setObject:v2 forKey:@"nonce"];
  }

  id v6 = v2;
  std::string::assign( (std::string *)&xmmword_1001319B8,  (const std::string::value_type *)[v6 UTF8String]);
}

void sub_100093888(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000938C4(id a1)
{
  dispatch_queue_t v1 = dispatch_queue_create("analyticsd.DaemonState", 0LL);
  unsigned __int8 v2 = (void *)qword_1001319E0;
  qword_1001319E0 = (uint64_t)v1;
}

void sub_1000938F0(uint64_t a1)
{
  unsigned __int8 v2 = *(void ***)(a1 + 40);
  uint64_t v8 = -1LL;
  char v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  char v4 = (void *)objc_claimAutoreleasedReturnValue([v3 stringForKey:**v2]);

  if (v4)
  {
    *(void *)&__int128 v5 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v5 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
    v13[8] = v5;
    v13[9] = v5;
    v13[6] = v5;
    v13[7] = v5;
    v13[4] = v5;
    v13[5] = v5;
    _OWORD v13[2] = v5;
    v13[3] = v5;
    v13[0] = v5;
    v13[1] = v5;
    *(_OWORD *)uint64_t v11 = v5;
    __int128 v12 = v5;
    _OWORD v10[2] = v5;
    void v10[3] = v5;
    v10[0] = v5;
    v10[1] = v5;
    __int128 v9 = v5;
    sub_100005064(&__p, (char *)[v4 UTF8String]);
    sub_10003E1B4((void (__cdecl ***)(std::istringstream *__hidden))&v9, &__p, 8);
    std::istream::operator>>(&v9, &v8);
    if (SBYTE7(v12) < 0) {
      operator delete(v11[0]);
    }
    std::streambuf::~streambuf(v10);
    std::ios::~ios((char *)v13 + 8);
    uint64_t v6 = v8;
  }

  else
  {
    uint64_t v6 = -1LL;
  }

  **(void **)(a1 + 3sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = v6;
}

void sub_100093A78( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void (__cdecl **a18)(std::stringbuf *__hidden this), uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, void *__p, uint64_t a27, int a28, __int16 a29, char a30, char a31)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  sub_1000DE924(v32 + 16, (uint64_t)&a16);

  _Unwind_Resume(a1);
}

void sub_100093B08(uint64_t a1)
{
  unsigned __int8 v2 = *(uint64_t ***)(a1 + 40);
  char v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  char v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", **v2));
  __int128 v5 = (void *)objc_claimAutoreleasedReturnValue([v3 stringForKey:v4]);

  if (v5 && [v5 length])
  {
    unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v20 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    id v6 = v5;
    unint64_t v21 = (const char *)[v6 UTF8String];
    char v26 = 0LL;
    sub_100093E74(&v21, (uint64_t)buf, 1, &v19);
    uint64_t v7 = v26;
    if (v26 == buf)
    {
      uint64_t v8 = 4LL;
      uint64_t v7 = buf;
    }

    else
    {
      if (!v26)
      {
LABEL_11:
        int v11 = v19;
        __int128 v12 = (os_log_s *)(id)qword_1001318E8;
        char v13 = v12;
        if (v11)
        {
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
            sub_1000DE960(**v2, buf, (uint64_t)[v6 length], v13);
          }
        }

        else if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          uint64_t v14 = **v2;
          id v15 = [v6 length];
          *(_DWORD *)std::string buf = 136315394;
          uint64_t v23 = v14;
          __int16 v24 = 2048;
          id v25 = v15;
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "[DaemonState] WARNING: %s parameters exist (%lu bytes) but was not parsed",  buf,  0x16u);
        }

        goto LABEL_18;
      }

      uint64_t v8 = 5LL;
    }

    (*(void (**)(void))(*(void *)v7 + 8 * v8))();
    goto LABEL_11;
  }

  __int128 v9 = (os_log_s *)qword_1001318E8;
  if (os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_INFO))
  {
    uint64_t v10 = **v2;
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v23 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "[DaemonState] No information for key %s",  buf,  0xCu);
  }

  LOBYTE(v19) = 0;
  unint64_t v20 = 0LL;
  sub_1000041AC((uint64_t)&v19);
  sub_1000041AC((uint64_t)&v19);
LABEL_18:

  uint64_t v16 = *(void *)(a1 + 32);
  sub_1000041AC((uint64_t)&v19);
  char v17 = *(_BYTE *)v16;
  *(_BYTE *)uint64_t v16 = v19;
  LOBYTE(v19) = v17;
  __int128 v18 = *(uint64_t **)(v16 + 8);
  *(void *)(v16 + sub_100007004((uint64_t)v1 + 8) = v20;
  unint64_t v20 = v18;
  sub_1000041AC(v16);
  sub_1000041AC((uint64_t)&v19);
  sub_10000425C(&v20, v19);
}

void sub_100093DB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v5 = va_arg(va1, void);

  sub_1000041AC((uint64_t)va);
  sub_10000425C((uint64_t **)va1, v5);

  _Unwind_Resume(a1);
}

void *sub_100093E74@<X0>(const char **a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, void *a4@<X8>)
{
  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0LL;
  *(_BYTE *)a4 = 0;
  sub_1000041AC((uint64_t)a4);
  sub_1000041AC((uint64_t)a4);
  uint64_t v8 = *a1;
  size_t v9 = strlen(v8);
  sub_1000123E4((uint64_t)v14, a2);
  sub_100026B14((uint64_t)v8, (uint64_t)&v8[v9], (uint64_t)v14, a3, (uint64_t)v16);
  sub_100026BFC((uint64_t)v16, 1, (uint64_t)a4);
  sub_10001A17C((uint64_t)&v18);
  uint64_t v10 = v17;
  if (v17 == v16)
  {
    uint64_t v11 = 4LL;
    uint64_t v10 = v16;
  }

  else
  {
    if (!v17) {
      goto LABEL_6;
    }
    uint64_t v11 = 5LL;
  }

  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_6:
  id result = v15;
  if (v15 == v14)
  {
    uint64_t v13 = 4LL;
    id result = v14;
  }

  else
  {
    if (!v15) {
      return result;
    }
    uint64_t v13 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v13))();
}

void sub_100093FA8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13)
{
  id v15 = a12;
  if (a12 == &a9)
  {
    uint64_t v16 = 4LL;
    id v15 = &a9;
  }

  else
  {
    if (!a12) {
      goto LABEL_6;
    }
    uint64_t v16 = 5LL;
  }

  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_6:
  sub_10000417C(v13);
  _Unwind_Resume(a1);
}

void sub_100094004(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  unsigned __int8 v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  sub_100006200(*(void *)v1, -1, 0x20u, 0LL, 0, __p);
  if (v7 >= 0) {
    char v3 = __p;
  }
  else {
    char v3 = (void **)__p[0];
  }
  char v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v3));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  **(void **)(v1 + 8)));
  [v2 setObject:v4 forKey:v5];

  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100094104( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, __int128 __p, int a17, __int16 a18, __int16 a19, void **a20)
{
  if (SHIBYTE(a19) < 0) {
    operator delete((void *)__p);
  }

  if (a2 == 1)
  {
    char v26 = __cxa_begin_catch(a1);
    uint64_t v27 = (os_log_s *)(id)qword_1001318E8;
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      uint64_t v28 = (*(uint64_t (**)(void *))(*(void *)v26 + 16LL))(v26);
      uint64_t v29 = **(void **)(v23 + 8);
      sub_100006200(*(void *)v23, -1, 0x20u, 0LL, 1, &a10);
      if (a15 >= 0) {
        __int128 v30 = (void **)&a10;
      }
      else {
        __int128 v30 = a10;
      }
      LODWORD(__p) = 136315650;
      *(void *)((char *)&__p + 4) = v28;
      WORD6(__p) = 2082;
      *(void *)((char *)&__p + 14) = v29;
      a19 = 2082;
      a20 = v30;
      _os_log_error_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_ERROR,  "[DaemonState] ERROR: Exception (json: %s) setting parameters %{public}s for key '%{public}s'",  (uint8_t *)&__p,  0x20u);
      if (a15 < 0) {
        operator delete(a10);
      }
    }

    __cxa_end_catch();
    JUMPOUT(0x1000940D0LL);
  }

  _Unwind_Resume(a1);
}

void sub_100094274(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 32);
  uint64_t v2 = *v1;
  unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
  id v25 = "user-interface-language";
  *(void *)&__int128 v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)std::string __p = v3;
  __int128 v23 = v3;
  sub_100008780(v2, &v25, (uint64_t)__p);
  __int128 buf = (unint64_t)v2;
  uint64_t v27 = 0LL;
  uint64_t v28 = 0LL;
  unint64_t v29 = 0x8000000000000000LL;
  if (!v2) {
    __assert_rtn("iter_impl", "iter_impl.hpp", 88, "m_object != nullptr");
  }
  sub_100008AC8((unsigned __int8 **)&buf);
  if (sub_1000087E8((unsigned __int8 **)__p, (unsigned __int8 **)&buf))
  {
    char v4 = (_BYTE *)sub_10009AE9C();
    if (!v4) {
      goto LABEL_13;
    }
  }

  else
  {
    char v4 = sub_100008924((unsigned __int8 **)__p);
  }

  if (*v4 == 3)
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
    sub_1000218CC((uint64_t)v4, (std::string *)__p);
    if ((SBYTE7(v23) & 0x80u) == 0) {
      id v6 = __p;
    }
    else {
      id v6 = (void **)__p[0];
    }
    char v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v6));
    [v5 setObject:v7 forKey:@"user-interface-language"];

    if (SBYTE7(v23) < 0) {
      operator delete(__p[0]);
    }
  }

void sub_1000946C4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_100094728(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

void sub_100094740(uint64_t a1)
{
  unint64_t v23 = 0xAAAAAAAAAAAAAA00LL;
  unint64_t v24 = 0LL;
  sub_1000041AC((uint64_t)&v23);
  sub_1000041AC((uint64_t)&v23);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  __int128 v3 = (void *)objc_claimAutoreleasedReturnValue([v2 valueForKey:@"user-interface-language"]);

  if (v3) {
    sub_100005064(__p, (char *)[v3 UTF8String]);
  }
  else {
    sub_100005064(__p, "<unknown>");
  }
  sub_100008E5C((uint64_t)v31, (uint64_t)__p);
  char v4 = sub_100003F94((unsigned __int8 *)&v23, "user-interface-language");
  sub_1000041AC((uint64_t)v31);
  char v5 = *(_BYTE *)v4;
  *(_BYTE *)char v4 = v31[0];
  v31[0] = v5;
  id v6 = (uint64_t *)v4[1];
  v4[1] = (uint64_t)v32;
  uint64_t v32 = v6;
  sub_1000041AC((uint64_t)v4);
  sub_1000041AC((uint64_t)v31);
  sub_10000425C(&v32, v31[0]);
  if (v30 < 0) {
    operator delete(__p[0]);
  }
  char v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 valueForKey:@"preferred-user-interface-language"]);

  __int128 v9 = v8;
  if (v8) {
    sub_100005064(__p, (char *)[v8 UTF8String]);
  }
  else {
    sub_100005064(__p, "<unknown>");
  }
  sub_100008E5C((uint64_t)v27, (uint64_t)__p);
  uint64_t v10 = sub_100003F94((unsigned __int8 *)&v23, "preferred-user-interface-language");
  sub_1000041AC((uint64_t)v27);
  char v11 = *(_BYTE *)v10;
  *(_BYTE *)uint64_t v10 = v27[0];
  v27[0] = v11;
  __int128 v12 = (uint64_t *)v10[1];
  v10[1] = (uint64_t)v28;
  uint64_t v28 = v12;
  sub_1000041AC((uint64_t)v10);
  sub_1000041AC((uint64_t)v27);
  sub_10000425C(&v28, v27[0]);
  if (v30 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 valueForKey:@"user-set-region-format"]);

  if (v14) {
    sub_100005064(__p, (char *)[v14 UTF8String]);
  }
  else {
    sub_100005064(__p, "<unknown>");
  }
  sub_100008E5C((uint64_t)v25, (uint64_t)__p);
  __int128 v15 = sub_100003F94((unsigned __int8 *)&v23, "user-set-region-format");
  sub_1000041AC((uint64_t)v25);
  char v16 = *(_BYTE *)v15;
  *(_BYTE *)__int128 v15 = v25[0];
  v25[0] = v16;
  char v17 = (uint64_t *)v15[1];
  v15[1] = (uint64_t)v26;
  char v26 = v17;
  sub_1000041AC((uint64_t)v15);
  sub_1000041AC((uint64_t)v25);
  sub_10000425C(&v26, v25[0]);
  if (v30 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v18 = (os_log_s *)(id)qword_1001318E8;
  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    sub_100006200((uint64_t)&v23, -1, 0x20u, 0LL, 1, __p);
    if (v30 >= 0) {
      unint64_t v19 = __p;
    }
    else {
      unint64_t v19 = (void **)__p[0];
    }
    *(_DWORD *)__int128 buf = 136315138;
    __int128 v34 = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "[DaemonState] fetched local info: %s", buf, 0xCu);
    if (v30 < 0) {
      operator delete(__p[0]);
    }
  }

  uint64_t v20 = *(void *)(a1 + 32);
  sub_1000041AC((uint64_t)&v23);
  char v21 = *(_BYTE *)v20;
  *(_BYTE *)uint64_t v20 = v23;
  LOBYTE(v23) = v21;
  unint64_t v22 = *(uint64_t **)(v20 + 8);
  *(void *)(v20 + sub_100007004((uint64_t)v1 + 8) = v24;
  unint64_t v24 = v22;
  sub_1000041AC(v20);
  sub_1000041AC((uint64_t)&v23);
  sub_10000425C(&v24, v23);
}

void sub_100094B3C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned __int8 a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, char a22)
{
  sub_1000041AC((uint64_t)&a10);
  sub_10000425C(v22, a10);
  _Unwind_Resume(a1);
}

void sub_100094C24(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObjects:](&OBJC_CLASS___NSSet, "setWithObjects:", @"greymatter", 0LL));
  __int128 v3 = (void *)objc_claimAutoreleasedReturnValue( +[AnalyticsXPCSubscriptionManager AnalyticsQueryValuesWrapperWithArguments:]( &OBJC_CLASS____TtC10analyticsd31AnalyticsXPCSubscriptionManager,  "AnalyticsQueryValuesWrapperWithArguments:",  v2));
  xpc_object_t dictionary = xpc_dictionary_get_dictionary(v3, (const char *)[@"greymatter" UTF8String]);
  char v5 = (void *)objc_claimAutoreleasedReturnValue(dictionary);
  id v6 = v5;
  if (!v5 || xpc_get_type(v5) != (xpc_type_t)&_xpc_type_dictionary)
  {
    char v7 = (os_log_s *)qword_100131940;
    if (os_log_type_enabled((os_log_t)qword_100131940, OS_LOG_TYPE_ERROR)) {
      sub_1000DE9B4(v7, v8, v9, v10, v11, v12, v13, v14);
    }
    LOBYTE(v15) = 0;
    goto LABEL_6;
  }

  memset(__p, 170, sizeof(__p));
  string = (char *)xpc_dictionary_get_string(v6, "availability");
  sub_100005064(__p, string);
  char v17 = HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) < 0)
  {
    if (__p[1] == (void *)9)
    {
      uint64_t v18 = (void **)__p[0];
      goto LABEL_12;
    }
  }

  else if (SHIBYTE(__p[2]) == 9)
  {
    uint64_t v18 = __p;
LABEL_12:
    unint64_t v19 = *v18;
    int v20 = *((unsigned __int8 *)v18 + 8);
    BOOL v15 = v19 == (void *)0x6C62616C69617661LL && v20 == 101;
    goto LABEL_19;
  }

  BOOL v15 = 0;
LABEL_19:
  unint64_t v22 = (os_log_s *)qword_1001318E8;
  if (os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 67109120;
    BOOL v25 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_INFO,  "[DaemonState] fetched gm availability info: %{BOOL}d",  buf,  8u);
    char v17 = HIBYTE(__p[2]);
  }

  if (v17 < 0) {
    operator delete(__p[0]);
  }
LABEL_6:

  **(_BYTE **)(a1 + 3sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = v15;
}

void sub_100094E28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100094E5C(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 ***)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  [v2 setBool:**v1 forKey:@"reset_dev_config"];
}

void sub_100094EAC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_100094EC0(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  unsigned __int8 v3 = [v2 BOOLForKey:@"reset_dev_config"];

  **(_BYTE **)(a1 + 3sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = v3;
}

void sub_100094F14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100094F24()
{
  __darwin_time_t v0 = sub_100043AF8();
  if (v0 < 0)
  {
    char v4 = (os_log_s *)qword_100131958;
    if (os_log_type_enabled((os_log_t)qword_100131958, OS_LOG_TYPE_ERROR)) {
      sub_1000DEA6C(v4, v5, v6, v7, v8, v9, v10, v11);
    }
  }

  else
  {
    __darwin_time_t v1 = v0;
    id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
    unsigned __int8 v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%ld", v1));
    [v2 setObject:v3 forKey:@"cpu_uptime"];
  }

  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v12 = sub_100043A60();
  if (v12 < 0)
  {
    char v16 = (os_log_s *)qword_100131958;
    if (os_log_type_enabled((os_log_t)qword_100131958, OS_LOG_TYPE_ERROR)) {
      sub_1000DEA10(v16, v17, v18, v19, v20, v21, v22, v23);
    }
  }

  else
  {
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v13 = v12;
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
    BOOL v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%ld", v13));
    [v14 setObject:v15 forKey:@"wall_uptime"];
  }

void sub_10009505C(_Unwind_Exception *a1)
{
  unsigned __int8 v3 = v2;

  _Unwind_Resume(a1);
}

void sub_100095084(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  [v2 doubleForKey:@"app_usage_last_sync"];
  uint64_t v4 = v3;

  **(void **)(a1 + 3sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = v4;
}

void sub_1000950D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000950E8(uint64_t a1)
{
  __darwin_time_t v1 = *(double ***)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  [v2 setDouble:@"app_usage_last_sync" forKey:**v1];
}

void sub_100095138( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

uint64_t sub_10009514C(uint64_t result)
{
  __darwin_time_t v1 = *(int ***)(result + 32);
  uint64_t v3 = *v1;
  id v2 = v1[1];
  dword_1001319F8 = *v3;
  dword_1001319FC = *v2;
  return result;
}

void sub_100095170(uint64_t a1)
{
  unint64_t v13 = 0xAAAAAAAAAAAAAA00LL;
  uint64_t v14 = 0LL;
  sub_1000041AC((uint64_t)&v13);
  sub_1000041AC((uint64_t)&v13);
  if (dword_1001319F8 >= 3)
  {
    else {
      id v2 = "3-10";
    }
  }

  else
  {
    id v2 = off_10012B030[dword_1001319F8];
  }

  char v16 = v2;
  sub_10000E89C((uint64_t)v18, &v16);
  uint64_t v3 = sub_100003F94((unsigned __int8 *)&v13, "trialRollouts");
  sub_1000041AC((uint64_t)v18);
  char v4 = *(_BYTE *)v3;
  *(_BYTE *)uint64_t v3 = v18[0];
  v18[0] = v4;
  uint64_t v5 = (uint64_t *)v3[1];
  v3[1] = (uint64_t)v19;
  uint64_t v19 = v5;
  sub_1000041AC((uint64_t)v3);
  sub_1000041AC((uint64_t)v18);
  sub_10000425C(&v19, v18[0]);
  if (dword_1001319FC >= 3)
  {
    else {
      uint64_t v6 = "3-10";
    }
  }

  else
  {
    uint64_t v6 = off_10012B030[dword_1001319FC];
  }

  BOOL v15 = v6;
  sub_10000E89C((uint64_t)&v16, &v15);
  uint64_t v7 = sub_100003F94((unsigned __int8 *)&v13, "trialExperiments");
  sub_1000041AC((uint64_t)&v16);
  char v8 = *(_BYTE *)v7;
  *(_BYTE *)uint64_t v7 = (_BYTE)v16;
  LOBYTE(v16) = v8;
  uint64_t v9 = (uint64_t *)v7[1];
  v7[1] = (uint64_t)v17;
  uint64_t v17 = v9;
  sub_1000041AC((uint64_t)v7);
  sub_1000041AC((uint64_t)&v16);
  sub_10000425C(&v17, v16);
  uint64_t v10 = *(void *)(a1 + 32);
  sub_1000041AC((uint64_t)&v13);
  char v11 = *(_BYTE *)v10;
  *(_BYTE *)uint64_t v10 = v13;
  LOBYTE(v13) = v11;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v12 = *(uint64_t **)(v10 + 8);
  *(void *)(v10 + sub_100007004((uint64_t)v1 + 8) = v14;
  uint64_t v14 = v12;
  sub_1000041AC(v10);
  sub_1000041AC((uint64_t)&v13);
  sub_10000425C(&v14, v13);
}

void sub_100095384( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t a10, uint64_t a11, unsigned __int8 a12, uint64_t *a13)
{
}

void sub_1000953E4(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  unsigned __int8 v3 = [v2 BOOLForKey:@"activateSamplingOverride"];

  char v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  id v5 = [v4 integerForKey:@"samplingPercentage"];

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  [v6 removeObjectForKey:@"activateSamplingOverride"];

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  [v7 removeObjectForKey:@"samplingPercentage"];

  if (v5 == (id)100) {
    unsigned __int8 v8 = v3;
  }
  else {
    unsigned __int8 v8 = 0;
  }
  **(_BYTE **)(a1 + 3sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = v8;
}

void sub_1000954AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000954C8(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  unsigned __int8 v3 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKey:@"current_disable_sampling_override"]);

  if (v3) {
    unsigned __int8 v4 = [v3 BOOLValue];
  }
  else {
    unsigned __int8 v4 = 0;
  }

  **(_BYTE **)(a1 + 3sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = v4;
}

void sub_10009553C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100095558(uint64_t a1)
{
  __darwin_time_t v1 = *(unsigned __int8 ***)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  [v2 setBool:**v1 forKey:@"staged_disable_sampling_override"];
}

void sub_1000955A8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1000955BC()
{
  __darwin_time_t v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  id v4 = (id)objc_claimAutoreleasedReturnValue([v0 objectForKey:@"staged_disable_sampling_override"]);

  __darwin_time_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  [v1 removeObjectForKey:@"staged_disable_sampling_override"];

  id v2 = v4;
  if (v4)
  {
    if ([v4 BOOLValue])
    {
      unsigned __int8 v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
      [v3 setBool:1 forKey:@"current_disable_sampling_override"];
    }

    else
    {
      unsigned __int8 v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
      [v3 removeObjectForKey:@"current_disable_sampling_override"];
    }

    id v2 = v4;
  }
}

void sub_100095680( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *sub_1000956B4()
{
  v2[0] = &off_10012B058;
  unsigned __int8 v3 = v2;
  sub_100041324((uint64_t)v2);
  id result = v3;
  if (v3 == v2)
  {
    uint64_t v1 = 4LL;
    id result = v2;
  }

  else
  {
    if (!v3) {
      return result;
    }
    uint64_t v1 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v1))();
}

void sub_100095748( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v14 = a13;
  if (a13 == &a10)
  {
    uint64_t v15 = 4LL;
    uint64_t v14 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v15 = 5LL;
  }

  (*(void (**)(void))(*(void *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_100095784()
{
  __darwin_time_t v0 = (std::string *)v6[0];
  uint64_t v1 = v6[1];
  if (v6[0] == v6[1])
  {
LABEL_5:
    uint64_t v2 = 0LL;
  }

  else
  {
    while (1)
    {
      sub_1000D4248((const char *)v0, 0LL, (int *)&v7);
      if (v7 >= 2 && !sub_1000D4C9C(v0, 0LL)) {
        break;
      }
      if (++v0 == (std::string *)v1) {
        goto LABEL_5;
      }
    }

    unsigned __int8 v3 = (os_log_s *)qword_1001318E8;
    if (os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_DEFAULT))
    {
      if ((v0->__r_.__value_.__s.__size_ & 0x80u) == 0) {
        id v4 = v0;
      }
      else {
        id v4 = (std::string *)v0->__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)__int128 buf = 136446210;
      *(void *)&uint8_t buf[4] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "[LegacyContains] Found contents in legacy transform state directory: %{public}s",  buf,  0xCu);
    }

    uint64_t v2 = 1LL;
  }

  *(void *)__int128 buf = v6;
  sub_100015E44((void ***)buf);
  return v2;
}

void *sub_1000959A8()
{
  id result = operator new(0x10uLL);
  *id result = &off_10012B058;
  return result;
}

void sub_1000959CC(uint64_t a1, void *a2)
{
  *a2 = &off_10012B058;
}

void sub_1000959E4()
{
  std::string __p = buf;
  sub_1000D4D90((uint64_t)&__p, 0LL);
  if (v0)
  {
    uint64_t v1 = (os_log_s *)qword_1001318E8;
    if (os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_INFO))
    {
      p_p = &__p;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
      _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_INFO,  "[LegacyWipe] Removed legacy allowlist: %{public}s",  (uint8_t *)&buf,  0xCu);
    }
  }

  sub_100041598(&buf);
  std::string __p = buf;
  sub_1000D4D90((uint64_t)&__p, 0LL);
  if (v3)
  {
    id v4 = (os_log_s *)qword_1001318E8;
    if (os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_INFO))
    {
      id v5 = &__p;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        id v5 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "[LegacyWipe] Removed legacy config: %{public}s",  (uint8_t *)&buf,  0xCu);
    }
  }

  sub_1000416C0(&buf);
  std::string __p = buf;
  if (sub_1000D4EE0(&__p, 0LL))
  {
    uint64_t v6 = (os_log_s *)qword_1001318E8;
    if (os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_INFO))
    {
      unsigned int v7 = &__p;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        unsigned int v7 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "[LegacyWipe] Removed all in legacy journal directory: %{public}s",  (uint8_t *)&buf,  0xCu);
    }
  }

  sub_1000417E8(&buf);
  std::string __p = buf;
  if (sub_1000D4EE0(&__p, 0LL))
  {
    unsigned __int8 v8 = (os_log_s *)qword_1001318E8;
    if (os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = &__p;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        uint64_t v9 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "[LegacyWipe] Removed all in legacy markov path: %{public}s",  (uint8_t *)&buf,  0xCu);
    }
  }

  sub_100041910(&buf);
  std::string __p = buf;
  sub_1000D4D90((uint64_t)&__p, 0LL);
  if (v10)
  {
    char v11 = (os_log_s *)qword_1001318E8;
    if (os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_DEFAULT))
    {
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v12 = &__p;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "[LegacyWipe] Removed legacy budget usage path: %{public}s",  (uint8_t *)&buf,  0xCu);
    }
  }

  sub_100041A38(&buf);
  std::string __p = buf;
  sub_1000D4D90((uint64_t)&__p, 0LL);
  if (v13)
  {
    uint64_t v14 = (os_log_s *)qword_1001318E8;
    if (os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = &__p;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        uint64_t v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v15;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "[LegacyWipe] Removed legacy budget usage temp path: %{public}s",  (uint8_t *)&buf,  0xCu);
    }
  }

  memset(&buf, 170, sizeof(buf));
  sub_100041B60(&buf.__r_.__value_.__l.__data_);
  for (uint64_t i = (const std::string *)buf.__r_.__value_.__r.__words[0];
        i != (const std::string *)buf.__r_.__value_.__l.__size_;
        ++i)
  {
    std::string::operator=(&__p, i);
    if (sub_1000D4EE0(&__p, 0LL))
    {
      uint64_t v17 = (os_log_s *)qword_1001318E8;
      if (os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_DEFAULT))
      {
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v18 = &__p;
        }
        else {
          uint64_t v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)BOOL v25 = 136446210;
        *(void *)&v25[4] = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "[LegacyWipe] Removed legacy transform state directory: %{public}s",  v25,  0xCu);
      }
    }
  }

  memset(v25, 170, 24);
  sub_100042AF8((char **)v25);
  for (uint64_t j = *(const std::string **)v25; j != *(const std::string **)&v25[8]; ++j)
  {
    std::string::operator=(&__p, j);
    sub_1000D4D90((uint64_t)&__p, 0LL);
    if (v20)
    {
      uint64_t v21 = (os_log_s *)qword_1001318E8;
      if (os_log_type_enabled((os_log_t)qword_1001318E8, OS_LOG_TYPE_DEFAULT))
      {
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v22 = &__p;
        }
        else {
          uint64_t v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)unint64_t v24 = 136446210;
        *(void *)&v24[4] = v22;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "[LegacyWipe] Removed legacy transform staging path: %{public}s",  v24,  0xCu);
      }
    }
  }

  *(void *)unint64_t v24 = v25;
  sub_100015E44((void ***)v24);
  *(void *)BOOL v25 = &buf;
  sub_100015E44((void ***)v25);
}

void sub_100096128()
{
}

uint64_t sub_100096398(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

void (**sub_1000963D4())(std::__shared_weak_count *__hidden this, const std::type_info *)
{
}

uint64_t sub_1000963E0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16LL))(a2);
}

void sub_100096404( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

void sub_100096430(uint64_t a1, __int16 a2, __int16 a3, CFTypeRef cf)
{
  unsigned __int8 v8 = atomic_load((unsigned __int8 *)&qword_100131A28);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_100131A28))
  {
    xmmword_100131A00 = 0u;
    *(_OWORD *)algn_100131A10 = 0u;
    dword_100131A20 = 1065353216;
    __cxa_atexit((void (*)(void *))sub_100096634, &xmmword_100131A00, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_100131A28);
  }

  unsigned __int8 v9 = atomic_load((unsigned __int8 *)&qword_100131A38);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_100131A38))
  {
    qword_100131A30 = (uint64_t)dispatch_queue_create("com.apple.CoreAnalytics::Tracer", 0LL);
    __cxa_guard_release(&qword_100131A38);
  }

  CFRetain(cf);
  int v10 = (dispatch_queue_s *)qword_100131A30;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768LL;
  block[2] = sub_100096638;
  block[3] = &unk_10012B0C8;
  if (*(char *)(a1 + 23) < 0)
  {
    sub_10000B8BC(__p, *(void **)a1, *(void *)(a1 + 8));
  }

  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a1;
    uint64_t v12 = *(void *)(a1 + 16);
  }

  LOWORD(v13) = a2;
  WORD1(v13) = a3;
  *((void *)&v13 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = cf;
  if (SHIBYTE(v12) < 0)
  {
    sub_10000B8BC(&v15, __p[0], (unint64_t)__p[1]);
  }

  else
  {
    __int128 v15 = *(_OWORD *)__p;
    uint64_t v16 = v12;
  }

  __int128 v17 = v13;
  dispatch_async(v10, block);
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete((void *)v15);
  }
}

void sub_100096610( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100096638(uint64_t a1)
{
  uint64_t v2 = (__int128 *)(a1 + 32);
  int v3 = sub_100021A64(&xmmword_100131A00, (unsigned __int8 *)(a1 + 32));
  if (!v3)
  {
    id v4 = operator new(0x40uLL);
    sub_100096B00((uint64_t)v4, v2);
    unsigned __int8 v9 = v2;
    id v5 = sub_100097614((uint64_t)&xmmword_100131A00, (unsigned __int8 *)v2, (uint64_t)&unk_1000F5000, &v9);
    uint64_t v6 = *((void *)v5 + 5);
    *((void *)v5 + 5) = v4;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
    unsigned __int8 v9 = v2;
    int v3 = sub_100097614((uint64_t)&xmmword_100131A00, (unsigned __int8 *)v2, (uint64_t)&unk_1000F5000, &v9);
  }

  unsigned __int8 v8 = *(void **)(a1 + 64);
  unsigned int v7 = (CFTypeRef *)(a1 + 64);
  sub_1000967D8(*((void *)v3 + 5), *((_WORD *)v7 - 4), *((_WORD *)v7 - 3), v8);
  CFRelease(*v7);
}

void sub_10009673C(_Unwind_Exception *a1)
{
}

__n128 sub_100096770(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 32;
  if (*(char *)(a2 + 55) < 0)
  {
    sub_10000B8BC((_BYTE *)v4, *(void **)(a2 + 32), *(void *)(a2 + 40));
  }

  else
  {
    __int128 v5 = *(_OWORD *)(a2 + 32);
    *(void *)(v4 + 16) = *(void *)(a2 + 48);
    *(_OWORD *)uint64_t v4 = v5;
  }

  __n128 result = *(__n128 *)(a2 + 56);
  *(__n128 *)(a1 + 56) = result;
  return result;
}

void sub_1000967C4(uint64_t a1)
{
}

void sub_1000967D8(uint64_t a1, __int16 a2, __int16 a3, void *a4)
{
  if (objc_opt_class(&OBJC_CLASS___RTCReporting))
  {
    id v8 = a4;
    id v9 = [v8 mutableCopy];
    int v10 = (void *)objc_claimAutoreleasedReturnValue(+[OSASystemConfiguration sharedInstance](&OBJC_CLASS___OSASystemConfiguration, "sharedInstance"));
    char v11 = (void *)objc_claimAutoreleasedReturnValue([v10 crashReporterKey]);
    [v9 setObject:v11 forKeyedSubscript:@"CRKey"];

    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    _OWORD v14[2] = sub_100096A34;
    v14[3] = &unk_10012B100;
    id v15 = v9;
    uint64_t v16 = a1;
    __int16 v17 = a2;
    __int16 v18 = a3;
    id v12 = v9;
    sub_10009698C(a1, v14);
  }

  else
  {
    __int128 v13 = (os_log_s *)qword_100131960;
    if (os_log_type_enabled((os_log_t)qword_100131960, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "[RTCReporter] WARNING: Failed to get RTCReporting class",  buf,  2u);
    }
  }

void sub_100096950(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009698C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(dispatch_queue_s **)(a1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100096C90;
  block[3] = &unk_10012B170;
  id v7 = v3;
  uint64_t v8 = a1;
  id v5 = v3;
  dispatch_async(v4, block);
}

id sub_100096A34(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = (os_log_s *)(id)qword_100131960;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) description]);
    sub_1000DED38(v4, (uint64_t)&v6, v3);
  }

  return [*(id *)(v2 + 16) sendMessageWithCategory:*(unsigned __int16 *)(a1 + 48) type:*(unsigned __int16 *)(a1 + 50) payload:*(void *)(a1 + 32) error:0];
}

void sub_100096AE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100096B00(uint64_t a1, __int128 *a2)
{
  *(void *)a1 = off_10012B130;
  sub_100005064(&v16, "com.apple.CoreAnalytics::RTCReporter+");
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    id v5 = (const std::string::value_type *)a2;
  }
  else {
    id v5 = *(const std::string::value_type **)a2;
  }
  if (v4 >= 0) {
    std::string::size_type v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    std::string::size_type v6 = *((void *)a2 + 1);
  }
  id v7 = std::string::append(&v16, v5, v6);
  __int128 v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  int64_t cap = v7->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string __p = v8;
  v7->__r_.__value_.__l.__size_ = 0LL;
  v7->__r_.__value_.__l.__cap_ = 0LL;
  v7->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    id v9 = __p;
  }
  else {
    id v9 = (void **)__p[0];
  }
  dispatch_queue_attr_t v10 = dispatch_queue_attr_make_with_qos_class(0LL, QOS_CLASS_UTILITY, 0);
  char v11 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v10);
  dispatch_queue_t v12 = dispatch_queue_create((const char *)v9, v11);

  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + sub_100007004((uint64_t)v1 + 8) = v12;
  *(void *)(a1 + 16) = 0LL;
  __int128 v13 = (_BYTE *)(a1 + 24);
  if (*((char *)a2 + 23) < 0)
  {
    sub_10000B8BC(v13, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v14 = *a2;
    *(void *)(a1 + 40) = *((void *)a2 + 2);
    *(_OWORD *)__int128 v13 = v14;
  }

  *(_BYTE *)(a1 + 4sub_100007004((uint64_t)v1 + 8) = 0;
  *(void *)(a1 + 56) = 0LL;
  return a1;
}

void sub_100096C54( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void sub_100096C90(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(void *)(v2 + 16))
  {
    if (!*(_BYTE *)(v2 + 48))
    {
      id v3 = (void *)qword_100131A40;
      id v33 = objc_retainBlock(*(id *)(a1 + 32));
      objc_msgSend(v3, "addObject:");

      return;
    }

    goto LABEL_5;
  }

  if (*(_BYTE *)(v2 + 48))
  {
LABEL_5:
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
    *(void *)(v2 + 56) = dispatch_time(0LL, 0LL);
    return;
  }

  int v4 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", arc4random());
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  std::string::size_type v6 = (os_log_s *)qword_100131960;
  if (os_log_type_enabled((os_log_t)qword_100131960, OS_LOG_TYPE_DEBUG)) {
    sub_1000DEDE4(v2, v6, v7);
  }
  id v8 = objc_alloc(&OBJC_CLASS___RTCReporting);
  id v9 = v5;
  uint64_t v37 = kRTCReportingSessionInfoClientType;
  uint64_t v38 = kRTCReportingSessionInfoClientVersion;
  int v42 = (const __CFString *)&off_10012EF30;
  uint64_t v43 = &off_10012EF48;
  uint64_t v39 = kRTCReportingSessionInfoBatchEvent;
  uint64_t v40 = kRTCReportingSessionInfoSessionID;
  char v44 = &__kCFBooleanTrue;
  id v45 = v9;
  uint64_t v41 = kRTCReportingSessionInfoContainsRealtimeEvents;
  int v46 = &__kCFBooleanFalse;
  dispatch_queue_attr_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v42,  &v37,  5LL));

  uint64_t v11 = v2 + 24;
  int v12 = *(unsigned __int8 *)(v2 + 47);
  if ((*(char *)(v2 + 47) & 0x80000000) == 0)
  {
    if (v12 != 10)
    {
      __int128 v13 = (void *)(v2 + 24);
      if (v12 != 13) {
        goto LABEL_23;
      }
      goto LABEL_16;
    }

    if (*(void *)v11 != 0x636974796C616E61LL || *(_WORD *)(v2 + 32) != 25715) {
      goto LABEL_23;
    }
LABEL_37:
    uint64_t v15 = @"com.apple.CoreAnalytics";
    goto LABEL_24;
  }

  uint64_t v14 = *(void *)(v2 + 32);
  if (v14 == 10)
  {
    if (**(void **)v11 != 0x636974796C616E61LL || *(_WORD *)(*(void *)v11 + 8LL) != 25715) {
      goto LABEL_23;
    }
    goto LABEL_37;
  }

  if (v14 != 13)
  {
LABEL_23:
    uint64_t v15 = @"unknown";
    goto LABEL_24;
  }

  __int128 v13 = *(void **)v11;
LABEL_16:
  else {
    uint64_t v15 = @"com.apple.CA";
  }
LABEL_24:
  int v42 = v15;
  uint64_t v37 = kRTCReportingUserInfoClientName;
  uint64_t v38 = kRTCReportingUserInfoServiceName;
  if ((v12 & 0x80u) == 0) {
    uint64_t v17 = v2 + 24;
  }
  else {
    uint64_t v17 = *(void *)v11;
  }
  __int16 v18 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v17));
  uint64_t v43 = v18;
  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v42,  &v37,  2LL));

  id v20 = [v8 initWithSessionInfo:v10 userInfo:v19 frameworksToCheck:0];
  objc_storeStrong((id *)(v2 + 16), v20);
  if (v20)
  {
    id v21 = objc_retainBlock(*(id *)(a1 + 32));
    uint64_t v22 = objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithObject:](&OBJC_CLASS___NSMutableArray, "arrayWithObject:", v21));
    uint64_t v23 = (void *)qword_100131A40;
    qword_100131A40 = v22;

    v34[0] = _NSConcreteStackBlock;
    v34[1] = 3221225472LL;
    v34[2] = sub_10009714C;
    v34[3] = &unk_10012B148;
    uint64_t v36 = v2;
    id v35 = v9;
    [v20 startConfigurationWithCompletionHandler:v34];
  }

  else
  {
    unint64_t v24 = (os_log_s *)qword_100131960;
    if (os_log_type_enabled((os_log_t)qword_100131960, OS_LOG_TYPE_ERROR)) {
      sub_1000DED84(v24, v25, v26, v27, v28, v29, v30, v31);
    }
  }
}

void sub_1000970D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_10009714C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = (os_log_s *)qword_100131960;
  if (v3)
  {
    std::string::size_type v6 = (os_log_s *)(id)qword_100131960;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      unsigned int v7 = [*(id *)(a1 + 32) intValue];
      *(_DWORD *)std::string buf = 67109120;
      unsigned int v19 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "[RTCReporter] Successfully configured RTCReporting with session id: %d",  buf,  8u);
    }

    id v8 = *(dispatch_queue_s **)(v4 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000972B4;
    block[3] = &unk_1001287C0;
    void block[4] = v4;
    dispatch_async(v8, block);
    *(_BYTE *)(v4 + 4sub_100007004((uint64_t)v1 + 8) = 1;
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_100131960, OS_LOG_TYPE_ERROR)) {
      sub_1000DEE60(v5, v9, v10, v11, v12, v13, v14, v15);
    }
    *(_BYTE *)(v4 + 4sub_100007004((uint64_t)v1 + 8) = 0;
    dispatch_time_t v16 = dispatch_time(0LL, 0LL);
    sub_100097464(v4, v16);
  }
}

void sub_100097298(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000972B4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = (os_log_s *)(id)qword_100131960;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 134217984;
    id v14 = [(id)qword_100131A40 count];
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "[RTCReporter] Processing %zu blocks from queue.",  buf,  0xCu);
  }

  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  id v3 = (id)qword_100131A40;
  id v4 = [v3 countByEnumeratingWithState:&v9 objects:v8 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v10;
    do
    {
      std::string::size_type v6 = 0LL;
      do
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v3);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v9 + 1) + 8LL * (void)v6) + 16LL))();
        std::string::size_type v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [v3 countByEnumeratingWithState:&v9 objects:v8 count:16];
    }

    while (v4);
  }

  [(id)qword_100131A40 removeAllObjects];
  dispatch_time_t v7 = dispatch_time(0LL, 0LL);
  *(void *)(v1 + 56) = v7;
  sub_100097464(v1, v7);
}

void sub_100097438(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100097464(uint64_t a1, dispatch_time_t when)
{
  dispatch_time_t v4 = dispatch_time(when, 3000000000LL);
  uint64_t v5 = *(dispatch_queue_s **)(a1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100097504;
  block[3] = &unk_1001256F0;
  void block[4] = a1;
  void block[5] = when;
  dispatch_after(v4, v5, block);
}

void sub_100097504(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  dispatch_time_t v2 = *(void *)(v1 + 56);
  if (v2 <= *(void *)(a1 + 40))
  {
    id v3 = (os_log_s *)qword_100131960;
    if (os_log_type_enabled((os_log_t)qword_100131960, OS_LOG_TYPE_DEBUG)) {
      sub_1000DEEC0(v1, v3, v4);
    }
    *(_BYTE *)(v1 + 4sub_100007004((uint64_t)v1 + 8) = 0;
    uint64_t v5 = *(void **)(v1 + 16);
    *(void *)(v1 + 16) = 0LL;
  }

  else
  {
    sub_100097464(*(void *)(a1 + 32), v2);
  }

uint64_t sub_10009757C(uint64_t a1)
{
  *(void *)a1 = off_10012B130;

  return a1;
}

void sub_1000975C8(void **a1)
{
  *a1 = off_10012B130;

  operator delete(a1);
}

unsigned __int8 *sub_100097614(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  dispatch_time_t v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_100021B64(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint64_t v26 = a4;
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v13 = v8;
      if (v8 >= v10) {
        unint64_t v13 = v8 % v10;
      }
    }

    else
    {
      unint64_t v13 = (v10 - 1) & v8;
    }

    id v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v13);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v9)
        {
          if ((sub_100021BD4(a1 + 32, i + 16, a2) & 1) != 0) {
            return i;
          }
        }

        else
        {
          if (v12 > 1)
          {
            if (v16 >= v10) {
              v16 %= v10;
            }
          }

          else
          {
            v16 &= v10 - 1;
          }

          if (v16 != v13) {
            break;
          }
        }
      }
    }

    a4 = v26;
  }

  else
  {
    unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  }

  memset(v27, 170, sizeof(v27));
  sub_100097908(a1, v9, a4, v27);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v18 = *(float *)(a1 + 32);
  if ((((float)(v18 * (float)v10) >= v17) & ~(v10 == 0)) == 0)
  {
    BOOL v19 = 1LL;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_10002246C(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v13 = v9 % v10;
      }
      else {
        unint64_t v13 = v9;
      }
    }

    else
    {
      unint64_t v13 = (v10 - 1) & v9;
    }
  }

  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v13);
  if (v23)
  {
    *(void *)v27[0] = *v23;
    *uint64_t v23 = v27[0];
  }

  else
  {
    *(void *)v27[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27[0];
    *(void *)(*(void *)a1 + 8 * v13) = a1 + 16;
    if (*(void *)v27[0])
    {
      unint64_t v24 = *(void *)(*(void *)v27[0] + 8LL);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v24 >= v10) {
          v24 %= v10;
        }
      }

      else
      {
        v24 &= v10 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v24) = v27[0];
    }
  }

  uint64_t i = (unsigned __int8 *)v27[0];
  v27[0] = 0LL;
  ++*v7;
  sub_1000979B0((uint64_t)v27, 0LL);
  return i;
}

void sub_1000978E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

_BYTE *sub_100097908@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, void *a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  memset(a4, 170, 24);
  unint64_t v8 = operator new(0x30uLL);
  *a4 = v8;
  a4[1] = v7;
  *((_BYTE *)a4 + 16) = 0;
  *unint64_t v8 = 0LL;
  v8[1] = a2;
  __n128 result = v8 + 2;
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    __n128 result = sub_10000B8BC(result, *(void **)v10, *((void *)v10 + 1));
  }

  else
  {
    __int128 v11 = *v10;
    v8[4] = *((void *)v10 + 2);
    *(_OWORD *)__n128 result = v11;
  }

  v8[5] = 0LL;
  *((_BYTE *)a4 + 16) = 1;
  return result;
}

void sub_100097998(_Unwind_Exception *a1)
{
}

void sub_1000979B0(uint64_t a1, uint64_t a2)
{
  dispatch_time_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_1000979F4((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }

void sub_1000979F4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
}

uint64_t sub_100097A40(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100097A78(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      id v3 = (void *)*v2;
      sub_1000979F4((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }

    while (v3);
  }

void sub_100097AB4(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

uint64_t sub_100097AC0()
{
  int v0 = (void *)MGCopyAnswer(@"DiskUsage", 0LL);
  uint64_t v1 = v0;
  if (v0)
  {
    uint64_t v2 = kMGQDiskUsageTotalDiskCapacity;
    id v3 = &off_10012EF60;
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v0 objectForKeyedSubscript:kMGQDiskUsageTotalDiskCapacity]);

    if (v4) {
      id v3 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue([v1 objectForKeyedSubscript:v2]);
    }
    uint64_t v5 = sub_100005770((uint64_t)[v3 longLongValue]);
  }

  else
  {
    id v3 = &off_10012EF60;
    uint64_t v5 = 0xFFFFFFFFLL;
  }

  return v5;
}

void sub_100097B68(_Unwind_Exception *a1)
{
}

void sub_100097B8C(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)(a1 + sub_100007004((uint64_t)v1 + 8) = 0LL;
  *(_BYTE *)a1 = 0;
  sub_1000041AC(a1);
  sub_1000041AC(a1);
  uint64_t v2 = (os_log_s *)qword_100131940;
  if (os_log_type_enabled((os_log_t)qword_100131940, OS_LOG_TYPE_DEBUG)) {
    sub_1000DEF9C(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  id v10 = (id)objc_claimAutoreleasedReturnValue( +[HighEngagementResolver fetchHighEngagementCategories]( &OBJC_CLASS___HighEngagementResolver,  "fetchHighEngagementCategories"));
  id v11 = [v10 countByEnumeratingWithState:&v31 objects:v30 count:16];
  if (v11)
  {
    uint64_t v12 = *(void *)v32;
    do
    {
      for (uint64_t i = 0LL; i != v11; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v32 != v12) {
          objc_enumerationMutation(v10);
        }
        id v14 = *(void **)(*((void *)&v31 + 1) + 8LL * (void)i);
        id v15 = objc_claimAutoreleasedReturnValue([v10 objectForKeyedSubscript:v14]);
        uint64_t v27 = (char *)[v15 UTF8String];
        sub_10000E89C((uint64_t)v28, &v27);
        unint64_t v16 = sub_100003F94((unsigned __int8 *)a1, (char *)[v14 UTF8String]);
        sub_1000041AC((uint64_t)v28);
        char v17 = *(_BYTE *)v16;
        *(_BYTE *)unint64_t v16 = v28[0];
        v28[0] = v17;
        float v18 = (uint64_t *)v16[1];
        v16[1] = (uint64_t)v29;
        uint64_t v29 = v18;
        sub_1000041AC((uint64_t)v16);
        sub_1000041AC((uint64_t)v28);
        sub_10000425C(&v29, v28[0]);
      }

      id v11 = [v10 countByEnumeratingWithState:&v31 objects:v30 count:16];
    }

    while (v11);
  }

  BOOL v19 = (os_log_s *)qword_100131940;
  if (os_log_type_enabled((os_log_t)qword_100131940, OS_LOG_TYPE_DEBUG)) {
    sub_1000DEF3C(v19, v20, v21, v22, v23, v24, v25, v26);
  }
}

void sub_100097D90(_Unwind_Exception *a1)
{
  sub_10000417C(v1);
  _Unwind_Resume(a1);
}

void sub_100097DE4(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)(a1 + sub_100007004((uint64_t)v1 + 8) = 0xAAAAAAAAAAAAAAAALL;
  sub_10000BA40(a1, 0LL, 0LL, 0, 1);
  sub_10000E89C((uint64_t)v44, &off_10012B1B8);
  uint64_t v2 = sub_100003F94((unsigned __int8 *)a1, "basebandChipset");
  sub_1000041AC((uint64_t)v44);
  char v3 = *(_BYTE *)v2;
  *(_BYTE *)uint64_t v2 = v44[0];
  v44[0] = v3;
  uint64_t v4 = (uint64_t *)v2[1];
  v2[1] = (uint64_t)v45;
  id v45 = v4;
  sub_1000041AC((uint64_t)v2);
  sub_1000041AC((uint64_t)v44);
  sub_10000425C(&v45, v44[0]);
  sub_10000E89C((uint64_t)v42, &off_10012B1B8);
  uint64_t v5 = sub_100003F94((unsigned __int8 *)a1, "basebandFirmwareVersion");
  sub_1000041AC((uint64_t)v42);
  char v6 = *(_BYTE *)v5;
  *(_BYTE *)uint64_t v5 = v42[0];
  v42[0] = v6;
  uint64_t v7 = (uint64_t *)v5[1];
  v5[1] = (uint64_t)v43;
  uint64_t v43 = v7;
  sub_1000041AC((uint64_t)v5);
  sub_1000041AC((uint64_t)v42);
  sub_10000425C(&v43, v42[0]);
  sub_10000E89C((uint64_t)v40, &off_10012B1B8);
  uint64_t v8 = sub_100003F94((unsigned __int8 *)a1, "productSku");
  sub_1000041AC((uint64_t)v40);
  char v9 = *(_BYTE *)v8;
  *(_BYTE *)uint64_t v8 = v40[0];
  v40[0] = v9;
  id v10 = (uint64_t *)v8[1];
  v8[1] = (uint64_t)v41;
  uint64_t v41 = v10;
  sub_1000041AC((uint64_t)v8);
  sub_1000041AC((uint64_t)v40);
  sub_10000425C(&v41, v40[0]);
  sub_10000E89C((uint64_t)v38, &off_10012B1B8);
  id v11 = sub_100003F94((unsigned __int8 *)a1, "homeCarrierName");
  sub_1000041AC((uint64_t)v38);
  char v12 = *(_BYTE *)v11;
  *(_BYTE *)id v11 = v38[0];
  v38[0] = v12;
  unint64_t v13 = (uint64_t *)v11[1];
  v11[1] = (uint64_t)v39;
  uint64_t v39 = v13;
  sub_1000041AC((uint64_t)v11);
  sub_1000041AC((uint64_t)v38);
  sub_10000425C(&v39, v38[0]);
  sub_10000E89C((uint64_t)v36, &off_10012B1B8);
  id v14 = sub_100003F94((unsigned __int8 *)a1, "servingCarrierName");
  sub_1000041AC((uint64_t)v36);
  char v15 = *(_BYTE *)v14;
  *(_BYTE *)id v14 = v36[0];
  v36[0] = v15;
  unint64_t v16 = (uint64_t *)v14[1];
  v14[1] = (uint64_t)v37;
  uint64_t v37 = v16;
  sub_1000041AC((uint64_t)v14);
  sub_1000041AC((uint64_t)v36);
  sub_10000425C(&v37, v36[0]);
  v34[0] = 4;
  id v35 = 0LL;
  sub_1000041AC((uint64_t)v34);
  sub_1000041AC((uint64_t)v34);
  char v17 = sub_100003F94((unsigned __int8 *)a1, "isDualSim");
  sub_1000041AC((uint64_t)v34);
  unsigned __int8 v18 = *(_BYTE *)v17;
  *(_BYTE *)char v17 = v34[0];
  v34[0] = v18;
  BOOL v19 = (uint64_t *)v17[1];
  v17[1] = (uint64_t)v35;
  id v35 = v19;
  sub_1000041AC((uint64_t)v17);
  sub_1000041AC((uint64_t)v34);
  sub_10000425C(&v35, v34[0]);
  sub_10000E89C((uint64_t)v32, &off_10012B1B8);
  uint64_t v20 = sub_100003F94((unsigned __int8 *)a1, "homeCarrierCountry");
  sub_1000041AC((uint64_t)v32);
  char v21 = *(_BYTE *)v20;
  *(_BYTE *)uint64_t v20 = v32[0];
  v32[0] = v21;
  uint64_t v22 = (uint64_t *)v20[1];
  v20[1] = (uint64_t)v33;
  __int128 v33 = v22;
  sub_1000041AC((uint64_t)v20);
  sub_1000041AC((uint64_t)v32);
  sub_10000425C(&v33, v32[0]);
  sub_10000E89C((uint64_t)v30, &off_10012B1B8);
  uint64_t v23 = sub_100003F94((unsigned __int8 *)a1, "homeCarrierBundleVersion");
  sub_1000041AC((uint64_t)v30);
  char v24 = *(_BYTE *)v23;
  *(_BYTE *)uint64_t v23 = v30[0];
  v30[0] = v24;
  uint64_t v25 = (uint64_t *)v23[1];
  v23[1] = (uint64_t)v31;
  __int128 v31 = v25;
  sub_1000041AC((uint64_t)v23);
  sub_1000041AC((uint64_t)v30);
  sub_10000425C(&v31, v30[0]);
  uint64_t v26 = (os_log_s *)(id)qword_100131940;
  if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
  {
    sub_100006200(a1, -1, 0x20u, 0LL, 1, __p);
    if (v29 >= 0) {
      uint64_t v27 = __p;
    }
    else {
      uint64_t v27 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    char v47 = v27;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "[CD] GetTelephonyInfo: %s", buf, 0xCu);
    if (v29 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_100098284(_Unwind_Exception *a1)
{
  char v3 = v2;

  sub_10000417C(v1);
  _Unwind_Resume(a1);
}

void sub_100098314(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)(a1 + sub_100007004((uint64_t)v1 + 8) = 0xAAAAAAAAAAAAAAAALL;
  sub_10000BA40(a1, 0LL, 0LL, 0, 1);
  sub_10000E89C((uint64_t)v17, &off_10012B1B8);
  uint64_t v2 = sub_100003F94((unsigned __int8 *)a1, "WiFiChipset");
  sub_1000041AC((uint64_t)v17);
  char v3 = *(_BYTE *)v2;
  *(_BYTE *)uint64_t v2 = v17[0];
  v17[0] = v3;
  uint64_t v4 = (uint64_t *)v2[1];
  v2[1] = (uint64_t)v18;
  unsigned __int8 v18 = v4;
  sub_1000041AC((uint64_t)v2);
  sub_1000041AC((uint64_t)v17);
  sub_10000425C(&v18, v17[0]);
  uint64_t v5 = objc_autoreleasePoolPush();
  char v6 = (void *)MGCopyAnswer(@"WifiChipset", 0LL);
  uint64_t v7 = v6;
  if (v6)
  {
    sub_100005064(__p, (char *)[v6 UTF8String]);
    sub_100008E5C((uint64_t)v15, (uint64_t)__p);
    uint64_t v8 = sub_100003F94((unsigned __int8 *)a1, "WiFiChipset");
    sub_1000041AC((uint64_t)v15);
    char v9 = *(_BYTE *)v8;
    *(_BYTE *)uint64_t v8 = v15[0];
    v15[0] = v9;
    id v10 = (uint64_t *)v8[1];
    v8[1] = (uint64_t)v16;
    unint64_t v16 = v10;
    sub_1000041AC((uint64_t)v8);
    sub_1000041AC((uint64_t)v15);
    sub_10000425C(&v16, v15[0]);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }

  objc_autoreleasePoolPop(v5);
  id v11 = (os_log_s *)(id)qword_100131940;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    sub_100006200(a1, -1, 0x20u, 0LL, 1, __p);
    if (v14 >= 0) {
      char v12 = __p;
    }
    else {
      char v12 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v20 = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "[CD] GetWiFiInfo: %s", buf, 0xCu);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_100098564( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  sub_10000417C(v18);
  _Unwind_Resume(a1);
}

void sub_1000985D4(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)(a2 + sub_100007004((uint64_t)v1 + 8) = 0xAAAAAAAAAAAAAAAALL;
  sub_10000BA40(a2, 0LL, 0LL, 0, 1);
  uint64_t v4 = objc_autoreleasePoolPush();
  sub_10000E89C((uint64_t)v59, &off_10012B1B8);
  uint64_t v5 = sub_100003F94((unsigned __int8 *)a2, "market");
  sub_1000041AC((uint64_t)v59);
  char v6 = *(_BYTE *)v5;
  *(_BYTE *)uint64_t v5 = v59[0];
  v59[0] = v6;
  uint64_t v7 = (uint64_t *)v5[1];
  v5[1] = (uint64_t)v60;
  char v60 = v7;
  sub_1000041AC((uint64_t)v5);
  sub_1000041AC((uint64_t)v59);
  sub_10000425C(&v60, v59[0]);
  if ((sub_1000900A0() & 1) != 0)
  {
    unint64_t v55 = 0xAAAAAAAAAAAAAAAALL;
    uint64_t v56 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    uint64_t v8 = *a1;
    sub_100005064(buf, "locationServicesEnabled");
    LOBYTE(v6sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0;
    __int16 v62 = 0LL;
    sub_1000041AC((uint64_t)&v61);
    sub_1000041AC((uint64_t)&v61);
    (*(void (**)(unint64_t *__return_ptr, uint64_t, uint8_t *, const std::string::value_type ***))(*(void *)v8 + 16LL))( &v55,  v8,  buf,  &v61);
    sub_1000041AC((uint64_t)&v61);
    sub_10000425C(&v62, v61);
    if (SBYTE7(v68) < 0) {
      operator delete(*(void **)buf);
    }
    __int128 v51 = "locationServicesEnabled";
    unint64_t v69 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v9 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v9 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)std::string buf = v9;
    __int128 v68 = v9;
    sub_100008780((uint64_t)&v55, &v51, (uint64_t)buf);
    unint64_t v61 = (const std::string::value_type **)&v55;
    __int16 v62 = 0LL;
    uint64_t v63 = 0LL;
    uint64_t v64 = 0LL;
    unint64_t v65 = 0x8000000000000000LL;
    sub_100008AC8((unsigned __int8 **)&v61);
    if (sub_1000087E8((unsigned __int8 **)buf, (unsigned __int8 **)&v61))
    {
      id v10 = (_BYTE *)sub_10009AE9C();
      if (!v10)
      {
LABEL_18:
        unsigned __int8 v18 = (os_log_s *)qword_100131940;
        if (os_log_type_enabled((os_log_t)qword_100131940, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "[CD] Market: Location services disabled",  buf,  2u);
        }

        sub_100099464((uint64_t)v53, "LocationServicesDisabled");
        BOOL v19 = sub_100003F94((unsigned __int8 *)a2, "market");
        sub_1000041AC((uint64_t)v53);
        char v20 = *(_BYTE *)v19;
        *(_BYTE *)BOOL v19 = v53[0];
        v53[0] = v20;
        char v21 = (uint64_t *)v19[1];
        v19[1] = (uint64_t)v54;
        uint64_t v54 = v21;
        sub_1000041AC((uint64_t)v19);
        sub_1000041AC((uint64_t)v53);
        sub_10000425C(&v54, v53[0]);
        goto LABEL_60;
      }
    }

    else
    {
      id v10 = sub_100008924((unsigned __int8 **)buf);
    }

    if (*v10 != 4 || !v10[8]) {
      goto LABEL_18;
    }
    __int128 v51 = (const std::string::value_type *)0xAAAAAAAAAAAAAAAALL;
    uint64_t v52 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    uint64_t v15 = *a1;
    sub_100005064(buf, "locationAuthorizationStatus");
    LOBYTE(v6sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0;
    __int16 v62 = 0LL;
    sub_1000041AC((uint64_t)&v61);
    sub_1000041AC((uint64_t)&v61);
    (*(void (**)(const std::string::value_type **__return_ptr, uint64_t, uint8_t *, const std::string::value_type ***))(*(void *)v15 + 16LL))( &v51,  v15,  buf,  &v61);
    sub_1000041AC((uint64_t)&v61);
    sub_10000425C(&v62, v61);
    if (SBYTE7(v68) < 0) {
      operator delete(*(void **)buf);
    }
    char v47 = "locationAuthorizationStatus";
    unint64_t v69 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v16 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v16 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)std::string buf = v16;
    __int128 v68 = v16;
    sub_100008780((uint64_t)&v51, &v47, (uint64_t)buf);
    unint64_t v61 = &v51;
    __int16 v62 = 0LL;
    uint64_t v63 = 0LL;
    uint64_t v64 = 0LL;
    unint64_t v65 = 0x8000000000000000LL;
    sub_100008AC8((unsigned __int8 **)&v61);
    if (sub_1000087E8((unsigned __int8 **)buf, (unsigned __int8 **)&v61))
    {
      char v17 = (_BYTE *)sub_10009AE9C();
      if (!v17)
      {
LABEL_29:
        uint64_t v25 = (os_log_s *)qword_100131940;
        if (os_log_type_enabled((os_log_t)qword_100131940, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_INFO,  "[CD] Market: Location not authorized",  buf,  2u);
        }

        sub_1000994F4((uint64_t)v49, "LocationNotAuthorized");
        uint64_t v26 = sub_100003F94((unsigned __int8 *)a2, "market");
        sub_1000041AC((uint64_t)v49);
        char v27 = *(_BYTE *)v26;
        *(_BYTE *)uint64_t v26 = v49[0];
        v49[0] = v27;
        uint64_t v28 = (uint64_t *)v26[1];
        v26[1] = (uint64_t)v50;
        char v50 = v28;
        sub_1000041AC((uint64_t)v26);
        sub_1000041AC((uint64_t)v49);
        sub_10000425C(&v50, v49[0]);
        goto LABEL_59;
      }
    }

    else
    {
      char v17 = sub_100008924((unsigned __int8 **)buf);
    }

    if (*v17 != 4 || !v17[8]) {
      goto LABEL_29;
    }
    char v47 = (const std::string::value_type *)0xAAAAAAAAAAAAAAAALL;
    unsigned __int8 v48 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    uint64_t v22 = *a1;
    sub_100005064(buf, "market");
    LOBYTE(v6sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0;
    __int16 v62 = 0LL;
    sub_1000041AC((uint64_t)&v61);
    sub_1000041AC((uint64_t)&v61);
    (*(void (**)(const std::string::value_type **__return_ptr, uint64_t, uint8_t *, const std::string::value_type ***))(*(void *)v22 + 16LL))( &v47,  v22,  buf,  &v61);
    sub_1000041AC((uint64_t)&v61);
    sub_10000425C(&v62, v61);
    if (SBYTE7(v68) < 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v66 = "market";
    unint64_t v69 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v23 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v23 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)std::string buf = v23;
    __int128 v68 = v23;
    sub_100008780((uint64_t)&v47, &v66, (uint64_t)buf);
    unint64_t v61 = &v47;
    __int16 v62 = 0LL;
    uint64_t v63 = 0LL;
    uint64_t v64 = 0LL;
    unint64_t v65 = 0x8000000000000000LL;
    sub_100008AC8((unsigned __int8 **)&v61);
    if (sub_1000087E8((unsigned __int8 **)buf, (unsigned __int8 **)&v61))
    {
      uint64_t v24 = sub_10009AE9C();
      if (!v24) {
        goto LABEL_44;
      }
    }

    else
    {
      uint64_t v24 = (uint64_t)sub_100008924((unsigned __int8 **)buf);
    }

    if (*(_BYTE *)v24 == 3)
    {
      uint64_t v29 = *(void *)(v24 + 8);
      if (v29)
      {
        if (*(char *)(v29 + 23) < 0 ? *(void *)(v29 + 8) : *(unsigned __int8 *)(v29 + 23))
        {
          __int128 v31 = (os_log_s *)qword_100131940;
          if (os_log_type_enabled((os_log_t)qword_100131940, OS_LOG_TYPE_INFO))
          {
            uint64_t v32 = v29;
            *(_DWORD *)std::string buf = 136380675;
            *(void *)&uint8_t buf[4] = v32;
            _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_INFO,  "[CD] Market: Reporting market: %{private}s",  buf,  0xCu);
          }

          sub_10000B990((uint64_t)v43, v29);
          __int128 v33 = sub_100003F94((unsigned __int8 *)a2, "market");
          sub_1000041AC((uint64_t)v43);
          char v34 = *(_BYTE *)v33;
          *(_BYTE *)__int128 v33 = v43[0];
          v43[0] = v34;
          id v35 = (uint64_t *)v33[1];
          v33[1] = (uint64_t)v44;
          char v44 = v35;
          sub_1000041AC((uint64_t)v33);
          sub_1000041AC((uint64_t)v43);
          sub_10000425C(&v44, v43[0]);
          goto LABEL_58;
        }
      }
    }

void sub_100098ED4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t *a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t *a21)
{
}

double sub_100098FD4()
{
  uint64_t v0 = sub_100043B9C();
  if (v0) {
    return sub_100005794(v0);
  }
  else {
    return -1.0;
  }
}

void sub_100098FF8(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)(a1 + sub_100007004((uint64_t)v1 + 8) = 0xAAAAAAAAAAAAAAAALL;
  sub_10000BA40(a1, 0LL, 0LL, 0, 1);
  sub_10000E89C((uint64_t)v22, &off_10012B1B8);
  uint64_t v2 = sub_100003F94((unsigned __int8 *)a1, "currentCountry");
  sub_1000041AC((uint64_t)v22);
  char v3 = *(_BYTE *)v2;
  *(_BYTE *)uint64_t v2 = v22[0];
  v22[0] = v3;
  uint64_t v4 = (uint64_t *)v2[1];
  v2[1] = (uint64_t)v23;
  __int128 v23 = v4;
  sub_1000041AC((uint64_t)v2);
  sub_1000041AC((uint64_t)v22);
  sub_10000425C(&v23, v22[0]);
  uint64_t v5 = objc_autoreleasePoolPush();
  char v6 = (void *)objc_claimAutoreleasedReturnValue(+[RDEstimate lastKnownEstimates](&OBJC_CLASS___RDEstimate, "lastKnownEstimates"));
  if ([v6 count])
  {
    uint64_t v7 = (os_log_s *)qword_100131940;
    if (os_log_type_enabled((os_log_t)qword_100131940, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 138477827;
      *(void *)&uint8_t buf[4] = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "[CD] GetCurrentCountry: lastKnownCountryEstimates returned : %{private}@",  buf,  0xCu);
    }

    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 objectAtIndexedSubscript:0]);
    __int128 v9 = (void *)objc_claimAutoreleasedReturnValue([v8 countryCode]);

    if (v9)
    {
      id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSLocale systemLocale](&OBJC_CLASS___NSLocale, "systemLocale"));
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 localizedStringForCountryCode:v9]);
    }

    else
    {
      id v11 = 0LL;
    }

    char v12 = sub_10005A4EC(v11);
    char v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    char v14 = v13;
    if (v13)
    {
      sub_100005064(buf, (char *)[v13 UTF8String]);
      sub_100008E5C((uint64_t)v20, (uint64_t)buf);
      uint64_t v15 = sub_100003F94((unsigned __int8 *)a1, "currentCountry");
      sub_1000041AC((uint64_t)v20);
      char v16 = *(_BYTE *)v15;
      *(_BYTE *)uint64_t v15 = v20[0];
      v20[0] = v16;
      char v17 = (uint64_t *)v15[1];
      v15[1] = (uint64_t)v21;
      char v21 = v17;
      sub_1000041AC((uint64_t)v15);
      sub_1000041AC((uint64_t)v20);
      sub_10000425C(&v21, v20[0]);
      if (v27 < 0) {
        operator delete(*(void **)buf);
      }
    }
  }

  objc_autoreleasePoolPop(v5);
  unsigned __int8 v18 = (os_log_s *)(id)qword_100131940;
  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    sub_100006200(a1, -1, 0x20u, 0LL, 1, buf);
    if (v27 >= 0) {
      BOOL v19 = buf;
    }
    else {
      BOOL v19 = *(_BYTE **)buf;
    }
    *(_DWORD *)uint64_t v24 = 136380675;
    uint64_t v25 = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "[CD] CurrentCountry: %{private}s", v24, 0xCu);
    if (v27 < 0) {
      operator delete(*(void **)buf);
    }
  }
}

void sub_100099320( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }

  sub_10000417C(v20);
  _Unwind_Resume(a1);
}

uint64_t sub_1000993D4(uint64_t a1, char *a2)
{
  *(void *)(a1 + sub_100007004((uint64_t)v1 + 8) = 0LL;
  *(_BYTE *)a1 = 3;
  *(void *)(a1 + sub_100007004((uint64_t)v1 + 8) = sub_10009941C(a2);
  sub_1000041AC(a1);
  sub_1000041AC(a1);
  return a1;
}

void *sub_10009941C(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  sub_100005064(v2, a1);
  return v2;
}

void sub_100099450(_Unwind_Exception *a1)
{
}

uint64_t sub_100099464(uint64_t a1, char *a2)
{
  *(void *)(a1 + sub_100007004((uint64_t)v1 + 8) = 0LL;
  *(_BYTE *)a1 = 3;
  *(void *)(a1 + sub_100007004((uint64_t)v1 + 8) = sub_1000994AC(a2);
  sub_1000041AC(a1);
  sub_1000041AC(a1);
  return a1;
}

void *sub_1000994AC(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  sub_100005064(v2, a1);
  return v2;
}

void sub_1000994E0(_Unwind_Exception *a1)
{
}

uint64_t sub_1000994F4(uint64_t a1, char *a2)
{
  *(void *)(a1 + sub_100007004((uint64_t)v1 + 8) = 0LL;
  *(_BYTE *)a1 = 3;
  *(void *)(a1 + sub_100007004((uint64_t)v1 + 8) = sub_10009953C(a2);
  sub_1000041AC(a1);
  sub_1000041AC(a1);
  return a1;
}

void *sub_10009953C(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  sub_100005064(v2, a1);
  return v2;
}

void sub_100099570(_Unwind_Exception *a1)
{
}

void sub_100099584()
{
  uint64_t v0 = objc_autoreleasePoolPush();
  sub_100005064(qword_100131A48, "primaryNetworkInterface");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_100131A48, (void *)&_mh_execute_header);
  sub_100005064(qword_100131A60, "wiFiRadioTech");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_100131A60, (void *)&_mh_execute_header);
  sub_100005064(qword_100131A78, "wiFiLQM");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_100131A78, (void *)&_mh_execute_header);
  sub_100005064(qword_100131A90, "wirelessTrialIdentifier");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_100131A90, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

uint64_t sub_100099660@<X0>(uint64_t a1@<X0>, const std::string::value_type **a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 3sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)a3 = v6;
  *(_OWORD *)(a3 + 16) = v6;
  uint64_t v7 = (unsigned __int8 **)sub_1000211B0((void *)a3, a1);
  uint64_t result = (uint64_t)sub_1000211FC(v7);
  if (*(_BYTE *)a1 == 1)
  {
    uint64_t result = sub_100008B90(*(void *)(a1 + 8), a2);
    *(void *)(a3 + sub_100007004((uint64_t)v1 + 8) = result;
  }

  return result;
}

uint64_t sub_1000996C8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  else {
    unint64_t v9 = v5;
  }
  char v17 = a1 + 2;
  if (v9) {
    id v10 = (char *)sub_1000047F4(v7, v9);
  }
  else {
    id v10 = 0LL;
  }
  char v13 = v10;
  char v14 = &v10[16 * v4];
  char v16 = &v10[16 * v9];
  sub_10000C3E4((uint64_t)v14, a2);
  uint64_t v15 = v14 + 16;
  sub_10000470C(a1, &v13);
  uint64_t v11 = a1[1];
  sub_100004A50((uint64_t)&v13);
  return v11;
}

void sub_1000997CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unsigned __int8 **sub_1000997E0(unsigned __int8 **result)
{
  if (!*result) {
    sub_1000DEFFC();
  }
  int v1 = **result;
  if (v1 == 2)
  {
    result[2] -= 16;
  }

  else if (v1 == 1)
  {
    uint64_t v2 = result[1];
    uint64_t v3 = *(unsigned __int8 **)v2;
    if (*(void *)v2)
    {
      do
      {
        uint64_t v4 = v3;
        uint64_t v3 = (unsigned __int8 *)*((void *)v3 + 1);
      }

      while (v3);
    }

    else
    {
      do
      {
        uint64_t v4 = (unsigned __int8 *)*((void *)v2 + 2);
        BOOL v5 = *(void *)v4 == (void)v2;
        uint64_t v2 = v4;
      }

      while (v5);
    }

    result[1] = v4;
  }

  else
  {
    --result[4];
  }

  return result;
}

uint64_t sub_100099864(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if (a5 <= (uint64_t)(v11 - v12) >> 4)
    {
      uint64_t v20 = v12 - a2;
      uint64_t v21 = (uint64_t)(v12 - a2) >> 4;
      if (v21 >= a5)
      {
        uint64_t v22 = a3 + 16 * a5;
      }

      else
      {
        uint64_t v22 = a3 + 16 * v21;
        a1[1] = sub_10000CA0C(v9, v22, a4, *(void *)(v9 - 8));
        if (v20 < 1) {
          return v5;
        }
      }

      sub_1000214DC((uint64_t)a1, v5, v12, v5 + 16 * a5);
      sub_10005814C((uint64_t)&v27, v7, v22, v5);
    }

    else
    {
      uint64_t v13 = *a1;
      __int128 v27 = 0u;
      __int128 v28 = 0u;
      unint64_t v14 = a5 + ((uint64_t)(v12 - v13) >> 4);
      if (v14 >> 60) {
        sub_1000046F8();
      }
      uint64_t v15 = (a2 - v13) >> 4;
      uint64_t v16 = v10 - v13;
      uint64_t v17 = v16 >> 3;
      if (v16 >> 3 <= v14) {
        uint64_t v17 = v14;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v29 = v9;
      if (v18) {
        BOOL v19 = (char *)sub_1000047F4(v9, v18);
      }
      else {
        BOOL v19 = 0LL;
      }
      uint64_t v23 = (uint64_t)&v19[16 * v15];
      *(void *)&__int128 v27 = v19;
      *((void *)&v27 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = v23;
      *(void *)&__int128 v28 = v23;
      *((void *)&v28 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = &v19[16 * v18];
      uint64_t v24 = 16 * a5;
      uint64_t v25 = v23 + 16 * a5;
      do
      {
        sub_10000C3E4(v23, v7);
        v23 += 16LL;
        v7 += 16LL;
        v24 -= 16LL;
      }

      while (v24);
      *(void *)&__int128 v28 = v25;
      uint64_t v5 = sub_1000215C0(a1, &v27, v5);
      sub_100004A50((uint64_t)&v27);
    }
  }

  return v5;
}

void sub_100099A10( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(void *)(v11 + sub_100007004((uint64_t)v1 + 8) = v12;
  _Unwind_Resume(exception_object);
}

void sub_100099A44(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  double v10 = a5;
  *(void *)&__int128 v9 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v9 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  sub_10009A838(a1, &v10, a2, a3, &v9);
  if ((*(unsigned int (**)(void))(*(void *)v9 + 56LL))(v9))
  {
    *(_OWORD *)a4 = v9;
  }

  else
  {
    *(void *)a4 = 0LL;
    *(void *)(a4 + sub_100007004((uint64_t)v1 + 8) = 0LL;
    __int128 v6 = (std::__shared_weak_count *)*((void *)&v9 + 1);
    if (*((void *)&v9 + 1))
    {
      uint64_t v7 = (unint64_t *)(*((void *)&v9 + 1) + 8LL);
      do
        unint64_t v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }

uint64_t sub_100099B18()
{
  return 3LL;
}

uint64_t sub_100099B20()
{
  return 1LL;
}

void sub_100099B28(uint64_t a1, uint64_t a2)
{
  int v3 = v6;
  if ((v6 & 0x80u) != 0) {
    int v3 = v5;
  }
  (*(void (**)(uint64_t, void))(*(void *)a1 + 80LL))(a1, (v3 + 1));
}

uint64_t sub_100099BD0(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v10 = 0;
  sub_100005064(__p, "persisting to store");
  uint64_t v12 = 0LL;
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = &off_10012B2A8;
  v4[1] = a1;
  void v4[2] = a2;
  v4[3] = &v10;
  uint64_t v12 = v4;
  sub_10008CD68(a1, (uint64_t)__p, (uint64_t)v11);
  int v5 = v12;
  if (v12 == v11)
  {
    uint64_t v6 = 4LL;
    int v5 = v11;
  }

  else
  {
    if (!v12) {
      goto LABEL_7;
    }
    uint64_t v6 = 5LL;
  }

  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_7:
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  return v10;
}

void sub_100099CE4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

uint64_t sub_100099CF0(void *a1, uint64_t a2, __int128 *a3)
{
  unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v20 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10000C3E4((uint64_t)&v19, *(void *)a3 + 40LL);
  unint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  v17[0] = v6;
  v17[1] = v6;
  sub_100055F38(a2, "transformation", (uint64_t)v17);
  unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  v15[0] = v7;
  v15[1] = v7;
  sub_100008B44(v15, a2);
  sub_100008AC8((unsigned __int8 **)v15);
  if (!sub_1000087E8((unsigned __int8 **)v17, (unsigned __int8 **)v15) && *sub_10004A598((unsigned __int8 **)v17) == 2)
  {
    unint64_t v8 = *(void ***)(a1[5] + 24LL);
    char v9 = sub_100008924((unsigned __int8 **)v17);
    sub_1000B074C(v8, a3, v9, (uint64_t)v13);
    sub_1000041AC((uint64_t)v13);
    char v10 = v19;
    LOBYTE(v19) = v13[0];
    v13[0] = v10;
    uint64_t v11 = v20;
    uint64_t v20 = v14;
    unint64_t v14 = v11;
    sub_1000041AC((uint64_t)&v19);
    sub_1000041AC((uint64_t)v13);
    sub_10000425C(&v14, v13[0]);
  }

  sub_100099F68(a1, (uint64_t *)(*(void *)a3 + 16LL), (uint64_t)&v19);
  sub_1000041AC((uint64_t)&v19);
  sub_10000425C(&v20, v19);
  return 1LL;
}

void sub_100099EB4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    sub_100005064(&a18, "IdentityTransformError");
    sub_100005064(&__p, "transformation");
    if (a2 == 2) {
      sub_10008D2FC(v23, (uint64_t)&a18, (uint64_t)&__p, v24);
    }
    else {
      sub_10008D778(v23, (uint64_t)&a18, (uint64_t)&__p, v24);
    }
    if (a15 < 0) {
      operator delete(__p);
    }
    if (a23 < 0) {
      operator delete(a18);
    }
    __cxa_end_catch();
    JUMPOUT(0x100099E44LL);
  }

  _Unwind_Resume(a1);
}

BOOL sub_100099F68(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = a1[4];
  unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  v23[0] = v7;
  v23[1] = v7;
  sub_100008B44(v23, v6);
  sub_100045378((unsigned __int8 **)v23);
  unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  v21[0] = v8;
  v21[1] = v8;
  sub_100008B44(v21, v6);
  sub_100008AC8((unsigned __int8 **)v21);
  for (BOOL result = sub_1000087E8((unsigned __int8 **)v23, (unsigned __int8 **)v21);
        !result;
        BOOL result = sub_1000087E8((unsigned __int8 **)v23, (unsigned __int8 **)v21))
  {
    char v10 = sub_100008924((unsigned __int8 **)v23);
    if ((sub_10009A17C(a1, v11, (uint64_t)v10, a3) & 1) == 0 && (sub_10009A344((uint64_t)a1, v12, v13, a3) & 1) == 0)
    {
      unint64_t v14 = (os_log_s *)qword_100131918;
      if (os_log_type_enabled((os_log_t)qword_100131918, OS_LOG_TYPE_ERROR))
      {
        sub_10008D06C((uint64_t)a1, __p);
        if (v20 >= 0) {
          uint64_t v15 = __p;
        }
        else {
          uint64_t v15 = (void **)__p[0];
        }
        uint64_t v16 = sub_10008D2D4((uint64_t)a1);
        else {
          uint64_t v17 = *(void *)v16;
        }
        else {
          unint64_t v18 = (uint64_t *)*a2;
        }
        *(_DWORD *)std::string buf = 136446722;
        uint64_t v26 = v15;
        __int16 v27 = 2080;
        uint64_t v28 = v17;
        char v29 = 32;
        char v30 = 8;
        __int128 v31 = v18;
        _os_log_error_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "[%{public}sTransform] ERROR: transform '%s' received event '%s' but was not able to handle it properly",  buf,  0x20u);
        if (v20 < 0) {
          operator delete(__p[0]);
        }
      }
    }

    sub_100018704((unsigned __int8 **)v23);
  }

  return result;
}

uint64_t sub_10009A17C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v23 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  v22[0] = v7;
  v22[1] = v7;
  sub_100055F38(a3, "event", (uint64_t)v22);
  unint64_t v21 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)std::string __p = v8;
  __int128 v20 = v8;
  sub_100008B44(__p, a3);
  sub_100008AC8((unsigned __int8 **)__p);
  uint64_t v9 = *(void *)(a1[5] + 8LL);
  if (!v9) {
    return 0LL;
  }
  char v10 = sub_100008924((unsigned __int8 **)v22);
  sub_1000218CC((uint64_t)v10, (std::string *)__p);
  sub_10000C3E4((uint64_t)v15, a4);
  sub_1000723B4((__int128 *)__p, (uint64_t)v15, &v17);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v9 + 32LL))(v9, &v17);
  uint64_t v11 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      unint64_t v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  sub_1000041AC((uint64_t)v15);
  sub_10000425C(&v16, v15[0]);
  if (SBYTE7(v20) < 0) {
    operator delete(__p[0]);
  }
  return 1LL;
}

void sub_10009A300( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10009A344(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100099BD0(a1, a4);
}

uint64_t sub_10009A380(void *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v6 = (unsigned __int8 *)sub_10004AA8C(a2, "event");
  sub_10000B990((uint64_t)v9, *(void *)a3 + 16LL);
  uint64_t v7 = sub_10002CE28(v6, v9);
  sub_1000041AC((uint64_t)v9);
  sub_10000425C(&v10, v9[0]);
  if ((_DWORD)v7) {
    sub_100099CF0(a1, a2, a3);
  }
  return v7;
}

void sub_10009A480(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

void sub_10009A48C(void *a1, __int128 *a2)
{
  if (!sub_10008E380(a1) && (sub_10008E084((uint64_t)a1, (_BYTE *)a1[3], a2) & 1) == 0)
  {
    uint64_t v4 = a1[3];
    *(void *)&__int128 v5 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v5 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
    v18[0] = v5;
    v18[1] = v5;
    unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
    sub_100008B44(v18, v4);
    sub_100045378((unsigned __int8 **)v18);
    uint64_t v6 = a1[3];
    *(void *)&__int128 v7 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v7 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
    v16[0] = v7;
    v16[1] = v7;
    unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
    sub_100008B44(v16, v6);
    sub_100008AC8((unsigned __int8 **)v16);
    if (sub_1000087E8((unsigned __int8 **)v18, (unsigned __int8 **)v16))
    {
LABEL_6:
      uint64_t v9 = (os_log_s *)qword_100131918;
      if (os_log_type_enabled((os_log_t)qword_100131918, OS_LOG_TYPE_DEBUG))
      {
        char v10 = __p;
        sub_10008D06C((uint64_t)a1, __p);
        if (v15 < 0) {
          char v10 = (void **)__p[0];
        }
        uint64_t v11 = sub_10008D2D4((uint64_t)a1);
        else {
          uint64_t v12 = *(void *)v11;
        }
        unint64_t v13 = (void *)(*(void *)a2 + 16LL);
        *(_DWORD *)std::string buf = 136446722;
        unint64_t v21 = v10;
        __int16 v22 = 2080;
        uint64_t v23 = v12;
        __int16 v24 = 2080;
        uint64_t v25 = v13;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "[%{public}sTransform] WARNING: transform '%s' received event '%s' but did not handle it.",  buf,  0x20u);
        if (v15 < 0) {
          operator delete(__p[0]);
        }
      }
    }

    else
    {
      while (1)
      {
        __int128 v8 = sub_100008924((unsigned __int8 **)v18);
        sub_100018704((unsigned __int8 **)v18);
      }
    }
  }

void *sub_10009A668(uint64_t a1, uint64_t a2)
{
  v6[0] = &off_10012B328;
  v6[1] = a2;
  _OWORD v6[2] = a1;
  __int128 v7 = v6;
  sub_10009A750(a1, (uint64_t)v6);
  BOOL result = v7;
  if (v7 == v6)
  {
    uint64_t v5 = 4LL;
    BOOL result = v6;
  }

  else
  {
    if (!v7) {
      return result;
    }
    uint64_t v5 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_10009A714( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  unint64_t v14 = a13;
  if (a13 == &a10)
  {
    uint64_t v15 = 4LL;
    unint64_t v14 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v15 = 5LL;
  }

  (*(void (**)(void))(*(void *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_10009A750(uint64_t a1, uint64_t a2)
{
  v8[0] = &off_10012B3B8;
  v8[1] = a1;
  v8[2] = a2;
  uint64_t v9 = v8;
  sub_10008CD68(a1, (uint64_t)__p, (uint64_t)v8);
  uint64_t v4 = v9;
  if (v9 == v8)
  {
    uint64_t v5 = 4LL;
    uint64_t v4 = v8;
  }

  else
  {
    if (!v9) {
      goto LABEL_6;
    }
    uint64_t v5 = 5LL;
  }

  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_10009A824(uint64_t a1)
{
  int v1 = (void *)sub_10008C9EC(a1);
  operator delete(v1);
}

void sub_10009A838(uint64_t a1@<X1>, double *a2@<X2>, void *a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  char v10 = operator new(0x90uLL);
  sub_10009A8B8(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  sub_10000CCC8((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_10009A8A4(_Unwind_Exception *a1)
{
}

void *sub_10009A8B8(void *a1, uint64_t a2, double *a3, void *a4, uint64_t a5)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_10012B258;
  sub_10008CA44((uint64_t)(a1 + 3), a2, a4, a5, *a3);
  a1[3] = off_10012B1D0;
  return a1;
}

void sub_10009A904(_Unwind_Exception *a1)
{
}

void sub_10009A918(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10012B258;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10009A928(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10012B258;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_10009A948(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 sub_10009A960(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &off_10012B2A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + sub_100007004((uint64_t)v1 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_10009A9A0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10012B2A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + sub_100007004((uint64_t)v1 + 8) = result;
  return result;
}

void sub_10009A9C8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = sub_10008D0C4(v2);
  sub_100099B28(v2, *(void *)(a1 + 16));
  uint64_t v4 = *(void *)(*(void *)(v2 + 40) + 72LL);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24LL))(v2);
  **(_BYTE **)(a1 + 24) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void, void, uint64_t, void))(*(void *)v4 + 152LL))( v4,  v5,  v3,  *(unsigned int *)(v2 + 100),  *(unsigned int *)(v2 + 108),  *(unsigned int *)(v2 + 80),  v2 + 88,  *(void *)(a1 + 16));
  sub_10008E3F0(v2);
}

uint64_t sub_10009AA58(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void (**sub_10009AA94())(std::__shared_weak_count *__hidden this, const std::type_info *)
{
}

__n128 sub_10009AAA8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &off_10012B328;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + sub_100007004((uint64_t)v1 + 8) = result;
  return result;
}

__n128 sub_10009AAE0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10012B328;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + sub_100007004((uint64_t)v1 + 8) = result;
  return result;
}

void sub_10009AB00(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
  sub_10008E8C8(v3, v5, a2, (uint64_t)v7);
  uint64_t v6 = *(void *)(v4 + 24);
  if (!v6) {
    sub_1000129CC();
  }
  (*(void (**)(uint64_t, _BYTE *))(*(void *)v6 + 48LL))(v6, v7);
  if (v15 && v14 < 0) {
    operator delete(v13[3]);
  }
  sub_1000041AC((uint64_t)v12);
  sub_10000425C(v13, v12[0]);
  if (v11 < 0) {
    operator delete(v10);
  }
  if (v9 < 0) {
    operator delete(v8);
  }
}

void sub_10009ABF0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *__p, uint64_t a22, int a23, __int16 a24, char a25, char a26, char a27)
{
  if (a27)
  {
    if (a26 < 0) {
      operator delete(__p);
    }
  }

  sub_1000DF09C((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_10009AC24(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void (**sub_10009AC60())(std::__shared_weak_count *__hidden this, const std::type_info *)
{
}

__n128 sub_10009AC74(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &off_10012B3B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + sub_100007004((uint64_t)v1 + 8) = result;
  return result;
}

__n128 sub_10009ACAC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10012B3B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + sub_100007004((uint64_t)v1 + 8) = result;
  return result;
}

void *sub_10009ACCC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(*(void *)(v2 + 40) + 72LL);
  uint64_t v4 = sub_10008D0C4(v2);
  uint64_t v5 = *(void *)(a1 + 16);
  v8[0] = &off_10012B428;
  v8[1] = v5;
  char v9 = v8;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v3 + 80LL))(v3, v4, v8);
  __n128 result = v9;
  if (v9 == v8)
  {
    uint64_t v7 = 4LL;
    __n128 result = v8;
  }

  else
  {
    if (!v9) {
      return result;
    }
    uint64_t v7 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

uint64_t sub_10009AD88(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void (**sub_10009ADC4())(std::__shared_weak_count *__hidden this, const std::type_info *)
{
}

void *sub_10009ADD8(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &off_10012B428;
  result[1] = v3;
  return result;
}

uint64_t sub_10009AE0C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10012B428;
  a2[1] = v2;
  return result;
}

uint64_t sub_10009AE28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 8) + 24LL);
  if (!v3) {
    sub_1000129CC();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 48LL))(v3, a3);
}

uint64_t sub_10009AE54(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void (**sub_10009AE90())(std::__shared_weak_count *__hidden this, const std::type_info *)
{
}

uint64_t sub_10009AE9C()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_100131AB0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_100131AB0))
  {
    uint64_t v2 = operator new(0x10uLL);
    *(_BYTE *)uint64_t v2 = 0;
    v2[1] = 0LL;
    sub_1000041AC((uint64_t)v2);
    sub_1000041AC((uint64_t)v2);
    qword_100131AA8 = (uint64_t)v2;
    __cxa_guard_release(&qword_100131AB0);
  }

  return qword_100131AA8;
}

void sub_10009AF10(_Unwind_Exception *a1)
{
}

void *sub_10009AF28(void *a1, uint64_t a2)
{
  __n128 result = sub_10006E8B8(a1, a2);
  *__n128 result = &off_10012B4B8;
  return result;
}

void sub_10009AF4C(uint64_t a1)
{
  int v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

unsigned __int8 *sub_10009AF60(uint64_t a1, char *a2, uint64_t a3)
{
  return sub_10009B1C0(a1, a2, a3);
}

unsigned __int8 *sub_10009AF9C(uint64_t a1, char *a2, uint64_t a3)
{
  unint64_t v28 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  v27[0] = v6;
  v27[1] = v6;
  sub_100099660(a3, (const std::string::value_type **)off_100125F00, (uint64_t)v27);
  unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v24 = v7;
  __int128 v25 = v7;
  sub_1000211B0(&v24, a3);
  sub_1000211FC((unsigned __int8 **)&v24);
  __n128 result = (unsigned __int8 *)sub_10001855C((unsigned __int8 **)v27, (unsigned __int8 **)&v24);
  if ((result & 1) == 0)
  {
    __n128 result = sub_10001D4BC((unsigned __int8 **)v27);
    if (*result == 2)
    {
      char v9 = sub_100018150((unsigned __int8 **)v27);
      unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&__int128 v10 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v10 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
      __int128 v24 = v10;
      __int128 v25 = v10;
      sub_1000211B0(&v24, (uint64_t)v9);
      sub_100021128((unsigned __int8 **)&v24);
      unint64_t v23 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&__int128 v11 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v11 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
      v22[0] = v11;
      v22[1] = v11;
      sub_1000211B0(v22, (uint64_t)v9);
      sub_1000211FC((unsigned __int8 **)v22);
      for (__n128 result = (unsigned __int8 *)sub_10001855C((unsigned __int8 **)&v24, (unsigned __int8 **)v22);
            (result & 1) == 0;
            __n128 result = (unsigned __int8 *)sub_10001855C((unsigned __int8 **)&v24, (unsigned __int8 **)v22))
      {
        uint64_t v12 = sub_100018150((unsigned __int8 **)&v24);
        if (*v12 != 1) {
          goto LABEL_12;
        }
        unint64_t v13 = v12;
        unint64_t v21 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&__int128 v14 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v14 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
        v20[0] = v14;
        v20[1] = v14;
        sub_1000184F4((uint64_t)v12, "type", (uint64_t)v20);
        unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&__int128 v15 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v15 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
        v18[0] = v15;
        v18[1] = v15;
        sub_1000211B0(v18, (uint64_t)v13);
        sub_1000211FC((unsigned __int8 **)v18);
        uint64_t v16 = sub_100018150((unsigned __int8 **)v20);
        if (sub_100048798(v16, "aggregate"))
        {
          if (!sub_10009B724(a1, v13)) {
            goto LABEL_12;
          }
        }

        else
        {
          unint64_t v17 = sub_100018150((unsigned __int8 **)v20);
        }

        sub_10009D2D4(a1, a2, (uint64_t)v13);
LABEL_12:
        sub_100018704((unsigned __int8 **)&v24);
      }
    }
  }

  return result;
}

unsigned __int8 *sub_10009B1C0(uint64_t a1, char *a2, uint64_t a3)
{
  unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  v18[0] = v6;
  v18[1] = v6;
  sub_100099660(a3, (const std::string::value_type **)off_100125F08, (uint64_t)v18);
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v15 = v7;
  __int128 v16 = v7;
  sub_1000211B0(&v15, a3);
  sub_1000211FC((unsigned __int8 **)&v15);
  __n128 result = (unsigned __int8 *)sub_10001855C((unsigned __int8 **)v18, (unsigned __int8 **)&v15);
  if ((result & 1) == 0)
  {
    __n128 result = sub_10001D4BC((unsigned __int8 **)v18);
    if (*result == 2)
    {
      char v9 = sub_100018150((unsigned __int8 **)v18);
      unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&__int128 v10 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v10 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
      __int128 v15 = v10;
      __int128 v16 = v10;
      sub_1000211B0(&v15, (uint64_t)v9);
      sub_100021128((unsigned __int8 **)&v15);
      unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&__int128 v11 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v11 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
      v13[0] = v11;
      v13[1] = v11;
      sub_1000211B0(v13, (uint64_t)v9);
      sub_1000211FC((unsigned __int8 **)v13);
      for (__n128 result = (unsigned __int8 *)sub_10001855C((unsigned __int8 **)&v15, (unsigned __int8 **)v13);
            (result & 1) == 0;
            __n128 result = (unsigned __int8 *)sub_10001855C((unsigned __int8 **)&v15, (unsigned __int8 **)v13))
      {
        uint64_t v12 = sub_100018150((unsigned __int8 **)&v15);
        if (*v12 == 1)
        {
          if (sub_10009B388((uint64_t)v12, "enable_if", "enableIf")) {
            sub_10009B530( a1,  a2,  "Renamed 'enable_if' to 'enableIf' (no underscore) in an external configuration specification");
          }
        }

        sub_100018704((unsigned __int8 **)&v15);
      }
    }
  }

  return result;
}

uint64_t sub_10009B388(uint64_t a1, const std::string::value_type *a2, const std::string::value_type *a3)
{
  unint64_t v19 = (std::string::value_type *)a3;
  __int128 v20 = a2;
  *(void *)&v18[32] = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)unint64_t v18 = v4;
  *(_OWORD *)&_BYTE v18[16] = v4;
  sub_100099660(a1, &v20, (uint64_t)v18);
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  v16[0] = v5;
  v16[1] = v5;
  sub_1000211B0(v16, a1);
  sub_1000211FC((unsigned __int8 **)v16);
  if (sub_10001855C((unsigned __int8 **)v18, (unsigned __int8 **)v16)
    || *(_BYTE *)a1 == 1 && sub_10004AC10(*(void *)(a1 + 8), (const std::string::value_type **)&v19))
  {
    return 0LL;
  }

  __int128 v7 = sub_100018150((unsigned __int8 **)v18);
  v14[0] = *v7;
  __int128 v15 = (uint64_t *)*((void *)v7 + 1);
  sub_1000041AC((uint64_t)v7);
  *__int128 v7 = 0;
  *((void *)v7 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0LL;
  sub_1000041AC((uint64_t)v14);
  __int128 v8 = sub_100003F94((unsigned __int8 *)a1, v19);
  sub_1000041AC((uint64_t)v14);
  unsigned __int8 v9 = *(_BYTE *)v8;
  *(_BYTE *)__int128 v8 = v14[0];
  v14[0] = v9;
  __int128 v10 = (uint64_t *)v8[1];
  v8[1] = (uint64_t)v15;
  __int128 v15 = v10;
  sub_1000041AC((uint64_t)v8);
  sub_1000041AC((uint64_t)v14);
  sub_10000425C(&v15, v14[0]);
  uint64_t v11 = *(void *)v18;
  __int128 v12 = *(_OWORD *)&v18[8];
  __int128 v13 = *(_OWORD *)&v18[24];
  sub_10001D610((unsigned __int8 *)a1, (uint64_t)&v11, (uint64_t)v16);
  return 1LL;
}

void sub_10009B514( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10009B530(uint64_t a1, char *a2, char *a3)
{
  unint64_t v19 = a3;
  __int128 v20 = a2;
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v18 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10000BA40((uint64_t)&v17, 0LL, 0LL, 0, 1);
  sub_10000E89C((uint64_t)v15, &v19);
  __int128 v4 = sub_100003F94((unsigned __int8 *)&v17, "message");
  sub_1000041AC((uint64_t)v15);
  char v5 = *(_BYTE *)v4;
  *(_BYTE *)__int128 v4 = v15[0];
  v15[0] = v5;
  __int128 v6 = (uint64_t *)v4[1];
  v4[1] = (uint64_t)v16;
  __int128 v16 = v6;
  sub_1000041AC((uint64_t)v4);
  sub_1000041AC((uint64_t)v15);
  sub_10000425C(&v16, v15[0]);
  sub_10000E89C((uint64_t)v13, &v20);
  __int128 v7 = sub_100003F94((unsigned __int8 *)&v17, "source");
  sub_1000041AC((uint64_t)v13);
  char v8 = *(_BYTE *)v7;
  *(_BYTE *)__int128 v7 = v13[0];
  v13[0] = v8;
  unsigned __int8 v9 = (uint64_t *)v7[1];
  v7[1] = (uint64_t)v14;
  unint64_t v14 = v9;
  sub_1000041AC((uint64_t)v7);
  sub_1000041AC((uint64_t)v13);
  sub_10000425C(&v14, v13[0]);
  uint64_t v10 = *(void *)(a1 + 8);
  sub_10000C3E4((uint64_t)v11, (uint64_t)&v17);
  (*(void (**)(uint64_t, const char *, _BYTE *))(*(void *)v10 + 32LL))(v10, "MigratingV1ConfigPass", v11);
  sub_1000041AC((uint64_t)v11);
  sub_10000425C(&v12, v11[0]);
  sub_1000041AC((uint64_t)&v17);
  sub_10000425C(&v18, v17);
}

void sub_10009B6E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, uint64_t *);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_10000417C((uint64_t **)va);
  sub_10000417C((uint64_t **)va1);
  _Unwind_Resume(a1);
}

BOOL sub_10009B724(uint64_t a1, unsigned __int8 *a2)
{
  char v84 = -86;
  int v83 = -1431655766;
  v82[0] = sub_10009B388((uint64_t)a2, "enable_if", "enableIf");
  v82[1] = sub_10009B388((uint64_t)a2, "input_transformation", "input_transformation_not_supported_anymore");
  v82[2] = sub_10009D548(a1, a2);
  sub_1000184F4((uint64_t)a2, "inputs", (uint64_t)v85);
  *(void *)&v81[32] = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v81 = v4;
  *(_OWORD *)&v81[16] = v4;
  sub_1000211B0(v81, (uint64_t)a2);
  sub_1000211FC((unsigned __int8 **)v81);
  sub_1000184F4((uint64_t)a2, "event", (uint64_t)v85);
  *(void *)&v81[32] = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v81 = v5;
  *(_OWORD *)&v81[16] = v5;
  sub_1000211B0(v81, (uint64_t)a2);
  sub_1000211FC((unsigned __int8 **)v81);
  if (!sub_10001855C((unsigned __int8 **)v85, (unsigned __int8 **)v81))
  {
    unint64_t v76 = 0xAAAAAAAAAAAAAAAALL;
    BOOL v77 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    sub_10000BA40((uint64_t)&v76, 0LL, 0LL, 0, 1);
    char v71 = "event";
    *(void *)&v85[32] = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v7 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v7 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)unint64_t v85 = v7;
    *(_OWORD *)&v85[16] = v7;
    sub_100099660((uint64_t)a2, &v71, (uint64_t)v85);
    *(_OWORD *)v81 = (unint64_t)a2;
    *(_OWORD *)&v81[16] = 0uLL;
    *(void *)&v81[32] = 0x8000000000000000LL;
    sub_1000211FC((unsigned __int8 **)v81);
    if (!sub_10001855C((unsigned __int8 **)v85, (unsigned __int8 **)v81))
    {
      char v73 = (void *)0xAAAAAAAAAAAAAAAALL;
      uint64_t v8 = sub_100018150((unsigned __int8 **)v85);
      LOBYTE(v73) = *v8;
      v74 = (uint64_t *)*((void *)v8 + 1);
      sub_1000041AC((uint64_t)v8);
      *uint64_t v8 = 0;
      *((void *)v8 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0LL;
      sub_1000041AC((uint64_t)&v73);
      *(void *)v81 = *(void *)v85;
      *(_OWORD *)&char v81[8] = *(_OWORD *)&v85[8];
      *(_OWORD *)&v81[24] = *(_OWORD *)&v85[24];
      sub_10001D610(a2, (uint64_t)v81, (uint64_t)&__p);
      __p.__r_.__value_.__s.__data_[0] = (char)v73;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v74;
      sub_1000041AC((uint64_t)&v73);
      LOBYTE(v73) = 0;
      v74 = 0LL;
      sub_1000041AC((uint64_t)&__p);
      uint64_t v9 = sub_100003F94((unsigned __int8 *)&v76, "event");
      sub_1000041AC((uint64_t)&__p);
      std::string::value_type v10 = *(_BYTE *)v9;
      *(_BYTE *)uint64_t v9 = __p.__r_.__value_.__s.__data_[0];
      __p.__r_.__value_.__s.__data_[0] = v10;
      std::string::size_type v11 = v9[1];
      v9[1] = __p.__r_.__value_.__l.__size_;
      __p.__r_.__value_.__l.__size_ = v11;
      sub_1000041AC((uint64_t)v9);
      sub_1000041AC((uint64_t)&__p);
      sub_10000425C((uint64_t **)&__p.__r_.__value_.__l.__size_, __p.__r_.__value_.__s.__data_[0]);
      sub_1000041AC((uint64_t)&v73);
      sub_10000425C(&v74, v73);
    }

    char v71 = "matching";
    *(void *)&v85[32] = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v12 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v12 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)unint64_t v85 = v12;
    *(_OWORD *)&v85[16] = v12;
    sub_100099660((uint64_t)a2, &v71, (uint64_t)v85);
    *(_OWORD *)v81 = (unint64_t)a2;
    *(_OWORD *)&v81[16] = 0uLL;
    *(void *)&v81[32] = 0x8000000000000000LL;
    sub_1000211FC((unsigned __int8 **)v81);
    if (!sub_10001855C((unsigned __int8 **)v85, (unsigned __int8 **)v81))
    {
      char v73 = (void *)0xAAAAAAAAAAAAAAAALL;
      __int128 v13 = sub_100018150((unsigned __int8 **)v85);
      LOBYTE(v73) = *v13;
      v74 = (uint64_t *)*((void *)v13 + 1);
      sub_1000041AC((uint64_t)v13);
      *__int128 v13 = 0;
      *((void *)v13 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0LL;
      sub_1000041AC((uint64_t)&v73);
      *(void *)v81 = *(void *)v85;
      *(_OWORD *)&char v81[8] = *(_OWORD *)&v85[8];
      *(_OWORD *)&v81[24] = *(_OWORD *)&v85[24];
      sub_10001D610(a2, (uint64_t)v81, (uint64_t)&__p);
      __p.__r_.__value_.__s.__data_[0] = (char)v73;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v74;
      sub_1000041AC((uint64_t)&v73);
      LOBYTE(v73) = 0;
      v74 = 0LL;
      sub_1000041AC((uint64_t)&__p);
      unint64_t v14 = sub_100003F94((unsigned __int8 *)&v76, "matching");
      sub_1000041AC((uint64_t)&__p);
      std::string::value_type v15 = *(_BYTE *)v14;
      *(_BYTE *)unint64_t v14 = __p.__r_.__value_.__s.__data_[0];
      __p.__r_.__value_.__s.__data_[0] = v15;
      std::string::size_type v16 = v14[1];
      v14[1] = __p.__r_.__value_.__l.__size_;
      __p.__r_.__value_.__l.__size_ = v16;
      sub_1000041AC((uint64_t)v14);
      sub_1000041AC((uint64_t)&__p);
      sub_10000425C((uint64_t **)&__p.__r_.__value_.__l.__size_, __p.__r_.__value_.__s.__data_[0]);
      sub_1000041AC((uint64_t)&v73);
      sub_10000425C(&v74, v73);
    }

    v85[0] = v76;
    *(void *)&v85[8] = v77;
    sub_1000041AC((uint64_t)&v76);
    LOBYTE(v76) = 0;
    BOOL v77 = 0LL;
    sub_1000041AC((uint64_t)v85);
    *(void *)&v85[16] = v85;
    v85[24] = 1;
    sub_10000BA40((uint64_t)v81, (uint64_t)v85, 1LL, 0, 2);
    unint64_t v17 = sub_100003F94(a2, "inputs");
    sub_1000041AC((uint64_t)v81);
    char v18 = *(_BYTE *)v17;
    *(_BYTE *)unint64_t v17 = v81[0];
    v81[0] = v18;
    uint64_t v19 = v17[1];
    v17[1] = *(void *)&v81[8];
    *(void *)&char v81[8] = v19;
    sub_1000041AC((uint64_t)v17);
    sub_1000041AC((uint64_t)v81);
    sub_10000425C((uint64_t **)&v81[8], v81[0]);
    sub_1000041AC((uint64_t)v85);
    sub_10000425C((uint64_t **)&v85[8], v85[0]);
    sub_1000041AC((uint64_t)&v76);
    sub_10000425C(&v77, v76);
    char v6 = 1;
  }

  else
  {
LABEL_3:
    char v6 = 0;
  }

  LOBYTE(v83) = v6;
  sub_1000184F4((uint64_t)a2, "outputs", (uint64_t)v85);
  *(void *)&v81[32] = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v20 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v20 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v81 = v20;
  *(_OWORD *)&v81[16] = v20;
  sub_1000211B0(v81, (uint64_t)a2);
  sub_1000211FC((unsigned __int8 **)v81);
  if (sub_10001855C((unsigned __int8 **)v85, (unsigned __int8 **)v81))
  {
    unint64_t v66 = 0xAAAAAAAAAAAAAA02LL;
    *(void *)unint64_t v85 = 0LL;
    *(void *)v81 = 0LL;
    __int16 v67 = sub_10000BD28((uint64_t *)v85, (uint64_t *)v81);
    sub_1000041AC((uint64_t)&v66);
    char v71 = "output_event";
    *(void *)&v85[32] = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v21 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v21 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)unint64_t v85 = v21;
    *(_OWORD *)&v85[16] = v21;
    sub_100099660((uint64_t)a2, &v71, (uint64_t)v85);
    *(_OWORD *)v81 = (unint64_t)a2;
    *(_OWORD *)&v81[16] = 0uLL;
    *(void *)&v81[32] = 0x8000000000000000LL;
    sub_1000211FC((unsigned __int8 **)v81);
    if (!sub_10001855C((unsigned __int8 **)v85, (unsigned __int8 **)v81))
    {
      unint64_t v76 = 0xAAAAAAAAAAAAAAAALL;
      __int16 v22 = sub_100018150((unsigned __int8 **)v85);
      LOBYTE(v76) = *v22;
      BOOL v77 = (uint64_t *)*((void *)v22 + 1);
      sub_1000041AC((uint64_t)v22);
      unsigned __int8 *v22 = 0;
      *((void *)v22 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0LL;
      sub_1000041AC((uint64_t)&v76);
      *(void *)v81 = *(void *)v85;
      *(_OWORD *)&char v81[8] = *(_OWORD *)&v85[8];
      *(_OWORD *)&v81[24] = *(_OWORD *)&v85[24];
      sub_10001D610(a2, (uint64_t)v81, (uint64_t)&__p);
      __p.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
      __p.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
      sub_10000BA40((uint64_t)&__p, 0LL, 0LL, 0, 1);
      LOBYTE(v73) = v76;
      v74 = v77;
      sub_1000041AC((uint64_t)&v76);
      LOBYTE(v76) = 0;
      BOOL v77 = 0LL;
      sub_1000041AC((uint64_t)&v73);
      unint64_t v23 = sub_100003F94((unsigned __int8 *)&__p, "event");
      sub_1000041AC((uint64_t)&v73);
      char v24 = *(_BYTE *)v23;
      *(_BYTE *)unint64_t v23 = (_BYTE)v73;
      LOBYTE(v73) = v24;
      __int128 v25 = (uint64_t *)v23[1];
      v23[1] = (uint64_t)v74;
      v74 = v25;
      sub_1000041AC((uint64_t)v23);
      sub_1000041AC((uint64_t)&v73);
      sub_10000425C(&v74, v73);
      sub_100080EB8((uint64_t)&v66, (uint64_t)&__p);
      sub_1000041AC((uint64_t)&__p);
      sub_10000425C((uint64_t **)&__p.__r_.__value_.__l.__size_, __p.__r_.__value_.__s.__data_[0]);
      sub_1000041AC((uint64_t)&v76);
      sub_10000425C(&v77, v76);
    }

    v70 = "routing";
    *(void *)&v85[32] = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v26 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v26 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)unint64_t v85 = v26;
    *(_OWORD *)&v85[16] = v26;
    sub_100099660((uint64_t)a2, &v70, (uint64_t)v85);
    *(_OWORD *)v81 = (unint64_t)a2;
    *(_OWORD *)&v81[16] = 0uLL;
    *(void *)&v81[32] = 0x8000000000000000LL;
    sub_1000211FC((unsigned __int8 **)v81);
    if (!sub_10001855C((unsigned __int8 **)v85, (unsigned __int8 **)v81))
    {
      unint64_t v68 = 0xAAAAAAAAAAAAAAAALL;
      __int16 v27 = sub_100018150((unsigned __int8 **)v85);
      LOBYTE(v6sub_100007004((uint64_t)v1 + 8) = *v27;
      unint64_t v69 = (uint64_t *)*((void *)v27 + 1);
      sub_1000041AC((uint64_t)v27);
      unsigned __int8 *v27 = 0;
      *((void *)v27 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0LL;
      sub_1000041AC((uint64_t)&v68);
      *(void *)v81 = *(void *)v85;
      *(_OWORD *)&char v81[8] = *(_OWORD *)&v85[8];
      *(_OWORD *)&v81[24] = *(_OWORD *)&v85[24];
      sub_10001D610(a2, (uint64_t)v81, (uint64_t)&__p);
      unint64_t v76 = 0xAAAAAAAAAAAAAAAALL;
      BOOL v77 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
      sub_10000BA40((uint64_t)&v76, 0LL, 0LL, 0, 1);
      sub_100005064(&v73, "name");
      sub_100044F28("<unknown-message-name>", (char *)a2, (const void **)&v73, &__p);
      sub_100008E5C((uint64_t)&v71, (uint64_t)&__p);
      unint64_t v28 = sub_100003F94((unsigned __int8 *)&v76, "message");
      sub_1000041AC((uint64_t)&v71);
      char v29 = *(_BYTE *)v28;
      *(_BYTE *)unint64_t v28 = (_BYTE)v71;
      LOBYTE(v7sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = v29;
      char v30 = (uint64_t *)v28[1];
      v28[1] = (uint64_t)v72;
      __int128 v72 = v30;
      sub_1000041AC((uint64_t)v28);
      sub_1000041AC((uint64_t)&v71);
      sub_10000425C(&v72, v71);
      if (v75 < 0) {
        operator delete(v73);
      }
      __p.__r_.__value_.__s.__data_[0] = v68;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v69;
      sub_1000041AC((uint64_t)&v68);
      LOBYTE(v6sub_100007004((uint64_t)v1 + 8) = 0;
      unint64_t v69 = 0LL;
      sub_1000041AC((uint64_t)&__p);
      __int128 v31 = sub_100003F94((unsigned __int8 *)&v76, "sink");
      sub_1000041AC((uint64_t)&__p);
      std::string::value_type v32 = *(_BYTE *)v31;
      *(_BYTE *)__int128 v31 = __p.__r_.__value_.__s.__data_[0];
      __p.__r_.__value_.__s.__data_[0] = v32;
      std::string::size_type v33 = v31[1];
      v31[1] = __p.__r_.__value_.__l.__size_;
      __p.__r_.__value_.__l.__size_ = v33;
      sub_1000041AC((uint64_t)v31);
      sub_1000041AC((uint64_t)&__p);
      sub_10000425C((uint64_t **)&__p.__r_.__value_.__l.__size_, __p.__r_.__value_.__s.__data_[0]);
      sub_100080EB8((uint64_t)&v66, (uint64_t)&v76);
      sub_1000041AC((uint64_t)&v76);
      sub_10000425C(&v77, v76);
      sub_1000041AC((uint64_t)&v68);
      sub_10000425C(&v69, v68);
    }

    if (!(_BYTE)v66) {
      goto LABEL_25;
    }
    if (v66 == 1)
    {
      char v34 = v67;
      if (!v67[2])
      {
LABEL_25:
        char v35 = 0;
LABEL_28:
        sub_1000041AC((uint64_t)&v66);
        sub_10000425C(&v67, v66);
        goto LABEL_29;
      }
    }

    else if (v66 == 2)
    {
      char v34 = v67;
      if (*v67 == v67[1]) {
        goto LABEL_25;
      }
    }

    else
    {
      char v34 = v67;
    }

    v85[0] = v66;
    *(void *)&v85[8] = v34;
    sub_1000041AC((uint64_t)&v66);
    LOBYTE(v66) = 0;
    __int16 v67 = 0LL;
    sub_1000041AC((uint64_t)v85);
    __int128 v36 = sub_100003F94(a2, "outputs");
    sub_1000041AC((uint64_t)v85);
    char v37 = *(_BYTE *)v36;
    *(_BYTE *)__int128 v36 = v85[0];
    v85[0] = v37;
    uint64_t v38 = v36[1];
    v36[1] = *(void *)&v85[8];
    *(void *)&v85[8] = v38;
    sub_1000041AC((uint64_t)v36);
    sub_1000041AC((uint64_t)v85);
    sub_10000425C((uint64_t **)&v85[8], v85[0]);
    char v35 = 1;
    goto LABEL_28;
  }

  char v35 = 0;
LABEL_29:
  BYTE1(v83) = v35;
  *(void *)&v85[32] = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v39 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v39 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)unint64_t v85 = v39;
  *(_OWORD *)&v85[16] = v39;
  sub_1000184F4((uint64_t)a2, "dimensions", (uint64_t)v85);
  *(void *)&v81[32] = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v40 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v40 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v81 = v40;
  *(_OWORD *)&v81[16] = v40;
  sub_1000211B0(v81, (uint64_t)a2);
  sub_1000211FC((unsigned __int8 **)v81);
  if (sub_10001855C((unsigned __int8 **)v85, (unsigned __int8 **)v81) || *sub_10001D4BC((unsigned __int8 **)v85) != 2)
  {
    char v42 = 0;
  }

  else
  {
    char v41 = sub_100018150((unsigned __int8 **)v85);
    *(_OWORD *)v81 = (unint64_t)v41;
    *(_OWORD *)&v81[16] = 0uLL;
    *(void *)&v81[32] = 0x8000000000000000LL;
    sub_100021128((unsigned __int8 **)v81);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = (unint64_t)v41;
    __p.__r_.__value_.__l.__cap_ = 0LL;
    uint64_t v79 = 0LL;
    unint64_t v80 = 0x8000000000000000LL;
    sub_1000211FC((unsigned __int8 **)&__p);
    char v42 = 0;
    while (!sub_10001855C((unsigned __int8 **)v81, (unsigned __int8 **)&__p))
    {
      uint64_t v43 = sub_100018150((unsigned __int8 **)v81);
      char v44 = v43;
      if (*v43 == 1
        && sub_1000731A4(*((void *)v43 + 1), "name")
        && (*v44 != 1
         || !sub_1000731A4(*((void *)v44 + 1), "field")
         && (*v44 != 1 || !sub_1000731A4(*((void *)v44 + 1), "expression"))))
      {
        id v45 = sub_100003F94(v44, "name");
        sub_10000C3E4((uint64_t)&v73, (uint64_t)v45);
        int v46 = sub_100003F94(v44, "field");
        sub_1000041AC((uint64_t)&v73);
        char v47 = *(_BYTE *)v46;
        *(_BYTE *)int v46 = (_BYTE)v73;
        LOBYTE(v73) = v47;
        unsigned __int8 v48 = (uint64_t *)v46[1];
        v46[1] = (uint64_t)v74;
        v74 = v48;
        sub_1000041AC((uint64_t)v46);
        sub_1000041AC((uint64_t)&v73);
        sub_10000425C(&v74, v73);
        char v42 = 1;
      }

      sub_100018704((unsigned __int8 **)v81);
    }
  }

  BYTE2(v83) = v42;
  *(void *)&v85[32] = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v49 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v49 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)unint64_t v85 = v49;
  *(_OWORD *)&v85[16] = v49;
  sub_1000184F4((uint64_t)a2, "measures", (uint64_t)v85);
  *(void *)&v81[32] = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v50 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v50 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v81 = v50;
  *(_OWORD *)&v81[16] = v50;
  sub_1000211B0(v81, (uint64_t)a2);
  sub_1000211FC((unsigned __int8 **)v81);
  if (sub_10001855C((unsigned __int8 **)v85, (unsigned __int8 **)v81) || *sub_10001D4BC((unsigned __int8 **)v85) != 2)
  {
    char v52 = 0;
  }

  else
  {
    __int128 v51 = sub_100018150((unsigned __int8 **)v85);
    *(_OWORD *)v81 = (unint64_t)v51;
    *(_OWORD *)&v81[16] = 0uLL;
    *(void *)&v81[32] = 0x8000000000000000LL;
    sub_100021128((unsigned __int8 **)v81);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = (unint64_t)v51;
    __p.__r_.__value_.__l.__cap_ = 0LL;
    uint64_t v79 = 0LL;
    unint64_t v80 = 0x8000000000000000LL;
    sub_1000211FC((unsigned __int8 **)&__p);
    char v52 = 0;
    while (!sub_10001855C((unsigned __int8 **)v81, (unsigned __int8 **)&__p))
    {
      char v53 = sub_100018150((unsigned __int8 **)v81);
      uint64_t v54 = (uint64_t)v53;
      if (*v53 == 1)
      {
        if (sub_1000731A4(*((void *)v53 + 1), "name")
          && (*(_BYTE *)v54 != 1
           || !sub_1000731A4(*(void *)(v54 + 8), "field")
           && (*(_BYTE *)v54 != 1 || !sub_1000731A4(*(void *)(v54 + 8), "expression"))))
        {
          unint64_t v55 = sub_100003F94((unsigned __int8 *)v54, "function");
          if (sub_100044E90((unsigned __int8 *)v55, "count"))
          {
            uint64_t v56 = sub_100003F94((unsigned __int8 *)v54, "name");
            sub_10000C3E4((uint64_t)&v76, (uint64_t)v56);
            char v57 = sub_100003F94((unsigned __int8 *)v54, "field");
            sub_1000041AC((uint64_t)&v76);
            char v58 = *(_BYTE *)v57;
            *(_BYTE *)char v57 = v76;
            LOBYTE(v76) = v58;
            uint64_t v59 = (uint64_t *)v57[1];
            v57[1] = (uint64_t)v77;
            BOOL v77 = v59;
            sub_1000041AC((uint64_t)v57);
            sub_1000041AC((uint64_t)&v76);
            sub_10000425C(&v77, v76);
            char v52 = 1;
          }
        }

        if (*(_BYTE *)v54 == 1)
        {
          if (sub_1000731A4(*(void *)(v54 + 8), "function"))
          {
            char v60 = sub_100003F94((unsigned __int8 *)v54, "function");
            if (sub_100048798((unsigned __int8 *)v60, "count"))
            {
              if (*(_BYTE *)v54 == 1 && sub_1000731A4(*(void *)(v54 + 8), "expression"))
              {
                sub_100005064(&v73, "expression");
                sub_100048324(v54, (const void **)&v73);
                if (v75 < 0) {
                  operator delete(v73);
                }
                char v52 = 1;
              }
            }
          }
        }
      }

      sub_100018704((unsigned __int8 **)v81);
    }
  }

  HIBYTE(v83) = v52;
  char v61 = sub_10009B388((uint64_t)a2, "routing", "routing_renamed_because_not_used");
  uint64_t v62 = 0LL;
  char v84 = v61;
  do
  {
    int v63 = v82[v62];
    if (v82[v62]) {
      BOOL v64 = 1;
    }
    else {
      BOOL v64 = v62 == 7;
    }
    ++v62;
  }

  while (!v64);
  return v63 != 0;
}

void sub_10009C614( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22, unsigned __int8 a23, uint64_t a24, void *a25, uint64_t a26, int a27, __int16 a28, char a29, char a30, uint64_t a31, uint64_t a32, char a33)
{
}

BOOL sub_10009C82C(uint64_t a1, unsigned __int8 *a2)
{
  __int16 v51 = -21846;
  v50[0] = sub_10009B388((uint64_t)a2, "enable_if", "enableIf");
  v50[1] = sub_10009D548(a1, a2);
  sub_1000184F4((uint64_t)a2, "inputs", (uint64_t)v52);
  *(void *)&v46[32] = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)int v46 = v4;
  *(_OWORD *)&_BYTE v46[16] = v4;
  sub_1000211B0(v46, (uint64_t)a2);
  sub_1000211FC((unsigned __int8 **)v46);
  sub_1000184F4((uint64_t)a2, "event", (uint64_t)v52);
  *(void *)&v46[32] = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)int v46 = v5;
  *(_OWORD *)&_BYTE v46[16] = v5;
  sub_1000211B0(v46, (uint64_t)a2);
  sub_1000211FC((unsigned __int8 **)v46);
  if (!sub_10001855C((unsigned __int8 **)v52, (unsigned __int8 **)v46))
  {
    unint64_t v44 = 0xAAAAAAAAAAAAAAAALL;
    id v45 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    sub_10000BA40((uint64_t)&v44, 0LL, 0LL, 0, 1);
    __int128 v40 = "event";
    *(void *)&v52[32] = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v7 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v7 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)char v52 = v7;
    *(_OWORD *)&v52[16] = v7;
    sub_100099660((uint64_t)a2, &v40, (uint64_t)v52);
    *(_OWORD *)int v46 = (unint64_t)a2;
    *(_OWORD *)&_BYTE v46[16] = 0uLL;
    *(void *)&v46[32] = 0x8000000000000000LL;
    sub_1000211FC((unsigned __int8 **)v46);
    if (!sub_10001855C((unsigned __int8 **)v52, (unsigned __int8 **)v46))
    {
      unint64_t v48 = 0xAAAAAAAAAAAAAAAALL;
      uint64_t v8 = sub_100018150((unsigned __int8 **)v52);
      LOBYTE(v4sub_100007004((uint64_t)v1 + 8) = *v8;
      __int128 v49 = (uint64_t *)*((void *)v8 + 1);
      sub_1000041AC((uint64_t)v8);
      *uint64_t v8 = 0;
      *((void *)v8 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0LL;
      sub_1000041AC((uint64_t)&v48);
      *(void *)int v46 = *(void *)v52;
      *(_OWORD *)&v46[8] = *(_OWORD *)&v52[8];
      *(_OWORD *)&v46[24] = *(_OWORD *)&v52[24];
      sub_10001D610(a2, (uint64_t)v46, (uint64_t)&v42);
      LOBYTE(v4sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = v48;
      v43[0] = v49;
      sub_1000041AC((uint64_t)&v48);
      LOBYTE(v4sub_100007004((uint64_t)v1 + 8) = 0;
      __int128 v49 = 0LL;
      sub_1000041AC((uint64_t)&v42);
      uint64_t v9 = sub_100003F94((unsigned __int8 *)&v44, "event");
      sub_1000041AC((uint64_t)&v42);
      char v10 = *(_BYTE *)v9;
      *(_BYTE *)uint64_t v9 = v42;
      LOBYTE(v4sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = v10;
      std::string::size_type v11 = (uint64_t *)v9[1];
      v9[1] = (uint64_t)v43[0];
      v43[0] = v11;
      sub_1000041AC((uint64_t)v9);
      sub_1000041AC((uint64_t)&v42);
      sub_10000425C(v43, v42);
      sub_1000041AC((uint64_t)&v48);
      sub_10000425C(&v49, v48);
    }

    __int128 v40 = "input_transformation";
    *(void *)&v52[32] = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v12 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v12 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)char v52 = v12;
    *(_OWORD *)&v52[16] = v12;
    sub_100099660((uint64_t)a2, &v40, (uint64_t)v52);
    *(_OWORD *)int v46 = (unint64_t)a2;
    *(_OWORD *)&_BYTE v46[16] = 0uLL;
    *(void *)&v46[32] = 0x8000000000000000LL;
    sub_1000211FC((unsigned __int8 **)v46);
    if (!sub_10001855C((unsigned __int8 **)v52, (unsigned __int8 **)v46))
    {
      unint64_t v48 = 0xAAAAAAAAAAAAAAAALL;
      __int128 v13 = sub_100018150((unsigned __int8 **)v52);
      LOBYTE(v4sub_100007004((uint64_t)v1 + 8) = *v13;
      __int128 v49 = (uint64_t *)*((void *)v13 + 1);
      sub_1000041AC((uint64_t)v13);
      *__int128 v13 = 0;
      *((void *)v13 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0LL;
      sub_1000041AC((uint64_t)&v48);
      *(void *)int v46 = *(void *)v52;
      *(_OWORD *)&v46[8] = *(_OWORD *)&v52[8];
      *(_OWORD *)&v46[24] = *(_OWORD *)&v52[24];
      sub_10001D610(a2, (uint64_t)v46, (uint64_t)&v42);
      LOBYTE(v4sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = v48;
      v43[0] = v49;
      sub_1000041AC((uint64_t)&v48);
      LOBYTE(v4sub_100007004((uint64_t)v1 + 8) = 0;
      __int128 v49 = 0LL;
      sub_1000041AC((uint64_t)&v42);
      unint64_t v14 = sub_100003F94((unsigned __int8 *)&v44, "transformation");
      sub_1000041AC((uint64_t)&v42);
      char v15 = *(_BYTE *)v14;
      *(_BYTE *)unint64_t v14 = v42;
      LOBYTE(v4sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = v15;
      std::string::size_type v16 = (uint64_t *)v14[1];
      v14[1] = (uint64_t)v43[0];
      v43[0] = v16;
      sub_1000041AC((uint64_t)v14);
      sub_1000041AC((uint64_t)&v42);
      sub_10000425C(v43, v42);
      sub_1000041AC((uint64_t)&v48);
      sub_10000425C(&v49, v48);
    }

    __int128 v40 = "matching";
    *(void *)&v52[32] = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v17 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v17 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)char v52 = v17;
    *(_OWORD *)&v52[16] = v17;
    sub_100099660((uint64_t)a2, &v40, (uint64_t)v52);
    *(_OWORD *)int v46 = (unint64_t)a2;
    *(_OWORD *)&_BYTE v46[16] = 0uLL;
    *(void *)&v46[32] = 0x8000000000000000LL;
    sub_1000211FC((unsigned __int8 **)v46);
    if (!sub_10001855C((unsigned __int8 **)v52, (unsigned __int8 **)v46))
    {
      unint64_t v48 = 0xAAAAAAAAAAAAAAAALL;
      char v18 = sub_100018150((unsigned __int8 **)v52);
      LOBYTE(v4sub_100007004((uint64_t)v1 + 8) = *v18;
      __int128 v49 = (uint64_t *)*((void *)v18 + 1);
      sub_1000041AC((uint64_t)v18);
      unsigned __int8 *v18 = 0;
      *((void *)v18 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0LL;
      sub_1000041AC((uint64_t)&v48);
      *(void *)int v46 = *(void *)v52;
      *(_OWORD *)&v46[8] = *(_OWORD *)&v52[8];
      *(_OWORD *)&v46[24] = *(_OWORD *)&v52[24];
      sub_10001D610(a2, (uint64_t)v46, (uint64_t)&v42);
      LOBYTE(v4sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = v48;
      v43[0] = v49;
      sub_1000041AC((uint64_t)&v48);
      LOBYTE(v4sub_100007004((uint64_t)v1 + 8) = 0;
      __int128 v49 = 0LL;
      sub_1000041AC((uint64_t)&v42);
      uint64_t v19 = sub_100003F94((unsigned __int8 *)&v44, "matching");
      sub_1000041AC((uint64_t)&v42);
      char v20 = *(_BYTE *)v19;
      *(_BYTE *)uint64_t v19 = v42;
      LOBYTE(v4sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = v20;
      __int128 v21 = (uint64_t *)v19[1];
      v19[1] = (uint64_t)v43[0];
      v43[0] = v21;
      sub_1000041AC((uint64_t)v19);
      sub_1000041AC((uint64_t)&v42);
      sub_10000425C(v43, v42);
      sub_1000041AC((uint64_t)&v48);
      sub_10000425C(&v49, v48);
    }

    v52[0] = v44;
    *(void *)&v52[8] = v45;
    sub_1000041AC((uint64_t)&v44);
    LOBYTE(v44) = 0;
    id v45 = 0LL;
    sub_1000041AC((uint64_t)v52);
    *(void *)&v52[16] = v52;
    v52[24] = 1;
    sub_10000BA40((uint64_t)v46, (uint64_t)v52, 1LL, 0, 2);
    __int16 v22 = sub_100003F94(a2, "inputs");
    sub_1000041AC((uint64_t)v46);
    char v23 = *(_BYTE *)v22;
    *(_BYTE *)__int16 v22 = v46[0];
    v46[0] = v23;
    uint64_t v24 = v22[1];
    v22[1] = *(void *)&v46[8];
    *(void *)&v46[8] = v24;
    sub_1000041AC((uint64_t)v22);
    sub_1000041AC((uint64_t)v46);
    sub_10000425C((uint64_t **)&v46[8], v46[0]);
    sub_1000041AC((uint64_t)v52);
    sub_10000425C((uint64_t **)&v52[8], v52[0]);
    sub_1000041AC((uint64_t)&v44);
    sub_10000425C(&v45, v44);
    char v6 = 1;
  }

  else
  {
LABEL_3:
    char v6 = 0;
  }

  LOBYTE(v5sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = v6;
  sub_1000184F4((uint64_t)a2, "outputs", (uint64_t)v52);
  *(void *)&v46[32] = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v25 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v25 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)int v46 = v25;
  *(_OWORD *)&_BYTE v46[16] = v25;
  sub_1000211B0(v46, (uint64_t)a2);
  sub_1000211FC((unsigned __int8 **)v46);
  if (sub_10001855C((unsigned __int8 **)v52, (unsigned __int8 **)v46))
  {
    __int128 v40 = (const std::string::value_type *)0xAAAAAAAAAAAAAA02LL;
    *(void *)char v52 = 0LL;
    *(void *)int v46 = 0LL;
    char v41 = sub_10000BD28((uint64_t *)v52, (uint64_t *)v46);
    sub_1000041AC((uint64_t)&v40);
    char v47 = "output_event";
    *(void *)&v52[32] = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v26 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v26 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)char v52 = v26;
    *(_OWORD *)&v52[16] = v26;
    sub_100099660((uint64_t)a2, &v47, (uint64_t)v52);
    *(_OWORD *)int v46 = (unint64_t)a2;
    *(_OWORD *)&_BYTE v46[16] = 0uLL;
    *(void *)&v46[32] = 0x8000000000000000LL;
    sub_1000211FC((unsigned __int8 **)v46);
    if (!sub_10001855C((unsigned __int8 **)v52, (unsigned __int8 **)v46))
    {
      unint64_t v44 = 0xAAAAAAAAAAAAAAAALL;
      __int16 v27 = sub_100018150((unsigned __int8 **)v52);
      LOBYTE(v44) = *v27;
      id v45 = (uint64_t *)*((void *)v27 + 1);
      sub_1000041AC((uint64_t)v27);
      unsigned __int8 *v27 = 0;
      *((void *)v27 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0LL;
      sub_1000041AC((uint64_t)&v44);
      *(void *)int v46 = *(void *)v52;
      *(_OWORD *)&v46[8] = *(_OWORD *)&v52[8];
      *(_OWORD *)&v46[24] = *(_OWORD *)&v52[24];
      sub_10001D610(a2, (uint64_t)v46, (uint64_t)&v42);
      unint64_t v42 = 0xAAAAAAAAAAAAAAAALL;
      v43[0] = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
      sub_10000BA40((uint64_t)&v42, 0LL, 0LL, 0, 1);
      LOBYTE(v4sub_100007004((uint64_t)v1 + 8) = v44;
      __int128 v49 = v45;
      sub_1000041AC((uint64_t)&v44);
      LOBYTE(v44) = 0;
      id v45 = 0LL;
      sub_1000041AC((uint64_t)&v48);
      unint64_t v28 = sub_100003F94((unsigned __int8 *)&v42, "event");
      sub_1000041AC((uint64_t)&v48);
      char v29 = *(_BYTE *)v28;
      *(_BYTE *)unint64_t v28 = v48;
      LOBYTE(v4sub_100007004((uint64_t)v1 + 8) = v29;
      char v30 = (uint64_t *)v28[1];
      v28[1] = (uint64_t)v49;
      __int128 v49 = v30;
      sub_1000041AC((uint64_t)v28);
      sub_1000041AC((uint64_t)&v48);
      sub_10000425C(&v49, v48);
      sub_100080EB8((uint64_t)&v40, (uint64_t)&v42);
      sub_1000041AC((uint64_t)&v42);
      sub_10000425C(v43, v42);
      sub_1000041AC((uint64_t)&v44);
      sub_10000425C(&v45, v44);
    }

    if (!(_BYTE)v40) {
      goto LABEL_21;
    }
    if (v40 == 1)
    {
      __int128 v31 = v41;
      if (!v41[2])
      {
LABEL_21:
        char v32 = 0;
LABEL_24:
        sub_1000041AC((uint64_t)&v40);
        sub_10000425C(&v41, v40);
        goto LABEL_25;
      }
    }

    else if (v40 == 2)
    {
      __int128 v31 = v41;
      if (*v41 == v41[1]) {
        goto LABEL_21;
      }
    }

    else
    {
      __int128 v31 = v41;
    }

    v52[0] = (_BYTE)v40;
    *(void *)&v52[8] = v31;
    sub_1000041AC((uint64_t)&v40);
    LOBYTE(v40) = 0;
    char v41 = 0LL;
    sub_1000041AC((uint64_t)v52);
    std::string::size_type v33 = sub_100003F94(a2, "outputs");
    sub_1000041AC((uint64_t)v52);
    char v34 = *(_BYTE *)v33;
    *(_BYTE *)std::string::size_type v33 = v52[0];
    v52[0] = v34;
    uint64_t v35 = v33[1];
    v33[1] = *(void *)&v52[8];
    *(void *)&v52[8] = v35;
    sub_1000041AC((uint64_t)v33);
    sub_1000041AC((uint64_t)v52);
    sub_10000425C((uint64_t **)&v52[8], v52[0]);
    char v32 = 1;
    goto LABEL_24;
  }

  char v32 = 0;
LABEL_25:
  uint64_t v36 = 0LL;
  HIBYTE(v5sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = v32;
  do
  {
    int v37 = v50[v36];
    if (v50[v36]) {
      BOOL v38 = 1;
    }
    else {
      BOOL v38 = v36 == 3;
    }
    ++v36;
  }

  while (!v38);
  return v37 != 0;
}

void sub_10009D19C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned __int8 a17, uint64_t *a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, unsigned __int8 a26)
{
}

void sub_10009D2D4(uint64_t a1, char *a2, uint64_t a3)
{
  __int128 v25 = a2;
  unint64_t v23 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v24 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10000BA40((uint64_t)&v23, 0LL, 0LL, 0, 1);
  sub_10009D984((uint64_t)v21, "Transform migration! You should update the transformation definition!");
  __int128 v5 = sub_100003F94((unsigned __int8 *)&v23, "message");
  sub_1000041AC((uint64_t)v21);
  char v6 = *(_BYTE *)v5;
  *(_BYTE *)__int128 v5 = v21[0];
  v21[0] = v6;
  __int128 v7 = (uint64_t *)v5[1];
  v5[1] = (uint64_t)v22;
  __int16 v22 = v7;
  sub_1000041AC((uint64_t)v5);
  sub_1000041AC((uint64_t)v21);
  sub_10000425C(&v22, v21[0]);
  sub_10000E89C((uint64_t)v19, &v25);
  uint64_t v8 = sub_100003F94((unsigned __int8 *)&v23, "source");
  sub_1000041AC((uint64_t)v19);
  char v9 = *(_BYTE *)v8;
  *(_BYTE *)uint64_t v8 = v19[0];
  v19[0] = v9;
  char v10 = (uint64_t *)v8[1];
  v8[1] = (uint64_t)v20;
  char v20 = v10;
  sub_1000041AC((uint64_t)v8);
  sub_1000041AC((uint64_t)v19);
  sub_10000425C(&v20, v19[0]);
  sub_10000C3E4((uint64_t)v17, a3);
  std::string::size_type v11 = sub_100003F94((unsigned __int8 *)&v23, "newTransformSpec");
  sub_1000041AC((uint64_t)v17);
  char v12 = *(_BYTE *)v11;
  *(_BYTE *)std::string::size_type v11 = v17[0];
  v17[0] = v12;
  __int128 v13 = (uint64_t *)v11[1];
  v11[1] = (uint64_t)v18;
  char v18 = v13;
  sub_1000041AC((uint64_t)v11);
  sub_1000041AC((uint64_t)v17);
  sub_10000425C(&v18, v17[0]);
  uint64_t v14 = *(void *)(a1 + 8);
  sub_10000C3E4((uint64_t)v15, (uint64_t)&v23);
  (*(void (**)(uint64_t, const char *, _BYTE *))(*(void *)v14 + 32LL))(v14, "MigratingV1ConfigPass", v15);
  sub_1000041AC((uint64_t)v15);
  sub_10000425C(&v16, v15[0]);
  sub_1000041AC((uint64_t)&v23);
  sub_10000425C(&v24, v23);
}

void sub_10009D4F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t *a17)
{
}

uint64_t sub_10009D548(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  if (v3 != 3)
  {
    if (v3 == 2)
    {
      unint64_t v20 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&__int128 v8 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v8 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
      v19[0] = v8;
      v19[1] = v8;
      sub_1000211B0(v19, (uint64_t)a2);
      sub_100021128((unsigned __int8 **)v19);
      unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&__int128 v9 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v9 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
      v13[0] = v9;
      v13[1] = v9;
      sub_1000211B0(v13, (uint64_t)a2);
      sub_1000211FC((unsigned __int8 **)v13);
      for (char i = 0; !sub_10001855C((unsigned __int8 **)v19, (unsigned __int8 **)v13); i |= v11)
      {
        char v10 = sub_100018150((unsigned __int8 **)v19);
        char v11 = sub_10009D548(a1, v10);
        sub_100018704((unsigned __int8 **)v19);
      }
    }

    else if (v3 == 1)
    {
      __int128 v26 = a2;
      sub_1000638FC((uint64_t *)&v26, (uint64_t)v19);
      sub_10006397C((uint64_t *)&v26, (uint64_t)v13);
      char i = 0;
      while (!sub_10001855C((unsigned __int8 **)v19, (unsigned __int8 **)v13))
      {
        char v6 = sub_100018150((unsigned __int8 **)v19);
        char v7 = sub_10009D548(a1, v6);
        sub_100018704((unsigned __int8 **)v19);
        i |= v7;
        ++v21;
      }

      if (v18 < 0) {
        operator delete(__p);
      }
      if (v16 < 0) {
        operator delete(v15);
      }
      if (v25 < 0) {
        operator delete(v24);
      }
      if (v23 < 0) {
        operator delete(v22);
      }
    }

    else
    {
      char i = 0;
    }

    return i & 1;
  }

  if ((sub_10009D8C0((uint64_t)a2, ":get_event", ":getEventMap") & 1) != 0
    || (sub_10009D8C0((uint64_t)a2, ":get_event_name", ":getEventName") & 1) != 0
    || (sub_10009D8C0((uint64_t)a2, ":get_field", ":getEventField") & 1) != 0
    || (sub_10009D8C0((uint64_t)a2, ":set_field", ":setEventField") & 1) != 0
    || (sub_10009D8C0((uint64_t)a2, ":getField", ":getEventField") & 1) != 0
    || (sub_10009D8C0((uint64_t)a2, ":setField", ":setEventField") & 1) != 0
    || (sub_10009D8C0((uint64_t)a2, ":lower_bound", ":lowerBound") & 1) != 0
    || (sub_10009D8C0((uint64_t)a2, ":upper_bound", ":upperBound") & 1) != 0
    || (sub_10009D8C0((uint64_t)a2, ":index_of", ":indexOf") & 1) != 0
    || (sub_10009D8C0((uint64_t)a2, ":is_element", ":isElement") & 1) != 0
    || (sub_10009D8C0((uint64_t)a2, ":get_install_type", ":getInstallType") & 1) != 0
    || (sub_10009D8C0((uint64_t)a2, ":get_build_version", ":getBuildVersion") & 1) != 0)
  {
    char i = 1;
    return i & 1;
  }

  return sub_10009D8C0((uint64_t)a2, ":get_hardware_type", ":getHardwareType");
}

void sub_10009D898( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23)
{
}

uint64_t sub_10009D8C0(uint64_t a1, char *a2, char *a3)
{
  char v10 = a3;
  uint64_t v4 = sub_100048798((unsigned __int8 *)a1, a2);
  if ((_DWORD)v4)
  {
    sub_10000E89C((uint64_t)v8, &v10);
    sub_1000041AC((uint64_t)v8);
    unsigned __int8 v5 = *(_BYTE *)a1;
    *(_BYTE *)a1 = v8[0];
    v8[0] = v5;
    char v6 = *(uint64_t **)(a1 + 8);
    *(void *)(a1 + sub_100007004((uint64_t)v1 + 8) = v9;
    __int128 v9 = v6;
    sub_1000041AC(a1);
    sub_1000041AC((uint64_t)v8);
    sub_10000425C(&v9, v8[0]);
  }

  return v4;
}

uint64_t sub_10009D984(uint64_t a1, char *a2)
{
  *(void *)(a1 + sub_100007004((uint64_t)v1 + 8) = 0LL;
  *(_BYTE *)a1 = 3;
  *(void *)(a1 + sub_100007004((uint64_t)v1 + 8) = sub_10009D9CC(a2);
  sub_1000041AC(a1);
  sub_1000041AC(a1);
  return a1;
}

void *sub_10009D9CC(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  sub_100005064(v2, a1);
  return v2;
}

void sub_10009DA00(_Unwind_Exception *a1)
{
}

void sub_10009DA14(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  double v10 = a5;
  *(void *)&__int128 v9 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v9 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  sub_1000A1550(a1, &v10, a2, a3, &v9);
  if ((*(unsigned int (**)(void))(*(void *)v9 + 56LL))(v9))
  {
    *(_OWORD *)a4 = v9;
  }

  else
  {
    *(void *)a4 = 0LL;
    *(void *)(a4 + sub_100007004((uint64_t)v1 + 8) = 0LL;
    char v6 = (std::__shared_weak_count *)*((void *)&v9 + 1);
    if (*((void *)&v9 + 1))
    {
      char v7 = (unint64_t *)(*((void *)&v9 + 1) + 8LL);
      do
        unint64_t v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }

uint64_t sub_10009DAE8()
{
  return 1LL;
}

BOOL sub_10009DAF0(uint64_t a1)
{
  BOOL result = sub_10008D0EC(a1);
  if (!result) {
    return result;
  }
  char v23 = "dimensions";
  unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v20 = v3;
  __int128 v21 = v3;
  sub_100008780(a1 + 56, &v23, (uint64_t)&v20);
  char v15 = (unsigned __int8 *)(a1 + 56);
  uint64_t v16 = 0LL;
  uint64_t v17 = 0LL;
  uint64_t v18 = 0LL;
  unint64_t v19 = 0x8000000000000000LL;
  sub_100008AC8(&v15);
  if (sub_1000087E8((unsigned __int8 **)&v20, &v15))
  {
    uint64_t v4 = (_BYTE *)sub_10009AE9C();
    if (!v4) {
      goto LABEL_7;
    }
  }

  else
  {
    uint64_t v4 = sub_100008924((unsigned __int8 **)&v20);
  }

  if (*v4 != 2) {
LABEL_7:
  }
    uint64_t v4 = 0LL;
  *(void *)(a1 + 120) = v4;
  char v23 = "measures";
  unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v20 = v5;
  __int128 v21 = v5;
  sub_100008780(a1 + 56, &v23, (uint64_t)&v20);
  char v15 = (unsigned __int8 *)(a1 + 56);
  uint64_t v16 = 0LL;
  uint64_t v17 = 0LL;
  uint64_t v18 = 0LL;
  unint64_t v19 = 0x8000000000000000LL;
  sub_100008AC8(&v15);
  if (sub_1000087E8((unsigned __int8 **)&v20, &v15))
  {
    char v6 = (_BYTE *)sub_10009AE9C();
    if (!v6) {
      goto LABEL_17;
    }
  }

  else
  {
    char v6 = sub_100008924((unsigned __int8 **)&v20);
  }

  if (*v6 != 2)
  {
LABEL_17:
    BOOL result = 0LL;
    *(void *)(a1 + 12sub_100007004((uint64_t)v1 + 8) = 0LL;
    return result;
  }

  *(void *)(a1 + 12sub_100007004((uint64_t)v1 + 8) = v6;
  if (!*(void *)(a1 + 120)) {
    return 0LL;
  }
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  v13[0] = v7;
  v13[1] = v7;
  sub_100008B44(v13, (uint64_t)v6);
  sub_100045378((unsigned __int8 **)v13);
  uint64_t v8 = *(void *)(a1 + 128);
  *(void *)&__int128 v9 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v9 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  v11[0] = v9;
  v11[1] = v9;
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  sub_100008B44(v11, v8);
  sub_100008AC8((unsigned __int8 **)v11);
  *(void *)&__int128 v20 = a1 + 168;
  while (!sub_1000087E8((unsigned __int8 **)v13, (unsigned __int8 **)v11))
  {
    double v10 = sub_100008924((unsigned __int8 **)v13);
    LODWORD(v15) = sub_1000405CC(v10);
    sub_1000A1684((uint64_t *)&v20, &v15);
    sub_100018704((unsigned __int8 **)v13);
  }

  return 1LL;
}

void sub_10009DCF4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

void sub_10009DD04(uint64_t a1, uint64_t a2)
{
  v8[0] = &off_10012B5D0;
  v8[1] = a1;
  v8[2] = a2;
  __int128 v9 = v8;
  sub_10008CD68(a1, (uint64_t)__p, (uint64_t)v8);
  uint64_t v4 = v9;
  if (v9 == v8)
  {
    uint64_t v5 = 4LL;
    uint64_t v4 = v8;
  }

  else
  {
    if (!v9) {
      goto LABEL_7;
    }
    uint64_t v5 = 5LL;
  }

  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_7:
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_10009DE04(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

void sub_10009DE10(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0LL;
  *(_BYTE *)a3 = 0;
  sub_1000041AC((uint64_t)a3);
  sub_1000041AC((uint64_t)a3);
  sub_100005064(__p, "loading single statistic from store");
  unint64_t v12 = 0LL;
  char v6 = operator new(0x20uLL);
  void *v6 = &off_10012B6D0;
  v6[1] = a3;
  _OWORD v6[2] = a1;
  void v6[3] = a2;
  unint64_t v12 = v6;
  sub_10008CD68(a1, (uint64_t)__p, (uint64_t)v11);
  char v7 = v12;
  if (v12 == v11)
  {
    uint64_t v8 = 4LL;
    char v7 = v11;
  }

  else
  {
    if (!v12) {
      goto LABEL_7;
    }
    uint64_t v8 = 5LL;
  }

  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_7:
  if (v10 < 0) {
    operator delete(__p[0]);
  }
}

void sub_10009DF40(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

unsigned __int8 *sub_10009DF4C@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 3sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = 0u;
  *(_OWORD *)a3 = 0u;
  if (*(_BYTE *)a2 == 2 && *(void *)(*(void *)(a2 + 8) + 8LL) - **(void **)(a2 + 8) >= 0x11uLL)
  {
    uint64_t v5 = result;
    BOOL result = (unsigned __int8 *)sub_10000BD90(a2, 0LL);
    if (*result == 2)
    {
      BOOL result = (unsigned __int8 *)sub_10000BD90(a2, 1LL);
      if (*result == 2)
      {
        BOOL result = (unsigned __int8 *)sub_10000BD90(a2, 0LL);
        uint64_t v6 = *result;
        if (*result)
        {
          if ((_DWORD)v6 == 1)
          {
            uint64_t v6 = *(void *)(*((void *)result + 1) + 16LL);
          }

          else if ((_DWORD)v6 == 2)
          {
            uint64_t v6 = (uint64_t)(*(void *)(*((void *)result + 1) + 8LL) - **((void **)result + 1)) >> 4;
          }

          else
          {
            uint64_t v6 = 1LL;
          }
        }

        char v7 = (unsigned __int8 *)*((void *)v5 + 15);
        uint64_t v8 = *v7;
        if (*v7)
        {
          if ((_DWORD)v8 == 1)
          {
            uint64_t v8 = *(void *)(*((void *)v7 + 1) + 16LL);
          }

          else if ((_DWORD)v8 == 2)
          {
            uint64_t v8 = (uint64_t)(*(void *)(*((void *)v7 + 1) + 8LL) - **((void **)v7 + 1)) >> 4;
          }

          else
          {
            uint64_t v8 = 1LL;
          }
        }

        if (v6 == v8)
        {
          BOOL result = (unsigned __int8 *)sub_10000BD90(a2, 1LL);
          uint64_t v9 = *result;
          if (*result)
          {
            if ((_DWORD)v9 == 1)
            {
              uint64_t v9 = *(void *)(*((void *)result + 1) + 16LL);
            }

            else if ((_DWORD)v9 == 2)
            {
              uint64_t v9 = (uint64_t)(*(void *)(*((void *)result + 1) + 8LL) - **((void **)result + 1)) >> 4;
            }

            else
            {
              uint64_t v9 = 1LL;
            }
          }

          char v10 = (unsigned __int8 *)*((void *)v5 + 16);
          uint64_t v11 = *v10;
          if (*v10)
          {
            if ((_DWORD)v11 == 1)
            {
              uint64_t v11 = *(void *)(*((void *)v10 + 1) + 16LL);
            }

            else if ((_DWORD)v11 == 2)
            {
              uint64_t v11 = (uint64_t)(*(void *)(*((void *)v10 + 1) + 8LL) - **((void **)v10 + 1)) >> 4;
            }

            else
            {
              uint64_t v11 = 1LL;
            }
          }

          if (v9 == v11)
          {
            uint64_t v12 = sub_10000BD90(a2, 0LL);
            unint64_t v28 = 0xAAAAAAAAAAAAAAAALL;
            *(void *)&__int128 v13 = 0xAAAAAAAAAAAAAAAALL;
            *((void *)&v13 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
            v27[0] = v13;
            v27[1] = v13;
            unint64_t v14 = (unsigned __int8 **)sub_100008B44(v27, v12);
            sub_100045378(v14);
            uint64_t v15 = sub_10000BD90(a2, 0LL);
            unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
            *(void *)&__int128 v16 = 0xAAAAAAAAAAAAAAAALL;
            *((void *)&v16 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
            v25[0] = v16;
            v25[1] = v16;
            sub_100008B44(v25, v15);
            sub_100008AC8((unsigned __int8 **)v25);
            sub_10009E210((uint64_t *)v27, (uint64_t)v25, (uint64_t *)a3);
            uint64_t v17 = sub_10000BD90(a2, 1LL);
            unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
            *(void *)&__int128 v18 = 0xAAAAAAAAAAAAAAAALL;
            *((void *)&v18 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
            v23[0] = v18;
            v23[1] = v18;
            sub_100008B44(v23, v17);
            sub_100045378((unsigned __int8 **)v23);
            uint64_t v19 = sub_10000BD90(a2, 1LL);
            unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
            *(void *)&__int128 v20 = 0xAAAAAAAAAAAAAAAALL;
            *((void *)&v20 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
            v21[0] = v20;
            v21[1] = v20;
            sub_100008B44(v21, v19);
            sub_100008AC8((unsigned __int8 **)v21);
            return (unsigned __int8 *)sub_10009E210((uint64_t *)v23, (uint64_t)v21, (uint64_t *)(a3 + 24));
          }
        }
      }
    }
  }

  return result;
}

void sub_10009E1FC(_Unwind_Exception *a1)
{
}

uint64_t sub_10009E210(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a1;
  __int128 v11 = *(_OWORD *)(a1 + 1);
  __int128 v12 = *(_OWORD *)(a1 + 3);
  uint64_t v4 = *(unsigned __int8 **)a2;
  __int128 v5 = *(_OWORD *)(a2 + 24);
  __int128 v8 = *(_OWORD *)(a2 + 8);
  __int128 v9 = v5;
  *(void *)&__int128 v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  v13[1] = v5;
  __int128 v14 = v5;
  v13[0] = v5;
  uint64_t v10 = v3;
  char v7 = v4;
  sub_1000A1C08((uint64_t)&v10, &v7, a3, (uint64_t)v13);
  return *((void *)&v14 + 1);
}

void **sub_10009E2BC(void **a1)
{
  uint64_t v3 = a1 + 3;
  sub_100004D64(&v3);
  uint64_t v3 = a1;
  sub_100004D64(&v3);
  return a1;
}

uint64_t sub_10009E32C(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 72LL))(a1) && *(void *)(a1 + 192))
  {
    uint64_t result = sub_10009E38C(a1);
    if (!(_DWORD)result) {
      return result;
    }
    sub_1000A14B8(a1 + 136, *(void ***)(a1 + 136));
    sub_10000B890((uint64_t *)(a1 + 192), 0LL);
  }

  return 1LL;
}

uint64_t sub_10009E38C(uint64_t a1)
{
  unsigned __int8 v7 = 0;
  sub_100005064(__p, "persisting to store");
  v8[0] = &off_10012B750;
  v8[1] = a1;
  v8[2] = &v7;
  __int128 v9 = v8;
  sub_10008CD68(a1, (uint64_t)__p, (uint64_t)v8);
  uint64_t v2 = v9;
  if (v9 == v8)
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = v8;
  }

  else
  {
    if (!v9) {
      goto LABEL_7;
    }
    uint64_t v3 = 5LL;
  }

  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_7:
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return v7;
}

void sub_10009E48C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

void sub_10009E498(void *a1@<X0>, void *a2@<X8>)
{
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  __int128 v8 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10000BA40((uint64_t)&v7, 0LL, 0LL, 0, 2);
  uint64_t v4 = (uint64_t *)a1[17];
  for (i = (uint64_t *)a1[18]; v4 != i; uint64_t v4 = v6 + 3)
  {
    __int128 v11 = xmmword_1000F5C30;
    uint64_t v13 = 0LL;
    uint64_t v12 = 0LL;
    *((void *)&v11 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = sub_10000BD28(&v13, &v12);
    sub_1000041AC((uint64_t)&v11);
    sub_1000A1FD0((uint64_t)&v11, v4);
    char v6 = v4 + 3;
    sub_1000A1FD0((uint64_t)&v11, v6);
    v9[0] = v11;
    uint64_t v10 = (uint64_t *)*((void *)&v11 + 1);
    sub_1000041AC((uint64_t)&v11);
    LOBYTE(sub_1000226A0(v12, v11) = 0;
    *((void *)&v11 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0LL;
    sub_1000041AC((uint64_t)v9);
    sub_1000041AC((uint64_t)&v11);
    sub_10000425C((uint64_t **)&v11 + 1, v11);
    sub_100057BDC((uint64_t)&v7, (uint64_t)v9);
    sub_1000041AC((uint64_t)v9);
    sub_10000425C(&v10, v9[0]);
  }

  sub_100057DA0((uint64_t)&v7, a2);
  sub_1000041AC((uint64_t)&v7);
  sub_10000425C(&v8, v7);
}

void sub_10009E648( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1000045D0(exception_object);
}

void sub_10009E688(uint64_t a1)
{
  int v1 = (uint64_t *)(a1 + 192);
  if (!*(void *)(a1 + 192))
  {
    uint64_t v2 = operator new(8uLL);
    sub_1000712D0(v2, "com.apple.analytics.transform-state-in-memory");
    sub_10000B890(v1, (uint64_t)v2);
  }

void sub_10009E6D8(_Unwind_Exception *a1)
{
}

void sub_10009E6EC(uint64_t a1)
{
  uint64_t v1 = a1;
  (*(void (**)(uint64_t))(*(void *)a1 + 40LL))(a1);
  sub_10008D278(v1);
  uint64_t v2 = *(void ***)(v1 + 136);
  v1 += 136LL;
  sub_1000A14B8(v1, v2);
  sub_10000B890((uint64_t *)(v1 + 56), 0LL);
}

void sub_10009E730(uint64_t a1)
{
  v6[0] = &off_10012B7D0;
  v6[1] = a1;
  unint64_t v7 = v6;
  sub_10008CD68(a1, (uint64_t)__p, (uint64_t)v6);
  uint64_t v2 = v7;
  if (v7 == v6)
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = v6;
  }

  else
  {
    if (!v7) {
      goto LABEL_6;
    }
    uint64_t v3 = 5LL;
  }

  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_10009E7F4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

BOOL sub_10009E800(uint64_t a1)
{
  BOOL result = sub_10008D294(a1);
  if (result) {
    return *(_BYTE *)(a1 + 160) != 0;
  }
  return result;
}

uint64_t sub_10009E830(uint64_t *a1, char *a2, __int128 *a3)
{
  if ((char)v14.__r_.__value_.__s.__size_ < 0)
  {
    BOOL v8 = v14.__r_.__value_.__l.__size_ == 5
      && *(_DWORD *)v14.__r_.__value_.__l.__data_ == 1701274994
      && *(_BYTE *)(v14.__r_.__value_.__r.__words[0] + 4) == 120;
    operator delete(v14.__r_.__value_.__l.__data_);
  }

  else
  {
    BOOL v8 = v14.__r_.__value_.__s.__size_ == 5
      && LODWORD(v14.__r_.__value_.__l.__data_) == 1701274994
      && v14.__r_.__value_.__s.__data_[4] == 120;
  }

  if (v13 < 0)
  {
    operator delete(__p[0]);
    if (v8) {
      return sub_10009E9B8(a1, v6, a3);
    }
  }

  else if (v8)
  {
    return sub_10009E9B8(a1, v6, a3);
  }

  uint64_t v10 = (unsigned __int8 *)sub_10004AA8C((uint64_t)a2, "event");
  sub_10000B990((uint64_t)&v14, *(void *)a3 + 16LL);
  LODWORD(v10) = sub_10002CE28(v10, (unsigned __int8 *)&v14);
  sub_1000041AC((uint64_t)&v14);
  sub_10000425C((uint64_t **)&v14.__r_.__value_.__l.__size_, v14.__r_.__value_.__s.__data_[0]);
  if ((_DWORD)v10) {
    return sub_10009E9B8(a1, v6, a3);
  }
  return 0LL;
}

void sub_10009E9AC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

uint64_t sub_10009E9B8(uint64_t *a1, uint64_t a2, __int128 *a3)
{
  char v5 = (void *)(*(void *)a3 + 16LL);
  size_t v6 = strlen("com.apple.coreanalytics.heartbeat.2hours");
  if (*(char *)(*(void *)a3 + 39LL) < 0)
  {
    if (v6 != *(void *)(*(void *)a3 + 24LL)) {
      goto LABEL_11;
    }
    if (v6 == -1LL) {
      goto LABEL_49;
    }
    char v5 = (void *)*v5;
  }

  else
  {
    if (v6 == -1LL) {
LABEL_49:
    }
      sub_100008DD4();
  }

  if (!memcmp(v5, "com.apple.coreanalytics.heartbeat.2hours", v6))
  {
    unint64_t v7 = (os_log_s *)qword_100131970;
    if (os_log_type_enabled((os_log_t)qword_100131970, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = "com.apple.coreanalytics.heartbeat.2hours";
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[AggregatingTransform] Applying aggregation for %{public}s.",  buf,  0xCu);
    }
  }

void sub_10009EE8C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

void sub_10009EEA4(uint64_t *a1@<X0>, uint64_t *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  v9.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
  while (v5 != v6)
  {
    sub_100006200(v5, -1, 0x20u, 0LL, 1, &__p);
    sub_1000A017C((uint64_t **)&v9, (__int128 *)&__p);
    v5 += 16LL;
  }

  memset(v10, 0, sizeof(v10));
  uint64_t v8 = *a2;
  uint64_t v7 = a2[1];
  BOOL v13 = v10;
  while (v8 != v7)
  {
    sub_100006200(v8, -1, 0x20u, 0LL, 1, &__p);
    sub_1000A017C(&v13, (__int128 *)&__p);
    v8 += 16LL;
  }

  sub_1000A005C(" ", v11, &__p);
  sub_1000A005C(" ", v10, &v9);
  *a3 = __p;
  a3[1] = v9;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
  sub_100015E44((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
  sub_100015E44((void ***)&__p);
}

void sub_10009F020( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char **a9, uint64_t a10, uint64_t a11, char *a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  a9 = &a12;
  sub_100015E44((void ***)&a9);
  a12 = &a15;
  sub_100015E44((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_10009F08C(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8 = sub_10009F530(a1, a3);
  char v10 = v9;
  uint64_t v11 = (void *)(*a2 + 16);
  size_t v12 = strlen("com.apple.coreanalytics.heartbeat.2hours");
  if (*(char *)(*a2 + 39) < 0)
  {
    if (v12 != *(void *)(*a2 + 24)) {
      goto LABEL_19;
    }
    if (v12 == -1LL) {
      goto LABEL_53;
    }
    uint64_t v11 = (void *)*v11;
  }

  else
  {
    if (v12 == -1LL) {
LABEL_53:
    }
      sub_100008DD4();
  }

  if (!memcmp(v11, "com.apple.coreanalytics.heartbeat.2hours", v12))
  {
    *(void *)&__int128 v13 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v13 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&uint8_t buf[16] = v13;
    __int128 v40 = v13;
    *(_OWORD *)std::string buf = v13;
    sub_10009EEA4(v8, v8 + 3, (std::string *)buf);
    std::string v14 = (os_log_s *)qword_100131970;
    if (os_log_type_enabled((os_log_t)qword_100131970, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = &buf[24];
      size_t v16 = buf;
      if (buf[23] < 0) {
        size_t v16 = *(_BYTE **)buf;
      }
      if (v40 < 0) {
        uint64_t v15 = *(_BYTE **)&buf[24];
      }
      *(_DWORD *)char v34 = 136446722;
      *(void *)&void v34[4] = "com.apple.coreanalytics.heartbeat.2hours";
      __int16 v35 = 2080;
      __int128 v36 = v16;
      __int16 v37 = 2080;
      BOOL v38 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "[AggregatingTransform: %{public}s] Before accumulation: dimensions: %s, measures: %s",  v34,  0x20u);
    }

    if (SHIBYTE(v40) < 0) {
      operator delete(*(void **)&buf[24]);
    }
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }

void sub_10009F510(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_10009F530(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(uint64_t **)(v3 + 136);
  uint64_t v5 = (uint64_t *)(v3 + 136);
  uint64_t v6 = *(void *)(v3 + 144) - (void)v4;
  if (!v6) {
    goto LABEL_20;
  }
  uint64_t v20 = (uint64_t *)(v3 + 136);
  uint64_t v21 = v3;
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 4);
  do
  {
    unint64_t v8 = v7 >> 1;
    char v9 = (double *)*a2;
    char v10 = (double *)a2[1];
    if ((double *)*a2 != v10)
    {
      uint64_t v11 = &v4[6 * v8];
      __int128 v13 = (unsigned __int8 *)*v11;
      size_t v12 = (unsigned __int8 *)v11[1];
      while (v13 != v12 && (sub_100055FA0((double *)v13, (unsigned __int8 *)v9) & 1) == 0)
      {
        if ((sub_100055FA0(v9, v13) & 1) == 0)
        {
          v13 += 16;
          v9 += 2;
          if (v9 != v10) {
            continue;
          }
        }

        goto LABEL_12;
      }

      uint64_t v4 = v11 + 6;
      unint64_t v8 = v7 + ~v8;
    }

void sub_10009F7FC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
}

uint64_t *sub_10009F828(uint64_t *result, unint64_t a2)
{
  unint64_t v2 = (result[1] - *result) >> 4;
  if (a2 > v2) {
    return (uint64_t *)sub_1000A2490(result, a2 - v2);
  }
  if (a2 < v2) {
    return (uint64_t *)sub_100004CA0((uint64_t)result, *result + 16 * a2);
  }
  return result;
}

void sub_10009F858(int a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  switch(a1)
  {
    case 1:
      sub_1000A0804(a2);
      break;
    case 2:
      sub_1000A0950(a2, a3);
      break;
    case 3:
      sub_1000A0D8C(a2, a3);
      break;
    case 4:
      sub_1000A1064(a2, a3);
      break;
    case 5:
      sub_1000A0AB8(a2, a3);
      break;
    case 6:
      sub_1000A0C20(a2, a3);
      break;
    case 7:
      sub_1000A0EF8(a2, a3);
      break;
    case 8:
      sub_1000A11D0((uint64_t)a2, (uint64_t)a3);
      break;
    case 9:
      sub_1000A127C((uint64_t)a2, (uint64_t)a3);
      break;
    default:
      return;
  }

uint64_t sub_10009F8EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(_BYTE **)a2;
  uint64_t v5 = *(_BYTE **)(a2 + 8);
  if (*(_BYTE **)a2 == v5)
  {
    unsigned int v6 = 0;
  }

  else
  {
    unsigned int v6 = 0;
    do
    {
      v6 += sub_100056958(v4);
      v4 += 16;
    }

    while (v4 != v5);
  }

  unint64_t v8 = *(_BYTE **)(a2 + 24);
  unint64_t v7 = *(_BYTE **)(a2 + 32);
  while (v8 != v7)
  {
    v6 += sub_100056958(v8);
    v8 += 16;
  }

  return (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 80LL))(a1, v6);
}

uint64_t sub_10009F990(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t)a2;
  uint64_t v7 = *a1;
  unsigned int v6 = (void *)a1[1];
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - *a1) >> 4);
  unint64_t v11 = a1[2];
  uint64_t v9 = (uint64_t)(a1 + 2);
  unint64_t v10 = v11;
  if ((unint64_t)v6 >= v11)
  {
    __int128 v19 = 0u;
    *(_OWORD *)uint64_t v20 = 0u;
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - v7) >> 4) + 1;
    if (v13 > 0x555555555555555LL) {
      sub_1000046F8();
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v7) >> 4);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v15 = 0x555555555555555LL;
    }
    else {
      unint64_t v15 = v13;
    }
    *(void *)&v20[16] = v9;
    if (v15) {
      size_t v16 = (char *)sub_100038D10(v9, v15);
    }
    else {
      size_t v16 = 0LL;
    }
    *(void *)&__int128 v19 = v16;
    *((void *)&v19 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = &v16[48 * v8];
    *(void *)uint64_t v20 = *((void *)&v19 + 1);
    *(void *)&_BYTE v20[8] = &v16[48 * v15];
    sub_1000A2758(&v19, a3);
    uint64_t v4 = sub_1000A28FC(a1, &v19, v4);
    sub_1000A2F2C((uint64_t)&v19);
  }

  else if (a2 == v6)
  {
    *a2 = 0LL;
    a2[1] = 0LL;
    a2[2] = 0LL;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = *(void *)(a3 + 16);
    *(void *)a3 = 0LL;
    *(void *)(a3 + sub_100007004((uint64_t)v1 + 8) = 0LL;
    *(void *)(a3 + 16) = 0LL;
    uint64_t v17 = (void *)(v7 + 48 * v8);
    v17[3] = 0LL;
    v17[4] = 0LL;
    v17[5] = 0LL;
    *(_OWORD *)(v17 + 3) = *(_OWORD *)(a3 + 24);
    v17[5] = *(void *)(a3 + 40);
    *(void *)(a3 + 24) = 0LL;
    *(void *)(a3 + 3sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = 0LL;
    *(void *)(a3 + 40) = 0LL;
    a1[1] = (uint64_t)(a2 + 6);
  }

  else
  {
    __int128 v19 = *(_OWORD *)a3;
    *(void *)uint64_t v20 = *(void *)(a3 + 16);
    *(void *)a3 = 0LL;
    *(void *)(a3 + sub_100007004((uint64_t)v1 + 8) = 0LL;
    *(_OWORD *)&_BYTE v20[8] = *(_OWORD *)(a3 + 24);
    uint64_t v21 = *(void *)(a3 + 40);
    uint64_t v22 = v9;
    *(void *)(a3 + 16) = 0LL;
    *(void *)(a3 + 24) = 0LL;
    *(void *)(a3 + 3sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = 0LL;
    *(void *)(a3 + 40) = 0LL;
    sub_1000A268C((uint64_t)a1, (uint64_t)a2, a1[1], (uint64_t)(a2 + 6));
    sub_100058114((void **)v4);
    *(_OWORD *)uint64_t v4 = v19;
    *(void *)(v4 + 16) = *(void *)v20;
    __int128 v19 = 0uLL;
    *(void *)uint64_t v20 = 0LL;
    unint64_t v12 = v7 + 48 * v8;
    sub_100058114((void **)(v12 + 24));
    *(_OWORD *)(v12 + 24) = *(_OWORD *)&v20[8];
    *(void *)(v12 + 40) = v21;
    *(void *)&_BYTE v20[8] = 0LL;
    *(void *)&v20[16] = 0LL;
    uint64_t v21 = 0LL;
    __int128 v23 = (void **)&v20[8];
    sub_100004D64(&v23);
    __int128 v23 = (void **)&v19;
    sub_100004D64(&v23);
  }

  return v4;
}

void sub_10009FBD8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t sub_10009FBFC(uint64_t *a1, __int128 *a2)
{
  uint64_t v4 = a1[3];
  *(void *)&__int128 v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  v19[0] = v5;
  v19[1] = v5;
  unint64_t v20 = 0xAAAAAAAAAAAAAAAALL;
  sub_100008B44(v19, v4);
  sub_100045378((unsigned __int8 **)v19);
  uint64_t v6 = a1[3];
  *(void *)&__int128 v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  v17[0] = v7;
  v17[1] = v7;
  unint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
  sub_100008B44(v17, v6);
  sub_100008AC8((unsigned __int8 **)v17);
  if (sub_1000087E8((unsigned __int8 **)v19, (unsigned __int8 **)v17))
  {
LABEL_4:
    uint64_t v9 = (os_log_s *)qword_100131918;
    if (os_log_type_enabled((os_log_t)qword_100131918, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v11 = __p;
      sub_10008D06C((uint64_t)a1, __p);
      if (v16 < 0) {
        unint64_t v11 = (void **)__p[0];
      }
      uint64_t v12 = sub_10008D2D4((uint64_t)a1);
      else {
        uint64_t v13 = *(void *)v12;
      }
      unint64_t v14 = (void *)(*(void *)a2 + 16LL);
      *(_DWORD *)std::string buf = 136446722;
      uint64_t v22 = v11;
      __int16 v23 = 2080;
      uint64_t v24 = v13;
      __int16 v25 = 2080;
      __int128 v26 = v14;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "[%{public}sTransform] WARNING: transform '%s' received event '%s' but did not handle it",  buf,  0x20u);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }
  }

  else
  {
    while (1)
    {
      unint64_t v8 = sub_100008924((unsigned __int8 **)v19);
      sub_100018704((unsigned __int8 **)v19);
    }
  }

  return (*(uint64_t (**)(void))(**(void **)(a1[5] + 56) + 24LL))(*(void *)(a1[5] + 56));
}

void sub_10009FDC0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = operator new(0x28uLL);
  *uint64_t v4 = &off_10012B850;
  v4[1] = a1;
  void v4[2] = v8;
  v4[3] = __p;
  v4[4] = a2;
  unint64_t v10 = v4;
  sub_10009DD04((uint64_t)a1, (uint64_t)v9);
  __int128 v5 = v10;
  if (v10 == v9)
  {
    uint64_t v6 = 4LL;
    __int128 v5 = v9;
  }

  else
  {
    if (!v10) {
      goto LABEL_6;
    }
    uint64_t v6 = 5LL;
  }

  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

  if (v8[0])
  {
    v8[1] = v8[0];
    operator delete(v8[0]);
  }

void sub_10009FEF0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10009FF2C(uint64_t a1)
{
  *(void *)a1 = off_10012B4F8;
  sub_10000B890((uint64_t *)(a1 + 192), 0LL);
  unint64_t v2 = *(void **)(a1 + 168);
  if (v2)
  {
    *(void *)(a1 + 176) = v2;
    operator delete(v2);
  }

  if (*(_BYTE *)(a1 + 160))
  {
    uint64_t v4 = (void **)(a1 + 136);
    sub_1000A1478(&v4);
  }

  sub_10008C9EC(a1);
  return a1;
}

void sub_10009FFC4(uint64_t a1)
{
  *(void *)a1 = off_10012B4F8;
  sub_10000B890((uint64_t *)(a1 + 192), 0LL);
  unint64_t v2 = *(void **)(a1 + 168);
  if (v2)
  {
    *(void *)(a1 + 176) = v2;
    operator delete(v2);
  }

  if (*(_BYTE *)(a1 + 160))
  {
    uint64_t v4 = (void **)(a1 + 136);
    sub_1000A1478(&v4);
  }

  uint64_t v3 = (void *)sub_10008C9EC(a1);
  operator delete(v3);
}

uint64_t *sub_1000A005C@<X0>(char *__s@<X1>, uint64_t *result@<X0>, std::string *a3@<X8>)
{
  uint64_t v5 = *result;
  uint64_t v6 = result[1];
  a3->__r_.__value_.__l.__size_ = 0LL;
  a3->__r_.__value_.__l.__cap_ = 0LL;
  a3->__r_.__value_.__r.__words[0] = 0LL;
  if (v5 == v6) {
    goto LABEL_10;
  }
  int v7 = *(char *)(v5 + 23);
  if (v7 >= 0) {
    unint64_t v8 = (char *)v5;
  }
  else {
    unint64_t v8 = *(char **)v5;
  }
  if (v7 >= 0) {
    std::string::size_type v9 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    std::string::size_type v9 = *(void *)(v5 + 8);
  }
  for (uint64_t result = (uint64_t *)sub_1000A02EC(a3, (uint64_t)a3, v8, &v8[v9], v9);
        ;
        uint64_t result = (uint64_t *)sub_1000A02EC(a3, v16, v18, &v18[v19], v19))
  {
    v5 += 24LL;
LABEL_10:
    if (v5 == v6) {
      break;
    }
    std::string::size_type size = a3->__r_.__value_.__s.__size_;
    if ((size & 0x80u) == 0LL) {
      unint64_t v11 = a3;
    }
    else {
      unint64_t v11 = (std::string *)a3->__r_.__value_.__r.__words[0];
    }
    if ((size & 0x80u) != 0LL) {
      std::string::size_type size = a3->__r_.__value_.__l.__size_;
    }
    uint64_t v12 = (uint64_t)v11 + size;
    size_t v13 = strlen(__s);
    sub_1000A0604(a3, v12, __s, &__s[v13], v13);
    std::string::size_type v14 = a3->__r_.__value_.__s.__size_;
    if ((v14 & 0x80u) == 0LL) {
      unint64_t v15 = a3;
    }
    else {
      unint64_t v15 = (std::string *)a3->__r_.__value_.__r.__words[0];
    }
    if ((v14 & 0x80u) != 0LL) {
      std::string::size_type v14 = a3->__r_.__value_.__l.__size_;
    }
    uint64_t v16 = (uint64_t)v15 + v14;
    int v17 = *(char *)(v5 + 23);
    if (v17 >= 0) {
      unint64_t v18 = (char *)v5;
    }
    else {
      unint64_t v18 = *(char **)v5;
    }
    if (v17 >= 0) {
      std::string::size_type v19 = *(unsigned __int8 *)(v5 + 23);
    }
    else {
      std::string::size_type v19 = *(void *)(v5 + 8);
    }
  }

  return result;
}

void sub_1000A015C(_Unwind_Exception *a1)
{
}

uint64_t **sub_1000A017C(uint64_t **a1, __int128 *a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = (*a1)[1];
  uint64_t v6 = *a1;
  unint64_t v9 = v6[2];
  uint64_t v7 = (uint64_t)(v6 + 2);
  unint64_t v8 = v9;
  if (v5 >= v9)
  {
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *v4) >> 3);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_1000046F8();
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *v4) >> 3);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x555555555555555LL) {
      unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v15 = v13;
    }
    v20[4] = v7;
    if (v15) {
      uint64_t v16 = (char *)sub_1000171F0(v7, v15);
    }
    else {
      uint64_t v16 = 0LL;
    }
    int v17 = &v16[24 * v12];
    v20[0] = v16;
    v20[1] = v17;
    void v20[3] = &v16[24 * v15];
    __int128 v18 = *a2;
    *((void *)v17 + sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = *((void *)a2 + 2);
    *(_OWORD *)int v17 = v18;
    *((void *)a2 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0LL;
    *((void *)a2 + sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = 0LL;
    *(void *)a2 = 0LL;
    _OWORD v20[2] = v17 + 24;
    sub_10001717C(v4, v20);
    uint64_t v11 = v4[1];
    sub_100017378((uint64_t)v20);
  }

  else
  {
    __int128 v10 = *a2;
    *(void *)(v5 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v5 = v10;
    *((void *)a2 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0LL;
    *((void *)a2 + sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = 0LL;
    *(void *)a2 = 0LL;
    uint64_t v11 = v5 + 24;
    v4[1] = v5 + 24;
  }

  v4[1] = v11;
  return a1;
}

void sub_1000A02D8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1000A02EC(std::string *this, uint64_t a2, char *a3, char *a4, std::string::size_type __n_add)
{
  uint64_t v6 = this;
  if (((char)this->__r_.__value_.__s.__size_ & 0x80000000) == 0)
  {
    std::string::size_type v7 = a2 - (void)this;
    if (__n_add)
    {
      std::string::size_type size = this->__r_.__value_.__s.__size_;
      unint64_t v9 = this;
      goto LABEL_6;
    }

    return (uint64_t)v6 + v7;
  }

  unint64_t v9 = (std::string *)this->__r_.__value_.__r.__words[0];
  std::string::size_type v7 = a2 - this->__r_.__value_.__r.__words[0];
  if (!__n_add)
  {
    uint64_t v6 = (std::string *)this->__r_.__value_.__r.__words[0];
    return (uint64_t)v6 + v7;
  }

  std::string::size_type size = this->__r_.__value_.__l.__size_;
LABEL_6:
  memset(&__p, 170, sizeof(__p));
  sub_1000A0580(&__p, a3, a4);
  std::string::size_type v10 = __p.__r_.__value_.__l.__size_;
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v10 = __p.__r_.__value_.__s.__size_;
  }
  uint64_t v12 = sub_1000A0468(v6, __n_add, v7, (char *)p_p, (char *)p_p + v10);
  return v12;
}

void sub_1000A0444( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000A0468( std::string *this, std::string::size_type __n_add, std::string::size_type __n_copy, char *a4, char *a5)
{
  unint64_t v9 = this;
  if ((char)this->__r_.__value_.__s.__size_ < 0)
  {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    std::string::size_type v11 = (this->__r_.__value_.__l.__cap_ & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v11 - size >= __n_add)
    {
      uint64_t v12 = (std::string *)this->__r_.__value_.__r.__words[0];
      goto LABEL_7;
    }
  }

  else
  {
    std::string::size_type size = this->__r_.__value_.__s.__size_;
    std::string::size_type v11 = 22LL;
    uint64_t v12 = this;
    if (22 - size >= __n_add)
    {
LABEL_7:
      size_t v13 = size - __n_copy;
      if (size == __n_copy) {
        std::string::size_type size = __n_copy;
      }
      else {
        memmove((char *)v12 + __n_copy + __n_add, (char *)v12 + __n_copy, v13);
      }
      goto LABEL_10;
    }
  }

  std::string::__grow_by(this, v11, size + __n_add - v11, size, __n_copy, 0LL, __n_add);
  v9->__r_.__value_.__l.__size_ = size + __n_add;
  uint64_t v12 = (std::string *)v9->__r_.__value_.__r.__words[0];
LABEL_10:
  std::string::size_type v14 = size + __n_add;
  else {
    v9->__r_.__value_.__s.__size_ = v14 & 0x7F;
  }
  v12->__r_.__value_.__s.__data_[v14] = 0;
  if (a4 != a5)
  {
    unint64_t v15 = (char *)v12 + __n_copy;
    do
    {
      char v16 = *a4++;
      *v15++ = v16;
    }

    while (a4 != a5);
  }

  return (uint64_t)v9 + __n_copy;
}

void sub_1000A0580(std::string *this, std::string::value_type *a2, std::string::value_type *a3)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__l.__cap_ = 0LL;
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    do
      std::string::push_back(this, *v4++);
    while (v4 != a3);
  }

void sub_1000A05D4(void *a1)
{
}

void sub_1000A05F0(_Unwind_Exception *a1)
{
}

uint64_t sub_1000A0604(std::string *this, uint64_t a2, char *a3, char *a4, std::string::size_type __n_add)
{
  uint64_t v6 = this;
  if (((char)this->__r_.__value_.__s.__size_ & 0x80000000) == 0)
  {
    std::string::size_type v7 = a2 - (void)this;
    if (__n_add)
    {
      std::string::size_type size = this->__r_.__value_.__s.__size_;
      unint64_t v9 = this;
      goto LABEL_6;
    }

    return (uint64_t)v6 + v7;
  }

  unint64_t v9 = (std::string *)this->__r_.__value_.__r.__words[0];
  std::string::size_type v7 = a2 - this->__r_.__value_.__r.__words[0];
  if (!__n_add)
  {
    uint64_t v6 = (std::string *)this->__r_.__value_.__r.__words[0];
    return (uint64_t)v6 + v7;
  }

  std::string::size_type size = this->__r_.__value_.__l.__size_;
LABEL_6:
  memset(&__p, 170, sizeof(__p));
  sub_1000A0780(&__p, a3, a4);
  std::string::size_type v10 = __p.__r_.__value_.__l.__size_;
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v10 = __p.__r_.__value_.__s.__size_;
  }
  uint64_t v12 = sub_1000A0468(v6, __n_add, v7, (char *)p_p, (char *)p_p + v10);
  return v12;
}

void sub_1000A075C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000A0780(std::string *this, std::string::value_type *a2, std::string::value_type *a3)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__l.__cap_ = 0LL;
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    do
      std::string::push_back(this, *v4++);
    while (v4 != a3);
  }

void sub_1000A07D4(void *a1)
{
}

void sub_1000A07F0(_Unwind_Exception *a1)
{
}

void sub_1000A0804(unsigned __int8 *a1)
{
  if (*a1 - 5 >= 2)
  {
    unint64_t v2 = (uint64_t **)&v11;
    v10[0] = 6;
    uint64_t v11 = 1LL;
    sub_1000041AC((uint64_t)v10);
    sub_1000041AC((uint64_t)v10);
    sub_1000041AC((uint64_t)v10);
    unsigned __int8 v6 = *a1;
    *a1 = v10[0];
    v10[0] = v6;
    uint64_t v7 = *((void *)a1 + 1);
    *((void *)a1 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = v11;
    uint64_t v11 = v7;
    sub_1000041AC((uint64_t)a1);
    sub_1000041AC((uint64_t)v10);
    int v5 = v10[0];
  }

  else
  {
    unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
    sub_100059F20(a1, &v12);
    unint64_t v2 = (uint64_t **)&v9;
    v8[0] = 6;
    uint64_t v9 = v12 + 1;
    sub_1000041AC((uint64_t)v8);
    sub_1000041AC((uint64_t)v8);
    sub_1000041AC((uint64_t)v8);
    unsigned __int8 v3 = *a1;
    *a1 = v8[0];
    v8[0] = v3;
    uint64_t v4 = *((void *)a1 + 1);
    *((void *)a1 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = v9;
    uint64_t v9 = v4;
    sub_1000041AC((uint64_t)a1);
    sub_1000041AC((uint64_t)v8);
    int v5 = v8[0];
  }

  sub_10000425C(v2, v5);
}

void sub_1000A0950(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v13 = 0LL;
  if (sub_1000A1320(a2, &v13))
  {
    if (*a1 - 5 >= 3)
    {
      unsigned __int8 v3 = (uint64_t **)&v12;
      v11[0] = 5;
      uint64_t v12 = v13;
      sub_1000041AC((uint64_t)v11);
      sub_1000041AC((uint64_t)v11);
      sub_1000041AC((uint64_t)v11);
      unsigned __int8 v7 = *a1;
      *a1 = v11[0];
      v11[0] = v7;
      uint64_t v8 = *((void *)a1 + 1);
      *((void *)a1 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = v12;
      uint64_t v12 = v8;
      sub_1000041AC((uint64_t)a1);
      sub_1000041AC((uint64_t)v11);
      int v6 = v11[0];
    }

    else
    {
      uint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
      sub_10000FF7C(a1, &v14);
      unsigned __int8 v3 = (uint64_t **)&v10;
      v9[0] = 5;
      uint64_t v10 = v13 + v14;
      sub_1000041AC((uint64_t)v9);
      sub_1000041AC((uint64_t)v9);
      sub_1000041AC((uint64_t)v9);
      unsigned __int8 v4 = *a1;
      *a1 = v9[0];
      v9[0] = v4;
      uint64_t v5 = *((void *)a1 + 1);
      *((void *)a1 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = v10;
      uint64_t v10 = v5;
      sub_1000041AC((uint64_t)a1);
      sub_1000041AC((uint64_t)v9);
      int v6 = v9[0];
    }

    sub_10000425C(v3, v6);
  }

void sub_1000A0AB8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  double v13 = 0.0;
  if (sub_1000A13C4(a2, &v13))
  {
    if (*a1 - 5 >= 3)
    {
      unsigned __int8 v3 = (uint64_t **)&v12;
      v11[0] = 7;
      double v12 = v13;
      sub_1000041AC((uint64_t)v11);
      sub_1000041AC((uint64_t)v11);
      sub_1000041AC((uint64_t)v11);
      unsigned __int8 v7 = *a1;
      *a1 = v11[0];
      v11[0] = v7;
      double v8 = *((double *)a1 + 1);
      *((double *)a1 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = v12;
      double v12 = v8;
      sub_1000041AC((uint64_t)a1);
      sub_1000041AC((uint64_t)v11);
      int v6 = v11[0];
    }

    else
    {
      double v14 = NAN;
      sub_10005A088(a1, &v14);
      unsigned __int8 v3 = (uint64_t **)&v10;
      v9[0] = 7;
      double v10 = v14 + v13;
      sub_1000041AC((uint64_t)v9);
      sub_1000041AC((uint64_t)v9);
      sub_1000041AC((uint64_t)v9);
      unsigned __int8 v4 = *a1;
      *a1 = v9[0];
      v9[0] = v4;
      double v5 = *((double *)a1 + 1);
      *((double *)a1 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = v10;
      double v10 = v5;
      sub_1000041AC((uint64_t)a1);
      sub_1000041AC((uint64_t)v9);
      int v6 = v9[0];
    }

    sub_10000425C(v3, v6);
  }

void sub_1000A0C20(unsigned __int8 *a1, unsigned __int8 *a2)
{
  double v14 = 0.0;
  if (sub_1000A13C4(a2, &v14))
  {
    if (*a1 - 5 >= 3)
    {
      unsigned __int8 v4 = (uint64_t **)&v13;
      v12[0] = 7;
      double v13 = v14;
      sub_1000041AC((uint64_t)v12);
      sub_1000041AC((uint64_t)v12);
      sub_1000041AC((uint64_t)v12);
      unsigned __int8 v8 = *a1;
      *a1 = v12[0];
      v12[0] = v8;
      double v9 = *((double *)a1 + 1);
      *((double *)a1 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = v13;
      double v13 = v9;
      sub_1000041AC((uint64_t)a1);
      sub_1000041AC((uint64_t)v12);
      int v7 = v12[0];
    }

    else
    {
      double v15 = NAN;
      sub_10005A088(a1, &v15);
      double v3 = v15;
      unsigned __int8 v4 = (uint64_t **)&v11;
      if (v14 < v15) {
        double v3 = v14;
      }
      v10[0] = 7;
      double v11 = v3;
      sub_1000041AC((uint64_t)v10);
      sub_1000041AC((uint64_t)v10);
      sub_1000041AC((uint64_t)v10);
      unsigned __int8 v5 = *a1;
      *a1 = v10[0];
      v10[0] = v5;
      double v6 = *((double *)a1 + 1);
      *((double *)a1 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = v11;
      double v11 = v6;
      sub_1000041AC((uint64_t)a1);
      sub_1000041AC((uint64_t)v10);
      int v7 = v10[0];
    }

    sub_10000425C(v4, v7);
  }

void sub_1000A0D8C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v14 = 0LL;
  if (sub_1000A1320(a2, &v14))
  {
    if (*a1 - 5 >= 3)
    {
      unsigned __int8 v4 = (uint64_t **)&v13;
      v12[0] = 5;
      uint64_t v13 = v14;
      sub_1000041AC((uint64_t)v12);
      sub_1000041AC((uint64_t)v12);
      sub_1000041AC((uint64_t)v12);
      unsigned __int8 v8 = *a1;
      *a1 = v12[0];
      v12[0] = v8;
      uint64_t v9 = *((void *)a1 + 1);
      *((void *)a1 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = v13;
      uint64_t v13 = v9;
      sub_1000041AC((uint64_t)a1);
      sub_1000041AC((uint64_t)v12);
      int v7 = v12[0];
    }

    else
    {
      uint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
      sub_10000FF7C(a1, &v15);
      uint64_t v3 = v15;
      unsigned __int8 v4 = (uint64_t **)&v11;
      if (v14 < v15) {
        uint64_t v3 = v14;
      }
      v10[0] = 5;
      uint64_t v11 = v3;
      sub_1000041AC((uint64_t)v10);
      sub_1000041AC((uint64_t)v10);
      sub_1000041AC((uint64_t)v10);
      unsigned __int8 v5 = *a1;
      *a1 = v10[0];
      v10[0] = v5;
      uint64_t v6 = *((void *)a1 + 1);
      *((void *)a1 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = v11;
      uint64_t v11 = v6;
      sub_1000041AC((uint64_t)a1);
      sub_1000041AC((uint64_t)v10);
      int v7 = v10[0];
    }

    sub_10000425C(v4, v7);
  }

void sub_1000A0EF8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  double v14 = 0.0;
  if (sub_1000A13C4(a2, &v14))
  {
    if (*a1 - 5 >= 3)
    {
      unsigned __int8 v4 = (uint64_t **)&v13;
      v12[0] = 7;
      double v13 = v14;
      sub_1000041AC((uint64_t)v12);
      sub_1000041AC((uint64_t)v12);
      sub_1000041AC((uint64_t)v12);
      unsigned __int8 v8 = *a1;
      *a1 = v12[0];
      v12[0] = v8;
      double v9 = *((double *)a1 + 1);
      *((double *)a1 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = v13;
      double v13 = v9;
      sub_1000041AC((uint64_t)a1);
      sub_1000041AC((uint64_t)v12);
      int v7 = v12[0];
    }

    else
    {
      double v15 = NAN;
      sub_10005A088(a1, &v15);
      double v3 = v15;
      unsigned __int8 v4 = (uint64_t **)&v11;
      if (v15 < v14) {
        double v3 = v14;
      }
      v10[0] = 7;
      double v11 = v3;
      sub_1000041AC((uint64_t)v10);
      sub_1000041AC((uint64_t)v10);
      sub_1000041AC((uint64_t)v10);
      unsigned __int8 v5 = *a1;
      *a1 = v10[0];
      v10[0] = v5;
      double v6 = *((double *)a1 + 1);
      *((double *)a1 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = v11;
      double v11 = v6;
      sub_1000041AC((uint64_t)a1);
      sub_1000041AC((uint64_t)v10);
      int v7 = v10[0];
    }

    sub_10000425C(v4, v7);
  }

void sub_1000A1064(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v14 = 0LL;
  if (sub_1000A1320(a2, &v14))
  {
    if (*a1 - 5 >= 3)
    {
      unsigned __int8 v4 = (uint64_t **)&v13;
      v12[0] = 5;
      uint64_t v13 = v14;
      sub_1000041AC((uint64_t)v12);
      sub_1000041AC((uint64_t)v12);
      sub_1000041AC((uint64_t)v12);
      unsigned __int8 v8 = *a1;
      *a1 = v12[0];
      v12[0] = v8;
      uint64_t v9 = *((void *)a1 + 1);
      *((void *)a1 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = v13;
      uint64_t v13 = v9;
      sub_1000041AC((uint64_t)a1);
      sub_1000041AC((uint64_t)v12);
      int v7 = v12[0];
    }

    else
    {
      uint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
      sub_10000FF7C(a1, &v15);
      uint64_t v3 = v15;
      unsigned __int8 v4 = (uint64_t **)&v11;
      if (v15 <= v14) {
        uint64_t v3 = v14;
      }
      v10[0] = 5;
      uint64_t v11 = v3;
      sub_1000041AC((uint64_t)v10);
      sub_1000041AC((uint64_t)v10);
      sub_1000041AC((uint64_t)v10);
      unsigned __int8 v5 = *a1;
      *a1 = v10[0];
      v10[0] = v5;
      uint64_t v6 = *((void *)a1 + 1);
      *((void *)a1 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = v11;
      uint64_t v11 = v6;
      sub_1000041AC((uint64_t)a1);
      sub_1000041AC((uint64_t)v10);
      int v7 = v10[0];
    }

    sub_10000425C(v4, v7);
  }

void sub_1000A11D0(uint64_t a1, uint64_t a2)
{
  if (!*(_BYTE *)a1)
  {
    sub_10000C3E4((uint64_t)v5, a2);
    sub_1000041AC((uint64_t)v5);
    char v3 = *(_BYTE *)a1;
    *(_BYTE *)a1 = v5[0];
    v5[0] = v3;
    unsigned __int8 v4 = *(uint64_t **)(a1 + 8);
    *(void *)(a1 + sub_100007004((uint64_t)v1 + 8) = v6;
    uint64_t v6 = v4;
    sub_1000041AC(a1);
    sub_1000041AC((uint64_t)v5);
    sub_10000425C(&v6, v5[0]);
  }

void sub_1000A127C(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)a1;
  *(_BYTE *)a1 = v5[0];
  v5[0] = v3;
  unsigned __int8 v4 = *(uint64_t **)(a1 + 8);
  *(void *)(a1 + sub_100007004((uint64_t)v1 + 8) = v6;
  uint64_t v6 = v4;
  sub_1000041AC(a1);
  sub_1000041AC((uint64_t)v5);
  sub_10000425C(&v6, v5[0]);
}

uint64_t sub_1000A1320(unsigned __int8 *a1, uint64_t *a2)
{
  int v3 = *a1;
  if ((v3 - 5) <= 2)
  {
    uint64_t v6 = 0xAAAAAAAAAAAAAAAALL;
    sub_10000FF7C(a1, &v6);
    uint64_t v4 = v6;
LABEL_5:
    *a2 = v4;
    return 1LL;
  }

  if (v3 == 4)
  {
    LOBYTE(v6) = -86;
    sub_100059DD4((char *)a1, &v6);
    uint64_t v4 = v6;
    goto LABEL_5;
  }

  return 0LL;
}

uint64_t sub_1000A13C4(unsigned __int8 *a1, double *a2)
{
  int v3 = *a1;
  if ((v3 - 5) <= 2)
  {
    uint64_t v6 = -1LL;
    sub_10005A088(a1, (double *)&v6);
    double v4 = *(double *)&v6;
LABEL_6:
    *a2 = v4;
    return 1LL;
  }

  if (v3 == 4)
  {
    LOBYTE(v6) = -86;
    sub_100059DD4((char *)a1, &v6);
    double v4 = 0.0;
    if ((_BYTE)v6) {
      double v4 = 1.0;
    }
    goto LABEL_6;
  }

  return 0LL;
}

void sub_1000A1478(void ***a1)
{
  unint64_t v2 = *a1;
  if (*v2)
  {
    sub_1000A14B8((uint64_t)v2, (void **)*v2);
    operator delete(**a1);
  }

void sub_1000A14B8(uint64_t a1, void **a2)
{
  double v4 = *(void ***)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      unsigned __int8 v5 = v4 - 6;
      uint64_t v6 = v4 - 3;
      sub_100004D64(&v6);
      uint64_t v6 = v5;
      sub_100004D64(&v6);
      double v4 = v5;
    }

    while (v5 != a2);
  }

  *(void *)(a1 + sub_100007004((uint64_t)v1 + 8) = a2;
}

void sub_1000A1550(uint64_t a1@<X1>, double *a2@<X2>, void *a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  double v10 = operator new(0xE0uLL);
  sub_1000A15D0((uint64_t)v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  sub_10000CCC8((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1000A15BC(_Unwind_Exception *a1)
{
}

uint64_t sub_1000A15D0(uint64_t a1, uint64_t a2, double *a3, void *a4, uint64_t a5)
{
  *(void *)(a1 + sub_100007004((uint64_t)v1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = off_10012B580;
  sub_10008CA44(a1 + 24, a2, a4, a5, *a3);
  *(void *)(a1 + 24) = off_10012B4F8;
  *(_BYTE *)(a1 + 184) = 0;
  *(void *)(a1 + 144) = 0LL;
  *(void *)(a1 + 15sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = 0LL;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 19sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = 0u;
  *(_OWORD *)(a1 + 20sub_100007004((uint64_t)v1 + 8) = 0u;
  return a1;
}

void sub_1000A1630(_Unwind_Exception *a1)
{
}

void sub_1000A1644(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10012B580;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000A1654(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10012B580;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_1000A1674(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t *sub_1000A1684(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4 = *a1;
  unsigned __int8 v5 = *(_DWORD **)(*a1 + 8);
  uint64_t v6 = (void *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    unsigned __int8 v8 = *(_DWORD **)v4;
    uint64_t v9 = ((uint64_t)v5 - *(void *)v4) >> 2;
    unint64_t v10 = v9 + 1;
    uint64_t v11 = *v6 - (void)v8;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = (char *)sub_100070298((uint64_t)v6, v12);
      unsigned __int8 v8 = *(_DWORD **)v4;
      unsigned __int8 v5 = *(_DWORD **)(v4 + 8);
    }

    else
    {
      uint64_t v13 = 0LL;
    }

    uint64_t v14 = &v13[4 * v9];
    uint64_t v15 = &v13[4 * v12];
    *(_DWORD *)uint64_t v14 = *a2;
    int v7 = v14 + 4;
    while (v5 != v8)
    {
      int v16 = *--v5;
      *((_DWORD *)v14 - sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = v16;
      v14 -= 4;
    }

    *(void *)uint64_t v4 = v14;
    *(void *)(v4 + sub_100007004((uint64_t)v1 + 8) = v7;
    *(void *)(v4 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }

  else
  {
    *unsigned __int8 v5 = *a2;
    int v7 = v5 + 1;
  }

  *(void *)(v4 + sub_100007004((uint64_t)v1 + 8) = v7;
  return a1;
}

__n128 sub_1000A1778(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &off_10012B5D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + sub_100007004((uint64_t)v1 + 8) = result;
  return result;
}

__n128 sub_1000A17B0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10012B5D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + sub_100007004((uint64_t)v1 + 8) = result;
  return result;
}

void *sub_1000A17D0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(*(void *)(v2 + 40) + 72LL);
  uint64_t v4 = sub_10008D0C4(v2);
  uint64_t v5 = *(void *)(a1 + 16);
  v8[0] = &off_10012B640;
  v8[1] = v5;
  uint64_t v9 = v8;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v3 + 80LL))(v3, v4, v8);
  __n128 result = v9;
  if (v9 == v8)
  {
    uint64_t v7 = 4LL;
    __n128 result = v8;
  }

  else
  {
    if (!v9) {
      return result;
    }
    uint64_t v7 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

uint64_t sub_1000A188C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void (**sub_1000A18C8())(std::__shared_weak_count *__hidden this, const std::type_info *)
{
}

void *sub_1000A18DC(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &off_10012B640;
  result[1] = v3;
  return result;
}

uint64_t sub_1000A1910(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10012B640;
  a2[1] = v2;
  return result;
}

void sub_1000A192C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v7 = 0xAAAAAAAAAAAAAA02LL;
  uint64_t v9 = 0LL;
  uint64_t v10 = 0LL;
  unsigned __int8 v8 = sub_10000BD28(&v10, &v9);
  sub_1000041AC((uint64_t)&v7);
  sub_100080EB8((uint64_t)&v7, a2);
  sub_100080EB8((uint64_t)&v7, a3);
  uint64_t v6 = *(void *)(*(void *)(a1 + 8) + 24LL);
  if (!v6) {
    sub_1000129CC();
  }
  (*(void (**)(uint64_t, unint64_t *))(*(void *)v6 + 48LL))(v6, &v7);
  sub_1000041AC((uint64_t)&v7);
  sub_10000425C(&v8, v7);
}

void sub_1000A1A0C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t sub_1000A1A34(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void (**sub_1000A1A70())(std::__shared_weak_count *__hidden this, const std::type_info *)
{
}

__n128 sub_1000A1A84(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &off_10012B6D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + sub_100007004((uint64_t)v1 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1000A1AC4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10012B6D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + sub_100007004((uint64_t)v1 + 8) = result;
  return result;
}

void sub_1000A1AEC(void *a1)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = *(void *)(*(void *)(v2 + 40) + 72LL);
  uint64_t v4 = sub_10008D0C4(v2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, void))(*(void *)v3 + 72LL))(&v8, v3, v4, a1[3]);
  uint64_t v5 = a1[1];
  sub_1000041AC((uint64_t)&v8);
  char v6 = *(_BYTE *)v5;
  *(_BYTE *)uint64_t v5 = v8;
  LOBYTE(vsub_100007004((uint64_t)v1 + 8) = v6;
  unint64_t v7 = *(uint64_t **)(v5 + 8);
  *(void *)(v5 + sub_100007004((uint64_t)v1 + 8) = v9;
  uint64_t v9 = v7;
  sub_1000041AC(v5);
  sub_1000041AC((uint64_t)&v8);
  sub_10000425C(&v9, v8);
}

uint64_t sub_1000A1BC0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void (**sub_1000A1BFC())(std::__shared_weak_count *__hidden this, const std::type_info *)
{
}

__n128 sub_1000A1C08@<Q0>(uint64_t a1@<X1>, unsigned __int8 **a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4 = a3;
  uint64_t v10 = a3;
  if (!sub_1000087E8((unsigned __int8 **)a1, a2))
  {
    do
    {
      uint64_t v8 = sub_100008924((unsigned __int8 **)a1);
      sub_1000A1CCC(&v10, (uint64_t)v8);
      sub_100018704((unsigned __int8 **)a1);
    }

    while (!sub_1000087E8((unsigned __int8 **)a1, a2));
    uint64_t v4 = v10;
  }

  *(void *)a4 = *(void *)a1;
  *(_OWORD *)(a4 + sub_100007004((uint64_t)v1 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a4 + 24) = result;
  *(void *)(a4 + 40) = v4;
  return result;
}

uint64_t **sub_1000A1CCC(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = (*a1)[1];
  if (v4 >= (*a1)[2])
  {
    uint64_t v5 = sub_100070EB8(*a1, a2);
  }

  else
  {
    sub_10000C3E4((*a1)[1], a2);
    uint64_t v5 = v4 + 16;
    v3[1] = v4 + 16;
  }

  v3[1] = v5;
  return a1;
}

void sub_1000A1D24(_Unwind_Exception *a1)
{
  *(void *)(v1 + sub_100007004((uint64_t)v1 + 8) = v2;
  _Unwind_Resume(a1);
}

__n128 sub_1000A1D34(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &off_10012B750;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + sub_100007004((uint64_t)v1 + 8) = result;
  return result;
}

__n128 sub_1000A1D6C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10012B750;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + sub_100007004((uint64_t)v1 + 8) = result;
  return result;
}

void sub_1000A1D8C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = sub_10008D0C4(v2);
  memset(v15, 170, sizeof(v15));
  sub_10009E498((void *)v2, v15);
  if (v15[0] == v15[1])
  {
    uint64_t v9 = (os_log_s *)qword_100131918;
    if (os_log_type_enabled((os_log_t)qword_100131918, OS_LOG_TYPE_ERROR))
    {
      sub_10008D06C(v2, &__p);
      if (v14 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      else {
        uint64_t v11 = *(void *)v3;
      }
      *(_DWORD *)std::string buf = 136446466;
      int v17 = p_p;
      __int16 v18 = 2080;
      uint64_t v19 = v11;
      _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "[%{public}sTransform] transform '%s' has no data to persist",  buf,  0x16u);
      if (v14 < 0) {
        operator delete(__p);
      }
    }
  }

  else
  {
    uint64_t v4 = *(void *)(*(void *)(v2 + 40) + 72LL);
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24LL))(v2);
    uint64_t v6 = *(unsigned int *)(v2 + 100);
    uint64_t v7 = *(unsigned int *)(v2 + 108);
    uint64_t v8 = *(unsigned int *)(v2 + 80);
    sub_100057B94((uint64_t)&__p, v15);
    **(_BYTE **)(a1 + 16) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void **))(*(void *)v4 + 152LL))( v4,  v5,  v3,  v6,  v7,  v8,  v2 + 88,  &__p);
    sub_1000041AC((uint64_t)&__p);
    sub_10000425C(&v13, __p);
  }

  std::string __p = v15;
  sub_100004D64((void ***)&__p);
}

void sub_1000A1F68( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, char a12)
{
  a9 = (void **)&a12;
  sub_100004D64(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A1F88(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

void (**sub_1000A1FC4())(std::__shared_weak_count *__hidden this, const std::type_info *)
{
}

uint64_t sub_1000A1FD0(uint64_t a1, uint64_t *a2)
{
  if (*(_BYTE *)a1)
  {
    if (*(_BYTE *)a1 != 2)
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
      uint64_t v10 = (char *)sub_10000528C((char *)a1);
      sub_100005064(&v13, v10);
      uint64_t v11 = std::string::insert(&v13, 0LL, "cannot use emplace_back() with ");
      __int128 v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      std::string::size_type cap = v11->__r_.__value_.__l.__cap_;
      __int128 v14 = v12;
      v11->__r_.__value_.__l.__size_ = 0LL;
      v11->__r_.__value_.__l.__cap_ = 0LL;
      v11->__r_.__value_.__r.__words[0] = 0LL;
      sub_100005128(311, (uint64_t)&v14, exception);
    }
  }

  else
  {
    *(_BYTE *)a1 = 2;
    uint64_t v4 = operator new(0x18uLL);
    v4[1] = 0LL;
    void v4[2] = 0LL;
    *uint64_t v4 = 0LL;
    *(void *)(a1 + sub_100007004((uint64_t)v1 + 8) = v4;
    sub_1000041AC(a1);
  }

  uint64_t v5 = *(uint64_t **)(a1 + 8);
  unint64_t v6 = v5[1];
  if (v6 >= v5[2])
  {
    uint64_t v7 = sub_1000A2190(v5, a2);
  }

  else
  {
    sub_100057B94(v5[1], a2);
    uint64_t v7 = v6 + 16;
    v5[1] = v6 + 16;
  }

  v5[1] = v7;
  return v7 - 16;
}

void sub_1000A2120( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  *(void *)(v21 + sub_100007004((uint64_t)v1 + 8) = v22;
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000A2190(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  else {
    unint64_t v9 = v5;
  }
  int v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_1000047F4(v7, v9);
  }
  else {
    uint64_t v10 = 0LL;
  }
  std::string v13 = v10;
  __int128 v14 = &v10[16 * v4];
  int v16 = &v10[16 * v9];
  sub_100057B94((uint64_t)v14, a2);
  uint64_t v15 = v14 + 16;
  sub_10000470C(a1, &v13);
  uint64_t v11 = a1[1];
  sub_100004A50((uint64_t)&v13);
  return v11;
}

void sub_1000A2294( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_1000A22B0(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &off_10012B7D0;
  result[1] = v3;
  return result;
}

uint64_t sub_1000A22E4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10012B7D0;
  a2[1] = v2;
  return result;
}

void sub_1000A2300(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!*(_BYTE *)(v1 + 160))
  {
    memset(v2, 0, sizeof(v2));
    sub_1000A23E0(v1 + 136, (uint64_t)v2);
    uint64_t v3 = (void **)v2;
    sub_1000A1478(&v3);
  }

void sub_1000A237C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a10;
  sub_1000A1478(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A2398(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

void (**sub_1000A23D4())(std::__shared_weak_count *__hidden this, const std::type_info *)
{
}

uint64_t sub_1000A23E0(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 24))
  {
    sub_1000A2458(a1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)a2 = 0LL;
    *(void *)(a2 + sub_100007004((uint64_t)v1 + 8) = 0LL;
    *(void *)(a2 + 16) = 0LL;
  }

  else
  {
    *(void *)a1 = 0LL;
    *(void *)(a1 + sub_100007004((uint64_t)v1 + 8) = 0LL;
    *(void *)(a1 + 16) = 0LL;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)a2 = 0LL;
    *(void *)(a2 + sub_100007004((uint64_t)v1 + 8) = 0LL;
    *(void *)(a2 + 16) = 0LL;
    *(_BYTE *)(a1 + 24) = 1;
  }

  return a1;
}

void sub_1000A2458(uint64_t a1)
{
  if (*(void *)a1)
  {
    sub_1000A14B8(a1, *(void ***)a1);
    operator delete(*(void **)a1);
    *(void *)a1 = 0LL;
    *(void *)(a1 + sub_100007004((uint64_t)v1 + 8) = 0LL;
    *(void *)(a1 + 16) = 0LL;
  }

uint64_t sub_1000A2490(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4) {
    return sub_1000A25D4((uint64_t)a1, a2);
  }
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  uint64_t v8 = v7 - *a1;
  unint64_t v9 = a2 + (v8 >> 4);
  if (v9 >> 60) {
    sub_1000046F8();
  }
  uint64_t v10 = v8 >> 4;
  uint64_t v11 = v5 - *a1;
  if (v11 >> 3 > v9) {
    unint64_t v9 = v11 >> 3;
  }
  else {
    unint64_t v12 = v9;
  }
  uint64_t v17 = v4;
  if (v12) {
    std::string v13 = (char *)sub_1000047F4(v4, v12);
  }
  else {
    std::string v13 = 0LL;
  }
  *(void *)&__int128 v15 = v13;
  *((void *)&v15 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = &v13[16 * v10];
  *(void *)&__int128 v16 = *((void *)&v15 + 1);
  *((void *)&v16 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = &v13[16 * v12];
  sub_1000A2630((uint64_t)&v15, a2);
  sub_10000470C(a1, &v15);
  return sub_100004A50((uint64_t)&v15);
}

void sub_1000A25C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1000A25D4(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void *)(result + 8);
  if (a2)
  {
    uint64_t v4 = v3 + 16 * a2;
    do
    {
      *(_BYTE *)uint64_t v3 = 0;
      *(void *)(v3 + sub_100007004((uint64_t)v1 + 8) = 0LL;
      sub_1000041AC(v3);
      __n128 result = sub_1000041AC(v3);
      v3 += 16LL;
    }

    while (v3 != v4);
    uint64_t v3 = v4;
  }

  *(void *)(v2 + sub_100007004((uint64_t)v1 + 8) = v3;
  return result;
}

uint64_t sub_1000A2630(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void *)(result + 16);
  if (a2)
  {
    uint64_t v4 = v3 + 16 * a2;
    do
    {
      *(_BYTE *)uint64_t v3 = 0;
      *(void *)(v3 + sub_100007004((uint64_t)v1 + 8) = 0LL;
      sub_1000041AC(v3);
      __n128 result = sub_1000041AC(v3);
      v3 += 16LL;
    }

    while (v3 != v4);
    uint64_t v3 = v4;
  }

  *(void *)(v2 + 16) = v3;
  return result;
}

uint64_t sub_1000A268C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = (void *)v6;
  if (v7 < a3)
  {
    unint64_t v9 = v7;
    uint64_t v8 = *(void **)(a1 + 8);
    do
    {
      *uint64_t v8 = 0LL;
      v8[1] = 0LL;
      v8[2] = 0LL;
      *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
      v8[2] = *(void *)(v9 + 16);
      *(void *)unint64_t v9 = 0LL;
      *(void *)(v9 + sub_100007004((uint64_t)v1 + 8) = 0LL;
      *(void *)(v9 + 16) = 0LL;
      void v8[3] = 0LL;
      v8[4] = 0LL;
      v8[5] = 0LL;
      *(_OWORD *)(v8 + 3) = *(_OWORD *)(v9 + 24);
      v8[5] = *(void *)(v9 + 40);
      *(void *)(v9 + 24) = 0LL;
      *(void *)(v9 + 3sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = 0LL;
      *(void *)(v9 + 40) = 0LL;
      v8 += 6;
      v9 += 48LL;
    }

    while (v9 < a3);
  }

  *(void *)(a1 + sub_100007004((uint64_t)v1 + 8) = v8;
  return sub_1000A29AC((uint64_t)&v11, a2, v7, v6);
}

__n128 sub_1000A2758(void *a1, uint64_t a2)
{
  uint64_t v4 = (void *)a1[2];
  if (v4 == (void *)a1[3])
  {
    unint64_t v5 = a1[1];
    if (v5 <= *a1)
    {
      if (v4 == (void *)*a1) {
        unint64_t v9 = 1LL;
      }
      else {
        unint64_t v9 = 0x5555555555555556LL * (((uint64_t)v4 - *a1) >> 4);
      }
      unint64_t v10 = v9 >> 2;
      uint64_t v11 = a1[4];
      uint64_t v19 = a1[4];
      *(void *)&__int128 v17 = sub_100038D10(v11, v9);
      *((void *)&v17 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = v17 + 48 * v10;
      *(void *)&__int128 v18 = *((void *)&v17 + 1);
      *((void *)&v18 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = v17 + 48 * v12;
      sub_1000A2AE4((uint64_t)&v17, a1[1], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - a1[1]) >> 4));
      __int128 v13 = v18;
      __int128 v14 = *(_OWORD *)a1;
      __int128 v15 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v17;
      *((_OWORD *)a1 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = v13;
      __int128 v17 = v14;
      __int128 v18 = v15;
      sub_1000A2F2C((uint64_t)&v17);
      uint64_t v4 = (void *)a1[2];
    }

    else
    {
      int64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 4);
      if (v6 >= -1) {
        uint64_t v7 = v6 + 1;
      }
      else {
        uint64_t v7 = v6 + 2;
      }
      sub_1000A2A50((uint64_t)&v17, v5, (uint64_t)v4, v5 - 48 * (v7 >> 1));
      uint64_t v4 = v8;
      a1[1] -= 48 * (v7 >> 1);
      a1[2] = v8;
    }
  }

  *uint64_t v4 = 0LL;
  v4[1] = 0LL;
  void v4[2] = 0LL;
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
  void v4[2] = *(void *)(a2 + 16);
  *(void *)a2 = 0LL;
  *(void *)(a2 + sub_100007004((uint64_t)v1 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  v4[3] = 0LL;
  v4[4] = 0LL;
  v4[5] = 0LL;
  __n128 result = *(__n128 *)(a2 + 24);
  *(__n128 *)(v4 + 3) = result;
  v4[5] = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0LL;
  *(void *)(a2 + 3sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = 0LL;
  *(void *)(a2 + 40) = 0LL;
  a1[2] += 48LL;
  return result;
}

void sub_1000A28E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1000A28FC(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  sub_1000A2B50((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_1000A2C40(v7, a3, a1[1], (void *)a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_1000A29AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = 0LL;
    do
    {
      uint64_t v8 = a3 + v7;
      uint64_t v9 = a4 + v7;
      sub_100058114((void **)(a4 + v7 - 48));
      *(_OWORD *)(v9 - 4sub_100007004((uint64_t)v1 + 8) = *(_OWORD *)(a3 + v7 - 48);
      *(void *)(v9 - 3sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = *(void *)(a3 + v7 - 32);
      *(void *)(v8 - 4sub_100007004((uint64_t)v1 + 8) = 0LL;
      *(void *)(v8 - 40) = 0LL;
      *(void *)(v8 - 3sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = 0LL;
      sub_100058114((void **)(a4 + v7 - 24));
      *(_OWORD *)(v9 - 24) = *(_OWORD *)(a3 + v7 - 24);
      *(void *)(v9 - sub_100007004((uint64_t)v1 + 8) = *(void *)(a3 + v7 - 8);
      *(void *)(v8 - 24) = 0LL;
      *(void *)(v8 - 16) = 0LL;
      *(void *)(v8 - sub_100007004((uint64_t)v1 + 8) = 0LL;
      v7 -= 48LL;
    }

    while (a3 + v7 != a2);
  }

  return a3;
}

uint64_t sub_1000A2A50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    sub_100058114((void **)a4);
    *(_OWORD *)a4 = *(_OWORD *)v5;
    *(void *)(a4 + 16) = *(void *)(v5 + 16);
    *(void *)uint64_t v5 = 0LL;
    *(void *)(v5 + sub_100007004((uint64_t)v1 + 8) = 0LL;
    *(void *)(v5 + 16) = 0LL;
    sub_100058114((void **)(a4 + 24));
    *(_OWORD *)(a4 + 24) = *(_OWORD *)(v5 + 24);
    *(void *)(a4 + 40) = *(void *)(v5 + 40);
    *(void *)(v5 + 24) = 0LL;
    *(void *)(v5 + 3sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = 0LL;
    *(void *)(v5 + 40) = 0LL;
    a4 += 48LL;
    v5 += 48LL;
  }

  while (v5 != v6);
  return v6;
}

uint64_t sub_1000A2AE4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void **)(result + 16);
  if (a3)
  {
    uint64_t v4 = &v3[6 * a3];
    do
    {
      void *v3 = 0LL;
      v3[1] = 0LL;
      void v3[2] = 0LL;
      *(_OWORD *)uint64_t v3 = *(_OWORD *)a2;
      void v3[2] = *(void *)(a2 + 16);
      *(void *)a2 = 0LL;
      *(void *)(a2 + sub_100007004((uint64_t)v1 + 8) = 0LL;
      *(void *)(a2 + 16) = 0LL;
      v3[3] = 0LL;
      v3[4] = 0LL;
      v3[5] = 0LL;
      *(_OWORD *)(v3 + 3) = *(_OWORD *)(a2 + 24);
      v3[5] = *(void *)(a2 + 40);
      *(void *)(a2 + 24) = 0LL;
      *(void *)(a2 + 3sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = 0LL;
      *(void *)(a2 + 40) = 0LL;
      v3 += 6;
      a2 += 48LL;
    }

    while (v3 != v4);
    uint64_t v3 = v4;
  }

  *(void *)(result + 16) = v3;
  return result;
}

uint64_t sub_1000A2B50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v12 = a6;
  *((void *)&v12 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = a7;
  __int128 v11 = v12;
  v13[0] = a1;
  v13[1] = &v11;
  _OWORD v13[2] = &v12;
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }

  else
  {
    do
    {
      *(void *)(v7 - 4sub_100007004((uint64_t)v1 + 8) = 0LL;
      *(void *)(v7 - 40) = 0LL;
      *(void *)(v7 - 3sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = 0LL;
      __int128 v8 = *(_OWORD *)(a3 - 48);
      a3 -= 48LL;
      *(_OWORD *)(v7 - 4sub_100007004((uint64_t)v1 + 8) = v8;
      *(void *)(v7 - 3sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = *(void *)(a3 + 16);
      *(void *)a3 = 0LL;
      *(void *)(a3 + sub_100007004((uint64_t)v1 + 8) = 0LL;
      *(void *)(a3 + 16) = 0LL;
      *(void *)(v7 - 24) = 0LL;
      *(void *)(v7 - 16) = 0LL;
      *(void *)(v7 - sub_100007004((uint64_t)v1 + 8) = 0LL;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 24);
      *(void *)(v7 - sub_100007004((uint64_t)v1 + 8) = *(void *)(a3 + 40);
      *(void *)(a3 + 24) = 0LL;
      *(void *)(a3 + 3sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = 0LL;
      *(void *)(a3 + 40) = 0LL;
      uint64_t v7 = *((void *)&v12 + 1) - 48LL;
      *((void *)&v12 + 1) -= 48LL;
    }

    while (a3 != a5);
    uint64_t v9 = v12;
  }

  LOBYTE(v14) = 1;
  sub_1000A2D18((uint64_t)v13);
  return v9;
}

void *sub_1000A2C40(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = a4;
  uint64_t v7 = a4;
  v8[0] = a1;
  v8[1] = &v6;
  v8[2] = &v7;
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  if (a2 != a3)
  {
    do
    {
      *uint64_t v4 = 0LL;
      v4[1] = 0LL;
      void v4[2] = 0LL;
      *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
      void v4[2] = *(void *)(a2 + 16);
      *(void *)a2 = 0LL;
      *(void *)(a2 + sub_100007004((uint64_t)v1 + 8) = 0LL;
      *(void *)(a2 + 16) = 0LL;
      v4[3] = 0LL;
      v4[4] = 0LL;
      v4[5] = 0LL;
      *(_OWORD *)(v4 + 3) = *(_OWORD *)(a2 + 24);
      v4[5] = *(void *)(a2 + 40);
      *(void *)(a2 + 24) = 0LL;
      *(void *)(a2 + 3sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = 0LL;
      *(void *)(a2 + 40) = 0LL;
      v4 += 6;
      a2 += 48LL;
    }

    while (a2 != a3);
    uint64_t v7 = v4;
  }

  LOBYTE(v9) = 1;
  sub_1000A2E60((uint64_t)v8);
  return v4;
}

uint64_t sub_1000A2D18(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_1000A2D4C((uint64_t *)a1);
  }
  return a1;
}

void sub_1000A2D4C(uint64_t *a1)
{
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v14 = v3;
  uint64_t v15 = v2;
  uint64_t v16 = v3;
  uint64_t v17 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v9 = v7;
  uint64_t v10 = v6;
  uint64_t v11 = v7;
  uint64_t v12 = v6;
  sub_1000A2DC0(v4, (uint64_t)v13, (uint64_t)v8);
}

void sub_1000A2DC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (char i = *(void ***)(a2 + 32); i != *(void ***)(a3 + 32); *(void *)(a2 + 32) = i)
  {
    uint64_t v6 = i + 3;
    sub_100004D64(&v6);
    uint64_t v6 = i;
    sub_100004D64(&v6);
    char i = (void **)(*(void *)(a2 + 32) + 48LL);
  }

uint64_t sub_1000A2E60(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_1000A2EA8( *(void *)a1,  **(void **)(a1 + 16),  **(void ****)(a1 + 16),  **(void **)(a1 + 8),  **(void ****)(a1 + 8));
  }
  return a1;
}

void sub_1000A2EA8(uint64_t a1, uint64_t a2, void **a3, uint64_t a4, void **a5)
{
  if (a3 != a5)
  {
    do
    {
      uint64_t v6 = a3 - 6;
      uint64_t v7 = a3 - 3;
      sub_100004D64(&v7);
      uint64_t v7 = v6;
      sub_100004D64(&v7);
      a3 = v6;
    }

    while (v6 != a5);
  }

uint64_t sub_1000A2F2C(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1000A2F60(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v5 = (void **)(i - 48);
    *(void *)(a1 + 16) = i - 48;
    uint64_t v6 = (void **)(i - 24);
    sub_100004D64(&v6);
    uint64_t v6 = v5;
    sub_100004D64(&v6);
  }

uint64_t sub_1000A2FF8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = a1;
  uint64_t v6 = a3;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v4 = a2;
  do
  {
    sub_1000A1CCC(&v6, v3);
    v3 += 16LL;
  }

  while (v3 != v4);
  return v4;
}

__n128 sub_1000A3088@<Q0>(uint64_t a1@<X1>, unsigned __int8 **a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4 = a3;
  uint64_t v10 = a3;
  if (!sub_10001855C((unsigned __int8 **)a1, a2))
  {
    do
    {
      __int128 v8 = sub_100018150((unsigned __int8 **)a1);
      sub_10008FBB4(&v10, (uint64_t)v8);
      sub_100018704((unsigned __int8 **)a1);
    }

    while (!sub_10001855C((unsigned __int8 **)a1, a2));
    uint64_t v4 = v10;
  }

  *(void *)a4 = *(void *)a1;
  *(_OWORD *)(a4 + sub_100007004((uint64_t)v1 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a4 + 24) = result;
  *(void *)(a4 + 40) = v4;
  return result;
}

__n128 sub_1000A3154(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &off_10012B850;
  *(_OWORD *)(v2 + sub_100007004((uint64_t)v1 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1000A3194(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10012B850;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + sub_100007004((uint64_t)v1 + 8) = result;
  return result;
}

void sub_1000A31BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned __int8 **)(a1 + 8);
  *(void *)&__int128 v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  v15[0] = v4;
  v15[1] = v4;
  __int128 v14 = v4;
  sub_10009DF4C(v3, a2, (uint64_t)&v14);
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  __int128 v13 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10000BA40((uint64_t)&v12, 0LL, 0LL, 0, 1);
  sub_100005064(__p, "emitting single statistic");
  __int128 v9 = *(_OWORD *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v6 = &off_10012B8D0;
  *((void *)v6 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = &v14;
  *((void *)v6 + sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = &v12;
  *(_OWORD *)(v6 + 24) = v9;
  *((void *)v6 + 5) = v5;
  *((void *)v6 + 6) = v3;
  uint64_t v17 = (void ***)v6;
  sub_10008CD68((uint64_t)v3, (uint64_t)__p, (uint64_t)v16);
  uint64_t v7 = v17;
  if (v17 == v16)
  {
    uint64_t v8 = 4LL;
    uint64_t v7 = v16;
  }

  else
  {
    if (!v17) {
      goto LABEL_6;
    }
    uint64_t v8 = 5LL;
  }

  ((void (*)(void))(*v7)[v8])();
LABEL_6:
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  sub_1000041AC((uint64_t)&v12);
  sub_10000425C(&v13, v12);
  v16[0] = (void **)v15 + 1;
  sub_100004D64(v16);
  v16[0] = (void **)&v14;
  sub_100004D64(v16);
}

void sub_1000A3324( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, unsigned __int8 a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_1000041AC((uint64_t)&a18);
  sub_10000425C((uint64_t **)&a19, a18);
  *(void *)(v23 - 7sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = &a23;
  sub_100004D64((void ***)(v23 - 72));
  *(void *)(v23 - 7sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = &a20;
  sub_100004D64((void ***)(v23 - 72));
  _Unwind_Resume(a1);
}

uint64_t sub_1000A3390(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void (**sub_1000A33CC())(std::__shared_weak_count *__hidden this, const std::type_info *)
{
}

__n128 sub_1000A33E0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v2 = &off_10012B8D0;
  *(_OWORD *)(v2 + sub_100007004((uint64_t)v1 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 sub_1000A3428(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10012B8D0;
  __n128 result = *(__n128 *)(a1 + 8);
  __int128 v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + sub_100007004((uint64_t)v1 + 8) = result;
  return result;
}

void sub_1000A3458(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  __int128 v3 = *(void **)(a1 + 8);
  uint64_t v4 = v3[1] - *v3;
  if (v4)
  {
    uint64_t v5 = 0LL;
    uint64_t v6 = 0LL;
    else {
      uint64_t v7 = v4 >> 4;
    }
    do
    {
      uint64_t v8 = **(void **)(a1 + 8) + v5;
      v26[0] = *(_BYTE *)v8;
      __int128 v27 = *(uint64_t **)(v8 + 8);
      sub_1000041AC(v8);
      *(_BYTE *)uint64_t v8 = 0;
      *(void *)(v8 + sub_100007004((uint64_t)v1 + 8) = 0LL;
      sub_1000041AC((uint64_t)v26);
      __int128 v9 = sub_100003F94(*(unsigned __int8 **)(a1 + 16), *(char **)(**(void **)(a1 + 24) + 8 * v6));
      sub_1000041AC((uint64_t)v26);
      char v10 = *(_BYTE *)v9;
      *(_BYTE *)__int128 v9 = v26[0];
      v26[0] = v10;
      char v11 = (uint64_t *)v9[1];
      v9[1] = (uint64_t)v27;
      __int128 v27 = v11;
      sub_1000041AC((uint64_t)v9);
      sub_1000041AC((uint64_t)v26);
      sub_10000425C(&v27, v26[0]);
      ++v6;
      v5 += 16LL;
    }

    while (v7 != v6);
    __int128 v3 = *(void **)(a1 + 8);
  }

  uint64_t v12 = v3[4] - v3[3];
  if (v12)
  {
    uint64_t v13 = 0LL;
    uint64_t v14 = 0LL;
    unint64_t v15 = v12 >> 4;
    if (v15 <= 1) {
      uint64_t v16 = 1LL;
    }
    else {
      uint64_t v16 = v15;
    }
    do
    {
      uint64_t v17 = *(void *)(*(void *)(a1 + 8) + 24LL) + v13;
      v24[0] = *(_BYTE *)v17;
      __int16 v25 = *(uint64_t **)(v17 + 8);
      sub_1000041AC(v17);
      *(_BYTE *)uint64_t v17 = 0;
      *(void *)(v17 + sub_100007004((uint64_t)v1 + 8) = 0LL;
      sub_1000041AC((uint64_t)v24);
      __int128 v18 = sub_100003F94(*(unsigned __int8 **)(a1 + 16), *(char **)(**(void **)(a1 + 32) + 8 * v14));
      sub_1000041AC((uint64_t)v24);
      char v19 = *(_BYTE *)v18;
      *(_BYTE *)__int128 v18 = v24[0];
      v24[0] = v19;
      unint64_t v20 = (uint64_t *)v18[1];
      v18[1] = (uint64_t)v25;
      __int16 v25 = v20;
      sub_1000041AC((uint64_t)v18);
      sub_1000041AC((uint64_t)v24);
      sub_10000425C(&v25, v24[0]);
      ++v14;
      v13 += 16LL;
    }

    while (v16 != v14);
  }

  uint64_t v21 = *(void *)(a1 + 40);
  int v22 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24LL))(v2);
  sub_10008E8C8(v2, v22, *(void *)(a1 + 16), (uint64_t)v28);
  uint64_t v23 = *(void *)(v21 + 24);
  if (!v23) {
    sub_1000129CC();
  }
  (*(void (**)(uint64_t, _BYTE *))(*(void *)v23 + 48LL))(v23, v28);
  if (v36 && v35 < 0) {
    operator delete(v34[3]);
  }
  sub_1000041AC((uint64_t)v33);
  sub_10000425C(v34, v33[0]);
  if (v32 < 0) {
    operator delete(v31);
  }
  if (v30 < 0) {
    operator delete(v29);
  }
}

void sub_1000A36F0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, void *__p, uint64_t a26, int a27, __int16 a28, char a29, char a30, char a31)
{
  if (a31)
  {
    if (a30 < 0) {
      operator delete(__p);
    }
  }

  sub_1000DF09C((uint64_t)&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A3754(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void (**sub_1000A3790())(std::__shared_weak_count *__hidden this, const std::type_info *)
{
}

void sub_1000A379C(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0LL;
  a3->__r_.__value_.__l.__size_ = 0LL;
  a3->__r_.__value_.__l.__cap_ = 0LL;
  std::string::reserve(a3, 2 * a2);
  if (a2 >= 1)
  {
    uint64_t v6 = &a1[a2];
    do
    {
      std::string::push_back(a3, a0123456789abcd[(unint64_t)*a1 >> 4]);
      std::string::push_back(a3, a0123456789abcd[*a1++ & 0xF]);
    }

    while (a1 < v6);
  }

void sub_1000A3824(_Unwind_Exception *exception_object)
{
}

unint64_t sub_1000A3844()
{
  int v26 = -1431655766;
  *(void *)&__int128 v0 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v0 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v24 = v0;
  __int128 v25 = v0;
  __int128 v22 = v0;
  __int128 v23 = v0;
  __int128 v20 = v0;
  __int128 v21 = v0;
  __int128 v18 = v0;
  __int128 v19 = v0;
  __int128 v16 = v0;
  __int128 v17 = v0;
  __int128 v14 = v0;
  __int128 v15 = v0;
  __int128 v12 = v0;
  __int128 v13 = v0;
  __int128 v11 = v0;
  __int128 v9 = v0;
  __int128 v10 = v0;
  __int128 v7 = v0;
  __int128 v8 = v0;
  __int128 v5 = v0;
  __int128 v6 = v0;
  *(_OWORD *)task_info_out = v0;
  __int128 v4 = v0;
  mach_msg_type_number_t task_info_outCnt = 93;
  if (task_info(mach_task_self_, 0x16u, task_info_out, &task_info_outCnt)) {
    return -1LL;
  }
  else {
    return ((*((void *)&v13 + 1) + (v13 < 0 ? 0x3FFuLL : 0)) << 22) & 0xFFFFFFFF00000000LL | ((unint64_t)v12 >> 10);
  }
}

void sub_1000A391C(int a1)
{
  if (sub_10006F0AC())
  {
    unint64_t v2 = sub_1000A3844();
    int v3 = v2;
    unint64_t v4 = HIDWORD(v2);
    __int128 v5 = (os_log_s *)qword_100131958;
    if (a1)
    {
      if (os_log_type_enabled((os_log_t)qword_100131958, OS_LOG_TYPE_DEBUG)) {
        sub_1000DF13C(v3, v4, v5);
      }
    }

    else if (os_log_type_enabled((os_log_t)qword_100131958, OS_LOG_TYPE_INFO))
    {
      v6[0] = 67109376;
      v6[1] = v3;
      __int16 v7 = 1024;
      int v8 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "[MemoryUtils] Memory Footprint: {Current: %d, Peak: %d}",  (uint8_t *)v6,  0xEu);
    }
  }

uint64_t sub_1000A3A0C()
{
  return 6000LL;
}

void sub_1000A3A14(xpc_object_t *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0LL;
  *(_BYTE *)a2 = 0;
  sub_1000041AC((uint64_t)a2);
  sub_1000041AC((uint64_t)a2);
  xpc_type_t type = xpc_get_type(*a1);
  if (type == (xpc_type_t)&_xpc_type_dictionary)
  {
    uint64_t v8 = sub_10000BA40((uint64_t)v65, 0LL, 0LL, 0, 1);
    sub_1000041AC(v8);
    unsigned __int8 v9 = *(_BYTE *)a2;
    *(_BYTE *)a2 = v65[0];
    v65[0] = v9;
    __int128 v10 = (uint64_t *)a2[1];
    a2[1] = v66;
    unint64_t v66 = v10;
    sub_1000041AC((uint64_t)a2);
    sub_1000041AC((uint64_t)v65);
    sub_10000425C(&v66, v65[0]);
    xpc_object_t v11 = *a1;
    applier[0] = _NSConcreteStackBlock;
    applier[1] = 0x40000000LL;
    applier[2] = sub_1000A42C0;
    applier[3] = &unk_10012B950;
    applier[4] = a2;
    xpc_dictionary_apply(v11, applier);
    return;
  }

  if (type == (xpc_type_t)&_xpc_type_string)
  {
    *(void *)uuid_string_t out = xpc_string_get_string_ptr(*a1);
    uint64_t v12 = sub_10000E89C((uint64_t)v62, (char **)out);
    sub_1000041AC(v12);
    unsigned __int8 v13 = *(_BYTE *)a2;
    *(_BYTE *)a2 = v62[0];
    v62[0] = v13;
    __int128 v14 = (uint64_t *)a2[1];
    a2[1] = v63;
    int v63 = v14;
    sub_1000041AC((uint64_t)a2);
    sub_1000041AC((uint64_t)v62);
    sub_10000425C(&v63, v62[0]);
    sub_100006200((uint64_t)a2, -1, 0x20u, 0LL, 0, &__p);
    if ((v61 & 0x80000000) == 0) {
      return;
    }
    __int128 v15 = __p;
    goto LABEL_15;
  }

  if (type == (xpc_type_t)&_xpc_type_int64)
  {
    int64_t value = xpc_int64_get_value(*a1);
    __int128 v17 = (uint64_t **)&v59;
    v58[0] = 5;
    int64_t v59 = value;
    sub_1000041AC((uint64_t)v58);
    sub_1000041AC((uint64_t)v58);
    sub_1000041AC((uint64_t)v58);
    unsigned __int8 v18 = *(_BYTE *)a2;
    *(_BYTE *)a2 = v58[0];
    v58[0] = v18;
    int64_t v19 = a2[1];
    a2[1] = v59;
    int64_t v59 = v19;
    sub_1000041AC((uint64_t)a2);
    sub_1000041AC((uint64_t)v58);
    int v20 = v58[0];
    goto LABEL_17;
  }

  if (type != (xpc_type_t)&_xpc_type_array)
  {
    if (type != (xpc_type_t)&_xpc_type_data)
    {
      if (type == (xpc_type_t)&_xpc_type_BOOL)
      {
        BOOL v34 = xpc_BOOL_get_value(*a1);
        __int128 v17 = (uint64_t **)&v53;
        v52[0] = 4;
        BOOL v53 = v34;
        sub_1000041AC((uint64_t)v52);
        sub_1000041AC((uint64_t)v52);
        sub_1000041AC((uint64_t)v52);
        unsigned __int8 v35 = *(_BYTE *)a2;
        *(_BYTE *)a2 = v52[0];
        v52[0] = v35;
        uint64_t v36 = a2[1];
        a2[1] = v53;
        BOOL v53 = v36;
        sub_1000041AC((uint64_t)a2);
        sub_1000041AC((uint64_t)v52);
        int v20 = v52[0];
      }

      else
      {
        if (type != (xpc_type_t)&_xpc_type_uint64)
        {
          if (type == (xpc_type_t)&_xpc_type_null)
          {
            v48[0] = 0;
            uint64_t v49 = 0LL;
            sub_1000041AC((uint64_t)v48);
            sub_1000041AC((uint64_t)v48);
            sub_1000A426C((uint64_t)a2, (uint64_t)v48);
            __int16 v7 = (uint64_t **)v48;
          }

          else if (type == (xpc_type_t)&_xpc_type_double)
          {
            *(void *)uuid_string_t out = xpc_double_get_value(*a1);
            sub_1000A4458((uint64_t)v47, (uint64_t *)out);
            sub_1000A426C((uint64_t)a2, (uint64_t)v47);
            __int16 v7 = (uint64_t **)v47;
          }

          else
          {
            if (type != (xpc_type_t)&_xpc_type_uuid)
            {
              memset(out, 170, 24);
              name = (char *)xpc_type_get_name(type);
              sub_100005064(out, name);
              exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>(&v44, "XPC type (", out);
              unint64_t v42 = std::string::append(&v44, ") cannot be converted and is invalid");
              __int128 v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
              v45.__r_.__value_.__l.__cap_ = v42->__r_.__value_.__l.__cap_;
              *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v43;
              v42->__r_.__value_.__l.__size_ = 0LL;
              v42->__r_.__value_.__l.__cap_ = 0LL;
              v42->__r_.__value_.__r.__words[0] = 0LL;
              std::logic_error::logic_error(exception, &v45);
            }

            *(void *)&out[29] = 0xAAAAAAAAAAAAAAAALL;
            *(void *)&__int128 v5 = 0xAAAAAAAAAAAAAAAALL;
            *((void *)&v5 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
            *(_OWORD *)uuid_string_t out = v5;
            *(_OWORD *)&out[16] = v5;
            bytes = xpc_uuid_get_bytes(*a1);
            uuid_unparse_lower(bytes, out);
            sub_10006EEB0((uint64_t)v46, out);
            sub_1000A426C((uint64_t)a2, (uint64_t)v46);
            __int16 v7 = (uint64_t **)v46;
          }

          sub_10000417C(v7);
          return;
        }

        uint64_t v37 = xpc_uint64_get_value(*a1);
        __int128 v17 = (uint64_t **)&v51;
        v50[0] = 6;
        uint64_t v51 = v37;
        sub_1000041AC((uint64_t)v50);
        sub_1000041AC((uint64_t)v50);
        sub_1000041AC((uint64_t)v50);
        unsigned __int8 v38 = *(_BYTE *)a2;
        *(_BYTE *)a2 = v50[0];
        v50[0] = v38;
        uint64_t v39 = a2[1];
        a2[1] = v51;
        uint64_t v51 = v39;
        sub_1000041AC((uint64_t)a2);
        sub_1000041AC((uint64_t)v50);
        int v20 = v50[0];
      }

void sub_1000A4154( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v23 & 1) == 0)
    {
LABEL_8:
      sub_10000417C(v21);
      _Unwind_Resume(a1);
    }
  }

  else if (!v23)
  {
    goto LABEL_8;
  }

  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t sub_1000A426C(uint64_t a1, uint64_t a2)
{
  char v4 = *(_BYTE *)a1;
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)a2 = v4;
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + sub_100007004((uint64_t)v1 + 8) = *(void *)(a2 + 8);
  *(void *)(a2 + sub_100007004((uint64_t)v1 + 8) = v5;
  sub_1000041AC(a1);
  return a1;
}

uint64_t sub_1000A42C0(uint64_t a1, char *a2, xpc_object_t a3)
{
  __int128 v15 = a2;
  sub_10000E89C((uint64_t)&v11, &v15);
  sub_100006200((uint64_t)&v11, -1, 0x20u, 0LL, 0, &__p);
  if (v14 < 0) {
    operator delete(__p);
  }
  sub_1000041AC((uint64_t)&v11);
  sub_10000425C(&v12, v11);
  xpc_object_t v11 = a3;
  if (a3)
  {
    xpc_retain(a3);
  }

  else
  {
    a3 = xpc_null_create();
    xpc_object_t v11 = a3;
  }

  sub_1000A3A14(&v9, &v11);
  uint64_t v5 = sub_100003F94(*(unsigned __int8 **)(a1 + 32), v15);
  sub_1000041AC((uint64_t)&v9);
  char v6 = *(_BYTE *)v5;
  *(_BYTE *)uint64_t v5 = v9;
  LOBYTE(v9) = v6;
  __int16 v7 = (uint64_t *)v5[1];
  v5[1] = (uint64_t)v10;
  __int128 v10 = v7;
  sub_1000041AC((uint64_t)v5);
  sub_1000041AC((uint64_t)&v9);
  sub_10000425C(&v10, v9);
  xpc_release(a3);
  return 1LL;
}

void sub_1000A4404( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  if (a2) {
    sub_1000045D0(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000A4458(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + sub_100007004((uint64_t)v1 + 8) = 0LL;
  uint64_t v3 = *a2;
  *(_BYTE *)a1 = 7;
  *(void *)(a1 + sub_100007004((uint64_t)v1 + 8) = v3;
  sub_1000041AC(a1);
  sub_1000041AC(a1);
  return a1;
}

void sub_1000A4498(xpc_object_t *a1@<X0>, void *a2@<X8>)
{
}

void sub_1000A44B8(void *a1)
{
}

id AnalyticsXPCSubscriptionManager.__allocating_init()()
{
  return [objc_allocWithZone(v0) init];
}

id AnalyticsXPCSubscriptionManager.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AnalyticsXPCSubscriptionManager();
  return objc_msgSendSuper2(&v2, "init");
}

id AnalyticsXPCSubscriptionManager.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AnalyticsXPCSubscriptionManager();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000A45E4(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_1000A46B4(v12, 0LL, 0LL, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_1000A5354((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }

  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_1000A5354((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }

    swift_bridgeObjectRetain(a2);
  }

  sub_1000A5334(v12);
  return v7;
}

uint64_t sub_1000A46B4(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000LL) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0LL, HIBYTE(a6) & 0xF, __dst, a3);
            uint64_t result = 0LL;
            *a1 = (uint64_t)__dst;
            return result;
          }

          goto LABEL_17;
        }
      }
    }

uint64_t sub_1000A486C(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_1000A4900(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1000A4AD8(0, *(void *)(v2 + 16) + 1LL, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_1000A4AD8(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_1000A4900(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000LL) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v4 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v4)
  {
    while (1)
    {
      uint64_t v5 = sub_1000A4A74(v4, 0LL);
      if (v4 < 0) {
        break;
      }
      uint64_t v6 = v5;
      uint64_t v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0) {
        goto LABEL_14;
      }
      if (v7 == v4) {
        return v6;
      }
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "invalid Collection: less than 'count' elements in collection",  60LL,  2LL,  "Swift/ContiguousArrayBuffer.swift",  33LL,  v10,  1122LL,  0);
      __break(1u);
LABEL_10:
      uint64_t v4 = String.UTF8View._foreignCount()();
      if (!v4) {
        return &_swiftEmptyArrayStorage;
      }
    }

    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableBufferPointer with negative count",  46LL,  2LL,  "Swift/UnsafeBufferPointer.swift",  31LL,  v10,  71LL,  0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Insufficient space allocated to copy string contents",  52LL,  2LL,  "Swift/StringUTF8View.swift",  26LL,  v10,  430LL,  0);
    __break(1u);
  }

  else
  {
    return &_swiftEmptyArrayStorage;
  }

  return result;
}

void *sub_1000A4A74(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v4 = sub_1000A5390(&qword_100131420);
  uint64_t v5 = (void *)swift_allocObject(v4, v2 + 32, 7LL);
  size_t v6 = j__malloc_size(v5);
  v5[2] = a1;
  void v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_1000A4AD8(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_1000A5390(&qword_100131420);
    xpc_object_t v11 = (char *)swift_allocObject(v10, v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = v8;
    *((void *)v11 + 3) = 2 * v12 - 64;
  }

  else
  {
    xpc_object_t v11 = (char *)&_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  int v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8]) {
      memmove(v13, v14, v8);
    }
    *((void *)a4 + sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }

unint64_t sub_1000A4C24(uint64_t a1, uint64_t a2)
{
  Swift::Int v5 = Hasher._finalize()();
  return sub_1000A4C88(a1, a2, v5);
}

unint64_t sub_1000A4C88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }

      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }

  return v6;
}

uint64_t _s10analyticsd31AnalyticsXPCSubscriptionManagerC26subscribeToUserDataChanges9argumentsySo5NSSetC_tFZ_0( uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = ((uint64_t (*)(void))__chkstk_darwin)();
  unint64_t v6 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v4);
  int v63 = (char *)&v61 - v8;
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v61 - v9;
  type metadata accessor for AnalyticsXPCQueryClient();
  BOOL v11 = (os_log_s *)AnalyticsXPCSubscriptionManager.__allocating_init()();
  uint64_t v72 = 0LL;
  uint64_t result = static Set._conditionallyBridgeFromObjectiveC(_:result:)( a1,  &v72,  &type metadata for String,  &protocol witness table for String);
  uint64_t v14 = v72;
  unint64_t v66 = v11;
  if (!v72)
  {
    uint64_t v55 = sub_1000A5440();
    uint64_t v56 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v55, v2);
    char v57 = (os_log_s *)Logger.logObject.getter(v56);
    os_log_type_t v58 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v57, v58))
    {
      int64_t v59 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)int64_t v59 = 0;
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "Invalid parameter type. Expected a set of strings.", v59, 2u);
      swift_slowDealloc(v59, -1LL, -1LL);
      char v60 = v66;
    }

    else
    {
      char v60 = v57;
      char v57 = v66;
    }

    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }

  uint64_t v62 = v10;
  int64_t v15 = 0LL;
  uint64_t v16 = *(void *)(v72 + 56);
  uint64_t v67 = v72 + 56;
  uint64_t v17 = 1LL << *(_BYTE *)(v72 + 32);
  uint64_t v18 = -1LL;
  if (v17 < 64) {
    uint64_t v18 = ~(-1LL << v17);
  }
  unint64_t v19 = v18 & v16;
  int64_t v69 = (unint64_t)(v17 + 63) >> 6;
  uint64_t v70 = OBJC_IVAR____TtC10analyticsd23AnalyticsXPCQueryClient_keyMapping;
  *(void *)&__int128 v13 = 136315138LL;
  __int128 v65 = v13;
  BOOL v64 = (char *)&type metadata for Any + 8;
  int v20 = v63;
  uint64_t v68 = v72;
  while (1)
  {
    if (v19)
    {
      unint64_t v21 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      int64_t v71 = v15;
      unint64_t v22 = v21 | (v15 << 6);
      goto LABEL_23;
    }

    int64_t v23 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
      __break(1u);
      goto LABEL_41;
    }

    if (v23 >= v69) {
      goto LABEL_34;
    }
    unint64_t v24 = *(void *)(v67 + 8 * v23);
    int64_t v25 = v15 + 1;
    if (!v24)
    {
      int64_t v25 = v15 + 2;
      if (v15 + 2 >= v69) {
        goto LABEL_34;
      }
      unint64_t v24 = *(void *)(v67 + 8 * v25);
      if (!v24)
      {
        int64_t v25 = v15 + 3;
        if (v15 + 3 >= v69) {
          goto LABEL_34;
        }
        unint64_t v24 = *(void *)(v67 + 8 * v25);
        if (!v24) {
          break;
        }
      }
    }

uint64_t type metadata accessor for AnalyticsXPCSubscriptionManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC10analyticsd31AnalyticsXPCSubscriptionManager);
}

uint64_t sub_1000A5334(void *a1)
{
  uint64_t v1 = *(void *)(a1[3] - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release(*a1);
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1000A5354(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1000A5390(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

uint64_t sub_1000A53D4()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1000A64FC(v0, qword_100131B58);
  sub_1000A5488(v0, (uint64_t)qword_100131B58);
  return Logger.init(subsystem:category:)(0xD00000000000001FLL, 0x80000001000E9E20LL, 6516856LL, 0xE300000000000000LL);
}

uint64_t sub_1000A5440()
{
  if (qword_100131AB8 != -1) {
    swift_once(&qword_100131AB8, sub_1000A53D4);
  }
  uint64_t v0 = type metadata accessor for Logger(0LL);
  return sub_1000A5488(v0, (uint64_t)qword_100131B58);
}

uint64_t sub_1000A5488(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(void *)(a1 - 8) + 82LL) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

unint64_t variable initialization expression of AnalyticsXPCQueryClient.keyMapping()
{
  uint64_t v0 = sub_1000A5390(&qword_100131380);
  uint64_t inited = swift_initStackObject(v0, &v3);
  *(_OWORD *)(inited + 16) = xmmword_1000F94A0;
  *(void *)(inited + 3sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = 0x7474616D79657267LL;
  *(void *)(inited + 40) = 0xEA00000000007265LL;
  *(_OWORD *)(inited + 4sub_100007004((uint64_t)v1 + 8) = xmmword_1000F94B0;
  *(void *)(inited + 64) = 0x80000001000E9D40LL;
  *(void *)(inited + 7sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = 1LL;
  return sub_1000A551C(inited);
}

unint64_t sub_1000A551C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_1000A5390(&qword_100131428);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  unint64_t v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v7 = *(v6 - 2);
    uint64_t v8 = *(v6 - 1);
    uint64_t v9 = *v6;
    swift_bridgeObjectRetain(v8);
    unint64_t result = sub_1000A4C24(v7, v8);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v12 = (uint64_t *)(v4[6] + 16 * result);
    *uint64_t v12 = v7;
    v12[1] = v8;
    *(void *)(v4[7] + 8 * result) = v9;
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v6 += 3;
    void v4[2] = v15;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

id AnalyticsXPCQueryClient.init()()
{
  uint64_t v1 = sub_1000A5390(&qword_100131380);
  uint64_t inited = swift_initStackObject(v1, v8);
  *(_OWORD *)(inited + 16) = xmmword_1000F94A0;
  uint64_t v3 = OBJC_IVAR____TtC10analyticsd23AnalyticsXPCQueryClient_keyMapping;
  *(void *)(inited + 3sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = 0x7474616D79657267LL;
  *(void *)(inited + 40) = 0xEA00000000007265LL;
  *(_OWORD *)(inited + 4sub_100007004((uint64_t)v1 + 8) = xmmword_1000F94B0;
  *(void *)(inited + 64) = 0x80000001000E9D40LL;
  *(void *)(inited + 7sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = 1LL;
  uint64_t v4 = v0;
  *(void *)&v0[v3] = sub_1000A551C(inited);
  *(void *)&v4[OBJC_IVAR____TtC10analyticsd23AnalyticsXPCQueryClient__connection] = xpc_connection_create_mach_service( "com.apple.analyticsagent",  0LL,  0LL);

  v7.receiver = v4;
  v7.super_class = (Class)type metadata accessor for AnalyticsXPCQueryClient();
  id v5 = objc_msgSendSuper2(&v7, "init");
  sub_1000A5830();

  return v5;
}

uint64_t type metadata accessor for AnalyticsXPCQueryClient()
{
  return objc_opt_self(&OBJC_CLASS____TtC10analyticsd23AnalyticsXPCQueryClient);
}

id AnalyticsXPCQueryClient.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AnalyticsXPCQueryClient();
  return objc_msgSendSuper2(&v2, "dealloc");
}

void sub_1000A5830()
{
  int v13 = 0;
  uint64_t foreground_uid = xpc_user_sessions_get_foreground_uid(&v13);
  if (!v13)
  {
    xpc_connection_set_target_user_session_uid( *(void *)(v0 + OBJC_IVAR____TtC10analyticsd23AnalyticsXPCQueryClient__connection),  foreground_uid);
LABEL_10:
    uint64_t v7 = OBJC_IVAR____TtC10analyticsd23AnalyticsXPCQueryClient__connection;
    uint64_t v8 = *(void *)(v0 + OBJC_IVAR____TtC10analyticsd23AnalyticsXPCQueryClient__connection);
    aBlock[4] = sub_1000A5A34;
    aBlock[5] = 0LL;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1000A5D1C;
    aBlock[3] = &unk_10012B9E8;
    uint64_t v9 = _Block_copy(aBlock);
    uint64_t v10 = (_xpc_connection_s *)swift_unknownObjectRetain(v8);
    xpc_connection_set_event_handler(v10, v9);
    _Block_release(v9);
    swift_unknownObjectRelease(v8, v11);
    xpc_connection_activate(*(xpc_connection_t *)(v0 + v7));
    return;
  }

  if (qword_100131AB8 != -1) {
    swift_once(&qword_100131AB8, sub_1000A53D4);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = sub_1000A5488(v2, (uint64_t)qword_100131B58);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    unint64_t v6 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)unint64_t v6 = 67109120;
    swift_beginAccess(&v13, aBlock, 0LL, 0LL);
    int v12 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v6 + 4, v6 + 8);
    _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "Cannot set target user session for remoted connection because we failed to get the foreground user's uid: %d",  v6,  8u);
    swift_slowDealloc(v6, -1LL, -1LL);
  }
}

void sub_1000A5A34(void *a1)
{
  xpc_type_t type = xpc_get_type(a1);
  if (type == (xpc_type_t)XPC_TYPE_ERROR.getter())
  {
    if (qword_100131AB8 != -1) {
      swift_once(&qword_100131AB8, sub_1000A53D4);
    }
    uint64_t v14 = type metadata accessor for Logger(0LL);
    sub_1000A5488(v14, (uint64_t)qword_100131B58);
    uint64_t v15 = swift_unknownObjectRetain_n(a1, 2LL);
    os_log_type_t v5 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v8 = swift_slowAlloc(32LL, -1LL);
      uint64_t v21 = v8;
      *(_DWORD *)uint64_t v7 = 136446210;
      uint64_t ObjectType = swift_getObjectType(a1);
      uint64_t v20 = (uint64_t)a1;
      swift_unknownObjectRetain(a1);
      uint64_t v17 = String.init<A>(describing:)(&v20, ObjectType);
      unint64_t v19 = v18;
      uint64_t v20 = sub_1000A45E4(v17, v18, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v7 + 4, v7 + 12);
      swift_unknownObjectRelease_n(a1, 2LL);
      swift_bridgeObjectRelease(v19);
      int v13 = "XPC error: %{public}s";
      goto LABEL_10;
    }
  }

  else
  {
    if (qword_100131AB8 != -1) {
      swift_once(&qword_100131AB8, sub_1000A53D4);
    }
    uint64_t v3 = type metadata accessor for Logger(0LL);
    sub_1000A5488(v3, (uint64_t)qword_100131B58);
    uint64_t v4 = swift_unknownObjectRetain_n(a1, 2LL);
    os_log_type_t v5 = (os_log_s *)Logger.logObject.getter(v4);
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v8 = swift_slowAlloc(32LL, -1LL);
      uint64_t v21 = v8;
      *(_DWORD *)uint64_t v7 = 136446210;
      uint64_t v9 = swift_getObjectType(a1);
      uint64_t v20 = (uint64_t)a1;
      swift_unknownObjectRetain(a1);
      uint64_t v10 = String.init<A>(describing:)(&v20, v9);
      unint64_t v12 = v11;
      uint64_t v20 = sub_1000A45E4(v10, v11, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v7 + 4, v7 + 12);
      swift_unknownObjectRelease_n(a1, 2LL);
      swift_bridgeObjectRelease(v12);
      int v13 = "Unexpected XPC: %{public}s";
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v5, v6, v13, v7, 0xCu);
      swift_arrayDestroy(v8, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v8, -1LL, -1LL);
      swift_slowDealloc(v7, -1LL, -1LL);

      return;
    }
  }

  swift_unknownObjectRelease_n(a1, 2LL);
}

uint64_t sub_1000A5D1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  uint64_t v5 = swift_unknownObjectRetain(a2);
  v4(v5);
  swift_release(v3);
  return swift_unknownObjectRelease(a2, v6);
}

xpc_object_t sub_1000A5D64(int64_t a1)
{
  xpc_object_t v3 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_dictionary_set_int64(v3, "analytics_user_data", a1);
  xpc_object_t v4 = xpc_connection_send_message_with_reply_sync( *(xpc_connection_t *)(v1 + OBJC_IVAR____TtC10analyticsd23AnalyticsXPCQueryClient__connection),  v3);
  xpc_type_t type = xpc_get_type(v4);
  p_info = &OBJC_METACLASS___TrialStateRelay.info;
  if (type == (xpc_type_t)XPC_TYPE_ERROR.getter())
  {
    if (qword_100131AB8 != -1) {
      swift_once(&qword_100131AB8, sub_1000A53D4);
    }
    uint64_t v7 = type metadata accessor for Logger(0LL);
    sub_1000A5488(v7, (uint64_t)qword_100131B58);
    uint64_t v8 = swift_unknownObjectRetain_n(v4, 2LL);
    uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      unint64_t v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v12 = swift_slowAlloc(32LL, -1LL);
      uint64_t v27 = v12;
      *(_DWORD *)unint64_t v11 = 136315138;
      id v13 = [v4 description];
      uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v16 = v15;

      uint64_t v26 = sub_1000A45E4(v14, v16, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v11 + 4, v11 + 12);
      swift_unknownObjectRelease_n(v4, 2LL);
      swift_bridgeObjectRelease(v16);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Received an XPC error reply: %s", v11, 0xCu);
      swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1LL, -1LL);
      uint64_t v17 = v11;
      p_info = (__objc2_class_ro **)(&OBJC_METACLASS___TrialStateRelay + 32);
      swift_slowDealloc(v17, -1LL, -1LL);
    }

    else
    {

      swift_unknownObjectRelease_n(v4, 2LL);
    }
  }

  xpc_type_t v18 = xpc_get_type(v4);
  if (v18 != (xpc_type_t)XPC_TYPE_DICTIONARY.getter())
  {
    if (p_info[343] != (__objc2_class_ro *)-1LL) {
      swift_once(&qword_100131AB8, sub_1000A53D4);
    }
    uint64_t v20 = type metadata accessor for Logger(0LL);
    uint64_t v21 = sub_1000A5488(v20, (uint64_t)qword_100131B58);
    unint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      unint64_t v24 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Got unexpected response from analyticsagent", v24, 2u);
      swift_slowDealloc(v24, -1LL, -1LL);
    }
  }

  swift_unknownObjectRelease(v3, v19);
  return v4;
}

xpc_object_t AnalyticsQueryValuesFor(arguments:)(uint64_t a1)
{
  uint64_t v2 = [objc_allocWithZone((Class)type metadata accessor for AnalyticsXPCQueryClient()) init];
  xpc_object_t xdict = xpc_dictionary_create_empty();
  uint64_t v45 = 0LL;
  static Set._conditionallyBridgeFromObjectiveC(_:result:)( a1,  &v45,  &type metadata for String,  &protocol witness table for String);
  uint64_t v3 = v45;
  p_info = &OBJC_METACLASS___TrialStateRelay.info;
  if (!v45)
  {
    if (qword_100131AB8 != -1) {
      goto LABEL_38;
    }
    goto LABEL_32;
  }

  int64_t v5 = 0LL;
  uint64_t v42 = v45 + 56;
  uint64_t v6 = 1LL << *(_BYTE *)(v45 + 32);
  uint64_t v7 = -1LL;
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  unint64_t v8 = v7 & *(void *)(v45 + 56);
  int64_t v43 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v44 = OBJC_IVAR____TtC10analyticsd23AnalyticsXPCQueryClient_keyMapping;
  __int128 v40 = v2;
  while (1)
  {
    if (v8)
    {
      unint64_t v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v10 = v9 | (v5 << 6);
      goto LABEL_22;
    }

    int64_t v11 = v5 + 1;
    if (__OFADD__(v5, 1LL))
    {
      __break(1u);
      goto LABEL_37;
    }

    if (v11 >= v43) {
      goto LABEL_30;
    }
    unint64_t v12 = *(void *)(v42 + 8 * v11);
    ++v5;
    if (!v12)
    {
      int64_t v5 = v11 + 1;
      if (v11 + 1 >= v43) {
        goto LABEL_30;
      }
      unint64_t v12 = *(void *)(v42 + 8 * v5);
      if (!v12)
      {
        int64_t v5 = v11 + 2;
        if (v11 + 2 >= v43) {
          goto LABEL_30;
        }
        unint64_t v12 = *(void *)(v42 + 8 * v5);
        if (!v12) {
          break;
        }
      }
    }

uint64_t sub_1000A64E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000A64F4(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t *sub_1000A64FC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    uint64_t v4 = swift_slowAlloc(*(void *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }

  return a2;
}

void sub_1000A653C(uint64_t a1)
{
  uint64_t v2 = operator new(8uLL);
  void *v2 = &off_10012BA20;
  sub_100005064(__p, ":sliceString");
  os_log_type_t v28 = __p;
  uint64_t v3 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v28);
  uint64_t v4 = *((void *)v3 + 5);
  *((void *)v3 + 5) = v2;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  int64_t v5 = operator new(8uLL);
  *int64_t v5 = &off_10012BA68;
  sub_100005064(__p, ":substring");
  os_log_type_t v28 = __p;
  uint64_t v6 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v28);
  uint64_t v7 = *((void *)v6 + 5);
  *((void *)v6 + 5) = v5;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v8 = operator new(8uLL);
  *unint64_t v8 = &off_10012BAB0;
  sub_100005064(__p, ":isSubstring");
  os_log_type_t v28 = __p;
  unint64_t v9 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v28);
  uint64_t v10 = *((void *)v9 + 5);
  *((void *)v9 + 5) = v8;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
  }
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  int64_t v11 = operator new(8uLL);
  *int64_t v11 = &off_10012BAF8;
  sub_100005064(__p, ":isPrefix");
  os_log_type_t v28 = __p;
  unint64_t v12 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v28);
  uint64_t v13 = *((void *)v12 + 5);
  *((void *)v12 + 5) = v11;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
  }
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v14 = operator new(8uLL);
  *uint64_t v14 = &off_10012BB40;
  sub_100005064(__p, ":isSuffix");
  os_log_type_t v28 = __p;
  unint64_t v15 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v28);
  uint64_t v16 = *((void *)v15 + 5);
  *((void *)v15 + 5) = v14;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8LL))(v16);
  }
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v17 = operator new(8uLL);
  *uint64_t v17 = &off_10012BB88;
  sub_100005064(__p, ":matchesRegex");
  os_log_type_t v28 = __p;
  uint64_t v18 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v28);
  uint64_t v19 = *((void *)v18 + 5);
  *((void *)v18 + 5) = v17;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8LL))(v19);
  }
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  char v20 = operator new(8uLL);
  void *v20 = &off_10012BBD0;
  sub_100005064(__p, ":isSubstringRegex");
  os_log_type_t v28 = __p;
  uint64_t v21 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v28);
  uint64_t v22 = *((void *)v21 + 5);
  *((void *)v21 + 5) = v20;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8LL))(v22);
  }
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v23 = operator new(8uLL);
  *uint64_t v23 = &off_10012BC18;
  sub_100005064(__p, ":searchRegex");
  os_log_type_t v28 = __p;
  uint64_t v24 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v28);
  uint64_t v25 = *((void *)v24 + 5);
  *((void *)v24 + 5) = v23;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8LL))(v25);
  }
  if (v27 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1000A6954( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  uint64_t v16 = (void *)nullsub_4(v14);
  operator delete(v16);
  _Unwind_Resume(a1);
}

void sub_1000A69C4(uint64_t a1, uint64_t *a2)
{
  int64_t v3 = sub_1000D1C20(a1, (uint64_t)a2);
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v8 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  int v4 = sub_1000D2674((uint64_t)a2, &v7);
  sub_1000A6AC4(v4, (uint64_t)&v7, v3);
  unint64_t v5 = a2[4];
  if (v5 >= a2[5])
  {
    uint64_t v6 = sub_100070EB8(a2 + 3, (uint64_t)&v7);
  }

  else
  {
    sub_10000C3E4(a2[4], (uint64_t)&v7);
    uint64_t v6 = v5 + 16;
    a2[4] = v5 + 16;
  }

  a2[4] = v6;
  sub_1000041AC((uint64_t)&v7);
  sub_10000425C(&v8, v7);
}

void sub_1000A6A98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v4 = v3;
  *(void *)(v2 + 3sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = v4;
  sub_10000417C((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_1000A6AC4(int a1, uint64_t a2, int64_t __n)
{
  if (*(_BYTE *)a2)
  {
    if (*(_BYTE *)a2 == 3) {
      uint64_t v3 = *(std::string **)(a2 + 8);
    }
    else {
      uint64_t v3 = 0LL;
    }
    unint64_t size = v3->__r_.__value_.__s.__size_;
    if (__n < 0)
    {
      if ((size & 0x80) != 0)
      {
        unint64_t v7 = v3->__r_.__value_.__l.__size_;
        if (v7 <= -__n) {
          return;
        }
        uint64_t v6 = (std::string *)v3->__r_.__value_.__r.__words[0];
        std::string::size_type v5 = v3->__r_.__value_.__r.__words[0] + v7 + __n;
      }

      else
      {
        if (size <= -__n) {
          return;
        }
        std::string::size_type v5 = (std::string::size_type)v3 + size + __n;
        uint64_t v6 = v3;
      }

      std::string::erase(v3, 0LL, v5 - (void)v6);
    }

    else
    {
      if ((size & 0x80) != 0) {
        unint64_t size = v3->__r_.__value_.__l.__size_;
      }
      if (size > __n) {
        std::string::resize(v3, __n, 0);
      }
    }
  }

uint64_t sub_1000A6B50()
{
  return 1LL;
}

void sub_1000A6B58(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_1000D1C20(a1, (uint64_t)a2);
  std::string::size_type v5 = sub_1000D1C20(a1, (uint64_t)a2);
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v10 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v6 = sub_1000D2674((uint64_t)a2, &v9);
  sub_1000A6C6C(v6, (uint64_t)&v9, v5, v4);
  unint64_t v7 = a2[4];
  if (v7 >= a2[5])
  {
    uint64_t v8 = sub_100070EB8(a2 + 3, (uint64_t)&v9);
  }

  else
  {
    sub_10000C3E4(a2[4], (uint64_t)&v9);
    uint64_t v8 = v7 + 16;
    a2[4] = v7 + 16;
  }

  a2[4] = v8;
  sub_1000041AC((uint64_t)&v9);
  sub_10000425C(&v10, v9);
}

void sub_1000A6C40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v4 = v3;
  *(void *)(v2 + 3sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = v4;
  sub_10000417C((uint64_t **)va);
  _Unwind_Resume(a1);
}

std::string *sub_1000A6C6C(uint64_t a1, uint64_t a2, std::string::size_type a3, uint64_t a4)
{
  if (!*(_BYTE *)a2) {
    return result;
  }
  std::string::size_type v4 = a3;
  if (*(_BYTE *)a2 == 3) {
    std::string::size_type v5 = *(std::string **)(a2 + 8);
  }
  else {
    std::string::size_type v5 = 0LL;
  }
  std::string::size_type size = v5->__r_.__value_.__s.__size_;
  if ((a3 & 0x8000000000000000LL) == 0)
  {
    if ((size & 0x80) == 0) {
      goto LABEL_7;
    }
LABEL_13:
    std::string::size_type size = v5->__r_.__value_.__l.__size_;
    unint64_t v7 = size - v4;
    if (size <= v4)
    {
      *v5->__r_.__value_.__l.__data_ = 0;
      v5->__r_.__value_.__l.__size_ = 0LL;
      return result;
    }

    goto LABEL_14;
  }

  if ((size & 0x80) != 0) {
    std::string::size_type v8 = v5->__r_.__value_.__l.__size_;
  }
  else {
    std::string::size_type v8 = v5->__r_.__value_.__s.__size_;
  }
  std::string::size_type v4 = (v8 + a3) & ~((uint64_t)(v8 + a3) >> 63);
  if ((size & 0x80) != 0) {
    goto LABEL_13;
  }
LABEL_7:
  unint64_t v7 = size - v4;
  if (size <= v4)
  {
    v5->__r_.__value_.__s.__data_[0] = 0;
    v5->__r_.__value_.__s.__size_ = 0;
    return result;
  }

uint64_t sub_1000A6D40()
{
  return 1LL;
}

void sub_1000A6D48(uint64_t a1, uint64_t *a2)
{
  unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
  __s = (void *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D2674((uint64_t)a2, &v19);
  uint64_t v3 = v19;
  if (!(_BYTE)v19) {
    goto LABEL_27;
  }
  else {
    std::string::size_type v4 = 0LL;
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    size_t size = __p.__r_.__value_.__s.__size_;
  }
  else {
    size_t size = __p.__r_.__value_.__l.__size_;
  }
  if (*((char *)v4 + 23) < 0)
  {
    size_t v6 = v4[1];
    if (size <= v6)
    {
      std::string::size_type v4 = (void *)*v4;
      goto LABEL_14;
    }

void sub_1000A6F6C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000A6FA8()
{
  return 1LL;
}

void sub_1000A6FB0(uint64_t a1, uint64_t *a2)
{
  unint64_t v11 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v12 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D2674((uint64_t)a2, &v11);
  unint64_t v3 = v11;
  if (!(_BYTE)v11) {
    goto LABEL_20;
  }
  else {
    std::string::size_type v4 = 0LL;
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    size_t size = __p.__r_.__value_.__s.__size_;
  }
  else {
    size_t size = __p.__r_.__value_.__l.__size_;
  }
  if (*((char *)v4 + 23) < 0)
  {
    if (size <= v4[1])
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      std::string::size_type v4 = (uint64_t *)*v4;
      goto LABEL_19;
    }

void sub_1000A716C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000A71A8()
{
  return 1LL;
}

void sub_1000A71B0(uint64_t a1, uint64_t *a2)
{
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  int v13 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D2674((uint64_t)a2, &v12);
  unint64_t v3 = v12;
  if (!(_BYTE)v12) {
    goto LABEL_20;
  }
  else {
    std::string::size_type v4 = 0LL;
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    size_t size = __p.__r_.__value_.__s.__size_;
  }
  else {
    size_t size = __p.__r_.__value_.__l.__size_;
  }
  if (*((char *)v4 + 23) < 0)
  {
    size_t v6 = v4[1];
    if (size <= v6)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      std::string::size_type v4 = (uint64_t *)*v4;
      goto LABEL_19;
    }

void sub_1000A7374( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000A73B0()
{
  return 1LL;
}

void sub_1000A73B8(uint64_t a1, uint64_t *a2)
{
  unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v17 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D2674((uint64_t)a2, &v16);
  unint64_t v3 = v16;
  if ((_BYTE)v16)
  {
    else {
      std::string::size_type v4 = 0LL;
    }
    *(void *)&__int128 v5 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v5 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
    v20[6] = 0xAAAAAAAAAAAAAA00LL;
    void v20[3] = 0xAAAAAAAAAAAAAAAALL;
    __int128 v21 = v5;
    v20[4] = 0LL;
    void v20[5] = 0LL;
    v20[7] = 0LL;
    _BYTE v20[8] = 0LL;
    LOBYTE(v2sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0;
    BYTE8(v2sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0;
    uint64_t v22 = 0LL;
    *(_OWORD *)std::string __p = 0u;
    memset(v20, 0, 25);
    sub_100031C80(&v14, (uint64_t)&v18, 0);
    uint64_t v6 = *((unsigned __int8 *)v4 + 23);
    if ((v6 & 0x80u) == 0LL) {
      uint64_t v7 = (uint64_t)v4;
    }
    else {
      uint64_t v7 = *v4;
    }
    if ((v6 & 0x80u) != 0LL) {
      uint64_t v6 = v4[1];
    }
    unsigned int v8 = sub_10003AAF4(v7, v7 + v6, (uint64_t)__p, (uint64_t)&v14, 0);
    uint64_t v9 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        unint64_t v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }

    std::locale::~locale(&v14);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }

    unint64_t v3 = v8;
  }

  LOBYTE(__p[0]) = 4;
  __p[1] = (void *)v3;
  sub_1000041AC((uint64_t)__p);
  sub_1000041AC((uint64_t)__p);
  unint64_t v12 = a2[4];
  if (v12 >= a2[5])
  {
    uint64_t v13 = sub_100004B7C(a2 + 3, (uint64_t)__p);
  }

  else
  {
    *(_BYTE *)unint64_t v12 = __p[0];
    *(void **)(v12 + sub_100007004((uint64_t)v1 + 8) = __p[1];
    sub_1000041AC((uint64_t)__p);
    LOBYTE(__p[0]) = 0;
    __p[1] = 0LL;
    sub_1000041AC(v12);
    uint64_t v13 = v12 + 16;
  }

  a2[4] = v13;
  sub_1000041AC((uint64_t)__p);
  sub_10000425C((uint64_t **)&__p[1], LOBYTE(__p[0]));
  sub_1000041AC((uint64_t)&v16);
  sub_10000425C(&v17, v16);
}

void sub_1000A75D8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t *a18, uint64_t a19, void *__p, uint64_t a21, int a22, __int16 a23, char a24, char a25, void *a26, uint64_t a27)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000A7644()
{
  return 1LL;
}

void sub_1000A764C(uint64_t a1, uint64_t *a2)
{
  unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
  char v20 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D2674((uint64_t)a2, &v19);
  uint64_t v3 = v19;
  if ((_BYTE)v19)
  {
    else {
      std::string::size_type v4 = 0LL;
    }
    *(void *)&__int128 v5 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v5 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
    v23[6] = 0xAAAAAAAAAAAAAA00LL;
    v23[3] = 0xAAAAAAAAAAAAAAAALL;
    __int128 v24 = v5;
    uint8_t v23[4] = 0LL;
    void v23[5] = 0LL;
    v23[7] = 0LL;
    _BYTE v23[8] = 0LL;
    LOBYTE(v24) = 0;
    BYTE8(v24) = 0;
    uint64_t v25 = 0LL;
    *(_OWORD *)std::string __p = 0u;
    memset(v23, 0, 25);
    sub_100031C80(&v17, (uint64_t)&v21, 0);
    *(void *)&__int128 v6 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v6 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v29 = 0xAAAAAAAAAAAAAA00LL;
    *(void *)&v26[40] = 0xAAAAAAAAAAAAAAAALL;
    __int128 v32 = v6;
    uint64_t v27 = 0LL;
    uint64_t v28 = 0LL;
    uint64_t v30 = 0LL;
    uint64_t v31 = 0LL;
    LOBYTE(v3sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = 0;
    BYTE8(v3sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = 0;
    uint64_t v33 = 0LL;
    memset(v26, 0, 41);
    uint64_t v7 = *((unsigned __int8 *)v4 + 23);
    if ((v7 & 0x80u) == 0LL) {
      uint64_t v8 = (uint64_t)v4;
    }
    else {
      uint64_t v8 = *v4;
    }
    if ((v7 & 0x80u) != 0LL) {
      uint64_t v7 = v4[1];
    }
    unsigned int v9 = sub_10003AC28((uint64_t)&v17, v8, v8 + v7, (uint64_t)v26, 0);
    uint64_t v10 = *((unsigned __int8 *)v4 + 23);
    if ((v10 & 0x80u) == 0LL) {
      uint64_t v11 = (uint64_t)v4;
    }
    else {
      uint64_t v11 = *v4;
    }
    if ((v10 & 0x80u) != 0LL) {
      uint64_t v10 = v4[1];
    }
    sub_10003AE00((uint64_t)__p, v11, v11 + v10, (uint64_t *)v26, 0);
    if (*(void *)v26)
    {
      *(void *)&_BYTE v26[8] = *(void *)v26;
      operator delete(*(void **)v26);
    }

    unint64_t v12 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        unint64_t v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }

    std::locale::~locale(&v17);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }

    uint64_t v3 = v9;
  }

  v26[0] = 4;
  *(void *)&_BYTE v26[8] = v3;
  sub_1000041AC((uint64_t)v26);
  sub_1000041AC((uint64_t)v26);
  unint64_t v15 = a2[4];
  if (v15 >= a2[5])
  {
    uint64_t v16 = sub_100004B7C(a2 + 3, (uint64_t)v26);
  }

  else
  {
    *(_BYTE *)unint64_t v15 = v26[0];
    *(void *)(v15 + sub_100007004((uint64_t)v1 + 8) = *(void *)&v26[8];
    sub_1000041AC((uint64_t)v26);
    v26[0] = 0;
    *(void *)&_BYTE v26[8] = 0LL;
    sub_1000041AC(v15);
    uint64_t v16 = v15 + 16;
  }

  a2[4] = v16;
  sub_1000041AC((uint64_t)v26);
  sub_10000425C((uint64_t **)&v26[8], v26[0]);
  sub_1000041AC((uint64_t)&v19);
  sub_10000425C(&v20, v19);
}

void sub_1000A78DC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t *a18, uint64_t a19, void *__p, uint64_t a21, int a22, __int16 a23, char a24, char a25, void *a26, uint64_t a27)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000A795C()
{
  return 1LL;
}

void sub_1000A7964(uint64_t a1, uint64_t *a2)
{
  unint64_t v27 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v28 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D2674((uint64_t)a2, &v27);
  unint64_t v25 = 0xAAAAAAAAAAAAAA00LL;
  uint64_t v26 = 0LL;
  sub_1000041AC((uint64_t)&v25);
  sub_1000041AC((uint64_t)&v25);
  if (!(_BYTE)v27) {
    goto LABEL_32;
  }
  uint64_t v3 = 0LL;
  *(void *)&__int128 v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v33 = 0xAAAAAAAAAAAAAA00LL;
  *(void *)&v30[40] = 0xAAAAAAAAAAAAAAAALL;
  __int128 v36 = v4;
  uint64_t v31 = 0LL;
  uint64_t v32 = 0LL;
  uint64_t v34 = 0LL;
  uint64_t v35 = 0LL;
  LOBYTE(v36) = 0;
  BYTE8(v36) = 0;
  uint64_t v37 = 0LL;
  memset(v30, 0, 41);
  sub_100031C80(&v22, (uint64_t)&__p, 0);
  *(void *)&__int128 v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v41 = 0xAAAAAAAAAAAAAA00LL;
  *(void *)&v38[40] = 0xAAAAAAAAAAAAAAAALL;
  __int128 v44 = v5;
  uint64_t v39 = 0LL;
  uint64_t v40 = 0LL;
  uint64_t v42 = 0LL;
  uint64_t v43 = 0LL;
  LOBYTE(v44) = 0;
  BYTE8(v44) = 0;
  uint64_t v45 = 0LL;
  memset(v38, 0, 41);
  uint64_t v6 = *((unsigned __int8 *)v3 + 23);
  if ((v6 & 0x80u) == 0LL) {
    uint64_t v7 = (uint64_t)v3;
  }
  else {
    uint64_t v7 = *v3;
  }
  if ((v6 & 0x80u) != 0LL) {
    uint64_t v6 = v3[1];
  }
  int v8 = sub_10003AC28((uint64_t)&v22, v7, v7 + v6, (uint64_t)v38, 0);
  uint64_t v9 = *((unsigned __int8 *)v3 + 23);
  if ((v9 & 0x80u) == 0LL) {
    uint64_t v10 = (uint64_t)v3;
  }
  else {
    uint64_t v10 = *v3;
  }
  if ((v9 & 0x80u) != 0LL) {
    uint64_t v9 = v3[1];
  }
  sub_10003AE00((uint64_t)v30, v10, v10 + v9, (uint64_t *)v38, 0);
  if (*(void *)v38)
  {
    *(void *)&_BYTE v38[8] = *(void *)v38;
    operator delete(*(void **)v38);
  }

  uint64_t v11 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      unint64_t v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  std::locale::~locale(&v22);
  if (v8)
  {
    sub_10000BA40((uint64_t)v20, 0LL, 0LL, 0, 2);
    sub_1000041AC((uint64_t)v20);
    char v14 = v25;
    LOBYTE(v25) = v20[0];
    v20[0] = v14;
    unint64_t v15 = v26;
    uint64_t v26 = v21;
    std::string v21 = v15;
    sub_1000041AC((uint64_t)&v25);
    sub_1000041AC((uint64_t)v20);
    sub_10000425C(&v21, v20[0]);
    uint64_t v17 = *(void *)&v30[8];
    uint64_t v16 = *(void *)v30;
    if (*(void *)v30 == *(void *)&v30[8]) {
      goto LABEL_30;
    }
    do
    {
      if (*(_BYTE *)(v16 + 16)) {
        sub_100036DD4(v38, *(char **)v16, *(char **)(v16 + 8), *(void *)(v16 + 8) - *(void *)v16);
      }
      else {
        memset(v38, 0, 24);
      }
      sub_100008E5C((uint64_t)&v22, (uint64_t)v38);
      sub_100057BDC((uint64_t)&v25, (uint64_t)&v22);
      sub_1000041AC((uint64_t)&v22);
      sub_10000425C(&v23, LOBYTE(v22.__locale_));
      if ((v38[23] & 0x80000000) != 0) {
        operator delete(*(void **)v38);
      }
      v16 += 24LL;
    }

    while (v16 != v17);
  }

  uint64_t v16 = *(void *)v30;
LABEL_30:
  if (v16)
  {
    *(void *)&_BYTE v30[8] = v16;
    operator delete((void *)v16);
  }

void sub_1000A7CE0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t *a20, uint64_t a21, uint64_t *a22, uint64_t a23, void *a24, uint64_t a25, int a26, __int16 a27, char a28, char a29, void *__p, uint64_t a31)
{
  if (__p)
  {
    a31 = (uint64_t)__p;
    operator delete(__p);
  }

  sub_10000417C(&a20);
  sub_10000417C(&a22);
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000A7D90()
{
  return 1LL;
}

void sub_1000A7D9C(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000A7DB4(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000A7DCC(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000A7DE4(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000A7DFC(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000A7E14(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000A7E2C(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000A7E44(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

unsigned __int8 *sub_1000A7E58(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_100021B64(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v13 = v8;
      if (v8 >= v10) {
        unint64_t v13 = v8 % v10;
      }
    }

    else
    {
      unint64_t v13 = (v10 - 1) & v8;
    }

    char v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v13);
    if (v14)
    {
      for (size_t i = *v14; i; size_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v9)
        {
          if ((sub_100021BD4(a1 + 32, i + 16, a2) & 1) != 0) {
            return i;
          }
        }

        else
        {
          if (v12 > 1)
          {
            if (v16 >= v10) {
              v16 %= v10;
            }
          }

          else
          {
            v16 &= v10 - 1;
          }

          if (v16 != v13) {
            break;
          }
        }
      }
    }
  }

  else
  {
    unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  }

  unint64_t v30 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v17 = operator new(0x30uLL);
  v29[0] = v17;
  v29[1] = a1 + 16;
  *uint64_t v17 = 0LL;
  v17[1] = v9;
  unint64_t v18 = *a4;
  __int128 v19 = **a4;
  v17[4] = *((void *)*a4 + 2);
  *((_OWORD *)v17 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = v19;
  *((void *)v18 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0LL;
  *((void *)v18 + sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = 0LL;
  *(void *)unint64_t v18 = 0LL;
  v17[5] = 0LL;
  LOBYTE(v30) = 1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v21 = *(float *)(a1 + 32);
  if (!v10 || (float)(v21 * (float)v10) < v20)
  {
    BOOL v22 = 1LL;
    if (v10 >= 3) {
      BOOL v22 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v10);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    sub_10002246C(a1, v25);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v13 = v9 % v10;
      }
      else {
        unint64_t v13 = v9;
      }
    }

    else
    {
      unint64_t v13 = (v10 - 1) & v9;
    }
  }

  uint64_t v26 = *(void **)(*(void *)a1 + 8 * v13);
  if (v26)
  {
    *(void *)v29[0] = *v26;
    *uint64_t v26 = v29[0];
  }

  else
  {
    *(void *)v29[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v29[0];
    *(void *)(*(void *)a1 + 8 * v13) = a1 + 16;
    if (*(void *)v29[0])
    {
      unint64_t v27 = *(void *)(*(void *)v29[0] + 8LL);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v27 >= v10) {
          v27 %= v10;
        }
      }

      else
      {
        v27 &= v10 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v27) = v29[0];
    }
  }

  size_t i = (unsigned __int8 *)v29[0];
  v29[0] = 0LL;
  ++*v7;
  sub_1000979B0((uint64_t)v29, 0LL);
  return i;
}

void sub_1000A811C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1000A8134(uint64_t a1)
{
  uint64_t v2 = operator new(8uLL);
  void *v2 = &off_10012BC60;
  sub_100005064(__p, ":getIOReporterChannelsWithGroupSubGroup");
  unint64_t v13 = __p;
  uint64_t v3 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v13);
  uint64_t v4 = *((void *)v3 + 5);
  *((void *)v3 + 5) = v2;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  __int128 v5 = operator new(8uLL);
  *__int128 v5 = &off_10012BCA8;
  sub_100005064(__p, ":getIOReporterChannelValue");
  unint64_t v13 = __p;
  uint64_t v6 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v13);
  uint64_t v7 = *((void *)v6 + 5);
  *((void *)v6 + 5) = v5;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v8 = operator new(8uLL);
  *unint64_t v8 = &off_10012BCF0;
  sub_100005064(__p, ":generateIOReporterEvent");
  unint64_t v13 = __p;
  unint64_t v9 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v13);
  uint64_t v10 = *((void *)v9 + 5);
  *((void *)v9 + 5) = v8;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
  }
  if (v12 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1000A82F4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  unint64_t v16 = (void *)nullsub_4(v14);
  operator delete(v16);
  _Unwind_Resume(a1);
}

void sub_1000A833C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = a2[7];
  uint64_t v3 = (std::__shared_weak_count *)a2[8];
  uint64_t v16 = v4;
  uint64_t v17 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }

  memset(&v15, 170, sizeof(v15));
  sub_1000D1B68((uint64_t)a2, &v15);
  memset(&__p, 170, sizeof(__p));
  sub_1000D1B68((uint64_t)a2, &__p);
  sub_1000714FC(v4, (char *)&__p, (uint64_t)&v15, (uint64_t)v11);
  unint64_t v13 = 0LL;
  v12[0] = 2;
  uint64_t v18 = v11[1];
  __int128 v19 = (void **)v11[0];
  unint64_t v13 = sub_100082268((uint64_t *)&v19, &v18);
  sub_1000041AC((uint64_t)v12);
  sub_1000041AC((uint64_t)v12);
  unint64_t v7 = a2[4];
  if (v7 >= a2[5])
  {
    uint64_t v8 = sub_100004B7C(a2 + 3, (uint64_t)v12);
  }

  else
  {
    *(_BYTE *)unint64_t v7 = v12[0];
    *(void *)(v7 + sub_100007004((uint64_t)v1 + 8) = v13;
    sub_1000041AC((uint64_t)v12);
    v12[0] = 0;
    unint64_t v13 = 0LL;
    sub_1000041AC(v7);
    uint64_t v8 = v7 + 16;
  }

  a2[4] = v8;
  sub_1000041AC((uint64_t)v12);
  sub_10000425C(&v13, v12[0]);
  __int128 v19 = (void **)v11;
  sub_100015E44(&v19);
  if (v3)
  {
    unint64_t v9 = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

void sub_1000A8508( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t *a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, char a27)
{
  *(void *)(v27 - 80) = &a10;
  sub_100015E44((void ***)(v27 - 80));
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  sub_100007004((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A8574()
{
  return 1LL;
}

void sub_1000A857C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = a2[7];
  uint64_t v3 = (std::__shared_weak_count *)a2[8];
  uint64_t v18 = v4;
  __int128 v19 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }

  memset(&__p, 170, sizeof(__p));
  sub_1000D1B68((uint64_t)a2, &__p);
  unint64_t v7 = sub_100071B60(v4, (unsigned __int8 *)&__p);
  if (v8) {
    char v9 = 5;
  }
  else {
    char v9 = 0;
  }
  if (v8) {
    unint64_t v10 = (uint64_t *)v7;
  }
  else {
    unint64_t v10 = 0LL;
  }
  v15[0] = v9;
  uint64_t v16 = v10;
  sub_1000041AC((uint64_t)v15);
  sub_1000041AC((uint64_t)v15);
  unint64_t v11 = a2[4];
  if (v11 >= a2[5])
  {
    uint64_t v12 = sub_100004B7C(a2 + 3, (uint64_t)v15);
  }

  else
  {
    *(_BYTE *)unint64_t v11 = v15[0];
    *(void *)(v11 + sub_100007004((uint64_t)v1 + 8) = v16;
    sub_1000041AC((uint64_t)v15);
    v15[0] = 0;
    uint64_t v16 = 0LL;
    sub_1000041AC(v11);
    uint64_t v12 = v11 + 16;
  }

  a2[4] = v12;
  sub_1000041AC((uint64_t)v15);
  sub_10000425C(&v16, v15[0]);
  if (v3)
  {
    unint64_t v13 = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

void sub_1000A86EC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_100007004((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A8728()
{
  return 1LL;
}

void sub_1000A8730(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_1000D1C20(a1, (uint64_t)a2);
  memset(&__p, 170, sizeof(__p));
  sub_1000D1B68((uint64_t)a2, &__p);
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v10 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000A8AC8((uint64_t)v18, "ChannelName");
  __int128 v19 = v18;
  char v20 = 1;
  uint64_t v22 = sub_10000B990((uint64_t)v21, (uint64_t)&__p);
  char v23 = 1;
  sub_10000BA40((uint64_t)v24, (uint64_t)v18, 2LL, 1, 2);
  size_t v25 = v24;
  char v26 = 1;
  sub_10004A434((uint64_t)v12, "ChannelValue");
  unint64_t v13 = v12;
  char v14 = 1;
  v15[0] = 5;
  v16[0] = v3;
  sub_1000041AC((uint64_t)v15);
  sub_1000041AC((uint64_t)v15);
  v16[1] = v15;
  char v17 = 1;
  sub_10000BA40((uint64_t)v27, (uint64_t)v12, 2LL, 1, 2);
  uint64_t v28 = v27;
  char v29 = 1;
  sub_10000BA40((uint64_t)&v9, (uint64_t)v24, 2LL, 1, 2);
  for (uint64_t i = 0LL; i != -64; i -= 32LL)
  {
    sub_1000041AC((uint64_t)&v27[i]);
    sub_10000425C((uint64_t **)&v27[i + 8], v27[i]);
  }

  for (uint64_t j = 0LL; j != -8; j -= 4LL)
  {
    sub_1000041AC((uint64_t)&v15[j * 8]);
    sub_10000425C((uint64_t **)&v16[j], v15[j * 8]);
  }

  for (uint64_t k = 0LL; k != -64; k -= 32LL)
  {
    sub_1000041AC((uint64_t)&v21[k]);
    sub_10000425C((uint64_t **)&v21[k + 8], v21[k]);
  }

  unint64_t v7 = a2[4];
  if (v7 >= a2[5])
  {
    uint64_t v8 = sub_100070EB8(a2 + 3, (uint64_t)&v9);
  }

  else
  {
    sub_10000C3E4(a2[4], (uint64_t)&v9);
    uint64_t v8 = v7 + 16;
    a2[4] = v7 + 16;
  }

  a2[4] = v8;
  sub_1000041AC((uint64_t)&v9);
  sub_10000425C(&v10, v9);
}

void sub_1000A897C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, char a25)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000A8A78()
{
  return 1LL;
}

void sub_1000A8A84(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000A8A9C(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000A8AB4(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

uint64_t sub_1000A8AC8(uint64_t a1, char *a2)
{
  *(void *)(a1 + sub_100007004((uint64_t)v1 + 8) = 0LL;
  *(_BYTE *)a1 = 3;
  *(void *)(a1 + sub_100007004((uint64_t)v1 + 8) = sub_1000A8B10(a2);
  sub_1000041AC(a1);
  sub_1000041AC(a1);
  return a1;
}

void *sub_1000A8B10(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  sub_100005064(v2, a1);
  return v2;
}

void sub_1000A8B44(_Unwind_Exception *a1)
{
}

void sub_1000A8B58(uint64_t a1)
{
  uint64_t v2 = operator new(8uLL);
  void *v2 = &off_10012BD38;
  sub_100005064(__p, ":stackClear");
  uint64_t v43 = __p;
  uint64_t v3 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v43);
  uint64_t v4 = *((void *)v3 + 5);
  *((void *)v3 + 5) = v2;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  if (v42 < 0) {
    operator delete(__p[0]);
  }
  __int128 v5 = operator new(8uLL);
  *__int128 v5 = &off_10012BD80;
  sub_100005064(__p, ":stackDepth");
  uint64_t v43 = __p;
  unint64_t v6 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v43);
  uint64_t v7 = *((void *)v6 + 5);
  *((void *)v6 + 5) = v5;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  if (v42 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v8 = operator new(8uLL);
  *uint64_t v8 = &off_10012BDC8;
  sub_100005064(__p, ":drop");
  uint64_t v43 = __p;
  unint64_t v9 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v43);
  uint64_t v10 = *((void *)v9 + 5);
  *((void *)v9 + 5) = v8;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
  }
  if (v42 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v11 = operator new(8uLL);
  *unint64_t v11 = &off_10012BE10;
  sub_100005064(__p, ":dropN");
  uint64_t v43 = __p;
  uint64_t v12 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v43);
  uint64_t v13 = *((void *)v12 + 5);
  *((void *)v12 + 5) = v11;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
  }
  if (v42 < 0) {
    operator delete(__p[0]);
  }
  char v14 = operator new(8uLL);
  *char v14 = &off_10012BE58;
  sub_100005064(__p, ":dropExcept1");
  uint64_t v43 = __p;
  std::string v15 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v43);
  uint64_t v16 = *((void *)v15 + 5);
  *((void *)v15 + 5) = v14;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8LL))(v16);
  }
  if (v42 < 0) {
    operator delete(__p[0]);
  }
  char v17 = operator new(8uLL);
  *char v17 = &off_10012BEA0;
  sub_100005064(__p, ":dropExceptN");
  uint64_t v43 = __p;
  uint64_t v18 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v43);
  uint64_t v19 = *((void *)v18 + 5);
  *((void *)v18 + 5) = v17;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8LL))(v19);
  }
  if (v42 < 0) {
    operator delete(__p[0]);
  }
  char v20 = operator new(8uLL);
  void *v20 = &off_10012BEE8;
  sub_100005064(__p, ":dup");
  uint64_t v43 = __p;
  float v21 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v43);
  uint64_t v22 = *((void *)v21 + 5);
  *((void *)v21 + 5) = v20;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8LL))(v22);
  }
  if (v42 < 0) {
    operator delete(__p[0]);
  }
  char v23 = operator new(8uLL);
  *char v23 = &off_10012BF30;
  sub_100005064(__p, ":dupN");
  uint64_t v43 = __p;
  unint64_t v24 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v43);
  uint64_t v25 = *((void *)v24 + 5);
  *((void *)v24 + 5) = v23;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8LL))(v25);
  }
  if (v42 < 0) {
    operator delete(__p[0]);
  }
  char v26 = operator new(8uLL);
  *char v26 = &off_10012BF78;
  sub_100005064(__p, ":pick");
  uint64_t v43 = __p;
  uint64_t v27 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v43);
  uint64_t v28 = *((void *)v27 + 5);
  *((void *)v27 + 5) = v26;
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 8LL))(v28);
  }
  if (v42 < 0) {
    operator delete(__p[0]);
  }
  char v29 = operator new(8uLL);
  *char v29 = &off_10012BFC0;
  sub_100005064(__p, ":pick2");
  uint64_t v43 = __p;
  unint64_t v30 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v43);
  uint64_t v31 = *((void *)v30 + 5);
  *((void *)v30 + 5) = v29;
  if (v31) {
    (*(void (**)(uint64_t))(*(void *)v31 + 8LL))(v31);
  }
  if (v42 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v32 = operator new(8uLL);
  *uint64_t v32 = &off_10012C008;
  sub_100005064(__p, ":swap");
  uint64_t v43 = __p;
  unint64_t v33 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v43);
  uint64_t v34 = *((void *)v33 + 5);
  *((void *)v33 + 5) = v32;
  if (v34) {
    (*(void (**)(uint64_t))(*(void *)v34 + 8LL))(v34);
  }
  if (v42 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v35 = operator new(8uLL);
  void *v35 = &off_10012C050;
  sub_100005064(__p, ":rot");
  uint64_t v43 = __p;
  __int128 v36 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v43);
  uint64_t v37 = *((void *)v36 + 5);
  *((void *)v36 + 5) = v35;
  if (v37) {
    (*(void (**)(uint64_t))(*(void *)v37 + 8LL))(v37);
  }
  if (v42 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v38 = operator new(8uLL);
  *uint64_t v38 = &off_10012C098;
  sub_100005064(__p, ":roll");
  uint64_t v43 = __p;
  uint64_t v39 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v43);
  uint64_t v40 = *((void *)v39 + 5);
  *((void *)v39 + 5) = v38;
  if (v40) {
    (*(void (**)(uint64_t))(*(void *)v40 + 8LL))(v40);
  }
  if (v42 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1000A91C8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  uint64_t v16 = (void *)nullsub_4(v14);
  operator delete(v16);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A9260(uint64_t a1, uint64_t a2)
{
  return sub_100004CA0(a2 + 24, *(void *)(a2 + 24));
}

uint64_t sub_1000A926C()
{
  return 1LL;
}

uint64_t sub_1000A9274(uint64_t a1, uint64_t *a2)
{
  unint64_t v3 = a2[4];
  unint64_t v4 = a2[5];
  uint64_t v5 = (uint64_t)(v3 - a2[3]) >> 4;
  uint64_t v7 = v5;
  if (v3 >= v4)
  {
    uint64_t result = sub_1000A9CAC(a2 + 3, &v7);
  }

  else
  {
    *(_BYTE *)unint64_t v3 = 6;
    *(void *)(v3 + sub_100007004((uint64_t)v1 + 8) = v5;
    sub_1000041AC(v3);
    sub_1000041AC(v3);
    uint64_t result = v3 + 16;
  }

  a2[4] = result;
  return result;
}

uint64_t sub_1000A9318()
{
  return 1LL;
}

uint64_t sub_1000A9320(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 32);
  uint64_t v2 = a2 + 24;
  if (v4 == v3)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000A9394(exception, "EvaluationContext Stack empty: 'drop' expected at least one item");
  }

  return sub_100004CA0(v2, v3 - 16);
}

void sub_1000A9380(_Unwind_Exception *a1)
{
}

std::logic_error *sub_1000A9394(std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  return result;
}

uint64_t sub_1000A93B8()
{
  return 1LL;
}

uint64_t *sub_1000A93C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t *)(a2 + 24);
  if (*(void *)(a2 + 24) == *(void *)(a2 + 32))
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000A9394(exception, "EvaluationContext Stack empty: 'dropN' expected at least one item");
    goto LABEL_8;
  }

  unint64_t v4 = sub_1000D1C20(a1, a2);
  if ((v4 & 0x8000000000000000LL) != 0)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000A9394(exception, "EvaluationContext Stack empty: 'dropN' saw a negative number");
    goto LABEL_8;
  }

  unint64_t v5 = (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 4;
  if (v5 < v4)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000A9394(exception, "EvaluationContext Stack empty: 'dropN' saw too few items");
LABEL_8:
  }

  return sub_10009F828(v2, v5 - v4);
}

void sub_1000A9474(_Unwind_Exception *a1)
{
}

uint64_t sub_1000A9490()
{
  return 1LL;
}

uint64_t sub_1000A9498(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v2 = a2 + 24;
  if (v3 == v4)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000A9394(exception, "EvaluationContext Stack empty: 'dropExcept1' expected at least one item");
  }

  return sub_1000A950C(v2, v3, v4 - 16);
}

void sub_1000A94F8(_Unwind_Exception *a1)
{
}

uint64_t sub_1000A950C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    sub_10001DD60((uint64_t)&v7, a3, *(void *)(a1 + 8), a2);
    sub_100004CA0(a1, v5);
  }

  return a2;
}

uint64_t sub_1000A9590()
{
  return 1LL;
}

uint64_t sub_1000A9598(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 24;
  if (*(void *)(a2 + 24) == *(void *)(a2 + 32))
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000A9394(exception, "EvaluationContext Stack empty: 'dropExceptN' expected at least one item");
    goto LABEL_8;
  }

  unint64_t v4 = sub_1000D1C20(a1, a2);
  if ((v4 & 0x8000000000000000LL) != 0)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000A9394(exception, "EvaluationContext Stack empty: 'dropExceptN' saw a negative N");
LABEL_8:
  }

  uint64_t v5 = *(void *)(a2 + 24);
  unint64_t v6 = (*(void *)(a2 + 32) - v5) >> 4;
  BOOL v7 = v6 >= v4;
  unint64_t v8 = v6 - v4;
  if (!v7)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000A9394(exception, "EvaluationContext Stack empty: 'dropExceptN' saw too few items");
    goto LABEL_8;
  }

  return sub_1000A950C(v2, v5, v5 + 16 * v8);
}

void sub_1000A9650(_Unwind_Exception *a1)
{
}

uint64_t sub_1000A966C()
{
  return 1LL;
}

uint64_t sub_1000A9674(uint64_t a1, void *a2)
{
  unint64_t v3 = a2[4];
  uint64_t v2 = a2 + 3;
  if (a2[3] == v3)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000A9394(exception, "EvaluationContext Stack empty: 'dup' expected at least one item");
  }

  uint64_t v5 = v3 - 16;
  if (v3 >= a2[5])
  {
    uint64_t result = sub_1000996C8(v2, v5);
  }

  else
  {
    sub_10000C3E4(v3, v5);
    uint64_t result = v3 + 16;
    a2[4] = v3 + 16;
  }

  a2[4] = result;
  return result;
}

void sub_1000A9704(_Unwind_Exception *a1)
{
}

uint64_t sub_1000A9724()
{
  return 1LL;
}

uint64_t sub_1000A972C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = sub_1000D1C20(a1, a2);
  if ((v3 & 0x8000000000000000LL) != 0)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000A9394(exception, "EvaluationContext Stack empty: 'dupN' saw a negative number");
    goto LABEL_6;
  }

  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 32);
  unint64_t v6 = (uint64_t *)(a2 + 24);
  if (v3 > (v4 - v5) >> 4)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000A9394(exception, "EvaluationContext Stack empty: 'dupN' saw too few items");
LABEL_6:
  }

  return sub_100099864(v6, v4, v4 - 16 * v3, v4, (uint64_t)(16 * v3) >> 4);
}

void sub_1000A97BC(_Unwind_Exception *a1)
{
}

uint64_t sub_1000A97D4()
{
  return 1LL;
}

uint64_t sub_1000A97DC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_1000D1C20(a1, (uint64_t)a2);
  if (v3 <= 0)
  {
    uint64_t v7 = v3;
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    unint64_t v9 = exception;
    if (v7) {
      sub_1000A9394(exception, "EvaluationContext Stack empty: 'pick' saw a negative number");
    }
    else {
      sub_1000A9394(exception, "EvaluationContext Stack empty: 'pick' saw a zero");
    }
LABEL_11:
  }

  unint64_t v4 = a2[4];
  if (v3 > (unint64_t)((uint64_t)(v4 - a2[3]) >> 4))
  {
    unint64_t v9 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000A9394(v9, "EvaluationContext Stack empty: 'pick' saw a number larger than the stack size");
    goto LABEL_11;
  }

  uint64_t v5 = v4 - 16 * v3;
  if (v4 >= a2[5])
  {
    uint64_t result = sub_1000996C8(a2 + 3, v5);
  }

  else
  {
    sub_10000C3E4(a2[4], v5);
    uint64_t result = v4 + 16;
    a2[4] = v4 + 16;
  }

  a2[4] = result;
  return result;
}

void sub_1000A98B4(_Unwind_Exception *a1)
{
}

uint64_t sub_1000A98E0()
{
  return 1LL;
}

uint64_t sub_1000A98E8(uint64_t a1, void *a2)
{
  unint64_t v3 = a2[4];
  uint64_t v2 = a2 + 3;
  if (v3 - a2[3] <= 0x1F)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000A9394(exception, "EvaluationContext Stack empty: 'pick2' expected at least two items");
  }

  uint64_t v5 = v3 - 32;
  if (v3 >= a2[5])
  {
    uint64_t result = sub_1000996C8(v2, v5);
  }

  else
  {
    sub_10000C3E4(v3, v5);
    uint64_t result = v3 + 16;
    a2[4] = v3 + 16;
  }

  a2[4] = result;
  return result;
}

void sub_1000A997C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000A999C()
{
  return 1LL;
}

uint64_t sub_1000A99A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 32);
  if ((unint64_t)(v2 - *(void *)(a2 + 24)) <= 0x1F)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000A9394(exception, "EvaluationContext Stack empty: 'swap' expected at least two items");
  }

  char v4 = *(_BYTE *)(v2 - 16);
  uint64_t v3 = v2 - 16;
  *(_BYTE *)uint64_t v3 = *(_BYTE *)(v3 - 16);
  *(_BYTE *)(v3 - 16) = v4;
  uint64_t v5 = *(void *)(v3 + 8);
  *(void *)(v3 + sub_100007004((uint64_t)v1 + 8) = *(void *)(v3 - 8);
  *(void *)(v3 - sub_100007004((uint64_t)v1 + 8) = v5;
  return sub_1000041AC(v3);
}

void sub_1000A9A1C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000A9A30()
{
  return 1LL;
}

uint64_t sub_1000A9A38(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 32);
  if ((unint64_t)(v2 - *(void *)(a2 + 24)) <= 0x2F)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000A9394(exception, "EvaluationContext Stack empty: 'rot' expected at least three items");
  }

  return sub_1000A9DCC(v2 - 48, v2 - 32, v2);
}

void sub_1000A9A98(_Unwind_Exception *a1)
{
}

uint64_t sub_1000A9AAC()
{
  return 1LL;
}

unint64_t sub_1000A9AB4(uint64_t a1, uint64_t a2)
{
  unint64_t result = sub_1000D1C20(a1, a2);
  if (result)
  {
    if ((result & 0x8000000000000000LL) != 0)
    {
      exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_1000A9394(exception, "EvaluationContext Stack empty: 'roll' saw a negative number");
    }

    else
    {
      uint64_t v4 = *(void *)(a2 + 32);
      if (result <= (v4 - *(void *)(a2 + 24)) >> 4)
      {
        unint64_t result = v4 - 16 * result;
        if (result + 16 != v4) {
          return sub_1000A9DCC(result, result + 16, v4);
        }
        return result;
      }

      exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_1000A9394(exception, "EvaluationContext Stack empty: 'roll' saw too few items");
    }
  }

  return result;
}

void sub_1000A9B54(_Unwind_Exception *a1)
{
}

uint64_t sub_1000A9B6C()
{
  return 1LL;
}

void sub_1000A9B78(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000A9B90(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000A9BA8(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000A9BC0(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000A9BD8(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000A9BF0(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000A9C08(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000A9C20(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000A9C38(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000A9C50(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000A9C68(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000A9C80(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000A9C98(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

uint64_t sub_1000A9CAC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v18 = a1 + 2;
  uint64_t v10 = (char *)sub_1000047F4(v7, v9);
  uint64_t v11 = (uint64_t)&v10[16 * v4];
  *(void *)&__int128 v16 = v10;
  *((void *)&v16 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = v11;
  *((void *)&v17 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = &v10[16 * v12];
  *(void *)(v11 + sub_100007004((uint64_t)v1 + 8) = 0LL;
  uint64_t v13 = *a2;
  *(_BYTE *)uint64_t v11 = 6;
  *(void *)(v11 + sub_100007004((uint64_t)v1 + 8) = v13;
  sub_1000041AC(v11);
  sub_1000041AC(v11);
  *(void *)&__int128 v17 = v11 + 16;
  sub_10000470C(a1, &v16);
  uint64_t v14 = a1[1];
  sub_100004A50((uint64_t)&v16);
  return v14;
}

void sub_1000A9DB8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1000A9DCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  char v6 = *(_BYTE *)a1;
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)a2 = v6;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)(a1 + sub_100007004((uint64_t)v1 + 8) = *(void *)(a2 + 8);
  *(void *)(a2 + sub_100007004((uint64_t)v1 + 8) = v7;
  sub_1000041AC(a1);
  uint64_t v8 = a1 + 16;
  for (uint64_t i = v4 + 16; i != a3; i += 16LL)
  {
    if (v8 == v4) {
      uint64_t v4 = i;
    }
    char v10 = *(_BYTE *)v8;
    *(_BYTE *)uint64_t v8 = *(_BYTE *)i;
    *(_BYTE *)uint64_t i = v10;
    uint64_t v11 = *(void *)(v8 + 8);
    *(void *)(v8 + sub_100007004((uint64_t)v1 + 8) = *(void *)(i + 8);
    *(void *)(i + sub_100007004((uint64_t)v1 + 8) = v11;
    sub_1000041AC(v8);
    v8 += 16LL;
  }

  if (v8 != v4)
  {
    uint64_t v12 = v8;
    uint64_t v13 = v4;
    do
    {
      while (1)
      {
        char v14 = *(_BYTE *)v12;
        *(_BYTE *)uint64_t v12 = *(_BYTE *)v13;
        *(_BYTE *)uint64_t v13 = v14;
        uint64_t v15 = *(void *)(v12 + 8);
        *(void *)(v12 + sub_100007004((uint64_t)v1 + 8) = *(void *)(v13 + 8);
        *(void *)(v13 + sub_100007004((uint64_t)v1 + 8) = v15;
        sub_1000041AC(v12);
        v12 += 16LL;
        v13 += 16LL;
        if (v13 == a3) {
          break;
        }
        if (v12 == v4) {
          uint64_t v4 = v13;
        }
      }

      uint64_t v13 = v4;
    }

    while (v12 != v4);
  }

  return v8;
}

void sub_1000A9ED8(uint64_t a1)
{
  uint64_t v2 = operator new(8uLL);
  void *v2 = &off_10012C0E0;
  sub_100005064(__p, ":indexOf");
  uint64_t v19 = __p;
  uint64_t v3 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v19);
  uint64_t v4 = *((void *)v3 + 5);
  *((void *)v3 + 5) = v2;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v5 = operator new(8uLL);
  *unint64_t v5 = &off_10012C128;
  sub_100005064(__p, ":isElement");
  uint64_t v19 = __p;
  char v6 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v19);
  uint64_t v7 = *((void *)v6 + 5);
  *((void *)v6 + 5) = v5;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v8 = operator new(8uLL);
  *uint64_t v8 = &off_10012C170;
  sub_100005064(__p, ":filter");
  uint64_t v19 = __p;
  unint64_t v9 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v19);
  uint64_t v10 = *((void *)v9 + 5);
  *((void *)v9 + 5) = v8;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
  }
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v11 = operator new(8uLL);
  *uint64_t v11 = &off_10012C1B8;
  sub_100005064(__p, ":map");
  uint64_t v19 = __p;
  uint64_t v12 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v19);
  uint64_t v13 = *((void *)v12 + 5);
  *((void *)v12 + 5) = v11;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
  }
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  char v14 = operator new(8uLL);
  *char v14 = &off_10012C200;
  sub_100005064(__p, ":fold");
  uint64_t v19 = __p;
  uint64_t v15 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v19);
  uint64_t v16 = *((void *)v15 + 5);
  *((void *)v15 + 5) = v14;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8LL))(v16);
  }
  if (v18 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1000AA188( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  uint64_t v16 = (void *)nullsub_4(v14);
  operator delete(v16);
  _Unwind_Resume(a1);
}

void sub_1000AA1E0(uint64_t a1, uint64_t *a2)
{
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v15 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D25BC((uint64_t)a2, &v14);
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v13 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D2314((uint64_t)a2, &v12);
  sub_100057DA0((uint64_t)&v12, &v10);
  uint64_t v3 = v10;
  uint64_t v4 = v11;
  if (v10 == v11)
  {
    unint64_t v5 = v10;
  }

  else
  {
    while ((sub_10002CE28(v3, (unsigned __int8 *)&v14) & 1) == 0)
    {
      v3 += 16;
      if (v3 == v4)
      {
        uint64_t v3 = v4;
        break;
      }
    }

    unint64_t v5 = v3;
    uint64_t v3 = v11;
  }

  if (v5 == v3)
  {
    LOBYTE(vsub_100007004((uint64_t)v1 + 8) = 0;
    uint64_t v9 = 0LL;
    sub_1000041AC((uint64_t)&v8);
    sub_1000041AC((uint64_t)&v8);
    unint64_t v6 = a2[4];
    if (v6 >= a2[5])
    {
LABEL_12:
      uint64_t v7 = sub_100004B7C(a2 + 3, (uint64_t)&v8);
      goto LABEL_13;
    }
  }

  else
  {
    LOBYTE(vsub_100007004((uint64_t)v1 + 8) = 5;
    uint64_t v9 = (v5 - v10) >> 4;
    sub_1000041AC((uint64_t)&v8);
    sub_1000041AC((uint64_t)&v8);
    unint64_t v6 = a2[4];
    if (v6 >= a2[5]) {
      goto LABEL_12;
    }
  }

  *(_BYTE *)unint64_t v6 = (_BYTE)v8;
  *(void *)(v6 + sub_100007004((uint64_t)v1 + 8) = v9;
  sub_1000041AC((uint64_t)&v8);
  LOBYTE(vsub_100007004((uint64_t)v1 + 8) = 0;
  uint64_t v9 = 0LL;
  sub_1000041AC(v6);
  uint64_t v7 = v6 + 16;
LABEL_13:
  a2[4] = v7;
  sub_1000041AC((uint64_t)&v8);
  sub_10000425C((uint64_t **)&v9, v8);
  uint64_t v8 = &v10;
  sub_100004D64((void ***)&v8);
  sub_1000041AC((uint64_t)&v12);
  sub_10000425C(&v13, v12);
  sub_1000041AC((uint64_t)&v14);
  sub_10000425C(&v15, v14);
}

void sub_1000AA3B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t *a14, uint64_t a15, uint64_t *a16)
{
  a9 = &a11;
  sub_100004D64((void ***)&a9);
  sub_10000417C(&a14);
  sub_10000417C(&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_1000AA408()
{
  return 1LL;
}

void sub_1000AA410(uint64_t a1, uint64_t *a2)
{
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v15 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D25BC((uint64_t)a2, &v14);
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v13 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D2314((uint64_t)a2, &v12);
  sub_100057DA0((uint64_t)&v12, &v10);
  uint64_t v3 = v10;
  uint64_t v4 = v11;
  if (v10 == v11)
  {
    unint64_t v5 = v10;
  }

  else
  {
    while ((sub_10002CE28(v3, (unsigned __int8 *)&v14) & 1) == 0)
    {
      v3 += 16;
      if (v3 == v4)
      {
        uint64_t v3 = v4;
        break;
      }
    }

    unint64_t v5 = v3;
    uint64_t v3 = v11;
  }

  LOBYTE(vsub_100007004((uint64_t)v1 + 8) = 4;
  unint64_t v9 = v5 != v3;
  sub_1000041AC((uint64_t)&v8);
  sub_1000041AC((uint64_t)&v8);
  unint64_t v6 = a2[4];
  if (v6 >= a2[5])
  {
    uint64_t v7 = sub_100004B7C(a2 + 3, (uint64_t)&v8);
  }

  else
  {
    *(_BYTE *)unint64_t v6 = (_BYTE)v8;
    *(void *)(v6 + sub_100007004((uint64_t)v1 + 8) = v9;
    sub_1000041AC((uint64_t)&v8);
    LOBYTE(vsub_100007004((uint64_t)v1 + 8) = 0;
    unint64_t v9 = 0LL;
    sub_1000041AC(v6);
    uint64_t v7 = v6 + 16;
  }

  a2[4] = v7;
  sub_1000041AC((uint64_t)&v8);
  sub_10000425C((uint64_t **)&v9, v8);
  uint64_t v8 = &v10;
  sub_100004D64((void ***)&v8);
  sub_1000041AC((uint64_t)&v12);
  sub_10000425C(&v13, v12);
  sub_1000041AC((uint64_t)&v14);
  sub_10000425C(&v15, v14);
}

void sub_1000AA5A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t *a14, uint64_t a15, uint64_t *a16)
{
  a9 = &a11;
  sub_100004D64((void ***)&a9);
  sub_10000417C(&a14);
  sub_10000417C(&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_1000AA5F0()
{
  return 1LL;
}

void sub_1000AA5F8(uint64_t a1, uint64_t a2)
{
  unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v27 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D2314(a2, &v26);
  unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v25 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D2314(a2, &v24);
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v17 = *(void *)(a2 + 24);
  sub_100057DA0((uint64_t)&v24, &v22);
  __int128 v20 = 0uLL;
  unint64_t v21 = 0LL;
  uint64_t v5 = v22;
  for (uint64_t i = v23; v5 != i; v5 += 16LL)
  {
    unint64_t v7 = *(void *)(a2 + 32);
    if (v7 >= *(void *)(a2 + 40))
    {
      uint64_t v8 = sub_100070EB8((uint64_t *)(a2 + 24), v5);
    }

    else
    {
      sub_10000C3E4(*(void *)(a2 + 32), v5);
      uint64_t v8 = v7 + 16;
      *(void *)(a2 + 3sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = v7 + 16;
    }

    *(void *)(a2 + 3sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = v8;
    sub_1000B0590(*(void ***)(a2 + 48), a2, &v26);
    unsigned int v9 = sub_1000D21A4(a1, a2);
    LOBYTE(v1sub_100007004((uint64_t)v1 + 8) = 4;
    unint64_t v19 = v9;
    sub_1000041AC((uint64_t)&v18);
    sub_1000041AC((uint64_t)&v18);
    unsigned __int8 v28 = -86;
    sub_100059DD4((char *)&v18, &v28);
    int v10 = v28;
    sub_1000041AC((uint64_t)&v18);
    sub_10000425C((uint64_t **)&v19, v18);
    if (v10)
    {
      uint64_t v11 = *((void *)&v20 + 1);
      if (*((void *)&v20 + 1) >= v21)
      {
        uint64_t v12 = sub_100070EB8((uint64_t *)&v20, v5);
      }

      else
      {
        sub_10000C3E4(*((uint64_t *)&v20 + 1), v5);
        uint64_t v12 = v11 + 16;
      }

      *((void *)&v20 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = v12;
    }
  }

  if (*(void *)(a2 + 32) - *(void *)(a2 + 24) != v4 - v17)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Filter left the wrong number of items on the stack.");
  }

  LOBYTE(v1sub_100007004((uint64_t)v1 + 8) = 2;
  uint64_t v13 = (uint64_t *)operator new(0x18uLL);
  *(_OWORD *)uint64_t v13 = v20;
  _OWORD v13[2] = v21;
  unint64_t v21 = 0LL;
  unint64_t v19 = (unint64_t)v13;
  __int128 v20 = 0uLL;
  sub_1000041AC((uint64_t)&v18);
  sub_1000041AC((uint64_t)&v18);
  unint64_t v14 = *(void *)(a2 + 32);
  if (v14 >= *(void *)(a2 + 40))
  {
    uint64_t v15 = sub_100004B7C((uint64_t *)(a2 + 24), (uint64_t)&v18);
  }

  else
  {
    *(_BYTE *)unint64_t v14 = (_BYTE)v18;
    *(void *)(v14 + sub_100007004((uint64_t)v1 + 8) = v19;
    sub_1000041AC((uint64_t)&v18);
    LOBYTE(v1sub_100007004((uint64_t)v1 + 8) = 0;
    unint64_t v19 = 0LL;
    sub_1000041AC(v14);
    uint64_t v15 = v14 + 16;
  }

  *(void *)(a2 + 3sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = v15;
  sub_1000041AC((uint64_t)&v18);
  sub_10000425C((uint64_t **)&v19, v18);
  char v18 = (void **)&v20;
  sub_100004D64(&v18);
  *(void *)&__int128 v20 = &v22;
  sub_100004D64((void ***)&v20);
  sub_1000041AC((uint64_t)&v24);
  sub_10000425C(&v25, v24);
  sub_1000041AC((uint64_t)&v26);
  sub_10000425C(&v27, v26);
}

void sub_1000AA8DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4 = va_arg(va1, uint64_t *);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  unint64_t v7 = va_arg(va2, void **);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v11 = va_arg(va3, void);
  uint64_t v13 = va_arg(va3, void);
  uint64_t v14 = va_arg(va3, void);
  va_copy(va4, va3);
  uint64_t v15 = va_arg(va4, uint64_t *);
  uint64_t v17 = va_arg(va4, void);
  sub_10000417C((uint64_t **)va);
  va_copy((va_list)v4, va1);
  sub_100004D64((void ***)va);
  va_copy((va_list)v7, va2);
  sub_100004D64((void ***)va1);
  sub_10000417C((uint64_t **)va3);
  sub_10000417C((uint64_t **)va4);
  _Unwind_Resume(a1);
}

uint64_t sub_1000AA978()
{
  return 1LL;
}

void sub_1000AA980(uint64_t a1, uint64_t a2)
{
  unint64_t v23 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v24 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D2314(a2, &v23);
  unint64_t v21 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v22 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D2314(a2, &v21);
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 32);
  sub_100057DA0((uint64_t)&v21, &v19);
  __int128 v17 = 0uLL;
  unint64_t v18 = 0LL;
  uint64_t v5 = v19;
  for (uint64_t i = v20; v5 != i; v5 += 16LL)
  {
    uint64_t v15 = (void **)0xAAAAAAAAAAAAAAAALL;
    uint64_t v16 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    unint64_t v7 = *(void *)(a2 + 32);
    if (v7 >= *(void *)(a2 + 40))
    {
      uint64_t v8 = sub_100070EB8((uint64_t *)(a2 + 24), v5);
    }

    else
    {
      sub_10000C3E4(*(void *)(a2 + 32), v5);
      uint64_t v8 = v7 + 16;
      *(void *)(a2 + 3sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = v7 + 16;
    }

    *(void *)(a2 + 3sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = v8;
    sub_1000B0590(*(void ***)(a2 + 48), a2, &v23);
    sub_1000D25BC(a2, &v15);
    uint64_t v9 = *((void *)&v17 + 1);
    if (*((void *)&v17 + 1) >= v18)
    {
      uint64_t v10 = sub_100004B7C((uint64_t *)&v17, (uint64_t)&v15);
    }

    else
    {
      **((_BYTE **)&v17 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = (_BYTE)v15;
      *(void *)(v9 + sub_100007004((uint64_t)v1 + 8) = v16;
      sub_1000041AC((uint64_t)&v15);
      LOBYTE(v15) = 0;
      uint64_t v16 = 0LL;
      sub_1000041AC(v9);
      uint64_t v10 = v9 + 16;
    }

    *((void *)&v17 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = v10;
    sub_1000041AC((uint64_t)&v15);
    sub_10000425C(&v16, v15);
  }

  if (*(void *)(a2 + 32) - *(void *)(a2 + 24) != v4 - v3)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Map left the wrong number of items on the stack.");
  }

  LOBYTE(v15) = 2;
  uint64_t v11 = (uint64_t *)operator new(0x18uLL);
  *(_OWORD *)uint64_t v11 = v17;
  _OWORD v11[2] = v18;
  unint64_t v18 = 0LL;
  uint64_t v16 = v11;
  __int128 v17 = 0uLL;
  sub_1000041AC((uint64_t)&v15);
  sub_1000041AC((uint64_t)&v15);
  unint64_t v12 = *(void *)(a2 + 32);
  if (v12 >= *(void *)(a2 + 40))
  {
    uint64_t v13 = sub_100004B7C((uint64_t *)(a2 + 24), (uint64_t)&v15);
  }

  else
  {
    *(_BYTE *)unint64_t v12 = (_BYTE)v15;
    *(void *)(v12 + sub_100007004((uint64_t)v1 + 8) = v16;
    sub_1000041AC((uint64_t)&v15);
    LOBYTE(v15) = 0;
    uint64_t v16 = 0LL;
    sub_1000041AC(v12);
    uint64_t v13 = v12 + 16;
  }

  *(void *)(a2 + 3sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = v13;
  sub_1000041AC((uint64_t)&v15);
  sub_10000425C(&v16, v15);
  uint64_t v15 = (void **)&v17;
  sub_100004D64(&v15);
  *(void *)&__int128 v17 = &v19;
  sub_100004D64((void ***)&v17);
  sub_1000041AC((uint64_t)&v21);
  sub_10000425C(&v22, v21);
  sub_1000041AC((uint64_t)&v23);
  sub_10000425C(&v24, v23);
}

void sub_1000AAC48( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void ***a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t *a18, uint64_t a19, uint64_t *a20)
{
  a9 = &a11;
  sub_100004D64((void ***)&a9);
  a11 = (void **)&a15;
  sub_100004D64(&a11);
  sub_10000417C(&a18);
  sub_10000417C(&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_1000AACD4()
{
  return 1LL;
}

void sub_1000AACDC(uint64_t a1, uint64_t a2)
{
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v16 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D2314(a2, &v15);
  unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v14 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D2314(a2, &v13);
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 32);
  sub_100057DA0((uint64_t)&v13, &v11);
  uint64_t v5 = v11;
  uint64_t v6 = v12;
  if (v12 != v11 && (_BYTE)v15)
  {
    uint64_t v7 = v4 - v3;
    if (v15 == 1)
    {
      if (!v16[2]) {
        goto LABEL_13;
      }
    }

    else if (v15 == 2 && !((v16[1] - *v16) >> 4))
    {
      goto LABEL_13;
    }

    do
    {
      unint64_t v8 = *(void *)(a2 + 32);
      if (v8 >= *(void *)(a2 + 40))
      {
        uint64_t v9 = sub_100070EB8((uint64_t *)(a2 + 24), v5);
      }

      else
      {
        sub_10000C3E4(*(void *)(a2 + 32), v5);
        uint64_t v9 = v8 + 16;
        *(void *)(a2 + 3sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = v8 + 16;
      }

      *(void *)(a2 + 3sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = v9;
      sub_1000B0590(*(void ***)(a2 + 48), a2, &v15);
      v5 += 16LL;
    }

    while (v5 != v6);
    if (*(void *)(a2 + 32) - *(void *)(a2 + 24) != v7)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Fold left the wrong number of items on the stack.");
    }
  }

void sub_1000AAE98( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t *a13, uint64_t a14, uint64_t *a15, uint64_t a16, void **a17)
{
  a17 = (void **)&a10;
  sub_100004D64(&a17);
  sub_10000417C(&a13);
  sub_10000417C(&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1000AAEFC()
{
  return 1LL;
}

void sub_1000AAF08(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000AAF20(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000AAF38(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000AAF50(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000AAF68(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void *sub_1000AAF7C@<X0>( void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = operator new(0x70uLL);
  sub_1000AAFEC(v10, a1, a2, a3, a4);
  return sub_1000ADC70(a5, v10);
}

void *sub_1000AAFEC(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  dispatch_queue_t v10 = dispatch_queue_create("analyticsd.ConfigurerQueue", 0LL);
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = v10;
  if (v10)
  {
    uint64_t v11 = v10;
    dispatch_retain(v10);
    dispatch_release(v11);
  }

  a1[3] = 0LL;
  a1[4] = 0LL;
  a1[5] = 0LL;
  uint64_t v12 = a3[1];
  a1[6] = *a3;
  a1[7] = v12;
  if (v12)
  {
    unint64_t v13 = (unint64_t *)(v12 + 8);
    do
      unint64_t v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }

  uint64_t v15 = a2[1];
  a1[8] = *a2;
  a1[9] = v15;
  if (v15)
  {
    uint64_t v16 = (unint64_t *)(v15 + 8);
    do
      unint64_t v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }

  uint64_t v18 = a4[1];
  a1[10] = *a4;
  a1[11] = v18;
  if (v18)
  {
    uint64_t v19 = (unint64_t *)(v18 + 8);
    do
      unint64_t v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }

  uint64_t v21 = a5[1];
  a1[12] = *a5;
  a1[13] = v21;
  if (v21)
  {
    uint64_t v22 = (unint64_t *)(v21 + 8);
    do
      unint64_t v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }

  return a1;
}

void sub_1000AB0E0(void *a1@<X0>, dispatch_group_t *a2@<X8>)
{
  dispatch_group_t v4 = dispatch_group_create();
  uint64_t v5 = v4;
  *a2 = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v5);
  }

  unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000CF18(&v16, a1);
  uint64_t v6 = operator new(0x10uLL);
  void *v6 = a1;
  v6[1] = v5;
  uint64_t v7 = (dispatch_queue_s *)a1[2];
  unint64_t v8 = v16;
  unint64_t v9 = v17;
  if (v17)
  {
    dispatch_queue_t v10 = (unint64_t *)(v17 + 8);
    do
      unint64_t v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }

  uint64_t v12 = operator new(0x18uLL);
  *uint64_t v12 = v6;
  v12[1] = v8;
  void v12[2] = v9;
  dispatch_async_f(v7, v12, (dispatch_function_t)sub_1000ADDF4);
  unint64_t v13 = (std::__shared_weak_count *)v17;
  if (v17)
  {
    unint64_t v14 = (unint64_t *)(v17 + 8);
    do
      unint64_t v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

void sub_1000AB1FC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1000AB20C(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = a1;
  uint64_t v3 = *(dispatch_queue_s **)(a1 + 16);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000LL;
  v5[2] = sub_1000ADF78;
  void v5[3] = &unk_10012C298;
  v5[4] = a1;
  v5[5] = &v4;
  uint64_t v6 = v5;
  *a2 = 0xAAAAAAAAAAAAAA00LL;
  a2[1] = 0LL;
  sub_1000041AC((uint64_t)a2);
  sub_1000041AC((uint64_t)a2);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_1000AE17C;
  block[3] = &unk_10012C2B8;
  void block[4] = a2;
  void block[5] = &v6;
  dispatch_sync(v3, block);
}

void sub_1000AB2FC(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = a1;
  uint64_t v3 = *(dispatch_queue_s **)(a1 + 16);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000LL;
  v5[2] = sub_1000AE578;
  void v5[3] = &unk_10012C368;
  v5[4] = a1;
  v5[5] = &v4;
  uint64_t v6 = v5;
  *a2 = 0xAAAAAAAAAAAAAA00LL;
  a2[1] = 0LL;
  sub_1000041AC((uint64_t)a2);
  sub_1000041AC((uint64_t)a2);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_1000AE17C;
  block[3] = &unk_10012C2B8;
  void block[4] = a2;
  void block[5] = &v6;
  dispatch_sync(v3, block);
}

void sub_1000AB3EC(void *a1, __int128 *a2)
{
  __int128 v13 = *a2;
  *(void *)a2 = 0LL;
  *((void *)a2 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0LL;
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000CF18(&v14, a1);
  uint64_t v3 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v3 = a1;
  *(_OWORD *)(v3 + sub_100007004((uint64_t)v1 + 8) = v13;
  uint64_t v4 = (dispatch_queue_s *)a1[2];
  unint64_t v5 = v14;
  unint64_t v6 = v15;
  if (v15)
  {
    uint64_t v7 = (unint64_t *)(v15 + 8);
    do
      unint64_t v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }

  unint64_t v9 = operator new(0x18uLL);
  *unint64_t v9 = v3;
  v9[1] = v5;
  _OWORD v9[2] = v6;
  dispatch_async_f(v4, v9, (dispatch_function_t)sub_1000AED60);
  dispatch_queue_t v10 = (std::__shared_weak_count *)v15;
  if (v15)
  {
    unint64_t v11 = (unint64_t *)(v15 + 8);
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

void sub_1000AB4F8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1000AB508(uint64_t a1, char a2)
{
  char v4 = a2;
  uint64_t v3 = &v4;
  uint64_t v2 = *(dispatch_queue_s **)(a1 + 16);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_1000AF0C4;
  block[3] = &unk_10012C388;
  void block[4] = a1;
  void block[5] = &v3;
  dispatch_sync(v2, block);
}

void sub_1000AB59C(void *a1@<X0>, dispatch_group_t *a2@<X8>)
{
  dispatch_group_t v4 = dispatch_group_create();
  unint64_t v5 = v4;
  *a2 = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v5);
  }

  unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000CF18(&v16, a1);
  unint64_t v6 = operator new(0x10uLL);
  void *v6 = a1;
  v6[1] = v5;
  uint64_t v7 = (dispatch_queue_s *)a1[2];
  unint64_t v8 = v16;
  unint64_t v9 = v17;
  if (v17)
  {
    dispatch_queue_t v10 = (unint64_t *)(v17 + 8);
    do
      unint64_t v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }

  unint64_t v12 = operator new(0x18uLL);
  *unint64_t v12 = v6;
  v12[1] = v8;
  void v12[2] = v9;
  dispatch_async_f(v7, v12, (dispatch_function_t)sub_1000AF0D4);
  __int128 v13 = (std::__shared_weak_count *)v17;
  if (v17)
  {
    unint64_t v14 = (unint64_t *)(v17 + 8);
    do
      unint64_t v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

void sub_1000AB6B8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1000AB6C8(uint64_t a1)
{
  uint64_t v2 = a1;
  uint64_t v1 = *(dispatch_queue_s **)(a1 + 16);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_1000AF220;
  block[3] = &unk_10012C3A8;
  void block[4] = a1;
  void block[5] = &v2;
  dispatch_sync(v1, block);
}

void sub_1000AB754(void *a1@<X0>, dispatch_group_t *a2@<X8>)
{
  dispatch_group_t v4 = dispatch_group_create();
  unint64_t v5 = v4;
  *a2 = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v5);
  }

  unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000CF18(&v16, a1);
  unint64_t v6 = operator new(0x10uLL);
  void *v6 = a1;
  v6[1] = v5;
  uint64_t v7 = (dispatch_queue_s *)a1[2];
  unint64_t v8 = v16;
  unint64_t v9 = v17;
  if (v17)
  {
    dispatch_queue_t v10 = (unint64_t *)(v17 + 8);
    do
      unint64_t v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }

  unint64_t v12 = operator new(0x18uLL);
  *unint64_t v12 = v6;
  v12[1] = v8;
  void v12[2] = v9;
  dispatch_async_f(v7, v12, (dispatch_function_t)sub_1000AF22C);
  __int128 v13 = (std::__shared_weak_count *)v17;
  if (v17)
  {
    unint64_t v14 = (unint64_t *)(v17 + 8);
    do
      unint64_t v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

void sub_1000AB870(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000AB880(uint64_t a1)
{
  *(void *)&__int128 v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v48 = 0xAAAAAAAAAAAAAA00LL;
  __int128 v50 = v2;
  uint64_t v47 = off_10012AA00;
  uint64_t v49 = 0LL;
  sub_1000041AC((uint64_t)&v48);
  sub_1000041AC((uint64_t)&v48);
  LOBYTE(v50) = 0;
  *((void *)&v50 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0LL;
  sub_1000041AC((uint64_t)&v50);
  sub_1000041AC((uint64_t)&v50);
  sub_10002BC40((uint64_t)v51, "message");
  os_log_type_t v52 = v51;
  char v53 = 1;
  uint64_t v55 = (_BYTE *)sub_1000AF290((uint64_t)v54, "Locating configs");
  char v56 = 1;
  sub_10000BA40((uint64_t)v57, (uint64_t)v51, 2LL, 1, 2);
  int64_t v59 = v57;
  char v60 = 1;
  sub_10000BA40((uint64_t)v45, (uint64_t)v57, 1LL, 1, 2);
  sub_100085D0C((uint64_t)&v47, (uint64_t)"Configurer::StoreConfigs", (uint64_t)v45);
  sub_1000041AC((uint64_t)v45);
  sub_10000425C(&v46, v45[0]);
  sub_1000041AC((uint64_t)v57);
  sub_10000425C(&v58, v57[0]);
  for (uint64_t i = 0LL; i != -64; i -= 32LL)
  {
    sub_1000041AC((uint64_t)&v54[i]);
    sub_10000425C((uint64_t **)&v54[i + 8], v54[i]);
  }

  memset(v44, 170, sizeof(v44));
  (*(void (**)(void *__return_ptr))(**(void **)(a1 + 48) + 16LL))(v44);
  unint64_t v5 = (uint64_t *)v44[0];
  dispatch_group_t v4 = (uint64_t *)v44[1];
  if (v44[0] == v44[1])
  {
    sub_10002BC40((uint64_t)v51, "message");
    os_log_type_t v52 = v51;
    char v53 = 1;
    uint64_t v55 = (_BYTE *)sub_1000AF320((uint64_t)v54, "No configs visible");
    char v56 = 1;
    sub_10000BA40((uint64_t)v57, (uint64_t)v51, 2LL, 1, 2);
    int64_t v59 = v57;
    char v60 = 1;
    sub_10000BA40((uint64_t)v42, (uint64_t)v57, 1LL, 1, 2);
    sub_100086024((uint64_t)&v47, (uint64_t)"Configurer::StoreConfigs", (uint64_t)v42);
    sub_1000041AC((uint64_t)v42);
    sub_10000425C(&v43, v42[0]);
    sub_1000041AC((uint64_t)v57);
    sub_10000425C(&v58, v57[0]);
    for (uint64_t j = 0LL; j != -64; j -= 32LL)
    {
      sub_1000041AC((uint64_t)&v54[j]);
      sub_10000425C((uint64_t **)&v54[j + 8], v54[j]);
    }
  }

  else
  {
    do
    {
      unint64_t v40 = 0xAAAAAAAAAAAAAAAALL;
      unint64_t v41 = 0xAAAAAAAAAAAAAAAALL;
      sub_1000ABF6C(a1, v5, &v40);
      if (v40)
      {
        sub_10002BC40((uint64_t)v51, "message");
        os_log_type_t v52 = v51;
        char v53 = 1;
        std::operator+<char>(&v33, "Successfully loaded and stored config ", *v5 + 8);
        unint64_t v6 = std::string::append(&v33, " (");
        __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
        v34.__r_.__value_.__l.__cap_ = v6->__r_.__value_.__l.__cap_;
        *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v7;
        v6->__r_.__value_.__l.__size_ = 0LL;
        v6->__r_.__value_.__l.__cap_ = 0LL;
        v6->__r_.__value_.__r.__words[0] = 0LL;
        int v8 = *(char *)(*v5 + 55);
        if (v8 >= 0) {
          unint64_t v9 = (const std::string::value_type *)(*v5 + 32);
        }
        else {
          unint64_t v9 = *(const std::string::value_type **)(*v5 + 32);
        }
        if (v8 >= 0) {
          std::string::size_type v10 = *(unsigned __int8 *)(*v5 + 55);
        }
        else {
          std::string::size_type v10 = *(void *)(*v5 + 40);
        }
        unint64_t v11 = std::string::append(&v34, v9, v10);
        __int128 v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
        v35.__r_.__value_.__l.__cap_ = v11->__r_.__value_.__l.__cap_;
        *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v12;
        v11->__r_.__value_.__l.__size_ = 0LL;
        v11->__r_.__value_.__l.__cap_ = 0LL;
        v11->__r_.__value_.__r.__words[0] = 0LL;
        __int128 v13 = std::string::append(&v35, ")");
        __int128 v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        std::string::size_type cap = v13->__r_.__value_.__l.__cap_;
        *(_OWORD *)std::string __p = v14;
        v13->__r_.__value_.__l.__size_ = 0LL;
        v13->__r_.__value_.__l.__cap_ = 0LL;
        v13->__r_.__value_.__r.__words[0] = 0LL;
        sub_100008E5C((uint64_t)v54, (uint64_t)__p);
        uint64_t v55 = v54;
        char v56 = 1;
        sub_10000BA40((uint64_t)v57, (uint64_t)v51, 2LL, 1, 2);
        int64_t v59 = v57;
        char v60 = 1;
        sub_10000BA40((uint64_t)v38, (uint64_t)v57, 1LL, 1, 2);
        sub_100085D0C((uint64_t)&v47, (uint64_t)"Configurer::StoreConfigs", (uint64_t)v38);
        sub_1000041AC((uint64_t)v38);
        sub_10000425C(&v39, v38[0]);
        sub_1000041AC((uint64_t)v57);
        sub_10000425C(&v58, v57[0]);
        for (uint64_t k = 0LL; k != -64; k -= 32LL)
        {
          sub_1000041AC((uint64_t)&v54[k]);
          sub_10000425C((uint64_t **)&v54[k + 8], v54[k]);
        }
      }

      else
      {
        sub_10002BC40((uint64_t)v51, "message");
        os_log_type_t v52 = v51;
        char v53 = 1;
        std::operator+<char>(&v33, "Failed to load or store config ", *v5 + 8);
        unint64_t v16 = std::string::append(&v33, " (");
        __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
        v34.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
        *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v17;
        v16->__r_.__value_.__l.__size_ = 0LL;
        v16->__r_.__value_.__l.__cap_ = 0LL;
        v16->__r_.__value_.__r.__words[0] = 0LL;
        int v18 = *(char *)(*v5 + 55);
        if (v18 >= 0) {
          uint64_t v19 = (const std::string::value_type *)(*v5 + 32);
        }
        else {
          uint64_t v19 = *(const std::string::value_type **)(*v5 + 32);
        }
        if (v18 >= 0) {
          std::string::size_type v20 = *(unsigned __int8 *)(*v5 + 55);
        }
        else {
          std::string::size_type v20 = *(void *)(*v5 + 40);
        }
        uint64_t v21 = std::string::append(&v34, v19, v20);
        __int128 v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v35.__r_.__value_.__l.__cap_ = v21->__r_.__value_.__l.__cap_;
        *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v22;
        v21->__r_.__value_.__l.__size_ = 0LL;
        v21->__r_.__value_.__l.__cap_ = 0LL;
        v21->__r_.__value_.__r.__words[0] = 0LL;
        unint64_t v23 = std::string::append(&v35, ")");
        __int128 v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        std::string::size_type cap = v23->__r_.__value_.__l.__cap_;
        *(_OWORD *)std::string __p = v24;
        v23->__r_.__value_.__l.__size_ = 0LL;
        v23->__r_.__value_.__l.__cap_ = 0LL;
        v23->__r_.__value_.__r.__words[0] = 0LL;
        sub_100008E5C((uint64_t)v54, (uint64_t)__p);
        uint64_t v55 = v54;
        char v56 = 1;
        sub_10000BA40((uint64_t)v57, (uint64_t)v51, 2LL, 1, 2);
        int64_t v59 = v57;
        char v60 = 1;
        sub_10000BA40((uint64_t)v31, (uint64_t)v57, 1LL, 1, 2);
        sub_100085D0C((uint64_t)&v47, (uint64_t)"Configurer::StoreConfigs", (uint64_t)v31);
        sub_1000041AC((uint64_t)v31);
        sub_10000425C(&v32, v31[0]);
        sub_1000041AC((uint64_t)v57);
        sub_10000425C(&v58, v57[0]);
        for (uint64_t m = 0LL; m != -64; m -= 32LL)
        {
          sub_1000041AC((uint64_t)&v54[m]);
          sub_10000425C((uint64_t **)&v54[m + 8], v54[m]);
        }
      }

      if (SHIBYTE(cap) < 0) {
        operator delete(__p[0]);
      }
      unint64_t v26 = (std::__shared_weak_count *)v41;
      if (v41)
      {
        uint64_t v27 = (unint64_t *)(v41 + 8);
        do
          unint64_t v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }

      v5 += 2;
    }

    while (v5 != v4);
  }

  v51[0] = (void **)v44;
  sub_1000100E4(v51);
  uint64_t v47 = off_10012AA00;
  sub_1000041AC((uint64_t)&v50);
  sub_10000425C((uint64_t **)&v50 + 1, v50);
  sub_1000041AC((uint64_t)&v48);
  sub_10000425C(&v49, v48);
  return nullsub_4(&v47);
}

void sub_1000ABF5C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1000ABF6C(uint64_t a1@<X0>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  if (!*a2)
  {
    *a3 = 0LL;
    a3[1] = 0LL;
    return;
  }

  memset(v18, 170, sizeof(v18));
  sub_1000AC168(a1, a2, (uint64_t)v18);
  uint64_t v6 = v18[0];
  if (v18[0]) {
    BOOL v7 = LOBYTE(v18[2]) == 0;
  }
  else {
    BOOL v7 = 0;
  }
  if (!v7) {
    goto LABEL_16;
  }
  int v8 = (os_log_s *)qword_100131928;
  if (os_log_type_enabled((os_log_t)qword_100131928, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v9 = (void *)(*a2 + 8);
    *(_DWORD *)std::string buf = 136446210;
    std::string::size_type v20 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "[Configurer] -- Config store does NOT already contain config '%{public}s'. Proceeding and attempting to store",  buf,  0xCu);
  }

  char v10 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 64) + 80LL))(*(void *)(a1 + 64), v6);
  unint64_t v11 = (os_log_s *)qword_100131928;
  if ((v10 & 1) != 0)
  {
    if (os_log_type_enabled((os_log_t)qword_100131928, OS_LOG_TYPE_DEFAULT))
    {
      __int128 v12 = (void *)(*a2 + 8);
      *(_DWORD *)std::string buf = 136446210;
      std::string::size_type v20 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "[Configurer] -- Try store config '%{public}s': success!",  buf,  0xCu);
    }

void sub_1000AC168(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = *a2;
  if (!*a2)
  {
    *(void *)a3 = 0LL;
    *(void *)(a3 + sub_100007004((uint64_t)v1 + 8) = 0LL;
    *(_BYTE *)(a3 + 16) = 0;
    return;
  }

  unint64_t v21 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000E2D0(v5, &v21);
  uint64_t v7 = v21;
  int v8 = (os_log_s *)qword_100131928;
  if (v21)
  {
    if (os_log_type_enabled((os_log_t)qword_100131928, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v9 = (void *)(*a2 + 8);
      *(_DWORD *)std::string buf = 136446210;
      __int128 v24 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "[Configurer] -- Config '%{public}s' loaded successfully!",  buf,  0xCu);
      uint64_t v7 = v21;
    }

    if (sub_1000D18E0(*(void *)(a1 + 64), v7))
    {
      char v10 = (os_log_s *)qword_100131928;
      if (os_log_type_enabled((os_log_t)qword_100131928, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v11 = (void *)(*a2 + 8);
        *(_DWORD *)std::string buf = 136446210;
        __int128 v24 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "[Configurer] -- Config store contains '%{public}s': success; already present",
          buf,
          0xCu);
      }

      unint64_t v12 = v22;
      *(void *)a3 = v21;
      *(void *)(a3 + sub_100007004((uint64_t)v1 + 8) = v12;
      if (v12)
      {
        __int128 v13 = (unint64_t *)(v12 + 8);
        do
          unint64_t v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }

      *(_BYTE *)(a3 + 16) = 1;
      goto LABEL_24;
    }

    unint64_t v15 = v22;
    *(void *)a3 = v21;
    *(void *)(a3 + sub_100007004((uint64_t)v1 + 8) = v15;
    if (v15)
    {
      unint64_t v16 = (unint64_t *)(v15 + 8);
      do
        unint64_t v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_100131928, OS_LOG_TYPE_ERROR)) {
      sub_1000AF454();
    }
    *(void *)a3 = 0LL;
    *(void *)(a3 + sub_100007004((uint64_t)v1 + 8) = 0LL;
  }

  *(_BYTE *)(a3 + 16) = 0;
LABEL_24:
  int v18 = (std::__shared_weak_count *)v22;
  if (v22)
  {
    uint64_t v19 = (unint64_t *)(v22 + 8);
    do
      unint64_t v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }

uint64_t sub_1000AC380(uint64_t a1, dispatch_object_t *a2)
{
  *(void *)&__int128 v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v42 = 0xAAAAAAAAAAAAAA00LL;
  __int128 v43 = v4;
  v41.__r_.__value_.__l.__cap_ = (std::string::size_type)off_10012AA00;
  sub_1000041AC((uint64_t)&v42);
  sub_1000041AC((uint64_t)&v42);
  LOBYTE(v43) = 0;
  *((void *)&v43 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0LL;
  sub_1000041AC((uint64_t)&v43);
  sub_1000041AC((uint64_t)&v43);
  v41.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
  v41.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 64) + 96LL))(&v41);
  uint64_t v5 = (os_log_s *)qword_100131928;
  if (os_log_type_enabled((os_log_t)qword_100131928, OS_LOG_TYPE_DEFAULT))
  {
    sub_100006200((uint64_t)&v41, -1, 0x20u, 0LL, 1, &__p);
    uint64_t v6 = SHIBYTE(v46) >= 0 ? &__p : (__int128 *)__p;
    *(_DWORD *)std::string buf = 136446210;
    *(void *)os_log_type_t v52 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[Configurer] == Last config: %{public}s",  buf,  0xCu);
    if (SHIBYTE(v46) < 0) {
      operator delete((void *)__p);
    }
  }

  memset(v44, 170, sizeof(v44));
  sub_1000ACBA8(a1, (uint64_t)&v41.__r_.__value_.__l.__cap_, (uint64_t)v44);
  uint64_t v7 = v44[0];
  if (v44[0])
  {
    if (!LOBYTE(v44[2]))
    {
      int v8 = (os_log_s *)qword_100131928;
      if (os_log_type_enabled((os_log_t)qword_100131928, OS_LOG_TYPE_DEFAULT))
      {
        (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(void *)v7 + 16LL))(buf, v7);
        sub_100006200((uint64_t)buf, -1, 0x20u, 0LL, 1, &__p);
        if (SHIBYTE(v46) >= 0) {
          p_p = &__p;
        }
        else {
          p_p = (__int128 *)__p;
        }
        LODWORD(v57.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)v57.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "[Configurer] === WARNING: -- Selected config %{public}s not already contained in store. Clean install or taski ng notification might not have been recieved? Storing all configs now",  (uint8_t *)&v57,  0xCu);
        if (SHIBYTE(v46) < 0) {
          operator delete((void *)__p);
        }
        sub_1000041AC((uint64_t)buf);
        sub_10000425C((uint64_t **)&v52[4], buf[0]);
      }

      sub_1000AB880(a1);
    }

    if ((sub_1000D18E0(*(void *)(a1 + 64), v7) & 1) != 0)
    {
      memset(&v57, 170, sizeof(v57));
      sub_1000D175C(v7, &v57);
      memset(&__s1, 170, sizeof(__s1));
      sub_1000D17F4(&v41, &__s1);
      uint64_t size = __s1.__r_.__value_.__s.__size_;
      if ((__s1.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v12 = __s1.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v12 = __s1.__r_.__value_.__l.__size_;
      }
      std::string::size_type v13 = v57.__r_.__value_.__s.__size_;
      if ((v57.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        std::string::size_type v13 = v57.__r_.__value_.__l.__size_;
      }
      if (v12 == v13)
      {
        if ((v57.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          char v10 = &v57;
        }
        else {
          char v10 = (std::string *)v57.__r_.__value_.__r.__words[0];
        }
        if ((__s1.__r_.__value_.__s.__size_ & 0x80) == 0)
        {
          if (__s1.__r_.__value_.__s.__size_)
          {
            p_s1 = &__s1;
            while (p_s1->__r_.__value_.__s.__data_[0] == v10->__r_.__value_.__s.__data_[0])
            {
              p_s1 = (std::string *)((char *)p_s1 + 1);
              char v10 = (std::string *)((char *)v10 + 1);
              if (!--size) {
                goto LABEL_50;
              }
            }

            goto LABEL_39;
          }

LABEL_72:
  uint64_t v31 = (std::__shared_weak_count *)v44[1];
  if (v44[1])
  {
    uint64_t v32 = (unint64_t *)(v44[1] + 8LL);
    do
      unint64_t v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }

  sub_1000041AC((uint64_t)&v41);
  sub_10000425C((uint64_t **)&v41.__r_.__value_.__l.__size_, v41.__r_.__value_.__s.__data_[0]);
  v41.__r_.__value_.__l.__cap_ = (std::string::size_type)off_10012AA00;
  sub_1000041AC((uint64_t)&v43);
  sub_10000425C((uint64_t **)&v43 + 1, v43);
  sub_1000041AC((uint64_t)&v42);
  sub_10000425C((uint64_t **)&v42 + 1, v42);
  return nullsub_4(&v41.__r_.__value_.__r.__words[2]);
}

void sub_1000ACB9C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

void sub_1000ACBA8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v77 = v76;
  char v78 = 1;
  unint64_t v80 = (_BYTE *)sub_1000AF290((uint64_t)v79, "Selecting config");
  char v81 = 1;
  sub_10000BA40((uint64_t)v82, (uint64_t)v76, 2LL, 1, 2);
  char v84 = (unsigned __int8 *)v82;
  char v85 = 1;
  sub_10000BA40((uint64_t)v73, (uint64_t)v82, 1LL, 1, 2);
  (*(void (**)(uint64_t, const char *, char *))(*(void *)a2 + 16LL))( a2,  "Configurer::SelectConfiguration",  v73);
  sub_1000041AC((uint64_t)v73);
  sub_10000425C(&v74, v73[0]);
  sub_1000041AC((uint64_t)v82);
  sub_10000425C(&v83, v82[0]);
  for (uint64_t i = 0LL; i != -64; i -= 32LL)
  {
    sub_1000041AC((uint64_t)&v79[i]);
    sub_10000425C((uint64_t **)&v79[i + 8], v79[i]);
  }

  memset(v72, 170, sizeof(v72));
  (*(void (**)(void *__return_ptr))(**(void **)(a1 + 48) + 16LL))(v72);
  uint64_t v6 = (uint64_t *)v72[0];
  uint64_t v7 = (uint64_t *)v72[1];
  if (v72[0] == v72[1])
  {
    sub_10002BC40((uint64_t)v76, "message");
    BOOL v77 = v76;
    char v78 = 1;
    unint64_t v80 = (_BYTE *)sub_1000AF320((uint64_t)v79, "No configs visible");
    char v81 = 1;
    sub_10000BA40((uint64_t)v82, (uint64_t)v76, 2LL, 1, 2);
    char v84 = (unsigned __int8 *)v82;
    char v85 = 1;
    sub_10000BA40((uint64_t)v70, (uint64_t)v82, 1LL, 1, 2);
    (*(void (**)(uint64_t, const char *, char *))(*(void *)a2 + 40LL))( a2,  "Configurer::SelectConfiguration",  v70);
    sub_1000041AC((uint64_t)v70);
    sub_10000425C(&v71, v70[0]);
    sub_1000041AC((uint64_t)v82);
    sub_10000425C(&v83, v82[0]);
    for (uint64_t j = 0LL; j != -64; j -= 32LL)
    {
      sub_1000041AC((uint64_t)&v79[j]);
      sub_10000425C((uint64_t **)&v79[j + 8], v79[j]);
    }

    *(void *)a3 = 0LL;
    *(void *)(a3 + sub_100007004((uint64_t)v1 + 8) = 0LL;
    *(_BYTE *)(a3 + 16) = 0;
  }

  else
  {
    char v8 = 0;
    uint64_t v68 = 0LL;
    int64_t v69 = 0LL;
    uint64_t v66 = 0LL;
    uint64_t v67 = 0LL;
    do
    {
      memset(v75, 170, sizeof(v75));
      sub_1000AC168(a1, v6, (uint64_t)v75);
      if (*(void *)v75)
      {
        sub_100025178(&v68, (uint64_t *)v75);
        sub_100025178(&v66, v6);
        char v8 = v75[16];
        sub_10002BC40((uint64_t)v76, "message");
        BOOL v77 = v76;
        char v78 = 1;
        std::operator+<char>(&v60, "Successfully loaded and found config in store ", *v6 + 8);
        unint64_t v9 = std::string::append(&v60, " (");
        __int128 v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        v61.__r_.__value_.__l.__cap_ = v9->__r_.__value_.__l.__cap_;
        *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v10;
        v9->__r_.__value_.__l.__size_ = 0LL;
        v9->__r_.__value_.__l.__cap_ = 0LL;
        v9->__r_.__value_.__r.__words[0] = 0LL;
        int v11 = *(char *)(*v6 + 55);
        if (v11 >= 0) {
          std::string::size_type v12 = (const std::string::value_type *)(*v6 + 32);
        }
        else {
          std::string::size_type v12 = *(const std::string::value_type **)(*v6 + 32);
        }
        if (v11 >= 0) {
          std::string::size_type v13 = *(unsigned __int8 *)(*v6 + 55);
        }
        else {
          std::string::size_type v13 = *(void *)(*v6 + 40);
        }
        unint64_t v14 = std::string::append(&v61, v12, v13);
        __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
        v62.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
        *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v15;
        v14->__r_.__value_.__l.__size_ = 0LL;
        v14->__r_.__value_.__l.__cap_ = 0LL;
        v14->__r_.__value_.__r.__words[0] = 0LL;
        uint64_t v16 = std::string::append(&v62, ")");
        __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v17;
        v16->__r_.__value_.__l.__size_ = 0LL;
        v16->__r_.__value_.__l.__cap_ = 0LL;
        v16->__r_.__value_.__r.__words[0] = 0LL;
        sub_100008E5C((uint64_t)v79, (uint64_t)&__p);
        unint64_t v80 = v79;
        char v81 = 1;
        sub_10000BA40((uint64_t)v82, (uint64_t)v76, 2LL, 1, 2);
        char v84 = (unsigned __int8 *)v82;
        char v85 = 1;
        sub_10000BA40((uint64_t)v64, (uint64_t)v82, 1LL, 1, 2);
        (*(void (**)(uint64_t, const char *, char *))(*(void *)a2 + 16LL))( a2,  "Configurer::SelectConfiguration",  v64);
        sub_1000041AC((uint64_t)v64);
        sub_10000425C(&v65, v64[0]);
        sub_1000041AC((uint64_t)v82);
        sub_10000425C(&v83, v82[0]);
        for (uint64_t k = 0LL; k != -64; k -= 32LL)
        {
          sub_1000041AC((uint64_t)&v79[k]);
          sub_10000425C((uint64_t **)&v79[k + 8], v79[k]);
        }
      }

      else
      {
        sub_10002BC40((uint64_t)v76, "message");
        BOOL v77 = v76;
        char v78 = 1;
        std::operator+<char>(&v60, "Failed to load config or find config in store ", *v6 + 8);
        uint64_t v19 = std::string::append(&v60, " (");
        __int128 v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        v61.__r_.__value_.__l.__cap_ = v19->__r_.__value_.__l.__cap_;
        *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v20;
        v19->__r_.__value_.__l.__size_ = 0LL;
        v19->__r_.__value_.__l.__cap_ = 0LL;
        v19->__r_.__value_.__r.__words[0] = 0LL;
        int v21 = *(char *)(*v6 + 55);
        if (v21 >= 0) {
          uint64_t v22 = (const std::string::value_type *)(*v6 + 32);
        }
        else {
          uint64_t v22 = *(const std::string::value_type **)(*v6 + 32);
        }
        if (v21 >= 0) {
          std::string::size_type v23 = *(unsigned __int8 *)(*v6 + 55);
        }
        else {
          std::string::size_type v23 = *(void *)(*v6 + 40);
        }
        __int128 v24 = std::string::append(&v61, v22, v23);
        __int128 v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        v62.__r_.__value_.__l.__cap_ = v24->__r_.__value_.__l.__cap_;
        *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v25;
        v24->__r_.__value_.__l.__size_ = 0LL;
        v24->__r_.__value_.__l.__cap_ = 0LL;
        v24->__r_.__value_.__r.__words[0] = 0LL;
        unint64_t v26 = std::string::append(&v62, ")");
        __int128 v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__l.__cap_ = v26->__r_.__value_.__l.__cap_;
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v27;
        v26->__r_.__value_.__l.__size_ = 0LL;
        v26->__r_.__value_.__l.__cap_ = 0LL;
        v26->__r_.__value_.__r.__words[0] = 0LL;
        sub_100008E5C((uint64_t)v79, (uint64_t)&__p);
        unint64_t v80 = v79;
        char v81 = 1;
        sub_10000BA40((uint64_t)v82, (uint64_t)v76, 2LL, 1, 2);
        char v84 = (unsigned __int8 *)v82;
        char v85 = 1;
        sub_10000BA40((uint64_t)v58, (uint64_t)v82, 1LL, 1, 2);
        (*(void (**)(uint64_t, const char *, char *))(*(void *)a2 + 16LL))( a2,  "Configurer::SelectConfiguration",  v58);
        sub_1000041AC((uint64_t)v58);
        sub_10000425C(&v59, v58[0]);
        sub_1000041AC((uint64_t)v82);
        sub_10000425C(&v83, v82[0]);
        for (uint64_t m = 0LL; m != -64; m -= 32LL)
        {
          sub_1000041AC((uint64_t)&v79[m]);
          sub_10000425C((uint64_t **)&v79[m + 8], v79[m]);
        }
      }

      char v29 = *(std::__shared_weak_count **)&v75[8];
      if (*(void *)&v75[8])
      {
        unint64_t v30 = (unint64_t *)(*(void *)&v75[8] + 8LL);
        do
          unint64_t v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }

      v6 += 2;
    }

    while (v6 != v7);
    if (v68)
    {
      sub_10002BC40((uint64_t)v76, "message");
      BOOL v77 = v76;
      char v78 = 1;
      std::operator+<char>(&v61, "Selected config: ", v66 + 8);
      uint64_t v32 = std::string::append(&v61, " (");
      __int128 v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v62.__r_.__value_.__l.__cap_ = v32->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0LL;
      v32->__r_.__value_.__l.__cap_ = 0LL;
      v32->__r_.__value_.__r.__words[0] = 0LL;
      int v34 = *(char *)(v66 + 55);
      if (v34 >= 0) {
        unint64_t v35 = (const std::string::value_type *)(v66 + 32);
      }
      else {
        unint64_t v35 = *(const std::string::value_type **)(v66 + 32);
      }
      if (v34 >= 0) {
        std::string::size_type v36 = *(unsigned __int8 *)(v66 + 55);
      }
      else {
        std::string::size_type v36 = *(void *)(v66 + 40);
      }
      unint64_t v37 = std::string::append(&v62, v35, v36);
      __int128 v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__l.__cap_ = v37->__r_.__value_.__l.__cap_;
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0LL;
      v37->__r_.__value_.__l.__cap_ = 0LL;
      v37->__r_.__value_.__r.__words[0] = 0LL;
      uint64_t v39 = std::string::append(&__p, ")");
      __int128 v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      *(void *)&v75[16] = v39->__r_.__value_.__l.__cap_;
      *(_OWORD *)char v75 = v40;
      v39->__r_.__value_.__l.__size_ = 0LL;
      v39->__r_.__value_.__l.__cap_ = 0LL;
      v39->__r_.__value_.__r.__words[0] = 0LL;
      unint64_t v80 = (_BYTE *)sub_100008E5C((uint64_t)v79, (uint64_t)v75);
      char v81 = 1;
      sub_10000BA40((uint64_t)v82, (uint64_t)v76, 2LL, 1, 2);
      char v84 = (unsigned __int8 *)v82;
      char v85 = 1;
      sub_10000BA40((uint64_t)v56, (uint64_t)v82, 1LL, 1, 2);
      (*(void (**)(uint64_t, const char *, char *))(*(void *)a2 + 16LL))( a2,  "Configurer::SelectConfiguration",  v56);
      sub_1000041AC((uint64_t)v56);
      sub_10000425C(&v57, v56[0]);
      sub_1000041AC((uint64_t)v82);
      sub_10000425C(&v83, v82[0]);
      for (uint64_t n = 0LL; n != -64; n -= 32LL)
      {
        sub_1000041AC((uint64_t)&v79[n]);
        sub_10000425C((uint64_t **)&v79[n + 8], v79[n]);
      }

      if ((v75[23] & 0x80000000) != 0) {
        operator delete(*(void **)v75);
      }
    }

    else
    {
      sub_10002BC40((uint64_t)v76, "message");
      BOOL v77 = v76;
      char v78 = 1;
      unint64_t v80 = (_BYTE *)sub_10002BD60((uint64_t)v79, "No config selected?!");
      char v81 = 1;
      sub_10000BA40((uint64_t)v82, (uint64_t)v76, 2LL, 1, 2);
      char v84 = (unsigned __int8 *)v82;
      char v85 = 1;
      sub_10000BA40((uint64_t)v54, (uint64_t)v82, 1LL, 1, 2);
      (*(void (**)(uint64_t, const char *, char *))(*(void *)a2 + 40LL))( a2,  "Configurer::SelectConfiguration",  v54);
      sub_1000041AC((uint64_t)v54);
      sub_10000425C(&v55, v54[0]);
      sub_1000041AC((uint64_t)v82);
      sub_10000425C(&v83, v82[0]);
      for (iuint64_t i = 0LL; ii != -64; ii -= 32LL)
      {
        sub_1000041AC((uint64_t)&v79[ii]);
        sub_10000425C((uint64_t **)&v79[ii + 8], v79[ii]);
      }
    }

    __int128 v44 = v69;
    *(void *)a3 = v68;
    *(void *)(a3 + sub_100007004((uint64_t)v1 + 8) = v44;
    if (v44)
    {
      p_shared_owners = (unint64_t *)&v44->__shared_owners_;
      do
        unint64_t v46 = __ldxr(p_shared_owners);
      while (__stxr(v46 + 1, p_shared_owners));
    }

    *(_BYTE *)(a3 + 16) = v8;
    char v47 = v67;
    if (v67)
    {
      unint64_t v48 = (unint64_t *)&v67->__shared_owners_;
      do
        unint64_t v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }

    char v50 = v69;
    if (v69)
    {
      uint64_t v51 = (unint64_t *)&v69->__shared_owners_;
      do
        unint64_t v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
  }

  v76[0] = (void **)v72;
  sub_1000100E4(v76);
}

void sub_1000AD5BC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1000AD5CC(uint64_t a1, uint64_t a2, dispatch_object_t *a3)
{
  uint64_t v5 = (os_log_s *)qword_100131928;
  if (os_log_type_enabled((os_log_t)qword_100131928, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[Configurer] === Notifying observers configuration will change",  buf,  2u);
  }

  uint64_t v6 = *(uint64_t **)(a1 + 24);
  for (uint64_t i = *(uint64_t **)(a1 + 32); v6 != i; v6 += 2)
  {
    *(void *)std::string buf = 0xAAAAAAAAAAAAAAAALL;
    char v8 = (std::__shared_weak_count *)v6[1];
    if (v8)
    {
      unint64_t v9 = std::__shared_weak_count::lock(v8);
      __int128 v17 = v9;
      if (v9)
      {
        __int128 v10 = v9;
        uint64_t v11 = *v6;
        *(void *)std::string buf = v11;
        if (v11)
        {
          dispatch_object_t object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
          (*(void (**)(dispatch_object_t *__return_ptr))(*(void *)v11 + 24LL))(&object);
          if (object)
          {
            sub_10003A820(a3, (dispatch_group_s **)&object);
            if (object) {
              dispatch_release(object);
            }
          }
        }

        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          unint64_t v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
  }

  unint64_t v14 = (os_log_s *)qword_100131928;
  if (os_log_type_enabled((os_log_t)qword_100131928, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "[Configurer] === Completed notifying observers configuration will change",  buf,  2u);
  }

void sub_1000AD75C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, char a11)
{
  if (object) {
    dispatch_release(object);
  }
  sub_100007004((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1000AD784(uint64_t a1, uint64_t a2, dispatch_object_t *a3)
{
  uint64_t v5 = (os_log_s *)qword_100131928;
  if (os_log_type_enabled((os_log_t)qword_100131928, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[Configurer] === Notifying observers configuration conditions will change",  buf,  2u);
  }

  uint64_t v6 = *(uint64_t **)(a1 + 24);
  for (uint64_t i = *(uint64_t **)(a1 + 32); v6 != i; v6 += 2)
  {
    *(void *)std::string buf = 0xAAAAAAAAAAAAAAAALL;
    char v8 = (std::__shared_weak_count *)v6[1];
    if (v8)
    {
      unint64_t v9 = std::__shared_weak_count::lock(v8);
      uint64_t v16 = v9;
      if (v9)
      {
        __int128 v10 = v9;
        uint64_t v11 = *v6;
        *(void *)std::string buf = v11;
        if (v11)
        {
          dispatch_object_t object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
          (*(void (**)(dispatch_object_t *__return_ptr))(*(void *)v11 + 32LL))(&object);
          if (object)
          {
            sub_10003A820(a3, (dispatch_group_s **)&object);
            if (object) {
              dispatch_release(object);
            }
          }
        }

        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          unint64_t v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
  }

void sub_1000AD8D8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, char a11)
{
  if (object) {
    dispatch_release(object);
  }
  sub_100007004((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1000AD900(uint64_t a1, uint64_t a2, dispatch_object_t *a3)
{
  uint64_t v5 = (os_log_s *)qword_100131928;
  if (os_log_type_enabled((os_log_t)qword_100131928, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[Configurer] === Notifying observers new configuration activated",  buf,  2u);
  }

  uint64_t v6 = *(uint64_t **)(a1 + 24);
  for (uint64_t i = *(uint64_t **)(a1 + 32); v6 != i; v6 += 2)
  {
    *(void *)std::string buf = 0xAAAAAAAAAAAAAAAALL;
    char v8 = (std::__shared_weak_count *)v6[1];
    if (v8)
    {
      unint64_t v9 = std::__shared_weak_count::lock(v8);
      uint64_t v16 = v9;
      if (v9)
      {
        __int128 v10 = v9;
        uint64_t v11 = *v6;
        *(void *)std::string buf = v11;
        if (v11)
        {
          dispatch_object_t object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
          (*(void (**)(dispatch_object_t *__return_ptr))(*(void *)v11 + 16LL))(&object);
          if (object)
          {
            sub_10003A820(a3, (dispatch_group_s **)&object);
            if (object) {
              dispatch_release(object);
            }
          }
        }

        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          unint64_t v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
  }

void sub_1000ADA54( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, char a11)
{
  if (object) {
    dispatch_release(object);
  }
  sub_100007004((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1000ADA7C(uint64_t a1, uint64_t a2, dispatch_object_t *a3)
{
  uint64_t v5 = (os_log_s *)qword_100131928;
  if (os_log_type_enabled((os_log_t)qword_100131928, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[Configurer] === Notifying observers current configuration conditions changed",  buf,  2u);
  }

  uint64_t v6 = *(uint64_t **)(a1 + 24);
  for (uint64_t i = *(uint64_t **)(a1 + 32); v6 != i; v6 += 2)
  {
    *(void *)std::string buf = 0xAAAAAAAAAAAAAAAALL;
    char v8 = (std::__shared_weak_count *)v6[1];
    if (v8)
    {
      unint64_t v9 = std::__shared_weak_count::lock(v8);
      uint64_t v16 = v9;
      if (v9)
      {
        __int128 v10 = v9;
        uint64_t v11 = *v6;
        *(void *)std::string buf = v11;
        if (v11)
        {
          dispatch_object_t object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
          (*(void (**)(dispatch_object_t *__return_ptr))(*(void *)v11 + 40LL))(&object);
          if (object)
          {
            sub_10003A820(a3, (dispatch_group_s **)&object);
            if (object) {
              dispatch_release(object);
            }
          }
        }

        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          unint64_t v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
  }

void sub_1000ADBD0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, char a11)
{
  if (object) {
    dispatch_release(object);
  }
  sub_100007004((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1000ADBF8(uint64_t a1, uint64_t a2, dispatch_object_t *a3)
{
  BOOL v5 = sub_10009346C();
  sub_1000935D4();
  BOOL v7 = sub_10009346C();
  if (v5 != v7)
  {
    sub_1000AD784(a1, v6, a3);
  }

void *sub_1000ADC70(void *a1, void *a2)
{
  *a1 = a2;
  __int128 v4 = operator new(0x20uLL);
  *__int128 v4 = &off_10012C248;
  v4[1] = 0LL;
  void v4[2] = 0LL;
  v4[3] = a2;
  a1[1] = v4;
  sub_10000CCC8((uint64_t)a1, a2, (uint64_t)a2);
  return a1;
}

void sub_1000ADCC4(void *a1)
{
}

void sub_1000ADCE4(_Unwind_Exception *a1)
{
}

void sub_1000ADCFC(std::__shared_weak_count *a1)
{
}

void sub_1000ADD10(uint64_t a1)
{
}

uint64_t sub_1000ADD24(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

void sub_1000ADD64(uint64_t a1)
{
  if (a1)
  {
    sub_100007004(a1 + 96);
    sub_100007004(a1 + 80);
    sub_100007004(a1 + 64);
    sub_100007004(a1 + 48);
    uint64_t v3 = (void **)(a1 + 24);
    sub_100030CAC(&v3);
    __int128 v2 = (void *)sub_100022C54(a1);
    operator delete(v2);
  }

void sub_1000ADDF4(dispatch_object_t **a1)
{
  BOOL v5 = *a1;
  dispatch_object_t v2 = *v5;
  *(void *)&__int128 v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v7 = 0xAAAAAAAAAAAAAA00LL;
  __int128 v8 = v3;
  uint64_t v6 = off_10012AA00;
  sub_1000041AC((uint64_t)&v7);
  sub_1000041AC((uint64_t)&v7);
  LOBYTE(vsub_100007004((uint64_t)v1 + 8) = 0;
  *((void *)&v8 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0LL;
  sub_1000041AC((uint64_t)&v8);
  sub_1000041AC((uint64_t)&v8);
  sub_1000ADA7C((uint64_t)v2, v4, v5 + 1);
  uint64_t v6 = off_10012AA00;
  sub_1000041AC((uint64_t)&v8);
  sub_10000425C((uint64_t **)&v8 + 1, v8);
  sub_1000041AC((uint64_t)&v7);
  sub_10000425C((uint64_t **)&v7 + 1, v7);
  nullsub_4(&v6);
  sub_100025588(&v5);
  sub_100007004((uint64_t)(a1 + 1));
  operator delete(a1);
}

void sub_1000ADF20( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, unsigned __int8 a12, uint64_t a13, unsigned __int8 a14)
{
}

void sub_1000ADF78(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = **(void **)(a1 + 40);
  *(_OWORD *)a2 = xmmword_1000F8870;
  *(_BYTE *)a2 = 2;
  v16[0] = 0LL;
  uint64_t v12 = 0LL;
  *(void *)(a2 + sub_100007004((uint64_t)v14 + 8) = sub_10000BD28((uint64_t *)v16, &v12);
  sub_1000041AC(a2);
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v15 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr))(**(void **)(v3 + 64) + 96LL))(&v14);
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(v3 + 48) + 16LL))(&v12);
  uint64_t v4 = v12;
  uint64_t v5 = v13;
  if (v13 != v12)
  {
    while (1)
    {
      uint64_t v7 = *(void *)(v5 - 16);
      v5 -= 16LL;
      uint64_t v6 = v7;
      if (v7) {
        break;
      }
LABEL_9:
      if (v5 == v4) {
        goto LABEL_10;
      }
    }

    unint64_t v10 = 0xAAAAAAAAAAAAAAAALL;
    uint64_t v11 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    v16[0] = (void **)&off_10012C2E8;
    v16[1] = (void **)v3;
    void v16[2] = (void **)&v14;
    __int128 v17 = v16;
    sub_10000E380(v6, (uint64_t)v16, (uint64_t)&v10);
    __int128 v8 = v17;
    if (v17 == v16)
    {
      __int128 v8 = v16;
      uint64_t v9 = 4LL;
    }

    else
    {
      if (!v17)
      {
LABEL_8:
        sub_100080EB8(a2, (uint64_t)&v10);
        sub_1000041AC((uint64_t)&v10);
        sub_10000425C(&v11, v10);
        uint64_t v4 = v12;
        goto LABEL_9;
      }

      uint64_t v9 = 5LL;
    }

    ((void (*)(void))(*v8)[v9])();
    goto LABEL_8;
  }

void sub_1000AE118( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16)
{
}

void sub_1000AE17C(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 40) + 16LL))(&v5);
  uint64_t v2 = *(void *)(a1 + 32);
  sub_1000041AC((uint64_t)&v5);
  char v3 = *(_BYTE *)v2;
  *(_BYTE *)uint64_t v2 = v5;
  LOBYTE(v5) = v3;
  uint64_t v4 = *(uint64_t **)(v2 + 8);
  *(void *)(v2 + sub_100007004((uint64_t)v14 + 8) = v6;
  uint64_t v6 = v4;
  sub_1000041AC(v2);
  sub_1000041AC((uint64_t)&v5);
  sub_10000425C(&v6, v5);
}

__n128 sub_1000AE238(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &off_10012C2E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + sub_100007004((uint64_t)v14 + 8) = result;
  return result;
}

__n128 sub_1000AE270(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10012C2E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + sub_100007004((uint64_t)v14 + 8) = result;
  return result;
}

void sub_1000AE290(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
  std::string::size_type v23 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10000BA40((uint64_t)&v22, 0LL, 0LL, 0, 1);
  unsigned int v7 = sub_1000D18E0(*(void *)(v6 + 64), a2);
  v20[0] = 4;
  unint64_t v21 = v7;
  sub_1000041AC((uint64_t)v20);
  sub_1000041AC((uint64_t)v20);
  __int128 v8 = sub_100003F94((unsigned __int8 *)&v22, "storedInDatabase");
  sub_1000041AC((uint64_t)v20);
  unsigned __int8 v9 = *(_BYTE *)v8;
  *(_BYTE *)__int128 v8 = v20[0];
  v20[0] = v9;
  unint64_t v10 = (uint64_t *)v8[1];
  v8[1] = v21;
  unint64_t v21 = (unint64_t)v10;
  sub_1000041AC((uint64_t)v8);
  sub_1000041AC((uint64_t)v20);
  sub_10000425C((uint64_t **)&v21, v20[0]);
  int v11 = **(unsigned __int8 **)(a1 + 16);
  if (v11 == 1)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a2 + 16LL))(&v16, a2);
    uint64_t v12 = (uint64_t *)sub_10002CE28((unsigned __int8 *)&v16, *(unsigned __int8 **)(a1 + 16));
  }

  else
  {
    uint64_t v12 = 0LL;
  }

  v18[0] = 4;
  uint64_t v19 = v12;
  sub_1000041AC((uint64_t)v18);
  sub_1000041AC((uint64_t)v18);
  uint64_t v13 = sub_100003F94((unsigned __int8 *)&v22, "isActive");
  sub_1000041AC((uint64_t)v18);
  unsigned __int8 v14 = *(_BYTE *)v13;
  *(_BYTE *)uint64_t v13 = v18[0];
  v18[0] = v14;
  uint64_t v15 = (uint64_t *)v13[1];
  v13[1] = (uint64_t)v19;
  uint64_t v19 = v15;
  sub_1000041AC((uint64_t)v13);
  sub_1000041AC((uint64_t)v18);
  sub_10000425C(&v19, v18[0]);
  if (v11 == 1)
  {
    sub_1000041AC((uint64_t)&v16);
    sub_10000425C(&v17, v16);
  }

  *(_BYTE *)a3 = v22;
  *(void *)(a3 + sub_100007004((uint64_t)v14 + 8) = v23;
  sub_1000041AC((uint64_t)&v22);
  LOBYTE(v2sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = 0;
  std::string::size_type v23 = 0LL;
  sub_1000041AC(a3);
  sub_1000041AC((uint64_t)&v22);
  sub_10000425C(&v23, v22);
}

void sub_1000AE4C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v5 = va_arg(va1, uint64_t *);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v13 = va_arg(va3, void);
  sub_1000041AC((uint64_t)va1);
  sub_10000425C(v2, v8);
  if (v3 == 1) {
    sub_1000AF5EC((uint64_t **)va);
  }
  sub_1000041AC((uint64_t)va2);
  sub_10000425C((uint64_t **)va3, v13);
  _Unwind_Resume(a1);
}

uint64_t sub_1000AE530(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1000AE56C()
{
  return &off_10012C358;
}

void sub_1000AE578(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(**(void **)(a1 + 40) + 64LL);
  if (v3)
  {
    unint64_t v21 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v22 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    (*(void (**)(unint64_t *__return_ptr))(*(void *)v3 + 96LL))(&v21);
    *a2 = 0xAAAAAAAAAAAAAA00LL;
    a2[1] = 0LL;
    sub_1000041AC((uint64_t)a2);
    sub_1000041AC((uint64_t)a2);
    if (v21 == 1)
    {
      sub_10002BBB0((uint64_t)v50, "Name");
      uint64_t v51 = v50;
      char v52 = 1;
      sub_1000184F4((uint64_t)&v21, "name", (uint64_t)v18);
      uint64_t v4 = sub_100018150(v18);
      uint64_t v54 = sub_10000C3E4((uint64_t)v53, (uint64_t)v4);
      char v55 = 1;
      sub_10000BA40((uint64_t)v56, (uint64_t)v50, 2LL, 1, 2);
      v57[1] = (uint64_t *)v56;
      char v58 = 1;
      sub_10000BA40((uint64_t)v59, (uint64_t)v56, 1LL, 1, 2);
      std::string v60 = v59;
      char v61 = 1;
      sub_10002BBB0((uint64_t)v41, "uuid");
      __int128 v42 = v41;
      char v43 = 1;
      sub_1000184F4((uint64_t)&v21, "uuid", (uint64_t)v17);
      uint64_t v5 = sub_100018150(v17);
      uint64_t v45 = sub_10000C3E4((uint64_t)v44, (uint64_t)v5);
      char v46 = 1;
      sub_10000BA40((uint64_t)v47, (uint64_t)v41, 2LL, 1, 2);
      v48[1] = (uint64_t *)v47;
      char v49 = 1;
      sub_10000BA40((uint64_t)v62, (uint64_t)v47, 1LL, 1, 2);
      v62[2] = v62;
      char v63 = 1;
      sub_100050F04((uint64_t)v32, "Build Date");
      __int128 v33 = v32;
      char v34 = 1;
      sub_1000184F4((uint64_t)&v21, "builtOnDate", (uint64_t)v16);
      uint64_t v6 = sub_100018150(v16);
      uint64_t v36 = sub_10000C3E4((uint64_t)v35, (uint64_t)v6);
      char v37 = 1;
      sub_10000BA40((uint64_t)v38, (uint64_t)v32, 2LL, 1, 2);
      v39[1] = (uint64_t *)v38;
      char v40 = 1;
      sub_10000BA40((uint64_t)v64, (uint64_t)v38, 1LL, 1, 2);
      v64[2] = v64;
      char v65 = 1;
      sub_10002BC40((uint64_t)v23, "Version");
      __int128 v24 = v23;
      char v25 = 1;
      sub_1000184F4((uint64_t)&v21, "version", (uint64_t)v15);
      uint64_t v7 = sub_100018150(v15);
      uint64_t v27 = sub_10000C3E4((uint64_t)v26, (uint64_t)v7);
      char v28 = 1;
      sub_10000BA40((uint64_t)v29, (uint64_t)v23, 2LL, 1, 2);
      v30[1] = (uint64_t *)v29;
      char v31 = 1;
      sub_10000BA40((uint64_t)v66, (uint64_t)v29, 1LL, 1, 2);
      uint64_t v67 = v66;
      char v68 = 1;
      sub_10000BA40((uint64_t)v19, (uint64_t)v59, 4LL, 1, 2);
      sub_1000041AC((uint64_t)v19);
      char v8 = *(_BYTE *)a2;
      *(_BYTE *)a2 = v19[0];
      v19[0] = v8;
      unsigned __int8 v9 = (uint64_t *)a2[1];
      a2[1] = v20;
      __int128 v20 = v9;
      sub_1000041AC((uint64_t)a2);
      sub_1000041AC((uint64_t)v19);
      sub_10000425C(&v20, v19[0]);
      for (uint64_t i = 0LL; i != -128; i -= 32LL)
      {
        sub_1000041AC((uint64_t)&v66[i]);
        sub_10000425C((uint64_t **)&v66[i + 8], v66[i]);
      }

      sub_1000041AC((uint64_t)v29);
      sub_10000425C(v30, v29[0]);
      for (uint64_t j = 0LL; j != -64; j -= 32LL)
      {
        sub_1000041AC((uint64_t)&v26[j]);
        sub_10000425C((uint64_t **)&v26[j + 8], v26[j]);
      }

      sub_1000041AC((uint64_t)v38);
      sub_10000425C(v39, v38[0]);
      for (uint64_t k = 0LL; k != -64; k -= 32LL)
      {
        sub_1000041AC((uint64_t)&v35[k]);
        sub_10000425C((uint64_t **)&v35[k + 8], v35[k]);
      }

      sub_1000041AC((uint64_t)v47);
      sub_10000425C(v48, v47[0]);
      for (uint64_t m = 0LL; m != -64; m -= 32LL)
      {
        sub_1000041AC((uint64_t)&v44[m]);
        sub_10000425C((uint64_t **)&v44[m + 8], v44[m]);
      }

      sub_1000041AC((uint64_t)v56);
      sub_10000425C(v57, v56[0]);
      for (uint64_t n = 0LL; n != -64; n -= 32LL)
      {
        sub_1000041AC((uint64_t)&v53[n]);
        sub_10000425C((uint64_t **)&v53[n + 8], v53[n]);
      }
    }

    sub_1000041AC((uint64_t)&v21);
    sub_10000425C(&v22, v21);
  }

  else
  {
    *(_BYTE *)a2 = 0;
    a2[1] = 0LL;
    sub_1000041AC((uint64_t)a2);
    sub_1000041AC((uint64_t)a2);
  }

void sub_1000AEAC0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, unsigned __int8 a32, uint64_t *a33, char a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, unsigned __int8 a42, uint64_t *a43, uint64_t a44, uint64_t a45, char a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,unsigned __int8 a54,uint64_t *a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  for (uint64_t i = 0LL; i != -64; i -= 32LL)
  {
    sub_1000041AC((uint64_t)(&a34 + i + 32));
    sub_10000425C((uint64_t **)(&a34 + i + 40), *(&a34 + i + 32));
  }

  sub_1000041AC((uint64_t)&a54);
  sub_10000425C(&a55, a54);
  for (uint64_t j = 0LL; j != -64; j -= 32LL)
  {
    sub_1000041AC((uint64_t)(&a46 + j + 32));
    sub_10000425C((uint64_t **)(&a46 + j + 40), *(&a46 + j + 32));
  }

  sub_1000041AC((uint64_t)&a66);
  sub_10000425C(&a67, a66);
  for (uint64_t k = 0LL; k != -64; k -= 32LL)
  {
    sub_1000041AC((uint64_t)(&a58 + k + 32));
    sub_10000425C((uint64_t **)(&a58 + k + 40), *(&a58 + k + 32));
  }

  sub_1000041AC(v73 - 248);
  sub_10000425C((uint64_t **)(v73 - 240), *(unsigned __int8 *)(v73 - 248));
  for (uint64_t m = 0LL; m != -64; m -= 32LL)
  {
    sub_1000041AC((uint64_t)(&a70 + m + 32));
    sub_10000425C((uint64_t **)(&a70 + m + 40), *(&a70 + m + 32));
  }

  sub_1000041AC((uint64_t)v70);
  sub_10000425C(v71, *v70);
  sub_1000041AC((uint64_t)&a32);
  sub_10000425C(&a33, a32);
  _Unwind_Resume(a1);
}

void sub_1000AED60(void **a1)
{
  uint64_t v2 = *a1;
  sub_1000AEE40((uint64_t *)(*v2 + 24LL), (uint64_t)(v2 + 1));
  sub_1000AEE00(&v2);
  sub_100007004((uint64_t)(a1 + 1));
  operator delete(a1);
}

void sub_1000AEDDC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void **sub_1000AEE00(void **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0LL;
  if (v2)
  {
    uint64_t v3 = (std::__shared_weak_count *)v2[2];
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    operator delete(v2);
  }

  return a1;
}

_OWORD *sub_1000AEE40(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = a1 + 2;
  unint64_t v5 = v6;
  uint64_t v7 = (_OWORD *)*(v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = ((uint64_t)v7 - *a1) >> 4;
    uint64_t v10 = v5 - *a1;
    uint64_t v11 = v10 >> 3;
    else {
      unint64_t v12 = v11;
    }
    v17[4] = v4;
    uint64_t v13 = (char *)sub_1000047F4((uint64_t)v4, v12);
    unsigned __int8 v14 = &v13[16 * v9];
    v17[0] = v13;
    v17[1] = v14;
    v17[3] = &v13[16 * v15];
    *(_OWORD *)unsigned __int8 v14 = *(_OWORD *)a2;
    *(void *)a2 = 0LL;
    *(void *)(a2 + sub_100007004((uint64_t)v9 + 8) = 0LL;
    _OWORD v17[2] = v14 + 16;
    sub_1000AEF5C(a1, v17);
    char v8 = (_OWORD *)a1[1];
    sub_10003171C(v17);
  }

  else
  {
    *uint64_t v7 = *(_OWORD *)a2;
    char v8 = v7 + 1;
    *(void *)a2 = 0LL;
    *(void *)(a2 + sub_100007004((uint64_t)v9 + 8) = 0LL;
    a1[1] = (uint64_t)v8;
  }

  a1[1] = (uint64_t)v8;
  return v8 - 1;
}

void sub_1000AEF48( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t sub_1000AEF5C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1000AEFD0((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1000AEFD0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v13 = a6;
  *((void *)&v13 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = a7;
  __int128 v12 = v13;
  v14[0] = a1;
  v14[1] = &v12;
  _OWORD v14[2] = &v13;
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }

  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      __int128 v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0LL;
      a3[1] = 0LL;
      *((void *)&v13 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = v8;
      v7 -= 16LL;
      --v8;
    }

    while (a3 != a5);
    uint64_t v10 = v13;
  }

  LOBYTE(v15) = 1;
  sub_1000AF090((uint64_t)v14);
  return v10;
}

uint64_t sub_1000AF090(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_1000316DC(a1);
  }
  return a1;
}

void sub_1000AF0C4(uint64_t a1)
{
}

void sub_1000AF0D4(uint64_t **a1)
{
  uint64_t v2 = (dispatch_object_t *)*a1;
  uint64_t v3 = **a1;
  *(void *)&__int128 v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v9 = 0xAAAAAAAAAAAAAA00LL;
  __int128 v10 = v4;
  uint64_t v8 = off_10012AA00;
  sub_1000041AC((uint64_t)&v9);
  sub_1000041AC((uint64_t)&v9);
  LOBYTE(v10) = 0;
  *((void *)&v10 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0LL;
  sub_1000041AC((uint64_t)&v10);
  sub_1000041AC((uint64_t)&v10);
  uint64_t v5 = v2 + 1;
  sub_1000ADBF8(v3, v6, v2 + 1);
  uint64_t v8 = off_10012AA00;
  sub_1000041AC((uint64_t)&v10);
  sub_10000425C((uint64_t **)&v10 + 1, v10);
  sub_1000041AC((uint64_t)&v9);
  sub_10000425C((uint64_t **)&v9 + 1, v9);
  nullsub_4(&v8);
  uint64_t v7 = (dispatch_group_s *)v2[1];
  if (v7)
  {
    dispatch_group_leave(v7);
    if (*v5) {
      dispatch_release(*v5);
    }
  }

  operator delete(v2);
  sub_100007004((uint64_t)(a1 + 1));
  operator delete(a1);
}

uint64_t sub_1000AF220(uint64_t a1)
{
  return sub_1000AB880(**(void **)(a1 + 40));
}

void sub_1000AF22C(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (dispatch_object_t *)(*a1 + 1);
  sub_1000AC380(**a1, v3);
  __int128 v4 = (dispatch_group_s *)v2[1];
  if (v4)
  {
    dispatch_group_leave(v4);
    if (*v3) {
      dispatch_release(*v3);
    }
  }

  operator delete(v2);
  sub_100007004((uint64_t)(a1 + 1));
  operator delete(a1);
}

uint64_t sub_1000AF290(uint64_t a1, char *a2)
{
  *(void *)(a1 + sub_100007004((uint64_t)v9 + 8) = 0LL;
  *(_BYTE *)a1 = 3;
  *(void *)(a1 + sub_100007004((uint64_t)v9 + 8) = sub_1000AF2D8(a2);
  sub_1000041AC(a1);
  sub_1000041AC(a1);
  return a1;
}

void *sub_1000AF2D8(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  sub_100005064(v2, a1);
  return v2;
}

void sub_1000AF30C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000AF320(uint64_t a1, char *a2)
{
  *(void *)(a1 + sub_100007004((uint64_t)v9 + 8) = 0LL;
  *(_BYTE *)a1 = 3;
  *(void *)(a1 + sub_100007004((uint64_t)v9 + 8) = sub_1000AF368(a2);
  sub_1000041AC(a1);
  sub_1000041AC(a1);
  return a1;
}

void *sub_1000AF368(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  sub_100005064(v2, a1);
  return v2;
}

void sub_1000AF39C(_Unwind_Exception *a1)
{
}

  ;
}

void sub_1000AF3CC(uint64_t a1@<X8>)
{
  *(void *)(v1 - sub_100007004((uint64_t)v9 + 8) = a1;
}

void sub_1000AF3E0()
{
  if (v3 < 0) {
    uint64_t v2 = (void *)*v2;
  }
  int v4 = 136446210;
  uint64_t v5 = v2;
  sub_1000090AC( (void *)&_mh_execute_header,  v0,  v1,  "[Configurer] ERROR: -- Try store config '%{public}s': FAILED, did not store",  (uint8_t *)&v4);
}

void sub_1000AF454()
{
  if (v3 < 0) {
    uint64_t v2 = (void *)*v2;
  }
  int v4 = 136446210;
  uint64_t v5 = v2;
  sub_1000090AC( (void *)&_mh_execute_header,  v0,  v1,  "[Configurer] ERROR: -- Try load config '%{public}s': FAILED, did not load",  (uint8_t *)&v4);
}

void sub_1000AF4C8(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "[Configurer] ERROR: -- No config could be located; deactivating all configs from store!",
    v1,
    2u);
}

void sub_1000AF534()
{
  if (v7 != v8) {
    uint64_t v9 = v6;
  }
  else {
    uint64_t v9 = v2;
  }
  *(_DWORD *)uint64_t v3 = 136446210;
  *(void *)(v3 + 4) = v9;
  sub_1000090AC( (void *)&_mh_execute_header,  v4,  (uint64_t)v4,  "[Configurer] ERROR: -- Failed to activate selected device configuration %{public}s!",  v5);
  sub_10000417C(v0);
  sub_10002C270();
}

void sub_1000AF590()
{
  if (v7 != v8) {
    uint64_t v9 = v6;
  }
  else {
    uint64_t v9 = v2;
  }
  *(_DWORD *)uint64_t v3 = 136446210;
  *(void *)(v3 + 4) = v9;
  sub_1000090AC( (void *)&_mh_execute_header,  v4,  (uint64_t)v4,  "[Configurer] ERROR: -- Selected configuration to activate %{public}s not contained in store!",  v5);
  sub_10000417C(v0);
  sub_10002C270();
}

void sub_1000AF5EC(uint64_t **a1)
{
}

void sub_1000AF614(uint64_t a1)
{
  uint64_t v2 = operator new(8uLL);
  void *v2 = &off_10012C3D8;
  sub_100005064(__p, ":and");
  unint64_t v22 = __p;
  uint64_t v3 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v22);
  uint64_t v4 = *((void *)v3 + 5);
  *((void *)v3 + 5) = v2;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v5 = operator new(8uLL);
  *uint64_t v5 = &off_10012C420;
  sub_100005064(__p, ":or");
  unint64_t v22 = __p;
  uint64_t v6 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v22);
  uint64_t v7 = *((void *)v6 + 5);
  *((void *)v6 + 5) = v5;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  char v8 = operator new(8uLL);
  *char v8 = &off_10012C468;
  sub_100005064(__p, ":xor");
  unint64_t v22 = __p;
  uint64_t v9 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v22);
  uint64_t v10 = *((void *)v9 + 5);
  *((void *)v9 + 5) = v8;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
  }
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v11 = operator new(8uLL);
  *uint64_t v11 = &off_10012C4B0;
  sub_100005064(__p, ":not");
  unint64_t v22 = __p;
  __int128 v12 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v22);
  uint64_t v13 = *((void *)v12 + 5);
  *((void *)v12 + 5) = v11;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
  }
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  unsigned __int8 v14 = operator new(8uLL);
  *unsigned __int8 v14 = &off_10012C4F8;
  sub_100005064(__p, ":if");
  unint64_t v22 = __p;
  unint64_t v15 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v22);
  uint64_t v16 = *((void *)v15 + 5);
  *((void *)v15 + 5) = v14;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8LL))(v16);
  }
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  __int128 v17 = operator new(8uLL);
  *__int128 v17 = &off_10012C540;
  sub_100005064(__p, ":ifElse");
  unint64_t v22 = __p;
  uint64_t v18 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v22);
  uint64_t v19 = *((void *)v18 + 5);
  *((void *)v18 + 5) = v17;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8LL))(v19);
  }
  if (v21 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1000AF93C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  uint64_t v16 = (void *)nullsub_4(v14);
  operator delete(v16);
  _Unwind_Resume(a1);
}

void sub_1000AF99C(uint64_t a1, uint64_t *a2)
{
  int v4 = sub_1000D21A4(a1, (uint64_t)a2);
  v7[0] = 4;
  char v8 = (uint64_t *)(v4 & sub_1000D21A4(a1, (uint64_t)a2));
  sub_1000041AC((uint64_t)v7);
  sub_1000041AC((uint64_t)v7);
  unint64_t v5 = a2[4];
  if (v5 >= a2[5])
  {
    uint64_t v6 = sub_100004B7C(a2 + 3, (uint64_t)v7);
  }

  else
  {
    *(_BYTE *)unint64_t v5 = v7[0];
    *(void *)(v5 + sub_100007004((uint64_t)v9 + 8) = v8;
    sub_1000041AC((uint64_t)v7);
    v7[0] = 0;
    char v8 = 0LL;
    sub_1000041AC(v5);
    uint64_t v6 = v5 + 16;
  }

  a2[4] = v6;
  sub_1000041AC((uint64_t)v7);
  sub_10000425C(&v8, v7[0]);
}

void sub_1000AFA94(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1000AFAA8()
{
  return 1LL;
}

void sub_1000AFAB0(uint64_t a1, uint64_t *a2)
{
  int v4 = sub_1000D21A4(a1, (uint64_t)a2);
  v7[0] = 4;
  char v8 = (uint64_t *)(v4 | sub_1000D21A4(a1, (uint64_t)a2));
  sub_1000041AC((uint64_t)v7);
  sub_1000041AC((uint64_t)v7);
  unint64_t v5 = a2[4];
  if (v5 >= a2[5])
  {
    uint64_t v6 = sub_100004B7C(a2 + 3, (uint64_t)v7);
  }

  else
  {
    *(_BYTE *)unint64_t v5 = v7[0];
    *(void *)(v5 + sub_100007004((uint64_t)v9 + 8) = v8;
    sub_1000041AC((uint64_t)v7);
    v7[0] = 0;
    char v8 = 0LL;
    sub_1000041AC(v5);
    uint64_t v6 = v5 + 16;
  }

  a2[4] = v6;
  sub_1000041AC((uint64_t)v7);
  sub_10000425C(&v8, v7[0]);
}

void sub_1000AFBA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1000AFBBC()
{
  return 1LL;
}

void sub_1000AFBC4(uint64_t a1, uint64_t *a2)
{
  int v4 = sub_1000D21A4(a1, (uint64_t)a2);
  v7[0] = 4;
  char v8 = (uint64_t *)(v4 ^ sub_1000D21A4(a1, (uint64_t)a2));
  sub_1000041AC((uint64_t)v7);
  sub_1000041AC((uint64_t)v7);
  unint64_t v5 = a2[4];
  if (v5 >= a2[5])
  {
    uint64_t v6 = sub_100004B7C(a2 + 3, (uint64_t)v7);
  }

  else
  {
    *(_BYTE *)unint64_t v5 = v7[0];
    *(void *)(v5 + sub_100007004((uint64_t)v9 + 8) = v8;
    sub_1000041AC((uint64_t)v7);
    v7[0] = 0;
    char v8 = 0LL;
    sub_1000041AC(v5);
    uint64_t v6 = v5 + 16;
  }

  a2[4] = v6;
  sub_1000041AC((uint64_t)v7);
  sub_10000425C(&v8, v7[0]);
}

void sub_1000AFCBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1000AFCD0()
{
  return 1LL;
}

void sub_1000AFCD8(uint64_t a1, uint64_t *a2)
{
  v5[0] = 4;
  uint64_t v6 = (uint64_t *)(sub_1000D21A4(a1, (uint64_t)a2) ^ 1);
  sub_1000041AC((uint64_t)v5);
  sub_1000041AC((uint64_t)v5);
  unint64_t v3 = a2[4];
  if (v3 >= a2[5])
  {
    uint64_t v4 = sub_100004B7C(a2 + 3, (uint64_t)v5);
  }

  else
  {
    *(_BYTE *)unint64_t v3 = v5[0];
    *(void *)(v3 + sub_100007004((uint64_t)v9 + 8) = v6;
    sub_1000041AC((uint64_t)v5);
    v5[0] = 0;
    uint64_t v6 = 0LL;
    sub_1000041AC(v3);
    uint64_t v4 = v3 + 16;
  }

  a2[4] = v4;
  sub_1000041AC((uint64_t)v5);
  sub_10000425C(&v6, v5[0]);
}

void sub_1000AFDBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1000AFDD0()
{
  return 1LL;
}

void sub_1000AFDD8(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v5 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D2314(a2, &v4);
  sub_1000041AC((uint64_t)&v4);
  sub_10000425C(&v5, v4);
}

void sub_1000AFE74( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t sub_1000AFE90()
{
  return 1LL;
}

void sub_1000AFE98(uint64_t a1, uint64_t a2)
{
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  char v8 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D2314(a2, &v7);
  unint64_t v5 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v6 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D2314(a2, &v5);
  else {
    unint64_t v4 = &v7;
  }
  sub_1000B0590(*(void ***)(a2 + 48), a2, v4);
  sub_1000041AC((uint64_t)&v5);
  sub_10000425C(&v6, v5);
  sub_1000041AC((uint64_t)&v7);
  sub_10000425C(&v8, v7);
}

void sub_1000AFF6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_1000AFF98()
{
  return 1LL;
}

void sub_1000AFFA4(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000AFFBC(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000AFFD4(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000AFFEC(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000B0004(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000B001C(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void *sub_1000B0030(void *result)
{
  *uint64_t result = off_10012C588;
  return result;
}

void sub_1000B0048(uint64_t a1)
{
  uint64_t v2 = operator new(8uLL);
  void *v2 = &off_10012C5C8;
  sub_100005064(__p, ":queryStateWithParameters");
  unint64_t v7 = __p;
  unint64_t v3 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v7);
  uint64_t v4 = *((void *)v3 + 5);
  *((void *)v3 + 5) = v2;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1000B0118( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  uint64_t v16 = (void *)nullsub_4(v14);
  operator delete(v16);
  _Unwind_Resume(a1);
}

void sub_1000B0148(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (uint64_t *)a2[7];
  unint64_t v3 = (uint64_t *)a2[8];
  v20[1] = v4;
  _OWORD v20[2] = v3;
  if (v3)
  {
    unint64_t v5 = (unint64_t *)(v3 + 1);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
  v20[0] = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D24DC((uint64_t)a2, &v19);
  memset(&__p, 170, sizeof(__p));
  sub_1000D1B68((uint64_t)a2, &__p);
  unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
  __int128 v17 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr, uint64_t *, std::string *, unint64_t *))(*v4 + 16))( &v16,  v4,  &__p,  &v19);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  __int128 v24 = p_p;
  unint64_t v23 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  v22[0] = v8;
  v22[1] = v8;
  sub_100008780((uint64_t)&v16, (const std::string::value_type **)&v24, (uint64_t)v22);
  v21[0] = (unsigned __int8 *)&v16;
  memset(&v21[1], 0, 24);
  v21[4] = (unsigned __int8 *)0x8000000000000000LL;
  sub_100008AC8(v21);
  if (sub_1000087E8((unsigned __int8 **)v22, v21))
  {
    uint64_t v9 = sub_10009AE9C();
    if (!v9)
    {
      LOBYTE(v22[0]) = 0;
      *((void *)&v22[0] + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0LL;
      sub_1000041AC((uint64_t)v22);
      sub_1000041AC((uint64_t)v22);
      unint64_t v10 = a2[4];
      if (v10 >= a2[5])
      {
        uint64_t v11 = sub_100004B7C(a2 + 3, (uint64_t)v22);
      }

      else
      {
        *(_BYTE *)unint64_t v10 = v22[0];
        *(void *)(v10 + sub_100007004((uint64_t)v9 + 8) = *((void *)&v22[0] + 1);
        sub_1000041AC((uint64_t)v22);
        LOBYTE(v22[0]) = 0;
        *((void *)&v22[0] + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0LL;
        sub_1000041AC(v10);
        uint64_t v11 = v10 + 16;
      }

      a2[4] = v11;
      sub_1000041AC((uint64_t)v22);
      sub_10000425C((uint64_t **)v22 + 1, LOBYTE(v22[0]));
      goto LABEL_16;
    }
  }

  else
  {
    uint64_t v9 = (uint64_t)sub_100008924((unsigned __int8 **)v22);
  }

  unint64_t v12 = a2[4];
  if (v12 >= a2[5])
  {
    uint64_t v13 = sub_100070EB8(a2 + 3, v9);
  }

  else
  {
    sub_10000C3E4(a2[4], v9);
    uint64_t v13 = v12 + 16;
    a2[4] = v12 + 16;
  }

  a2[4] = v13;
LABEL_16:
  sub_1000041AC((uint64_t)&v16);
  sub_10000425C(&v17, v16);
  sub_1000041AC((uint64_t)&v19);
  sub_10000425C(v20, v19);
  if (v3)
  {
    uint64_t v14 = (unint64_t *)(v3 + 1);
    do
      unint64_t v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      (*(void (**)(uint64_t *))(*v3 + 16))(v3);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v3);
    }
  }

void sub_1000B03BC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t *a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t *a26)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_10000417C(&a17);
  sub_100007004((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B0424()
{
  return 1LL;
}

void sub_1000B0430(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

std::runtime_error *sub_1000B0444(std::runtime_error *a1)
{
  uint64_t result = std::runtime_error::runtime_error(a1, "return");
  result->__vftable = (std::runtime_error_vtbl *)&off_10012C610;
  return result;
}

void *sub_1000B046C@<X0>(void *a1@<X8>)
{
  return sub_1000B0C94(a1);
}

uint64_t sub_1000B04B8(void **a1, uint64_t *a2, _BYTE *a3)
{
  if (*a3 == 3)
  {
    uint64_t v6 = sub_10008FC30((uint64_t)a3);
    if (*(char *)(v6 + 23) < 0)
    {
      if (!*(void *)(v6 + 8)) {
        goto LABEL_10;
      }
      unint64_t v7 = *(_BYTE **)v6;
    }

    else
    {
      unint64_t v7 = (_BYTE *)v6;
      if (!*(_BYTE *)(v6 + 23)) {
        goto LABEL_10;
      }
    }

    if (*v7 == 58)
    {
      __int128 v8 = sub_1000B0D64(*a1, (unsigned __int8 *)v6);
      if (v8) {
        return (*(uint64_t (**)(void, uint64_t *))(**((void **)v8 + 5) + 16LL))(*((void *)v8 + 5), a2);
      }
    }
  }

void sub_1000B0588(_Unwind_Exception *a1)
{
  *(void *)(v1 + 3sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = v2;
  _Unwind_Resume(a1);
}

BOOL sub_1000B0590(void **a1, uint64_t a2, _BYTE *a3)
{
  if (*a3 != 2)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Evaluator::run requires an array of operations");
  }

  if (!*(void *)(a2 + 48)) {
    *(void *)(a2 + 4sub_100007004((uint64_t)v9 + 8) = a1;
  }
  ++*(_DWORD *)(a2 + 72);
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  v13[0] = v6;
  v13[1] = v6;
  sub_100008B44(v13, (uint64_t)a3);
  sub_100045378((unsigned __int8 **)v13);
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  v11[0] = v7;
  v11[1] = v7;
  sub_100008B44(v11, (uint64_t)a3);
  sub_100008AC8((unsigned __int8 **)v11);
  for (BOOL result = sub_1000087E8((unsigned __int8 **)v13, (unsigned __int8 **)v11);
        !result;
        BOOL result = sub_1000087E8((unsigned __int8 **)v13, (unsigned __int8 **)v11))
  {
    uint64_t v9 = sub_100008924((unsigned __int8 **)v13);
    sub_1000B04B8(a1, (uint64_t *)a2, v9);
    sub_100018704((unsigned __int8 **)v13);
  }

  --*(_DWORD *)(a2 + 72);
  return result;
}

void sub_1000B06D4(_Unwind_Exception *a1)
{
}

void sub_1000B074C(void **a1@<X0>, __int128 *a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_1000B07BC(a1, a2, v4, a3, a4);
}

void sub_1000B07A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1000B07BC(void **a1@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X2>, _BYTE *a4@<X3>, uint64_t a5@<X8>)
{
  __int128 v9 = 0uLL;
  uint64_t v10 = 0LL;
  sub_100079C28((char **)&v9, a2);
  sub_1000B087C(a1, &v9, a3, a4, a5);
  uint64_t v11 = (void **)&v9;
  sub_1000100E4(&v11);
}

void sub_1000B0864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void sub_1000B087C(void **a1@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X2>, _BYTE *a4@<X3>, uint64_t a5@<X8>)
{
  __int128 v15 = *a2;
  uint64_t v16 = *((void *)a2 + 2);
  *(void *)a2 = 0LL;
  *((void *)a2 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0LL;
  *((void *)a2 + sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = 0LL;
  memset(v17, 0, sizeof(v17));
  __int128 v6 = (std::__shared_weak_count *)a3[1];
  uint64_t v18 = *a3;
  unint64_t v19 = v6;
  unint64_t v20 = 0xAAAAAAAAAAAAAAAALL;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      unint64_t v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }

  LODWORD(v20) = 0;
  sub_1000B0590(a1, (uint64_t)&v15, a4);
  if (*(void *)&v17[0] != *((void *)&v17[0] + 1))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Stack evaluation was expected to be empty");
  }

  uint64_t v9 = *(void *)v15 + 40LL;
  *(_BYTE *)a5 = *(_BYTE *)v9;
  *(void *)(a5 + sub_100007004((uint64_t)v9 + 8) = *(void *)(v9 + 8);
  sub_1000041AC(v9);
  *(_BYTE *)uint64_t v9 = 0;
  *(void *)(v9 + sub_100007004((uint64_t)v9 + 8) = 0LL;
  sub_1000041AC(a5);
  uint64_t v10 = v19;
  if (v19)
  {
    uint64_t v11 = (unint64_t *)&v19->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

  unint64_t v14 = (void **)v17;
  sub_100004D64(&v14);
  unint64_t v14 = (void **)&v15;
  sub_1000100E4(&v14);
}

void sub_1000B09FC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
}

void sub_1000B0A20(void **a1@<X0>, __int128 *a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  __int128 v7 = 0uLL;
  uint64_t v8 = 0LL;
  sub_100079C28((char **)&v7, a2);
  sub_1000B0AD8(a1, &v7, a3, a4);
  uint64_t v9 = (void **)&v7;
  sub_1000100E4(&v9);
}

void sub_1000B0AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void sub_1000B0AD8(void **a1@<X0>, __int128 *a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  __int128 v13 = *a2;
  uint64_t v14 = *((void *)a2 + 2);
  *(void *)a2 = 0LL;
  *((void *)a2 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0LL;
  *((void *)a2 + sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = 0LL;
  memset(v15, 0, sizeof(v15));
  __int128 v16 = 0u;
  LODWORD(v17) = 0;
  sub_1000B0590(a1, (uint64_t)&v13, a3);
  uint64_t v5 = *(void *)&v15[0];
  if (*((void *)&v15[0] + 1) - *(void *)&v15[0] != 16LL)
  {
    uint64_t v9 = *((void *)&v15[0] + 1);
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    uint64_t v11 = exception;
    if (v5 == v9) {
      std::runtime_error::runtime_error(exception, "Stack evaluation was empty but required one output value.");
    }
    else {
      std::runtime_error::runtime_error( exception,  "Stack evaluation had multiple values remaining, but required exactly one output value.");
    }
  }

  *(_BYTE *)a4 = **(_BYTE **)&v15[0];
  *(void *)(a4 + sub_100007004((uint64_t)v9 + 8) = *(void *)(v5 + 8);
  sub_1000041AC(v5);
  *(_BYTE *)uint64_t v5 = 0;
  *(void *)(v5 + sub_100007004((uint64_t)v9 + 8) = 0LL;
  sub_1000041AC(a4);
  __int128 v6 = (std::__shared_weak_count *)*((void *)&v16 + 1);
  if (*((void *)&v16 + 1))
  {
    __int128 v7 = (unint64_t *)(*((void *)&v16 + 1) + 8LL);
    do
      unint64_t v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

  unint64_t v12 = (void **)v15;
  sub_100004D64(&v12);
  unint64_t v12 = (void **)&v13;
  sub_1000100E4(&v12);
}

void sub_1000B0C58( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
}

void sub_1000B0C80(std::runtime_error *a1)
{
}

void *sub_1000B0C94@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x28uLL);
  BOOL result = sub_1000B0CDC(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1000B0CC8(_Unwind_Exception *a1)
{
}

void *sub_1000B0CDC(void *a1)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_10012C660;
  sub_1000D1A68(a1 + 3);
  return a1;
}

void sub_1000B0D14(_Unwind_Exception *a1)
{
}

void sub_1000B0D28(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10012C660;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000B0D38(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10012C660;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_1000B0D58(uint64_t a1)
{
  return sub_100007004(a1 + 24);
}

unsigned __int8 *sub_1000B0D64(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = sub_100021B64((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0LL;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }

  else
  {
    unint64_t v9 = (*(void *)&v5 - 1LL) & v4;
  }

  uint64_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0LL;
  }
  uint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v6 == v13)
      {
        if ((sub_100021BD4(v12, v11 + 16, a2) & 1) != 0) {
          return v11;
        }
      }

      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }

        else
        {
          v13 &= *(void *)&v5 - 1LL;
        }

        if (v13 != v9) {
          return 0LL;
        }
      }

      uint64_t v11 = *(unsigned __int8 **)v11;
    }

    while (v11);
  }

  return v11;
}

void sub_1000B0E64(uint64_t a1)
{
  uint64_t v2 = operator new(8uLL);
  void *v2 = &off_10012C6B0;
  sub_100005064(__p, ":return");
  uint64_t v82 = __p;
  unint64_t v3 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v82);
  uint64_t v4 = *((void *)v3 + 5);
  *((void *)v3 + 5) = v2;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  if (v81 < 0) {
    operator delete(__p[0]);
  }
  int8x8_t v5 = operator new(8uLL);
  *int8x8_t v5 = &off_10012C740;
  sub_100005064(__p, ":coerceBool");
  uint64_t v82 = __p;
  unint64_t v6 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v82);
  uint64_t v7 = *((void *)v6 + 5);
  *((void *)v6 + 5) = v5;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  if (v81 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v8 = operator new(8uLL);
  *unint64_t v8 = &off_10012C6F8;
  sub_100005064(__p, ":coerceNumber");
  uint64_t v82 = __p;
  unint64_t v9 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v82);
  uint64_t v10 = *((void *)v9 + 5);
  *((void *)v9 + 5) = v8;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
  }
  if (v81 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v11 = operator new(8uLL);
  *uint64_t v11 = &off_10012C788;
  sub_100005064(__p, ":typeSchema");
  uint64_t v82 = __p;
  uint64_t v12 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v82);
  uint64_t v13 = *((void *)v12 + 5);
  *((void *)v12 + 5) = v11;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
  }
  if (v81 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v14 = operator new(8uLL);
  *uint64_t v14 = &off_10012C7D0;
  sub_100005064(__p, ":simpleSchema");
  uint64_t v82 = __p;
  __int128 v15 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v82);
  uint64_t v16 = *((void *)v15 + 5);
  *((void *)v15 + 5) = v14;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8LL))(v16);
  }
  if (v81 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v17 = operator new(8uLL);
  *unint64_t v17 = &off_10012C818;
  sub_100005064(__p, ":getSize");
  uint64_t v82 = __p;
  uint64_t v18 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v82);
  uint64_t v19 = *((void *)v18 + 5);
  *((void *)v18 + 5) = v17;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8LL))(v19);
  }
  if (v81 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v20 = operator new(8uLL);
  void *v20 = &off_10012C938;
  sub_100005064(__p, ":timestamp");
  uint64_t v82 = __p;
  char v21 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v82);
  uint64_t v22 = *((void *)v21 + 5);
  *((void *)v21 + 5) = v20;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8LL))(v22);
  }
  if (v81 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v23 = operator new(8uLL);
  *unint64_t v23 = &off_10012C980;
  sub_100005064(__p, ":ticksPerMillisecond");
  uint64_t v82 = __p;
  __int128 v24 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v82);
  uint64_t v25 = *((void *)v24 + 5);
  *((void *)v24 + 5) = v23;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8LL))(v25);
  }
  if (v81 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v26 = operator new(8uLL);
  *unint64_t v26 = &off_10012C9C8;
  sub_100005064(__p, ":ticksPerSecond");
  uint64_t v82 = __p;
  uint64_t v27 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v82);
  uint64_t v28 = *((void *)v27 + 5);
  *((void *)v27 + 5) = v26;
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 8LL))(v28);
  }
  if (v81 < 0) {
    operator delete(__p[0]);
  }
  char v29 = operator new(8uLL);
  *char v29 = &off_10012CA10;
  sub_100005064(__p, ":ticksPerMinute");
  uint64_t v82 = __p;
  unint64_t v30 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v82);
  uint64_t v31 = *((void *)v30 + 5);
  *((void *)v30 + 5) = v29;
  if (v31) {
    (*(void (**)(uint64_t))(*(void *)v31 + 8LL))(v31);
  }
  if (v81 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v32 = operator new(8uLL);
  *uint64_t v32 = &off_10012CA58;
  sub_100005064(__p, ":ticksPerHour");
  uint64_t v82 = __p;
  __int128 v33 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v82);
  uint64_t v34 = *((void *)v33 + 5);
  *((void *)v33 + 5) = v32;
  if (v34) {
    (*(void (**)(uint64_t))(*(void *)v34 + 8LL))(v34);
  }
  if (v81 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v35 = operator new(8uLL);
  void *v35 = &off_10012CAA0;
  sub_100005064(__p, ":ticksPerDay");
  uint64_t v82 = __p;
  uint64_t v36 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v82);
  uint64_t v37 = *((void *)v36 + 5);
  *((void *)v36 + 5) = v35;
  if (v37) {
    (*(void (**)(uint64_t))(*(void *)v37 + 8LL))(v37);
  }
  if (v81 < 0) {
    operator delete(__p[0]);
  }
  __int128 v38 = operator new(8uLL);
  *__int128 v38 = &off_10012CB18;
  sub_100005064(__p, ":ticksToString");
  uint64_t v82 = __p;
  uint64_t v39 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v82);
  uint64_t v40 = *((void *)v39 + 5);
  *((void *)v39 + 5) = v38;
  if (v40) {
    (*(void (**)(uint64_t))(*(void *)v40 + 8LL))(v40);
  }
  if (v81 < 0) {
    operator delete(__p[0]);
  }
  std::string v41 = operator new(8uLL);
  *std::string v41 = &off_10012CB78;
  sub_100005064(__p, ":ticksToStringSeconds");
  uint64_t v82 = __p;
  __int128 v42 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v82);
  uint64_t v43 = *((void *)v42 + 5);
  *((void *)v42 + 5) = v41;
  if (v43) {
    (*(void (**)(uint64_t))(*(void *)v43 + 8LL))(v43);
  }
  if (v81 < 0) {
    operator delete(__p[0]);
  }
  __int128 v44 = operator new(8uLL);
  void *v44 = &off_10012CBD8;
  sub_100005064(__p, ":ticksToStringMinutes");
  uint64_t v82 = __p;
  uint64_t v45 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v82);
  uint64_t v46 = *((void *)v45 + 5);
  *((void *)v45 + 5) = v44;
  if (v46) {
    (*(void (**)(uint64_t))(*(void *)v46 + 8LL))(v46);
  }
  if (v81 < 0) {
    operator delete(__p[0]);
  }
  char v47 = operator new(8uLL);
  *char v47 = &off_10012CC38;
  sub_100005064(__p, ":ticksToStringDate");
  uint64_t v82 = __p;
  unint64_t v48 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v82);
  uint64_t v49 = *((void *)v48 + 5);
  *((void *)v48 + 5) = v47;
  if (v49) {
    (*(void (**)(uint64_t))(*(void *)v49 + 8LL))(v49);
  }
  if (v81 < 0) {
    operator delete(__p[0]);
  }
  char v50 = operator new(8uLL);
  *char v50 = &off_10012CC98;
  sub_100005064(__p, ":ticksToStringUTC");
  uint64_t v82 = __p;
  uint64_t v51 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v82);
  uint64_t v52 = *((void *)v51 + 5);
  *((void *)v51 + 5) = v50;
  if (v52) {
    (*(void (**)(uint64_t))(*(void *)v52 + 8LL))(v52);
  }
  if (v81 < 0) {
    operator delete(__p[0]);
  }
  char v53 = operator new(8uLL);
  void *v53 = &off_10012CCF8;
  sub_100005064(__p, ":ticksToStringSecondsUTC");
  uint64_t v82 = __p;
  uint64_t v54 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v82);
  uint64_t v55 = *((void *)v54 + 5);
  *((void *)v54 + 5) = v53;
  if (v55) {
    (*(void (**)(uint64_t))(*(void *)v55 + 8LL))(v55);
  }
  if (v81 < 0) {
    operator delete(__p[0]);
  }
  char v56 = operator new(8uLL);
  *char v56 = &off_10012CD58;
  sub_100005064(__p, ":ticksToStringMinutesUTC");
  uint64_t v82 = __p;
  std::string v57 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v82);
  uint64_t v58 = *((void *)v57 + 5);
  *((void *)v57 + 5) = v56;
  if (v58) {
    (*(void (**)(uint64_t))(*(void *)v58 + 8LL))(v58);
  }
  if (v81 < 0) {
    operator delete(__p[0]);
  }
  int64_t v59 = operator new(8uLL);
  void *v59 = &off_10012CDB8;
  sub_100005064(__p, ":ticksToStringDateUTC");
  uint64_t v82 = __p;
  std::string v60 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v82);
  uint64_t v61 = *((void *)v60 + 5);
  *((void *)v60 + 5) = v59;
  if (v61) {
    (*(void (**)(uint64_t))(*(void *)v61 + 8LL))(v61);
  }
  if (v81 < 0) {
    operator delete(__p[0]);
  }
  std::string v62 = operator new(8uLL);
  *std::string v62 = &off_10012C860;
  sub_100005064(__p, ":getInstallType");
  uint64_t v82 = __p;
  char v63 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v82);
  uint64_t v64 = *((void *)v63 + 5);
  *((void *)v63 + 5) = v62;
  if (v64) {
    (*(void (**)(uint64_t))(*(void *)v64 + 8LL))(v64);
  }
  if (v81 < 0) {
    operator delete(__p[0]);
  }
  char v65 = operator new(8uLL);
  *char v65 = &off_10012C8A8;
  sub_100005064(__p, ":getBuildVersion");
  uint64_t v82 = __p;
  uint64_t v66 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v82);
  uint64_t v67 = *((void *)v66 + 5);
  *((void *)v66 + 5) = v65;
  if (v67) {
    (*(void (**)(uint64_t))(*(void *)v67 + 8LL))(v67);
  }
  if (v81 < 0) {
    operator delete(__p[0]);
  }
  char v68 = operator new(8uLL);
  void *v68 = &off_10012C8F0;
  sub_100005064(__p, ":getHardwareType");
  uint64_t v82 = __p;
  int64_t v69 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v82);
  uint64_t v70 = *((void *)v69 + 5);
  *((void *)v69 + 5) = v68;
  if (v70) {
    (*(void (**)(uint64_t))(*(void *)v70 + 8LL))(v70);
  }
  if (v81 < 0) {
    operator delete(__p[0]);
  }
  int64_t v71 = operator new(8uLL);
  void *v71 = &off_10012CE18;
  sub_100005064(__p, ":generateStableHash");
  uint64_t v82 = __p;
  uint64_t v72 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v82);
  uint64_t v73 = *((void *)v72 + 5);
  *((void *)v72 + 5) = v71;
  if (v73) {
    (*(void (**)(uint64_t))(*(void *)v73 + 8LL))(v73);
  }
  if (v81 < 0) {
    operator delete(__p[0]);
  }
  v74 = operator new(8uLL);
  void *v74 = &off_10012CE60;
  sub_100005064(__p, ":generateStableHashPerDevice");
  uint64_t v82 = __p;
  char v75 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v82);
  uint64_t v76 = *((void *)v75 + 5);
  *((void *)v75 + 5) = v74;
  if (v76) {
    (*(void (**)(uint64_t))(*(void *)v76 + 8LL))(v76);
  }
  if (v81 < 0) {
    operator delete(__p[0]);
  }
  BOOL v77 = operator new(8uLL);
  *BOOL v77 = &off_10012CEA8;
  sub_100005064(__p, ":generateStableRandomValuePerDevice100");
  uint64_t v82 = __p;
  char v78 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v82);
  uint64_t v79 = *((void *)v78 + 5);
  *((void *)v78 + 5) = v77;
  if (v79) {
    (*(void (**)(uint64_t))(*(void *)v79 + 8LL))(v79);
  }
  if (v81 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1000B1AEC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  uint64_t v16 = (void *)nullsub_4(v14);
  operator delete(v16);
  _Unwind_Resume(a1);
}

void sub_1000B1BEC()
{
  exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  sub_1000B0444(exception);
}

void sub_1000B1C20(_Unwind_Exception *a1)
{
}

uint64_t sub_1000B1C34()
{
  return 1LL;
}

void sub_1000B1C3C(uint64_t a1, uint64_t *a2)
{
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v16 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D25BC((uint64_t)a2, &v15);
  if (v15 - 5 >= 3)
  {
    if (v15 == 4)
    {
      unsigned __int8 v17 = -86;
      sub_100059DD4((char *)&v15, &v17);
      unint64_t v3 = &v14;
      v13[0] = 5;
      uint64_t v14 = (uint64_t *)v17;
      sub_1000041AC((uint64_t)v13);
      sub_1000041AC((uint64_t)v13);
      sub_1000041AC((uint64_t)v13);
      unsigned __int8 v4 = v15;
      LOBYTE(v15) = v13[0];
      v13[0] = v4;
      int8x8_t v5 = v16;
      uint64_t v16 = v14;
      uint64_t v14 = v5;
      sub_1000041AC((uint64_t)&v15);
      sub_1000041AC((uint64_t)v13);
      int v6 = v13[0];
    }

    else
    {
      unint64_t v3 = &v12;
      v11[0] = 5;
      uint64_t v12 = 0LL;
      sub_1000041AC((uint64_t)v11);
      sub_1000041AC((uint64_t)v11);
      sub_1000041AC((uint64_t)v11);
      unsigned __int8 v7 = v15;
      LOBYTE(v15) = v11[0];
      v11[0] = v7;
      unint64_t v8 = v16;
      uint64_t v16 = v12;
      uint64_t v12 = v8;
      sub_1000041AC((uint64_t)&v15);
      sub_1000041AC((uint64_t)v11);
      int v6 = v11[0];
    }

    sub_10000425C(v3, v6);
  }

  unint64_t v9 = a2[4];
  if (v9 >= a2[5])
  {
    uint64_t v10 = sub_100070EB8(a2 + 3, (uint64_t)&v15);
  }

  else
  {
    sub_10000C3E4(a2[4], (uint64_t)&v15);
    uint64_t v10 = v9 + 16;
    a2[4] = v9 + 16;
  }

  a2[4] = v10;
  sub_1000041AC((uint64_t)&v15);
  sub_10000425C(&v16, v15);
}

void sub_1000B1DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_1000B1E14()
{
  return 1LL;
}

void sub_1000B1E1C(uint64_t a1, uint64_t *a2)
{
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v16 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D25BC((uint64_t)a2, &v15);
  if (v15 - 5 > 2)
  {
    unint64_t v3 = &v12;
    v11[0] = 4;
    uint64_t v12 = 0LL;
    sub_1000041AC((uint64_t)v11);
    sub_1000041AC((uint64_t)v11);
    sub_1000041AC((uint64_t)v11);
    unsigned __int8 v7 = v15;
    LOBYTE(v15) = v11[0];
    v11[0] = v7;
    unint64_t v8 = v16;
    uint64_t v16 = v12;
    uint64_t v12 = v8;
    sub_1000041AC((uint64_t)&v15);
    sub_1000041AC((uint64_t)v11);
    int v6 = v11[0];
  }

  else
  {
    unint64_t v3 = &v14;
    v13[0] = 4;
    uint64_t v14 = (uint64_t *)sub_1000B1FE8((unsigned __int8 *)&v15, 0);
    sub_1000041AC((uint64_t)v13);
    sub_1000041AC((uint64_t)v13);
    sub_1000041AC((uint64_t)v13);
    unsigned __int8 v4 = v15;
    LOBYTE(v15) = v13[0];
    v13[0] = v4;
    int8x8_t v5 = v16;
    uint64_t v16 = v14;
    uint64_t v14 = v5;
    sub_1000041AC((uint64_t)&v15);
    sub_1000041AC((uint64_t)v13);
    int v6 = v13[0];
  }

  sub_10000425C(v3, v6);
LABEL_6:
  unint64_t v9 = a2[4];
  if (v9 >= a2[5])
  {
    uint64_t v10 = sub_100070EB8(a2 + 3, (uint64_t)&v15);
  }

  else
  {
    sub_10000C3E4(a2[4], (uint64_t)&v15);
    uint64_t v10 = v9 + 16;
    a2[4] = v9 + 16;
  }

  a2[4] = v10;
  sub_1000041AC((uint64_t)&v15);
  sub_10000425C(&v16, v15);
}

void sub_1000B1FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

uint64_t sub_1000B1FE8(unsigned __int8 *a1, int a2)
{
  v4[0] = 5;
  int8x8_t v5 = (uint64_t *)a2;
  sub_1000041AC((uint64_t)v4);
  sub_1000041AC((uint64_t)v4);
  LODWORD(asub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = sub_10002CE28(a1, v4);
  sub_1000041AC((uint64_t)v4);
  sub_10000425C(&v5, v4[0]);
  return a1 ^ 1;
}

uint64_t sub_1000B2088()
{
  return 1LL;
}

void sub_1000B2090(uint64_t a1, uint64_t *a2)
{
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v10 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D25BC((uint64_t)a2, &v9);
  sub_1000B21D8(&v9, __p);
  sub_100008E5C((uint64_t)v7, (uint64_t)__p);
  unint64_t v3 = a2[4];
  if (v3 >= a2[5])
  {
    uint64_t v4 = sub_100004B7C(a2 + 3, (uint64_t)v7);
  }

  else
  {
    *(_BYTE *)unint64_t v3 = v7[0];
    *(void *)(v3 + sub_100007004((uint64_t)v9 + 8) = v8;
    sub_1000041AC((uint64_t)v7);
    v7[0] = 0;
    unint64_t v8 = 0LL;
    sub_1000041AC(v3);
    uint64_t v4 = v3 + 16;
  }

  a2[4] = v4;
  sub_1000041AC((uint64_t)v7);
  sub_10000425C(&v8, v7[0]);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  sub_1000041AC((uint64_t)&v9);
  sub_10000425C(&v10, v9);
}

void sub_1000B2194( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t *a15, uint64_t a16, uint64_t *a17)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_10000417C(&a17);
  _Unwind_Resume(a1);
}

void sub_1000B21D8(_BYTE *a1@<X0>, void *a2@<X8>)
{
  switch(*a1)
  {
    case 1:
      unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
      unint64_t v25 = 0xAAAAAAAAAAAAAAAALL;
      sub_10000BA40((uint64_t)&v24, 0LL, 0LL, 0, 1);
      v20[0] = a1;
      v20[1] = 0LL;
      uint64_t v21 = 0LL;
      uint64_t v22 = 0LL;
      unint64_t v23 = 0x8000000000000000LL;
      sub_100045378((unsigned __int8 **)v20);
      uint64_t v18 = a1;
      memset(v19, 0, 24);
      void v19[3] = (uint64_t *)0x8000000000000000LL;
      sub_100008AC8(&v18);
      while (!sub_1000087E8((unsigned __int8 **)v20, &v18))
      {
        uint64_t v4 = sub_100008924((unsigned __int8 **)v20);
        sub_1000B21D8(&__p, v4);
        sub_100008E5C((uint64_t)v16, (uint64_t)&__p);
        int8x8_t v5 = (const void **)sub_10005714C(v20);
        char v6 = sub_1000304A4((unsigned __int8 *)&v24, v5);
        sub_1000041AC((uint64_t)v16);
        char v7 = *(_BYTE *)v6;
        *(_BYTE *)char v6 = v16[0];
        v16[0] = v7;
        unint64_t v8 = (uint64_t *)v6[1];
        v6[1] = (uint64_t)v17;
        unsigned __int8 v17 = v8;
        sub_1000041AC((uint64_t)v6);
        sub_1000041AC((uint64_t)v16);
        sub_10000425C(&v17, v16[0]);
        if (v15 < 0) {
          operator delete(__p);
        }
        sub_100018704((unsigned __int8 **)v20);
      }

      sub_100006200((uint64_t)&v24, -1, 0x20u, 0LL, 0, a2);
      sub_1000041AC((uint64_t)&v24);
      uint64_t v12 = (uint64_t **)&v25;
      int v11 = v24;
      goto LABEL_19;
    case 2:
      std::string __p = (void *)0xAAAAAAAAAAAAAA02LL;
      v20[0] = 0LL;
      uint64_t v18 = 0LL;
      uint64_t v14 = sub_10000BD28((uint64_t *)v20, (uint64_t *)&v18);
      sub_1000041AC((uint64_t)&__p);
      v27[0] = a1;
      memset(&v27[1], 0, 24);
      v27[4] = (unsigned __int8 *)0x8000000000000000LL;
      sub_100045378(v27);
      v26[0] = a1;
      memset(&v26[1], 0, 24);
      v26[4] = (unsigned __int8 *)0x8000000000000000LL;
      sub_100008AC8(v26);
      while (!sub_1000087E8(v27, v26))
      {
        unint64_t v9 = sub_100008924(v27);
        sub_1000B21D8(v20, v9);
        sub_100008E5C((uint64_t)&v18, (uint64_t)v20);
        sub_100057BDC((uint64_t)&__p, (uint64_t)&v18);
        sub_1000041AC((uint64_t)&v18);
        sub_10000425C(v19, v18);
        if (SHIBYTE(v21) < 0) {
          operator delete(v20[0]);
        }
        sub_100018704(v27);
      }

      sub_100006200((uint64_t)&__p, -1, 0x20u, 0LL, 0, a2);
      sub_1000041AC((uint64_t)&__p);
      int v11 = __p;
      uint64_t v12 = &v14;
LABEL_19:
      sub_10000425C(v12, v11);
      return;
    case 3:
      uint64_t v10 = "string";
      goto LABEL_23;
    case 4:
      uint64_t v10 = "BOOL";
      goto LABEL_23;
    case 7:
      uint64_t v10 = "float";
      goto LABEL_23;
    default:
      if (*a1 - 5 > 2)
      {
        if (*a1) {
          uint64_t v10 = "unknown";
        }
        else {
          uint64_t v10 = "null";
        }
      }

      else
      {
        uint64_t v10 = "int";
      }

void sub_1000B2594( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *__p, uint64_t a23, int a24, __int16 a25, char a26, char a27, uint64_t a28, uint64_t a29, uint64_t *a30)
{
}

uint64_t sub_1000B2618()
{
  return 1LL;
}

void sub_1000B2620(uint64_t a1, uint64_t *a2)
{
  unint64_t v38 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v39 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D25BC((uint64_t)a2, &v38);
  unint64_t v36 = 0xAAAAAAAAAAAAAA00LL;
  uint64_t v37 = 0LL;
  sub_1000041AC((uint64_t)&v36);
  sub_1000041AC((uint64_t)&v36);
  if (v38 != 1)
  {
    sub_1000B29A4((unsigned __int8 *)&v38, v26);
    sub_100008E5C((uint64_t)v16, (uint64_t)v26);
    sub_1000041AC((uint64_t)v16);
    char v11 = v36;
    LOBYTE(v36) = v16[0];
    v16[0] = v11;
    uint64_t v12 = v37;
    uint64_t v37 = v17;
    unsigned __int8 v17 = v12;
    sub_1000041AC((uint64_t)&v36);
    sub_1000041AC((uint64_t)v16);
    sub_10000425C(&v17, v16[0]);
    if ((v27 & 0x80000000) == 0) {
      goto LABEL_18;
    }
    uint64_t v13 = v26[0];
    goto LABEL_17;
  }

  uint64_t v3 = sub_10000BA40((uint64_t)v34, 0LL, 0LL, 0, 1);
  sub_1000041AC(v3);
  char v4 = v36;
  LOBYTE(v36) = v34[0];
  v34[0] = v4;
  int8x8_t v5 = v37;
  uint64_t v37 = v35;
  unint64_t v35 = v5;
  sub_1000041AC((uint64_t)&v36);
  sub_1000041AC((uint64_t)v34);
  sub_10000425C(&v35, v34[0]);
  __int128 v33 = &v38;
  sub_1000638FC((uint64_t *)&v33, (uint64_t)v26);
  sub_10006397C((uint64_t *)&v33, (uint64_t)v22);
  while (!sub_10001855C(v26, v22))
  {
    char v6 = sub_100018150(v26);
    sub_1000B29A4(v6, __p);
    sub_100008E5C((uint64_t)v20, (uint64_t)__p);
    char v7 = (const void **)sub_1000650C4(v26);
    unint64_t v8 = sub_1000304A4((unsigned __int8 *)&v36, v7);
    sub_1000041AC((uint64_t)v20);
    char v9 = *(_BYTE *)v8;
    *(_BYTE *)unint64_t v8 = v20[0];
    v20[0] = v9;
    uint64_t v10 = (uint64_t *)v8[1];
    v8[1] = (uint64_t)v21;
    uint64_t v21 = v10;
    sub_1000041AC((uint64_t)v8);
    sub_1000041AC((uint64_t)v20);
    sub_10000425C(&v21, v20[0]);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    sub_100018704(v26);
    ++v28;
  }

  if (v25 < 0) {
    operator delete(v24);
  }
  if (v23 < 0) {
    operator delete(v22[7]);
  }
  if (v32 < 0) {
    operator delete(v31);
  }
  if (v30 < 0)
  {
    uint64_t v13 = (unsigned __int8 *)v29;
LABEL_17:
    operator delete(v13);
  }

void sub_1000B2920( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, void *__p, uint64_t a34, int a35, __int16 a36, char a37, char a38)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  sub_10000417C((uint64_t **)(v38 - 88));
  sub_10000417C((uint64_t **)(v38 - 72));
  _Unwind_Resume(a1);
}

void *sub_1000B29A4@<X0>(unsigned __int8 *a1@<X0>, void *a2@<X8>)
{
  int v4 = *a1;
  char v5 = v4 - 1;
  if ((v4 - 1) < 7 && ((0x4Fu >> v5) & 1) != 0)
  {
    unint64_t v8 = off_10012CEE0[v5];
  }

  else
  {
    unsigned int v6 = v4 - 5;
    if (v4) {
      char v7 = "unknown";
    }
    else {
      char v7 = "null";
    }
    if (v6 >= 3) {
      unint64_t v8 = (char *)v7;
    }
    else {
      unint64_t v8 = "int";
    }
  }

  return sub_100005064(a2, v8);
}

uint64_t sub_1000B2A0C()
{
  return 1LL;
}

void sub_1000B2A14(uint64_t a1, uint64_t *a2)
{
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v8 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D25BC((uint64_t)a2, &v7);
  v5[0] = 6;
  unint64_t v6 = sub_100056958(&v7);
  sub_1000041AC((uint64_t)v5);
  sub_1000041AC((uint64_t)v5);
  unint64_t v3 = a2[4];
  if (v3 >= a2[5])
  {
    uint64_t v4 = sub_100004B7C(a2 + 3, (uint64_t)v5);
  }

  else
  {
    *(_BYTE *)unint64_t v3 = v5[0];
    *(void *)(v3 + sub_100007004((uint64_t)v9 + 8) = v6;
    sub_1000041AC((uint64_t)v5);
    v5[0] = 0;
    unint64_t v6 = 0LL;
    sub_1000041AC(v3);
    uint64_t v4 = v3 + 16;
  }

  a2[4] = v4;
  sub_1000041AC((uint64_t)v5);
  sub_10000425C((uint64_t **)&v6, v5[0]);
  sub_1000041AC((uint64_t)&v7);
  sub_10000425C(&v8, v7);
}

void sub_1000B2B24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  unint64_t v3 = va_arg(va1, uint64_t *);
  uint64_t v5 = va_arg(va1, void);
  sub_10000417C((uint64_t **)va);
  sub_10000417C((uint64_t **)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B2B50()
{
  return 1LL;
}

void sub_1000B2B58(uint64_t a1, uint64_t *a2)
{
  unint64_t v3 = a2[4];
  if (v3 >= a2[5])
  {
    uint64_t v4 = sub_100004B7C(a2 + 3, (uint64_t)v7);
  }

  else
  {
    *(_BYTE *)unint64_t v3 = v7[0];
    *(void *)(v3 + sub_100007004((uint64_t)v9 + 8) = v8;
    sub_1000041AC((uint64_t)v7);
    v7[0] = 0;
    unint64_t v8 = 0LL;
    sub_1000041AC(v3);
    uint64_t v4 = v3 + 16;
  }

  a2[4] = v4;
  sub_1000041AC((uint64_t)v7);
  sub_10000425C(&v8, v7[0]);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1000B2C30( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000B2C64()
{
  return 1LL;
}

void sub_1000B2C6C(uint64_t a1, uint64_t *a2)
{
  unint64_t v3 = a2[4];
  if (v3 >= a2[5])
  {
    uint64_t v4 = sub_1000B419C(a2 + 3, (uint64_t)__p);
  }

  else
  {
    sub_100008E5C(a2[4], (uint64_t)__p);
    uint64_t v4 = v3 + 16;
    a2[4] = v3 + 16;
  }

  a2[4] = v4;
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1000B2D08( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000B2D3C()
{
  return 1LL;
}

void sub_1000B2D44(uint64_t a1, uint64_t *a2)
{
  unint64_t v3 = a2[4];
  if (v3 >= a2[5])
  {
    uint64_t v4 = sub_1000B419C(a2 + 3, (uint64_t)__p);
  }

  else
  {
    sub_100008E5C(a2[4], (uint64_t)__p);
    uint64_t v4 = v3 + 16;
    a2[4] = v3 + 16;
  }

  a2[4] = v4;
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1000B2DE0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000B2E14()
{
  return 1LL;
}

uint64_t sub_1000B2E1C(uint64_t a1, uint64_t *a2)
{
  v3.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = v3.__d_.__rep_;
  unint64_t v4 = a2[4];
  if (v4 >= a2[5])
  {
    uint64_t result = sub_1000B42B4(a2 + 3, &rep);
  }

  else
  {
    *(_BYTE *)unint64_t v4 = 5;
    *(std::chrono::system_clock::time_point *)(v4 + sub_100007004((uint64_t)v9 + 8) = v3;
    sub_1000041AC(v4);
    sub_1000041AC(v4);
    uint64_t result = v4 + 16;
  }

  a2[4] = result;
  return result;
}

uint64_t sub_1000B2EB8()
{
  return 1LL;
}

uint64_t sub_1000B2EC0(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = 1000LL;
  unint64_t v3 = a2[4];
  if (v3 >= a2[5])
  {
    uint64_t result = sub_1000B42B4(a2 + 3, &v5);
  }

  else
  {
    *(_BYTE *)unint64_t v3 = 5;
    *(void *)(v3 + sub_100007004((uint64_t)v9 + 8) = 1000LL;
    sub_1000041AC(v3);
    sub_1000041AC(v3);
    uint64_t result = v3 + 16;
  }

  a2[4] = result;
  return result;
}

uint64_t sub_1000B2F60()
{
  return 1LL;
}

uint64_t sub_1000B2F68(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = 1000000LL;
  unint64_t v3 = a2[4];
  if (v3 >= a2[5])
  {
    uint64_t result = sub_1000B42B4(a2 + 3, &v5);
  }

  else
  {
    *(_BYTE *)unint64_t v3 = 5;
    *(void *)(v3 + sub_100007004((uint64_t)v9 + 8) = 1000000LL;
    sub_1000041AC(v3);
    sub_1000041AC(v3);
    uint64_t result = v3 + 16;
  }

  a2[4] = result;
  return result;
}

uint64_t sub_1000B3008()
{
  return 1LL;
}

uint64_t sub_1000B3010(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = 60000000LL;
  unint64_t v3 = a2[4];
  if (v3 >= a2[5])
  {
    uint64_t result = sub_1000B42B4(a2 + 3, &v5);
  }

  else
  {
    *(_BYTE *)unint64_t v3 = 5;
    *(void *)(v3 + sub_100007004((uint64_t)v9 + 8) = 60000000LL;
    sub_1000041AC(v3);
    sub_1000041AC(v3);
    uint64_t result = v3 + 16;
  }

  a2[4] = result;
  return result;
}

uint64_t sub_1000B30B0()
{
  return 1LL;
}

uint64_t sub_1000B30B8(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = 3600000000LL;
  unint64_t v3 = a2[4];
  if (v3 >= a2[5])
  {
    uint64_t result = sub_1000B42B4(a2 + 3, &v5);
  }

  else
  {
    *(_BYTE *)unint64_t v3 = 5;
    *(void *)(v3 + sub_100007004((uint64_t)v9 + 8) = 3600000000LL;
    sub_1000041AC(v3);
    sub_1000041AC(v3);
    uint64_t result = v3 + 16;
  }

  a2[4] = result;
  return result;
}

uint64_t sub_1000B3158()
{
  return 1LL;
}

uint64_t sub_1000B3160(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = 86400000000LL;
  unint64_t v3 = a2[4];
  if (v3 >= a2[5])
  {
    uint64_t result = sub_1000B42B4(a2 + 3, &v5);
  }

  else
  {
    *(_BYTE *)unint64_t v3 = 5;
    *(void *)(v3 + sub_100007004((uint64_t)v9 + 8) = 86400000000LL;
    sub_1000041AC(v3);
    sub_1000041AC(v3);
    uint64_t result = v3 + 16;
  }

  a2[4] = result;
  return result;
}

uint64_t sub_1000B3204()
{
  return 1LL;
}

void sub_1000B320C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_1000D1D2C(a1, (uint64_t)a2);
  if (v4 <= 0)
  {
    *(void *)&__t.tm_seCC_SHA512_CTX c = 0LL;
    unint64_t v6 = a2[4];
    if (v6 >= a2[5])
    {
      uint64_t v7 = sub_10002075C(a2 + 3);
    }

    else
    {
      *(_BYTE *)unint64_t v6 = 0;
      *(void *)(v6 + sub_100007004((uint64_t)v9 + 8) = 0LL;
      sub_1000041AC(v6);
      sub_1000041AC(v6);
      uint64_t v7 = v6 + 16;
    }

    a2[4] = v7;
  }

  else
  {
    uint64_t v5 = v4;
    *(void *)&__t.tm_seCC_SHA512_CTX c = v4;
    time_t v13 = std::chrono::system_clock::to_time_t((const std::chrono::system_clock::time_point *)&__t);
    memset(&__t, 0, sizeof(__t));
    else {
      gmtime_r(&v13, &__t);
    }
    __t.tm_isdst = 0;
    __t.tm_gmtoff = sub_10004387C();
    memset(v15, 170, 18);
    *(void *)__s = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v8 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40LL))(a1);
    __s[strftime(__s, 0x1AuLL, v8, &__t)] = 0;
    memset(__p, 170, sizeof(__p));
    sub_100005064(__p, __s);
    (*(void (**)(uint64_t, void **, uint64_t, tm *))(*(void *)a1 + 48LL))(a1, __p, v5, &__t);
    unint64_t v9 = a2[4];
    if (v9 >= a2[5])
    {
      uint64_t v10 = sub_100020D0C(a2 + 3, (uint64_t)__p);
    }

    else
    {
      sub_10000B990(a2[4], (uint64_t)__p);
      uint64_t v10 = v9 + 16;
      a2[4] = v9 + 16;
    }

    a2[4] = v10;
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
  }

void sub_1000B33CC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  *(void *)(v15 + 3sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = v16;
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000B33FC()
{
  return 1LL;
}

uint64_t sub_1000B3404()
{
  return 1LL;
}

uint64_t sub_1000B340C()
{
  return 0LL;
}

std::string *sub_1000B3418(uint64_t a1, std::string *a2, uint64_t a3)
{
  std::string::size_type v4 = std::string::find(a2, 90, 0LL);
  return std::string::replace(a2, v4, 1uLL, __str);
}

std::string *sub_1000B34DC(uint64_t a1, std::string *a2, uint64_t a3)
{
  return std::string::append(a2, __str);
}

const char *sub_1000B3588()
{
  return "%Y-%m-%dT%H:%M:%SZ%z";
}

const char *sub_1000B3594()
{
  return "%Y-%m-%dT%H:%M:%S%z";
}

const char *sub_1000B35A0()
{
  return "%Y-%m-%dT%H:%M%z";
}

const char *sub_1000B35AC()
{
  return "%Y-%m-%d";
}

const char *sub_1000B35B8()
{
  return "%Y-%m-%dT%H:%M:%S";
}

const char *sub_1000B35C4()
{
  return "%Y-%m-%dT%H:%M:%S";
}

const char *sub_1000B35D0()
{
  return "%Y-%m-%dT%H:%M";
}

const char *sub_1000B35DC()
{
  return "%Y-%m-%d";
}

void sub_1000B35E8(uint64_t a1, uint64_t *a2)
{
  unint64_t v6 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v7 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D25BC((uint64_t)a2, &v6);
  *(void *)&__int128 v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v10 = v3;
  __int128 v11 = v3;
  *(_OWORD *)md = v3;
  __int128 v9 = v3;
  *(_OWORD *)&c.w_BYTE buf[12] = v3;
  *(_OWORD *)&c.wbuf[14] = v3;
  *(_OWORD *)&c.wuint8_t buf[8] = v3;
  *(_OWORD *)&c.wbuf[10] = v3;
  *(_OWORD *)&c.wuint8_t buf[4] = v3;
  *(_OWORD *)&c.wbuf[6] = v3;
  *(_OWORD *)c.wstd::string buf = v3;
  *(_OWORD *)&c.wbuf[2] = v3;
  *(_OWORD *)&c.hash[4] = v3;
  *(_OWORD *)&c.hash[6] = v3;
  *(_OWORD *)c.hash = v3;
  *(_OWORD *)&c.hash[2] = v3;
  *(_OWORD *)c.size_t count = v3;
  CC_SHA512_Init(&c);
  sub_1000B3D38(&c, (unsigned __int8 *)&v6);
  CC_SHA512_Final(md, &c);
  sub_1000A379C(md, 64LL, (std::string *)&c);
  unint64_t v4 = a2[4];
  if (v4 >= a2[5])
  {
    uint64_t v5 = sub_1000B419C(a2 + 3, (uint64_t)&c);
  }

  else
  {
    sub_100008E5C(a2[4], (uint64_t)&c);
    uint64_t v5 = v4 + 16;
    a2[4] = v4 + 16;
  }

  a2[4] = v5;
  if (SHIBYTE(c.hash[0]) < 0) {
    operator delete((void *)c.count[0]);
  }
  sub_1000041AC((uint64_t)&v6);
  sub_10000425C(&v7, v6);
}

void sub_1000B3704( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  sub_10000417C((uint64_t **)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B374C()
{
  return 1LL;
}

void sub_1000B3754(uint64_t a1, uint64_t *a2)
{
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v8 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D25BC((uint64_t)a2, &v7);
  *(void *)&__int128 v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  _OWORD v9[2] = v3;
  void v9[3] = v3;
  v9[0] = v3;
  v9[1] = v3;
  sub_1000B3880((unsigned __int8 *)&v7, (uint64_t)v9);
  sub_1000A379C((unsigned __int8 *)v9, 64LL, &__p);
  unint64_t v4 = a2[4];
  if (v4 >= a2[5])
  {
    uint64_t v5 = sub_1000B419C(a2 + 3, (uint64_t)&__p);
  }

  else
  {
    sub_100008E5C(a2[4], (uint64_t)&__p);
    uint64_t v5 = v4 + 16;
    a2[4] = v4 + 16;
  }

  a2[4] = v5;
  sub_1000041AC((uint64_t)&v7);
  sub_10000425C(&v8, v7);
}

void sub_1000B3838( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t *a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_10000417C(&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B3880@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)&__int128 v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)(a2 + 3sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = v4;
  *(_OWORD *)(a2 + 4sub_100007004((uint64_t)v9 + 8) = v4;
  *(_OWORD *)a2 = v4;
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)&c.w_BYTE buf[12] = v4;
  *(_OWORD *)&c.wbuf[14] = v4;
  *(_OWORD *)&c.wuint8_t buf[8] = v4;
  *(_OWORD *)&c.wbuf[10] = v4;
  *(_OWORD *)&c.wuint8_t buf[4] = v4;
  *(_OWORD *)&c.wbuf[6] = v4;
  *(_OWORD *)&c.wbuf[2] = v4;
  *(_OWORD *)&c.hash[6] = v4;
  *(_OWORD *)c.wstd::string buf = v4;
  *(_OWORD *)&c.hash[2] = v4;
  *(_OWORD *)&c.hash[4] = v4;
  *(_OWORD *)c.size_t count = v4;
  *(_OWORD *)c.hash = v4;
  CC_SHA512_Init(&c);
  sub_100093674((uint64_t)__p);
  sub_100008E5C((uint64_t)v8, (uint64_t)__p);
  sub_1000B3D38(&c, v8);
  sub_1000041AC((uint64_t)v8);
  sub_10000425C(&v9, v8[0]);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  sub_1000B3D38(&c, a1);
  return CC_SHA512_Final((unsigned __int8 *)a2, &c);
}

void sub_1000B3970( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t *a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000B39A4()
{
  return 1LL;
}

void sub_1000B39AC(uint64_t a1, uint64_t *a2)
{
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  __int128 v10 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D25BC((uint64_t)a2, &v9);
  *(void *)&__int128 v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  _OWORD v11[2] = v3;
  void v11[3] = v3;
  v11[0] = v3;
  v11[1] = v3;
  sub_1000B3880((unsigned __int8 *)&v9, (uint64_t)v11);
  LODWORD(v4) = v11[0];
  double v5 = (double)v4 / 4294967300.0 * 100.0;
  double v8 = v5;
  unint64_t v6 = a2[4];
  if (v6 >= a2[5])
  {
    uint64_t v7 = sub_1000B43D4(a2 + 3, (uint64_t *)&v8);
  }

  else
  {
    *(_BYTE *)unint64_t v6 = 7;
    *(double *)(v6 + sub_100007004((uint64_t)v9 + 8) = v5;
    sub_1000041AC(v6);
    sub_1000041AC(v6);
    uint64_t v7 = v6 + 16;
  }

  a2[4] = v7;
  sub_1000041AC((uint64_t)&v9);
  sub_10000425C(&v10, v9);
}

void sub_1000B3AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_1000B3AC0()
{
  return 1LL;
}

void sub_1000B3ACC(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000B3AE4(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000B3AFC(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000B3B14(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000B3B2C(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000B3B44(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000B3B5C(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000B3B74(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000B3B8C(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000B3BA4(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000B3BBC(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000B3BD4(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000B3BEC(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000B3C04(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000B3C1C(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000B3C34(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000B3C4C(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000B3C64(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000B3C7C(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000B3C94(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000B3CAC(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000B3CC4(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000B3CDC(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000B3CF4(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000B3D0C(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000B3D24(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000B3D38(CC_SHA512_CTX *a1, unsigned __int8 *a2)
{
  int v4 = *a2;
  switch(*a2)
  {
    case 1u:
      LOBYTE(data) = 6;
      CC_SHA512_Update(a1, &data, 1u);
      uint64_t v5 = *a2;
      if (*a2)
      {
        if ((_DWORD)v5 == 1)
        {
          uint64_t v5 = *(void *)(*((void *)a2 + 1) + 16LL);
        }

        else if ((_DWORD)v5 == 2)
        {
          uint64_t v5 = (uint64_t)(*(void *)(*((void *)a2 + 1) + 8LL) - **((void **)a2 + 1)) >> 4;
        }

        else
        {
          uint64_t v5 = 1LL;
        }
      }

      *(void *)&__int128 data = v5;
      CC_SHA512_Update(a1, &data, 8u);
      unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&__int128 v8 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v8 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
      __int128 data = v8;
      __int128 v21 = v8;
      sub_100008B44(&data, (uint64_t)a2);
      sub_100045378((unsigned __int8 **)&data);
      unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&__int128 v9 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v9 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
      __int128 v17 = v9;
      __int128 v18 = v9;
      sub_100008B44(&v17, (uint64_t)a2);
      sub_100008AC8((unsigned __int8 **)&v17);
      for (BOOL i = sub_1000087E8((unsigned __int8 **)&data, (unsigned __int8 **)&v17);
            !i;
            BOOL i = sub_1000087E8((unsigned __int8 **)&data, (unsigned __int8 **)&v17))
      {
        __int128 v11 = (const void **)sub_10005714C(&data);
        sub_1000B4114(a1, v11);
        uint64_t v12 = sub_100008924((unsigned __int8 **)&data);
        sub_1000B3D38(a1, v12);
        sub_100018704((unsigned __int8 **)&data);
      }

      break;
    case 2u:
      LOBYTE(data) = 5;
      CC_SHA512_Update(a1, &data, 1u);
      uint64_t v6 = *a2;
      if (*a2)
      {
        if ((_DWORD)v6 == 1)
        {
          uint64_t v6 = *(void *)(*((void *)a2 + 1) + 16LL);
        }

        else if ((_DWORD)v6 == 2)
        {
          uint64_t v6 = (uint64_t)(*(void *)(*((void *)a2 + 1) + 8LL) - **((void **)a2 + 1)) >> 4;
        }

        else
        {
          uint64_t v6 = 1LL;
        }
      }

      *(void *)&__int128 data = v6;
      CC_SHA512_Update(a1, &data, 8u);
      unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&__int128 v13 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v13 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
      __int128 data = v13;
      __int128 v21 = v13;
      sub_100008B44(&data, (uint64_t)a2);
      sub_100045378((unsigned __int8 **)&data);
      unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&__int128 v14 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v14 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
      __int128 v17 = v14;
      __int128 v18 = v14;
      sub_100008B44(&v17, (uint64_t)a2);
      sub_100008AC8((unsigned __int8 **)&v17);
      for (BOOL j = sub_1000087E8((unsigned __int8 **)&data, (unsigned __int8 **)&v17);
            !j;
            BOOL j = sub_1000087E8((unsigned __int8 **)&data, (unsigned __int8 **)&v17))
      {
        uint64_t v16 = sub_100008924((unsigned __int8 **)&data);
        sub_1000B3D38(a1, v16);
        sub_100018704((unsigned __int8 **)&data);
      }

      break;
    case 3u:
      LOBYTE(data) = 2;
      CC_SHA512_Update(a1, &data, 1u);
      sub_1000218CC((uint64_t)a2, (std::string *)&data);
      sub_1000B4114(a1, (const void **)&data);
      if (SBYTE7(v21) < 0) {
        operator delete((void *)data);
      }
      break;
    case 4u:
      LOBYTE(data) = -86;
      sub_100059DD4((char *)a2, &data);
      if ((_BYTE)data) {
        char v7 = 7;
      }
      else {
        char v7 = 8;
      }
      LOBYTE(data) = v7;
      CC_SHA512_Update(a1, &data, 1u);
      break;
    case 7u:
      LOBYTE(data) = 3;
      CC_SHA512_Update(a1, &data, 1u);
      *(void *)&__int128 data = -1LL;
      sub_10005A088(a2, (double *)&data);
      CC_SHA512_Update(a1, &data, 8u);
      break;
    default:
      if ((v4 - 5) > 2)
      {
        LOBYTE(data) = v4 == 0;
        CC_SHA512_Update(a1, &data, 1u);
      }

      else
      {
        LOBYTE(data) = 4;
        CC_SHA512_Update(a1, &data, 1u);
        *(void *)&__int128 data = 0xAAAAAAAAAAAAAAAALL;
        sub_100059F20(a2, (unint64_t *)&data);
        CC_SHA512_Update(a1, &data, 8u);
      }

      break;
  }

void sub_1000B40F0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000B4114(CC_SHA512_CTX *a1, const void **a2)
{
  __int128 v3 = (const void *)*((unsigned __int8 *)a2 + 23);
  else {
    int v4 = *a2;
  }
  *(void *)leuint64_t n = v3;
  CC_SHA512_Update(a1, len, 8u);
  return CC_SHA512_Update(a1, v4, len[0]);
}

uint64_t sub_1000B419C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  else {
    unint64_t v9 = v5;
  }
  __int128 v17 = a1 + 2;
  if (v9) {
    __int128 v10 = (char *)sub_1000047F4(v7, v9);
  }
  else {
    __int128 v10 = 0LL;
  }
  __int128 v13 = v10;
  __int128 v14 = &v10[16 * v4];
  uint64_t v16 = &v10[16 * v9];
  sub_100008E5C((uint64_t)v14, a2);
  uint64_t v15 = v14 + 16;
  sub_10000470C(a1, &v13);
  uint64_t v11 = a1[1];
  sub_100004A50((uint64_t)&v13);
  return v11;
}

void sub_1000B42A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1000B42B4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  else {
    unint64_t v9 = v5;
  }
  __int128 v18 = a1 + 2;
  __int128 v10 = (char *)sub_1000047F4(v7, v9);
  uint64_t v11 = (uint64_t)&v10[16 * v4];
  *(void *)&__int128 v16 = v10;
  *((void *)&v16 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = v11;
  *((void *)&v17 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = &v10[16 * v12];
  *(void *)(v11 + sub_100007004((uint64_t)v9 + 8) = 0LL;
  uint64_t v13 = *a2;
  *(_BYTE *)uint64_t v11 = 5;
  *(void *)(v11 + sub_100007004((uint64_t)v9 + 8) = v13;
  sub_1000041AC(v11);
  sub_1000041AC(v11);
  *(void *)&__int128 v17 = v11 + 16;
  sub_10000470C(a1, &v16);
  uint64_t v14 = a1[1];
  sub_100004A50((uint64_t)&v16);
  return v14;
}

void sub_1000B43C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1000B43D4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  else {
    unint64_t v9 = v5;
  }
  __int128 v18 = a1 + 2;
  __int128 v10 = (char *)sub_1000047F4(v7, v9);
  uint64_t v11 = (uint64_t)&v10[16 * v4];
  *(void *)&__int128 v16 = v10;
  *((void *)&v16 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = v11;
  *((void *)&v17 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = &v10[16 * v12];
  *(void *)(v11 + sub_100007004((uint64_t)v9 + 8) = 0LL;
  uint64_t v13 = *a2;
  *(_BYTE *)uint64_t v11 = 7;
  *(void *)(v11 + sub_100007004((uint64_t)v9 + 8) = v13;
  sub_1000041AC(v11);
  sub_1000041AC(v11);
  *(void *)&__int128 v17 = v11 + 16;
  sub_10000470C(a1, &v16);
  uint64_t v14 = a1[1];
  sub_100004A50((uint64_t)&v16);
  return v14;
}

void sub_1000B44E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000B44F4(uint64_t a1)
{
  uint64_t v2 = operator new(8uLL);
  void *v2 = &off_10012CF28;
  sub_100005064(__p, ":abs");
  uint64_t v37 = __p;
  uint64_t v3 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v37);
  uint64_t v4 = *((void *)v3 + 5);
  *((void *)v3 + 5) = v2;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  if (v36 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v5 = operator new(8uLL);
  *unint64_t v5 = &off_10012D000;
  sub_100005064(__p, ":lowerBound");
  uint64_t v37 = __p;
  uint64_t v6 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v37);
  uint64_t v7 = *((void *)v6 + 5);
  *((void *)v6 + 5) = v5;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  if (v36 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v8 = operator new(8uLL);
  *uint64_t v8 = &off_10012D048;
  sub_100005064(__p, ":upperBound");
  uint64_t v37 = __p;
  unint64_t v9 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v37);
  uint64_t v10 = *((void *)v9 + 5);
  *((void *)v9 + 5) = v8;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
  }
  if (v36 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v11 = operator new(8uLL);
  *uint64_t v11 = &off_10012CFB8;
  sub_100005064(__p, ":sigdig");
  uint64_t v37 = __p;
  uint64_t v12 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v37);
  uint64_t v13 = *((void *)v12 + 5);
  *((void *)v12 + 5) = v11;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
  }
  if (v36 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v14 = operator new(8uLL);
  *uint64_t v14 = &off_10012CF70;
  sub_100005064(__p, ":truncate");
  uint64_t v37 = __p;
  uint64_t v15 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v37);
  uint64_t v16 = *((void *)v15 + 5);
  *((void *)v15 + 5) = v14;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8LL))(v16);
  }
  if (v36 < 0) {
    operator delete(__p[0]);
  }
  __int128 v17 = operator new(8uLL);
  *__int128 v17 = &off_10012D1B0;
  sub_100005064(__p, ":min");
  uint64_t v37 = __p;
  __int128 v18 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v37);
  uint64_t v19 = *((void *)v18 + 5);
  *((void *)v18 + 5) = v17;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8LL))(v19);
  }
  if (v36 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v20 = operator new(8uLL);
  void *v20 = &off_10012D1F8;
  sub_100005064(__p, ":max");
  uint64_t v37 = __p;
  __int128 v21 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v37);
  uint64_t v22 = *((void *)v21 + 5);
  *((void *)v21 + 5) = v20;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8LL))(v22);
  }
  if (v36 < 0) {
    operator delete(__p[0]);
  }
  char v23 = operator new(8uLL);
  *char v23 = &off_10012D090;
  sub_100005064(__p, ":+");
  uint64_t v37 = __p;
  unint64_t v24 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v37);
  uint64_t v25 = *((void *)v24 + 5);
  *((void *)v24 + 5) = v23;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8LL))(v25);
  }
  if (v36 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v26 = operator new(8uLL);
  *unint64_t v26 = &off_10012D0D8;
  sub_100005064(__p, ":-");
  uint64_t v37 = __p;
  char v27 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v37);
  uint64_t v28 = *((void *)v27 + 5);
  *((void *)v27 + 5) = v26;
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 8LL))(v28);
  }
  if (v36 < 0) {
    operator delete(__p[0]);
  }
  char v29 = operator new(8uLL);
  *char v29 = &off_10012D120;
  sub_100005064(__p, ":*");
  uint64_t v37 = __p;
  char v30 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v37);
  uint64_t v31 = *((void *)v30 + 5);
  *((void *)v30 + 5) = v29;
  if (v31) {
    (*(void (**)(uint64_t))(*(void *)v31 + 8LL))(v31);
  }
  if (v36 < 0) {
    operator delete(__p[0]);
  }
  char v32 = operator new(8uLL);
  *char v32 = &off_10012D168;
  sub_100005064(__p, ":/");
  uint64_t v37 = __p;
  __int128 v33 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v37);
  uint64_t v34 = *((void *)v33 + 5);
  *((void *)v33 + 5) = v32;
  if (v34) {
    (*(void (**)(uint64_t))(*(void *)v34 + 8LL))(v34);
  }
  if (v36 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1000B4A74( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  uint64_t v16 = (void *)nullsub_4(v14);
  operator delete(v16);
  _Unwind_Resume(a1);
}

void sub_1000B4AFC(uint64_t a1, uint64_t *a2)
{
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  __int128 v18 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D1FD4((uint64_t)a2, &v17);
  if ((_BYTE)v17) {
    BOOL v3 = v17 == 6;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    if (v17 == 7)
    {
      double v19 = NAN;
      sub_10005A088((unsigned __int8 *)&v17, &v19);
      uint64_t v4 = &v16;
      v15[0] = 7;
      uint64_t v16 = COERCE__INT64_(fabs(v19));
      sub_1000041AC((uint64_t)v15);
      sub_1000041AC((uint64_t)v15);
      sub_1000041AC((uint64_t)v15);
      unsigned __int8 v5 = v17;
      LOBYTE(v17) = v15[0];
      v15[0] = v5;
      uint64_t v6 = v18;
      __int128 v18 = v16;
      uint64_t v16 = v6;
      sub_1000041AC((uint64_t)&v17);
      sub_1000041AC((uint64_t)v15);
      int v7 = v15[0];
    }

    else
    {
      double v19 = -3.72066208e-103;
      sub_10000FF7C((unsigned __int8 *)&v17, (uint64_t *)&v19);
      uint64_t v8 = *(void *)&v19;
      if (v19 < 0.0) {
        uint64_t v8 = -*(void *)&v19;
      }
      uint64_t v4 = &v14;
      v13[0] = 5;
      uint64_t v14 = (uint64_t *)v8;
      sub_1000041AC((uint64_t)v13);
      sub_1000041AC((uint64_t)v13);
      sub_1000041AC((uint64_t)v13);
      unsigned __int8 v9 = v17;
      LOBYTE(v17) = v13[0];
      v13[0] = v9;
      uint64_t v10 = v18;
      __int128 v18 = v14;
      uint64_t v14 = v10;
      sub_1000041AC((uint64_t)&v17);
      sub_1000041AC((uint64_t)v13);
      int v7 = v13[0];
    }

    sub_10000425C(v4, v7);
  }

  unint64_t v11 = a2[4];
  if (v11 >= a2[5])
  {
    uint64_t v12 = sub_100070EB8(a2 + 3, (uint64_t)&v17);
  }

  else
  {
    sub_10000C3E4(a2[4], (uint64_t)&v17);
    uint64_t v12 = v11 + 16;
    a2[4] = v11 + 16;
  }

  a2[4] = v12;
  sub_1000041AC((uint64_t)&v17);
  sub_10000425C(&v18, v17);
}

void sub_1000B4CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_1000B4CFC()
{
  return 1LL;
}

void sub_1000B4D04(uint64_t a1, uint64_t *a2)
{
  unint64_t v30 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v31 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D1E54((uint64_t)a2, &v30);
  unint64_t v28 = 0xAAAAAAAAAAAAAAAALL;
  double v29 = -3.72066208e-103;
  sub_1000D1FD4((uint64_t)a2, &v28);
  int v3 = v28;
  if (v28 != 7)
  {
    if (!(_BYTE)v28)
    {
      buf[0] = 0;
      __int128 v33 = 0LL;
      sub_1000041AC((uint64_t)buf);
      sub_1000041AC((uint64_t)buf);
      unint64_t v4 = a2[4];
      if (v4 >= a2[5])
      {
        uint64_t v5 = sub_100004B7C(a2 + 3, (uint64_t)buf);
      }

      else
      {
        *(_BYTE *)unint64_t v4 = buf[0];
        *(void *)(v4 + sub_100007004((uint64_t)v9 + 8) = v33;
        sub_1000041AC((uint64_t)buf);
        buf[0] = 0;
        __int128 v33 = 0LL;
        sub_1000041AC(v4);
        uint64_t v5 = v4 + 16;
      }

      a2[4] = v5;
      sub_1000041AC((uint64_t)buf);
      sub_10000425C(&v33, buf[0]);
      goto LABEL_19;
    }

    if (v30 == 7)
    {
      uint64_t v6 = (os_log_s *)qword_100131788;
      if (os_log_type_enabled((os_log_t)qword_100131788, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "[Evaluator::Truncate] Received a float modulus for an non-float number. The modulus will be cast to an int.",  buf,  2u);
        int v3 = v28;
      }
    }

    if (v3 == 6)
    {
      *(void *)std::string buf = 0xAAAAAAAAAAAAAAAALL;
      sub_100059F20((unsigned __int8 *)&v28, (unint64_t *)buf);
      unint64_t v12 = *(void *)buf;
      *(void *)std::string buf = 0xAAAAAAAAAAAAAAAALL;
      sub_100059F20((unsigned __int8 *)&v30, (unint64_t *)buf);
      uint64_t v13 = sub_1000B51A4(v12, *(unint64_t *)buf);
      uint64_t v8 = &v25;
      v24[0] = 6;
      uint64_t v25 = (uint64_t *)v13;
      sub_1000041AC((uint64_t)v24);
      sub_1000041AC((uint64_t)v24);
      sub_1000041AC((uint64_t)v24);
      unsigned __int8 v14 = v28;
      LOBYTE(v2sub_100007004((uint64_t)v9 + 8) = v24[0];
      v24[0] = v14;
      uint64_t v15 = *(uint64_t **)&v29;
      double v29 = *(double *)&v25;
      uint64_t v25 = v15;
      sub_1000041AC((uint64_t)&v28);
      sub_1000041AC((uint64_t)v24);
      int v11 = v24[0];
      goto LABEL_15;
    }

    if (v3 != 7)
    {
      *(void *)std::string buf = 0xAAAAAAAAAAAAAAAALL;
      sub_10000FF7C((unsigned __int8 *)&v28, (uint64_t *)buf);
      int64_t v16 = *(void *)buf;
      *(void *)std::string buf = 0xAAAAAAAAAAAAAAAALL;
      sub_10000FF7C((unsigned __int8 *)&v30, (uint64_t *)buf);
      uint64_t v17 = sub_1000B5234(v16, *(unint64_t *)buf);
      uint64_t v8 = &v23;
      v22[0] = 5;
      char v23 = (uint64_t *)v17;
      sub_1000041AC((uint64_t)v22);
      sub_1000041AC((uint64_t)v22);
      sub_1000041AC((uint64_t)v22);
      unsigned __int8 v18 = v28;
      LOBYTE(v2sub_100007004((uint64_t)v9 + 8) = v22[0];
      v22[0] = v18;
      double v19 = *(uint64_t **)&v29;
      double v29 = *(double *)&v23;
      char v23 = v19;
      sub_1000041AC((uint64_t)&v28);
      sub_1000041AC((uint64_t)v22);
      int v11 = v22[0];
      goto LABEL_15;
    }
  }

  *(void *)std::string buf = -1LL;
  sub_10005A088((unsigned __int8 *)&v28, (double *)buf);
  unint64_t v7 = *(void *)buf;
  *(void *)std::string buf = -1LL;
  sub_10005A088((unsigned __int8 *)&v30, (double *)buf);
  uint64_t v8 = (uint64_t **)&v27;
  v26[0] = 7;
  double v27 = sub_1000B5114(*(double *)&v7, *(double *)buf);
  sub_1000041AC((uint64_t)v26);
  sub_1000041AC((uint64_t)v26);
  sub_1000041AC((uint64_t)v26);
  unsigned __int8 v9 = v28;
  LOBYTE(v2sub_100007004((uint64_t)v9 + 8) = v26[0];
  v26[0] = v9;
  *(double *)&uint64_t v10 = v29;
  double v29 = v27;
  double v27 = *(double *)&v10;
  sub_1000041AC((uint64_t)&v28);
  sub_1000041AC((uint64_t)v26);
  int v11 = v26[0];
LABEL_15:
  sub_10000425C(v8, v11);
  unint64_t v20 = a2[4];
  if (v20 >= a2[5])
  {
    uint64_t v21 = sub_100070EB8(a2 + 3, (uint64_t)&v28);
  }

  else
  {
    sub_10000C3E4(a2[4], (uint64_t)&v28);
    uint64_t v21 = v20 + 16;
    a2[4] = v20 + 16;
  }

  a2[4] = v21;
LABEL_19:
  sub_1000041AC((uint64_t)&v28);
  sub_10000425C((uint64_t **)&v29, v28);
  sub_1000041AC((uint64_t)&v30);
  sub_10000425C(&v31, v30);
}

void sub_1000B50BC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8 = va_arg(va1, uint64_t *);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  int v11 = va_arg(va2, uint64_t *);
  uint64_t v13 = va_arg(va2, void);
  sub_10000417C((uint64_t **)va2);
  sub_10000417C((uint64_t **)va);
  sub_10000417C((uint64_t **)va1);
  _Unwind_Resume(a1);
}

double sub_1000B5114(double a1, double a2)
{
  if (a2 < 2.22044605e-16)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000A9394(exception, "Truncation with negative modulus is not legal");
  }

  return fmin(fmax(ceil(a1 / a2) * a2, -1.79769313e308), 1.79769313e308);
}

void sub_1000B5190(_Unwind_Exception *a1)
{
}

uint64_t sub_1000B51A4(unint64_t a1, unint64_t a2)
{
  if (!a2)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000A9394(exception, "Truncation with negative modulus is not legal");
  }

  uint64_t result = -1LL;
  if (!__CFADD__(~(0xFFFFFFFFFFFFFFFFLL / a2 * a2), a1))
  {
    uint64_t result = a1;
    if (a1 % a2) {
      return a2 + a2 * (a1 / a2);
    }
  }

  return result;
}

void sub_1000B5220(_Unwind_Exception *a1)
{
}

uint64_t sub_1000B5234(int64_t a1, unint64_t a2)
{
  if ((uint64_t)a2 <= 0)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000A9394(exception, "Truncation with negative modulus is not legal");
  }

  uint64_t v2 = 0x7FFFFFFFFFFFFFFFLL;
  if ((uint64_t)(0x7FFFFFFFFFFFFFFFLL / a2 * a2) >= a1)
  {
    if ((a1 & 0x8000000000000000LL) == 0) {
      return sub_1000B51A4(a1, a2);
    }
    return -a1 % a2 + a1;
  }

  return v2;
}

void sub_1000B52BC(_Unwind_Exception *a1)
{
}

uint64_t sub_1000B52D0()
{
  return 1LL;
}

void sub_1000B52D8(uint64_t a1, uint64_t *a2)
{
  unint64_t v3 = sub_1000D1C20(a1, (uint64_t)a2);
  unint64_t v38 = 0xAAAAAAAAAAAAAAAALL;
  double v39 = -3.72066208e-103;
  sub_1000D1FD4((uint64_t)a2, &v38);
  if ((uint64_t)v3 <= 0)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Sigdig with negative amount is not legal");
  }

  if ((_BYTE)v38)
  {
    if (v38 == 6)
    {
      uint64_t v40 = 0xAAAAAAAAAAAAAAAALL;
      sub_100059F20((unsigned __int8 *)&v38, (unint64_t *)&v40);
      unint64_t v6 = (floor(log10((double)(unint64_t)v40)) + 1.0);
      BOOL v7 = v6 > v3;
      unint64_t v8 = v6 - v3;
      if (!v7) {
        goto LABEL_29;
      }
      unint64_t v9 = (unint64_t)__exp10((double)v8);
      if (!v9) {
        goto LABEL_29;
      }
      uint64_t v40 = 0xAAAAAAAAAAAAAAAALL;
      sub_100059F20((unsigned __int8 *)&v38, (unint64_t *)&v40);
      uint64_t v10 = sub_1000B51A4(v40, v9);
      int v11 = &v35;
      v34[0] = 6;
      unint64_t v35 = (uint64_t *)v10;
      sub_1000041AC((uint64_t)v34);
      sub_1000041AC((uint64_t)v34);
      sub_1000041AC((uint64_t)v34);
      unsigned __int8 v12 = v38;
      LOBYTE(v3sub_100007004((uint64_t)v9 + 8) = v34[0];
      v34[0] = v12;
      uint64_t v13 = *(uint64_t **)&v39;
      double v39 = *(double *)&v35;
      unint64_t v35 = v13;
      sub_1000041AC((uint64_t)&v38);
      sub_1000041AC((uint64_t)v34);
      int v14 = v34[0];
      goto LABEL_28;
    }

    if (v38 != 7)
    {
      if (sub_1000B57F8((unsigned __int8 *)&v38, (uint64_t *)0x8000000000000000LL))
      {
        uint64_t v40 = 0xAAAAAAAAAAAAAAAALL;
        sub_10000FF7C((unsigned __int8 *)&v38, &v40);
        uint64_t v15 = v40;
        if (v40 < 0) {
          uint64_t v15 = -v40;
        }
        unint64_t v16 = (floor(log10((double)(unint64_t)v15)) + 1.0);
        BOOL v7 = v16 > v3;
        unint64_t v17 = v16 - v3;
        if (!v7) {
          goto LABEL_29;
        }
        int64_t v18 = (unint64_t)__exp10((double)v17);
      }

      else
      {
        uint64_t v40 = 0xAAAAAAAAAAAAAAAALL;
        sub_10000FF7C((unsigned __int8 *)&v38, &v40);
        uint64_t v23 = v40;
        if (v40 < 0) {
          uint64_t v23 = -v40;
        }
        unint64_t v24 = (floor(log10((double)v23)) + 1.0);
        BOOL v7 = v24 > v3;
        uint64_t v25 = v24 - v3;
        if (!v7) {
          goto LABEL_29;
        }
        int64_t v18 = (uint64_t)__exp10((double)v25);
      }

      if (v18 < 1) {
        goto LABEL_29;
      }
      uint64_t v40 = 0xAAAAAAAAAAAAAAAALL;
      sub_10000FF7C((unsigned __int8 *)&v38, &v40);
      uint64_t v26 = sub_1000B5234(v40, v18);
      int v11 = &v33;
      v32[0] = 5;
      __int128 v33 = (uint64_t *)v26;
      sub_1000041AC((uint64_t)v32);
      sub_1000041AC((uint64_t)v32);
      sub_1000041AC((uint64_t)v32);
      unsigned __int8 v27 = v38;
      LOBYTE(v3sub_100007004((uint64_t)v9 + 8) = v32[0];
      v32[0] = v27;
      unint64_t v28 = *(uint64_t **)&v39;
      double v39 = *(double *)&v33;
      __int128 v33 = v28;
      sub_1000041AC((uint64_t)&v38);
      sub_1000041AC((uint64_t)v32);
      int v14 = v32[0];
      goto LABEL_28;
    }

    uint64_t v40 = -1LL;
    sub_10005A088((unsigned __int8 *)&v38, (double *)&v40);
    double v4 = fabs(*(double *)&v40);
    if (v4 >= 2.22044605e-16) {
      int v5 = (int)(floor(log10(v4)) + 1.0);
    }
    else {
      int v5 = 0;
    }
    double v19 = __exp10((double)(v5 - (int)v3));
    if (v19 > 0.0)
    {
      double v20 = v19;
      uint64_t v40 = -1LL;
      sub_10005A088((unsigned __int8 *)&v38, (double *)&v40);
      int v11 = (uint64_t **)&v37;
      v36[0] = 7;
      double v37 = sub_1000B5114(*(double *)&v40, v20);
      sub_1000041AC((uint64_t)v36);
      sub_1000041AC((uint64_t)v36);
      sub_1000041AC((uint64_t)v36);
      unsigned __int8 v21 = v38;
      LOBYTE(v3sub_100007004((uint64_t)v9 + 8) = v36[0];
      v36[0] = v21;
      *(double *)&uint64_t v22 = v39;
      double v39 = v37;
      double v37 = *(double *)&v22;
      sub_1000041AC((uint64_t)&v38);
      sub_1000041AC((uint64_t)v36);
      int v14 = v36[0];
LABEL_28:
      sub_10000425C(v11, v14);
    }
  }

void sub_1000B5704( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1000B5758(unsigned __int8 *a1, int a2)
{
  v5[0] = 5;
  unint64_t v6 = (uint64_t *)a2;
  sub_1000041AC((uint64_t)v5);
  sub_1000041AC((uint64_t)v5);
  uint64_t v3 = sub_10002CE28(a1, v5);
  sub_1000041AC((uint64_t)v5);
  sub_10000425C(&v6, v5[0]);
  return v3;
}

uint64_t sub_1000B57F8(unsigned __int8 *a1, uint64_t *a2)
{
  v5[0] = 5;
  unint64_t v6 = a2;
  sub_1000041AC((uint64_t)v5);
  sub_1000041AC((uint64_t)v5);
  uint64_t v3 = sub_10002CE28(a1, v5);
  sub_1000041AC((uint64_t)v5);
  sub_10000425C(&v6, v5[0]);
  return v3;
}

uint64_t sub_1000B5894()
{
  return 1LL;
}

void sub_1000B589C(uint64_t a1, uint64_t *a2)
{
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  int64_t v18 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D1FD4((uint64_t)a2, &v17);
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v16 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D2314((uint64_t)a2, &v15);
  if (!(_BYTE)v17)
  {
    LOBYTE(v2sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = 0;
    *(void *)&__int128 v23 = 0LL;
    sub_1000041AC((uint64_t)&v22);
    sub_1000041AC((uint64_t)&v22);
    unint64_t v5 = a2[4];
    if (v5 >= a2[5])
    {
      uint64_t v6 = sub_100004B7C(a2 + 3, (uint64_t)&v22);
      goto LABEL_7;
    }

    goto LABEL_5;
  }

  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  v13[0] = v3;
  v13[1] = v3;
  uint64_t v10 = (unsigned __int8 *)&v15;
  __int128 v11 = 0uLL;
  *(void *)&__int128 v12 = 0LL;
  *((void *)&v12 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0x8000000000000000LL;
  sub_100021128(&v10);
  BOOL v7 = (unsigned __int8 *)&v15;
  __int128 v8 = 0uLL;
  *(void *)&__int128 v9 = 0LL;
  *((void *)&v9 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0x8000000000000000LL;
  sub_1000211FC(&v7);
  __int128 v23 = v11;
  __int128 v24 = v12;
  __int128 v20 = v8;
  __int128 v21 = v9;
  char v25 = 0;
  uint64_t v22 = v10;
  double v19 = v7;
  sub_1000B744C((uint64_t)&v22, (uint64_t *)&v19, (unsigned __int8 *)&v17, (uint64_t)v13);
  uint64_t v22 = (unsigned __int8 *)&v15;
  __int128 v23 = 0uLL;
  *(void *)&__int128 v24 = 0LL;
  *((void *)&v24 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0x8000000000000000LL;
  sub_100021128(&v22);
  uint64_t v4 = sub_1000B5B08((unsigned __int8 **)v13, (uint64_t)&v22);
  LOBYTE(v2sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = 6;
  *(void *)&__int128 v23 = v4;
  sub_1000041AC((uint64_t)&v22);
  sub_1000041AC((uint64_t)&v22);
  unint64_t v5 = a2[4];
  if (v5 < a2[5])
  {
LABEL_5:
    *(_BYTE *)unint64_t v5 = (_BYTE)v22;
    *(void *)(v5 + sub_100007004((uint64_t)v9 + 8) = v23;
    sub_1000041AC((uint64_t)&v22);
    LOBYTE(v2sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = 0;
    *(void *)&__int128 v23 = 0LL;
    sub_1000041AC(v5);
    uint64_t v6 = v5 + 16;
    goto LABEL_7;
  }

  uint64_t v6 = sub_100004B7C(a2 + 3, (uint64_t)&v22);
LABEL_7:
  a2[4] = v6;
  sub_1000041AC((uint64_t)&v22);
  sub_10000425C((uint64_t **)&v23, v22);
  sub_1000041AC((uint64_t)&v15);
  sub_10000425C(&v16, v15);
  sub_1000041AC((uint64_t)&v17);
  sub_10000425C(&v18, v17);
}

void sub_1000B5AC4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t *a25, uint64_t a26, uint64_t *a27)
{
}

uint64_t sub_1000B5B08(unsigned __int8 **a1, uint64_t a2)
{
  if (!*a1) {
    sub_1000B77E0();
  }
  int v2 = **a1;
  if (v2 == 2) {
    return (uint64_t)&a1[2][-*(void *)(a2 + 16)] >> 4;
  }
  if (v2 == 1)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    sub_100005064(v5, "cannot use offsets with object iterators");
    sub_100008C0C(209, (uint64_t)v5, exception);
  }

  return (uint64_t)&a1[4][-*(void *)(a2 + 32)];
}

void sub_1000B5BF0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }

  else if (!v15)
  {
    goto LABEL_6;
  }

  __cxa_free_exception(v14);
  goto LABEL_6;
}

uint64_t sub_1000B5C2C()
{
  return 1LL;
}

void sub_1000B5C34(uint64_t a1, uint64_t *a2)
{
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  int64_t v18 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D25BC((uint64_t)a2, &v17);
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v16 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D2314((uint64_t)a2, &v15);
  if (!(_BYTE)v17)
  {
    LOBYTE(v2sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = 0;
    *(void *)&__int128 v23 = 0LL;
    sub_1000041AC((uint64_t)&v22);
    sub_1000041AC((uint64_t)&v22);
    unint64_t v5 = a2[4];
    if (v5 >= a2[5])
    {
      uint64_t v6 = sub_100004B7C(a2 + 3, (uint64_t)&v22);
      goto LABEL_7;
    }

    goto LABEL_5;
  }

  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  v13[0] = v3;
  v13[1] = v3;
  uint64_t v10 = (unsigned __int8 *)&v15;
  __int128 v11 = 0uLL;
  *(void *)&__int128 v12 = 0LL;
  *((void *)&v12 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0x8000000000000000LL;
  sub_100021128(&v10);
  BOOL v7 = (unsigned __int8 *)&v15;
  __int128 v8 = 0uLL;
  *(void *)&__int128 v9 = 0LL;
  *((void *)&v9 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0x8000000000000000LL;
  sub_1000211FC(&v7);
  __int128 v23 = v11;
  __int128 v24 = v12;
  __int128 v20 = v8;
  __int128 v21 = v9;
  uint64_t v22 = v10;
  double v19 = v7;
  sub_1000B767C((uint64_t)&v22, (uint64_t *)&v19, (double *)&v17, (uint64_t)v13);
  uint64_t v22 = (unsigned __int8 *)&v15;
  __int128 v23 = 0uLL;
  *(void *)&__int128 v24 = 0LL;
  *((void *)&v24 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0x8000000000000000LL;
  sub_100021128(&v22);
  uint64_t v4 = sub_1000B5B08((unsigned __int8 **)v13, (uint64_t)&v22);
  LOBYTE(v2sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = 6;
  *(void *)&__int128 v23 = v4;
  sub_1000041AC((uint64_t)&v22);
  sub_1000041AC((uint64_t)&v22);
  unint64_t v5 = a2[4];
  if (v5 < a2[5])
  {
LABEL_5:
    *(_BYTE *)unint64_t v5 = (_BYTE)v22;
    *(void *)(v5 + sub_100007004((uint64_t)v9 + 8) = v23;
    sub_1000041AC((uint64_t)&v22);
    LOBYTE(v2sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = 0;
    *(void *)&__int128 v23 = 0LL;
    sub_1000041AC(v5);
    uint64_t v6 = v5 + 16;
    goto LABEL_7;
  }

  uint64_t v6 = sub_100004B7C(a2 + 3, (uint64_t)&v22);
LABEL_7:
  a2[4] = v6;
  sub_1000041AC((uint64_t)&v22);
  sub_10000425C((uint64_t **)&v23, v22);
  sub_1000041AC((uint64_t)&v15);
  sub_10000425C(&v16, v15);
  sub_1000041AC((uint64_t)&v17);
  sub_10000425C(&v18, v17);
}

void sub_1000B5E58( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t *a24, uint64_t a25, uint64_t *a26)
{
}

uint64_t sub_1000B5E9C()
{
  return 1LL;
}

void sub_1000B5EA4(uint64_t a1, uint64_t *a2)
{
  unint64_t v28 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v29 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D1FD4((uint64_t)a2, &v28);
  unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v27 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D1FD4((uint64_t)a2, &v26);
  unint64_t v24 = 0xAAAAAAAAAAAAAA00LL;
  double v25 = 0.0;
  sub_1000041AC((uint64_t)&v24);
  sub_1000041AC((uint64_t)&v24);
  if ((_BYTE)v26)
  {
    if ((_BYTE)v28)
    {
      if (v26 == 7 || v28 == 7)
      {
        double v30 = NAN;
        sub_10005A088((unsigned __int8 *)&v26, &v30);
        double v12 = v30;
        double v30 = NAN;
        sub_10005A088((unsigned __int8 *)&v28, &v30);
        v18[0] = 7;
        double v19 = v12 + v30;
      }

      else
      {
        if (v26 == 6 && v28 == 6)
        {
          double v30 = -3.72066208e-103;
          sub_100059F20((unsigned __int8 *)&v26, (unint64_t *)&v30);
          double v3 = v30;
          double v30 = -3.72066208e-103;
          sub_100059F20((unsigned __int8 *)&v28, (unint64_t *)&v30);
          *(void *)&double v4 = *(void *)&v30 + *(void *)&v3;
          char v5 = 6;
        }

        else
        {
          double v30 = -3.72066208e-103;
          sub_10000FF7C((unsigned __int8 *)&v26, (uint64_t *)&v30);
          double v13 = v30;
          double v30 = -3.72066208e-103;
          sub_10000FF7C((unsigned __int8 *)&v28, (uint64_t *)&v30);
          *(void *)&double v4 = *(void *)&v30 + *(void *)&v13;
          char v5 = 5;
        }

        v18[0] = v5;
        double v19 = v4;
      }

      sub_1000041AC((uint64_t)v18);
      sub_1000041AC((uint64_t)v18);
      sub_1000041AC((uint64_t)v18);
      unsigned __int8 v14 = v24;
      LOBYTE(v24) = v18[0];
      v18[0] = v14;
      BOOL v7 = (uint64_t **)&v19;
      *(double *)&unint64_t v15 = v25;
      double v25 = v19;
      double v19 = *(double *)&v15;
      sub_1000041AC((uint64_t)&v24);
      sub_1000041AC((uint64_t)v18);
      int v9 = v18[0];
    }

    else
    {
      sub_10000C3E4((uint64_t)v20, (uint64_t)&v26);
      sub_1000041AC((uint64_t)v20);
      char v10 = v24;
      LOBYTE(v24) = v20[0];
      v20[0] = v10;
      BOOL v7 = &v21;
      __int128 v11 = *(uint64_t **)&v25;
      double v25 = *(double *)&v21;
      __int128 v21 = v11;
      sub_1000041AC((uint64_t)&v24);
      sub_1000041AC((uint64_t)v20);
      int v9 = v20[0];
    }
  }

  else
  {
    sub_10000C3E4((uint64_t)v22, (uint64_t)&v28);
    sub_1000041AC((uint64_t)v22);
    char v6 = v24;
    LOBYTE(v24) = v22[0];
    v22[0] = v6;
    BOOL v7 = &v23;
    __int128 v8 = *(uint64_t **)&v25;
    double v25 = *(double *)&v23;
    __int128 v23 = v8;
    sub_1000041AC((uint64_t)&v24);
    sub_1000041AC((uint64_t)v22);
    int v9 = v22[0];
  }

  sub_10000425C(v7, v9);
  unint64_t v16 = a2[4];
  if (v16 >= a2[5])
  {
    uint64_t v17 = sub_100004B7C(a2 + 3, (uint64_t)&v24);
  }

  else
  {
    *(_BYTE *)unint64_t v16 = v24;
    *(double *)(v16 + sub_100007004((uint64_t)v9 + 8) = v25;
    sub_1000041AC((uint64_t)&v24);
    LOBYTE(v24) = 0;
    double v25 = 0.0;
    sub_1000041AC(v16);
    uint64_t v17 = v16 + 16;
  }

  a2[4] = v17;
  sub_1000041AC((uint64_t)&v24);
  sub_10000425C((uint64_t **)&v25, v24);
  sub_1000041AC((uint64_t)&v26);
  sub_10000425C(&v27, v26);
  sub_1000041AC((uint64_t)&v28);
  sub_10000425C(&v29, v28);
}

void sub_1000B61C8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  __int128 v8 = va_arg(va1, uint64_t *);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  __int128 v11 = va_arg(va2, uint64_t *);
  uint64_t v13 = va_arg(va2, void);
  sub_10000417C((uint64_t **)va);
  sub_10000417C((uint64_t **)va1);
  sub_10000417C((uint64_t **)va2);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B6200()
{
  return 1LL;
}

void sub_1000B6208(uint64_t a1, uint64_t *a2)
{
  unint64_t v32 = 0xAAAAAAAAAAAAAAAALL;
  __int128 v33 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D1FD4((uint64_t)a2, &v32);
  unint64_t v30 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v31 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D1FD4((uint64_t)a2, &v30);
  unint64_t v28 = 0xAAAAAAAAAAAAAA00LL;
  double v29 = 0.0;
  sub_1000041AC((uint64_t)&v28);
  sub_1000041AC((uint64_t)&v28);
  if ((_BYTE)v32)
  {
    if ((_BYTE)v30)
    {
      if (v32 == 7 || v30 == 7)
      {
        double v22 = NAN;
        sub_10005A088((unsigned __int8 *)&v30, &v22);
        double v10 = v22;
        double v22 = NAN;
        sub_10005A088((unsigned __int8 *)&v32, &v22);
        v20[0] = 7;
        double v21 = v10 - v22;
      }

      else
      {
        if (v32 == 6 && v30 == 6)
        {
          double v22 = -3.72066208e-103;
          sub_100059F20((unsigned __int8 *)&v30, (unint64_t *)&v22);
          double v3 = v22;
          double v22 = -3.72066208e-103;
          sub_100059F20((unsigned __int8 *)&v32, (unint64_t *)&v22);
          *(void *)&double v4 = *(void *)&v3 - *(void *)&v22;
          char v5 = 6;
        }

        else
        {
          double v22 = -3.72066208e-103;
          sub_10000FF7C((unsigned __int8 *)&v30, (uint64_t *)&v22);
          double v11 = v22;
          double v22 = -3.72066208e-103;
          sub_10000FF7C((unsigned __int8 *)&v32, (uint64_t *)&v22);
          *(void *)&double v4 = *(void *)&v11 - *(void *)&v22;
          char v5 = 5;
        }

        v20[0] = v5;
        double v21 = v4;
      }

      sub_1000041AC((uint64_t)v20);
      sub_1000041AC((uint64_t)v20);
      sub_1000041AC((uint64_t)v20);
      unsigned __int8 v12 = v28;
      LOBYTE(v2sub_100007004((uint64_t)v9 + 8) = v20[0];
      v20[0] = v12;
      BOOL v7 = (uint64_t **)&v21;
      *(double *)&uint64_t v13 = v29;
      double v29 = v21;
      double v21 = *(double *)&v13;
      sub_1000041AC((uint64_t)&v28);
      sub_1000041AC((uint64_t)v20);
      int v9 = v20[0];
    }

    else
    {
      LOBYTE(v2sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = 5;
      uint64_t v23 = 0LL;
      sub_1000041AC((uint64_t)&v22);
      sub_1000041AC((uint64_t)&v22);
      if (LOBYTE(v22) == 7 || v32 == 7)
      {
        double v34 = NAN;
        sub_10005A088((unsigned __int8 *)&v22, &v34);
        double v34 = NAN;
        sub_10005A088((unsigned __int8 *)&v32, &v34);
        v24[0] = 7;
        double v25 = -v34;
      }

      else
      {
        if (LOBYTE(v22) == 6 && v32 == 6)
        {
          double v34 = -3.72066208e-103;
          sub_100059F20((unsigned __int8 *)&v22, (unint64_t *)&v34);
          double v34 = -3.72066208e-103;
          sub_100059F20((unsigned __int8 *)&v32, (unint64_t *)&v34);
          *(void *)&double v14 = -*(void *)&v34;
          char v15 = 6;
        }

        else
        {
          double v34 = -3.72066208e-103;
          sub_10000FF7C((unsigned __int8 *)&v22, (uint64_t *)&v34);
          double v34 = -3.72066208e-103;
          sub_10000FF7C((unsigned __int8 *)&v32, (uint64_t *)&v34);
          *(void *)&double v14 = -*(void *)&v34;
          char v15 = 5;
        }

        v24[0] = v15;
        double v25 = v14;
      }

      BOOL v7 = (uint64_t **)&v23;
      sub_1000041AC((uint64_t)v24);
      sub_1000041AC((uint64_t)v24);
      sub_1000041AC((uint64_t)v24);
      unsigned __int8 v16 = v28;
      LOBYTE(v2sub_100007004((uint64_t)v9 + 8) = v24[0];
      v24[0] = v16;
      *(double *)&uint64_t v17 = v29;
      double v29 = v25;
      double v25 = *(double *)&v17;
      sub_1000041AC((uint64_t)&v28);
      sub_1000041AC((uint64_t)v24);
      sub_10000425C((uint64_t **)&v25, v24[0]);
      sub_1000041AC((uint64_t)&v22);
      int v9 = LOBYTE(v22);
    }
  }

  else
  {
    sub_10000C3E4((uint64_t)v26, (uint64_t)&v30);
    sub_1000041AC((uint64_t)v26);
    char v6 = v28;
    LOBYTE(v2sub_100007004((uint64_t)v9 + 8) = v26[0];
    v26[0] = v6;
    BOOL v7 = &v27;
    __int128 v8 = *(uint64_t **)&v29;
    double v29 = *(double *)&v27;
    uint64_t v27 = v8;
    sub_1000041AC((uint64_t)&v28);
    sub_1000041AC((uint64_t)v26);
    int v9 = v26[0];
  }

  sub_10000425C(v7, v9);
  unint64_t v18 = a2[4];
  if (v18 >= a2[5])
  {
    uint64_t v19 = sub_100004B7C(a2 + 3, (uint64_t)&v28);
  }

  else
  {
    *(_BYTE *)unint64_t v18 = v28;
    *(double *)(v18 + sub_100007004((uint64_t)v9 + 8) = v29;
    sub_1000041AC((uint64_t)&v28);
    LOBYTE(v2sub_100007004((uint64_t)v9 + 8) = 0;
    double v29 = 0.0;
    sub_1000041AC(v18);
    uint64_t v19 = v18 + 16;
  }

  a2[4] = v19;
  sub_1000041AC((uint64_t)&v28);
  sub_10000425C((uint64_t **)&v29, v28);
  sub_1000041AC((uint64_t)&v30);
  sub_10000425C(&v31, v30);
  sub_1000041AC((uint64_t)&v32);
  sub_10000425C(&v33, v32);
}

void sub_1000B6630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  char v5 = va_arg(va1, uint64_t *);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  va_copy(va2, va1);
  unsigned __int8 v12 = va_arg(va2, uint64_t *);
  uint64_t v14 = va_arg(va2, void);
  sub_10000417C((uint64_t **)va);
  sub_10000417C((uint64_t **)va1);
  sub_10000417C((uint64_t **)va2);
  sub_10000417C((uint64_t **)(v3 - 80));
  _Unwind_Resume(a1);
}

uint64_t sub_1000B6678()
{
  return 1LL;
}

void sub_1000B6680(uint64_t a1, uint64_t *a2)
{
  unint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v19 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D1FD4((uint64_t)a2, &v18);
  unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v17 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D1FD4((uint64_t)a2, &v16);
  unint64_t v14 = 0xAAAAAAAAAAAAAA00LL;
  double v15 = 0.0;
  sub_1000041AC((uint64_t)&v14);
  sub_1000041AC((uint64_t)&v14);
  if ((_BYTE)v16 && (_BYTE)v18)
  {
    if (v16 == 7 || v18 == 7)
    {
      double v20 = NAN;
      sub_10005A088((unsigned __int8 *)&v16, &v20);
      double v6 = v20;
      double v20 = NAN;
      sub_10005A088((unsigned __int8 *)&v18, &v20);
      v12[0] = 7;
      double v13 = v6 * v20;
    }

    else
    {
      if (v16 == 6 && v18 == 6)
      {
        double v20 = -3.72066208e-103;
        sub_100059F20((unsigned __int8 *)&v16, (unint64_t *)&v20);
        double v3 = v20;
        double v20 = -3.72066208e-103;
        sub_100059F20((unsigned __int8 *)&v18, (unint64_t *)&v20);
        uint64_t v4 = *(void *)&v20 * *(void *)&v3;
        char v5 = 6;
      }

      else
      {
        double v20 = -3.72066208e-103;
        sub_10000FF7C((unsigned __int8 *)&v16, (uint64_t *)&v20);
        double v7 = v20;
        double v20 = -3.72066208e-103;
        sub_10000FF7C((unsigned __int8 *)&v18, (uint64_t *)&v20);
        uint64_t v4 = *(void *)&v20 * *(void *)&v7;
        char v5 = 5;
      }

      v12[0] = v5;
      double v13 = *(double *)&v4;
    }

    sub_1000041AC((uint64_t)v12);
    sub_1000041AC((uint64_t)v12);
    sub_1000041AC((uint64_t)v12);
    unsigned __int8 v8 = v14;
    LOBYTE(v14) = v12[0];
    v12[0] = v8;
    *(double *)&uint64_t v9 = v15;
    double v15 = v13;
    double v13 = *(double *)&v9;
    sub_1000041AC((uint64_t)&v14);
    sub_1000041AC((uint64_t)v12);
    sub_10000425C((uint64_t **)&v13, v12[0]);
  }

  unint64_t v10 = a2[4];
  if (v10 >= a2[5])
  {
    uint64_t v11 = sub_100004B7C(a2 + 3, (uint64_t)&v14);
  }

  else
  {
    *(_BYTE *)unint64_t v10 = v14;
    *(double *)(v10 + sub_100007004((uint64_t)v9 + 8) = v15;
    sub_1000041AC((uint64_t)&v14);
    LOBYTE(v14) = 0;
    double v15 = 0.0;
    sub_1000041AC(v10);
    uint64_t v11 = v10 + 16;
  }

  a2[4] = v11;
  sub_1000041AC((uint64_t)&v14);
  sub_10000425C((uint64_t **)&v15, v14);
  sub_1000041AC((uint64_t)&v16);
  sub_10000425C(&v17, v16);
  sub_1000041AC((uint64_t)&v18);
  sub_10000425C(&v19, v18);
}

void sub_1000B68FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4 = va_arg(va1, uint64_t *);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  double v7 = va_arg(va2, uint64_t *);
  uint64_t v9 = va_arg(va2, void);
  sub_10000417C((uint64_t **)va);
  sub_10000417C((uint64_t **)va1);
  sub_10000417C((uint64_t **)va2);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B6934()
{
  return 1LL;
}

void sub_1000B693C(uint64_t a1, uint64_t *a2)
{
  unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
  double v20 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D1FD4((uint64_t)a2, &v19);
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v18 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D1FD4((uint64_t)a2, &v17);
  unint64_t v15 = 0xAAAAAAAAAAAAAA00LL;
  double v16 = 0.0;
  sub_1000041AC((uint64_t)&v15);
  sub_1000041AC((uint64_t)&v15);
  if ((_BYTE)v17 && (_BYTE)v19)
  {
    if (sub_1000B5758((unsigned __int8 *)&v19, 0))
    {
      exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Divide by zero");
    }

    if (v17 == 7 || v19 == 7)
    {
      double v21 = NAN;
      sub_10005A088((unsigned __int8 *)&v17, &v21);
      double v3 = v21;
      double v21 = NAN;
      sub_10005A088((unsigned __int8 *)&v19, &v21);
      v13[0] = 7;
      double v14 = v3 / v21;
    }

    else
    {
      if (v17 == 6 && v19 == 6)
      {
        double v21 = -3.72066208e-103;
        sub_100059F20((unsigned __int8 *)&v17, (unint64_t *)&v21);
        double v4 = v21;
        double v21 = -3.72066208e-103;
        sub_100059F20((unsigned __int8 *)&v19, (unint64_t *)&v21);
        unint64_t v5 = *(void *)&v4 / *(void *)&v21;
        char v6 = 6;
      }

      else
      {
        double v21 = -3.72066208e-103;
        sub_10000FF7C((unsigned __int8 *)&v17, (uint64_t *)&v21);
        double v7 = v21;
        double v21 = -3.72066208e-103;
        sub_10000FF7C((unsigned __int8 *)&v19, (uint64_t *)&v21);
        unint64_t v5 = *(void *)&v7 / *(uint64_t *)&v21;
        char v6 = 5;
      }

      v13[0] = v6;
      double v14 = *(double *)&v5;
    }

    sub_1000041AC((uint64_t)v13);
    sub_1000041AC((uint64_t)v13);
    sub_1000041AC((uint64_t)v13);
    unsigned __int8 v8 = v15;
    LOBYTE(v15) = v13[0];
    v13[0] = v8;
    *(double *)&uint64_t v9 = v16;
    double v16 = v14;
    double v14 = *(double *)&v9;
    sub_1000041AC((uint64_t)&v15);
    sub_1000041AC((uint64_t)v13);
    sub_10000425C((uint64_t **)&v14, v13[0]);
  }

  unint64_t v10 = a2[4];
  if (v10 >= a2[5])
  {
    uint64_t v11 = sub_100004B7C(a2 + 3, (uint64_t)&v15);
  }

  else
  {
    *(_BYTE *)unint64_t v10 = v15;
    *(double *)(v10 + sub_100007004((uint64_t)v9 + 8) = v16;
    sub_1000041AC((uint64_t)&v15);
    LOBYTE(v15) = 0;
    double v16 = 0.0;
    sub_1000041AC(v10);
    uint64_t v11 = v10 + 16;
  }

  a2[4] = v11;
  sub_1000041AC((uint64_t)&v15);
  sub_10000425C((uint64_t **)&v16, v15);
  sub_1000041AC((uint64_t)&v17);
  sub_10000425C(&v18, v17);
  sub_1000041AC((uint64_t)&v19);
  sub_10000425C(&v20, v19);
}

void sub_1000B6C14( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, uint64_t *a13, uint64_t a14, uint64_t *a15)
{
}

uint64_t sub_1000B6C5C()
{
  return 1LL;
}

void sub_1000B6C64(uint64_t a1, uint64_t *a2)
{
  unint64_t v29 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v30 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D1FD4((uint64_t)a2, &v29);
  unint64_t v27 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v28 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D1FD4((uint64_t)a2, &v27);
  unint64_t v25 = 0xAAAAAAAAAAAAAA00LL;
  unint64_t v26 = 0LL;
  sub_1000041AC((uint64_t)&v25);
  sub_1000041AC((uint64_t)&v25);
  if ((_BYTE)v27)
  {
    if ((_BYTE)v29)
    {
      if (v27 == 7 || v29 == 7)
      {
        double v31 = NAN;
        sub_10005A088((unsigned __int8 *)&v27, &v31);
        double v12 = v31;
        double v31 = NAN;
        sub_10005A088((unsigned __int8 *)&v29, &v31);
        double v13 = v31;
        if (v31 >= v12) {
          double v13 = v12;
        }
        v19[0] = 7;
        double v20 = *(uint64_t **)&v13;
      }

      else
      {
        if (v27 == 6 && v29 == 6)
        {
          double v31 = -3.72066208e-103;
          sub_100059F20((unsigned __int8 *)&v27, (unint64_t *)&v31);
          unint64_t v3 = *(void *)&v31;
          double v31 = -3.72066208e-103;
          sub_100059F20((unsigned __int8 *)&v29, (unint64_t *)&v31);
          double v4 = v31;
          if (*(void *)&v31 >= v3) {
            double v4 = *(double *)&v3;
          }
          char v5 = 6;
        }

        else
        {
          double v31 = -3.72066208e-103;
          sub_10000FF7C((unsigned __int8 *)&v27, (uint64_t *)&v31);
          double v14 = v31;
          double v31 = -3.72066208e-103;
          sub_10000FF7C((unsigned __int8 *)&v29, (uint64_t *)&v31);
          double v4 = v31;
          char v5 = 5;
        }

        v19[0] = v5;
        double v20 = *(uint64_t **)&v4;
      }

      sub_1000041AC((uint64_t)v19);
      sub_1000041AC((uint64_t)v19);
      sub_1000041AC((uint64_t)v19);
      unsigned __int8 v15 = v25;
      LOBYTE(v25) = v19[0];
      v19[0] = v15;
      double v7 = &v20;
      double v16 = v26;
      unint64_t v26 = v20;
      double v20 = v16;
      sub_1000041AC((uint64_t)&v25);
      sub_1000041AC((uint64_t)v19);
      int v9 = v19[0];
    }

    else
    {
      sub_10000C3E4((uint64_t)v21, (uint64_t)&v27);
      sub_1000041AC((uint64_t)v21);
      char v10 = v25;
      LOBYTE(v25) = v21[0];
      v21[0] = v10;
      double v7 = &v22;
      uint64_t v11 = v26;
      unint64_t v26 = v22;
      double v22 = v11;
      sub_1000041AC((uint64_t)&v25);
      sub_1000041AC((uint64_t)v21);
      int v9 = v21[0];
    }
  }

  else
  {
    sub_10000C3E4((uint64_t)v23, (uint64_t)&v29);
    sub_1000041AC((uint64_t)v23);
    char v6 = v25;
    LOBYTE(v25) = v23[0];
    v23[0] = v6;
    double v7 = &v24;
    unsigned __int8 v8 = v26;
    unint64_t v26 = v24;
    unint64_t v24 = v8;
    sub_1000041AC((uint64_t)&v25);
    sub_1000041AC((uint64_t)v23);
    int v9 = v23[0];
  }

  sub_10000425C(v7, v9);
  unint64_t v17 = a2[4];
  if (v17 >= a2[5])
  {
    uint64_t v18 = sub_100004B7C(a2 + 3, (uint64_t)&v25);
  }

  else
  {
    *(_BYTE *)unint64_t v17 = v25;
    *(void *)(v17 + sub_100007004((uint64_t)v9 + 8) = v26;
    sub_1000041AC((uint64_t)&v25);
    LOBYTE(v25) = 0;
    unint64_t v26 = 0LL;
    sub_1000041AC(v17);
    uint64_t v18 = v17 + 16;
  }

  a2[4] = v18;
  sub_1000041AC((uint64_t)&v25);
  sub_10000425C(&v26, v25);
  sub_1000041AC((uint64_t)&v27);
  sub_10000425C(&v28, v27);
  sub_1000041AC((uint64_t)&v29);
  sub_10000425C(&v30, v29);
}

void sub_1000B6F94( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  unsigned __int8 v8 = va_arg(va1, uint64_t *);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v11 = va_arg(va2, uint64_t *);
  uint64_t v13 = va_arg(va2, void);
  sub_10000417C((uint64_t **)va);
  sub_10000417C((uint64_t **)va1);
  sub_10000417C((uint64_t **)va2);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B6FCC()
{
  return 1LL;
}

void sub_1000B6FD4(uint64_t a1, uint64_t *a2)
{
  unint64_t v29 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v30 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D1FD4((uint64_t)a2, &v29);
  unint64_t v27 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v28 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D1FD4((uint64_t)a2, &v27);
  unint64_t v25 = 0xAAAAAAAAAAAAAA00LL;
  unint64_t v26 = 0LL;
  sub_1000041AC((uint64_t)&v25);
  sub_1000041AC((uint64_t)&v25);
  if ((_BYTE)v27)
  {
    if ((_BYTE)v29)
    {
      if (v27 == 7 || v29 == 7)
      {
        double v31 = NAN;
        sub_10005A088((unsigned __int8 *)&v27, &v31);
        double v12 = v31;
        double v31 = NAN;
        sub_10005A088((unsigned __int8 *)&v29, &v31);
        double v13 = v31;
        if (v12 >= v31) {
          double v13 = v12;
        }
        v19[0] = 7;
        double v20 = *(uint64_t **)&v13;
      }

      else
      {
        if (v27 == 6 && v29 == 6)
        {
          double v31 = -3.72066208e-103;
          sub_100059F20((unsigned __int8 *)&v27, (unint64_t *)&v31);
          unint64_t v3 = *(void *)&v31;
          double v31 = -3.72066208e-103;
          sub_100059F20((unsigned __int8 *)&v29, (unint64_t *)&v31);
          double v4 = v31;
          if (v3 > *(void *)&v31) {
            double v4 = *(double *)&v3;
          }
          char v5 = 6;
        }

        else
        {
          double v31 = -3.72066208e-103;
          sub_10000FF7C((unsigned __int8 *)&v27, (uint64_t *)&v31);
          double v14 = v31;
          double v31 = -3.72066208e-103;
          sub_10000FF7C((unsigned __int8 *)&v29, (uint64_t *)&v31);
          double v4 = v31;
          char v5 = 5;
        }

        v19[0] = v5;
        double v20 = *(uint64_t **)&v4;
      }

      sub_1000041AC((uint64_t)v19);
      sub_1000041AC((uint64_t)v19);
      sub_1000041AC((uint64_t)v19);
      unsigned __int8 v15 = v25;
      LOBYTE(v25) = v19[0];
      v19[0] = v15;
      double v7 = &v20;
      double v16 = v26;
      unint64_t v26 = v20;
      double v20 = v16;
      sub_1000041AC((uint64_t)&v25);
      sub_1000041AC((uint64_t)v19);
      int v9 = v19[0];
    }

    else
    {
      sub_10000C3E4((uint64_t)v21, (uint64_t)&v27);
      sub_1000041AC((uint64_t)v21);
      char v10 = v25;
      LOBYTE(v25) = v21[0];
      v21[0] = v10;
      double v7 = &v22;
      uint64_t v11 = v26;
      unint64_t v26 = v22;
      double v22 = v11;
      sub_1000041AC((uint64_t)&v25);
      sub_1000041AC((uint64_t)v21);
      int v9 = v21[0];
    }
  }

  else
  {
    sub_10000C3E4((uint64_t)v23, (uint64_t)&v29);
    sub_1000041AC((uint64_t)v23);
    char v6 = v25;
    LOBYTE(v25) = v23[0];
    v23[0] = v6;
    double v7 = &v24;
    unsigned __int8 v8 = v26;
    unint64_t v26 = v24;
    unint64_t v24 = v8;
    sub_1000041AC((uint64_t)&v25);
    sub_1000041AC((uint64_t)v23);
    int v9 = v23[0];
  }

  sub_10000425C(v7, v9);
  unint64_t v17 = a2[4];
  if (v17 >= a2[5])
  {
    uint64_t v18 = sub_100004B7C(a2 + 3, (uint64_t)&v25);
  }

  else
  {
    *(_BYTE *)unint64_t v17 = v25;
    *(void *)(v17 + sub_100007004((uint64_t)v9 + 8) = v26;
    sub_1000041AC((uint64_t)&v25);
    LOBYTE(v25) = 0;
    unint64_t v26 = 0LL;
    sub_1000041AC(v17);
    uint64_t v18 = v17 + 16;
  }

  a2[4] = v18;
  sub_1000041AC((uint64_t)&v25);
  sub_10000425C(&v26, v25);
  sub_1000041AC((uint64_t)&v27);
  sub_10000425C(&v28, v27);
  sub_1000041AC((uint64_t)&v29);
  sub_10000425C(&v30, v29);
}

void sub_1000B7304( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  unsigned __int8 v8 = va_arg(va1, uint64_t *);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v11 = va_arg(va2, uint64_t *);
  uint64_t v13 = va_arg(va2, void);
  sub_10000417C((uint64_t **)va);
  sub_10000417C((uint64_t **)va1);
  sub_10000417C((uint64_t **)va2);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B733C()
{
  return 1LL;
}

void sub_1000B7348(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000B7360(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000B7378(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000B7390(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000B73A8(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000B73C0(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000B73D8(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000B73F0(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000B7408(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000B7420(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000B7438(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

__n128 sub_1000B744C@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v24 = *(unsigned __int8 **)a1;
  double v7 = (__n128 *)(a1 + 8);
  __int128 v25 = *(_OWORD *)(a1 + 8);
  __int128 v26 = *(_OWORD *)(a1 + 24);
  uint64_t v21 = *a2;
  __int128 v8 = *(_OWORD *)(a2 + 3);
  __int128 v22 = *(_OWORD *)(a2 + 1);
  __int128 v23 = v8;
  uint64_t v9 = sub_1000B757C((uint64_t)&v24, (uint64_t)&v21);
  if (v9)
  {
    unint64_t v10 = v9;
    do
    {
      unint64_t v11 = v10 >> 1;
      uint64_t v18 = *(unsigned __int8 **)a1;
      __n128 v12 = v7[1];
      __n128 v19 = *v7;
      __n128 v20 = v12;
      sub_1000B7628(&v18, v10 >> 1);
      uint64_t v13 = (double *)sub_100018150(&v18);
      if (sub_100055FA0(v13, a3))
      {
        double v14 = sub_100018704(&v18);
        *(void *)a1 = *v14;
        __n128 v15 = *(__n128 *)(v14 + 3);
        *double v7 = *(__n128 *)(v14 + 1);
        v7[1] = v15;
        unint64_t v11 = v10 + ~v11;
      }

      unint64_t v10 = v11;
    }

    while (v11);
  }

  *(void *)a4 = *(void *)a1;
  __n128 result = *v7;
  __n128 v17 = v7[1];
  *(__n128 *)(a4 + sub_100007004((uint64_t)v9 + 8) = *v7;
  *(__n128 *)(a4 + 24) = v17;
  return result;
}

uint64_t sub_1000B757C(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 **)a1;
  __int128 v11 = *(_OWORD *)(a1 + 8);
  __int128 v12 = *(_OWORD *)(a1 + 24);
  unint64_t v3 = *(unsigned __int8 **)a2;
  __int128 v4 = *(_OWORD *)(a2 + 24);
  __int128 v8 = *(_OWORD *)(a2 + 8);
  __int128 v9 = v4;
  unint64_t v10 = v2;
  double v7 = v3;
  uint64_t v5 = 0LL;
  while (!sub_10001855C(&v10, &v7))
  {
    ++v5;
    sub_100018704(&v10);
  }

  return v5;
}

unsigned __int8 **sub_1000B7628(unsigned __int8 **result, uint64_t a2)
{
  uint64_t v2 = a2;
  unint64_t v3 = result;
  if (a2 < 0)
  {
    do
      __n128 result = sub_1000997E0(v3);
    while (!__CFADD__(v2++, 1LL));
  }

  else if (a2)
  {
    unint64_t v4 = a2 + 1;
    do
    {
      __n128 result = sub_100018704(v3);
      --v4;
    }

    while (v4 > 1);
  }

  return result;
}

__n128 sub_1000B767C@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, double *a3@<X2>, uint64_t a4@<X8>)
{
  __int128 v23 = *(unsigned __int8 **)a1;
  double v7 = (__n128 *)(a1 + 8);
  __int128 v8 = *(_OWORD *)(a1 + 24);
  __int128 v24 = *(_OWORD *)(a1 + 8);
  __int128 v25 = v8;
  uint64_t v20 = *a2;
  __int128 v21 = *(_OWORD *)(a2 + 1);
  __int128 v22 = *(_OWORD *)(a2 + 3);
  uint64_t v9 = sub_1000B757C((uint64_t)&v23, (uint64_t)&v20);
  if (v9)
  {
    unint64_t v10 = v9;
    do
    {
      unint64_t v11 = v10 >> 1;
      *(void *)&v19[32] = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&__int128 v12 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v12 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)__n128 v19 = v12;
      *(_OWORD *)&v19[16] = v12;
      __int128 v26 = *(unsigned __int8 **)a1;
      __n128 v13 = v7[1];
      __n128 v27 = *v7;
      __n128 v28 = v13;
      sub_1000B7628(&v26, v10 >> 1);
      *(void *)__n128 v19 = v26;
      *(__n128 *)&unsigned __int8 v19[8] = v27;
      *(__n128 *)&v19[24] = v28;
      double v14 = sub_100018150((unsigned __int8 **)v19);
      if ((sub_100055FA0(a3, v14) & 1) == 0)
      {
        __n128 v15 = sub_100018704((unsigned __int8 **)v19);
        *(void *)a1 = *v15;
        __n128 v16 = *(__n128 *)(v15 + 3);
        *double v7 = *(__n128 *)(v15 + 1);
        v7[1] = v16;
        unint64_t v11 = v10 + ~v11;
      }

      unint64_t v10 = v11;
    }

    while (v11);
  }

  *(void *)a4 = *(void *)a1;
  __n128 result = *v7;
  __n128 v18 = v7[1];
  *(__n128 *)(a4 + sub_100007004((uint64_t)v9 + 8) = *v7;
  *(__n128 *)(a4 + 24) = v18;
  return result;
}

void sub_1000B77E0()
{
  __assert_rtn("operator-", "iter_impl.hpp", 560, "m_object != nullptr");
}

void sub_1000B7808(__int128 *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)&__int128 v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  sub_1000C1A08(a1, a2, &v7);
  if (sub_10004BA08(v7))
  {
    *(_OWORD *)a3 = v7;
  }

  else
  {
    *(void *)a3 = 0LL;
    *(void *)(a3 + sub_100007004((uint64_t)v9 + 8) = 0LL;
    unint64_t v4 = (std::__shared_weak_count *)*((void *)&v7 + 1);
    if (*((void *)&v7 + 1))
    {
      uint64_t v5 = (unint64_t *)(*((void *)&v7 + 1) + 8LL);
      do
        unint64_t v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }

uint64_t *sub_1000B78C8(uint64_t *a1, __int128 *a2, uint64_t *a3)
{
  *a1 = (uint64_t)off_1001295D0;
  dispatch_object_t object = dispatch_queue_create("analyticsd.SqliteDeviceConfigurationStoreQueue", 0LL);
  sub_10004B41C(a1, (uint64_t *)off_10012D4D8, &object, a2, a3);
  if (object) {
    dispatch_release(object);
  }
  sub_1000D1740(a1 + 14, (uint64_t *)off_10012D4E8);
  *a1 = (uint64_t)off_10012D288;
  a1[14] = (uint64_t)off_10012D3D8;
  a1[15] = 0LL;
  a1[16] = 0LL;
  a1[17] = 0LL;
  return a1;
}

void sub_1000B799C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

uint64_t sub_1000B79A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 8;
  uint64_t v7 = a1;
  uint64_t v5 = *(dispatch_queue_s **)(a1 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_1000C1AC0;
  block[3] = &unk_10012D818;
  void block[4] = v4;
  void block[5] = &v7;
  dispatch_sync(v5, block);
  sub_10004C6D4((sqlite3_stmt **)(a1 + 136), 0LL);
  sub_10004C6D4((sqlite3_stmt **)(a1 + 128), 0LL);
  sub_10004C6D4((sqlite3_stmt **)(a1 + 120), 0LL);
  sub_100066050(a1, (uint64_t *)(a2 + 8));
  return a1;
}

uint64_t sub_1000B7A78(uint64_t a1)
{
  return sub_1000B79A8(a1, (uint64_t)&off_10012D4D0);
}

uint64_t sub_1000B7A84(uint64_t a1)
{
  return sub_1000B79A8(a1 - 112, (uint64_t)&off_10012D4D0);
}

void sub_1000B7A94(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000B79A8(a1, (uint64_t)&off_10012D4D0);
  operator delete(v1);
}

void sub_1000B7AB0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000B79A8(a1 - 112, (uint64_t)&off_10012D4D0);
  operator delete(v1);
}

uint64_t sub_1000B7AD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 8;
  v5[0] = a1;
  v5[1] = a2;
  unint64_t v3 = *(dispatch_queue_s **)(a1 + 24);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000LL;
  _DWORD v6[2] = sub_1000C1AF4;
  void v6[3] = &unk_10012D838;
  v6[4] = v2;
  v6[5] = v5;
  uint64_t v7 = v6;
  unsigned __int8 v9 = -86;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_1000C1C80;
  block[3] = &unk_10012D858;
  void block[4] = &v9;
  void block[5] = &v7;
  dispatch_sync(v3, block);
  return v9;
}

uint64_t sub_1000B7B98(uint64_t a1, uint64_t a2)
{
  return sub_1000B7AD0(a1 - 112, a2);
}

uint64_t sub_1000B7BA0(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v4 = a1;
  uint64_t v2 = *(dispatch_queue_s **)(a1 + 24);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000LL;
  void v5[2] = sub_1000C1CB4;
  void v5[3] = &unk_10012D878;
  v5[4] = v1;
  v5[5] = &v4;
  unint64_t v6 = v5;
  block[0] = _NSConcreteStackBlock;
  unsigned __int8 v8 = -86;
  block[1] = 0x40000000LL;
  block[2] = sub_1000C1C80;
  block[3] = &unk_10012D858;
  void block[4] = &v8;
  void block[5] = &v6;
  dispatch_sync(v2, block);
  return v8;
}

uint64_t sub_1000B7C64(uint64_t a1)
{
  return sub_1000B7BA0(a1 - 112);
}

uint64_t sub_1000B7C6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 8;
  v5[0] = a1;
  v5[1] = a2;
  unint64_t v3 = *(dispatch_queue_s **)(a1 + 24);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000LL;
  _DWORD v6[2] = sub_1000C1E70;
  void v6[3] = &unk_10012D898;
  v6[4] = v2;
  v6[5] = v5;
  uint64_t v7 = v6;
  unsigned __int8 v9 = -86;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_1000C1C80;
  block[3] = &unk_10012D858;
  void block[4] = &v9;
  void block[5] = &v7;
  dispatch_sync(v3, block);
  return v9;
}

uint64_t sub_1000B7D34(uint64_t a1, uint64_t a2)
{
  return sub_1000B7C6C(a1 - 112, a2);
}

void sub_1000B7D3C(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = a1;
  unint64_t v3 = *(dispatch_queue_s **)(a1 + 24);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000LL;
  void v5[2] = sub_1000C21EC;
  void v5[3] = &unk_10012D8B8;
  v5[4] = a1 + 8;
  v5[5] = &v4;
  unint64_t v6 = v5;
  *a2 = 0xAAAAAAAAAAAAAA00LL;
  a2[1] = 0LL;
  sub_1000041AC((uint64_t)a2);
  sub_1000041AC((uint64_t)a2);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_1000C25C0;
  block[3] = &unk_10012D8D8;
  void block[4] = a2;
  void block[5] = &v6;
  dispatch_sync(v3, block);
}

void sub_1000B7E30(uint64_t a1@<X0>, void *a2@<X8>)
{
}

void sub_1000B7E38(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 8;
  v4[0] = a1;
  v4[1] = a2;
  unint64_t v3 = *(dispatch_queue_s **)(a1 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_1000C2674;
  block[3] = &unk_10012D8F8;
  void block[4] = v2;
  void block[5] = v4;
  dispatch_sync(v3, block);
}

void sub_1000B7EC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 - 104;
  v4[0] = a1 - 112;
  v4[1] = a2;
  unint64_t v3 = *(dispatch_queue_s **)(a1 - 88);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_1000C2674;
  block[3] = &unk_10012D8F8;
  void block[4] = v2;
  void block[5] = v4;
  dispatch_sync(v3, block);
}

uint64_t sub_1000B7F54(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 8;
  v5[0] = a1;
  v5[1] = a2;
  unint64_t v3 = *(dispatch_queue_s **)(a1 + 24);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000LL;
  _DWORD v6[2] = sub_1000C27F0;
  void v6[3] = &unk_10012D918;
  v6[4] = v2;
  v6[5] = v5;
  uint64_t v7 = v6;
  unsigned __int8 v9 = -86;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_1000C1C80;
  block[3] = &unk_10012D858;
  void block[4] = &v9;
  void block[5] = &v7;
  dispatch_sync(v3, block);
  return v9;
}

uint64_t sub_1000B801C(uint64_t a1, uint64_t a2)
{
  return sub_1000B7F54(a1 - 112, a2);
}

void sub_1000B8024(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v3 = a1;
  uint64_t v2 = *(dispatch_queue_s **)(a1 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_1000C297C;
  block[3] = &unk_10012D938;
  void block[4] = v1;
  void block[5] = &v3;
  dispatch_sync(v2, block);
}

void sub_1000B80B0(uint64_t a1)
{
  uint64_t v1 = a1 - 104;
  uint64_t v3 = a1 - 112;
  uint64_t v2 = *(dispatch_queue_s **)(a1 - 88);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_1000C297C;
  block[3] = &unk_10012D938;
  void block[4] = v1;
  void block[5] = &v3;
  dispatch_sync(v2, block);
}

uint64_t sub_1000B8140(uint64_t a1, char a2)
{
  char v6 = a2;
  uint64_t v2 = a1 + 8;
  v5[0] = a1;
  v5[1] = &v6;
  uint64_t v3 = *(dispatch_queue_s **)(a1 + 24);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000LL;
  _OWORD v7[2] = sub_1000C2A04;
  v7[3] = &unk_10012D958;
  v7[4] = v2;
  v7[5] = v5;
  unsigned __int8 v8 = v7;
  unsigned __int8 v10 = -86;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_1000C1C80;
  block[3] = &unk_10012D858;
  void block[4] = &v10;
  void block[5] = &v8;
  dispatch_sync(v3, block);
  return v10;
}

uint64_t sub_1000B8210(uint64_t a1, char a2)
{
  return sub_1000B8140(a1 - 112, a2);
}

uint64_t sub_1000B8218(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 8;
  v5[0] = a1;
  v5[1] = a2;
  uint64_t v3 = *(dispatch_queue_s **)(a1 + 24);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000LL;
  _DWORD v6[2] = sub_1000C2BF4;
  void v6[3] = &unk_10012D978;
  v6[4] = v2;
  v6[5] = v5;
  uint64_t v7 = v6;
  unsigned __int8 v9 = -86;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_1000C1C80;
  block[3] = &unk_10012D858;
  void block[4] = &v9;
  void block[5] = &v7;
  dispatch_sync(v3, block);
  return v9;
}

uint64_t sub_1000B82E0(uint64_t a1, uint64_t a2)
{
  return sub_1000B8218(a1 - 112, a2);
}

uint64_t sub_1000B82E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 8;
  v5[0] = a2;
  v5[1] = a1;
  uint64_t v3 = *(dispatch_queue_s **)(a1 + 24);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000LL;
  _DWORD v6[2] = sub_1000C2D88;
  void v6[3] = &unk_10012D998;
  v6[4] = v2;
  v6[5] = v5;
  uint64_t v7 = v6;
  unsigned __int8 v9 = -86;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_1000C1C80;
  block[3] = &unk_10012D858;
  void block[4] = &v9;
  void block[5] = &v7;
  dispatch_sync(v3, block);
  return v9;
}

uint64_t sub_1000B83B0(uint64_t a1, uint64_t a2)
{
  return sub_1000B82E8(a1 - 112, a2);
}

void sub_1000B83B8(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3 = a1 + 8;
  v5[0] = a1;
  v5[1] = a2;
  uint64_t v4 = *(dispatch_queue_s **)(a1 + 24);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000LL;
  _DWORD v6[2] = sub_1000C3494;
  void v6[3] = &unk_10012DA48;
  v6[4] = v3;
  v6[5] = v5;
  uint64_t v7 = v6;
  *a3 = 0u;
  a3[1] = 0u;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_1000C3688;
  block[3] = &unk_10012DA68;
  void block[4] = a3;
  void block[5] = &v7;
  dispatch_sync(v4, block);
}

void sub_1000B8478(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
}

void sub_1000B8480(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)&qword_100131AC0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_100131AC0))
  {
    __cxa_atexit((void (*)(void *))&std::mutex::~mutex, &stru_100131490, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_100131AC0);
  }

  std::mutex::lock(&stru_100131490);
  __n128 v15 = 0LL;
  unint64_t v11 = &v15;
  __int128 v12 = (sqlite3_stmt **)a1;
  uint64_t v4 = *(dispatch_queue_s **)(a1 + 24);
  __n128 v16 = _NSConcreteStackBlock;
  uint64_t v17 = 0x40000000LL;
  __n128 v18 = sub_1000C371C;
  __n128 v19 = &unk_10012DA88;
  uint64_t v20 = a1 + 8;
  __int128 v21 = &v11;
  __int128 v22 = &v16;
  LOBYTE(v14) = -86;
  blocuint64_t k = _NSConcreteStackBlock;
  uint64_t v25 = 0x40000000LL;
  __int128 v26 = sub_1000C1C80;
  __n128 v27 = &unk_10012D858;
  __n128 v28 = (unsigned __int8 *)&v14;
  unint64_t v29 = (void ***)&v22;
  dispatch_sync(v4, &block);
  if ((_BYTE)v14)
  {
    uint64_t v5 = (os_log_s *)qword_100131930;
    if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_INFO))
    {
      LOWORD(block) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "[Config Store] Iterating all enabled transforms",  (uint8_t *)&block,  2u);
    }

    do
    {
      unint64_t v11 = (sqlite3_stmt **)a1;
      __int128 v12 = &v15;
      __n128 v13 = &v14;
      double v14 = 0LL;
      char v6 = *(dispatch_queue_s **)(a1 + 24);
      __n128 v16 = _NSConcreteStackBlock;
      uint64_t v17 = 0x40000000LL;
      __n128 v18 = sub_1000C3808;
      __n128 v19 = &unk_10012DAA8;
      uint64_t v20 = a1 + 8;
      __int128 v21 = &v11;
      __int128 v22 = &v16;
      unsigned __int8 v23 = -86;
      blocuint64_t k = _NSConcreteStackBlock;
      uint64_t v25 = 0x40000000LL;
      __int128 v26 = sub_1000C1C80;
      __n128 v27 = &unk_10012D858;
      __n128 v28 = &v23;
      unint64_t v29 = (void ***)&v22;
      dispatch_sync(v6, &block);
      int v7 = v23;
      if (v23 && v14)
      {
        blocuint64_t k = v14;
        uint64_t v8 = *(void *)(a2 + 24);
        if (!v8) {
          sub_1000129CC();
        }
        (*(void (**)(uint64_t, void ***))(*(void *)v8 + 48LL))(v8, &block);
      }
    }

    while (v7);
  }

  __n128 v16 = (void **)&v15;
  unsigned __int8 v9 = *(dispatch_queue_s **)(a1 + 24);
  blocuint64_t k = _NSConcreteStackBlock;
  uint64_t v25 = 0x40000000LL;
  __int128 v26 = sub_1000C3940;
  __n128 v27 = &unk_10012DAC8;
  __n128 v28 = (unsigned __int8 *)(a1 + 8);
  unint64_t v29 = &v16;
  dispatch_sync(v9, &block);
  sub_10004C6D4(&v15, 0LL);
  std::mutex::unlock(&stru_100131490);
}

void sub_1000B8730(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1000B8740(uint64_t a1, uint64_t a2)
{
}

void sub_1000B8748(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)&qword_100131AC8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_100131AC8))
  {
    __cxa_atexit((void (*)(void *))&std::mutex::~mutex, &stru_1001314D0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_100131AC8);
  }

  std::mutex::lock(&stru_1001314D0);
  __n128 v15 = 0LL;
  unint64_t v11 = &v15;
  __int128 v12 = (sqlite3_stmt **)a1;
  uint64_t v4 = *(dispatch_queue_s **)(a1 + 24);
  __n128 v16 = _NSConcreteStackBlock;
  uint64_t v17 = 0x40000000LL;
  __n128 v18 = sub_1000C3950;
  __n128 v19 = &unk_10012DAE8;
  uint64_t v20 = a1 + 8;
  __int128 v21 = &v11;
  __int128 v22 = &v16;
  LOBYTE(v14) = -86;
  blocuint64_t k = _NSConcreteStackBlock;
  uint64_t v25 = 0x40000000LL;
  __int128 v26 = sub_1000C1C80;
  __n128 v27 = &unk_10012D858;
  __n128 v28 = (unsigned __int8 *)&v14;
  unint64_t v29 = (void ***)&v22;
  dispatch_sync(v4, &block);
  if ((_BYTE)v14)
  {
    uint64_t v5 = (os_log_s *)qword_100131930;
    if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_INFO))
    {
      LOWORD(block) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "[Config Store] Iterating all disabled transforms",  (uint8_t *)&block,  2u);
    }

    do
    {
      unint64_t v11 = (sqlite3_stmt **)a1;
      __int128 v12 = &v15;
      __n128 v13 = &v14;
      double v14 = 0LL;
      char v6 = *(dispatch_queue_s **)(a1 + 24);
      __n128 v16 = _NSConcreteStackBlock;
      uint64_t v17 = 0x40000000LL;
      __n128 v18 = sub_1000C3A3C;
      __n128 v19 = &unk_10012DB08;
      uint64_t v20 = a1 + 8;
      __int128 v21 = &v11;
      __int128 v22 = &v16;
      unsigned __int8 v23 = -86;
      blocuint64_t k = _NSConcreteStackBlock;
      uint64_t v25 = 0x40000000LL;
      __int128 v26 = sub_1000C1C80;
      __n128 v27 = &unk_10012D858;
      __n128 v28 = &v23;
      unint64_t v29 = (void ***)&v22;
      dispatch_sync(v6, &block);
      int v7 = v23;
      if (v23 && v14)
      {
        blocuint64_t k = v14;
        uint64_t v8 = *(void *)(a2 + 24);
        if (!v8) {
          sub_1000129CC();
        }
        (*(void (**)(uint64_t, void ***))(*(void *)v8 + 48LL))(v8, &block);
      }
    }

    while (v7);
  }

  __n128 v16 = (void **)&v15;
  unsigned __int8 v9 = *(dispatch_queue_s **)(a1 + 24);
  blocuint64_t k = _NSConcreteStackBlock;
  uint64_t v25 = 0x40000000LL;
  __int128 v26 = sub_1000C3B74;
  __n128 v27 = &unk_10012DB28;
  __n128 v28 = (unsigned __int8 *)(a1 + 8);
  unint64_t v29 = &v16;
  dispatch_sync(v9, &block);
  sub_10004C6D4(&v15, 0LL);
  std::mutex::unlock(&stru_1001314D0);
}

void sub_1000B89F8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1000B8A08(uint64_t a1, uint64_t a2)
{
}

void sub_1000B8A10(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)&qword_100131AD0);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_100131AD0))
  {
    __cxa_atexit((void (*)(void *))&std::mutex::~mutex, &stru_100131510, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_100131AD0);
  }

  std::mutex::lock(&stru_100131510);
  uint64_t v11 = a1 + 120;
  uint64_t v12 = a1;
  __n128 v13 = a2;
  char v6 = *(dispatch_queue_s **)(a1 + 24);
  uint64_t v20 = _NSConcreteStackBlock;
  uint64_t v21 = 0x40000000LL;
  __int128 v22 = sub_1000C3B84;
  unsigned __int8 v23 = &unk_10012DB48;
  uint64_t v24 = a1 + 8;
  uint64_t v25 = &v11;
  double v34 = &v20;
  LOBYTE(v26) = -86;
  blocuint64_t k = _NSConcreteStackBlock;
  uint64_t v29 = 0x40000000LL;
  unint64_t v30 = sub_1000C1C80;
  double v31 = &unk_10012D858;
  unint64_t v32 = (unsigned __int8 *)&v26;
  __int128 v33 = &v34;
  dispatch_sync(v6, &block);
  if ((_BYTE)v26)
  {
    if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_DEBUG)) {
      sub_1000C57A4();
    }
    do
    {
      uint64_t v18 = 0LL;
      uint64_t v19 = 0LL;
      double v34 = (void ***)0xAAAAAAAAAAAAAA00LL;
      unint64_t v35 = 0xAAAAAAAAAAAAAA00LL;
      uint64_t v11 = a1;
      uint64_t v12 = a1 + 120;
      __n128 v13 = &v19;
      double v14 = &v18;
      __n128 v15 = &v17;
      __n128 v16 = &v34;
      double v17 = 100.0;
      int v7 = *(dispatch_queue_s **)(a1 + 24);
      uint64_t v20 = _NSConcreteStackBlock;
      uint64_t v21 = 0x40000000LL;
      __int128 v22 = sub_1000C3C88;
      unsigned __int8 v23 = &unk_10012DB68;
      uint64_t v24 = a1 + 8;
      uint64_t v25 = &v11;
      __int128 v26 = &v20;
      unsigned __int8 v27 = -86;
      blocuint64_t k = _NSConcreteStackBlock;
      uint64_t v29 = 0x40000000LL;
      unint64_t v30 = sub_1000C1C80;
      double v31 = &unk_10012D858;
      unint64_t v32 = &v27;
      __int128 v33 = &v26;
      dispatch_sync(v7, &block);
      int v8 = v27;
      if (v27 && v19 && v18 && (_BYTE)v35) {
        sub_1000B8CD0(a3, v19, v18, (uint64_t)&v34, v17);
      }
    }

    while (v8);
  }

  uint64_t v20 = (void **)(a1 + 120);
  unsigned __int8 v9 = *(dispatch_queue_s **)(a1 + 24);
  blocuint64_t k = _NSConcreteStackBlock;
  uint64_t v29 = 0x40000000LL;
  unint64_t v30 = sub_1000C3EC4;
  double v31 = &unk_10012DB88;
  unint64_t v32 = (unsigned __int8 *)(a1 + 8);
  __int128 v33 = (void ****)&v20;
  dispatch_sync(v9, &block);
  std::mutex::unlock(&stru_100131510);
}

void sub_1000B8CC0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000B8CD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v8 = a3;
  uint64_t v9 = a2;
  double v7 = a5;
  uint64_t v5 = *(void *)(a1 + 24);
  if (!v5) {
    sub_1000129CC();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, double *, uint64_t))(*(void *)v5 + 48LL))( v5,  &v9,  &v8,  &v7,  a4);
}

void sub_1000B8D44(uint64_t a1, uint64_t *a2, uint64_t a3)
{
}

void sub_1000B8D4C(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)&qword_100131AD8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_100131AD8))
  {
    __cxa_atexit((void (*)(void *))&std::mutex::~mutex, &stru_100131550, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_100131AD8);
  }

  std::mutex::lock(&stru_100131550);
  __n128 v15 = 0LL;
  uint64_t v11 = &v15;
  uint64_t v12 = (sqlite3_stmt **)a1;
  uint64_t v4 = *(dispatch_queue_s **)(a1 + 24);
  __n128 v16 = _NSConcreteStackBlock;
  uint64_t v17 = 0x40000000LL;
  uint64_t v18 = sub_1000C3F28;
  uint64_t v19 = &unk_10012DBA8;
  uint64_t v20 = a1 + 8;
  uint64_t v21 = &v11;
  __int128 v22 = &v16;
  LOBYTE(v14) = -86;
  blocuint64_t k = _NSConcreteStackBlock;
  uint64_t v25 = 0x40000000LL;
  __int128 v26 = sub_1000C1C80;
  unsigned __int8 v27 = &unk_10012D858;
  __n128 v28 = (unsigned __int8 *)&v14;
  uint64_t v29 = (void ***)&v22;
  dispatch_sync(v4, &block);
  if ((_BYTE)v14)
  {
    uint64_t v5 = (os_log_s *)qword_100131930;
    if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_INFO))
    {
      LOWORD(block) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "[Config Store] Iterating all active events",  (uint8_t *)&block,  2u);
    }

    do
    {
      uint64_t v11 = (sqlite3_stmt **)a1;
      uint64_t v12 = &v15;
      __n128 v13 = &v14;
      double v14 = 0LL;
      char v6 = *(dispatch_queue_s **)(a1 + 24);
      __n128 v16 = _NSConcreteStackBlock;
      uint64_t v17 = 0x40000000LL;
      uint64_t v18 = sub_1000C4014;
      uint64_t v19 = &unk_10012DBC8;
      uint64_t v20 = a1 + 8;
      uint64_t v21 = &v11;
      __int128 v22 = &v16;
      unsigned __int8 v23 = -86;
      blocuint64_t k = _NSConcreteStackBlock;
      uint64_t v25 = 0x40000000LL;
      __int128 v26 = sub_1000C1C80;
      unsigned __int8 v27 = &unk_10012D858;
      __n128 v28 = &v23;
      uint64_t v29 = (void ***)&v22;
      dispatch_sync(v6, &block);
      int v7 = v23;
      if (v23 && v14)
      {
        blocuint64_t k = v14;
        uint64_t v8 = *(void *)(a2 + 24);
        if (!v8) {
          sub_1000129CC();
        }
        (*(void (**)(uint64_t, void ***))(*(void *)v8 + 48LL))(v8, &block);
      }
    }

    while (v7);
  }

  __n128 v16 = (void **)&v15;
  uint64_t v9 = *(dispatch_queue_s **)(a1 + 24);
  blocuint64_t k = _NSConcreteStackBlock;
  uint64_t v25 = 0x40000000LL;
  __int128 v26 = sub_1000C414C;
  unsigned __int8 v27 = &unk_10012DBE8;
  __n128 v28 = (unsigned __int8 *)(a1 + 8);
  uint64_t v29 = &v16;
  dispatch_sync(v9, &block);
  sub_10004C6D4(&v15, 0LL);
  std::mutex::unlock(&stru_100131550);
}

void sub_1000B8FFC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1000B900C(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1000B9014(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v4 = a1;
  uint64_t v2 = *(dispatch_queue_s **)(a1 + 24);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000LL;
  void v5[2] = sub_1000C415C;
  void v5[3] = &unk_10012DC08;
  v5[4] = v1;
  v5[5] = &v4;
  char v6 = v5;
  block[0] = _NSConcreteStackBlock;
  unsigned int v8 = -1431655766;
  block[1] = 0x40000000LL;
  block[2] = sub_1000C4284;
  block[3] = &unk_10012DC28;
  void block[4] = &v8;
  void block[5] = &v6;
  dispatch_sync(v2, block);
  return v8;
}

uint64_t sub_1000B90D8(uint64_t a1)
{
  return sub_1000B9014(a1 - 112);
}

void sub_1000B90E0(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)&qword_100131AE0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_100131AE0))
  {
    __cxa_atexit((void (*)(void *))&std::mutex::~mutex, &stru_100131590, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_100131AE0);
  }

  std::mutex::lock(&stru_100131590);
  uint64_t v20 = 0LL;
  unsigned __int8 v10 = &v20;
  uint64_t v11 = (sqlite3_stmt **)a1;
  uint64_t v4 = *(dispatch_queue_s **)(a1 + 24);
  uint64_t v21 = _NSConcreteStackBlock;
  uint64_t v22 = 0x40000000LL;
  unsigned __int8 v23 = sub_1000C42B8;
  uint64_t v24 = &unk_10012DC48;
  uint64_t v25 = a1 + 8;
  __int128 v26 = &v10;
  unsigned __int8 v27 = &v21;
  LOBYTE(v19) = -86;
  blocuint64_t k = _NSConcreteStackBlock;
  uint64_t v30 = 0x40000000LL;
  double v31 = sub_1000C1C80;
  unint64_t v32 = &unk_10012D858;
  __int128 v33 = &v19;
  double v34 = (void ***)&v27;
  dispatch_sync(v4, &block);
  if ((_BYTE)v19)
  {
    uint64_t v5 = (os_log_s *)qword_100131930;
    if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_INFO))
    {
      LOWORD(block) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "[Config Store] Iterating all eventdefs",  (uint8_t *)&block,  2u);
    }

    do
    {
      uint64_t v18 = 0LL;
      uint64_t v19 = 0LL;
      uint64_t v16 = 0LL;
      uint64_t v17 = 0LL;
      unsigned __int8 v10 = (sqlite3_stmt **)a1;
      uint64_t v11 = &v20;
      uint64_t v12 = &v19;
      __n128 v13 = &v18;
      double v14 = &v17;
      __n128 v15 = &v16;
      char v6 = *(dispatch_queue_s **)(a1 + 24);
      uint64_t v21 = _NSConcreteStackBlock;
      uint64_t v22 = 0x40000000LL;
      unsigned __int8 v23 = sub_1000C43A4;
      uint64_t v24 = &unk_10012DC68;
      uint64_t v25 = a1 + 8;
      __int128 v26 = &v10;
      unsigned __int8 v27 = &v21;
      unsigned __int8 v28 = -86;
      blocuint64_t k = _NSConcreteStackBlock;
      uint64_t v30 = 0x40000000LL;
      double v31 = sub_1000C1C80;
      unint64_t v32 = &unk_10012D858;
      __int128 v33 = (uint64_t *)&v28;
      double v34 = (void ***)&v27;
      dispatch_sync(v6, &block);
      int v7 = v28;
      if (v28 && v16) {
        sub_1000B93A8(a2, v19, v18, v17, v16);
      }
    }

    while (v7);
  }

  uint64_t v21 = (void **)&v20;
  unsigned int v8 = *(dispatch_queue_s **)(a1 + 24);
  blocuint64_t k = _NSConcreteStackBlock;
  uint64_t v30 = 0x40000000LL;
  double v31 = sub_1000C4524;
  unint64_t v32 = &unk_10012DC88;
  __int128 v33 = (uint64_t *)(a1 + 8);
  double v34 = &v21;
  dispatch_sync(v8, &block);
  sub_10004C6D4(&v20, 0LL);
  std::mutex::unlock(&stru_100131590);
}

void sub_1000B9398(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000B93A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = a2;
  uint64_t v8 = a4;
  uint64_t v9 = a3;
  uint64_t v7 = a5;
  uint64_t v5 = *(void *)(a1 + 24);
  if (!v5) {
    sub_1000129CC();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, uint64_t *, uint64_t *))(*(void *)v5 + 48LL))( v5,  &v10,  &v9,  &v8,  &v7);
}

void sub_1000B9420(uint64_t a1, uint64_t a2)
{
}

void sub_1000B9428(uint64_t a1, sqlite3_stmt **a2, uint64_t a3)
{
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)&qword_100131AE8);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_100131AE8))
  {
    __cxa_atexit((void (*)(void *))&std::mutex::~mutex, &stru_1001315D0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_100131AE8);
  }

  std::mutex::lock(&stru_1001315D0);
  uint64_t v20 = 0LL;
  uint64_t v11 = &v20;
  uint64_t v12 = a1;
  __n128 v13 = a2;
  char v6 = *(dispatch_queue_s **)(a1 + 24);
  uint64_t v21 = _NSConcreteStackBlock;
  uint64_t v22 = 0x40000000LL;
  unsigned __int8 v23 = sub_1000C4534;
  uint64_t v24 = &unk_10012DCA8;
  uint64_t v25 = a1 + 8;
  __int128 v26 = &v11;
  unsigned __int8 v27 = &v21;
  LOBYTE(v19) = -86;
  blocuint64_t k = _NSConcreteStackBlock;
  uint64_t v30 = 0x40000000LL;
  double v31 = sub_1000C1C80;
  unint64_t v32 = &unk_10012D858;
  __int128 v33 = &v19;
  double v34 = (void ***)&v27;
  dispatch_sync(v6, &block);
  if ((_BYTE)v19)
  {
    do
    {
      uint64_t v18 = 0LL;
      uint64_t v19 = 0LL;
      uint64_t v16 = &v17;
      uint64_t v17 = 0LL;
      uint64_t v11 = a2;
      uint64_t v12 = a1;
      __n128 v13 = &v20;
      double v14 = &v19;
      __n128 v15 = &v18;
      uint64_t v7 = *(dispatch_queue_s **)(a1 + 24);
      uint64_t v21 = _NSConcreteStackBlock;
      uint64_t v22 = 0x40000000LL;
      unsigned __int8 v23 = sub_1000C4634;
      uint64_t v24 = &unk_10012DCC8;
      uint64_t v25 = a1 + 8;
      __int128 v26 = &v11;
      unsigned __int8 v27 = &v21;
      unsigned __int8 v28 = -86;
      blocuint64_t k = _NSConcreteStackBlock;
      uint64_t v30 = 0x40000000LL;
      double v31 = sub_1000C1C80;
      unint64_t v32 = &unk_10012D858;
      __int128 v33 = (uint64_t *)&v28;
      double v34 = (void ***)&v27;
      dispatch_sync(v7, &block);
      int v8 = v28;
      if (v28 && v17) {
        sub_1000B96A0(a3, v19, v18, v17);
      }
    }

    while (v8);
  }

  uint64_t v21 = (void **)&v20;
  uint64_t v9 = *(dispatch_queue_s **)(a1 + 24);
  blocuint64_t k = _NSConcreteStackBlock;
  uint64_t v30 = 0x40000000LL;
  double v31 = sub_1000C47EC;
  unint64_t v32 = &unk_10012DCE8;
  __int128 v33 = (uint64_t *)(a1 + 8);
  double v34 = &v21;
  dispatch_sync(v9, &block);
  sub_10004C6D4(&v20, 0LL);
  std::mutex::unlock(&stru_1001315D0);
}

void sub_1000B9690(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000B96A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a3;
  uint64_t v8 = a2;
  uint64_t v6 = a4;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    sub_1000129CC();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, uint64_t *))(*(void *)v4 + 48LL))(v4, &v8, &v7, &v6);
}

void sub_1000B9710(uint64_t a1, sqlite3_stmt **a2, uint64_t a3)
{
}

void sub_1000B9718(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)&qword_100131AF0);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_100131AF0))
  {
    __cxa_atexit((void (*)(void *))&std::mutex::~mutex, &stru_100131610, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_100131AF0);
  }

  std::mutex::lock(&stru_100131610);
  uint64_t v19 = 0LL;
  uint64_t v11 = &v19;
  uint64_t v12 = (sqlite3_stmt **)a1;
  __n128 v13 = a2;
  uint64_t v6 = *(dispatch_queue_s **)(a1 + 24);
  uint64_t v20 = _NSConcreteStackBlock;
  uint64_t v21 = 0x40000000LL;
  uint64_t v22 = sub_1000C47FC;
  unsigned __int8 v23 = &unk_10012DD08;
  uint64_t v24 = a1 + 8;
  uint64_t v25 = &v11;
  __int128 v26 = &v20;
  LOBYTE(v1sub_100007004((uint64_t)v9 + 8) = -86;
  blocuint64_t k = _NSConcreteStackBlock;
  uint64_t v29 = 0x40000000LL;
  uint64_t v30 = sub_1000C1C80;
  double v31 = &unk_10012D858;
  unint64_t v32 = &v18;
  __int128 v33 = (void ***)&v26;
  dispatch_sync(v6, &block);
  if ((_BYTE)v18)
  {
    do
    {
      uint64_t v17 = 0LL;
      uint64_t v18 = 0LL;
      __n128 v15 = &v16;
      uint64_t v16 = 0LL;
      uint64_t v11 = (sqlite3_stmt **)a1;
      uint64_t v12 = &v19;
      __n128 v13 = &v18;
      double v14 = &v17;
      uint64_t v7 = *(dispatch_queue_s **)(a1 + 24);
      uint64_t v20 = _NSConcreteStackBlock;
      uint64_t v21 = 0x40000000LL;
      uint64_t v22 = sub_1000C48FC;
      unsigned __int8 v23 = &unk_10012DD28;
      uint64_t v24 = a1 + 8;
      uint64_t v25 = &v11;
      __int128 v26 = &v20;
      unsigned __int8 v27 = -86;
      blocuint64_t k = _NSConcreteStackBlock;
      uint64_t v29 = 0x40000000LL;
      uint64_t v30 = sub_1000C1C80;
      double v31 = &unk_10012D858;
      unint64_t v32 = (uint64_t *)&v27;
      __int128 v33 = (void ***)&v26;
      dispatch_sync(v7, &block);
      int v8 = v27;
      if (v27 && v18 && v16) {
        sub_1000B96A0(a3, v18, v17, v16);
      }
    }

    while (v8);
  }

  uint64_t v20 = (void **)&v19;
  uint64_t v9 = *(dispatch_queue_s **)(a1 + 24);
  blocuint64_t k = _NSConcreteStackBlock;
  uint64_t v29 = 0x40000000LL;
  uint64_t v30 = sub_1000C4A64;
  double v31 = &unk_10012DD48;
  unint64_t v32 = (uint64_t *)(a1 + 8);
  __int128 v33 = &v20;
  dispatch_sync(v9, &block);
  sub_10004C6D4(&v19, 0LL);
  std::mutex::unlock(&stru_100131610);
}

void sub_1000B9980(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1000B9990(uint64_t a1, uint64_t *a2, uint64_t a3)
{
}

void sub_1000B9998(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)&qword_100131AF8);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_100131AF8))
  {
    __cxa_atexit((void (*)(void *))&std::mutex::~mutex, &stru_100131650, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_100131AF8);
  }

  std::mutex::lock(&stru_100131650);
  uint64_t v11 = a1 + 136;
  uint64_t v12 = a1;
  __n128 v13 = a2;
  uint64_t v6 = *(dispatch_queue_s **)(a1 + 24);
  uint64_t v19 = _NSConcreteStackBlock;
  uint64_t v20 = 0x40000000LL;
  uint64_t v21 = sub_1000C4A74;
  uint64_t v22 = &unk_10012DD68;
  uint64_t v23 = a1 + 8;
  uint64_t v24 = &v11;
  uint64_t v25 = &v19;
  LOBYTE(v1sub_100007004((uint64_t)v9 + 8) = -86;
  blocuint64_t k = _NSConcreteStackBlock;
  uint64_t v28 = 0x40000000LL;
  uint64_t v29 = sub_1000C1C80;
  uint64_t v30 = &unk_10012D858;
  double v31 = &v18;
  unint64_t v32 = (void ***)&v25;
  dispatch_sync(v6, &block);
  if ((_BYTE)v18)
  {
    if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_DEBUG)) {
      sub_1000C5804();
    }
    do
    {
      uint64_t v17 = 0LL;
      uint64_t v18 = 0LL;
      uint64_t v11 = a1;
      uint64_t v12 = a1 + 136;
      __n128 v13 = &v18;
      double v14 = &v17;
      __n128 v15 = &v16;
      uint64_t v16 = 0LL;
      uint64_t v7 = *(dispatch_queue_s **)(a1 + 24);
      uint64_t v19 = _NSConcreteStackBlock;
      uint64_t v20 = 0x40000000LL;
      uint64_t v21 = sub_1000C4B78;
      uint64_t v22 = &unk_10012DD88;
      uint64_t v23 = a1 + 8;
      uint64_t v24 = &v11;
      uint64_t v25 = &v19;
      unsigned __int8 v26 = -86;
      blocuint64_t k = _NSConcreteStackBlock;
      uint64_t v28 = 0x40000000LL;
      uint64_t v29 = sub_1000C1C80;
      uint64_t v30 = &unk_10012D858;
      double v31 = (uint64_t *)&v26;
      unint64_t v32 = (void ***)&v25;
      dispatch_sync(v7, &block);
      int v8 = v26;
      if (v26 && v18 && v16) {
        sub_1000B96A0(a3, v18, v17, v16);
      }
    }

    while (v8);
  }

  uint64_t v19 = (void **)(a1 + 136);
  uint64_t v9 = *(dispatch_queue_s **)(a1 + 24);
  blocuint64_t k = _NSConcreteStackBlock;
  uint64_t v28 = 0x40000000LL;
  uint64_t v29 = sub_1000C4D2C;
  uint64_t v30 = &unk_10012DDA8;
  double v31 = (uint64_t *)(a1 + 8);
  unint64_t v32 = &v19;
  dispatch_sync(v9, &block);
  std::mutex::unlock(&stru_100131650);
}

void sub_1000B9C20(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1000B9C30(uint64_t a1, uint64_t *a2, uint64_t a3)
{
}

void sub_1000B9C38(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)&qword_100131B00);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_100131B00))
  {
    __cxa_atexit((void (*)(void *))&std::mutex::~mutex, &stru_100131690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_100131B00);
  }

  std::mutex::lock(&stru_100131690);
  uint64_t v16 = 0LL;
  uint64_t v10 = &v16;
  uint64_t v11 = (sqlite3_stmt **)a1;
  uint64_t v4 = *(dispatch_queue_s **)(a1 + 24);
  uint64_t v17 = _NSConcreteStackBlock;
  uint64_t v18 = 0x40000000LL;
  uint64_t v19 = sub_1000C4D90;
  uint64_t v20 = &unk_10012DDC8;
  uint64_t v21 = a1 + 8;
  uint64_t v22 = &v10;
  uint64_t v23 = &v17;
  LOBYTE(v15) = -86;
  blocuint64_t k = _NSConcreteStackBlock;
  uint64_t v26 = 0x40000000LL;
  unsigned __int8 v27 = sub_1000C1C80;
  uint64_t v28 = &unk_10012D858;
  uint64_t v29 = &v15;
  uint64_t v30 = (void ***)&v23;
  dispatch_sync(v4, &block);
  if ((_BYTE)v15)
  {
    unsigned __int8 v5 = (os_log_s *)qword_100131930;
    if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_INFO))
    {
      LOWORD(block) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "[Config Store] Iterating all external configs",  (uint8_t *)&block,  2u);
    }

    do
    {
      uint64_t v14 = 0LL;
      uint64_t v15 = 0LL;
      uint64_t v10 = (sqlite3_stmt **)a1;
      uint64_t v11 = &v16;
      uint64_t v12 = &v15;
      __n128 v13 = &v14;
      uint64_t v6 = *(dispatch_queue_s **)(a1 + 24);
      uint64_t v17 = _NSConcreteStackBlock;
      uint64_t v18 = 0x40000000LL;
      uint64_t v19 = sub_1000C4E7C;
      uint64_t v20 = &unk_10012DDE8;
      uint64_t v21 = a1 + 8;
      uint64_t v22 = &v10;
      uint64_t v23 = &v17;
      unsigned __int8 v24 = -86;
      blocuint64_t k = _NSConcreteStackBlock;
      uint64_t v26 = 0x40000000LL;
      unsigned __int8 v27 = sub_1000C1C80;
      uint64_t v28 = &unk_10012D858;
      uint64_t v29 = (uint64_t *)&v24;
      uint64_t v30 = (void ***)&v23;
      dispatch_sync(v6, &block);
      int v7 = v24;
      if (v24 && v14) {
        sub_1000B9EE8(a2, v15, v14);
      }
    }

    while (v7);
  }

  uint64_t v17 = (void **)&v16;
  int v8 = *(dispatch_queue_s **)(a1 + 24);
  blocuint64_t k = _NSConcreteStackBlock;
  uint64_t v26 = 0x40000000LL;
  unsigned __int8 v27 = sub_1000C4FCC;
  uint64_t v28 = &unk_10012DE08;
  uint64_t v29 = (uint64_t *)(a1 + 8);
  uint64_t v30 = &v17;
  dispatch_sync(v8, &block);
  sub_10004C6D4(&v16, 0LL);
  std::mutex::unlock(&stru_100131690);
}

void sub_1000B9ED8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000B9EE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3;
  uint64_t v6 = a2;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    sub_1000129CC();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v3 + 48LL))(v3, &v6, &v5);
}

void sub_1000B9F50(uint64_t a1, uint64_t a2)
{
}

void sub_1000B9F58(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v3 = a1;
  uint64_t v2 = *(dispatch_queue_s **)(a1 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_1000C4FDC;
  block[3] = &unk_10012DE28;
  void block[4] = v1;
  void block[5] = &v3;
  dispatch_sync(v2, block);
}

void sub_1000B9FE4(uint64_t a1)
{
  uint64_t v1 = a1 - 104;
  uint64_t v3 = a1 - 112;
  uint64_t v2 = *(dispatch_queue_s **)(a1 - 88);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_1000C4FDC;
  block[3] = &unk_10012DE28;
  void block[4] = v1;
  void block[5] = &v3;
  dispatch_sync(v2, block);
}

sqlite3_int64 sub_1000BA074(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10004AA8C(a2, "uuid");
  sub_1000218CC(v4, &v27);
  std::string::size_type size = v27.__r_.__value_.__s.__size_;
  if ((v27.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    std::string::size_type size = v27.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    uint64_t v26 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
    sub_10004C38C( a1,  "INSERT INTO configs (config_uuid, config_parent_uuid, config_header) VALUES (?1, ?2, ?3);",
      0,
      &v26);
    if (!v26)
    {
      uint64_t v9 = *(sqlite3 **)(a1 + 32);
      BOOL v10 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (v9)
      {
        if (v10)
        {
          uint64_t v11 = sqlite3_errmsg(v9);
          sub_1000C5914((uint64_t)v11, (uint64_t)__p);
        }
      }

      else if (v10)
      {
        sub_1000C58BC();
      }

      sqlite3_int64 insert_rowid = 0LL;
      goto LABEL_44;
    }

    uint64_t v25 = 0LL;
    sub_10004C11C(a1, &v26, 1, (uint64_t)&v27, &v25);
    uint64_t v28 = "parentUuid";
    __p[4] = (void *)0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v6 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v6 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)std::string __p = v6;
    *(_OWORD *)&xpc_object_t __p[2] = v6;
    sub_100008780(a2, &v28, (uint64_t)__p);
    *(void *)std::string buf = a2;
    *(void *)&uint8_t buf[8] = 0LL;
    *(void *)&uint8_t buf[16] = 0LL;
    uint64_t v30 = 0LL;
    unint64_t v31 = 0x8000000000000000LL;
    sub_100008AC8((unsigned __int8 **)buf);
    if (sub_1000087E8((unsigned __int8 **)__p, (unsigned __int8 **)buf))
    {
      uint64_t v7 = sub_10009AE9C();
      if (!v7) {
        goto LABEL_18;
      }
    }

    else
    {
      uint64_t v7 = (uint64_t)sub_100008924((unsigned __int8 **)__p);
    }

    if (*(_BYTE *)v7 == 3)
    {
      uint64_t v12 = *(void *)(v7 + 8);
      if (v12)
      {
        sub_10004C11C(a1, &v26, 2, v12, &v25);
        char v13 = 0;
        goto LABEL_19;
      }
    }

void sub_1000BA4C8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

uint64_t sub_1000BA4D4(uint64_t a1, sqlite3_int64 a2, uint64_t a3)
{
  sqlite3_int64 v63 = a2;
  uint64_t v5 = (os_log_s *)qword_100131930;
  if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_DEFAULT))
  {
    else {
      uint64_t v6 = *(void *)a3;
    }
    *(_DWORD *)std::string buf = 136446210;
    *(void *)&uint8_t buf[4] = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[Config Store] Cloning from parent config with uuid '%{public}s'",  buf,  0xCu);
  }

  std::string v62 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
  sub_10004C38C(a1, "SELECT config_id FROM configs WHERE config_uuid=?1 LIMIT 1;", 0, &v62);
  if (!v62)
  {
    int v8 = *(sqlite3 **)(a1 + 32);
    BOOL v9 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v8)
    {
      if (v9)
      {
        BOOL v10 = sqlite3_errmsg(v8);
        sub_1000C5ACC((uint64_t)v10, (uint64_t)buf);
      }
    }

    else if (v9)
    {
      sub_1000C5A74();
    }

    goto LABEL_97;
  }

  sub_10004C160(a1, &v62, 1, a3);
  int v7 = sub_10004C078(a1, &v62);
  if (v7 != 100)
  {
    if (v7 == 101)
    {
      if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR)) {
        sub_1000C5FEC();
      }
    }

    else
    {
      unint64_t v32 = *(sqlite3 **)(a1 + 32);
      BOOL v33 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (v32)
      {
        if (v33)
        {
          double v34 = sqlite3_errmsg(v32);
          sub_1000C5B58((uint64_t)v34, (uint64_t)buf);
        }
      }

      else if (v33)
      {
        sub_1000C5B00();
      }
    }

LABEL_97:
    uint64_t v29 = 0LL;
    goto LABEL_98;
  }

  sqlite3_int64 v61 = sub_10004C2E4(a1, &v62, 0);
  sub_10004C38C( a1,  "INSERT INTO config_transforms (config_id, transform_id) SELECT ?1, transform_id FROM config_transforms WHERE config_id=?2;",
    0,
    (sqlite3_stmt **)buf);
  uint64_t v11 = *(sqlite3_stmt **)buf;
  *(void *)std::string buf = 0LL;
  sub_10004C6D4(&v62, v11);
  sub_10004C6D4((sqlite3_stmt **)buf, 0LL);
  if (!v62)
  {
    unint64_t v35 = *(sqlite3 **)(a1 + 32);
    BOOL v36 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v35)
    {
      if (v36)
      {
        double v37 = sqlite3_errmsg(v35);
        sub_1000C5BE4((uint64_t)v37, (uint64_t)buf);
      }
    }

    else if (v36)
    {
      sub_1000C5B8C();
    }

    goto LABEL_97;
  }

  uint64_t v60 = 0LL;
  sub_10004C1A4(a1, &v62, 1, &v63, &v60);
  sub_10004C1A4(a1, &v62, 2, &v61, &v60);
  do
    int v12 = sub_10004C0B4(a1, &v62, &v60);
  while (v12 == 100);
  if (v12 != 101)
  {
    unint64_t v38 = *(sqlite3 **)(a1 + 32);
    BOOL v39 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v38)
    {
      if (v39)
      {
        uint64_t v40 = sqlite3_errmsg(v38);
        sub_1000C5C70((uint64_t)v40, (uint64_t)buf);
      }
    }

    else if (v39)
    {
      sub_1000C5C18();
    }

    goto LABEL_97;
  }

  char v13 = (os_log_s *)qword_100131930;
  if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_INFO))
  {
    int v14 = sqlite3_changes(*(sqlite3 **)(a1 + 32));
    else {
      uint64_t v15 = *(void *)a3;
    }
    *(_DWORD *)std::string buf = 67109378;
    *(_DWORD *)&uint8_t buf[4] = v14;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "[Config Store] Cloned %d transforms from parent configwith uuid '%{public}s' ",  buf,  0x12u);
  }

  sub_10004C38C( a1,  "INSERT INTO config_eventdefs (config_id, eventdef_id) SELECT ?1, eventdef_id FROM config_eventdefs WHERE config_id=?2;",
    0,
    (sqlite3_stmt **)buf);
  uint64_t v16 = *(sqlite3_stmt **)buf;
  *(void *)std::string buf = 0LL;
  sub_10004C6D4(&v62, v16);
  sub_10004C6D4((sqlite3_stmt **)buf, 0LL);
  if (!v62)
  {
    std::string v41 = *(sqlite3 **)(a1 + 32);
    BOOL v42 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v41)
    {
      if (v42)
      {
        uint64_t v43 = sqlite3_errmsg(v41);
        sub_1000C5CFC((uint64_t)v43, (uint64_t)buf);
      }
    }

    else if (v42)
    {
      sub_1000C5CA4();
    }

    goto LABEL_97;
  }

  uint64_t v60 = 0LL;
  sub_10004C1A4(a1, &v62, 1, &v63, &v60);
  sub_10004C1A4(a1, &v62, 2, &v61, &v60);
  do
    int v17 = sub_10004C0B4(a1, &v62, &v60);
  while (v17 == 100);
  if (v17 != 101)
  {
    __int128 v44 = *(sqlite3 **)(a1 + 32);
    BOOL v45 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v44)
    {
      if (v45)
      {
        uint64_t v46 = sqlite3_errmsg(v44);
        sub_1000C5D88((uint64_t)v46, (uint64_t)buf);
      }
    }

    else if (v45)
    {
      sub_1000C5D30();
    }

    goto LABEL_97;
  }

  uint64_t v18 = (os_log_s *)qword_100131930;
  if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_INFO))
  {
    int v19 = sqlite3_changes(*(sqlite3 **)(a1 + 32));
    else {
      uint64_t v20 = *(void *)a3;
    }
    *(_DWORD *)std::string buf = 67109378;
    *(_DWORD *)&uint8_t buf[4] = v19;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = v20;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "[Config Store] Cloned %d eventdefs from parent configwith uuid '%{public}s' ",  buf,  0x12u);
  }

  sub_10004C38C( a1,  "INSERT INTO config_modify_eventdefs (config_id, modify_eventdef_id) SELECT ?1, modify_eventdef_id FROM config_modify _eventdefs WHERE config_id=?2;",
    0,
    (sqlite3_stmt **)buf);
  std::string::size_type v21 = *(sqlite3_stmt **)buf;
  *(void *)std::string buf = 0LL;
  sub_10004C6D4(&v62, v21);
  sub_10004C6D4((sqlite3_stmt **)buf, 0LL);
  if (!v62)
  {
    char v47 = *(sqlite3 **)(a1 + 32);
    BOOL v48 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v47)
    {
      if (v48)
      {
        uint64_t v49 = sqlite3_errmsg(v47);
        sub_1000C5E14((uint64_t)v49, (uint64_t)buf);
      }
    }

    else if (v48)
    {
      sub_1000C5DBC();
    }

    goto LABEL_97;
  }

  uint64_t v60 = 0LL;
  sub_10004C1A4(a1, &v62, 1, &v63, &v60);
  sub_10004C1A4(a1, &v62, 2, &v61, &v60);
  do
    int v22 = sub_10004C0B4(a1, &v62, &v60);
  while (v22 == 100);
  if (v22 != 101)
  {
    char v50 = *(sqlite3 **)(a1 + 32);
    BOOL v51 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v50)
    {
      if (v51)
      {
        uint64_t v52 = sqlite3_errmsg(v50);
        sub_1000C5EA0((uint64_t)v52, (uint64_t)buf);
      }
    }

    else if (v51)
    {
      sub_1000C5E48();
    }

    goto LABEL_97;
  }

  uint64_t v23 = (os_log_s *)qword_100131930;
  if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_INFO))
  {
    int v24 = sqlite3_changes(*(sqlite3 **)(a1 + 32));
    else {
      uint64_t v25 = *(void *)a3;
    }
    *(_DWORD *)std::string buf = 67109378;
    *(_DWORD *)&uint8_t buf[4] = v24;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = v25;
    _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_INFO,  "[Config Store] Cloned %d modify-eventdefs from parent configwith uuid '%{public}s' ",  buf,  0x12u);
  }

  sub_10004C38C( a1,  "INSERT INTO config_external_configs (config_id, external_config_id) SELECT ?1, external_config_id FROM config_extern al_configs WHERE config_id=?2;",
    0,
    (sqlite3_stmt **)buf);
  uint64_t v26 = *(sqlite3_stmt **)buf;
  *(void *)std::string buf = 0LL;
  sub_10004C6D4(&v62, v26);
  sub_10004C6D4((sqlite3_stmt **)buf, 0LL);
  if (!v62)
  {
    char v53 = *(sqlite3 **)(a1 + 32);
    BOOL v54 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v53)
    {
      if (v54)
      {
        uint64_t v55 = sqlite3_errmsg(v53);
        sub_1000C5F2C((uint64_t)v55, (uint64_t)buf);
      }
    }

    else if (v54)
    {
      sub_1000C5ED4();
    }

    goto LABEL_97;
  }

  uint64_t v60 = 0LL;
  sub_10004C1A4(a1, &v62, 1, &v63, &v60);
  sub_10004C1A4(a1, &v62, 2, &v61, &v60);
  do
    int v27 = sub_10004C0B4(a1, &v62, &v60);
  while (v27 == 100);
  if (v27 != 101)
  {
    char v56 = *(sqlite3 **)(a1 + 32);
    BOOL v57 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v56)
    {
      if (v57)
      {
        uint64_t v58 = sqlite3_errmsg(v56);
        sub_1000C5FB8((uint64_t)v58, (uint64_t)buf);
      }
    }

    else if (v57)
    {
      sub_1000C5F60();
    }

    goto LABEL_97;
  }

  uint64_t v28 = (os_log_s *)qword_100131930;
  uint64_t v29 = 1LL;
  if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_INFO))
  {
    int v30 = sqlite3_changes(*(sqlite3 **)(a1 + 32));
    else {
      uint64_t v31 = *(void *)a3;
    }
    *(_DWORD *)std::string buf = 67109378;
    *(_DWORD *)&uint8_t buf[4] = v30;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = v31;
    _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_INFO,  "[Config Store] Cloned %d external configs from parent config with uuid '%{public}s'",  buf,  0x12u);
  }

LABEL_98:
  sub_10004C6D4(&v62, 0LL);
  return v29;
}

void sub_1000BACE4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

sqlite3_int64 sub_1000BACF0(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  if (*a3 != 2) {
    return 0LL;
  }
  sqlite3_int64 insert_rowid = sub_1000BB118(a1, a2, (uint64_t)a3);
  if (insert_rowid) {
    return insert_rowid;
  }
  uint64_t v8 = *(void *)(a2 + 24);
  int v7 = (sqlite3_stmt **)(a2 + 24);
  if (!v8)
  {
    sub_10004C38C( a1,  "INSERT INTO sampling (sampling_def, sampling_def_perc, sampled_out, disable_sampling) VALUES (?1, ?2, ?3, ?4);",
      0,
      (sqlite3_stmt **)buf);
    BOOL v9 = *(sqlite3_stmt **)buf;
    *(void *)std::string buf = 0LL;
    sub_10004C6D4(v7, v9);
    sub_10004C6D4((sqlite3_stmt **)buf, 0LL);
    if (!*v7)
    {
      uint64_t v26 = *(sqlite3 **)(a1 + 32);
      BOOL v27 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (v26)
      {
        if (v27)
        {
          uint64_t v28 = sqlite3_errmsg(v26);
          sub_1000C60A8((uint64_t)v28, (uint64_t)buf);
        }
      }

      else if (v27)
      {
        sub_1000C6050();
      }

      return 0LL;
    }
  }

  BOOL v33 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
  sub_100040E10(&v33, v7);
  uint64_t v32 = 0LL;
  memset(__p, 170, sizeof(__p));
  sub_100006200((uint64_t)a3, -1, 0x20u, 0LL, 0, __p);
  sub_10004C11C(a1, v7, 1, (uint64_t)__p, &v32);
  uint64_t v30 = 0x4059000000000000LL;
  int v10 = *a3;
  if (v10 == 1)
  {
    uint64_t v11 = *(void *)(*((void *)a3 + 1) + 16LL);
    goto LABEL_9;
  }

  if (v10 == 2)
  {
    uint64_t v11 = (uint64_t)(*(void *)(*((void *)a3 + 1) + 8LL) - **((void **)a3 + 1)) >> 4;
LABEL_9:
    if (v11 == 4)
    {
      int v12 = (unsigned __int8 *)sub_1000182F4(a3, 1uLL);
      if (sub_100048798(v12, ":generateStableRandomValuePerDevice100"))
      {
        char v13 = (unsigned __int8 *)sub_1000182F4(a3, 2uLL);
        *(void *)std::string buf = -1LL;
        sub_10005A088(v13, (double *)buf);
        uint64_t v30 = *(void *)buf;
      }
    }
  }

  sub_10004C20C(a1, v7, 2, (double *)&v30, &v32);
  int v38 = -1431655766;
  memset(buf, 0, sizeof(buf));
  __int128 v36 = 0u;
  memset(v37, 0, sizeof(v37));
  sub_1000B0590(*(void ***)(a1 + 64), (uint64_t)buf, a3);
  if ((void)v36 - *(void *)&buf[24] == 16LL)
  {
    LOBYTE(v34) = -86;
    sub_100059DD4(*(char **)&buf[24], &v34);
    BOOL v14 = (_BYTE)v34 != 0;
  }

  else
  {
    BOOL v14 = 0;
  }

  uint64_t v15 = *(std::__shared_weak_count **)&v37[16];
  if (*(void *)&v37[16])
  {
    uint64_t v16 = (unint64_t *)(*(void *)&v37[16] + 8LL);
    do
      unint64_t v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

  double v34 = &buf[24];
  sub_100004D64((void ***)&v34);
  double v34 = buf;
  sub_1000100E4((void ***)&v34);
  *(void *)std::string buf = !v14;
  sub_10004C1A4(a1, v7, 3, (sqlite3_int64 *)buf, &v32);
  *(void *)std::string buf = sub_10009346C();
  sub_10004C1A4(a1, v7, 4, (sqlite3_int64 *)buf, &v32);
  int v18 = sub_10004C0B4(a1, v7, &v32);
  int v19 = *(sqlite3 **)(a1 + 32);
  if (v18 == 101)
  {
    sqlite3_int64 insert_rowid = sqlite3_last_insert_rowid(*(sqlite3 **)(a1 + 32));
  }

  else
  {
    uint64_t v20 = (os_log_s *)qword_100131930;
    BOOL v21 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v19)
    {
      if (v21)
      {
        int v22 = SHIBYTE(__p[2]);
        uint64_t v23 = (void **)__p[0];
        int v24 = sqlite3_errmsg(v19);
        uint64_t v25 = __p;
        if (v22 < 0) {
          uint64_t v25 = v23;
        }
        *(_DWORD *)std::string buf = 136446466;
        *(void *)&uint8_t buf[4] = v25;
        *(_WORD *)&_BYTE buf[12] = 2080;
        *(void *)&buf[14] = v24;
        _os_log_error_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "[Config Store] ERROR: Failed to insert sampling_def=%{public}s; %s",
          buf,
          0x16u);
      }
    }

    else if (v21)
    {
      sub_1000C60DC();
    }

    sqlite3_int64 insert_rowid = 0LL;
  }

  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  sub_100040E1C(&v33);
  return insert_rowid;
}

void sub_1000BB0D4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  if (a2)
  {
    sub_10000FF04(&a17);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1000BAF20LL);
  }

  _Unwind_Resume(exception_object);
}

sqlite3_int64 sub_1000BB118(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (sqlite3_stmt **)(a2 + 32);
  if (*(void *)(a2 + 32)
    || (sub_10004C38C(a1, "SELECT sampling_id FROM sampling WHERE sampling_def=?1 LIMIT 1", 0, (sqlite3_stmt **)__p),
        uint64_t v6 = (sqlite3_stmt *)__p[0],
        __p[0] = 0LL,
        sub_10004C6D4(v5, v6),
        sub_10004C6D4((sqlite3_stmt **)__p, 0LL),
        *v5))
  {
    int v12 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
    sub_100040E10(&v12, v5);
    memset(__p, 170, sizeof(__p));
    sub_100006200(a3, -1, 0x20u, 0LL, 0, __p);
    sub_10004C160(a1, v5, 1, (uint64_t)__p);
    else {
      sqlite3_int64 v7 = 0LL;
    }
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    sub_100040E1C(&v12);
  }

  else
  {
    BOOL v9 = *(sqlite3 **)(a1 + 32);
    BOOL v10 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v9)
    {
      if (v10)
      {
        uint64_t v11 = sqlite3_errmsg(v9);
        sub_1000C6198((uint64_t)v11, (uint64_t)__p);
      }
    }

    else if (v10)
    {
      sub_1000C6140();
    }

    return 0LL;
  }

  return v7;
}

void sub_1000BB2AC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

sqlite3_int64 sub_1000BB2B8(uint64_t a1, uint64_t a2, sqlite3_int64 a3, uint64_t a4)
{
  unint64_t v31 = 0xAAAAAAAAAAAAAAAALL;
  sqlite3_int64 v32 = a3;
  *(void *)&__int128 v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  v30[0] = v8;
  v30[1] = v8;
  sub_1000184F4(a4, "uuid", (uint64_t)v30);
  unint64_t v29 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v9 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v9 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)std::string __p = v9;
  __int128 v28 = v9;
  sub_1000211B0(__p, a4);
  sub_1000211FC((unsigned __int8 **)__p);
  if (sub_10001855C((unsigned __int8 **)v30, (unsigned __int8 **)__p) || *sub_100018150((unsigned __int8 **)v30) != 3)
  {
    if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR)) {
      sub_1000C61CC();
    }
    return 0LL;
  }

  else
  {
    BOOL v10 = sub_100018150((unsigned __int8 **)v30);
    sub_1000218CC((uint64_t)v10, (std::string *)__p);
    if (*(void *)(a2 + 8)
      || (sub_10004C38C( a1,  "INSERT INTO transforms (transform_uuid, transform_def, sampling_id) VALUES (?1, ?2, ?3);",
            0,
            v37),
          uint64_t v11 = v37[0],
          v37[0] = 0LL,
          sub_10004C6D4((sqlite3_stmt **)(a2 + 8), v11),
          sub_10004C6D4(v37, 0LL),
          *(void *)(a2 + 8)))
    {
      memset(v37, 170, sizeof(v37));
      sub_100006200(a4, -1, 0x20u, 0LL, 0, v37);
      uint64_t v26 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
      sub_100040E10(&v26, (void *)(a2 + 8));
      uint64_t v25 = 0LL;
      sub_10004C11C(a1, (sqlite3_stmt **)(a2 + 8), 1, (uint64_t)__p, &v25);
      sub_10004C11C(a1, (sqlite3_stmt **)(a2 + 8), 2, (uint64_t)v37, &v25);
      if (a3) {
        sub_10004C1A4(a1, (sqlite3_stmt **)(a2 + 8), 3, &v32, &v25);
      }
      else {
        sub_10004C248(a1, (sqlite3_stmt **)(a2 + 8), 3, &v25);
      }
      if (sub_10004C0B4(a1, (sqlite3_stmt **)(a2 + 8), &v25) == 101)
      {
        sqlite3_int64 insert_rowid = sqlite3_last_insert_rowid(*(sqlite3 **)(a1 + 32));
      }

      else
      {
        sqlite3_int64 v14 = sub_1000BB65C(a1, a2, (uint64_t)__p);
        if (v14)
        {
          sqlite3_int64 insert_rowid = v14;
          if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_DEBUG)) {
            sub_1000C6314();
          }
        }

        else
        {
          uint64_t v15 = *(sqlite3 **)(a1 + 32);
          uint64_t v16 = (os_log_s *)qword_100131930;
          BOOL v17 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
          if (v15)
          {
            if (v17)
            {
              int v18 = SBYTE7(v28);
              int v19 = (void **)__p[0];
              uint64_t v20 = sqlite3_errmsg(v15);
              BOOL v21 = __p;
              if (v18 < 0) {
                BOOL v21 = v19;
              }
              *(_DWORD *)std::string buf = 136446466;
              double v34 = v21;
              __int16 v35 = 2080;
              __int128 v36 = v20;
              _os_log_error_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "[Config Store] ERROR: Failed to insert transform uuid='%{public}s'; %s",
                buf,
                0x16u);
            }
          }

          else if (v17)
          {
            sub_1000C62B0();
          }

          sqlite3_int64 insert_rowid = 0LL;
        }
      }

      sub_100040E1C(&v26);
      if (SHIBYTE(v37[2]) < 0) {
        operator delete(v37[0]);
      }
    }

    else
    {
      int v22 = *(sqlite3 **)(a1 + 32);
      BOOL v23 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (v22)
      {
        if (v23)
        {
          int v24 = sqlite3_errmsg(v22);
          sub_1000C627C((uint64_t)v24, (uint64_t)v37);
        }
      }

      else if (v23)
      {
        sub_1000C6224();
      }

      sqlite3_int64 insert_rowid = 0LL;
    }

    if (SBYTE7(v28) < 0) {
      operator delete(__p[0]);
    }
  }

  return insert_rowid;
}

void sub_1000BB650(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

sqlite3_int64 sub_1000BB65C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (sqlite3_stmt **)(a2 + 16);
  if (*(void *)(a2 + 16)
    || (sub_10004C38C(a1, "SELECT transform_id FROM transforms WHERE transform_uuid=?1 LIMIT 1;", 0, v12),
        uint64_t v6 = v12[0],
        v12[0] = 0LL,
        sub_10004C6D4(v5, v6),
        sub_10004C6D4(v12, 0LL),
        *v5))
  {
    v12[0] = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
    sub_100040E10(v12, v5);
    sub_10004C160(a1, v5, 1, a3);
    else {
      sqlite3_int64 v7 = 0LL;
    }
    sub_100040E1C(v12);
  }

  else
  {
    __int128 v9 = *(sqlite3 **)(a1 + 32);
    BOOL v10 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v9)
    {
      if (v10)
      {
        uint64_t v11 = sqlite3_errmsg(v9);
        sub_1000C63D0((uint64_t)v11, (uint64_t)v12);
      }
    }

    else if (v10)
    {
      sub_1000C6378();
    }

    return 0LL;
  }

  return v7;
}

void sub_1000BB7BC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

sqlite3_int64 sub_1000BB7C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (sqlite3_stmt **)(a2 + 64);
  if (*(void *)(a2 + 64)
    || (sub_10004C38C(a1, "SELECT eventdef_id FROM eventdefs WHERE event_uuid=?1 LIMIT 1", 0, v12),
        uint64_t v6 = v12[0],
        v12[0] = 0LL,
        sub_10004C6D4(v5, v6),
        sub_10004C6D4(v12, 0LL),
        *v5))
  {
    v12[0] = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
    sub_100040E10(v12, v5);
    sub_10004C160(a1, v5, 1, a3);
    else {
      sqlite3_int64 v7 = 0LL;
    }
    sub_100040E1C(v12);
  }

  else
  {
    __int128 v9 = *(sqlite3 **)(a1 + 32);
    BOOL v10 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v9)
    {
      if (v10)
      {
        uint64_t v11 = sqlite3_errmsg(v9);
        sub_1000C645C((uint64_t)v11, (uint64_t)v12);
      }
    }

    else if (v10)
    {
      sub_1000C6404();
    }

    return 0LL;
  }

  return v7;
}

void sub_1000BB928(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

sqlite3_int64 sub_1000BB934(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&v48[32] = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)BOOL v48 = v6;
  *(_OWORD *)&_BYTE v48[16] = v6;
  sub_1000184F4(a3, "uuid", (uint64_t)v48);
  *(void *)&uint8_t buf[32] = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)std::string buf = v7;
  *(_OWORD *)&uint8_t buf[16] = v7;
  __int128 v8 = (unsigned __int8 **)sub_1000211B0(buf, a3);
  sub_1000211FC(v8);
  if (!sub_10001855C((unsigned __int8 **)v48, (unsigned __int8 **)buf) && *sub_100018150((unsigned __int8 **)v48) == 3)
  {
    __int128 v9 = sub_100018150((unsigned __int8 **)v48);
    sub_1000218CC((uint64_t)v9, &__p);
    sub_1000184F4(a3, "name", (uint64_t)buf);
    *(void *)BOOL v48 = *(void *)buf;
    *(_OWORD *)&_BYTE v48[8] = *(_OWORD *)&buf[8];
    *(_OWORD *)&_BYTE v48[24] = *(_OWORD *)&buf[24];
    *(void *)&uint8_t buf[32] = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v10 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v10 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)std::string buf = v10;
    *(_OWORD *)&uint8_t buf[16] = v10;
    uint64_t v11 = (unsigned __int8 **)sub_1000211B0(buf, a3);
    sub_1000211FC(v11);
    if (sub_10001855C((unsigned __int8 **)v48, (unsigned __int8 **)buf) || *sub_100018150((unsigned __int8 **)v48) != 3)
    {
      if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR)) {
        sub_1000C64E8();
      }
      sqlite3_int64 insert_rowid = 0LL;
      goto LABEL_20;
    }

    int v12 = sub_100018150((unsigned __int8 **)v48);
    sub_1000218CC((uint64_t)v12, &v46);
    sub_1000184F4(a3, "type", (uint64_t)buf);
    *(void *)BOOL v48 = *(void *)buf;
    *(_OWORD *)&_BYTE v48[8] = *(_OWORD *)&buf[8];
    *(_OWORD *)&_BYTE v48[24] = *(_OWORD *)&buf[24];
    *(void *)&uint8_t buf[32] = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v13 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v13 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)std::string buf = v13;
    *(_OWORD *)&uint8_t buf[16] = v13;
    sqlite3_int64 v14 = (unsigned __int8 **)sub_1000211B0(buf, a3);
    sub_1000211FC(v14);
    if (sub_10001855C((unsigned __int8 **)v48, (unsigned __int8 **)buf) || *sub_100018150((unsigned __int8 **)v48) != 3)
    {
      if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR)) {
        sub_1000C6540();
      }
      sqlite3_int64 insert_rowid = 0LL;
      goto LABEL_25;
    }

    uint64_t v15 = sub_100018150((unsigned __int8 **)v48);
    sub_1000218CC((uint64_t)v15, &v45);
    sub_1000184F4(a3, "configuration", (uint64_t)buf);
    *(void *)BOOL v48 = *(void *)buf;
    *(_OWORD *)&_BYTE v48[8] = *(_OWORD *)&buf[8];
    *(_OWORD *)&_BYTE v48[24] = *(_OWORD *)&buf[24];
    *(void *)&uint8_t buf[32] = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v16 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v16 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)std::string buf = v16;
    *(_OWORD *)&uint8_t buf[16] = v16;
    BOOL v17 = (unsigned __int8 **)sub_1000211B0(buf, a3);
    sub_1000211FC(v17);
    if (sub_10001855C((unsigned __int8 **)v48, (unsigned __int8 **)buf) || *sub_100018150((unsigned __int8 **)v48) != 2)
    {
      if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR)) {
        sub_1000C6598();
      }
      sqlite3_int64 insert_rowid = 0LL;
      goto LABEL_30;
    }

    int v18 = sub_100018150((unsigned __int8 **)v48);
    int v19 = *v18;
    if (!*v18) {
      goto LABEL_34;
    }
    if (v19 == 1)
    {
      uint64_t v20 = *(void *)(*((void *)v18 + 1) + 16LL);
    }

    else
    {
      if (v19 != 2) {
        goto LABEL_36;
      }
      uint64_t v20 = (uint64_t)(*(void *)(*((void *)v18 + 1) + 8LL) - **((void **)v18 + 1)) >> 4;
    }

    if (!v20)
    {
LABEL_34:
      BOOL v23 = (os_log_s *)qword_100131930;
      if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_INFO,  "[Config Store] WARNING: event has no configurations",  buf,  2u);
      }
    }

void sub_1000BC000(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

sqlite3_int64 sub_1000BC00C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (sqlite3_stmt **)(a2 + 80);
  if (*(void *)(a2 + 80)
    || (sub_10004C38C(a1, "SELECT modify_eventdef_id FROM modify_eventdefs WHERE modify_event_uuid=?1 LIMIT 1", 0, v12),
        __int128 v6 = v12[0],
        v12[0] = 0LL,
        sub_10004C6D4(v5, v6),
        sub_10004C6D4(v12, 0LL),
        *v5))
  {
    v12[0] = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
    sub_100040E10(v12, v5);
    sub_10004C160(a1, v5, 1, a3);
    else {
      sqlite3_int64 v7 = 0LL;
    }
    sub_100040E1C(v12);
  }

  else
  {
    __int128 v9 = *(sqlite3 **)(a1 + 32);
    BOOL v10 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v9)
    {
      if (v10)
      {
        uint64_t v11 = sqlite3_errmsg(v9);
        sub_1000C6738((uint64_t)v11, (uint64_t)v12);
      }
    }

    else if (v10)
    {
      sub_1000C66E0();
    }

    return 0LL;
  }

  return v7;
}

void sub_1000BC16C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

sqlite3_int64 sub_1000BC178(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&v45[32] = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)std::string v45 = v6;
  *(_OWORD *)&_BYTE v45[16] = v6;
  sub_1000184F4(a3, "uuid", (uint64_t)v45);
  *(void *)&uint8_t buf[32] = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)std::string buf = v7;
  *(_OWORD *)&uint8_t buf[16] = v7;
  __int128 v8 = (unsigned __int8 **)sub_1000211B0(buf, a3);
  sub_1000211FC(v8);
  if (!sub_10001855C((unsigned __int8 **)v45, (unsigned __int8 **)buf) && *sub_100018150((unsigned __int8 **)v45) == 3)
  {
    __int128 v9 = sub_100018150((unsigned __int8 **)v45);
    sub_1000218CC((uint64_t)v9, &__p);
    sub_1000184F4(a3, "name", (uint64_t)buf);
    *(void *)std::string v45 = *(void *)buf;
    *(_OWORD *)&_BYTE v45[8] = *(_OWORD *)&buf[8];
    *(_OWORD *)&v45[24] = *(_OWORD *)&buf[24];
    *(void *)&uint8_t buf[32] = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v10 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v10 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)std::string buf = v10;
    *(_OWORD *)&uint8_t buf[16] = v10;
    uint64_t v11 = (unsigned __int8 **)sub_1000211B0(buf, a3);
    sub_1000211FC(v11);
    if (sub_10001855C((unsigned __int8 **)v45, (unsigned __int8 **)buf) || *sub_100018150((unsigned __int8 **)v45) != 3)
    {
      if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR)) {
        sub_1000C67C4();
      }
      sqlite3_int64 insert_rowid = 0LL;
      goto LABEL_22;
    }

    int v12 = sub_100018150((unsigned __int8 **)v45);
    sub_1000218CC((uint64_t)v12, &v43);
    sub_1000184F4(a3, "type", (uint64_t)buf);
    *(void *)std::string v45 = *(void *)buf;
    *(_OWORD *)&_BYTE v45[8] = *(_OWORD *)&buf[8];
    *(_OWORD *)&v45[24] = *(_OWORD *)&buf[24];
    *(void *)&uint8_t buf[32] = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v13 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v13 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)std::string buf = v13;
    *(_OWORD *)&uint8_t buf[16] = v13;
    sqlite3_int64 v14 = (unsigned __int8 **)sub_1000211B0(buf, a3);
    sub_1000211FC(v14);
    if (sub_10001855C((unsigned __int8 **)v45, (unsigned __int8 **)buf) || *sub_100018150((unsigned __int8 **)v45) != 3)
    {
      if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR)) {
        sub_1000C681C();
      }
      sqlite3_int64 insert_rowid = 0LL;
      goto LABEL_27;
    }

    uint64_t v15 = sub_100018150((unsigned __int8 **)v45);
    sub_1000218CC((uint64_t)v15, &v42);
    sub_1000184F4(a3, "defType", (uint64_t)buf);
    *(void *)std::string v45 = *(void *)buf;
    *(_OWORD *)&_BYTE v45[8] = *(_OWORD *)&buf[8];
    *(_OWORD *)&v45[24] = *(_OWORD *)&buf[24];
    *(void *)&uint8_t buf[32] = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v16 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v16 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)std::string buf = v16;
    *(_OWORD *)&uint8_t buf[16] = v16;
    BOOL v17 = (unsigned __int8 **)sub_1000211B0(buf, a3);
    sub_1000211FC(v17);
    if (sub_10001855C((unsigned __int8 **)v45, (unsigned __int8 **)buf) || *sub_100018150((unsigned __int8 **)v45) != 3)
    {
      if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR)) {
        sub_1000C6874();
      }
      sqlite3_int64 insert_rowid = 0LL;
      goto LABEL_32;
    }

    int v18 = sub_100018150((unsigned __int8 **)v45);
    sub_1000218CC((uint64_t)v18, &v41);
    sub_1000184F4(a3, "configuration", (uint64_t)buf);
    *(void *)std::string v45 = *(void *)buf;
    *(_OWORD *)&_BYTE v45[8] = *(_OWORD *)&buf[8];
    *(_OWORD *)&v45[24] = *(_OWORD *)&buf[24];
    *(void *)&uint8_t buf[32] = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v19 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v19 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)std::string buf = v19;
    *(_OWORD *)&uint8_t buf[16] = v19;
    uint64_t v20 = (unsigned __int8 **)sub_1000211B0(buf, a3);
    sub_1000211FC(v20);
    if (sub_10001855C((unsigned __int8 **)v45, (unsigned __int8 **)buf) || *sub_100018150((unsigned __int8 **)v45) != 2)
    {
      if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR)) {
        sub_1000C68CC();
      }
      sqlite3_int64 insert_rowid = 0LL;
      goto LABEL_37;
    }

    BOOL v21 = sub_100018150((unsigned __int8 **)v45);
    int v22 = *v21;
    if (!*v21) {
      goto LABEL_41;
    }
    if (v22 == 1)
    {
      uint64_t v23 = *(void *)(*((void *)v21 + 1) + 16LL);
    }

    else
    {
      if (v22 != 2) {
        goto LABEL_43;
      }
      uint64_t v23 = (uint64_t)(*(void *)(*((void *)v21 + 1) + 8LL) - **((void **)v21 + 1)) >> 4;
    }

    if (!v23)
    {
LABEL_41:
      uint64_t v26 = (os_log_s *)qword_100131930;
      if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_INFO,  "[Config Store] WARNING: modify event has no configurations",  buf,  2u);
      }
    }

void sub_1000BC858(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

sqlite3_int64 sub_1000BC864(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sqlite3_int64 insert_rowid = sub_1000BCA80(a1, a2, a3);
  if (!insert_rowid)
  {
    uint64_t v8 = *(void *)(a2 + 40);
    __int128 v7 = (sqlite3_stmt **)(a2 + 40);
    if (v8
      || (sub_10004C38C(a1, "INSERT INTO events (event_name) VALUES (?1)", 0, (sqlite3_stmt **)buf),
          __int128 v9 = *(sqlite3_stmt **)buf,
          *(void *)std::string buf = 0LL,
          sub_10004C6D4(v7, v9),
          sub_10004C6D4((sqlite3_stmt **)buf, 0LL),
          *v7))
    {
      uint64_t v23 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
      sub_100040E10(&v23, v7);
      uint64_t v22 = 0LL;
      sub_10004C11C(a1, v7, 1, a3, &v22);
      int v10 = sub_10004C0B4(a1, v7, &v22);
      uint64_t v11 = *(sqlite3 **)(a1 + 32);
      if (v10 == 101)
      {
        sqlite3_int64 insert_rowid = sqlite3_last_insert_rowid(*(sqlite3 **)(a1 + 32));
      }

      else
      {
        int v12 = (os_log_s *)qword_100131930;
        BOOL v13 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
        if (v11)
        {
          if (v13)
          {
            int v14 = *(char *)(a3 + 23);
            uint64_t v15 = *(void *)a3;
            __int128 v16 = sqlite3_errmsg(v11);
            if (v14 >= 0) {
              uint64_t v17 = a3;
            }
            else {
              uint64_t v17 = v15;
            }
            *(_DWORD *)std::string buf = 136315394;
            *(void *)&uint8_t buf[4] = v17;
            __int16 v25 = 2080;
            uint64_t v26 = v16;
            _os_log_error_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "[Config Store] ERROR: Failed to insert event '%s'; %s",
              buf,
              0x16u);
          }
        }

        else if (v13)
        {
          sub_1000C6A14();
        }

        sqlite3_int64 insert_rowid = 0LL;
      }

      sub_100040E1C(&v23);
    }

    else
    {
      __int128 v19 = *(sqlite3 **)(a1 + 32);
      BOOL v20 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (v19)
      {
        if (v20)
        {
          BOOL v21 = sqlite3_errmsg(v19);
          sub_1000C6648((uint64_t)v21, (uint64_t)buf);
        }
      }

      else if (v20)
      {
        sub_1000C65F0();
      }

      return 0LL;
    }
  }

  return insert_rowid;
}

void sub_1000BCA74(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

sqlite3_int64 sub_1000BCA80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (sqlite3_stmt **)(a2 + 48);
  if (*(void *)(a2 + 48)
    || (sub_10004C38C(a1, "SELECT event_id FROM events WHERE event_name=?1 LIMIT 1;", 0, v12),
        __int128 v6 = v12[0],
        v12[0] = 0LL,
        sub_10004C6D4(v5, v6),
        sub_10004C6D4(v12, 0LL),
        *v5))
  {
    v12[0] = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
    sub_100040E10(v12, v5);
    sub_10004C160(a1, v5, 1, a3);
    else {
      sqlite3_int64 v7 = 0LL;
    }
    sub_100040E1C(v12);
  }

  else
  {
    __int128 v9 = *(sqlite3 **)(a1 + 32);
    BOOL v10 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v9)
    {
      if (v10)
      {
        uint64_t v11 = sqlite3_errmsg(v9);
        sub_1000C6AD0((uint64_t)v11, (uint64_t)v12);
      }
    }

    else if (v10)
    {
      sub_1000C6A78();
    }

    return 0LL;
  }

  return v7;
}

void sub_1000BCBE0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

sqlite3_int64 sub_1000BCBEC(uint64_t a1, uint64_t a2, sqlite3_int64 a3, unsigned __int8 *a4)
{
  sqlite3_int64 v22 = a3;
  sqlite3_int64 v7 = (sqlite3_stmt **)(a2 + 144);
  if (*(void *)(a2 + 144)
    || (sub_10004C38C( a1,  "INSERT INTO external_configs (external_config_kind, external_config_def, sampling_id) VALUES (?1, ?2, ?3);",
          0,
          (sqlite3_stmt **)&v24),
        uint64_t v8 = (sqlite3_stmt *)v24.__r_.__value_.__r.__words[0],
        v24.__r_.__value_.__r.__words[0] = 0LL,
        sub_10004C6D4(v7, v8),
        sub_10004C6D4((sqlite3_stmt **)&v24, 0LL),
        *v7))
  {
    memset(&v24, 170, sizeof(v24));
    __int128 v9 = sub_100003F94(a4, "kind");
    sub_1000218CC((uint64_t)v9, &v24);
    memset(__p, 170, sizeof(__p));
    sub_100006200((uint64_t)a4, -1, 0x20u, 0LL, 0, __p);
    BOOL v20 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
    sub_100040E10(&v20, v7);
    uint64_t v19 = 0LL;
    sub_10004C11C(a1, v7, 1, (uint64_t)&v24, &v19);
    sub_10004C11C(a1, v7, 2, (uint64_t)__p, &v19);
    if (a3) {
      sub_10004C1A4(a1, v7, 3, &v22, &v19);
    }
    else {
      sub_10004C248(a1, v7, 3, &v19);
    }
    int v10 = sub_10004C0B4(a1, v7, &v19);
    uint64_t v11 = *(sqlite3 **)(a1 + 32);
    if (v10 == 101)
    {
      sqlite3_int64 insert_rowid = sqlite3_last_insert_rowid(*(sqlite3 **)(a1 + 32));
    }

    else
    {
      BOOL v13 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (v11)
      {
        if (v13)
        {
          int v14 = sqlite3_errmsg(v11);
          sub_1000C6BE8((uint64_t)v14, (uint64_t)v23);
        }
      }

      else if (v13)
      {
        sub_1000C6B90();
      }

      sqlite3_int64 insert_rowid = 0LL;
    }

    sub_100040E1C(&v20);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
  }

  else
  {
    uint64_t v15 = *(sqlite3 **)(a1 + 32);
    BOOL v16 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v15)
    {
      if (v16)
      {
        uint64_t v17 = sqlite3_errmsg(v15);
        sub_1000C6B5C((uint64_t)v17, (uint64_t)&v24);
      }
    }

    else if (v16)
    {
      sub_1000C6B04();
    }

    return 0LL;
  }

  return insert_rowid;
}

void sub_1000BCE64(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

BOOL sub_1000BCE70(uint64_t a1, sqlite3_int64 *a2, sqlite3_int64 a3)
{
  sqlite3_int64 v18 = a3;
  uint64_t v5 = (sqlite3_stmt **)(a2 + 11);
  if (a2[11]
    || (sub_10004C38C(a1, "INSERT OR IGNORE INTO config_transforms (config_id, transform_id) VALUES (?1, ?2)", 0, v19),
        __int128 v6 = v19[0],
        v19[0] = 0LL,
        sub_10004C6D4(v5, v6),
        sub_10004C6D4(v19, 0LL),
        *v5))
  {
    uint64_t v17 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
    sub_100040E10(&v17, v5);
    uint64_t v16 = 0LL;
    sub_10004C1A4(a1, v5, 1, a2, &v16);
    sub_10004C1A4(a1, v5, 2, &v18, &v16);
    int v7 = sub_10004C0B4(a1, v5, &v16);
    BOOL v8 = v7 == 101;
    if (v7 != 101)
    {
      __int128 v9 = *(sqlite3 **)(a1 + 32);
      BOOL v10 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (v9)
      {
        if (v10)
        {
          uint64_t v11 = sqlite3_errmsg(v9);
          sub_1000C6D00((uint64_t)v11, (uint64_t)v19);
        }
      }

      else if (v10)
      {
        sub_1000C6CA8();
      }
    }

    sub_100040E1C(&v17);
  }

  else
  {
    BOOL v13 = *(sqlite3 **)(a1 + 32);
    BOOL v14 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v13)
    {
      if (v14)
      {
        uint64_t v15 = sqlite3_errmsg(v13);
        sub_1000C6C74((uint64_t)v15, (uint64_t)v19);
      }
    }

    else if (v14)
    {
      sub_1000C6C1C();
    }

    return 0LL;
  }

  return v8;
}

void sub_1000BD030(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

BOOL sub_1000BD03C(uint64_t a1, sqlite3_int64 *a2, sqlite3_int64 a3)
{
  sqlite3_int64 v18 = a3;
  uint64_t v5 = (sqlite3_stmt **)(a2 + 13);
  if (a2[13]
    || (sub_10004C38C(a1, "INSERT OR IGNORE INTO config_eventdefs (config_id, eventdef_id) VALUES (?1, ?2)", 0, v19),
        __int128 v6 = v19[0],
        v19[0] = 0LL,
        sub_10004C6D4(v5, v6),
        sub_10004C6D4(v19, 0LL),
        *v5))
  {
    uint64_t v17 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
    sub_100040E10(&v17, v5);
    uint64_t v16 = 0LL;
    sub_10004C1A4(a1, v5, 1, a2, &v16);
    sub_10004C1A4(a1, v5, 2, &v18, &v16);
    int v7 = sub_10004C0B4(a1, v5, &v16);
    BOOL v8 = v7 == 101;
    if (v7 != 101)
    {
      __int128 v9 = *(sqlite3 **)(a1 + 32);
      BOOL v10 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (v9)
      {
        if (v10)
        {
          uint64_t v11 = sqlite3_errmsg(v9);
          sub_1000C6E18((uint64_t)v11, (uint64_t)v19);
        }
      }

      else if (v10)
      {
        sub_1000C6DC0();
      }
    }

    sub_100040E1C(&v17);
  }

  else
  {
    BOOL v13 = *(sqlite3 **)(a1 + 32);
    BOOL v14 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v13)
    {
      if (v14)
      {
        uint64_t v15 = sqlite3_errmsg(v13);
        sub_1000C6D8C((uint64_t)v15, (uint64_t)v19);
      }
    }

    else if (v14)
    {
      sub_1000C6D34();
    }

    return 0LL;
  }

  return v8;
}

void sub_1000BD1FC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

BOOL sub_1000BD208(uint64_t a1, sqlite3_int64 *a2, sqlite3_int64 a3)
{
  sqlite3_int64 v18 = a3;
  uint64_t v5 = (sqlite3_stmt **)(a2 + 15);
  if (a2[15]
    || (sub_10004C38C( a1,  "INSERT OR IGNORE INTO config_modify_eventdefs (config_id, modify_eventdef_id) VALUES (?1, ?2);",
          0,
          v19),
        __int128 v6 = v19[0],
        v19[0] = 0LL,
        sub_10004C6D4(v5, v6),
        sub_10004C6D4(v19, 0LL),
        *v5))
  {
    uint64_t v17 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
    sub_100040E10(&v17, v5);
    uint64_t v16 = 0LL;
    sub_10004C1A4(a1, v5, 1, a2, &v16);
    sub_10004C1A4(a1, v5, 2, &v18, &v16);
    int v7 = sub_10004C0B4(a1, v5, &v16);
    BOOL v8 = v7 == 101;
    if (v7 != 101)
    {
      __int128 v9 = *(sqlite3 **)(a1 + 32);
      BOOL v10 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (v9)
      {
        if (v10)
        {
          uint64_t v11 = sqlite3_errmsg(v9);
          sub_1000C6F30((uint64_t)v11, (uint64_t)v19);
        }
      }

      else if (v10)
      {
        sub_1000C6ED8();
      }
    }

    sub_100040E1C(&v17);
  }

  else
  {
    BOOL v13 = *(sqlite3 **)(a1 + 32);
    BOOL v14 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v13)
    {
      if (v14)
      {
        uint64_t v15 = sqlite3_errmsg(v13);
        sub_1000C6EA4((uint64_t)v15, (uint64_t)v19);
      }
    }

    else if (v14)
    {
      sub_1000C6E4C();
    }

    return 0LL;
  }

  return v8;
}

void sub_1000BD3C8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

BOOL sub_1000BD3D4(uint64_t a1, uint64_t a2, sqlite3_int64 a3, sqlite3_int64 a4)
{
  sqlite3_int64 v18 = a4;
  sqlite3_int64 v19 = a3;
  uint64_t v5 = (sqlite3_stmt **)(a2 + 136);
  if (*(void *)(a2 + 136)
    || (sub_10004C38C(a1, "INSERT OR IGNORE INTO transform_events (event_id, transform_id) VALUES (?1, ?2)", 0, v20),
        __int128 v6 = v20[0],
        v20[0] = 0LL,
        sub_10004C6D4(v5, v6),
        sub_10004C6D4(v20, 0LL),
        *v5))
  {
    uint64_t v17 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
    sub_100040E10(&v17, v5);
    uint64_t v16 = 0LL;
    sub_10004C1A4(a1, v5, 1, &v19, &v16);
    sub_10004C1A4(a1, v5, 2, &v18, &v16);
    int v7 = sub_10004C0B4(a1, v5, &v16);
    BOOL v8 = v7 == 101;
    if (v7 != 101)
    {
      __int128 v9 = *(sqlite3 **)(a1 + 32);
      BOOL v10 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (v9)
      {
        if (v10)
        {
          uint64_t v11 = sqlite3_errmsg(v9);
          sub_1000C7048((uint64_t)v11, (uint64_t)v20);
        }
      }

      else if (v10)
      {
        sub_1000C6FF0();
      }
    }

    sub_100040E1C(&v17);
  }

  else
  {
    BOOL v13 = *(sqlite3 **)(a1 + 32);
    BOOL v14 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v13)
    {
      if (v14)
      {
        uint64_t v15 = sqlite3_errmsg(v13);
        sub_1000C6FBC((uint64_t)v15, (uint64_t)v20);
      }
    }

    else if (v14)
    {
      sub_1000C6F64();
    }

    return 0LL;
  }

  return v8;
}

void sub_1000BD590(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

BOOL sub_1000BD59C(uint64_t a1, sqlite3_int64 *a2, sqlite3_int64 a3)
{
  sqlite3_int64 v18 = a3;
  uint64_t v5 = (sqlite3_stmt **)(a2 + 20);
  if (a2[20]
    || (sub_10004C38C( a1,  "INSERT OR IGNORE INTO config_external_configs (config_id, external_config_id) VALUES (?1, ?2)",  0,  v19),  __int128 v6 = v19[0],  v19[0] = 0LL,  sub_10004C6D4(v5, v6),  sub_10004C6D4(v19, 0LL),  *v5))
  {
    uint64_t v17 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
    sub_100040E10(&v17, v5);
    uint64_t v16 = 0LL;
    sub_10004C1A4(a1, v5, 1, a2, &v16);
    sub_10004C1A4(a1, v5, 2, &v18, &v16);
    int v7 = sub_10004C0B4(a1, v5, &v16);
    BOOL v8 = v7 == 101;
    if (v7 != 101)
    {
      __int128 v9 = *(sqlite3 **)(a1 + 32);
      BOOL v10 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (v9)
      {
        if (v10)
        {
          uint64_t v11 = sqlite3_errmsg(v9);
          sub_1000C7160((uint64_t)v11, (uint64_t)v19);
        }
      }

      else if (v10)
      {
        sub_1000C7108();
      }
    }

    sub_100040E1C(&v17);
  }

  else
  {
    BOOL v13 = *(sqlite3 **)(a1 + 32);
    BOOL v14 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v13)
    {
      if (v14)
      {
        uint64_t v15 = sqlite3_errmsg(v13);
        sub_1000C70D4((uint64_t)v15, (uint64_t)v19);
      }
    }

    else if (v14)
    {
      sub_1000C707C();
    }

    return 0LL;
  }

  return v8;
}

void sub_1000BD75C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

BOOL sub_1000BD768(uint64_t a1, uint64_t a2, _BYTE *a3, sqlite3_int64 a4)
{
  if (*a3 != 2) {
    return 0LL;
  }
  unint64_t v28 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  v27[0] = v8;
  v27[1] = v8;
  __int128 v9 = (unsigned __int8 **)sub_100008B44(v27, (uint64_t)a3);
  sub_100045378(v9);
  unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  v25[0] = v10;
  v25[1] = v10;
  sub_100008B44(v25, (uint64_t)a3);
  sub_100008AC8((unsigned __int8 **)v25);
  while (1)
  {
    BOOL v11 = sub_1000087E8((unsigned __int8 **)v27, (unsigned __int8 **)v25);
    if (v11) {
      break;
    }
    int v12 = sub_100008924((unsigned __int8 **)v27);
    uint64_t v13 = (uint64_t)v12;
    if (*v12 == 1)
    {
      unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&__int128 v14 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v14 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
      v23[0] = v14;
      v23[1] = v14;
      sub_100055F38((uint64_t)v12, "event", (uint64_t)v23);
      unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&__int128 v15 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v15 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)std::string __p = v15;
      __int128 v21 = v15;
      sub_100008B44(__p, v13);
      sub_100008AC8((unsigned __int8 **)__p);
      if (!sub_1000087E8((unsigned __int8 **)v23, (unsigned __int8 **)__p)
        && *sub_100008924((unsigned __int8 **)v23) == 3)
      {
        uint64_t v16 = sub_100008924((unsigned __int8 **)v23);
        sub_1000218CC((uint64_t)v16, (std::string *)__p);
        sqlite3_int64 v17 = sub_1000BC864(a1, a2, (uint64_t)__p);
        BOOL v18 = !v17 || !sub_1000BD3D4(a1, a2, v17, a4);
        if (SBYTE7(v21) < 0) {
          operator delete(__p[0]);
        }
        if (v18) {
          break;
        }
      }
    }

    sub_100018704((unsigned __int8 **)v27);
  }

  return v11;
}

void sub_1000BD928(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

uint64_t sub_1000BD934(uint64_t a1, sqlite3_int64 *a2, unsigned __int8 *a3)
{
  if (*a3 == 1)
  {
    unint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
    sqlite3_int64 v19 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    sub_1000BDB04(a3, &v18);
    sqlite3_int64 v6 = sub_1000BACF0(a1, (uint64_t)a2, (unsigned __int8 *)&v18);
    sqlite3_int64 v7 = sub_1000BB2B8(a1, (uint64_t)a2, v6, (uint64_t)a3);
    if (v7)
    {
      sqlite3_int64 v8 = v7;
      if (sub_1000BCE70(a1, a2, v7))
      {
        unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&__int128 v9 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v9 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
        v16[0] = v9;
        v16[1] = v9;
        sub_1000184F4((uint64_t)a3, "inputs", (uint64_t)v16);
        unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&__int128 v10 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v10 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
        v14[0] = v10;
        v14[1] = v10;
        sub_1000211B0(v14, (uint64_t)a3);
        sub_1000211FC((unsigned __int8 **)v14);
        if (sub_10001855C((unsigned __int8 **)v16, (unsigned __int8 **)v14))
        {
          if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR)) {
            sub_1000C7194();
          }
          goto LABEL_11;
        }

        int v12 = sub_100018150((unsigned __int8 **)v16);
        if (sub_1000BD768(a1, (uint64_t)a2, v12, v8))
        {
LABEL_11:
          uint64_t v11 = 1LL;
LABEL_13:
          sub_1000041AC((uint64_t)&v18);
          sub_10000425C(&v19, v18);
          return v11;
        }
      }
    }

    uint64_t v11 = 0LL;
    goto LABEL_13;
  }

  if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR)) {
    sub_1000C71EC();
  }
  return 0LL;
}

void sub_1000BDAF8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

uint64_t sub_1000BDB04@<X0>(unsigned __int8 *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0LL;
  *(_BYTE *)a2 = 0;
  sub_1000041AC((uint64_t)a2);
  sub_1000041AC((uint64_t)a2);
  *(void *)&v17[32] = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)unint64_t v17 = v4;
  *(_OWORD *)&v17[16] = v4;
  sub_1000184F4((uint64_t)a1, "enableIf", (uint64_t)v17);
  unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  v15[0] = v5;
  v15[1] = v5;
  sub_1000211B0(v15, (uint64_t)a1);
  sub_1000211FC((unsigned __int8 **)v15);
  uint64_t result = sub_10001855C((unsigned __int8 **)v17, (unsigned __int8 **)v15);
  if ((result & 1) == 0)
  {
    sqlite3_int64 v7 = sub_100018150((unsigned __int8 **)v17);
    v13[0] = *v7;
    __int128 v14 = (uint64_t *)*((void *)v7 + 1);
    sub_1000041AC((uint64_t)v7);
    *sqlite3_int64 v7 = 0;
    *((void *)v7 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0LL;
    sub_1000041AC((uint64_t)v13);
    sub_1000041AC((uint64_t)v13);
    unsigned __int8 v8 = *(_BYTE *)a2;
    *(_BYTE *)a2 = v13[0];
    v13[0] = v8;
    __int128 v9 = (uint64_t *)a2[1];
    a2[1] = v14;
    __int128 v14 = v9;
    sub_1000041AC((uint64_t)a2);
    sub_1000041AC((uint64_t)v13);
    sub_10000425C(&v14, v13[0]);
    uint64_t v10 = *(void *)v17;
    __int128 v11 = *(_OWORD *)&v17[8];
    __int128 v12 = *(_OWORD *)&v17[24];
    return sub_10001D610(a1, (uint64_t)&v10, (uint64_t)v15);
  }

  return result;
}

void sub_1000BDC78(_Unwind_Exception *a1)
{
}

BOOL sub_1000BDC94(uint64_t a1, sqlite3_int64 *a2, _BYTE *a3)
{
  if (*a3 == 2)
  {
    sqlite3_int64 v6 = (sqlite3_stmt **)(a2 + 12);
    if (a2[12]
      || (sub_10004C38C( a1,  "DELETE FROM config_transforms WHERE config_id=?1 AND transform_id IN (SELECT transform_id FROM transforms WH ERE transform_uuid=?2)",  0,  (sqlite3_stmt **)v41),  sqlite3_int64 v7 = *(sqlite3_stmt **)&v41[0],  *(void *)&v41[0] = 0LL,  sub_10004C6D4(v6, v7),  sub_10004C6D4((sqlite3_stmt **)v41, 0LL),  *v6))
    {
      unint64_t v42 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&__int128 v8 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v8 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
      v41[0] = v8;
      v41[1] = v8;
      __int128 v9 = (unsigned __int8 **)sub_1000211B0(v41, (uint64_t)a3);
      sub_100021128(v9);
      unint64_t v36 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&__int128 v10 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v10 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
      v35[0] = v10;
      v35[1] = v10;
      sub_1000211B0(v35, (uint64_t)a3);
      sub_1000211FC((unsigned __int8 **)v35);
      while (1)
      {
        BOOL v11 = sub_10001855C((unsigned __int8 **)v41, (unsigned __int8 **)v35);
        if (v11) {
          return v11;
        }
        __int128 v12 = sub_100018150((unsigned __int8 **)v41);
        if (*v12 != 3)
        {
          if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR)) {
            sub_1000C72D0();
          }
          return v11;
        }

        sub_1000218CC((uint64_t)v12, &__p);
        std::string::size_type v33 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
        sub_100040E10(&v33, v6);
        uint64_t v32 = 0LL;
        sub_10004C1A4(a1, v6, 1, a2, &v32);
        sub_10004C11C(a1, v6, 2, (uint64_t)&__p, &v32);
        int v13 = sub_10004C0B4(a1, v6, &v32);
        __int128 v14 = *(sqlite3 **)(a1 + 32);
        if (v13 == 101)
        {
          int v15 = sqlite3_changes(*(sqlite3 **)(a1 + 32));
          if (v15 != 1)
          {
            unint64_t v16 = (os_log_s *)qword_100131930;
            if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_INFO))
            {
              p_p = &__p;
              if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)std::string buf = 136315394;
              int v38 = p_p;
              __int16 v39 = 1024;
              LODWORD(v40) = v15;
              _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "[Config Store] WARNING: config tried to remove transform (uuid='%s') but %d rows were updated; continue",
                buf,
                0x12u);
            }
          }
        }

        else
        {
          uint64_t v18 = qword_100131930;
          BOOL v19 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
          if (v14)
          {
            if (!v19) {
              goto LABEL_19;
            }
            int size = (char)__p.__r_.__value_.__s.__size_;
            std::string::size_type v31 = __p.__r_.__value_.__r.__words[0];
            __int128 v21 = sqlite3_errmsg(v14);
            *(_DWORD *)std::string buf = 136446466;
            unint64_t v22 = &__p;
            if (size < 0) {
              unint64_t v22 = (std::string *)v31;
            }
            int v38 = v22;
            __int16 v39 = 2080;
            uint64_t v40 = v21;
            uint64_t v23 = (os_log_s *)v18;
            unint64_t v24 = "[Config Store] ERROR: Failed to remove transform (uuid='%{public}s'); %s";
            uint32_t v25 = 22;
          }

          else
          {
            if (!v19) {
              goto LABEL_19;
            }
            unint64_t v26 = &__p;
            if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              unint64_t v26 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)std::string buf = 136446210;
            int v38 = v26;
            uint64_t v23 = (os_log_s *)v18;
            unint64_t v24 = "[Config Store] ERROR: Failed to remove transform (uuid='%{public}s')[null database]";
            uint32_t v25 = 12;
          }

          _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, v24, buf, v25);
        }

void sub_1000BE074(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_1000BE084(uint64_t a1, sqlite3_int64 *a2, _BYTE *a3)
{
  if (*a3 == 1)
  {
    sqlite3_int64 v5 = sub_1000BB934(a1, (uint64_t)a2, (uint64_t)a3);
    if (v5) {
      return sub_1000BD03C(a1, a2, v5);
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR))
  {
    sub_1000C7380();
  }

  return 0LL;
}

BOOL sub_1000BE100(uint64_t a1, sqlite3_int64 *a2, _BYTE *a3)
{
  if (*a3 == 2)
  {
    sqlite3_int64 v6 = (sqlite3_stmt **)(a2 + 14);
    if (a2[14]
      || (sub_10004C38C( a1,  "DELETE FROM config_eventdefs WHERE config_id=?1 AND eventdef_id IN (SELECT eventdef_id FROM eventdefs WHERE event_uuid=?2)",  0,  (sqlite3_stmt **)v41),  sqlite3_int64 v7 = *(sqlite3_stmt **)&v41[0],  *(void *)&v41[0] = 0LL,  sub_10004C6D4(v6, v7),  sub_10004C6D4((sqlite3_stmt **)v41, 0LL),  *v6))
    {
      unint64_t v42 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&__int128 v8 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v8 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
      v41[0] = v8;
      v41[1] = v8;
      __int128 v9 = (unsigned __int8 **)sub_1000211B0(v41, (uint64_t)a3);
      sub_100021128(v9);
      unint64_t v36 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&__int128 v10 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v10 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
      v35[0] = v10;
      v35[1] = v10;
      sub_1000211B0(v35, (uint64_t)a3);
      sub_1000211FC((unsigned __int8 **)v35);
      while (1)
      {
        BOOL v11 = sub_10001855C((unsigned __int8 **)v41, (unsigned __int8 **)v35);
        if (v11) {
          return v11;
        }
        __int128 v12 = sub_100018150((unsigned __int8 **)v41);
        if (*v12 != 3)
        {
          if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR)) {
            sub_1000C7464();
          }
          return v11;
        }

        sub_1000218CC((uint64_t)v12, &__p);
        std::string::size_type v33 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
        sub_100040E10(&v33, v6);
        uint64_t v32 = 0LL;
        sub_10004C1A4(a1, v6, 1, a2, &v32);
        sub_10004C11C(a1, v6, 2, (uint64_t)&__p, &v32);
        int v13 = sub_10004C0B4(a1, v6, &v32);
        __int128 v14 = *(sqlite3 **)(a1 + 32);
        if (v13 == 101)
        {
          int v15 = sqlite3_changes(*(sqlite3 **)(a1 + 32));
          if (v15 != 1)
          {
            unint64_t v16 = (os_log_s *)qword_100131930;
            if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_INFO))
            {
              p_p = &__p;
              if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)std::string buf = 136315394;
              int v38 = p_p;
              __int16 v39 = 1024;
              LODWORD(v40) = v15;
              _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "[Config Store] WARNING: config tried to remove eventdef (uuid='%s') but %d rows were updated; continue",
                buf,
                0x12u);
            }
          }
        }

        else
        {
          uint64_t v18 = qword_100131930;
          BOOL v19 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
          if (v14)
          {
            if (!v19) {
              goto LABEL_19;
            }
            int size = (char)__p.__r_.__value_.__s.__size_;
            std::string::size_type v31 = __p.__r_.__value_.__r.__words[0];
            __int128 v21 = sqlite3_errmsg(v14);
            *(_DWORD *)std::string buf = 136446466;
            unint64_t v22 = &__p;
            if (size < 0) {
              unint64_t v22 = (std::string *)v31;
            }
            int v38 = v22;
            __int16 v39 = 2080;
            uint64_t v40 = v21;
            uint64_t v23 = (os_log_s *)v18;
            unint64_t v24 = "[Config Store] ERROR: Failed to remove eventdef (uuid='%{public}s'); %s";
            uint32_t v25 = 22;
          }

          else
          {
            if (!v19) {
              goto LABEL_19;
            }
            unint64_t v26 = &__p;
            if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              unint64_t v26 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)std::string buf = 136446210;
            int v38 = v26;
            uint64_t v23 = (os_log_s *)v18;
            unint64_t v24 = "[Config Store] ERROR: Failed to remove eventdef (uuid='%{public}s')[null database]";
            uint32_t v25 = 12;
          }

          _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, v24, buf, v25);
        }

void sub_1000BE4E0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_1000BE4F0(uint64_t a1, sqlite3_int64 *a2, _BYTE *a3)
{
  if (*a3 == 1)
  {
    sqlite3_int64 v5 = sub_1000BC178(a1, (uint64_t)a2, (uint64_t)a3);
    if (v5) {
      return sub_1000BD208(a1, a2, v5);
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR))
  {
    sub_1000C7514();
  }

  return 0LL;
}

BOOL sub_1000BE56C(uint64_t a1, sqlite3_int64 *a2, _BYTE *a3)
{
  if (*a3 == 2)
  {
    sqlite3_int64 v6 = (sqlite3_stmt **)(a2 + 16);
    if (a2[16]
      || (sub_10004C38C( a1,  "DELETE FROM config_modify_eventdefs WHERE config_id=?1 AND modify_eventdef_id IN (SELECT modify_eventdef_id FROM modify_eventdefs WHERE modify_event_uuid=?2);",
            0,
            (sqlite3_stmt **)v41),
          sqlite3_int64 v7 = *(sqlite3_stmt **)&v41[0],
          *(void *)&v41[0] = 0LL,
          sub_10004C6D4(v6, v7),
          sub_10004C6D4((sqlite3_stmt **)v41, 0LL),
          *v6))
    {
      unint64_t v42 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&__int128 v8 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v8 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
      v41[0] = v8;
      v41[1] = v8;
      __int128 v9 = (unsigned __int8 **)sub_1000211B0(v41, (uint64_t)a3);
      sub_100021128(v9);
      unint64_t v36 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&__int128 v10 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v10 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
      v35[0] = v10;
      v35[1] = v10;
      sub_1000211B0(v35, (uint64_t)a3);
      sub_1000211FC((unsigned __int8 **)v35);
      while (1)
      {
        BOOL v11 = sub_10001855C((unsigned __int8 **)v41, (unsigned __int8 **)v35);
        if (v11) {
          return v11;
        }
        __int128 v12 = sub_100018150((unsigned __int8 **)v41);
        if (*v12 != 3)
        {
          if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR)) {
            sub_1000C75F8();
          }
          return v11;
        }

        sub_1000218CC((uint64_t)v12, &__p);
        std::string::size_type v33 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
        sub_100040E10(&v33, v6);
        uint64_t v32 = 0LL;
        sub_10004C1A4(a1, v6, 1, a2, &v32);
        sub_10004C11C(a1, v6, 2, (uint64_t)&__p, &v32);
        int v13 = sub_10004C0B4(a1, v6, &v32);
        __int128 v14 = *(sqlite3 **)(a1 + 32);
        if (v13 != 101) {
          break;
        }
        int v15 = sqlite3_changes(*(sqlite3 **)(a1 + 32));
        if (v15 != 1)
        {
          uint64_t v16 = qword_100131930;
          if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR))
          {
            p_p = &__p;
            if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)std::string buf = 136315394;
            int v38 = p_p;
            __int16 v39 = 1024;
            LODWORD(v40) = v15;
            uint64_t v18 = (os_log_s *)v16;
            BOOL v19 = "[Config Store] ERROR: config tried to remove modify eventdef (uuid='%s') but %d rows were updated; continue";
            uint32_t v20 = 18;
LABEL_26:
            _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, v19, buf, v20);
          }
        }

void sub_1000BE948(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_1000BE958(uint64_t a1, sqlite3_int64 *a2, _BYTE *a3)
{
  if (*a3 == 2)
  {
    sqlite3_int64 v6 = (sqlite3_stmt **)(a2 + 19);
    if (a2[19]
      || (sub_10004C38C( a1,  "DELETE FROM config_external_configs WHERE config_id=?1 AND external_config_id IN (SELECT external_config_id FROM external_configs WHERE external_config_kind=?2)",  0,  (sqlite3_stmt **)v41),  sqlite3_int64 v7 = *(sqlite3_stmt **)&v41[0],  *(void *)&v41[0] = 0LL,  sub_10004C6D4(v6, v7),  sub_10004C6D4((sqlite3_stmt **)v41, 0LL),  *v6))
    {
      unint64_t v42 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&__int128 v8 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v8 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
      v41[0] = v8;
      v41[1] = v8;
      __int128 v9 = (unsigned __int8 **)sub_1000211B0(v41, (uint64_t)a3);
      sub_100021128(v9);
      unint64_t v36 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&__int128 v10 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v10 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
      v35[0] = v10;
      v35[1] = v10;
      sub_1000211B0(v35, (uint64_t)a3);
      sub_1000211FC((unsigned __int8 **)v35);
      while (1)
      {
        BOOL v11 = sub_10001855C((unsigned __int8 **)v41, (unsigned __int8 **)v35);
        if (v11) {
          return v11;
        }
        __int128 v12 = sub_100018150((unsigned __int8 **)v41);
        if (*v12 != 3)
        {
          if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR)) {
            sub_1000C7734();
          }
          return v11;
        }

        sub_1000218CC((uint64_t)v12, &__p);
        std::string::size_type v33 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
        sub_100040E10(&v33, v6);
        uint64_t v32 = 0LL;
        sub_10004C1A4(a1, v6, 1, a2, &v32);
        sub_10004C11C(a1, v6, 2, (uint64_t)&__p, &v32);
        int v13 = sub_10004C0B4(a1, v6, &v32);
        __int128 v14 = *(sqlite3 **)(a1 + 32);
        if (v13 == 101)
        {
          int v15 = sqlite3_changes(*(sqlite3 **)(a1 + 32));
          if (v15 <= 0)
          {
            uint64_t v16 = (os_log_s *)qword_100131930;
            if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_INFO))
            {
              p_p = &__p;
              if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)std::string buf = 136315394;
              int v38 = p_p;
              __int16 v39 = 1024;
              LODWORD(v40) = v15;
              _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "[Config Store] WARNING: config tried to remove external config (kind='%s') but %d rows were updated; continue",
                buf,
                0x12u);
            }
          }
        }

        else
        {
          uint64_t v18 = qword_100131930;
          BOOL v19 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
          if (v14)
          {
            if (!v19) {
              goto LABEL_19;
            }
            int size = (char)__p.__r_.__value_.__s.__size_;
            std::string::size_type v31 = __p.__r_.__value_.__r.__words[0];
            uint64_t v21 = sqlite3_errmsg(v14);
            *(_DWORD *)std::string buf = 136446466;
            BOOL v22 = &__p;
            if (size < 0) {
              BOOL v22 = (std::string *)v31;
            }
            int v38 = v22;
            __int16 v39 = 2080;
            uint64_t v40 = v21;
            uint64_t v23 = (os_log_s *)v18;
            unint64_t v24 = "[Config Store] ERROR: Failed to remove external config (kind='%{public}s'); %s";
            uint32_t v25 = 22;
          }

          else
          {
            if (!v19) {
              goto LABEL_19;
            }
            unint64_t v26 = &__p;
            if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              unint64_t v26 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)std::string buf = 136446210;
            int v38 = v26;
            uint64_t v23 = (os_log_s *)v18;
            unint64_t v24 = "[Config Store] ERROR: Failed to remove external config (kind='%{public}s')[null database]";
            uint32_t v25 = 12;
          }

          _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, v24, buf, v25);
        }

void sub_1000BED38(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_1000BED48(uint64_t a1, sqlite3_int64 *a2, unsigned __int8 *a3)
{
  if (*a3 == 1)
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAAALL;
    BOOL v11 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    sub_1000BDB04(a3, &v10);
    sqlite3_int64 v6 = sub_1000BACF0(a1, (uint64_t)a2, (unsigned __int8 *)&v10);
    sqlite3_int64 v7 = sub_1000BCBEC(a1, (uint64_t)a2, v6, a3);
    if (v7) {
      BOOL v8 = sub_1000BD59C(a1, a2, v7);
    }
    else {
      BOOL v8 = 0LL;
    }
    sub_1000041AC((uint64_t)&v10);
    sub_10000425C(&v11, v10);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR)) {
      sub_1000C778C();
    }
    return 0LL;
  }

  return v8;
}

void sub_1000BEE5C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

BOOL sub_1000BEE68(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_100131930;
  if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v93 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "[Config Store] DATABASE INITIALIZATION: modifying for V1 schema",  v93,  2u);
  }

  int v3 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n CREATE TABLE configs\n (\n config_id INTEGER PRIMARY KEY ASC,\n config_uuid STRING UNIQUE,\n config_parent_uuid STRING,\n config_type STRING,\n config_header STRING,\n config_md5  BLOB,\n config_enabled INTEGER DEFAULT 0,\n config_last_enabled TEXT,\n config_last_disabled TEXT\n)\n ",  0LL,  0LL,  0LL);
  __int128 v4 = *(sqlite3 **)(a1 + 32);
  if (v3)
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v4)
    {
      if (!result) {
        return result;
      }
      sqlite3_int64 v6 = sqlite3_errmsg(v4);
      sub_1000C8818((uint64_t)v6, (uint64_t)v93);
    }

    else
    {
      if (!result) {
        return result;
      }
      sub_1000C87C0();
    }
  }

  else
  {
    int v7 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n CREATE TRIGGER update_activation_time AFTER UPDATE ON configs\n WHEN old.config_enabled=0 AND new.config_enabled=1\n BEGIN\n UPDATE configs SET config_last_enabled = datetime('now') WHERE config_id = new.config_id;\n"
           "         END\n"
           "    ",
           0LL,
           0LL,
           0LL);
    BOOL v8 = *(sqlite3 **)(a1 + 32);
    if (v7)
    {
      BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (v8)
      {
        if (!result) {
          return result;
        }
        __int128 v9 = sqlite3_errmsg(v8);
        sub_1000C878C((uint64_t)v9, (uint64_t)v93);
      }

      else
      {
        if (!result) {
          return result;
        }
        sub_1000C8734();
      }
    }

    else
    {
      int v10 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n CREATE TRIGGER update_deactivation_time AFTER UPDATE ON configs\n WHEN old.config_enabled=1 AND new.config_enabled=0\n BEGIN\n UPDATE configs SET config_last_disabled = datetime('now') WHERE config_id = new.config_id ;\n"
              "         END\n"
              "    ",
              0LL,
              0LL,
              0LL);
      BOOL v11 = *(sqlite3 **)(a1 + 32);
      if (v10)
      {
        BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
        if (v11)
        {
          if (!result) {
            return result;
          }
          __int128 v12 = sqlite3_errmsg(v11);
          sub_1000C8700((uint64_t)v12, (uint64_t)v93);
        }

        else
        {
          if (!result) {
            return result;
          }
          sub_1000C86A8();
        }
      }

      else
      {
        int v13 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n CREATE TABLE events\n (\n event_id INTEGER PRIMARY KEY ASC,\n event_name STRING UNIQUE ON CONFLICT IGNORE\n)\n ",  0LL,  0LL,  0LL);
        __int128 v14 = *(sqlite3 **)(a1 + 32);
        if (v13)
        {
          BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
          if (v14)
          {
            if (!result) {
              return result;
            }
            int v15 = sqlite3_errmsg(v14);
            sub_1000C8674((uint64_t)v15, (uint64_t)v93);
          }

          else
          {
            if (!result) {
              return result;
            }
            sub_1000C861C();
          }
        }

        else
        {
          int v16 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n CREATE TABLE eventdefs\n (\n eventdef_id INTEGER PRIMARY KEY ASC,\n event_uuid STRING UNIQUE,\n event_name STRING,\n event_type STRING,\n event_defType STRING,\n event_config STRING\n)\n ",  0LL,  0LL,  0LL);
          unint64_t v17 = *(sqlite3 **)(a1 + 32);
          if (v16)
          {
            BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
            if (v17)
            {
              if (!result) {
                return result;
              }
              uint64_t v18 = sqlite3_errmsg(v17);
              sub_1000C85E8((uint64_t)v18, (uint64_t)v93);
            }

            else
            {
              if (!result) {
                return result;
              }
              sub_1000C8590();
            }
          }

          else
          {
            int v19 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n CREATE TABLE transforms\n (\n transform_id INTEGER PRIMARY KEY ASC,\n transform_uuid STRING UNIQUE,\n transform_def  STRING,\n transform_enableIf STRING\n)\n ",  0LL,  0LL,  0LL);
            uint32_t v20 = *(sqlite3 **)(a1 + 32);
            if (v19)
            {
              BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
              if (v20)
              {
                if (!result) {
                  return result;
                }
                uint64_t v21 = sqlite3_errmsg(v20);
                sub_1000C855C((uint64_t)v21, (uint64_t)v93);
              }

              else
              {
                if (!result) {
                  return result;
                }
                sub_1000C8504();
              }
            }

            else
            {
              int v22 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n CREATE TABLE config_transforms\n (\n config_id INTEGER,\n transform_id INTEGER\n)\n ",  0LL,  0LL,  0LL);
              uint64_t v23 = *(sqlite3 **)(a1 + 32);
              if (v22)
              {
                BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
                if (v23)
                {
                  if (!result) {
                    return result;
                  }
                  unint64_t v24 = sqlite3_errmsg(v23);
                  sub_1000C84D0((uint64_t)v24, (uint64_t)v93);
                }

                else
                {
                  if (!result) {
                    return result;
                  }
                  sub_1000C8478();
                }
              }

              else
              {
                int v25 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n CREATE TABLE config_eventdefs\n (\n config_id INTEGER,\n eventdef_id INTEGER\n)\n ",  0LL,  0LL,  0LL);
                unint64_t v26 = *(sqlite3 **)(a1 + 32);
                if (v25)
                {
                  BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
                  if (v26)
                  {
                    if (!result) {
                      return result;
                    }
                    BOOL v27 = sqlite3_errmsg(v26);
                    sub_1000C8444((uint64_t)v27, (uint64_t)v93);
                  }

                  else
                  {
                    if (!result) {
                      return result;
                    }
                    sub_1000C83EC();
                  }
                }

                else
                {
                  int v28 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n CREATE TABLE transform_events\n (\n event_id INTEGER,\n transform_id INTEGER,\n CONSTRAINT maps_uniquely UNIQUE (event_id, transform_id)\n)\n ",  0LL,  0LL,  0LL);
                  BOOL v29 = *(sqlite3 **)(a1 + 32);
                  if (v28)
                  {
                    BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
                    if (v29)
                    {
                      if (!result) {
                        return result;
                      }
                      uint64_t v30 = sqlite3_errmsg(v29);
                      sub_1000C83B8((uint64_t)v30, (uint64_t)v93);
                    }

                    else
                    {
                      if (!result) {
                        return result;
                      }
                      sub_1000C8360();
                    }
                  }

                  else
                  {
                    int v31 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n CREATE TABLE disabled_transforms\n (\n transform_id INTEGER\n)\n ",  0LL,  0LL,  0LL);
                    uint64_t v32 = *(sqlite3 **)(a1 + 32);
                    if (v31)
                    {
                      BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
                      if (v32)
                      {
                        if (!result) {
                          return result;
                        }
                        std::string::size_type v33 = sqlite3_errmsg(v32);
                        sub_1000C832C((uint64_t)v33, (uint64_t)v93);
                      }

                      else
                      {
                        if (!result) {
                          return result;
                        }
                        sub_1000C82D4();
                      }
                    }

                    else
                    {
                      int v34 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n CREATE TABLE external_configs\n (\n external_config_id INTEGER PRIMARY KEY ASC,\n external_config_kind STRING,\n external_config_def  STRING,\n external_config_enableIf STRING\n)\n ",  0LL,  0LL,  0LL);
                      __int16 v35 = *(sqlite3 **)(a1 + 32);
                      if (v34)
                      {
                        BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
                        if (v35)
                        {
                          if (!result) {
                            return result;
                          }
                          unint64_t v36 = sqlite3_errmsg(v35);
                          sub_1000C82A0((uint64_t)v36, (uint64_t)v93);
                        }

                        else
                        {
                          if (!result) {
                            return result;
                          }
                          sub_1000C8248();
                        }
                      }

                      else
                      {
                        int v37 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n CREATE TABLE config_external_configs\n (\n config_id INTEGER,\n external_config_id INTEGER\n)\n ",  0LL,  0LL,  0LL);
                        int v38 = *(sqlite3 **)(a1 + 32);
                        if (v37)
                        {
                          BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
                          if (v38)
                          {
                            if (!result) {
                              return result;
                            }
                            __int16 v39 = sqlite3_errmsg(v38);
                            sub_1000C8214((uint64_t)v39, (uint64_t)v93);
                          }

                          else
                          {
                            if (!result) {
                              return result;
                            }
                            sub_1000C81BC();
                          }
                        }

                        else
                        {
                          int v40 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n CREATE TABLE disabled_external_configs\n (\n external_config_id INTEGER\n)\n ",  0LL,  0LL,  0LL);
                          std::string v41 = *(sqlite3 **)(a1 + 32);
                          if (v40)
                          {
                            BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
                            if (v41)
                            {
                              if (!result) {
                                return result;
                              }
                              unint64_t v42 = sqlite3_errmsg(v41);
                              sub_1000C8188((uint64_t)v42, (uint64_t)v93);
                            }

                            else
                            {
                              if (!result) {
                                return result;
                              }
                              sub_1000C8130();
                            }
                          }

                          else
                          {
                            int v43 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n CREATE VIEW eligible_transform_view AS\n SELECT transforms.transform_id, transform_uuid, transform_def, transform_ enableIf\n FROM transforms\n INNER JOIN config_transforms\n ON config_transforms.transform_id=transforms.transform_id\n WHERE config_transforms.config_id IN (SELECT config_id FROM configs WHERE config_enabled=1 LIMIT 1)\n ",  0LL,  0LL,  0LL);
                            char v44 = *(sqlite3 **)(a1 + 32);
                            if (v43)
                            {
                              BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
                              if (v44)
                              {
                                if (!result) {
                                  return result;
                                }
                                std::string v45 = sqlite3_errmsg(v44);
                                sub_1000C80FC((uint64_t)v45, (uint64_t)v93);
                              }

                              else
                              {
                                if (!result) {
                                  return result;
                                }
                                sub_1000C80A4();
                              }
                            }

                            else
                            {
                              int v46 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n CREATE VIEW eligible_eventdef_view AS\n SELECT eventdefs.eventdef_id, event_uuid, event_name, event_type, event _defType, event_config\n FROM eventdefs\n INNER JOIN config_eventdefs\n ON config_eventdefs.eventdef_id=eventdefs.eventdef_id\n WHERE config_eventdefs.config_id IN (SELECT config_id FROM configs WHER E config_enabled=1 LIMIT 1)\n ",  0LL,  0LL,  0LL);
                              char v47 = *(sqlite3 **)(a1 + 32);
                              if (v46)
                              {
                                BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
                                if (v47)
                                {
                                  if (!result) {
                                    return result;
                                  }
                                  __int16 v48 = sqlite3_errmsg(v47);
                                  sub_1000C8070((uint64_t)v48, (uint64_t)v93);
                                }

                                else
                                {
                                  if (!result) {
                                    return result;
                                  }
                                  sub_1000C8018();
                                }
                              }

                              else
                              {
                                int v49 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n CREATE VIEW eligible_external_configs_view AS\n SELECT config_external_configs.external_config_id, external_config_ki nd, external_config_def, external_config_enableIf\n FROM external_configs\n INNER JOIN config_external_configs\n ON config_external_configs.external_config_id=external_configs.e xternal_config_id\n WHERE config_external_configs.config_id IN (SELECT config_id FROM con figs WHERE config_enabled=1 LIMIT 1)\n ",  0LL,  0LL,  0LL);
                                char v50 = *(sqlite3 **)(a1 + 32);
                                if (v49)
                                {
                                  BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
                                  if (v50)
                                  {
                                    if (!result) {
                                      return result;
                                    }
                                    BOOL v51 = sqlite3_errmsg(v50);
                                    sub_1000C7FE4((uint64_t)v51, (uint64_t)v93);
                                  }

                                  else
                                  {
                                    if (!result) {
                                      return result;
                                    }
                                    sub_1000C7F8C();
                                  }
                                }

                                else
                                {
                                  int v52 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n CREATE VIEW enabled_transform_view AS\n SELECT eligible_transform_view.transform_id AS transform_id, transf orm_uuid, transform_def\n FROM eligible_transform_view\n LEFT JOIN disabled_transforms\n ON eligible_transform_view.transform_id=disabled_transforms.tran sform_id\n WHERE disabled_transforms.transform_id IS NULL\n ",  0LL,  0LL,  0LL);
                                  char v53 = *(sqlite3 **)(a1 + 32);
                                  if (v52)
                                  {
                                    BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
                                    if (v53)
                                    {
                                      if (!result) {
                                        return result;
                                      }
                                      BOOL v54 = sqlite3_errmsg(v53);
                                      sub_1000C7F58((uint64_t)v54, (uint64_t)v93);
                                    }

                                    else
                                    {
                                      if (!result) {
                                        return result;
                                      }
                                      sub_1000C7F00();
                                    }
                                  }

                                  else
                                  {
                                    int v55 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n CREATE VIEW disabled_transform_view AS\n SELECT eligible_transform_view.transform_id AS transform_id, tran sform_uuid, transform_def\n FROM eligible_transform_view\n LEFT JOIN disabled_transforms\n ON eligible_transform_view.transform_id=disabled_transforms.tr ansform_id\n WHERE disabled_transforms.transform_id IS NOT NULL\n ",  0LL,  0LL,  0LL);
                                    char v56 = *(sqlite3 **)(a1 + 32);
                                    if (v55)
                                    {
                                      BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
                                      if (v56)
                                      {
                                        if (!result) {
                                          return result;
                                        }
                                        BOOL v57 = sqlite3_errmsg(v56);
                                        sub_1000C7ECC((uint64_t)v57, (uint64_t)v93);
                                      }

                                      else
                                      {
                                        if (!result) {
                                          return result;
                                        }
                                        sub_1000C7E74();
                                      }
                                    }

                                    else
                                    {
                                      int v58 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n CREATE VIEW enabled_tranforms_by_event_view AS\n SELECT transform_events.event_id, event_name, transform_uuid, t ransform_def\n FROM enabled_transform_view\n INNER JOIN transform_events\n ON transform_events.transform_id=enabled_transform_view.tran sform_id\n LEFT JOIN events\n ON transform_events.event_id=events.event_id\n ",  0LL,  0LL,  0LL);
                                      int64_t v59 = *(sqlite3 **)(a1 + 32);
                                      if (v58)
                                      {
                                        BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
                                        if (v59)
                                        {
                                          if (!result) {
                                            return result;
                                          }
                                          uint64_t v60 = sqlite3_errmsg(v59);
                                          sub_1000C7E40((uint64_t)v60, (uint64_t)v93);
                                        }

                                        else
                                        {
                                          if (!result) {
                                            return result;
                                          }
                                          sub_1000C7DE8();
                                        }
                                      }

                                      else
                                      {
                                        int v61 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n CREATE VIEW enabled_event_names_view AS\n SELECT DISTINCT event_name\n FROM enabled_tranforms_by_event_view\n ORDER BY event_name\n ",  0LL,  0LL,  0LL);
                                        std::string v62 = *(sqlite3 **)(a1 + 32);
                                        if (v61)
                                        {
                                          BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
                                          if (v62)
                                          {
                                            if (!result) {
                                              return result;
                                            }
                                            sqlite3_int64 v63 = sqlite3_errmsg(v62);
                                            sub_1000C7DB4((uint64_t)v63, (uint64_t)v93);
                                          }

                                          else
                                          {
                                            if (!result) {
                                              return result;
                                            }
                                            sub_1000C7D5C();
                                          }
                                        }

                                        else
                                        {
                                          int v64 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n CREATE VIEW enabled_external_configs_view AS\n SELECT external_config_kind, external_config_def\n FROM eligible_external_configs_view\n LEFT JOIN disabled_external_configs\n ON eligible_external_configs_view.external_config_id=dis abled_external_configs.external_config_id\n WHERE disabled_external_configs.external_config_id IS NULL\n ",  0LL,  0LL,  0LL);
                                          char v65 = *(sqlite3 **)(a1 + 32);
                                          if (v64)
                                          {
                                            BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
                                            if (v65)
                                            {
                                              if (!result) {
                                                return result;
                                              }
                                              uint64_t v66 = sqlite3_errmsg(v65);
                                              sub_1000C7D28((uint64_t)v66, (uint64_t)v93);
                                            }

                                            else
                                            {
                                              if (!result) {
                                                return result;
                                              }
                                              sub_1000C7CD0();
                                            }
                                          }

                                          else
                                          {
                                            int v67 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "CREATE INDEX index1 ON disabled_transforms(transform_id);",
                                                    0LL,
                                                    0LL,
                                                    0LL);
                                            char v68 = *(sqlite3 **)(a1 + 32);
                                            if (v67)
                                            {
                                              BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
                                              if (v68)
                                              {
                                                if (!result) {
                                                  return result;
                                                }
                                                int64_t v69 = sqlite3_errmsg(v68);
                                                sub_1000C7C9C((uint64_t)v69, (uint64_t)v93);
                                              }

                                              else
                                              {
                                                if (!result) {
                                                  return result;
                                                }
                                                sub_1000C7C44();
                                              }
                                            }

                                            else
                                            {
                                              int v70 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "CREATE INDEX index2 ON transform_events(transform_id);",
                                                      0LL,
                                                      0LL,
                                                      0LL);
                                              int64_t v71 = *(sqlite3 **)(a1 + 32);
                                              if (v70)
                                              {
                                                BOOL result = os_log_type_enabled( (os_log_t)qword_100131930,  OS_LOG_TYPE_ERROR);
                                                if (v71)
                                                {
                                                  if (!result) {
                                                    return result;
                                                  }
                                                  uint64_t v72 = sqlite3_errmsg(v71);
                                                  sub_1000C7C10((uint64_t)v72, (uint64_t)v93);
                                                }

                                                else
                                                {
                                                  if (!result) {
                                                    return result;
                                                  }
                                                  sub_1000C7BB8();
                                                }
                                              }

                                              else
                                              {
                                                int v73 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "CREATE INDEX index3 ON disabled_external_configs(external_config_id);",
                                                        0LL,
                                                        0LL,
                                                        0LL);
                                                v74 = *(sqlite3 **)(a1 + 32);
                                                if (v73)
                                                {
                                                  BOOL result = os_log_type_enabled( (os_log_t)qword_100131930,  OS_LOG_TYPE_ERROR);
                                                  if (v74)
                                                  {
                                                    if (!result) {
                                                      return result;
                                                    }
                                                    char v75 = sqlite3_errmsg(v74);
                                                    sub_1000C7B84((uint64_t)v75, (uint64_t)v93);
                                                  }

                                                  else
                                                  {
                                                    if (!result) {
                                                      return result;
                                                    }
                                                    sub_1000C7B2C();
                                                  }
                                                }

                                                else
                                                {
                                                  int v76 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "CREATE INDEX index4 ON transforms(transform_id);",
                                                          0LL,
                                                          0LL,
                                                          0LL);
                                                  BOOL v77 = *(sqlite3 **)(a1 + 32);
                                                  if (v76)
                                                  {
                                                    BOOL result = os_log_type_enabled( (os_log_t)qword_100131930,  OS_LOG_TYPE_ERROR);
                                                    if (v77)
                                                    {
                                                      if (!result) {
                                                        return result;
                                                      }
                                                      char v78 = sqlite3_errmsg(v77);
                                                      sub_1000C7AF8((uint64_t)v78, (uint64_t)v93);
                                                    }

                                                    else
                                                    {
                                                      if (!result) {
                                                        return result;
                                                      }
                                                      sub_1000C7AA0();
                                                    }
                                                  }

                                                  else
                                                  {
                                                    int v79 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "CREATE INDEX index5 ON config_transforms(transform_id);",
                                                            0LL,
                                                            0LL,
                                                            0LL);
                                                    unint64_t v80 = *(sqlite3 **)(a1 + 32);
                                                    if (v79)
                                                    {
                                                      BOOL result = os_log_type_enabled( (os_log_t)qword_100131930,  OS_LOG_TYPE_ERROR);
                                                      if (v80)
                                                      {
                                                        if (!result) {
                                                          return result;
                                                        }
                                                        char v81 = sqlite3_errmsg(v80);
                                                        sub_1000C7A6C((uint64_t)v81, (uint64_t)v93);
                                                      }

                                                      else
                                                      {
                                                        if (!result) {
                                                          return result;
                                                        }
                                                        sub_1000C7A14();
                                                      }
                                                    }

                                                    else
                                                    {
                                                      int v82 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "CREATE INDEX index6 ON transform_events(event_id);",
                                                              0LL,
                                                              0LL,
                                                              0LL);
                                                      int v83 = *(sqlite3 **)(a1 + 32);
                                                      if (v82)
                                                      {
                                                        BOOL result = os_log_type_enabled( (os_log_t)qword_100131930,  OS_LOG_TYPE_ERROR);
                                                        if (v83)
                                                        {
                                                          if (!result) {
                                                            return result;
                                                          }
                                                          char v84 = sqlite3_errmsg(v83);
                                                          sub_1000C79E0((uint64_t)v84, (uint64_t)v93);
                                                        }

                                                        else
                                                        {
                                                          if (!result) {
                                                            return result;
                                                          }
                                                          sub_1000C7988();
                                                        }
                                                      }

                                                      else
                                                      {
                                                        int v85 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "CREATE INDEX index7 ON events(event_id);",
                                                                0LL,
                                                                0LL,
                                                                0LL);
                                                        v86 = *(sqlite3 **)(a1 + 32);
                                                        if (v85)
                                                        {
                                                          BOOL result = os_log_type_enabled( (os_log_t)qword_100131930,  OS_LOG_TYPE_ERROR);
                                                          if (v86)
                                                          {
                                                            if (!result) {
                                                              return result;
                                                            }
                                                            v87 = sqlite3_errmsg(v86);
                                                            sub_1000C7954((uint64_t)v87, (uint64_t)v93);
                                                          }

                                                          else
                                                          {
                                                            if (!result) {
                                                              return result;
                                                            }
                                                            sub_1000C78FC();
                                                          }
                                                        }

                                                        else
                                                        {
                                                          int v88 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "CREATE INDEX index8 ON eventdefs(eventdef_id);",
                                                                  0LL,
                                                                  0LL,
                                                                  0LL);
                                                          uint64_t v89 = *(sqlite3 **)(a1 + 32);
                                                          if (v88)
                                                          {
                                                            BOOL result = os_log_type_enabled( (os_log_t)qword_100131930,  OS_LOG_TYPE_ERROR);
                                                            if (v89)
                                                            {
                                                              if (!result) {
                                                                return result;
                                                              }
                                                              v90 = sqlite3_errmsg(v89);
                                                              sub_1000C78C8((uint64_t)v90, (uint64_t)v93);
                                                            }

                                                            else
                                                            {
                                                              if (!result) {
                                                                return result;
                                                              }
                                                              sub_1000C7870();
                                                            }
                                                          }

                                                          else
                                                          {
                                                            if (!sqlite3_exec( *(sqlite3 **)(a1 + 32),  "CREATE INDEX index9 ON config_eventdefs(eventdef_id);",
                                                                    0LL,
                                                                    0LL,
                                                                    0LL))
                                                              return sub_10004C424(a1, 1);
                                                            uint64_t v91 = *(sqlite3 **)(a1 + 32);
                                                            BOOL result = os_log_type_enabled( (os_log_t)qword_100131930,  OS_LOG_TYPE_ERROR);
                                                            if (v91)
                                                            {
                                                              if (!result) {
                                                                return result;
                                                              }
                                                              v92 = sqlite3_errmsg(v91);
                                                              sub_1000C783C((uint64_t)v92, (uint64_t)v93);
                                                            }

                                                            else
                                                            {
                                                              if (!result) {
                                                                return result;
                                                              }
                                                              sub_1000C77E4();
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  return 0LL;
}

void sub_1000BFAD0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

BOOL sub_1000BFADC(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_100131930;
  if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v15 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "[Config Store] DATABASE INITIALIZATION: modifying for V2 schema",  v15,  2u);
  }

  int v3 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n         ALTER TABLE transforms ADD COLUMN transform_sampling DOUBLE DEFAULT 100.00\n    ",  0LL,  0LL,  0LL);
  __int128 v4 = *(sqlite3 **)(a1 + 32);
  if (v3)
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v4)
    {
      if (!result) {
        return result;
      }
      sqlite3_int64 v6 = sqlite3_errmsg(v4);
      sub_1000C88A4((uint64_t)v6, (uint64_t)v15);
    }

    else
    {
      if (!result) {
        return result;
      }
      sub_1000C884C();
    }
  }

  else
  {
    int v7 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n DROP VIEW eligible_transform_view; CREATE VIEW eligible_transform_view AS\n"
           "           SELECT transforms.transform_id, transform_uuid, transform_def, transform_enableIf, transform_sampl"
           "ing\n"
           "           FROM transforms\n"
           "           INNER JOIN config_transforms\n"
           "                ON config_transforms.transform_id=transforms.transform_id\n"
           "           WHERE config_transforms.config_id IN (SELECT config_id FROM configs WHERE config_enabled=1 LIMIT 1)\n    ",
           0LL,
           0LL,
           0LL);
    BOOL v8 = *(sqlite3 **)(a1 + 32);
    if (v7)
    {
      BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (v8)
      {
        if (!result) {
          return result;
        }
        __int128 v9 = sqlite3_errmsg(v8);
        sub_1000C80FC((uint64_t)v9, (uint64_t)v15);
      }

      else
      {
        if (!result) {
          return result;
        }
        sub_1000C80A4();
      }
    }

    else
    {
      int v10 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n DROP VIEW enabled_transform_view; CREATE VIEW enabled_transform_view AS\n"
              "           SELECT eligible_transform_view.transform_id AS transform_id, transform_uuid, transform_def, tra"
              "nsform_sampling\n"
              "           FROM eligible_transform_view\n"
              "           LEFT JOIN disabled_transforms\n"
              "              ON eligible_transform_view.transform_id=disabled_transforms.transform_id\n"
              "           WHERE disabled_transforms.transform_id IS NULL\n"
              "    ",
              0LL,
              0LL,
              0LL);
      BOOL v11 = *(sqlite3 **)(a1 + 32);
      if (v10)
      {
        BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
        if (v11)
        {
          if (!result) {
            return result;
          }
          __int128 v12 = sqlite3_errmsg(v11);
          sub_1000C7F58((uint64_t)v12, (uint64_t)v15);
        }

        else
        {
          if (!result) {
            return result;
          }
          sub_1000C7F00();
        }
      }

      else
      {
        if (!sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n DROP VIEW enabled_tranforms_by_event_view; CREATE VIEW enabled_tranforms_by_event_view AS\n"
                "           SELECT transform_events.event_id, event_name, transform_uuid, transform_def, transform_sampli"
                "ng\n"
                "           FROM enabled_transform_view\n"
                "           INNER JOIN transform_events\n"
                "              ON transform_events.transform_id=enabled_transform_view.transform_id\n"
                "           LEFT JOIN events\n"
                "              ON transform_events.event_id=events.event_id\n"
                "    ",
                0LL,
                0LL,
                0LL))
          return sub_10004C424(a1, 2);
        int v13 = *(sqlite3 **)(a1 + 32);
        BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
        if (v13)
        {
          if (!result) {
            return result;
          }
          __int128 v14 = sqlite3_errmsg(v13);
          sub_1000C7E40((uint64_t)v14, (uint64_t)v15);
        }

        else
        {
          if (!result) {
            return result;
          }
          sub_1000C7DE8();
        }
      }
    }
  }

  return 0LL;
}

void sub_1000BFD1C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

BOOL sub_1000BFD28(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_100131930;
  if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)sqlite3_int64 v6 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "[Config Store] DATABASE INITIALIZATION: modifying for V3 schema",  v6,  2u);
  }

  if (!sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n         ALTER TABLE disabled_transforms ADD COLUMN disable_reason STRING\n    ",  0LL,  0LL,  0LL)) {
    return sub_10004C424(a1, 3);
  }
  int v3 = *(sqlite3 **)(a1 + 32);
  BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
  if (v3)
  {
    if (result)
    {
      sqlite3_int64 v5 = sqlite3_errmsg(v3);
      sub_1000C8930((uint64_t)v5, (uint64_t)v6);
      return 0LL;
    }
  }

  else if (result)
  {
    sub_1000C88D8();
    return 0LL;
  }

  return result;
}

void sub_1000BFE40(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

BOOL sub_1000BFE4C(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_100131930;
  if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "[Config Store] DATABASE INITIALIZATION: modifying for V4 schema",  v18,  2u);
  }

  int v3 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n CREATE TABLE modify_eventdefs\n (\n modify_eventdef_id INTEGER PRIMARY KEY ASC,\n modify_event_uuid STRING UNIQUE,\n modify_event_name STRING,\n modify_event_type STRING,\n modify_event_defType STRING,\n modify_event_config STRING\n)\n ",  0LL,  0LL,  0LL);
  __int128 v4 = *(sqlite3 **)(a1 + 32);
  if (v3)
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v4)
    {
      if (!result) {
        return result;
      }
      sqlite3_int64 v6 = sqlite3_errmsg(v4);
      sub_1000C8BEC((uint64_t)v6, (uint64_t)v18);
    }

    else
    {
      if (!result) {
        return result;
      }
      sub_1000C8B94();
    }
  }

  else
  {
    int v7 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n CREATE TABLE config_modify_eventdefs\n (\n config_id INTEGER,\n modify_eventdef_id INTEGER\n)\n ",  0LL,  0LL,  0LL);
    BOOL v8 = *(sqlite3 **)(a1 + 32);
    if (v7)
    {
      BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (v8)
      {
        if (!result) {
          return result;
        }
        __int128 v9 = sqlite3_errmsg(v8);
        sub_1000C8B60((uint64_t)v9, (uint64_t)v18);
      }

      else
      {
        if (!result) {
          return result;
        }
        sub_1000C8B08();
      }
    }

    else
    {
      int v10 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n CREATE VIEW eligible_modify_eventdef_view AS\n SELECT modify_eventdefs.modify_eventdef_id, modify_event_uuid, modify_event_name, modify_event_ type, modify_event_defType, modify_event_config\n FROM modify_eventdefs\n INNER JOIN config_modify_eventdefs\n ON config_modify_eventdefs.modify_eventdef_id=modify_eventdefs.modify_eventdef_id\n WHERE config_modify_eventdefs.config_id IN (SELECT config_id FROM configs WHERE config_enabled= 1 LIMIT 1)\n ",  0LL,  0LL,  0LL);
      BOOL v11 = *(sqlite3 **)(a1 + 32);
      if (v10)
      {
        BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
        if (v11)
        {
          if (!result) {
            return result;
          }
          __int128 v12 = sqlite3_errmsg(v11);
          sub_1000C8AD4((uint64_t)v12, (uint64_t)v18);
        }

        else
        {
          if (!result) {
            return result;
          }
          sub_1000C8A7C();
        }
      }

      else
      {
        int v13 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "CREATE INDEX index10 ON modify_eventdefs(modify_eventdef_id);",
                0LL,
                0LL,
                0LL);
        __int128 v14 = *(sqlite3 **)(a1 + 32);
        if (v13)
        {
          BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
          if (v14)
          {
            if (!result) {
              return result;
            }
            int v15 = sqlite3_errmsg(v14);
            sub_1000C8A48((uint64_t)v15, (uint64_t)v18);
          }

          else
          {
            if (!result) {
              return result;
            }
            sub_1000C89F0();
          }
        }

        else
        {
          if (!sqlite3_exec( *(sqlite3 **)(a1 + 32),  "CREATE INDEX index11 ON config_modify_eventdefs(modify_eventdef_id);",
                  0LL,
                  0LL,
                  0LL))
            return sub_10004C424(a1, 4);
          int v16 = *(sqlite3 **)(a1 + 32);
          BOOL result = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
          if (v16)
          {
            if (!result) {
              return result;
            }
            unint64_t v17 = sqlite3_errmsg(v16);
            sub_1000C89BC((uint64_t)v17, (uint64_t)v18);
          }

          else
          {
            if (!result) {
              return result;
            }
            sub_1000C8964();
          }
        }
      }
    }
  }

  return 0LL;
}

void sub_1000C00F0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

BOOL sub_1000C00FC(uint64_t a1)
{
  int v2 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n CREATE TABLE sampling\n (\n sampling_id INTEGER PRIMARY KEY ASC,\n sampling_def STRING UNIQUE NOT NULL,\n sampling_def_perc DOUBLE NOT NULL DEFAULT 100.0,\n sampled_out INTEGER NOT NULL DEFAULT 0,\n disable_sampling INTEGER NOT NULL DEFAULT 0\n)\n ",  0LL,  0LL,  0LL);
  int v3 = *(sqlite3 **)(a1 + 32);
  if (v2)
  {
    BOOL v4 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v3)
    {
      if (v4)
      {
        sqlite3_int64 v5 = sqlite3_errmsg(v3);
        sub_1000CA258((uint64_t)v5, (uint64_t)v166);
      }
    }

    else if (v4)
    {
      sub_1000CA200();
    }
  }

  else
  {
    int v6 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "ALTER TABLE transforms ADD COLUMN sampling_id INTEGER REFERENCES sampling(sampling_id)",  0LL,  0LL,  0LL);
    int v7 = *(sqlite3 **)(a1 + 32);
    if (v6)
    {
      BOOL v8 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (v7)
      {
        if (v8)
        {
          __int128 v9 = sqlite3_errmsg(v7);
          sub_1000CA1CC((uint64_t)v9, (uint64_t)v166);
        }
      }

      else if (v8)
      {
        sub_1000CA174();
      }
    }

    else
    {
      int v10 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "ALTER TABLE external_configs ADD COLUMN sampling_id INTEGER REFERENCES sampling(sampling_id)",  0LL,  0LL,  0LL);
      BOOL v11 = *(sqlite3 **)(a1 + 32);
      if (v10)
      {
        BOOL v12 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
        if (v11)
        {
          if (v12)
          {
            int v13 = sqlite3_errmsg(v11);
            sub_1000CA140((uint64_t)v13, (uint64_t)v166);
          }
        }

        else if (v12)
        {
          sub_1000CA0E8();
        }
      }

      else
      {
        int v14 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n INSERT INTO sampling(sampling_def, sampling_def_perc, sampled_out)\n SELECT transform_enableIf, transform_sampling, CASE WHEN (disabled_transform s.transform_id IS NOT NULL AND disable_reason=sampled) THEN 1 ELSE 0 END AS sampled_out\n FROM transforms\n LEFT JOIN disabled_transforms\n ON transforms.transform_id=disabled_transforms.transform_id\n WHERE transform_enableIf IS NOT NULL\n GROUP BY transform_enableIf;\n"
                "    ",
                0LL,
                0LL,
                0LL);
        int v15 = *(sqlite3 **)(a1 + 32);
        if (v14)
        {
          BOOL v16 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
          if (v15)
          {
            if (v16)
            {
              unint64_t v17 = sqlite3_errmsg(v15);
              sub_1000CA0B4((uint64_t)v17, (uint64_t)v166);
            }
          }

          else if (v16)
          {
            sub_1000CA05C();
          }
        }

        else
        {
          int v18 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n INSERT INTO sampling(sampling_def, sampled_out)\n SELECT external_config_enableIf, CASE WHEN disabled_external_configs.exter nal_config_id IS NOT NULL THEN 1 ELSE 0 END AS sampled_out\n FROM external_configs\n LEFT JOIN disabled_external_configs\n ON external_configs.external_config_id=disabled_external_configs.external_ config_id\n WHERE external_config_enableIf IS NOT NULL\n GROUP BY external_config_enableIf;\n"
                  "    ",
                  0LL,
                  0LL,
                  0LL);
          int v19 = *(sqlite3 **)(a1 + 32);
          if (v18)
          {
            BOOL v20 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
            if (v19)
            {
              if (v20)
              {
                uint64_t v21 = sqlite3_errmsg(v19);
                sub_1000CA028((uint64_t)v21, (uint64_t)v166);
              }
            }

            else if (v20)
            {
              sub_1000C9FD0();
            }
          }

          else
          {
            int v22 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n UPDATE transforms\n SET sampling_id=sampling.sampling_id\n FROM sampling\n WHERE transforms.transform_enableIf=sampling.sampling_def;\n"
                    "    ",
                    0LL,
                    0LL,
                    0LL);
            uint64_t v23 = *(sqlite3 **)(a1 + 32);
            if (v22)
            {
              BOOL v24 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
              if (v23)
              {
                if (v24)
                {
                  int v25 = sqlite3_errmsg(v23);
                  sub_1000C9F9C((uint64_t)v25, (uint64_t)v166);
                }
              }

              else if (v24)
              {
                sub_1000C9F44();
              }
            }

            else
            {
              int v26 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n UPDATE external_configs\n SET sampling_id=sampling.sampling_id\n FROM sampling\n WHERE external_configs.external_config_enableIf=sampling.sampling_def;\n    ",
                      0LL,
                      0LL,
                      0LL);
              BOOL v27 = *(sqlite3 **)(a1 + 32);
              if (v26)
              {
                BOOL v28 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
                if (v27)
                {
                  if (v28)
                  {
                    BOOL v29 = sqlite3_errmsg(v27);
                    sub_1000C9F10((uint64_t)v29, (uint64_t)v166);
                  }
                }

                else if (v28)
                {
                  sub_1000C9EB8();
                }
              }

              else
              {
                int v30 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n CREATE VIEW composed_transforms_view AS\n SELECT transforms.*, sampling.*, CASE WHEN (transforms.sampling_id IS NULL OR disable _sampling=1) THEN 100.0 ELSE sampling_def_perc END as derived_sampling_perc\n FROM transforms\n LEFT JOIN sampling\n ON transforms.sampling_id=sampling.sampling_id\n ",  0LL,  0LL,  0LL);
                int v31 = *(sqlite3 **)(a1 + 32);
                if (v30)
                {
                  BOOL v32 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
                  if (v31)
                  {
                    if (v32)
                    {
                      std::string::size_type v33 = sqlite3_errmsg(v31);
                      sub_1000C9E84((uint64_t)v33, (uint64_t)v166);
                    }
                  }

                  else if (v32)
                  {
                    sub_1000C9E2C();
                  }
                }

                else
                {
                  int v34 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n DROP VIEW eligible_transform_view; CREATE VIEW eligible_transforms_view AS\n"
                          "           SELECT composed_transforms_view.*\n"
                          "           FROM composed_transforms_view\n"
                          "           INNER JOIN config_transforms\n"
                          "                ON composed_transforms_view.transform_id=config_transforms.transform_id\n"
                          "           WHERE config_transforms.config_id IN (SELECT config_id FROM configs WHERE config_en"
                          "abled=1 LIMIT 1)\n"
                          "    ",
                          0LL,
                          0LL,
                          0LL);
                  __int16 v35 = *(sqlite3 **)(a1 + 32);
                  if (v34)
                  {
                    BOOL v36 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
                    if (v35)
                    {
                      if (v36)
                      {
                        int v37 = sqlite3_errmsg(v35);
                        sub_1000C9DF8((uint64_t)v37, (uint64_t)v166);
                      }
                    }

                    else if (v36)
                    {
                      sub_1000C9DA0();
                    }
                  }

                  else
                  {
                    int v38 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n DROP VIEW disabled_transform_view; CREATE VIEW disabled_transforms_view AS\n"
                            "           SELECT composed_transforms_view.*\n"
                            "           FROM composed_transforms_view\n"
                            "           INNER JOIN disabled_transforms\n"
                            "              ON composed_transforms_view.transform_id=disabled_transforms.transform_id\n"
                            "    ",
                            0LL,
                            0LL,
                            0LL);
                    __int16 v39 = *(sqlite3 **)(a1 + 32);
                    if (v38)
                    {
                      BOOL v40 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
                      if (v39)
                      {
                        if (v40)
                        {
                          std::string v41 = sqlite3_errmsg(v39);
                          sub_1000C9D6C((uint64_t)v41, (uint64_t)v166);
                        }
                      }

                      else if (v40)
                      {
                        sub_1000C9D14();
                      }
                    }

                    else
                    {
                      int v42 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n CREATE VIEW sampled_out_transforms_view AS\n SELECT *\n FROM composed_transforms_view\n WHERE (sampled_out=1 AND disable_sampling=0)\n ",  0LL,  0LL,  0LL);
                      int v43 = *(sqlite3 **)(a1 + 32);
                      if (v42)
                      {
                        BOOL v44 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
                        if (v43)
                        {
                          if (v44)
                          {
                            std::string v45 = sqlite3_errmsg(v43);
                            sub_1000C9CE0((uint64_t)v45, (uint64_t)v166);
                          }
                        }

                        else if (v44)
                        {
                          sub_1000C9C88();
                        }
                      }

                      else
                      {
                        int v46 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n CREATE VIEW usable_transforms_view AS\n SELECT composed_transforms_view.*\n FROM composed_transforms_view\n LEFT JOIN disabled_transforms\n ON composed_transforms_view.transform_id=disabled_transforms.transform_id\n WHERE disabled_transforms.transform_id IS NULL AND (sampling_id IS NULL OR sa mpled_out=0 OR disable_sampling=1)\n ",  0LL,  0LL,  0LL);
                        char v47 = *(sqlite3 **)(a1 + 32);
                        if (v46)
                        {
                          BOOL v48 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
                          if (v47)
                          {
                            if (v48)
                            {
                              int v49 = sqlite3_errmsg(v47);
                              sub_1000C9C54((uint64_t)v49, (uint64_t)v166);
                            }
                          }

                          else if (v48)
                          {
                            sub_1000C9BFC();
                          }
                        }

                        else
                        {
                          int v50 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n DROP VIEW enabled_transform_view; CREATE VIEW enabled_transforms_view AS\n"
                                  "           SELECT eligible_transforms_view.*\n"
                                  "           FROM eligible_transforms_view\n"
                                  "           INNER JOIN usable_transforms_view\n"
                                  "              ON usable_transforms_view.transform_id=eligible_transforms_view.transform_id\n    ",
                                  0LL,
                                  0LL,
                                  0LL);
                          BOOL v51 = *(sqlite3 **)(a1 + 32);
                          if (v50)
                          {
                            BOOL v52 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
                            if (v51)
                            {
                              if (v52)
                              {
                                char v53 = sqlite3_errmsg(v51);
                                sub_1000C9BC8((uint64_t)v53, (uint64_t)v166);
                              }
                            }

                            else if (v52)
                            {
                              sub_1000C9B70();
                            }
                          }

                          else
                          {
                            int v54 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n DROP VIEW enabled_tranforms_by_event_view; CREATE VIEW enabled_transforms_by"
                                    "_event_view AS\n"
                                    "           SELECT events.*, enabled_transforms_view.*\n"
                                    "           FROM enabled_transforms_view\n"
                                    "           INNER JOIN transform_events\n"
                                    "              ON enabled_transforms_view.transform_id=transform_events.transform_id\n"
                                    "           LEFT JOIN events\n"
                                    "              ON transform_events.event_id=events.event_id\n"
                                    "    ",
                                    0LL,
                                    0LL,
                                    0LL);
                            int v55 = *(sqlite3 **)(a1 + 32);
                            if (v54)
                            {
                              BOOL v56 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
                              if (v55)
                              {
                                if (v56)
                                {
                                  BOOL v57 = sqlite3_errmsg(v55);
                                  sub_1000C9B3C((uint64_t)v57, (uint64_t)v166);
                                }
                              }

                              else if (v56)
                              {
                                sub_1000C9AE4();
                              }
                            }

                            else
                            {
                              int v58 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n DROP VIEW enabled_event_names_view; CREATE VIEW enabled_event_names_view A"
                                      "S\n"
                                      "           SELECT DISTINCT event_name\n"
                                      "           FROM enabled_transforms_by_event_view\n"
                                      "           ORDER BY event_name\n"
                                      "    ",
                                      0LL,
                                      0LL,
                                      0LL);
                              int64_t v59 = *(sqlite3 **)(a1 + 32);
                              if (v58)
                              {
                                BOOL v60 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
                                if (v59)
                                {
                                  if (v60)
                                  {
                                    int v61 = sqlite3_errmsg(v59);
                                    sub_1000C9AB0((uint64_t)v61, (uint64_t)v166);
                                  }
                                }

                                else if (v60)
                                {
                                  sub_1000C9A58();
                                }
                              }

                              else
                              {
                                int v62 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n CREATE VIEW composed_external_configs_view AS\n SELECT external_configs.*, sampling.*\n FROM external_configs\n LEFT JOIN sampling\n ON external_configs.sampling_id=sampling.sampling_id\n ",  0LL,  0LL,  0LL);
                                sqlite3_int64 v63 = *(sqlite3 **)(a1 + 32);
                                if (v62)
                                {
                                  BOOL v64 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
                                  if (v63)
                                  {
                                    if (v64)
                                    {
                                      char v65 = sqlite3_errmsg(v63);
                                      sub_1000C9A24((uint64_t)v65, (uint64_t)v166);
                                    }
                                  }

                                  else if (v64)
                                  {
                                    sub_1000C99CC();
                                  }
                                }

                                else
                                {
                                  int v66 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n DROP VIEW eligible_external_configs_view; CREATE VIEW eligible_exte"
                                          "rnal_configs_view AS\n"
                                          "           SELECT composed_external_configs_view.*\n"
                                          "           FROM composed_external_configs_view\n"
                                          "           INNER JOIN config_external_configs\n"
                                          "                ON composed_external_configs_view.external_config_id=config_ex"
                                          "ternal_configs.external_config_id\n"
                                          "           WHERE config_external_configs.config_id IN (SELECT config_id FROM c"
                                          "onfigs WHERE config_enabled=1 LIMIT 1)\n"
                                          "    ",
                                          0LL,
                                          0LL,
                                          0LL);
                                  int v67 = *(sqlite3 **)(a1 + 32);
                                  if (v66)
                                  {
                                    BOOL v68 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
                                    if (v67)
                                    {
                                      if (v68)
                                      {
                                        int64_t v69 = sqlite3_errmsg(v67);
                                        sub_1000C9998((uint64_t)v69, (uint64_t)v166);
                                      }
                                    }

                                    else if (v68)
                                    {
                                      sub_1000C9940();
                                    }
                                  }

                                  else
                                  {
                                    int v70 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n CREATE VIEW disabled_external_configs_view AS\n SELECT composed_external_configs_view.*\n FROM composed_external_configs_view\n INNER JOIN disabled_external_configs\n ON composed_external_configs_view.external_config_id=disabled_ external_configs.external_config_id\n ",  0LL,  0LL,  0LL);
                                    int64_t v71 = *(sqlite3 **)(a1 + 32);
                                    if (v70)
                                    {
                                      BOOL v72 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
                                      if (v71)
                                      {
                                        if (v72)
                                        {
                                          int v73 = sqlite3_errmsg(v71);
                                          sub_1000C990C((uint64_t)v73, (uint64_t)v166);
                                        }
                                      }

                                      else if (v72)
                                      {
                                        sub_1000C98B4();
                                      }
                                    }

                                    else
                                    {
                                      int v74 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n CREATE VIEW sampled_out_external_configs_view AS\n SELECT *\n FROM composed_external_configs_view\n WHERE (sampled_out=1 AND disable_sampling=0)\n ",  0LL,  0LL,  0LL);
                                      char v75 = *(sqlite3 **)(a1 + 32);
                                      if (v74)
                                      {
                                        BOOL v76 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
                                        if (v75)
                                        {
                                          if (v76)
                                          {
                                            BOOL v77 = sqlite3_errmsg(v75);
                                            sub_1000C9880((uint64_t)v77, (uint64_t)v166);
                                          }
                                        }

                                        else if (v76)
                                        {
                                          sub_1000C9828();
                                        }
                                      }

                                      else
                                      {
                                        int v78 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n CREATE VIEW usable_external_configs_view AS\n SELECT composed_external_configs_view.*\n FROM composed_external_configs_view\n LEFT JOIN disabled_external_configs\n ON composed_external_configs_view.external_config_id=disabl ed_external_configs.external_config_id\n WHERE disabled_external_configs.external_config_id IS NULL AND (sampling_id IS NULL OR sampled_out=0 OR disable_sampling=1)\n ",  0LL,  0LL,  0LL);
                                        int v79 = *(sqlite3 **)(a1 + 32);
                                        if (v78)
                                        {
                                          BOOL v80 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
                                          if (v79)
                                          {
                                            if (v80)
                                            {
                                              char v81 = sqlite3_errmsg(v79);
                                              sub_1000C97F4((uint64_t)v81, (uint64_t)v166);
                                            }
                                          }

                                          else if (v80)
                                          {
                                            sub_1000C979C();
                                          }
                                        }

                                        else
                                        {
                                          int v82 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n DROP VIEW enabled_external_configs_view; CREATE VIEW enabled_e"
                                                  "xternal_configs_view AS\n"
                                                  "           SELECT eligible_external_configs_view.*\n"
                                                  "           FROM eligible_external_configs_view\n"
                                                  "           INNER JOIN usable_external_configs_view\n"
                                                  "              ON eligible_external_configs_view.external_config_id=usa"
                                                  "ble_external_configs_view.external_config_id\n"
                                                  "    ",
                                                  0LL,
                                                  0LL,
                                                  0LL);
                                          int v83 = *(sqlite3 **)(a1 + 32);
                                          if (v82)
                                          {
                                            BOOL v84 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
                                            if (v83)
                                            {
                                              if (v84)
                                              {
                                                int v85 = sqlite3_errmsg(v83);
                                                sub_1000C9768((uint64_t)v85, (uint64_t)v166);
                                              }
                                            }

                                            else if (v84)
                                            {
                                              sub_1000C9710();
                                            }
                                          }

                                          else
                                          {
                                            int v86 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "ALTER TABLE transforms DROP COLUMN transform_enableIf; ALTER TABLE t"
                                                    "ransforms DROP COLUMN transform_sampling",
                                                    0LL,
                                                    0LL,
                                                    0LL);
                                            v87 = *(sqlite3 **)(a1 + 32);
                                            if (v86)
                                            {
                                              BOOL v88 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
                                              if (v87)
                                              {
                                                if (v88)
                                                {
                                                  uint64_t v89 = sqlite3_errmsg(v87);
                                                  sub_1000C96DC((uint64_t)v89, (uint64_t)v166);
                                                }
                                              }

                                              else if (v88)
                                              {
                                                sub_1000C9684();
                                              }
                                            }

                                            else
                                            {
                                              int v90 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "ALTER TABLE external_configs DROP COLUMN external_config_enableIf",  0LL,  0LL,  0LL);
                                              uint64_t v91 = *(sqlite3 **)(a1 + 32);
                                              if (v90)
                                              {
                                                BOOL v92 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
                                                if (v91)
                                                {
                                                  if (v92)
                                                  {
                                                    v93 = sqlite3_errmsg(v91);
                                                    sub_1000C9650((uint64_t)v93, (uint64_t)v166);
                                                  }
                                                }

                                                else if (v92)
                                                {
                                                  sub_1000C95F8();
                                                }
                                              }

                                              else
                                              {
                                                int v94 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "CREATE INDEX IX_sampling_sampled_out_disable_sampling ON samplin g(sampled_out, disable_sampling)",  0LL,  0LL,  0LL);
                                                v95 = *(sqlite3 **)(a1 + 32);
                                                if (v94)
                                                {
                                                  BOOL v96 = os_log_type_enabled( (os_log_t)qword_100131930,  OS_LOG_TYPE_ERROR);
                                                  if (v95)
                                                  {
                                                    if (v96)
                                                    {
                                                      v97 = sqlite3_errmsg(v95);
                                                      sub_1000C95C4((uint64_t)v97, (uint64_t)v166);
                                                    }
                                                  }

                                                  else if (v96)
                                                  {
                                                    sub_1000C956C();
                                                  }
                                                }

                                                else
                                                {
                                                  int v98 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "CREATE INDEX IX_transforms_sampling_id ON transforms(sampling_id)",  0LL,  0LL,  0LL);
                                                  uint64_t v99 = *(sqlite3 **)(a1 + 32);
                                                  if (v98)
                                                  {
                                                    BOOL v100 = os_log_type_enabled( (os_log_t)qword_100131930,  OS_LOG_TYPE_ERROR);
                                                    if (v99)
                                                    {
                                                      if (v100)
                                                      {
                                                        uint64_t v101 = sqlite3_errmsg(v99);
                                                        sub_1000C9538((uint64_t)v101, (uint64_t)v166);
                                                      }
                                                    }

                                                    else if (v100)
                                                    {
                                                      sub_1000C94E0();
                                                    }
                                                  }

                                                  else
                                                  {
                                                    int v102 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "CREATE INDEX IX_external_configs_sampling_id ON external_co nfigs(sampling_id)",  0LL,  0LL,  0LL);
                                                    char v103 = *(sqlite3 **)(a1 + 32);
                                                    if (v102)
                                                    {
                                                      BOOL v104 = os_log_type_enabled( (os_log_t)qword_100131930,  OS_LOG_TYPE_ERROR);
                                                      if (v103)
                                                      {
                                                        if (v104)
                                                        {
                                                          char v105 = sqlite3_errmsg(v103);
                                                          sub_1000C94AC((uint64_t)v105, (uint64_t)v166);
                                                        }
                                                      }

                                                      else if (v104)
                                                      {
                                                        sub_1000C9454();
                                                      }
                                                    }

                                                    else
                                                    {
                                                      int v106 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "DROP INDEX index1; CREATE INDEX IX_disabled_transforms_tr"
                                                               "ansform_id ON disabled_transforms(transform_id)",
                                                               0LL,
                                                               0LL,
                                                               0LL);
                                                      v107 = *(sqlite3 **)(a1 + 32);
                                                      if (v106)
                                                      {
                                                        BOOL v108 = os_log_type_enabled( (os_log_t)qword_100131930,  OS_LOG_TYPE_ERROR);
                                                        if (v107)
                                                        {
                                                          if (v108)
                                                          {
                                                            v109 = sqlite3_errmsg(v107);
                                                            sub_1000C9420((uint64_t)v109, (uint64_t)v166);
                                                          }
                                                        }

                                                        else if (v108)
                                                        {
                                                          sub_1000C93C8();
                                                        }
                                                      }

                                                      else
                                                      {
                                                        int v110 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "DROP INDEX index2; CREATE INDEX IX_transform_events_tra"
                                                                 "nsform_id ON transform_events(transform_id)",
                                                                 0LL,
                                                                 0LL,
                                                                 0LL);
                                                        int v111 = *(sqlite3 **)(a1 + 32);
                                                        if (v110)
                                                        {
                                                          BOOL v112 = os_log_type_enabled( (os_log_t)qword_100131930,  OS_LOG_TYPE_ERROR);
                                                          if (v111)
                                                          {
                                                            if (v112)
                                                            {
                                                              v113 = sqlite3_errmsg(v111);
                                                              sub_1000C9394((uint64_t)v113, (uint64_t)v166);
                                                            }
                                                          }

                                                          else if (v112)
                                                          {
                                                            sub_1000C933C();
                                                          }
                                                        }

                                                        else
                                                        {
                                                          int v114 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "DROP INDEX index3; CREATE INDEX IX_disabled_external_"
                                                                   "configs_external_config_id ON disabled_external_confi"
                                                                   "gs(external_config_id)",
                                                                   0LL,
                                                                   0LL,
                                                                   0LL);
                                                          v115 = *(sqlite3 **)(a1 + 32);
                                                          if (v114)
                                                          {
                                                            BOOL v116 = os_log_type_enabled( (os_log_t)qword_100131930,  OS_LOG_TYPE_ERROR);
                                                            if (v115)
                                                            {
                                                              if (v116)
                                                              {
                                                                v117 = sqlite3_errmsg(v115);
                                                                sub_1000C9308((uint64_t)v117, (uint64_t)v166);
                                                              }
                                                            }

                                                            else if (v116)
                                                            {
                                                              sub_1000C92B0();
                                                            }
                                                          }

                                                          else
                                                          {
                                                            int v118 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "DROP INDEX index4",  0LL,  0LL,  0LL);
                                                            v119 = *(sqlite3 **)(a1 + 32);
                                                            if (v118)
                                                            {
                                                              BOOL v120 = os_log_type_enabled( (os_log_t)qword_100131930,  OS_LOG_TYPE_ERROR);
                                                              if (v119)
                                                              {
                                                                if (v120)
                                                                {
                                                                  v121 = sqlite3_errmsg(v119);
                                                                  sub_1000C927C((uint64_t)v121, (uint64_t)v166);
                                                                }
                                                              }

                                                              else if (v120)
                                                              {
                                                                sub_1000C9224();
                                                              }
                                                            }

                                                            else
                                                            {
                                                              int v122 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "DROP INDEX index5; CREATE INDEX IX_config_transfo"
                                                                       "rms_transform_id ON config_transforms(transform_id)",
                                                                       0LL,
                                                                       0LL,
                                                                       0LL);
                                                              v123 = *(sqlite3 **)(a1 + 32);
                                                              if (v122)
                                                              {
                                                                BOOL v124 = os_log_type_enabled( (os_log_t)qword_100131930,  OS_LOG_TYPE_ERROR);
                                                                if (v123)
                                                                {
                                                                  if (v124)
                                                                  {
                                                                    v125 = sqlite3_errmsg(v123);
                                                                    sub_1000C91F0((uint64_t)v125, (uint64_t)v166);
                                                                  }
                                                                }

                                                                else if (v124)
                                                                {
                                                                  sub_1000C9198();
                                                                }
                                                              }

                                                              else
                                                              {
                                                                int v126 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "CREATE INDEX IX_config_transforms_config_id_tra nsform_id ON config_transforms(config_id, transform_id)",  0LL,  0LL,  0LL);
                                                                v127 = *(sqlite3 **)(a1 + 32);
                                                                if (v126)
                                                                {
                                                                  BOOL v128 = os_log_type_enabled( (os_log_t)qword_100131930,  OS_LOG_TYPE_ERROR);
                                                                  if (v127)
                                                                  {
                                                                    if (v128)
                                                                    {
                                                                      v129 = sqlite3_errmsg(v127);
                                                                      sub_1000C9164((uint64_t)v129, (uint64_t)v166);
                                                                    }
                                                                  }

                                                                  else if (v128)
                                                                  {
                                                                    sub_1000C910C();
                                                                  }
                                                                }

                                                                else
                                                                {
                                                                  int v130 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "DROP INDEX index6; CREATE INDEX IX_transform_"
                                                                           "events_event_id ON transform_events(event_id)",
                                                                           0LL,
                                                                           0LL,
                                                                           0LL);
                                                                  v131 = *(sqlite3 **)(a1 + 32);
                                                                  if (v130)
                                                                  {
                                                                    BOOL v132 = os_log_type_enabled( (os_log_t)qword_100131930,  OS_LOG_TYPE_ERROR);
                                                                    if (v131)
                                                                    {
                                                                      if (v132)
                                                                      {
                                                                        v133 = sqlite3_errmsg(v131);
                                                                        sub_1000C90D8((uint64_t)v133, (uint64_t)v166);
                                                                      }
                                                                    }

                                                                    else if (v132)
                                                                    {
                                                                      sub_1000C9080();
                                                                    }
                                                                  }

                                                                  else
                                                                  {
                                                                    int v134 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "DROP INDEX index7",  0LL,  0LL,  0LL);
                                                                    v135 = *(sqlite3 **)(a1 + 32);
                                                                    if (v134)
                                                                    {
                                                                      BOOL v136 = os_log_type_enabled( (os_log_t)qword_100131930,  OS_LOG_TYPE_ERROR);
                                                                      if (v135)
                                                                      {
                                                                        if (v136)
                                                                        {
                                                                          v137 = sqlite3_errmsg(v135);
                                                                          sub_1000C904C((uint64_t)v137, (uint64_t)v166);
                                                                        }
                                                                      }

                                                                      else if (v136)
                                                                      {
                                                                        sub_1000C8FF4();
                                                                      }
                                                                    }

                                                                    else
                                                                    {
                                                                      int v138 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "DROP INDEX index8",  0LL,  0LL,  0LL);
                                                                      v139 = *(sqlite3 **)(a1 + 32);
                                                                      if (v138)
                                                                      {
                                                                        BOOL v140 = os_log_type_enabled( (os_log_t)qword_100131930,  OS_LOG_TYPE_ERROR);
                                                                        if (v139)
                                                                        {
                                                                          if (v140)
                                                                          {
                                                                            v141 = sqlite3_errmsg(v139);
                                                                            sub_1000C8FC0((uint64_t)v141, (uint64_t)v166);
                                                                          }
                                                                        }

                                                                        else if (v140)
                                                                        {
                                                                          sub_1000C8F68();
                                                                        }
                                                                      }

                                                                      else
                                                                      {
                                                                        int v142 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "DROP INDEX index9; CREATE INDEX IX_conf"
                                                                                 "ig_eventdefs_eventdef_id ON config_even"
                                                                                 "tdefs(eventdef_id)",
                                                                                 0LL,
                                                                                 0LL,
                                                                                 0LL);
                                                                        v143 = *(sqlite3 **)(a1 + 32);
                                                                        if (v142)
                                                                        {
                                                                          BOOL v144 = os_log_type_enabled( (os_log_t)qword_100131930,  OS_LOG_TYPE_ERROR);
                                                                          if (v143)
                                                                          {
                                                                            if (v144)
                                                                            {
                                                                              v145 = sqlite3_errmsg(v143);
                                                                              sub_1000C8F34( (uint64_t)v145,  (uint64_t)v166);
                                                                            }
                                                                          }

                                                                          else if (v144)
                                                                          {
                                                                            sub_1000C8EDC();
                                                                          }
                                                                        }

                                                                        else
                                                                        {
                                                                          int v146 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "CREATE INDEX IX_config_eventdefs_conf ig_id_eventdef_id ON config_eventdefs (config_id, eventdef_id)",  0LL,  0LL,  0LL);
                                                                          v147 = *(sqlite3 **)(a1 + 32);
                                                                          if (v146)
                                                                          {
                                                                            BOOL v148 = os_log_type_enabled( (os_log_t)qword_100131930,  OS_LOG_TYPE_ERROR);
                                                                            if (v147)
                                                                            {
                                                                              if (v148)
                                                                              {
                                                                                v149 = sqlite3_errmsg(v147);
                                                                                sub_1000C8EA8( (uint64_t)v149,  (uint64_t)v166);
                                                                              }
                                                                            }

                                                                            else if (v148)
                                                                            {
                                                                              sub_1000C8E50();
                                                                            }
                                                                          }

                                                                          else
                                                                          {
                                                                            int v150 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "DROP INDEX index10;",
                                                                                     0LL,
                                                                                     0LL,
                                                                                     0LL);
                                                                            v151 = *(sqlite3 **)(a1 + 32);
                                                                            if (v150)
                                                                            {
                                                                              BOOL v152 = os_log_type_enabled( (os_log_t)qword_100131930,  OS_LOG_TYPE_ERROR);
                                                                              if (v151)
                                                                              {
                                                                                if (v152)
                                                                                {
                                                                                  v153 = sqlite3_errmsg(v151);
                                                                                  sub_1000C8E1C( (uint64_t)v153,  (uint64_t)v166);
                                                                                }
                                                                              }

                                                                              else if (v152)
                                                                              {
                                                                                sub_1000C8DC4();
                                                                              }
                                                                            }

                                                                            else
                                                                            {
                                                                              int v154 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "DROP INDEX index11; CREATE INDEX "
                                                                                       "IX_config_modify_eventdefs_modify"
                                                                                       "_eventdef_id ON config_modify_eve"
                                                                                       "ntdefs(modify_eventdef_id)",
                                                                                       0LL,
                                                                                       0LL,
                                                                                       0LL);
                                                                              v155 = *(sqlite3 **)(a1 + 32);
                                                                              if (v154)
                                                                              {
                                                                                BOOL v156 = os_log_type_enabled( (os_log_t)qword_100131930,  OS_LOG_TYPE_ERROR);
                                                                                if (v155)
                                                                                {
                                                                                  if (v156)
                                                                                  {
                                                                                    v157 = sqlite3_errmsg(v155);
                                                                                    sub_1000C8D90( (uint64_t)v157,  (uint64_t)v166);
                                                                                  }
                                                                                }

                                                                                else if (v156)
                                                                                {
                                                                                  sub_1000C8D38();
                                                                                }
                                                                              }

                                                                              else
                                                                              {
                                                                                int v158 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "CREATE INDEX IX_config_modify_e ventdefs_config_id_modify_event def_id ON config_modify_eventde fs(config_id, modify_eventdef_id)",  0LL,  0LL,  0LL);
                                                                                v159 = *(sqlite3 **)(a1 + 32);
                                                                                if (v158)
                                                                                {
                                                                                  BOOL v160 = os_log_type_enabled( (os_log_t)qword_100131930,  OS_LOG_TYPE_ERROR);
                                                                                  if (v159)
                                                                                  {
                                                                                    if (v160)
                                                                                    {
                                                                                      v161 = sqlite3_errmsg(v159);
                                                                                      sub_1000C8D04( (uint64_t)v161,  (uint64_t)v166);
                                                                                    }
                                                                                  }

                                                                                  else if (v160)
                                                                                  {
                                                                                    sub_1000C8CAC();
                                                                                  }
                                                                                }

                                                                                else
                                                                                {
                                                                                  if (!sqlite3_exec( *(sqlite3 **)(a1 + 32),  "CREATE INDEX IX_modify_eventde fs_modify_event_name ON modify _eventdefs(modify_event_name)",  0LL,  0LL,  0LL)) {
                                                                                    return sub_10004C424(a1, 5);
                                                                                  }
                                                                                  v162 = *(sqlite3 **)(a1 + 32);
                                                                                  BOOL v163 = os_log_type_enabled( (os_log_t)qword_100131930,  OS_LOG_TYPE_ERROR);
                                                                                  if (v162)
                                                                                  {
                                                                                    if (v163)
                                                                                    {
                                                                                      v164 = sqlite3_errmsg(v162);
                                                                                      sub_1000C8C78( (uint64_t)v164,  (uint64_t)v166);
                                                                                    }
                                                                                  }

                                                                                  else if (v163)
                                                                                  {
                                                                                    sub_1000C8C20();
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  return 0LL;
}

void sub_1000C1370(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

BOOL sub_1000C137C(uint64_t a1)
{
  int v2 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "CREATE INDEX IX_configs_config_id ON configs(config_id)", 0LL, 0LL, 0LL);
  int v3 = *(sqlite3 **)(a1 + 32);
  if (v2)
  {
    BOOL v4 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v3)
    {
      if (v4)
      {
        sqlite3_int64 v5 = sqlite3_errmsg(v3);
        sub_1000CA488((uint64_t)v5, (uint64_t)v18);
      }
    }

    else if (v4)
    {
      sub_1000CA430();
    }
  }

  else
  {
    int v6 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "CREATE INDEX IX_config_transforms_transform_id_config_id ON config_transforms(transform_id, config_id)",  0LL,  0LL,  0LL);
    int v7 = *(sqlite3 **)(a1 + 32);
    if (v6)
    {
      BOOL v8 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (v7)
      {
        if (v8)
        {
          __int128 v9 = sqlite3_errmsg(v7);
          sub_1000CA3FC((uint64_t)v9, (uint64_t)v18);
        }
      }

      else if (v8)
      {
        sub_1000CA3A4();
      }
    }

    else
    {
      int v10 = sqlite3_exec( *(sqlite3 **)(a1 + 32),  "CREATE INDEX IX_configs_config_last_enabled ON configs(config_last_enabled)",  0LL,  0LL,  0LL);
      BOOL v11 = *(sqlite3 **)(a1 + 32);
      if (v10)
      {
        BOOL v12 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
        if (v11)
        {
          if (v12)
          {
            int v13 = sqlite3_errmsg(v11);
            sub_1000CA370((uint64_t)v13, (uint64_t)v18);
          }
        }

        else if (v12)
        {
          sub_1000CA318();
        }
      }

      else
      {
        if (!sqlite3_exec( *(sqlite3 **)(a1 + 32),  "\n DROP VIEW composed_transforms_view; CREATE VIEW composed_transforms_view AS\n"
                "                   SELECT transforms.*, sampling.*, CASE WHEN (transforms.sampling_id IS NULL OR disable"
                "_sampling=1) THEN 100.0 ELSE sampling_def_perc END as derived_sampling_perc, configs.config_last_enabled"
                " AS transform_started_aggregating_timestamp\n"
                "                   FROM transforms\n"
                "                   LEFT JOIN sampling\n"
                "                      ON transforms.sampling_id=sampling.sampling_id\n"
                "                   LEFT JOIN configs\n"
                "                      ON configs.config_id=(\n"
                "                          SELECT MIN(config_transforms.config_id)\n"
                "                          FROM config_transforms\n"
                "                          WHERE transforms.transform_id=config_transforms.transform_id\n"
                "                      )\n"
                "    ",
                0LL,
                0LL,
                0LL))
          return sub_10004C424(a1, 6);
        int v14 = *(sqlite3 **)(a1 + 32);
        BOOL v15 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
        if (v14)
        {
          if (v15)
          {
            BOOL v16 = sqlite3_errmsg(v14);
            sub_1000CA2E4((uint64_t)v16, (uint64_t)v18);
          }
        }

        else if (v15)
        {
          sub_1000CA28C();
        }
      }
    }
  }

  return 0LL;
}

void sub_1000C15C0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

BOOL sub_1000C15CC(uint64_t a1)
{
  int v2 = (os_log_s *)qword_100131930;
  if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v1sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "[Config Store] DATABASE INITIALIZATION: begin schema migration",  (uint8_t *)&v12,  2u);
  }

  if (!sub_10004BE44(a1))
  {
    unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
    sub_100040F2C((uint64_t)&v12, (void *)(a1 + 32));
    if (!BYTE1(v13))
    {
      BOOL v4 = *(sqlite3 **)(a1 + 32);
      BOOL v5 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (!v4)
      {
        if (!v5) {
          goto LABEL_29;
        }
        goto LABEL_59;
      }

      if (!v5) {
        goto LABEL_29;
      }
LABEL_53:
      BOOL v11 = sqlite3_errmsg(v4);
      sub_1000CA514((uint64_t)v11, (uint64_t)v14);
      goto LABEL_29;
    }

    if (!sub_1000BEE68(a1)) {
      goto LABEL_28;
    }
    sub_100041054((uint64_t)&v12);
    sub_100041140((uint64_t)&v12);
  }

  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  sub_100040F2C((uint64_t)&v12, (void *)(a1 + 32));
  if (!BYTE1(v13))
  {
    BOOL v4 = *(sqlite3 **)(a1 + 32);
    BOOL v6 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (!v4)
    {
      if (!v6) {
        goto LABEL_29;
      }
      goto LABEL_59;
    }

    if (!v6) {
      goto LABEL_29;
    }
    goto LABEL_53;
  }

  if (!sub_1000BFADC(a1)) {
    goto LABEL_28;
  }
  sub_100041054((uint64_t)&v12);
  sub_100041140((uint64_t)&v12);
LABEL_8:
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  sub_100040F2C((uint64_t)&v12, (void *)(a1 + 32));
  if (!BYTE1(v13))
  {
    BOOL v4 = *(sqlite3 **)(a1 + 32);
    BOOL v7 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (!v4)
    {
      if (!v7) {
        goto LABEL_29;
      }
      goto LABEL_59;
    }

    if (!v7) {
      goto LABEL_29;
    }
    goto LABEL_53;
  }

  if (!sub_1000BFD28(a1)) {
    goto LABEL_28;
  }
  sub_100041054((uint64_t)&v12);
  sub_100041140((uint64_t)&v12);
LABEL_12:
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  sub_100040F2C((uint64_t)&v12, (void *)(a1 + 32));
  if (!BYTE1(v13))
  {
    BOOL v4 = *(sqlite3 **)(a1 + 32);
    BOOL v8 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (!v4)
    {
      if (!v8) {
        goto LABEL_29;
      }
      goto LABEL_59;
    }

    if (!v8) {
      goto LABEL_29;
    }
    goto LABEL_53;
  }

  if (!sub_1000BFE4C(a1)) {
    goto LABEL_28;
  }
  sub_100041054((uint64_t)&v12);
  sub_100041140((uint64_t)&v12);
LABEL_16:
  if (sub_10004BE44(a1) != 4)
  {
LABEL_20:
    unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
    sub_100040F2C((uint64_t)&v12, (void *)(a1 + 32));
    if (BYTE1(v13))
    {
      if (sub_1000C137C(a1))
      {
        sub_100041054((uint64_t)&v12);
        sub_100041140((uint64_t)&v12);
        return sub_10004BE44(a1) == 6;
      }

      goto LABEL_28;
    }

    BOOL v4 = *(sqlite3 **)(a1 + 32);
    BOOL v10 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v4)
    {
      if (!v10) {
        goto LABEL_29;
      }
      goto LABEL_53;
    }

    if (!v10) {
      goto LABEL_29;
    }
LABEL_59:
    sub_1000CA4BC();
    goto LABEL_29;
  }

  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  sub_100040F2C((uint64_t)&v12, (void *)(a1 + 32));
  if (!BYTE1(v13))
  {
    BOOL v4 = *(sqlite3 **)(a1 + 32);
    BOOL v9 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (!v4)
    {
      if (!v9) {
        goto LABEL_29;
      }
      goto LABEL_59;
    }

    if (!v9) {
      goto LABEL_29;
    }
    goto LABEL_53;
  }

  if (sub_1000C00FC(a1))
  {
    sub_100041054((uint64_t)&v12);
    sub_100041140((uint64_t)&v12);
    goto LABEL_20;
  }

void sub_1000C19F4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

uint64_t sub_1000C1A00()
{
  return 6LL;
}

void sub_1000C1A08(__int128 *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  BOOL v6 = operator new(0xA8uLL);
  v6[1] = 0LL;
  _DWORD v6[2] = 0LL;
  void *v6 = off_10012D7D8;
  sub_1000B78C8(v6 + 3, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  sub_10000CCC8((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1000C1A7C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10012D7D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000C1A8C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10012D7D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_1000C1AAC(uint64_t a1)
{
  return sub_1000B79A8(a1 + 24, (uint64_t)&off_10012D4D0);
}

sqlite3_stmt **sub_1000C1AC0(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 40);
  sub_10004C6D4((sqlite3_stmt **)(v1 + 120), 0LL);
  return sub_10004C6D4((sqlite3_stmt **)(v1 + 136), 0LL);
}

BOOL sub_1000C1AF4(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t v2 = *v1;
  unint64_t v12 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
  sub_10004C38C(v2, "SELECT 1 FROM configs WHERE config_uuid=?1;", 0, &v12);
  if (v12)
  {
    sub_10004C160(v2, &v12, 1, v1[1]);
    int v3 = sub_10004C078(v2, &v12);
    BOOL v4 = v3 == 100;
    if ((v3 & 0xFFFFFFFE) != 0x64)
    {
      BOOL v5 = *(sqlite3 **)(v2 + 32);
      BOOL v6 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (v5)
      {
        if (v6)
        {
          BOOL v7 = sqlite3_errmsg(v5);
          sub_1000CA5A0((uint64_t)v7, (uint64_t)v13);
        }
      }

      else if (v6)
      {
        sub_1000CA548();
      }
    }
  }

  else
  {
    BOOL v8 = *(sqlite3 **)(v2 + 32);
    BOOL v9 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v8)
    {
      if (v9)
      {
        BOOL v10 = sqlite3_errmsg(v8);
        sub_1000CA5A0((uint64_t)v10, (uint64_t)v13);
      }
    }

    else if (v9)
    {
      sub_1000CA548();
    }

    BOOL v4 = 0LL;
  }

  sub_10004C6D4(&v12, 0LL);
  return v4;
}

void sub_1000C1C5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1000C1C80(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16LL))();
  **(_BYTE **)(a1 + 3sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = result;
  return result;
}

uint64_t sub_1000C1CB4(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 40);
  BOOL v11 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
  sub_10004C38C(v1, "UPDATE configs SET config_enabled=0;", 0, &v11);
  if (!v11)
  {
    BOOL v4 = *(sqlite3 **)(v1 + 32);
    BOOL v5 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v4)
    {
      if (v5)
      {
        BOOL v6 = sqlite3_errmsg(v4);
        sub_1000CA62C((uint64_t)v6, (uint64_t)buf);
      }
    }

    else if (v5)
    {
      sub_1000CA5D4();
    }

    goto LABEL_16;
  }

  *(void *)std::string buf = 0LL;
  if (sub_10004C0B4(v1, &v11, buf) != 101)
  {
    BOOL v7 = *(sqlite3 **)(v1 + 32);
    BOOL v8 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v7)
    {
      if (v8)
      {
        BOOL v9 = sqlite3_errmsg(v7);
        sub_1000CA6B8((uint64_t)v9, (uint64_t)buf);
      }
    }

    else if (v8)
    {
      sub_1000CA660();
    }

void sub_1000C1E4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1000C1E70(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t v2 = *v1;
  BOOL v24 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
  sub_10004C38C(v2, "UPDATE configs SET config_enabled=(config_uuid=?1);", 0, &v24);
  if (!v24)
  {
    BOOL v10 = *(sqlite3 **)(v2 + 32);
    BOOL v11 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v10)
    {
      if (v11)
      {
        unint64_t v12 = sqlite3_errmsg(v10);
        sub_1000CA744((uint64_t)v12, (uint64_t)buf);
      }
    }

    else if (v11)
    {
      sub_1000CA6EC();
    }

    goto LABEL_36;
  }

  uint64_t v23 = 0LL;
  uint64_t v4 = v1[1];
  uint64_t v3 = v1 + 1;
  sub_10004C11C(v2, &v24, 1, v4, &v23);
  if (sub_10004C0B4(v2, &v24, &v23) != 101)
  {
    unint64_t v13 = *(sqlite3 **)(v2 + 32);
    BOOL v14 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v13)
    {
      if (v14)
      {
        BOOL v15 = sqlite3_errmsg(v13);
        sub_1000CA9E8((uint64_t)v15, (uint64_t)buf);
      }
    }

    else if (v14)
    {
      sub_1000CA990();
    }

    goto LABEL_36;
  }

  sub_10004C38C(v2, "SELECT COUNT(*) FROM configs WHERE config_uuid=?1", 0, (sqlite3_stmt **)buf);
  BOOL v5 = *(sqlite3_stmt **)buf;
  *(void *)std::string buf = 0LL;
  sub_10004C6D4(&v24, v5);
  sub_10004C6D4((sqlite3_stmt **)buf, 0LL);
  if (!v24)
  {
    BOOL v16 = *(sqlite3 **)(v2 + 32);
    BOOL v17 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v16)
    {
      if (v17)
      {
        int v18 = sqlite3_errmsg(v16);
        sub_1000CA7D0((uint64_t)v18, (uint64_t)buf);
      }
    }

    else if (v17)
    {
      sub_1000CA778();
    }

    goto LABEL_36;
  }

  sub_10004C160(v2, &v24, 1, *v3);
  if (sub_10004C078(v2, &v24) != 100)
  {
    int v19 = *(sqlite3 **)(v2 + 32);
    BOOL v20 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v19)
    {
      if (v20)
      {
        uint64_t v21 = sqlite3_errmsg(v19);
        sub_1000CA95C((uint64_t)v21, (uint64_t)buf);
      }
    }

    else if (v20)
    {
      sub_1000CA904();
    }

    goto LABEL_36;
  }

  sqlite3_int64 v6 = sub_10004C2E4(v2, &v24, 0);
  if (!v6)
  {
    if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR)) {
      sub_1000CA890();
    }
    goto LABEL_36;
  }

  if (v6 != 1)
  {
    if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR)) {
      sub_1000CA804();
    }
LABEL_36:
    uint64_t v9 = 0LL;
    goto LABEL_37;
  }

  BOOL v7 = (os_log_s *)qword_100131930;
  if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v8 = (void *)*v3;
    *(_DWORD *)std::string buf = 136446210;
    *(void *)&uint8_t buf[4] = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[Config Store] Activated device configuration with uuid '%{public}s'",  buf,  0xCu);
  }

  uint64_t v9 = 1LL;
LABEL_37:
  sub_10004C6D4(&v24, 0LL);
  return v9;
}

void sub_1000C21C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

sqlite3_stmt **sub_1000C21EC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = **(void **)(a1 + 40);
  *a2 = 0xAAAAAAAAAAAAAA00LL;
  a2[1] = 0LL;
  sub_1000041AC((uint64_t)a2);
  sub_1000041AC((uint64_t)a2);
  int v22 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
  sub_10004C38C(v3, "SELECT config_header FROM configs WHERE config_enabled=1 LIMIT 1;", 0, &v22);
  if (v22)
  {
    int v4 = sub_10004C078(v3, &v22);
    if (v4 != 100)
    {
      if (v4 == 101)
      {
        BOOL v5 = (os_log_s *)qword_100131930;
        if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[Config Store] No activated config currently set",  buf,  2u);
        }
      }

      else
      {
        BOOL v11 = *(sqlite3 **)(v3 + 32);
        BOOL v12 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
        if (v11)
        {
          if (v12)
          {
            unint64_t v13 = sqlite3_errmsg(v11);
            sub_1000CAB00((uint64_t)v13, (uint64_t)buf);
          }
        }

        else if (v12)
        {
          sub_1000CAAA8();
        }
      }

      return sub_10004C6D4(&v22, 0LL);
    }

    uint64_t v21 = (const char *)sub_10004C280(v3, &v22, 0);
    if (v21)
    {
      int v25 = 0LL;
      sub_100026984(&v21, (uint64_t)buf, 1, &v19);
      uint64_t v9 = v25;
      if (v25 == buf)
      {
        uint64_t v10 = 4LL;
        uint64_t v9 = buf;
      }

      else
      {
        if (!v25) {
          goto LABEL_24;
        }
        uint64_t v10 = 5LL;
      }

      (*(void (**)(void))(*(void *)v9 + 8 * v10))();
LABEL_24:
      sub_1000041AC((uint64_t)&v19);
      char v14 = *(_BYTE *)a2;
      *(_BYTE *)a2 = v19;
      LOBYTE(v19) = v14;
      BOOL v15 = (uint64_t *)a2[1];
      a2[1] = v20;
      BOOL v20 = v15;
      sub_1000041AC((uint64_t)a2);
      sub_1000041AC((uint64_t)&v19);
      sub_10000425C(&v20, v19);
      if (*(_BYTE *)a2 != 1)
      {
        if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR)) {
          sub_1000CAB8C();
        }
        buf[0] = 0;
        BOOL v24 = 0LL;
        sub_1000041AC((uint64_t)buf);
        sub_1000041AC((uint64_t)buf);
        sub_1000041AC((uint64_t)buf);
        uint8_t v16 = *(_BYTE *)a2;
        *(_BYTE *)a2 = buf[0];
        buf[0] = v16;
        BOOL v17 = (uint64_t *)a2[1];
        a2[1] = v24;
        BOOL v24 = v17;
        sub_1000041AC((uint64_t)a2);
        sub_1000041AC((uint64_t)buf);
        sub_10000425C(&v24, buf[0]);
      }

      return sub_10004C6D4(&v22, 0LL);
    }

    if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR)) {
      sub_1000CAB34();
    }
  }

  else
  {
    sqlite3_int64 v6 = *(sqlite3 **)(v3 + 32);
    BOOL v7 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v6)
    {
      if (v7)
      {
        BOOL v8 = sqlite3_errmsg(v6);
        sub_1000CAA74((uint64_t)v8, (uint64_t)buf);
      }
    }

    else if (v7)
    {
      sub_1000CAA1C();
    }
  }

  return sub_10004C6D4(&v22, 0LL);
}

void sub_1000C251C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void sub_1000C25C0(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 40) + 16LL))(&v5);
  uint64_t v2 = *(void *)(a1 + 32);
  sub_1000041AC((uint64_t)&v5);
  char v3 = *(_BYTE *)v2;
  *(_BYTE *)uint64_t v2 = v5;
  LOBYTE(v5) = v3;
  int v4 = *(uint64_t **)(v2 + 8);
  *(void *)(v2 + sub_100007004((uint64_t)v9 + 8) = v6;
  sqlite3_int64 v6 = v4;
  sub_1000041AC(v2);
  sub_1000041AC((uint64_t)&v5);
  sub_10000425C(&v6, v5);
}

sqlite3_stmt **sub_1000C2674(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t v2 = *v1;
  BOOL v11 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
  sub_10004C38C( v2,  "INSERT INTO disabled_transforms (transform_id,disable_reason) VALUES ((SELECT transform_id FROM transforms WHERE tra nsform_uuid=?1), budgeted);",
    0,
    &v11);
  if (v11)
  {
    uint64_t v10 = 0LL;
    sub_10004C11C(v2, &v11, 1, v1[1], &v10);
    if (sub_10004C0B4(v2, &v11, &v10) != 101)
    {
      char v3 = *(sqlite3 **)(v2 + 32);
      BOOL v4 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (v3)
      {
        if (v4)
        {
          uint64_t v5 = sqlite3_errmsg(v3);
          sub_1000CACC8((uint64_t)v5, (uint64_t)v12);
        }
      }

      else if (v4)
      {
        sub_1000CAC70();
      }
    }
  }

  else
  {
    sqlite3_int64 v6 = *(sqlite3 **)(v2 + 32);
    BOOL v7 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v6)
    {
      if (v7)
      {
        BOOL v8 = sqlite3_errmsg(v6);
        sub_1000CAC3C((uint64_t)v8, (uint64_t)v12);
      }
    }

    else if (v7)
    {
      sub_1000CABE4();
    }
  }

  return sub_10004C6D4(&v11, 0LL);
}

void sub_1000C27CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

BOOL sub_1000C27F0(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t v2 = *v1;
  BOOL v12 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
  sub_10004C38C(v2, "SELECT transform_id FROM enabled_transforms_view WHERE transform_uuid=?1 LIMIT 1;", 0, &v12);
  if (v12)
  {
    sub_10004C160(v2, &v12, 1, v1[1]);
    int v3 = sub_10004C078(v2, &v12);
    BOOL v4 = v3 == 100;
    if ((v3 & 0xFFFFFFFE) != 0x64)
    {
      uint64_t v5 = *(sqlite3 **)(v2 + 32);
      BOOL v6 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (v5)
      {
        if (v6)
        {
          BOOL v7 = sqlite3_errmsg(v5);
          sub_1000CADE0((uint64_t)v7, (uint64_t)v13);
        }
      }

      else if (v6)
      {
        sub_1000CAD88();
      }
    }
  }

  else
  {
    BOOL v8 = *(sqlite3 **)(v2 + 32);
    BOOL v9 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v8)
    {
      if (v9)
      {
        uint64_t v10 = sqlite3_errmsg(v8);
        sub_1000CAD54((uint64_t)v10, (uint64_t)v13);
      }
    }

    else if (v9)
    {
      sub_1000CACFC();
    }

    BOOL v4 = 0LL;
  }

  sub_10004C6D4(&v12, 0LL);
  return v4;
}

void sub_1000C2958(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1000C297C(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t v2 = *v1;
  if (sqlite3_exec( *(sqlite3 **)(*v1 + 32),  "DELETE FROM disabled_transforms WHERE (disable_reason=budgeted OR disable_reason IS NULL);",
         0LL,
         0LL,
         0LL))
  {
    int v3 = *(sqlite3 **)(v2 + 32);
    BOOL v4 = (os_log_s *)qword_100131930;
    BOOL v5 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v3)
    {
      if (v5) {
        sub_1000CAE6C(v3, v4);
      }
    }

    else if (v5)
    {
      sub_1000CAE14();
    }
  }

uint64_t sub_1000C2A04(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)v1;
  unint64_t v13 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
  sub_10004C38C(v2, "UPDATE sampling SET disable_sampling=?1;", 0, &v13);
  if (!v13)
  {
    BOOL v6 = *(sqlite3 **)(v2 + 32);
    BOOL v7 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v6)
    {
      if (v7)
      {
        BOOL v8 = sqlite3_errmsg(v6);
        sub_1000CAF34((uint64_t)v8, (uint64_t)buf);
      }
    }

    else if (v7)
    {
      sub_1000CAEDC();
    }

    goto LABEL_16;
  }

  *(void *)std::string buf = **(unsigned __int8 **)(v1 + 8);
  sub_10004C1E4(v2, &v13, 1, (sqlite3_int64 *)buf);
  *(void *)std::string buf = 0LL;
  if (sub_10004C0B4(v2, &v13, buf) != 101)
  {
    BOOL v9 = *(sqlite3 **)(v2 + 32);
    BOOL v10 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v9)
    {
      if (v10)
      {
        BOOL v11 = sqlite3_errmsg(v9);
        sub_1000CAFC0((uint64_t)v11, (uint64_t)buf);
      }
    }

    else if (v10)
    {
      sub_1000CAF68();
    }

void sub_1000C2BD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

BOOL sub_1000C2BF4(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t v2 = *v1;
  BOOL v11 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
  sub_10004C38C(v2, "SELECT COUNT(*) FROM enabled_event_names_view WHERE event_name=?1", 0, &v11);
  if (!v11)
  {
    int v4 = *(sqlite3 **)(v2 + 32);
    BOOL v5 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v4)
    {
      if (v5)
      {
        BOOL v6 = sqlite3_errmsg(v4);
        sub_1000CB04C((uint64_t)v6, (uint64_t)v12);
      }
    }

    else if (v5)
    {
      sub_1000CAFF4();
    }

    goto LABEL_14;
  }

  sub_10004C160(v2, &v11, 1, v1[1]);
  if (sub_10004C078(v2, &v11) != 100)
  {
    BOOL v7 = *(sqlite3 **)(v2 + 32);
    BOOL v8 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v7)
    {
      if (v8)
      {
        BOOL v9 = sqlite3_errmsg(v7);
        sub_1000CB0D8((uint64_t)v9, (uint64_t)v12);
      }
    }

    else if (v8)
    {
      sub_1000CB080();
    }

void sub_1000C2D64(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1000C2D88(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  uint64_t v2 = v1[1];
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  sub_1000712D0(&v17, "com.apple.analyticsd.store-config");
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  uint8_t v16 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr))(*(void *)*v1 + 16LL))(&v15);
  if ((_BYTE)v15)
  {
    unint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
    sub_100040F2C((uint64_t)&v18, (void *)(v2 + 32));
    if (BYTE1(v19))
    {
      BOOL v3 = (sqlite3_stmt *)sub_1000BA074(v2, (uint64_t)&v15);
      if (v3)
      {
        int v22 = v3;
        __int128 v23 = 0u;
        __int128 v24 = 0u;
        __int128 v25 = 0u;
        __int128 v26 = 0u;
        __int128 v27 = 0u;
        __int128 v28 = 0u;
        __int128 v29 = 0u;
        __int128 v30 = 0u;
        __int128 v31 = 0u;
        __int128 v32 = 0u;
        __int16 v14 = 0;
        uint64_t v4 = *v1;
        BOOL v5 = (uint8_t *)operator new(0x20uLL);
        *(void *)BOOL v5 = &off_10012D9C8;
        *((void *)v5 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = &v14;
        *((void *)v5 + sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = v2;
        *((void *)v5 + 3) = &v22;
        uint64_t v21 = v5;
        uint64_t v6 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(void *)v4 + 24LL))(v4, buf);
        BOOL v7 = v21;
        if (v21 == buf)
        {
          uint64_t v8 = 4LL;
          BOOL v7 = buf;
        }

        else
        {
          if (!v21)
          {
LABEL_16:
            BOOL v12 = (os_log_s *)qword_100131930;
            if ((v6 & 1) != 0)
            {
              if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)std::string buf = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "[Config Store] Config store complete!",  buf,  2u);
              }
            }

            else
            {
              if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_FAULT)) {
                sub_1000CB1F0();
              }
              sub_100040F68((uint64_t)&v18);
              sub_10004C6FC(v2);
              sub_1000C15CC(v2);
            }

            sub_1000C3384(&v22);
            goto LABEL_26;
          }

          uint64_t v8 = 5LL;
        }

        (*(void (**)(void))(*(void *)v7 + 8 * v8))();
        goto LABEL_16;
      }

      sub_100040F68((uint64_t)&v18);
    }

    else
    {
      BOOL v9 = *(sqlite3 **)(v2 + 32);
      BOOL v10 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (v9)
      {
        if (v10)
        {
          BOOL v11 = sqlite3_errmsg(v9);
          sub_1000CB1BC((uint64_t)v11, (uint64_t)&v22);
        }
      }

      else if (v10)
      {
        sub_1000CB164();
      }
    }

    uint64_t v6 = 0LL;
LABEL_26:
    sub_100041140((uint64_t)&v18);
    goto LABEL_27;
  }

  if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR)) {
    sub_1000CB10C();
  }
  uint64_t v6 = 0LL;
LABEL_27:
  sub_1000041AC((uint64_t)&v15);
  sub_10000425C(&v16, v15);
  sub_100071304(&v17);
  return v6;
}

void sub_1000C3034(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  va_copy(va2, va1);
  BOOL v5 = va_arg(va2, uint64_t *);
  va_copy(va3, va2);
  uint64_t v7 = va_arg(va3, void);
  sub_100041140((uint64_t)va3);
  sub_1000041AC((uint64_t)va);
  sub_10000425C((uint64_t **)va1, v3);
  sub_100071304((uint64_t *)va2);
  _Unwind_Resume(a1);
}

__n128 sub_1000C3090(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &off_10012D9C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + sub_100007004((uint64_t)v9 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1000C30D0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10012D9C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + sub_100007004((uint64_t)v9 + 8) = result;
  return result;
}

uint64_t sub_1000C30F8(uint64_t a1, int *a2, uint64_t a3)
{
  int v5 = *a2;
  v14[0] = *(_BYTE *)a3;
  unint64_t v15 = *(uint64_t **)(a3 + 8);
  sub_1000041AC(a3);
  *(_BYTE *)a3 = 0;
  *(void *)(a3 + sub_100007004((uint64_t)v9 + 8) = 0LL;
  sub_1000041AC((uint64_t)v14);
  uint64_t v6 = *(_WORD **)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  __int16 v8 = *v6 + 1;
  _WORD *v6 = v8;
  if ((unsigned __int16)((v8 << 14) | ((unsigned __int16)(23593 * v8) >> 2)) > 0x28Fu)
  {
LABEL_2:
    switch(v5)
    {
      case 1:
        uint64_t v9 = sub_1000BD934(v7, *(sqlite3_int64 **)(a1 + 24), v14);
        goto LABEL_18;
      case 2:
        uint64_t v9 = sub_1000BDC94(v7, *(sqlite3_int64 **)(a1 + 24), v14);
        goto LABEL_18;
      case 3:
        uint64_t v9 = sub_1000BE084(v7, *(sqlite3_int64 **)(a1 + 24), v14);
        goto LABEL_18;
      case 4:
        uint64_t v9 = sub_1000BE100(v7, *(sqlite3_int64 **)(a1 + 24), v14);
        goto LABEL_18;
      case 5:
        uint64_t v9 = sub_1000BE4F0(v7, *(sqlite3_int64 **)(a1 + 24), v14);
        goto LABEL_18;
      case 6:
        uint64_t v9 = sub_1000BE56C(v7, *(sqlite3_int64 **)(a1 + 24), v14);
        goto LABEL_18;
      case 7:
        uint64_t v9 = sub_1000BED48(v7, *(sqlite3_int64 **)(a1 + 24), v14);
        goto LABEL_18;
      case 8:
        uint64_t v9 = sub_1000BE958(v7, *(sqlite3_int64 **)(a1 + 24), v14);
LABEL_18:
        uint64_t v11 = v9;
        break;
      default:
        uint64_t v11 = 1LL;
        break;
    }

    goto LABEL_19;
  }

  if (!sqlite3_db_cacheflush(*(sqlite3 **)(v7 + 32)))
  {
    HIDWORD(v1sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = 652835029 * **(unsigned __int16 **)(a1 + 8);
    LODWORD(v1sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = HIDWORD(v12);
    goto LABEL_2;
  }

  if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_FAULT))
  {
    BOOL v10 = sqlite3_errmsg(*(sqlite3 **)(v7 + 32));
    sub_1000CB254((uint64_t)v10, (uint64_t)v16);
  }

  uint64_t v11 = 0LL;
LABEL_19:
  sub_1000041AC((uint64_t)v14);
  sub_10000425C(&v15, v14[0]);
  return v11;
}

void sub_1000C3314( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9)
{
}

uint64_t sub_1000C333C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void (**sub_1000C3378())(std::__shared_weak_count *__hidden this, const std::type_info *)
{
}

sqlite3_stmt **sub_1000C3384(sqlite3_stmt **a1)
{
  return a1;
}

void sub_1000C3494(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(uint64_t **)(a1 + 40);
  uint64_t v4 = *v3;
  int v5 = (sqlite3_stmt **)(*v3 + 128);
  if (*v5
    || (sub_10004C38C( *v3,  "SELECT transform_def, derived_sampling_perc FROM eligible_transforms_view WHERE transform_uuid=?1;",
          1,
          v17),
        uint64_t v6 = v17[0],
        v17[0] = 0LL,
        sub_10004C6D4(v5, v6),
        sub_10004C6D4(v17, 0LL),
        *(void *)(v4 + 128)))
  {
    uint8_t v16 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
    sub_100040E10(&v16, v5);
    sub_10004C160(v4, v5, 1, v3[1]);
    if (sub_10004C078(v4, v5) == 100)
    {
      uint64_t v7 = (char *)sub_10004C280(v4, v5, 0);
      sub_10004C354(v4, v5, 1);
      uint64_t v9 = v8;
      sub_100005064((void *)a2, v7);
      *(void *)(a2 + 24) = v9;
    }

    else
    {
      BOOL v10 = *(sqlite3 **)(v4 + 32);
      BOOL v11 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (v10)
      {
        if (v11)
        {
          unint64_t v12 = sqlite3_errmsg(v10);
          sub_1000CB3BC((uint64_t)v12, (uint64_t)v17);
        }
      }

      else if (v11)
      {
        sub_1000CB364();
      }

      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
    }

    sub_100040E1C(&v16);
  }

  else
  {
    unint64_t v13 = *(sqlite3 **)(v4 + 32);
    __int16 v14 = (os_log_s *)qword_100131930;
    BOOL v15 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v13)
    {
      if (v15) {
        sub_1000CB2EC(v13, v14);
      }
    }

    else if (v15)
    {
      sub_1000CB294();
    }

    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }

void sub_1000C3668(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

double sub_1000C3688(uint64_t a1)
{
  (*(void (**)(__int128 *__return_ptr))(**(void **)(a1 + 40) + 16LL))(&v5);
  uint64_t v2 = *(void *)(a1 + 32);
  __int128 v3 = v5;
  *(void *)(v2 + 16) = v6;
  *(_OWORD *)uint64_t v2 = v3;
  double result = v7;
  *(double *)(v2 + 24) = v7;
  return result;
}

BOOL sub_1000C371C(uint64_t a1)
{
  uint64_t v1 = *(sqlite3_stmt ****)(a1 + 40);
  uint64_t v2 = (uint64_t)v1[1];
  sub_10004C38C(v2, "SELECT transform_def FROM enabled_transforms_view", 0, &v10);
  __int128 v3 = *v1;
  uint64_t v4 = v10;
  BOOL v10 = 0LL;
  sub_10004C6D4(v3, v4);
  sub_10004C6D4(&v10, 0LL);
  __int128 v5 = **v1;
  if (!v5)
  {
    uint64_t v6 = *(sqlite3 **)(v2 + 32);
    double v7 = (os_log_s *)qword_100131930;
    BOOL v8 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v6)
    {
      if (v8) {
        sub_1000CB448(v6, v7);
      }
    }

    else if (v8)
    {
      sub_1000CB3F0();
    }
  }

  return v5 != 0LL;
}

uint64_t sub_1000C3808(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)v1;
  int v3 = sub_10004C078(*(void *)v1, *(sqlite3_stmt ***)(v1 + 8));
  if (v3 == 100)
  {
    **(void **)(v1 + 16) = sub_10004C280(v2, *(sqlite3_stmt ***)(v1 + 8), 0);
    if (**(void **)(v1 + 16))
    {
      return 1LL;
    }

    else
    {
      BOOL v8 = (os_log_s *)qword_100131930;
      uint64_t v7 = 1LL;
      if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)BOOL v10 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "[Config Store] WARNING: Event query weirdness: got a row but no definition? (all-enabled-transforms)",  v10,  2u);
      }
    }
  }

  else
  {
    if (v3 != 101)
    {
      uint64_t v4 = *(sqlite3 **)(v2 + 32);
      __int128 v5 = (os_log_s *)qword_100131930;
      BOOL v6 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (v4)
      {
        if (v6) {
          sub_1000CB510(v4, v5);
        }
      }

      else if (v6)
      {
        sub_1000CB4B8();
      }
    }

    return 0LL;
  }

  return v7;
}

sqlite3_stmt **sub_1000C3940(uint64_t a1)
{
  return sub_10004C6D4(**(sqlite3_stmt ****)(a1 + 40), 0LL);
}

BOOL sub_1000C3950(uint64_t a1)
{
  uint64_t v1 = *(sqlite3_stmt ****)(a1 + 40);
  uint64_t v2 = (uint64_t)v1[1];
  sub_10004C38C(v2, "SELECT transform_def FROM disabled_transforms_view", 0, &v10);
  int v3 = *v1;
  uint64_t v4 = v10;
  BOOL v10 = 0LL;
  sub_10004C6D4(v3, v4);
  sub_10004C6D4(&v10, 0LL);
  __int128 v5 = **v1;
  if (!v5)
  {
    BOOL v6 = *(sqlite3 **)(v2 + 32);
    uint64_t v7 = (os_log_s *)qword_100131930;
    BOOL v8 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v6)
    {
      if (v8) {
        sub_1000CB5D8(v6, v7);
      }
    }

    else if (v8)
    {
      sub_1000CB580();
    }
  }

  return v5 != 0LL;
}

uint64_t sub_1000C3A3C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)v1;
  int v3 = sub_10004C078(*(void *)v1, *(sqlite3_stmt ***)(v1 + 8));
  if (v3 == 100)
  {
    **(void **)(v1 + 16) = sub_10004C280(v2, *(sqlite3_stmt ***)(v1 + 8), 0);
    if (**(void **)(v1 + 16))
    {
      return 1LL;
    }

    else
    {
      BOOL v8 = (os_log_s *)qword_100131930;
      uint64_t v7 = 1LL;
      if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)BOOL v10 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "[Config Store] WARNING: Event query weirdness: got a row but no definition? (all-disabled-transforms)",  v10,  2u);
      }
    }
  }

  else
  {
    if (v3 != 101)
    {
      uint64_t v4 = *(sqlite3 **)(v2 + 32);
      __int128 v5 = (os_log_s *)qword_100131930;
      BOOL v6 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (v4)
      {
        if (v6) {
          sub_1000CB6A0(v4, v5);
        }
      }

      else if (v6)
      {
        sub_1000CB648();
      }
    }

    return 0LL;
  }

  return v7;
}

sqlite3_stmt **sub_1000C3B74(uint64_t a1)
{
  return sub_10004C6D4(**(sqlite3_stmt ****)(a1 + 40), 0LL);
}

uint64_t sub_1000C3B84(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(sqlite3_stmt ***)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  if (**(void **)v1
    || (sub_10004C38C( *(void *)(v1 + 8),  "SELECT transform_uuid, transform_def, derived_sampling_perc, transform_started_aggregating_timestamp FROM enab led_transforms_by_event_view WHERE event_name=?1;",
          1,
          &v12),
        uint64_t v4 = *(sqlite3_stmt ***)v1,
        __int128 v5 = v12,
        unint64_t v12 = 0LL,
        sub_10004C6D4(v4, v5),
        sub_10004C6D4(&v12, 0LL),
        uint64_t v2 = *(sqlite3_stmt ***)v1,
        **(void **)v1))
  {
    uint64_t v6 = *(void *)(v1 + 16);
    uint64_t v7 = 1LL;
    sub_10004C160(v3, v2, 1, v6);
  }

  else
  {
    uint64_t v9 = *(sqlite3 **)(v3 + 32);
    BOOL v10 = (os_log_s *)qword_100131930;
    BOOL v11 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v9)
    {
      if (v11) {
        sub_1000CB768(v9, v10);
      }
    }

    else if (v11)
    {
      sub_1000CB710();
    }

    return 0LL;
  }

  return v7;
}

uint64_t sub_1000C3C88(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)v1;
  int v3 = sub_10004C078(*(void *)v1, *(sqlite3_stmt ***)(v1 + 8));
  if (v3 != 100)
  {
    if (v3 != 101)
    {
      uint64_t v4 = *(sqlite3 **)(v2 + 32);
      __int128 v5 = (os_log_s *)qword_100131930;
      BOOL v6 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (v4)
      {
        if (v6) {
          sub_1000CB830(v4, v5);
        }
      }

      else if (v6)
      {
        sub_1000CB7D8();
      }
    }

    return 0LL;
  }

  **(void **)(v1 + 16) = sub_10004C280(v2, *(sqlite3_stmt ***)(v1 + 8), 0);
  if (!**(void **)(v1 + 16))
  {
    __int16 v14 = (os_log_s *)qword_100131930;
    uint64_t v12 = 1LL;
    if (!os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_INFO)) {
      return v12;
    }
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    BOOL v15 = "[Config Store] WARNING: Event query weirdness: got a row but no transform uuid? (transforms-for-event)";
LABEL_19:
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, v15, (uint8_t *)&__p, 2u);
    return v12;
  }

  **(void **)(v1 + 24) = sub_10004C280(v2, *(sqlite3_stmt ***)(v1 + 8), 1);
  if (!**(void **)(v1 + 24))
  {
    __int16 v14 = (os_log_s *)qword_100131930;
    uint64_t v12 = 1LL;
    if (!os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_INFO)) {
      return v12;
    }
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    BOOL v15 = "[Config Store] WARNING: Event query weirdness: got a row but no transform definition? (transforms-for-event)";
    goto LABEL_19;
  }

  sub_10004C354(v2, *(sqlite3_stmt ***)(v1 + 8), 2);
  **(void **)(v1 + 3sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = v7;
  BOOL v8 = (char *)sub_10004C280(v2, *(sqlite3_stmt ***)(v1 + 8), 3);
  if (v8)
  {
    sub_100005064(&__p, v8);
    unint64_t v9 = sub_10003E010(&__p, (uint64_t)"%Y-%m-%d %H:%M:%S");
    uint64_t v10 = *(void *)(v1 + 40);
    *(void *)uint64_t v10 = v9;
    *(_BYTE *)(v10 + sub_100007004((uint64_t)v9 + 8) = v11;
  }

  else
  {
    uint64_t v16 = *(void *)(v1 + 40);
    if (!*(_BYTE *)(v16 + 8)) {
      *(_BYTE *)(v16 + sub_100007004((uint64_t)v9 + 8) = 1;
    }
    *(void *)uint64_t v16 = 0x8000000000000000LL;
  }

  return 1LL;
}

void sub_1000C3EA0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

sqlite3_stmt **sub_1000C3EC4(uint64_t a1)
{
  uint64_t v1 = *(void ***)(a1 + 40);
  int v3 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
  sub_100040E10(&v3, *v1);
  return sub_100040E1C(&v3);
}

BOOL sub_1000C3F28(uint64_t a1)
{
  uint64_t v1 = *(sqlite3_stmt ****)(a1 + 40);
  uint64_t v2 = (uint64_t)v1[1];
  sub_10004C38C(v2, "SELECT event_name FROM enabled_event_names_view", 0, &v10);
  int v3 = *v1;
  uint64_t v4 = v10;
  uint64_t v10 = 0LL;
  sub_10004C6D4(v3, v4);
  sub_10004C6D4(&v10, 0LL);
  __int128 v5 = **v1;
  if (!v5)
  {
    BOOL v6 = *(sqlite3 **)(v2 + 32);
    uint64_t v7 = (os_log_s *)qword_100131930;
    BOOL v8 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v6)
    {
      if (v8) {
        sub_1000CB8F8(v6, v7);
      }
    }

    else if (v8)
    {
      sub_1000CB8A0();
    }
  }

  return v5 != 0LL;
}

uint64_t sub_1000C4014(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)v1;
  int v3 = sub_10004C078(*(void *)v1, *(sqlite3_stmt ***)(v1 + 8));
  if (v3 == 100)
  {
    **(void **)(v1 + 16) = sub_10004C280(v2, *(sqlite3_stmt ***)(v1 + 8), 0);
    if (**(void **)(v1 + 16))
    {
      return 1LL;
    }

    else
    {
      BOOL v8 = (os_log_s *)qword_100131930;
      uint64_t v7 = 1LL;
      if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t v10 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "[Config Store] WARNING: Active-Event query weirdness: got a row but no definition? (all-active-events)",  v10,  2u);
      }
    }
  }

  else
  {
    if (v3 != 101)
    {
      uint64_t v4 = *(sqlite3 **)(v2 + 32);
      __int128 v5 = (os_log_s *)qword_100131930;
      BOOL v6 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (v4)
      {
        if (v6) {
          sub_1000CB9C0(v4, v5);
        }
      }

      else if (v6)
      {
        sub_1000CB968();
      }
    }

    return 0LL;
  }

  return v7;
}

sqlite3_stmt **sub_1000C414C(uint64_t a1)
{
  return sub_10004C6D4(**(sqlite3_stmt ****)(a1 + 40), 0LL);
}

uint64_t sub_1000C415C(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 40);
  uint64_t v7 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
  sub_10004C38C(v1, "SELECT COUNT(*) FROM enabled_event_names_view", 0, &v7);
  if (!v7)
  {
    int v3 = *(sqlite3 **)(v1 + 32);
    BOOL v4 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v3)
    {
      if (v4)
      {
        __int128 v5 = sqlite3_errmsg(v3);
        sub_1000CBA88((uint64_t)v5, (uint64_t)v8);
      }
    }

    else if (v4)
    {
      sub_1000CBA30();
    }

    goto LABEL_9;
  }

  if (sub_10004C078(v1, &v7) != 100)
  {
LABEL_9:
    uint64_t v2 = 0LL;
    goto LABEL_10;
  }

  uint64_t v2 = sub_10004C31C(v1, &v7, 0);
LABEL_10:
  sub_10004C6D4(&v7, 0LL);
  return v2;
}

void sub_1000C4264(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1000C4284(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16LL))();
  **(_DWORD **)(a1 + 3sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = result;
  return result;
}

BOOL sub_1000C42B8(uint64_t a1)
{
  uint64_t v1 = *(sqlite3_stmt ****)(a1 + 40);
  uint64_t v2 = (uint64_t)v1[1];
  sub_10004C38C(v2, "SELECT event_name, event_type, event_defType, event_config FROM eligible_eventdef_view", 0, &v10);
  int v3 = *v1;
  BOOL v4 = v10;
  uint64_t v10 = 0LL;
  sub_10004C6D4(v3, v4);
  sub_10004C6D4(&v10, 0LL);
  __int128 v5 = **v1;
  if (!v5)
  {
    BOOL v6 = *(sqlite3 **)(v2 + 32);
    uint64_t v7 = (os_log_s *)qword_100131930;
    BOOL v8 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v6)
    {
      if (v8) {
        sub_1000CBB14(v6, v7);
      }
    }

    else if (v8)
    {
      sub_1000CBABC();
    }
  }

  return v5 != 0LL;
}

uint64_t sub_1000C43A4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)v1;
  int v3 = sub_10004C078(*(void *)v1, *(sqlite3_stmt ***)(v1 + 8));
  if (v3 == 100)
  {
    **(void **)(v1 + 16) = sub_10004C280(v2, *(sqlite3_stmt ***)(v1 + 8), 0);
    uint64_t v7 = 1LL;
    **(void **)(v1 + 24) = sub_10004C280(v2, *(sqlite3_stmt ***)(v1 + 8), 1);
    **(void **)(v1 + 3sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = sub_10004C280(v2, *(sqlite3_stmt ***)(v1 + 8), 2);
    **(void **)(v1 + 40) = sub_10004C280(v2, *(sqlite3_stmt ***)(v1 + 8), 3);
    if (!**(void **)(v1 + 40))
    {
      BOOL v8 = (os_log_s *)qword_100131930;
      if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t v10 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "[Config Store] WARNING: All-eventdefs query weirdness: got a row but no definition?",  v10,  2u);
      }
    }
  }

  else
  {
    if (v3 != 101)
    {
      BOOL v4 = *(sqlite3 **)(v2 + 32);
      __int128 v5 = (os_log_s *)qword_100131930;
      BOOL v6 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (v4)
      {
        if (v6) {
          sub_1000CBBDC(v4, v5);
        }
      }

      else if (v6)
      {
        sub_1000CBB84();
      }
    }

    return 0LL;
  }

  return v7;
}

sqlite3_stmt **sub_1000C4524(uint64_t a1)
{
  return sub_10004C6D4(**(sqlite3_stmt ****)(a1 + 40), 0LL);
}

BOOL sub_1000C4534(uint64_t a1)
{
  uint64_t v1 = *(sqlite3_stmt ****)(a1 + 40);
  uint64_t v2 = (uint64_t)v1[1];
  sub_10004C38C( v2,  "SELECT event_name, event_defType, event_config FROM eligible_eventdef_view WHERE event_xpc_type_t type = ?1",  0,  &v10);
  int v3 = *v1;
  BOOL v4 = v10;
  uint64_t v10 = 0LL;
  sub_10004C6D4(v3, v4);
  sub_10004C6D4(&v10, 0LL);
  __int128 v5 = **v1;
  if (v5)
  {
    sub_10004C160(v2, *v1, 1, (uint64_t)v1[2]);
  }

  else
  {
    BOOL v6 = *(sqlite3 **)(v2 + 32);
    uint64_t v7 = (os_log_s *)qword_100131930;
    BOOL v8 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v6)
    {
      if (v8) {
        sub_1000CBCA4(v6, v7);
      }
    }

    else if (v8)
    {
      sub_1000CBC4C();
    }
  }

  return v5 != 0LL;
}

uint64_t sub_1000C4634(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = (os_log_s *)qword_100131930;
  if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_INFO))
  {
    BOOL v4 = *(void **)v1;
    int v12 = 136315138;
    unint64_t v13 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "[Config Store] Iterating all eventdefs of type %s",  (uint8_t *)&v12,  0xCu);
  }

  int v5 = sub_10004C078(v2, *(sqlite3_stmt ***)(v1 + 16));
  if (v5 == 100)
  {
    **(void **)(v1 + 24) = sub_10004C280(v2, *(sqlite3_stmt ***)(v1 + 16), 0);
    uint64_t v9 = 1LL;
    **(void **)(v1 + 3sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = sub_10004C280(v2, *(sqlite3_stmt ***)(v1 + 16), 1);
    **(void **)(v1 + 40) = sub_10004C280(v2, *(sqlite3_stmt ***)(v1 + 16), 2);
    if (!**(void **)(v1 + 40))
    {
      uint64_t v10 = (os_log_s *)qword_100131930;
      if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_INFO))
      {
        LOWORD(v1sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "[Config Store] WARNING: eventdef-with-type query weirdness: got a row but no definition?",  (uint8_t *)&v12,  2u);
      }
    }
  }

  else
  {
    if (v5 != 101)
    {
      BOOL v6 = *(sqlite3 **)(v2 + 32);
      uint64_t v7 = (os_log_s *)qword_100131930;
      BOOL v8 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (v6)
      {
        if (v8) {
          sub_1000CBD6C(v6, v7);
        }
      }

      else if (v8)
      {
        sub_1000CBD14();
      }
    }

    return 0LL;
  }

  return v9;
}

sqlite3_stmt **sub_1000C47EC(uint64_t a1)
{
  return sub_10004C6D4(**(sqlite3_stmt ****)(a1 + 40), 0LL);
}

BOOL sub_1000C47FC(uint64_t a1)
{
  uint64_t v1 = *(sqlite3_stmt ****)(a1 + 40);
  uint64_t v2 = (uint64_t)v1[1];
  sub_10004C38C( v2,  "SELECT modify_event_name, modify_event_defType, modify_event_config FROM eligible_modify_eventdef_view WHERE modify_ event_xpc_type_t type = ?1;",
    0,
    &v10);
  int v3 = *v1;
  BOOL v4 = v10;
  uint64_t v10 = 0LL;
  sub_10004C6D4(v3, v4);
  sub_10004C6D4(&v10, 0LL);
  int v5 = **v1;
  if (v5)
  {
    sub_10004C160(v2, *v1, 1, (uint64_t)v1[2]);
  }

  else
  {
    BOOL v6 = *(sqlite3 **)(v2 + 32);
    uint64_t v7 = (os_log_s *)qword_100131930;
    BOOL v8 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v6)
    {
      if (v8) {
        sub_1000CBE34(v6, v7);
      }
    }

    else if (v8)
    {
      sub_1000CBDDC();
    }
  }

  return v5 != 0LL;
}

uint64_t sub_1000C48FC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)v1;
  int v3 = sub_10004C078(*(void *)v1, *(sqlite3_stmt ***)(v1 + 8));
  if (v3 == 100)
  {
    **(void **)(v1 + 16) = sub_10004C280(v2, *(sqlite3_stmt ***)(v1 + 8), 0);
    uint64_t v7 = 1LL;
    **(void **)(v1 + 24) = sub_10004C280(v2, *(sqlite3_stmt ***)(v1 + 8), 1);
    **(void **)(v1 + 3sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = sub_10004C280(v2, *(sqlite3_stmt ***)(v1 + 8), 2);
    if (!**(void **)(v1 + 16))
    {
      BOOL v8 = (os_log_s *)qword_100131930;
      if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t v10 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "[Config Store] WARNING: modify-events-with-type query weirdness: got a row but no name?",  v10,  2u);
      }
    }
  }

  else
  {
    if (v3 != 101)
    {
      BOOL v4 = *(sqlite3 **)(v2 + 32);
      int v5 = (os_log_s *)qword_100131930;
      BOOL v6 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (v4)
      {
        if (v6) {
          sub_1000CBEFC(v4, v5);
        }
      }

      else if (v6)
      {
        sub_1000CBEA4();
      }
    }

    return 0LL;
  }

  return v7;
}

sqlite3_stmt **sub_1000C4A64(uint64_t a1)
{
  return sub_10004C6D4(**(sqlite3_stmt ****)(a1 + 40), 0LL);
}

uint64_t sub_1000C4A74(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(sqlite3_stmt ***)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  if (**(void **)v1
    || (sub_10004C38C( *(void *)(v1 + 8),  "SELECT modify_event_type, modify_event_defType, modify_event_config FROM eligible_modify_eventdef_view WHERE m odify_event_name = ?1;",
          1,
          &v12),
        BOOL v4 = *(sqlite3_stmt ***)v1,
        int v5 = v12,
        int v12 = 0LL,
        sub_10004C6D4(v4, v5),
        sub_10004C6D4(&v12, 0LL),
        uint64_t v2 = *(sqlite3_stmt ***)v1,
        **(void **)v1))
  {
    uint64_t v6 = *(void *)(v1 + 16);
    uint64_t v7 = 1LL;
    sub_10004C160(v3, v2, 1, v6);
  }

  else
  {
    uint64_t v9 = *(sqlite3 **)(v3 + 32);
    uint64_t v10 = (os_log_s *)qword_100131930;
    BOOL v11 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v9)
    {
      if (v11) {
        sub_1000CBFC4(v9, v10);
      }
    }

    else if (v11)
    {
      sub_1000CBF6C();
    }

    return 0LL;
  }

  return v7;
}

uint64_t sub_1000C4B78(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)v1;
  int v3 = sub_10004C078(*(void *)v1, *(sqlite3_stmt ***)(v1 + 8));
  if (v3 == 100)
  {
    **(void **)(v1 + 16) = sub_10004C280(v2, *(sqlite3_stmt ***)(v1 + 8), 0);
    **(void **)(v1 + 24) = sub_10004C280(v2, *(sqlite3_stmt ***)(v1 + 8), 1);
    **(void **)(v1 + 3sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = sub_10004C280(v2, *(sqlite3_stmt ***)(v1 + 8), 2);
    if (**(void **)(v1 + 16))
    {
      if (**(void **)(v1 + 32)) {
        return 1LL;
      }
      BOOL v8 = (os_log_s *)qword_100131930;
      uint64_t v7 = 1LL;
      if (!os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_INFO)) {
        return v7;
      }
      __int16 v12 = 0;
      uint64_t v9 = "[Config Store] WARNING: modify-eventdef query weirdness: got a row but no definition?";
      uint64_t v10 = (uint8_t *)&v12;
    }

    else
    {
      BOOL v8 = (os_log_s *)qword_100131930;
      uint64_t v7 = 1LL;
      if (!os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_INFO)) {
        return v7;
      }
      __int16 v13 = 0;
      uint64_t v9 = "[Config Store] WARNING: modify-eventdef query weirdness: got a row but no type?";
      uint64_t v10 = (uint8_t *)&v13;
    }

    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, v9, v10, 2u);
    return v7;
  }

  if (v3 != 101)
  {
    BOOL v4 = *(sqlite3 **)(v2 + 32);
    int v5 = (os_log_s *)qword_100131930;
    BOOL v6 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v4)
    {
      if (v6) {
        sub_1000CC08C(v4, v5);
      }
    }

    else if (v6)
    {
      sub_1000CC034();
    }
  }

  return 0LL;
}

sqlite3_stmt **sub_1000C4D2C(uint64_t a1)
{
  uint64_t v1 = *(void ***)(a1 + 40);
  int v3 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
  sub_100040E10(&v3, *v1);
  return sub_100040E1C(&v3);
}

BOOL sub_1000C4D90(uint64_t a1)
{
  uint64_t v1 = *(sqlite3_stmt ****)(a1 + 40);
  uint64_t v2 = (uint64_t)v1[1];
  sub_10004C38C(v2, "SELECT external_config_kind, external_config_def FROM enabled_external_configs_view", 0, &v10);
  int v3 = *v1;
  BOOL v4 = v10;
  uint64_t v10 = 0LL;
  sub_10004C6D4(v3, v4);
  sub_10004C6D4(&v10, 0LL);
  int v5 = **v1;
  if (!v5)
  {
    BOOL v6 = *(sqlite3 **)(v2 + 32);
    uint64_t v7 = (os_log_s *)qword_100131930;
    BOOL v8 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v6)
    {
      if (v8) {
        sub_1000CC154(v6, v7);
      }
    }

    else if (v8)
    {
      sub_1000CC0FC();
    }
  }

  return v5 != 0LL;
}

uint64_t sub_1000C4E7C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)v1;
  int v3 = sub_10004C078(*(void *)v1, *(sqlite3_stmt ***)(v1 + 8));
  if (v3 == 100)
  {
    **(void **)(v1 + 16) = sub_10004C280(v2, *(sqlite3_stmt ***)(v1 + 8), 0);
    uint64_t v7 = 1LL;
    **(void **)(v1 + 24) = sub_10004C280(v2, *(sqlite3_stmt ***)(v1 + 8), 1);
    if (!**(void **)(v1 + 24))
    {
      BOOL v8 = (os_log_s *)qword_100131930;
      if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t v10 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "[Config Store] WARNING: All-external-configs query weirdness: got a row but no definition?",  v10,  2u);
      }
    }
  }

  else
  {
    if (v3 != 101)
    {
      BOOL v4 = *(sqlite3 **)(v2 + 32);
      int v5 = (os_log_s *)qword_100131930;
      BOOL v6 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
      if (v4)
      {
        if (v6) {
          sub_1000CC21C(v4, v5);
        }
      }

      else if (v6)
      {
        sub_1000CC1C4();
      }
    }

    return 0LL;
  }

  return v7;
}

sqlite3_stmt **sub_1000C4FCC(uint64_t a1)
{
  return sub_10004C6D4(**(sqlite3_stmt ****)(a1 + 40), 0LL);
}

sqlite3_stmt **sub_1000C4FDC(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 40);
  uint64_t v2 = (os_log_s *)qword_100131930;
  if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "[Config Store] Debug dump current database state",  buf,  2u);
  }

  char v47 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
  sub_10004C38C( v1,  "SELECT config_uuid, config_enabled, config_last_enabled, config_last_disabled FROM configs;",
    0,
    &v47);
  if (v47)
  {
    while (sub_10004C078(v1, &v47) == 100)
    {
      int v3 = sub_10004C280(v1, &v47, 0);
      int v4 = sub_10004C31C(v1, &v47, 1);
      int v5 = sub_10004C280(v1, &v47, 2);
      BOOL v6 = sub_10004C280(v1, &v47, 3);
      uint64_t v7 = (os_log_s *)qword_100131930;
      if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_DEFAULT))
      {
        if (v3) {
          BOOL v8 = (const char *)v3;
        }
        else {
          BOOL v8 = "(null)";
        }
        *(_DWORD *)std::string buf = 136446978;
        *(void *)&uint8_t buf[4] = v8;
        if (v5) {
          uint64_t v9 = (const char *)v5;
        }
        else {
          uint64_t v9 = "(null)";
        }
        __int16 v54 = 1024;
        *(_DWORD *)int v55 = v4 != 0;
        if (v6) {
          uint64_t v10 = (const char *)v6;
        }
        else {
          uint64_t v10 = "(null)";
        }
        *(_WORD *)&uint8_t v55[4] = 2082;
        *(void *)&v55[6] = v9;
        __int16 v56 = 2082;
        BOOL v57 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[Config Store] - Config: uuid=%{public}s, enabled=%d, lastEnabled=%{public}s, lastDisabled=%{public}s",  buf,  0x26u);
      }
    }
  }

  else
  {
    BOOL v11 = *(sqlite3 **)(v1 + 32);
    BOOL v12 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v11)
    {
      if (v12)
      {
        __int16 v13 = sqlite3_errmsg(v11);
        sub_1000CC488((uint64_t)v13, (uint64_t)v52);
      }
    }

    else if (v12)
    {
      sub_1000CC430();
    }
  }

  sub_10004C38C(v1, "SELECT COUNT(*) FROM events;", 0, (sqlite3_stmt **)buf);
  __int16 v14 = *(sqlite3_stmt **)buf;
  *(void *)std::string buf = 0LL;
  sub_10004C6D4(&v47, v14);
  sub_10004C6D4((sqlite3_stmt **)buf, 0LL);
  if (v47)
  {
    if (sub_10004C078(v1, &v47) == 100)
    {
      BOOL v15 = (os_log_s *)qword_100131930;
      if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_DEFAULT))
      {
        sqlite3_int64 v16 = sub_10004C2E4(v1, &v47, 0);
        *(_DWORD *)std::string buf = 134217984;
        *(void *)&uint8_t buf[4] = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "[Config Store] - Events: count=%lld",  buf,  0xCu);
      }
    }
  }

  else
  {
    unint64_t v17 = *(sqlite3 **)(v1 + 32);
    BOOL v18 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v17)
    {
      if (v18)
      {
        unint64_t v19 = sqlite3_errmsg(v17);
        sub_1000CC370((uint64_t)v19, (uint64_t)v51);
      }
    }

    else if (v18)
    {
      sub_1000CC318();
    }
  }

  sub_10004C38C(v1, "SELECT event_id, event_name FROM events;", 0, (sqlite3_stmt **)buf);
  BOOL v20 = *(sqlite3_stmt **)buf;
  *(void *)std::string buf = 0LL;
  sub_10004C6D4(&v47, v20);
  sub_10004C6D4((sqlite3_stmt **)buf, 0LL);
  if (v47)
  {
    while (sub_10004C078(v1, &v47) == 100)
    {
      uint64_t v21 = (os_log_s *)qword_100131930;
      if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_DEFAULT))
      {
        sqlite3_int64 v22 = sub_10004C2E4(v1, &v47, 0);
        __int128 v23 = sub_10004C280(v1, &v47, 1);
        *(_DWORD *)std::string buf = 134218242;
        *(void *)&uint8_t buf[4] = v22;
        __int16 v54 = 2082;
        *(void *)int v55 = v23;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "[Config Store]   :: %lld -> %{public}s",  buf,  0x16u);
      }
    }
  }

  else
  {
    __int128 v24 = *(sqlite3 **)(v1 + 32);
    BOOL v25 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v24)
    {
      if (v25)
      {
        __int128 v26 = sqlite3_errmsg(v24);
        sub_1000CC370((uint64_t)v26, (uint64_t)v50);
      }
    }

    else if (v25)
    {
      sub_1000CC318();
    }
  }

  sub_10004C38C(v1, "SELECT COUNT(*) FROM transforms;", 0, (sqlite3_stmt **)buf);
  __int128 v27 = *(sqlite3_stmt **)buf;
  *(void *)std::string buf = 0LL;
  sub_10004C6D4(&v47, v27);
  sub_10004C6D4((sqlite3_stmt **)buf, 0LL);
  if (v47)
  {
    if (sub_10004C078(v1, &v47) == 100)
    {
      __int128 v28 = (os_log_s *)qword_100131930;
      if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_DEFAULT))
      {
        sqlite3_int64 v29 = sub_10004C2E4(v1, &v47, 0);
        *(_DWORD *)std::string buf = 134217984;
        *(void *)&uint8_t buf[4] = v29;
        _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "[Config Store] - Transforms: count=%lld",  buf,  0xCu);
      }
    }
  }

  else
  {
    __int128 v30 = *(sqlite3 **)(v1 + 32);
    BOOL v31 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v30)
    {
      if (v31)
      {
        __int128 v32 = sqlite3_errmsg(v30);
        sub_1000CC3FC((uint64_t)v32, (uint64_t)v49);
      }
    }

    else if (v31)
    {
      sub_1000CC3A4();
    }
  }

  sub_10004C38C(v1, "SELECT transform_id, transform_uuid FROM transforms;", 0, (sqlite3_stmt **)buf);
  std::string::size_type v33 = *(sqlite3_stmt **)buf;
  *(void *)std::string buf = 0LL;
  sub_10004C6D4(&v47, v33);
  sub_10004C6D4((sqlite3_stmt **)buf, 0LL);
  if (v47)
  {
    while (sub_10004C078(v1, &v47) == 100)
    {
      int v34 = (os_log_s *)qword_100131930;
      if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_DEFAULT))
      {
        sqlite3_int64 v35 = sub_10004C2E4(v1, &v47, 0);
        BOOL v36 = sub_10004C280(v1, &v47, 1);
        *(_DWORD *)std::string buf = 134218242;
        *(void *)&uint8_t buf[4] = v35;
        __int16 v54 = 2082;
        *(void *)int v55 = v36;
        _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "[Config Store]   :: %lld : %{public}s",  buf,  0x16u);
      }
    }
  }

  else
  {
    int v37 = *(sqlite3 **)(v1 + 32);
    BOOL v38 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v37)
    {
      if (v38)
      {
        __int16 v39 = sqlite3_errmsg(v37);
        sub_1000CC370((uint64_t)v39, (uint64_t)buf);
      }
    }

    else if (v38)
    {
      sub_1000CC318();
    }
  }

  sub_10004C38C(v1, "SELECT COUNT(*) FROM transform_events;", 0, (sqlite3_stmt **)v48);
  BOOL v40 = *(sqlite3_stmt **)v48;
  *(void *)BOOL v48 = 0LL;
  sub_10004C6D4(&v47, v40);
  sub_10004C6D4((sqlite3_stmt **)v48, 0LL);
  if (v47)
  {
    if (sub_10004C078(v1, &v47) == 100)
    {
      std::string v41 = (os_log_s *)qword_100131930;
      if (os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_DEFAULT))
      {
        sqlite3_int64 v42 = sub_10004C2E4(v1, &v47, 0);
        *(_DWORD *)BOOL v48 = 134217984;
        *(void *)&v48[4] = v42;
        _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "[Config Store] - Event-Transform Map: count=%lld",  v48,  0xCu);
      }
    }
  }

  else
  {
    int v43 = *(sqlite3 **)(v1 + 32);
    BOOL v44 = os_log_type_enabled((os_log_t)qword_100131930, OS_LOG_TYPE_ERROR);
    if (v43)
    {
      if (v44)
      {
        std::string v45 = sqlite3_errmsg(v43);
        sub_1000CC2E4((uint64_t)v45, (uint64_t)v48);
      }
    }

    else if (v44)
    {
      sub_1000CC28C();
    }
  }

  return sub_10004C6D4(&v47, 0LL);
}

void sub_1000C5748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void sub_1000C577C(uint64_t a1@<X8>)
{
  *(void *)(v1 - sub_100007004((uint64_t)v9 + 8) = a1;
}

void sub_1000C5794( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_1000C57A4()
{
}

void sub_1000C5804()
{
}

void sub_1000C5864()
{
}

void sub_1000C58BC()
{
}

void sub_1000C5914(uint64_t a1, uint64_t a2)
{
}

void sub_1000C5948()
{
  sub_100041164( (void *)&_mh_execute_header,  v0,  v1,  "[Config Store] ERROR: Config header with uuid '%{public}s' inserted but failed to return row id",  v2);
  sub_10000E1FC();
}

void sub_1000C59AC()
{
}

void sub_1000C5A10()
{
}

void sub_1000C5A74()
{
}

void sub_1000C5ACC(uint64_t a1, uint64_t a2)
{
}

void sub_1000C5B00()
{
}

void sub_1000C5B58(uint64_t a1, uint64_t a2)
{
}

void sub_1000C5B8C()
{
}

void sub_1000C5BE4(uint64_t a1, uint64_t a2)
{
}

void sub_1000C5C18()
{
}

void sub_1000C5C70(uint64_t a1, uint64_t a2)
{
}

void sub_1000C5CA4()
{
}

void sub_1000C5CFC(uint64_t a1, uint64_t a2)
{
}

void sub_1000C5D30()
{
}

void sub_1000C5D88(uint64_t a1, uint64_t a2)
{
}

void sub_1000C5DBC()
{
}

void sub_1000C5E14(uint64_t a1, uint64_t a2)
{
}

void sub_1000C5E48()
{
}

void sub_1000C5EA0(uint64_t a1, uint64_t a2)
{
}

void sub_1000C5ED4()
{
}

void sub_1000C5F2C(uint64_t a1, uint64_t a2)
{
}

void sub_1000C5F60()
{
}

void sub_1000C5FB8(uint64_t a1, uint64_t a2)
{
}

void sub_1000C5FEC()
{
}

void sub_1000C6050()
{
}

void sub_1000C60A8(uint64_t a1, uint64_t a2)
{
}

void sub_1000C60DC()
{
  sub_1000090AC( (void *)&_mh_execute_header,  v0,  v1,  "[Config Store] ERROR: Failed to insert sampling_def=%{public}s[null database]",  v2);
  sub_10000E1FC();
}

void sub_1000C6140()
{
}

void sub_1000C6198(uint64_t a1, uint64_t a2)
{
}

void sub_1000C61CC()
{
}

void sub_1000C6224()
{
}

void sub_1000C627C(uint64_t a1, uint64_t a2)
{
}

void sub_1000C62B0()
{
  sub_1000090AC( (void *)&_mh_execute_header,  v0,  v1,  "[Config Store] ERROR: Failed to insert transform uuid='%{public}s'[null database]",  v2);
  sub_10000E1FC();
}

void sub_1000C6314()
{
}

void sub_1000C6378()
{
}

void sub_1000C63D0(uint64_t a1, uint64_t a2)
{
}

void sub_1000C6404()
{
}

void sub_1000C645C(uint64_t a1, uint64_t a2)
{
}

void sub_1000C6490()
{
}

void sub_1000C64E8()
{
}

void sub_1000C6540()
{
}

void sub_1000C6598()
{
}

void sub_1000C65F0()
{
}

void sub_1000C6648(uint64_t a1, uint64_t a2)
{
}

void sub_1000C667C()
{
  sub_1000090AC( (void *)&_mh_execute_header,  v0,  v1,  "[Config Store] ERROR: Failed to insert event def uuid='%{public}s'[null database]",  v2);
  sub_10000E1FC();
}

void sub_1000C66E0()
{
}

void sub_1000C6738(uint64_t a1, uint64_t a2)
{
}

void sub_1000C676C()
{
}

void sub_1000C67C4()
{
}

void sub_1000C681C()
{
}

void sub_1000C6874()
{
}

void sub_1000C68CC()
{
}

void sub_1000C6924()
{
}

void sub_1000C697C(uint64_t a1, uint64_t a2)
{
}

void sub_1000C69B0()
{
  sub_1000090AC( (void *)&_mh_execute_header,  v0,  v1,  "[Config Store] ERROR: Failed to insert modify event def uuid='%{public}s'[null database]",  v2);
  sub_10000E1FC();
}

void sub_1000C6A14()
{
}

void sub_1000C6A78()
{
}

void sub_1000C6AD0(uint64_t a1, uint64_t a2)
{
}

void sub_1000C6B04()
{
}

void sub_1000C6B5C(uint64_t a1, uint64_t a2)
{
}

void sub_1000C6B90()
{
}

void sub_1000C6BE8(uint64_t a1, uint64_t a2)
{
}

void sub_1000C6C1C()
{
}

void sub_1000C6C74(uint64_t a1, uint64_t a2)
{
}

void sub_1000C6CA8()
{
}

void sub_1000C6D00(uint64_t a1, uint64_t a2)
{
}

void sub_1000C6D34()
{
}

void sub_1000C6D8C(uint64_t a1, uint64_t a2)
{
}

void sub_1000C6DC0()
{
}

void sub_1000C6E18(uint64_t a1, uint64_t a2)
{
}

void sub_1000C6E4C()
{
}

void sub_1000C6EA4(uint64_t a1, uint64_t a2)
{
}

void sub_1000C6ED8()
{
}

void sub_1000C6F30(uint64_t a1, uint64_t a2)
{
}

void sub_1000C6F64()
{
}

void sub_1000C6FBC(uint64_t a1, uint64_t a2)
{
}

void sub_1000C6FF0()
{
}

void sub_1000C7048(uint64_t a1, uint64_t a2)
{
}

void sub_1000C707C()
{
}

void sub_1000C70D4(uint64_t a1, uint64_t a2)
{
}

void sub_1000C7108()
{
}

void sub_1000C7160(uint64_t a1, uint64_t a2)
{
}

void sub_1000C7194()
{
}

void sub_1000C71EC()
{
}

void sub_1000C7244()
{
}

void sub_1000C729C(uint64_t a1, uint64_t a2)
{
}

void sub_1000C72D0()
{
}

void sub_1000C7328()
{
}

void sub_1000C7380()
{
}

void sub_1000C73D8()
{
}

void sub_1000C7430(uint64_t a1, uint64_t a2)
{
}

void sub_1000C7464()
{
}

void sub_1000C74BC()
{
}

void sub_1000C7514()
{
}

void sub_1000C756C()
{
}

void sub_1000C75C4(uint64_t a1, uint64_t a2)
{
}

void sub_1000C75F8()
{
}

void sub_1000C7650()
{
}

void sub_1000C76A8()
{
}

void sub_1000C7700(uint64_t a1, uint64_t a2)
{
}

void sub_1000C7734()
{
}

void sub_1000C778C()
{
}

void sub_1000C77E4()
{
}

void sub_1000C783C(uint64_t a1, uint64_t a2)
{
}

void sub_1000C7870()
{
}

void sub_1000C78C8(uint64_t a1, uint64_t a2)
{
}

void sub_1000C78FC()
{
}

void sub_1000C7954(uint64_t a1, uint64_t a2)
{
}

void sub_1000C7988()
{
}

void sub_1000C79E0(uint64_t a1, uint64_t a2)
{
}

void sub_1000C7A14()
{
}

void sub_1000C7A6C(uint64_t a1, uint64_t a2)
{
}

void sub_1000C7AA0()
{
}

void sub_1000C7AF8(uint64_t a1, uint64_t a2)
{
}

void sub_1000C7B2C()
{
}

void sub_1000C7B84(uint64_t a1, uint64_t a2)
{
}

void sub_1000C7BB8()
{
}

void sub_1000C7C10(uint64_t a1, uint64_t a2)
{
}

void sub_1000C7C44()
{
}

void sub_1000C7C9C(uint64_t a1, uint64_t a2)
{
}

void sub_1000C7CD0()
{
}

void sub_1000C7D28(uint64_t a1, uint64_t a2)
{
}

void sub_1000C7D5C()
{
}

void sub_1000C7DB4(uint64_t a1, uint64_t a2)
{
}

void sub_1000C7DE8()
{
}

void sub_1000C7E40(uint64_t a1, uint64_t a2)
{
}

void sub_1000C7E74()
{
}

void sub_1000C7ECC(uint64_t a1, uint64_t a2)
{
}

void sub_1000C7F00()
{
}

void sub_1000C7F58(uint64_t a1, uint64_t a2)
{
}

void sub_1000C7F8C()
{
}

void sub_1000C7FE4(uint64_t a1, uint64_t a2)
{
}

void sub_1000C8018()
{
}

void sub_1000C8070(uint64_t a1, uint64_t a2)
{
}

void sub_1000C80A4()
{
}

void sub_1000C80FC(uint64_t a1, uint64_t a2)
{
}

void sub_1000C8130()
{
}

void sub_1000C8188(uint64_t a1, uint64_t a2)
{
}

void sub_1000C81BC()
{
}

void sub_1000C8214(uint64_t a1, uint64_t a2)
{
}

void sub_1000C8248()
{
}

void sub_1000C82A0(uint64_t a1, uint64_t a2)
{
}

void sub_1000C82D4()
{
}

void sub_1000C832C(uint64_t a1, uint64_t a2)
{
}

void sub_1000C8360()
{
}

void sub_1000C83B8(uint64_t a1, uint64_t a2)
{
}

void sub_1000C83EC()
{
}

void sub_1000C8444(uint64_t a1, uint64_t a2)
{
}

void sub_1000C8478()
{
}

void sub_1000C84D0(uint64_t a1, uint64_t a2)
{
}

void sub_1000C8504()
{
}

void sub_1000C855C(uint64_t a1, uint64_t a2)
{
}

void sub_1000C8590()
{
}

void sub_1000C85E8(uint64_t a1, uint64_t a2)
{
}

void sub_1000C861C()
{
}

void sub_1000C8674(uint64_t a1, uint64_t a2)
{
}

void sub_1000C86A8()
{
}

void sub_1000C8700(uint64_t a1, uint64_t a2)
{
}

void sub_1000C8734()
{
}

void sub_1000C878C(uint64_t a1, uint64_t a2)
{
}

void sub_1000C87C0()
{
}

void sub_1000C8818(uint64_t a1, uint64_t a2)
{
}

void sub_1000C884C()
{
}

void sub_1000C88A4(uint64_t a1, uint64_t a2)
{
}

void sub_1000C88D8()
{
}

void sub_1000C8930(uint64_t a1, uint64_t a2)
{
}

void sub_1000C8964()
{
}

void sub_1000C89BC(uint64_t a1, uint64_t a2)
{
}

void sub_1000C89F0()
{
}

void sub_1000C8A48(uint64_t a1, uint64_t a2)
{
}

void sub_1000C8A7C()
{
}

void sub_1000C8AD4(uint64_t a1, uint64_t a2)
{
}

void sub_1000C8B08()
{
}

void sub_1000C8B60(uint64_t a1, uint64_t a2)
{
}

void sub_1000C8B94()
{
}

void sub_1000C8BEC(uint64_t a1, uint64_t a2)
{
}

void sub_1000C8C20()
{
}

void sub_1000C8C78(uint64_t a1, uint64_t a2)
{
}

void sub_1000C8CAC()
{
}

void sub_1000C8D04(uint64_t a1, uint64_t a2)
{
}

void sub_1000C8D38()
{
}

void sub_1000C8D90(uint64_t a1, uint64_t a2)
{
}

void sub_1000C8DC4()
{
}

void sub_1000C8E1C(uint64_t a1, uint64_t a2)
{
}

void sub_1000C8E50()
{
}

void sub_1000C8EA8(uint64_t a1, uint64_t a2)
{
}

void sub_1000C8EDC()
{
}

void sub_1000C8F34(uint64_t a1, uint64_t a2)
{
}

void sub_1000C8F68()
{
}

void sub_1000C8FC0(uint64_t a1, uint64_t a2)
{
}

void sub_1000C8FF4()
{
}

void sub_1000C904C(uint64_t a1, uint64_t a2)
{
}

void sub_1000C9080()
{
}

void sub_1000C90D8(uint64_t a1, uint64_t a2)
{
}

void sub_1000C910C()
{
}

void sub_1000C9164(uint64_t a1, uint64_t a2)
{
}

void sub_1000C9198()
{
}

void sub_1000C91F0(uint64_t a1, uint64_t a2)
{
}

void sub_1000C9224()
{
}

void sub_1000C927C(uint64_t a1, uint64_t a2)
{
}

void sub_1000C92B0()
{
}

void sub_1000C9308(uint64_t a1, uint64_t a2)
{
}

void sub_1000C933C()
{
}

void sub_1000C9394(uint64_t a1, uint64_t a2)
{
}

void sub_1000C93C8()
{
}

void sub_1000C9420(uint64_t a1, uint64_t a2)
{
}

void sub_1000C9454()
{
}

void sub_1000C94AC(uint64_t a1, uint64_t a2)
{
}

void sub_1000C94E0()
{
}

void sub_1000C9538(uint64_t a1, uint64_t a2)
{
}

void sub_1000C956C()
{
}

void sub_1000C95C4(uint64_t a1, uint64_t a2)
{
}

void sub_1000C95F8()
{
}

void sub_1000C9650(uint64_t a1, uint64_t a2)
{
}

void sub_1000C9684()
{
}

void sub_1000C96DC(uint64_t a1, uint64_t a2)
{
}

void sub_1000C9710()
{
}

void sub_1000C9768(uint64_t a1, uint64_t a2)
{
}

void sub_1000C979C()
{
}

void sub_1000C97F4(uint64_t a1, uint64_t a2)
{
}

void sub_1000C9828()
{
}

void sub_1000C9880(uint64_t a1, uint64_t a2)
{
}

void sub_1000C98B4()
{
}

void sub_1000C990C(uint64_t a1, uint64_t a2)
{
}

void sub_1000C9940()
{
}

void sub_1000C9998(uint64_t a1, uint64_t a2)
{
}

void sub_1000C99CC()
{
}

void sub_1000C9A24(uint64_t a1, uint64_t a2)
{
}

void sub_1000C9A58()
{
}

void sub_1000C9AB0(uint64_t a1, uint64_t a2)
{
}

void sub_1000C9AE4()
{
}

void sub_1000C9B3C(uint64_t a1, uint64_t a2)
{
}

void sub_1000C9B70()
{
}

void sub_1000C9BC8(uint64_t a1, uint64_t a2)
{
}

void sub_1000C9BFC()
{
}

void sub_1000C9C54(uint64_t a1, uint64_t a2)
{
}

void sub_1000C9C88()
{
}

void sub_1000C9CE0(uint64_t a1, uint64_t a2)
{
}

void sub_1000C9D14()
{
}

void sub_1000C9D6C(uint64_t a1, uint64_t a2)
{
}

void sub_1000C9DA0()
{
}

void sub_1000C9DF8(uint64_t a1, uint64_t a2)
{
}

void sub_1000C9E2C()
{
}

void sub_1000C9E84(uint64_t a1, uint64_t a2)
{
}

void sub_1000C9EB8()
{
}

void sub_1000C9F10(uint64_t a1, uint64_t a2)
{
}

void sub_1000C9F44()
{
}

void sub_1000C9F9C(uint64_t a1, uint64_t a2)
{
}

void sub_1000C9FD0()
{
}

void sub_1000CA028(uint64_t a1, uint64_t a2)
{
}

void sub_1000CA05C()
{
}

void sub_1000CA0B4(uint64_t a1, uint64_t a2)
{
}

void sub_1000CA0E8()
{
}

void sub_1000CA140(uint64_t a1, uint64_t a2)
{
}

void sub_1000CA174()
{
}

void sub_1000CA1CC(uint64_t a1, uint64_t a2)
{
}

void sub_1000CA200()
{
}

void sub_1000CA258(uint64_t a1, uint64_t a2)
{
}

void sub_1000CA28C()
{
}

void sub_1000CA2E4(uint64_t a1, uint64_t a2)
{
}

void sub_1000CA318()
{
}

void sub_1000CA370(uint64_t a1, uint64_t a2)
{
}

void sub_1000CA3A4()
{
}

void sub_1000CA3FC(uint64_t a1, uint64_t a2)
{
}

void sub_1000CA430()
{
}

void sub_1000CA488(uint64_t a1, uint64_t a2)
{
}

void sub_1000CA4BC()
{
}

void sub_1000CA514(uint64_t a1, uint64_t a2)
{
}

void sub_1000CA548()
{
}

void sub_1000CA5A0(uint64_t a1, uint64_t a2)
{
}

void sub_1000CA5D4()
{
}

void sub_1000CA62C(uint64_t a1, uint64_t a2)
{
}

void sub_1000CA660()
{
}

void sub_1000CA6B8(uint64_t a1, uint64_t a2)
{
}

void sub_1000CA6EC()
{
}

void sub_1000CA744(uint64_t a1, uint64_t a2)
{
}

void sub_1000CA778()
{
}

void sub_1000CA7D0(uint64_t a1, uint64_t a2)
{
}

void sub_1000CA804()
{
  __int16 v3 = 2048;
  uint64_t v4 = v0;
  _os_log_error_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_ERROR,  "[Config Store] ERROR: Activation of device configuration with uuid '%{public}s' enabled %lld configs?",  v2,  0x16u);
  sub_10000E1FC();
}

void sub_1000CA890()
{
}

void sub_1000CA904()
{
}

void sub_1000CA95C(uint64_t a1, uint64_t a2)
{
}

void sub_1000CA990()
{
}

void sub_1000CA9E8(uint64_t a1, uint64_t a2)
{
}

void sub_1000CAA1C()
{
}

void sub_1000CAA74(uint64_t a1, uint64_t a2)
{
}

void sub_1000CAAA8()
{
}

void sub_1000CAB00(uint64_t a1, uint64_t a2)
{
}

void sub_1000CAB34()
{
}

void sub_1000CAB8C()
{
}

void sub_1000CABE4()
{
}

void sub_1000CAC3C(uint64_t a1, uint64_t a2)
{
}

void sub_1000CAC70()
{
    v2,
    v3,
    v4,
    v5,
    v6);
  sub_100041174();
}

void sub_1000CACC8(uint64_t a1, uint64_t a2)
{
}

void sub_1000CACFC()
{
}

void sub_1000CAD54(uint64_t a1, uint64_t a2)
{
}

void sub_1000CAD88()
{
}

void sub_1000CADE0(uint64_t a1, uint64_t a2)
{
}

void sub_1000CAE14()
{
}

void sub_1000CAE6C(sqlite3 *a1, os_log_s *a2)
{
}

void sub_1000CAEDC()
{
}

void sub_1000CAF34(uint64_t a1, uint64_t a2)
{
}

void sub_1000CAF68()
{
}

void sub_1000CAFC0(uint64_t a1, uint64_t a2)
{
}

void sub_1000CAFF4()
{
}

void sub_1000CB04C(uint64_t a1, uint64_t a2)
{
}

void sub_1000CB080()
{
}

void sub_1000CB0D8(uint64_t a1, uint64_t a2)
{
}

void sub_1000CB10C()
{
}

void sub_1000CB164()
{
}

void sub_1000CB1BC(uint64_t a1, uint64_t a2)
{
}

void sub_1000CB1F0()
{
}

void sub_1000CB254(uint64_t a1, uint64_t a2)
{
}

void sub_1000CB294()
{
}

void sub_1000CB2EC(sqlite3 *a1, os_log_s *a2)
{
}

void sub_1000CB364()
{
}

void sub_1000CB3BC(uint64_t a1, uint64_t a2)
{
}

void sub_1000CB3F0()
{
}

void sub_1000CB448(sqlite3 *a1, os_log_s *a2)
{
}

void sub_1000CB4B8()
{
}

void sub_1000CB510(sqlite3 *a1, os_log_s *a2)
{
}

void sub_1000CB580()
{
}

void sub_1000CB5D8(sqlite3 *a1, os_log_s *a2)
{
}

void sub_1000CB648()
{
}

void sub_1000CB6A0(sqlite3 *a1, os_log_s *a2)
{
}

void sub_1000CB710()
{
}

void sub_1000CB768(sqlite3 *a1, os_log_s *a2)
{
}

void sub_1000CB7D8()
{
}

void sub_1000CB830(sqlite3 *a1, os_log_s *a2)
{
}

void sub_1000CB8A0()
{
}

void sub_1000CB8F8(sqlite3 *a1, os_log_s *a2)
{
}

void sub_1000CB968()
{
}

void sub_1000CB9C0(sqlite3 *a1, os_log_s *a2)
{
}

void sub_1000CBA30()
{
}

void sub_1000CBA88(uint64_t a1, uint64_t a2)
{
}

void sub_1000CBABC()
{
}

void sub_1000CBB14(sqlite3 *a1, os_log_s *a2)
{
}

void sub_1000CBB84()
{
}

void sub_1000CBBDC(sqlite3 *a1, os_log_s *a2)
{
}

void sub_1000CBC4C()
{
}

void sub_1000CBCA4(sqlite3 *a1, os_log_s *a2)
{
}

void sub_1000CBD14()
{
}

void sub_1000CBD6C(sqlite3 *a1, os_log_s *a2)
{
}

void sub_1000CBDDC()
{
}

void sub_1000CBE34(sqlite3 *a1, os_log_s *a2)
{
}

void sub_1000CBEA4()
{
}

void sub_1000CBEFC(sqlite3 *a1, os_log_s *a2)
{
}

void sub_1000CBF6C()
{
}

void sub_1000CBFC4(sqlite3 *a1, os_log_s *a2)
{
}

void sub_1000CC034()
{
}

void sub_1000CC08C(sqlite3 *a1, os_log_s *a2)
{
}

void sub_1000CC0FC()
{
}

void sub_1000CC154(sqlite3 *a1, os_log_s *a2)
{
}

void sub_1000CC1C4()
{
}

void sub_1000CC21C(sqlite3 *a1, os_log_s *a2)
{
}

void sub_1000CC28C()
{
}

void sub_1000CC2E4(uint64_t a1, uint64_t a2)
{
}

void sub_1000CC318()
{
}

void sub_1000CC370(uint64_t a1, uint64_t a2)
{
}

void sub_1000CC3A4()
{
}

void sub_1000CC3FC(uint64_t a1, uint64_t a2)
{
}

void sub_1000CC430()
{
}

void sub_1000CC488(uint64_t a1, uint64_t a2)
{
}

void sub_1000CC4BC(uint64_t a1)
{
  int v2 = operator new(8uLL);
  void *v2 = &off_10012DE58;
  sub_100005064(__p, ":<");
  sqlite3_int64 v22 = __p;
  os_log_t v3 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v22);
  uint64_t v4 = *((void *)v3 + 5);
  *((void *)v3 + 5) = v2;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v5 = operator new(8uLL);
  *uint64_t v5 = &off_10012DEA0;
  sub_100005064(__p, ":<=");
  sqlite3_int64 v22 = __p;
  uint8_t v6 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v22);
  uint64_t v7 = *((void *)v6 + 5);
  *((void *)v6 + 5) = v5;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  BOOL v8 = operator new(8uLL);
  *BOOL v8 = &off_10012DEE8;
  sub_100005064(__p, ":>");
  sqlite3_int64 v22 = __p;
  uint64_t v9 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v22);
  uint64_t v10 = *((void *)v9 + 5);
  *((void *)v9 + 5) = v8;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
  }
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  BOOL v11 = operator new(8uLL);
  *BOOL v11 = &off_10012DF30;
  sub_100005064(__p, ":>=");
  sqlite3_int64 v22 = __p;
  BOOL v12 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v22);
  uint64_t v13 = *((void *)v12 + 5);
  *((void *)v12 + 5) = v11;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
  }
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  __int16 v14 = operator new(8uLL);
  *__int16 v14 = &off_10012DF78;
  sub_100005064(__p, ":==");
  sqlite3_int64 v22 = __p;
  BOOL v15 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v22);
  uint64_t v16 = *((void *)v15 + 5);
  *((void *)v15 + 5) = v14;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8LL))(v16);
  }
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v17 = operator new(8uLL);
  *unint64_t v17 = &off_10012DFC0;
  sub_100005064(__p, ":!=");
  sqlite3_int64 v22 = __p;
  BOOL v18 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v22);
  uint64_t v19 = *((void *)v18 + 5);
  *((void *)v18 + 5) = v17;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8LL))(v19);
  }
  if (v21 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1000CC7E4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  uint64_t v16 = (void *)nullsub_4(v14);
  operator delete(v16);
  _Unwind_Resume(a1);
}

void sub_1000CC844(uint64_t a1, uint64_t *a2)
{
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v10 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D25BC((uint64_t)a2, &v9);
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  BOOL v8 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D25BC((uint64_t)a2, &v7);
  v5[0] = 4;
  unint64_t v6 = sub_1000CC9C4((double *)&v7, (char *)&v9);
  sub_1000041AC((uint64_t)v5);
  sub_1000041AC((uint64_t)v5);
  unint64_t v3 = a2[4];
  if (v3 >= a2[5])
  {
    uint64_t v4 = sub_100004B7C(a2 + 3, (uint64_t)v5);
  }

  else
  {
    *(_BYTE *)unint64_t v3 = v5[0];
    *(void *)(v3 + sub_100007004((uint64_t)v9 + 8) = v6;
    sub_1000041AC((uint64_t)v5);
    v5[0] = 0;
    unint64_t v6 = 0LL;
    sub_1000041AC(v3);
    uint64_t v4 = v3 + 16;
  }

  a2[4] = v4;
  sub_1000041AC((uint64_t)v5);
  sub_10000425C((uint64_t **)&v6, v5[0]);
  sub_1000041AC((uint64_t)&v7);
  sub_10000425C(&v8, v7);
  sub_1000041AC((uint64_t)&v9);
  sub_10000425C(&v10, v9);
}

void sub_1000CC988(_Unwind_Exception *a1, uint64_t a2, ...)
{
  unint64_t v3 = va_arg(va1, uint64_t *);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  unint64_t v6 = va_arg(va2, uint64_t *);
  uint64_t v8 = va_arg(va2, void);
  sub_10000417C((uint64_t **)va);
  sub_10000417C((uint64_t **)va1);
  sub_10000417C((uint64_t **)va2);
  _Unwind_Resume(a1);
}

uint64_t sub_1000CC9C4(double *a1, char *a2)
{
  int v4 = *(unsigned __int8 *)a1;
  if (v4 != 4)
  {
    if ((v4 - 5) <= 2 && *a2 == 4)
    {
      unsigned __int8 v10 = -86;
      sub_100059DD4(a2, &v10);
      v8[0] = 5;
      unint64_t v9 = v10;
      sub_1000041AC((uint64_t)v8);
      sub_1000041AC((uint64_t)v8);
      uint64_t v5 = sub_1000CC9C4(a1, v8);
      goto LABEL_10;
    }

    return sub_100055FA0(a1, (unsigned __int8 *)a2);
  }

  unsigned __int8 v10 = -86;
  sub_100059DD4((char *)a1, &v10);
  v8[0] = 5;
  unint64_t v9 = v10;
  sub_1000041AC((uint64_t)v8);
  sub_1000041AC((uint64_t)v8);
  uint64_t v5 = sub_1000CC9C4(v8, a2);
LABEL_10:
  sub_1000041AC((uint64_t)v8);
  sub_10000425C((uint64_t **)&v9, v8[0]);
  return v5;
}

void sub_1000CCB38( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
}

uint64_t sub_1000CCB58()
{
  return 1LL;
}

void sub_1000CCB60(uint64_t a1, uint64_t *a2)
{
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  unsigned __int8 v10 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D25BC((uint64_t)a2, &v9);
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v8 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D25BC((uint64_t)a2, &v7);
  v5[0] = 4;
  unint64_t v6 = sub_1000CCCE0((char *)&v7, (char *)&v9);
  sub_1000041AC((uint64_t)v5);
  sub_1000041AC((uint64_t)v5);
  unint64_t v3 = a2[4];
  if (v3 >= a2[5])
  {
    uint64_t v4 = sub_100004B7C(a2 + 3, (uint64_t)v5);
  }

  else
  {
    *(_BYTE *)unint64_t v3 = v5[0];
    *(void *)(v3 + sub_100007004((uint64_t)v9 + 8) = v6;
    sub_1000041AC((uint64_t)v5);
    v5[0] = 0;
    unint64_t v6 = 0LL;
    sub_1000041AC(v3);
    uint64_t v4 = v3 + 16;
  }

  a2[4] = v4;
  sub_1000041AC((uint64_t)v5);
  sub_10000425C((uint64_t **)&v6, v5[0]);
  sub_1000041AC((uint64_t)&v7);
  sub_10000425C(&v8, v7);
  sub_1000041AC((uint64_t)&v9);
  sub_10000425C(&v10, v9);
}

void sub_1000CCCA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  unint64_t v3 = va_arg(va1, uint64_t *);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  unint64_t v6 = va_arg(va2, uint64_t *);
  uint64_t v8 = va_arg(va2, void);
  sub_10000417C((uint64_t **)va);
  sub_10000417C((uint64_t **)va1);
  sub_10000417C((uint64_t **)va2);
  _Unwind_Resume(a1);
}

uint64_t sub_1000CCCE0(char *a1, char *a2)
{
  int v4 = *a1;
  if (v4 == 4)
  {
    if (*a2 - 5 <= 2)
    {
      unsigned __int8 v10 = -86;
      sub_100059DD4(a1, &v10);
      v8[0] = 5;
      unint64_t v9 = v10;
      sub_1000041AC((uint64_t)v8);
      sub_1000041AC((uint64_t)v8);
      uint64_t v5 = sub_1000CCCE0(v8, a2);
LABEL_10:
      sub_1000041AC((uint64_t)v8);
      sub_10000425C((uint64_t **)&v9, v8[0]);
      return v5;
    }
  }

  else if ((v4 - 5) <= 2 && *a2 == 4)
  {
    unsigned __int8 v10 = -86;
    sub_100059DD4(a2, &v10);
    v8[0] = 5;
    unint64_t v9 = v10;
    sub_1000041AC((uint64_t)v8);
    sub_1000041AC((uint64_t)v8);
    uint64_t v5 = sub_1000CCCE0(a1, v8);
    goto LABEL_10;
  }

  return sub_100055FA0((double *)a2, (unsigned __int8 *)a1) ^ 1;
}

void sub_1000CCE34( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
}

uint64_t sub_1000CCE54()
{
  return 1LL;
}

void sub_1000CCE5C(uint64_t a1, uint64_t *a2)
{
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  unsigned __int8 v10 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D25BC((uint64_t)a2, &v9);
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v8 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D25BC((uint64_t)a2, &v7);
  v5[0] = 4;
  unint64_t v6 = sub_1000CCFDC((unsigned __int8 *)&v7, (char *)&v9);
  sub_1000041AC((uint64_t)v5);
  sub_1000041AC((uint64_t)v5);
  unint64_t v3 = a2[4];
  if (v3 >= a2[5])
  {
    uint64_t v4 = sub_100004B7C(a2 + 3, (uint64_t)v5);
  }

  else
  {
    *(_BYTE *)unint64_t v3 = v5[0];
    *(void *)(v3 + sub_100007004((uint64_t)v9 + 8) = v6;
    sub_1000041AC((uint64_t)v5);
    v5[0] = 0;
    unint64_t v6 = 0LL;
    sub_1000041AC(v3);
    uint64_t v4 = v3 + 16;
  }

  a2[4] = v4;
  sub_1000041AC((uint64_t)v5);
  sub_10000425C((uint64_t **)&v6, v5[0]);
  sub_1000041AC((uint64_t)&v7);
  sub_10000425C(&v8, v7);
  sub_1000041AC((uint64_t)&v9);
  sub_10000425C(&v10, v9);
}

void sub_1000CCFA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  unint64_t v3 = va_arg(va1, uint64_t *);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  unint64_t v6 = va_arg(va2, uint64_t *);
  uint64_t v8 = va_arg(va2, void);
  sub_10000417C((uint64_t **)va);
  sub_10000417C((uint64_t **)va1);
  sub_10000417C((uint64_t **)va2);
  _Unwind_Resume(a1);
}

uint64_t sub_1000CCFDC(unsigned __int8 *a1, char *a2)
{
  int v4 = *a1;
  if (v4 != 4)
  {
    if ((v4 - 5) <= 2 && *a2 == 4)
    {
      unsigned __int8 v10 = -86;
      sub_100059DD4(a2, &v10);
      v8[0] = 5;
      unint64_t v9 = v10;
      sub_1000041AC((uint64_t)v8);
      sub_1000041AC((uint64_t)v8);
      uint64_t v5 = sub_1000CCFDC(a1, v8);
      goto LABEL_10;
    }

    return sub_100055FA0((double *)a2, a1);
  }

  unsigned __int8 v10 = -86;
  sub_100059DD4((char *)a1, &v10);
  v8[0] = 5;
  unint64_t v9 = v10;
  sub_1000041AC((uint64_t)v8);
  sub_1000041AC((uint64_t)v8);
  uint64_t v5 = sub_1000CCFDC(v8, a2);
LABEL_10:
  sub_1000041AC((uint64_t)v8);
  sub_10000425C((uint64_t **)&v9, v8[0]);
  return v5;
}

void sub_1000CD150( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
}

uint64_t sub_1000CD170()
{
  return 1LL;
}

void sub_1000CD178(uint64_t a1, uint64_t *a2)
{
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  unsigned __int8 v10 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D25BC((uint64_t)a2, &v9);
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v8 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D25BC((uint64_t)a2, &v7);
  v5[0] = 4;
  unint64_t v6 = sub_1000CD2F8((char *)&v7, (char *)&v9);
  sub_1000041AC((uint64_t)v5);
  sub_1000041AC((uint64_t)v5);
  unint64_t v3 = a2[4];
  if (v3 >= a2[5])
  {
    uint64_t v4 = sub_100004B7C(a2 + 3, (uint64_t)v5);
  }

  else
  {
    *(_BYTE *)unint64_t v3 = v5[0];
    *(void *)(v3 + sub_100007004((uint64_t)v9 + 8) = v6;
    sub_1000041AC((uint64_t)v5);
    v5[0] = 0;
    unint64_t v6 = 0LL;
    sub_1000041AC(v3);
    uint64_t v4 = v3 + 16;
  }

  a2[4] = v4;
  sub_1000041AC((uint64_t)v5);
  sub_10000425C((uint64_t **)&v6, v5[0]);
  sub_1000041AC((uint64_t)&v7);
  sub_10000425C(&v8, v7);
  sub_1000041AC((uint64_t)&v9);
  sub_10000425C(&v10, v9);
}

void sub_1000CD2BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  unint64_t v3 = va_arg(va1, uint64_t *);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  unint64_t v6 = va_arg(va2, uint64_t *);
  uint64_t v8 = va_arg(va2, void);
  sub_10000417C((uint64_t **)va);
  sub_10000417C((uint64_t **)va1);
  sub_10000417C((uint64_t **)va2);
  _Unwind_Resume(a1);
}

uint64_t sub_1000CD2F8(char *a1, char *a2)
{
  int v4 = *a1;
  if (v4 == 4)
  {
    if (*a2 - 5 <= 2)
    {
      unsigned __int8 v10 = -86;
      sub_100059DD4(a1, &v10);
      v8[0] = 5;
      unint64_t v9 = v10;
      sub_1000041AC((uint64_t)v8);
      sub_1000041AC((uint64_t)v8);
      uint64_t v5 = sub_1000CD2F8(v8, a2);
LABEL_10:
      sub_1000041AC((uint64_t)v8);
      sub_10000425C((uint64_t **)&v9, v8[0]);
      return v5;
    }
  }

  else if ((v4 - 5) <= 2 && *a2 == 4)
  {
    unsigned __int8 v10 = -86;
    sub_100059DD4(a2, &v10);
    v8[0] = 5;
    unint64_t v9 = v10;
    sub_1000041AC((uint64_t)v8);
    sub_1000041AC((uint64_t)v8);
    uint64_t v5 = sub_1000CD2F8(a1, v8);
    goto LABEL_10;
  }

  return sub_100055FA0((double *)a1, (unsigned __int8 *)a2) ^ 1;
}

void sub_1000CD44C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
}

uint64_t sub_1000CD46C()
{
  return 1LL;
}

void sub_1000CD474(uint64_t a1, uint64_t *a2)
{
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  unsigned __int8 v10 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D25BC((uint64_t)a2, &v9);
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v8 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D25BC((uint64_t)a2, &v7);
  v5[0] = 4;
  unint64_t v6 = sub_1000CD5F4((unsigned __int8 *)&v7, (char *)&v9);
  sub_1000041AC((uint64_t)v5);
  sub_1000041AC((uint64_t)v5);
  unint64_t v3 = a2[4];
  if (v3 >= a2[5])
  {
    uint64_t v4 = sub_100004B7C(a2 + 3, (uint64_t)v5);
  }

  else
  {
    *(_BYTE *)unint64_t v3 = v5[0];
    *(void *)(v3 + sub_100007004((uint64_t)v9 + 8) = v6;
    sub_1000041AC((uint64_t)v5);
    v5[0] = 0;
    unint64_t v6 = 0LL;
    sub_1000041AC(v3);
    uint64_t v4 = v3 + 16;
  }

  a2[4] = v4;
  sub_1000041AC((uint64_t)v5);
  sub_10000425C((uint64_t **)&v6, v5[0]);
  sub_1000041AC((uint64_t)&v7);
  sub_10000425C(&v8, v7);
  sub_1000041AC((uint64_t)&v9);
  sub_10000425C(&v10, v9);
}

void sub_1000CD5B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  unint64_t v3 = va_arg(va1, uint64_t *);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  unint64_t v6 = va_arg(va2, uint64_t *);
  uint64_t v8 = va_arg(va2, void);
  sub_10000417C((uint64_t **)va);
  sub_10000417C((uint64_t **)va1);
  sub_10000417C((uint64_t **)va2);
  _Unwind_Resume(a1);
}

uint64_t sub_1000CD5F4(unsigned __int8 *a1, char *a2)
{
  int v4 = *a1;
  if (v4 != 4)
  {
    if ((v4 - 5) <= 2 && *a2 == 4)
    {
      unsigned __int8 v10 = -86;
      sub_100059DD4(a2, &v10);
      v8[0] = 5;
      unint64_t v9 = v10;
      sub_1000041AC((uint64_t)v8);
      sub_1000041AC((uint64_t)v8);
      uint64_t v5 = sub_1000CD5F4(a1, v8);
      goto LABEL_10;
    }

    return sub_10002CE28(a1, (unsigned __int8 *)a2);
  }

  unsigned __int8 v10 = -86;
  sub_100059DD4((char *)a1, &v10);
  v8[0] = 5;
  unint64_t v9 = v10;
  sub_1000041AC((uint64_t)v8);
  sub_1000041AC((uint64_t)v8);
  uint64_t v5 = sub_1000CD5F4(v8, a2);
LABEL_10:
  sub_1000041AC((uint64_t)v8);
  sub_10000425C((uint64_t **)&v9, v8[0]);
  return v5;
}

void sub_1000CD768( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
}

uint64_t sub_1000CD788()
{
  return 1LL;
}

void sub_1000CD790(uint64_t a1, uint64_t *a2)
{
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  unsigned __int8 v10 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D25BC((uint64_t)a2, &v9);
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v8 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D25BC((uint64_t)a2, &v7);
  v5[0] = 4;
  unint64_t v6 = sub_1000CD910((char *)&v7, (char *)&v9);
  sub_1000041AC((uint64_t)v5);
  sub_1000041AC((uint64_t)v5);
  unint64_t v3 = a2[4];
  if (v3 >= a2[5])
  {
    uint64_t v4 = sub_100004B7C(a2 + 3, (uint64_t)v5);
  }

  else
  {
    *(_BYTE *)unint64_t v3 = v5[0];
    *(void *)(v3 + sub_100007004((uint64_t)v9 + 8) = v6;
    sub_1000041AC((uint64_t)v5);
    v5[0] = 0;
    unint64_t v6 = 0LL;
    sub_1000041AC(v3);
    uint64_t v4 = v3 + 16;
  }

  a2[4] = v4;
  sub_1000041AC((uint64_t)v5);
  sub_10000425C((uint64_t **)&v6, v5[0]);
  sub_1000041AC((uint64_t)&v7);
  sub_10000425C(&v8, v7);
  sub_1000041AC((uint64_t)&v9);
  sub_10000425C(&v10, v9);
}

void sub_1000CD8D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  unint64_t v3 = va_arg(va1, uint64_t *);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  unint64_t v6 = va_arg(va2, uint64_t *);
  uint64_t v8 = va_arg(va2, void);
  sub_10000417C((uint64_t **)va);
  sub_10000417C((uint64_t **)va1);
  sub_10000417C((uint64_t **)va2);
  _Unwind_Resume(a1);
}

uint64_t sub_1000CD910(char *a1, char *a2)
{
  int v4 = *a1;
  if (v4 == 4)
  {
    if (*a2 - 5 <= 2)
    {
      unsigned __int8 v10 = -86;
      sub_100059DD4(a1, &v10);
      v8[0] = 5;
      unint64_t v9 = v10;
      sub_1000041AC((uint64_t)v8);
      sub_1000041AC((uint64_t)v8);
      uint64_t v5 = sub_1000CD910(v8, a2);
LABEL_10:
      sub_1000041AC((uint64_t)v8);
      sub_10000425C((uint64_t **)&v9, v8[0]);
      return v5;
    }
  }

  else if ((v4 - 5) <= 2 && *a2 == 4)
  {
    unsigned __int8 v10 = -86;
    sub_100059DD4(a2, &v10);
    v8[0] = 5;
    unint64_t v9 = v10;
    sub_1000041AC((uint64_t)v8);
    sub_1000041AC((uint64_t)v8);
    uint64_t v5 = sub_1000CD910(a1, v8);
    goto LABEL_10;
  }

  return sub_10002CE28((unsigned __int8 *)a1, (unsigned __int8 *)a2) ^ 1;
}

void sub_1000CDA64( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
}

uint64_t sub_1000CDA84()
{
  return 1LL;
}

void sub_1000CDA90(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000CDAA8(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000CDAC0(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000CDAD8(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000CDAF0(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000CDB08(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000CDB1C(uint64_t a1)
{
  int v2 = operator new(8uLL);
  void *v2 = &off_10012E008;
  sub_100005064(__p, ":getEventMap");
  sqlite3_int64 v22 = __p;
  unint64_t v3 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v22);
  uint64_t v4 = *((void *)v3 + 5);
  *((void *)v3 + 5) = v2;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v5 = operator new(8uLL);
  *uint64_t v5 = &off_10012E050;
  sub_100005064(__p, ":getEventName");
  sqlite3_int64 v22 = __p;
  unint64_t v6 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v22);
  uint64_t v7 = *((void *)v6 + 5);
  *((void *)v6 + 5) = v5;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v8 = operator new(8uLL);
  *uint64_t v8 = &off_10012E098;
  sub_100005064(__p, ":getEventField");
  sqlite3_int64 v22 = __p;
  unint64_t v9 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v22);
  uint64_t v10 = *((void *)v9 + 5);
  *((void *)v9 + 5) = v8;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
  }
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  BOOL v11 = operator new(8uLL);
  *BOOL v11 = &off_10012E0E0;
  sub_100005064(__p, ":setEventField");
  sqlite3_int64 v22 = __p;
  BOOL v12 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v22);
  uint64_t v13 = *((void *)v12 + 5);
  *((void *)v12 + 5) = v11;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
  }
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v14 = operator new(8uLL);
  *uint64_t v14 = &off_10012E128;
  sub_100005064(__p, ":deleteEventField");
  sqlite3_int64 v22 = __p;
  BOOL v15 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v22);
  uint64_t v16 = *((void *)v15 + 5);
  *((void *)v15 + 5) = v14;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8LL))(v16);
  }
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v17 = operator new(8uLL);
  *unint64_t v17 = &off_10012E170;
  sub_100005064(__p, ":mergeEventMap");
  sqlite3_int64 v22 = __p;
  BOOL v18 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v22);
  uint64_t v19 = *((void *)v18 + 5);
  *((void *)v18 + 5) = v17;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8LL))(v19);
  }
  if (v21 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1000CDE44( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  uint64_t v16 = (void *)nullsub_4(v14);
  operator delete(v16);
  _Unwind_Resume(a1);
}

uint64_t sub_1000CDEA4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = **(void **)a2 + 40LL;
  unint64_t v4 = *(void *)(a2 + 32);
  if (v4 >= *(void *)(a2 + 40))
  {
    uint64_t result = sub_1000996C8((uint64_t *)(a2 + 24), v3);
  }

  else
  {
    sub_10000C3E4(*(void *)(a2 + 32), v3);
    uint64_t result = v4 + 16;
    *(void *)(a2 + 3sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = v4 + 16;
  }

  *(void *)(a2 + 3sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = result;
  return result;
}

void sub_1000CDEF8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 3sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1000CDF00()
{
  return 1LL;
}

uint64_t sub_1000CDF08(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = **(void **)a2 + 16LL;
  unint64_t v4 = *(void *)(a2 + 32);
  if (v4 >= *(void *)(a2 + 40))
  {
    uint64_t result = sub_100082150((uint64_t *)(a2 + 24), v3);
  }

  else
  {
    sub_10000B990(*(void *)(a2 + 32), v3);
    uint64_t result = v4 + 16;
    *(void *)(a2 + 3sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = v4 + 16;
  }

  *(void *)(a2 + 3sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = result;
  return result;
}

void sub_1000CDF5C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 3sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1000CDF64()
{
  return 1LL;
}

void sub_1000CDF6C(uint64_t a1, uint64_t a2)
{
  *(void *)&__int128 v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)std::string __p = v3;
  __int128 v17 = v3;
  sub_1000CE1E0((uint64_t *)a2, (uint64_t)&v18, (uint64_t *)__p);
  if (__p[0] == *(void **)(a2 + 8))
  {
    unint64_t v14 = 0LL;
    unint64_t v8 = *(void *)(a2 + 32);
    if (v8 >= *(void *)(a2 + 40))
    {
      uint64_t v9 = sub_10002075C((uint64_t *)(a2 + 24));
    }

    else
    {
      *(_BYTE *)unint64_t v8 = 0;
      *(void *)(v8 + sub_100007004((uint64_t)v9 + 8) = 0LL;
      sub_1000041AC(v8);
      sub_1000041AC(v8);
      uint64_t v9 = v8 + 16;
    }

    goto LABEL_15;
  }

  uint64_t v4 = HIBYTE(v17);
  if (v17 < 0) {
    uint64_t v4 = v17;
  }
  if (!v4)
  {
    uint64_t v10 = *(void *)__p[0] + 40LL;
    unint64_t v11 = *(void *)(a2 + 32);
    if (v11 >= *(void *)(a2 + 40))
    {
      uint64_t v9 = sub_1000996C8((uint64_t *)(a2 + 24), v10);
    }

    else
    {
      sub_10000C3E4(*(void *)(a2 + 32), v10);
      uint64_t v9 = v11 + 16;
      *(void *)(a2 + 3sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = v11 + 16;
    }

void sub_1000CE174( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000CE1E0(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  if (*a1 != v6)
  {
    memset(&v14, 0, sizeof(v14));
    while ((sub_1000CEDA8((unsigned __int8 *)a2, (unsigned __int8 *)(*(void *)v5 + 16LL), &v14) & 1) == 0)
    {
      v5 += 16LL;
      if (v5 == v6)
      {
        uint64_t v5 = v6;
        break;
      }
    }

    if (v5 != a1[1])
    {
      *a3 = v5;
      unint64_t v8 = a3 + 1;
      if ((char)v14.__r_.__value_.__s.__size_ < 0)
      {
        sub_10000B8BC(v8, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
        goto LABEL_17;
      }

      goto LABEL_15;
    }

    sub_100005064(__p, "event");
    int v10 = sub_1000CEDA8((unsigned __int8 *)a2, (unsigned __int8 *)__p, &v14);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    *a3 = *a1;
    unint64_t v8 = a3 + 1;
    if (v10)
    {
      if (((char)v14.__r_.__value_.__s.__size_ & 0x80000000) == 0)
      {
LABEL_15:
        *(_OWORD *)unint64_t v8 = *(_OWORD *)&v14.__r_.__value_.__l.__data_;
        std::string::size_type cap = v14.__r_.__value_.__l.__cap_;
LABEL_16:
        v8[2] = cap;
        goto LABEL_17;
      }

      sub_10000B8BC(v8, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
    }

    else
    {
      if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      {
        *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
        std::string::size_type cap = *(void *)(a2 + 16);
        goto LABEL_16;
      }

      sub_10000B8BC(v8, *(void **)a2, *(void *)(a2 + 8));
    }

void sub_1000CE3A4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000CE3E8@<X0>(char *a1@<X0>, const void **a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  if (*a1 != 1)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    unint64_t v11 = (char *)sub_10000528C(a1);
    sub_100005064(v14, v11);
    BOOL v12 = std::string::insert((std::string *)v14, 0LL, "cannot use value() with ");
    __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    *(void *)&__int128 v17 = v12->__r_.__value_.__l.__cap_;
    __int128 v16 = v13;
    v12->__r_.__value_.__l.__size_ = 0LL;
    v12->__r_.__value_.__l.__cap_ = 0LL;
    v12->__r_.__value_.__r.__words[0] = 0LL;
    sub_100005128(306, (uint64_t)&v16, exception);
  }

  unint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v16 = v7;
  __int128 v17 = v7;
  sub_10003CED0((uint64_t)a1, a2, (uint64_t)&v16);
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  v14[0] = v8;
  v14[1] = v8;
  sub_100008B44(v14, (uint64_t)a1);
  sub_100008AC8((unsigned __int8 **)v14);
  return sub_10000C3E4(a4, (uint64_t)a3);
}

void sub_1000CE538( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
}

uint64_t sub_1000CE5A0()
{
  return 1LL;
}

void sub_1000CE5A8(uint64_t a1, uint64_t a2)
{
  unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  std::string v14 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D25BC(a2, &v13);
  memset(&v12, 170, sizeof(v12));
  sub_1000D1B68(a2, &v12);
  *(void *)&__int128 v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)std::string __p = v3;
  __int128 v11 = v3;
  sub_1000CE1E0((uint64_t *)a2, (uint64_t)&v12, (uint64_t *)__p);
  if (__p[0] == *(void **)(a2 + 8))
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Operation 'setEventField' tried to set field on non-existent event");
  }

  v8[0] = v13;
  uint64_t v9 = v14;
  sub_1000041AC((uint64_t)&v13);
  LOBYTE(v13) = 0;
  std::string v14 = 0LL;
  sub_1000041AC((uint64_t)v8);
  uint64_t v4 = sub_1000304A4((unsigned __int8 *)(*(void *)__p[0] + 40LL), (const void **)&__p[1]);
  sub_1000041AC((uint64_t)v8);
  char v5 = *(_BYTE *)v4;
  *(_BYTE *)uint64_t v4 = v8[0];
  v8[0] = v5;
  uint64_t v6 = (uint64_t *)v4[1];
  v4[1] = (uint64_t)v9;
  uint64_t v9 = v6;
  sub_1000041AC((uint64_t)v4);
  sub_1000041AC((uint64_t)v8);
  sub_10000425C(&v9, v8[0]);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[1]);
  }
  sub_1000041AC((uint64_t)&v13);
  sub_10000425C(&v14, v13);
}

void sub_1000CE768( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  sub_10000417C((uint64_t **)(v23 - 56));
  _Unwind_Resume(a1);
}

uint64_t sub_1000CE7D4()
{
  return 1LL;
}

void sub_1000CE7DC(uint64_t a1, uint64_t *a2)
{
  *(void *)&__int128 v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v17 = v3;
  __int128 v18 = v3;
  sub_1000CE1E0(a2, (uint64_t)&v19, (uint64_t *)&v17);
  uint64_t v4 = a2[1];
  char v5 = (void *)v17;
  if ((void)v17 == v4)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Operation 'deleteEventField' tried to delete field on non-existent event");
  }

  *(void *)&v16[32] = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__int128 v16 = v6;
  *(_OWORD *)&v16[16] = v6;
  sub_10006505C(*(void *)v17 + 40LL, (const void **)&v17 + 1, (uint64_t)v16);
  uint64_t v7 = *v5 + 40LL;
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  v14[0] = v8;
  v14[1] = v8;
  sub_1000211B0(v14, v7);
  sub_1000211FC((unsigned __int8 **)v14);
  if (!sub_10001855C((unsigned __int8 **)v16, (unsigned __int8 **)v14))
  {
    uint64_t v9 = (unsigned __int8 *)(*v5 + 40LL);
    uint64_t v11 = *(void *)v16;
    __int128 v12 = *(_OWORD *)&v16[8];
    __int128 v13 = *(_OWORD *)&v16[24];
    sub_10001D610(v9, (uint64_t)&v11, (uint64_t)v14);
  }

  if (SHIBYTE(v18) < 0) {
    operator delete(*((void **)&v17 + 1));
  }
}

void sub_1000CE95C(_Unwind_Exception *exception_object)
{
}

uint64_t sub_1000CE9B4()
{
  return 1LL;
}

void sub_1000CE9BC(uint64_t a1, void *a2)
{
  unint64_t v32 = 0xAAAAAAAAAAAAAAAALL;
  std::string::size_type v33 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D24DC((uint64_t)a2, &v32);
  if ((_BYTE)v32)
  {
    if (*a2 == a2[1])
    {
      exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Operation 'mergeEventMap' tried to merge but had no event");
    }

    int v10 = (unsigned __int8 *)(*(void *)*a2 + 40LL);
    BOOL v31 = &v32;
    sub_1000638FC((uint64_t *)&v31, (uint64_t)&v23);
    sub_10006397C((uint64_t *)&v31, (uint64_t)v19);
    while (!sub_10001855C(&v23, v19))
    {
      *(void *)&__int128 v3 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v3 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)__int128 v18 = v3;
      *(_OWORD *)&_BYTE v18[16] = v3;
      __int128 v17 = v3;
      __int128 v13 = v23;
      __int128 v14 = v24;
      __int128 v15 = v25;
      __int128 v16 = v26;
      if (SHIBYTE(v28) < 0)
      {
        sub_10000B8BC(&v17, (void *)v27, *((unint64_t *)&v27 + 1));
      }

      else
      {
        __int128 v17 = v27;
        *(void *)__int128 v18 = v28;
      }

      if (SHIBYTE(v30) < 0)
      {
        sub_10000B8BC(&v18[8], (void *)v29, *((unint64_t *)&v29 + 1));
      }

      else
      {
        *(_OWORD *)&unsigned __int8 v18[8] = v29;
        *(void *)&_BYTE v18[24] = v30;
      }

      uint64_t v4 = sub_100018150(&v13);
      v11[0] = *v4;
      __int128 v12 = (uint64_t *)*((void *)v4 + 1);
      sub_1000041AC((uint64_t)v4);
      *uint64_t v4 = 0;
      *((void *)v4 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0LL;
      sub_1000041AC((uint64_t)v11);
      char v5 = (const void **)sub_1000650C4(&v13);
      __int128 v6 = sub_1000304A4(v10, v5);
      sub_1000041AC((uint64_t)v11);
      unsigned __int8 v7 = *(_BYTE *)v6;
      *(_BYTE *)__int128 v6 = v11[0];
      v11[0] = v7;
      __int128 v8 = (uint64_t *)v6[1];
      v6[1] = (uint64_t)v12;
      __int128 v12 = v8;
      sub_1000041AC((uint64_t)v6);
      sub_1000041AC((uint64_t)v11);
      sub_10000425C(&v12, v11[0]);
      if ((v18[31] & 0x80000000) != 0) {
        operator delete(*(void **)&v18[8]);
      }
      if ((v18[7] & 0x80000000) != 0) {
        operator delete((void *)v17);
      }
      sub_100018704(&v23);
      *(void *)&__int128 v26 = v26 + 1;
    }

    if (v22 < 0) {
      operator delete(v21);
    }
    if (v20 < 0) {
      operator delete(v19[7]);
    }
    if (SHIBYTE(v30) < 0) {
      operator delete((void *)v29);
    }
    if (SHIBYTE(v28) < 0) {
      operator delete((void *)v27);
    }
  }

  sub_1000041AC((uint64_t)&v32);
  sub_10000425C(&v33, v32);
}

void sub_1000CEC90( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p, uint64_t a21, int a22, __int16 a23, char a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

uint64_t sub_1000CED10()
{
  return 1LL;
}

void sub_1000CED1C(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000CED34(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000CED4C(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000CED64(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000CED7C(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000CED94(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

uint64_t sub_1000CEDA8(unsigned __int8 *a1, unsigned __int8 *a2, std::string *this)
{
  int v3 = (char)a1[23];
  BOOL v4 = v3 < 0;
  char v5 = *(unsigned __int8 **)a1;
  if (v3 >= 0) {
    char v5 = a1;
  }
  uint64_t v6 = a1[23];
  if (v4) {
    uint64_t v6 = *((void *)a1 + 1);
  }
  int v7 = (char)a2[23];
  BOOL v8 = v7 < 0;
  uint64_t v9 = *(unsigned __int8 **)a2;
  if (v7 >= 0) {
    uint64_t v9 = a2;
  }
  uint64_t v10 = a2[23];
  if (v8) {
    uint64_t v10 = *((void *)a2 + 1);
  }
  if (v6) {
    BOOL v11 = v10 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    uint64_t v12 = v10 - 1;
    uint64_t v13 = v6 - 1;
    __int128 v14 = v9;
    __int128 v15 = v5;
    while (*v15 == *v14)
    {
      ++v14;
      if (v13)
      {
        ++v15;
        uint64_t v16 = v12--;
        --v13;
        if (v16) {
          continue;
        }
      }

      goto LABEL_18;
    }

    return 0LL;
  }

  __int128 v14 = v9;
LABEL_18:
  if (v14 != &v9[v10]) {
    return 0LL;
  }
  if (v6 != v10)
  {
    __int128 v18 = &v5[v10];
    if (*v18 != 46) {
      return 0LL;
    }
    sub_1000CEE80(this, (std::string::value_type *)v18 + 1, (std::string::value_type *)&v5[v6], &v5[v6] - (v18 + 1));
  }

  return 1LL;
}

void sub_1000CEE80( std::string *this, std::string::value_type *a2, std::string::value_type *a3, std::string::size_type a4)
{
  if (((char)this->__r_.__value_.__s.__size_ & 0x80000000) == 0)
  {
    BOOL v8 = this;
    if (a4 <= 0x16) {
      goto LABEL_11;
    }
    std::string::size_type size = this->__r_.__value_.__s.__size_;
    std::string::size_type v10 = 22LL;
    goto LABEL_6;
  }

  std::string::size_type cap = this->__r_.__value_.__l.__cap_;
  std::string::size_type v10 = (cap & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v10 < a4)
  {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
LABEL_6:
    std::string::__grow_by(this, v10, a4 - v10, size, 0LL, size, 0LL);
    this->__r_.__value_.__l.__size_ = 0LL;
    LOBYTE(v1sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = this->__r_.__value_.__s.__size_;
    goto LABEL_8;
  }

  std::string::size_type v12 = HIBYTE(cap);
LABEL_8:
  BOOL v8 = this;
  if ((v12 & 0x80) != 0) {
    BOOL v8 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
LABEL_11:
  while (a2 != a3)
  {
    std::string::value_type v13 = *a2++;
    v8->__r_.__value_.__s.__data_[0] = v13;
    BOOL v8 = (std::string *)((char *)v8 + 1);
  }

  v8->__r_.__value_.__s.__data_[0] = 0;
  else {
    this->__r_.__value_.__s.__size_ = a4 & 0x7F;
  }
}

void sub_1000CEF4C(uint64_t a1)
{
  uint64_t v2 = operator new(8uLL);
  void *v2 = &off_10012E1B8;
  sub_100005064(__p, ":hasKey");
  std::string::size_type v10 = __p;
  int v3 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v10);
  uint64_t v4 = *((void *)v3 + 5);
  *((void *)v3 + 5) = v2;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  char v5 = operator new(8uLL);
  *char v5 = &off_10012E200;
  sub_100005064(__p, ":getValueForKey");
  std::string::size_type v10 = __p;
  uint64_t v6 = sub_1000A7E58(a1, (unsigned __int8 *)__p, (uint64_t)&unk_1000F5000, (__int128 **)&v10);
  uint64_t v7 = *((void *)v6 + 5);
  *((void *)v6 + 5) = v5;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  if (v9 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1000CF094( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  uint64_t v16 = (void *)nullsub_4(v14);
  operator delete(v16);
  _Unwind_Resume(a1);
}

void sub_1000CF0D4(uint64_t a1, uint64_t *a2)
{
  unint64_t v8 = 0xAAAAAAAAAAAAAAAALL;
  char v9 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D23F8((uint64_t)a2, &v8);
  sub_100049A8C((uint64_t)&v8, v7);
  v5[0] = 4;
  unint64_t v6 = sub_1000CF4C4((uint64_t)v7, (const void **)&__p.__r_.__value_.__l.__data_) != 0;
  sub_1000041AC((uint64_t)v5);
  sub_1000041AC((uint64_t)v5);
  unint64_t v3 = a2[4];
  if (v3 >= a2[5])
  {
    uint64_t v4 = sub_100004B7C(a2 + 3, (uint64_t)v5);
  }

  else
  {
    *(_BYTE *)unint64_t v3 = v5[0];
    *(void *)(v3 + sub_100007004((uint64_t)v9 + 8) = v6;
    sub_1000041AC((uint64_t)v5);
    v5[0] = 0;
    unint64_t v6 = 0LL;
    sub_1000041AC(v3);
    uint64_t v4 = v3 + 16;
  }

  a2[4] = v4;
  sub_1000041AC((uint64_t)v5);
  sub_10000425C((uint64_t **)&v6, v5[0]);
  sub_100004D00((uint64_t)v7, (char *)v7[1]);
  sub_1000041AC((uint64_t)&v8);
  sub_10000425C(&v9, v8);
}

void sub_1000CF230( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, char a12, char *a13, uint64_t a14, uint64_t *a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000CF288()
{
  return 1LL;
}

void sub_1000CF290(uint64_t a1, uint64_t *a2)
{
  unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v14 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D23F8((uint64_t)a2, &v13);
  sub_100049A8C((uint64_t)&v13, &v11);
  unint64_t v3 = (char **)sub_10003CF38((uint64_t)&v11, (const void **)&__p.__r_.__value_.__l.__data_);
  if (&v12 == v3)
  {
    v9[0] = 0;
    std::string::size_type v10 = 0LL;
    sub_1000041AC((uint64_t)v9);
    sub_1000041AC((uint64_t)v9);
    unint64_t v7 = a2[4];
    if (v7 >= a2[5])
    {
      uint64_t v8 = sub_100004B7C(a2 + 3, (uint64_t)v9);
    }

    else
    {
      *(_BYTE *)unint64_t v7 = v9[0];
      *(void *)(v7 + sub_100007004((uint64_t)v9 + 8) = v10;
      sub_1000041AC((uint64_t)v9);
      v9[0] = 0;
      std::string::size_type v10 = 0LL;
      sub_1000041AC(v7);
      uint64_t v8 = v7 + 16;
    }

    a2[4] = v8;
    sub_1000041AC((uint64_t)v9);
    sub_10000425C(&v10, v9[0]);
  }

  else
  {
    uint64_t v4 = (uint64_t)(v3 + 7);
    unint64_t v5 = a2[4];
    if (v5 >= a2[5])
    {
      uint64_t v6 = sub_100070EB8(a2 + 3, v4);
    }

    else
    {
      sub_10000C3E4(a2[4], v4);
      uint64_t v6 = v5 + 16;
      a2[4] = v5 + 16;
    }

    a2[4] = v6;
  }

  sub_100004D00((uint64_t)&v11, v12);
  sub_1000041AC((uint64_t)&v13);
  sub_10000425C(&v14, v13);
}

void sub_1000CF424( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, char a12, char *a13, uint64_t a14, uint64_t *a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000CF48C()
{
  return 1LL;
}

void sub_1000CF498(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

void sub_1000CF4B0(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_4(a1);
  operator delete(v1);
}

uint64_t sub_1000CF4C4(uint64_t a1, const void **a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = a1 + 16;
    uint64_t v5 = 1LL;
    do
    {
      if (!sub_100005524(v4, a2, v2 + 4))
      {
        if (!sub_100005524(v4, v2 + 4, a2)) {
          return v5;
        }
        ++v2;
      }

      uint64_t v2 = (const void **)*v2;
    }

    while (v2);
  }

  return 0LL;
}

void sub_1000CF540(uint64_t *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v4 = operator new(0x40uLL);
  v4[1] = 0LL;
  void v4[2] = 0LL;
  *uint64_t v4 = off_10012E290;
  uint64_t v5 = sub_1000CF76C(v4 + 3, a1);
  *a2 = v5;
  a2[1] = v4;
  unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
  __int128 v17 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000CF674((uint64_t)v5, (uint64_t)&v16);
  if (v16 != 1)
  {
    uint64_t v6 = (uint64_t *)v4[4];
    unint64_t v7 = (std::__shared_weak_count *)v4[5];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        unint64_t v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }

    uint64_t v10 = *v6;
    uint64_t v11 = v6[1];
    uint64_t *v6 = -1LL;
    v6[1] = 0LL;
    uint64_t v12 = *a1;
    uint64_t v13 = a1[1];
    *a1 = v10;
    a1[1] = v11;
    v18[0] = v12;
    v18[1] = v13;
    sub_10004D0DC((uint64_t)v18);
    sub_1000CF710(a2);
    if (v7)
    {
      uint64_t v14 = (unint64_t *)&v7->__shared_owners_;
      do
        unint64_t v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }

  sub_1000041AC((uint64_t)&v16);
  sub_10000425C(&v17, v16);
}

void sub_1000CF674(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_BYTE *)a2 = v3[0];
  *(void *)(a2 + sub_100007004((uint64_t)v9 + 8) = v4;
  sub_1000041AC((uint64_t)v3);
  v3[0] = 0;
  uint64_t v4 = 0LL;
  sub_1000041AC(a2);
  sub_1000041AC((uint64_t)v3);
  sub_10000425C(&v4, v3[0]);
}

void sub_1000CF710(void *a1)
{
  uint64_t v1 = (std::__shared_weak_count *)a1[1];
  *a1 = 0LL;
  a1[1] = 0LL;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      unint64_t v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }

void *sub_1000CF76C(void *a1, uint64_t *a2)
{
  uint64_t v4 = sub_1000B0030(a1);
  *uint64_t v4 = off_10012E248;
  *(_OWORD *)(v4 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0u;
  uint64_t v5 = (uint64_t)(v4 + 1);
  *(_OWORD *)(v4 + 3) = 0u;
  uint64_t v6 = operator new(0x28uLL);
  v6[1] = 0LL;
  _DWORD v6[2] = 0LL;
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  void v6[3] = *a2;
  void *v6 = off_10012E2E0;
  v6[4] = v8;
  *a2 = -1LL;
  a2[1] = 0LL;
  *(void *)&__int128 v14 = v6 + 3;
  *((void *)&v14 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = v6;
  if (v7 == -1) {
    uint64_t v9 = 0LL;
  }
  else {
    uint64_t v9 = v7;
  }
  a1[3] = v9;
  a1[4] = v9 + v8;
  sub_100005894(v5, &v14);
  uint64_t v10 = (std::__shared_weak_count *)*((void *)&v14 + 1);
  if (*((void *)&v14 + 1))
  {
    uint64_t v11 = (unint64_t *)(*((void *)&v14 + 1) + 8LL);
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

  return a1;
}

void sub_1000CF874(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

uint64_t sub_1000CF880(uint64_t a1)
{
  return nullsub_4(a1);
}

void sub_1000CF8A8(uint64_t a1)
{
  uint64_t v2 = (void *)nullsub_4(a1);
  operator delete(v2);
}

void sub_1000CF8D4(uint64_t a1@<X0>, const void *a2@<X1>, void *a3@<X8>)
{
  a3[1] = 0LL;
  a3[2] = 0xAAAAAAAAAAAAAAAALL;
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  *(_BYTE *)a3 = 0;
  sub_1000041AC((uint64_t)a3);
  sub_1000041AC((uint64_t)a3);
  a3[2] = 0LL;
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = memchr(a2, 10, v6 - (void)a2);
  if (v7) {
    uint64_t v6 = (uint64_t)v7;
  }
  unint64_t v16 = 0LL;
  sub_10003D22C((uint64_t)a2, v6, (uint64_t)v15, 1, &v13);
  uint64_t v8 = v16;
  if (v16 == v15)
  {
    uint64_t v9 = 4LL;
    uint64_t v8 = v15;
    goto LABEL_8;
  }

  if (v16)
  {
    uint64_t v9 = 5LL;
LABEL_8:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }

  sub_1000041AC((uint64_t)&v13);
  char v10 = *(_BYTE *)a3;
  *(_BYTE *)a3 = v13;
  LOBYTE(v13) = v10;
  uint64_t v11 = (uint64_t *)a3[1];
  a3[1] = v14;
  __int128 v14 = v11;
  sub_1000041AC((uint64_t)a3);
  sub_1000041AC((uint64_t)&v13);
  sub_10000425C(&v14, v13);
  if (v6 == *(void *)(a1 + 32)) {
    uint64_t v12 = v6;
  }
  else {
    uint64_t v12 = v6 + 1;
  }
  a3[2] = v12;
}

void sub_1000CFA28( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  __int128 v18 = a15;
  if (a15 == &a12)
  {
    uint64_t v19 = 4LL;
    __int128 v18 = &a12;
  }

  else
  {
    if (!a15) {
      goto LABEL_6;
    }
    uint64_t v19 = 5LL;
  }

  (*(void (**)(void))(*(void *)v18 + 8 * v19))();
LABEL_6:
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    a10 = 0;
    a11 = 0LL;
    sub_1000041AC((uint64_t)&a10);
    sub_1000041AC((uint64_t)&a10);
    __cxa_end_catch();
    JUMPOUT(0x1000CF998LL);
  }

  sub_100045348(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_1000CFAA4(uint64_t a1)
{
  *(_BYTE *)a1 = 0;
  *(void *)(a1 + sub_100007004((uint64_t)v9 + 8) = 0LL;
  sub_1000041AC(a1);
  sub_1000041AC(a1);
  *(void *)(a1 + 16) = 0LL;
  return a1;
}

void sub_1000CFADC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (!v37[2]) {
    goto LABEL_15;
  }
  if (LOBYTE(v37[0]) != 1) {
    goto LABEL_15;
  }
  sub_1000184F4((uint64_t)v37, "transforms", (uint64_t)v35);
  __int128 v32 = (unint64_t)v37;
  __int128 v33 = 0uLL;
  unint64_t v34 = 0x8000000000000000LL;
  sub_1000211FC((unsigned __int8 **)&v32);
  unint64_t v36 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  v35[0] = v3;
  v35[1] = v3;
  sub_1000184F4((uint64_t)v37, "header", (uint64_t)v35);
  __int128 v32 = (unint64_t)v37;
  __int128 v33 = 0uLL;
  unint64_t v34 = 0x8000000000000000LL;
  sub_1000211FC((unsigned __int8 **)&v32);
  unint64_t v34 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v32 = v4;
  __int128 v33 = v4;
  uint64_t v5 = sub_10001D4BC((unsigned __int8 **)v35);
  sub_1000184F4((uint64_t)v5, "uuid", (uint64_t)&v32);
  uint64_t v6 = sub_10001D4BC((unsigned __int8 **)v35);
  unint64_t v31 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v29 = v7;
  __int128 v30 = v7;
  sub_1000211B0(&v29, (uint64_t)v6);
  sub_1000211FC((unsigned __int8 **)&v29);
  if (*sub_100018150((unsigned __int8 **)&v32) == 3)
  {
    unint64_t v31 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v8 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v8 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
    __int128 v29 = v8;
    __int128 v30 = v8;
    uint64_t v9 = sub_10001D4BC((unsigned __int8 **)v35);
    sub_1000184F4((uint64_t)v9, "name", (uint64_t)&v29);
    char v10 = sub_10001D4BC((unsigned __int8 **)v35);
    unint64_t v28 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v11 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v11 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
    __int128 v26 = v11;
    __int128 v27 = v11;
    sub_1000211B0(&v26, (uint64_t)v10);
    sub_1000211FC((unsigned __int8 **)&v26);
    unint64_t v28 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v12 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v12 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
    __int128 v26 = v12;
    __int128 v27 = v12;
    uint64_t v13 = sub_10001D4BC((unsigned __int8 **)v35);
    sub_1000184F4((uint64_t)v13, "builtOnDate", (uint64_t)&v26);
    __int128 v14 = sub_10001D4BC((unsigned __int8 **)v35);
    unint64_t v25 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v15 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v15 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
    __int128 v23 = v15;
    __int128 v24 = v15;
    sub_1000211B0(&v23, (uint64_t)v14);
    sub_1000211FC((unsigned __int8 **)&v23);
    unint64_t v25 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v16 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v16 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
    __int128 v23 = v16;
    __int128 v24 = v16;
    __int128 v17 = sub_10001D4BC((unsigned __int8 **)v35);
    sub_1000184F4((uint64_t)v17, "version", (uint64_t)&v23);
    __int128 v18 = sub_10001D4BC((unsigned __int8 **)v35);
    unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v19 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v19 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
    v21[0] = v19;
    v21[1] = v19;
    sub_1000211B0(v21, (uint64_t)v18);
    sub_1000211FC((unsigned __int8 **)v21);
    if (sub_10001855C((unsigned __int8 **)&v23, (unsigned __int8 **)v21)
      || *sub_100018150((unsigned __int8 **)&v23) != 3)
    {
LABEL_17:
      sub_1000CFAA4(a2);
    }

    else
    {
      char v20 = sub_100018150((unsigned __int8 **)v35);
      sub_1000CFE4C(a2, (uint64_t)v20, &v37[2]);
    }
  }

  else
  {
LABEL_15:
    *(_BYTE *)a2 = 0;
    *(void *)(a2 + sub_100007004((uint64_t)v9 + 8) = 0LL;
    sub_1000041AC(a2);
    sub_1000041AC(a2);
    *(void *)(a2 + 16) = 0LL;
  }

  sub_1000041AC((uint64_t)v37);
  sub_10000425C(&v37[1], LOBYTE(v37[0]));
}

void sub_1000CFE40(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

uint64_t sub_1000CFE4C(uint64_t a1, uint64_t a2, void *a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + sub_100007004((uint64_t)v9 + 8) = *(void *)(a2 + 8);
  sub_1000041AC(a2);
  *(_BYTE *)a2 = 0;
  *(void *)(a2 + sub_100007004((uint64_t)v9 + 8) = 0LL;
  sub_1000041AC(a1);
  *(void *)(a1 + 16) = *a3;
  return a1;
}

BOOL sub_1000CFEAC(uint64_t a1)
{
  __int128 v33 = v2;
  *(void *)((char *)&v34[-1] + (void)*(v2 - 3)) = v3;
  __int128 v4 = (std::ios_base *)((char *)&v34[-1] + (void)*(v33 - 3));
  std::ios_base::init(v4, v34);
  v4[1].__vftable = 0LL;
  v4[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf(v34);
  if ((v13.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v5 = &v13;
  }
  else {
    uint64_t v5 = (std::string *)v13.__r_.__value_.__r.__words[0];
  }
  std::ofstream::open(&v33, v5, 16LL);
  if ((*((_BYTE *)&v34[3] + (void)*(v33 - 3)) & 5) != 0)
  {
    uint64_t v6 = (os_log_s *)qword_100131780;
    if (os_log_type_enabled((os_log_t)qword_100131780, OS_LOG_TYPE_ERROR)) {
      sub_1000D1120(v6);
    }
    BOOL v7 = 0LL;
  }

  else
  {
    memset(v12, 170, sizeof(v12));
    v14[0] = 1;
    sub_100005064(&v15, "addTransform");
    int v17 = 2;
    sub_100005064(v18, "removeTransforms");
    int v19 = 3;
    sub_100005064(v20, "addEvent");
    int v21 = 4;
    sub_100005064(v22, "removeEvents");
    int v23 = 5;
    sub_100005064(v24, "addModifyEvent");
    int v25 = 6;
    sub_100005064(v26, "removeModifyEvents");
    int v27 = 7;
    sub_100005064(v28, "addExternalConfiguration");
    int v29 = 8;
    sub_100005064(v30, "removeExternalConfigurations");
    int v31 = 0;
    sub_100005064(v32, "header");
    sub_1000D0954((uint64_t)v12, v14, 9LL);
    uint64_t v8 = 72LL;
    do
    {
      if (SHIBYTE(v14[v8 - 1]) < 0) {
        operator delete(*(void **)((char *)&v13.__r_.__value_.__l.__data_ + v8 * 4));
      }
      v8 -= 8LL;
    }

    while (v8 * 4);
    memset(__p, 170, sizeof(__p));
    sub_100005064(__p, "");
    __int128 v16 = 0LL;
    uint64_t v9 = operator new(0x20uLL);
    *uint64_t v9 = &off_10012E330;
    v9[1] = v12;
    _OWORD v9[2] = &v33;
    void v9[3] = __p;
    __int128 v16 = v9;
    BOOL v7 = sub_1000D0280(a1, (uint64_t)v14);
    (*(void (**)(void *))(*v9 + 40LL))(v9);
    if (!std::filebuf::close(v34)) {
      std::ios_base::clear( (std::ios_base *)((char *)&v34[-1] + (void)*(v33 - 3)),  *(_DWORD *)((char *)&v34[3] + (void)*(v33 - 3)) | 4);
    }
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    sub_1000D0D34((uint64_t)v12, v12[1]);
  }

  std::filebuf::~filebuf(v34);
  std::ios::~ios(&v34[51]);
  return v7;
}

void sub_1000D023C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  if (a2)
  {
    std::ostream::~ostream(&a55, v56 + 8);
    std::ios::~ios(v55);
    sub_1000045D0(exception_object);
  }

  _Unwind_Resume(exception_object);
}

BOOL sub_1000D0280(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(uint64_t **)&v28[16];
  if (v28[0] != 1 || *(void *)&v28[16] == 0LL)
  {
    sub_1000041AC((uint64_t)v28);
    sub_10000425C((uint64_t **)&v28[8], v28[0]);
  }

  else
  {
    LODWORD(sub_10000425C(v33, __p) = 0;
    uint64_t v6 = *(void *)(a2 + 24);
    if (!v6) {
LABEL_48:
    }
      sub_1000129CC();
    int v7 = (*(uint64_t (**)(uint64_t, void **, _BYTE *))(*(void *)v6 + 48LL))(v6, &__p, v28);
    sub_1000041AC((uint64_t)v28);
    sub_10000425C((uint64_t **)&v28[8], v28[0]);
    if (v7)
    {
      while (1)
      {
        uint64_t v8 = *(uint64_t **)(a1 + 32);
        BOOL v9 = v4 == v8;
        if (v4 == v8) {
          return v9;
        }
        memset(v29, 170, sizeof(v29));
        sub_1000CF8D4(a1, v4, v29);
        __int128 v4 = v29[2];
        if (!v29[2]) {
          goto LABEL_22;
        }
        *(void *)&v28[32] = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&__int128 v10 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v10 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)unint64_t v28 = v10;
        *(_OWORD *)&_BYTE v28[16] = v10;
        sub_1000184F4((uint64_t)v29, "addTransform", (uint64_t)v28);
        *(void *)&__int128 v27 = 0LL;
        __int128 v26 = 0uLL;
        std::string __p = v29;
        *((void *)&v27 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0x8000000000000000LL;
        sub_1000211FC((unsigned __int8 **)&__p);
        if (!sub_10001855C((unsigned __int8 **)v28, (unsigned __int8 **)&__p))
        {
          int v21 = sub_100018150((unsigned __int8 **)v28);
          LODWORD(sub_10000425C(v33, __p) = 1;
          uint64_t v22 = *(void *)(a2 + 24);
          if (!v22) {
            goto LABEL_48;
          }
          goto LABEL_38;
        }

        sub_1000184F4((uint64_t)v29, "removeTransforms", (uint64_t)&__p);
        __int128 v11 = __p;
        *(_OWORD *)&_BYTE v28[8] = v26;
        *(_OWORD *)&v28[24] = v27;
        *(void *)&__int128 v27 = 0LL;
        __int128 v26 = 0uLL;
        std::string __p = v29;
        *((void *)&v27 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0x8000000000000000LL;
        *(void *)unint64_t v28 = v11;
        sub_1000211FC((unsigned __int8 **)&__p);
        if (!sub_10001855C((unsigned __int8 **)v28, (unsigned __int8 **)&__p))
        {
          int v21 = sub_100018150((unsigned __int8 **)v28);
          LODWORD(sub_10000425C(v33, __p) = 2;
          uint64_t v22 = *(void *)(a2 + 24);
          if (!v22) {
            goto LABEL_48;
          }
          goto LABEL_38;
        }

        sub_1000184F4((uint64_t)v29, "addEvent", (uint64_t)&__p);
        __int128 v12 = __p;
        *(_OWORD *)&_BYTE v28[8] = v26;
        *(_OWORD *)&v28[24] = v27;
        *(void *)&__int128 v27 = 0LL;
        __int128 v26 = 0uLL;
        std::string __p = v29;
        *((void *)&v27 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0x8000000000000000LL;
        *(void *)unint64_t v28 = v12;
        sub_1000211FC((unsigned __int8 **)&__p);
        if (!sub_10001855C((unsigned __int8 **)v28, (unsigned __int8 **)&__p))
        {
          int v21 = sub_100018150((unsigned __int8 **)v28);
          LODWORD(sub_10000425C(v33, __p) = 3;
          uint64_t v22 = *(void *)(a2 + 24);
          if (!v22) {
            goto LABEL_48;
          }
          goto LABEL_38;
        }

        sub_1000184F4((uint64_t)v29, "removeEvents", (uint64_t)&__p);
        std::string v13 = __p;
        *(_OWORD *)&_BYTE v28[8] = v26;
        *(_OWORD *)&v28[24] = v27;
        *(void *)&__int128 v27 = 0LL;
        __int128 v26 = 0uLL;
        std::string __p = v29;
        *((void *)&v27 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0x8000000000000000LL;
        *(void *)unint64_t v28 = v13;
        sub_1000211FC((unsigned __int8 **)&__p);
        if (!sub_10001855C((unsigned __int8 **)v28, (unsigned __int8 **)&__p))
        {
          int v21 = sub_100018150((unsigned __int8 **)v28);
          LODWORD(sub_10000425C(v33, __p) = 4;
          uint64_t v22 = *(void *)(a2 + 24);
          if (!v22) {
            goto LABEL_48;
          }
          goto LABEL_38;
        }

        sub_1000184F4((uint64_t)v29, "addModifyEvent", (uint64_t)&__p);
        __int128 v14 = __p;
        *(_OWORD *)&_BYTE v28[8] = v26;
        *(_OWORD *)&v28[24] = v27;
        *(void *)&__int128 v27 = 0LL;
        __int128 v26 = 0uLL;
        std::string __p = v29;
        *((void *)&v27 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0x8000000000000000LL;
        *(void *)unint64_t v28 = v14;
        sub_1000211FC((unsigned __int8 **)&__p);
        if (!sub_10001855C((unsigned __int8 **)v28, (unsigned __int8 **)&__p))
        {
          int v21 = sub_100018150((unsigned __int8 **)v28);
          LODWORD(sub_10000425C(v33, __p) = 5;
          uint64_t v22 = *(void *)(a2 + 24);
          if (!v22) {
            goto LABEL_48;
          }
          goto LABEL_38;
        }

        sub_1000184F4((uint64_t)v29, "removeModifyEvents", (uint64_t)&__p);
        uint64_t v15 = __p;
        *(_OWORD *)&_BYTE v28[8] = v26;
        *(_OWORD *)&v28[24] = v27;
        *(void *)&__int128 v27 = 0LL;
        __int128 v26 = 0uLL;
        std::string __p = v29;
        *((void *)&v27 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0x8000000000000000LL;
        *(void *)unint64_t v28 = v15;
        sub_1000211FC((unsigned __int8 **)&__p);
        if (!sub_10001855C((unsigned __int8 **)v28, (unsigned __int8 **)&__p))
        {
          int v21 = sub_100018150((unsigned __int8 **)v28);
          LODWORD(sub_10000425C(v33, __p) = 6;
          uint64_t v22 = *(void *)(a2 + 24);
          if (!v22) {
            goto LABEL_48;
          }
          goto LABEL_38;
        }

        sub_1000184F4((uint64_t)v29, "addExternalConfiguration", (uint64_t)&__p);
        __int128 v16 = __p;
        *(_OWORD *)&_BYTE v28[8] = v26;
        *(_OWORD *)&v28[24] = v27;
        *(void *)&__int128 v27 = 0LL;
        __int128 v26 = 0uLL;
        std::string __p = v29;
        *((void *)&v27 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0x8000000000000000LL;
        *(void *)unint64_t v28 = v16;
        sub_1000211FC((unsigned __int8 **)&__p);
        sub_1000184F4((uint64_t)v29, "removeExternalConfigurations", (uint64_t)&__p);
        int v17 = __p;
        *(_OWORD *)&_BYTE v28[8] = v26;
        *(_OWORD *)&v28[24] = v27;
        *(void *)&__int128 v27 = 0LL;
        __int128 v26 = 0uLL;
        std::string __p = v29;
        *((void *)&v27 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0x8000000000000000LL;
        *(void *)unint64_t v28 = v17;
        sub_1000211FC((unsigned __int8 **)&__p);
        if (!sub_10001855C((unsigned __int8 **)v28, (unsigned __int8 **)&__p))
        {
          int v21 = sub_100018150((unsigned __int8 **)v28);
          LODWORD(sub_10000425C(v33, __p) = 8;
          uint64_t v22 = *(void *)(a2 + 24);
          if (!v22) {
            goto LABEL_48;
          }
LABEL_38:
          goto LABEL_22;
        }

        __int128 v18 = (os_log_s *)qword_100131780;
        if (os_log_type_enabled((os_log_t)qword_100131780, OS_LOG_TYPE_ERROR))
        {
          sub_100006200((uint64_t)v29, -1, 0x20u, 0LL, 1, &__p);
          p_p = &__p;
          if (v26 < 0) {
            p_p = __p;
          }
          *(_DWORD *)std::string buf = 136446210;
          int v31 = p_p;
          _os_log_error_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "[NdJson Config] ERROR: Unknown config key encountered while parsing ndjson config: %{public}s",  buf,  0xCu);
          if (SHIBYTE(v26) < 0) {
            operator delete(__p);
          }
        }

        LODWORD(sub_10000425C(v33, __p) = 9;
        uint64_t v19 = *(void *)(a2 + 24);
        if (!v19) {
          goto LABEL_48;
        }
        if ((*(unsigned int (**)(uint64_t, void **, uint64_t **))(*(void *)v19 + 48LL))(v19, &__p, v29))
        {
LABEL_39:
          int v20 = 0;
          goto LABEL_40;
        }

void sub_1000D08AC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1000D08BC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10012E290;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000D08CC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10012E290;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_1000D08EC(uint64_t a1)
{
  uint64_t v1 = a1 + 24;
  sub_100007004(a1 + 32);
  return nullsub_4(v1);
}

void sub_1000D0918(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10012E2E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000D0928(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10012E2E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_1000D0948(uint64_t a1)
{
  return sub_10004D0DC(a1 + 24);
}

uint64_t sub_1000D0954(uint64_t a1, int *a2, uint64_t a3)
{
  *(void *)(a1 + sub_100007004((uint64_t)v9 + 8) = 0LL;
  __int128 v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 32 * a3;
    do
    {
      sub_1000D09D0((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 8;
      v6 -= 32LL;
    }

    while (v6);
  }

  return a1;
}

void sub_1000D09B8(_Unwind_Exception *a1)
{
}

uint64_t *sub_1000D09D0(uint64_t **a1, uint64_t *a2, int *a3, uint64_t a4)
{
  uint64_t v8 = 0xAAAAAAAAAAAAAAAALL;
  BOOL v9 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v6 = (uint64_t **)sub_1000D0A88(a1, a2, &v9, &v8, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    memset(v10, 170, sizeof(v10));
    sub_1000D0C30((uint64_t)a1, a4, v10);
    sub_1000054D0(a1, (uint64_t)v9, v6, v10[0]);
    return v10[0];
  }

  return result;
}

uint64_t *sub_1000D0A88(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, int v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    uint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      __int128 v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }

      else
      {
        *a3 = a2;
        return a2;
      }
    }

    if (v8)
    {
      BOOL v9 = (uint64_t *)*a2;
      do
      {
        __int128 v10 = v9;
        BOOL v9 = (uint64_t *)v9[1];
      }

      while (v9);
    }

    else
    {
      std::string v13 = a2;
      do
      {
        __int128 v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        std::string v13 = v10;
      }

      while (v14);
    }

    int v15 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          int v17 = (uint64_t *)v16;
          int v18 = *(_DWORD *)(v16 + 32);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          uint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }

        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }

      while (v16);
    }

    else
    {
      int v17 = a1 + 1;
    }

void *sub_1000D0C30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  memset(a3, 170, 24);
  int v6 = operator new(0x40uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  _BYTE v6[8] = *(_DWORD *)a2;
  uint64_t result = v6 + 10;
  if (*(char *)(a2 + 31) < 0)
  {
    uint64_t result = sub_10000B8BC(result, *(void **)(a2 + 8), *(void *)(a2 + 16));
  }

  else
  {
    *(_OWORD *)uint64_t result = *(_OWORD *)(a2 + 8);
    result[2] = *(void *)(a2 + 24);
  }

  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_1000D0CCC(_Unwind_Exception *a1)
{
  void *v1 = 0LL;
  sub_1000D0CE8(v2, v3);
  _Unwind_Resume(a1);
}

void sub_1000D0CE8(uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
  }

  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void sub_1000D0D34(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_1000D0D34(a1, *(void *)a2);
    sub_1000D0D34(a1, *((void *)a2 + 1));
    if (a2[63] < 0) {
      operator delete(*((void **)a2 + 5));
    }
    operator delete(a2);
  }

__n128 sub_1000D0D8C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &off_10012E330;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + sub_100007004((uint64_t)v9 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1000D0DCC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10012E330;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + memset(v28, 170, 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + sub_100007004((uint64_t)v9 + 8) = result;
  return result;
}

uint64_t sub_1000D0DF4(uint64_t a1, int *a2, uint64_t a3)
{
  int v24 = *a2;
  if (v24 != 9)
  {
    unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
    int v23 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    sub_10000BA40((uint64_t)&v22, 0LL, 0LL, 0, 1);
    sub_10000C3E4((uint64_t)v20, a3);
    uint64_t v5 = *(uint64_t ***)(a1 + 8);
    __p[0] = &v24;
    int v6 = sub_1000D105C(v5, &v24, (uint64_t)&unk_1000F5000, (_DWORD **)__p);
    int v7 = sub_1000304A4((unsigned __int8 *)&v22, (const void **)v6 + 5);
    sub_1000041AC((uint64_t)v20);
    char v8 = *(_BYTE *)v7;
    *(_BYTE *)int v7 = v20[0];
    v20[0] = v8;
    BOOL v9 = (uint64_t *)v7[1];
    v7[1] = (uint64_t)v21;
    int v21 = v9;
    sub_1000041AC((uint64_t)v7);
    sub_1000041AC((uint64_t)v20);
    sub_10000425C(&v21, v20[0]);
    uint64_t v10 = *(void *)(a1 + 24);
    int v11 = *(char *)(v10 + 23);
    if (v11 >= 0) {
      uint64_t v12 = *(void *)(a1 + 24);
    }
    else {
      uint64_t v12 = *(void *)v10;
    }
    if (v11 >= 0) {
      uint64_t v13 = *(unsigned __int8 *)(v10 + 23);
    }
    else {
      uint64_t v13 = *(void *)(v10 + 8);
    }
    BOOL v14 = sub_1000702CC(*(void **)(a1 + 16), v12, v13);
    sub_100006200((uint64_t)&v22, -1, 0x20u, 0LL, 0, __p);
    if ((v19 & 0x80u) == 0) {
      int v15 = __p;
    }
    else {
      int v15 = (void **)__p[0];
    }
    if ((v19 & 0x80u) == 0) {
      uint64_t v16 = v19;
    }
    else {
      uint64_t v16 = (uint64_t)__p[1];
    }
    sub_1000702CC(v14, (uint64_t)v15, v16);
    std::string::assign(*(std::string **)(a1 + 24), "\n");
    sub_1000041AC((uint64_t)&v22);
    sub_10000425C(&v23, v22);
  }

  return 1LL;
}

void sub_1000D0FAC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, unsigned __int8 a18, uint64_t *a19)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1000041AC((uint64_t)&a18);
  sub_10000425C(&a19, a18);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D1014(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

void (**sub_1000D1050())(std::__shared_weak_count *__hidden this, const std::type_info *)
{
}

uint64_t **sub_1000D105C(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  int v7 = a1 + 1;
  int v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        BOOL v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        int v6 = *v9;
        int v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }

      if (v10 >= v8) {
        break;
      }
      int v6 = v9[1];
      if (!v6)
      {
        int v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    BOOL v9 = a1 + 1;
LABEL_10:
    int v11 = operator new(0x40uLL);
    unsigned __int8 v11[8] = **a4;
    *((void *)v11 + 6) = 0LL;
    *((void *)v11 + 7) = 0LL;
    *((void *)v11 + 5) = 0LL;
    sub_1000054D0(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }

  return v9;
}

void sub_1000D1120(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "[NdJson Config] ERROR: Failed to open ndjson dev tasked config file for writing.",  v1,  2u);
}

void *sub_1000D118C(void *a1, uint64_t a2)
{
  __int128 v4 = sub_1000B0030(a1);
  *__int128 v4 = off_10012E3B0;
  sub_10000C3E4((uint64_t)(v4 + 1), a2);
  return a1;
}

uint64_t sub_1000D11D0(uint64_t a1)
{
  return nullsub_4(a1);
}

void sub_1000D1208(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000D11D0(a1);
  operator delete(v1);
}

uint64_t sub_1000D121C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + 8;
  if (*(_BYTE *)(a1 + 8) == 1)
  {
    unint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v4 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v4 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
    v17[0] = v4;
    v17[1] = v4;
    sub_100008780(a1 + 8, (const std::string::value_type **)off_100125F18, (uint64_t)v17);
    unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v5 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v5 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
    __int128 v14 = v5;
    __int128 v15 = v5;
    sub_100008B44(&v14, v3);
    sub_100008AC8((unsigned __int8 **)&v14);
    unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v6 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v6 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
    __int128 v14 = v6;
    __int128 v15 = v6;
    int v7 = sub_10004A598((unsigned __int8 **)v17);
    sub_100055F38((uint64_t)v7, "uuid", (uint64_t)&v14);
    int v8 = sub_10004A598((unsigned __int8 **)v17);
    unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v9 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v9 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
    v12[0] = v9;
    v12[1] = v9;
    sub_100008B44(v12, (uint64_t)v8);
    sub_100008AC8((unsigned __int8 **)v12);
    if (sub_1000087E8((unsigned __int8 **)&v14, (unsigned __int8 **)v12)
      || *sub_100008924((unsigned __int8 **)&v14) != 3)
    {
LABEL_7:
      *(_BYTE *)a2 = 0;
      *(void *)(a2 + sub_100007004((uint64_t)v9 + 8) = 0LL;
      sub_1000041AC(a2);
      return sub_1000041AC(a2);
    }

    else
    {
      int v10 = sub_100008924((unsigned __int8 **)v17);
      return sub_10000C3E4(a2, (uint64_t)v10);
    }
  }

  else
  {
    *(_BYTE *)a2 = 0;
    *(void *)(a2 + sub_100007004((uint64_t)v9 + 8) = 0LL;
    sub_1000041AC(a2);
    return sub_1000041AC(a2);
  }

void sub_1000D13C0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

uint64_t sub_1000D13CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 8;
  if (*(_BYTE *)(a1 + 8) != 1) {
    return 0LL;
  }
  *(void *)&__int128 v30 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v30 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  sub_1000D121C(a1, (uint64_t)&v30);
  if (v30 == 1)
  {
    LODWORD(v27) = 0;
    uint64_t v4 = *(void *)(a2 + 24);
    if (!v4) {
LABEL_23:
    }
      sub_1000129CC();
    if (!(*(unsigned int (**)(uint64_t, __int128 *, __int128 *))(*(void *)v4 + 48LL))(v4, &v27, &v30))
    {
      sub_1000041AC((uint64_t)&v30);
      sub_10000425C((uint64_t **)&v30 + 1, v30);
      return 0LL;
    }
  }

  sub_1000041AC((uint64_t)&v30);
  sub_10000425C((uint64_t **)&v30 + 1, v30);
  unint64_t v32 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v30 = v5;
  __int128 v31 = v5;
  sub_100008780(v2, (const std::string::value_type **)off_100125F00, (uint64_t)&v30);
  unint64_t v29 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v27 = v6;
  __int128 v28 = v6;
  sub_100008B44(&v27, v2);
  sub_100008AC8((unsigned __int8 **)&v27);
  if (!sub_1000087E8((unsigned __int8 **)&v30, (unsigned __int8 **)&v27)
    && *sub_100008924((unsigned __int8 **)&v30) == 2)
  {
    int v7 = sub_100008924((unsigned __int8 **)&v30);
    unint64_t v29 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v8 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v8 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
    __int128 v27 = v8;
    __int128 v28 = v8;
    sub_100008B44(&v27, (uint64_t)v7);
    sub_100045378((unsigned __int8 **)&v27);
    unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v9 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v9 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
    __int128 v24 = v9;
    __int128 v25 = v9;
    sub_100008B44(&v24, (uint64_t)v7);
    sub_100008AC8((unsigned __int8 **)&v24);
    while (!sub_1000087E8((unsigned __int8 **)&v27, (unsigned __int8 **)&v24))
    {
      unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
      int v23 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
      int v10 = sub_100008924((unsigned __int8 **)&v27);
      sub_10000C3E4((uint64_t)&v22, (uint64_t)v10);
      int v33 = 1;
      uint64_t v11 = *(void *)(a2 + 24);
      if (!v11) {
        goto LABEL_23;
      }
      int v12 = (*(uint64_t (**)(uint64_t, int *, unint64_t *))(*(void *)v11 + 48LL))(v11, &v33, &v22);
      sub_1000041AC((uint64_t)&v22);
      sub_10000425C(&v23, v22);
      if (!v12) {
        return 0LL;
      }
      sub_100018704((unsigned __int8 **)&v27);
    }
  }

  unint64_t v32 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v13 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v13 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v30 = v13;
  __int128 v31 = v13;
  sub_100008780(v2, (const std::string::value_type **)off_100125F08, (uint64_t)&v30);
  unint64_t v29 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v14 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v14 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v27 = v14;
  __int128 v28 = v14;
  sub_100008B44(&v27, v2);
  sub_100008AC8((unsigned __int8 **)&v27);
  if (!sub_1000087E8((unsigned __int8 **)&v30, (unsigned __int8 **)&v27)
    && *sub_100008924((unsigned __int8 **)&v30) == 2)
  {
    __int128 v15 = sub_100008924((unsigned __int8 **)&v30);
    unint64_t v29 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v16 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v16 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
    __int128 v27 = v16;
    __int128 v28 = v16;
    sub_100008B44(&v27, (uint64_t)v15);
    sub_100045378((unsigned __int8 **)&v27);
    unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v17 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v17 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
    __int128 v24 = v17;
    __int128 v25 = v17;
    sub_100008B44(&v24, (uint64_t)v15);
    sub_100008AC8((unsigned __int8 **)&v24);
    while (!sub_1000087E8((unsigned __int8 **)&v27, (unsigned __int8 **)&v24))
    {
      unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
      int v23 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
      unint64_t v18 = sub_100008924((unsigned __int8 **)&v27);
      sub_10000C3E4((uint64_t)&v22, (uint64_t)v18);
      int v33 = 7;
      uint64_t v19 = *(void *)(a2 + 24);
      if (!v19) {
        goto LABEL_23;
      }
      char v20 = (*(uint64_t (**)(uint64_t, int *, unint64_t *))(*(void *)v19 + 48LL))(v19, &v33, &v22);
      sub_1000041AC((uint64_t)&v22);
      sub_10000425C(&v23, v22);
      if ((v20 & 1) == 0) {
        return 0LL;
      }
      sub_100018704((unsigned __int8 **)&v27);
    }
  }

  return 1LL;
}

void sub_1000D1728(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000045D0(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_1000D1740(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *__n128 result = *a2;
  *(uint64_t *)((char *)result + *(void *)(v2 - 8sub_1000D0D34(v1, *(char **)(v1 + 8)) = a2[1];
  return result;
}

void sub_1000D175C(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  (*(void (**)(std::string *__return_ptr))(*(void *)a1 + 16LL))(&v3);
  sub_1000D17F4(&v3, a2);
  sub_1000041AC((uint64_t)&v3);
  sub_10000425C((uint64_t **)&v3.__r_.__value_.__l.__size_, v3.__r_.__value_.__s.__data_[0]);
}

void sub_1000D17E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

std::string *sub_1000D17F4@<X0>(std::string *result@<X0>, std::string *a2@<X8>)
{
  if (result->__r_.__value_.__s.__data_[0] != 1) {
    goto LABEL_5;
  }
  uint64_t v3 = (uint64_t)result;
  unint64_t v10 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  v9[0] = v4;
  v9[1] = v4;
  sub_100055F38((uint64_t)result, "uuid", (uint64_t)v9);
  unint64_t v8 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xAAAAAAAAAAAAAAAALL;
  v7[0] = v5;
  v7[1] = v5;
  sub_100008B44(v7, v3);
  sub_100008AC8((unsigned __int8 **)v7);
  __n128 result = (std::string *)sub_1000087E8((unsigned __int8 **)v9, (unsigned __int8 **)v7);
  if ((_DWORD)result) {
    goto LABEL_5;
  }
  __n128 result = (std::string *)sub_100008924((unsigned __int8 **)v9);
  if (result->__r_.__value_.__s.__data_[0] == 3)
  {
    __int128 v6 = sub_100008924((unsigned __int8 **)v9);
    return sub_1000218CC((uint64_t)v6, a2);
  }

  else
  {
LABEL_5:
    a2->__r_.__value_.__r.__words[0] = 0LL;
    a2->__r_.__value_.__l.__size_ = 0LL;
    a2->__r_.__value_.__l.__cap_ = 0LL;
  }

  return result;
}

uint64_t sub_1000D18E0(uint64_t a1, uint64_t a2)
{
  std::string::size_type size = __p.__r_.__value_.__s.__size_;
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
    uint64_t v4 = 0LL;
    if ((__p.__r_.__value_.__s.__size_ & 0x80) == 0) {
      return v4;
    }
    goto LABEL_5;
  }

  uint64_t v4 = (*(uint64_t (**)(uint64_t, std::string *))(*(void *)a1 + 72LL))(a1, &__p);
  if ((__p.__r_.__value_.__s.__size_ & 0x80) != 0) {
LABEL_5:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1000D1998(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

uint64_t sub_1000D19A4(uint64_t a1, uint64_t a2)
{
  std::string::size_type size = __p.__r_.__value_.__s.__size_;
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
    uint64_t v4 = 0LL;
    if ((__p.__r_.__value_.__s.__size_ & 0x80) == 0) {
      return v4;
    }
    goto LABEL_5;
  }

  uint64_t v4 = (*(uint64_t (**)(uint64_t, std::string *))(*(void *)a1 + 88LL))(a1, &__p);
  if ((__p.__r_.__value_.__s.__size_ & 0x80) != 0) {
LABEL_5:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1000D1A5C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000045D0(a1);
}

void sub_1000D1A68(void *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *((void *)v2 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0LL;
  *((void *)v2 + sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = 0LL;
  *(_OWORD *)(v2 + memset(v28, 170, 24) = 0u;
  *(void *)uint64_t v2 = off_10012E430;
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  sub_1000A9ED8((uint64_t)(v2 + 24));
  sub_1000CDB1C((uint64_t)(v2 + 24));
  sub_1000AF614((uint64_t)(v2 + 24));
  sub_1000CEF4C((uint64_t)(v2 + 24));
  sub_1000B44F4((uint64_t)(v2 + 24));
  sub_1000B0E64((uint64_t)(v2 + 24));
  sub_1000CC4BC((uint64_t)(v2 + 24));
  sub_1000A8B58((uint64_t)(v2 + 24));
  sub_1000A653C((uint64_t)(v2 + 24));
  sub_1000A8134((uint64_t)(v2 + 24));
  sub_1000B0048((uint64_t)(v2 + 24));
  *a1 = v2 + 24;
  a1[1] = v2;
}

void sub_1000D1B54(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1000D1B68@<X0>(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = a1 + 24;
  if (*(void *)(a1 + 24) == v2)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000A9394(exception, "EvaluationContext Stack empty: expected string");
    goto LABEL_6;
  }

  int v5 = *(unsigned __int8 *)(v2 - 16);
  uint64_t v4 = v2 - 16;
  if (v5 != 3)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000A9394(exception, "EvaluationContext Stack type mismatch: expected string");
LABEL_6:
  }

  memset(a2, 170, sizeof(std::string));
  sub_1000218CC(v4, a2);
  return sub_100004CA0(v3, *(void *)(a1 + 32) - 16LL);
}

void sub_1000D1C08(_Unwind_Exception *a1)
{
}

uint64_t sub_1000D1C20(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 32);
  uint64_t v3 = a2 + 24;
  if (*(void *)(a2 + 24) == v2)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000A9394(exception, "EvaluationContext Stack empty: expected integer");
    goto LABEL_6;
  }

  int v5 = *(unsigned __int8 *)(v2 - 16);
  uint64_t v4 = (unsigned __int8 *)(v2 - 16);
  if ((v5 - 5) >= 2)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000A9394(exception, "EvaluationContext Stack type mismatch: expected integer");
LABEL_6:
  }

  uint64_t v10 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FF7C(v4, &v10);
  uint64_t v7 = v10;
  sub_100004CA0(v3, *(void *)(a2 + 32) - 16LL);
  return v7;
}

void sub_1000D1D0C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000D1D2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 32);
  uint64_t v3 = a2 + 24;
  if (*(void *)(a2 + 24) == v2)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000A9394(exception, "EvaluationContext Stack empty: expected integer");
    goto LABEL_9;
  }

  int v6 = *(unsigned __int8 *)(v2 - 16);
  uint64_t v4 = (unsigned __int8 *)(v2 - 16);
  int v5 = v6;
  if (!v6)
  {
    sub_100004CA0(a2 + 24, (uint64_t)v4);
    return 0LL;
  }

  if ((v5 - 5) >= 2)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000A9394(exception, "EvaluationContext Stack type mismatch: expected integer");
LABEL_9:
  }

  uint64_t v11 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FF7C(v4, &v11);
  uint64_t v8 = v11;
  sub_100004CA0(v3, *(void *)(a2 + 32) - 16LL);
  return v8;
}

void sub_1000D1E34(_Unwind_Exception *a1)
{
}

uint64_t sub_1000D1E54@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = a1 + 24;
  if (*(void *)(a1 + 24) == v3)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000A9394(exception, "EvaluationContext Stack empty: expected number type");
    goto LABEL_8;
  }

  int v8 = *(unsigned __int8 *)(v3 - 16);
  int v6 = (char *)(v3 - 16);
  int v7 = v8;
  if ((v8 - 5) <= 2)
  {
    *a2 = 0xAAAAAAAAAAAAAAAALL;
    a2[1] = 0xAAAAAAAAAAAAAAAALL;
    sub_10000C3E4((uint64_t)a2, (uint64_t)v6);
    return sub_100004CA0(v4, *(void *)(a1 + 32) - 16LL);
  }

  if (v7 != 4)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000A9394(exception, "EvaluationContext Stack type mismatch: expected number type");
LABEL_8:
  }

  unsigned __int8 v12 = -86;
  sub_100059DD4(v6, &v12);
  uint64_t v10 = v12;
  sub_100004CA0(v4, *(void *)(a1 + 32) - 16LL);
  *(_BYTE *)a2 = 5;
  a2[1] = v10;
  sub_1000041AC((uint64_t)a2);
  return sub_1000041AC((uint64_t)a2);
}

void sub_1000D1FB4(_Unwind_Exception *a1)
{
}

uint64_t sub_1000D1FD4@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = a1 + 24;
  if (*(void *)(a1 + 24) == v3)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000A9394(exception, "EvaluationContext Stack empty: expected number type");
    goto LABEL_10;
  }

  int v8 = *(unsigned __int8 *)(v3 - 16);
  int v6 = (char *)(v3 - 16);
  int v7 = v8;
  if ((v8 - 5) <= 2)
  {
    *a2 = 0xAAAAAAAAAAAAAAAALL;
    a2[1] = 0xAAAAAAAAAAAAAAAALL;
    sub_10000C3E4((uint64_t)a2, (uint64_t)v6);
    return sub_100004CA0(v4, *(void *)(a1 + 32) - 16LL);
  }

  if (v7)
  {
    if (v7 == 4)
    {
      unsigned __int8 v12 = -86;
      sub_100059DD4(v6, &v12);
      uint64_t v10 = v12;
      sub_100004CA0(v4, *(void *)(a1 + 32) - 16LL);
      *(_BYTE *)a2 = 5;
      a2[1] = v10;
      sub_1000041AC((uint64_t)a2);
      return sub_1000041AC((uint64_t)a2);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000A9394(exception, "EvaluationContext Stack type mismatch: expected number/null type");
LABEL_10:
  }

  sub_100004CA0(a1 + 24, (uint64_t)v6);
  *(_BYTE *)a2 = 0;
  a2[1] = 0LL;
  sub_1000041AC((uint64_t)a2);
  return sub_1000041AC((uint64_t)a2);
}

void sub_1000D2184(_Unwind_Exception *a1)
{
}

uint64_t sub_1000D21A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 32);
  uint64_t v3 = a2 + 24;
  if (*(void *)(a2 + 24) == v2)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000A9394(exception, "EvaluationContext Stack empty: expected BOOL type");
    goto LABEL_9;
  }

  int v7 = *(unsigned __int8 *)(v2 - 16);
  int v5 = (char *)(v2 - 16);
  int v6 = v7;
  if (v7 != 4)
  {
    if ((v6 - 5) <= 2)
    {
      unint64_t v11 = 0xAAAAAAAAAAAAAAAALL;
      unsigned __int8 v12 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
      sub_10000C3E4((uint64_t)&v11, (uint64_t)v5);
      sub_100004CA0(v3, *(void *)(a2 + 32) - 16LL);
      uint64_t v8 = sub_1000B1FE8((unsigned __int8 *)&v11, 0);
      sub_1000041AC((uint64_t)&v11);
      sub_10000425C(&v12, v11);
      return v8;
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000A9394(exception, "EvaluationContext Stack type mismatch: expected BOOL type");
LABEL_9:
  }

  LOBYTE(sub_1000226A0(v12, v11) = -86;
  sub_100059DD4(v5, &v11);
  uint64_t v8 = (_BYTE)v11 != 0;
  sub_100004CA0(v3, *(void *)(a2 + 32) - 16LL);
  return v8;
}

void sub_1000D22F4(_Unwind_Exception *a1)
{
}

uint64_t sub_1000D2314@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v3 = a1 + 24;
  if (*(void *)(a1 + 24) == v4)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000A9394(exception, "EvaluationContext Stack empty: expected array");
    goto LABEL_6;
  }

  if (*(_BYTE *)(v4 - 16) != 2)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000A9394(exception, "EvaluationContext Stack type mismatch: expected array");
LABEL_6:
  }

  *a2 = 0xAAAAAAAAAAAAAAAALL;
  *(_BYTE *)a2 = 2;
  a2[1] = *(void *)(v4 - 8);
  sub_1000041AC(v4 - 16);
  *(_BYTE *)(v4 - 16) = 0;
  *(void *)(v4 - sub_100007004((uint64_t)v9 + 8) = 0LL;
  sub_1000041AC((uint64_t)a2);
  return sub_100004CA0(v3, *(void *)(a1 + 32) - 16LL);
}

void sub_1000D23E0(_Unwind_Exception *a1)
{
}

uint64_t sub_1000D23F8@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v3 = a1 + 24;
  if (*(void *)(a1 + 24) == v4)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000A9394(exception, "EvaluationContext Stack empty: expected map");
    goto LABEL_6;
  }

  if (*(_BYTE *)(v4 - 16) != 1)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000A9394(exception, "EvaluationContext Stack type mismatch: expected map");
LABEL_6:
  }

  *a2 = 0xAAAAAAAAAAAAAAAALL;
  *(_BYTE *)a2 = 1;
  a2[1] = *(void *)(v4 - 8);
  sub_1000041AC(v4 - 16);
  *(_BYTE *)(v4 - 16) = 0;
  *(void *)(v4 - sub_100007004((uint64_t)v9 + 8) = 0LL;
  sub_1000041AC((uint64_t)a2);
  return sub_100004CA0(v3, *(void *)(a1 + 32) - 16LL);
}

void sub_1000D24C4(_Unwind_Exception *a1)
{
}

uint64_t sub_1000D24DC@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v3 = a1 + 24;
  if (*(void *)(a1 + 24) == v4)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000A9394(exception, "EvaluationContext Stack empty: expected map or null");
    goto LABEL_6;
  }

  unsigned int v5 = *(unsigned __int8 *)(v4 - 16);
  if (v5 >= 2)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000A9394(exception, "EvaluationContext Stack type mismatch: expected map or null");
LABEL_6:
  }

  *a2 = 0xAAAAAAAAAAAAAAAALL;
  *(_BYTE *)a2 = v5;
  a2[1] = *(void *)(v4 - 8);
  sub_1000041AC(v4 - 16);
  *(_BYTE *)(v4 - 16) = 0;
  *(void *)(v4 - sub_100007004((uint64_t)v9 + 8) = 0LL;
  sub_1000041AC((uint64_t)a2);
  return sub_100004CA0(v3, *(void *)(a1 + 32) - 16LL);
}

void sub_1000D25A4(_Unwind_Exception *a1)
{
}

uint64_t sub_1000D25BC@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v3 = a1 + 24;
  if (*(void *)(a1 + 24) == v4)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000A9394(exception, "EvaluationContext Stack empty: expected array");
  }

  *a2 = 0xAAAAAAAAAAAAAAAALL;
  char v7 = *(_BYTE *)(v4 - 16);
  uint64_t v6 = v4 - 16;
  *(_BYTE *)a2 = v7;
  a2[1] = *(void *)(v6 + 8);
  sub_1000041AC(v6);
  *(_BYTE *)uint64_t v6 = 0;
  *(void *)(v6 + sub_100007004((uint64_t)v9 + 8) = 0LL;
  sub_1000041AC((uint64_t)a2);
  return sub_100004CA0(v3, *(void *)(a1 + 32) - 16LL);
}

void sub_1000D2660(_Unwind_Exception *a1)
{
}

uint64_t sub_1000D2674@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v3 = a1 + 24;
  if (*(void *)(a1 + 24) == v4)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000A9394(exception, "EvaluationContext Stack empty: expected string/null");
LABEL_9:
  }

  int v5 = *(unsigned __int8 *)(v4 - 16);
  if (*(_BYTE *)(v4 - 16)) {
    BOOL v6 = v5 == 3;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000A9394(exception, "EvaluationContext Stack type mismatch: expected string/null");
    goto LABEL_9;
  }

  *a2 = 0xAAAAAAAAAAAAAAAALL;
  *(_BYTE *)a2 = v5;
  a2[1] = *(void *)(v4 - 8);
  sub_1000041AC(v4 - 16);
  *(_BYTE *)(v4 - 16) = 0;
  *(void *)(v4 - sub_100007004((uint64_t)v9 + 8) = 0LL;
  sub_1000041AC((uint64_t)a2);
  return sub_100004CA0(v3, *(void *)(a1 + 32) - 16LL);
}

void sub_1000D2740(_Unwind_Exception *a1)
{
}

void sub_1000D2758(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10012E430;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000D2768(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10012E430;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_1000D2788(uint64_t a1)
{
  return sub_100097A40(a1 + 24);
}

uint64_t sub_1000D2794(uint64_t a1, uint64_t a2, const char *a3)
{
  *(void *)a1 = &off_10012E4D8;
  __int128 v5 = *(_OWORD *)a2;
  *(void *)(a1 + 3sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 16) = v5;
  return a1;
}

void sub_1000D2808( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::filesystem::filesystem_error::filesystem_error( uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  BOOL v6 = (void *)sub_1000D2794(a1, a4, a2);
  void *v6 = off_10012E480;
  v6[5] = 0LL;
  std::string v7 = v6 + 5;
  uint64_t v8 = (char *)operator new(0x50uLL);
  *(_DWORD *)uint64_t v8 = 0;
  __int128 v9 = v8 + 8;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_10000B8BC(v9, *(void **)a3, *(void *)(a3 + 8));
  }

  else
  {
    *(_OWORD *)__int128 v9 = *(_OWORD *)a3;
    *((void *)v8 + 3) = *(void *)(a3 + 16);
  }

  *((_OWORD *)v8 + 3) = 0u;
  *((_OWORD *)v8 + 4) = 0u;
  *((_OWORD *)v8 + sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = 0u;
  uint64_t v13 = (uint64_t)v8;
  do
    unsigned int v10 = __ldaxr((unsigned int *)v8);
  while (__stlxr(v10 + 1, (unsigned int *)v8));
  uint64_t v11 = v13;
  uint64_t v13 = *v7;
  *std::string v7 = v11;
  sub_1000D359C(&v13);
  return a1;
}

void sub_1000D28E4( void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = *v10;
  uint64_t *v10 = 0LL;
  sub_1000D359C(&a10);
  __cxa_end_catch();
  JUMPOUT(0x1000D28CCLL);
}

void sub_1000D291C(_Unwind_Exception *a1)
{
}

uint64_t boost::filesystem::filesystem_error::filesystem_error( uint64_t a1, const char *a2, __int128 *a3, __int128 *a4, uint64_t a5)
{
  uint64_t v8 = (void *)sub_1000D2794(a1, a5, a2);
  *uint64_t v8 = off_10012E480;
  v8[5] = 0LL;
  __int128 v9 = v8 + 5;
  unsigned int v10 = (unsigned int *)operator new(0x50uLL);
  sub_1000D3400((uint64_t)v10, a3, a4);
  uint64_t v14 = (uint64_t)v10;
  do
    unsigned int v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  uint64_t v12 = v14;
  uint64_t v14 = *v9;
  *__int128 v9 = v12;
  sub_1000D359C(&v14);
  return a1;
}

void sub_1000D29E0( void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = *v10;
  uint64_t *v10 = 0LL;
  sub_1000D359C(&a10);
  __cxa_end_catch();
  JUMPOUT(0x1000D29C4LL);
}

void sub_1000D2A18(_Unwind_Exception *a1)
{
}

void boost::filesystem::filesystem_error::~filesystem_error(boost::filesystem::filesystem_error *this)
{
  *(void *)this = off_10012E480;
  sub_1000D359C((uint64_t *)this + 5);
  std::runtime_error::~runtime_error((std::runtime_error *)this);
}

{
  void *v2;
  *(void *)this = off_10012E480;
  sub_1000D359C((uint64_t *)this + 5);
  std::runtime_error::~runtime_error((std::runtime_error *)this);
  operator delete(v2);
}

const char *boost::filesystem::filesystem_error::what(std::runtime_error *this)
{
  imp = this[2].__imp_.__imp_;
  if (!imp) {
    return std::runtime_error::what(this);
  }
  if (imp[79] < 0)
  {
    if (*((void *)imp + 8)) {
      goto LABEL_28;
    }
  }

  else if (imp[79])
  {
    goto LABEL_28;
  }

  uint64_t v3 = (char *)std::runtime_error::what(this);
  sub_1000D3568((std::string *)(this[2].__imp_.__imp_ + 56), v3);
  imp = this[2].__imp_.__imp_;
  if (imp[31] < 0)
  {
    if (!*((void *)imp + 2)) {
      goto LABEL_17;
    }
  }

  else if (!imp[31])
  {
    goto LABEL_17;
  }

  std::string::append((std::string *)(imp + 56), ": ", 3uLL);
  uint64_t v4 = this[2].__imp_.__imp_;
  std::string v7 = (const std::string::value_type *)*((void *)v4 + 1);
  __int128 v5 = (std::string *)(v4 + 8);
  BOOL v6 = v7;
  int size = (char)v5->__r_.__value_.__s.__size_;
  if (size >= 0) {
    __int128 v9 = (const std::string::value_type *)v5;
  }
  else {
    __int128 v9 = v6;
  }
  if (size >= 0) {
    std::string::size_type v10 = v5->__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v10 = v5->__r_.__value_.__l.__size_;
  }
  std::string::append(v5 + 2, v9, v10);
  std::string::append((std::string *)(this[2].__imp_.__imp_ + 56), "", 1uLL);
  imp = this[2].__imp_.__imp_;
LABEL_17:
  if (imp[55] < 0)
  {
    if (!*((void *)imp + 5)) {
      goto LABEL_28;
    }
LABEL_21:
    std::string::append((std::string *)(imp + 56), ", ", 3uLL);
    unsigned int v11 = this[2].__imp_.__imp_;
    uint64_t v14 = (const std::string::value_type *)*((void *)v11 + 4);
    uint64_t v12 = (std::string *)(v11 + 32);
    uint64_t v13 = v14;
    int v15 = (char)v12->__r_.__value_.__s.__size_;
    if (v15 >= 0) {
      __int128 v16 = (const std::string::value_type *)v12;
    }
    else {
      __int128 v16 = v13;
    }
    if (v15 >= 0) {
      std::string::size_type v17 = v12->__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v17 = v12->__r_.__value_.__l.__size_;
    }
    std::string::append(v12 + 1, v16, v17);
    std::string::append((std::string *)(this[2].__imp_.__imp_ + 56), "", 1uLL);
    imp = this[2].__imp_.__imp_;
    goto LABEL_28;
  }

  if (imp[55]) {
    goto LABEL_21;
  }
LABEL_28:
  __n128 result = imp + 56;
  if (imp[79] < 0) {
    return *(const char **)result;
  }
  return result;
}

BOOL sub_1000D2C30(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x30uLL);
    v13[0] = 0LL;
    else {
      BOOL v9 = ((BOOL (*)(uint64_t, int))boost::system::detail::system_cat_holder<void>::instance[6])( (uint64_t)&boost::system::detail::system_cat_holder<void>::instance,  a1);
    }
    uint64_t v10 = 2LL;
    LODWORD(v13[0]) = a1;
    if (v9) {
      uint64_t v10 = 3LL;
    }
    v13[1] = &boost::system::detail::system_cat_holder<void>::instance;
    _OWORD v13[2] = v10;
    boost::filesystem::filesystem_error::filesystem_error(exception, a4, a2, v13);
  }

  else {
    BOOL result = ((BOOL (*)(uint64_t, int))boost::system::detail::system_cat_holder<void>::instance[6])( (uint64_t)&boost::system::detail::system_cat_holder<void>::instance,  a1);
  }
  uint64_t v7 = 2LL;
  if (result) {
    uint64_t v7 = 3LL;
  }
  *(_DWORD *)a3 = a1;
  *(_DWORD *)(a3 + 4) = 0;
  *(void *)(a3 + sub_100007004((uint64_t)v9 + 8) = &boost::system::detail::system_cat_holder<void>::instance;
  *(void *)(a3 + 16) = v7;
  return result;
}

void sub_1000D2D50(_Unwind_Exception *a1)
{
}

BOOL sub_1000D2D64(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a4)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x30uLL);
    v15[0] = 0LL;
    else {
      BOOL v10 = ((BOOL (*)(uint64_t, int))boost::system::detail::system_cat_holder<void>::instance[6])( (uint64_t)&boost::system::detail::system_cat_holder<void>::instance,  a1);
    }
    uint64_t v11 = 2LL;
    LODWORD(v15[0]) = a1;
    if (v10) {
      uint64_t v11 = 3LL;
    }
    v15[1] = &boost::system::detail::system_cat_holder<void>::instance;
    _OWORD v15[2] = v11;
    boost::filesystem::filesystem_error::filesystem_error(exception, a5, a2, a3, v15);
  }

  else {
    BOOL result = ((BOOL (*)(uint64_t, int))boost::system::detail::system_cat_holder<void>::instance[6])( (uint64_t)&boost::system::detail::system_cat_holder<void>::instance,  a1);
  }
  uint64_t v8 = 2LL;
  if (result) {
    uint64_t v8 = 3LL;
  }
  *(_DWORD *)a4 = a1;
  *(_DWORD *)(a4 + 4) = 0;
  *(void *)(a4 + sub_100007004((uint64_t)v9 + 8) = &boost::system::detail::system_cat_holder<void>::instance;
  *(void *)(a4 + 16) = v8;
  return result;
}

void sub_1000D2E8C(_Unwind_Exception *a1)
{
}

void sub_1000D2EA0(const char *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0LL;
  a3->__r_.__value_.__l.__size_ = 0LL;
  a3->__r_.__value_.__l.__cap_ = 0LL;
  if (a1)
  {
    size_t v6 = strlen(a1);
    std::string::append(a3, a1, v6);
    std::string::append(a3, ": ", 2uLL);
  }

  sub_1000D2F98(a2, &__p);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = __p.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a3, (const std::string::value_type *)p_p, size);
}

void sub_1000D2F48( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000D2F84(std::runtime_error *a1)
{
}

std::string *sub_1000D2F98@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = __p.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)p_p, size);
  if (*(void *)(a1 + 16) >= 4uLL)
  {
    std::string::append(a2, " at ", 4uLL);
    unint64_t v6 = *(void *)(a1 + 16);
    if (v6 <= 3) {
      uint64_t v7 = off_10012E4F0;
    }
    else {
      uint64_t v7 = (char **)(v6 & 0xFFFFFFFFFFFFFFFELL);
    }
    sub_1000D3280((uint64_t)v7, &__p);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v8 = &__p;
    }
    else {
      uint64_t v8 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v9 = __p.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v9 = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(a2, (const std::string::value_type *)v8, v9);
  }

  return std::string::append(a2, "]", 1uLL);
}

void sub_1000D30A8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_1000D30E8@<X0>(int *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4 = *((void *)a1 + 2);
  if (v4)
  {
    if (v4 == 1)
    {
      sub_100005064(a2, "std:");
      __int128 v5 = (const char *)(*(uint64_t (**)(void))(**((void **)a1 + 1) + 16LL))(*((void *)a1 + 1));
      size_t v6 = strlen(v5);
      std::string::append(a2, v5, v6);
      sub_1000D33D8(__s, 0x20uLL, ":%d", v7, v8, v9, v10, v11, *a1);
      size_t v12 = strlen(__s);
      return std::string::append(a2, __s, v12);
    }

    uint64_t v14 = (uint64_t (***)())*((void *)a1 + 1);
  }

  else
  {
    uint64_t v14 = &boost::system::detail::system_cat_holder<void>::instance;
  }

  uint64_t v15 = (char *)((uint64_t (*)(uint64_t (***)()))**v14)(v14);
  sub_100005064(a2, v15);
  int v21 = *a1;
  if (*((void *)a1 + 2) == 1LL) {
    v21 += 1000 * (*((void *)a1 + 1) % 0x1FFFF7uLL);
  }
  sub_1000D33D8(__s, 0x20uLL, ":%d", v16, v17, v18, v19, v20, v21);
  size_t v22 = strlen(__s);
  return std::string::append(a2, __s, v22);
}

void sub_1000D3260(_Unwind_Exception *exception_object)
{
}

void sub_1000D3280(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 16))
  {
    sub_100005064(a2, *(char **)a1);
    sprintf(__s, ":%ld", *(unsigned int *)(a1 + 16));
    size_t v4 = strlen(__s);
    std::string::append(a2, __s, v4);
    if (*(_DWORD *)(a1 + 20))
    {
      sprintf(__s, ":%ld", *(unsigned int *)(a1 + 20));
      size_t v5 = strlen(__s);
      std::string::append(a2, __s, v5);
    }

    std::string::append(a2, " in function '", 0xEuLL);
    size_t v6 = *(const char **)(a1 + 8);
    size_t v7 = strlen(v6);
    std::string::append(a2, v6, v7);
    std::string::push_back(a2, 39);
  }

  else
  {
    sub_100005064(a2, "(unknown source location)");
  }

void sub_1000D33BC(_Unwind_Exception *exception_object)
{
}

uint64_t sub_1000D33D8( char *a1, size_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return vsnprintf(a1, a2, a3, &a9);
}

uint64_t sub_1000D3400(uint64_t a1, __int128 *a2, __int128 *a3)
{
  *(_DWORD *)a1 = 0;
  if (*((char *)a2 + 23) < 0)
  {
    sub_10000B8BC((_BYTE *)(a1 + 8), *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v5 = *a2;
    *(void *)(a1 + memset(v28, 170, 24) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + sub_100007004((uint64_t)v9 + 8) = v5;
  }

  size_t v6 = (_BYTE *)(a1 + 32);
  if (*((char *)a3 + 23) < 0)
  {
    sub_10000B8BC(v6, *(void **)a3, *((void *)a3 + 1));
  }

  else
  {
    __int128 v7 = *a3;
    *(void *)(a1 + 4sub_100007004((uint64_t)v9 + 8) = *((void *)a3 + 2);
    *(_OWORD *)size_t v6 = v7;
  }

  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 7sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = 0LL;
  return a1;
}

void sub_1000D3490(_Unwind_Exception *exception_object)
{
}

std::string *sub_1000D34AC(std::string *__dst, const std::string::value_type *__src, size_t __len)
{
  LODWORD(sub_10003D21C( (void *)&_mh_execute_header,  v0,  v1,  "[Config Store] ERROR: Failed to prepare config statement[null database]",  v2,  v3,  v4,  v5, v6) = (char)__dst->__r_.__value_.__s.__size_;
  if ((v6 & 0x80000000) != 0)
  {
    std::string::size_type cap = __dst->__r_.__value_.__l.__cap_;
    std::string::size_type v9 = (cap & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __len)
    {
      std::string::size_type size = __dst->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }

    std::string::size_type v6 = HIBYTE(cap);
    __int128 v7 = (std::string *)__dst->__r_.__value_.__r.__words[0];
  }

  else
  {
    __int128 v7 = __dst;
    if (__len > 0x16)
    {
      std::string::size_type size = __dst->__r_.__value_.__s.__size_;
      std::string::size_type v9 = 22LL;
LABEL_6:
      std::string::__grow_by_and_replace(__dst, v9, __len - v9, size, 0LL, size, __len, __src);
      return __dst;
    }
  }

  if (__len)
  {
    memmove(v7, __src, __len);
    LOBYTE(sub_10003D21C( (void *)&_mh_execute_header,  v0,  v1,  "[Config Store] ERROR: Failed to prepare config statement[null database]",  v2,  v3,  v4,  v5, v6) = __dst->__r_.__value_.__s.__size_;
  }

  if ((v6 & 0x80) != 0) {
    __dst->__r_.__value_.__l.__size_ = __len;
  }
  else {
    __dst->__r_.__value_.__s.__size_ = __len & 0x7F;
  }
  v7->__r_.__value_.__s.__data_[__len] = 0;
  return __dst;
}

std::string *sub_1000D3568(std::string *a1, char *__s)
{
  size_t v4 = strlen(__s);
  return sub_1000D34AC(a1, __s, v4);
}

uint64_t *sub_1000D359C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    do
    {
      unsigned int v3 = __ldaxr((unsigned int *)v2);
      unsigned int v4 = v3 - 1;
    }

    while (__stlxr(v4, (unsigned int *)v2));
    if (!v4)
    {
      operator delete((void *)v2);
    }
  }

  return a1;
}

DIR *sub_1000D3610@<X0>(DIR **a1@<X0>, void **a2@<X1>, void *a3@<X8>)
{
  if (*a2)
  {
    free(*a2);
    *a2 = 0LL;
  }

  BOOL result = *a1;
  if (*a1 && (*a1 = 0LL, BOOL result = (DIR *)closedir(result), (_DWORD)result))
  {
    int v7 = *__error();
    *a3 = 0LL;
    else {
      BOOL result = (DIR *)((BOOL (*)(uint64_t, int))boost::system::detail::system_cat_holder<void>::instance[6])( (uint64_t)&boost::system::detail::system_cat_holder<void>::instance,  v7);
    }
    uint64_t v8 = 2LL;
    *(_DWORD *)a3 = v7;
    if ((_DWORD)result) {
      uint64_t v8 = 3LL;
    }
    a3[1] = &boost::system::detail::system_cat_holder<void>::instance;
    a3[2] = v8;
  }

  else
  {
    *a3 = 0LL;
    a3[1] = 0LL;
    a3[2] = 0LL;
  }

  return result;
}

unsigned int **sub_1000D36D4(dirent **a1, std::string *a2, char a3, void *a4)
{
  std::string::size_type size = a2->__r_.__value_.__s.__size_;
  if ((size & 0x80u) != 0LL) {
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  if (size)
  {
    if (a4)
    {
      *a4 = 0LL;
      a4[1] = 0LL;
      a4[2] = 0LL;
      int v37 = 0LL;
      std::string::size_type v9 = operator new(0x40uLL, &std::nothrow);
      if (v9)
      {
        *(_DWORD *)std::string::size_type v9 = 0;
        _OWORD v9[2] = 0LL;
        void v9[3] = 0LL;
        v9[1] = 0LL;
        *((_DWORD *)v9 + sub_100007004((uint64_t)v9 + 8) = 0;
        *(void *)((char *)v9 + 36) = 0xFFFFLL;
        *((_DWORD *)v9 + 1sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xFFFF;
        v9[6] = 0LL;
        v9[7] = 0LL;
        unint64_t v34 = (unsigned int *)v9;
        do
          unsigned int v10 = __ldaxr((unsigned int *)v9);
        while (__stlxr(v10 + 1, (unsigned int *)v9));
        uint64_t v11 = v34;
        size_t v12 = v37;
      }

      else
      {
        size_t v12 = 0LL;
        uint64_t v11 = 0LL;
      }

      unint64_t v34 = v12;
      int v37 = v11;
      sub_1000D41BC(&v34);
      uint64_t v16 = v37;
      if (!v37)
      {
        if ((unint64_t)qword_1001316D8 >> 1 == 0x595588BD12BF6FE8LL
          || ((BOOL (*)(uint64_t, int))boost::system::detail::generic_cat_holder<void>::instance[6])( (uint64_t)&boost::system::detail::generic_cat_holder<void>::instance,  12))
        {
          uint64_t v31 = 3LL;
        }

        else
        {
          uint64_t v31 = 2LL;
        }

        *a4 = 12LL;
        a4[1] = &boost::system::detail::generic_cat_holder<void>::instance;
        a4[2] = v31;
        return sub_1000D41BC(&v37);
      }
    }

    else
    {
      int v37 = 0LL;
      uint64_t v13 = operator new(0x40uLL);
      *(_DWORD *)uint64_t v13 = 0;
      _OWORD v13[2] = 0LL;
      void v13[3] = 0LL;
      v13[1] = 0LL;
      *((_DWORD *)v13 + sub_100007004((uint64_t)v9 + 8) = 0;
      *(void *)((char *)v13 + 36) = 0xFFFFLL;
      *((_DWORD *)v13 + 1sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xFFFF;
      v13[6] = 0LL;
      v13[7] = 0LL;
      unint64_t v34 = (unsigned int *)v13;
      do
        unsigned int v14 = __ldaxr((unsigned int *)v13);
      while (__stlxr(v14 + 1, (unsigned int *)v13));
      uint64_t v15 = v34;
      unint64_t v34 = v37;
      int v37 = v15;
      sub_1000D41BC(&v34);
      uint64_t v16 = v37;
    }

    if ((a2->__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v17 = (const char *)a2;
    }
    else {
      uint64_t v17 = (const char *)a2->__r_.__value_.__r.__words[0];
    }
    uint64_t v18 = opendir(v17);
    *((void *)v16 + 6) = v18;
    if (v18)
    {
      unint64_t v34 = 0LL;
      unint64_t v35 = 0LL;
      unsigned __int8 v19 = 1;
      uint64_t v20 = 46LL;
      uint64_t v36 = 0LL;
      goto LABEL_26;
    }

    uint64_t v21 = *__error();
    unint64_t v34 = 0LL;
    else {
      BOOL v22 = ((BOOL (*)(uint64_t, int))boost::system::detail::system_cat_holder<void>::instance[6])( (uint64_t)&boost::system::detail::system_cat_holder<void>::instance,  v21);
    }
    uint64_t v23 = 2LL;
    LODWORD(v34) = v21;
    if (v22) {
      uint64_t v23 = 3LL;
    }
    unint64_t v35 = (unint64_t)&boost::system::detail::system_cat_holder<void>::instance;
    uint64_t v36 = v23;
    if ((v23 & 1) == 0)
    {
      uint64_t v20 = 0LL;
      unsigned __int8 v19 = 0;
LABEL_26:
      __int128 v24 = v37;
      if (*((void *)v37 + 6))
      {
        __int128 v25 = *a1;
        *a1 = (dirent *)v37;
        int v37 = (unsigned int *)v25;
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = (unint64_t)v20;
        *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = 0LL;
        __p.__r_.__value_.__s.__size_ = v19;
        else {
          std::string __str = *a2;
        }
        sub_1000D532C(&__str, &__p);
        std::string::operator=((std::string *)(v24 + 2), &__str);
        *(void *)&__int128 v26 = 0xFFFF00000000LL;
        *((void *)&v26 + sub_10000BA40((uint64_t)v4, 0LL, 0LL, 0, 1) = 0xFFFF00000000LL;
        *((_OWORD *)v24 + sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = v26;
        if (((char)__p.__r_.__value_.__s.__size_ & 0x80000000) == 0)
        {
          if (!v18) {
            return sub_1000D41BC(&v37);
          }
          goto LABEL_36;
        }

        operator delete(__p.__r_.__value_.__l.__data_);
        if (v18) {
LABEL_36:
        }
          sub_1000D3BC4(a1, (uint64_t)a4);
      }

      return sub_1000D41BC(&v37);
    }

    __str.__r_.__value_.__r.__words[0] = 13LL;
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)&boost::system::detail::generic_cat_holder<void>::instance;
    if ((((uint64_t (*)(uint64_t, uint64_t, uint64_t))boost::system::detail::system_cat_holder<void>::instance[2])( (uint64_t)&boost::system::detail::system_cat_holder<void>::instance,  v21,  (uint64_t)&__str) & 1) != 0)
    {
      char v27 = 1;
      if ((a3 & 1) == 0) {
        goto LABEL_45;
      }
    }

    else
    {
      if (__str.__r_.__value_.__l.__size_) {
        __int128 v28 = (uint64_t (***)())__str.__r_.__value_.__l.__size_;
      }
      else {
        __int128 v28 = &boost::system::detail::generic_cat_holder<void>::instance;
      }
      char v27 = ((uint64_t (*)(uint64_t (***)(), unsigned int **, void))(*v28)[3])( v28,  &v34,  LODWORD(__str.__r_.__value_.__l.__data_));
      if ((a3 & 1) == 0) {
        goto LABEL_45;
      }
    }

    if ((v27 & 1) != 0) {
      return sub_1000D41BC(&v37);
    }
LABEL_45:
    int v29 = (int)v34;
    if (v36 == 1) {
      int v29 = (_DWORD)v34 + 1000 * (v35 % 0x1FFFF7);
    }
    if (v29)
    {
      sub_1000D2C30(v29, (uint64_t)a2, (uint64_t)a4, (uint64_t)"boost::filesystem::directory_iterator::construct");
    }

    else if (a4)
    {
      *a4 = 0LL;
      a4[1] = 0LL;
      a4[2] = 0LL;
    }

    return sub_1000D41BC(&v37);
  }

  return (unsigned int **)sub_1000D2C30( 2,  (uint64_t)a2,  (uint64_t)a4,  (uint64_t)"boost::filesystem::directory_iterator::construct");
}

void sub_1000D3AC8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, uint64_t a23)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    if (v23)
    {
      if ((unint64_t)qword_1001316D8 >> 1 == 0x595588BD12BF6FE8LL
        || ((BOOL (*)(uint64_t, int))boost::system::detail::generic_cat_holder<void>::instance[6])( (uint64_t)&boost::system::detail::generic_cat_holder<void>::instance,  12))
      {
        uint64_t v28 = 3LL;
      }

      else
      {
        uint64_t v28 = 2LL;
      }

      *uint64_t v23 = 12LL;
      v23[1] = &boost::system::detail::generic_cat_holder<void>::instance;
      _OWORD v23[2] = v28;
      a23 = *v24;
      *__int128 v24 = 0LL;
      sub_1000D41BC((unsigned int **)&a23);
      __cxa_end_catch();
      JUMPOUT(0x1000D3A04LL);
    }

    __cxa_rethrow();
  }

  sub_1000D41BC((unsigned int **)(v25 - 72));
  _Unwind_Resume(a1);
}

void sub_1000D3BB4()
{
}

void sub_1000D3BC4(dirent **a1, uint64_t a2)
{
  if (a2)
  {
    *(void *)a2 = 0LL;
    *(void *)(a2 + sub_100007004((uint64_t)v9 + 8) = 0LL;
    *(void *)(a2 + 16) = 0LL;
  }

  memset(&__src, 0, sizeof(__src));
  int v29 = 0;
  uint64_t v28 = 0LL;
  unsigned int v4 = *a1;
  __int128 v5 = *(DIR **)&(*a1)->d_name[27];
  while (1)
  {
    char v27 = 0LL;
    *__error() = 0;
    std::string::size_type v6 = (dirent **)&v4->d_name[35];
    if (sysconf(91) < 0)
    {
      *__error() = 0;
      std::string::size_type v9 = readdir(v5);
      char v27 = v9;
      if (v9)
      {
LABEL_14:
        sub_1000D3568(&__src, v9->d_name);
        memset(&__p, 0, sizeof(__p));
        uint64_t v28 = 0LL;
        int v29 = 0;
        goto LABEL_15;
      }

      int data = *__error();
      if (data) {
        goto LABEL_31;
      }
    }

    else
    {
      int v7 = *v6;
      if (!*v6)
      {
        uint64_t v20 = sub_1000D4110() + 25;
        uint64_t v15 = (dirent *)malloc(v20);
        _BYTE *v6 = v15;
        if (!v15)
        {
          int data = 12;
LABEL_31:
          __p.__r_.__value_.__r.__words[0] = 0LL;
          if ((unint64_t)qword_100131340 >> 1 == 0x595588BD12BF6FE8LL
            || ((BOOL (*)(uint64_t, int))boost::system::detail::system_cat_holder<void>::instance[6])( (uint64_t)&boost::system::detail::system_cat_holder<void>::instance,  data))
          {
            std::string::size_type cap = 3LL;
          }

          else
          {
            std::string::size_type cap = 2LL;
          }

          LODWORD(__p.__r_.__value_.__l.__data_) = data;
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)&boost::system::detail::system_cat_holder<void>::instance;
          __p.__r_.__value_.__l.__cap_ = cap;
          goto LABEL_9;
        }

        int v7 = v15;
        bzero(v15, v20);
      }

      int data = readdir_r(v5, v7, &v27);
      if (data) {
        goto LABEL_31;
      }
    }

    std::string::size_type v9 = v27;
    if (v27) {
      goto LABEL_14;
    }
    sub_1000D3610((DIR **)&v4->d_name[27], (void **)&v4->d_name[35], &__p);
    int data = (int)__p.__r_.__value_.__l.__data_;
    std::string::size_type cap = __p.__r_.__value_.__l.__cap_;
LABEL_9:
    uint64_t v28 = *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4);
    int v29 = HIDWORD(__p.__r_.__value_.__r.__words[1]);
    if ((cap & 1) != 0 && (cap != 1 || data))
    {
      char v27 = *a1;
      uint64_t v18 = v27;
      *a1 = 0LL;
      sub_100086BCC((char *)&v18->d_seekoff, &__p);
      if (!a2)
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x30uLL);
        int v21 = data;
        uint64_t v22 = v28;
        int v23 = v29;
        std::string::size_type v24 = cap;
        boost::filesystem::filesystem_error::filesystem_error( exception,  "boost::filesystem::directory_iterator::operator++",  &__p,  &v21);
      }

      *(_DWORD *)a2 = data;
      *(void *)(a2 + 4) = v28;
      *(_DWORD *)(a2 + 1sub_10000BA40((uint64_t)v10, 0LL, 0LL, 0, 2) = v29;
      *(void *)(a2 + 16) = cap;
      p_p = (unsigned int **)&v27;
      goto LABEL_42;
    }

void sub_1000D3F20( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20, int a21, __int16 a22, char a23, char a24, char a25)
{
}

void sub_1000D402C(_Unwind_Exception *a1)
{
}

void sub_1000D4034(_Unwind_Exception *a1)
{
}

void sub_1000D4040(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1000D4048LL);
  }
  sub_1000045D0(a1);
}

const char *sub_1000D4058()
{
  return "generic";
}

uint64_t sub_1000D4064(uint64_t a1, unsigned int a2)
{
  return a2;
}

void *sub_1000D4074@<X0>(int __errnum@<W1>, void *a2@<X8>)
{
  unsigned int v3 = strerror(__errnum);
  if (v3) {
    unsigned int v4 = v3;
  }
  else {
    unsigned int v4 = "Unknown error";
  }
  return sub_100005064(a2, v4);
}

const char *sub_1000D40AC(int a1, int __errnum, char *a3, uint64_t a4)
{
  unsigned int v4 = a3;
  if (a4)
  {
    __int128 v5 = a3;
    size_t v6 = a4 - 1;
    if (a4 != 1)
    {
      int v7 = strerror(__errnum);
      if (!v7) {
        return "Unknown error";
      }
      strncpy(v4, v7, v6);
      __int128 v5 = &v4[v6];
    }

    *__int128 v5 = 0;
  }

  return v4;
}

uint64_t sub_1000D4110()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_100131B10);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_100131B10))
  {
    qword_100131B08 = sub_1000D4180();
    __cxa_guard_release(&qword_100131B10);
  }

  return qword_100131B08;
}

void sub_1000D4168(_Unwind_Exception *a1)
{
}

uint64_t sub_1000D4180()
{
  *__error() = 0;
  uint64_t v0 = pathconf("/", 5);
  else {
    uint64_t v1 = v0;
  }
  if (v0 >= 0) {
    return v1;
  }
  else {
    return 1024LL;
  }
}

unsigned int **sub_1000D41BC(unsigned int **a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    do
    {
      unsigned int v3 = __ldaxr(v2);
      unsigned int v4 = v3 - 1;
    }

    while (__stlxr(v4, v2));
    if (!v4)
    {
      __int128 v5 = (void *)sub_1000D4200((uint64_t)v2);
      operator delete(v5);
    }
  }

  return a1;
}

uint64_t sub_1000D4200(uint64_t a1)
{
  return a1;
}

int *sub_1000D4248@<X0>(const char *a1@<X0>, uint64_t a2@<X1>, int *a3@<X8>)
{
  unsigned int v4 = a1;
  if (a2)
  {
    *(void *)a2 = 0LL;
    *(void *)(a2 + sub_100007004((uint64_t)v9 + 8) = 0LL;
    *(void *)(a2 + 16) = 0LL;
  }

  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  BOOL result = (int *)stat(a1, &v17);
  if ((_DWORD)result)
  {
    BOOL result = __error();
    int v7 = *result;
    if (a2)
    {
      else {
        BOOL result = (int *)((BOOL (*)(uint64_t, int))boost::system::detail::system_cat_holder<void>::instance[6])( (uint64_t)&boost::system::detail::system_cat_holder<void>::instance,  v7);
      }
      uint64_t v11 = 2LL;
      if ((_DWORD)result) {
        uint64_t v11 = 3LL;
      }
      *(_DWORD *)a2 = v7;
      *(_DWORD *)(a2 + 4) = 0;
      *(void *)(a2 + sub_100007004((uint64_t)v9 + 8) = &boost::system::detail::system_cat_holder<void>::instance;
      *(void *)(a2 + 16) = v11;
      if (v7 == 20) {
        int v12 = 0;
      }
      else {
        int v12 = 0xFFFF;
      }
      int v9 = v7 == 2 || v7 == 20;
      if (v7 == 2) {
        int v8 = 0;
      }
      else {
        int v8 = v12;
      }
    }

    else
    {
      if (v7 != 2 && v7 != 20)
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x30uLL);
        v16[0] = 0LL;
        else {
          BOOL v14 = ((BOOL (*)(uint64_t, int))boost::system::detail::system_cat_holder<void>::instance[6])( (uint64_t)&boost::system::detail::system_cat_holder<void>::instance,  v7);
        }
        uint64_t v15 = 2LL;
        LODWORD(v16[0]) = v7;
        if (v14) {
          uint64_t v15 = 3LL;
        }
        v16[1] = &boost::system::detail::system_cat_holder<void>::instance;
        _OWORD v16[2] = v15;
        boost::filesystem::filesystem_error::filesystem_error(exception, "boost::filesystem::status", v4, v16);
      }

      int v8 = 0;
      int v9 = 1;
    }
  }

  else
  {
    int v8 = 0xFFFF;
    int v9 = 10;
    switch(((v17.st_mode & 0xF000u) - 4096) >> 12)
    {
      case 0u:
        int v8 = v17.st_mode & 0xFFF;
        int v9 = 7;
        break;
      case 1u:
        int v8 = v17.st_mode & 0xFFF;
        int v9 = 6;
        break;
      case 3u:
        int v8 = v17.st_mode & 0xFFF;
        int v9 = 3;
        break;
      case 5u:
        int v8 = v17.st_mode & 0xFFF;
        int v9 = 5;
        break;
      case 7u:
        int v8 = v17.st_mode & 0xFFF;
        int v9 = 2;
        break;
      case 0xBu:
        int v8 = v17.st_mode & 0xFFF;
        int v9 = 8;
        break;
      default:
        break;
    }
  }

  *a3 = v9;
  a3[1] = v8;
  return result;
}

void sub_1000D445C(_Unwind_Exception *a1)
{
}

int *sub_1000D4470@<X0>(const char *a1@<X0>, uint64_t a2@<X1>, int *a3@<X8>)
{
  unsigned int v4 = a1;
  if (a2)
  {
    *(void *)a2 = 0LL;
    *(void *)(a2 + sub_100007004((uint64_t)v9 + 8) = 0LL;
    *(void *)(a2 + 16) = 0LL;
  }

  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  BOOL result = (int *)lstat(a1, &v17);
  if ((_DWORD)result)
  {
    BOOL result = __error();
    int v7 = *result;
    if (a2)
    {
      else {
        BOOL result = (int *)((BOOL (*)(uint64_t, int))boost::system::detail::system_cat_holder<void>::instance[6])( (uint64_t)&boost::system::detail::system_cat_holder<void>::instance,  v7);
      }
      uint64_t v11 = 2LL;
      if ((_DWORD)result) {
        uint64_t v11 = 3LL;
      }
      *(_DWORD *)a2 = v7;
      *(_DWORD *)(a2 + 4) = 0;
      *(void *)(a2 + sub_100007004((uint64_t)v9 + 8) = &boost::system::detail::system_cat_holder<void>::instance;
      *(void *)(a2 + 16) = v11;
      if (v7 == 20) {
        int v12 = 0;
      }
      else {
        int v12 = 0xFFFF;
      }
      int v9 = v7 == 2 || v7 == 20;
      if (v7 == 2) {
        int v8 = 0;
      }
      else {
        int v8 = v12;
      }
    }

    else
    {
      if (v7 != 2 && v7 != 20)
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x30uLL);
        v16[0] = 0LL;
        else {
          BOOL v14 = ((BOOL (*)(uint64_t, int))boost::system::detail::system_cat_holder<void>::instance[6])( (uint64_t)&boost::system::detail::system_cat_holder<void>::instance,  v7);
        }
        uint64_t v15 = 2LL;
        LODWORD(v16[0]) = v7;
        if (v14) {
          uint64_t v15 = 3LL;
        }
        v16[1] = &boost::system::detail::system_cat_holder<void>::instance;
        _OWORD v16[2] = v15;
        boost::filesystem::filesystem_error::filesystem_error(exception, "boost::filesystem::symlink_status", v4, v16);
      }

      int v8 = 0;
      int v9 = 1;
    }
  }

  else
  {
    int v8 = 0xFFFF;
    int v9 = 10;
    switch(((v17.st_mode & 0xF000u) - 4096) >> 12)
    {
      case 0u:
        int v8 = v17.st_mode & 0xFFF;
        int v9 = 7;
        break;
      case 1u:
        int v8 = v17.st_mode & 0xFFF;
        int v9 = 6;
        break;
      case 3u:
        int v8 = v17.st_mode & 0xFFF;
        int v9 = 3;
        break;
      case 5u:
        int v8 = v17.st_mode & 0xFFF;
        int v9 = 5;
        break;
      case 7u:
        int v8 = v17.st_mode & 0xFFF;
        int v9 = 2;
        break;
      case 9u:
        int v8 = v17.st_mode & 0xFFF;
        int v9 = 4;
        break;
      case 0xBu:
        int v8 = v17.st_mode & 0xFFF;
        int v9 = 8;
        break;
      default:
        break;
    }
  }

  *a3 = v9;
  a3[1] = v8;
  return result;
}

void sub_1000D4690(_Unwind_Exception *a1)
{
}

uint64_t sub_1000D46A4(uint64_t a1, uint64_t a2, void *a3)
{
  if (a3)
  {
    *a3 = 0LL;
    a3[1] = 0LL;
    a3[2] = 0LL;
  }

  if (a2)
  {
    size_t v6 = (const char *)a2;
    if (stat(v6, &v12) < 0)
    {
      int v8 = *__error();
      goto LABEL_17;
    }

    mode_t st_mode = v12.st_mode;
    if ((v12.st_mode & 0xF000) != 0x4000)
    {
      int v8 = 20;
LABEL_17:
      sub_1000D2D64(v8, a1, a2, (uint64_t)a3, (uint64_t)"boost::filesystem::create_directory");
      return 0LL;
    }
  }

  else
  {
    mode_t st_mode = 511;
  }

  else {
    int v9 = *(const char **)a1;
  }
  if (mkdir(v9, st_mode))
  {
    int v10 = *__error();
    memset(&v12, 0, 24);
    sub_1000D4248((const char *)a1, (uint64_t)&v12, &v13);
    if (v13 != 3) {
      sub_1000D2C30(v10, a1, (uint64_t)a3, (uint64_t)"boost::filesystem::create_directory");
    }
    return 0LL;
  }

  return 1LL;
}

uint64_t sub_1000D47AC(uint64_t a1, void *a2)
{
  uint64_t v4 = *(unsigned __int8 *)(a1 + 23);
  if ((v4 & 0x80u) != 0LL) {
    uint64_t v4 = *(void *)(a1 + 8);
  }
  if (v4)
  {
    if (a2)
    {
      *a2 = 0LL;
      a2[1] = 0LL;
      a2[2] = 0LL;
    }

    sub_1000D5690(a1, &v32);
    else {
      std::string __dst = v32;
    }
    __int128 v31 = v33;
    else {
      std::string v29 = *(std::string *)a1;
    }
    size_t v6 = sub_1000D5C68();
    int v7 = sub_1000D5D08();
    __int128 v27 = 0uLL;
    uint64_t v28 = 0LL;
    sub_1000D518C(&v29, __p);
    while (1)
    {
      sub_1000D59A8(&v29);
      if (!v8)
      {
LABEL_28:
        int v10 = 2;
        goto LABEL_29;
      }

      int v9 = (void *)HIBYTE(v26);
      if (v26 < 0) {
        int v9 = __p[1];
      }
      if (v9
        && sub_1000D56B4((unint64_t)__p, (unint64_t)v6)
        && sub_1000D56B4((unint64_t)__p, (unint64_t)v7))
      {
        sub_1000D4248((const char *)&v29, (uint64_t)&v27, (int *)&v21);
        if ((_DWORD)v21 == 3) {
          goto LABEL_28;
        }
        if (!(_DWORD)v21) {
          break;
        }
      }

      sub_1000D5FE0(&__dst);
      sub_1000D5870(&v29);
      sub_1000D518C(&v29, &v21);
      if (SHIBYTE(v26) < 0) {
        operator delete(__p[0]);
      }
      *(_OWORD *)std::string __p = v21;
      uint64_t v26 = v22;
    }

    if (!a2)
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x30uLL);
      __int128 v23 = v27;
      uint64_t v24 = v28;
      boost::filesystem::filesystem_error::filesystem_error( exception,  "boost::filesystem::create_directories",  a1,  &v29,  &v23);
    }

    *(_OWORD *)a2 = v27;
    a2[2] = v28;
    int v10 = 1;
LABEL_29:
    if (SHIBYTE(v26) < 0) {
      operator delete(__p[0]);
    }
    if (v10 == 2)
    {
      char v11 = 0;
      while ((void)v31 != (void)v33 || *((void *)&v31 + 1) != *((void *)&v33 + 1))
      {
        sub_1000D532C(&v29, &__dst);
        std::string::size_type size = __dst.__r_.__value_.__s.__size_;
        if ((__dst.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          std::string::size_type size = __dst.__r_.__value_.__l.__size_;
        }
        if (size)
        {
          if (sub_1000D56B4((unint64_t)&__dst, (unint64_t)v6))
          {
            if (sub_1000D56B4((unint64_t)&__dst, (unint64_t)v7))
            {
              char v11 = sub_1000D46A4((uint64_t)&v29, 0LL, &v27);
              if ((v28 & 1) != 0 && (v28 != 1 || (_DWORD)v27))
              {
                if (!a2)
                {
                  stat v17 = __cxa_allocate_exception(0x30uLL);
                  __int128 v19 = v27;
                  uint64_t v20 = v28;
                  boost::filesystem::filesystem_error::filesystem_error( v17,  "boost::filesystem::create_directories",  a1,  &v29,  &v19);
                }

                char v11 = 0;
                *(_OWORD *)a2 = v27;
                a2[2] = v28;
                break;
              }
            }
          }
        }

        sub_1000D5D4C(&__dst);
      }
    }

    else
    {
      char v11 = 0;
    }
  }

  else
  {
    if (!a2)
    {
      uint64_t v15 = __cxa_allocate_exception(0x30uLL);
      v34[0] = 0LL;
      if ((qword_1001316D8 & 0xFFFFFFFFFFFFFFFELL) == 0xB2AB117A257EDFD0LL
        || ((BOOL (*)(uint64_t, int))boost::system::detail::generic_cat_holder<void>::instance[6])( (uint64_t)&boost::system::detail::generic_cat_holder<void>::instance,  22))
      {
        uint64_t v16 = 3LL;
      }

      else
      {
        uint64_t v16 = 2LL;
      }

      LODWORD(v34[0]) = 22;
      v34[1] = &boost::system::detail::generic_cat_holder<void>::instance;
      v34[2] = v16;
      boost::filesystem::filesystem_error::filesystem_error(v15, "boost::filesystem::create_directories", a1, v34);
    }

    if ((qword_1001316D8 & 0xFFFFFFFFFFFFFFFELL) == 0xB2AB117A257EDFD0LL
      || ((BOOL (*)(uint64_t, int))boost::system::detail::generic_cat_holder<void>::instance[6])( (uint64_t)&boost::system::detail::generic_cat_holder<void>::instance,  22))
    {
      uint64_t v5 = 3LL;
    }

    else
    {
      uint64_t v5 = 2LL;
    }

    char v11 = 0;
    *a2 = 22LL;
    a2[1] = &boost::system::detail::generic_cat_holder<void>::instance;
    a2[2] = v5;
  }

  return v11 & 1;
}

void sub_1000D4BE8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33, uint64_t a34, void *a35, uint64_t a36, int a37, __int16 a38, char a39, char a40)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1000D4C9C(std::string *a1, void *a2)
{
  unsigned int v3 = a1;
  if (a2)
  {
    *a2 = 0LL;
    a2[1] = 0LL;
    a2[2] = 0LL;
  }

  if ((a1->__r_.__value_.__s.__size_ & 0x80u) != 0) {
    a1 = (std::string *)a1->__r_.__value_.__r.__words[0];
  }
  if (stat((const char *)a1, &v7) < 0)
  {
    size_t v6 = __error();
    sub_1000D2C30(*v6, (uint64_t)v3, (uint64_t)a2, (uint64_t)"boost::filesystem::is_empty");
    return 0LL;
  }

  else if ((v7.st_mode & 0xF000) == 0x4000)
  {
    int v9 = 0LL;
    sub_1000D36D4((dirent **)&v9, v3, 0, a2);
    uint64_t v8 = 0LL;
    if (v9) {
      BOOL v4 = *((void *)v9 + 6) == 0LL;
    }
    else {
      BOOL v4 = 1LL;
    }
    sub_1000D41BC(&v8);
    sub_1000D41BC(&v9);
  }

  else
  {
    return v7.st_size == 0;
  }

  return v4;
}

void sub_1000D4D7C(_Unwind_Exception *a1)
{
}

double sub_1000D4D90(uint64_t a1, void *a2)
{
  if (a2)
  {
    *a2 = 0LL;
    a2[1] = 0LL;
    a2[2] = 0LL;
  }

  __int128 v11 = 0uLL;
  uint64_t v12 = 0LL;
  sub_1000D4470((const char *)a1, (uint64_t)&v11, (int *)&v9);
  if ((_DWORD)v9 != 1)
  {
    if ((_DWORD)v9 == 3)
    {
      else {
        size_t v6 = *(const char **)a1;
      }
      if (rmdir(v6)) {
        goto LABEL_15;
      }
    }

    else
    {
      if ((_DWORD)v9)
      {
        else {
          uint64_t v5 = *(const char **)a1;
        }
        if (!unlink(v5)) {
          return result;
        }
LABEL_15:
        int v7 = *__error();
        if (v7 != 2 && v7 != 20) {
          sub_1000D2C30(v7, a1, (uint64_t)a2, (uint64_t)"boost::filesystem::remove");
        }
        return result;
      }

      if (!a2)
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x30uLL);
        __int128 v9 = v11;
        uint64_t v10 = v12;
        boost::filesystem::filesystem_error::filesystem_error(exception, "boost::filesystem::remove", a1, &v9);
      }

      double result = *(double *)&v11;
      *(_OWORD *)a2 = v11;
      a2[2] = v12;
    }
  }

  return result;
}

void sub_1000D4ECC(_Unwind_Exception *a1)
{
}

uint64_t sub_1000D4EE0(std::string *a1, void *a2)
{
  if (a2)
  {
    *a2 = 0LL;
    a2[1] = 0LL;
    a2[2] = 0LL;
  }

  return sub_1000D4EF0(a1, a2);
}

uint64_t sub_1000D4EF0(std::string *a1, void *a2)
{
  __int128 v23 = 0uLL;
  uint64_t v24 = 0LL;
  sub_1000D4470((const char *)a1, (uint64_t)&v23, (int *)&v22);
  uint64_t result = 0LL;
  int v5 = (int)v22;
  if ((_DWORD)v22 != 1)
  {
    if (!(_DWORD)v22)
    {
      if (!a2)
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x30uLL);
        __int128 v20 = v23;
        uint64_t v21 = v24;
        boost::filesystem::filesystem_error::filesystem_error(exception, "boost::filesystem::remove_all", a1, &v20);
      }

      *(_OWORD *)a2 = v23;
      a2[2] = v24;
      return -1LL;
    }

    if ((_DWORD)v22 == 3)
    {
      *(void *)&__int128 v23 = 0LL;
      sub_1000D36D4((dirent **)&v23, a1, 0, a2);
      if (a2)
      {
        uint64_t v6 = a2[2];
        if ((v6 & 1) != 0 && (v6 != 1 || *(_DWORD *)a2))
        {
          sub_1000D41BC((unsigned int **)&v23);
          return -1LL;
        }
      }

      uint64_t v22 = 0LL;
      uint64_t v7 = v23;
      if ((void)v23)
      {
        uint64_t v8 = 0LL;
        __int128 v9 = 0LL;
        while (v7 && *(void *)(v7 + 48) || v9 && *((void *)v9 + 6))
        {
          v8 += sub_1000D4EF0(v7 + 8, a2);
          if (a2 && (uint64_t v10 = a2[2], (v10 & 1) != 0) && (v10 != 1 || *(_DWORD *)a2)
            || (sub_1000D3BC4((dirent **)&v23, (uint64_t)a2), a2)
            && (uint64_t v11 = a2[2], (v11 & 1) != 0)
            && (v11 != 1 || *(_DWORD *)a2))
          {
            char v12 = 0;
            goto LABEL_29;
          }

          __int128 v9 = v22;
          uint64_t v7 = v23;
        }
      }

      else
      {
        uint64_t v8 = 0LL;
      }

      char v12 = 1;
LABEL_29:
      sub_1000D41BC(&v22);
      sub_1000D41BC((unsigned int **)&v23);
      if ((v12 & 1) == 0) {
        return -1LL;
      }
    }

    else
    {
      uint64_t v8 = 0LL;
    }

    if (v5 == 1) {
      goto LABEL_39;
    }
    if (v5 == 3)
    {
      if ((a1->__r_.__value_.__s.__size_ & 0x80u) == 0) {
        int v13 = (const char *)a1;
      }
      else {
        int v13 = (const char *)a1->__r_.__value_.__r.__words[0];
      }
      if (rmdir(v13))
      {
LABEL_36:
        BOOL v14 = __error();
        uint64_t v15 = 0LL;
        int v16 = *v14;
        if (v16 == 2 || v16 == 20)
        {
LABEL_40:
          if (a2)
          {
LABEL_41:
            uint64_t v17 = a2[2];
            if ((v17 & 1) != 0 && (v17 != 1 || *(_DWORD *)a2)) {
              return -1LL;
            }
          }

          return v15 + v8;
        }

        sub_1000D2C30(v16, (uint64_t)a1, (uint64_t)a2, (uint64_t)"boost::filesystem::remove");
LABEL_39:
        uint64_t v15 = 0LL;
        goto LABEL_40;
      }
    }

    else
    {
      if ((a1->__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v18 = (const char *)a1;
      }
      else {
        uint64_t v18 = (const char *)a1->__r_.__value_.__r.__words[0];
      }
      if (unlink(v18)) {
        goto LABEL_36;
      }
    }

    uint64_t v15 = 1LL;
    if (a2) {
      goto LABEL_41;
    }
    return v15 + v8;
  }

  return result;
}

void sub_1000D5158( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, int a14, __int16 a15, char a16, char a17)
{
}

void *sub_1000D518C@<X0>(_BYTE *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1;
  unint64_t v4 = sub_1000D5C74(a1);
  if ((char)v2[23] < 0)
  {
    uint64_t v6 = v2;
    uint64_t v2 = *(_BYTE **)v2;
    uint64_t v5 = *((void *)v6 + 1);
  }

  else
  {
    uint64_t v5 = v2[23];
  }

  return sub_100036DD4(a2, &v2[v5 - v4], &v2[v5], v4);
}

void sub_1000D51D8(std::string *a1, std::string *a2)
{
  unint64_t size = a2->__r_.__value_.__s.__size_;
  char v3 = size;
  unint64_t v4 = a2->__r_.__value_.__l.__size_;
  if ((size & 0x80u) == 0LL) {
    std::string::size_type v5 = a2->__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v5 = a2->__r_.__value_.__l.__size_;
  }
  if (v5)
  {
    if (a1 == a2)
    {
      if ((char)size < 0)
      {
        sub_10000B8BC(__p, a2->__r_.__value_.__l.__data_, v4);
      }

      else
      {
        *(_OWORD *)std::string __p = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
        std::string::size_type cap = a2->__r_.__value_.__l.__cap_;
      }

      sub_1000D51D8(a2, __p);
      if (SHIBYTE(cap) < 0) {
        operator delete(__p[0]);
      }
    }

    else
    {
      uint64_t v8 = (const std::string::value_type *)a2->__r_.__value_.__r.__words[0];
      if ((size & 0x80u) == 0LL) {
        __int128 v9 = a2;
      }
      else {
        __int128 v9 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      if (v9->__r_.__value_.__s.__data_[0] != 47)
      {
        sub_1000D52CC(a1);
        unint64_t size = a2->__r_.__value_.__s.__size_;
        uint64_t v8 = (const std::string::value_type *)a2->__r_.__value_.__r.__words[0];
        unint64_t v4 = a2->__r_.__value_.__l.__size_;
        char v3 = a2->__r_.__value_.__s.__size_;
      }

      if (v3 >= 0) {
        uint64_t v10 = (const std::string::value_type *)a2;
      }
      else {
        uint64_t v10 = v8;
      }
      if (v3 >= 0) {
        unint64_t v4 = size;
      }
      std::string::append(a1, v10, v4);
    }
  }

void sub_1000D52B0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string::size_type sub_1000D52CC(std::string *a1)
{
  if (((char)a1->__r_.__value_.__s.__size_ & 0x80000000) == 0)
  {
    std::string::size_type size = a1->__r_.__value_.__s.__size_;
    if (!a1->__r_.__value_.__s.__size_) {
      return 0LL;
    }
    uint64_t v2 = (char *)a1 + size;
LABEL_6:
    if (*(v2 - 1) != 47)
    {
      std::string::push_back(a1, 47);
      return size;
    }

    return 0LL;
  }

  std::string::size_type size = a1->__r_.__value_.__l.__size_;
  if (size)
  {
    uint64_t v2 = (char *)(a1->__r_.__value_.__r.__words[0] + size);
    goto LABEL_6;
  }

  return size;
}

void sub_1000D532C(std::string *a1, const std::string *a2)
{
  int size = (char)a2->__r_.__value_.__s.__size_;
  if (size >= 0) {
    unint64_t v4 = a2->__r_.__value_.__s.__size_;
  }
  else {
    unint64_t v4 = a2->__r_.__value_.__l.__size_;
  }
  if (v4)
  {
    if (a1 == a2)
    {
      if (size < 0)
      {
        sub_10000B8BC(__n, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
      }

      else
      {
        *(_OWORD *)__uint64_t n = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
        std::string::size_type cap = a2->__r_.__value_.__l.__cap_;
      }

      sub_1000D532C(a2, __n);
      if (SHIBYTE(cap) < 0) {
        operator delete((void *)__n[0]);
      }
    }

    else
    {
      if (size >= 0) {
        uint64_t v6 = (std::string *)a2;
      }
      else {
        uint64_t v6 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      __n[0] = 0LL;
      if (sub_1000D54E4(v6, v4, __n) < v4)
      {
LABEL_23:
        std::string::operator=(a1, a2);
        return;
      }

      unint64_t v18 = 0LL;
      if ((char)a1->__r_.__value_.__s.__size_ < 0)
      {
        uint64_t v8 = (std::string *)a1->__r_.__value_.__r.__words[0];
        unint64_t v7 = a1->__r_.__value_.__l.__size_;
      }

      else
      {
        unint64_t v7 = a1->__r_.__value_.__s.__size_;
        uint64_t v8 = a1;
      }

      sub_1000D54E4(v8, v7, &v18);
      size_t v9 = __n[0];
      if (__n[0])
      {
        if (__n[0] != v18) {
          goto LABEL_23;
        }
        uint64_t v10 = a1;
        int v11 = (char)a2->__r_.__value_.__s.__size_;
        std::string::size_type v12 = a2->__r_.__value_.__r.__words[0];
        int v13 = v11 >= 0 ? a2 : (const std::string *)a2->__r_.__value_.__r.__words[0];
        if (memcmp(v10, v13, __n[0])) {
          goto LABEL_23;
        }
      }

      else
      {
        LOBYTE(sub_1000226A0(v12, v11) = a2->__r_.__value_.__s.__size_;
        std::string::size_type v12 = a2->__r_.__value_.__r.__words[0];
      }

      if ((v11 & 0x80u) == 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (const std::string *)v12;
      }
      uint64_t v15 = (char *)v14 + v9;
      if (v14->__r_.__value_.__s.__data_[v9] != 47) {
        sub_1000D52CC(a1);
      }
      std::string::append(a1, v15, v4 - v9);
    }
  }

  else if (sub_1000D5C74(a1))
  {
    std::string::push_back(a1, 47);
  }

void sub_1000D54C8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_1000D54E4(_BYTE *__s, unint64_t a2, unint64_t *a3)
{
  *a3 = 0LL;
  if (a2 && *__s == 47)
  {
    if (a2 < 2 || __s[1] != 47) {
      return 0LL;
    }
    size_t v4 = a2 - 2;
    if (a2 != 2)
    {
      std::string::size_type v5 = __s + 2;
      if (__s[2] == 47) {
        return 0LL;
      }
      unint64_t v7 = memchr(v5, 47, v4);
      size_t v8 = v7 - v5;
      if (!v7) {
        size_t v8 = v4;
      }
      a2 = v8 + 2;
    }

    *a3 = a2;
  }

  return a2;
}

unint64_t sub_1000D5578@<X0>(unint64_t result@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = (const std::string *)result;
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  a2[1].__r_.__value_.__r.__words[0] = result;
  int v4 = *(char *)(result + 23);
  uint64_t v5 = *(void *)(result + 8);
  if (v4 >= 0) {
    unint64_t v6 = *(unsigned __int8 *)(result + 23);
  }
  else {
    unint64_t v6 = *(void *)(result + 8);
  }
  a2[1].__r_.__value_.__l.__size_ = 0LL;
  if (v4 < 0)
  {
    if (!v5) {
      return result;
    }
    v14.__r_.__value_.__r.__words[0] = 0LL;
    uint64_t result = *(void *)result;
  }

  else
  {
    if (!v4) {
      return result;
    }
    v14.__r_.__value_.__r.__words[0] = 0LL;
  }

  uint64_t result = sub_1000D54E4((_BYTE *)result, v6, (unint64_t *)&v14);
  std::string::size_type v7 = v14.__r_.__value_.__r.__words[0];
  if (v14.__r_.__value_.__r.__words[0]) {
    goto LABEL_10;
  }
  std::string::size_type v8 = result;
  if (result < v6)
  {
    a2[1].__r_.__value_.__l.__size_ = result;
    std::string::size_type v7 = 1LL;
    goto LABEL_13;
  }

  int size = (char)v2->__r_.__value_.__s.__size_;
  BOOL v10 = size < 0;
  if (size >= 0) {
    int v11 = v2;
  }
  else {
    int v11 = (const std::string *)v2->__r_.__value_.__r.__words[0];
  }
  if (v10) {
    std::string::size_type v7 = v2->__r_.__value_.__l.__size_;
  }
  else {
    std::string::size_type v7 = v2->__r_.__value_.__s.__size_;
  }
  if (!v7)
  {
LABEL_25:
    if (!v7) {
      return result;
    }
LABEL_10:
    std::string::size_type v8 = 0LL;
LABEL_13:
    uint64_t result = (unint64_t)std::string::basic_string(&v14, v2, v8, v7, (std::allocator<char> *)&v15);
    *a2 = v14;
    return result;
  }

  std::string::size_type v12 = 0LL;
  while (v11->__r_.__value_.__s.__data_[v12] != 47)
  {
    if (v7 == ++v12) {
      goto LABEL_25;
    }
  }

  if (v12 == -1LL) {
    std::string::size_type v13 = v7;
  }
  else {
    std::string::size_type v13 = v12;
  }
  if (v7 != v12) {
    std::string::size_type v7 = v13;
  }
  if (v7) {
    goto LABEL_10;
  }
  return result;
}

uint64_t sub_1000D5690@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  a2[3] = result;
  else {
    uint64_t v2 = *(unsigned __int8 *)(result + 23);
  }
  a2[4] = v2;
  return result;
}

uint64_t sub_1000D56B4(unint64_t a1, unint64_t a2)
{
  uint64_t v10[3] = a1;
  else {
    uint64_t v4 = *(unsigned __int8 *)(a1 + 23);
  }
  _OWORD v10[4] = v4;
  sub_1000D5578(a2, &__p);
  memset(v8, 0, 24);
  void v8[3] = a2;
  uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) != 0LL) {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  v8[4] = v5;
  uint64_t v6 = sub_1000D5770(&v11, (uint64_t)v10, &__p, (uint64_t)v8);
  return v6;
}

uint64_t sub_1000D5770(std::string *a1, uint64_t a2, std::string *a3, uint64_t a4)
{
  std::string::pointer data = a1[1].__r_.__value_.__l.__data_;
  std::string::size_type size = a1[1].__r_.__value_.__l.__size_;
  std::string::size_type v8 = *(char **)(a2 + 24);
  std::string::size_type v9 = *(void *)(a2 + 32);
  if (data == v8 && size == v9)
  {
LABEL_16:
    std::string::size_type v8 = data;
    std::string::size_type v9 = size;
  }

  else if (a3[1].__r_.__value_.__r.__words[0] != *(void *)(a4 + 24) {
         || a3[1].__r_.__value_.__l.__size_ != *(void *)(a4 + 32))
  }
  {
    while ((sub_1000D5D14(a1, (void **)&a3->__r_.__value_.__l.__data_) & 0x80) == 0)
    {
      sub_1000D5D4C(a1);
      sub_1000D5D4C(a3);
      std::string::pointer data = a1[1].__r_.__value_.__l.__data_;
      std::string::size_type size = a1[1].__r_.__value_.__l.__size_;
      std::string::size_type v8 = *(char **)(a2 + 24);
      std::string::size_type v9 = *(void *)(a2 + 32);
      if (data == v8 && size == v9) {
        goto LABEL_16;
      }
      if (a3[1].__r_.__value_.__r.__words[0] == *(void *)(a4 + 24)
        && a3[1].__r_.__value_.__l.__size_ == *(void *)(a4 + 32))
      {
        goto LABEL_17;
      }
    }

    return 0xFFFFFFFFLL;
  }

std::string *sub_1000D5870(std::string *a1)
{
  std::string::size_type v2 = sub_1000D58C8(a1);
  if ((char)a1->__r_.__value_.__s.__size_ < 0)
  {
    uint64_t v4 = (std::string *)a1->__r_.__value_.__r.__words[0];
    char v3 = (char *)(a1->__r_.__value_.__r.__words[0] + a1->__r_.__value_.__l.__size_);
  }

  else
  {
    char v3 = (char *)a1 + a1->__r_.__value_.__s.__size_;
    uint64_t v4 = a1;
  }

  std::string::erase(a1, v2, v3 - (char *)v4 - v2);
  return a1;
}

unint64_t sub_1000D58C8(_BYTE *a1)
{
  uint64_t v1 = a1;
  if ((char)a1[23] < 0)
  {
    a1 = *(_BYTE **)a1;
    unint64_t v2 = *((void *)v1 + 1);
  }

  else
  {
    unint64_t v2 = a1[23];
  }

  unint64_t v16 = 0LL;
  unint64_t v3 = sub_1000D54E4(a1, v2, &v16);
  int v4 = (char)v1[23];
  if (v2 >= v16) {
    unint64_t v5 = v16;
  }
  else {
    unint64_t v5 = v2;
  }
  if (v4 >= 0) {
    uint64_t v6 = v1;
  }
  else {
    uint64_t v6 = *(_BYTE **)v1;
  }
  std::string::size_type v7 = v6 - 1;
  unint64_t v8 = v2;
  while (v8 > v16)
  {
    unint64_t v9 = v8 - 1;
    int v10 = v7[v8--];
    if (v10 == 47)
    {
      unint64_t v5 = v9 + 1;
      break;
    }
  }

  if (v5 >= v16) {
    unint64_t v11 = v16;
  }
  else {
    unint64_t v11 = v5;
  }
  if (v4 >= 0) {
    std::string::size_type v12 = v1;
  }
  else {
    std::string::size_type v12 = *(_BYTE **)v1;
  }
  std::string::size_type v13 = v12 - 1;
  unint64_t v14 = v5;
  while (v14 > v16)
  {
    if (v13[v14] != 47) {
      return v14;
    }
    if (v3 == --v14)
    {
      if (v2 == v5) {
        return v3;
      }
      else {
        return v3 + 1;
      }
    }
  }

  if (v2 == v5) {
    return 0LL;
  }
  else {
    return v11;
  }
}

unint64_t sub_1000D59A8(_BYTE *a1)
{
  uint64_t v1 = a1;
  unint64_t v10 = 0LL;
  if ((char)a1[23] < 0)
  {
    a1 = *(_BYTE **)a1;
    unint64_t v2 = *((void *)v1 + 1);
  }

  else
  {
    unint64_t v2 = a1[23];
  }

  unint64_t v3 = sub_1000D54E4(a1, v2, &v10);
  unint64_t result = v10;
  unint64_t v5 = v1[23];
  if ((char)v1[23] < 0)
  {
    unint64_t v6 = *((void *)v1 + 1);
    if (v3 >= v6) {
      return result;
    }
  }

  else
  {
    unint64_t v6 = v1[23];
    if (v3 >= v5) {
      return result;
    }
  }

  unint64_t v7 = v3 + 1;
  if (v6 <= v3 + 1) {
    unint64_t result = v3 + 1;
  }
  else {
    unint64_t result = v6;
  }
  while (v7 < v6)
  {
    unint64_t v8 = v1;
    if ((v5 & 0x80) != 0) {
      unint64_t v8 = *(_BYTE **)v1;
    }
    int v9 = v8[v7++];
    if (v9 != 47) {
      return v7 - 1;
    }
  }

  return result;
}

char *sub_1000D5A60@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = a1;
  if ((char)a1[23] < 0)
  {
    a1 = *(_BYTE **)a1;
    unint64_t v4 = *((void *)v2 + 1);
  }

  else
  {
    unint64_t v4 = a1[23];
  }

  unint64_t v26 = 0LL;
  unint64_t result = (char *)sub_1000D54E4(a1, v4, &v26);
  if ((unint64_t)result >= v4)
  {
    LOBYTE(v7) = v2[23];
  }

  else
  {
    unint64_t v6 = (char *)(v4 - 1);
    int v7 = (char)v2[23];
    unint64_t v8 = v2;
    if (v7 < 0) {
      unint64_t v8 = *(_BYTE **)v2;
    }
    if (v6[(void)v8] == 47)
    {
      int v9 = *(_BYTE **)v2;
      if (v6 >= result) {
        unint64_t v6 = result;
      }
      if (v7 >= 0) {
        int v9 = v2;
      }
      unint64_t v10 = v9 - 2;
      unint64_t v11 = v4;
      while (1)
      {
        std::string::size_type v12 = (char *)(v11 - 1);
        int v13 = v10[v11--];
        if (v13 != 47) {
          goto LABEL_42;
        }
      }

      std::string::size_type v12 = v6;
LABEL_42:
      if (v12 == result)
      {
        unint64_t v4 = 1LL;
        goto LABEL_48;
      }
    }
  }

  if (v26 == v4)
  {
    unint64_t result = 0LL;
  }

  else
  {
    if (v4 >= v26) {
      unint64_t v14 = v26;
    }
    else {
      unint64_t v14 = v4;
    }
    if ((v7 & 0x80u) == 0) {
      char v15 = v2;
    }
    else {
      char v15 = *(_BYTE **)v2;
    }
    unint64_t v16 = v15 - 1;
    unint64_t v17 = v4;
    while (v17 > v26)
    {
      unint64_t v18 = v17 - 1;
      int v19 = v16[v17--];
      if (v19 == 47)
      {
        unint64_t v14 = v18 + 1;
        break;
      }
    }

    v4 -= v14;
    if (!v4)
    {
      if (v14 > v26)
      {
        __int128 v20 = (char *)(v14 - 1);
        uint64_t v21 = (v7 & 0x80u) == 0 ? v2 : *(_BYTE **)v2;
        if (v20[(void)v21] == 47)
        {
          if (v20 >= result) {
            __int128 v20 = result;
          }
          uint64_t v22 = v21 - 2;
          unint64_t v23 = v14;
          while (1)
          {
            uint64_t v24 = (char *)(v23 - 1);
            int v25 = v22[v23--];
            if (v25 != 47) {
              goto LABEL_45;
            }
          }

          uint64_t v24 = v20;
LABEL_45:
          if (v24 != result)
          {
            if (byte_100131B37 < 0) {
              return (char *)sub_10000B8BC( (_BYTE *)a2,  (void *)xmmword_100131B20,  *((unint64_t *)&xmmword_100131B20 + 1));
            }
            *(_OWORD *)a2 = xmmword_100131B20;
            *(void *)(a2 + 16) = unk_100131B30;
            return result;
          }
        }
      }

      unint64_t v4 = 0LL;
    }

    unint64_t result = (char *)v14;
  }

__int128 *sub_1000D5C68()
{
  return &xmmword_100131B20;
}

unint64_t sub_1000D5C74(_BYTE *a1)
{
  uint64_t v1 = a1;
  if ((char)a1[23] < 0)
  {
    a1 = *(_BYTE **)a1;
    unint64_t v2 = *((void *)v1 + 1);
  }

  else
  {
    unint64_t v2 = a1[23];
  }

  unint64_t v10 = 0LL;
  sub_1000D54E4(a1, v2, &v10);
  if (v2 >= v10) {
    unint64_t v3 = v10;
  }
  else {
    unint64_t v3 = v2;
  }
  else {
    unint64_t v4 = *(_BYTE **)v1;
  }
  unint64_t v5 = v4 - 1;
  unint64_t v6 = v2;
  while (v6 > v10)
  {
    unint64_t v7 = v6 - 1;
    int v8 = v5[v6--];
    if (v8 == 47)
    {
      unint64_t v3 = v7 + 1;
      return v2 - v3;
    }
  }

  return v2 - v3;
}

void *sub_1000D5D08()
{
  return &unk_100131B38;
}

uint64_t sub_1000D5D14(void *a1, void **a2)
{
  size_t v2 = *((unsigned __int8 *)a1 + 23);
  size_t v3 = a1[1];
  if ((v2 & 0x80u) != 0LL)
  {
    a1 = (void *)*a1;
    size_t v2 = v3;
  }

  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = *a2;
  }
  if (v4 >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  return sub_1000D622C(a1, v2, v5, v6);
}

void sub_1000D5D4C(std::string *this)
{
  uint64_t v1 = this;
  std::string::pointer data = this[1].__r_.__value_.__l.__data_;
  if (data[23] < 0) {
    unint64_t v3 = *((void *)data + 1);
  }
  else {
    unint64_t v3 = data[23];
  }
  uint64_t size = v1->__r_.__value_.__s.__size_;
  if ((char)v1->__r_.__value_.__s.__size_ < 0)
  {
    if (v1->__r_.__value_.__l.__size_) {
      goto LABEL_13;
    }
  }

  else if (v1->__r_.__value_.__s.__size_)
  {
    goto LABEL_13;
  }

  std::string::size_type v5 = v1[1].__r_.__value_.__l.__size_;
  if (v5 + 1 == v3)
  {
    std::string::pointer v6 = data;
    if (data[23] < 0) {
      std::string::pointer v6 = *(std::string::pointer *)data;
    }
    if (v6[v5] == 47)
    {
      v1[1].__r_.__value_.__l.__size_ = v3;
      return;
    }
  }

void sub_1000D5FE0(std::string *a1)
{
  uint64_t v1 = a1;
  std::string::pointer data = a1[1].__r_.__value_.__l.__data_;
  if (data[23] < 0)
  {
    std::string::pointer v4 = data;
    std::string::pointer data = *(std::string::pointer *)data;
    unint64_t v3 = *((void *)v4 + 1);
  }

  else
  {
    unint64_t v3 = data[23];
  }

  unint64_t v31 = 0LL;
  unint64_t v5 = sub_1000D54E4(data, v3, &v31);
  std::string::size_type size = v1[1].__r_.__value_.__l.__size_;
  if (v5 >= v3 || size != v5)
  {
    if (v3 >= 2 && size == v3)
    {
      std::string::pointer v9 = v1[1].__r_.__value_.__l.__data_;
      std::string::size_type v10 = v3 - 1;
      std::string::pointer v11 = v9;
      if (v9[23] < 0) {
        std::string::pointer v11 = *(std::string::pointer *)v9;
      }
      if (v11[v10] == 47)
      {
        if (v10 >= v5) {
          unint64_t v12 = v5;
        }
        else {
          unint64_t v12 = v3 - 1;
        }
        if (v9[23] < 0) {
          std::string::pointer v9 = *(std::string::pointer *)v9;
        }
        std::string::pointer v13 = v9 - 2;
        while (1)
        {
          unint64_t v14 = v3 - 1;
          if (v3 - 1 <= v5) {
            break;
          }
          int v15 = v13[v3--];
          if (v15 != 47) {
            goto LABEL_26;
          }
        }

        unint64_t v14 = v12;
LABEL_26:
        if (v14 != v5)
        {
          v1[1].__r_.__value_.__l.__size_ = v10;
          if ((char)v1->__r_.__value_.__s.__size_ < 0)
          {
            *v1->__r_.__value_.__l.__data_ = 0;
            v1->__r_.__value_.__l.__size_ = 0LL;
          }

          else
          {
            v1->__r_.__value_.__s.__data_[0] = 0;
            v1->__r_.__value_.__s.__size_ = 0;
          }

          return;
        }
      }
    }

    unint64_t v16 = v31;
    std::string::size_type v17 = size + 1;
    while (1)
    {
      unint64_t v18 = v17 - 1;
      if (v17 - 1 <= v31) {
        break;
      }
      if (v17 - v5 == 2)
      {
        v1[1].__r_.__value_.__l.__size_ = v5;
        if ((char)v1->__r_.__value_.__s.__size_ < 0)
        {
          v1->__r_.__value_.__l.__size_ = 1LL;
          uint64_t v1 = (std::string *)v1->__r_.__value_.__r.__words[0];
        }

        else
        {
          v1->__r_.__value_.__s.__size_ = 1;
        }

        LOWORD(v1->__r_.__value_.__l.__data_) = 47;
        return;
      }

      std::string::pointer v19 = v1[1].__r_.__value_.__l.__data_;
      std::string::pointer v20 = v19;
      if (v19[23] < 0) {
        std::string::pointer v20 = *(std::string::pointer *)v19;
      }
      int v21 = v20[v17-- - 2];
      if (v21 != 47)
      {
        std::string::pointer v22 = *(std::string::pointer *)v19;
        if (v19[23] >= 0) {
          std::string::pointer v22 = v1[1].__r_.__value_.__l.__data_;
        }
        unint64_t v23 = v18 - 1;
        unint64_t v24 = v18;
        while (1)
        {
          unint64_t v25 = v24;
          if (v23 + 1 <= v31) {
            break;
          }
          int v26 = v22[v23--];
          --v24;
          if (v26 == 47)
          {
            unint64_t v27 = v23 + 2;
            goto LABEL_46;
          }
        }

        unint64_t v27 = v31;
LABEL_46:
        v1[1].__r_.__value_.__l.__size_ = v27;
        if (v19[23] < 0) {
          std::string::pointer v19 = *(std::string::pointer *)v19;
        }
        uint64_t v28 = &v19[v27];
        __int128 v30 = &v19[v18];
        if (v16 <= v25) {
          unint64_t v16 = v25;
        }
        std::string::size_type v29 = v18 - v16;
        goto LABEL_42;
      }
    }
  }

  v1[1].__r_.__value_.__l.__size_ = 0LL;
  uint64_t v28 = v1[1].__r_.__value_.__l.__data_;
  if (v28[23] < 0) {
    uint64_t v28 = *(std::string::value_type **)v28;
  }
  std::string::size_type v29 = v31;
  __int128 v30 = &v28[v31];
LABEL_42:
  sub_1000CEE80(v1, v28, v30, v29);
}

uint64_t sub_1000D61F4(uint64_t a1)
{
  if (qword_100131B50)
  {
    std::locale::~locale((std::locale *)qword_100131B50);
    operator delete(v2);
  }

  qword_100131B50 = 0LL;
  return a1;
}

uint64_t sub_1000D622C(const void *a1, size_t a2, void *__s2, size_t a4)
{
  if (a4 >= a2) {
    size_t v7 = a2;
  }
  else {
    size_t v7 = a4;
  }
  int v8 = memcmp(a1, __s2, v7);
  if (v8)
  {
    if ((v8 & 0x80000000) == 0) {
      return 1LL;
    }
  }

  else
  {
    if (a2 == a4) {
      return 0LL;
    }
    if (a2 >= a4) {
      return 1LL;
    }
  }

  return 255LL;
}

uint64_t sub_1000D6288()
{
  return __cxa_atexit((void (*)(void *))sub_10004117C, qword_100131B38, (void *)&_mh_execute_header);
}

void sub_1000D631C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000D637C(uint64_t a1, uint64_t a2)
{
  if (v22 < 0) {
    sub_1000090D8(v8, v9, v10, v11, v12, v13, v14, v15, v17, v19);
  }
  sub_1000090CC();
}

void sub_1000D63FC(uint64_t a1, uint64_t a2)
{
  if (v22 < 0) {
    sub_1000090D8(v8, v9, v10, v11, v12, v13, v14, v15, v17, v19);
  }
  sub_1000090CC();
}

void sub_1000D647C(uint64_t a1, uint64_t a2)
{
  if (v22 < 0) {
    sub_1000090D8(v8, v9, v10, v11, v12, v13, v14, v15, v17, v19);
  }
  sub_1000090CC();
}

void sub_1000D64FC(uint64_t *a1, os_log_s *a2, uint64_t a3)
{
  int v3 = 136315138;
  int v4 = a1;
  sub_1000090AC( (void *)&_mh_execute_header,  a2,  a3,  "[Transform Factory] ERROR: Transform specification for '%s' could not be created. Ignored.",  (uint8_t *)&v3);
}

void sub_1000D6574(char *a1, void *a2, os_log_s *a3)
{
  if (*a1 < 0) {
    a2 = (void *)*a2;
  }
  int v3 = 136446210;
  int v4 = a2;
  sub_1000090AC( (void *)&_mh_execute_header,  a3,  (uint64_t)a3,  "[Transform Factory] ERROR: Invalid buffered transform type %{public}s",  (uint8_t *)&v3);
}

void sub_1000D65F0(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_DEBUG,  "[Transform Factory] No Transform aggregation period specified.",  v1,  2u);
}

void sub_1000D665C(uint64_t a1, uint64_t a2)
{
  if (v22 < 0) {
    sub_1000090D8(v8, v9, v10, v11, v12, v13, v14, v15, v17, v19);
  }
  sub_1000090CC();
}

void sub_1000D66DC()
{
}

void sub_1000D6704()
{
  __assert_rtn("dump", "serializer.hpp", 138, "i != val.m_value.object->cend()");
}

void sub_1000D672C()
{
  __assert_rtn("dump", "serializer.hpp", 139, "std::next(i) == val.m_value.object->cend()");
}

void sub_1000D6754()
{
  __assert_rtn("dump", "serializer.hpp", 166, "i != val.m_value.object->cend()");
}

void sub_1000D677C()
{
  __assert_rtn("dump", "serializer.hpp", 167, "std::next(i) == val.m_value.object->cend()");
}

void sub_1000D67A4()
{
}

void sub_1000D67CC()
{
}

void sub_1000D67F4()
{
}

void sub_1000D681C()
{
}

void sub_1000D6844()
{
}

void sub_1000D686C()
{
  __assert_rtn("to_chars", "to_chars.hpp", 1082, "last - first >= std::numeric_limits<FloatType>::max_digits10");
}

void sub_1000D6894()
{
  __assert_rtn("to_chars", "to_chars.hpp", 1092, "len <= std::numeric_limits<FloatType>::max_digits10");
}

void sub_1000D68BC()
{
  __assert_rtn( "to_chars",  "to_chars.hpp",  1100,  "last - first >= 2 + (-kMinExp - 1) + std::numeric_limits<FloatType>::max_digits10");
}

void sub_1000D68E4()
{
  __assert_rtn("to_chars", "to_chars.hpp", 1101, "last - first >= std::numeric_limits<FloatType>::max_digits10 + 6");
}

void sub_1000D690C()
{
}

void sub_1000D6934()
{
}

void sub_1000D695C()
{
}

void sub_1000D6984()
{
}

void sub_1000D69AC()
{
}

void sub_1000D69D4()
{
}

void sub_1000D69FC()
{
}

void sub_1000D6A24()
{
}

void sub_1000D6A4C()
{
}

void sub_1000D6A74()
{
}

void sub_1000D6A9C()
{
  __assert_rtn("grisu2", "to_chars.hpp", 828, "m_plus.e == v.e");
}

void sub_1000D6AC4()
{
  __assert_rtn("grisu2", "to_chars.hpp", 827, "m_plus.e == m_minus.e");
}

void sub_1000D6AEC()
{
  __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 466, "e >= -1500");
}

void sub_1000D6B14()
{
  __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 467, "e <= 1500");
}

void sub_1000D6B3C()
{
  __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 472, "index >= 0");
}

void sub_1000D6B64()
{
  __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 476, "kAlpha <= cached.e + e + 64");
}

void sub_1000D6B8C()
{
  __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 477, "kGamma >= cached.e + e + 64");
}

void sub_1000D6BB4()
{
}

void sub_1000D6BDC()
{
  __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 601, "M_plus.e >= kAlpha");
}

void sub_1000D6C04()
{
  __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 602, "M_plus.e <= kGamma");
}

void sub_1000D6C2C()
{
}

void sub_1000D6C54()
{
  __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 659, "d <= 9");
}

void sub_1000D6C7C()
{
  __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 757, "p2 <= (std::numeric_limits<std::uint64_t>::max)() / 10");
}

void sub_1000D6CA4()
{
  __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 766, "d <= 9");
}

void sub_1000D6CCC()
{
}

void sub_1000D6CF4()
{
  __assert_rtn("grisu2_round", "to_chars.hpp", 545, "len >= 1");
}

void sub_1000D6D1C()
{
  __assert_rtn("grisu2_round", "to_chars.hpp", 546, "dist <= delta");
}

void sub_1000D6D44()
{
  __assert_rtn("grisu2_round", "to_chars.hpp", 547, "rest <= delta");
}

void sub_1000D6D6C()
{
}

void sub_1000D6D94()
{
  __assert_rtn("grisu2_round", "to_chars.hpp", 573, "buf[len - 1] != '0'");
}

void sub_1000D6DBC()
{
  __assert_rtn("operator==", "iter_impl.hpp", 405, "m_object != nullptr");
}

void sub_1000D6DE4()
{
  __assert_rtn("operator*", "iter_impl.hpp", 242, "m_object != nullptr");
}

void sub_1000D6E0C()
{
  __assert_rtn("operator*", "iter_impl.hpp", 248, "m_it.object_iterator != m_object->m_value.object->end()");
}

void sub_1000D6E34()
{
  __assert_rtn("operator*", "iter_impl.hpp", 254, "m_it.array_iterator != m_object->m_value.array->end()");
}

void sub_1000D6E5C(char *a1, void *a2, os_log_s *a3)
{
  if (*a1 < 0) {
    a2 = (void *)*a2;
  }
  int v3 = 136446210;
  int v4 = a2;
  sub_1000090AC( (void *)&_mh_execute_header,  a3,  (uint64_t)a3,  "[RolloverManager] ERROR: Last rollover was partial, but rollover reason from rollover is missing. Using default reason %{public}s",  (uint8_t *)&v3);
  sub_10000E1FC();
}

void sub_1000D6ED4(const char **a1, uint64_t a2, os_log_t log)
{
  int v3 = "unknown";
  if (*a1) {
    int v3 = *a1;
  }
  int v4 = (void *)(a2 + 32);
  int v5 = 136446466;
  int v6 = v3;
  __int16 v7 = 2082;
  int v8 = v4;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "[Device Config] ERROR: Failed to load config: error='%{public}s', path='%{public}s'",  (uint8_t *)&v5,  0x16u);
}

void sub_1000D6F7C(uint64_t a1)
{
}

void sub_1000D6FE8()
{
}

void sub_1000D705C()
{
}

void sub_1000D70CC()
{
}

void sub_1000D7140()
{
}

void sub_1000D71B0(char a1, uint64_t a2, os_log_s *a3)
{
  int v3 = "true";
  if ((a1 & 1) == 0) {
    int v3 = "false";
  }
  int v4 = "(baseline)";
  if ((a2 & 1) == 0) {
    int v4 = "";
  }
  *(_DWORD *)int v5 = 136315394;
  *(void *)&v5[4] = v3;
  *(_WORD *)&v5[12] = 2082;
  *(void *)&v5[14] = v4;
  sub_1000161A0( (void *)&_mh_execute_header,  a2,  a3,  "[MotionStateResolver] device-orientation-lock: %s %{public}s",  *(void *)v5,  *(void *)&v5[8],  *(void *)&v5[16]);
  sub_10000E1FC();
}

void sub_1000D7250()
{
}

void sub_1000D72C0()
{
  if (v3 != v4) {
    uint64_t v5 = v2;
  }
  else {
    uint64_t v5 = v0;
  }
  int v6 = 136315138;
  uint64_t v7 = v5;
  _os_log_debug_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEBUG,  "[MotionStateResolver] motionState: %s",  (uint8_t *)&v6,  0xCu);
  sub_10000E1FC();
}

void sub_1000D7334()
{
  __assert_rtn("operator++", "iter_impl.hpp", 324, "m_object != nullptr");
}

void sub_1000D735C()
{
  __assert_rtn("scan_literal", "lexer.hpp", 1222, "char_traits<char_type>::to_char_type(current) == literal_text[0]");
}

void sub_1000D7384()
{
  __assert_rtn("scan_string", "lexer.hpp", 370, "0x00 <= codepoint and codepoint <= 0x10FFFF");
}

void sub_1000D73AC()
{
  __assert_rtn("scan_string", "lexer.hpp", 250, "current == '\\'");
}

void sub_1000D73D4()
{
}

void sub_1000D73FC()
{
  __assert_rtn("scan_number", "lexer.hpp", 1208, "endptr == token_buffer.data() + token_buffer.size()");
}

void sub_1000D7424()
{
  __assert_rtn("scan_number", "lexer.hpp", 1175, "endptr == token_buffer.data() + token_buffer.size()");
}

void sub_1000D744C()
{
  __assert_rtn("scan_number", "lexer.hpp", 1191, "endptr == token_buffer.data() + token_buffer.size()");
}

void sub_1000D7474()
{
}

void sub_1000D749C()
{
  __assert_rtn("get_codepoint", "lexer.hpp", 188, "0x0000 <= codepoint and codepoint <= 0xFFFF");
}

void sub_1000D74C4()
{
  __assert_rtn("get_codepoint", "lexer.hpp", 162, "current == 'u'");
}

void sub_1000D74EC()
{
  __assert_rtn("next_byte_in_range", "lexer.hpp", 209, "ranges.size() == 2 or ranges.size() == 4 or ranges.size() == 6");
}

void sub_1000D7514()
{
}

void sub_1000D753C()
{
}

void sub_1000D7564()
{
}

void sub_1000D758C()
{
}

void sub_1000D75B4()
{
}

void sub_1000D75DC()
{
}

void sub_1000D7604(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1000D7628()
{
  __assert_rtn("operator->", "iter_impl.hpp", 279, "m_object != nullptr");
}

void sub_1000D7650()
{
  __assert_rtn("operator->", "iter_impl.hpp", 285, "m_it.object_iterator != m_object->m_value.object->end()");
}

void sub_1000D7678()
{
  __assert_rtn("operator->", "iter_impl.hpp", 291, "m_it.array_iterator != m_object->m_value.array->end()");
}

void sub_1000D76A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1000D76C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1000D76E8(uint64_t *a1, os_log_s *a2)
{
  uint64_t v4 = sub_10008D2D4(*a1);
  else {
    uint64_t v5 = *(void *)v4;
  }
  uint64_t v6 = sub_10008D0C4(*a1);
  else {
    uint64_t v7 = *(void *)v6;
  }
  int v8 = 136315394;
  uint64_t v9 = v5;
  __int16 v10 = 2080;
  uint64_t v11 = v7;
  _os_log_debug_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_DEBUG,  "[Transform Cache] Eviction callback for transform %s - %s",  (uint8_t *)&v8,  0x16u);
}

void *sub_1000D77B4(void *result)
{
  do
  {
    os_log_t v1 = (void *)result[1];
    if (v1)
    {
      result[1] = v1[2];
      v1[2] = result;
    }

    else
    {
      os_log_t v1 = (void *)result[2];
      *unint64_t result = 0LL;
      result[1] = 0LL;
      result[2] = 0LL;
    }

    unint64_t result = v1;
  }

  while (v1);
  return result;
}

void sub_1000D77E4(os_log_t log)
{
  *(_WORD *)os_log_t v1 = 0;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "[Transform Manager] Pre-reconfiguration: ERROR: null config store; cannot set anything up!",
    v1,
    2u);
}

void sub_1000D7850()
{
}

void sub_1000D7878()
{
}

void sub_1000D78A0()
{
  do
    sub_10002C258(v1);
  while (v3);
  if (v2)
  {
    sub_10002C270();
  }

  else
  {
    sub_10002C248();
    sub_10002C268(v0);
  }

void sub_1000D78D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1000D78F8()
{
  __assert_rtn("erase", "bstree_algorithms.hpp", 1587, "!x || NodeTraits::get_parent(x) == x_parent");
}

void sub_1000D7920()
{
}

void sub_1000D7948()
{
}

void sub_1000D7970()
{
  __assert_rtn("erase", "bstree_algorithms.hpp", 1545, "NodeTraits::get_left(x_parent) == y");
}

void sub_1000D7998()
{
  __assert_rtn("alloc_size", "pool.hpp", 353, "s >= min_alloc_size");
}

void sub_1000D79C0()
{
}

void sub_1000D79E8()
{
  do
    sub_10002C258(v1);
  while (v3);
  if (!v2)
  {
    sub_10002C248();
    std::__shared_weak_count::__release_weak(v0);
  }

  sub_10002C270();
}

void sub_1000D7A18(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 - 32;
  uint64_t v4 = (unsigned __int8 *)(a1 - 32);
  do
  {
    sub_1000041AC(v3);
    int v5 = *v4;
    v4 -= 32;
    sub_10000425C((uint64_t **)(v3 + 8), v5);
    BOOL v6 = v3 == a2;
    uint64_t v3 = (uint64_t)v4;
  }

  while (!v6);
}

void sub_1000D7A64()
{
}

void sub_1000D7AE4()
{
}

void sub_1000D7B78( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
    a5,
    a6,
    a7,
    a8,
    0);
}

void sub_1000D7BD8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
    a5,
    a6,
    a7,
    a8,
    0);
}

void sub_1000D7C38(uint64_t a1, int a2, os_log_t log)
{
  uint64_t v3 = (void *)(*(void *)a1 + 16LL);
  v4[0] = 67109378;
  v4[1] = a2;
  __int16 v5 = 2080;
  BOOL v6 = v3;
  _os_log_debug_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_DEBUG,  "[EventBroker] %d subscribers notified of event %s",  (uint8_t *)v4,  0x12u);
}

void sub_1000D7CD0(uint64_t a1, void *a2, os_log_t log)
{
  int v3 = 136315138;
  uint64_t v4 = a2;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "[EventBroker] ERROR: invalid regular expression: %s",  (uint8_t *)&v3,  0xCu);
}

void sub_1000D7D54(std::locale *this, std::locale *a2)
{
  locale = (std::__shared_weak_count *)this[6].__locale_;
  if (locale)
  {
    p_shared_owners = (unint64_t *)&locale->__shared_owners_;
    do
      unint64_t v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
      std::__shared_weak_count::__release_weak(locale);
    }
  }

  std::locale::~locale(this);
  uint64_t v7 = (std::__shared_weak_count *)a2[6].__locale_;
  if (v7)
  {
    int v8 = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

  std::locale::~locale(a2);
}

void sub_1000D7DFC(uint64_t a1, uint64_t *a2, os_log_t log)
{
  uint64_t v3 = *a2;
  int v4 = 136315394;
  uint64_t v5 = a1 + 8;
  __int16 v6 = 2114;
  uint64_t v7 = v3;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "[KernelEventToJson] Error: Unable to deserialize event %s: %{public}@",  (uint8_t *)&v4,  0x16u);
}

void sub_1000D7E88(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3 = 136315394;
  uint64_t v4 = a1 + 8;
  __int16 v5 = 2114;
  uint64_t v6 = a2;
  _os_log_debug_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_DEBUG,  "[KernelEventToJson] Successfully deserialized: %s - %{public}@",  (uint8_t *)&v3,  0x16u);
}

void sub_1000D7F10(uint64_t *a1, os_log_s *a2)
{
  uint64_t v2 = *a1;
  int v3 = 136315138;
  uint64_t v4 = v2;
  _os_log_debug_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_DEBUG,  "[MTEventToJson] Setting Message to %s",  (uint8_t *)&v3,  0xCu);
}

void sub_1000D7F88(uint64_t a1, os_log_s *a2, double a3)
{
  int v3 = 136315394;
  uint64_t v4 = a1;
  __int16 v5 = 2048;
  double v6 = a3;
  _os_log_debug_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_DEBUG,  "[MTEventToJson] Converting string %s to double %f",  (uint8_t *)&v3,  0x16u);
}

void sub_1000D8010( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000D806C(uint64_t a1, uint64_t a2, os_log_s *a3)
{
  *(_DWORD *)a2 = 136315138;
  *(void *)(a2 + 4) = a1;
  sub_100041164((void *)&_mh_execute_header, a2, a3, "[Config Store] Transaction failed to start; %s", (uint8_t *)a2);
}

void sub_1000D80A4( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000D8100(uint64_t a1, uint64_t a2, os_log_s *a3)
{
  *(_DWORD *)a2 = 136315138;
  *(void *)(a2 + 4) = a1;
  sub_100041164( (void *)&_mh_execute_header,  a2,  a3,  "[SQL Transaction] Transaction failed to rollback; %s",
    (uint8_t *)a2);
}

void sub_1000D8138( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000D8194(uint64_t a1, uint64_t a2, os_log_s *a3)
{
  *(_DWORD *)a2 = 136315138;
  *(void *)(a2 + 4) = a1;
  sub_100041164((void *)&_mh_execute_header, a2, a3, "[SQL Transaction] Transaction failed to end; %s", (uint8_t *)a2);
}

void sub_1000D81CC(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_fault_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_FAULT,  "[Config Path] Error: unable to retrieve CA Tasking path",  v1,  2u);
  sub_100041174();
}

void sub_1000D8234( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000D8290(int a1, os_log_s *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "[Platform] ERROR: Failed to retrieve current CPU uptime: %i",  (uint8_t *)v2,  8u);
  sub_100041174();
}

void sub_1000D8300( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000D835C(uint64_t *a1, os_log_s *a2)
{
  else {
    uint64_t v2 = (uint64_t *)*a1;
  }
  int v3 = 136315138;
  uint64_t v4 = v2;
  _os_log_debug_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_DEBUG,  "[StateCache] Invalidating all cache entries for state: %s",  (uint8_t *)&v3,  0xCu);
}

void sub_1000D83E0()
{
  __assert_rtn("operator[]", "json.hpp", 3713, "m_value.object->find(key) != m_value.object->end()");
}

void sub_1000D8410()
{
  if (v4 != v5) {
    uint64_t v6 = v3;
  }
  else {
    uint64_t v6 = v1;
  }
  sub_10004D048(v2, v6, 4.8751e-34);
  sub_100041164( (void *)&_mh_execute_header,  v7,  v8,  "[Sqlite Store %{public}s] Failed to disable legacy alter table[null database]",  v9);
  sub_10002C270();
}

void sub_1000D8458()
{
  if (v4 != v5) {
    uint64_t v6 = v3;
  }
  else {
    uint64_t v6 = v1;
  }
  sub_10004D048(v2, v6, 4.8751e-34);
  sub_100041164( (void *)&_mh_execute_header,  v7,  v8,  "[Sqlite Store %{public}s] Failed to set journaling mode[null database]",  v9);
  sub_10002C270();
}

void sub_1000D84A0()
{
  sub_10004D078( (void *)&_mh_execute_header,  "[Sqlite Store %{public}s] State database is corrupted! DB Integrity check failed. Status = %{public}d[null database]",  v4,  v5);
  sub_10002C270();
}

void sub_1000D84E4()
{
  if (v4 != v5) {
    uint64_t v6 = v3;
  }
  else {
    uint64_t v6 = v1;
  }
  sub_10004D048(v2, v6, 4.8751e-34);
  sub_100041164( (void *)&_mh_execute_header,  v7,  v8,  "[Sqlite Store %{public}s] Error preparing database version query[null database]",  v9);
  sub_10002C270();
}

void sub_1000D852C()
{
  if (v4 != v5) {
    uint64_t v6 = v3;
  }
  else {
    uint64_t v6 = v1;
  }
  sub_10004D048(v2, v6, 4.8751e-34);
  sub_100041164( (void *)&_mh_execute_header,  v7,  v8,  "[Sqlite Store %{public}s] Failed to retrieve database version query[null database]",  v9);
  sub_10002C270();
}

void sub_1000D8574()
{
}

void sub_1000D85B8()
{
  if (v4 != v5) {
    uint64_t v6 = v3;
  }
  else {
    uint64_t v6 = v1;
  }
  sub_10004D048(v2, v6, 4.8751e-34);
  sub_100041164( (void *)&_mh_execute_header,  v7,  v8,  "[Sqlite Store %{public}s] Failed to check database integrity after database clear[null database]",  v9);
  sub_10002C270();
}

void sub_1000D8600()
{
  if (v4 != v5) {
    uint64_t v6 = v3;
  }
  else {
    uint64_t v6 = v1;
  }
  sub_10004D048(v2, v6, 4.8751e-34);
  sub_100041164( (void *)&_mh_execute_header,  v7,  v8,  "[Sqlite Store %{public}s] Failed to truncate database during clear[null database]",  v9);
  sub_10002C270();
}

void sub_1000D8648()
{
  if (v4 != v5) {
    uint64_t v6 = v3;
  }
  else {
    uint64_t v6 = v1;
  }
  sub_10004D048(v2, v6, 4.8751e-34);
  sub_100041164( (void *)&_mh_execute_header,  v7,  v8,  "[Sqlite Store %{public}s] DATABASE INITIALIZATION: wiping database",  v9);
  sub_10002C270();
}

void sub_1000D8690()
{
  if (v4 != v5) {
    uint64_t v6 = v3;
  }
  else {
    uint64_t v6 = v1;
  }
  sub_10004D048(v2, v6, 4.8751e-34);
  sub_100041164((void *)&_mh_execute_header, v7, v8, "[Sqlite Store %{public}s] ## DATABASE WIPE: Wipe failed", v9);
  sub_10002C270();
}

void sub_1000D86D8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000D874C(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "[WiFiStateRelay] ERROR: Failed to register for LQM updates from SCDynamicStore",  v1,  2u);
}

void sub_1000D87B8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000D8824()
{
}

void sub_1000D887C()
{
}

void sub_1000D88D4(mach_error_t a1)
{
}

void sub_1000D893C()
{
}

void sub_1000D8994(mach_error_t a1)
{
}

void sub_1000D89FC(mach_error_t a1)
{
}

void sub_1000D8A64()
{
}

void sub_1000D8ABC()
{
}

void sub_1000D8B14()
{
}

void sub_1000D8B6C(uint8_t *buf, _BYTE *a2, os_log_t log)
{
  *std::string buf = 0;
  *a2 = 0;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "[KernelClient] IODataQueueMemory malformed\n",  buf,  2u);
}

void sub_1000D8BA8(void *a1, uint8_t *buf, void *a3, os_log_t log)
{
  *(_DWORD *)std::string buf = 138412290;
  *a3 = a1;
  _os_log_debug_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_DEBUG,  "[AppUsage] Skipping event for %@ due to missing start or end date",  buf,  0xCu);

  sub_10002C270();
}

void sub_1000D8BFC(void *a1, void *a2, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)std::string buf = 138412546;
  *(void *)(buf + 4) = a1;
  *((_WORD *)buf + 6) = 2112;
  *(void *)(buf + 14) = a2;
  _os_log_debug_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_DEBUG,  "[AppUsage] Stopping iteration with %@ that ends in the future at %@",  buf,  0x16u);

  sub_10002C270();
}

void sub_1000D8C64(void *a1, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)std::string buf = 138412290;
  *(void *)(buf + 4) = a1;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "[AppUsage] ERROR: Failed to query knowledge store: %@",  buf,  0xCu);

  sub_10002C270();
}

void sub_1000D8CB4(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_DEBUG,  "[AppUsage] Last app usage sync was more than one day ago; clamping at 24 hours",
    v1,
    2u);
}

void sub_1000D8D20(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "[AppUsage] ERROR: failed to iterate app usage payloads because a sync point has not been set",  v1,  2u);
}

void sub_1000D8D8C(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "[FrameworkConfiguration] Received configuration update from daemon but was not usable (not deserializable)",  v1,  2u);
  sub_100041174();
}

void sub_1000D8DF4(int a1, uint64_t a2, os_log_t log)
{
  v3[0] = 67109376;
  v3[1] = a1;
  __int16 v4 = 2048;
  uint64_t v5 = a2;
  _os_log_fault_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_FAULT,  "[FrameworkConfiguration] Received configuration update from daemon but was not usable (fw end offset [%u] > mmap size [%zu])",  (uint8_t *)v3,  0x12u);
}

void sub_1000D8E78( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000D8EE8( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000D8F4C(uint64_t a1, os_log_s *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "[DefaultSink] ERROR: failed to create CA log file: error %@",  (uint8_t *)&v2,  0xCu);
}

void sub_1000D8FC0( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000D9020( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000D9080()
{
}

void sub_1000D90A8()
{
}

void sub_1000D90D0()
{
  __assert_rtn("key", "iter_impl.hpp", 612, "m_object != nullptr");
}

void sub_1000D90F8()
{
  __assert_rtn("key", "iteration_proxy.hpp", 75, "anchor.m_object != nullptr");
}

void sub_1000D9120(os_log_s *a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)uint64_t v3 = 0;
  sub_100061404((void *)&_mh_execute_header, a1, a3, "==== ERROR: Clean exit timeout: continuing shutdown anyways", v3);
  sub_100041174();
}

void sub_1000D9180(os_log_s *a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)uint64_t v3 = 0;
  sub_100061404( (void *)&_mh_execute_header,  a1,  a3,  "==== ERROR: XPC Server shutdown TIMED OUT; continuing shutdown anyways",
    v3);
  sub_100041174();
}

void sub_1000D91E0(uint8_t *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = 0;
  *a2 = 0;
  sub_100061404( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  a3,  "Home directory is not setup. Waiting to see if it gets repaired...",  a1);
}

void sub_1000D9218(os_log_s *a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)uint64_t v3 = 0;
  sub_100061404((void *)&_mh_execute_header, a1, a3, "==== EXITING analyticsd ====", v3);
  sub_100041174();
}

void sub_1000D9278(os_log_s *a1)
{
  int v2 = 136315138;
  uint64_t v3 = getenv("USER");
  _os_log_error_impl( (void *)&_mh_execute_header,  a1,  OS_LOG_TYPE_ERROR,  "ERROR: Unrecognized user: '%s'",  (uint8_t *)&v2,  0xCu);
}

void sub_1000D9308(std::__shared_weak_count *a1)
{
  p_shared_owners = (unint64_t *)&a1->__shared_owners_;
  do
    unint64_t v3 = __ldaxr(p_shared_owners);
  while (__stlxr(v3 - 1, p_shared_owners));
  if (!v3)
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }

void sub_1000D9354(void *a1, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)std::string buf = 138412290;
  *(void *)(buf + 4) = a1;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "[TrialStateRelay] Trial: sandbox extension token query returned: %@",  buf,  0xCu);
}

void sub_1000D93A8(uint8_t *a1, _BYTE *a2, os_log_s *a3)
{
  *a1 = 0;
  *a2 = 0;
  sub_100061404((void *)&_mh_execute_header, a3, (uint64_t)a3, "[TrialStateRelay] Trial: Extension token is null", a1);
}

void sub_1000D93DC(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_DEBUG,  "[TrialStateRelay] TrialIdentifier: experimentIdentifiers nil. No active experiment",  v1,  2u);
}

void sub_1000D9448(os_log_s *a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)unint64_t v3 = 0;
  sub_100061404( (void *)&_mh_execute_header,  a1,  a3,  "[TrialStateRelay] TrialIdentifier: subscribeToTrialNamespace: Invalid Trial client",  v3);
}

void sub_1000D94AC( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000D950C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000D956C(uint64_t a1, os_log_s *a2)
{
  int v2 = 136315138;
  uint64_t v3 = a1;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "[IOReporter] ERROR: Invalid defType: %s",  (uint8_t *)&v2,  0xCu);
}

void sub_1000D95E0( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000D963C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000D9698( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000D96F4(uint8_t *buf, _BYTE *a2, os_log_t log)
{
  *std::string buf = 0;
  *a2 = 0;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "[ModifyEventManager] ERROR: Queried state is not wrapped in an object. Cannot populate event fields without the key for that state.",  buf,  2u);
}

void sub_1000D9730()
{
}

void sub_1000D9758(uint64_t a1, os_log_s *a2)
{
  int v2 = 136315138;
  uint64_t v3 = a1;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "[ModifyEventManager] ERROR: Invalid type for event modification: %s",  (uint8_t *)&v2,  0xCu);
}

void sub_1000D97CC()
{
  __assert_rtn("init_from_unsigned_long", "dynamic_bitset.hpp", 472, "m_bits.size() == 0");
}

void sub_1000D981C()
{
}

void sub_1000D9874(uint64_t a1, uint64_t a2)
{
}

void sub_1000D98A8()
{
  sub_1000090AC( (void *)&_mh_execute_header,  v0,  v1,  "[State Store] Failed to remove keyed transform state for (uuid='%{public}s')[null database]",  v2);
  sub_10000E1FC();
}

void sub_1000D990C()
{
}

void sub_1000D9964(uint64_t a1, uint64_t a2)
{
}

void sub_1000D9998()
{
  sub_1000090AC( (void *)&_mh_execute_header,  v0,  v1,  "[State Store] Failed to insert transform state for uuid='%s'[null database]",  v2);
  sub_10000E1FC();
}

void sub_1000D99FC()
{
}

void sub_1000D9A54(uint64_t a1, uint64_t a2)
{
}

void sub_1000D9A88()
{
  sub_1000090AC( (void *)&_mh_execute_header,  v0,  v1,  "[State Store] Failed to remove transform_state for (uuid='%{public}s')[null database]",  v2);
  sub_10000E1FC();
}

void sub_1000D9AEC()
{
}

void sub_1000D9B44(uint64_t a1, uint64_t a2)
{
}

void sub_1000D9B78()
{
  sub_1000090AC( (void *)&_mh_execute_header,  v0,  v1,  "[State Store] Failed to insert transform metadata for uuid='%s'[null database]",  v2);
  sub_10000E1FC();
}

void sub_1000D9BDC()
{
}

void sub_1000D9C34(uint64_t a1, uint64_t a2)
{
}

void sub_1000D9C68()
{
  sub_1000090AC( (void *)&_mh_execute_header,  v0,  v1,  "[State Store] Failed to remove transform_metadata for (uuid='%{public}s')[null database]",  v2);
  sub_10000E1FC();
}

void sub_1000D9CCC()
{
}

void sub_1000D9D24(uint64_t a1, uint64_t a2)
{
}

void sub_1000D9D58()
{
}

void sub_1000D9DB0(uint64_t a1, uint64_t a2)
{
}

void sub_1000D9DE4()
{
}

void sub_1000D9E3C(uint64_t a1, uint64_t a2)
{
}

void sub_1000D9E70()
{
}

void sub_1000D9EC8(uint64_t a1, uint64_t a2)
{
}

void sub_1000D9EFC()
{
}

void sub_1000D9F54(uint64_t a1, uint64_t a2)
{
}

void sub_1000D9F88()
{
}

void sub_1000D9FE0(uint64_t a1, uint64_t a2)
{
}

void sub_1000DA014()
{
}

void sub_1000DA06C(uint64_t a1, uint64_t a2)
{
}

void sub_1000DA0A0()
{
  if (v6 != v7) {
    uint64_t v8 = v5;
  }
  else {
    uint64_t v8 = v1;
  }
  *(_DWORD *)uint64_t v2 = 136315138;
  *(void *)(v2 + 4) = v8;
  sub_100041164( (void *)&_mh_execute_header,  v2,  v3,  "[State Store] Failed to remove transforms states for aggregation period='%s'[null database]",  v4);
  sub_10002C270();
}

void sub_1000DA0EC()
{
}

void sub_1000DA144(uint64_t a1, uint64_t a2)
{
}

void sub_1000DA178()
{
  if (v6 != v7) {
    uint64_t v8 = v5;
  }
  else {
    uint64_t v8 = v1;
  }
  *(_DWORD *)uint64_t v2 = 136315138;
  *(void *)(v2 + 4) = v8;
  sub_100041164( (void *)&_mh_execute_header,  v2,  v3,  "[State Store] Failed to remove transforms metadata for aggregation period='%s'[null database]",  v4);
  sub_10002C270();
}

void sub_1000DA1C4()
{
}

void sub_1000DA21C(uint64_t a1, uint64_t a2)
{
}

void sub_1000DA250()
{
}

void sub_1000DA2A8(uint64_t a1, uint64_t a2)
{
}

void sub_1000DA2DC()
{
}

void sub_1000DA334(uint64_t a1, uint64_t a2)
{
}

void sub_1000DA368()
{
}

void sub_1000DA3C0(uint64_t a1, uint64_t a2)
{
}

void sub_1000DA3F4()
{
}

void sub_1000DA44C(uint64_t a1, uint64_t a2)
{
}

void sub_1000DA480()
{
}

void sub_1000DA4D8(uint64_t a1, uint64_t a2)
{
}

void sub_1000DA50C()
{
  if (v6 != v7) {
    uint64_t v8 = v5;
  }
  else {
    uint64_t v8 = v1;
  }
  *(_DWORD *)uint64_t v2 = 136315138;
  *(void *)(v2 + 4) = v8;
  sub_100041164( (void *)&_mh_execute_header,  v2,  v3,  "[State Store] Failed to insert aggregation session for aggregation period='%s'[null database]",  v4);
  sub_10002C270();
}

void sub_1000DA558()
{
}

void sub_1000DA5B0(uint64_t a1, uint64_t a2)
{
}

void sub_1000DA5E4()
{
}

void sub_1000DA63C(uint64_t a1, uint64_t a2)
{
}

void sub_1000DA670()
{
}

void sub_1000DA6C8(uint64_t a1, uint64_t a2)
{
}

void sub_1000DA6FC()
{
}

void sub_1000DA754(uint64_t a1, uint64_t a2)
{
}

void sub_1000DA788()
{
}

void sub_1000DA7E0(uint64_t a1, uint64_t a2)
{
}

void sub_1000DA814()
{
}

void sub_1000DA86C(uint64_t a1, uint64_t a2)
{
}

void sub_1000DA8A0()
{
}

void sub_1000DA8F8(uint64_t a1, uint64_t a2)
{
}

void sub_1000DA92C()
{
}

void sub_1000DA984(uint64_t a1, uint64_t a2)
{
}

void sub_1000DA9B8()
{
}

void sub_1000DAA10(uint64_t a1, uint64_t a2)
{
}

void sub_1000DAA44()
{
}

void sub_1000DAA9C(uint64_t a1, uint64_t a2)
{
}

void sub_1000DAAD0()
{
}

void sub_1000DAB28(uint64_t a1, uint64_t a2)
{
}

void sub_1000DAB5C()
{
}

void sub_1000DABB4(uint64_t a1, uint64_t a2)
{
}

void sub_1000DABE8()
{
}

void sub_1000DAC40(uint64_t a1, uint64_t a2)
{
}

void sub_1000DAC74()
{
}

void sub_1000DACCC(uint64_t a1, uint64_t a2)
{
}

void sub_1000DAD00()
{
}

void sub_1000DAD58(uint64_t a1, uint64_t a2)
{
}

void sub_1000DAD8C()
{
}

void sub_1000DADE4(uint64_t a1, uint64_t a2)
{
}

void sub_1000DAE18()
{
}

void sub_1000DAE70(uint64_t a1, uint64_t a2)
{
}

void sub_1000DAEA4()
{
}

void sub_1000DAEFC(uint64_t a1, uint64_t a2)
{
}

void sub_1000DAF30()
{
}

void sub_1000DAF88(uint64_t a1, uint64_t a2)
{
}

void sub_1000DAFBC()
{
}

void sub_1000DB014(uint64_t a1, uint64_t a2)
{
}

void sub_1000DB048()
{
}

void sub_1000DB0A0(uint64_t a1, uint64_t a2)
{
}

void sub_1000DB0D4()
{
}

void sub_1000DB12C(uint64_t a1, uint64_t a2)
{
}

void sub_1000DB160()
{
}

void sub_1000DB1B8(uint64_t a1, uint64_t a2)
{
}

void sub_1000DB1EC()
{
}

void sub_1000DB244(uint64_t a1, uint64_t a2)
{
}

void sub_1000DB278()
{
}

void sub_1000DB2D0(uint64_t a1, uint64_t a2)
{
}

void sub_1000DB304()
{
}

void sub_1000DB35C(uint64_t a1, uint64_t a2)
{
}

void sub_1000DB390()
{
}

void sub_1000DB3E8(uint64_t a1, uint64_t a2)
{
}

void sub_1000DB41C()
{
}

void sub_1000DB474(uint64_t a1, uint64_t a2)
{
}

void sub_1000DB4A8()
{
}

void sub_1000DB500(uint64_t a1, uint64_t a2)
{
}

void sub_1000DB534()
{
}

void sub_1000DB58C(uint64_t a1, uint64_t a2)
{
}

void sub_1000DB5C0()
{
}

void sub_1000DB618(uint64_t a1, uint64_t a2)
{
}

void sub_1000DB64C()
{
}

void sub_1000DB6A4(uint64_t a1, uint64_t a2)
{
}

void sub_1000DB6D8()
{
}

void sub_1000DB730(uint64_t a1, uint64_t a2)
{
}

void sub_1000DB764()
{
}

void sub_1000DB7BC(uint64_t a1, uint64_t a2)
{
}

void sub_1000DB7F0()
{
}

void sub_1000DB848(uint64_t a1, uint64_t a2)
{
}

void sub_1000DB87C()
{
}

void sub_1000DB8D4(uint64_t a1, uint64_t a2)
{
}

void sub_1000DB908()
{
}

void sub_1000DB960(uint64_t a1, uint64_t a2)
{
}

void sub_1000DB994()
{
}

void sub_1000DB9EC(uint64_t a1, uint64_t a2)
{
}

void sub_1000DBA20()
{
}

void sub_1000DBA78(sqlite3 *a1, os_log_s *a2)
{
}

void sub_1000DBAF0()
{
  __int16 v3 = 2080;
  uint64_t v4 = v0;
  sub_10006E894( (void *)&_mh_execute_header,  v1,  (uint64_t)v1,  "[State Store] Failed to insert queried_state for stateName='%s' and params='%s'[null database]",  v2);
  sub_10000E1FC();
}

void sub_1000DBB84()
{
}

void sub_1000DBBDC(sqlite3 *a1, os_log_s *a2)
{
}

void sub_1000DBC54()
{
}

void sub_1000DBCAC(sqlite3 *a1, os_log_s *a2)
{
}

void sub_1000DBD1C()
{
}

void sub_1000DBD74(sqlite3 *a1, os_log_s *a2)
{
}

void sub_1000DBDE4()
{
}

void sub_1000DBE3C(sqlite3 *a1, os_log_s *a2)
{
}

void sub_1000DBEB4()
{
  sub_1000090AC( (void *)&_mh_execute_header,  v0,  v1,  "[State Store] Failed to remove queried_states (name='%{public}s')[null database]",  v2);
  sub_10000E1FC();
}

void sub_1000DBF28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10006E894( (void *)&_mh_execute_header,  v5,  v3,  "[State Store] Failed to remove queried_states (name='%{public}s'); %s",
    v4);
}

void sub_1000DBF64(uint64_t a1, uint64_t a2)
{
}

void sub_1000DBF98()
{
}

void sub_1000DBFF0(uint64_t a1, uint64_t a2)
{
}

void sub_1000DC024()
{
}

void sub_1000DC07C(sqlite3 *a1, os_log_s *a2)
{
}

void sub_1000DC0F4()
{
}

void sub_1000DC14C(sqlite3 *a1, os_log_s *a2)
{
}

void sub_1000DC1BC()
{
}

void sub_1000DC214(sqlite3 *a1, os_log_s *a2)
{
}

void sub_1000DC284()
{
}

void sub_1000DC2DC(sqlite3 *a1, os_log_s *a2)
{
}

void sub_1000DC34C()
{
}

void sub_1000DC3A4(sqlite3 *a1, os_log_s *a2)
{
}

void sub_1000DC414()
{
}

void sub_1000DC46C(sqlite3 *a1, os_log_s *a2)
{
}

void sub_1000DC4DC()
{
}

void sub_1000DC534(sqlite3 *a1, os_log_s *a2)
{
}

void sub_1000DC5A4()
{
}

void sub_1000DC5FC(sqlite3 *a1, os_log_s *a2)
{
}

void sub_1000DC66C()
{
}

void sub_1000DC6C4(sqlite3 *a1, os_log_s *a2)
{
}

void sub_1000DC734()
{
}

void sub_1000DC78C(sqlite3 *a1, os_log_s *a2)
{
}

void sub_1000DC7FC()
{
}

void sub_1000DC854(uint64_t a1, uint64_t a2)
{
}

void sub_1000DC888()
{
}

void sub_1000DC8E0(uint64_t a1, uint64_t a2)
{
}

void sub_1000DC914()
{
}

void sub_1000DC96C(uint64_t a1, uint64_t a2)
{
}

void sub_1000DC9A0()
{
}

void sub_1000DC9F8(uint64_t a1, uint64_t a2)
{
}

void sub_1000DCA2C()
{
}

void sub_1000DCA84(uint64_t a1, uint64_t a2)
{
}

void sub_1000DCAB8()
{
}

void sub_1000DCB10(uint64_t a1, uint64_t a2)
{
}

void sub_1000DCB44()
{
}

void sub_1000DCB9C(uint64_t a1, uint64_t a2)
{
}

void sub_1000DCBD0()
{
}

void sub_1000DCC28(uint64_t a1, uint64_t a2)
{
}

void sub_1000DCC5C()
{
}

void sub_1000DCCB4(uint64_t a1, uint64_t a2)
{
}

void sub_1000DCCE8()
{
}

void sub_1000DCD5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1000DCD98(int *a1, uint64_t a2, os_log_s *a3)
{
  int v3 = *a1;
  *(_DWORD *)a2 = 67109120;
  *(_DWORD *)(a2 + 4) = v3;
  sub_10006F354( (void *)&_mh_execute_header,  a2,  a3,  "[Sandboxing] failed to initialize temporary directory: %{darwin.errno}d",  (uint8_t *)a2);
}

void sub_1000DCDD4(int *a1, uint64_t a2, os_log_s *a3)
{
  int v3 = *a1;
  *(_DWORD *)a2 = 67109120;
  *(_DWORD *)(a2 + 4) = v3;
  sub_10006F354( (void *)&_mh_execute_header,  a2,  a3,  "[Sandboxing] failed to resolve temporary directory: %{darwin.errno}d",  (uint8_t *)a2);
}

void sub_1000DCE10(void *a1)
{
  uint64_t v1 = __cxa_begin_catch(a1);
  int v2 = (os_log_s *)qword_100131928;
  if (os_log_type_enabled((os_log_t)qword_100131928, OS_LOG_TYPE_ERROR))
  {
    uint64_t v3 = (*(uint64_t (**)(void *))(*(void *)v1 + 16LL))(v1);
    int v4 = 136315138;
    uint64_t v5 = v3;
    _os_log_error_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "[FwConfigWriter] ERROR: failed to delete framework config. Exception: %s",  (uint8_t *)&v4,  0xCu);
  }

  sub_10004F810();
}

void sub_1000DCEC4(uint64_t a1, uint64_t a2, os_log_s *a3)
{
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16LL))(a2);
  int v6 = 136315394;
  uint64_t v7 = a1;
  __int16 v8 = 2080;
  uint64_t v9 = v5;
  _os_log_error_impl( (void *)&_mh_execute_header,  a3,  OS_LOG_TYPE_ERROR,  "[FwConfigWriter] ERROR: failed to parse external config of kind: %s, Exception: %s",  (uint8_t *)&v6,  0x16u);
  sub_10004F810();
}

void sub_1000DCF60()
{
  __assert_rtn("OSTransaction", "utils.cpp", 14, "transaction_ != nullptr");
}

void sub_1000DCF88(uint64_t *a1, os_log_s *a2)
{
  else {
    int v2 = (uint64_t *)*a1;
  }
  int v3 = 136315138;
  int v4 = v2;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "[IOReporter] ERROR: Channels Group (%s) not found.",  (uint8_t *)&v3,  0xCu);
}

void sub_1000DD00C(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "[IOReporter] ERROR: Channels not yet sampled.",  v1,  2u);
}

void sub_1000DD078(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_DEBUG,  "[MTShim Connection] Processing MT xpc event on the work queue",  v1,  2u);
}

void sub_1000DD0E4()
{
  if (v4 < 0) {
    int v3 = (void *)*v3;
  }
  uint64_t v5 = (uint64_t)(*(void *)(v0 + 80) - *(void *)(v0 + 72)) >> 3;
  int v6 = 136446466;
  uint64_t v7 = v3;
  __int16 v8 = 2048;
  uint64_t v9 = v5;
  sub_10002DEDC( (void *)&_mh_execute_header,  v1,  v2,  "[%{public}s XPC Server] Setting new client connection handler. %zu active connections",  (uint8_t *)&v6);
  sub_10000E1FC();
}

void sub_1000DD16C()
{
}

void sub_1000DD1A4()
{
}

void sub_1000DD1DC()
{
}

void sub_1000DD210()
{
}

void sub_1000DD27C()
{
}

void sub_1000DD2B0()
{
}

void sub_1000DD31C()
{
  __int16 v2 = 2048;
  uint64_t v3 = 4168LL;
  _os_log_error_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_ERROR,  "[Kernel event] Invalid size. std::string::size_type size = %zu, expected: %zu",  v1,  0x16u);
  sub_10000E1FC();
}

void sub_1000DD398()
{
}

void sub_1000DD3F8()
{
    v2,
    v3,
    v4,
    v5,
    v6);
  sub_10000E1FC();
}

void sub_1000DD458()
{
    v2,
    v3,
    v4,
    v5,
    v6);
  sub_10000E1FC();
}

void sub_1000DD4B8()
{
}

void sub_1000DD510()
{
}

void sub_1000DD568()
{
}

void sub_1000DD5C0()
{
}

void sub_1000DD618()
{
}

void sub_1000DD670()
{
    v2,
    v3,
    v4,
    v5,
    v6);
  sub_100041174();
}

void sub_1000DD6C8()
{
}

void sub_1000DD720()
{
}

void sub_1000DD778()
{
}

void sub_1000DD7D0()
{
    v2,
    v3,
    v4,
    v5,
    v6);
  sub_100041174();
}

void sub_1000DD828()
{
    v2,
    v3,
    v4,
    v5,
    v6);
  sub_100041174();
}

void sub_1000DD880()
{
}

void sub_1000DD8D8()
{
}

void sub_1000DD930()
{
}

void sub_1000DD988()
{
}

void sub_1000DD9E0()
{
}

void sub_1000DDA38()
{
}

void sub_1000DDA90()
{
}

void sub_1000DDAE8()
{
}

void sub_1000DDB40()
{
}

void sub_1000DDB98()
{
}

void sub_1000DDBF0()
{
}

void sub_1000DDC48()
{
}

void sub_1000DDCA0()
{
}

void sub_1000DDCF8()
{
}

void sub_1000DDD50()
{
}

void sub_1000DDDA8()
{
}

void sub_1000DDE08()
{
  __int16 v3 = 2080;
  uint64_t v4 = v0;
  _os_log_debug_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "%s %s", v2, 0x16u);
  sub_10000E1FC();
}

void sub_1000DDE94()
{
}

void sub_1000DDF04()
{
}

void sub_1000DDF64()
{
}

void sub_1000DDFBC(char a1, std::__shared_weak_count *a2)
{
  if ((a1 & 1) == 0)
  {
    p_shared_owners = (unint64_t *)&a2->__shared_owners_;
    do
      unint64_t v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))a2->__on_zero_shared)(a2);
      std::__shared_weak_count::__release_weak(a2);
    }
  }

void sub_1000DE00C()
{
}

void sub_1000DE064()
{
}

void sub_1000DE0BC()
{
}

void sub_1000DE114(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "[HeartBeatActivity] 60 minute timer", v1, 2u);
}

void sub_1000DE180(uint64_t a1)
{
}

void sub_1000DE194(unsigned int *a1, os_log_s *a2)
{
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  int v6 = 136446210;
  uint64_t v7 = p_p;
  sub_1000090AC( (void *)&_mh_execute_header,  a2,  v3,  "[ConfigUtils] ERROR: Remove task config from disk: failed (%{public}s)",  (uint8_t *)&v6);
}

void sub_1000DE240( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000DE2A0(uint64_t *a1, os_log_s *a2, uint64_t a3)
{
  else {
    uint64_t v3 = (uint64_t *)*a1;
  }
  int v4 = 136446210;
  uint64_t v5 = v3;
  sub_1000090AC( (void *)&_mh_execute_header,  a2,  a3,  "[Tasked Config] ERROR: Save task config: failed to because parent path is not a directory %{public}s",  (uint8_t *)&v4);
}

void sub_1000DE31C(uint64_t a1, os_log_s *a2, uint64_t a3)
{
  uint64_t v3 = *(void **)a1;
  int v4 = 136446210;
  uint64_t v5 = v3;
  sub_1000090AC( (void *)&_mh_execute_header,  a2,  a3,  "[Tasked Config] ERROR: Failed to save config to path: %{public}s",  (uint8_t *)&v4);
}

void sub_1000DE398( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000DE3F8()
{
}

void sub_1000DE450()
{
}

void sub_1000DE4A8()
{
}

void sub_1000DE500()
{
}

void sub_1000DE564()
{
}

void sub_1000DE5BC()
{
}

void sub_1000DE614()
{
}

void sub_1000DE66C(uint64_t a1, os_log_s *a2)
{
  uint64_t v4 = sub_10008D0C4(a1);
  else {
    uint64_t v5 = *(void *)v4;
  }
  uint64_t v6 = sub_10008D2D4(a1);
  else {
    uint64_t v7 = *(void *)v6;
  }
  int v8 = 136315394;
  uint64_t v9 = v5;
  __int16 v10 = 2080;
  uint64_t v11 = v7;
  _os_log_fault_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_FAULT,  "[Transform] transform %s - %s was not initialized when being checked for a budget exceeded",  (uint8_t *)&v8,  0x16u);
}

void sub_1000DE734(void *a1, uint64_t a2, os_log_s *a3)
{
  *(_DWORD *)a2 = 138412290;
  *(void *)(a2 + 4) = a1;
  sub_100041164((void *)&_mh_execute_header, a2, a3, "[TrialHelper] rollout query returned: %@", (uint8_t *)a2);
}

void sub_1000DE77C(void *a1, uint64_t a2, os_log_s *a3)
{
  *(_DWORD *)a2 = 138412290;
  *(void *)(a2 + 4) = a1;
  sub_100041164((void *)&_mh_execute_header, a2, a3, "[TrialHelper] experiments query returned: %@", (uint8_t *)a2);
}

void sub_1000DE7C4(uint64_t a1, void *a2, os_log_s *a3)
{
  LODWORD(v3) = 136315138;
  HIDWORD(v3) = (_DWORD)a2;
  sub_100092190( (void *)&_mh_execute_header,  (uint64_t)a2,  a3,  "[NetworkingStateResolver] primaryNetworkInterface: %s",  v3);
}

void sub_1000DE838(char *a1, os_log_s *a2)
{
  int v2 = *a1;
  v3[0] = 67109120;
  v3[1] = v2;
  _os_log_debug_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_DEBUG,  "[NetworkingStateResolver] wiFiLQM: %d",  (uint8_t *)v3,  8u);
}

void sub_1000DE8B0(uint64_t a1, void *a2, os_log_s *a3)
{
  LODWORD(v3) = 136315138;
  HIDWORD(v3) = (_DWORD)a2;
  sub_100092190((void *)&_mh_execute_header, (uint64_t)a2, a3, "[NetworkingStateResolver] wiFiRadioTechResult: %s", v3);
}

uint64_t sub_1000DE924(uint64_t a1, uint64_t a2)
{
  return std::ios::~ios(a2 + 120);
}

void sub_1000DE960(uint64_t a1, uint8_t *buf, uint64_t a3, os_log_t log)
{
  *(_DWORD *)std::string buf = 136315394;
  *(void *)(buf + 4) = a1;
  *((_WORD *)buf + 6) = 2048;
  *(void *)(buf + 14) = a3;
  _os_log_debug_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_DEBUG,  "[DaemonState] %s parameters parsed (%lu bytes)",  buf,  0x16u);
}

void sub_1000DE9B4( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000DEA10( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000DEA6C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000DEAC8(uint64_t a1, uint64_t a2)
{
}

void sub_1000DEB30(uint64_t a1, uint64_t a2)
{
}

void sub_1000DEB98(uint64_t a1, uint64_t a2)
{
}

void sub_1000DEC00(uint64_t a1, uint64_t a2)
{
}

void sub_1000DEC68(uint64_t a1, uint64_t a2)
{
}

void sub_1000DECD0(uint64_t a1, uint64_t a2)
{
}

void sub_1000DED38(void *a1, uint64_t a2, os_log_s *a3)
{
  *(_DWORD *)a2 = 138412290;
  *(void *)(a2 + 4) = a1;
  sub_100097AB4( (void *)&_mh_execute_header,  a3,  (uint64_t)a3,  "[RTCReporter] Sending payload %@ to RTCReporting.",  (uint8_t *)a2);
}

void sub_1000DED84( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000DEDE4(uint64_t a1, os_log_s *a2, uint64_t a3)
{
  uint64_t v3 = (void *)(a1 + 24);
  int v4 = 136315138;
  uint64_t v5 = v3;
  sub_100097AB4( (void *)&_mh_execute_header,  a2,  a3,  "[RTCReporter] Creating RTCReporting session for %s service.",  (uint8_t *)&v4);
}

void sub_1000DEE60( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000DEEC0(uint64_t a1, os_log_s *a2, uint64_t a3)
{
  uint64_t v3 = (void *)(a1 + 24);
  int v4 = 136315138;
  uint64_t v5 = v3;
  sub_100097AB4( (void *)&_mh_execute_header,  a2,  a3,  "[RTCReporter] Releasing RTCReporter for %s service.",  (uint8_t *)&v4);
}

void sub_1000DEF3C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000DEF9C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000DEFFC()
{
  __assert_rtn("operator--", "iter_impl.hpp", 367, "m_object != nullptr");
}

void sub_1000DF024()
{
}

void sub_1000DF04C()
{
}

void sub_1000DF074()
{
}

void sub_1000DF09C(uint64_t a1)
{
}

void sub_1000DF0EC()
{
}

void sub_1000DF114()
{
}

void sub_1000DF13C(int a1, int a2, os_log_t log)
{
  v3[0] = 67109376;
  v3[1] = a1;
  __int16 v4 = 1024;
  int v5 = a2;
  _os_log_debug_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_DEBUG,  "[MemoryUtils] Memory Footprint: {Current: %d, Peak: %d}",  (uint8_t *)v3,  0xEu);
}

void sub_1000DF1C0(void *a1, uint64_t a2)
{
  *(_BYTE *)a2 = 0;
  *(void *)(a2 + sub_100007004((uint64_t)v9 + 8) = 0LL;
  sub_1000041AC(a2);
  sub_1000041AC(a2);
  __cxa_end_catch();
}

void operator delete[](void *__p)
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void *__cdecl operator new[](size_t __sz)
{
  while (1)
    ;
}

void *__cdecl operator new[](size_t __sz, const std::nothrow_t *a2)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  while (1)
    ;
}

id objc_msgSend_AnalyticsQueryValuesWrapperWithArguments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "AnalyticsQueryValuesWrapperWithArguments:");
}

id objc_msgSend_CA(void *a1, const char *a2, ...)
{
  return _[a1 CA];
}

id objc_msgSend_Device(void *a1, const char *a2, ...)
{
  return _[a1 Device];
}

id objc_msgSend_HighEngagementDevices(void *a1, const char *a2, ...)
{
  return _[a1 HighEngagementDevices];
}

id objc_msgSend_NANData(void *a1, const char *a2, ...)
{
  return _[a1 NANData];
}

id objc_msgSend_OSAnalytics(void *a1, const char *a2, ...)
{
  return _[a1 OSAnalytics];
}

id objc_msgSend_ScreenLocked(void *a1, const char *a2, ...)
{
  return _[a1 ScreenLocked];
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return _[a1 UTF8String];
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return _[a1 UUID];
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return _[a1 UUIDString];
}

id objc_msgSend__updateTrialState_experimentIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateTrialState:experimentIdentifiers:");
}

id objc_msgSend_activate(void *a1, const char *a2, ...)
{
  return _[a1 activate];
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObject:");
}

id objc_msgSend_addObserver_forKeyPath_options_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:forKeyPath:options:context:");
}

id objc_msgSend_addUpdateHandlerForNamespaceName_queue_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addUpdateHandlerForNamespaceName:queue:usingBlock:");
}

id objc_msgSend_allValues(void *a1, const char *a2, ...)
{
  return _[a1 allValues];
}

id objc_msgSend_appInFocusStream(void *a1, const char *a2, ...)
{
  return _[a1 appInFocusStream];
}

id objc_msgSend_arrayWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithArray:");
}

id objc_msgSend_arrayWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObject:");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_automotive(void *a1, const char *a2, ...)
{
  return _[a1 automotive];
}

id objc_msgSend_BOOLForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BOOLForKey:");
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return _[a1 BOOLValue];
}

id objc_msgSend_buildVersion(void *a1, const char *a2, ...)
{
  return _[a1 buildVersion];
}

id objc_msgSend_bytes(void *a1, const char *a2, ...)
{
  return _[a1 bytes];
}

id objc_msgSend_clientWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientWithIdentifier:");
}

id objc_msgSend_componentsSeparatedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsSeparatedByString:");
}

id objc_msgSend_confidence(void *a1, const char *a2, ...)
{
  return _[a1 confidence];
}

id objc_msgSend_configureCWFInterfaceEventHandler(void *a1, const char *a2, ...)
{
  return _[a1 configureCWFInterfaceEventHandler];
}

id objc_msgSend_configureSCDynamicStore(void *a1, const char *a2, ...)
{
  return _[a1 configureSCDynamicStore];
}

id objc_msgSend_containsString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsString:");
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _[a1 copy];
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _[a1 count];
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_countryCode(void *a1, const char *a2, ...)
{
  return _[a1 countryCode];
}

id objc_msgSend_crashReporterKey(void *a1, const char *a2, ...)
{
  return _[a1 crashReporterKey];
}

id objc_msgSend_createForSubmission_metadata_options_error_writing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createForSubmission:metadata:options:error:writing:");
}

id objc_msgSend_currentCalendar(void *a1, const char *a2, ...)
{
  return _[a1 currentCalendar];
}

id objc_msgSend_currentKnownNetworkProfile(void *a1, const char *a2, ...)
{
  return _[a1 currentKnownNetworkProfile];
}

id objc_msgSend_cycling(void *a1, const char *a2, ...)
{
  return _[a1 cycling];
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return _[a1 date];
}

id objc_msgSend_dateByAddingComponents_toDate_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateByAddingComponents:toDate:options:");
}

id objc_msgSend_dateWithTimeIntervalSince1970_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSince1970:");
}

id objc_msgSend_defaultProvider(void *a1, const char *a2, ...)
{
  return _[a1 defaultProvider];
}

id objc_msgSend_deploymentId(void *a1, const char *a2, ...)
{
  return _[a1 deploymentId];
}

id objc_msgSend_deregisterForCWEventTypes(void *a1, const char *a2, ...)
{
  return _[a1 deregisterForCWEventTypes];
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return _[a1 description];
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_doubleForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doubleForKey:");
}

id objc_msgSend_doubleValue(void *a1, const char *a2, ...)
{
  return _[a1 doubleValue];
}

id objc_msgSend_dyldPlatform(void *a1, const char *a2, ...)
{
  return _[a1 dyldPlatform];
}

id objc_msgSend_endDate(void *a1, const char *a2, ...)
{
  return _[a1 endDate];
}

id objc_msgSend_endDateSortDescriptorAscending_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endDateSortDescriptorAscending:");
}

id objc_msgSend_enumerateKeysAndObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateKeysAndObjectsUsingBlock:");
}

id objc_msgSend_enumerateObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateObjectsUsingBlock:");
}

id objc_msgSend_enumerateSampledActiveExperimentsForEnvironment_correlationID_error_block_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateSampledActiveExperimentsForEnvironment:correlationID:error:block:");
}

id objc_msgSend_enumerateSampledActiveRolloutsForCorrelationID_error_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateSampledActiveRolloutsForCorrelationID:error:block:");
}

id objc_msgSend_error(void *a1, const char *a2, ...)
{
  return _[a1 error];
}

id objc_msgSend_eventBody(void *a1, const char *a2, ...)
{
  return _[a1 eventBody];
}

id objc_msgSend_exactBundleVersion(void *a1, const char *a2, ...)
{
  return _[a1 exactBundleVersion];
}

id objc_msgSend_executeQuery_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executeQuery:error:");
}

id objc_msgSend_experimentId(void *a1, const char *a2, ...)
{
  return _[a1 experimentId];
}

id objc_msgSend_experimentIdentifiersWithNamespaceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "experimentIdentifiersWithNamespaceName:");
}

id objc_msgSend_factorPackIds(void *a1, const char *a2, ...)
{
  return _[a1 factorPackIds];
}

id objc_msgSend_fetchHighEngagementCategories(void *a1, const char *a2, ...)
{
  return _[a1 fetchHighEngagementCategories];
}

id objc_msgSend_fileDescriptor(void *a1, const char *a2, ...)
{
  return _[a1 fileDescriptor];
}

id objc_msgSend_fileSystemRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 fileSystemRepresentation];
}

id objc_msgSend_filepath(void *a1, const char *a2, ...)
{
  return _[a1 filepath];
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return _[a1 firstObject];
}

id objc_msgSend_floatValue(void *a1, const char *a2, ...)
{
  return _[a1 floatValue];
}

id objc_msgSend_getQueue(void *a1, const char *a2, ...)
{
  return _[a1 getQueue];
}

id objc_msgSend_getSandboxExtensionTokensForIdentifierQueryWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getSandboxExtensionTokensForIdentifierQueryWithError:");
}

id objc_msgSend_hasStarting(void *a1, const char *a2, ...)
{
  return _[a1 hasStarting];
}

id objc_msgSend_highEngagementCategory1(void *a1, const char *a2, ...)
{
  return _[a1 highEngagementCategory1];
}

id objc_msgSend_highEngagementCategory2(void *a1, const char *a2, ...)
{
  return _[a1 highEngagementCategory2];
}

id objc_msgSend_initWithEndpoint_parameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEndpoint:parameters:");
}

id objc_msgSend_initWithInterfaceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithInterfaceName:");
}

id objc_msgSend_initWithMonitoring_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMonitoring:");
}

id objc_msgSend_initWithMonitoring_withWiFiStateRelay_withTelephonyStateRelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMonitoring:withWiFiStateRelay:withTelephonyStateRelay:");
}

id objc_msgSend_initWithSessionInfo_userInfo_frameworksToCheck_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSessionInfo:userInfo:frameworksToCheck:");
}

id objc_msgSend_initWithStartDate_endDate_maxEvents_lastN_reversed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStartDate:endDate:maxEvents:lastN:reversed:");
}

id objc_msgSend_initWithTimeIntervalSince1970_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTimeIntervalSince1970:");
}

id objc_msgSend_initWithTimeIntervalSinceReferenceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTimeIntervalSinceReferenceDate:");
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return _[a1 intValue];
}

id objc_msgSend_integerForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "integerForKey:");
}

id objc_msgSend_interface(void *a1, const char *a2, ...)
{
  return _[a1 interface];
}

id objc_msgSend_interfaceName(void *a1, const char *a2, ...)
{
  return _[a1 interfaceName];
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return _[a1 invalidate];
}

id objc_msgSend_isActivityAvailable(void *a1, const char *a2, ...)
{
  return _[a1 isActivityAvailable];
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isNativeArchitecture(void *a1, const char *a2, ...)
{
  return _[a1 isNativeArchitecture];
}

id objc_msgSend_isPersonalHotspot(void *a1, const char *a2, ...)
{
  return _[a1 isPersonalHotspot];
}

id objc_msgSend_knowledgeStore(void *a1, const char *a2, ...)
{
  return _[a1 knowledgeStore];
}

id objc_msgSend_lastKnownEstimates(void *a1, const char *a2, ...)
{
  return _[a1 lastKnownEstimates];
}

id objc_msgSend_lastPathComponent(void *a1, const char *a2, ...)
{
  return _[a1 lastPathComponent];
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _[a1 length];
}

id objc_msgSend_localizedDescription(void *a1, const char *a2, ...)
{
  return _[a1 localizedDescription];
}

id objc_msgSend_localizedStringForCountryCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStringForCountryCode:");
}

id objc_msgSend_longLongValue(void *a1, const char *a2, ...)
{
  return _[a1 longLongValue];
}

id objc_msgSend_maxPHYModeDescription(void *a1, const char *a2, ...)
{
  return _[a1 maxPHYModeDescription];
}

id objc_msgSend_metadata(void *a1, const char *a2, ...)
{
  return _[a1 metadata];
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return _[a1 mutableCopy];
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return _[a1 name];
}

id objc_msgSend_networkName(void *a1, const char *a2, ...)
{
  return _[a1 networkName];
}

id objc_msgSend_now(void *a1, const char *a2, ...)
{
  return _[a1 now];
}

id objc_msgSend_null(void *a1, const char *a2, ...)
{
  return _[a1 null];
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithBool:");
}

id objc_msgSend_numberWithDouble_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithDouble:");
}

id objc_msgSend_numberWithLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithLongLong:");
}

id objc_msgSend_numberWithUnsignedInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInt:");
}

id objc_msgSend_numberWithUnsignedLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedLongLong:");
}

id objc_msgSend_objCType(void *a1, const char *a2, ...)
{
  return _[a1 objCType];
}

id objc_msgSend_objectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndex:");
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndexedSubscript:");
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKey:");
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKeyedSubscript:");
}

id objc_msgSend_optIn3rdParty(void *a1, const char *a2, ...)
{
  return _[a1 optIn3rdParty];
}

id objc_msgSend_optInApple(void *a1, const char *a2, ...)
{
  return _[a1 optInApple];
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return _[a1 path];
}

id objc_msgSend_pathCATasking(void *a1, const char *a2, ...)
{
  return _[a1 pathCATasking];
}

id objc_msgSend_powerOn(void *a1, const char *a2, ...)
{
  return _[a1 powerOn];
}

id objc_msgSend_predicateForEventsIntersectingDateRangeFrom_to_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForEventsIntersectingDateRangeFrom:to:");
}

id objc_msgSend_productName(void *a1, const char *a2, ...)
{
  return _[a1 productName];
}

id objc_msgSend_productVersion(void *a1, const char *a2, ...)
{
  return _[a1 productVersion];
}

id objc_msgSend_prohibitNetworkAgentsWithDomain_type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prohibitNetworkAgentsWithDomain:type:");
}

id objc_msgSend_publisherWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "publisherWithOptions:");
}

id objc_msgSend_raise_format_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "raise:format:");
}

id objc_msgSend_reason(void *a1, const char *a2, ...)
{
  return _[a1 reason];
}

id objc_msgSend_recordEvent_with_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordEvent:with:");
}

id objc_msgSend_refresh(void *a1, const char *a2, ...)
{
  return _[a1 refresh];
}

id objc_msgSend_refreshTrialState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshTrialState:");
}

id objc_msgSend_refreshWiFiLQM(void *a1, const char *a2, ...)
{
  return _[a1 refreshWiFiLQM];
}

id objc_msgSend_refreshWiFiLQM_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshWiFiLQM:");
}

id objc_msgSend_registerForCWEventTypes(void *a1, const char *a2, ...)
{
  return _[a1 registerForCWEventTypes];
}

id objc_msgSend_registerForNetworkChanges(void *a1, const char *a2, ...)
{
  return _[a1 registerForNetworkChanges];
}

id objc_msgSend_registerForSCDynamicStoreLQMUpdates(void *a1, const char *a2, ...)
{
  return _[a1 registerForSCDynamicStoreLQMUpdates];
}

id objc_msgSend_removeAllObjects(void *a1, const char *a2, ...)
{
  return _[a1 removeAllObjects];
}

id objc_msgSend_removeObjectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectForKey:");
}

id objc_msgSend_removeUpdateHandlerForToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeUpdateHandlerForToken:");
}

id objc_msgSend_retrieveRadioTech(void *a1, const char *a2, ...)
{
  return _[a1 retrieveRadioTech];
}

id objc_msgSend_retrieveWiFILQM_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "retrieveWiFILQM:");
}

id objc_msgSend_rolloutId(void *a1, const char *a2, ...)
{
  return _[a1 rolloutId];
}

id objc_msgSend_running(void *a1, const char *a2, ...)
{
  return _[a1 running];
}

id objc_msgSend_sendMessageWithCategory_type_payload_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMessageWithCategory:type:payload:error:");
}

id objc_msgSend_setBool_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBool:forKey:");
}

id objc_msgSend_setDay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDay:");
}

id objc_msgSend_setDouble_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDouble:forKey:");
}

id objc_msgSend_setEventHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEventHandler:");
}

id objc_msgSend_setEventStreams_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEventStreams:");
}

id objc_msgSend_setMaxConcurrentOperationCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxConcurrentOperationCount:");
}

id objc_msgSend_setName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setName:");
}

id objc_msgSend_setObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKey:");
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKeyedSubscript:");
}

id objc_msgSend_setPredicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPredicate:");
}

id objc_msgSend_setSortDescriptors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSortDescriptors:");
}

id objc_msgSend_setUnderlyingQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUnderlyingQueue:");
}

id objc_msgSend_setWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithObjects:");
}

id objc_msgSend_sharedInstance(void *a1, const char *a2, ...)
{
  return _[a1 sharedInstance];
}

id objc_msgSend_shortVersionString(void *a1, const char *a2, ...)
{
  return _[a1 shortVersionString];
}

id objc_msgSend_sinkWithCompletion_receiveInput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sinkWithCompletion:receiveInput:");
}

id objc_msgSend_standardUserDefaults(void *a1, const char *a2, ...)
{
  return _[a1 standardUserDefaults];
}

id objc_msgSend_startActivityUpdatesToQueue_withHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startActivityUpdatesToQueue:withHandler:");
}

id objc_msgSend_startConfigurationWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startConfigurationWithCompletionHandler:");
}

id objc_msgSend_startDate(void *a1, const char *a2, ...)
{
  return _[a1 startDate];
}

id objc_msgSend_startDateSortDescriptorAscending_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startDateSortDescriptorAscending:");
}

id objc_msgSend_startMonitoringEventType_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startMonitoringEventType:error:");
}

id objc_msgSend_starting(void *a1, const char *a2, ...)
{
  return _[a1 starting];
}

id objc_msgSend_state(void *a1, const char *a2, ...)
{
  return _[a1 state];
}

id objc_msgSend_stationary(void *a1, const char *a2, ...)
{
  return _[a1 stationary];
}

id objc_msgSend_stopActivityUpdates(void *a1, const char *a2, ...)
{
  return _[a1 stopActivityUpdates];
}

id objc_msgSend_stopMonitoringEventType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopMonitoringEventType:");
}

id objc_msgSend_stringForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringForKey:");
}

id objc_msgSend_stringValue(void *a1, const char *a2, ...)
{
  return _[a1 stringValue];
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_stringWithUTF8String_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithUTF8String:");
}

id objc_msgSend_subscribeToTrialNamespace_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subscribeToTrialNamespace:");
}

id objc_msgSend_subscribeToUserDataChangesWithArguments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subscribeToUserDataChangesWithArguments:");
}

id objc_msgSend_subtype(void *a1, const char *a2, ...)
{
  return _[a1 subtype];
}

id objc_msgSend_systemLocale(void *a1, const char *a2, ...)
{
  return _[a1 systemLocale];
}

id objc_msgSend_targetAudience(void *a1, const char *a2, ...)
{
  return _[a1 targetAudience];
}

id objc_msgSend_timeIntervalSince1970(void *a1, const char *a2, ...)
{
  return _[a1 timeIntervalSince1970];
}

id objc_msgSend_timeIntervalSinceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeIntervalSinceDate:");
}

id objc_msgSend_timestamp(void *a1, const char *a2, ...)
{
  return _[a1 timestamp];
}

id objc_msgSend_topCategory1(void *a1, const char *a2, ...)
{
  return _[a1 topCategory1];
}

id objc_msgSend_topCategory2(void *a1, const char *a2, ...)
{
  return _[a1 topCategory2];
}

id objc_msgSend_topCategory3(void *a1, const char *a2, ...)
{
  return _[a1 topCategory3];
}

id objc_msgSend_treatmentId(void *a1, const char *a2, ...)
{
  return _[a1 treatmentId];
}

id objc_msgSend_type(void *a1, const char *a2, ...)
{
  return _[a1 type];
}

id objc_msgSend_unknown(void *a1, const char *a2, ...)
{
  return _[a1 unknown];
}

id objc_msgSend_unsignedLongLongValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedLongLongValue];
}

id objc_msgSend_unsubscribeAllUpdateHandlers(void *a1, const char *a2, ...)
{
  return _[a1 unsubscribeAllUpdateHandlers];
}

id objc_msgSend_updateDelegateWithInitialStates(void *a1, const char *a2, ...)
{
  return _[a1 updateDelegateWithInitialStates];
}

id objc_msgSend_updatePrimaryNetworkInterfaceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatePrimaryNetworkInterfaceType:");
}

id objc_msgSend_valueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForKey:");
}

id objc_msgSend_walking(void *a1, const char *a2, ...)
{
  return _[a1 walking];
}

id objc_msgSend_wiFiActiveAndUsingPersonalHotspot(void *a1, const char *a2, ...)
{
  return _[a1 wiFiActiveAndUsingPersonalHotspot];
}