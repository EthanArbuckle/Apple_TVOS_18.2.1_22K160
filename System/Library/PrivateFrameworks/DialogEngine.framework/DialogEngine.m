uint64_t sub_100001800(uint64_t result)
{
  *(_WORD *)result = 11265;
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = 0LL;
  *(void *)(result + 8) = 0LL;
  return result;
}

uint64_t sub_100001814(uint64_t *a1, __int128 **a2)
{
  v3 = a1 + 1;
  unint64_t v4 = a1[2];
  if (v4 >= a1[3])
  {
    uint64_t result = sub_100002474(v3, a2);
  }

  else
  {
    sub_100002418((uint64_t)v3, a2);
    uint64_t result = v4 + 24;
  }

  a1[2] = result;
  return result;
}

void (__cdecl ***sub_100001854( void (__cdecl ***a1)(std::ifstream *__hidden this), uint64_t *a2, int a3))(std::ifstream *__hidden this)
{
  v6 = a1 + 2;
  *a1 = v7;
  *(void *)((char *)*(v7 - 3) + (void)a1) = v8;
  a1[1] = 0LL;
  v9 = (std::ios_base *)((char *)*(*a1 - 3) + (void)a1);
  std::ios_base::init(v9, a1 + 2);
  v9[1].__vftable = 0LL;
  v9[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf(v6);
  else {
    v10 = (uint64_t *)*a2;
  }
  if (!std::filebuf::open(v6, v10, a3 | 8u)) {
    std::ios_base::clear( (std::ios_base *)((char *)*(*a1 - 3) + (void)a1),  *(_DWORD *)((char *)*(*a1 - 3) + (void)a1 + 32) | 4);
  }
  return a1;
}

void sub_100001934(_Unwind_Exception *a1)
{
}

void (__cdecl ***sub_10000196C( void (__cdecl ***a1)(std::basic_stringstream<char> *__hidden this), const std::string *a2, int a3))(std::basic_stringstream<char> *__hidden this)
{
  v5 = a1 + 2;
  uint64_t v6 = (uint64_t)(a1 + 3);
  *a1 = v7;
  *(void *)((char *)*(v7 - 3) + (void)a1) = v8;
  a1[1] = 0LL;
  v9 = (std::ios_base *)((char *)*(*a1 - 3) + (void)a1);
  std::ios_base::init(v9, a1 + 3);
  v9[1].__vftable = 0LL;
  v9[1].__fmtflags_ = -1;
  a1[2] = v10;
  *(void *)((char *)*(v10 - 3) + (void)v5) = v11;
  *a1 = v12;
  sub_100002A90(v6, a2, a3);
  return a1;
}

void sub_100001A64(_Unwind_Exception *a1)
{
}

void *sub_100001A8C(void *a1, std::string *a2, unsigned __int8 a3)
{
  if (!v11) {
    return a1;
  }
  if ((char)a2->__r_.__value_.__s.__size_ < 0)
  {
    *a2->__r_.__value_.__l.__data_ = 0;
    a2->__r_.__value_.__l.__size_ = 0LL;
  }

  else
  {
    a2->__r_.__value_.__s.__data_[0] = 0;
    a2->__r_.__value_.__s.__size_ = 0;
  }

  uint64_t v6 = 0LL;
  while (1)
  {
    v7 = *(void **)((char *)a1 + *(void *)(*a1 - 24LL) + 40);
    v8 = (_BYTE *)v7[3];
    if (v8 != (_BYTE *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }

    LODWORD(v7) = (*(uint64_t (**)(void *))(*v7 + 80LL))(v7);
    if ((_DWORD)v7 == -1) {
      break;
    }
LABEL_9:
    if (v7 == a3)
    {
      int v9 = 0;
      goto LABEL_17;
    }

    std::string::push_back(a2, (std::string::value_type)v7);
    --v6;
    if ((char)a2->__r_.__value_.__s.__size_ < 0 && a2->__r_.__value_.__l.__size_ == 0x7FFFFFFFFFFFFFF7LL)
    {
      int v9 = 4;
      goto LABEL_17;
    }
  }

  if (v6) {
    int v9 = 2;
  }
  else {
    int v9 = 6;
  }
LABEL_17:
  std::ios_base::clear( (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24LL)),  *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24LL) + 32) | v9);
  return a1;
}

void sub_100001BB8(void *a1)
{
  uint64_t v2 = *v1;
  *(_DWORD *)((char *)v1 + *(void *)(*v1 - 24LL) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(void *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x100001B84LL);
  }

  __cxa_rethrow();
}

void sub_100001BFC(_Unwind_Exception *a1)
{
}

uint64_t sub_100001C10(uint64_t a1)
{
  uint64_t v4 = a1 + 24;
  *(void *)(a1 + 16) = v3;
  std::streambuf::~streambuf(v4);
  std::ios::~ios(a1 + 128);
  return a1;
}

void *sub_100001C98(void *a1)
{
  return a1;
}

BOOL sub_100001CF0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v26;
  if (v26)
  {
    uint64_t v20 = v26;
    uint64_t v4 = *(void *)(a1 + 8);
    if (*(void *)(a1 + 16) != v4)
    {
      unint64_t v5 = 0LL;
      while (1)
      {
        v7 = (uint64_t *)(v4 + 24 * v5);
        uint64_t v6 = *v7;
        if (v7[1] != *v7) {
          break;
        }
LABEL_28:
        sub_100002F60(&v24, (uint64_t)"\n", 1LL);
        ++v5;
        uint64_t v4 = *(void *)(a1 + 8);
        if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 16) - v4) >> 3) <= v5) {
          goto LABEL_29;
        }
      }

      uint64_t v8 = 0LL;
      unint64_t v9 = 0LL;
      while (1)
      {
        v10 = (__int128 *)(v6 + v8);
        if (*((char *)v10 + 23) < 0)
        {
          sub_10000231C(__dst, *(void **)v10, *((void *)v10 + 1));
        }

        else
        {
          __int128 v11 = *v10;
          *(void *)&__dst[16] = *((void *)v10 + 2);
          *(_OWORD *)__dst = v11;
        }

        sub_1000021BC(&__p, ",");
        int v12 = siri::dialogengine::StringContains(__dst, &__p);
        int v13 = v12;
        if ((char)__p.__r_.__value_.__s.__size_ < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if (v13)
          {
LABEL_13:
            std::operator+<char>(&__p, "", __dst);
            v14 = std::string::append(&__p, "\u200E");
            std::string::size_type v15 = v14->__r_.__value_.__r.__words[0];
            v23[0] = v14->__r_.__value_.__l.__size_;
            *(void *)((char *)v23 + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
            unsigned __int8 size = v14->__r_.__value_.__s.__size_;
            v14->__r_.__value_.__l.__size_ = 0LL;
            v14->__r_.__value_.__l.__cap_ = 0LL;
            v14->__r_.__value_.__r.__words[0] = 0LL;
            if ((__dst[23] & 0x80000000) != 0) {
              operator delete(*(void **)__dst);
            }
            *(void *)__dst = v15;
            *(void *)&__dst[8] = v23[0];
            *(void *)&__dst[15] = *(void *)((char *)v23 + 7);
            __dst[23] = size;
          }
        }

        else if (v12)
        {
          goto LABEL_13;
        }

        if (__dst[23] >= 0) {
          v17 = __dst;
        }
        else {
          v17 = *(_BYTE **)__dst;
        }
        if (__dst[23] >= 0) {
          uint64_t v18 = __dst[23];
        }
        else {
          uint64_t v18 = *(void *)&__dst[8];
        }
        sub_100002F60(&v24, (uint64_t)v17, v18);
        if (v9 != -1 {
                 - 0x5555555555555555LL
        }
        if ((__dst[23] & 0x80000000) != 0) {
          operator delete(*(void **)__dst);
        }
        ++v9;
        uint64_t v6 = *(void *)(*(void *)(a1 + 8) + 24 * v5);
        v8 += 24LL;
        if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(*(void *)(a1 + 8) + 24 * v5 + 8) - v6) >> 3) <= v9) {
          goto LABEL_28;
        }
      }
    }

LABEL_29:
    uint64_t v3 = v20;
    if (!std::filebuf::close(v25)) {
      std::ios_base::clear((std::ios_base *)&v25[(void)*(v24 - 3) - 8], *(_DWORD *)&v25[(void)*(v24 - 3) + 24] | 4);
    }
  }

  else
  {
    puts("Could not open file!");
  }

  std::filebuf::~filebuf(v25);
  std::ios::~ios(&v27);
  return v3 != 0;
}

    *a3 = v17;
    return v5;
  }

  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }

  __int128 v11 = a2[1];
  if (v11)
  {
    int v12 = (void *)a2[1];
    do
    {
      a4 = v12;
      int v12 = (void *)*v12;
    }

    while (v12);
  }

  else
  {
    v19 = a2;
    do
    {
      a4 = (void *)v19[2];
      v14 = *a4 == (void)v19;
      v19 = a4;
    }

    while (!v14);
  }

  if (a4 != v5 && v6 >= a4[4])
  {
    uint64_t v20 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = v20;
          v22 = v20[4];
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = (void *)*v21;
          unint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }

        if (v22 >= v6) {
          break;
        }
        unint64_t v5 = v21 + 1;
        uint64_t v20 = (void *)v21[1];
      }

      while (v20);
    }

    else
    {
      v21 = a1 + 1;
    }

void sub_100001FE0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
}

void (__cdecl ***sub_100002040( void (__cdecl ***a1)(std::ofstream *__hidden this), uint64_t *a2, int a3))(std::ofstream *__hidden this)
{
  uint64_t v6 = a1 + 1;
  *a1 = v7;
  *(void *)((char *)*(v7 - 3) + (void)a1) = v8;
  unint64_t v9 = (std::ios_base *)((char *)*(*a1 - 3) + (void)a1);
  std::ios_base::init(v9, a1 + 1);
  v9[1].__vftable = 0LL;
  v9[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf(v6);
  else {
    v10 = (uint64_t *)*a2;
  }
  if (!std::filebuf::open(v6, v10, a3 | 0x10u)) {
    std::ios_base::clear( (std::ios_base *)((char *)*(*a1 - 3) + (void)a1),  *(_DWORD *)((char *)*(*a1 - 3) + (void)a1 + 32) | 4);
  }
  return a1;
}

void sub_10000211C(_Unwind_Exception *a1)
{
}

void *sub_100002154(void *a1)
{
  return a1;
}

void sub_1000021AC(void *a1)
{
}

void *sub_1000021BC(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8LL) {
    sub_10000226C();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000LL;
    *a1 = v6;
  }

  else
  {
    *((_BYTE *)a1 + 23) = v4;
    uint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }

  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void sub_10000226C()
{
}

void sub_100002280(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_1000022D0(exception, a1);
}

void sub_1000022BC(_Unwind_Exception *a1)
{
}

std::logic_error *sub_1000022D0(std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  return result;
}

void sub_1000022F4()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

void *sub_10000231C(_BYTE *__dst, void *__src, unint64_t a3)
{
  size_t v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8LL) {
      sub_10000226C();
    }
    uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v6 = a3 | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000LL;
    void *v5 = v8;
    size_t v5 = v8;
  }

  else
  {
    __dst[23] = a3;
  }

  return memmove(v5, __src, a3 + 1);
}

void sub_1000023A8(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    size_t v4 = (void **)v1[1];
    size_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        sub_1000027F4(&v6);
      }

      while (v4 != v2);
      size_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }
}

char *sub_100002418(uint64_t a1, __int128 **a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)uint64_t v3 = 0LL;
  *(void *)(v3 + std::ostream::~ostream(v1, v2 + 8) = 0LL;
  *(void *)(v3 + 16) = 0LL;
  uint64_t result = sub_100002594((char *)v3, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *(void *)(a1 + std::ostream::~ostream(v1, v2 + 8) = v3 + 24;
  return result;
}

void sub_10000246C(_Unwind_Exception *a1)
{
  *(void *)(v1 + std::ostream::~ostream(v1, v2 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100002474(uint64_t *a1, __int128 **a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_100002668();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555LL) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  v17 = a1 + 2;
  if (v9) {
    v10 = (char *)sub_10000267C(v7, v9);
  }
  else {
    v10 = 0LL;
  }
  __int128 v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  std::string::size_type v15 = v11;
  v16 = &v10[24 * v9];
  *(void *)__int128 v11 = 0LL;
  *((void *)v11 + 1) = 0LL;
  *((void *)v11 + 2) = 0LL;
  sub_100002594(v11, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  v15 += 24;
  sub_100002880(a1, v14);
  uint64_t v12 = a1[1];
  sub_100002A10(v14);
  return v12;
}

void sub_100002580(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

char *sub_100002594(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_100002618(result, a4);
    uint64_t result = sub_1000026C0((uint64_t)(v6 + 16), a2, a3, *((char **)v6 + 1));
    *((void *)v6 + 1) = result;
  }

  return result;
}

void sub_1000025F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + std::ostream::~ostream(v1, v2 + 8) = v10;
  sub_1000027F4(&a9);
  _Unwind_Resume(a1);
}

char *sub_100002618(void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_100002668();
  }
  uint64_t result = (char *)sub_10000267C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void sub_100002668()
{
}

void *sub_10000267C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_1000022F4();
  }
  return operator new(24 * a2);
}

char *sub_1000026C0(uint64_t a1, __int128 *a2, __int128 *a3, char *__dst)
{
  uint64_t v4 = __dst;
  __int128 v11 = __dst;
  uint64_t v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_10000231C(v4, *(void **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }

      else
      {
        __int128 v7 = *v6;
        *((void *)v4 + 2) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v4 = v7;
      }

      uint64_t v6 = (__int128 *)((char *)v6 + 24);
      v4 += 24;
      uint64_t v12 = v4;
    }

    while (v6 != a3);
  }

  char v10 = 1;
  sub_10000277C((uint64_t)v9);
  return v4;
}

void sub_100002768( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10000277C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_1000027B0(a1);
  }
  return a1;
}

void sub_1000027B0(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 24LL;
  }

void sub_1000027F4(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_100002834((uint64_t *)v2);
    operator delete(**a1);
  }

void sub_100002834(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24LL)
  {
  }

  a1[1] = v2;
}

uint64_t sub_100002880(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1000028F4((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1000028F4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v14 = a6;
  *((void *)&v14 + 1) = a7;
  __int128 v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }

  else
  {
    do
    {
      *(void *)(v7 - 24) = 0LL;
      *(void *)(v7 - 16) = 0LL;
      *(void *)(v7 - std::ostream::~ostream(v1, v2 + 8) = 0LL;
      __int128 v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - std::ostream::~ostream(v1, v2 + 8) = a3[2];
      *a3 = 0LL;
      a3[1] = 0LL;
      a3[2] = 0LL;
      uint64_t v7 = *((void *)&v14 + 1) - 24LL;
      *((void *)&v14 + 1) -= 24LL;
    }

    while (a3 != a5);
    uint64_t v9 = v14;
  }

  char v12 = 1;
  sub_100002994((uint64_t)v11);
  return v9;
}

uint64_t sub_100002994(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_1000029C8(a1);
  }
  return a1;
}

void sub_1000029C8(uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8LL);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8LL);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    sub_1000027F4(&v3);
    v1 += 3;
  }

void **sub_100002A10(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_100002A40(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    sub_1000027F4(&v5);
  }

uint64_t sub_100002A90(uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6 = std::streambuf::basic_streambuf(a1);
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  sub_100002B20(a1);
  return a1;
}

void sub_100002AFC(_Unwind_Exception *a1)
{
}

void sub_100002B20(uint64_t a1)
{
  *(void *)(a1 + 8std::ostream::~ostream(v1, v2 + 8) = 0LL;
  uint64_t v2 = (std::string *)(a1 + 64);
  char v3 = *(_BYTE *)(a1 + 87);
  if (v3 < 0)
  {
    uint64_t v4 = *(std::string **)(a1 + 64);
    unint64_t v5 = *(void *)(a1 + 72);
  }

  else
  {
    uint64_t v4 = v2;
    unint64_t v5 = *(unsigned __int8 *)(a1 + 87);
  }

  int v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(void *)(a1 + 8std::ostream::~ostream(v1, v2 + 8) = (char *)v4 + v5;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = (char *)v4 + v5;
  }

  if ((v6 & 0x10) != 0)
  {
    *(void *)(a1 + 8std::ostream::~ostream(v1, v2 + 8) = (char *)v4 + v5;
    std::string::size_type v7 = v3 < 0 ? (*(void *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22LL;
    std::string::resize(v2, v7, 0);
    uint64_t v8 = *(char *)(a1 + 87) < 0 ? *(void *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(void *)(a1 + 40) = v4;
    *(void *)(a1 + 4std::ostream::~ostream(v1, v2 + 8) = v4;
    *(void *)(a1 + 56) = (char *)v4 + v8;
    if ((*(_BYTE *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        uint64_t v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        unint64_t v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        uint64_t v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        unint64_t v5 = v5 - v10 - 0x7FFFFFFF;
        *(void *)(a1 + 4std::ostream::~ostream(v1, v2 + 8) = v4;
      }

      if (v5) {
        *(void *)(a1 + 4std::ostream::~ostream(v1, v2 + 8) = (char *)v4 + v5;
      }
    }
  }

uint64_t sub_100002C30(uint64_t *a1, __int128 *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_100002668();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555LL) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v18 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)sub_10000267C(v7, v9);
  }
  else {
    unint64_t v10 = 0LL;
  }
  __int128 v11 = &v10[24 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v16 = v11;
  v17 = &v10[24 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    sub_10000231C(v11, *(void **)a2, *((void *)a2 + 1));
    __int128 v11 = v16;
  }

  else
  {
    __int128 v12 = *a2;
    *((void *)v11 + 2) = *((void *)a2 + 2);
    *(_OWORD *)__int128 v11 = v12;
  }

  v16 = v11 + 24;
  sub_100002D50(a1, v15);
  uint64_t v13 = a1[1];
  sub_100002ED8((uint64_t)v15);
  return v13;
}

void sub_100002D3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100002D50(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100002DC4((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100002DC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v15 = a6;
  *((void *)&v15 + 1) = a7;
  __int128 v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      __int128 v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - std::ostream::~ostream(v1, v2 + 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24LL;
      *(void *)(a3 - 16) = 0LL;
      *(void *)(a3 - std::ostream::~ostream(v1, v2 + 8) = 0LL;
      *(void *)(a3 - 24) = 0LL;
      v7 -= 24LL;
      a3 -= 24LL;
    }

    while (a3 != a5);
    *((void *)&v15 + 1) = v9;
  }

  char v13 = 1;
  sub_100002E60((uint64_t)v12);
  return a6;
}

uint64_t sub_100002E60(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_100002E94(a1);
  }
  return a1;
}

void sub_100002E94(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8LL);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8LL);
  while (v1 != v2)
  {
    v1 += 24LL;
  }

uint64_t sub_100002ED8(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100002F0C(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        uint64_t v5 = *(void ***)(a1 + 16);
      }

      uint64_t v2 = v5;
    }

    while (v5 != a2);
  }

void *sub_100002F60(void *a1, uint64_t a2, uint64_t a3)
{
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24LL)));
      __int128 v10 = std::locale::use_facet(&v14, &std::ctype<char>::id);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32LL);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }

    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!sub_1000030C4(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear( (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24LL)),  *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24LL) + 32) | 5);
    }
  }

  std::ostream::sentry::~sentry(v13);
  return a1;
}

void sub_100003068( void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
}

void sub_1000030B0(_Unwind_Exception *a1)
{
}

uint64_t sub_1000030C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0LL;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (v12 >= 1)
    {
      sub_100003200(__p, v12, __c);
      char v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96LL))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0LL;
      }
    }

    uint64_t v15 = a4 - a3;
    else {
      return 0LL;
    }
  }

  return v6;
}

void sub_1000031E4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100003200(void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8LL) {
    sub_10000226C();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000LL;
    *__b = v6;
  }

  else
  {
    *((_BYTE *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }

  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

void sub_1000032A8(uint64_t a1)
{
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_10000331C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100003350(void *a1, uint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3) <= 2)
  {
    sub_100038638(a2);
    sub_1000021BC( &v71,  "\n <EXECUTABLE> <COMMAND> --templateDir <dir> [--outputDir <dir>] [--locale <locale>] [--catId <id>]\n [--params <params-json>] [--json] [--expandOpts] [--evaluateConditions] [--getAllSchemasAndGlobalParams] \n \n If --templateDir and --catId are specified, then expand the specified CAT file.\n \n If --json is provided, output a JSON string representing all expanded dialog(s) for the specified\n CAT(s); if not, write outputs to a CSV file (consisting of the CAT id and\n"
      "      locale - e.g. example#calendar#en.csv) in the specified directory.\n"
      "\n"
      "      If --expandOpts is provided, all optional tags will be expanded; i.e., output will be created that\n"
      "      includes optional dialog as well output that excludes it.\n"
      "\n"
      "      If --evaluateConditions is provided, conditions will be evaluated, assuming that input parameters\n"
      "      are provided.\n"
      "\n"
      "      --templateDir <dir>             Path to the template directory\n"
      "      --outputDir <dir>               Path to CSV output file\n"
      "      --locale <locale>               The locale to expand (e.g. en_US)\n"
      "      --catId <id>                    The CAT ID to expand (e.g. example#hello)\n"
      "      --json                          When present, output will be written to stdout as a JSON string, rather\n"
      "                                      than to a CSV file\n"
      "      --expandOpts                    When present, expand all <opt> tags, producing output that includes as\n"
      "                                      well as excludes optional dialog.\n"
      "      --evaluateConditions            When present, evaluate conditional logic in CAT file; possible only\n"
      "                                      if --params is present\n"
      "      --richResult                    When present, return rich expansion, which includes metadata for every expan"
      "sion.\n"
      "      --params <params-json>          JSON string containing parameters for the CAT.\n"
      "                                      Example syntax: --params '{ myStringParam: Hello, myBoolParam: t"
      "rue }'\n"
      "      --getAllSchemasAndGlobalParams  Output all schema files present in the provided templateDir as well as all s"
      "chema files associated\n"
      "                                      with global params.\n"
      "\n");
    sub_1000021BC(v69, "expand");
    sub_1000388C0((uint64_t)a1, (uint64_t)v69, (uint64_t)&v71);
    if (v70 < 0) {
      operator delete(v69[0]);
    }
    if (v72 < 0) {
      operator delete(v71.__locale_);
    }
    return 0LL;
  }

  sub_1000021BC(v69, "--templateDir");
  siri::dialogengine::GetOption(&v71, a1, v69);
  siri::dialogengine::ExpandPath(v59, &v71);
  if (v72 < 0) {
    operator delete(v71.__locale_);
  }
  if (v70 < 0) {
    operator delete(v69[0]);
  }
  sub_1000021BC(&v71, "--catId");
  siri::dialogengine::GetOption(v57, a1, &v71);
  if (v72 < 0) {
    operator delete(v71.__locale_);
  }
  sub_1000021BC(&v71, "--locale");
  siri::dialogengine::GetOption(v55, a1, &v71);
  if (v72 < 0) {
    operator delete(v71.__locale_);
  }
  sub_1000021BC(&v71, "--outputDir");
  siri::dialogengine::GetOption(v53, a1, &v71);
  if (v72 < 0) {
    operator delete(v71.__locale_);
  }
  sub_1000021BC(&v71, "--params");
  siri::dialogengine::GetOption(v51, a1, &v71);
  if (v72 < 0) {
    operator delete(v71.__locale_);
  }
  sub_1000021BC(&v71, "--json");
  int v4 = siri::dialogengine::OptionExists(a1, &v71);
  if (v72 < 0) {
    operator delete(v71.__locale_);
  }
  sub_1000021BC(&v71, "--expandOpts");
  uint64_t v5 = siri::dialogengine::OptionExists(a1, &v71);
  if (v72 < 0) {
    operator delete(v71.__locale_);
  }
  sub_1000021BC(&v71, "--evaluateConditions");
  uint64_t v6 = siri::dialogengine::OptionExists(a1, &v71);
  if (v72 < 0) {
    operator delete(v71.__locale_);
  }
  sub_1000021BC(&v71, "--richResult");
  unsigned __int8 v7 = siri::dialogengine::OptionExists(a1, &v71);
  if (v72 < 0) {
    operator delete(v71.__locale_);
  }
  sub_1000021BC(&v71, "--getAllSchemasAndGlobalParams");
  int v8 = siri::dialogengine::OptionExists(a1, &v71);
  if (v72 < 0) {
    operator delete(v71.__locale_);
  }
  unint64_t v9 = v56;
  if ((v56 & 0x80u) != 0) {
    unint64_t v9 = (unint64_t)v55[1];
  }
  if (!v9)
  {
    uint64_t v27 = sub_100002F60(&std::cout, (uint64_t)"Error: no ", 10LL);
    v28 = sub_100002F60(v27, (uint64_t)"--locale", 8LL);
    v29 = sub_100002F60(v28, (uint64_t)" option specified", 17LL);
    std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(void *)(*v29 - 24LL)));
    v30 = std::locale::use_facet(&v71, &std::ctype<char>::id);
    uint64_t v31 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10LL);
    std::locale::~locale(&v71);
    std::ostream::put(v29, v31);
LABEL_80:
    std::ostream::flush(v29);
    goto LABEL_81;
  }

  unint64_t v10 = v60;
  if ((v60 & 0x80u) != 0) {
    unint64_t v10 = (unint64_t)v59[1];
  }
  if (!v10)
  {
    v32 = sub_100002F60(&std::cout, (uint64_t)"Error: no ", 10LL);
    v33 = sub_100002F60(v32, (uint64_t)"--templateDir", 13LL);
    v29 = sub_100002F60(v33, (uint64_t)" option specified", 17LL);
    std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(void *)(*v29 - 24LL)));
    v34 = std::locale::use_facet(&v71, &std::ctype<char>::id);
    uint64_t v35 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 10LL);
    std::locale::~locale(&v71);
    std::ostream::put(v29, v35);
    goto LABEL_80;
  }

  unint64_t v11 = v58;
  if ((v58 & 0x80u) != 0) {
    unint64_t v11 = (unint64_t)v57[1];
  }
  if (!v11)
  {
    v36 = sub_100002F60(&std::cout, (uint64_t)"Error: no ", 10LL);
    v37 = sub_100002F60(v36, (uint64_t)"--catId", 7LL);
    v29 = sub_100002F60(v37, (uint64_t)" option specified", 17LL);
    std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(void *)(*v29 - 24LL)));
    v38 = std::locale::use_facet(&v71, &std::ctype<char>::id);
    uint64_t v39 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v38->__vftable[2].~facet_0)(v38, 10LL);
    std::locale::~locale(&v71);
    std::ostream::put(v29, v39);
    goto LABEL_80;
  }

  if (v8)
  {
    siri::dialogengine::CreateJSONStringVal(v65, v59);
    sub_1000021BC(&v71, "templateDir");
    __int128 v73 = *(_OWORD *)v65;
    v65[0] = 0LL;
    v65[1] = 0LL;
    siri::dialogengine::CreateJSONStringVal(v63, v57);
    sub_1000021BC(v74, "catId");
    __int128 v75 = *(_OWORD *)v63;
    v63[0] = 0LL;
    v63[1] = 0LL;
    siri::dialogengine::CreateJSONStringVal(__p, v55);
    sub_1000021BC(v76, "locale");
    __int128 v77 = *(_OWORD *)__p;
    __p[0] = 0LL;
    __p[1] = 0LL;
    sub_100005298((uint64_t)v69, (const void **)&v71.__locale_, 3LL);
    for (uint64_t i = 0LL; i != -15; i -= 5LL)
    {
      sub_1000059D0((uint64_t)&v77 + i * 8);
      if (SHIBYTE(v76[i + 2]) < 0) {
        operator delete((void *)v76[i]);
      }
    }

    char v13 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      uint64_t v14 = (unint64_t *)((char *)__p[1] + 8);
      do
        unint64_t v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }

    v16 = (std::__shared_weak_count *)v63[1];
    if (v63[1])
    {
      v17 = (unint64_t *)((char *)v63[1] + 8);
      do
        unint64_t v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }

    v19 = (std::__shared_weak_count *)v65[1];
    if (v65[1])
    {
      uint64_t v20 = (unint64_t *)((char *)v65[1] + 8);
      do
        unint64_t v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }

    siri::dialogengine::ConstructJSONString(&v71, v69);
    sub_1000021BC(v65, (char *)&unk_10006A022);
    sub_1000021BC(v63, (char *)&unk_10006A022);
    sub_1000021BC(__p, (char *)&unk_10006A022);
    siri::dialogengine::PrepareRequestFromJson(&v67, &v71, v65, v63, __p);
    if (v62 < 0) {
      operator delete(__p[0]);
    }
    if (v64 < 0) {
      operator delete(v63[0]);
    }
    if (v66 < 0) {
      operator delete(v65[0]);
    }
    siri::dialogengine::GetAllSchemasAndGlobalParams(v67, v22);
    siri::dialogengine::ConstructJSONString(v63, v65);
    if (v64 >= 0) {
      v23 = v63;
    }
    else {
      v23 = (void **)v63[0];
    }
    puts((const char *)v23);
    if (v64 < 0) {
      operator delete(v63[0]);
    }
    sub_100005988((uint64_t)v65, (void *)v65[1]);
    v24 = v68;
    if (v68)
    {
      p_shared_owners = (unint64_t *)&v68->__shared_owners_;
      do
        unint64_t v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }

    if (v72 < 0) {
      operator delete(v71.__locale_);
    }
    sub_100005988((uint64_t)v69, (void *)v69[1]);
    uint64_t v3 = 1LL;
    goto LABEL_82;
  }

  if ((v4 & 1) != 0) {
    goto LABEL_100;
  }
  unint64_t v41 = v54;
  if ((v54 & 0x80u) != 0) {
    unint64_t v41 = (unint64_t)v53[1];
  }
  if (v41)
  {
LABEL_100:
    if (!(_DWORD)v6) {
      goto LABEL_101;
    }
    unint64_t v42 = v52;
    if ((v52 & 0x80u) != 0) {
      unint64_t v42 = (unint64_t)v51[1];
    }
    if (v42)
    {
LABEL_101:
      uint64_t v3 = sub_100003F5C((uint64_t)v59, (uint64_t)v51, (uint64_t)v57, (uint64_t)v55, (uint64_t)v53, v4, v6, v5, v7);
      goto LABEL_82;
    }

    v47 = sub_100002F60(&std::cout, (uint64_t)"Error: ", 7LL);
    v48 = sub_100002F60(v47, (uint64_t)"--evaluateConditions", 20LL);
    v49 = sub_100002F60(v48, (uint64_t)" specified, but ", 16LL);
    v44 = sub_100002F60(v49, (uint64_t)"--params", 8LL);
    v45 = " option unspecified";
    uint64_t v46 = 19LL;
  }

  else
  {
    v43 = sub_100002F60(&std::cout, (uint64_t)"Error: no ", 10LL);
    v44 = sub_100002F60(v43, (uint64_t)"--outputDir", 11LL);
    v45 = " option specified";
    uint64_t v46 = 17LL;
  }

  v50 = sub_100002F60(v44, (uint64_t)v45, v46);
  sub_100003ECC(v50);
LABEL_81:
  uint64_t v3 = 0LL;
LABEL_82:
  return v3;
}

void sub_100003C1C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33, void *a34, uint64_t a35, int a36, __int16 a37, char a38, char a39, void *a40, uint64_t a41, int a42, __int16 a43, char a44, char a45, uint64_t a46, void *a47, uint64_t a48, int a49, __int16 a50,char a51,char a52,uint64_t a53,void *a54,void *a55,int a56,__int16 a57,char a58,char a59,char a60)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  _Unwind_Resume(a1);
}

void *sub_100003ECC(void *a1)
{
  uint64_t v2 = std::locale::use_facet(&v5, &std::ctype<char>::id);
  uint64_t v3 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10LL);
  std::locale::~locale(&v5);
  std::ostream::put(a1, v3);
  std::ostream::flush(a1);
  return a1;
}

void sub_100003F48( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_100003F5C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  v139 = 0LL;
  v140 = 0LL;
  v138.__locale_ = (std::locale::__imp *)&v139;
  uint64_t v15 = *(unsigned __int8 *)(a2 + 23);
  if ((v15 & 0x80u) != 0LL) {
    uint64_t v15 = *(void *)(a2 + 8);
  }
  if (v15)
  {
    sub_100005A28((uint64_t)&v143, 0LL, 1024LL, 0LL);
    else {
      v17 = *(std::locale::__imp **)a2;
    }
    __dst[0].__locale_ = v17;
    __dst[1].__locale_ = v17;
    if (*(_DWORD *)(sub_100005AE0((uint64_t)&v143, __dst) + 88))
    {
      unint64_t v18 = sub_100002F60(&std::cout, (uint64_t)"Could not parse params string!", 30LL);
      std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(void *)(*v18 - 24LL)));
      v19 = std::locale::use_facet(__dst, &std::ctype<char>::id);
      uint64_t v20 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10LL);
      std::locale::~locale(__dst);
      std::ostream::put(v18, v20);
      std::ostream::flush(v18);
    }

    else
    {
      siri::dialogengine::ConvertJSONToJSONObj(__dst, a2);
      sub_100005988((uint64_t)&v138, v139);
      locale = __dst[1].__locale_;
      v138.__locale_ = __dst[0].__locale_;
      v139 = __dst[1].__locale_;
      v140 = v153;
      if (v153)
      {
        *((void *)__dst[1].__locale_ + 2) = &v139;
        __dst[0].__locale_ = (std::locale::__imp *)&__dst[1];
        __dst[1].__locale_ = 0LL;
        v153 = 0LL;
        locale = 0LL;
      }

      else
      {
        v138.__locale_ = (std::locale::__imp *)&v139;
      }

      sub_100005988((uint64_t)__dst, locale);
    }

    sub_100007938((uint64_t)&v143);
  }

  siri::dialogengine::CreateJSONStringVal(v134, a1);
  sub_1000021BC(&v143, "templateDir");
  __int128 v144 = *(_OWORD *)v134;
  v134[0] = 0LL;
  v134[1] = 0LL;
  siri::dialogengine::CreateJSONStringVal(v130, a3);
  sub_1000021BC(&v145, "catId");
  __int128 v147 = *(_OWORD *)&v130[0].__locale_;
  v130[0].__locale_ = 0LL;
  v130[1].__locale_ = 0LL;
  siri::dialogengine::CreateJSONStringVal(__p, a4);
  sub_1000021BC(v148, "locale");
  __int128 v149 = *(_OWORD *)__p;
  __p[0] = 0LL;
  __p[1] = 0LL;
  siri::dialogengine::CreateJSONObjectVal(v122, &v138);
  sub_1000021BC(v150, "parameters");
  __int128 v151 = *(_OWORD *)v122;
  v122[0] = 0LL;
  v122[1] = 0LL;
  sub_100005298((uint64_t)__dst, (const void **)&v143.__r_.__value_.__l.__data_, 4LL);
  for (uint64_t i = 0LL; i != -20; i -= 5LL)
  {
    sub_1000059D0((uint64_t)&__dst[i - 2]);
    if (SHIBYTE(v150[i + 2]) < 0) {
      operator delete((void *)v150[i]);
    }
  }

  v23 = (std::__shared_weak_count *)v122[1];
  if (v122[1])
  {
    v24 = (unint64_t *)((char *)v122[1] + 8);
    do
      unint64_t v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }

  unint64_t v26 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    uint64_t v27 = (unint64_t *)((char *)__p[1] + 8);
    do
      unint64_t v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }

  v29 = (std::__shared_weak_count *)v130[1].__locale_;
  if (v130[1].__locale_)
  {
    v30 = (unint64_t *)((char *)v130[1].__locale_ + 8);
    do
      unint64_t v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }

  v32 = (std::__shared_weak_count *)v134[1];
  if (v134[1])
  {
    v33 = (unint64_t *)((char *)v134[1] + 8);
    do
      unint64_t v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }

  siri::dialogengine::ConstructJSONString(&v143, __dst);
  sub_1000021BC(v134, (char *)&unk_10006A022);
  sub_1000021BC(v130, (char *)&unk_10006A022);
  sub_1000021BC(__p, (char *)&unk_10006A022);
  siri::dialogengine::PrepareRequestFromJson(v122, &v143, v134, v130, __p);
  if (SHIBYTE(v127) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v131) < 0) {
    operator delete(v130[0].__locale_);
  }
  if (v135 < 0) {
    operator delete(v134[0]);
  }
  siri::dialogengine::Context::GetFile(v122[0]);
  if (v134[0])
  {
    siri::dialogengine::File::ExpandAsDAG(&v119, v134[0], v122[0], a7, a8, a9 ^ 1u);
  }

  else
  {
    uint64_t v35 = sub_100002F60(&std::cout, (uint64_t)"Could not locate CAT file: ", 27LL);
    int v36 = *(char *)(a3 + 23);
    if (v36 >= 0) {
      uint64_t v37 = a3;
    }
    else {
      uint64_t v37 = *(void *)a3;
    }
    if (v36 >= 0) {
      uint64_t v38 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v38 = *(void *)(a3 + 8);
    }
    uint64_t v39 = sub_100002F60(v35, v37, v38);
    v40 = sub_100002F60(v39, (uint64_t)" in template dir: ", 18LL);
    int v41 = *(char *)(a1 + 23);
    if (v41 >= 0) {
      uint64_t v42 = a1;
    }
    else {
      uint64_t v42 = *(void *)a1;
    }
    if (v41 >= 0) {
      uint64_t v43 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v43 = *(void *)(a1 + 8);
    }
    v44 = sub_100002F60(v40, v42, v43);
    std::ios_base::getloc((const std::ios_base *)((char *)v44 + *(void *)(*v44 - 24LL)));
    v45 = std::locale::use_facet(v130, &std::ctype<char>::id);
    uint64_t v46 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v45->__vftable[2].~facet_0)(v45, 10LL);
    std::locale::~locale(v130);
    std::ostream::put(v44, v46);
    std::ostream::flush(v44);
    v120 = 0LL;
    uint64_t v121 = 0LL;
    v119 = &v120;
  }

  v47 = (std::__shared_weak_count *)v134[1];
  if (v134[1])
  {
    v48 = (unint64_t *)((char *)v134[1] + 8);
    do
      unint64_t v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }

  v50 = (std::__shared_weak_count *)v122[1];
  if (v122[1])
  {
    v51 = (unint64_t *)((char *)v122[1] + 8);
    do
      unint64_t v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }

  sub_100005988((uint64_t)__dst, (void *)__dst[1].__locale_);
  sub_100005988((uint64_t)&v138, v139);
  if (!v121) {
    goto LABEL_205;
  }
  if (a6)
  {
    siri::dialogengine::ConstructJSONString(&v143, &v119);
    if ((v143.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      v53 = &v143;
    }
    else {
      v53 = (std::string *)v143.__r_.__value_.__r.__words[0];
    }
    if ((v143.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t size = v143.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t size = v143.__r_.__value_.__l.__size_;
    }
    v55 = sub_100002F60(&std::cout, (uint64_t)v53, size);
    std::ios_base::getloc((const std::ios_base *)((char *)v55 + *(void *)(*v55 - 24LL)));
    unsigned __int8 v56 = std::locale::use_facet(&v138, &std::ctype<char>::id);
    uint64_t v57 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v56->__vftable[2].~facet_0)(v56, 10LL);
    std::locale::~locale(&v138);
    std::ostream::put(v55, v57);
    std::ostream::flush(v55);
    goto LABEL_203;
  }

  else {
    size_t v58 = *(void *)(a3 + 8);
  }
  v59 = &v143;
  sub_100007A0C((uint64_t)&v143, v58 + 1);
  if ((v143.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    v59 = (std::string *)v143.__r_.__value_.__r.__words[0];
  }
  if (v58)
  {
    else {
      uint64_t v60 = *(const void **)a3;
    }
    memmove(v59, v60, v58);
  }

  *(_WORD *)((char *)&v59->__r_.__value_.__l.__data_ + v5std::ostream::~ostream(v1, v2 + 8) = 35;
  int v61 = *(char *)(a4 + 23);
  if (v61 >= 0) {
    char v62 = (const std::string::value_type *)a4;
  }
  else {
    char v62 = *(const std::string::value_type **)a4;
  }
  if (v61 >= 0) {
    std::string::size_type v63 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    std::string::size_type v63 = *(void *)(a4 + 8);
  }
  char v64 = std::string::append(&v143, v62, v63);
  std::string v118 = *v64;
  v64->__r_.__value_.__l.__size_ = 0LL;
  v64->__r_.__value_.__l.__cap_ = 0LL;
  v64->__r_.__value_.__r.__words[0] = 0LL;
  sub_100001800((uint64_t)&v138);
  sub_1000021BC(&v143, (char *)&unk_10006A022);
  sub_1000021BC(&v144, "print");
  sub_1000021BC(&v146, "speak");
  __dst[0].__locale_ = 0LL;
  __dst[1].__locale_ = 0LL;
  v153 = 0LL;
  v134[0] = __dst;
  LOBYTE(v134[1]) = 0;
  __dst[0].__locale_ = (std::locale::__imp *)operator new(0x48uLL);
  __dst[1] = __dst[0];
  v153 = (char *)__dst[0].__locale_ + 72;
  __dst[1].__locale_ = (std::locale::__imp *)sub_100007ACC( (uint64_t)&v153,  (__int128 *)&v143,  (__int128 *)((char *)&v147 + 8),  (char *)__dst[0].__locale_);
  sub_100001814((uint64_t *)&v138, (__int128 **)__dst);
  v134[0] = __dst;
  sub_1000027F4((void ***)v134);
  for (uint64_t j = 0LL; j != -72; j -= 24LL)
  {
  }

  char v66 = v119;
  if (v119 != &v120)
  {
    do
    {
      if (*((char *)v66 + 55) < 0)
      {
        sub_10000231C(__dst, v66[4], (unint64_t)v66[5]);
      }

      else
      {
        *(_OWORD *)&__dst[0].__locale_ = *((_OWORD *)v66 + 2);
        v153 = (char *)v66[6];
      }

      memset(&v143, 0, sizeof(v143));
      v134[0] = &v143;
      LOBYTE(v134[1]) = 0;
      v143.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
      v143.__r_.__value_.__l.__size_ = v143.__r_.__value_.__r.__words[0];
      v143.__r_.__value_.__l.__cap_ = v143.__r_.__value_.__r.__words[0] + 24;
      v143.__r_.__value_.__l.__size_ = (std::string::size_type)sub_100007ACC( (uint64_t)&v143.__r_.__value_.__l.__cap_,  (__int128 *)__dst,  &v154,  v143.__r_.__value_.__l.__data_);
      sub_100001814((uint64_t *)&v138, (__int128 **)&v143);
      v134[0] = &v143;
      sub_1000027F4((void ***)v134);
      if (SHIBYTE(v153) < 0) {
        operator delete(__dst[0].__locale_);
      }
      v67 = (std::__shared_weak_count *)v66[8];
      v136 = v66[7];
      v137 = v67;
      if (v67)
      {
        p_shared_owners = (unint64_t *)&v67->__shared_owners_;
        do
          unint64_t v69 = __ldxr(p_shared_owners);
        while (__stxr(v69 + 1, p_shared_owners));
      }

      siri::dialogengine::GetJSONArrayVal(__dst, &v136);
      char v70 = v137;
      if (v137)
      {
        std::locale v71 = (unint64_t *)&v137->__shared_owners_;
        do
          unint64_t v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }

      __int128 v73 = __dst[0].__locale_;
      v74 = __dst[1].__locale_;
      while (v73 != v74)
      {
        __int128 v75 = (std::__shared_weak_count *)*((void *)v73 + 1);
        uint64_t v132 = *(void *)v73;
        v133 = v75;
        if (v75)
        {
          v76 = (unint64_t *)&v75->__shared_owners_;
          do
            unint64_t v77 = __ldxr(v76);
          while (__stxr(v77 + 1, v76));
        }

        siri::dialogengine::GetJSONObjectVal(v134, &v132);
        v78 = v133;
        if (v133)
        {
          v79 = (unint64_t *)&v133->__shared_owners_;
          do
            unint64_t v80 = __ldaxr(v79);
          while (__stlxr(v80 - 1, v79));
          if (!v80)
          {
            ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
            std::__shared_weak_count::__release_weak(v78);
          }
        }

        sub_1000021BC(&v143, "print");
        v81 = (uint64_t *)sub_100007A90((uint64_t)v134, (const void **)&v143.__r_.__value_.__l.__data_);
        v82 = (std::__shared_weak_count *)v81[1];
        uint64_t v128 = *v81;
        v129 = v82;
        if (v82)
        {
          v83 = (unint64_t *)&v82->__shared_owners_;
          do
            unint64_t v84 = __ldxr(v83);
          while (__stxr(v84 + 1, v83));
        }

        siri::dialogengine::GetJSONStringVal(v130, &v128);
        v85 = v129;
        if (v129)
        {
          v86 = (unint64_t *)&v129->__shared_owners_;
          do
            unint64_t v87 = __ldaxr(v86);
          while (__stlxr(v87 - 1, v86));
          if (!v87)
          {
            ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
            std::__shared_weak_count::__release_weak(v85);
          }
        }

        sub_1000021BC(&v143, "speak");
        v88 = (uint64_t *)sub_100007A90((uint64_t)v134, (const void **)&v143.__r_.__value_.__l.__data_);
        v89 = (std::__shared_weak_count *)v88[1];
        uint64_t v124 = *v88;
        v125 = v89;
        if (v89)
        {
          v90 = (unint64_t *)&v89->__shared_owners_;
          do
            unint64_t v91 = __ldxr(v90);
          while (__stxr(v91 + 1, v90));
        }

        siri::dialogengine::GetJSONStringVal(__p, &v124);
        v92 = v125;
        if (v125)
        {
          v93 = (unint64_t *)&v125->__shared_owners_;
          do
            unint64_t v94 = __ldaxr(v93);
          while (__stlxr(v94 - 1, v93));
          if (!v94)
          {
            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
            std::__shared_weak_count::__release_weak(v92);
          }
        }

        sub_1000021BC(&v143, (char *)&unk_10006A022);
        if (SHIBYTE(v131) < 0)
        {
          sub_10000231C(&v144, v130[0].__locale_, (unint64_t)v130[1].__locale_);
        }

        else
        {
          __int128 v144 = *(_OWORD *)&v130[0].__locale_;
          uint64_t v145 = v131;
        }

        if (SHIBYTE(v127) < 0)
        {
          sub_10000231C(&v146, __p[0], (unint64_t)__p[1]);
        }

        else
        {
          __int128 v146 = *(_OWORD *)__p;
          *(void *)&__int128 v147 = v127;
        }

        v122[0] = 0LL;
        v122[1] = 0LL;
        v123 = 0LL;
        v141 = v122;
        char v142 = 0;
        v122[0] = (siri::dialogengine::Context *)operator new(0x48uLL);
        v122[1] = v122[0];
        v123 = (char *)v122[0] + 72;
        v122[1] = (siri::dialogengine::Context *)sub_100007ACC( (uint64_t)&v123,  (__int128 *)&v143,  (__int128 *)((char *)&v147 + 8),  (char *)v122[0]);
        sub_100001814((uint64_t *)&v138, (__int128 **)v122);
        v141 = v122;
        sub_1000027F4((void ***)&v141);
        for (uint64_t k = 0LL; k != -72; k -= 24LL)
        {
        }

        if (SHIBYTE(v127) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v131) < 0) {
          operator delete(v130[0].__locale_);
        }
        sub_100005988((uint64_t)v134, (void *)v134[1]);
        __int128 v73 = (std::locale::__imp *)((char *)v73 + 16);
      }

      v143.__r_.__value_.__r.__words[0] = (std::string::size_type)__dst;
      sub_100007BFC((void ***)&v143);
      v96 = v66[1];
      if (v96)
      {
        do
        {
          v97 = (void **)v96;
          v96 = (void *)*v96;
        }

        while (v96);
      }

      else
      {
        do
        {
          v97 = (void **)v66[2];
          BOOL v98 = *v97 == v66;
          char v66 = v97;
        }

        while (!v98);
      }

      char v66 = v97;
    }

    while (v97 != &v120);
  }

  int v99 = (char)v118.__r_.__value_.__s.__size_;
  if ((v118.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    size_t v100 = v118.__r_.__value_.__s.__size_;
  }
  else {
    size_t v100 = v118.__r_.__value_.__l.__size_;
  }
  v101 = &v143;
  sub_100007A0C((uint64_t)&v143, v100 + 4);
  if ((v143.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    v101 = (std::string *)v143.__r_.__value_.__r.__words[0];
  }
  if (v100)
  {
    if ((v118.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      v102 = &v118;
    }
    else {
      v102 = (std::string *)v118.__r_.__value_.__r.__words[0];
    }
    memmove(v101, v102, v100);
  }

  strcpy((char *)v101 + v100, ".csv");
  siri::dialogengine::JoinPath(__dst, a5, &v143);
  BOOL v103 = sub_100001CF0((uint64_t)&v138, (uint64_t *)__dst);
  if (SHIBYTE(v153) < 0) {
    operator delete(__dst[0].__locale_);
  }
  v143.__r_.__value_.__r.__words[0] = (std::string::size_type)&v139;
  sub_1000023A8((void ***)&v143);
  if (v103)
  {
    v104 = &v143;
    sub_100007A0C((uint64_t)&v143, v100 + 4);
    if ((v143.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      v104 = (std::string *)v143.__r_.__value_.__r.__words[0];
    }
    if (v100)
    {
      if (v99 >= 0) {
        v105 = &v118;
      }
      else {
        v105 = (std::string *)v118.__r_.__value_.__r.__words[0];
      }
      memmove(v104, v105, v100);
    }

    strcpy((char *)v104 + v100, ".csv");
    siri::dialogengine::JoinPath(&v138, a5, &v143);
    v106 = sub_100002F60(&std::cout, (uint64_t)"CSV written to: ", 16LL);
    if (SHIBYTE(v140) >= 0) {
      v107 = &v138;
    }
    else {
      v107 = v138.__locale_;
    }
    if (SHIBYTE(v140) >= 0) {
      uint64_t v108 = HIBYTE(v140);
    }
    else {
      uint64_t v108 = (uint64_t)v139;
    }
    v109 = sub_100002F60(v106, (uint64_t)v107, v108);
    std::ios_base::getloc((const std::ios_base *)((char *)v109 + *(void *)(*v109 - 24LL)));
    v110 = std::locale::use_facet(__dst, &std::ctype<char>::id);
    uint64_t v111 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v110->__vftable[2].~facet_0)(v110, 10LL);
    std::locale::~locale(__dst);
    std::ostream::put(v109, v111);
    std::ostream::flush(v109);
    if (SHIBYTE(v140) < 0) {
      operator delete(v138.__locale_);
    }
  }

  else
  {
    v112 = sub_100002F60(&std::cout, (uint64_t)"Error writing to CSV!", 21LL);
    std::ios_base::getloc((const std::ios_base *)((char *)v112 + *(void *)(*v112 - 24LL)));
    v113 = std::locale::use_facet((const std::locale *)&v143, &std::ctype<char>::id);
    uint64_t v114 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v113->__vftable[2].~facet_0)(v113, 10LL);
    std::locale::~locale((std::locale *)&v143);
    std::ostream::put(v112, v114);
    std::ostream::flush(v112);
  }

  if (v99 < 0)
  {
    operator delete(v118.__r_.__value_.__l.__data_);
    if (v103) {
      goto LABEL_203;
    }
LABEL_205:
    uint64_t v115 = 0LL;
    goto LABEL_206;
  }

  if (!v103) {
    goto LABEL_205;
  }
LABEL_203:
  uint64_t v115 = 1LL;
LABEL_206:
  sub_100005988((uint64_t)&v119, v120);
  return v115;
}

void sub_100004DE0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, void *a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, std::locale a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, void *a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, std::locale a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  if (a57 < 0) {
    operator delete(__p);
  }
  if (a18 < 0) {
    operator delete(a13);
  }
  sub_100005988((uint64_t)&a19, (void *)a20);
  _Unwind_Resume(a1);
}

void sub_100005248()
{
}

void sub_100005250( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, char a35)
{
}

uint64_t sub_100005260(uint64_t a1)
{
  return a1;
}

uint64_t sub_100005298(uint64_t a1, const void **a2, uint64_t a3)
{
  *(void *)(a1 + std::ostream::~ostream(v1, v2 + 8) = 0LL;
  int v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 40 * a3;
    do
    {
      sub_100005318((uint64_t **)a1, v4, a2, (__int128 *)a2);
      a2 += 5;
      v6 -= 40LL;
    }

    while (v6);
  }

  return a1;
}

void sub_100005300(_Unwind_Exception *a1)
{
}

uint64_t *sub_100005318(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  uint64_t v6 = sub_1000053AC(a1, a2, &v12, &v11, a3);
  unsigned __int8 v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    int v8 = (uint64_t **)v6;
    sub_100005544((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000055AC(a1, (uint64_t)v12, v8, v10[0]);
    unsigned __int8 v7 = v10[0];
    v10[0] = 0LL;
    sub_100005908((uint64_t)v10, 0LL);
  }

  return v7;
}

const void **sub_1000053AC(void *a1, uint64_t *a2, const void ***a3, uint64_t *a4, const void **a5)
{
  unint64_t v9 = (const void **)(a1 + 1);
  if (a1 + 1 == a2 || sub_10000569C((uint64_t)(a1 + 2), a5, (const void **)a2 + 4))
  {
    if ((uint64_t *)*a1 == a2)
    {
      int64_t v12 = (const void **)a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }

      else
      {
        *a3 = (const void **)a2;
        return (const void **)a2;
      }
    }

    uint64_t v11 = (const void **)*a2;
    if (*a2)
    {
      do
      {
        int64_t v12 = v11;
        uint64_t v11 = (const void **)v11[1];
      }

      while (v11);
    }

    else
    {
      v16 = a2;
      do
      {
        int64_t v12 = (const void **)v16[2];
        BOOL v17 = *v12 == v16;
        v16 = (uint64_t *)v12;
      }

      while (v17);
    }

    return (const void **)sub_100005600((uint64_t)a1, a3, a5);
  }

  if (sub_10000569C((uint64_t)(a1 + 2), (const void **)a2 + 4, a5))
  {
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      uint64_t v14 = (const void **)a2[1];
      do
      {
        uint64_t v15 = v14;
        uint64_t v14 = (const void **)*v14;
      }

      while (v14);
    }

    else
    {
      unint64_t v18 = (const void **)a2;
      do
      {
        uint64_t v15 = (const void **)v18[2];
        BOOL v17 = *v15 == v18;
        unint64_t v18 = v15;
      }

      while (!v17);
    }

    if (v15 != v9)
    {
      uint64_t v13 = *a4;
    }

    if (v13)
    {
      *a3 = v15;
      return v15;
    }

    else
    {
      *a3 = (const void **)a2;
    }

    return (const void **)a4;
  }

  *a3 = (const void **)a2;
  *a4 = (uint64_t)a2;
  return (const void **)a4;
}

void *sub_100005544@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + std::ostream::~ostream(v1, v2 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  uint64_t result = sub_100005704(v6 + 4, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_100005594(_Unwind_Exception *a1)
{
}

uint64_t *sub_1000055AC(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0LL;
  a4[1] = 0LL;
  a4[2] = a2;
  *a3 = a4;
  uint64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }

  uint64_t result = sub_100005770(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

void *sub_100005600(uint64_t a1, void *a2, const void **a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        int v8 = (void *)v4;
        unint64_t v9 = (const void **)(v4 + 32);
        uint64_t v4 = *v8;
        uint64_t v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }

      if (!sub_10000569C(v7, v9, a3)) {
        break;
      }
      uint64_t v5 = v8 + 1;
      uint64_t v4 = v8[1];
    }

    while (v4);
  }

  else
  {
    int v8 = (void *)(a1 + 8);
  }

LABEL_10:
  *a2 = v8;
  return v5;
}

BOOL sub_10000569C(uint64_t a1, const void **a2, const void **a3)
{
  int v3 = *((char *)a3 + 23);
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  if (v4 >= 0) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = *a2;
  }
  if (v3 >= 0) {
    size_t v7 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v7 = (size_t)a3[1];
  }
  if (v3 >= 0) {
    int v8 = a3;
  }
  else {
    int v8 = *a3;
  }
  if (v7 >= v5) {
    size_t v9 = v5;
  }
  else {
    size_t v9 = v7;
  }
  int v10 = memcmp(v6, v8, v9);
  if (v10) {
    return v10 < 0;
  }
  else {
    return v5 < v7;
  }
}

void *sub_100005704(void *__dst, __int128 *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10000231C(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v4 = *a2;
    std::locale __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }

  uint64_t v5 = *((void *)a2 + 4);
  __dst[3] = *((void *)a2 + 3);
  __dst[4] = v5;
  if (v5)
  {
    uint64_t v6 = (unint64_t *)(v5 + 8);
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }

  return __dst;
}

uint64_t *sub_100005770(uint64_t *result, uint64_t *a2)
{
  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24)) {
        return result;
      }
      int v3 = (uint64_t *)v2[2];
      __int128 v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), uint64_t v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            size_t v9 = (uint64_t **)a2[2];
          }

          else
          {
            size_t v9 = (uint64_t **)v2[1];
            int v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              int v3 = (uint64_t *)v2[2];
            }

            v9[2] = v3;
            *(void *)(v2[2] + 8LL * (*(void *)v2[2] != (void)v2)) = v9;
            std::ios_base *v9 = v2;
            v2[2] = (uint64_t)v9;
            int v3 = v9[2];
            uint64_t v2 = (uint64_t *)*v3;
          }

          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          uint64_t *v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8LL * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }

      else if (!v4 || (int v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          *uint64_t v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            int v3 = (uint64_t *)v2[2];
          }

          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8LL * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          int v3 = (uint64_t *)a2[2];
        }

        else
        {
          a2 = (uint64_t *)a2[2];
        }

        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        uint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8LL * (*(void *)v3[2] != (void)v3)) = v2;
        *uint64_t v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }

      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      _BYTE *v5 = 1;
    }

    while (v3 != result);
  }

  return result;
}

void sub_100005908(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_10000594C((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }

void sub_10000594C(uint64_t a1)
{
}

void sub_100005988(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100005988(a1, *a2);
    sub_100005988(a1, a2[1]);
    sub_10000594C((uint64_t)(a2 + 4));
    operator delete(a2);
  }

uint64_t sub_1000059D0(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      unint64_t v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }

  return a1;
}

uint64_t sub_100005A28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + std::ostream::~ostream(v1, v2 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = a4;
  *(_OWORD *)(a1 + 4std::ostream::~ostream(v1, v2 + 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = a3;
  *(_DWORD *)(a1 + 8std::ostream::~ostream(v1, v2 + 8) = 0;
  *(void *)(a1 + 96) = 0LL;
  if (!a2)
  {
    uint64_t v5 = operator new(0x28uLL);
    void *v5 = 0LL;
    v5[1] = 0x10000LL;
    v5[3] = 0LL;
    v5[4] = 0LL;
    v5[2] = 0LL;
    *(void *)(a1 + 24) = v5;
    *(void *)(a1 + 32) = v5;
  }

  return a1;
}

void sub_100005A90(_Unwind_Exception *a1)
{
}

void sub_100005AA8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2) {
    operator delete(v2);
  }
}

uint64_t sub_100005AE0(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v10 = a1;
  uint64_t v11 = v3;
  *(_OWORD *)std::string __p = 0u;
  __int128 v13 = 0u;
  uint64_t v14 = 256LL;
  int v15 = 0;
  uint64_t v16 = 0LL;
  int v17 = 2;
  uint64_t v4 = sub_100005BEC((uint64_t)&v11, a2, a1);
  *(void *)(a1 + 8std::ostream::~ostream(v1, v2 + 8) = v4;
  *(void *)(a1 + 96) = v5;
  int v6 = sub_100005D70;
  if ((_DWORD)v4) {
    int v6 = 0LL;
  }
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 64);
    if (v7 - *(void *)(a1 + 56) != 24) {
      __assert_rtn("ParseStream", "document.h", 2259, "stack_.GetSize() == sizeof(ValueType)");
    }
    *(void *)(a1 + 64) = v7 - 24;
    if (v7 - 24 != a1)
    {
      __int128 v8 = *(_OWORD *)(v7 - 24);
      *(void *)(a1 + 16) = *(void *)(v7 - 8);
      *(_OWORD *)a1 = v8;
      *(_WORD *)(v7 - 2) = 0;
    }
  }

  sub_1000078B8(&v10);
  free(__p[1]);
  if (__p[0]) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_100005BC8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
}

uint64_t sub_100005BEC(uint64_t a1, void *a2, uint64_t a3)
{
  *(_DWORD *)(a1 + 4std::ostream::~ostream(v1, v2 + 8) = 0;
  *(void *)(a1 + 56) = 0LL;
  for (uint64_t i = (_BYTE *)*a2; ; ++i)
  {
    unsigned int v6 = *i;
    BOOL v7 = v6 > 0x20;
    uint64_t v8 = (1LL << v6) & 0x100002600LL;
    if (v7 || v8 == 0) {
      break;
    }
  }

  *a2 = i;
  if (!*i)
  {
    int v14 = 1;
LABEL_19:
    int v15 = &i[-a2[1]];
    *(_DWORD *)(a1 + 4std::ostream::~ostream(v1, v2 + 8) = v14;
    *(void *)(a1 + 56) = v15;
    goto LABEL_16;
  }

  sub_100005D10(a1, a2, a3);
  if (!*(_DWORD *)(a1 + 48))
  {
    for (uint64_t i = (_BYTE *)*a2; ; ++i)
    {
      unsigned int v10 = *i;
      BOOL v7 = v10 > 0x20;
      uint64_t v11 = (1LL << v10) & 0x100002600LL;
      if (v7 || v11 == 0) {
        break;
      }
    }

    *a2 = i;
    if (*i)
    {
      int v14 = 2;
      goto LABEL_19;
    }
  }

LABEL_16:
  uint64_t result = *(void *)(a1 + 48);
  *(void *)(a1 + 24) = *(void *)(a1 + 16);
  return result;
}

  uint64_t result = *(void *)(a1 + 48);
  *(void *)(a1 + 24) = *(void *)(a1 + 16);
  return result;
}

void sub_100005CCC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 24) = *(void *)(v1 + 16);
  _Unwind_Resume(a1);
}

uint64_t sub_100005CD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = v3 - 24 * a2;
  *(void *)(a1 + 24) = v4;
  return v4;
}

void sub_100005D10(uint64_t result, void *a2, uint64_t a3)
{
  int v3 = *(char *)*a2;
  if (v3 > 109)
  {
    switch(v3)
    {
      case '{':
        sub_1000060A8(result, (unsigned __int8 **)a2, (void *)a3);
        return;
      case 't':
        sub_100005E20(result, a2, a3);
        return;
      case 'n':
        sub_100005D80(result, a2, a3);
        return;
    }
  }

  else
  {
    switch(v3)
    {
      case '""':
        sub_100005F84(result, a2, a3);
        return;
      case '[':
        sub_100006354(result, (unsigned __int8 **)a2, (void *)a3);
        return;
      case 'f':
        sub_100005EC8(result, a2, a3);
        return;
    }
  }

  sub_10000654C(result, (unsigned __int8 **)a2, a3);
}

BOOL sub_100005D70(_DWORD *a1)
{
  return *a1 != 0;
}

uint64_t sub_100005D80(uint64_t result, void *a2, uint64_t a3)
{
  int v3 = (_BYTE *)*a2;
  if (*(_BYTE *)*a2 != 110) {
    sub_10005E530();
  }
  uint64_t v4 = v3 + 1;
  *a2 = v3 + 1;
  if (v3[1] == 117 && (uint64_t v4 = v3 + 2, *a2 = v3 + 2, v3[2] == 108) && (uint64_t v4 = v3 + 3, *a2 = v3 + 3, v3[3] == 108))
  {
    *a2 = v3 + 4;
    uint64_t result = sub_100006D2C((void *)(a3 + 40), 1LL);
    *(void *)(result + std::ostream::~ostream(v1, v2 + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)uint64_t result = 0LL;
  }

  else
  {
    if (*(_DWORD *)(result + 48)) {
      sub_10005E508();
    }
    uint64_t v5 = &v4[-a2[1]];
    *(_DWORD *)(result + 4std::ostream::~ostream(v1, v2 + 8) = 3;
    *(void *)(result + 56) = v5;
  }

  return result;
}

uint64_t sub_100005E20(uint64_t result, void *a2, uint64_t a3)
{
  int v3 = (_BYTE *)*a2;
  if (*(_BYTE *)*a2 != 116) {
    sub_10005E580();
  }
  uint64_t v4 = v3 + 1;
  *a2 = v3 + 1;
  if (v3[1] == 114 && (uint64_t v4 = v3 + 2, *a2 = v3 + 2, v3[2] == 117) && (uint64_t v4 = v3 + 3, *a2 = v3 + 3, v3[3] == 101))
  {
    *a2 = v3 + 4;
    uint64_t result = sub_100006D2C((void *)(a3 + 40), 1LL);
    *(void *)(result + std::ostream::~ostream(v1, v2 + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)uint64_t result = 0LL;
    *(_WORD *)(result + 22) = 10;
  }

  else
  {
    if (*(_DWORD *)(result + 48)) {
      sub_10005E558();
    }
    uint64_t v5 = &v4[-a2[1]];
    *(_DWORD *)(result + 4std::ostream::~ostream(v1, v2 + 8) = 3;
    *(void *)(result + 56) = v5;
  }

  return result;
}

uint64_t sub_100005EC8(uint64_t result, void *a2, uint64_t a3)
{
  int v3 = (_BYTE *)*a2;
  if (*(_BYTE *)*a2 != 102) {
    sub_10005E5D0();
  }
  uint64_t v4 = v3 + 1;
  *a2 = v3 + 1;
  if (v3[1] == 97
    && (uint64_t v4 = v3 + 2, *a2 = v3 + 2, v3[2] == 108)
    && (uint64_t v4 = v3 + 3, *a2 = v3 + 3, v3[3] == 115)
    && (uint64_t v4 = v3 + 4, *a2 = v3 + 4, v3[4] == 101))
  {
    *a2 = v3 + 5;
    uint64_t result = sub_100006D2C((void *)(a3 + 40), 1LL);
    *(void *)(result + std::ostream::~ostream(v1, v2 + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)uint64_t result = 0LL;
    *(_WORD *)(result + 22) = 9;
  }

  else
  {
    if (*(_DWORD *)(result + 48)) {
      sub_10005E5A8();
    }
    uint64_t v5 = &v4[-a2[1]];
    *(_DWORD *)(result + 4std::ostream::~ostream(v1, v2 + 8) = 3;
    *(void *)(result + 56) = v5;
  }

  return result;
}

double sub_100005F84(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  __int128 v13 = *a2;
  int v14 = a2;
  if (*(_BYTE *)v13 != 34) {
    __assert_rtn("ParseString", "reader.h", 961, "s.Peek() == '\\'");
  }
  *(void *)&__int128 v13 = v13 + 1;
  uint64_t v11 = (void *)a1;
  int v12 = 0;
  sub_100006E94((_BYTE *)a1, (uint64_t *)&v13, &v11);
  if (!*(_DWORD *)(a1 + 48))
  {
    int v7 = v12;
    uint64_t v8 = (void *)sub_10000709C((unsigned int *)&v11, v5, v6);
    if ((sub_1000070D0(a3, v8, v7 - 1, 1) & 1) == 0)
    {
      if (*(_DWORD *)(a1 + 48)) {
        __assert_rtn("ParseString", "reader.h", 983, "!HasParseError()");
      }
      uint64_t v10 = v13 - *((void *)&v13 + 1);
      *(_DWORD *)(a1 + 4std::ostream::~ostream(v1, v2 + 8) = 16;
      *(void *)(a1 + 56) = v10;
    }
  }

  double result = *(double *)&v13;
  _OWORD *v14 = v13;
  return result;
}

void sub_10000608C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 a11, _OWORD *a12)
{
  *a12 = a11;
  _Unwind_Resume(a1);
}

void sub_1000060A8(uint64_t a1, unsigned __int8 **a2, void *a3)
{
  if (**a2 != 123) {
    sub_10005E670();
  }
  ++*a2;
  uint64_t v6 = sub_100006D2C(a3 + 5, 1LL);
  *(void *)(v6 + std::ostream::~ostream(v1, v2 + 8) = 0LL;
  *(void *)(v6 + 16) = 0LL;
  *(void *)uint64_t v6 = 0LL;
  *(_WORD *)(v6 + 22) = 3;
  for (uint64_t i = *a2; ; ++i)
  {
    unsigned int v9 = *i;
    BOOL v10 = v9 > 0x20;
    uint64_t v11 = (1LL << v9) & 0x100002600LL;
    if (v10 || v11 == 0) {
      break;
    }
  }

  *a2 = i;
  if (!*(_DWORD *)(a1 + 48))
  {
    int v13 = *i;
    if (v13 == 125)
    {
      *a2 = i + 1;
      if ((sub_10000765C(a3, 0, v7) & 1) != 0) {
        return;
      }
      if (*(_DWORD *)(a1 + 48)) {
        sub_10005E5F8();
      }
LABEL_47:
      int v36 = (unsigned __int8 *)(*a2 - a2[1]);
      int v37 = 16;
LABEL_48:
      *(_DWORD *)(a1 + 4std::ostream::~ostream(v1, v2 + 8) = v37;
      *(void *)(a1 + 56) = v36;
      return;
    }

    if (v13 != 34)
    {
LABEL_45:
      int v36 = (unsigned __int8 *)(i - a2[1]);
      int v37 = 4;
      goto LABEL_48;
    }

    unsigned int v14 = 0;
    while (1)
    {
      v15.n128_f64[0] = sub_100005F84(a1, a2, (uint64_t)a3);
      if (*(_DWORD *)(a1 + 48)) {
        break;
      }
      uint64_t v16 = *a2;
      for (uint64_t j = *a2; ; ++j)
      {
        unsigned int v18 = *j;
        BOOL v10 = v18 > 0x20;
        uint64_t v19 = (1LL << v18) & 0x100002600LL;
        if (v10 || v19 == 0) {
          break;
        }
        ++v16;
      }

      *a2 = j;
      if (*j != 58)
      {
        int v36 = (unsigned __int8 *)(v16 - a2[1]);
        int v37 = 5;
        goto LABEL_48;
      }

      unint64_t v21 = j + 1;
      *a2 = j + 1;
      while (1)
      {
        unsigned int v22 = *v21;
        BOOL v10 = v22 > 0x20;
        uint64_t v23 = (1LL << v22) & 0x100002600LL;
        if (v10 || v23 == 0) {
          break;
        }
        ++v21;
      }

      *a2 = v21;
      sub_100005D10(a1, a2, a3, v15);
      if (*(_DWORD *)(a1 + 48)) {
        return;
      }
      unint64_t v26 = *a2;
      for (uint64_t k = *a2; ; ++k)
      {
        unsigned int v28 = *k;
        BOOL v10 = v28 > 0x20;
        uint64_t v29 = (1LL << v28) & 0x100002600LL;
        if (v10 || v29 == 0) {
          break;
        }
        ++v26;
      }

      *a2 = k;
      ++v14;
      int v31 = (char)*k;
      if (v31 != 44)
      {
        if (v31 != 125)
        {
          int v36 = (unsigned __int8 *)(v26 - a2[1]);
          int v37 = 6;
          goto LABEL_48;
        }

        *a2 = k + 1;
        if ((sub_10000765C(a3, v14, v25) & 1) != 0) {
          return;
        }
        if (*(_DWORD *)(a1 + 48)) {
          sub_10005E648();
        }
        goto LABEL_47;
      }

      uint64_t i = k + 1;
      *a2 = k + 1;
      while (1)
      {
        unsigned int v32 = *i;
        BOOL v10 = v32 > 0x20;
        uint64_t v33 = (1LL << v32) & 0x100002600LL;
        if (v10 || v33 == 0) {
          break;
        }
        ++i;
      }

      *a2 = i;
      int v35 = *i;
      if (v35 == 125)
      {
        if ((sub_10000765C(a3, v14, v25) & 1) != 0)
        {
          ++*a2;
          return;
        }

        if (*(_DWORD *)(a1 + 48)) {
          sub_10005E620();
        }
        goto LABEL_47;
      }

      if (v35 != 34) {
        goto LABEL_45;
      }
    }
  }

uint64_t sub_100006354(uint64_t a1, unsigned __int8 **a2, void *a3)
{
  if (**a2 != 91) {
    sub_10005E710();
  }
  ++*a2;
  uint64_t result = sub_100006D2C(a3 + 5, 1LL);
  *(void *)(result + std::ostream::~ostream(v1, v2 + 8) = 0LL;
  *(void *)(result + 16) = 0LL;
  *(void *)uint64_t result = 0LL;
  *(_WORD *)(result + 22) = 4;
  for (uint64_t i = *a2; ; ++i)
  {
    unsigned int v10 = *i;
    BOOL v11 = v10 > 0x20;
    uint64_t v12 = (1LL << v10) & 0x100002600LL;
    if (v11 || v12 == 0) {
      break;
    }
  }

  *a2 = i;
  if (!*(_DWORD *)(a1 + 48))
  {
    if (*i == 93)
    {
      *a2 = i + 1;
      uint64_t result = sub_100007734(a3, 0, v7);
      if ((result & 1) == 0)
      {
        if (*(_DWORD *)(a1 + 48)) {
          sub_10005E698();
        }
LABEL_32:
        unint64_t v26 = (_BYTE *)(*a2 - a2[1]);
        int v27 = 16;
LABEL_33:
        *(_DWORD *)(a1 + 4std::ostream::~ostream(v1, v2 + 8) = v27;
        *(void *)(a1 + 56) = v26;
      }
    }

    else
    {
      unsigned int v14 = 0;
      while (1)
      {
        uint64_t result = sub_100005D10(a1, a2, a3, v8);
        if (*(_DWORD *)(a1 + 48)) {
          break;
        }
        uint64_t v16 = *a2;
        for (uint64_t j = *a2; ; ++j)
        {
          unsigned int v18 = *j;
          BOOL v11 = v18 > 0x20;
          uint64_t v19 = (1LL << v18) & 0x100002600LL;
          if (v11 || v19 == 0) {
            break;
          }
          ++v16;
        }

        ++v14;
        *a2 = j;
        int v21 = *j;
        if (v21 != 44)
        {
          if (v21 != 93)
          {
            unint64_t v26 = (_BYTE *)(v16 - a2[1]);
            int v27 = 7;
            goto LABEL_33;
          }

          *a2 = j + 1;
          uint64_t result = sub_100007734(a3, v14, v15);
          if ((result & 1) != 0) {
            return result;
          }
          if (*(_DWORD *)(a1 + 48)) {
            sub_10005E6E8();
          }
          goto LABEL_32;
        }

        unsigned int v22 = j + 1;
        *a2 = j + 1;
        while (1)
        {
          unsigned int v23 = *v22;
          BOOL v11 = v23 > 0x20;
          uint64_t v24 = (1LL << v23) & 0x100002600LL;
          if (v11 || v24 == 0) {
            break;
          }
          ++v22;
        }

        *a2 = v22;
        if (*v22 == 93)
        {
          uint64_t result = sub_100007734(a3, v14, v15);
          if ((result & 1) != 0)
          {
            ++*a2;
            return result;
          }

          if (*(_DWORD *)(a1 + 48)) {
            sub_10005E6C0();
          }
          goto LABEL_32;
        }
      }
    }
  }

  return result;
}

uint64_t sub_10000654C(uint64_t result, unsigned __int8 **a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  int v6 = **a2;
  if (v6 == 45)
  {
    __n128 v8 = v4 + 1;
    int v7 = v4[1];
  }

  else
  {
    int v7 = **a2;
    __n128 v8 = *a2;
  }

  LODWORD(v9) = v7 - 48;
  if (v7 == 48)
  {
    unint64_t v16 = 0LL;
    int v17 = 0;
    LODWORD(v14) = 0;
    int v18 = 0;
    double v13 = 0.0;
    unsigned int v10 = v8[1];
    uint64_t v11 = (uint64_t)(v8 + 1);
    goto LABEL_41;
  }

  if ((v7 - 49) > 8)
  {
    if (*(_DWORD *)(result + 48)) {
      __assert_rtn("ParseNumber", "reader.h", 1532, "!HasParseError()");
    }
    uint64_t v39 = (unsigned __int8 *)(v8 - v5);
    int v40 = 3;
    goto LABEL_111;
  }

  uint64_t v11 = (uint64_t)(v8 + 1);
  unsigned int v10 = v8[1];
  unsigned int v12 = v10 - 48;
  double v13 = 0.0;
  if (v6 != 45)
  {
    if (v12 <= 9)
    {
      uint64_t v14 = 0LL;
      while (1)
      {
        if (v9 > 0x19999998)
        {
          if ((_DWORD)v9 != 429496729) {
            goto LABEL_23;
          }
          if (v10 > 0x35) {
            break;
          }
        }

        LODWORD(v9) = v10 + 10 * v9 - 48;
        unsigned int v10 = v8[v14++ + 2];
        if (v10 - 48 >= 0xA)
        {
          unint64_t v16 = 0LL;
          int v17 = 0;
          int v18 = 0;
          uint64_t v11 = (uint64_t)&v8[v14 + 1];
          goto LABEL_41;
        }
      }

      LODWORD(v9) = 429496729;
LABEL_23:
      uint64_t v11 = (uint64_t)&v8[v14 + 1];
      goto LABEL_24;
    }

LABEL_102:
    unint64_t v16 = 0LL;
    int v17 = 0;
    LODWORD(v14) = 0;
    int v18 = 0;
    goto LABEL_41;
  }

  if (v12 > 9) {
    goto LABEL_102;
  }
  uint64_t v14 = 0LL;
  while (1)
  {
    if (v9 > 0xCCCCCCB)
    {
      if ((_DWORD)v9 != 214748364) {
        goto LABEL_14;
      }
      if (v10 > 0x38) {
        break;
      }
    }

    LODWORD(v9) = v10 + 10 * v9 - 48;
    unsigned int v10 = v8[v14++ + 2];
    if (v10 - 48 >= 0xA)
    {
      unint64_t v16 = 0LL;
      int v17 = 0;
      int v18 = 0;
      uint64_t v11 = (uint64_t)&v8[v14 + 1];
      goto LABEL_41;
    }
  }

  unsigned int v10 = 57;
  LODWORD(v9) = 214748364;
LABEL_14:
  uint64_t v11 = (uint64_t)&v8[v14 + 1];
LABEL_24:
  unint64_t v16 = v9;
  if (v6 == 45)
  {
    while (v16 <= 0xCCCCCCCCCCCCCCBLL || v16 == 0xCCCCCCCCCCCCCCCLL && v10 <= 0x38)
    {
      unsigned int v15 = *(unsigned __int8 *)++v11;
      unint64_t v16 = v10 - 48 + 10 * v16;
      LODWORD(v14) = v14 + 1;
      unsigned int v10 = v15;
      if (v15 - 48 >= 0xA) {
        goto LABEL_39;
      }
    }
  }

  else
  {
    while (v16 <= 0x1999999999999998LL || v16 == 0x1999999999999999LL && v10 <= 0x35)
    {
      unsigned int v19 = *(unsigned __int8 *)++v11;
      unint64_t v16 = v10 - 48 + 10 * v16;
      LODWORD(v14) = v14 + 1;
      unsigned int v10 = v19;
      if (v19 - 48 >= 0xA)
      {
LABEL_39:
        int v17 = 0;
        double v13 = 0.0;
        goto LABEL_40;
      }
    }
  }

  double v13 = (double)v16;
  do
  {
    unsigned int v20 = *(unsigned __int8 *)++v11;
    double v13 = (double)(int)(v10 - 48) + v13 * 10.0;
    unsigned int v10 = v20;
  }

  while (v20 - 48 < 0xA);
  int v17 = 1;
LABEL_40:
  int v18 = 1;
LABEL_41:
  uint64_t v21 = v4 - v5;
  if (v10 == 46)
  {
    __n128 v8 = (unsigned __int8 *)(v11 + 1);
    unsigned int v10 = *(unsigned __int8 *)(v11 + 1);
    if (v10 - 48 >= 0xA)
    {
      if (*(_DWORD *)(result + 48)) {
        __assert_rtn("ParseNumber", "reader.h", 1575, "!HasParseError()");
      }
      uint64_t v39 = (unsigned __int8 *)(v8 - v5);
      int v40 = 14;
      goto LABEL_111;
    }

    if ((v17 & 1) != 0)
    {
      int v22 = 0;
      goto LABEL_54;
    }

    uint64_t v23 = 0LL;
    if (!v18) {
      unint64_t v16 = v9;
    }
    while (v10 <= 0x39 && !(v16 >> 53))
    {
      unint64_t v16 = v10 - 48 + 10 * v16;
      if (v16) {
        LODWORD(v14) = v14 + 1;
      }
      int v24 = *(char *)(v11 + v23 + 2);
      unsigned int v10 = *(unsigned __int8 *)(v11 + v23++ + 2);
      if (v24 <= 47)
      {
        int v25 = 0;
        double v13 = (double)v16;
        int v22 = -(int)v23;
        __n128 v8 = (unsigned __int8 *)(v11 + v23 + 1);
        goto LABEL_82;
      }
    }

    double v13 = (double)v16;
    int v22 = -(int)v23;
    __n128 v8 = (unsigned __int8 *)(v11 + v23 + 1);
LABEL_54:
    while (v10 <= 0x39)
    {
      if ((int)v14 <= 16)
      {
        double v13 = (double)(int)(v10 - 48) + v13 * 10.0;
        --v22;
        if (v13 > 0.0) {
          LODWORD(v14) = v14 + 1;
        }
      }

      int v26 = (char)*++v8;
      unsigned int v10 = v26;
      if (v26 <= 47)
      {
        int v25 = 0;
        goto LABEL_82;
      }
    }

    int v17 = 1;
  }

  else
  {
    int v22 = 0;
    __n128 v8 = (unsigned __int8 *)v11;
  }

  if (v10 != 101 && v10 != 69)
  {
    uint64_t v47 = v21;
    uint64_t v48 = result;
    int v46 = v9;
    if ((v17 & 1) == 0)
    {
      if (v18)
      {
        if (v6 == 45) {
          uint64_t result = sub_1000077D4(a3, -(uint64_t)v16);
        }
        else {
          uint64_t result = sub_100007850(a3, v16);
        }
        if ((result & 1) == 0)
        {
          if (*(_DWORD *)(v48 + 48)) {
            __assert_rtn("ParseNumber", "reader.h", 1731, "!HasParseError()");
          }
          *(_DWORD *)(v48 + 4std::ostream::~ostream(v1, v2 + 8) = 16;
          *(void *)(v48 + 56) = v47;
        }

        goto LABEL_97;
      }

      uint64_t result = sub_100006D2C((void *)(a3 + 40), 1LL);
      *(void *)(result + std::ostream::~ostream(v1, v2 + 8) = 0LL;
      *(void *)(result + 16) = 0LL;
      if (v6 == 45)
      {
        *(void *)uint64_t result = -v46;
        BOOL v45 = -v46 < 0;
        __int16 v38 = 182;
      }

      else
      {
        *(void *)uint64_t result = v46;
        BOOL v45 = v46 < 0;
        __int16 v38 = 470;
      }

      if (!v45) {
        __int16 v38 = 502;
      }
LABEL_96:
      *(_WORD *)(result + 22) = v38;
      goto LABEL_97;
    }

    int v25 = 0;
LABEL_82:
    unsigned int v34 = v22 + v25;
    if ((int)v34 > -309)
    {
      if ((v34 & 0x80000000) == 0)
      {
        if (v34 >= 0x135)
        {
          int v41 = "n >= 0 && n <= 308";
          int v42 = 48;
          uint64_t v43 = "pow10.h";
          v44 = "Pow10";
          goto LABEL_114;
        }

        double v35 = v13 * dbl_100060198[v34];
        goto LABEL_90;
      }

      unsigned int v36 = -v34;
    }

    else
    {
      double v35 = 0.0;
      if (v34 < 0xFFFFFD98)
      {
LABEL_93:
        uint64_t result = sub_100006D2C((void *)(a3 + 40), 1LL);
        double v37 = -v35;
        if (v6 != 45) {
          double v37 = v35;
        }
        *(void *)(result + std::ostream::~ostream(v1, v2 + 8) = 0LL;
        *(void *)(result + 16) = 0LL;
        *(double *)uint64_t result = v37;
        __int16 v38 = 534;
        goto LABEL_96;
      }

      double v13 = v13 / 1.0e308;
      unsigned int v36 = -308 - v34;
    }

    double v35 = v13 / dbl_100060198[v36];
LABEL_90:
    if (v35 > 1.79769313e308)
    {
      if (!*(_DWORD *)(result + 48)) {
        goto LABEL_92;
      }
      int v41 = "!HasParseError()";
      int v42 = 1707;
      uint64_t v43 = "reader.h";
      v44 = "ParseNumber";
LABEL_114:
      __assert_rtn(v44, v43, v42, v41);
    }

    goto LABEL_93;
  }

  unsigned int v28 = v8 + 1;
  int v27 = v8[1];
  unint64_t v9 = v9;
  if (v18) {
    unint64_t v9 = v16;
  }
  if (!v17) {
    double v13 = (double)v9;
  }
  if (v27 == 43 || v27 == 45)
  {
    unsigned int v28 = v8 + 2;
    int v25 = v8[2] - 48;
    if (v25 < 0xA)
    {
      v8 += 3;
      if (v27 == 43) {
        goto LABEL_69;
      }
      if (v22 >= 1) {
        __assert_rtn("ParseNumber", "reader.h", 1639, "expFrac <= 0");
      }
      int v30 = *v8;
      if ((v30 - 48) > 9)
      {
LABEL_77:
        int v32 = 1;
      }

      else
      {
        while (1)
        {
          int v25 = v30 + 10 * v25 - 48;
          if (v25 > (v22 + 2147483639) / 10) {
            break;
          }
          int v31 = *++v8;
          int v30 = v31;
        }

        do
        {
          int v33 = *++v8;
          int v32 = 1;
        }

        while ((v33 - 48) < 0xA);
      }

      goto LABEL_80;
    }

    goto LABEL_109;
  }

  int v25 = v27 - 48;
  if ((v27 - 48) > 9)
  {
LABEL_109:
    __n128 v8 = v28;
    if (*(_DWORD *)(result + 48)) {
      __assert_rtn("ParseNumber", "reader.h", 1660, "!HasParseError()");
    }
    uint64_t v39 = (unsigned __int8 *)(v28 - v5);
    int v40 = 15;
LABEL_111:
    *(_DWORD *)(result + 4std::ostream::~ostream(v1, v2 + 8) = v40;
    *(void *)(result + 56) = v39;
    goto LABEL_97;
  }

  v8 += 2;
  do
  {
LABEL_69:
    int v29 = *v8;
    if ((v29 - 48) > 9)
    {
      int v32 = 0;
LABEL_80:
      if (v32) {
        int v25 = -v25;
      }
      goto LABEL_82;
    }

    ++v8;
    int v25 = v29 + 10 * v25 - 48;
  }

  while (v25 <= 308 - v22);
  if (*(_DWORD *)(result + 48)) {
    __assert_rtn("ParseNumber", "reader.h", 1655, "!HasParseError()");
  }
LABEL_92:
  *(_DWORD *)(result + 4std::ostream::~ostream(v1, v2 + 8) = 13;
  *(void *)(result + 56) = v21;
LABEL_97:
  *a2 = v8;
  a2[1] = v5;
  return result;
}

    unint64_t v16 = 0LL;
    int v17 = 0;
    LODWORD(v14) = 0;
    int v18 = 0;
    goto LABEL_41;
  }

  if (v12 > 9) {
    goto LABEL_102;
  }
  uint64_t v14 = 0LL;
  while (1)
  {
    if (v9 > 0xCCCCCCB)
    {
      if ((_DWORD)v9 != 214748364) {
        goto LABEL_14;
      }
      if (v10 > 0x38) {
        break;
      }
    }

    LODWORD(v9) = v10 + 10 * v9 - 48;
    unsigned int v10 = v8[v14++ + 2];
    if (v10 - 48 >= 0xA)
    {
      unint64_t v16 = 0LL;
      int v17 = 0;
      int v18 = 0;
      uint64_t v11 = (uint64_t)&v8[v14 + 1];
      goto LABEL_41;
    }
  }

  unsigned int v10 = 57;
  LODWORD(v9) = 214748364;
LABEL_14:
  uint64_t v11 = (uint64_t)&v8[v14 + 1];
LABEL_24:
  unint64_t v16 = v9;
  if (v6 == 45)
  {
    while (v16 <= 0xCCCCCCCCCCCCCCBLL || v16 == 0xCCCCCCCCCCCCCCCLL && v10 <= 0x38)
    {
      unsigned int v15 = *(unsigned __int8 *)++v11;
      unint64_t v16 = v10 - 48 + 10 * v16;
      LODWORD(v14) = v14 + 1;
      unsigned int v10 = v15;
      if (v15 - 48 >= 0xA) {
        goto LABEL_39;
      }
    }
  }

  else
  {
    while (v16 <= 0x1999999999999998LL || v16 == 0x1999999999999999LL && v10 <= 0x35)
    {
      unsigned int v19 = *(unsigned __int8 *)++v11;
      unint64_t v16 = v10 - 48 + 10 * v16;
      LODWORD(v14) = v14 + 1;
      unsigned int v10 = v19;
      if (v19 - 48 >= 0xA)
      {
LABEL_39:
        int v17 = 0;
        double v13 = 0.0;
        goto LABEL_40;
      }
    }
  }

  double v13 = (double)v16;
  do
  {
    unsigned int v20 = *(unsigned __int8 *)++v11;
    double v13 = (double)(int)(v10 - 48) + v13 * 10.0;
    unsigned int v10 = v20;
  }

  while (v20 - 48 < 0xA);
  int v17 = 1;
LABEL_40:
  int v18 = 1;
LABEL_41:
  uint64_t v21 = v4 - v5;
  if (v10 == 46)
  {
    __n128 v8 = (unsigned __int8 *)(v11 + 1);
    unsigned int v10 = *(unsigned __int8 *)(v11 + 1);
    if (v10 - 48 >= 0xA)
    {
      if (*(_DWORD *)(result + 48)) {
        __assert_rtn("ParseNumber", "reader.h", 1575, "!HasParseError()");
      }
      uint64_t v39 = (unsigned __int8 *)(v8 - v5);
      int v40 = 14;
      goto LABEL_111;
    }

    if ((v17 & 1) != 0)
    {
      int v22 = 0;
      goto LABEL_54;
    }

    uint64_t v23 = 0LL;
    if (!v18) {
      unint64_t v16 = v9;
    }
    while (v10 <= 0x39 && !(v16 >> 53))
    {
      unint64_t v16 = v10 - 48 + 10 * v16;
      if (v16) {
        LODWORD(v14) = v14 + 1;
      }
      int v24 = *(char *)(v11 + v23 + 2);
      unsigned int v10 = *(unsigned __int8 *)(v11 + v23++ + 2);
      if (v24 <= 47)
      {
        int v25 = 0;
        double v13 = (double)v16;
        int v22 = -(int)v23;
        __n128 v8 = (unsigned __int8 *)(v11 + v23 + 1);
        goto LABEL_82;
      }
    }

    double v13 = (double)v16;
    int v22 = -(int)v23;
    __n128 v8 = (unsigned __int8 *)(v11 + v23 + 1);
LABEL_54:
    while (v10 <= 0x39)
    {
      if ((int)v14 <= 16)
      {
        double v13 = (double)(int)(v10 - 48) + v13 * 10.0;
        --v22;
        if (v13 > 0.0) {
          LODWORD(v14) = v14 + 1;
        }
      }

      int v26 = (char)*++v8;
      unsigned int v10 = v26;
      if (v26 <= 47)
      {
        int v25 = 0;
        goto LABEL_82;
      }
    }

    int v17 = 1;
  }

  else
  {
    int v22 = 0;
    __n128 v8 = (unsigned __int8 *)v11;
  }

  if (v10 != 101 && v10 != 69)
  {
    uint64_t v47 = v21;
    uint64_t v48 = result;
    int v46 = v9;
    if ((v17 & 1) == 0)
    {
      if (v18)
      {
        if (v6 == 45) {
          uint64_t result = sub_1000077D4(a3, -(uint64_t)v16);
        }
        else {
          uint64_t result = sub_100007850(a3, v16);
        }
        if ((result & 1) == 0)
        {
          if (*(_DWORD *)(v48 + 48)) {
            __assert_rtn("ParseNumber", "reader.h", 1731, "!HasParseError()");
          }
          *(_DWORD *)(v48 + 4std::ostream::~ostream(v1, v2 + 8) = 16;
          *(void *)(v48 + 56) = v47;
        }

        goto LABEL_97;
      }

      uint64_t result = sub_100006D2C((void *)(a3 + 40), 1LL);
      *(void *)(result + std::ostream::~ostream(v1, v2 + 8) = 0LL;
      *(void *)(result + 16) = 0LL;
      if (v6 == 45)
      {
        *(void *)uint64_t result = -v46;
        BOOL v45 = -v46 < 0;
        __int16 v38 = 182;
      }

      else
      {
        *(void *)uint64_t result = v46;
        BOOL v45 = v46 < 0;
        __int16 v38 = 470;
      }

      if (!v45) {
        __int16 v38 = 502;
      }
LABEL_96:
      *(_WORD *)(result + 22) = v38;
      goto LABEL_97;
    }

    int v25 = 0;
LABEL_82:
    unsigned int v34 = v22 + v25;
    if (v34 > -309)
    {
      if ((v34 & 0x80000000) == 0)
      {
        if (v34 >= 0x135)
        {
          int v41 = "n >= 0 && n <= 308";
          int v42 = 48;
          uint64_t v43 = "pow10.h";
          v44 = "Pow10";
          goto LABEL_114;
        }

        double v35 = v13 * dbl_100060198[v34];
        goto LABEL_90;
      }

      unsigned int v36 = -v34;
    }

    else
    {
      double v35 = 0.0;
      if (v34 < 0xFFFFFD98)
      {
LABEL_93:
        uint64_t result = sub_100006D2C((void *)(a3 + 40), 1LL);
        double v37 = -v35;
        if (v6 != 45) {
          double v37 = v35;
        }
        *(void *)(result + std::ostream::~ostream(v1, v2 + 8) = 0LL;
        *(void *)(result + 16) = 0LL;
        *(double *)uint64_t result = v37;
        __int16 v38 = 534;
        goto LABEL_96;
      }

      double v13 = v13 / 1.0e308;
      unsigned int v36 = -308 - v34;
    }

    double v35 = v13 / dbl_100060198[v36];
LABEL_90:
    if (v35 > 1.79769313e308)
    {
      if (!*(_DWORD *)(result + 48)) {
        goto LABEL_92;
      }
      int v41 = "!HasParseError()";
      int v42 = 1707;
      uint64_t v43 = "reader.h";
      v44 = "ParseNumber";
LABEL_114:
      __assert_rtn(v44, v43, v42, v41);
    }

    goto LABEL_93;
  }

  unsigned int v28 = v8 + 1;
  int v27 = v8[1];
  unint64_t v9 = v9;
  if (v18) {
    unint64_t v9 = v16;
  }
  if (!v17) {
    double v13 = (double)v9;
  }
  if (v27 == 43 || v27 == 45)
  {
    unsigned int v28 = v8 + 2;
    int v25 = v8[2] - 48;
    if (v25 < 0xA)
    {
      v8 += 3;
      if (v27 == 43) {
        goto LABEL_69;
      }
      if (v22 >= 1) {
        __assert_rtn("ParseNumber", "reader.h", 1639, "expFrac <= 0");
      }
      int v30 = *v8;
      if ((v30 - 48) > 9)
      {
LABEL_77:
        int v32 = 1;
      }

      else
      {
        while (1)
        {
          int v25 = v30 + 10 * v25 - 48;
          if (v25 > (v22 + 2147483639) / 10) {
            break;
          }
          int v31 = *++v8;
          int v30 = v31;
        }

        do
        {
          int v33 = *++v8;
          int v32 = 1;
        }

        while ((v33 - 48) < 0xA);
      }

      goto LABEL_80;
    }

    goto LABEL_109;
  }

  int v25 = v27 - 48;
  if ((v27 - 48) > 9)
  {
LABEL_109:
    __n128 v8 = v28;
    if (*(_DWORD *)(result + 48)) {
      __assert_rtn("ParseNumber", "reader.h", 1660, "!HasParseError()");
    }
    uint64_t v39 = (unsigned __int8 *)(v28 - v5);
    int v40 = 15;
LABEL_111:
    *(_DWORD *)(result + 4std::ostream::~ostream(v1, v2 + 8) = v40;
    *(void *)(result + 56) = v39;
    goto LABEL_97;
  }

  v8 += 2;
  do
  {
LABEL_69:
    int v29 = *v8;
    if ((v29 - 48) > 9)
    {
      int v32 = 0;
LABEL_80:
      if (v32) {
        int v25 = -v25;
      }
      goto LABEL_82;
    }

    ++v8;
    int v25 = v29 + 10 * v25 - 48;
  }

  while (v25 <= 308 - v22);
  if (*(_DWORD *)(result + 48)) {
    __assert_rtn("ParseNumber", "reader.h", 1655, "!HasParseError()");
  }
LABEL_92:
  *(_DWORD *)(result + 4std::ostream::~ostream(v1, v2 + 8) = 13;
  *(void *)(result + 56) = v21;
LABEL_97:
  *a2 = v8;
  a2[1] = v5;
  return result;
}

          uint64_t v47 = "\n";
        }

        else
        {
          uint64_t v47 = " ";
          if (*(_DWORD *)(a1 + 16) < *(_DWORD *)(a2 + 12)) {
            goto LABEL_102;
          }
        }

        std::string::append(a3, v47);
        if (v35 < 0 && v82 >= 1)
        {
          sub_100003200(&__p, (v82 - 1), 10);
          if ((v88 & 0x80u) == 0) {
            uint64_t v48 = (const std::string::value_type *)&__p;
          }
          else {
            uint64_t v48 = (const std::string::value_type *)__p;
          }
          if ((v88 & 0x80u) == 0) {
            unint64_t v49 = v88;
          }
          else {
            unint64_t v49 = v87;
          }
          std::string::append(a3, v48, v49);
          if (v84 || v38 >= 0 || (v10 & 1) == 0) {
            std::string::append(a3, "\n");
          }
          v82 = 0;
        }

void sub_100006D0C(_Unwind_Exception *a1)
{
  *uint64_t v1 = v3;
  v1[1] = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100006D2C(void *a1, uint64_t a2)
{
  if (24 * a2 > a1[4] - a1[3]) {
    sub_100006DC0(a1, a2);
  }
  return sub_100006D7C((uint64_t)a1, a2);
}

uint64_t sub_100006D7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_10005E738();
  }
  if (24 * a2 > *(void *)(a1 + 32) - v2) {
    sub_10005E760();
  }
  *(void *)(a1 + 24) = v2 + 24 * a2;
  return v2;
}

char *sub_100006DC0(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  if (v4)
  {
    unint64_t v5 = a1[4] - v4 + ((unint64_t)(a1[4] - v4 + 1) >> 1);
  }

  else
  {
    if (!*a1)
    {
      int v6 = operator new(1uLL);
      *a1 = v6;
      a1[1] = v6;
    }

    uint64_t v4 = 0LL;
    unint64_t v5 = a1[5];
  }

  unint64_t v7 = 24 * a2 - v4 + a1[3];
  if (v5 <= v7) {
    size_t v8 = v7;
  }
  else {
    size_t v8 = v5;
  }
  return sub_100006E38(a1, v8);
}

char *sub_100006E38(void *a1, size_t __size)
{
  uint64_t v4 = (void *)a1[2];
  uint64_t v5 = a1[3];
  if (__size)
  {
    uint64_t result = (char *)realloc(v4, __size);
  }

  else
  {
    free(v4);
    uint64_t result = 0LL;
  }

  a1[2] = result;
  a1[3] = &result[v5 - (void)v4];
  a1[4] = &result[__size];
  return result;
}

_BYTE *sub_100006E94(_BYTE *result, uint64_t *a2, void **a3)
{
  uint64_t v5 = (uint64_t)result;
  while (1)
  {
    while (1)
    {
      int v6 = (char *)*a2;
      unsigned int v7 = *(unsigned __int8 *)*a2;
      if (v7 == 92) {
        break;
      }
      if (v7 == 34)
      {
        *a2 = (uint64_t)(v6 + 1);
        uint64_t result = (_BYTE *)sub_10000733C(*a3, 1LL);
        *uint64_t result = 0;
        ++*((_DWORD *)a3 + 2);
        return result;
      }

      if (v7 <= 0x1F)
      {
        int v14 = *(_DWORD *)(v5 + 48);
        if (*(_BYTE *)*a2)
        {
          if (v14) {
            sub_10005E7B0();
          }
          unsigned int v15 = &v6[-a2[1]];
          int v16 = 12;
        }

        else
        {
          if (v14) {
            sub_10005E788();
          }
          unsigned int v15 = &v6[-a2[1]];
          int v16 = 11;
        }

        *(_DWORD *)(v5 + 4std::ostream::~ostream(v1, v2 + 8) = v16;
        goto LABEL_25;
      }

      *a2 = (uint64_t)(v6 + 1);
      char v8 = *v6;
LABEL_6:
      uint64_t result = (_BYTE *)sub_10000733C(*a3, 1LL);
      *uint64_t result = v8;
      ++*((_DWORD *)a3 + 2);
    }

    uint64_t v9 = a2[1];
    *a2 = (uint64_t)(v6 + 1);
    uint64_t v10 = v6[1];
    char v8 = byte_100060098[v10];
    if (v8)
    {
      *a2 = (uint64_t)(v6 + 2);
      goto LABEL_6;
    }

    uint64_t v11 = (uint64_t)&v6[-v9];
    if ((_DWORD)v10 != 117) {
      break;
    }
    *a2 = (uint64_t)(v6 + 2);
    uint64_t v18 = (uint64_t)&v6[-v9];
    uint64_t result = (_BYTE *)sub_10000713C(v5, a2, v11);
    if (*(_DWORD *)(v5 + 48)) {
      return result;
    }
    unsigned int v12 = result;
    if (result >> 10 == 54)
    {
      int v17 = (int)result;
      uint64_t v13 = *a2;
      if (*(_BYTE *)*a2 != 92) {
        goto LABEL_31;
      }
      *a2 = v13 + 1;
      if (*(_BYTE *)(v13 + 1) != 117) {
        goto LABEL_31;
      }
      *a2 = v13 + 2;
      uint64_t result = (_BYTE *)sub_10000713C(v5, a2, v18);
      if (*(_DWORD *)(v5 + 48)) {
        return result;
      }
      if (((_DWORD)result - 57344) <= 0xFFFFFBFF)
      {
LABEL_31:
        *(_DWORD *)(v5 + 4std::ostream::~ostream(v1, v2 + 8) = 9;
        unsigned int v15 = (char *)v18;
LABEL_25:
        *(void *)(v5 + 56) = v15;
        return result;
      }

      unsigned int v12 = (((_DWORD)result - 56320) | ((v17 << 10) - 56623104)) + 0x10000;
    }

    uint64_t result = sub_1000071DC(a3, v12);
  }

  if (*(_DWORD *)(v5 + 48)) {
    sub_10005E7D8();
  }
  *(_DWORD *)(v5 + 4std::ostream::~ostream(v1, v2 + 8) = 10;
  *(void *)(v5 + 56) = v11;
  return result;
}

uint64_t sub_10000709C(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)a1;
  unint64_t v4 = a1[2];
  uint64_t v5 = *(void *)(*(void *)a1 + 24LL);
  if (v5 - *(void *)(*(void *)a1 + 16LL) < v4) {
    sub_10005E4E4((uint64_t)a1, a2, a3);
  }
  uint64_t result = v5 - v4;
  *(void *)(v3 + 24) = v5 - v4;
  return result;
}

uint64_t sub_1000070D0(uint64_t a1, void *a2, int a3, int a4)
{
  char v8 = (void *)sub_100006D2C((void *)(a1 + 40), 1LL);
  if (a4)
  {
    uint64_t v11 = *(size_t **)(a1 + 24);
    if (!v11) {
      sub_10005E800((uint64_t)v8, v9, v10);
    }
    sub_100007430(v8, a2, a3, v11);
  }

  else
  {
    sub_1000075F4((uint64_t)v8, a2, a3);
  }

  return 1LL;
}

uint64_t sub_10000713C(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = result;
  uint64_t v4 = 0LL;
  LODWORD(result) = 0;
  uint64_t v5 = *a2;
  while (1)
  {
    int v6 = *(char *)(v5 + v4);
    int v7 = -48;
LABEL_8:
    uint64_t result = (v6 + 16 * result + v7);
    *a2 = v5 + v4++ + 1;
    if ((_DWORD)v4 == 4) {
      return result;
    }
  }

  if (*(unsigned __int8 *)(v5 + v4) - 65 < 6)
  {
    int v7 = -55;
    goto LABEL_8;
  }

  if (*(unsigned __int8 *)(v5 + v4) - 97 < 6)
  {
    int v7 = -87;
    goto LABEL_8;
  }

  if (*(_DWORD *)(v3 + 48)) {
    sub_10005E824();
  }
  uint64_t result = 0LL;
  *(_DWORD *)(v3 + 4std::ostream::~ostream(v1, v2 + 8) = 8;
  *(void *)(v3 + 56) = a3;
  return result;
}

_BYTE *sub_1000071DC(void **a1, unsigned int a2)
{
  if (a2 > 0x7F)
  {
    if (a2 > 0x7FF)
    {
      if (HIWORD(a2))
      {
        if (a2 >= 0x110000) {
          sub_10005E84C();
        }
        *(_BYTE *)sub_10000733C(*a1, 1LL) = (a2 >> 18) | 0xF0;
        int v6 = a1 + 1;
        ++*((_DWORD *)a1 + 2);
        *(_BYTE *)sub_10000733C(*a1, 1LL) = (a2 >> 12) & 0x3F | 0x80;
        ++*((_DWORD *)a1 + 2);
      }

      else
      {
        *(_BYTE *)sub_10000733C(*a1, 1LL) = (a2 >> 12) | 0xE0;
        int v6 = a1 + 1;
        ++*((_DWORD *)a1 + 2);
      }

      *(_BYTE *)sub_10000733C(*a1, 1LL) = (a2 >> 6) & 0x3F | 0x80;
      ++*v6;
    }

    else
    {
      *(_BYTE *)sub_10000733C(*a1, 1LL) = (a2 >> 6) | 0xC0;
      int v6 = a1 + 1;
      ++*((_DWORD *)a1 + 2);
    }

    uint64_t result = (_BYTE *)sub_10000733C(*a1, 1LL);
    *uint64_t result = a2 & 0x3F | 0x80;
    uint64_t v4 = v6;
  }

  else
  {
    uint64_t v4 = a1 + 1;
    uint64_t result = (_BYTE *)sub_10000733C(*a1, 1LL);
    *uint64_t result = a2;
  }

  ++*v4;
  return result;
}

uint64_t sub_10000733C(void *a1, uint64_t a2)
{
  if (a1[4] - a1[3] < a2) {
    sub_1000073C0(a1, a2);
  }
  return sub_100007384((uint64_t)a1, a2);
}

uint64_t sub_100007384(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_10005E738();
  }
  if (*(void *)(a1 + 32) - v2 < a2) {
    sub_10005E760();
  }
  *(void *)(a1 + 24) = v2 + a2;
  return v2;
}

char *sub_1000073C0(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  if (v4)
  {
    unint64_t v5 = a1[4] - v4 + ((unint64_t)(a1[4] - v4 + 1) >> 1);
  }

  else
  {
    if (!*a1)
    {
      int v6 = operator new(1uLL);
      *a1 = v6;
      a1[1] = v6;
    }

    uint64_t v4 = 0LL;
    unint64_t v5 = a1[5];
  }

  size_t v7 = a2 - v4 + a1[3];
  if (v5 <= v7) {
    size_t v8 = v7;
  }
  else {
    size_t v8 = v5;
  }
  return sub_100006E38(a1, v8);
}

void *sub_100007430(void *__dst, void *a2, int a3, size_t *a4)
{
  *__dst = 0LL;
  __dst[1] = 0LL;
  std::locale __dst[2] = 0LL;
  unint64_t v5 = &unk_10006A022;
  if (a2) {
    unint64_t v5 = a2;
  }
  size_t v7 = v5;
  int v8 = a3;
  if (!a2 && a3) {
    sub_10005E874();
  }
  sub_100007494(__dst, (uint64_t)&v7, a4);
  return __dst;
}

void *sub_100007494(_WORD *__dst, uint64_t a2, size_t *a3)
{
  uint64_t v4 = __dst;
  if (*(_DWORD *)(a2 + 8) > 0x15u)
  {
    __dst[11] = 3077;
    *(_DWORD *)__dst = *(_DWORD *)(a2 + 8);
    uint64_t v5 = sub_10000751C(a3, (*(_DWORD *)(a2 + 8) + 1));
    v4[1] = v5;
    uint64_t v4 = (void *)v5;
  }

  else
  {
    __dst[11] = 7173;
    *((_BYTE *)__dst + 21) = 21 - *(_BYTE *)(a2 + 8);
  }

  uint64_t result = memcpy(v4, *(const void **)a2, *(unsigned int *)(a2 + 8));
  *((_BYTE *)v4 + *(unsigned int *)(a2 + sub_100005988(v1, *(void **)(v1 + 8)) = 0;
  return result;
}

uint64_t sub_10000751C(size_t *a1, uint64_t a2)
{
  if (!a2) {
    return 0LL;
  }
  unint64_t v3 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v4 = (void *)*a1;
  if (*a1)
  {
    uint64_t v5 = v4[1];
    uint64_t v6 = v5 + v3;
    if (v5 + v3 <= *v4) {
      goto LABEL_9;
    }
  }

  if (a1[1] <= v3) {
    unint64_t v7 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  }
  else {
    unint64_t v7 = a1[1];
  }
  if (sub_10000759C(a1, v7))
  {
    uint64_t v4 = (void *)*a1;
    uint64_t v5 = *(void *)(*a1 + 8);
    uint64_t v6 = v5 + v3;
LABEL_9:
    uint64_t result = (uint64_t)v4 + v5 + 24;
    v4[1] = v6;
    return result;
  }

  return 0LL;
}

size_t sub_10000759C(size_t *a1, uint64_t a2)
{
  if (!a1[3])
  {
    uint64_t v4 = operator new(1uLL);
    a1[3] = (size_t)v4;
    a1[4] = (size_t)v4;
  }

  size_t result = a2 + 24;
  if (a2 != -24)
  {
    size_t result = (size_t)malloc(result);
    if (result)
    {
      *(void *)size_t result = a2;
      *(void *)(result + std::ostream::~ostream(v1, v2 + 8) = 0LL;
      *(void *)(result + 16) = *a1;
      *a1 = result;
      return 1LL;
    }
  }

  return result;
}

uint64_t sub_1000075F4(uint64_t result, void *a2, int a3)
{
  *(void *)size_t result = 0LL;
  *(void *)(result + std::ostream::~ostream(v1, v2 + 8) = 0LL;
  *(void *)(result + 16) = 0LL;
  if (!a2 && a3) {
    __assert_rtn("GenericStringRef", "document.h", 322, "str != 0 || len == 0u");
  }
  unint64_t v3 = &unk_10006A022;
  *(_WORD *)(result + 22) = 1029;
  if (a2) {
    unint64_t v3 = a2;
  }
  *(void *)(result + std::ostream::~ostream(v1, v2 + 8) = v3;
  *(_DWORD *)size_t result = a3;
  return result;
}

uint64_t sub_10000765C(void *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = a2;
  uint64_t v6 = sub_1000076FC((uint64_t)(a1 + 5), a2, a3);
  uint64_t v9 = a1[8];
  uint64_t v10 = (const void *)v6;
  uint64_t v11 = (size_t *)a1[3];
  if (!v11) {
    sub_10005E800(0LL, v7, v8);
  }
  *(_WORD *)(v9 - 2) = 3;
  if (a2)
  {
    uint64_t v12 = 48 * v5;
    uint64_t v13 = (void *)sub_10000751C(v11, v12);
    *(void *)(v9 - 16) = v13;
    memcpy(v13, v10, v12);
  }

  else
  {
    *(void *)(v9 - 16) = 0LL;
  }

  *(_DWORD *)(v9 - 24) = a2;
  *(_DWORD *)(v9 - 20) = a2;
  return 1LL;
}

uint64_t sub_1000076FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = v3 - 48 * a2;
  *(void *)(a1 + 24) = v4;
  return v4;
}

uint64_t sub_100007734(void *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = a2;
  uint64_t v6 = sub_100005CD8((uint64_t)(a1 + 5), a2, a3);
  uint64_t v9 = a1[8];
  uint64_t v10 = (const void *)v6;
  uint64_t v11 = (size_t *)a1[3];
  if (!v11) {
    sub_10005E800(0LL, v7, v8);
  }
  *(_WORD *)(v9 - 2) = 4;
  if (a2)
  {
    uint64_t v12 = 24 * v5;
    uint64_t v13 = (void *)sub_10000751C(v11, v12);
    *(void *)(v9 - 16) = v13;
    memcpy(v13, v10, v12);
  }

  else
  {
    *(void *)(v9 - 16) = 0LL;
  }

  *(_DWORD *)(v9 - 24) = a2;
  *(_DWORD *)(v9 - 20) = a2;
  return 1LL;
}

uint64_t sub_1000077D4(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = sub_100006D2C((void *)(a1 + 40), 1LL);
  *(void *)(v3 + std::ostream::~ostream(v1, v2 + 8) = 0LL;
  *(void *)(v3 + 16) = 0LL;
  *(void *)uint64_t v3 = a2;
  *(_WORD *)(v3 + 22) = 150;
  if ((a2 & 0x8000000000000000LL) != 0)
  {
    if (a2 >= 0xFFFFFFFF80000000LL)
    {
      __int16 v5 = 182;
      goto LABEL_9;
    }
  }

  else
  {
    if (HIDWORD(a2)) {
      __int16 v4 = 406;
    }
    else {
      __int16 v4 = 470;
    }
    *(_WORD *)(v3 + 22) = v4;
    if (!(a2 >> 31))
    {
      __int16 v5 = v4 | 0x20;
LABEL_9:
      *(_WORD *)(v3 + 22) = v5;
    }
  }

  return 1LL;
}

uint64_t sub_100007850(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100006D2C((void *)(a1 + 40), 1LL);
  *(void *)(v3 + std::ostream::~ostream(v1, v2 + 8) = 0LL;
  *(void *)(v3 + 16) = 0LL;
  *(void *)uint64_t v3 = a2;
  if (a2 < 0) {
    __int16 v4 = 278;
  }
  else {
    __int16 v4 = 406;
  }
  *(_WORD *)(v3 + 22) = v4;
  if (!HIDWORD(a2))
  {
    *(_WORD *)(v3 + 22) = v4 | 0x40;
  }

  return 1LL;
}

void *sub_1000078B8(void *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1 + 40LL);
  *(void *)(v2 + 64) = *(void *)(v2 + 56);
  sub_1000078F0(v3);
  return a1;
}

void sub_1000078F0(void *a1)
{
  __int16 v4 = (_BYTE *)a1[2];
  uint64_t v3 = (_BYTE *)a1[3];
  __int16 v5 = a1 + 2;
  if (v3 == v4)
  {
    free(v3);
    void *v5 = 0LL;
    v5[1] = 0LL;
    v5[2] = 0LL;
  }

  else
  {
    sub_100006E38(a1, v3 - v4);
  }

uint64_t sub_100007938(uint64_t a1)
{
  return a1;
}

void sub_100007968(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = (void *)sub_10000798C(v1);
    operator delete(v2);
  }

uint64_t sub_10000798C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void *sub_1000079C0(void **a1)
{
  size_t result = *a1;
  if (result)
  {
    while (result != a1[2])
    {
      uint64_t v3 = (void *)result[2];
      free(result);
      *a1 = v3;
      size_t result = v3;
      if (!v3) {
        return result;
      }
    }

    result[1] = 0LL;
  }

  return result;
}

uint64_t sub_100007A0C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8LL) {
    sub_10000226C();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    uint64_t v6 = operator new(v4 + 1);
    *(void *)(a1 + std::ostream::~ostream(v1, v2 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000LL;
    *(void *)a1 = v6;
  }

  else
  {
    *(void *)(a1 + std::ostream::~ostream(v1, v2 + 8) = 0LL;
    *(void *)(a1 + 16) = 0LL;
    *(void *)a1 = 0LL;
    *(_BYTE *)(a1 + 23) = a2;
  }

  return a1;
}

uint64_t sub_100007A90(uint64_t a1, const void **a2)
{
  uint64_t v2 = *sub_100005600(a1, &v4, a2);
  if (!v2) {
    sub_100007B88("map::at:  key not found");
  }
  return v2 + 56;
}

char *sub_100007ACC(uint64_t a1, __int128 *a2, __int128 *a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v11 = __dst;
  uint64_t v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_10000231C(v4, *(void **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }

      else
      {
        __int128 v7 = *v6;
        *((void *)v4 + 2) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v4 = v7;
      }

      uint64_t v6 = (__int128 *)((char *)v6 + 24);
      v4 += 24;
      uint64_t v12 = v4;
    }

    while (v6 != a3);
  }

  char v10 = 1;
  sub_10000277C((uint64_t)v9);
  return v4;
}

void sub_100007B74( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100007B88(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_100007BD8(exception, a1);
}

void sub_100007BC4(_Unwind_Exception *a1)
{
}

std::logic_error *sub_100007BD8(std::logic_error *a1, const char *a2)
{
  size_t result = std::logic_error::logic_error(a1, a2);
  return result;
}

void sub_100007BFC(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_1000059D0(v4 - 16);
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void sub_100007C6C(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
}

void sub_100007C74(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
}

void sub_100007C7C(uint64_t a1)
{
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_100007CF0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100007D24(void *a1, uint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3) < 3 || sub_100038648((uint64_t)a1))
  {
    sub_100038638(a2);
    sub_1000021BC( &__p,  "\n <EXECUTABLE> <COMMAND> <catfile1> <catfile2>\n \n Compare two CAT files by loading into memory and comparing the in-memory representation.\n This comparison will therefore ignore whitespace differences between the two files.\n");
    sub_1000021BC(__dst, "diff");
    sub_1000388C0((uint64_t)a1, (uint64_t)__dst, (uint64_t)&__p);
    if (SHIBYTE(v72) < 0) {
      operator delete(__dst[0].__locale_);
    }
    if (SHIBYTE(v62) < 0) {
      operator delete(__p);
    }
    return 0LL;
  }

  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3) <= 3)
  {
    uint64_t v4 = sub_100002F60(&std::cout, (uint64_t)"Error: insufficient arguments specified for catutil diff", 56LL);
    std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24LL)));
    char v5 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
    uint64_t v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10LL);
    std::locale::~locale((std::locale *)&__p);
    std::ostream::put(v4, v6);
    std::ostream::flush(v4);
    return 0LL;
  }

  uint64_t v9 = sub_1000086EC(*a1 + 48LL);
  char v10 = sub_1000086EC(*a1 + 72LL);
  uint64_t v7 = 0LL;
  if (v9)
  {
    uint64_t v11 = v10;
    if (v10)
    {
      siri::dialogengine::Context::GetFile(v9);
      if (v61)
      {
        p_shared_owners = (unint64_t *)&v61->__shared_owners_;
        do
          unint64_t v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }

      siri::dialogengine::Context::GetFile(v11);
      if (v61)
      {
        int v14 = (unint64_t *)&v61->__shared_owners_;
        do
          unint64_t v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }

      int v16 = siri::dialogengine::File::operator!=(__p, __p);
      sub_100008994(v9, (uint64_t)&v69);
      sub_100008994(v11, (uint64_t)&v67);
      std::string __p = &v61;
      int v61 = 0LL;
      v64[0] = 0LL;
      v64[1] = 0LL;
      uint64_t v62 = 0LL;
      std::string::size_type v63 = v64;
      v66[0] = 0LL;
      v66[1] = 0LL;
      v65 = v66;
      int v17 = v69;
      if (v69 != v70)
      {
        do
        {
          if (*((char *)v17 + 55) < 0)
          {
            sub_10000231C(__dst, v17[4], (unint64_t)v17[5]);
          }

          else
          {
            *(_OWORD *)&__dst[0].__locale_ = *((_OWORD *)v17 + 2);
            unint64_t v72 = v17[6];
          }

          __int128 v73 = v17[7];
          uint64_t v18 = sub_100008EC0((uint64_t)&v67, (const void **)&__dst[0].__locale_);
          unsigned int v19 = (uint64_t **)&v63;
          if (v68 == (char **)v18
            || (int v20 = siri::dialogengine::Dialog::operator!=(v73, *(void *)(v18 + 56)), v19 = (uint64_t **)&v65, v20))
          {
            sub_100008F4C(v19, (const void **)&__dst[0].__locale_, (uint64_t)__dst);
          }

          if (SHIBYTE(v72) < 0) {
            operator delete(__dst[0].__locale_);
          }
          uint64_t v21 = v17[1];
          if (v21)
          {
            do
            {
              int v22 = (char **)v21;
              uint64_t v21 = *(char **)v21;
            }

            while (v21);
          }

          else
          {
            do
            {
              int v22 = (char **)v17[2];
              BOOL v23 = *v22 == (char *)v17;
              int v17 = v22;
            }

            while (!v23);
          }

          int v17 = v22;
        }

        while (v22 != v70);
      }

      int v24 = v67;
      if (v67 != v68)
      {
        do
        {
          if (*((char *)v24 + 55) < 0)
          {
            sub_10000231C(__dst, v24[4], (unint64_t)v24[5]);
          }

          else
          {
            *(_OWORD *)&__dst[0].__locale_ = *((_OWORD *)v24 + 2);
            unint64_t v72 = v24[6];
          }

          __int128 v73 = v24[7];
          if (SHIBYTE(v72) < 0) {
            operator delete(__dst[0].__locale_);
          }
          int v25 = v24[1];
          if (v25)
          {
            do
            {
              int v26 = (char **)v25;
              int v25 = *(char **)v25;
            }

            while (v25);
          }

          else
          {
            do
            {
              int v26 = (char **)v24[2];
              BOOL v23 = *v26 == (char *)v24;
              int v24 = v26;
            }

            while (!v23);
          }

          int v24 = v26;
        }

        while (v26 != v68);
      }

      if ((v16 & 1) != 0)
      {
        int v27 = sub_100002F60(&std::cout, (uint64_t)"CAT files are different.", 24LL);
        std::ios_base::getloc((const std::ios_base *)((char *)v27 + *(void *)(*v27 - 24LL)));
        unsigned int v28 = std::locale::use_facet(__dst, &std::ctype<char>::id);
        uint64_t v29 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10LL);
        std::locale::~locale(__dst);
        std::ostream::put(v27, v29);
        std::ostream::flush(v27);
        int v30 = (char *)__p;
        if (__p != &v61)
        {
          do
          {
            if (v30[55] < 0)
            {
              sub_10000231C(__dst, *((void **)v30 + 4), *((void *)v30 + 5));
            }

            else
            {
              *(_OWORD *)&__dst[0].__locale_ = *((_OWORD *)v30 + 2);
              unint64_t v72 = (char *)*((void *)v30 + 6);
            }

            std::operator+<char>(&v57, "Dialog added: ", __dst);
            if ((v59 & 0x80u) == 0) {
              int v31 = &v57;
            }
            else {
              int v31 = v57;
            }
            if ((v59 & 0x80u) == 0) {
              uint64_t v32 = v59;
            }
            else {
              uint64_t v32 = v58;
            }
            int v33 = sub_100002F60(&std::cout, (uint64_t)v31, v32);
            std::ios_base::getloc((const std::ios_base *)((char *)v33 + *(void *)(*v33 - 24LL)));
            unsigned int v34 = std::locale::use_facet(&v74, &std::ctype<char>::id);
            uint64_t v35 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 10LL);
            std::locale::~locale(&v74);
            std::ostream::put(v33, v35);
            std::ostream::flush(v33);
            if (SHIBYTE(v72) < 0) {
              operator delete(__dst[0].__locale_);
            }
            unsigned int v36 = (char *)*((void *)v30 + 1);
            if (v36)
            {
              do
              {
                double v37 = (char **)v36;
                unsigned int v36 = *(char **)v36;
              }

              while (v36);
            }

            else
            {
              do
              {
                double v37 = (char **)*((void *)v30 + 2);
                BOOL v23 = *v37 == v30;
                int v30 = (char *)v37;
              }

              while (!v23);
            }

            int v30 = (char *)v37;
          }

          while (v37 != (char **)&v61);
        }

        __int16 v38 = v65;
        if (v65 != v66)
        {
          do
          {
            if (*((char *)v38 + 55) < 0)
            {
              sub_10000231C(__dst, v38[4], (unint64_t)v38[5]);
            }

            else
            {
              *(_OWORD *)&__dst[0].__locale_ = *((_OWORD *)v38 + 2);
              unint64_t v72 = v38[6];
            }

            std::operator+<char>(&v57, "Dialog changed: ", __dst);
            if ((v59 & 0x80u) == 0) {
              uint64_t v39 = &v57;
            }
            else {
              uint64_t v39 = v57;
            }
            if ((v59 & 0x80u) == 0) {
              uint64_t v40 = v59;
            }
            else {
              uint64_t v40 = v58;
            }
            int v41 = sub_100002F60(&std::cout, (uint64_t)v39, v40);
            std::ios_base::getloc((const std::ios_base *)((char *)v41 + *(void *)(*v41 - 24LL)));
            int v42 = std::locale::use_facet(&v74, &std::ctype<char>::id);
            uint64_t v43 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v42->__vftable[2].~facet_0)(v42, 10LL);
            std::locale::~locale(&v74);
            std::ostream::put(v41, v43);
            std::ostream::flush(v41);
            if (SHIBYTE(v72) < 0) {
              operator delete(__dst[0].__locale_);
            }
            v44 = v38[1];
            if (v44)
            {
              do
              {
                BOOL v45 = (char **)v44;
                v44 = *(char **)v44;
              }

              while (v44);
            }

            else
            {
              do
              {
                BOOL v45 = (char **)v38[2];
                BOOL v23 = *v45 == (char *)v38;
                __int16 v38 = v45;
              }

              while (!v23);
            }

            __int16 v38 = v45;
          }

          while (v45 != v66);
        }

        int v46 = v63;
        if (v63 != v64)
        {
          do
          {
            if (*((char *)v46 + 55) < 0)
            {
              sub_10000231C(__dst, v46[4], (unint64_t)v46[5]);
            }

            else
            {
              *(_OWORD *)&__dst[0].__locale_ = *((_OWORD *)v46 + 2);
              unint64_t v72 = v46[6];
            }

            std::operator+<char>(&v57, "Dialog deleted: ", __dst);
            if ((v59 & 0x80u) == 0) {
              uint64_t v47 = &v57;
            }
            else {
              uint64_t v47 = v57;
            }
            if ((v59 & 0x80u) == 0) {
              uint64_t v48 = v59;
            }
            else {
              uint64_t v48 = v58;
            }
            unint64_t v49 = sub_100002F60(&std::cout, (uint64_t)v47, v48);
            std::ios_base::getloc((const std::ios_base *)((char *)v49 + *(void *)(*v49 - 24LL)));
            v50 = std::locale::use_facet(&v74, &std::ctype<char>::id);
            uint64_t v51 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v50->__vftable[2].~facet_0)(v50, 10LL);
            std::locale::~locale(&v74);
            std::ostream::put(v49, v51);
            std::ostream::flush(v49);
            if (SHIBYTE(v72) < 0) {
              operator delete(__dst[0].__locale_);
            }
            unint64_t v52 = v46[1];
            if (v52)
            {
              do
              {
                v53 = (char **)v52;
                unint64_t v52 = *(char **)v52;
              }

              while (v52);
            }

            else
            {
              do
              {
                v53 = (char **)v46[2];
                BOOL v23 = *v53 == (char *)v46;
                int v46 = v53;
              }

              while (!v23);
            }

            int v46 = v53;
          }

          while (v53 != v64);
        }
      }

      else
      {
        unsigned __int8 v54 = sub_100002F60(&std::cout, (uint64_t)"CAT files are equal.", 20LL);
        std::ios_base::getloc((const std::ios_base *)((char *)v54 + *(void *)(*v54 - 24LL)));
        v55 = std::locale::use_facet(__dst, &std::ctype<char>::id);
        uint64_t v56 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v55->__vftable[2].~facet_0)(v55, 10LL);
        std::locale::~locale(__dst);
        std::ostream::put(v54, v56);
        std::ostream::flush(v54);
      }

      uint64_t v7 = v16 ^ 1u;
      sub_100009064((uint64_t)&v65, v66[0]);
      sub_100009064((uint64_t)&v63, v64[0]);
      sub_100009064((uint64_t)&__p, (char *)v61);
      sub_100009064((uint64_t)&v67, v68[0]);
      sub_100009064((uint64_t)&v69, v70[0]);
    }
  }

  return v7;
}

void sub_1000085F0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, std::locale a19, uint64_t a20, int a21, __int16 a22, char a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31, char *a32, uint64_t a33, char a34, char *a35)
{
}

siri::dialogengine::Context *sub_1000086EC(uint64_t a1)
{
  if ((siri::dialogengine::FileExists() & 1) == 0)
  {
    std::operator+<char>(&__p, "Error: CAT file not found: ", a1);
    if ((v24 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if ((v24 & 0x80u) == 0) {
      uint64_t v7 = v24;
    }
    else {
      uint64_t v7 = (uint64_t)v23;
    }
    uint64_t v8 = sub_100002F60(&std::cout, (uint64_t)p_p, v7);
    std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(*v8 - 24LL)));
    uint64_t v9 = std::locale::use_facet(&v20, &std::ctype<char>::id);
    uint64_t v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10LL);
    std::locale::~locale(&v20);
    std::ostream::put(v8, v10);
    std::ostream::flush(v8);
    return 0LL;
  }

  uint64_t v2 = (siri::dialogengine::Context *)operator new(0xDB8uLL);
  siri::dialogengine::Context::Context(v2);
  siri::dialogengine::ParseXmlFile(&__p, v2, a1);
  if (__p)
  {
    siri::dialogengine::Context::GetFile(v2);
    BOOL v3 = v20.__locale_ == 0LL;
    if (v21)
    {
      p_shared_owners = &v21->__shared_owners_;
      do
        unint64_t v5 = __ldaxr((unint64_t *)p_shared_owners);
      while (__stlxr(v5 - 1, (unint64_t *)p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }

  else
  {
    BOOL v3 = 1;
  }

  uint64_t v11 = v23;
  if (v23)
  {
    uint64_t v12 = (unint64_t *)&v23->__shared_owners_;
    do
      unint64_t v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (!v3) {
        return v2;
      }
      goto LABEL_22;
    }
  }

  if (v3)
  {
LABEL_22:
    std::operator+<char>(&__p, "Error: Cannot parse CAT file: ", a1);
    if ((v24 & 0x80u) == 0) {
      int v14 = &__p;
    }
    else {
      int v14 = __p;
    }
    if ((v24 & 0x80u) == 0) {
      uint64_t v15 = v24;
    }
    else {
      uint64_t v15 = (uint64_t)v23;
    }
    int v16 = sub_100002F60(&std::cout, (uint64_t)v14, v15);
    std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(*v16 - 24LL)));
    int v17 = std::locale::use_facet(&v20, &std::ctype<char>::id);
    uint64_t v18 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10LL);
    std::locale::~locale(&v20);
    std::ostream::put(v16, v18);
    std::ostream::flush(v16);
    (*(void (**)(siri::dialogengine::Context *))(*(void *)v2 + 8LL))(v2);
    return 0LL;
  }

  return v2;
}

void sub_100008944( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

void sub_100008994(siri::dialogengine::Context *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + std::ostream::~ostream(v1, v2 + 8) = 0LL;
  *(void *)a2 = a2 + 8;
  siri::dialogengine::Context::GetFile(a1);
  siri::dialogengine::File::GetRoot(v12);
  sub_100008B14(a1, v10, (uint64_t **)a2);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)())v11->__on_zero_shared)();
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  Fallbacuint64_t k = (siri::dialogengine::Group *)siri::dialogengine::File::GetFallback(v12);
  sub_100008B14(a1, Fallback, (uint64_t **)a2);
  Phrases = (siri::dialogengine::Group *)siri::dialogengine::File::GetPhrases(v12);
  sub_100008B14(a1, Phrases, (uint64_t **)a2);
  if (v13)
  {
    uint64_t v8 = (unint64_t *)&v13->__shared_owners_;
    do
      unint64_t v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)())v13->__on_zero_shared)();
      std::__shared_weak_count::__release_weak(v13);
    }
  }

void sub_100008A94( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

char **sub_100008AD0(char **a1)
{
  return a1;
}

void sub_100008B14(siri::dialogengine::Context *a1, siri::dialogengine::Group *a2, uint64_t **a3)
{
  if (a2)
  {
    siri::dialogengine::Group::GetNodes(a2);
    uint64_t v6 = v26;
    for (uint64_t i = v27; v6 != i; v6 += 16LL)
    {
      uint64_t v8 = *(const void **)v6;
      uint64_t v7 = *(std::__shared_weak_count **)(v6 + 8);
      unsigned __int8 v24 = *(const void **)v6;
      int v25 = v7;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          unint64_t v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }

      if (v8)
      {
        if (!v11) {
          goto LABEL_16;
        }
        uint64_t v12 = (uint64_t)v11;
        siri::dialogengine::Context::GetFile(a1);
        siri::dialogengine::File::GetOrCreateId(__p, v20, v12, 1LL, 0LL);
        unint64_t v13 = v21;
        if (v21)
        {
          int v14 = (unint64_t *)&v21->__shared_owners_;
          do
            unint64_t v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }

        std::locale v20 = __p;
        sub_100008D3C(a3, (const void **)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v20)[7] = v12;
        if (v23 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v8 = v24;
        if (v24)
        {
LABEL_16:
          if (v16) {
            sub_100008B14(a1, v16, a3);
          }
        }
      }

      int v17 = v25;
      if (v25)
      {
        uint64_t v18 = (unint64_t *)&v25->__shared_owners_;
        do
          unint64_t v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
    }

    __p[0] = &v26;
    sub_100007BFC((void ***)__p);
  }

void sub_100008CEC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char a20)
{
  std::string __p = &a20;
  sub_100007BFC((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t *sub_100008D3C(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t v6 = (uint64_t **)sub_100005600((uint64_t)a1, &v9, a2);
  size_t result = *v6;
  if (!*v6)
  {
    sub_100008DD0((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000055AC(a1, v9, v6, v8);
    return v8;
  }

  return result;
}

_BYTE *sub_100008DD0@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + std::ostream::~ostream(v1, v2 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  size_t result = v6 + 32;
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    size_t result = sub_10000231C(result, *(void **)v8, *((void *)v8 + 1));
  }

  else
  {
    __int128 v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)size_t result = v9;
  }

  *((void *)v6 + 7) = 0LL;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_100008E58(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0LL;
  sub_100008E74(v3, v2);
  _Unwind_Resume(a1);
}

void sub_100008E74(uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
  }

  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t sub_100008EC0(uint64_t a1, const void **a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 16;
  uint64_t v6 = a1 + 8;
  do
  {
    BOOL v7 = sub_10000569C(v5, (const void **)(v3 + 32), a2);
    uint64_t v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      uint64_t v8 = (uint64_t *)v3;
      uint64_t v6 = v3;
    }

    uint64_t v3 = *v8;
  }

  while (*v8);
  return v6;
}

uint64_t *sub_100008F4C(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t **)sub_100005600((uint64_t)a1, &v8, a2);
  size_t result = *v5;
  if (!*v5)
  {
    sub_100008FC8((uint64_t)a1, a3, (uint64_t)&v7);
    sub_1000055AC(a1, v8, v5, v7);
    return v7;
  }

  return result;
}

void *sub_100008FC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x38uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + std::ostream::~ostream(v1, v2 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  size_t result = v6 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    size_t result = sub_10000231C(result, *(void **)a2, *(void *)(a2 + 8));
  }

  else
  {
    *(_OWORD *)size_t result = *(_OWORD *)a2;
    result[2] = *(void *)(a2 + 16);
  }

  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_100009048(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0LL;
  sub_100008E74(v3, v2);
  _Unwind_Resume(a1);
}

void sub_100009064(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_100009064(a1, *(void *)a2);
    sub_100009064(a1, *((void *)a2 + 1));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }

void sub_1000090B4(uint64_t a1)
{
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_100009128( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10000915C(void *a1, uint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3) < 3 || sub_100038648((uint64_t)a1))
  {
    sub_100038638(a2);
    sub_1000021BC( &__p,  "\n <EXECUTABLE> <COMMAND> --templateDir <dir> [--catId <id>] [--visualCatId <id>] [--xml] [--json]\n [--excludeComputed] [--includeValueFromCat] [--debug]\n \n Returns a list of all of the parameters used by the specified CAT file, including\n parameters used by dialog CATs referenced by a visual CAT.\n \n The optional --xml and --json arguments output the information in those formats,\n to make it easier for other tooling to ingest the information programmatically.\n \n The --excludeComputed option will exclude all computed parameters.\n The --includeValueFromCat option will include Visual CAT parameters with this attribute.\n");
    sub_1000021BC(&v55, "params");
    sub_1000388C0((uint64_t)a1, (uint64_t)&v55, (uint64_t)&__p);
    if (SHIBYTE(v57) < 0) {
      operator delete(v55);
    }
    if (v54 < 0) {
      operator delete(__p);
    }
    return 0LL;
  }

  sub_1000021BC(&__p, "--debug");
  BOOL v7 = (siri::dialogengine::Log *)siri::dialogengine::OptionExists(a1, &__p);
  if (v54 < 0) {
    operator delete(__p);
  }
  siri::dialogengine::Log::SetOutputToStdout(v7, v6);
  sub_1000021BC(&v55, "--templateDir");
  siri::dialogengine::GetOption(&__p, a1, &v55);
  siri::dialogengine::ExpandPath(v66, &__p);
  if (v54 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v57) < 0) {
    operator delete(v55);
  }
  sub_1000021BC(&__p, "--catId");
  siri::dialogengine::GetOption(v64, a1, &__p);
  if (v54 < 0) {
    operator delete(__p);
  }
  sub_1000021BC(&__p, "--visualCatId");
  siri::dialogengine::GetOption(v62, a1, &__p);
  if (v54 < 0) {
    operator delete(__p);
  }
  sub_1000021BC(&__p, "--excludeComputed");
  int v8 = siri::dialogengine::OptionExists(a1, &__p);
  if (v54 < 0) {
    operator delete(__p);
  }
  sub_1000021BC(&__p, "--includeValueFromCat");
  uint64_t v9 = siri::dialogengine::OptionExists(a1, &__p);
  if (v54 < 0) {
    operator delete(__p);
  }
  unint64_t v10 = v67;
  if ((v67 & 0x80u) != 0) {
    unint64_t v10 = (unint64_t)v66[1];
  }
  BOOL v11 = v10 != 0;
  if (!v10)
  {
    uint64_t v12 = sub_100002F60(&std::cerr, (uint64_t)"Error: The option --templateDir is required", 45LL);
    std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(*v12 - 24LL)));
    unint64_t v13 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
    uint64_t v14 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10LL);
    std::locale::~locale((std::locale *)&__p);
    std::ostream::put(v12, v14);
    std::ostream::flush(v12);
  }

  unint64_t v15 = v65;
  if ((v65 & 0x80u) != 0) {
    unint64_t v15 = (unint64_t)v64[1];
  }
  unint64_t v16 = v63;
  if ((v63 & 0x80u) != 0) {
    unint64_t v16 = (unint64_t)v62[1];
  }
  if (!v16)
  {
    if (!v15)
    {
      uint64_t v48 = sub_100002F60(&std::cerr, (uint64_t)"Error: One of --catId or --visualCatId is required", 54LL);
      std::ios_base::getloc((const std::ios_base *)((char *)v48 + *(void *)(*v48 - 24LL)));
      unint64_t v49 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
      uint64_t v50 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v49->__vftable[2].~facet_0)(v49, 10LL);
      std::locale::~locale((std::locale *)&__p);
      std::ostream::put(v48, v50);
      std::ostream::flush(v48);
      int v20 = 0;
      BOOL v11 = 0;
      LODWORD(v15) = 1;
LABEL_36:
      int v21 = 1;
      if (!(_DWORD)v9) {
        goto LABEL_42;
      }
LABEL_39:
      if ((v15 | v21) == 1)
      {
        int v22 = sub_100002F60( &std::cerr,  (uint64_t)"Warning: The option --includeValueFromCat should only be used with --visualCatId",  84LL);
        std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(void *)(*v22 - 24LL)));
        char v23 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
        uint64_t v24 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10LL);
        std::locale::~locale((std::locale *)&__p);
        std::ostream::put(v22, v24);
        std::ostream::flush(v22);
      }

      else
      {
        int v20 = 1;
      }

      goto LABEL_42;
    }

LABEL_35:
    LODWORD(v15) = 0;
    int v20 = 0;
    goto LABEL_36;
  }

  if (v15)
  {
    int v17 = sub_100002F60( &std::cerr,  (uint64_t)"Warning: Both --catId and --visualCatId are specified; The option --visualCatId will be ignored",
            101LL);
    std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(void *)(*v17 - 24LL)));
    uint64_t v18 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
    uint64_t v19 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10LL);
    std::locale::~locale((std::locale *)&__p);
    std::ostream::put(v17, v19);
    std::ostream::flush(v17);
    goto LABEL_35;
  }

  int v21 = 0;
  int v20 = 1;
  if ((_DWORD)v9) {
    goto LABEL_39;
  }
LABEL_42:
  sub_1000021BC(&__p, "--json");
  int v25 = siri::dialogengine::OptionExists(a1, &__p);
  if (v54 < 0) {
    operator delete(__p);
  }
  sub_1000021BC(&__p, "--xml");
  int v26 = siri::dialogengine::OptionExists(a1, &__p);
  if (v54 < 0) {
    operator delete(__p);
  }
  int v27 = v26 & v25;
  if (v26) {
    int v28 = 2;
  }
  else {
    int v28 = v25;
  }
  if (v27 == 1)
  {
    uint64_t v29 = sub_100002F60( &std::cerr,  (uint64_t)"Warning: Both --json and --xml are specified; The option --xml will be ignored",
            84LL);
    std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(void *)(*v29 - 24LL)));
    int v30 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
    uint64_t v31 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10LL);
    std::locale::~locale((std::locale *)&__p);
    std::ostream::put(v29, v31);
    std::ostream::flush(v29);
    int v28 = 1;
  }

  if (v11)
  {
    uint64_t v59 = 0LL;
    uint64_t v60 = 0LL;
    uint64_t v61 = 0LL;
    uint64_t v56 = 0LL;
    uint64_t v57 = 0LL;
    v55 = &v56;
    char v58 = 0;
    siri::dialogengine::GetTemplateDirs(&__p, v66, 0LL);
    if (v20) {
      char ParamsForVisualCat = siri::dialogengine::GetParamsForVisualCat(&__p, v62, v9, &v55, &v59);
    }
    else {
      char ParamsForVisualCat = siri::dialogengine::GetParamsForDialogCat(&__p, v64, &v55, &v59);
    }
    char v33 = ParamsForVisualCat;
    v51[0] = &__p;
    sub_10000AE78(v51);
    if ((v33 & 1) != 0)
    {
      if (v8)
      {
        siri::dialogengine::AllComputedParameterNames(v34);
        uint64_t v35 = (char *)__p;
        if (__p != &v53)
        {
          do
          {
            siri::dialogengine::ParameterCollection::RemoveParameter(&v55, v35 + 32);
            unsigned int v36 = (char *)*((void *)v35 + 1);
            if (v36)
            {
              do
              {
                double v37 = (char **)v36;
                unsigned int v36 = *(char **)v36;
              }

              while (v36);
            }

            else
            {
              do
              {
                double v37 = (char **)*((void *)v35 + 2);
                BOOL v38 = *v37 == v35;
                uint64_t v35 = (char *)v37;
              }

              while (!v38);
            }

            uint64_t v35 = (char *)v37;
          }

          while (v37 != &v53);
        }

        sub_100009064((uint64_t)&__p, v53);
      }

      siri::dialogengine::Context::Context((siri::dialogengine::Context *)&__p);
      siri::dialogengine::ParameterCollection::GetUniqueParameters( (siri::dialogengine::ParameterCollection *)&v55,  (siri::dialogengine::Context *)&__p);
      sub_100009AC0(v51, v28);
      sub_100005988((uint64_t)v51, v51[1]);
      siri::dialogengine::Context::~Context((siri::dialogengine::Context *)&__p);
      uint64_t v4 = 1LL;
    }

    else
    {
      uint64_t v39 = v59;
      for (uint64_t i = v60; v39 != i; v39 += 24LL)
      {
        int v41 = sub_100002F60(&std::cerr, (uint64_t)"Error: ", 7LL);
        int v42 = *(char *)(v39 + 23);
        if (v42 >= 0) {
          uint64_t v43 = v39;
        }
        else {
          uint64_t v43 = *(void *)v39;
        }
        if (v42 >= 0) {
          uint64_t v44 = *(unsigned __int8 *)(v39 + 23);
        }
        else {
          uint64_t v44 = *(void *)(v39 + 8);
        }
        BOOL v45 = sub_100002F60(v41, v43, v44);
        std::ios_base::getloc((const std::ios_base *)((char *)v45 + *(void *)(*v45 - 24LL)));
        int v46 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
        uint64_t v47 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v46->__vftable[2].~facet_0)(v46, 10LL);
        std::locale::~locale((std::locale *)&__p);
        std::ostream::put(v45, v47);
        std::ostream::flush(v45);
      }

      uint64_t v4 = 0LL;
    }

    sub_10000AD80((uint64_t)&v55, v56);
    std::string __p = &v59;
    sub_1000027F4((void ***)&__p);
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  return v4;
}

void sub_100009900( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  *(void *)(v17 - 192) = v17 - 160;
  sub_1000027F4((void ***)(v17 - 192));
  _Unwind_Resume(a1);
}

void sub_100009AC0(void *a1, int a2)
{
  uint64_t v63 = 0LL;
  unint64_t v64 = 0LL;
  unint64_t v65 = 0LL;
  uint64_t v4 = a1 + 1;
  char v5 = (void *)*a1;
  if ((void *)*a1 == a1 + 1)
  {
    unint64_t v6 = 0LL;
    uint64_t v12 = 0LL;
  }

  else
  {
    unint64_t v6 = 0LL;
    do
    {
      BOOL v7 = (__int128 *)(v5 + 4);
      if (v6 >= v65)
      {
        unint64_t v6 = sub_100002C30(&v63, v7);
      }

      else
      {
        if (*((char *)v5 + 55) < 0)
        {
          sub_10000231C((_BYTE *)v6, (void *)v5[4], v5[5]);
        }

        else
        {
          __int128 v8 = *v7;
          *(void *)(v6 + 16) = v5[6];
          *(_OWORD *)unint64_t v6 = v8;
        }

        v6 += 24LL;
      }

      unint64_t v64 = v6;
      uint64_t v9 = (void *)v5[1];
      if (v9)
      {
        do
        {
          unint64_t v10 = v9;
          uint64_t v9 = (void *)*v9;
        }

        while (v9);
      }

      else
      {
        do
        {
          unint64_t v10 = (void *)v5[2];
          BOOL v11 = *v10 == (void)v5;
          char v5 = v10;
        }

        while (!v11);
      }

      char v5 = v10;
    }

    while (v10 != v4);
    uint64_t v12 = v63;
  }

  unint64_t v13 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v12) >> 3));
  if (v6 == v12) {
    uint64_t v14 = 0LL;
  }
  else {
    uint64_t v14 = v13;
  }
  sub_10000AF60(v12, v6, v14, 1);
  uint64_t v15 = v63;
  if (v64 != v63)
  {
    uint64_t v16 = 0LL;
    unint64_t v17 = 0LL;
    do
    {
      uint64_t v18 = sub_100008EC0((uint64_t)a1, (const void **)(v15 + v16));
      uint64_t v19 = *(siri::dialogengine::PropertyBase **)(v18 + 56);
      uint64_t v20 = a1[2] - 1LL;
      if (a2 == 1)
      {
        if (!v17)
        {
          int v30 = sub_100002F60(&std::cout, (uint64_t)"{", 1LL);
          std::ios_base::getloc((const std::ios_base *)((char *)v30 + *(void *)(*v30 - 24LL)));
          uint64_t v31 = std::locale::use_facet(&v60, &std::ctype<char>::id);
          uint64_t v32 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 10LL);
          std::locale::~locale(&v60);
          std::ostream::put(v30, v32);
          std::ostream::flush(v30);
          char v33 = sub_100002F60(&std::cout, (uint64_t)"  parameters: [", 17LL);
          std::ios_base::getloc((const std::ios_base *)((char *)v33 + *(void *)(*v33 - 24LL)));
          unsigned int v34 = std::locale::use_facet(&v60, &std::ctype<char>::id);
          uint64_t v35 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 10LL);
          std::locale::~locale(&v60);
          std::ostream::put(v33, v35);
          std::ostream::flush(v33);
        }

        unsigned int v36 = sub_100002F60(&std::cout, (uint64_t)"    {", 5LL);
        std::ios_base::getloc((const std::ios_base *)((char *)v36 + *(void *)(*v36 - 24LL)));
        double v37 = std::locale::use_facet(&v60, &std::ctype<char>::id);
        uint64_t v38 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v37->__vftable[2].~facet_0)(v37, 10LL);
        std::locale::~locale(&v60);
        std::ostream::put(v36, v38);
        std::ostream::flush(v36);
        sub_1000021BC(&v60, "name");
        siri::dialogengine::PropertyBase::GetName(v19);
        sub_10000A8E8((uint64_t)&v60, (uint64_t)__p, 1);
        sub_1000021BC(&v60, "description");
        siri::dialogengine::PropertyBase::GetDescription(v19);
        sub_10000A8E8((uint64_t)&v60, (uint64_t)__p, 1);
        sub_1000021BC(&v60, "semanticConcept");
        siri::dialogengine::ObjectProperty::GetSemanticConcept(v19);
        sub_10000A8E8((uint64_t)&v60, (uint64_t)__p, 1);
        sub_1000021BC(&v60, "deprecated");
        siri::dialogengine::PropertyBase::GetDeprecated(v19);
        sub_10000A8E8((uint64_t)&v60, (uint64_t)__p, 1);
        sub_1000021BC(&v60, "type");
        siri::dialogengine::PropertyBase::GetType(v19);
        sub_10000A8E8((uint64_t)&v60, (uint64_t)__p, 0);
        if (v17 == v20)
        {
          uint64_t v39 = sub_100002F60(&std::cout, (uint64_t)"    }", 5LL);
          std::ios_base::getloc((const std::ios_base *)((char *)v39 + *(void *)(*v39 - 24LL)));
          uint64_t v40 = std::locale::use_facet(&v60, &std::ctype<char>::id);
          uint64_t v41 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v40->__vftable[2].~facet_0)(v40, 10LL);
          std::locale::~locale(&v60);
          std::ostream::put(v39, v41);
          std::ostream::flush(v39);
          int v42 = sub_100002F60(&std::cout, (uint64_t)"  ]", 3LL);
          std::ios_base::getloc((const std::ios_base *)((char *)v42 + *(void *)(*v42 - 24LL)));
          uint64_t v43 = std::locale::use_facet(&v60, &std::ctype<char>::id);
          uint64_t v44 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v43->__vftable[2].~facet_0)(v43, 10LL);
          std::locale::~locale(&v60);
          std::ostream::put(v42, v44);
          std::ostream::flush(v42);
          int v27 = (std::ostream *)sub_100002F60(&std::cout, (uint64_t)"}", 1LL);
        }

        else
        {
          int v27 = (std::ostream *)sub_100002F60(&std::cout, (uint64_t)"    },", 6LL);
        }

        std::ios_base::getloc((const std::ios_base *)((char *)v27 + (unint64_t)v27->__vftable[-2].~basic_ostream_0));
        BOOL v45 = std::locale::use_facet(&v60, &std::ctype<char>::id);
        uint64_t v46 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v45->__vftable[2].~facet_0)(v45, 10LL);
        std::locale::~locale(&v60);
        std::ostream::put(v27, v46);
      }

      else if (a2 == 2)
      {
        if (!v17)
        {
          int v21 = sub_100002F60(&std::cout, (uint64_t)"<parameters>", 12LL);
          std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(void *)(*v21 - 24LL)));
          int v22 = std::locale::use_facet(&v60, &std::ctype<char>::id);
          uint64_t v23 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10LL);
          std::locale::~locale(&v60);
          std::ostream::put(v21, v23);
          std::ostream::flush(v21);
        }

        sub_100002F60(&std::cout, (uint64_t)"  <parameter", 12LL);
        sub_1000021BC(&v60, "name");
        siri::dialogengine::PropertyBase::GetName(v19);
        sub_10000A70C((uint64_t)&v60, (uint64_t)__p);
        sub_1000021BC(&v60, "type");
        siri::dialogengine::PropertyBase::GetType(v19);
        sub_10000A70C((uint64_t)&v60, (uint64_t)__p);
        sub_1000021BC(&v60, "description");
        siri::dialogengine::PropertyBase::GetDescription(v19);
        sub_10000A70C((uint64_t)&v60, (uint64_t)__p);
        sub_1000021BC(&v60, "semanticConcept");
        siri::dialogengine::ObjectProperty::GetSemanticConcept(v19);
        sub_10000A70C((uint64_t)&v60, (uint64_t)__p);
        sub_1000021BC(&v60, "deprecated");
        siri::dialogengine::PropertyBase::GetDeprecated(v19);
        sub_10000A70C((uint64_t)&v60, (uint64_t)__p);
        uint64_t v24 = sub_100002F60(&std::cout, (uint64_t)"/>", 2LL);
        std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(void *)(*v24 - 24LL)));
        int v25 = std::locale::use_facet(&v60, &std::ctype<char>::id);
        uint64_t v26 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10LL);
        std::locale::~locale(&v60);
        std::ostream::put(v24, v26);
        std::ostream::flush(v24);
        if (v17 != v20) {
          goto LABEL_104;
        }
        int v27 = (std::ostream *)sub_100002F60(&std::cout, (uint64_t)"</parameters>", 13LL);
        std::ios_base::getloc((const std::ios_base *)((char *)v27 + (unint64_t)v27->__vftable[-2].~basic_ostream_0));
        int v28 = std::locale::use_facet(&v60, &std::ctype<char>::id);
        uint64_t v29 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10LL);
        std::locale::~locale(&v60);
        std::ostream::put(v27, v29);
      }

      else
      {
        siri::dialogengine::PropertyBase::GetName(*(siri::dialogengine::PropertyBase **)(v18 + 56));
        if ((v62 & 0x80u) == 0) {
          locale = &v60;
        }
        else {
          locale = v60.__locale_;
        }
        if ((v62 & 0x80u) == 0) {
          uint64_t v48 = v62;
        }
        else {
          uint64_t v48 = v61;
        }
        unint64_t v49 = sub_100002F60(&std::cout, (uint64_t)locale, v48);
        uint64_t v50 = sub_100002F60(v49, (uint64_t)": ", 2LL);
        siri::dialogengine::PropertyBase::GetType(v19);
        if ((v59 & 0x80u) == 0) {
          uint64_t v51 = __p;
        }
        else {
          uint64_t v51 = (void **)__p[0];
        }
        if ((v59 & 0x80u) == 0) {
          uint64_t v52 = v59;
        }
        else {
          uint64_t v52 = (uint64_t)__p[1];
        }
        sub_100002F60(v50, (uint64_t)v51, v52);
        sub_1000021BC(&v60, "description");
        siri::dialogengine::PropertyBase::GetDescription(v19);
        sub_10000ABDC((uint64_t)&v60, (uint64_t)__p);
        sub_1000021BC(&v60, "semanticConcept");
        siri::dialogengine::ObjectProperty::GetSemanticConcept(v19);
        sub_10000ABDC((uint64_t)&v60, (uint64_t)__p);
        sub_1000021BC(&v60, "deprecated");
        siri::dialogengine::PropertyBase::GetDeprecated(v19);
        sub_10000ABDC((uint64_t)&v60, (uint64_t)__p);
        std::ios_base::getloc((const std::ios_base *)((char *)&std::cout
                                                    + (unint64_t)std::cout.__vftable[-2].~basic_ostream_0));
        v53 = std::locale::use_facet(&v60, &std::ctype<char>::id);
        uint64_t v54 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v53->__vftable[2].~facet_0)(v53, 10LL);
        std::locale::~locale(&v60);
        std::ostream::put(&std::cout, v54);
        int v27 = &std::cout;
      }

      std::ostream::flush(v27);
LABEL_104:
      ++v17;
      uint64_t v15 = v63;
      v16 += 24LL;
    }

    while (v17 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v64 - v63) >> 3));
  }

  if (a2 == 1 && !a1[2])
  {
    v55 = sub_100002F60(&std::cout, (uint64_t)"{}", 2LL);
    std::ios_base::getloc((const std::ios_base *)((char *)v55 + *(void *)(*v55 - 24LL)));
    uint64_t v56 = std::locale::use_facet(&v60, &std::ctype<char>::id);
    uint64_t v57 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v56->__vftable[2].~facet_0)(v56, 10LL);
    std::locale::~locale(&v60);
    std::ostream::put(v55, v57);
    std::ostream::flush(v55);
  }

  v60.__locale_ = (std::locale::__imp *)&v63;
  sub_1000027F4((void ***)&v60);
}

void sub_10000A5C8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::locale a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, char a22, uint64_t a23)
{
  std::string __p = &a22;
  sub_1000027F4((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_10000A70C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0LL) {
    uint64_t v3 = *(void *)(a2 + 8);
  }
  if (v3)
  {
    std::operator+<char>(&v16, " ", a1);
    uint64_t v4 = std::string::append(&v16, "=");
    __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__l.__cap_ = v4->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0LL;
    v4->__r_.__value_.__l.__cap_ = 0LL;
    v4->__r_.__value_.__r.__words[0] = 0LL;
    siri::dialogengine::EncodeXmlString(__p, a2);
    if ((v15 & 0x80u) == 0) {
      unint64_t v6 = __p;
    }
    else {
      unint64_t v6 = (void **)__p[0];
    }
    if ((v15 & 0x80u) == 0) {
      std::string::size_type v7 = v15;
    }
    else {
      std::string::size_type v7 = (std::string::size_type)__p[1];
    }
    __int128 v8 = std::string::append(&v17, (const std::string::value_type *)v6, v7);
    __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0LL;
    v8->__r_.__value_.__l.__cap_ = 0LL;
    v8->__r_.__value_.__r.__words[0] = 0LL;
    unint64_t v10 = std::string::append(&v18, "");
    __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    int64_t cap = v10->__r_.__value_.__l.__cap_;
    __int128 v19 = v11;
    v10->__r_.__value_.__l.__size_ = 0LL;
    v10->__r_.__value_.__l.__cap_ = 0LL;
    v10->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      uint64_t v12 = &v19;
    }
    else {
      uint64_t v12 = (__int128 *)v19;
    }
    if (cap >= 0) {
      uint64_t v13 = HIBYTE(cap);
    }
    else {
      uint64_t v13 = *((void *)&v19 + 1);
    }
    sub_100002F60(&std::cout, (uint64_t)v12, v13);
    if (SHIBYTE(cap) < 0) {
      operator delete((void *)v19);
    }
  }

void sub_10000A86C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, void *__p, uint64_t a29, int a30, __int16 a31, char a32, char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10000A8E8(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0LL) {
    uint64_t v4 = *(void *)(a2 + 8);
  }
  if (v4)
  {
    std::operator+<char>(&v24, "      ", result);
    unint64_t v6 = std::string::append(&v24, ": ");
    __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__l.__cap_ = v6->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0LL;
    v6->__r_.__value_.__l.__cap_ = 0LL;
    v6->__r_.__value_.__r.__words[0] = 0LL;
    sub_1000021BC(v20, "");
    sub_1000021BC(v18, "\\");
    siri::dialogengine::StringReplace(__p, a2, v20, v18, 0LL);
    if ((v23 & 0x80u) == 0) {
      __int128 v8 = __p;
    }
    else {
      __int128 v8 = (void **)__p[0];
    }
    if ((v23 & 0x80u) == 0) {
      std::string::size_type v9 = v23;
    }
    else {
      std::string::size_type v9 = (std::string::size_type)__p[1];
    }
    unint64_t v10 = std::string::append(&v25, (const std::string::value_type *)v8, v9);
    __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0LL;
    v10->__r_.__value_.__l.__cap_ = 0LL;
    v10->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v12 = std::string::append(&v26, "");
    __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    int64_t cap = v12->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v27[0].__locale_ = v13;
    v12->__r_.__value_.__l.__size_ = 0LL;
    v12->__r_.__value_.__l.__cap_ = 0LL;
    v12->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      locale = v27;
    }
    else {
      locale = v27[0].__locale_;
    }
    if (cap >= 0) {
      uint64_t v15 = HIBYTE(cap);
    }
    else {
      uint64_t v15 = (uint64_t)v27[1].__locale_;
    }
    sub_100002F60(&std::cout, (uint64_t)locale, v15);
    if (SHIBYTE(cap) < 0) {
      operator delete(v27[0].__locale_);
    }
    if (v19 < 0) {
      operator delete(v18[0]);
    }
    if (v21 < 0) {
      operator delete(v20[0]);
    }
    if ((char)v24.__r_.__value_.__s.__size_ < 0)
    {
      operator delete(v24.__r_.__value_.__l.__data_);
      if (!a3) {
        goto LABEL_31;
      }
    }

    else if (!a3)
    {
LABEL_31:
      std::ios_base::getloc((const std::ios_base *)((char *)&std::cout
                                                  + (unint64_t)std::cout.__vftable[-2].~basic_ostream_0));
      std::string v16 = std::locale::use_facet(v27, &std::ctype<char>::id);
      uint64_t v17 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10LL);
      std::locale::~locale(v27);
      std::ostream::put(&std::cout, v17);
      return std::ostream::flush(&std::cout);
    }

    LOBYTE(v27[0].__locale_) = 44;
    sub_100002F60(&std::cout, (uint64_t)v27, 1LL);
    goto LABEL_31;
  }

  return result;
}

void sub_10000AB20( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *__p, uint64_t a22, int a23, __int16 a24, char a25, char a26, void *a27, uint64_t a28, int a29, __int16 a30, char a31, char a32, void *a33, uint64_t a34, int a35, __int16 a36, char a37, char a38)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

void sub_10000ABDC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0LL) {
    uint64_t v3 = *(void *)(a2 + 8);
  }
  if (v3)
  {
    std::operator+<char>(&v15, " (", a1);
    uint64_t v4 = std::string::append(&v15, ": [");
    __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v16.__r_.__value_.__l.__cap_ = v4->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0LL;
    v4->__r_.__value_.__l.__cap_ = 0LL;
    v4->__r_.__value_.__r.__words[0] = 0LL;
    int v6 = *(char *)(a2 + 23);
    if (v6 >= 0) {
      __int128 v7 = (const std::string::value_type *)a2;
    }
    else {
      __int128 v7 = *(const std::string::value_type **)a2;
    }
    if (v6 >= 0) {
      std::string::size_type v8 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v8 = *(void *)(a2 + 8);
    }
    std::string::size_type v9 = std::string::append(&v16, v7, v8);
    __int128 v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__l.__cap_ = v9->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0LL;
    v9->__r_.__value_.__l.__cap_ = 0LL;
    v9->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v11 = std::string::append(&v17, "])");
    __int128 v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    int64_t cap = v11->__r_.__value_.__l.__cap_;
    __int128 v18 = v12;
    v11->__r_.__value_.__l.__size_ = 0LL;
    v11->__r_.__value_.__l.__cap_ = 0LL;
    v11->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      __int128 v13 = &v18;
    }
    else {
      __int128 v13 = (__int128 *)v18;
    }
    if (cap >= 0) {
      uint64_t v14 = HIBYTE(cap);
    }
    else {
      uint64_t v14 = *((void *)&v18 + 1);
    }
    sub_100002F60(&std::cout, (uint64_t)v13, v14);
    if (SHIBYTE(cap) < 0) {
      operator delete((void *)v18);
    }
  }

void sub_10000AD1C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_10000AD80(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_10000AD80(a1, *a2);
    sub_10000AD80(a1, a2[1]);
    sub_10000ADC8((uint64_t)(a2 + 4));
    operator delete(a2);
  }

void sub_10000ADC8(uint64_t a1)
{
}

uint64_t sub_10000AE04(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_10000AE3C(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_1000059D0((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }

    while (v3);
  }

void sub_10000AE78(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    __int128 v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 96LL;
        sub_10000AEFC((uint64_t)(v1 + 2), v4);
      }

      while ((void *)v4 != v2);
      __int128 v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void sub_10000AEFC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void **)(a2 + 72);
  sub_1000027F4(&v3);
  uint64_t v3 = (void **)(a2 + 48);
  sub_1000027F4(&v3);
}

void sub_10000AF60(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
LABEL_1:
  __int128 v7 = (__int128 *)(a2 - 24);
  unint64_t v8 = a1;
  while (2)
  {
    a1 = v8;
    uint64_t v9 = a2 - v8;
    uint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v8) >> 3);
    switch(v10)
    {
      case 0LL:
      case 1LL:
        return;
      case 2LL:
        if (sub_10000BAE0())
        {
          uint64_t v92 = *(void *)(a1 + 16);
          __int128 v83 = *(_OWORD *)a1;
          __int128 v28 = *v7;
          *(void *)(a1 + 16) = *(void *)(a2 - 8);
          *(_OWORD *)a1 = v28;
          *(void *)(a2 - std::ostream::~ostream(v1, v2 + 8) = v92;
          __int128 *v7 = v83;
        }

        return;
      case 3LL:
        sub_10000BBCC((__int128 *)a1, (__int128 *)(a1 + 24), v7);
        return;
      case 4LL:
        sub_10000BFE0(a1, a1 + 24, a1 + 48, (uint64_t)v7);
        return;
      case 5LL:
        uint64_t v29 = (__int128 *)(a1 + 24);
        int v30 = (__int128 *)(a1 + 48);
        uint64_t v31 = (__int128 *)(a1 + 72);
        sub_10000BFE0(a1, a1 + 24, a1 + 48, a1 + 72);
        if (sub_10000BAE0())
        {
          __int128 v32 = *v31;
          uint64_t v33 = *(void *)(a1 + 88);
          uint64_t v34 = *(void *)(a2 - 8);
          *uint64_t v31 = *v7;
          *(void *)(a1 + 8std::ostream::~ostream(v1, v2 + 8) = v34;
          *(void *)(a2 - std::ostream::~ostream(v1, v2 + 8) = v33;
          __int128 *v7 = v32;
          if (sub_10000BAE0())
          {
            uint64_t v35 = *(void *)(a1 + 64);
            __int128 v36 = *v30;
            __int128 *v30 = *v31;
            *(void *)(a1 + 64) = *(void *)(a1 + 88);
            *uint64_t v31 = v36;
            *(void *)(a1 + 8std::ostream::~ostream(v1, v2 + 8) = v35;
            if (sub_10000BAE0())
            {
              uint64_t v37 = *(void *)(a1 + 40);
              __int128 v38 = *v29;
              __int128 *v29 = *v30;
              *(void *)(a1 + 40) = *(void *)(a1 + 64);
              __int128 *v30 = v38;
              *(void *)(a1 + 64) = v37;
              if (sub_10000BAE0())
              {
                uint64_t v93 = *(void *)(a1 + 16);
                __int128 v84 = *(_OWORD *)a1;
                *(_OWORD *)a1 = *v29;
                *(void *)(a1 + 16) = *(void *)(a1 + 40);
                __int128 *v29 = v84;
                *(void *)(a1 + 40) = v93;
              }
            }
          }
        }

        return;
      default:
        if (v9 <= 575)
        {
          if ((a4 & 1) != 0)
          {
            if (a1 != a2)
            {
              uint64_t v39 = a1 + 24;
              if (a1 + 24 != a2)
              {
                uint64_t v40 = 0LL;
                do
                {
                  uint64_t v41 = v39;
                  if (sub_10000BAE0())
                  {
                    uint64_t v94 = *(void *)(v41 + 16);
                    __int128 v85 = *(_OWORD *)v41;
                    *(void *)(v41 + std::ostream::~ostream(v1, v2 + 8) = 0LL;
                    *(void *)(v41 + 16) = 0LL;
                    *(void *)uint64_t v41 = 0LL;
                    uint64_t v42 = v40;
                    do
                    {
                      uint64_t v43 = a1 + v42;
                      uint64_t v44 = (void **)(a1 + v42 + 24);
                      *(_OWORD *)uint64_t v44 = *(_OWORD *)v43;
                      *(void *)(a1 + v42 + 40) = *(void *)(v43 + 16);
                      *(_BYTE *)(v43 + 23) = 0;
                      *(_BYTE *)uint64_t v43 = 0;
                      if (!v42)
                      {
                        uint64_t v46 = a1;
                        goto LABEL_81;
                      }

                      v42 -= 24LL;
                    }

                    while (sub_10000BAE0());
                    int v45 = *(char *)(a1 + v42 + 47);
                    uint64_t v46 = a1 + v42 + 24;
                    if (v45 < 0) {
                      operator delete(*(void **)v46);
                    }
LABEL_81:
                    *(void *)(v46 + 16) = v94;
                    *(_OWORD *)uint64_t v46 = v85;
                  }

                  uint64_t v39 = v41 + 24;
                  v40 += 24LL;
                }

                while (v41 + 24 != a2);
              }
            }
          }

          else if (a1 != a2)
          {
            uint64_t v71 = a1 + 24;
            if (a1 + 24 != a2)
            {
              uint64_t v72 = a1 - 24;
              do
              {
                uint64_t v73 = v71;
                if (sub_10000BAE0())
                {
                  uint64_t v97 = *(void *)(v73 + 16);
                  __int128 v88 = *(_OWORD *)v73;
                  *(void *)(v73 + std::ostream::~ostream(v1, v2 + 8) = 0LL;
                  *(void *)(v73 + 16) = 0LL;
                  *(void *)uint64_t v73 = 0LL;
                  uint64_t v74 = v72;
                  do
                  {
                    __int128 v75 = (void **)(v74 + 48);
                    *(_OWORD *)__int128 v75 = *(_OWORD *)(v74 + 24);
                    *(void *)(v74 + 64) = *(void *)(v74 + 40);
                    *(_BYTE *)(v74 + 47) = 0;
                    *(_BYTE *)(v74 + 24) = 0;
                    v74 -= 24LL;
                  }

                  while (sub_10000BAE0());
                  v76 = (void **)(v74 + 48);
                  *(void *)(v74 + 64) = v97;
                  *(_OWORD *)v76 = v88;
                }

                uint64_t v71 = v73 + 24;
                v72 += 24LL;
              }

              while (v73 + 24 != a2);
            }
          }

          return;
        }

        if (!a3)
        {
          if (a1 != a2)
          {
            int64_t v47 = (unint64_t)(v10 - 2) >> 1;
            int64_t v48 = v47;
            do
            {
              int64_t v49 = v48;
              if (v47 >= v48)
              {
                uint64_t v50 = (2 * v48) | 1;
                uint64_t v51 = a1 + 24 * v50;
                if (2 * v48 + 2 < v10 && sub_10000BAE0())
                {
                  v51 += 24LL;
                  uint64_t v50 = 2 * v49 + 2;
                }

                uint64_t v52 = a1 + 24 * v49;
                if (!sub_10000BAE0())
                {
                  uint64_t v95 = *(void *)(v52 + 16);
                  __int128 v86 = *(_OWORD *)v52;
                  *(void *)(v52 + std::ostream::~ostream(v1, v2 + 8) = 0LL;
                  *(void *)(v52 + 16) = 0LL;
                  *(void *)uint64_t v52 = 0LL;
                  while (1)
                  {
                    uint64_t v53 = v51;
                    __int128 v54 = *(_OWORD *)v51;
                    *(void *)(v52 + 16) = *(void *)(v51 + 16);
                    *(_OWORD *)uint64_t v52 = v54;
                    *(_BYTE *)(v51 + 23) = 0;
                    *(_BYTE *)uint64_t v51 = 0;
                    if (v47 < v50) {
                      break;
                    }
                    uint64_t v55 = (2 * v50) | 1;
                    uint64_t v51 = a1 + 24 * v55;
                    uint64_t v50 = 2 * v50 + 2;
                    if (v50 >= v10)
                    {
                      uint64_t v50 = v55;
                    }

                    else if (sub_10000BAE0())
                    {
                      v51 += 24LL;
                    }

                    else
                    {
                      uint64_t v50 = v55;
                    }

                    uint64_t v52 = v53;
                    if (sub_10000BAE0())
                    {
                      break;
                    }
                  }

                  *(void *)(v53 + 16) = v95;
                  *(_OWORD *)uint64_t v53 = v86;
                }
              }

              int64_t v48 = v49 - 1;
            }

            while (v49);
            int64_t v56 = v9 / 0x18uLL;
            do
            {
              uint64_t v57 = 0LL;
              unint64_t v58 = a2;
              uint64_t v77 = *(void *)a1;
              *(void *)size_t v100 = *(void *)(a1 + 8);
              *(void *)&v100[7] = *(void *)(a1 + 15);
              char v78 = *(_BYTE *)(a1 + 23);
              *(void *)(a1 + std::ostream::~ostream(v1, v2 + 8) = 0LL;
              *(void *)(a1 + 16) = 0LL;
              *(void *)a1 = 0LL;
              uint64_t v59 = a1;
              do
              {
                uint64_t v60 = v59 + 24 * v57 + 24;
                uint64_t v61 = 2 * v57;
                uint64_t v57 = (2 * v57) | 1;
                uint64_t v62 = v61 + 2;
                if (v61 + 2 < v56 && sub_10000BAE0())
                {
                  v60 += 24LL;
                  uint64_t v57 = v62;
                }

                __int128 v63 = *(_OWORD *)v60;
                *(void *)(v59 + 16) = *(void *)(v60 + 16);
                *(_OWORD *)uint64_t v59 = v63;
                *(_BYTE *)(v60 + 23) = 0;
                *(_BYTE *)uint64_t v60 = 0;
                uint64_t v59 = v60;
              }

              while (v57 <= (uint64_t)((unint64_t)(v56 - 2) >> 1));
              a2 -= 24LL;
              if (v60 == v58 - 24)
              {
                *(void *)uint64_t v60 = v77;
                *(void *)(v60 + std::ostream::~ostream(v1, v2 + 8) = *(void *)v100;
                *(void *)(v60 + 15) = *(void *)&v100[7];
                *(_BYTE *)(v60 + 23) = v78;
              }

              else
              {
                __int128 v64 = *(_OWORD *)(v58 - 24);
                *(void *)(v60 + 16) = *(void *)(v58 - 8);
                *(_OWORD *)uint64_t v60 = v64;
                *(void *)(v58 - 24) = v77;
                *(void *)(v58 - 9) = *(void *)&v100[7];
                *(void *)(v58 - 16) = *(void *)v100;
                *(_BYTE *)(v58 - 1) = v78;
                uint64_t v65 = v60 - a1 + 24;
                if (v65 >= 25)
                {
                  unint64_t v66 = (v65 / 0x18uLL - 2) >> 1;
                  unint64_t v67 = a1 + 24 * v66;
                  if (sub_10000BAE0())
                  {
                    uint64_t v96 = *(void *)(v60 + 16);
                    __int128 v87 = *(_OWORD *)v60;
                    *(void *)(v60 + std::ostream::~ostream(v1, v2 + 8) = 0LL;
                    *(void *)(v60 + 16) = 0LL;
                    *(void *)uint64_t v60 = 0LL;
                    while (1)
                    {
                      uint64_t v68 = v67;
                      __int128 v69 = *(_OWORD *)v67;
                      *(void *)(v60 + 16) = *(void *)(v67 + 16);
                      *(_OWORD *)uint64_t v60 = v69;
                      *(_BYTE *)(v67 + 23) = 0;
                      *(_BYTE *)unint64_t v67 = 0;
                      if (!v66) {
                        break;
                      }
                      unint64_t v66 = (v66 - 1) >> 1;
                      unint64_t v67 = a1 + 24 * v66;
                      uint64_t v60 = v68;
                      if (!sub_10000BAE0())
                      {
                        break;
                      }
                    }

                    *(void *)(v68 + 16) = v96;
                    *(_OWORD *)uint64_t v68 = v87;
                  }
                }
              }
            }

            while (v56-- > 2);
          }

          return;
        }

        unint64_t v11 = (unint64_t)v10 >> 1;
        unint64_t v12 = a1 + 24 * ((unint64_t)v10 >> 1);
        if ((unint64_t)v9 < 0xC01)
        {
          sub_10000BBCC((__int128 *)v12, (__int128 *)a1, v7);
        }

        else
        {
          sub_10000BBCC((__int128 *)a1, (__int128 *)v12, v7);
          sub_10000BBCC((__int128 *)(a1 + 24), (__int128 *)(a1 + 24 * v11 - 24), (__int128 *)(a2 - 48));
          sub_10000BBCC((__int128 *)(a1 + 48), (__int128 *)(a1 + 24 * v11 + 24), (__int128 *)(a2 - 72));
          sub_10000BBCC((__int128 *)(a1 + 24 * v11 - 24), (__int128 *)v12, (__int128 *)(a1 + 24 * v11 + 24));
          uint64_t v89 = *(void *)(a1 + 16);
          __int128 v80 = *(_OWORD *)a1;
          __int128 v13 = *(_OWORD *)v12;
          *(void *)(a1 + 16) = *(void *)(v12 + 16);
          *(_OWORD *)a1 = v13;
          *(void *)(v12 + 16) = v89;
          *(_OWORD *)unint64_t v12 = v80;
        }

        --a3;
        if ((a4 & 1) == 0 && !sub_10000BAE0())
        {
          uint64_t v102 = *(void *)(a1 + 16);
          __int128 v99 = *(_OWORD *)a1;
          *(void *)(a1 + std::ostream::~ostream(v1, v2 + 8) = 0LL;
          *(void *)(a1 + 16) = 0LL;
          *(void *)a1 = 0LL;
          if (sub_10000BAE0())
          {
            unint64_t v8 = a1;
            do
              v8 += 24LL;
            while (!sub_10000BAE0());
          }

          else
          {
            unint64_t v22 = a1 + 24;
            do
            {
              unint64_t v8 = v22;
              if (v22 >= a2) {
                break;
              }
              BOOL v23 = sub_10000BAE0();
              unint64_t v22 = v8 + 24;
            }

            while (!v23);
          }

          unint64_t v24 = a2;
          if (v8 < a2)
          {
            unint64_t v24 = a2;
            do
              v24 -= 24LL;
            while (sub_10000BAE0());
          }

          while (v8 < v24)
          {
            uint64_t v91 = *(void *)(v8 + 16);
            __int128 v82 = *(_OWORD *)v8;
            __int128 v25 = *(_OWORD *)v24;
            *(void *)(v8 + 16) = *(void *)(v24 + 16);
            *(_OWORD *)unint64_t v8 = v25;
            *(void *)(v24 + 16) = v91;
            *(_OWORD *)unint64_t v24 = v82;
            do
              v8 += 24LL;
            while (!sub_10000BAE0());
            do
              v24 -= 24LL;
            while (sub_10000BAE0());
          }

          std::string v26 = (__int128 *)(v8 - 24);
          if (v8 - 24 == a1)
          {
          }

          else
          {
            __int128 v27 = *v26;
            *(void *)(a1 + 16) = *(void *)(v8 - 8);
            *(_OWORD *)a1 = v27;
            *(_BYTE *)(v8 - 1) = 0;
            *(_BYTE *)(v8 - 24) = 0;
          }

          a4 = 0;
          *(void *)(v8 - std::ostream::~ostream(v1, v2 + 8) = v102;
          *std::string v26 = v99;
          continue;
        }

        uint64_t v14 = 0LL;
        uint64_t v101 = *(void *)(a1 + 16);
        __int128 v98 = *(_OWORD *)a1;
        *(void *)(a1 + std::ostream::~ostream(v1, v2 + 8) = 0LL;
        *(void *)(a1 + 16) = 0LL;
        *(void *)a1 = 0LL;
        do
          v14 += 24LL;
        while (sub_10000BAE0());
        unint64_t v15 = a1 + v14;
        unint64_t v16 = a2;
        if (v14 == 24)
        {
          unint64_t v16 = a2;
          do
          {
            if (v15 >= v16) {
              break;
            }
            v16 -= 24LL;
          }

          while (!sub_10000BAE0());
        }

        else
        {
          do
            v16 -= 24LL;
          while (!sub_10000BAE0());
        }

        unint64_t v8 = a1 + v14;
        if (v15 < v16)
        {
          unint64_t v17 = v16;
          do
          {
            uint64_t v90 = *(void *)(v8 + 16);
            __int128 v81 = *(_OWORD *)v8;
            __int128 v18 = *(_OWORD *)v17;
            *(void *)(v8 + 16) = *(void *)(v17 + 16);
            *(_OWORD *)unint64_t v8 = v18;
            *(void *)(v17 + 16) = v90;
            *(_OWORD *)unint64_t v17 = v81;
            do
              v8 += 24LL;
            while (sub_10000BAE0());
            do
              v17 -= 24LL;
            while (!sub_10000BAE0());
          }

          while (v8 < v17);
        }

        char v19 = (__int128 *)(v8 - 24);
        if (v8 - 24 == a1)
        {
        }

        else
        {
          __int128 v20 = *v19;
          *(void *)(a1 + 16) = *(void *)(v8 - 8);
          *(_OWORD *)a1 = v20;
          *(_BYTE *)(v8 - 1) = 0;
          *(_BYTE *)(v8 - 24) = 0;
        }

        *(void *)(v8 - std::ostream::~ostream(v1, v2 + 8) = v101;
        __int128 *v19 = v98;
        if (v15 < v16)
        {
LABEL_33:
          sub_10000AF60(a1, v8 - 24, a3, a4 & 1);
          a4 = 0;
          continue;
        }

        BOOL v21 = sub_10000BCE8(a1, v8 - 24);
        if (!sub_10000BCE8(v8, a2))
        {
          if (v21) {
            continue;
          }
          goto LABEL_33;
        }

        a2 = v8 - 24;
        if (!v21) {
          goto LABEL_1;
        }
        return;
    }
  }

void sub_10000BA60( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, void *__p, uint64_t a29, int a30, __int16 a31, char a32, char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10000BAE0()
{
  int v0 = (char)v11;
  uint64_t v1 = (void *)v10[0];
  unsigned __int8 v2 = v13;
  if ((v13 & 0x80u) == 0) {
    size_t v3 = v13;
  }
  else {
    size_t v3 = (size_t)__p[1];
  }
  if ((v13 & 0x80u) == 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if ((v11 & 0x80u) == 0) {
    size_t v5 = v11;
  }
  else {
    size_t v5 = v10[1];
  }
  if ((v11 & 0x80u) == 0) {
    int v6 = v10;
  }
  else {
    int v6 = (void *)v10[0];
  }
  if (v5 >= v3) {
    size_t v7 = v3;
  }
  else {
    size_t v7 = v5;
  }
  int v8 = memcmp(v4, v6, v7);
  if (v0 < 0)
  {
    operator delete(v1);
    if ((v13 & 0x80) == 0) {
      goto LABEL_18;
    }
  }

  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_18;
  }

  operator delete(__p[0]);
LABEL_18:
  if (v8) {
    return v8 < 0;
  }
  else {
    return v3 < v5;
  }
}

void sub_10000BBB0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10000BBCC(__int128 *a1, __int128 *a2, __int128 *a3)
{
  BOOL v6 = sub_10000BAE0();
  BOOL result = sub_10000BAE0();
  if (v6)
  {
    if (result)
    {
      uint64_t v8 = *((void *)a1 + 2);
      __int128 v9 = *a1;
      uint64_t v10 = *((void *)a3 + 2);
      *a1 = *a3;
      *((void *)a1 + 2) = v10;
    }

    else
    {
      uint64_t v17 = *((void *)a1 + 2);
      __int128 v18 = *a1;
      uint64_t v19 = *((void *)a2 + 2);
      *a1 = *a2;
      *((void *)a1 + 2) = v19;
      *a2 = v18;
      *((void *)a2 + 2) = v17;
      BOOL result = sub_10000BAE0();
      if (!result) {
        return result;
      }
      uint64_t v8 = *((void *)a2 + 2);
      __int128 v9 = *a2;
      uint64_t v20 = *((void *)a3 + 2);
      *a2 = *a3;
      *((void *)a2 + 2) = v20;
    }

    *a3 = v9;
    *((void *)a3 + 2) = v8;
  }

  else if (result)
  {
    uint64_t v11 = *((void *)a2 + 2);
    __int128 v12 = *a2;
    uint64_t v13 = *((void *)a3 + 2);
    *a2 = *a3;
    *((void *)a2 + 2) = v13;
    *a3 = v12;
    *((void *)a3 + 2) = v11;
    BOOL result = sub_10000BAE0();
    if (result)
    {
      uint64_t v14 = *((void *)a1 + 2);
      __int128 v15 = *a1;
      uint64_t v16 = *((void *)a2 + 2);
      *a1 = *a2;
      *((void *)a1 + 2) = v16;
      *a2 = v15;
      *((void *)a2 + 2) = v14;
    }
  }

  return result;
}

BOOL sub_10000BCE8(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  BOOL result = 1LL;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v6 = a2 - 24;
      if (sub_10000BAE0())
      {
        uint64_t v7 = *(void *)(a1 + 16);
        __int128 v8 = *(_OWORD *)a1;
        uint64_t v9 = *(void *)(v6 + 16);
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *(void *)(a1 + 16) = v9;
        *(_OWORD *)uint64_t v6 = v8;
        *(void *)(v6 + 16) = v7;
      }

      return 1LL;
    case 3uLL:
      sub_10000BBCC((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a2 - 24));
      return 1LL;
    case 4uLL:
      sub_10000BFE0(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1LL;
    case 5uLL:
      __int128 v18 = (__int128 *)(a1 + 24);
      uint64_t v19 = (__int128 *)(a1 + 48);
      uint64_t v20 = (__int128 *)(a1 + 72);
      uint64_t v21 = a2 - 24;
      sub_10000BFE0(a1, a1 + 24, a1 + 48, a1 + 72);
      if (sub_10000BAE0())
      {
        uint64_t v22 = *(void *)(a1 + 88);
        __int128 v23 = *v20;
        uint64_t v24 = *(void *)(v21 + 16);
        *uint64_t v20 = *(_OWORD *)v21;
        *(void *)(a1 + 8std::ostream::~ostream(v1, v2 + 8) = v24;
        *(_OWORD *)uint64_t v21 = v23;
        *(void *)(v21 + 16) = v22;
        if (sub_10000BAE0())
        {
          uint64_t v25 = *(void *)(a1 + 64);
          __int128 v26 = *v19;
          __int128 *v19 = *v20;
          *(void *)(a1 + 64) = *(void *)(a1 + 88);
          *uint64_t v20 = v26;
          *(void *)(a1 + 8std::ostream::~ostream(v1, v2 + 8) = v25;
          if (sub_10000BAE0())
          {
            uint64_t v27 = *(void *)(a1 + 40);
            __int128 v28 = *v18;
            *__int128 v18 = *v19;
            *(void *)(a1 + 40) = *(void *)(a1 + 64);
            __int128 *v19 = v28;
            *(void *)(a1 + 64) = v27;
            if (sub_10000BAE0())
            {
              uint64_t v29 = *(void *)(a1 + 16);
              __int128 v30 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v18;
              *(void *)(a1 + 16) = *(void *)(a1 + 40);
              *__int128 v18 = v30;
              *(void *)(a1 + 40) = v29;
            }
          }
        }
      }

      return 1LL;
    default:
      sub_10000BBCC((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a1 + 48));
      uint64_t v10 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1LL;
      }
      uint64_t v11 = 0LL;
      int v12 = 0;
      break;
  }

  while (1)
  {
    if (sub_10000BAE0())
    {
      __int128 v31 = *(_OWORD *)v10;
      uint64_t v32 = *(void *)(v10 + 16);
      *(void *)(v10 + std::ostream::~ostream(v1, v2 + 8) = 0LL;
      *(void *)(v10 + 16) = 0LL;
      *(void *)uint64_t v10 = 0LL;
      uint64_t v13 = v11;
      do
      {
        uint64_t v14 = a1 + v13;
        __int128 v15 = (void **)(a1 + v13 + 72);
        *(_OWORD *)__int128 v15 = *(_OWORD *)(v14 + 48);
        *(void *)(a1 + v13 + 8std::ostream::~ostream(v1, v2 + 8) = *(void *)(v14 + 64);
        *(_BYTE *)(v14 + 71) = 0;
        *(_BYTE *)(v14 + 4std::ostream::~ostream(v1, v2 + 8) = 0;
        if (v13 == -48)
        {
          uint64_t v17 = a1;
          goto LABEL_15;
        }

        v13 -= 24LL;
      }

      while (sub_10000BAE0());
      int v16 = *(char *)(a1 + v13 + 95);
      uint64_t v17 = a1 + v13 + 72;
      if (v16 < 0) {
        operator delete(*(void **)v17);
      }
LABEL_15:
      *(_OWORD *)uint64_t v17 = v31;
      *(void *)(v17 + 16) = v32;
      if (++v12 == 8) {
        return v10 + 24 == a2;
      }
    }

    v11 += 24LL;
    v10 += 24LL;
    if (v10 == a2) {
      return 1LL;
    }
  }

void sub_10000BFC4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_10000BFE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (sub_10000BAE0())
  {
    uint64_t v9 = *(void *)(a3 + 16);
    __int128 v10 = *(_OWORD *)a3;
    uint64_t v11 = *(void *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(void *)(a3 + 16) = v11;
    *(_OWORD *)a4 = v10;
    *(void *)(a4 + 16) = v9;
    if (sub_10000BAE0())
    {
      uint64_t v12 = *(void *)(a2 + 16);
      __int128 v13 = *(_OWORD *)a2;
      uint64_t v14 = *(void *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(void *)(a2 + 16) = v14;
      *(_OWORD *)a3 = v13;
      *(void *)(a3 + 16) = v12;
      if (sub_10000BAE0())
      {
        uint64_t v15 = *(void *)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        uint64_t v16 = *(void *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v16;
        *(__n128 *)a2 = result;
        *(void *)(a2 + 16) = v15;
      }
    }
  }

  return result;
}

void sub_10000C0AC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v16 = sub_1000021BC( v108,  "/usr/local/bin/appleconnect serviceTicket --show-signIn-dialog --dawToken -I 178268 --realm APPLECONNECT.APPLE .COM 2>/dev/null");
  siri::dialogengine::ExecuteShellCommand(&v112, v16, 0LL);
  siri::dialogengine::StringTrim(v110, &v112, " \t\n\r");
  sub_1000021BC(&v112, "DAWTKNV");
  char v17 = siri::dialogengine::StringStartsWith(v110, &v112);
  char v18 = v17;
  if (((char)v112.__r_.__value_.__s.__size_ & 0x80000000) == 0)
  {
    if ((v17 & 1) != 0) {
      goto LABEL_7;
    }
LABEL_28:
    __int128 v31 = sub_100002F60( &std::cout,  (uint64_t)"Error getting AppleConnect token for rendercat. Make sure you have AppleConnect installed and are o n the internal network.",  122LL);
    std::ios_base::getloc((const std::ios_base *)((char *)v31 + *(void *)(*v31 - 24LL)));
    uint64_t v32 = std::locale::use_facet((const std::locale *)&v112, &std::ctype<char>::id);
    uint64_t v33 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v32->__vftable[2].~facet_0)(v32, 10LL);
    std::locale::~locale((std::locale *)&v112);
    std::ostream::put(v31, v33);
    std::ostream::flush(v31);
    goto LABEL_166;
  }

  operator delete(v112.__r_.__value_.__l.__data_);
  if ((v18 & 1) == 0) {
    goto LABEL_28;
  }
LABEL_7:
  std::operator+<char>(v108, "acack=", v110);
  sub_1000021BC(__p, "Content-type: text/plain");
  std::operator+<char>(&v102, "https://rendercat.apple.com/api/v1/render?deviceClass=", a3);
  uint64_t v19 = std::string::append(&v102, "&train=");
  __int128 v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v103.__r_.__value_.__l.__cap_ = v19->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0LL;
  v19->__r_.__value_.__l.__cap_ = 0LL;
  v19->__r_.__value_.__r.__words[0] = 0LL;
  int v21 = *(char *)(a4 + 23);
  if (v21 >= 0) {
    uint64_t v22 = (const std::string::value_type *)a4;
  }
  else {
    uint64_t v22 = *(const std::string::value_type **)a4;
  }
  if (v21 >= 0) {
    std::string::size_type v23 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    std::string::size_type v23 = *(void *)(a4 + 8);
  }
  uint64_t v24 = std::string::append(&v103, v22, v23);
  __int128 v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v104.__r_.__value_.__l.__cap_ = v24->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0LL;
  v24->__r_.__value_.__l.__cap_ = 0LL;
  v24->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v26 = std::string::append(&v104, "&darkMode=");
  __int128 v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v112.__r_.__value_.__l.__cap_ = v26->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0LL;
  v26->__r_.__value_.__l.__cap_ = 0LL;
  v26->__r_.__value_.__r.__words[0] = 0LL;
  if (a8) {
    __int128 v28 = "true";
  }
  else {
    __int128 v28 = "false";
  }
  uint64_t v29 = std::string::append(&v112, v28);
  __int128 v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v105.__r_.__value_.__l.__cap_ = v29->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0LL;
  v29->__r_.__value_.__l.__cap_ = 0LL;
  v29->__r_.__value_.__r.__words[0] = 0LL;
  if (*(char *)(a5 + 23) < 0)
  {
    if (!*(void *)(a5 + 8)) {
      goto LABEL_38;
    }
  }

  else if (!*(_BYTE *)(a5 + 23))
  {
    goto LABEL_38;
  }

  std::operator+<char>(&v112, "&context=", a5);
  if ((v112.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v34 = &v112;
  }
  else {
    uint64_t v34 = (std::string *)v112.__r_.__value_.__r.__words[0];
  }
  if ((v112.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = v112.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = v112.__r_.__value_.__l.__size_;
  }
  std::string::append(&v105, (const std::string::value_type *)v34, size);
LABEL_38:
  if (*(char *)(a6 + 23) < 0)
  {
    if (!*(void *)(a6 + 8)) {
      goto LABEL_50;
    }
  }

  else if (!*(_BYTE *)(a6 + 23))
  {
    goto LABEL_50;
  }

  std::operator+<char>(&v112, "&screenSize=", a6);
  if ((v112.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    __int128 v36 = &v112;
  }
  else {
    __int128 v36 = (std::string *)v112.__r_.__value_.__r.__words[0];
  }
  if ((v112.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v37 = v112.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v37 = v112.__r_.__value_.__l.__size_;
  }
  std::string::append(&v105, (const std::string::value_type *)v36, v37);
LABEL_50:
  if (*(char *)(a7 + 23) < 0)
  {
    if (!*(void *)(a7 + 8)) {
      goto LABEL_62;
    }
  }

  else if (!*(_BYTE *)(a7 + 23))
  {
    goto LABEL_62;
  }

  std::operator+<char>(&v112, "&orientation=", a7);
  if ((v112.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    __int128 v38 = &v112;
  }
  else {
    __int128 v38 = (std::string *)v112.__r_.__value_.__r.__words[0];
  }
  if ((v112.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v39 = v112.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v39 = v112.__r_.__value_.__l.__size_;
  }
  std::string::append(&v105, (const std::string::value_type *)v38, v39);
LABEL_62:
  if (*(char *)(a1 + 23) < 0)
  {
    if (*(void *)(a1 + 8))
    {
LABEL_64:
      std::operator+<char>(&v96, "/usr/bin/curl -w %{http_code} -sS -XPOST -H ", __p);
      uint64_t v40 = std::string::append(&v96, " -b '");
      __int128 v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
      v97.__r_.__value_.__l.__cap_ = v40->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v41;
      v40->__r_.__value_.__l.__size_ = 0LL;
      v40->__r_.__value_.__l.__cap_ = 0LL;
      v40->__r_.__value_.__r.__words[0] = 0LL;
      if ((v109 & 0x80u) == 0) {
        uint64_t v42 = (const std::string::value_type *)v108;
      }
      else {
        uint64_t v42 = (const std::string::value_type *)v108[0];
      }
      if ((v109 & 0x80u) == 0) {
        std::string::size_type v43 = v109;
      }
      else {
        std::string::size_type v43 = (std::string::size_type)v108[1];
      }
      uint64_t v44 = std::string::append(&v97, v42, v43);
      __int128 v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
      v98.__r_.__value_.__l.__cap_ = v44->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v45;
      v44->__r_.__value_.__l.__size_ = 0LL;
      v44->__r_.__value_.__l.__cap_ = 0LL;
      v44->__r_.__value_.__r.__words[0] = 0LL;
      uint64_t v46 = std::string::append(&v98, "' -d '");
      __int128 v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
      v99.__r_.__value_.__l.__cap_ = v46->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v47;
      v46->__r_.__value_.__l.__size_ = 0LL;
      v46->__r_.__value_.__l.__cap_ = 0LL;
      v46->__r_.__value_.__r.__words[0] = 0LL;
      int v48 = *(char *)(a1 + 23);
      if (v48 >= 0) {
        int64_t v49 = (const std::string::value_type *)a1;
      }
      else {
        int64_t v49 = *(const std::string::value_type **)a1;
      }
      if (v48 >= 0) {
        std::string::size_type v50 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        std::string::size_type v50 = *(void *)(a1 + 8);
      }
      uint64_t v51 = std::string::append(&v99, v49, v50);
      __int128 v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
      v100.__r_.__value_.__l.__cap_ = v51->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v52;
      v51->__r_.__value_.__l.__size_ = 0LL;
      v51->__r_.__value_.__l.__cap_ = 0LL;
      v51->__r_.__value_.__r.__words[0] = 0LL;
      uint64_t v53 = std::string::append(&v100, "' -o ");
      __int128 v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
      v101.__r_.__value_.__l.__cap_ = v53->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v54;
      v53->__r_.__value_.__l.__size_ = 0LL;
      v53->__r_.__value_.__l.__cap_ = 0LL;
      v53->__r_.__value_.__r.__words[0] = 0LL;
      int v55 = *(char *)(a2 + 23);
      if (v55 >= 0) {
        int64_t v56 = (const std::string::value_type *)a2;
      }
      else {
        int64_t v56 = *(const std::string::value_type **)a2;
      }
      if (v55 >= 0) {
        std::string::size_type v57 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        std::string::size_type v57 = *(void *)(a2 + 8);
      }
      unint64_t v58 = std::string::append(&v101, v56, v57);
      __int128 v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
      v102.__r_.__value_.__l.__cap_ = v58->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v59;
      v58->__r_.__value_.__l.__size_ = 0LL;
      v58->__r_.__value_.__l.__cap_ = 0LL;
      v58->__r_.__value_.__r.__words[0] = 0LL;
      uint64_t v60 = std::string::append(&v102, " --url ");
      __int128 v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
      v103.__r_.__value_.__l.__cap_ = v60->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v61;
      v60->__r_.__value_.__l.__size_ = 0LL;
      v60->__r_.__value_.__l.__cap_ = 0LL;
      v60->__r_.__value_.__r.__words[0] = 0LL;
      if ((v105.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v62 = &v105;
      }
      else {
        uint64_t v62 = (std::string *)v105.__r_.__value_.__r.__words[0];
      }
      if ((v105.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v63 = v105.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v63 = v105.__r_.__value_.__l.__size_;
      }
      __int128 v64 = std::string::append(&v103, (const std::string::value_type *)v62, v63);
      __int128 v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
      v112.__r_.__value_.__l.__cap_ = v64->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v65;
      v64->__r_.__value_.__l.__size_ = 0LL;
      v64->__r_.__value_.__l.__cap_ = 0LL;
      v64->__r_.__value_.__r.__words[0] = 0LL;
      unint64_t v66 = std::string::append(&v112, " 2>&1");
      __int128 v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
      v104.__r_.__value_.__l.__cap_ = v66->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v67;
      v66->__r_.__value_.__l.__size_ = 0LL;
      v66->__r_.__value_.__l.__cap_ = 0LL;
      v66->__r_.__value_.__r.__words[0] = 0LL;
      siri::dialogengine::ExecuteShellCommand(&v103, &v104, 0LL);
      if (siri::dialogengine::GetFileSize(a2) > 499) {
        goto LABEL_123;
      }
      if ((char)v103.__r_.__value_.__s.__size_ < 0)
      {
        if (v103.__r_.__value_.__l.__size_ == 3)
        {
          uint64_t v68 = (std::string *)v103.__r_.__value_.__r.__words[0];
LABEL_114:
          int data_low = LOWORD(v68->__r_.__value_.__l.__data_);
          int v73 = v68->__r_.__value_.__s.__data_[2];
          if (data_low != 12338 || v73 != 48) {
            goto LABEL_118;
          }
LABEL_123:
          std::operator+<char>(&v102, "Image Rendered to ", a2);
          char v78 = std::string::append(&v102, "");
          __int128 v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
          v112.__r_.__value_.__l.__cap_ = v78->__r_.__value_.__l.__cap_;
          *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v79;
          v78->__r_.__value_.__l.__size_ = 0LL;
          v78->__r_.__value_.__l.__cap_ = 0LL;
          v78->__r_.__value_.__r.__words[0] = 0LL;
          siri::dialogengine::Log::Info(&v112);
          goto LABEL_154;
        }
      }

      else if (v103.__r_.__value_.__s.__size_ == 3)
      {
        uint64_t v68 = &v103;
        goto LABEL_114;
      }

LABEL_118:
      siri::dialogengine::ReadFileToString(&v102, a2);
      uint64_t v75 = sub_100005A28((uint64_t)&v112, 0LL, 1024LL, 0LL);
      v76 = &v102;
      if ((v102.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        v76 = (std::string *)v102.__r_.__value_.__r.__words[0];
      }
      v101.__r_.__value_.__r.__words[0] = (std::string::size_type)v76;
      v101.__r_.__value_.__l.__size_ = (std::string::size_type)v76;
      if (*(_DWORD *)(sub_10000CE28(v75, &v101) + 88))
      {
        if (v113 > 0x11) {
          uint64_t v77 = "Unknown error.";
        }
        else {
          uint64_t v77 = off_100078CA8[v113];
        }
        sub_1000021BC(&v101, v77);
        uint64_t v90 = sub_100002F60(&std::cout, (uint64_t)"Error: Invalid JSON returned from rendercat: ", 45LL);
        if ((v101.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v91 = &v101;
        }
        else {
          uint64_t v91 = (std::string *)v101.__r_.__value_.__r.__words[0];
        }
        if ((v101.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v92 = v101.__r_.__value_.__s.__size_;
        }
        else {
          uint64_t v92 = v101.__r_.__value_.__l.__size_;
        }
        uint64_t v93 = sub_100002F60(v90, (uint64_t)v91, v92);
        std::ios_base::getloc((const std::ios_base *)((char *)v93 + *(void *)(*v93 - 24LL)));
        uint64_t v94 = std::locale::use_facet((const std::locale *)&v100, &std::ctype<char>::id);
        uint64_t v95 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v94->__vftable[2].~facet_0)(v94, 10LL);
        std::locale::~locale((std::locale *)&v100);
        std::ostream::put(v93, v95);
        std::ostream::flush(v93);
        siri::dialogengine::DeleteFile(a2);
      }

      else
      {
        sub_1000021BC(&v100, "message");
        siri::dialogengine::ParseJSONString(&v101, &v112, &v100);
        sub_1000021BC(&v99, "error");
        siri::dialogengine::ParseJSONString(&v100, &v112, &v99);
        __int128 v80 = sub_100002F60(&std::cout, (uint64_t)"Rendercat Error: ", 17LL);
        if ((v101.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          __int128 v81 = &v101;
        }
        else {
          __int128 v81 = (std::string *)v101.__r_.__value_.__r.__words[0];
        }
        if ((v101.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v82 = v101.__r_.__value_.__s.__size_;
        }
        else {
          uint64_t v82 = v101.__r_.__value_.__l.__size_;
        }
        __int128 v83 = sub_100002F60(v80, (uint64_t)v81, v82);
        __int128 v84 = sub_100002F60(v83, (uint64_t)" : ", 3LL);
        if ((v100.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          __int128 v85 = &v100;
        }
        else {
          __int128 v85 = (std::string *)v100.__r_.__value_.__r.__words[0];
        }
        if ((v100.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v86 = v100.__r_.__value_.__s.__size_;
        }
        else {
          uint64_t v86 = v100.__r_.__value_.__l.__size_;
        }
        __int128 v87 = sub_100002F60(v84, (uint64_t)v85, v86);
        std::ios_base::getloc((const std::ios_base *)((char *)v87 + *(void *)(*v87 - 24LL)));
        __int128 v88 = std::locale::use_facet((const std::locale *)&v99, &std::ctype<char>::id);
        uint64_t v89 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v88->__vftable[2].~facet_0)(v88, 10LL);
        std::locale::~locale((std::locale *)&v99);
        std::ostream::put(v87, v89);
        std::ostream::flush(v87);
        siri::dialogengine::DeleteFile(a2);
      }

      sub_100007938((uint64_t)&v112);
LABEL_154:
      goto LABEL_160;
    }
  }

  else if (*(_BYTE *)(a1 + 23))
  {
    goto LABEL_64;
  }

  __int128 v69 = sub_100002F60(&std::cout, (uint64_t)"Error: No snippet data provided for rendercat", 45LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v69 + *(void *)(*v69 - 24LL)));
  char v70 = std::locale::use_facet((const std::locale *)&v112, &std::ctype<char>::id);
  uint64_t v71 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v70->__vftable[2].~facet_0)(v70, 10LL);
  std::locale::~locale((std::locale *)&v112);
  std::ostream::put(v69, v71);
  std::ostream::flush(v69);
LABEL_160:
  if (v107 < 0) {
    operator delete(__p[0]);
  }
LABEL_166:
  if (v111 < 0) {
    operator delete(v110[0]);
  }
}

void sub_10000CAF8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20, void *__p, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, std::locale a28, uint64_t a29, uint64_t a30, uint64_t a31, void *a32, uint64_t a33, int a34, __int16 a35, char a36, char a37, uint64_t a38, void *a39, uint64_t a40, int a41, __int16 a42, char a43, char a44, uint64_t a45, void *a46, uint64_t a47, int a48, __int16 a49, char a50,char a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  sub_100007938(v71 - 192);
  if (a44 < 0) {
    operator delete(a39);
  }
  if (a51 < 0) {
    operator delete(a46);
  }
  if (a58 < 0) {
    operator delete(a53);
  }
  if (a65 < 0) {
    operator delete(a60);
  }
  if (a71 < 0) {
    operator delete(a66);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10000CE28(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v10 = a1;
  uint64_t v11 = v3;
  *(_OWORD *)std::string __p = 0u;
  __int128 v13 = 0u;
  uint64_t v14 = 256LL;
  int v15 = 0;
  uint64_t v16 = 0LL;
  int v17 = 2;
  uint64_t v4 = sub_10000CF34((uint64_t)&v11, a2, a1);
  *(void *)(a1 + 8std::ostream::~ostream(v1, v2 + 8) = v4;
  *(void *)(a1 + 96) = v5;
  uint64_t v6 = sub_100005D70;
  if ((_DWORD)v4) {
    uint64_t v6 = 0LL;
  }
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 64);
    if (v7 - *(void *)(a1 + 56) != 24) {
      __assert_rtn("ParseStream", "document.h", 2259, "stack_.GetSize() == sizeof(ValueType)");
    }
    *(void *)(a1 + 64) = v7 - 24;
    if (v7 - 24 != a1)
    {
      __int128 v8 = *(_OWORD *)(v7 - 24);
      *(void *)(a1 + 16) = *(void *)(v7 - 8);
      *(_OWORD *)a1 = v8;
      *(_WORD *)(v7 - 2) = 0;
    }
  }

  sub_1000078B8(&v10);
  free(__p[1]);
  if (__p[0]) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_10000CF10( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
}

uint64_t sub_10000CF34(uint64_t a1, void *a2, uint64_t a3)
{
  *(_DWORD *)(a1 + 4std::ostream::~ostream(v1, v2 + 8) = 0;
  *(void *)(a1 + 56) = 0LL;
  for (uint64_t i = (_BYTE *)*a2; ; ++i)
  {
    unsigned int v6 = *i;
    BOOL v7 = v6 > 0x20;
    uint64_t v8 = (1LL << v6) & 0x100002600LL;
    if (v7 || v8 == 0) {
      break;
    }
  }

  *a2 = i;
  if (!*i)
  {
    int v14 = 1;
LABEL_19:
    int v15 = &i[-a2[1]];
    *(_DWORD *)(a1 + 4std::ostream::~ostream(v1, v2 + 8) = v14;
    *(void *)(a1 + 56) = v15;
    goto LABEL_16;
  }

  sub_10000D020(a1, a2, a3);
  if (!*(_DWORD *)(a1 + 48))
  {
    for (uint64_t i = (_BYTE *)*a2; ; ++i)
    {
      unsigned int v10 = *i;
      BOOL v7 = v10 > 0x20;
      uint64_t v11 = (1LL << v10) & 0x100002600LL;
      if (v7 || v11 == 0) {
        break;
      }
    }

    *a2 = i;
    if (*i)
    {
      int v14 = 2;
      goto LABEL_19;
    }
  }

void sub_10000D014(_Unwind_Exception *a1)
{
  *(void *)(v1 + 24) = *(void *)(v1 + 16);
  _Unwind_Resume(a1);
}

void sub_10000D020(uint64_t result, void *a2, uint64_t a3)
{
  int v3 = *(char *)*a2;
  if (v3 > 109)
  {
    switch(v3)
    {
      case '{':
        sub_10000D1A4(result, (uint64_t)a2, (void *)a3);
        return;
      case 't':
        sub_100005E20(result, a2, a3);
        return;
      case 'n':
        sub_100005D80(result, a2, a3);
        return;
    }
  }

  else
  {
    switch(v3)
    {
      case '""':
        sub_10000D080(result, a2, a3);
        return;
      case '[':
        sub_10000D3F8(result, (unsigned __int8 **)a2, (void *)a3);
        return;
      case 'f':
        sub_100005EC8(result, a2, a3);
        return;
    }
  }

  sub_10000D5C8(result, (unsigned __int8 **)a2, a3);
}

double sub_10000D080(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  __int128 v13 = *a2;
  int v14 = a2;
  if (*(_BYTE *)v13 != 34) {
    __assert_rtn("ParseString", "reader.h", 961, "s.Peek() == '\\'");
  }
  *(void *)&__int128 v13 = v13 + 1;
  uint64_t v11 = (void *)a1;
  int v12 = 0;
  sub_10000DDA8((_BYTE *)a1, (uint64_t *)&v13, &v11);
  if (!*(_DWORD *)(a1 + 48))
  {
    int v7 = v12;
    uint64_t v8 = (void *)sub_10000709C((unsigned int *)&v11, v5, v6);
    if ((sub_1000070D0(a3, v8, v7 - 1, 1) & 1) == 0)
    {
      if (*(_DWORD *)(a1 + 48)) {
        __assert_rtn("ParseString", "reader.h", 983, "!HasParseError()");
      }
      uint64_t v10 = v13 - *((void *)&v13 + 1);
      *(_DWORD *)(a1 + 4std::ostream::~ostream(v1, v2 + 8) = 16;
      *(void *)(a1 + 56) = v10;
    }
  }

  double result = *(double *)&v13;
  _OWORD *v14 = v13;
  return result;
}

void sub_10000D188( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 a11, _OWORD *a12)
{
  *a12 = a11;
  _Unwind_Resume(a1);
}

void sub_10000D1A4(uint64_t a1, uint64_t a2, void *a3)
{
  if (**(_BYTE **)a2 != 123) {
    sub_10005E670();
  }
  ++*(void *)a2;
  uint64_t v6 = sub_100006D2C(a3 + 5, 1LL);
  *(void *)(v6 + std::ostream::~ostream(v1, v2 + 8) = 0LL;
  *(void *)(v6 + 16) = 0LL;
  *(void *)uint64_t v6 = 0LL;
  *(_WORD *)(v6 + 22) = 3;
  for (uint64_t i = *(_BYTE **)a2; ; ++i)
  {
    unsigned int v9 = *i;
    BOOL v10 = v9 > 0x20;
    uint64_t v11 = (1LL << v9) & 0x100002600LL;
    if (v10 || v11 == 0) {
      break;
    }
  }

  *(void *)a2 = i;
  if (!*(_DWORD *)(a1 + 48))
  {
    int v13 = *i;
    if (v13 == 125)
    {
      *(void *)a2 = i + 1;
      if ((sub_10000765C(a3, 0, v7) & 1) != 0) {
        return;
      }
      if (*(_DWORD *)(a1 + 48)) {
        sub_10005E5F8();
      }
LABEL_46:
      uint64_t i = *(_BYTE **)a2;
      int v31 = 16;
LABEL_52:
      uint64_t v32 = &i[-*(void *)(a2 + 8)];
      *(_DWORD *)(a1 + 4std::ostream::~ostream(v1, v2 + 8) = v31;
      *(void *)(a1 + 56) = v32;
      return;
    }

    if (v13 != 34)
    {
LABEL_44:
      int v31 = 4;
      goto LABEL_52;
    }

    unsigned int v14 = 0;
    while (1)
    {
      v15.n128_f64[0] = sub_10000D080(a1, (_OWORD *)a2, (uint64_t)a3);
      if (*(_DWORD *)(a1 + 48)) {
        break;
      }
      for (uint64_t i = *(_BYTE **)a2; ; ++i)
      {
        unsigned int v16 = *i;
        BOOL v10 = v16 > 0x20;
        uint64_t v17 = (1LL << v16) & 0x100002600LL;
        if (v10 || v17 == 0) {
          break;
        }
      }

      *(void *)a2 = i;
      if (*i != 58)
      {
        int v31 = 5;
        goto LABEL_52;
      }

      uint64_t v19 = i + 1;
      *(void *)a2 = v19;
      while (1)
      {
        unsigned int v20 = *v19;
        BOOL v10 = v20 > 0x20;
        uint64_t v21 = (1LL << v20) & 0x100002600LL;
        if (v10 || v21 == 0) {
          break;
        }
        ++v19;
      }

      *(void *)a2 = v19;
      sub_10000D020(a1, a2, a3, v15);
      if (*(_DWORD *)(a1 + 48)) {
        return;
      }
      for (uint64_t i = *(_BYTE **)a2; ; ++i)
      {
        unsigned int v24 = *i;
        BOOL v10 = v24 > 0x20;
        uint64_t v25 = (1LL << v24) & 0x100002600LL;
        if (v10 || v25 == 0) {
          break;
        }
      }

      *(void *)a2 = i;
      ++v14;
      int v27 = (char)*i;
      if (v27 != 44)
      {
        if (v27 != 125)
        {
          int v31 = 6;
          goto LABEL_52;
        }

        *(void *)a2 = i + 1;
        if ((sub_10000765C(a3, v14, v23) & 1) != 0) {
          return;
        }
        if (*(_DWORD *)(a1 + 48)) {
          sub_10005E648();
        }
        goto LABEL_46;
      }

      *(void *)a2 = ++i;
      while (1)
      {
        unsigned int v28 = *i;
        BOOL v10 = v28 > 0x20;
        uint64_t v29 = (1LL << v28) & 0x100002600LL;
        if (v10 || v29 == 0) {
          break;
        }
        ++i;
      }

      *(void *)a2 = i;
      if (*i != 34) {
        goto LABEL_44;
      }
    }
  }

uint64_t sub_10000D3F8(uint64_t a1, unsigned __int8 **a2, void *a3)
{
  if (**a2 != 91) {
    sub_10005E710();
  }
  ++*a2;
  uint64_t result = sub_100006D2C(a3 + 5, 1LL);
  *(void *)(result + std::ostream::~ostream(v1, v2 + 8) = 0LL;
  *(void *)(result + 16) = 0LL;
  *(void *)uint64_t result = 0LL;
  *(_WORD *)(result + 22) = 4;
  for (uint64_t i = *a2; ; ++i)
  {
    unsigned int v10 = *i;
    BOOL v11 = v10 > 0x20;
    uint64_t v12 = (1LL << v10) & 0x100002600LL;
    if (v11 || v12 == 0) {
      break;
    }
  }

  *a2 = i;
  if (!*(_DWORD *)(a1 + 48))
  {
    if (*i == 93)
    {
      *a2 = i + 1;
      uint64_t result = sub_100007734(a3, 0, v7);
      if ((result & 1) != 0) {
        return result;
      }
      if (*(_DWORD *)(a1 + 48)) {
        sub_10005E698();
      }
      goto LABEL_31;
    }

    uint64_t result = sub_10000D020(a1, a2, a3, v8);
    if (!*(_DWORD *)(a1 + 48))
    {
      unsigned int v16 = 0;
      while (1)
      {
        for (uint64_t j = *a2; ; ++j)
        {
          unsigned int v18 = *j;
          BOOL v11 = v18 > 0x20;
          uint64_t v19 = (1LL << v18) & 0x100002600LL;
          if (v11 || v19 == 0) {
            break;
          }
        }

        ++v16;
        *a2 = j;
        int v21 = *j;
        if (v21 != 44) {
          break;
        }
        uint64_t v22 = j + 1;
        *a2 = v22;
        while (1)
        {
          unsigned int v23 = *v22;
          BOOL v11 = v23 > 0x20;
          uint64_t v24 = (1LL << v23) & 0x100002600LL;
          if (v11 || v24 == 0) {
            break;
          }
          ++v22;
        }

        *a2 = v22;
        uint64_t result = sub_10000D020(a1, a2, a3, v15);
        if (*(_DWORD *)(a1 + 48)) {
          return result;
        }
      }

      if (v21 != 93)
      {
        int v26 = 7;
        goto LABEL_32;
      }

      *a2 = j + 1;
      uint64_t result = sub_100007734(a3, v16, v14);
      if ((result & 1) == 0)
      {
        if (*(_DWORD *)(a1 + 48)) {
          sub_10005E6E8();
        }
LABEL_31:
        uint64_t j = *a2;
        int v26 = 16;
LABEL_32:
        int v27 = (unsigned __int8 *)(j - a2[1]);
        *(_DWORD *)(a1 + 4std::ostream::~ostream(v1, v2 + 8) = v26;
        *(void *)(a1 + 56) = v27;
      }
    }
  }

  return result;
}

uint64_t sub_10000D5C8(uint64_t result, unsigned __int8 **a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  int v6 = **a2;
  if (v6 == 45)
  {
    __n128 v8 = v4 + 1;
    int v7 = v4[1];
  }

  else
  {
    int v7 = **a2;
    __n128 v8 = *a2;
  }

  LODWORD(v9) = v7 - 48;
  if (v7 == 48)
  {
    unint64_t v16 = 0LL;
    int v17 = 0;
    LODWORD(v14) = 0;
    int v18 = 0;
    double v13 = 0.0;
    unsigned int v10 = v8[1];
    uint64_t v11 = (uint64_t)(v8 + 1);
    goto LABEL_41;
  }

  if ((v7 - 49) > 8)
  {
    if (*(_DWORD *)(result + 48)) {
      __assert_rtn("ParseNumber", "reader.h", 1532, "!HasParseError()");
    }
    std::string::size_type v39 = (unsigned __int8 *)(v8 - v5);
    int v40 = 3;
    goto LABEL_111;
  }

  uint64_t v11 = (uint64_t)(v8 + 1);
  unsigned int v10 = v8[1];
  unsigned int v12 = v10 - 48;
  double v13 = 0.0;
  if (v6 != 45)
  {
    if (v12 <= 9)
    {
      uint64_t v14 = 0LL;
      while (1)
      {
        if (v9 > 0x19999998)
        {
          if ((_DWORD)v9 != 429496729) {
            goto LABEL_23;
          }
          if (v10 > 0x35) {
            break;
          }
        }

        LODWORD(v9) = v10 + 10 * v9 - 48;
        unsigned int v10 = v8[v14++ + 2];
        if (v10 - 48 >= 0xA)
        {
          unint64_t v16 = 0LL;
          int v17 = 0;
          int v18 = 0;
          uint64_t v11 = (uint64_t)&v8[v14 + 1];
          goto LABEL_41;
        }
      }

      LODWORD(v9) = 429496729;
LABEL_23:
      uint64_t v11 = (uint64_t)&v8[v14 + 1];
      goto LABEL_24;
    }

void sub_10000DD88(_Unwind_Exception *a1)
{
  *uint64_t v1 = v3;
  v1[1] = v2;
  _Unwind_Resume(a1);
}

_BYTE *sub_10000DDA8(_BYTE *result, uint64_t *a2, void **a3)
{
  uint64_t v5 = (uint64_t)result;
  while (1)
  {
    while (1)
    {
      int v6 = (char *)*a2;
      unsigned int v7 = *(unsigned __int8 *)*a2;
      if (v7 == 92) {
        break;
      }
      if (v7 == 34)
      {
        *a2 = (uint64_t)(v6 + 1);
        uint64_t result = (_BYTE *)sub_10000733C(*a3, 1LL);
        *uint64_t result = 0;
        ++*((_DWORD *)a3 + 2);
        return result;
      }

      if (v7 <= 0x1F)
      {
        int v14 = *(_DWORD *)(v5 + 48);
        if (*(_BYTE *)*a2)
        {
          if (v14) {
            sub_10005E7B0();
          }
          unsigned int v15 = &v6[-a2[1]];
          int v16 = 12;
        }

        else
        {
          if (v14) {
            sub_10005E788();
          }
          unsigned int v15 = &v6[-a2[1]];
          int v16 = 11;
        }

        *(_DWORD *)(v5 + 4std::ostream::~ostream(v1, v2 + 8) = v16;
        goto LABEL_25;
      }

      *a2 = (uint64_t)(v6 + 1);
      char v8 = *v6;
LABEL_6:
      uint64_t result = (_BYTE *)sub_10000733C(*a3, 1LL);
      *uint64_t result = v8;
      ++*((_DWORD *)a3 + 2);
    }

    uint64_t v9 = a2[1];
    *a2 = (uint64_t)(v6 + 1);
    uint64_t v10 = v6[1];
    char v8 = byte_100060B58[v10];
    if (v8)
    {
      *a2 = (uint64_t)(v6 + 2);
      goto LABEL_6;
    }

    uint64_t v11 = (uint64_t)&v6[-v9];
    if ((_DWORD)v10 != 117) {
      break;
    }
    *a2 = (uint64_t)(v6 + 2);
    uint64_t v18 = (uint64_t)&v6[-v9];
    uint64_t result = (_BYTE *)sub_10000713C(v5, a2, v11);
    if (*(_DWORD *)(v5 + 48)) {
      return result;
    }
    unsigned int v12 = result;
    if (result >> 10 == 54)
    {
      int v17 = (int)result;
      uint64_t v13 = *a2;
      if (*(_BYTE *)*a2 != 92) {
        goto LABEL_31;
      }
      *a2 = v13 + 1;
      if (*(_BYTE *)(v13 + 1) != 117) {
        goto LABEL_31;
      }
      *a2 = v13 + 2;
      uint64_t result = (_BYTE *)sub_10000713C(v5, a2, v18);
      if (*(_DWORD *)(v5 + 48)) {
        return result;
      }
      if (((_DWORD)result - 57344) <= 0xFFFFFBFF)
      {
LABEL_31:
        *(_DWORD *)(v5 + 4std::ostream::~ostream(v1, v2 + 8) = 9;
        unsigned int v15 = (char *)v18;
LABEL_25:
        *(void *)(v5 + 56) = v15;
        return result;
      }

      unsigned int v12 = (((_DWORD)result - 56320) | ((v17 << 10) - 56623104)) + 0x10000;
    }

    uint64_t result = sub_1000071DC(a3, v12);
  }

  if (*(_DWORD *)(v5 + 48)) {
    sub_10005E7D8();
  }
  *(_DWORD *)(v5 + 4std::ostream::~ostream(v1, v2 + 8) = 10;
  *(void *)(v5 + 56) = v11;
  return result;
}

void sub_10000DFB0(uint64_t a1)
{
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_10000E024( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10000E058(uint64_t a1, _DWORD *a2)
{
  char v4 = siri::dialogengine::OptionExists(a1, v19);
  char v5 = v4;
  if ((char)v20 < 0)
  {
    operator delete(v19[0]);
    if ((v5 & 1) != 0)
    {
LABEL_3:
      sub_1000021BC(__p, "--randomSeed");
      siri::dialogengine::GetOption(v19, a1, __p);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      unint64_t v6 = v20;
      if ((v20 & 0x80u) != 0) {
        unint64_t v6 = (unint64_t)v19[1];
      }
      if (!v6)
      {
        uint64_t v9 = sub_100002F60(&std::cout, (uint64_t)"Error: no value specified for option --randomSeed", 49LL);
        std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24LL)));
        uint64_t v10 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
        uint64_t v11 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10LL);
        std::locale::~locale((std::locale *)__p);
        std::ostream::put(v9, v11);
        std::ostream::flush(v9);
        BOOL v8 = 0LL;
        if (a2) {
          *a2 = 0;
        }
        goto LABEL_19;
      }

      char v16 = 0;
      int v7 = siri::dialogengine::StringToUInt(v19, &v16, 0LL);
      BOOL v8 = v16 != 0;
      if (v16)
      {
        if (!a2)
        {
LABEL_19:
          return v8;
        }
      }

      else
      {
        unsigned int v12 = sub_100002F60( &std::cout,  (uint64_t)"Error: the value of --randomSeed is not a number or is out of range",  67LL);
        std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(*v12 - 24LL)));
        uint64_t v13 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
        uint64_t v14 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10LL);
        std::locale::~locale((std::locale *)__p);
        std::ostream::put(v12, v14);
        std::ostream::flush(v12);
        if (!a2) {
          goto LABEL_19;
        }
        int v7 = 0;
      }

      *a2 = v7;
      goto LABEL_19;
    }
  }

  else if ((v4 & 1) != 0)
  {
    goto LABEL_3;
  }

  BOOL v8 = 0LL;
  if (a2) {
    *a2 = 0;
  }
  return v8;
}

void sub_10000E254( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10000E2A0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)a1;
  else {
    std::string __dst = *(std::string *)(v4 + 48);
  }
  memset(&__p, 0, sizeof(__p));
  if (siri::dialogengine::FileExists(&__dst))
  {
    siri::dialogengine::ReadFileToString(&v121, &__dst);
    goto LABEL_6;
  }

  sub_1000021BC(&v121, "--json");
  int v7 = siri::dialogengine::OptionExists(a1, &v121);
  int v8 = v7;
  if (((char)v121.__r_.__value_.__s.__size_ & 0x80000000) == 0)
  {
    if (v7) {
      goto LABEL_13;
    }
LABEL_27:
    sub_1000021BC(&v121, "--renderVisualCat");
    siri::dialogengine::GetOption(v112, a1, &v121);
    sub_1000021BC(&v121, "--renderVisualCat");
    if (siri::dialogengine::OptionExists(a1, &v121))
    {
      if ((SBYTE7(v113) & 0x80u) == 0) {
        locale = (std::locale::__imp *)BYTE7(v113);
      }
      else {
        locale = v112[1].__locale_;
      }
      if (!locale)
      {
        uint64_t v10 = sub_100002F60(&std::cout, (uint64_t)"Error: No path given for rendered output", 40LL);
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(*v10 - 24LL)));
        uint64_t v11 = std::locale::use_facet((const std::locale *)&v121, &std::ctype<char>::id);
        uint64_t v12 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10LL);
        std::locale::~locale((std::locale *)&v121);
        std::ostream::put(v10, v12);
        std::ostream::flush(v10);
        sub_1000021BC((void *)a2, (char *)&unk_10006A022);
LABEL_289:
        if ((SBYTE7(v113) & 0x80000000) == 0) {
          goto LABEL_292;
        }
        uint64_t v44 = v112[0].__locale_;
        goto LABEL_291;
      }
    }

    else if ((char)v121.__r_.__value_.__s.__size_ < 0)
    {
      operator delete(v121.__r_.__value_.__l.__data_);
    }

    sub_1000021BC(v106, "--templateDir");
    siri::dialogengine::GetOption(&v121, a1, v106);
    siri::dialogengine::ExpandPath(&v116, &v121);
    if (SHIBYTE(v106[2]) < 0) {
      operator delete(v106[0]);
    }
    sub_1000021BC(&v121, "--catId");
    siri::dialogengine::GetOption(&v105, a1, &v121);
    sub_1000021BC(&v121, "--visualCatId");
    siri::dialogengine::GetOption(&__str, a1, &v121);
    sub_1000021BC(&v121, "--locale");
    siri::dialogengine::GetOption(v102, a1, &v121);
    sub_1000021BC(v106, "--params");
    siri::dialogengine::GetMultipleOptions(&v121, a1, v106);
    sub_1000021BC(v98, " ");
    siri::dialogengine::StringJoin(v100, &v121, v98);
    v98[0] = &v121;
    sub_1000027F4((void ***)v98);
    if (SHIBYTE(v106[2]) < 0) {
      operator delete(v106[0]);
    }
    sub_1000021BC(v106, "--globalParams");
    siri::dialogengine::GetMultipleOptions(&v121, a1, v106);
    sub_1000021BC(v96, " ");
    siri::dialogengine::StringJoin(v98, &v121, v96);
    if (SHIBYTE(v97) < 0) {
      operator delete(v96[0]);
    }
    v96[0] = &v121;
    sub_1000027F4((void ***)v96);
    if (SHIBYTE(v106[2]) < 0) {
      operator delete(v106[0]);
    }
    sub_1000021BC(&v121, "--resetState");
    int v27 = siri::dialogengine::OptionExists(a1, &v121);
    sub_1000021BC(&v121, "--test");
    int v28 = siri::dialogengine::OptionExists(a1, &v121);
    sub_1000021BC(&v121, "--debug");
    int v29 = siri::dialogengine::OptionExists(a1, &v121);
    sub_1000021BC(&v121, "--createTrace");
    int v30 = siri::dialogengine::OptionExists(a1, &v121);
    sub_1000021BC(&v121, "--labelMode");
    int v31 = siri::dialogengine::OptionExists(a1, &v121);
    uint64_t v32 = v118;
    if ((v118 & 0x80u) != 0) {
      uint64_t v32 = v117;
    }
    if (!v32)
    {
      BOOL v45 = sub_100002F60(&std::cout, (uint64_t)"Error: no --templateDir option specified", 40LL);
      std::ios_base::getloc((const std::ios_base *)((char *)v45 + *(void *)(*v45 - 24LL)));
      int v46 = std::locale::use_facet((const std::locale *)&v121, &std::ctype<char>::id);
      uint64_t v47 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v46->__vftable[2].~facet_0)(v46, 10LL);
      std::locale::~locale((std::locale *)&v121);
      std::ostream::put(v45, v47);
      std::ostream::flush(v45);
      sub_1000021BC((void *)a2, (char *)&unk_10006A022);
      goto LABEL_277;
    }

    int v92 = v31;
    if ((v105.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type size = v105.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type size = v105.__r_.__value_.__l.__size_;
    }
    std::string::size_type v34 = __str.__r_.__value_.__s.__size_;
    if ((__str.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      std::string::size_type v34 = __str.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      if (v34)
      {
        double v35 = sub_100002F60( &std::cout,  (uint64_t)"Warning: Both --catId and --visualCatId options specified; Ignoring --visualCatId",
                81LL);
        std::ios_base::getloc((const std::ios_base *)((char *)v35 + *(void *)(*v35 - 24LL)));
        int v36 = std::locale::use_facet((const std::locale *)&v121, &std::ctype<char>::id);
        uint64_t v37 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v36->__vftable[2].~facet_0)(v36, 10LL);
        std::locale::~locale((std::locale *)&v121);
        std::ostream::put(v35, v37);
        std::ostream::flush(v35);
        if ((char)__str.__r_.__value_.__s.__size_ < 0)
        {
          *__str.__r_.__value_.__l.__data_ = 0;
          __str.__r_.__value_.__l.__size_ = 0LL;
        }

        else
        {
          __str.__r_.__value_.__s.__data_[0] = 0;
          __str.__r_.__value_.__s.__size_ = 0;
        }
      }
    }

    else
    {
      if (!v34)
      {
        v76 = sub_100002F60(&std::cout, (uint64_t)"Error: no --catId or --visualCatId option specified", 51LL);
        std::ios_base::getloc((const std::ios_base *)((char *)v76 + *(void *)(*v76 - 24LL)));
        __int128 v79 = std::locale::use_facet((const std::locale *)&v121, &std::ctype<char>::id);
        uint64_t v80 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v79->__vftable[2].~facet_0)(v79, 10LL);
        std::locale::~locale((std::locale *)&v121);
        std::ostream::put(v76, v80);
        goto LABEL_189;
      }

      std::string::operator=(&v105, &__str);
    }

    unint64_t v48 = v103;
    if ((v103 & 0x80u) != 0) {
      unint64_t v48 = (unint64_t)v102[1];
    }
    if (v48)
    {
      unsigned int v95 = 0;
      sub_1000021BC(&v121, "--randomSeed");
      int v51 = siri::dialogengine::OptionExists(a1, &v121);
      if (!v51 || sub_10000E058(a1, &v95))
      {
        memset(v106, 0, sizeof(v106));
        uint64_t v107 = 256LL;
        *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0u;
        __int128 v122 = 0u;
        v121.__r_.__value_.__r.__words[0] = (std::string::size_type)v106;
        uint64_t v123 = 0LL;
        uint64_t v124 = 512LL;
        int v125 = 324;
        __int16 v126 = 0x2000;
        uint64_t v127 = 4LL;
        sub_10000FF78(&v121, v49, v50);
        sub_100012B4C(&v121, 5LL, v52);
        sub_100012E30((uint64_t *)&v121, (uint64_t)"templateDir", 0xBu);
        if ((v118 & 0x80u) == 0) {
          uint64_t v53 = (const char *)&v116;
        }
        else {
          uint64_t v53 = (const char *)v116;
        }
        size_t v54 = strlen(v53);
        sub_100012950((uint64_t *)&v121, (uint64_t)v53, v54);
        sub_100012B4C(&v121, 5LL, v55);
        sub_100012E30((uint64_t *)&v121, (uint64_t)"catId", 5u);
        if ((v105.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          int64_t v56 = &v105;
        }
        else {
          int64_t v56 = (std::string *)v105.__r_.__value_.__r.__words[0];
        }
        size_t v57 = strlen((const char *)v56);
        sub_100012950((uint64_t *)&v121, (uint64_t)v56, v57);
        sub_100012B4C(&v121, 5LL, v58);
        sub_100012E30((uint64_t *)&v121, (uint64_t)"locale", 6u);
        if ((v103 & 0x80u) == 0) {
          __int128 v59 = v102;
        }
        else {
          __int128 v59 = (void **)v102[0];
        }
        size_t v60 = strlen((const char *)v59);
        sub_100012950((uint64_t *)&v121, (uint64_t)v59, v60);
        unint64_t v62 = v101;
        if ((v101 & 0x80u) != 0) {
          unint64_t v62 = (unint64_t)v100[1];
        }
        if (v62)
        {
          sub_10000FFC8((uint64_t *)&v121, "parameters");
          sub_10000FFC8((uint64_t *)&v121, "<PARAMS>");
        }

        unint64_t v63 = v99;
        if ((v99 & 0x80u) != 0) {
          unint64_t v63 = (unint64_t)v98[1];
        }
        if (v63)
        {
          sub_10000FFC8((uint64_t *)&v121, "globalParameters");
          sub_10000FFC8((uint64_t *)&v121, "<GLOBALPARAMS>");
        }

        if (v95)
        {
          sub_10000FFC8((uint64_t *)&v121, "randomSeed");
          sub_100010000(&v121, v95, v64);
        }

        if (v27)
        {
          sub_10000FFC8((uint64_t *)&v121, "resetState");
          sub_100012B4C(&v121, 2LL, v65);
          sub_100014244((uint64_t *)&v121, 1);
        }

        if (v28)
        {
          sub_10000FFC8((uint64_t *)&v121, "test");
          sub_100012B4C(&v121, 2LL, v66);
          sub_100014244((uint64_t *)&v121, 1);
        }

        if (v29)
        {
          sub_10000FFC8((uint64_t *)&v121, "debug");
          sub_100012B4C(&v121, 2LL, v67);
          sub_100014244((uint64_t *)&v121, 1);
        }

        if (v30)
        {
          sub_10000FFC8((uint64_t *)&v121, "createTrace");
          sub_100012B4C(&v121, 2LL, v68);
          sub_100014244((uint64_t *)&v121, 1);
        }

        if (v92)
        {
          sub_10000FFC8((uint64_t *)&v121, "labelMode");
          sub_100012B4C(&v121, 2LL, v69);
          sub_100014244((uint64_t *)&v121, 1);
        }

        if (!size)
        {
          sub_10000FFC8((uint64_t *)&v121, "requestType");
          sub_10000FFC8((uint64_t *)&v121, "visual");
        }

        char v70 = (std::locale::__imp *)BYTE7(v113);
        if (SBYTE7(v113) < 0) {
          char v70 = v112[1].__locale_;
        }
        if (!v70) {
          goto LABEL_264;
        }
        sub_10000FFC8((uint64_t *)&v121, "renderVisualCat");
        if ((SBYTE7(v113) & 0x80u) == 0) {
          uint64_t v71 = (char *)v112;
        }
        else {
          uint64_t v71 = (char *)v112[0].__locale_;
        }
        sub_10000FFC8((uint64_t *)&v121, v71);
        sub_1000021BC(v96, "--renderDarkMode");
        int v72 = siri::dialogengine::OptionExists(a1, v96);
        if (SHIBYTE(v97) < 0) {
          operator delete(v96[0]);
        }
        if (v72)
        {
          sub_10000FFC8((uint64_t *)&v121, "renderDarkMode");
          sub_100012B4C(&v121, 2LL, v73);
          sub_100014244((uint64_t *)&v121, 1);
        }

        sub_1000021BC(v93, "--renderDeviceClass");
        siri::dialogengine::GetOption(v96, a1, v93);
        if (v94 < 0) {
          operator delete(v93[0]);
        }
        sub_1000021BC(v93, "--renderDeviceClass");
        if (siri::dialogengine::OptionExists(a1, v93))
        {
          if (v97 >= 0) {
            uint64_t v74 = (void *)HIBYTE(v97);
          }
          else {
            uint64_t v74 = v96[1];
          }
          if (v94 < 0) {
            operator delete(v93[0]);
          }
          if (v74)
          {
            sub_10000FFC8((uint64_t *)&v121, "renderDeviceClass");
            if (v97 >= 0) {
              uint64_t v75 = (char *)v96;
            }
            else {
              uint64_t v75 = (char *)v96[0];
            }
            sub_10000FFC8((uint64_t *)&v121, v75);
          }
        }

        else if (v94 < 0)
        {
          operator delete(v93[0]);
        }

        if (SHIBYTE(v97) < 0) {
          operator delete(v96[0]);
        }
        sub_1000021BC(v93, "--renderDeviceTrain");
        siri::dialogengine::GetOption(v96, a1, v93);
        if (v94 < 0) {
          operator delete(v93[0]);
        }
        sub_1000021BC(v93, "--renderDeviceTrain");
        if (siri::dialogengine::OptionExists(a1, v93))
        {
          if (v97 >= 0) {
            __int128 v81 = (void *)HIBYTE(v97);
          }
          else {
            __int128 v81 = v96[1];
          }
          if (v94 < 0) {
            operator delete(v93[0]);
          }
          if (v81)
          {
            sub_10000FFC8((uint64_t *)&v121, "renderDeviceTrain");
            if (v97 >= 0) {
              uint64_t v82 = (char *)v96;
            }
            else {
              uint64_t v82 = (char *)v96[0];
            }
            sub_10000FFC8((uint64_t *)&v121, v82);
            if (SHIBYTE(v97) < 0) {
              operator delete(v96[0]);
            }
            sub_1000021BC(v93, "--renderOrientation");
            siri::dialogengine::GetOption(v96, a1, v93);
            if (v94 < 0) {
              operator delete(v93[0]);
            }
            sub_1000021BC(v93, "--renderOrientation");
            if (siri::dialogengine::OptionExists(a1, v93))
            {
              if (v97 >= 0) {
                __int128 v83 = (void *)HIBYTE(v97);
              }
              else {
                __int128 v83 = v96[1];
              }
              if (v94 < 0) {
                operator delete(v93[0]);
              }
              if (v83)
              {
                sub_10000FFC8((uint64_t *)&v121, "renderOrientation");
                if (v97 >= 0) {
                  __int128 v84 = (char *)v96;
                }
                else {
                  __int128 v84 = (char *)v96[0];
                }
                sub_10000FFC8((uint64_t *)&v121, v84);
              }
            }

            else if (v94 < 0)
            {
              operator delete(v93[0]);
            }

            if (SHIBYTE(v97) < 0) {
              operator delete(v96[0]);
            }
            sub_1000021BC(v93, "--renderContext");
            siri::dialogengine::GetOption(v96, a1, v93);
            if (v94 < 0) {
              operator delete(v93[0]);
            }
            sub_1000021BC(v93, "--renderContext");
            if (siri::dialogengine::OptionExists(a1, v93))
            {
              if (v97 >= 0) {
                __int128 v87 = (void *)HIBYTE(v97);
              }
              else {
                __int128 v87 = v96[1];
              }
              if (v94 < 0) {
                operator delete(v93[0]);
              }
              if (v87)
              {
                sub_10000FFC8((uint64_t *)&v121, "renderContext");
                if (v97 >= 0) {
                  __int128 v88 = (char *)v96;
                }
                else {
                  __int128 v88 = (char *)v96[0];
                }
                sub_10000FFC8((uint64_t *)&v121, v88);
              }
            }

            else if (v94 < 0)
            {
              operator delete(v93[0]);
            }

            if (SHIBYTE(v97) < 0) {
              operator delete(v96[0]);
            }
            sub_1000021BC(v93, "--renderScreenSize");
            siri::dialogengine::GetOption(v96, a1, v93);
            if (v94 < 0) {
              operator delete(v93[0]);
            }
            sub_1000021BC(v93, "--renderScreenSize");
            if (siri::dialogengine::OptionExists(a1, v93))
            {
              if (v97 >= 0) {
                uint64_t v89 = (void *)HIBYTE(v97);
              }
              else {
                uint64_t v89 = v96[1];
              }
              if (v94 < 0) {
                operator delete(v93[0]);
              }
              if (v89)
              {
                sub_10000FFC8((uint64_t *)&v121, "renderScreenSize");
                if (v97 >= 0) {
                  uint64_t v90 = (char *)v96;
                }
                else {
                  uint64_t v90 = (char *)v96[0];
                }
                sub_10000FFC8((uint64_t *)&v121, v90);
              }
            }

            else if (v94 < 0)
            {
              operator delete(v93[0]);
            }

            if (SHIBYTE(v97) < 0) {
              operator delete(v96[0]);
            }
LABEL_264:
            sub_10001007C(&v121, 0LL, v61);
            uint64_t v91 = (char *)sub_10000FF38(v106);
            sub_1000021BC((void *)a2, v91);
            sub_1000021BC(v93, "<PARAMS>");
            siri::dialogengine::StringReplace(v96, a2, v93, v100, 0LL);
            *(_OWORD *)a2 = *(_OWORD *)v96;
            *(void *)(a2 + 16) = v97;
            HIBYTE(v97) = 0;
            LOBYTE(v96[0]) = 0;
            if (v94 < 0) {
              operator delete(v93[0]);
            }
            sub_1000021BC(v93, "<GLOBALPARAMS>");
            siri::dialogengine::StringReplace(v96, a2, v93, v98, 0LL);
            *(_OWORD *)a2 = *(_OWORD *)v96;
            *(void *)(a2 + 16) = v97;
            HIBYTE(v97) = 0;
            LOBYTE(v96[0]) = 0;
            if ((v94 & 0x80000000) == 0) {
              goto LABEL_273;
            }
            uint64_t v86 = v93[0];
            goto LABEL_272;
          }
        }

        else if (v94 < 0)
        {
          operator delete(v93[0]);
        }

        __int128 v85 = sub_100002F60(&std::cout, (uint64_t)"Error: no --renderDeviceTrain option specified", 46LL);
        sub_100003ECC(v85);
        sub_1000021BC((void *)a2, (char *)&unk_10006A022);
        if ((SHIBYTE(v97) & 0x80000000) == 0)
        {
LABEL_273:
          free((void *)v122);
          if (v121.__r_.__value_.__l.__cap_) {
            operator delete((void *)v121.__r_.__value_.__l.__cap_);
          }
          free(v106[2]);
          if (v106[1]) {
            operator delete(v106[1]);
          }
          goto LABEL_277;
        }

        uint64_t v86 = v96[0];
LABEL_272:
        operator delete(v86);
        goto LABEL_273;
      }

      sub_1000021BC((void *)a2, (char *)&unk_10006A022);
LABEL_277:
      goto LABEL_289;
    }

    v76 = sub_100002F60(&std::cout, (uint64_t)"Error: no --locale option specified", 35LL);
    std::ios_base::getloc((const std::ios_base *)((char *)v76 + *(void *)(*v76 - 24LL)));
    uint64_t v77 = std::locale::use_facet((const std::locale *)&v121, &std::ctype<char>::id);
    uint64_t v78 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v77->__vftable[2].~facet_0)(v77, 10LL);
    std::locale::~locale((std::locale *)&v121);
    std::ostream::put(v76, v78);
LABEL_189:
    std::ostream::flush(v76);
    sub_1000021BC((void *)a2, (char *)&unk_10006A022);
    goto LABEL_277;
  }

  operator delete(v121.__r_.__value_.__l.__data_);
  if (!v8) {
    goto LABEL_27;
  }
LABEL_13:
  sub_1000021BC(v106, "--json");
  siri::dialogengine::GetOption(&v121, a1, v106);
  std::string __dst = v121;
  v121.__r_.__value_.__s.__size_ = 0;
  v121.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v106[2]) < 0) {
    operator delete(v106[0]);
  }
  if (siri::dialogengine::FileExists(&__dst))
  {
    siri::dialogengine::ReadFileToString(&v121, &__dst);
LABEL_6:
    std::string __p = v121;
    LODWORD(v105.__r_.__value_.__l.__data_) = 0;
    sub_1000021BC(&v121, "--randomSeed");
    int v5 = siri::dialogengine::OptionExists(a1, &v121);
    int v6 = v5;
    if ((char)v121.__r_.__value_.__s.__size_ < 0)
    {
      operator delete(v121.__r_.__value_.__l.__data_);
      if (!v6) {
        goto LABEL_21;
      }
    }

    else if (!v5)
    {
      goto LABEL_21;
    }

    if (!sub_10000E058(a1, &v105))
    {
      sub_1000021BC((void *)a2, (char *)&unk_10006A022);
      goto LABEL_292;
    }

LABEL_21:
    sub_1000021BC(v106, "--templateDir");
    siri::dialogengine::GetOption(&v121, a1, v106);
    siri::dialogengine::ExpandPath(&v116, &v121);
    if (SHIBYTE(v106[2]) < 0)
    {
      operator delete(v106[0]);
      if ((v6 & 1) != 0)
      {
LABEL_41:
        uint64_t v14 = sub_100005A28((uint64_t)&v121, 0LL, 1024LL, 0LL);
        p_p = &__p;
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        v106[0] = p_p;
        v106[1] = p_p;
        if (*(_DWORD *)(sub_10000CE28(v14, v106) + 88))
        {
          if (v128 > 0x11) {
            int v17 = "Unknown error.";
          }
          else {
            int v17 = off_100078D38[v128];
          }
          sub_1000021BC(v106, v17);
          __int16 v38 = sub_100002F60(&std::cout, (uint64_t)"Error: Invalid JSON request - ignoring request: ", 48LL);
          if (SHIBYTE(v106[2]) >= 0) {
            std::string::size_type v39 = v106;
          }
          else {
            std::string::size_type v39 = (void **)v106[0];
          }
          if (SHIBYTE(v106[2]) >= 0) {
            uint64_t v40 = HIBYTE(v106[2]);
          }
          else {
            uint64_t v40 = (uint64_t)v106[1];
          }
          __int128 v41 = sub_100002F60(v38, (uint64_t)v39, v40);
          std::ios_base::getloc((const std::ios_base *)((char *)v41 + *(void *)(*v41 - 24LL)));
          int v42 = std::locale::use_facet(v112, &std::ctype<char>::id);
          uint64_t v43 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v42->__vftable[2].~facet_0)(v42, 10LL);
          std::locale::~locale(v112);
          std::ostream::put(v41, v43);
          std::ostream::flush(v41);
          sub_1000021BC((void *)a2, (char *)&unk_10006A022);
          if (SHIBYTE(v106[2]) < 0) {
            operator delete(v106[0]);
          }
          sub_100007938((uint64_t)&v121);
          goto LABEL_120;
        }

        if (v6)
        {
          sub_1000021BC(v106, "randomSeed");
          siri::dialogengine::SetJSONUintVal(&v121, v106, LODWORD(v105.__r_.__value_.__l.__data_));
          if (SHIBYTE(v106[2]) < 0) {
            operator delete(v106[0]);
          }
        }

        uint64_t v18 = v118;
        if ((v118 & 0x80u) != 0) {
          uint64_t v18 = v117;
        }
        if (v18)
        {
          sub_1000021BC(v106, "templateDir");
          siri::dialogengine::SetJSONString(&v121, v106, &v116);
          if (SHIBYTE(v106[2]) < 0) {
            operator delete(v106[0]);
          }
        }

        *(_OWORD *)&v112[0].__locale_ = 0u;
        __int128 v113 = 0u;
        uint64_t v114 = 0LL;
        uint64_t v115 = 256LL;
        memset(&v106[1], 0, 32);
        v106[0] = v112;
        uint64_t v107 = 0LL;
        uint64_t v108 = 512LL;
        int v109 = 324;
        __int16 v110 = 0x2000;
        uint64_t v111 = 4LL;
        sub_10000FC3C((unsigned int *)&v121, (uint64_t *)v106, v16);
        unsigned int v19 = (const std::string::value_type *)sub_10000FF38(v112);
        std::string::assign(&__p, v19);
        free(v106[3]);
        if (v106[2]) {
          operator delete(v106[2]);
        }
        free((void *)v113);
        if (v112[1].__locale_) {
          operator delete(v112[1].__locale_);
        }
        sub_100007938((uint64_t)&v121);
LABEL_60:
        *(std::string *)a2 = __p;
        memset(&__p, 0, sizeof(__p));
LABEL_120:
        uint64_t v44 = v116;
LABEL_291:
        operator delete(v44);
        goto LABEL_292;
      }
    }

    else if ((v6 & 1) != 0)
    {
      goto LABEL_41;
    }

    uint64_t v13 = v118;
    if ((v118 & 0x80u) != 0) {
      uint64_t v13 = v117;
    }
    if (!v13) {
      goto LABEL_60;
    }
    goto LABEL_41;
  }

  unsigned __int8 v20 = sub_100002F60(&std::cout, (uint64_t)"Error: Specified JSON file does not exist (", 43LL);
  if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_dst = &__dst;
  }
  else {
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v22 = __dst.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t v22 = __dst.__r_.__value_.__l.__size_;
  }
  uint64_t v23 = sub_100002F60(v20, (uint64_t)p_dst, v22);
  int v24 = sub_100002F60(v23, (uint64_t)")", 1LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(void *)(*v24 - 24LL)));
  int v25 = std::locale::use_facet((const std::locale *)&v121, &std::ctype<char>::id);
  uint64_t v26 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10LL);
  std::locale::~locale((std::locale *)&v121);
  std::ostream::put(v24, v26);
  std::ostream::flush(v24);
  sub_1000021BC((void *)a2, (char *)&unk_10006A022);
LABEL_292:
}

            *a2++ = word_100061120[(unsigned __int16)v4 / 0x64u];
            goto LABEL_22;
          }

void sub_10000F7DC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, void *a27, uint64_t a28, int a29, __int16 a30, char a31, char a32, void *a33, uint64_t a34, int a35, __int16 a36, char a37, char a38, void *a39, uint64_t a40, int a41, __int16 a42, char a43, char a44, void *a45, uint64_t a46, int a47, __int16 a48, char a49, char a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,std::locale a61,uint64_t a62,int a63)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_100005AA8(v74 + 8);
  sub_100005AA8((uint64_t)&a51);
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  if (a72 < 0) {
    operator delete(a71);
  }
  if (a66 < 0) {
    operator delete(a61.__locale_);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10000FC3C(unsigned int *a1, uint64_t *a2, uint64_t a3)
{
  __int16 v3 = *((_WORD *)a1 + 11);
  switch(v3 & 7)
  {
    case 0:
      sub_100012B4C((void **)a2, 0LL, a3);
      return sub_100012CAC(a2);
    case 1:
      sub_100012B4C((void **)a2, 1LL, a3);
      int v7 = a2;
      int v8 = 0;
      return sub_100014244(v7, v8);
    case 2:
      sub_100012B4C((void **)a2, 2LL, a3);
      int v7 = a2;
      int v8 = 1;
      return sub_100014244(v7, v8);
    case 3:
      if (*((_WORD *)a1 + 11) != 3) {
        sub_10005E93C();
      }
      uint64_t v10 = *((void *)a1 + 1);
      while (2)
      {
        uint64_t v11 = *a1;
        if ((*(_WORD *)(v10 + 22) & 0x400) == 0) {
          sub_10005E8EC();
        }
        uint64_t v12 = sub_100012368(v10);
        uint64_t v13 = sub_100012540((unsigned int *)v10);
        if (sub_100012950(a2, v12, v13))
        {
          uint64_t v14 = v10 + 24;
          if ((sub_10000FC3C(v14, a2) & 1) != 0)
          {
            uint64_t v10 = v14 + 24;
            if (*((_WORD *)a1 + 11) != 3) {
              sub_10005E914();
            }
            continue;
          }
        }

        break;
      }

      return 0LL;
    case 4:
      if (*((_WORD *)a1 + 11) != 4) {
        sub_10005E98C();
      }
      uint64_t v15 = *((void *)a1 + 1);
      break;
    case 5:
      uint64_t v16 = sub_100012368((uint64_t)a1);
      uint64_t v17 = sub_100012540(a1);
      return sub_100012950(a2, v16, v17);
    case 6:
      if ((*((_WORD *)a1 + 11) & 0x200) != 0)
      {
        double v19 = *(double *)a1;
        sub_100012B4C((void **)a2, 6LL, a3);
        return sub_100012F84((uint64_t)a2, v19);
      }

      else if ((v3 & 0x20) != 0)
      {
        return sub_100012998((void **)a2, *a1, a3);
      }

      else if ((v3 & 0x40) != 0)
      {
        return sub_100010000((void **)a2, *a1, a3);
      }

      else
      {
        unint64_t v18 = *(void *)a1;
        if ((v3 & 0x80) != 0) {
          return sub_100012A34((void **)a2, v18, a3);
        }
        else {
          return sub_100012AD0((void **)a2, v18, a3);
        }
      }

    default:
      sub_10005E8C4();
  }

  while (1)
  {
    if (v15 == *((void *)a1 + 1) + 24LL * *a1) {
      return sub_10001289C((void **)a2);
    }
    v15 += 24LL;
    if (*((_WORD *)a1 + 11) != 4) {
      sub_10005E964();
    }
  }

  return 0LL;
}

uint64_t sub_10000FF38(void *a1)
{
  *(_BYTE *)sub_10000733C(a1, 1LL) = 0;
  uint64_t result = a1[2];
  uint64_t v5 = a1[3];
  if (v5 == result) {
    sub_10005E4E4(result, v2, v3);
  }
  a1[3] = v5 - 1;
  return result;
}

uint64_t sub_10000FF78(void **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_100012D38(a1 + 1, 1LL, v4);
  *(void *)uint64_t v5 = 0LL;
  *(_BYTE *)(v5 + std::ostream::~ostream(v1, v2 + 8) = 0;
  *(_BYTE *)sub_10000733C(*a1, 1LL) = 123;
  return 1LL;
}

uint64_t sub_10000FFC8(uint64_t *a1, char *__s)
{
  size_t v4 = strlen(__s);
  return sub_100012950(a1, (uint64_t)__s, v4);
}

uint64_t sub_100010000(void **a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = (_BYTE *)sub_10000733C(*a1, 10LL);
  int v6 = sub_100013930(a2, v5);
  uint64_t v9 = (*a1)[3];
  (*a1)[3] = v9 - (v5 - v6) - 10;
  return 1LL;
}

uint64_t sub_10001007C(void **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (char *)a1[4];
  if (*(v3 - 8)) {
    sub_10005EA00();
  }
  uint64_t v6 = *((void *)v3 - 2);
  size_t v4 = v3 - 16;
  uint64_t v5 = v6;
  if ((v6 & 1) != 0) {
    sub_10005E9D8();
  }
  a1[4] = v4;
  if (v5)
  {
    *(_BYTE *)sub_10000733C(*a1, 1LL) = 10;
    size_t v8 = ((unint64_t)((char *)a1[4] - (char *)a1[3]) >> 4) * *((unsigned int *)a1 + 16);
    int v9 = *((unsigned __int8 *)a1 + 61);
    uint64_t v10 = (void *)sub_10000733C(*a1, v8);
    memset(v10, v9, v8);
  }

  *(_BYTE *)sub_10000733C(*a1, 1LL) = 125;
  return 1LL;
}

uint64_t sub_100010130(void *a1, uint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3) < 3 || sub_100038648((uint64_t)a1))
  {
    sub_100038638(a2);
    sub_1000021BC(&v118, aExecutableComm_2);
    sub_1000021BC(__p, "execute");
    sub_1000388C0((uint64_t)a1, (uint64_t)__p, (uint64_t)&v118);
    if (SHIBYTE(v117[0]) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v120) < 0) {
      operator delete(v118.__locale_);
    }
    return 0LL;
  }

  sub_1000021BC(&v118, "--debug");
  uint64_t v6 = (siri::dialogengine::Log *)siri::dialogengine::OptionExists(a1, &v118);
  if (SHIBYTE(v120) < 0) {
    operator delete(v118.__locale_);
  }
  siri::dialogengine::Log::SetOutputToStdout(v6, v5);
  sub_1000021BC(&v118, "--executeVisualCAT");
  int v7 = siri::dialogengine::OptionExists(a1, &v118);
  int v8 = v7;
  if (SHIBYTE(v120) < 0)
  {
    operator delete(v118.__locale_);
    if (!v8) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }

  if (v7)
  {
LABEL_14:
    int v9 = sub_100002F60(&std::cout, (uint64_t)"{ dialogResult:", 17LL);
    std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24LL)));
    uint64_t v10 = std::locale::use_facet(&v118, &std::ctype<char>::id);
    uint64_t v11 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10LL);
    std::locale::~locale(&v118);
    std::ostream::put(v9, v11);
    std::ostream::flush(v9);
  }

LABEL_15:
  sub_1000111E0((uint64_t)a1, (uint64_t)v99);
  sub_1000021BC(&v118, "--executeVisualCAT");
  int v12 = siri::dialogengine::OptionExists(a1, &v118);
  int v13 = v12;
  if (SHIBYTE(v120) < 0)
  {
    operator delete(v118.__locale_);
    if (!v13) {
      goto LABEL_77;
    }
  }

  else if (!v12)
  {
    goto LABEL_77;
  }

  v97[0] = 0LL;
  v97[1] = 0LL;
  uint64_t v98 = 0LL;
  memset(&v96, 0, sizeof(v96));
  unint64_t v14 = v100;
  if ((v100 & 0x80u) != 0) {
    unint64_t v14 = (unint64_t)v99[1];
  }
  if (v14)
  {
    uint64_t v15 = sub_100005A28((uint64_t)&v118, 0LL, 1024LL, 0LL);
    uint64_t v16 = v99;
    if ((v100 & 0x80u) != 0) {
      uint64_t v16 = (void **)v99[0];
    }
    __p[0] = v16;
    __p[1] = v16;
    if (*(_DWORD *)(sub_10000CE28(v15, __p) + 88))
    {
      if (v123 > 0x11) {
        uint64_t v17 = "Unknown error.";
      }
      else {
        uint64_t v17 = off_100078D38[v123];
      }
      sub_1000021BC(__p, v17);
      int v31 = sub_100002F60(&std::cout, (uint64_t)"Error: Invalid JSON response: ", 30LL);
      if (v117[0] >= 0) {
        uint64_t v32 = __p;
      }
      else {
        uint64_t v32 = (void **)__p[0];
      }
      if (v117[0] >= 0) {
        uint64_t v33 = HIBYTE(v117[0]);
      }
      else {
        uint64_t v33 = (uint64_t)__p[1];
      }
      std::string::size_type v34 = sub_100002F60(v31, (uint64_t)v32, v33);
      std::ios_base::getloc((const std::ios_base *)((char *)v34 + *(void *)(*v34 - 24LL)));
      double v35 = std::locale::use_facet(v109, &std::ctype<char>::id);
      uint64_t v36 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v35->__vftable[2].~facet_0)(v35, 10LL);
      std::locale::~locale(v109);
      std::ostream::put(v34, v36);
      std::ostream::flush(v34);
      if (SHIBYTE(v117[0]) < 0) {
        operator delete(__p[0]);
      }
    }

    else if (sub_100012574((unsigned int *)&v118, "visual_refs") {
           && *(_WORD *)(sub_1000122D8((unsigned int *)&v118, "visual_refs") + 22) == 4)
    }
    {
      unint64_t v18 = (unsigned int *)sub_1000122D8((unsigned int *)&v118, "visual_refs");
      if (*((_WORD *)v18 + 11) != 4) {
        __assert_rtn("GetArray", "document.h", 1723, "IsArray()");
      }
      if (*v18)
      {
        double v19 = (unsigned int *)*((void *)v18 + 1);
        unsigned __int8 v20 = &v19[6 * *v18];
        do
        {
          sub_1000021BC(v109, "id");
          siri::dialogengine::ParseJSONString(__p, v19, v109);
          if (SHIBYTE(v98) < 0) {
            operator delete(v97[0]);
          }
          *(_OWORD *)uint64_t v97 = *(_OWORD *)__p;
          uint64_t v98 = v117[0];
          HIBYTE(v117[0]) = 0;
          LOBYTE(__p[0]) = 0;
          if (SHIBYTE(v109[2].__locale_) < 0) {
            operator delete(v109[0].__locale_);
          }
          sub_100005A28((uint64_t)__p, 0LL, 1024LL, 0LL);
          v109[0].__locale_ = (std::locale::__imp *)"{}";
          v109[1].__locale_ = (std::locale::__imp *)"{}";
          sub_10000CE28((uint64_t)__p, v109);
          uint64_t v21 = (__int128 *)sub_1000122D8(v19, "parameters");
          if (!v121) {
            __assert_rtn("GetAllocator", "document.h", 2407, "allocator_");
          }
          v109[1].__locale_ = (std::locale::__imp *)"parameters";
          v109[2].__locale_ = (std::locale::__imp *)0x405000000000000LL;
          v109[0].__locale_ = (std::locale::__imp *)10;
          sub_10001266C((unsigned int *)__p, (__int128 *)v109, v21, v121);
          *(_OWORD *)std::string v105 = 0u;
          *(_OWORD *)v106 = 0u;
          uint64_t v107 = 0LL;
          uint64_t v108 = 256LL;
          *(_OWORD *)&v109[1].__locale_ = 0u;
          __int128 v110 = 0u;
          uint64_t v111 = 0LL;
          v109[0].__locale_ = (std::locale::__imp *)v105;
          uint64_t v112 = 512LL;
          int v113 = 324;
          __int16 v114 = 0x2000;
          uint64_t v115 = 4LL;
          sub_10000FC3C((unsigned int *)__p, (uint64_t *)v109, v22);
          uint64_t v23 = (char *)sub_10000FF38(v105);
          sub_1000021BC(&__str, v23);
          siri::dialogengine::StringTrim(v101, &__str, "{}");
          siri::dialogengine::StringTrim(&v103, v101, " \t\n\r");
          std::string __str = v103;
          v103.__r_.__value_.__s.__size_ = 0;
          v103.__r_.__value_.__s.__data_[0] = 0;
          if (v102 < 0) {
            operator delete(v101[0]);
          }
          int size = (char)__str.__r_.__value_.__s.__size_;
          int v25 = (void *)__str.__r_.__value_.__r.__words[0];
          if ((__str.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            int64_t v26 = __str.__r_.__value_.__s.__size_;
          }
          else {
            int64_t v26 = __str.__r_.__value_.__l.__size_;
          }
          if ((__str.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            p_str = &__str;
          }
          else {
            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
          }
          if (v26 >= 1)
          {
            int v28 = (char *)p_str + v26;
            int v29 = p_str;
            do
            {
              int v30 = memchr(v29, 123, v26);
              if (!v30) {
                break;
              }
              if (*v30 == 123)
              {
                if (v30 == v28 || v30 - (_BYTE *)p_str == -1) {
                  break;
                }
                std::string::basic_string( &v103,  &__str,  v30 - (_BYTE *)p_str,  0xFFFFFFFFFFFFFFFFLL,  (std::allocator<char> *)v101);
                std::string __str = v103;
                std::string::operator=(&v96, &__str);
                free((void *)v110);
                if (v109[2].__locale_) {
                  operator delete(v109[2].__locale_);
                }
                free(v106[0]);
                if (v105[1]) {
                  operator delete(v105[1]);
                }
                sub_100007938((uint64_t)__p);
                sub_100007938((uint64_t)&v118);
                __p[0] = 0LL;
                __p[1] = 0LL;
                v117[0] = 0LL;
                sub_1000021BC(v109, "execute");
                int v42 = __p[1];
                if (__p[1] >= (void *)v117[0])
                {
                  unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3);
                  unint64_t v45 = v44 + 1;
                  if (v44 + 1 > 0xAAAAAAAAAAAAAAALL) {
                    sub_100002668();
                  }
                  else {
                    unint64_t v46 = v45;
                  }
                  __int128 v122 = v117;
                  if (v46) {
                    uint64_t v47 = (std::locale::__imp *)sub_10000267C((uint64_t)v117, v46);
                  }
                  else {
                    uint64_t v47 = 0LL;
                  }
                  unint64_t v48 = (std::locale *)((char *)v47 + 24 * v44);
                  v118.__locale_ = v47;
                  v119 = v48;
                  std::string v121 = (size_t *)((char *)v47 + 24 * v46);
                  __int128 v49 = *(_OWORD *)&v109[0].__locale_;
                  v48[2].__locale_ = (std::locale::__imp *)v109[2];
                  *(_OWORD *)&v48->__locale_ = v49;
                  memset(v109, 0, sizeof(v109));
                  v120 = (char *)&v48[3];
                  sub_100002D50((uint64_t *)__p, &v118);
                  uint64_t v50 = __p[1];
                  sub_100002ED8((uint64_t)&v118);
                  __p[1] = v50;
                  if (SHIBYTE(v109[2].__locale_) < 0) {
                    operator delete(v109[0].__locale_);
                  }
                }

                else
                {
                  __int128 v43 = *(_OWORD *)&v109[0].__locale_;
                  *((std::locale *)__p[1] + 2) = v109[2];
                  *int v42 = v43;
                  __p[1] = (char *)v42 + 24;
                }

                sub_1000021BC(v109, "--templateDir");
                int v51 = __p[1];
                if (__p[1] >= (void *)v117[0])
                {
                  unint64_t v53 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3);
                  unint64_t v54 = v53 + 1;
                  if (v53 + 1 > 0xAAAAAAAAAAAAAAALL) {
                    sub_100002668();
                  }
                  else {
                    unint64_t v55 = v54;
                  }
                  __int128 v122 = v117;
                  if (v55) {
                    int64_t v56 = (std::locale::__imp *)sub_10000267C((uint64_t)v117, v55);
                  }
                  else {
                    int64_t v56 = 0LL;
                  }
                  size_t v57 = (std::locale *)((char *)v56 + 24 * v53);
                  v118.__locale_ = v56;
                  v119 = v57;
                  std::string v121 = (size_t *)((char *)v56 + 24 * v55);
                  __int128 v58 = *(_OWORD *)&v109[0].__locale_;
                  v57[2].__locale_ = (std::locale::__imp *)v109[2];
                  *(_OWORD *)&v57->__locale_ = v58;
                  memset(v109, 0, sizeof(v109));
                  v120 = (char *)&v57[3];
                  sub_100002D50((uint64_t *)__p, &v118);
                  __int128 v59 = __p[1];
                  sub_100002ED8((uint64_t)&v118);
                  __p[1] = v59;
                  if (SHIBYTE(v109[2].__locale_) < 0) {
                    operator delete(v109[0].__locale_);
                  }
                }

                else
                {
                  __int128 v52 = *(_OWORD *)&v109[0].__locale_;
                  *((std::locale *)__p[1] + 2) = v109[2];
                  _OWORD *v51 = v52;
                  __p[1] = (char *)v51 + 24;
                }

                sub_1000021BC(v105, "--templateDir");
                siri::dialogengine::GetOption(v109, a1, v105);
                size_t v60 = __p[1];
                if (__p[1] >= (void *)v117[0])
                {
                  unint64_t v62 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3);
                  unint64_t v63 = v62 + 1;
                  if (v62 + 1 > 0xAAAAAAAAAAAAAAALL) {
                    sub_100002668();
                  }
                  else {
                    unint64_t v64 = v63;
                  }
                  __int128 v122 = v117;
                  if (v64) {
                    uint64_t v65 = (std::locale::__imp *)sub_10000267C((uint64_t)v117, v64);
                  }
                  else {
                    uint64_t v65 = 0LL;
                  }
                  uint64_t v66 = (std::locale *)((char *)v65 + 24 * v62);
                  v118.__locale_ = v65;
                  v119 = v66;
                  std::string v121 = (size_t *)((char *)v65 + 24 * v64);
                  __int128 v67 = *(_OWORD *)&v109[0].__locale_;
                  v66[2].__locale_ = (std::locale::__imp *)v109[2];
                  *(_OWORD *)&v66->__locale_ = v67;
                  memset(v109, 0, sizeof(v109));
                  v120 = (char *)&v66[3];
                  sub_100002D50((uint64_t *)__p, &v118);
                  uint64_t v68 = __p[1];
                  sub_100002ED8((uint64_t)&v118);
                  __p[1] = v68;
                  if (SHIBYTE(v109[2].__locale_) < 0) {
                    operator delete(v109[0].__locale_);
                  }
                }

                else
                {
                  __int128 v61 = *(_OWORD *)&v109[0].__locale_;
                  *((std::locale *)__p[1] + 2) = v109[2];
                  *size_t v60 = v61;
                  memset(v109, 0, sizeof(v109));
                  __p[1] = (char *)v60 + 24;
                }

                if (SHIBYTE(v106[0]) < 0) {
                  operator delete(v105[0]);
                }
                sub_1000021BC(v109, "--visualCatId");
                uint64_t v69 = __p[1];
                if (__p[1] >= (void *)v117[0])
                {
                  unint64_t v72 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3);
                  unint64_t v73 = v72 + 1;
                  if (v72 + 1 > 0xAAAAAAAAAAAAAAALL) {
                    sub_100002668();
                  }
                  else {
                    unint64_t v74 = v73;
                  }
                  __int128 v122 = v117;
                  if (v74) {
                    uint64_t v75 = (std::locale::__imp *)sub_10000267C((uint64_t)v117, v74);
                  }
                  else {
                    uint64_t v75 = 0LL;
                  }
                  v76 = (std::locale *)((char *)v75 + 24 * v72);
                  v118.__locale_ = v75;
                  v119 = v76;
                  std::string v121 = (size_t *)((char *)v75 + 24 * v74);
                  __int128 v77 = *(_OWORD *)&v109[0].__locale_;
                  v76[2].__locale_ = (std::locale::__imp *)v109[2];
                  *(_OWORD *)&v76->__locale_ = v77;
                  memset(v109, 0, sizeof(v109));
                  v120 = (char *)&v76[3];
                  sub_100002D50((uint64_t *)__p, &v118);
                  uint64_t v71 = __p[1];
                  sub_100002ED8((uint64_t)&v118);
                  __p[1] = v71;
                  if (SHIBYTE(v109[2].__locale_) < 0)
                  {
                    operator delete(v109[0].__locale_);
                    uint64_t v71 = __p[1];
                  }
                }

                else
                {
                  __int128 v70 = *(_OWORD *)&v109[0].__locale_;
                  *((std::locale *)__p[1] + 2) = v109[2];
                  *uint64_t v69 = v70;
                  uint64_t v71 = (void *)v69 + 3;
                  __p[1] = (char *)v69 + 24;
                }

                if ((unint64_t)v71 >= v117[0])
                {
                  __int128 v79 = (void *)sub_100002C30((uint64_t *)__p, (__int128 *)v97);
                }

                else
                {
                  if (SHIBYTE(v98) < 0)
                  {
                    sub_10000231C(v71, v97[0], (unint64_t)v97[1]);
                  }

                  else
                  {
                    __int128 v78 = *(_OWORD *)v97;
                    v71[2] = v98;
                    *(_OWORD *)uint64_t v71 = v78;
                  }

                  __int128 v79 = v71 + 3;
                }

                __p[1] = v79;
                sub_1000021BC(v109, "--params");
                uint64_t v80 = __p[1];
                if (__p[1] >= (void *)v117[0])
                {
                  unint64_t v83 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3);
                  unint64_t v84 = v83 + 1;
                  if (v83 + 1 > 0xAAAAAAAAAAAAAAALL) {
                    sub_100002668();
                  }
                  else {
                    unint64_t v85 = v84;
                  }
                  __int128 v122 = v117;
                  if (v85) {
                    uint64_t v86 = (std::locale::__imp *)sub_10000267C((uint64_t)v117, v85);
                  }
                  else {
                    uint64_t v86 = 0LL;
                  }
                  __int128 v87 = (std::locale *)((char *)v86 + 24 * v83);
                  v118.__locale_ = v86;
                  v119 = v87;
                  std::string v121 = (size_t *)((char *)v86 + 24 * v85);
                  __int128 v88 = *(_OWORD *)&v109[0].__locale_;
                  v87[2].__locale_ = (std::locale::__imp *)v109[2];
                  *(_OWORD *)&v87->__locale_ = v88;
                  memset(v109, 0, sizeof(v109));
                  v120 = (char *)&v87[3];
                  sub_100002D50((uint64_t *)__p, &v118);
                  uint64_t v82 = __p[1];
                  sub_100002ED8((uint64_t)&v118);
                  __p[1] = v82;
                  if (SHIBYTE(v109[2].__locale_) < 0)
                  {
                    operator delete(v109[0].__locale_);
                    uint64_t v82 = __p[1];
                  }
                }

                else
                {
                  __int128 v81 = *(_OWORD *)&v109[0].__locale_;
                  *((std::locale *)__p[1] + 2) = v109[2];
                  *uint64_t v80 = v81;
                  uint64_t v82 = (void *)v80 + 3;
                  __p[1] = (char *)v80 + 24;
                }

                if ((unint64_t)v82 >= v117[0])
                {
                  uint64_t v90 = (void *)sub_100002C30((uint64_t *)__p, (__int128 *)&v96);
                }

                else
                {
                  if ((char)v96.__r_.__value_.__s.__size_ < 0)
                  {
                    sub_10000231C(v82, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
                  }

                  else
                  {
                    __int128 v89 = *(_OWORD *)&v96.__r_.__value_.__l.__data_;
                    v82[2] = v96.__r_.__value_.__l.__cap_;
                    *(_OWORD *)uint64_t v82 = v89;
                  }

                  uint64_t v90 = v82 + 3;
                }

                __p[1] = v90;
                uint64_t v91 = sub_100002F60(&std::cout, (uint64_t)", visualResult:", 17LL);
                std::ios_base::getloc((const std::ios_base *)((char *)v91 + *(void *)(*v91 - 24LL)));
                int v92 = std::locale::use_facet(&v118, &std::ctype<char>::id);
                uint64_t v93 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v92->__vftable[2].~facet_0)( v92,  10LL);
                std::locale::~locale(&v118);
                std::ostream::put(v91, v93);
                std::ostream::flush(v91);
                sub_1000111E0((uint64_t)__p, (uint64_t)&v94);
                if (v95 < 0) {
                  operator delete(v94);
                }
                v118.__locale_ = (std::locale::__imp *)__p;
                sub_1000027F4((void ***)&v118);
                goto LABEL_73;
              }

              int v29 = (std::string *)(v30 + 1);
              int64_t v26 = v28 - (_BYTE *)v29;
            }

            while (v28 - (_BYTE *)v29 >= 1);
          }

          if (size < 0) {
            operator delete(v25);
          }
          free((void *)v110);
          if (v109[2].__locale_) {
            operator delete(v109[2].__locale_);
          }
          free(v106[0]);
          if (v105[1]) {
            operator delete(v105[1]);
          }
          sub_100007938((uint64_t)__p);
          v19 += 6;
        }

        while (v19 != v20);
      }
    }

    sub_100007938((uint64_t)&v118);
  }

    *(_BYTE *)a2 = 1;
    *(_OWORD *)(a2 + std::ostream::~ostream(v1, v2 + 8) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_BYTE *)(a2 + 56) = 1;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_BYTE *)(a2 + 112) = 1;
    *(_OWORD *)(a2 + 120) = 0u;
    *(_OWORD *)(a2 + 136) = 0u;
    *(_OWORD *)(a2 + 152) = 0u;
    return;
  }

  int v8 = *(uint64_t **)(a1 + 16);
  uint64_t v10 = *v8;
  int v9 = v8[1];
  if (v10) {
    uint64_t v11 = v9 == 0;
  }
  else {
    uint64_t v11 = 1;
  }
  if (v11) {
    goto LABEL_15;
  }
  int v12 = *(void *)(a1 + 32);
  int v13 = *(std::__shared_weak_count **)(a1 + 40);
  unint64_t v45 = v12;
  unint64_t v46 = v13;
  if (v13)
  {
    unint64_t v14 = (unint64_t *)&v13->__shared_owners_;
    do
      uint64_t v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    v49[0] = 1;
    uint64_t v50 = 0LL;
    int v51 = 0LL;
    __int128 v52 = 0LL;
    unint64_t v53 = v12;
    unint64_t v54 = v13;
    do
      uint64_t v16 = __ldxr(v14);
    while (__stxr(v16 + 1, v14));
  }

  else
  {
    v49[0] = 1;
    uint64_t v50 = 0LL;
    int v51 = 0LL;
    __int128 v52 = 0LL;
    unint64_t v53 = v12;
    unint64_t v54 = 0LL;
  }

  unint64_t v55 = v10;
  uint64_t v23 = *(void *)(a1 + 32);
  int v24 = *(std::__shared_weak_count **)(a1 + 40);
  int v37 = v24;
  if (v24)
  {
    int v25 = (unint64_t *)&v24->__shared_owners_;
    do
      int64_t v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
    v38[0] = 1;
    std::string __p = 0LL;
    uint64_t v40 = 0LL;
    uint64_t v41 = 0LL;
    int v42 = v23;
    __int128 v43 = v24;
    do
      int v27 = __ldxr(v25);
    while (__stxr(v27 + 1, v25));
  }

  else
  {
    v38[0] = 1;
    std::string __p = 0LL;
    uint64_t v40 = 0LL;
    uint64_t v41 = 0LL;
    int v42 = v23;
    __int128 v43 = 0LL;
  }

  unint64_t v44 = v9;
  sub_100045190(a2, (uint64_t)v49, (uint64_t)v38);
  int v28 = v43;
  if (v43)
  {
    int v29 = (unint64_t *)&v43->__shared_owners_;
    do
      int v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }

  if (SHIBYTE(v41) < 0) {
    operator delete(__p);
  }
  if (v37)
  {
    int v31 = (unint64_t *)&v37->__shared_owners_;
    do
      uint64_t v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }

  uint64_t v33 = v54;
  if (v54)
  {
    std::string::size_type v34 = (unint64_t *)&v54->__shared_owners_;
    do
      double v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }

  if (SHIBYTE(v52) < 0) {
    operator delete(v50);
  }
  unsigned __int8 v20 = v46;
  if (v46)
  {
    uint64_t v36 = (unint64_t *)&v46->__shared_owners_;
    do
      uint64_t v22 = __ldaxr(v36);
    while (__stlxr(v22 - 1, v36));
    goto LABEL_65;
  }

    *(_BYTE *)a2 = 1;
    *(_OWORD *)(a2 + std::ostream::~ostream(v1, v2 + 8) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_BYTE *)(a2 + 56) = 1;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_BYTE *)(a2 + 112) = 1;
    *(_OWORD *)(a2 + 120) = 0u;
    *(_OWORD *)(a2 + 136) = 0u;
    *(_OWORD *)(a2 + 152) = 0u;
    return;
  }

  int v8 = *(uint64_t **)(a1 + 16);
  uint64_t v10 = *v8;
  int v9 = v8[1];
  if (v10) {
    uint64_t v11 = v9 == 0;
  }
  else {
    uint64_t v11 = 1;
  }
  if (v11) {
    goto LABEL_15;
  }
  int v12 = *(void *)(a1 + 32);
  int v13 = *(std::__shared_weak_count **)(a1 + 40);
  unint64_t v45 = v12;
  unint64_t v46 = v13;
  if (v13)
  {
    unint64_t v14 = (unint64_t *)&v13->__shared_owners_;
    do
      uint64_t v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    v49[0] = 1;
    uint64_t v50 = 0LL;
    int v51 = 0LL;
    __int128 v52 = 0LL;
    unint64_t v53 = v12;
    unint64_t v54 = v13;
    do
      uint64_t v16 = __ldxr(v14);
    while (__stxr(v16 + 1, v14));
  }

  else
  {
    v49[0] = 1;
    uint64_t v50 = 0LL;
    int v51 = 0LL;
    __int128 v52 = 0LL;
    unint64_t v53 = v12;
    unint64_t v54 = 0LL;
  }

  unint64_t v55 = v10;
  uint64_t v23 = *(void *)(a1 + 32);
  int v24 = *(std::__shared_weak_count **)(a1 + 40);
  int v37 = v24;
  if (v24)
  {
    int v25 = (unint64_t *)&v24->__shared_owners_;
    do
      int64_t v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
    v38[0] = 1;
    std::string __p = 0LL;
    uint64_t v40 = 0LL;
    uint64_t v41 = 0LL;
    int v42 = v23;
    __int128 v43 = v24;
    do
      int v27 = __ldxr(v25);
    while (__stxr(v27 + 1, v25));
  }

  else
  {
    v38[0] = 1;
    std::string __p = 0LL;
    uint64_t v40 = 0LL;
    uint64_t v41 = 0LL;
    int v42 = v23;
    __int128 v43 = 0LL;
  }

  unint64_t v44 = v9;
  sub_100045190(a2, (uint64_t)v49, (uint64_t)v38);
  int v28 = v43;
  if (v43)
  {
    int v29 = (unint64_t *)&v43->__shared_owners_;
    do
      int v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }

  if (SHIBYTE(v41) < 0) {
    operator delete(__p);
  }
  if (v37)
  {
    int v31 = (unint64_t *)&v37->__shared_owners_;
    do
      uint64_t v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }

  uint64_t v33 = v54;
  if (v54)
  {
    std::string::size_type v34 = (unint64_t *)&v54->__shared_owners_;
    do
      double v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }

  if (SHIBYTE(v52) < 0) {
    operator delete(v50);
  }
  unsigned __int8 v20 = v46;
  if (v46)
  {
    uint64_t v36 = (unint64_t *)&v46->__shared_owners_;
    do
      uint64_t v22 = __ldaxr(v36);
    while (__stlxr(v22 - 1, v36));
    goto LABEL_65;
  }

LABEL_73:
  if (SHIBYTE(v98) < 0) {
    operator delete(v97[0]);
  }
LABEL_77:
  sub_1000021BC(&v118, "--executeVisualCAT");
  int v37 = siri::dialogengine::OptionExists(a1, &v118);
  int v38 = v37;
  if ((SHIBYTE(v120) & 0x80000000) == 0)
  {
    if (!v37) {
      goto LABEL_82;
    }
    goto LABEL_81;
  }

  operator delete(v118.__locale_);
  if (v38)
  {
LABEL_81:
    std::string::size_type v39 = sub_100002F60(&std::cout, (uint64_t)"}", 1LL);
    std::ios_base::getloc((const std::ios_base *)((char *)v39 + *(void *)(*v39 - 24LL)));
    uint64_t v40 = std::locale::use_facet(&v118, &std::ctype<char>::id);
    uint64_t v41 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v40->__vftable[2].~facet_0)(v40, 10LL);
    std::locale::~locale(&v118);
    std::ostream::put(v39, v41);
    std::ostream::flush(v39);
  }

LABEL_82:
  return 1LL;
}

  if ((void)v54 == *((void *)&v54 + 1))
  {
    int v13 = sub_100002F60(&std::cout, (uint64_t)"Must specify at least one locale for 'catutil download'", 55LL);
    std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24LL)));
    uint64_t v41 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
    int v42 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v41->__vftable[2].~facet_0)(v41, 10LL);
    std::locale::~locale((std::locale *)__p);
    std::ostream::put(v13, v42);
    goto LABEL_39;
  }

  int v25 = sub_100002F60(&std::cout, (uint64_t)"Initiating download of locale(s): ", 34LL);
  sub_1000021BC(__dst, ",");
  siri::dialogengine::StringJoin(__p, &v54, __dst);
  if (v48 >= 0) {
    int64_t v26 = __p;
  }
  else {
    int64_t v26 = (void **)__p[0];
  }
  if (v48 >= 0) {
    int v27 = HIBYTE(v48);
  }
  else {
    int v27 = (uint64_t)__p[1];
  }
  int v28 = sub_100002F60(v25, (uint64_t)v26, v27);
  std::ios_base::getloc((const std::ios_base *)((char *)v28 + *(void *)(*v28 - 24LL)));
  int v29 = std::locale::use_facet(&v58, &std::ctype<char>::id);
  int v30 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 10LL);
  std::locale::~locale(&v58);
  std::ostream::put(v28, v30);
  std::ostream::flush(v28);
  if (SHIBYTE(v48) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v51) < 0) {
    operator delete(__dst[0]);
  }
  uint64_t v32 = (__int128 *)*((void *)&v54 + 1);
  for (uint64_t i = (__int128 *)v54; i != v32; uint64_t i = (__int128 *)((char *)i + 24))
  {
    if (*((char *)i + 23) < 0)
    {
      sub_10000231C(__dst, *(void **)i, *((void *)i + 1));
    }

    else
    {
      uint64_t v33 = *i;
      int v51 = *((void *)i + 2);
      *(_OWORD *)std::string __dst = v33;
    }

    if (v56)
    {
      __p[0] = 0LL;
      __p[1] = __p;
      unint64_t v48 = 0x2020000000LL;
      __int128 v49 = 0;
      v46[0] = _NSConcreteStackBlock;
      v46[1] = 3221225472LL;
      v46[2] = sub_10002EECC;
      v46[3] = &unk_100079078;
      v46[4] = __p;
      std::string::size_type v34 = objc_retainBlock(v46);
      double v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSRunLoop currentRunLoop](&OBJC_CLASS___NSRunLoop, "currentRunLoop"));
      siri::dialogengine::MorphunUpdaterTuriTrial::Download(&v58, __dst, v56, v34);
      do
      {
        if (*((_BYTE *)__p[1] + 24)) {
          break;
        }
        uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceNow:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceNow:",  2.0));
        int v37 = [v35 runMode:NSDefaultRunLoopMode beforeDate:v36];
      }

      while ((v37 & 1) != 0);

      _Block_object_dispose(__p, 8);
    }

    else
    {
      siri::dialogengine::MorphunUpdaterTuriTrial::Download(__p, __dst, 0LL, 0LL);
    }

    if (SHIBYTE(v51) < 0) {
      operator delete(__dst[0]);
    }
  }

  if (v56)
  {
    int v38 = sub_100002F60(&std::cout, (uint64_t)"Results: ", 9LL);
    std::ios_base::getloc((const std::ios_base *)((char *)v38 + *(void *)(*v38 - 24LL)));
    std::string::size_type v39 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
    uint64_t v40 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v39->__vftable[2].~facet_0)(v39, 10LL);
    std::locale::~locale((std::locale *)__p);
    std::ostream::put(v38, v40);
    std::ostream::flush(v38);
    sub_10002EEE0((uint64_t)v52);
  }

void sub_100010F78( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, void *a24, uint64_t a25, int a26, __int16 a27, char a28, char a29, void *a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, void *a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, std::locale a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56)
{
  a47.__locale_ = (std::locale::__imp *)&a56;
  sub_1000027F4((void ***)&a47);
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(a1);
}

void sub_1000111E0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (SHIBYTE(v64) < 0)
  {
    if (v63[1])
    {
      uint64_t v3 = (void **)v63[0];
      goto LABEL_6;
    }

LABEL_18:
    sub_1000021BC((void *)a2, (char *)&unk_10006A022);
    goto LABEL_215;
  }

  if (!HIBYTE(v64)) {
    goto LABEL_18;
  }
  uint64_t v3 = v63;
LABEL_6:
  uint64_t v4 = CATExecute(v3);
  BOOL v5 = (void *)v4;
  if (v4) {
    uint64_t v6 = (char *)v4;
  }
  else {
    uint64_t v6 = (char *)&unk_10006A022;
  }
  sub_1000021BC((void *)a2, v6);
  free(v5);
  int v7 = *(char *)(a2 + 23);
  if (v7 >= 0) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = *(void *)a2;
  }
  if (v7 >= 0) {
    uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v9 = *(void *)(a2 + 8);
  }
  uint64_t v10 = sub_100002F60(&std::cout, v8, v9);
  std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(*v10 - 24LL)));
  uint64_t v11 = std::locale::use_facet(v92, &std::ctype<char>::id);
  uint64_t v12 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10LL);
  std::locale::~locale(v92);
  std::ostream::put(v10, v12);
  std::ostream::flush(v10);
  sub_1000021BC(&v89, "renderVisualCat");
  int v13 = std::string::insert(&v89, 0LL, "");
  __int128 v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v90.__r_.__value_.__l.__cap_ = v13->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0LL;
  v13->__r_.__value_.__l.__cap_ = 0LL;
  v13->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v15 = std::string::append(&v90, ":");
  __int128 v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  std::string::size_type cap = v15->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v92[0].__locale_ = v16;
  v15->__r_.__value_.__l.__size_ = 0LL;
  v15->__r_.__value_.__l.__cap_ = 0LL;
  v15->__r_.__value_.__r.__words[0] = 0LL;
  if (siri::dialogengine::StringContains(v63, v92))
  {
    sub_1000021BC(&__p, "type: visual,");
    int v18 = siri::dialogengine::StringContains(a2, &__p);
  }

  else
  {
    int v18 = 0;
  }

  if (SHIBYTE(cap) < 0) {
    operator delete(v92[0].__locale_);
  }
  if ((char)v89.__r_.__value_.__s.__size_ < 0)
  {
    operator delete(v89.__r_.__value_.__l.__data_);
    if (!v18) {
      goto LABEL_215;
    }
  }

  else if (!v18)
  {
    goto LABEL_215;
  }

  if (SHIBYTE(v64) < 0)
  {
    sub_10000231C(__dst, v63[0], (unint64_t)v63[1]);
  }

  else
  {
    *(_OWORD *)std::string __dst = *(_OWORD *)v63;
    uint64_t v62 = v64;
  }

  if (*(char *)(a2 + 23) < 0)
  {
    sub_10000231C(v59, *(void **)a2, *(void *)(a2 + 8));
  }

  else
  {
    *(_OWORD *)__int128 v59 = *(_OWORD *)a2;
    uint64_t v60 = *(void *)(a2 + 16);
  }

  siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Preparing to render VisualCat...", v17);
  sub_100005A28((uint64_t)v92, 0LL, 1024LL, 0LL);
  sub_100005A28((uint64_t)&v90, 0LL, 1024LL, 0LL);
  double v19 = v59;
  if (v60 < 0) {
    double v19 = (void **)v59[0];
  }
  v89.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
  v89.__r_.__value_.__l.__size_ = (std::string::size_type)v19;
  if (*(_DWORD *)(sub_10000CE28((uint64_t)&v90, &v89) + 88))
  {
    if (v91 > 0x11) {
      unsigned __int8 v20 = "Unknown error.";
    }
    else {
      unsigned __int8 v20 = off_100078D38[v91];
    }
    sub_1000021BC(&v89, v20);
    uint64_t v23 = sub_100002F60(&std::cout, (uint64_t)"Error: Invalid JSON result: ", 28LL);
    if ((v89.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      int v24 = &v89;
    }
    else {
      int v24 = (std::string *)v89.__r_.__value_.__r.__words[0];
    }
    if ((v89.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t size = v89.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t size = v89.__r_.__value_.__l.__size_;
    }
LABEL_51:
    int64_t v26 = sub_100002F60(v23, (uint64_t)v24, size);
    std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(void *)(*v26 - 24LL)));
    int v27 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
    uint64_t v28 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10LL);
    std::locale::~locale((std::locale *)&__p);
    std::ostream::put(v26, v28);
    std::ostream::flush(v26);
    goto LABEL_209;
  }

  uint64_t v21 = __dst;
  if (v62 < 0) {
    uint64_t v21 = (void **)__dst[0];
  }
  v89.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
  v89.__r_.__value_.__l.__size_ = (std::string::size_type)v21;
  if (*(_DWORD *)(sub_10000CE28((uint64_t)v92, &v89) + 88))
  {
    if (v94 > 0x11) {
      uint64_t v22 = "Unknown error.";
    }
    else {
      uint64_t v22 = off_100078D38[v94];
    }
    sub_1000021BC(&v89, v22);
    uint64_t v23 = sub_100002F60(&std::cout, (uint64_t)"Error: Invalid JSON request: ", 29LL);
    if ((v89.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      int v24 = &v89;
    }
    else {
      int v24 = (std::string *)v89.__r_.__value_.__r.__words[0];
    }
    if ((v89.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t size = v89.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t size = v89.__r_.__value_.__l.__size_;
    }
    goto LABEL_51;
  }

  sub_1000021BC(&__p, "renderVisualCat");
  siri::dialogengine::ParseJSONString(&v89, v92, &__p);
  if ((siri::dialogengine::DirExists(&v89) & 1) == 0)
  {
    siri::dialogengine::DirName(&__p, &v89);
    char v29 = siri::dialogengine::DirExists(&__p);
    if ((v29 & 1) == 0)
    {
      int v37 = sub_100002F60(&std::cout, (uint64_t)"Error: Destination directory doesn't exist: ", 44LL);
      siri::dialogengine::DirName(&__p, &v89);
      if ((v88 & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      if ((v88 & 0x80u) == 0) {
        uint64_t v39 = v88;
      }
      else {
        uint64_t v39 = v87;
      }
      uint64_t v40 = sub_100002F60(v37, (uint64_t)p_p, v39);
      std::ios_base::getloc((const std::ios_base *)((char *)v40 + *(void *)(*v40 - 24LL)));
      uint64_t v41 = std::locale::use_facet((const std::locale *)&v84, &std::ctype<char>::id);
      uint64_t v42 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v41->__vftable[2].~facet_0)(v41, 10LL);
      std::locale::~locale((std::locale *)&v84);
      std::ostream::put(v40, v42);
      std::ostream::flush(v40);
      goto LABEL_207;
    }
  }

  sub_1000021BC(&v84, "catId");
  siri::dialogengine::ParseJSONString(&__p, v92, &v84);
  if (SHIBYTE(v85) < 0) {
    operator delete((void *)v84);
  }
  sub_1000021BC(&v83, "status");
  siri::dialogengine::ParseJSONString(&v84, &v90, &v83);
  if (SHIBYTE(v85) < 0)
  {
    int v31 = (void *)v84;
    if (*((void *)&v84 + 1) != 7LL) {
      goto LABEL_206;
    }
    BOOL v33 = *(_DWORD *)v84 != 1667462515 || *(_DWORD *)(v84 + 3) != 1936942435;
    operator delete((void *)v84);
    if (v33) {
      goto LABEL_207;
    }
  }

  else
  {
    if (SHIBYTE(v85) != 7) {
      goto LABEL_207;
    }
  }

  std::string::size_type v34 = (unsigned int *)sub_1000122D8((unsigned int *)&v90, "response");
  sub_1000021BC(&v83, "renderDeviceTrain");
  siri::dialogengine::ParseJSONString(&v84, v92, &v83);
  sub_1000021BC(&v82, "renderDeviceClass");
  siri::dialogengine::ParseJSONString(&v83, v92, &v82);
  std::string::size_type v35 = v83.__r_.__value_.__s.__size_;
  if ((v83.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    std::string::size_type v35 = v83.__r_.__value_.__l.__size_;
  }
  if (!v35) {
    std::string::assign(&v83, "iPhone");
  }
  sub_1000021BC(v80, "renderContext");
  siri::dialogengine::ParseJSONString(&v82, v92, v80);
  if (SHIBYTE(v81) < 0) {
    operator delete(v80[0]);
  }
  std::string::size_type v36 = v82.__r_.__value_.__s.__size_;
  if ((v82.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    std::string::size_type v36 = v82.__r_.__value_.__l.__size_;
  }
  if (!v36) {
    std::string::assign(&v82, "MockSiri");
  }
  sub_1000021BC(&v78, "renderScreenSize");
  siri::dialogengine::ParseJSONString(v80, v92, &v78);
  if (SHIBYTE(v79) < 0) {
    operator delete((void *)v78);
  }
  sub_1000021BC(&v77, "renderOrientation");
  siri::dialogengine::ParseJSONString(&v78, v92, &v77);
  sub_1000021BC(&v77, "renderDarkMode");
  int v58 = siri::dialogengine::ParseJSONBool(v92, &v77, 0LL);
  else {
    std::string v77 = v89;
  }
  if (siri::dialogengine::DirExists(&v77))
  {
    if ((v88 & 0x80u) == 0) {
      size_t v43 = v88;
    }
    else {
      size_t v43 = v87;
    }
    sub_100007A0C((uint64_t)&v75, v43 + 11);
    if ((v75.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      unint64_t v44 = &v75;
    }
    else {
      unint64_t v44 = (std::string *)v75.__r_.__value_.__r.__words[0];
    }
    if (v43)
    {
      if ((v88 & 0x80u) == 0) {
        unint64_t v45 = &__p;
      }
      else {
        unint64_t v45 = __p;
      }
      memmove(v44, v45, v43);
    }

    strcpy((char *)v44 + v43, "-render.png");
    siri::dialogengine::JoinPath(&v76, &v77, &v75);
    std::string v77 = v76;
    v76.__r_.__value_.__s.__size_ = 0;
    v76.__r_.__value_.__s.__data_[0] = 0;
  }

  if (*((_WORD *)v34 + 11) != 4) {
    __assert_rtn("Begin", "document.h", 1591, "IsArray()");
  }
  for (uint64_t i = (unsigned int *)*((void *)v34 + 1); i != (unsigned int *)(*((void *)v34 + 1) + 24LL * *v34); i += 6)
  {
    memset(&v76, 0, sizeof(v76));
    memset(&v75, 0, sizeof(v75));
    if (*((_WORD *)i + 11) != 3)
    {
      int v56 = 1155;
      size_t v57 = "MemberBegin";
LABEL_218:
      __assert_rtn(v57, "document.h", v56, "IsObject()");
    }

    uint64_t v47 = *((void *)i + 1);
    while (v47 != *((void *)i + 1) + 48LL * *i)
    {
      unint64_t v48 = (const char *)sub_100012368(v47);
      if (!strcmp(v48, "type"))
      {
        __int128 v49 = (const std::string::value_type *)sub_100012368(v47 + 24);
        std::string::assign(&v76, v49);
      }

      uint64_t v50 = (const char *)sub_100012368(v47);
      if (!strcmp(v50, "data"))
      {
        int v51 = (const std::string::value_type *)sub_100012368(v47 + 24);
        std::string::assign(&v75, v51);
      }

      v47 += 48LL;
      if (*((_WORD *)i + 11) != 3)
      {
        int v56 = 1158;
        size_t v57 = "MemberEnd";
        goto LABEL_218;
      }
    }

    if ((char)v76.__r_.__value_.__s.__size_ < 0)
    {
      if (v76.__r_.__value_.__l.__size_ != 6) {
        goto LABEL_188;
      }
      __int128 v52 = (std::string *)v76.__r_.__value_.__r.__words[0];
    }

    else
    {
      if (v76.__r_.__value_.__s.__size_ != 6) {
        goto LABEL_188;
      }
      __int128 v52 = &v76;
    }

    int data = (int)v52->__r_.__value_.__l.__data_;
    int v54 = WORD2(v52->__r_.__value_.__r.__words[0]);
    if (data == 1970497910 && v54 == 27745)
    {
      else {
        std::string v74 = v75;
      }
      else {
        std::string v73 = v77;
      }
      else {
        std::string v72 = v83;
      }
      if (SHIBYTE(v85) < 0)
      {
        sub_10000231C(v70, (void *)v84, *((unint64_t *)&v84 + 1));
      }

      else
      {
        *(_OWORD *)__int128 v70 = v84;
        uint64_t v71 = v85;
      }

      else {
        std::string v69 = v82;
      }
      if (SHIBYTE(v81) < 0)
      {
        sub_10000231C(v67, v80[0], (unint64_t)v80[1]);
      }

      else
      {
        *(_OWORD *)__int128 v67 = *(_OWORD *)v80;
        uint64_t v68 = v81;
      }

      if (SHIBYTE(v79) < 0)
      {
        sub_10000231C(v65, (void *)v78, *((unint64_t *)&v78 + 1));
      }

      else
      {
        *(_OWORD *)uint64_t v65 = v78;
        uint64_t v66 = v79;
      }

      sub_10000C0AC( (uint64_t)&v74,  (uint64_t)&v73,  (uint64_t)&v72,  (uint64_t)v70,  (uint64_t)&v69,  (uint64_t)v67,  (uint64_t)v65,  v58);
      if (SHIBYTE(v66) < 0) {
        operator delete(v65[0]);
      }
      if (SHIBYTE(v68) < 0) {
        operator delete(v67[0]);
      }
      if (SHIBYTE(v71) < 0) {
        operator delete(v70[0]);
      }
    }

      uint64_t v11 = (const char *)&NextSemanticValue[1];
      if ((NextSemanticValue[1].__r_.__value_.__s.__size_ & 0x80) != 0) {
        uint64_t v11 = (const char *)*p_data;
      }
LABEL_21:
      fprintf(a2, "\n%s\n", v11);
    }

LABEL_188:
    if (*((_WORD *)v34 + 11) != 4) {
      __assert_rtn("End", "document.h", 1594, "IsArray()");
    }
  }

  if (SHIBYTE(v79) < 0) {
    operator delete((void *)v78);
  }
  if (SHIBYTE(v81) < 0) {
    operator delete(v80[0]);
  }
  if (SHIBYTE(v85) < 0)
  {
    int v31 = (void *)v84;
LABEL_206:
    operator delete(v31);
  }

LABEL_207:
LABEL_209:
  sub_100007938((uint64_t)&v90);
  sub_100007938((uint64_t)v92);
  if (SHIBYTE(v60) < 0) {
    operator delete(v59[0]);
  }
  if (SHIBYTE(v62) < 0) {
    operator delete(__dst[0]);
  }
LABEL_215:
  if (SHIBYTE(v64) < 0) {
    operator delete(v63[0]);
  }
}

  if (v144 < 0) {
    operator delete(v143[0]);
  }
  if (SHIBYTE(cap) < 0) {
    operator delete(v145[0]);
  }
  v139.__r_.__value_.__r.__words[0] = (std::string::size_type)v147;
  sub_10000AE78((void ***)&v139);
}

void sub_100011F2C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, void *a24, uint64_t a25, int a26, __int16 a27, char a28, char a29, void *a30, uint64_t a31, uint64_t a32, uint64_t a33, void *a34, uint64_t a35, uint64_t a36, uint64_t a37, void *a38, uint64_t a39, uint64_t a40, uint64_t a41, void *a42, uint64_t a43, uint64_t a44, uint64_t a45, void *a46, uint64_t a47, uint64_t a48, uint64_t a49, void *a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a72 < 0) {
    operator delete(__p);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  if (a76 < 0) {
    operator delete(a75);
  }
  if (a78 < 0) {
    operator delete(a77);
  }
  if (a80 < 0) {
    operator delete(a79);
  }
  if (SLOBYTE(STACK[0x217]) < 0) {
    operator delete((void *)STACK[0x200]);
  }
  if (SLOBYTE(STACK[0x22F]) < 0) {
    operator delete((void *)STACK[0x218]);
  }
  sub_100007938((uint64_t)&STACK[0x230]);
  sub_100007938(v81 - 208);
  if (a16 < 0) {
    operator delete(a11);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000122D8(unsigned int *a1, char *a2)
{
  uint64_t v4 = a2;
  unsigned int v5 = sub_1000123EC((int)&v4, a2);
  v6[2] = 0x405000000000000LL;
  v6[1] = v4;
  v6[0] = v5;
  return sub_10001238C(a1, (uint64_t)v6);
}

uint64_t sub_100012368(uint64_t result)
{
  if ((*(_WORD *)(result + 22) & 0x400) == 0) {
    sub_10005EA28();
  }
  if ((*(_WORD *)(result + 22) & 0x1000) == 0) {
    return *(void *)(result + 8);
  }
  return result;
}

uint64_t sub_10001238C(unsigned int *a1, uint64_t a2)
{
  if (*((_WORD *)a1 + 11) != 3) {
    sub_10005EA78();
  }
  if (v4 == *((void *)a1 + 1) + 48LL * *a1) {
    sub_10005EA50();
  }
  return v4 + 24;
}

size_t sub_1000123EC(int a1, char *__s)
{
  if (!__s) {
    sub_10005EAA0();
  }
  return strlen(__s);
}

BOOL sub_10001240C@<W0>(BOOL result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (*(_WORD *)(result + 22) != 3) {
    sub_10005EAF0();
  }
  if ((*(_WORD *)(a2 + 22) & 0x400) == 0) {
    sub_10005EAC8();
  }
  unsigned int v5 = (unsigned int *)result;
  uint64_t v6 = *(void *)(result + 8);
  *a3 = v6;
  while (v6 != *((void *)v5 + 1) + 48LL * *v5)
  {
    uint64_t result = sub_1000124A4(a2, v6);
    if (result) {
      break;
    }
    v6 += 48LL;
    *a3 = v6;
    if (*((_WORD *)v5 + 11) != 3) {
      sub_10005EA78();
    }
  }

  return result;
}

BOOL sub_1000124A4(uint64_t a1, uint64_t a2)
{
  if ((*(_WORD *)(a1 + 22) & 0x400) == 0) {
    sub_10005EB18();
  }
  if ((*(_WORD *)(a2 + 22) & 0x400) == 0) {
    sub_10005EB40();
  }
  unsigned int v4 = sub_100012540((unsigned int *)a1);
  unsigned int v5 = (const void *)sub_100012368(a1);
  uint64_t v6 = (const void *)sub_100012368(a2);
  return v5 == v6 || memcmp(v5, v6, v4) == 0;
}

uint64_t sub_100012540(unsigned int *a1)
{
  if ((*((_WORD *)a1 + 11) & 0x400) == 0) {
    sub_10005EB68();
  }
  if ((*((_WORD *)a1 + 11) & 0x1000) != 0) {
    return (21 - *((char *)a1 + 21));
  }
  else {
    return *a1;
  }
}

BOOL sub_100012574(unsigned int *a1, char *a2)
{
  if (*((_WORD *)a1 + 11) != 3) {
    sub_10005E914();
  }
  return v4 != *((void *)a1 + 1) + 48LL * *a1;
}

BOOL sub_1000125CC@<W0>(BOOL a1@<X0>, char *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = a2;
  unsigned int v7 = sub_1000123EC((int)&v6, a2);
  v8[2] = 0x405000000000000LL;
  v8[1] = v6;
  v8[0] = v7;
  return sub_10001240C(a1, (uint64_t)v8, a3);
}

unsigned int *sub_10001266C(unsigned int *a1, __int128 *a2, __int128 *a3, size_t *a4)
{
  if (*((_WORD *)a1 + 11) != 3) {
    sub_10005EBB8();
  }
  if ((*((_WORD *)a2 + 11) & 0x400) == 0) {
    sub_10005EB90();
  }
  unsigned int v7 = *a1;
  unsigned int v8 = a1[1];
  if (*a1 >= v8)
  {
    if (v8) {
      unsigned int v9 = v8 + ((v8 + 1) >> 1);
    }
    else {
      unsigned int v9 = 16;
    }
    sub_100012730((uint64_t)a1, v9, a4);
    unsigned int v7 = *a1;
  }

  uint64_t v10 = *((void *)a1 + 1);
  uint64_t v11 = v10 + 48LL * v7;
  __int128 v12 = *a2;
  *(void *)(v11 + 16) = *((void *)a2 + 2);
  *(_OWORD *)uint64_t v11 = v12;
  *((_WORD *)a2 + 11) = 0;
  uint64_t v13 = v10 + 48LL * *a1;
  __int128 v14 = *a3;
  *(void *)(v13 + 40) = *((void *)a3 + 2);
  *(_OWORD *)(v13 + 24) = v14;
  *((_WORD *)a3 + 11) = 0;
  ++*a1;
  return a1;
}

uint64_t sub_100012730(uint64_t a1, unsigned int a2, size_t *a3)
{
  if (*(_WORD *)(a1 + 22) != 3) {
    sub_10005EBE0();
  }
  uint64_t v5 = *(unsigned int *)(a1 + 4);
  if (v5 < a2)
  {
    *(void *)(a1 + std::ostream::~ostream(v1, v2 + 8) = sub_100012798(a3, *(const void **)(a1 + 8), 48 * v5, 48LL * a2);
    *(_DWORD *)(a1 + 4) = a2;
  }

  return a1;
}

uint64_t sub_100012798(size_t *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return sub_10000751C(a1, a4);
  }
  if (!a4) {
    return 0LL;
  }
  uint64_t v4 = a2;
  size_t v5 = (a3 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v6 = (a4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  if (v6 > v5)
  {
    unsigned int v7 = (unint64_t *)*a1;
    uint64_t v8 = *(void *)(*a1 + 8);
    if ((const void *)(*a1 + v8 - v5 + 24) == v4)
    {
      unint64_t v9 = v8 + v6 - v5;
      if (v9 <= *v7)
      {
        v7[1] = v9;
        return (uint64_t)v4;
      }
    }

    uint64_t v10 = (void *)sub_10000751C(a1, v6);
    if (v10)
    {
      uint64_t v11 = v10;
      if (v5) {
        memcpy(v10, v4, v5);
      }
      return (uint64_t)v11;
    }

    return 0LL;
  }

  return (uint64_t)v4;
}

uint64_t sub_100012848(void **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_100012D38(a1 + 1, 1LL, v4);
  *(void *)uint64_t v5 = 0LL;
  *(_BYTE *)(v5 + std::ostream::~ostream(v1, v2 + 8) = 1;
  *(_BYTE *)sub_10000733C(*a1, 1LL) = 91;
  return 1LL;
}

uint64_t sub_10001289C(void **a1)
{
  uint64_t v1 = (char *)a1[4];
  if (!*(v1 - 8)) {
    sub_10005EC30();
  }
  uint64_t v3 = *((void *)v1 - 2);
  a1[4] = v1 - 16;
  if (v3 && (*((_BYTE *)a1 + 68) & 1) == 0)
  {
    *(_BYTE *)sub_10000733C(*a1, 1LL) = 10;
    size_t v4 = ((unint64_t)((char *)a1[4] - (char *)a1[3]) >> 4) * *((unsigned int *)a1 + 16);
    int v5 = *((unsigned __int8 *)a1 + 61);
    unint64_t v6 = (void *)sub_10000733C(*a1, v4);
    memset(v6, v5, v4);
  }

  *(_BYTE *)sub_10000733C(*a1, 1LL) = 93;
  return 1LL;
}

uint64_t sub_100012950(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (!a2) {
    sub_10005EC58();
  }
  unsigned int v3 = a3;
  sub_100012B4C((void **)a1, 5LL, a3);
  return sub_100012E30(a1, a2, v3);
}

uint64_t sub_100012998(void **a1, unsigned int a2, uint64_t a3)
{
  int v5 = (_BYTE *)sub_10000733C(*a1, 11LL);
  if (!v5) {
    sub_10005EC80();
  }
  unint64_t v6 = v5;
  if ((a2 & 0x80000000) != 0)
  {
    _BYTE *v5 = 45;
    unsigned int v7 = v5 + 1;
    a2 = -a2;
  }

  else
  {
    unsigned int v7 = v5;
  }

  uint64_t v8 = sub_100013930(a2, v7);
  uint64_t v11 = (*a1)[3];
  (*a1)[3] = v11 - (v6 - v8) - 11;
  return 1LL;
}

uint64_t sub_100012A34(void **a1, unint64_t a2, uint64_t a3)
{
  int v5 = (_BYTE *)sub_10000733C(*a1, 21LL);
  if (!v5) {
    sub_10005ECA8();
  }
  unint64_t v6 = v5;
  if ((a2 & 0x8000000000000000LL) != 0)
  {
    _BYTE *v5 = 45;
    unsigned int v7 = v5 + 1;
    a2 = -(uint64_t)a2;
  }

  else
  {
    unsigned int v7 = v5;
  }

  uint64_t v8 = sub_100013C04(a2, v7);
  uint64_t v11 = (*a1)[3];
  (*a1)[3] = v11 - (v6 - v8) - 21;
  return 1LL;
}

uint64_t sub_100012AD0(void **a1, unint64_t a2, uint64_t a3)
{
  int v5 = (_BYTE *)sub_10000733C(*a1, 20LL);
  unint64_t v6 = sub_100013C04(a2, v5);
  uint64_t v9 = (*a1)[3];
  (*a1)[3] = v9 - (v5 - v6) - 20;
  return 1LL;
}

void **sub_100012B4C(void **result, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = result;
  size_t v4 = (char *)result[4];
  unint64_t v5 = v4 - (char *)result[3];
  if (v5)
  {
    if (v5 <= 0xF) {
      sub_10005ECF8((uint64_t)result, a2, a3);
    }
    int v6 = a2;
    uint64_t v7 = *((void *)v4 - 2);
    if (*(v4 - 8))
    {
      if (v7)
      {
        uint64_t result = (void **)sub_10000733C(*result, 1LL);
        *(_BYTE *)uint64_t result = 44;
        if ((*((_BYTE *)v3 + 68) & 1) != 0)
        {
          uint64_t result = (void **)sub_10000733C(*v3, 1LL);
          *(_BYTE *)uint64_t result = 32;
        }
      }

      if ((*((_BYTE *)v3 + 68) & 1) != 0) {
        goto LABEL_21;
      }
      *(_BYTE *)sub_10000733C(*v3, 1LL) = 10;
    }

    else
    {
      char v8 = 10;
      if (v7)
      {
        uint64_t v9 = (_BYTE *)sub_10000733C(*result, 1LL);
        if ((v7 & 1) != 0) {
          char v10 = 58;
        }
        else {
          char v10 = 44;
        }
        if ((v7 & 1) != 0) {
          char v8 = 32;
        }
        else {
          char v8 = 10;
        }
        _BYTE *v9 = v10;
      }

      uint64_t result = (void **)sub_10000733C(*v3, 1LL);
      *(_BYTE *)uint64_t result = v8;
      if ((*(v4 - 16) & 1) != 0) {
        goto LABEL_21;
      }
    }

    size_t v11 = ((unint64_t)((char *)v3[4] - (char *)v3[3]) >> 4) * *((unsigned int *)v3 + 16);
    __int128 v12 = *v3;
    int v13 = *((unsigned __int8 *)v3 + 61);
    __int128 v14 = (void *)sub_10000733C(v12, v11);
    uint64_t result = (void **)memset(v14, v13, v11);
LABEL_21:
    if (*(v4 - 8)) {
      BOOL v15 = 1;
    }
    else {
      BOOL v15 = v6 == 5;
    }
    if (!v15 && (*((void *)v4 - 2) & 1LL) == 0) {
      sub_10005ED1C();
    }
    ++*((void *)v4 - 2);
    return result;
  }

  if (*((_BYTE *)result + 60)) {
    sub_10005ECD0();
  }
  *((_BYTE *)result + 60) = 1;
  return result;
}

uint64_t sub_100012CAC(uint64_t *a1)
{
  uint64_t v2 = (void *)*a1;
  if ((uint64_t)(v2[4] - v2[3]) <= 3)
  {
    sub_1000073C0(v2, 4LL);
    uint64_t v2 = (void *)*a1;
  }

  *(_BYTE *)sub_100007384((uint64_t)v2, 1LL) = 110;
  *(_BYTE *)sub_100007384(*a1, 1LL) = 117;
  *(_BYTE *)sub_100007384(*a1, 1LL) = 108;
  *(_BYTE *)sub_100007384(*a1, 1LL) = 108;
  return 1LL;
}

uint64_t sub_100012D38(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1[4] - a1[3] < 16 * a2) {
    sub_100012DC0(a1, a2);
  }
  return sub_100012D80((uint64_t)a1, a2, a3);
}

uint64_t sub_100012D80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    sub_10005ED44(a1, a2, a3);
  }
  if (16 * a2 > *(void *)(a1 + 32) - v3) {
    sub_10005ED68(a1, a2, a3);
  }
  *(void *)(a1 + 24) = v3 + 16 * a2;
  return v3;
}

char *sub_100012DC0(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  if (v4)
  {
    unint64_t v5 = a1[4] - v4 + ((unint64_t)(a1[4] - v4 + 1) >> 1);
  }

  else
  {
    if (!*a1)
    {
      int v6 = operator new(1uLL);
      *a1 = v6;
      a1[1] = v6;
    }

    uint64_t v4 = 0LL;
    unint64_t v5 = a1[5];
  }

  unint64_t v7 = a1[3] - v4 + 16 * a2;
  if (v5 <= v7) {
    size_t v8 = v7;
  }
  else {
    size_t v8 = v5;
  }
  return sub_100006E38(a1, v8);
}

uint64_t sub_100012E30(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  int v6 = (void *)*a1;
  uint64_t v7 = 6 * a3 + 2;
  if (v6[4] - v6[3] < v7)
  {
    sub_1000073C0(v6, v7);
    int v6 = (void *)*a1;
  }

  *(_BYTE *)sub_100007384((uint64_t)v6, 1LL) = 34;
  if (a3)
  {
    unint64_t v8 = 0LL;
    do
    {
      unint64_t v9 = *(unsigned __int8 *)(a2 + v8);
      int v10 = a0123456789abcd[v9 + 16];
      size_t v11 = (_BYTE *)sub_100007384(*a1, 1LL);
      if (v10)
      {
        *size_t v11 = 92;
        *(_BYTE *)sub_100007384(*a1, 1LL) = v10;
        if (v10 == 117)
        {
          *(_BYTE *)sub_100007384(*a1, 1LL) = 48;
          *(_BYTE *)sub_100007384(*a1, 1LL) = 48;
          char v12 = a0123456789abcd[v9 >> 4];
          *(_BYTE *)sub_100007384(*a1, 1LL) = v12;
          char v13 = a0123456789abcd[v9 & 0xF];
          *(_BYTE *)sub_100007384(*a1, 1LL) = v13;
        }
      }

      else
      {
        *size_t v11 = v9;
      }

      ++v8;
    }

    while (v8 < a3);
  }

  *(_BYTE *)sub_100007384(*a1, 1LL) = 34;
  return 1LL;
}

BOOL sub_100012F84(uint64_t a1, double a2)
{
  double v2 = a2;
  uint64_t v4 = *(void *)&a2 & 0x7FF0000000000000LL;
  if ((*(void *)&a2 & 0x7FF0000000000000LL) != 0x7FF0000000000000LL)
  {
    int v6 = (char *)sub_10000733C(*(void **)a1, 25LL);
    int v9 = *(_DWORD *)(a1 + 56);
    if (v9 <= 0) {
      sub_10005ED8C();
    }
    int v10 = v6;
    if ((*(void *)&a2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    {
      if (v2 >= 0.0)
      {
        size_t v11 = v6;
      }

      else
      {
        char *v6 = 45;
        size_t v11 = v6 + 1;
        double v2 = -v2;
      }

      sub_1000130A8((uint64_t)v11, &v17, &v16, v2);
      char v13 = sub_100013250(v11, v17, v16, v9);
    }

    else
    {
      if ((*(void *)&a2 & 0x8000000000000000LL) != 0)
      {
        char *v6 = 45;
        char v12 = v6 + 1;
      }

      else
      {
        char v12 = v6;
      }

      *(_WORD *)char v12 = 11824;
      v12[2] = 48;
      char v13 = v12 + 3;
    }

    uint64_t v14 = *(void *)(*(void *)a1 + 24LL);
    *(void *)(*(void *)a1 + 24LL) = v14 - (v10 - v13) - 25;
  }

  return v4 != 0x7FF0000000000000LL;
}

uint64_t sub_1000130A8(uint64_t a1, int *a2, _DWORD *a3, double a4)
{
  if (((*(void *)&a4 >> 52) & 0x7FF) != 0) {
    uint64_t v7 = *(void *)&a4 & 0xFFFFFFFFFFFFFLL | 0x10000000000000LL;
  }
  else {
    uint64_t v7 = *(void *)&a4 & 0xFFFFFFFFFFFFFLL;
  }
  if (((*(void *)&a4 >> 52) & 0x7FF) != 0) {
    int v8 = ((*(void *)&a4 >> 52) & 0x7FF) - 1075;
  }
  else {
    int v8 = -1074;
  }
  uint64_t v30 = v7;
  int v31 = v8;
  uint64_t v32 = (2 * (v7 & 0x1FFFFFFFFFFFFFLL)) | 1;
  int v33 = v8 - 1;
  uint64_t v9 = sub_1000138F0(&v32);
  uint64_t v11 = 2 * v7 - 1;
  if (v7 == 0x10000000000000LL) {
    char v12 = -2;
  }
  else {
    char v12 = -1;
  }
  if (v7 == 0x10000000000000LL) {
    uint64_t v11 = 0x3FFFFFFFFFFFFFLL;
  }
  uint64_t v28 = v9;
  int v29 = v10;
  uint64_t v32 = v11 << (v8 - v10 + v12);
  double v13 = (double)(-61 - v10) * 0.301029996 + 347.0;
  int v14 = (int)v13;
  int v33 = v10;
  unsigned int v15 = (v14 >> 3) + 1;
  *a3 = 348 - 8 * v15;
  if (v15 >= 0x57) {
    sub_10005EDB4();
  }
  uint64_t v16 = qword_100060D90[v15];
  uint64_t v17 = word_100061048[v15];
  v27[0] = v16;
  v27[1] = v17;
  unint64_t v24 = sub_1000134DC((unint64_t *)&v30);
  uint64_t v25 = v18;
  v26[0] = sub_10001350C(&v24, v27);
  v26[1] = v19;
  unint64_t v20 = sub_10001350C(&v28, v27);
  uint64_t v25 = v21;
  unint64_t v22 = sub_10001350C(&v32, v27);
  unint64_t v24 = v20 - 1;
  return sub_10001356C(v26, (uint64_t *)&v24, v20 - 1 + ~v22, a1, a2, a3);
}

char *sub_100013250(char *__src, int a2, int a3, int a4)
{
  int v8 = a3 + a2;
  if ((a3 & 0x80000000) == 0 && v8 <= 21)
  {
    if (a3)
    {
      uint64_t v9 = &__src[a2];
      if (v8 <= a2 + 1) {
        int v10 = a2 + 1;
      }
      else {
        int v10 = a3 + a2;
      }
      memset(v9, 48, (v10 + ~a2) + 1LL);
    }

    uint64_t v11 = &__src[v8];
    __int16 v12 = 12334;
    goto LABEL_9;
  }

  unsigned int v14 = v8 - 1;
  if ((v8 - 1) <= 0x14)
  {
    uint64_t v15 = (v8 + 1);
    memmove(&__src[v15], &__src[v8], -a3);
    __src[v8] = 46;
    if (a4 + a3 >= 0) {
      return &__src[a2 + 1];
    }
    if (a4 >= 2)
    {
      int v20 = v8 + a4;
      while (__src[v20] == 48)
      {
      }

      return &__src[v20 + 1];
    }

LABEL_32:
    uint64_t v21 = (v8 + 2);
    return &__src[v21];
  }

  if (v8 == 0 || v8 >= 0xFFFFFFFB)
  {
    uint64_t v16 = 2LL - v8;
    memmove(&__src[v16], __src, a2);
    *(_WORD *)__src = 11824;
    if (v8 < 0)
    {
      else {
        int v17 = 2 - v8;
      }
      memset(__src + 2, 48, (v17 - 2));
    }

    if (-a3 <= a4)
    {
      uint64_t v21 = v16 + a2;
      return &__src[v21];
    }

    if (a4 >= 2)
    {
      for (int i = a4 + 2; ; --i)
      {
        int v19 = i - 1;
        if (__src[i - 1] != 48) {
          break;
        }
        if (v19 < 4) {
          return __src + 3;
        }
      }

      return &__src[i];
    }

    return __src + 3;
  }

  if (v8 < -a4)
  {
    *(_WORD *)__src = 11824;
    __src[2] = 48;
    return __src + 3;
  }

  if (a2 == 1)
  {
    __src[1] = 101;
    if ((v14 & 0x80000000) == 0)
    {
      uint64_t v11 = __src + 2;
      goto LABEL_44;
    }

    uint64_t v11 = __src + 3;
    __src[2] = 45;
  }

  else
  {
    memmove(__src + 2, __src + 1, a2 - 1);
    __src[1] = 46;
    __src[a2 + 1] = 101;
    uint64_t v11 = &__src[a2 + 2];
    if ((v14 & 0x80000000) == 0) {
      goto LABEL_44;
    }
    *v11++ = 45;
  }

  unsigned int v14 = 1 - v8;
LABEL_44:
  if (v14 < 0x64)
  {
    if (v14 >= 0xA)
    {
      __int16 v12 = word_100061120[v14];
LABEL_9:
      *(_WORD *)uint64_t v11 = v12;
      return v11 + 2;
    }

    *uint64_t v11 = v14 + 48;
    return v11 + 1;
  }

  else
  {
    *uint64_t v11 = v14 / 0x64 + 48;
    *(_WORD *)(v11 + 1) = word_100061120[v14 % 0x64];
    return v11 + 3;
  }

unint64_t sub_1000134DC(unint64_t *a1)
{
  if (!*a1) {
    sub_10005EDDC();
  }
  return *a1 << __clz(*a1);
}

unint64_t sub_10001350C(void *a1, void *a2)
{
  uint64_t v2 = HIDWORD(*a1);
  uint64_t v3 = HIDWORD(*a2);
  unint64_t v4 = v3 * (unint64_t)*a1;
  unint64_t v5 = *a2 * (unint64_t)v2;
  return HIDWORD(v5)
       + v3 * (unint64_t)v2
       + HIDWORD(v4)
       + ((((*a2 * (unint64_t)*a1) >> 32)
         + v5
         + v4
         + 0x80000000) >> 32);
}

uint64_t sub_10001356C(uint64_t *a1, uint64_t *a2, unint64_t a3, uint64_t a4, int *a5, _DWORD *a6)
{
  int v6 = -*((_DWORD *)a2 + 2);
  unint64_t v7 = 1LL << -*((_BYTE *)a2 + 8);
  uint64_t v8 = *a2;
  uint64_t v9 = *a1;
  unint64_t v10 = *a2 - *a1;
  unint64_t v11 = (unint64_t)*a2 >> -*((_BYTE *)a2 + 8);
  unint64_t v12 = (v7 - 1) & v8;
  else {
    int v13 = 9;
  }
  else {
    int v14 = 7;
  }
  else {
    int v15 = 6;
  }
  else {
    int v16 = 5;
  }
  else {
    int v17 = 4;
  }
  else {
    int v18 = 3;
  }
  else {
    LODWORD(result) = 2;
  }
  *a5 = 0;
  while (2)
  {
    if ((int)result <= 0)
    {
      int v34 = 1;
      std::string::size_type v35 = dword_1000610F8;
      do
      {
        unint64_t v36 = a3;
        unint64_t v37 = 10 * v12;
        uint64_t result = (v37 >> v6);
        int v38 = *a5;
        else {
          BOOL v39 = v38 == 0;
        }
        if (!v39)
        {
          uint64_t result = (v38 + 1);
          *a5 = result;
          *(_BYTE *)(a4 + v3std::ostream::~ostream(v1, v2 + 8) = (v37 >> v6) + 48;
        }

        a3 *= 10LL;
        unint64_t v12 = v37 & (v7 - 1);
        --v34;
        ++v35;
      }

      while (10 * v36 <= v12);
      *a6 = *a6 + v34 - 1;
      if (v34 < -7) {
        uint64_t v40 = 0LL;
      }
      else {
        uint64_t v40 = *v35;
      }
      if (10 * v36 - v12 >= v7)
      {
        unint64_t v41 = v40 * v10;
        if (v12 < v40 * v10)
        {
          uint64_t v42 = *a5 - 1LL;
          uint64_t v43 = -(uint64_t)v12;
          unint64_t v44 = 10 * v36 - v7;
          unint64_t v45 = v7 + v12;
          uint64_t v46 = -(uint64_t)(v40 * v10);
          do
          {
            if (v45 >= v41 && v41 + v43 <= v46 + v45) {
              break;
            }
            --*(_BYTE *)(a4 + v42);
            if (v45 >= v41) {
              break;
            }
            unint64_t v47 = v44 + v43;
            v43 -= v7;
            v45 += v7;
          }

          while (v47 >= v7);
        }
      }
    }

    else
    {
      uint64_t result = (result - 1);
      unsigned int v20 = 0;
      switch((int)result)
      {
        case 0:
          goto LABEL_38;
        case 1:
          unsigned int v21 = v11 / 0xA;
          unsigned int v20 = v11 % 0xA;
          goto LABEL_32;
        case 2:
          unsigned int v21 = v11 / 0x64;
          unsigned int v20 = v11 % 0x64;
          goto LABEL_32;
        case 3:
          unsigned int v21 = v11 / 0x3E8;
          unsigned int v20 = v11 % 0x3E8;
          goto LABEL_32;
        case 4:
          unsigned int v21 = v11 / 0x2710;
          unsigned int v20 = v11 % 0x2710;
LABEL_32:
          LODWORD(v11) = v21;
          goto LABEL_38;
        case 5:
          unsigned int v23 = v11 / 0x186A0;
          unsigned int v20 = v11 % 0x186A0;
          goto LABEL_37;
        case 6:
          unsigned int v23 = v11 / 0xF4240;
          unsigned int v20 = v11 % 0xF4240;
          goto LABEL_37;
        case 7:
          unsigned int v23 = v11 / 0x989680;
          unsigned int v20 = v11 % 0x989680;
          goto LABEL_37;
        case 8:
          unsigned int v23 = v11 / 0x5F5E100;
          unsigned int v20 = v11 % 0x5F5E100;
LABEL_37:
          LODWORD(v11) = v23;
LABEL_38:
          int v24 = v11;
          int v22 = *a5;
          LODWORD(v11) = v20;
          if (!v24) {
            goto LABEL_39;
          }
          goto LABEL_41;
        default:
          int v22 = *a5;
LABEL_39:
          if (v22)
          {
            LOBYTE(v24) = 0;
LABEL_41:
            *a5 = v22 + 1;
            *(_BYTE *)(a4 + v22) = v24 + 48;
          }

          unint64_t v25 = (unint64_t)v11 << v6;
          if (a3 < v25 + v12) {
            continue;
          }
          *a6 += result;
          if (v25 + v12 < v10)
          {
            unint64_t v26 = (unint64_t)dword_1000610F8[result] << v6;
            if (a3 - (v25 + v12) >= v26)
            {
              uint64_t v27 = *a5 - 1LL;
              unint64_t v28 = v10 - v12;
              uint64_t v29 = -(uint64_t)v25;
              unint64_t v30 = a3 - v12 - v26;
              unint64_t v31 = v12 + v26 + v25;
              uint64_t v32 = v9 - v8;
              do
              {
                if (v31 >= v10 && v28 + v29 <= v32 + v31) {
                  break;
                }
                --*(_BYTE *)(a4 + v27);
                if (v31 >= v10) {
                  break;
                }
                unint64_t v33 = v30 + v29;
                v29 -= v26;
                v31 += v26;
              }

              while (v33 >= v26);
            }
          }

          break;
      }
    }

    return result;
  }

uint64_t sub_1000138F0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  unint64_t v1 = a1[1];
  if ((*a1 & 0x20000000000000LL) == 0)
  {
    unint64_t v3 = __clz(v2 & 0x1FFFFFFFFFFFFFLL) - 10;
    v2 <<= v3;
    do
    {
      unint64_t v1 = (v1 - 1) | v1 & 0xFFFFFFFF00000000LL;
      --v3;
    }

    while (v3);
  }

  return v2 << 10;
}

_BYTE *sub_100013930(unsigned int a1, _BYTE *a2)
{
  if (!a2) {
    sub_10005EE04();
  }
  if (a1 >> 4 <= 0x270)
  {
    if (a1 < 0x3E8)
    {
      if (a1 < 0x64)
      {
        if (a1 < 0xA) {
          goto LABEL_11;
        }
        goto LABEL_10;
      }
    }

    else
    {
      *a2++ = word_100061120[(unsigned __int16)a1 / 0x64u];
    }

    *a2++ = *((_BYTE *)word_100061120 + ((2 * ((unsigned __int16)a1 / 0x64u)) | 1LL));
LABEL_10:
    *a2++ = word_100061120[(unsigned __int16)a1 % 0x64u];
LABEL_11:
    *a2 = *((_BYTE *)word_100061120 + ((unsigned __int16)(2 * ((unsigned __int16)a1 % 0x64u)) | 1u));
    return a2 + 1;
  }

  if (a1 < 0x5F5E100)
  {
    if (a1 < 0x989680)
    {
      if (a1 <= 0xF423F)
      {
        if (a1 >> 5 < 0xC35) {
          goto LABEL_17;
        }
        goto LABEL_16;
      }
    }

    else
    {
      *a2++ = word_100061120[a1 / 0xF4240];
    }

    *a2++ = *((_BYTE *)word_100061120 + ((2 * (a1 / 0xF4240)) | 1LL));
LABEL_16:
    *a2++ = word_100061120[(unsigned __int16)(a1 / 0x2710) % 0x64u];
LABEL_17:
    *a2 = *((_BYTE *)word_100061120 + ((unsigned __int16)(2 * ((unsigned __int16)(a1 / 0x2710) % 0x64u)) | 1u));
    a2[1] = word_100061120[a1 % 0x2710 / 0x64];
    a2[2] = *((_BYTE *)word_100061120 + ((2 * (a1 % 0x2710 / 0x64)) | 1LL));
    a2[3] = word_100061120[a1 % 0x2710 % 0x64];
    a2[4] = *((_BYTE *)word_100061120 + ((unsigned __int16)(2 * (a1 % 0x2710 % 0x64)) | 1u));
    return a2 + 5;
  }

  unsigned int v3 = a1 % 0x5F5E100;
  if (a1 < 0x3B9ACA00)
  {
    *a2 = a1 / 0x5F5E100 + 48;
    unint64_t v4 = a2 + 1;
  }

  else
  {
    *a2 = word_100061120[a1 / 0x5F5E100];
    unint64_t v4 = a2 + 2;
    a2[1] = HIBYTE(word_100061120[a1 / 0x5F5E100]);
  }

  *unint64_t v4 = word_100061120[v3 / 0xF4240];
  v4[1] = HIBYTE(word_100061120[v3 / 0xF4240]);
  *((_WORD *)v4 + 1) = word_100061120[(unsigned __int16)(v3 / 0x2710) % 0x64u];
  *((_WORD *)v4 + 2) = word_100061120[v3 % 0x2710 / 0x64];
  v4[6] = word_100061120[v3 % 0x2710 % 0x64];
  uint64_t v2 = v4 + 8;
  v4[7] = *((_BYTE *)word_100061120 + (unsigned __int16)(2 * (v3 % 0x2710 % 0x64)) + 1);
  return v2;
}

_BYTE *sub_100013C04(unint64_t a1, _BYTE *a2)
{
  if (!a2) {
    sub_10005EE2C();
  }
  if (a1 < 0x5F5E100)
  {
    if (a1 >> 4 <= 0x270)
    {
      if (a1 < 0x3E8)
      {
        if (a1 < 0x64)
        {
          goto LABEL_15;
        }
      }

      else
      {
        *a2++ = word_100061120[(unsigned __int16)a1 / 0x64u];
      }

      *a2++ = *((_BYTE *)word_100061120 + ((2 * ((unsigned __int16)a1 / 0x64u)) | 1LL));
LABEL_15:
      *a2++ = word_100061120[(unsigned __int16)a1 % 0x64u];
LABEL_16:
      *a2 = *((_BYTE *)word_100061120 + ((unsigned __int16)(2 * ((unsigned __int16)a1 % 0x64u)) | 1u));
      return a2 + 1;
    }

    unint64_t v9 = (a1 / 0x7A120uLL) & 0x3FFE;
    if (a1 < 0x989680)
    {
      if (a1 < 0xF4240)
      {
        if (a1 >> 5 < 0xC35) {
          goto LABEL_28;
        }
        goto LABEL_27;
      }
    }

    else
    {
      *a2++ = *((_BYTE *)word_100061120 + v9);
    }

    *a2++ = *((_BYTE *)word_100061120 + (v9 | 1LL));
LABEL_27:
    *a2++ = word_100061120[(unsigned __int16)(a1 / 0x2710) % 0x64u];
LABEL_28:
    *a2 = *((_BYTE *)word_100061120
          + ((unsigned __int16)(2 * ((unsigned __int16)(a1 / 0x2710) % 0x64u)) | 1u));
    a2[1] = word_100061120[a1 % 0x2710 / 0x64];
    a2[2] = *((_BYTE *)word_100061120 + ((2 * (a1 % 0x2710 / 0x64)) | 1LL));
    a2[3] = word_100061120[a1 % 0x2710 % 0x64];
    a2[4] = *((_BYTE *)word_100061120 + ((unsigned __int16)(2 * (a1 % 0x2710 % 0x64)) | 1u));
    return a2 + 5;
  }

  if (a1 < 0x2386F26FC10000LL)
  {
    unsigned int v2 = a1 % 0x5F5E100;
    unsigned int v3 = a1 / 0x5F5E100;
    unsigned int v4 = v3 % 0x2710;
    uint64_t v5 = v2 / 0xF4240;
    uint64_t v6 = (unsigned __int16)(v2 / 0x2710) % 0x64u;
    uint64_t v7 = v2 % 0x2710 / 0x64;
    uint64_t v8 = v2 % 0x2710 % 0x64;
    if (a1 < 0x38D7EA4C68000LL)
    {
      if (a1 < 0x5AF3107A4000LL)
      {
        if (a1 < 0x9184E72A000LL)
        {
          if (a1 < 0xE8D4A51000LL)
          {
            if (a1 < 0x174876E800LL)
            {
              if (a1 < 0x2540BE400LL)
              {
                if (a1 < 0x3B9ACA00) {
                  goto LABEL_24;
                }
                goto LABEL_23;
              }

LABEL_22:
              *a2++ = *((_BYTE *)word_100061120 + ((2 * (v3 % 0x2710 / 0x64)) | 1LL));
LABEL_23:
              *a2++ = word_100061120[(unsigned __int16)v4 % 0x64u];
LABEL_24:
              *a2 = *((_BYTE *)word_100061120 + ((unsigned __int16)(2 * (v3 % 0x2710 % 0x64)) | 1u));
              a2[1] = word_100061120[v5];
              a2[2] = *((_BYTE *)word_100061120 + ((v5 * 2) | 1LL));
              a2[3] = word_100061120[v6];
              a2[4] = *((_BYTE *)word_100061120 + ((unsigned __int16)(v6 * 2) | 1u));
              a2[5] = word_100061120[v7];
              a2[6] = *((_BYTE *)word_100061120 + ((v7 * 2) | 1LL));
              a2[7] = word_100061120[v8];
              a2[8] = *((_BYTE *)word_100061120 + ((unsigned __int16)(v8 * 2) | 1u));
              return a2 + 9;
            }

  if (v5 == a1[1])
  {
    *a3 = 0LL;
    a3[1] = 0LL;
  }

  else
  {
    *a3 = *(void *)v5;
    uint64_t v15 = *(void *)(v5 + 8);
    a3[1] = v15;
    if (v15)
    {
      char v16 = (unint64_t *)(v15 + 8);
      do
        unsigned int v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
  }

    std::string __str = NextSemanticValue + 1;
    int data = NextSemanticValue[2].__r_.__value_.__l.__data_;
    unint64_t v12 = NextSemanticValue[2].__r_.__value_.__l.__size_;
    int v58 = v12;
    while (data != (std::string::pointer)v12)
    {
      unsigned int v14 = data;
      if (data[23] < 0) {
        unsigned int v14 = *(const char **)data;
      }
      fprintf(a2, "    %s", v14);
      if (*((void *)data + 5))
      {
        fwrite(" [d; ", 5uLL, 1uLL, a2);
        __int128 v61 = 0LL;
        uint64_t v62 = 0LL;
        unint64_t v63 = 0LL;
        uint64_t v15 = (void *)*((void *)data + 3);
        if (v15 != (void *)(data + 32))
        {
          do
          {
            char v16 = *((char *)v15 + 79);
            if (v16 >= 0) {
              unsigned int v17 = (char *)(v15 + 7);
            }
            else {
              unsigned int v17 = (char *)v15[7];
            }
            if (v16 >= 0) {
              unsigned int v18 = *((unsigned __int8 *)v15 + 79);
            }
            else {
              unsigned int v18 = v15[8];
            }
            if (v18)
            {
              while (1)
              {
                unsigned int v19 = *v17;
                if (v19 < 0 ? __maskrune(v19, 0x4000uLL) : _DefaultRuneLocale.__runetype[v19] & 0x4000) {
                  break;
                }
                ++v17;
                if (!--v18) {
                  goto LABEL_40;
                }
              }

              sub_10003E184((const void **)v15 + 4, 61, (uint64_t)&v59);
              std::string::push_back(&v59, 34);
              __int128 v70 = v59;
              memset(&v59, 0, sizeof(v59));
              unint64_t v33 = *((char *)v15 + 79);
              if (v33 >= 0) {
                int v34 = (const std::string::value_type *)(v15 + 7);
              }
              else {
                int v34 = (const std::string::value_type *)v15[7];
              }
              if (v33 >= 0) {
                std::string::size_type v35 = *((unsigned __int8 *)v15 + 79);
              }
              else {
                std::string::size_type v35 = v15[8];
              }
              unint64_t v36 = std::string::append(&v70, v34, v35);
              unint64_t v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
              v60.__r_.__value_.__l.__cap_ = v36->__r_.__value_.__l.__cap_;
              *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v37;
              v36->__r_.__value_.__l.__size_ = 0LL;
              v36->__r_.__value_.__l.__cap_ = 0LL;
              v36->__r_.__value_.__r.__words[0] = 0LL;
              std::string::push_back(&v60, 34);
              v71[0] = v60.__r_.__value_.__l.__size_;
              int v38 = v60.__r_.__value_.__r.__words[0];
              *(void *)((char *)v71 + 7) = *(std::string::size_type *)((char *)&v60.__r_.__value_.__r.__words[1] + 7);
              BOOL v39 = v60.__r_.__value_.__s.__size_;
              memset(&v60, 0, sizeof(v60));
              uint64_t v40 = v62;
              if ((unint64_t)v62 >= v63)
              {
                uint64_t v43 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v62 - v61) >> 3);
                unint64_t v44 = v43 + 1;
                if (v43 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  sub_100002668();
                }
                else {
                  unint64_t v45 = v44;
                }
                std::string v69 = &v63;
                if (v45) {
                  uint64_t v46 = (char *)sub_10000267C((uint64_t)&v63, v45);
                }
                else {
                  uint64_t v46 = 0LL;
                }
                __int128 v49 = &v46[24 * v43];
                std::string __p = v46;
                uint64_t v66 = v49;
                uint64_t v68 = &v46[24 * v45];
                uint64_t v50 = v71[0];
                *(void *)__int128 v49 = v38;
                *((void *)v49 + 1) = v50;
                *(void *)(v49 + 15) = *(void *)((char *)v71 + 7);
                v49[23] = v39;
                v71[0] = 0LL;
                *(void *)((char *)v71 + 7) = 0LL;
                __int128 v67 = v49 + 24;
                sub_100002D50(&v61, &__p);
                uint64_t v42 = v62;
                sub_100002ED8((uint64_t)&__p);
              }

              else
              {
                unint64_t v41 = v71[0];
                *uint64_t v62 = v38;
                v40[1] = v41;
                *(std::string::size_type *)((char *)v40 + 15) = *(void *)((char *)v71 + 7);
                *((_BYTE *)v40 + 23) = v39;
                uint64_t v42 = v40 + 3;
              }

              uint64_t v62 = v42;
              unint64_t v48 = (void *)v59.__r_.__value_.__r.__words[0];
            }

            else
            {
LABEL_40:
              sub_10003E184((const void **)v15 + 4, 61, (uint64_t)&v60);
              unsigned int v21 = *((char *)v15 + 79);
              if (v21 >= 0) {
                int v22 = (const std::string::value_type *)(v15 + 7);
              }
              else {
                int v22 = (const std::string::value_type *)v15[7];
              }
              if (v21 >= 0) {
                unsigned int v23 = *((unsigned __int8 *)v15 + 79);
              }
              else {
                unsigned int v23 = v15[8];
              }
              int v24 = std::string::append(&v60, v22, v23);
              unint64_t v25 = v24->__r_.__value_.__r.__words[0];
              v70.__r_.__value_.__r.__words[0] = v24->__r_.__value_.__l.__size_;
              *(std::string::size_type *)((char *)v70.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v24->__r_.__value_.__r.__words[1] + 7);
              unint64_t v26 = v24->__r_.__value_.__s.__size_;
              v24->__r_.__value_.__l.__size_ = 0LL;
              v24->__r_.__value_.__l.__cap_ = 0LL;
              v24->__r_.__value_.__r.__words[0] = 0LL;
              uint64_t v27 = v62;
              if ((unint64_t)v62 >= v63)
              {
                uint64_t v29 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v62 - v61) >> 3);
                unint64_t v30 = v29 + 1;
                if (v29 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  sub_100002668();
                }
                else {
                  unint64_t v31 = v30;
                }
                std::string v69 = &v63;
                if (v31) {
                  uint64_t v32 = (char *)sub_10000267C((uint64_t)&v63, v31);
                }
                else {
                  uint64_t v32 = 0LL;
                }
                unint64_t v47 = &v32[24 * v29];
                std::string __p = v32;
                uint64_t v66 = v47;
                uint64_t v68 = &v32[24 * v31];
                *(void *)unint64_t v47 = v25;
                *((void *)v47 + 1) = v70.__r_.__value_.__r.__words[0];
                *(void *)(v47 + 15) = *(std::string::size_type *)((char *)v70.__r_.__value_.__r.__words + 7);
                v47[23] = v26;
                __int128 v67 = v47 + 24;
                sub_100002D50(&v61, &__p);
                unint64_t v28 = v62;
                sub_100002ED8((uint64_t)&__p);
              }

              else
              {
                *uint64_t v62 = v25;
                v27[1] = v70.__r_.__value_.__r.__words[0];
                *(std::string::size_type *)((char *)v27 + 15) = *(std::string::size_type *)((char *)v70.__r_.__value_.__r.__words
                                                                                          + 7);
                *((_BYTE *)v27 + 23) = v26;
                unint64_t v28 = v27 + 3;
              }

              uint64_t v62 = v28;
              unint64_t v48 = (void *)v60.__r_.__value_.__r.__words[0];
            }

            operator delete(v48);
LABEL_85:
            int v51 = (void *)v15[1];
            if (v51)
            {
              do
              {
                __int128 v52 = v51;
                int v51 = (void *)*v51;
              }

              while (v51);
            }

            else
            {
              do
              {
                __int128 v52 = (void *)v15[2];
                unint64_t v53 = *v52 == (void)v15;
                uint64_t v15 = v52;
              }

              while (!v53);
            }

            uint64_t v15 = v52;
          }

          while (v52 != (void *)(data + 32));
        }

        sub_1000021BC(&v60, ", ");
        siri::dialogengine::StringJoin(&__p, &v61, &v60);
        if (SHIBYTE(v67) >= 0) {
          p_p = (const char *)&__p;
        }
        else {
          p_p = (const char *)__p;
        }
        a2 = v57;
        fputs(p_p, v57);
        if (SHIBYTE(v67) < 0) {
          operator delete(__p);
        }
        fputc(93, v57);
        std::string __p = &v61;
        sub_1000027F4((void ***)&__p);
      }

      else
      {
        fwrite(" [d]", 4uLL, 1uLL, a2);
      }

      data += 48;
      unint64_t v12 = v58;
    }

    fputc(10, a2);
    std::string::operator=(&v64, __str);
    NextSemanticValue = (std::string *)siri::dialogengine::DialogMetadataReader::GetNextSemanticValue(v55);
  }

LABEL_20:
          *a2++ = *((_BYTE *)word_100061120 + ((unsigned __int16)(2 * ((unsigned __int16)(v3 / 0x2710) % 0x64u)) | 1u));
          goto LABEL_21;
        }

LABEL_19:
        *a2++ = word_100061120[(unsigned __int16)(v3 / 0x2710) % 0x64u];
        goto LABEL_20;
      }
    }

    else
    {
      *a2++ = word_100061120[(a1 / 0x5F5E100) / 0xF4240];
    }

    *a2++ = *((_BYTE *)word_100061120 + ((2 * ((a1 / 0x5F5E100) / 0xF4240)) | 1LL));
    goto LABEL_19;
  }

  unint64_t v10 = a1 / 0x2386F26FC10000LL;
  unint64_t v11 = a1 % 0x2386F26FC10000LL;
  if ((a1 / 0x2386F26FC10000LL) > 9)
  {
    if (v10 > 0x63)
    {
      unsigned int v14 = (unsigned __int16)v10 / 0x64u;
      if (v10 > 0x3E7)
      {
        uint64_t v15 = (unsigned __int16)v10 % 0x64u;
        *(_WORD *)a2 = word_100061120[v14];
        a2[2] = word_100061120[v15];
        char v16 = *((_BYTE *)word_100061120 + ((unsigned __int16)(v15 * 2) & 0xFFFE) + 1);
        unint64_t v12 = a2 + 4;
        a2[3] = v16;
      }

      else
      {
        *a2 = v14 + 48;
        *(_WORD *)(a2 + 1) = word_100061120[(unsigned __int16)v10 % 0x64u];
        unint64_t v12 = a2 + 3;
      }
    }

    else
    {
      *a2 = word_100061120[a1 / 0x2386F26FC10000LL];
      unint64_t v12 = a2 + 2;
      a2[1] = HIBYTE(word_100061120[a1 / 0x2386F26FC10000LL]);
    }
  }

  else
  {
    *a2 = v10 + 48;
    unint64_t v12 = a2 + 1;
  }

  unsigned int v17 = v11 % 0x5F5E100;
  unsigned int v18 = (v11 / 0x5F5E100) % 0x2710;
  unsigned int v19 = (unsigned __int16)v18 / 0x64u;
  uint64_t v20 = (unsigned __int16)v18 % 0x64u;
  *unint64_t v12 = word_100061120[(v11 / 0x5F5E100) / 0xF4240];
  v12[1] = HIBYTE(word_100061120[(v11 / 0x5F5E100) / 0xF4240]);
  *((_WORD *)v12 + 1) = word_100061120[(unsigned __int16)((v11 / 0x5F5E100) / 0x2710) % 0x64u];
  *((_WORD *)v12 + 2) = word_100061120[v19];
  v12[6] = word_100061120[v20];
  v12[7] = *((_BYTE *)word_100061120 + ((unsigned __int16)(v20 * 2) & 0xFFFE) + 1);
  v12[8] = word_100061120[v17 / 0xF4240];
  v12[9] = HIBYTE(word_100061120[v17 / 0xF4240]);
  *((_WORD *)v12 + 5) = word_100061120[(unsigned __int16)(v17 / 0x2710) % 0x64u];
  *((_WORD *)v12 + 6) = word_100061120[v17 % 0x2710 / 0x64];
  v12[14] = word_100061120[v17 % 0x2710 % 0x64];
  int v13 = v12 + 16;
  v12[15] = *((_BYTE *)word_100061120 + (unsigned __int16)(2 * (v17 % 0x2710 % 0x64)) + 1);
  return v13;
}

    v5 += 2;
    if (v5 == a2) {
      return a2;
    }
  }

  if (v5 == a2) {
    return a2;
  }
  int v13 = v5 + 2;
  if (v5 + 2 != a2)
  {
    unsigned int v14 = v5;
    while (1)
    {
      uint64_t v15 = v5;
      uint64_t v5 = v13;
      char v16 = *((unsigned __int8 *)v15 + 55);
      if ((v16 & 0x80u) == 0LL) {
        unsigned int v17 = *((unsigned __int8 *)v15 + 55);
      }
      else {
        unsigned int v17 = *((void *)v15 + 5);
      }
      unsigned int v18 = *(unsigned __int8 *)(a3 + 143);
      unsigned int v19 = (char)v18;
      if ((v18 & 0x80u) != 0LL) {
        unsigned int v18 = *(void *)(a3 + 128);
      }
      if (v17 != v18) {
        goto LABEL_43;
      }
      uint64_t v20 = v19 >= 0 ? v7 : (const void **)*v7;
      if ((v16 & 0x80) == 0) {
        break;
      }
LABEL_43:
      int v13 = v5 + 2;
      if (v5 + 2 == a2) {
        return v14;
      }
    }

    if (*((_BYTE *)v15 + 55))
    {
      unsigned int v21 = 0LL;
      while (*((unsigned __int8 *)v5 + v21) == *((unsigned __int8 *)v20 + v21))
      {
        if (v16 == ++v21) {
          goto LABEL_40;
        }
      }

      goto LABEL_43;
    }

uint64_t sub_100014244(uint64_t *a1, int a2)
{
  unsigned int v3 = (void *)*a1;
  uint64_t v4 = v3[4] - v3[3];
  if (!a2)
  {
    if (v4 <= 4)
    {
      sub_1000073C0(v3, 5LL);
      unsigned int v3 = (void *)*a1;
    }

    *(_BYTE *)sub_100007384((uint64_t)v3, 1LL) = 102;
    char v5 = 115;
    char v6 = 108;
    char v7 = 97;
    goto LABEL_7;
  }

  if (v4 <= 3)
  {
    sub_1000073C0(v3, 4LL);
    char v5 = 117;
    char v6 = 114;
    char v7 = 116;
LABEL_7:
    unsigned int v3 = (void *)*a1;
    goto LABEL_8;
  }

  char v5 = 117;
  char v6 = 114;
  char v7 = 116;
LABEL_8:
  *(_BYTE *)sub_100007384((uint64_t)v3, 1LL) = v7;
  *(_BYTE *)sub_100007384(*a1, 1LL) = v6;
  *(_BYTE *)sub_100007384(*a1, 1LL) = v5;
  *(_BYTE *)sub_100007384(*a1, 1LL) = 101;
  return 1LL;
}

void sub_100014324(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
}

void sub_10001432C(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
}

void sub_100014334(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_10001433C(uint64_t a1)
{
  uint64_t v2 = siri::dialogengine::OptionExists(a1, __p);
  uint64_t v4 = v2;
  if (v10 < 0)
  {
    operator delete(__p[0]);
    if ((_DWORD)v4) {
      goto LABEL_3;
    }
LABEL_5:
    siri::dialogengine::Log::SetLogDebugMessages(0LL, v3);
    siri::dialogengine::Log::SetOutputToStdout(0LL, v7);
    return v4;
  }

  if (!(_DWORD)v2) {
    goto LABEL_5;
  }
LABEL_3:
  siri::dialogengine::Log::SetLogDebugMessages((siri::dialogengine::Log *)1, v3);
  siri::dialogengine::Log::SetOutputToStdout((siri::dialogengine::Log *)1, v5);
  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Activate debug mode", v6);
  return v4;
}

void sub_1000143CC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000143E8(uint64_t a1)
{
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_10001445C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100014490(uint64_t a1, siri::dialogengine::VisualComponentsCombination **a2, void **a3)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + std::ostream::~ostream(v1, v2 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  sub_1000289A0((char *)a1, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  if (!*a2) {
    goto LABEL_6;
  }
  int Type = siri::dialogengine::VisualComponentsCombination::GetType(*a2);
  switch(Type)
  {
    case 3:
      sub_100014A88((void *)(a1 + 24), (uint64_t *)a2);
      break;
    case 2:
      sub_100014854(a1);
      break;
    case 1:
      sub_100014620(a1);
      break;
    default:
LABEL_6:
      sub_100014B00(a1);
      break;
  }

  siri::dialogengine::VisualComponentsCombination::GetEntries(*(siri::dialogengine::VisualComponentsCombination **)(a1 + 24));
  char v6 = (siri::dialogengine::VisualComponentsCombination::Entry **)v15[0];
  BOOL v7 = (siri::dialogengine::VisualComponentsCombination::Entry **)v15[1];
  while (v6 != v7)
  {
    uint64_t v8 = v6[1];
    v14[0] = *v6;
    v14[1] = v8;
    if (v8)
    {
      unint64_t v9 = (unint64_t *)((char *)v8 + 8);
      do
        unint64_t v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }

    *(void *)(a1 + 40) += sub_100014CA8(v14);
    if (v8)
    {
      unint64_t v11 = (unint64_t *)((char *)v8 + 8);
      do
        unint64_t v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        (*(void (**)(siri::dialogengine::VisualComponentsCombination::Entry *))(*(void *)v8 + 16LL))(v8);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v8);
      }
    }

    v6 += 2;
  }

  char v16 = (void **)v15;
  sub_100007BFC(&v16);
  return a1;
}

void sub_1000145DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

void sub_100014620(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  *((void *)v2 + 1) = 0LL;
  *((void *)v2 + 2) = 0LL;
  *(void *)uint64_t v2 = off_100078F00;
  *(_OWORD *)(v2 + 40) = 0u;
  __p[1] = v2;
  *(_OWORD *)(v2 + 24) = 0u;
  __p[0] = v2 + 24;
  char v3 = (void *)(a1 + 24);
  sub_1000153D8(a1 + 24, (__int128 *)__p);
  uint64_t v4 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    char v5 = (unint64_t *)((char *)__p[1] + 8);
    do
      unint64_t v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  siri::dialogengine::VisualComponentsCombination::SetType(*v3, 3LL);
  BOOL v7 = (char *)operator new(0x50uLL);
  *((void *)v7 + 1) = 0LL;
  *((void *)v7 + 2) = 0LL;
  *(void *)BOOL v7 = off_100078F50;
  *(_OWORD *)(v7 + 40) = 0u;
  *(_OWORD *)(v7 + 56) = 0u;
  *((void *)v7 + 9) = 0LL;
  unsigned int v23 = (std::__shared_weak_count *)v7;
  *(_OWORD *)(v7 + 24) = 0u;
  int v22 = v7 + 24;
  ((void (*)(void))siri::dialogengine::VisualComponentsCombination::Entry::SetType)();
  uint64_t v8 = *(siri::dialogengine::PatternSchemaComponent ***)a1;
  unint64_t v9 = *(siri::dialogengine::PatternSchemaComponent ***)(a1 + 8);
  while (v8 != v9)
  {
    unint64_t v10 = (char *)operator new(0x50uLL);
    *((void *)v10 + 1) = 0LL;
    *((void *)v10 + 2) = 0LL;
    *(void *)unint64_t v10 = off_100078F50;
    *(_OWORD *)(v10 + 40) = 0u;
    *(_OWORD *)(v10 + 56) = 0u;
    *((void *)v10 + 9) = 0LL;
    *(_OWORD *)(v10 + 24) = 0u;
    uint64_t v20 = v10 + 24;
    unsigned int v21 = (std::__shared_weak_count *)v10;
    siri::dialogengine::VisualComponentsCombination::Entry::SetType(v10 + 24, 4LL);
    unint64_t v11 = v20;
    siri::dialogengine::PatternSchemaComponent::GetName(*v8);
    siri::dialogengine::VisualComponentsCombination::Entry::SetComponentName(v11, __p);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    siri::dialogengine::VisualComponentsCombination::Entry::AddChild(v22, &v20);
    unint64_t v12 = v21;
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        unint64_t v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }

    v8 += 2;
  }

  siri::dialogengine::VisualComponentsCombination::AddEntry(*v3, &v22);
  uint64_t v15 = v23;
  if (v23)
  {
    char v16 = (unint64_t *)&v23->__shared_owners_;
    do
      unint64_t v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

void sub_100014810( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
}

void sub_100014854(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  *((void *)v2 + 1) = 0LL;
  *((void *)v2 + 2) = 0LL;
  *(void *)uint64_t v2 = off_100078F00;
  *(_OWORD *)(v2 + 40) = 0u;
  __p[1] = v2;
  *(_OWORD *)(v2 + 24) = 0u;
  __p[0] = v2 + 24;
  char v3 = (void *)(a1 + 24);
  sub_1000153D8(a1 + 24, (__int128 *)__p);
  uint64_t v4 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    char v5 = (unint64_t *)((char *)__p[1] + 8);
    do
      unint64_t v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  siri::dialogengine::VisualComponentsCombination::SetType(*v3, 3LL);
  BOOL v7 = (char *)operator new(0x50uLL);
  *((void *)v7 + 1) = 0LL;
  *((void *)v7 + 2) = 0LL;
  *(void *)BOOL v7 = off_100078F50;
  *(_OWORD *)(v7 + 40) = 0u;
  *(_OWORD *)(v7 + 56) = 0u;
  *((void *)v7 + 9) = 0LL;
  unsigned int v23 = (std::__shared_weak_count *)v7;
  *(_OWORD *)(v7 + 24) = 0u;
  int v22 = v7 + 24;
  siri::dialogengine::VisualComponentsCombination::Entry::SetType(v7 + 24, 2LL);
  uint64_t v8 = *(siri::dialogengine::PatternSchemaComponent ***)a1;
  unint64_t v9 = *(siri::dialogengine::PatternSchemaComponent ***)(a1 + 8);
  while (v8 != v9)
  {
    unint64_t v10 = (char *)operator new(0x50uLL);
    *((void *)v10 + 1) = 0LL;
    *((void *)v10 + 2) = 0LL;
    *(void *)unint64_t v10 = off_100078F50;
    *(_OWORD *)(v10 + 40) = 0u;
    *(_OWORD *)(v10 + 56) = 0u;
    *((void *)v10 + 9) = 0LL;
    *(_OWORD *)(v10 + 24) = 0u;
    uint64_t v20 = v10 + 24;
    unsigned int v21 = (std::__shared_weak_count *)v10;
    siri::dialogengine::VisualComponentsCombination::Entry::SetType(v10 + 24, 4LL);
    unint64_t v11 = v20;
    siri::dialogengine::PatternSchemaComponent::GetName(*v8);
    siri::dialogengine::VisualComponentsCombination::Entry::SetComponentName(v11, __p);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    siri::dialogengine::VisualComponentsCombination::Entry::AddChild(v22, &v20);
    unint64_t v12 = v21;
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        unint64_t v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }

    v8 += 2;
  }

  siri::dialogengine::VisualComponentsCombination::AddEntry(*v3, &v22);
  uint64_t v15 = v23;
  if (v23)
  {
    char v16 = (unint64_t *)&v23->__shared_owners_;
    do
      unint64_t v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

void sub_100014A44( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
}

void *sub_100014A88(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3)
  {
    char v5 = (unint64_t *)(v3 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  BOOL v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

  return a1;
}

void sub_100014B00(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  *((void *)v2 + 1) = 0LL;
  *((void *)v2 + 2) = 0LL;
  *(void *)uint64_t v2 = off_100078F00;
  *(_OWORD *)(v2 + 40) = 0u;
  __p[1] = v2;
  *(_OWORD *)(v2 + 24) = 0u;
  __p[0] = v2 + 24;
  uint64_t v3 = (void *)(a1 + 24);
  sub_1000153D8(a1 + 24, (__int128 *)__p);
  uint64_t v4 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    char v5 = (unint64_t *)((char *)__p[1] + 8);
    do
      unint64_t v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  siri::dialogengine::VisualComponentsCombination::SetType(*(void *)(a1 + 24), 3LL);
  BOOL v7 = *(siri::dialogengine::PatternSchemaComponent ***)a1;
  uint64_t v8 = *(siri::dialogengine::PatternSchemaComponent ***)(a1 + 8);
  if (*(siri::dialogengine::PatternSchemaComponent ***)a1 != v8)
  {
    do
    {
      unint64_t v9 = (char *)operator new(0x50uLL);
      *((void *)v9 + 1) = 0LL;
      *((void *)v9 + 2) = 0LL;
      *(void *)unint64_t v9 = off_100078F50;
      *(_OWORD *)(v9 + 40) = 0u;
      *(_OWORD *)(v9 + 56) = 0u;
      *((void *)v9 + 9) = 0LL;
      unint64_t v17 = (std::__shared_weak_count *)v9;
      *(_OWORD *)(v9 + 24) = 0u;
      char v16 = v9 + 24;
      siri::dialogengine::VisualComponentsCombination::Entry::SetType(v9 + 24, 4LL);
      unint64_t v10 = v16;
      siri::dialogengine::PatternSchemaComponent::GetName(*v7);
      siri::dialogengine::VisualComponentsCombination::Entry::SetComponentName(v10, __p);
      if (v15 < 0) {
        operator delete(__p[0]);
      }
      siri::dialogengine::VisualComponentsCombination::AddEntry(*v3, &v16);
      unint64_t v11 = v17;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          unint64_t v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }

      v7 += 2;
    }

    while (v7 != v8);
  }

void sub_100014C78( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1000059D0((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_100014CA8(siri::dialogengine::VisualComponentsCombination::Entry **a1)
{
  uint64_t v2 = *a1;
  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = siri::dialogengine::VisualComponentsCombination::Entry::GetType(v2) == 4;
  siri::dialogengine::VisualComponentsCombination::Entry::GetChildren(*a1);
  uint64_t v4 = (void *)v14[0];
  char v5 = (void *)v14[1];
  while (v4 != v5)
  {
    unint64_t v6 = (std::__shared_weak_count *)v4[1];
    v13[0] = *v4;
    v13[1] = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        unint64_t v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }

    uint64_t v9 = sub_100014CA8(v13);
    if (v6)
    {
      unint64_t v10 = (unint64_t *)&v6->__shared_owners_;
      do
        unint64_t v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }

    v3 += v9;
    v4 += 2;
  }

  char v15 = (void **)v14;
  sub_100007BFC(&v15);
  return v3;
}

void sub_100014D90( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a11;
  sub_100007BFC(&a14);
  _Unwind_Resume(a1);
}

unint64_t sub_100014DB4(uint64_t a1)
{
  unint64_t v1 = v12;
  uint64_t v2 = v13;
  if (v12 == v13)
  {
    unint64_t v3 = 0LL;
  }

  else
  {
    unint64_t v3 = 0LL;
    do
    {
      uint64_t v4 = v1[1];
      v11[0] = *v1;
      v11[1] = v4;
      if (v4)
      {
        char v5 = (unint64_t *)((char *)v4 + 8);
        do
          unint64_t v6 = __ldxr(v5);
        while (__stxr(v6 + 1, v5));
      }

      unint64_t v7 = sub_100014EB0(v11);
      if (v3 <= v7) {
        unint64_t v3 = v7;
      }
      if (v4)
      {
        unint64_t v8 = (unint64_t *)((char *)v4 + 8);
        do
          unint64_t v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          (*(void (**)(siri::dialogengine::VisualComponentsCombination::Entry *))(*(void *)v4 + 16LL))(v4);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
        }
      }

      v1 += 2;
    }

    while (v1 != v2);
  }

  unint64_t v14 = &v12;
  sub_100007BFC((void ***)&v14);
  return v3;
}

void sub_100014E8C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a11;
  sub_100007BFC(&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_100014EB0(siri::dialogengine::VisualComponentsCombination::Entry **a1)
{
  unint64_t v1 = v13;
  uint64_t v2 = v14;
  if (v13 == v14)
  {
    uint64_t v10 = 1LL;
  }

  else
  {
    unint64_t v3 = 0LL;
    do
    {
      uint64_t v4 = (std::__shared_weak_count *)v1[1];
      v12[0] = *v1;
      v12[1] = v4;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          unint64_t v6 = __ldxr(p_shared_owners);
        while (__stxr(v6 + 1, p_shared_owners));
      }

      unint64_t v7 = sub_100014EB0(v12);
      if (v3 <= v7) {
        unint64_t v3 = v7;
      }
      if (v4)
      {
        unint64_t v8 = (unint64_t *)&v4->__shared_owners_;
        do
          unint64_t v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }

      v1 += 2;
    }

    while (v1 != v2);
    uint64_t v10 = v3 + 1;
  }

  char v15 = (void **)&v13;
  sub_100007BFC(&v15);
  return v10;
}

void sub_100014F8C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a11;
  sub_100007BFC(&a14);
  _Unwind_Resume(a1);
}

void sub_100014FB0(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0LL;
  a3[1] = 0LL;
  a3[2] = 0LL;
  unint64_t v17 = 0LL;
  siri::dialogengine::VisualComponentsCombination::GetEntries(*(siri::dialogengine::VisualComponentsCombination **)(a1 + 24));
  char v5 = (uint64_t *)v16[0];
  unint64_t v6 = (uint64_t *)v16[1];
  while (v5 != v6)
  {
    uint64_t v7 = v5[1];
    uint64_t v14 = *v5;
    char v15 = (std::__shared_weak_count *)v7;
    if (v7)
    {
      unint64_t v8 = (unint64_t *)(v7 + 8);
      do
        unint64_t v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }

    char v10 = sub_1000150D4(&v14, a2, &v17, 1LL, a3);
    unint64_t v11 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        unint64_t v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }

    if ((v10 & 1) != 0) {
      break;
    }
    v5 += 2;
  }

  unsigned int v18 = (void **)v16;
  sub_100007BFC(&v18);
}

void sub_10001509C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_1000150D4(uint64_t *a1, unint64_t a2, unint64_t *a3, uint64_t a4, void *a5)
{
  uint64_t v25 = a4;
  uint64_t result = *a1;
  if (result)
  {
    if (*a3 == a2)
    {
      unint64_t v10 = a5[1];
      if (v10 >= a5[2])
      {
        uint64_t v11 = sub_100028BA8(a5, a1, &v25);
      }

      else
      {
        sub_100028CC4((uint64_t)(a5 + 2), (void *)a5[1], a1, &v25);
        uint64_t v11 = v10 + 24;
        a5[1] = v10 + 24;
      }

      a5[1] = v11;
      uint64_t result = *a1;
    }

    if (siri::dialogengine::VisualComponentsCombination::Entry::GetType((siri::dialogengine::VisualComponentsCombination::Entry *)result) == 4)
    {
      unint64_t v12 = *a3 + 1;
      *a3 = v12;
      if (v12 <= a2) {
        return 0LL;
      }
    }

    else
    {
      siri::dialogengine::VisualComponentsCombination::Entry::GetChildren((siri::dialogengine::VisualComponentsCombination::Entry *)*a1);
      unint64_t v13 = (uint64_t *)v24[0];
      uint64_t v14 = (uint64_t *)v24[1];
      while (1)
      {
        if (v13 == v14)
        {
          unint64_t v26 = (void **)v24;
          sub_100007BFC(&v26);
          return 0LL;
        }

        char v15 = (std::__shared_weak_count *)v13[1];
        uint64_t v22 = *v13;
        unsigned int v23 = v15;
        if (v15)
        {
          p_shared_owners = (unint64_t *)&v15->__shared_owners_;
          do
            unint64_t v17 = __ldxr(p_shared_owners);
          while (__stxr(v17 + 1, p_shared_owners));
        }

        char v18 = sub_1000150D4(&v22, a2, a3, v25 + 1, a5);
        char v19 = v23;
        if (v23)
        {
          uint64_t v20 = (unint64_t *)&v23->__shared_owners_;
          do
            unint64_t v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }

        if ((v18 & 1) != 0) {
          break;
        }
        v13 += 2;
      }

      unint64_t v26 = (void **)v24;
      sub_100007BFC(&v26);
    }

    return 1LL;
  }

  return result;
}

void sub_100015268( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  *(void *)(v16 + std::ostream::~ostream(v1, v2 + 8) = v17;
  _Unwind_Resume(exception_object);
}

void sub_100015298(uint64_t *a1@<X0>, unsigned __int8 **a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  if (*a1 != v6)
  {
    while (1)
    {
      siri::dialogengine::PatternSchemaComponent::GetName(*(siri::dialogengine::PatternSchemaComponent **)v5);
      if ((v20 & 0x80u) == 0) {
        size_t v8 = v20;
      }
      else {
        size_t v8 = __n;
      }
      unint64_t v9 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
      int v10 = (char)v9;
      if ((unsigned __int8 *)v8 == v9)
      {
        if (v10 >= 0) {
          uint64_t v11 = (unsigned __int8 *)a2;
        }
        else {
          uint64_t v11 = *a2;
        }
        if ((v20 & 0x80) != 0)
        {
          unint64_t v13 = __p;
          int v14 = memcmp(__p, v11, __n);
          operator delete(v13);
          if (!v14) {
            break;
          }
          goto LABEL_20;
        }

        if (!v20) {
          break;
        }
        uint64_t v12 = 0LL;
        while (*((unsigned __int8 *)&__p + v12) == v11[v12])
        {
          if (v20 == ++v12) {
            goto LABEL_22;
          }
        }
      }

      if ((v20 & 0x80) != 0) {
        operator delete(__p);
      }
LABEL_20:
      v5 += 16LL;
      if (v5 == v6)
      {
        uint64_t v5 = v6;
        break;
      }
    }
  }

uint64_t sub_1000153D8(uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  *(void *)a2 = 0LL;
  *((void *)a2 + 1) = 0LL;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  return a1;
}

BOOL sub_10001543C(uint64_t *a1, uint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) < 3 || sub_100038648((uint64_t)a1))
  {
    sub_100038638(a2);
    sub_1000021BC(__p, aExecutableComm_3);
    sub_1000021BC(&v141, "pattern");
    sub_1000388C0((uint64_t)a1, (uint64_t)&v141, (uint64_t)__p);
    if (SHIBYTE(v143) < 0) {
      operator delete(v141);
    }
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    return 0LL;
  }

  LODWORD(v141) = 0;
  BYTE4(v141) = 1;
  v142[0] = 0;
  char v144 = 0;
  uint64_t v146 = 0LL;
  uint64_t v147 = 0LL;
  uint64_t v145 = 0LL;
  uint64_t v6 = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) <= 3)
  {
    sub_1000021BC(__p, "Insufficient arguments specified for catutil pattern");
    sub_1000021BC(v123, (char *)&unk_10006A022);
    BOOL v4 = sub_10004953C(&v141, (uint64_t)__p, (const void **)v123, 0LL);
    if ((v123[23] & 0x80000000) != 0) {
      operator delete(*(void **)v123);
    }
    if ((__p[23] & 0x80000000) == 0) {
      goto LABEL_248;
    }
    uint64_t v7 = *(void **)__p;
    goto LABEL_247;
  }

  if (*(char *)(v6 + 71) < 0)
  {
    sub_10000231C(&__dst, *(void **)(v6 + 48), *(void *)(v6 + 56));
  }

  else
  {
    __int128 __dst = *(_OWORD *)(v6 + 48);
    uint64_t v140 = *(void *)(v6 + 64);
  }

  if (SHIBYTE(v140) < 0)
  {
    uint64_t v8 = *((void *)&__dst + 1);
    if (*((void *)&__dst + 1) == 7LL)
    {
      if (*(_DWORD *)__dst == 1667594341 && *(_DWORD *)(__dst + 3) == 1702131043) {
        goto LABEL_141;
      }
      uint64_t v8 = *((void *)&__dst + 1);
    }

    else if (*((void *)&__dst + 1) == 8LL && *(void *)__dst == 0x65746164696C6176LL)
    {
      goto LABEL_125;
    }

    if (v8 != 6) {
      goto LABEL_44;
    }
    p_dst = (__int128 *)__dst;
  }

  else
  {
    if (HIBYTE(v140) != 6)
    {
      if (HIBYTE(v140) != 7)
      {
        if (HIBYTE(v140) == 8 && (void)__dst == 0x65746164696C6176LL)
        {
LABEL_125:
          sub_1000021BC(&v136, "--templateDir");
          siri::dialogengine::GetOption(v123, a1, &v136);
          siri::dialogengine::ExpandPath(__p, v123);
          if ((v123[23] & 0x80000000) != 0) {
            operator delete(*(void **)v123);
          }
          sub_1000021BC(&v136, "--patternId");
          siri::dialogengine::GetOption(v123, a1, &v136);
          sub_1000021BC(&v136, "--xcode");
          BOOL v39 = (const char *)siri::dialogengine::OptionExists(a1, &v136);
          sub_100049460((uint64_t)&v141, v39);
          uint64_t v40 = __p[23];
          if (__p[23] < 0) {
            uint64_t v40 = *(void *)&__p[8];
          }
          if (v40)
          {
            uint64_t v41 = v123[23];
            if (v123[23] < 0) {
              uint64_t v41 = *(void *)&v123[8];
            }
            if (!v41)
            {
              sub_1000021BC(v132, "pattern");
              siri::dialogengine::JoinPath(&v134, __p, v132);
              siri::dialogengine::ListDirRecursively(&v136, &v134);
              if (SHIBYTE(v135) < 0) {
                operator delete((void *)v134);
              }
              int v54 = v136;
              for (int i = v137; v54 != i; v54 += 3)
              {
                if (*((char *)v54 + 23) < 0)
                {
                  sub_10000231C(&v134, *v54, (unint64_t)v54[1]);
                }

                else
                {
                  __int128 v56 = *(_OWORD *)v54;
                  char v135 = v54[2];
                  __int128 v134 = v56;
                }

                if (siri::dialogengine::HasPatternExtension(&v134, 2LL))
                {
                  std::operator+<char>(v132, "=== Validate Pattern: ", &v134);
                  sub_100049948(&v141, (uint64_t)v132);
                  siri::dialogengine::CatPathToId(v132, &v134);
                  sub_100017788(&v141, (uint64_t)__p, (uint64_t)v132);
                }

                if (SHIBYTE(v135) < 0) {
                  operator delete((void *)v134);
                }
              }

              BOOL v4 = sub_1000499CC((uint64_t)&v141);
              *(void *)&__int128 v134 = &v136;
              sub_1000027F4((void ***)&v134);
              goto LABEL_240;
            }

            BOOL v29 = sub_100017788(&v141, (uint64_t)__p, (uint64_t)v123);
            goto LABEL_140;
          }

          sub_1000021BC(&v136, "--templateDir required for catutil pattern validate");
          sub_1000021BC(&v134, (char *)&unk_10006A022);
          uint64_t v18 = sub_10004953C(&v141, (uint64_t)&v136, (const void **)&v134, 0LL);
          goto LABEL_234;
        }

LABEL_44:
        if (sub_1000176F8(&__dst, "create"))
        {
          sub_1000021BC(v123, "--schema");
          siri::dialogengine::GetOption(__p, a1, v123);
          if ((v123[23] & 0x80000000) != 0) {
            operator delete(*(void **)v123);
          }
          sub_1000021BC(&v134, "--templateDir");
          siri::dialogengine::GetOption(&v136, a1, &v134);
          siri::dialogengine::ExpandPath(v123, &v136);
          if (SHIBYTE(v135) < 0) {
            operator delete((void *)v134);
          }
          sub_1000021BC(&v134, "--patternId");
          siri::dialogengine::GetOption(&v136, a1, &v134);
          if (SHIBYTE(v135) < 0) {
            operator delete((void *)v134);
          }
          sub_1000021BC(v130, "--schemaTemplateDir");
          siri::dialogengine::GetOption(v132, a1, v130);
          siri::dialogengine::ExpandPath(&v134, v132);
          uint64_t v15 = __p[23];
          if (__p[23] < 0) {
            uint64_t v15 = *(void *)&__p[8];
          }
          if (v15)
          {
            uint64_t v16 = v123[23];
            if (v123[23] < 0) {
              uint64_t v16 = *(void *)&v123[8];
            }
            if (v16)
            {
              unint64_t v17 = (void **)v138;
              if ((v138 & 0x80u) != 0) {
                unint64_t v17 = v137;
              }
              if (v17)
              {
                uint64_t v18 = sub_10001DFD0(&v141, (uint64_t)__p, (uint64_t)v123, (uint64_t)&v136, (uint64_t)&v134);
LABEL_234:
                BOOL v4 = v18;
LABEL_235:
                if (SHIBYTE(v135) < 0) {
                  operator delete((void *)v134);
                }
                int v58 = v136;
                goto LABEL_239;
              }

              sub_1000021BC(v132, "--patternId required for catutil pattern create");
              sub_1000021BC(v130, (char *)&unk_10006A022);
              BOOL v49 = sub_10004953C(&v141, (uint64_t)v132, (const void **)v130, 0LL);
            }

            else
            {
              sub_1000021BC(v132, "--templateDir required for catutil pattern create");
              sub_1000021BC(v130, (char *)&unk_10006A022);
              BOOL v49 = sub_10004953C(&v141, (uint64_t)v132, (const void **)v130, 0LL);
            }
          }

          else
          {
            sub_1000021BC(v132, "--schema required for catutil pattern create");
            sub_1000021BC(v130, (char *)&unk_10006A022);
            BOOL v49 = sub_10004953C(&v141, (uint64_t)v132, (const void **)v130, 0LL);
          }

          BOOL v4 = v49;
          goto LABEL_235;
        }

        if (sub_1000176F8(&__dst, "params"))
        {
          sub_1000021BC(&v136, "--templateDir");
          siri::dialogengine::GetOption(v123, a1, &v136);
          siri::dialogengine::ExpandPath(__p, v123);
          if ((v123[23] & 0x80000000) != 0) {
            operator delete(*(void **)v123);
          }
          sub_1000021BC(&v136, "--patternId");
          siri::dialogengine::GetOption(v123, a1, &v136);
          sub_1000021BC(&v136, "--excludeComputed");
          unsigned int v19 = siri::dialogengine::OptionExists(a1, &v136);
          sub_1000021BC(&v136, "--includeComputed");
          int v20 = siri::dialogengine::OptionExists(a1, &v136);
          sub_1000021BC(&v136, "--includeSettings");
          uint64_t v21 = siri::dialogengine::OptionExists(a1, &v136);
          sub_1000021BC(&v136, "--includeValueFromCat");
          uint64_t v22 = siri::dialogengine::OptionExists(a1, &v136);
          sub_1000021BC(&v136, "--json");
          int v23 = siri::dialogengine::OptionExists(a1, &v136);
          sub_1000021BC(&v136, "--xml");
          int v24 = siri::dialogengine::OptionExists(a1, &v136);
          if (v24) {
            int v25 = 2;
          }
          else {
            int v25 = v23;
          }
          uint64_t v26 = __p[23];
          if (__p[23] < 0) {
            uint64_t v26 = *(void *)&__p[8];
          }
          if (!v26)
          {
            sub_1000021BC(&v136, "--templateDir required for catutil pattern params");
            sub_1000021BC(&v134, (char *)&unk_10006A022);
            uint64_t v18 = sub_10004953C(&v141, (uint64_t)&v136, (const void **)&v134, 0LL);
            goto LABEL_234;
          }

          uint64_t v27 = v123[23];
          if (v123[23] < 0) {
            uint64_t v27 = *(void *)&v123[8];
          }
          if (!v27)
          {
            sub_1000021BC(&v136, "--patternId required for catutil pattern params");
            sub_1000021BC(&v134, (char *)&unk_10006A022);
            uint64_t v18 = sub_10004953C(&v141, (uint64_t)&v136, (const void **)&v134, 0LL);
            goto LABEL_234;
          }

          if (v20) {
            uint64_t v28 = 2LL;
          }
          else {
            uint64_t v28 = v19;
          }
          BOOL v29 = sub_10001FF78(&v141, (uint64_t)__p, (uint64_t)v123, v28, v21, v22, v25);
        }

        else
        {
          sub_1000021BC(__p, "Unsupported sub-command for catutil pattern");
          sub_1000021BC(v123, (char *)&unk_10006A022);
          BOOL v29 = sub_10004953C(&v141, (uint64_t)__p, (const void **)v123, 0LL);
        }

LABEL_140:
        BOOL v4 = v29;
        goto LABEL_240;
      }

LABEL_141:
      sub_1000021BC(v123, "--templateDir");
      siri::dialogengine::GetOption(__p, a1, v123);
      siri::dialogengine::ExpandPath(&v136, __p);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      if ((v123[23] & 0x80000000) != 0) {
        operator delete(*(void **)v123);
      }
      sub_1000021BC(__p, "--patternId");
      siri::dialogengine::GetOption(&v134, a1, __p);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      sub_1000021BC(__p, "--locale");
      siri::dialogengine::GetOption(v132, a1, __p);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      sub_1000021BC(v123, "--params");
      siri::dialogengine::GetMultipleOptions(__p, a1, v123);
      sub_1000021BC(v128, " ");
      siri::dialogengine::StringJoin(v130, __p, v128);
      v128[0] = __p;
      sub_1000027F4((void ***)v128);
      if ((v123[23] & 0x80000000) != 0) {
        operator delete(*(void **)v123);
      }
      sub_1000021BC(__p, "--mode");
      siri::dialogengine::GetOption(v128, a1, __p);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      sub_1000021BC(__p, "--debug");
      int v42 = siri::dialogengine::OptionExists(a1, __p);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      uint64_t v43 = (void **)v138;
      if ((v138 & 0x80u) != 0) {
        uint64_t v43 = v137;
      }
      if (v43)
      {
        uint64_t v44 = HIBYTE(v135);
        if (SHIBYTE(v135) < 0) {
          uint64_t v44 = *((void *)&v134 + 1);
        }
        if (v44)
        {
          unint64_t v45 = v133;
          if ((v133 & 0x80u) != 0) {
            unint64_t v45 = (unint64_t)v132[1];
          }
          if (v45)
          {
            if (sub_100017F20(v128, "voiceOnly")
              && sub_100017F20(v128, "voiceForward")
              && sub_100017F20(v128, "displayForward")
              && sub_100017F20(v128, "displayOnly")
              && sub_100017F20(v128, (char *)&unk_10006A022))
            {
              std::operator+<char>(v123, "mode argument '", v128);
              uint64_t v46 = std::string::append((std::string *)v123, "' not recognized");
              __int128 v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
              *(void *)&__p[16] = v46->__r_.__value_.__l.__cap_;
              *(_OWORD *)std::string __p = v47;
              v46->__r_.__value_.__l.__size_ = 0LL;
              v46->__r_.__value_.__l.__cap_ = 0LL;
              v46->__r_.__value_.__r.__words[0] = 0LL;
              sub_1000021BC(v126, (char *)&unk_10006A022);
              BOOL v4 = sub_10004953C(&v141, (uint64_t)__p, (const void **)v126, 0LL);
              if (v127 < 0) {
                operator delete(v126[0]);
              }
              if ((__p[23] & 0x80000000) != 0) {
                operator delete(*(void **)__p);
              }
              if ((v123[23] & 0x80000000) == 0) {
                goto LABEL_406;
              }
              unint64_t v48 = *(void **)v123;
              goto LABEL_405;
            }

            sub_1000021BC(__p, "--renderVisualCat");
            siri::dialogengine::GetOption(v126, a1, __p);
            if ((__p[23] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
            sub_1000021BC(__p, "--renderVisualCat");
            if (siri::dialogengine::OptionExists(a1, __p))
            {
              BOOL v57 = sub_1000176F8(v126, (char *)&unk_10006A022);
              if ((__p[23] & 0x80000000) != 0) {
                operator delete(*(void **)__p);
              }
              if (v57)
              {
                sub_1000021BC(__p, "--localeNo path given for rendered output");
                sub_1000021BC(v123, (char *)&unk_10006A022);
                BOOL v4 = sub_10004953C(&v141, (uint64_t)__p, (const void **)v123, 0LL);
                if ((v123[23] & 0x80000000) != 0) {
                  operator delete(*(void **)v123);
                }
                if ((__p[23] & 0x80000000) != 0) {
                  operator delete(*(void **)__p);
                }
LABEL_403:
                if ((v127 & 0x80000000) == 0)
                {
LABEL_406:
                  if (SHIBYTE(v135) < 0) {
                    operator delete((void *)v134);
                  }
                  __int128 v59 = v136;
                  goto LABEL_244;
                }

                unint64_t v48 = v126[0];
LABEL_405:
                operator delete(v48);
                goto LABEL_406;
              }
            }

            else if ((__p[23] & 0x80000000) != 0)
            {
              operator delete(*(void **)__p);
            }

            sub_1000021BC(__p, "--debug");
            int v61 = siri::dialogengine::OptionExists(a1, __p);
            if ((__p[23] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
            if (v61)
            {
              siri::dialogengine::Log::SetOutputToStdout((siri::dialogengine::Log *)1, v60);
              siri::dialogengine::Log::SetLogDebugMessages((siri::dialogengine::Log *)1, v62);
            }

            else
            {
              siri::dialogengine::Log::SetOutputToStdout(0LL, v60);
            }

            memset(v123, 0, sizeof(v123));
            uint64_t v124 = 0LL;
            uint64_t v125 = 256LL;
            *(_OWORD *)&__p[8] = 0u;
            __int128 v117 = 0u;
            *(void *)std::string __p = v123;
            uint64_t v118 = 0LL;
            uint64_t v119 = 512LL;
            int v120 = 324;
            __int16 v121 = 0x2000;
            uint64_t v122 = 4LL;
            sub_10000FF78((void **)__p, v63, v64);
            sub_10000FFC8((uint64_t *)__p, "templateDir");
            if ((v138 & 0x80u) == 0) {
              uint64_t v65 = (char *)&v136;
            }
            else {
              uint64_t v65 = (char *)v136;
            }
            sub_10000FFC8((uint64_t *)__p, v65);
            sub_10000FFC8((uint64_t *)__p, "patternId");
            if (SHIBYTE(v135) >= 0) {
              uint64_t v66 = (char *)&v134;
            }
            else {
              uint64_t v66 = (char *)v134;
            }
            sub_10000FFC8((uint64_t *)__p, v66);
            sub_10000FFC8((uint64_t *)__p, "locale");
            if ((v133 & 0x80u) == 0) {
              __int128 v67 = (char *)v132;
            }
            else {
              __int128 v67 = (char *)v132[0];
            }
            sub_10000FFC8((uint64_t *)__p, v67);
            unint64_t v68 = v131;
            if ((v131 & 0x80u) != 0) {
              unint64_t v68 = (unint64_t)v130[1];
            }
            if (v68)
            {
              sub_10000FFC8((uint64_t *)__p, "parameters");
              sub_10000FFC8((uint64_t *)__p, "<PARAMS>");
            }

            unint64_t v69 = v129;
            if ((v129 & 0x80u) != 0) {
              unint64_t v69 = (unint64_t)v128[1];
            }
            if (v69)
            {
              sub_10000FFC8((uint64_t *)__p, "responseMode");
              if ((v129 & 0x80u) == 0) {
                __int128 v70 = (char *)v128;
              }
              else {
                __int128 v70 = (char *)v128[0];
              }
              sub_10000FFC8((uint64_t *)__p, v70);
            }

            if (v42)
            {
              sub_10000FFC8((uint64_t *)__p, "debug");
              sub_100012B4C((void **)__p, 2LL, v71);
              sub_100014244((uint64_t *)__p, 1);
            }

            sub_10000FFC8((uint64_t *)__p, "renderVisualCat");
            if (v127 >= 0) {
              std::string v73 = (char *)v126;
            }
            else {
              std::string v73 = (char *)v126[0];
            }
            sub_10000FFC8((uint64_t *)__p, v73);
            sub_1000021BC(v114, "--renderDarkMode");
            int v74 = siri::dialogengine::OptionExists(a1, v114);
            if (SHIBYTE(v115) < 0) {
              operator delete(v114[0]);
            }
            if (v74)
            {
              sub_10000FFC8((uint64_t *)__p, "renderDarkMode");
              sub_100012B4C((void **)__p, 2LL, v75);
              sub_100014244((uint64_t *)__p, 1);
            }

            sub_1000021BC(&v112, "--renderDeviceClass");
            siri::dialogengine::GetOption(v114, a1, &v112);
            if (SHIBYTE(v113) < 0) {
              operator delete((void *)v112);
            }
            sub_1000021BC(&v112, "--renderDeviceClass");
            if (siri::dialogengine::OptionExists(a1, &v112))
            {
              BOOL v76 = sub_100017F20(v114, (char *)&unk_10006A022);
              if (SHIBYTE(v113) < 0) {
                operator delete((void *)v112);
              }
              if (v76)
              {
                sub_10000FFC8((uint64_t *)__p, "renderDeviceClass");
                if (v115 >= 0) {
                  std::string v77 = (char *)v114;
                }
                else {
                  std::string v77 = (char *)v114[0];
                }
                sub_10000FFC8((uint64_t *)__p, v77);
              }
            }

            else if (SHIBYTE(v113) < 0)
            {
              operator delete((void *)v112);
            }

            sub_1000021BC(v110, "--renderDeviceTrain");
            siri::dialogengine::GetOption(&v112, a1, v110);
            if (SHIBYTE(cap) < 0) {
              operator delete(v110[0]);
            }
            sub_1000021BC(v110, "--renderDeviceTrain");
            if (siri::dialogengine::OptionExists(a1, v110))
            {
              BOOL v78 = sub_1000176F8(&v112, (char *)&unk_10006A022);
              if (SHIBYTE(cap) < 0) {
                operator delete(v110[0]);
              }
              if (!v78)
              {
                sub_10000FFC8((uint64_t *)__p, "renderDeviceTrain");
                if (v113 >= 0) {
                  uint64_t v79 = (char *)&v112;
                }
                else {
                  uint64_t v79 = (char *)v112;
                }
                sub_10000FFC8((uint64_t *)__p, v79);
                sub_1000021BC(&v109, "--renderOrientation");
                siri::dialogengine::GetOption(v110, a1, &v109);
                sub_1000021BC(&v109, "--renderOrientation");
                if (siri::dialogengine::OptionExists(a1, &v109))
                {
                  BOOL v80 = sub_100017F20(v110, (char *)&unk_10006A022);
                  if (v80)
                  {
                    sub_10000FFC8((uint64_t *)__p, "renderOrientation");
                    if (cap >= 0) {
                      uint64_t v81 = (char *)v110;
                    }
                    else {
                      uint64_t v81 = (char *)v110[0];
                    }
                    sub_10000FFC8((uint64_t *)__p, v81);
                  }
                }

                else if ((char)v109.__r_.__value_.__s.__size_ < 0)
                {
                  operator delete(v109.__r_.__value_.__l.__data_);
                }

                sub_1000021BC(&v108, "--renderContext");
                siri::dialogengine::GetOption(&v109, a1, &v108);
                sub_1000021BC(&v108, "--renderContext");
                if (siri::dialogengine::OptionExists(a1, &v108))
                {
                  BOOL v83 = sub_100017F20(&v109, (char *)&unk_10006A022);
                  if (v83)
                  {
                    sub_10000FFC8((uint64_t *)__p, "renderContext");
                    if ((v109.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                      __int128 v84 = &v109;
                    }
                    else {
                      __int128 v84 = (std::string *)v109.__r_.__value_.__r.__words[0];
                    }
                    sub_10000FFC8((uint64_t *)__p, (char *)v84);
                  }
                }

                else if ((char)v108.__r_.__value_.__s.__size_ < 0)
                {
                  operator delete(v108.__r_.__value_.__l.__data_);
                }

                sub_1000021BC(v106, "--renderScreenSize");
                siri::dialogengine::GetOption(&v108, a1, v106);
                if (v107 < 0) {
                  operator delete(v106[0]);
                }
                sub_1000021BC(v106, "--renderScreenSize");
                if (siri::dialogengine::OptionExists(a1, v106))
                {
                  BOOL v85 = sub_100017F20(&v108, (char *)&unk_10006A022);
                  if (v107 < 0) {
                    operator delete(v106[0]);
                  }
                  if (v85)
                  {
                    sub_10000FFC8((uint64_t *)__p, "renderScreenSize");
                    if ((v108.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                      uint64_t v86 = &v108;
                    }
                    else {
                      uint64_t v86 = (std::string *)v108.__r_.__value_.__r.__words[0];
                    }
                    sub_10000FFC8((uint64_t *)__p, (char *)v86);
                  }
                }

                else if (v107 < 0)
                {
                  operator delete(v106[0]);
                }

                if (SHIBYTE(cap) < 0) {
                  operator delete(v110[0]);
                }
                if (SHIBYTE(v113) < 0) {
                  operator delete((void *)v112);
                }
                if (SHIBYTE(v115) < 0) {
                  operator delete(v114[0]);
                }
LABEL_363:
                sub_10001007C((void **)__p, 0LL, v72);
                size_t v87 = (char *)sub_10000FF38(v123);
                sub_1000021BC(v114, v87);
                sub_1000021BC(v110, "<PARAMS>");
                siri::dialogengine::StringReplace(&v112, v114, v110, v130, 0LL);
                if (SHIBYTE(v115) < 0) {
                  operator delete(v114[0]);
                }
                *(_OWORD *)__int16 v114 = v112;
                uint64_t v115 = v113;
                HIBYTE(v113) = 0;
                LOBYTE(v112) = 0;
                if (SHIBYTE(cap) < 0) {
                  operator delete(v110[0]);
                }
                if (v115 >= 0) {
                  unsigned __int8 v88 = v114;
                }
                else {
                  unsigned __int8 v88 = (void **)v114[0];
                }
                std::string v89 = (const char *)CATPatternExecute(v88);
                puts(v89);
                if (v89) {
                  std::string v90 = (char *)v89;
                }
                else {
                  std::string v90 = (char *)&unk_10006A022;
                }
                sub_1000021BC(&v112, v90);
                CATFree(v89);
                sub_1000021BC(&v108, "renderVisualCat");
                unsigned int v91 = std::string::insert(&v108, 0LL, "");
                __int128 v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
                v109.__r_.__value_.__l.__cap_ = v91->__r_.__value_.__l.__cap_;
                *(_OWORD *)&v109.__r_.__value_.__l.__data_ = v92;
                v91->__r_.__value_.__l.__size_ = 0LL;
                v91->__r_.__value_.__l.__cap_ = 0LL;
                v91->__r_.__value_.__r.__words[0] = 0LL;
                uint64_t v93 = std::string::append(&v109, ":");
                __int128 v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
                int64_t cap = v93->__r_.__value_.__l.__cap_;
                *(_OWORD *)__int128 v110 = v94;
                v93->__r_.__value_.__l.__size_ = 0LL;
                v93->__r_.__value_.__l.__cap_ = 0LL;
                v93->__r_.__value_.__r.__words[0] = 0LL;
                if (siri::dialogengine::StringContains(v114, v110))
                {
                  sub_1000021BC(v106, "visual: ");
                  if (siri::dialogengine::StringContains(&v112, v106))
                  {
                    sub_1000021BC(v104, "data: ");
                    int v95 = siri::dialogengine::StringContains(&v112, v104);
                    if (v105 < 0) {
                      operator delete(v104[0]);
                    }
                  }

                  else
                  {
                    int v95 = 0;
                  }

                  if (v107 < 0) {
                    operator delete(v106[0]);
                  }
                }

                else
                {
                  int v95 = 0;
                }

                if (SHIBYTE(cap) < 0) {
                  operator delete(v110[0]);
                }
                if (v95)
                {
                  if (SHIBYTE(v115) < 0)
                  {
                    sub_10000231C(v102, v114[0], (unint64_t)v114[1]);
                  }

                  else
                  {
                    *(_OWORD *)char v102 = *(_OWORD *)v114;
                    uint64_t v103 = v115;
                  }

                  if (SHIBYTE(v113) < 0)
                  {
                    sub_10000231C(v100, (void *)v112, *((unint64_t *)&v112 + 1));
                  }

                  else
                  {
                    *(_OWORD *)unsigned __int8 v100 = v112;
                    uint64_t v101 = v113;
                  }

                  sub_100017FB0((uint64_t **)v102, (const char *)v100);
                  if (SHIBYTE(v101) < 0) {
                    operator delete(v100[0]);
                  }
                  if (SHIBYTE(v103) < 0) {
                    operator delete(v102[0]);
                  }
                }

                goto LABEL_398;
              }
            }

            else if (SHIBYTE(cap) < 0)
            {
              operator delete(v110[0]);
            }

            std::string v82 = sub_100002F60(&std::cout, (uint64_t)"Error: no --renderDeviceTrain option specified", 46LL);
            sub_100003ECC(v82);
LABEL_398:
            if (SHIBYTE(v113) < 0) {
              operator delete((void *)v112);
            }
            if (SHIBYTE(v115) < 0) {
              operator delete(v114[0]);
            }
            sub_100005AA8((uint64_t)&__p[8]);
            sub_100005AA8((uint64_t)v123);
            BOOL v4 = 1LL;
            goto LABEL_403;
          }

          sub_1000021BC(__p, "--locale required for catutil pattern execute");
          sub_1000021BC(v123, (char *)&unk_10006A022);
          BOOL v53 = sub_10004953C(&v141, (uint64_t)__p, (const void **)v123, 0LL);
        }

        else
        {
          sub_1000021BC(__p, "--patternId required for catutil pattern execute");
          sub_1000021BC(v123, (char *)&unk_10006A022);
          BOOL v53 = sub_10004953C(&v141, (uint64_t)__p, (const void **)v123, 0LL);
        }
      }

      else
      {
        sub_1000021BC(__p, "--templateDir required for catutil pattern execute");
        sub_1000021BC(v123, (char *)&unk_10006A022);
        BOOL v53 = sub_10004953C(&v141, (uint64_t)__p, (const void **)v123, 0LL);
      }

      BOOL v4 = v53;
      if ((v123[23] & 0x80000000) != 0) {
        operator delete(*(void **)v123);
      }
      if ((__p[23] & 0x80000000) == 0) {
        goto LABEL_406;
      }
      unint64_t v48 = *(void **)__p;
      goto LABEL_405;
    }

    p_dst = &__dst;
  }

  int v12 = *(_DWORD *)p_dst;
  int v13 = *((unsigned __int16 *)p_dst + 2);
  if (v12 != 1953001332 || v13 != 27757) {
    goto LABEL_44;
  }
  sub_1000021BC(&v136, "--schemaTemplateDir");
  siri::dialogengine::GetOption(v123, a1, &v136);
  siri::dialogengine::ExpandPath(__p, v123);
  if ((v123[23] & 0x80000000) != 0) {
    operator delete(*(void **)v123);
  }
  sub_1000021BC(v123, "--all");
  unint64_t v30 = (siri::dialogengine *)siri::dialogengine::OptionExists(a1, v123);
  int v31 = (int)v30;
  if ((v123[23] & 0x80000000) != 0) {
    operator delete(*(void **)v123);
  }
  if (v31)
  {
    siri::dialogengine::GetSchemaSearchPaths(v30);
    uint64_t v32 = __p[23];
    if (__p[23] < 0) {
      uint64_t v32 = *(void *)&__p[8];
    }
    if (v32) {
      sub_100018C6C((uint64_t *)v123, *(uint64_t *)v123, (__int128 *)__p);
    }
    uint64_t v34 = *(void *)&v123[8];
    uint64_t v33 = *(void *)v123;
    if (*(void *)v123 == *(void *)&v123[8])
    {
LABEL_124:
      v136 = (void **)v123;
      sub_1000027F4(&v136);
      BOOL v4 = 1LL;
      goto LABEL_242;
    }

      siri::dialogengine::PatternSchemaComponent::GetFullUsage(v175);
      uint64_t v63 = sub_1000238A0((uint64_t *)&__p);
      v184.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      sub_100007BFC((void ***)&v184);
      siri::dialogengine::PatternSchemaComponent::GetSupportingUsage(v175);
      uint64_t v64 = sub_1000238A0((uint64_t *)&__p);
      v184.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      sub_100007BFC((void ***)&v184);
      siri::dialogengine::PatternSchemaComponent::GetFullOverrides(v175);
      siri::dialogengine::PatternSchemaComponent::GetSupportingOverrides(v175);
      sub_1000021BC(&v172, "            ");
      memset(&v184, 0, sizeof(v184));
      sub_1000021BC(&__p, "button");
      uint64_t v65 = siri::dialogengine::StringsEqual(&v182, &__p);
      uint64_t v66 = v65;
      if ((char)__p.__r_.__value_.__s.__size_ < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v66)
        {
LABEL_143:
          LODWORD(__p.__r_.__value_.__l.__data_) = 0;
          sub_1000021BC(&__p.__r_.__value_.__l.__size_, "action");
          LODWORD(v189) = 9;
          sub_1000021BC(v190, "label");
          __int128 v67 = v64;
          sub_100027C60((uint64_t *)&v184, &__p, &v191, 2uLL);
          for (int i = 0LL; i != -8; i -= 4LL)
          {
            if (SHIBYTE(v190[i + 2]) < 0) {
              operator delete((void *)v190[i]);
            }
          }

LABEL_112:
    siri::dialogengine::ListDir(&v136, v33);
    std::string::size_type v35 = v136;
    unint64_t v36 = v137;
    while (1)
    {
      if (v35 == v36)
      {
        *(void *)&__int128 v134 = &v136;
        sub_1000027F4((void ***)&v134);
        v33 += 24LL;
        if (v33 == v34) {
          goto LABEL_124;
        }
        goto LABEL_112;
      }

      sub_1000021BC(&v134, "patternschema");
      int HasExtension = siri::dialogengine::HasExtension(v35, &v134);
      int v38 = HasExtension;
      if (SHIBYTE(v135) < 0)
      {
        operator delete((void *)v134);
        if (!v38) {
          goto LABEL_122;
        }
      }

      else if (!HasExtension)
      {
        goto LABEL_122;
      }

      siri::dialogengine::RemoveExtension(&v134, v35);
      sub_100018DDC(&v141, (uint64_t)&v134, (uint64_t)__p, (char *)&v98);
      if (v99 < 0) {
        operator delete(v98);
      }
      if (SHIBYTE(v135) < 0) {
        operator delete((void *)v134);
      }
LABEL_122:
      v35 += 3;
    }
  }

  sub_1000021BC(&v136, "--schema");
  siri::dialogengine::GetOption(v123, a1, &v136);
  uint64_t v50 = v123[23];
  if (v123[23] < 0) {
    uint64_t v50 = *(void *)&v123[8];
  }
  if (!v50)
  {
    sub_1000021BC(&v136, "--schema required for catutil pattern tohtml");
    sub_1000021BC(&v134, (char *)&unk_10006A022);
    uint64_t v18 = sub_10004953C(&v141, (uint64_t)&v136, (const void **)&v134, 0LL);
    goto LABEL_234;
  }

  sub_100018DDC(&v141, (uint64_t)v123, (uint64_t)__p, (char *)&v136);
  int v51 = (void **)v138;
  if ((v138 & 0x80u) != 0) {
    int v51 = v137;
  }
  if (v51)
  {
    sub_1000021BC(&v134, "--open");
    int v52 = siri::dialogengine::OptionExists(a1, &v134);
    if (SHIBYTE(v135) < 0) {
      operator delete((void *)v134);
    }
    if (v52)
    {
      std::operator+<char>(&v134, "open ", &v136);
      siri::dialogengine::ExecuteShellCommand(&v96, &v134, 0LL);
      if (v97 < 0) {
        operator delete(v96);
      }
      if (SHIBYTE(v135) < 0) {
        operator delete((void *)v134);
      }
    }
  }

  if (((char)v138 & 0x80000000) == 0)
  {
    BOOL v4 = v138 != 0;
    goto LABEL_240;
  }

  int v58 = v136;
  BOOL v4 = v137 != 0LL;
LABEL_239:
  operator delete(v58);
LABEL_240:
  if ((v123[23] & 0x80000000) != 0) {
    operator delete(*(void **)v123);
  }
LABEL_242:
  if ((__p[23] & 0x80000000) != 0)
  {
    __int128 v59 = *(void ***)__p;
LABEL_244:
    operator delete(v59);
  }

LABEL_245:
  if ((SHIBYTE(v140) & 0x80000000) == 0) {
    goto LABEL_248;
  }
  uint64_t v7 = (void *)__dst;
LABEL_247:
  operator delete(v7);
LABEL_248:
  if (v144) {
    sub_100009064((uint64_t)v142, v143);
  }
  return v4;
}

void sub_100016F34( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *a22, uint64_t a23, uint64_t a24, void *a25, uint64_t a26, uint64_t a27, void *a28, uint64_t a29, uint64_t a30, void *a31, uint64_t a32, uint64_t a33, uint64_t a34, void *a35, uint64_t a36, uint64_t a37, void *a38, uint64_t a39, uint64_t a40, void *a41, uint64_t a42, uint64_t a43, uint64_t a44, void *a45, uint64_t a46, int a47, __int16 a48, char a49, char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (a72 < 0) {
    operator delete(__p);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  if (a63 < 0) {
    operator delete(a58);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  if (a76 < 0) {
    operator delete(a75);
  }
  if (*(_BYTE *)(v77 - 112)) {
    sub_100009064(v76, *(char **)(v77 - 128));
  }
  _Unwind_Resume(a1);
}

BOOL sub_1000176F8(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1LL) {
        goto LABEL_10;
      }
      a1 = (void *)*a1;
      return memcmp(a1, __s, v4) == 0;
    }
  }

  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1LL) {
LABEL_10:
    }
      sub_10002675C();
    return memcmp(a1, __s, v4) == 0;
  }

  return 0LL;
}

BOOL sub_100017788(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  int v52 = (void **)&v57;
  sub_10000AE78(&v52);
  sub_100020950(&v49);
  siri::dialogengine::Context::SetFile(v51, &v49);
  uint64_t v5 = v50;
  if (v50)
  {
    p_shared_owners = (unint64_t *)&v50->__shared_owners_;
    do
      unint64_t v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  siri::dialogengine::PatternFile::LoadFromId(&v47, v51, a3, 0LL);
  if (v47)
  {
    siri::dialogengine::PatternFile::Validate(v47, (siri::dialogengine::Context *)v51);
    siri::dialogengine::PatternFile::GetPath(v47);
    siri::dialogengine::Context::GetFile((siri::dialogengine::Context *)v51);
    siri::dialogengine::File::GetValidationErrors((siri::dialogengine::File *)v57.__r_.__value_.__l.__data_);
    uint64_t size = (std::__shared_weak_count *)v57.__r_.__value_.__l.__size_;
    if (v57.__r_.__value_.__l.__size_)
    {
      unint64_t v9 = (unint64_t *)(v57.__r_.__value_.__l.__size_ + 8);
      do
        unint64_t v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }

    siri::dialogengine::Context::GetFile((siri::dialogengine::Context *)v51);
    siri::dialogengine::File::GetValidationWarnings((siri::dialogengine::File *)v57.__r_.__value_.__l.__data_);
    uint64_t v11 = (std::__shared_weak_count *)v57.__r_.__value_.__l.__size_;
    if (v57.__r_.__value_.__l.__size_)
    {
      int v12 = (unint64_t *)(v57.__r_.__value_.__l.__size_ + 8);
      do
        unint64_t v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }

    if (sub_1000494B4((uint64_t)a1))
    {
      for (int i = v44; i != v45; int i = (siri::dialogengine::LineNumberBase *)((char *)i + 88))
      {
        siri::dialogengine::LineNumberBase::GetFullPath(i);
        std::string::size_type v15 = v57.__r_.__value_.__s.__size_;
        if ((v57.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          std::string::size_type v15 = v57.__r_.__value_.__l.__size_;
        }
        if (!v15) {
          std::string::operator=(&v57, &__str);
        }
        sub_100020484(a1, i, (const void **)&v57.__r_.__value_.__l.__data_);
      }

      for (uint64_t j = v42; j != v43; uint64_t j = (siri::dialogengine::LineNumberBase *)((char *)j + 88))
      {
        siri::dialogengine::LineNumberBase::GetFullPath(j);
        std::string::size_type v39 = v57.__r_.__value_.__s.__size_;
        if ((v57.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          std::string::size_type v39 = v57.__r_.__value_.__l.__size_;
        }
        if (!v39) {
          std::string::operator=(&v57, &__str);
        }
        sub_10002050C(a1, j, (const void **)&v57.__r_.__value_.__l.__data_);
      }

      goto LABEL_62;
    }

    v41[0] = 0LL;
    v41[1] = 0LL;
    uint64_t v40 = (uint64_t *)v41;
    memset(&v57, 0, sizeof(v57));
    sub_100020D4C(&v57, (uint64_t)v44, (uint64_t)v45, 0x2E8BA2E8BA2E8BA3LL * ((v45 - v44) >> 3));
    char v58 = 1;
    memset(v59, 0, sizeof(v59));
    sub_100020D4C(v59, (uint64_t)v42, (uint64_t)v43, 0x2E8BA2E8BA2E8BA3LL * ((v43 - v42) >> 3));
    char v60 = 0;
    BOOL v53 = 0LL;
    int v54 = 0LL;
    int v52 = 0LL;
    unint64_t v55 = (std::string *)&v52;
    char v56 = 0;
    int v52 = (void **)operator new(0x40uLL);
    BOOL v53 = v52;
    int v54 = v52 + 8;
    BOOL v53 = (void **)sub_100021108((uint64_t)&v54, (uint64_t)&v57, (uint64_t)&v61, (uint64_t)v52);
    for (uint64_t k = 32LL; k != -32; k -= 32LL)
    {
      unint64_t v55 = (std::string *)((char *)&v57 + k);
      sub_10002107C((void ***)&v55);
    }

    unsigned int v19 = v52;
    int v20 = v53;
    if (v52 == v53)
    {
LABEL_52:
      v57.__r_.__value_.__r.__words[0] = (std::string::size_type)&v52;
      sub_100021250((void ***)&v57);
      uint64_t v28 = (uint64_t *)sub_100008EC0((uint64_t)&v40, (const void **)&__str.__r_.__value_.__l.__data_);
      BOOL v29 = v28;
      if (v41 != (void **)v28)
      {
        sub_100020594((uint64_t)(v28 + 7), a1);
        sub_1000217F4(&v40, v29);
        sub_100021488((uint64_t)(v29 + 4));
        operator delete(v29);
      }

      unint64_t v30 = v40;
      if (v40 != (uint64_t *)v41)
      {
        do
        {
          sub_100020594((uint64_t)(v30 + 7), a1);
          int v31 = (uint64_t *)v30[1];
          if (v31)
          {
            do
            {
              uint64_t v32 = v31;
              int v31 = (uint64_t *)*v31;
            }

            while (v31);
          }

          else
          {
            do
            {
              uint64_t v32 = (uint64_t *)v30[2];
              BOOL v33 = *v32 == (void)v30;
              unint64_t v30 = v32;
            }

            while (!v33);
          }

          unint64_t v30 = v32;
        }

        while (v32 != (uint64_t *)v41);
      }

      sub_100021BE8((uint64_t)&v40, v41[0]);
LABEL_62:
      BOOL v16 = sub_1000499CC((uint64_t)a1);
      v57.__r_.__value_.__r.__words[0] = (std::string::size_type)&v42;
      sub_10002107C((void ***)&v57);
      v57.__r_.__value_.__r.__words[0] = (std::string::size_type)&v44;
      sub_10002107C((void ***)&v57);
      if ((char)__str.__r_.__value_.__s.__size_ < 0)
      {
        unint64_t v17 = (void *)__str.__r_.__value_.__r.__words[0];
        goto LABEL_64;
      }

      goto LABEL_65;
    }

    while (1)
    {
      uint64_t v21 = (siri::dialogengine::LineNumberBase *)*v19;
      uint64_t v22 = v19[1];
      if (*v19 != v22) {
        break;
      }
LABEL_51:
      v19 += 4;
      if (v19 == v20) {
        goto LABEL_52;
      }
    }

    int v23 = *((unsigned __int8 *)v19 + 24);
    while (1)
    {
      siri::dialogengine::LineNumberBase::GetFullPath(v21);
      std::string::size_type v24 = v57.__r_.__value_.__s.__size_;
      if ((v57.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        std::string::size_type v24 = v57.__r_.__value_.__l.__size_;
      }
      if (!v24) {
        std::string::operator=(&v57, &__str);
      }
      unint64_t v55 = &v57;
      int v25 = sub_1000212C0( &v40,  (const void **)&v57.__r_.__value_.__l.__data_,  (uint64_t)&std::piecewise_construct,  (__int128 **)&v55);
      uint64_t v26 = v25;
      if (*((char *)v25 + 79) < 0)
      {
        if (!v25[8]) {
LABEL_44:
        }
          std::string::operator=((std::string *)(v25 + 7), &v57);
      }

      else if (!*((_BYTE *)v25 + 79))
      {
        goto LABEL_44;
      }

      if (v23) {
        uint64_t v27 = (uint64_t **)(v26 + 10);
      }
      else {
        uint64_t v27 = (uint64_t **)(v26 + 13);
      }
      sub_100021534(v27, (uint64_t)v21, (uint64_t)v21);
      uint64_t v21 = (siri::dialogengine::LineNumberBase *)((char *)v21 + 88);
      if (v21 == v22) {
        goto LABEL_51;
      }
    }
  }

  std::operator+<char>(&v57, "failed to load pattern file: ", a3);
  sub_1000021BC(&v52, (char *)&unk_10006A022);
  BOOL v16 = sub_10004953C(a1, (uint64_t)&v57, (const void **)&v52, 0LL);
  if (SHIBYTE(v54) < 0) {
    operator delete(v52);
  }
  if ((char)v57.__r_.__value_.__s.__size_ < 0)
  {
    unint64_t v17 = (void *)v57.__r_.__value_.__r.__words[0];
LABEL_64:
    operator delete(v17);
  }

LABEL_65:
  uint64_t v34 = v48;
  if (v48)
  {
    std::string::size_type v35 = (unint64_t *)&v48->__shared_owners_;
    do
      unint64_t v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }

  siri::dialogengine::Context::~Context((siri::dialogengine::Context *)v51);
  return v16;
}

void sub_100017D64( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24, char a25, uint64_t a26, char a27, uint64_t a28, char a29)
{
  *(void *)(v30 - 200) = v29;
  sub_100021250((void ***)(v30 - 184));
  for (uint64_t i = 32LL; i != -32; i -= 32LL)
  {
    *(void *)(v30 - 184) = v30 - 160 + i;
    sub_10002107C((void ***)(v30 - 184));
  }

  sub_100021BE8((uint64_t)&a10, a11);
  *(void *)(v30 - 160) = &a13;
  sub_10002107C((void ***)(v30 - 160));
  *(void *)(v30 - 160) = &a16;
  sub_10002107C((void ***)(v30 - 160));
  if (a24 < 0) {
    operator delete(__p);
  }
  sub_1000059D0((uint64_t)&a25);
  siri::dialogengine::Context::~Context((siri::dialogengine::Context *)&a29);
  _Unwind_Resume(a1);
}

BOOL sub_100017F20(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1LL) {
        goto LABEL_10;
      }
      a1 = (void *)*a1;
      return memcmp(a1, __s, v4) != 0;
    }
  }

  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1LL) {
LABEL_10:
    }
      sub_10002675C();
    return memcmp(a1, __s, v4) != 0;
  }

  return 1LL;
}

uint64_t sub_100017FB0(uint64_t **a1, const char *a2)
{
  uint64_t v2 = a2;
  siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Preparing to render VisualCats...", a2);
  sub_100005A28((uint64_t)v68, 0LL, 1024LL, 0LL);
  sub_100005A28((uint64_t)v66, 0LL, 1024LL, 0LL);
  if (v2[23] < 0) {
    uint64_t v2 = *(const char **)v2;
  }
  *(void *)&__int128 v64 = v2;
  *((void *)&v64 + 1) = v2;
  if (*(_DWORD *)(sub_10000CE28((uint64_t)v66, &v64) + 88))
  {
    if (v67 > 0x11) {
      size_t v4 = "Unknown error.";
    }
    else {
      size_t v4 = off_100078F90[v67];
    }
    sub_1000021BC(&v64, v4);
    uint64_t v6 = sub_100002F60(&std::cout, (uint64_t)"Error: Invalid JSON result: ", 28LL);
    if (v65 >= 0) {
      unint64_t v7 = &v64;
    }
    else {
      unint64_t v7 = (__int128 *)v64;
    }
    if (v65 >= 0) {
      uint64_t v8 = HIBYTE(v65);
    }
    else {
      uint64_t v8 = *((void *)&v64 + 1);
    }
LABEL_18:
    unint64_t v9 = sub_100002F60(v6, (uint64_t)v7, v8);
    std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24LL)));
    unint64_t v10 = std::locale::use_facet(&v61, &std::ctype<char>::id);
    uint64_t v11 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10LL);
    std::locale::~locale(&v61);
    std::ostream::put(v9, v11);
    std::ostream::flush(v9);
    goto LABEL_156;
  }

  *(void *)&__int128 v64 = a1;
  *((void *)&v64 + 1) = a1;
  if (*(_DWORD *)(sub_10000CE28((uint64_t)v68, &v64) + 88))
  {
    if (v69 > 0x11) {
      uint64_t v5 = "Unknown error.";
    }
    else {
      uint64_t v5 = off_100078F90[v69];
    }
    sub_1000021BC(&v64, v5);
    uint64_t v6 = sub_100002F60(&std::cout, (uint64_t)"Error: Invalid JSON request: ", 29LL);
    if (v65 >= 0) {
      unint64_t v7 = &v64;
    }
    else {
      unint64_t v7 = (__int128 *)v64;
    }
    if (v65 >= 0) {
      uint64_t v8 = HIBYTE(v65);
    }
    else {
      uint64_t v8 = *((void *)&v64 + 1);
    }
    goto LABEL_18;
  }

  sub_1000021BC(&v61, "renderVisualCat");
  siri::dialogengine::ParseJSONString(&v64, v68, &v61);
  if ((siri::dialogengine::DirExists(&v64) & 1) != 0) {
    goto LABEL_25;
  }
  siri::dialogengine::DirName(&v61, &v64);
  char v12 = siri::dialogengine::DirExists(&v61);
  if ((v12 & 1) != 0)
  {
LABEL_25:
    sub_1000021BC(__p, "patternId");
    siri::dialogengine::ParseJSONString(&v61, v68, __p);
    if (v60 < 0) {
      operator delete(__p[0]);
    }
    sub_1000021BC(v57, "status");
    siri::dialogengine::ParseJSONString(__p, v66, v57);
    if (SHIBYTE(v58) < 0) {
      operator delete(v57[0]);
    }
    char v13 = v60;
    if (v60 < 0)
    {
      if (__p[1] != (void *)7)
      {
LABEL_153:
        operator delete(__p[0]);
        goto LABEL_154;
      }

      int v14 = (void **)__p[0];
    }

    else
    {
      if (v60 != 7) {
        goto LABEL_154;
      }
      int v14 = __p;
    }

    int v15 = *(_DWORD *)v14;
    int v16 = *(_DWORD *)((char *)v14 + 3);
    if (v15 != 1667462515 || v16 != 1936942435)
    {
LABEL_152:
      if ((v13 & 0x80) == 0) {
        goto LABEL_154;
      }
      goto LABEL_153;
    }

    uint64_t v18 = (unsigned int *)sub_1000122D8(v66, "visual");
    sub_1000021BC(&v56, "renderDeviceTrain");
    siri::dialogengine::ParseJSONString(v57, v68, &v56);
    sub_1000021BC(&v55, "renderDeviceClass");
    siri::dialogengine::ParseJSONString(&v56, v68, &v55);
    if ((char)v56.__r_.__value_.__s.__size_ < 0)
    {
      if (v56.__r_.__value_.__l.__size_) {
        goto LABEL_62;
      }
    }

    else if (v56.__r_.__value_.__s.__size_)
    {
      goto LABEL_62;
    }

    std::string::assign(&v56, "iPhone");
LABEL_62:
    sub_1000021BC(&v53, "renderContext");
    siri::dialogengine::ParseJSONString(&v55, v68, &v53);
    if (SHIBYTE(v54) < 0) {
      operator delete((void *)v53);
    }
    if ((char)v55.__r_.__value_.__s.__size_ < 0)
    {
      if (v55.__r_.__value_.__l.__size_) {
        goto LABEL_69;
      }
    }

    else if (v55.__r_.__value_.__s.__size_)
    {
      goto LABEL_69;
    }

    std::string::assign(&v55, "MockSiri");
LABEL_69:
    sub_1000021BC(v51, "renderScreenSize");
    siri::dialogengine::ParseJSONString(&v53, v68, v51);
    if (SHIBYTE(v52) < 0) {
      operator delete(v51[0]);
    }
    sub_1000021BC(&v50, "renderOrientation");
    siri::dialogengine::ParseJSONString(v51, v68, &v50);
    sub_1000021BC(&v50, "renderDarkMode");
    int v25 = siri::dialogengine::ParseJSONBool(v68, &v50, 0LL);
    sub_1000021BC(&v50, (char *)&unk_10006A022);
    if (*((_WORD *)v18 + 11) != 3) {
      __assert_rtn("MemberBegin", "document.h", 1161, "IsObject()");
    }
    for (uint64_t i = *((void *)v18 + 1); i != *((void *)v18 + 1) + 48LL * *v18; i += 48LL)
    {
      uint64_t v27 = (const char *)sub_100012368(i);
      if (!strcmp(v27, "data"))
      {
        uint64_t v28 = (const std::string::value_type *)sub_100012368(i + 24);
        std::string::assign(&v50, v28);
      }

      if (*((_WORD *)v18 + 11) != 3) {
        __assert_rtn("MemberEnd", "document.h", 1164, "IsObject()");
      }
    }

    if (SHIBYTE(v65) < 0)
    {
      sub_10000231C(__dst, (void *)v64, *((unint64_t *)&v64 + 1));
    }

    else
    {
      *(_OWORD *)__int128 __dst = v64;
      uint64_t v49 = v65;
    }

    if (siri::dialogengine::DirExists(__dst))
    {
      if ((v63 & 0x80u) == 0) {
        size_t v29 = v63;
      }
      else {
        size_t v29 = v62;
      }
      uint64_t v30 = v44;
      sub_100007A0C((uint64_t)v44, v29 + 11);
      if (v45 < 0) {
        uint64_t v30 = (void **)v44[0];
      }
      if (v29)
      {
        if ((v63 & 0x80u) == 0) {
          locale = &v61;
        }
        else {
          locale = v61.__locale_;
        }
        memmove(v30, locale, v29);
      }

      strcpy((char *)v30 + v29, "-render.png");
      siri::dialogengine::JoinPath(&v46, __dst, v44);
      if (SHIBYTE(v49) < 0) {
        operator delete(__dst[0]);
      }
      *(_OWORD *)__int128 __dst = v46;
      uint64_t v49 = v47;
      HIBYTE(v47) = 0;
      LOBYTE(v46) = 0;
      if (v45 < 0) {
        operator delete(v44[0]);
      }
    }

    if ((char)v50.__r_.__value_.__s.__size_ < 0)
    {
      if (v50.__r_.__value_.__l.__size_)
      {
        sub_10000231C(&v43, v50.__r_.__value_.__l.__data_, v50.__r_.__value_.__l.__size_);
        goto LABEL_105;
      }
    }

    else if (v50.__r_.__value_.__s.__size_)
    {
      std::string v43 = v50;
LABEL_105:
      if (SHIBYTE(v49) < 0)
      {
        sub_10000231C(v41, __dst[0], (unint64_t)__dst[1]);
      }

      else
      {
        *(_OWORD *)uint64_t v41 = *(_OWORD *)__dst;
        uint64_t v42 = v49;
      }

      else {
        std::string v40 = v56;
      }
      if (SHIBYTE(v58) < 0)
      {
        sub_10000231C(v38, v57[0], (unint64_t)v57[1]);
      }

      else
      {
        *(_OWORD *)int v38 = *(_OWORD *)v57;
        uint64_t v39 = v58;
      }

      else {
        std::string v37 = v55;
      }
      if (SHIBYTE(v54) < 0)
      {
        sub_10000231C(v35, (void *)v53, *((unint64_t *)&v53 + 1));
      }

      else
      {
        *(_OWORD *)std::string::size_type v35 = v53;
        uint64_t v36 = v54;
      }

      if (SHIBYTE(v52) < 0)
      {
        sub_10000231C(v33, v51[0], (unint64_t)v51[1]);
      }

      else
      {
        *(_OWORD *)BOOL v33 = *(_OWORD *)v51;
        uint64_t v34 = v52;
      }

      sub_10000C0AC( (uint64_t)&v43,  (uint64_t)v41,  (uint64_t)&v40,  (uint64_t)v38,  (uint64_t)&v37,  (uint64_t)v35,  (uint64_t)v33,  v25);
      if (SHIBYTE(v34) < 0) {
        operator delete(v33[0]);
      }
      if (SHIBYTE(v36) < 0) {
        operator delete(v35[0]);
      }
      if (SHIBYTE(v39) < 0) {
        operator delete(v38[0]);
      }
      if (SHIBYTE(v42) < 0) {
        operator delete(v41[0]);
      }
    }

    if (SHIBYTE(v49) < 0) {
      operator delete(__dst[0]);
    }
    if (SHIBYTE(v52) < 0) {
      operator delete(v51[0]);
    }
    if (SHIBYTE(v54) < 0) {
      operator delete((void *)v53);
    }
    if (SHIBYTE(v58) < 0) {
      operator delete(v57[0]);
    }
    char v13 = v60;
    goto LABEL_152;
  }

  unsigned int v19 = sub_100002F60(&std::cout, (uint64_t)"Error: Destination directory doesn't exist: ", 44LL);
  siri::dialogengine::DirName(&v61, &v64);
  if ((v63 & 0x80u) == 0) {
    int v20 = &v61;
  }
  else {
    int v20 = v61.__locale_;
  }
  if ((v63 & 0x80u) == 0) {
    uint64_t v21 = v63;
  }
  else {
    uint64_t v21 = v62;
  }
  uint64_t v22 = sub_100002F60(v19, (uint64_t)v20, v21);
  std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(void *)(*v22 - 24LL)));
  int v23 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
  uint64_t v24 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10LL);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put(v22, v24);
  std::ostream::flush(v22);
LABEL_154:
LABEL_156:
  if (SHIBYTE(v65) < 0) {
    operator delete((void *)v64);
  }
  sub_100007938((uint64_t)v66);
  return sub_100007938((uint64_t)v68);
}

void sub_100018984( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25, uint64_t a26, void *a27, uint64_t a28, int a29, __int16 a30, char a31, char a32, uint64_t a33, void *a34, uint64_t a35, int a36, __int16 a37, char a38, char a39, uint64_t a40, void *a41, uint64_t a42, int a43, __int16 a44, char a45, char a46, uint64_t a47, void *a48, uint64_t a49, int a50,__int16 a51,char a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (a46 < 0) {
    operator delete(a41);
  }
  if (a53 < 0) {
    operator delete(a48);
  }
  if (a66 < 0) {
    operator delete(a61);
  }
  if (a72 < 0) {
    operator delete(a67);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  if (a76 < 0) {
    operator delete(a75);
  }
  if (a78 < 0) {
    operator delete(a77);
  }
  if (a80 < 0) {
    operator delete(a79);
  }
  if (a82 < 0) {
    operator delete(a81);
  }
  if (a84 < 0) {
    operator delete(a83);
  }
  if (a86 < 0) {
    operator delete(a85);
  }
  if (a88 < 0) {
    operator delete(a87);
  }
  sub_100007938((uint64_t)&STACK[0x208]);
  sub_100007938(v88 - 176);
  _Unwind_Resume(a1);
}

__int128 *sub_100018C6C(uint64_t *a1, uint64_t a2, __int128 *a3)
{
  size_t v4 = (__int128 *)a2;
  unint64_t v6 = a1[1];
  unint64_t v9 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = v9;
  if (v6 >= v9)
  {
    uint64_t v10 = *a1;
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *a1) >> 3) + 1;
    if (v11 > 0xAAAAAAAAAAAAAAALL) {
      sub_100002668();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v10) >> 3);
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - v10) >> 3);
    unint64_t v14 = 2 * v13;
    if (2 * v13 <= v11) {
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *a1) >> 3) + 1;
    }
    if (v13 >= 0x555555555555555LL) {
      unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v15 = v14;
    }
    uint64_t v22 = v7;
    if (v15) {
      int v16 = (char *)sub_10000267C(v7, v15);
    }
    else {
      int v16 = 0LL;
    }
    uint64_t v18 = v16;
    unsigned int v19 = &v16[24 * v12];
    int v20 = v19;
    uint64_t v21 = &v16[24 * v15];
    sub_100028ECC(&v18, a3);
    size_t v4 = (__int128 *)sub_100029054((uint64_t)a1, &v18, v4);
    sub_100002ED8((uint64_t)&v18);
  }

  else if (a2 == v6)
  {
    sub_100028E04(a1, a3);
  }

  else
  {
    sub_100028E60((uint64_t)a1, a2, v6, a2 + 24);
    if (v4 <= a3) {
      a3 = (__int128 *)((char *)a3 + 24 * (a1[1] > (unint64_t)a3));
    }
    std::string::operator=((std::string *)v4, (const std::string *)a3);
  }

  return v4;
}

void sub_100018DC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_100018DDC(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  v567 = __p;
  sub_10000AE78((void ***)&v567);
  siri::dialogengine::PatternRegistry::GetSchema(&v570, v572, a2);
  if (v570)
  {
    siri::dialogengine::Context::GetSchemaErrors((siri::dialogengine::Context *)v572);
    uint64_t v7 = (char *)v567;
    unint64_t v8 = v568;
    if (v567 != v568)
    {
      do
      {
        sub_1000021BC(__p, (char *)&unk_10006A022);
        sub_10004953C(a1, (uint64_t)v7, (const void **)__p, 0LL);
        if (SHIBYTE(cap) < 0) {
          operator delete(__p[0]);
        }
        v7 += 24;
      }

      while (v7 != v8);
    }

    v566[1] = 0LL;
    v566[0] = 0LL;
    v565 = (uint64_t *)v566;
    siri::dialogengine::PatternSchema::GetGroups(v570);
    uint64_t v513 = a2;
    v514 = a4;
    unint64_t v9 = (std::string::size_type *)__p[0];
    uint64_t v10 = (std::string::size_type *)__p[1];
    if (__p[0] == __p[1])
    {
      unint64_t v11 = 0LL;
    }

    else
    {
      unint64_t v11 = 0LL;
      do
      {
        std::string::size_type v13 = *v9;
        std::string::size_type v12 = v9[1];
        v563.__r_.__value_.__r.__words[0] = *v9;
        v563.__r_.__value_.__l.__size_ = v12;
        if (v12)
        {
          unint64_t v14 = (unint64_t *)(v12 + 8);
          do
            unint64_t v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
        }

        (*(void (**)(std::string *__return_ptr, std::string::size_type))(*(void *)v13 + 88LL))(&v561, v13);
        (*(void (**)(std::string *__return_ptr, std::string::size_type))(*(void *)v13 + 72LL))(&v564, v13);
        sub_100022FDC((__int128 *)&v561, &v564, &v562);
        v560.__r_.__value_.__r.__words[0] = (std::string::size_type)&v564;
        sub_100007BFC((void ***)&v560);
        uint64_t size = (std::__shared_weak_count *)v561.__r_.__value_.__l.__size_;
        if (v561.__r_.__value_.__l.__size_)
        {
          unint64_t v17 = (unint64_t *)(v561.__r_.__value_.__l.__size_ + 8);
          do
            unint64_t v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }

        siri::dialogengine::PatternSchemaGroup::GetName((siri::dialogengine::PatternSchemaGroup *)v563.__r_.__value_.__l.__data_);
        v561.__r_.__value_.__r.__words[0] = (std::string::size_type)&v564;
        unsigned int v19 = sub_100023190( &v565,  (const void **)&v564.__r_.__value_.__l.__data_,  (uint64_t)&std::piecewise_construct,  &v561);
        sub_100014A88((void *)v19 + 7, (uint64_t *)&v562);
        unint64_t v20 = sub_100014DB4((uint64_t)v562.__r_.__value_.__l.__data_);
        if (v11 <= v20) {
          unint64_t v11 = v20;
        }
        uint64_t v21 = (std::__shared_weak_count *)v562.__r_.__value_.__l.__size_;
        if (v562.__r_.__value_.__l.__size_)
        {
          uint64_t v22 = (unint64_t *)(v562.__r_.__value_.__l.__size_ + 8);
          do
            unint64_t v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }

        uint64_t v24 = (std::__shared_weak_count *)v563.__r_.__value_.__l.__size_;
        if (v563.__r_.__value_.__l.__size_)
        {
          int v25 = (unint64_t *)(v563.__r_.__value_.__l.__size_ + 8);
          do
            unint64_t v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }

        v9 += 2;
      }

      while (v9 != v10);
    }

    v564.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    sub_100007BFC((void ***)&v564);
    sub_1000021BC(&v564, "<!DOCTYPE html>\n<html>\n<head>\n");
    siri::dialogengine::PatternSchema::GetName(v570);
    uint64_t v27 = std::string::insert(&v562, 0LL, "<title>");
    __int128 v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v563.__r_.__value_.__l.__cap_ = v27->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v563.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0LL;
    v27->__r_.__value_.__l.__cap_ = 0LL;
    v27->__r_.__value_.__r.__words[0] = 0LL;
    size_t v29 = std::string::append(&v563, "</title>\n");
    __int128 v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    int64_t cap = v29->__r_.__value_.__l.__cap_;
    *(_OWORD *)std::string __p = v30;
    v29->__r_.__value_.__l.__size_ = 0LL;
    v29->__r_.__value_.__l.__cap_ = 0LL;
    v29->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      int v31 = __p;
    }
    else {
      int v31 = (void **)__p[0];
    }
    if (cap >= 0) {
      std::string::size_type v32 = HIBYTE(cap);
    }
    else {
      std::string::size_type v32 = (std::string::size_type)__p[1];
    }
    std::string::append(&v564, (const std::string::value_type *)v31, v32);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
    std::string::append( &v564,  "<style>\n body {\n font-family: Arial, Helvetica, sans-serif;\n"
      "      }\n"
      "      table, th, td {\n"
      "        border: 1px solid lightgrey;\n"
      "        border-collapse: collapse;\n"
      "        font-size: 90%;\n"
      "      }\n"
      "      th, td {\n"
      "        padding: 5pt;\n"
      "      }\n"
      "      .patternDescription {\n"
      "        white-space: pre-wrap;\n"
      "      }\n"
      "      .greyColor {\n"
      "        background-color: #f4f5f7;\n"
      "      }\n"
      "      .dialogColor {\n"
      "        background-color: #ffebe5;\n"
      "      }\n"
      "      .visualColor {\n"
      "        background-color: #deebff;\n"
      "      }\n"
      "      .usage {\n"
      "        text-align: center;\n"
      "      }\n"
      "      .combinationOperator {\n"
      "        background-color: #f4f5f7;\n"
      "        font-style: italic;\n"
      "        text-align: center;\n"
      "      }\n"
      "      .variants {\n"
      "        color: grey;\n"
      "        font-size: 90%;\n"
      "      }\n"
      "      .variantsLabel {\n"
      "        color: black;\n"
      "      }\n"
      "      .defaultVariant {\n"
      "        font-weight: bold;\n"
      "      }\n"
      "      .empty {\n"
      "        color: lightgrey;\n"
      "      }\n"
      "      .error {\n"
      "        background-color: #cc0000;\n"
      "      }\n");
    std::string::append(&v564, "</style>\n");
    std::string::append(&v564, "</head>\n<body>\n");
    siri::dialogengine::PatternSchema::GetName(v570);
    BOOL v33 = std::string::insert(&v562, 0LL, "<h2>");
    __int128 v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    v563.__r_.__value_.__l.__cap_ = v33->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v563.__r_.__value_.__l.__data_ = v34;
    v33->__r_.__value_.__l.__size_ = 0LL;
    v33->__r_.__value_.__l.__cap_ = 0LL;
    v33->__r_.__value_.__r.__words[0] = 0LL;
    std::string::size_type v35 = std::string::append(&v563, "</h2>\n");
    __int128 v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    int64_t cap = v35->__r_.__value_.__l.__cap_;
    *(_OWORD *)std::string __p = v36;
    v35->__r_.__value_.__l.__size_ = 0LL;
    v35->__r_.__value_.__l.__cap_ = 0LL;
    v35->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      std::string v37 = __p;
    }
    else {
      std::string v37 = (void **)__p[0];
    }
    if (cap >= 0) {
      std::string::size_type v38 = HIBYTE(cap);
    }
    else {
      std::string::size_type v38 = (std::string::size_type)__p[1];
    }
    std::string::append(&v564, (const std::string::value_type *)v37, v38);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
    siri::dialogengine::PatternSchema::GetDescription(v570);
    uint64_t v39 = std::string::insert(&v562, 0LL, "<p class=patternDescription>");
    __int128 v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    v563.__r_.__value_.__l.__cap_ = v39->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v563.__r_.__value_.__l.__data_ = v40;
    v39->__r_.__value_.__l.__size_ = 0LL;
    v39->__r_.__value_.__l.__cap_ = 0LL;
    v39->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v41 = std::string::append(&v563, "</p>\n");
    __int128 v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    int64_t cap = v41->__r_.__value_.__l.__cap_;
    *(_OWORD *)std::string __p = v42;
    v41->__r_.__value_.__l.__size_ = 0LL;
    v41->__r_.__value_.__l.__cap_ = 0LL;
    v41->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      std::string v43 = __p;
    }
    else {
      std::string v43 = (void **)__p[0];
    }
    if (cap >= 0) {
      std::string::size_type v44 = HIBYTE(cap);
    }
    else {
      std::string::size_type v44 = (std::string::size_type)__p[1];
    }
    std::string::append(&v564, (const std::string::value_type *)v43, v44);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
    std::string::append(&v564, "<table border=1>\n");
    std::string::append(&v564, "<tr>\n");
    sub_100021C30(1uLL, (uint64_t)qword_10007C610, &v562);
    char v45 = std::string::append(&v562, "Group Name");
    __int128 v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    v563.__r_.__value_.__l.__cap_ = v45->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v563.__r_.__value_.__l.__data_ = v46;
    v45->__r_.__value_.__l.__size_ = 0LL;
    v45->__r_.__value_.__l.__cap_ = 0LL;
    v45->__r_.__value_.__r.__words[0] = 0LL;
    sub_1000021BC(&v561, "</th>\n");
    if ((v561.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v47 = &v561;
    }
    else {
      uint64_t v47 = (std::string *)v561.__r_.__value_.__r.__words[0];
    }
    if ((v561.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v48 = v561.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v48 = v561.__r_.__value_.__l.__size_;
    }
    uint64_t v49 = std::string::append(&v563, (const std::string::value_type *)v47, v48);
    __int128 v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
    int64_t cap = v49->__r_.__value_.__l.__cap_;
    *(_OWORD *)std::string __p = v50;
    v49->__r_.__value_.__l.__size_ = 0LL;
    v49->__r_.__value_.__l.__cap_ = 0LL;
    v49->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      int v51 = __p;
    }
    else {
      int v51 = (void **)__p[0];
    }
    if (cap >= 0) {
      std::string::size_type v52 = HIBYTE(cap);
    }
    else {
      std::string::size_type v52 = (std::string::size_type)__p[1];
    }
    std::string::append(&v564, (const std::string::value_type *)v51, v52);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
    sub_100021C30(1uLL, (uint64_t)qword_10007C610, &v562);
    __int128 v53 = std::string::append(&v562, "Usage");
    __int128 v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
    v563.__r_.__value_.__l.__cap_ = v53->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v563.__r_.__value_.__l.__data_ = v54;
    v53->__r_.__value_.__l.__size_ = 0LL;
    v53->__r_.__value_.__l.__cap_ = 0LL;
    v53->__r_.__value_.__r.__words[0] = 0LL;
    sub_1000021BC(&v561, "</th>\n");
    if ((v561.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string v55 = &v561;
    }
    else {
      std::string v55 = (std::string *)v561.__r_.__value_.__r.__words[0];
    }
    if ((v561.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v56 = v561.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v56 = v561.__r_.__value_.__l.__size_;
    }
    std::string v57 = std::string::append(&v563, (const std::string::value_type *)v55, v56);
    __int128 v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
    int64_t cap = v57->__r_.__value_.__l.__cap_;
    *(_OWORD *)std::string __p = v58;
    v57->__r_.__value_.__l.__size_ = 0LL;
    v57->__r_.__value_.__l.__cap_ = 0LL;
    v57->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      __int128 v59 = __p;
    }
    else {
      __int128 v59 = (void **)__p[0];
    }
    if (cap >= 0) {
      std::string::size_type v60 = HIBYTE(cap);
    }
    else {
      std::string::size_type v60 = (std::string::size_type)__p[1];
    }
    std::string::append(&v564, (const std::string::value_type *)v59, v60);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
    sub_100021C30(1uLL, (uint64_t)qword_10007C610, &v563);
    sub_1000021BC(&v562, "</th>\n");
    if ((v562.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::locale v61 = &v562;
    }
    else {
      std::locale v61 = (std::string *)v562.__r_.__value_.__r.__words[0];
    }
    if ((v562.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v62 = v562.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v62 = v562.__r_.__value_.__l.__size_;
    }
    unsigned __int8 v63 = std::string::append(&v563, (const std::string::value_type *)v61, v62);
    __int128 v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
    int64_t cap = v63->__r_.__value_.__l.__cap_;
    *(_OWORD *)std::string __p = v64;
    v63->__r_.__value_.__l.__size_ = 0LL;
    v63->__r_.__value_.__l.__cap_ = 0LL;
    v63->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      uint64_t v65 = __p;
    }
    else {
      uint64_t v65 = (void **)__p[0];
    }
    if (cap >= 0) {
      std::string::size_type v66 = HIBYTE(cap);
    }
    else {
      std::string::size_type v66 = (std::string::size_type)__p[1];
    }
    std::string::append(&v564, (const std::string::value_type *)v65, v66);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
    sub_100021C30(1uLL, (uint64_t)qword_10007C628, &v562);
    unsigned int v67 = std::string::append(&v562, "Dialog Component");
    __int128 v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
    v563.__r_.__value_.__l.__cap_ = v67->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v563.__r_.__value_.__l.__data_ = v68;
    v67->__r_.__value_.__l.__size_ = 0LL;
    v67->__r_.__value_.__l.__cap_ = 0LL;
    v67->__r_.__value_.__r.__words[0] = 0LL;
    sub_1000021BC(&v561, "</th>\n");
    if ((v561.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      unsigned int v69 = &v561;
    }
    else {
      unsigned int v69 = (std::string *)v561.__r_.__value_.__r.__words[0];
    }
    if ((v561.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v70 = v561.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v70 = v561.__r_.__value_.__l.__size_;
    }
    uint64_t v71 = std::string::append(&v563, (const std::string::value_type *)v69, v70);
    __int128 v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
    int64_t cap = v71->__r_.__value_.__l.__cap_;
    *(_OWORD *)std::string __p = v72;
    v71->__r_.__value_.__l.__size_ = 0LL;
    v71->__r_.__value_.__l.__cap_ = 0LL;
    v71->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      std::string v73 = __p;
    }
    else {
      std::string v73 = (void **)__p[0];
    }
    if (cap >= 0) {
      std::string::size_type v74 = HIBYTE(cap);
    }
    else {
      std::string::size_type v74 = (std::string::size_type)__p[1];
    }
    std::string::append(&v564, (const std::string::value_type *)v73, v74);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
    sub_100021C30(1uLL, (uint64_t)qword_10007C628, &v562);
    uint64_t v75 = std::string::append(&v562, "Usage");
    __int128 v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
    v563.__r_.__value_.__l.__cap_ = v75->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v563.__r_.__value_.__l.__data_ = v76;
    v75->__r_.__value_.__l.__size_ = 0LL;
    v75->__r_.__value_.__l.__cap_ = 0LL;
    v75->__r_.__value_.__r.__words[0] = 0LL;
    sub_1000021BC(&v561, "</th>\n");
    if ((v561.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v77 = &v561;
    }
    else {
      uint64_t v77 = (std::string *)v561.__r_.__value_.__r.__words[0];
    }
    if ((v561.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v78 = v561.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v78 = v561.__r_.__value_.__l.__size_;
    }
    uint64_t v79 = std::string::append(&v563, (const std::string::value_type *)v77, v78);
    __int128 v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
    int64_t cap = v79->__r_.__value_.__l.__cap_;
    *(_OWORD *)std::string __p = v80;
    v79->__r_.__value_.__l.__size_ = 0LL;
    v79->__r_.__value_.__l.__cap_ = 0LL;
    v79->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      uint64_t v81 = __p;
    }
    else {
      uint64_t v81 = (void **)__p[0];
    }
    if (cap >= 0) {
      std::string::size_type v82 = HIBYTE(cap);
    }
    else {
      std::string::size_type v82 = (std::string::size_type)__p[1];
    }
    std::string::append(&v564, (const std::string::value_type *)v81, v82);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
    sub_100021C30(1uLL, (uint64_t)qword_10007C628, &v562);
    BOOL v83 = std::string::append(&v562, "Full");
    __int128 v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
    v563.__r_.__value_.__l.__cap_ = v83->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v563.__r_.__value_.__l.__data_ = v84;
    v83->__r_.__value_.__l.__size_ = 0LL;
    v83->__r_.__value_.__l.__cap_ = 0LL;
    v83->__r_.__value_.__r.__words[0] = 0LL;
    sub_1000021BC(&v561, "</th>\n");
    if ((v561.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      BOOL v85 = &v561;
    }
    else {
      BOOL v85 = (std::string *)v561.__r_.__value_.__r.__words[0];
    }
    if ((v561.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v86 = v561.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v86 = v561.__r_.__value_.__l.__size_;
    }
    size_t v87 = std::string::append(&v563, (const std::string::value_type *)v85, v86);
    __int128 v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
    int64_t cap = v87->__r_.__value_.__l.__cap_;
    *(_OWORD *)std::string __p = v88;
    v87->__r_.__value_.__l.__size_ = 0LL;
    v87->__r_.__value_.__l.__cap_ = 0LL;
    v87->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      std::string v89 = __p;
    }
    else {
      std::string v89 = (void **)__p[0];
    }
    if (cap >= 0) {
      std::string::size_type v90 = HIBYTE(cap);
    }
    else {
      std::string::size_type v90 = (std::string::size_type)__p[1];
    }
    std::string::append(&v564, (const std::string::value_type *)v89, v90);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
    sub_100021C30(1uLL, (uint64_t)qword_10007C628, &v562);
    unsigned int v91 = std::string::append(&v562, "Full Dialog Examples");
    __int128 v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
    v563.__r_.__value_.__l.__cap_ = v91->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v563.__r_.__value_.__l.__data_ = v92;
    v91->__r_.__value_.__l.__size_ = 0LL;
    v91->__r_.__value_.__l.__cap_ = 0LL;
    v91->__r_.__value_.__r.__words[0] = 0LL;
    sub_1000021BC(&v561, "</th>\n");
    if ((v561.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v93 = &v561;
    }
    else {
      uint64_t v93 = (std::string *)v561.__r_.__value_.__r.__words[0];
    }
    if ((v561.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v94 = v561.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v94 = v561.__r_.__value_.__l.__size_;
    }
    int v95 = std::string::append(&v563, (const std::string::value_type *)v93, v94);
    __int128 v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
    int64_t cap = v95->__r_.__value_.__l.__cap_;
    *(_OWORD *)std::string __p = v96;
    v95->__r_.__value_.__l.__size_ = 0LL;
    v95->__r_.__value_.__l.__cap_ = 0LL;
    v95->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      char v97 = __p;
    }
    else {
      char v97 = (void **)__p[0];
    }
    if (cap >= 0) {
      std::string::size_type v98 = HIBYTE(cap);
    }
    else {
      std::string::size_type v98 = (std::string::size_type)__p[1];
    }
    std::string::append(&v564, (const std::string::value_type *)v97, v98);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
    sub_100021C30(1uLL, (uint64_t)qword_10007C628, &v562);
    char v99 = std::string::append(&v562, "Supporting");
    __int128 v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
    v563.__r_.__value_.__l.__cap_ = v99->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v563.__r_.__value_.__l.__data_ = v100;
    v99->__r_.__value_.__l.__size_ = 0LL;
    v99->__r_.__value_.__l.__cap_ = 0LL;
    v99->__r_.__value_.__r.__words[0] = 0LL;
    sub_1000021BC(&v561, "</th>\n");
    if ((v561.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v101 = &v561;
    }
    else {
      uint64_t v101 = (std::string *)v561.__r_.__value_.__r.__words[0];
    }
    if ((v561.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v102 = v561.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v102 = v561.__r_.__value_.__l.__size_;
    }
    uint64_t v103 = std::string::append(&v563, (const std::string::value_type *)v101, v102);
    __int128 v104 = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
    int64_t cap = v103->__r_.__value_.__l.__cap_;
    *(_OWORD *)std::string __p = v104;
    v103->__r_.__value_.__l.__size_ = 0LL;
    v103->__r_.__value_.__l.__cap_ = 0LL;
    v103->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      char v105 = __p;
    }
    else {
      char v105 = (void **)__p[0];
    }
    if (cap >= 0) {
      std::string::size_type v106 = HIBYTE(cap);
    }
    else {
      std::string::size_type v106 = (std::string::size_type)__p[1];
    }
    std::string::append(&v564, (const std::string::value_type *)v105, v106);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
    sub_100021C30(1uLL, (uint64_t)qword_10007C628, &v562);
    char v107 = std::string::append(&v562, "Supporting Dialog Examples");
    __int128 v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
    v563.__r_.__value_.__l.__cap_ = v107->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v563.__r_.__value_.__l.__data_ = v108;
    v107->__r_.__value_.__l.__size_ = 0LL;
    v107->__r_.__value_.__l.__cap_ = 0LL;
    v107->__r_.__value_.__r.__words[0] = 0LL;
    sub_1000021BC(&v561, "</th>\n");
    if ((v561.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string v109 = &v561;
    }
    else {
      std::string v109 = (std::string *)v561.__r_.__value_.__r.__words[0];
    }
    if ((v561.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v110 = v561.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v110 = v561.__r_.__value_.__l.__size_;
    }
    uint64_t v111 = std::string::append(&v563, (const std::string::value_type *)v109, v110);
    __int128 v112 = *(_OWORD *)&v111->__r_.__value_.__l.__data_;
    int64_t cap = v111->__r_.__value_.__l.__cap_;
    *(_OWORD *)std::string __p = v112;
    v111->__r_.__value_.__l.__size_ = 0LL;
    v111->__r_.__value_.__l.__cap_ = 0LL;
    v111->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      uint64_t v113 = __p;
    }
    else {
      uint64_t v113 = (void **)__p[0];
    }
    if (cap >= 0) {
      std::string::size_type v114 = HIBYTE(cap);
    }
    else {
      std::string::size_type v114 = (std::string::size_type)__p[1];
    }
    std::string::append(&v564, (const std::string::value_type *)v113, v114);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
    sub_100021C30(1uLL, (uint64_t)qword_10007C610, &v563);
    sub_1000021BC(&v562, "</th>\n");
    if ((v562.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v115 = &v562;
    }
    else {
      uint64_t v115 = (std::string *)v562.__r_.__value_.__r.__words[0];
    }
    if ((v562.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v116 = v562.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v116 = v562.__r_.__value_.__l.__size_;
    }
    __int128 v117 = std::string::append(&v563, (const std::string::value_type *)v115, v116);
    __int128 v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
    int64_t cap = v117->__r_.__value_.__l.__cap_;
    *(_OWORD *)std::string __p = v118;
    v117->__r_.__value_.__l.__size_ = 0LL;
    v117->__r_.__value_.__l.__cap_ = 0LL;
    v117->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      uint64_t v119 = __p;
    }
    else {
      uint64_t v119 = (void **)__p[0];
    }
    if (cap >= 0) {
      std::string::size_type v120 = HIBYTE(cap);
    }
    else {
      std::string::size_type v120 = (std::string::size_type)__p[1];
    }
    std::string::append(&v564, (const std::string::value_type *)v119, v120);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
    sub_100021C30(v11, (uint64_t)qword_10007C640, &v562);
    __int16 v121 = std::string::append(&v562, "Visual Component");
    __int128 v122 = *(_OWORD *)&v121->__r_.__value_.__l.__data_;
    v563.__r_.__value_.__l.__cap_ = v121->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v563.__r_.__value_.__l.__data_ = v122;
    v121->__r_.__value_.__l.__size_ = 0LL;
    v121->__r_.__value_.__l.__cap_ = 0LL;
    v121->__r_.__value_.__r.__words[0] = 0LL;
    sub_1000021BC(&v561, "</th>\n");
    if ((v561.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      unsigned int v123 = &v561;
    }
    else {
      unsigned int v123 = (std::string *)v561.__r_.__value_.__r.__words[0];
    }
    if ((v561.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v124 = v561.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v124 = v561.__r_.__value_.__l.__size_;
    }
    uint64_t v125 = std::string::append(&v563, (const std::string::value_type *)v123, v124);
    __int128 v126 = *(_OWORD *)&v125->__r_.__value_.__l.__data_;
    int64_t cap = v125->__r_.__value_.__l.__cap_;
    *(_OWORD *)std::string __p = v126;
    v125->__r_.__value_.__l.__size_ = 0LL;
    v125->__r_.__value_.__l.__cap_ = 0LL;
    v125->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      char v127 = __p;
    }
    else {
      char v127 = (void **)__p[0];
    }
    if (cap >= 0) {
      std::string::size_type v128 = HIBYTE(cap);
    }
    else {
      std::string::size_type v128 = (std::string::size_type)__p[1];
    }
    std::string::append(&v564, (const std::string::value_type *)v127, v128);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
    sub_100021C30(1uLL, (uint64_t)qword_10007C640, &v562);
    unsigned __int8 v129 = std::string::append(&v562, "Usage");
    __int128 v130 = *(_OWORD *)&v129->__r_.__value_.__l.__data_;
    v563.__r_.__value_.__l.__cap_ = v129->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v563.__r_.__value_.__l.__data_ = v130;
    v129->__r_.__value_.__l.__size_ = 0LL;
    v129->__r_.__value_.__l.__cap_ = 0LL;
    v129->__r_.__value_.__r.__words[0] = 0LL;
    sub_1000021BC(&v561, "</th>\n");
    if ((v561.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      unsigned __int8 v131 = &v561;
    }
    else {
      unsigned __int8 v131 = (std::string *)v561.__r_.__value_.__r.__words[0];
    }
    if ((v561.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v132 = v561.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v132 = v561.__r_.__value_.__l.__size_;
    }
    unsigned __int8 v133 = std::string::append(&v563, (const std::string::value_type *)v131, v132);
    __int128 v134 = *(_OWORD *)&v133->__r_.__value_.__l.__data_;
    int64_t cap = v133->__r_.__value_.__l.__cap_;
    *(_OWORD *)std::string __p = v134;
    v133->__r_.__value_.__l.__size_ = 0LL;
    v133->__r_.__value_.__l.__cap_ = 0LL;
    v133->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      char v135 = __p;
    }
    else {
      char v135 = (void **)__p[0];
    }
    if (cap >= 0) {
      std::string::size_type v136 = HIBYTE(cap);
    }
    else {
      std::string::size_type v136 = (std::string::size_type)__p[1];
    }
    std::string::append(&v564, (const std::string::value_type *)v135, v136);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
    sub_100021C30(1uLL, (uint64_t)qword_10007C640, &v562);
    v137 = std::string::append(&v562, "Full");
    __int128 v138 = *(_OWORD *)&v137->__r_.__value_.__l.__data_;
    v563.__r_.__value_.__l.__cap_ = v137->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v563.__r_.__value_.__l.__data_ = v138;
    v137->__r_.__value_.__l.__size_ = 0LL;
    v137->__r_.__value_.__l.__cap_ = 0LL;
    v137->__r_.__value_.__r.__words[0] = 0LL;
    sub_1000021BC(&v561, "</th>\n");
    if ((v561.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      v139 = &v561;
    }
    else {
      v139 = (std::string *)v561.__r_.__value_.__r.__words[0];
    }
    if ((v561.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v140 = v561.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v140 = v561.__r_.__value_.__l.__size_;
    }
    v141 = std::string::append(&v563, (const std::string::value_type *)v139, v140);
    __int128 v142 = *(_OWORD *)&v141->__r_.__value_.__l.__data_;
    int64_t cap = v141->__r_.__value_.__l.__cap_;
    *(_OWORD *)std::string __p = v142;
    v141->__r_.__value_.__l.__size_ = 0LL;
    v141->__r_.__value_.__l.__cap_ = 0LL;
    v141->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      std::string v143 = __p;
    }
    else {
      std::string v143 = (void **)__p[0];
    }
    if (cap >= 0) {
      std::string::size_type v144 = HIBYTE(cap);
    }
    else {
      std::string::size_type v144 = (std::string::size_type)__p[1];
    }
    std::string::append(&v564, (const std::string::value_type *)v143, v144);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
    sub_100021C30(1uLL, (uint64_t)qword_10007C640, &v562);
    uint64_t v145 = std::string::append(&v562, "Full Overrides");
    __int128 v146 = *(_OWORD *)&v145->__r_.__value_.__l.__data_;
    v563.__r_.__value_.__l.__cap_ = v145->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v563.__r_.__value_.__l.__data_ = v146;
    v145->__r_.__value_.__l.__size_ = 0LL;
    v145->__r_.__value_.__l.__cap_ = 0LL;
    v145->__r_.__value_.__r.__words[0] = 0LL;
    sub_1000021BC(&v561, "</th>\n");
    if ((v561.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v147 = &v561;
    }
    else {
      uint64_t v147 = (std::string *)v561.__r_.__value_.__r.__words[0];
    }
    if ((v561.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v148 = v561.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v148 = v561.__r_.__value_.__l.__size_;
    }
    __int128 v149 = std::string::append(&v563, (const std::string::value_type *)v147, v148);
    __int128 v150 = *(_OWORD *)&v149->__r_.__value_.__l.__data_;
    int64_t cap = v149->__r_.__value_.__l.__cap_;
    *(_OWORD *)std::string __p = v150;
    v149->__r_.__value_.__l.__size_ = 0LL;
    v149->__r_.__value_.__l.__cap_ = 0LL;
    v149->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      __int128 v151 = __p;
    }
    else {
      __int128 v151 = (void **)__p[0];
    }
    if (cap >= 0) {
      std::string::size_type v152 = HIBYTE(cap);
    }
    else {
      std::string::size_type v152 = (std::string::size_type)__p[1];
    }
    std::string::append(&v564, (const std::string::value_type *)v151, v152);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
    sub_100021C30(1uLL, (uint64_t)qword_10007C640, &v562);
    v153 = std::string::append(&v562, "Supporting");
    __int128 v154 = *(_OWORD *)&v153->__r_.__value_.__l.__data_;
    v563.__r_.__value_.__l.__cap_ = v153->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v563.__r_.__value_.__l.__data_ = v154;
    v153->__r_.__value_.__l.__size_ = 0LL;
    v153->__r_.__value_.__l.__cap_ = 0LL;
    v153->__r_.__value_.__r.__words[0] = 0LL;
    sub_1000021BC(&v561, "</th>\n");
    if ((v561.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      v155 = &v561;
    }
    else {
      v155 = (std::string *)v561.__r_.__value_.__r.__words[0];
    }
    if ((v561.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v156 = v561.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v156 = v561.__r_.__value_.__l.__size_;
    }
    v157 = std::string::append(&v563, (const std::string::value_type *)v155, v156);
    __int128 v158 = *(_OWORD *)&v157->__r_.__value_.__l.__data_;
    int64_t cap = v157->__r_.__value_.__l.__cap_;
    *(_OWORD *)std::string __p = v158;
    v157->__r_.__value_.__l.__size_ = 0LL;
    v157->__r_.__value_.__l.__cap_ = 0LL;
    v157->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      v159 = __p;
    }
    else {
      v159 = (void **)__p[0];
    }
    if (cap >= 0) {
      std::string::size_type v160 = HIBYTE(cap);
    }
    else {
      std::string::size_type v160 = (std::string::size_type)__p[1];
    }
    std::string::append(&v564, (const std::string::value_type *)v159, v160);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
    sub_100021C30(1uLL, (uint64_t)qword_10007C640, &v562);
    v161 = std::string::append(&v562, "Supporting Overrides");
    __int128 v162 = *(_OWORD *)&v161->__r_.__value_.__l.__data_;
    v563.__r_.__value_.__l.__cap_ = v161->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v563.__r_.__value_.__l.__data_ = v162;
    v161->__r_.__value_.__l.__size_ = 0LL;
    v161->__r_.__value_.__l.__cap_ = 0LL;
    v161->__r_.__value_.__r.__words[0] = 0LL;
    sub_1000021BC(&v561, "</th>\n");
    if ((v561.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      v163 = &v561;
    }
    else {
      v163 = (std::string *)v561.__r_.__value_.__r.__words[0];
    }
    if ((v561.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v164 = v561.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v164 = v561.__r_.__value_.__l.__size_;
    }
    v165 = std::string::append(&v563, (const std::string::value_type *)v163, v164);
    __int128 v166 = *(_OWORD *)&v165->__r_.__value_.__l.__data_;
    int64_t cap = v165->__r_.__value_.__l.__cap_;
    *(_OWORD *)std::string __p = v166;
    v165->__r_.__value_.__l.__size_ = 0LL;
    v165->__r_.__value_.__l.__cap_ = 0LL;
    v165->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      v167 = __p;
    }
    else {
      v167 = (void **)__p[0];
    }
    if (cap >= 0) {
      std::string::size_type v168 = HIBYTE(cap);
    }
    else {
      std::string::size_type v168 = (std::string::size_type)__p[1];
    }
    std::string::append(&v564, (const std::string::value_type *)v167, v168);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
    std::string::append(&v564, "</tr>\n");
    siri::dialogengine::PatternSchema::GetGroups(v570);
    v169 = (std::__shared_weak_count **)__p[0];
    v516 = (char *)__p[1];
    if (__p[0] != __p[1])
    {
      unint64_t v519 = v11 + 5;
      unint64_t v515 = v11 + 12;
      unint64_t v529 = v11 + 1;
      do
      {
        v517 = v169;
        v170 = (siri::dialogengine::PatternSchemaGroup *)*v169;
        v518 = v169[1];
        if (v518)
        {
          p_shared_owners = (unint64_t *)&v518->__shared_owners_;
          do
            unint64_t v172 = __ldxr(p_shared_owners);
          while (__stxr(v172 + 1, p_shared_owners));
        }

        std::string::append(&v564, "\n");
        siri::dialogengine::PatternSchemaGroup::GetName(v170);
        v173 = std::string::insert(&v560, 0LL, "Group: ");
        __int128 v174 = *(_OWORD *)&v173->__r_.__value_.__l.__data_;
        v561.__r_.__value_.__l.__cap_ = v173->__r_.__value_.__l.__cap_;
        *(_OWORD *)&v561.__r_.__value_.__l.__data_ = v174;
        v173->__r_.__value_.__l.__size_ = 0LL;
        v173->__r_.__value_.__l.__cap_ = 0LL;
        v173->__r_.__value_.__r.__words[0] = 0LL;
        v175 = std::string::append(&v561, "");
        __int128 v176 = *(_OWORD *)&v175->__r_.__value_.__l.__data_;
        v562.__r_.__value_.__l.__cap_ = v175->__r_.__value_.__l.__cap_;
        *(_OWORD *)&v562.__r_.__value_.__l.__data_ = v176;
        v175->__r_.__value_.__l.__size_ = 0LL;
        v175->__r_.__value_.__l.__cap_ = 0LL;
        v175->__r_.__value_.__r.__words[0] = 0LL;
        sub_100021DB4((uint64_t)&v562, &v563);
        if ((v563.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          v177 = &v563;
        }
        else {
          v177 = (std::string *)v563.__r_.__value_.__r.__words[0];
        }
        if ((v563.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          std::string::size_type v178 = v563.__r_.__value_.__s.__size_;
        }
        else {
          std::string::size_type v178 = v563.__r_.__value_.__l.__size_;
        }
        std::string::append(&v564, (const std::string::value_type *)v177, v178);
        (*(void (**)(std::string *__return_ptr, siri::dialogengine::PatternSchemaGroup *))(*(void *)v170 + 48LL))( &v563,  v170);
        std::string::size_type v179 = v563.__r_.__value_.__l.__size_;
        std::string::size_type v180 = v563.__r_.__value_.__r.__words[0];
        v562.__r_.__value_.__r.__words[0] = (std::string::size_type)&v563;
        sub_1000027F4((void ***)&v562);
        if (v179 != v180)
        {
          std::string::append(&v564, "<tr>\n");
          sub_1000021BC(&v560, (char *)&unk_10006A022);
          sub_100021E40(1uLL, 1uLL, (uint64_t)&v560, &v561);
          siri::dialogengine::PatternSchemaGroup::GetName(v170);
          sub_1000021BC(v556, (char *)&unk_10006A022);
          memset(v555, 0, sizeof(v555));
          sub_1000021BC(v553, (char *)&unk_10006A022);
          sub_100022150((uint64_t)&v558, (uint64_t)v556, v555, (uint64_t *)v553, 0, &v559);
          if ((v559.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            v181 = &v559;
          }
          else {
            v181 = (std::string *)v559.__r_.__value_.__r.__words[0];
          }
          if ((v559.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v182 = v559.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type v182 = v559.__r_.__value_.__l.__size_;
          }
          v183 = std::string::append(&v561, (const std::string::value_type *)v181, v182);
          __int128 v184 = *(_OWORD *)&v183->__r_.__value_.__l.__data_;
          v562.__r_.__value_.__l.__cap_ = v183->__r_.__value_.__l.__cap_;
          *(_OWORD *)&v562.__r_.__value_.__l.__data_ = v184;
          v183->__r_.__value_.__l.__size_ = 0LL;
          v183->__r_.__value_.__l.__cap_ = 0LL;
          v183->__r_.__value_.__r.__words[0] = 0LL;
          sub_1000021BC(&v552, "</td>\n");
          if ((v552.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            v185 = &v552;
          }
          else {
            v185 = (std::string *)v552.__r_.__value_.__r.__words[0];
          }
          if ((v552.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v186 = v552.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type v186 = v552.__r_.__value_.__l.__size_;
          }
          v187 = std::string::append(&v562, (const std::string::value_type *)v185, v186);
          __int128 v188 = *(_OWORD *)&v187->__r_.__value_.__l.__data_;
          v563.__r_.__value_.__l.__cap_ = v187->__r_.__value_.__l.__cap_;
          *(_OWORD *)&v563.__r_.__value_.__l.__data_ = v188;
          v187->__r_.__value_.__l.__size_ = 0LL;
          v187->__r_.__value_.__l.__cap_ = 0LL;
          v187->__r_.__value_.__r.__words[0] = 0LL;
          if ((v563.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            v189 = &v563;
          }
          else {
            v189 = (std::string *)v563.__r_.__value_.__r.__words[0];
          }
          if ((v563.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v190 = v563.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type v190 = v563.__r_.__value_.__l.__size_;
          }
          std::string::append(&v564, (const std::string::value_type *)v189, v190);
          if (v554 < 0) {
            operator delete(v553[0]);
          }
          v552.__r_.__value_.__r.__words[0] = (std::string::size_type)v555;
          sub_1000027F4((void ***)&v552);
          if (v557 < 0) {
            operator delete(v556[0]);
          }
          sub_100021E40(1uLL, 1uLL, (uint64_t)qword_10007C658, &v561);
          (*(void (**)(std::string *__return_ptr, siri::dialogengine::PatternSchemaGroup *))(*(void *)v170 + 40LL))( &v559,  v170);
          sub_1000229C0((uint64_t *)&v559, &v560);
          if ((v560.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            v191 = &v560;
          }
          else {
            v191 = (std::string *)v560.__r_.__value_.__r.__words[0];
          }
          if ((v560.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v192 = v560.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type v192 = v560.__r_.__value_.__l.__size_;
          }
          v193 = std::string::append(&v561, (const std::string::value_type *)v191, v192);
          __int128 v194 = *(_OWORD *)&v193->__r_.__value_.__l.__data_;
          v562.__r_.__value_.__l.__cap_ = v193->__r_.__value_.__l.__cap_;
          *(_OWORD *)&v562.__r_.__value_.__l.__data_ = v194;
          v193->__r_.__value_.__l.__size_ = 0LL;
          v193->__r_.__value_.__l.__cap_ = 0LL;
          v193->__r_.__value_.__r.__words[0] = 0LL;
          sub_1000021BC(&v558, "</td>\n");
          if ((v558.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            v195 = &v558;
          }
          else {
            v195 = (std::string *)v558.__r_.__value_.__r.__words[0];
          }
          if ((v558.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v196 = v558.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type v196 = v558.__r_.__value_.__l.__size_;
          }
          v197 = std::string::append(&v562, (const std::string::value_type *)v195, v196);
          __int128 v198 = *(_OWORD *)&v197->__r_.__value_.__l.__data_;
          v563.__r_.__value_.__l.__cap_ = v197->__r_.__value_.__l.__cap_;
          *(_OWORD *)&v563.__r_.__value_.__l.__data_ = v198;
          v197->__r_.__value_.__l.__size_ = 0LL;
          v197->__r_.__value_.__l.__cap_ = 0LL;
          v197->__r_.__value_.__r.__words[0] = 0LL;
          if ((v563.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            v199 = &v563;
          }
          else {
            v199 = (std::string *)v563.__r_.__value_.__r.__words[0];
          }
          if ((v563.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v200 = v563.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type v200 = v563.__r_.__value_.__l.__size_;
          }
          std::string::append(&v564, (const std::string::value_type *)v199, v200);
          v558.__r_.__value_.__r.__words[0] = (std::string::size_type)&v559;
          sub_100007BFC((void ***)&v558);
          sub_100021E40(1uLL, 1uLL, (uint64_t)qword_10007C610, &v562);
          sub_1000021BC(&v561, "</td>\n");
          if ((v561.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            v201 = &v561;
          }
          else {
            v201 = (std::string *)v561.__r_.__value_.__r.__words[0];
          }
          if ((v561.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v202 = v561.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type v202 = v561.__r_.__value_.__l.__size_;
          }
          v203 = std::string::append(&v562, (const std::string::value_type *)v201, v202);
          __int128 v204 = *(_OWORD *)&v203->__r_.__value_.__l.__data_;
          v563.__r_.__value_.__l.__cap_ = v203->__r_.__value_.__l.__cap_;
          *(_OWORD *)&v563.__r_.__value_.__l.__data_ = v204;
          v203->__r_.__value_.__l.__size_ = 0LL;
          v203->__r_.__value_.__l.__cap_ = 0LL;
          v203->__r_.__value_.__r.__words[0] = 0LL;
          if ((v563.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            v205 = &v563;
          }
          else {
            v205 = (std::string *)v563.__r_.__value_.__r.__words[0];
          }
          if ((v563.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v206 = v563.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type v206 = v563.__r_.__value_.__l.__size_;
          }
          std::string::append(&v564, (const std::string::value_type *)v205, v206);
          sub_1000021BC(&v562, (char *)&unk_10006A022);
          sub_100021E40(v515, 1uLL, (uint64_t)&v562, &v563);
          if ((v563.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            v207 = &v563;
          }
          else {
            v207 = (std::string *)v563.__r_.__value_.__r.__words[0];
          }
          if ((v563.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v208 = v563.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type v208 = v563.__r_.__value_.__l.__size_;
          }
          std::string::append(&v564, (const std::string::value_type *)v207, v208);
          (*(void (**)(std::string *__return_ptr, siri::dialogengine::PatternSchemaGroup *))(*(void *)v170 + 48LL))( &v563,  v170);
          std::string::size_type v210 = v563.__r_.__value_.__l.__size_;
          std::string::size_type v209 = v563.__r_.__value_.__r.__words[0];
          if (v563.__r_.__value_.__r.__words[0] != v563.__r_.__value_.__l.__size_)
          {
            char v211 = 1;
            do
            {
              if ((v211 & 1) == 0) {
                std::string::append(&v564, "<br/> or ");
              }
              std::operator+<char>(&v561, "<b>", v209);
              v212 = std::string::append(&v561, "</b>");
              __int128 v213 = *(_OWORD *)&v212->__r_.__value_.__l.__data_;
              v562.__r_.__value_.__l.__cap_ = v212->__r_.__value_.__l.__cap_;
              *(_OWORD *)&v562.__r_.__value_.__l.__data_ = v213;
              v212->__r_.__value_.__l.__size_ = 0LL;
              v212->__r_.__value_.__l.__cap_ = 0LL;
              v212->__r_.__value_.__r.__words[0] = 0LL;
              if ((v562.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                v214 = &v562;
              }
              else {
                v214 = (std::string *)v562.__r_.__value_.__r.__words[0];
              }
              if ((v562.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                std::string::size_type v215 = v562.__r_.__value_.__s.__size_;
              }
              else {
                std::string::size_type v215 = v562.__r_.__value_.__l.__size_;
              }
              std::string::append(&v564, (const std::string::value_type *)v214, v215);
              char v211 = 0;
              v209 += 24LL;
            }

            while (v209 != v210);
          }

          v562.__r_.__value_.__r.__words[0] = (std::string::size_type)&v563;
          sub_1000027F4((void ***)&v562);
          sub_1000021BC(&v563, "</td>\n");
          if ((v563.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            v216 = &v563;
          }
          else {
            v216 = (std::string *)v563.__r_.__value_.__r.__words[0];
          }
          if ((v563.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v217 = v563.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type v217 = v563.__r_.__value_.__l.__size_;
          }
          std::string::append(&v564, (const std::string::value_type *)v216, v217);
          std::string::append(&v564, "</tr>\n");
        }

        (*(void (**)(std::string *__return_ptr, siri::dialogengine::PatternSchemaGroup *))(*(void *)v170 + 56LL))( &v563,  v170);
        std::string::size_type v218 = v563.__r_.__value_.__l.__size_;
        std::string::size_type v219 = v563.__r_.__value_.__r.__words[0];
        v562.__r_.__value_.__r.__words[0] = (std::string::size_type)&v563;
        sub_100007BFC((void ***)&v562);
        siri::dialogengine::PatternSchemaGroup::GetName(v170);
        v561.__r_.__value_.__r.__words[0] = (std::string::size_type)&v563;
        v527 = v170;
        v220 = (uint64_t *)*((void *)sub_100023190( &v565,  (const void **)&v563.__r_.__value_.__l.__data_,  (uint64_t)&std::piecewise_construct,  &v561)
                          + 7);
        unint64_t v221 = 0LL;
        unint64_t v222 = (uint64_t)(v218 - v219) >> 4;
        v530 = v220;
        unint64_t v223 = v220[5];
        if (v222 <= v223) {
          uint64_t v224 = v220[5];
        }
        else {
          uint64_t v224 = (uint64_t)(v218 - v219) >> 4;
        }
        unint64_t v524 = v220[5];
        unint64_t v525 = (uint64_t)(v218 - v219) >> 4;
        uint64_t v522 = v224 - v222 + 1;
        unint64_t v523 = v222 - 1;
        unint64_t __val = v224;
        uint64_t v520 = v224 - v223 + 1;
        unint64_t v521 = v223 - 1;
        while (v221 != __val)
        {
          std::string::append(&v564, "\n");
          siri::dialogengine::PatternSchemaGroup::GetName(v527);
          v225 = std::string::insert(&v552, 0LL, "Group ");
          __int128 v226 = *(_OWORD *)&v225->__r_.__value_.__l.__data_;
          v558.__r_.__value_.__l.__cap_ = v225->__r_.__value_.__l.__cap_;
          *(_OWORD *)&v558.__r_.__value_.__l.__data_ = v226;
          v225->__r_.__value_.__l.__size_ = 0LL;
          v225->__r_.__value_.__l.__cap_ = 0LL;
          v225->__r_.__value_.__r.__words[0] = 0LL;
          v227 = std::string::append(&v558, " row ");
          __int128 v228 = *(_OWORD *)&v227->__r_.__value_.__l.__data_;
          v559.__r_.__value_.__l.__cap_ = v227->__r_.__value_.__l.__cap_;
          *(_OWORD *)&v559.__r_.__value_.__l.__data_ = v228;
          v227->__r_.__value_.__l.__size_ = 0LL;
          v227->__r_.__value_.__l.__cap_ = 0LL;
          v227->__r_.__value_.__r.__words[0] = 0LL;
          unint64_t v526 = v221 + 1;
          std::to_string(&v551, v221 + 1);
          if ((v551.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            v229 = &v551;
          }
          else {
            v229 = (std::string *)v551.__r_.__value_.__r.__words[0];
          }
          if ((v551.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v230 = v551.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type v230 = v551.__r_.__value_.__l.__size_;
          }
          v231 = std::string::append(&v559, (const std::string::value_type *)v229, v230);
          __int128 v232 = *(_OWORD *)&v231->__r_.__value_.__l.__data_;
          v560.__r_.__value_.__l.__cap_ = v231->__r_.__value_.__l.__cap_;
          *(_OWORD *)&v560.__r_.__value_.__l.__data_ = v232;
          v231->__r_.__value_.__l.__size_ = 0LL;
          v231->__r_.__value_.__l.__cap_ = 0LL;
          v231->__r_.__value_.__r.__words[0] = 0LL;
          v233 = std::string::append(&v560, " of ");
          __int128 v234 = *(_OWORD *)&v233->__r_.__value_.__l.__data_;
          v561.__r_.__value_.__l.__cap_ = v233->__r_.__value_.__l.__cap_;
          *(_OWORD *)&v561.__r_.__value_.__l.__data_ = v234;
          v233->__r_.__value_.__l.__size_ = 0LL;
          v233->__r_.__value_.__l.__cap_ = 0LL;
          v233->__r_.__value_.__r.__words[0] = 0LL;
          std::to_string(&v550, __val);
          if ((v550.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            v235 = &v550;
          }
          else {
            v235 = (std::string *)v550.__r_.__value_.__r.__words[0];
          }
          if ((v550.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v236 = v550.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type v236 = v550.__r_.__value_.__l.__size_;
          }
          v237 = std::string::append(&v561, (const std::string::value_type *)v235, v236);
          __int128 v238 = *(_OWORD *)&v237->__r_.__value_.__l.__data_;
          v562.__r_.__value_.__l.__cap_ = v237->__r_.__value_.__l.__cap_;
          *(_OWORD *)&v562.__r_.__value_.__l.__data_ = v238;
          v237->__r_.__value_.__l.__size_ = 0LL;
          v237->__r_.__value_.__l.__cap_ = 0LL;
          v237->__r_.__value_.__r.__words[0] = 0LL;
          sub_100021DB4((uint64_t)&v562, &v563);
          if ((v563.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            v239 = &v563;
          }
          else {
            v239 = (std::string *)v563.__r_.__value_.__r.__words[0];
          }
          if ((v563.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v240 = v563.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type v240 = v563.__r_.__value_.__l.__size_;
          }
          std::string::append(&v564, (const std::string::value_type *)v239, v240);
          std::string::append(&v564, "<tr>\n");
          if (!v221)
          {
            sub_1000021BC(&v560, (char *)&unk_10006A022);
            sub_100021E40(1uLL, __val, (uint64_t)&v560, &v561);
            siri::dialogengine::PatternSchemaGroup::GetName(v527);
            sub_1000021BC(v548, (char *)&unk_10006A022);
            memset(v547, 0, sizeof(v547));
            sub_1000021BC(v545, (char *)&unk_10006A022);
            sub_100022150((uint64_t)&v558, (uint64_t)v548, v547, (uint64_t *)v545, 0, &v559);
            if ((v559.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              v241 = &v559;
            }
            else {
              v241 = (std::string *)v559.__r_.__value_.__r.__words[0];
            }
            if ((v559.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              std::string::size_type v242 = v559.__r_.__value_.__s.__size_;
            }
            else {
              std::string::size_type v242 = v559.__r_.__value_.__l.__size_;
            }
            v243 = std::string::append(&v561, (const std::string::value_type *)v241, v242);
            __int128 v244 = *(_OWORD *)&v243->__r_.__value_.__l.__data_;
            v562.__r_.__value_.__l.__cap_ = v243->__r_.__value_.__l.__cap_;
            *(_OWORD *)&v562.__r_.__value_.__l.__data_ = v244;
            v243->__r_.__value_.__l.__size_ = 0LL;
            v243->__r_.__value_.__l.__cap_ = 0LL;
            v243->__r_.__value_.__r.__words[0] = 0LL;
            sub_1000021BC(&v552, "</td>\n");
            if ((v552.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              v245 = &v552;
            }
            else {
              v245 = (std::string *)v552.__r_.__value_.__r.__words[0];
            }
            if ((v552.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              std::string::size_type v246 = v552.__r_.__value_.__s.__size_;
            }
            else {
              std::string::size_type v246 = v552.__r_.__value_.__l.__size_;
            }
            v247 = std::string::append(&v562, (const std::string::value_type *)v245, v246);
            __int128 v248 = *(_OWORD *)&v247->__r_.__value_.__l.__data_;
            v563.__r_.__value_.__l.__cap_ = v247->__r_.__value_.__l.__cap_;
            *(_OWORD *)&v563.__r_.__value_.__l.__data_ = v248;
            v247->__r_.__value_.__l.__size_ = 0LL;
            v247->__r_.__value_.__l.__cap_ = 0LL;
            v247->__r_.__value_.__r.__words[0] = 0LL;
            if ((v563.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              v249 = &v563;
            }
            else {
              v249 = (std::string *)v563.__r_.__value_.__r.__words[0];
            }
            if ((v563.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              std::string::size_type v250 = v563.__r_.__value_.__s.__size_;
            }
            else {
              std::string::size_type v250 = v563.__r_.__value_.__l.__size_;
            }
            std::string::append(&v564, (const std::string::value_type *)v249, v250);
            if (v546 < 0) {
              operator delete(v545[0]);
            }
            v552.__r_.__value_.__r.__words[0] = (std::string::size_type)v547;
            sub_1000027F4((void ***)&v552);
            if (v549 < 0) {
              operator delete(v548[0]);
            }
            sub_100021E40(1uLL, __val, (uint64_t)qword_10007C658, &v561);
            (*(void (**)(std::string *__return_ptr))(*(void *)v527 + 40LL))(&v559);
            sub_1000229C0((uint64_t *)&v559, &v560);
            if ((v560.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              v251 = &v560;
            }
            else {
              v251 = (std::string *)v560.__r_.__value_.__r.__words[0];
            }
            if ((v560.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              std::string::size_type v252 = v560.__r_.__value_.__s.__size_;
            }
            else {
              std::string::size_type v252 = v560.__r_.__value_.__l.__size_;
            }
            v253 = std::string::append(&v561, (const std::string::value_type *)v251, v252);
            __int128 v254 = *(_OWORD *)&v253->__r_.__value_.__l.__data_;
            v562.__r_.__value_.__l.__cap_ = v253->__r_.__value_.__l.__cap_;
            *(_OWORD *)&v562.__r_.__value_.__l.__data_ = v254;
            v253->__r_.__value_.__l.__size_ = 0LL;
            v253->__r_.__value_.__l.__cap_ = 0LL;
            v253->__r_.__value_.__r.__words[0] = 0LL;
            sub_1000021BC(&v558, "</td>\n");
            if ((v558.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              v255 = &v558;
            }
            else {
              v255 = (std::string *)v558.__r_.__value_.__r.__words[0];
            }
            if ((v558.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              std::string::size_type v256 = v558.__r_.__value_.__s.__size_;
            }
            else {
              std::string::size_type v256 = v558.__r_.__value_.__l.__size_;
            }
            v257 = std::string::append(&v562, (const std::string::value_type *)v255, v256);
            __int128 v258 = *(_OWORD *)&v257->__r_.__value_.__l.__data_;
            v563.__r_.__value_.__l.__cap_ = v257->__r_.__value_.__l.__cap_;
            *(_OWORD *)&v563.__r_.__value_.__l.__data_ = v258;
            v257->__r_.__value_.__l.__size_ = 0LL;
            v257->__r_.__value_.__l.__cap_ = 0LL;
            v257->__r_.__value_.__r.__words[0] = 0LL;
            if ((v563.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              v259 = &v563;
            }
            else {
              v259 = (std::string *)v563.__r_.__value_.__r.__words[0];
            }
            if ((v563.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              std::string::size_type v260 = v563.__r_.__value_.__s.__size_;
            }
            else {
              std::string::size_type v260 = v563.__r_.__value_.__l.__size_;
            }
            std::string::append(&v564, (const std::string::value_type *)v259, v260);
            v558.__r_.__value_.__r.__words[0] = (std::string::size_type)&v559;
            sub_100007BFC((void ***)&v558);
            sub_100021E40(1uLL, __val, (uint64_t)qword_10007C610, &v562);
            sub_1000021BC(&v561, "</td>\n");
            if ((v561.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              v261 = &v561;
            }
            else {
              v261 = (std::string *)v561.__r_.__value_.__r.__words[0];
            }
            if ((v561.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              std::string::size_type v262 = v561.__r_.__value_.__s.__size_;
            }
            else {
              std::string::size_type v262 = v561.__r_.__value_.__l.__size_;
            }
            v263 = std::string::append(&v562, (const std::string::value_type *)v261, v262);
            __int128 v264 = *(_OWORD *)&v263->__r_.__value_.__l.__data_;
            v563.__r_.__value_.__l.__cap_ = v263->__r_.__value_.__l.__cap_;
            *(_OWORD *)&v563.__r_.__value_.__l.__data_ = v264;
            v263->__r_.__value_.__l.__size_ = 0LL;
            v263->__r_.__value_.__l.__cap_ = 0LL;
            v263->__r_.__value_.__r.__words[0] = 0LL;
            if ((v563.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              v265 = &v563;
            }
            else {
              v265 = (std::string *)v563.__r_.__value_.__r.__words[0];
            }
            if ((v563.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              std::string::size_type v266 = v563.__r_.__value_.__s.__size_;
            }
            else {
              std::string::size_type v266 = v563.__r_.__value_.__l.__size_;
            }
            std::string::append(&v564, (const std::string::value_type *)v265, v266);
          }

          std::string::append(&v564, "\n");
          sub_1000021BC(&v562, "Dialog Components");
          sub_100021DB4((uint64_t)&v562, &v563);
          if ((v563.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            v267 = &v563;
          }
          else {
            v267 = (std::string *)v563.__r_.__value_.__r.__words[0];
          }
          if ((v563.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v268 = v563.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type v268 = v563.__r_.__value_.__l.__size_;
          }
          std::string::append(&v564, (const std::string::value_type *)v267, v268);
          if (v221 >= v525)
          {
            if (!(v221 | v525))
            {
              sub_100021E40(6uLL, __val, (uint64_t)qword_10007C670, &v561);
              v321 = std::string::append(&v561, "(None)");
              __int128 v322 = *(_OWORD *)&v321->__r_.__value_.__l.__data_;
              v562.__r_.__value_.__l.__cap_ = v321->__r_.__value_.__l.__cap_;
              *(_OWORD *)&v562.__r_.__value_.__l.__data_ = v322;
              v321->__r_.__value_.__l.__size_ = 0LL;
              v321->__r_.__value_.__l.__cap_ = 0LL;
              v321->__r_.__value_.__r.__words[0] = 0LL;
              sub_1000021BC(&v560, "</td>\n");
              if ((v560.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                v323 = &v560;
              }
              else {
                v323 = (std::string *)v560.__r_.__value_.__r.__words[0];
              }
              if ((v560.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                std::string::size_type v324 = v560.__r_.__value_.__s.__size_;
              }
              else {
                std::string::size_type v324 = v560.__r_.__value_.__l.__size_;
              }
              v325 = std::string::append(&v562, (const std::string::value_type *)v323, v324);
              __int128 v326 = *(_OWORD *)&v325->__r_.__value_.__l.__data_;
              v563.__r_.__value_.__l.__cap_ = v325->__r_.__value_.__l.__cap_;
              *(_OWORD *)&v563.__r_.__value_.__l.__data_ = v326;
              v325->__r_.__value_.__l.__size_ = 0LL;
              v325->__r_.__value_.__l.__cap_ = 0LL;
              v325->__r_.__value_.__r.__words[0] = 0LL;
              if ((v563.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                v327 = &v563;
              }
              else {
                v327 = (std::string *)v563.__r_.__value_.__r.__words[0];
              }
              if ((v563.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                std::string::size_type v328 = v563.__r_.__value_.__s.__size_;
              }
              else {
                std::string::size_type v328 = v563.__r_.__value_.__l.__size_;
              }
              std::string::append(&v564, (const std::string::value_type *)v327, v328);
              if ((char)v561.__r_.__value_.__s.__size_ < 0)
              {
                operator delete(v561.__r_.__value_.__l.__data_);
                if (v221) {
                  goto LABEL_853;
                }
                goto LABEL_832;
              }
            }

LABEL_831:
            if (v221) {
              goto LABEL_853;
            }
            goto LABEL_832;
          }

          if (v221 == v523) {
            unint64_t v269 = v522;
          }
          else {
            unint64_t v269 = 1LL;
          }
          (*(void (**)(std::string *__return_ptr))(*(void *)v527 + 56LL))(&v563);
          __int128 v270 = *(_OWORD *)(v563.__r_.__value_.__r.__words[0] + 16 * v221);
          *(_OWORD *)&v551.__r_.__value_.__l.__data_ = v270;
          __int128 v271 = v270;
          if (*((void *)&v270 + 1))
          {
            v272 = (unint64_t *)(*((void *)&v270 + 1) + 8LL);
            do
              unint64_t v273 = __ldxr(v272);
            while (__stxr(v273 + 1, v272));
          }

          v562.__r_.__value_.__r.__words[0] = (std::string::size_type)&v563;
          sub_100007BFC((void ***)&v562);
          sub_1000021BC(&v560, (char *)&unk_10006A022);
          sub_100021E40(1uLL, v269, (uint64_t)&v560, &v561);
          siri::dialogengine::PatternSchemaComponent::GetName((siri::dialogengine::PatternSchemaComponent *)v271);
          siri::dialogengine::PatternSchemaComponent::GetDefaultComponent((siri::dialogengine::PatternSchemaComponent *)v271);
          siri::dialogengine::PatternSchemaComponent::GetAllowedVariants((siri::dialogengine::PatternSchemaComponent *)v271);
          siri::dialogengine::PatternSchemaComponent::GetDefaultVariant((siri::dialogengine::PatternSchemaComponent *)v271);
          int AllowMultiple = siri::dialogengine::PatternSchemaComponent::GetAllowMultiple((siri::dialogengine::PatternSchemaComponent *)v271);
          sub_100022150((uint64_t)&v558, (uint64_t)&v543, v542, (uint64_t *)&v540, AllowMultiple, &v559);
          if ((v559.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            v275 = &v559;
          }
          else {
            v275 = (std::string *)v559.__r_.__value_.__r.__words[0];
          }
          if ((v559.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v276 = v559.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type v276 = v559.__r_.__value_.__l.__size_;
          }
          v277 = std::string::append(&v561, (const std::string::value_type *)v275, v276);
          __int128 v278 = *(_OWORD *)&v277->__r_.__value_.__l.__data_;
          v562.__r_.__value_.__l.__cap_ = v277->__r_.__value_.__l.__cap_;
          *(_OWORD *)&v562.__r_.__value_.__l.__data_ = v278;
          v277->__r_.__value_.__l.__size_ = 0LL;
          v277->__r_.__value_.__l.__cap_ = 0LL;
          v277->__r_.__value_.__r.__words[0] = 0LL;
          sub_1000021BC(&v552, "</td>\n");
          if ((v552.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            v279 = &v552;
          }
          else {
            v279 = (std::string *)v552.__r_.__value_.__r.__words[0];
          }
          if ((v552.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v280 = v552.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type v280 = v552.__r_.__value_.__l.__size_;
          }
          v281 = std::string::append(&v562, (const std::string::value_type *)v279, v280);
          __int128 v282 = *(_OWORD *)&v281->__r_.__value_.__l.__data_;
          v563.__r_.__value_.__l.__cap_ = v281->__r_.__value_.__l.__cap_;
          *(_OWORD *)&v563.__r_.__value_.__l.__data_ = v282;
          v281->__r_.__value_.__l.__size_ = 0LL;
          v281->__r_.__value_.__l.__cap_ = 0LL;
          v281->__r_.__value_.__r.__words[0] = 0LL;
          if ((v563.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            v283 = &v563;
          }
          else {
            v283 = (std::string *)v563.__r_.__value_.__r.__words[0];
          }
          if ((v563.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v284 = v563.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type v284 = v563.__r_.__value_.__l.__size_;
          }
          std::string::append(&v564, (const std::string::value_type *)v283, v284);
          if (v541 < 0) {
            operator delete(v540);
          }
          v552.__r_.__value_.__r.__words[0] = (std::string::size_type)v542;
          sub_1000027F4((void ***)&v552);
          if (v544 < 0) {
            operator delete(v543);
          }
          sub_100021E40(1uLL, v269, (uint64_t)qword_10007C658, &v561);
          siri::dialogengine::PatternSchemaComponent::GetUsage((siri::dialogengine::PatternSchemaComponent *)v271);
          sub_1000229C0((uint64_t *)&v559, &v560);
          if ((v560.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            v285 = &v560;
          }
          else {
            v285 = (std::string *)v560.__r_.__value_.__r.__words[0];
          }
          if ((v560.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v286 = v560.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type v286 = v560.__r_.__value_.__l.__size_;
          }
          v287 = std::string::append(&v561, (const std::string::value_type *)v285, v286);
          __int128 v288 = *(_OWORD *)&v287->__r_.__value_.__l.__data_;
          v562.__r_.__value_.__l.__cap_ = v287->__r_.__value_.__l.__cap_;
          *(_OWORD *)&v562.__r_.__value_.__l.__data_ = v288;
          v287->__r_.__value_.__l.__size_ = 0LL;
          v287->__r_.__value_.__l.__cap_ = 0LL;
          v287->__r_.__value_.__r.__words[0] = 0LL;
          sub_1000021BC(&v558, "</td>\n");
          if ((v558.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            v289 = &v558;
          }
          else {
            v289 = (std::string *)v558.__r_.__value_.__r.__words[0];
          }
          if ((v558.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v290 = v558.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type v290 = v558.__r_.__value_.__l.__size_;
          }
          v291 = std::string::append(&v562, (const std::string::value_type *)v289, v290);
          __int128 v292 = *(_OWORD *)&v291->__r_.__value_.__l.__data_;
          v563.__r_.__value_.__l.__cap_ = v291->__r_.__value_.__l.__cap_;
          *(_OWORD *)&v563.__r_.__value_.__l.__data_ = v292;
          v291->__r_.__value_.__l.__size_ = 0LL;
          v291->__r_.__value_.__l.__cap_ = 0LL;
          v291->__r_.__value_.__r.__words[0] = 0LL;
          if ((v563.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            v293 = &v563;
          }
          else {
            v293 = (std::string *)v563.__r_.__value_.__r.__words[0];
          }
          if ((v563.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v294 = v563.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type v294 = v563.__r_.__value_.__l.__size_;
          }
          std::string::append(&v564, (const std::string::value_type *)v293, v294);
          v558.__r_.__value_.__r.__words[0] = (std::string::size_type)&v559;
          sub_100007BFC((void ***)&v558);
          sub_100021E40(1uLL, v269, (uint64_t)qword_10007C658, &v561);
          siri::dialogengine::PatternSchemaComponent::GetFullUsage((siri::dialogengine::PatternSchemaComponent *)v271);
          sub_1000229C0((uint64_t *)&v559, &v560);
          if ((v560.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            v295 = &v560;
          }
          else {
            v295 = (std::string *)v560.__r_.__value_.__r.__words[0];
          }
          if ((v560.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v296 = v560.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type v296 = v560.__r_.__value_.__l.__size_;
          }
          v297 = std::string::append(&v561, (const std::string::value_type *)v295, v296);
          __int128 v298 = *(_OWORD *)&v297->__r_.__value_.__l.__data_;
          v562.__r_.__value_.__l.__cap_ = v297->__r_.__value_.__l.__cap_;
          *(_OWORD *)&v562.__r_.__value_.__l.__data_ = v298;
          v297->__r_.__value_.__l.__size_ = 0LL;
          v297->__r_.__value_.__l.__cap_ = 0LL;
          v297->__r_.__value_.__r.__words[0] = 0LL;
          sub_1000021BC(&v558, "</td>\n");
          if ((v558.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            v299 = &v558;
          }
          else {
            v299 = (std::string *)v558.__r_.__value_.__r.__words[0];
          }
          if ((v558.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v300 = v558.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type v300 = v558.__r_.__value_.__l.__size_;
          }
          v301 = std::string::append(&v562, (const std::string::value_type *)v299, v300);
          __int128 v302 = *(_OWORD *)&v301->__r_.__value_.__l.__data_;
          v563.__r_.__value_.__l.__cap_ = v301->__r_.__value_.__l.__cap_;
          *(_OWORD *)&v563.__r_.__value_.__l.__data_ = v302;
          v301->__r_.__value_.__l.__size_ = 0LL;
          v301->__r_.__value_.__l.__cap_ = 0LL;
          v301->__r_.__value_.__r.__words[0] = 0LL;
          if ((v563.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            v303 = &v563;
          }
          else {
            v303 = (std::string *)v563.__r_.__value_.__r.__words[0];
          }
          if ((v563.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v304 = v563.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type v304 = v563.__r_.__value_.__l.__size_;
          }
          std::string::append(&v564, (const std::string::value_type *)v303, v304);
          v558.__r_.__value_.__r.__words[0] = (std::string::size_type)&v559;
          sub_100007BFC((void ***)&v558);
          siri::dialogengine::PatternSchemaComponent::GetFullExamples((siri::dialogengine::PatternSchemaComponent *)v271);
          sub_100022D64(v269, (uint64_t *)&v562, &v563);
          if ((v563.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            v305 = &v563;
          }
          else {
            v305 = (std::string *)v563.__r_.__value_.__r.__words[0];
          }
          if ((v563.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v306 = v563.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type v306 = v563.__r_.__value_.__l.__size_;
          }
          std::string::append(&v564, (const std::string::value_type *)v305, v306);
          v561.__r_.__value_.__r.__words[0] = (std::string::size_type)&v562;
          sub_1000027F4((void ***)&v561);
          sub_100021E40(1uLL, v269, (uint64_t)qword_10007C658, &v561);
          siri::dialogengine::PatternSchemaComponent::GetSupportingUsage((siri::dialogengine::PatternSchemaComponent *)v271);
          sub_1000229C0((uint64_t *)&v559, &v560);
          if ((v560.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            v307 = &v560;
          }
          else {
            v307 = (std::string *)v560.__r_.__value_.__r.__words[0];
          }
          if ((v560.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v308 = v560.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type v308 = v560.__r_.__value_.__l.__size_;
          }
          v309 = std::string::append(&v561, (const std::string::value_type *)v307, v308);
          __int128 v310 = *(_OWORD *)&v309->__r_.__value_.__l.__data_;
          v562.__r_.__value_.__l.__cap_ = v309->__r_.__value_.__l.__cap_;
          *(_OWORD *)&v562.__r_.__value_.__l.__data_ = v310;
          v309->__r_.__value_.__l.__size_ = 0LL;
          v309->__r_.__value_.__l.__cap_ = 0LL;
          v309->__r_.__value_.__r.__words[0] = 0LL;
          sub_1000021BC(&v558, "</td>\n");
          if ((v558.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            v311 = &v558;
          }
          else {
            v311 = (std::string *)v558.__r_.__value_.__r.__words[0];
          }
          if ((v558.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v312 = v558.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type v312 = v558.__r_.__value_.__l.__size_;
          }
          v313 = std::string::append(&v562, (const std::string::value_type *)v311, v312);
          __int128 v314 = *(_OWORD *)&v313->__r_.__value_.__l.__data_;
          v563.__r_.__value_.__l.__cap_ = v313->__r_.__value_.__l.__cap_;
          *(_OWORD *)&v563.__r_.__value_.__l.__data_ = v314;
          v313->__r_.__value_.__l.__size_ = 0LL;
          v313->__r_.__value_.__l.__cap_ = 0LL;
          v313->__r_.__value_.__r.__words[0] = 0LL;
          if ((v563.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            v315 = &v563;
          }
          else {
            v315 = (std::string *)v563.__r_.__value_.__r.__words[0];
          }
          if ((v563.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v316 = v563.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type v316 = v563.__r_.__value_.__l.__size_;
          }
          std::string::append(&v564, (const std::string::value_type *)v315, v316);
          v558.__r_.__value_.__r.__words[0] = (std::string::size_type)&v559;
          sub_100007BFC((void ***)&v558);
          siri::dialogengine::PatternSchemaComponent::GetSupportingExamples((siri::dialogengine::PatternSchemaComponent *)v271);
          sub_100022D64(v269, (uint64_t *)&v562, &v563);
          if ((v563.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            v317 = &v563;
          }
          else {
            v317 = (std::string *)v563.__r_.__value_.__r.__words[0];
          }
          if ((v563.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v318 = v563.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type v318 = v563.__r_.__value_.__l.__size_;
          }
          std::string::append(&v564, (const std::string::value_type *)v317, v318);
          v561.__r_.__value_.__r.__words[0] = (std::string::size_type)&v562;
          sub_1000027F4((void ***)&v561);
          if (!*((void *)&v271 + 1)) {
            goto LABEL_831;
          }
          v319 = (unint64_t *)(*((void *)&v271 + 1) + 8LL);
          do
            unint64_t v320 = __ldaxr(v319);
          while (__stlxr(v320 - 1, v319));
          if (v320) {
            goto LABEL_831;
          }
          (*(void (**)(void))(**((void **)&v271 + 1) + 16LL))(*((void *)&v271 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v271 + 1));
          if (v221) {
            goto LABEL_853;
          }
LABEL_832:
          std::string::append(&v564, "\n");
          sub_100021E40(1uLL, __val, (uint64_t)qword_10007C610, &v561);
          v329 = std::string::append(&v561, "&#10132;");
          __int128 v330 = *(_OWORD *)&v329->__r_.__value_.__l.__data_;
          v562.__r_.__value_.__l.__cap_ = v329->__r_.__value_.__l.__cap_;
          *(_OWORD *)&v562.__r_.__value_.__l.__data_ = v330;
          v329->__r_.__value_.__l.__size_ = 0LL;
          v329->__r_.__value_.__l.__cap_ = 0LL;
          v329->__r_.__value_.__r.__words[0] = 0LL;
          sub_1000021BC(&v560, "</td>\n");
          if ((v560.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            v331 = &v560;
          }
          else {
            v331 = (std::string *)v560.__r_.__value_.__r.__words[0];
          }
          if ((v560.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v332 = v560.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type v332 = v560.__r_.__value_.__l.__size_;
          }
          v333 = std::string::append(&v562, (const std::string::value_type *)v331, v332);
          __int128 v334 = *(_OWORD *)&v333->__r_.__value_.__l.__data_;
          v563.__r_.__value_.__l.__cap_ = v333->__r_.__value_.__l.__cap_;
          *(_OWORD *)&v563.__r_.__value_.__l.__data_ = v334;
          v333->__r_.__value_.__l.__size_ = 0LL;
          v333->__r_.__value_.__l.__cap_ = 0LL;
          v333->__r_.__value_.__r.__words[0] = 0LL;
          if ((v563.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            v335 = &v563;
          }
          else {
            v335 = (std::string *)v563.__r_.__value_.__r.__words[0];
          }
          if ((v563.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v336 = v563.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type v336 = v563.__r_.__value_.__l.__size_;
          }
          std::string::append(&v564, (const std::string::value_type *)v335, v336);
LABEL_853:
          std::string::append(&v564, "\n");
          sub_1000021BC(&v562, "Visual Components");
          sub_100021DB4((uint64_t)&v562, &v563);
          if ((v563.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            v337 = &v563;
          }
          else {
            v337 = (std::string *)v563.__r_.__value_.__r.__words[0];
          }
          if ((v563.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v338 = v563.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type v338 = v563.__r_.__value_.__l.__size_;
          }
          std::string::append(&v564, (const std::string::value_type *)v337, v338);
          if (v221 >= v524)
          {
            if (!(v221 | v524))
            {
              sub_100021E40(v519, __val, (uint64_t)qword_10007C670, &v561);
              v382 = std::string::append(&v561, "(None)");
              __int128 v383 = *(_OWORD *)&v382->__r_.__value_.__l.__data_;
              v562.__r_.__value_.__l.__cap_ = v382->__r_.__value_.__l.__cap_;
              *(_OWORD *)&v562.__r_.__value_.__l.__data_ = v383;
              v382->__r_.__value_.__l.__size_ = 0LL;
              v382->__r_.__value_.__l.__cap_ = 0LL;
              v382->__r_.__value_.__r.__words[0] = 0LL;
              sub_1000021BC(&v560, "</td>\n");
              if ((v560.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                v384 = &v560;
              }
              else {
                v384 = (std::string *)v560.__r_.__value_.__r.__words[0];
              }
              if ((v560.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                std::string::size_type v385 = v560.__r_.__value_.__s.__size_;
              }
              else {
                std::string::size_type v385 = v560.__r_.__value_.__l.__size_;
              }
              v386 = std::string::append(&v562, (const std::string::value_type *)v384, v385);
              __int128 v387 = *(_OWORD *)&v386->__r_.__value_.__l.__data_;
              v563.__r_.__value_.__l.__cap_ = v386->__r_.__value_.__l.__cap_;
              *(_OWORD *)&v563.__r_.__value_.__l.__data_ = v387;
              v386->__r_.__value_.__l.__size_ = 0LL;
              v386->__r_.__value_.__l.__cap_ = 0LL;
              v386->__r_.__value_.__r.__words[0] = 0LL;
              if ((v563.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                v388 = &v563;
              }
              else {
                v388 = (std::string *)v563.__r_.__value_.__r.__words[0];
              }
              if ((v563.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                std::string::size_type v389 = v563.__r_.__value_.__s.__size_;
              }
              else {
                std::string::size_type v389 = v563.__r_.__value_.__l.__size_;
              }
              std::string::append(&v564, (const std::string::value_type *)v388, v389);
            }
          }

          else
          {
            sub_100014FB0((uint64_t)v530, v221, &v563);
            if (v221 == v521) {
              unint64_t v339 = v520;
            }
            else {
              unint64_t v339 = 1LL;
            }
            std::string::size_type v340 = v563.__r_.__value_.__l.__size_;
            std::string::size_type v341 = v563.__r_.__value_.__r.__words[0];
            if (v563.__r_.__value_.__r.__words[0] != v563.__r_.__value_.__l.__size_)
            {
              v342 = 0LL;
              v343 = 0LL;
              while (1)
              {
                if (siri::dialogengine::VisualComponentsCombination::Entry::GetType(*(siri::dialogengine::VisualComponentsCombination::Entry **)v341) == 4)
                {
                  siri::dialogengine::VisualComponentsCombination::Entry::GetComponentName(*(siri::dialogengine::VisualComponentsCombination::Entry **)v341);
                  sub_100015298(v530, (unsigned __int8 **)&v562, &v561);
                  v344 = (std::__shared_weak_count *)v561.__r_.__value_.__l.__size_;
                  v342 = (siri::dialogengine::PatternSchemaComponent *)v561.__r_.__value_.__r.__words[0];
                  *(_OWORD *)&v561.__r_.__value_.__l.__data_ = 0uLL;
                  if (v343)
                  {
                    v345 = v343 + 1;
                    do
                      unint64_t v346 = __ldaxr(v345);
                    while (__stlxr(v346 - 1, v345));
                    if (!v346)
                    {
                      (*(void (**)(unint64_t *))(*v343 + 16))(v343);
                      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v343);
                    }
                  }

                  v347 = (std::__shared_weak_count *)v561.__r_.__value_.__l.__size_;
                  if (v561.__r_.__value_.__l.__size_)
                  {
                    v348 = (unint64_t *)(v561.__r_.__value_.__l.__size_ + 8);
                    do
                      unint64_t v349 = __ldaxr(v348);
                    while (__stlxr(v349 - 1, v348));
                    if (!v349)
                    {
                      ((void (*)(std::__shared_weak_count *))v347->__on_zero_shared)(v347);
                      std::__shared_weak_count::__release_weak(v347);
                    }
                  }

                  memset(&v562, 0, sizeof(v562));
                  if (v342)
                  {
                    v343 = (unint64_t *)v344;
                  }

                  else
                  {
                    std::string::operator=(&v562, (const std::string *)qword_10007C6D0);
                    v343 = (unint64_t *)operator new(0x140uLL);
                    v343[1] = 0LL;
                    v343[2] = 0LL;
                    unint64_t *v343 = (unint64_t)off_100078EB0;
                    *(_OWORD *)(v343 + 3) = 0u;
                    v342 = (siri::dialogengine::PatternSchemaComponent *)(v343 + 3);
                    *(_OWORD *)(v343 + 5) = 0u;
                    *(_OWORD *)(v343 + 7) = 0u;
                    *(_OWORD *)(v343 + 9) = 0u;
                    *(_OWORD *)(v343 + 11) = 0u;
                    *(_OWORD *)(v343 + 13) = 0u;
                    *(_OWORD *)(v343 + 15) = 0u;
                    *(_OWORD *)(v343 + 17) = 0u;
                    *(_OWORD *)(v343 + 19) = 0u;
                    *(_OWORD *)(v343 + 21) = 0u;
                    *(_OWORD *)(v343 + 23) = 0u;
                    *(_OWORD *)(v343 + 25) = 0u;
                    *(_OWORD *)(v343 + 27) = 0u;
                    *(_OWORD *)(v343 + 29) = 0u;
                    *(_OWORD *)(v343 + 31) = 0u;
                    v343[39] = 0LL;
                    *(_OWORD *)(v343 + 33) = 0u;
                    *(_OWORD *)(v343 + 35) = 0u;
                    *(_OWORD *)(v343 + 37) = 0u;
                    if (v344)
                    {
                      v369 = (unint64_t *)&v344->__shared_owners_;
                      do
                        unint64_t v370 = __ldaxr(v369);
                      while (__stlxr(v370 - 1, v369));
                      if (!v370)
                      {
                        ((void (*)(std::__shared_weak_count *))v344->__on_zero_shared)(v344);
                        std::__shared_weak_count::__release_weak(v344);
                      }
                    }

                    siri::dialogengine::VisualComponentsCombination::Entry::GetComponentName(*(siri::dialogengine::VisualComponentsCombination::Entry **)v341);
                    v371 = std::string::insert(&v559, 0LL, "ERROR: Component ");
                    __int128 v372 = *(_OWORD *)&v371->__r_.__value_.__l.__data_;
                    v560.__r_.__value_.__l.__cap_ = v371->__r_.__value_.__l.__cap_;
                    *(_OWORD *)&v560.__r_.__value_.__l.__data_ = v372;
                    v371->__r_.__value_.__l.__size_ = 0LL;
                    v371->__r_.__value_.__l.__cap_ = 0LL;
                    v371->__r_.__value_.__r.__words[0] = 0LL;
                    v373 = std::string::append(&v560, " not defined");
                    __int128 v374 = *(_OWORD *)&v373->__r_.__value_.__l.__data_;
                    v561.__r_.__value_.__l.__cap_ = v373->__r_.__value_.__l.__cap_;
                    *(_OWORD *)&v561.__r_.__value_.__l.__data_ = v374;
                    v373->__r_.__value_.__l.__size_ = 0LL;
                    v373->__r_.__value_.__l.__cap_ = 0LL;
                    v373->__r_.__value_.__r.__words[0] = 0LL;
                    siri::dialogengine::PatternSchemaComponent::SetName(v342, &v561);
                  }

                  sub_100021E40(v529 - *(void *)(v341 + 16), v339, (uint64_t)&v562, &v561);
                  if ((v561.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                    v375 = &v561;
                  }
                  else {
                    v375 = (std::string *)v561.__r_.__value_.__r.__words[0];
                  }
                  if ((v561.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                    std::string::size_type v376 = v561.__r_.__value_.__s.__size_;
                  }
                  else {
                    std::string::size_type v376 = v561.__r_.__value_.__l.__size_;
                  }
                  std::string::append(&v564, (const std::string::value_type *)v375, v376);
                  siri::dialogengine::PatternSchemaComponent::GetName(v342);
                  siri::dialogengine::PatternSchemaComponent::GetDefaultComponent(v342);
                  siri::dialogengine::PatternSchemaComponent::GetAllowedVariants(v342);
                  siri::dialogengine::PatternSchemaComponent::GetDefaultVariant(v342);
                  int v377 = siri::dialogengine::PatternSchemaComponent::GetAllowMultiple(v342);
                  sub_100022150((uint64_t)&v560, (uint64_t)&v538, v537, (uint64_t *)&v535, v377, &v561);
                  if ((v561.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                    v378 = &v561;
                  }
                  else {
                    v378 = (std::string *)v561.__r_.__value_.__r.__words[0];
                  }
                  if ((v561.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                    std::string::size_type v379 = v561.__r_.__value_.__s.__size_;
                  }
                  else {
                    std::string::size_type v379 = v561.__r_.__value_.__l.__size_;
                  }
                  std::string::append(&v564, (const std::string::value_type *)v378, v379);
                  if (v536 < 0) {
                    operator delete(v535);
                  }
                  v559.__r_.__value_.__r.__words[0] = (std::string::size_type)v537;
                  sub_1000027F4((void ***)&v559);
                  if (v539 < 0) {
                    operator delete(v538);
                  }
                  sub_1000021BC(&v561, "</td>\n");
                  if ((v561.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                    v380 = &v561;
                  }
                  else {
                    v380 = (std::string *)v561.__r_.__value_.__r.__words[0];
                  }
                  if ((v561.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                    std::string::size_type v381 = v561.__r_.__value_.__s.__size_;
                  }
                  else {
                    std::string::size_type v381 = v561.__r_.__value_.__l.__size_;
                  }
                  std::string::append(&v564, (const std::string::value_type *)v380, v381);
                  v368 = (void *)v561.__r_.__value_.__r.__words[0];
                }

                else
                {
                  v350 = *(siri::dialogengine::VisualComponentsCombination::Entry **)(v341 + 8);
                  v534[0] = *(siri::dialogengine::VisualComponentsCombination::Entry **)v341;
                  v534[1] = v350;
                  if (v350)
                  {
                    v351 = (unint64_t *)((char *)v350 + 8);
                    do
                      unint64_t v352 = __ldxr(v351);
                    while (__stxr(v352 + 1, v351));
                  }

                  unint64_t v353 = sub_100014CA8(v534);
                  if (v350)
                  {
                    v354 = (unint64_t *)((char *)v350 + 8);
                    do
                      unint64_t v355 = __ldaxr(v354);
                    while (__stlxr(v355 - 1, v354));
                    if (!v355)
                    {
                      (*(void (**)(siri::dialogengine::VisualComponentsCombination::Entry *))(*(void *)v350 + 16LL))(v350);
                      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v350);
                    }
                  }

                  memset(&v562, 0, sizeof(v562));
                  unsigned int v356 = siri::dialogengine::VisualComponentsCombination::Entry::GetType(*(siri::dialogengine::VisualComponentsCombination::Entry **)v341)
                       - 1;
                  v357 = "INVALID";
                  if (v356 < 3) {
                    v357 = off_100079020[v356];
                  }
                  std::string::assign(&v562, v357);
                  sub_1000021BC(&v558, "combinationOperator");
                  sub_100021E40(1uLL, v353, (uint64_t)&v558, &v559);
                  if ((v562.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                    v358 = &v562;
                  }
                  else {
                    v358 = (std::string *)v562.__r_.__value_.__r.__words[0];
                  }
                  if ((v562.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                    std::string::size_type v359 = v562.__r_.__value_.__s.__size_;
                  }
                  else {
                    std::string::size_type v359 = v562.__r_.__value_.__l.__size_;
                  }
                  v360 = std::string::append(&v559, (const std::string::value_type *)v358, v359);
                  __int128 v361 = *(_OWORD *)&v360->__r_.__value_.__l.__data_;
                  v560.__r_.__value_.__l.__cap_ = v360->__r_.__value_.__l.__cap_;
                  *(_OWORD *)&v560.__r_.__value_.__l.__data_ = v361;
                  v360->__r_.__value_.__l.__size_ = 0LL;
                  v360->__r_.__value_.__l.__cap_ = 0LL;
                  v360->__r_.__value_.__r.__words[0] = 0LL;
                  sub_1000021BC(&v552, "</td>\n");
                  if ((v552.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                    v362 = &v552;
                  }
                  else {
                    v362 = (std::string *)v552.__r_.__value_.__r.__words[0];
                  }
                  if ((v552.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                    std::string::size_type v363 = v552.__r_.__value_.__s.__size_;
                  }
                  else {
                    std::string::size_type v363 = v552.__r_.__value_.__l.__size_;
                  }
                  v364 = std::string::append(&v560, (const std::string::value_type *)v362, v363);
                  __int128 v365 = *(_OWORD *)&v364->__r_.__value_.__l.__data_;
                  v561.__r_.__value_.__l.__cap_ = v364->__r_.__value_.__l.__cap_;
                  *(_OWORD *)&v561.__r_.__value_.__l.__data_ = v365;
                  v364->__r_.__value_.__l.__size_ = 0LL;
                  v364->__r_.__value_.__l.__cap_ = 0LL;
                  v364->__r_.__value_.__r.__words[0] = 0LL;
                  if ((v561.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                    v366 = &v561;
                  }
                  else {
                    v366 = (std::string *)v561.__r_.__value_.__r.__words[0];
                  }
                  if ((v561.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                    std::string::size_type v367 = v561.__r_.__value_.__s.__size_;
                  }
                  else {
                    std::string::size_type v367 = v561.__r_.__value_.__l.__size_;
                  }
                  std::string::append(&v564, (const std::string::value_type *)v366, v367);
                  v368 = (void *)v558.__r_.__value_.__r.__words[0];
                }

                operator delete(v368);
LABEL_964:
                v341 += 24LL;
                if (v341 == v340) {
                  goto LABEL_990;
                }
              }
            }

            v343 = 0LL;
            v342 = 0LL;
LABEL_990:
            sub_100021E40(1uLL, v339, (uint64_t)qword_10007C658, &v560);
            siri::dialogengine::PatternSchemaComponent::GetUsage(v342);
            sub_1000229C0((uint64_t *)&v558, &v559);
            if ((v559.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              v390 = &v559;
            }
            else {
              v390 = (std::string *)v559.__r_.__value_.__r.__words[0];
            }
            if ((v559.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              std::string::size_type v391 = v559.__r_.__value_.__s.__size_;
            }
            else {
              std::string::size_type v391 = v559.__r_.__value_.__l.__size_;
            }
            v392 = std::string::append(&v560, (const std::string::value_type *)v390, v391);
            __int128 v393 = *(_OWORD *)&v392->__r_.__value_.__l.__data_;
            v561.__r_.__value_.__l.__cap_ = v392->__r_.__value_.__l.__cap_;
            *(_OWORD *)&v561.__r_.__value_.__l.__data_ = v393;
            v392->__r_.__value_.__l.__size_ = 0LL;
            v392->__r_.__value_.__l.__cap_ = 0LL;
            v392->__r_.__value_.__r.__words[0] = 0LL;
            sub_1000021BC(&v552, "</td>\n");
            if ((v552.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              v394 = &v552;
            }
            else {
              v394 = (std::string *)v552.__r_.__value_.__r.__words[0];
            }
            if ((v552.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              std::string::size_type v395 = v552.__r_.__value_.__s.__size_;
            }
            else {
              std::string::size_type v395 = v552.__r_.__value_.__l.__size_;
            }
            v396 = std::string::append(&v561, (const std::string::value_type *)v394, v395);
            __int128 v397 = *(_OWORD *)&v396->__r_.__value_.__l.__data_;
            v562.__r_.__value_.__l.__cap_ = v396->__r_.__value_.__l.__cap_;
            *(_OWORD *)&v562.__r_.__value_.__l.__data_ = v397;
            v396->__r_.__value_.__l.__size_ = 0LL;
            v396->__r_.__value_.__l.__cap_ = 0LL;
            v396->__r_.__value_.__r.__words[0] = 0LL;
            if ((v562.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              v398 = &v562;
            }
            else {
              v398 = (std::string *)v562.__r_.__value_.__r.__words[0];
            }
            if ((v562.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              std::string::size_type v399 = v562.__r_.__value_.__s.__size_;
            }
            else {
              std::string::size_type v399 = v562.__r_.__value_.__l.__size_;
            }
            std::string::append(&v564, (const std::string::value_type *)v398, v399);
            v552.__r_.__value_.__r.__words[0] = (std::string::size_type)&v558;
            sub_100007BFC((void ***)&v552);
            sub_100021E40(1uLL, v339, (uint64_t)qword_10007C658, &v560);
            siri::dialogengine::PatternSchemaComponent::GetFullUsage(v342);
            sub_1000229C0((uint64_t *)&v558, &v559);
            if ((v559.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              v400 = &v559;
            }
            else {
              v400 = (std::string *)v559.__r_.__value_.__r.__words[0];
            }
            if ((v559.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              std::string::size_type v401 = v559.__r_.__value_.__s.__size_;
            }
            else {
              std::string::size_type v401 = v559.__r_.__value_.__l.__size_;
            }
            v402 = std::string::append(&v560, (const std::string::value_type *)v400, v401);
            __int128 v403 = *(_OWORD *)&v402->__r_.__value_.__l.__data_;
            v561.__r_.__value_.__l.__cap_ = v402->__r_.__value_.__l.__cap_;
            *(_OWORD *)&v561.__r_.__value_.__l.__data_ = v403;
            v402->__r_.__value_.__l.__size_ = 0LL;
            v402->__r_.__value_.__l.__cap_ = 0LL;
            v402->__r_.__value_.__r.__words[0] = 0LL;
            sub_1000021BC(&v552, "</td>\n");
            if ((v552.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              v404 = &v552;
            }
            else {
              v404 = (std::string *)v552.__r_.__value_.__r.__words[0];
            }
            if ((v552.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              std::string::size_type v405 = v552.__r_.__value_.__s.__size_;
            }
            else {
              std::string::size_type v405 = v552.__r_.__value_.__l.__size_;
            }
            v406 = std::string::append(&v561, (const std::string::value_type *)v404, v405);
            __int128 v407 = *(_OWORD *)&v406->__r_.__value_.__l.__data_;
            v562.__r_.__value_.__l.__cap_ = v406->__r_.__value_.__l.__cap_;
            *(_OWORD *)&v562.__r_.__value_.__l.__data_ = v407;
            v406->__r_.__value_.__l.__size_ = 0LL;
            v406->__r_.__value_.__l.__cap_ = 0LL;
            v406->__r_.__value_.__r.__words[0] = 0LL;
            if ((v562.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              v408 = &v562;
            }
            else {
              v408 = (std::string *)v562.__r_.__value_.__r.__words[0];
            }
            if ((v562.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              std::string::size_type v409 = v562.__r_.__value_.__s.__size_;
            }
            else {
              std::string::size_type v409 = v562.__r_.__value_.__l.__size_;
            }
            std::string::append(&v564, (const std::string::value_type *)v408, v409);
            v552.__r_.__value_.__r.__words[0] = (std::string::size_type)&v558;
            sub_100007BFC((void ***)&v552);
            sub_100021E40(1uLL, v339, (uint64_t)qword_10007C658, &v562);
            if ((v562.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              v410 = &v562;
            }
            else {
              v410 = (std::string *)v562.__r_.__value_.__r.__words[0];
            }
            if ((v562.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              std::string::size_type v411 = v562.__r_.__value_.__s.__size_;
            }
            else {
              std::string::size_type v411 = v562.__r_.__value_.__l.__size_;
            }
            std::string::append(&v564, (const std::string::value_type *)v410, v411);
            siri::dialogengine::PatternSchemaComponent::GetFullOverrides(v342);
            std::string::size_type v412 = v562.__r_.__value_.__l.__size_;
            std::string::size_type v413 = v562.__r_.__value_.__r.__words[0];
            v561.__r_.__value_.__r.__words[0] = (std::string::size_type)&v562;
            sub_100007BFC((void ***)&v561);
            uint64_t v414 = v412 - v413;
            if (v412 != v413)
            {
              unint64_t v415 = 0LL;
              unint64_t v416 = v414 >> 4;
              unint64_t v417 = v416 - 1;
              if (v416 <= 1) {
                uint64_t v418 = 1LL;
              }
              else {
                uint64_t v418 = v416;
              }
              do
              {
                siri::dialogengine::PatternSchemaComponent::GetFullOverrides(v342);
                std::string::size_type v419 = v562.__r_.__value_.__r.__words[0] + 16 * v415;
                v420 = *(siri::dialogengine::PatternSchemaOverride **)v419;
                v421 = *(std::__shared_weak_count **)(v419 + 8);
                if (v421)
                {
                  v422 = (unint64_t *)&v421->__shared_owners_;
                  do
                    unint64_t v423 = __ldxr(v422);
                  while (__stxr(v423 + 1, v422));
                }

                v561.__r_.__value_.__r.__words[0] = (std::string::size_type)&v562;
                sub_100007BFC((void ***)&v561);
                siri::dialogengine::PatternSchemaOverride::GetUsage(v420);
                sub_1000229C0((uint64_t *)&v560, &v561);
                v424 = std::string::append(&v561, "<br/>");
                __int128 v425 = *(_OWORD *)&v424->__r_.__value_.__l.__data_;
                v562.__r_.__value_.__l.__cap_ = v424->__r_.__value_.__l.__cap_;
                *(_OWORD *)&v562.__r_.__value_.__l.__data_ = v425;
                v424->__r_.__value_.__l.__size_ = 0LL;
                v424->__r_.__value_.__l.__cap_ = 0LL;
                v424->__r_.__value_.__r.__words[0] = 0LL;
                if ((v562.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                  v426 = &v562;
                }
                else {
                  v426 = (std::string *)v562.__r_.__value_.__r.__words[0];
                }
                if ((v562.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                  std::string::size_type v427 = v562.__r_.__value_.__s.__size_;
                }
                else {
                  std::string::size_type v427 = v562.__r_.__value_.__l.__size_;
                }
                std::string::append(&v564, (const std::string::value_type *)v426, v427);
                v559.__r_.__value_.__r.__words[0] = (std::string::size_type)&v560;
                sub_100007BFC((void ***)&v559);
                siri::dialogengine::PatternSchemaOverride::GetIdioms(v420);
                sub_1000021BC(&v560, ", ");
                siri::dialogengine::StringJoin(&v562, &v561, &v560);
                if ((v562.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                  v428 = &v562;
                }
                else {
                  v428 = (std::string *)v562.__r_.__value_.__r.__words[0];
                }
                if ((v562.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                  std::string::size_type v429 = v562.__r_.__value_.__s.__size_;
                }
                else {
                  std::string::size_type v429 = v562.__r_.__value_.__l.__size_;
                }
                std::string::append(&v564, (const std::string::value_type *)v428, v429);
                v560.__r_.__value_.__r.__words[0] = (std::string::size_type)&v561;
                sub_1000027F4((void ***)&v560);
                if (v415 < v417) {
                  std::string::append(&v564, "<hr>");
                }
                if (v421)
                {
                  v430 = (unint64_t *)&v421->__shared_owners_;
                  do
                    unint64_t v431 = __ldaxr(v430);
                  while (__stlxr(v431 - 1, v430));
                  if (!v431)
                  {
                    ((void (*)(std::__shared_weak_count *))v421->__on_zero_shared)(v421);
                    std::__shared_weak_count::__release_weak(v421);
                  }
                }

                ++v415;
              }

              while (v415 != v418);
            }

            sub_1000021BC(&v562, "</td>\n");
            if ((v562.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              v432 = &v562;
            }
            else {
              v432 = (std::string *)v562.__r_.__value_.__r.__words[0];
            }
            if ((v562.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              std::string::size_type v433 = v562.__r_.__value_.__s.__size_;
            }
            else {
              std::string::size_type v433 = v562.__r_.__value_.__l.__size_;
            }
            std::string::append(&v564, (const std::string::value_type *)v432, v433);
            sub_100021E40(1uLL, v339, (uint64_t)qword_10007C658, &v560);
            siri::dialogengine::PatternSchemaComponent::GetSupportingUsage(v342);
            sub_1000229C0((uint64_t *)&v558, &v559);
            if ((v559.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              v434 = &v559;
            }
            else {
              v434 = (std::string *)v559.__r_.__value_.__r.__words[0];
            }
            if ((v559.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              std::string::size_type v435 = v559.__r_.__value_.__s.__size_;
            }
            else {
              std::string::size_type v435 = v559.__r_.__value_.__l.__size_;
            }
            v436 = std::string::append(&v560, (const std::string::value_type *)v434, v435);
            __int128 v437 = *(_OWORD *)&v436->__r_.__value_.__l.__data_;
            v561.__r_.__value_.__l.__cap_ = v436->__r_.__value_.__l.__cap_;
            *(_OWORD *)&v561.__r_.__value_.__l.__data_ = v437;
            v436->__r_.__value_.__l.__size_ = 0LL;
            v436->__r_.__value_.__l.__cap_ = 0LL;
            v436->__r_.__value_.__r.__words[0] = 0LL;
            sub_1000021BC(&v552, "</td>\n");
            if ((v552.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              v438 = &v552;
            }
            else {
              v438 = (std::string *)v552.__r_.__value_.__r.__words[0];
            }
            if ((v552.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              std::string::size_type v439 = v552.__r_.__value_.__s.__size_;
            }
            else {
              std::string::size_type v439 = v552.__r_.__value_.__l.__size_;
            }
            v440 = std::string::append(&v561, (const std::string::value_type *)v438, v439);
            __int128 v441 = *(_OWORD *)&v440->__r_.__value_.__l.__data_;
            v562.__r_.__value_.__l.__cap_ = v440->__r_.__value_.__l.__cap_;
            *(_OWORD *)&v562.__r_.__value_.__l.__data_ = v441;
            v440->__r_.__value_.__l.__size_ = 0LL;
            v440->__r_.__value_.__l.__cap_ = 0LL;
            v440->__r_.__value_.__r.__words[0] = 0LL;
            if ((v562.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              v442 = &v562;
            }
            else {
              v442 = (std::string *)v562.__r_.__value_.__r.__words[0];
            }
            if ((v562.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              std::string::size_type v443 = v562.__r_.__value_.__s.__size_;
            }
            else {
              std::string::size_type v443 = v562.__r_.__value_.__l.__size_;
            }
            std::string::append(&v564, (const std::string::value_type *)v442, v443);
            v552.__r_.__value_.__r.__words[0] = (std::string::size_type)&v558;
            sub_100007BFC((void ***)&v552);
            sub_100021E40(1uLL, v339, (uint64_t)qword_10007C658, &v562);
            if ((v562.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              v444 = &v562;
            }
            else {
              v444 = (std::string *)v562.__r_.__value_.__r.__words[0];
            }
            if ((v562.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              std::string::size_type v445 = v562.__r_.__value_.__s.__size_;
            }
            else {
              std::string::size_type v445 = v562.__r_.__value_.__l.__size_;
            }
            std::string::append(&v564, (const std::string::value_type *)v444, v445);
            siri::dialogengine::PatternSchemaComponent::GetSupportingOverrides(v342);
            std::string::size_type v446 = v562.__r_.__value_.__l.__size_;
            std::string::size_type v447 = v562.__r_.__value_.__r.__words[0];
            v561.__r_.__value_.__r.__words[0] = (std::string::size_type)&v562;
            sub_100007BFC((void ***)&v561);
            uint64_t v448 = v446 - v447;
            if (v446 != v447)
            {
              unint64_t v449 = 0LL;
              unint64_t v450 = v448 >> 4;
              unint64_t v451 = v450 - 1;
              if (v450 <= 1) {
                uint64_t v452 = 1LL;
              }
              else {
                uint64_t v452 = v450;
              }
              do
              {
                siri::dialogengine::PatternSchemaComponent::GetSupportingOverrides(v342);
                std::string::size_type v453 = v562.__r_.__value_.__r.__words[0] + 16 * v449;
                v454 = *(siri::dialogengine::PatternSchemaOverride **)v453;
                v455 = *(std::__shared_weak_count **)(v453 + 8);
                if (v455)
                {
                  v456 = (unint64_t *)&v455->__shared_owners_;
                  do
                    unint64_t v457 = __ldxr(v456);
                  while (__stxr(v457 + 1, v456));
                }

                v561.__r_.__value_.__r.__words[0] = (std::string::size_type)&v562;
                sub_100007BFC((void ***)&v561);
                siri::dialogengine::PatternSchemaOverride::GetUsage(v454);
                sub_1000229C0((uint64_t *)&v560, &v561);
                v458 = std::string::append(&v561, "<br/>");
                __int128 v459 = *(_OWORD *)&v458->__r_.__value_.__l.__data_;
                v562.__r_.__value_.__l.__cap_ = v458->__r_.__value_.__l.__cap_;
                *(_OWORD *)&v562.__r_.__value_.__l.__data_ = v459;
                v458->__r_.__value_.__l.__size_ = 0LL;
                v458->__r_.__value_.__l.__cap_ = 0LL;
                v458->__r_.__value_.__r.__words[0] = 0LL;
                if ((v562.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                  v460 = &v562;
                }
                else {
                  v460 = (std::string *)v562.__r_.__value_.__r.__words[0];
                }
                if ((v562.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                  std::string::size_type v461 = v562.__r_.__value_.__s.__size_;
                }
                else {
                  std::string::size_type v461 = v562.__r_.__value_.__l.__size_;
                }
                std::string::append(&v564, (const std::string::value_type *)v460, v461);
                v559.__r_.__value_.__r.__words[0] = (std::string::size_type)&v560;
                sub_100007BFC((void ***)&v559);
                siri::dialogengine::PatternSchemaOverride::GetIdioms(v454);
                sub_1000021BC(&v560, ", ");
                siri::dialogengine::StringJoin(&v562, &v561, &v560);
                if ((v562.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                  v462 = &v562;
                }
                else {
                  v462 = (std::string *)v562.__r_.__value_.__r.__words[0];
                }
                if ((v562.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                  std::string::size_type v463 = v562.__r_.__value_.__s.__size_;
                }
                else {
                  std::string::size_type v463 = v562.__r_.__value_.__l.__size_;
                }
                std::string::append(&v564, (const std::string::value_type *)v462, v463);
                v560.__r_.__value_.__r.__words[0] = (std::string::size_type)&v561;
                sub_1000027F4((void ***)&v560);
                if (v449 < v451) {
                  std::string::append(&v564, "<hr>");
                }
                if (v455)
                {
                  v464 = (unint64_t *)&v455->__shared_owners_;
                  do
                    unint64_t v465 = __ldaxr(v464);
                  while (__stlxr(v465 - 1, v464));
                  if (!v465)
                  {
                    ((void (*)(std::__shared_weak_count *))v455->__on_zero_shared)(v455);
                    std::__shared_weak_count::__release_weak(v455);
                  }
                }

                ++v449;
              }

              while (v449 != v452);
            }

            sub_1000021BC(&v562, "</td>\n");
            if ((v562.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              v466 = &v562;
            }
            else {
              v466 = (std::string *)v562.__r_.__value_.__r.__words[0];
            }
            if ((v562.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              std::string::size_type v467 = v562.__r_.__value_.__s.__size_;
            }
            else {
              std::string::size_type v467 = v562.__r_.__value_.__l.__size_;
            }
            std::string::append(&v564, (const std::string::value_type *)v466, v467);
            if (v343)
            {
              v468 = v343 + 1;
              do
                unint64_t v469 = __ldaxr(v468);
              while (__stlxr(v469 - 1, v468));
              if (!v469)
              {
                (*(void (**)(unint64_t *))(*v343 + 16))(v343);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v343);
              }
            }

            v562.__r_.__value_.__r.__words[0] = (std::string::size_type)&v563;
            sub_100028A40((void ***)&v562);
          }

          std::string::append(&v564, "</tr>\n");
          unint64_t v221 = v526;
        }

        if (v518)
        {
          v470 = (unint64_t *)&v518->__shared_owners_;
          do
            unint64_t v471 = __ldaxr(v470);
          while (__stlxr(v471 - 1, v470));
          if (!v471)
          {
            ((void (*)(std::__shared_weak_count *))v518->__on_zero_shared)(v518);
            std::__shared_weak_count::__release_weak(v518);
          }
        }

        v169 = v517 + 2;
      }

      while (v517 + 2 != (std::__shared_weak_count **)v516);
    }

    v563.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    sub_100007BFC((void ***)&v563);
    std::string::append(&v564, "</table>\n");
    siri::dialogengine::PatternSchema::GetSettings(v570);
    if (v563.__r_.__value_.__l.__cap_)
    {
      std::string::append(&v564, "<p>\n");
      std::string::append(&v564, "<b>Settings:</b>\n");
      std::string::append(&v564, "<ul>\n");
      std::string::size_type v472 = v563.__r_.__value_.__r.__words[0];
      if ((std::string::size_type *)v563.__r_.__value_.__l.__data_ != &v563.__r_.__value_.__r.__words[1])
      {
        do
        {
          sub_100005704(__p, (__int128 *)(v472 + 32));
          __int128 v473 = v533;
          *(_OWORD *)&v559.__r_.__value_.__l.__data_ = v533;
          if (*((void *)&v533 + 1))
          {
            v474 = (unint64_t *)(*((void *)&v533 + 1) + 8LL);
            do
              unint64_t v475 = __ldxr(v474);
            while (__stxr(v475 + 1, v474));
          }

          siri::dialogengine::PropertyBase::GetName((siri::dialogengine::PropertyBase *)v473);
          v476 = std::string::insert(&v560, 0LL, "  <li><b>");
          __int128 v477 = *(_OWORD *)&v476->__r_.__value_.__l.__data_;
          v561.__r_.__value_.__l.__cap_ = v476->__r_.__value_.__l.__cap_;
          *(_OWORD *)&v561.__r_.__value_.__l.__data_ = v477;
          v476->__r_.__value_.__l.__size_ = 0LL;
          v476->__r_.__value_.__l.__cap_ = 0LL;
          v476->__r_.__value_.__r.__words[0] = 0LL;
          v478 = std::string::append(&v561, "</b>");
          __int128 v479 = *(_OWORD *)&v478->__r_.__value_.__l.__data_;
          v562.__r_.__value_.__l.__cap_ = v478->__r_.__value_.__l.__cap_;
          *(_OWORD *)&v562.__r_.__value_.__l.__data_ = v479;
          v478->__r_.__value_.__l.__size_ = 0LL;
          v478->__r_.__value_.__l.__cap_ = 0LL;
          v478->__r_.__value_.__r.__words[0] = 0LL;
          if ((v562.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            v480 = &v562;
          }
          else {
            v480 = (std::string *)v562.__r_.__value_.__r.__words[0];
          }
          if ((v562.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v481 = v562.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type v481 = v562.__r_.__value_.__l.__size_;
          }
          std::string::append(&v564, (const std::string::value_type *)v480, v481);
          siri::dialogengine::ObjectProperty::GetDefaultValue((siri::dialogengine::ObjectProperty *)v473);
          if ((char)v562.__r_.__value_.__s.__size_ < 0)
          {
            std::string::size_type v482 = v562.__r_.__value_.__l.__size_;
            operator delete(v562.__r_.__value_.__l.__data_);
            if (!v482) {
              goto LABEL_1222;
            }
          }

          else if (!v562.__r_.__value_.__s.__size_)
          {
            goto LABEL_1222;
          }

          siri::dialogengine::ObjectProperty::GetDefaultValue((siri::dialogengine::ObjectProperty *)v473);
          v483 = std::string::insert(&v560, 0LL, " (default = ");
          __int128 v484 = *(_OWORD *)&v483->__r_.__value_.__l.__data_;
          v561.__r_.__value_.__l.__cap_ = v483->__r_.__value_.__l.__cap_;
          *(_OWORD *)&v561.__r_.__value_.__l.__data_ = v484;
          v483->__r_.__value_.__l.__size_ = 0LL;
          v483->__r_.__value_.__l.__cap_ = 0LL;
          v483->__r_.__value_.__r.__words[0] = 0LL;
          v485 = std::string::append(&v561, ")");
          __int128 v486 = *(_OWORD *)&v485->__r_.__value_.__l.__data_;
          v562.__r_.__value_.__l.__cap_ = v485->__r_.__value_.__l.__cap_;
          *(_OWORD *)&v562.__r_.__value_.__l.__data_ = v486;
          v485->__r_.__value_.__l.__size_ = 0LL;
          v485->__r_.__value_.__l.__cap_ = 0LL;
          v485->__r_.__value_.__r.__words[0] = 0LL;
          if ((v562.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            v487 = &v562;
          }
          else {
            v487 = (std::string *)v562.__r_.__value_.__r.__words[0];
          }
          if ((v562.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v488 = v562.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type v488 = v562.__r_.__value_.__l.__size_;
          }
          std::string::append(&v564, (const std::string::value_type *)v487, v488);
LABEL_1222:
          siri::dialogengine::PropertyBase::GetDeprecated((siri::dialogengine::PropertyBase *)v473);
          if ((char)v562.__r_.__value_.__s.__size_ < 0)
          {
            std::string::size_type v489 = v562.__r_.__value_.__l.__size_;
            operator delete(v562.__r_.__value_.__l.__data_);
            if (!v489) {
              goto LABEL_1238;
            }
          }

          else if (!v562.__r_.__value_.__s.__size_)
          {
            goto LABEL_1238;
          }

          siri::dialogengine::PropertyBase::GetDeprecated((siri::dialogengine::PropertyBase *)v473);
          v490 = std::string::insert(&v560, 0LL, " <i>(Deprecated: ");
          __int128 v491 = *(_OWORD *)&v490->__r_.__value_.__l.__data_;
          v561.__r_.__value_.__l.__cap_ = v490->__r_.__value_.__l.__cap_;
          *(_OWORD *)&v561.__r_.__value_.__l.__data_ = v491;
          v490->__r_.__value_.__l.__size_ = 0LL;
          v490->__r_.__value_.__l.__cap_ = 0LL;
          v490->__r_.__value_.__r.__words[0] = 0LL;
          v492 = std::string::append(&v561, ")</i>");
          __int128 v493 = *(_OWORD *)&v492->__r_.__value_.__l.__data_;
          v562.__r_.__value_.__l.__cap_ = v492->__r_.__value_.__l.__cap_;
          *(_OWORD *)&v562.__r_.__value_.__l.__data_ = v493;
          v492->__r_.__value_.__l.__size_ = 0LL;
          v492->__r_.__value_.__l.__cap_ = 0LL;
          v492->__r_.__value_.__r.__words[0] = 0LL;
          if ((v562.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            v494 = &v562;
          }
          else {
            v494 = (std::string *)v562.__r_.__value_.__r.__words[0];
          }
          if ((v562.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v495 = v562.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type v495 = v562.__r_.__value_.__l.__size_;
          }
          std::string::append(&v564, (const std::string::value_type *)v494, v495);
LABEL_1238:
          siri::dialogengine::PropertyBase::GetDescription((siri::dialogengine::PropertyBase *)v473);
          if ((char)v562.__r_.__value_.__s.__size_ < 0)
          {
            std::string::size_type v496 = v562.__r_.__value_.__l.__size_;
            operator delete(v562.__r_.__value_.__l.__data_);
            if (v496)
            {
LABEL_1242:
              siri::dialogengine::PropertyBase::GetDescription((siri::dialogengine::PropertyBase *)v473);
              v497 = std::string::insert(&v561, 0LL, ": ");
              __int128 v498 = *(_OWORD *)&v497->__r_.__value_.__l.__data_;
              v562.__r_.__value_.__l.__cap_ = v497->__r_.__value_.__l.__cap_;
              *(_OWORD *)&v562.__r_.__value_.__l.__data_ = v498;
              v497->__r_.__value_.__l.__size_ = 0LL;
              v497->__r_.__value_.__l.__cap_ = 0LL;
              v497->__r_.__value_.__r.__words[0] = 0LL;
              if ((v562.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                v499 = &v562;
              }
              else {
                v499 = (std::string *)v562.__r_.__value_.__r.__words[0];
              }
              if ((v562.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                std::string::size_type v500 = v562.__r_.__value_.__s.__size_;
              }
              else {
                std::string::size_type v500 = v562.__r_.__value_.__l.__size_;
              }
              std::string::append(&v564, (const std::string::value_type *)v499, v500);
            }
          }

          else if (v562.__r_.__value_.__s.__size_)
          {
            goto LABEL_1242;
          }

          std::string::append(&v564, "</li>\n");
          if (*((void *)&v473 + 1))
          {
            v501 = (unint64_t *)(*((void *)&v473 + 1) + 8LL);
            do
              unint64_t v502 = __ldaxr(v501);
            while (__stlxr(v502 - 1, v501));
            if (!v502)
            {
              (*(void (**)(void))(**((void **)&v473 + 1) + 16LL))(*((void *)&v473 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v473 + 1));
            }
          }

          v503 = (std::__shared_weak_count *)*((void *)&v533 + 1);
          if (*((void *)&v533 + 1))
          {
            v504 = (unint64_t *)(*((void *)&v533 + 1) + 8LL);
            do
              unint64_t v505 = __ldaxr(v504);
            while (__stlxr(v505 - 1, v504));
            if (!v505)
            {
              ((void (*)(std::__shared_weak_count *))v503->__on_zero_shared)(v503);
              std::__shared_weak_count::__release_weak(v503);
            }
          }

          if (SHIBYTE(cap) < 0) {
            operator delete(__p[0]);
          }
          v506 = *(std::string **)(v472 + 8);
          if (v506)
          {
            do
            {
              v507 = v506;
              v506 = (std::string *)v506->__r_.__value_.__r.__words[0];
            }

            while (v506);
          }

          else
          {
            do
            {
              v507 = *(std::string **)(v472 + 16);
              BOOL v508 = v507->__r_.__value_.__r.__words[0] == v472;
              std::string::size_type v472 = (std::string::size_type)v507;
            }

            while (!v508);
          }

          std::string::size_type v472 = (std::string::size_type)v507;
        }

        while (v507 != (std::string *)&v563.__r_.__value_.__r.__words[1]);
      }

      std::string::append(&v564, "</ul>\n");
      std::string::append(&v564, "</p>\n");
    }

    std::string::append(&v564, "</body>\n</html>\n");
    sub_1000021BC(__p, ".html");
    siri::dialogengine::AddExtension(v513, __p);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
    siri::dialogengine::WriteFileFromString(v514, &v564);
    if (v514[23] >= 0) {
      v509 = v514;
    }
    else {
      v509 = *(const char **)v514;
    }
    printf("Output written to %s\n", v509);
    sub_100005988((uint64_t)&v563, (void *)v563.__r_.__value_.__l.__size_);
    sub_100005988((uint64_t)&v565, v566[0]);
    __p[0] = &v567;
    sub_1000027F4((void ***)__p);
  }

  else
  {
    std::operator+<char>(__p, "Pattern schema does not exist: ", a2);
    sub_1000021BC(&v567, (char *)&unk_10006A022);
    sub_10004953C(a1, (uint64_t)__p, (const void **)&v567, 0LL);
    if (v569 < 0) {
      operator delete(v567);
    }
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
    sub_1000021BC(a4, (char *)&unk_10006A022);
  }

  v510 = v571;
  if (v571)
  {
    v511 = (unint64_t *)&v571->__shared_owners_;
    do
      unint64_t v512 = __ldaxr(v511);
    while (__stlxr(v512 - 1, v511));
    if (!v512)
    {
      ((void (*)(std::__shared_weak_count *))v510->__on_zero_shared)(v510);
      std::__shared_weak_count::__release_weak(v510);
    }
  }

  siri::dialogengine::Context::~Context((siri::dialogengine::Context *)v572);
}

void sub_10001CF78(_Unwind_Exception *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)STACK[0x368];
  if (STACK[0x368])
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      unint64_t v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }

  siri::dialogengine::Context::~Context((siri::dialogengine::Context *)&STACK[0x370]);
  _Unwind_Resume(a1);
}

uint64_t sub_10001DFD0(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v223.__r_.__value_.__r.__words[0] = (std::string::size_type)&v219;
  sub_10000AE78((void ***)&v223);
  siri::dialogengine::PatternRegistry::GetSchema(&v210, v212, a2);
  if (!v210)
  {
    std::operator+<char>(&v219, "Pattern schema does not exist: ", a2);
    sub_1000021BC(&v223, (char *)&unk_10006A022);
    sub_10004953C(a1, (uint64_t)&v219, (const void **)&v223.__r_.__value_.__l.__data_, 0LL);
    uint64_t v23 = 0LL;
    goto LABEL_406;
  }

  sub_1000021BC(&v209, "<?xml version=1.0 encoding=UTF-8 standalone=no?>\n");
  std::string::append(&v209, "<pattern xmlns=urn:apple:names:siri:pattern:1.0 ");
  siri::dialogengine::PatternSchema::GetName(v210);
  unint64_t v8 = std::string::insert(&v217, 0LL, "type=");
  __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v218.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v218.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0LL;
  v8->__r_.__value_.__l.__cap_ = 0LL;
  v8->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v10 = std::string::append(&v218, " id=");
  __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v222.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v222.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0LL;
  v10->__r_.__value_.__l.__cap_ = 0LL;
  v10->__r_.__value_.__r.__words[0] = 0LL;
  int v12 = *(char *)(a4 + 23);
  if (v12 >= 0) {
    std::string::size_type v13 = (const std::string::value_type *)a4;
  }
  else {
    std::string::size_type v13 = *(const std::string::value_type **)a4;
  }
  if (v12 >= 0) {
    std::string::size_type v14 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    std::string::size_type v14 = *(void *)(a4 + 8);
  }
  unint64_t v15 = std::string::append(&v222, v13, v14);
  __int128 v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v223.__r_.__value_.__l.__cap_ = v15->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v223.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0LL;
  v15->__r_.__value_.__l.__cap_ = 0LL;
  v15->__r_.__value_.__r.__words[0] = 0LL;
  unint64_t v17 = std::string::append(&v223, ">\n\n");
  __int128 v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v219.__r_.__value_.__l.__cap_ = v17->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v219.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0LL;
  v17->__r_.__value_.__l.__cap_ = 0LL;
  v17->__r_.__value_.__r.__words[0] = 0LL;
  if ((v219.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    unsigned int v19 = &v219;
  }
  else {
    unsigned int v19 = (std::string *)v219.__r_.__value_.__r.__words[0];
  }
  if ((v219.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = v219.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = v219.__r_.__value_.__l.__size_;
  }
  std::string::append(&v209, (const std::string::value_type *)v19, size);
  siri::dialogengine::StringSplit(&v207, a4, "#");
  if (v207 == v208)
  {
    sub_1000021BC(__dst, (char *)&unk_10006A022);
  }

  else
  {
    uint64_t v21 = (void **)(v208 - 24);
    if (*(char *)(v208 - 1) < 0)
    {
      sub_10000231C(__dst, *v21, *(void *)(v208 - 16));
    }

    else
    {
      __int128 v22 = *(_OWORD *)v21;
      uint64_t v206 = *(void *)(v208 - 8);
      *(_OWORD *)__int128 __dst = v22;
    }
  }

  std::string::size_type v202 = 0LL;
  v203 = 0LL;
  uint64_t v204 = 0LL;
  memset(v201, 0, sizeof(v201));
  else {
    size_t v24 = *(void *)(a4 + 8);
  }
  int v25 = v199;
  sub_100007A0C((uint64_t)v199, v24 + 7);
  if (v200 < 0) {
    int v25 = (void **)v199[0];
  }
  if (v24)
  {
    else {
      unint64_t v26 = *(const void **)a4;
    }
    memmove(v25, v26, v24);
  }

  strcpy((char *)v25 + v24, "_Dialog");
  else {
    size_t v27 = *(void *)(a4 + 8);
  }
  __int128 v28 = v197;
  sub_100007A0C((uint64_t)v197, v27 + 7);
  if (v198 < 0) {
    __int128 v28 = (void **)v197[0];
  }
  if (v27)
  {
    else {
      size_t v29 = *(const void **)a4;
    }
    memmove(v28, v29, v27);
  }

  uint64_t v192 = a4;
  strcpy((char *)v28 + v27, "_Visual");
  siri::dialogengine::PatternSchema::GetGroups(v210);
  std::string::size_type v31 = v223.__r_.__value_.__l.__size_;
  for (std::string::size_type i = v223.__r_.__value_.__r.__words[0]; i != v31; i += 16LL)
  {
    BOOL v33 = *(siri::dialogengine::PatternSchemaGroup **)i;
    std::string::size_type v32 = *(void *)(i + 8);
    v215.__r_.__value_.__r.__words[0] = *(void *)i;
    v215.__r_.__value_.__l.__size_ = v32;
    if (v32)
    {
      __int128 v34 = (unint64_t *)(v32 + 8);
      do
        unint64_t v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }

    (*(void (**)(std::string *__return_ptr, siri::dialogengine::PatternSchemaGroup *))(*(void *)v33 + 40LL))( &v219,  v33);
    char v36 = sub_1000238A0((uint64_t *)&v219);
    v222.__r_.__value_.__r.__words[0] = (std::string::size_type)&v219;
    sub_100007BFC((void ***)&v222);
    if ((v36 & 1) != 0)
    {
      siri::dialogengine::PatternSchemaGroup::GetName(v33);
      std::string v37 = std::string::insert(&v218, 0LL, "  <group name=");
      __int128 v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v222.__r_.__value_.__l.__cap_ = v37->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v222.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0LL;
      v37->__r_.__value_.__l.__cap_ = 0LL;
      v37->__r_.__value_.__r.__words[0] = 0LL;
      uint64_t v39 = std::string::append(&v222, ">\n");
      __int128 v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      v219.__r_.__value_.__l.__cap_ = v39->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v219.__r_.__value_.__l.__data_ = v40;
      v39->__r_.__value_.__l.__size_ = 0LL;
      v39->__r_.__value_.__l.__cap_ = 0LL;
      v39->__r_.__value_.__r.__words[0] = 0LL;
      if ((v219.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v41 = &v219;
      }
      else {
        uint64_t v41 = (std::string *)v219.__r_.__value_.__r.__words[0];
      }
      if ((v219.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v42 = v219.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v42 = v219.__r_.__value_.__l.__size_;
      }
      std::string::append(&v209, (const std::string::value_type *)v41, v42);
      if (v206 >= 0) {
        size_t v43 = HIBYTE(v206);
      }
      else {
        size_t v43 = (size_t)__dst[1];
      }
      sub_100007A0C((uint64_t)&v219, v43 + 1);
      if ((v219.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v44 = &v219;
      }
      else {
        std::string::size_type v44 = (std::string *)v219.__r_.__value_.__r.__words[0];
      }
      if (v43)
      {
        if (v206 >= 0) {
          char v45 = __dst;
        }
        else {
          char v45 = (void **)__dst[0];
        }
        memmove(v44, v45, v43);
      }

      *(_WORD *)((char *)&v44->__r_.__value_.__l.__data_ + v43) = 35;
      siri::dialogengine::PatternSchemaGroup::GetName(v33);
      if ((v222.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int128 v46 = &v222;
      }
      else {
        __int128 v46 = (std::string *)v222.__r_.__value_.__r.__words[0];
      }
      if ((v222.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v47 = v222.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v47 = v222.__r_.__value_.__l.__size_;
      }
      std::string::size_type v48 = std::string::append(&v219, (const std::string::value_type *)v46, v47);
      uint64_t v49 = (void *)v48->__r_.__value_.__r.__words[0];
      int v50 = (char)v48->__r_.__value_.__s.__size_;
      v48->__r_.__value_.__r.__words[0] = 0LL;
      v48->__r_.__value_.__l.__size_ = 0LL;
      v48->__r_.__value_.__l.__cap_ = 0LL;
      (*(void (**)(std::string *__return_ptr, siri::dialogengine::PatternSchemaGroup *))(*(void *)v33 + 56LL))( &v219,  v33);
      __int128 v51 = *(_OWORD *)&v219.__r_.__value_.__l.__data_;
      v222.__r_.__value_.__r.__words[0] = (std::string::size_type)&v219;
      sub_100007BFC((void ***)&v222);
      if (*((void *)&v51 + 1) != (void)v51)
      {
        (*(void (**)(std::string *__return_ptr, siri::dialogengine::PatternSchemaGroup *))(*(void *)v33 + 56LL))( &v219,  v33);
        __int128 v53 = *(siri::dialogengine::PatternSchemaComponent **)v219.__r_.__value_.__l.__data_;
        std::string::size_type v52 = *(std::__shared_weak_count **)(v219.__r_.__value_.__r.__words[0] + 8);
        v214.__r_.__value_.__r.__words[0] = *(void *)v219.__r_.__value_.__l.__data_;
        v214.__r_.__value_.__l.__size_ = (std::string::size_type)v52;
        if (v52)
        {
          p_shared_owners = (unint64_t *)&v52->__shared_owners_;
          do
            unint64_t v55 = __ldxr(p_shared_owners);
          while (__stxr(v55 + 1, p_shared_owners));
        }

        v222.__r_.__value_.__r.__words[0] = (std::string::size_type)&v219;
        sub_100007BFC((void ***)&v222);
        siri::dialogengine::PatternSchemaComponent::GetUsage(v53);
        int v56 = sub_1000238A0((uint64_t *)&v219);
        v222.__r_.__value_.__r.__words[0] = (std::string::size_type)&v219;
        sub_100007BFC((void ***)&v222);
        if (v56)
        {
          std::operator+<char>(&v217, "    <dialog id=", v199);
          std::string v57 = std::string::append(&v217, "#");
          __int128 v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
          v218.__r_.__value_.__l.__cap_ = v57->__r_.__value_.__l.__cap_;
          *(_OWORD *)&v218.__r_.__value_.__l.__data_ = v58;
          v57->__r_.__value_.__l.__size_ = 0LL;
          v57->__r_.__value_.__l.__cap_ = 0LL;
          v57->__r_.__value_.__r.__words[0] = 0LL;
          siri::dialogengine::PatternSchemaGroup::GetName(v33);
          if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v60 = __p.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type v60 = __p.__r_.__value_.__l.__size_;
          }
          std::locale v61 = std::string::append(&v218, (const std::string::value_type *)p_p, v60);
          __int128 v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
          v222.__r_.__value_.__l.__cap_ = v61->__r_.__value_.__l.__cap_;
          *(_OWORD *)&v222.__r_.__value_.__l.__data_ = v62;
          v61->__r_.__value_.__l.__size_ = 0LL;
          v61->__r_.__value_.__l.__cap_ = 0LL;
          v61->__r_.__value_.__r.__words[0] = 0LL;
          unsigned __int8 v63 = std::string::append(&v222, "*/>\n");
          __int128 v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
          v219.__r_.__value_.__l.__cap_ = v63->__r_.__value_.__l.__cap_;
          *(_OWORD *)&v219.__r_.__value_.__l.__data_ = v64;
          v63->__r_.__value_.__l.__size_ = 0LL;
          v63->__r_.__value_.__l.__cap_ = 0LL;
          v63->__r_.__value_.__r.__words[0] = 0LL;
          if ((v219.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            uint64_t v65 = &v219;
          }
          else {
            uint64_t v65 = (std::string *)v219.__r_.__value_.__r.__words[0];
          }
          if ((v219.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v66 = v219.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type v66 = v219.__r_.__value_.__l.__size_;
          }
          std::string::append(&v209, (const std::string::value_type *)v65, v66);
          siri::dialogengine::PatternSchemaGroup::GetName(v33);
          *(_OWORD *)&v219.__r_.__value_.__l.__data_ = *(_OWORD *)&v222.__r_.__value_.__l.__data_;
          std::string::size_type cap = v222.__r_.__value_.__l.__cap_;
          memset(&v222, 0, sizeof(v222));
          v219.__r_.__value_.__l.__cap_ = cap;
          v220 = v53;
          unint64_t v221 = v52;
          if (v52)
          {
            __int128 v68 = (unint64_t *)&v52->__shared_owners_;
            do
              unint64_t v69 = __ldxr(v68);
            while (__stxr(v69 + 1, v68));
          }

          sub_1000239A4((uint64_t *)&v202, (__int128 *)&v219);
          std::string::size_type v70 = v221;
          if (v221)
          {
            uint64_t v71 = (unint64_t *)&v221->__shared_owners_;
            do
              unint64_t v72 = __ldaxr(v71);
            while (__stlxr(v72 - 1, v71));
            if (!v72)
            {
              ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
              std::__shared_weak_count::__release_weak(v70);
            }
          }

          std::string::size_type v52 = (std::__shared_weak_count *)v214.__r_.__value_.__l.__size_;
        }

        if (v52)
        {
          std::string v73 = (unint64_t *)&v52->__shared_owners_;
          do
            unint64_t v74 = __ldaxr(v73);
          while (__stlxr(v74 - 1, v73));
          if (!v74)
          {
            ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
            std::__shared_weak_count::__release_weak(v52);
          }
        }

        BOOL v33 = (siri::dialogengine::PatternSchemaGroup *)v215.__r_.__value_.__r.__words[0];
      }

      (*(void (**)(std::string *__return_ptr, siri::dialogengine::PatternSchemaGroup *))(*(void *)v33 + 72LL))( &v219,  v33);
      __int128 v75 = *(_OWORD *)&v219.__r_.__value_.__l.__data_;
      v222.__r_.__value_.__r.__words[0] = (std::string::size_type)&v219;
      sub_100007BFC((void ***)&v222);
      if (*((void *)&v75 + 1) != (void)v75)
      {
        (*(void (**)(std::string *__return_ptr, siri::dialogengine::PatternSchemaGroup *))(*(void *)v33 + 72LL))( &v219,  v33);
        uint64_t v77 = *(siri::dialogengine::PatternSchemaComponent **)v219.__r_.__value_.__l.__data_;
        __int128 v76 = *(std::__shared_weak_count **)(v219.__r_.__value_.__r.__words[0] + 8);
        v214.__r_.__value_.__r.__words[0] = *(void *)v219.__r_.__value_.__l.__data_;
        v214.__r_.__value_.__l.__size_ = (std::string::size_type)v76;
        if (v76)
        {
          std::string::size_type v78 = (unint64_t *)&v76->__shared_owners_;
          do
            unint64_t v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }

        v222.__r_.__value_.__r.__words[0] = (std::string::size_type)&v219;
        sub_100007BFC((void ***)&v222);
        siri::dialogengine::PatternSchemaComponent::GetUsage(v77);
        int v80 = sub_1000238A0((uint64_t *)&v219);
        v222.__r_.__value_.__r.__words[0] = (std::string::size_type)&v219;
        sub_100007BFC((void ***)&v222);
        if (v80)
        {
          std::operator+<char>(&v217, "    <visual id=", v197);
          uint64_t v81 = std::string::append(&v217, "#");
          __int128 v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
          v218.__r_.__value_.__l.__cap_ = v81->__r_.__value_.__l.__cap_;
          *(_OWORD *)&v218.__r_.__value_.__l.__data_ = v82;
          v81->__r_.__value_.__l.__size_ = 0LL;
          v81->__r_.__value_.__l.__cap_ = 0LL;
          v81->__r_.__value_.__r.__words[0] = 0LL;
          siri::dialogengine::PatternSchemaGroup::GetName(v33);
          if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            BOOL v83 = &__p;
          }
          else {
            BOOL v83 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v84 = __p.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type v84 = __p.__r_.__value_.__l.__size_;
          }
          BOOL v85 = std::string::append(&v218, (const std::string::value_type *)v83, v84);
          __int128 v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
          v222.__r_.__value_.__l.__cap_ = v85->__r_.__value_.__l.__cap_;
          *(_OWORD *)&v222.__r_.__value_.__l.__data_ = v86;
          v85->__r_.__value_.__l.__size_ = 0LL;
          v85->__r_.__value_.__l.__cap_ = 0LL;
          v85->__r_.__value_.__r.__words[0] = 0LL;
          size_t v87 = std::string::append(&v222, "*/>\n");
          __int128 v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
          v219.__r_.__value_.__l.__cap_ = v87->__r_.__value_.__l.__cap_;
          *(_OWORD *)&v219.__r_.__value_.__l.__data_ = v88;
          v87->__r_.__value_.__l.__size_ = 0LL;
          v87->__r_.__value_.__l.__cap_ = 0LL;
          v87->__r_.__value_.__r.__words[0] = 0LL;
          if ((v219.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string v89 = &v219;
          }
          else {
            std::string v89 = (std::string *)v219.__r_.__value_.__r.__words[0];
          }
          if ((v219.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v90 = v219.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type v90 = v219.__r_.__value_.__l.__size_;
          }
          std::string::append(&v209, (const std::string::value_type *)v89, v90);
          siri::dialogengine::PatternSchemaGroup::GetName(v33);
          *(_OWORD *)&v219.__r_.__value_.__l.__data_ = *(_OWORD *)&v222.__r_.__value_.__l.__data_;
          std::string::size_type v91 = v222.__r_.__value_.__l.__cap_;
          memset(&v222, 0, sizeof(v222));
          v219.__r_.__value_.__l.__cap_ = v91;
          v220 = v77;
          unint64_t v221 = v76;
          if (v76)
          {
            __int128 v92 = (unint64_t *)&v76->__shared_owners_;
            do
              unint64_t v93 = __ldxr(v92);
            while (__stxr(v93 + 1, v92));
          }

          sub_1000239A4((uint64_t *)v201, (__int128 *)&v219);
          std::string::size_type v94 = v221;
          if (v221)
          {
            int v95 = (unint64_t *)&v221->__shared_owners_;
            do
              unint64_t v96 = __ldaxr(v95);
            while (__stlxr(v96 - 1, v95));
            if (!v96)
            {
              ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
              std::__shared_weak_count::__release_weak(v94);
            }
          }

          __int128 v76 = (std::__shared_weak_count *)v214.__r_.__value_.__l.__size_;
        }

        if (v76)
        {
          char v97 = (unint64_t *)&v76->__shared_owners_;
          do
            unint64_t v98 = __ldaxr(v97);
          while (__stlxr(v98 - 1, v97));
          if (!v98)
          {
            ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
            std::__shared_weak_count::__release_weak(v76);
          }
        }
      }

      std::string::append(&v209, "  </group>\n\n");
      if (v50 < 0) {
        operator delete(v49);
      }
    }

    char v99 = (std::__shared_weak_count *)v215.__r_.__value_.__l.__size_;
    if (v215.__r_.__value_.__l.__size_)
    {
      __int128 v100 = (unint64_t *)(v215.__r_.__value_.__l.__size_ + 8);
      do
        unint64_t v101 = __ldaxr(v100);
      while (__stlxr(v101 - 1, v100));
      if (!v101)
      {
        ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
        std::__shared_weak_count::__release_weak(v99);
      }
    }
  }

  v219.__r_.__value_.__r.__words[0] = (std::string::size_type)&v223;
  sub_100007BFC((void ***)&v219);
  std::string::append(&v209, "</pattern>\n");
  std::string::size_type v102 = v210;
  v195 = v210;
  std::string::size_type v196 = v211;
  if (v211)
  {
    uint64_t v103 = (unint64_t *)&v211->__shared_owners_;
    do
      unint64_t v104 = __ldxr(v103);
    while (__stxr(v104 + 1, v103));
  }

  sub_1000021BC(&v223, "<?xml version=1.0 encoding=UTF-8 standalone=no?>\n");
  std::operator+<char>(&v222, "<cat xmlns=urn:apple:names:siri:cat:2.0 id=", v199);
  char v105 = std::string::append(&v222, ">\n\n");
  __int128 v106 = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
  v219.__r_.__value_.__l.__cap_ = v105->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v219.__r_.__value_.__l.__data_ = v106;
  v105->__r_.__value_.__l.__size_ = 0LL;
  v105->__r_.__value_.__l.__cap_ = 0LL;
  v105->__r_.__value_.__r.__words[0] = 0LL;
  if ((v219.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    char v107 = &v219;
  }
  else {
    char v107 = (std::string *)v219.__r_.__value_.__r.__words[0];
  }
  if ((v219.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v108 = v219.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v108 = v219.__r_.__value_.__l.__size_;
  }
  std::string::append(&v223, (const std::string::value_type *)v107, v108);
  siri::dialogengine::PatternSchema::GetRequiredParameters(v102);
  std::string::size_type v109 = v219.__r_.__value_.__l.__cap_;
  sub_100005988((uint64_t)&v219, (void *)v219.__r_.__value_.__l.__size_);
  if (!v109) {
    goto LABEL_294;
  }
  std::string::append(&v223, "  <parameters>\n");
  siri::dialogengine::PatternSchema::GetRequiredParameters(v102);
  std::string::size_type v110 = v222.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v222.__r_.__value_.__l.__data_ == &v222.__r_.__value_.__r.__words[1]) {
    goto LABEL_255;
  }
  do
  {
    sub_100005704(&v219, (__int128 *)(v110 + 32));
    siri::dialogengine::PropertyBase::GetType(v220);
    if ((char)v218.__r_.__value_.__s.__size_ < 0)
    {
      if (v218.__r_.__value_.__l.__size_ != 15) {
        goto LABEL_217;
      }
      uint64_t v111 = (std::string *)v218.__r_.__value_.__r.__words[0];
    }

    else
    {
      if (v218.__r_.__value_.__s.__size_ != 15) {
        goto LABEL_217;
      }
      uint64_t v111 = &v218;
    }

    std::string::size_type v112 = v111->__r_.__value_.__r.__words[0];
    uint64_t v113 = *(std::string::size_type *)((char *)v111->__r_.__value_.__r.__words + 7);
    BOOL v114 = v112 == 0x4F2E676F6C616964LL && v113 == 0x5D5B7463656A624FLL;
    if (v114)
    {
      std::string::append(&v223, "    <!-- You must declare the type of your items array in the line below -->\n");
      std::string::assign(&v218, (const std::string::value_type *)&unk_10006A022);
    }

LABEL_217:
    siri::dialogengine::PropertyBase::GetName(v220);
    uint64_t v115 = std::string::insert(&v213, 0LL, "    <parameter name=");
    __int128 v116 = *(_OWORD *)&v115->__r_.__value_.__l.__data_;
    v214.__r_.__value_.__l.__cap_ = v115->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v214.__r_.__value_.__l.__data_ = v116;
    v115->__r_.__value_.__l.__size_ = 0LL;
    v115->__r_.__value_.__l.__cap_ = 0LL;
    v115->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v117 = std::string::append(&v214, " type=");
    __int128 v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
    v215.__r_.__value_.__l.__cap_ = v117->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v215.__r_.__value_.__l.__data_ = v118;
    v117->__r_.__value_.__l.__size_ = 0LL;
    v117->__r_.__value_.__l.__cap_ = 0LL;
    v117->__r_.__value_.__r.__words[0] = 0LL;
    if ((v218.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v119 = &v218;
    }
    else {
      uint64_t v119 = (std::string *)v218.__r_.__value_.__r.__words[0];
    }
    if ((v218.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v120 = v218.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v120 = v218.__r_.__value_.__l.__size_;
    }
    __int16 v121 = std::string::append(&v215, (const std::string::value_type *)v119, v120);
    __int128 v122 = *(_OWORD *)&v121->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__l.__cap_ = v121->__r_.__value_.__l.__cap_;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v122;
    v121->__r_.__value_.__l.__size_ = 0LL;
    v121->__r_.__value_.__l.__cap_ = 0LL;
    v121->__r_.__value_.__r.__words[0] = 0LL;
    unsigned int v123 = std::string::append(&__p, "/>\n");
    __int128 v124 = *(_OWORD *)&v123->__r_.__value_.__l.__data_;
    v217.__r_.__value_.__l.__cap_ = v123->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v217.__r_.__value_.__l.__data_ = v124;
    v123->__r_.__value_.__l.__size_ = 0LL;
    v123->__r_.__value_.__l.__cap_ = 0LL;
    v123->__r_.__value_.__r.__words[0] = 0LL;
    if ((v217.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v125 = &v217;
    }
    else {
      uint64_t v125 = (std::string *)v217.__r_.__value_.__r.__words[0];
    }
    if ((v217.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v126 = v217.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v126 = v217.__r_.__value_.__l.__size_;
    }
    std::string::append(&v223, (const std::string::value_type *)v125, v126);
    char v127 = v221;
    if (v221)
    {
      std::string::size_type v128 = (unint64_t *)&v221->__shared_owners_;
      do
        unint64_t v129 = __ldaxr(v128);
      while (__stlxr(v129 - 1, v128));
      if (!v129)
      {
        ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
        std::__shared_weak_count::__release_weak(v127);
      }
    }

    __int128 v130 = *(std::string **)(v110 + 8);
    if (v130)
    {
      do
      {
        unsigned __int8 v131 = v130;
        __int128 v130 = (std::string *)v130->__r_.__value_.__r.__words[0];
      }

      while (v130);
    }

    else
    {
      do
      {
        unsigned __int8 v131 = *(std::string **)(v110 + 16);
        BOOL v114 = v131->__r_.__value_.__r.__words[0] == v110;
        std::string::size_type v110 = (std::string::size_type)v131;
      }

      while (!v114);
    }

    std::string::size_type v110 = (std::string::size_type)v131;
  }

  while (v131 != (std::string *)&v222.__r_.__value_.__r.__words[1]);
  std::string::size_type v102 = v195;
LABEL_255:
  sub_100005988((uint64_t)&v222, (void *)v222.__r_.__value_.__l.__size_);
  siri::dialogengine::PatternSchema::GetComputedParameters(v102);
  std::string::size_type v132 = v222.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v222.__r_.__value_.__l.__data_ != &v222.__r_.__value_.__r.__words[1])
  {
    do
    {
      sub_100005704(&v219, (__int128 *)(v132 + 32));
      siri::dialogengine::PropertyBase::GetName(v220);
      unsigned __int8 v133 = std::string::insert(&v214, 0LL, "    <parameter name=");
      __int128 v134 = *(_OWORD *)&v133->__r_.__value_.__l.__data_;
      v215.__r_.__value_.__l.__cap_ = v133->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v215.__r_.__value_.__l.__data_ = v134;
      v133->__r_.__value_.__l.__size_ = 0LL;
      v133->__r_.__value_.__l.__cap_ = 0LL;
      v133->__r_.__value_.__r.__words[0] = 0LL;
      char v135 = std::string::append(&v215, " type=");
      __int128 v136 = *(_OWORD *)&v135->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__l.__cap_ = v135->__r_.__value_.__l.__cap_;
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v136;
      v135->__r_.__value_.__l.__size_ = 0LL;
      v135->__r_.__value_.__l.__cap_ = 0LL;
      v135->__r_.__value_.__r.__words[0] = 0LL;
      siri::dialogengine::PropertyBase::GetType(v220);
      if ((v213.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        v137 = &v213;
      }
      else {
        v137 = (std::string *)v213.__r_.__value_.__r.__words[0];
      }
      if ((v213.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v138 = v213.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v138 = v213.__r_.__value_.__l.__size_;
      }
      v139 = std::string::append(&__p, (const std::string::value_type *)v137, v138);
      __int128 v140 = *(_OWORD *)&v139->__r_.__value_.__l.__data_;
      v217.__r_.__value_.__l.__cap_ = v139->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v217.__r_.__value_.__l.__data_ = v140;
      v139->__r_.__value_.__l.__size_ = 0LL;
      v139->__r_.__value_.__l.__cap_ = 0LL;
      v139->__r_.__value_.__r.__words[0] = 0LL;
      v141 = std::string::append(&v217, "/>\n");
      __int128 v142 = *(_OWORD *)&v141->__r_.__value_.__l.__data_;
      v218.__r_.__value_.__l.__cap_ = v141->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v218.__r_.__value_.__l.__data_ = v142;
      v141->__r_.__value_.__l.__size_ = 0LL;
      v141->__r_.__value_.__l.__cap_ = 0LL;
      v141->__r_.__value_.__r.__words[0] = 0LL;
      if ((v218.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string v143 = &v218;
      }
      else {
        std::string v143 = (std::string *)v218.__r_.__value_.__r.__words[0];
      }
      if ((v218.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v144 = v218.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v144 = v218.__r_.__value_.__l.__size_;
      }
      std::string::append(&v223, (const std::string::value_type *)v143, v144);
      uint64_t v145 = v221;
      if (v221)
      {
        __int128 v146 = (unint64_t *)&v221->__shared_owners_;
        do
          unint64_t v147 = __ldaxr(v146);
        while (__stlxr(v147 - 1, v146));
        if (!v147)
        {
          ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
          std::__shared_weak_count::__release_weak(v145);
        }
      }

      std::string::size_type v148 = *(std::string **)(v132 + 8);
      if (v148)
      {
        do
        {
          __int128 v149 = v148;
          std::string::size_type v148 = (std::string *)v148->__r_.__value_.__r.__words[0];
        }

        while (v148);
      }

      else
      {
        do
        {
          __int128 v149 = *(std::string **)(v132 + 16);
          BOOL v114 = v149->__r_.__value_.__r.__words[0] == v132;
          std::string::size_type v132 = (std::string::size_type)v149;
        }

        while (!v114);
      }

      std::string::size_type v132 = (std::string::size_type)v149;
    }

    while (v149 != (std::string *)&v222.__r_.__value_.__r.__words[1]);
  }

  sub_100005988((uint64_t)&v222, (void *)v222.__r_.__value_.__l.__size_);
  std::string::append(&v223, "  </parameters>\n\n");
LABEL_294:
  std::string::append(&v223, "</cat>\n");
  siri::dialogengine::CatIdToPath(&v218, v199);
  siri::dialogengine::JoinPath(&v222, a3, &v218);
  sub_1000021BC(&v217, "_params.cat.xml");
  siri::dialogengine::JoinPath(&v219, &v222, &v217);
  sub_1000021BC(&v222, "Dialog CAT parameters file");
  int v150 = sub_100025C54((uint64_t)&v219, (uint64_t)&v223, (uint64_t)&v222);
  int v191 = v150;
  if (v196)
  {
    __int128 v151 = &v196->__shared_owners_;
    do
      unint64_t v152 = __ldaxr((unint64_t *)v151);
    while (__stlxr(v152 - 1, (unint64_t *)v151));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
      std::__shared_weak_count::__release_weak(v196);
    }
  }

  sub_1000021BC(&v223, "<?xml version=1.0 encoding=UTF-8 standalone=no?>\n");
  std::operator+<char>(&v222, "<cat xmlns=urn:apple:names:siri:cat:2.0 locale=en id=", v199);
  v153 = std::string::append(&v222, ">\n");
  __int128 v154 = *(_OWORD *)&v153->__r_.__value_.__l.__data_;
  v219.__r_.__value_.__l.__cap_ = v153->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v219.__r_.__value_.__l.__data_ = v154;
  v153->__r_.__value_.__l.__size_ = 0LL;
  v153->__r_.__value_.__l.__cap_ = 0LL;
  v153->__r_.__value_.__r.__words[0] = 0LL;
  if ((v219.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    v155 = &v219;
  }
  else {
    v155 = (std::string *)v219.__r_.__value_.__r.__words[0];
  }
  if ((v219.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v156 = v219.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v156 = v219.__r_.__value_.__l.__size_;
  }
  std::string::append(&v223, (const std::string::value_type *)v155, v156);
  std::string::append(&v223, "  <all>\n");
  v157 = v202;
  for (uint64_t j = v203; v157 != j; v157 = (__int128 *)((char *)v157 + 40))
  {
    sub_100005704(&v219, v157);
    std::operator+<char>(&v218, "    <dialog id=", &v219);
    v159 = std::string::append(&v218, ">\n");
    __int128 v160 = *(_OWORD *)&v159->__r_.__value_.__l.__data_;
    v222.__r_.__value_.__l.__cap_ = v159->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v222.__r_.__value_.__l.__data_ = v160;
    v159->__r_.__value_.__l.__size_ = 0LL;
    v159->__r_.__value_.__l.__cap_ = 0LL;
    v159->__r_.__value_.__r.__words[0] = 0LL;
    if ((v222.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      v161 = &v222;
    }
    else {
      v161 = (std::string *)v222.__r_.__value_.__r.__words[0];
    }
    if ((v222.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v162 = v222.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v162 = v222.__r_.__value_.__l.__size_;
    }
    std::string::append(&v223, (const std::string::value_type *)v161, v162);
    siri::dialogengine::PatternSchemaComponent::GetFullExamples(v220);
    if (v218.__r_.__value_.__r.__words[0] == v218.__r_.__value_.__l.__size_)
    {
      sub_1000021BC(&v222, (char *)&unk_10006A022);
    }

    else
    {
      siri::dialogengine::PatternSchemaComponent::GetFullExamples(v220);
      if (*(char *)(v217.__r_.__value_.__r.__words[0] + 23) < 0)
      {
        sub_10000231C( &v222,  *(void **)v217.__r_.__value_.__l.__data_,  *(void *)(v217.__r_.__value_.__r.__words[0] + 8));
      }

      else
      {
        __int128 v163 = *(_OWORD *)v217.__r_.__value_.__l.__data_;
        v222.__r_.__value_.__l.__cap_ = *(void *)(v217.__r_.__value_.__r.__words[0] + 16);
        *(_OWORD *)&v222.__r_.__value_.__l.__data_ = v163;
      }

      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v217;
      sub_1000027F4((void ***)&__p);
    }

    v217.__r_.__value_.__r.__words[0] = (std::string::size_type)&v218;
    sub_1000027F4((void ***)&v217);
    siri::dialogengine::PatternSchemaComponent::GetFullUsage(v220);
    int v164 = sub_1000238A0((uint64_t *)&v218);
    v217.__r_.__value_.__r.__words[0] = (std::string::size_type)&v218;
    sub_100007BFC((void ***)&v217);
    if (v164)
    {
      std::operator+<char>(&v217, "      <content>", &v222);
      v165 = std::string::append(&v217, "</content>\n");
      __int128 v166 = *(_OWORD *)&v165->__r_.__value_.__l.__data_;
      v218.__r_.__value_.__l.__cap_ = v165->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v218.__r_.__value_.__l.__data_ = v166;
      v165->__r_.__value_.__l.__size_ = 0LL;
      v165->__r_.__value_.__l.__cap_ = 0LL;
      v165->__r_.__value_.__r.__words[0] = 0LL;
      if ((v218.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        v167 = &v218;
      }
      else {
        v167 = (std::string *)v218.__r_.__value_.__r.__words[0];
      }
      if ((v218.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v168 = v218.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v168 = v218.__r_.__value_.__l.__size_;
      }
      std::string::append(&v223, (const std::string::value_type *)v167, v168);
    }

    siri::dialogengine::PatternSchemaComponent::GetSupportingUsage(v220);
    int v169 = sub_1000238A0((uint64_t *)&v218);
    v217.__r_.__value_.__r.__words[0] = (std::string::size_type)&v218;
    sub_100007BFC((void ***)&v217);
    if (v169)
    {
      std::operator+<char>(&v217, "      <caption>", &v222);
      v170 = std::string::append(&v217, "</caption>\n");
      __int128 v171 = *(_OWORD *)&v170->__r_.__value_.__l.__data_;
      v218.__r_.__value_.__l.__cap_ = v170->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v218.__r_.__value_.__l.__data_ = v171;
      v170->__r_.__value_.__l.__size_ = 0LL;
      v170->__r_.__value_.__l.__cap_ = 0LL;
      v170->__r_.__value_.__r.__words[0] = 0LL;
      if ((v218.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        unint64_t v172 = &v218;
      }
      else {
        unint64_t v172 = (std::string *)v218.__r_.__value_.__r.__words[0];
      }
      if ((v218.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v173 = v218.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v173 = v218.__r_.__value_.__l.__size_;
      }
      std::string::append(&v223, (const std::string::value_type *)v172, v173);
    }

    std::string::append(&v223, "    </dialog>\n");
    __int128 v174 = v221;
    if (v221)
    {
      v175 = (unint64_t *)&v221->__shared_owners_;
      do
        unint64_t v176 = __ldaxr(v175);
      while (__stlxr(v176 - 1, v175));
      if (!v176)
      {
        ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
        std::__shared_weak_count::__release_weak(v174);
      }
    }
  }

  std::string::append(&v223, "  </all>\n");
  std::string::append(&v223, "</cat>\n");
  siri::dialogengine::CatIdToPath(&v218, v199);
  siri::dialogengine::JoinPath(&v222, a3, &v218);
  sub_1000021BC(&v217, "en.cat.xml");
  siri::dialogengine::JoinPath(&v219, &v222, &v217);
  sub_1000021BC(&v222, "Dialog CAT locale file");
  int v177 = sub_100025C54((uint64_t)&v219, (uint64_t)&v223, (uint64_t)&v222);
  std::string::size_type v178 = v211;
  v194[0] = v210;
  v194[1] = (siri::dialogengine::PatternSchema *)v211;
  if (v211)
  {
    std::string::size_type v179 = (unint64_t *)&v211->__shared_owners_;
    do
      unint64_t v180 = __ldxr(v179);
    while (__stxr(v180 + 1, v179));
  }

  int v181 = sub_100023AE8(a3, (uint64_t)v197, v194, v201);
  if (v178)
  {
    std::string::size_type v182 = (unint64_t *)&v178->__shared_owners_;
    do
      unint64_t v183 = __ldaxr(v182);
    while (__stlxr(v183 - 1, v182));
    if (!v183)
    {
      ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
      std::__shared_weak_count::__release_weak(v178);
    }
  }

  sub_1000021BC(&v222, ".patternxml");
  siri::dialogengine::PatternIdToPath(&v223, v192, &v222);
  siri::dialogengine::JoinPath(&v219, a3, &v223);
  sub_1000021BC(&v223, "Pattern file");
  int v184 = sub_100025C54((uint64_t)&v219, (uint64_t)&v209, (uint64_t)&v223);
  if (v198 < 0) {
    operator delete(v197[0]);
  }
  if (v200 < 0) {
    operator delete(v199[0]);
  }
  int v185 = v184 & v181;
  int v186 = v177 & v191;
  v219.__r_.__value_.__r.__words[0] = (std::string::size_type)v201;
  sub_100028678((void ***)&v219);
  v219.__r_.__value_.__r.__words[0] = (std::string::size_type)&v202;
  sub_100028678((void ***)&v219);
  if (SHIBYTE(v206) < 0) {
    operator delete(__dst[0]);
  }
  uint64_t v23 = v185 & v186;
  v219.__r_.__value_.__r.__words[0] = (std::string::size_type)&v207;
  sub_1000027F4((void ***)&v219);
LABEL_406:
  v187 = v211;
  if (v211)
  {
    __int128 v188 = (unint64_t *)&v211->__shared_owners_;
    do
      unint64_t v189 = __ldaxr(v188);
    while (__stlxr(v189 - 1, v188));
    if (!v189)
    {
      ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
      std::__shared_weak_count::__release_weak(v187);
    }
  }

  siri::dialogengine::Context::~Context((siri::dialogengine::Context *)v212);
  return v23;
}

void sub_10001F7EC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28, char a29, uint64_t a30, uint64_t a31, char a32, uint64_t a33, uint64_t a34, void *a35, uint64_t a36, int a37, __int16 a38, char a39, char a40, uint64_t a41, char a42, uint64_t a43, uint64_t a44, void *a45, uint64_t a46, int a47, __int16 a48, char a49, char a50,char a51,uint64_t a52,char a53)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  *(void *)(v54 - 20std::ostream::~ostream(v1, v2 + 8) = &a29;
  sub_100028678((void ***)(v54 - 208));
  *(void *)(v54 - 20std::ostream::~ostream(v1, v2 + 8) = &a32;
  sub_100028678((void ***)(v54 - 208));
  if (a40 < 0) {
    operator delete(a35);
  }
  *(void *)(v54 - 20std::ostream::~ostream(v1, v2 + 8) = &a42;
  sub_1000027F4((void ***)(v54 - 208));
  if (a50 < 0) {
    operator delete(a45);
  }
  sub_1000059D0((uint64_t)&a51);
  siri::dialogengine::Context::~Context((siri::dialogengine::Context *)&a53);
  _Unwind_Resume(a1);
}

BOOL sub_10001FF78(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  std::string::size_type v47 = v41;
  sub_10000AE78((void ***)&v47);
  siri::dialogengine::PatternFile::LoadFromId(&v51, v53, a3, 0LL);
  uint64_t v12 = v51;
  if (v51)
  {
    uint64_t v49 = 0LL;
    std::string::size_type v48 = 0LL;
    std::string::size_type v47 = &v48;
    char v50 = 0;
    siri::dialogengine::Context::GetRequestInfo((siri::dialogengine::Context *)v53);
    siri::dialogengine::RequestInfo::GetTemplateDirs((siri::dialogengine::RequestInfo *)v41);
    int v36 = a7;
    siri::dialogengine::GetParamsForPattern(v12, &v45, a4, a5, a6, &v47);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v45;
    sub_10000AE78((void ***)&__p);
    sub_1000286FC((uint64_t)v41);
    siri::dialogengine::ParameterCollection::GetConflictingParameters( (siri::dialogengine::ParameterCollection *)&v47,  (siri::dialogengine::Context *)v53);
    std::string::size_type v13 = v45;
    if (v45 != v46)
    {
      do
      {
        for (std::string::size_type i = v13[9]; i; std::string::size_type i = (void *)*i)
        {
          sub_100023250((uint64_t)v41);
          __int128 v18 = sub_100002F60(&v42, (uint64_t)"The parameter '", 15LL);
          int v19 = *((char *)v13 + 55);
          if (v19 >= 0) {
            uint64_t v20 = (uint64_t)(v13 + 4);
          }
          else {
            uint64_t v20 = (uint64_t)v13[4];
          }
          if (v19 >= 0) {
            uint64_t v21 = *((unsigned __int8 *)v13 + 55);
          }
          else {
            uint64_t v21 = (uint64_t)v13[5];
          }
          __int128 v22 = sub_100002F60(v18, v20, v21);
          uint64_t v23 = sub_100002F60(v22, (uint64_t)"' (", 3LL);
          siri::dialogengine::PropertyBase::GetType((siri::dialogengine::PropertyBase *)i[2]);
          if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            uint64_t size = __p.__r_.__value_.__s.__size_;
          }
          else {
            uint64_t size = __p.__r_.__value_.__l.__size_;
          }
          unint64_t v26 = sub_100002F60(v23, (uint64_t)p_p, size);
          sub_100002F60(v26, (uint64_t)") is defined in multiple files with different types", 51LL);
          std::stringbuf::str(&__p, &v43);
          siri::dialogengine::LineNumberBase::GetFullPath((siri::dialogengine::LineNumberBase *)(i[2] + 240LL));
          unint64_t LineNumber = siri::dialogengine::LineNumberBase::GetLineNumber((siri::dialogengine::LineNumberBase *)(i[2] + 240LL));
          sub_10004953C(a1, (uint64_t)&__p, (const void **)&v38, LineNumber);
          if (v39 < 0) {
            operator delete(v38);
          }
          v41[0] = v14;
          *(void **)((char *)v41 + *((void *)v14 - 3)) = v15;
          uint64_t v42 = v16;
          std::streambuf::~streambuf(&v43);
          std::ios::~ios(&v44);
        }

        __int128 v28 = v13[1];
        if (v28)
        {
          do
          {
            size_t v29 = (void **)v28;
            __int128 v28 = (void *)*v28;
          }

          while (v28);
        }

        else
        {
          do
          {
            size_t v29 = (void **)v13[2];
            BOOL v30 = *v29 == v13;
            std::string::size_type v13 = v29;
          }

          while (!v30);
        }

        std::string::size_type v13 = v29;
      }

      while (v29 != v46);
    }

    siri::dialogengine::ParameterCollection::GetUniqueParameters( (siri::dialogengine::ParameterCollection *)&v47,  (siri::dialogengine::Context *)v53);
    sub_100009AC0(v41, v36);
    sub_100005988((uint64_t)v41, (void *)v41[1]);
    sub_10000AD80((uint64_t)&v45, v46[0]);
    sub_10000AD80((uint64_t)&v47, v48);
    BOOL v31 = 1LL;
  }

  else
  {
    std::operator+<char>(v41, "failed to load pattern file: ", a3);
    sub_1000021BC(&v47, (char *)&unk_10006A022);
    BOOL v31 = sub_10004953C(a1, (uint64_t)v41, (const void **)&v47, 0LL);
    if (SHIBYTE(v49) < 0) {
      operator delete(v47);
    }
    if (SHIBYTE(v42) < 0) {
      operator delete(v41[0]);
    }
  }

  std::string::size_type v32 = v52;
  if (v52)
  {
    p_shared_owners = (unint64_t *)&v52->__shared_owners_;
    do
      unint64_t v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }

  siri::dialogengine::Context::~Context((siri::dialogengine::Context *)v53);
  return v31;
}

void sub_100020368( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25)
{
  if (SLOBYTE(STACK[0x277]) < 0) {
    operator delete((void *)STACK[0x260]);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  sub_1000059D0((uint64_t)&STACK[0x280]);
  siri::dialogengine::Context::~Context((siri::dialogengine::Context *)&STACK[0x290]);
  _Unwind_Resume(a1);
}

void sub_100020484(_BYTE *a1, siri::dialogengine::ValidationEntry *this, const void **a3)
{
  unint64_t LineNumber = siri::dialogengine::LineNumberBase::GetLineNumber(this);
  sub_10004953C(a1, (uint64_t)&__p, a3, LineNumber);
  if (v8 < 0) {
    operator delete(__p);
  }
}

void sub_1000204F0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10002050C(_BYTE *a1, siri::dialogengine::ValidationEntry *this, const void **a3)
{
  unint64_t LineNumber = siri::dialogengine::LineNumberBase::GetLineNumber(this);
  sub_100049920(a1, (uint64_t)&__p, a3, LineNumber);
  if (v8 < 0) {
    operator delete(__p);
  }
}

void sub_100020578( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100020594(uint64_t a1, _BYTE *a2)
{
  if (*(void *)(a1 + 40) || *(void *)(a1 + 64))
  {
    std::ios_base::getloc((const std::ios_base *)((char *)&std::cout
                                                + (unint64_t)std::cout.__vftable[-2].~basic_ostream_0));
    unint64_t v4 = std::locale::use_facet(v31, &std::ctype<char>::id);
    uint64_t v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10LL);
    std::locale::~locale(v31);
    std::ostream::put(&std::cout, v5);
    std::ostream::flush(&std::cout);
    unint64_t v6 = *(void *)(a1 + 64);
    if (v6)
    {
      std::to_string(&v29, v6);
      uint64_t v7 = std::string::append(&v29, " validation warning(s) for ");
      __int128 v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v30.__r_.__value_.__l.__cap_ = v7->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0LL;
      v7->__r_.__value_.__l.__cap_ = 0LL;
      v7->__r_.__value_.__r.__words[0] = 0LL;
      int v9 = *(char *)(a1 + 23);
      if (v9 >= 0) {
        uint64_t v10 = (const std::string::value_type *)a1;
      }
      else {
        uint64_t v10 = *(const std::string::value_type **)a1;
      }
      if (v9 >= 0) {
        std::string::size_type v11 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        std::string::size_type v11 = *(void *)(a1 + 8);
      }
      uint64_t v12 = std::string::append(&v30, v10, v11);
      __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      std::string::size_type cap = v12->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v31[0].__locale_ = v13;
      v12->__r_.__value_.__l.__size_ = 0LL;
      v12->__r_.__value_.__l.__cap_ = 0LL;
      v12->__r_.__value_.__r.__words[0] = 0LL;
      sub_100049948(a2, (uint64_t)v31);
      if (SHIBYTE(cap) < 0) {
        operator delete(v31[0].__locale_);
      }
      std::string::size_type v14 = *(void **)(a1 + 48);
      if (v14 != (void *)(a1 + 56))
      {
        do
        {
          sub_1000021BC(v31, (char *)&unk_10006A022);
          sub_10002050C(a2, (siri::dialogengine::ValidationEntry *)(v14 + 4), (const void **)&v31[0].__locale_);
          if (SHIBYTE(cap) < 0) {
            operator delete(v31[0].__locale_);
          }
          unint64_t v15 = (void *)v14[1];
          if (v15)
          {
            do
            {
              uint64_t v16 = v15;
              unint64_t v15 = (void *)*v15;
            }

            while (v15);
          }

          else
          {
            do
            {
              uint64_t v16 = (void *)v14[2];
              BOOL v17 = *v16 == (void)v14;
              std::string::size_type v14 = v16;
            }

            while (!v17);
          }

          std::string::size_type v14 = v16;
        }

        while (v16 != (void *)(a1 + 56));
      }
    }

    unint64_t v18 = *(void *)(a1 + 40);
    if (v18)
    {
      std::to_string(&v29, v18);
      int v19 = std::string::append(&v29, " validation error(s) for ");
      __int128 v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v30.__r_.__value_.__l.__cap_ = v19->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0LL;
      v19->__r_.__value_.__l.__cap_ = 0LL;
      v19->__r_.__value_.__r.__words[0] = 0LL;
      int v21 = *(char *)(a1 + 23);
      if (v21 >= 0) {
        __int128 v22 = (const std::string::value_type *)a1;
      }
      else {
        __int128 v22 = *(const std::string::value_type **)a1;
      }
      if (v21 >= 0) {
        std::string::size_type v23 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        std::string::size_type v23 = *(void *)(a1 + 8);
      }
      size_t v24 = std::string::append(&v30, v22, v23);
      __int128 v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      std::string::size_type cap = v24->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v31[0].__locale_ = v25;
      v24->__r_.__value_.__l.__size_ = 0LL;
      v24->__r_.__value_.__l.__cap_ = 0LL;
      v24->__r_.__value_.__r.__words[0] = 0LL;
      sub_100049948(a2, (uint64_t)v31);
      if (SHIBYTE(cap) < 0) {
        operator delete(v31[0].__locale_);
      }
      unint64_t v26 = *(void **)(a1 + 24);
      if (v26 != (void *)(a1 + 32))
      {
        do
        {
          sub_1000021BC(v31, (char *)&unk_10006A022);
          sub_100020484(a2, (siri::dialogengine::ValidationEntry *)(v26 + 4), (const void **)&v31[0].__locale_);
          if (SHIBYTE(cap) < 0) {
            operator delete(v31[0].__locale_);
          }
          size_t v27 = (void *)v26[1];
          if (v27)
          {
            do
            {
              __int128 v28 = v27;
              size_t v27 = (void *)*v27;
            }

            while (v27);
          }

          else
          {
            do
            {
              __int128 v28 = (void *)v26[2];
              BOOL v17 = *v28 == (void)v26;
              unint64_t v26 = v28;
            }

            while (!v17);
          }

          unint64_t v26 = v28;
        }

        while (v28 != (void *)(a1 + 32));
      }
    }

    else
    {
      std::operator+<char>(v31, "No validation errors for: ", a1);
      sub_100049948(a2, (uint64_t)v31);
      if (SHIBYTE(cap) < 0) {
        operator delete(v31[0].__locale_);
      }
    }
  }

void sub_1000208CC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100020950@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x320uLL);
  uint64_t result = sub_100020998(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_100020984(_Unwind_Exception *a1)
{
}

void *sub_100020998(void *a1)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_100078DD8;
  uint64_t v2 = (uint64_t)(a1 + 3);
  bzero(a1 + 3, 0x308uLL);
  sub_100020A34(v2);
  return a1;
}

void sub_1000209E0(_Unwind_Exception *a1)
{
}

void sub_1000209F4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100078DD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100020A04(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100078DD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_100020A24(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_100020A34(uint64_t a1)
{
  uint64_t v2 = siri::dialogengine::ValidationBase::ValidationBase((siri::dialogengine::ValidationBase *)a1);
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 4std::ostream::~ostream(v1, v2 + 8) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 12std::ostream::~ostream(v1, v2 + 8) = 0u;
  *(void *)(v2 + 144) = 0LL;
  sub_1000021BC((void *)(v2 + 152), "5.2");
  *(void *)(a1 + 176) = 0LL;
  *(void *)(a1 + 184) = 0LL;
  *(void *)(a1 + 192) = 0LL;
  *(void *)(a1 + 20std::ostream::~ostream(v1, v2 + 8) = 0LL;
  *(void *)(a1 + 200) = a1 + 208;
  *(_OWORD *)(a1 + 224) = 0u;
  *(void *)(a1 + 280) = 0LL;
  *(void *)(a1 + 216) = 0LL;
  *(void *)(a1 + 272) = a1 + 280;
  *(void *)(a1 + 28std::ostream::~ostream(v1, v2 + 8) = 0LL;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(void *)(a1 + 296) = 0LL;
  *(void *)(a1 + 304) = 0LL;
  siri::dialogengine::GroupPhrases::GroupPhrases((siri::dialogengine::GroupPhrases *)(a1 + 312));
  *(void *)(a1 + 584) = 0LL;
  *(void *)(a1 + 576) = 0LL;
  *(void *)(a1 + 56std::ostream::~ostream(v1, v2 + 8) = a1 + 576;
  *(void *)(a1 + 60std::ostream::~ostream(v1, v2 + 8) = 0LL;
  *(void *)(a1 + 600) = 0LL;
  *(void *)(a1 + 592) = a1 + 600;
  *(void *)(a1 + 624) = 0LL;
  *(void *)(a1 + 640) = 0LL;
  *(void *)(a1 + 632) = 0LL;
  *(void *)(a1 + 616) = a1 + 624;
  *(void *)(a1 + 656) = 0LL;
  *(void *)(a1 + 64std::ostream::~ostream(v1, v2 + 8) = 0LL;
  *(_BYTE *)(a1 + 672) = 1;
  *(_BYTE *)(a1 + 680) = 0;
  *(_BYTE *)(a1 + 704) = 0;
  *(_BYTE *)(a1 + 712) = 0;
  *(_BYTE *)(a1 + 736) = 0;
  *(_BYTE *)(a1 + 744) = 0;
  *(_BYTE *)(a1 + 76std::ostream::~ostream(v1, v2 + 8) = 0;
  return a1;
}

void sub_100020B74( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  unint64_t v18 = v11;
  sub_1000059D0(v16);
  sub_100005988(v15, *(void **)(v10 + 280));
  sub_1000059D0(v10 + 256);
  sub_1000059D0(v10 + 240);
  sub_1000059D0(v14);
  sub_100020C44(v13, *(void **)(v10 + 208));
  a10 = v18;
  sub_100020CCC(&a10);
  siri::dialogengine::ValidationBase::~ValidationBase((siri::dialogengine::ValidationBase *)v10);
  _Unwind_Resume(a1);
}

void sub_100020C44(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100020C44(a1, *a2);
    sub_100020C44(a1, a2[1]);
    sub_100020C8C((uint64_t)(a2 + 4));
    operator delete(a2);
  }

void sub_100020C8C(uint64_t a1)
{
}

void sub_100020CCC(void ***a1)
{
  unint64_t v1 = *a1;
  uint64_t v2 = (void (***)(void))**a1;
  if (v2)
  {
    unint64_t v4 = (void (***)(void))v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      unint64_t v6 = v4 - 42;
      do
      {
        (**v6)(v6);
        BOOL v7 = v6 == v2;
        v6 -= 42;
      }

      while (!v7);
      uint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void *sub_100020D4C(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    sub_100020DD0(result, a4);
    uint64_t result = (void *)sub_100020E6C((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }

  return result;
}

void sub_100020DB0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + std::ostream::~ostream(v1, v2 + 8) = v10;
  sub_10002107C(&a9);
  _Unwind_Resume(a1);
}

char *sub_100020DD0(void *a1, unint64_t a2)
{
  if (a2 >= 0x2E8BA2E8BA2E8BBLL) {
    sub_100002668();
  }
  uint64_t result = (char *)sub_100020E24((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[88 * v4];
  return result;
}

void *sub_100020E24(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2E8BA2E8BA2E8BBLL) {
    sub_1000022F4();
  }
  return operator new(88 * a2);
}

uint64_t sub_100020E6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v8 = 0LL;
    do
    {
      sub_100020F04(a1, (void *)(a4 + v8), a2 + v8);
      v8 += 88LL;
    }

    while (a2 + v8 != a3);
    a4 += v8;
  }

  return a4;
}

void sub_100020ED8(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 88;
    do
    {
      (**(void (***)(uint64_t))(v4 + v2))(v4 + v2);
      v2 -= 88LL;
    }

    while (v2);
  }

  _Unwind_Resume(exception_object);
}

_BYTE *sub_100020F04(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 8);
  a2[1] = v5;
  unint64_t v6 = a2 + 2;
  if (*(char *)(a3 + 39) < 0)
  {
    sub_10000231C(v6, *(void **)(a3 + 16), *(void *)(a3 + 24));
  }

  else
  {
    __int128 v7 = *(_OWORD *)(a3 + 16);
    a2[4] = *(void *)(a3 + 32);
    *(_OWORD *)unint64_t v6 = v7;
  }

  uint64_t v8 = a2 + 5;
  if (*(char *)(a3 + 63) < 0)
  {
    sub_10000231C(v8, *(void **)(a3 + 40), *(void *)(a3 + 48));
  }

  else
  {
    __int128 v9 = *(_OWORD *)(a3 + 40);
    a2[7] = *(void *)(a3 + 56);
    *(_OWORD *)uint64_t v8 = v9;
  }

  *a2 = off_100078E28;
  uint64_t result = a2 + 8;
  __int128 v11 = *(_OWORD *)(a3 + 64);
  a2[10] = *(void *)(a3 + 80);
  *(_OWORD *)uint64_t result = v11;
  return result;
}

void sub_100020FD4(_Unwind_Exception *a1)
{
}

void sub_100021000(void **this)
{
  *this = off_100078E28;
  siri::dialogengine::LineNumberBase::~LineNumberBase((siri::dialogengine::LineNumberBase *)this);
}

void sub_10002103C(void **this)
{
  *this = off_100078E28;
  siri::dialogengine::LineNumberBase::~LineNumberBase((siri::dialogengine::LineNumberBase *)this);
  operator delete(v2);
}

void sub_10002107C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      unint64_t v6 = v4 - 88;
      __int128 v7 = v4 - 88;
      do
      {
        uint64_t v8 = *(void (***)(char *))v7;
        v7 -= 88;
        (*v8)(v6);
        BOOL v9 = v6 == v2;
        unint64_t v6 = v7;
      }

      while (!v9);
      uint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

uint64_t sub_100021108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(void *)uint64_t v4 = 0LL;
      *(void *)(v4 + std::ostream::~ostream(v1, v2 + 8) = 0LL;
      *(void *)(v4 + 16) = 0LL;
      sub_100020D4C( (void *)v4,  *(void *)v6,  *(void *)(v6 + 8),  0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3));
      *(_BYTE *)(v4 + 24) = *(_BYTE *)(v6 + 24);
      uint64_t v4 = v11 + 32;
      v11 += 32LL;
      v6 += 32LL;
    }

    while (v6 != a3);
  }

  char v9 = 1;
  sub_1000211D4((uint64_t)v8);
  return v4;
}

void sub_1000211C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1000211D4(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_100021208(a1);
  }
  return a1;
}

void sub_100021208(uint64_t a1)
{
  uint64_t v1 = **(void ****)(a1 + 16);
  uint64_t v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 4;
    __int128 v3 = v1;
    sub_10002107C(&v3);
  }

void sub_100021250(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 4;
        uint64_t v6 = v4;
        sub_10002107C(&v6);
      }

      while (v4 != v2);
      uint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

uint64_t *sub_1000212C0(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t v6 = (uint64_t **)sub_100005600((uint64_t)a1, &v11, a2);
  __int128 v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    sub_100021368((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000055AC(a1, v11, v8, v10[0]);
    __int128 v7 = v10[0];
    v10[0] = 0LL;
    sub_100021444((uint64_t)v10, 0LL);
  }

  return v7;
}

char *sub_100021368@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x80uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + std::ostream::~ostream(v1, v2 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  uint64_t result = sub_1000213D0(v6 + 32, *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1000213B8(_Unwind_Exception *a1)
{
}

char *sub_1000213D0(char *__dst, __int128 *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10000231C(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v3 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__int128 __dst = v3;
  }

  *(_OWORD *)(__dst + 40) = 0u;
  *(_OWORD *)(__dst + 24) = 0u;
  *(_OWORD *)(__dst + 56) = 0u;
  *((void *)__dst + 6) = __dst + 56;
  *((void *)__dst + 11) = 0LL;
  *((void *)__dst + 10) = 0LL;
  *((void *)__dst + 9) = __dst + 80;
  return __dst;
}

void sub_100021444(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_100021488((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }

void sub_100021488(uint64_t a1)
{
}

void sub_1000214E4(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1000214E4(a1, *a2);
    sub_1000214E4(a1, a2[1]);
    (*(void (**)(void *))a2[4])(a2 + 4);
    operator delete(a2);
  }

uint64_t *sub_100021534(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t **)sub_1000215B0((uint64_t)a1, &v8, a2);
  uint64_t result = *v5;
  if (!*v5)
  {
    sub_100021640((uint64_t)a1, a3, (uint64_t)&v7);
    sub_1000055AC(a1, v8, v5, v7);
    return v7;
  }

  return result;
}

void *sub_1000215B0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        __int128 v7 = v4;
        uint64_t v8 = v4 + 4;
        uint64_t v4 = (void *)*v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }

      uint64_t v5 = v7 + 1;
      uint64_t v4 = (void *)v7[1];
    }

    while (v4);
  }

  else
  {
    __int128 v7 = (void *)(a1 + 8);
  }

LABEL_9:
  *a2 = v7;
  return v5;
}

  *a2 = v5;
  return result;
}

  sub_100038638(a2);
  sub_1000021BC( v13,  "\n  <EXECUTABLE> <COMMAND> validate [--errors]\n\n      Warnings are ignored when --errors is specified.\n");
  sub_1000021BC(__p, "assetdelivery");
  sub_1000388C0((uint64_t)&v8, (uint64_t)__p, (uint64_t)v13);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  uint64_t v6 = 0LL;
LABEL_14:
  v13[0] = &v8;
  sub_1000027F4((void ***)v13);
  return v6;
}

_BYTE *sub_100021640@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x78uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + std::ostream::~ostream(v1, v2 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  uint64_t result = sub_1000216AC(v5, v6 + 4, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_100021694(_Unwind_Exception *a1)
{
}

_BYTE *sub_1000216AC(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 8);
  a2[1] = v5;
  uint64_t v6 = a2 + 2;
  if (*(char *)(a3 + 39) < 0)
  {
    sub_10000231C(v6, *(void **)(a3 + 16), *(void *)(a3 + 24));
  }

  else
  {
    __int128 v7 = *(_OWORD *)(a3 + 16);
    a2[4] = *(void *)(a3 + 32);
    *(_OWORD *)uint64_t v6 = v7;
  }

  uint64_t v8 = a2 + 5;
  if (*(char *)(a3 + 63) < 0)
  {
    sub_10000231C(v8, *(void **)(a3 + 40), *(void *)(a3 + 48));
  }

  else
  {
    __int128 v9 = *(_OWORD *)(a3 + 40);
    a2[7] = *(void *)(a3 + 56);
    *(_OWORD *)uint64_t v8 = v9;
  }

  *a2 = off_100078E28;
  uint64_t result = a2 + 8;
  __int128 v11 = *(_OWORD *)(a3 + 64);
  a2[10] = *(void *)(a3 + 80);
  *(_OWORD *)uint64_t result = v11;
  return result;
}

void sub_10002177C(_Unwind_Exception *a1)
{
}

void sub_1000217A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void (****)(void))a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      (*v2[4])(v2 + 4);
    }
    operator delete(v2);
  }

uint64_t *sub_1000217F4(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      __int128 v3 = v2;
      uint64_t v2 = (uint64_t *)*v2;
    }

    while (v2);
  }

  else
  {
    uint64_t v4 = a2;
    do
    {
      __int128 v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      uint64_t v4 = v3;
    }

    while (!v5);
  }

  if (*a1 == a2) {
    *a1 = v3;
  }
  uint64_t v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  sub_100021864(v6, a2);
  return v3;
}

uint64_t *sub_100021864(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  __int128 v3 = a2;
  if (*a2)
  {
    uint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      __int128 v3 = a2;
      goto LABEL_7;
    }

    do
    {
      __int128 v3 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }

    while (v4);
  }

  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }

  int v5 = 1;
LABEL_8:
  uint64_t v6 = (uint64_t **)v3[2];
  __int128 v7 = *v6;
  if (*v6 == v3)
  {
    uint64_t *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      __int128 v7 = 0LL;
      uint64_t result = (uint64_t *)v2;
    }

    else
    {
      __int128 v7 = v6[1];
    }
  }

  else
  {
    v6[1] = (uint64_t *)v2;
  }

  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8LL * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    uint64_t *v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2) {
      uint64_t result = v3;
    }
  }

  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }

  while (1)
  {
    uint64_t v12 = v7[2];
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      uint64_t v13 = *(uint64_t **)(v12 + 8);
      uint64_t v14 = *v13;
      *(void *)(v12 + std::ostream::~ostream(v1, v2 + 8) = *v13;
      if (v14) {
        *(void *)(v14 + 16) = v12;
      }
      void v13[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8LL * (**(void **)(v12 + 16) != v12)) = v13;
      *uint64_t v13 = v12;
      *(void *)(v12 + 16) = v13;
      __int128 v7 = *(uint64_t **)(*v7 + 8);
    }

    uint64_t v15 = (void *)*v7;
    if (*v7 && !*((_BYTE *)v15 + 24))
    {
      uint64_t v16 = (uint64_t *)v7[1];
      if (!v16) {
        goto LABEL_56;
      }
LABEL_55:
      if (*((_BYTE *)v16 + 24))
      {
LABEL_56:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        uint64_t v22 = v15[1];
        uint64_t *v7 = v22;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        void v15[2] = v7[2];
        *(void *)(v7[2] + 8LL * (*(void *)v7[2] != (void)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        uint64_t v16 = v7;
      }

      else
      {
        uint64_t v15 = v7;
      }

      uint64_t v23 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      size_t v24 = *(uint64_t **)(v23 + 8);
      uint64_t v25 = *v24;
      *(void *)(v23 + std::ostream::~ostream(v1, v2 + 8) = *v24;
      if (v25) {
        *(void *)(v25 + 16) = v23;
      }
      v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8LL * (**(void **)(v23 + 16) != v23)) = v24;
      uint64_t *v24 = v23;
      goto LABEL_72;
    }

    uint64_t v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24)) {
      goto LABEL_55;
    }
    *((_BYTE *)v7 + 24) = 0;
    BOOL v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      BOOL v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }

    if (!*((_BYTE *)v17 + 24)) {
      goto LABEL_53;
    }
LABEL_49:
    __int128 v7 = *(uint64_t **)(v17[2] + 8LL * (*(void *)v17[2] == (void)v17));
  }

  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    uint64_t v18 = v7[1];
    *(void *)uint64_t v12 = v18;
    if (v18) {
      *(void *)(v18 + 16) = v12;
    }
    v7[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8LL * (**(void **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(void *)(v12 + 16) = v7;
    __int128 v7 = *(uint64_t **)v12;
  }

  int v19 = (void *)*v7;
  if (*v7 && !*((_BYTE *)v19 + 24)) {
    goto LABEL_68;
  }
  __int128 v20 = (uint64_t *)v7[1];
  if (!v20 || *((_BYTE *)v20 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    BOOL v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }

  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_68:
    __int128 v20 = v7;
  }

  else
  {
    *((_BYTE *)v20 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    uint64_t v26 = *v20;
    v7[1] = *v20;
    if (v26) {
      *(void *)(v26 + 16) = v7;
    }
    v20[2] = v7[2];
    *(void *)(v7[2] + 8LL * (*(void *)v7[2] != (void)v7)) = v20;
    *__int128 v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    int v19 = v7;
  }

  uint64_t v23 = v20[2];
  *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  size_t v24 = *(uint64_t **)v23;
  uint64_t v27 = *(void *)(*(void *)v23 + 8LL);
  *(void *)uint64_t v23 = v27;
  if (v27) {
    *(void *)(v27 + 16) = v23;
  }
  v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8LL * (**(void **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

void sub_100021BE8(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100021BE8(a1, *a2);
    sub_100021BE8(a1, a2[1]);
    sub_100021488((uint64_t)(a2 + 4));
    operator delete(a2);
  }

uint64_t sub_100021C30@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, std::stringbuf::string_type *a3@<X8>)
{
  if (a1 >= 2)
  {
    uint64_t v6 = sub_100002F60(&v17, (uint64_t)" colspan=", 10LL);
    __int128 v7 = (void *)std::ostream::operator<<(v6, a1);
    sub_100002F60(v7, (uint64_t)"", 1LL);
  }

  uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  if ((v8 & 0x80u) != 0LL) {
    uint64_t v8 = *(void *)(a2 + 8);
  }
  if (v8)
  {
    uint64_t v9 = sub_100002F60(&v17, (uint64_t)" class=", 8LL);
    int v10 = *(char *)(a2 + 23);
    if (v10 >= 0) {
      uint64_t v11 = a2;
    }
    else {
      uint64_t v11 = *(void *)a2;
    }
    if (v10 >= 0) {
      uint64_t v12 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v12 = *(void *)(a2 + 8);
    }
    uint64_t v13 = sub_100002F60(v9, v11, v12);
    sub_100002F60(v13, (uint64_t)"", 1LL);
  }

  sub_100002F60(&v17, (uint64_t)">", 1LL);
  std::stringbuf::str(a3, &v18);
  *(void *)((char *)v16
  uint64_t v17 = v14;
  std::streambuf::~streambuf(&v18);
  return std::ios::~ios(&v19);
}

void sub_100021DA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_100021DB4(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  __int128 v3 = std::string::append(&v4, " -->\n");
  *a2 = *v3;
  v3->__r_.__value_.__l.__size_ = 0LL;
  v3->__r_.__value_.__l.__cap_ = 0LL;
  v3->__r_.__value_.__r.__words[0] = 0LL;
}

void sub_100021E24( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_100021E40@<X0>( unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  if (a1 >= 2)
  {
    std::to_string(&v26, a1);
    uint64_t v8 = std::string::insert(&v26, 0LL, " colspan=");
    __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0LL;
    v8->__r_.__value_.__l.__cap_ = 0LL;
    v8->__r_.__value_.__r.__words[0] = 0LL;
    int v10 = std::string::append(&v27, "");
    __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    int64_t cap = v10->__r_.__value_.__l.__cap_;
    *(_OWORD *)std::stringbuf::string_type __p = v11;
    v10->__r_.__value_.__l.__size_ = 0LL;
    v10->__r_.__value_.__l.__cap_ = 0LL;
    v10->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      uint64_t v12 = __p;
    }
    else {
      uint64_t v12 = (void **)__p[0];
    }
    if (cap >= 0) {
      std::string::size_type v13 = HIBYTE(cap);
    }
    else {
      std::string::size_type v13 = (std::string::size_type)__p[1];
    }
    std::string::append(a4, (const std::string::value_type *)v12, v13);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
  }

  if (a2 >= 2)
  {
    std::to_string(&v26, a2);
    uint64_t v14 = std::string::insert(&v26, 0LL, " rowspan=");
    __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0LL;
    v14->__r_.__value_.__l.__cap_ = 0LL;
    v14->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v16 = std::string::append(&v27, "");
    __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    int64_t cap = v16->__r_.__value_.__l.__cap_;
    *(_OWORD *)std::stringbuf::string_type __p = v17;
    v16->__r_.__value_.__l.__size_ = 0LL;
    v16->__r_.__value_.__l.__cap_ = 0LL;
    v16->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      std::stringbuf v18 = __p;
    }
    else {
      std::stringbuf v18 = (void **)__p[0];
    }
    if (cap >= 0) {
      std::string::size_type v19 = HIBYTE(cap);
    }
    else {
      std::string::size_type v19 = (std::string::size_type)__p[1];
    }
    std::string::append(a4, (const std::string::value_type *)v18, v19);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
  }

  uint64_t v20 = *(unsigned __int8 *)(a3 + 23);
  if ((v20 & 0x80u) != 0LL) {
    uint64_t v20 = *(void *)(a3 + 8);
  }
  if (v20)
  {
    std::operator+<char>(&v27, " class=", a3);
    BOOL v21 = std::string::append(&v27, "");
    __int128 v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    int64_t cap = v21->__r_.__value_.__l.__cap_;
    *(_OWORD *)std::stringbuf::string_type __p = v22;
    v21->__r_.__value_.__l.__size_ = 0LL;
    v21->__r_.__value_.__l.__cap_ = 0LL;
    v21->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      uint64_t v23 = __p;
    }
    else {
      uint64_t v23 = (void **)__p[0];
    }
    if (cap >= 0) {
      std::string::size_type v24 = HIBYTE(cap);
    }
    else {
      std::string::size_type v24 = (std::string::size_type)__p[1];
    }
    std::string::append(a4, (const std::string::value_type *)v23, v24);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
  }

  return std::string::append(a4, ">");
}

void sub_1000220A8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100022150( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, int a5@<W4>, std::string *a6@<X8>)
{
  a6->__r_.__value_.__r.__words[0] = 0LL;
  a6->__r_.__value_.__l.__size_ = 0LL;
  a6->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a6, "\n  ");
  if (a5) {
    std::string::append(a6, "<span title=Multiple Allowed>&equiv;</span>&nbsp;");
  }
  sub_10002337C((uint64_t *)a1, &v65);
  uint64_t v12 = std::string::insert(&v65, 0LL, "<b>");
  __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v66.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0LL;
  v12->__r_.__value_.__l.__cap_ = 0LL;
  v12->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v14 = std::string::append(&v66, "</b><br/>\n");
  __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v67.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0LL;
  v14->__r_.__value_.__l.__cap_ = 0LL;
  v14->__r_.__value_.__r.__words[0] = 0LL;
  if ((v67.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v16 = &v67;
  }
  else {
    uint64_t v16 = (std::stringbuf::string_type *)v67.__r_.__value_.__r.__words[0];
  }
  if ((v67.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = v67.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = v67.__r_.__value_.__l.__size_;
  }
  std::string::append(a6, (const std::string::value_type *)v16, size);
  int v18 = *(char *)(a1 + 23);
  if (v18 < 0)
  {
    if (*(void *)(a1 + 8) != 3LL)
    {
LABEL_24:
      if (*a3 == a3[1]) {
        return;
      }
      uint64_t v20 = sub_1000021BC(&v66, "Variants:");
      sub_1000234C0((uint64_t)v20, (uint64_t)qword_10007C688, &v67);
      sub_10002337C(a4, &v66);
      *(std::string *)a4 = v66;
      uint64_t v21 = *a3;
      uint64_t v22 = a3[1];
      if (*a3 != v22)
      {
        do
        {
          sub_10002337C((uint64_t *)v21, &v66);
          __int128 v23 = *(_OWORD *)&v66.__r_.__value_.__l.__data_;
          *(void *)(v21 + 16) = v66.__r_.__value_.__l.__cap_;
          *(_OWORD *)uint64_t v21 = v23;
          unsigned __int8 v24 = *((_BYTE *)a4 + 23);
          if ((char)v24 < 0)
          {
            if (!a4[1]) {
              goto LABEL_56;
            }
          }

          else if (!*((_BYTE *)a4 + 23))
          {
            goto LABEL_56;
          }

          uint64_t v25 = *(unsigned __int8 *)(v21 + 23);
          if ((v25 & 0x80u) == 0LL) {
            uint64_t v26 = *(unsigned __int8 *)(v21 + 23);
          }
          else {
            uint64_t v26 = *(void *)(v21 + 8);
          }
          if ((v24 & 0x80u) == 0) {
            uint64_t v27 = *((unsigned __int8 *)a4 + 23);
          }
          else {
            uint64_t v27 = a4[1];
          }
          if (v26 == v27)
          {
            if ((v24 & 0x80u) == 0) {
              uint64_t v28 = (unsigned __int8 *)a4;
            }
            else {
              uint64_t v28 = (unsigned __int8 *)*a4;
            }
            if ((v25 & 0x80) == 0)
            {
              if (*(_BYTE *)(v21 + 23))
              {
                uint64_t v29 = 0LL;
                while (*(unsigned __int8 *)(v21 + v29) == v28[v29])
                {
                  if (v25 == ++v29) {
                    goto LABEL_53;
                  }
                }

                goto LABEL_56;
              }

LABEL_53:
              sub_1000234C0(v21, (uint64_t)qword_10007C6B8, &v66);
              __int128 v30 = *(_OWORD *)&v66.__r_.__value_.__l.__data_;
              *(void *)(v21 + 16) = v66.__r_.__value_.__l.__cap_;
              *(_OWORD *)uint64_t v21 = v30;
              goto LABEL_56;
            }
          }

  uint64_t v26 = (uint64_t *)(a2 + 248);
  uint64_t v27 = *(char *)(a2 + 271);
  if (v27 < 0)
  {
    if (*(void *)(a2 + 256) != 5LL) {
      return *(double *)&v8;
    }
    uint64_t v26 = (uint64_t *)*v26;
  }

  else if (v27 != 5)
  {
    return *(double *)&v8;
  }

  if (*(_DWORD *)v26 == 1701867637 && *((_BYTE *)v26 + 4) == 114)
  {
    siri::dialogengine::StringToUpper(&__str, a4);
  }

  else
  {
    uint64_t v29 = *(_DWORD *)v26;
    __int128 v30 = *((unsigned __int8 *)v26 + 4);
    if (v29 != 1702326124 || v30 != 114) {
      return *(double *)&v8;
    }
    siri::dialogengine::StringToLower(&__str);
  }

  *(void *)&uint64_t v8 = __str.__r_.__value_.__r.__words[0];
  *a4 = __str;
  return *(double *)&v8;
}

LABEL_56:
          v21 += 24LL;
        }

        while (v21 != v22);
      }

      sub_1000021BC(&v65, ", ");
      siri::dialogengine::StringJoin(&v66, a3, &v65);
      if ((v67.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        size_t v31 = v67.__r_.__value_.__s.__size_;
      }
      else {
        size_t v31 = v67.__r_.__value_.__l.__size_;
      }
      std::string::size_type v32 = &v60;
      sub_100007A0C((uint64_t)&v60, v31 + 1);
      if ((v60.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        std::string::size_type v32 = (std::string *)v60.__r_.__value_.__r.__words[0];
      }
      if (v31)
      {
        if ((v67.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          BOOL v33 = &v67;
        }
        else {
          BOOL v33 = (std::stringbuf::string_type *)v67.__r_.__value_.__r.__words[0];
        }
        memmove(v32, v33, v31);
      }

      *(_WORD *)((char *)&v32->__r_.__value_.__l.__data_ + v31) = 32;
      if ((v66.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        unint64_t v34 = &v66;
      }
      else {
        unint64_t v34 = (std::string *)v66.__r_.__value_.__r.__words[0];
      }
      if ((v66.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v35 = v66.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v35 = v66.__r_.__value_.__l.__size_;
      }
      int v36 = std::string::append(&v60, (const std::string::value_type *)v34, v35);
      __int128 v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      std::string::size_type cap = v36->__r_.__value_.__l.__cap_;
      *(_OWORD *)std::stringbuf::string_type __p = v37;
      v36->__r_.__value_.__l.__size_ = 0LL;
      v36->__r_.__value_.__l.__cap_ = 0LL;
      v36->__r_.__value_.__r.__words[0] = 0LL;
      sub_1000234C0((uint64_t)__p, (uint64_t)qword_10007C6A0, &v63);
      __int128 v38 = std::string::insert(&v63, 0LL, "  ");
      __int128 v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      v64.__r_.__value_.__l.__cap_ = v38->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v39;
      v38->__r_.__value_.__l.__size_ = 0LL;
      v38->__r_.__value_.__l.__cap_ = 0LL;
      v38->__r_.__value_.__r.__words[0] = 0LL;
      __int128 v40 = std::string::append(&v64, "\n");
      __int128 v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
      v65.__r_.__value_.__l.__cap_ = v40->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v41;
      v40->__r_.__value_.__l.__size_ = 0LL;
      v40->__r_.__value_.__l.__cap_ = 0LL;
      v40->__r_.__value_.__r.__words[0] = 0LL;
      if ((v65.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v42 = &v65;
      }
      else {
        uint64_t v42 = (std::string *)v65.__r_.__value_.__r.__words[0];
      }
      if ((v65.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v43 = v65.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v43 = v65.__r_.__value_.__l.__size_;
      }
      goto LABEL_81;
    }

    a1 = *(void *)a1;
  }

  else if (v18 != 3)
  {
    goto LABEL_24;
  }

  if (*(_WORD *)a1 != 28225 || *(_BYTE *)(a1 + 2) != 121) {
    goto LABEL_24;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    if (!*(void *)(a2 + 8)) {
      return;
    }
  }

  else if (!*(_BYTE *)(a2 + 23))
  {
    return;
  }

  uint64_t v44 = sub_1000021BC(&v66, "Default:");
  sub_1000234C0((uint64_t)v44, (uint64_t)qword_10007C688, &v67);
  sub_10002337C((uint64_t *)a2, &v66);
  if ((*((char *)a4 + 23) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)a4 + 23)) {
      goto LABEL_116;
    }
LABEL_106:
    sub_10002337C(a4, &v64);
    char v45 = std::string::insert(&v64, 0LL, " - ");
    __int128 v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    v65.__r_.__value_.__l.__cap_ = v45->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v46;
    v45->__r_.__value_.__l.__size_ = 0LL;
    v45->__r_.__value_.__l.__cap_ = 0LL;
    v45->__r_.__value_.__r.__words[0] = 0LL;
    if ((v65.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v47 = &v65;
    }
    else {
      std::string::size_type v47 = (std::string *)v65.__r_.__value_.__r.__words[0];
    }
    if ((v65.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v48 = v65.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v48 = v65.__r_.__value_.__l.__size_;
    }
    std::string::append(&v66, (const std::string::value_type *)v47, v48);
    goto LABEL_116;
  }

  if (a4[1]) {
    goto LABEL_106;
  }
LABEL_116:
  if ((v67.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    size_t v49 = v67.__r_.__value_.__s.__size_;
  }
  else {
    size_t v49 = v67.__r_.__value_.__l.__size_;
  }
  char v50 = &v60;
  sub_100007A0C((uint64_t)&v60, v49 + 1);
  if ((v60.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    char v50 = (std::string *)v60.__r_.__value_.__r.__words[0];
  }
  if (v49)
  {
    if ((v67.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v51 = &v67;
    }
    else {
      uint64_t v51 = (std::stringbuf::string_type *)v67.__r_.__value_.__r.__words[0];
    }
    memmove(v50, v51, v49);
  }

  *(_WORD *)((char *)&v50->__r_.__value_.__l.__data_ + v49) = 32;
  if ((v66.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v52 = &v66;
  }
  else {
    std::string::size_type v52 = (std::string *)v66.__r_.__value_.__r.__words[0];
  }
  if ((v66.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v53 = v66.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v53 = v66.__r_.__value_.__l.__size_;
  }
  uint64_t v54 = std::string::append(&v60, (const std::string::value_type *)v52, v53);
  __int128 v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
  std::string::size_type cap = v54->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::stringbuf::string_type __p = v55;
  v54->__r_.__value_.__l.__size_ = 0LL;
  v54->__r_.__value_.__l.__cap_ = 0LL;
  v54->__r_.__value_.__r.__words[0] = 0LL;
  sub_1000234C0((uint64_t)__p, (uint64_t)qword_10007C6A0, &v63);
  int v56 = std::string::insert(&v63, 0LL, "  ");
  __int128 v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
  v64.__r_.__value_.__l.__cap_ = v56->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v57;
  v56->__r_.__value_.__l.__size_ = 0LL;
  v56->__r_.__value_.__l.__cap_ = 0LL;
  v56->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v58 = std::string::append(&v64, "\n");
  __int128 v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
  v65.__r_.__value_.__l.__cap_ = v58->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v59;
  v58->__r_.__value_.__l.__size_ = 0LL;
  v58->__r_.__value_.__l.__cap_ = 0LL;
  v58->__r_.__value_.__r.__words[0] = 0LL;
  if ((v65.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v42 = &v65;
  }
  else {
    uint64_t v42 = (std::string *)v65.__r_.__value_.__r.__words[0];
  }
  if ((v65.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v43 = v65.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v43 = v65.__r_.__value_.__l.__size_;
  }
LABEL_81:
  std::string::append(a6, (const std::string::value_type *)v42, v43);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
}

    std::string v4 = 0LL;
    goto LABEL_57;
  }

  if ((v23 & 0x80u) == 0) {
    int v10 = v23;
  }
  else {
    int v10 = (unint64_t)__p[1];
  }
  if (v10) {
    printf("Distribution: %s\nVersion: %s\nMinimum Differential Update Version: %s\n");
  }
  else {
    printf("Distribution: %s\nVersion: %s\n");
  }
LABEL_54:
  std::string v4 = 1LL;
LABEL_57:
  if (v28 < 0) {
    operator delete(v27[0]);
  }
LABEL_9:
  v29[0] = (void **)&v24;
  sub_1000027F4(v29);
  return v4;
}

    sub_100002668();
  }

  void *v6 = a2;
  uint64_t v14 = v6 + 1;
LABEL_38:
  a1[5] = v14;
  if ((v10 - v9) >> 4 < v11)
  {
    __int128 v38 = a1[12];
    __int128 v39 = a1[11];
    if (v39 >= v38)
    {
      __int128 v41 = (uint64_t)(v39 - (void)*v8) >> 4;
      uint64_t v42 = v41 + 1;
      std::string::size_type v43 = v38 - (void)*v8;
      if (v43 >> 3 > v42) {
        uint64_t v42 = v43 >> 3;
      }
      else {
        uint64_t v44 = v42;
      }
      if (v44) {
        char v45 = (char *)sub_100028644((uint64_t)(a1 + 12), v44);
      }
      else {
        char v45 = 0LL;
      }
      __int128 v46 = &v45[16 * v41];
      std::string::size_type v47 = &v45[16 * v44];
      *(void *)__int128 v46 = a2;
      v46[8] = 0;
      __int128 v40 = v46 + 16;
      size_t v49 = (char *)a1[10];
      std::string::size_type v48 = (char *)a1[11];
      if (v48 != v49)
      {
        do
        {
          *((_OWORD *)v46 - 1) = *((_OWORD *)v48 - 1);
          v46 -= 16;
          v48 -= 16;
        }

        while (v48 != v49);
        std::string::size_type v48 = *v8;
      }

      a1[10] = v46;
      a1[11] = v40;
      a1[12] = v47;
      if (v48) {
        operator delete(v48);
      }
    }

    else
    {
      *(void *)__int128 v39 = a2;
      *(_BYTE *)(v39 + std::ostream::~ostream(v1, v2 + 8) = 0;
      __int128 v40 = (char *)(v39 + 16);
    }

    a1[11] = v40;
  }

void sub_100022828( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33, uint64_t a34, void *__p, uint64_t a36, int a37, __int16 a38, char a39, char a40)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000229C0(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 != v2)
  {
    do
    {
      uint64_t v6 = *(siri::dialogengine::PatternSchemaUsage **)v3;
      int v5 = *(std::__shared_weak_count **)(v3 + 8);
      __int128 v23 = *(siri::dialogengine::PatternSchemaUsage **)v3;
      unsigned __int8 v24 = v5;
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          unint64_t v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
      }

      memset(&v22, 0, sizeof(v22));
      switch(siri::dialogengine::PatternSchemaUsage::GetUsage(v6))
      {
        case 1u:
          sub_1000021BC(&__p, "Required");
          sub_10002363C((uint64_t)qword_10007C5B0, (uint64_t)&__p, &v21);
          goto LABEL_11;
        case 2u:
          sub_1000021BC(&__p, "Default On");
          sub_10002363C((uint64_t)qword_10007C5F8, (uint64_t)&__p, &v21);
          goto LABEL_11;
        case 3u:
          sub_1000021BC(&__p, "Default Off");
          sub_10002363C((uint64_t)qword_10007C5E0, (uint64_t)&__p, &v21);
          goto LABEL_11;
        case 4u:
          sub_1000021BC(&__p, "Not Allowed");
          sub_10002363C((uint64_t)qword_10007C5C8, (uint64_t)&__p, &v21);
LABEL_11:
          std::string v22 = v21;
          break;
        default:
          std::string::assign(&v22, (const std::string::value_type *)&unk_10006A022);
          break;
      }

      std::string::size_type size = a2->__r_.__value_.__s.__size_;
      if ((size & 0x80u) != 0LL) {
        std::string::size_type size = a2->__r_.__value_.__l.__size_;
      }
      if (size)
      {
        std::string::append(a2, "<br/>");
        siri::dialogengine::PatternSchemaUsage::GetCondition(v6);
        if ((char)v21.__r_.__value_.__s.__size_ < 0)
        {
          std::string::size_type v10 = v21.__r_.__value_.__l.__size_;
          operator delete(v21.__r_.__value_.__l.__data_);
          if (v10) {
            goto LABEL_23;
          }
        }

        else if (v21.__r_.__value_.__s.__size_)
        {
          goto LABEL_23;
        }

        std::string::append(a2, "Else:<br/>");
      }

LABEL_23:
      if ((v22.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int128 v11 = &v22;
      }
      else {
        __int128 v11 = (std::string *)v22.__r_.__value_.__r.__words[0];
      }
      if ((v22.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v12 = v22.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v12 = v22.__r_.__value_.__l.__size_;
      }
      std::string::append(a2, (const std::string::value_type *)v11, v12);
      siri::dialogengine::PatternSchemaUsage::GetCondition(v6);
      if ((char)v21.__r_.__value_.__s.__size_ < 0)
      {
        std::string::size_type v13 = v21.__r_.__value_.__l.__size_;
        operator delete(v21.__r_.__value_.__l.__data_);
        if (!v13) {
          goto LABEL_43;
        }
      }

      else if (!v21.__r_.__value_.__s.__size_)
      {
        goto LABEL_43;
      }

      siri::dialogengine::PatternSchemaUsage::GetCondition(v6);
      uint64_t v14 = std::string::insert(&__p, 0LL, "<br/>If ");
      __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
      v21.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v15;
      v14->__r_.__value_.__l.__size_ = 0LL;
      v14->__r_.__value_.__l.__cap_ = 0LL;
      v14->__r_.__value_.__r.__words[0] = 0LL;
      if ((v21.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v16 = &v21;
      }
      else {
        uint64_t v16 = (std::string *)v21.__r_.__value_.__r.__words[0];
      }
      if ((v21.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v17 = v21.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v17 = v21.__r_.__value_.__l.__size_;
      }
      std::string::append(a2, (const std::string::value_type *)v16, v17);
LABEL_43:
      if ((char)v22.__r_.__value_.__s.__size_ < 0)
      {
        operator delete(v22.__r_.__value_.__l.__data_);
        if (v5)
        {
LABEL_47:
          int v18 = (unint64_t *)&v5->__shared_owners_;
          do
            unint64_t v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
      }

      else if (v5)
      {
        goto LABEL_47;
      }

      v3 += 16LL;
    }

    while (v3 != v2);
  }

void sub_100022CD4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, char a30)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  sub_1000059D0((uint64_t)&a30);
  _Unwind_Resume(a1);
}

uint64_t sub_100022D64@<X0>(unint64_t a1@<X0>, uint64_t *a2@<X1>, std::stringbuf::string_type *a3@<X8>)
{
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t size = __p.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t size = __p.__r_.__value_.__l.__size_;
  }
  sub_100002F60(&v24, (uint64_t)p_p, size);
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  if (*a2 != a2[1])
  {
    unint64_t v8 = sub_100002F60(&v24, (uint64_t)"\n", 1LL);
    sub_100002F60(v8, (uint64_t)"<ul>\n", 5LL);
    uint64_t v9 = *a2;
    uint64_t v10 = a2[1];
    if (*a2 != v10)
    {
      do
      {
        __int128 v11 = sub_100002F60(&v24, (uint64_t)"  <li>", 6LL);
        int v12 = *(char *)(v9 + 23);
        if (v12 >= 0) {
          uint64_t v13 = v9;
        }
        else {
          uint64_t v13 = *(void *)v9;
        }
        if (v12 >= 0) {
          uint64_t v14 = *(unsigned __int8 *)(v9 + 23);
        }
        else {
          uint64_t v14 = *(void *)(v9 + 8);
        }
        __int128 v15 = sub_100002F60(v11, v13, v14);
        sub_100002F60(v15, (uint64_t)"</li>\n", 6LL);
        v9 += 24LL;
      }

      while (v9 != v10);
    }

    sub_100002F60(&v24, (uint64_t)"</ul>\n", 6LL);
  }

  sub_1000021BC(&__p, "</td>\n");
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v16 = &__p;
  }
  else {
    uint64_t v16 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v17 = __p.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t v17 = __p.__r_.__value_.__l.__size_;
  }
  sub_100002F60(&v24, (uint64_t)v16, v17);
  std::stringbuf::str(a3, &v25);
  *(void *)((char *)v23
  uint64_t v24 = v18;
  std::streambuf::~streambuf(&v25);
  return std::ios::~ios(&v26);
}

void sub_100022F78( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, char a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_100001C10((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void *sub_100022FDC@<X0>(__int128 *a1@<X1>, void **a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x48uLL);
  uint64_t result = sub_10002303C(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_100023028(_Unwind_Exception *a1)
{
}

void *sub_10002303C(void *a1, __int128 *a2, void **a3)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_100078E60;
  sub_100023108((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_100023088(_Unwind_Exception *a1)
{
}

void sub_10002309C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100078E60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000230AC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100078E60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_1000230CC(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  sub_1000059D0(a1 + 48);
  uint64_t v2 = v1;
  sub_100007BFC(&v2);
}

void sub_100023108(uint64_t a1, uint64_t a2, __int128 *a3, void **a4)
{
  __int128 v7 = *a3;
  *(void *)a3 = 0LL;
  *((void *)a3 + 1) = 0LL;
  sub_100014490(a2, (siri::dialogengine::VisualComponentsCombination **)&v7, a4);
  std::string v4 = (std::__shared_weak_count *)*((void *)&v7 + 1);
  if (*((void *)&v7 + 1))
  {
    char v5 = (unint64_t *)(*((void *)&v7 + 1) + 8LL);
    do
      unint64_t v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

void sub_10002317C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

_OWORD *sub_100023190(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v6 = (void **)sub_100005600((uint64_t)a1, &v14, a2);
  __int128 v7 = *v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    __int128 v7 = operator new(0x48uLL);
    v12[1] = a1 + 1;
    uint64_t v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0LL;
    v9[2] = 0LL;
    void *v9 = 0LL;
    *((void *)v7 + 7) = 0LL;
    *((void *)v7 + std::ostream::~ostream(v1, v2 + 8) = 0LL;
    char v13 = 1;
    sub_1000055AC(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0LL;
    sub_100005908((uint64_t)v12, 0LL);
  }

  return v7;
}

uint64_t sub_100023250(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  uint64_t v3 = a1 + 24;
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v5;
  *(void *)(a1 + std::ostream::~ostream(v1, v2 + 8) = 0LL;
  unint64_t v6 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24LL));
  std::ios_base::init(v6, (void *)(a1 + 24));
  v6[1].__vftable = 0LL;
  v6[1].__fmtflags_ = -1;
  *(void *)(a1 + 16) = v7;
  *(void *)(v2 + *(void *)(v7 - 24)) = v8;
  *(void *)a1 = v9;
  std::streambuf::basic_streambuf(v3);
  *(_OWORD *)(a1 + 8std::ostream::~ostream(v1, v2 + 8) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_100023354(_Unwind_Exception *a1)
{
}

void sub_10002337C(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  BOOL v4 = *((char *)a1 + 23) < 0;
  uint64_t v5 = *((unsigned __int8 *)a1 + 23);
  if ((v5 & 0x80u) != 0LL) {
    uint64_t v5 = a1[1];
  }
  if (v5)
  {
    unint64_t v6 = 0LL;
    do
    {
      if (v6)
      {
        uint64_t v7 = v4 ? (uint64_t *)*a1 : a1;
        __darwin_ct_rune_t v8 = *((char *)v7 + v6);
        if (v8 < 0 ? __maskrune(v8, 0x8000uLL) : _DefaultRuneLocale.__runetype[v8] & 0x8000)
        {
          uint64_t v10 = *((char *)a1 + 23) >= 0 ? (uint64_t)a1 : *a1;
          __darwin_ct_rune_t v11 = *(char *)(v10 + v6 - 1);
          if (v11 < 0 ? __maskrune(v11, 0x1000uLL) : _DefaultRuneLocale.__runetype[v11] & 0x1000) {
            std::string::append(a2, " ");
          }
        }
      }

      else {
        char v13 = (uint64_t *)*a1;
      }
      std::string::push_back(a2, *((_BYTE *)v13 + v6++));
      BOOL v4 = *((char *)a1 + 23) < 0;
      unint64_t v14 = *((unsigned __int8 *)a1 + 23);
      if ((v14 & 0x80u) != 0LL) {
        unint64_t v14 = a1[1];
      }
    }

    while (v6 < v14);
  }

void sub_1000234A4(_Unwind_Exception *exception_object)
{
}

uint64_t sub_1000234C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, std::stringbuf::string_type *a3@<X8>)
{
  uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  if ((v6 & 0x80u) != 0LL) {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  if (v6)
  {
    uint64_t v7 = sub_100002F60(&v20, (uint64_t)" class=", 8LL);
    int v8 = *(char *)(a2 + 23);
    if (v8 >= 0) {
      uint64_t v9 = a2;
    }
    else {
      uint64_t v9 = *(void *)a2;
    }
    if (v8 >= 0) {
      uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v10 = *(void *)(a2 + 8);
    }
    __darwin_ct_rune_t v11 = sub_100002F60(v7, v9, v10);
    sub_100002F60(v11, (uint64_t)"", 1LL);
  }

  int v12 = sub_100002F60(&v20, (uint64_t)">", 1LL);
  int v13 = *(char *)(a1 + 23);
  if (v13 >= 0) {
    uint64_t v14 = a1;
  }
  else {
    uint64_t v14 = *(void *)a1;
  }
  if (v13 >= 0) {
    uint64_t v15 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v15 = *(void *)(a1 + 8);
  }
  uint64_t v16 = sub_100002F60(v12, v14, v15);
  sub_100002F60(v16, (uint64_t)"</span>", 7LL);
  std::stringbuf::str(a3, &v21);
  *(void *)((char *)v19
  uint64_t v20 = v17;
  std::streambuf::~streambuf(&v21);
  return std::ios::~ios(&v22);
}

void sub_100023628(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_10002363C(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  std::operator+<char>(&v13, "<img src=data:image/png;base64, ", a1);
  uint64_t v5 = std::string::append(&v13, " title=");
  __int128 v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__l.__cap_ = v5->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0LL;
  v5->__r_.__value_.__l.__cap_ = 0LL;
  v5->__r_.__value_.__r.__words[0] = 0LL;
  int v7 = *(char *)(a2 + 23);
  if (v7 >= 0) {
    int v8 = (const std::string::value_type *)a2;
  }
  else {
    int v8 = *(const std::string::value_type **)a2;
  }
  if (v7 >= 0) {
    std::string::size_type v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v9 = *(void *)(a2 + 8);
  }
  uint64_t v10 = std::string::append(&v14, v8, v9);
  __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0LL;
  v10->__r_.__value_.__l.__cap_ = 0LL;
  v10->__r_.__value_.__r.__words[0] = 0LL;
  int v12 = std::string::append(&v15, " />");
  *a3 = *v12;
  v12->__r_.__value_.__l.__size_ = 0LL;
  v12->__r_.__value_.__l.__cap_ = 0LL;
  v12->__r_.__value_.__r.__words[0] = 0LL;
}

void sub_100023730( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_10002377C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100078EB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10002378C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100078EB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_1000237AC(uint64_t a1)
{
  return sub_1000237B8(a1 + 24);
}

uint64_t sub_1000237B8(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 272);
  sub_1000027F4(&v3);
  uint64_t v3 = (void **)(a1 + 248);
  sub_1000027F4(&v3);
  uint64_t v3 = (void **)(a1 + 224);
  sub_1000027F4(&v3);
  uint64_t v3 = (void **)(a1 + 200);
  sub_100007BFC(&v3);
  uint64_t v3 = (void **)(a1 + 176);
  sub_100007BFC(&v3);
  uint64_t v3 = (void **)(a1 + 152);
  sub_1000027F4(&v3);
  uint64_t v3 = (void **)(a1 + 72);
  sub_100007BFC(&v3);
  uint64_t v3 = (void **)(a1 + 48);
  sub_100007BFC(&v3);
  uint64_t v3 = (void **)(a1 + 24);
  sub_100007BFC(&v3);
  return a1;
}

uint64_t sub_1000238A0(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  while (1)
  {
    if (v1 == v2) {
      return 0LL;
    }
    BOOL v4 = *(siri::dialogengine::PatternSchemaUsage **)v1;
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        unint64_t v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }

    if (siri::dialogengine::PatternSchemaUsage::GetUsage(v4) == 1
      || siri::dialogengine::PatternSchemaUsage::GetUsage(v4) == 2)
    {
      break;
    }

    if (v3)
    {
      int v7 = (unint64_t *)&v3->__shared_owners_;
      do
        unint64_t v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }

    v1 += 16LL;
  }

  if (v3)
  {
    uint64_t v10 = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  return 1LL;
}

void sub_100023990( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void **sub_1000239A4(uint64_t *a1, __int128 *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = (unint64_t)*(result - 1);
  if (v7 >= v6)
  {
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - *a1) >> 3);
    unint64_t v11 = v10 + 1;
    if (v10 + 1 > 0x666666666666666LL) {
      sub_100002668();
    }
    unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x333333333333333LL) {
      unint64_t v13 = 0x666666666666666LL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    std::string v14 = (char *)sub_100025F38((uint64_t)result, v13);
    std::string v15 = &v14[40 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[40 * v16];
    uint64_t v17 = *((void *)a2 + 2);
    *(_OWORD *)std::string v15 = *a2;
    *((void *)v15 + 2) = v17;
    *((void *)a2 + 1) = 0LL;
    *((void *)a2 + 2) = 0LL;
    *(void *)a2 = 0LL;
    *(_OWORD *)(v15 + 24) = *(__int128 *)((char *)a2 + 24);
    *((void *)a2 + 3) = 0LL;
    *((void *)a2 + 4) = 0LL;
    v18[2] = v15 + 40;
    sub_100025EC4(a1, v18);
    uint64_t v9 = a1[1];
    uint64_t result = sub_1000260EC(v18);
  }

  else
  {
    __int128 v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    *((void *)a2 + 1) = 0LL;
    *((void *)a2 + 2) = 0LL;
    *(void *)a2 = 0LL;
    *(_OWORD *)(v7 + 24) = *(__int128 *)((char *)a2 + 24);
    *((void *)a2 + 3) = 0LL;
    *((void *)a2 + 4) = 0LL;
    uint64_t v9 = v7 + 40;
    a1[1] = v7 + 40;
  }

  a1[1] = v9;
  return result;
}

void sub_100023AD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100023AE8(uint64_t a1, uint64_t a2, siri::dialogengine::PatternSchema **a3, __int128 **a4)
{
  sub_1000021BC(&v183, "<?xml version=1.0 encoding=UTF-8 standalone=no?>\n");
  std::operator+<char>(&__dst, "<cat xmlns=urn:apple:names:siri:visualcat:2.0 id=", a2);
  unint64_t v7 = std::string::append(&__dst, ">\n");
  __int128 v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__l.__cap_ = v7->__r_.__value_.__l.__cap_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0LL;
  v7->__r_.__value_.__l.__cap_ = 0LL;
  v7->__r_.__value_.__r.__words[0] = 0LL;
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = __p.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(&v183, (const std::string::value_type *)p_p, size);
  siri::dialogengine::PatternSchema::GetRequiredParameters(*a3);
  std::string::size_type cap = __p.__r_.__value_.__l.__cap_;
  sub_100005988((uint64_t)&__p, (void *)__p.__r_.__value_.__l.__size_);
  uint64_t v170 = a2;
  if (cap)
  {
    std::string::append(&v183, "  <parameters>\n");
    siri::dialogengine::PatternSchema::GetRequiredParameters(*a3);
    std::string::size_type v12 = __dst.__r_.__value_.__r.__words[0];
    if ((std::string::size_type *)__dst.__r_.__value_.__l.__data_ != &__dst.__r_.__value_.__r.__words[1])
    {
      do
      {
        sub_100005704(&__p, (__int128 *)(v12 + 32));
        siri::dialogengine::PropertyBase::GetType(v188);
        if ((char)v184.__r_.__value_.__s.__size_ < 0)
        {
          if (v184.__r_.__value_.__l.__size_ != 15)
          {
            operator delete(v184.__r_.__value_.__l.__data_);
            goto LABEL_31;
          }

          BOOL v15 = *(void *)v184.__r_.__value_.__l.__data_ != 0x4F2E676F6C616964LL
             || *(void *)(v184.__r_.__value_.__r.__words[0] + 7) != 0x5D5B7463656A624FLL;
          operator delete(v184.__r_.__value_.__l.__data_);
          if (v15) {
            goto LABEL_31;
          }
        }

        else
        {
          if (v184.__r_.__value_.__s.__size_ != 15) {
            goto LABEL_31;
          }
          BOOL v13 = v184.__r_.__value_.__r.__words[0] == 0x4F2E676F6C616964LL
             && *(std::string::size_type *)((char *)v184.__r_.__value_.__r.__words + 7) == 0x5D5B7463656A624FLL;
          if (!v13) {
            goto LABEL_31;
          }
        }

        std::string::append(&v183, "    <!-- Replace the following empty type= with the type of your array -->\n");
LABEL_31:
        siri::dialogengine::PropertyBase::GetName(v188);
        uint64_t v16 = std::string::insert(&v182, 0LL, "    <parameter name=");
        __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
        v186.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
        *(_OWORD *)&v186.__r_.__value_.__l.__data_ = v17;
        v16->__r_.__value_.__l.__size_ = 0LL;
        v16->__r_.__value_.__l.__cap_ = 0LL;
        v16->__r_.__value_.__r.__words[0] = 0LL;
        uint64_t v18 = std::string::append(&v186, " type=/>\n");
        __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
        v184.__r_.__value_.__l.__cap_ = v18->__r_.__value_.__l.__cap_;
        *(_OWORD *)&v184.__r_.__value_.__l.__data_ = v19;
        v18->__r_.__value_.__l.__size_ = 0LL;
        v18->__r_.__value_.__l.__cap_ = 0LL;
        v18->__r_.__value_.__r.__words[0] = 0LL;
        if ((v184.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v20 = &v184;
        }
        else {
          uint64_t v20 = (std::string *)v184.__r_.__value_.__r.__words[0];
        }
        if ((v184.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          std::string::size_type v21 = v184.__r_.__value_.__s.__size_;
        }
        else {
          std::string::size_type v21 = v184.__r_.__value_.__l.__size_;
        }
        std::string::append(&v183, (const std::string::value_type *)v20, v21);
        uint64_t v22 = v189;
        if (v189)
        {
          p_shared_owners = (unint64_t *)&v189->__shared_owners_;
          do
            unint64_t v24 = __ldaxr(p_shared_owners);
          while (__stlxr(v24 - 1, p_shared_owners));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }

        std::stringbuf v25 = *(std::string **)(v12 + 8);
        if (v25)
        {
          do
          {
            uint64_t v26 = v25;
            std::stringbuf v25 = (std::string *)v25->__r_.__value_.__r.__words[0];
          }

          while (v25);
        }

        else
        {
          do
          {
            uint64_t v26 = *(std::string **)(v12 + 16);
            BOOL v13 = v26->__r_.__value_.__r.__words[0] == v12;
            std::string::size_type v12 = (std::string::size_type)v26;
          }

          while (!v13);
        }

        std::string::size_type v12 = (std::string::size_type)v26;
      }

      while (v26 != (std::string *)&__dst.__r_.__value_.__r.__words[1]);
    }

    sub_100005988((uint64_t)&__dst, (void *)__dst.__r_.__value_.__l.__size_);
    siri::dialogengine::PatternSchema::GetComputedParameters(*a3);
    std::string::size_type v27 = __dst.__r_.__value_.__r.__words[0];
    if ((std::string::size_type *)__dst.__r_.__value_.__l.__data_ != &__dst.__r_.__value_.__r.__words[1])
    {
      do
      {
        sub_100005704(&__p, (__int128 *)(v27 + 32));
        siri::dialogengine::PropertyBase::GetName(v188);
        uint64_t v28 = std::string::insert(&v180, 0LL, "    <parameter name=");
        __int128 v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__l.__cap_ = v28->__r_.__value_.__l.__cap_;
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v29;
        v28->__r_.__value_.__l.__size_ = 0LL;
        v28->__r_.__value_.__l.__cap_ = 0LL;
        v28->__r_.__value_.__r.__words[0] = 0LL;
        uint64_t v30 = std::string::append(&__str, " type=");
        __int128 v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        v182.__r_.__value_.__l.__cap_ = v30->__r_.__value_.__l.__cap_;
        *(_OWORD *)&v182.__r_.__value_.__l.__data_ = v31;
        v30->__r_.__value_.__l.__size_ = 0LL;
        v30->__r_.__value_.__l.__cap_ = 0LL;
        v30->__r_.__value_.__r.__words[0] = 0LL;
        siri::dialogengine::PropertyBase::GetType(v188);
        if ((v179 & 0x80u) == 0) {
          std::string::size_type v32 = (const std::string::value_type *)&v177;
        }
        else {
          std::string::size_type v32 = (const std::string::value_type *)v177;
        }
        if ((v179 & 0x80u) == 0) {
          std::string::size_type v33 = v179;
        }
        else {
          std::string::size_type v33 = (std::string::size_type)v178;
        }
        unint64_t v34 = std::string::append(&v182, v32, v33);
        __int128 v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
        v186.__r_.__value_.__l.__cap_ = v34->__r_.__value_.__l.__cap_;
        *(_OWORD *)&v186.__r_.__value_.__l.__data_ = v35;
        v34->__r_.__value_.__l.__size_ = 0LL;
        v34->__r_.__value_.__l.__cap_ = 0LL;
        v34->__r_.__value_.__r.__words[0] = 0LL;
        int v36 = std::string::append(&v186, "/>\n");
        __int128 v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        v184.__r_.__value_.__l.__cap_ = v36->__r_.__value_.__l.__cap_;
        *(_OWORD *)&v184.__r_.__value_.__l.__data_ = v37;
        v36->__r_.__value_.__l.__size_ = 0LL;
        v36->__r_.__value_.__l.__cap_ = 0LL;
        v36->__r_.__value_.__r.__words[0] = 0LL;
        if ((v184.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          __int128 v38 = &v184;
        }
        else {
          __int128 v38 = (std::string *)v184.__r_.__value_.__r.__words[0];
        }
        if ((v184.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          std::string::size_type v39 = v184.__r_.__value_.__s.__size_;
        }
        else {
          std::string::size_type v39 = v184.__r_.__value_.__l.__size_;
        }
        std::string::append(&v183, (const std::string::value_type *)v38, v39);
        uint64_t v40 = v189;
        if (v189)
        {
          uint64_t v41 = (unint64_t *)&v189->__shared_owners_;
          do
            unint64_t v42 = __ldaxr(v41);
          while (__stlxr(v42 - 1, v41));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }

        std::string::size_type v43 = *(std::string **)(v27 + 8);
        if (v43)
        {
          do
          {
            uint64_t v44 = v43;
            std::string::size_type v43 = (std::string *)v43->__r_.__value_.__r.__words[0];
          }

          while (v43);
        }

        else
        {
          do
          {
            uint64_t v44 = *(std::string **)(v27 + 16);
            BOOL v13 = v44->__r_.__value_.__r.__words[0] == v27;
            std::string::size_type v27 = (std::string::size_type)v44;
          }

          while (!v13);
        }

        std::string::size_type v27 = (std::string::size_type)v44;
      }

      while (v44 != (std::string *)&__dst.__r_.__value_.__r.__words[1]);
    }

    sub_100005988((uint64_t)&__dst, (void *)__dst.__r_.__value_.__l.__size_);
    std::string::append(&v183, "  </parameters>\n\n");
    a2 = v170;
  }

  std::string::append(&v183, "  <response>\n");
  std::string::append(&v183, "    <hide-redacted-elements>false</hide-redacted-elements>\n");
  char v45 = *a4;
  int v169 = a4[1];
  if (*a4 != v169)
  {
    while (1)
    {
      sub_100005704(&__dst, v45);
      __int128 v171 = v45;
      sub_1000021BC(&v182, (char *)&unk_10006A022);
      __int128 v46 = v175;
      siri::dialogengine::PatternSchemaComponent::GetDefaultVariant(v175);
      siri::dialogengine::PatternSchemaComponent::GetNameWithVariant(&__str, v46, &__p);
      sub_1000021BC(&__p, "Button");
      if (siri::dialogengine::StringStartsWith(&__str, &__p))
      {
        sub_1000021BC(&v184, "ButtonItem");
        int v47 = siri::dialogengine::StringEndsWith(&__str, &v184);
      }

      else
      {
        int v47 = 0;
      }

      if (v47) {
        goto LABEL_106;
      }
LABEL_107:
      sub_1000021BC(&__p, "Any_");
      int v48 = siri::dialogengine::StringStartsWith(&__str, &__p);
      int v49 = v48;
      if ((char)__p.__r_.__value_.__s.__size_ < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (!v49) {
          goto LABEL_123;
        }
      }

      else if (!v48)
      {
        goto LABEL_123;
      }

      siri::dialogengine::PatternSchemaComponent::GetDefaultComponent(v175);
      std::string::basic_string(&v184, &__str, 3uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v180);
      if ((v184.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        char v50 = &v184;
      }
      else {
        char v50 = (std::string *)v184.__r_.__value_.__r.__words[0];
      }
      if ((v184.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v51 = v184.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v51 = v184.__r_.__value_.__l.__size_;
      }
      std::string::size_type v52 = std::string::append(&__p, (const std::string::value_type *)v50, v51);
      std::string::size_type v53 = v52->__r_.__value_.__r.__words[0];
      v186.__r_.__value_.__r.__words[0] = v52->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v186.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v52->__r_.__value_.__r.__words[1] + 7);
      unsigned __int8 v54 = v52->__r_.__value_.__s.__size_;
      v52->__r_.__value_.__l.__size_ = 0LL;
      v52->__r_.__value_.__l.__cap_ = 0LL;
      v52->__r_.__value_.__r.__words[0] = 0LL;
      __str.__r_.__value_.__r.__words[0] = v53;
      __str.__r_.__value_.__l.__size_ = v186.__r_.__value_.__r.__words[0];
      *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v186.__r_.__value_.__r.__words + 7);
      __str.__r_.__value_.__s.__size_ = v54;
LABEL_123:
      BOOL v55 = (__str.__r_.__value_.__s.__size_ & 0x80u) != 0;
      std::string::size_type v56 = __str.__r_.__value_.__s.__size_;
      if ((__str.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        std::string::size_type v56 = __str.__r_.__value_.__l.__size_;
      }
      if (v56)
      {
        std::string::size_type v57 = 0LL;
        while (1)
        {
          __int128 v58 = v55 ? (std::string *)__str.__r_.__value_.__r.__words[0] : &__str;
          __darwin_ct_rune_t v59 = v58->__r_.__value_.__s.__data_[v57];
          if (v57)
          {
            if (v59 < 0
               ? __maskrune(v58->__r_.__value_.__s.__data_[v57], 0x8000uLL)
               : _DefaultRuneLocale.__runetype[v59] & 0x8000)
            {
              break;
            }
          }

          if (v59 != 95) {
            goto LABEL_137;
          }
LABEL_138:
          ++v57;
          BOOL v55 = (__str.__r_.__value_.__s.__size_ & 0x80u) != 0;
          std::string::size_type v62 = __str.__r_.__value_.__s.__size_;
          if ((__str.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            std::string::size_type v62 = __str.__r_.__value_.__l.__size_;
          }
          if (v57 >= v62) {
            goto LABEL_141;
          }
        }

        std::string::append(&v182, "-");
LABEL_137:
        std::string::value_type v61 = __tolower(v59);
        std::string::push_back(&v182, v61);
        goto LABEL_138;
      }

LABEL_147:
          int v64 = v67;
          goto LABEL_162;
        }
      }

      else if (v65)
      {
        goto LABEL_143;
      }

      sub_1000021BC(&__p, "long-item-text");
      int v69 = siri::dialogengine::StringsEqual(&v182, &__p);
      int v70 = v69;
      if ((char)__p.__r_.__value_.__s.__size_ < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v70) {
          goto LABEL_400;
        }
      }

      else if (v69)
      {
        goto LABEL_400;
      }

      sub_1000021BC(&__p, "primary-header-standard");
      int v71 = siri::dialogengine::StringsEqual(&v182, &__p);
      int v72 = v71;
      if ((char)__p.__r_.__value_.__s.__size_ < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v72) {
          goto LABEL_400;
        }
      }

      else if (v71)
      {
        goto LABEL_400;
      }

      sub_1000021BC(&__p, "simple-item-visual");
      int v73 = siri::dialogengine::StringsEqual(&v182, &__p);
      int v74 = v73;
      if ((char)__p.__r_.__value_.__s.__size_ < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v74)
        {
LABEL_159:
          LODWORD(__p.__r_.__value_.__l.__data_) = 10;
          sub_1000021BC(&__p.__r_.__value_.__l.__size_, "thumbnails");
          sub_100027C60((uint64_t *)&v184, &__p, &v189, 1uLL);
          goto LABEL_160;
        }
      }

      else if (v73)
      {
        goto LABEL_159;
      }

      sub_1000021BC(&__p, "simple-item");
      int v148 = siri::dialogengine::StringStartsWith(&v182, &__p);
      int v149 = v148;
      if ((char)__p.__r_.__value_.__s.__size_ < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v149)
        {
LABEL_362:
          LODWORD(__p.__r_.__value_.__l.__data_) = 9;
          sub_1000021BC(&__p.__r_.__value_.__l.__size_, "text-1");
          sub_100027C60((uint64_t *)&v184, &__p, &v189, 1uLL);
          if (SHIBYTE(v188) < 0) {
            operator delete((void *)__p.__r_.__value_.__l.__size_);
          }
          sub_1000021BC(&__p, "simple-item-player");
          int v150 = siri::dialogengine::StringsEqual(&v182, &__p);
          int v151 = v150;
          if ((char)__p.__r_.__value_.__s.__size_ < 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            if (!v151) {
              goto LABEL_162;
            }
          }

          else if (!v150)
          {
            goto LABEL_162;
          }

          LODWORD(__p.__r_.__value_.__l.__data_) = 3;
          sub_1000021BC(&__p.__r_.__value_.__l.__size_, "player");
          sub_100026770((uint64_t *)&v184, (uint64_t)&__p);
          goto LABEL_160;
        }
      }

      else if (v148)
      {
        goto LABEL_362;
      }

      sub_1000021BC(&__p, "fact-item");
      int v152 = siri::dialogengine::StringStartsWith(&v182, &__p);
      int v153 = v152;
      if ((char)__p.__r_.__value_.__s.__size_ < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v153)
        {
LABEL_370:
          LODWORD(__p.__r_.__value_.__l.__data_) = 9;
          sub_1000021BC(&__p.__r_.__value_.__l.__size_, "text-1");
          LODWORD(v189) = 5;
          sub_1000021BC(v190, "text-4");
          int v67 = v64;
          sub_100027C60((uint64_t *)&v184, &__p, &v191, 2uLL);
          for (uint64_t j = 0LL; j != -8; j -= 4LL)
          {
            if (SHIBYTE(v190[j + 2]) < 0) {
              operator delete((void *)v190[j]);
            }
          }

          goto LABEL_147;
        }
      }

      else if (v152)
      {
        goto LABEL_370;
      }

      sub_1000021BC(&__p, "sash-standard");
      int v155 = siri::dialogengine::StringStartsWith(&v182, &__p);
      int v156 = v155;
      if ((char)__p.__r_.__value_.__s.__size_ < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v156)
        {
LABEL_378:
          LODWORD(__p.__r_.__value_.__l.__data_) = 7;
          sub_1000021BC(&__p.__r_.__value_.__l.__size_, "title");
          sub_100027C60((uint64_t *)&v184, &__p, &v189, 1uLL);
          goto LABEL_160;
        }
      }

      else if (v155)
      {
        goto LABEL_378;
      }

      sub_1000021BC(&__p, "status-indicator-");
      int v157 = siri::dialogengine::StringStartsWith(&v182, &__p);
      int v158 = v157;
      if ((char)__p.__r_.__value_.__s.__size_ < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v158)
        {
LABEL_384:
          LODWORD(__p.__r_.__value_.__l.__data_) = 9;
          sub_1000021BC(&__p.__r_.__value_.__l.__size_, "text");
          sub_100027C60((uint64_t *)&v184, &__p, &v189, 1uLL);
          goto LABEL_160;
        }
      }

      else if (v157)
      {
        goto LABEL_384;
      }

      sub_1000021BC(&__p, "summary-item-short-number");
      int v159 = siri::dialogengine::StringsEqual(&v182, &__p);
      if (v159)
      {
        LODWORD(__p.__r_.__value_.__l.__data_) = 9;
        sub_1000021BC(&__p.__r_.__value_.__l.__size_, "number");
        LODWORD(v189) = 5;
        sub_1000021BC(v190, "text-2");
        int v67 = v64;
        sub_100027C60((uint64_t *)&v184, &__p, &v191, 2uLL);
        for (uint64_t k = 0LL; k != -8; k -= 4LL)
        {
          if (SHIBYTE(v190[k + 2]) < 0) {
            operator delete((void *)v190[k]);
          }
        }

        goto LABEL_147;
      }

      sub_1000021BC(&__p, "summary-item-standard");
      int v161 = siri::dialogengine::StringsEqual(&v182, &__p);
      if (v161) {
        goto LABEL_400;
      }
      sub_1000021BC(&__p, "system-text-clarification-title");
      int v162 = siri::dialogengine::StringsEqual(&v182, &__p);
      if (v162)
      {
LABEL_400:
        LODWORD(__p.__r_.__value_.__l.__data_) = 9;
        sub_1000021BC(&__p.__r_.__value_.__l.__size_, "text-1");
        sub_100027C60((uint64_t *)&v184, &__p, &v189, 1uLL);
LABEL_160:
        if (SHIBYTE(v188) < 0) {
          operator delete((void *)__p.__r_.__value_.__l.__size_);
        }
        goto LABEL_162;
      }

      sub_1000021BC(&__p, "table");
      int v163 = siri::dialogengine::StringsEqual(&v182, &__p);
      if (v163)
      {
        int v167 = v64;
        LODWORD(__p.__r_.__value_.__l.__data_) = 8;
        sub_1000021BC(&__p.__r_.__value_.__l.__size_, "separator-lines");
        LODWORD(v189) = 2;
        sub_1000021BC(v190, "columns");
        int v191 = 2;
        sub_1000021BC(v192, "columns");
        int v193 = 6;
        sub_1000021BC(v194, "rows");
        int v195 = 6;
        sub_1000021BC(v196, "rows");
        sub_100027C60((uint64_t *)&v184, &__p, &v197, 5uLL);
        for (uint64_t m = 0LL; m != -20; m -= 4LL)
        {
          if (SHIBYTE(v196[m + 2]) < 0) {
            operator delete((void *)v196[m]);
          }
        }

        int v64 = v167;
      }

LABEL_162:
      sub_1000021BC(&v173, (char *)&unk_10006A022);
      std::string::size_type v75 = v184.__r_.__value_.__l.__size_;
      if (v184.__r_.__value_.__r.__words[0] != v184.__r_.__value_.__l.__size_)
      {
        std::string::size_type v76 = v184.__r_.__value_.__r.__words[0] + 8;
        do
        {
          std::string::size_type v78 = v76 - 8;
          int data = *(_DWORD *)(v76 - 8);
          LODWORD(__p.__r_.__value_.__l.__data_) = data;
          if (*(char *)(v76 + 23) < 0)
          {
            sub_10000231C(&__p.__r_.__value_.__s.__data_[8], *(void **)v76, *(void *)(v76 + 8));
            int data = (int)__p.__r_.__value_.__l.__data_;
          }

          else
          {
            __int128 v79 = *(_OWORD *)v76;
            __int128 v188 = *(siri::dialogengine::PropertyBase **)(v76 + 16);
            *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = v79;
          }

          sub_100026898(data, (std::string *)&__p.__r_.__value_.__r.__words[1], &v172, (std::string::size_type *)&v186);
          if ((v186.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            int v80 = &v186;
          }
          else {
            int v80 = (std::string *)v186.__r_.__value_.__r.__words[0];
          }
          if ((v186.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v81 = v186.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type v81 = v186.__r_.__value_.__l.__size_;
          }
          std::string::append(&v173, (const std::string::value_type *)v80, v81);
          if (SHIBYTE(v188) < 0) {
            operator delete((void *)__p.__r_.__value_.__l.__size_);
          }
          v76 += 32LL;
        }

        while (v78 + 32 != v75);
      }

      std::string::size_type v82 = v173.__r_.__value_.__s.__size_;
      if ((v173.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        std::string::size_type v82 = v173.__r_.__value_.__l.__size_;
      }
      if (!v82)
      {
        if ((v172.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          size_t v83 = v172.__r_.__value_.__s.__size_;
        }
        else {
          size_t v83 = v172.__r_.__value_.__l.__size_;
        }
        sub_100007A0C((uint64_t)&v186, v83 + 31);
        if ((v186.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          std::string::size_type v84 = &v186;
        }
        else {
          std::string::size_type v84 = (std::string *)v186.__r_.__value_.__r.__words[0];
        }
        if (v83)
        {
          if ((v172.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            BOOL v85 = &v172;
          }
          else {
            BOOL v85 = (std::string *)v172.__r_.__value_.__r.__words[0];
          }
          memmove(v84, v85, v83);
        }

        strcpy((char *)v84 + v83, "<!-- Add required elements for ");
        if ((v182.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          __int128 v86 = &v182;
        }
        else {
          __int128 v86 = (std::string *)v182.__r_.__value_.__r.__words[0];
        }
        if ((v182.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          std::string::size_type v87 = v182.__r_.__value_.__s.__size_;
        }
        else {
          std::string::size_type v87 = v182.__r_.__value_.__l.__size_;
        }
        __int128 v88 = std::string::append(&v186, (const std::string::value_type *)v86, v87);
        int v89 = v64;
        __int128 v90 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__l.__cap_ = v88->__r_.__value_.__l.__cap_;
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v90;
        v88->__r_.__value_.__l.__size_ = 0LL;
        v88->__r_.__value_.__l.__cap_ = 0LL;
        v88->__r_.__value_.__r.__words[0] = 0LL;
        std::string::size_type v91 = std::string::append(&__p, " here -->\n");
        std::string::size_type v92 = v91->__r_.__value_.__r.__words[0];
        v185[0] = v91->__r_.__value_.__l.__size_;
        *(void *)((char *)v185 + 7) = *(std::string::size_type *)((char *)&v91->__r_.__value_.__r.__words[1] + 7);
        unsigned __int8 v93 = v91->__r_.__value_.__s.__size_;
        v91->__r_.__value_.__l.__size_ = 0LL;
        v91->__r_.__value_.__l.__cap_ = 0LL;
        v91->__r_.__value_.__r.__words[0] = 0LL;
        v173.__r_.__value_.__r.__words[0] = v92;
        v173.__r_.__value_.__l.__size_ = v185[0];
        *(std::string::size_type *)((char *)&v173.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v185 + 7);
        v173.__r_.__value_.__s.__size_ = v93;
        int v64 = v89;
      }

      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v184;
      sub_100028524((void ***)&__p);
      if (v63 != v64 || v180.__r_.__value_.__r.__words[0] == v180.__r_.__value_.__l.__size_ && v177 == v178)
      {
        std::operator+<char>(&v184, "    <sections id=", &__dst);
        std::string::size_type v94 = std::string::append(&v184, ">\n");
        __int128 v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__l.__cap_ = v94->__r_.__value_.__l.__cap_;
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v95;
        v94->__r_.__value_.__l.__size_ = 0LL;
        v94->__r_.__value_.__l.__cap_ = 0LL;
        v94->__r_.__value_.__r.__words[0] = 0LL;
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          unint64_t v96 = &__p;
        }
        else {
          unint64_t v96 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          std::string::size_type v97 = __p.__r_.__value_.__s.__size_;
        }
        else {
          std::string::size_type v97 = __p.__r_.__value_.__l.__size_;
        }
        std::string::append(&v183, (const std::string::value_type *)v96, v97);
        if ((char)v184.__r_.__value_.__s.__size_ < 0)
        {
          operator delete(v184.__r_.__value_.__l.__data_);
          if (v63) {
            goto LABEL_270;
          }
        }

        else
        {
          if (!v63) {
            goto LABEL_271;
          }
LABEL_270:
          std::string::append(&v183, "      <level-of-detail>FULL</level-of-detail>\n");
        }

LABEL_271:
        if (v64) {
          std::string::append(&v183, "      <level-of-detail>SUPPORTING</level-of-detail>\n");
        }
        memset(&__p, 0, sizeof(__p));
        if (v63) {
          BOOL v114 = &v180;
        }
        else {
          BOOL v114 = (std::string *)&v177;
        }
        uint64_t v115 = (void *)v114->__r_.__value_.__r.__words[0];
        p_std::string::size_type size = &v180.__r_.__value_.__l.__size_;
        if (!v63) {
          p_std::string::size_type size = (std::string::size_type *)&v178;
        }
        sub_100028564((char *)&__p, v115, (void *)*p_size, (uint64_t)(*p_size - (void)v115) >> 4);
        std::string::size_type v118 = __p.__r_.__value_.__l.__size_;
        __int128 v117 = (siri::dialogengine::PatternSchemaOverride **)__p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__r.__words[0] != __p.__r_.__value_.__l.__size_)
        {
          do
          {
            siri::dialogengine::PatternSchemaOverride::GetUsage(*v117);
            int v119 = sub_1000238A0((uint64_t *)&v184);
            v186.__r_.__value_.__r.__words[0] = (std::string::size_type)&v184;
            sub_100007BFC((void ***)&v186);
            siri::dialogengine::PatternSchemaOverride::GetIdioms(*v117);
            std::string::size_type v120 = v184.__r_.__value_.__l.__size_;
            for (std::string::size_type n = v184.__r_.__value_.__r.__words[0]; n != v120; n += 24LL)
            {
              std::operator+<char>(&v172, "      <idioms>", n);
              __int128 v122 = std::string::append(&v172, "</idioms>\n");
              __int128 v123 = *(_OWORD *)&v122->__r_.__value_.__l.__data_;
              v186.__r_.__value_.__l.__cap_ = v122->__r_.__value_.__l.__cap_;
              *(_OWORD *)&v186.__r_.__value_.__l.__data_ = v123;
              v122->__r_.__value_.__l.__size_ = 0LL;
              v122->__r_.__value_.__l.__cap_ = 0LL;
              v122->__r_.__value_.__r.__words[0] = 0LL;
              if ((v186.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                __int128 v124 = &v186;
              }
              else {
                __int128 v124 = (std::string *)v186.__r_.__value_.__r.__words[0];
              }
              if ((v186.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                std::string::size_type v125 = v186.__r_.__value_.__s.__size_;
              }
              else {
                std::string::size_type v125 = v186.__r_.__value_.__l.__size_;
              }
              std::string::append(&v183, (const std::string::value_type *)v124, v125);
            }

            v186.__r_.__value_.__r.__words[0] = (std::string::size_type)&v184;
            sub_1000027F4((void ***)&v186);
            v117 += 2;
          }

          while (v117 != (siri::dialogengine::PatternSchemaOverride **)v118);
          siri::dialogengine::StringFromBool(&v172, (siri::dialogengine *)(v119 ^ 1u), v126);
          char v127 = std::string::insert(&v172, 0LL, "      <is-hidden-on-idioms>");
          __int128 v128 = *(_OWORD *)&v127->__r_.__value_.__l.__data_;
          v186.__r_.__value_.__l.__cap_ = v127->__r_.__value_.__l.__cap_;
          *(_OWORD *)&v186.__r_.__value_.__l.__data_ = v128;
          v127->__r_.__value_.__l.__size_ = 0LL;
          v127->__r_.__value_.__l.__cap_ = 0LL;
          v127->__r_.__value_.__r.__words[0] = 0LL;
          unint64_t v129 = std::string::append(&v186, "</is-hidden-on-idioms>\n");
          __int128 v130 = *(_OWORD *)&v129->__r_.__value_.__l.__data_;
          v184.__r_.__value_.__l.__cap_ = v129->__r_.__value_.__l.__cap_;
          *(_OWORD *)&v184.__r_.__value_.__l.__data_ = v130;
          v129->__r_.__value_.__l.__size_ = 0LL;
          v129->__r_.__value_.__l.__cap_ = 0LL;
          v129->__r_.__value_.__r.__words[0] = 0LL;
          if ((v184.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            unsigned __int8 v131 = &v184;
          }
          else {
            unsigned __int8 v131 = (std::string *)v184.__r_.__value_.__r.__words[0];
          }
          if ((v184.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v132 = v184.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type v132 = v184.__r_.__value_.__l.__size_;
          }
          std::string::append(&v183, (const std::string::value_type *)v131, v132);
        }

        std::string::append(&v183, "      <component-list>\n");
        std::string::append(&v183, "        <value>\n");
        std::operator+<char>(&v186, "          <", &v182);
        unsigned __int8 v133 = std::string::append(&v186, ">\n");
        __int128 v134 = *(_OWORD *)&v133->__r_.__value_.__l.__data_;
        v184.__r_.__value_.__l.__cap_ = v133->__r_.__value_.__l.__cap_;
        *(_OWORD *)&v184.__r_.__value_.__l.__data_ = v134;
        v133->__r_.__value_.__l.__size_ = 0LL;
        v133->__r_.__value_.__l.__cap_ = 0LL;
        v133->__r_.__value_.__r.__words[0] = 0LL;
        if ((v184.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          char v135 = &v184;
        }
        else {
          char v135 = (std::string *)v184.__r_.__value_.__r.__words[0];
        }
        if ((v184.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          std::string::size_type v136 = v184.__r_.__value_.__s.__size_;
        }
        else {
          std::string::size_type v136 = v184.__r_.__value_.__l.__size_;
        }
        std::string::append(&v183, (const std::string::value_type *)v135, v136);
        if ((v173.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          v137 = &v173;
        }
        else {
          v137 = (std::string *)v173.__r_.__value_.__r.__words[0];
        }
        if ((v173.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          std::string::size_type v138 = v173.__r_.__value_.__s.__size_;
        }
        else {
          std::string::size_type v138 = v173.__r_.__value_.__l.__size_;
        }
        std::string::append(&v183, (const std::string::value_type *)v137, v138);
        std::operator+<char>(&v186, "          </", &v182);
        v139 = std::string::append(&v186, ">\n");
        __int128 v140 = *(_OWORD *)&v139->__r_.__value_.__l.__data_;
        v184.__r_.__value_.__l.__cap_ = v139->__r_.__value_.__l.__cap_;
        *(_OWORD *)&v184.__r_.__value_.__l.__data_ = v140;
        v139->__r_.__value_.__l.__size_ = 0LL;
        v139->__r_.__value_.__l.__cap_ = 0LL;
        v139->__r_.__value_.__r.__words[0] = 0LL;
        if ((v184.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          v141 = &v184;
        }
        else {
          v141 = (std::string *)v184.__r_.__value_.__r.__words[0];
        }
        if ((v184.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          std::string::size_type v142 = v184.__r_.__value_.__s.__size_;
        }
        else {
          std::string::size_type v142 = v184.__r_.__value_.__l.__size_;
        }
        std::string::append(&v183, (const std::string::value_type *)v141, v142);
        std::string::append(&v183, "        </value>\n");
        std::string::append(&v183, "      </component-list>\n");
        std::string::append(&v183, "    </sections>\n");
        v184.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        sub_100007BFC((void ***)&v184);
        goto LABEL_344;
      }

      std::string::append(&v183, "    <groups>\n");
      std::operator+<char>(&v184, "      <id>", &__dst);
      unint64_t v98 = std::string::append(&v184, "_group</id>\n");
      __int128 v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__l.__cap_ = v98->__r_.__value_.__l.__cap_;
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v99;
      v98->__r_.__value_.__l.__size_ = 0LL;
      v98->__r_.__value_.__l.__cap_ = 0LL;
      v98->__r_.__value_.__r.__words[0] = 0LL;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int128 v100 = &__p;
      }
      else {
        __int128 v100 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v101 = __p.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v101 = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(&v183, (const std::string::value_type *)v100, v101);
      std::string::append(&v183, "      <components>\n");
      std::string::append(&v183, "        <value>\n");
      std::operator+<char>(&v184, "          <", &v182);
      std::string::size_type v102 = std::string::append(&v184, ">\n");
      __int128 v103 = *(_OWORD *)&v102->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__l.__cap_ = v102->__r_.__value_.__l.__cap_;
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v103;
      v102->__r_.__value_.__l.__size_ = 0LL;
      v102->__r_.__value_.__l.__cap_ = 0LL;
      v102->__r_.__value_.__r.__words[0] = 0LL;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        unint64_t v104 = &__p;
      }
      else {
        unint64_t v104 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v105 = __p.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v105 = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(&v183, (const std::string::value_type *)v104, v105);
      if ((v173.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int128 v106 = &v173;
      }
      else {
        __int128 v106 = (std::string *)v173.__r_.__value_.__r.__words[0];
      }
      if ((v173.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v107 = v173.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v107 = v173.__r_.__value_.__l.__size_;
      }
      std::string::append(&v183, (const std::string::value_type *)v106, v107);
      std::operator+<char>(&v184, "          </", &v182);
      std::string::size_type v108 = std::string::append(&v184, ">\n");
      __int128 v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__l.__cap_ = v108->__r_.__value_.__l.__cap_;
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v109;
      v108->__r_.__value_.__l.__size_ = 0LL;
      v108->__r_.__value_.__l.__cap_ = 0LL;
      v108->__r_.__value_.__r.__words[0] = 0LL;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v110 = &__p;
      }
      else {
        std::string::size_type v110 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v111 = __p.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v111 = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(&v183, (const std::string::value_type *)v110, v111);
      std::string::append(&v183, "        </value>\n");
      std::string::append(&v183, "      </components>\n");
      std::string::append(&v183, "    </groups>\n");
      if ((v63 & 1) == 0 && v180.__r_.__value_.__r.__words[0] == v180.__r_.__value_.__l.__size_) {
        goto LABEL_267;
      }
      sub_1000021BC(&v184, "FULL");
      sub_100026160((uint64_t)&__dst, (uint64_t)&v184, (siri::dialogengine::PatternSchemaOverride ***)&v180, &__p);
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v112 = &__p;
      }
      else {
        std::string::size_type v112 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v113 = __p.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v113 = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(&v183, (const std::string::value_type *)v112, v113);
      if ((char)v184.__r_.__value_.__s.__size_ < 0)
      {
        operator delete(v184.__r_.__value_.__l.__data_);
        if ((v64 & 1) != 0) {
          goto LABEL_334;
        }
      }

      else
      {
LABEL_267:
        if ((v64 & 1) != 0) {
          goto LABEL_334;
        }
      }

      if (v177 != v178)
      {
LABEL_334:
        sub_1000021BC(&v184, "SUPPORTING");
        sub_100026160((uint64_t)&__dst, (uint64_t)&v184, (siri::dialogengine::PatternSchemaOverride ***)&v177, &__p);
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          std::string v143 = &__p;
        }
        else {
          std::string v143 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          std::string::size_type v144 = __p.__r_.__value_.__s.__size_;
        }
        else {
          std::string::size_type v144 = __p.__r_.__value_.__l.__size_;
        }
        std::string::append(&v183, (const std::string::value_type *)v143, v144);
      }

LABEL_344:
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v177;
      sub_100007BFC((void ***)&__p);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v180;
      sub_100007BFC((void ***)&__p);
      uint64_t v145 = v176;
      if (v176)
      {
        __int128 v146 = (unint64_t *)&v176->__shared_owners_;
        do
          unint64_t v147 = __ldaxr(v146);
        while (__stlxr(v147 - 1, v146));
        if (!v147)
        {
          ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
          std::__shared_weak_count::__release_weak(v145);
        }
      }

      a2 = v170;
      char v45 = (__int128 *)((char *)v171 + 40);
    }

    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v47) {
      goto LABEL_107;
    }
LABEL_106:
    std::string::assign(&__str, "Button");
    goto LABEL_107;
  }

LABEL_409:
  std::string::append(&v183, "  </response>\n");
  std::string::append(&v183, "</cat>\n");
  sub_1000021BC(&v184, ".vcatxml");
  siri::dialogengine::VisualCatIdToPath(&__dst, a2, &v184);
  siri::dialogengine::JoinPath(&__p, a1, &__dst);
  sub_1000021BC(&__dst, "Visual CAT file");
  uint64_t v165 = sub_100025C54((uint64_t)&__p, (uint64_t)&v183, (uint64_t)&__dst);
  return v165;
}

void sub_10002552C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, void *__p, uint64_t a27, int a28, __int16 a29, char a30, char a31, uint64_t a32, uint64_t a33, uint64_t a34, void *a35, uint64_t a36, int a37, __int16 a38, char a39, char a40, uint64_t a41, std::__shared_weak_count *a42, void *a43, uint64_t a44, uint64_t a45, void *a46, uint64_t a47, uint64_t a48, void *a49, uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,void *a62,uint64_t a63)
{
  uint64_t v73 = 0LL;
  while (1)
  {
    v73 -= 32LL;
    if (v73 == -160)
    {
      a72 = &a68;
      sub_100028524((void ***)&a72);
      if (a31 < 0) {
        operator delete(__p);
      }
      a72 = &a43;
      sub_100007BFC((void ***)&a72);
      a72 = &a46;
      sub_100007BFC((void ***)&a72);
      if (a54 < 0) {
        operator delete(a49);
      }
      if (a61 < 0) {
        operator delete(a56);
      }
      if (a42)
      {
        p_shared_owners = (unint64_t *)&a42->__shared_owners_;
        do
          unint64_t v75 = __ldaxr(p_shared_owners);
        while (__stlxr(v75 - 1, p_shared_owners));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))a42->__on_zero_shared)(a42);
          std::__shared_weak_count::__release_weak(a42);
        }
      }

      if (a40 < 0) {
        operator delete(a35);
      }
      if (a67 < 0) {
        operator delete(a62);
      }
      _Unwind_Resume(a1);
    }
  }

uint64_t sub_100025C54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((siri::dialogengine::CreateDir(__p, 493LL) & 1) != 0)
  {
    if ((siri::dialogengine::WriteFileFromString(a1, a2) & 1) != 0)
    {
      int v6 = *(char *)(a3 + 23);
      if (v6 >= 0) {
        uint64_t v7 = a3;
      }
      else {
        uint64_t v7 = *(void *)a3;
      }
      if (v6 >= 0) {
        uint64_t v8 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v8 = *(void *)(a3 + 8);
      }
      uint64_t v9 = sub_100002F60(&std::cout, v7, v8);
      unint64_t v10 = sub_100002F60(v9, (uint64_t)" written to ", 12LL);
      int v11 = *(char *)(a1 + 23);
      if (v11 >= 0) {
        uint64_t v12 = a1;
      }
      else {
        uint64_t v12 = *(void *)a1;
      }
      if (v11 >= 0) {
        uint64_t v13 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        uint64_t v13 = *(void *)(a1 + 8);
      }
      std::string v14 = sub_100002F60(v10, v12, v13);
      std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(*v14 - 24LL)));
      BOOL v15 = std::locale::use_facet(&v28, &std::ctype<char>::id);
      uint64_t v16 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10LL);
      std::locale::~locale(&v28);
      std::ostream::put(v14, v16);
      std::ostream::flush(v14);
      uint64_t v17 = 1LL;
      goto LABEL_29;
    }

    uint64_t v18 = sub_100002F60(&std::cout, (uint64_t)"Failed to write file: ", 22LL);
    int v21 = *(char *)(a1 + 23);
    if (v21 >= 0) {
      __int128 v19 = (void **)a1;
    }
    else {
      __int128 v19 = *(void ***)a1;
    }
    if (v21 >= 0) {
      uint64_t v20 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v20 = *(void *)(a1 + 8);
    }
  }

  else
  {
    uint64_t v18 = sub_100002F60(&std::cout, (uint64_t)"Failed to create directory: ", 28LL);
    if ((v27 & 0x80u) == 0) {
      __int128 v19 = __p;
    }
    else {
      __int128 v19 = (void **)__p[0];
    }
    if ((v27 & 0x80u) == 0) {
      uint64_t v20 = v27;
    }
    else {
      uint64_t v20 = (uint64_t)__p[1];
    }
  }

  uint64_t v22 = sub_100002F60(v18, (uint64_t)v19, v20);
  std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(void *)(*v22 - 24LL)));
  __int128 v23 = std::locale::use_facet(&v28, &std::ctype<char>::id);
  uint64_t v24 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10LL);
  std::locale::~locale(&v28);
  std::ostream::put(v22, v24);
  std::ostream::flush(v22);
  uint64_t v17 = 0LL;
LABEL_29:
  return v17;
}

void sub_100025E90( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100025EC4(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100025F7C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_100025F38(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667LL) {
    sub_1000022F4();
  }
  return operator new(40 * a2);
}

uint64_t sub_100025F7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v15 = a6;
  *((void *)&v15 + 1) = a7;
  __int128 v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }

  else
  {
    uint64_t v8 = a7 - 40;
    do
    {
      __int128 v9 = *(_OWORD *)(a3 - 40);
      *(void *)(v8 + 16) = *(void *)(a3 - 24);
      *(_OWORD *)uint64_t v8 = v9;
      *(void *)(a3 - 32) = 0LL;
      *(void *)(a3 - 24) = 0LL;
      *(void *)(a3 - 40) = 0LL;
      *(_OWORD *)(v8 + 24) = *(_OWORD *)(a3 - 16);
      *(void *)(a3 - 16) = 0LL;
      *(void *)(a3 - std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
      *((void *)&v15 + 1) = v8;
      v8 -= 40LL;
      v7 -= 40LL;
      a3 -= 40LL;
    }

    while (a3 != a5);
    uint64_t v10 = v15;
  }

  char v13 = 1;
  sub_10002602C((uint64_t)v12);
  return v10;
}

uint64_t sub_10002602C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_100026060((uint64_t *)a1);
  }
  return a1;
}

void sub_100026060(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_1000260B0(v3, v1);
      v1 += 40LL;
    }

    while (v1 != v2);
  }

void sub_1000260B0(uint64_t a1, uint64_t a2)
{
}

void **sub_1000260EC(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_10002611C(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 40;
    sub_1000260B0(v4, i - 40);
  }

std::string *sub_100026160@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, siri::dialogengine::PatternSchemaOverride ***a3@<X2>, std::string *a4@<X8>)
{
  uint64_t v6 = a1;
  a4->__r_.__value_.__r.__words[0] = 0LL;
  a4->__r_.__value_.__l.__size_ = 0LL;
  a4->__r_.__value_.__l.__cap_ = 0LL;
  std::operator+<char>(&v46, "    <sections id=", a1);
  uint64_t v8 = std::string::append(&v46, "_");
  __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v47.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0LL;
  v8->__r_.__value_.__l.__cap_ = 0LL;
  v8->__r_.__value_.__r.__words[0] = 0LL;
  siri::dialogengine::StringToLower(__p);
  if ((v45 & 0x80u) == 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = (void **)__p[0];
  }
  if ((v45 & 0x80u) == 0) {
    std::string::size_type v11 = v45;
  }
  else {
    std::string::size_type v11 = (std::string::size_type)__p[1];
  }
  uint64_t v12 = std::string::append(&v47, (const std::string::value_type *)v10, v11);
  __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v48.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0LL;
  v12->__r_.__value_.__l.__cap_ = 0LL;
  v12->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v14 = std::string::append(&v48, ">\n");
  __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  int64_t cap = v14->__r_.__value_.__l.__cap_;
  __int128 v49 = v15;
  v14->__r_.__value_.__l.__size_ = 0LL;
  v14->__r_.__value_.__l.__cap_ = 0LL;
  v14->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    uint64_t v16 = (const std::string::value_type *)&v49;
  }
  else {
    uint64_t v16 = (const std::string::value_type *)v49;
  }
  if (cap >= 0) {
    std::string::size_type v17 = HIBYTE(cap);
  }
  else {
    std::string::size_type v17 = *((void *)&v49 + 1);
  }
  std::string::append(a4, v16, v17);
  if (SHIBYTE(cap) < 0) {
    operator delete((void *)v49);
  }
  std::operator+<char>(&v48, "      <level-of-detail>", a2);
  uint64_t v18 = std::string::append(&v48, "</level-of-detail>\n");
  __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  int64_t cap = v18->__r_.__value_.__l.__cap_;
  __int128 v49 = v19;
  v18->__r_.__value_.__l.__size_ = 0LL;
  v18->__r_.__value_.__l.__cap_ = 0LL;
  v18->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    uint64_t v20 = (const std::string::value_type *)&v49;
  }
  else {
    uint64_t v20 = (const std::string::value_type *)v49;
  }
  if (cap >= 0) {
    std::string::size_type v21 = HIBYTE(cap);
  }
  else {
    std::string::size_type v21 = *((void *)&v49 + 1);
  }
  std::string::append(a4, v20, v21);
  if (SHIBYTE(cap) < 0) {
    operator delete((void *)v49);
  }
  uint64_t v22 = *a3;
  __int128 v23 = a3[1];
  if (*a3 != v23)
  {
    uint64_t v43 = v6;
    do
    {
      siri::dialogengine::PatternSchemaOverride::GetUsage(*v22);
      int v24 = sub_1000238A0((uint64_t *)&v49);
      v48.__r_.__value_.__r.__words[0] = (std::string::size_type)&v49;
      sub_100007BFC((void ***)&v48);
      siri::dialogengine::PatternSchemaOverride::GetIdioms(*v22);
      uint64_t v25 = *((void *)&v49 + 1);
      for (uint64_t i = v49; i != v25; i += 24LL)
      {
        std::operator+<char>(&v47, "      <idioms>", i);
        unsigned __int8 v27 = std::string::append(&v47, "</idioms>\n");
        __int128 v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
        v48.__r_.__value_.__l.__cap_ = v27->__r_.__value_.__l.__cap_;
        *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v28;
        v27->__r_.__value_.__l.__size_ = 0LL;
        v27->__r_.__value_.__l.__cap_ = 0LL;
        v27->__r_.__value_.__r.__words[0] = 0LL;
        if ((v48.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          __int128 v29 = &v48;
        }
        else {
          __int128 v29 = (std::string *)v48.__r_.__value_.__r.__words[0];
        }
        if ((v48.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          std::string::size_type size = v48.__r_.__value_.__s.__size_;
        }
        else {
          std::string::size_type size = v48.__r_.__value_.__l.__size_;
        }
        std::string::append(a4, (const std::string::value_type *)v29, size);
      }

      v48.__r_.__value_.__r.__words[0] = (std::string::size_type)&v49;
      sub_1000027F4((void ***)&v48);
      v22 += 2;
    }

    while (v22 != v23);
    siri::dialogengine::StringFromBool(&v47, (siri::dialogengine *)(v24 ^ 1u), v31);
    std::string::size_type v32 = std::string::insert(&v47, 0LL, "      <is-hidden-on-idioms>");
    uint64_t v6 = v43;
    __int128 v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__l.__cap_ = v32->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0LL;
    v32->__r_.__value_.__l.__cap_ = 0LL;
    v32->__r_.__value_.__r.__words[0] = 0LL;
    unint64_t v34 = std::string::append(&v48, "</is-hidden-on-idioms>\n");
    __int128 v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    int64_t cap = v34->__r_.__value_.__l.__cap_;
    __int128 v49 = v35;
    v34->__r_.__value_.__l.__size_ = 0LL;
    v34->__r_.__value_.__l.__cap_ = 0LL;
    v34->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      int v36 = (const std::string::value_type *)&v49;
    }
    else {
      int v36 = (const std::string::value_type *)v49;
    }
    if (cap >= 0) {
      std::string::size_type v37 = HIBYTE(cap);
    }
    else {
      std::string::size_type v37 = *((void *)&v49 + 1);
    }
    std::string::append(a4, v36, v37);
    if (SHIBYTE(cap) < 0) {
      operator delete((void *)v49);
    }
  }

  std::string::append(a4, "      <component-list>\n");
  std::string::append(a4, "        <value>\n");
  std::operator+<char>(&v48, "          <group-id>", v6);
  __int128 v38 = std::string::append(&v48, "_group</group-id>\n");
  __int128 v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  int64_t cap = v38->__r_.__value_.__l.__cap_;
  __int128 v49 = v39;
  v38->__r_.__value_.__l.__size_ = 0LL;
  v38->__r_.__value_.__l.__cap_ = 0LL;
  v38->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    uint64_t v40 = (const std::string::value_type *)&v49;
  }
  else {
    uint64_t v40 = (const std::string::value_type *)v49;
  }
  if (cap >= 0) {
    std::string::size_type v41 = HIBYTE(cap);
  }
  else {
    std::string::size_type v41 = *((void *)&v49 + 1);
  }
  std::string::append(a4, v40, v41);
  if (SHIBYTE(cap) < 0) {
    operator delete((void *)v49);
  }
  std::string::append(a4, "        </value>\n");
  std::string::append(a4, "      </component-list>\n");
  return std::string::append(a4, "    </sections>\n");
}

void sub_1000265D8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20, char a21, char a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, void *__p, uint64_t a31, int a32, __int16 a33, char a34, char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

void sub_10002675C()
{
}

uint64_t sub_100026770(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(result - 8);
  if (v7 >= v6)
  {
    uint64_t v10 = (uint64_t)(v7 - *a1) >> 5;
    unint64_t v11 = v10 + 1;
    uint64_t v12 = v5 - *a1;
    if (v12 >> 4 > v11) {
      unint64_t v11 = v12 >> 4;
    }
    else {
      unint64_t v13 = v11;
    }
    v17[4] = result;
    if (v13) {
      __int128 v14 = (char *)sub_10002800C(result, v13);
    }
    else {
      __int128 v14 = 0LL;
    }
    __int128 v15 = &v14[32 * v10];
    v17[0] = v14;
    v17[1] = v15;
    v17[3] = &v14[32 * v13];
    *(_DWORD *)__int128 v15 = *(_DWORD *)a2;
    __int128 v16 = *(_OWORD *)(a2 + 8);
    *((void *)v15 + 3) = *(void *)(a2 + 24);
    *(_OWORD *)(v15 + std::iostream::~basic_iostream(v2, v3 + 8) = v16;
    *(void *)(a2 + 16) = 0LL;
    *(void *)(a2 + 24) = 0LL;
    *(void *)(a2 + std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
    v17[2] = v15 + 32;
    sub_100028040(a1, v17);
    uint64_t v9 = a1[1];
    uint64_t result = sub_1000281CC((uint64_t)v17);
  }

  else
  {
    *(_DWORD *)unint64_t v7 = *(_DWORD *)a2;
    __int128 v8 = *(_OWORD *)(a2 + 8);
    *(void *)(v7 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(v7 + std::iostream::~basic_iostream(v2, v3 + 8) = v8;
    *(void *)(a2 + 16) = 0LL;
    *(void *)(a2 + 24) = 0LL;
    *(void *)(a2 + std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
    uint64_t v9 = v7 + 32;
    a1[1] = v7 + 32;
  }

  a1[1] = v9;
  return result;
}

void sub_100026884(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_100026898( int a1@<W0>, std::string *a2@<X1>, const std::string *a3@<X2>, std::string::size_type *a4@<X8>)
{
  unsigned __int8 v8 = atomic_load((unsigned __int8 *)&qword_10007C700);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_10007C700))
  {
    sub_1000021BC(&qword_10007C6E8, "  ");
    __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10007C6E8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10007C700);
  }

  std::string::size_type size = a2->__r_.__value_.__s.__size_;
  int v10 = (char)size;
  unint64_t v11 = a2->__r_.__value_.__l.__size_;
  if ((size & 0x80u) != 0LL) {
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  if (size)
  {
    uint64_t v88 = 0LL;
    uint64_t v89 = 0LL;
    uint64_t v90 = 0LL;
    switch(a1)
    {
      case 0:
        if (v10 < 0) {
          sub_10000231C(&__dst, a2->__r_.__value_.__l.__data_, v11);
        }
        else {
          std::string __dst = *a2;
        }
        sub_1000021BC(&v97, "actions");
        sub_1000021BC(v99, "command");
        sub_1000021BC(&v100, "value");
        sub_1000021BC( v102,  "<!-- Replace with ace-command, sf-command, direct-invocation, etc. -->\n<no-op>true</no-op>\n");
        sub_10002831C((uint64_t)&v88, &__dst, &v103, 5uLL);
        for (uint64_t i = 0LL; i != -15; i -= 3LL)
        {
          if (SHIBYTE(v102[i + 2]) < 0) {
            operator delete((void *)v102[i]);
          }
        }

        break;
      case 1:
        if (v10 < 0) {
          sub_10000231C(&__dst, a2->__r_.__value_.__l.__data_, v11);
        }
        else {
          std::string __dst = *a2;
        }
        sub_1000021BC(&v95, "action");
        sub_1000021BC(&v86, (char *)&unk_10006A022);
        sub_100026898(&v87, 0LL, &v95, &v86);
        sub_1000021BC(&v94, "label");
        sub_1000021BC(&v84, (char *)&unk_10006A022);
        sub_100026898(&__p, 9LL, &v94, &v84);
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          std::string::size_type v14 = __p.__r_.__value_.__s.__size_;
        }
        else {
          std::string::size_type v14 = __p.__r_.__value_.__l.__size_;
        }
        __int128 v15 = std::string::append(&v87, (const std::string::value_type *)p_p, v14);
        __int128 v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
        v98[0] = v15->__r_.__value_.__l.__cap_;
        __int128 v97 = v16;
        v15->__r_.__value_.__l.__size_ = 0LL;
        v15->__r_.__value_.__l.__cap_ = 0LL;
        v15->__r_.__value_.__r.__words[0] = 0LL;
        sub_10002831C((uint64_t)&v88, &__dst, (__int128 *)v99, 2uLL);
        for (uint64_t j = 0LL; j != -6; j -= 3LL)
        {
          if (SHIBYTE(v98[j]) < 0) {
            operator delete(*(void **)((char *)&__dst + j * 8 + 24));
          }
        }

        if ((char)v95.__r_.__value_.__s.__size_ < 0)
        {
          uint64_t v18 = (void *)v95.__r_.__value_.__r.__words[0];
          goto LABEL_91;
        }

        break;
      case 2:
        if (v10 < 0) {
          sub_10000231C(&__dst, a2->__r_.__value_.__l.__data_, v11);
        }
        else {
          std::string __dst = *a2;
        }
        sub_1000021BC(&v97, "cell");
        sub_1000021BC(v99, "content");
        sub_1000021BC(&v100, "size");
        sub_1000021BC(v102, "<auto/>\n");
        sub_10002831C((uint64_t)&v88, &__dst, &v103, 5uLL);
        for (uint64_t k = 0LL; k != -15; k -= 3LL)
        {
          if (SHIBYTE(v102[k + 2]) < 0) {
            operator delete((void *)v102[k]);
          }
        }

        break;
      case 5:
        if (v10 < 0) {
          sub_10000231C(&__dst, a2->__r_.__value_.__l.__data_, v11);
        }
        else {
          std::string __dst = *a2;
        }
        sub_1000021BC(&v87, "lines");
        sub_1000021BC(&v95, (char *)&unk_10006A022);
        sub_100026898(&v97, 9LL, &v87, &v95);
        sub_10002831C((uint64_t)&v88, &__dst, (__int128 *)v99, 2uLL);
        for (uint64_t m = 0LL; m != -6; m -= 3LL)
        {
          if (SHIBYTE(v98[m]) < 0) {
            operator delete(*(void **)((char *)&__dst + m * 8 + 24));
          }
        }

        goto LABEL_87;
      case 6:
        if (v10 < 0) {
          sub_10000231C(&__dst, a2->__r_.__value_.__l.__data_, v11);
        }
        else {
          std::string __dst = *a2;
        }
        sub_1000021BC(&v97, "cells");
        sub_1000021BC(v99, "value");
        sub_1000021BC(&v87, "text");
        sub_1000021BC(&v95, (char *)&unk_10006A022);
        sub_100026898(&v100, 5LL, &v87, &v95);
        sub_10002831C((uint64_t)&v88, &__dst, (__int128 *)v102, 4uLL);
        for (uint64_t n = 0LL; n != -12; n -= 3LL)
        {
          if (SHIBYTE(v101[n]) < 0) {
            operator delete((void *)v101[n - 2]);
          }
        }

LABEL_87:
        goto LABEL_89;
      case 7:
        if (v10 < 0) {
          sub_10000231C(&__dst, a2->__r_.__value_.__l.__data_, v11);
        }
        else {
          std::string __dst = *a2;
        }
        sub_1000021BC(&v97, "value");
        sub_1000021BC( v99,  "<!-- Valid children are <text> or <application-bundle-identifier> -->\n <application-bundle-identifier>Your bundle ID here</application-bundle-identifier>");
        sub_10002831C((uint64_t)&v88, &__dst, &v100, 3uLL);
        for (iuint64_t i = 0LL; ii != -9; ii -= 3LL)
        {
          if (SHIBYTE(v99[ii + 2]) < 0) {
            operator delete((void *)v99[ii]);
          }
        }

        break;
      case 8:
        if (v10 < 0) {
          sub_10000231C(&__dst, a2->__r_.__value_.__l.__data_, v11);
        }
        else {
          std::string __dst = *a2;
        }
        sub_1000021BC(&v97, "false");
        sub_10002831C((uint64_t)&v88, &__dst, (__int128 *)v99, 2uLL);
        for (juint64_t j = 0LL; jj != -6; jj -= 3LL)
        {
          if (SHIBYTE(v98[jj]) < 0) {
            operator delete(*(void **)((char *)&__dst + jj * 8 + 24));
          }
        }

        break;
      case 9:
        if (v10 < 0) {
          sub_10000231C(&__dst, a2->__r_.__value_.__l.__data_, v11);
        }
        else {
          std::string __dst = *a2;
        }
        sub_1000021BC(&v97, "text-elements");
        sub_1000021BC(v99, "value");
        std::operator+<char>(&v87, "<plain>", a2);
        uint64_t v20 = std::string::append(&v87, " value</plain>\n");
        __int128 v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
        v101[0] = v20->__r_.__value_.__l.__cap_;
        __int128 v100 = v21;
        v20->__r_.__value_.__l.__size_ = 0LL;
        v20->__r_.__value_.__l.__cap_ = 0LL;
        v20->__r_.__value_.__r.__words[0] = 0LL;
        sub_10002831C((uint64_t)&v88, &__dst, (__int128 *)v102, 4uLL);
        for (kuint64_t k = 0LL; kk != -12; kk -= 3LL)
        {
          if (SHIBYTE(v101[kk]) < 0) {
            operator delete((void *)v101[kk - 2]);
          }
        }

            __int128 v61 = *(_OWORD *)v43;
            *(void *)(v53 + 16) = *(void *)(v43 + 16);
            *(_OWORD *)std::string::size_type v53 = v61;
            *(_BYTE *)(v54 + 55) = 0;
            *(_BYTE *)uint64_t v43 = 0;
            *(_BYTE *)(v53 + 24) = *(_BYTE *)(v54 + 56);
            v53 += 32LL;
            goto LABEL_90;
          }

          uint64_t v35 = v36;
          std::string::size_type v53 = v43;
        }

LABEL_89:
        if ((char)v87.__r_.__value_.__s.__size_ < 0)
        {
          uint64_t v18 = (void *)v87.__r_.__value_.__r.__words[0];
LABEL_91:
          operator delete(v18);
        }

        break;
      default:
        break;
    }

    sub_1000021BC(a4, (char *)&unk_10006A022);
    if (v88 != v89)
    {
      size_t v83 = a4;
      memset(&__dst, 0, sizeof(__dst));
      memset(&v87, 0, sizeof(v87));
      memset(&v95, 0, sizeof(v95));
      memset(&v86, 0, sizeof(v86));
      std::string::operator=(&v95, (const std::string *)(v89 - 24));
      std::string::operator=(&v86, a3);
      if (v89 - v88 != 24)
      {
        uint64_t v27 = 0LL;
        unint64_t v28 = 0LL;
        do
        {
          if ((v86.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            size_t v29 = v86.__r_.__value_.__s.__size_;
          }
          else {
            size_t v29 = v86.__r_.__value_.__l.__size_;
          }
          sub_100007A0C((uint64_t)&v84, v29 + 1);
          if ((v84.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            uint64_t v30 = &v84;
          }
          else {
            uint64_t v30 = (std::string *)v84.__r_.__value_.__r.__words[0];
          }
          if (v29)
          {
            if ((v86.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              BOOL v31 = &v86;
            }
            else {
              BOOL v31 = (std::string *)v86.__r_.__value_.__r.__words[0];
            }
            memmove(v30, v31, v29);
          }

          *(_WORD *)((char *)&v30->__r_.__value_.__l.__data_ + v29) = 60;
          int v32 = *(char *)(v88 + v27 + 23);
          if (v32 >= 0) {
            __int128 v33 = (const std::string::value_type *)(v88 + v27);
          }
          else {
            __int128 v33 = *(const std::string::value_type **)(v88 + v27);
          }
          if (v32 >= 0) {
            std::string::size_type v34 = *(unsigned __int8 *)(v88 + v27 + 23);
          }
          else {
            std::string::size_type v34 = *(void *)(v88 + v27 + 8);
          }
          uint64_t v35 = std::string::append(&v84, v33, v34);
          __int128 v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
          v94.__r_.__value_.__l.__cap_ = v35->__r_.__value_.__l.__cap_;
          *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v36;
          v35->__r_.__value_.__l.__size_ = 0LL;
          v35->__r_.__value_.__l.__cap_ = 0LL;
          v35->__r_.__value_.__r.__words[0] = 0LL;
          std::string::size_type v37 = std::string::append(&v94, ">\n");
          __int128 v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__l.__cap_ = v37->__r_.__value_.__l.__cap_;
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v38;
          v37->__r_.__value_.__l.__size_ = 0LL;
          v37->__r_.__value_.__l.__cap_ = 0LL;
          v37->__r_.__value_.__r.__words[0] = 0LL;
          if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            __int128 v39 = &__p;
          }
          else {
            __int128 v39 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v40 = __p.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type v40 = __p.__r_.__value_.__l.__size_;
          }
          std::string::append(&__dst, (const std::string::value_type *)v39, v40);
          if ((v86.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            size_t v41 = v86.__r_.__value_.__s.__size_;
          }
          else {
            size_t v41 = v86.__r_.__value_.__l.__size_;
          }
          sub_100007A0C((uint64_t)&v84, v41 + 2);
          if ((v84.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            unint64_t v42 = &v84;
          }
          else {
            unint64_t v42 = (std::string *)v84.__r_.__value_.__r.__words[0];
          }
          if (v41)
          {
            if ((v86.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              uint64_t v43 = &v86;
            }
            else {
              uint64_t v43 = (std::string *)v86.__r_.__value_.__r.__words[0];
            }
            memmove(v42, v43, v41);
          }

          strcpy((char *)v42 + v41, "</");
          int v44 = *(char *)(v88 + v27 + 23);
          if (v44 >= 0) {
            unsigned __int8 v45 = (const std::string::value_type *)(v88 + v27);
          }
          else {
            unsigned __int8 v45 = *(const std::string::value_type **)(v88 + v27);
          }
          if (v44 >= 0) {
            std::string::size_type v46 = *(unsigned __int8 *)(v88 + v27 + 23);
          }
          else {
            std::string::size_type v46 = *(void *)(v88 + v27 + 8);
          }
          std::string v47 = std::string::append(&v84, v45, v46);
          __int128 v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
          v94.__r_.__value_.__l.__cap_ = v47->__r_.__value_.__l.__cap_;
          *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v48;
          v47->__r_.__value_.__l.__size_ = 0LL;
          v47->__r_.__value_.__l.__cap_ = 0LL;
          v47->__r_.__value_.__r.__words[0] = 0LL;
          __int128 v49 = std::string::append(&v94, ">\n");
          __int128 v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__l.__cap_ = v49->__r_.__value_.__l.__cap_;
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v50;
          v49->__r_.__value_.__l.__size_ = 0LL;
          v49->__r_.__value_.__l.__cap_ = 0LL;
          v49->__r_.__value_.__r.__words[0] = 0LL;
          if ((v87.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v51 = &v87;
          }
          else {
            std::string::size_type v51 = (std::string *)v87.__r_.__value_.__r.__words[0];
          }
          if ((v87.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v52 = v87.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type v52 = v87.__r_.__value_.__l.__size_;
          }
          std::string::size_type v53 = std::string::append(&__p, (const std::string::value_type *)v51, v52);
          std::string::size_type v54 = v53->__r_.__value_.__r.__words[0];
          *(void *)std::string::size_type v91 = v53->__r_.__value_.__l.__size_;
          *(void *)&v91[7] = *(std::string::size_type *)((char *)&v53->__r_.__value_.__r.__words[1] + 7);
          unsigned __int8 v55 = v53->__r_.__value_.__s.__size_;
          v53->__r_.__value_.__l.__size_ = 0LL;
          v53->__r_.__value_.__l.__cap_ = 0LL;
          v53->__r_.__value_.__r.__words[0] = 0LL;
          v87.__r_.__value_.__r.__words[0] = v54;
          v87.__r_.__value_.__l.__size_ = *(void *)v91;
          *(std::string::size_type *)((char *)&v87.__r_.__value_.__r.__words[1] + 7) = *(void *)&v91[7];
          v87.__r_.__value_.__s.__size_ = v55;
          if (byte_10007C6FF >= 0) {
            std::string::size_type v56 = (const std::string::value_type *)&qword_10007C6E8;
          }
          else {
            std::string::size_type v56 = (const std::string::value_type *)qword_10007C6E8;
          }
          if (byte_10007C6FF >= 0) {
            std::string::size_type v57 = byte_10007C6FF;
          }
          else {
            std::string::size_type v57 = unk_10007C6F0;
          }
          std::string::append(&v86, v56, v57);
          ++v28;
          v27 += 24LL;
        }

        while (v28 < -1 - 0x5555555555555555LL * ((v89 - v88) >> 3));
      }

      siri::dialogengine::StringSplit(&v84, &v95, "\n");
      std::operator+<char>(v91, "\n", &v86);
      siri::dialogengine::StringJoin(&v94, &v84, v91);
      if ((v86.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int128 v58 = &v86;
      }
      else {
        __int128 v58 = (std::string *)v86.__r_.__value_.__r.__words[0];
      }
      if ((v86.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v59 = v86.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v59 = v86.__r_.__value_.__l.__size_;
      }
      a4 = v83;
      std::string v60 = std::string::insert(&v94, 0LL, (const std::string::value_type *)v58, v59);
      __int128 v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__l.__cap_ = v60->__r_.__value_.__l.__cap_;
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v61;
      v60->__r_.__value_.__l.__size_ = 0LL;
      v60->__r_.__value_.__l.__cap_ = 0LL;
      v60->__r_.__value_.__r.__words[0] = 0LL;
      std::string::size_type v62 = std::string::append(&__p, "\n");
      std::string::size_type v63 = v62->__r_.__value_.__r.__words[0];
      v93[0] = v62->__r_.__value_.__l.__size_;
      *(void *)((char *)v93 + 7) = *(std::string::size_type *)((char *)&v62->__r_.__value_.__r.__words[1] + 7);
      unsigned __int8 v64 = v62->__r_.__value_.__s.__size_;
      v62->__r_.__value_.__l.__size_ = 0LL;
      v62->__r_.__value_.__l.__cap_ = 0LL;
      v62->__r_.__value_.__r.__words[0] = 0LL;
      v95.__r_.__value_.__r.__words[0] = v63;
      v95.__r_.__value_.__l.__size_ = v93[0];
      *(std::string::size_type *)((char *)&v95.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v93 + 7);
      v95.__r_.__value_.__s.__size_ = v64;
      if (v92 < 0) {
        operator delete(*(void **)v91);
      }
      *(void *)std::string::size_type v91 = &v84;
      sub_1000027F4((void ***)v91);
      sub_100028254( (const void **)&__dst.__r_.__value_.__l.__data_,  (const void **)&v95.__r_.__value_.__l.__data_,  (uint64_t)&__p);
      if ((v87.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        int v65 = &v87;
      }
      else {
        int v65 = (std::string *)v87.__r_.__value_.__r.__words[0];
      }
      if ((v87.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v66 = v87.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v66 = v87.__r_.__value_.__l.__size_;
      }
      int v67 = std::string::append(&__p, (const std::string::value_type *)v65, v66);
      std::string::size_type v68 = v67->__r_.__value_.__r.__words[0];
      v94.__r_.__value_.__r.__words[0] = v67->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v94.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v67->__r_.__value_.__r.__words[1] + 7);
      unsigned __int8 v69 = v67->__r_.__value_.__s.__size_;
      v67->__r_.__value_.__l.__size_ = 0LL;
      v67->__r_.__value_.__l.__cap_ = 0LL;
      v67->__r_.__value_.__r.__words[0] = 0LL;
      std::string::size_type v70 = v94.__r_.__value_.__r.__words[0];
      std::string::size_type *v83 = v68;
      v83[1] = v70;
      *(std::string::size_type *)((char *)v83 + 15) = *(std::string::size_type *)((char *)v94.__r_.__value_.__r.__words
                                                                                + 7);
      *((_BYTE *)v83 + 23) = v69;
    }

    std::string::size_type v71 = a4[1];
    if (!v71)
    {
      if ((a3->__r_.__value_.__s.__size_ & 0x80u) == 0) {
        size_t v72 = a3->__r_.__value_.__s.__size_;
      }
      else {
        size_t v72 = a3->__r_.__value_.__l.__size_;
      }
      sub_100007A0C((uint64_t)&v87, v72 + 31);
      if ((v87.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v73 = &v87;
      }
      else {
        uint64_t v73 = (std::string *)v87.__r_.__value_.__r.__words[0];
      }
      if (v72)
      {
        if ((a3->__r_.__value_.__s.__size_ & 0x80u) == 0) {
          int v74 = a3;
        }
        else {
          int v74 = (const std::string *)a3->__r_.__value_.__r.__words[0];
        }
        memmove(v73, v74, v72);
      }

      strcpy((char *)v73 + v72, "<!-- Add required elements for ");
      int v75 = (char)a2->__r_.__value_.__s.__size_;
      if (v75 >= 0) {
        std::string::size_type v76 = (const std::string::value_type *)a2;
      }
      else {
        std::string::size_type v76 = (const std::string::value_type *)a2->__r_.__value_.__r.__words[0];
      }
      if (v75 >= 0) {
        std::string::size_type v77 = a2->__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v77 = a2->__r_.__value_.__l.__size_;
      }
      std::string::size_type v78 = std::string::append(&v87, v76, v77);
      __int128 v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
      __dst.__r_.__value_.__l.__cap_ = v78->__r_.__value_.__l.__cap_;
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v79;
      v78->__r_.__value_.__l.__size_ = 0LL;
      v78->__r_.__value_.__l.__cap_ = 0LL;
      v78->__r_.__value_.__r.__words[0] = 0LL;
      int v80 = std::string::append(&__dst, " here -->\n");
      std::string::size_type v81 = v80->__r_.__value_.__r.__words[0];
      v95.__r_.__value_.__r.__words[0] = v80->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v95.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v80->__r_.__value_.__r.__words[1] + 7);
      unsigned __int8 v82 = v80->__r_.__value_.__s.__size_;
      v80->__r_.__value_.__l.__size_ = 0LL;
      v80->__r_.__value_.__l.__cap_ = 0LL;
      v80->__r_.__value_.__r.__words[0] = 0LL;
      *a4 = v81;
      a4[1] = v95.__r_.__value_.__r.__words[0];
      *(std::string::size_type *)((char *)a4 + 15) = *(std::string::size_type *)((char *)v95.__r_.__value_.__r.__words
                                                                               + 7);
      *((_BYTE *)a4 + 23) = v82;
    }

    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v88;
    sub_1000027F4((void ***)&__dst);
  }

  else
  {
    siri::dialogengine::Log::Warn( (siri::dialogengine::Log *)"You must supply a valid Visual CAT element name",  (const char *)a2);
    sub_1000021BC(a4, (char *)&unk_10006A022);
  }

void sub_1000276DC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, void *a25, uint64_t a26, int a27, __int16 a28, char a29, char a30, void *a31, uint64_t a32, int a33, __int16 a34, char a35, char a36, char a37, uint64_t a38, uint64_t a39, void *a40, uint64_t a41, int a42, __int16 a43, char a44, char a45, uint64_t a46, uint64_t a47, void *a48, uint64_t a49, int a50,__int16 a51,char a52,char a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
}

void sub_100027C60(uint64_t *a1, _DWORD *a2, _DWORD *a3, unint64_t a4)
{
  uint64_t v8 = (uint64_t)(a1 + 2);
  uint64_t v9 = (_DWORD *)*a1;
  if (a4 > (a1[2] - *a1) >> 5)
  {
    sub_100027DA4(a1);
    if (a4 >> 59) {
      sub_100002668();
    }
    uint64_t v10 = a1[2] - *a1;
    uint64_t v11 = v10 >> 4;
    if (v10 >> 4 <= a4) {
      uint64_t v11 = a4;
    }
    else {
      unint64_t v12 = v11;
    }
    sub_100027DDC(a1, v12);
    uint64_t v13 = sub_100027E1C(v8, (uint64_t)a2, (uint64_t)a3, a1[1]);
    goto LABEL_11;
  }

  unint64_t v14 = (a1[1] - (uint64_t)v9) >> 5;
  if (v14 < a4)
  {
    __int128 v15 = &a2[8 * v14];
    sub_100027F60(a2, v15, v9);
    uint64_t v13 = sub_100027E1C(v8, (uint64_t)v15, (uint64_t)a3, a1[1]);
LABEL_11:
    a1[1] = v13;
    return;
  }

  sub_100027F60(a2, a3, v9);
  uint64_t v17 = v16;
  uint64_t v18 = a1[1];
  if (v18 != v16)
  {
    do
    {
      v18 -= 32LL;
    }

    while (v18 != v17);
  }

  a1[1] = v17;
}

void sub_100027D94(_Unwind_Exception *a1)
{
  *(void *)(v1 + std::iostream::~basic_iostream(v2, v3 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_100027D9C(_Unwind_Exception *a1)
{
  *(void *)(v1 + std::iostream::~basic_iostream(v2, v3 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_100027DA4(uint64_t *a1)
{
  if (*a1)
  {
    sub_100027FC0(a1);
    operator delete((void *)*a1);
    *a1 = 0LL;
    a1[1] = 0LL;
    a1[2] = 0LL;
  }

char *sub_100027DDC(void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    sub_100002668();
  }
  uint64_t result = (char *)sub_10002800C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

uint64_t sub_100027E1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v13 = a4;
  uint64_t v14 = a4;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  char v12 = 0;
  if (a2 != a3)
  {
    unint64_t v6 = (__int128 *)(a2 + 8);
    do
    {
      uint64_t v7 = (uint64_t)v6 - 8;
      *(_DWORD *)uint64_t v4 = *((_DWORD *)v6 - 2);
      uint64_t v8 = (_BYTE *)(v4 + 8);
      if (*((char *)v6 + 23) < 0)
      {
        sub_10000231C(v8, *(void **)v6, *((void *)v6 + 1));
        uint64_t v4 = v14;
      }

      else
      {
        __int128 v9 = *v6;
        *(void *)(v4 + 24) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v8 = v9;
      }

      v4 += 32LL;
      uint64_t v14 = v4;
      v6 += 2;
    }

    while (v7 + 32 != a3);
  }

  char v12 = 1;
  sub_100027EE8((uint64_t)v11);
  return v4;
}

void sub_100027ED4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100027EE8(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_100027F1C(a1);
  }
  return a1;
}

void sub_100027F1C(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 32LL;
  }

_DWORD *sub_100027F60(_DWORD *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v4 = a1;
  if (a1 == a2) {
    return a1;
  }
  unint64_t v5 = a2;
  do
  {
    unint64_t v6 = (const std::string *)(v4 + 2);
    int v7 = *v4;
    v4 += 8;
    uint64_t v8 = (std::string *)(a3 + 2);
    *a3 = v7;
    a3 += 8;
    std::string::operator=(v8, v6);
  }

  while (v4 != v5);
  return v5;
}

void sub_100027FC0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 32LL)
  {
  }

  a1[1] = v2;
}

void *sub_10002800C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    sub_1000022F4();
  }
  return operator new(32 * a2);
}

uint64_t sub_100028040(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1000280B4((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1000280B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v16 = a6;
  *((void *)&v16 + 1) = a7;
  __int128 v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }

  else
  {
    uint64_t v8 = a7;
    do
    {
      int v9 = *(_DWORD *)(a3 - 32);
      a3 -= 32LL;
      *(_DWORD *)(v8 - 32) = v9;
      v8 -= 32LL;
      __int128 v10 = *(_OWORD *)(a3 + 8);
      *(void *)(v8 + 24) = *(void *)(a3 + 24);
      *(_OWORD *)(v8 + std::iostream::~basic_iostream(v2, v3 + 8) = v10;
      *(void *)(a3 + 16) = 0LL;
      *(void *)(a3 + 24) = 0LL;
      *(void *)(a3 + std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
      v7 -= 32LL;
    }

    while (a3 != a5);
    *((void *)&v16 + 1) = v8;
    uint64_t v11 = v16;
  }

  char v14 = 1;
  sub_100028154((uint64_t)v13);
  return v11;
}

uint64_t sub_100028154(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_100028188(a1);
  }
  return a1;
}

void sub_100028188(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8LL);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8LL);
  while (v1 != v2)
  {
    v1 += 32LL;
  }

uint64_t sub_1000281CC(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100028200(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 32;
      *(void *)(a1 + 16) = v2 - 32;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        uint64_t v5 = *(void *)(a1 + 16);
      }

      uint64_t v2 = v5;
    }

    while (v5 != a2);
  }

uint64_t sub_100028254@<X0>(const void **a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  else {
    size_t v5 = (size_t)a1[1];
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  uint64_t result = sub_100007A0C(a3, v6 + v5);
  else {
    uint64_t v8 = *(char **)result;
  }
  if (v5)
  {
    else {
      int v9 = *a1;
    }
    uint64_t result = (uint64_t)memmove(v8, v9, v5);
  }

  __int128 v10 = &v8[v5];
  if (v6)
  {
    else {
      uint64_t v11 = *a2;
    }
    uint64_t result = (uint64_t)memmove(v10, v11, v6);
  }

  v10[v6] = 0;
  return result;
}

void sub_10002831C(uint64_t a1, std::string *__str, __int128 *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  int v9 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    sub_100028490((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      sub_100002668();
    }
    unint64_t v10 = 0x5555555555555556LL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_100002618((void *)a1, v11);
    char v12 = sub_100007ACC(v8, (__int128 *)__str, a3, *(char **)(a1 + 8));
    goto LABEL_11;
  }

  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = (std::string *)((char *)__str + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3));
    sub_1000284C8(__str, v13, v9);
    char v12 = sub_100007ACC(v8, (__int128 *)v13, a3, *(char **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v12;
    return;
  }

  sub_1000284C8(__str, (std::string *)a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 24LL;
    }

    while (v16 != v15);
  }

  *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v15;
}

void sub_100028480(_Unwind_Exception *a1)
{
  *(void *)(v1 + std::iostream::~basic_iostream(v2, v3 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_100028488(_Unwind_Exception *a1)
{
  *(void *)(v1 + std::iostream::~basic_iostream(v2, v3 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_100028490(uint64_t *a1)
{
  if (*a1)
  {
    sub_100002834(a1);
    operator delete((void *)*a1);
    *a1 = 0LL;
    a1[1] = 0LL;
    a1[2] = 0LL;
  }

std::string *sub_1000284C8(std::string *__str, std::string *a2, std::string *this)
{
  uint64_t v4 = __str;
  if (__str != a2)
  {
    do
      std::string::operator=(this++, v4++);
    while (v4 != a2);
    return a2;
  }

  return (std::string *)v4;
}

void sub_100028524(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_100027FC0((uint64_t *)v2);
    operator delete(**a1);
  }

char *sub_100028564(char *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    size_t v6 = result;
    uint64_t result = sub_100028604(result, a4);
    uint64_t v7 = (void *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      void *v7 = *a2;
      uint64_t v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        int v9 = (unint64_t *)(v8 + 8);
        do
          unint64_t v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }

      a2 += 2;
      v7 += 2;
    }

    *((void *)v6 + 1) = v7;
  }

  return result;
}

void sub_1000285F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *sub_100028604(void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_100002668();
  }
  uint64_t result = (char *)sub_100028644((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *sub_100028644(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_1000022F4();
  }
  return operator new(16 * a2);
}

void sub_100028678(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    size_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 40LL;
        sub_1000260B0((uint64_t)(v1 + 2), v4);
      }

      while ((void *)v4 != v2);
      size_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

uint64_t sub_1000286FC(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 416);
  sub_10002884C(&v3);
  sub_100028914(a1 + 296, *(void **)(a1 + 304));
  uint64_t v3 = (void **)(a1 + 232);
  sub_1000027F4(&v3);
  sub_100028914(a1 + 160, *(void **)(a1 + 168));
  uint64_t v3 = (void **)(a1 + 8);
  sub_10000AE78(&v3);
  return a1;
}

void sub_10002884C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    size_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48LL;
        sub_1000288D0((uint64_t)(v1 + 2), v4);
      }

      while ((void *)v4 != v2);
      size_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void sub_1000288D0(uint64_t a1, uint64_t a2)
{
}

void sub_100028914(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100028914(a1, *a2);
    sub_100028914(a1, a2[1]);
    sub_10002895C((uint64_t)(a2 + 4));
    operator delete(a2);
  }

void sub_10002895C(uint64_t a1)
{
}

char *sub_1000289A0(char *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    size_t v6 = result;
    uint64_t result = sub_100028604(result, a4);
    uint64_t v7 = (void *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      void *v7 = *a2;
      uint64_t v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        int v9 = (unint64_t *)(v8 + 8);
        do
          unint64_t v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }

      a2 += 2;
      v7 += 2;
    }

    *((void *)v6 + 1) = v7;
  }

  return result;
}

void sub_100028A2C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_100028A40(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    size_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_1000059D0(v4 - 24);
      while ((void *)v4 != v2);
      size_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void sub_100028AB0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100078F00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100028AC0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100078F00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_100028AE0(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 32);
  sub_100007BFC(&v1);
}

void sub_100028B0C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100078F50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100028B1C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100078F50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_100028B3C(uint64_t a1)
{
}

void sub_100028B64(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void **)(a2 + 32);
  sub_100007BFC(&v3);
}

uint64_t sub_100028BA8(void *a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_100002668();
  }
  else {
    unint64_t v8 = v5;
  }
  uint64_t v16 = a1 + 2;
  if (v8) {
    int v9 = (char *)sub_10000267C((uint64_t)(a1 + 2), v8);
  }
  else {
    int v9 = 0LL;
  }
  char v12 = v9;
  uint64_t v13 = &v9[24 * v4];
  uint64_t v15 = &v9[24 * v8];
  sub_100028CC4((uint64_t)(a1 + 2), v13, a2, a3);
  uint64_t v14 = v13 + 24;
  sub_100028D54(a1, &v12);
  uint64_t v10 = a1[1];
  sub_100028DB8((uint64_t)&v12);
  return v10;
}

void sub_100028CB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_100028CC4(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = *a3;
  unint64_t v5 = (std::__shared_weak_count *)a3[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      unint64_t v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    uint64_t v8 = *a4;
    *a2 = v4;
    a2[1] = v5;
    do
      unint64_t v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    a2[2] = v8;
    do
      unint64_t v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  else
  {
    uint64_t v11 = *a4;
    *a2 = v4;
    a2[1] = 0LL;
    a2[2] = v11;
  }

void *sub_100028D54(void *result, void *a2)
{
  uint64_t v3 = (void *)*result;
  uint64_t v2 = (void *)result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    __int128 v5 = *(_OWORD *)(v2 - 3);
    v2 -= 3;
    *(_OWORD *)(v4 - 24) = v5;
    v4 -= 24LL;
    *uint64_t v2 = 0LL;
    v2[1] = 0LL;
    *(void *)(v4 + 16) = v2[2];
  }

  a2[1] = v4;
  size_t v6 = (void *)*result;
  *uint64_t result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100028DB8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 24;
    sub_1000059D0(i - 24);
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_100028E04(void *result, __int128 *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = result[1];
  if (*((char *)a2 + 23) < 0)
  {
    uint64_t result = sub_10000231C((_BYTE *)result[1], *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v4 = *a2;
    *(void *)(v3 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }

  v2[1] = v3 + 24;
  return result;
}

void sub_100028E58(_Unwind_Exception *a1)
{
  *(void *)(v1 + std::iostream::~basic_iostream(v2, v3 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100028E60(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v9 = v7;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      __int128 v10 = *(_OWORD *)v9;
      *(void *)(v8 + 16) = *(void *)(v9 + 16);
      *(_OWORD *)uint64_t v8 = v10;
      v8 += 24LL;
      *(void *)(v9 + std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
      *(void *)(v9 + 16) = 0LL;
      *(void *)unint64_t v9 = 0LL;
      v9 += 24LL;
    }

    while (v9 < a3);
  }

  *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v8;
  return sub_100029104((uint64_t)&v12, a2, v7, v6);
}

void *sub_100028ECC(void *result, __int128 *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = result[2];
  if (v4 == result[3])
  {
    __int128 v5 = (__int128 *)result[1];
    if ((unint64_t)v5 <= *result)
    {
      uint64_t v11 = v4 - *result;
      BOOL v10 = v11 == 0;
      uint64_t v12 = 0x5555555555555556LL * (v11 >> 3);
      if (v10) {
        unint64_t v13 = 1LL;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v14 = v13 >> 2;
      uint64_t v15 = result[4];
      uint64_t v32 = v3[4];
      uint64_t v16 = (char *)sub_10000267C(v15, v13);
      uint64_t v18 = &v16[24 * v14];
      unint64_t v19 = v3[1];
      int64_t v20 = v3[2] - v19;
      if (v20)
      {
        uint64_t v21 = v20 / 24;
        uint64_t v22 = &v18[24 * v21];
        uint64_t v23 = 24 * v21;
        int v24 = &v16[24 * v14];
        do
        {
          __int128 v25 = *(_OWORD *)v19;
          *((void *)v24 + 2) = *(void *)(v19 + 16);
          *(_OWORD *)int v24 = v25;
          v24 += 24;
          *(void *)(v19 + std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
          *(void *)(v19 + 16) = 0LL;
          *(void *)unint64_t v19 = 0LL;
          v19 += 24LL;
          v23 -= 24LL;
        }

        while (v23);
        int64x2_t v26 = *(int64x2_t *)(v3 + 1);
      }

      else
      {
        int64x2_t v26 = vdupq_n_s64(v19);
        uint64_t v22 = &v16[24 * v14];
      }

      uint64_t v29 = *v3;
      void *v3 = v16;
      v3[1] = v18;
      int64x2_t v30 = v26;
      uint64_t v27 = v3[3];
      v3[2] = v22;
      v3[3] = &v16[24 * v17];
      uint64_t v31 = v27;
      uint64_t result = (void *)sub_100002ED8((uint64_t)&v29);
      uint64_t v4 = v3[2];
    }

    else
    {
      int64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *result) >> 3);
      if (v6 >= -1) {
        uint64_t v7 = v6 + 1;
      }
      else {
        uint64_t v7 = v6 + 2;
      }
      uint64_t v8 = -3 * (v7 >> 1);
      uint64_t result = sub_100029188((uint64_t)&v29, v5, (__int128 *)v4, (uint64_t)v5 - 24 * (v7 >> 1));
      uint64_t v4 = v9;
      v3[1] += 8 * v8;
      v3[2] = v9;
    }
  }

  if (*((char *)a2 + 23) < 0)
  {
    uint64_t result = sub_10000231C((_BYTE *)v4, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v28 = *a2;
    *(void *)(v4 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v4 = v28;
  }

  v3[2] += 24LL;
  return result;
}

uint64_t sub_100029054(uint64_t a1, void *a2, __int128 *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1 + 16;
  sub_100002DC4(a1 + 16, (uint64_t)a3, (uint64_t)a3, *(void *)a1, *(void *)a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_1000291F8(v7, a3, *(__int128 **)(a1 + 8), a2[2]);
  uint64_t v9 = *(void *)a1;
  *(void *)a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = *(void *)(a1 + 8);
  *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = a2[2];
  a2[2] = v10;
  uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_100029104(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v6 = a3;
    do
    {
      uint64_t v7 = a4 - 24;
      __int128 v8 = *(_OWORD *)(v6 - 24);
      *(void *)(v7 + 16) = *(void *)(v6 - 8);
      *(_OWORD *)uint64_t v7 = v8;
      *(_BYTE *)(v6 - 1) = 0;
      *(_BYTE *)(v6 - 24) = 0;
      a4 = v7;
      v6 -= 24LL;
    }

    while (v6 != a2);
  }

  return a3;
}

__int128 *sub_100029188(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 v5 = a2;
  if (a2 != a3)
  {
    do
    {
      __int128 v7 = *v5;
      *(void *)(a4 + 16) = *((void *)v5 + 2);
      *(_OWORD *)a4 = v7;
      a4 += 24LL;
      *((_BYTE *)v5 + 23) = 0;
      *(_BYTE *)__int128 v5 = 0;
      __int128 v5 = (__int128 *)((char *)v5 + 24);
    }

    while (v5 != a3);
    return a3;
  }

  return v5;
}

uint64_t sub_1000291F8(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      __int128 v5 = *a2;
      *(void *)(v4 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v4 = v5;
      v4 += 24LL;
      *((void *)a2 + 1) = 0LL;
      *((void *)a2 + 2) = 0LL;
      *(void *)a2 = 0LL;
      a2 = (__int128 *)((char *)a2 + 24);
    }

    while (a2 != a3);
    uint64_t v10 = v4;
  }

  char v8 = 1;
  sub_10000277C((uint64_t)v7);
  return v4;
}

uint64_t sub_100029274()
{
  sub_1000021BC( qword_10007C5B0,  "iVBORw0KGgoAAAANSUhEUgAAACQAAAAWCAYAAACosj4+AAAAAXNSR0IArs4c6QAAAERlWElmTU0AKgAAAAgAAYdpAAQAAAABAAAAGgAAAAAAA6ABAAMA AAABAAEAAKACAAQAAAABAAAAJKADAAQAAAABAAAAFgAAAADx7wgaAAAC0UlEQVRIDc1WO2wTQRB9ez7b+AMmEIKE+bkgBQiJAikNIKHUkSloItFQUScS CkQUkZBiaBKJGigoItFhQBR0dEEYKCCISIAJiQOOQ8gFf+Lz2cvOmbv4/L2LILDS+WZn3uw8z+7NDkOLEZq70pWvqFEORBnHUQ6+T0CDLeCd1FkGtsgZ 3jEg7pc8ceXQjR/NnITdOg4nx7YtYG0IHCMAD1mtf2rGFDDc3I8dk58jY+u1q1oI+eaHwloJD0RWTtaC/pYsgidkN84VDkymjBgmISJT0thzcB42jFvy ZizllnmfQUqioLRNlJktJ0PBRQIoNnGgqUw/+plxuE2nvBGc9R0R3tUkr/MSPpaW8bQwiywv0rK2Bx2R3xxijL6mXFlNOj3A6YPXscsVaAiaLv/E+fRd TBfnGmztFUwJuDwRiT5tp2RoYYPMpcx9nFm8hei320gU57HXtR139gy2j93UykPERaY609RuU/lG/YoX6hcdnS6vYTo8jF53D7qlAJYrOZurVGHERaKi 58irDTggeU2rhoop2xWIi8iQXoHt+jTgooHjOOENIyLvxoVgtXw9zs9gtVJowHZSEBf9K+sEbGcf2dlvMT/KvcVg5p5F52Qi0R3jxKEeezEzhb7UBJ4V PugmcU+hyLV6mK05cZHowrOFbgGaVZfwSl3A5ZW4qHEc/b5eDPiPtUC3VwsuMyJDiLeH2bO+VlOYyr3UwbGuAXtOdSjB5aFErYCotkqdreP0vZqGKrbm k/bdxF5beYLVcgHdomDK0G8l09ZZYApx0eu+nBy+KvI93tlpA+FnHgTEk6lkN5RC6pGCKEKDUrF0FRZM0wljo1pkIqb/DepLBLNEU2ALZZ6rDWQIuiQI OiVDsYkD+esZIuG/aj+IEPUj1Jc4zRT5bnZQrNpeiNaxnDwiFWah0xD7uZmDbp8YtbBslGIZjZnha26ZoTDe/6rJ/wXRihQSP/gzLgAAAABJRU5ErkJggg==");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10007C5B0, (void *)&_mh_execute_header);
  sub_1000021BC( qword_10007C5C8,  "iVBORw0KGgoAAAANSUhEUgAAACQAAAAWCAYAAACosj4+AAAAAXNSR0IArs4c6QAAAERlWElmTU0AKgAAAAgAAYdpAAQAAAABAAAAGgAAAAAAA6ABAAMA AAABAAEAAKACAAQAAAABAAAAJKADAAQAAAABAAAAFgAAAADx7wgaAAACSklEQVRIDc1WSW4aQRT93YAEElMkEINX3ngRWFrKKmdwruKVz8AqVwm5QlaR 2NKSzcIrMwikMAkaMfm9Ulerwcah2jZ2LbqmP7x6/1f1t+RAGw6HX+bz+ZVlWVfb7fYr+jL65AHxF5ehO4VuG72Dvp5IJOrZbPbfc0rW/iIU4r1e7xrr Nxhn9vffYg5gI9ipFQqFnxi7QZs7gAaDwdlyufwFgcug0DuOG7FY7Ecul3vQPnxABLNarf6ClTO9eYoeDD1Eo9FvGpRNpwwTmTk1GM+3igoxcK4AeTlz qjDR73679DCIxdvkuu49EB6dwJvNRhBiSafTEo+rg/kOFouFwKbk83mxbXVef++lARMdts6jvNoQPBoMjRJMq9WSSCQilUpFUqmU8jWdTqXZbApyUQi6 VCqp9WM+JIRYbCAjIKNGZpCIsl6vFYDJZCJBMGQmkzE6o/JPLFan07nF7MIIEYQJgmwQFJmCMcUMwZA1gg7R7shQOYSiClO1WlVgCIpheiUYHqp8fNYd QE1m3rLZSKZ2GIM6ZJoZho2JzDCOx+MwJvkethkyx1Qbz4Q4jrMTJh0+guLebDYzNcuQNclQ3VSTDGhmdAInk0mVzPr2jUb8f5o1YPkd+mHs9/vqJqGU 2PFK9ggm7MNoe3VJbcfqfya8TSgdZB8M1fhyc48yhq1GLOqKgKp4t9v9AwMf9T9rFIvF78ghVx2DA9Yl6P26xPB0ocXp0/OtCjWfV9YjrEtguRHaurli I1gLUf3Jq8bwfZoSNnjAjyryHwGk5kJW4N53JgAAAABJRU5ErkJggg==");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10007C5C8, (void *)&_mh_execute_header);
  sub_1000021BC( qword_10007C5E0,  "iVBORw0KGgoAAAANSUhEUgAAACQAAAAWCAYAAACosj4+AAAAAXNSR0IArs4c6QAAAERlWElmTU0AKgAAAAgAAYdpAAQAAAABAAAAGgAAAAAAA6ABAAMA AAABAAEAAKACAAQAAAABAAAAJKADAAQAAAABAAAAFgAAAADx7wgaAAACAUlEQVRIDc2WvU4CQRSF7wzB6MZAiNrsKmhlYgyFEq3pLIxYGBsK4iNY+QxU PoKxoNEGjIWdtQYtiJpYKejSqCEQg0QD454ha9Ao4MwmehP+duee/bhzZ+Yw+iEymcNQo1lPiBYlBKMZZ5hJgoZ/GN79MqNnZ0CZCbpinHKDPiOXTC5X vktiXy/uHB8PNouPm8xHW5FxKxgJWzQ2EiLDGJJD6/UXeniqULFk063zEkJ8lejnd5URS/sio9sb8XijM+ET0O7unvVGLBueMGOL81EKBLoXpFZ7ppOz goTrFO33O2Ms7yexmkqt227OBxBgXolOFuaiVnR22r3f12fh4ppOHTClYGQPEC26UBwimCZURgUG+fgDC05FlUKQnBUwIF8CoWcwTb+tTCcActFvKuH0 YQwMyGVyNbVebtZWloK9eqbXw9BT+9kj5UY3/MYUx9LGatKFASw0JhWr5KQHwcKxz6iW+ruK6WiBhWPTwz7jVehogQVNbbqbnhdQmlqmXGVegHilAaAy jgOvQlOrzHHg4WzyKjS1LjlOXxyUXoWOFmd0wGEFivd2FZuabkADDkAxqmDh8CWiSWmc2roBDUU7QrAjYJGrDL6kdFfO49RWDeSqThdsCBjwbAkEkwRf cnpesFWgdO0Hnu0atQ8/BLp/ZdAAhPhXFraN1H7/K5P/DlNODQLEpvAJAAAAAElFTkSuQmCC");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10007C5E0, (void *)&_mh_execute_header);
  sub_1000021BC( qword_10007C5F8,  "iVBORw0KGgoAAAANSUhEUgAAACQAAAAWCAYAAACosj4+AAAAAXNSR0IArs4c6QAAAERlWElmTU0AKgAAAAgAAYdpAAQAAAABAAAAGgAAAAAAA6ABAAMA AAABAAEAAKACAAQAAAABAAAAJKADAAQAAAABAAAAFgAAAADx7wgaAAACEUlEQVRIDc1WSy9DQRT+ZlqvEkWsqCB2oisSe0vC9VckkjaxsSGaSPwVtxJL ewmrlp0gHitBRevRx5hvmiu3olrjJnoWvXPnzPnu1zPnJVBHopfJ/kLl3VGAIxQmFdSQPtpT53ij7WcBcasETgXgRmS7mxvdevjOSOtrZex8vfMaTytQ SAAqWqtt/BaGhNMdhxOZwnTHCIZCVYjbcg7Hb1dwC1mk89lcUVRSMfTuXIyvv/pRawh1Xa0Ml4rY1V6Z8R9qdu1E4kgNLGKibfBHk7PiHRL3e0gXMkfh Niy/jOzceAafhEimWBKHUGrYUzb71NeBzf4FrPbNNWtizm0/HmDtcf8mFK7MeqQkNbwmesaGDO1tyNCOf2Cjb97cCjlwzxBizPzlmn7rGX7YE9ouReIz Jm71pmA25cvv57YBnI0lG8aM9/F6T8ZU/DqVaw+FxyVT24YMwZlNjQK4Hgn/PjGWuqei5CJZZ/zK36yZ2kEJschFsujZgrLOBCXEIhftIVOBrXC9omdl /MWIWORisuyL7l9fJXuMLQO2g6CEWOQi2fBsQdmbghJiaS4n2kNwbUHZKIMSYmkuaclRQNdHK9+7+QxY1P4qxOAEQC7SzCUCKRvQEiqma9vY+m3Y+TmO kIvJMs4l2l1H/kPNrt1CBuzatkJbjiHkQIyWGz8+CZFdSw1oJERpqRG2Sqn6+19D/gfZixHOWVphygAAAABJRU5ErkJggg==");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10007C5F8, (void *)&_mh_execute_header);
  sub_1000021BC(qword_10007C610, "greyColor");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10007C610, (void *)&_mh_execute_header);
  sub_1000021BC(qword_10007C628, "dialogColor");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10007C628, (void *)&_mh_execute_header);
  sub_1000021BC(qword_10007C640, "visualColor");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10007C640, (void *)&_mh_execute_header);
  sub_1000021BC(qword_10007C658, "usage");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10007C658, (void *)&_mh_execute_header);
  sub_1000021BC(qword_10007C670, "empty");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10007C670, (void *)&_mh_execute_header);
  sub_1000021BC(qword_10007C688, "variantsLabel");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10007C688, (void *)&_mh_execute_header);
  sub_1000021BC(qword_10007C6A0, "variants");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10007C6A0, (void *)&_mh_execute_header);
  sub_1000021BC(qword_10007C6B8, "defaultVariant");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10007C6B8, (void *)&_mh_execute_header);
  sub_1000021BC(qword_10007C6D0, "error");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10007C6D0, (void *)&_mh_execute_header);
}

void sub_1000294A8(uint64_t a1)
{
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_10002951C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_100029550(uint64_t a1)
{
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_1000295C4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000295F8(uint64_t a1)
{
    "      <path-to-cat>        The path to a .cat directory, a visualcat.xml file, or a .pattern.xml file\n"
    "      <output-cat>         An optional path to a different .cat directory or .bin file for the converted files\n");
  sub_1000021BC(__p, "tobinary");
  sub_1000388C0(a1, (uint64_t)__p, (uint64_t)v4);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_10002966C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000296A0(uint64_t a1)
{
    "      <path-to-cat-schema> The path to a schema directory, a .catschema file\n"
    "      <output-cat-schema>  An optional path to a different .catschemabin file for the converted file\n");
  sub_1000021BC(__p, "tobinaryschema");
  sub_1000388C0(a1, (uint64_t)__p, (uint64_t)v4);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_100029714( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_100029748(uint64_t a1)
{
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_1000297BC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000297F0(uint64_t a1)
{
    "      <path-to-cat-schema> The path to a schema directory, a .catschema file\n"
    "      <output-cat-schema>  An optional path to a different .catschemabin file for the converted file\n");
  sub_1000021BC(__p, "toyamlschema");
  sub_1000388C0(a1, (uint64_t)__p, (uint64_t)v4);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_100029864( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_100029898(uint64_t a1)
{
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_10002990C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_100029940(uint64_t a1)
{
    "      <path-to-pattern-schema> The path to a schema directory, a .patternschema file\n"
    "      <output-pattern-schema>  An optional path to a different .patternschemabin file for the converted file\n");
  sub_1000021BC(__p, "tobinarypatternschema");
  sub_1000388C0(a1, (uint64_t)__p, (uint64_t)v4);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_1000299B4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000299E8(uint64_t a1)
{
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_100029A5C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_100029A90(uint64_t a1)
{
    "      <path-to-pattern-schema> The path to a schema directory, a .patternschema file\n"
    "      <output-pattern-schema>  An optional path to a different .patternschemabin file for the converted file\n");
  sub_1000021BC(__p, "toyamlpatternschema");
  sub_1000388C0(a1, (uint64_t)__p, (uint64_t)v4);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_100029B04( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_100029B38(uint64_t a1)
{
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_100029BAC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100029BE0(uint64_t a1)
{
  if ((siri::dialogengine::DirExists(a1) & 1) != 0)
  {
    siri::dialogengine::GetCatLocales(&v67, a1);
    if (v68 == v67)
    {
      std::string::size_type v53 = sub_100002F60(&std::cout, (uint64_t)"Error: can't find any locales in CAT file: ", 43LL);
      int v54 = *(char *)(a1 + 23);
      if (v54 >= 0) {
        uint64_t v55 = a1;
      }
      else {
        uint64_t v55 = *(void *)a1;
      }
      if (v54 >= 0) {
        uint64_t v56 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        uint64_t v56 = *(void *)(a1 + 8);
      }
      std::string::size_type v57 = sub_100002F60(v53, v55, v56);
      std::ios_base::getloc((const std::ios_base *)((char *)v57 + *(void *)(*v57 - 24LL)));
      __int128 v58 = std::locale::use_facet(&v65, &std::ctype<char>::id);
      uint64_t v59 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v58->__vftable[2].~facet_0)(v58, 10LL);
      std::locale::~locale(&v65);
      std::ostream::put(v57, v59);
      std::ostream::flush(v57);
      char v19 = 0;
    }

    else
    {
      uint64_t v2 = sub_100002F60(&std::cout, (uint64_t)"Converting ", 11LL);
      int v3 = *(char *)(a1 + 23);
      if (v3 >= 0) {
        uint64_t v4 = a1;
      }
      else {
        uint64_t v4 = *(void *)a1;
      }
      if (v3 >= 0) {
        uint64_t v5 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        uint64_t v5 = *(void *)(a1 + 8);
      }
      uint64_t v6 = sub_100002F60(v2, v4, v5);
      __int128 v7 = sub_100002F60(v6, (uint64_t)" to ", 4LL);
      int v8 = *(_DWORD *)(a1 + 96);
      if (v8) {
        uint64_t v9 = "BINARY";
      }
      else {
        uint64_t v9 = "XML";
      }
      if (v8) {
        uint64_t v10 = 6LL;
      }
      else {
        uint64_t v10 = 3LL;
      }
      uint64_t v11 = sub_100002F60(v7, (uint64_t)v9, v10);
      if (*(_BYTE *)(a1 + 100)) {
        uint64_t v12 = " (preserve existing)";
      }
      else {
        uint64_t v12 = " (delete existing)";
      }
      if (*(_BYTE *)(a1 + 100)) {
        uint64_t v13 = 20LL;
      }
      else {
        uint64_t v13 = 18LL;
      }
      unint64_t v14 = sub_100002F60(v11, (uint64_t)v12, v13);
      std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(*v14 - 24LL)));
      uint64_t v15 = std::locale::use_facet(&v65, &std::ctype<char>::id);
      uint64_t v16 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10LL);
      std::locale::~locale(&v65);
      std::ostream::put(v14, v16);
      std::ostream::flush(v14);
      sub_10002A61C(a1);
      uint64_t v17 = v67;
      uint64_t v18 = v68;
      if (v67 != v68)
      {
        uint64_t v61 = a1 + 24;
        char v19 = 1;
        while (1)
        {
          if (*(char *)(v17 + 23) < 0)
          {
            sub_10000231C(&__dst, *(void **)v17, *(void *)(v17 + 8));
          }

          else
          {
            __int128 v20 = *(_OWORD *)v17;
            uint64_t v78 = *(void *)(v17 + 16);
            __int128 __dst = v20;
          }

          v69.__locale_ = 0LL;
          locale = 0LL;
          std::string::size_type v71 = 0LL;
          std::string __p = &v69;
          LOBYTE(v63) = 0;
          v69.__locale_ = (std::locale::__imp *)operator new(0x18uLL);
          locale = v69.__locale_;
          std::string::size_type v71 = (char *)v69.__locale_ + 24;
          locale = sub_100007ACC((uint64_t)&v71, &__dst, &v79, (char *)v69.__locale_);
          siri::dialogengine::FindLocaleFile(&v65, a1, &v69);
          std::string __p = &v69;
          sub_1000027F4((void ***)&__p);
          if (SHIBYTE(v78) < 0) {
            operator delete((void *)__dst);
          }
          siri::dialogengine::ChangeCATExtension(&v69, &v65, 0LL);
          siri::dialogengine::ChangeCATExtension(&__dst, &v65, 1LL);
          sub_10002D3D4(a1, (uint64_t)&v69, (uint64_t)&__dst);
          if (SHIBYTE(v78) < 0) {
            operator delete((void *)__dst);
          }
          if (SHIBYTE(v71) < 0) {
            operator delete(v69.__locale_);
          }
          if (v66 < 0) {
            operator delete(v65.__locale_);
          }
          siri::dialogengine::Context::Context((siri::dialogengine::Context *)&v65);
          siri::dialogengine::FindParamsFile(&v69, a1);
          if (*(char *)(v17 + 23) < 0)
          {
            sub_10000231C(&v74, *(void **)v17, *(void *)(v17 + 8));
          }

          else
          {
            __int128 v21 = *(_OWORD *)v17;
            uint64_t v75 = *(void *)(v17 + 16);
            __int128 v74 = v21;
          }

          std::string __p = 0LL;
          std::string::size_type v63 = 0LL;
          unsigned __int8 v64 = 0LL;
          p_p = &__p;
          LOBYTE(v73) = 0;
          std::string __p = operator new(0x18uLL);
          std::string::size_type v63 = __p;
          unsigned __int8 v64 = (char *)__p + 24;
          std::string::size_type v63 = sub_100007ACC((uint64_t)&v64, &v74, (__int128 *)&v76, (char *)__p);
          siri::dialogengine::FindLocaleFile(&__dst, a1, &__p);
          char v22 = siri::dialogengine::Context::LoadFiles(&v65, &v69, &__dst);
          if (SHIBYTE(v78) < 0) {
            operator delete((void *)__dst);
          }
          p_p = &__p;
          sub_1000027F4(&p_p);
          if (SHIBYTE(v75) < 0) {
            operator delete((void *)v74);
          }
          if (SHIBYTE(v71) < 0)
          {
            operator delete(v69.__locale_);
            if ((v22 & 1) == 0)
            {
LABEL_51:
              uint64_t v23 = sub_100002F60(&std::cout, (uint64_t)"Error: unable to load CAT file: ", 32LL);
              int v24 = *(char *)(a1 + 23);
              if (v24 >= 0) {
                uint64_t v25 = a1;
              }
              else {
                uint64_t v25 = *(void *)a1;
              }
              if (v24 >= 0) {
                uint64_t v26 = *(unsigned __int8 *)(a1 + 23);
              }
              else {
                uint64_t v26 = *(void *)(a1 + 8);
              }
              uint64_t v27 = sub_100002F60(v23, v25, v26);
              __int128 v28 = sub_100002F60(v27, (uint64_t)" (", 2LL);
              int v29 = *(char *)(v17 + 23);
              if (v29 >= 0) {
                int64x2_t v30 = (void *)v17;
              }
              else {
                int64x2_t v30 = *(void **)v17;
              }
              if (v29 >= 0) {
                uint64_t v31 = *(unsigned __int8 *)(v17 + 23);
              }
              else {
                uint64_t v31 = *(void *)(v17 + 8);
              }
              goto LABEL_75;
            }
          }

          else if ((v22 & 1) == 0)
          {
            goto LABEL_51;
          }

          if ((siri::dialogengine::Context::Save( &v65,  v61,  v17,  *(unsigned int *)(a1 + 96),  *(unsigned __int8 *)(a1 + 101)) & 1) != 0)
          {
            if (!*(_BYTE *)(a1 + 100))
            {
              siri::dialogengine::Context::GetFile((siri::dialogengine::Context *)&v65);
              if (p_p)
              {
                siri::dialogengine::File::GetParamsFilename((siri::dialogengine::File *)p_p);
                siri::dialogengine::BaseName(&__dst, &__p);
                siri::dialogengine::JoinPath(&v69, v61, &__dst);
                if (SHIBYTE(v78) < 0) {
                  operator delete((void *)__dst);
                }
                if (SHIBYTE(v64) < 0) {
                  operator delete(__p);
                }
              }

              else
              {
                sub_1000021BC(&v69, (char *)&unk_10006A022);
              }

              if (p_p)
              {
                siri::dialogengine::File::GetLocaleFilename((siri::dialogengine::File *)p_p);
                siri::dialogengine::BaseName(&__p, &v74);
                siri::dialogengine::JoinPath(&__dst, v61, &__p);
                if (SHIBYTE(v64) < 0) {
                  operator delete(__p);
                }
                if (SHIBYTE(v75) < 0) {
                  operator delete((void *)v74);
                }
              }

              else
              {
                sub_1000021BC(&__dst, (char *)&unk_10006A022);
              }

              BOOL v42 = *(_DWORD *)(a1 + 96) == 0;
              if (siri::dialogengine::HasCATExtension(&v69, v42)
                && siri::dialogengine::FileExists(&v69))
              {
                siri::dialogengine::DeleteFile(&v69);
              }

              if (siri::dialogengine::HasCATExtension(&__dst, v42)
                && siri::dialogengine::FileExists(&__dst))
              {
                siri::dialogengine::DeleteFile(&__dst);
              }

              if (SHIBYTE(v78) < 0) {
                operator delete((void *)__dst);
              }
              if (SHIBYTE(v71) < 0) {
                operator delete(v69.__locale_);
              }
              uint64_t v43 = v73;
              if (v73)
              {
                p_shared_owners = (unint64_t *)&v73->__shared_owners_;
                do
                  unint64_t v45 = __ldaxr(p_shared_owners);
                while (__stlxr(v45 - 1, p_shared_owners));
                if (!v45)
                {
                  ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
                  std::__shared_weak_count::__release_weak(v43);
                }
              }
            }

            goto LABEL_76;
          }

          uint64_t v32 = sub_100002F60(&std::cout, (uint64_t)"Error: unable to save CAT file: ", 32LL);
          char v33 = *(_BYTE *)(a1 + 47);
          if (v33 >= 0) {
            uint64_t v34 = a1 + 24;
          }
          else {
            uint64_t v34 = *(void *)(a1 + 24);
          }
          if (v33 >= 0) {
            uint64_t v35 = *(unsigned __int8 *)(a1 + 47);
          }
          else {
            uint64_t v35 = *(void *)(a1 + 32);
          }
          __int128 v36 = sub_100002F60(v32, v34, v35);
          __int128 v28 = sub_100002F60(v36, (uint64_t)" (", 2LL);
          int v37 = *(char *)(v17 + 23);
          if (v37 >= 0) {
            int64x2_t v30 = (void *)v17;
          }
          else {
            int64x2_t v30 = *(void **)v17;
          }
          if (v37 >= 0) {
            uint64_t v31 = *(unsigned __int8 *)(v17 + 23);
          }
          else {
            uint64_t v31 = *(void *)(v17 + 8);
          }
LABEL_75:
          __int128 v38 = sub_100002F60(v28, (uint64_t)v30, v31);
          __int128 v39 = sub_100002F60(v38, (uint64_t)")  Skipping...", 14LL);
          std::ios_base::getloc((const std::ios_base *)((char *)v39 + *(void *)(*v39 - 24LL)));
          std::string::size_type v40 = std::locale::use_facet(&v69, &std::ctype<char>::id);
          uint64_t v41 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v40->__vftable[2].~facet_0)(v40, 10LL);
          std::locale::~locale(&v69);
          std::ostream::put(v39, v41);
          std::ostream::flush(v39);
          char v19 = 0;
LABEL_76:
          siri::dialogengine::Context::~Context((siri::dialogengine::Context *)&v65);
          v17 += 24LL;
          if (v17 == v18) {
            goto LABEL_115;
          }
        }
      }

      char v19 = 1;
    }

LABEL_115:
    v65.__locale_ = (std::locale::__imp *)&v67;
    sub_1000027F4((void ***)&v65);
  }

  else
  {
    std::string::size_type v46 = sub_100002F60(&std::cout, (uint64_t)"Error: can't find input CAT file: ", 34LL);
    int v47 = *(char *)(a1 + 23);
    if (v47 >= 0) {
      uint64_t v48 = a1;
    }
    else {
      uint64_t v48 = *(void *)a1;
    }
    if (v47 >= 0) {
      uint64_t v49 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v49 = *(void *)(a1 + 8);
    }
    __int128 v50 = sub_100002F60(v46, v48, v49);
    std::ios_base::getloc((const std::ios_base *)((char *)v50 + *(void *)(*v50 - 24LL)));
    std::string::size_type v51 = std::locale::use_facet(&v65, &std::ctype<char>::id);
    uint64_t v52 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v51->__vftable[2].~facet_0)(v51, 10LL);
    std::locale::~locale(&v65);
    std::ostream::put(v50, v52);
    std::ostream::flush(v50);
    char v19 = 0;
  }

  return v19 & 1;
}

void sub_10002A410( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, std::locale a17, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  *(void *)(v22 - 12std::iostream::~basic_iostream(v2, v3 + 8) = v22 - 224;
  sub_1000027F4((void ***)(v22 - 128));
  _Unwind_Resume(a1);
}

void sub_10002A61C(uint64_t a1)
{
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  sub_1000021BC(v2, "_params.cat.bin");
  siri::dialogengine::JoinPath(__p, a1, v2);
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_10002D3D4(a1, (uint64_t)v6, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_10002A6D0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10002A72C(__int128 **a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return 0LL;
  }
  uint64_t v5 = (uint64_t)*a1;
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 3);
  if (v6 >= 3)
  {
    int v8 = sub_100038648((uint64_t)a1);
    uint64_t v5 = (uint64_t)*a1;
    uint64_t v9 = a1[1];
    if (v8)
    {
      unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - v5) >> 3);
      goto LABEL_5;
    }

    sub_100029188((uint64_t)&v68, (__int128 *)(v5 + 24), v9, v5);
    uint64_t v15 = v14;
    uint64_t v16 = a1[1];
    if (v16 != v14)
    {
      do
      {
        uint64_t v16 = (__int128 *)((char *)v16 - 24);
      }

      while (v16 != v15);
    }

    a1[1] = v15;
    uint64_t v17 = *a1;
    if (*((char *)*a1 + 23) < 0)
    {
      uint64_t v27 = *((void *)v17 + 1);
      if (v27 != 5
        || (**(_DWORD **)v17 == 1836609396 ? (BOOL v28 = *(_BYTE *)(*(void *)v17 + 4LL) == 108) : (BOOL v28 = 0), !v28))
      {
        if (v27 == 8)
        {
          if (**(void **)v17 == 0x7972616E69626F74LL) {
            goto LABEL_74;
          }
          uint64_t v27 = *((void *)v17 + 1);
        }

        if (v27 != 14) {
          goto LABEL_67;
        }
        char v19 = *(__int128 **)v17;
        goto LABEL_50;
      }
    }

    else
    {
      int v18 = *((unsigned __int8 *)*a1 + 23);
      if (v18 != 5)
      {
        if (v18 != 8)
        {
          char v19 = *a1;
          if (v18 != 14) {
            goto LABEL_67;
          }
LABEL_50:
          uint64_t v29 = *(void *)v19;
          uint64_t v30 = *(void *)((char *)v19 + 6);
          if (v29 == 0x7972616E69626F74LL && v30 == 0x616D656863737972LL)
          {
            int v32 = 4;
            goto LABEL_75;
          }

          goto LABEL_67;
        }

        if (*(void *)v17 != 0x7972616E69626F74LL) {
          goto LABEL_67;
        }
LABEL_74:
        int v32 = 1;
        goto LABEL_75;
      }

      if (*(_DWORD *)v17 != 1836609396 || *((_BYTE *)v17 + 4) != 108)
      {
LABEL_67:
        if (sub_1000176F8(v17, "toyamlschema"))
        {
          int v32 = 3;
        }

        else if (sub_1000176F8(*a1, "tobinarypatternschema"))
        {
          int v32 = 6;
        }

        else
        {
          BOOL result = sub_1000176F8(*a1, "toyamlpatternschema");
          if (!result) {
            return result;
          }
          int v32 = 5;
        }

LABEL_75:
        *(_DWORD *)(a3 + 96) = v32;
        sub_100029188((uint64_t)&v68, (__int128 *)((char *)*a1 + 24), a1[1], (uint64_t)*a1);
        __int128 v36 = v35;
        int v37 = a1[1];
        if (v37 != v35)
        {
          do
          {
            int v37 = (__int128 *)((char *)v37 - 24);
          }

          while (v37 != v36);
        }

        a1[1] = v36;
        sub_1000021BC(&v68, "--preserve");
        *(_BYTE *)(a3 + 100) = siri::dialogengine::PopOption(a1, &v68);
        sub_1000021BC(&v68, "--optimize");
        *(_BYTE *)(a3 + 101) = siri::dialogengine::PopOption(a1, &v68);
        sub_1000021BC(&v68, "--debug");
        *(_BYTE *)(a3 + 102) = siri::dialogengine::PopOption(a1, &v68);
        sub_1000021BC(__p, "--templateDir");
        siri::dialogengine::PopStringOption(&v68, a1, __p);
        __int128 v38 = (void **)(a3 + 72);
        *(_OWORD *)__int128 v38 = *(_OWORD *)&v68.__r_.__value_.__l.__data_;
        *(void *)(a3 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v68.__r_.__value_.__l.__cap_;
        v68.__r_.__value_.__s.__size_ = 0;
        v68.__r_.__value_.__s.__data_[0] = 0;
        if (v67 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v39 = (uint64_t)*a1;
        std::string::size_type v40 = a1[1];
        if (*a1 == v40)
        {
          std::string::size_type v40 = *a1;
        }

        else
        {
          while (1)
          {
            uint64_t v41 = *(char *)(v39 + 23) >= 0 ? (_BYTE *)v39 : *(_BYTE **)v39;
            if (*v41 == 45) {
              break;
            }
            v39 += 24LL;
            if ((__int128 *)v39 == v40)
            {
              uint64_t v39 = (uint64_t)a1[1];
              goto LABEL_108;
            }
          }

          if ((__int128 *)v39 != v40)
          {
            uint64_t v42 = v39 + 24;
            if ((__int128 *)(v39 + 24) != v40)
            {
              do
              {
                else {
                  uint64_t v43 = *(_BYTE **)v42;
                }
                if (*v43 != 45)
                {
                  __int128 v44 = *(_OWORD *)v42;
                  *(void *)(v39 + 16) = *(void *)(v42 + 16);
                  *(_OWORD *)uint64_t v39 = v44;
                  v39 += 24LL;
                  *(_BYTE *)(v42 + 23) = 0;
                  *(_BYTE *)uint64_t v42 = 0;
                }

                v42 += 24LL;
              }

              while ((__int128 *)v42 != v40);
              std::string::size_type v40 = a1[1];
            }
          }
        }

LABEL_108:
        sub_10002B02C((uint64_t)a1, v39, v40);
        if (*a1 != a1[1])
        {
          std::string::operator=((std::string *)a3, (const std::string *)*a1);
          std::string::operator=((std::string *)(a3 + 24), (const std::string *)*a1);
          sub_100029188((uint64_t)&v68, (__int128 *)((char *)*a1 + 24), a1[1], (uint64_t)*a1);
          std::string::size_type v46 = v45;
          int v47 = a1[1];
          if (v47 != v45)
          {
            do
            {
              int v47 = (__int128 *)((char *)v47 - 24);
            }

            while (v47 != v46);
          }

          a1[1] = v46;
          if (*a1 != v46)
          {
            std::string::operator=((std::string *)(a3 + 24), (const std::string *)*a1);
            std::string::operator=((std::string *)(a3 + 48), (const std::string *)*a1);
          }

          return 1LL;
        }

        if (*(char *)(a3 + 95) < 0)
        {
          if (*(void *)(a3 + 80)) {
            return 1LL;
          }
        }

        else if (*(_BYTE *)(a3 + 95))
        {
          return 1LL;
        }

        memset(&v68, 0, sizeof(v68));
        uint64_t v48 = *(int *)(a3 + 96);
        else {
          uint64_t v49 = off_100079038[v48];
        }
        std::string::assign(&v68, v49);
        uint64_t v59 = sub_100002F60(&std::cout, (uint64_t)"Error: insufficient arguments specified for catutil ", 52LL);
        if ((v68.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          std::string v60 = &v68;
        }
        else {
          std::string v60 = (std::string *)v68.__r_.__value_.__r.__words[0];
        }
        if ((v68.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t size = v68.__r_.__value_.__s.__size_;
        }
        else {
          uint64_t size = v68.__r_.__value_.__l.__size_;
        }
        std::string::size_type v62 = sub_100002F60(v59, (uint64_t)v60, size);
        std::ios_base::getloc((const std::ios_base *)((char *)v62 + *(void *)(*v62 - 24LL)));
        std::string::size_type v63 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
        uint64_t v64 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v63->__vftable[2].~facet_0)(v63, 10LL);
        std::locale::~locale((std::locale *)__p);
        std::ostream::put(v62, v64);
        std::ostream::flush(v62);
        __int128 v58 = (void *)v68.__r_.__value_.__r.__words[0];
        goto LABEL_146;
      }
    }

    int v32 = 0;
    goto LABEL_75;
  }

LABEL_5:
  memset(&v65, 0, sizeof(v65));
  if (v6 <= 1) {
    goto LABEL_139;
  }
  std::string::operator=(&v65, (const std::string *)(v5 + 24));
  if (((char)v65.__r_.__value_.__s.__size_ & 0x80000000) == 0)
  {
    uint64_t v10 = &v65;
    int v11 = 0;
    int v12 = 0;
    int v13 = 0;
    switch(v65.__r_.__value_.__s.__size_)
    {
      case 5u:
        goto LABEL_19;
      case 6u:
      case 7u:
      case 9u:
      case 0xAu:
      case 0xBu:
      case 0xDu:
        goto LABEL_139;
      case 8u:
        goto LABEL_27;
      case 0xCu:
        goto LABEL_124;
      case 0xEu:
        goto LABEL_32;
      default:
        if (v65.__r_.__value_.__s.__size_ != 19) {
          goto LABEL_139;
        }
        goto LABEL_132;
    }
  }

  std::string::size_type v20 = v65.__r_.__value_.__l.__size_;
  if (v65.__r_.__value_.__l.__size_ != 5)
  {
LABEL_25:
    if (v20 == 8)
    {
      int v11 = 1;
      uint64_t v10 = (std::string *)v65.__r_.__value_.__r.__words[0];
LABEL_27:
      if (v10->__r_.__value_.__r.__words[0] == 0x7972616E69626F74LL)
      {
        sub_100038638(a2);
        sub_1000295F8((uint64_t)a1);
        goto LABEL_144;
      }

      if (!v11) {
        goto LABEL_139;
      }
      std::string::size_type v20 = v65.__r_.__value_.__l.__size_;
    }

    if (v20 == 14)
    {
      int v12 = 1;
      uint64_t v10 = (std::string *)v65.__r_.__value_.__r.__words[0];
LABEL_32:
      std::string::size_type v24 = v10->__r_.__value_.__r.__words[0];
      uint64_t v25 = *(std::string::size_type *)((char *)v10->__r_.__value_.__r.__words + 6);
      if (v24 == 0x7972616E69626F74LL && v25 == 0x616D656863737972LL)
      {
        sub_100038638(a2);
        sub_1000296A0((uint64_t)a1);
        goto LABEL_144;
      }

      if (!v12)
      {
        if (v65.__r_.__value_.__s.__size_ != 12) {
          goto LABEL_139;
        }
        int v13 = 0;
        uint64_t v10 = &v65;
        goto LABEL_124;
      }

      std::string::size_type v20 = v65.__r_.__value_.__l.__size_;
    }

    if (v20 != 12)
    {
LABEL_130:
      if (v20 == 19)
      {
        uint64_t v10 = (std::string *)v65.__r_.__value_.__r.__words[0];
LABEL_132:
        std::string::size_type v53 = v10->__r_.__value_.__r.__words[0];
        std::string::size_type v54 = v10->__r_.__value_.__l.__size_;
        uint64_t v55 = *(std::string::size_type *)((char *)&v10->__r_.__value_.__r.__words[1] + 3);
        BOOL v56 = v53 == 0x61706C6D61796F74LL && v54 == 0x6863736E72657474LL;
        if (v56 && v55 == 0x616D656863736E72LL)
        {
          sub_100038638(a2);
          sub_100029A90((uint64_t)a1);
          goto LABEL_144;
        }
      }

      goto LABEL_139;
    }

    int v13 = 1;
    uint64_t v10 = (std::string *)v65.__r_.__value_.__r.__words[0];
LABEL_124:
    std::string::size_type v50 = v10->__r_.__value_.__r.__words[0];
    int v51 = v10->__r_.__value_.__r.__words[1];
    if (v50 == 0x63736C6D61796F74LL && v51 == 1634559336)
    {
      sub_100038638(a2);
      sub_1000297F0((uint64_t)a1);
      goto LABEL_144;
    }

    if (v13)
    {
      std::string::size_type v20 = v65.__r_.__value_.__l.__size_;
      goto LABEL_130;
    }

    int v13 = v12 >> 3;
    unint64_t v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    int v18 = v16 >> 1;
    char v19 = &v9[-8 * v18];
    std::string::size_type v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }

    int v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  uint64_t v21 = a1[2];
  int v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  std::string::size_type v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&std::string::size_type v54 = operator new(0x1000uLL);
      sub_100055204(a1, &v54);
      return;
    }

    *(void *)&std::string::size_type v54 = operator new(0x1000uLL);
    sub_100055318((uint64_t)a1, &v54);
    __int128 v44 = (void *)a1[1];
    int v8 = (char *)a1[2];
    unint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        std::string::size_type v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_10004FA94((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      int v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      int v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        int v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        std::string::size_type v50 = 8 * (v49 >> 3);
        int v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)int v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    int v13 = v12 >> 3;
    unint64_t v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    int v18 = v16 >> 1;
    char v19 = &v9[-8 * v18];
    std::string::size_type v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }

    int v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  uint64_t v21 = a1[2];
  int v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  std::string::size_type v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&std::string::size_type v54 = operator new(0xFF0uLL);
      sub_100055204(a1, &v54);
      return;
    }

    *(void *)&std::string::size_type v54 = operator new(0xFF0uLL);
    sub_100055318((uint64_t)a1, &v54);
    __int128 v44 = (void *)a1[1];
    int v8 = (char *)a1[2];
    unint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        std::string::size_type v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_10004FA94((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      int v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      int v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        int v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        std::string::size_type v50 = 8 * (v49 >> 3);
        int v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)int v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    int v13 = v12 >> 3;
    unint64_t v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    int v18 = v16 >> 1;
    char v19 = &v9[-8 * v18];
    std::string::size_type v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }

    int v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  uint64_t v21 = a1[2];
  int v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  std::string::size_type v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&std::string::size_type v54 = operator new(0x1000uLL);
      sub_100055204(a1, &v54);
      return;
    }

    *(void *)&std::string::size_type v54 = operator new(0x1000uLL);
    sub_100055318((uint64_t)a1, &v54);
    __int128 v44 = (void *)a1[1];
    int v8 = (char *)a1[2];
    unint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        std::string::size_type v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_10004FA94((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      int v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      int v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        int v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        std::string::size_type v50 = 8 * (v49 >> 3);
        int v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)int v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    int v13 = v12 >> 3;
    unint64_t v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    int v18 = v16 >> 1;
    char v19 = &v9[-8 * v18];
    std::string::size_type v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }

    int v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  uint64_t v21 = a1[2];
  int v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  std::string::size_type v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&std::string::size_type v54 = operator new(0xFF0uLL);
      sub_100055204(a1, &v54);
      return;
    }

    *(void *)&std::string::size_type v54 = operator new(0xFF0uLL);
    sub_100055318((uint64_t)a1, &v54);
    __int128 v44 = (void *)a1[1];
    int v8 = (char *)a1[2];
    unint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        std::string::size_type v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_10004FA94((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      int v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      int v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        int v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        std::string::size_type v50 = 8 * (v49 >> 3);
        int v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)int v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    int v13 = v12 >> 3;
    unint64_t v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    int v18 = v16 >> 1;
    char v19 = &v9[-8 * v18];
    std::string::size_type v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }

    int v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  uint64_t v21 = a1[2];
  int v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  std::string::size_type v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&std::string::size_type v54 = operator new(0x1000uLL);
      sub_100055204(a1, &v54);
      return;
    }

    *(void *)&std::string::size_type v54 = operator new(0x1000uLL);
    sub_100055318((uint64_t)a1, &v54);
    __int128 v44 = (void *)a1[1];
    int v8 = (char *)a1[2];
    unint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        std::string::size_type v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_10004FA94((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      int v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      int v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        int v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        std::string::size_type v50 = 8 * (v49 >> 3);
        int v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)int v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    int v13 = v12 >> 3;
    unint64_t v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    int v18 = v16 >> 1;
    char v19 = &v9[-8 * v18];
    std::string::size_type v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }

    int v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  uint64_t v21 = a1[2];
  int v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  std::string::size_type v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&std::string::size_type v54 = operator new(0x1000uLL);
      sub_100055204(a1, &v54);
      return;
    }

    *(void *)&std::string::size_type v54 = operator new(0x1000uLL);
    sub_100055318((uint64_t)a1, &v54);
    __int128 v44 = (void *)a1[1];
    int v8 = (char *)a1[2];
    unint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        std::string::size_type v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_10004FA94((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      int v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      int v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        int v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        std::string::size_type v50 = 8 * (v49 >> 3);
        int v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)int v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

LABEL_139:
    if (sub_1000176F8(&v65, "tobinarypatternschema"))
    {
      sub_100038638(a2);
      sub_100029940((uint64_t)a1);
      goto LABEL_144;
    }

    std::operator+<char>(&v68, "Unexpected catutil saveas command: ", &v65);
    siri::dialogengine::Log::Error(&v68);
    goto LABEL_142;
  }

  uint64_t v10 = (std::string *)v65.__r_.__value_.__r.__words[0];
LABEL_19:
  int data = (int)v10->__r_.__value_.__l.__data_;
  int v22 = v10->__r_.__value_.__s.__data_[4];
  if (data != 1836609396 || v22 != 108)
  {
    if ((v65.__r_.__value_.__s.__size_ & 0x80) == 0) {
      goto LABEL_139;
    }
    std::string::size_type v20 = v65.__r_.__value_.__l.__size_;
    goto LABEL_25;
  }

  sub_100038638(a2);
  sub_1000021BC( &v68,  "\n <EXECUTABLE> <COMMAND> [--preserve] [--templateDir <dir>] [--debug]\n <EXECUTABLE> <COMMAND> [--preserve] <path-to-cat-folder> [<output-cat-folder>] [--debug]\n \n Convert a CAT file to XML format, or all CAT files under a Templates directory.\n If the CAT file is already XML it will be re-written in a canonical layout.\n May be called with a --templateDir option, or two different CAT paths, or a\n single CAT path to convert in place.\n Converting Visual CAT binary to XML is not yet supported (rdar://74030512)\n \n --templateDir        A Templates directory to walk recursively to find all CAT files\n --debug              Output debug log messages\n --preserve           Keep existing binary/XML files if present; otherwise they are deleted\n"
    "      <path-to-cat-folder> The path to a .cat directory\n"
    "      <output-cat-folder>  An optional path to a different .cat directory for the converted files\n");
  sub_1000021BC(__p, "toxml");
  sub_1000388C0((uint64_t)a1, (uint64_t)__p, (uint64_t)&v68);
  if (v67 < 0) {
    operator delete(__p[0]);
  }
LABEL_142:
LABEL_144:
  if ((char)v65.__r_.__value_.__s.__size_ < 0)
  {
    __int128 v58 = (void *)v65.__r_.__value_.__r.__words[0];
LABEL_146:
    operator delete(v58);
  }

  return 0LL;
}

void sub_10002AF94( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10002B02C(uint64_t a1, uint64_t a2, __int128 *a3)
{
  if ((__int128 *)a2 != a3)
  {
    sub_100029188((uint64_t)&v9, a3, *(__int128 **)(a1 + 8), a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        v7 -= 24LL;
      }

      while (v7 != v6);
    }

    *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v6;
  }

  return a2;
}

uint64_t sub_10002B0B0(__int128 **a1, uint64_t a2)
{
  LOBYTE(a2) = sub_10002A72C(v33, a2, (uint64_t)v34);
  v32.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
  sub_1000027F4((void ***)&v32);
  if ((a2 & 1) == 0)
  {
    uint64_t v10 = 0LL;
    goto LABEL_65;
  }

  if (BYTE2(v42[1]))
  {
    siri::dialogengine::Log::SetLogDebugMessages((siri::dialogengine::Log *)1, v4);
    siri::dialogengine::Log::SetOutputToStdout((siri::dialogengine::Log *)1, v5);
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Activate debug mode", v6);
  }

  unint64_t v7 = v41;
  if ((v41 & 0x80u) != 0) {
    unint64_t v7 = (unint64_t)v40[1];
  }
  if (v7)
  {
    switch(v42[0])
    {
      case 3:
        sub_1000021BC(&__p, "schema");
        siri::dialogengine::JoinPath(&v32, v40, &__p);
        if (v31 < 0) {
          operator delete(__p);
        }
        siri::dialogengine::ListDirRecursively(&__p, &v32);
        int v8 = (char *)__p;
        char v9 = v30;
        while (v8 != v9)
        {
          if (siri::dialogengine::HasSchemaExtension(v8, 4LL))
          {
            siri::dialogengine::JoinPath(&v28, &v32, v8);
            sub_10002B8F8((__int128 *)v34, &v28);
          }

          v8 += 24;
        }

        goto LABEL_61;
      case 4:
        sub_1000021BC(&__p, "schema");
        siri::dialogengine::JoinPath(&v32, v40, &__p);
        if (v31 < 0) {
          operator delete(__p);
        }
        siri::dialogengine::ListDirRecursively(&__p, &v32);
        uint64_t v17 = (char *)__p;
        int v18 = v30;
        while (v17 != v18)
        {
          if (siri::dialogengine::HasSchemaExtension(v17, 3LL))
          {
            siri::dialogengine::JoinPath(&v28, &v32, v17);
            sub_10002B8F8((__int128 *)v34, &v28);
          }

          v17 += 24;
        }

        goto LABEL_61;
      case 5:
        sub_1000021BC(&__p, "schema");
        siri::dialogengine::JoinPath(&v32, v40, &__p);
        if (v31 < 0) {
          operator delete(__p);
        }
        siri::dialogengine::ListDirRecursively(&__p, &v32);
        char v19 = (char *)__p;
        std::string::size_type v20 = v30;
        while (v19 != v20)
        {
          if (siri::dialogengine::HasPatternSchemaExtension(v19, 6LL))
          {
            siri::dialogengine::JoinPath(&v28, &v32, v19);
            sub_10002B8F8((__int128 *)v34, &v28);
          }

          v19 += 24;
        }

        goto LABEL_61;
      case 6:
        sub_1000021BC(&__p, "schema");
        siri::dialogengine::JoinPath(&v32, v40, &__p);
        if (v31 < 0) {
          operator delete(__p);
        }
        siri::dialogengine::ListDirRecursively(&__p, &v32);
        uint64_t v21 = (char *)__p;
        int v22 = v30;
        while (v21 != v22)
        {
          if (siri::dialogengine::HasPatternSchemaExtension(v21, 5LL))
          {
            siri::dialogengine::JoinPath(&v28, &v32, v21);
            sub_10002B8F8((__int128 *)v34, &v28);
          }

          v21 += 24;
        }

LABEL_61:
        v28.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        sub_1000027F4((void ***)&v28);
        goto LABEL_62;
      default:
        sub_1000021BC(&__p, "dialog");
        siri::dialogengine::JoinPath(&v32, v40, &__p);
        if (v31 < 0) {
          operator delete(__p);
        }
        siri::dialogengine::ListDirRecursively(&__p, &v32);
        int v11 = (char *)__p;
        int v12 = v30;
        if (__p == v30) {
          goto LABEL_29;
        }
        break;
    }

    while (1)
    {
      sub_1000021BC(&v28, "cat");
      int HasExtension = siri::dialogengine::HasExtension(v11, &v28);
      int v14 = HasExtension;
      if ((char)v28.__r_.__value_.__s.__size_ < 0)
      {
        operator delete(v28.__r_.__value_.__l.__data_);
        if (v14)
        {
LABEL_26:
          siri::dialogengine::JoinPath(&v28, &v32, v11);
          sub_10002B8F8((__int128 *)v34, &v28);
        }
      }

      else if (HasExtension)
      {
        goto LABEL_26;
      }

      v11 += 24;
      if (v11 == v12)
      {
LABEL_29:
        v28.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        sub_1000027F4((void ***)&v28);
        sub_1000021BC(&v28, "pattern");
        siri::dialogengine::JoinPath(&__p, v40, &v28);
        siri::dialogengine::ListDirRecursively(&v28, &__p);
        std::string::size_type size = v28.__r_.__value_.__l.__size_;
        for (std::string::size_type i = v28.__r_.__value_.__r.__words[0]; i != size; i += 24LL)
        {
          if (siri::dialogengine::HasPatternExtension(i, 2LL))
          {
            siri::dialogengine::JoinPath(&v27, &__p, i);
            sub_10002B8F8((__int128 *)v34, &v27);
          }
        }

        v27.__r_.__value_.__r.__words[0] = (std::string::size_type)&v28;
        sub_1000027F4((void ***)&v27);
        sub_1000021BC(&v27, "visual");
        siri::dialogengine::JoinPath(&v28, v40, &v27);
        siri::dialogengine::ListDirRecursively(&v27, &v28);
        std::string::size_type v25 = v27.__r_.__value_.__l.__size_;
        for (std::string::size_type j = v27.__r_.__value_.__r.__words[0]; j != v25; j += 24LL)
        {
          if (siri::dialogengine::HasVisualCATExtension(j, 2LL))
          {
            siri::dialogengine::JoinPath(&v26, &v28, j);
            sub_10002B8F8((__int128 *)v34, &v26);
          }
        }

        v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27;
        sub_1000027F4((void ***)&v26);
        if (v31 < 0) {
          operator delete(__p);
        }
LABEL_62:
        uint64_t v10 = 1LL;
        goto LABEL_65;
      }
    }
  }

  sub_1000021BC(&v32, (char *)&unk_10006A022);
  uint64_t v10 = sub_10002B8F8((__int128 *)v34, &v32);
LABEL_65:
  if (v39 < 0) {
    operator delete(v38);
  }
  if (v37 < 0) {
    operator delete(v36);
  }
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  return v10;
}

void sub_10002B6F0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *__p, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33, void *a34, uint64_t a35, int a36, __int16 a37, char a38, char a39, uint64_t a40, uint64_t a41, uint64_t a42, void *a43, uint64_t a44, int a45, __int16 a46, char a47, char a48, void *a49, uint64_t a50,int a51,__int16 a52,char a53,char a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  sub_10002D374((uint64_t)&a43);
  _Unwind_Resume(a1);
}

uint64_t sub_10002B8F8(__int128 *a1, const std::string *a2)
{
  std::string::size_type size = a2->__r_.__value_.__s.__size_;
  if ((size & 0x80u) != 0LL) {
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  if (size)
  {
    std::string::operator=(&v166, a2);
    std::string::operator=(&v167, a2);
  }

  else {
    std::string v165 = v166;
  }
  if (siri::dialogengine::HasPatternExtension(&v165, 2LL))
  {
    sub_10002A61C((uint64_t)&v166);
    BOOL v4 = sub_100002F60(&std::cout, (uint64_t)"Converting ", 11LL);
    if ((v166.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      BOOL v5 = &v166;
    }
    else {
      BOOL v5 = (std::string *)v166.__r_.__value_.__r.__words[0];
    }
    if ((v166.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v6 = v166.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t v6 = v166.__r_.__value_.__l.__size_;
    }
    unint64_t v7 = sub_100002F60(v4, (uint64_t)v5, v6);
    int v8 = sub_100002F60(v7, (uint64_t)" to ", 4LL);
    if (v171) {
      char v9 = "BINARY";
    }
    else {
      char v9 = "XML";
    }
    if (v171) {
      uint64_t v10 = 6LL;
    }
    else {
      uint64_t v10 = 3LL;
    }
    int v11 = sub_100002F60(v8, (uint64_t)v9, v10);
    if (v172) {
      int v12 = " (preserve existing)";
    }
    else {
      int v12 = " (delete existing)";
    }
    if (v172) {
      uint64_t v13 = 20LL;
    }
    else {
      uint64_t v13 = 18LL;
    }
    int v14 = sub_100002F60(v11, (uint64_t)v12, v13);
    std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(*v14 - 24LL)));
    uint64_t v15 = std::locale::use_facet(&v183, &std::ctype<char>::id);
    uint64_t v16 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10LL);
    std::locale::~locale(&v183);
    std::ostream::put(v14, v16);
    std::ostream::flush(v14);
    siri::dialogengine::Context::Context((siri::dialogengine::Context *)&v183);
    siri::dialogengine::PatternFile::LoadFromPath(&__str, &v183, &v166, 0LL);
    if (!__str.__r_.__value_.__r.__words[0])
    {
      uint64_t v49 = sub_100002F60(&std::cout, (uint64_t)"Error: unable to load Pattern file: ", 36LL);
      if ((v166.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v50 = &v166;
      }
      else {
        std::string::size_type v50 = (std::string *)v166.__r_.__value_.__r.__words[0];
      }
      if ((v166.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v51 = v166.__r_.__value_.__s.__size_;
      }
      else {
        uint64_t v51 = v166.__r_.__value_.__l.__size_;
      }
      uint64_t v52 = sub_100002F60(v49, (uint64_t)v50, v51);
      std::ios_base::getloc((const std::ios_base *)((char *)v52 + *(void *)(*v52 - 24LL)));
      std::string::size_type v53 = std::locale::use_facet(__dst, &std::ctype<char>::id);
      uint64_t v54 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v53->__vftable[2].~facet_0)(v53, 10LL);
      std::locale::~locale(__dst);
      std::ostream::put(v52, v54);
      std::ostream::flush(v52);
      uint64_t v55 = 0LL;
      goto LABEL_143;
    }

    uint64_t v17 = &v167;
    unsigned __int8 v18 = v167.__r_.__value_.__s.__size_;
    if ((v167.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v19 = v167.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v19 = v167.__r_.__value_.__l.__size_;
    }
    uint64_t v20 = 24LL;
    if (!v19)
    {
      uint64_t v20 = 0LL;
      uint64_t v17 = &v166;
      unsigned __int8 v18 = v166.__r_.__value_.__s.__size_;
    }

    if ((v18 & 0x80) != 0)
    {
      if (v19) {
        std::string::size_type v76 = v167.__r_.__value_.__l.__size_;
      }
      else {
        std::string::size_type v76 = v166.__r_.__value_.__l.__size_;
      }
      sub_10000231C(__dst, *(void **)((char *)&v166.__r_.__value_.__l.__data_ + v20), v76);
    }

    else
    {
      *(_OWORD *)&__dst[0].__locale_ = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      int64_t cap = v17->__r_.__value_.__l.__cap_;
    }

    siri::dialogengine::ChangePatternExtension(&__p, __dst, v171);
    if (SHIBYTE(cap) < 0) {
      operator delete(__dst[0].__locale_);
    }
    *(_OWORD *)&__dst[0].__locale_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    int64_t cap = __p.__r_.__value_.__l.__cap_;
    *(_OWORD *)&v177.__r_.__value_.__l.__data_ = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
    if (__str.__r_.__value_.__l.__size_)
    {
      std::string::size_type v77 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
      do
        unint64_t v78 = __ldxr(v77);
      while (__stxr(v78 + 1, v77));
    }

    uint64_t v79 = siri::dialogengine::PatternFile::Save(&v177, __dst);
    uint64_t v55 = v79;
    int v80 = (std::__shared_weak_count *)v177.__r_.__value_.__l.__size_;
    if (!v177.__r_.__value_.__l.__size_) {
      goto LABEL_129;
    }
    std::string::size_type v81 = (unint64_t *)(v177.__r_.__value_.__l.__size_ + 8);
    do
      unint64_t v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
      if ((v55 & 1) != 0) {
        goto LABEL_130;
      }
    }

    else
    {
LABEL_129:
      if ((v79 & 1) != 0)
      {
LABEL_130:
        if (!v172)
        {
          siri::dialogengine::ChangePatternExtension(&__p, __dst, v171 == 0);
          siri::dialogengine::DeleteFile(&__p);
        }

        goto LABEL_141;
      }
    }

    size_t v83 = sub_100002F60(&std::cout, (uint64_t)"Error: failed to save Pattern file: ", 36LL);
    if (cap >= 0) {
      locale = __dst;
    }
    else {
      locale = __dst[0].__locale_;
    }
    if (cap >= 0) {
      uint64_t v85 = HIBYTE(cap);
    }
    else {
      uint64_t v85 = (uint64_t)__dst[1].__locale_;
    }
    std::string v86 = sub_100002F60(v83, (uint64_t)locale, v85);
    std::ios_base::getloc((const std::ios_base *)((char *)v86 + *(void *)(*v86 - 24LL)));
    std::string v87 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
    uint64_t v88 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v87->__vftable[2].~facet_0)(v87, 10LL);
    std::locale::~locale((std::locale *)&__p);
    std::ostream::put(v86, v88);
    std::ostream::flush(v86);
LABEL_141:
    if (SHIBYTE(cap) < 0) {
      operator delete(__dst[0].__locale_);
    }
LABEL_143:
    uint64_t v89 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
    if (__str.__r_.__value_.__l.__size_)
    {
      uint64_t v90 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
      do
        unint64_t v91 = __ldaxr(v90);
      while (__stlxr(v91 - 1, v90));
      goto LABEL_146;
    }

LABEL_318:
    siri::dialogengine::Context::~Context((siri::dialogengine::Context *)&v183);
    goto LABEL_319;
  }

  if (!siri::dialogengine::HasVisualCATExtension(&v165, 2LL))
  {
    if (siri::dialogengine::HasSchemaExtension(&v165, 2LL))
    {
      uint64_t v34 = sub_100002F60(&std::cout, (uint64_t)"Converting ", 11LL);
      if ((v166.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        char v35 = &v166;
      }
      else {
        char v35 = (std::string *)v166.__r_.__value_.__r.__words[0];
      }
      if ((v166.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v36 = v166.__r_.__value_.__s.__size_;
      }
      else {
        uint64_t v36 = v166.__r_.__value_.__l.__size_;
      }
      char v37 = sub_100002F60(v34, (uint64_t)v35, v36);
      __int128 v38 = sub_100002F60(v37, (uint64_t)" to ", 4LL);
      if (v171 == 3) {
        char v39 = "YAML";
      }
      else {
        char v39 = "BINARY";
      }
      if (v171 == 3) {
        uint64_t v40 = 4LL;
      }
      else {
        uint64_t v40 = 6LL;
      }
      unsigned __int8 v41 = sub_100002F60(v38, (uint64_t)v39, v40);
      if (v172) {
        uint64_t v42 = " (preserve existing)";
      }
      else {
        uint64_t v42 = " (delete existing)";
      }
      if (v172) {
        uint64_t v43 = 20LL;
      }
      else {
        uint64_t v43 = 18LL;
      }
      __int128 v44 = sub_100002F60(v41, (uint64_t)v42, v43);
      std::ios_base::getloc((const std::ios_base *)((char *)v44 + *(void *)(*v44 - 24LL)));
      unint64_t v45 = std::locale::use_facet(&v183, &std::ctype<char>::id);
      uint64_t v46 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v45->__vftable[2].~facet_0)(v45, 10LL);
      std::locale::~locale(&v183);
      std::ostream::put(v44, v46);
      std::ostream::flush(v44);
      siri::dialogengine::Context::Context((siri::dialogengine::Context *)&v183);
      unsigned __int128 v182 = 0uLL;
      sub_1000021BC(__dst, "catschema.bin");
      int v47 = siri::dialogengine::StringEndsWith(&v166, __dst);
      int v48 = v47;
      if (SHIBYTE(cap) < 0)
      {
        operator delete(__dst[0].__locale_);
        if (v48) {
          goto LABEL_78;
        }
      }

      else if (v47)
      {
LABEL_78:
        sub_1000021BC(__dst, (char *)&unk_10006A022);
        sub_1000021BC(&__p, (char *)&unk_10006A022);
        siri::dialogengine::ParseCATSchemaBinary(&__str, &v183, &v166, __dst, &__p);
        goto LABEL_169;
      }

      sub_1000021BC(__dst, (char *)&unk_10006A022);
      sub_1000021BC(&__p, (char *)&unk_10006A022);
      siri::dialogengine::ParseCATSchemaYAML(&__str, &v183, &v166, __dst, &__p);
LABEL_169:
      uint64_t v89 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
      std::string::size_type v97 = __str.__r_.__value_.__r.__words[0];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = 0uLL;
      unsigned __int128 v182 = __PAIR128__((unint64_t)v89, v97);
      if (SHIBYTE(cap) < 0) {
        operator delete(__dst[0].__locale_);
      }
      if (!v97)
      {
        std::string::size_type v102 = sub_100002F60(&std::cout, (uint64_t)"Error: unable to load CAT schema file: ", 39LL);
        if ((v166.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          __int128 v103 = &v166;
        }
        else {
          __int128 v103 = (std::string *)v166.__r_.__value_.__r.__words[0];
        }
        if ((v166.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v104 = v166.__r_.__value_.__s.__size_;
        }
        else {
          uint64_t v104 = v166.__r_.__value_.__l.__size_;
        }
        std::string::size_type v105 = sub_100002F60(v102, (uint64_t)v103, v104);
        std::ios_base::getloc((const std::ios_base *)((char *)v105 + *(void *)(*v105 - 24LL)));
        __int128 v106 = std::locale::use_facet(__dst, &std::ctype<char>::id);
        uint64_t v107 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v106->__vftable[2].~facet_0)(v106, 10LL);
        std::locale::~locale(__dst);
        std::ostream::put(v105, v107);
        std::ostream::flush(v105);
        uint64_t v55 = 0LL;
LABEL_314:
        if (!v89) {
          goto LABEL_318;
        }
        p_shared_owners = (unint64_t *)&v89->__shared_owners_;
        do
          unint64_t v91 = __ldaxr(p_shared_owners);
        while (__stlxr(v91 - 1, p_shared_owners));
        goto LABEL_146;
      }

      unint64_t v98 = &v167;
      unsigned __int8 v99 = v167.__r_.__value_.__s.__size_;
      if ((v167.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v100 = v167.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v100 = v167.__r_.__value_.__l.__size_;
      }
      uint64_t v101 = 24LL;
      if (!v100)
      {
        uint64_t v101 = 0LL;
        unint64_t v98 = &v166;
        unsigned __int8 v99 = v166.__r_.__value_.__s.__size_;
      }

      if ((v99 & 0x80) != 0)
      {
        if (v100) {
          std::string::size_type v113 = v167.__r_.__value_.__l.__size_;
        }
        else {
          std::string::size_type v113 = v166.__r_.__value_.__l.__size_;
        }
        sub_10000231C(__dst, *(void **)((char *)&v166.__r_.__value_.__l.__data_ + v101), v113);
      }

      else
      {
        *(_OWORD *)&__dst[0].__locale_ = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
        int64_t cap = v98->__r_.__value_.__l.__cap_;
      }

      siri::dialogengine::ChangeSchemaExtension(&__p, __dst, v171);
      if (SHIBYTE(cap) < 0) {
        operator delete(__dst[0].__locale_);
      }
      *(_OWORD *)&__dst[0].__locale_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      int64_t cap = __p.__r_.__value_.__l.__cap_;
      sub_1000021BC(&__p, "catschema.bin");
      int v114 = siri::dialogengine::StringEndsWith(__dst, &__p);
      if (v114)
      {
        std::string::size_type v179 = v97;
        std::string v180 = v89;
        if (v89)
        {
          uint64_t v115 = (unint64_t *)&v89->__shared_owners_;
          do
            unint64_t v116 = __ldxr(v115);
          while (__stxr(v116 + 1, v115));
        }

        char v117 = siri::dialogengine::WriteCATSchemaBinary(&v179, __dst, v173);
        std::string::size_type v118 = v180;
        if (!v180) {
          goto LABEL_228;
        }
        int v119 = (unint64_t *)&v180->__shared_owners_;
        do
          unint64_t v120 = __ldaxr(v119);
        while (__stlxr(v120 - 1, v119));
      }

      else
      {
        __str.__r_.__value_.__r.__words[0] = v97;
        __str.__r_.__value_.__l.__size_ = (std::string::size_type)v89;
        if (v89)
        {
          __int16 v121 = (unint64_t *)&v89->__shared_owners_;
          do
            unint64_t v122 = __ldxr(v121);
          while (__stxr(v122 + 1, v121));
        }

        char v117 = siri::dialogengine::WriteCATSchemaYAML(&__str, __dst);
        std::string::size_type v118 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
        if (!__str.__r_.__value_.__l.__size_) {
          goto LABEL_228;
        }
        __int128 v123 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
        do
          unint64_t v120 = __ldaxr(v123);
        while (__stlxr(v120 - 1, v123));
      }

      if (!v120)
      {
        ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
        std::__shared_weak_count::__release_weak(v118);
      }

LABEL_228:
      if ((v117 & 1) != 0)
      {
        if (!v172)
        {
          uint64_t v124 = v171 == 3 ? 4LL : 3LL;
          siri::dialogengine::ChangeSchemaExtension(&__p, __dst, v124);
          siri::dialogengine::DeleteFile(&__p);
        }

        uint64_t v55 = 1LL;
      }

      else
      {
        int v157 = sub_100002F60(&std::cout, (uint64_t)"Error: failed to save CAT schema file: ", 39LL);
        if (cap >= 0) {
          int v158 = __dst;
        }
        else {
          int v158 = __dst[0].__locale_;
        }
        if (cap >= 0) {
          uint64_t v159 = HIBYTE(cap);
        }
        else {
          uint64_t v159 = (uint64_t)__dst[1].__locale_;
        }
        __int128 v160 = sub_100002F60(v157, (uint64_t)v158, v159);
        std::ios_base::getloc((const std::ios_base *)((char *)v160 + *(void *)(*v160 - 24LL)));
        int v161 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
        uint64_t v162 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v161->__vftable[2].~facet_0)(v161, 10LL);
        std::locale::~locale((std::locale *)&__p);
        std::ostream::put(v160, v162);
        std::ostream::flush(v160);
        uint64_t v55 = 0LL;
      }

      if (SHIBYTE(cap) < 0) {
        operator delete(__dst[0].__locale_);
      }
      uint64_t v89 = (std::__shared_weak_count *)*((void *)&v182 + 1);
      goto LABEL_314;
    }

    if (!siri::dialogengine::HasPatternSchemaExtension(&v165, 2LL))
    {
      uint64_t v55 = sub_100029BE0((uint64_t)&v166);
      goto LABEL_319;
    }

    std::string::size_type v62 = sub_100002F60(&std::cout, (uint64_t)"Converting ", 11LL);
    if ((v166.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v63 = &v166;
    }
    else {
      std::string::size_type v63 = (std::string *)v166.__r_.__value_.__r.__words[0];
    }
    if ((v166.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v64 = v166.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t v64 = v166.__r_.__value_.__l.__size_;
    }
    std::string v65 = sub_100002F60(v62, (uint64_t)v63, v64);
    char v66 = sub_100002F60(v65, (uint64_t)" to ", 4LL);
    if (v171 == 5) {
      char v67 = "YAML";
    }
    else {
      char v67 = "BINARY";
    }
    if (v171 == 5) {
      uint64_t v68 = 4LL;
    }
    else {
      uint64_t v68 = 6LL;
    }
    std::locale v69 = sub_100002F60(v66, (uint64_t)v67, v68);
    if (v172) {
      std::string::size_type v70 = " (preserve existing)";
    }
    else {
      std::string::size_type v70 = " (delete existing)";
    }
    if (v172) {
      uint64_t v71 = 20LL;
    }
    else {
      uint64_t v71 = 18LL;
    }
    size_t v72 = sub_100002F60(v69, (uint64_t)v70, v71);
    std::ios_base::getloc((const std::ios_base *)((char *)v72 + *(void *)(*v72 - 24LL)));
    uint64_t v73 = std::locale::use_facet(&v183, &std::ctype<char>::id);
    uint64_t v74 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v73->__vftable[2].~facet_0)(v73, 10LL);
    std::locale::~locale(&v183);
    std::ostream::put(v72, v74);
    std::ostream::flush(v72);
    siri::dialogengine::Context::Context((siri::dialogengine::Context *)&v183);
    unsigned __int128 v182 = 0uLL;
    sub_1000021BC(__dst, "patternschema.bin");
    int v75 = siri::dialogengine::StringEndsWith(&v166, __dst);
    if (SHIBYTE(cap) < 0) {
      operator delete(__dst[0].__locale_);
    }
    sub_1000021BC(__dst, (char *)&unk_10006A022);
    sub_1000021BC(&__p, (char *)&unk_10006A022);
    if (v75) {
      siri::dialogengine::ParsePatternSchemaBinary(&__str, &v183, &v166, __dst, &__p);
    }
    else {
      siri::dialogengine::ParsePatternSchemaYAML(&__str, &v183, &v166, __dst, &__p);
    }
    uint64_t v89 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
    std::string::size_type v108 = __str.__r_.__value_.__r.__words[0];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = 0uLL;
    unsigned __int128 v182 = __PAIR128__((unint64_t)v89, v108);
    if (SHIBYTE(cap) < 0) {
      operator delete(__dst[0].__locale_);
    }
    if (!v108)
    {
      __int128 v128 = sub_100002F60(&std::cout, (uint64_t)"Error: unable to load pattern schema file: ", 43LL);
      if ((v166.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        unint64_t v129 = &v166;
      }
      else {
        unint64_t v129 = (std::string *)v166.__r_.__value_.__r.__words[0];
      }
      if ((v166.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v130 = v166.__r_.__value_.__s.__size_;
      }
      else {
        uint64_t v130 = v166.__r_.__value_.__l.__size_;
      }
      unsigned __int8 v131 = sub_100002F60(v128, (uint64_t)v129, v130);
      std::ios_base::getloc((const std::ios_base *)((char *)v131 + *(void *)(*v131 - 24LL)));
      std::string::size_type v132 = std::locale::use_facet(__dst, &std::ctype<char>::id);
      uint64_t v133 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v132->__vftable[2].~facet_0)(v132, 10LL);
      std::locale::~locale(__dst);
      std::ostream::put(v131, v133);
      std::ostream::flush(v131);
      uint64_t v55 = 0LL;
LABEL_300:
      if (!v89) {
        goto LABEL_318;
      }
      int v156 = (unint64_t *)&v89->__shared_owners_;
      do
        unint64_t v91 = __ldaxr(v156);
      while (__stlxr(v91 - 1, v156));
LABEL_146:
      if (!v91)
      {
        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
        std::__shared_weak_count::__release_weak(v89);
      }

      goto LABEL_318;
    }

    __int128 v109 = &v167;
    unsigned __int8 v110 = v167.__r_.__value_.__s.__size_;
    if ((v167.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v111 = v167.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v111 = v167.__r_.__value_.__l.__size_;
    }
    uint64_t v112 = 24LL;
    if (!v111)
    {
      uint64_t v112 = 0LL;
      __int128 v109 = &v166;
      unsigned __int8 v110 = v166.__r_.__value_.__s.__size_;
    }

    if ((v110 & 0x80) != 0)
    {
      if (v111) {
        std::string::size_type v138 = v167.__r_.__value_.__l.__size_;
      }
      else {
        std::string::size_type v138 = v166.__r_.__value_.__l.__size_;
      }
      sub_10000231C(__dst, *(void **)((char *)&v166.__r_.__value_.__l.__data_ + v112), v138);
    }

    else
    {
      *(_OWORD *)&__dst[0].__locale_ = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
      int64_t cap = v109->__r_.__value_.__l.__cap_;
    }

    siri::dialogengine::ChangePatternSchemaExtension(&__p, __dst, v171);
    if (SHIBYTE(cap) < 0) {
      operator delete(__dst[0].__locale_);
    }
    *(_OWORD *)&__dst[0].__locale_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    int64_t cap = __p.__r_.__value_.__l.__cap_;
    sub_1000021BC(&__p, "patternschema.bin");
    int v139 = siri::dialogengine::StringEndsWith(__dst, &__p);
    if (v139)
    {
      std::string::size_type v179 = v108;
      std::string v180 = v89;
      if (v89)
      {
        __int128 v140 = (unint64_t *)&v89->__shared_owners_;
        do
          unint64_t v141 = __ldxr(v140);
        while (__stxr(v141 + 1, v140));
      }

      char v142 = siri::dialogengine::WritePatternSchemaBinary(&v179, __dst, v173);
      std::string v143 = v180;
      if (!v180) {
        goto LABEL_282;
      }
      std::string::size_type v144 = (unint64_t *)&v180->__shared_owners_;
      do
        unint64_t v145 = __ldaxr(v144);
      while (__stlxr(v145 - 1, v144));
    }

    else
    {
      __str.__r_.__value_.__r.__words[0] = v108;
      __str.__r_.__value_.__l.__size_ = (std::string::size_type)v89;
      if (v89)
      {
        __int128 v146 = (unint64_t *)&v89->__shared_owners_;
        do
          unint64_t v147 = __ldxr(v146);
        while (__stxr(v147 + 1, v146));
      }

      char v142 = siri::dialogengine::WritePatternSchemaYAML(&__str, __dst);
      std::string v143 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
      if (!__str.__r_.__value_.__l.__size_) {
        goto LABEL_282;
      }
      int v148 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
      do
        unint64_t v145 = __ldaxr(v148);
      while (__stlxr(v145 - 1, v148));
    }

    if (!v145)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }

LABEL_282:
    if ((v142 & 1) != 0)
    {
      if (!v172)
      {
        uint64_t v149 = v171 == 5 ? 6LL : 5LL;
        siri::dialogengine::ChangePatternSchemaExtension(&__p, __dst, v149);
        siri::dialogengine::DeleteFile(&__p);
      }

      uint64_t v55 = 1LL;
    }

    else
    {
      int v150 = sub_100002F60(&std::cout, (uint64_t)"Error: failed to save pattern schema file: ", 43LL);
      if (cap >= 0) {
        int v151 = __dst;
      }
      else {
        int v151 = __dst[0].__locale_;
      }
      if (cap >= 0) {
        uint64_t v152 = HIBYTE(cap);
      }
      else {
        uint64_t v152 = (uint64_t)__dst[1].__locale_;
      }
      int v153 = sub_100002F60(v150, (uint64_t)v151, v152);
      std::ios_base::getloc((const std::ios_base *)((char *)v153 + *(void *)(*v153 - 24LL)));
      __int128 v154 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
      uint64_t v155 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v154->__vftable[2].~facet_0)(v154, 10LL);
      std::locale::~locale((std::locale *)&__p);
      std::ostream::put(v153, v155);
      std::ostream::flush(v153);
      uint64_t v55 = 0LL;
    }

    if (SHIBYTE(cap) < 0) {
      operator delete(__dst[0].__locale_);
    }
    uint64_t v89 = (std::__shared_weak_count *)*((void *)&v182 + 1);
    goto LABEL_300;
  }

  if ((siri::dialogengine::FileExists(&v166) & 1) == 0)
  {
    BOOL v56 = sub_100002F60(&std::cout, (uint64_t)"Error: can't find input Visual CAT file: ", 41LL);
    if ((v166.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v57 = &v166;
    }
    else {
      std::string::size_type v57 = (std::string *)v166.__r_.__value_.__r.__words[0];
    }
    if ((v166.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v58 = v166.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t v58 = v166.__r_.__value_.__l.__size_;
    }
    uint64_t v59 = sub_100002F60(v56, (uint64_t)v57, v58);
    std::ios_base::getloc((const std::ios_base *)((char *)v59 + *(void *)(*v59 - 24LL)));
    std::string v60 = std::locale::use_facet(&v183, &std::ctype<char>::id);
    uint64_t v61 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v60->__vftable[2].~facet_0)(v60, 10LL);
    std::locale::~locale(&v183);
    std::ostream::put(v59, v61);
    std::ostream::flush(v59);
    uint64_t v55 = 0LL;
    goto LABEL_319;
  }

  uint64_t v21 = sub_100002F60(&std::cout, (uint64_t)"Converting ", 11LL);
  if ((v166.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    int v22 = &v166;
  }
  else {
    int v22 = (std::string *)v166.__r_.__value_.__r.__words[0];
  }
  if ((v166.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v23 = v166.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t v23 = v166.__r_.__value_.__l.__size_;
  }
  std::string::size_type v24 = sub_100002F60(v21, (uint64_t)v22, v23);
  std::string::size_type v25 = sub_100002F60(v24, (uint64_t)" to ", 4LL);
  if (v171) {
    std::string v26 = "BINARY";
  }
  else {
    std::string v26 = "XML";
  }
  if (v171) {
    uint64_t v27 = 6LL;
  }
  else {
    uint64_t v27 = 3LL;
  }
  std::string v28 = sub_100002F60(v25, (uint64_t)v26, v27);
  if (v172) {
    uint64_t v29 = " (preserve existing)";
  }
  else {
    uint64_t v29 = " (delete existing)";
  }
  if (v172) {
    uint64_t v30 = 20LL;
  }
  else {
    uint64_t v30 = 18LL;
  }
  char v31 = sub_100002F60(v28, (uint64_t)v29, v30);
  std::ios_base::getloc((const std::ios_base *)((char *)v31 + *(void *)(*v31 - 24LL)));
  std::string v32 = std::locale::use_facet(&v183, &std::ctype<char>::id);
  uint64_t v33 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v32->__vftable[2].~facet_0)(v32, 10LL);
  std::locale::~locale(&v183);
  std::ostream::put(v31, v33);
  std::ostream::flush(v31);
  siri::dialogengine::ChangeVisualCATExtension(&__p, &v166, 0LL);
  siri::dialogengine::ChangeVisualCATExtension(&__str, &v166, 1LL);
  sub_10002D3D4((uint64_t)&v166, (uint64_t)&__p, (uint64_t)&__str);
  else {
    std::string v177 = v168;
  }
  std::string::size_type v92 = v177.__r_.__value_.__s.__size_;
  if ((v177.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    std::string::size_type v92 = v177.__r_.__value_.__l.__size_;
  }
  if (!v92)
  {
    std::string::operator=(&v177, &__p);
    if (v171)
    {
      if (v171 != 1)
      {
        __int128 v134 = sub_100002F60(&std::cout, (uint64_t)"Unrecognized format: ", 21LL);
        char v135 = (void *)std::ostream::operator<<(v134, v171);
        std::ios_base::getloc((const std::ios_base *)((char *)v135 + *(void *)(*v135 - 24LL)));
        std::string::size_type v136 = std::locale::use_facet(&v183, &std::ctype<char>::id);
        uint64_t v137 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v136->__vftable[2].~facet_0)(v136, 10LL);
        std::locale::~locale(&v183);
        std::ostream::put(v135, v137);
        std::ostream::flush(v135);
        uint64_t v55 = 0LL;
        goto LABEL_244;
      }

      std::string::operator=(&v177, &__str);
    }
  }

  siri::dialogengine::Context::Context((siri::dialogengine::Context *)&v183);
  siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)__dst);
  LODWORD(vsub_1000059D0(v22 - 176) = 1;
  siri::dialogengine::RequestInfo::SetRequestType(__dst, &v176);
  siri::dialogengine::RequestInfo::SetVisualPath(__dst, &v166);
  siri::dialogengine::GetTemplateDirs(&v176, &v169, 0LL);
  siri::dialogengine::RequestInfo::SetTemplateDirs(__dst, &v176);
  *(void *)&unsigned __int128 v182 = &v176;
  sub_10000AE78((void ***)&v182);
  siri::dialogengine::Context::SetRequestInfo(&v183, __dst);
  sub_1000286FC((uint64_t)__dst);
  if ((siri::dialogengine::Context::LoadVisualFiles(&v183, &v166) & 1) != 0)
  {
    sub_1000021BC(__dst, (char *)&unk_10006A022);
    char v93 = siri::dialogengine::Context::Save(&v183, &v177, __dst, v171, v173);
    if (SHIBYTE(cap) < 0) {
      operator delete(__dst[0].__locale_);
    }
    if ((v93 & 1) != 0)
    {
      if (!v172)
      {
        siri::dialogengine::ChangeVisualCATExtension(__dst, &v166, v171 == 0);
        siri::dialogengine::DeleteFile(__dst);
        if (SHIBYTE(cap) < 0) {
          operator delete(__dst[0].__locale_);
        }
      }

      uint64_t v55 = 1LL;
      goto LABEL_243;
    }

    std::string v94 = sub_100002F60(&std::cout, (uint64_t)"Error: unable to save Visual CAT file: ", 39LL);
    if ((v167.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string v95 = &v167;
    }
    else {
      std::string v95 = (std::string *)v167.__r_.__value_.__r.__words[0];
    }
    if ((v167.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v96 = v167.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t v96 = v167.__r_.__value_.__l.__size_;
    }
  }

  else
  {
    std::string v94 = sub_100002F60(&std::cout, (uint64_t)"Error: unable to load Visual CAT file: ", 39LL);
    if ((v166.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string v95 = &v166;
    }
    else {
      std::string v95 = (std::string *)v166.__r_.__value_.__r.__words[0];
    }
    if ((v166.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v96 = v166.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t v96 = v166.__r_.__value_.__l.__size_;
    }
  }

  std::string::size_type v125 = sub_100002F60(v94, (uint64_t)v95, v96);
  std::ios_base::getloc((const std::ios_base *)((char *)v125 + *(void *)(*v125 - 24LL)));
  BOOL v126 = std::locale::use_facet(__dst, &std::ctype<char>::id);
  uint64_t v127 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v126->__vftable[2].~facet_0)(v126, 10LL);
  std::locale::~locale(__dst);
  std::ostream::put(v125, v127);
  std::ostream::flush(v125);
  uint64_t v55 = 0LL;
LABEL_243:
  siri::dialogengine::Context::~Context((siri::dialogengine::Context *)&v183);
LABEL_244:
LABEL_319:
  if (v170 < 0) {
    operator delete(v169);
  }
  return v55;
}

void sub_10002D098()
{
  if (SLOBYTE(STACK[0x2F7]) < 0) {
    operator delete((void *)STACK[0x2E0]);
  }
  if (SLOBYTE(STACK[0x28F]) < 0) {
    operator delete((void *)STACK[0x278]);
  }
  if (SLOBYTE(STACK[0x2C7]) < 0) {
    operator delete((void *)STACK[0x2B0]);
  }
  if (SLOBYTE(STACK[0x2A7]) < 0) {
    operator delete((void *)STACK[0x290]);
  }
  __cxa_end_catch();
  JUMPOUT(0x10002D248LL);
}

void sub_10002D110( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, std::locale a25)
{
}

void sub_10002D144( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, void *a25, uint64_t a26, int a27, __int16 a28, char a29, char a30)
{
  if (SLOBYTE(STACK[0x2F7]) < 0) {
    operator delete((void *)STACK[0x2E0]);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  sub_1000059D0((uint64_t)&STACK[0x2B0]);
  JUMPOUT(0x10002D32CLL);
}

void sub_10002D180()
{
}

void sub_10002D190()
{
  if (SLOBYTE(STACK[0x2F7]) < 0) {
    operator delete((void *)STACK[0x2E0]);
  }
  JUMPOUT(0x10002D248LL);
}

void sub_10002D1B0( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, std::locale a25)
{
}

void sub_10002D1C0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, void *__p, uint64_t a26, int a27, __int16 a28, char a29, char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  sub_1000059D0((uint64_t)&STACK[0x2F8]);
  siri::dialogengine::Context::~Context((siri::dialogengine::Context *)&STACK[0x308]);
  JUMPOUT(0x10002D354LL);
}

void sub_10002D1D8( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, std::locale a25)
{
}

void sub_10002D1E8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  STACK[0x2F8] = v16;
  sub_10000AE78((void ***)&STACK[0x2F8]);
  sub_1000286FC((uint64_t)va);
  JUMPOUT(0x10002D2CCLL);
}

void sub_10002D224()
{
}

void sub_10002D230()
{
}

void sub_10002D23C()
{
}

void sub_10002D244( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, void *__p, uint64_t a29, int a30, __int16 a31, char a32, char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  sub_1000059D0((uint64_t)&STACK[0x2F8]);
  siri::dialogengine::Context::~Context((siri::dialogengine::Context *)&STACK[0x308]);
  if (a14 < 0) {
    operator delete(a9);
  }
  sub_10002D374((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_10002D288( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, void *a25, uint64_t a26, int a27, __int16 a28, char a29, char a30)
{
  if (a30 < 0) {
    operator delete(a25);
  }
  JUMPOUT(0x10002D324LL);
}

void sub_10002D298( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, void *a25, uint64_t a26, int a27, __int16 a28, char a29, char a30)
{
  if (a30 < 0) {
    operator delete(a25);
  }
  JUMPOUT(0x10002D324LL);
}

void sub_10002D2AC( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, std::locale a25)
{
}

void sub_10002D2C0()
{
}

void sub_10002D2C8(_Unwind_Exception *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, ...)
{
  if (SLOBYTE(STACK[0x2A7]) < 0) {
    operator delete((void *)STACK[0x290]);
  }
  if (SLOBYTE(STACK[0x2C7]) < 0) {
    operator delete((void *)STACK[0x2B0]);
  }
  if (SLOBYTE(STACK[0x2F7]) < 0) {
    operator delete((void *)STACK[0x2E0]);
  }
  if (a7 < 0) {
    operator delete(a2);
  }
  sub_10002D374((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10002D338(_Unwind_Exception *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, ...)
{
  if (a7 < 0) {
    operator delete(a2);
  }
  sub_10002D374((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_10002D348()
{
}

uint64_t sub_10002D374(uint64_t a1)
{
  return a1;
}

void sub_10002D3D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(a1 + 96);
  if (v5) {
    uint64_t v6 = a3;
  }
  else {
    uint64_t v6 = a2;
  }
  if (*(char *)(v6 + 23) < 0)
  {
    sub_10000231C(__dst, *(void **)v6, *(void *)(v6 + 8));
    int v5 = *(_DWORD *)(a1 + 96);
  }

  else
  {
    *(_OWORD *)__int128 __dst = *(_OWORD *)v6;
    uint64_t v12 = *(void *)(v6 + 16);
  }

  if (v5) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = a3;
  }
  if (*(char *)(v8 + 23) < 0)
  {
    sub_10000231C(__p, *(void **)v8, *(void *)(v8 + 8));
  }

  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)v8;
    uint64_t v10 = *(void *)(v8 + 16);
  }

  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v12) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_10002D4B0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10002D4E4(char *__dst, __int128 *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10000231C(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__int128 __dst = v4;
  }

  if (*((char *)a2 + 47) < 0)
  {
    sub_10000231C(__dst + 24, *((void **)a2 + 3), *((void *)a2 + 4));
  }

  else
  {
    __int128 v5 = *(__int128 *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }

  if (*((char *)a2 + 71) < 0)
  {
    sub_10000231C(__dst + 48, *((void **)a2 + 6), *((void *)a2 + 7));
  }

  else
  {
    __int128 v6 = a2[3];
    *((void *)__dst + std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 8);
    *((_OWORD *)__dst + 3) = v6;
  }

  unint64_t v7 = __dst + 72;
  if (*((char *)a2 + 95) < 0)
  {
    sub_10000231C(v7, *((void **)a2 + 9), *((void *)a2 + 10));
  }

  else
  {
    __int128 v8 = *(__int128 *)((char *)a2 + 72);
    *((void *)__dst + 11) = *((void *)a2 + 11);
    *(_OWORD *)unint64_t v7 = v8;
  }

  int v9 = *((_DWORD *)a2 + 24);
  *(_DWORD *)(__dst + 99) = *(_DWORD *)((char *)a2 + 99);
  *((_DWORD *)__dst + 24) = v9;
  return __dst;
}

void sub_10002D5D4(_Unwind_Exception *exception_object)
{
}

void sub_10002D620(uint64_t a1)
{
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_10002D694( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10002D6C8(void *a1, uint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3) < 3 || sub_100038648((uint64_t)a1))
  {
    sub_100038638(a2);
    sub_1000021BC( __p,  "\n <EXECUTABLE> <COMMAND> run --templateDir <dir> [--catId <id>] [--patternId <id>] [--locale <loc>]\n [--test <name>] [--outputJson <filename>] [--debug]\n \n Run one or more data-driven CAT tests. These are defined in a JSON format and stored\n under a 'tests' subdirectory of the template directory. By default all tests will be\n run. However, you can use the --catId, --patternId --locale, and --test options to\n filter the test to be run. You can use the option --debug argument to get debug log\n output.\n \n If the test run is successful, an exit code of 0 is returned. If there's a failure,\n then an exit code of 1 is returned.\n \n You can supply the --outputJson parameter and a JSON report will be written to the\n provided filename that includes all of the inputs, output, and status for every test\n that was run. This could be used to generate test status reports or to provide a\n report of the actual responses generated for a given domain.\n \n <EXECUTABLE> <COMMAND> list --templateDir <dir>\n \n List all of the data-driven CAT tests that exist under a template directory.\n");
    sub_1000021BC(&v27, "test");
    sub_1000388C0((uint64_t)a1, (uint64_t)&v27, (uint64_t)__p);
    if (SHIBYTE(v28) < 0) {
      operator delete((void *)v27);
    }
    if (SHIBYTE(v25) < 0) {
      operator delete(__p[0]);
    }
    return 0LL;
  }

  sub_1000021BC(__p, "--templateDir");
  siri::dialogengine::GetOption(v40, a1, __p);
  if (SHIBYTE(v25) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v6 = v41;
  if ((v41 & 0x80u) != 0) {
    unint64_t v6 = (unint64_t)v40[1];
  }
  if (v6)
  {
    siri::dialogengine::StringToLower(&v37);
    if (v39 < 0)
    {
      if (v38 != 3 || (*(_WORD *)v37 == 30066 ? (BOOL v11 = v37[2] == 110) : (BOOL v11 = 0), !v11))
      {
        if (v38 != 4) {
          goto LABEL_47;
        }
        unint64_t v7 = v37;
        goto LABEL_26;
      }
    }

    else
    {
      if (v39 != 3)
      {
        if (v39 != 4) {
          goto LABEL_47;
        }
        unint64_t v7 = &v37;
LABEL_26:
        if (*v7 == 1953720684)
        {
          siri::dialogengine::TestSuite::TestSuite((siri::dialogengine::TestSuite *)&v27, 0);
          sub_1000021BC(__p, (char *)&unk_10006A022);
          sub_1000021BC(&v34, (char *)&unk_10006A022);
          sub_1000021BC(v32, (char *)&unk_10006A022);
          siri::dialogengine::TestSuite::LoadTests(&v27, v40, __p, 0LL, &v34, v32);
          if (v33 < 0) {
            operator delete(v32[0]);
          }
          if (v36 < 0) {
            operator delete(v34);
          }
          if (SHIBYTE(v25) < 0) {
            operator delete(__p[0]);
          }
          siri::dialogengine::TestSuite::GetTests((siri::dialogengine::TestSuite *)&v27);
          uint64_t v12 = v34;
          for (std::string::size_type i = v35; v12 != i; v12 += 16)
          {
            sub_10002DF50((char *)__p, v12);
            siri::dialogengine::TestCase::ToString((siri::dialogengine::TestCase *)__p);
            if (v33 >= 0) {
              int v14 = (const char *)v32;
            }
            else {
              int v14 = (const char *)v32[0];
            }
            printf("%s", v14);
            if (v33 < 0) {
              operator delete(v32[0]);
            }
            if ((siri::dialogengine::TestCase::IsEnabled((siri::dialogengine::TestCase *)__p) & 1) == 0) {
              printf(" [Disabled]");
            }
            putchar(10);
            sub_10002E2E4((uint64_t)__p);
          }

          __p[0] = &v34;
          sub_10002E3AC((void ***)__p);
          __p[0] = &v29;
          sub_1000027F4((void ***)__p);
          __p[0] = (char *)&v27 + 8;
          sub_10002E3AC((void ***)__p);
          uint64_t v4 = 1LL;
          goto LABEL_48;
        }

LABEL_47:
        unint64_t v16 = sub_100002F60(&std::cout, (uint64_t)"Must specify 'run' or 'list' for 'catutil test'", 47LL);
        std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(*v16 - 24LL)));
        uint64_t v17 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
        uint64_t v18 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10LL);
        std::locale::~locale((std::locale *)__p);
        std::ostream::put(v16, v18);
        std::ostream::flush(v16);
        uint64_t v4 = 0LL;
LABEL_48:
        if (v39 < 0) {
          operator delete(v37);
        }
        goto LABEL_50;
      }
    }

    sub_1000021BC(__p, "--debug");
    int v20 = siri::dialogengine::OptionExists(a1, __p);
    if (SHIBYTE(v25) < 0) {
      operator delete(__p[0]);
    }
    if (v20) {
      siri::dialogengine::Log::SetOutputToStdout((siri::dialogengine::Log *)1, v19);
    }
    sub_1000021BC(__p, "--catId");
    siri::dialogengine::GetOption(&v27, a1, __p);
    if (SHIBYTE(v25) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v21 = HIBYTE(v28);
    if (v28 < 0) {
      uint64_t v21 = *((void *)&v27 + 1);
    }
    if (v21)
    {
      BOOL v22 = 0LL;
    }

    else
    {
      sub_1000021BC(&v34, "--patternId");
      siri::dialogengine::GetOption(__p, a1, &v34);
      if (SHIBYTE(v28) < 0) {
        operator delete((void *)v27);
      }
      __int128 v27 = *(_OWORD *)__p;
      uint64_t v28 = v25;
      HIBYTE(v25) = 0;
      LOBYTE(__p[0]) = 0;
      if (v36 < 0) {
        operator delete(v34);
      }
      uint64_t v23 = HIBYTE(v28);
      if (v28 < 0) {
        uint64_t v23 = *((void *)&v27 + 1);
      }
      BOOL v22 = v23 != 0;
    }

    sub_1000021BC(__p, "--locale");
    siri::dialogengine::GetOption(&v34, a1, __p);
    if (SHIBYTE(v25) < 0) {
      operator delete(__p[0]);
    }
    sub_1000021BC(__p, "--test");
    siri::dialogengine::GetOption(v32, a1, __p);
    if (SHIBYTE(v25) < 0) {
      operator delete(__p[0]);
    }
    sub_1000021BC(__p, "--outputJson");
    siri::dialogengine::GetOption(v30, a1, __p);
    if (SHIBYTE(v25) < 0) {
      operator delete(__p[0]);
    }
    siri::dialogengine::TestSuite::TestSuite((siri::dialogengine::TestSuite *)__p, v20 & v22);
    siri::dialogengine::TestSuite::LoadTests(__p, v40, &v27, v22, &v34, v32);
    uint64_t v4 = siri::dialogengine::TestRunner::RunTestSuite(&v42, __p, v30);
    uint64_t v42 = (void **)&v26;
    sub_1000027F4(&v42);
    uint64_t v42 = &__p[1];
    sub_10002E3AC(&v42);
    if (v31 < 0) {
      operator delete(v30[0]);
    }
    if (v33 < 0) {
      operator delete(v32[0]);
    }
    if (v36 < 0) {
      operator delete(v34);
    }
    if (SHIBYTE(v28) < 0) {
      operator delete((void *)v27);
    }
    goto LABEL_48;
  }

  __int128 v8 = sub_100002F60(&std::cout, (uint64_t)"Must specify --templateDir", 26LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(*v8 - 24LL)));
  int v9 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
  uint64_t v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10LL);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put(v8, v10);
  std::ostream::flush(v8);
  uint64_t v4 = 0LL;
LABEL_50:
  return v4;
}

void sub_10002DD18( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
}

uint64_t sub_10002DF08(uint64_t a1)
{
  char v3 = (void **)(a1 + 32);
  sub_1000027F4(&v3);
  char v3 = (void **)(a1 + 8);
  sub_10002E3AC(&v3);
  return a1;
}

char *sub_10002DF50(char *__dst, __int128 *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10000231C(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__int128 __dst = v4;
  }

  if (*((char *)a2 + 47) < 0)
  {
    sub_10000231C(__dst + 24, *((void **)a2 + 3), *((void *)a2 + 4));
  }

  else
  {
    __int128 v5 = *(__int128 *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }

  if (*((char *)a2 + 71) < 0)
  {
    sub_10000231C(__dst + 48, *((void **)a2 + 6), *((void *)a2 + 7));
  }

  else
  {
    __int128 v6 = a2[3];
    *((void *)__dst + std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 8);
    *((_OWORD *)__dst + 3) = v6;
  }

  if (*((char *)a2 + 95) < 0)
  {
    sub_10000231C(__dst + 72, *((void **)a2 + 9), *((void *)a2 + 10));
  }

  else
  {
    __int128 v7 = *(__int128 *)((char *)a2 + 72);
    *((void *)__dst + 11) = *((void *)a2 + 11);
    *(_OWORD *)(__dst + 72) = v7;
  }

  if (*((char *)a2 + 119) < 0)
  {
    sub_10000231C(__dst + 96, *((void **)a2 + 12), *((void *)a2 + 13));
  }

  else
  {
    __int128 v8 = a2[6];
    *((void *)__dst + 14) = *((void *)a2 + 14);
    *((_OWORD *)__dst + 6) = v8;
  }

  __dst[120] = *((_BYTE *)a2 + 120);
  if (*((char *)a2 + 151) < 0)
  {
    sub_10000231C(__dst + 128, *((void **)a2 + 16), *((void *)a2 + 17));
  }

  else
  {
    __int128 v9 = a2[8];
    *((void *)__dst + 1std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 18);
    *((_OWORD *)__dst + std::iostream::~basic_iostream(v2, v3 + 8) = v9;
  }

  if (*((char *)a2 + 175) < 0)
  {
    sub_10000231C(__dst + 152, *((void **)a2 + 19), *((void *)a2 + 20));
  }

  else
  {
    __int128 v10 = *(__int128 *)((char *)a2 + 152);
    *((void *)__dst + 21) = *((void *)a2 + 21);
    *(_OWORD *)(__dst + 152) = v10;
  }

  if (*((char *)a2 + 199) < 0)
  {
    sub_10000231C(__dst + 176, *((void **)a2 + 22), *((void *)a2 + 23));
  }

  else
  {
    __int128 v11 = a2[11];
    *((void *)__dst + 24) = *((void *)a2 + 24);
    *((_OWORD *)__dst + 11) = v11;
  }

  *((void *)__dst + 25) = 0LL;
  *((void *)__dst + 26) = 0LL;
  *((void *)__dst + 2memset(v42, 0, 7) = 0LL;
  sub_10002E244( __dst + 200,  *((void **)a2 + 25),  *((void **)a2 + 26),  (uint64_t)(*((void *)a2 + 26) - *((void *)a2 + 25)) >> 4);
  __int16 v12 = *((_WORD *)a2 + 112);
  *((void *)__dst + 29) = 0LL;
  *((_WORD *)__dst + 112) = v12;
  *((void *)__dst + 30) = 0LL;
  *((void *)__dst + 31) = 0LL;
  sub_100002594( __dst + 232,  *((__int128 **)a2 + 29),  *((__int128 **)a2 + 30),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 30) - *((void *)a2 + 29)) >> 3));
  return __dst;
}

void sub_10002E16C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
}

char *sub_10002E244(char *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    __int128 v6 = result;
    BOOL result = sub_100028604(result, a4);
    __int128 v7 = (void *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      void *v7 = *a2;
      uint64_t v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        __int128 v9 = (unint64_t *)(v8 + 8);
        do
          unint64_t v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }

      a2 += 2;
      v7 += 2;
    }

    *((void *)v6 + 1) = v7;
  }

  return result;
}

void sub_10002E2D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t sub_10002E2E4(uint64_t a1)
{
  char v3 = (void **)(a1 + 232);
  sub_1000027F4(&v3);
  char v3 = (void **)(a1 + 200);
  sub_100007BFC(&v3);
  return a1;
}

void sub_10002E3AC(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    __int128 v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_10002E2E4(v4 - 256);
      while ((void *)v4 != v2);
      __int128 v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void sub_10002E41C(uint64_t a1)
{
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_10002E490( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10002E4C4(void *a1, uint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3) < 3 || sub_100038648((uint64_t)a1))
  {
    sub_100038638(a2);
    sub_1000021BC( v52,  "\n <EXECUTABLE> <COMMAND> download --locale <locale1> [<locale2> ...] [--nonBlocking]\n \n Download Morphun assets for the specified locale(s) to device. If the optional --nonBlocking\n flag is supplied, a non-blocking download will be initiated. A minimum of one locale must\n be specified.\n \n <EXECUTABLE> <COMMAND> delete [--locale <locale1> <locale2> ...]\n \n Delete Morphun assets for the specified locale(s) from device. If no locale is provided,\n all morphun assets are deleted from the device. This is a blocking process. When execution is\n complete, all specified assets will have been deleted from the device.\n \n <EXECUTABLE> <COMMAND> getpath [--locale <locale1> <locale2> ...]\n \n Provides absolute paths on device to the Morphun assets for the specified locales. If no\n locales are provided, a list of paths to all Morphun assets present on device will be provided.\n");
    sub_1000021BC(__p, "morphun");
    sub_1000388C0((uint64_t)a1, (uint64_t)__p, (uint64_t)v52);
    if (SHIBYTE(v48) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v53) < 0) {
      operator delete(v52[0]);
    }
    return 0LL;
  }

  sub_1000021BC(v52, (char *)&unk_10006A022);
  __int128 v54 = 0uLL;
  uint64_t v55 = 0LL;
  unsigned __int8 v56 = 1;
  siri::dialogengine::StringToLower(__p);
  if (SHIBYTE(v53) < 0) {
    operator delete(v52[0]);
  }
  uint64_t v53 = v48;
  *(_OWORD *)uint64_t v52 = *(_OWORD *)__p;
  if (SHIBYTE(v48) < 0)
  {
    __int128 v6 = v52[1];
    if (v52[1] == (void *)7)
    {
      __int128 v6 = v52[1];
    }

    else if (v52[1] == (void *)8 && *(void *)v52[0] == 0x64616F6C6E776F64LL)
    {
      goto LABEL_43;
    }

    uint64_t v8 = (void **)v52[0];
    goto LABEL_34;
  }

  if (HIBYTE(v48) == 6)
  {
    uint64_t v8 = v52;
LABEL_34:
    int v10 = *(_DWORD *)v8;
    int v11 = *((unsigned __int16 *)v8 + 2);
    if (v10 != 1701602660 || v11 != 25972) {
      goto LABEL_38;
    }
    goto LABEL_43;
  }

  if (HIBYTE(v48) != 7)
  {
LABEL_38:
    uint64_t v13 = sub_100002F60( &std::cout,  (uint64_t)"Must specify 'download', 'delete' or 'getpath' for 'catutil morphun'",  68LL);
    std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24LL)));
    int v14 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
    uint64_t v15 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10LL);
    std::locale::~locale((std::locale *)__p);
    std::ostream::put(v13, v15);
LABEL_39:
    std::ostream::flush(v13);
    goto LABEL_40;
  }

LABEL_43:
  sub_1000021BC(__p, "--nonBlocking");
  unsigned __int8 v56 = siri::dialogengine::OptionExists(a1, __p) ^ 1;
  if (SHIBYTE(v48) < 0) {
    operator delete(__p[0]);
  }
  sub_1000021BC(__dst, "--locale");
  siri::dialogengine::GetMultipleOptions(__p, a1, __dst);
  sub_100028490((uint64_t *)&v54);
  __int128 v54 = *(_OWORD *)__p;
  uint64_t v55 = v48;
  __p[1] = 0LL;
  uint64_t v48 = 0LL;
  __p[0] = 0LL;
  v58.__locale_ = (std::locale::__imp *)__p;
  sub_1000027F4((void ***)&v58);
  if (SHIBYTE(v51) < 0) {
    operator delete(__dst[0]);
  }
  if (v53 < 0)
  {
    uint64_t v16 = v52[1];
    if (v52[1] == (void *)6)
    {
      if (*(_DWORD *)v52[0] == 1701602660 && *((_WORD *)v52[0] + 2) == 25972) {
        goto LABEL_69;
      }
      uint64_t v16 = v52[1];
    }

    else if (v52[1] == (void *)8 && *(void *)v52[0] == 0x64616F6C6E776F64LL)
    {
      goto LABEL_82;
    }

    uint64_t v18 = (void **)v52[0];
    goto LABEL_76;
  }

  if (HIBYTE(v53) == 6)
  {
    if (LODWORD(v52[0]) != 1701602660 || WORD2(v52[0]) != 25972) {
      goto LABEL_40;
    }
LABEL_69:
    uint64_t v21 = *((void *)&v54 + 1);
    uint64_t v20 = v54;
    if ((void)v54 == *((void *)&v54 + 1))
    {
      uint64_t v43 = sub_100002F60(&std::cout, (uint64_t)"Deleting ALL Morphun assets...", 30LL);
      std::ios_base::getloc((const std::ios_base *)((char *)v43 + *(void *)(*v43 - 24LL)));
      __int128 v44 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
      uint64_t v45 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v44->__vftable[2].~facet_0)(v44, 10LL);
      std::locale::~locale((std::locale *)__p);
      std::ostream::put(v43, v45);
      std::ostream::flush(v43);
      siri::dialogengine::MorphunUpdaterTuriTrial::DeleteAll((siri::dialogengine::MorphunUpdaterTuriTrial *)__p);
    }

    else
    {
      __dst[0] = 0LL;
      __dst[1] = 0LL;
      uint64_t v51 = 0LL;
      std::string::size_type v57 = __dst;
      do
      {
        siri::dialogengine::GetLocaleLanguage(__p, v20);
        sub_10002F71C((uint64_t **)&v57, (__int128 *)__p);
        if (SHIBYTE(v48) < 0) {
          operator delete(__p[0]);
        }
        v20 += 24LL;
      }

      while (v20 != v21);
      siri::dialogengine::MorphunUpdaterTuriTrial::Delete(__p, __dst);
      __p[0] = __dst;
      sub_1000027F4((void ***)__p);
    }

    goto LABEL_110;
  }

  if (HIBYTE(v53) == 7)
  {
    uint64_t v18 = v52;
LABEL_76:
    int v22 = *(_DWORD *)v18;
    int v23 = *(_DWORD *)((char *)v18 + 3);
    if (v22 == 1886676327 && v23 == 1752457584)
    {
      uint64_t v4 = sub_10002EEE0((uint64_t)v52);
      goto LABEL_41;
    }

  if ((v11 & 0x80) != 0)
  {
    if (!v13) {
      goto LABEL_53;
    }
    LOBYTE(v12) = *(_BYTE *)v12;
    if ((v12 & 0x80) != 0) {
      goto LABEL_53;
    }
  }

  else if (!v11 || (v12 & 0x80) != 0)
  {
    goto LABEL_53;
  }

  if ((_DefaultRuneLocale.__runetype[v12] & 0x400) != 0)
  {
    std::operator+<char>(&__str, "_", a4);
    *(void *)&uint64_t v8 = __str.__r_.__value_.__r.__words[0];
    *a4 = __str;
  }

      if (*(char *)(a1 + 247) < 0)
      {
        if (!*(void *)(a1 + 232)) {
          goto LABEL_48;
        }
      }

      else if (!*(_BYTE *)(a1 + 247))
      {
        goto LABEL_48;
      }

      if ((siri::dialogengine::FileExists(a1 + 224) & 1) == 0)
      {
        __int128 v33 = sub_100002F60(&std::cout, (uint64_t)"Error: The specified codegen config file does not exist: ", 57LL);
        uint64_t v34 = *(unsigned __int8 *)(a1 + 247);
        char v35 = *(void *)(a1 + 232);
        char v36 = (v34 & 0x80u) != 0LL;
        if ((v34 & 0x80u) == 0LL) {
          unsigned __int8 v37 = a1 + 224;
        }
        else {
          unsigned __int8 v37 = *(void *)(a1 + 224);
        }
LABEL_53:
        if (v36) {
          uint64_t v38 = v35;
        }
        else {
          uint64_t v38 = v34;
        }
        char v39 = sub_100002F60(v33, v37, v38);
        sub_100003ECC(v39);
        goto LABEL_64;
      }

LABEL_40:
    uint64_t v4 = 0LL;
    goto LABEL_41;
  }

    int v22 = *v5;
    *((void *)v14 + 2) = *((void *)v5 + 2);
    const std::locale::facet *v14 = v22;
    *((_BYTE *)v15 + 55) = 0;
    *(_BYTE *)char v5 = 0;
    *((_BYTE *)v14 + 24) = *((_BYTE *)v15 + 56);
    v14 += 2;
    goto LABEL_43;
  }

  return v5;
}

        uint64_t v18 = sub_1000176F8(&__p, "?");
        BOOL v19 = v22;
        if (v18)
        {
          (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 32LL))(a2, &v25, v22);
        }

        else
        {
          sub_1000021BC(v20, (char *)&unk_10006A022);
          (*(void (**)(uint64_t, uint64_t *, std::string *, uint64_t, void **))(*(void *)a2 + 48LL))( a2,  &v25,  &__p,  v19,  v20);
          if (v21 < 0) {
            operator delete(v20[0]);
          }
        }

        break;
    }

    goto LABEL_35;
  }

  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 32LL))(a2, &v25, v22);
LABEL_29:
  YAML::Scanner::pop(*(int64x2_t **)a1);
LABEL_35:
}

LABEL_110:
  uint64_t v4 = 1LL;
LABEL_41:
  __p[0] = &v54;
  sub_1000027F4((void ***)__p);
  if (SHIBYTE(v53) < 0) {
    operator delete(v52[0]);
  }
  return v4;
}

void sub_10002ED90( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::locale a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, uint64_t a21, void *__p, uint64_t a23, int a24, __int16 a25, char a26, char a27, uint64_t a28, char a29)
{
}

void sub_10002EE9C( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, void *a26, uint64_t a27, int a28, __int16 a29, char a30, char a31)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  JUMPOUT(0x10002EE94LL);
}

uint64_t sub_10002EECC(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
  return result;
}

uint64_t sub_10002EEE0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  uint64_t v2 = *(void *)(a1 + 32);
  if (v1 != v2)
  {
    uint64_t v45 = 0LL;
    uint64_t v46 = 0LL;
    uint64_t v47 = 0LL;
    std::string::size_type v57 = (std::locale *)&v45;
    while (1)
    {
      siri::dialogengine::GetCanonicalLocale(__dst, v1, 0LL);
      sub_1000021BC(&__p, "_");
      char v3 = siri::dialogengine::StringContains(__dst, &__p);
      char v4 = v3;
      if (SHIBYTE(v56) < 0)
      {
        operator delete(__p);
        if ((v4 & 1) == 0)
        {
LABEL_8:
          siri::dialogengine::GetDefaultLocaleForLanguage(&__str, __dst);
          goto LABEL_10;
        }
      }

      else if ((v3 & 1) == 0)
      {
        goto LABEL_8;
      }

      if (SHIBYTE(v49) < 0)
      {
        sub_10000231C(&__str, __dst[0].__locale_, (unint64_t)__dst[1].__locale_);
LABEL_10:
        if (SHIBYTE(v49) < 0) {
          operator delete(__dst[0].__locale_);
        }
        goto LABEL_12;
      }

      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)&__dst[0].__locale_;
      __str.__r_.__value_.__l.__cap_ = v49;
LABEL_12:
      sub_10002F71C((uint64_t **)&v57, (__int128 *)&__str);
      v1 += 24LL;
      if (v1 == v2)
      {
        uint64_t v55 = 0LL;
        int64_t v56 = 0LL;
        std::string __p = &v55;
        char v5 = v45;
        __int128 v6 = v46;
        if (v45 == v46) {
          goto LABEL_53;
        }
        do
        {
          if (*((char *)v5 + 23) < 0)
          {
            sub_10000231C(__dst, *(void **)v5, *((void *)v5 + 1));
          }

          else
          {
            __int128 v7 = *v5;
            int64_t v49 = *((void *)v5 + 2);
            *(_OWORD *)&__dst[0].__locale_ = v7;
          }

          siri::dialogengine::MorphunUpdaterTuriTrial::GetPath(&__str, &v57, __dst);
          std::string::size_type size = __str.__r_.__value_.__s.__size_;
          unsigned __int8 v9 = __str.__r_.__value_.__s.__size_;
          if ((__str.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            std::string::size_type size = __str.__r_.__value_.__l.__size_;
          }
          if (size)
          {
            std::string::size_type v57 = __dst;
            int v10 = sub_10002F860( (uint64_t **)&__p,  (const void **)&__dst[0].__locale_,  (uint64_t)&std::piecewise_construct,  (__int128 **)&v57);
            std::string::operator=((std::string *)(v10 + 7), &__str);
            unsigned __int8 v9 = __str.__r_.__value_.__s.__size_;
          }

          if ((v9 & 0x80) != 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v49) < 0) {
            operator delete(__dst[0].__locale_);
          }
          char v5 = (__int128 *)((char *)v5 + 24);
        }

        while (v5 != v6);
        if (!v56)
        {
LABEL_53:
          std::string::size_type v24 = sub_100002F60(&std::cout, (uint64_t)"No such locale(s) installed on device!", 38LL);
          std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(void *)(*v24 - 24LL)));
          uint64_t v25 = std::locale::use_facet(__dst, &std::ctype<char>::id);
          uint64_t v26 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10LL);
          std::locale::~locale(__dst);
          std::ostream::put(v24, v26);
          std::ostream::flush(v24);
        }

        else
        {
          int v11 = (__int128 *)__p;
          if (__p != &v55)
          {
            do
            {
              sub_10002F688((char *)__dst, v11 + 2);
              if (v49 >= 0) {
                locale = __dst;
              }
              else {
                locale = __dst[0].__locale_;
              }
              if (v49 >= 0) {
                uint64_t v13 = HIBYTE(v49);
              }
              else {
                uint64_t v13 = (uint64_t)__dst[1].__locale_;
              }
              int v14 = sub_100002F60(&std::cout, (uint64_t)locale, v13);
              uint64_t v15 = sub_100002F60(v14, (uint64_t)": ", 2LL);
              if ((v52 & 0x80u) == 0) {
                uint64_t v16 = &v50;
              }
              else {
                uint64_t v16 = v50;
              }
              if ((v52 & 0x80u) == 0) {
                uint64_t v17 = v52;
              }
              else {
                uint64_t v17 = v51;
              }
              uint64_t v18 = sub_100002F60(v15, (uint64_t)v16, v17);
              std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(void *)(*v18 - 24LL)));
              BOOL v19 = std::locale::use_facet((const std::locale *)&__str, &std::ctype<char>::id);
              uint64_t v20 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10LL);
              std::locale::~locale((std::locale *)&__str);
              std::ostream::put(v18, v20);
              std::ostream::flush(v18);
              if (SHIBYTE(v49) < 0) {
                operator delete(__dst[0].__locale_);
              }
              uint64_t v21 = (std::locale::__imp *)*((void *)v11 + 1);
              if (v21)
              {
                do
                {
                  int v22 = (std::locale::__imp **)v21;
                  uint64_t v21 = *(std::locale::__imp **)v21;
                }

                while (v21);
              }

              else
              {
                do
                {
                  int v22 = (std::locale::__imp **)*((void *)v11 + 2);
                  BOOL v23 = *v22 == (std::locale::__imp *)v11;
                  int v11 = (__int128 *)v22;
                }

                while (!v23);
              }

              int v11 = (__int128 *)v22;
            }

            while (v22 != &v55);
          }
        }

        sub_100028914((uint64_t)&__p, v55);
        __dst[0].__locale_ = (std::locale::__imp *)&v45;
        sub_1000027F4((void ***)__dst);
        return 1LL;
      }
    }
  }

  uint64_t v55 = 0LL;
  int64_t v56 = 0LL;
  std::string __p = &v55;
                                     + 16;
  siri::dialogengine::MorphunUpdaterTuriTrial::GetPaths((siri::dialogengine::MorphunUpdaterTuriTrial *)&__str);
  sub_100028914((uint64_t)&__p, v55);
  uint64_t v28 = __dst[1].__locale_;
  std::string __p = __dst[0].__locale_;
  uint64_t v55 = __dst[1].__locale_;
  int64_t v56 = v49;
  if (v49)
  {
    *((void *)__dst[1].__locale_ + 2) = &v55;
    __dst[0].__locale_ = (std::locale::__imp *)&__dst[1];
    __dst[1].__locale_ = 0LL;
    int64_t v49 = 0LL;
    uint64_t v28 = 0LL;
  }

  else
  {
    std::string __p = &v55;
  }

  sub_100028914((uint64_t)__dst, v28);
  BOOL v27 = v56 != 0;
  if (v56)
  {
    uint64_t v29 = (__int128 *)__p;
    if (__p != &v55)
    {
      do
      {
        sub_10002F688((char *)__dst, v29 + 2);
        if (v49 >= 0) {
          uint64_t v30 = __dst;
        }
        else {
          uint64_t v30 = __dst[0].__locale_;
        }
        if (v49 >= 0) {
          uint64_t v31 = HIBYTE(v49);
        }
        else {
          uint64_t v31 = (uint64_t)__dst[1].__locale_;
        }
        std::string v32 = sub_100002F60(&std::cout, (uint64_t)v30, v31);
        __int128 v33 = sub_100002F60(v32, (uint64_t)": ", 2LL);
        if ((v52 & 0x80u) == 0) {
          uint64_t v34 = &v50;
        }
        else {
          uint64_t v34 = v50;
        }
        if ((v52 & 0x80u) == 0) {
          uint64_t v35 = v52;
        }
        else {
          uint64_t v35 = v51;
        }
        char v36 = sub_100002F60(v33, (uint64_t)v34, v35);
        std::ios_base::getloc((const std::ios_base *)((char *)v36 + *(void *)(*v36 - 24LL)));
        unsigned __int8 v37 = std::locale::use_facet((const std::locale *)&__str, &std::ctype<char>::id);
        uint64_t v38 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v37->__vftable[2].~facet_0)(v37, 10LL);
        std::locale::~locale((std::locale *)&__str);
        std::ostream::put(v36, v38);
        std::ostream::flush(v36);
        if (SHIBYTE(v49) < 0) {
          operator delete(__dst[0].__locale_);
        }
        char v39 = (std::locale::__imp *)*((void *)v29 + 1);
        if (v39)
        {
          do
          {
            uint64_t v40 = (std::locale::__imp **)v39;
            char v39 = *(std::locale::__imp **)v39;
          }

          while (v39);
        }

        else
        {
          do
          {
            uint64_t v40 = (std::locale::__imp **)*((void *)v29 + 2);
            BOOL v23 = *v40 == (std::locale::__imp *)v29;
            uint64_t v29 = (__int128 *)v40;
          }

          while (!v23);
        }

        uint64_t v29 = (__int128 *)v40;
      }

      while (v40 != &v55);
    }
  }

  else
  {
    unsigned __int8 v41 = sub_100002F60(&std::cout, (uint64_t)"No Morphun locales installed on device!", 39LL);
    std::ios_base::getloc((const std::ios_base *)((char *)v41 + *(void *)(*v41 - 24LL)));
    uint64_t v42 = std::locale::use_facet(__dst, &std::ctype<char>::id);
    uint64_t v43 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v42->__vftable[2].~facet_0)(v42, 10LL);
    std::locale::~locale(__dst);
    std::ostream::put(v41, v43);
    std::ostream::flush(v41);
  }

  sub_100028914((uint64_t)&__p, v55);
  return v27;
}

void sub_10002F4D4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, std::locale a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21, std::locale a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *__p, void *a29, int a30, __int16 a31, char a32, char a33)
{
}

uint64_t sub_10002F600(uint64_t a1)
{
  char v3 = (void **)(a1 + 24);
  sub_1000027F4(&v3);
  return a1;
}

uint64_t sub_10002F648(uint64_t a1)
{
  return a1;
}

char *sub_10002F688(char *__dst, __int128 *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10000231C(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__int128 __dst = v4;
  }

  char v5 = __dst + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_10000231C(v5, *((void **)a2 + 3), *((void *)a2 + 4));
  }

  else
  {
    __int128 v6 = *(__int128 *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)char v5 = v6;
  }

  return __dst;
}

void sub_10002F700(_Unwind_Exception *exception_object)
{
}

uint64_t **sub_10002F71C(uint64_t **a1, __int128 *a2)
{
  __int128 v4 = *a1;
  unint64_t v5 = (*a1)[1];
  __int128 v6 = *a1;
  unint64_t v9 = v6[2];
  uint64_t v7 = (uint64_t)(v6 + 2);
  unint64_t v8 = v9;
  if (v5 >= v9)
  {
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *v4) >> 3);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_100002668();
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *v4) >> 3);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x555555555555555LL) {
      unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v15 = v13;
    }
    v20[4] = v7;
    if (v15) {
      uint64_t v16 = (char *)sub_10000267C(v7, v15);
    }
    else {
      uint64_t v16 = 0LL;
    }
    uint64_t v17 = &v16[24 * v12];
    v20[0] = v16;
    v20[1] = v17;
    v20[3] = &v16[24 * v15];
    __int128 v18 = *a2;
    *((void *)v17 + 2) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v17 = v18;
    *((void *)a2 + 1) = 0LL;
    *((void *)a2 + 2) = 0LL;
    *(void *)a2 = 0LL;
    v20[2] = v17 + 24;
    sub_100002D50(v4, v20);
    uint64_t v11 = v4[1];
    sub_100002ED8((uint64_t)v20);
  }

  else
  {
    __int128 v10 = *a2;
    *(void *)(v5 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v5 = v10;
    *((void *)a2 + 1) = 0LL;
    *((void *)a2 + 2) = 0LL;
    *(void *)a2 = 0LL;
    uint64_t v11 = v5 + 24;
    v4[1] = v5 + 24;
  }

  v4[1] = v11;
  return a1;
}

void sub_10002F84C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t *sub_10002F860(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  __int128 v6 = (uint64_t **)sub_100005600((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    unint64_t v8 = v6;
    sub_10002F908((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000055AC(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0LL;
    sub_10002F99C((uint64_t)v10, 0LL);
  }

  return v7;
}

_BYTE *sub_10002F908@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  __int128 v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + std::iostream::~basic_iostream(v2, v3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  BOOL result = v6 + 4;
  unint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    BOOL result = sub_10000231C(result, *(void **)v8, *((void *)v8 + 1));
  }

  else
  {
    __int128 v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)BOOL result = v9;
  }

  v6[7] = 0LL;
  v6[8] = 0LL;
  v6[9] = 0LL;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_10002F984(_Unwind_Exception *a1)
{
}

void sub_10002F99C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_10002895C((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }

void sub_10002F9E0(uint64_t a1)
{
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_10002FA54( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10002FA88(void *a1, uint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3) < 3 || sub_100038648((uint64_t)a1))
  {
    sub_100038638(a2);
    sub_1000309F8((uint64_t)a1);
    return 0LL;
  }

  sub_10001433C((uint64_t)a1);
  siri::dialogengine::StringToLower(v106);
  if ((v107 & 0x80000000) == 0)
  {
    if (v107 == 9)
    {
      __int128 v6 = v106;
      goto LABEL_10;
    }

LABEL_14:
    sub_1000021BC(&v126, "dialogids");
    sub_1000317D8((uint64_t)&v121, (const void **)&v126.__locale_, 1LL);
    if (SHIBYTE(v128) < 0) {
      operator delete(v126.__locale_);
    }
    __int128 v10 = sub_100002F60(&std::cerr, (uint64_t)"Please specify one of the following contents sub-commands: ", 59LL);
    sub_1000021BC(&__p, ", ");
    siri::dialogengine::StringJoin(&v126, &v121, &__p);
    if (v128 >= 0) {
      locale = &v126;
    }
    else {
      locale = v126.__locale_;
    }
    if (v128 >= 0) {
      uint64_t v12 = HIBYTE(v128);
    }
    else {
      uint64_t v12 = (uint64_t)v127;
    }
    unint64_t v13 = sub_100002F60(v10, (uint64_t)locale, v12);
    std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24LL)));
    unint64_t v14 = std::locale::use_facet(&v115, &std::ctype<char>::id);
    uint64_t v15 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10LL);
    std::locale::~locale(&v115);
    std::ostream::put(v13, v15);
    std::ostream::flush(v13);
    if (SHIBYTE(v128) < 0) {
      operator delete(v126.__locale_);
    }
    if (SHIBYTE(v120) < 0) {
      operator delete((void *)__p.i64[0]);
    }
    sub_100009064((uint64_t)&v121, (char *)v122.i64[0]);
    goto LABEL_27;
  }

  __int128 v6 = (void **)v106[0];
LABEL_10:
  uint64_t v7 = *v6;
  int v8 = *((unsigned __int8 *)v6 + 8);
  BOOL v9 = v7 == (void *)0x6469676F6C616964LL && v8 == 115;
  if (!v9) {
    goto LABEL_14;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3) >= 3 && !sub_100038648((uint64_t)a1))
  {
    sub_1000021BC(&v126, "--templateDir");
    siri::dialogengine::GetOption(&v121, a1, &v126);
    siri::dialogengine::ExpandPath(&v115, &v121);
    if (v122.i8[15] < 0) {
      operator delete(v121.__locale_);
    }
    if (SHIBYTE(v128) < 0) {
      operator delete(v126.__locale_);
    }
    sub_1000021BC(&v121, "--catId");
    siri::dialogengine::GetOption(&v112, a1, &v121);
    if (v122.i8[15] < 0) {
      operator delete(v121.__locale_);
    }
    sub_1000021BC(&v121, "--locale");
    siri::dialogengine::GetOption(v110, a1, &v121);
    if (v122.i8[15] < 0) {
      operator delete(v121.__locale_);
    }
    sub_1000021BC(&v121, "--json");
    int v16 = siri::dialogengine::OptionExists(a1, &v121);
    if (v122.i8[15] < 0) {
      operator delete(v121.__locale_);
    }
    uint64_t v17 = v117;
    if ((v117 & 0x80u) != 0) {
      uint64_t v17 = v116;
    }
    if (v17)
    {
      uint64_t v18 = v114;
      if ((v114 & 0x80u) != 0) {
        uint64_t v18 = v113;
      }
      if (v18)
      {
        v109[0] = 0LL;
        v109[1] = 0LL;
        std::string::size_type v108 = (uint64_t *)v109;
        unint64_t v19 = v111;
        if ((v111 & 0x80u) != 0) {
          unint64_t v19 = (unint64_t)v110[1];
        }
        if (v19)
        {
          int64x2_t v122 = 0uLL;
          v121.__locale_ = (std::locale::__imp *)&v122;
          if (!sub_100030AA0((uint64_t)&v115, (uint64_t)&v112, (uint64_t)v110, (uint64_t)&v121))
          {
            sub_100009064((uint64_t)&v121, (char *)v122.i64[0]);
LABEL_176:
            sub_100020C44((uint64_t)&v108, v109[0]);
            uint64_t v4 = 1LL;
            goto LABEL_177;
          }

          v126.__locale_ = (std::locale::__imp *)v110;
          uint64_t v20 = (uint64_t **)(sub_1000311E0( &v108,  (const void **)v110,  (uint64_t)&std::piecewise_construct,  (__int128 **)&v126)
                           + 7);
          sub_100009064((uint64_t)&v121, (char *)v122.i64[0]);
        }

        else
        {
          siri::dialogengine::CatIdToPath(&v126, &v112);
          siri::dialogengine::JoinPath(&v121, &v115, &v126);
          if (SHIBYTE(v128) < 0) {
            operator delete(v126.__locale_);
          }
          if ((siri::dialogengine::DirExists(&v121) & 1) != 0)
          {
            siri::dialogengine::GetCatLocales(&v126, &v121);
            uint64_t v28 = (__int128 *)v126.__locale_;
            uint64_t v29 = v127;
            if (v126.__locale_ == v127)
            {
              uint64_t v47 = sub_100002F60(&std::cerr, (uint64_t)"Cannot find any locale files in CAT directory: ", 47LL);
              if (v122.i8[15] >= 0) {
                uint64_t v48 = &v121;
              }
              else {
                uint64_t v48 = v121.__locale_;
              }
              if (v122.i8[15] >= 0) {
                uint64_t v49 = v122.u8[15];
              }
              else {
                uint64_t v49 = v122.i64[0];
              }
              std::string::size_type v50 = sub_100002F60(v47, (uint64_t)v48, v49);
              std::ios_base::getloc((const std::ios_base *)((char *)v50 + *(void *)(*v50 - 24LL)));
              uint64_t v51 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
              uint64_t v52 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v51->__vftable[2].~facet_0)(v51, 10LL);
              std::locale::~locale((std::locale *)&__p);
              std::ostream::put(v50, v52);
              std::ostream::flush(v50);
              char v30 = 0;
            }

            else
            {
              char v30 = 1;
              do
              {
                __p.i64[1] = 0LL;
                unint64_t v120 = 0LL;
                __p.i64[0] = (uint64_t)&__p.i64[1];
                if (sub_100030AA0((uint64_t)&v115, (uint64_t)&v112, (uint64_t)v28, (uint64_t)&__p))
                {
                  std::string::size_type v125 = v28;
                }

                else
                {
                  char v30 = 0;
                }

                sub_100009064((uint64_t)&__p, (char *)__p.i64[1]);
                uint64_t v28 = (__int128 *)((char *)v28 + 24);
              }

              while (v28 != (__int128 *)v29);
            }

            __p.i64[0] = (uint64_t)&v126;
            sub_1000027F4((void ***)&__p);
          }

          else
          {
            std::string v32 = sub_100002F60(&std::cerr, (uint64_t)"CAT ID [", 8LL);
            if ((v114 & 0x80u) == 0) {
              __int128 v33 = &v112;
            }
            else {
              __int128 v33 = v112;
            }
            if ((v114 & 0x80u) == 0) {
              uint64_t v34 = v114;
            }
            else {
              uint64_t v34 = v113;
            }
            uint64_t v35 = sub_100002F60(v32, (uint64_t)v33, v34);
            char v36 = sub_100002F60(v35, (uint64_t)"] does not exist under template dir [", 37LL);
            if ((v117 & 0x80u) == 0) {
              unsigned __int8 v37 = &v115;
            }
            else {
              unsigned __int8 v37 = v115.__locale_;
            }
            if ((v117 & 0x80u) == 0) {
              uint64_t v38 = v117;
            }
            else {
              uint64_t v38 = v116;
            }
            char v39 = sub_100002F60(v36, (uint64_t)v37, v38);
            uint64_t v40 = sub_100002F60(v39, (uint64_t)"] (", 3LL);
            if (v122.i8[15] >= 0) {
              unsigned __int8 v41 = &v121;
            }
            else {
              unsigned __int8 v41 = v121.__locale_;
            }
            if (v122.i8[15] >= 0) {
              uint64_t v42 = v122.u8[15];
            }
            else {
              uint64_t v42 = v122.i64[0];
            }
            uint64_t v43 = sub_100002F60(v40, (uint64_t)v41, v42);
            __int128 v44 = sub_100002F60(v43, (uint64_t)")", 1LL);
            std::ios_base::getloc((const std::ios_base *)((char *)v44 + *(void *)(*v44 - 24LL)));
            uint64_t v45 = std::locale::use_facet(&v126, &std::ctype<char>::id);
            uint64_t v46 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v45->__vftable[2].~facet_0)(v45, 10LL);
            std::locale::~locale(&v126);
            std::ostream::put(v44, v46);
            std::ostream::flush(v44);
            char v30 = 0;
          }

          if (v122.i8[15] < 0) {
            operator delete(v121.__locale_);
          }
          if ((v30 & 1) == 0) {
            goto LABEL_176;
          }
        }

        if (v16)
        {
          uint64_t v127 = 0LL;
          uint64_t v128 = 0LL;
          v126.__locale_ = (std::locale::__imp *)&v127;
          uint64_t v53 = v108;
          if (v108 != (uint64_t *)v109)
          {
            do
            {
              int64x2_t __p = 0uLL;
              unint64_t v120 = 0LL;
              __int128 v54 = (uint64_t *)v53[7];
              if (v54 != v53 + 8)
              {
                do
                {
                  siri::dialogengine::CreateJSONStringVal(&v118, v54 + 4);
                  uint64_t v55 = __p.i64[1];
                  if (__p.i64[1] >= (unint64_t)v120)
                  {
                    uint64_t v56 = (__p.i64[1] - __p.i64[0]) >> 4;
                    unint64_t v57 = v56 + 1;
                    uint64_t v58 = (uint64_t)&v120[-__p.i64[0]];
                    else {
                      unint64_t v59 = v57;
                    }
                    uint64_t v124 = &v120;
                    std::string v60 = (char *)sub_100028644((uint64_t)&v120, v59);
                    std::string::size_type v62 = &v60[16 * v56];
                    *(_OWORD *)std::string::size_type v62 = v118;
                    __int128 v118 = 0uLL;
                    std::string::size_type v63 = (void *)__p.i64[1];
                    uint64_t v64 = (void *)__p.i64[0];
                    if (__p.i64[1] == __p.i64[0])
                    {
                      int64x2_t v67 = vdupq_n_s64(__p.u64[1]);
                      std::string v65 = &v60[16 * v56];
                    }

                    else
                    {
                      std::string v65 = &v60[16 * v56];
                      do
                      {
                        __int128 v66 = *((_OWORD *)v63 - 1);
                        v63 -= 2;
                        *((_OWORD *)v65 - 1) = v66;
                        v65 -= 16;
                        *std::string::size_type v63 = 0LL;
                        v63[1] = 0LL;
                      }

                      while (v63 != v64);
                      int64x2_t v67 = __p;
                    }

                    uint64_t v68 = v62 + 16;
                    __p.i64[0] = (uint64_t)v65;
                    __p.i64[1] = (uint64_t)(v62 + 16);
                    int64x2_t v122 = v67;
                    std::locale v69 = v120;
                    unint64_t v120 = &v60[16 * v61];
                    __int128 v123 = v69;
                    v121.__locale_ = (std::locale::__imp *)v67.i64[0];
                    sub_100031654((uint64_t)&v121);
                    std::string::size_type v70 = (std::__shared_weak_count *)*((void *)&v118 + 1);
                    __p.i64[1] = (uint64_t)v68;
                    if (*((void *)&v118 + 1))
                    {
                      uint64_t v71 = (unint64_t *)(*((void *)&v118 + 1) + 8LL);
                      do
                        unint64_t v72 = __ldaxr(v71);
                      while (__stlxr(v72 - 1, v71));
                      if (!v72)
                      {
                        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                        std::__shared_weak_count::__release_weak(v70);
                      }
                    }
                  }

                  else
                  {
                    *(_OWORD *)__p.i64[1] = v118;
                    __p.i64[1] = v55 + 16;
                  }

                  uint64_t v73 = (uint64_t *)v54[1];
                  if (v73)
                  {
                    do
                    {
                      uint64_t v74 = v73;
                      uint64_t v73 = (uint64_t *)*v73;
                    }

                    while (v73);
                  }

                  else
                  {
                    do
                    {
                      uint64_t v74 = (uint64_t *)v54[2];
                      BOOL v9 = *v74 == (void)v54;
                      __int128 v54 = v74;
                    }

                    while (!v9);
                  }

                  __int128 v54 = v74;
                }

                while (v74 != v53 + 8);
              }

              siri::dialogengine::CreateJSONArrayVal(&v121, &__p);
              std::string::size_type v125 = (__int128 *)(v53 + 4);
              int v75 = sub_1000316A0((uint64_t **)&v126, (const void **)v53 + 4, (uint64_t)&std::piecewise_construct, &v125);
              sub_1000153D8((uint64_t)(v75 + 7), (__int128 *)&v121);
              std::string::size_type v76 = (std::__shared_weak_count *)v122.i64[0];
              if (v122.i64[0])
              {
                std::string::size_type v77 = (unint64_t *)(v122.i64[0] + 8);
                do
                  unint64_t v78 = __ldaxr(v77);
                while (__stlxr(v78 - 1, v77));
                if (!v78)
                {
                  ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                  std::__shared_weak_count::__release_weak(v76);
                }
              }

              v121.__locale_ = (std::locale::__imp *)&__p;
              sub_100007BFC((void ***)&v121);
              uint64_t v79 = (uint64_t *)v53[1];
              if (v79)
              {
                do
                {
                  int v80 = v79;
                  uint64_t v79 = (uint64_t *)*v79;
                }

                while (v79);
              }

              else
              {
                do
                {
                  int v80 = (uint64_t *)v53[2];
                  BOOL v9 = *v80 == (void)v53;
                  uint64_t v53 = v80;
                }

                while (!v9);
              }

              uint64_t v53 = v80;
            }

            while (v80 != (uint64_t *)v109);
          }

          siri::dialogengine::ConstructJSONString(&v121, &v126);
          if (v122.i8[15] >= 0) {
            std::string::size_type v81 = &v121;
          }
          else {
            std::string::size_type v81 = v121.__locale_;
          }
          if (v122.i8[15] >= 0) {
            uint64_t v82 = v122.u8[15];
          }
          else {
            uint64_t v82 = v122.i64[0];
          }
          size_t v83 = sub_100002F60(&std::cout, (uint64_t)v81, v82);
          std::ios_base::getloc((const std::ios_base *)((char *)v83 + *(void *)(*v83 - 24LL)));
          std::string v84 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
          uint64_t v85 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v84->__vftable[2].~facet_0)(v84, 10LL);
          std::locale::~locale((std::locale *)&__p);
          std::ostream::put(v83, v85);
          std::ostream::flush(v83);
          if (v122.i8[15] < 0) {
            operator delete(v121.__locale_);
          }
          sub_100005988((uint64_t)&v126, v127);
        }

        else
        {
          std::string v86 = v108;
          if (v108 != (uint64_t *)v109)
          {
            do
            {
              int v87 = *((char *)v86 + 55);
              if (v87 >= 0) {
                uint64_t v88 = (uint64_t)(v86 + 4);
              }
              else {
                uint64_t v88 = v86[4];
              }
              if (v87 >= 0) {
                uint64_t v89 = *((unsigned __int8 *)v86 + 55);
              }
              else {
                uint64_t v89 = v86[5];
              }
              uint64_t v90 = sub_100002F60(&std::cout, v88, v89);
              unint64_t v91 = sub_100002F60(v90, (uint64_t)":", 1LL);
              std::ios_base::getloc((const std::ios_base *)((char *)v91 + *(void *)(*v91 - 24LL)));
              std::string::size_type v92 = std::locale::use_facet(&v121, &std::ctype<char>::id);
              uint64_t v93 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v92->__vftable[2].~facet_0)(v92, 10LL);
              std::locale::~locale(&v121);
              std::ostream::put(v91, v93);
              std::ostream::flush(v91);
              std::string v94 = (uint64_t *)v86[7];
              if (v94 != v86 + 8)
              {
                do
                {
                  std::string v95 = sub_100002F60(&std::cout, (uint64_t)"    ", 4LL);
                  int v96 = *((char *)v94 + 55);
                  if (v96 >= 0) {
                    uint64_t v97 = (uint64_t)(v94 + 4);
                  }
                  else {
                    uint64_t v97 = v94[4];
                  }
                  if (v96 >= 0) {
                    uint64_t v98 = *((unsigned __int8 *)v94 + 55);
                  }
                  else {
                    uint64_t v98 = v94[5];
                  }
                  unsigned __int8 v99 = sub_100002F60(v95, v97, v98);
                  std::ios_base::getloc((const std::ios_base *)((char *)v99 + *(void *)(*v99 - 24LL)));
                  std::string::size_type v100 = std::locale::use_facet(&v121, &std::ctype<char>::id);
                  uint64_t v101 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v100->__vftable[2].~facet_0)( v100,  10LL);
                  std::locale::~locale(&v121);
                  std::ostream::put(v99, v101);
                  std::ostream::flush(v99);
                  std::string::size_type v102 = (uint64_t *)v94[1];
                  if (v102)
                  {
                    do
                    {
                      __int128 v103 = v102;
                      std::string::size_type v102 = (uint64_t *)*v102;
                    }

                    while (v102);
                  }

                  else
                  {
                    do
                    {
                      __int128 v103 = (uint64_t *)v94[2];
                      BOOL v9 = *v103 == (void)v94;
                      std::string v94 = v103;
                    }

                    while (!v9);
                  }

                  std::string v94 = v103;
                }

                while (v103 != v86 + 8);
              }

              uint64_t v104 = (uint64_t *)v86[1];
              if (v104)
              {
                do
                {
                  std::string::size_type v105 = v104;
                  uint64_t v104 = (uint64_t *)*v104;
                }

                while (v104);
              }

              else
              {
                do
                {
                  std::string::size_type v105 = (uint64_t *)v86[2];
                  BOOL v9 = *v105 == (void)v86;
                  std::string v86 = v105;
                }

                while (!v9);
              }

              std::string v86 = v105;
            }

            while (v105 != (uint64_t *)v109);
          }
        }

        goto LABEL_176;
      }
    }

    else
    {
      uint64_t v21 = sub_100002F60(&std::cerr, (uint64_t)"Error: The option --templateDir is required", 45LL);
      std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(void *)(*v21 - 24LL)));
      int v22 = std::locale::use_facet(&v121, &std::ctype<char>::id);
      uint64_t v23 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10LL);
      std::locale::~locale(&v121);
      std::ostream::put(v21, v23);
      std::ostream::flush(v21);
      uint64_t v24 = v114;
      if ((v114 & 0x80u) != 0) {
        uint64_t v24 = v113;
      }
      if (v24) {
        goto LABEL_60;
      }
    }

    uint64_t v25 = sub_100002F60(&std::cerr, (uint64_t)"Error: The option --catId is required", 39LL);
    std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(void *)(*v25 - 24LL)));
    uint64_t v26 = std::locale::use_facet(&v121, &std::ctype<char>::id);
    uint64_t v27 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10LL);
    std::locale::~locale(&v121);
    std::ostream::put(v25, v27);
    std::ostream::flush(v25);
LABEL_60:
    uint64_t v4 = 0LL;
LABEL_177:
    goto LABEL_28;
  }

  sub_100038638(a2);
  sub_1000309F8((uint64_t)a1);
LABEL_27:
  uint64_t v4 = 0LL;
LABEL_28:
  if (v107 < 0) {
    operator delete(v106[0]);
  }
  return v4;
}

  sub_1000391CC(*a1, 1);
  LOBYTE(v106) = 0;
  sub_1000021BC(v118, "--templateDir");
  siri::dialogengine::GetOption(&v120, a1, v118);
  siri::dialogengine::ExpandPath(v114, &v120);
  *(_OWORD *)int64x2_t __p = *(_OWORD *)&v114[0].__locale_;
  std::string::size_type v105 = v115;
  HIBYTE(v115) = 0;
  LOBYTE(v114[0].__locale_) = 0;
  if (v122 < 0) {
    operator delete(v120.__locale_);
  }
  if (v119 < 0) {
    operator delete(v118[0]);
  }
  uint64_t v11 = (void *)HIBYTE(v105);
  if (SHIBYTE(v105) < 0) {
    uint64_t v11 = __p[1];
  }
  if (!v11)
  {
    unsigned __int8 v37 = sub_100002F60(&std::cout, (uint64_t)"Error: No template directory specified.", 39LL);
    std::ios_base::getloc((const std::ios_base *)((char *)v37 + *(void *)(*v37 - 24LL)));
    uint64_t v38 = std::locale::use_facet(v114, &std::ctype<char>::id);
    char v39 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v38->__vftable[2].~facet_0)(v38, 10LL);
    std::locale::~locale(v114);
    std::ostream::put(v37, v39);
LABEL_63:
    std::ostream::flush(v37);
    uint64_t v4 = 0;
    goto LABEL_158;
  }

  if ((siri::dialogengine::DirExists(__p) & 1) == 0)
  {
    uint64_t v40 = sub_100002F60( &std::cout,  (uint64_t)"Error: The specified template directory does not exist or is not a directory: ",  78LL);
    if (SHIBYTE(v105) >= 0) {
      unsigned __int8 v41 = __p;
    }
    else {
      unsigned __int8 v41 = (void **)__p[0];
    }
    if (SHIBYTE(v105) >= 0) {
      uint64_t v42 = HIBYTE(v105);
    }
    else {
      uint64_t v42 = (uint64_t)__p[1];
    }
    unsigned __int8 v37 = sub_100002F60(v40, (uint64_t)v41, v42);
    std::ios_base::getloc((const std::ios_base *)((char *)v37 + *(void *)(*v37 - 24LL)));
    uint64_t v43 = std::locale::use_facet(v114, &std::ctype<char>::id);
    __int128 v44 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v43->__vftable[2].~facet_0)(v43, 10LL);
    std::locale::~locale(v114);
    std::ostream::put(v37, v44);
    goto LABEL_63;
  }

  sub_1000021BC(v114, "--delete");
  LOBYTE(v106) = siri::dialogengine::OptionExists(a1, v114);
  if (SHIBYTE(v115) < 0) {
    operator delete(v114[0].__locale_);
  }
  uint64_t v12 = sub_100002F60(&std::cout, (uint64_t)"Template directory: ", 20LL);
  if (SHIBYTE(v105) >= 0) {
    unint64_t v13 = __p;
  }
  else {
    unint64_t v13 = (void **)__p[0];
  }
  if (SHIBYTE(v105) >= 0) {
    unint64_t v14 = HIBYTE(v105);
  }
  else {
    unint64_t v14 = (uint64_t)__p[1];
  }
  uint64_t v15 = sub_100002F60(v12, (uint64_t)v13, v14);
  LOBYTE(v114[0].__locale_) = 10;
  int v16 = sub_100002F60(v15, (uint64_t)v114, 1LL);
  LOBYTE(v114[0].__locale_) = 10;
  uint64_t v17 = sub_100002F60(v16, (uint64_t)v114, 1LL);
  uint64_t v18 = sub_100002F60(v17, (uint64_t)"Delete? ", 8LL);
  siri::dialogengine::StringFromBool(v114, (siri::dialogengine *)v106, v19);
  if (SHIBYTE(v115) >= 0) {
    locale = v114;
  }
  else {
    locale = v114[0].__locale_;
  }
  if (SHIBYTE(v115) >= 0) {
    uint64_t v21 = HIBYTE(v115);
  }
  else {
    uint64_t v21 = (uint64_t)v114[1].__locale_;
  }
  int v22 = sub_100002F60(v18, (uint64_t)locale, v21);
  LOBYTE(v120.__locale_) = 10;
  uint64_t v23 = sub_100002F60(v22, (uint64_t)&v120, 1LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(void *)(*v23 - 24LL)));
  uint64_t v24 = std::locale::use_facet(&v120, &std::ctype<char>::id);
  uint64_t v25 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10LL);
  std::locale::~locale(&v120);
  std::ostream::put(v23, v25);
  std::ostream::flush(v23);
  if (SHIBYTE(v115) < 0) {
    operator delete(v114[0].__locale_);
  }
  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"BEGIN ExcludeCats", v26);
  uint64_t v28 = __p;
  if (SHIBYTE(v105) < 0) {
    uint64_t v28 = (void **)__p[0];
  }
  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"templateDir: [%s]", v27, v28);
  siri::dialogengine::StringFromBool(v114, (siri::dialogengine *)v106, v29);
  if (SHIBYTE(v115) >= 0) {
    uint64_t v31 = v114;
  }
  else {
    uint64_t v31 = v114[0].__locale_;
  }
  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"delete: %s", v30, v31);
  if (SHIBYTE(v115) < 0) {
    operator delete(v114[0].__locale_);
  }
  sub_1000021BC(v114, "dialog");
  siri::dialogengine::JoinPath(v118, __p, v114);
  if (SHIBYTE(v115) < 0) {
    operator delete(v114[0].__locale_);
  }
  siri::dialogengine::ListDirRecursively(&v116, v118);
  std::string v32 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (v117 - v116));
  if (v117 == v116) {
    __int128 v33 = 0LL;
  }
  else {
    __int128 v33 = v32;
  }
  sub_100036A6C((uint64_t)v116, v117, (uint64_t)v114, v33, 1);
  uint64_t v34 = v116;
  uint64_t v35 = v117;
  while (v34 != v35)
  {
    siri::dialogengine::JoinPath(v114, v118, v34);
    char v36 = *(_OWORD *)&v114[0].__locale_;
    v34[2] = v115;
    *(_OWORD *)uint64_t v34 = v36;
    v34 += 3;
  }

  siri::dialogengine::Context::Context((siri::dialogengine::Context *)v114);
  uint64_t v46 = v116;
  uint64_t v47 = v117;
  if (v116 != v117)
  {
    uint64_t v4 = 1;
    while (1)
    {
      sub_1000021BC(&v120, "cat");
      if (siri::dialogengine::HasExtension(v46, &v120))
      {
        uint64_t v48 = siri::dialogengine::DirExists(v46);
        uint64_t v49 = v48;
        if ((v122 & 0x80000000) == 0)
        {
          if ((v48 & 1) == 0) {
            goto LABEL_153;
          }
LABEL_73:
          uint64_t v51 = *((char *)v46 + 23);
          if (v51 >= 0) {
            uint64_t v52 = (uint64_t)v46;
          }
          else {
            uint64_t v52 = (uint64_t)*v46;
          }
          if (v51 >= 0) {
            uint64_t v53 = *((unsigned __int8 *)v46 + 23);
          }
          else {
            uint64_t v53 = (uint64_t)v46[1];
          }
          __int128 v54 = sub_100002F60(&std::cout, v52, v53);
          std::ios_base::getloc((const std::ios_base *)((char *)v54 + *(void *)(*v54 - 24LL)));
          uint64_t v55 = std::locale::use_facet(&v120, &std::ctype<char>::id);
          uint64_t v56 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v55->__vftable[2].~facet_0)(v55, 10LL);
          std::locale::~locale(&v120);
          std::ostream::put(v54, v56);
          std::ostream::flush(v54);
          siri::dialogengine::GetCatLocales(&v120, v46);
          if ((char *)v120.__locale_ == v121)
          {
            sub_1000021BC(__dst, (char *)&unk_10006A022);
          }

          else if (*((char *)v120.__locale_ + 23) < 0)
          {
            sub_10000231C(__dst, *(void **)v120.__locale_, *((void *)v120.__locale_ + 1));
          }

          else
          {
            unint64_t v57 = *(_OWORD *)v120.__locale_;
            uint64_t v113 = *((void *)v120.__locale_ + 2);
            *(_OWORD *)__int128 __dst = v57;
          }

          v110.__locale_ = (std::locale::__imp *)&v120;
          sub_1000027F4((void ***)&v110);
          siri::dialogengine::FindParamsFile(&v120, v46);
          if (SHIBYTE(v113) < 0)
          {
            sub_10000231C(&v125, __dst[0], (unint64_t)__dst[1]);
          }

          else
          {
            std::string::size_type v125 = *(_OWORD *)__dst;
            std::locale v126 = v113;
          }

          char v107 = 0LL;
          std::string::size_type v108 = 0LL;
          __int128 v109 = 0LL;
          __int128 v123 = &v107;
          uint64_t v124 = 0;
          char v107 = (char *)operator new(0x18uLL);
          std::string::size_type v108 = v107;
          __int128 v109 = v107 + 24;
          std::string::size_type v108 = sub_100007ACC((uint64_t)&v109, &v125, &v127, v107);
          siri::dialogengine::FindLocaleFile(&v110, v46, &v107);
          siri::dialogengine::Context::LoadFiles(v114, &v120, &v110);
          if (v111 < 0) {
            operator delete(v110.__locale_);
          }
          __int128 v123 = &v107;
          sub_1000027F4((void ***)&v123);
          if (SHIBYTE(v126) < 0) {
            operator delete((void *)v125);
          }
          if (v122 < 0) {
            operator delete(v120.__locale_);
          }
          siri::dialogengine::Context::GetFile((siri::dialogengine::Context *)v114);
          uint64_t v58 = v107;
          if (v107)
          {
            sub_1000021BC(&v110, "excludeIfSet");
            siri::dialogengine::File::GetMetadata(&v120, v58, &v110);
            if (v111 < 0) {
              operator delete(v110.__locale_);
            }
            unint64_t v59 = v120.__locale_;
            if ((char **)v120.__locale_ != &v121)
            {
              do
              {
                else {
                  std::string v60 = (char *)v59 + 32;
                }
                if (getenv(v60))
                {
                  if ((_BYTE)v106)
                  {
                    std::string v86 = sub_100002F60(&std::cout, (uint64_t)"\t*** The environment variable '", 31LL);
                    int v87 = *((char *)v59 + 55);
                    if (v87 >= 0) {
                      uint64_t v88 = (uint64_t)v59 + 32;
                    }
                    else {
                      uint64_t v88 = *((void *)v59 + 4);
                    }
                    if (v87 >= 0) {
                      uint64_t v89 = *((unsigned __int8 *)v59 + 55);
                    }
                    else {
                      uint64_t v89 = *((void *)v59 + 5);
                    }
                    uint64_t v90 = sub_100002F60(v86, v88, v89);
                    unint64_t v91 = sub_100002F60(v90, (uint64_t)"' is defined.  DELETING this CAT. ***", 37LL);
                    std::ios_base::getloc((const std::ios_base *)((char *)v91 + *(void *)(*v91 - 24LL)));
                    std::string::size_type v92 = std::locale::use_facet(&v110, &std::ctype<char>::id);
                    uint64_t v93 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v92->__vftable[2].~facet_0)( v92,  10LL);
                    std::locale::~locale(&v110);
                    std::ostream::put(v91, v93);
                    std::ostream::flush(v91);
                    if ((siri::dialogengine::DeleteDirTree(v46) & 1) == 0)
                    {
                      std::string v94 = sub_100002F60(&std::cout, (uint64_t)"\tError: Failed to delete CAT: ", 30LL);
                      std::string v95 = *((char *)v46 + 23);
                      if (v95 >= 0) {
                        int v96 = (uint64_t)v46;
                      }
                      else {
                        int v96 = (uint64_t)*v46;
                      }
                      if (v95 >= 0) {
                        uint64_t v97 = *((unsigned __int8 *)v46 + 23);
                      }
                      else {
                        uint64_t v97 = (uint64_t)v46[1];
                      }
                      uint64_t v98 = sub_100002F60(v94, v96, v97);
                      std::ios_base::getloc((const std::ios_base *)((char *)v98 + *(void *)(*v98 - 24LL)));
                      unsigned __int8 v99 = std::locale::use_facet(&v110, &std::ctype<char>::id);
                      std::string::size_type v100 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v99->__vftable[2].~facet_0)( v99,  10LL);
                      std::locale::~locale(&v110);
                      std::ostream::put(v98, v100);
                      std::ostream::flush(v98);
                      uint64_t v4 = 0;
                    }

                    break;
                  }

                  uint64_t v61 = sub_100002F60(&std::cout, (uint64_t)"\t*** The environment variable '", 31LL);
                  std::string::size_type v62 = *((char *)v59 + 55);
                  if (v62 >= 0) {
                    std::string::size_type v63 = (uint64_t)v59 + 32;
                  }
                  else {
                    std::string::size_type v63 = *((void *)v59 + 4);
                  }
                  if (v62 >= 0) {
                    uint64_t v64 = *((unsigned __int8 *)v59 + 55);
                  }
                  else {
                    uint64_t v64 = *((void *)v59 + 5);
                  }
                  std::string v65 = sub_100002F60(v61, v63, v64);
                  __int128 v66 = sub_100002F60(v65, (uint64_t)"' is defined.  This CAT will be EXCLUDED. ***", 45LL);
                  std::ios_base::getloc((const std::ios_base *)((char *)v66 + *(void *)(*v66 - 24LL)));
                  int64x2_t v67 = std::locale::use_facet(&v110, &std::ctype<char>::id);
                  uint64_t v68 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v67->__vftable[2].~facet_0)( v67,  10LL);
                  std::locale::~locale(&v110);
                  std::ostream::put(v66, v68);
                }

                else
                {
                  std::locale v69 = sub_100002F60(&std::cout, (uint64_t)"\t*** The environment variable '", 31LL);
                  std::string::size_type v70 = *((char *)v59 + 55);
                  if (v70 >= 0) {
                    uint64_t v71 = (uint64_t)v59 + 32;
                  }
                  else {
                    uint64_t v71 = *((void *)v59 + 4);
                  }
                  if (v70 >= 0) {
                    unint64_t v72 = *((unsigned __int8 *)v59 + 55);
                  }
                  else {
                    unint64_t v72 = *((void *)v59 + 5);
                  }
                  uint64_t v73 = sub_100002F60(v69, v71, v72);
                  __int128 v66 = sub_100002F60(v73, (uint64_t)"' is not defined.  Leaving this CAT in place. ***", 49LL);
                  std::ios_base::getloc((const std::ios_base *)((char *)v66 + *(void *)(*v66 - 24LL)));
                  uint64_t v74 = std::locale::use_facet(&v110, &std::ctype<char>::id);
                  int v75 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v74->__vftable[2].~facet_0)( v74,  10LL);
                  std::locale::~locale(&v110);
                  std::ostream::put(v66, v75);
                }

                std::ostream::flush(v66);
                std::string::size_type v76 = (char *)*((void *)v59 + 1);
                if (v76)
                {
                  do
                  {
                    std::string::size_type v77 = (char **)v76;
                    std::string::size_type v76 = *(char **)v76;
                  }

                  while (v76);
                }

                else
                {
                  do
                  {
                    std::string::size_type v77 = (char **)*((void *)v59 + 2);
                    unint64_t v78 = *v77 == (char *)v59;
                    unint64_t v59 = (std::locale::__imp *)v77;
                  }

                  while (!v78);
                }

                unint64_t v59 = (std::locale::__imp *)v77;
              }

              while (v77 != &v121);
            }

            sub_100009064((uint64_t)&v120, v121);
          }

          else
          {
            uint64_t v79 = sub_100002F60(&std::cout, (uint64_t)"\tError: Failed to load CAT: ", 28LL);
            int v80 = *((char *)v46 + 23);
            if (v80 >= 0) {
              std::string::size_type v81 = (uint64_t)v46;
            }
            else {
              std::string::size_type v81 = (uint64_t)*v46;
            }
            if (v80 >= 0) {
              uint64_t v82 = *((unsigned __int8 *)v46 + 23);
            }
            else {
              uint64_t v82 = (uint64_t)v46[1];
            }
            size_t v83 = sub_100002F60(v79, v81, v82);
            std::ios_base::getloc((const std::ios_base *)((char *)v83 + *(void *)(*v83 - 24LL)));
            std::string v84 = std::locale::use_facet(&v120, &std::ctype<char>::id);
            uint64_t v85 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v84->__vftable[2].~facet_0)(v84, 10LL);
            std::locale::~locale(&v120);
            std::ostream::put(v83, v85);
            std::ostream::flush(v83);
            uint64_t v4 = 0;
          }

          uint64_t v101 = (std::__shared_weak_count *)v108;
          if (v108)
          {
            std::string::size_type v102 = (unint64_t *)(v108 + 8);
            do
              __int128 v103 = __ldaxr(v102);
            while (__stlxr(v103 - 1, v102));
            if (!v103)
            {
              ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
              std::__shared_weak_count::__release_weak(v101);
            }
          }

          if ((SHIBYTE(v113) & 0x80000000) == 0) {
            goto LABEL_153;
          }
          std::string::size_type v50 = (std::locale::__imp *)__dst[0];
LABEL_152:
          operator delete(v50);
          goto LABEL_153;
        }

        operator delete(v120.__locale_);
        if ((v49 & 1) != 0) {
          goto LABEL_73;
        }
      }

      else if (v122 < 0)
      {
        std::string::size_type v50 = v120.__locale_;
        goto LABEL_152;
      }

void sub_100030770( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, void *a19, uint64_t a20, int a21, __int16 a22, char a23, char a24, void *a25, uint64_t a26, int a27, __int16 a28, char a29, char a30, std::locale a31, uint64_t a32, int a33, __int16 a34, char a35, char a36, uint64_t a37, uint64_t a38, std::locale a39, uint64_t a40, int a41, __int16 a42, char a43, char a44, void *__p, uint64_t a46, int a47, __int16 a48, char a49, char a50)
{
  a37 = v50 - 128;
  sub_1000027F4((void ***)&a37);
  if (a50 < 0) {
    operator delete(__p);
  }
  sub_100020C44((uint64_t)&a16, a17);
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a36 < 0) {
    operator delete(a31.__locale_);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

void sub_1000309F8(uint64_t a1)
{
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_100030A6C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100030AA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = (void *)(a4 + 8);
  sub_100009064(a4, *(char **)(a4 + 8));
  *(void *)a4 = v8;
  *(void *)(a4 + 16) = 0LL;
  void *v8 = 0LL;
  siri::dialogengine::GetTemplateDirs(v38, a1, 0LL);
  siri::dialogengine::FindParamsFile(v36, v38, a2);
  if (*(char *)(a3 + 23) < 0)
  {
    sub_10000231C(__p, *(void **)a3, *(void *)(a3 + 8));
  }

  else
  {
    *(_OWORD *)int64x2_t __p = *(_OWORD *)a3;
    unsigned __int8 v41 = *(__int128 **)(a3 + 16);
  }

  v30.__locale_ = 0LL;
  locale = 0LL;
  std::string v32 = 0LL;
  LOBYTE(v2std::iostream::~basic_iostream(v2, v3 + 8) = 0;
  v30.__locale_ = (std::locale::__imp *)operator new(0x18uLL);
  locale = v30.__locale_;
  std::string v32 = (char *)v30.__locale_ + 24;
  locale = sub_100007ACC((uint64_t)&v32, (__int128 *)__p, v42, (char *)v30.__locale_);
  siri::dialogengine::FindLocaleFile(&v33, v38, &v30, a2);
  uint64_t v27 = &v30;
  sub_1000027F4((void ***)&v27);
  if (SHIBYTE(v41) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v9 = v35;
  if ((v35 & 0x80u) != 0) {
    uint64_t v9 = v34;
  }
  if (v9)
  {
    siri::dialogengine::Context::Context((siri::dialogengine::Context *)&v30);
    siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)__p);
    siri::dialogengine::RequestInfo::SetTemplateDirs(__p, v38);
    siri::dialogengine::RequestInfo::SetParamsPath(__p, v36);
    siri::dialogengine::RequestInfo::SetLocalePath(__p, &v33);
    LODWORD(v2memset(v42, 0, 7) = 0;
    siri::dialogengine::RequestInfo::SetRequestType(__p, &v27);
    siri::dialogengine::Context::SetRequestInfo(&v30, __p);
    sub_1000286FC((uint64_t)__p);
    uint64_t v10 = siri::dialogengine::Context::Load((siri::dialogengine::Context *)&v30);
    if ((v10 & 1) != 0)
    {
      siri::dialogengine::Context::GetFile((siri::dialogengine::Context *)&v30);
      __p[0] = off_1000790A8;
      __p[1] = v27;
      v42[0] = 0uLL;
      unsigned __int8 v41 = v42;
      (*(void (**)(void *, void **))(*(void *)v27 + 32LL))(v27, __p);
      __p[0] = off_1000790A8;
      sub_100009064((uint64_t)&v41, *(char **)&v42[0]);
      uint64_t v11 = v28;
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          unint64_t v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }

    else
    {
      uint64_t v20 = sub_100002F60(&std::cerr, (uint64_t)"Failed to load CAT locale file: ", 32LL);
      siri::dialogengine::Context::GetRequestInfo((siri::dialogengine::Context *)&v30);
      siri::dialogengine::RequestInfo::GetLocalePath((siri::dialogengine::RequestInfo *)__p);
      if ((v29 & 0x80u) == 0) {
        uint64_t v21 = &v27;
      }
      else {
        uint64_t v21 = v27;
      }
      if ((v29 & 0x80u) == 0) {
        uint64_t v22 = v29;
      }
      else {
        uint64_t v22 = (uint64_t)v28;
      }
      uint64_t v23 = sub_100002F60(v20, (uint64_t)v21, v22);
      std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(void *)(*v23 - 24LL)));
      uint64_t v24 = std::locale::use_facet(&v39, &std::ctype<char>::id);
      uint64_t v25 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10LL);
      std::locale::~locale(&v39);
      std::ostream::put(v23, v25);
      std::ostream::flush(v23);
      sub_1000286FC((uint64_t)__p);
    }

    siri::dialogengine::Context::~Context((siri::dialogengine::Context *)&v30);
  }

  else
  {
    unint64_t v14 = sub_100002F60(&std::cerr, (uint64_t)"Cannot find CAT locale file: ", 29LL);
    if ((v35 & 0x80u) == 0) {
      uint64_t v15 = &v33;
    }
    else {
      uint64_t v15 = v33;
    }
    if ((v35 & 0x80u) == 0) {
      uint64_t v16 = v35;
    }
    else {
      uint64_t v16 = v34;
    }
    uint64_t v17 = sub_100002F60(v14, (uint64_t)v15, v16);
    std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(void *)(*v17 - 24LL)));
    uint64_t v18 = std::locale::use_facet(&v30, &std::ctype<char>::id);
    uint64_t v19 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10LL);
    std::locale::~locale(&v30);
    std::ostream::put(v17, v19);
    std::ostream::flush(v17);
    uint64_t v10 = 0LL;
  }

  if (v37 < 0) {
    operator delete(v36[0]);
  }
  v30.__locale_ = (std::locale::__imp *)v38;
  sub_10000AE78((void ***)&v30);
  return v10;
}

void sub_100030ED0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  if (SLOBYTE(STACK[0xDE7]) < 0) {
    operator delete((void *)STACK[0xDD0]);
  }
  if (SLOBYTE(STACK[0xDFF]) < 0) {
    operator delete((void *)STACK[0xDE8]);
  }
  STACK[0xE20] = (unint64_t)&STACK[0xE00];
  sub_10000AE78((void ***)&STACK[0xE20]);
  _Unwind_Resume(a1);
}

uint64_t sub_100030FE8(uint64_t a1)
{
  *(void *)a1 = off_1000790A8;
  sub_100009064(a1 + 16, *(char **)(a1 + 24));
  return a1;
}

void sub_10003101C(char **a1)
{
  *a1 = (char *)off_1000790A8;
  sub_100009064((uint64_t)(a1 + 2), a1[3]);
  operator delete(a1);
}

void sub_100031050(uint64_t a1, uint64_t a2)
{
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1000310A8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1000310C8(uint64_t **a1, const void **a2, uint64_t a3)
{
  char v5 = (uint64_t **)sub_100005600((uint64_t)a1, &v8, a2);
  BOOL result = *v5;
  if (!*v5)
  {
    sub_100031144((uint64_t)a1, a3, (uint64_t)&v7);
    sub_1000055AC(a1, v8, v5, v7);
    return v7;
  }

  return result;
}

void *sub_100031144@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  __int128 v6 = (char *)operator new(0x38uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + std::iostream::~basic_iostream(v2, v3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  BOOL result = v6 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    BOOL result = sub_10000231C(result, *(void **)a2, *(void *)(a2 + 8));
  }

  else
  {
    *(_OWORD *)BOOL result = *(_OWORD *)a2;
    result[2] = *(void *)(a2 + 16);
  }

  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1000311C4(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0LL;
  sub_100008E74(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000311E0(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  __int128 v6 = (uint64_t **)sub_100005600((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    sub_100031288((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000055AC(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0LL;
    sub_10003131C((uint64_t)v10, 0LL);
  }

  return v7;
}

_BYTE *sub_100031288@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  __int128 v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + std::iostream::~basic_iostream(v2, v3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  BOOL result = v6 + 4;
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    BOOL result = sub_10000231C(result, *(void **)v8, *((void *)v8 + 1));
  }

  else
  {
    __int128 v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)BOOL result = v9;
  }

  v6[8] = 0LL;
  v6[9] = 0LL;
  v6[7] = v6 + 8;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_100031304(_Unwind_Exception *a1)
{
}

void sub_10003131C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_100020C8C((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }

uint64_t **sub_100031360(uint64_t **result, void *a2, void *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    __int128 v6 = *result;
    uint64_t v7 = result[1];
    *BOOL result = (uint64_t *)(result + 1);
    v7[2] = 0LL;
    result[1] = 0LL;
    result[2] = 0LL;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    uint64_t v15 = result;
    uint64_t v16 = v8;
    uint64_t v17 = (const void **)v8;
    if (v8)
    {
      uint64_t v16 = sub_100031558((uint64_t)v8);
      if (a2 != a3)
      {
        __int128 v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 4));
          uint64_t v10 = (uint64_t **)sub_1000314E0((uint64_t)v5, &v18, v17 + 4);
          sub_1000055AC(v5, v18, v10, (uint64_t *)v17);
          uint64_t v17 = (const void **)v16;
          if (v16) {
            uint64_t v16 = sub_100031558((uint64_t)v16);
          }
          uint64_t v11 = (void *)v9[1];
          if (v11)
          {
            do
            {
              a2 = v11;
              uint64_t v11 = (void *)*v11;
            }

            while (v11);
          }

          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v12 = *a2 == (void)v9;
              __int128 v9 = a2;
            }

            while (!v12);
          }

          uint64_t v8 = (uint64_t *)v17;
          if (v17) {
            BOOL v12 = a2 == a3;
          }
          else {
            BOOL v12 = 1;
          }
          __int128 v9 = a2;
        }

        while (!v12);
      }
    }

    BOOL result = (uint64_t **)sub_1000315AC((uint64_t)&v15);
  }

  if (a2 != a3)
  {
    do
    {
      BOOL result = (uint64_t **)sub_100031600(v5, (uint64_t)(a2 + 4));
      unint64_t v13 = (void *)a2[1];
      if (v13)
      {
        do
        {
          unint64_t v14 = v13;
          unint64_t v13 = (void *)*v13;
        }

        while (v13);
      }

      else
      {
        do
        {
          unint64_t v14 = (void *)a2[2];
          BOOL v12 = *v14 == (void)a2;
          a2 = v14;
        }

        while (!v12);
      }

      a2 = v14;
    }

    while (v14 != a3);
  }

  return result;
}

void sub_1000314CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_1000314E0(uint64_t a1, void *a2, const void **a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        uint64_t v5 = (void *)v4;
        uint64_t v4 = *v5;
        BOOL result = v5;
        if (!*v5) {
          goto LABEL_9;
        }
      }

      uint64_t v4 = v5[1];
    }

    while (v4);
    BOOL result = v5 + 1;
  }

  else
  {
    BOOL result = (void *)(a1 + 8);
  }

void *sub_100031558(uint64_t a1)
{
  BOOL result = *(void **)(a1 + 16);
  if (result)
  {
    uint64_t v3 = (void *)*result;
    if (*result == a1)
    {
      *BOOL result = 0LL;
      while (1)
      {
        uint64_t v4 = (void *)result[1];
        if (!v4) {
          break;
        }
        do
        {
          BOOL result = v4;
          uint64_t v4 = (void *)*v4;
        }

        while (v4);
      }
    }

    else
    {
      for (result[1] = 0LL; v3; uint64_t v3 = (void *)result[1])
      {
        do
        {
          BOOL result = v3;
          uint64_t v3 = (void *)*v3;
        }

        while (v3);
      }
    }
  }

  return result;
}

uint64_t sub_1000315AC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = *(void *)(v3 + 16);
      }

      while (v3);
      *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v2;
    }

    sub_100009064(*(void *)a1, (char *)v2);
  }

  return a1;
}

const void **sub_100031600(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t **)sub_1000314E0((uint64_t)a1, &v5, v6 + 4);
  sub_1000055AC(a1, v5, v3, (uint64_t *)v6);
  return v6;
}

uint64_t sub_100031654(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 16;
    sub_1000059D0(i - 16);
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t *sub_1000316A0(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  __int128 v6 = (uint64_t **)sub_100005600((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    sub_100031748((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000055AC(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0LL;
    sub_100005908((uint64_t)v10, 0LL);
  }

  return v7;
}

_BYTE *sub_100031748@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  __int128 v6 = operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + std::iostream::~basic_iostream(v2, v3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  BOOL result = v6 + 4;
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    BOOL result = sub_10000231C(result, *(void **)v8, *((void *)v8 + 1));
  }

  else
  {
    __int128 v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)BOOL result = v9;
  }

  v6[7] = 0LL;
  v6[8] = 0LL;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1000317C0(_Unwind_Exception *a1)
{
}

uint64_t sub_1000317D8(uint64_t a1, const void **a2, uint64_t a3)
{
  *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 24 * a3;
    do
    {
      sub_100031858((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 3;
      v6 -= 24LL;
    }

    while (v6);
  }

  return a1;
}

void sub_100031840(_Unwind_Exception *a1)
{
}

uint64_t *sub_100031858(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t **)sub_1000053AC(a1, a2, &v10, &v9, a3);
  BOOL result = *v6;
  if (!*v6)
  {
    sub_100008FC8((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000055AC(a1, (uint64_t)v10, v6, v8);
    return v8;
  }

  return result;
}

uint64_t sub_1000318D8()
{
  int v0 = sub_100002F60(&std::cout, (uint64_t)"CAT file command line utility. Version 3402.35.1.\n", 50LL);
  uint64_t v1 = sub_100002F60(v0, (uint64_t)"\n", 1LL);
  uint64_t v2 = sub_100002F60(v1, (uint64_t)"usage:", 6LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)));
  uint64_t v3 = std::locale::use_facet(&v6, &std::ctype<char>::id);
  uint64_t v4 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10LL);
  std::locale::~locale(&v6);
  std::ostream::put(v2, v4);
  return std::ostream::flush(v2);
}

void sub_100031988( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_10003199C(uint64_t a1)
{
  std::ios_base::getloc((const std::ios_base *)((char *)&std::cout
                                              + (unint64_t)std::cout.__vftable[-2].~basic_ostream_0));
  uint64_t v2 = std::locale::use_facet(&v5, &std::ctype<char>::id);
  uint64_t v3 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10LL);
  std::locale::~locale(&v5);
  std::ostream::put(&std::cout, v3);
  return std::ostream::flush(&std::cout);
}

void sub_100031ADC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_100031AF0(uint64_t a1)
{
  if ((v38[0] & 0x80000000) != 0) {
    operator delete(__p[0]);
  }
  while (siri::dialogengine::PathExists(&v39))
  {
    uint64_t v2 = sub_100002F60(&std::cout, (uint64_t)"Pause for ", 10LL);
    uint64_t v3 = (void *)std::ostream::operator<<(v2, 5LL);
    uint64_t v4 = sub_100002F60(v3, (uint64_t)" seconds while the file [", 25LL);
    if ((v41 & 0x80u) == 0) {
      locale = &v39;
    }
    else {
      locale = v39.__locale_;
    }
    if ((v41 & 0x80u) == 0) {
      uint64_t v6 = v41;
    }
    else {
      uint64_t v6 = v40;
    }
    uint64_t v7 = sub_100002F60(v4, (uint64_t)locale, v6);
    uint64_t v8 = sub_100002F60(v7, (uint64_t)"] exists", 8LL);
    std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(*v8 - 24LL)));
    uint64_t v9 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
    uint64_t v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10LL);
    std::locale::~locale((std::locale *)__p);
    std::ostream::put(v8, v10);
    std::ostream::flush(v8);
    __p[0] = (void *)5000000000LL;
    std::this_thread::sleep_for ((const std::chrono::nanoseconds *)__p);
  }

  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3) <= 1)
  {
    sub_10003199C(a1);
    return 0LL;
  }

  sub_1000385E8((uint64_t)__p, (__int128 **)a1, (uint64_t)sub_1000318D8);
  siri::dialogengine::StringToLower(v35);
  sub_1000021BC(&v39, "contents");
  uint64_t v42 = sub_10002FA88;
  sub_1000021BC(v43, "diff");
  v43[3] = sub_100007D24;
  sub_1000021BC(v44, "exclude");
  v44[3] = sub_100039410;
  sub_1000021BC(v45, "execute");
  v45[3] = sub_100010130;
  sub_1000021BC(v46, "expand");
  v46[3] = sub_100003350;
  sub_1000021BC(v47, "metadata");
  v47[3] = sub_10003E214;
  sub_1000021BC(v48, "params");
  v48[3] = sub_10000915C;
  sub_1000021BC(v49, "pattern");
  v49[3] = sub_10001543C;
  sub_1000021BC(v50, "test");
  v50[3] = sub_10002D6C8;
  sub_1000021BC(v51, "tobinary");
  v51[3] = sub_10002B0B0;
  sub_1000021BC(v52, "tobinarypatternschema");
  v52[3] = sub_10002B0B0;
  sub_1000021BC(v53, "tobinaryschema");
  v53[3] = sub_10002B0B0;
  sub_1000021BC(v54, "toxml");
  v54[3] = sub_10002B0B0;
  sub_1000021BC(v55, "toyamlpatternschema");
  v55[3] = sub_10002B0B0;
  sub_1000021BC(v56, "toyamlschema");
  v56[3] = sub_10002B0B0;
  sub_1000021BC(v57, "upgrade");
  v57[3] = sub_100048298;
  sub_1000021BC(v58, "validate");
  v58[3] = sub_100045814;
  sub_1000021BC(v59, "metrics");
  void v59[3] = sub_100032FB0;
  sub_1000021BC(v60, "assetdelivery");
  v60[3] = sub_100049198;
  sub_1000021BC(v61, "manifest");
  v61[3] = sub_100038B54;
  sub_1000021BC(v62, "morphun");
  v62[3] = sub_10002E4C4;
  sub_100032398((uint64_t)v33, (const void **)&v39.__locale_, 21LL);
  uint64_t v12 = 84LL;
  do
  {
    v12 -= 4LL;
  }

  while (v12 * 8);
  uint64_t v13 = sub_100008EC0((uint64_t)v33, (const void **)v35);
  if (&v34 != (char **)v13)
  {
    uint64_t v11 = (*(uint64_t (**)(uint64_t, void **))(v13 + 56))(a1, __p);
    goto LABEL_21;
  }

  sub_1000021BC(&v39, "--version");
  int v15 = siri::dialogengine::OptionExists(a1, &v39);
  int v16 = v15;
  if ((char)v41 < 0)
  {
    operator delete(v39.__locale_);
    if (v16) {
      goto LABEL_25;
    }
  }

  else if (v15)
  {
LABEL_25:
    uint64_t v17 = sub_100002F60(&std::cout, (uint64_t)"3402.35.1", 9LL);
    std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(void *)(*v17 - 24LL)));
    uint64_t v18 = std::locale::use_facet(&v39, &std::ctype<char>::id);
    uint64_t v19 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10LL);
    std::locale::~locale(&v39);
    std::ostream::put(v17, v19);
    std::ostream::flush(v17);
    goto LABEL_26;
  }

  sub_1000021BC(&v39, "--minVersion");
  int v21 = siri::dialogengine::OptionExists(a1, &v39);
  int v22 = v21;
  if ((char)v41 < 0)
  {
    operator delete(v39.__locale_);
    if (v22) {
      goto LABEL_30;
    }
LABEL_44:
    sub_10003199C(a1);
    uint64_t v11 = 0LL;
LABEL_45:
    uint64_t v20 = "false";
    goto LABEL_46;
  }

  if (!v21) {
    goto LABEL_44;
  }
LABEL_30:
  sub_1000021BC(v31, "--minVersion");
  siri::dialogengine::GetOption(&v39, a1, v31);
  sub_1000021BC(v29, "3402.35.1");
  uint64_t v11 = siri::dialogengine::VersionLessThanOrEqual(&v39, v29);
  if (v30 < 0) {
    operator delete(v29[0]);
  }
  if (v32 < 0) {
    operator delete(v31[0]);
  }
  if ((_DWORD)v11) {
    uint64_t v23 = "Minimum version met";
  }
  else {
    uint64_t v23 = "Minimum version not met";
  }
  if ((_DWORD)v11) {
    uint64_t v24 = 19LL;
  }
  else {
    uint64_t v24 = 23LL;
  }
  uint64_t v25 = sub_100002F60(&std::cout, (uint64_t)v23, v24);
  std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(void *)(*v25 - 24LL)));
  uint64_t v26 = std::locale::use_facet(&v39, &std::ctype<char>::id);
  uint64_t v27 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10LL);
  std::locale::~locale(&v39);
  std::ostream::put(v25, v27);
  std::ostream::flush(v25);
LABEL_21:
  if (!(_DWORD)v11) {
    goto LABEL_45;
  }
LABEL_26:
  uint64_t v20 = "true";
  uint64_t v11 = 1LL;
LABEL_46:
  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"CatUtilMain() exiting with result: %s", v14, v20);
  sub_100009064((uint64_t)v33, v34);
  if (v36 < 0) {
    operator delete(v35[0]);
  }
  v39.__locale_ = (std::locale::__imp *)__p;
  sub_1000027F4((void ***)&v39);
  return v11;
}

void sub_100032234( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20, char a21, char a22, char a23, char *a24, uint64_t a25, std::locale *a26, uint64_t a27, int a28, __int16 a29, char a30, char a31, std::locale a32, uint64_t a33, int a34, __int16 a35, char a36, char a37, uint64_t a38, std::locale a39, uint64_t a40, int a41, __int16 a42, char a43, char a44)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a44 < 0) {
    operator delete(a39.__locale_);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  sub_100009064((uint64_t)&a23, a24);
  if (a31 < 0) {
    operator delete(a26);
  }
  a26 = &a32;
  sub_1000027F4((void ***)&a26);
  _Unwind_Resume(a1);
}

uint64_t sub_100032398(uint64_t a1, const void **a2, uint64_t a3)
{
  *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 32 * a3;
    do
    {
      sub_100032414((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 4;
      v6 -= 32LL;
    }

    while (v6);
  }

  return a1;
}

void sub_1000323FC(_Unwind_Exception *a1)
{
}

uint64_t *sub_100032414(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t **)sub_1000053AC(a1, a2, &v10, &v9, a3);
  BOOL result = *v6;
  if (!*v6)
  {
    sub_100032494((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000055AC(a1, (uint64_t)v10, v6, v8);
    return v8;
  }

  return result;
}

_BYTE *sub_100032494@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + std::iostream::~basic_iostream(v2, v3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  BOOL result = v6 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    BOOL result = sub_10000231C(result, *(void **)a2, *(void *)(a2 + 8));
  }

  else
  {
    *(_OWORD *)BOOL result = *(_OWORD *)a2;
    *((void *)v6 + 6) = *(void *)(a2 + 16);
  }

  *((void *)v6 + memset(v42, 0, 7) = *(void *)(a2 + 24);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_10003251C(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0LL;
  sub_100008E74(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_100032538()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_10007C720);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10007C720))
  {
    sub_1000021BC(&v17, "Weather#dailyForecast");
    sub_100032990((uint64_t)&qword_10007C708, &v17, 1uLL);
    if (v18 < 0) {
      operator delete((void *)v17);
    }
    __cxa_atexit((void (*)(void *))sub_100032A2C, &qword_10007C708, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10007C720);
  }

  unsigned __int8 v1 = atomic_load((unsigned __int8 *)&qword_10007C740);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_10007C740))
  {
    qword_10007C738 = 0LL;
    qword_10007C730 = 0LL;
    qword_10007C728 = (uint64_t)&qword_10007C730;
    __cxa_atexit((void (*)(void *))sub_100032A60, &qword_10007C728, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10007C740);
  }

  if (!qword_10007C738)
  {
    uint64_t v2 = qword_10007C708;
    for (uint64_t i = *(void *)algn_10007C710; v2 != i; v2 += 24LL)
    {
      siri::dialogengine::StringToLower(&v17);
      sub_1000366F8((uint64_t **)&qword_10007C728, (const void **)&v17, (uint64_t)&v17);
      if (v18 < 0) {
        operator delete((void *)v17);
      }
    }
  }

  sub_1000021BC(v11, "dateTime#timeShortTwentyFourHourDisplay");
  siri::dialogengine::StringToLower(&v17);
  if (siri::dialogengine::StringsEqual(v15, &v17))
  {
    sub_1000021BC(__p, "it");
    char v4 = siri::dialogengine::StringsEqual(v13, __p);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }

  else
  {
    char v4 = 0;
  }

  if (v18 < 0) {
    operator delete((void *)v17);
  }
  if (v12 < 0)
  {
    operator delete(v11[0]);
    if ((v4 & 1) != 0)
    {
LABEL_31:
      uint64_t v7 = 1LL;
      goto LABEL_32;
    }
  }

  else if ((v4 & 1) != 0)
  {
    goto LABEL_31;
  }

  siri::dialogengine::StringToLower(&v17);
  sub_1000021BC(v11, "catci/dialogenginetemplates");
  int v5 = siri::dialogengine::StringContains(&v17, v11);
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  if (v18 < 0)
  {
    operator delete((void *)v17);
    if (!v5) {
      goto LABEL_38;
    }
  }

  else if (!v5)
  {
    goto LABEL_38;
  }

  sub_1000021BC(&v17, "example#");
  if ((siri::dialogengine::StringContains(v15, &v17) & 1) != 0)
  {
    char v6 = 1;
  }

  else
  {
    sub_1000021BC(v11, "phrases#");
    char v6 = siri::dialogengine::StringContains(v15, v11);
    if (v12 < 0) {
      operator delete(v11[0]);
    }
  }

  if (v18 < 0)
  {
    operator delete((void *)v17);
    if ((v6 & 1) != 0) {
      goto LABEL_31;
    }
  }

  else if ((v6 & 1) != 0)
  {
    goto LABEL_31;
  }

LABEL_38:
  uint64_t v7 = 0LL;
LABEL_32:
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  return v7;
}

    uint64_t v8 = v6;
    sub_100023250((uint64_t)v15);
    exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
    char v10 = *((_DWORD *)this + 4);
    uint64_t v13 = *((void *)this + 1);
    char v14 = v10;
    sub_1000021BC(&v11, "unknown escape character: ");
    std::string::push_back(&v11, v8);
    char v12 = v11;
    memset(&v11, 0, sizeof(v11));
    sub_1000413D8((uint64_t)exception, &v13, (uint64_t)&v12);
    std::logic_error *exception = off_1000792A0;
  }

  switch(v6)
  {
    case 'L':
      uint64_t v7 = "\u2028";
      goto LABEL_4;
    case 'M':
    case 'O':
    case 'Q':
    case 'R':
    case 'S':
    case 'T':
      goto LABEL_38;
    case 'N':
      uint64_t v7 = "\x85";
      goto LABEL_4;
    case 'P':
      uint64_t v7 = "\u2029";
      goto LABEL_4;
    case 'U':
      YAML::Exp::Escape(this, (YAML::Stream *)8, a2);
      return;
    default:
      if (v6 == 47)
      {
        uint64_t v7 = "/";
        goto LABEL_4;
      }

      if (v6 != 48) {
        goto LABEL_38;
      }
      *(_BYTE *)(a2 + 23) = 1;
      *(_WORD *)a2 = 0;
      return;
  }

void sub_100032890( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *__p, uint64_t a22, int a23, __int16 a24, char a25, char a26, void *a27, uint64_t a28, int a29, __int16 a30, char a31, char a32)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100032990(uint64_t a1, __int128 *a2, unint64_t a3)
{
  *(void *)(a1 + 16) = 0LL;
  uint64_t v4 = a1 + 16;
  *(void *)a1 = 0LL;
  *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
  if (a3)
  {
    sub_100002618((void *)a1, a3);
    *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = sub_100007ACC(v4, a2, (__int128 *)((char *)a2 + 24 * a3), *(char **)(a1 + 8));
  }

  return a1;
}

void sub_100032A0C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + std::iostream::~basic_iostream(v2, v3 + 8) = v10;
  sub_1000027F4(&a9);
  _Unwind_Resume(a1);
}

void **sub_100032A2C(void **a1)
{
  uint64_t v3 = a1;
  sub_1000027F4(&v3);
  return a1;
}

uint64_t sub_100032A60(uint64_t a1)
{
  return a1;
}

void sub_100032A88(uint64_t a1)
{
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_100032AFC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100032B30(uint64_t a1)
{
  *(_DWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  sub_1000317D8(a1 + 152, 0LL, 0LL);
  return a1;
}

void sub_100032B94(_Unwind_Exception *a1)
{
}

void sub_100032BBC(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    sub_10000231C(__dst, *(void **)a1, *(void *)(a1 + 8));
  }

  else
  {
    *(_OWORD *)__int128 __dst = *(_OWORD *)a1;
    uint64_t v18 = *(void *)(a1 + 16);
  }

  if (*(char *)(a1 + 47) < 0)
  {
    sub_10000231C(&v19, *(void **)(a1 + 24), *(void *)(a1 + 32));
  }

  else
  {
    __int128 v19 = *(_OWORD *)(a1 + 24);
    uint64_t v20 = *(void *)(a1 + 40);
  }

  std::to_string(&v21, *(void *)(a1 + 72));
  std::to_string(&v22, *(void *)(a1 + 80));
  std::to_string(&v23, *(void *)(a1 + 88));
  std::to_string(&v24, *(void *)(a1 + 96));
  std::to_string(&v25, *(void *)(a1 + 104));
  std::to_string(&v26, *(void *)(a1 + 112));
  std::to_string(&v27, *(void *)(a1 + 128));
  std::to_string(&v28, *(void *)(a1 + 136));
  std::to_string(&v29, *(float *)(a1 + 144));
  if (*(char *)(a1 + 71) < 0)
  {
    sub_10000231C(&v30, *(void **)(a1 + 48), *(void *)(a1 + 56));
  }

  else
  {
    __int128 v30 = *(_OWORD *)(a1 + 48);
    uint64_t v31 = *(void *)(a1 + 64);
  }

  sub_1000021BC(__p, ", ");
  siri::dialogengine::StringJoin(&v11, a1 + 152, __p);
  uint64_t v4 = std::string::insert(&v11, 0LL, "");
  __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__l.__cap_ = v4->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0LL;
  v4->__r_.__value_.__l.__cap_ = 0LL;
  v4->__r_.__value_.__r.__words[0] = 0LL;
  char v6 = std::string::append(&v12, "");
  __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  std::string::size_type cap = v6->__r_.__value_.__l.__cap_;
  __int128 v32 = v7;
  v6->__r_.__value_.__l.__size_ = 0LL;
  v6->__r_.__value_.__l.__cap_ = 0LL;
  v6->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v13 = 0LL;
  char v14 = 0LL;
  v15[0] = 0LL;
  v15[1] = &v13;
  char v16 = 0;
  uint64_t v13 = (char *)operator new(0x138uLL);
  char v14 = v13;
  v15[0] = v13 + 312;
  char v14 = sub_100007ACC((uint64_t)v15, (__int128 *)__dst, &v34, v13);
  uint64_t v8 = 39LL;
  do
  {
    if (SHIBYTE(__dst[v8 - 1]) < 0) {
      operator delete((void *)v15[v8]);
    }
    v8 -= 3LL;
  }

  while (v8 * 8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  sub_1000021BC(__dst, ", ");
  siri::dialogengine::StringJoin(a2, &v13, __dst);
  if (SHIBYTE(v18) < 0) {
    operator delete(__dst[0]);
  }
  __dst[0] = &v13;
  sub_1000027F4((void ***)__dst);
}

void sub_100032EA4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, char a27, uint64_t a28, uint64_t a29, char a30, uint64_t a31, char *__p, uint64_t a33, int a34, __int16 a35, char a36, char a37)
{
  if (a37 < 0) {
    operator delete(__p);
  }
  int64x2_t __p = &a27;
  sub_1000027F4((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_100032FB0(void *a1, uint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3) < 3 || sub_100038648((uint64_t)a1))
  {
    sub_100038638(a2);
    sub_1000021BC( &__dst,  "\n <EXECUTABLE> <COMMAND> --templateDir <dir> [--catId <id>] [--locale <locale>] [--dialogIDsOnly]\n \n If --templateDir and --catId are specified, then report metrics for the specified CAT file.\n If --locale is also specified then report metrics for only that locale, otherwise report for all locales.\n \n If --templateDir is specified and --catId is not, then find and report metrics for all CAT files\n under the directory and any template directories nested within it.  If --locale is specified, then\n only generate metrics for that locale of each CAT file, otherwise report metrics for all locales for\n all CAT files.\n \n If the --dialogIDsOnly option is present, this will produce a JSON that contains only the dialog IDs\n present in each CAT file for the purpose of comparison and identification of mismatches.\n \n");
    sub_1000021BC(&v145, "metrics");
    sub_1000388C0((uint64_t)a1, (uint64_t)&v145, (uint64_t)&__dst);
    return 0LL;
  }

  sub_1000021BC(&v145, "--templateDir");
  siri::dialogengine::GetOption(&__dst, a1, &v145);
  siri::dialogengine::ExpandPath(&__str, &__dst);
  std::string::size_type size = __str.__r_.__value_.__s.__size_;
  if ((__str.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    if ((siri::dialogengine::DirExists(&__str) & 1) != 0)
    {
      sub_1000021BC(&__dst, "--catId");
      siri::dialogengine::GetOption(&v132, a1, &__dst);
      sub_1000021BC(&__dst, "--locale");
      siri::dialogengine::GetOption(&v131, a1, &__dst);
      sub_1000021BC(&__dst, "--dialogIDsOnly");
      int v7 = siri::dialogengine::OptionExists(a1, &__dst);
      memset(&v130, 0, sizeof(v130));
      std::string::size_type v8 = v132.__r_.__value_.__s.__size_;
      if ((v132.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        std::string::size_type v8 = v132.__r_.__value_.__l.__size_;
      }
      if (v8)
      {
        sub_100034400((uint64_t)&__str, &v132, &v131, (uint64_t *)&__dst);
        sub_10003680C((void **)&v130.__r_.__value_.__l.__data_);
        std::string v130 = __dst;
        memset(&__dst, 0, sizeof(__dst));
        v145.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
        sub_100036788((void ***)&v145);
        if (v7)
        {
LABEL_27:
          *(_OWORD *)&v145.__r_.__value_.__r.__words[1] = 0uLL;
          v145.__r_.__value_.__r.__words[0] = (std::string::size_type)&v145.__r_.__value_.__l.__size_;
          *(_OWORD *)&v144.__r_.__value_.__r.__words[1] = 0uLL;
          v144.__r_.__value_.__r.__words[0] = (std::string::size_type)&v144.__r_.__value_.__l.__size_;
          std::string::size_type v114 = v130.__r_.__value_.__l.__size_;
          for (std::string::size_type i = v130.__r_.__value_.__r.__words[0]; i != v114; i += 176LL)
          {
            memset(&v143, 0, sizeof(v143));
            char v10 = *(void **)(i + 152);
            if (v10 != (void *)(i + 160))
            {
              do
              {
                siri::dialogengine::CreateJSONStringVal(&v142, v10 + 4);
                std::string::size_type v11 = v143.__r_.__value_.__l.__size_;
                if (v143.__r_.__value_.__l.__size_ >= v143.__r_.__value_.__l.__cap_)
                {
                  uint64_t v12 = (uint64_t)(v143.__r_.__value_.__l.__size_ - v143.__r_.__value_.__r.__words[0]) >> 4;
                  unint64_t v13 = v12 + 1;
                  int64_t v14 = v143.__r_.__value_.__l.__cap_ - v143.__r_.__value_.__r.__words[0];
                  else {
                    unint64_t v15 = v13;
                  }
                  p_std::string::size_type cap = &v143.__r_.__value_.__l.__cap_;
                  char v16 = (char *)sub_100028644((uint64_t)&v143.__r_.__value_.__l.__cap_, v15);
                  uint64_t v18 = &v16[16 * v12];
                  *(_OWORD *)uint64_t v18 = *(_OWORD *)&v142.__r_.__value_.__l.__data_;
                  *(_OWORD *)&v142.__r_.__value_.__l.__data_ = 0uLL;
                  __int128 v19 = (void *)v143.__r_.__value_.__l.__size_;
                  std::string::size_type v20 = v143.__r_.__value_.__r.__words[0];
                  if (v143.__r_.__value_.__l.__size_ == v143.__r_.__value_.__r.__words[0])
                  {
                    int64x2_t v23 = vdupq_n_s64(v143.__r_.__value_.__l.__size_);
                    std::string::size_type v21 = (std::string::size_type)&v16[16 * v12];
                  }

                  else
                  {
                    std::string::size_type v21 = (std::string::size_type)&v16[16 * v12];
                    do
                    {
                      __int128 v22 = *((_OWORD *)v19 - 1);
                      v19 -= 2;
                      *(_OWORD *)(v21 - 16) = v22;
                      v21 -= 16LL;
                      void *v19 = 0LL;
                      v19[1] = 0LL;
                    }

                    while (v19 != (void *)v20);
                    int64x2_t v23 = *(int64x2_t *)&v143.__r_.__value_.__l.__data_;
                  }

                  std::string::size_type v24 = (std::string::size_type)(v18 + 16);
                  v143.__r_.__value_.__r.__words[0] = v21;
                  v143.__r_.__value_.__l.__size_ = (std::string::size_type)(v18 + 16);
                  *(int64x2_t *)&__dst.__r_.__value_.__r.__words[1] = v23;
                  std::string::size_type cap = v143.__r_.__value_.__l.__cap_;
                  v143.__r_.__value_.__l.__cap_ = (std::string::size_type)&v16[16 * v17];
                  std::string::size_type v148 = cap;
                  __dst.__r_.__value_.__r.__words[0] = v23.i64[0];
                  sub_100031654((uint64_t)&__dst);
                  std::string v26 = (std::__shared_weak_count *)v142.__r_.__value_.__l.__size_;
                  v143.__r_.__value_.__l.__size_ = v24;
                  if (v142.__r_.__value_.__l.__size_)
                  {
                    std::string v27 = (unint64_t *)(v142.__r_.__value_.__l.__size_ + 8);
                    do
                      unint64_t v28 = __ldaxr(v27);
                    while (__stlxr(v28 - 1, v27));
                    if (!v28)
                    {
                      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
                      std::__shared_weak_count::__release_weak(v26);
                    }
                  }
                }

                else
                {
                  *(_OWORD *)v143.__r_.__value_.__l.__size_ = *(_OWORD *)&v142.__r_.__value_.__l.__data_;
                  v143.__r_.__value_.__l.__size_ = v11 + 16;
                }

                std::string v29 = (void *)v10[1];
                if (v29)
                {
                  do
                  {
                    __int128 v30 = v29;
                    std::string v29 = (void *)*v29;
                  }

                  while (v29);
                }

                else
                {
                  do
                  {
                    __int128 v30 = (void *)v10[2];
                    BOOL v31 = *v30 == (void)v10;
                    char v10 = v30;
                  }

                  while (!v31);
                }

                char v10 = v30;
              }

              while (v30 != (void *)(i + 160));
            }

            siri::dialogengine::CreateJSONArrayVal(&__dst, &v143);
            v141.__r_.__value_.__r.__words[0] = i + 24;
            __int128 v32 = sub_1000316A0( (uint64_t **)&v144,  (const void **)(i + 24),  (uint64_t)&std::piecewise_construct,  (__int128 **)&v141);
            sub_1000153D8((uint64_t)(v32 + 7), (__int128 *)&__dst);
            __int128 v33 = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
            if (__dst.__r_.__value_.__l.__size_)
            {
              __int128 v34 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 8);
              do
                unint64_t v35 = __ldaxr(v34);
              while (__stlxr(v35 - 1, v34));
              if (!v35)
              {
                ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
                std::__shared_weak_count::__release_weak(v33);
              }
            }

            siri::dialogengine::CreateJSONObjectVal(&__dst, &v144);
            v141.__r_.__value_.__r.__words[0] = i;
            char v36 = sub_1000316A0( (uint64_t **)&v145,  (const void **)i,  (uint64_t)&std::piecewise_construct,  (__int128 **)&v141);
            sub_1000153D8((uint64_t)(v36 + 7), (__int128 *)&__dst);
            char v37 = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
            if (__dst.__r_.__value_.__l.__size_)
            {
              uint64_t v38 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 8);
              do
                unint64_t v39 = __ldaxr(v38);
              while (__stlxr(v39 - 1, v38));
              if (!v39)
              {
                ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
                std::__shared_weak_count::__release_weak(v37);
              }
            }

            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v143;
            sub_100007BFC((void ***)&__dst);
          }

          p_dst = &__dst;
          siri::dialogengine::ConstructJSONString(&__dst, &v145);
          if ((__dst.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
          }
          size_t v41 = strlen((const char *)p_dst);
          uint64_t v42 = sub_100002F60(&std::cout, (uint64_t)p_dst, v41);
          std::ios_base::getloc((const std::ios_base *)((char *)v42 + *(void *)(*v42 - 24LL)));
          uint64_t v43 = std::locale::use_facet((const std::locale *)&v143, &std::ctype<char>::id);
          uint64_t v44 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v43->__vftable[2].~facet_0)(v43, 10LL);
          std::locale::~locale((std::locale *)&v143);
          std::ostream::put(v42, v44);
          std::ostream::flush(v42);
          sub_100005988((uint64_t)&v144, (void *)v144.__r_.__value_.__l.__size_);
          sub_100005988((uint64_t)&v145, (void *)v145.__r_.__value_.__l.__size_);
LABEL_220:
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v130;
          sub_100036788((void ***)&__dst);
          uint64_t v4 = 1LL;
          goto LABEL_225;
        }

LABEL_187:
        if (v130.__r_.__value_.__r.__words[0] != v130.__r_.__value_.__l.__size_)
        {
          sub_1000021BC( &__dst,  "catId, locale, xml lines, dialogs, texts, phrases, conditions, parameters, semantic concepts, expansion line s, expansion time (seconds), file path, dialog IDs");
          if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string v95 = &__dst;
          }
          else {
            std::string v95 = (std::string *)__dst.__r_.__value_.__r.__words[0];
          }
          if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            uint64_t v96 = __dst.__r_.__value_.__s.__size_;
          }
          else {
            uint64_t v96 = __dst.__r_.__value_.__l.__size_;
          }
          uint64_t v97 = sub_100002F60(&std::cout, (uint64_t)v95, v96);
          std::ios_base::getloc((const std::ios_base *)((char *)v97 + *(void *)(*v97 - 24LL)));
          uint64_t v98 = std::locale::use_facet((const std::locale *)&v145, &std::ctype<char>::id);
          uint64_t v99 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v98->__vftable[2].~facet_0)(v98, 10LL);
          std::locale::~locale((std::locale *)&v145);
          std::ostream::put(v97, v99);
          std::ostream::flush(v97);
          std::string::size_type v101 = v130.__r_.__value_.__l.__size_;
          for (uint64_t j = v130.__r_.__value_.__r.__words[0]; j != v101; j += 176LL)
          {
            sub_100032BBC(j, &__dst);
            if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              std::string::size_type v102 = &__dst;
            }
            else {
              std::string::size_type v102 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            }
            if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              uint64_t v103 = __dst.__r_.__value_.__s.__size_;
            }
            else {
              uint64_t v103 = __dst.__r_.__value_.__l.__size_;
            }
            uint64_t v104 = sub_100002F60(&std::cout, (uint64_t)v102, v103);
            std::ios_base::getloc((const std::ios_base *)((char *)v104 + *(void *)(*v104 - 24LL)));
            std::string::size_type v105 = std::locale::use_facet((const std::locale *)&v145, &std::ctype<char>::id);
            uint64_t v106 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v105->__vftable[2].~facet_0)( v105,  10LL);
            std::locale::~locale((std::locale *)&v145);
            std::ostream::put(v104, v106);
            std::ostream::flush(v104);
          }
        }

        sub_1000021BC(&v145, "catutil metrics took ");
        siri::dialogengine::ElapsedTimer::GetSecs((siri::dialogengine::ElapsedTimer *)v134);
        std::to_string(&v144, v107);
        if ((v144.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          std::string::size_type v108 = &v144;
        }
        else {
          std::string::size_type v108 = (std::string *)v144.__r_.__value_.__r.__words[0];
        }
        if ((v144.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          std::string::size_type v109 = v144.__r_.__value_.__s.__size_;
        }
        else {
          std::string::size_type v109 = v144.__r_.__value_.__l.__size_;
        }
        unsigned __int8 v110 = std::string::append(&v145, (const std::string::value_type *)v108, v109);
        __int128 v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
        __dst.__r_.__value_.__l.__cap_ = v110->__r_.__value_.__l.__cap_;
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v111;
        v110->__r_.__value_.__l.__size_ = 0LL;
        v110->__r_.__value_.__l.__cap_ = 0LL;
        v110->__r_.__value_.__r.__words[0] = 0LL;
        uint64_t v112 = std::string::append(&__dst, " seconds");
        __int128 v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
        std::string::size_type v117 = v112->__r_.__value_.__l.__cap_;
        *(_OWORD *)uint64_t v116 = v113;
        v112->__r_.__value_.__l.__size_ = 0LL;
        v112->__r_.__value_.__l.__cap_ = 0LL;
        v112->__r_.__value_.__r.__words[0] = 0LL;
        sub_100034888((uint64_t)v116);
        if (SHIBYTE(v117) < 0) {
          operator delete(v116[0]);
        }
        goto LABEL_220;
      }

      sub_1000021BC(&__dst, "dialog");
      siri::dialogengine::JoinPath(&v129, &__str, &__dst);
      if ((siri::dialogengine::DirExists(&v129) & 1) == 0) {
        std::string::operator=(&v129, &__str);
      }
      siri::dialogengine::ListDirRecursively(&v127, &v129);
      v126[0] = 0LL;
      v126[1] = 0LL;
      std::string::size_type v125 = v126;
      uint64_t v53 = v127;
      __int128 v54 = v128;
      uint64_t v55 = v126;
      if (v127 != v128)
      {
        while (1)
        {
          if (*((char *)v53 + 23) < 0)
          {
            sub_10000231C(&__dst, *(void **)v53, *((void *)v53 + 1));
          }

          else
          {
            __int128 v56 = *v53;
            __dst.__r_.__value_.__l.__cap_ = *((void *)v53 + 2);
            *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v56;
          }

          siri::dialogengine::JoinPath(&v145, &v129, &__dst);
          std::string __dst = v145;
          sub_1000021BC(&v145, "Templates/dialog/");
          char v57 = siri::dialogengine::StringContains(&__dst, &v145);
          char v58 = v57;
          if ((char)v145.__r_.__value_.__s.__size_ < 0)
          {
            operator delete(v145.__r_.__value_.__l.__data_);
            if ((v58 & 1) == 0) {
              goto LABEL_97;
            }
          }

          else if ((v57 & 1) == 0)
          {
            goto LABEL_97;
          }

          sub_1000021BC(&v145, "cat");
          char HasExtension = siri::dialogengine::HasExtension(&__dst, &v145);
          char v60 = HasExtension;
          if (((char)v145.__r_.__value_.__s.__size_ & 0x80000000) == 0)
          {
            if ((HasExtension & 1) == 0) {
              goto LABEL_97;
            }
LABEL_96:
            sub_100008F4C((uint64_t **)&v125, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&__dst);
            goto LABEL_97;
          }

          operator delete(v145.__r_.__value_.__l.__data_);
          if ((v60 & 1) != 0) {
            goto LABEL_96;
          }
LABEL_97:
          uint64_t v53 = (__int128 *)((char *)v53 + 24);
          if (v53 == v54)
          {
            uint64_t v55 = v125;
            break;
          }
        }
      }

      int v115 = v7;
      sub_100036878(&v123, v55, v126);
      unint64_t v61 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (v124 - v123));
      if (v124 == v123) {
        uint64_t v62 = 0LL;
      }
      else {
        uint64_t v62 = v61;
      }
      sub_100036A6C((uint64_t)v123, v124, (uint64_t)&__dst, v62, 1);
      if (v124 == v123)
      {
LABEL_184:
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v123;
        sub_1000027F4((void ***)&__dst);
        sub_100009064((uint64_t)&v125, v126[0]);
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v127;
        sub_1000027F4((void ***)&__dst);
        if (v115) {
          goto LABEL_27;
        }
        goto LABEL_187;
      }

      uint64_t v63 = 0LL;
      unint64_t v64 = 0LL;
      unint64_t v65 = ((char *)v124 - (char *)v123) / 24;
      if (v65 <= 1) {
        uint64_t v66 = 1LL;
      }
      else {
        uint64_t v66 = ((char *)v124 - (char *)v123) / 24;
      }
      while (1)
      {
        int64x2_t v67 = &v123[v63];
        if (SHIBYTE(v123[v63 + 2]) < 0)
        {
          sub_10000231C(&v122, (void *)*v67, (unint64_t)v67[1]);
        }

        else
        {
          __int128 v68 = *(_OWORD *)v67;
          v122.__r_.__value_.__l.__cap_ = (std::string::size_type)v67[2];
          *(_OWORD *)&v122.__r_.__value_.__l.__data_ = v68;
        }

        sub_1000021BC(&__dst, "Templates/dialog/");
        uint64_t v69 = siri::dialogengine::StringRFind(&v122, &__dst, -1LL);
        sub_1000021BC(&__dst, "Templates");
        std::string::size_type v70 = __dst.__r_.__value_.__s.__size_;
        if ((__dst.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          std::string::size_type v70 = __dst.__r_.__value_.__l.__size_;
        }
        std::string::basic_string(&v121, &v122, 0LL, v70 + v69, (std::allocator<char> *)&v145);
        siri::dialogengine::CatPathToId(&v120, &v122);
        else {
          std::string v119 = v121;
        }
        else {
          std::string __p = v120;
        }
        sub_1000021BC(&v140, "Processing CAT file ");
        std::to_string(&v139, v64);
        if ((v139.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v71 = &v139;
        }
        else {
          uint64_t v71 = (std::string *)v139.__r_.__value_.__r.__words[0];
        }
        if ((v139.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          std::string::size_type v72 = v139.__r_.__value_.__s.__size_;
        }
        else {
          std::string::size_type v72 = v139.__r_.__value_.__l.__size_;
        }
        uint64_t v73 = std::string::append(&v140, (const std::string::value_type *)v71, v72);
        __int128 v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
        v141.__r_.__value_.__l.__cap_ = v73->__r_.__value_.__l.__cap_;
        *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v74;
        v73->__r_.__value_.__l.__size_ = 0LL;
        v73->__r_.__value_.__l.__cap_ = 0LL;
        v73->__r_.__value_.__r.__words[0] = 0LL;
        int v75 = std::string::append(&v141, " of ");
        __int128 v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
        v142.__r_.__value_.__l.__cap_ = v75->__r_.__value_.__l.__cap_;
        *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v76;
        v75->__r_.__value_.__l.__size_ = 0LL;
        v75->__r_.__value_.__l.__cap_ = 0LL;
        v75->__r_.__value_.__r.__words[0] = 0LL;
        std::to_string(&v138, v65);
        if ((v138.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          std::string::size_type v77 = &v138;
        }
        else {
          std::string::size_type v77 = (std::string *)v138.__r_.__value_.__r.__words[0];
        }
        if ((v138.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          std::string::size_type v78 = v138.__r_.__value_.__s.__size_;
        }
        else {
          std::string::size_type v78 = v138.__r_.__value_.__l.__size_;
        }
        uint64_t v79 = std::string::append(&v142, (const std::string::value_type *)v77, v78);
        __int128 v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
        v143.__r_.__value_.__l.__cap_ = v79->__r_.__value_.__l.__cap_;
        *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v80;
        v79->__r_.__value_.__l.__size_ = 0LL;
        v79->__r_.__value_.__l.__cap_ = 0LL;
        v79->__r_.__value_.__r.__words[0] = 0LL;
        std::string::size_type v81 = std::string::append(&v143, ":  ");
        __int128 v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
        v144.__r_.__value_.__l.__cap_ = v81->__r_.__value_.__l.__cap_;
        *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v82;
        v81->__r_.__value_.__l.__size_ = 0LL;
        v81->__r_.__value_.__l.__cap_ = 0LL;
        v81->__r_.__value_.__r.__words[0] = 0LL;
        if ((v119.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          size_t v83 = &v119;
        }
        else {
          size_t v83 = (std::string *)v119.__r_.__value_.__r.__words[0];
        }
        if ((v119.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          std::string::size_type v84 = v119.__r_.__value_.__s.__size_;
        }
        else {
          std::string::size_type v84 = v119.__r_.__value_.__l.__size_;
        }
        uint64_t v85 = std::string::append(&v144, (const std::string::value_type *)v83, v84);
        __int128 v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
        v145.__r_.__value_.__l.__cap_ = v85->__r_.__value_.__l.__cap_;
        *(_OWORD *)&v145.__r_.__value_.__l.__data_ = v86;
        v85->__r_.__value_.__l.__size_ = 0LL;
        v85->__r_.__value_.__l.__cap_ = 0LL;
        v85->__r_.__value_.__r.__words[0] = 0LL;
        int v87 = std::string::append(&v145, "  ");
        __int128 v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
        __dst.__r_.__value_.__l.__cap_ = v87->__r_.__value_.__l.__cap_;
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v88;
        v87->__r_.__value_.__l.__size_ = 0LL;
        v87->__r_.__value_.__l.__cap_ = 0LL;
        v87->__r_.__value_.__r.__words[0] = 0LL;
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          std::string::size_type v90 = __p.__r_.__value_.__s.__size_;
        }
        else {
          std::string::size_type v90 = __p.__r_.__value_.__l.__size_;
        }
        unint64_t v91 = std::string::append(&__dst, (const std::string::value_type *)p_p, v90);
        uint64_t v93 = (void *)v91->__r_.__value_.__r.__words[0];
        std::string::size_type v92 = (void *)v91->__r_.__value_.__l.__size_;
        v146[0] = v91->__r_.__value_.__r.__words[2];
        *(_DWORD *)((char *)v146 + 3) = *(_DWORD *)((char *)&v91->__r_.__value_.__r.__words[2] + 3);
        int v94 = (char)v91->__r_.__value_.__s.__size_;
        v91->__r_.__value_.__l.__size_ = 0LL;
        v91->__r_.__value_.__l.__cap_ = 0LL;
        v91->__r_.__value_.__r.__words[0] = 0LL;
        if ((char)v140.__r_.__value_.__s.__size_ < 0)
        {
          operator delete(v140.__r_.__value_.__l.__data_);
          if ((v94 & 0x80000000) == 0)
          {
LABEL_165:
            v135[0] = v93;
            v135[1] = v92;
            *(_DWORD *)std::string::size_type v136 = v146[0];
            *(_DWORD *)&v136[3] = *(_DWORD *)((char *)v146 + 3);
            char v137 = v94;
            goto LABEL_168;
          }
        }

        else if ((v94 & 0x80000000) == 0)
        {
          goto LABEL_165;
        }

        sub_10000231C(v135, v93, (unint64_t)v92);
LABEL_168:
        sub_100034888((uint64_t)v135);
        if (v137 < 0)
        {
          operator delete(v135[0]);
          if (v94 < 0) {
LABEL_183:
          }
            operator delete(v93);
        }

        else if (v94 < 0)
        {
          goto LABEL_183;
        }

        sub_100034400((uint64_t)&v121, &v120, &v131, (uint64_t *)&__dst);
        sub_100037E80( (uint64_t *)&v130,  (std::string *)v130.__r_.__value_.__l.__size_,  (std::string *)__dst.__r_.__value_.__l.__data_,  (__int128 *)__dst.__r_.__value_.__l.__size_,  0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(__dst.__r_.__value_.__l.__size_ - __dst.__r_.__value_.__r.__words[0]) >> 4));
        v145.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
        sub_100036788((void ***)&v145);
        ++v64;
        v63 += 3LL;
        if (v66 == v64) {
          goto LABEL_184;
        }
      }
    }

    uint64_t v48 = sub_100002F60(&std::cerr, (uint64_t)"Template directory does not exist: ", 35LL);
    if ((__str.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_str = &__str;
    }
    else {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if ((__str.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v50 = __str.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t v50 = __str.__r_.__value_.__l.__size_;
    }
    uint64_t v45 = sub_100002F60(v48, (uint64_t)p_str, v50);
    std::ios_base::getloc((const std::ios_base *)((char *)v45 + *(void *)(*v45 - 24LL)));
    uint64_t v51 = std::locale::use_facet((const std::locale *)&__dst, &std::ctype<char>::id);
    uint64_t v52 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v51->__vftable[2].~facet_0)(v51, 10LL);
    std::locale::~locale((std::locale *)&__dst);
    std::ostream::put(v45, v52);
  }

  else
  {
    uint64_t v45 = sub_100002F60(&std::cerr, (uint64_t)"--templateDir argument required for catutil metrics", 51LL);
    std::ios_base::getloc((const std::ios_base *)((char *)v45 + *(void *)(*v45 - 24LL)));
    uint64_t v46 = std::locale::use_facet((const std::locale *)&__dst, &std::ctype<char>::id);
    uint64_t v47 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v46->__vftable[2].~facet_0)(v46, 10LL);
    std::locale::~locale((std::locale *)&__dst);
    std::ostream::put(v45, v47);
  }

  std::ostream::flush(v45);
  uint64_t v4 = 0LL;
LABEL_225:
  return v4;
}

void sub_100033F74( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23, uint64_t a24, uint64_t a25, void *a26, uint64_t a27, uint64_t a28, void *a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, void *a42, uint64_t a43, uint64_t a44, char a45, uint64_t a46, uint64_t a47, void *__p, uint64_t a49, int a50,__int16 a51,char a52,char a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  a72 = &a45;
  sub_100036788((void ***)&a72);
  if (a53 < 0) {
    operator delete(__p);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a65 < 0) {
    operator delete(a60);
  }
  _Unwind_Resume(a1);
}

void sub_100034400( uint64_t a1@<X0>, const std::string *a2@<X1>, const std::string *a3@<X2>, uint64_t *a4@<X8>)
{
  *a4 = 0LL;
  a4[1] = 0LL;
  a4[2] = 0LL;
  std::string::size_type size = a3->__r_.__value_.__s.__size_;
  if ((size & 0x80u) != 0LL) {
    std::string::size_type size = a3->__r_.__value_.__l.__size_;
  }
  if (size)
  {
    sub_100034938(a1, a2, a3, (uint64_t)__p);
    unint64_t v8 = v39;
    if ((v39 & 0x80u) != 0) {
      unint64_t v8 = (unint64_t)__p[1];
    }
    if (v8)
    {
      uint64_t v9 = v44;
      if ((v44 & 0x80u) != 0) {
        uint64_t v9 = v43;
      }
      if (v9)
      {
        unint64_t v10 = a4[1];
        if (v10 >= a4[2])
        {
          uint64_t v11 = sub_10003605C(a4, (__int128 *)__p);
        }

        else
        {
          sub_100036178((char *)a4[1], (__int128 *)__p);
          uint64_t v11 = v10 + 176;
          a4[1] = v10 + 176;
        }

        a4[1] = v11;
      }
    }

    sub_100009064((uint64_t)&v45, v46);
    if (v41 < 0) {
      operator delete(v40);
    }
    if ((char)v39 < 0)
    {
      std::string v25 = __p[0];
LABEL_64:
      operator delete(v25);
    }
  }

  else
  {
    siri::dialogengine::CatIdToPath(__p, a2);
    siri::dialogengine::JoinPath(&v35, a1, __p);
    if ((siri::dialogengine::DirExists(&v35) & 1) != 0)
    {
      siri::dialogengine::GetCatLocales(&v33, &v35);
      uint64_t v12 = v33;
      unint64_t v13 = v34;
      if (v33 == v34)
      {
        std::string v26 = sub_100002F60(&std::cerr, (uint64_t)"Cannot find any locale files in CAT directory: ", 47LL);
        if ((v37 & 0x80u) == 0) {
          std::string v27 = &v35;
        }
        else {
          std::string v27 = v35;
        }
        if ((v37 & 0x80u) == 0) {
          uint64_t v28 = v37;
        }
        else {
          uint64_t v28 = v36;
        }
        std::string v29 = sub_100002F60(v26, (uint64_t)v27, v28);
        std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(void *)(*v29 - 24LL)));
        __int128 v30 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
        uint64_t v31 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10LL);
        std::locale::~locale((std::locale *)__p);
        std::ostream::put(v29, v31);
        std::ostream::flush(v29);
      }

      else
      {
        do
        {
          if (*((char *)v12 + 23) < 0)
          {
            sub_10000231C(&v32, *(void **)v12, *((void *)v12 + 1));
          }

          else
          {
            __int128 v14 = *v12;
            v32.__r_.__value_.__l.__cap_ = *((void *)v12 + 2);
            *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v14;
          }

          sub_100034938(a1, a2, &v32, (uint64_t)__p);
          unint64_t v15 = v39;
          if ((v39 & 0x80u) != 0) {
            unint64_t v15 = (unint64_t)__p[1];
          }
          if (v15)
          {
            uint64_t v16 = v44;
            if ((v44 & 0x80u) != 0) {
              uint64_t v16 = v43;
            }
            if (v16)
            {
              unint64_t v17 = a4[1];
              if (v17 >= a4[2])
              {
                uint64_t v18 = sub_10003605C(a4, (__int128 *)__p);
              }

              else
              {
                sub_100036178((char *)a4[1], (__int128 *)__p);
                uint64_t v18 = v17 + 176;
                a4[1] = v17 + 176;
              }

              a4[1] = v18;
            }
          }

          sub_100009064((uint64_t)&v45, v46);
          if (v41 < 0) {
            operator delete(v40);
          }
          uint64_t v12 = (__int128 *)((char *)v12 + 24);
        }

        while (v12 != v13);
      }

      __p[0] = &v33;
      sub_1000027F4((void ***)__p);
    }

    else
    {
      __int128 v19 = sub_100002F60(&std::cerr, (uint64_t)"CAT does not exist: ", 20LL);
      if ((v37 & 0x80u) == 0) {
        std::string::size_type v20 = &v35;
      }
      else {
        std::string::size_type v20 = v35;
      }
      if ((v37 & 0x80u) == 0) {
        uint64_t v21 = v37;
      }
      else {
        uint64_t v21 = v36;
      }
      __int128 v22 = sub_100002F60(v19, (uint64_t)v20, v21);
      std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(void *)(*v22 - 24LL)));
      int64x2_t v23 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
      uint64_t v24 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10LL);
      std::locale::~locale((std::locale *)__p);
      std::ostream::put(v22, v24);
      std::ostream::flush(v22);
    }

    if ((char)v37 < 0)
    {
      std::string v25 = v35;
      goto LABEL_64;
    }
  }

void sub_1000347B0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24, std::locale a25, uint64_t a26, int a27, __int16 a28, char a29, char a30)
{
}

uint64_t sub_100034888(uint64_t a1)
{
  int v1 = *(char *)(a1 + 23);
  if (v1 >= 0) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = *(void *)a1;
  }
  if (v1 >= 0) {
    uint64_t v3 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v3 = *(void *)(a1 + 8);
  }
  uint64_t v4 = sub_100002F60(&std::cerr, v2, v3);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24LL)));
  __int128 v5 = std::locale::use_facet(&v8, &std::ctype<char>::id);
  uint64_t v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10LL);
  std::locale::~locale(&v8);
  std::ostream::put(v4, v6);
  return std::ostream::flush(v4);
}

void sub_100034924( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void sub_100034938(uint64_t a1@<X0>, const std::string *a2@<X1>, const std::string *a3@<X2>, uint64_t a4@<X8>)
{
  if ((a2->__r_.__value_.__s.__size_ & 0x80u) == 0) {
    size_t size = a2->__r_.__value_.__s.__size_;
  }
  else {
    size_t size = a2->__r_.__value_.__l.__size_;
  }
  sub_100007A0C((uint64_t)&__p, size + 2);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (size)
  {
    if ((a2->__r_.__value_.__s.__size_ & 0x80u) == 0) {
      unint64_t v10 = a2;
    }
    else {
      unint64_t v10 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    }
    memmove(p_p, v10, size);
  }

  strcpy((char *)p_p + size, " (");
  int v11 = (char)a3->__r_.__value_.__s.__size_;
  if (v11 >= 0) {
    uint64_t v12 = (const std::string::value_type *)a3;
  }
  else {
    uint64_t v12 = (const std::string::value_type *)a3->__r_.__value_.__r.__words[0];
  }
  if (v11 >= 0) {
    std::string::size_type v13 = a3->__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v13 = a3->__r_.__value_.__l.__size_;
  }
  __int128 v14 = std::string::append(&__p, v12, v13);
  __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v139.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0LL;
  v14->__r_.__value_.__l.__cap_ = 0LL;
  v14->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v16 = std::string::append(&v139, ")");
  __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  std::string::size_type cap = v16->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string v145 = v17;
  v16->__r_.__value_.__l.__size_ = 0LL;
  v16->__r_.__value_.__l.__cap_ = 0LL;
  v16->__r_.__value_.__r.__words[0] = 0LL;
  siri::dialogengine::FindParamsFile(v143, v147, a2);
  else {
    std::string __p = *a3;
  }
  memset(&v139, 0, sizeof(v139));
  v111.__r_.__value_.__s.__data_[8] = 0;
  v139.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v139.__r_.__value_.__l.__size_ = v139.__r_.__value_.__r.__words[0];
  v139.__r_.__value_.__l.__cap_ = v139.__r_.__value_.__r.__words[0] + 24;
  v139.__r_.__value_.__l.__size_ = (std::string::size_type)sub_100007ACC( (uint64_t)&v139.__r_.__value_.__l.__cap_,  (__int128 *)&__p,  v149,  v139.__r_.__value_.__l.__data_);
  siri::dialogengine::FindLocaleFile(&v142, v147, &v139, a2);
  v111.__r_.__value_.__r.__words[0] = (std::string::size_type)&v139;
  sub_1000027F4((void ***)&v111);
  std::string::size_type v18 = v142.__r_.__value_.__s.__size_;
  if ((v142.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    std::string::size_type v18 = v142.__r_.__value_.__l.__size_;
  }
  if (v18)
  {
    siri::dialogengine::CatLocalePathToLocale(v140, &v142);
    std::string::size_type v19 = a3->__r_.__value_.__s.__size_;
    if ((v19 & 0x80u) != 0LL) {
      std::string::size_type v19 = a3->__r_.__value_.__l.__size_;
    }
    if (v19 && (siri::dialogengine::StringsEqual(a3, v140) & 1) == 0)
    {
      char v57 = sub_100002F60(&std::cerr, (uint64_t)"Skipping fallback locale ", 25LL);
      if ((v141 & 0x80u) == 0) {
        char v58 = v140;
      }
      else {
        char v58 = (void **)v140[0];
      }
      if ((v141 & 0x80u) == 0) {
        uint64_t v59 = v141;
      }
      else {
        uint64_t v59 = (uint64_t)v140[1];
      }
      char v60 = sub_100002F60(v57, (uint64_t)v58, v59);
      unint64_t v61 = sub_100002F60(v60, (uint64_t)" found for requested locale ", 28LL);
      int v62 = (char)a3->__r_.__value_.__s.__size_;
      if (v62 >= 0) {
        uint64_t v63 = a3;
      }
      else {
        uint64_t v63 = (const std::string *)a3->__r_.__value_.__r.__words[0];
      }
      if (v62 >= 0) {
        uint64_t v64 = a3->__r_.__value_.__s.__size_;
      }
      else {
        uint64_t v64 = a3->__r_.__value_.__l.__size_;
      }
      unint64_t v65 = sub_100002F60(v61, (uint64_t)v63, v64);
      std::ios_base::getloc((const std::ios_base *)((char *)v65 + *(void *)(*v65 - 24LL)));
      uint64_t v66 = std::locale::use_facet((const std::locale *)&v139, &std::ctype<char>::id);
      uint64_t v67 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v66->__vftable[2].~facet_0)(v66, 10LL);
      std::locale::~locale((std::locale *)&v139);
      std::ostream::put(v65, v67);
      std::ostream::flush(v65);
      goto LABEL_204;
    }

    siri::dialogengine::Context::Context((siri::dialogengine::Context *)&v139);
    siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)&__p);
    siri::dialogengine::RequestInfo::SetTemplateDirs(&__p, v147);
    siri::dialogengine::RequestInfo::SetParamsPath(&__p, v143);
    siri::dialogengine::RequestInfo::SetLocalePath(&__p, &v142);
    LODWORD(v111.__r_.__value_.__l.__data_) = 0;
    siri::dialogengine::RequestInfo::SetRequestType(&__p, &v111);
    siri::dialogengine::Context::SetRequestInfo(&v139, &__p);
    if (siri::dialogengine::Context::Load((siri::dialogengine::Context *)&v139))
    {
      siri::dialogengine::Context::GetFile((siri::dialogengine::Context *)&v139);
      __int128 v20 = *(_OWORD *)&v111.__r_.__value_.__l.__data_;
      if (!v111.__r_.__value_.__l.__size_) {
        goto LABEL_39;
      }
      uint64_t v21 = (unint64_t *)(v111.__r_.__value_.__l.__size_ + 8);
      do
        unint64_t v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        (*(void (**)(void))(**((void **)&v20 + 1) + 16LL))(*((void *)&v20 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v20 + 1));
        if ((void)v20)
        {
LABEL_40:
          siri::dialogengine::Context::GetFile((siri::dialogengine::Context *)&v139);
          siri::dialogengine::File::GetParameters(v134);
          std::string::operator=((std::string *)a4, a2);
          std::string::operator=((std::string *)(a4 + 24), a3);
          std::string::operator=((std::string *)(a4 + 48), &v142);
          *(void *)(a4 + 72) = siri::dialogengine::File::GetMaxLineNumber(v134);
          siri::dialogengine::File::GetDialogs(v134);
          *(void *)(a4 + 80) = (uint64_t)(v111.__r_.__value_.__l.__size_ - v111.__r_.__value_.__r.__words[0]) >> 4;
          std::string v131 = &v111;
          sub_100007BFC((void ***)&v131);
          siri::dialogengine::File::GetTexts(v134);
          *(void *)(a4 + 8std::iostream::~basic_iostream(v2, v3 + 8) = (uint64_t)(v111.__r_.__value_.__l.__size_ - v111.__r_.__value_.__r.__words[0]) >> 4;
          std::string v131 = &v111;
          sub_100007BFC((void ***)&v131);
          Phrases = (const void *)siri::dialogengine::File::GetPhrases(v134);
          if (Phrases)
          {
            if (v24)
            {
              siri::dialogengine::GroupPhrases::GetPhrases(v24);
              *(void *)(a4 + 96) = (uint64_t)(v111.__r_.__value_.__l.__size_ - v111.__r_.__value_.__r.__words[0]) >> 4;
              std::string v131 = &v111;
              sub_100007BFC((void ***)&v131);
            }
          }

          siri::dialogengine::File::GetConditions(v134);
          *(void *)(a4 + 104) = (uint64_t)(v111.__r_.__value_.__l.__size_ - v111.__r_.__value_.__r.__words[0]) >> 4;
          std::string v131 = &v111;
          sub_100007BFC((void ***)&v131);
          locale = v137[1].__locale_;
          std::string v26 = v137[0].__locale_;
          BOOL v27 = v137[1].__locale_ == v137[0].__locale_;
          *(void *)(a4 + 112) = 0xCF3CF3CF3CF3CF3DLL * ((v137[1].__locale_ - v137[0].__locale_) >> 4);
          unsigned int v28 = 0;
          if (!v27)
          {
            do
            {
              siri::dialogengine::ObjectProperty::GetSemanticConcept(v26);
              if ((char)v111.__r_.__value_.__s.__size_ < 0)
              {
                BOOL v29 = v111.__r_.__value_.__l.__size_ == 0;
                operator delete(v111.__r_.__value_.__l.__data_);
              }

              else
              {
                BOOL v29 = v111.__r_.__value_.__s.__size_ == 0;
              }

              v28 += !v29;
              std::string v26 = (std::locale::__imp *)((char *)v26 + 336);
            }

            while (v26 != locale);
          }

          *(void *)(a4 + 120) = v28;
          v133[0] = 0LL;
          v133[1] = 0LL;
          std::string v132 = v133;
          (*(void (**)(siri::dialogengine::File *, void **))(*(void *)v134 + 32LL))(v134, &v131);
          uint64_t DialogIds = siri::dialogengine::CollectDialogIdsVisitor::GetDialogIds((siri::dialogengine::CollectDialogIdsVisitor *)&v131);
          if (a4 + 152 != DialogIds) {
            sub_100035CE8((uint64_t **)(a4 + 152), *(void **)DialogIds, (void *)(DialogIds + 8));
          }
          siri::dialogengine::File::GetDialogs(v134);
          std::string::size_type v104 = v136.__r_.__value_.__l.__size_;
          std::string::size_type v31 = v136.__r_.__value_.__r.__words[0];
          if (v136.__r_.__value_.__r.__words[0] != v136.__r_.__value_.__l.__size_)
          {
            while (1)
            {
              std::string v32 = *(siri::dialogengine::Dialog **)v31;
              __int128 v33 = *(std::__shared_weak_count **)(v31 + 8);
              std::string v129 = *(siri::dialogengine::Dialog **)v31;
              std::string v130 = v33;
              if (v33)
              {
                p_shared_owners = (unint64_t *)&v33->__shared_owners_;
                do
                  unint64_t v35 = __ldxr(p_shared_owners);
                while (__stxr(v35 + 1, p_shared_owners));
              }

              siri::dialogengine::Dialog::GetFull(v32);
              siri::dialogengine::SpeakableString::GetPrintChunks((siri::dialogengine::SpeakableString *)&v111);
              siri::dialogengine::ChunkList::GetChunks((siri::dialogengine::ChunkList *)&__str);
              v110.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
              sub_100007BFC((void ***)&v110);
              if (v123 < 0) {
                operator delete(v122);
              }
              if (v121 < 0) {
                operator delete(v120);
              }
              if (v119 < 0) {
                operator delete(v118);
              }
              if (v117 < 0) {
                operator delete(v116);
              }
              if (v115 < 0) {
                operator delete(v114);
              }
              if (v113 < 0) {
                operator delete(v112);
              }
              std::string::size_type v36 = v128.__r_.__value_.__l.__size_;
              std::string::size_type v37 = v128.__r_.__value_.__r.__words[0];
              if (v128.__r_.__value_.__r.__words[0] != v128.__r_.__value_.__l.__size_) {
                break;
              }
LABEL_105:
              v111.__r_.__value_.__r.__words[0] = (std::string::size_type)&v128;
              sub_100007BFC((void ***)&v111);
              if (v33)
              {
                uint64_t v49 = (unint64_t *)&v33->__shared_owners_;
                do
                  unint64_t v50 = __ldaxr(v49);
                while (__stlxr(v50 - 1, v49));
                if (!v50)
                {
                  ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
                  std::__shared_weak_count::__release_weak(v33);
                }
              }

              v31 += 16LL;
              if (v31 == v104) {
                goto LABEL_111;
              }
            }

            while (1)
            {
              uint64_t v38 = *(const void **)v37;
              unsigned __int8 v39 = *(std::__shared_weak_count **)(v37 + 8);
              std::string::size_type v125 = *(const void **)v37;
              std::locale v126 = v39;
              if (v39)
              {
                uint64_t v40 = (unint64_t *)&v39->__shared_owners_;
                do
                  unint64_t v41 = __ldxr(v40);
                while (__stxr(v41 + 1, v40));
              }

              if (!v38) {
                goto LABEL_96;
              }
              if (!v42) {
                goto LABEL_96;
              }
              uint64_t v43 = v42;
              sub_1000021BC(&v111, "semanticConcept");
              siri::dialogengine::ChunkText::GetAttribute(&__str, v43, &v111);
              v111.__r_.__value_.__s.__data_[0] = 0;
              char v124 = 0;
              siri::dialogengine::ChunkVariable::GetName(v43);
              siri::dialogengine::ResolveType(&v110, &v139, &v109, &v111, 1LL);
              if (v124) {
                siri::dialogengine::ObjectProperty::GetSemanticConcept((siri::dialogengine::ObjectProperty *)&v111);
              }
              else {
                sub_1000021BC(&v109, (char *)&unk_10006A022);
              }
              std::string::size_type v44 = __str.__r_.__value_.__s.__size_;
              if ((__str.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                std::string::size_type v44 = __str.__r_.__value_.__l.__size_;
              }
              if (v44) {
                std::string::operator=(&v109, &__str);
              }
              std::string::size_type v45 = v109.__r_.__value_.__s.__size_;
              int v46 = (char)v109.__r_.__value_.__s.__size_;
              if ((v109.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                std::string::size_type v45 = v109.__r_.__value_.__l.__size_;
              }
              if (v45) {
                ++*(void *)(a4 + 128);
              }
              if (v46 < 0) {
                operator delete(v109.__r_.__value_.__l.__data_);
              }
              if (v124) {
                sub_100035F70((uint64_t)&v111);
              }
              if ((char)__str.__r_.__value_.__s.__size_ < 0)
              {
                operator delete(__str.__r_.__value_.__l.__data_);
                if (v39)
                {
LABEL_97:
                  uint64_t v47 = (unint64_t *)&v39->__shared_owners_;
                  do
                    unint64_t v48 = __ldaxr(v47);
                  while (__stlxr(v48 - 1, v47));
                  if (!v48)
                  {
                    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                    std::__shared_weak_count::__release_weak(v39);
                  }
                }
              }

              else
              {
LABEL_96:
                if (v39) {
                  goto LABEL_97;
                }
              }

              v37 += 16LL;
              if (v37 == v36)
              {
                __int128 v33 = v130;
                goto LABEL_105;
              }
            }
          }

LABEL_111:
          if (sub_100032538())
          {
            *(_DWORD *)(a4 + 144) = 1203982208;
            *(void *)(a4 + 136) = 99999LL;
          }

          else
          {
            siri::dialogengine::ElapsedTimer::ElapsedTimer((siri::dialogengine::ElapsedTimer *)&v111);
            siri::dialogengine::File::ExpandAsDAG(&v128, v134, &v139, 0LL, 1LL, 1LL);
            siri::dialogengine::ElapsedTimer::GetSecs((siri::dialogengine::ElapsedTimer *)&v111);
            *(float *)&double v68 = v68;
            *(_DWORD *)(a4 + 144) = LODWORD(v68);
            *(void *)(a4 + 136) = 0LL;
            uint64_t v69 = (std::string::__raw *)v128.__r_.__value_.__r.__words[0];
            if ((std::string::size_type *)v128.__r_.__value_.__l.__data_ != &v128.__r_.__value_.__r.__words[1])
            {
              do
              {
                std::string::size_type v70 = (std::__shared_weak_count *)v69[2].__words[2];
                std::string::size_type v107 = v69[2].__words[1];
                std::string::size_type v108 = v70;
                if (v70)
                {
                  uint64_t v71 = (unint64_t *)&v70->__shared_owners_;
                  do
                    unint64_t v72 = __ldxr(v71);
                  while (__stxr(v72 + 1, v71));
                }

                siri::dialogengine::GetJSONArrayVal(&__str, &v107);
                uint64_t v73 = v108;
                if (v108)
                {
                  __int128 v74 = (unint64_t *)&v108->__shared_owners_;
                  do
                    unint64_t v75 = __ldaxr(v74);
                  while (__stlxr(v75 - 1, v74));
                  if (!v75)
                  {
                    ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                    std::__shared_weak_count::__release_weak(v73);
                  }
                }

                *(void *)(a4 + 136) += (uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 4;
                v110.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
                sub_100007BFC((void ***)&v110);
                __int128 v76 = (std::string *)v69->__words[1];
                if (v76)
                {
                  do
                  {
                    std::string::size_type v77 = v76;
                    __int128 v76 = (std::string *)v76->__r_.__value_.__r.__words[0];
                  }

                  while (v76);
                }

                else
                {
                  do
                  {
                    std::string::size_type v77 = (std::string *)v69->__words[2];
                    BOOL v27 = v77->__r_.__value_.__r.__words[0] == (void)v69;
                    uint64_t v69 = (std::string::__raw *)v77;
                  }

                  while (!v27);
                }

                uint64_t v69 = (std::string::__raw *)v77;
              }

              while (v77 != (std::string *)&v128.__r_.__value_.__r.__words[1]);
            }

            sub_100005988((uint64_t)&v128, (void *)v128.__r_.__value_.__l.__size_);
          }

          sub_1000021BC(&v110, "  Expansion took ");
          std::to_string(&v109, *(float *)(a4 + 144));
          if ((v109.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v78 = &v109;
          }
          else {
            std::string::size_type v78 = (std::string *)v109.__r_.__value_.__r.__words[0];
          }
          if ((v109.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v79 = v109.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type v79 = v109.__r_.__value_.__l.__size_;
          }
          __int128 v80 = std::string::append(&v110, (const std::string::value_type *)v78, v79);
          __int128 v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
          __str.__r_.__value_.__l.__cap_ = v80->__r_.__value_.__l.__cap_;
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v81;
          v80->__r_.__value_.__l.__size_ = 0LL;
          v80->__r_.__value_.__l.__cap_ = 0LL;
          v80->__r_.__value_.__r.__words[0] = 0LL;
          __int128 v82 = std::string::append(&__str, " seconds for '");
          __int128 v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
          v128.__r_.__value_.__l.__cap_ = v82->__r_.__value_.__l.__cap_;
          *(_OWORD *)&v128.__r_.__value_.__l.__data_ = v83;
          v82->__r_.__value_.__l.__size_ = 0LL;
          v82->__r_.__value_.__l.__cap_ = 0LL;
          v82->__r_.__value_.__r.__words[0] = 0LL;
          int v84 = (char)a3->__r_.__value_.__s.__size_;
          if (v84 >= 0) {
            uint64_t v85 = (const std::string::value_type *)a3;
          }
          else {
            uint64_t v85 = (const std::string::value_type *)a3->__r_.__value_.__r.__words[0];
          }
          if (v84 >= 0) {
            std::string::size_type v86 = a3->__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type v86 = a3->__r_.__value_.__l.__size_;
          }
          int v87 = std::string::append(&v128, v85, v86);
          __int128 v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
          v111.__r_.__value_.__l.__cap_ = v87->__r_.__value_.__l.__cap_;
          *(_OWORD *)&v111.__r_.__value_.__l.__data_ = v88;
          v87->__r_.__value_.__l.__size_ = 0LL;
          v87->__r_.__value_.__l.__cap_ = 0LL;
          v87->__r_.__value_.__r.__words[0] = 0LL;
          uint64_t v89 = std::string::append(&v111, "' locale");
          __int128 v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
          std::string::size_type v106 = v89->__r_.__value_.__l.__cap_;
          *(_OWORD *)std::string::size_type v105 = v90;
          v89->__r_.__value_.__l.__size_ = 0LL;
          v89->__r_.__value_.__l.__cap_ = 0LL;
          v89->__r_.__value_.__r.__words[0] = 0LL;
          sub_100034888((uint64_t)v105);
          if (SHIBYTE(v106) < 0) {
            operator delete(v105[0]);
          }
          v111.__r_.__value_.__r.__words[0] = (std::string::size_type)&v136;
          sub_100007BFC((void ***)&v111);
          sub_100009064((uint64_t)&v132, v133[0]);
          v111.__r_.__value_.__r.__words[0] = (std::string::size_type)v137;
          sub_100020CCC((void ***)&v111);
          unint64_t v91 = v135;
          if (v135)
          {
            std::string::size_type v92 = (unint64_t *)&v135->__shared_owners_;
            do
              unint64_t v93 = __ldaxr(v92);
            while (__stlxr(v93 - 1, v92));
            if (!v93)
            {
              ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
              std::__shared_weak_count::__release_weak(v91);
            }
          }

          goto LABEL_203;
        }
      }

      else
      {
LABEL_39:
        if ((void)v20) {
          goto LABEL_40;
        }
      }
    }

    std::operator+<char>(&v111, "Failed to load CAT file: ", v145);
    siri::dialogengine::Context::GetError((siri::dialogengine::Context *)&v139);
    int v94 = (char **)HIBYTE(v133[0]);
    if (SHIBYTE(v133[0]) < 0) {
      int v94 = v132;
    }
    if (v94)
    {
      std::operator+<char>(&v136, " [", &v131);
      std::string v95 = std::string::append(&v136, "]");
      __int128 v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
      int64_t v138 = v95->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v137[0].__locale_ = v96;
      v95->__r_.__value_.__l.__size_ = 0LL;
      v95->__r_.__value_.__l.__cap_ = 0LL;
      v95->__r_.__value_.__r.__words[0] = 0LL;
      if (v138 >= 0) {
        uint64_t v97 = (const std::string::value_type *)v137;
      }
      else {
        uint64_t v97 = (const std::string::value_type *)v137[0].__locale_;
      }
      if (v138 >= 0) {
        std::string::size_type v98 = HIBYTE(v138);
      }
      else {
        std::string::size_type v98 = (std::string::size_type)v137[1].__locale_;
      }
      std::string::append(&v111, v97, v98);
      if (SHIBYTE(v138) < 0) {
        operator delete(v137[0].__locale_);
      }
    }

    if ((v111.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v99 = &v111;
    }
    else {
      uint64_t v99 = (std::string *)v111.__r_.__value_.__r.__words[0];
    }
    if ((v111.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v100 = v111.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t v100 = v111.__r_.__value_.__l.__size_;
    }
    std::string::size_type v101 = sub_100002F60(&std::cerr, (uint64_t)v99, v100);
    std::ios_base::getloc((const std::ios_base *)((char *)v101 + *(void *)(*v101 - 24LL)));
    std::string::size_type v102 = std::locale::use_facet(v137, &std::ctype<char>::id);
    uint64_t v103 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v102->__vftable[2].~facet_0)(v102, 10LL);
    std::locale::~locale(v137);
    std::ostream::put(v101, v103);
    std::ostream::flush(v101);
    if (SHIBYTE(v133[0]) < 0) {
      operator delete(v131);
    }
LABEL_203:
    sub_1000286FC((uint64_t)&__p);
    siri::dialogengine::Context::~Context((siri::dialogengine::Context *)&v139);
LABEL_204:
    __int128 v56 = v140[0];
    goto LABEL_206;
  }

  std::operator+<char>(&v139, "Cannot find CAT file: ", v145);
  if ((v139.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v51 = &v139;
  }
  else {
    uint64_t v51 = (std::string *)v139.__r_.__value_.__r.__words[0];
  }
  if ((v139.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v52 = v139.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t v52 = v139.__r_.__value_.__l.__size_;
  }
  uint64_t v53 = sub_100002F60(&std::cerr, (uint64_t)v51, v52);
  std::ios_base::getloc((const std::ios_base *)((char *)v53 + *(void *)(*v53 - 24LL)));
  __int128 v54 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
  uint64_t v55 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v54->__vftable[2].~facet_0)(v54, 10LL);
  std::locale::~locale((std::locale *)&__p);
  std::ostream::put(v53, v55);
  std::ostream::flush(v53);
  if ((char)v139.__r_.__value_.__s.__size_ < 0)
  {
    __int128 v56 = (void *)v139.__r_.__value_.__r.__words[0];
LABEL_206:
    operator delete(v56);
  }

void sub_100035830( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *a21, uint64_t a22, uint64_t a23, void *a24, uint64_t a25, uint64_t a26, void *a27)
{
  a27 = &STACK[0x230];
  sub_100020CCC((void ***)&a27);
  sub_1000059D0((uint64_t)&STACK[0x208]);
  sub_1000286FC((uint64_t)&STACK[0x1080]);
  siri::dialogengine::Context::~Context((siri::dialogengine::Context *)&STACK[0x250]);
  if (v28[23] < 0) {
    operator delete((void *)STACK[0x1008]);
  }
  if (v28[47] < 0) {
    operator delete((void *)STACK[0x1020]);
  }
  if (v28[71] < 0) {
    operator delete((void *)STACK[0x1038]);
  }
  if (v28[95] < 0) {
    operator delete((void *)STACK[0x1050]);
  }
  a27 = &STACK[0x1068];
  sub_10000AE78((void ***)&a27);
  sub_100035C8C(v27);
  _Unwind_Resume(a1);
}

uint64_t sub_100035C8C(uint64_t a1)
{
  return a1;
}

uint64_t **sub_100035CE8(uint64_t **result, void *a2, void *a3)
{
  __int128 v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    int v7 = result[1];
    *BOOL result = (uint64_t *)(result + 1);
    v7[2] = 0LL;
    result[1] = 0LL;
    result[2] = 0LL;
    if (v6[1]) {
      std::locale v8 = (uint64_t *)v6[1];
    }
    else {
      std::locale v8 = v6;
    }
    __int128 v15 = result;
    uint64_t v16 = v8;
    __int128 v17 = (const void **)v8;
    if (v8)
    {
      uint64_t v16 = sub_100031558((uint64_t)v8);
      if (a2 != a3)
      {
        uint64_t v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 4));
          unint64_t v10 = (uint64_t **)sub_1000314E0((uint64_t)v5, &v18, v17 + 4);
          sub_1000055AC(v5, v18, v10, (uint64_t *)v17);
          __int128 v17 = (const void **)v16;
          if (v16) {
            uint64_t v16 = sub_100031558((uint64_t)v16);
          }
          int v11 = (void *)v9[1];
          if (v11)
          {
            do
            {
              a2 = v11;
              int v11 = (void *)*v11;
            }

            while (v11);
          }

          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v12 = *a2 == (void)v9;
              uint64_t v9 = a2;
            }

            while (!v12);
          }

          std::locale v8 = (uint64_t *)v17;
          if (v17) {
            BOOL v12 = a2 == a3;
          }
          else {
            BOOL v12 = 1;
          }
          uint64_t v9 = a2;
        }

        while (!v12);
      }
    }

    BOOL result = (uint64_t **)sub_1000315AC((uint64_t)&v15);
  }

  if (a2 != a3)
  {
    do
    {
      BOOL result = (uint64_t **)sub_100035E68(v5, (uint64_t)(a2 + 4));
      std::string::size_type v13 = (void *)a2[1];
      if (v13)
      {
        do
        {
          __int128 v14 = v13;
          std::string::size_type v13 = (void *)*v13;
        }

        while (v13);
      }

      else
      {
        do
        {
          __int128 v14 = (void *)a2[2];
          BOOL v12 = *v14 == (void)a2;
          a2 = v14;
        }

        while (!v12);
      }

      a2 = v14;
    }

    while (v14 != a3);
  }

  return result;
}

void sub_100035E54( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

const void **sub_100035E68(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t **)sub_1000314E0((uint64_t)a1, &v5, v6 + 4);
  sub_1000055AC(a1, v5, v3, (uint64_t *)v6);
  return v6;
}

void sub_100035EBC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    sub_100008E74((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100035EE0(uint64_t a1)
{
  return a1;
}

uint64_t sub_100035F70(uint64_t a1)
{
  return sub_100035FD0(a1);
}

uint64_t sub_100035FD0(uint64_t a1)
{
  *(void *)a1 = off_1000790F8;
  return a1;
}

uint64_t sub_10003605C(uint64_t *a1, __int128 *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x2E8BA2E8BA2E8BA3LL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x2E8BA2E8BA2E8BA3LL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xBA2E8BA2E8BA2ELL) {
    unint64_t v9 = 0x1745D1745D1745DLL;
  }
  else {
    unint64_t v9 = v5;
  }
  __int128 v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)sub_1000363F8(v7, v9);
  }
  else {
    unint64_t v10 = 0LL;
  }
  std::string::size_type v13 = v10;
  __int128 v14 = &v10[176 * v4];
  uint64_t v16 = &v10[176 * v9];
  sub_100036178(v14, a2);
  __int128 v15 = v14 + 176;
  sub_100036384(a1, &v13);
  uint64_t v11 = a1[1];
  sub_100036684(&v13);
  return v11;
}

void sub_100036164(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

char *sub_100036178(char *__dst, __int128 *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10000231C(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v4;
  }

  if (*((char *)a2 + 47) < 0)
  {
    sub_10000231C(__dst + 24, *((void **)a2 + 3), *((void *)a2 + 4));
  }

  else
  {
    __int128 v5 = *(__int128 *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }

  if (*((char *)a2 + 71) < 0)
  {
    sub_10000231C(__dst + 48, *((void **)a2 + 6), *((void *)a2 + 7));
  }

  else
  {
    __int128 v6 = a2[3];
    *((void *)__dst + std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 8);
    *((_OWORD *)__dst + 3) = v6;
  }

  *(_OWORD *)(__dst + 72) = *(__int128 *)((char *)a2 + 72);
  __int128 v7 = *(__int128 *)((char *)a2 + 88);
  __int128 v8 = *(__int128 *)((char *)a2 + 104);
  __int128 v9 = *(__int128 *)((char *)a2 + 120);
  *(_OWORD *)(__dst + 132) = *(__int128 *)((char *)a2 + 132);
  *(_OWORD *)(__dst + 120) = v9;
  *(_OWORD *)(__dst + 104) = v8;
  *(_OWORD *)(__dst + 8std::iostream::~basic_iostream(v2, v3 + 8) = v7;
  sub_1000362AC((uint64_t *)__dst + 19, (const void ***)a2 + 19);
  return __dst;
}

void sub_100036260(_Unwind_Exception *exception_object)
{
}

uint64_t *sub_1000362AC(uint64_t *a1, const void ***a2)
{
  a1[2] = 0LL;
  a1[1] = 0LL;
  *a1 = (uint64_t)(a1 + 1);
  sub_100036300(a1, *a2, a2 + 1);
  return a1;
}

void sub_1000362E8(_Unwind_Exception *a1)
{
}

uint64_t *sub_100036300(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    __int128 v4 = a2;
    __int128 v5 = (uint64_t **)result;
    __int128 v6 = result + 1;
    do
    {
      BOOL result = sub_100031858(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      __int128 v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          __int128 v8 = (const void ***)v7;
          __int128 v7 = (const void **)*v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          __int128 v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          __int128 v4 = (const void **)v8;
        }

        while (!v9);
      }

      __int128 v4 = (const void **)v8;
    }

    while (v8 != a3);
  }

  return result;
}

uint64_t sub_100036384(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100036440((uint64_t)(a1 + 2), a1[1], (__int128 *)a1[1], *a1, (__int128 *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1000363F8(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1745D1745D1745ELL) {
    sub_1000022F4();
  }
  return operator new(176 * a2);
}

uint64_t sub_100036440( uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, __int128 *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v16 = a6;
  *((void *)&v16 + 1) = a7;
  __int128 v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }

  else
  {
    BOOL v9 = a3;
    do
    {
      v9 -= 11;
      sub_1000364F4(a1, v7 - 176, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 176LL;
      *((void *)&v16 + 1) -= 176LL;
    }

    while (v9 != a5);
    uint64_t v11 = v16;
  }

  char v14 = 1;
  sub_1000365A0((uint64_t)v13);
  return v11;
}

void sub_1000364F4(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3 = *a3;
  *(void *)(a2 + 16) = *((void *)a3 + 2);
  *(_OWORD *)a2 = v3;
  *((void *)a3 + 1) = 0LL;
  *((void *)a3 + 2) = 0LL;
  *(void *)a3 = 0LL;
  __int128 v4 = *(__int128 *)((char *)a3 + 24);
  *(void *)(a2 + 40) = *((void *)a3 + 5);
  *(_OWORD *)(a2 + 24) = v4;
  *((void *)a3 + 4) = 0LL;
  *((void *)a3 + 5) = 0LL;
  *((void *)a3 + 3) = 0LL;
  __int128 v5 = a3[3];
  *(void *)(a2 + 64) = *((void *)a3 + 8);
  *(_OWORD *)(a2 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v5;
  *((void *)a3 + memset(v42, 0, 7) = 0LL;
  *((void *)a3 + std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
  *((void *)a3 + 6) = 0LL;
  *(_OWORD *)(a2 + 72) = *(__int128 *)((char *)a3 + 72);
  __int128 v6 = *(__int128 *)((char *)a3 + 88);
  __int128 v7 = *(__int128 *)((char *)a3 + 104);
  __int128 v8 = *(__int128 *)((char *)a3 + 120);
  *(_OWORD *)(a2 + 132) = *(__int128 *)((char *)a3 + 132);
  *(_OWORD *)(a2 + 120) = v8;
  *(_OWORD *)(a2 + 104) = v7;
  *(_OWORD *)(a2 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v6;
  *(void *)(a2 + 152) = *((void *)a3 + 19);
  BOOL v9 = a3 + 10;
  uint64_t v10 = *((void *)a3 + 20);
  *(void *)(a2 + 160) = v10;
  uint64_t v11 = a2 + 160;
  uint64_t v12 = *((void *)a3 + 21);
  *(void *)(a2 + 16std::iostream::~basic_iostream(v2, v3 + 8) = v12;
  if (v12)
  {
    *(void *)(v10 + 16) = v11;
    *((void *)a3 + 19) = v9;
    void *v9 = 0LL;
    *((void *)a3 + 21) = 0LL;
  }

  else
  {
    *(void *)(a2 + 152) = v11;
  }

uint64_t sub_1000365A0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_1000365D4((uint64_t *)a1);
  }
  return a1;
}

void sub_1000365D4(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_100036624(v3, v1);
      v1 += 176LL;
    }

    while (v1 != v2);
  }

void sub_100036624(uint64_t a1, uint64_t a2)
{
}

void **sub_100036684(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_1000366B4(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 176;
    sub_100036624(v4, i - 176);
  }

_OWORD *sub_1000366F8(uint64_t **a1, const void **a2, uint64_t a3)
{
  __int128 v5 = (void **)sub_100005600((uint64_t)a1, &v9, a2);
  __int128 v6 = *v5;
  if (!*v5)
  {
    __int128 v7 = (uint64_t **)v5;
    __int128 v6 = operator new(0x38uLL);
    v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *(void *)a3 = 0LL;
    *(void *)(a3 + std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
    *(void *)(a3 + 16) = 0LL;
    sub_1000055AC(a1, v9, v7, (uint64_t *)v6);
  }

  return v6;
}

void sub_100036788(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    __int128 v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 176LL;
        sub_100036624((uint64_t)(v1 + 2), v4);
      }

      while ((void *)v4 != v2);
      __int128 v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void sub_10003680C(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 176LL;
        sub_100036624((uint64_t)(a1 + 2), v3);
      }

      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }

    a1[1] = v1;
    operator delete(v4);
    *a1 = 0LL;
    a1[1] = 0LL;
    a1[2] = 0LL;
  }

void *sub_100036878(void *a1, void *a2, void *a3)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a2 == a3)
  {
    unint64_t v4 = 0LL;
  }

  else
  {
    unint64_t v4 = 0LL;
    __int128 v5 = a2;
    do
    {
      __int128 v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          __int128 v7 = v6;
          __int128 v6 = (void *)*v6;
        }

        while (v6);
      }

      else
      {
        do
        {
          __int128 v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          __int128 v5 = v7;
        }

        while (!v8);
      }

      ++v4;
      __int128 v5 = v7;
    }

    while (v7 != a3);
  }

  sub_1000368FC(a1, a2, a3, v4);
  return a1;
}

void *sub_1000368FC(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    __int128 v6 = result;
    sub_100002618(result, a4);
    uint64_t result = sub_100036980((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }

  return result;
}

void sub_100036960( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + std::iostream::~basic_iostream(v2, v3 + 8) = v10;
  sub_1000027F4(&a9);
  _Unwind_Resume(a1);
}

void *sub_100036980(uint64_t a1, void *a2, void *a3, void *__dst)
{
  unint64_t v4 = __dst;
  char v14 = __dst;
  __int128 v15 = (char *)__dst;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  char v13 = 0;
  if (a2 != a3)
  {
    __int128 v6 = a2;
    do
    {
      if (*((char *)v6 + 55) < 0)
      {
        sub_10000231C(v4, (void *)v6[4], v6[5]);
      }

      else
      {
        __int128 v7 = *((_OWORD *)v6 + 2);
        v4[2] = v6[6];
        *(_OWORD *)unint64_t v4 = v7;
      }

      BOOL v8 = (void *)v6[1];
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          BOOL v8 = (void *)*v8;
        }

        while (v8);
      }

      else
      {
        do
        {
          uint64_t v9 = (void *)v6[2];
          BOOL v10 = *v9 == (void)v6;
          __int128 v6 = v9;
        }

        while (!v10);
      }

      unint64_t v4 = v15 + 24;
      v15 += 24;
      __int128 v6 = v9;
    }

    while (v9 != a3);
  }

  char v13 = 1;
  sub_10000277C((uint64_t)v12);
  return v4;
}

void sub_100036A58( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100036A6C(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4, char a5)
{
LABEL_1:
  uint64_t v9 = a2 - 3;
  BOOL v10 = (const void **)a1;
LABEL_2:
  uint64_t v11 = 1 - a4;
  while (2)
  {
    a1 = (uint64_t)v10;
    uint64_t v12 = v11;
    uint64_t v13 = (char *)a2 - (char *)v10;
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (a2 - v10);
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (sub_10000569C(a3, a2 - 3, v10))
        {
          BOOL v29 = v10[2];
          __int128 v27 = *(_OWORD *)v10;
          __int128 v25 = *(_OWORD *)v9;
          void v10[2] = *(a2 - 1);
          *(_OWORD *)BOOL v10 = v25;
          *(_OWORD *)uint64_t v9 = v27;
          *(a2 - 1) = v29;
        }

        return;
      case 3uLL:
        sub_100037034(v10, v10 + 3, a2 - 3, a3);
        return;
      case 4uLL:
        sub_1000376C8((uint64_t)v10, v10 + 3, v10 + 6, (__int128 *)(a2 - 3), a3);
        return;
      case 5uLL:
        sub_1000377B0((uint64_t)v10, v10 + 3, v10 + 6, (__int128 *)(v10 + 9), (__int128 *)(a2 - 3), a3);
        return;
      default:
        if (v13 <= 575)
        {
          if ((a5 & 1) != 0) {
            sub_100036E10((uint64_t)v10, a2, a3);
          }
          else {
            sub_100036F30(v10, a2, a3);
          }
          return;
        }

        if (v12 != 1)
        {
          unint64_t v15 = v14 >> 1;
          __int128 v16 = &v10[3 * (v14 >> 1)];
          if ((unint64_t)v13 < 0xC01)
          {
            sub_100037034(&v10[3 * v15], v10, a2 - 3, a3);
            if ((a5 & 1) != 0) {
              goto LABEL_11;
            }
          }

          else
          {
            sub_100037034(v10, &v10[3 * v15], a2 - 3, a3);
            uint64_t v17 = 3 * v15;
            uint64_t v18 = &v10[3 * v15 - 3];
            sub_100037034(v10 + 3, v18, a2 - 6, a3);
            std::string::size_type v19 = v10 + 6;
            __int128 v20 = &v10[v17 + 3];
            sub_100037034(v19, v20, a2 - 9, a3);
            sub_100037034(v18, v16, v20, a3);
            unsigned int v28 = *(const void **)(a1 + 16);
            __int128 v26 = *(_OWORD *)a1;
            __int128 v21 = *(_OWORD *)v16;
            *(void *)(a1 + 16) = v16[2];
            *(_OWORD *)a1 = v21;
            void v16[2] = v28;
            *(_OWORD *)__int128 v16 = v26;
            if ((a5 & 1) != 0) {
              goto LABEL_11;
            }
          }

          if (!sub_10000569C(a3, (const void **)(a1 - 24), (const void **)a1))
          {
            BOOL v10 = sub_10003717C((const void **)a1, (unint64_t)a2, a3);
            goto LABEL_16;
          }

LABEL_11:
          unint64_t v22 = sub_10003730C((__int128 *)a1, a2, a3);
          if ((v23 & 1) == 0) {
            goto LABEL_14;
          }
          BOOL v24 = sub_100037498(a1, v22, a3);
          BOOL v10 = (const void **)(v22 + 24);
          if (!sub_100037498(v22 + 24, (uint64_t)a2, a3))
          {
            uint64_t v11 = v12 + 1;
            if (v24) {
              continue;
            }
LABEL_14:
            sub_100036A6C(a1, v22, a3, -v12, a5 & 1);
            BOOL v10 = (const void **)(v22 + 24);
LABEL_16:
            a5 = 0;
            a4 = -v12;
            goto LABEL_2;
          }

          a4 = -v12;
          a2 = (const void **)v22;
          if (v24) {
            return;
          }
          goto LABEL_1;
        }

        if (v10 != a2) {
          sub_1000378D0((uint64_t)v10, (__int128 *)a2, (__int128 *)a2, a3);
        }
        return;
    }
  }

void sub_100036E10(uint64_t a1, const void **a2, uint64_t a3)
{
  if ((const void **)a1 != a2)
  {
    uint64_t v19 = v3;
    uint64_t v20 = v4;
    __int128 v7 = (const void **)(a1 + 24);
    if ((const void **)(a1 + 24) != a2)
    {
      uint64_t v9 = 0LL;
      BOOL v10 = (const void **)a1;
      do
      {
        uint64_t v11 = v10;
        BOOL v10 = v7;
        if (sub_10000569C(a3, v7, v11))
        {
          __int128 v17 = *(_OWORD *)v10;
          uint64_t v18 = v10[2];
          v10[1] = 0LL;
          void v10[2] = 0LL;
          char *v10 = 0LL;
          uint64_t v12 = v9;
          do
          {
            uint64_t v13 = a1 + v12;
            unint64_t v14 = (void **)(a1 + v12 + 24);
            *(_OWORD *)unint64_t v14 = *(_OWORD *)v13;
            *(void *)(a1 + v12 + 40) = *(void *)(v13 + 16);
            *(_BYTE *)(v13 + 23) = 0;
            *(_BYTE *)uint64_t v13 = 0;
            if (!v12)
            {
              uint64_t v16 = a1;
              goto LABEL_13;
            }

            v12 -= 24LL;
          }

          while (sub_10000569C(a3, (const void **)&v17, (const void **)(v12 + a1)));
          int v15 = *(char *)(a1 + v12 + 47);
          uint64_t v16 = a1 + v12 + 24;
          if (v15 < 0) {
            operator delete(*(void **)v16);
          }
LABEL_13:
          *(_OWORD *)uint64_t v16 = v17;
          *(void *)(v16 + 16) = v18;
        }

        __int128 v7 = v10 + 3;
        v9 += 24LL;
      }

      while (v10 + 3 != a2);
    }
  }

void sub_100036F30(const void **a1, const void **a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v18 = v3;
    uint64_t v19 = v4;
    __int128 v6 = a1;
    __int128 v7 = a1 + 3;
    if (a1 + 3 != a2)
    {
      uint64_t v9 = a1 - 3;
      do
      {
        BOOL v10 = v6;
        __int128 v6 = v7;
        if (sub_10000569C(a3, v7, v10))
        {
          __int128 v16 = *(_OWORD *)v6;
          __int128 v17 = v6[2];
          v6[1] = 0LL;
          v6[2] = 0LL;
          void *v6 = 0LL;
          uint64_t v11 = v9;
          do
          {
            uint64_t v12 = (void **)(v11 + 6);
            *(_OWORD *)uint64_t v12 = *(_OWORD *)(v11 + 3);
            v11[8] = v11[5];
            *((_BYTE *)v11 + 4memset(v42, 0, 7) = 0;
            *((_BYTE *)v11 + 24) = 0;
            BOOL v13 = sub_10000569C(a3, (const void **)&v16, v11);
            v11 -= 3;
          }

          while (v13);
          int v14 = *((char *)v11 + 71);
          int v15 = v11 + 6;
          if (v14 < 0) {
            operator delete((void *)*v15);
          }
          *(_OWORD *)int v15 = v16;
          void v15[2] = v17;
        }

        __int128 v7 = v6 + 3;
        v9 += 3;
      }

      while (v6 + 3 != a2);
    }
  }

uint64_t sub_100037034(const void **a1, const void **a2, const void **a3, uint64_t a4)
{
  BOOL v8 = sub_10000569C(a4, a2, a1);
  uint64_t result = sub_10000569C(a4, a3, a2);
  if (!v8)
  {
    if (!(_DWORD)result) {
      return result;
    }
    BOOL v13 = a2[2];
    __int128 v14 = *(_OWORD *)a2;
    int v15 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v15;
    *(_OWORD *)a3 = v14;
    a3[2] = v13;
    if (!sub_10000569C(a4, a2, a1)) {
      return 1LL;
    }
    __int128 v16 = a1[2];
    __int128 v17 = *(_OWORD *)a1;
    uint64_t v18 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v18;
    *(_OWORD *)a2 = v17;
    a2[2] = v16;
    return 2LL;
  }

  if (!(_DWORD)result)
  {
    uint64_t v19 = a1[2];
    __int128 v20 = *(_OWORD *)a1;
    __int128 v21 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v21;
    *(_OWORD *)a2 = v20;
    a2[2] = v19;
    if (!sub_10000569C(a4, a3, a2)) {
      return 1LL;
    }
    unint64_t v22 = a2[2];
    __int128 v23 = *(_OWORD *)a2;
    BOOL v24 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v24;
    *(_OWORD *)a3 = v23;
    a3[2] = v22;
    return 2LL;
  }

  BOOL v10 = a1[2];
  __int128 v11 = *(_OWORD *)a1;
  uint64_t v12 = a3[2];
  *(_OWORD *)a1 = *(_OWORD *)a3;
  a1[2] = v12;
  *(_OWORD *)a3 = v11;
  a3[2] = v10;
  return 1LL;
}

const void **sub_10003717C(const void **a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4 = a2;
  __int128 v16 = *(_OWORD *)a1;
  __int128 v17 = a1[2];
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = 0LL;
  if (sub_10000569C(a3, (const void **)&v16, (const void **)(a2 - 24)))
  {
    __int128 v6 = a1;
    do
      v6 += 3;
    while (!sub_10000569C(a3, (const void **)&v16, v6));
  }

  else
  {
    __int128 v7 = a1 + 3;
    do
    {
      __int128 v6 = v7;
      BOOL v8 = sub_10000569C(a3, (const void **)&v16, v7);
      __int128 v7 = v6 + 3;
    }

    while (!v8);
  }

  if ((unint64_t)v6 < v4)
  {
    do
      v4 -= 24LL;
    while (sub_10000569C(a3, (const void **)&v16, (const void **)v4));
  }

  while ((unint64_t)v6 < v4)
  {
    __int128 v9 = *(_OWORD *)v6;
    uint64_t v19 = v6[2];
    __int128 v18 = v9;
    __int128 v10 = *(_OWORD *)v4;
    v6[2] = *(const void **)(v4 + 16);
    *(_OWORD *)__int128 v6 = v10;
    __int128 v11 = v18;
    *(void *)(v4 + 16) = v19;
    *(_OWORD *)unint64_t v4 = v11;
    do
      v6 += 3;
    while (!sub_10000569C(a3, (const void **)&v16, v6));
    do
      v4 -= 24LL;
    while (sub_10000569C(a3, (const void **)&v16, (const void **)v4));
  }

  uint64_t v12 = (void **)(v6 - 3);
  if (v6 - 3 == a1)
  {
  }

  else
  {
    __int128 v13 = *(_OWORD *)v12;
    a1[2] = *(v6 - 1);
    *(_OWORD *)a1 = v13;
    *((_BYTE *)v6 - 1) = 0;
    *((_BYTE *)v6 - 24) = 0;
  }

  __int128 v14 = v16;
  *(v6 - 1) = v17;
  *(_OWORD *)uint64_t v12 = v14;
  return v6;
}

unint64_t sub_10003730C(__int128 *a1, const void **a2, uint64_t a3)
{
  uint64_t v6 = 0LL;
  __int128 v17 = *a1;
  uint64_t v18 = *((void *)a1 + 2);
  *((void *)a1 + 1) = 0LL;
  *((void *)a1 + 2) = 0LL;
  *(void *)a1 = 0LL;
  do
    v6 += 24LL;
  while (sub_10000569C(a3, (const void **)((char *)a1 + v6), (const void **)&v17));
  unint64_t v7 = (unint64_t)a1 + v6;
  if (v6 == 24)
  {
    do
    {
      a2 -= 3;
    }

    while (!sub_10000569C(a3, a2, (const void **)&v17));
  }

  else
  {
    do
      a2 -= 3;
    while (!sub_10000569C(a3, a2, (const void **)&v17));
  }

  unint64_t v8 = (unint64_t)a1 + v6;
  if (v7 < (unint64_t)a2)
  {
    __int128 v9 = a2;
    do
    {
      __int128 v19 = *(_OWORD *)v8;
      __int128 v10 = v19;
      __int128 v20 = *(const void **)(v8 + 16);
      __int128 v11 = v20;
      uint64_t v12 = v9[2];
      *(_OWORD *)unint64_t v8 = *(_OWORD *)v9;
      *(void *)(v8 + 16) = v12;
      v9[2] = v11;
      *(_OWORD *)__int128 v9 = v10;
      do
        v8 += 24LL;
      while (sub_10000569C(a3, (const void **)v8, (const void **)&v17));
      do
        v9 -= 3;
      while (!sub_10000569C(a3, v9, (const void **)&v17));
    }

    while (v8 < (unint64_t)v9);
  }

  __int128 v13 = (void **)(v8 - 24);
  if ((__int128 *)(v8 - 24) == a1)
  {
  }

  else
  {
    __int128 v14 = *(_OWORD *)v13;
    *((void *)a1 + 2) = *(void *)(v8 - 8);
    *a1 = v14;
    *(_BYTE *)(v8 - 1) = 0;
    *(_BYTE *)(v8 - 24) = 0;
  }

  __int128 v15 = v17;
  *(void *)(v8 - std::iostream::~basic_iostream(v2, v3 + 8) = v18;
  *(_OWORD *)__int128 v13 = v15;
  return v8 - 24;
}

BOOL sub_100037498(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  BOOL result = 1LL;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = a2 - 24;
      if (sub_10000569C(a3, (const void **)(a2 - 24), (const void **)a1))
      {
        uint64_t v9 = *(void *)(a1 + 16);
        __int128 v10 = *(_OWORD *)a1;
        uint64_t v11 = *(void *)(v8 + 16);
        *(_OWORD *)a1 = *(_OWORD *)v8;
        *(void *)(a1 + 16) = v11;
        *(_OWORD *)uint64_t v8 = v10;
        *(void *)(v8 + 16) = v9;
      }

      return 1LL;
    case 3uLL:
      sub_100037034((const void **)a1, (const void **)(a1 + 24), (const void **)(a2 - 24), a3);
      return 1LL;
    case 4uLL:
      sub_1000376C8(a1, (const void **)(a1 + 24), (const void **)(a1 + 48), (__int128 *)(a2 - 24), a3);
      return 1LL;
    case 5uLL:
      sub_1000377B0( a1,  (const void **)(a1 + 24),  (const void **)(a1 + 48),  (__int128 *)(a1 + 72),  (__int128 *)(a2 - 24),  a3);
      return 1LL;
    default:
      uint64_t v12 = (const void **)(a1 + 48);
      sub_100037034((const void **)a1, (const void **)(a1 + 24), (const void **)(a1 + 48), a3);
      uint64_t v13 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1LL;
      }
      uint64_t v14 = 0LL;
      int v15 = 0;
      break;
  }

  while (1)
  {
    if (sub_10000569C(a3, (const void **)v13, v12))
    {
      __int128 v22 = *(_OWORD *)v13;
      uint64_t v23 = *(void *)(v13 + 16);
      *(void *)(v13 + std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
      *(void *)(v13 + 16) = 0LL;
      *(void *)uint64_t v13 = 0LL;
      uint64_t v16 = v14;
      do
      {
        uint64_t v17 = a1 + v16;
        uint64_t v18 = (void **)(a1 + v16 + 72);
        *(_OWORD *)uint64_t v18 = *(_OWORD *)(v17 + 48);
        *(void *)(a1 + v16 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *(void *)(v17 + 64);
        *(_BYTE *)(v17 + 71) = 0;
        *(_BYTE *)(v17 + 4std::iostream::~basic_iostream(v2, v3 + 8) = 0;
        if (v16 == -48)
        {
          uint64_t v21 = a1;
          goto LABEL_15;
        }

        BOOL v19 = sub_10000569C(a3, (const void **)&v22, (const void **)(a1 + v16 + 24));
        v16 -= 24LL;
      }

      while (v19);
      int v20 = *(char *)(a1 + v16 + 95);
      uint64_t v21 = a1 + v16 + 72;
      if (v20 < 0) {
        operator delete(*(void **)v21);
      }
LABEL_15:
      *(_OWORD *)uint64_t v21 = v22;
      *(void *)(v21 + 16) = v23;
      if (++v15 == 8) {
        return v13 + 24 == a2;
      }
    }

    uint64_t v12 = (const void **)v13;
    v14 += 24LL;
    v13 += 24LL;
    if (v13 == a2) {
      return 1LL;
    }
  }

__n128 sub_1000376C8(uint64_t a1, const void **a2, const void **a3, __int128 *a4, uint64_t a5)
{
  if (sub_10000569C(a5, (const void **)a4, a3))
  {
    uint64_t v11 = a3[2];
    __int128 v12 = *(_OWORD *)a3;
    uint64_t v13 = (const void *)*((void *)a4 + 2);
    *(_OWORD *)a3 = *a4;
    a3[2] = v13;
    *a4 = v12;
    *((void *)a4 + 2) = v11;
    if (sub_10000569C(a5, a3, a2))
    {
      uint64_t v14 = a2[2];
      __int128 v15 = *(_OWORD *)a2;
      uint64_t v16 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v16;
      *(_OWORD *)a3 = v15;
      a3[2] = v14;
      if (sub_10000569C(a5, a2, (const void **)a1))
      {
        uint64_t v17 = *(const void **)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        uint64_t v18 = a2[2];
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v18;
        *(__n128 *)a2 = result;
        a2[2] = v17;
      }
    }
  }

  return result;
}

__n128 sub_1000377B0(uint64_t a1, const void **a2, const void **a3, __int128 *a4, __int128 *a5, uint64_t a6)
{
  if (sub_10000569C(a6, (const void **)a5, (const void **)a4))
  {
    uint64_t v13 = *((void *)a4 + 2);
    __int128 v14 = *a4;
    uint64_t v15 = *((void *)a5 + 2);
    *a4 = *a5;
    *((void *)a4 + 2) = v15;
    *a5 = v14;
    *((void *)a5 + 2) = v13;
    if (sub_10000569C(a6, (const void **)a4, a3))
    {
      uint64_t v16 = a3[2];
      __int128 v17 = *(_OWORD *)a3;
      uint64_t v18 = (const void *)*((void *)a4 + 2);
      *(_OWORD *)a3 = *a4;
      a3[2] = v18;
      *a4 = v17;
      *((void *)a4 + 2) = v16;
      if (sub_10000569C(a6, a3, a2))
      {
        BOOL v19 = a2[2];
        __int128 v20 = *(_OWORD *)a2;
        uint64_t v21 = a3[2];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        a2[2] = v21;
        *(_OWORD *)a3 = v20;
        a3[2] = v19;
        if (sub_10000569C(a6, a2, (const void **)a1))
        {
          __int128 v22 = *(const void **)(a1 + 16);
          __n128 result = *(__n128 *)a1;
          uint64_t v23 = a2[2];
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(void *)(a1 + 16) = v23;
          *(__n128 *)a2 = result;
          a2[2] = v22;
        }
      }
    }
  }

  return result;
}

__int128 *sub_1000378D0(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  if ((__int128 *)a1 != a2)
  {
    uint64_t v8 = (uint64_t)a2 - a1;
    uint64_t v9 = ((uint64_t)a2 - a1) / 24;
    if ((uint64_t)a2 - a1 >= 25)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      __int128 v12 = (__n128 *)(a1 + 24 * v10);
      do
      {
        sub_100037B18(a1, a4, v9, v12);
        __int128 v12 = (__n128 *)((char *)v12 - 24);
        --v11;
      }

      while (v11);
    }

    uint64_t v13 = a2;
    if (a2 != a3)
    {
      __int128 v14 = a2;
      do
      {
        if (sub_10000569C(a4, (const void **)v14, (const void **)a1))
        {
          uint64_t v15 = *((void *)v14 + 2);
          __int128 v16 = *v14;
          uint64_t v17 = *(void *)(a1 + 16);
          __int128 *v14 = *(_OWORD *)a1;
          *((void *)v14 + 2) = v17;
          *(_OWORD *)a1 = v16;
          *(void *)(a1 + 16) = v15;
          sub_100037B18(a1, a4, v9, (__n128 *)a1);
        }

        __int128 v14 = (__int128 *)((char *)v14 + 24);
      }

      while (v14 != a3);
      uint64_t v13 = a3;
    }

    if (v8 >= 25)
    {
      int64_t v18 = v8 / 0x18uLL;
      BOOL v19 = (__int128 *)((char *)a2 - 24);
      do
      {
        uint64_t v20 = *(void *)a1;
        *(void *)unsigned int v28 = *(void *)(a1 + 8);
        *(void *)&v28[7] = *(void *)(a1 + 15);
        char v21 = *(_BYTE *)(a1 + 23);
        *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
        *(void *)(a1 + 16) = 0LL;
        *(void *)a1 = 0LL;
        uint64_t v22 = sub_100037CAC(a1, a4, v18);
        uint64_t v23 = v22;
        int v24 = *(char *)(v22 + 23);
        if (v19 == (__int128 *)v22)
        {
          if (v24 < 0) {
            operator delete(*(void **)v22);
          }
          *(void *)uint64_t v23 = v20;
          *(void *)(v23 + std::iostream::~basic_iostream(v2, v3 + 8) = *(void *)v28;
          *(void *)(v23 + 15) = *(void *)&v28[7];
          *(_BYTE *)(v23 + 23) = v21;
        }

        else
        {
          if (v24 < 0) {
            operator delete(*(void **)v22);
          }
          __int128 v25 = *v19;
          *(void *)(v23 + 16) = *((void *)v19 + 2);
          *(_OWORD *)uint64_t v23 = v25;
          *(void *)BOOL v19 = v20;
          *((void *)v19 + 1) = *(void *)v28;
          *(void *)((char *)v19 + 15) = *(void *)&v28[7];
          *((_BYTE *)v19 + 23) = v21;
          sub_100037D84(a1, v23 + 24, a4, 0xAAAAAAAAAAAAAAABLL * ((v23 + 24 - a1) >> 3));
        }

        BOOL v19 = (__int128 *)((char *)v19 - 24);
      }

      while (v18-- > 2);
    }

    return v13;
  }

  return a3;
}

void sub_100037B00(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_100037B18(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v22 = v4;
    uint64_t v23 = v5;
    unint64_t v7 = a4;
    uint64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 3)))
    {
      uint64_t v12 = (0x5555555555555556LL * (((uint64_t)a4 - a1) >> 3)) | 1;
      uint64_t v13 = a1 + 24 * v12;
      uint64_t v14 = 0x5555555555555556LL * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v14 < a3 && sub_10000569C(a2, (const void **)(a1 + 24 * v12), (const void **)(v13 + 24)))
      {
        v13 += 24LL;
        uint64_t v12 = v14;
      }

      if (!sub_10000569C(a2, (const void **)v13, (const void **)v7))
      {
        __n128 v20 = *v7;
        unint64_t v21 = v7[1].n128_u64[0];
        v7->n128_u64[1] = 0LL;
        v7[1].n128_u64[0] = 0LL;
        v7->n128_u64[0] = 0LL;
        while (1)
        {
          __int128 v16 = (__n128 *)v13;
          if (v7[1].n128_i8[7] < 0) {
            operator delete((void *)v7->n128_u64[0]);
          }
          __n128 v17 = *(__n128 *)v13;
          v7[1].n128_u64[0] = *(void *)(v13 + 16);
          __n128 *v7 = v17;
          *(_BYTE *)(v13 + 23) = 0;
          *(_BYTE *)uint64_t v13 = 0;
          if (v9 < v12) {
            break;
          }
          uint64_t v18 = (2 * v12) | 1;
          uint64_t v13 = a1 + 24 * v18;
          uint64_t v19 = 2 * v12 + 2;
          if (v19 < a3 && sub_10000569C(a2, (const void **)(a1 + 24 * v18), (const void **)(v13 + 24)))
          {
            v13 += 24LL;
            uint64_t v18 = v19;
          }

          unint64_t v7 = v16;
          uint64_t v12 = v18;
          if (sub_10000569C(a2, (const void **)v13, (const void **)&v20))
          {
            if (v16[1].n128_i8[7] < 0) {
              operator delete((void *)v16->n128_u64[0]);
            }
            break;
          }
        }

        __n128 result = v20;
        v16[1].n128_u64[0] = v21;
        __n128 *v16 = result;
      }
    }
  }

  return result;
}

uint64_t sub_100037CAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0LL;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = a1 + 24 * v6 + 24;
    uint64_t v10 = 2 * v6;
    uint64_t v6 = (2 * v6) | 1;
    uint64_t v11 = v10 + 2;
    if (v10 + 2 < a3 && sub_10000569C(a2, (const void **)v9, (const void **)(v9 + 24)))
    {
      v9 += 24LL;
      uint64_t v6 = v11;
    }

    __int128 v12 = *(_OWORD *)v9;
    *(void *)(a1 + 16) = *(void *)(v9 + 16);
    *(_OWORD *)a1 = v12;
    *(_BYTE *)(v9 + 23) = 0;
    *(_BYTE *)uint64_t v9 = 0;
    a1 = v9;
  }

  while (v6 <= v8);
  return v9;
}

double sub_100037D84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v16 = v4;
    uint64_t v17 = v5;
    unint64_t v8 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v9 = (__int128 *)(a1 + 24 * v8);
    uint64_t v10 = (__int128 *)(a2 - 24);
    if (sub_10000569C(a3, (const void **)v9, (const void **)(a2 - 24)))
    {
      __int128 v14 = *v10;
      uint64_t v15 = *((void *)v10 + 2);
      *((void *)v10 + 1) = 0LL;
      *((void *)v10 + 2) = 0LL;
      *(void *)uint64_t v10 = 0LL;
      while (1)
      {
        __int128 v12 = v9;
        __int128 v13 = *v9;
        *((void *)v10 + 2) = *((void *)v9 + 2);
        __int128 *v10 = v13;
        *((_BYTE *)v9 + 23) = 0;
        *(_BYTE *)uint64_t v9 = 0;
        if (!v8) {
          break;
        }
        unint64_t v8 = (v8 - 1) >> 1;
        uint64_t v9 = (__int128 *)(a1 + 24 * v8);
        uint64_t v10 = v12;
        if (!sub_10000569C(a3, (const void **)v9, (const void **)&v14))
        {
          break;
        }
      }

      double result = *(double *)&v14;
      *__int128 v12 = v14;
      *((void *)v12 + 2) = v15;
    }
  }

  return result;
}

std::string *sub_100037E80(uint64_t *a1, std::string *a2, std::string *a3, __int128 *a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if (0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(v11 - v12) >> 4) >= a5)
    {
      uint64_t v20 = v12 - (void)a2;
      if (0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(v12 - (void)a2) >> 4) >= a5)
      {
        unint64_t v21 = (__int128 *)((char *)a3 + 176 * a5);
      }

      else
      {
        unint64_t v21 = (__int128 *)((char *)a3 + 16 * ((uint64_t)(v12 - (void)a2) >> 4));
        a1[1] = (uint64_t)sub_1000381D8(v9, v21, a4, *(char **)(v9 - 8));
        if (v20 < 1) {
          return v5;
        }
      }

      sub_100038088((uint64_t)a1, (uint64_t)v5, v12, (uint64_t)v5 + 176 * a5);
      sub_100038498((int)v26, v7, (std::string *)v21, v5);
    }

    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 + 0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(v12 - *a1) >> 4);
      if (v14 > 0x1745D1745D1745DLL) {
        sub_100002668();
      }
      uint64_t v15 = 0x2E8BA2E8BA2E8BA3LL * (((uint64_t)a2 - v13) >> 4);
      unint64_t v16 = 0x2E8BA2E8BA2E8BA3LL * ((v10 - v13) >> 4);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0xBA2E8BA2E8BA2ELL) {
        unint64_t v18 = 0x1745D1745D1745DLL;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v29 = v9;
      if (v18) {
        uint64_t v19 = (char *)sub_1000363F8(v9, v18);
      }
      else {
        uint64_t v19 = 0LL;
      }
      uint64_t v22 = &v19[176 * v15];
      v26[0] = v19;
      v26[1] = v22;
      __int128 v27 = v22;
      unsigned int v28 = &v19[176 * v18];
      uint64_t v23 = 176 * a5;
      int v24 = &v22[176 * a5];
      do
      {
        sub_100036178(v22, (__int128 *)v7);
        v22 += 176;
        uint64_t v7 = (std::string *)((char *)v7 + 176);
        v23 -= 176LL;
      }

      while (v23);
      __int128 v27 = v24;
      uint64_t v5 = (std::string *)sub_100038128((uint64_t)a1, v26, (__int128 *)v5);
      sub_100036684(v26);
    }
  }

  return v5;
}

void sub_10003805C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + std::iostream::~basic_iostream(v2, v3 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t sub_100038088(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    uint64_t v10 = (__int128 *)(a2 + v6 - a4);
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      sub_1000364F4(a1 + 16, v8, v10);
      v10 += 11;
      v8 += 176LL;
    }

    while ((unint64_t)v10 < a3);
  }

  *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v8;
  return sub_1000382FC((uint64_t)&v12, a2, v7, v6);
}

uint64_t sub_100038128(uint64_t a1, void *a2, __int128 *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1 + 16;
  sub_100036440(a1 + 16, (uint64_t)a3, a3, *(void *)a1, *(__int128 **)a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_100038558(v7, a3, *(__int128 **)(a1 + 8), a2[2]);
  uint64_t v9 = *(void *)a1;
  *(void *)a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = *(void *)(a1 + 8);
  *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = a2[2];
  a2[2] = v10;
  uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

char *sub_1000381D8(uint64_t a1, __int128 *a2, __int128 *a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v10 = __dst;
  uint64_t v11 = __dst;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_100036178(v4, v6);
      v6 += 11;
      uint64_t v4 = v11 + 176;
      v11 += 176;
    }

    while (v6 != a3);
  }

  char v9 = 1;
  sub_100038278((uint64_t)v8);
  return v4;
}

void sub_100038264( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100038278(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_1000382AC((uint64_t *)a1);
  }
  return a1;
}

void sub_1000382AC(uint64_t *a1)
{
  int v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 176LL;
      sub_100036624(v5, v3);
    }

    while (v3 != v4);
  }

uint64_t sub_1000382FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = 0LL;
    do
    {
      uint64_t v8 = a4 + v7;
      char v9 = (void **)(a4 + v7 - 176);
      uint64_t v10 = a3 + v7;
      uint64_t v11 = (__int128 *)(a3 + v7 - 176);
      __int128 v12 = *v11;
      *(void *)(a4 + v7 - 160) = *(void *)(a3 + v7 - 160);
      *(_OWORD *)char v9 = v12;
      *(_BYTE *)(a3 + v7 - 153) = 0;
      *(_BYTE *)uint64_t v11 = 0;
      uint64_t v13 = v8 - 152;
      uint64_t v14 = a3 + v7;
      __int128 v15 = *(_OWORD *)(v10 - 152);
      *(void *)(v13 + 16) = *(void *)(v10 - 136);
      *(_OWORD *)uint64_t v13 = v15;
      *(_BYTE *)(a3 + v7 - 129) = 0;
      *(_BYTE *)(v10 - 152) = 0;
      uint64_t v16 = a4 + v7;
      uint64_t v17 = (void **)(a4 + v7 - 128);
      __int128 v18 = *(_OWORD *)(v14 - 128);
      *(void *)(a4 + v7 - 112) = *(void *)(v14 - 112);
      *(_OWORD *)uint64_t v17 = v18;
      *(_BYTE *)(v14 - 105) = 0;
      *(_BYTE *)(v14 - 12std::iostream::~basic_iostream(v2, v3 + 8) = 0;
      *(_OWORD *)(v16 - 104) = *(_OWORD *)(v14 - 104);
      __int128 v19 = *(_OWORD *)(v14 - 88);
      __int128 v20 = *(_OWORD *)(v14 - 72);
      __int128 v21 = *(_OWORD *)(v14 - 56);
      *(_OWORD *)(v16 - 44) = *(_OWORD *)(v14 - 44);
      *(_OWORD *)(v16 - 56) = v21;
      *(_OWORD *)(v16 - 72) = v20;
      *(_OWORD *)(v16 - 8std::iostream::~basic_iostream(v2, v3 + 8) = v19;
      sub_100038430(v16 - 24, (void *)(v14 - 24));
      v7 -= 176LL;
    }

    while (a3 + v7 != a2);
  }

  return a3;
}

void sub_100038430(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)(a1 + 8);
  sub_100009064(a1, *(char **)(a1 + 8));
  *(void *)a1 = *a2;
  uint64_t v5 = a2 + 1;
  uint64_t v6 = a2[1];
  *uint64_t v4 = v6;
  uint64_t v7 = a2[2];
  *(void *)(a1 + 16) = v7;
  if (v7)
  {
    *(void *)(v6 + 16) = v4;
    *a2 = v5;
    void *v5 = 0LL;
    a2[2] = 0LL;
  }

  else
  {
    *(void *)a1 = v4;
  }

std::string *sub_100038498(int a1, std::string *__str, std::string *a3, std::string *this)
{
  uint64_t v5 = __str;
  if (__str == a3) {
    return __str;
  }
  uint64_t v6 = a3;
  p_std::string::size_type cap = &__str[6].__r_.__value_.__l.__cap_;
  do
  {
    std::string::operator=(this, v5);
    std::string::operator=(this + 1, v5 + 1);
    std::string::operator=(this + 2, v5 + 2);
    *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = *(_OWORD *)&v5[3].__r_.__value_.__l.__data_;
    __int128 v8 = *(_OWORD *)&v5[4].__r_.__value_.__r.__words[1];
    __int128 v9 = *(_OWORD *)&v5[5].__r_.__value_.__l.__data_;
    __int128 v10 = *(_OWORD *)((char *)&v5[5].__r_.__value_.__r.__words[1] + 4);
    *(_OWORD *)&this[3].__r_.__value_.__r.__words[2] = *(_OWORD *)&v5[3].__r_.__value_.__r.__words[2];
    *(_OWORD *)((char *)&this[5].__r_.__value_.__r.__words[1] + 4) = v10;
    *(_OWORD *)&this[5].__r_.__value_.__l.__data_ = v9;
    *(_OWORD *)&this[4].__r_.__value_.__r.__words[1] = v8;
    if (this != v5) {
      sub_100035CE8((uint64_t **)&this[6].__r_.__value_.__l.__size_, (void *)v5[6].__r_.__value_.__l.__size_, p_cap);
    }
    this = (std::string *)((char *)this + 176);
    p_cap += 22;
    uint64_t v5 = (std::string *)((char *)v5 + 176);
  }

  while (v5 != v6);
  return v6;
}

uint64_t sub_100038558(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_1000364F4(a1, v4, v6);
      v6 += 11;
      uint64_t v4 = v12 + 176;
      v12 += 176LL;
    }

    while (v6 != a3);
  }

  char v10 = 1;
  sub_100038278((uint64_t)v9);
  return v4;
}

uint64_t sub_1000385E8(uint64_t a1, __int128 **a2, uint64_t a3)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  sub_100002594((char *)a1, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *(void *)(a1 + 24) = a3;
  return a1;
}

uint64_t sub_100038638(uint64_t result)
{
  uint64_t v1 = *(uint64_t (**)(void))(result + 24);
  if (v1) {
    return v1();
  }
  return result;
}

uint64_t sub_100038648(uint64_t a1)
{
  if ((siri::dialogengine::OptionExists(a1, v6) & 1) != 0)
  {
    uint64_t v2 = 1LL;
  }

  else
  {
    sub_1000021BC(__p, "--help");
    uint64_t v2 = siri::dialogengine::OptionExists(a1, __p);
    if (v5 < 0) {
      operator delete(__p[0]);
    }
  }

  if (v7 < 0) {
    operator delete(v6[0]);
  }
  return v2;
}

void sub_1000386D8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_100038710(uint64_t a1, uint64_t a2, uint64_t a3)
{
  LOBYTE(__p[0]) = 10;
  uint64_t v6 = sub_100002F60(&std::cout, (uint64_t)__p, 1LL);
  char v7 = sub_100002F60(v6, (uint64_t)"  ", 2LL);
  siri::dialogengine::GetExecutableName(__p, a1);
  if ((v26 & 0x80u) == 0) {
    __int128 v8 = __p;
  }
  else {
    __int128 v8 = (void **)__p[0];
  }
  if ((v26 & 0x80u) == 0) {
    uint64_t v9 = v26;
  }
  else {
    uint64_t v9 = (uint64_t)__p[1];
  }
  char v10 = sub_100002F60(v7, (uint64_t)v8, v9);
  LOBYTE(v27.__locale_) = 32;
  uint64_t v11 = sub_100002F60(v10, (uint64_t)&v27, 1LL);
  int v12 = *(char *)(a2 + 23);
  if (v12 >= 0) {
    uint64_t v13 = a2;
  }
  else {
    uint64_t v13 = *(void *)a2;
  }
  if (v12 >= 0) {
    uint64_t v14 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v14 = *(void *)(a2 + 8);
  }
  __int128 v15 = sub_100002F60(v11, v13, v14);
  LOBYTE(v27.__locale_) = 10;
  uint64_t v16 = sub_100002F60(v15, (uint64_t)&v27, 1LL);
  uint64_t v17 = sub_100002F60(v16, (uint64_t)"  ", 2LL);
  __int128 v18 = sub_100002F60(v17, (uint64_t)"    ", 4LL);
  int v19 = *(char *)(a3 + 23);
  if (v19 >= 0) {
    uint64_t v20 = a3;
  }
  else {
    uint64_t v20 = *(void *)a3;
  }
  if (v19 >= 0) {
    uint64_t v21 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v21 = *(void *)(a3 + 8);
  }
  uint64_t v22 = sub_100002F60(v18, v20, v21);
  std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(void *)(*v22 - 24LL)));
  uint64_t v23 = std::locale::use_facet(&v27, &std::ctype<char>::id);
  uint64_t v24 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10LL);
  std::locale::~locale(&v27);
  std::ostream::put(v22, v24);
  std::ostream::flush(v22);
}

void sub_100038894( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1000388C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(v13[0].__locale_);
  }
  sub_1000021BC(__p, "<COMMAND>");
  siri::dialogengine::StringReplace(v13, v15, __p, a2, 0LL);
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[0]);
  }
  *(_OWORD *)__int128 v15 = *(_OWORD *)&v13[0].__locale_;
  uint64_t v16 = v14;
  HIBYTE(v14) = 0;
  LOBYTE(v13[0].__locale_) = 0;
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v16 >= 0) {
    uint64_t v6 = v15;
  }
  else {
    uint64_t v6 = (void **)v15[0];
  }
  if (v16 >= 0) {
    uint64_t v7 = HIBYTE(v16);
  }
  else {
    uint64_t v7 = (uint64_t)v15[1];
  }
  __int128 v8 = sub_100002F60(&std::cout, (uint64_t)v6, v7);
  std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(*v8 - 24LL)));
  uint64_t v9 = std::locale::use_facet(v13, &std::ctype<char>::id);
  uint64_t v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10LL);
  std::locale::~locale(v13);
  std::ostream::put(v8, v10);
  std::ostream::flush(v8);
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[0]);
  }
}

void sub_100038A38( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

void sub_100038AAC(uint64_t a1)
{
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_100038B20( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100038B54(__int128 **a1, uint64_t a2)
{
  uint64_t v24 = 0LL;
  uint64_t v25 = 0LL;
  uint64_t v26 = 0LL;
  sub_100002594((char *)&v24, *a1, a1[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 3));
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 3) < 3 || sub_100038648((uint64_t)a1))
  {
    sub_100038638(a2);
    sub_1000021BC( v29,  "\n <EXECUTABLE> <COMMAND> [--distribution <name>] [--updater] [--version <version> [--minDiffVersion <version>] <te mplate-dir>\n \n Generate the Asset Delivery manifest file in the template directory, based on all of the files\n under that directory.\n \n Specify the distribution name with --distribution. This is required.\n \n Specify the legacy CAT Updater with --updater.\n \n Specify the version of the dialog in the template directory with --version <version>\n \n Specify the minimum version this differential update can be used with by using --minDiffVersion <version>\n \n <EXECUTABLE> <COMMAND> --list <template-dir>\n \n Read an existing manifest file within the specified template directory and list its contents.\n \n <EXECUTABLE> <COMMAND> --resolve <template-dir>\n \n Read an existing manifest file within the specified template directory and see if an updated\n template directory is available. If so, print the updated directory. If not, print the original\n template directory.\n");
    sub_1000021BC(v27, "manifest");
    sub_1000388C0((uint64_t)&v24, (uint64_t)v27, (uint64_t)v29);
    if (v28 < 0) {
      operator delete(v27[0]);
    }
    goto LABEL_8;
  }

  if (0xAAAAAAAAAAAAAAABLL * ((v25 - (uint64_t)v24) >> 3) < 3)
  {
LABEL_8:
    uint64_t v4 = 0LL;
    goto LABEL_9;
  }

  sub_1000021BC(v29, "--list");
  int v6 = siri::dialogengine::PopOption(&v24, v29);
  sub_1000021BC(v29, "--resolve");
  int v7 = siri::dialogengine::PopOption(&v24, v29);
  sub_1000021BC(v27, "--distribution");
  siri::dialogengine::PopStringOption(v29, &v24, v27);
  if (v28 < 0) {
    operator delete(v27[0]);
  }
  sub_1000021BC(__p, "--version");
  siri::dialogengine::PopStringOption(v27, &v24, __p);
  sub_1000021BC(&v21, "--minDiffVersion");
  siri::dialogengine::PopStringOption(__p, &v24, &v21);
  sub_1000021BC(&v21, "--updater");
  int v8 = siri::dialogengine::PopOption(&v24, &v21);
  sub_1000021BC(v19, "--templateDir");
  siri::dialogengine::PopStringOption(&v21, &v24, v19);
  if (v20 < 0) {
    operator delete(v19[0]);
  }
  std::string::size_type size = v21.__r_.__value_.__s.__size_;
  if ((v21.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    std::string::size_type size = v21.__r_.__value_.__l.__size_;
  }
  if (!size) {
    std::string::operator=(&v21, v24 + 2);
  }
  if (!v6)
  {
    if (v7)
    {
      siri::dialogengine::GetUpdatedTemplateDir(v19, &v21);
      if (v20 >= 0) {
        uint64_t v11 = v19;
      }
      else {
        uint64_t v11 = (void **)v19[0];
      }
      printf("Resolved template directory: %s\n", (const char *)v11);
      if (v20 < 0) {
        operator delete(v19[0]);
      }
      goto LABEL_54;
    }

    unint64_t v12 = v30;
    if ((v30 & 0x80u) != 0) {
      unint64_t v12 = (unint64_t)v29[1];
    }
    if (v12)
    {
      if (v8)
      {
        if ((v30 & 0x80u) == 0) {
          uint64_t v13 = v29;
        }
        else {
          uint64_t v13 = (void ***)v29[0];
        }
        uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v13));
        if ((v21.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          __int128 v15 = &v21;
        }
        else {
          __int128 v15 = (std::string *)v21.__r_.__value_.__r.__words[0];
        }
        uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v15));
        uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSURL fileURLWithPath:isDirectory:]( &OBJC_CLASS___NSURL,  "fileURLWithPath:isDirectory:",  v16,  1LL));

        __int128 v18 = (void *)objc_claimAutoreleasedReturnValue(+[DEFilter catUpdates](&OBJC_CLASS___DEFilter, "catUpdates"));
        uint64_t v4 = (uint64_t)+[DEUpdater putManifest:src:contents:summary:overrides:]( &OBJC_CLASS___DEUpdater,  "putManifest:src:contents:summary:overrides:",  v14,  v17,  v18,  0LL,  0LL);

        goto LABEL_57;
      }
    }

    else
    {
      puts("--distribution is required");
    }

void sub_100038FFC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24, void *a25, uint64_t a26, int a27, __int16 a28, char a29, char a30, char a31)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  *(void *)(v34 - 80) = &a31;
  sub_1000027F4((void ***)(v34 - 80));
  _Unwind_Resume(a1);
}

void sub_100039124(uint64_t a1)
{
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_100039198( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000391CC(uint64_t a1, int a2)
{
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)&qword_10007C760);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_10007C760))
  {
    sub_1000021BC(&qword_10007C748, "================================================================================");
    __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10007C748, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10007C760);
  }

  if (a2)
  {
    if (byte_10007C75F >= 0) {
      char v5 = &qword_10007C748;
    }
    else {
      char v5 = (uint64_t *)qword_10007C748;
    }
    if (byte_10007C75F >= 0) {
      uint64_t v6 = byte_10007C75F;
    }
    else {
      uint64_t v6 = unk_10007C750;
    }
    int v7 = sub_100002F60(&std::cout, (uint64_t)v5, v6);
    LOBYTE(v29.__locale_) = 10;
    int v8 = sub_100002F60(v7, (uint64_t)&v29, 1LL);
    uint64_t v9 = sub_100002F60(v8, (uint64_t)"BEGIN: ", 7LL);
    int v10 = *(char *)(a1 + 23);
    if (v10 >= 0) {
      uint64_t v11 = a1;
    }
    else {
      uint64_t v11 = *(void *)a1;
    }
    if (v10 >= 0) {
      uint64_t v12 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v12 = *(void *)(a1 + 8);
    }
    uint64_t v13 = sub_100002F60(v9, v11, v12);
    LOBYTE(v29.__locale_) = 10;
    uint64_t v14 = sub_100002F60(v13, (uint64_t)&v29, 1LL);
    std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(*v14 - 24LL)));
    __int128 v15 = std::locale::use_facet(&v29, &std::ctype<char>::id);
    uint64_t v16 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10LL);
  }

  else
  {
    LOBYTE(v29.__locale_) = 10;
    uint64_t v17 = sub_100002F60(&std::cout, (uint64_t)&v29, 1LL);
    __int128 v18 = sub_100002F60(v17, (uint64_t)"END: ", 5LL);
    int v19 = *(char *)(a1 + 23);
    if (v19 >= 0) {
      uint64_t v20 = a1;
    }
    else {
      uint64_t v20 = *(void *)a1;
    }
    if (v19 >= 0) {
      uint64_t v21 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v21 = *(void *)(a1 + 8);
    }
    uint64_t v22 = sub_100002F60(v18, v20, v21);
    LOBYTE(v29.__locale_) = 10;
    unsigned __int8 v23 = sub_100002F60(v22, (uint64_t)&v29, 1LL);
    if (byte_10007C75F >= 0) {
      uint64_t v24 = &qword_10007C748;
    }
    else {
      uint64_t v24 = (uint64_t *)qword_10007C748;
    }
    if (byte_10007C75F >= 0) {
      uint64_t v25 = byte_10007C75F;
    }
    else {
      uint64_t v25 = unk_10007C750;
    }
    uint64_t v14 = sub_100002F60(v23, (uint64_t)v24, v25);
    std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(*v14 - 24LL)));
    uint64_t v26 = std::locale::use_facet(&v29, &std::ctype<char>::id);
    uint64_t v16 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10LL);
  }

  uint64_t v27 = v16;
  std::locale::~locale(&v29);
  std::ostream::put(v14, v27);
  return std::ostream::flush(v14);
}

void sub_1000393E4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_100039410(uint64_t *a1, uint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) < 3 || sub_100038648((uint64_t)a1))
  {
    sub_100038638(a2);
    sub_1000021BC( v114,  "\n <EXECUTABLE> <COMMAND> --templateDir <dir> [--delete] [--debug]\n \n Report or delete any CAT folders that have a meta element whose name attribute is\n excludeIfSet and whose value attribute is an existing environment variable.\n Example:\n <meta name=excludeIfSet value=YOUR_ENV_VAR/>\n \n --debug              Output debug log messages\n --delete             Delete all CATs that meet the criteria instead of merely reporting\n --templateDir <dir>  Path to the template directory\n");
    sub_1000021BC(__p, "exclude");
    sub_1000388C0((uint64_t)a1, (uint64_t)__p, (uint64_t)v114);
    if (SHIBYTE(v105) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v115) < 0) {
      operator delete(v114[0].__locale_);
    }
    char v4 = 0;
    return v4 & 1;
  }

  sub_1000021BC(v114, "--debug");
  int v6 = siri::dialogengine::OptionExists(a1, v114);
  int v8 = v6;
  if (SHIBYTE(v115) < 0)
  {
    operator delete(v114[0].__locale_);
    if (!v8) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }

  if (v6)
  {
LABEL_13:
    siri::dialogengine::Log::SetLogDebugMessages((siri::dialogengine::Log *)1, v7);
    siri::dialogengine::Log::SetOutputToStdout((siri::dialogengine::Log *)1, v9);
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Activate debug mode", v10);
  }

LABEL_153:
      v46 += 3;
      if (v46 == v47) {
        goto LABEL_156;
      }
    }
  }

  char v4 = 1;
LABEL_156:
  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"END ExcludeCats", v45);
  siri::dialogengine::Context::~Context((siri::dialogengine::Context *)v114);
  v114[0].__locale_ = (std::locale::__imp *)&v116;
  sub_1000027F4((void ***)v114);
  if (v119 < 0) {
    operator delete(v118[0]);
  }
LABEL_158:
  sub_1000391CC(*a1, 0);
  if (SHIBYTE(v105) < 0) {
    operator delete(__p[0]);
  }
  return v4 & 1;
}

void sub_10003A01C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, std::locale a23, uint64_t a24, int a25, __int16 a26, char a27, char a28, void *__p, uint64_t a30, int a31, __int16 a32, char a33, char a34, uint64_t a35, std::locale a36, uint64_t a37, int a38, __int16 a39, char a40, char a41)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  siri::dialogengine::Context::~Context((siri::dialogengine::Context *)&a36);
  std::string __p = (void *)(v41 - 216);
  sub_1000027F4((void ***)&__p);
  if (a18 < 0) {
    operator delete(a13);
  }
  _Unwind_Resume(a1);
}

uint64_t start(int a1, char **a2)
{
  uint64_t v2 = sub_100031AF0((uint64_t)v4) ^ 1;
  char v5 = (void **)v4;
  sub_1000027F4(&v5);
  return v2;
}

void sub_10003A2BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void *sub_10003A2D4(void *result, char **a2, char **a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    sub_100002618(result, a4);
    double result = sub_10003A358((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }

  return result;
}

void sub_10003A338( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + std::iostream::~basic_iostream(v2, v3 + 8) = v10;
  sub_1000027F4(&a9);
  _Unwind_Resume(a1);
}

void *sub_10003A358(uint64_t a1, char **a2, char **a3, void *a4)
{
  char v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    int v6 = a2;
    do
    {
      sub_1000021BC(v4, *v6++);
      char v4 = v11 + 3;
      v11 += 3;
    }

    while (v6 != a3);
  }

  char v9 = 1;
  sub_10000277C((uint64_t)v8);
  return v4;
}

void sub_10003A3E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10003A3F8(uint64_t a1)
{
  if (*(char *)(a1 + 119) < 0)
  {
    if (*(void *)(a1 + 104)) {
      return 1LL;
    }
  }

  else if (*(_BYTE *)(a1 + 119))
  {
    return 1LL;
  }

  if (*(char *)(a1 + 95) < 0)
  {
    if (*(void *)(a1 + 80)) {
      return 2LL;
    }
  }

  else if (*(_BYTE *)(a1 + 95))
  {
    return 2LL;
  }

  else {
    uint64_t v2 = *(unsigned __int8 *)(a1 + 71);
  }
  if (v2) {
    return 3LL;
  }
  else {
    return 0LL;
  }
}

void sub_10003A45C(uint64_t a1)
{
  uint64_t v1 = (char *)sub_10003A490 + 4 * byte_10006147A[sub_10003A3F8(a1)];
  __asm { BR              X10 }

void sub_10003A490()
{
  *unsigned __int8 v0 = 0LL;
  v0[1] = 0LL;
  v0[2] = 0LL;
}

void sub_10003A508(uint64_t a1)
{
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_10003A57C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_10003A5B0(void *a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  if (sub_10003A3F8((uint64_t)a1) != 3)
  {
    __dst[0] = 1;
    *(_OWORD *)&__dst[8] = 0u;
    __int128 v307 = 0u;
    __int128 v308 = 0u;
    std::string::size_type v236 = a1 + 24;
    BOOL v235 = a1[24] == a1[25];
    sub_1000021BC(__p, "metadata/dialog-metadata.yaml");
    siri::dialogengine::JoinPath(v304, a1 + 3, __p);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    if ((siri::dialogengine::FileExists(v304) & 1) == 0)
    {
      std::operator+<char>(__p, "Cannot find metadata config file: ", v304);
      siri::dialogengine::Log::Error(__p);
      if ((__p[23] & 0x80000000) == 0)
      {
LABEL_473:
        if (v305 < 0) {
          operator delete(v304[0]);
        }
        std::string v219 = (std::__shared_weak_count *)v308;
        if ((void)v308)
        {
          v220 = (unint64_t *)(v308 + 8);
          do
            unint64_t v221 = __ldaxr(v220);
          while (__stlxr(v221 - 1, v220));
          if (!v221)
          {
            ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
            std::__shared_weak_count::__release_weak(v219);
          }
        }

        if (SBYTE7(v307) < 0) {
          operator delete(*(void **)&__dst[8]);
        }
        return;
      }

      char v28 = *(void **)__p;
LABEL_472:
      operator delete(v28);
      goto LABEL_473;
    }

    YAML::LoadFile((uint64_t)v304, (uint64_t)__p);
    sub_10003CFC4(__dst, __p);
    unsigned __int8 v23 = v282;
    if (v282)
    {
      p_shared_owners = (unint64_t *)&v282->__shared_owners_;
      do
        unint64_t v25 = __ldaxr(p_shared_owners);
      while (__stlxr(v25 - 1, p_shared_owners));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }

    if ((__p[31] & 0x80000000) != 0) {
      operator delete(*(void **)&__p[8]);
    }
    sub_10003D100((uint64_t)__dst, &stru_10007C768, (uint64_t)v298);
    if (!v298[0])
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
      if (SHIBYTE(v300) < 0)
      {
        sub_10000231C(__p, (void *)v299, *((unint64_t *)&v299 + 1));
      }

      else
      {
        *(_OWORD *)std::string __p = v299;
        *(void *)&__p[16] = v300;
      }

      sub_10004120C(exception, (uint64_t)__p);
    }

    if (v303)
    {
      uint64_t v26 = **v303;
      if (*(_BYTE *)v26 && *(_DWORD *)(v26 + 16) == 4)
      {
        uint64_t v27 = **v303;
      }

      else
      {
        uint64_t v27 = **v303;
        if (!*(_BYTE *)v27 || *(_DWORD *)(v27 + 16) != 3) {
          goto LABEL_369;
        }
      }

      YAML::detail::node_data::begin(v27, (uint64_t)__p);
      uint64_t v29 = v301;
      unsigned __int8 v30 = v302;
      if (v302)
      {
        std::string::size_type v31 = (unint64_t *)&v302->__shared_owners_;
        do
          unint64_t v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        *(_OWORD *)std::string::size_type v296 = *(_OWORD *)__p;
        *(_OWORD *)&v296[16] = *(_OWORD *)&__p[16];
        *(void *)&v296[32] = v29;
        v297 = v30;
        do
          unint64_t v33 = __ldxr(v31);
        while (__stxr(v33 + 1, v31));
        do
          unint64_t v34 = __ldaxr(v31);
        while (__stlxr(v34 - 1, v31));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }

      else
      {
        *(_OWORD *)std::string::size_type v296 = *(_OWORD *)__p;
        *(_OWORD *)&v296[16] = *(_OWORD *)&__p[16];
        *(void *)&v296[32] = v301;
        v297 = 0LL;
      }

      if (v298[0] && v303)
      {
        YAML::detail::node_data::end(**v303, (uint64_t)__p);
        uint64_t v35 = v301;
        __int128 v36 = v302;
        if (v302)
        {
          std::string::size_type v37 = (unint64_t *)&v302->__shared_owners_;
          do
            unint64_t v38 = __ldxr(v37);
          while (__stxr(v38 + 1, v37));
          *(_OWORD *)std::string::size_type v294 = *(_OWORD *)__p;
          *(_OWORD *)&v294[16] = *(_OWORD *)&__p[16];
          *(void *)&v294[32] = v35;
          v295 = v36;
          do
            unint64_t v39 = __ldxr(v37);
          while (__stxr(v39 + 1, v37));
          do
            unint64_t v40 = __ldaxr(v37);
          while (__stlxr(v40 - 1, v37));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }

LABEL_69:
          while (1)
          {
            if (*(_DWORD *)v296 == *(_DWORD *)v294)
            {
              uint64_t v42 = &v294[8];
              uint64_t v41 = &v296[8];
              if (*(_DWORD *)v296 != 1)
              {
                if (*(_DWORD *)v296 != 2) {
                  break;
                }
                uint64_t v42 = &v294[16];
                uint64_t v41 = &v296[16];
              }

              if (*(void *)v41 == *(void *)v42) {
                break;
              }
            }

            sub_10003D2E8((uint64_t)v296, (uint64_t)__p);
            if (!v298[0])
            {
              __int128 v228 = __cxa_allocate_exception(0x38uLL);
              if (SHIBYTE(v300) < 0)
              {
                sub_10000231C(v263, (void *)v299, *((unint64_t *)&v299 + 1));
              }

              else
              {
                *(_OWORD *)v263 = v299;
                *(void *)&__int128 v264 = v300;
              }

              sub_10004120C(v228, (uint64_t)v263);
            }

            if (v303 && (uint64_t v43 = **v303, *(_BYTE *)v43) && *(_DWORD *)(v43 + 16) == 4)
            {
              sub_1000021BC(v261, (char *)&unk_10006A022);
              v261[24] = 0;
              if (!v284)
              {
                __int128 v232 = __cxa_allocate_exception(0x38uLL);
                if (SHIBYTE(v286) < 0)
                {
                  sub_10000231C(v263, (void *)v285, *((unint64_t *)&v285 + 1));
                }

                else
                {
                  *(_OWORD *)v263 = v285;
                  *(void *)&__int128 v264 = v286;
                }

                sub_10004120C(v232, (uint64_t)v263);
              }

              v263[0] = &v284;
              sub_1000452D8((uint64_t *)v263, (uint64_t)v242);
              if ((v261[23] & 0x80000000) != 0) {
                operator delete(*(void **)v261);
              }
              *(_OWORD *)v261 = *(_OWORD *)v242;
              *(void *)&v261[16] = *(void *)&v242[16];
              if (!v288)
              {
                v231 = __cxa_allocate_exception(0x38uLL);
                if (SHIBYTE(v290) < 0)
                {
                  sub_10000231C(v263, (void *)v289, *((unint64_t *)&v289 + 1));
                }

                else
                {
                  *(_OWORD *)v263 = v289;
                  *(void *)&__int128 v264 = v290;
                }

                sub_10004120C(v231, (uint64_t)v263);
              }

              if (v293)
              {
                uint64_t v44 = **v293;
                if (*(_BYTE *)v44)
                {
                  if (*(_DWORD *)(v44 + 16) == 4)
                  {
                    YAML::detail::node_data::begin(**v293, (uint64_t)v263);
                    uint64_t v45 = v291;
                    int v46 = v292;
                    if (v292)
                    {
                      uint64_t v47 = (unint64_t *)&v292->__shared_owners_;
                      do
                        unint64_t v48 = __ldxr(v47);
                      while (__stxr(v48 + 1, v47));
                      *(_OWORD *)std::string::size_type v242 = *(_OWORD *)v263;
                      *(_OWORD *)&v242[16] = v264;
                      *(void *)&v242[32] = v45;
                      v243 = v46;
                      do
                        unint64_t v49 = __ldxr(v47);
                      while (__stxr(v49 + 1, v47));
                      do
                        unint64_t v50 = __ldaxr(v47);
                      while (__stlxr(v50 - 1, v47));
                      if (!v50)
                      {
                        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                        std::__shared_weak_count::__release_weak(v46);
                      }
                    }

                    else
                    {
                      *(_OWORD *)std::string::size_type v242 = *(_OWORD *)v263;
                      *(_OWORD *)&v242[16] = v264;
                      *(void *)&v242[32] = v291;
                      v243 = 0LL;
                    }

                    if (v288 && v293)
                    {
                      YAML::detail::node_data::end(**v293, (uint64_t)v263);
                      uint64_t v123 = v291;
                      char v124 = v292;
                      if (v292)
                      {
                        __int128 v125 = (unint64_t *)&v292->__shared_owners_;
                        do
                          unint64_t v126 = __ldxr(v125);
                        while (__stxr(v126 + 1, v125));
                        *(_OWORD *)__int128 v278 = *(_OWORD *)v263;
                        *(_OWORD *)&v278[16] = v264;
                        *(void *)&v278[32] = v123;
                        v279 = v124;
                        do
                          unint64_t v127 = __ldxr(v125);
                        while (__stxr(v127 + 1, v125));
                        do
                          unint64_t v128 = __ldaxr(v125);
                        while (__stlxr(v128 - 1, v125));
                        if (!v128)
                        {
                          ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                          std::__shared_weak_count::__release_weak(v124);
                        }
                      }

                      else
                      {
                        *(_OWORD *)__int128 v278 = *(_OWORD *)v263;
                        *(_OWORD *)&v278[16] = v264;
                        *(void *)&v278[32] = v291;
                        v279 = 0LL;
                      }
                    }

                    else
                    {
                      *(_DWORD *)__int128 v278 = 0;
                      memset(&v278[8], 0, 32);
                      v279 = 0LL;
                    }

                    while (1)
                    {
                      if (*(_DWORD *)v242 == *(_DWORD *)v278)
                      {
                        std::string v129 = &v242[8];
                        std::string v130 = &v278[8];
                        if (*(_DWORD *)v242 != 1)
                        {
                          if (*(_DWORD *)v242 != 2) {
                            goto LABEL_320;
                          }
                          std::string v129 = &v242[16];
                          std::string v130 = &v278[16];
                        }

                        if (*(void *)v129 == *(void *)v130)
                        {
LABEL_320:
                          __int128 v146 = v279;
                          if (v279)
                          {
                            unint64_t v147 = (unint64_t *)&v279->__shared_owners_;
                            do
                              unint64_t v148 = __ldaxr(v147);
                            while (__stlxr(v148 - 1, v147));
                            if (!v148)
                            {
                              ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
                              std::__shared_weak_count::__release_weak(v146);
                            }
                          }

                          uint64_t v149 = v243;
                          if (v243)
                          {
                            int v150 = (unint64_t *)&v243->__shared_owners_;
                            do
                              unint64_t v151 = __ldaxr(v150);
                            while (__stlxr(v151 - 1, v150));
                            if (!v151)
                            {
                              ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
                              std::__shared_weak_count::__release_weak(v149);
                            }
                          }

                          break;
                        }
                      }

                      sub_10003D658((uint64_t)v242, (uint64_t)v263);
                      if (!v268)
                      {
                        __int128 v226 = __cxa_allocate_exception(0x38uLL);
                        if (SHIBYTE(v270) < 0)
                        {
                          sub_10000231C(&v254, (void *)__src, *((unint64_t *)&__src + 1));
                        }

                        else
                        {
                          __int128 v254 = __src;
                          *(void *)&__int128 v255 = v270;
                        }

                        sub_10004120C(v226, (uint64_t)&v254);
                      }

                      *(void *)&__int128 v254 = &v268;
                      sub_1000452D8((uint64_t *)&v254, (uint64_t)v252);
                      uint64_t v131 = v252[23];
                      char v132 = v252[23];
                      if (v252[23] >= 0) {
                        uint64_t v133 = v252[23];
                      }
                      else {
                        uint64_t v133 = *(void *)&v252[8];
                      }
                      uint64_t v134 = byte_10007C797;
                      if (byte_10007C797 < 0) {
                        uint64_t v134 = qword_10007C788;
                      }
                      if (v133 == v134)
                      {
                        if (byte_10007C797 >= 0) {
                          char v135 = &qword_10007C780;
                        }
                        else {
                          char v135 = (uint64_t *)qword_10007C780;
                        }
                        if ((v252[23] & 0x80000000) != 0)
                        {
LABEL_292:
                          if (!v272)
                          {
                            std::string::size_type v230 = __cxa_allocate_exception(0x38uLL);
                            if (SHIBYTE(v274) < 0)
                            {
                              sub_10000231C(&v254, (void *)v273, *((unint64_t *)&v273 + 1));
                            }

                            else
                            {
                              __int128 v254 = v273;
                              *(void *)&__int128 v255 = v274;
                            }

                            sub_10004120C(v230, (uint64_t)&v254);
                          }

                          *(void *)&__int128 v254 = &v272;
                          sub_1000452D8((uint64_t *)&v254, (uint64_t)v258);
                          v261[24] = siri::dialogengine::StringToBool(v258);
                          if (SHIBYTE(v259) < 0) {
                            operator delete(v258[0]);
                          }
                          char v132 = v252[23];
                          goto LABEL_296;
                        }

                        if (!v252[23]) {
                          goto LABEL_292;
                        }
                        std::string v136 = v252;
                        while (*v136 == *(unsigned __int8 *)v135)
                        {
                          ++v136;
                          char v135 = (uint64_t *)((char *)v135 + 1);
                          if (!--v131) {
                            goto LABEL_292;
                          }
                        }
                      }

LABEL_296:
                      if (v132 < 0) {
LABEL_297:
                      }
                        operator delete(*(void **)v252);
                      char v137 = v276;
                      if (v276)
                      {
                        int64_t v138 = (unint64_t *)&v276->__shared_owners_;
                        do
                          unint64_t v139 = __ldaxr(v138);
                        while (__stlxr(v139 - 1, v138));
                        if (!v139)
                        {
                          ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
                          std::__shared_weak_count::__release_weak(v137);
                        }
                      }

                      if (SHIBYTE(v274) < 0) {
                        operator delete((void *)v273);
                      }
                      std::string v140 = v271;
                      if (v271)
                      {
                        unsigned __int8 v141 = (unint64_t *)&v271->__shared_owners_;
                        do
                          unint64_t v142 = __ldaxr(v141);
                        while (__stlxr(v142 - 1, v141));
                        if (!v142)
                        {
                          ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
                          std::__shared_weak_count::__release_weak(v140);
                        }
                      }

                      if (SHIBYTE(v270) < 0) {
                        operator delete((void *)__src);
                      }
                      std::string v143 = v266;
                      if (v266)
                      {
                        char v144 = (unint64_t *)&v266->__shared_owners_;
                        do
                          unint64_t v145 = __ldaxr(v144);
                        while (__stlxr(v145 - 1, v144));
                        if (!v145)
                        {
                          ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
                          std::__shared_weak_count::__release_weak(v143);
                        }
                      }

                      if (SHIBYTE(v264) < 0) {
                        operator delete(v263[1]);
                      }
                      sub_100044EB4((uint64_t)v242);
                    }
                  }
                }
              }

              unint64_t v152 = a2[1];
              if (v152 >= a2[2])
              {
                uint64_t v153 = sub_1000455BC(a2, (__int128 *)v261);
              }

              else
              {
                sub_100045550(a2, (__int128 *)v261);
                uint64_t v153 = v152 + 32;
              }

              a2[1] = v153;
              if ((v261[23] & 0x80000000) != 0)
              {
                unint64_t v61 = *(void **)v261;
                goto LABEL_335;
              }
            }

            else
            {
              if (!__p[0])
              {
                v229 = __cxa_allocate_exception(0x38uLL);
                if ((__p[31] & 0x80000000) != 0)
                {
                  sub_10000231C(v263, *(void **)&__p[8], *(unint64_t *)&__p[16]);
                }

                else
                {
                  *(_OWORD *)v263 = *(_OWORD *)&__p[8];
                  *(void *)&__int128 v264 = *(void *)&__p[24];
                }

                sub_10004120C(v229, (uint64_t)v263);
              }

              if (v283)
              {
                uint64_t v51 = **v283;
                if (!*(_BYTE *)v51 || *(_DWORD *)(v51 + 16) != 2)
                {
                  uint64_t v54 = **v283;
                  if (!*(_BYTE *)v54 || *(_DWORD *)(v54 + 16) != 4) {
                    goto LABEL_336;
                  }
                  YAML::detail::node_data::begin(v54, (uint64_t)v263);
                  uint64_t v55 = v281;
                  uint64_t v56 = v282;
                  if (v282)
                  {
                    __int128 v57 = (unint64_t *)&v282->__shared_owners_;
                    do
                      unint64_t v58 = __ldxr(v57);
                    while (__stxr(v58 + 1, v57));
                    *(_OWORD *)__int128 v278 = *(_OWORD *)v263;
                    *(_OWORD *)&v278[16] = v264;
                    *(void *)&v278[32] = v55;
                    v279 = v56;
                    do
                      unint64_t v59 = __ldxr(v57);
                    while (__stxr(v59 + 1, v57));
                    do
                      unint64_t v60 = __ldaxr(v57);
                    while (__stlxr(v60 - 1, v57));
                    if (!v60)
                    {
                      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                      std::__shared_weak_count::__release_weak(v56);
                    }
                  }

                  else
                  {
                    *(_OWORD *)__int128 v278 = *(_OWORD *)v263;
                    *(_OWORD *)&v278[16] = v264;
                    *(void *)&v278[32] = v281;
                    v279 = 0LL;
                  }

                  if (__p[0] && v283)
                  {
                    YAML::detail::node_data::end(**v283, (uint64_t)v263);
                    int v62 = v281;
                    uint64_t v63 = v282;
                    if (v282)
                    {
                      uint64_t v64 = (unint64_t *)&v282->__shared_owners_;
                      do
                        unint64_t v65 = __ldxr(v64);
                      while (__stxr(v65 + 1, v64));
                      *(_OWORD *)v261 = *(_OWORD *)v263;
                      *(_OWORD *)&v261[16] = v264;
                      *(void *)&v261[32] = v62;
                      std::string::size_type v262 = v63;
                      do
                        unint64_t v66 = __ldxr(v64);
                      while (__stxr(v66 + 1, v64));
                      do
                        unint64_t v67 = __ldaxr(v64);
                      while (__stlxr(v67 - 1, v64));
                      if (!v67)
                      {
                        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                        std::__shared_weak_count::__release_weak(v63);
                      }
                    }

                    else
                    {
                      *(_OWORD *)v261 = *(_OWORD *)v263;
                      *(_OWORD *)&v261[16] = v264;
                      *(void *)&v261[32] = v281;
                      std::string::size_type v262 = 0LL;
                    }
                  }

                  else
                  {
                    *(_DWORD *)v261 = 0;
                    memset(&v261[8], 0, 32);
                    std::string::size_type v262 = 0LL;
                  }

                  while (1)
                  {
                    if (*(_DWORD *)v278 == *(_DWORD *)v261)
                    {
                      uint64_t v69 = &v261[8];
                      uint64_t v68 = &v278[8];
                      if (*(_DWORD *)v278 != 1)
                      {
                        if (*(_DWORD *)v278 != 2) {
                          goto LABEL_247;
                        }
                        uint64_t v69 = &v261[16];
                        uint64_t v68 = &v278[16];
                      }

                      if (*(void *)v68 == *(void *)v69)
                      {
LABEL_247:
                        char v117 = v262;
                        if (v262)
                        {
                          __int128 v118 = (unint64_t *)&v262->__shared_owners_;
                          do
                            unint64_t v119 = __ldaxr(v118);
                          while (__stlxr(v119 - 1, v118));
                          if (!v119)
                          {
                            ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                            std::__shared_weak_count::__release_weak(v117);
                          }
                        }

                        std::locale v120 = v279;
                        if (v279)
                        {
                          char v121 = (unint64_t *)&v279->__shared_owners_;
                          do
                            unint64_t v122 = __ldaxr(v121);
                          while (__stlxr(v122 - 1, v121));
                          if (!v122)
                          {
                            ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
                            std::__shared_weak_count::__release_weak(v120);
                          }
                        }

                        goto LABEL_336;
                      }
                    }

                    sub_10003D658((uint64_t)v278, (uint64_t)v263);
                    sub_1000021BC(v258, (char *)&unk_10006A022);
                    char v260 = 0;
                    if (!v268)
                    {
                      uint64_t v224 = __cxa_allocate_exception(0x38uLL);
                      if (SHIBYTE(v270) < 0)
                      {
                        sub_10000231C(v242, (void *)__src, *((unint64_t *)&__src + 1));
                      }

                      else
                      {
                        *(_OWORD *)std::string::size_type v242 = __src;
                        *(void *)&v242[16] = v270;
                      }

                      sub_10004120C(v224, (uint64_t)v242);
                    }

                    *(void *)std::string::size_type v242 = &v268;
                    sub_1000452D8((uint64_t *)v242, (uint64_t)&v254);
                    if (SHIBYTE(v259) < 0) {
                      operator delete(v258[0]);
                    }
                    *(_OWORD *)__int128 v258 = v254;
                    uint64_t v259 = v255;
                    if (!v272)
                    {
                      v225 = __cxa_allocate_exception(0x38uLL);
                      if (SHIBYTE(v274) < 0)
                      {
                        sub_10000231C(v242, (void *)v273, *((unint64_t *)&v273 + 1));
                      }

                      else
                      {
                        *(_OWORD *)std::string::size_type v242 = v273;
                        *(void *)&v242[16] = v274;
                      }

                      sub_10004120C(v225, (uint64_t)v242);
                    }

                    if (v277)
                    {
                      uint64_t v70 = **v277;
                      if (*(_BYTE *)v70)
                      {
                        if (*(_DWORD *)(v70 + 16) == 4) {
                          break;
                        }
                      }
                    }

LABEL_219:
                    unint64_t v106 = a2[1];
                    if (v106 >= a2[2])
                    {
                      uint64_t v107 = sub_1000455BC(a2, (__int128 *)v258);
                    }

                    else
                    {
                      sub_100045550(a2, (__int128 *)v258);
                      uint64_t v107 = v106 + 32;
                    }

                    a2[1] = v107;
                    if (SHIBYTE(v259) < 0) {
                      operator delete(v258[0]);
                    }
                    std::string::size_type v108 = v276;
                    if (v276)
                    {
                      std::string v109 = (unint64_t *)&v276->__shared_owners_;
                      do
                        unint64_t v110 = __ldaxr(v109);
                      while (__stlxr(v110 - 1, v109));
                      if (!v110)
                      {
                        ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                        std::__shared_weak_count::__release_weak(v108);
                      }
                    }

                    if (SHIBYTE(v274) < 0) {
                      operator delete((void *)v273);
                    }
                    char v111 = v271;
                    if (v271)
                    {
                      uint64_t v112 = (unint64_t *)&v271->__shared_owners_;
                      do
                        unint64_t v113 = __ldaxr(v112);
                      while (__stlxr(v113 - 1, v112));
                      if (!v113)
                      {
                        ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                        std::__shared_weak_count::__release_weak(v111);
                      }
                    }

                    if (SHIBYTE(v270) < 0) {
                      operator delete((void *)__src);
                    }
                    std::string::size_type v114 = v266;
                    if (v266)
                    {
                      char v115 = (unint64_t *)&v266->__shared_owners_;
                      do
                        unint64_t v116 = __ldaxr(v115);
                      while (__stlxr(v116 - 1, v115));
                      if (!v116)
                      {
                        ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
                        std::__shared_weak_count::__release_weak(v114);
                      }
                    }

                    if (SHIBYTE(v264) < 0) {
                      operator delete(v263[1]);
                    }
                    sub_100044EB4((uint64_t)v278);
                  }

                  YAML::detail::node_data::begin(**v277, (uint64_t)v242);
                  uint64_t v71 = v275;
                  uint64_t v72 = v276;
                  if (v276)
                  {
                    uint64_t v73 = (unint64_t *)&v276->__shared_owners_;
                    do
                      unint64_t v74 = __ldxr(v73);
                    while (__stxr(v74 + 1, v73));
                    __int128 v254 = *(_OWORD *)v242;
                    __int128 v255 = *(_OWORD *)&v242[16];
                    uint64_t v256 = v71;
                    v257 = v72;
                    do
                      unint64_t v75 = __ldxr(v73);
                    while (__stxr(v75 + 1, v73));
                    do
                      unint64_t v76 = __ldaxr(v73);
                    while (__stlxr(v76 - 1, v73));
                    if (!v76)
                    {
                      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
                      std::__shared_weak_count::__release_weak(v72);
                    }
                  }

                  else
                  {
                    __int128 v254 = *(_OWORD *)v242;
                    __int128 v255 = *(_OWORD *)&v242[16];
                    uint64_t v256 = v275;
                    v257 = 0LL;
                  }

                  if (v272 && v277)
                  {
                    YAML::detail::node_data::end(**v277, (uint64_t)v242);
                    uint64_t v77 = v275;
                    BOOL v78 = v276;
                    if (v276)
                    {
                      std::string::size_type v79 = (unint64_t *)&v276->__shared_owners_;
                      do
                        unint64_t v80 = __ldxr(v79);
                      while (__stxr(v80 + 1, v79));
                      *(_OWORD *)std::string::size_type v252 = *(_OWORD *)v242;
                      *(_OWORD *)&v252[16] = *(_OWORD *)&v242[16];
                      *(void *)&v252[32] = v77;
                      v253 = v78;
                      do
                        unint64_t v81 = __ldxr(v79);
                      while (__stxr(v81 + 1, v79));
                      do
                        unint64_t v82 = __ldaxr(v79);
                      while (__stlxr(v82 - 1, v79));
                      if (!v82)
                      {
                        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                        std::__shared_weak_count::__release_weak(v78);
                      }
                    }

                    else
                    {
                      *(_OWORD *)std::string::size_type v252 = *(_OWORD *)v242;
                      *(_OWORD *)&v252[16] = *(_OWORD *)&v242[16];
                      *(void *)&v252[32] = v275;
                      v253 = 0LL;
                    }
                  }

                  else
                  {
                    *(_DWORD *)std::string::size_type v252 = 0;
                    memset(&v252[8], 0, 32);
                    v253 = 0LL;
                  }

                  while (2)
                  {
                    if ((_DWORD)v254 == *(_DWORD *)v252)
                    {
                      __int128 v83 = (__int128 *)((char *)&v254 + 8);
                      int v84 = &v252[8];
                      if ((_DWORD)v254 != 1)
                      {
                        if ((_DWORD)v254 != 2) {
                          goto LABEL_209;
                        }
                        __int128 v83 = &v255;
                        int v84 = &v252[16];
                      }

                      if (*(void *)v83 == *(void *)v84)
                      {
LABEL_209:
                        uint64_t v100 = v253;
                        if (v253)
                        {
                          std::string::size_type v101 = (unint64_t *)&v253->__shared_owners_;
                          do
                            unint64_t v102 = __ldaxr(v101);
                          while (__stlxr(v102 - 1, v101));
                          if (!v102)
                          {
                            ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                            std::__shared_weak_count::__release_weak(v100);
                          }
                        }

                        unint64_t v103 = v257;
                        if (v257)
                        {
                          std::string::size_type v104 = (unint64_t *)&v257->__shared_owners_;
                          do
                            unint64_t v105 = __ldaxr(v104);
                          while (__stlxr(v105 - 1, v104));
                          if (!v105)
                          {
                            ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                            std::__shared_weak_count::__release_weak(v103);
                          }
                        }

                        goto LABEL_219;
                      }
                    }

                    sub_10003D658((uint64_t)&v254, (uint64_t)v242);
                    if (!v244)
                    {
                      std::string v222 = __cxa_allocate_exception(0x38uLL);
                      if (SHIBYTE(v246) < 0)
                      {
                        sub_10000231C(&v309, (void *)v245, *((unint64_t *)&v245 + 1));
                      }

                      else
                      {
                        __int128 v309 = v245;
                        uint64_t v310 = v246;
                      }

                      sub_10004120C(v222, (uint64_t)&v309);
                    }

                    *(void *)&__int128 v309 = &v244;
                    sub_1000452D8((uint64_t *)&v309, (uint64_t)&__s1);
                    uint64_t v85 = v241;
                    unsigned __int8 v86 = v241;
                    if ((v241 & 0x80u) == 0) {
                      size_t v87 = v241;
                    }
                    else {
                      size_t v87 = __n;
                    }
                    uint64_t v88 = byte_10007C797;
                    if (byte_10007C797 < 0) {
                      uint64_t v88 = qword_10007C788;
                    }
                    if (v87 == v88)
                    {
                      if (byte_10007C797 >= 0) {
                        uint64_t v89 = &qword_10007C780;
                      }
                      else {
                        uint64_t v89 = (uint64_t *)qword_10007C780;
                      }
                      if (((char)v241 & 0x80000000) == 0)
                      {
                        if (v241)
                        {
                          p_s1 = &__s1;
                          while (*(unsigned __int8 *)p_s1 == *(unsigned __int8 *)v89)
                          {
                            p_s1 = (void **)((char *)p_s1 + 1);
                            uint64_t v89 = (uint64_t *)((char *)v89 + 1);
                            if (!--v85) {
                              goto LABEL_181;
                            }
                          }

                          goto LABEL_185;
                        }

LABEL_181:
                        if (!v248)
                        {
                          std::string v223 = __cxa_allocate_exception(0x38uLL);
                          if (SHIBYTE(v250) < 0)
                          {
                            sub_10000231C(&v309, (void *)v249, *((unint64_t *)&v249 + 1));
                          }

                          else
                          {
                            __int128 v309 = v249;
                            uint64_t v310 = v250;
                          }

                          sub_10004120C(v223, (uint64_t)&v309);
                        }

                        *(void *)&__int128 v309 = &v248;
                        sub_1000452D8((uint64_t *)&v309, (uint64_t)v237);
                        char v260 = siri::dialogengine::StringToBool(v237);
                        if (v238 < 0) {
                          operator delete(v237[0]);
                        }
                        unsigned __int8 v86 = v241;
                        goto LABEL_185;
                      }

                      if (!memcmp(__s1, v89, __n)) {
                        goto LABEL_181;
                      }
LABEL_186:
                      operator delete(__s1);
                    }

                    else
                    {
LABEL_185:
                      if ((v86 & 0x80) != 0) {
                        goto LABEL_186;
                      }
                    }

                    unint64_t v91 = v251;
                    if (v251)
                    {
                      std::string::size_type v92 = (unint64_t *)&v251->__shared_owners_;
                      do
                        unint64_t v93 = __ldaxr(v92);
                      while (__stlxr(v93 - 1, v92));
                      if (!v93)
                      {
                        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                        std::__shared_weak_count::__release_weak(v91);
                      }
                    }

                    if (SHIBYTE(v250) < 0) {
                      operator delete((void *)v249);
                    }
                    int v94 = v247;
                    if (v247)
                    {
                      int v95 = (unint64_t *)&v247->__shared_owners_;
                      do
                        unint64_t v96 = __ldaxr(v95);
                      while (__stlxr(v96 - 1, v95));
                      if (!v96)
                      {
                        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                        std::__shared_weak_count::__release_weak(v94);
                      }
                    }

                    if (SHIBYTE(v246) < 0) {
                      operator delete((void *)v245);
                    }
                    uint64_t v97 = v243;
                    if (v243)
                    {
                      std::string::size_type v98 = (unint64_t *)&v243->__shared_owners_;
                      do
                        unint64_t v99 = __ldaxr(v98);
                      while (__stlxr(v99 - 1, v98));
                      if (!v99)
                      {
                        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
                        std::__shared_weak_count::__release_weak(v97);
                      }
                    }

                    if ((v242[31] & 0x80000000) != 0) {
                      operator delete(*(void **)&v242[8]);
                    }
                    sub_100044EB4((uint64_t)&v254);
                    continue;
                  }
                }

                sub_1000021BC(v263, (char *)&unk_10006A022);
                BYTE8(v264) = 0;
                if (!__p[0])
                {
                  v233 = __cxa_allocate_exception(0x38uLL);
                  if ((__p[31] & 0x80000000) != 0)
                  {
                    sub_10000231C(v242, *(void **)&__p[8], *(unint64_t *)&__p[16]);
                  }

                  else
                  {
                    *(_OWORD *)std::string::size_type v242 = *(_OWORD *)&__p[8];
                    *(void *)&v242[16] = *(void *)&__p[24];
                  }

                  sub_10004120C(v233, (uint64_t)v242);
                }

                *(void *)std::string::size_type v242 = __p;
                sub_1000452D8((uint64_t *)v242, (uint64_t)v278);
                if (SBYTE7(v264) < 0) {
                  operator delete(v263[0]);
                }
                *(_OWORD *)v263 = *(_OWORD *)v278;
                *(void *)&__int128 v264 = *(void *)&v278[16];
                unint64_t v52 = a2[1];
                if (v52 >= a2[2])
                {
                  uint64_t v53 = sub_1000455BC(a2, (__int128 *)v263);
                }

                else
                {
                  sub_100045550(a2, (__int128 *)v263);
                  uint64_t v53 = v52 + 32;
                }

                a2[1] = v53;
                if (SBYTE7(v264) < 0)
                {
                  unint64_t v61 = v263[0];
LABEL_335:
                  operator delete(v61);
                }
              }
            }

    if (SHIBYTE(v70) < 0) {
      operator delete(__dst[0]);
    }
    __int128 v12 = (__int128 *)((char *)v12 + 24);
  }

  __p[0] = &v71;
  sub_1000027F4((void ***)__p);
  char v4 = 1LL;
LABEL_188:
  if (SHIBYTE(v74) < 0) {
    operator delete(v73[0]);
  }
  return v4;
}

LABEL_336:
            __int128 v154 = v292;
            if (v292)
            {
              uint64_t v155 = (unint64_t *)&v292->__shared_owners_;
              do
                unint64_t v156 = __ldaxr(v155);
              while (__stlxr(v156 - 1, v155));
              if (!v156)
              {
                ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
                std::__shared_weak_count::__release_weak(v154);
              }
            }

            if (SHIBYTE(v290) < 0) {
              operator delete((void *)v289);
            }
            int v157 = v287;
            if (v287)
            {
              int v158 = (unint64_t *)&v287->__shared_owners_;
              do
                unint64_t v159 = __ldaxr(v158);
              while (__stlxr(v159 - 1, v158));
              if (!v159)
              {
                ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
                std::__shared_weak_count::__release_weak(v157);
              }
            }

            if (SHIBYTE(v286) < 0) {
              operator delete((void *)v285);
            }
            __int128 v160 = v282;
            if (v282)
            {
              int v161 = (unint64_t *)&v282->__shared_owners_;
              do
                unint64_t v162 = __ldaxr(v161);
              while (__stlxr(v162 - 1, v161));
              if (!v162)
              {
                ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
                std::__shared_weak_count::__release_weak(v160);
              }
            }

            if ((__p[31] & 0x80000000) != 0) {
              operator delete(*(void **)&__p[8]);
            }
            sub_100044EB4((uint64_t)v296);
          }

          int v163 = v295;
          if (v295)
          {
            int v164 = (unint64_t *)&v295->__shared_owners_;
            do
              unint64_t v165 = __ldaxr(v164);
            while (__stlxr(v165 - 1, v164));
            if (!v165)
            {
              ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
              std::__shared_weak_count::__release_weak(v163);
            }
          }

          std::string v166 = v297;
          if (v297)
          {
            std::string v167 = (unint64_t *)&v297->__shared_owners_;
            do
              unint64_t v168 = __ldaxr(v167);
            while (__stlxr(v168 - 1, v167));
            if (!v168)
            {
              ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
              std::__shared_weak_count::__release_weak(v166);
            }
          }

          goto LABEL_369;
        }

        *(_OWORD *)std::string::size_type v294 = *(_OWORD *)__p;
        *(_OWORD *)&v294[16] = *(_OWORD *)&__p[16];
        *(void *)&v294[32] = v301;
      }

      else
      {
        *(_DWORD *)std::string::size_type v294 = 0;
        memset(&v294[8], 0, 32);
      }

      v295 = 0LL;
      goto LABEL_69;
    }

LABEL_369:
    sub_10003D100((uint64_t)__dst, &stru_10007C798, (uint64_t)__p);
    if (!__p[0] || v283 && !*(_BYTE *)**v283) {
      BOOL v235 = 0;
    }
    int v169 = v282;
    if (v282)
    {
      char v170 = (unint64_t *)&v282->__shared_owners_;
      do
        unint64_t v171 = __ldaxr(v170);
      while (__stlxr(v171 - 1, v170));
      if (!v171)
      {
        ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
        std::__shared_weak_count::__release_weak(v169);
      }
    }

    if ((__p[31] & 0x80000000) != 0) {
      operator delete(*(void **)&__p[8]);
    }
    if (v235)
    {
      sub_10003D100((uint64_t)__dst, &stru_10007C798, (uint64_t)v263);
      if (LOBYTE(v263[0]) && v267)
      {
        YAML::detail::node_data::begin(**v267, (uint64_t)__p);
        uint64_t v172 = v265;
        unsigned __int8 v173 = v266;
        if (v266)
        {
          __int128 v174 = (unint64_t *)&v266->__shared_owners_;
          do
            unint64_t v175 = __ldxr(v174);
          while (__stxr(v175 + 1, v174));
          *(_OWORD *)std::string::size_type v242 = *(_OWORD *)__p;
          *(_OWORD *)&v242[16] = *(_OWORD *)&__p[16];
          *(void *)&v242[32] = v172;
          v243 = v173;
          do
            unint64_t v176 = __ldxr(v174);
          while (__stxr(v176 + 1, v174));
          do
            unint64_t v177 = __ldaxr(v174);
          while (__stlxr(v177 - 1, v174));
          if (!v177)
          {
            ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
            std::__shared_weak_count::__release_weak(v173);
          }
        }

        else
        {
          *(_OWORD *)std::string::size_type v242 = *(_OWORD *)__p;
          *(_OWORD *)&v242[16] = *(_OWORD *)&__p[16];
          *(void *)&v242[32] = v265;
          v243 = 0LL;
        }
      }

      else
      {
        *(_DWORD *)std::string::size_type v242 = 0;
        memset(&v242[8], 0, 32);
        v243 = 0LL;
      }

      if (LOBYTE(v263[0]) && v267)
      {
        YAML::detail::node_data::end(**v267, (uint64_t)__p);
        uint64_t v178 = v265;
        std::string::size_type v179 = v266;
        if (v266)
        {
          std::string v180 = (unint64_t *)&v266->__shared_owners_;
          do
            unint64_t v181 = __ldxr(v180);
          while (__stxr(v181 + 1, v180));
          *(_OWORD *)std::string::size_type v296 = *(_OWORD *)__p;
          *(_OWORD *)&v296[16] = *(_OWORD *)&__p[16];
          *(void *)&v296[32] = v178;
          v297 = v179;
          do
            unint64_t v182 = __ldxr(v180);
          while (__stxr(v182 + 1, v180));
          do
            unint64_t v183 = __ldaxr(v180);
          while (__stlxr(v183 - 1, v180));
          if (!v183)
          {
            ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
            std::__shared_weak_count::__release_weak(v179);
          }

LABEL_407:
          while (1)
          {
            if (*(_DWORD *)v242 == *(_DWORD *)v296)
            {
              std::string v184 = &v242[8];
              int v185 = &v296[8];
              if (*(_DWORD *)v242 != 1)
              {
                if (*(_DWORD *)v242 != 2) {
                  break;
                }
                int v185 = &v296[16];
                std::string v184 = &v242[16];
              }

              if (*(void *)v184 == *(void *)v185) {
                break;
              }
            }

            sub_10003D2E8((uint64_t)v242, (uint64_t)__p);
            if (!__p[0])
            {
              v227 = __cxa_allocate_exception(0x38uLL);
              if ((__p[31] & 0x80000000) != 0)
              {
                sub_10000231C(v294, *(void **)&__p[8], *(unint64_t *)&__p[16]);
              }

              else
              {
                *(_OWORD *)std::string::size_type v294 = *(_OWORD *)&__p[8];
                *(void *)&v294[16] = *(void *)&__p[24];
              }

              sub_10004120C(v227, (uint64_t)v294);
            }

            *(void *)std::string::size_type v294 = __p;
            sub_1000452D8((uint64_t *)v294, (uint64_t)v278);
            unint64_t v187 = a1[25];
            unint64_t v186 = a1[26];
            if (v187 >= v186)
            {
              unint64_t v189 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v187 - *v236) >> 3);
              unint64_t v190 = v189 + 1;
              if (v189 + 1 > 0xAAAAAAAAAAAAAAALL) {
                sub_100002668();
              }
              unint64_t v191 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v186 - *v236) >> 3);
              if (2 * v191 > v190) {
                unint64_t v190 = 2 * v191;
              }
              if (v191 >= 0x555555555555555LL) {
                unint64_t v192 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v192 = v190;
              }
              *(void *)&v294[32] = a1 + 26;
              if (v192) {
                int v193 = (char *)sub_10000267C((uint64_t)(a1 + 26), v192);
              }
              else {
                int v193 = 0LL;
              }
              __int128 v194 = &v193[24 * v189];
              *(void *)std::string::size_type v294 = v193;
              *(void *)&v294[8] = v194;
              *(void *)&v294[24] = &v193[24 * v192];
              __int128 v195 = *(_OWORD *)v278;
              *((void *)v194 + 2) = *(void *)&v278[16];
              *(_OWORD *)__int128 v194 = v195;
              memset(v278, 0, 24);
              *(void *)&v294[16] = v194 + 24;
              sub_100002D50(v236, v294);
              uint64_t v196 = a1[25];
              sub_100002ED8((uint64_t)v294);
              int v197 = v278[23];
              a1[25] = v196;
              if (v197 < 0) {
                operator delete(*(void **)v278);
              }
            }

            else
            {
              __int128 v188 = *(_OWORD *)v278;
              *(void *)(v187 + 16) = *(void *)&v278[16];
              *(_OWORD *)unint64_t v187 = v188;
              a1[25] = v187 + 24;
            }

            char v198 = v292;
            if (v292)
            {
              v199 = (unint64_t *)&v292->__shared_owners_;
              do
                unint64_t v200 = __ldaxr(v199);
              while (__stlxr(v200 - 1, v199));
              if (!v200)
              {
                ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
                std::__shared_weak_count::__release_weak(v198);
              }
            }

            if (SHIBYTE(v290) < 0) {
              operator delete((void *)v289);
            }
            v201 = v287;
            if (v287)
            {
              std::string::size_type v202 = (unint64_t *)&v287->__shared_owners_;
              do
                unint64_t v203 = __ldaxr(v202);
              while (__stlxr(v203 - 1, v202));
              if (!v203)
              {
                ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
                std::__shared_weak_count::__release_weak(v201);
              }
            }

            if (SHIBYTE(v286) < 0) {
              operator delete((void *)v285);
            }
            uint64_t v204 = v282;
            if (v282)
            {
              v205 = (unint64_t *)&v282->__shared_owners_;
              do
                unint64_t v206 = __ldaxr(v205);
              while (__stlxr(v206 - 1, v205));
              if (!v206)
              {
                ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
                std::__shared_weak_count::__release_weak(v204);
              }
            }

            if ((__p[31] & 0x80000000) != 0) {
              operator delete(*(void **)&__p[8]);
            }
            sub_100044EB4((uint64_t)v242);
          }

          uint64_t v207 = v297;
          if (v297)
          {
            uint64_t v208 = (unint64_t *)&v297->__shared_owners_;
            do
              unint64_t v209 = __ldaxr(v208);
            while (__stlxr(v209 - 1, v208));
            if (!v209)
            {
              ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
              std::__shared_weak_count::__release_weak(v207);
            }
          }

          std::string::size_type v210 = v243;
          if (v243)
          {
            char v211 = (unint64_t *)&v243->__shared_owners_;
            do
              unint64_t v212 = __ldaxr(v211);
            while (__stlxr(v212 - 1, v211));
            if (!v212)
            {
              ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
              std::__shared_weak_count::__release_weak(v210);
            }
          }

          std::string v213 = v266;
          if (v266)
          {
            std::string v214 = (unint64_t *)&v266->__shared_owners_;
            do
              unint64_t v215 = __ldaxr(v214);
            while (__stlxr(v215 - 1, v214));
            if (!v215)
            {
              ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
              std::__shared_weak_count::__release_weak(v213);
            }
          }

          if (SHIBYTE(v264) < 0) {
            operator delete(v263[1]);
          }
          goto LABEL_465;
        }

        *(_OWORD *)std::string::size_type v296 = *(_OWORD *)__p;
        *(_OWORD *)&v296[16] = *(_OWORD *)&__p[16];
        *(void *)&v296[32] = v265;
      }

      else
      {
        *(_DWORD *)std::string::size_type v296 = 0;
        memset(&v296[8], 0, 32);
      }

      v297 = 0LL;
      goto LABEL_407;
    }

LABEL_465:
    v216 = v302;
    if (v302)
    {
      std::string v217 = (unint64_t *)&v302->__shared_owners_;
      do
        unint64_t v218 = __ldaxr(v217);
      while (__stlxr(v218 - 1, v217));
      if (!v218)
      {
        ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
        std::__shared_weak_count::__release_weak(v216);
      }
    }

    if ((SHIBYTE(v300) & 0x80000000) == 0) {
      goto LABEL_473;
    }
    char v28 = (void *)v299;
    goto LABEL_472;
  }

  char v4 = a1 + 6;
  siri::dialogengine::ListDir(v242, v4);
  char v5 = *(__int128 **)v242;
  int v6 = *(__int128 **)&v242[8];
  while (v5 != v6)
  {
    if (*((char *)v5 + 23) < 0)
    {
      sub_10000231C(__dst, *(void **)v5, *((void *)v5 + 1));
    }

    else
    {
      __int128 v7 = *v5;
      *(void *)&__dst[16] = *((void *)v5 + 2);
      *(_OWORD *)std::string __dst = v7;
    }

    siri::dialogengine::JoinPath(__p, v4, __dst);
    int v8 = siri::dialogengine::DirExists(__p);
    int v9 = v8;
    if ((__p[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)__p);
      if (v9)
      {
LABEL_10:
        if ((__dst[23] & 0x80000000) != 0)
        {
          sub_10000231C(v263, *(void **)__dst, *(unint64_t *)&__dst[8]);
        }

        else
        {
          *(_OWORD *)v263 = *(_OWORD *)__dst;
          *(void *)&__int128 v264 = *(void *)&__dst[16];
        }

        BYTE8(v264) = 1;
        unint64_t v10 = a2[1];
        unint64_t v11 = a2[2];
        if (v10 >= v11)
        {
          uint64_t v13 = (uint64_t)(v10 - *a2) >> 5;
          unint64_t v14 = v13 + 1;
          uint64_t v15 = v11 - *a2;
          if (v15 >> 4 > v14) {
            unint64_t v14 = v15 >> 4;
          }
          else {
            unint64_t v16 = v14;
          }
          v281 = a2 + 2;
          uint64_t v17 = (char *)sub_10002800C((uint64_t)(a2 + 2), v16);
          __int128 v18 = &v17[32 * v13];
          *(void *)std::string __p = v17;
          *(void *)&__p[8] = v18;
          *(void *)&_BYTE __p[24] = &v17[32 * v19];
          __int128 v20 = *(_OWORD *)v263;
          *((void *)v18 + 2) = v264;
          *(_OWORD *)__int128 v18 = v20;
          *(void *)&__int128 v264 = 0LL;
          v263[1] = 0LL;
          v263[0] = 0LL;
          v18[24] = BYTE8(v264);
          *(void *)&__p[16] = v18 + 32;
          sub_10004406C(a2, __p);
          uint64_t v21 = a2[1];
          sub_100044204((uint64_t)__p);
          int v22 = SBYTE7(v264);
          a2[1] = v21;
          if (v22 < 0) {
            operator delete(v263[0]);
          }
        }

        else
        {
          __int128 v12 = *(_OWORD *)v263;
          *(void *)(v10 + 16) = v264;
          *(_OWORD *)unint64_t v10 = v12;
          *(void *)&__int128 v264 = 0LL;
          v263[1] = 0LL;
          v263[0] = 0LL;
          *(_BYTE *)(v10 + 24) = BYTE8(v264);
          a2[1] = v10 + 32;
        }
      }
    }

    else if (v8)
    {
      goto LABEL_10;
    }

    if ((__dst[23] & 0x80000000) != 0) {
      operator delete(*(void **)__dst);
    }
    char v5 = (__int128 *)((char *)v5 + 24);
  }

  *(void *)std::string __p = v242;
  sub_1000027F4((void ***)__p);
}

void sub_10003C584(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    int v6 = __cxa_begin_catch(a1);
    std::operator+<char>(&STACK[0x320], "Unable to parse YAML file:", v3 - 216);
    __int128 v7 = std::string::append((std::string *)&STACK[0x320], "\n");
    __int128 v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    STACK[0x440] = v7->__r_.__value_.__l.__cap_;
    *(_OWORD *)&STACK[0x430] = v8;
    v7->__r_.__value_.__l.__size_ = 0LL;
    v7->__r_.__value_.__l.__cap_ = 0LL;
    v7->__r_.__value_.__r.__words[0] = 0LL;
    unint64_t v11 = (const std::string::value_type *)v6[4];
    unint64_t v10 = (char *)(v6 + 4);
    int v9 = v11;
    int v12 = v10[23];
    if (v12 >= 0) {
      uint64_t v13 = v10;
    }
    else {
      uint64_t v13 = v9;
    }
    if (v12 >= 0) {
      std::string::size_type v14 = v10[23];
    }
    else {
      std::string::size_type v14 = *((void *)v10 + 1);
    }
    uint64_t v15 = std::string::append((std::string *)&STACK[0x430], v13, v14);
    __int128 v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    STACK[0x470] = v15->__r_.__value_.__l.__cap_;
    *(_OWORD *)&STACK[0x460] = v16;
    v15->__r_.__value_.__l.__size_ = 0LL;
    v15->__r_.__value_.__l.__cap_ = 0LL;
    v15->__r_.__value_.__r.__words[0] = 0LL;
    siri::dialogengine::Log::Error(&STACK[0x460]);
    if (SLOBYTE(STACK[0x477]) < 0) {
      operator delete((void *)STACK[0x460]);
    }
    if (SLOBYTE(STACK[0x447]) < 0) {
      operator delete((void *)STACK[0x430]);
    }
    if (SLOBYTE(STACK[0x337]) < 0) {
      operator delete((void *)STACK[0x320]);
    }
  }

  else
  {
    if (a2 != 2)
    {
      sub_10003D0C8(v3 - 192);
      *(void *)(v3 - 192) = v2;
      sub_100043FE0((void ***)(v3 - 192));
      _Unwind_Resume(a1);
    }

    uint64_t v17 = __cxa_begin_catch(a1);
    std::operator+<char>(&STACK[0x240], "Exception parsing YAML file: ", v3 - 216);
    __int128 v18 = std::string::append((std::string *)&STACK[0x240], " ");
    __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    STACK[0x330] = v18->__r_.__value_.__l.__cap_;
    *(_OWORD *)&STACK[0x320] = v19;
    v18->__r_.__value_.__l.__size_ = 0LL;
    v18->__r_.__value_.__l.__cap_ = 0LL;
    v18->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v20 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(void *)v17 + 16LL))(v17);
    uint64_t v21 = std::string::append((std::string *)&STACK[0x320], v20);
    __int128 v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    STACK[0x440] = v21->__r_.__value_.__l.__cap_;
    *(_OWORD *)&STACK[0x430] = v22;
    v21->__r_.__value_.__l.__size_ = 0LL;
    v21->__r_.__value_.__l.__cap_ = 0LL;
    v21->__r_.__value_.__r.__words[0] = 0LL;
    unsigned __int8 v23 = std::string::append((std::string *)&STACK[0x430], "");
    __int128 v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    STACK[0x470] = v23->__r_.__value_.__l.__cap_;
    *(_OWORD *)&STACK[0x460] = v24;
    v23->__r_.__value_.__l.__size_ = 0LL;
    v23->__r_.__value_.__l.__cap_ = 0LL;
    v23->__r_.__value_.__r.__words[0] = 0LL;
    siri::dialogengine::Log::Error(&STACK[0x460]);
    if (SLOBYTE(STACK[0x477]) < 0) {
      operator delete((void *)STACK[0x460]);
    }
    if (SLOBYTE(STACK[0x447]) < 0) {
      operator delete((void *)STACK[0x430]);
    }
    if (SLOBYTE(STACK[0x337]) < 0) {
      operator delete((void *)STACK[0x320]);
    }
    if (SLOBYTE(STACK[0x257]) < 0) {
      operator delete((void *)STACK[0x240]);
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x10003BF80LL);
}

void sub_10003CEFC()
{
  if (SLOBYTE(STACK[0x477]) < 0) {
    operator delete((void *)STACK[0x460]);
  }
  if (SLOBYTE(STACK[0x447]) < 0) {
    operator delete((void *)STACK[0x430]);
  }
  if (SLOBYTE(STACK[0x337]) < 0) {
    operator delete((void *)STACK[0x320]);
  }
  if (SLOBYTE(STACK[0x257]) < 0) {
    operator delete((void *)STACK[0x240]);
  }
  __cxa_end_catch();
  JUMPOUT(0x10003C7E0LL);
}

void sub_10003CF6C()
{
  if (SLOBYTE(STACK[0x477]) < 0) {
    operator delete((void *)STACK[0x460]);
  }
  if (SLOBYTE(STACK[0x447]) < 0) {
    operator delete((void *)STACK[0x430]);
  }
  if (SLOBYTE(STACK[0x337]) < 0) {
    operator delete((void *)STACK[0x320]);
  }
  __cxa_end_catch();
  JUMPOUT(0x10003C7E0LL);
}

_BYTE *sub_10003CFC4(_BYTE *a1, _BYTE *a2)
{
  if (*a1) {
    BOOL v3 = *a2 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
    __int128 v7 = a1;
    __int128 v8 = exception;
    if ((char)v7[31] < 0)
    {
      sub_10000231C(&v9, *((void **)v7 + 1), *((void *)v7 + 2));
    }

    else
    {
      __int128 v9 = *(_OWORD *)(v7 + 8);
      uint64_t v10 = *((void *)v7 + 3);
    }

    sub_10004120C(v8, (uint64_t)&v9);
  }

  return a1;
}

void sub_10003D090( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

uint64_t sub_10003D0C8(uint64_t a1)
{
  return a1;
}

void sub_10003D100(uint64_t a1@<X0>, std::string *a2@<X1>, uint64_t a3@<X8>)
{
  if (!*(_BYTE *)a1)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
    if (*(char *)(a1 + 31) < 0)
    {
      sub_10000231C(&__dst, *(void **)(a1 + 8), *(void *)(a1 + 16));
    }

    else
    {
      __int128 __dst = *(_OWORD *)(a1 + 8);
      uint64_t v24 = *(void *)(a1 + 24);
    }

    sub_10004120C(exception, (uint64_t)&__dst);
  }

  sub_100041638(a1);
  __int128 v7 = *(std::__shared_weak_count **)(a1 + 40);
  int v6 = *(uint64_t ***)(a1 + 48);
  uint64_t v21 = *(void *)(a1 + 32);
  __int128 v22 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }

  uint64_t v10 = sub_10004428C(v6, a2, &v21);
  unint64_t v11 = v22;
  if (v22)
  {
    int v12 = (unint64_t *)&v22->__shared_owners_;
    do
      unint64_t v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
  {
    __int128 v16 = (unint64_t *)&v15->__shared_owners_;
    do
      unint64_t v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    *(_BYTE *)a3 = 1;
    *(void *)(a3 + std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
    *(void *)(a3 + 16) = 0LL;
    *(void *)(a3 + 24) = 0LL;
    *(void *)(a3 + 32) = v14;
    *(void *)(a3 + 40) = v15;
    do
      unint64_t v18 = __ldxr(v16);
    while (__stxr(v18 + 1, v16));
    *(void *)(a3 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v10;
    do
      unint64_t v19 = __ldaxr(v16);
    while (__stlxr(v19 - 1, v16));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

  else
  {
    *(_BYTE *)a3 = 1;
    *(void *)(a3 + std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
    *(void *)(a3 + 16) = 0LL;
    *(void *)(a3 + 24) = 0LL;
    *(void *)(a3 + 32) = v14;
    *(void *)(a3 + 40) = 0LL;
    *(void *)(a3 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v10;
  }

void sub_10003D2A0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
}

void sub_10003D2E8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_DWORD *)a1 != 2)
  {
    if (*(_DWORD *)a1 == 1)
    {
      uint64_t v2 = **(void **)(a1 + 8);
      if (v2)
      {
        uint64_t v3 = *(void *)(a1 + 32);
        char v4 = *(std::__shared_weak_count **)(a1 + 40);
        uint64_t v47 = v3;
        unint64_t v48 = v4;
        if (v4)
        {
          p_shared_owners = (unint64_t *)&v4->__shared_owners_;
          do
            unint64_t v6 = __ldxr(p_shared_owners);
          while (__stxr(v6 + 1, p_shared_owners));
          v49[0] = 1;
          unint64_t v50 = 0LL;
          uint64_t v51 = 0LL;
          uint64_t v52 = 0LL;
          uint64_t v53 = v3;
          uint64_t v54 = v4;
          do
            unint64_t v7 = __ldxr(p_shared_owners);
          while (__stxr(v7 + 1, p_shared_owners));
        }

        else
        {
          v49[0] = 1;
          unint64_t v50 = 0LL;
          uint64_t v51 = 0LL;
          uint64_t v52 = 0LL;
          uint64_t v53 = v3;
          uint64_t v54 = 0LL;
        }

        uint64_t v55 = v2;
        sub_100044F28(a2, (uint64_t)v49);
        unint64_t v17 = v54;
        if (v54)
        {
          unint64_t v18 = (unint64_t *)&v54->__shared_owners_;
          do
            unint64_t v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }

        if (SHIBYTE(v52) < 0) {
          operator delete(v50);
        }
        __int128 v20 = v48;
        if (v48)
        {
          uint64_t v21 = (unint64_t *)&v48->__shared_owners_;
          do
            unint64_t v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
LABEL_65:
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }

          return;
        }

        return;
      }
    }

void sub_10003D618( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
}

void sub_10003D658(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_DWORD *)a1 != 2)
  {
    if (*(_DWORD *)a1 == 1)
    {
      uint64_t v2 = **(void **)(a1 + 8);
      if (v2)
      {
        uint64_t v3 = *(void *)(a1 + 32);
        char v4 = *(std::__shared_weak_count **)(a1 + 40);
        uint64_t v47 = v3;
        unint64_t v48 = v4;
        if (v4)
        {
          p_shared_owners = (unint64_t *)&v4->__shared_owners_;
          do
            unint64_t v6 = __ldxr(p_shared_owners);
          while (__stxr(v6 + 1, p_shared_owners));
          v49[0] = 1;
          unint64_t v50 = 0LL;
          uint64_t v51 = 0LL;
          uint64_t v52 = 0LL;
          uint64_t v53 = v3;
          uint64_t v54 = v4;
          do
            unint64_t v7 = __ldxr(p_shared_owners);
          while (__stxr(v7 + 1, p_shared_owners));
        }

        else
        {
          v49[0] = 1;
          unint64_t v50 = 0LL;
          uint64_t v51 = 0LL;
          uint64_t v52 = 0LL;
          uint64_t v53 = v3;
          uint64_t v54 = 0LL;
        }

        uint64_t v55 = v2;
        sub_100044F28(a2, (uint64_t)v49);
        unint64_t v17 = v54;
        if (v54)
        {
          uint64_t v18 = (unint64_t *)&v54->__shared_owners_;
          do
            unint64_t v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }

        if (SHIBYTE(v52) < 0) {
          operator delete(v50);
        }
        __int128 v20 = v48;
        if (v48)
        {
          uint64_t v21 = (unint64_t *)&v48->__shared_owners_;
          do
            unint64_t v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
LABEL_65:
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }

          return;
        }

        return;
      }
    }

void sub_10003D988( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
}

uint64_t sub_10003D9C8(uint64_t a1)
{
  return a1;
}

void sub_10003DA30(siri::dialogengine::DialogMetadataReader *a1, FILE *a2)
{
  NextSemanticValue = (std::string *)siri::dialogengine::DialogMetadataReader::GetNextSemanticValue(a1);
  __int128 v57 = a2;
  uint64_t v55 = a1;
  while (NextSemanticValue)
  {
    p_std::string::pointer data = (const void **)&NextSemanticValue[1].__r_.__value_.__l.__data_;
    if ((NextSemanticValue[1].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type size = NextSemanticValue[1].__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type size = NextSemanticValue[1].__r_.__value_.__l.__size_;
    }
    std::string::size_type v7 = v64.__r_.__value_.__s.__size_;
    if ((v64.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      std::string::size_type v7 = v64.__r_.__value_.__l.__size_;
    }
    if (size != v7) {
      goto LABEL_18;
    }
    if ((v64.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int128 v8 = &v64;
    }
    else {
      __int128 v8 = (std::string *)v64.__r_.__value_.__r.__words[0];
    }
    if ((NextSemanticValue[1].__r_.__value_.__s.__size_ & 0x80) != 0)
    {
      BOOL v11 = (const char *)*p_data;
      if (memcmp(*p_data, v8, NextSemanticValue[1].__r_.__value_.__l.__size_)) {
        goto LABEL_21;
      }
    }

    else if (NextSemanticValue[1].__r_.__value_.__s.__size_)
    {
      uint64_t v9 = NextSemanticValue + 1;
      uint64_t v10 = NextSemanticValue[1].__r_.__value_.__s.__size_;
      while (v9->__r_.__value_.__s.__data_[0] == v8->__r_.__value_.__s.__data_[0])
      {
        uint64_t v9 = (std::string *)((char *)v9 + 1);
        __int128 v8 = (std::string *)((char *)v8 + 1);
        if (!--v10) {
          goto LABEL_22;
        }
      }

void sub_10003E088( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, char a28, uint64_t a29, uint64_t a30, void *__p, uint64_t a32, int a33, __int16 a34, char a35, char a36, char a37)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10003E184@<X0>(const void **a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  else {
    size_t v5 = (size_t)a1[1];
  }
  uint64_t result = sub_100007A0C(a3, v5 + 1);
  else {
    std::string::size_type v7 = *(char **)result;
  }
  if (v5)
  {
    else {
      __int128 v8 = *a1;
    }
    uint64_t result = (uint64_t)memmove(v7, v8, v5);
  }

  uint64_t v9 = &v7[v5];
  char *v9 = a2;
  v9[1] = 0;
  return result;
}

uint64_t sub_10003E214(void *a1, uint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3) < 3 || sub_100038648((uint64_t)a1))
  {
    sub_100038638(a2);
    sub_1000021BC( __p,  "\n <EXECUTABLE> <COMMAND> write --templateDir <dir> [--metadataDir <dir>] [--assistantDir <dir>] [--sourceDir <dir> ]\n [--category <name>] [--verbose] [--ignoreIncludes] [--locale <locale1> <locale2> ...] [--allLocales]\n \n Read the Templates/metadata/dialog-metadata.yaml file to define the categories and locales\n to convert. If --category is specified, exclude all other configured categories except the\n one specified. Then read [d] tag metadata from VOC files in the dialog-metadata or assistant\n repository and generate a CAT dialog metadata file for every locale. You can specify if you\n want the VOC parser to follow include directives or not. You can override the list of locales\n in the YAML file with the --locale or --allLocales arguments.\n \n Note: All of the options --metadataDir, --assistantDir and --sourceDir will allow you to specify the source of the\n VOC files you wish to convert, but --metdataDir and --assistantDir require the presence of a dialog-metada ta.yaml\n file in the Templates dir, whereas --sourceDir does not. The latter will consume all available categories pr esent\n in the specified source directory.\n \n <EXECUTABLE> <COMMAND> read --templateDir <dir> --category <name> --locale <locale>\n <EXECUTABLE> <COMMAND> read --filename <filename>\n \n Read a dialog metadata file and output its contents to the shell. You can either specify\n the file through a combination of a template dir, category name (e.g. personRelationship),\n and a locale; or you can provide the full path to the file with the --filename option.\n"
      "\n"
      "  <EXECUTABLE> <COMMAND> copy --templateDir <dir> --category <name> --outputDir <dir>\n"
      "\n"
      "      Copy all of the dialog metadata in a CAT .dtag directory into another directory and output\n"
      "      the data in VOC format. This lets you easily view all of the metadata for all locales for a\n"
      "      given category, and also lets you set up a local version of the data that's independent of\n"
      "      the assistant repo.\n"
      "\n"
      "  <EXECUTABLE> <COMMAND> codegen --templateDir <dir> --outputDir <dir> [--category <name>]\n"
      "          [--config <path>] [--swiftCaseStyle none|lower|upper] [--debug]\n"
      "\n"
      "      Read dialog metadata files and generate Swift enum definitions from their contents.\n"
      "\n"
      "      --category <name>         Process the specified category (or all categories if omitted)\n"
      "      --config <path>           Path to a YAML file for configuring output\n"
      "      --debug                   Output debug log messages\n"
      "      --outputDir <dir>         Path to the folder in which to write generated source code files\n"
      "      --swiftCaseStyle <style>  Choose the formatting of Swift enum case statements\n"
      "                                  none: Unmodified (default)\n"
      "                                  lower: All lower case\n"
      "                                  upper: All upper case\n"
      "      --templateDir <dir>       Path to the template directory\n");
    sub_1000021BC(&v142, "metadata");
    sub_1000388C0((uint64_t)a1, (uint64_t)&v142, (uint64_t)__p);
    if (SHIBYTE(v143) < 0) {
      operator delete((void *)v142);
    }
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    return 0LL;
  }

  sub_1000021BC(__p, "--debug");
  int v5 = siri::dialogengine::OptionExists(a1, __p);
  int v7 = v5;
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    if (!v7) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }

  if (v5)
  {
LABEL_12:
    siri::dialogengine::Log::SetLogDebugMessages((siri::dialogengine::Log *)1, v6);
    siri::dialogengine::Log::SetOutputToStdout((siri::dialogengine::Log *)1, v8);
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Activate debug mode", v9);
  }

LABEL_13:
  memset(v113, 0, 27);
  __int128 v111 = 0u;
  memset(v112, 0, sizeof(v112));
  memset(v110, 0, sizeof(v110));
  __int128 v109 = 0u;
  __int128 v107 = 0u;
  memset(v108, 0, sizeof(v108));
  memset(__p, 0, sizeof(__p));
  __int128 v114 = 0u;
  memset(v115, 0, sizeof(v115));
  siri::dialogengine::StringToLower(&v142);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_OWORD *)std::string __p = v142;
  __p[2] = v143;
  sub_1000021BC(&v142, "codegen");
  sub_1000021BC(v144, "copy");
  sub_1000021BC(v145, "read");
  sub_1000021BC(v146, "write");
  sub_1000021BC(v147, "grammarfeatures");
  sub_1000317D8((uint64_t)v104, (const void **)&v142, 5LL);
  for (uint64_t i = 0LL; i != -15; i -= 3LL)
  {
    if (SHIBYTE(v147[i + 2]) < 0) {
      operator delete((void *)v147[i]);
    }
  }

  if (&v105 == (char **)sub_100008EC0((uint64_t)v104, (const void **)__p))
  {
    std::string::size_type v12 = sub_100002F60(&std::cout, (uint64_t)"Please specify one of the following metadata sub-commands: ", 59LL);
    sub_1000021BC(&v140, ", ");
    siri::dialogengine::StringJoin(&v142, v104, &v140);
    if (SHIBYTE(v143) >= 0) {
      unint64_t v13 = &v142;
    }
    else {
      unint64_t v13 = (__int128 *)v142;
    }
    if (SHIBYTE(v143) >= 0) {
      uint64_t v14 = HIBYTE(v143);
    }
    else {
      uint64_t v14 = *((void *)&v142 + 1);
    }
    unint64_t v15 = sub_100002F60(v12, (uint64_t)v13, v14);
    std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24LL)));
    int v16 = std::locale::use_facet((const std::locale *)&__dst, &std::ctype<char>::id);
    uint64_t v17 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10LL);
    std::locale::~locale((std::locale *)&__dst);
    std::ostream::put(v15, v17);
    std::ostream::flush(v15);
    if (SHIBYTE(v143) < 0) {
      operator delete((void *)v142);
    }
    if (SHIBYTE(v141) < 0) {
      operator delete((void *)v140);
    }
    goto LABEL_97;
  }

  sub_1000021BC(&v142, "--verbose");
  BYTE8(v113[1]) = siri::dialogengine::OptionExists(a1, &v142);
  if (SHIBYTE(v143) < 0) {
    operator delete((void *)v142);
  }
  sub_1000021BC(&v142, "--ignoreIncludes");
  BYTE9(v113[1]) = siri::dialogengine::OptionExists(a1, &v142);
  if (SHIBYTE(v143) < 0) {
    operator delete((void *)v142);
  }
  sub_1000021BC(&v142, "--allLocales");
  BYTE10(v113[1]) = siri::dialogengine::OptionExists(a1, &v142);
  if (SHIBYTE(v143) < 0) {
    operator delete((void *)v142);
  }
  sub_1000021BC(&__dst, "--templateDir");
  siri::dialogengine::GetOption(&v140, a1, &__dst);
  siri::dialogengine::ExpandPath(&v142, &v140);
  if (SHIBYTE(__p[5]) < 0) {
    operator delete(__p[3]);
  }
  *(_OWORD *)&__p[3] = v142;
  __p[5] = v143;
  HIBYTE(v143) = 0;
  LOBYTE(v142) = 0;
  if (SHIBYTE(v141) < 0) {
    operator delete((void *)v140);
  }
  if (SHIBYTE(v139) < 0) {
    operator delete((void *)__dst);
  }
  sub_1000021BC(&v140, "--sourceDir");
  siri::dialogengine::GetOption(&v142, a1, &v140);
  if (SHIBYTE(v108[0]) < 0) {
    operator delete((void *)v107);
  }
  __int128 v107 = v142;
  v108[0] = v143;
  HIBYTE(v143) = 0;
  LOBYTE(v142) = 0;
  if (SHIBYTE(v141) < 0) {
    operator delete((void *)v140);
  }
  sub_1000021BC(&v140, "--assistantDir");
  siri::dialogengine::GetOption(&v142, a1, &v140);
  if (SHIBYTE(v108[3]) < 0) {
    operator delete((void *)v108[1]);
  }
  *(_OWORD *)&v108[1] = v142;
  v108[3] = v143;
  HIBYTE(v143) = 0;
  LOBYTE(v142) = 0;
  if (SHIBYTE(v141) < 0) {
    operator delete((void *)v140);
  }
  sub_1000021BC(&v140, "--metadataDir");
  siri::dialogengine::GetOption(&v142, a1, &v140);
  if (SHIBYTE(v110[0]) < 0) {
    operator delete((void *)v109);
  }
  __int128 v109 = v142;
  v110[0] = v143;
  HIBYTE(v143) = 0;
  LOBYTE(v142) = 0;
  if (SHIBYTE(v141) < 0) {
    operator delete((void *)v140);
  }
  sub_1000021BC(&v140, "--category");
  siri::dialogengine::GetOption(&v142, a1, &v140);
  if (SHIBYTE(v110[3]) < 0) {
    operator delete((void *)v110[1]);
  }
  *(_OWORD *)&v110[1] = v142;
  v110[3] = v143;
  HIBYTE(v143) = 0;
  LOBYTE(v142) = 0;
  if (SHIBYTE(v141) < 0) {
    operator delete((void *)v140);
  }
  sub_1000021BC(&v140, "--locale");
  siri::dialogengine::GetMultipleOptions(&v142, a1, &v140);
  sub_100028490((uint64_t *)v113);
  v113[0] = v142;
  *(void *)&v113[1] = v143;
  std::string v143 = 0LL;
  __int128 v142 = 0uLL;
  *(void *)&__int128 __dst = &v142;
  sub_1000027F4((void ***)&__dst);
  if (SHIBYTE(v141) < 0) {
    operator delete((void *)v140);
  }
  sub_1000021BC(&v140, "--filename");
  siri::dialogengine::GetOption(&v142, a1, &v140);
  if (SHIBYTE(v112[0]) < 0) {
    operator delete((void *)v111);
  }
  __int128 v111 = v142;
  v112[0] = v143;
  HIBYTE(v143) = 0;
  LOBYTE(v142) = 0;
  if (SHIBYTE(v141) < 0) {
    operator delete((void *)v140);
  }
  sub_1000021BC(&v140, "--outputDir");
  siri::dialogengine::GetOption(&v142, a1, &v140);
  if (SHIBYTE(v112[3]) < 0) {
    operator delete((void *)v112[1]);
  }
  *(_OWORD *)&v112[1] = v142;
  v112[3] = v143;
  HIBYTE(v143) = 0;
  LOBYTE(v142) = 0;
  if (SHIBYTE(v141) < 0) {
    operator delete((void *)v140);
  }
  sub_1000021BC(&v140, "--config");
  siri::dialogengine::GetOption(&v142, a1, &v140);
  if (SHIBYTE(v115[0]) < 0) {
    operator delete((void *)v114);
  }
  __int128 v114 = v142;
  v115[0] = v143;
  HIBYTE(v143) = 0;
  LOBYTE(v142) = 0;
  if (SHIBYTE(v141) < 0) {
    operator delete((void *)v140);
  }
  sub_1000021BC(&v140, "--swiftCaseStyle");
  siri::dialogengine::GetOption(&v142, a1, &v140);
  if (SHIBYTE(v115[3]) < 0) {
    operator delete((void *)v115[1]);
  }
  *(_OWORD *)&v115[1] = v142;
  v115[3] = v143;
  HIBYTE(v143) = 0;
  LOBYTE(v142) = 0;
  if (SHIBYTE(v141) < 0) {
    operator delete((void *)v140);
  }
  if ((HIBYTE(__p[2]) & 0x80) == 0)
  {
    if (HIBYTE(__p[2]) != 4)
    {
      if (HIBYTE(__p[2]) != 5) {
        goto LABEL_96;
      }
      BOOL v11 = __p;
LABEL_86:
      int v19 = *(_DWORD *)v11;
      int v20 = *((unsigned __int8 *)v11 + 4);
      if (v19 == 1953067639 && v20 == 101)
      {
        uint64_t v4 = sub_10003FC4C((uint64_t)__p);
        goto LABEL_290;
      }

LABEL_96:
      if (!sub_1000176F8(__p, "grammarfeatures"))
      {
        sub_100043BB4(v103, (__int128 *)__p);
        uint64_t v4 = sub_10004CB88((uint64_t)v103, v22);
        sub_100043F08((uint64_t)v103);
        goto LABEL_290;
      }

LABEL_97:
      uint64_t v4 = 0LL;
      goto LABEL_290;
    }

    if (LODWORD(__p[0]) != 2037411683)
    {
      if (LODWORD(__p[0]) != 1684104562) {
        goto LABEL_96;
      }
LABEL_94:
      if (SHIBYTE(v112[0]) < 0)
      {
        sub_10000231C(&v142, (void *)v111, *((unint64_t *)&v111 + 1));
      }

      else
      {
        __int128 v142 = v111;
        std::string v143 = (void *)v112[0];
      }

      uint64_t v70 = HIBYTE(v143);
      char v71 = HIBYTE(v143);
      uint64_t v72 = *((void *)&v142 + 1);
      if (SHIBYTE(v143) >= 0) {
        uint64_t v73 = HIBYTE(v143);
      }
      else {
        uint64_t v73 = *((void *)&v142 + 1);
      }
      if (!v73)
      {
        if (*(void *)&v113[0] == *((void *)&v113[0] + 1))
        {
          sub_1000021BC(&v140, (char *)&unk_10006A022);
        }

        else if (*(char *)(*(void *)&v113[0] + 23LL) < 0)
        {
          sub_10000231C(&v140, **(void ***)&v113[0], *(void *)(*(void *)&v113[0] + 8LL));
        }

        else
        {
          __int128 v74 = **(_OWORD **)&v113[0];
          uint64_t v141 = *(void *)(*(void *)&v113[0] + 16LL);
          __int128 v140 = v74;
        }

        siri::dialogengine::GetDialogMetadataFilename(&v136, &v110[1], &v140);
        siri::dialogengine::JoinPath(&__dst, &__p[3], &v136);
        if (SHIBYTE(v143) < 0) {
          operator delete((void *)v142);
        }
        __int128 v142 = __dst;
        std::string v143 = v139;
        HIBYTE(v139) = 0;
        LOBYTE(__dst) = 0;
        if (SHIBYTE(v137) < 0) {
          operator delete((void *)v136);
        }
        if (SHIBYTE(v141) < 0) {
          operator delete((void *)v140);
        }
        uint64_t v70 = HIBYTE(v143);
        uint64_t v72 = *((void *)&v142 + 1);
        char v71 = HIBYTE(v143);
      }

      if (v71 < 0) {
        uint64_t v70 = v72;
      }
      if (v70)
      {
        if ((siri::dialogengine::FileExists(&v142) & 1) != 0)
        {
          siri::dialogengine::DialogMetadataReader::DialogMetadataReader((siri::dialogengine::DialogMetadataReader *)&v136);
          uint64_t v4 = siri::dialogengine::DialogMetadataReader::Load(&v136, &v110[1], &v142);
          if ((v4 & 1) != 0)
          {
            siri::dialogengine::BaseName(&v140, &v142);
            AllowUnbounded = (siri::dialogengine *)siri::dialogengine::DialogMetadataReader::GetAllowUnbounded((siri::dialogengine::DialogMetadataReader *)&v136);
            siri::dialogengine::StringFromBool(&__dst, AllowUnbounded, v84);
            uint64_t v85 = (const char *)&v140;
            if (v141 < 0) {
              uint64_t v85 = (const char *)v140;
            }
            if (SHIBYTE(v139) >= 0) {
              p_dst = (const char *)&__dst;
            }
            else {
              p_dst = (const char *)__dst;
            }
            printf("; %s (allowUnbounded = %s)\n", v85, p_dst);
            sub_10003DA30((siri::dialogengine::DialogMetadataReader *)&v136, __stdoutp);
            if (SHIBYTE(v139) < 0) {
              operator delete((void *)__dst);
            }
            if (SHIBYTE(v141) < 0) {
              operator delete((void *)v140);
            }
          }

          else
          {
            int v95 = sub_100002F60(&std::cout, (uint64_t)"Failed to read file: ", 21LL);
            if (SHIBYTE(v143) >= 0) {
              unint64_t v96 = &v142;
            }
            else {
              unint64_t v96 = (__int128 *)v142;
            }
            if (SHIBYTE(v143) >= 0) {
              uint64_t v97 = HIBYTE(v143);
            }
            else {
              uint64_t v97 = *((void *)&v142 + 1);
            }
            std::string::size_type v98 = sub_100002F60(v95, (uint64_t)v96, v97);
            std::ios_base::getloc((const std::ios_base *)((char *)v98 + *(void *)(*v98 - 24LL)));
            unint64_t v99 = std::locale::use_facet((const std::locale *)&v140, &std::ctype<char>::id);
            uint64_t v100 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v99->__vftable[2].~facet_0)(v99, 10LL);
            std::locale::~locale((std::locale *)&v140);
            std::ostream::put(v98, v100);
            std::ostream::flush(v98);
          }

          siri::dialogengine::DialogMetadataReader::~DialogMetadataReader((siri::dialogengine::DialogMetadataReader *)&v136);
          goto LABEL_288;
        }

        __int128 v90 = sub_100002F60(&std::cout, (uint64_t)"The metadata file does not exist: ", 34LL);
        if (SHIBYTE(v143) >= 0) {
          unint64_t v91 = &v142;
        }
        else {
          unint64_t v91 = (__int128 *)v142;
        }
        if (SHIBYTE(v143) >= 0) {
          uint64_t v92 = HIBYTE(v143);
        }
        else {
          uint64_t v92 = *((void *)&v142 + 1);
        }
        size_t v87 = sub_100002F60(v90, (uint64_t)v91, v92);
        std::ios_base::getloc((const std::ios_base *)((char *)v87 + *(void *)(*v87 - 24LL)));
        unint64_t v93 = std::locale::use_facet((const std::locale *)&v140, &std::ctype<char>::id);
        uint64_t v94 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v93->__vftable[2].~facet_0)(v93, 10LL);
        std::locale::~locale((std::locale *)&v140);
        std::ostream::put(v87, v94);
      }

      else
      {
        size_t v87 = sub_100002F60(&std::cout, (uint64_t)"No metdata file specified. Try --filename.", 42LL);
        std::ios_base::getloc((const std::ios_base *)((char *)v87 + *(void *)(*v87 - 24LL)));
        uint64_t v88 = std::locale::use_facet((const std::locale *)&v140, &std::ctype<char>::id);
        uint64_t v89 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v88->__vftable[2].~facet_0)(v88, 10LL);
        std::locale::~locale((std::locale *)&v140);
        std::ostream::put(v87, v89);
      }

      std::ostream::flush(v87);
      uint64_t v4 = 0LL;
LABEL_288:
      if (SHIBYTE(v143) < 0) {
        operator delete((void *)v142);
      }
      goto LABEL_290;
    }

    goto LABEL_99;
  }

  uint64_t v18 = __p[1];
  if (__p[1] != (void *)4)
  {
LABEL_84:
    BOOL v11 = (void **)__p[0];
    goto LABEL_86;
  }

  if (*(_DWORD *)__p[0] == 1684104562) {
    goto LABEL_94;
  }
  if (*(_DWORD *)__p[0] != 2037411683)
  {
    uint64_t v18 = __p[1];
    goto LABEL_84;
  }

LABEL_99:
  std::string::size_type v23 = (void *)HIBYTE(__p[5]);
  if (SHIBYTE(__p[5]) < 0) {
    std::string::size_type v23 = __p[4];
  }
  if (!v23)
  {
    unint64_t v75 = sub_100002F60(&std::cout, (uint64_t)"No template directory specified. Try --templateDir.", 51LL);
    std::ios_base::getloc((const std::ios_base *)((char *)v75 + *(void *)(*v75 - 24LL)));
    unint64_t v76 = std::locale::use_facet((const std::locale *)&v142, &std::ctype<char>::id);
    uint64_t v77 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v76->__vftable[2].~facet_0)(v76, 10LL);
    std::locale::~locale((std::locale *)&v142);
    std::ostream::put(v75, v77);
LABEL_242:
    std::ostream::flush(v75);
    goto LABEL_97;
  }

  uint64_t v24 = HIBYTE(v112[3]);
  if (v112[3] < 0) {
    uint64_t v24 = v112[2];
  }
  if (!v24)
  {
    unint64_t v75 = sub_100002F60(&std::cout, (uint64_t)"No output directory specified. Try --outputDir.", 47LL);
    std::ios_base::getloc((const std::ios_base *)((char *)v75 + *(void *)(*v75 - 24LL)));
    BOOL v78 = std::locale::use_facet((const std::locale *)&v142, &std::ctype<char>::id);
    uint64_t v79 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v78->__vftable[2].~facet_0)(v78, 10LL);
    std::locale::~locale((std::locale *)&v142);
    std::ostream::put(v75, v79);
    goto LABEL_242;
  }

  sub_1000021BC(&v140, "metadata");
  siri::dialogengine::JoinPath(&v142, &__p[3], &v140);
  if (SHIBYTE(v141) < 0) {
    operator delete((void *)v140);
  }
  siri::dialogengine::ListDir(&v140, &v142);
  std::string::size_type v25 = (__int128 *)*((void *)&v140 + 1);
  unsigned __int8 v26 = (__int128 *)v140;
  if ((void)v140 == *((void *)&v140 + 1))
  {
    *(void *)&__int128 __dst = &v140;
    sub_1000027F4((void ***)&__dst);
    goto LABEL_245;
  }

  char v27 = 0;
  unint64_t v102 = (__int128 *)*((void *)&v140 + 1);
  do
  {
    if (*((char *)v26 + 23) < 0)
    {
      sub_10000231C(&__dst, *(void **)v26, *((void *)v26 + 1));
    }

    else
    {
      __int128 v28 = *v26;
      unint64_t v139 = (void *)*((void *)v26 + 2);
      __int128 __dst = v28;
    }

    sub_1000021BC(&v136, ".dtag");
    char v29 = siri::dialogengine::StringContains(&__dst, &v136);
    char v30 = v29;
    if (SHIBYTE(v137) < 0)
    {
      operator delete((void *)v136);
      if ((v30 & 1) == 0) {
        goto LABEL_227;
      }
    }

    else if ((v29 & 1) == 0)
    {
      goto LABEL_227;
    }

    siri::dialogengine::RemoveExtension(&v133, &__dst);
    siri::dialogengine::BaseName(&v136, &v133);
    if (SHIBYTE(v139) < 0) {
      operator delete((void *)__dst);
    }
    __int128 __dst = v136;
    unint64_t v139 = v137;
    HIBYTE(v13memset(v42, 0, 7) = 0;
    LOBYTE(v136) = 0;
    if (v135 < 0) {
      operator delete(v133.__locale_);
    }
    uint64_t v31 = HIBYTE(v110[3]);
    if (v110[3] >= 0) {
      uint64_t v32 = HIBYTE(v110[3]);
    }
    else {
      uint64_t v32 = v110[2];
    }
    if (!v32) {
      goto LABEL_137;
    }
    uint64_t v33 = HIBYTE(v139);
    if (SHIBYTE(v139) < 0) {
      uint64_t v33 = *((void *)&__dst + 1);
    }
    if (v32 == v33)
    {
      if (SHIBYTE(v139) >= 0) {
        unint64_t v34 = &__dst;
      }
      else {
        unint64_t v34 = (__int128 *)__dst;
      }
      if ((v110[3] & 0x8000000000000000LL) != 0)
      {
LABEL_137:
        sub_1000021BC(v129, "en");
        siri::dialogengine::GetDialogMetadataFilename(&v131, &__dst, v129);
        siri::dialogengine::JoinPath(&v133, &__p[3], &v131);
        siri::dialogengine::DirName(&v136, &v133);
        if (v135 < 0) {
          operator delete(v133.__locale_);
        }
        if (SHIBYTE(v132) < 0) {
          operator delete((void *)v131);
        }
        if ((siri::dialogengine::PathExists(&v136) & 1) != 0)
        {
          siri::dialogengine::ListDir(&v133, &v136);
          locale = v133.__locale_;
          __int128 v37 = v134;
          while (locale != v37)
          {
            if (*((char *)locale + 23) < 0)
            {
              sub_10000231C(&v131, *(void **)locale, *((void *)locale + 1));
            }

            else
            {
              __int128 v38 = *(_OWORD *)locale;
              uint64_t v132 = *((void *)locale + 2);
              __int128 v131 = v38;
            }

            siri::dialogengine::JoinPath(v129, &v136, &v131);
            siri::dialogengine::DialogMetadataReader::DialogMetadataReader((siri::dialogengine::DialogMetadataReader *)v128);
            if ((siri::dialogengine::DialogMetadataReader::Load(v128, &__dst, v129) & 1) != 0)
            {
              siri::dialogengine::BaseName(v122, v129);
              siri::dialogengine::StringSplit(v124, v122, ".");
              if (*((char *)v124[0] + 23) < 0)
              {
                sub_10000231C(&v126, *(void **)v124[0], *((void *)v124[0] + 1));
              }

              else
              {
                __int128 v39 = *(_OWORD *)v124[0];
                uint64_t v127 = *((void *)v124[0] + 2);
                __int128 v126 = v39;
              }

              *(void *)&__int128 v120 = v124;
              sub_1000027F4((void ***)&v120);
              siri::dialogengine::GetLocaleLanguage(v124, &v126);
              siri::dialogengine::GetLocaleCountry(v122, &v126);
              siri::dialogengine::JoinPath(&v118, &v112[1], &__dst);
              siri::dialogengine::JoinPath(&v120, &v118, v124);
              if (SHIBYTE(v119) < 0) {
                operator delete((void *)v118);
              }
              unint64_t v46 = v123;
              if ((v123 & 0x80u) != 0) {
                unint64_t v46 = (unint64_t)v122[1];
              }
              if (v46)
              {
                siri::dialogengine::StringToLower(&v116);
                siri::dialogengine::JoinPath(&v118, &v120, &v116);
                if (SHIBYTE(v121) < 0) {
                  operator delete((void *)v120);
                }
                __int128 v120 = v118;
                uint64_t v121 = v119;
                HIBYTE(v119) = 0;
                LOBYTE(v11std::iostream::~basic_iostream(v2, v3 + 8) = 0;
                if (v117 < 0) {
                  operator delete(v116.__locale_);
                }
              }

              if (SHIBYTE(v139) >= 0) {
                size_t v47 = HIBYTE(v139);
              }
              else {
                size_t v47 = *((void *)&__dst + 1);
              }
              sub_100007A0C((uint64_t)&v116, v47 + 4);
              if (v117 >= 0) {
                unint64_t v48 = &v116;
              }
              else {
                unint64_t v48 = v116.__locale_;
              }
              if (v47)
              {
                if (SHIBYTE(v139) >= 0) {
                  unint64_t v49 = &__dst;
                }
                else {
                  unint64_t v49 = (__int128 *)__dst;
                }
                memmove(v48, v49, v47);
              }

              strcpy((char *)v48 + v47, ".voc");
              siri::dialogengine::JoinPath(&v118, &v120, &v116);
              if (v117 < 0) {
                operator delete(v116.__locale_);
              }
              siri::dialogengine::CreateDir(&v120, 504LL);
              if (v119 >= 0) {
                uint64_t v50 = (const char *)&v118;
              }
              else {
                uint64_t v50 = (const char *)v118;
              }
              uint64_t v51 = fopen(v50, "w");
              if (v51)
              {
                sub_10003DA30((siri::dialogengine::DialogMetadataReader *)v128, v51);
                uint64_t v52 = sub_100002F60(&std::cout, (uint64_t)"Wrote ", 6LL);
                if (v119 >= 0) {
                  BOOL v53 = &v118;
                }
                else {
                  BOOL v53 = (__int128 *)v118;
                }
                if (v119 >= 0) {
                  uint64_t v54 = HIBYTE(v119);
                }
                else {
                  uint64_t v54 = *((void *)&v118 + 1);
                }
                uint64_t v55 = sub_100002F60(v52, (uint64_t)v53, v54);
                std::ios_base::getloc((const std::ios_base *)((char *)v55 + *(void *)(*v55 - 24LL)));
                uint64_t v56 = std::locale::use_facet(&v116, &std::ctype<char>::id);
                uint64_t v57 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v56->__vftable[2].~facet_0)( v56,  10LL);
                std::locale::~locale(&v116);
                std::ostream::put(v55, v57);
                std::ostream::flush(v55);
                fclose(v51);
                char v27 = 1;
              }

              else
              {
                std::string::size_type v58 = sub_100002F60(&std::cout, (uint64_t)"Failed to write to file: ", 25LL);
                if (v119 >= 0) {
                  std::string v59 = &v118;
                }
                else {
                  std::string v59 = (__int128 *)v118;
                }
                if (v119 >= 0) {
                  uint64_t v60 = HIBYTE(v119);
                }
                else {
                  uint64_t v60 = *((void *)&v118 + 1);
                }
                uint64_t v61 = sub_100002F60(v58, (uint64_t)v59, v60);
                std::ios_base::getloc((const std::ios_base *)((char *)v61 + *(void *)(*v61 - 24LL)));
                int v62 = std::locale::use_facet(&v116, &std::ctype<char>::id);
                uint64_t v63 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v62->__vftable[2].~facet_0)( v62,  10LL);
                std::locale::~locale(&v116);
                std::ostream::put(v61, v63);
                std::ostream::flush(v61);
              }

              if (SHIBYTE(v119) < 0) {
                operator delete((void *)v118);
              }
              if (SHIBYTE(v121) < 0) {
                operator delete((void *)v120);
              }
              if (v125 < 0) {
                operator delete(v124[0]);
              }
              if (SHIBYTE(v127) < 0) {
                operator delete((void *)v126);
              }
            }

            else
            {
              uint64_t v40 = sub_100002F60(&std::cout, (uint64_t)"Failed to read file: ", 21LL);
              if ((v130 & 0x80u) == 0) {
                std::string::size_type v41 = v129;
              }
              else {
                std::string::size_type v41 = (void **)v129[0];
              }
              if ((v130 & 0x80u) == 0) {
                uint64_t v42 = v130;
              }
              else {
                uint64_t v42 = (uint64_t)v129[1];
              }
              unint64_t v43 = sub_100002F60(v40, (uint64_t)v41, v42);
              std::ios_base::getloc((const std::ios_base *)((char *)v43 + *(void *)(*v43 - 24LL)));
              unint64_t v44 = std::locale::use_facet((const std::locale *)&v126, &std::ctype<char>::id);
              uint64_t v45 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v44->__vftable[2].~facet_0)(v44, 10LL);
              std::locale::~locale((std::locale *)&v126);
              std::ostream::put(v43, v45);
              std::ostream::flush(v43);
            }

            siri::dialogengine::DialogMetadataReader::~DialogMetadataReader((siri::dialogengine::DialogMetadataReader *)v128);
            if (SHIBYTE(v132) < 0) {
              operator delete((void *)v131);
            }
            locale = (std::locale::__imp *)((char *)locale + 24);
          }

          *(void *)&__int128 v131 = &v133;
          sub_1000027F4((void ***)&v131);
          std::string::size_type v25 = v102;
        }

        else
        {
          std::string v64 = sub_100002F60(&std::cout, (uint64_t)"ERROR: no such category: ", 25LL);
          if (SHIBYTE(v139) >= 0) {
            unint64_t v65 = &__dst;
          }
          else {
            unint64_t v65 = (__int128 *)__dst;
          }
          if (SHIBYTE(v139) >= 0) {
            uint64_t v66 = HIBYTE(v139);
          }
          else {
            uint64_t v66 = *((void *)&__dst + 1);
          }
          unint64_t v67 = sub_100002F60(v64, (uint64_t)v65, v66);
          std::ios_base::getloc((const std::ios_base *)((char *)v67 + *(void *)(*v67 - 24LL)));
          uint64_t v68 = std::locale::use_facet(&v133, &std::ctype<char>::id);
          uint64_t v69 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v68->__vftable[2].~facet_0)(v68, 10LL);
          std::locale::~locale(&v133);
          std::ostream::put(v67, v69);
          std::ostream::flush(v67);
        }

        if (SHIBYTE(v137) < 0) {
          operator delete((void *)v136);
        }
        goto LABEL_227;
      }

      if (!HIBYTE(v110[3])) {
        goto LABEL_137;
      }
      std::string::size_type v35 = (unsigned __int8 *)&v110[1];
      while (*v35 == *(unsigned __int8 *)v34)
      {
        ++v35;
        unint64_t v34 = (__int128 *)((char *)v34 + 1);
        if (!--v31) {
          goto LABEL_137;
        }
      }
    }

LABEL_227:
    if (SHIBYTE(v139) < 0) {
      operator delete((void *)__dst);
    }
    unsigned __int8 v26 = (__int128 *)((char *)v26 + 24);
  }

  while (v26 != v25);
  *(void *)&__int128 __dst = &v140;
  sub_1000027F4((void ***)&__dst);
  if ((v27 & 1) == 0)
  {
LABEL_245:
    unint64_t v80 = sub_100002F60(&std::cout, (uint64_t)"No dialog metadata found to copy.", 33LL);
    std::ios_base::getloc((const std::ios_base *)((char *)v80 + *(void *)(*v80 - 24LL)));
    unint64_t v81 = std::locale::use_facet((const std::locale *)&v140, &std::ctype<char>::id);
    uint64_t v82 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v81->__vftable[2].~facet_0)(v81, 10LL);
    std::locale::~locale((std::locale *)&v140);
    std::ostream::put(v80, v82);
    std::ostream::flush(v80);
  }

  if (SHIBYTE(v143) < 0) {
    operator delete((void *)v142);
  }
  uint64_t v4 = 1LL;
LABEL_290:
  sub_100009064((uint64_t)v104, v105);
  sub_100043F08((uint64_t)__p);
  return v4;
}

void sub_10003F7B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, char a46, uint64_t a47, uint64_t a48, void *a49)
{
  if (SLOBYTE(STACK[0x377]) < 0) {
    operator delete((void *)STACK[0x360]);
  }
  siri::dialogengine::DialogMetadataReader::~DialogMetadataReader((siri::dialogengine::DialogMetadataReader *)&STACK[0x348]);
  sub_100009064((uint64_t)&a46, (char *)a47);
  sub_100043F08((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_10003FC44()
{
}

uint64_t sub_10003FC4C(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 47);
  if ((v1 & 0x80u) != 0LL) {
    uint64_t v1 = *(void *)(a1 + 32);
  }
  if (!v1)
  {
    uint64_t v9 = sub_100002F60(&std::cout, (uint64_t)"No --templateDir specified", 26LL);
    std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24LL)));
    uint64_t v10 = std::locale::use_facet(__dst, &std::ctype<char>::id);
    uint64_t v11 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10LL);
LABEL_21:
    uint64_t v18 = v11;
    std::locale::~locale(__dst);
    std::ostream::put(v9, v18);
    std::ostream::flush(v9);
    return 0LL;
  }

  uint64_t v2 = a1;
  uint64_t v3 = a1 + 24;
  if ((siri::dialogengine::DirExists(a1 + 24) & 1) == 0)
  {
    std::string::size_type v12 = sub_100002F60(&std::cout, (uint64_t)"The --templateDir directory does not exist: ", 44LL);
    int v13 = *(char *)(v2 + 47);
    if (v13 >= 0) {
      uint64_t v14 = v3;
    }
    else {
      uint64_t v14 = *(void *)(v2 + 24);
    }
    if (v13 >= 0) {
      uint64_t v15 = *(unsigned __int8 *)(v2 + 47);
    }
    else {
      uint64_t v15 = *(void *)(v2 + 32);
    }
    uint64_t v9 = sub_100002F60(v12, v14, v15);
    std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24LL)));
    int v16 = std::locale::use_facet(__dst, &std::ctype<char>::id);
    uint64_t v11 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10LL);
    goto LABEL_21;
  }

  if (!sub_10003A3F8(v2))
  {
    uint64_t v9 = sub_100002F60( &std::cout,  (uint64_t)"No source dir specified: --sourceDir or --metadataDir or --assistantDir",  71LL);
    std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24LL)));
    uint64_t v17 = std::locale::use_facet(__dst, &std::ctype<char>::id);
    uint64_t v11 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10LL);
    goto LABEL_21;
  }

  uint64_t v124 = v3;
  sub_10003A45C(v2);
  char v4 = siri::dialogengine::DirExists(__dst);
  char v5 = v4;
  if (SHIBYTE(v138) < 0)
  {
    operator delete(__dst[0].__locale_);
    if ((v5 & 1) != 0)
    {
LABEL_8:
      sub_100002F60(&std::cout, (uint64_t)"Source type: ", 13LL);
      int v6 = sub_10003A3F8(v2);
      switch(v6)
      {
        case 3:
          int v7 = "source files";
          uint64_t v8 = 12LL;
          break;
        case 2:
          int v7 = "assistant repository";
          uint64_t v8 = 20LL;
          break;
        case 1:
          int v7 = "dialog-metadata repository";
          uint64_t v8 = 26LL;
          break;
        default:
          goto LABEL_36;
      }

      sub_100002F60(&std::cout, (uint64_t)v7, v8);
LABEL_36:
      uint64_t v125 = v2;
      std::ios_base::getloc((const std::ios_base *)((char *)&std::cout
                                                  + (unint64_t)std::cout.__vftable[-2].~basic_ostream_0));
      char v27 = std::locale::use_facet(__dst, &std::ctype<char>::id);
      uint64_t v28 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10LL);
      std::locale::~locale(__dst);
      std::ostream::put(&std::cout, v28);
      std::ostream::flush(&std::cout);
      char v29 = sub_100002F60(&std::cout, (uint64_t)"Source path: ", 13LL);
      sub_10003A45C(v2);
      if (v138 >= 0) {
        locale = __dst;
      }
      else {
        locale = __dst[0].__locale_;
      }
      if (v138 >= 0) {
        uint64_t v31 = HIBYTE(v138);
      }
      else {
        uint64_t v31 = (uint64_t)__dst[1].__locale_;
      }
      uint64_t v32 = sub_100002F60(v29, (uint64_t)locale, v31);
      std::ios_base::getloc((const std::ios_base *)((char *)v32 + *(void *)(*v32 - 24LL)));
      uint64_t v33 = std::locale::use_facet(v148, &std::ctype<char>::id);
      uint64_t v34 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v33->__vftable[2].~facet_0)(v33, 10LL);
      std::locale::~locale(v148);
      std::ostream::put(v32, v34);
      std::ostream::flush(v32);
      if (SHIBYTE(v138) < 0) {
        operator delete(__dst[0].__locale_);
      }
      sub_10003A5B0((void *)v2, (uint64_t *)&v128);
      std::string::size_type v35 = v128;
      __int128 v36 = v129;
      if (v128 == v129)
      {
        if (sub_10003A3F8(v2) - 1 <= 1)
        {
          std::ios_base::getloc((const std::ios_base *)((char *)&std::cout
                                                      + (unint64_t)std::cout.__vftable[-2].~basic_ostream_0));
          size_t v47 = std::locale::use_facet(__dst, &std::ctype<char>::id);
          uint64_t v48 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v47->__vftable[2].~facet_0)(v47, 10LL);
          std::locale::~locale(__dst);
          std::ostream::put(&std::cout, v48);
          std::ostream::flush(&std::cout);
          uint64_t v49 = sub_100002F60(&std::cout, (uint64_t)"No categories defined in config file", 36LL);
          std::ios_base::getloc((const std::ios_base *)((char *)v49 + *(void *)(*v49 - 24LL)));
          uint64_t v50 = std::locale::use_facet(__dst, &std::ctype<char>::id);
          uint64_t v51 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v50->__vftable[2].~facet_0)(v50, 10LL);
          std::locale::~locale(__dst);
          std::ostream::put(v49, v51);
          std::ostream::flush(v49);
          goto LABEL_265;
        }

        __int128 v37 = (char *)(v2 + 143);
        uint64_t v62 = *(unsigned __int8 *)(v2 + 143);
        __int128 v39 = (uint64_t *)(v2 + 128);
        if ((v62 & 0x80u) != 0LL) {
          uint64_t v62 = *(void *)(v2 + 128);
        }
        if (!v62) {
          goto LABEL_107;
        }
        std::string::size_type v41 = (uint64_t *)(v2 + 120);
        uint64_t v53 = (uint64_t)v35;
      }

      else
      {
        __int128 v37 = (char *)(v2 + 143);
        int v38 = *(char *)(v2 + 143);
        __int128 v39 = (uint64_t *)(v2 + 128);
        if (v38 >= 0) {
          uint64_t v40 = *(unsigned __int8 *)(v2 + 143);
        }
        else {
          uint64_t v40 = *(void *)(v2 + 128);
        }
        if (!v40) {
          goto LABEL_107;
        }
        std::string::size_type v41 = (uint64_t *)(v2 + 120);
        if (v38 >= 0) {
          uint64_t v42 = (unsigned __int8 *)(v2 + 120);
        }
        else {
          uint64_t v42 = *(unsigned __int8 **)(v2 + 120);
        }
        uint64_t v43 = (uint64_t)v128;
        while (1)
        {
          uint64_t v44 = *(unsigned __int8 *)(v43 + 23);
          uint64_t v45 = (v44 & 0x80u) == 0LL ? *(unsigned __int8 *)(v43 + 23) : *(void *)(v43 + 8);
          if (v45 != v40) {
            break;
          }
          if ((v44 & 0x80) != 0)
          {
          }

          else if (*(_BYTE *)(v43 + 23))
          {
            uint64_t v46 = 0LL;
            while (*(unsigned __int8 *)(v43 + v46) == v42[v46])
            {
              if (v44 == ++v46) {
                goto LABEL_64;
              }
            }

            break;
          }

LABEL_64:
          v43 += 32LL;
        }

        if ((__int128 *)v43 == v36)
        {
LABEL_96:
          std::string::size_type v35 = v36;
          uint64_t v53 = (uint64_t)v36;
        }

        else
        {
          uint64_t v52 = v43 + 32;
          if ((__int128 *)(v43 + 32) != v36)
          {
            uint64_t v53 = v43;
            while (1)
            {
              uint64_t v54 = v43;
              uint64_t v43 = v52;
              uint64_t v55 = *(unsigned __int8 *)(v54 + 55);
              if ((v55 & 0x80u) == 0LL) {
                uint64_t v56 = *(unsigned __int8 *)(v54 + 55);
              }
              else {
                uint64_t v56 = *(void *)(v54 + 40);
              }
              uint64_t v57 = *v37;
              int v58 = (char)v57;
              if ((v57 & 0x80u) != 0LL) {
                uint64_t v57 = *v39;
              }
              if (v56 != v57) {
                goto LABEL_90;
              }
              std::string v59 = (unsigned __int8 *)(v58 >= 0 ? v125 + 120 : *v41);
              if ((v55 & 0x80) == 0) {
                break;
              }
LABEL_90:
              uint64_t v52 = v43 + 32;
              if ((__int128 *)(v43 + 32) == v36)
              {
                std::string::size_type v35 = v129;
                goto LABEL_98;
              }
            }

            if (*(_BYTE *)(v54 + 55))
            {
              uint64_t v60 = 0LL;
              while (*(unsigned __int8 *)(v43 + v60) == v59[v60])
              {
                if (v55 == ++v60) {
                  goto LABEL_87;
                }
              }

              goto LABEL_90;
            }

LABEL_98:
        uint64_t v2 = v125;
      }

      sub_100041CE8((uint64_t)&v128, v53, v35);
      if (v128 != v129)
      {
        uint64_t v63 = sub_100003ECC(&std::cout);
        std::string v64 = sub_100002F60(v63, (uint64_t)"Processing only the specified category: ", 40LL);
        int v65 = *v37;
        if (v65 >= 0) {
          uint64_t v66 = (uint64_t)v41;
        }
        else {
          uint64_t v66 = *v41;
        }
        if (v65 >= 0) {
          uint64_t v67 = *v37;
        }
        else {
          uint64_t v67 = *v39;
        }
        uint64_t v68 = sub_100002F60(v64, v66, v67);
        sub_100003ECC(v68);
LABEL_107:
        if (*(_BYTE *)(v2 + 218) || (uint64_t v85 = *(const void ***)(v2 + 192), v86 = *(const void ***)(v2 + 200), v85 == v86))
        {
          v127[0] = 0LL;
          v127[1] = 0LL;
          __int128 v126 = v127;
          uint64_t v69 = (uint64_t)v128;
          unint64_t v122 = v129;
          uint64_t v70 = v124;
          if (v128 != v129)
          {
            do
            {
              if (*(char *)(v69 + 23) < 0)
              {
                sub_10000231C(__dst, *(void **)v69, *(void *)(v69 + 8));
              }

              else
              {
                __int128 v71 = *(_OWORD *)v69;
                uint64_t v138 = *(void *)(v69 + 16);
                *(_OWORD *)&__dst[0].__locale_ = v71;
              }

              BOOL v139 = *(_BYTE *)(v69 + 24);
              sub_100041DEC(v2, (uint64_t)__dst, v148);
              uint64_t v123 = v69;
              siri::dialogengine::ListDir(&v147, v148);
              std::string::size_type size = v147.__r_.__value_.__l.__size_;
              for (std::string::size_type i = v147.__r_.__value_.__r.__words[0]; i != size; i += 24LL)
              {
                if (*(char *)(i + 23) < 0)
                {
                  sub_10000231C(&v146, *(void **)i, *(void *)(i + 8));
                }

                else
                {
                  __int128 v74 = *(_OWORD *)i;
                  v146.__r_.__value_.__l.__cap_ = *(void *)(i + 16);
                  *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v74;
                }

                siri::dialogengine::JoinPath(&v144, v148, &v146);
                if (siri::dialogengine::DirExists(&v144))
                {
                  sub_100008F4C((uint64_t **)&v126, (const void **)&v146.__r_.__value_.__l.__data_, (uint64_t)&v146);
                  siri::dialogengine::ListDir(v142, &v144);
                  unint64_t v75 = (char *)v142[0];
                  unint64_t v76 = (char *)v142[1];
                  while (v75 != v76)
                  {
                    if (v75[23] < 0)
                    {
                      sub_10000231C(v140, *(void **)v75, *((void *)v75 + 1));
                    }

                    else
                    {
                      __int128 v77 = *(_OWORD *)v75;
                      uint64_t v141 = *((void *)v75 + 2);
                      *(_OWORD *)__int128 v140 = v77;
                    }

                    siri::dialogengine::JoinPath(v135, &v144, v140);
                    if (siri::dialogengine::DirExists(v135))
                    {
                      if ((v146.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                        size_t v78 = v146.__r_.__value_.__s.__size_;
                      }
                      else {
                        size_t v78 = v146.__r_.__value_.__l.__size_;
                      }
                      sub_100007A0C((uint64_t)&v132, v78 + 1);
                      if ((v132.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                        uint64_t v79 = &v132;
                      }
                      else {
                        uint64_t v79 = (std::string *)v132.__r_.__value_.__r.__words[0];
                      }
                      if (v78)
                      {
                        if ((v146.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                          unint64_t v80 = &v146;
                        }
                        else {
                          unint64_t v80 = (std::string *)v146.__r_.__value_.__r.__words[0];
                        }
                        memmove(v79, v80, v78);
                      }

                      *(_WORD *)((char *)&v79->__r_.__value_.__l.__data_ + v7std::iostream::~basic_iostream(v2, v3 + 8) = 95;
                      siri::dialogengine::StringToUpper(v130, v140);
                      if ((v131 & 0x80u) == 0) {
                        unint64_t v81 = v130;
                      }
                      else {
                        unint64_t v81 = (void **)v130[0];
                      }
                      if ((v131 & 0x80u) == 0) {
                        std::string::size_type v82 = v131;
                      }
                      else {
                        std::string::size_type v82 = (std::string::size_type)v130[1];
                      }
                      __int128 v83 = std::string::append(&v132, (const std::string::value_type *)v81, v82);
                      __int128 v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
                      int64_t cap = v83->__r_.__value_.__l.__cap_;
                      *(_OWORD *)std::string __p = v84;
                      v83->__r_.__value_.__l.__size_ = 0LL;
                      v83->__r_.__value_.__l.__cap_ = 0LL;
                      v83->__r_.__value_.__r.__words[0] = 0LL;
                      sub_1000366F8((uint64_t **)&v126, (const void **)__p, (uint64_t)__p);
                      if (SHIBYTE(cap) < 0) {
                        operator delete(__p[0]);
                      }
                    }

                    if (SHIBYTE(v136) < 0) {
                      operator delete(v135[0]);
                    }
                    if (SHIBYTE(v141) < 0) {
                      operator delete(v140[0]);
                    }
                    v75 += 24;
                  }

                  v140[0] = v142;
                  sub_1000027F4((void ***)v140);
                  uint64_t v70 = v124;
                  uint64_t v2 = v125;
                }

                if (SHIBYTE(v145) < 0) {
                  operator delete((void *)v144);
                }
              }

              v146.__r_.__value_.__r.__words[0] = (std::string::size_type)&v147;
              sub_1000027F4((void ***)&v146);
              if (SHIBYTE(v149) < 0) {
                operator delete(v148[0].__locale_);
              }
              if (SHIBYTE(v138) < 0) {
                operator delete(__dst[0].__locale_);
              }
              uint64_t v69 = v123 + 32;
            }

            while ((__int128 *)(v123 + 32) != v122);
          }
        }

        else
        {
          sub_1000423E0((uint64_t)&v126, v85, v86);
          uint64_t v70 = v124;
        }

        size_t v87 = (uint64_t *)v126;
        if (v126 != v127)
        {
          do
          {
            if (*((char *)v87 + 55) < 0)
            {
              sub_10000231C(__p, (void *)v87[4], v87[5]);
            }

            else
            {
              *(_OWORD *)std::string __p = *((_OWORD *)v87 + 2);
              int64_t cap = v87[6];
            }

            v140[1] = 0LL;
            uint64_t v141 = 0LL;
            v140[0] = &v140[1];
            uint64_t v89 = (uint64_t)v128;
            uint64_t v88 = v129;
            if (v128 == v129)
            {
              __int128 v111 = 0LL;
            }

            else
            {
              do
              {
                if (*(char *)(v89 + 23) < 0)
                {
                  sub_10000231C(__dst, *(void **)v89, *(void *)(v89 + 8));
                }

                else
                {
                  __int128 v90 = *(_OWORD *)v89;
                  uint64_t v138 = *(void *)(v89 + 16);
                  *(_OWORD *)&__dst[0].__locale_ = v90;
                }

                BOOL v139 = *(_BYTE *)(v89 + 24);
                siri::dialogengine::DialogMetadataWriter::DialogMetadataWriter((siri::dialogengine::DialogMetadataWriter *)&v132);
                siri::dialogengine::DialogMetadataWriter::SetAllowUnbounded( (siri::dialogengine::DialogMetadataWriter *)&v132,  v139);
                std::ios_base::getloc((const std::ios_base *)((char *)&std::cout
                                                            + (unint64_t)std::cout.__vftable[-2].~basic_ostream_0));
                unint64_t v91 = std::locale::use_facet(v148, &std::ctype<char>::id);
                uint64_t v92 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v91->__vftable[2].~facet_0)( v91,  10LL);
                std::locale::~locale(v148);
                std::ostream::put(&std::cout, v92);
                std::ostream::flush(&std::cout);
                std::operator+<char>(&v146, "Category ", __dst);
                unint64_t v93 = std::string::append(&v146, " for locale ");
                __int128 v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
                v147.__r_.__value_.__l.__cap_ = v93->__r_.__value_.__l.__cap_;
                *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v94;
                v93->__r_.__value_.__l.__size_ = 0LL;
                v93->__r_.__value_.__l.__cap_ = 0LL;
                v93->__r_.__value_.__r.__words[0] = 0LL;
                if (cap >= 0) {
                  int v95 = __p;
                }
                else {
                  int v95 = (void **)__p[0];
                }
                if (cap >= 0) {
                  std::string::size_type v96 = HIBYTE(cap);
                }
                else {
                  std::string::size_type v96 = (std::string::size_type)__p[1];
                }
                uint64_t v97 = std::string::append(&v147, (const std::string::value_type *)v95, v96);
                __int128 v98 = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
                int64_t v149 = v97->__r_.__value_.__l.__cap_;
                *(_OWORD *)&v148[0].__locale_ = v98;
                v97->__r_.__value_.__l.__size_ = 0LL;
                v97->__r_.__value_.__l.__cap_ = 0LL;
                v97->__r_.__value_.__r.__words[0] = 0LL;
                if (v149 >= 0) {
                  unint64_t v99 = v148;
                }
                else {
                  unint64_t v99 = v148[0].__locale_;
                }
                if (v149 >= 0) {
                  uint64_t v100 = HIBYTE(v149);
                }
                else {
                  uint64_t v100 = (uint64_t)v148[1].__locale_;
                }
                std::string::size_type v101 = sub_100002F60(&std::cout, (uint64_t)v99, v100);
                std::ios_base::getloc((const std::ios_base *)((char *)v101 + *(void *)(*v101 - 24LL)));
                unint64_t v102 = std::locale::use_facet((const std::locale *)&v144, &std::ctype<char>::id);
                uint64_t v103 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v102->__vftable[2].~facet_0)( v102,  10LL);
                std::locale::~locale((std::locale *)&v144);
                std::ostream::put(v101, v103);
                std::ostream::flush(v101);
                if (SHIBYTE(v149) < 0) {
                  operator delete(v148[0].__locale_);
                }
                sub_100041DEC(v2, (uint64_t)__dst, v148);
                siri::dialogengine::GetLocaleLanguage(&v146, __p);
                siri::dialogengine::StringToLower(&v147);
                siri::dialogengine::GetLocaleCountry(&v144, __p);
                siri::dialogengine::StringToLower(&v146);
                if (SHIBYTE(v145) < 0) {
                  operator delete((void *)v144);
                }
                siri::dialogengine::JoinPath(v135, v148, &v147);
                std::string::size_type v104 = v146.__r_.__value_.__s.__size_;
                if ((v146.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                  std::string::size_type v104 = v146.__r_.__value_.__l.__size_;
                }
                if (v104)
                {
                  siri::dialogengine::JoinPath(&v144, v135, &v146);
                  if (SHIBYTE(v136) < 0) {
                    operator delete(v135[0]);
                  }
                  *(_OWORD *)char v135 = v144;
                  uint64_t v136 = v145;
                  if (v138 >= 0) {
                    size_t v105 = HIBYTE(v138);
                  }
                  else {
                    size_t v105 = (size_t)__dst[1].__locale_;
                  }
                  sub_100007A0C((uint64_t)v142, v105 + 4);
                  if (v143 >= 0) {
                    unint64_t v106 = v142;
                  }
                  else {
                    unint64_t v106 = (void **)v142[0];
                  }
                  if (v105)
                  {
                    if (v138 >= 0) {
                      __int128 v107 = __dst;
                    }
                    else {
                      __int128 v107 = __dst[0].__locale_;
                    }
                    memmove(v106, v107, v105);
                  }
                }

                else
                {
                  if (v138 >= 0) {
                    size_t v105 = HIBYTE(v138);
                  }
                  else {
                    size_t v105 = (size_t)__dst[1].__locale_;
                  }
                  sub_100007A0C((uint64_t)v142, v105 + 4);
                  if (v143 >= 0) {
                    unint64_t v106 = v142;
                  }
                  else {
                    unint64_t v106 = (void **)v142[0];
                  }
                  if (v105)
                  {
                    if (v138 >= 0) {
                      std::string::size_type v108 = __dst;
                    }
                    else {
                      std::string::size_type v108 = __dst[0].__locale_;
                    }
                    memmove(v106, v108, v105);
                  }
                }

                strcpy((char *)v106 + v105, ".voc");
                siri::dialogengine::JoinPath(&v144, v135, v142);
                if (SHIBYTE(v136) < 0) {
                  operator delete(v135[0]);
                }
                *(_OWORD *)char v135 = v144;
                uint64_t v136 = v145;
                HIBYTE(v145) = 0;
                LOBYTE(v144) = 0;
                if (v143 < 0) {
                  operator delete(v142[0]);
                }
                if (SHIBYTE(v149) < 0) {
                  operator delete(v148[0].__locale_);
                }
                __int128 v109 = (void *)HIBYTE(v136);
                char v110 = HIBYTE(v136);
                if (v136 < 0) {
                  __int128 v109 = v135[1];
                }
                if (v109)
                {
                  sub_100042460( (const void **)v135,  (siri::dialogengine::DialogMetadataWriter *)&v132,  (uint64_t **)v140,  (uint64_t)__p,  v2);
                  siri::dialogengine::GetDialogMetadataFilename(&v147, __dst, __p);
                  siri::dialogengine::JoinPath(v148, v70, &v147);
                  siri::dialogengine::DialogMetadataWriter::Save(&v132, v148);
                  if (SHIBYTE(v149) < 0) {
                    operator delete(v148[0].__locale_);
                  }
                  char v110 = HIBYTE(v136);
                }

                if (v110 < 0) {
                  operator delete(v135[0]);
                }
                siri::dialogengine::DialogMetadataWriter::~DialogMetadataWriter((siri::dialogengine::DialogMetadataWriter *)&v132);
                if (SHIBYTE(v138) < 0) {
                  operator delete(__dst[0].__locale_);
                }
                v89 += 32LL;
              }

              while ((__int128 *)v89 != v88);
              __int128 v111 = (char *)v140[1];
            }

            sub_100009064((uint64_t)v140, v111);
            if (SHIBYTE(cap) < 0) {
              operator delete(__p[0]);
            }
            uint64_t v112 = (char *)v87[1];
            if (v112)
            {
              do
              {
                unint64_t v113 = (char **)v112;
                uint64_t v112 = *(char **)v112;
              }

              while (v112);
            }

            else
            {
              do
              {
                unint64_t v113 = (char **)v87[2];
                BOOL v114 = *v113 == (char *)v87;
                size_t v87 = (uint64_t *)v113;
              }

              while (!v114);
            }

            size_t v87 = (uint64_t *)v113;
          }

          while (v113 != v127);
        }

        sub_100009064((uint64_t)&v126, v127[0]);
        uint64_t v19 = 1LL;
        goto LABEL_266;
      }

      char v115 = sub_100003ECC(&std::cout);
      std::locale v116 = sub_100002F60(v115, (uint64_t)"Error: Specified category '", 27LL);
      int v117 = *v37;
      if (v117 >= 0) {
        uint64_t v118 = (uint64_t)v41;
      }
      else {
        uint64_t v118 = *v41;
      }
      if (v117 >= 0) {
        uint64_t v119 = *v37;
      }
      else {
        uint64_t v119 = *v39;
      }
      __int128 v120 = sub_100002F60(v116, v118, v119);
      uint64_t v121 = sub_100002F60(v120, (uint64_t)"' not found in config file.", 27LL);
      sub_100003ECC(v121);
LABEL_265:
      uint64_t v19 = 0LL;
LABEL_266:
      __dst[0].__locale_ = (std::locale::__imp *)&v128;
      sub_100043FE0((void ***)__dst);
      return v19;
    }
  }

  else if ((v4 & 1) != 0)
  {
    goto LABEL_8;
  }

  int v21 = sub_100002F60(&std::cout, (uint64_t)"The source directory does not exist: ", 37LL);
  sub_10003A45C(v2);
  if (v138 >= 0) {
    unint64_t v22 = __dst;
  }
  else {
    unint64_t v22 = __dst[0].__locale_;
  }
  if (v138 >= 0) {
    uint64_t v23 = HIBYTE(v138);
  }
  else {
    uint64_t v23 = (uint64_t)__dst[1].__locale_;
  }
  uint64_t v24 = sub_100002F60(v21, (uint64_t)v22, v23);
  std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(void *)(*v24 - 24LL)));
  std::string::size_type v25 = std::locale::use_facet(v148, &std::ctype<char>::id);
  uint64_t v26 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10LL);
  std::locale::~locale(v148);
  std::ostream::put(v24, v26);
  std::ostream::flush(v24);
  if (SHIBYTE(v138) < 0) {
    operator delete(__dst[0].__locale_);
  }
  return 0LL;
}

void sub_100040C78( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, int a21, __int16 a22, char a23, char a24, void *a25, uint64_t a26, int a27, __int16 a28, char a29, char a30, void *a31, uint64_t a32, int a33, __int16 a34, char a35, char a36, uint64_t a37, void *__p, uint64_t a39, int a40, __int16 a41, char a42, char a43, uint64_t a44, std::locale a45, uint64_t a46, int a47, __int16 a48, char a49, char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  *(void *)(v57 - 192) = &a16;
  sub_100043FE0((void ***)(v57 - 192));
  _Unwind_Resume(a1);
}

BOOL sub_100040FD0(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)a1) {
    BOOL v3 = *(_BYTE *)a2 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
    if (*(char *)(a1 + 31) < 0)
    {
      sub_10000231C(&v8, *(void **)(a1 + 8), *(void *)(a1 + 16));
    }

    else
    {
      __int128 v8 = *(_OWORD *)(a1 + 8);
      uint64_t v9 = *(void *)(a1 + 24);
    }

    sub_10004120C(exception, (uint64_t)&v8);
  }

  char v4 = *(void **)(a1 + 48);
  return v4 && (char v5 = *(void **)(a2 + 48)) != 0LL && *v4 == *v5;
}

void sub_1000410A0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

uint64_t *sub_1000410D8(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)a1) {
    BOOL v3 = *(_BYTE *)a2 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
    uint64_t v9 = a1;
    uint64_t v10 = exception;
    if (*(char *)(v9 + 31) < 0)
    {
      sub_10000231C(&v11, *(void **)(v9 + 8), *(void *)(v9 + 16));
    }

    else
    {
      __int128 v11 = *(_OWORD *)(v9 + 8);
      uint64_t v12 = *(void *)(v9 + 24);
    }

    sub_10004120C(v10, (uint64_t)&v11);
  }

  sub_100041638(a2);
  char v5 = *(void **)(a1 + 48);
  int v6 = *(uint64_t **)(a2 + 48);
  if (v5)
  {
    sub_10004179C(v5, v6);
    uint64_t result = YAML::detail::memory_holder::merge(*(uint64_t **)(a1 + 32), *(void **)(a2 + 32));
    *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = *(void *)(a2 + 48);
  }

  else
  {
    *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v6;
    return sub_100014A88((void *)(a1 + 32), (uint64_t *)(a2 + 32));
  }

  return result;
}

void sub_1000411D4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void *sub_10004120C(void *a1, uint64_t a2)
{
  uint64_t v5 = -1LL;
  int v6 = -1;
  sub_1000412AC(a2, &__p);
  sub_1000413D8((uint64_t)a1, &v5, (uint64_t)&__p);
  *a1 = off_1000792E0;
  *a1 = off_100079320;
  return a1;
}

void sub_100041290( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000412AC@<X0>(uint64_t a1@<X0>, std::stringbuf::string_type *a2@<X8>)
{
  uint64_t v4 = *(unsigned __int8 *)(a1 + 23);
  if ((v4 & 0x80u) != 0LL) {
    uint64_t v4 = *(void *)(a1 + 8);
  }
  if (v4)
  {
    uint64_t v5 = sub_100002F60(&v13, (uint64_t)"invalid node; first invalid key: ", 34LL);
    int v6 = *(char *)(a1 + 23);
    if (v6 >= 0) {
      uint64_t v7 = a1;
    }
    else {
      uint64_t v7 = *(void *)a1;
    }
    if (v6 >= 0) {
      uint64_t v8 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v8 = *(void *)(a1 + 8);
    }
    uint64_t v9 = sub_100002F60(v5, v7, v8);
    sub_100002F60(v9, (uint64_t)"", 1LL);
    std::stringbuf::str(a2, &v14);
  }

  else
  {
    sub_1000021BC(a2, "invalid node; this may result from using a map iterator as a sequence iterator, or vice-versa");
  }

  *(void *)((char *)v12
  uint64_t v13 = v10;
  std::streambuf::~streambuf(&v14);
  return std::ios::~ios(&v15);
}

void sub_1000413C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1000413D8(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *(void *)a1 = off_100079260;
  uint64_t v6 = *(void *)a2;
  *(_DWORD *)(a1 + 24) = a2[2];
  *(void *)(a1 + 16) = v6;
  uint64_t v7 = (_BYTE *)(a1 + 32);
  if (*(char *)(a3 + 23) < 0)
  {
    sub_10000231C(v7, *(void **)a3, *(void *)(a3 + 8));
  }

  else
  {
    __int128 v8 = *(_OWORD *)a3;
    *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = *(void *)(a3 + 16);
    *(_OWORD *)uint64_t v7 = v8;
  }

  return a1;
}

void sub_100041484( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

_DWORD *sub_1000414B0@<X0>(_DWORD *result@<X0>, uint64_t a2@<X1>, std::stringbuf::string_type *a3@<X8>)
{
  if (*result == -1 && result[1] == -1 && result[2] == -1)
  {
    if (*(char *)(a2 + 23) < 0)
    {
      return sub_10000231C(a3, *(void **)a2, *(void *)(a2 + 8));
    }

    else
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      a3->__r_.__value_.__l.__cap_ = *(void *)(a2 + 16);
    }
  }

  else
  {
    uint64_t v7 = result;
    sub_100023250((uint64_t)v17);
    __int128 v8 = sub_100002F60(&v18, (uint64_t)"yaml-cpp: error at line ", 24LL);
    uint64_t v9 = (void *)std::ostream::operator<<(v8, (v7[1] + 1));
    std::string v10 = sub_100002F60(v9, (uint64_t)", column ", 9LL);
    __int128 v11 = (void *)std::ostream::operator<<(v10, (v7[2] + 1));
    uint64_t v12 = sub_100002F60(v11, (uint64_t)": ", 2LL);
    int v13 = *(char *)(a2 + 23);
    if (v13 >= 0) {
      std::stringbuf v14 = (void *)a2;
    }
    else {
      std::stringbuf v14 = *(void **)a2;
    }
    if (v13 >= 0) {
      uint64_t v15 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v15 = *(void *)(a2 + 8);
    }
    sub_100002F60(v12, (uint64_t)v14, v15);
    std::stringbuf::str(a3, &v19);
    *(void *)((char *)v17
    uint64_t v18 = v16;
    std::streambuf::~streambuf(&v19);
    return (_DWORD *)std::ios::~ios(&v20);
  }

  return result;
}

void sub_100041624(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100041638(uint64_t result)
{
  uint64_t v1 = result;
  if (!*(_BYTE *)result)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
    uint64_t v6 = v1;
    uint64_t v7 = exception;
    if (*(char *)(v6 + 31) < 0)
    {
      sub_10000231C(&v8, *(void **)(v6 + 8), *(void *)(v6 + 16));
    }

    else
    {
      __int128 v8 = *(_OWORD *)(v6 + 8);
      uint64_t v9 = *(void *)(v6 + 24);
    }

    sub_10004120C(v7, (uint64_t)&v8);
  }

  if (!*(void *)(result + 48))
  {
    uint64_t v2 = operator new(0x10uLL);
    BOOL v3 = operator new(0x18uLL);
    v3[2] = 0LL;
    v3[1] = 0LL;
    void *v3 = v3 + 1;
    sub_100041974(v2, (uint64_t)v3);
    sub_1000417DC((void *)(v1 + 32), (uint64_t)v2);
    node = (uint64_t **)YAML::detail::memory::create_node(**(uint64_t ****)(v1 + 32));
    *(void *)(v1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = node;
    sub_100041B08((uint64_t)node);
    return YAML::detail::node_data::set_null(**node);
  }

  return result;
}

void sub_100041750( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void *sub_10004179C(void *a1, uint64_t *a2)
{
  if (**(_BYTE **)*a2) {
    sub_100041B08((uint64_t)a1);
  }
  return sub_100014A88(a1, a2);
}

void sub_1000417DC(void *a1, uint64_t a2)
{
  BOOL v3 = (std::__shared_weak_count *)a1[1];
  __int128 v4 = v7;
  *(void *)&__int128 v7 = *a1;
  *((void *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

void *sub_10004184C(void *a1, uint64_t a2)
{
  *a1 = a2;
  __int128 v4 = operator new(0x20uLL);
  *__int128 v4 = &off_100079130;
  v4[1] = 0LL;
  v4[2] = 0LL;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_100041890(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    BOOL v3 = (void *)sub_1000059D0(v1);
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void sub_1000418B0(std::__shared_weak_count *a1)
{
}

void sub_1000418C4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1)
  {
    uint64_t v2 = (void *)sub_1000059D0(v1);
    operator delete(v2);
  }

uint64_t sub_1000418E8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

BOOL sub_100041928(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1LL;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0LL;
}

void *sub_100041974(void *a1, uint64_t a2)
{
  *a1 = a2;
  __int128 v4 = operator new(0x20uLL);
  *__int128 v4 = &off_1000791A8;
  v4[1] = 0LL;
  v4[2] = 0LL;
  void v4[3] = a2;
  a1[1] = v4;
  unint64_t v6 = 0LL;
  sub_100041AC8(&v6, 0LL);
  return a1;
}

void sub_1000419D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1000419F0(std::__shared_weak_count *a1)
{
}

void sub_100041A04(uint64_t a1)
{
}

uint64_t sub_100041A0C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

void sub_100041A4C(uint64_t a1, void **a2)
{
  if (a2)
  {
    sub_100041A80((uint64_t)a2, a2[1]);
    operator delete(a2);
  }

void sub_100041A80(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100041A80(a1, *a2);
    sub_100041A80(a1, a2[1]);
    sub_1000059D0((uint64_t)(a2 + 4));
    operator delete(a2);
  }

void sub_100041AC8(void ***a1, void **a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    sub_100041A80((uint64_t)v2, v2[1]);
    operator delete(v2);
  }

void sub_100041B08(uint64_t a1)
{
  uint64_t v2 = **(_BYTE ***)a1;
  if (!*v2)
  {
    YAML::detail::node_data::mark_defined((uint64_t)v2);
    uint64_t v3 = *(void **)(a1 + 16);
    __int128 v4 = (void *)(a1 + 24);
    if (v3 != (void *)(a1 + 24))
    {
      do
      {
        sub_100041B08(v3[4]);
        uint64_t v5 = (void *)v3[1];
        if (v5)
        {
          do
          {
            unint64_t v6 = v5;
            uint64_t v5 = (void *)*v5;
          }

          while (v5);
        }

        else
        {
          do
          {
            unint64_t v6 = (void *)v3[2];
            BOOL v7 = *v6 == (void)v3;
            uint64_t v3 = v6;
          }

          while (!v7);
        }

        uint64_t v3 = v6;
      }

      while (v6 != v4);
    }

    sub_100041BA8(a1 + 16, *(void **)(a1 + 24));
    *(void *)(a1 + 24) = 0LL;
    *(void *)(a1 + 32) = 0LL;
    *(void *)(a1 + 16) = v4;
  }

void sub_100041BA8(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100041BA8(a1, *a2);
    sub_100041BA8(a1, a2[1]);
    operator delete(a2);
  }

uint64_t sub_100041BE8(uint64_t a1)
{
  if (!*(_BYTE *)a1)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
    if (*(char *)(a1 + 31) < 0)
    {
      sub_10000231C(&v6, *(void **)(a1 + 8), *(void *)(a1 + 16));
    }

    else
    {
      __int128 v6 = *(_OWORD *)(a1 + 8);
      uint64_t v7 = *(void *)(a1 + 24);
    }

    sub_10004120C(exception, (uint64_t)&v6);
  }

  uint64_t v2 = *(uint64_t ***)(a1 + 48);
  if (!v2) {
    return 1LL;
  }
  uint64_t v3 = **v2;
  if (*(_BYTE *)v3) {
    return *(unsigned int *)(v3 + 16);
  }
  else {
    return 0LL;
  }
}

void sub_100041CB0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

uint64_t sub_100041CE8(uint64_t a1, uint64_t a2, __int128 *a3)
{
  if ((__int128 *)a2 != a3)
  {
    sub_100041D6C((uint64_t)&v9, a3, *(__int128 **)(a1 + 8), a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        v7 -= 32LL;
      }

      while (v7 != v6);
    }

    *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v6;
  }

  return a2;
}

__int128 *sub_100041D6C(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      __int128 v7 = *v5;
      *(void *)(a4 + 16) = *((void *)v5 + 2);
      *(_OWORD *)a4 = v7;
      *((_BYTE *)v5 + 23) = 0;
      *(_BYTE *)uint64_t v5 = 0;
      *(_BYTE *)(a4 + 24) = *((_BYTE *)v5 + 24);
      a4 += 32LL;
      v5 += 2;
    }

    while (v5 != a3);
    return a3;
  }

  return v5;
}

void sub_100041DEC(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  int v6 = sub_10003A3F8(a1);
  if (!v6)
  {
    *a3 = 0LL;
    a3[1] = 0LL;
    a3[2] = 0LL;
    return;
  }

  int v7 = v6;
  sub_10003A45C(a1);
  uint64_t v48 = 0LL;
  unint64_t v49 = 0LL;
  unint64_t v50 = 0LL;
  switch(v7)
  {
    case 3:
      unint64_t v49 = sub_100002C30(&v48, (__int128 *)v51);
      break;
    case 2:
      sub_1000021BC(v44, "product/assistant/nl/src/main/filesystem/data/nl/siri/voc");
      siri::dialogengine::JoinPath(__p, v51, v44);
      __int128 v11 = (_OWORD *)v49;
      if (v49 >= v50)
      {
        unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v49 - v48) >> 3);
        unint64_t v14 = v13 + 1;
        if (v13 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_100002668();
        }
        else {
          unint64_t v15 = v14;
        }
        uint64_t v57 = &v50;
        if (v15) {
          uint64_t v16 = (void **)sub_10000267C((uint64_t)&v50, v15);
        }
        else {
          uint64_t v16 = 0LL;
        }
        int v21 = &v16[3 * v13];
        uint64_t v53 = v16;
        uint64_t v54 = v21;
        uint64_t v56 = &v16[3 * v15];
        __int128 v22 = *(_OWORD *)__p;
        v21[2] = v47;
        *(_OWORD *)int v21 = v22;
        __p[1] = 0LL;
        size_t v47 = 0LL;
        __p[0] = 0LL;
        uint64_t v55 = v21 + 3;
        sub_100002D50(&v48, &v53);
        unint64_t v23 = v49;
        sub_100002ED8((uint64_t)&v53);
        unint64_t v49 = v23;
        if (SHIBYTE(v47) < 0) {
          operator delete(__p[0]);
        }
      }

      else
      {
        __int128 v12 = *(_OWORD *)__p;
        *(void *)(v49 + 16) = v47;
        *__int128 v11 = v12;
        __p[1] = 0LL;
        size_t v47 = 0LL;
        __p[0] = 0LL;
        unint64_t v49 = (unint64_t)v11 + 24;
      }

      if (v45 < 0) {
        operator delete(v44[0]);
      }
      sub_1000021BC(v44, "product/assistant/nl/src/main/filesystem/data/nl/siri/override-voc");
      siri::dialogengine::JoinPath(__p, v51, v44);
      uint64_t v24 = (_OWORD *)v49;
      if (v49 >= v50)
      {
        unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v49 - v48) >> 3);
        unint64_t v27 = v26 + 1;
        if (v26 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_100002668();
        }
        else {
          unint64_t v28 = v27;
        }
        uint64_t v57 = &v50;
        if (v28) {
          char v29 = (void **)sub_10000267C((uint64_t)&v50, v28);
        }
        else {
          char v29 = 0LL;
        }
        uint64_t v32 = &v29[3 * v26];
        uint64_t v53 = v29;
        uint64_t v54 = v32;
        uint64_t v56 = &v29[3 * v28];
        __int128 v33 = *(_OWORD *)__p;
        v32[2] = v47;
        *(_OWORD *)uint64_t v32 = v33;
        __p[1] = 0LL;
        size_t v47 = 0LL;
        __p[0] = 0LL;
        uint64_t v55 = v32 + 3;
        sub_100002D50(&v48, &v53);
        unint64_t v34 = v49;
        sub_100002ED8((uint64_t)&v53);
        unint64_t v49 = v34;
        if (SHIBYTE(v47) < 0) {
          operator delete(__p[0]);
        }
      }

      else
      {
        __int128 v25 = *(_OWORD *)__p;
        *(void *)(v49 + 16) = v47;
        _OWORD *v24 = v25;
        __p[1] = 0LL;
        size_t v47 = 0LL;
        __p[0] = 0LL;
        unint64_t v49 = (unint64_t)v24 + 24;
      }

      if (v45 < 0) {
        operator delete(v44[0]);
      }
      sub_1000021BC(v44, "product/assistant/ontology/src/main/filesystem/data/nl/siri/voc");
      siri::dialogengine::JoinPath(__p, v51, v44);
      std::string::size_type v35 = (_OWORD *)v49;
      if (v49 < v50)
      {
        __int128 v36 = *(_OWORD *)__p;
        *(void *)(v49 + 16) = v47;
        *std::string::size_type v35 = v36;
        std::string v10 = (char *)v35 + 24;
        __p[1] = 0LL;
        size_t v47 = 0LL;
        __p[0] = 0LL;
        goto LABEL_51;
      }

      unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v49 - v48) >> 3);
      unint64_t v38 = v37 + 1;
      if (v37 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_100002668();
      }
      else {
        unint64_t v39 = v38;
      }
      uint64_t v57 = &v50;
      if (v39) {
        uint64_t v40 = (void **)sub_10000267C((uint64_t)&v50, v39);
      }
      else {
        uint64_t v40 = 0LL;
      }
      std::string::size_type v41 = &v40[3 * v37];
      uint64_t v53 = v40;
      uint64_t v54 = v41;
      uint64_t v56 = &v40[3 * v39];
      __int128 v42 = *(_OWORD *)__p;
      v41[2] = v47;
      *(_OWORD *)std::string::size_type v41 = v42;
      __p[1] = 0LL;
      size_t v47 = 0LL;
      __p[0] = 0LL;
      uint64_t v55 = v41 + 3;
      sub_100002D50(&v48, &v53);
LABEL_62:
      unint64_t v43 = v49;
      sub_100002ED8((uint64_t)&v53);
      unint64_t v49 = v43;
      if (SHIBYTE(v47) < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_64;
    case 1:
      sub_1000021BC(v44, "dialog-metadata/voc");
      siri::dialogengine::JoinPath(__p, v51, v44);
      __int128 v8 = (_OWORD *)v49;
      if (v49 < v50)
      {
        __int128 v9 = *(_OWORD *)__p;
        *(void *)(v49 + 16) = v47;
        _OWORD *v8 = v9;
        __p[1] = 0LL;
        size_t v47 = 0LL;
        __p[0] = 0LL;
        std::string v10 = (char *)v8 + 24;
LABEL_51:
        unint64_t v49 = (unint64_t)v10;
LABEL_64:
        if (v45 < 0) {
          operator delete(v44[0]);
        }
        break;
      }

      unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v49 - v48) >> 3);
      unint64_t v18 = v17 + 1;
      if (v17 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_100002668();
      }
      else {
        unint64_t v19 = v18;
      }
      uint64_t v57 = &v50;
      if (v19) {
        uint64_t v20 = (void **)sub_10000267C((uint64_t)&v50, v19);
      }
      else {
        uint64_t v20 = 0LL;
      }
      char v30 = &v20[3 * v17];
      uint64_t v53 = v20;
      uint64_t v54 = v30;
      uint64_t v56 = &v20[3 * v19];
      __int128 v31 = *(_OWORD *)__p;
      v30[2] = v47;
      *(_OWORD *)char v30 = v31;
      __p[1] = 0LL;
      size_t v47 = 0LL;
      __p[0] = 0LL;
      uint64_t v55 = v30 + 3;
      sub_100002D50(&v48, &v53);
      goto LABEL_62;
  }

  siri::dialogengine::FindFileInPaths(a2, &v48);
  uint64_t v53 = (void **)&v48;
  sub_1000027F4(&v53);
  if (v52 < 0) {
    operator delete(v51[0]);
  }
}

void sub_100042340( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, char a22, uint64_t a23, uint64_t a24, void *a25, uint64_t a26, int a27, __int16 a28, char a29, char a30)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  std::stringbuf::string_type __p = &a22;
  sub_1000027F4((void ***)&__p);
  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000423E0(uint64_t a1, const void **a2, const void **a3)
{
  *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
  __int128 v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    int v6 = a2;
    do
    {
      sub_100031858((uint64_t **)a1, v4, v6, (uint64_t)v6);
      v6 += 3;
    }

    while (v6 != a3);
  }

  return a1;
}

void sub_100042448(_Unwind_Exception *a1)
{
}

void sub_100042460( const void **a1, siri::dialogengine::DialogMetadataWriter *a2, uint64_t **a3, uint64_t a4, uint64_t a5)
{
  if (a3)
  {
    sub_100008F4C(a3, a1, (uint64_t)a1);
  }

  siri::dialogengine::BaseName(__p, a1);
  siri::dialogengine::RemoveExtension(&v90, __p);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  std::operator+<char>(__p, "Parsing Voc file: ", &v90);
  siri::dialogengine::Log::Info(__p);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  if ((siri::dialogengine::FileExists(a1) & 1) != 0)
  {
    sub_1000021BC(&v89, (char *)&unk_10006A022);
    sub_1000021BC(&v88, (char *)&unk_10006A022);
    sub_100001854((void (__cdecl ***)(std::ifstream *__hidden))__p, (uint64_t *)a1, 8);
    while (1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)__p + *((void *)__p[0] - 3)));
      __int128 v9 = std::locale::use_facet((const std::locale *)&v80, &std::ctype<char>::id);
      unsigned __int8 v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10LL);
      std::locale::~locale((std::locale *)&v80);
      __int128 v11 = sub_100001A8C(__p, &v89, v10);
      if ((*((_BYTE *)v11 + *(void *)(*v11 - 24LL) + 32) & 5) != 0)
      {
        std::filebuf::~filebuf(&cap);
        std::ios::~ios(&v93);
        if ((char)v88.__r_.__value_.__s.__size_ < 0)
        {
          std::string v64 = (void *)v88.__r_.__value_.__r.__words[0];
LABEL_176:
          operator delete(v64);
        }

        goto LABEL_177;
      }

      siri::dialogengine::StringTrim(&__str, &v89, " \t\n\r");
      std::string::size_type size = __str.__r_.__value_.__s.__size_;
      if ((__str.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        std::string::size_type size = __str.__r_.__value_.__l.__size_;
      }
      if (size)
      {
        sub_1000021BC(&v80, ";");
        char v13 = siri::dialogengine::StringStartsWith(&__str, &v80);
        char v14 = v13;
        if (SBYTE7(v81) < 0)
        {
          operator delete((void *)v80);
          if ((v14 & 1) != 0) {
            goto LABEL_159;
          }
        }

        else if ((v13 & 1) != 0)
        {
          goto LABEL_159;
        }

        sub_1000021BC(&v80, "#INCLUDE");
        if (siri::dialogengine::StringStartsWith(&__str, &v80))
        {
          int v15 = *(unsigned __int8 *)(a5 + 217);
          if (SBYTE7(v81) < 0)
          {
            operator delete((void *)v80);
            if (!v15)
            {
LABEL_45:
              sub_1000021BC(&v86, "#INCLUDE");
              sub_1000021BC(&v85, (char *)&unk_10006A022);
              siri::dialogengine::StringReplace(&v76, &__str, &v86, &v85, 0LL);
              siri::dialogengine::StringTrim(&v80, &v76, " \t\n\r");
              siri::dialogengine::StringSplit(&v86, &v80, "[");
              siri::dialogengine::StringTrim(&v76, v86.__r_.__value_.__r.__words[0], " \t\n\r");
              if (SBYTE7(v81) < 0) {
                operator delete((void *)v80);
              }
              __int128 v80 = *(_OWORD *)&v76.__r_.__value_.__l.__data_;
              *(void *)&__int128 v81 = v76.__r_.__value_.__l.__cap_;
              v76.__r_.__value_.__s.__size_ = 0;
              v76.__r_.__value_.__s.__data_[0] = 0;
              v85.__r_.__value_.__r.__words[0] = (std::string::size_type)&v86;
              sub_1000027F4((void ***)&v85);
              siri::dialogengine::DirName(&v86, a1);
              siri::dialogengine::JoinPath(&v76, &v86, &v80);
              if ((siri::dialogengine::FileExists(&v76) & 1) != 0)
              {
                sub_100042460(&v76, a2, a3, a4, a5);
              }

              else
              {
                std::operator+<char>(&v86, "Cannot find Voc include: ", &v76);
                siri::dialogengine::Log::Error(&v86);
              }

              if ((char)v76.__r_.__value_.__s.__size_ < 0)
              {
                unint64_t v26 = (void *)v76.__r_.__value_.__r.__words[0];
LABEL_63:
                operator delete(v26);
              }

LABEL_157:
              if (SBYTE7(v81) < 0) {
                operator delete((void *)v80);
              }
              goto LABEL_159;
            }
          }

          else if (!*(_BYTE *)(a5 + 217))
          {
            goto LABEL_45;
          }
        }

        else if (SBYTE7(v81) < 0)
        {
          operator delete((void *)v80);
        }

        uint64_t v16 = &v89;
        if ((v89.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          uint64_t v16 = (std::string *)v89.__r_.__value_.__r.__words[0];
        }
        __darwin_ct_rune_t v17 = v16->__r_.__value_.__s.__data_[0];
        if (v17 < 0) {
          __uint32_t v18 = __maskrune(v17, 0x4000uLL);
        }
        else {
          __uint32_t v18 = _DefaultRuneLocale.__runetype[v17] & 0x4000;
        }
        if (v18)
        {
          uint64_t v19 = __str.__r_.__value_.__s.__size_;
          if ((__str.__r_.__value_.__s.__size_ & 0x80u) == 0)
          {
            p_str = &__str;
          }

          else
          {
            uint64_t v19 = __str.__r_.__value_.__l.__size_;
            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
          }

          if (v19 >= 2)
          {
            int v21 = (char *)p_str + v19;
            __int128 v22 = p_str;
            do
            {
              unint64_t v23 = (char *)memchr(v22, 91, v19 - 1);
              if (!v23) {
                break;
              }
              if (*(_WORD *)v23 == 25691)
              {
                unint64_t v84 = 0LL;
                __int128 v82 = 0u;
                __int128 v83 = 0u;
                __int128 v80 = 0u;
                __int128 v81 = 0u;
                std::string::operator=((std::string *)&v80, &v90);
                std::string::operator=((std::string *)((char *)&v81 + 8), &v88);
                if ((__str.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                  int64_t v27 = __str.__r_.__value_.__s.__size_;
                }
                else {
                  int64_t v27 = __str.__r_.__value_.__l.__size_;
                }
                if ((__str.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                  unint64_t v28 = &__str;
                }
                else {
                  unint64_t v28 = (std::string *)__str.__r_.__value_.__r.__words[0];
                }
                char v29 = (char *)v28 + v27;
                uint64_t v67 = a4;
                if (v27 >= 1)
                {
                  uint64_t v30 = v28;
                  do
                  {
                    __int128 v31 = memchr(v30, 91, v27);
                    if (!v31) {
                      break;
                    }
                    if (*v31 == 91) {
                      goto LABEL_78;
                    }
                    uint64_t v30 = (std::string *)(v31 + 1);
                    int64_t v27 = v29 - (_BYTE *)v30;
                  }

                  while (v29 - (_BYTE *)v30 > 0);
                }

                __int128 v31 = v29;
LABEL_78:
                unint64_t v32 = v31 - (_BYTE *)v28;
                if (v31 == v29) {
                  std::string::size_type v33 = -1LL;
                }
                else {
                  std::string::size_type v33 = v31 - (_BYTE *)v28;
                }
                std::string::basic_string(&v76, &__str, 0LL, v33, (std::allocator<char> *)&v85);
                siri::dialogengine::StringTrim(&v86, &v76, " \t\n\r");
                siri::dialogengine::StringSplit(&v76, &v86, ";");
                std::string::operator=(&v86, (const std::string *)v76.__r_.__value_.__l.__data_);
                v85.__r_.__value_.__r.__words[0] = (std::string::size_type)&v76;
                sub_1000027F4((void ***)&v85);
                siri::dialogengine::StringSplit(&v76, &v86, "{");
                std::string::operator=(&v86, (const std::string *)v76.__r_.__value_.__l.__data_);
                v85.__r_.__value_.__r.__words[0] = (std::string::size_type)&v76;
                sub_1000027F4((void ***)&v85);
                sub_1000021BC(&v85, "\\"");
                sub_1000021BC(&v79, (char *)&unk_10006A022);
                siri::dialogengine::StringReplace(&v76, &v86, &v85, &v79, 0LL);
                std::string v86 = v76;
                v76.__r_.__value_.__s.__size_ = 0;
                v76.__r_.__value_.__s.__data_[0] = 0;
                if (v33 != -1LL)
                {
LABEL_90:
                  std::string::size_type v34 = __str.__r_.__value_.__s.__size_;
                  if ((__str.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                    std::string::size_type v35 = &__str;
                  }
                  else {
                    std::string::size_type v35 = (std::string *)__str.__r_.__value_.__r.__words[0];
                  }
                  if ((__str.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                    std::string::size_type v34 = __str.__r_.__value_.__l.__size_;
                  }
                  if (v34 >= v32)
                  {
                    __int128 v36 = (char *)v35 + v32;
                    unint64_t v37 = (char *)v35 + v34;
                    while (v37 - v36 >= 1)
                    {
                      unint64_t v38 = memchr(v36, 93, v37 - v36);
                      if (!v38) {
                        break;
                      }
                      if (*v38 == 93)
                      {
                        if (v38 != v37 && v38 - (_BYTE *)v35 != -1)
                        {
                          std::string::size_type v65 = v38 - (_BYTE *)v35;
                          std::string::basic_string( &v85,  &__str,  v32 + 1,  v38 - (_BYTE *)v35 + ~v32,  (std::allocator<char> *)&v76);
                          sub_1000021BC(&v76, "d");
                          int v39 = siri::dialogengine::StringStartsWith(&v85, &v76);
                          if (v39)
                          {
                            memset(&v76, 0, sizeof(v76));
                            v78[0] = 0LL;
                            v78[1] = 0LL;
                            __int128 v77 = (uint64_t *)v78;
                            std::string::operator=(&v76, &v86);
                            std::string::size_type v40 = v85.__r_.__value_.__s.__size_;
                            if ((v85.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                              std::string::size_type v40 = v85.__r_.__value_.__l.__size_;
                            }
                            if (v40 >= 3)
                            {
                              std::string::basic_string( &v79,  &v85,  2uLL,  0xFFFFFFFFFFFFFFFFLL,  (std::allocator<char> *)v75);
                              std::string v85 = v79;
                              siri::dialogengine::StringSplit(&v79, &v85, ";");
                              std::string::size_type v41 = v79.__r_.__value_.__l.__size_;
                              std::string::size_type v66 = v79.__r_.__value_.__l.__size_;
                              for (std::string::size_type i = v79.__r_.__value_.__r.__words[0]; i != v41; i += 24LL)
                              {
                                siri::dialogengine::StringSplit(v75, i, ",");
                                uint64_t v44 = v75[0];
                                unint64_t v43 = v75[1];
                                while (v44 != v43)
                                {
                                  siri::dialogengine::StringSplit(v74, v44, "=");
                                  if ((void **)((char *)v74[1] - (char *)v74[0]) == (void **)48)
                                  {
                                    siri::dialogengine::StringTrim(v72, v74[0], " \t\n\r");
                                    siri::dialogengine::StringTrim(v69, v74[0] + 3, " \t\n\r");
                                    siri::dialogengine::StringTrim(&v71, v69, "");
                                    if (v70 < 0) {
                                      operator delete(v69[0]);
                                    }
                                    v69[0] = v72;
                                    char v45 = sub_10002F860( &v77,  (const void **)v72,  (uint64_t)&std::piecewise_construct,  (__int128 **)v69);
                                    std::string::operator=((std::string *)(v45 + 7), &v71);
                                    if (v73 < 0) {
                                      operator delete(v72[0]);
                                    }
                                  }

                                  v72[0] = v74;
                                  sub_1000027F4((void ***)v72);
                                  v44 += 3;
                                }

                                v74[0] = (void **)v75;
                                sub_1000027F4(v74);
                                std::string::size_type v41 = v66;
                              }

                              v75[0] = (void **)&v79;
                              sub_1000027F4(v75);
                            }

                            uint64_t v46 = *((void *)&v83 + 1);
                            if (*((void *)&v83 + 1) >= v84)
                            {
                              uint64_t v47 = sub_10004351C((uint64_t *)&v83, (__int128 *)&v76);
                            }

                            else
                            {
                              sub_100043628((int)&v84, *((void **)&v83 + 1), (__int128 *)&v76);
                              uint64_t v47 = v46 + 48;
                            }

                            *((void *)&v83 + 1) = v47;
                            sub_100028914((uint64_t)&v77, v78[0]);
                          }

                          std::string::size_type v48 = __str.__r_.__value_.__s.__size_;
                          if ((__str.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                            unint64_t v49 = &__str;
                          }
                          else {
                            unint64_t v49 = (std::string *)__str.__r_.__value_.__r.__words[0];
                          }
                          if ((__str.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                            std::string::size_type v48 = __str.__r_.__value_.__l.__size_;
                          }
                          if (v48 <= v65)
                          {
                            unint64_t v32 = -1LL;
                          }

                          else
                          {
                            unint64_t v50 = &v49->__r_.__value_.__s.__data_[v65 + 1];
                            uint64_t v51 = (char *)v49 + v48;
                            int64_t v52 = v48 - (v65 + 1);
                            if (v52 >= 1)
                            {
                              do
                              {
                                uint64_t v53 = memchr(v50, 91, v52);
                                if (!v53) {
                                  break;
                                }
                                if (*v53 == 91) {
                                  goto LABEL_141;
                                }
                                unint64_t v50 = v53 + 1;
                                int64_t v52 = v51 - v50;
                              }

                              while (v51 - v50 > 0);
                            }

                            uint64_t v53 = v51;
LABEL_141:
                            unint64_t v32 = v53 == v51 ? -1LL : v53 - (_BYTE *)v49;
                          }

                          if (v32 != -1LL) {
                            goto LABEL_90;
                          }
                        }

                        break;
                      }

                      __int128 v36 = v38 + 1;
                    }
                  }
                }

                a4 = v67;
                if (*(_BYTE *)(a5 + 216))
                {
                  siri::dialogengine::DialogMetadataSemanticValue::ToString((siri::dialogengine::DialogMetadataSemanticValue *)&v80);
                  uint64_t v54 = (v76.__r_.__value_.__s.__size_ & 0x80u) == 0
                      ? &v76
                      : (std::string *)v76.__r_.__value_.__r.__words[0];
                  puts((const char *)v54);
                }

                siri::dialogengine::DialogMetadataWriter::AddSemanticValue( a2,  (const siri::dialogengine::DialogMetadataSemanticValue *)&v80);
                v76.__r_.__value_.__r.__words[0] = (std::string::size_type)&v83;
                sub_100043B30((void ***)&v76);
                if (SHIBYTE(v82) < 0)
                {
                  unint64_t v26 = (void *)*((void *)&v81 + 1);
                  goto LABEL_63;
                }

                goto LABEL_157;
              }

              __int128 v22 = (std::string *)(v23 + 1);
              uint64_t v19 = v21 - (char *)v22;
            }

            while (v21 - (char *)v22 >= 2);
          }
        }

        else
        {
          std::string::operator=(&v88, &__str);
          siri::dialogengine::StringSplit(&v80, &v88, ";");
          std::string::operator=(&v88, (const std::string *)v80);
          v76.__r_.__value_.__r.__words[0] = (std::string::size_type)&v80;
          sub_1000027F4((void ***)&v76);
          siri::dialogengine::StringSplit(&v80, &v88, "[");
          std::string::operator=(&v88, (const std::string *)v80);
          v76.__r_.__value_.__r.__words[0] = (std::string::size_type)&v80;
          sub_1000027F4((void ***)&v76);
          siri::dialogengine::StringTrim(&v80, &v88, " \t\n\r");
          *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v80;
          v88.__r_.__value_.__l.__cap_ = v81;
          sub_1000021BC(&v80, "#");
          int v24 = siri::dialogengine::StringStartsWith(&v88, &v80);
          int v25 = v24;
          if ((SBYTE7(v81) & 0x80000000) == 0)
          {
            if (!v24) {
              goto LABEL_159;
            }
LABEL_58:
            std::string::assign(&v88, (const std::string::value_type *)&unk_10006A022);
            goto LABEL_159;
          }

          operator delete((void *)v80);
          if (v25) {
            goto LABEL_58;
          }
        }
      }

LABEL_159:
    }
  }

  std::operator+<char>(&v89, "No VOC data found for '", &v90);
  uint64_t v55 = std::string::append(&v89, "' in locale '");
  __int128 v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
  v76.__r_.__value_.__l.__cap_ = v55->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v56;
  v55->__r_.__value_.__l.__size_ = 0LL;
  v55->__r_.__value_.__l.__cap_ = 0LL;
  v55->__r_.__value_.__r.__words[0] = 0LL;
  int v57 = *(char *)(a4 + 23);
  if (v57 >= 0) {
    int v58 = (const std::string::value_type *)a4;
  }
  else {
    int v58 = *(const std::string::value_type **)a4;
  }
  if (v57 >= 0) {
    std::string::size_type v59 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    std::string::size_type v59 = *(void *)(a4 + 8);
  }
  uint64_t v60 = std::string::append(&v76, v58, v59);
  __int128 v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
  *(void *)&__int128 v81 = v60->__r_.__value_.__l.__cap_;
  __int128 v80 = v61;
  v60->__r_.__value_.__l.__size_ = 0LL;
  v60->__r_.__value_.__l.__cap_ = 0LL;
  v60->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v62 = std::string::append((std::string *)&v80, "'");
  __int128 v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
  std::string::size_type cap = v62->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::stringbuf::string_type __p = v63;
  v62->__r_.__value_.__l.__size_ = 0LL;
  v62->__r_.__value_.__l.__cap_ = 0LL;
  v62->__r_.__value_.__r.__words[0] = 0LL;
  siri::dialogengine::Log::Error(__p);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE7(v81) < 0) {
    operator delete((void *)v80);
  }
  if ((char)v76.__r_.__value_.__s.__size_ < 0)
  {
    std::string v64 = (void *)v76.__r_.__value_.__r.__words[0];
    goto LABEL_176;
  }

                __int128 v80 = v213;
                if (v213)
                {
                  __int128 v81 = (unint64_t *)&v213->__shared_owners_;
                  do
                    __int128 v82 = __ldaxr(v81);
                  while (__stlxr(v82 - 1, v81));
                  if (!v82)
                  {
                    ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                    std::__shared_weak_count::__release_weak(v80);
                  }
                }

                if (SHIBYTE(v211) < 0) {
                  operator delete((void *)v210);
                }
                __int128 v83 = v208;
                if (v208)
                {
                  unint64_t v84 = (unint64_t *)&v208->__shared_owners_;
                  do
                    std::string v85 = __ldaxr(v84);
                  while (__stlxr(v85 - 1, v84));
                  if (!v85)
                  {
                    ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                    std::__shared_weak_count::__release_weak(v83);
                  }
                }

                if (SHIBYTE(v207) < 0) {
                  operator delete((void *)__src);
                }
                std::string v86 = v204;
                if (v204)
                {
                  size_t v87 = (unint64_t *)&v204->__shared_owners_;
                  do
                    std::string v88 = __ldaxr(v87);
                  while (__stlxr(v88 - 1, v87));
                  if (!v88)
                  {
                    ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                    std::__shared_weak_count::__release_weak(v86);
                  }
                }

                if (SHIBYTE(v203) < 0) {
                  operator delete(v202[1]);
                }
                sub_100044EB4((uint64_t)v217);
              }

              uint64_t v138 = v216;
              if (v216)
              {
                BOOL v139 = (unint64_t *)&v216->__shared_owners_;
                do
                  __int128 v140 = __ldaxr(v139);
                while (__stlxr(v140 - 1, v139));
                if (!v140)
                {
                  ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                  std::__shared_weak_count::__release_weak(v138);
                }
              }

              uint64_t v141 = v218;
              if (v218)
              {
                __int128 v142 = (unint64_t *)&v218->__shared_owners_;
                do
                  char v143 = __ldaxr(v142);
                while (__stlxr(v143 - 1, v142));
                if (!v143)
                {
                  ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
                  std::__shared_weak_count::__release_weak(v141);
                }
              }

              __int128 v144 = v243[23];
              if (v243[23] < 0) {
                __int128 v144 = *(void *)&v243[8];
              }
              if (v144) {
                goto LABEL_331;
              }
              uint64_t v145 = HIBYTE(v244);
              if (v244 < 0) {
                uint64_t v145 = v244;
              }
              std::string v146 = !v145 && v247 == 0;
              if (!v146 || v250 != 0)
              {
LABEL_331:
                sub_100049BB0((uint64_t **)a2, (uint64_t)v243);
                sub_100049B24((uint64_t)v243);
              }

              unint64_t v148 = v231;
              if (v231)
              {
                int64_t v149 = (unint64_t *)&v231->__shared_owners_;
                do
                  int v150 = __ldaxr(v149);
                while (__stlxr(v150 - 1, v149));
                if (!v150)
                {
                  ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
                  std::__shared_weak_count::__release_weak(v148);
                }
              }

              if (v229 < 0) {
                operator delete(v228);
              }
              unint64_t v151 = v226;
              if (v226)
              {
                unint64_t v152 = (unint64_t *)&v226->__shared_owners_;
                do
                  uint64_t v153 = __ldaxr(v152);
                while (__stlxr(v153 - 1, v152));
                if (!v153)
                {
                  ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
                  std::__shared_weak_count::__release_weak(v151);
                }
              }

              if (SHIBYTE(v225) < 0) {
                operator delete((void *)v224);
              }
              __int128 v154 = v221;
              if (v221)
              {
                uint64_t v155 = (unint64_t *)&v221->__shared_owners_;
                do
                  unint64_t v156 = __ldaxr(v155);
                while (__stlxr(v156 - 1, v155));
                if (!v156)
                {
                  ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
                  std::__shared_weak_count::__release_weak(v154);
                }
              }

              if (SHIBYTE(v220) < 0) {
                operator delete(__p[1]);
              }
              sub_100044EB4((uint64_t)v235);
            }
          }

          *(_OWORD *)v233 = *(_OWORD *)__p;
          *(_OWORD *)&v233[16] = v220;
          *(void *)&v233[32] = v240;
        }

        else
        {
          *(_DWORD *)v233 = 0;
          memset(&v233[8], 0, 32);
        }

        __int128 v234 = 0LL;
        goto LABEL_62;
      }

      *(_OWORD *)BOOL v235 = *(_OWORD *)__p;
      *(_OWORD *)&v235[16] = v220;
      *(void *)&v235[32] = v240;
    }

    else
    {
      *(_DWORD *)BOOL v235 = 0;
      memset(&v235[8], 0, 32);
    }

    std::string::size_type v236 = 0LL;
    goto LABEL_50;
  }

  if (!v9) {
    goto LABEL_38;
  }
LABEL_36:
  __int128 v22 = sub_100002F60(&std::cout, (uint64_t)"Warning: No 'enums' key present in YAML file! ", 46LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(void *)(*v22 - 24LL)));
  unint64_t v23 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
  int v24 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10LL);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put(v22, v24);
  std::ostream::flush(v22);
LABEL_372:
  std::string v166 = v243[23];
  if (v243[23] < 0) {
    std::string v166 = *(void *)&v243[8];
  }
  if (v166) {
    goto LABEL_384;
  }
  std::string v167 = HIBYTE(v244);
  if (v244 < 0) {
    std::string v167 = v244;
  }
  unint64_t v168 = !v167 && v247 == 0;
  if (!v168 || v250 != 0)
  {
LABEL_384:
    sub_100049BB0((uint64_t **)a2, (uint64_t)v243);
    sub_100049B24((uint64_t)v243);
  }

  unsigned __int8 v10 = 1LL;
  sub_100009064((uint64_t)&v248, v249);
  sub_100028914((uint64_t)&v245, v246);
  if (SHIBYTE(v244) < 0) {
    operator delete(*(void **)&v243[24]);
  }
  if ((v243[23] & 0x80000000) != 0) {
    operator delete(*(void **)v243);
  }
  char v170 = (std::__shared_weak_count *)v254;
  if ((void)v254)
  {
    unint64_t v171 = (unint64_t *)(v254 + 8);
    do
      uint64_t v172 = __ldaxr(v171);
    while (__stlxr(v172 - 1, v171));
    if (!v172)
    {
      ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
      std::__shared_weak_count::__release_weak(v170);
    }
  }

  if (SBYTE7(v253) < 0) {
    operator delete((void *)v252);
  }
  return v10;
}

LABEL_177:
}

void sub_100043110( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, void *a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, void *a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, std::locale a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (a60 < 0) {
    operator delete(__p);
  }
  if (a67 < 0) {
    operator delete(a62);
  }
  sub_1000434C4((uint64_t)&a45);
  if (a72 < 0) {
    operator delete(a68);
  }
  sub_100001C98(&STACK[0x210]);
  if (a74 < 0) {
    operator delete(a73);
  }
  if (a76 < 0) {
    operator delete(a75);
  }
  if (SLOBYTE(STACK[0x207]) < 0) {
    operator delete(a77);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100043488(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000434C4(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 48);
  sub_100043B30(&v3);
  return a1;
}

uint64_t sub_10004351C(uint64_t *a1, __int128 *a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555LL) {
    sub_100002668();
  }
  if (0x5555555555555556LL * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0x5555555555555556LL * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x555555555555555LL;
  }
  else {
    unint64_t v6 = v4;
  }
  char v14 = a1 + 2;
  if (v6) {
    int v7 = (char *)sub_1000438E0((uint64_t)(a1 + 2), v6);
  }
  else {
    int v7 = 0LL;
  }
  unsigned __int8 v10 = v7;
  __int128 v11 = &v7[48 * v3];
  char v13 = &v7[48 * v6];
  sub_100043628((_DWORD)a1 + 16, v11, a2);
  __int128 v12 = v11 + 48;
  sub_10004386C(a1, &v10);
  uint64_t v8 = a1[1];
  sub_100043ABC(&v10);
  return v8;
}

void sub_100043614(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t *sub_100043628(int a1, void *__dst, __int128 *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    sub_10000231C(__dst, *(void **)a3, *((void *)a3 + 1));
  }

  else
  {
    __int128 v5 = *a3;
    std::locale __dst[2] = *((void *)a3 + 2);
    *(_OWORD *)__int128 __dst = v5;
  }

  return sub_100043698(__dst + 3, (const void ***)a3 + 3);
}

void sub_10004367C(_Unwind_Exception *exception_object)
{
}

uint64_t *sub_100043698(uint64_t *a1, const void ***a2)
{
  a1[2] = 0LL;
  a1[1] = 0LL;
  *a1 = (uint64_t)(a1 + 1);
  sub_1000436EC(a1, *a2, a2 + 1);
  return a1;
}

void sub_1000436D4(_Unwind_Exception *a1)
{
}

uint64_t *sub_1000436EC(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    unint64_t v4 = a2;
    __int128 v5 = (uint64_t **)result;
    unint64_t v6 = result + 1;
    do
    {
      uint64_t result = sub_100043770(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      int v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = (const void ***)v7;
          int v7 = (const void **)*v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          uint64_t v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          unint64_t v4 = (const void **)v8;
        }

        while (!v9);
      }

      unint64_t v4 = (const void **)v8;
    }

    while (v8 != a3);
  }

  return result;
}

uint64_t *sub_100043770(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  unint64_t v6 = sub_1000053AC(a1, a2, &v12, &v11, a3);
  int v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    sub_100043804((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000055AC(a1, (uint64_t)v12, v8, v10[0]);
    int v7 = v10[0];
    v10[0] = 0LL;
    sub_10002F99C((uint64_t)v10, 0LL);
  }

  return v7;
}

char *sub_100043804@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unint64_t v6 = (char *)operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + std::iostream::~basic_iostream(v2, v3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  uint64_t result = sub_10002F688(v6 + 32, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_100043854(_Unwind_Exception *a1)
{
}

uint64_t sub_10004386C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100043924((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1000438E0(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556LL) {
    sub_1000022F4();
  }
  return operator new(48 * a2);
}

uint64_t sub_100043924(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v18 = a6;
  *((void *)&v18 + 1) = a7;
  __int128 v17 = v18;
  v15[0] = a1;
  v15[1] = &v17;
  void v15[2] = &v18;
  if (a3 == a5)
  {
    uint64_t v13 = a6;
  }

  else
  {
    do
    {
      __int128 v8 = *(_OWORD *)(a3 - 48);
      *(void *)(v7 - 32) = *(void *)(a3 - 32);
      *(_OWORD *)(v7 - 4std::iostream::~basic_iostream(v2, v3 + 8) = v8;
      *(void *)(a3 - 40) = 0LL;
      *(void *)(a3 - 32) = 0LL;
      *(void *)(a3 - 4std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
      *(void *)(v7 - 24) = *(void *)(a3 - 24);
      BOOL v9 = (void *)(a3 - 16);
      uint64_t v10 = *(void *)(a3 - 16);
      *(void *)(v7 - 16) = v10;
      uint64_t v11 = v7 - 16;
      uint64_t v12 = *(void *)(a3 - 8);
      *(void *)(v7 - std::iostream::~basic_iostream(v2, v3 + 8) = v12;
      if (v12)
      {
        *(void *)(v10 + 16) = v11;
        *(void *)(a3 - 24) = v9;
        void *v9 = 0LL;
        *(void *)(a3 - std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
      }

      else
      {
        *(void *)(v7 - 24) = v11;
      }

      a3 -= 48LL;
      uint64_t v7 = *((void *)&v18 + 1) - 48LL;
      *((void *)&v18 + 1) -= 48LL;
    }

    while (a3 != a5);
    uint64_t v13 = v18;
  }

  char v16 = 1;
  sub_1000439F8((uint64_t)v15);
  return v13;
}

uint64_t sub_1000439F8(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_100043A2C((uint64_t *)a1);
  }
  return a1;
}

void sub_100043A2C(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_100043A7C(v3, v1);
      v1 += 48LL;
    }

    while (v1 != v2);
  }

void sub_100043A7C(uint64_t a1, uint64_t a2)
{
}

void **sub_100043ABC(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_100043AEC(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 48;
    sub_100043A7C(v4, i - 48);
  }

void sub_100043B30(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48LL;
        sub_100043A7C((uint64_t)(v1 + 2), v4);
      }

      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

char *sub_100043BB4(char *__dst, __int128 *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10000231C(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__int128 __dst = v4;
  }

  if (*((char *)a2 + 47) < 0)
  {
    sub_10000231C(__dst + 24, *((void **)a2 + 3), *((void *)a2 + 4));
  }

  else
  {
    __int128 v5 = *(__int128 *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }

  if (*((char *)a2 + 71) < 0)
  {
    sub_10000231C(__dst + 48, *((void **)a2 + 6), *((void *)a2 + 7));
  }

  else
  {
    __int128 v6 = a2[3];
    *((void *)__dst + std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 8);
    *((_OWORD *)__dst + 3) = v6;
  }

  if (*((char *)a2 + 95) < 0)
  {
    sub_10000231C(__dst + 72, *((void **)a2 + 9), *((void *)a2 + 10));
  }

  else
  {
    __int128 v7 = *(__int128 *)((char *)a2 + 72);
    *((void *)__dst + 11) = *((void *)a2 + 11);
    *(_OWORD *)(__dst + sub_10003D0C8(v18 - 72) = v7;
  }

  if (*((char *)a2 + 119) < 0)
  {
    sub_10000231C(__dst + 96, *((void **)a2 + 12), *((void *)a2 + 13));
  }

  else
  {
    __int128 v8 = a2[6];
    *((void *)__dst + 14) = *((void *)a2 + 14);
    *((_OWORD *)__dst + 6) = v8;
  }

  if (*((char *)a2 + 143) < 0)
  {
    sub_10000231C(__dst + 120, *((void **)a2 + 15), *((void *)a2 + 16));
  }

  else
  {
    __int128 v9 = *(__int128 *)((char *)a2 + 120);
    *((void *)__dst + 1memset(v42, 0, 7) = *((void *)a2 + 17);
    *(_OWORD *)(__dst + 120) = v9;
  }

  if (*((char *)a2 + 167) < 0)
  {
    sub_10000231C(__dst + 144, *((void **)a2 + 18), *((void *)a2 + 19));
  }

  else
  {
    __int128 v10 = a2[9];
    *((void *)__dst + 20) = *((void *)a2 + 20);
    *((_OWORD *)__dst + 9) = v10;
  }

  if (*((char *)a2 + 191) < 0)
  {
    sub_10000231C(__dst + 168, *((void **)a2 + 21), *((void *)a2 + 22));
  }

  else
  {
    __int128 v11 = *(__int128 *)((char *)a2 + 168);
    *((void *)__dst + 23) = *((void *)a2 + 23);
    *(_OWORD *)(__dst + 16std::iostream::~basic_iostream(v2, v3 + 8) = v11;
  }

  *((void *)__dst + 24) = 0LL;
  *((void *)__dst + 25) = 0LL;
  *((void *)__dst + 26) = 0LL;
  sub_100002594( __dst + 192,  *((__int128 **)a2 + 24),  *((__int128 **)a2 + 25),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 25) - *((void *)a2 + 24)) >> 3));
  __int16 v12 = *((_WORD *)a2 + 108);
  __dst[218] = *((_BYTE *)a2 + 218);
  *((_WORD *)__dst + 10std::iostream::~basic_iostream(v2, v3 + 8) = v12;
  if (*((char *)a2 + 247) < 0)
  {
    sub_10000231C(__dst + 224, *((void **)a2 + 28), *((void *)a2 + 29));
  }

  else
  {
    __int128 v13 = a2[14];
    *((void *)__dst + 30) = *((void *)a2 + 30);
    *((_OWORD *)__dst + 14) = v13;
  }

  char v14 = __dst + 248;
  if (*((char *)a2 + 271) < 0)
  {
    sub_10000231C(v14, *((void **)a2 + 31), *((void *)a2 + 32));
  }

  else
  {
    __int128 v15 = *(__int128 *)((char *)a2 + 248);
    *((void *)__dst + 33) = *((void *)a2 + 33);
    *(_OWORD *)char v14 = v15;
  }

  return __dst;
}

void sub_100043E14(_Unwind_Exception *a1, void **a2, ...)
{
}

uint64_t sub_100043F08(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 192);
  sub_1000027F4(&v3);
  return a1;
}

void sub_100043FE0(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_100044020((uint64_t *)v2);
    operator delete(**a1);
  }

void sub_100044020(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 32LL)
  {
  }

  a1[1] = v2;
}

uint64_t sub_10004406C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1000440E0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1000440E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v15 = a6;
  *((void *)&v15 + 1) = a7;
  __int128 v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }

  else
  {
    uint64_t v8 = a7;
    do
    {
      __int128 v9 = *(_OWORD *)(a3 - 32);
      *(void *)(v8 - 16) = *(void *)(a3 - 16);
      *(_OWORD *)(v8 - 32) = v9;
      *(void *)(a3 - 24) = 0LL;
      *(void *)(a3 - 16) = 0LL;
      *(void *)(a3 - 32) = 0LL;
      *(_BYTE *)(v8 - std::iostream::~basic_iostream(v2, v3 + 8) = *(_BYTE *)(a3 - 8);
      v8 -= 32LL;
      v7 -= 32LL;
      a3 -= 32LL;
    }

    while (a3 != a5);
    *((void *)&v15 + 1) = v8;
    uint64_t v10 = v15;
  }

  char v13 = 1;
  sub_10004418C((uint64_t)v12);
  return v10;
}

uint64_t sub_10004418C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_1000441C0(a1);
  }
  return a1;
}

void sub_1000441C0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8LL);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8LL);
  while (v1 != v2)
  {
    v1 += 32LL;
  }

uint64_t sub_100044204(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100044238(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 4;
      *(void *)(a1 + 16) = v2 - 4;
      if (*((char *)v2 - 9) < 0)
      {
        operator delete(*v5);
        uint64_t v5 = *(void ***)(a1 + 16);
      }

      uint64_t v2 = v5;
    }

    while (v5 != a2);
  }

_BYTE ***sub_10004428C(uint64_t **a1, std::string *a2, uint64_t *a3)
{
  __int128 v4 = *a1;
  uint64_t v5 = a3[1];
  uint64_t v13 = *a3;
  __int128 v14 = (std::__shared_weak_count *)v5;
  if (v5)
  {
    uint64_t v6 = (unint64_t *)(v5 + 8);
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }

  uint64_t v8 = sub_100044344(v4, a2, &v13);
  __int128 v9 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      unint64_t v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  sub_1000443E4((uint64_t)v8, (uint64_t)a1);
  return v8;
}

void sub_100044330( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

_BYTE ***sub_100044344(uint64_t *a1, std::string *a2, uint64_t *a3)
{
  uint64_t v3 = *a1;
  __int128 v4 = (std::__shared_weak_count *)a3[1];
  uint64_t v12 = *a3;
  uint64_t v13 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }

  unint64_t v7 = sub_100044430(v3, a2, (uint64_t)&v12);
  uint64_t v8 = v13;
  if (v13)
  {
    __int128 v9 = (unint64_t *)&v13->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  return v7;
}

void sub_1000443D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000443E4(uint64_t a1, uint64_t a2)
{
  if (***(_BYTE ***)a1)
  {
    sub_100041B08(a2);
  }

  else
  {
    uint64_t v2 = a2;
    sub_100044DFC((uint64_t **)(a1 + 16), (unint64_t *)&v2, &v2);
  }

_BYTE ***sub_100044430(uint64_t a1, std::string *a2, uint64_t a3)
{
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (v6 < 2 || v6 == 3)
  {
    uint64_t v8 = *(std::__shared_weak_count **)(a3 + 8);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        unint64_t v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        unint64_t v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }

      uint64_t v12 = *(std::__shared_weak_count **)(a3 + 8);
      unint64_t v43 = *(uint64_t ****)a3;
      uint64_t v44 = v12;
      if (v12)
      {
        uint64_t v13 = (unint64_t *)&v12->__shared_owners_;
        do
          unint64_t v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
    }

    else
    {
      unint64_t v43 = *(uint64_t ****)a3;
      uint64_t v44 = 0LL;
    }

    YAML::detail::node_data::convert_to_map(a1, &v43);
    __int128 v15 = v44;
    if (v44)
    {
      char v16 = (unint64_t *)&v44->__shared_owners_;
      do
        unint64_t v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }

  else if (v6 == 2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
    sub_10004472C(exception, a2);
  }

  for (uint64_t i = *(uint64_t **)(a1 + 112); i != *(uint64_t **)(a1 + 120); i += 2)
  {
    uint64_t v19 = *i;
    uint64_t v20 = *(std::__shared_weak_count **)(a3 + 8);
    std::string::size_type v41 = *(uint64_t ****)a3;
    __int128 v42 = v20;
    if (v20)
    {
      int v21 = (unint64_t *)&v20->__shared_owners_;
      do
        unint64_t v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }

    char v23 = sub_100044730(v19, (unsigned __int8 *)a2, (uint64_t *)&v41);
    int v24 = v42;
    if (v42)
    {
      int v25 = (unint64_t *)&v42->__shared_owners_;
      do
        unint64_t v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }

    if ((v23 & 1) != 0) {
      return (_BYTE ***)i[1];
    }
  }

  unint64_t v28 = *(uint64_t ****)a3;
  int64_t v27 = *(std::__shared_weak_count **)(a3 + 8);
  std::string::size_type v40 = v27;
  if (v27)
  {
    char v29 = (unint64_t *)&v27->__shared_owners_;
    do
      unint64_t v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }

  sub_100044C24((uint64_t)v45, a2);
  sub_100041638((uint64_t)v45);
  YAML::detail::memory_holder::merge((uint64_t *)v28, v48);
  unint64_t v32 = v49;
  __int128 v31 = v50;
  if (v49)
  {
    std::string::size_type v33 = (unint64_t *)&v49->__shared_owners_;
    do
      unint64_t v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }

  if (v47 < 0) {
    operator delete(__p);
  }
  if (v40)
  {
    std::string::size_type v35 = (unint64_t *)&v40->__shared_owners_;
    do
      unint64_t v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }

  node = (_BYTE ***)YAML::detail::memory::create_node(**(uint64_t ****)a3);
  YAML::detail::node_data::insert_map_pair((void *)a1, v31, node);
  return node;
}

void sub_1000446E0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16)
{
}

uint64_t sub_100044730(uint64_t a1, unsigned __int8 *a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = (std::__shared_weak_count *)a3[1];
  char v29 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      unint64_t v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v30[0] = 1;
    std::stringbuf::string_type __p = 0LL;
    uint64_t v32 = 0LL;
    uint64_t v33 = 0LL;
    uint64_t v34 = v4;
    std::string::size_type v35 = v5;
    do
      unint64_t v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }

  else
  {
    v30[0] = 1;
    std::stringbuf::string_type __p = 0LL;
    uint64_t v32 = 0LL;
    uint64_t v33 = 0LL;
    uint64_t v34 = v4;
    std::string::size_type v35 = 0LL;
  }

  uint64_t v36 = a1;
  BOOL v9 = sub_100044AD4((uint64_t)v30, &v37);
  unint64_t v10 = v35;
  if (v35)
  {
    unint64_t v11 = (unint64_t *)&v35->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  if (v29)
  {
    uint64_t v13 = (unint64_t *)&v29->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }

  if (!v9) {
    goto LABEL_39;
  }
  if ((v37.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = v37.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = v37.__r_.__value_.__l.__size_;
  }
  uint64_t v16 = a2[23];
  int v17 = (char)v16;
  if ((v16 & 0x80u) != 0LL) {
    uint64_t v16 = *((void *)a2 + 1);
  }
  if (size == v16)
  {
    if (v17 >= 0) {
      __int128 v18 = a2;
    }
    else {
      __int128 v18 = *(unsigned __int8 **)a2;
    }
    if ((v37.__r_.__value_.__s.__size_ & 0x80) != 0)
    {
      BOOL v27 = memcmp(v37.__r_.__value_.__l.__data_, v18, v37.__r_.__value_.__l.__size_) == 0;
LABEL_43:
      operator delete(v37.__r_.__value_.__l.__data_);
      return v27;
    }

    if (!v37.__r_.__value_.__s.__size_) {
      return 1LL;
    }
    uint64_t v19 = v37.__r_.__value_.__s.__size_ - 1LL;
    uint64_t v20 = &v37;
    do
    {
      int v22 = v20->__r_.__value_.__s.__data_[0];
      uint64_t v20 = (std::string *)((char *)v20 + 1);
      int v21 = v22;
      int v24 = *v18++;
      int v23 = v24;
      BOOL v26 = v19-- != 0;
      BOOL v27 = v21 == v23;
    }

    while (v21 == v23 && v26);
  }

  else
  {
LABEL_39:
    BOOL v27 = 0LL;
  }

  if ((v37.__r_.__value_.__s.__size_ & 0x80) != 0) {
    goto LABEL_43;
  }
  return v27;
}

void sub_1000448F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void *sub_100044924(void *a1, uint64_t a2)
{
  uint64_t v5 = -1LL;
  int v6 = -1;
  sub_1000449C4(a2, &__p);
  sub_1000413D8((uint64_t)a1, &v5, (uint64_t)&__p);
  *a1 = off_1000792E0;
  *a1 = off_100079420;
  return a1;
}

void sub_1000449A8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000449C4@<X0>(uint64_t a1@<X0>, std::stringbuf::string_type *a2@<X8>)
{
  uint64_t v4 = sub_100002F60(&v13, (uint64_t)"operator[] call on a scalar", 27LL);
  uint64_t v5 = sub_100002F60(v4, (uint64_t)" (key: ", 8LL);
  int v6 = *(char *)(a1 + 23);
  if (v6 >= 0) {
    uint64_t v7 = a1;
  }
  else {
    uint64_t v7 = *(void *)a1;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v8 = *(void *)(a1 + 8);
  }
  BOOL v9 = sub_100002F60(v5, v7, v8);
  sub_100002F60(v9, (uint64_t)")", 2LL);
  std::stringbuf::str(a2, &v14);
  *(void *)((char *)v12
  uint64_t v13 = v10;
  std::streambuf::~streambuf(&v14);
  return std::ios::~ios(&v15);
}

void sub_100044AC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

BOOL sub_100044AD4(uint64_t a1, std::string *a2)
{
  int v4 = sub_100041BE8(a1);
  if (v4 == 2)
  {
    uint64_t v5 = (const std::string *)sub_100044B28(a1);
    std::string::operator=(a2, v5);
  }

  return v4 == 2;
}

uint64_t *sub_100044B28(uint64_t a1)
{
  if (!*(_BYTE *)a1)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
    if (*(char *)(a1 + 31) < 0)
    {
      sub_10000231C(&v5, *(void **)(a1 + 8), *(void *)(a1 + 16));
    }

    else
    {
      __int128 v5 = *(_OWORD *)(a1 + 8);
      uint64_t v6 = *(void *)(a1 + 24);
    }

    sub_10004120C(exception, (uint64_t)&v5);
  }

  uint64_t v2 = *(void ***)(a1 + 48);
  if (v2) {
    return (uint64_t *)(**v2 + 56LL);
  }
  else {
    return YAML::detail::node_data::empty_scalar((YAML::detail::node_data *)a1);
  }
}

void sub_100044BEC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

uint64_t sub_100044C24(uint64_t a1, const std::string *a2)
{
  *(_BYTE *)a1 = 1;
  *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  int v4 = operator new(0x10uLL);
  __int128 v5 = operator new(0x18uLL);
  v5[2] = 0LL;
  v5[1] = 0LL;
  void *v5 = v5 + 1;
  sub_100041974(v4, (uint64_t)v5);
  sub_10004184C((void *)(a1 + 32), (uint64_t)v4);
  *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = YAML::detail::memory::create_node(**(uint64_t ****)(a1 + 32));
  sub_100044D04(a1, a2);
  return a1;
}

void sub_100044CC8(_Unwind_Exception *a1)
{
}

std::string *sub_100044D04(uint64_t a1, const std::string *a2)
{
  if (!*(_BYTE *)a1)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
    if (*(char *)(a1 + 31) < 0)
    {
      sub_10000231C(&v7, *(void **)(a1 + 8), *(void *)(a1 + 16));
    }

    else
    {
      __int128 v7 = *(_OWORD *)(a1 + 8);
      uint64_t v8 = *(void *)(a1 + 24);
    }

    sub_10004120C(exception, (uint64_t)&v7);
  }

  sub_100041638(a1);
  int v4 = *(uint64_t ***)(a1 + 48);
  sub_100041B08((uint64_t)v4);
  return YAML::detail::node_data::set_scalar(**v4, a2);
}

void sub_100044DC4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

uint64_t *sub_100044DFC(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1 + 1;
  __int128 v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        __int128 v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }

      if (v9 >= v7) {
        break;
      }
      __int128 v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    uint64_t v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    sub_1000055AC(a1, (uint64_t)v8, v6, v10);
    return v10;
  }

  return (uint64_t *)v8;
}

uint64_t sub_100044EB4(uint64_t result)
{
  if (*(_DWORD *)result == 2)
  {
    uint64_t v1 = *(_BYTE *****)(result + 24);
    uint64_t v2 = (_BYTE ****)(*(void *)(result + 16) + 16LL);
    if (v1 != v2)
    {
      while (!****v2 || !***v2[1])
      {
        v2 += 2;
        if (v2 == v1)
        {
          uint64_t v2 = *(_BYTE *****)(result + 24);
          break;
        }
      }
    }

    *(void *)(result + 16) = v2;
  }

  else if (*(_DWORD *)result == 1)
  {
    *(void *)(result + 8) += 8LL;
  }

  return result;
}

uint64_t sub_100044F28(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v4 = a1 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_10000231C((_BYTE *)v4, *(void **)(a2 + 8), *(void *)(a2 + 16));
  }

  else
  {
    __int128 v5 = *(_OWORD *)(a2 + 8);
    *(void *)(v4 + 16) = *(void *)(a2 + 24);
    *(_OWORD *)uint64_t v4 = v5;
  }

  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 40) = v6;
  if (v6)
  {
    unint64_t v7 = (unint64_t *)(v6 + 8);
    do
      unint64_t v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }

  *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = *(void *)(a2 + 48);
  v20[0] = 0;
  *(_OWORD *)int v21 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  v16[0] = 0;
  *(_OWORD *)std::stringbuf::string_type __p = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  sub_100045098(a1 + 56, (uint64_t)v20, (uint64_t)v16);
  unint64_t v9 = (std::__shared_weak_count *)v19;
  if ((void)v19)
  {
    uint64_t v10 = (unint64_t *)(v19 + 8);
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  if (SBYTE7(v18) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v12 = (std::__shared_weak_count *)v23;
  if ((void)v23)
  {
    uint64_t v13 = (unint64_t *)(v23 + 8);
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

  if (SBYTE7(v22) < 0) {
    operator delete(v21[0]);
  }
  return a1;
}

void sub_100045074( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
}

uint64_t sub_100045098(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v6 = a1 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_10000231C((_BYTE *)v6, *(void **)(a2 + 8), *(void *)(a2 + 16));
  }

  else
  {
    __int128 v7 = *(_OWORD *)(a2 + 8);
    *(void *)(v6 + 16) = *(void *)(a2 + 24);
    *(_OWORD *)uint64_t v6 = v7;
  }

  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  if (v8)
  {
    unint64_t v9 = (unint64_t *)(v8 + 8);
    do
      unint64_t v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }

  *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = *(void *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)a3;
  unint64_t v11 = (_BYTE *)(a1 + 64);
  if (*(char *)(a3 + 31) < 0)
  {
    sub_10000231C(v11, *(void **)(a3 + 8), *(void *)(a3 + 16));
  }

  else
  {
    __int128 v12 = *(_OWORD *)(a3 + 8);
    *(void *)(a1 + 80) = *(void *)(a3 + 24);
    *(_OWORD *)unint64_t v11 = v12;
  }

  uint64_t v13 = *(void *)(a3 + 40);
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *(void *)(a3 + 32);
  *(void *)(a1 + 96) = v13;
  if (v13)
  {
    unint64_t v14 = (unint64_t *)(v13 + 8);
    do
      unint64_t v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }

  *(void *)(a1 + 104) = *(void *)(a3 + 48);
  return a1;
}

void sub_10004517C(_Unwind_Exception *a1)
{
}

uint64_t sub_100045190(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)a1 = 0;
  *(_OWORD *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  sub_1000451E0(a1 + 56, a2, a3);
  return a1;
}

void sub_1000451CC(_Unwind_Exception *a1)
{
}

uint64_t sub_1000451E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v6 = a1 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_10000231C((_BYTE *)v6, *(void **)(a2 + 8), *(void *)(a2 + 16));
  }

  else
  {
    __int128 v7 = *(_OWORD *)(a2 + 8);
    *(void *)(v6 + 16) = *(void *)(a2 + 24);
    *(_OWORD *)uint64_t v6 = v7;
  }

  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  if (v8)
  {
    unint64_t v9 = (unint64_t *)(v8 + 8);
    do
      unint64_t v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }

  *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = *(void *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)a3;
  unint64_t v11 = (_BYTE *)(a1 + 64);
  if (*(char *)(a3 + 31) < 0)
  {
    sub_10000231C(v11, *(void **)(a3 + 8), *(void *)(a3 + 16));
  }

  else
  {
    __int128 v12 = *(_OWORD *)(a3 + 8);
    *(void *)(a1 + 80) = *(void *)(a3 + 24);
    *(_OWORD *)unint64_t v11 = v12;
  }

  uint64_t v13 = *(void *)(a3 + 40);
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *(void *)(a3 + 32);
  *(void *)(a1 + 96) = v13;
  if (v13)
  {
    unint64_t v14 = (unint64_t *)(v13 + 8);
    do
      unint64_t v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }

  *(void *)(a1 + 104) = *(void *)(a3 + 48);
  return a1;
}

void sub_1000452C4(_Unwind_Exception *a1)
{
}

uint64_t *sub_1000452D8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  if (sub_100041BE8(*a1) != 2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
    uint64_t v8 = sub_1000453A8(*a1);
    int v9 = v7;
    sub_1000454A4(exception, &v8);
    void *exception = &off_100079238;
  }

  uint64_t result = sub_100044B28(*a1);
  __int128 v5 = *(_OWORD *)result;
  *(void *)(a2 + 16) = result[2];
  *(_OWORD *)a2 = v5;
  return result;
}

void sub_100045394(_Unwind_Exception *a1)
{
}

uint64_t sub_1000453A8(uint64_t a1)
{
  if (!*(_BYTE *)a1)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
    if (*(char *)(a1 + 31) < 0)
    {
      sub_10000231C(&v5, *(void **)(a1 + 8), *(void *)(a1 + 16));
    }

    else
    {
      __int128 v5 = *(_OWORD *)(a1 + 8);
      uint64_t v6 = *(void *)(a1 + 24);
    }

    sub_10004120C(exception, (uint64_t)&v5);
  }

  uint64_t v2 = *(void *)(a1 + 48);
  if (v2) {
    return *(void *)(**(void **)v2 + 4LL);
  }
  else {
    return -1LL;
  }
}

void sub_100045468( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void *sub_1000454A4(void *a1, _DWORD *a2)
{
  *a1 = off_1000792E0;
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *a1 = off_100079360;
  return a1;
}

void sub_100045520( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10004553C(YAML::BadConversion *a1)
{
}

void *sub_100045550(void *result, __int128 *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = result[1];
  if (*((char *)a2 + 23) < 0)
  {
    uint64_t result = sub_10000231C((_BYTE *)result[1], *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v5 = *a2;
    *(void *)(v4 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v4 = v5;
  }

  *(_BYTE *)(v4 + 24) = *((_BYTE *)a2 + 24);
  v3[1] = v4 + 32;
  return result;
}

void sub_1000455B4(_Unwind_Exception *a1)
{
  *(void *)(v1 + std::iostream::~basic_iostream(v2, v3 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1000455BC(uint64_t *a1, __int128 *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  else {
    unint64_t v9 = v5;
  }
  __int128 v18 = a1 + 2;
  if (v9) {
    unint64_t v10 = sub_10002800C(v7, v9);
  }
  else {
    unint64_t v10 = 0LL;
  }
  unint64_t v11 = &v10[32 * v4];
  v15[0] = v10;
  v15[1] = v11;
  uint64_t v16 = v11;
  int v17 = &v10[32 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    sub_10000231C(v11, *(void **)a2, *((void *)a2 + 1));
    unint64_t v11 = v16;
  }

  else
  {
    __int128 v12 = *a2;
    *((void *)v11 + 2) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v11 = v12;
  }

  v10[32 * v4 + 24] = *((_BYTE *)a2 + 24);
  uint64_t v16 = v11 + 32;
  sub_10004406C(a1, v15);
  uint64_t v13 = a1[1];
  sub_100044204((uint64_t)v15);
  return v13;
}

void sub_1000456B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1000456C8()
{
  return __cxa_atexit((void (*)(void *))&std::string::~string, &stru_10007C798, (void *)&_mh_execute_header);
}

void sub_10004576C(uint64_t a1)
{
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_1000457E0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100045814(__int128 **a1, uint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 3) < 3 || sub_100038648((uint64_t)a1))
  {
    sub_100038638(a2);
    sub_1000021BC( &v52,  "\n <EXECUTABLE> <COMMAND> --templateDir <dir> [--schema <type>] [--catId <id>] [--locale <locale>] [--visualCatId < id>]\n [--noCheckSnippetDialogIds] [--sourceLocaleDialogIds <ids>] [--xcode] [--quiet] [--errors] [--pedantic]\n \n If --catId or --visualCatId is specified, then validate the specified CAT file.\n If --locale is also defined then only check that locale, otherwise check all locales.\n \n If --schema is specified, then validate the specified type name.\n \n If none of --catId, --visualCatId, or --schema is specified, then find and validate\n all schema files and all CAT files under the template directory. If --locale is also defined\n then only check that locale for each CAT file, otherwise check all locales for all CAT files.\n \n If --noCheckSnippetDialogIds is specified, do not check for matching dialog IDs in UsedForSnippet CATs.\n \n If --sourceLocaleDialogIds is specified, <ids> is expected to be a comma-separated set of dialog IDs to\n use instead of reading from the source locale file.\n \n If --xcode is specified, output is generated in a format that can be used with Xcode's\n Build Phases > Run Script functionality to highlight errors/warnings within Xcode's UI.\n As expected by Xcode, the exit code is 1 if there are errors, but 0 if there are only warnings.\n \n If --quiet is specified, no output is generated. The exit code indicates success or failure.\n \n If --errors is specified, no warnings are generated or contribute to the exit code (disables pedantic mode). \n \n If --pedantic is specified, additional checks are performed for opportunities for improvement (nits).\n");
    sub_1000021BC(v59, "validate");
    sub_1000388C0((uint64_t)a1, (uint64_t)v59, (uint64_t)&v52);
    if (SHIBYTE(v54) < 0) {
      operator delete(v52);
    }
    return 0LL;
  }

  LODWORD(v52) = 0;
  BYTE4(v52) = 1;
  v53[0] = 0;
  char v55 = 0;
  uint64_t v57 = 0LL;
  uint64_t v58 = 0LL;
  uint64_t v56 = 0LL;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 3) > 3)
  {
    sub_1000021BC(__p, "--templateDir");
    siri::dialogengine::GetOption(v50, a1, __p);
    siri::dialogengine::ExpandPath(v59, v50);
    sub_1000021BC(__p, "--schema");
    siri::dialogengine::GetOption(v50, a1, __p);
    sub_1000021BC(v46, "--catId");
    siri::dialogengine::GetOption(__p, a1, v46);
    sub_1000021BC(&v45, "--visualCatId");
    siri::dialogengine::GetOption(v46, a1, &v45);
    sub_1000021BC(v43, "--locale");
    siri::dialogengine::GetOption(&v45, a1, v43);
    if (SHIBYTE(v44) < 0) {
      operator delete(v43[0]);
    }
    sub_1000021BC(v43, "--noCheckSnippetDialogIds");
    int v6 = siri::dialogengine::OptionExists(a1, v43);
    sub_1000494BC((uint64_t)&v52, (const char *)(v6 ^ 1u));
    if (SHIBYTE(v44) < 0) {
      operator delete(v43[0]);
    }
    v43[0] = 0LL;
    v43[1] = 0LL;
    uint64_t v44 = 0LL;
    sub_100002594((char *)v43, *a1, a1[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 3));
    sub_1000021BC(&v38, "--sourceLocaleDialogIds");
    siri::dialogengine::PopStringSetOption(v41, v43, &v38);
    sub_100049518((uint64_t)&v52, (uint64_t)v41);
    if (v42) {
      sub_100009064((uint64_t)v41, (char *)v41[1]);
    }
    if (v40 < 0) {
      operator delete(v38);
    }
    sub_1000021BC(&v38, "--xcode");
    uint64_t v7 = (const char *)siri::dialogengine::OptionExists(a1, &v38);
    sub_100049460((uint64_t)&v52, v7);
    if (v40 < 0) {
      operator delete(v38);
    }
    sub_1000021BC(&v38, "--quiet");
    uint64_t v8 = (const char *)siri::dialogengine::OptionExists(a1, &v38);
    sub_10004940C((uint64_t)&v52, v8);
    if (v40 < 0) {
      operator delete(v38);
    }
    sub_1000021BC(&v38, "--errors");
    unint64_t v9 = (const char *)siri::dialogengine::OptionExists(a1, &v38);
    sub_10004933C(&v52, v9);
    if (v40 < 0) {
      operator delete(v38);
    }
    sub_1000021BC(&v38, "--pedantic");
    unint64_t v10 = (const char *)siri::dialogengine::OptionExists(a1, &v38);
    sub_100049398((uint64_t)&v52, v10);
    if (v40 < 0) {
      operator delete(v38);
    }
    unint64_t v11 = v60;
    if ((v60 & 0x80u) != 0) {
      unint64_t v11 = (unint64_t)v59[1];
    }
    if (!v11)
    {
      sub_1000021BC(&v38, "--templateDir required for catutil validate");
      sub_1000021BC(&v35, (char *)&unk_10006A022);
      BOOL v4 = sub_10004953C(&v52, (uint64_t)&v38, (const void **)&v35, 0LL);
      if (v37 < 0) {
        operator delete(v35);
      }
      if (v40 < 0) {
        operator delete(v38);
      }
      goto LABEL_57;
    }

    unint64_t v12 = v51;
    if ((v51 & 0x80u) != 0) {
      unint64_t v12 = (unint64_t)v50[1];
    }
    if (v12)
    {
      BOOL v13 = sub_1000466E4(&v52, (uint64_t)v59, (uint64_t)v50);
LABEL_56:
      BOOL v4 = v13;
LABEL_57:
      unint64_t v38 = v43;
      sub_1000027F4((void ***)&v38);
      goto LABEL_63;
    }

    unint64_t v14 = v49;
    if ((v49 & 0x80u) != 0) {
      unint64_t v14 = (unint64_t)__p[1];
    }
    if (v14)
    {
      BOOL v13 = sub_100046B74((unsigned __int8 *)&v52, (uint64_t)v59, (const void **)__p, &v45);
      goto LABEL_56;
    }

    unint64_t v15 = v47;
    if ((v47 & 0x80u) != 0) {
      unint64_t v15 = (unint64_t)v46[1];
    }
    if (v15)
    {
      BOOL v13 = sub_100046D8C((unsigned __int8 *)&v52, (uint64_t)v59, (__int128 *)v46);
      goto LABEL_56;
    }

    sub_1000021BC(v33, "schema");
    siri::dialogengine::JoinPath(&v35, v59, v33);
    siri::dialogengine::ListDir(&v38, &v35);
    if (v37 < 0) {
      operator delete(v35);
    }
    if (v34 < 0) {
      operator delete(v33[0]);
    }
    uint64_t v16 = (char *)v38;
    int v17 = v39;
    if (v38 != v39)
    {
      do
      {
        sub_1000021BC(&v35, "catschema");
        int HasExtension = siri::dialogengine::HasExtension(v16, &v35);
        int v19 = HasExtension;
        if (v37 < 0)
        {
          operator delete(v35);
          if (v19)
          {
LABEL_78:
            std::operator+<char>(&v35, "=== Validate Schema: ", v16);
            sub_100049948(&v52, (uint64_t)&v35);
            if (v37 < 0) {
              operator delete(v35);
            }
            siri::dialogengine::BaseName(&v35, v16);
            sub_1000466E4(&v52, (uint64_t)v59, (uint64_t)&v35);
            if (v37 < 0) {
              operator delete(v35);
            }
          }
        }

        else if (HasExtension)
        {
          goto LABEL_78;
        }

        v16 += 24;
      }

      while (v16 != v17);
    }

    std::string::size_type v35 = &v38;
    sub_1000027F4((void ***)&v35);
    sub_1000021BC(v33, "dialog");
    siri::dialogengine::JoinPath(&v35, v59, v33);
    siri::dialogengine::ListDirRecursively(&v38, &v35);
    if (v37 < 0) {
      operator delete(v35);
    }
    if (v34 < 0) {
      operator delete(v33[0]);
    }
    uint64_t v20 = (char *)v38;
    int v21 = v39;
    if (v38 == v39)
    {
LABEL_127:
      sub_1000021BC(v31, "visual");
      siri::dialogengine::JoinPath(v33, v59, v31);
      siri::dialogengine::ListDirRecursively(&v35, v33);
      if (v34 < 0) {
        operator delete(v33[0]);
      }
      if (v32 < 0) {
        operator delete(v31[0]);
      }
      BOOL v27 = (char *)v35;
      unint64_t v28 = v36;
      if (v35 != v36)
      {
        do
        {
          if (siri::dialogengine::HasVisualCATExtension(v27, 2LL))
          {
            std::operator+<char>(v33, "=== Validate Visual CAT: ", v27);
            sub_100049948(&v52, (uint64_t)v33);
            if (v34 < 0) {
              operator delete(v33[0]);
            }
            siri::dialogengine::CatPathToId(v33, v27);
            sub_100046D8C((unsigned __int8 *)&v52, (uint64_t)v59, (__int128 *)v33);
            if (v34 < 0) {
              operator delete(v33[0]);
            }
          }

          siri::dialogengine::StringToLower(v33);
          if (siri::dialogengine::HasVisualCATExtension(v33, 2LL)
            && (siri::dialogengine::HasVisualCATExtension(v27, 2LL) & 1) == 0)
          {
            sub_1000021BC(v31, "Visual CAT xml or binary file extension is not lower case");
            siri::dialogengine::JoinPath(v29, v59, v27);
            sub_10004953C(&v52, (uint64_t)v31, (const void **)v29, 0LL);
            if (v30 < 0) {
              operator delete(v29[0]);
            }
            if (v32 < 0) {
              operator delete(v31[0]);
            }
          }

          if (v34 < 0) {
            operator delete(v33[0]);
          }
          v27 += 24;
        }

        while (v27 != v28);
      }

      BOOL v4 = sub_1000499CC((uint64_t)&v52);
      v33[0] = &v35;
      sub_1000027F4((void ***)v33);
      std::string::size_type v35 = &v38;
      sub_1000027F4((void ***)&v35);
      goto LABEL_57;
    }

    while (1)
    {
      sub_1000021BC(&v35, "cat");
      int v22 = siri::dialogengine::HasExtension(v20, &v35);
      int v23 = v22;
      if (v37 < 0)
      {
        operator delete(v35);
        if (!v23) {
          goto LABEL_96;
        }
      }

      else if (!v22)
      {
        goto LABEL_96;
      }

      std::operator+<char>(&v35, "=== Validate CAT: ", v20);
      sub_100049948(&v52, (uint64_t)&v35);
      if (v37 < 0) {
        operator delete(v35);
      }
      siri::dialogengine::CatPathToId(&v35, v20);
      sub_100046B74((unsigned __int8 *)&v52, (uint64_t)v59, (const void **)&v35, &v45);
      if (v37 < 0) {
        operator delete(v35);
      }
LABEL_96:
      siri::dialogengine::StringToLower(&v35);
      sub_1000021BC(v33, ".cat.xml");
      if ((siri::dialogengine::StringEndsWith(&v35, v33) & 1) != 0)
      {
        int v24 = 1;
      }

      else
      {
        sub_1000021BC(v31, ".cat.bin");
        int v24 = siri::dialogengine::StringEndsWith(&v35, v31);
        if (v32 < 0) {
          operator delete(v31[0]);
        }
      }

      if (v34 < 0)
      {
        operator delete(v33[0]);
        if (v24)
        {
LABEL_104:
          siri::dialogengine::DirName(v33, v20);
          sub_1000021BC(v31, "cat");
          char v25 = siri::dialogengine::HasExtension(v33, v31);
          if (v32 < 0) {
            operator delete(v31[0]);
          }
          if ((v25 & 1) == 0)
          {
            sub_1000021BC(v31, "CAT xml or binary found outside of .cat file directory");
            siri::dialogengine::JoinPath(v29, v59, v20);
            sub_10004953C(&v52, (uint64_t)v31, (const void **)v29, 0LL);
            if (v30 < 0) {
              operator delete(v29[0]);
            }
            if (v32 < 0) {
              operator delete(v31[0]);
            }
          }

          sub_1000021BC(v31, ".cat.xml");
          if ((siri::dialogengine::StringEndsWith(v20, v31) & 1) != 0)
          {
            char v26 = 1;
          }

          else
          {
            sub_1000021BC(v29, ".cat.bin");
            char v26 = siri::dialogengine::StringEndsWith(v20, v29);
            if (v30 < 0) {
              operator delete(v29[0]);
            }
          }

          if (v32 < 0) {
            operator delete(v31[0]);
          }
          if ((v26 & 1) == 0)
          {
            sub_1000021BC(v31, "CAT xml or binary file extension is not lower case");
            siri::dialogengine::JoinPath(v29, v59, v20);
            sub_10004953C(&v52, (uint64_t)v31, (const void **)v29, 0LL);
            if (v30 < 0) {
              operator delete(v29[0]);
            }
            if (v32 < 0) {
              operator delete(v31[0]);
            }
          }

          if (v34 < 0) {
            operator delete(v33[0]);
          }
        }
      }

      else if (v24)
      {
        goto LABEL_104;
      }

      if (v37 < 0) {
        operator delete(v35);
      }
      v20 += 24;
      if (v20 == v21) {
        goto LABEL_127;
      }
    }
  }

  sub_1000021BC(v59, "Insufficient arguments specified for catutil validate");
  sub_1000021BC(v50, (char *)&unk_10006A022);
  BOOL v4 = sub_10004953C(&v52, (uint64_t)v59, v50, 0LL);
LABEL_63:
  if (v55) {
    sub_100009064((uint64_t)v53, v54);
  }
  return v4;
}

void sub_100046324( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, void *__p, uint64_t a32, int a33, __int16 a34, char a35, char a36, void *a37, uint64_t a38, int a39, __int16 a40, char a41, char a42, void *a43, uint64_t a44, int a45, __int16 a46, char a47, char a48)
{
  a15 = &a18;
  sub_1000027F4((void ***)&a15);
  a18 = &a21;
  sub_1000027F4((void ***)&a18);
  a18 = &a28;
  sub_1000027F4((void ***)&a18);
  if (a36 < 0) {
    operator delete(__p);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  if (a48 < 0) {
    operator delete(a43);
  }
  if (*(_BYTE *)(v49 - 144)) {
    sub_100009064(v48, *(char **)(v49 - 160));
  }
  _Unwind_Resume(a1);
}

void sub_10004669C( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, void *__p, uint64_t a29, int a30, __int16 a31, char a32, char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x100046630LL);
}

void sub_1000466B4()
{
}

BOOL sub_1000466E4(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  v25[0] = v27;
  sub_10000AE78((void ***)v25);
  siri::dialogengine::BaseName(v27, a3);
  sub_1000021BC(v25, "yaml");
  if ((siri::dialogengine::HasExtension(v27, v25) & 1) != 0)
  {
    int HasExtension = 1;
  }

  else
  {
    sub_1000021BC(__p, "catschema");
    int HasExtension = siri::dialogengine::HasExtension(v27, __p);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
  }

  if (SHIBYTE(v26) < 0)
  {
    operator delete(v25[0]);
    if (!HasExtension) {
      goto LABEL_12;
    }
  }

  else if (!HasExtension)
  {
    goto LABEL_12;
  }

  siri::dialogengine::RemoveExtension(v25, v27);
  if (SHIBYTE(v28) < 0) {
    operator delete(v27[0]);
  }
  *(_OWORD *)BOOL v27 = *(_OWORD *)v25;
  uint64_t v28 = v26;
LABEL_12:
  siri::dialogengine::ObjectRegistry::GetObject(&v21, v29, v27);
  if (v21)
  {
    siri::dialogengine::ObjectSchema::Validate(v21, (siri::dialogengine::Context *)v29);
    siri::dialogengine::Context::GetSchemaErrors((siri::dialogengine::Context *)v29);
    if (v25[0] == v25[1])
    {
      std::operator+<char>(__p, "No errors detected for type schema: ", v27);
      BOOL v14 = sub_100049948(a1, (uint64_t)__p);
      if (SHIBYTE(cap) < 0) {
        operator delete(__p[0]);
      }
    }

    else
    {
      std::to_string(&v19, 0xAAAAAAAAAAAAAAABLL * (((char *)v25[1] - (char *)v25[0]) >> 3));
      int v6 = std::string::append(&v19, " error(s) for ");
      __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      v20.__r_.__value_.__l.__cap_ = v6->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v7;
      v6->__r_.__value_.__l.__size_ = 0LL;
      v6->__r_.__value_.__l.__cap_ = 0LL;
      v6->__r_.__value_.__r.__words[0] = 0LL;
      if (v28 >= 0) {
        uint64_t v8 = v27;
      }
      else {
        uint64_t v8 = (void **)v27[0];
      }
      if (v28 >= 0) {
        std::string::size_type v9 = HIBYTE(v28);
      }
      else {
        std::string::size_type v9 = (std::string::size_type)v27[1];
      }
      unint64_t v10 = std::string::append(&v20, (const std::string::value_type *)v8, v9);
      __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      std::string::size_type cap = v10->__r_.__value_.__l.__cap_;
      *(_OWORD *)std::stringbuf::string_type __p = v11;
      v10->__r_.__value_.__l.__size_ = 0LL;
      v10->__r_.__value_.__l.__cap_ = 0LL;
      v10->__r_.__value_.__r.__words[0] = 0LL;
      sub_100049948(a1, (uint64_t)__p);
      if (SHIBYTE(cap) < 0) {
        operator delete(__p[0]);
      }
      unint64_t v12 = (char *)v25[0];
      BOOL v13 = (char *)v25[1];
      while (v12 != v13)
      {
        siri::dialogengine::ObjectSchema::GetFilename(v21);
        sub_10004953C(a1, (uint64_t)v12, (const void **)__p, 0LL);
        if (SHIBYTE(cap) < 0) {
          operator delete(__p[0]);
        }
        v12 += 24;
      }

      BOOL v14 = sub_1000499CC((uint64_t)a1);
    }

    __p[0] = v25;
    sub_1000027F4((void ***)__p);
  }

  else
  {
    std::operator+<char>(v25, "Cannot find schema for type name: ", v27);
    sub_1000021BC(__p, (char *)&unk_10006A022);
    BOOL v14 = sub_10004953C(a1, (uint64_t)v25, (const void **)__p, 0LL);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v26) < 0) {
      operator delete(v25[0]);
    }
  }

  unint64_t v15 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      unint64_t v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

  if (SHIBYTE(v28) < 0) {
    operator delete(v27[0]);
  }
  siri::dialogengine::Context::~Context((siri::dialogengine::Context *)v29);
  return v14;
}

void sub_100046A2C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, char a23, uint64_t a24, void **__p, uint64_t a26, int a27, __int16 a28, char a29, char a30, void *a31, uint64_t a32, int a33, __int16 a34, char a35, char a36, void *a37, uint64_t a38, int a39, __int16 a40, char a41, char a42, char a43)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  std::stringbuf::string_type __p = &a31;
  sub_1000027F4(&__p);
  sub_1000059D0((uint64_t)&a23);
  if (a42 < 0) {
    operator delete(a37);
  }
  siri::dialogengine::Context::~Context((siri::dialogengine::Context *)&a43);
  _Unwind_Resume(a1);
}

BOOL sub_100046B74(unsigned __int8 *a1, uint64_t a2, const void **a3, std::string *a4)
{
  std::string::size_type size = a4->__r_.__value_.__s.__size_;
  if ((size & 0x80u) != 0LL) {
    std::string::size_type size = a4->__r_.__value_.__l.__size_;
  }
  if (size) {
    return sub_100046F9C(a1, a2, a3, a4);
  }
  siri::dialogengine::CatIdToPath(&__p, a3);
  siri::dialogengine::JoinPath(v17, a2, &__p);
  if (v16 < 0) {
    operator delete(__p);
  }
  if ((siri::dialogengine::DirExists(v17) & 1) != 0)
  {
    siri::dialogengine::GetCatLocales(&__p, v17);
    std::string::size_type v9 = (std::string *)__p;
    unint64_t v10 = v15;
    if (__p == v15)
    {
      sub_1000021BC(v12, "Cannot find any locale files in CAT directory");
      BOOL v11 = sub_100049920(a1, (uint64_t)v12, (const void **)v17, 0LL);
      if (v13 < 0) {
        operator delete(v12[0]);
      }
    }

    else
    {
      do
        sub_100046F9C(a1, a2, a3, v9++);
      while (v9 != v10);
      BOOL v11 = sub_1000499CC((uint64_t)a1);
    }

    v12[0] = &__p;
    sub_1000027F4((void ***)v12);
  }

  else
  {
    sub_1000021BC(&__p, "CAT does not exist");
    BOOL v11 = sub_10004953C(a1, (uint64_t)&__p, (const void **)v17, 0LL);
    if (v16 < 0) {
      operator delete(__p);
    }
  }

  if (v18 < 0) {
    operator delete(v17[0]);
  }
  return v11;
}

void sub_100046D04( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::stringbuf::string_type __p = &a16;
  sub_1000027F4(&__p);
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

BOOL sub_100046D8C(unsigned __int8 *a1, uint64_t a2, __int128 *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    sub_10000231C(&__dst, *(void **)a3, *((void *)a3 + 1));
  }

  else
  {
    __int128 __dst = *a3;
    uint64_t v15 = *((void *)a3 + 2);
  }

  siri::dialogengine::FindVisualFile(v12, v16, a3);
  unint64_t v5 = v13;
  if ((v13 & 0x80u) != 0) {
    unint64_t v5 = (unint64_t)v12[1];
  }
  if (v5)
  {
    siri::dialogengine::Context::Context((siri::dialogengine::Context *)v10);
    siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)v9);
    siri::dialogengine::RequestInfo::SetTemplateDirs(v9, v16);
    siri::dialogengine::RequestInfo::SetVisualPath(v9, v12);
    int v8 = 1;
    siri::dialogengine::RequestInfo::SetRequestType(v9, &v8);
    siri::dialogengine::Context::SetRequestInfo(v10, v9);
    BOOL v6 = sub_1000473E4(a1, (siri::dialogengine::Context *)v10, (uint64_t)&__dst);
    sub_1000286FC((uint64_t)v9);
    siri::dialogengine::Context::~Context((siri::dialogengine::Context *)v10);
  }

  else
  {
    std::operator+<char>(v10, "cannot find CAT file: ", &__dst);
    BOOL v6 = sub_10004953C(a1, (uint64_t)v10, v12, 0LL);
    if (v11 < 0) {
      operator delete(v10[0]);
    }
  }

  if (SHIBYTE(v15) < 0) {
    operator delete((void *)__dst);
  }
  v10[0] = (void **)v16;
  sub_10000AE78(v10);
  return v6;
}

void sub_100046F10(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x217]) < 0) {
    operator delete(*(void **)v1);
  }
  *(void *)uint64_t v1 = v2 - 56;
  sub_10000AE78((void ***)&STACK[0x200]);
  _Unwind_Resume(a1);
}

BOOL sub_100046F9C(unsigned __int8 *a1, uint64_t a2, const void **a3, std::string *a4)
{
  else {
    size_t v7 = (size_t)a3[1];
  }
  p_dst = &__dst;
  sub_100007A0C((uint64_t)&__dst, v7 + 2);
  if ((__dst.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if (v7)
  {
    else {
      std::string::size_type v9 = *a3;
    }
    memmove(p_dst, v9, v7);
  }

  strcpy((char *)p_dst + v7, " (");
  int size = (char)a4->__r_.__value_.__s.__size_;
  if (size >= 0) {
    char v11 = (const std::string::value_type *)a4;
  }
  else {
    char v11 = (const std::string::value_type *)a4->__r_.__value_.__r.__words[0];
  }
  if (size >= 0) {
    std::string::size_type v12 = a4->__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v12 = a4->__r_.__value_.__l.__size_;
  }
  unsigned __int8 v13 = std::string::append(&__dst, v11, v12);
  __int128 v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  __p[0].__r_.__value_.__l.__cap_ = v13->__r_.__value_.__l.__cap_;
  *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0LL;
  v13->__r_.__value_.__l.__cap_ = 0LL;
  v13->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v15 = std::string::append(__p, ")");
  __int128 v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  std::string::size_type cap = v15->__r_.__value_.__l.__cap_;
  *(_OWORD *)char v25 = v16;
  v15->__r_.__value_.__l.__size_ = 0LL;
  v15->__r_.__value_.__l.__cap_ = 0LL;
  v15->__r_.__value_.__r.__words[0] = 0LL;
  siri::dialogengine::FindParamsFile(v23, v27, a3);
  else {
    std::string __dst = *a4;
  }
  memset(__p, 0, 24);
  uint64_t v28 = (void **)__p;
  char v29 = 0;
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  __p[0].__r_.__value_.__l.__size_ = __p[0].__r_.__value_.__r.__words[0];
  __p[0].__r_.__value_.__l.__cap_ = __p[0].__r_.__value_.__r.__words[0] + 24;
  __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)sub_100007ACC( (uint64_t)&__p[0].__r_.__value_.__l.__cap_,  (__int128 *)&__dst,  v31,  __p[0].__r_.__value_.__l.__data_);
  siri::dialogengine::FindLocaleFile(v21, v27, __p, a3);
  uint64_t v28 = (void **)__p;
  sub_1000027F4(&v28);
  unint64_t v17 = v22;
  if ((v22 & 0x80u) != 0) {
    unint64_t v17 = (unint64_t)v21[1];
  }
  if (v17)
  {
    siri::dialogengine::Context::Context((siri::dialogengine::Context *)__p);
    siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)&__dst);
    siri::dialogengine::RequestInfo::SetTemplateDirs(&__dst, v27);
    siri::dialogengine::RequestInfo::SetParamsPath(&__dst, v23);
    siri::dialogengine::RequestInfo::SetLocalePath(&__dst, v21);
    LODWORD(v2std::iostream::~basic_iostream(v2, v3 + 8) = 0;
    siri::dialogengine::RequestInfo::SetRequestType(&__dst, &v28);
    siri::dialogengine::Context::SetRequestInfo(__p, &__dst);
    BOOL v18 = sub_1000473E4(a1, (siri::dialogengine::Context *)__p, (uint64_t)v25);
    sub_1000286FC((uint64_t)&__dst);
    siri::dialogengine::Context::~Context((siri::dialogengine::Context *)__p);
  }

  else
  {
    std::operator+<char>(__p, "cannot find CAT file: ", v25);
    BOOL v18 = sub_10004953C(a1, (uint64_t)__p, (const void **)v21, 0LL);
  }

  if (v24 < 0) {
    operator delete(v23[0]);
  }
  if (SHIBYTE(cap) < 0) {
    operator delete(v25[0]);
  }
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  sub_10000AE78((void ***)__p);
  return v18;
}

void sub_1000472D8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (SLOBYTE(STACK[0xDD7]) < 0) {
    operator delete((void *)STACK[0xDC0]);
  }
  if (SLOBYTE(STACK[0xDEF]) < 0) {
    operator delete((void *)STACK[0xDD8]);
  }
  if (SLOBYTE(STACK[0xE07]) < 0) {
    operator delete((void *)STACK[0xDF0]);
  }
  std::stringbuf::string_type __p = &STACK[0xE08];
  sub_10000AE78((void ***)&__p);
  _Unwind_Resume(a1);
}

BOOL sub_1000473E4(unsigned __int8 *a1, siri::dialogengine::Context *this, uint64_t a3)
{
  if ((siri::dialogengine::Context::Load(this) & 1) != 0)
  {
    siri::dialogengine::Context::GetFile(this);
    char v6 = sub_100049510((uint64_t)a1);
    siri::dialogengine::File::SetCheckSnippetDialogIds(v75, v6);
    uint64_t v7 = sub_100049534((uint64_t)a1);
    siri::dialogengine::File::SetSourceLocaleDialogIds(v75, v7);
    (*(void (**)(siri::dialogengine::File *, siri::dialogengine::Context *))(*(void *)v75 + 16LL))( v75,  this);
    siri::dialogengine::File::GetValidationErrors(v75);
    if (v77.__r_.__value_.__r.__words[0] == v77.__r_.__value_.__l.__size_)
    {
      std::operator+<char>(__p, "No validation errors for: ", a3);
      sub_100049948(a1, (uint64_t)__p);
      if (((char)__p[0].__r_.__value_.__s.__size_ & 0x80000000) == 0)
      {
LABEL_62:
        if ((sub_100049390(a1) & 1) == 0)
        {
          siri::dialogengine::File::GetValidationWarnings(v75);
          if (v72 != v73)
          {
            std::to_string(&v78, 0x2E8BA2E8BA2E8BA3LL * ((v73 - v72) >> 3));
            char v30 = std::string::append(&v78, " validation warning(s) for ");
            __int128 v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
            v79.__r_.__value_.__l.__cap_ = v30->__r_.__value_.__l.__cap_;
            *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v31;
            v30->__r_.__value_.__l.__size_ = 0LL;
            v30->__r_.__value_.__l.__cap_ = 0LL;
            v30->__r_.__value_.__r.__words[0] = 0LL;
            int v32 = *(char *)(a3 + 23);
            if (v32 >= 0) {
              uint64_t v33 = (const std::string::value_type *)a3;
            }
            else {
              uint64_t v33 = *(const std::string::value_type **)a3;
            }
            if (v32 >= 0) {
              std::string::size_type v34 = *(unsigned __int8 *)(a3 + 23);
            }
            else {
              std::string::size_type v34 = *(void *)(a3 + 8);
            }
            std::string::size_type v35 = std::string::append(&v79, v33, v34);
            __int128 v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
            __p[0].__r_.__value_.__l.__cap_ = v35->__r_.__value_.__l.__cap_;
            *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v36;
            v35->__r_.__value_.__l.__size_ = 0LL;
            v35->__r_.__value_.__l.__cap_ = 0LL;
            v35->__r_.__value_.__r.__words[0] = 0LL;
            sub_100049948(a1, (uint64_t)__p);
            siri::dialogengine::Context::GetRequestInfo(this);
            siri::dialogengine::RequestInfo::GetParamsPath((siri::dialogengine::RequestInfo *)__p);
            sub_1000286FC((uint64_t)__p);
            sub_10004807C(this, a1, v66);
            char v37 = v72;
            for (uint64_t i = v73; v37 != i; v37 = (siri::dialogengine::LineNumberBase *)((char *)v37 + 88))
            {
              siri::dialogengine::LineNumberBase::GetFilename(v37);
              sub_1000021BC(&v78, "_params.cat");
              int v39 = siri::dialogengine::StringContains(&v79, &v78);
              if (v39) {
                char v40 = &v68;
              }
              else {
                char v40 = v66;
              }
              std::string::size_type v41 = &v70;
              if (!v39) {
                std::string::size_type v41 = &v67;
              }
              if (*v41 < 0)
              {
                char v42 = *v40;
                if (v39) {
                  unint64_t v43 = &v68;
                }
                else {
                  unint64_t v43 = v66;
                }
                sub_10000231C(__p, v42, (unint64_t)v43[1]);
              }

              else
              {
                __p[0] = *(std::string *)v40;
              }

              siri::dialogengine::ValidationEntry::GetText(v37);
              unint64_t LineNumber = siri::dialogengine::LineNumberBase::GetLineNumber(v37);
              sub_100049920(a1, (uint64_t)&v79, (const void **)&__p[0].__r_.__value_.__l.__data_, LineNumber);
            }

            if (v67 < 0) {
              operator delete(v66[0]);
            }
            if (v70 < 0) {
              operator delete(v68);
            }
          }

          if (sub_1000493EC(a1))
          {
            siri::dialogengine::File::GetValidationNits(v75);
            if (v68 != v69)
            {
              std::to_string(&v78, 0x2E8BA2E8BA2E8BA3LL * ((v69 - (siri::dialogengine::LineNumberBase *)v68) >> 3));
              std::string v45 = std::string::append(&v78, " validation nit(s) for ");
              __int128 v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
              v79.__r_.__value_.__l.__cap_ = v45->__r_.__value_.__l.__cap_;
              *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v46;
              v45->__r_.__value_.__l.__size_ = 0LL;
              v45->__r_.__value_.__l.__cap_ = 0LL;
              v45->__r_.__value_.__r.__words[0] = 0LL;
              int v47 = *(char *)(a3 + 23);
              if (v47 >= 0) {
                uint64_t v48 = (const std::string::value_type *)a3;
              }
              else {
                uint64_t v48 = *(const std::string::value_type **)a3;
              }
              if (v47 >= 0) {
                std::string::size_type v49 = *(unsigned __int8 *)(a3 + 23);
              }
              else {
                std::string::size_type v49 = *(void *)(a3 + 8);
              }
              unint64_t v50 = std::string::append(&v79, v48, v49);
              __int128 v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
              __p[0].__r_.__value_.__l.__cap_ = v50->__r_.__value_.__l.__cap_;
              *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v51;
              v50->__r_.__value_.__l.__size_ = 0LL;
              v50->__r_.__value_.__l.__cap_ = 0LL;
              v50->__r_.__value_.__r.__words[0] = 0LL;
              sub_100049948(a1, (uint64_t)__p);
              siri::dialogengine::Context::GetRequestInfo(this);
              siri::dialogengine::RequestInfo::GetParamsPath((siri::dialogengine::RequestInfo *)__p);
              sub_1000286FC((uint64_t)__p);
              sub_10004807C(this, a1, v64);
              int64_t v52 = (siri::dialogengine::LineNumberBase *)v68;
              uint64_t v53 = v69;
              if (v68 != v69)
              {
                do
                {
                  siri::dialogengine::LineNumberBase::GetFilename(v52);
                  sub_1000021BC(&v78, "_params.cat");
                  int v54 = siri::dialogengine::StringContains(&v79, &v78);
                  if (v54) {
                    char v55 = v66;
                  }
                  else {
                    char v55 = v64;
                  }
                  uint64_t v56 = &v67;
                  if (!v54) {
                    uint64_t v56 = &v65;
                  }
                  if (*v56 < 0)
                  {
                    uint64_t v57 = *v55;
                    if (v54) {
                      uint64_t v58 = v66;
                    }
                    else {
                      uint64_t v58 = v64;
                    }
                    sub_10000231C(__p, v57, (unint64_t)v58[1]);
                  }

                  else
                  {
                    __p[0] = *(std::string *)v55;
                  }

                  siri::dialogengine::ValidationEntry::GetText(v52);
                  unint64_t v59 = siri::dialogengine::LineNumberBase::GetLineNumber(v52);
                  sub_100049934(a1, (uint64_t)&v79, (const void **)&__p[0].__r_.__value_.__l.__data_, v59);
                  int64_t v52 = (siri::dialogengine::LineNumberBase *)((char *)v52 + 88);
                }

                while (v52 != v53);
              }

              if (v65 < 0) {
                operator delete(v64[0]);
              }
              if (v67 < 0) {
                operator delete(v66[0]);
              }
            }

            __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v68;
            sub_10002107C((void ***)__p);
          }

          __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v72;
          sub_10002107C((void ***)__p);
        }

        BOOL v29 = sub_1000499CC((uint64_t)a1);
        __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v77;
        sub_10002107C((void ***)__p);
        unsigned __int8 v60 = v76;
        if (v76)
        {
          p_shared_owners = (unint64_t *)&v76->__shared_owners_;
          do
            unint64_t v62 = __ldaxr(p_shared_owners);
          while (__stlxr(v62 - 1, p_shared_owners));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }

        return v29;
      }

      int v23 = (siri::dialogengine::LineNumberBase *)__p[0].__r_.__value_.__r.__words[0];
    }

    else
    {
      std::to_string( &v78,  0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(v77.__r_.__value_.__l.__size_ - v77.__r_.__value_.__r.__words[0]) >> 3));
      int v8 = std::string::append(&v78, " validation error(s) for ");
      __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v79.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v9;
      v8->__r_.__value_.__l.__size_ = 0LL;
      v8->__r_.__value_.__l.__cap_ = 0LL;
      v8->__r_.__value_.__r.__words[0] = 0LL;
      int v10 = *(char *)(a3 + 23);
      if (v10 >= 0) {
        char v11 = (const std::string::value_type *)a3;
      }
      else {
        char v11 = *(const std::string::value_type **)a3;
      }
      if (v10 >= 0) {
        std::string::size_type v12 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        std::string::size_type v12 = *(void *)(a3 + 8);
      }
      unsigned __int8 v13 = std::string::append(&v79, v11, v12);
      __int128 v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      __p[0].__r_.__value_.__l.__cap_ = v13->__r_.__value_.__l.__cap_;
      *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0LL;
      v13->__r_.__value_.__l.__cap_ = 0LL;
      v13->__r_.__value_.__r.__words[0] = 0LL;
      sub_100049948(a1, (uint64_t)__p);
      siri::dialogengine::Context::GetRequestInfo(this);
      siri::dialogengine::RequestInfo::GetParamsPath((siri::dialogengine::RequestInfo *)__p);
      sub_1000286FC((uint64_t)__p);
      sub_10004807C(this, a1, &v68);
      std::string::size_type size = v77.__r_.__value_.__l.__size_;
      for (uint64_t j = (siri::dialogengine::LineNumberBase *)v77.__r_.__value_.__r.__words[0];
            j != (siri::dialogengine::LineNumberBase *)size;
            uint64_t j = (siri::dialogengine::LineNumberBase *)((char *)j + 88))
      {
        siri::dialogengine::LineNumberBase::GetFilename(j);
        sub_1000021BC(&v78, "_params.cat");
        int v17 = siri::dialogengine::StringContains(&v79, &v78);
        if (v17) {
          BOOL v18 = (void **)&v72;
        }
        else {
          BOOL v18 = &v68;
        }
        std::string v19 = &v74;
        if (!v17) {
          std::string v19 = &v70;
        }
        if (*v19 < 0)
        {
          std::string v20 = *v18;
          if (v17) {
            int v21 = (void **)&v72;
          }
          else {
            int v21 = &v68;
          }
          sub_10000231C(__p, v20, (unint64_t)v21[1]);
        }

        else
        {
          __p[0] = *(std::string *)v18;
        }

        siri::dialogengine::ValidationEntry::GetText(j);
        unint64_t v22 = siri::dialogengine::LineNumberBase::GetLineNumber(j);
        sub_10004953C(a1, (uint64_t)&v79, (const void **)&__p[0].__r_.__value_.__l.__data_, v22);
      }

      if (v70 < 0) {
        operator delete(v68);
      }
      if ((v74 & 0x80000000) == 0) {
        goto LABEL_62;
      }
      int v23 = v72;
    }

    operator delete(v23);
    goto LABEL_62;
  }

  std::operator+<char>(__p, "failed to load CAT file: ", a3);
  siri::dialogengine::Context::GetError(this);
  std::string::size_type v24 = v79.__r_.__value_.__s.__size_;
  if ((v79.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    std::string::size_type v24 = v79.__r_.__value_.__l.__size_;
  }
  if (v24)
  {
    std::operator+<char>(&v77, " [", &v79);
    char v25 = std::string::append(&v77, "]");
    __int128 v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v78.__r_.__value_.__l.__cap_ = v25->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0LL;
    v25->__r_.__value_.__l.__cap_ = 0LL;
    v25->__r_.__value_.__r.__words[0] = 0LL;
    if ((v78.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      BOOL v27 = &v78;
    }
    else {
      BOOL v27 = (std::string *)v78.__r_.__value_.__r.__words[0];
    }
    if ((v78.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v28 = v78.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v28 = v78.__r_.__value_.__l.__size_;
    }
    std::string::append(__p, (const std::string::value_type *)v27, v28);
  }

  sub_10004807C(this, a1, &v78);
  BOOL v29 = sub_10004953C(a1, (uint64_t)__p, (const void **)&v78.__r_.__value_.__l.__data_, 0LL);
  return v29;
}

void sub_100047CD0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  *(void *)(v33 - 144) = &a22;
  sub_10002107C((void ***)(v33 - 144));
  *(void *)(v33 - 144) = v33 - 208;
  sub_10002107C((void ***)(v33 - 144));
  *(void *)(v33 - 144) = v33 - 168;
  sub_10002107C((void ***)(v33 - 144));
  sub_1000059D0(v33 - 184);
  _Unwind_Resume(a1);
}

uint64_t sub_10004807C@<X0>(siri::dialogengine::Context *this@<X1>, _BYTE *a2@<X0>, void *a3@<X8>)
{
  Requestint Type = siri::dialogengine::RequestInfo::GetRequestType((siri::dialogengine::RequestInfo *)v14);
  if (RequestType == 1)
  {
    siri::dialogengine::RequestInfo::GetVisualPath((siri::dialogengine::RequestInfo *)v14);
  }

  else if (RequestType)
  {
    siri::dialogengine::RequestInfo::GetRequestTypeString((siri::dialogengine::RequestInfo *)v14);
    char v6 = std::string::insert(&v11, 0LL, "Unknown request type: ");
    __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    std::string::size_type cap = v6->__r_.__value_.__l.__cap_;
    *(_OWORD *)std::string::size_type v12 = v7;
    v6->__r_.__value_.__l.__size_ = 0LL;
    v6->__r_.__value_.__l.__cap_ = 0LL;
    v6->__r_.__value_.__r.__words[0] = 0LL;
    sub_1000021BC(__p, (char *)&unk_10006A022);
    sub_10004953C(a2, (uint64_t)v12, (const void **)__p, 0LL);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(cap) < 0) {
      operator delete(v12[0]);
    }
    sub_1000021BC(a3, (char *)&unk_10006A022);
  }

  else
  {
    siri::dialogengine::RequestInfo::GetLocalePath((siri::dialogengine::RequestInfo *)v14);
  }

  return sub_1000286FC((uint64_t)v14);
}

void sub_100048190( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, char a28)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  sub_1000286FC((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_1000481F0(uint64_t a1)
{
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_100048264( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100048298(void *a1, uint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3) < 6 || sub_100038648((uint64_t)a1))
  {
    sub_100038638(a2);
    sub_1000021BC( __p,  "\n <EXECUTABLE> <COMMAND> --version <toVersion> --templateDir <dir> [--catId <id>] [--debug]\n \n The --version option specifies the version to upgrade to. This can either be\n a specific version number, or an iOS train name to use the highest supported\n version number for that train.\n \n If --templateDir and --catId are specified, then the specified CAT file will be upgraded.\n If only --templateDir is specified, then all CAT files under that directory will be upgraded.\n \n The --debug argument will cause DialogEngine logging to be output if you need more\n detail for why an upgrade failed.\n");
    sub_1000021BC(v93, "upgrade");
    sub_1000388C0((uint64_t)a1, (uint64_t)v93, (uint64_t)__p);
    if (v94 < 0) {
      operator delete(v93[0]);
    }
    if (SHIBYTE(v81) < 0) {
      operator delete(__p[0]);
    }
    return 0LL;
  }

  sub_1000021BC(__p, "--debug");
  int v7 = siri::dialogengine::OptionExists(a1, __p);
  if (SHIBYTE(v81) < 0) {
    operator delete(__p[0]);
  }
  if (v7)
  {
    siri::dialogengine::Log::SetLogDebugMessages((siri::dialogengine::Log *)1, v6);
    siri::dialogengine::Log::SetOutputToStdout((siri::dialogengine::Log *)1, v8);
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Activate debug mode", v9);
  }

  sub_1000021BC(v93, "--templateDir");
  siri::dialogengine::GetOption(__p, a1, v93);
  siri::dialogengine::ExpandPath(v78, __p);
  if (SHIBYTE(v81) < 0) {
    operator delete(__p[0]);
  }
  if (v94 < 0) {
    operator delete(v93[0]);
  }
  sub_1000021BC(__p, "--catId");
  siri::dialogengine::GetOption(&v75, a1, __p);
  if (SHIBYTE(v81) < 0) {
    operator delete(__p[0]);
  }
  sub_1000021BC(__p, "--version");
  siri::dialogengine::GetOption(v73, a1, __p);
  if (SHIBYTE(v81) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v11 = v79;
  if ((v79 & 0x80u) != 0) {
    unint64_t v11 = (unint64_t)v78[1];
  }
  if (!v11)
  {
    std::string::size_type v66 = "--templateDir required for catutil validate";
LABEL_187:
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)v66, v10);
    uint64_t v4 = 0LL;
    goto LABEL_188;
  }

  if ((siri::dialogengine::DirExists(v78) & 1) == 0)
  {
    std::string::size_type v66 = "--templateDir directory does note exist";
    goto LABEL_187;
  }

  siri::dialogengine::GetValidVersion(__p, v73);
  if (SHIBYTE(v74) < 0) {
    operator delete(v73[0]);
  }
  *(_OWORD *)char v73 = *(_OWORD *)__p;
  uint64_t v74 = v81;
  sub_1000021BC(v93, "dialog");
  siri::dialogengine::JoinPath(__p, v78, v93);
  siri::dialogengine::ListDirRecursively(&v71, __p);
  if (SHIBYTE(v81) < 0) {
    operator delete(__p[0]);
  }
  if (v94 < 0) {
    operator delete(v93[0]);
  }
  std::string::size_type v12 = v71;
  unsigned __int8 v13 = v72;
  while (v12 != v13)
  {
    if (*((char *)v12 + 23) < 0)
    {
      sub_10000231C(__dst, *(void **)v12, *((void *)v12 + 1));
    }

    else
    {
      __int128 v14 = *v12;
      uint64_t v70 = *((void *)v12 + 2);
      *(_OWORD *)std::string __dst = v14;
    }

    unint64_t v15 = v77;
    if ((v77 & 0x80u) != 0) {
      unint64_t v15 = v76;
    }
    if (v15)
    {
      siri::dialogengine::CatPathToId(__p, __dst);
      if (v81 >= 0) {
        __int128 v16 = (void *)HIBYTE(v81);
      }
      else {
        __int128 v16 = __p[1];
      }
      unint64_t v17 = v77;
      if ((v77 & 0x80u) != 0) {
        unint64_t v17 = v76;
      }
      if (v16 != (void *)v17)
      {
        BOOL v24 = 1;
        if ((v81 & 0x8000000000000000LL) == 0) {
          goto LABEL_56;
        }
LABEL_59:
        operator delete(__p[0]);
        if (v24) {
          goto LABEL_181;
        }
        goto LABEL_62;
      }

      if ((v77 & 0x80u) == 0) {
        BOOL v18 = (unsigned __int8 *)&v75;
      }
      else {
        BOOL v18 = (unsigned __int8 *)v75;
      }
      if (v81 < 0)
      {
        __int128 v26 = __p[0];
        int v27 = memcmp(__p[0], v18, (size_t)__p[1]);
        operator delete(v26);
        if (v27) {
          goto LABEL_181;
        }
        goto LABEL_62;
      }

      if (HIBYTE(v81))
      {
        uint64_t v19 = HIBYTE(v81) - 1LL;
        std::string v20 = __p;
        do
        {
          int v22 = *(unsigned __int8 *)v20;
          std::string v20 = (void **)((char *)v20 + 1);
          int v21 = v22;
          int v23 = *v18++;
          BOOL v24 = v21 != v23;
        }

        while (v21 == v23 && v19-- != 0);
        if ((v81 & 0x8000000000000000LL) == 0)
        {
LABEL_56:
          if (v24) {
            goto LABEL_181;
          }
          goto LABEL_62;
        }

        goto LABEL_59;
      }
    }

LABEL_62:
    siri::dialogengine::BaseName(__p, __dst);
    sub_1000021BC(v93, "_params");
    char v28 = siri::dialogengine::StringStartsWith(__p, v93);
    if (v94 < 0) {
      operator delete(v93[0]);
    }
    if (SHIBYTE(v81) < 0)
    {
      operator delete(__p[0]);
      if ((v28 & 1) != 0) {
        goto LABEL_181;
      }
    }

    else if ((v28 & 1) != 0)
    {
      goto LABEL_181;
    }

    sub_1000021BC(__p, "xml");
    if ((siri::dialogengine::HasExtension(__dst, __p) & 1) != 0)
    {
      int HasExtension = 1;
    }

    else
    {
      sub_1000021BC(v93, "bin");
      int HasExtension = siri::dialogengine::HasExtension(__dst, v93);
      if (v94 < 0) {
        operator delete(v93[0]);
      }
    }

    if (SHIBYTE(v81) < 0)
    {
      operator delete(__p[0]);
      if (HasExtension)
      {
LABEL_76:
        if (SHIBYTE(v74) < 0)
        {
          sub_10000231C(v67, v73[0], (unint64_t)v73[1]);
        }

        else
        {
          *(_OWORD *)char v67 = *(_OWORD *)v73;
          uint64_t v68 = v74;
        }

        siri::dialogengine::StringToLower(__p);
        sub_1000021BC(v93, ".cat.bin");
        int v30 = siri::dialogengine::StringEndsWith(__p, v93);
        if (v94 < 0) {
          operator delete(v93[0]);
        }
        if (SHIBYTE(v81) < 0) {
          operator delete(__p[0]);
        }
        sub_1000021BC(v91, "dialog");
        siri::dialogengine::JoinPath(__p, v78, v91);
        siri::dialogengine::JoinPath(v93, __p, __dst);
        if (SHIBYTE(v81) < 0) {
          operator delete(__p[0]);
        }
        if (v92 < 0) {
          operator delete(v91[0]);
        }
        siri::dialogengine::DirName(v91, v93);
        siri::dialogengine::CatPathToId(&v89, v91);
        siri::dialogengine::BaseName(&v85, __dst);
        siri::dialogengine::StringSplit(__p, &v85, ".");
        if (*((char *)__p[0] + 23) < 0)
        {
          sub_10000231C(&v87, *(void **)__p[0], *((void *)__p[0] + 1));
        }

        else
        {
          __int128 v31 = *(_OWORD *)__p[0];
          uint64_t v88 = *((void *)__p[0] + 2);
          __int128 v87 = v31;
        }

        v83[0].__locale_ = (std::locale::__imp *)__p;
        sub_1000027F4((void ***)v83);
        if (SHIBYTE(v86) < 0) {
          operator delete((void *)v85);
        }
        __int128 v85 = 0uLL;
        uint64_t v86 = 0LL;
        sub_1000021BC(&v82, "_params");
        if (v30) {
          int v32 = std::string::append(&v82, ".cat.bin");
        }
        else {
          int v32 = std::string::append(&v82, ".cat.xml");
        }
        __int128 v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        int64_t cap = v32->__r_.__value_.__l.__cap_;
        *(_OWORD *)&v83[0].__locale_ = v33;
        v32->__r_.__value_.__l.__size_ = 0LL;
        v32->__r_.__value_.__l.__cap_ = 0LL;
        v32->__r_.__value_.__r.__words[0] = 0LL;
        siri::dialogengine::JoinPath(__p, v91, v83);
        if (SHIBYTE(v86) < 0) {
          operator delete((void *)v85);
        }
        __int128 v85 = *(_OWORD *)__p;
        uint64_t v86 = v81;
        HIBYTE(v81) = 0;
        LOBYTE(__p[0]) = 0;
        if (SHIBYTE(cap) < 0) {
          operator delete(v83[0].__locale_);
        }
        siri::dialogengine::Context::Context((siri::dialogengine::Context *)__p);
        if ((siri::dialogengine::Context::LoadFiles(__p, &v85, v93) & 1) != 0)
        {
          siri::dialogengine::Context::GetFile((siri::dialogengine::Context *)__p);
          siri::dialogengine::File::GetFormatVersion((siri::dialogengine::File *)v82.__r_.__value_.__l.__data_);
          std::string::size_type size = (std::__shared_weak_count *)v82.__r_.__value_.__l.__size_;
          if (v82.__r_.__value_.__l.__size_)
          {
            std::string::size_type v35 = (unint64_t *)(v82.__r_.__value_.__l.__size_ + 8);
            do
              unint64_t v36 = __ldaxr(v35);
            while (__stlxr(v36 - 1, v35));
            if (!v36)
            {
              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
              std::__shared_weak_count::__release_weak(size);
            }
          }

          if ((siri::dialogengine::Context::UpgradeAndSave(__p, v93, v67) & 1) == 0)
          {
            uint64_t v48 = sub_100002F60(&std::cout, (uint64_t)"Failed to upgrade the CAT file: ", 32LL);
            if (v70 >= 0) {
              std::string::size_type v49 = __dst;
            }
            else {
              std::string::size_type v49 = (void **)__dst[0];
            }
            if (v70 >= 0) {
              uint64_t v50 = HIBYTE(v70);
            }
            else {
              uint64_t v50 = (uint64_t)__dst[1];
            }
            goto LABEL_167;
          }

          uint64_t v37 = HIBYTE(cap);
          if (cap >= 0) {
            locale = (std::locale::__imp *)HIBYTE(cap);
          }
          else {
            locale = v83[1].__locale_;
          }
          int v39 = (std::locale::__imp *)HIBYTE(v68);
          if (v68 < 0) {
            int v39 = (std::locale::__imp *)v67[1];
          }
          if (locale != v39) {
            goto LABEL_137;
          }
          if (v68 >= 0) {
            char v40 = v67;
          }
          else {
            char v40 = (void **)v67[0];
          }
          if (cap < 0)
          {
            if (memcmp(v83[0].__locale_, v40, (size_t)v83[1].__locale_)) {
              goto LABEL_137;
            }
          }

          else if (HIBYTE(cap))
          {
            std::string::size_type v41 = v83;
            while (LOBYTE(v41->__locale_) == *(unsigned __int8 *)v40)
            {
              std::string::size_type v41 = (std::locale *)((char *)v41 + 1);
              char v40 = (void **)((char *)v40 + 1);
              if (!--v37) {
                goto LABEL_155;
              }
            }

LABEL_137:
            __int128 v51 = sub_100002F60(&std::cout, (uint64_t)"Upgraded ", 9LL);
            if (v70 >= 0) {
              int64_t v52 = __dst;
            }
            else {
              int64_t v52 = (void **)__dst[0];
            }
            if (v70 >= 0) {
              uint64_t v53 = HIBYTE(v70);
            }
            else {
              uint64_t v53 = (uint64_t)__dst[1];
            }
            int v54 = sub_100002F60(v51, (uint64_t)v52, v53);
            char v55 = sub_100002F60(v54, (uint64_t)" from version ", 14LL);
            if (cap >= 0) {
              uint64_t v56 = v83;
            }
            else {
              uint64_t v56 = v83[0].__locale_;
            }
            if (cap >= 0) {
              uint64_t v57 = HIBYTE(cap);
            }
            else {
              uint64_t v57 = (uint64_t)v83[1].__locale_;
            }
            uint64_t v58 = sub_100002F60(v55, (uint64_t)v56, v57);
            uint64_t v48 = sub_100002F60(v58, (uint64_t)" to version ", 12LL);
            if (v68 >= 0) {
              std::string::size_type v49 = v67;
            }
            else {
              std::string::size_type v49 = (void **)v67[0];
            }
            if (v68 >= 0) {
              uint64_t v50 = HIBYTE(v68);
            }
            else {
              uint64_t v50 = (uint64_t)v67[1];
            }
LABEL_167:
            __int128 v63 = sub_100002F60(v48, (uint64_t)v49, v50);
            std::ios_base::getloc((const std::ios_base *)((char *)v63 + *(void *)(*v63 - 24LL)));
            std::string v64 = std::locale::use_facet((const std::locale *)&v82, &std::ctype<char>::id);
            uint64_t v65 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v64->__vftable[2].~facet_0)(v64, 10LL);
            std::locale::~locale((std::locale *)&v82);
            std::ostream::put(v63, v65);
            std::ostream::flush(v63);
            if (SHIBYTE(cap) < 0) {
              operator delete(v83[0].__locale_);
            }
LABEL_169:
            siri::dialogengine::Context::~Context((siri::dialogengine::Context *)__p);
            if (SHIBYTE(v86) < 0) {
              operator delete((void *)v85);
            }
            if (SHIBYTE(v88) < 0) {
              operator delete((void *)v87);
            }
            if (v90 < 0) {
              operator delete(v89);
            }
            if (v92 < 0) {
              operator delete(v91[0]);
            }
            if (v94 < 0) {
              operator delete(v93[0]);
            }
            if (SHIBYTE(v68) < 0) {
              operator delete(v67[0]);
            }
            goto LABEL_181;
          }

LABEL_155:
          unint64_t v59 = sub_100002F60(&std::cout, (uint64_t)"Skipping ", 9LL);
          if (v70 >= 0) {
            unsigned __int8 v60 = __dst;
          }
          else {
            unsigned __int8 v60 = (void **)__dst[0];
          }
          if (v70 >= 0) {
            uint64_t v61 = HIBYTE(v70);
          }
          else {
            uint64_t v61 = (uint64_t)__dst[1];
          }
          unint64_t v62 = sub_100002F60(v59, (uint64_t)v60, v61);
          uint64_t v48 = sub_100002F60(v62, (uint64_t)" - already version ", 19LL);
          if (v68 >= 0) {
            std::string::size_type v49 = v67;
          }
          else {
            std::string::size_type v49 = (void **)v67[0];
          }
          if (v68 >= 0) {
            uint64_t v50 = HIBYTE(v68);
          }
          else {
            uint64_t v50 = (uint64_t)v67[1];
          }
          goto LABEL_167;
        }

        char v42 = sub_100002F60(&std::cout, (uint64_t)"Unable to read CAT file from: ", 30LL);
        if (v70 >= 0) {
          unint64_t v43 = __dst;
        }
        else {
          unint64_t v43 = (void **)__dst[0];
        }
        if (v70 >= 0) {
          uint64_t v44 = HIBYTE(v70);
        }
        else {
          uint64_t v44 = (uint64_t)__dst[1];
        }
        std::string v45 = sub_100002F60(v42, (uint64_t)v43, v44);
        std::ios_base::getloc((const std::ios_base *)((char *)v45 + *(void *)(*v45 - 24LL)));
        __int128 v46 = std::locale::use_facet(v83, &std::ctype<char>::id);
        uint64_t v47 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v46->__vftable[2].~facet_0)(v46, 10LL);
        std::locale::~locale(v83);
        std::ostream::put(v45, v47);
        std::ostream::flush(v45);
        goto LABEL_169;
      }
    }

    else if (HasExtension)
    {
      goto LABEL_76;
    }

void sub_100048DC4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, char a22, uint64_t a23, uint64_t a24, void *a25, uint64_t a26, int a27, __int16 a28, char a29, char a30, uint64_t a31, void *a32, uint64_t a33, int a34, __int16 a35, char a36, char a37, void *a38, uint64_t a39, int a40, __int16 a41, char a42, char a43, void *a44)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  *(void *)(v44 - 160) = &a22;
  sub_1000027F4((void ***)(v44 - 160));
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  if (a43 < 0) {
    operator delete(a38);
  }
  _Unwind_Resume(a1);
}

void sub_1000490F0(uint64_t a1)
{
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_100049164( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100049198(__int128 **a1, uint64_t a2)
{
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  uint64_t v10 = 0LL;
  sub_100002594((char *)&v8, *a1, a1[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 3));
  uint64_t v4 = (void *)(v8 + 48);
  int v5 = *(char *)(v8 + 71);
  if (v5 < 0)
  {
    if (*(void *)(v8 + 56) != 8LL) {
      goto LABEL_9;
    }
    uint64_t v4 = (void *)*v4;
  }

  else if (v5 != 8)
  {
    goto LABEL_9;
  }

  if (*v4 == 0x65746164696C6176LL)
  {
    BOOL v6 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v8) >> 3) > 2;
    goto LABEL_14;
  }

void sub_1000492F0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20, int a21, __int16 a22, char a23, char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  std::stringbuf::string_type __p = &a10;
  sub_1000027F4((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_10004933C(_BYTE *a1, const char *a2)
{
  char v2 = (char)a2;
  uint64_t v4 = "false";
  if ((_DWORD)a2) {
    uint64_t v4 = "true";
  }
  uint64_t result = siri::dialogengine::Log::Info((siri::dialogengine::Log *)"ValidationContext::SetErrorsMode(%s)", a2, v4);
  *a1 = v2;
  return result;
}

uint64_t sub_100049390(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t sub_100049398(uint64_t a1, const char *a2)
{
  char v2 = (char)a2;
  uint64_t v4 = "false";
  if ((_DWORD)a2) {
    uint64_t v4 = "true";
  }
  uint64_t result = siri::dialogengine::Log::Info((siri::dialogengine::Log *)"ValidationContext::SetPedanticMode(%s)", a2, v4);
  *(_BYTE *)(a1 + 1) = v2;
  return result;
}

BOOL sub_1000493EC(_BYTE *a1)
{
  return !*a1 && a1[1] != 0;
}

uint64_t sub_10004940C(uint64_t a1, const char *a2)
{
  char v2 = (char)a2;
  uint64_t v4 = "false";
  if ((_DWORD)a2) {
    uint64_t v4 = "true";
  }
  uint64_t result = siri::dialogengine::Log::Info((siri::dialogengine::Log *)"ValidationContext::SetQuietMode(%s)", a2, v4);
  *(_BYTE *)(a1 + 2) = v2;
  return result;
}

uint64_t sub_100049460(uint64_t a1, const char *a2)
{
  char v2 = (char)a2;
  uint64_t v4 = "false";
  if ((_DWORD)a2) {
    uint64_t v4 = "true";
  }
  uint64_t result = siri::dialogengine::Log::Info((siri::dialogengine::Log *)"ValidationContext::SetXcodeMode(%s)", a2, v4);
  *(_BYTE *)(a1 + 3) = v2;
  return result;
}

uint64_t sub_1000494B4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 3);
}

uint64_t sub_1000494BC(uint64_t a1, const char *a2)
{
  char v2 = (char)a2;
  uint64_t v4 = "false";
  if ((_DWORD)a2) {
    uint64_t v4 = "true";
  }
  uint64_t result = siri::dialogengine::Log::Info( (siri::dialogengine::Log *)"ValidationContext::SetCheckSnippetDialogIds(%s)",  a2,  v4);
  *(_BYTE *)(a1 + 4) = v2;
  return result;
}

uint64_t sub_100049510(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 4);
}

void sub_100049518(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100049534(uint64_t a1)
{
  return a1 + 8;
}

BOOL sub_10004953C(_BYTE *a1, uint64_t a2, const void **a3, unint64_t a4)
{
  return sub_100049550(a1, 3, a2, a3, a4);
}

BOOL sub_100049550(_BYTE *a1, int a2, uint64_t a3, const void **a4, unint64_t a5)
{
  switch(a2)
  {
    case 0:
      if (!a1[2] && !a1[3])
      {
        int v9 = *(char *)(a3 + 23);
        if (v9 >= 0) {
          uint64_t v10 = a3;
        }
        else {
          uint64_t v10 = *(void *)a3;
        }
        if (v9 >= 0) {
          uint64_t v11 = *(unsigned __int8 *)(a3 + 23);
        }
        else {
          uint64_t v11 = *(void *)(a3 + 8);
        }
        char v12 = sub_100002F60(&std::cout, v10, v11);
        std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(*v12 - 24LL)));
        unsigned __int8 v13 = std::locale::use_facet(v38, &std::ctype<char>::id);
        uint64_t v14 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10LL);
        std::locale::~locale(v38);
        std::ostream::put(v12, v14);
        goto LABEL_61;
      }

      break;
    case 1:
      if (!*a1 && a1[1])
      {
        unint64_t v15 = a1 + 40;
        __int128 v16 = "nit";
        goto LABEL_17;
      }

      break;
    case 2:
      if (!*a1)
      {
        unint64_t v15 = a1 + 48;
        __int128 v16 = "warning";
        goto LABEL_17;
      }

      break;
    case 3:
      unint64_t v15 = a1 + 56;
      __int128 v16 = "error";
LABEL_17:
      ++*v15;
      std::string::assign(&v40, v16);
      if (!a1[2])
      {
        else {
          size_t v17 = (size_t)a4[1];
        }
        if (v17)
        {
          sub_100007A0C((uint64_t)v38, v17 + 1);
          if (cap >= 0) {
            locale = (char *)v38;
          }
          else {
            locale = (char *)v38[0].__locale_;
          }
          else {
            uint64_t v19 = *a4;
          }
          memmove(locale, v19, v17);
          *(_WORD *)&locale[v17] = 58;
          if (cap >= 0) {
            std::string v20 = v38;
          }
          else {
            std::string v20 = v38[0].__locale_;
          }
          if (cap >= 0) {
            uint64_t v21 = HIBYTE(cap);
          }
          else {
            uint64_t v21 = (uint64_t)v38[1].__locale_;
          }
          sub_100002F60(&std::cout, (uint64_t)v20, v21);
          if (SHIBYTE(cap) < 0) {
            operator delete(v38[0].__locale_);
          }
          if (a5)
          {
            std::to_string(&v37, a5);
            int v22 = std::string::append(&v37, ":");
            __int128 v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
            int64_t cap = v22->__r_.__value_.__l.__cap_;
            *(_OWORD *)&v38[0].__locale_ = v23;
            v22->__r_.__value_.__l.__size_ = 0LL;
            v22->__r_.__value_.__l.__cap_ = 0LL;
            v22->__r_.__value_.__r.__words[0] = 0LL;
            if (cap >= 0) {
              BOOL v24 = v38;
            }
            else {
              BOOL v24 = v38[0].__locale_;
            }
            if (cap >= 0) {
              uint64_t v25 = HIBYTE(cap);
            }
            else {
              uint64_t v25 = (uint64_t)v38[1].__locale_;
            }
            sub_100002F60(&std::cout, (uint64_t)v24, v25);
            if (SHIBYTE(cap) < 0) {
              operator delete(v38[0].__locale_);
            }
          }

          sub_100002F60(&std::cout, (uint64_t)" ", 1LL);
        }

        if ((v40.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          __int128 v26 = &v40;
        }
        else {
          __int128 v26 = (std::string *)v40.__r_.__value_.__r.__words[0];
        }
        if ((v40.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t size = v40.__r_.__value_.__s.__size_;
        }
        else {
          uint64_t size = v40.__r_.__value_.__l.__size_;
        }
        char v28 = sub_100002F60(&std::cout, (uint64_t)v26, size);
        BOOL v29 = sub_100002F60(v28, (uint64_t)": ", 2LL);
        int v30 = *(char *)(a3 + 23);
        if (v30 >= 0) {
          uint64_t v31 = a3;
        }
        else {
          uint64_t v31 = *(void *)a3;
        }
        if (v30 >= 0) {
          uint64_t v32 = *(unsigned __int8 *)(a3 + 23);
        }
        else {
          uint64_t v32 = *(void *)(a3 + 8);
        }
        char v12 = sub_100002F60(v29, v31, v32);
        std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(*v12 - 24LL)));
        __int128 v33 = std::locale::use_facet(v38, &std::ctype<char>::id);
        uint64_t v34 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v33->__vftable[2].~facet_0)(v33, 10LL);
        std::locale::~locale(v38);
        std::ostream::put(v12, v34);
LABEL_61:
        std::ostream::flush(v12);
      }

      break;
    default:
      break;
  }

  BOOL v35 = sub_1000499CC((uint64_t)a1);
  return v35;
}

void sub_1000498A4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100049920(_BYTE *a1, uint64_t a2, const void **a3, unint64_t a4)
{
  return sub_100049550(a1, 2, a2, a3, a4);
}

BOOL sub_100049934(_BYTE *a1, uint64_t a2, const void **a3, unint64_t a4)
{
  return sub_100049550(a1, 1, a2, a3, a4);
}

BOOL sub_100049948(_BYTE *a1, uint64_t a2)
{
  BOOL v4 = sub_100049550(a1, 0, a2, (const void **)__p, 0LL);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  return v4;
}

void sub_1000499B0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1000499CC(uint64_t a1)
{
  return !*(void *)(a1 + 56)
      && (*(_BYTE *)a1 || *(_BYTE *)(a1 + 3) || !*(void *)(a1 + 48) && (!*(_BYTE *)(a1 + 1) || !*(void *)(a1 + 40)));
}

void sub_100049A10(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (*(_BYTE *)(a1 + 24)) {
      sub_100038430(a1, (void *)a2);
    }
  }

  else if (*(_BYTE *)(a1 + 24))
  {
    sub_100009064(a1, *(char **)(a1 + 8));
    *(_BYTE *)(a1 + 24) = 0;
  }

  else
  {
    *(void *)a1 = *(void *)a2;
    char v3 = (void *)(a2 + 8);
    uint64_t v4 = *(void *)(a2 + 8);
    *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v4;
    uint64_t v5 = a1 + 8;
    uint64_t v6 = *(void *)(a2 + 16);
    *(void *)(a1 + 16) = v6;
    if (v6)
    {
      *(void *)(v4 + 16) = v5;
      *(void *)a2 = v3;
      void *v3 = 0LL;
      *(void *)(a2 + 16) = 0LL;
    }

    else
    {
      *(void *)a1 = v5;
    }

    *(_BYTE *)(a1 + 24) = 1;
  }

void *sub_100049AA8@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, void *a3@<X8>)
{
  uint64_t result = (void *)sub_100008EC0(a1 + 48, a2);
  if ((void *)(a1 + 56) == result) {
    return sub_1000021BC(a3, (char *)&unk_10006A022);
  }
  __int128 v6 = *(_OWORD *)(result + 7);
  a3[2] = result[9];
  *(_OWORD *)a3 = v6;
  return result;
}

void sub_100049B24(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
  {
    **(_BYTE **)a1 = 0;
    *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
  }

  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 23) = 0;
  }

  if (*(char *)(a1 + 47) < 0)
  {
    **(_BYTE **)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0LL;
  }

  else
  {
    *(_BYTE *)(a1 + 24) = 0;
    *(_BYTE *)(a1 + 4memset(v42, 0, 7) = 0;
  }

  sub_100028914(a1 + 48, *(void **)(a1 + 56));
  *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = a1 + 56;
  *(void *)(a1 + 56) = 0LL;
  char v3 = *(char **)(a1 + 80);
  char v2 = (void *)(a1 + 80);
  *(v2 - 2) = 0LL;
  sub_100009064((uint64_t)(v2 - 1), v3);
  *(v2 - 1) = v2;
  *char v2 = 0LL;
  v2[1] = 0LL;
}

void sub_100049BB0(uint64_t **a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10000231C(__p, *(void **)a2, *(void *)(a2 + 8));
  }

  else
  {
    *(_OWORD *)std::stringbuf::string_type __p = *(_OWORD *)a2;
    uint64_t v6 = *(void *)(a2 + 16);
  }

  char v7 = __p;
  uint64_t v4 = sub_10004DB08(a1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v7);
  std::string::operator=((std::string *)((char *)v4 + 56), (const std::string *)a2);
  std::string::operator=((std::string *)(v4 + 5), (const std::string *)(a2 + 24));
  if ((_OWORD *)((char *)v4 + 56) != (_OWORD *)a2)
  {
    sub_10004D7F4((uint64_t **)v4 + 13, *(__int128 **)(a2 + 48), (__int128 *)(a2 + 56));
    sub_100035CE8((uint64_t **)v4 + 16, *(void **)(a2 + 72), (void *)(a2 + 80));
  }

  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
}

void sub_100049C84( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100049CA0(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Null config passed to ReadCodegenConfigFile", 0LL);
    return 0LL;
  }

  char v2 = (void *)(a2 + 8);
  sub_10004DA54(a2, *(void **)(a2 + 8));
  *(void *)a2 = v2;
  *(void *)(a2 + 16) = 0LL;
  *char v2 = 0LL;
  uint64_t v5 = *(unsigned __int8 *)(a1 + 23);
  if ((v5 & 0x80u) != 0LL) {
    uint64_t v5 = *(void *)(a1 + 8);
  }
  if (!v5)
  {
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"No codegen config file specified", v4);
    return 1LL;
  }

  if ((siri::dialogengine::FileExists(a1) & 1) == 0)
  {
    uint64_t v11 = sub_100002F60(&std::cout, (uint64_t)"Error: Cannot find codegen config file: ", 40LL);
    int v12 = *(char *)(a1 + 23);
    if (v12 >= 0) {
      uint64_t v13 = a1;
    }
    else {
      uint64_t v13 = *(void *)a1;
    }
    if (v12 >= 0) {
      uint64_t v14 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v14 = *(void *)(a1 + 8);
    }
    unint64_t v15 = sub_100002F60(v11, v13, v14);
    std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24LL)));
    __int128 v16 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
    uint64_t v17 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10LL);
    std::locale::~locale((std::locale *)__p);
    std::ostream::put(v15, v17);
    std::ostream::flush(v15);
    return 0LL;
  }

  v251[0] = 1;
  __int128 v252 = 0u;
  __int128 v253 = 0u;
  __int128 v254 = 0u;
  memset(v243, 0, sizeof(v243));
  __int128 v244 = 0u;
  uint64_t v246 = 0LL;
  __int128 v245 = (uint64_t *)&v246;
  uint64_t v250 = 0LL;
  __int128 v249 = 0LL;
  uint64_t v247 = 0LL;
  char v248 = &v249;
  YAML::LoadFile(a1, (uint64_t)__p);
  sub_10003CFC4(v251, __p);
  uint64_t v6 = v221;
  if (v221)
  {
    p_shared_owners = (unint64_t *)&v221->__shared_owners_;
    do
      unint64_t v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

  if (SHIBYTE(v220) < 0) {
    operator delete(__p[1]);
  }
  sub_10004BBF0((uint64_t)v251, "enums", (uint64_t)__p);
  BOOL v9 = !LOBYTE(__p[0]) || v222 && !***v222;
  uint64_t v19 = v221;
  if (v221)
  {
    std::string v20 = (unint64_t *)&v221->__shared_owners_;
    do
      unint64_t v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }

  if (SHIBYTE(v220) < 0)
  {
    operator delete(__p[1]);
    if (v9) {
      goto LABEL_36;
    }
LABEL_38:
    sub_10004BBF0((uint64_t)v251, "enums", (uint64_t)v237);
    if (v237[0] && v242)
    {
      YAML::detail::node_data::begin(**v242, (uint64_t)__p);
      uint64_t v25 = v240;
      __int128 v26 = v241;
      if (v241)
      {
        int v27 = (unint64_t *)&v241->__shared_owners_;
        do
          unint64_t v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
        *(_OWORD *)BOOL v235 = *(_OWORD *)__p;
        *(_OWORD *)&v235[16] = v220;
        *(void *)&v235[32] = v25;
        std::string::size_type v236 = v26;
        do
          unint64_t v29 = __ldxr(v27);
        while (__stxr(v29 + 1, v27));
        do
          unint64_t v30 = __ldaxr(v27);
        while (__stlxr(v30 - 1, v27));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }

LABEL_50:
        if (v237[0] && v242)
        {
          YAML::detail::node_data::end(**v242, (uint64_t)__p);
          uint64_t v31 = v240;
          uint64_t v32 = v241;
          if (v241)
          {
            __int128 v33 = (unint64_t *)&v241->__shared_owners_;
            do
              unint64_t v34 = __ldxr(v33);
            while (__stxr(v34 + 1, v33));
            *(_OWORD *)v233 = *(_OWORD *)__p;
            *(_OWORD *)&v233[16] = v220;
            *(void *)&v233[32] = v31;
            __int128 v234 = v32;
            do
              unint64_t v35 = __ldxr(v33);
            while (__stxr(v35 + 1, v33));
            do
              unint64_t v36 = __ldaxr(v33);
            while (__stlxr(v36 - 1, v33));
            if (!v36)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }

            while (1)
            {
LABEL_62:
              if (*(_DWORD *)v235 == *(_DWORD *)v233)
              {
                unint64_t v38 = &v233[8];
                std::string v37 = &v235[8];
                if (*(_DWORD *)v235 != 1)
                {
                  if (*(_DWORD *)v235 != 2) {
                    goto LABEL_355;
                  }
                  unint64_t v38 = &v233[16];
                  std::string v37 = &v235[16];
                }

                if (*(void *)v37 == *(void *)v38)
                {
LABEL_355:
                  int v157 = v234;
                  if (v234)
                  {
                    int v158 = (unint64_t *)&v234->__shared_owners_;
                    do
                      unint64_t v159 = __ldaxr(v158);
                    while (__stlxr(v159 - 1, v158));
                    if (!v159)
                    {
                      ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
                      std::__shared_weak_count::__release_weak(v157);
                    }
                  }

                  __int128 v160 = v236;
                  if (v236)
                  {
                    int v161 = (unint64_t *)&v236->__shared_owners_;
                    do
                      unint64_t v162 = __ldaxr(v161);
                    while (__stlxr(v162 - 1, v161));
                    if (!v162)
                    {
                      ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
                      std::__shared_weak_count::__release_weak(v160);
                    }
                  }

                  int v163 = v241;
                  if (v241)
                  {
                    int v164 = (unint64_t *)&v241->__shared_owners_;
                    do
                      unint64_t v165 = __ldaxr(v164);
                    while (__stlxr(v165 - 1, v164));
                    if (!v165)
                    {
                      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
                      std::__shared_weak_count::__release_weak(v163);
                    }
                  }

                  if (v239 < 0) {
                    operator delete(v238);
                  }
                  goto LABEL_372;
                }
              }

              sub_10003D2E8((uint64_t)v235, (uint64_t)__p);
              if (!v223)
              {
                exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
                if (SHIBYTE(v225) < 0)
                {
                  sub_10000231C(v202, (void *)v224, *((unint64_t *)&v224 + 1));
                }

                else
                {
                  *(_OWORD *)std::string::size_type v202 = v224;
                  *(void *)&__int128 v203 = v225;
                }

                sub_10004120C(exception, (uint64_t)v202);
              }

              v202[0] = &v223;
              sub_1000452D8((uint64_t *)v202, (uint64_t)&__str);
              std::string::operator=((std::string *)v243, (const std::string *)&__str);
              if (SBYTE7(__str_16) < 0) {
                operator delete((void *)__str);
              }
              if (!v227)
              {
                *(_DWORD *)std::string v217 = 0;
                memset(&v217[8], 0, 32);
                unint64_t v218 = 0LL;
LABEL_93:
                *(_DWORD *)unint64_t v215 = 0;
                memset(&v215[8], 0, 32);
                v216 = 0LL;
                goto LABEL_94;
              }

              if (v232)
              {
                YAML::detail::node_data::begin(**v232, (uint64_t)v202);
                uint64_t v39 = v230;
                std::string v40 = v231;
                if (v231)
                {
                  std::string::size_type v41 = (unint64_t *)&v231->__shared_owners_;
                  do
                    unint64_t v42 = __ldxr(v41);
                  while (__stxr(v42 + 1, v41));
                  *(_OWORD *)std::string v217 = *(_OWORD *)v202;
                  *(_OWORD *)&v217[16] = v203;
                  *(void *)&v217[32] = v39;
                  unint64_t v218 = v40;
                  do
                    unint64_t v43 = __ldxr(v41);
                  while (__stxr(v43 + 1, v41));
                  do
                    unint64_t v44 = __ldaxr(v41);
                  while (__stlxr(v44 - 1, v41));
                  if (!v44)
                  {
                    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                    std::__shared_weak_count::__release_weak(v40);
                  }
                }

                else
                {
                  *(_OWORD *)std::string v217 = *(_OWORD *)v202;
                  *(_OWORD *)&v217[16] = v203;
                  *(void *)&v217[32] = v230;
                  unint64_t v218 = 0LL;
                }
              }

              else
              {
                *(_DWORD *)std::string v217 = 0;
                memset(&v217[8], 0, 32);
                unint64_t v218 = 0LL;
              }

              if (!v227 || !v232) {
                goto LABEL_93;
              }
              YAML::detail::node_data::end(**v232, (uint64_t)v202);
              uint64_t v45 = v230;
              __int128 v46 = v231;
              if (v231)
              {
                uint64_t v47 = (unint64_t *)&v231->__shared_owners_;
                do
                  unint64_t v48 = __ldxr(v47);
                while (__stxr(v48 + 1, v47));
                *(_OWORD *)unint64_t v215 = *(_OWORD *)v202;
                *(_OWORD *)&v215[16] = v203;
                *(void *)&v215[32] = v45;
                v216 = v46;
                do
                  unint64_t v49 = __ldxr(v47);
                while (__stxr(v49 + 1, v47));
                do
                  unint64_t v50 = __ldaxr(v47);
                while (__stlxr(v50 - 1, v47));
                if (!v50)
                {
                  ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                  std::__shared_weak_count::__release_weak(v46);
                }
              }

              else
              {
                *(_OWORD *)unint64_t v215 = *(_OWORD *)v202;
                *(_OWORD *)&v215[16] = v203;
                *(void *)&v215[32] = v230;
                v216 = 0LL;
              }

LABEL_94:
              while (1)
              {
                if (*(_DWORD *)v217 == *(_DWORD *)v215)
                {
                  __int128 v51 = &v217[8];
                  int64_t v52 = &v215[8];
                  if (*(_DWORD *)v217 != 1)
                  {
                    if (*(_DWORD *)v217 != 2) {
                      break;
                    }
                    int64_t v52 = &v215[16];
                    __int128 v51 = &v217[16];
                  }

                  if (*(void *)v51 == *(void *)v52) {
                    break;
                  }
                }

                sub_10003D658((uint64_t)v217, (uint64_t)v202);
                if (!v205)
                {
                  unint64_t v177 = __cxa_allocate_exception(0x38uLL);
                  if (SHIBYTE(v207) < 0)
                  {
                    sub_10000231C(&__str, (void *)__src, *((unint64_t *)&__src + 1));
                  }

                  else
                  {
                    __int128 __str = __src;
                    *(void *)&__int128 __str_16 = v207;
                  }

                  sub_10004120C(v177, (uint64_t)&__str);
                }

                *(void *)&__int128 __str = &v205;
                sub_1000452D8((uint64_t *)&__str, (uint64_t)&v199);
                if ((v201 & 0x80) != 0)
                {
                  uint64_t v54 = v200;
                  if (v200 == 4 && *(_DWORD *)v199 == 1701667182) {
                    goto LABEL_149;
                  }
                  if (v200 != 5) {
                    goto LABEL_113;
                  }
                  if (*(_DWORD *)v199 == 1702060387 && *((_BYTE *)v199 + 4) == 115) {
                    goto LABEL_138;
                  }
                  uint64_t v54 = v200;
LABEL_113:
                  if (v54 != 17) {
                    goto LABEL_152;
                  }
                  uint64_t v53 = (uint64_t *)v199;
LABEL_115:
                  uint64_t v56 = *v53;
                  uint64_t v57 = v53[1];
                  int v58 = *((unsigned __int8 *)v53 + 16);
                  BOOL v59 = v56 == 0x6E696C7466697773LL && v57 == 0x676E696E72615774LL;
                  if (!v59 || v58 != 115)
                  {
LABEL_152:
                    uint64_t v74 = sub_100002F60(&std::cout, (uint64_t)"Warning: Invalid data in YAML file: ", 36LL);
                    if ((v201 & 0x80u) == 0) {
                      unint64_t v75 = &v199;
                    }
                    else {
                      unint64_t v75 = v199;
                    }
                    if ((v201 & 0x80u) == 0) {
                      uint64_t v76 = v201;
                    }
                    else {
                      uint64_t v76 = v200;
                    }
                    unsigned __int8 v77 = sub_100002F60(v74, (uint64_t)v75, v76);
                    std::ios_base::getloc((const std::ios_base *)((char *)v77 + *(void *)(*v77 - 24LL)));
                    std::string v78 = std::locale::use_facet((const std::locale *)&__str, &std::ctype<char>::id);
                    uint64_t v79 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v78->__vftable[2].~facet_0)( v78,  10LL);
                    std::locale::~locale((std::locale *)&__str);
                    std::ostream::put(v77, v79);
                    std::ostream::flush(v77);
                    goto LABEL_159;
                  }

                  if (v209)
                  {
                    if (v214)
                    {
                      YAML::detail::node_data::begin(**v214, (uint64_t)&__str);
                      uint64_t v61 = v212;
                      unint64_t v62 = v213;
                      if (v213)
                      {
                        __int128 v63 = (unint64_t *)&v213->__shared_owners_;
                        do
                          unint64_t v64 = __ldxr(v63);
                        while (__stxr(v64 + 1, v63));
                        *(_OWORD *)int v197 = __str;
                        *(_OWORD *)&v197[16] = __str_16;
                        *(void *)&v197[32] = v61;
                        char v198 = v62;
                        do
                          unint64_t v65 = __ldxr(v63);
                        while (__stxr(v65 + 1, v63));
                        do
                          unint64_t v66 = __ldaxr(v63);
                        while (__stlxr(v66 - 1, v63));
                        if (!v66)
                        {
                          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                          std::__shared_weak_count::__release_weak(v62);
                        }
                      }

                      else
                      {
                        *(_OWORD *)int v197 = __str;
                        *(_OWORD *)&v197[16] = __str_16;
                        *(void *)&v197[32] = v212;
                        char v198 = 0LL;
                      }
                    }

                    else
                    {
                      *(_DWORD *)int v197 = 0;
                      memset(&v197[8], 0, 32);
                      char v198 = 0LL;
                    }

                    if (v209 && v214)
                    {
                      YAML::detail::node_data::end(**v214, (uint64_t)&__str);
                      uint64_t v113 = v212;
                      BOOL v114 = v213;
                      if (v213)
                      {
                        char v115 = (unint64_t *)&v213->__shared_owners_;
                        do
                          unint64_t v116 = __ldxr(v115);
                        while (__stxr(v116 + 1, v115));
                        *(_OWORD *)__int128 v195 = __str;
                        *(_OWORD *)&v195[16] = __str_16;
                        *(void *)&v195[32] = v113;
                        uint64_t v196 = v114;
                        do
                          unint64_t v117 = __ldxr(v115);
                        while (__stxr(v117 + 1, v115));
                        do
                          unint64_t v118 = __ldaxr(v115);
                        while (__stlxr(v118 - 1, v115));
                        if (!v118)
                        {
                          ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
                          std::__shared_weak_count::__release_weak(v114);
                        }
                      }

                      else
                      {
                        *(_OWORD *)__int128 v195 = __str;
                        *(_OWORD *)&v195[16] = __str_16;
                        *(void *)&v195[32] = v212;
                        uint64_t v196 = 0LL;
                      }

                      while (1)
                      {
LABEL_253:
                        if (*(_DWORD *)v197 == *(_DWORD *)v195)
                        {
                          uint64_t v119 = &v197[8];
                          __int128 v120 = &v195[8];
                          if (*(_DWORD *)v197 != 1)
                          {
                            if (*(_DWORD *)v197 != 2) {
                              goto LABEL_297;
                            }
                            uint64_t v119 = &v197[16];
                            __int128 v120 = &v195[16];
                          }

                          if (*(void *)v119 == *(void *)v120)
                          {
LABEL_297:
                            uint64_t v134 = v196;
                            if (v196)
                            {
                              char v135 = (unint64_t *)&v196->__shared_owners_;
                              do
                                unint64_t v136 = __ldaxr(v135);
                              while (__stlxr(v136 - 1, v135));
                              if (!v136)
                              {
                                ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
                                std::__shared_weak_count::__release_weak(v134);
                              }
                            }

                            char v110 = v198;
                            if (v198)
                            {
                              char v137 = (unint64_t *)&v198->__shared_owners_;
                              do
                                unint64_t v112 = __ldaxr(v137);
                              while (__stlxr(v112 - 1, v137));
LABEL_305:
                              if (!v112)
                              {
                                ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                                std::__shared_weak_count::__release_weak(v110);
                              }
                            }

                            goto LABEL_159;
                          }
                        }

                        sub_10003D658((uint64_t)v197, (uint64_t)&__str);
                        if (!v187)
                        {
                          unint64_t v175 = __cxa_allocate_exception(0x38uLL);
                          if (SHIBYTE(v189) < 0)
                          {
                            sub_10000231C(&__dst, (void *)v188, *((unint64_t *)&v188 + 1));
                          }

                          else
                          {
                            __int128 __dst = v188;
                            uint64_t v256 = v189;
                          }

                          sub_10004120C(v175, (uint64_t)&__dst);
                        }

                        *(void *)&__int128 __dst = &v187;
                        sub_1000452D8((uint64_t *)&__dst, (uint64_t)v182);
                        if (!v191)
                        {
                          unint64_t v176 = __cxa_allocate_exception(0x38uLL);
                          if (SHIBYTE(v193) < 0)
                          {
                            sub_10000231C(&__dst, (void *)v192, *((unint64_t *)&v192 + 1));
                          }

                          else
                          {
                            __int128 __dst = v192;
                            uint64_t v256 = v193;
                          }

                          sub_10004120C(v176, (uint64_t)&__dst);
                        }

                        *(void *)&__int128 __dst = &v191;
                        sub_1000452D8((uint64_t *)&__dst, (uint64_t)&v181);
                        if (v183 < 0)
                        {
                          uint64_t v121 = (void **)v182[0];
                        }

                        else
                        {
                          if (v183 != 7) {
                            goto LABEL_271;
                          }
                          uint64_t v121 = v182;
                        }

                        int v122 = *(_DWORD *)v121;
                        int v123 = *(_DWORD *)((char *)v121 + 3);
                        if (v122 == 1634953572 && v123 == 1701601889) {
                          sub_100008F4C( (uint64_t **)&v248,  (const void **)&v181.__r_.__value_.__l.__data_,  (uint64_t)&v181);
                        }
LABEL_271:
                        if (v183 < 0) {
                          operator delete(v182[0]);
                        }
                        uint64_t v125 = v194;
                        if (v194)
                        {
                          __int128 v126 = (unint64_t *)&v194->__shared_owners_;
                          do
                            unint64_t v127 = __ldaxr(v126);
                          while (__stlxr(v127 - 1, v126));
                          if (!v127)
                          {
                            ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                            std::__shared_weak_count::__release_weak(v125);
                          }
                        }

                        if (SHIBYTE(v193) < 0) {
                          operator delete((void *)v192);
                        }
                        unint64_t v128 = v190;
                        if (v190)
                        {
                          std::string v129 = (unint64_t *)&v190->__shared_owners_;
                          do
                            unint64_t v130 = __ldaxr(v129);
                          while (__stlxr(v130 - 1, v129));
                          if (!v130)
                          {
                            ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                            std::__shared_weak_count::__release_weak(v128);
                          }
                        }

                        if (SHIBYTE(v189) < 0) {
                          operator delete((void *)v188);
                        }
                        unsigned __int8 v131 = v186;
                        if (v186)
                        {
                          std::string v132 = (unint64_t *)&v186->__shared_owners_;
                          do
                            unint64_t v133 = __ldaxr(v132);
                          while (__stlxr(v133 - 1, v132));
                          if (!v133)
                          {
                            ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
                            std::__shared_weak_count::__release_weak(v131);
                          }
                        }

                        if (SHIBYTE(__str_16) < 0) {
                          operator delete(*((void **)&__str + 1));
                        }
                        sub_100044EB4((uint64_t)v197);
                      }
                    }
                  }

                  else
                  {
                    *(_DWORD *)int v197 = 0;
                    memset(&v197[8], 0, 32);
                    char v198 = 0LL;
                  }

                  *(_DWORD *)__int128 v195 = 0;
                  memset(&v195[8], 0, 32);
                  uint64_t v196 = 0LL;
                  goto LABEL_253;
                }

                if (v201 == 4)
                {
                  if ((_DWORD)v199 == 1701667182)
                  {
LABEL_149:
                    if (!v209)
                    {
                      uint64_t v178 = __cxa_allocate_exception(0x38uLL);
                      if (SHIBYTE(v211) < 0)
                      {
                        sub_10000231C(&__str, (void *)v210, *((unint64_t *)&v210 + 1));
                      }

                      else
                      {
                        __int128 __str = v210;
                        *(void *)&__int128 __str_16 = v211;
                      }

                      sub_10004120C(v178, (uint64_t)&__str);
                    }

                    *(void *)&__int128 __str = &v209;
                    sub_1000452D8((uint64_t *)&__str, (uint64_t)v197);
                    std::string::operator=((std::string *)&v243[24], (const std::string *)v197);
                    if ((v197[23] & 0x80000000) != 0) {
                      operator delete(*(void **)v197);
                    }
                    goto LABEL_159;
                  }

                  goto LABEL_152;
                }

                if (v201 != 5)
                {
                  if (v201 == 17)
                  {
                    uint64_t v53 = (uint64_t *)&v199;
                    goto LABEL_115;
                  }

                  goto LABEL_152;
                }

                if ((_DWORD)v199 != 1702060387 || BYTE4(v199) != 115) {
                  goto LABEL_152;
                }
LABEL_138:
                if (!v209)
                {
                  *(_DWORD *)int v197 = 0;
                  memset(&v197[8], 0, 32);
                  char v198 = 0LL;
LABEL_198:
                  *(_DWORD *)__int128 v195 = 0;
                  memset(&v195[8], 0, 32);
                  uint64_t v196 = 0LL;
                  goto LABEL_199;
                }

                if (v214)
                {
                  YAML::detail::node_data::begin(**v214, (uint64_t)&__str);
                  uint64_t v68 = v212;
                  uint64_t v69 = v213;
                  if (v213)
                  {
                    uint64_t v70 = (unint64_t *)&v213->__shared_owners_;
                    do
                      unint64_t v71 = __ldxr(v70);
                    while (__stxr(v71 + 1, v70));
                    *(_OWORD *)int v197 = __str;
                    *(_OWORD *)&v197[16] = __str_16;
                    *(void *)&v197[32] = v68;
                    char v198 = v69;
                    do
                      unint64_t v72 = __ldxr(v70);
                    while (__stxr(v72 + 1, v70));
                    do
                      unint64_t v73 = __ldaxr(v70);
                    while (__stlxr(v73 - 1, v70));
                    if (!v73)
                    {
                      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                      std::__shared_weak_count::__release_weak(v69);
                    }
                  }

                  else
                  {
                    *(_OWORD *)int v197 = __str;
                    *(_OWORD *)&v197[16] = __str_16;
                    *(void *)&v197[32] = v212;
                    char v198 = 0LL;
                  }
                }

                else
                {
                  *(_DWORD *)int v197 = 0;
                  memset(&v197[8], 0, 32);
                  char v198 = 0LL;
                }

                if (!v209 || !v214) {
                  goto LABEL_198;
                }
                YAML::detail::node_data::end(**v214, (uint64_t)&__str);
                uint64_t v89 = v212;
                char v90 = v213;
                if (v213)
                {
                  unint64_t v91 = (unint64_t *)&v213->__shared_owners_;
                  do
                    unint64_t v92 = __ldxr(v91);
                  while (__stxr(v92 + 1, v91));
                  *(_OWORD *)__int128 v195 = __str;
                  *(_OWORD *)&v195[16] = __str_16;
                  *(void *)&v195[32] = v89;
                  uint64_t v196 = v90;
                  do
                    unint64_t v93 = __ldxr(v91);
                  while (__stxr(v93 + 1, v91));
                  do
                    unint64_t v94 = __ldaxr(v91);
                  while (__stlxr(v94 - 1, v91));
                  if (!v94)
                  {
                    ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
                    std::__shared_weak_count::__release_weak(v90);
                  }
                }

                else
                {
                  *(_OWORD *)__int128 v195 = __str;
                  *(_OWORD *)&v195[16] = __str_16;
                  *(void *)&v195[32] = v212;
                  uint64_t v196 = 0LL;
                }

LABEL_199:
                while (1)
                {
                  if (*(_DWORD *)v197 == *(_DWORD *)v195)
                  {
                    int v95 = &v197[8];
                    std::string::size_type v96 = &v195[8];
                    if (*(_DWORD *)v197 != 1)
                    {
                      if (*(_DWORD *)v197 != 2) {
                        break;
                      }
                      int v95 = &v197[16];
                      std::string::size_type v96 = &v195[16];
                    }

                    if (*(void *)v95 == *(void *)v96) {
                      break;
                    }
                  }

                  sub_10003D658((uint64_t)v197, (uint64_t)&__str);
                  if (!v187)
                  {
                    unsigned __int8 v173 = __cxa_allocate_exception(0x38uLL);
                    if (SHIBYTE(v189) < 0)
                    {
                      sub_10000231C(&__dst, (void *)v188, *((unint64_t *)&v188 + 1));
                    }

                    else
                    {
                      __int128 __dst = v188;
                      uint64_t v256 = v189;
                    }

                    sub_10004120C(v173, (uint64_t)&__dst);
                  }

                  *(void *)&__int128 __dst = &v187;
                  sub_1000452D8((uint64_t *)&__dst, (uint64_t)v182);
                  if (!v191)
                  {
                    __int128 v174 = __cxa_allocate_exception(0x38uLL);
                    if (SHIBYTE(v193) < 0)
                    {
                      sub_10000231C(&__dst, (void *)v192, *((unint64_t *)&v192 + 1));
                    }

                    else
                    {
                      __int128 __dst = v192;
                      uint64_t v256 = v193;
                    }

                    sub_10004120C(v174, (uint64_t)&__dst);
                  }

                  *(void *)&__int128 __dst = &v191;
                  sub_1000452D8((uint64_t *)&__dst, (uint64_t)&v181);
                  *(void *)&__int128 __dst = v182;
                  uint64_t v97 = sub_10002F860( &v245,  (const void **)v182,  (uint64_t)&std::piecewise_construct,  (__int128 **)&__dst);
                  std::string::operator=((std::string *)(v97 + 7), &v181);
                  if (v183 < 0) {
                    operator delete(v182[0]);
                  }
                  __int128 v98 = v194;
                  if (v194)
                  {
                    unint64_t v99 = (unint64_t *)&v194->__shared_owners_;
                    do
                      unint64_t v100 = __ldaxr(v99);
                    while (__stlxr(v100 - 1, v99));
                    if (!v100)
                    {
                      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                      std::__shared_weak_count::__release_weak(v98);
                    }
                  }

                  if (SHIBYTE(v193) < 0) {
                    operator delete((void *)v192);
                  }
                  std::string::size_type v101 = v190;
                  if (v190)
                  {
                    unint64_t v102 = (unint64_t *)&v190->__shared_owners_;
                    do
                      unint64_t v103 = __ldaxr(v102);
                    while (__stlxr(v103 - 1, v102));
                    if (!v103)
                    {
                      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                      std::__shared_weak_count::__release_weak(v101);
                    }
                  }

                  if (SHIBYTE(v189) < 0) {
                    operator delete((void *)v188);
                  }
                  std::string::size_type v104 = v186;
                  if (v186)
                  {
                    size_t v105 = (unint64_t *)&v186->__shared_owners_;
                    do
                      unint64_t v106 = __ldaxr(v105);
                    while (__stlxr(v106 - 1, v105));
                    if (!v106)
                    {
                      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                      std::__shared_weak_count::__release_weak(v104);
                    }
                  }

                  if (SHIBYTE(__str_16) < 0) {
                    operator delete(*((void **)&__str + 1));
                  }
                  sub_100044EB4((uint64_t)v197);
                }

                __int128 v107 = v196;
                if (v196)
                {
                  std::string::size_type v108 = (unint64_t *)&v196->__shared_owners_;
                  do
                    unint64_t v109 = __ldaxr(v108);
                  while (__stlxr(v109 - 1, v108));
                  if (!v109)
                  {
                    ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
                    std::__shared_weak_count::__release_weak(v107);
                  }
                }

                char v110 = v198;
                if (v198)
                {
                  __int128 v111 = (unint64_t *)&v198->__shared_owners_;
                  do
                    unint64_t v112 = __ldaxr(v111);
                  while (__stlxr(v112 - 1, v111));
                  goto LABEL_305;
                }

void sub_10004B498( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  if (a2 == 1)
  {
    uint64_t v24 = __cxa_begin_catch(a1);
    std::operator+<char>(&STACK[0x2E0], "yaml-cpp exception in YAML file:", a21);
    uint64_t v25 = std::string::append((std::string *)&STACK[0x2E0], " ");
    __int128 v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    STACK[0x320] = v25->__r_.__value_.__l.__cap_;
    *(_OWORD *)&STACK[0x310] = v26;
    v25->__r_.__value_.__l.__size_ = 0LL;
    v25->__r_.__value_.__l.__cap_ = 0LL;
    v25->__r_.__value_.__r.__words[0] = 0LL;
    unint64_t v29 = (const std::string::value_type *)v24[4];
    unint64_t v28 = (char *)(v24 + 4);
    int v27 = v29;
    int v30 = v28[23];
    if (v30 >= 0) {
      uint64_t v31 = v28;
    }
    else {
      uint64_t v31 = v27;
    }
    if (v30 >= 0) {
      std::string::size_type v32 = v28[23];
    }
    else {
      std::string::size_type v32 = *((void *)v28 + 1);
    }
    __int128 v33 = std::string::append((std::string *)&STACK[0x310], v31, v32);
    __int128 v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    STACK[0x400] = v33->__r_.__value_.__l.__cap_;
    *(_OWORD *)&STACK[0x3F0] = v34;
    v33->__r_.__value_.__l.__size_ = 0LL;
    v33->__r_.__value_.__l.__cap_ = 0LL;
    v33->__r_.__value_.__r.__words[0] = 0LL;
    unint64_t v35 = std::string::append((std::string *)&STACK[0x3F0], "");
    __int128 v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    STACK[0x430] = v35->__r_.__value_.__l.__cap_;
    *(_OWORD *)&STACK[0x420] = v36;
    v35->__r_.__value_.__l.__size_ = 0LL;
    v35->__r_.__value_.__l.__cap_ = 0LL;
    v35->__r_.__value_.__r.__words[0] = 0LL;
    siri::dialogengine::Log::Error(&STACK[0x420]);
    if (SLOBYTE(STACK[0x437]) < 0) {
      operator delete((void *)STACK[0x420]);
    }
    if (SLOBYTE(STACK[0x407]) < 0) {
      operator delete((void *)STACK[0x3F0]);
    }
    if (SLOBYTE(STACK[0x327]) < 0) {
      operator delete((void *)STACK[0x310]);
    }
    if (SLOBYTE(STACK[0x2F7]) < 0) {
      operator delete((void *)STACK[0x2E0]);
    }
  }

  else
  {
    if (a2 != 2)
    {
      sub_10004BE08((uint64_t)&STACK[0x490]);
      sub_10003D0C8(v21 - 192);
      _Unwind_Resume(a1);
    }

    std::string v37 = __cxa_begin_catch(a1);
    std::operator+<char>(&STACK[0x2E0], "Exception parsing YAML file: ", a21);
    unint64_t v38 = std::string::append((std::string *)&STACK[0x2E0], " ");
    __int128 v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    STACK[0x320] = v38->__r_.__value_.__l.__cap_;
    *(_OWORD *)&STACK[0x310] = v39;
    v38->__r_.__value_.__l.__size_ = 0LL;
    v38->__r_.__value_.__l.__cap_ = 0LL;
    v38->__r_.__value_.__r.__words[0] = 0LL;
    std::string v40 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(void *)v37 + 16LL))(v37);
    std::string::size_type v41 = std::string::append((std::string *)&STACK[0x310], v40);
    __int128 v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    STACK[0x400] = v41->__r_.__value_.__l.__cap_;
    *(_OWORD *)&STACK[0x3F0] = v42;
    v41->__r_.__value_.__l.__size_ = 0LL;
    v41->__r_.__value_.__l.__cap_ = 0LL;
    v41->__r_.__value_.__r.__words[0] = 0LL;
    unint64_t v43 = std::string::append((std::string *)&STACK[0x3F0], "");
    __int128 v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    STACK[0x430] = v43->__r_.__value_.__l.__cap_;
    *(_OWORD *)&STACK[0x420] = v44;
    v43->__r_.__value_.__l.__size_ = 0LL;
    v43->__r_.__value_.__l.__cap_ = 0LL;
    v43->__r_.__value_.__r.__words[0] = 0LL;
    siri::dialogengine::Log::Error(&STACK[0x420]);
    if (SLOBYTE(STACK[0x437]) < 0) {
      operator delete((void *)STACK[0x420]);
    }
    if (SLOBYTE(STACK[0x407]) < 0) {
      operator delete((void *)STACK[0x3F0]);
    }
    if (SLOBYTE(STACK[0x327]) < 0) {
      operator delete((void *)STACK[0x310]);
    }
    if (SLOBYTE(STACK[0x2F7]) < 0) {
      operator delete((void *)STACK[0x2E0]);
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x10004B108LL);
}

void sub_10004BBF0(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  if (!*(_BYTE *)a1)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
    if (*(char *)(a1 + 31) < 0)
    {
      sub_10000231C(&__dst, *(void **)(a1 + 8), *(void *)(a1 + 16));
    }

    else
    {
      __int128 __dst = *(_OWORD *)(a1 + 8);
      uint64_t v25 = *(void *)(a1 + 24);
    }

    sub_10004120C(exception, (uint64_t)&__dst);
  }

  sub_100041638(a1);
  uint64_t v6 = *(uint64_t ***)(a1 + 48);
  sub_1000021BC(&__p, a2);
  char v7 = *(std::__shared_weak_count **)(a1 + 40);
  uint64_t v21 = *(void *)(a1 + 32);
  int v22 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }

  uint64_t v10 = sub_10004428C(v6, &__p, &v21);
  uint64_t v11 = v22;
  if (v22)
  {
    int v12 = (unint64_t *)&v22->__shared_owners_;
    do
      unint64_t v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  uint64_t v14 = *(void *)(a1 + 32);
  unint64_t v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
  {
    __int128 v16 = (unint64_t *)&v15->__shared_owners_;
    do
      unint64_t v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    *(_BYTE *)a3 = 1;
    *(void *)(a3 + std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
    *(void *)(a3 + 16) = 0LL;
    *(void *)(a3 + 24) = 0LL;
    *(void *)(a3 + 32) = v14;
    *(void *)(a3 + 40) = v15;
    do
      unint64_t v18 = __ldxr(v16);
    while (__stxr(v18 + 1, v16));
    *(void *)(a3 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v10;
    do
      unint64_t v19 = __ldaxr(v16);
    while (__stlxr(v19 - 1, v16));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

  else
  {
    *(_BYTE *)a3 = 1;
    *(void *)(a3 + std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
    *(void *)(a3 + 16) = 0LL;
    *(void *)(a3 + 24) = 0LL;
    *(void *)(a3 + 32) = v14;
    *(void *)(a3 + 40) = 0LL;
    *(void *)(a3 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v10;
  }

void sub_10004BDB0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
}

uint64_t sub_10004BE08(uint64_t a1)
{
  return a1;
}

uint64_t sub_10004BE60@<X0>(uint64_t a1@<X0>, std::stringbuf::string_type *a2@<X8>)
{
  uint64_t v4 = sub_100002F60(&v17, (uint64_t)"//\n", 3LL);
  uint64_t v5 = sub_100002F60(v4, (uint64_t)"// ", 3LL);
  int v6 = *(char *)(a1 + 23);
  if (v6 >= 0) {
    uint64_t v7 = a1;
  }
  else {
    uint64_t v7 = *(void *)a1;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v8 = *(void *)(a1 + 8);
  }
  unint64_t v9 = sub_100002F60(v5, v7, v8);
  uint64_t v10 = sub_100002F60(v9, (uint64_t)"\n", 1LL);
  uint64_t v11 = sub_100002F60(v10, (uint64_t)"//\n", 3LL);
  int v12 = sub_100002F60(v11, (uint64_t)"// GENERATED CODE. You shouldn't be editing this file.\n", 55LL);
  unint64_t v13 = sub_100002F60(v12, (uint64_t)"//\n", 3LL);
  sub_100002F60(v13, (uint64_t)"\n", 1LL);
  std::stringbuf::str(a2, &v18);
  *(void *)((char *)v16
  uint64_t v17 = v14;
  std::streambuf::~streambuf(&v18);
  return std::ios::~ios(&v19);
}

void sub_10004BF9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_10004BFB0(uint64_t a1@<X0>, void **a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    sub_10000231C(__p, *(void **)a1, *(void *)(a1 + 8));
  }

  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a1;
    uint64_t v9 = *(void *)(a1 + 16);
  }

  if (v9 >= 0) {
    char v3 = __p;
  }
  else {
    char v3 = (void **)__p[0];
  }
  char v4 = __toupper(*(char *)v3);
  if (v9 >= 0) {
    uint64_t v5 = __p;
  }
  else {
    uint64_t v5 = (void **)__p[0];
  }
  *(_BYTE *)uint64_t v5 = v4;
  if (v9 >= 0) {
    size_t v6 = HIBYTE(v9);
  }
  else {
    size_t v6 = (size_t)__p[1];
  }
  sub_100007A0C((uint64_t)a2, v6 + 8);
  if (v6)
  {
    if (v9 >= 0) {
      uint64_t v7 = __p;
    }
    else {
      uint64_t v7 = (void **)__p[0];
    }
    memmove(a2, v7, v6);
  }

  strcpy((char *)a2 + v6, "Semantic");
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
}

void sub_10004C0B0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_10004C0CC@<D0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  if (*((char *)a1 + 23) < 0)
  {
    sub_10000231C(a4, *(void **)a1, *((void *)a1 + 1));
    if (!a3) {
      goto LABEL_11;
    }
  }

  else
  {
    __int128 v8 = *a1;
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *a1;
    a4->__r_.__value_.__l.__cap_ = *((void *)a1 + 2);
    if (!a3) {
      goto LABEL_11;
    }
  }

  sub_100049AA8(a3, (const void **)a1, &__str);
  std::string::size_type size = __str.__r_.__value_.__s.__size_;
  unsigned __int8 v10 = __str.__r_.__value_.__s.__size_;
  if ((__str.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    std::string::operator=(a4, &__str);
    unsigned __int8 v10 = __str.__r_.__value_.__s.__size_;
  }

  if ((v10 & 0x80) != 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
LABEL_11:
  int v11 = a4->__r_.__value_.__s.__size_;
  std::string::size_type v12 = a4->__r_.__value_.__r.__words[0];
  std::string::size_type v13 = a4->__r_.__value_.__l.__size_;
  if ((v11 & 0x80u) == 0) {
    std::string::size_type v14 = a4->__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v14 = a4->__r_.__value_.__l.__size_;
  }
  if ((v11 & 0x80u) == 0) {
    std::string::size_type v15 = (std::string::size_type)a4;
  }
  else {
    std::string::size_type v15 = a4->__r_.__value_.__r.__words[0];
  }
  if (v14)
  {
    __int128 v16 = (unsigned __int8 *)(v15 + v14);
    uint64_t v17 = (unsigned __int8 *)v15;
    while (2)
    {
      for (uint64_t i = 0LL; i != 4; ++i)
      {
        if (*v17 == asc_100075AF8[i])
        {
          if (v17 != v16)
          {
            uint64_t v19 = &v17[-v15];
            if (v19 != (unsigned __int8 *)-1LL)
            {
              while (2)
              {
                if ((v11 & 0x80u) == 0) {
                  std::string::size_type v12 = (std::string::size_type)a4;
                }
                v19[v12] = 95;
                std::string v20 = v19 + 1;
                int v11 = a4->__r_.__value_.__s.__size_;
                std::string::size_type v12 = a4->__r_.__value_.__r.__words[0];
                std::string::size_type v13 = a4->__r_.__value_.__l.__size_;
                if ((v11 & 0x80u) == 0) {
                  std::string::size_type v21 = (std::string::size_type)a4;
                }
                else {
                  std::string::size_type v21 = a4->__r_.__value_.__r.__words[0];
                }
                if ((v11 & 0x80u) == 0) {
                  std::string::size_type v22 = a4->__r_.__value_.__s.__size_;
                }
                else {
                  std::string::size_type v22 = a4->__r_.__value_.__l.__size_;
                }
                if (v22 > (unint64_t)v20)
                {
                  __int128 v23 = &v20[v21];
                  uint64_t v24 = (unsigned __int8 *)(v21 + v22);
LABEL_36:
                  uint64_t v25 = 0LL;
                  while (*v23 != asc_100075AF8[v25])
                  {
                    if (++v25 == 4)
                    {
                      if (++v23 != v24) {
                        goto LABEL_36;
                      }
                      goto LABEL_43;
                    }
                  }

                  if (v23 != v24)
                  {
                    uint64_t v19 = &v23[-v21];
                  }
                }

                break;
              }
            }
          }

          goto LABEL_43;
        }
      }

      if (++v17 != v16) {
        continue;
      }
      break;
    }
  }

void sub_10004C374( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

BOOL sub_10004C3B4(siri::dialogengine::DialogMetadataReader *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100008EC0(a3, (const void **)__p);
  uint64_t v7 = v6;
  uint64_t v8 = a3 + 8;
  if (a3 + 8 == v6) {
    uint64_t v9 = 0LL;
  }
  else {
    uint64_t v9 = v6 + 56;
  }
  if (SHIBYTE(v70) < 0) {
    operator delete(__p[0]);
  }
  v67[0] = 0LL;
  v67[1] = 0LL;
  uint64_t v68 = 0LL;
  if (v8 == v7) {
    goto LABEL_14;
  }
  if (*(char *)(v7 + 103) < 0)
  {
    sub_10000231C(__p, *(void **)(v7 + 80), *(void *)(v7 + 88));
    if (SHIBYTE(v68) < 0) {
      operator delete(v67[0]);
    }
  }

  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)(v7 + 80);
    uint64_t v70 = *(void *)(v7 + 96);
  }

  *(_OWORD *)char v67 = *(_OWORD *)__p;
  uint64_t v68 = v70;
  unsigned __int8 v10 = (void *)HIBYTE(v70);
  if (v70 < 0) {
    unsigned __int8 v10 = __p[1];
  }
  if (!v10)
  {
LABEL_14:
    siri::dialogengine::DialogMetadataReader::GetSemanticConcept(a1);
    sub_10004BFB0((uint64_t)v65, __p);
    if (SHIBYTE(v68) < 0) {
      operator delete(v67[0]);
    }
    *(_OWORD *)char v67 = *(_OWORD *)__p;
    uint64_t v68 = v70;
    HIBYTE(v70) = 0;
    LOBYTE(__p[0]) = 0;
    if (v66 < 0) {
      operator delete(v65[0]);
    }
  }

  sub_1000021BC(__p, "swift");
  siri::dialogengine::AddExtension(v67, __p);
  if (SHIBYTE(v70) < 0) {
    operator delete(__p[0]);
  }
  siri::dialogengine::JoinPath(&v62, a2 + 168, v65);
  int v11 = sub_100002F60(&std::cout, (uint64_t)"Write Swift enum: ", 18LL);
  if ((v64 & 0x80u) == 0) {
    std::string::size_type v12 = &v62;
  }
  else {
    std::string::size_type v12 = v62;
  }
  if ((v64 & 0x80u) == 0) {
    uint64_t v13 = v64;
  }
  else {
    uint64_t v13 = v63;
  }
  std::string::size_type v14 = sub_100002F60(v11, (uint64_t)v12, v13);
  std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(*v14 - 24LL)));
  uint64_t v15 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
  uint64_t v16 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10LL);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put(v14, v16);
  std::ostream::flush(v14);
  sub_100002040((void (__cdecl ***)(std::ofstream *__hidden))__p, (uint64_t *)&v62, 16);
  uint64_t v17 = v72;
  if (!v72)
  {
    int64_t v52 = sub_100002F60(&std::cout, (uint64_t)"Error: Failed to write to file: ", 32LL);
    if ((v64 & 0x80u) == 0) {
      uint64_t v53 = &v62;
    }
    else {
      uint64_t v53 = v62;
    }
    if ((v64 & 0x80u) == 0) {
      uint64_t v54 = v64;
    }
    else {
      uint64_t v54 = v63;
    }
    char v55 = sub_100002F60(v52, (uint64_t)v53, v54);
    std::ios_base::getloc((const std::ios_base *)((char *)v55 + *(void *)(*v55 - 24LL)));
    uint64_t v56 = std::locale::use_facet((const std::locale *)&v61, &std::ctype<char>::id);
    uint64_t v57 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v56->__vftable[2].~facet_0)(v56, 10LL);
    std::locale::~locale((std::locale *)&v61);
    std::ostream::put(v55, v57);
    std::ostream::flush(v55);
    goto LABEL_109;
  }

  sub_10004BE60((uint64_t)v65, &v61);
  if ((v61.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::stringbuf v18 = &v61;
  }
  else {
    std::stringbuf v18 = (std::string *)v61.__r_.__value_.__r.__words[0];
  }
  if ((v61.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t size = v61.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t size = v61.__r_.__value_.__l.__size_;
  }
  sub_100002F60(__p, (uint64_t)v18, size);
  if (v8 != v7 && *(void *)(v7 + 144))
  {
    std::string v20 = *(void **)(v7 + 128);
    if (v20 != (void *)(v7 + 136))
    {
      do
      {
        std::string::size_type v21 = sub_100002F60(__p, (uint64_t)"// swiftlint:disable ", 21LL);
        int v22 = *((char *)v20 + 55);
        if (v22 >= 0) {
          uint64_t v23 = (uint64_t)(v20 + 4);
        }
        else {
          uint64_t v23 = v20[4];
        }
        if (v22 >= 0) {
          uint64_t v24 = *((unsigned __int8 *)v20 + 55);
        }
        else {
          uint64_t v24 = v20[5];
        }
        uint64_t v25 = sub_100002F60(v21, v23, v24);
        sub_100002F60(v25, (uint64_t)"\n", 1LL);
        __int128 v26 = (void *)v20[1];
        if (v26)
        {
          do
          {
            int v27 = v26;
            __int128 v26 = (void *)*v26;
          }

          while (v26);
        }

        else
        {
          do
          {
            int v27 = (void *)v20[2];
            BOOL v28 = *v27 == (void)v20;
            std::string v20 = v27;
          }

          while (!v28);
        }

        std::string v20 = v27;
      }

      while (v27 != (void *)(v7 + 136));
    }

    sub_100002F60(__p, (uint64_t)"\n", 1LL);
  }

  int v29 = sub_100002F60(__p, (uint64_t)"/// Semantic concept: ", 22LL);
  siri::dialogengine::DialogMetadataReader::GetSemanticConcept(a1);
  if ((v61.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    int v30 = &v61;
  }
  else {
    int v30 = (std::string *)v61.__r_.__value_.__r.__words[0];
  }
  if ((v61.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v31 = v61.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t v31 = v61.__r_.__value_.__l.__size_;
  }
  std::string::size_type v32 = sub_100002F60(v29, (uint64_t)v30, v31);
  sub_100002F60(v32, (uint64_t)"\n", 1LL);
  __int128 v33 = sub_100002F60(__p, (uint64_t)"internal enum ", 14LL);
  if (v68 >= 0) {
    __int128 v34 = v67;
  }
  else {
    __int128 v34 = (void **)v67[0];
  }
  if (v68 >= 0) {
    uint64_t v35 = HIBYTE(v68);
  }
  else {
    uint64_t v35 = (uint64_t)v67[1];
  }
  __int128 v36 = sub_100002F60(v33, (uint64_t)v34, v35);
  sub_100002F60(v36, (uint64_t)": String, CaseIterable {\n", 25LL);
  sub_1000021BC(&v61, (char *)&unk_10006A022);
  uint64_t v59 = v17;
  for (uint64_t i = (const std::string *)siri::dialogengine::DialogMetadataReader::GetNextSemanticValue(a1);
        i;
        uint64_t i = (const std::string *)siri::dialogengine::DialogMetadataReader::GetNextSemanticValue(a1))
  {
    uint64_t v38 = i[1].__r_.__value_.__s.__size_;
    if ((v38 & 0x80u) == 0LL) {
      std::string::size_type v39 = i[1].__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v39 = i[1].__r_.__value_.__l.__size_;
    }
    std::string::size_type v40 = v61.__r_.__value_.__s.__size_;
    if ((v61.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      std::string::size_type v40 = v61.__r_.__value_.__l.__size_;
    }
    if (v39 == v40)
    {
      if ((v61.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v41 = &v61;
      }
      else {
        std::string::size_type v41 = (std::string *)v61.__r_.__value_.__r.__words[0];
      }
      if ((v38 & 0x80) != 0)
      {
        if (!memcmp(i[1].__r_.__value_.__l.__data_, v41, i[1].__r_.__value_.__l.__size_)) {
          goto LABEL_97;
        }
      }

      else
      {
        if (!i[1].__r_.__value_.__s.__size_) {
          goto LABEL_97;
        }
        __int128 v42 = i + 1;
        while (v42->__r_.__value_.__s.__data_[0] == v41->__r_.__value_.__s.__data_[0])
        {
          __int128 v42 = (const std::string *)((char *)v42 + 1);
          std::string::size_type v41 = (std::string *)((char *)v41 + 1);
          if (!--v38) {
            goto LABEL_97;
          }
        }
      }
    }

    sub_10004C0CC((__int128 *)&i[1], a2, v9, &v60);
    unint64_t v43 = sub_100002F60(__p, (uint64_t)"    case ", 9LL);
    if ((v60.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int128 v44 = &v60;
    }
    else {
      __int128 v44 = (std::string *)v60.__r_.__value_.__r.__words[0];
    }
    if ((v60.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v45 = v60.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t v45 = v60.__r_.__value_.__l.__size_;
    }
    __int128 v46 = sub_100002F60(v43, (uint64_t)v44, v45);
    uint64_t v47 = sub_100002F60(v46, (uint64_t)" = ", 4LL);
    int v48 = (char)i[1].__r_.__value_.__s.__size_;
    if (v48 >= 0) {
      uint64_t data = (uint64_t)&i[1];
    }
    else {
      uint64_t data = (uint64_t)i[1].__r_.__value_.__l.__data_;
    }
    if (v48 >= 0) {
      uint64_t v50 = i[1].__r_.__value_.__s.__size_;
    }
    else {
      uint64_t v50 = i[1].__r_.__value_.__l.__size_;
    }
    __int128 v51 = sub_100002F60(v47, data, v50);
    sub_100002F60(v51, (uint64_t)"\n", 2LL);
LABEL_97:
    std::string::operator=(&v61, i + 1);
  }

  sub_100002F60(__p, (uint64_t)"}\n", 2LL);
  if (!std::filebuf::close(&__p[1])) {
    std::ios_base::clear( (std::ios_base *)((char *)__p + *((void *)__p[0] - 3)),  *(_DWORD *)&v71[*((void *)__p[0] - 3)] | 4);
  }
  uint64_t v17 = v59;
LABEL_109:
  std::filebuf::~filebuf(&__p[1]);
  std::ios::~ios(&v73);
  if (v66 < 0) {
    operator delete(v65[0]);
  }
  if (SHIBYTE(v68) < 0) {
    operator delete(v67[0]);
  }
  return v17 != 0;
}

void sub_10004CA78( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, std::locale a17, uint64_t a18, int a19, __int16 a20, char a21, char a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28, void *a29, uint64_t a30, int a31, __int16 a32, char a33, char a34, void *a35, uint64_t a36, int a37, __int16 a38, char a39, char a40, uint64_t a41, std::locale a42, uint64_t a43, int a44, __int16 a45, char a46, char a47)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10004CB88(uint64_t a1, const char *a2)
{
  char v3 = (uint64_t *)(a1 + 168);
  uint64_t v4 = a1 + 168;
  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"mOutputDir: %s", a2, v4);
  uint64_t v6 = a1 + 24;
  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"mTemplateDir: %s", v5, v6);
  uint64_t v8 = a1 + 120;
  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"mCategory: %s", v7, v8);
  unsigned __int8 v10 = (const char **)(a1 + 224);
  int v11 = (const char *)(a1 + 224);
  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"mCodegenConfigPath: %s", v9, v11);
  uint64_t v13 = (void **)(a1 + 248);
  std::string::size_type v14 = (void *)(a1 + 248);
  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"mSwiftCaseStyle: %s", v12, v14);
  if (*(char *)(a1 + 47) < 0)
  {
    if (*(void *)(a1 + 32)) {
      goto LABEL_13;
    }
LABEL_22:
    uint64_t v15 = sub_100002F60(&std::cout, (uint64_t)"Error: No template directory specified. Try --templateDir.", 58LL);
    std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24LL)));
    uint64_t v16 = std::locale::use_facet(&v105, &std::ctype<char>::id);
    uint64_t v17 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10LL);
    goto LABEL_38;
  }

  if (!*(_BYTE *)(a1 + 47)) {
    goto LABEL_22;
  }
LABEL_13:
  if ((siri::dialogengine::DirExists(a1 + 24) & 1) == 0)
  {
    std::stringbuf v18 = sub_100002F60(&std::cout, (uint64_t)"Error: The specified template directory does not exist: ", 56LL);
    int v19 = *(char *)(a1 + 47);
    if (v19 >= 0) {
      uint64_t v20 = a1 + 24;
    }
    else {
      uint64_t v20 = *(void *)(a1 + 24);
    }
    if (v19 >= 0) {
      uint64_t v21 = *(unsigned __int8 *)(a1 + 47);
    }
    else {
      uint64_t v21 = *(void *)(a1 + 32);
    }
LABEL_37:
    uint64_t v15 = sub_100002F60(v18, v20, v21);
    std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24LL)));
    uint64_t v24 = std::locale::use_facet(&v105, &std::ctype<char>::id);
    uint64_t v17 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10LL);
    goto LABEL_38;
  }

  if (*(char *)(a1 + 191) < 0)
  {
    if (*(void *)(a1 + 176)) {
      goto LABEL_16;
    }
  }

  else if (*(_BYTE *)(a1 + 191))
  {
LABEL_16:
    if ((siri::dialogengine::DirExists(v3) & 1) != 0)
    {
      sub_10003A5B0((void *)a1, (uint64_t *)&v105);
      if ((__int128 *)v105.__locale_ == v106)
      {
        BOOL v28 = sub_100002F60(&std::cout, (uint64_t)"No categories defined in the metadata config file", 49LL);
        std::ios_base::getloc((const std::ios_base *)((char *)v28 + *(void *)(*v28 - 24LL)));
        int v29 = std::locale::use_facet((const std::locale *)&v104, &std::ctype<char>::id);
        uint64_t v30 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 10LL);
        std::locale::~locale((std::locale *)&v104);
        std::ostream::put(v28, v30);
        std::ostream::flush(v28);
LABEL_64:
        uint64_t i = 0LL;
LABEL_150:
        v104.__r_.__value_.__r.__words[0] = (std::string::size_type)&v105;
        sub_100043FE0((void ***)&v104);
        return i;
      }

      if (*(char *)(a1 + 143) < 0)
      {
        if (!*(void *)(a1 + 128)) {
          goto LABEL_43;
        }
      }

      else if (!*(_BYTE *)(a1 + 143))
      {
        goto LABEL_43;
      }

      uint64_t v31 = sub_10004D648((__int128 *)v105.__locale_, v106, a1);
      sub_100041CE8((uint64_t)&v105, (uint64_t)v31, v106);
      if ((__int128 *)v105.__locale_ == v106)
      {
        std::string::size_type v40 = sub_100002F60(&std::cout, (uint64_t)"Error: The specified category '", 31LL);
        int v41 = *(char *)(a1 + 143);
        if (v41 >= 0) {
          uint64_t v42 = a1 + 120;
        }
        else {
          uint64_t v42 = *(void *)(a1 + 120);
        }
        if (v41 >= 0) {
          uint64_t v43 = *(unsigned __int8 *)(a1 + 143);
        }
        else {
          uint64_t v43 = *(void *)(a1 + 128);
        }
        __int128 v44 = sub_100002F60(v40, v42, v43);
        uint64_t v45 = sub_100002F60(v44, (uint64_t)"' was not found in the metadata config file.", 44LL);
        sub_100003ECC(v45);
        goto LABEL_64;
      }

LABEL_48:
      else {
        uint64_t v32 = *(unsigned __int8 *)(a1 + 271);
      }
      if (v32)
      {
        siri::dialogengine::StringToLower(&v104);
        *(_OWORD *)uint64_t v13 = *(_OWORD *)&v104.__r_.__value_.__l.__data_;
        *(void *)(a1 + 264) = v104.__r_.__value_.__l.__cap_;
        if (sub_100017F20((void *)(a1 + 248), "none")
          && sub_100017F20((void *)(a1 + 248), "lower")
          && sub_100017F20((void *)(a1 + 248), "upper"))
        {
          __int128 v33 = sub_100002F60(&std::cout, (uint64_t)"Error: Invalid value for --swiftCaseStyle: ", 43LL);
          uint64_t v34 = *(unsigned __int8 *)(a1 + 271);
          uint64_t v35 = *(void *)(a1 + 256);
          BOOL v36 = (v34 & 0x80u) != 0LL;
          if ((v34 & 0x80u) == 0LL) {
            uint64_t v37 = a1 + 248;
          }
          else {
            uint64_t v37 = *(void *)(a1 + 248);
          }
          goto LABEL_53;
        }
      }

      else
      {
        std::string::assign((std::string *)(a1 + 248), "none");
      }

      memset(&v104, 0, sizeof(v104));
      else {
        uint64_t v46 = *(unsigned __int8 *)(a1 + 143);
      }
      if (v46) {
        std::string::operator=(&v104, (const std::string *)(a1 + 120));
      }
      else {
        std::string::assign(&v104, "(All)");
      }
      uint64_t v47 = sub_100002F60(&std::cout, (uint64_t)"Generate code for metadata\n", 27LL);
      int v48 = sub_100002F60(v47, (uint64_t)"\tOutput directory: ", 19LL);
      int v49 = *(char *)(a1 + 191);
      if (v49 >= 0) {
        uint64_t v50 = (uint64_t)v3;
      }
      else {
        uint64_t v50 = *(void *)(a1 + 168);
      }
      if (v49 >= 0) {
        uint64_t v51 = *(unsigned __int8 *)(a1 + 191);
      }
      else {
        uint64_t v51 = *(void *)(a1 + 176);
      }
      int64_t v52 = sub_100002F60(v48, v50, v51);
      uint64_t v53 = sub_100002F60(v52, (uint64_t)"\n", 1LL);
      uint64_t v54 = sub_100002F60(v53, (uint64_t)"\tTemplate directory: ", 21LL);
      int v55 = *(char *)(a1 + 47);
      if (v55 >= 0) {
        uint64_t v56 = a1 + 24;
      }
      else {
        uint64_t v56 = *(void *)(a1 + 24);
      }
      if (v55 >= 0) {
        uint64_t v57 = *(unsigned __int8 *)(a1 + 47);
      }
      else {
        uint64_t v57 = *(void *)(a1 + 32);
      }
      int v58 = sub_100002F60(v54, v56, v57);
      uint64_t v59 = sub_100002F60(v58, (uint64_t)"\n", 1LL);
      std::string v60 = sub_100002F60(v59, (uint64_t)"\tCategory: ", 11LL);
      if ((v104.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string v61 = &v104;
      }
      else {
        std::string v61 = (std::string *)v104.__r_.__value_.__r.__words[0];
      }
      if ((v104.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t size = v104.__r_.__value_.__s.__size_;
      }
      else {
        uint64_t size = v104.__r_.__value_.__l.__size_;
      }
      uint64_t v63 = sub_100002F60(v60, (uint64_t)v61, size);
      unsigned __int8 v64 = sub_100002F60(v63, (uint64_t)"\n", 1LL);
      unint64_t v65 = sub_100002F60(v64, (uint64_t)"\tConfig file: ", 14LL);
      if (*(char *)(a1 + 247) < 0)
      {
        if (*(void *)(a1 + 232)) {
          char v66 = *v10;
        }
        else {
          char v66 = "(None)";
        }
      }

      else if (*(_BYTE *)(a1 + 247))
      {
        char v66 = (const char *)(a1 + 224);
      }

      else
      {
        char v66 = "(None)";
      }

      size_t v67 = strlen(v66);
      uint64_t v68 = sub_100002F60(v65, (uint64_t)v66, v67);
      uint64_t v69 = sub_100002F60(v68, (uint64_t)"\n", 1LL);
      uint64_t v70 = sub_100002F60(v69, (uint64_t)"\tSwift case style: ", 19LL);
      int v71 = *(char *)(a1 + 271);
      if (v71 >= 0) {
        uint64_t v72 = a1 + 248;
      }
      else {
        uint64_t v72 = *(void *)(a1 + 248);
      }
      if (v71 >= 0) {
        uint64_t v73 = *(unsigned __int8 *)(a1 + 271);
      }
      else {
        uint64_t v73 = *(void *)(a1 + 256);
      }
      uint64_t v74 = sub_100002F60(v70, v72, v73);
      sub_100003ECC(v74);
      v103[0] = 0LL;
      v103[1] = 0LL;
      unint64_t v102 = v103;
      if ((sub_100049CA0(a1 + 224, (uint64_t)&v102) & 1) != 0)
      {
        locale = v105.__locale_;
        uint64_t v76 = v106;
        for (uint64_t i = 1LL; locale != (std::locale::__imp *)v76; locale = (std::locale::__imp *)((char *)locale + 32))
        {
          sub_1000021BC(v95, "en");
          siri::dialogengine::GetDialogMetadataFilename(__p, locale, v95);
          siri::dialogengine::JoinPath(&v99, a1 + 24, __p);
          if (v98 < 0) {
            operator delete(__p[0]);
          }
          if (v96 < 0) {
            operator delete(v95[0]);
          }
          if ((siri::dialogengine::FileExists(&v99) & 1) != 0)
          {
            unsigned __int8 v77 = sub_100002F60(&std::cout, (uint64_t)"\nRead metadata file: ", 21LL);
            if ((v101 & 0x80u) == 0) {
              std::string v78 = &v99;
            }
            else {
              std::string v78 = v99;
            }
            if ((v101 & 0x80u) == 0) {
              uint64_t v79 = v101;
            }
            else {
              uint64_t v79 = v100;
            }
            __int128 v80 = sub_100002F60(v77, (uint64_t)v78, v79);
            std::ios_base::getloc((const std::ios_base *)((char *)v80 + *(void *)(*v80 - 24LL)));
            uint64_t v81 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
            uint64_t v82 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v81->__vftable[2].~facet_0)(v81, 10LL);
            std::locale::~locale((std::locale *)__p);
            std::ostream::put(v80, v82);
            std::ostream::flush(v80);
            siri::dialogengine::DialogMetadataReader::DialogMetadataReader((siri::dialogengine::DialogMetadataReader *)v95);
            if ((siri::dialogengine::DialogMetadataReader::Load(v95, locale, &v99) & 1) != 0)
            {
              uint64_t i = sub_10004C3B4((siri::dialogengine::DialogMetadataReader *)v95, a1, (uint64_t)&v102) & i;
            }

            else
            {
              uint64_t v89 = sub_100002F60(&std::cout, (uint64_t)"Error: Failed to read file: ", 28LL);
              if ((v101 & 0x80u) == 0) {
                char v90 = &v99;
              }
              else {
                char v90 = v99;
              }
              if ((v101 & 0x80u) == 0) {
                uint64_t v91 = v101;
              }
              else {
                uint64_t v91 = v100;
              }
              unint64_t v92 = sub_100002F60(v89, (uint64_t)v90, v91);
              std::ios_base::getloc((const std::ios_base *)((char *)v92 + *(void *)(*v92 - 24LL)));
              unint64_t v93 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
              uint64_t v94 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v93->__vftable[2].~facet_0)(v93, 10LL);
              std::locale::~locale((std::locale *)__p);
              std::ostream::put(v92, v94);
              std::ostream::flush(v92);
              uint64_t i = 0LL;
            }

            siri::dialogengine::DialogMetadataReader::~DialogMetadataReader((siri::dialogengine::DialogMetadataReader *)v95);
          }

          else
          {
            __int128 v83 = sub_100002F60(&std::cout, (uint64_t)"Error: The metadata file does not exist: ", 41LL);
            if ((v101 & 0x80u) == 0) {
              unint64_t v84 = &v99;
            }
            else {
              unint64_t v84 = v99;
            }
            if ((v101 & 0x80u) == 0) {
              uint64_t v85 = v101;
            }
            else {
              uint64_t v85 = v100;
            }
            uint64_t v86 = sub_100002F60(v83, (uint64_t)v84, v85);
            std::ios_base::getloc((const std::ios_base *)((char *)v86 + *(void *)(*v86 - 24LL)));
            __int128 v87 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
            uint64_t v88 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v87->__vftable[2].~facet_0)(v87, 10LL);
            std::locale::~locale((std::locale *)__p);
            std::ostream::put(v86, v88);
            std::ostream::flush(v86);
            uint64_t i = 0LL;
          }
        }

        sub_100003ECC(&std::cout);
      }

      else
      {
        sub_100003ECC(&std::cout);
        uint64_t i = 0LL;
      }

      sub_10004DA54((uint64_t)&v102, v103[0]);
      goto LABEL_150;
    }

    std::stringbuf v18 = sub_100002F60(&std::cout, (uint64_t)"Error: The specified output directory does not exist: ", 54LL);
    int v23 = *(char *)(a1 + 191);
    if (v23 >= 0) {
      uint64_t v20 = (uint64_t)v3;
    }
    else {
      uint64_t v20 = *(void *)(a1 + 168);
    }
    if (v23 >= 0) {
      uint64_t v21 = *(unsigned __int8 *)(a1 + 191);
    }
    else {
      uint64_t v21 = *(void *)(a1 + 176);
    }
    goto LABEL_37;
  }

  uint64_t v15 = sub_100002F60(&std::cout, (uint64_t)"Error: No output directory specified. Try --outputDir.", 54LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24LL)));
  int v22 = std::locale::use_facet(&v105, &std::ctype<char>::id);
  uint64_t v17 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10LL);
LABEL_38:
  uint64_t v25 = v17;
  std::locale::~locale(&v105);
  std::ostream::put(v15, v25);
  std::ostream::flush(v15);
  return 0LL;
}

    *a3 = v21;
    return v5;
  }

  if (v11)
  {
    *a3 = a4;
  }

  else
  {
    *a3 = a2;
    return a2 + 1;
  }

  return a4;
}

void sub_10004D544( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::locale a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, uint64_t a28, void *a29, uint64_t a30, void *__p, uint64_t a32, int a33, __int16 a34, char a35, char a36)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  a28 = v36 - 112;
  sub_100043FE0((void ***)&a28);
  _Unwind_Resume(a1);
}

__int128 *sub_10004D648(__int128 *a1, __int128 *a2, uint64_t a3)
{
  if (a1 == a2) {
    return a2;
  }
  uint64_t v5 = a1;
  int v6 = *(char *)(a3 + 143);
  uint64_t v7 = (const void **)(a3 + 120);
  uint64_t v8 = v6 >= 0 ? *(unsigned __int8 *)(a3 + 143) : *(void *)(a3 + 128);
  while (1)
  {
    uint64_t v9 = *((unsigned __int8 *)v5 + 23);
    uint64_t v10 = (v9 & 0x80u) == 0LL ? *((unsigned __int8 *)v5 + 23) : *((void *)v5 + 1);
    if (v10 != v8) {
      break;
    }
    if (v6 >= 0) {
      int v11 = (unsigned __int8 *)v7;
    }
    else {
      int v11 = (unsigned __int8 *)*v7;
    }
    if ((v9 & 0x80) != 0)
    {
    }

    else if (*((_BYTE *)v5 + 23))
    {
      uint64_t v12 = 0LL;
      while (*((unsigned __int8 *)v5 + v12) == v11[v12])
      {
        if (v9 == ++v12) {
          goto LABEL_19;
        }
      }

      break;
    }

uint64_t **sub_10004D7F4(uint64_t **result, __int128 *a2, __int128 *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    int v6 = *result;
    uint64_t v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    v7[2] = 0LL;
    result[1] = 0LL;
    result[2] = 0LL;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    uint64_t v15 = result;
    uint64_t v16 = v8;
    uint64_t v17 = (const void **)v8;
    if (v8)
    {
      uint64_t v16 = sub_100031558((uint64_t)v8);
      if (a2 != a3)
      {
        uint64_t v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 2));
          std::string::operator=((std::string *)(v8 + 7), (const std::string *)((char *)v9 + 56));
          uint64_t v10 = (uint64_t **)sub_1000314E0((uint64_t)v5, &v18, v17 + 4);
          sub_1000055AC(v5, v18, v10, (uint64_t *)v17);
          uint64_t v17 = (const void **)v16;
          if (v16) {
            uint64_t v16 = sub_100031558((uint64_t)v16);
          }
          int v11 = (__int128 *)*((void *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              int v11 = *(__int128 **)v11;
            }

            while (v11);
          }

          else
          {
            do
            {
              a2 = (__int128 *)*((void *)v9 + 2);
              BOOL v12 = *(void *)a2 == (void)v9;
              uint64_t v9 = a2;
            }

            while (!v12);
          }

          uint64_t v8 = (uint64_t *)v17;
          if (v17) {
            BOOL v12 = a2 == a3;
          }
          else {
            BOOL v12 = 1;
          }
          uint64_t v9 = a2;
        }

        while (!v12);
      }
    }

    uint64_t result = (uint64_t **)sub_10004D980((uint64_t)&v15);
  }

  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)sub_10004D9D4(v5, a2 + 2);
      uint64_t v13 = (__int128 *)*((void *)a2 + 1);
      if (v13)
      {
        do
        {
          std::string::size_type v14 = v13;
          uint64_t v13 = *(__int128 **)v13;
        }

        while (v13);
      }

      else
      {
        do
        {
          std::string::size_type v14 = (__int128 *)*((void *)a2 + 2);
          BOOL v12 = *(void *)v14 == (void)a2;
          a2 = v14;
        }

        while (!v12);
      }

      a2 = v14;
    }

    while (v14 != a3);
  }

  return result;
}

void sub_10004D96C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10004D980(uint64_t a1)
{
  char v2 = *(void **)(a1 + 8);
  if (v2)
  {
    char v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        char v2 = v3;
        char v3 = (void *)v3[2];
      }

      while (v3);
      *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v2;
    }

    sub_100028914(*(void *)a1, v2);
  }

  return a1;
}

uint64_t *sub_10004D9D4(uint64_t **a1, __int128 *a2)
{
  char v3 = (uint64_t **)sub_1000314E0((uint64_t)a1, &v6, (const void **)v7[0] + 4);
  sub_1000055AC(a1, v6, v3, v7[0]);
  uint64_t v4 = v7[0];
  v7[0] = 0LL;
  sub_10002F99C((uint64_t)v7, 0LL);
  return v4;
}

void sub_10004DA3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_10004DA54(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_10004DA54(a1, *a2);
    sub_10004DA54(a1, a2[1]);
    sub_10004DA9C((uint64_t)(a2 + 4));
    operator delete(a2);
  }

void sub_10004DA9C(uint64_t a1)
{
}

_OWORD *sub_10004DB08(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v6 = (void **)sub_100005600((uint64_t)a1, &v14, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x98uLL);
    v12[1] = a1 + 1;
    uint64_t v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0LL;
    v9[2] = 0LL;
    void *v9 = 0LL;
    *(_OWORD *)((char *)v7 + 104) = 0u;
    *(_OWORD *)((char *)v7 + 56) = 0u;
    *(_OWORD *)((char *)v7 + sub_10003D0C8(v18 - 72) = 0u;
    *(_OWORD *)((char *)v7 + 8std::iostream::~basic_iostream(v2, v3 + 8) = 0u;
    *((void *)v7 + 13) = v7 + 7;
    *((void *)v7 + 1memset(v42, 0, 7) = 0LL;
    *((void *)v7 + 1std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
    *((void *)v7 + 15) = 0LL;
    *((void *)v7 + 16) = (char *)v7 + 136;
    char v13 = 1;
    sub_1000055AC(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0LL;
    sub_10004DBF0((uint64_t)v12, 0LL);
  }

  return v7;
}

void sub_10004DBF0(uint64_t a1, uint64_t a2)
{
  char v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_10004DA9C((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }

double YAML::Directives::Directives(YAML::Directives *this)
{
  *(_BYTE *)this = 1;
  *(void *)&double result = 0x200000001LL;
  *(void *)((char *)this + 4) = 0x200000001LL;
  *((void *)this + 4) = 0LL;
  *((void *)this + 3) = 0LL;
  *((void *)this + 2) = (char *)this + 24;
  return result;
}

void *YAML::Directives::TranslateTagHandle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double result = (void *)sub_100008EC0(a1 + 16, (const void **)a2);
  if ((void *)(a1 + 24) != result)
  {
    if ((*((char *)result + 79) & 0x80000000) == 0)
    {
      __int128 v7 = *(_OWORD *)(result + 7);
      *(void *)(a3 + 16) = result[9];
      *(_OWORD *)a3 = v7;
      return result;
    }

    uint64_t v9 = (_WORD *)result[7];
    unint64_t v10 = result[8];
    return sub_10000231C((_BYTE *)a3, v9, v10);
  }

  int v8 = *(char *)(a2 + 23);
  if (v8 < 0)
  {
    uint64_t v9 = *(_WORD **)a2;
    unint64_t v10 = *(void *)(a2 + 8);
    if (v10 != 2 || *v9 != 8481) {
      return sub_10000231C((_BYTE *)a3, v9, v10);
    }
  }

  else if (v8 != 2 || *(_WORD *)a2 != 8481)
  {
    *(_OWORD *)a3 = *(_OWORD *)a2;
    *(void *)(a3 + 16) = *(void *)(a2 + 16);
    return result;
  }

  return sub_1000021BC((void *)a3, "tag:yaml.org,2002:");
}

void YAML::Exception::~Exception(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)off_100079260;
  if (SHIBYTE(this[3].__vftable) < 0) {
    operator delete(this[2].__vftable);
  }
  std::runtime_error::~runtime_error(this);
}

{
  void *v1;
  YAML::Exception::~Exception(this);
  operator delete(v1);
}

void YAML::ParserException::~ParserException(std::runtime_error *this)
{
}

void YAML::RepresentationException::~RepresentationException(std::runtime_error *this)
{
}

void YAML::InvalidNode::~InvalidNode(std::runtime_error *this)
{
}

void YAML::BadConversion::~BadConversion(std::runtime_error *this)
{
}

void YAML::BadSubscript::~BadSubscript(std::runtime_error *this)
{
}

void YAML::BadPushback::~BadPushback(std::runtime_error *this)
{
}

void YAML::BadFile::~BadFile(std::runtime_error *this)
{
}

uint64_t YAML::Exp::ParseHex(uint64_t result, _DWORD *a2)
{
  uint64_t v2 = *(unsigned __int8 *)(result + 23);
  int v3 = (char)v2;
  if ((v2 & 0x80u) != 0LL) {
    uint64_t v2 = *(void *)(result + 8);
  }
  if (!v2) {
    return 0LL;
  }
  uint64_t v4 = (void *)result;
  LODWORD(result) = 0;
  if (v3 < 0) {
    uint64_t v4 = (void *)*v4;
  }
  do
  {
    int v6 = *(char *)v4;
    uint64_t v4 = (void *)((char *)v4 + 1);
    int v5 = v6;
    if ((v6 - 97) >= 6)
    {
      if ((v5 - 65) >= 6)
      {
        if ((v5 - 48) >= 0xA)
        {
          exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
          sub_1000021BC(v10, "bad character found while scanning hex number");
          sub_1000413D8((uint64_t)exception, a2, (uint64_t)v10);
          void *exception = off_1000792A0;
        }

        int v7 = -48;
      }

      else
      {
        int v7 = -55;
      }
    }

    else
    {
      int v7 = -87;
    }

    double result = (v7 + v5 + 16 * result);
    --v2;
  }

  while (v2);
  return result;
}

void sub_10004DF4C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }

  else if (!v16)
  {
    goto LABEL_6;
  }

  __cxa_free_exception(v15);
  goto LABEL_6;
}

void YAML::Exp::Escape(YAML::Exp *this@<X0>, YAML::Stream *a2@<X1>, uint64_t a3@<X8>)
{
  if ((int)a2 >= 1)
  {
    int v5 = (int)a2;
    do
    {
      std::string::value_type v6 = YAML::Stream::get(this);
      std::string::push_back(&v34, v6);
      --v5;
    }

    while (v5);
  }

  int v7 = *((_DWORD *)this + 4);
  v32.__r_.__value_.__r.__words[0] = *((void *)this + 1);
  LODWORD(v32.__r_.__value_.__r.__words[1]) = v7;
  uint64_t v8 = YAML::Exp::ParseHex((uint64_t)&v34, &v32);
  uint64_t v9 = v8;
  if (WORD1(v8) > 0x10u || (v8 & 0xFFFFF800) == 55296)
  {
    sub_100023250((uint64_t)&v32);
    uint64_t v21 = sub_100002F60(&v32.__r_.__value_.__l.__cap_, (uint64_t)"invalid unicode: ", 17LL);
    std::ostream::operator<<(v21, v9);
    exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
    int v23 = *((_DWORD *)this + 4);
    v30.__r_.__value_.__r.__words[0] = *((void *)this + 1);
    LODWORD(v30.__r_.__value_.__r.__words[1]) = v23;
    std::stringbuf::str(&__s, v33);
    sub_1000413D8((uint64_t)exception, &v30, (uint64_t)&__s);
    void *exception = off_1000792A0;
  }

  if (v8 <= 0x7F)
  {
    *(_BYTE *)(a3 + 23) = 1;
    *(_WORD *)a3 = v8;
    goto LABEL_37;
  }

  if (v8 > 0x7FF)
  {
    if (WORD1(v8))
    {
      v30.__r_.__value_.__s.__size_ = 1;
      LOWORD(v30.__r_.__value_.__l.__data_) = ((v8 >> 18) - 16);
      char v29 = 1;
      v28[0] = (v8 >> 12) & 0x3F | 0x80;
      v28[1] = 0;
      int v16 = std::string::append(&v30, v28, 1uLL);
      __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      __s.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
      *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0LL;
      v16->__r_.__value_.__l.__cap_ = 0LL;
      v16->__r_.__value_.__r.__words[0] = 0LL;
      char v27 = 1;
      v26[0] = (v9 >> 6) & 0x3F | 0x80;
      v26[1] = 0;
      uint64_t v18 = std::string::append(&__s, v26, 1uLL);
      __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v32.__r_.__value_.__l.__cap_ = v18->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0LL;
      v18->__r_.__value_.__l.__cap_ = 0LL;
      v18->__r_.__value_.__r.__words[0] = 0LL;
      char v25 = 1;
      LOWORD(siri::dialogengine::ExpandPath(&v39, __p) = v9 & 0x3F | 0x80;
      uint64_t v20 = std::string::append(&v32, (const std::string::value_type *)&__p, 1uLL);
      *(std::string *)a3 = *v20;
      v20->__r_.__value_.__l.__size_ = 0LL;
      v20->__r_.__value_.__l.__cap_ = 0LL;
      v20->__r_.__value_.__r.__words[0] = 0LL;
      if (v25 < 0) {
        operator delete(__p);
      }
      if (v27 < 0) {
        operator delete(*(void **)v26);
      }
      if (v29 < 0) {
        operator delete(*(void **)v28);
      }
      if ((char)v30.__r_.__value_.__s.__size_ < 0)
      {
        BOOL v12 = (void *)v30.__r_.__value_.__r.__words[0];
        goto LABEL_36;
      }
    }

    else
    {
      __s.__r_.__value_.__s.__size_ = 1;
      LOWORD(__s.__r_.__value_.__l.__data_) = ((v8 >> 12) - 32);
      v30.__r_.__value_.__s.__size_ = 1;
      LOWORD(v30.__r_.__value_.__l.__data_) = (v8 >> 6) & 0x3F | 0x80;
      char v13 = std::string::append(&__s, (const std::string::value_type *)&v30, 1uLL);
      __int128 v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v32.__r_.__value_.__l.__cap_ = v13->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0LL;
      v13->__r_.__value_.__l.__cap_ = 0LL;
      v13->__r_.__value_.__r.__words[0] = 0LL;
      char v29 = 1;
      v28[0] = v9 & 0x3F | 0x80;
      v28[1] = 0;
      uint64_t v15 = std::string::append(&v32, v28, 1uLL);
      *(std::string *)a3 = *v15;
      v15->__r_.__value_.__l.__size_ = 0LL;
      v15->__r_.__value_.__l.__cap_ = 0LL;
      v15->__r_.__value_.__r.__words[0] = 0LL;
      if (v29 < 0) {
        operator delete(*(void **)v28);
      }
      if ((char)__s.__r_.__value_.__s.__size_ < 0)
      {
        BOOL v12 = (void *)__s.__r_.__value_.__r.__words[0];
        goto LABEL_36;
      }
    }
  }

  else
  {
    v32.__r_.__value_.__s.__size_ = 1;
    LOWORD(v32.__r_.__value_.__l.__data_) = ((v8 >> 6) - 64);
    __s.__r_.__value_.__s.__size_ = 1;
    LOWORD(__s.__r_.__value_.__l.__data_) = v8 & 0x3F | 0x80;
    int v11 = std::string::append(&v32, (const std::string::value_type *)&__s, 1uLL);
    *(std::string *)a3 = *v11;
    v11->__r_.__value_.__l.__size_ = 0LL;
    v11->__r_.__value_.__l.__cap_ = 0LL;
    v11->__r_.__value_.__r.__words[0] = 0LL;
    if ((char)v32.__r_.__value_.__s.__size_ < 0)
    {
      BOOL v12 = (void *)v32.__r_.__value_.__r.__words[0];
LABEL_36:
      operator delete(v12);
    }
  }

LABEL_37:
}

void sub_10004E368( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, void *a27, uint64_t a28, int a29, __int16 a30, char a31, char a32, void *__p, uint64_t a34, int a35, __int16 a36, char a37, char a38, uint64_t a39, void *a40, uint64_t a41, int a42, __int16 a43, char a44, char a45)
{
  if (a38 < 0)
  {
    operator delete(__p);
    if ((v46 & 1) == 0)
    {
LABEL_6:
      sub_100001C10((uint64_t)&a40);
      _Unwind_Resume(a1);
    }
  }

  else if (!v46)
  {
    goto LABEL_6;
  }

  __cxa_free_exception(v45);
  goto LABEL_6;
}

void YAML::Exp::Escape(YAML::Exp *this@<X0>, uint64_t a2@<X8>)
{
  int v5 = YAML::Stream::get(this);
  int v6 = YAML::Stream::get(this);
  if (v5 == 39 && v6 == 39)
  {
LABEL_3:
    int v7 = "'";
LABEL_4:
    sub_1000021BC((void *)a2, v7);
    return;
  }

  if (v6 > 91)
  {
    switch(v6)
    {
      case '\\':
        int v7 = "\\"";
        goto LABEL_4;
      case '_':
        int v7 = "\xA0";
        goto LABEL_4;
      case 'a':
        int v7 = "\a";
        goto LABEL_4;
      case 'b':
        int v7 = "\b";
        goto LABEL_4;
      case 'e':
        int v7 = "\x1B";
        goto LABEL_4;
      case 'f':
        int v7 = "\f";
        goto LABEL_4;
      case 'n':
        int v7 = "\n";
        goto LABEL_4;
      case 'r':
        int v7 = "\r";
        goto LABEL_4;
      case 't':
        goto LABEL_18;
      case 'u':
        YAML::Exp::Escape(this, (YAML::Stream *)4, a2);
        return;
      case 'v':
        int v7 = "\v";
        goto LABEL_4;
      case 'x':
        YAML::Exp::Escape(this, (YAML::Stream *)2, a2);
        return;
      default:
        goto LABEL_38;
    }
  }

  if (v6 <= 46)
  {
    if (v6 > 33)
    {
      if (v6 == 34)
      {
        int v7 = "";
        goto LABEL_4;
      }

      if (v6 == 39) {
        goto LABEL_3;
      }
    }

    else
    {
      if (v6 == 9)
      {
LABEL_18:
        int v7 = "\t";
        goto LABEL_4;
      }

      if (v6 == 32)
      {
        int v7 = " ";
        goto LABEL_4;
      }
    }

void sub_10004E768( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, uint64_t a23, char a24)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v24 & 1) == 0)
    {
LABEL_8:
      sub_100001C10((uint64_t)&a24);
      _Unwind_Resume(a1);
    }
  }

  else if (!v24)
  {
    goto LABEL_8;
  }

  __cxa_free_exception(v25);
  goto LABEL_8;
}

uint64_t *YAML::detail::memory_holder::merge(uint64_t *a1, void *a2)
{
  double result = (uint64_t *)*a1;
  if (result != (uint64_t *)*a2)
  {
    sub_10004E8CC(result, *(void **)*a2, (void *)(*a2 + 8LL));
    return sub_100014A88(a2, a1);
  }

  return result;
}

uint64_t YAML::detail::memory::create_node(uint64_t **this)
{
  uint64_t v2 = operator new(0x28uLL);
  sub_10004E950(v2);
  sub_10004EC74(&v8, (uint64_t)v2);
  sub_10004ED7C(this, (unint64_t *)&v8, &v8);
  uint64_t v3 = v8;
  uint64_t v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  return v3;
}

void sub_10004E8A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_10004E8CC(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    int v5 = (uint64_t **)result;
    unint64_t v6 = result + 1;
    do
    {
      double result = sub_10004EEB4(v5, v6, v4 + 4, v4 + 4);
      int v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          int v7 = (void *)*v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }

        while (!v9);
      }

      uint64_t v4 = v8;
    }

    while (v8 != a3);
  }

  return result;
}

void *sub_10004E950(void *a1)
{
  uint64_t v2 = operator new(0x10uLL);
  sub_10004E9AC(v2);
  double result = sub_10004EB94(a1, (uint64_t)v2);
  a1[4] = 0LL;
  a1[3] = 0LL;
  a1[2] = a1 + 3;
  return result;
}

void sub_10004E998(_Unwind_Exception *a1)
{
}

void *sub_10004E9AC(void *a1)
{
  uint64_t v2 = (YAML::detail::node_data *)operator new(0xA0uLL);
  YAML::detail::node_data::node_data(v2);
  return sub_10004E9F4(a1, (uint64_t)v2);
}

void sub_10004E9E0(_Unwind_Exception *a1)
{
}

void *sub_10004E9F4(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = &off_100079460;
  v4[1] = 0LL;
  v4[2] = 0LL;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_10004EA44( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0LL;
  if (v10) {
    sub_10004EAC4((uint64_t)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_10004EA68(std::__shared_weak_count *a1)
{
}

void sub_10004EA7C(uint64_t a1)
{
}

uint64_t sub_10004EA84(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

void sub_10004EAC4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_10004EB34((void *)(a2 + 136));
    uint64_t v3 = *(void **)(a2 + 112);
    if (v3)
    {
      *(void *)(a2 + 120) = v3;
      operator delete(v3);
    }

    uint64_t v4 = *(void **)(a2 + 80);
    if (v4)
    {
      *(void *)(a2 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v4;
      operator delete(v4);
    }

    operator delete((void *)a2);
  }

void *sub_10004EB34(void *result)
{
  if (result[2])
  {
    uint64_t v1 = result;
    double result = (void *)result[1];
    uint64_t v2 = *v1;
    uint64_t v3 = *result;
    *(void *)(v3 + std::iostream::~basic_iostream(v2, v3 + 8) = *(void *)(*v1 + 8LL);
    **(void **)(v2 + std::iostream::~basic_iostream(v2, v3 + 8) = v3;
    v1[2] = 0LL;
    if (result != v1)
    {
      do
      {
        uint64_t v4 = (void *)result[1];
        operator delete(result);
        double result = v4;
      }

      while (v4 != v1);
    }
  }

  return result;
}

void *sub_10004EB94(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = &off_1000794D8;
  v4[1] = 0LL;
  v4[2] = 0LL;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_10004EBDC(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    uint64_t v3 = (void *)sub_1000059D0(v1);
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void sub_10004EBFC(std::__shared_weak_count *a1)
{
}

void sub_10004EC10(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1)
  {
    uint64_t v2 = (void *)sub_1000059D0(v1);
    operator delete(v2);
  }

uint64_t sub_10004EC34(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

void *sub_10004EC74(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = &off_100079550;
  v4[1] = 0LL;
  v4[2] = 0LL;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_10004ECC4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0LL;
  if (v10) {
    sub_10004ED44((uint64_t)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_10004ECE8(std::__shared_weak_count *a1)
{
}

void sub_10004ECFC(uint64_t a1)
{
}

uint64_t sub_10004ED04(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

void sub_10004ED44(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100041BA8(a2 + 16, *(void **)(a2 + 24));
    uint64_t v3 = (void *)sub_1000059D0(a2);
    operator delete(v3);
  }

uint64_t *sub_10004ED7C(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v6 = a1 + 1;
  int v5 = a1[1];
  int v7 = a1 + 1;
  uint64_t v8 = a1 + 1;
  if (v5)
  {
    unint64_t v9 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        unint64_t v10 = v5[4];
        if (v9 >= v10) {
          break;
        }
        int v5 = *v8;
        int v7 = v8;
        if (!*v8) {
          goto LABEL_9;
        }
      }

      if (v10 >= v9) {
        return (uint64_t *)v8;
      }
      int v5 = v8[1];
      if (!v5)
      {
        int v7 = v8 + 1;
        goto LABEL_9;
      }
    }
  }

  else
  {
LABEL_9:
    std::string v11 = (uint64_t *)operator new(0x30uLL);
    v16[1] = v6;
    uint64_t v12 = a3[1];
    v11[4] = *a3;
    v11[5] = v12;
    if (v12)
    {
      uint64_t v13 = (unint64_t *)(v12 + 8);
      do
        unint64_t v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }

    char v17 = 1;
    sub_1000055AC(a1, (uint64_t)v8, v7, v11);
    v16[0] = 0LL;
    sub_10004EE70((uint64_t)v16, 0LL);
  }

  return v11;
}

void sub_10004EE70(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_1000059D0((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }

uint64_t *sub_10004EEB4(uint64_t **a1, void *a2, unint64_t *a3, uint64_t *a4)
{
  unint64_t v6 = (uint64_t **)sub_10004EF78(a1, a2, &v16, &v15, a3);
  int v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    int v7 = (uint64_t *)operator new(0x30uLL);
    v13[1] = a1 + 1;
    uint64_t v9 = a4[1];
    v7[4] = *a4;
    v7[5] = v9;
    if (v9)
    {
      unint64_t v10 = (unint64_t *)(v9 + 8);
      do
        unint64_t v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }

    char v14 = 1;
    sub_1000055AC(a1, v16, v8, v7);
    v13[0] = 0LL;
    sub_10004EE70((uint64_t)v13, 0LL);
  }

  return v7;
}

void *sub_10004EF78(void *a1, void *a2, void *a3, void *a4, unint64_t *a5)
{
  int v5 = a1 + 1;
  if (a1 + 1 == a2 || (unint64_t v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    uint64_t v8 = *a2;
    if ((void *)*a1 == a2)
    {
      unint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }

      else
      {
        *a3 = a2;
        return a2;
      }
    }

    if (v8)
    {
      uint64_t v9 = (void *)*a2;
      do
      {
        unint64_t v10 = v9;
        uint64_t v9 = (void *)v9[1];
      }

      while (v9);
    }

    else
    {
      uint64_t v13 = a2;
      do
      {
        unint64_t v10 = (void *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        uint64_t v13 = v10;
      }

      while (v14);
    }

    unint64_t v15 = *a5;
    if (v10[4] < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          char v17 = v16;
          unint64_t v18 = v16[4];
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = (void *)*v17;
          int v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }

        if (v18 >= v15) {
          break;
        }
        int v5 = v17 + 1;
        uint64_t v16 = (void *)v17[1];
      }

      while (v16);
    }

    else
    {
      char v17 = a1 + 1;
    }

uint64_t *YAML::detail::node_data::empty_scalar(YAML::detail::node_data *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)&qword_10007C7C8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_10007C7C8))
  {
    qword_10007C7B0 = 0LL;
    *(void *)algn_10007C7B8 = 0LL;
    qword_10007C7C0 = 0LL;
    __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10007C7B0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10007C7C8);
  }

  return &qword_10007C7B0;
}

double YAML::detail::node_data::node_data(YAML::detail::node_data *this)
{
  *(_BYTE *)this = 0;
  *(void *)((char *)this + 4) = -1LL;
  *(void *)((char *)this + 12) = 0x1FFFFFFFFLL;
  *((void *)this + 4) = 0LL;
  *((void *)this + 5) = 0LL;
  *((void *)this + 3) = 0LL;
  *((_DWORD *)this + 12) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + sub_10003D0C8(v18 - 72) = 0u;
  *(_OWORD *)((char *)this + 8std::iostream::~basic_iostream(v2, v3 + 8) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((void *)this + 1memset(v42, 0, 7) = (char *)this + 136;
  *((void *)this + 1std::iostream::~basic_iostream(v2, v3 + 8) = (char *)this + 136;
  *((void *)this + 19) = 0LL;
  return result;
}

uint64_t YAML::detail::node_data::mark_defined(uint64_t this)
{
  if (!*(_DWORD *)(this + 16)) {
    *(_DWORD *)(this + 16) = 1;
  }
  *(_BYTE *)this = 1;
  return this;
}

uint64_t YAML::detail::node_data::set_mark(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 12) = *((_DWORD *)a2 + 2);
  *(void *)(result + 4) = v2;
  return result;
}

void *YAML::detail::node_data::set_type(void *result, int a2)
{
  if (a2)
  {
    *(_BYTE *)double result = 1;
    if (*((_DWORD *)result + 4) != a2)
    {
      *((_DWORD *)result + 4) = a2;
      switch(a2)
      {
        case 4:
          result[15] = result[14];
          return sub_10004EB34(result + 17);
        case 3:
          result[11] = result[10];
          result[13] = 0LL;
          break;
        case 2:
          if (*((char *)result + 79) < 0)
          {
            *(_BYTE *)result[7] = 0;
            result[8] = 0LL;
          }

          else
          {
            *((_BYTE *)result + 56) = 0;
            *((_BYTE *)result + 79) = 0;
          }

          break;
      }
    }
  }

  else
  {
    *((_DWORD *)result + 4) = 0;
    *(_BYTE *)double result = 0;
  }

  return result;
}

std::string *YAML::detail::node_data::set_tag(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 1, a2);
}

uint64_t YAML::detail::node_data::set_style(uint64_t result, int a2)
{
  *(_DWORD *)(result + 4std::iostream::~basic_iostream(v2, v3 + 8) = a2;
  return result;
}

uint64_t YAML::detail::node_data::set_null(uint64_t this)
{
  *(_BYTE *)this = 1;
  *(_DWORD *)(this + 16) = 1;
  return this;
}

std::string *YAML::detail::node_data::set_scalar(uint64_t a1, const std::string *a2)
{
  *(_BYTE *)a1 = 1;
  *(_DWORD *)(a1 + 16) = 2;
  return std::string::operator=((std::string *)(a1 + 56), a2);
}

uint64_t YAML::detail::node_data::begin@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  if (!*(_BYTE *)this)
  {
LABEL_5:
    *(_DWORD *)a2 = 0;
    *(void *)(a2 + 16) = 0LL;
    *(void *)(a2 + 24) = 0LL;
    *(void *)(a2 + std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
    return this;
  }

  int v2 = *(_DWORD *)(this + 16);
  if (v2 != 4)
  {
    if (v2 == 3)
    {
      uint64_t v3 = *(void *)(this + 80);
      *(_DWORD *)a2 = 1;
      *(void *)(a2 + 16) = 0LL;
      *(void *)(a2 + 24) = 0LL;
      *(void *)(a2 + std::iostream::~basic_iostream(v2, v3 + 8) = v3;
      return this;
    }

    goto LABEL_5;
  }

  return sub_10004FA3C(a2, *(_BYTE *****)(this + 112), *(_BYTE *****)(this + 120));
}

uint64_t YAML::detail::node_data::end@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  if (!*(_BYTE *)this)
  {
LABEL_5:
    *(_DWORD *)a2 = 0;
    *(void *)(a2 + 16) = 0LL;
    *(void *)(a2 + 24) = 0LL;
    *(void *)(a2 + std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
    return this;
  }

  int v2 = *(_DWORD *)(this + 16);
  if (v2 != 4)
  {
    if (v2 == 3)
    {
      uint64_t v3 = *(void *)(this + 88);
      *(_DWORD *)a2 = 1;
      *(void *)(a2 + 16) = 0LL;
      *(void *)(a2 + 24) = 0LL;
      *(void *)(a2 + std::iostream::~basic_iostream(v2, v3 + 8) = v3;
      return this;
    }

    goto LABEL_5;
  }

  return sub_10004FA3C(a2, *(_BYTE *****)(this + 120), *(_BYTE *****)(this + 120));
}

void YAML::detail::node_data::push_back(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  if (v4 > 1)
  {
    if (v4 != 3)
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
      sub_10004F4B0(exception);
    }
  }

  else
  {
    *(_DWORD *)(a1 + 16) = 3;
    *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *(void *)(a1 + 80);
    *(void *)(a1 + 104) = 0LL;
  }

  uint64_t v5 = a1 + 96;
  unint64_t v6 = *(void *)(a1 + 96);
  unint64_t v7 = *(void **)(a1 + 88);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = *(void *)(a1 + 80);
    uint64_t v10 = ((uint64_t)v7 - v9) >> 3;
    uint64_t v11 = v6 - v9;
    uint64_t v12 = v11 >> 2;
    else {
      unint64_t v13 = v12;
    }
    if (v13) {
      BOOL v14 = (char *)sub_10004FA94(v5, v13);
    }
    else {
      BOOL v14 = 0LL;
    }
    unint64_t v15 = &v14[8 * v10];
    uint64_t v16 = &v14[8 * v13];
    *(void *)unint64_t v15 = a2;
    uint64_t v8 = v15 + 8;
    unint64_t v18 = *(char **)(a1 + 80);
    char v17 = *(char **)(a1 + 88);
    if (v17 != v18)
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v15 - 1) = v19;
        v15 -= 8;
      }

      while (v17 != v18);
      char v17 = *(char **)(a1 + 80);
    }

    *(void *)(a1 + 80) = v15;
    *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v8;
    *(void *)(a1 + 96) = v16;
    if (v17) {
      operator delete(v17);
    }
  }

  else
  {
    void *v7 = a2;
    uint64_t v8 = v7 + 1;
  }

  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v8;
}

void sub_10004F49C(_Unwind_Exception *a1)
{
}

void YAML::detail::node_data::insert(uint64_t a1, _BYTE ***a2, _BYTE ***a3, uint64_t ****a4)
{
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (v7 < 2 || v7 == 3)
  {
    uint64_t v9 = a4[1];
    v15[0] = *a4;
    v15[1] = v9;
    if (v9)
    {
      uint64_t v10 = (unint64_t *)(v9 + 1);
      do
        unint64_t v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }

    YAML::detail::node_data::convert_to_map(a1, v15);
    if (v9)
    {
      uint64_t v12 = (unint64_t *)(v9 + 1);
      do
        unint64_t v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(uint64_t ***))(*v9)[2])(v9);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v9);
      }
    }
  }

  else if (v7 == 2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
    sub_10004F69C(exception);
  }

  YAML::detail::node_data::insert_map_pair((void *)a1, a2, a3);
}

void sub_10004F59C(_Unwind_Exception *a1)
{
}

void YAML::detail::node_data::convert_to_map(uint64_t a1, uint64_t ****a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  if (v3 < 2)
  {
    *(void *)(a1 + 120) = *(void *)(a1 + 112);
    sub_10004EB34((void *)(a1 + 136));
    *(_DWORD *)(a1 + 16) = 4;
  }

  else if (v3 == 3)
  {
    unsigned int v4 = a2[1];
    v9[0] = *a2;
    v9[1] = v4;
    if (v4)
    {
      uint64_t v5 = (unint64_t *)(v4 + 1);
      do
        unint64_t v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }

    YAML::detail::node_data::convert_sequence_to_map(a1, v9);
    if (v4)
    {
      unsigned int v7 = (unint64_t *)(v4 + 1);
      do
        unint64_t v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(uint64_t ***))(*v4)[2])(v4);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
      }
    }
  }

  else if (v3 == 2)
  {
    sub_10004FB6C();
  }

void sub_10004F688( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void YAML::detail::node_data::insert_map_pair(void *a1, _BYTE ***a2, _BYTE ***a3)
{
  unint64_t v8 = a1[16];
  uint64_t v6 = (uint64_t)(a1 + 16);
  unint64_t v7 = v8;
  uint64_t v9 = *(void **)(v6 - 8);
  if ((unint64_t)v9 >= v8)
  {
    unint64_t v11 = (void **)(v6 - 16);
    uint64_t v12 = *(void *)(v6 - 16);
    uint64_t v13 = ((uint64_t)v9 - v12) >> 4;
    unint64_t v14 = v13 + 1;
    uint64_t v15 = v7 - v12;
    if (v15 >> 3 > v14) {
      unint64_t v14 = v15 >> 3;
    }
    else {
      unint64_t v16 = v14;
    }
    char v17 = (char *)sub_100028644(v6, v16);
    unint64_t v18 = &v17[16 * v13];
    uint64_t v20 = &v17[16 * v19];
    *(void *)unint64_t v18 = a2;
    *((void *)v18 + 1) = a3;
    uint64_t v10 = v18 + 16;
    unint64_t v22 = (char *)a1[14];
    uint64_t v21 = (char *)a1[15];
    if (v21 != v22)
    {
      do
      {
        *((_OWORD *)v18 - 1) = *((_OWORD *)v21 - 1);
        v18 -= 16;
        v21 -= 16;
      }

      while (v21 != v22);
      uint64_t v21 = (char *)*v11;
    }

    a1[14] = v18;
    a1[15] = v10;
    a1[16] = v20;
    if (v21) {
      operator delete(v21);
    }
  }

  else
  {
    void *v9 = a2;
    v9[1] = a3;
    uint64_t v10 = v9 + 2;
  }

  a1[15] = v10;
  if (!***a2 || !***a3)
  {
    int v23 = operator new(0x20uLL);
    void v23[2] = a2;
    v23[3] = a3;
    uint64_t v25 = a1[17];
    int v24 = a1 + 17;
    void *v23 = v25;
    v23[1] = v24;
    *(void *)(v25 + std::iostream::~basic_iostream(v2, v3 + 8) = v23;
    void *v24 = v23;
    ++v24[2];
  }

void *YAML::detail::node_data::convert_sequence_to_map(uint64_t a1, uint64_t ****a2)
{
  if (*(_DWORD *)(a1 + 16) != 3) {
    sub_10004FB94();
  }
  *(void *)(a1 + 120) = *(void *)(a1 + 112);
  double result = sub_10004EB34((void *)(a1 + 136));
  uint64_t v4 = *(void *)(a1 + 88);
  if (v4 != *(void *)(a1 + 80))
  {
    unint64_t v5 = 0LL;
    do
    {
      sub_100023250((uint64_t)v13);
      std::ostream::operator<<(&v14, v5);
      node = (uint64_t **)YAML::detail::memory::create_node(**a2);
      std::stringbuf::str(&__str, &v15);
      sub_100041B08((uint64_t)node);
      uint64_t v10 = **node;
      *(_BYTE *)uint64_t v10 = 1;
      *(_DWORD *)(v10 + 16) = 2;
      std::string::operator=((std::string *)(v10 + 56), &__str);
      YAML::detail::node_data::insert_map_pair( (void *)a1,  (_BYTE ***)node,  *(_BYTE ****)(*(void *)(a1 + 80) + 8 * v5));
      v13[0] = v6;
      *(void *)((char *)v13 + *(void *)(v6 - 24)) = v7;
      uint64_t v14 = v8;
      std::streambuf::~streambuf(&v15);
      double result = (void *)std::ios::~ios(&v16);
      ++v5;
      uint64_t v4 = *(void *)(a1 + 80);
    }

    while (v5 < (*(void *)(a1 + 88) - v4) >> 3);
  }

  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v4;
  *(void *)(a1 + 104) = 0LL;
  *(_DWORD *)(a1 + 16) = 4;
  return result;
}

void sub_10004F964( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

void *sub_10004F998(void *a1)
{
  uint64_t v5 = -1LL;
  int v6 = -1;
  sub_1000021BC(__p, "appending to a non-sequence");
  sub_1000413D8((uint64_t)a1, &v5, (uint64_t)__p);
  *a1 = off_1000792E0;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  *a1 = off_1000793A0;
  return a1;
}

void sub_10004FA20( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10004FA3C(uint64_t result, _BYTE ****a2, _BYTE ****a3)
{
  *(_DWORD *)double result = 2;
  *(void *)(result + std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
  *(void *)(result + 16) = a2;
  *(void *)(result + 24) = a3;
  if (a3 != a2)
  {
    while (!****a2 || !***a2[1])
    {
      a2 += 2;
      if (a2 == a3)
      {
        a2 = a3;
        break;
      }
    }
  }

  *(void *)(result + 16) = a2;
  return result;
}

void *sub_10004FA94(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_1000022F4();
  }
  return operator new(8 * a2);
}

void *sub_10004FAC8(void *a1)
{
  uint64_t v5 = -1LL;
  int v6 = -1;
  sub_1000021BC(__p, "operator[] call on a scalar");
  sub_1000413D8((uint64_t)a1, &v5, (uint64_t)__p);
  *a1 = off_1000792E0;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  *a1 = off_100079420;
  return a1;
}

void sub_10004FB50( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10004FB6C()
{
}

void sub_10004FB94()
{
  __assert_rtn("convert_sequence_to_map", "node_data.cpp", 300, "m_type == NodeType::Sequence");
}

YAML::NodeBuilder *YAML::NodeBuilder::NodeBuilder(YAML::NodeBuilder *this)
{
  *(void *)this = off_1000795C8;
  int v2 = (void *)((char *)this + 8);
  unsigned int v3 = operator new(0x10uLL);
  char v4 = operator new(0x18uLL);
  v4[2] = 0LL;
  v4[1] = 0LL;
  *char v4 = v4 + 1;
  sub_100041974(v3, (uint64_t)v4);
  sub_10004184C(v2, (uint64_t)v3);
  *(_OWORD *)((char *)this + sub_10003D0C8(v18 - 72) = 0u;
  *((void *)this + 13) = 0LL;
  *(_OWORD *)((char *)this + 8std::iostream::~basic_iostream(v2, v3 + 8) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v5 = sub_10004FA94((uint64_t)this + 72, 1uLL);
  uint64_t v7 = &v5[v6];
  void *v5 = 0LL;
  uint64_t v8 = v5 + 1;
  uint64_t v10 = (char *)*((void *)this + 7);
  uint64_t v9 = (char *)*((void *)this + 8);
  if (v9 != v10)
  {
    do
    {
      uint64_t v11 = *((void *)v9 - 1);
      v9 -= 8;
      *--uint64_t v5 = v11;
    }

    while (v9 != v10);
    uint64_t v9 = (char *)*((void *)this + 7);
  }

  *((void *)this + memset(v42, 0, 7) = v5;
  *((void *)this + std::iostream::~basic_iostream(v2, v3 + 8) = v8;
  *((void *)this + 9) = v7;
  if (v9) {
    operator delete(v9);
  }
  *((void *)this + std::iostream::~basic_iostream(v2, v3 + 8) = v8;
  return this;
}

void sub_10004FC98(_Unwind_Exception *a1)
{
  char v4 = (void *)v1[10];
  if (v4)
  {
    v1[11] = v4;
    operator delete(v4);
  }

  uint64_t v5 = (void *)v1[7];
  if (v5)
  {
    v1[8] = v5;
    operator delete(v5);
  }

  uint64_t v6 = (void *)v1[4];
  if (v6)
  {
    v1[5] = v6;
    operator delete(v6);
  }

  sub_1000059D0(v2);
  _Unwind_Resume(a1);
}

void YAML::NodeBuilder::~NodeBuilder(YAML::NodeBuilder *this)
{
  *(void *)this = off_1000795C8;
  uint64_t v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 11) = v2;
    operator delete(v2);
  }

  unsigned int v3 = (void *)*((void *)this + 7);
  if (v3)
  {
    *((void *)this + std::iostream::~basic_iostream(v2, v3 + 8) = v3;
    operator delete(v3);
  }

  char v4 = (void *)*((void *)this + 4);
  if (v4)
  {
    *((void *)this + 5) = v4;
    operator delete(v4);
  }

  sub_1000059D0((uint64_t)this + 8);
}

{
  void *v1;
  YAML::NodeBuilder::~NodeBuilder(this);
  operator delete(v1);
}

void YAML::NodeBuilder::Root(YAML::NodeBuilder *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 1);
    char v4 = (std::__shared_weak_count *)*((void *)this + 2);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        unint64_t v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      *(_BYTE *)a2 = 1;
      *(void *)(a2 + std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
      *(void *)(a2 + 16) = 0LL;
      *(void *)(a2 + 24) = 0LL;
      *(void *)(a2 + 32) = v3;
      *(void *)(a2 + 40) = v4;
      do
        unint64_t v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      *(void *)(a2 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v2;
      do
        unint64_t v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }

    else
    {
      *(_BYTE *)a2 = 1;
      *(void *)(a2 + std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
      *(void *)(a2 + 16) = 0LL;
      *(void *)(a2 + 24) = 0LL;
      *(void *)(a2 + 32) = v3;
      *(void *)(a2 + 40) = 0LL;
      *(void *)(a2 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v2;
    }
  }

  else
  {
    *(_BYTE *)a2 = 1;
    *(_OWORD *)(a2 + std::iostream::~basic_iostream(v2, v3 + 8) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
  }

void YAML::NodeBuilder::OnNull(YAML::NodeBuilder *a1, uint64_t *a2, uint64_t a3)
{
  char v4 = YAML::NodeBuilder::Push((uint64_t)a1, a2, a3);
  sub_100041B08((uint64_t)v4);
  YAML::detail::node_data::set_null(**v4);
  YAML::NodeBuilder::Pop(a1);
}

uint64_t **YAML::NodeBuilder::Push(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  node = (uint64_t **)YAML::detail::memory::create_node(**(uint64_t ****)(a1 + 8));
  YAML::detail::node_data::set_mark(**node, a2);
  YAML::NodeBuilder::RegisterAnchor((void *)a1, a3, (uint64_t)node);
  YAML::NodeBuilder::Push((void *)a1, (uint64_t)node);
  return node;
}

void YAML::NodeBuilder::Pop(YAML::NodeBuilder *this)
{
  unsigned __int8 v1 = (char *)*((void *)this + 4);
  uint64_t v2 = (char *)*((void *)this + 5);
  if (v1 == v2) {
    sub_100050884();
  }
  if (v2 - v1 == 8)
  {
    *((void *)this + 3) = *(void *)v1;
    *((void *)this + 5) = v2 - 8;
    return;
  }

  unint64_t v6 = (_BYTE ***)*((void *)v2 - 1);
  uint64_t v5 = v2 - 8;
  char v4 = v6;
  *((void *)this + 5) = v5;
  unint64_t v7 = (uint64_t **)*((void *)v5 - 1);
  uint64_t v8 = **v7;
  if (!*(_BYTE *)v8) {
    goto LABEL_30;
  }
  int v9 = *(_DWORD *)(v8 + 16);
  if (v9 != 4)
  {
    if (v9 == 3)
    {
      uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 2);
      uint64_t v26 = *((void *)this + 1);
      char v27 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          unint64_t v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }

      sub_1000505CC(v7, (uint64_t)v4, &v26);
      uint64_t v13 = v27;
      if (v27)
      {
        uint64_t v14 = (unint64_t *)&v27->__shared_owners_;
        do
          unint64_t v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }

      return;
    }

LABEL_30:
    sub_1000508AC();
  }

  uint64_t v16 = *((void *)this + 11);
  if (*((void *)this + 10) == v16) {
    sub_1000508D4();
  }
  if (*(_BYTE *)(v16 - 8))
  {
    char v17 = *(_BYTE ****)(v16 - 16);
    unint64_t v18 = (std::__shared_weak_count *)*((void *)this + 2);
    uint64_t v24 = *((void *)this + 1);
    uint64_t v25 = v18;
    if (v18)
    {
      uint64_t v19 = (unint64_t *)&v18->__shared_owners_;
      do
        unint64_t v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }

    sub_100050684(v7, v17, v4, &v24);
    uint64_t v21 = v25;
    if (v25)
    {
      unint64_t v22 = (unint64_t *)&v25->__shared_owners_;
      do
        unint64_t v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }

    *((void *)this + 11) -= 16LL;
  }

  else
  {
    *(_BYTE *)(v16 - std::iostream::~basic_iostream(v2, v3 + 8) = 1;
  }

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    uint64_t v25 = 1LL;
  }
  else {
    uint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&uint64_t v54 = sub_10004FA94((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&int v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0x1000uLL);
  sub_100055434(&v54, &v53);
  char v27 = (void *)a1[2];
  BOOL v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_100055548((uint64_t)&v54, v27);
  }

  char v29 = (char *)*a1;
  std::string v30 = v54;
  uint64_t v31 = v55;
  *(void *)&uint64_t v54 = *a1;
  *((void *)&v54 + 1) = v27;
  std::string v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  int v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&int v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    uint64_t v25 = 1LL;
  }
  else {
    uint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&uint64_t v54 = sub_10004FA94((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&int v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0xFF0uLL);
  sub_100055434(&v54, &v53);
  char v27 = (void *)a1[2];
  BOOL v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_100055548((uint64_t)&v54, v27);
  }

  char v29 = (char *)*a1;
  std::string v30 = v54;
  uint64_t v31 = v55;
  *(void *)&uint64_t v54 = *a1;
  *((void *)&v54 + 1) = v27;
  std::string v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  int v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&int v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    uint64_t v25 = 1LL;
  }
  else {
    uint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&uint64_t v54 = sub_10004FA94((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&int v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0x1000uLL);
  sub_100055434(&v54, &v53);
  char v27 = (void *)a1[2];
  BOOL v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_100055548((uint64_t)&v54, v27);
  }

  char v29 = (char *)*a1;
  std::string v30 = v54;
  uint64_t v31 = v55;
  *(void *)&uint64_t v54 = *a1;
  *((void *)&v54 + 1) = v27;
  std::string v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  int v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&int v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    uint64_t v25 = 1LL;
  }
  else {
    uint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&uint64_t v54 = sub_10004FA94((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&int v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0xFF0uLL);
  sub_100055434(&v54, &v53);
  char v27 = (void *)a1[2];
  BOOL v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_100055548((uint64_t)&v54, v27);
  }

  char v29 = (char *)*a1;
  std::string v30 = v54;
  uint64_t v31 = v55;
  *(void *)&uint64_t v54 = *a1;
  *((void *)&v54 + 1) = v27;
  std::string v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  int v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&int v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    uint64_t v25 = 1LL;
  }
  else {
    uint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&uint64_t v54 = sub_10004FA94((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&int v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0x1000uLL);
  sub_100055434(&v54, &v53);
  char v27 = (void *)a1[2];
  BOOL v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_100055548((uint64_t)&v54, v27);
  }

  char v29 = (char *)*a1;
  std::string v30 = v54;
  uint64_t v31 = v55;
  *(void *)&uint64_t v54 = *a1;
  *((void *)&v54 + 1) = v27;
  std::string v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  int v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&int v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    uint64_t v25 = 1LL;
  }
  else {
    uint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&uint64_t v54 = sub_10004FA94((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&int v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0x1000uLL);
  sub_100055434(&v54, &v53);
  char v27 = (void *)a1[2];
  BOOL v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_100055548((uint64_t)&v54, v27);
  }

  char v29 = (char *)*a1;
  std::string v30 = v54;
  uint64_t v31 = v55;
  *(void *)&uint64_t v54 = *a1;
  *((void *)&v54 + 1) = v27;
  std::string v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  int v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&int v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_10005006C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void YAML::NodeBuilder::OnAlias(YAML::NodeBuilder *a1, uint64_t a2, uint64_t a3)
{
}

void YAML::NodeBuilder::Push(void *a1, uint64_t a2)
{
  char v4 = (void *)a1[4];
  unint64_t v6 = (void *)a1[5];
  uint64_t v5 = (void **)(a1 + 4);
  if (v4 == v6 || (uint64_t v7 = **(void **)*(v6 - 1), !*(_BYTE *)v7) || *(_DWORD *)(v7 + 16) != 4)
  {
    uint64_t v15 = (uint64_t)(a1 + 6);
    unint64_t v16 = a1[6];
    if ((unint64_t)v6 >= v16)
    {
      uint64_t v18 = v6 - v4;
      uint64_t v19 = v16 - (void)v4;
      uint64_t v20 = v19 >> 2;
      else {
        unint64_t v21 = v20;
      }
      if (v21) {
        unint64_t v22 = (char *)sub_10004FA94(v15, v21);
      }
      else {
        unint64_t v22 = 0LL;
      }
      unint64_t v23 = &v22[8 * v18];
      uint64_t v24 = &v22[8 * v21];
      *(void *)unint64_t v23 = a2;
      char v17 = v23 + 8;
      uint64_t v26 = (char *)a1[4];
      uint64_t v25 = (char *)a1[5];
      if (v25 != v26)
      {
        do
        {
          uint64_t v27 = *((void *)v25 - 1);
          v25 -= 8;
          *((void *)v23 - 1) = v27;
          v23 -= 8;
        }

        while (v25 != v26);
        uint64_t v25 = (char *)*v5;
      }

      a1[4] = v23;
      a1[5] = v17;
      a1[6] = v24;
      if (v25) {
        operator delete(v25);
      }
    }

    else
    {
      void *v6 = a2;
      char v17 = v6 + 1;
    }

    a1[5] = v17;
    return;
  }

  uint64_t v9 = a1[10];
  uint64_t v10 = a1[11];
  uint64_t v8 = (char **)(a1 + 10);
  unint64_t v11 = a1[13];
  uint64_t v12 = (uint64_t)(a1 + 6);
  unint64_t v13 = a1[6];
  if ((unint64_t)v6 >= v13)
  {
    uint64_t v28 = v6 - v4;
    if (!((unint64_t)(v28 + 1) >> 61))
    {
      uint64_t v29 = v13 - (void)v4;
      uint64_t v30 = v29 >> 2;
      else {
        unint64_t v31 = v30;
      }
      if (v31) {
        std::string v32 = (char *)sub_10004FA94(v12, v31);
      }
      else {
        std::string v32 = 0LL;
      }
      __int128 v33 = &v32[8 * v28];
      std::string v34 = &v32[8 * v31];
      *(void *)__int128 v33 = a2;
      uint64_t v14 = v33 + 8;
      uint64_t v36 = (char *)a1[4];
      uint64_t v35 = (char *)a1[5];
      if (v35 != v36)
      {
        do
        {
          uint64_t v37 = *((void *)v35 - 1);
          v35 -= 8;
          *((void *)v33 - 1) = v37;
          v33 -= 8;
        }

        while (v35 != v36);
        uint64_t v35 = (char *)*v5;
      }

      a1[4] = v33;
      a1[5] = v14;
      a1[6] = v34;
      if (v35) {
        operator delete(v35);
      }
      goto LABEL_38;
    }

void YAML::NodeBuilder::OnScalar( YAML::NodeBuilder *a1, uint64_t *a2, const std::string *a3, uint64_t a4, const std::string *a5)
{
  uint64_t v8 = YAML::NodeBuilder::Push((uint64_t)a1, a2, a4);
  sub_100041B08((uint64_t)v8);
  YAML::detail::node_data::set_scalar(**v8, a5);
  sub_100041B08((uint64_t)v8);
  YAML::detail::node_data::set_tag((std::string *)**v8, a3);
  YAML::NodeBuilder::Pop(a1);
}

uint64_t YAML::NodeBuilder::OnSequenceStart( uint64_t a1, uint64_t *a2, const std::string *a3, uint64_t a4, int a5)
{
  uint64_t v7 = YAML::NodeBuilder::Push(a1, a2, a4);
  sub_100041B08((uint64_t)v7);
  YAML::detail::node_data::set_tag((std::string *)**v7, a3);
  sub_100041B08((uint64_t)v7);
  YAML::detail::node_data::set_type((void *)**v7, 3);
  sub_100041B08((uint64_t)v7);
  return YAML::detail::node_data::set_style(**v7, a5);
}

uint64_t YAML::NodeBuilder::OnMapStart(uint64_t a1, uint64_t *a2, const std::string *a3, uint64_t a4, int a5)
{
  uint64_t v8 = YAML::NodeBuilder::Push(a1, a2, a4);
  sub_100041B08((uint64_t)v8);
  YAML::detail::node_data::set_type((void *)**v8, 4);
  sub_100041B08((uint64_t)v8);
  YAML::detail::node_data::set_tag((std::string *)**v8, a3);
  sub_100041B08((uint64_t)v8);
  uint64_t result = YAML::detail::node_data::set_style(**v8, a5);
  ++*(void *)(a1 + 104);
  return result;
}

void YAML::NodeBuilder::OnMapEnd(YAML::NodeBuilder *this)
{
  uint64_t v1 = *((void *)this + 13);
  if (!v1) {
    sub_1000508FC();
  }
  *((void *)this + 13) = v1 - 1;
  YAML::NodeBuilder::Pop(this);
}

void YAML::NodeBuilder::RegisterAnchor(void *a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v5 = a1[7];
    uint64_t v7 = (void *)a1[8];
    unint64_t v6 = (void **)(a1 + 7);
    uint64_t v9 = (uint64_t)(a1 + 9);
    unint64_t v10 = a1[9];
    if ((unint64_t)v7 >= v10)
    {
      uint64_t v12 = v10 - v5;
      uint64_t v13 = v12 >> 2;
      else {
        unint64_t v14 = v13;
      }
      if (v14) {
        uint64_t v15 = (char *)sub_10004FA94(v9, v14);
      }
      else {
        uint64_t v15 = 0LL;
      }
      unint64_t v16 = &v15[8 * a2];
      char v17 = &v15[8 * v14];
      *(void *)unint64_t v16 = a3;
      unint64_t v11 = v16 + 8;
      uint64_t v19 = (char *)a1[7];
      uint64_t v18 = (char *)a1[8];
      if (v18 != v19)
      {
        do
        {
          uint64_t v20 = *((void *)v18 - 1);
          v18 -= 8;
          *((void *)v16 - 1) = v20;
          v16 -= 8;
        }

        while (v18 != v19);
        uint64_t v18 = (char *)*v6;
      }

      a1[7] = v16;
      a1[8] = v11;
      a1[9] = v17;
      if (v18) {
        operator delete(v18);
      }
    }

    else
    {
      void *v7 = a3;
      unint64_t v11 = v7 + 1;
    }

    a1[8] = v11;
  }

void sub_1000505CC(uint64_t **a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a1;
  unint64_t v6 = (std::__shared_weak_count *)a3[1];
  uint64_t v12 = *a3;
  uint64_t v13 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      unint64_t v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }

  sub_100050754(v5, a2, (uint64_t)&v12);
  uint64_t v9 = v13;
  if (v13)
  {
    unint64_t v10 = (unint64_t *)&v13->__shared_owners_;
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  sub_1000443E4(a2, (uint64_t)a1);
}

void sub_100050670( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100050684(uint64_t **a1, _BYTE ***a2, _BYTE ***a3, uint64_t *a4)
{
  uint64_t v7 = *a1;
  unint64_t v8 = (std::__shared_weak_count *)a4[1];
  uint64_t v14 = *a4;
  uint64_t v15 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }

  sub_1000507EC(v7, a2, a3, (uint64_t)&v14);
  unint64_t v11 = v15;
  if (v15)
  {
    uint64_t v12 = (unint64_t *)&v15->__shared_owners_;
    do
      unint64_t v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  sub_1000443E4((uint64_t)a2, (uint64_t)a1);
  sub_1000443E4((uint64_t)a3, (uint64_t)a1);
}

void sub_10005073C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100050754(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  char v4 = *(std::__shared_weak_count **)(a3 + 8);
  uint64_t v9 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }

  YAML::detail::node_data::push_back(v3, a2);
  if (v9)
  {
    uint64_t v7 = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

void sub_1000507D8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000507EC(uint64_t *a1, _BYTE ***a2, _BYTE ***a3, uint64_t a4)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(std::__shared_weak_count **)(a4 + 8);
  unint64_t v11 = *(uint64_t ****)a4;
  uint64_t v12 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      unint64_t v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }

  YAML::detail::node_data::insert(v4, a2, a3, &v11);
  unint64_t v8 = v12;
  if (v12)
  {
    uint64_t v9 = (unint64_t *)&v12->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

void sub_100050870( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100050884()
{
}

void sub_1000508AC()
{
}

void sub_1000508D4()
{
}

void sub_1000508FC()
{
}

void sub_100050924()
{
  __assert_rtn("RegisterAnchor", "nodebuilder.cpp", 131, "anchor == m_anchors.size()");
}

BOOL YAML::IsNullString(unsigned __int8 **a1)
{
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    int v1 = *((unsigned __int8 *)a1 + 23);
    if (!*((_BYTE *)a1 + 23)) {
      return 1LL;
    }
    if (v1 == 1) {
      return *(_BYTE *)a1 == 126;
    }
    if (v1 == 4)
    {
      if ((*(_DWORD *)a1 & 0xFFFFFFDF) != 0x6C6C754E) {
        return *(_DWORD *)a1 == 1280070990;
      }
      return 1LL;
    }

    return 0LL;
  }

  uint64_t v2 = a1[1];
  if (!v2) {
    return 1LL;
  }
  if (v2 != (unsigned __int8 *)1 || (BOOL v3 = **a1 == 126, **a1 != 126))
  {
    if (v2 == (unsigned __int8 *)4)
    {
      if (*(_DWORD *)*a1 == 1819047278) {
        return 1LL;
      }
      if (a1[1] == (unsigned __int8 *)4)
      {
        if (*(_DWORD *)*a1 == 1819047246) {
          return 1LL;
        }
        if (a1[1] == (unsigned __int8 *)4)
        {
          a1 = (unsigned __int8 **)*a1;
          return *(_DWORD *)a1 == 1280070990;
        }
      }
    }

    return 0LL;
  }

  return v3;
}

void YAML::Load(uint64_t a1@<X8>)
{
  if ((YAML::Parser::HandleNextDocument(v3, (uint64_t)v2) & 1) != 0)
  {
    YAML::NodeBuilder::Root((YAML::NodeBuilder *)v2, a1);
  }

  else
  {
    *(_BYTE *)a1 = 1;
    *(_OWORD *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
  }

  YAML::NodeBuilder::~NodeBuilder((YAML::NodeBuilder *)v2);
  YAML::Parser::~Parser((YAML::Parser *)v3);
}

void sub_100050ABC(_Unwind_Exception *a1)
{
}

uint64_t YAML::LoadFile@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  else {
    uint64_t v3 = *(void *)a1;
  }
  sub_100050C14(v6, v3, 8);
  if ((v7[(unint64_t)*(v6[0] - 3) + 16] & 5) != 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
    sub_100050D20(exception);
  }

  YAML::Load(a2);
  std::filebuf::~filebuf(v7);
  return std::ios::~ios(&v8);
}

void sub_100050BE8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
}

void (__cdecl ***sub_100050C14( void (__cdecl ***a1)(std::ifstream *__hidden this), uint64_t a2, int a3))(std::ifstream *__hidden this)
{
  unint64_t v6 = a1 + 2;
  *a1 = v7;
  *(void *)((char *)*(v7 - 3) + (void)a1) = v8;
  a1[1] = 0LL;
  uint64_t v9 = (std::ios_base *)((char *)*(*a1 - 3) + (void)a1);
  std::ios_base::init(v9, a1 + 2);
  v9[1].__vftable = 0LL;
  v9[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf(v6);
  if (!std::filebuf::open(v6, a2, a3 | 8u)) {
    std::ios_base::clear( (std::ios_base *)((char *)*(*a1 - 3) + (void)a1),  *(_DWORD *)((char *)*(*a1 - 3) + (void)a1 + 32) | 4);
  }
  return a1;
}

void sub_100050CE8(_Unwind_Exception *a1)
{
}

void *sub_100050D20(void *a1)
{
  uint64_t v5 = -1LL;
  int v6 = -1;
  sub_1000021BC(__p, "bad file");
  sub_1000413D8((uint64_t)a1, &v5, (uint64_t)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  *a1 = off_1000793E0;
  return a1;
}

void sub_100050D98( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void YAML::Parser::Load(uint64_t a1)
{
  uint64_t v2 = (YAML::Scanner *)operator new(0x140uLL);
  YAML::Scanner::Scanner();
  sub_100050EA0((YAML::Scanner **)a1, v2);
  uint64_t v3 = (YAML::Directives *)operator new(0x28uLL);
  YAML::Directives::Directives(v3);
  sub_100050ECC((void ***)(a1 + 8), (void **)v3);
}

void sub_100050E14(_Unwind_Exception *a1)
{
}

void *YAML::Parser::Parser(void *a1)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  YAML::Parser::Load((uint64_t)a1);
  return a1;
}

void sub_100050E54(_Unwind_Exception *a1)
{
}

void YAML::Parser::~Parser(YAML::Parser *this)
{
}

void sub_100050EA0(YAML::Scanner **a1, YAML::Scanner *a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    YAML::Scanner::~Scanner(v3);
    operator delete(v4);
  }

void sub_100050ECC(void ***a1, void **a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    sub_100028914((uint64_t)(v2 + 2), v2[3]);
    operator delete(v2);
  }

uint64_t YAML::Parser::HandleNextDocument(YAML::Scanner **a1, uint64_t a2)
{
  if (!*a1) {
    return 0LL;
  }
  YAML::Parser::ParseDirectives(a1);
  if (YAML::Scanner::empty(*a1)) {
    return 0LL;
  }
  YAML::SingleDocParser::SingleDocParser((YAML::SingleDocParser *)v5, *a1, a1[1]);
  YAML::SingleDocParser::HandleDocument((uint64_t)v5, a2);
  YAML::SingleDocParser::~SingleDocParser(v5);
  return 1LL;
}

void sub_100050F78(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t YAML::Parser::ParseDirectives(YAML::Scanner **this)
{
  uint64_t result = YAML::Scanner::empty(*this);
  if ((result & 1) == 0)
  {
    char v3 = 0;
    do
    {
      uint64_t result = YAML::Scanner::peek(*this);
      if (*(_DWORD *)(result + 4)) {
        break;
      }
      uint64_t v4 = result;
      if ((v3 & 1) == 0)
      {
        uint64_t v5 = (YAML::Directives *)operator new(0x28uLL);
        YAML::Directives::Directives(v5);
        sub_100050ECC((void ***)this + 1, (void **)v5);
      }

      YAML::Parser::HandleDirective((uint64_t)this, v4);
      YAML::Scanner::pop((int64x2_t *)*this);
      uint64_t result = YAML::Scanner::empty(*this);
      char v3 = 1;
    }

    while (!(_DWORD)result);
  }

  return result;
}

void sub_10005101C(_Unwind_Exception *a1)
{
}

uint64_t YAML::Parser::HandleDirective(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (_DWORD *)(a2 + 24);
  if (*(char *)(a2 + 47) < 0)
  {
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4 != 3)
    {
      if (v4 == 4 && **(_DWORD **)v2 == 1280131417) {
        return YAML::Parser::HandleYamlDirective(a1, a2);
      }
      return a1;
    }

    uint64_t v2 = *(_DWORD **)v2;
LABEL_11:
    int v5 = *(unsigned __int16 *)v2;
    int v6 = *((unsigned __int8 *)v2 + 2);
    if (v5 == 16724 && v6 == 71) {
      return (uint64_t)YAML::Parser::HandleTagDirective(a1, a2);
    }
    return a1;
  }

  int v3 = *(unsigned __int8 *)(a2 + 47);
  if (v3 == 3) {
    goto LABEL_11;
  }
  if (v3 == 4 && *v2 == 1280131417) {
    return YAML::Parser::HandleYamlDirective(a1, a2);
  }
  return a1;
}

uint64_t YAML::Parser::HandleYamlDirective(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + 48;
  int v3 = *(const std::string **)(a2 + 48);
  if (*(void *)(v4 + 8) - (void)v3 != 24LL)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
    sub_1000021BC(v22, "YAML directives must have exactly one argument");
    sub_1000413D8((uint64_t)exception, (_DWORD *)(a2 + 8), (uint64_t)v22);
    void *exception = off_1000792A0;
  }

  if (!**(_BYTE **)(a1 + 8))
  {
    char v17 = __cxa_allocate_exception(0x38uLL);
    sub_1000021BC(v22, "repeated YAML directive");
    sub_1000413D8((uint64_t)v17, (_DWORD *)(a2 + 8), (uint64_t)v22);
    void *v17 = off_1000792A0;
  }

  sub_10000196C(v22, v3, 24);
  std::istream::operator>>(v22, *(void *)(a1 + 8) + 4LL);
  std::istream::get(v22);
  std::istream::operator>>(v22, *(void *)(a1 + 8) + 8LL);
  if ((*((_BYTE *)&v23[1] + (unint64_t)*(v22[0] - 3)) & 5) != 0 || std::istream::peek(v22) != -1)
  {
    uint64_t v9 = __cxa_allocate_exception(0x38uLL);
    sub_1000021BC(&v19, "bad YAML version: ");
    uint64_t v10 = *(void *)(a2 + 48);
    int v11 = *(char *)(v10 + 23);
    if (v11 >= 0) {
      uint64_t v12 = *(const std::string::value_type **)(a2 + 48);
    }
    else {
      uint64_t v12 = *(const std::string::value_type **)v10;
    }
    if (v11 >= 0) {
      std::string::size_type v13 = *(unsigned __int8 *)(v10 + 23);
    }
    else {
      std::string::size_type v13 = *(void *)(v10 + 8);
    }
    uint64_t v14 = std::string::append(&v19, v12, v13);
    __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    std::string::size_type cap = v14->__r_.__value_.__l.__cap_;
    __int128 v20 = v15;
    v14->__r_.__value_.__l.__size_ = 0LL;
    v14->__r_.__value_.__l.__cap_ = 0LL;
    v14->__r_.__value_.__r.__words[0] = 0LL;
    sub_1000413D8((uint64_t)v9, (_DWORD *)(a2 + 8), (uint64_t)&v20);
    void *v9 = off_1000792A0;
  }

  uint64_t v6 = *(void *)(a1 + 8);
  if (*(int *)(v6 + 4) >= 2)
  {
    uint64_t v18 = __cxa_allocate_exception(0x38uLL);
    sub_1000021BC(&v20, "YAML major version too large");
    sub_1000413D8((uint64_t)v18, (_DWORD *)(a2 + 8), (uint64_t)&v20);
    *uint64_t v18 = off_1000792A0;
  }

  *(_BYTE *)uint64_t v6 = 0;
  *(void (__cdecl ***)(std::basic_stringstream<char> *__hidden))((char *)v22
  v22[2] = v7;
  if (v24 < 0) {
    operator delete((void *)v23[8]);
  }
  std::streambuf::~streambuf(v23);
  return std::ios::~ios(&v25);
}

void sub_1000513A8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((v28 & 1) == 0)
    {
LABEL_6:
      sub_100001C10((uint64_t)&a22);
      _Unwind_Resume(a1);
    }
  }

  else if (!v28)
  {
    goto LABEL_6;
  }

  __cxa_free_exception(v27);
  goto LABEL_6;
}

std::string *YAML::Parser::HandleTagDirective(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 48);
  if (*(void *)(a2 + 56) - v3 != 48)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
    sub_1000021BC(v11, "TAG directives must have exactly two arguments");
    sub_1000413D8((uint64_t)exception, (_DWORD *)(a2 + 8), (uint64_t)v11);
    void *exception = off_1000792A0;
  }

  uint64_t v5 = sub_100008EC0(*(void *)(a1 + 8) + 16LL, *(const void ***)(a2 + 48));
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6 + 24 != v5)
  {
    uint64_t v10 = __cxa_allocate_exception(0x38uLL);
    sub_1000021BC(v11, "repeated TAG directive");
    sub_1000413D8((uint64_t)v10, (_DWORD *)(a2 + 8), (uint64_t)v11);
    void *v10 = off_1000792A0;
  }

  v11[0] = (__int128 *)v3;
  unint64_t v7 = sub_10002F860((uint64_t **)(v6 + 16), (const void **)v3, (uint64_t)&std::piecewise_construct, v11);
  return std::string::operator=((std::string *)(v7 + 7), (const std::string *)(v3 + 24));
}

void sub_1000515BC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if ((v15 & 1) != 0) {
    __cxa_free_exception(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t YAML::RegEx::RegEx(uint64_t this)
{
  *(_DWORD *)this = 0;
  *(_WORD *)(this + 4) = 0;
  *(void *)(this + 16) = 0LL;
  *(void *)(this + 24) = 0LL;
  *(void *)(this + std::istream::~istream(v1, v2 + 8) = 0LL;
  return this;
}

uint64_t YAML::RegEx::RegEx(uint64_t this, char a2)
{
  *(_DWORD *)this = 1;
  *(_BYTE *)(this + 4) = a2;
  *(_BYTE *)(this + 5) = 0;
  *(void *)(this + 16) = 0LL;
  *(void *)(this + 24) = 0LL;
  *(void *)(this + std::istream::~istream(v1, v2 + 8) = 0LL;
  return this;
}

uint64_t YAML::RegEx::RegEx(uint64_t this, char a2, char a3)
{
  *(_DWORD *)this = 2;
  *(_BYTE *)(this + 4) = a2;
  *(_BYTE *)(this + 5) = a3;
  *(void *)(this + 16) = 0LL;
  *(void *)(this + 24) = 0LL;
  *(void *)(this + std::istream::~istream(v1, v2 + 8) = 0LL;
  return this;
}

uint64_t YAML::RegEx::RegEx(uint64_t a1, char *a2, int a3)
{
  *(_DWORD *)a1 = a3;
  *(_WORD *)(a1 + 4) = 0;
  unint64_t v4 = *((void *)a2 + 1);
  if (a2[23] >= 0)
  {
    unint64_t v5 = a2[23];
  }

  else
  {
    a2 = *(char **)a2;
    unint64_t v5 = v4;
  }

  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + std::istream::~istream(v1, v2 + 8) = 0LL;
  sub_100051958((void *)(a1 + 8), a2, &a2[v5], v5);
  return a1;
}

uint64_t YAML::operator!@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = 5;
  *(_WORD *)(a2 + 4) = 0;
  *(void *)(a2 + std::istream::~istream(v1, v2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  uint64_t result = sub_100051B48((uint64_t *)(a2 + 8), a1);
  *(void *)(a2 + 16) = result;
  return result;
}

void sub_1000516DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t YAML::operator|@<X0>(int *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  *(_DWORD *)a3 = 3;
  *(_WORD *)(a3 + 4) = 0;
  *(void *)(a3 + std::istream::~istream(v1, v2 + 8) = 0LL;
  *(void *)(a3 + 16) = 0LL;
  *(void *)(a3 + 24) = 0LL;
  unint64_t v5 = sub_100051B48((uint64_t *)(a3 + 8), a1);
  unint64_t v6 = *(void *)(a3 + 24);
  *(void *)(a3 + 16) = v5;
  if (v5 >= v6)
  {
    uint64_t result = sub_100051B48((uint64_t *)(a3 + 8), a2);
  }

  else
  {
    sub_100051AE8(a3 + 8, a2);
    uint64_t result = v5 + 32;
  }

  *(void *)(a3 + 16) = result;
  return result;
}

void sub_100051780(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t YAML::operator&@<X0>(int *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  *(_DWORD *)a3 = 4;
  *(_WORD *)(a3 + 4) = 0;
  *(void *)(a3 + std::istream::~istream(v1, v2 + 8) = 0LL;
  *(void *)(a3 + 16) = 0LL;
  *(void *)(a3 + 24) = 0LL;
  unint64_t v5 = sub_100051B48((uint64_t *)(a3 + 8), a1);
  unint64_t v6 = *(void *)(a3 + 24);
  *(void *)(a3 + 16) = v5;
  if (v5 >= v6)
  {
    uint64_t result = sub_100051B48((uint64_t *)(a3 + 8), a2);
  }

  else
  {
    sub_100051AE8(a3 + 8, a2);
    uint64_t result = v5 + 32;
  }

  *(void *)(a3 + 16) = result;
  return result;
}

void sub_100051824(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t YAML::operator+@<X0>(int *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  *(_DWORD *)a3 = 6;
  *(_WORD *)(a3 + 4) = 0;
  *(void *)(a3 + std::istream::~istream(v1, v2 + 8) = 0LL;
  *(void *)(a3 + 16) = 0LL;
  *(void *)(a3 + 24) = 0LL;
  unint64_t v5 = sub_100051B48((uint64_t *)(a3 + 8), a1);
  unint64_t v6 = *(void *)(a3 + 24);
  *(void *)(a3 + 16) = v5;
  if (v5 >= v6)
  {
    uint64_t result = sub_100051B48((uint64_t *)(a3 + 8), a2);
  }

  else
  {
    sub_100051AE8(a3 + 8, a2);
    uint64_t result = v5 + 32;
  }

  *(void *)(a3 + 16) = result;
  return result;
}

void sub_1000518C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1000518E0(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        unint64_t v6 = v4 - 32;
        unint64_t v7 = v4 - 24;
        sub_1000518E0(&v7);
        unint64_t v4 = v6;
      }

      while (v6 != v2);
      unint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void *sub_100051958(void *result, char *a2, char *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    sub_100027DDC(result, a4);
    uint64_t result = (void *)sub_1000519DC((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }

  return result;
}

void sub_1000519BC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + std::istream::~istream(v1, v2 + 8) = v10;
  sub_1000518E0(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1000519DC(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      char v5 = *a2++;
      *(_DWORD *)uint64_t v4 = 1;
      *(_BYTE *)(v4 + 4) = v5;
      *(_BYTE *)(v4 + 5) = 0;
      *(void *)(v4 + 16) = 0LL;
      *(void *)(v4 + 24) = 0LL;
      *(void *)(v4 + std::istream::~istream(v1, v2 + 8) = 0LL;
      v4 += 32LL;
    }

    while (a2 != a3);
    uint64_t v10 = v4;
  }

  char v8 = 1;
  sub_100051A60((uint64_t)v7);
  return v4;
}

uint64_t sub_100051A60(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_100051A94(a1);
  }
  return a1;
}

void sub_100051A94(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  if (v1 != v2)
  {
    do
    {
      uint64_t v3 = v1 - 32;
      uint64_t v4 = (void **)(v1 - 24);
      sub_1000518E0(&v4);
      uint64_t v1 = v3;
    }

    while (v3 != v2);
  }

void *sub_100051AE8(uint64_t a1, int *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  int v4 = *a2;
  *(_WORD *)(v3 + 4) = *((_WORD *)a2 + 2);
  *(_DWORD *)uint64_t v3 = v4;
  *(void *)(v3 + 16) = 0LL;
  *(void *)(v3 + 24) = 0LL;
  *(void *)(v3 + std::istream::~istream(v1, v2 + 8) = 0LL;
  uint64_t result = sub_100051C4C( (void *)(v3 + 8),  *((int **)a2 + 1),  *((int **)a2 + 2),  (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 5);
  *(void *)(a1 + std::istream::~istream(v1, v2 + 8) = v3 + 32;
  return result;
}

void sub_100051B40(_Unwind_Exception *a1)
{
  *(void *)(v1 + std::istream::~istream(v1, v2 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100051B48(uint64_t *a1, int *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v18 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_10002800C(v7, v9);
  }
  else {
    uint64_t v10 = 0LL;
  }
  int v11 = &v10[32 * v4];
  v15[0] = v10;
  v15[1] = v11;
  unint64_t v16 = v11;
  char v17 = &v10[32 * v9];
  int v12 = *a2;
  *((_WORD *)v11 + 2) = *((_WORD *)a2 + 2);
  *(_DWORD *)int v11 = v12;
  *((void *)v11 + 2) = 0LL;
  *((void *)v11 + 3) = 0LL;
  *((void *)v11 + 1) = 0LL;
  sub_100051C4C( (void *)v11 + 1,  *((int **)a2 + 1),  *((int **)a2 + 2),  (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 5);
  v16 += 32;
  sub_100051D90(a1, v15);
  uint64_t v13 = a1[1];
  sub_100051F58(v15);
  return v13;
}

void sub_100051C38(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *sub_100051C4C(void *result, int *a2, int *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    sub_100027DDC(result, a4);
    uint64_t result = (void *)sub_100051CD0((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }

  return result;
}

void sub_100051CB0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + std::istream::~istream(v1, v2 + 8) = v10;
  sub_1000518E0(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100051CD0(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    unint64_t v6 = a2;
    do
    {
      int v7 = *v6;
      *(_WORD *)(v4 + 4) = *((_WORD *)v6 + 2);
      *(_DWORD *)uint64_t v4 = v7;
      *(void *)(v4 + 16) = 0LL;
      *(void *)(v4 + 24) = 0LL;
      *(void *)(v4 + std::istream::~istream(v1, v2 + 8) = 0LL;
      sub_100051C4C(v4 + 8);
      uint64_t v4 = v12 + 32;
      v12 += 32LL;
      v6 += 8;
    }

    while (v6 != a3);
  }

  char v10 = 1;
  sub_100051A60((uint64_t)v9);
  return v4;
}

void sub_100051D7C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100051D90(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100051E04((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100051E04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v18 = a6;
  *((void *)&v18 + 1) = a7;
  __int128 v17 = v18;
  v15[0] = a1;
  v15[1] = &v17;
  void v15[2] = &v18;
  char v16 = 0;
  if (a3 == a5)
  {
    uint64_t v13 = a6;
  }

  else
  {
    uint64_t v9 = a3;
    do
    {
      int v10 = *(_DWORD *)(v9 - 32);
      v9 -= 32LL;
      __int16 v11 = *(_WORD *)(v9 + 4);
      *(void *)(v7 - 24) = 0LL;
      uint64_t v12 = (void *)(v7 - 24);
      *((_WORD *)v12 - 2) = v11;
      *((_DWORD *)v12 - 2) = v10;
      v12[1] = 0LL;
      void v12[2] = 0LL;
      sub_100051C4C( v12,  *(int **)(v9 + 8),  *(int **)(v9 + 16),  (uint64_t)(*(void *)(v9 + 16) - *(void *)(v9 + 8)) >> 5);
      uint64_t v7 = *((void *)&v18 + 1) - 32LL;
      *((void *)&v18 + 1) -= 32LL;
    }

    while (v9 != a5);
    uint64_t v13 = v18;
  }

  char v16 = 1;
  sub_100051ED8((uint64_t)v15);
  return v13;
}

void sub_100051EC4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100051ED8(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_100051F0C(a1);
  }
  return a1;
}

void sub_100051F0C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8LL);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8LL);
  while (v1 != v2)
  {
    uint64_t v3 = (void **)(v1 + 8);
    sub_1000518E0(&v3);
    v1 += 32LL;
  }

void **sub_100051F58(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_100051F88(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 32;
    uint64_t v4 = (void **)(i - 24);
    sub_1000518E0(&v4);
  }

double YAML::Scanner::Scanner()
{
  uint64_t v0 = YAML::Stream::Stream();
  *(_DWORD *)(v0 + 144) = 0;
  double result = 0.0;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 12std::istream::~istream(v1, v2 + 8) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_OWORD *)(v0 + 16std::istream::~istream(v1, v2 + 8) = 0u;
  *(_OWORD *)(v0 + 184) = 0u;
  *(_OWORD *)(v0 + 200) = 0u;
  *(_OWORD *)(v0 + 216) = 0u;
  *(_OWORD *)(v0 + 232) = 0u;
  *(_OWORD *)(v0 + 24std::istream::~istream(v1, v2 + 8) = 0u;
  *(void *)(v0 + 312) = 0LL;
  *(_OWORD *)(v0 + 152) = 0u;
  *(_OWORD *)(v0 + 264) = 0u;
  *(_OWORD *)(v0 + 280) = 0u;
  *(_OWORD *)(v0 + 296) = 0u;
  return result;
}

void YAML::Scanner::~Scanner(YAML::Scanner *this)
{
  uint64_t v2 = (void **)((char *)this + 248);
  sub_1000543CC(&v2);
  sub_100054044((void *)this + 25);
  sub_100054124((void *)this + 19);
  sub_1000541B8((void *)this + 12);
  YAML::Stream::~Stream(this);
}

BOOL YAML::Scanner::empty(YAML::Scanner *this)
{
  return *((void *)this + 17) == 0LL;
}

void YAML::Scanner::EnsureTokensInQueue(YAML::Scanner *this)
{
  uint64_t v2 = (int64x2_t *)((char *)this + 96);
  while (1)
  {
    while (1)
    {
      if (!*((void *)this + 17)) {
        goto LABEL_5;
      }
      int v3 = *(_DWORD *)(*(void *)(*((void *)this + 13) + 8 * (*((void *)this + 16) / 0x33uLL))
                     + 80 * (*((void *)this + 16) % 0x33uLL));
      if (v3 != 1) {
        break;
      }
      sub_100054B98(v2);
    }

    if (!v3) {
      return;
    }
LABEL_5:
    if (*((_BYTE *)this + 145)) {
      break;
    }
    YAML::Scanner::ScanNextToken(this);
  }

void YAML::Scanner::pop(int64x2_t *this)
{
  if (this[8].i64[1]) {
    sub_100054B98(this + 6);
  }
}

unint64_t YAML::Scanner::peek(YAML::Scanner *this)
{
  if (!*((void *)this + 17)) {
    sub_100055AD4();
  }
  return *(void *)(*((void *)this + 13) + 8 * (*((void *)this + 16) / 0x33uLL))
       + 80 * (*((void *)this + 16) % 0x33uLL);
}

uint64_t YAML::Scanner::mark(YAML::Scanner *this)
{
  return *((void *)this + 1);
}

void YAML::Scanner::ScanNextToken(YAML::Scanner *this)
{
  if (!*((_BYTE *)this + 145))
  {
    if (!*((_BYTE *)this + 144))
    {
      YAML::Scanner::StartStream(this);
      return;
    }

    YAML::Scanner::ScanToNextToken(this);
    YAML::Scanner::PopIndentToHere(this);
    if (!YAML::Stream::operator BOOL(this))
    {
      YAML::Scanner::EndStream(this);
      return;
    }

    if (*((_DWORD *)this + 4)) {
      goto LABEL_6;
    }
    if (YAML::Stream::peek(this) == 37)
    {
      YAML::Scanner::ScanDirective(this);
      return;
    }

    if (*((_DWORD *)this + 4)) {
      goto LABEL_6;
    }
    uint64_t v2 = sub_100052998();
    unint64_t v10 = 0LL;
    __int16 v11 = this;
    if ((sub_100054630((uint64_t)v2, &v10) & 0x80000000) == 0)
    {
      YAML::Scanner::ScanDocStart(this);
      return;
    }

    if (*((_DWORD *)this + 4)
      || (v3 = sub_100052B30(), v10 = 0LL, __int16 v11 = this, (sub_100054630((uint64_t)v3, &v10) & 0x80000000) != 0))
    {
LABEL_6:
      if (YAML::Stream::peek(this) == 91 || YAML::Stream::peek(this) == 123)
      {
        YAML::Scanner::ScanFlowStart(this);
      }

      else if (YAML::Stream::peek(this) == 93 || YAML::Stream::peek(this) == 125)
      {
        YAML::Scanner::ScanFlowEnd(this);
      }

      else if (YAML::Stream::peek(this) == 44)
      {
        YAML::Scanner::ScanFlowEntry(this);
      }

      else
      {
        uint64_t v4 = sub_100052CC8();
        unint64_t v10 = 0LL;
        __int16 v11 = this;
        if ((sub_100054630((uint64_t)v4, &v10) & 0x80000000) != 0)
        {
          if (*((void *)this + 39)) {
            uint64_t v5 = sub_100052F04();
          }
          else {
            uint64_t v5 = sub_100052E24();
          }
          unint64_t v10 = 0LL;
          __int16 v11 = this;
          if ((sub_100054630((uint64_t)v5, &v10) & 0x80000000) != 0)
          {
            ValueRegex = YAML::Scanner::GetValueRegex(this);
            unint64_t v10 = 0LL;
            __int16 v11 = this;
            if ((sub_100054630((uint64_t)ValueRegex, &v10) & 0x80000000) != 0)
            {
              if (YAML::Stream::peek(this) == 42 || YAML::Stream::peek(this) == 38)
              {
                YAML::Scanner::ScanAnchorOrAlias(this);
              }

              else if (YAML::Stream::peek(this) == 33)
              {
                YAML::Scanner::ScanTag(this);
              }

              else if (!*((void *)this + 39) {
                     && (YAML::Stream::peek(this) == 124 || YAML::Stream::peek(this) == 62))
              }
              {
                YAML::Scanner::ScanBlockScalar(this);
              }

              else if (YAML::Stream::peek(this) == 39 || YAML::Stream::peek(this) == 34)
              {
                YAML::Scanner::ScanQuotedScalar((std::string::size_type *)this);
              }

              else
              {
                if (*((void *)this + 39)) {
                  uint64_t v7 = sub_100053380();
                }
                else {
                  uint64_t v7 = sub_1000530A0();
                }
                unint64_t v10 = 0LL;
                __int16 v11 = this;
                if ((sub_100054630((uint64_t)v7, &v10) & 0x80000000) != 0)
                {
                  exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
                  int v9 = *((_DWORD *)this + 4);
                  uint64_t v12 = *((void *)this + 1);
                  int v13 = v9;
                  sub_1000021BC(&v10, "unknown token");
                  sub_1000413D8((uint64_t)exception, &v12, (uint64_t)&v10);
                  void *exception = off_1000792A0;
                }

                YAML::Scanner::ScanPlainScalar(this);
              }
            }

            else
            {
              YAML::Scanner::ScanValue(this);
            }
          }

          else
          {
            YAML::Scanner::ScanKey(this);
          }
        }

        else
        {
          YAML::Scanner::ScanBlockEntry(this);
        }
      }
    }

    else
    {
      YAML::Scanner::ScanDocEnd(this);
    }
  }

void sub_100052534( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }

  else if (!v16)
  {
    goto LABEL_6;
  }

  __cxa_free_exception(v15);
  goto LABEL_6;
}

void YAML::Scanner::StartStream(YAML::Scanner *this)
{
  *((_BYTE *)this + 144) = 1;
  *((_BYTE *)this + 146) = 1;
  uint64_t v2 = operator new(0x18uLL);
  *(void *)uint64_t v2 = 0x2FFFFFFFFLL;
  v2[2] = 0;
  *((void *)v2 + 2) = 0LL;
  std::string __p = v2;
  sub_100053AF4((uint64_t *)this + 31, (uint64_t *)&__p);
  uint64_t v4 = *(void *)(*((void *)this + 32) - 8LL);
  sub_100054E6C((void *)this + 25, &v4);
  int v3 = __p;
  std::string __p = 0LL;
  if (v3) {
    operator delete(v3);
  }
}

void sub_1000525F0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t YAML::Scanner::ScanToNextToken(YAML::Scanner *this)
{
  while (1)
  {
    while (YAML::Stream::operator BOOL(this))
    {
      int v2 = YAML::Stream::peek(this);
      if (!*((void *)this + 39))
      {
        unsigned __int8 v3 = atomic_load((unsigned __int8 *)&qword_10007C1E8);
        if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_10007C1E8))
        {
          YAML::RegEx::RegEx((uint64_t)&unk_10007C1C8, 9);
          __cxa_atexit((void (*)(void *))sub_100053674, &unk_10007C1C8, (void *)&_mh_execute_header);
          __cxa_guard_release(&qword_10007C1E8);
        }

        unint64_t v11 = 0LL;
        v12[0] = this;
      }

      YAML::Stream::eat(this, 1);
    }

    unsigned __int8 v4 = atomic_load((unsigned __int8 *)&qword_10007C210);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_10007C210))
    {
      YAML::RegEx::RegEx((uint64_t)&dword_10007C1F0, 35);
      __cxa_atexit((void (*)(void *))sub_100053674, &dword_10007C1F0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10007C210);
    }

    LODWORD(v11) = dword_10007C1F0;
    WORD2(v11) = word_10007C1F4;
    memset(v12, 0, sizeof(v12));
    sub_100051C4C(v12, (int *)qword_10007C1F8, unk_10007C200, (unk_10007C200 - qword_10007C1F8) >> 5);
    v13[0] = 0LL;
    v13[1] = (void **)this;
    int v5 = sub_100054630((uint64_t)&v11, (unint64_t *)v13);
    v13[0] = (void **)v12;
    sub_1000518E0(v13);
    if ((v5 & 0x80000000) == 0 && YAML::Stream::operator BOOL(this))
    {
      do
      {
        uint64_t v6 = sub_1000536AC();
        unint64_t v11 = 0LL;
        v12[0] = this;
        YAML::Stream::eat(this, 1);
      }

      while (YAML::Stream::operator BOOL(this));
    }

    uint64_t v7 = sub_1000536AC();
    unint64_t v11 = 0LL;
    v12[0] = this;
    uint64_t result = sub_100054630((uint64_t)v7, &v11);
    if ((result & 0x80000000) != 0) {
      break;
    }
    int v9 = sub_1000536AC();
    unint64_t v11 = 0LL;
    v12[0] = this;
    int v10 = sub_100054630((uint64_t)v9, &v11);
    YAML::Stream::eat(this, v10);
    YAML::Scanner::InvalidateSimpleKey(this);
    if (!*((void *)this + 39)) {
      *((_BYTE *)this + 146) = 1;
    }
  }

  return result;
}

void sub_10005283C(_Unwind_Exception *a1)
{
}

void YAML::Scanner::PopIndentToHere(YAML::Scanner *this)
{
  if (!*((void *)this + 39))
  {
    while (1)
    {
      uint64_t v2 = *((void *)this + 30);
      if (!v2) {
        break;
      }
      unsigned __int8 v3 = *(_DWORD **)(*(void *)(*((void *)this + 26)
      int v4 = *((_DWORD *)this + 4);
      if (*v3 < v4) {
        goto LABEL_10;
      }
      if (*v3 == v4)
      {
        if (v3[1] != 1) {
          goto LABEL_10;
        }
        int v5 = sub_100052CC8();
        v6[0] = 0LL;
        v6[1] = (unint64_t)this;
        if ((sub_100054630((uint64_t)v5, v6) & 0x80000000) == 0)
        {
          while (1)
          {
            uint64_t v2 = *((void *)this + 30);
            if (!v2) {
              break;
            }
LABEL_10:
            if (*(_DWORD *)(*(void *)(*(void *)(*((void *)this + 26)
                                                   + (((unint64_t)(v2 + *((void *)this + 29) - 1) >> 6) & 0x3FFFFFFFFFFFFF8LL))
                                       + 8 * ((v2 + *((void *)this + 29) - 1) & 0x1FF))
                           + 8LL) != 1)
              return;
            YAML::Scanner::PopIndent(this);
          }

          return;
        }
      }

      YAML::Scanner::PopIndent(this);
    }
  }

uint64_t YAML::Scanner::EndStream(YAML::Scanner *this)
{
  uint64_t result = YAML::Scanner::PopAllSimpleKeys((uint64_t)this);
  *(_WORD *)((char *)this + 145) = 1;
  return result;
}

void *sub_100052998()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_10007C058);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10007C058))
  {
    sub_1000021BC(__p, "---");
    YAML::RegEx::RegEx((uint64_t)&v9, (char *)__p, 6);
    uint64_t v2 = (int *)sub_100054454();
    YAML::RegEx::RegEx((uint64_t)&v3);
    YAML::operator|(v2, &v3, (uint64_t)&v5);
    YAML::operator+(&v9, (int *)&v5, (uint64_t)&unk_10007C038);
    unint64_t v11 = (void **)&v6;
    sub_1000518E0(&v11);
    unint64_t v11 = (void **)&v4;
    sub_1000518E0(&v11);
    int v5 = (void **)&v10;
    sub_1000518E0(&v5);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    __cxa_atexit((void (*)(void *))sub_100053674, &unk_10007C038, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10007C058);
  }

  return &unk_10007C038;
}

void sub_100052AAC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  *(void *)(v23 - 24) = v22 + 8;
  sub_1000518E0((void ***)(v23 - 24));
  *(void *)(v23 - 24) = &a10;
  sub_1000518E0((void ***)(v23 - 24));
  a13 = v23 - 48;
  sub_1000518E0((void ***)&a13);
  if (a22 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_10007C058);
  _Unwind_Resume(a1);
}

void *sub_100052B30()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_10007C0F8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10007C0F8))
  {
    sub_1000021BC(__p, "...");
    YAML::RegEx::RegEx((uint64_t)&v9, (char *)__p, 6);
    uint64_t v2 = (int *)sub_100054454();
    YAML::RegEx::RegEx((uint64_t)&v3);
    YAML::operator|(v2, &v3, (uint64_t)&v5);
    YAML::operator+(&v9, (int *)&v5, (uint64_t)&unk_10007C0D8);
    unint64_t v11 = (void **)&v6;
    sub_1000518E0(&v11);
    unint64_t v11 = (void **)&v4;
    sub_1000518E0(&v11);
    int v5 = (void **)&v10;
    sub_1000518E0(&v5);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    __cxa_atexit((void (*)(void *))sub_100053674, &unk_10007C0D8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10007C0F8);
  }

  return &unk_10007C0D8;
}

void sub_100052C44( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  *(void *)(v23 - 24) = v22 + 8;
  sub_1000518E0((void ***)(v23 - 24));
  *(void *)(v23 - 24) = &a10;
  sub_1000518E0((void ***)(v23 - 24));
  a13 = v23 - 48;
  sub_1000518E0((void ***)&a13);
  if (a22 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_10007C0F8);
  _Unwind_Resume(a1);
}

void *sub_100052CC8()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_10007C120);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10007C120))
  {
    YAML::RegEx::RegEx((uint64_t)&v7, 45);
    uint64_t v2 = (int *)sub_100054454();
    YAML::RegEx::RegEx((uint64_t)&v3);
    YAML::operator|(v2, &v3, (uint64_t)&v5);
    YAML::operator+(&v7, (int *)&v5, (uint64_t)&unk_10007C100);
    int v9 = (void **)&v6;
    sub_1000518E0(&v9);
    int v9 = (void **)&v4;
    sub_1000518E0(&v9);
    int v5 = (void **)&v8;
    sub_1000518E0(&v5);
    __cxa_atexit((void (*)(void *))sub_100053674, &unk_10007C100, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10007C120);
  }

  return &unk_10007C100;
}

void sub_100052DB8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  *(void *)(v15 - 24) = v14 + 8;
  sub_1000518E0((void ***)(v15 - 24));
  *(void *)(v15 - 24) = &a11;
  sub_1000518E0((void ***)(v15 - 24));
  a14 = (void **)(v15 - 48);
  sub_1000518E0(&a14);
  __cxa_guard_abort(&qword_10007C120);
  _Unwind_Resume(a1);
}

void *sub_100052E24()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_10007C148);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10007C148))
  {
    YAML::RegEx::RegEx((uint64_t)&v3, 63);
    uint64_t v2 = (int *)sub_100054454();
    YAML::operator+(&v3, v2, (uint64_t)&unk_10007C128);
    int v5 = (void **)&v4;
    sub_1000518E0(&v5);
    __cxa_atexit((void (*)(void *))sub_100053674, &unk_10007C128, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10007C148);
  }

  return &unk_10007C128;
}

void sub_100052ED0(_Unwind_Exception *a1)
{
}

void *sub_100052F04()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_10007C170);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10007C170))
  {
    YAML::RegEx::RegEx((uint64_t)&v3, 63);
    uint64_t v2 = (int *)sub_100054454();
    YAML::operator+(&v3, v2, (uint64_t)&unk_10007C150);
    int v5 = (void **)&v4;
    sub_1000518E0(&v5);
    __cxa_atexit((void (*)(void *))sub_100053674, &unk_10007C150, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10007C170);
  }

  return &unk_10007C150;
}

void sub_100052FB0(_Unwind_Exception *a1)
{
}

void *YAML::Scanner::GetValueRegex(YAML::Scanner *this)
{
  if (!*((void *)this + 39)) {
    return sub_1000537FC();
  }
  if (!*((_BYTE *)this + 147)) {
    return sub_100053958();
  }
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)&qword_10007C288);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10007C288))
    {
      YAML::RegEx::RegEx((uint64_t)&unk_10007C268, 58);
      __cxa_atexit((void (*)(void *))sub_100053674, &unk_10007C268, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10007C288);
    }
  }

  return &unk_10007C268;
}

void sub_100053088(_Unwind_Exception *a1)
{
}

void *sub_1000530A0()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_10007C198);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10007C198))
  {
    uint64_t v2 = (int *)sub_100054454();
    YAML::RegEx::RegEx((uint64_t)&v16, (char *)v14, 3);
    YAML::operator|(v2, &v16, (uint64_t)&v18);
    sub_1000021BC(__p, "-?:");
    YAML::RegEx::RegEx((uint64_t)&v10, (char *)__p, 3);
    int v3 = (int *)sub_100054454();
    YAML::RegEx::RegEx((uint64_t)&v4);
    YAML::operator|(v3, &v4, (uint64_t)&v6);
    YAML::operator+(&v10, (int *)&v6, (uint64_t)&v12);
    YAML::operator|(&v18, (int *)&v12, (uint64_t)&v20);
    YAML::operator!(&v20, (uint64_t)&unk_10007C178);
    uint64_t v22 = (void **)&v21;
    sub_1000518E0(&v22);
    uint64_t v22 = (void **)&v13;
    sub_1000518E0(&v22);
    uint64_t v22 = (void **)&v7;
    sub_1000518E0(&v22);
    uint64_t v22 = (void **)&v5;
    sub_1000518E0(&v22);
    uint64_t v6 = (void **)&v11;
    sub_1000518E0(&v6);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v12 = (void **)&v19;
    sub_1000518E0(&v12);
    uint64_t v12 = (void **)&v17;
    sub_1000518E0(&v12);
    if (v15 < 0) {
      operator delete(v14[0]);
    }
    __cxa_atexit((void (*)(void *))sub_100053674, &unk_10007C178, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10007C198);
  }

  return &unk_10007C178;
}

void sub_100053270( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, void *a32, uint64_t a33, int a34, __int16 a35, char a36, char a37)
{
  *(void *)(v38 - 40) = v37 + 8;
  sub_1000518E0((void ***)(v38 - 40));
  *(void *)(v38 - 40) = &a29;
  sub_1000518E0((void ***)(v38 - 40));
  *(void *)(v38 - 40) = &a15;
  sub_1000518E0((void ***)(v38 - 40));
  *(void *)(v38 - 40) = &a11;
  sub_1000518E0((void ***)(v38 - 40));
  a14 = &a25;
  sub_1000518E0((void ***)&a14);
  if (a23 < 0) {
    operator delete(__p);
  }
  a28 = v38 - 96;
  sub_1000518E0((void ***)&a28);
  a28 = v38 - 128;
  sub_1000518E0((void ***)&a28);
  if (a37 < 0) {
    operator delete(a32);
  }
  __cxa_guard_abort(&qword_10007C198);
  _Unwind_Resume(a1);
}

void *sub_100053380()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_10007C1C0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10007C1C0))
  {
    uint64_t v2 = (int *)sub_100054454();
    YAML::RegEx::RegEx((uint64_t)&v12, (char *)v10, 3);
    YAML::operator|(v2, &v12, (uint64_t)&v14);
    sub_1000021BC(__p, "-:");
    YAML::RegEx::RegEx((uint64_t)&v6, (char *)__p, 3);
    int v3 = (int *)sub_1000544F8();
    YAML::operator+(&v6, v3, (uint64_t)&v8);
    YAML::operator|(&v14, (int *)&v8, (uint64_t)&v16);
    YAML::operator!(&v16, (uint64_t)&unk_10007C1A0);
    int v18 = (void **)&v17;
    sub_1000518E0(&v18);
    int v18 = (void **)&v9;
    sub_1000518E0(&v18);
    int v18 = (void **)&v7;
    sub_1000518E0(&v18);
    if (v5 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v8 = (void **)&v15;
    sub_1000518E0(&v8);
    uint64_t v8 = (void **)&v13;
    sub_1000518E0(&v8);
    if (v11 < 0) {
      operator delete(v10[0]);
    }
    __cxa_atexit((void (*)(void *))sub_100053674, &unk_10007C1A0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10007C1C0);
  }

  return &unk_10007C1A0;
}

void sub_10005350C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t *a20, uint64_t a21, uint64_t a22, uint64_t a23, void *a24, uint64_t a25, int a26, __int16 a27, char a28, char a29, char a30, uint64_t a31)
{
  *(void *)(v32 - 40) = v31 + 8;
  sub_1000518E0((void ***)(v32 - 40));
  *(void *)(v32 - 40) = &a21;
  sub_1000518E0((void ***)(v32 - 40));
  *(void *)(v32 - 40) = &a17;
  sub_1000518E0((void ***)(v32 - 40));
  if (a15 < 0) {
    operator delete(__p);
  }
  a20 = (uint64_t *)(v32 - 96);
  sub_1000518E0((void ***)&a20);
  a20 = &a31;
  sub_1000518E0((void ***)&a20);
  if (a29 < 0) {
    operator delete(a24);
  }
  __cxa_guard_abort(&qword_10007C1C0);
  _Unwind_Resume(a1);
}

void *sub_1000535E0()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_10007C1E8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10007C1E8))
  {
    YAML::RegEx::RegEx((uint64_t)&unk_10007C1C8, 9);
    __cxa_atexit((void (*)(void *))sub_100053674, &unk_10007C1C8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10007C1E8);
  }

  return &unk_10007C1C8;
}

void sub_10005365C(_Unwind_Exception *a1)
{
}

uint64_t sub_100053674(uint64_t a1)
{
  int v3 = (void **)(a1 + 8);
  sub_1000518E0(&v3);
  return a1;
}

void *sub_1000536AC()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_10007C238);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10007C238))
  {
    YAML::RegEx::RegEx((uint64_t)&v6, 10);
    sub_1000021BC(__p, "\r\n");
    YAML::RegEx::RegEx((uint64_t)&v4, (char *)__p, 6);
    YAML::operator|(&v6, (int *)&v4, (uint64_t)&unk_10007C218);
    uint64_t v8 = (void **)&v5;
    sub_1000518E0(&v8);
    if (v3 < 0) {
      operator delete(__p[0]);
    }
    int v4 = (void **)&v7;
    sub_1000518E0(&v4);
    __cxa_atexit((void (*)(void *))sub_100053674, &unk_10007C218, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10007C238);
  }

  return &unk_10007C218;
}

void sub_100053798( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t *a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20)
{
  *(void *)(v21 - 24) = v20 + 8;
  sub_1000518E0((void ***)(v21 - 24));
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = &a20;
  sub_1000518E0((void ***)&a15);
  __cxa_guard_abort(&qword_10007C238);
  _Unwind_Resume(a1);
}

void *sub_1000537FC()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_10007C260);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10007C260))
  {
    YAML::RegEx::RegEx((uint64_t)&v7, 58);
    uint64_t v2 = (int *)sub_100054454();
    YAML::RegEx::RegEx((uint64_t)&v3);
    YAML::operator|(v2, &v3, (uint64_t)&v5);
    YAML::operator+(&v7, (int *)&v5, (uint64_t)&unk_10007C240);
    uint64_t v9 = (void **)&v6;
    sub_1000518E0(&v9);
    uint64_t v9 = (void **)&v4;
    sub_1000518E0(&v9);
    uint64_t v5 = (void **)&v8;
    sub_1000518E0(&v5);
    __cxa_atexit((void (*)(void *))sub_100053674, &unk_10007C240, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10007C260);
  }

  return &unk_10007C240;
}

void sub_1000538EC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  *(void *)(v15 - 24) = v14 + 8;
  sub_1000518E0((void ***)(v15 - 24));
  *(void *)(v15 - 24) = &a11;
  sub_1000518E0((void ***)(v15 - 24));
  a14 = (void **)(v15 - 48);
  sub_1000518E0(&a14);
  __cxa_guard_abort(&qword_10007C260);
  _Unwind_Resume(a1);
}

void *sub_100053958()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_10007C2B0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10007C2B0))
  {
    YAML::RegEx::RegEx((uint64_t)&v9, 58);
    uint64_t v2 = (int *)sub_100054454();
    sub_1000021BC(__p, ",}");
    YAML::RegEx::RegEx((uint64_t)&v5, (char *)__p, 3);
    YAML::operator|(v2, &v5, (uint64_t)&v7);
    YAML::operator+(&v9, (int *)&v7, (uint64_t)&unk_10007C290);
    char v11 = (void **)&v8;
    sub_1000518E0(&v11);
    char v11 = (void **)&v6;
    sub_1000518E0(&v11);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
    int v7 = (void **)&v10;
    sub_1000518E0(&v7);
    __cxa_atexit((void (*)(void *))sub_100053674, &unk_10007C290, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10007C2B0);
  }

  return &unk_10007C290;
}

void sub_100053A70( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  *(void *)(v20 - 24) = v19 + 8;
  sub_1000518E0((void ***)(v20 - 24));
  *(void *)(v20 - 24) = &a16;
  sub_1000518E0((void ***)(v20 - 24));
  if (a14 < 0) {
    operator delete(__p);
  }
  a19 = v20 - 48;
  sub_1000518E0((void ***)&a19);
  __cxa_guard_abort(&qword_10007C2B0);
  _Unwind_Resume(a1);
}

void sub_100053AEC()
{
}

uint64_t sub_100053AF4(uint64_t *a1, uint64_t *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  int v7 = *(void **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 3;
    uint64_t v11 = v5 - *a1;
    uint64_t v12 = v11 >> 2;
    else {
      unint64_t v13 = v12;
    }
    v17[4] = result;
    if (v13) {
      uint64_t v14 = (char *)sub_10004FA94(result, v13);
    }
    else {
      uint64_t v14 = 0LL;
    }
    uint64_t v15 = &v14[8 * v10];
    v17[0] = v14;
    v17[1] = v15;
    v17[3] = &v14[8 * v13];
    uint64_t v16 = *a2;
    *a2 = 0LL;
    *(void *)uint64_t v15 = v16;
    void v17[2] = v15 + 8;
    sub_100054C68(a1, v17);
    int v9 = (void *)a1[1];
    uint64_t result = sub_100054DE8((uint64_t)v17);
  }

  else
  {
    uint64_t v8 = *a2;
    *a2 = 0LL;
    void *v7 = v8;
    int v9 = v7 + 1;
    a1[1] = (uint64_t)v9;
  }

  a1[1] = (uint64_t)v9;
  return result;
}

void sub_100053BD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void YAML::Scanner::PopAllIndents(YAML::Scanner *this)
{
  if (!*((void *)this + 39))
  {
    while (1)
    {
      uint64_t v2 = *((void *)this + 30);
      if (!v2
        || *(_DWORD *)(*(void *)(*(void *)(*((void *)this + 26)
                                             + (((unint64_t)(v2 + *((void *)this + 29) - 1) >> 6) & 0x3FFFFFFFFFFFFF8LL))
                                 + 8 * ((v2 + *((void *)this + 29) - 1) & 0x1FF))
                     + 4LL) == 2)
      {
        break;
      }

      YAML::Scanner::PopIndent(this);
    }
  }

unint64_t YAML::Scanner::PushToken(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  int v4 = *(_DWORD *)(a1 + 16);
  LODWORD(vmemset(v42, 0, 7) = 0;
  DWORD1(vmemset(v42, 0, 7) = a2;
  *((void *)&v7 + 1) = v3;
  int v8 = v4;
  *(_OWORD *)std::string __p = 0u;
  memset(v10, 0, sizeof(v10));
  int v11 = 0;
  sub_100055660((void *)(a1 + 96), &v7);
  uint64_t v12 = (void **)v10 + 1;
  sub_1000027F4(&v12);
  if (SBYTE7(v10[0]) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v5 = *(void *)(a1 + 136) + *(void *)(a1 + 128) - 1LL;
  return *(void *)(*(void *)(a1 + 104) + 8 * (v5 / 0x33)) + 80 * (v5 % 0x33);
}

void sub_100053D08(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100053D1C(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 48);
  sub_1000027F4(&v3);
  return a1;
}

uint64_t YAML::Scanner::GetStartTokenFor(uint64_t a1, int a2)
{
  if (!a2) {
    return 4LL;
  }
  if (a2 != 1)
  {
    if (a2 == 2) {
      sub_100055B24();
    }
    sub_100055AFC();
  }

  return 3LL;
}

uint64_t YAML::Scanner::PushIndentTo(void *a1, int a2, int a3)
{
  if (!a1[39])
  {
    __int128 v7 = operator new(0x18uLL);
    int v8 = v7;
    *(_DWORD *)__int128 v7 = a2;
    *((_DWORD *)v7 + 1) = a3;
    *((_DWORD *)v7 + 2) = 0;
    v7[2] = 0LL;
    uint64_t v14 = v7;
    unint64_t v9 = a1[30] + a1[29] - 1LL;
    uint64_t v10 = *(_DWORD **)(*(void *)(a1[26] + ((v9 >> 6) & 0x3FFFFFFFFFFFFF8LL)) + 8 * (v9 & 0x1FF));
    if (*v10 > a2 || *v10 == a2 && (a3 != 1 || v10[1]))
    {
      uint64_t v3 = 0LL;
      uint64_t v14 = 0LL;
    }

    else
    {
      int StartTokenFor = YAML::Scanner::GetStartTokenFor((uint64_t)v7, a3);
      v8[2] = YAML::Scanner::PushToken((uint64_t)a1, StartTokenFor);
      unint64_t v13 = v8;
      sub_100054E6C(a1 + 25, &v13);
      sub_100053AF4(a1 + 31, (uint64_t *)&v14);
      uint64_t v3 = *(void *)(a1[32] - 8LL);
      int v8 = v14;
      uint64_t v14 = 0LL;
      if (!v8) {
        return v3;
      }
    }

    operator delete(v8);
    return v3;
  }

  return 0LL;
}

void sub_100053EA4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
}

void YAML::Scanner::PopIndent(YAML::Scanner *this)
{
  uint64_t v2 = *((void *)this + 30) - 1LL;
  uint64_t v3 = *(void *)(*(void *)(*((void *)this + 26)
  *((void *)this + 30) = v2;
  sub_100055A68((void *)this + 25, 1);
  if (*(_DWORD *)(v3 + 8))
  {
    YAML::Scanner::InvalidateSimpleKey(this);
    return;
  }

  int v4 = *(_DWORD *)(v3 + 4);
  if (v4)
  {
    if (v4 != 1) {
      return;
    }
    uint64_t v5 = *((void *)this + 1);
    int v6 = *((_DWORD *)this + 4);
    *(void *)&__int128 v9 = 0x500000000LL;
    *((void *)&v9 + 1) = v5;
    int v10 = v6;
    *(_OWORD *)std::string __p = 0u;
    __int128 v12 = 0u;
    __int128 v13 = 0u;
    int v14 = 0;
    sub_100055660((void *)this + 12, &v9);
  }

  else
  {
    uint64_t v7 = *((void *)this + 1);
    int v8 = *((_DWORD *)this + 4);
    *(void *)&__int128 v9 = 0x600000000LL;
    *((void *)&v9 + 1) = v7;
    int v10 = v8;
    *(_OWORD *)std::string __p = 0u;
    __int128 v12 = 0u;
    __int128 v13 = 0u;
    int v14 = 0;
    sub_100055660((void *)this + 12, &v9);
  }

  uint64_t v15 = (void **)&v12 + 1;
  sub_1000027F4(&v15);
  if (SBYTE7(v12) < 0) {
    operator delete(__p[0]);
  }
}

void sub_100053FF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t YAML::Scanner::GetTopIndent(YAML::Scanner *this)
{
  uint64_t v1 = *((void *)this + 30);
  if (v1) {
    return **(unsigned int **)(*(void *)(*((void *)this + 26)
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100054044(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0LL;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8LL);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }

    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }

  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256LL;
  }

  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 512LL;
  }

  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }

  return sub_1000540D8((uint64_t)a1);
}

uint64_t sub_1000540D8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  }
  unint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_100054124(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0LL;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8LL);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }

    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }

  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 42LL;
  }

  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 85LL;
  }

  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }

  return sub_1000540D8((uint64_t)a1);
}

uint64_t sub_1000541B8(void *a1)
{
  uint64_t v2 = a1 + 5;
  uint64_t v3 = (void **)a1[1];
  unint64_t v4 = (void **)a1[2];
  if (v4 == v3)
  {
    unint64_t v4 = (void **)a1[1];
  }

  else
  {
    unint64_t v5 = a1[4];
    uint64_t v6 = &v3[v5 / 0x33];
    uint64_t v7 = (uint64_t)*v6 + 80 * (v5 % 0x33);
    unint64_t v8 = (unint64_t)v3[(a1[5] + v5) / 0x33] + 80 * ((a1[5] + v5) % 0x33);
    if (v7 != v8)
    {
      do
      {
        sub_1000542F4((uint64_t)v2, v7);
        v7 += 80LL;
        if (v7 - (void)*v6 == 4080)
        {
          uint64_t v9 = (uint64_t)v6[1];
          ++v6;
          uint64_t v7 = v9;
        }
      }

      while (v7 != v8);
      uint64_t v3 = (void **)a1[1];
      unint64_t v4 = (void **)a1[2];
    }
  }

  *uint64_t v2 = 0LL;
  unint64_t v10 = (char *)v4 - (char *)v3;
  if ((unint64_t)((char *)v4 - (char *)v3) >= 0x11)
  {
    do
    {
      operator delete(*v3);
      unint64_t v4 = (void **)a1[2];
      uint64_t v3 = (void **)(a1[1] + 8LL);
      a1[1] = v3;
      unint64_t v10 = (char *)v4 - (char *)v3;
    }

    while ((unint64_t)((char *)v4 - (char *)v3) > 0x10);
  }

  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 25LL;
  }

  else
  {
    if (v11 != 2) {
      goto LABEL_16;
    }
    uint64_t v12 = 51LL;
  }

  a1[4] = v12;
LABEL_16:
  while (v3 != v4)
  {
    __int128 v13 = *v3++;
    operator delete(v13);
  }

  return sub_1000540D8((uint64_t)a1);
}

void sub_1000542F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void **)(a2 + 48);
  sub_1000027F4(&v3);
}

uint64_t sub_100054338(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0LL;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8LL);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }

    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }

  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 512LL;
  }

  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 1024LL;
  }

  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }

  return sub_1000540D8((uint64_t)a1);
}

void sub_1000543CC(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_10005440C(v2);
    operator delete(**a1);
  }

void sub_10005440C(void *a1)
{
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = (void *)a1[1];
  while (v3 != v2)
  {
    unint64_t v5 = (void *)*--v3;
    unint64_t v4 = v5;
    void *v3 = 0LL;
    if (v5) {
      operator delete(v4);
    }
  }

  a1[1] = v2;
}

void *sub_100054454()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_10007C080);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10007C080))
  {
    uint64_t v2 = (int *)sub_1000544F8();
    uint64_t v3 = (int *)sub_1000536AC();
    YAML::operator|(v2, v3, (uint64_t)&unk_10007C060);
    __cxa_atexit((void (*)(void *))sub_100053674, &unk_10007C060, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10007C080);
  }

  return &unk_10007C060;
}

void sub_1000544E0(_Unwind_Exception *a1)
{
}

void *sub_1000544F8()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_10007C0A8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10007C0A8))
  {
    uint64_t v2 = (int *)sub_10005459C();
    uint64_t v3 = (int *)sub_1000535E0();
    YAML::operator|(v2, v3, (uint64_t)&unk_10007C088);
    __cxa_atexit((void (*)(void *))sub_100053674, &unk_10007C088, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10007C0A8);
  }

  return &unk_10007C088;
}

void sub_100054584(_Unwind_Exception *a1)
{
}

void *sub_10005459C()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_10007C0D0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10007C0D0))
  {
    YAML::RegEx::RegEx((uint64_t)&unk_10007C0B0, 32);
    __cxa_atexit((void (*)(void *))sub_100053674, &unk_10007C0B0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10007C0D0);
  }

  return &unk_10007C0B0;
}

void sub_100054618(_Unwind_Exception *a1)
{
}

uint64_t sub_100054630(uint64_t a1, unint64_t *a2)
{
  unint64_t v5 = *a2;
  unint64_t v4 = (YAML::Stream *)a2[1];
  if (*((void *)v4 + 8) <= v5 && !YAML::Stream::_ReadAheadTo(v4, v5)) {
    return 0xFFFFFFFFLL;
  }
  switch(*(_DWORD *)a1)
  {
    case 0:
      if (*(_BYTE *)(*(void *)(*(void *)(a2[1] + 32) + (((*(void *)(a2[1] + 56) + *a2) >> 9) & 0x7FFFFFFFFFFFF8LL))
                    + ((*(void *)(a2[1] + 56) + *a2) & 0xFFF)) == 4)
        uint64_t result = 0LL;
      else {
        uint64_t result = 0xFFFFFFFFLL;
      }
      break;
    case 1:
      if (*(unsigned __int8 *)(*(void *)(*(void *)(a2[1] + 32) {
                                          + (((*(void *)(a2[1] + 56) + *a2) >> 9) & 0x7FFFFFFFFFFFF8LL))
      }
      else {
        uint64_t result = 0xFFFFFFFFLL;
      }
      break;
    case 2:
      uint64_t result = 0xFFFFFFFFLL;
      if (*(char *)(a1 + 4) <= v8)
      {
        else {
          uint64_t result = 1LL;
        }
      }

      break;
    case 3:
      uint64_t result = sub_1000549C0(a1, a2);
      break;
    case 4:
      uint64_t result = sub_100054A28(a1, a2);
      break;
    case 5:
      uint64_t result = sub_100054AB0(a1, a2);
      break;
    case 6:
      uint64_t result = sub_100054AF0(a1, a2);
      break;
    default:
      return 0xFFFFFFFFLL;
  }

  return result;
}

uint64_t sub_10005478C(uint64_t a1, void *a2)
{
  switch(*(_DWORD *)a1)
  {
    case 0:
      if (*(_BYTE *)(*(void *)(*(void *)(a2[1] + 32LL)
                                + (((*(void *)(a2[1] + 56LL) + *a2) >> 9) & 0x7FFFFFFFFFFFF8LL))
                    + ((*(void *)(a2[1] + 56LL) + *a2) & 0xFFFLL)) == 4)
        uint64_t v4 = 0LL;
      else {
        uint64_t v4 = 0xFFFFFFFFLL;
      }
      break;
    case 1:
      if (*(unsigned __int8 *)(*(void *)(*(void *)(a2[1] + 32LL) {
                                          + (((*(void *)(a2[1] + 56LL) + *a2) >> 9) & 0x7FFFFFFFFFFFF8LL))
      }
      else {
        uint64_t v4 = 0xFFFFFFFFLL;
      }
      break;
    case 2:
      int v5 = *(char *)(*(void *)(*(void *)(a2[1] + 32LL)
                               + (((*(void *)(a2[1] + 56LL) + *a2) >> 9) & 0x7FFFFFFFFFFFF8LL))
                   + ((*(void *)(a2[1] + 56LL) + *a2) & 0xFFFLL));
      uint64_t v4 = 0xFFFFFFFFLL;
      if (*(char *)(a1 + 4) <= v5)
      {
        else {
          uint64_t v4 = 1LL;
        }
      }

      break;
    case 3:
      uint64_t v6 = *(void *)(a1 + 8);
      if (*(void *)(a1 + 16) == v6) {
        goto LABEL_37;
      }
      uint64_t v7 = 0LL;
      unint64_t v8 = 0LL;
      while (1)
      {
        uint64_t v9 = sub_10005478C(v6 + v7, a2);
        if ((v9 & 0x80000000) == 0) {
          break;
        }
        ++v8;
        uint64_t v6 = *(void *)(a1 + 8);
        v7 += 32LL;
        if (v8 >= (*(void *)(a1 + 16) - v6) >> 5) {
          goto LABEL_37;
        }
      }

      uint64_t v4 = v9;
      break;
    case 4:
      uint64_t v10 = *(void *)(a1 + 8);
      if (*(void *)(a1 + 16) == v10) {
        goto LABEL_37;
      }
      uint64_t v11 = 0LL;
      unint64_t v12 = 0LL;
      LODWORD(v4) = -1;
      do
      {
        unsigned int v13 = sub_10005478C(v10 + v11, a2);
        if (v13 == -1) {
          goto LABEL_37;
        }
        if (v12) {
          uint64_t v4 = v4;
        }
        else {
          uint64_t v4 = v13;
        }
        ++v12;
        uint64_t v10 = *(void *)(a1 + 8);
        v11 += 32LL;
      }

      while (v12 < (*(void *)(a1 + 16) - v10) >> 5);
      break;
    case 5:
      uint64_t v14 = *(void *)(a1 + 8);
      uint64_t v4 = 0xFFFFFFFFLL;
      if (v14 != *(void *)(a1 + 16))
      {
        else {
          uint64_t v4 = 1LL;
        }
      }

      break;
    case 6:
      uint64_t v15 = *(void *)(a1 + 8);
      if (*(void *)(a1 + 16) == v15)
      {
        uint64_t v4 = 0LL;
      }

      else
      {
        uint64_t v16 = 0LL;
        LODWORD(v4) = 0;
        unint64_t v17 = 0LL;
        do
        {
          uint64_t v18 = v15 + v16;
          uint64_t v19 = a2[1];
          uint64_t v20 = *a2 + (int)v4;
          v23[0] = v20;
          v23[1] = v19;
          int v21 = sub_100054630(v18, v23);
          if (v21 == -1) {
            goto LABEL_37;
          }
          uint64_t v4 = (v21 + v4);
          ++v17;
          uint64_t v15 = *(void *)(a1 + 8);
          v16 += 32LL;
        }

        while (v17 < (*(void *)(a1 + 16) - v15) >> 5);
      }

      break;
    default:
LABEL_37:
      uint64_t v4 = 0xFFFFFFFFLL;
      break;
  }

  return v4;
}

uint64_t sub_1000549C0(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(void *)(a1 + 16) == v2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v5 = 0LL;
  unint64_t v6 = 0LL;
  while (1)
  {
    uint64_t result = sub_10005478C(v2 + v5, a2);
    if ((result & 0x80000000) == 0) {
      break;
    }
    ++v6;
    uint64_t v2 = *(void *)(a1 + 8);
    v5 += 32LL;
    if (v6 >= (*(void *)(a1 + 16) - v2) >> 5) {
      return 0xFFFFFFFFLL;
    }
  }

  return result;
}

uint64_t sub_100054A28(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(void *)(a1 + 16) != v2)
  {
    uint64_t v5 = 0LL;
    unint64_t v6 = 0LL;
    LODWORD(vmemset(v42, 0, 7) = -1;
    while (1)
    {
      unsigned int v8 = sub_10005478C(v2 + v5, a2);
      if (v8 == -1) {
        break;
      }
      if (v6) {
        uint64_t v7 = v7;
      }
      else {
        uint64_t v7 = v8;
      }
      ++v6;
      uint64_t v2 = *(void *)(a1 + 8);
      v5 += 32LL;
      if (v6 >= (*(void *)(a1 + 16) - v2) >> 5) {
        return v7;
      }
    }
  }

  return 0xFFFFFFFFLL;
}

uint64_t sub_100054AB0(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = 0xFFFFFFFFLL;
  if (v3 != *(void *)(a1 + 16))
  {
    else {
      return 1LL;
    }
  }

  return v4;
}

uint64_t sub_100054AF0(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(void *)(a1 + 16) == v2) {
    return 0LL;
  }
  uint64_t v5 = 0LL;
  LODWORD(v6) = 0;
  unint64_t v7 = 0LL;
  while (1)
  {
    uint64_t v8 = v2 + v5;
    uint64_t v9 = a2[1];
    uint64_t v10 = *a2 + (int)v6;
    v13[0] = v10;
    v13[1] = v9;
    int v11 = sub_100054630(v8, v13);
    if (v11 == -1) {
      break;
    }
    uint64_t v6 = (v11 + v6);
    ++v7;
    uint64_t v2 = *(void *)(a1 + 8);
    v5 += 32LL;
    if (v7 >= (*(void *)(a1 + 16) - v2) >> 5) {
      return v6;
    }
  }

  return 0xFFFFFFFFLL;
}

uint64_t sub_100054B98(int64x2_t *a1)
{
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_100061B70);
  return sub_100054C0C((uint64_t)a1, 1);
}

uint64_t sub_100054C0C(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x33) {
    a2 = 1;
  }
  if (v2 < 0x66) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8LL;
    *(void *)(a1 + 32) -= 51LL;
  }

  return v4 ^ 1u;
}

uint64_t sub_100054C68(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100054CDC((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100054CDC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v16 = a6;
  *((void *)&v16 + 1) = a7;
  __int128 v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }

  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    uint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0LL;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8LL;
      uint64_t v8 = v9;
    }

    while (a3 != a5);
    uint64_t v11 = v16;
  }

  char v14 = 1;
  sub_100054D70((uint64_t)v13);
  return v11;
}

uint64_t sub_100054D70(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_100054DA4(a1);
  }
  return a1;
}

void sub_100054DA4(uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8LL);
  unint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8LL);
  while (v1 != v2)
  {
    uint64_t v3 = *v1;
    *uint64_t v1 = 0LL;
    if (v3) {
      operator delete(v3);
    }
    ++v1;
  }

uint64_t sub_100054DE8(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100054E1C(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v5 = *(void **)(i - 8);
    *(void *)(i - std::istream::~istream(v1, v2 + 8) = 0LL;
    if (v5) {
      operator delete(v5);
    }
  }

void sub_100054E6C(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_100054EF0(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }

  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8LL)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_100054EF0(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      std::string v34 = (char *)sub_10004FA94(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_1000551B8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100055204(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  uint64_t v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    uint64_t v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v19 = (char *)sub_10004FA94(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      unint64_t v22 = (uint64_t *)a1[1];
      uint64_t v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        uint64_t v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v24 = 8 * (v23 >> 3);
        unint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)unint64_t v25 = v26;
          v25 += 8;
          v24 -= 8LL;
        }

        while (v24);
      }

      uint64_t v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        uint64_t v6 = (char *)a1[2];
      }
    }

    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        uint64_t v6 = (char *)a1[1];
      }

      uint64_t v17 = &v6[8 * v13];
      uint64_t v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }

  *(void *)uint64_t v6 = *a2;
  a1[2] += 8LL;
}

void sub_100055318(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    uint64_t v7 = *(_BYTE **)(a1 + 24);
    uint64_t v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1LL;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)sub_10004FA94(v6, v12);
      uint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8LL];
      int64_t v16 = *(uint64_t **)(a1 + 8);
      uint64_t v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        uint64_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8LL;
        }

        while (v19);
      }

      unint64_t v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + std::istream::~istream(v1, v2 + 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }

    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      uint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }

      *(void *)(a1 + std::istream::~istream(v1, v2 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }

  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }

  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8LL;
}

void sub_100055434(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)sub_10004FA94(a1[4], v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8LL;
        }

        while (v22);
      }

      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }

    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }

      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }

  *(void *)uint64_t v4 = *a2;
  a1[2] += 8LL;
}

void sub_100055548(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(_BYTE **)(a1 + 16);
    uint64_t v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        unint64_t v11 = 1LL;
      }
      else {
        unint64_t v11 = (v7 - v4) >> 2;
      }
      uint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)sub_10004FA94(*(void *)(a1 + 32), v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8LL];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      unint64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        unint64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8LL;
        }

        while (v18);
      }

      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + std::istream::~istream(v1, v2 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }

    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }

      *(void *)(a1 + std::istream::~istream(v1, v2 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }

  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }

  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8LL;
}

__n128 sub_100055660(void *a1, __int128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 51 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100055754(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }

  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x33)) + 80 * (v7 % 0x33);
  __int128 v9 = *a2;
  *(_DWORD *)(v8 + 16) = *((_DWORD *)a2 + 4);
  *(_OWORD *)unint64_t v8 = v9;
  __int128 v10 = *(__int128 *)((char *)a2 + 24);
  *(void *)(v8 + 40) = *((void *)a2 + 5);
  *(_OWORD *)(v8 + 24) = v10;
  *((void *)a2 + 4) = 0LL;
  *((void *)a2 + 5) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *(void *)(v8 + 4std::istream::~istream(v1, v2 + 8) = 0LL;
  *(void *)(v8 + 56) = 0LL;
  *(void *)(v8 + 64) = 0LL;
  __n128 result = (__n128)a2[3];
  *(__n128 *)(v8 + 4std::istream::~istream(v1, v2 + 8) = result;
  *(void *)(v8 + 64) = *((void *)a2 + 8);
  *((void *)a2 + memset(v42, 0, 7) = 0LL;
  *((void *)a2 + std::istream::~istream(v1, v2 + 8) = 0LL;
  *((void *)a2 + 6) = 0LL;
  *(_DWORD *)(v8 + sub_10003D0C8(v18 - 72) = *((_DWORD *)a2 + 18);
  ++a1[5];
  return result;
}

void sub_100055754(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x33;
  unint64_t v4 = v2 - 51;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    __int128 v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      std::string v34 = (char *)sub_10004FA94(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_100055A1C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100055A68(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0LL;
  }
  else {
    uint64_t v4 = ((v2 - v3) << 6) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x200) {
    a2 = 1;
  }
  if (v5 < 0x400) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8LL;
  }

  return v7 ^ 1u;
}

void sub_100055AD4()
{
}

void sub_100055AFC()
{
}

void sub_100055B24()
{
}

void YAML::ScanScalar(std::string::size_type a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  BOOL v6 = *(_DWORD *)(a2 + 20) == 2;
  a3->__r_.__value_.__l.__size_ = 0LL;
  a3->__r_.__value_.__l.__cap_ = 0LL;
  a3->__r_.__value_.__r.__words[0] = 0LL;
  *(_BYTE *)(a2 + 40) = 0;
  if (!*(void *)a2)
  {
    unsigned __int8 v7 = atomic_load((unsigned __int8 *)&qword_10007C2D8);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_10007C2D8))
    {
      YAML::RegEx::RegEx((uint64_t)&unk_10007C2B8);
      __cxa_atexit((void (*)(void *))sub_100053674, &unk_10007C2B8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10007C2D8);
    }

    *(void *)a2 = &unk_10007C2B8;
  }

  BOOL v84 = 0;
  int v82 = 0;
  BOOL v8 = 0;
  int v9 = 0;
  char v10 = 0;
  uint64_t v81 = -1LL;
LABEL_5:
  int v83 = v9;
  BOOL v85 = v8;
  while (1)
  {
    if (!YAML::Stream::operator BOOL((void *)a1)) {
      goto LABEL_122;
    }
LABEL_7:
    std::string::size_type size = (a3->__r_.__value_.__s.__size_ & 0x80u) == 0 ? a3->__r_.__value_.__s.__size_ : a3->__r_.__value_.__l.__size_;
    while (1)
    {
      uint64_t v12 = *(void *)a2;
      std::string __p = 0LL;
      std::string::size_type v87 = a1;
      if ((sub_100054630(v12, (unint64_t *)&__p) & 0x80000000) == 0
        || (uint64_t v13 = sub_1000536AC(),
            std::string __p = 0LL,
            std::string::size_type v87 = a1,
            (sub_100054630((uint64_t)v13, (unint64_t *)&__p) & 0x80000000) == 0)
        || !YAML::Stream::operator BOOL((void *)a1))
      {
LABEL_38:
        int v22 = 0;
        goto LABEL_39;
      }

      if (!*(_DWORD *)(a1 + 16))
      {
        unsigned __int8 v14 = atomic_load((unsigned __int8 *)&qword_10007C300);
        if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_10007C300))
        {
          int64_t v20 = (int *)sub_100052998();
          uint64_t v21 = (int *)sub_100052B30();
          YAML::operator|(v20, v21, (uint64_t)&unk_10007C2E0);
          __cxa_atexit((void (*)(void *))sub_100053674, &unk_10007C2E0, (void *)&_mh_execute_header);
          __cxa_guard_release(&qword_10007C300);
        }

        std::string __p = 0LL;
        std::string::size_type v87 = a1;
        if ((sub_100054630((uint64_t)&unk_10007C2E0, (unint64_t *)&__p) & 0x80000000) == 0)
        {
          int v15 = *(_DWORD *)(a2 + 32);
          if (v15 == 1) {
            goto LABEL_38;
          }
          if (v15 == 2)
          {
            exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
            int v80 = *(_DWORD *)(a1 + 16);
            uint64_t v89 = *(void *)(a1 + 8);
            int v90 = v80;
            sub_1000021BC(&__p, "illegal document indicator in scalar");
            sub_1000413D8((uint64_t)exception, &v89, (uint64_t)&__p);
            void *exception = off_1000792A0;
          }
        }
      }

      if (*(_BYTE *)(a2 + 18) == 92)
      {
        uint64_t v16 = sub_1000566AC();
        std::string __p = 0LL;
        std::string::size_type v87 = a1;
      }

      if (*(unsigned __int8 *)(a2 + 18) == YAML::Stream::peek((YAML::Stream *)a1))
      {
        YAML::Exp::Escape((YAML::Exp *)a1, (uint64_t)&__p);
        if ((v88 & 0x80u) == 0) {
          p_p = (const std::string::value_type *)&__p;
        }
        else {
          p_p = (const std::string::value_type *)__p;
        }
        if ((v88 & 0x80u) == 0) {
          std::string::size_type v19 = v88;
        }
        else {
          std::string::size_type v19 = v87;
        }
        std::string::append(a3, p_p, v19);
        if ((a3->__r_.__value_.__s.__size_ & 0x80u) == 0) {
          std::string::size_type size = a3->__r_.__value_.__s.__size_;
        }
        else {
          std::string::size_type size = a3->__r_.__value_.__l.__size_;
        }
        BOOL v6 = 1;
        uint64_t v81 = size;
        char v10 = 1;
      }

      else
      {
        int v17 = YAML::Stream::get((YAML::Stream *)a1);
        std::string::push_back(a3, v17);
        BOOL v6 = 1;
        char v10 = 1;
      }
    }

    YAML::Stream::get((YAML::Stream *)a1);
    std::string::size_type size = (char)a3->__r_.__value_.__s.__size_ < 0 ? a3->__r_.__value_.__l.__size_ : a3->__r_.__value_.__s.__size_;
    int v22 = 1;
    uint64_t v81 = size;
    BOOL v6 = 1;
    char v10 = 1;
LABEL_39:
    if (!YAML::Stream::operator BOOL((void *)a1)) {
      break;
    }
    if (*(_DWORD *)(a2 + 32) == 1 && !*(_DWORD *)(a1 + 16))
    {
      unsigned __int8 v23 = atomic_load((unsigned __int8 *)&qword_10007C300);
      if ((v23 & 1) == 0 && __cxa_guard_acquire(&qword_10007C300))
      {
        uint64_t v45 = (int *)sub_100052998();
        unint64_t v46 = (int *)sub_100052B30();
        YAML::operator|(v45, v46, (uint64_t)&unk_10007C2E0);
        __cxa_atexit((void (*)(void *))sub_100053674, &unk_10007C2E0, (void *)&_mh_execute_header);
        __cxa_guard_release(&qword_10007C300);
      }

      std::string __p = 0LL;
      std::string::size_type v87 = a1;
    }

    uint64_t v24 = *(void *)a2;
    std::string __p = 0LL;
    std::string::size_type v87 = a1;
    int v25 = sub_100054630(v24, (unint64_t *)&__p);
    if ((v25 & 0x80000000) == 0)
    {
      if (*(_BYTE *)(a2 + 8))
      {
        YAML::Stream::eat((YAML::Stream *)a1, v25);
        unint64_t v50 = v81;
        goto LABEL_123;
      }

      goto LABEL_122;
    }

    if (*(_DWORD *)(a2 + 20) == 2) {
      std::string::erase(a3, size, 0xFFFFFFFFFFFFFFFFLL);
    }
    uint64_t v26 = sub_1000536AC();
    std::string __p = 0LL;
    std::string::size_type v87 = a1;
    int v27 = sub_100054630((uint64_t)v26, (unint64_t *)&__p);
    YAML::Stream::eat((YAML::Stream *)a1, v27);
    while (YAML::Stream::peek((YAML::Stream *)a1) == 32
         && (*(_DWORD *)(a1 + 16) < *(_DWORD *)(a2 + 12) || !((*(_BYTE *)(a2 + 16) == 0) | v10 & 1)))
    {
      uint64_t v28 = *(void *)a2;
      std::string __p = 0LL;
      std::string::size_type v87 = a1;
      YAML::Stream::eat((YAML::Stream *)a1, 1);
    }

    if (!((*(_BYTE *)(a2 + 16) == 0) | v10 & 1))
    {
      int v29 = *(_DWORD *)(a1 + 16);
      if (*(_DWORD *)(a2 + 12) > v29) {
        int v29 = *(_DWORD *)(a2 + 12);
      }
      *(_DWORD *)(a2 + 12) = v29;
    }

    while (1)
    {
      unsigned __int8 v30 = atomic_load((unsigned __int8 *)&qword_10007C0A8);
      if ((v30 & 1) == 0 && __cxa_guard_acquire(&qword_10007C0A8))
      {
        __int128 v32 = (int *)sub_10005459C();
        unint64_t v33 = (int *)sub_1000535E0();
        YAML::operator|(v32, v33, (uint64_t)&unk_10007C088);
        __cxa_atexit((void (*)(void *))sub_100053674, &unk_10007C088, (void *)&_mh_execute_header);
        __cxa_guard_release(&qword_10007C0A8);
      }

      std::string __p = 0LL;
      std::string::size_type v87 = a1;
      if (YAML::Stream::peek((YAML::Stream *)a1) == 9
        && *(_DWORD *)(a1 + 16) < *(_DWORD *)(a2 + 12)
        && *(_DWORD *)(a2 + 36) == 2)
      {
        unsigned __int8 v77 = __cxa_allocate_exception(0x38uLL);
        int v78 = *(_DWORD *)(a1 + 16);
        uint64_t v89 = *(void *)(a1 + 8);
        int v90 = v78;
        sub_1000021BC(&__p, "illegal tab when looking for indentation");
        sub_1000413D8((uint64_t)v77, &v89, (uint64_t)&__p);
        *unsigned __int8 v77 = off_1000792A0;
      }

      if (!*(_BYTE *)(a2 + 17)) {
        break;
      }
      uint64_t v31 = *(void *)a2;
      std::string __p = 0LL;
      std::string::size_type v87 = a1;
      YAML::Stream::eat((YAML::Stream *)a1, 1);
    }

    std::string v34 = sub_1000536AC();
    std::string __p = 0LL;
    std::string::size_type v87 = a1;
    int v35 = sub_100054630((uint64_t)v34, (unint64_t *)&__p);
    unsigned __int8 v36 = atomic_load((unsigned __int8 *)&qword_10007C0A8);
    if ((v36 & 1) == 0 && __cxa_guard_acquire(&qword_10007C0A8))
    {
      uint64_t v43 = (int *)sub_10005459C();
      unint64_t v44 = (int *)sub_1000535E0();
      YAML::operator|(v43, v44, (uint64_t)&unk_10007C088);
      __cxa_atexit((void (*)(void *))sub_100053674, &unk_10007C088, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10007C0A8);
    }

    std::string __p = 0LL;
    std::string::size_type v87 = a1;
    int v37 = sub_100054630((uint64_t)&unk_10007C088, (unint64_t *)&__p);
    int v38 = v37;
    BOOL v39 = v35 > -1 && v82 == 0;
    BOOL v8 = v37 >= 0;
    int v40 = *(_DWORD *)(a2 + 20);
    BOOL v41 = v39 && v40 == 1;
    BOOL v42 = v84;
    if (v41) {
      BOOL v42 = v85;
    }
    BOOL v84 = v42;
    if (!v6) {
      goto LABEL_84;
    }
    switch(v40)
    {
      case 0:
        std::string::append(a3, "\n");
        goto LABEL_84;
      case 2:
        if (v35 < 0)
        {
          if (((v83 | v22) & 1) == 0) {
            std::string::append(a3, " ");
          }
          goto LABEL_116;
        }

        int v83 = 1;
        std::string::append(a3, "\n");
        BOOL v85 = v8;
        BOOL v6 = 1;
        break;
      case 1:
        if ((v83 | v85) & 1 | (v35 >= 0) || (v37 & 0x80000000) == 0)
        {
          if ((v35 & 0x80000000) == 0)
          {
            ++v82;
            int v9 = 1;
            BOOL v6 = 1;
            goto LABEL_5;
          }

LABEL_116:
        int v9 = 0;
        BOOL v6 = 1;
        if (*(_DWORD *)(a1 + 16) >= *(_DWORD *)(a2 + 12)) {
          goto LABEL_5;
        }
        *(_BYTE *)(a2 + 40) = 1;
LABEL_122:
        unint64_t v50 = v81;
        goto LABEL_123;
      default:
LABEL_84:
        int v83 = 1;
        BOOL v85 = v8;
        BOOL v6 = 1;
        if (v35 < 0) {
          goto LABEL_116;
        }
        break;
    }
  }

  unint64_t v50 = v81;
  if (*(_BYTE *)(a2 + 8))
  {
    uint64_t v51 = __cxa_allocate_exception(0x38uLL);
    int v52 = *(_DWORD *)(a1 + 16);
    uint64_t v89 = *(void *)(a1 + 8);
    int v90 = v52;
    sub_1000021BC(&__p, "illegal EOF in scalar");
    sub_1000413D8((uint64_t)v51, &v89, (uint64_t)&__p);
    void *v51 = off_1000792A0;
  }

LABEL_123:
  if (*(_BYTE *)(a2 + 24))
  {
    unint64_t v53 = a3->__r_.__value_.__s.__size_;
    if ((v53 & 0x80u) == 0LL) {
      __int128 v54 = a3;
    }
    else {
      __int128 v54 = (std::string *)a3->__r_.__value_.__r.__words[0];
    }
    if ((v53 & 0x80u) != 0LL) {
      unint64_t v53 = a3->__r_.__value_.__l.__size_;
    }
    p_std::string::size_type size = (std::string::__short::$654DBF3D633A6121C0B197AC38B89F76 *)&v54[-1].__r_.__value_.__s.__size_;
    unint64_t v56 = v53;
    while (v56)
    {
      int v57 = p_size[v56--].__size_;
      if (v57 != 32) {
        goto LABEL_134;
      }
    }

    unint64_t v56 = -1LL;
LABEL_134:
    if (v56 != -1LL && v56 >= v50) {
      unint64_t v59 = v56;
    }
    else {
      unint64_t v59 = v50;
    }
    if (v50 != -1LL) {
      unint64_t v56 = v59;
    }
    if (v56 < v53) {
      std::string::erase(a3, v56 + 1, 0xFFFFFFFFFFFFFFFFLL);
    }
  }

  int v60 = *(_DWORD *)(a2 + 28);
  if (v60 == -1)
  {
    unint64_t v66 = a3->__r_.__value_.__s.__size_;
    if ((v66 & 0x80u) == 0LL) {
      size_t v67 = a3;
    }
    else {
      size_t v67 = (std::string *)a3->__r_.__value_.__r.__words[0];
    }
    if ((v66 & 0x80u) != 0LL) {
      unint64_t v66 = a3->__r_.__value_.__l.__size_;
    }
    uint64_t v68 = (std::string::__short::$654DBF3D633A6121C0B197AC38B89F76 *)&v67[-1].__r_.__value_.__s.__size_;
    unint64_t v69 = v66;
    while (v69)
    {
      int v70 = v68[v69--].__size_;
      if (v70 != 10) {
        goto LABEL_177;
      }
    }

    unint64_t v69 = -1LL;
LABEL_177:
    if (v69 != -1LL && v69 >= v50) {
      unint64_t v75 = v69;
    }
    else {
      unint64_t v75 = v50;
    }
    if (v50 != -1LL) {
      unint64_t v69 = v75;
    }
    if (v69 == -1LL)
    {
      std::string::size_type v76 = 0LL;
    }

    else
    {
      if (v69 >= v66) {
        return;
      }
      std::string::size_type v76 = v69 + 1;
    }

    std::string::erase(a3, v76, 0xFFFFFFFFFFFFFFFFLL);
  }

  else if (!v60)
  {
    unint64_t v61 = a3->__r_.__value_.__s.__size_;
    if ((v61 & 0x80u) == 0LL) {
      unint64_t v62 = a3;
    }
    else {
      unint64_t v62 = (std::string *)a3->__r_.__value_.__r.__words[0];
    }
    if ((v61 & 0x80u) != 0LL) {
      unint64_t v61 = a3->__r_.__value_.__l.__size_;
    }
    uint64_t v63 = (std::string::__short::$654DBF3D633A6121C0B197AC38B89F76 *)&v62[-1].__r_.__value_.__s.__size_;
    unint64_t v64 = v61;
    while (v64)
    {
      int v65 = v63[v64--].__size_;
      if (v65 != 10) {
        goto LABEL_165;
      }
    }

    unint64_t v64 = -1LL;
LABEL_165:
    if (v64 != -1LL && v64 >= v50) {
      unint64_t v72 = v64;
    }
    else {
      unint64_t v72 = v50;
    }
    if (v50 != -1LL) {
      unint64_t v64 = v72;
    }
    if (v64 == -1LL)
    {
      std::string::size_type v73 = 0LL;
LABEL_189:
      std::string::erase(a3, v73, 0xFFFFFFFFFFFFFFFFLL);
    }

    else if (v64 + 1 < v61)
    {
      std::string::size_type v73 = v64 + 2;
      goto LABEL_189;
    }
  }

void sub_1000565B8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

void *sub_1000566AC()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_10007C328);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10007C328))
  {
    YAML::RegEx::RegEx((uint64_t)&v3, 92);
    uint64_t v2 = (int *)sub_1000536AC();
    YAML::operator+(&v3, v2, (uint64_t)&unk_10007C308);
    unint64_t v5 = (void **)&v4;
    sub_1000518E0(&v5);
    __cxa_atexit((void (*)(void *))sub_100053674, &unk_10007C308, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10007C328);
  }

  return &unk_10007C308;
}

void sub_100056758(_Unwind_Exception *a1)
{
}

uint64_t YAML::ScanVerbatimTag@<X0>(YAML *this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  YAML::Stream::get(this);
  while (1)
  {
    if (!YAML::Stream::operator BOOL(this))
    {
LABEL_14:
      exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
      int v11 = *((_DWORD *)this + 4);
      uint64_t v12 = *((void *)this + 1);
      int v13 = v11;
      sub_1000021BC(&__p, "end of verbatim tag not found");
      sub_1000413D8((uint64_t)exception, &v12, (uint64_t)&__p);
      void *exception = off_1000792A0;
    }

    unint64_t v5 = sub_100056930();
    __p.__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)this;
    int v6 = sub_100054630((uint64_t)v5, (unint64_t *)&__p);
    if (v6 < 1) {
      goto LABEL_14;
    }
    YAML::Stream::get(this, v6, &__p);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type size = __p.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(a2, (const std::string::value_type *)p_p, size);
  }

void sub_1000568BC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

void *sub_100056930()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_10007C350);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10007C350))
  {
    uint64_t v2 = (int *)sub_100056D34();
    sub_1000021BC(__p, "#;/?:@&=+$,_.!~*'()[]");
    YAML::RegEx::RegEx((uint64_t)&v13, (char *)__p, 3);
    YAML::operator|(v2, &v13, (uint64_t)&v15);
    YAML::RegEx::RegEx((uint64_t)&v5, 37);
    int v3 = (int *)sub_1000571D8();
    YAML::operator+(&v5, v3, (uint64_t)&v7);
    uint64_t v4 = (int *)sub_1000571D8();
    YAML::operator+(&v7, v4, (uint64_t)&v9);
    YAML::operator|(&v15, (int *)&v9, (uint64_t)&unk_10007C330);
    uint64_t v17 = (void **)&v10;
    sub_1000518E0(&v17);
    uint64_t v17 = (void **)&v8;
    sub_1000518E0(&v17);
    uint64_t v17 = (void **)&v6;
    sub_1000518E0(&v17);
    int v9 = (void **)&v16;
    sub_1000518E0(&v9);
    int v9 = (void **)&v14;
    sub_1000518E0(&v9);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    __cxa_atexit((void (*)(void *))sub_100053674, &unk_10007C330, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10007C350);
  }

  return &unk_10007C330;
}

void sub_100056A98( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *__p, uint64_t a22, int a23, __int16 a24, char a25, char a26)
{
  *(void *)(v27 - 24) = v26 + 8;
  sub_1000518E0((void ***)(v27 - 24));
  *(void *)(v27 - 24) = &a14;
  sub_1000518E0((void ***)(v27 - 24));
  *(void *)(v27 - 24) = &a10;
  sub_1000518E0((void ***)(v27 - 24));
  a17 = v27 - 48;
  sub_1000518E0((void ***)&a17);
  a17 = v27 - 80;
  sub_1000518E0((void ***)&a17);
  if (a26 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_10007C350);
  _Unwind_Resume(a1);
}

uint64_t YAML::ScanTagHandle@<X0>(YAML *this@<X0>, YAML::Stream *a2@<X1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0LL;
  a3->__r_.__value_.__l.__size_ = 0LL;
  a3->__r_.__value_.__l.__cap_ = 0LL;
  *(_BYTE *)a2 = 1;
  uint64_t v16 = 0LL;
  int v17 = 0;
  while (1)
  {
    uint64_t result = YAML::Stream::operator BOOL(this);
    if (!(_DWORD)result) {
      return result;
    }
    uint64_t result = YAML::Stream::peek(this);
    if ((_DWORD)result == 33)
    {
      if (!*(_BYTE *)a2)
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
        sub_1000021BC(&__p, "illegal character found while scanning tag handle");
        sub_1000413D8((uint64_t)exception, &v16, (uint64_t)&__p);
        void *exception = off_1000792A0;
      }

      return result;
    }

    if (*(_BYTE *)a2)
    {
      uint64_t v8 = sub_100056D34();
      __p.__r_.__value_.__r.__words[0] = 0LL;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)this;
      int v9 = sub_100054630((uint64_t)v8, (unint64_t *)&__p);
      if (v9 <= 0)
      {
        *(_BYTE *)a2 = 0;
        int v10 = *((_DWORD *)this + 4);
        uint64_t v16 = *((void *)this + 1);
        int v17 = v10;
      }

      else if (*(_BYTE *)a2)
      {
        goto LABEL_10;
      }
    }

    int v11 = sub_100056E18();
    __p.__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)this;
    uint64_t result = sub_100054630((uint64_t)v11, (unint64_t *)&__p);
    int v9 = result;
LABEL_10:
    YAML::Stream::get(this, v9, &__p);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type size = __p.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(a3, (const std::string::value_type *)p_p, size);
  }

void sub_100056CC4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      _Unwind_Resume(a1);
    }
  }

  else if (!v17)
  {
    goto LABEL_6;
  }

  __cxa_free_exception(v16);
  goto LABEL_6;
}

void *sub_100056D34()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_10007C3C8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10007C3C8))
  {
    uint64_t v2 = (int *)sub_1000573D8();
    YAML::RegEx::RegEx((uint64_t)&v3, 45);
    YAML::operator|(v2, &v3, (uint64_t)&unk_10007C3A8);
    int v5 = (void **)&v4;
    sub_1000518E0(&v5);
    __cxa_atexit((void (*)(void *))sub_100053674, &unk_10007C3A8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10007C3C8);
  }

  return &unk_10007C3A8;
}

void sub_100056DE4(_Unwind_Exception *a1)
{
  *(void *)(v2 - 24) = v1 + 8;
  sub_1000518E0((void ***)(v2 - 24));
  __cxa_guard_abort(&qword_10007C3C8);
  _Unwind_Resume(a1);
}

void *sub_100056E18()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_10007C440);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10007C440))
  {
    uint64_t v2 = (int *)sub_100056D34();
    sub_1000021BC(__p, "#;/?:@&=+$_.~*'()");
    YAML::RegEx::RegEx((uint64_t)&v13, (char *)__p, 3);
    YAML::operator|(v2, &v13, (uint64_t)&v15);
    YAML::RegEx::RegEx((uint64_t)&v5, 37);
    int v3 = (int *)sub_1000571D8();
    YAML::operator+(&v5, v3, (uint64_t)&v7);
    uint64_t v4 = (int *)sub_1000571D8();
    YAML::operator+(&v7, v4, (uint64_t)&v9);
    YAML::operator|(&v15, (int *)&v9, (uint64_t)&unk_10007C420);
    int v17 = (void **)&v10;
    sub_1000518E0(&v17);
    int v17 = (void **)&v8;
    sub_1000518E0(&v17);
    int v17 = (void **)&v6;
    sub_1000518E0(&v17);
    int v9 = (void **)&v16;
    sub_1000518E0(&v9);
    int v9 = (void **)&v14;
    sub_1000518E0(&v9);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    __cxa_atexit((void (*)(void *))sub_100053674, &unk_10007C420, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10007C440);
  }

  return &unk_10007C420;
}

void sub_100056F80( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *__p, uint64_t a22, int a23, __int16 a24, char a25, char a26)
{
  *(void *)(v27 - 24) = v26 + 8;
  sub_1000518E0((void ***)(v27 - 24));
  *(void *)(v27 - 24) = &a14;
  sub_1000518E0((void ***)(v27 - 24));
  *(void *)(v27 - 24) = &a10;
  sub_1000518E0((void ***)(v27 - 24));
  a17 = v27 - 48;
  sub_1000518E0((void ***)&a17);
  a17 = v27 - 80;
  sub_1000518E0((void ***)&a17);
  if (a26 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_10007C440);
  _Unwind_Resume(a1);
}

uint64_t YAML::ScanTagSuffix@<X0>(YAML *this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  while (1)
  {
    uint64_t result = YAML::Stream::operator BOOL(this);
    if (!(_DWORD)result) {
      break;
    }
    uint64_t v6 = sub_100056E18();
    __p.__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)this;
    uint64_t result = sub_100054630((uint64_t)v6, (unint64_t *)&__p);
    YAML::Stream::get(this, result, &__p);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type size = __p.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(a2, (const std::string::value_type *)p_p, size);
  }

  std::string::size_type v9 = a2->__r_.__value_.__s.__size_;
  if ((v9 & 0x80u) != 0LL) {
    std::string::size_type v9 = a2->__r_.__value_.__l.__size_;
  }
  if (!v9)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
    int v11 = *((_DWORD *)this + 4);
    uint64_t v12 = *((void *)this + 1);
    int v13 = v11;
    sub_1000021BC(&__p, "tag handle with no suffix");
    sub_1000413D8((uint64_t)exception, &v12, (uint64_t)&__p);
    void *exception = off_1000792A0;
  }

  return result;
}

void sub_100057168( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    if ((v19 & 1) == 0)
    {
LABEL_6:
      _Unwind_Resume(a1);
    }
  }

  else if (!v19)
  {
    goto LABEL_6;
  }

  __cxa_free_exception(v18);
  goto LABEL_6;
}

void *sub_1000571D8()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_10007C378);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10007C378))
  {
    uint64_t v2 = (int *)sub_100057340();
    YAML::RegEx::RegEx((uint64_t)&v5, 65, 70);
    YAML::operator|(v2, &v5, (uint64_t)&v7);
    YAML::RegEx::RegEx((uint64_t)&v3, 97, 102);
    YAML::operator|(&v7, (int *)&v3, (uint64_t)&unk_10007C358);
    std::string::size_type v9 = (void **)&v4;
    sub_1000518E0(&v9);
    int v3 = (void **)&v8;
    sub_1000518E0(&v3);
    int v3 = (void **)&v6;
    sub_1000518E0(&v3);
    __cxa_atexit((void (*)(void *))sub_100053674, &unk_10007C358, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10007C378);
  }

  return &unk_10007C358;
}

void sub_1000572D4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  *(void *)(v16 - 24) = v15 + 8;
  sub_1000518E0((void ***)(v16 - 24));
  a10 = (void **)(v16 - 48);
  sub_1000518E0(&a10);
  a10 = (void **)&a15;
  sub_1000518E0(&a10);
  __cxa_guard_abort(&qword_10007C378);
  _Unwind_Resume(a1);
}

void *sub_100057340()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_10007C3A0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10007C3A0))
  {
    YAML::RegEx::RegEx((uint64_t)&unk_10007C380, 48, 57);
    __cxa_atexit((void (*)(void *))sub_100053674, &unk_10007C380, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10007C3A0);
  }

  return &unk_10007C380;
}

void sub_1000573C0(_Unwind_Exception *a1)
{
}

void *sub_1000573D8()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_10007C3F0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10007C3F0))
  {
    uint64_t v2 = (int *)sub_10005747C();
    int v3 = (int *)sub_100057340();
    YAML::operator|(v2, v3, (uint64_t)&unk_10007C3D0);
    __cxa_atexit((void (*)(void *))sub_100053674, &unk_10007C3D0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10007C3F0);
  }

  return &unk_10007C3D0;
}

void sub_100057464(_Unwind_Exception *a1)
{
}

void *sub_10005747C()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_10007C418);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10007C418))
  {
    YAML::RegEx::RegEx((uint64_t)&v4, 97, 122);
    YAML::RegEx::RegEx((uint64_t)&v2, 65, 90);
    YAML::operator|(&v4, (int *)&v2, (uint64_t)&unk_10007C3F8);
    uint64_t v6 = (void **)&v3;
    sub_1000518E0(&v6);
    uint64_t v2 = (void **)&v5;
    sub_1000518E0(&v2);
    __cxa_atexit((void (*)(void *))sub_100053674, &unk_10007C3F8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10007C418);
  }

  return &unk_10007C3F8;
}

void sub_10005754C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  *(void *)(v16 - 24) = v15 + 8;
  sub_1000518E0((void ***)(v16 - 24));
  a10 = (void **)&a15;
  sub_1000518E0(&a10);
  __cxa_guard_abort(&qword_10007C418);
  _Unwind_Resume(a1);
}

void YAML::Scanner::ScanDirective(YAML::Scanner *this)
{
  *((_WORD *)this + 73) = 0;
  uint64_t v2 = *((void *)this + 1);
  int v3 = *((_DWORD *)this + 4);
  *(void *)&__int128 v23 = 0LL;
  *((void *)&v23 + 1) = v2;
  int v24 = v3;
  *(_OWORD *)std::string __p = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  int v28 = 0;
  YAML::Stream::eat(this, 1);
  while (YAML::Stream::operator BOOL(this))
  {
    unsigned __int8 v4 = atomic_load((unsigned __int8 *)&qword_10007C080);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_10007C080))
    {
      uint64_t v6 = (int *)sub_1000544F8();
      int v7 = (int *)sub_1000536AC();
      YAML::operator|(v6, v7, (uint64_t)&unk_10007C060);
      __cxa_atexit((void (*)(void *))sub_100053674, &unk_10007C060, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10007C080);
    }

    v21.__r_.__value_.__r.__words[0] = 0LL;
    v21.__r_.__value_.__l.__size_ = (std::string::size_type)this;
    std::string::value_type v5 = YAML::Stream::get(this);
    std::string::push_back((std::string *)__p, v5);
  }

  while (1)
  {
    while (1)
    {
      unsigned __int8 v8 = atomic_load((unsigned __int8 *)&qword_10007C0A8);
      if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_10007C0A8))
      {
        int v19 = (int *)sub_10005459C();
        int64_t v20 = (int *)sub_1000535E0();
        YAML::operator|(v19, v20, (uint64_t)&unk_10007C088);
        __cxa_atexit((void (*)(void *))sub_100053674, &unk_10007C088, (void *)&_mh_execute_header);
        __cxa_guard_release(&qword_10007C0A8);
      }

      v21.__r_.__value_.__r.__words[0] = 0LL;
      v21.__r_.__value_.__l.__size_ = (std::string::size_type)this;
      YAML::Stream::eat(this, 1);
    }

    if (!YAML::Stream::operator BOOL(this)) {
      break;
    }
    std::string::size_type v9 = sub_1000536AC();
    v21.__r_.__value_.__r.__words[0] = 0LL;
    v21.__r_.__value_.__l.__size_ = (std::string::size_type)this;
    unsigned __int8 v10 = atomic_load((unsigned __int8 *)&qword_10007C210);
    if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_10007C210))
    {
      YAML::RegEx::RegEx((uint64_t)&dword_10007C1F0, 35);
      __cxa_atexit((void (*)(void *))sub_100053674, &dword_10007C1F0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10007C210);
    }

    LODWORD(v21.__r_.__value_.__l.__data_) = dword_10007C1F0;
    WORD2(v21.__r_.__value_.__r.__words[0]) = word_10007C1F4;
    uint64_t v22 = 0LL;
    *(_OWORD *)&v21.__r_.__value_.__r.__words[1] = 0uLL;
    sub_100051C4C( &v21.__r_.__value_.__l.__size_,  (int *)qword_10007C1F8,  unk_10007C200,  (unk_10007C200 - qword_10007C1F8) >> 5);
    p_std::string::size_type size = 0LL;
    uint64_t v31 = this;
    int v11 = sub_100054630((uint64_t)&v21, (unint64_t *)&p_size);
    p_std::string::size_type size = &v21.__r_.__value_.__l.__size_;
    sub_1000518E0((void ***)&p_size);
    if ((v11 & 0x80000000) == 0) {
      break;
    }
    memset(&v21, 0, sizeof(v21));
    while (YAML::Stream::operator BOOL(this))
    {
      unsigned __int8 v12 = atomic_load((unsigned __int8 *)&qword_10007C080);
      if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_10007C080))
      {
        uint64_t v14 = (int *)sub_1000544F8();
        uint64_t v15 = (int *)sub_1000536AC();
        YAML::operator|(v14, v15, (uint64_t)&unk_10007C060);
        __cxa_atexit((void (*)(void *))sub_100053674, &unk_10007C060, (void *)&_mh_execute_header);
        __cxa_guard_release(&qword_10007C080);
      }

      p_std::string::size_type size = 0LL;
      uint64_t v31 = this;
      std::string::value_type v13 = YAML::Stream::get(this);
      std::string::push_back(&v21, v13);
    }

    uint64_t v16 = (_OWORD *)v27;
    if ((unint64_t)v27 >= *((void *)&v27 + 1))
    {
      uint64_t v18 = sub_100002C30((uint64_t *)&v26 + 1, (__int128 *)&v21);
    }

    else
    {
      if ((char)v21.__r_.__value_.__s.__size_ < 0)
      {
        sub_10000231C((_BYTE *)v27, v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_);
      }

      else
      {
        __int128 v17 = *(_OWORD *)&v21.__r_.__value_.__l.__data_;
        *(void *)(v27 + 16) = v21.__r_.__value_.__l.__cap_;
        _OWORD *v16 = v17;
      }

      uint64_t v18 = (uint64_t)v16 + 24;
    }

    *(void *)&__int128 v27 = v18;
  }

  sub_10005A848((void *)this + 12, &v23);
  v21.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26 + 8;
  sub_1000027F4((void ***)&v21);
  if (SBYTE7(v26) < 0) {
    operator delete(__p[0]);
  }
  *(void *)&__int128 v23 = v29;
  sub_1000027F4((void ***)&v23);
}

void sub_10005795C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char *a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
  a17 = &a27;
  sub_1000027F4((void ***)&a17);
  _Unwind_Resume(a1);
}

void *sub_100057A1C@<X0>(uint64_t a1@<X8>)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)&qword_10007C210);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_10007C210))
  {
    YAML::RegEx::RegEx((uint64_t)&dword_10007C1F0, 35);
    __cxa_atexit((void (*)(void *))sub_100053674, &dword_10007C1F0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10007C210);
  }

  *(_DWORD *)a1 = dword_10007C1F0;
  *(_WORD *)(a1 + 4) = word_10007C1F4;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + memset(v29, 0, 24) = 0LL;
  *(void *)(a1 + std::istream::~istream(v1, v2 + 8) = 0LL;
  return sub_100051C4C( (void *)(a1 + 8),  (int *)qword_10007C1F8,  unk_10007C200,  (unk_10007C200 - qword_10007C1F8) >> 5);
}

void sub_100057AC4(_Unwind_Exception *a1)
{
}

void YAML::Scanner::ScanDocStart(YAML::Scanner *this)
{
  *((_WORD *)this + 73) = 0;
  uint64_t v2 = *((void *)this + 1);
  int v3 = *((_DWORD *)this + 4);
  YAML::Stream::eat(this, 3);
  *(void *)&__int128 v4 = &_mh_execute_header;
  *((void *)&v4 + 1) = v2;
  int v5 = v3;
  *(_OWORD *)std::string __p = 0u;
  memset(v7, 0, sizeof(v7));
  int v8 = 0;
  sub_100055660((void *)this + 12, &v4);
  std::string::size_type v9 = (void **)v7 + 1;
  sub_1000027F4(&v9);
  if (SBYTE7(v7[0]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_100057B80(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void YAML::Scanner::ScanDocEnd(YAML::Scanner *this)
{
  *((_WORD *)this + 73) = 0;
  uint64_t v2 = *((void *)this + 1);
  int v3 = *((_DWORD *)this + 4);
  YAML::Stream::eat(this, 3);
  *(void *)&__int128 v4 = 0x200000000LL;
  *((void *)&v4 + 1) = v2;
  int v5 = v3;
  *(_OWORD *)std::string __p = 0u;
  memset(v7, 0, sizeof(v7));
  int v8 = 0;
  sub_100055660((void *)this + 12, &v4);
  std::string::size_type v9 = (void **)v7 + 1;
  sub_1000027F4(&v9);
  if (SBYTE7(v7[0]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_100057C38(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void YAML::Scanner::ScanFlowStart(YAML::Scanner *this)
{
  *((_WORD *)this + 73) = 1;
  uint64_t v2 = *((void *)this + 1);
  int v3 = *((_DWORD *)this + 4);
  BOOL v10 = YAML::Stream::get(this) == 91;
  sub_10005A9C4((void *)this + 34, &v10);
  if (v10) {
    int v4 = 8;
  }
  else {
    int v4 = 9;
  }
  LODWORD(v5) = 0;
  DWORD1(v5) = v4;
  *((void *)&v5 + 1) = v2;
  int v6 = v3;
  *(_OWORD *)std::string __p = 0u;
  memset(v8, 0, sizeof(v8));
  int v9 = 0;
  sub_100055660((void *)this + 12, &v5);
  int v11 = (void **)v8 + 1;
  sub_1000027F4(&v11);
  if (SBYTE7(v8[0]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_100057D0C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void YAML::Scanner::ScanFlowEnd(YAML::Scanner *this)
{
  uint64_t v2 = *((void *)this + 39);
  if (!v2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
    int v17 = *((_DWORD *)this + 4);
    int v25 = (void **)*((void *)this + 1);
    int v26 = v17;
    sub_1000021BC(&v19, "illegal flow end");
    sub_1000413D8((uint64_t)exception, &v25, (uint64_t)&v19);
    void *exception = off_1000792A0;
  }

  unint64_t v3 = v2 + *((void *)this + 38) - 1;
  uint64_t v4 = *((void *)this + 35);
  unint64_t v5 = v3 >> 10;
  uint64_t v6 = *(void *)(v4 + 8 * (v3 >> 10));
  unint64_t v7 = v3 & 0x3FF;
  if (!*(_DWORD *)(v6 + 4 * v7))
  {
    if ((YAML::Scanner::VerifySimpleKey(this) & 1) != 0)
    {
      uint64_t v8 = *((void *)this + 1);
      int v9 = *((_DWORD *)this + 4);
      *(void *)&__int128 v19 = 0xF00000000LL;
      *((void *)&v19 + 1) = v8;
      int v20 = v9;
      *(_OWORD *)std::string __p = 0u;
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      int v24 = 0;
      sub_100055660((void *)this + 12, &v19);
      int v25 = (void **)&v22 + 1;
      sub_1000027F4(&v25);
      if (SBYTE7(v22) < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_9;
    }

    uint64_t v4 = *((void *)this + 35);
    unint64_t v10 = *((void *)this + 39) + *((void *)this + 38) - 1LL;
    unint64_t v5 = v10 >> 10;
    unint64_t v7 = v10 & 0x3FF;
  }

  if (*(_DWORD *)(*(void *)(v4 + 8 * v5) + 4 * v7) == 1) {
    YAML::Scanner::InvalidateSimpleKey(this);
  }
LABEL_9:
  *((_WORD *)this + 73) = 256;
  int v11 = *((_DWORD *)this + 4);
  int v25 = (void **)*((void *)this + 1);
  int v26 = v11;
  int v12 = YAML::Stream::get(this);
  uint64_t v13 = *((void *)this + 39) - 1LL;
  if (*(_DWORD *)(*(void *)(*((void *)this + 35)
                             + (((unint64_t)(v13 + *((void *)this + 38)) >> 7) & 0x1FFFFFFFFFFFFF8LL))
                 + 4 * ((v13 + *((void *)this + 38)) & 0x3FF)) != (v12 == 93))
  {
    uint64_t v18 = __cxa_allocate_exception(0x38uLL);
    sub_1000021BC(&v19, "illegal flow end");
    sub_1000413D8((uint64_t)v18, &v25, (uint64_t)&v19);
    *uint64_t v18 = off_1000792A0;
  }

  int v14 = v12;
  *((void *)this + 39) = v13;
  sub_10005AD5C((void *)this + 34, 1);
  if (v14 == 93) {
    int v15 = 10;
  }
  else {
    int v15 = 11;
  }
  LODWORD(v19) = 0;
  DWORD1(v19) = v15;
  *((void *)&v19 + 1) = v25;
  int v20 = v26;
  *(_OWORD *)std::string __p = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  int v24 = 0;
  sub_100055660((void *)this + 12, &v19);
  __int128 v27 = (void **)&v22 + 1;
  sub_1000027F4(&v27);
  if (SBYTE7(v22) < 0) {
    operator delete(__p[0]);
  }
}

void sub_100057FAC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void YAML::Scanner::ScanFlowEntry(YAML::Scanner *this)
{
  uint64_t v2 = *((void *)this + 39);
  if (!v2) {
    goto LABEL_9;
  }
  unint64_t v3 = v2 + *((void *)this + 38) - 1;
  uint64_t v4 = *((void *)this + 35);
  unint64_t v5 = v3 >> 10;
  uint64_t v6 = *(void *)(v4 + 8 * (v3 >> 10));
  unint64_t v7 = v3 & 0x3FF;
  if (!*(_DWORD *)(v6 + 4 * v7))
  {
    if ((YAML::Scanner::VerifySimpleKey(this) & 1) != 0)
    {
      uint64_t v8 = *((void *)this + 1);
      int v9 = *((_DWORD *)this + 4);
      *(void *)&__int128 v13 = 0xF00000000LL;
      *((void *)&v13 + 1) = v8;
      int v14 = v9;
      *(_OWORD *)std::string __p = 0u;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      int v18 = 0;
      sub_100055660((void *)this + 12, &v13);
      __int128 v19 = (void **)&v16 + 1;
      sub_1000027F4(&v19);
      if (SBYTE7(v16) < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_9;
    }

    uint64_t v4 = *((void *)this + 35);
    unint64_t v10 = *((void *)this + 39) + *((void *)this + 38) - 1LL;
    unint64_t v5 = v10 >> 10;
    unint64_t v7 = v10 & 0x3FF;
  }

  if (*(_DWORD *)(*(void *)(v4 + 8 * v5) + 4 * v7) == 1) {
    YAML::Scanner::InvalidateSimpleKey(this);
  }
LABEL_9:
  *((_WORD *)this + 73) = 1;
  uint64_t v11 = *((void *)this + 1);
  int v12 = *((_DWORD *)this + 4);
  YAML::Stream::eat(this, 1);
  *(void *)&__int128 v13 = 0xD00000000LL;
  *((void *)&v13 + 1) = v11;
  int v14 = v12;
  *(_OWORD *)std::string __p = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  int v18 = 0;
  sub_100055660((void *)this + 12, &v13);
  __int128 v19 = (void **)&v16 + 1;
  sub_1000027F4(&v19);
  if (SBYTE7(v16) < 0) {
    operator delete(__p[0]);
  }
}

void sub_100058164(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void YAML::Scanner::ScanBlockEntry(YAML::Scanner *this)
{
  if (*((void *)this + 39))
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
    int v5 = *((_DWORD *)this + 4);
    __int128 v13 = (void **)*((void *)this + 1);
    int v14 = v5;
    sub_1000021BC(&v8, "illegal block entry");
    sub_1000413D8((uint64_t)exception, &v13, (uint64_t)&v8);
    void *exception = off_1000792A0;
  }

  if (!*((_BYTE *)this + 146))
  {
    uint64_t v6 = __cxa_allocate_exception(0x38uLL);
    int v7 = *((_DWORD *)this + 4);
    __int128 v13 = (void **)*((void *)this + 1);
    int v14 = v7;
    sub_1000021BC(&v8, "illegal block entry");
    sub_1000413D8((uint64_t)v6, &v13, (uint64_t)&v8);
    void *v6 = off_1000792A0;
  }

  YAML::Scanner::PushIndentTo(this, *((_DWORD *)this + 4), 1);
  *((_WORD *)this + 73) = 1;
  uint64_t v2 = *((void *)this + 1);
  int v3 = *((_DWORD *)this + 4);
  YAML::Stream::eat(this, 1);
  *(void *)&__int128 v8 = 0x700000000LL;
  *((void *)&v8 + 1) = v2;
  int v9 = v3;
  *(_OWORD *)std::string __p = 0u;
  memset(v11, 0, sizeof(v11));
  int v12 = 0;
  sub_100055660((void *)this + 12, &v8);
  __int128 v13 = (void **)v11 + 1;
  sub_1000027F4(&v13);
  if (SBYTE7(v11[0]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_10005831C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }

  else if (!v15)
  {
    goto LABEL_6;
  }

  __cxa_free_exception(v14);
  goto LABEL_6;
}

void YAML::Scanner::ScanKey(YAML::Scanner *this)
{
  uint64_t v2 = *((void *)this + 39);
  if (!v2)
  {
    if (!*((_BYTE *)this + 146))
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
      uint64_t v6 = this;
      int v7 = exception;
      __int128 v8 = (void **)*((void *)v6 + 1);
      LODWORD(v6) = *((_DWORD *)v6 + 4);
      int v14 = v8;
      int v15 = (int)v6;
      sub_1000021BC(&v9, "illegal map key");
      sub_1000413D8((uint64_t)v7, &v14, (uint64_t)&v9);
      void *v7 = off_1000792A0;
    }

    YAML::Scanner::PushIndentTo(this, *((_DWORD *)this + 4), 0);
    uint64_t v2 = *((void *)this + 39);
  }

  *((_BYTE *)this + 146) = v2 == 0;
  uint64_t v3 = *((void *)this + 1);
  int v4 = *((_DWORD *)this + 4);
  YAML::Stream::eat(this, 1);
  *(void *)&__int128 v9 = 0xE00000000LL;
  *((void *)&v9 + 1) = v3;
  int v10 = v4;
  *(_OWORD *)std::string __p = 0u;
  memset(v12, 0, sizeof(v12));
  int v13 = 0;
  sub_100055660((void *)this + 12, &v9);
  int v14 = (void **)v12 + 1;
  sub_1000027F4(&v14);
  if (SBYTE7(v12[0]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1000584A8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }

  else if (!v15)
  {
    goto LABEL_6;
  }

  __cxa_free_exception(v14);
  goto LABEL_6;
}

void YAML::Scanner::ScanValue(YAML::Scanner *this)
{
  int v2 = YAML::Scanner::VerifySimpleKey(this);
  *((_BYTE *)this + 14memset(v42, 0, 7) = 0;
  if (v2)
  {
    *((_BYTE *)this + 146) = 0;
  }

  else
  {
    uint64_t v3 = *((void *)this + 39);
    if (!v3)
    {
      if (!*((_BYTE *)this + 146))
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
        int v7 = this;
        __int128 v8 = exception;
        __int128 v9 = (void **)*((void *)v7 + 1);
        LODWORD(vmemset(v42, 0, 7) = *((_DWORD *)v7 + 4);
        int v15 = v9;
        int v16 = (int)v7;
        sub_1000021BC(&v10, "illegal map value");
        sub_1000413D8((uint64_t)v8, &v15, (uint64_t)&v10);
        void *v8 = off_1000792A0;
      }

      YAML::Scanner::PushIndentTo(this, *((_DWORD *)this + 4), 0);
      uint64_t v3 = *((void *)this + 39);
    }

    *((_BYTE *)this + 146) = v3 == 0;
  }

  uint64_t v4 = *((void *)this + 1);
  int v5 = *((_DWORD *)this + 4);
  YAML::Stream::eat(this, 1);
  *(void *)&__int128 v10 = 0xF00000000LL;
  *((void *)&v10 + 1) = v4;
  int v11 = v5;
  *(_OWORD *)std::string __p = 0u;
  memset(v13, 0, sizeof(v13));
  int v14 = 0;
  sub_100055660((void *)this + 12, &v10);
  int v15 = (void **)v13 + 1;
  sub_1000027F4(&v15);
  if (SBYTE7(v13[0]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_100058640( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }

  else if (!v15)
  {
    goto LABEL_6;
  }

  __cxa_free_exception(v14);
  goto LABEL_6;
}

void YAML::Scanner::ScanAnchorOrAlias(YAML::Scanner *this)
{
  *((_WORD *)this + 73) = 0;
  uint64_t v2 = *((void *)this + 1);
  int v3 = *((_DWORD *)this + 4);
  int v4 = YAML::Stream::get(this);
  while (YAML::Stream::operator BOOL(this))
  {
    int v5 = sub_100058930();
    *(void *)&__int128 v16 = 0LL;
    *((void *)&v16 + 1) = this;
    std::string::value_type v6 = YAML::Stream::get(this);
    std::string::push_back(&__str, v6);
  }

  std::string::size_type size = __str.__r_.__value_.__s.__size_;
  if ((__str.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
    int v11 = *((_DWORD *)this + 4);
    std::string v21 = (void **)*((void *)this + 1);
    int v22 = v11;
    if (v4 == 42) {
      int v12 = "alias not found after *";
    }
    else {
      int v12 = "anchor not found after &";
    }
    sub_1000021BC(&v16, v12);
    sub_1000413D8((uint64_t)exception, &v21, (uint64_t)&v16);
    void *exception = off_1000792A0;
  }

  if (YAML::Stream::operator BOOL(this))
  {
    __int128 v8 = sub_100058A84();
    *(void *)&__int128 v16 = 0LL;
    *((void *)&v16 + 1) = this;
    if ((sub_100054630((uint64_t)v8, (unint64_t *)&v16) & 0x80000000) != 0)
    {
      int v13 = __cxa_allocate_exception(0x38uLL);
      int v14 = *((_DWORD *)this + 4);
      std::string v21 = (void **)*((void *)this + 1);
      int v22 = v14;
      if (v4 == 42) {
        int v15 = "illegal character found while scanning alias";
      }
      else {
        int v15 = "illegal character found while scanning anchor";
      }
      sub_1000021BC(&v16, v15);
      sub_1000413D8((uint64_t)v13, &v21, (uint64_t)&v16);
      *int v13 = off_1000792A0;
    }
  }

  if (v4 == 42) {
    int v9 = 17;
  }
  else {
    int v9 = 16;
  }
  LODWORD(v16) = 0;
  DWORD1(v16) = v9;
  *((void *)&v16 + 1) = v2;
  int v17 = v3;
  *(_OWORD *)std::string __p = 0u;
  memset(v19, 0, sizeof(v19));
  int v20 = 0;
  std::string::operator=((std::string *)__p, &__str);
  sub_10005A848((void *)this + 12, &v16);
  std::string v21 = (void **)v19 + 1;
  sub_1000027F4(&v21);
  if (SBYTE7(v19[0]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1000588C0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
    {
LABEL_6:
      _Unwind_Resume(a1);
    }
  }

  else if (!v15)
  {
    goto LABEL_6;
  }

  __cxa_free_exception(v16);
  goto LABEL_6;
}

void *sub_100058930()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_10007C468);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10007C468))
  {
    sub_1000021BC(__p, "[]{},");
    YAML::RegEx::RegEx((uint64_t)&v5, (char *)__p, 3);
    uint64_t v2 = (int *)sub_100054454();
    YAML::operator|(&v5, v2, (uint64_t)&v7);
    YAML::operator!(&v7, (uint64_t)&unk_10007C448);
    int v9 = (void **)&v8;
    sub_1000518E0(&v9);
    int v9 = (void **)&v6;
    sub_1000518E0(&v9);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
    __cxa_atexit((void (*)(void *))sub_100053674, &unk_10007C448, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10007C468);
  }

  return &unk_10007C448;
}

void sub_100058A20( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16)
{
  *(void *)(v17 - memset(v29, 0, 24) = v16 + 8;
  sub_1000518E0((void ***)(v17 - 24));
  *(void *)(v17 - memset(v29, 0, 24) = &a16;
  sub_1000518E0((void ***)(v17 - 24));
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_10007C468);
  _Unwind_Resume(a1);
}

void *sub_100058A84()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_10007C490);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10007C490))
  {
    YAML::RegEx::RegEx((uint64_t)&v5, (char *)__p, 3);
    uint64_t v2 = (int *)sub_100054454();
    YAML::operator|(&v5, v2, (uint64_t)&unk_10007C470);
    int v7 = (void **)&v6;
    sub_1000518E0(&v7);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
    __cxa_atexit((void (*)(void *))sub_100053674, &unk_10007C470, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10007C490);
  }

  return &unk_10007C470;
}

void sub_100058B54( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_10007C490);
  _Unwind_Resume(a1);
}

void YAML::Scanner::ScanTag(YAML::Scanner *this)
{
  *((_WORD *)this + 73) = 0;
  uint64_t v2 = *((void *)this + 1);
  int v3 = *((_DWORD *)this + 4);
  *(void *)&__int128 v14 = 0x1200000000LL;
  *((void *)&v14 + 1) = v2;
  int v15 = v3;
  *(_OWORD *)std::string __p = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  int v19 = 0;
  YAML::Stream::get(this);
  if (YAML::Stream::operator BOOL(this) && YAML::Stream::peek(this) == 60)
  {
    YAML::ScanVerbatimTag(this, &__str);
    std::string::operator=((std::string *)__p, &__str);
    int v19 = 0;
    goto LABEL_31;
  }

  YAML::ScanTagHandle(this, (YAML::Stream *)&v12, &__str);
  std::string::operator=((std::string *)__p, &__str);
  unint64_t v4 = BYTE7(v17);
  if (v12)
  {
    int v5 = __p[1];
  }

  else
  {
    int v5 = __p[1];
    if ((SBYTE7(v17) & 0x80u) == 0) {
      uint64_t v6 = (void *)BYTE7(v17);
    }
    else {
      uint64_t v6 = __p[1];
    }
    if (!v6)
    {
      int v10 = 4;
LABEL_30:
      int v19 = v10;
      goto LABEL_31;
    }
  }

  if (SBYTE7(v17) < 0) {
    unint64_t v4 = (unint64_t)v5;
  }
  if (v4) {
    int v7 = 1;
  }
  else {
    int v7 = 2;
  }
  int v19 = v7;
  if (v12 && YAML::Stream::peek(this) == 33)
  {
    YAML::Stream::get(this);
    YAML::ScanTagSuffix(this, &__str);
    uint64_t v8 = (_OWORD *)v18;
    if ((unint64_t)v18 >= *((void *)&v18 + 1))
    {
      uint64_t v11 = sub_100002C30((uint64_t *)&v17 + 1, (__int128 *)&__str);
    }

    else
    {
      if ((char)__str.__r_.__value_.__s.__size_ < 0)
      {
        sub_10000231C((_BYTE *)v18, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      }

      else
      {
        __int128 v9 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
        *(void *)(v18 + 16) = __str.__r_.__value_.__l.__cap_;
        _OWORD *v8 = v9;
      }

      uint64_t v11 = (uint64_t)v8 + 24;
    }

    *(void *)&__int128 v18 = v11;
    int v10 = 3;
    goto LABEL_30;
  }

LABEL_31:
  sub_10005A848((void *)this + 12, &v14);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17 + 8;
  sub_1000027F4((void ***)&__str);
  if (SBYTE7(v17) < 0) {
    operator delete(__p[0]);
  }
}

void sub_100058D90( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_100053D1C((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void YAML::Scanner::ScanPlainScalar(YAML::Scanner *this)
{
  char v14 = 0;
  __int16 v13 = 0;
  char v19 = 0;
  if (*((void *)this + 39)) {
    uint64_t v2 = sub_100058F60();
  }
  else {
    uint64_t v2 = sub_10005908C();
  }
  int v3 = 0;
  int v10 = v2;
  char v11 = 0;
  if (!*((void *)this + 39)) {
    int v3 = YAML::Scanner::GetTopIndent(this) + 1;
  }
  int v12 = v3;
  int v15 = 2;
  HIBYTE(v13) = 1;
  char v16 = 1;
  uint64_t v17 = 0x1FFFFFFFFLL;
  int v18 = 2;
  YAML::Scanner::InsertPotentialSimpleKey(this);
  std::string::size_type v4 = *((void *)this + 1);
  int v5 = *((_DWORD *)this + 4);
  YAML::ScanScalar((std::string::size_type)this, (uint64_t)&v10, &v6);
  std::string __str = v6;
  *((_BYTE *)this + 146) = v19;
  *((_BYTE *)this + 14memset(v42, 0, 7) = 0;
  v6.__r_.__value_.__r.__words[0] = 0x1300000000LL;
  v6.__r_.__value_.__l.__size_ = v4;
  LODWORD(v6.__r_.__value_.__r.__words[2]) = v5;
  *(_OWORD *)std::string __p = 0u;
  memset(v8, 0, sizeof(v8));
  int v9 = 0;
  std::string::operator=((std::string *)__p, &__str);
  sub_10005A848((void *)this + 12, (__int128 *)&v6);
  std::string v21 = (void **)v8 + 1;
  sub_1000027F4(&v21);
  if (SBYTE7(v8[0]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_100058F30(_Unwind_Exception *exception_object)
{
}

void *sub_100058F60()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_10007C4B8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10007C4B8))
  {
    uint64_t v2 = (int *)sub_100059C84();
    int v3 = (int *)sub_100054454();
    sub_100057A1C((uint64_t)&v4);
    YAML::operator+(v3, &v4, (uint64_t)&v6);
    YAML::operator|(v2, &v6, (uint64_t)&unk_10007C498);
    uint64_t v8 = (void **)&v7;
    sub_1000518E0(&v8);
    uint64_t v8 = (void **)&v5;
    sub_1000518E0(&v8);
    __cxa_atexit((void (*)(void *))sub_100053674, &unk_10007C498, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10007C4B8);
  }

  return &unk_10007C498;
}

void sub_100059038( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(void *)(v12 - memset(v29, 0, 24) = v11 + 8;
  sub_1000518E0((void ***)(v12 - 24));
  *(void *)(v12 - memset(v29, 0, 24) = &a11;
  sub_1000518E0((void ***)(v12 - 24));
  __cxa_guard_abort(&qword_10007C4B8);
  _Unwind_Resume(a1);
}

void *sub_10005908C()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_10007C508);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10007C508))
  {
    uint64_t v2 = (int *)sub_100059F58();
    int v3 = (int *)sub_100054454();
    sub_100057A1C((uint64_t)&v4);
    YAML::operator+(v3, &v4, (uint64_t)&v6);
    YAML::operator|(v2, &v6, (uint64_t)&unk_10007C4E8);
    uint64_t v8 = (void **)&v7;
    sub_1000518E0(&v8);
    uint64_t v8 = (void **)&v5;
    sub_1000518E0(&v8);
    __cxa_atexit((void (*)(void *))sub_100053674, &unk_10007C4E8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10007C508);
  }

  return &unk_10007C4E8;
}

void sub_100059164( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(void *)(v12 - memset(v29, 0, 24) = v11 + 8;
  sub_1000518E0((void ***)(v12 - 24));
  *(void *)(v12 - memset(v29, 0, 24) = &a11;
  sub_1000518E0((void ***)(v12 - 24));
  __cxa_guard_abort(&qword_10007C508);
  _Unwind_Resume(a1);
}

void YAML::Scanner::ScanQuotedScalar(std::string::size_type *this)
{
  int v2 = YAML::Stream::peek((YAML::Stream *)this);
  int v15 = 0LL;
  char v16 = 0;
  char v19 = 0;
  int v18 = 0;
  memset(v17, 0, 7);
  v20[0] = 0LL;
  *(void *)((char *)v20 + 5) = 0LL;
  if (v2 == 39)
  {
    YAML::RegEx::RegEx((uint64_t)&v7, 39);
    int v3 = (int *)sub_100059410();
    YAML::operator!(v3, (uint64_t)&p_size);
    YAML::operator&((int *)&v7, (int *)&p_size, (uint64_t)v13);
    int v22 = (void **)&v12;
    sub_1000518E0(&v22);
    p_std::string::size_type size = &v7.__r_.__value_.__l.__size_;
    sub_1000518E0((void ***)&p_size);
    char v4 = 39;
  }

  else
  {
    YAML::RegEx::RegEx((uint64_t)v13, v2);
    char v4 = 92;
  }

  int v15 = v13;
  char v16 = 1;
  BYTE2(v17[1]) = v4;
  v17[0] = 0;
  int v18 = 2;
  BYTE1(v17[1]) = 1;
  char v19 = 0;
  v20[0] = 0x200000000LL;
  YAML::Scanner::InsertPotentialSimpleKey((YAML::Scanner *)this);
  std::string::size_type v5 = this[1];
  int v6 = *((_DWORD *)this + 4);
  YAML::Stream::get((YAML::Stream *)this);
  YAML::ScanScalar((std::string::size_type)this, (uint64_t)&v15, &v7);
  std::string __str = v7;
  *((_WORD *)this + 73) = 256;
  v7.__r_.__value_.__r.__words[0] = 0x1400000000LL;
  v7.__r_.__value_.__l.__size_ = v5;
  LODWORD(v7.__r_.__value_.__r.__words[2]) = v6;
  *(_OWORD *)std::string __p = 0u;
  memset(v9, 0, sizeof(v9));
  int v10 = 0;
  std::string::operator=((std::string *)__p, &__str);
  sub_10005A848(this + 12, (__int128 *)&v7);
  p_std::string::size_type size = (std::string::size_type *)v9 + 1;
  sub_1000027F4((void ***)&p_size);
  if (SBYTE7(v9[0]) < 0) {
    operator delete(__p[0]);
  }
  v7.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  sub_1000518E0((void ***)&v7);
}

void sub_100059388( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23)
{
}

void *sub_100059410()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_10007C558);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10007C558))
  {
    sub_1000021BC(__p, "''");
    YAML::RegEx::RegEx((uint64_t)&unk_10007C538, (char *)__p, 6);
    if (v3 < 0) {
      operator delete(__p[0]);
    }
    __cxa_atexit((void (*)(void *))sub_100053674, &unk_10007C538, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10007C558);
  }

  return &unk_10007C538;
}

void sub_1000594B8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_10007C558);
  _Unwind_Resume(a1);
}

void YAML::Scanner::ScanBlockScalar(YAML::Scanner *this)
{
  uint64_t v27 = 0LL;
  char v28 = 0;
  char v33 = 0;
  char v31 = 0;
  uint64_t v35 = 0LL;
  char v36 = 0;
  int v29 = 1;
  __int16 v30 = 1;
  std::string::size_type v2 = *((void *)this + 1);
  int v3 = *((_DWORD *)this + 4);
  BOOL v32 = YAML::Stream::get(this) == 62;
  int v34 = 0;
  char v4 = sub_100059AC4();
  __p.__r_.__value_.__r.__words[0] = 0LL;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)this;
  int v5 = sub_100054630((uint64_t)v4, (unint64_t *)&__p);
  if (v5 >= 1)
  {
    while (1)
    {
      int v6 = YAML::Stream::get(this);
      int v7 = v6;
      if (v6 == 45)
      {
        int v34 = -1;
      }

      else if (v6 == 43)
      {
        int v34 = 1;
      }

      else
      {
        unsigned __int8 v8 = atomic_load((unsigned __int8 *)&qword_10007C3A0);
        if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_10007C3A0))
        {
          YAML::RegEx::RegEx((uint64_t)&unk_10007C380, 48, 57);
          __cxa_atexit((void (*)(void *))sub_100053674, &unk_10007C380, (void *)&_mh_execute_header);
          __cxa_guard_release(&qword_10007C3A0);
        }

        memset(&__p, 0, sizeof(__p));
        std::string::push_back(&__p, v7);
        int v9 = sub_10005A18C((uint64_t)&unk_10007C380, (char *)&__p);
        int v10 = v9;
        if ((char)__p.__r_.__value_.__s.__size_ < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if ((v10 & 0x80000000) == 0)
          {
LABEL_11:
            if (v7 == 48)
            {
              exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
              int v20 = *((_DWORD *)this + 4);
              p_std::string::size_type size = (std::string::size_type *)*((void *)this + 1);
              LODWORD(v39) = v20;
              sub_1000021BC(&__p, "cannot set zero indentation for a block scalar");
              sub_1000413D8((uint64_t)exception, &p_size, (uint64_t)&__p);
              void *exception = off_1000792A0;
            }

            int v29 = v7 - 48;
            LOBYTE(v30) = 0;
          }
        }

        else if ((v9 & 0x80000000) == 0)
        {
          goto LABEL_11;
        }
      }

      if (!--v5) {
        goto LABEL_20;
      }
    }
  }

  while (1)
  {
LABEL_20:
    unsigned __int8 v13 = atomic_load((unsigned __int8 *)&qword_10007C0A8);
    if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_10007C0A8))
    {
      uint64_t v11 = (int *)sub_10005459C();
      uint64_t v12 = (int *)sub_1000535E0();
      YAML::operator|(v11, v12, (uint64_t)&unk_10007C088);
      __cxa_atexit((void (*)(void *))sub_100053674, &unk_10007C088, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10007C0A8);
    }

    __p.__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)this;
    YAML::Stream::eat(this, 1);
  }

  unsigned __int8 v14 = atomic_load((unsigned __int8 *)&qword_10007C210);
  if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_10007C210))
  {
    YAML::RegEx::RegEx((uint64_t)&dword_10007C1F0, 35);
    __cxa_atexit((void (*)(void *))sub_100053674, &dword_10007C1F0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10007C210);
  }

  LODWORD(__p.__r_.__value_.__l.__data_) = dword_10007C1F0;
  WORD2(__p.__r_.__value_.__r.__words[0]) = word_10007C1F4;
  v24[0] = 0LL;
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
  sub_100051C4C( &__p.__r_.__value_.__l.__size_,  (int *)qword_10007C1F8,  unk_10007C200,  (unk_10007C200 - qword_10007C1F8) >> 5);
  p_std::string::size_type size = 0LL;
  BOOL v39 = this;
  int v15 = sub_100054630((uint64_t)&__p, (unint64_t *)&p_size);
  p_std::string::size_type size = &__p.__r_.__value_.__l.__size_;
  sub_1000518E0((void ***)&p_size);
  if ((v15 & 0x80000000) == 0)
  {
    while (YAML::Stream::operator BOOL(this))
    {
      char v16 = sub_1000536AC();
      __p.__r_.__value_.__r.__words[0] = 0LL;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)this;
      YAML::Stream::eat(this, 1);
    }
  }

  if (YAML::Stream::operator BOOL(this))
  {
    uint64_t v17 = sub_1000536AC();
    __p.__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)this;
    if ((sub_100054630((uint64_t)v17, (unint64_t *)&__p) & 0x80000000) != 0)
    {
      std::string v21 = __cxa_allocate_exception(0x38uLL);
      int v22 = *((_DWORD *)this + 4);
      p_std::string::size_type size = (std::string::size_type *)*((void *)this + 1);
      LODWORD(v39) = v22;
      sub_1000021BC(&__p, "unexpected character in block scalar");
      sub_1000413D8((uint64_t)v21, &p_size, (uint64_t)&__p);
      *std::string v21 = off_1000792A0;
    }
  }

  if ((YAML::Scanner::GetTopIndent(this) & 0x80000000) == 0)
  {
    int TopIndent = YAML::Scanner::GetTopIndent(this);
    v29 += TopIndent;
  }

  HIBYTE(v30) = 0;
  char v33 = 0;
  HIDWORD(v35) = 2;
  YAML::ScanScalar((std::string::size_type)this, (uint64_t)&v27, &__p);
  std::string __str = __p;
  *((_WORD *)this + 73) = 1;
  __p.__r_.__value_.__r.__words[0] = 0x1400000000LL;
  __p.__r_.__value_.__l.__size_ = v2;
  LODWORD(__p.__r_.__value_.__r.__words[2]) = v3;
  *(_OWORD *)int v24 = 0u;
  memset(v25, 0, sizeof(v25));
  int v26 = 0;
  std::string::operator=((std::string *)v24, &__str);
  sub_10005A848((void *)this + 12, (__int128 *)&__p);
  p_std::string::size_type size = (std::string::size_type *)v25 + 1;
  sub_1000027F4((void ***)&p_size);
  if (SBYTE7(v25[0]) < 0) {
    operator delete(v24[0]);
  }
}

void sub_1000599E4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, void *__p, uint64_t a29, int a30, __int16 a31, char a32, char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_100059AC4()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_10007C580);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10007C580))
  {
    std::string::size_type v2 = (int *)sub_10005A0B4();
    int v3 = (int *)sub_100057340();
    YAML::operator+(v2, v3, (uint64_t)&v10);
    char v4 = (int *)sub_100057340();
    int v5 = (int *)sub_10005A0B4();
    YAML::operator+(v4, v5, (uint64_t)&v8);
    YAML::operator|(&v10, (int *)&v8, (uint64_t)&v12);
    int v6 = (int *)sub_10005A0B4();
    YAML::operator|(&v12, v6, (uint64_t)&v14);
    int v7 = (int *)sub_100057340();
    YAML::operator|(&v14, v7, (uint64_t)&unk_10007C560);
    char v16 = (void **)&v15;
    sub_1000518E0(&v16);
    char v16 = (void **)&v13;
    sub_1000518E0(&v16);
    char v16 = (void **)&v9;
    sub_1000518E0(&v16);
    unsigned __int8 v8 = (void **)&v11;
    sub_1000518E0(&v8);
    __cxa_atexit((void (*)(void *))sub_100053674, &unk_10007C560, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10007C580);
  }

  return &unk_10007C560;
}

void sub_100059BFC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  *(void *)(v15 - memset(v29, 0, 24) = &a11;
  sub_1000518E0((void ***)(v15 - 24));
  a10 = (void **)&a15;
  sub_1000518E0(&a10);
  __cxa_guard_abort(&qword_10007C580);
  _Unwind_Resume(a1);
}

void *sub_100059C84()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_10007C4E0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10007C4E0))
  {
    YAML::RegEx::RegEx((uint64_t)&v17, 58);
    std::string::size_type v2 = (int *)sub_100054454();
    YAML::RegEx::RegEx((uint64_t)&v11);
    YAML::operator|(v2, &v11, (uint64_t)&v13);
    sub_1000021BC(v7, ",]}");
    YAML::RegEx::RegEx((uint64_t)&v9, (char *)v7, 3);
    YAML::operator|(&v13, (int *)&v9, (uint64_t)&v15);
    YAML::operator+(&v17, (int *)&v15, (uint64_t)&v19);
    sub_1000021BC(__p, ",?[]{}");
    YAML::RegEx::RegEx((uint64_t)&v5, (char *)__p, 3);
    YAML::operator|(&v19, (int *)&v5, (uint64_t)&unk_10007C4C0);
    std::string v21 = (void **)&v6;
    sub_1000518E0(&v21);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
    int v5 = (void **)&v20;
    sub_1000518E0(&v5);
    int v5 = (void **)&v16;
    sub_1000518E0(&v5);
    int v5 = (void **)&v10;
    sub_1000518E0(&v5);
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    uint64_t v9 = (void **)&v14;
    sub_1000518E0(&v9);
    uint64_t v9 = (void **)&v12;
    sub_1000518E0(&v9);
    uint64_t v15 = (void **)&v18;
    sub_1000518E0(&v15);
    __cxa_atexit((void (*)(void *))sub_100053674, &unk_10007C4C0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10007C4E0);
  }

  return &unk_10007C4C0;
}

void sub_100059E4C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25, uint64_t *a26, uint64_t a27, uint64_t a28, uint64_t a29, char a30, uint64_t a31, uint64_t a32, uint64_t a33, char a34, uint64_t a35)
{
  *(void *)(v36 - 40) = v35 + 8;
  sub_1000518E0((void ***)(v36 - 40));
  if (a15 < 0) {
    operator delete(__p);
  }
  a16 = (uint64_t *)(v36 - 64);
  sub_1000518E0((void ***)&a16);
  a16 = (uint64_t *)(v36 - 128);
  sub_1000518E0((void ***)&a16);
  a16 = &a27;
  sub_1000518E0((void ***)&a16);
  if (a25 < 0) {
    operator delete(a20);
  }
  a26 = &a35;
  sub_1000518E0((void ***)&a26);
  a26 = &a31;
  sub_1000518E0((void ***)&a26);
  *(void *)(v36 - 136) = v36 - 96;
  sub_1000518E0((void ***)(v36 - 136));
  __cxa_guard_abort(&qword_10007C4E0);
  _Unwind_Resume(a1);
}

void sub_100059F50()
{
}

void *sub_100059F58()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_10007C530);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10007C530))
  {
    YAML::RegEx::RegEx((uint64_t)&v7, 58);
    std::string::size_type v2 = (int *)sub_100054454();
    YAML::RegEx::RegEx((uint64_t)&v3);
    YAML::operator|(v2, &v3, (uint64_t)&v5);
    YAML::operator+(&v7, (int *)&v5, (uint64_t)&unk_10007C510);
    uint64_t v9 = (void **)&v6;
    sub_1000518E0(&v9);
    uint64_t v9 = (void **)&v4;
    sub_1000518E0(&v9);
    int v5 = (void **)&v8;
    sub_1000518E0(&v5);
    __cxa_atexit((void (*)(void *))sub_100053674, &unk_10007C510, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10007C530);
  }

  return &unk_10007C510;
}

void sub_10005A048( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  *(void *)(v15 - memset(v29, 0, 24) = v14 + 8;
  sub_1000518E0((void ***)(v15 - 24));
  *(void *)(v15 - memset(v29, 0, 24) = &a11;
  sub_1000518E0((void ***)(v15 - 24));
  a14 = (void **)(v15 - 48);
  sub_1000518E0(&a14);
  __cxa_guard_abort(&qword_10007C530);
  _Unwind_Resume(a1);
}

void *sub_10005A0B4()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_10007C5A8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10007C5A8))
  {
    sub_1000021BC(__p, "+-");
    YAML::RegEx::RegEx((uint64_t)&unk_10007C588, (char *)__p, 3);
    if (v3 < 0) {
      operator delete(__p[0]);
    }
    __cxa_atexit((void (*)(void *))sub_100053674, &unk_10007C588, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10007C5A8);
  }

  return &unk_10007C588;
}

void sub_10005A15C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_10007C5A8);
  _Unwind_Resume(a1);
}

uint64_t sub_10005A18C(uint64_t a1, char *a2)
{
  uint64_t v2 = a2[23];
  if ((v2 & 0x80u) == 0LL) {
    char v3 = a2;
  }
  else {
    char v3 = *(char **)a2;
  }
  if ((v2 & 0x80u) != 0LL) {
    uint64_t v2 = *((void *)a2 + 1);
  }
  *(void *)&__int128 v18 = v3;
  *((void *)&v18 + 1) = v2;
  uint64_t v19 = 0LL;
  if ((*(_DWORD *)a1 - 3) < 0xFFFFFFFE || v2 != 0)
  {
    switch(*(_DWORD *)a1)
    {
      case 0:
        if (v2) {
          return 0xFFFFFFFFLL;
        }
        else {
          return 0LL;
        }
      case 1:
        if (*v3 == *(_BYTE *)(a1 + 4)) {
          return 1LL;
        }
        else {
          return 0xFFFFFFFFLL;
        }
      case 2:
        int v11 = *v3;
        uint64_t v6 = 0xFFFFFFFFLL;
        if (*(char *)(a1 + 4) <= v11)
        {
          else {
            return 1LL;
          }
        }

        return v6;
      case 3:
        uint64_t v12 = *(void *)(a1 + 8);
        if (*(void *)(a1 + 16) == v12) {
          return 0xFFFFFFFFLL;
        }
        uint64_t v13 = 0LL;
        unint64_t v14 = 0LL;
        while (1)
        {
          uint64_t v15 = sub_10005A3CC(v12 + v13, &v18);
          if ((v15 & 0x80000000) == 0) {
            break;
          }
          ++v14;
          uint64_t v12 = *(void *)(a1 + 8);
          v13 += 32LL;
          uint64_t v6 = 0xFFFFFFFFLL;
          if (v14 >= (*(void *)(a1 + 16) - v12) >> 5) {
            return v6;
          }
        }

        return v15;
      case 4:
        uint64_t v7 = *(void *)(a1 + 8);
        if (*(void *)(a1 + 16) == v7) {
          return 0xFFFFFFFFLL;
        }
        uint64_t v8 = 0LL;
        unint64_t v9 = 0LL;
        LODWORD(v6) = -1;
        break;
      case 5:
        uint64_t v17 = *(void *)(a1 + 8);
        uint64_t v6 = 0xFFFFFFFFLL;
        if (v17 != *(void *)(a1 + 16))
        {
          else {
            return 1LL;
          }
        }

        return v6;
      case 6:
        return sub_10005A6E8(a1, &v18);
      default:
        return 0xFFFFFFFFLL;
    }

    while (1)
    {
      unsigned int v10 = sub_10005A3CC(v7 + v8, &v18);
      if (v10 == -1) {
        break;
      }
      if (v9) {
        uint64_t v6 = v6;
      }
      else {
        uint64_t v6 = v10;
      }
      ++v9;
      uint64_t v7 = *(void *)(a1 + 8);
      v8 += 32LL;
      if (v9 >= (*(void *)(a1 + 16) - v7) >> 5) {
        return v6;
      }
    }
  }

  return 0xFFFFFFFFLL;
}

uint64_t sub_10005A328(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  unint64_t v2 = *(void *)(a2 + 16);
  if ((*(_DWORD *)a1 - 3) >= 0xFFFFFFFE && v2 >= v3)
  {
    return 0xFFFFFFFFLL;
  }

  else
  {
    switch(*(_DWORD *)a1)
    {
      case 0:
        if (v2 >= v3) {
          return 0LL;
        }
        else {
          return 0xFFFFFFFFLL;
        }
      case 1:
        else {
          return 0xFFFFFFFFLL;
        }
      case 2:
        int v7 = *(char *)(*(void *)a2 + v2);
        uint64_t v5 = 0xFFFFFFFFLL;
        if (*(char *)(a1 + 4) <= v7)
        {
          else {
            return 1LL;
          }
        }

        return v5;
      case 3:
        uint64_t result = sub_10005A5B8(a1, a2);
        break;
      case 4:
        uint64_t result = sub_10005A620(a1, a2);
        break;
      case 5:
        uint64_t result = sub_10005A6A8(a1, a2);
        break;
      case 6:
        uint64_t result = sub_10005A6E8(a1, (__int128 *)a2);
        break;
      default:
        return 0xFFFFFFFFLL;
    }
  }

  return result;
}

uint64_t sub_10005A3CC(uint64_t a1, void *a2)
{
  switch(*(_DWORD *)a1)
  {
    case 0:
      if (a2[2] >= a2[1]) {
        uint64_t v4 = 0LL;
      }
      else {
        uint64_t v4 = 0xFFFFFFFFLL;
      }
      break;
    case 1:
      else {
        uint64_t v4 = 0xFFFFFFFFLL;
      }
      break;
    case 2:
      int v5 = *(char *)(*a2 + a2[2]);
      uint64_t v4 = 0xFFFFFFFFLL;
      if (*(char *)(a1 + 4) <= v5)
      {
        else {
          uint64_t v4 = 1LL;
        }
      }

      break;
    case 3:
      uint64_t v6 = *(void *)(a1 + 8);
      if (*(void *)(a1 + 16) == v6) {
        goto LABEL_37;
      }
      uint64_t v7 = 0LL;
      unint64_t v8 = 0LL;
      while (1)
      {
        uint64_t v9 = sub_10005A3CC(v6 + v7, a2);
        if ((v9 & 0x80000000) == 0) {
          break;
        }
        ++v8;
        uint64_t v6 = *(void *)(a1 + 8);
        v7 += 32LL;
        if (v8 >= (*(void *)(a1 + 16) - v6) >> 5) {
          goto LABEL_37;
        }
      }

      uint64_t v4 = v9;
      break;
    case 4:
      uint64_t v10 = *(void *)(a1 + 8);
      if (*(void *)(a1 + 16) == v10) {
        goto LABEL_37;
      }
      uint64_t v11 = 0LL;
      unint64_t v12 = 0LL;
      LODWORD(v4) = -1;
      do
      {
        unsigned int v13 = sub_10005A3CC(v10 + v11, a2);
        if (v13 == -1) {
          goto LABEL_37;
        }
        if (v12) {
          uint64_t v4 = v4;
        }
        else {
          uint64_t v4 = v13;
        }
        ++v12;
        uint64_t v10 = *(void *)(a1 + 8);
        v11 += 32LL;
      }

      while (v12 < (*(void *)(a1 + 16) - v10) >> 5);
      break;
    case 5:
      uint64_t v14 = *(void *)(a1 + 8);
      uint64_t v4 = 0xFFFFFFFFLL;
      if (v14 != *(void *)(a1 + 16))
      {
        else {
          uint64_t v4 = 1LL;
        }
      }

      break;
    case 6:
      uint64_t v15 = *(void *)(a1 + 8);
      if (*(void *)(a1 + 16) == v15)
      {
        uint64_t v4 = 0LL;
      }

      else
      {
        uint64_t v16 = 0LL;
        unint64_t v17 = 0LL;
        LODWORD(v4) = 0;
        do
        {
          uint64_t v18 = v15 + v16;
          __int128 v24 = *(_OWORD *)a2;
          uint64_t v19 = a2[2];
          char v20 = ((int)v4 + (int)v19 < 0) ^ __OFADD__((_DWORD)v4, (_DWORD)v19);
          uint64_t v21 = v19 + (int)v4;
          if (v20) {
            uint64_t v21 = 0LL;
          }
          uint64_t v25 = v21;
          int v22 = sub_10005A328(v18, (uint64_t)&v24);
          if (v22 == -1) {
            goto LABEL_37;
          }
          uint64_t v4 = (v22 + v4);
          ++v17;
          uint64_t v15 = *(void *)(a1 + 8);
          v16 += 32LL;
        }

        while (v17 < (*(void *)(a1 + 16) - v15) >> 5);
      }

      break;
    default:
LABEL_37:
      uint64_t v4 = 0xFFFFFFFFLL;
      break;
  }

  return v4;
}

uint64_t sub_10005A5B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(void *)(a1 + 16) == v2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v5 = 0LL;
  unint64_t v6 = 0LL;
  while (1)
  {
    uint64_t result = sub_10005A3CC(v2 + v5, a2);
    if ((result & 0x80000000) == 0) {
      break;
    }
    ++v6;
    uint64_t v2 = *(void *)(a1 + 8);
    v5 += 32LL;
    if (v6 >= (*(void *)(a1 + 16) - v2) >> 5) {
      return 0xFFFFFFFFLL;
    }
  }

  return result;
}

uint64_t sub_10005A620(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(void *)(a1 + 16) != v2)
  {
    uint64_t v5 = 0LL;
    unint64_t v6 = 0LL;
    LODWORD(vmemset(v42, 0, 7) = -1;
    while (1)
    {
      unsigned int v8 = sub_10005A3CC(v2 + v5, a2);
      if (v8 == -1) {
        break;
      }
      if (v6) {
        uint64_t v7 = v7;
      }
      else {
        uint64_t v7 = v8;
      }
      ++v6;
      uint64_t v2 = *(void *)(a1 + 8);
      v5 += 32LL;
      if (v6 >= (*(void *)(a1 + 16) - v2) >> 5) {
        return v7;
      }
    }
  }

  return 0xFFFFFFFFLL;
}

uint64_t sub_10005A6A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = 0xFFFFFFFFLL;
  if (v3 != *(void *)(a1 + 16))
  {
    else {
      return 1LL;
    }
  }

  return v4;
}

uint64_t sub_10005A6E8(uint64_t a1, __int128 *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    uint64_t v6 = 0LL;
    unint64_t v7 = 0LL;
    LODWORD(vstd::istream::~istream(v1, v2 + 8) = 0;
    while (2)
    {
      uint64_t v9 = (_DWORD *)(v3 + v6);
      unint64_t v15 = *((void *)a2 + 2);
      __int128 v14 = *a2;
      unint64_t v10 = v15 + (int)v8;
      unint64_t v15 = v10;
      switch(*v9)
      {
        case 0:
          if (v10 >= *((void *)&v14 + 1)) {
            int v11 = 0;
          }
          else {
            int v11 = -1;
          }
          goto LABEL_19;
        case 1:
          goto LABEL_14;
        case 2:
          int v12 = *(char *)(v14 + v10);
LABEL_14:
          int v11 = 1;
          goto LABEL_21;
        case 3:
          int v11 = sub_10005A5B8((uint64_t)v9, (uint64_t)&v14);
          goto LABEL_19;
        case 4:
          int v11 = sub_10005A620((uint64_t)v9, (uint64_t)&v14);
          goto LABEL_19;
        case 5:
          int v11 = sub_10005A6A8((uint64_t)v9, (uint64_t)&v14);
          goto LABEL_19;
        case 6:
          int v11 = sub_10005A6E8();
LABEL_19:
          if (v11 == -1) {
            return 0xFFFFFFFFLL;
          }
          uint64_t v3 = *(void *)(a1 + 8);
          uint64_t v2 = *(void *)(a1 + 16);
LABEL_21:
          uint64_t v8 = (v11 + v8);
          ++v7;
          v6 += 32LL;
          if (v7 >= (v2 - v3) >> 5) {
            return v8;
          }
          continue;
        default:
          return 0xFFFFFFFFLL;
      }
    }
  }

  return 0LL;
}

char *sub_10005A848(void *a1, __int128 *a2)
{
  uint64_t v4 = a1 + 5;
  uint64_t v5 = a1[1];
  uint64_t v6 = a1[2];
  uint64_t v7 = 51 * ((v6 - v5) >> 3) - 1;
  if (v6 == v5) {
    uint64_t v7 = 0LL;
  }
  if (v7 == a1[5] + a1[4])
  {
    sub_100055754(a1);
    uint64_t v5 = a1[1];
    uint64_t v6 = a1[2];
  }

  if (v6 == v5)
  {
    uint64_t v9 = 0LL;
  }

  else
  {
    unint64_t v8 = a1[5] + a1[4];
    uint64_t v9 = *(void *)(v5 + 8 * (v8 / 0x33)) + 80 * (v8 % 0x33);
  }

  uint64_t result = sub_10005A910((uint64_t)v4, v9, a2);
  ++*v4;
  return result;
}

char *sub_10005A910(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v5 = *a3;
  *(_DWORD *)(a2 + 16) = *((_DWORD *)a3 + 4);
  *(_OWORD *)a2 = v5;
  uint64_t v6 = (_BYTE *)(a2 + 24);
  if (*((char *)a3 + 47) < 0)
  {
    sub_10000231C(v6, *((void **)a3 + 3), *((void *)a3 + 4));
  }

  else
  {
    __int128 v7 = *(__int128 *)((char *)a3 + 24);
    *(void *)(a2 + 40) = *((void *)a3 + 5);
    *(_OWORD *)uint64_t v6 = v7;
  }

  *(void *)(a2 + 4std::istream::~istream(v1, v2 + 8) = 0LL;
  *(void *)(a2 + 56) = 0LL;
  *(void *)(a2 + 64) = 0LL;
  uint64_t result = sub_100002594( (char *)(a2 + 48),  *((__int128 **)a3 + 6),  *((__int128 **)a3 + 7),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a3 + 7) - *((void *)a3 + 6)) >> 3));
  *(_DWORD *)(a2 + sub_10003D0C8(v18 - 72) = *((_DWORD *)a3 + 18);
  return result;
}

void sub_10005A9A8(_Unwind_Exception *exception_object)
{
}

void sub_10005A9C4(void *a1, _DWORD *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 7) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_10005AA48(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }

  *(_DWORD *)(*(void *)(v5 + ((v8 >> 7) & 0x1FFFFFFFFFFFFF8LL)) + 4 * (v8 & 0x3FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_10005AA48(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x400;
  unint64_t v4 = v2 - 1024;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      int v34 = (char *)sub_10004FA94(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      int v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        BOOL v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)BOOL v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_10005AD10( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10005AD5C(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0LL;
  }
  else {
    uint64_t v4 = ((v2 - v3) << 7) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x400) {
    a2 = 1;
  }
  if (v5 < 0x800) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8LL;
  }

  return v7 ^ 1u;
}

BOOL YAML::Scanner::CanInsertPotentialSimpleKey(YAML::Scanner *this)
{
  if (!*((_BYTE *)this + 146)) {
    return 0LL;
  }
  uint64_t v1 = *((void *)this + 24);
  return !v1
      || *(void *)(*(void *)(*((void *)this + 20) + 8 * ((v1 + *((void *)this + 23) - 1) / 0x55uLL))
                   + 48 * ((v1 + *((void *)this + 23) - 1) % 0x55uLL)
                   + 16) != *((void *)this + 39);
}

double YAML::Scanner::InsertPotentialSimpleKey(YAML::Scanner *this)
{
  if (YAML::Scanner::CanInsertPotentialSimpleKey(this))
  {
    int v3 = *((_DWORD *)this + 4);
    uint64_t v4 = *((void *)this + 39);
    uint64_t v14 = *((void *)this + 1);
    int v15 = v3;
    uint64_t v16 = v4;
    uint64_t v17 = 0LL;
    uint64_t v18 = 0LL;
    uint64_t v19 = 0LL;
    if (!v4)
    {
      uint64_t v5 = YAML::Scanner::PushIndentTo(this, v3, 0);
      uint64_t v17 = v5;
      if (v5)
      {
        *(_DWORD *)(v5 + std::istream::~istream(v1, v2 + 8) = 2;
        uint64_t v18 = *(_DWORD **)(v5 + 16);
        *uint64_t v18 = 2;
      }
    }

    uint64_t v6 = *((void *)this + 1);
    int v7 = *((_DWORD *)this + 4);
    *(void *)&__int128 v9 = 0xE00000000LL;
    *((void *)&v9 + 1) = v6;
    int v10 = v7;
    *(_OWORD *)std::string __p = 0u;
    memset(v12, 0, sizeof(v12));
    int v13 = 0;
    sub_100055660((void *)this + 12, &v9);
    int64_t v20 = (void **)v12 + 1;
    sub_1000027F4(&v20);
    if (SBYTE7(v12[0]) < 0) {
      operator delete(__p[0]);
    }
    unint64_t v8 = *((void *)this + 17) + *((void *)this + 16) - 1LL;
    uint64_t v19 = (_DWORD *)(*(void *)(*((void *)this + 13) + 8 * (v8 / 0x33)) + 80 * (v8 % 0x33));
    _DWORD *v19 = 2;
    *(void *)&double result = sub_10005B15C((void *)this + 19, (uint64_t)&v14).n128_u64[0];
  }

  return result;
}

void sub_10005AF58(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *YAML::Scanner::InvalidateSimpleKey(void *this)
{
  uint64_t v1 = this[24];
  if (v1)
  {
    uint64_t v2 = v1 - 1;
    unint64_t v3 = this[23] + v1 - 1;
    uint64_t v4 = *(void *)(this[20] + 8 * (v3 / 0x55));
    unint64_t v5 = v3 % 0x55;
    if (*(void *)(v4 + 48 * (v3 % 0x55) + 16) == this[39])
    {
      uint64_t v6 = *(void *)(v4 + 48 * v5 + 24);
      if (v6) {
        *(_DWORD *)(v6 + std::istream::~istream(v1, v2 + 8) = 1;
      }
      int v7 = *(_DWORD **)(v4 + 48 * v5 + 32);
      if (v7) {
        _DWORD *v7 = 1;
      }
      unint64_t v8 = *(_DWORD **)(v4 + 48 * v5 + 40);
      if (v8) {
        _DWORD *v8 = 1;
      }
      this[24] = v2;
      return (void *)sub_10005B51C(this + 19, 1);
    }
  }

  return this;
}

uint64_t YAML::Scanner::VerifySimpleKey(YAML::Scanner *this)
{
  uint64_t v1 = *((void *)this + 24);
  if (!v1) {
    return 0LL;
  }
  uint64_t v3 = v1 - 1;
  unint64_t v4 = *(void *)(*((void *)this + 20) + 8 * ((*((void *)this + 23) + v3) / 0x55uLL))
     + 48 * ((*((void *)this + 23) + v3) % 0x55uLL);
  if (*(void *)(v4 + 16) != *((void *)this + 39)) {
    return 0LL;
  }
  uint64_t v6 = *(void *)(v4 + 24);
  unint64_t v5 = *(_DWORD **)(v4 + 32);
  int v7 = *(int **)(v4 + 40);
  int v8 = *(_DWORD *)v4;
  int v9 = *(_DWORD *)(v4 + 4);
  *((void *)this + memset(v29, 0, 24) = v3;
  sub_10005B51C((void *)this + 19, 1);
  if (*((_DWORD *)this + 3) == v9 && *((_DWORD *)this + 2) - v8 <= 1024)
  {
    if (v6) {
      *(_DWORD *)(v6 + std::istream::~istream(v1, v2 + 8) = 0;
    }
    if (v5) {
      _DWORD *v5 = 0;
    }
    uint64_t result = 1LL;
    if (v7)
    {
      int v11 = 0;
      goto LABEL_18;
    }
  }

  else
  {
    if (v6) {
      *(_DWORD *)(v6 + std::istream::~istream(v1, v2 + 8) = 1;
    }
    if (v5) {
      _DWORD *v5 = 1;
    }
    uint64_t result = 0LL;
    if (v7)
    {
      int v11 = 1;
LABEL_18:
      int *v7 = v11;
    }
  }

  return result;
}

uint64_t YAML::Scanner::PopAllSimpleKeys(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 192);
  if (v1)
  {
    uint64_t v2 = this;
    uint64_t v3 = (void *)(this + 152);
    do
    {
      *(void *)(v2 + 192) = v1 - 1;
      this = sub_10005B51C(v3, 1);
      uint64_t v1 = *(void *)(v2 + 192);
    }

    while (v1);
  }

  return this;
}

__n128 sub_10005B15C(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 85 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10005B208(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }

  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x55)) + 48 * (v7 % 0x55);
  __n128 result = *(__n128 *)a2;
  __int128 v10 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v8 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v8 + 32) = v10;
  *(__n128 *)unint64_t v8 = result;
  ++a1[5];
  return result;
}

void sub_10005B208(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x55;
  unint64_t v4 = v2 - 85;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    int v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      int v34 = (char *)sub_10004FA94(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      int v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        BOOL v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)BOOL v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_10005B4D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10005B51C(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0LL;
  }
  else {
    uint64_t v4 = 85 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x55) {
    a2 = 1;
  }
  if (v5 < 0xAA) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8LL;
  }

  return v7 ^ 1u;
}

YAML::SingleDocParser *YAML::SingleDocParser::SingleDocParser( YAML::SingleDocParser *this, YAML::Scanner *a2, const YAML::Directives *a3)
{
  *(void *)this = a2;
  *((void *)this + 1) = a3;
  uint64_t v4 = operator new(0x30uLL);
  *uint64_t v4 = 0u;
  v4[1] = 0u;
  v4[2] = 0u;
  *((void *)this + 5) = 0LL;
  *((void *)this + 6) = 0LL;
  *((void *)this + 4) = 0LL;
  *((void *)this + 2) = v4;
  *((void *)this + 3) = (char *)this + 32;
  return this;
}

void YAML::SingleDocParser::~SingleDocParser(char **this)
{
}

unint64_t YAML::SingleDocParser::HandleDocument(uint64_t a1, uint64_t a2)
{
  if (YAML::Scanner::empty(*(YAML::Scanner **)a1)) {
    sub_10005D2E8();
  }
  if (*(void *)(a1 + 48)) {
    sub_10005D310();
  }
  unint64_t v4 = YAML::Scanner::peek(*(YAML::Scanner **)a1);
  (*(void (**)(uint64_t, unint64_t))(*(void *)a2 + 16LL))(a2, v4 + 8);
  if (*(_DWORD *)(YAML::Scanner::peek(*(YAML::Scanner **)a1) + 4) == 1) {
    YAML::Scanner::pop(*(int64x2_t **)a1);
  }
  YAML::SingleDocParser::HandleNode(a1, a2);
  (*(void (**)(uint64_t))(*(void *)a2 + 24LL))(a2);
  unint64_t result = YAML::Scanner::empty(*(YAML::Scanner **)a1);
  if ((result & 1) == 0)
  {
    do
    {
      unint64_t result = YAML::Scanner::peek(*(YAML::Scanner **)a1);
      if (*(_DWORD *)(result + 4) != 2) {
        break;
      }
      YAML::Scanner::pop(*(int64x2_t **)a1);
      unint64_t result = YAML::Scanner::empty(*(YAML::Scanner **)a1);
    }

    while (!(_DWORD)result);
  }

  return result;
}

void YAML::SingleDocParser::HandleNode(uint64_t a1, uint64_t a2)
{
  if (YAML::Scanner::empty(*(YAML::Scanner **)a1))
  {
    __p.__r_.__value_.__r.__words[0] = YAML::Scanner::mark(*(YAML::Scanner **)a1);
    LODWORD(__p.__r_.__value_.__r.__words[1]) = v4;
    (*(void (**)(uint64_t, std::string *, void))(*(void *)a2 + 32LL))(a2, &__p, 0LL);
    return;
  }

  unint64_t v5 = YAML::Scanner::peek(*(YAML::Scanner **)a1);
  uint64_t v25 = *(void *)(v5 + 8);
  int v26 = *(_DWORD *)(v5 + 16);
  if (*(_DWORD *)(YAML::Scanner::peek(*(YAML::Scanner **)a1) + 4) == 15)
  {
    sub_1000021BC(&__p, "?");
    (*(void (**)(uint64_t, uint64_t *, std::string *, void, void))(*(void *)a2 + 72LL))( a2,  &v25,  &__p,  0LL,  0LL);
    YAML::SingleDocParser::HandleMap((YAML::Scanner **)a1, a2);
    (*(void (**)(uint64_t))(*(void *)a2 + 80LL))(a2);
    return;
  }

  if (*(_DWORD *)(YAML::Scanner::peek(*(YAML::Scanner **)a1) + 4) == 17)
  {
    unint64_t v6 = YAML::Scanner::peek(*(YAML::Scanner **)a1);
    uint64_t v7 = YAML::SingleDocParser::LookupAnchor(a1, &v25, (const void **)(v6 + 24));
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 40LL))(a2, &v25, v7);
    YAML::Scanner::pop(*(int64x2_t **)a1);
    return;
  }

  memset(&__p, 0, sizeof(__p));
  memset(&v23, 0, sizeof(v23));
  YAML::SingleDocParser::ParseProperties((YAML::Scanner **)a1, &__p, &v22, &v23);
  std::string::size_type size = v23.__r_.__value_.__s.__size_;
  if ((v23.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    std::string::size_type size = v23.__r_.__value_.__l.__size_;
  }
  if (size) {
    (*(void (**)(uint64_t, uint64_t *, std::string *))(*(void *)a2 + 88LL))(a2, &v25, &v23);
  }
  unint64_t v9 = YAML::Scanner::peek(*(YAML::Scanner **)a1);
  unint64_t v10 = v9;
  int v11 = *(_DWORD *)(v9 + 4);
  if (v11 != 19) {
    goto LABEL_17;
  }
  if (!YAML::IsNullString((unsigned __int8 **)(v9 + 24)))
  {
    int v11 = *(_DWORD *)(v10 + 4);
LABEL_17:
    std::string::size_type v12 = __p.__r_.__value_.__s.__size_;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      std::string::size_type v12 = __p.__r_.__value_.__l.__size_;
    }
    if (!v12)
    {
      if (v11 == 20) {
        uint64_t v13 = "!";
      }
      else {
        uint64_t v13 = "?";
      }
      std::string::assign(&__p, v13);
      int v11 = *(_DWORD *)(v10 + 4);
    }

    uint64_t v14 = 2LL;
    switch(v11)
    {
      case 3:
        uint64_t v14 = 1LL;
        goto LABEL_26;
      case 4:
        uint64_t v14 = 1LL;
        goto LABEL_33;
      case 5:
      case 6:
      case 7:
      case 10:
      case 11:
      case 12:
      case 13:
        goto LABEL_40;
      case 8:
LABEL_26:
        (*(void (**)(uint64_t, uint64_t *, std::string *, uint64_t, uint64_t))(*(void *)a2 + 56LL))( a2,  &v25,  &__p,  v22,  v14);
        YAML::SingleDocParser::HandleSequence((YAML::Scanner **)a1, a2);
        uint64_t v15 = 8LL;
        goto LABEL_34;
      case 9:
        goto LABEL_33;
      case 14:
        uint64_t v16 = *(void **)(a1 + 16);
        uint64_t v17 = v16[5];
        if (!v17
          || *(_DWORD *)(*(void *)(v16[1] + (((unint64_t)(v17 + v16[4] - 1) >> 7) & 0x1FFFFFFFFFFFFF8LL))
                       + 4 * ((v17 + v16[4] - 1) & 0x3FF)) != 4)
        {
          goto LABEL_40;
        }

LABEL_33:
        (*(void (**)(uint64_t, uint64_t *, std::string *, uint64_t, uint64_t))(*(void *)a2 + 72LL))( a2,  &v25,  &__p,  v22,  v14);
        YAML::SingleDocParser::HandleMap((YAML::Scanner **)a1, a2);
        uint64_t v15 = 10LL;
LABEL_34:
        (*(void (**)(uint64_t))(*(void *)a2 + 8 * v15))(a2);
        goto LABEL_35;
      default:
        if ((v11 - 19) < 2)
        {
          (*(void (**)(uint64_t, uint64_t *, std::string *, uint64_t, unint64_t))(*(void *)a2 + 48LL))( a2,  &v25,  &__p,  v22,  v10 + 24);
          goto LABEL_29;
        }

void sub_10005BA94( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

unint64_t YAML::SingleDocParser::HandleMap(YAML::Scanner **a1, uint64_t a2)
{
  unint64_t result = YAML::Scanner::peek(*a1);
  int v5 = *(_DWORD *)(result + 4);
  if (v5 > 13)
  {
    if (v5 == 14)
    {
      return YAML::SingleDocParser::HandleCompactMap((uint64_t)a1, a2);
    }

    else if (v5 == 15)
    {
      return YAML::SingleDocParser::HandleCompactMapWithNoKey((uint64_t)a1, a2);
    }
  }

  else if (v5 == 4)
  {
    return YAML::SingleDocParser::HandleBlockMap((uint64_t)a1, a2);
  }

  else if (v5 == 9)
  {
    return YAML::SingleDocParser::HandleFlowMap((uint64_t)a1, a2);
  }

  return result;
}

uint64_t YAML::SingleDocParser::LookupAnchor(uint64_t a1, _DWORD *a2, const void **a3)
{
  uint64_t v5 = sub_100008EC0(a1 + 24, a3);
  if (a1 + 32 == v5)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
    sub_1000021BC(v8, "the referenced anchor is not defined");
    sub_1000413D8((uint64_t)exception, a2, (uint64_t)v8);
    void *exception = off_1000792A0;
  }

  return *(void *)(v5 + 56);
}

void sub_10005BC38( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }

  else if (!v16)
  {
    goto LABEL_6;
  }

  __cxa_free_exception(v15);
  goto LABEL_6;
}

unint64_t YAML::SingleDocParser::ParseProperties( YAML::Scanner **a1, std::string *a2, uint64_t *a3, std::string *a4)
{
  if ((char)a2->__r_.__value_.__s.__size_ < 0)
  {
    *a2->__r_.__value_.__l.__data_ = 0;
    a2->__r_.__value_.__l.__size_ = 0LL;
  }

  else
  {
    a2->__r_.__value_.__s.__data_[0] = 0;
    a2->__r_.__value_.__s.__size_ = 0;
  }

  if ((char)a4->__r_.__value_.__s.__size_ < 0)
  {
    *a4->__r_.__value_.__l.__data_ = 0;
    a4->__r_.__value_.__l.__size_ = 0LL;
  }

  else
  {
    a4->__r_.__value_.__s.__data_[0] = 0;
    a4->__r_.__value_.__s.__size_ = 0;
  }

  *a3 = 0LL;
  unint64_t result = YAML::Scanner::empty(*a1);
  if ((result & 1) == 0)
  {
    do
    {
      unint64_t result = YAML::Scanner::peek(*a1);
      int v9 = *(_DWORD *)(result + 4);
      if (v9 == 16)
      {
        YAML::SingleDocParser::ParseAnchor(a1, a3, a4);
      }

      else
      {
        if (v9 != 18) {
          return result;
        }
        YAML::SingleDocParser::ParseTag(a1, a2);
      }

      unint64_t result = YAML::Scanner::empty(*a1);
    }

    while (!(_DWORD)result);
  }

  return result;
}

unint64_t YAML::SingleDocParser::HandleSequence(YAML::Scanner **a1, uint64_t a2)
{
  unint64_t result = YAML::Scanner::peek(*a1);
  int v5 = *(_DWORD *)(result + 4);
  if (v5 == 8) {
    return YAML::SingleDocParser::HandleFlowSequence((uint64_t)a1, a2);
  }
  if (v5 == 3) {
    return YAML::SingleDocParser::HandleBlockSequence((uint64_t)a1, a2);
  }
  return result;
}

uint64_t YAML::SingleDocParser::HandleBlockSequence(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)(a1 + 16);
  LODWORD(v1memset(v42, 0, 7) = 2;
  sub_10005CDEC(v4, &v17);
  do
  {
    if (YAML::Scanner::empty(*(YAML::Scanner **)a1))
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
      uint64_t v15 = (void **)YAML::Scanner::mark(*(YAML::Scanner **)a1);
      int v16 = v14;
      sub_1000021BC(&v17, "end of sequence not found");
      sub_1000413D8((uint64_t)exception, &v15, (uint64_t)&v17);
      void *exception = off_1000792A0;
    }

    unint64_t v5 = YAML::Scanner::peek(*(YAML::Scanner **)a1);
    unint64_t v6 = v5;
    int v7 = *(_DWORD *)(v5 + 16);
    __int128 v17 = *(_OWORD *)v5;
    int v18 = v7;
    if (*(char *)(v5 + 47) < 0)
    {
      sub_10000231C(&__p, *(void **)(v5 + 24), *(void *)(v5 + 32));
    }

    else
    {
      __int128 v8 = *(_OWORD *)(v5 + 24);
      uint64_t v20 = *(void *)(v5 + 40);
      __int128 __p = v8;
    }

    memset(v21, 0, sizeof(v21));
    sub_100002594( v21,  *(__int128 **)(v6 + 48),  *(__int128 **)(v6 + 56),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v6 + 56) - *(void *)(v6 + 48)) >> 3));
    int v22 = *(_DWORD *)(v6 + 72);
    if ((DWORD1(v17) & 0xFFFFFFFD) != 5)
    {
      std::string::size_type v12 = __cxa_allocate_exception(0x38uLL);
      sub_1000021BC(&v15, "end of sequence not found");
      sub_1000413D8((uint64_t)v12, (_DWORD *)&v17 + 2, (uint64_t)&v15);
      *std::string::size_type v12 = off_1000792A0;
    }

    YAML::Scanner::pop(*(int64x2_t **)a1);
    int v9 = DWORD1(v17);
    if (DWORD1(v17) != 5)
    {
      if (YAML::Scanner::empty(*(YAML::Scanner **)a1)
        || (unint64_t v10 = YAML::Scanner::peek(*(YAML::Scanner **)a1), (*(_DWORD *)(v10 + 4) | 2) != 7))
      {
        YAML::SingleDocParser::HandleNode(a1, a2);
      }

      else
      {
        (*(void (**)(uint64_t, unint64_t, void))(*(void *)a2 + 32LL))(a2, v10 + 8, 0LL);
      }
    }

    uint64_t v15 = (void **)v21;
    sub_1000027F4(&v15);
    if (SHIBYTE(v20) < 0) {
      operator delete((void *)__p);
    }
  }

  while (v9 != 5);
  return sub_10005C2E4(*(void **)(a1 + 16), 2);
}

void sub_10005BFF4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((v28 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }

  else if (!v28)
  {
    goto LABEL_6;
  }

  __cxa_free_exception(v27);
  goto LABEL_6;
}

uint64_t YAML::SingleDocParser::HandleFlowSequence(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)(a1 + 16);
  LODWORD(v18[0]) = 4;
  sub_10005CDEC(v4, v18);
  while (1)
  {
    if (YAML::Scanner::empty(*(YAML::Scanner **)a1))
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
      int v9 = (YAML::Scanner **)a1;
      unint64_t v10 = exception;
      uint64_t v19 = YAML::Scanner::mark(*v9);
      int v20 = v11;
      sub_1000021BC(v18, "end of sequence flow not found");
      sub_1000413D8((uint64_t)v10, &v19, (uint64_t)v18);
      void *v10 = off_1000792A0;
    }

    if (*(_DWORD *)(YAML::Scanner::peek(*(YAML::Scanner **)a1) + 4) == 10) {
      break;
    }
    YAML::SingleDocParser::HandleNode(a1, a2);
    if (YAML::Scanner::empty(*(YAML::Scanner **)a1))
    {
      std::string::size_type v12 = __cxa_allocate_exception(0x38uLL);
      uint64_t v13 = (YAML::Scanner **)a1;
      int v14 = v12;
      uint64_t v19 = YAML::Scanner::mark(*v13);
      int v20 = v15;
      sub_1000021BC(v18, "end of sequence flow not found");
      sub_1000413D8((uint64_t)v14, &v19, (uint64_t)v18);
      void *v14 = off_1000792A0;
    }

    unint64_t v5 = YAML::Scanner::peek(*(YAML::Scanner **)a1);
    int v6 = *(_DWORD *)(v5 + 4);
    if (v6 != 10)
    {
      if (v6 != 13)
      {
        unint64_t v16 = v5;
        __int128 v17 = __cxa_allocate_exception(0x38uLL);
        sub_1000021BC(v18, "end of sequence flow not found");
        sub_1000413D8((uint64_t)v17, (_DWORD *)(v16 + 8), (uint64_t)v18);
        void *v17 = off_1000792A0;
      }

      YAML::Scanner::pop(*(int64x2_t **)a1);
    }
  }

  YAML::Scanner::pop(*(int64x2_t **)a1);
  return sub_10005C2E4(*(void **)(a1 + 16), 4);
}

void sub_10005C29C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if ((v16 & 1) != 0) {
    __cxa_free_exception(v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10005C2E4(void *a1, int a2)
{
  uint64_t v2 = a1[5];
  if (v2) {
  else
  }
    int v3 = 0;
  if (v3 != a2) {
    sub_10005D338();
  }
  a1[5] = v2 - 1;
  return sub_10005AD5C(a1, 1);
}

uint64_t YAML::SingleDocParser::HandleBlockMap(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)(a1 + 16);
  LODWORD(v16) = 1;
  sub_10005CDEC(v4, &v16);
  do
  {
    while (1)
    {
      if (YAML::Scanner::empty(*(YAML::Scanner **)a1))
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
        int v14 = (void **)YAML::Scanner::mark(*(YAML::Scanner **)a1);
        int v15 = v12;
        sub_1000021BC(&v16, "end of map not found");
        sub_1000413D8((uint64_t)exception, &v14, (uint64_t)&v16);
        void *exception = off_1000792A0;
      }

      unint64_t v5 = YAML::Scanner::peek(*(YAML::Scanner **)a1);
      unint64_t v6 = v5;
      int v7 = *(_DWORD *)(v5 + 16);
      __int128 v16 = *(_OWORD *)v5;
      int v17 = v7;
      if (*(char *)(v5 + 47) < 0)
      {
        sub_10000231C(&__p, *(void **)(v5 + 24), *(void *)(v5 + 32));
      }

      else
      {
        __int128 v8 = *(_OWORD *)(v5 + 24);
        uint64_t v19 = *(void *)(v5 + 40);
        __int128 __p = v8;
      }

      memset(v20, 0, sizeof(v20));
      sub_100002594( v20,  *(__int128 **)(v6 + 48),  *(__int128 **)(v6 + 56),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v6 + 56) - *(void *)(v6 + 48)) >> 3));
      int v21 = *(_DWORD *)(v6 + 72);
      if (DWORD1(v16) == 6)
      {
        YAML::Scanner::pop(*(int64x2_t **)a1);
        char v9 = 0;
      }

      else
      {
        if (DWORD1(v16) == 14)
        {
          YAML::Scanner::pop(*(int64x2_t **)a1);
          YAML::SingleDocParser::HandleNode(a1, a2);
        }

        else
        {
          if (DWORD1(v16) != 15)
          {
            uint64_t v13 = __cxa_allocate_exception(0x38uLL);
            sub_1000021BC(&v14, "end of map not found");
            sub_1000413D8((uint64_t)v13, (_DWORD *)&v16 + 2, (uint64_t)&v14);
            *uint64_t v13 = off_1000792A0;
          }

          (*(void (**)(uint64_t, char *, void))(*(void *)a2 + 32LL))(a2, (char *)&v16 + 8, 0LL);
        }

        if (YAML::Scanner::empty(*(YAML::Scanner **)a1)
          || *(_DWORD *)(YAML::Scanner::peek(*(YAML::Scanner **)a1) + 4) != 15)
        {
          (*(void (**)(uint64_t, char *, void))(*(void *)a2 + 32LL))(a2, (char *)&v16 + 8, 0LL);
        }

        else
        {
          YAML::Scanner::pop(*(int64x2_t **)a1);
          YAML::SingleDocParser::HandleNode(a1, a2);
        }

        char v9 = 1;
      }

      int v14 = (void **)v20;
      sub_1000027F4(&v14);
      if (SHIBYTE(v19) < 0) {
        break;
      }
      if ((v9 & 1) == 0) {
        return sub_10005C2E4(*(void **)(a1 + 16), 1);
      }
    }

    operator delete((void *)__p);
  }

  while ((v9 & 1) != 0);
  return sub_10005C2E4(*(void **)(a1 + 16), 1);
}

void sub_10005C5E4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v28 & 1) == 0)
    {
LABEL_6:
      sub_100053D1C((uint64_t)&a16);
      _Unwind_Resume(a1);
    }
  }

  else if (!v28)
  {
    goto LABEL_6;
  }

  __cxa_free_exception(v27);
  goto LABEL_6;
}

uint64_t YAML::SingleDocParser::HandleFlowMap(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)(a1 + 16);
  LODWORD(v20[0]) = 3;
  sub_10005CDEC(v4, v20);
  while (1)
  {
    if (YAML::Scanner::empty(*(YAML::Scanner **)a1))
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
      uint64_t v21 = YAML::Scanner::mark(*(YAML::Scanner **)a1);
      int v22 = v11;
      sub_1000021BC(v20, "end of map flow not found");
      sub_1000413D8((uint64_t)exception, &v21, (uint64_t)v20);
      void *exception = off_1000792A0;
    }

    unint64_t v5 = YAML::Scanner::peek(*(YAML::Scanner **)a1);
    uint64_t v21 = *(void *)(v5 + 8);
    int v22 = *(_DWORD *)(v5 + 16);
    int v6 = *(_DWORD *)(v5 + 4);
    if (v6 == 14)
    {
      YAML::Scanner::pop(*(int64x2_t **)a1);
      YAML::SingleDocParser::HandleNode(a1, a2);
      goto LABEL_7;
    }

    if (v6 == 11) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void))(*(void *)a2 + 32LL))(a2, &v21, 0LL);
LABEL_7:
    if (YAML::Scanner::empty(*(YAML::Scanner **)a1)
      || *(_DWORD *)(YAML::Scanner::peek(*(YAML::Scanner **)a1) + 4) != 15)
    {
      (*(void (**)(uint64_t, uint64_t *, void))(*(void *)a2 + 32LL))(a2, &v21, 0LL);
    }

    else
    {
      YAML::Scanner::pop(*(int64x2_t **)a1);
      YAML::SingleDocParser::HandleNode(a1, a2);
    }

    if (YAML::Scanner::empty(*(YAML::Scanner **)a1))
    {
      int v12 = __cxa_allocate_exception(0x38uLL);
      uint64_t v13 = (YAML::Scanner **)a1;
      int v14 = v12;
      uint64_t v18 = YAML::Scanner::mark(*v13);
      int v19 = v15;
      sub_1000021BC(v20, "end of map flow not found");
      sub_1000413D8((uint64_t)v14, &v18, (uint64_t)v20);
      void *v14 = off_1000792A0;
    }

    unint64_t v7 = YAML::Scanner::peek(*(YAML::Scanner **)a1);
    int v8 = *(_DWORD *)(v7 + 4);
    if (v8 != 11)
    {
      if (v8 != 13)
      {
        unint64_t v16 = v7;
        int v17 = __cxa_allocate_exception(0x38uLL);
        sub_1000021BC(v20, "end of map flow not found");
        sub_1000413D8((uint64_t)v17, (_DWORD *)(v16 + 8), (uint64_t)v20);
        void *v17 = off_1000792A0;
      }

      YAML::Scanner::pop(*(int64x2_t **)a1);
    }
  }

  YAML::Scanner::pop(*(int64x2_t **)a1);
  return sub_10005C2E4(*(void **)(a1 + 16), 3);
}

void sub_10005C910( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if ((v18 & 1) != 0) {
    __cxa_free_exception(v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t YAML::SingleDocParser::HandleCompactMap(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)(a1 + 16);
  LODWORD(vmemset(v42, 0, 7) = 5;
  sub_10005CDEC(v4, &v7);
  unint64_t v5 = YAML::Scanner::peek(*(YAML::Scanner **)a1);
  uint64_t v7 = *(void *)(v5 + 8);
  int v8 = *(_DWORD *)(v5 + 16);
  YAML::Scanner::pop(*(int64x2_t **)a1);
  YAML::SingleDocParser::HandleNode(a1, a2);
  if (YAML::Scanner::empty(*(YAML::Scanner **)a1) || *(_DWORD *)(YAML::Scanner::peek(*(YAML::Scanner **)a1) + 4) != 15)
  {
    (*(void (**)(uint64_t, uint64_t *, void))(*(void *)a2 + 32LL))(a2, &v7, 0LL);
  }

  else
  {
    YAML::Scanner::pop(*(int64x2_t **)a1);
    YAML::SingleDocParser::HandleNode(a1, a2);
  }

  return sub_10005C2E4(*(void **)(a1 + 16), 5);
}

uint64_t YAML::SingleDocParser::HandleCompactMapWithNoKey(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)(a1 + 16);
  int v7 = 5;
  sub_10005CDEC(v4, &v7);
  unint64_t v5 = YAML::Scanner::peek(*(YAML::Scanner **)a1);
  (*(void (**)(uint64_t, unint64_t, void))(*(void *)a2 + 32LL))(a2, v5 + 8, 0LL);
  YAML::Scanner::pop(*(int64x2_t **)a1);
  YAML::SingleDocParser::HandleNode(a1, a2);
  return sub_10005C2E4(*(void **)(a1 + 16), 5);
}

void YAML::SingleDocParser::ParseTag(YAML::Scanner **a1, std::string *a2)
{
  unint64_t v4 = YAML::Scanner::peek(*a1);
  std::string::size_type size = a2->__r_.__value_.__s.__size_;
  if ((size & 0x80u) != 0LL) {
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  if (size)
  {
    unint64_t v6 = v4;
    exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
    sub_1000021BC(v9, "cannot assign multiple tags to the same node");
    sub_1000413D8((uint64_t)exception, (_DWORD *)(v6 + 8), (uint64_t)v9);
    void *exception = off_1000792A0;
  }

  YAML::Tag::Tag(v9, v4);
  YAML::Tag::Translate((YAML::Tag *)v9, a1[1], (uint64_t)&__p);
  std::string::operator=(a2, &__p);
  YAML::Scanner::pop((int64x2_t *)*a1);
  if (v12 < 0) {
    operator delete(v11);
  }
  if (v10 < 0) {
    operator delete(v9[1]);
  }
}

void sub_10005CBD4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }

  else if (!v21)
  {
    goto LABEL_6;
  }

  __cxa_free_exception(v20);
  goto LABEL_6;
}

void YAML::SingleDocParser::ParseAnchor(YAML::Scanner **a1, uint64_t *a2, std::string *a3)
{
  unint64_t v6 = (const std::string *)YAML::Scanner::peek(*a1);
  int v7 = v6;
  if (*a2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
    sub_1000021BC(v10, "cannot assign multiple anchors to the same node");
    sub_1000413D8((uint64_t)exception, &v7->__r_.__value_.__r.__words[1], (uint64_t)v10);
    void *exception = off_1000792A0;
  }

  uint64_t v8 = (uint64_t)&v6[1];
  std::string::operator=(a3, v6 + 1);
  *a2 = YAML::SingleDocParser::RegisterAnchor((uint64_t)a1, v8);
  YAML::Scanner::pop((int64x2_t *)*a1);
}

void sub_10005CD04( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }

  else if (!v16)
  {
    goto LABEL_6;
  }

  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t sub_10005CD3C(uint64_t a1)
{
  return a1;
}

uint64_t YAML::SingleDocParser::RegisterAnchor(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0LL) {
    uint64_t v2 = *(void *)(a2 + 8);
  }
  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = *(void *)(a1 + 48) + 1LL;
  *(void *)(a1 + 4std::istream::~istream(v1, v2 + 8) = v3;
  unint64_t v5 = (__int128 *)a2;
  sub_10005D1B0((uint64_t **)(a1 + 24), (const void **)a2, (uint64_t)&std::piecewise_construct, &v5)[7] = v3;
  return v3;
}

void sub_10005CDEC(void *a1, _DWORD *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 7) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_10005CE70(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }

  *(_DWORD *)(*(void *)(v5 + ((v8 >> 7) & 0x1FFFFFFFFFFFFF8LL)) + 4 * (v8 & 0x3FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_10005CE70(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x400;
  unint64_t v4 = v2 - 1024;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    char v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      int v34 = (char *)sub_10004FA94(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      int v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        BOOL v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)BOOL v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_10005D138( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10005D184(void **a1, void *a2)
{
  BOOL v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    unint64_t v4 = (void *)sub_100054338(v3);
    operator delete(v4);
  }

uint64_t *sub_10005D1B0(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t v6 = (uint64_t **)sub_100005600((uint64_t)a1, &v9, a2);
  unint64_t result = *v6;
  if (!*v6)
  {
    sub_10005D244((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000055AC(a1, v9, v6, v8);
    return v8;
  }

  return result;
}

_BYTE *sub_10005D244@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + std::istream::~istream(v1, v2 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  unint64_t result = v6 + 32;
  unint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    unint64_t result = sub_10000231C(result, *(void **)v8, *((void *)v8 + 1));
  }

  else
  {
    __int128 v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)unint64_t result = v9;
  }

  *((void *)v6 + memset(v42, 0, 7) = 0LL;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_10005D2CC(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0LL;
  sub_100008E74(v3, v2);
  _Unwind_Resume(a1);
}

void sub_10005D2E8()
{
}

void sub_10005D310()
{
}

void sub_10005D338()
{
  __assert_rtn("PopCollectionType", "collectionstack.h", 31, "type == GetCurCollectionType()");
}

uint64_t YAML::Stream::Stream(uint64_t a1, void *a2)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + std::istream::~istream(v1, v2 + 8) = 0u;
  *(_OWORD *)(a1 + memset(v29, 0, 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  unint64_t v4 = operator new[](0x800uLL);
  *(void *)(a1 + 80) = 0LL;
  *(void *)(a1 + 8std::istream::~istream(v1, v2 + 8) = 0LL;
  *(void *)(a1 + sub_10003D0C8(v18 - 72) = v4;
  if ((*((_BYTE *)a2 + *(void *)(*a2 - 24LL) + 32) & 5) != 0) {
    return a1;
  }
  uint64_t v5 = 0LL;
  int v6 = 0;
  do
  {
    int v7 = std::istream::get(a2);
    *(_DWORD *)&v17[4 * v6 + 4] = v7;
    if (v7 <= 190)
    {
      switch(v7)
      {
        case -1:
          uint64_t v8 = 7LL;
          goto LABEL_21;
        case 0:
          uint64_t v8 = 0LL;
          goto LABEL_21;
        case 187:
          uint64_t v8 = 1LL;
          goto LABEL_21;
      }
    }

    else if (v7 > 253)
    {
      if (v7 == 254)
      {
        uint64_t v8 = 4LL;
        goto LABEL_21;
      }

      if (v7 == 255)
      {
        uint64_t v8 = 5LL;
        goto LABEL_21;
      }
    }

    else
    {
      if (v7 == 191)
      {
        uint64_t v8 = 2LL;
        goto LABEL_21;
      }

      if (v7 == 239)
      {
        uint64_t v8 = 3LL;
        goto LABEL_21;
      }
    }

    uint64_t v8 = 6LL;
LABEL_21:
    ++v6;
    uint64_t v9 = dword_100061BF8[8 * v5 + v8];
    int v10 = byte_100061E38[8 * v5 + v8];
    if (v10 >= 1)
    {
      std::ios_base::clear((std::ios_base *)((char *)a2 + *(void *)(*a2 - 24LL)), 0);
      uint64_t v11 = (int *)&v17[4 * v6];
      int v12 = v10 + 1;
      do
      {
        int v14 = *v11--;
        char v13 = v14;
        if (v14 != -1) {
          std::istream::putback(a2, v13);
        }
        --v6;
        --v12;
      }

      while (v12 > 1);
    }

    uint64_t v5 = v9;
  }

  while (((0x1F3CFuLL >> v9) & 1) != 0);
  else {
    int v15 = dword_100061EE8[(int)v9 - 4];
  }
  *(_DWORD *)(a1 + 20) = v15;
  if (!*(void *)(a1 + 64)) {
    YAML::Stream::_ReadAheadTo((YAML::Stream *)a1, 0LL);
  }
  return a1;
}

void sub_10005D588(_Unwind_Exception *a1)
{
}

void YAML::Stream::~Stream(YAML::Stream *this)
{
  unint64_t v2 = (void *)*((void *)this + 9);
  if (v2) {
    operator delete[](v2);
  }
  sub_10005E0A4((void *)this + 3);
}

uint64_t YAML::Stream::peek(YAML::Stream *this)
{
  if (*((void *)this + 8)) {
    return *(char *)(*(void *)(*((void *)this + 4)
  }
                                             + ((*((void *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8LL))
                                 + (*((void *)this + 7) & 0xFFFLL));
  else {
    return 4;
  }
}

BOOL YAML::Stream::operator BOOL(void *a1)
{
  if (!*(_DWORD *)(*a1 + *(void *)(*(void *)*a1 - 24LL) + 32LL)) {
    return 1LL;
  }
  if (a1[8]) {
    return *(_BYTE *)(*(void *)(a1[4] + ((a1[7] >> 9) & 0x7FFFFFFFFFFFF8LL)) + (a1[7] & 0xFFFLL)) != 4;
  }
  return 0LL;
}

uint64_t YAML::Stream::get(YAML::Stream *this)
{
  if (*((void *)this + 8)) {
  else
  }
    int v2 = 4;
  YAML::Stream::AdvanceCurrent(this);
  ++*((_DWORD *)this + 4);
  if (v2 == 10) {
    *(void *)((char *)this + 12) = (*((_DWORD *)this + 3) + 1);
  }
  return (char)v2;
}

uint64_t YAML::Stream::AdvanceCurrent(YAML::Stream *this)
{
  uint64_t v2 = *((void *)this + 8);
  if (!v2) {
    return YAML::Stream::_ReadAheadTo(this, 0LL);
  }
  ++*((void *)this + 7);
  *((void *)this + std::istream::~istream(v1, v2 + 8) = v2 - 1;
  uint64_t result = sub_10005E138((uint64_t)this + 24, 1);
  ++*((_DWORD *)this + 2);
  if (!*((void *)this + 8)) {
    return YAML::Stream::_ReadAheadTo(this, 0LL);
  }
  return result;
}

void YAML::Stream::get(YAML::Stream *this@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  int v3 = a2;
  a3->__r_.__value_.__r.__words[0] = 0LL;
  a3->__r_.__value_.__l.__size_ = 0LL;
  a3->__r_.__value_.__l.__cap_ = 0LL;
  std::string::reserve(a3, a2);
  if (v3 >= 1)
  {
    do
    {
      std::string::value_type v6 = YAML::Stream::get(this);
      std::string::push_back(a3, v6);
      --v3;
    }

    while (v3);
  }

void sub_10005D7B4(_Unwind_Exception *exception_object)
{
}

YAML::Stream *YAML::Stream::eat(YAML::Stream *this, int a2)
{
  if (a2 >= 1)
  {
    int v2 = a2;
    int v3 = this;
    do
    {
      this = (YAML::Stream *)YAML::Stream::get(v3);
      --v2;
    }

    while (v2);
  }

  return this;
}

BOOL YAML::Stream::_ReadAheadTo(YAML::Stream *this, unint64_t a2)
{
  if (*(_DWORD *)(*(void *)this + *(void *)(**(void **)this - 24LL) + 32LL))
  {
LABEL_8:
    char v6 = 4;
    sub_10005DB44((void *)this + 3, &v6);
    unint64_t v4 = *((void *)this + 8);
  }

  else
  {
    while (1)
    {
      unint64_t v4 = *((void *)this + 8);
      if (v4 > a2) {
        break;
      }
      switch(*((_DWORD *)this + 5))
      {
        case 0:
          YAML::Stream::StreamInUtf8(this);
          break;
        case 1:
        case 2:
          YAML::Stream::StreamInUtf16(this);
          break;
        case 3:
        case 4:
          YAML::Stream::StreamInUtf32(this);
          break;
        default:
          break;
      }

      if (*(_DWORD *)(*(void *)this + *(void *)(**(void **)this - 24LL) + 32LL)) {
        goto LABEL_8;
      }
    }
  }

  return v4 > a2;
}

void YAML::Stream::StreamInUtf8(YAML::Stream *this)
{
  char NextByte = YAML::Stream::GetNextByte(this);
  if (!*(_DWORD *)(*(void *)this + *(void *)(**(void **)this - 24LL) + 32LL))
  {
    char v3 = NextByte;
    sub_10005DB44((void *)this + 3, &v3);
  }

void YAML::Stream::StreamInUtf16(YAML::Stream *this)
{
  int v2 = *((_DWORD *)this + 5);
  char NextByte = YAML::Stream::GetNextByte(this);
  char v13 = YAML::Stream::GetNextByte(this);
  if (!*(_DWORD *)(*(void *)this + *(void *)(**(void **)this - 24LL) + 32LL))
  {
    BOOL v3 = v2 == 2;
    BOOL v4 = v2 != 2;
    if (v2 == 2) {
      p_char NextByte = &NextByte;
    }
    else {
      p_char NextByte = &v13;
    }
    uint64_t v6 = *p_NextByte;
    if ((v6 & 0xFC) == 0xDC)
    {
      int v7 = (void *)((char *)this + 24);
LABEL_7:
      unint64_t v8 = 65533LL;
    }

    else
    {
      unint64_t v9 = *(&NextByte + v3) | (unint64_t)(v6 << 8);
      if ((v6 & 0xFC) == 0xD8)
      {
        while (1)
        {
          unint64_t v10 = v9;
          char NextByte = YAML::Stream::GetNextByte(this);
          char v13 = YAML::Stream::GetNextByte(this);
          if (*(_DWORD *)(*(void *)this + *(void *)(**(void **)this - 24LL) + 32LL))
          {
            int v7 = (void *)((char *)this + 24);
            goto LABEL_7;
          }

          unint64_t v9 = *(&NextByte + v3) | ((unint64_t)*(&NextByte + v4) << 8);
          unint64_t v11 = ((unint64_t)*(&NextByte + v4) << 8) - 57344;
          if (v11 > 0xFFFFFFFFFFFFFBFFLL) {
            break;
          }
          sub_10005DC64((void *)this + 3, 0xFFFDuLL);
          if (v11 <= 0xFFFFFFFFFFFFF7FFLL)
          {
            sub_10005DC64((void *)this + 3, v10);
            return;
          }
        }
      }

      int v7 = (void *)((char *)this + 24);
      unint64_t v8 = v9;
    }

    sub_10005DC64(v7, v8);
  }

void YAML::Stream::StreamInUtf32(YAML::Stream *this)
{
  if (*((_DWORD *)this + 5) == 4) {
    int v2 = (char *)&unk_100061ED8;
  }
  else {
    int v2 = (char *)&unk_100061EC8;
  }
  v5[0] = YAML::Stream::GetNextByte(this);
  v5[1] = YAML::Stream::GetNextByte(this);
  v5[2] = YAML::Stream::GetNextByte(this);
  v5[3] = YAML::Stream::GetNextByte(this);
  if (!*(_DWORD *)(*(void *)this + *(void *)(**(void **)this - 24LL) + 32LL))
  {
    uint64_t v3 = 0LL;
    unint64_t v4 = 0LL;
    do
    {
      unint64_t v4 = v5[*(int *)&v2[v3]] | (v4 << 8);
      v3 += 4LL;
    }

    while (v3 != 16);
    sub_10005DC64((void *)this + 3, v4);
  }

void sub_10005DB44(void *a1, _BYTE *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = ((v4 - v5) << 9) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10005DD90(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }

  *(_BYTE *)(*(void *)(v5 + ((v7 >> 9) & 0x7FFFFFFFFFFFF8LL)) + (v7 & 0xFFF)) = *a2;
  ++a1[5];
}

uint64_t YAML::Stream::GetNextByte(YAML::Stream *this)
{
  unint64_t v2 = *((void *)this + 11);
  if (v2 < *((void *)this + 10)) {
    goto LABEL_5;
  }
  uint64_t v3 = *(void *)(*(void *)this + *(void *)(**(void **)this - 24LL) + 40LL);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v3 + 64LL))(v3, *((void *)this + 9), 2048LL);
  *((void *)this + 10) = v4;
  *((void *)this + 11) = 0LL;
  if (v4
    || (uint64_t v5 = (std::ios_base *)(*(void *)this + *(void *)(**(void **)this - 24LL)),
        std::ios_base::clear(v5, v5->__rdstate_ | 2),
        *((void *)this + 10)))
  {
    unint64_t v2 = *((void *)this + 11);
LABEL_5:
    uint64_t v6 = *((void *)this + 9);
    *((void *)this + 11) = v2 + 1;
    return *(unsigned __int8 *)(v6 + v2);
  }

  return 0LL;
}

void sub_10005DC64(void *a1, unint64_t a2)
{
  if (a2 == 4) {
    unint64_t v3 = 65533LL;
  }
  else {
    unint64_t v3 = a2;
  }
  if (v3 > 0x7F)
  {
    if (v3 > 0x7FF)
    {
      if (v3 >> 16)
      {
        char v8 = (v3 >> 18) & 7 | 0xF0;
        sub_10005DB44(a1, &v8);
        char v7 = (v3 >> 12) & 0x3F | 0x80;
        sub_10005DB44(a1, &v7);
        char v6 = (v3 >> 6) & 0x3F | 0x80;
        sub_10005DB44(a1, &v6);
        char v5 = v3 & 0x3F | 0x80;
        uint64_t v4 = &v5;
      }

      else
      {
        char v11 = (v3 >> 12) | 0xE0;
        sub_10005DB44(a1, &v11);
        char v10 = (v3 >> 6) & 0x3F | 0x80;
        sub_10005DB44(a1, &v10);
        char v9 = v3 & 0x3F | 0x80;
        uint64_t v4 = &v9;
      }
    }

    else
    {
      char v13 = (v3 >> 6) | 0xC0;
      sub_10005DB44(a1, &v13);
      char v12 = v3 & 0x3F | 0x80;
      uint64_t v4 = &v12;
    }
  }

  else
  {
    char v14 = v3;
    uint64_t v4 = &v14;
  }

  sub_10005DB44(a1, v4);
}

void sub_10005DD90(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x1000;
  unint64_t v4 = v2 - 4096;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    char v6 = (char *)a1[3];
    a1[4] = v4;
    char v7 = (void *)a1[1];
    char v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    char v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)char v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      int v34 = (char *)sub_10004FA94(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      int v38 = (uint64_t *)a1[1];
      char v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        char v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        BOOL v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)BOOL v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_10005E058( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10005E0A4(void *a1)
{
  unint64_t v2 = (void **)a1[1];
  BOOL v3 = (void **)a1[2];
  a1[5] = 0LL;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      BOOL v3 = (void **)a1[2];
      unint64_t v2 = (void **)(a1[1] + 8LL);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }

    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }

  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 2048LL;
  }

  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 4096LL;
  }

  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    char v7 = *v2++;
    operator delete(v7);
  }

  return sub_1000540D8((uint64_t)a1);
}

uint64_t sub_10005E138(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x1000) {
    a2 = 1;
  }
  if (v2 < 0x2000) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8LL;
    *(void *)(a1 + 32) -= 4096LL;
  }

  return v4 ^ 1u;
}

uint64_t YAML::Tag::Tag(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 72);
  *(_DWORD *)a1 = v3;
  *(_OWORD *)(a1 + std::istream::~istream(v1, v2 + 8) = 0u;
  int v4 = (std::string *)(a1 + 32);
  *(_OWORD *)(a1 + memset(v29, 0, 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  switch(v3)
  {
    case 0:
    case 1:
    case 2:
      uint64_t v6 = (const std::string *)(a2 + 24);
      goto LABEL_4;
    case 3:
      std::string::operator=((std::string *)(a1 + 8), (const std::string *)(a2 + 24));
      uint64_t v6 = *(const std::string **)(a2 + 48);
LABEL_4:
      std::string::operator=(v4, v6);
      break;
    case 4:
      return a1;
    default:
      __assert_rtn("Tag", "tag.cpp", 28, "false");
  }

  return a1;
}

void sub_10005E244(_Unwind_Exception *exception_object)
{
}

void YAML::Tag::Translate(YAML::Tag *this@<X0>, const YAML::Directives *a2@<X1>, uint64_t a3@<X8>)
{
  switch(*(_DWORD *)this)
  {
    case 0:
      if (*((char *)this + 55) < 0)
      {
        sub_10000231C((_BYTE *)a3, *((void **)this + 4), *((void *)this + 5));
      }

      else
      {
        *(_OWORD *)a3 = *((_OWORD *)this + 2);
        *(void *)(a3 + 16) = *((void *)this + 6);
      }

      return;
    case 1:
      sub_1000021BC(v10, "!");
      YAML::Directives::TranslateTagHandle((uint64_t)a2, (uint64_t)v10, (uint64_t)__p);
      sub_100028254((const void **)__p, (const void **)this + 4, a3);
      goto LABEL_13;
    case 2:
      sub_1000021BC(v10, "!!");
      YAML::Directives::TranslateTagHandle((uint64_t)a2, (uint64_t)v10, (uint64_t)__p);
      sub_100028254((const void **)__p, (const void **)this + 4, a3);
LABEL_13:
      if (v13 < 0) {
        operator delete(__p[0]);
      }
      if ((SHIBYTE(cap) & 0x80000000) == 0) {
        return;
      }
      char v8 = v10[0];
      break;
    case 3:
      std::operator+<char>(&v9, "!", (char *)this + 8);
      uint64_t v6 = std::string::append(&v9, "!");
      __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      std::string::size_type cap = v6->__r_.__value_.__l.__cap_;
      *(_OWORD *)uint64_t v10 = v7;
      v6->__r_.__value_.__l.__size_ = 0LL;
      v6->__r_.__value_.__l.__cap_ = 0LL;
      v6->__r_.__value_.__r.__words[0] = 0LL;
      YAML::Directives::TranslateTagHandle((uint64_t)a2, (uint64_t)v10, (uint64_t)__p);
      sub_100028254((const void **)__p, (const void **)this + 4, a3);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(cap) < 0) {
        operator delete(v10[0]);
      }
      char v8 = (void *)v9.__r_.__value_.__r.__words[0];
      break;
    case 4:
      sub_1000021BC((void *)a3, "!");
      return;
    default:
      sub_10005E4BC();
  }

  operator delete(v8);
}

void sub_10005E43C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *__p, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_10005E4BC()
{
}

void sub_10005E4E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100007C74("Pop", "stack.h", a3, "GetSize() >= count * sizeof(T)");
}

void sub_10005E508()
{
}

void sub_10005E530()
{
  __assert_rtn("ParseNull", "reader.h", 855, "is.Peek() == 'n'");
}

void sub_10005E558()
{
}

void sub_10005E580()
{
  __assert_rtn("ParseTrue", "reader.h", 868, "is.Peek() == 't'");
}

void sub_10005E5A8()
{
}

void sub_10005E5D0()
{
  __assert_rtn("ParseFalse", "reader.h", 881, "is.Peek() == 'f'");
}

void sub_10005E5F8()
{
}

void sub_10005E620()
{
}

void sub_10005E648()
{
}

void sub_10005E670()
{
  __assert_rtn("ParseObject", "reader.h", 739, "is.Peek() == '{'");
}

void sub_10005E698()
{
}

void sub_10005E6C0()
{
}

void sub_10005E6E8()
{
}

void sub_10005E710()
{
  __assert_rtn("ParseArray", "reader.h", 807, "is.Peek() == '['");
}

void sub_10005E738()
{
}

void sub_10005E760()
{
  __assert_rtn( "PushUnsafe",  "stack.h",  131,  "static_cast<std::ptrdiff_t>(sizeof(T) * count) <= (stackEnd_ - stackTop_)");
}

void sub_10005E788()
{
}

void sub_10005E7B0()
{
}

void sub_10005E7D8()
{
}

void sub_10005E800(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_10005E824()
{
}

void sub_10005E84C()
{
  __assert_rtn("Encode", "encodings.h", 115, "codepoint <= 0x10FFFF");
}

void sub_10005E874()
{
  __assert_rtn("GenericStringRef", "document.h", 322, "str != 0 || len == 0u");
}

void sub_10005E89C()
{
  __assert_rtn("Top", "stack.h", 146, "GetSize() >= sizeof(T)");
}

void sub_10005E8C4()
{
  __assert_rtn("Accept", "document.h", 1892, "GetType() == kNumberType");
}

void sub_10005E8EC()
{
}

void sub_10005E914()
{
}

void sub_10005E93C()
{
}

void sub_10005E964()
{
}

void sub_10005E98C()
{
}

void sub_10005E9B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100007C74("EndObject", "prettywriter.h", a3, "Base::level_stack_.GetSize() >= sizeof(typename Base::Level)");
}

void sub_10005E9D8()
{
  __assert_rtn( "EndObject",  "prettywriter.h",  141,  "0 == Base::level_stack_.template Top<typename Base::Level>()->valueCount % 2");
}

void sub_10005EA00()
{
}

void sub_10005EA28()
{
}

void sub_10005EA50()
{
}

void sub_10005EA78()
{
}

void sub_10005EAA0()
{
  __assert_rtn("NotNullStrLen", "document.h", 334, "str != 0");
}

void sub_10005EAC8()
{
}

void sub_10005EAF0()
{
}

void sub_10005EB18()
{
}

void sub_10005EB40()
{
}

void sub_10005EB68()
{
}

void sub_10005EB90()
{
}

void sub_10005EBB8()
{
}

void sub_10005EBE0()
{
}

void sub_10005EC08()
{
  __assert_rtn("EndArray", "prettywriter.h", 165, "Base::level_stack_.GetSize() >= sizeof(typename Base::Level)");
}

void sub_10005EC30()
{
}

void sub_10005EC58()
{
  __assert_rtn("String", "prettywriter.h", 111, "str != 0");
}

void sub_10005EC80()
{
  __assert_rtn("i32toa", "itoa.h", 116, "buffer != 0");
}

void sub_10005ECA8()
{
  __assert_rtn("i64toa", "itoa.h", 295, "buffer != 0");
}

void sub_10005ECD0()
{
}

void sub_10005ECF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100014334("Top", "stack.h", a3, "GetSize() >= sizeof(T)");
}

void sub_10005ED1C()
{
  __assert_rtn("PrettyPrefix", "prettywriter.h", 243, "type == kStringType");
}

void sub_10005ED44(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_10005ED68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100014324( "PushUnsafe",  "stack.h",  a3,  "static_cast<std::ptrdiff_t>(sizeof(T) * count) <= (stackEnd_ - stackTop_)");
}

void sub_10005ED8C()
{
  __assert_rtn("dtoa", "dtoa.h", 217, "maxDecimalPlaces >= 1");
}

void sub_10005EDB4()
{
}

void sub_10005EDDC()
{
  __assert_rtn("Normalize", "diyfp.h", 103, "f != 0");
}

void sub_10005EE04()
{
  __assert_rtn("u32toa", "itoa.h", 40, "buffer != 0");
}

void sub_10005EE2C()
{
  __assert_rtn("u64toa", "itoa.h", 127, "buffer != 0");
}

void sub_10005EE5C(uint64_t a1, void **a2)
{
}

void operator delete[](void *__p)
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void *__cdecl operator new[](size_t __sz)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

id objc_msgSend_stringWithUTF8String_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringWithUTF8String:");
}