int main(int argc, const char **argv, const char **envp)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  unint64_t v23;
  v3 = sub_10000264C(&qword_100084040);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  register_for_dlsym_callbacks(v4);
  _CFPrefsSetDirectModeEnabled(1LL);
  _CFPrefsSetReadOnly(1LL);
  type metadata accessor for BlastDoorServer(0LL);
  qword_100085360 = static BlastDoorServer.service.getter();
  qword_100085368 = (uint64_t)&_swiftEmptyArrayStorage;
  BlastDoorServer.setImageRestrictions(allowedImageFormats:increasedRestrictions:)( (Swift::OpaquePointer)&_swiftEmptyArrayStorage,  1);
  qword_100085370 = (uint64_t)&_swiftEmptyArrayStorage;
  BlastDoorServer.setVideoRestrictions(codecs:)((Swift::OpaquePointer)&_swiftEmptyArrayStorage);
  v7 = type metadata accessor for APSUserPayload(0LL);
  v8 = sub_10000268C();
  BlastDoorServer.register<A, B>(unpacker:for:)(v8, v7, &type metadata for IDSMadridPayloadUnpacker, v7, v8);
  v9 = type metadata accessor for IDSCommandResponse(0LL);
  v10 = sub_1000026D0();
  BlastDoorServer.register<A, B>(unpacker:for:)(v10, v9, &type metadata for IDSCommandResponseUnpacker, v9, v10);
  v11 = type metadata accessor for IDSCommandWebTunnelResponse(0LL);
  v12 = sub_100002714();
  BlastDoorServer.register<A, B>(unpacker:for:)( v12,  v11,  &type metadata for IDSCommandWebTunnelResponseUnpacker,  v11,  v12);
  v13 = type metadata accessor for IDSInvitation(0LL);
  v14 = sub_100002758();
  BlastDoorServer.register<A, B>(unpacker:for:)(v14, v13, &type metadata for IDSInvitationUnpacker, v13, v14);
  v15 = sub_10005A88C();
  v23 = v15;
  v16 = type metadata accessor for IDSClientMessageResult(0LL);
  v17 = sub_1000027A4();
  BlastDoorServer.register<A, B>(unpacker:for:)(&v23, v16, &type metadata for IDSClientMessageUnpacker, v16, v17);
  swift_bridgeObjectRelease(v15);
  v18 = enum case for SandboxID.blastdoor(_:);
  v19 = type metadata accessor for SandboxID(0LL);
  v20 = *(void *)(v19 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 104))(v6, v18, v19);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v6, 0LL, 1LL, v19);
  dispatch thunk of BlastDoorServer.resume(sandboxID:)(v6);
  sub_1000027E8((uint64_t)v6);
  return 0;
}

uint64_t sub_10000264C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

unint64_t sub_10000268C()
{
  unint64_t result = qword_100084048;
  if (!qword_100084048)
  {
    unint64_t result = swift_getWitnessTable(&unk_10007323C, &type metadata for IDSMadridPayloadUnpacker);
    atomic_store(result, (unint64_t *)&qword_100084048);
  }

  return result;
}

unint64_t sub_1000026D0()
{
  unint64_t result = qword_100084050;
  if (!qword_100084050)
  {
    unint64_t result = swift_getWitnessTable(&unk_10007245C, &type metadata for IDSCommandResponseUnpacker);
    atomic_store(result, (unint64_t *)&qword_100084050);
  }

  return result;
}

unint64_t sub_100002714()
{
  unint64_t result = qword_100084058;
  if (!qword_100084058)
  {
    unint64_t result = swift_getWitnessTable(&unk_100072144, &type metadata for IDSCommandWebTunnelResponseUnpacker);
    atomic_store(result, (unint64_t *)&qword_100084058);
  }

  return result;
}

unint64_t sub_100002758()
{
  unint64_t result = qword_100084060;
  if (!qword_100084060)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000721A8, &type metadata for IDSInvitationUnpacker);
    atomic_store(result, (unint64_t *)&qword_100084060);
  }

  return result;
}

uint64_t variable initialization expression of IDSMadridProtocolPayload.isUPlusOneKey()
{
  return 2LL;
}

unint64_t sub_1000027A4()
{
  unint64_t result = qword_100084068;
  if (!qword_100084068)
  {
    unint64_t result = swift_getWitnessTable(&unk_100071FFC, &type metadata for IDSClientMessageUnpacker);
    atomic_store(result, (unint64_t *)&qword_100084068);
  }

  return result;
}

uint64_t sub_1000027E8(uint64_t a1)
{
  uint64_t v2 = sub_10000264C(&qword_100084040);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void sub_100002828(char *a1)
{
}

void sub_100002834()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v2, 0LL);
  __asm { BR              X9 }
}

Swift::Int sub_100002874()
{
  return Hasher._finalize()();
}

void sub_1000028B8()
{
  __asm { BR              X10 }

uint64_t sub_1000028E8(uint64_t a1)
{
  return ((uint64_t (*)(uint64_t))swift_bridgeObjectRelease)(v1);
}

void sub_100002918(uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }

Swift::Int sub_100002954()
{
  return Hasher._finalize()();
}

unint64_t sub_100002998@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1000037F0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000029C4()
{
  return ((uint64_t (*)(void))((char *)sub_1000029E8 + 4 * byte_10006E7EC[*v0]))();
}

void sub_1000029E8(void *a1@<X8>)
{
  *a1 = 115LL;
  a1[1] = v1;
}

void sub_1000029F4(void *a1@<X8>)
{
  *a1 = 112LL;
  a1[1] = v1;
}

void sub_100002A00(void *a1@<X8>)
{
  *a1 = 26994LL;
  a1[1] = 0xE200000000000000LL;
}

uint64_t sub_100002A10()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100002A34 + 4 * byte_10006E7F0[*v0]))( 118LL,  0xE100000000000000LL);
}

uint64_t sub_100002A34()
{
  return 115LL;
}

uint64_t sub_100002A3C()
{
  return 112LL;
}

uint64_t sub_100002A44()
{
  return 26994LL;
}

unint64_t sub_100002A50@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1000037F0(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100002A74()
{
  return 0LL;
}

void sub_100002A80(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_100002A8C(uint64_t a1)
{
  unint64_t v2 = sub_100002C9C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100002AB4(uint64_t a1)
{
  unint64_t v2 = sub_100002C9C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IDSSessionReinitiateSchema.encode(to:)(void *a1)
{
  v3 = v1;
  uint64_t v5 = sub_10000264C(&qword_100084070);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100002C78(a1, v9);
  unint64_t v11 = sub_100002C9C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for IDSSessionReinitiateSchema.CodingKeys,  &type metadata for IDSSessionReinitiateSchema.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  char v25 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, &v25, v5);
  if (!v2)
  {
    uint64_t v13 = v3[1];
    uint64_t v14 = v3[2];
    char v24 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v13, v14, &v24, v5);
    uint64_t v15 = v3[3];
    uint64_t v16 = v3[4];
    char v23 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v15, v16, &v23, v5);
    v17 = (char *)v3 + *(int *)(type metadata accessor for IDSSessionReinitiateSchema(0LL) + 28);
    char v22 = 3;
    uint64_t v18 = type metadata accessor for IDSSessionReinitiate.IDSSessionReinitiateSubcommand(0LL);
    uint64_t v19 = sub_100002FF4( &qword_100084080,  (uint64_t)&protocol conformance descriptor for IDSSessionReinitiate.IDSSessionReinitiateSubcommand);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v17, &v22, v5, v18, v19);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void *sub_100002C78(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) + 16LL) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80LL)));
  return result;
}

unint64_t sub_100002C9C()
{
  unint64_t result = qword_100084078;
  if (!qword_100084078)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006E9A4, &type metadata for IDSSessionReinitiateSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084078);
  }

  return result;
}

uint64_t type metadata accessor for IDSSessionReinitiateSchema(uint64_t a1)
{
  uint64_t result = qword_1000840F0;
  if (!qword_1000840F0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for IDSSessionReinitiateSchema);
  }
  return result;
}

uint64_t IDSSessionReinitiateSchema.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v25 = a2;
  uint64_t v27 = type metadata accessor for IDSSessionReinitiate.IDSSessionReinitiateSubcommand(0LL);
  uint64_t v24 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  v26 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = sub_10000264C(&qword_100084088);
  uint64_t v4 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for IDSSessionReinitiateSchema(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (uint64_t *)((char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v11 = a1[3];
  uint64_t v10 = a1[4];
  sub_100002C78(a1, v11);
  unint64_t v12 = sub_100002C9C();
  uint64_t v13 = v6;
  uint64_t v14 = v29;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for IDSSessionReinitiateSchema.CodingKeys,  &type metadata for IDSSessionReinitiateSchema.CodingKeys,  v12,  v11,  v10);
  if (v14) {
    return sub_100002FD4(a1);
  }
  uint64_t v29 = v7;
  uint64_t v15 = v27;
  uint64_t v16 = v28;
  char v33 = 0;
  v17 = v13;
  uint64_t v18 = (uint64_t)v9;
  *uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)(&v33, v28);
  char v32 = 1;
  v9[1] = KeyedDecodingContainer.decode(_:forKey:)(&v32, v16);
  v9[2] = v19;
  char v31 = 2;
  v9[3] = KeyedDecodingContainer.decode(_:forKey:)(&v31, v16);
  v9[4] = v20;
  char v30 = 3;
  uint64_t v21 = sub_100002FF4( &qword_100084090,  (uint64_t)&protocol conformance descriptor for IDSSessionReinitiate.IDSSessionReinitiateSubcommand);
  char v22 = v26;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v15, &v30, v16, v15, v21);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v17, v16);
  (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v18 + *(int *)(v29 + 28), v22, v15);
  sub_100003034(v18, v25);
  sub_100002FD4(a1);
  return sub_100003078(v18);
}

uint64_t sub_100002FD4(void *a1)
{
  uint64_t v1 = *(void *)(a1[3] - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release(*a1);
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_100002FF4(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for IDSSessionReinitiate.IDSSessionReinitiateSubcommand(255LL);
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_100003034(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for IDSSessionReinitiateSchema(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100003078(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for IDSSessionReinitiateSchema(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1000030B4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return IDSSessionReinitiateSchema.init(from:)(a1, a2);
}

uint64_t sub_1000030C8(void *a1)
{
  return IDSSessionReinitiateSchema.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for IDSSessionReinitiateSchema( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    uint64_t *v3 = *a2;
    uint64_t v3 = (uint64_t *)(v13 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain();
  }

  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v6 = a2[2];
    uint64_t v5 = a2[3];
    a1[2] = v6;
    a1[3] = v5;
    uint64_t v7 = a2[4];
    a1[4] = v7;
    uint64_t v8 = *(int *)(a3 + 28);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for IDSSessionReinitiate.IDSSessionReinitiateSubcommand(0LL);
    unint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11);
  }

  return v3;
}

uint64_t destroy for IDSSessionReinitiateSchema(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for IDSSessionReinitiate.IDSSessionReinitiateSubcommand(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t initializeWithCopy for IDSSessionReinitiateSchema(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v4;
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 32) = v6;
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for IDSSessionReinitiate.IDSSessionReinitiateSubcommand(0LL);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  return a1;
}

void *assignWithCopy for IDSSessionReinitiateSchema(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[3] = a2[3];
  uint64_t v8 = a2[4];
  uint64_t v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(int *)(a3 + 28);
  uint64_t v11 = (char *)a1 + v10;
  unint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for IDSSessionReinitiate.IDSSessionReinitiateSubcommand(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24LL))(v11, v12, v13);
  return a1;
}

uint64_t initializeWithTake for IDSSessionReinitiateSchema(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for IDSSessionReinitiate.IDSSessionReinitiateSubcommand(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for IDSSessionReinitiateSchema(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v7;
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = *(int *)(a3 + 28);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for IDSSessionReinitiate.IDSSessionReinitiateSubcommand(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 40LL))(v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for IDSSessionReinitiateSchema(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100003418);
}

uint64_t sub_100003418(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for IDSSessionReinitiate.IDSSessionReinitiateSubcommand(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 28),  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for IDSSessionReinitiateSchema( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000034A0);
}

uint64_t sub_1000034A0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for IDSSessionReinitiate.IDSSessionReinitiateSubcommand(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 28),  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_100003514(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = &unk_10006E890;
  v4[2] = &unk_10006E890;
  uint64_t result = type metadata accessor for IDSSessionReinitiate.IDSSessionReinitiateSubcommand(319LL);
  if (v3 <= 0x3F)
  {
    v4[3] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 4LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

_BYTE *initializeBufferWithCopyOfBuffer for IDSSessionReinitiateSchema.CodingKeys(_BYTE *result, _BYTE *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for IDSSessionReinitiateSchema.CodingKeys( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x99;
  int v8 = v6 - 153;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xD;
  int v8 = v6 - 13;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x9C;
  int v8 = v6 - 156;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x11;
  int v8 = v6 - 17;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x12;
  int v8 = v6 - 18;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for IDSSessionReinitiateSchema.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_100003684 + 4 * byte_10006E7F9[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000036B8 + 4 * byte_10006E7F4[v4]))();
}

uint64_t sub_1000036B8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000036C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000036C8LL);
  }
  return result;
}

uint64_t sub_1000036D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000036DCLL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_1000036E0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000036E8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000036F4(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_100003700(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for IDSSessionReinitiateSchema.CodingKeys()
{
  return &type metadata for IDSSessionReinitiateSchema.CodingKeys;
}

unint64_t sub_10000371C()
{
  unint64_t result = qword_100084130;
  if (!qword_100084130)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006E97C, &type metadata for IDSSessionReinitiateSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084130);
  }

  return result;
}

unint64_t sub_100003764()
{
  unint64_t result = qword_100084138;
  if (!qword_100084138)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006E8B4, &type metadata for IDSSessionReinitiateSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084138);
  }

  return result;
}

unint64_t sub_1000037AC()
{
  unint64_t result = qword_100084140;
  if (!qword_100084140)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006E8DC, &type metadata for IDSSessionReinitiateSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084140);
  }

  return result;
}

unint64_t sub_1000037F0(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10007CB00, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4) {
    return 4LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_100003838(char *a1, char *a2)
{
  return sub_10006095C(*a1, *a2);
}

Swift::Int sub_100003844()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  String.hash(into:)(v3, qword_10006EBC8[v1], 0xE100000000000000LL);
  swift_bridgeObjectRelease(0xE100000000000000LL);
  return Hasher._finalize()();
}

uint64_t sub_10000389C(uint64_t a1)
{
  return swift_bridgeObjectRelease(0xE100000000000000LL);
}

Swift::Int sub_1000038C8(uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  String.hash(into:)(v4, qword_10006EBC8[v2], 0xE100000000000000LL);
  swift_bridgeObjectRelease(0xE100000000000000LL);
  return Hasher._finalize()();
}

unint64_t sub_10000391C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_100003CD8(*a1);
  *a2 = result;
  return result;
}

void sub_100003948(void *a1@<X8>)
{
  *a1 = qword_10006EBC8[*v1];
  a1[1] = 0xE100000000000000LL;
}

uint64_t sub_100003964()
{
  return qword_10006EBC8[*v0];
}

unint64_t sub_10000397C@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_100003CD8(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000039A0(uint64_t a1)
{
  unint64_t v2 = sub_100003B7C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000039C8(uint64_t a1)
{
  unint64_t v2 = sub_100003B7C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IDSSessionDeclineSchema.encode(to:)(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = sub_10000264C(&qword_100084148);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100002C78(a1, v9);
  unint64_t v11 = sub_100003B7C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for IDSSessionDeclineSchema.CodingKeys,  &type metadata for IDSSessionDeclineSchema.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  v21[0] = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v21, v5);
  if (!v2)
  {
    uint64_t v13 = v3[1];
    uint64_t v14 = v3[2];
    v21[0] = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v13, v14, v21, v5);
    uint64_t v15 = v3[3];
    uint64_t v16 = v3[4];
    v21[0] = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v15, v16, v21, v5);
    sub_100003BC0((uint64_t)(v3 + 5), (uint64_t)v22);
    sub_100003BC0((uint64_t)v22, (uint64_t)v21);
    char v20 = 3;
    unint64_t v17 = sub_100003C08();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v21, &v20, v5, &type metadata for Data, v17);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_100003B7C()
{
  unint64_t result = qword_100084150;
  if (!qword_100084150)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006EB74, &type metadata for IDSSessionDeclineSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084150);
  }

  return result;
}

uint64_t sub_100003BC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000264C(&qword_100084158);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_100003C08()
{
  unint64_t result = qword_100084160;
  if (!qword_100084160)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_100084160);
  }

  return result;
}

double IDSSessionDeclineSchema.init(from:)@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    double result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(void *)(a2 + 48) = v8;
  }

  return result;
}

uint64_t sub_100003C98(void *a1)
{
  return IDSSessionDeclineSchema.encode(to:)(a1);
}

unint64_t sub_100003CD8(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10007CB80, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4) {
    return 4LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_100003D20@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_10000264C(&qword_100084180);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100002C78(a1, v9);
  unint64_t v11 = sub_100003B7C();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for IDSSessionDeclineSchema.CodingKeys,  &type metadata for IDSSessionDeclineSchema.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return sub_100002FD4(a1);
  }
  LOBYTE(v30[0]) = 0;
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)(v30, v5);
  LOBYTE(v30[0]) = 1;
  uint64_t v13 = KeyedDecodingContainer.decode(_:forKey:)(v30, v5);
  uint64_t v15 = v14;
  uint64_t v29 = v13;
  LOBYTE(v30[0]) = 2;
  swift_bridgeObjectRetain(v14);
  uint64_t v16 = KeyedDecodingContainer.decode(_:forKey:)(v30, v5);
  uint64_t v18 = v17;
  uint64_t v27 = v16;
  char v31 = 3;
  unint64_t v19 = sub_100004570();
  uint64_t v28 = v18;
  swift_bridgeObjectRetain(v18);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( v30,  &type metadata for Data,  &v31,  v5,  &type metadata for Data,  v19);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v20 = v30[0];
  unint64_t v21 = v30[1];
  swift_bridgeObjectRetain(v15);
  uint64_t v22 = v28;
  swift_bridgeObjectRetain(v28);
  sub_1000045B4(v20, v21);
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(v22);
  sub_100002FD4(a1);
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(v15);
  uint64_t result = sub_1000045C8(v20, v21);
  uint64_t v24 = v29;
  *a2 = v12;
  a2[1] = v24;
  uint64_t v25 = v27;
  a2[2] = v15;
  a2[3] = v25;
  a2[4] = v22;
  a2[5] = v20;
  a2[6] = v21;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for IDSSessionDeclineSchema(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t sub_100003FF0(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain(result);
  }

  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t destroy for IDSSessionDeclineSchema(void *a1)
{
  uint64_t result = swift_bridgeObjectRelease(a1[4]);
  unint64_t v3 = a1[6];
  if (v3 >> 60 != 15) {
    return sub_100004080(a1[5], v3);
  }
  return result;
}

uint64_t sub_100004080(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release(result);
  }

  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t initializeWithCopy for IDSSessionDeclineSchema(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 32) = v5;
  uint64_t v6 = (uint64_t *)(a2 + 40);
  unint64_t v7 = *(void *)(a2 + 48);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  if (v7 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 40) = *(_OWORD *)v6;
  }

  else
  {
    uint64_t v8 = *v6;
    sub_100003FF0(*v6, v7);
    *(void *)(a1 + 40) = v8;
    *(void *)(a1 + 48) = v7;
  }

  return a1;
}

void *assignWithCopy for IDSSessionDeclineSchema(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v4 = a2[2];
  uint64_t v5 = a1[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[3] = a2[3];
  uint64_t v6 = a2[4];
  uint64_t v7 = a1[4];
  a1[4] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2 + 5;
  unint64_t v9 = a2[6];
  if (a1[6] >> 60 != 15LL)
  {
    if (v9 >> 60 != 15)
    {
      uint64_t v11 = *v8;
      sub_100003FF0(*v8, v9);
      uint64_t v12 = a1[5];
      unint64_t v13 = a1[6];
      a1[5] = v11;
      a1[6] = v9;
      sub_100004080(v12, v13);
      return a1;
    }

    sub_100004238((uint64_t)(a1 + 5));
    goto LABEL_6;
  }

  if (v9 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 5) = *(_OWORD *)v8;
    return a1;
  }

  uint64_t v10 = *v8;
  sub_100003FF0(*v8, v9);
  a1[5] = v10;
  a1[6] = v9;
  return a1;
}

uint64_t sub_100004238(uint64_t a1)
{
  return a1;
}

__n128 initializeWithTake for IDSSessionDeclineSchema(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for IDSSessionDeclineSchema(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = *(void *)(a2 + 32);
  uint64_t v6 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = (void *)(a2 + 40);
  unint64_t v8 = *(void *)(a1 + 48);
  if (v8 >> 60 != 15)
  {
    unint64_t v9 = *(void *)(a2 + 48);
    if (v9 >> 60 != 15)
    {
      uint64_t v10 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = *v7;
      *(void *)(a1 + 48) = v9;
      sub_100004080(v10, v8);
      return a1;
    }

    sub_100004238(a1 + 40);
  }

  *(_OWORD *)(a1 + 40) = *(_OWORD *)v7;
  return a1;
}

uint64_t getEnumTagSinglePayload for IDSSessionDeclineSchema(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IDSSessionDeclineSchema(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 56) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for IDSSessionDeclineSchema()
{
  return &type metadata for IDSSessionDeclineSchema;
}

uint64_t storeEnumTagSinglePayload for IDSSessionDeclineSchema.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_100004418 + 4 * byte_10006EA05[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10000444C + 4 * byte_10006EA00[v4]))();
}

uint64_t sub_10000444C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100004454(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10000445CLL);
  }
  return result;
}

uint64_t sub_100004468(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100004470LL);
  }
  *(_BYTE *)__n128 result = a2 + 3;
  return result;
}

uint64_t sub_100004474(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000447C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IDSSessionDeclineSchema.CodingKeys()
{
  return &type metadata for IDSSessionDeclineSchema.CodingKeys;
}

unint64_t sub_10000449C()
{
  unint64_t result = qword_100084168;
  if (!qword_100084168)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006EB4C, &type metadata for IDSSessionDeclineSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084168);
  }

  return result;
}

unint64_t sub_1000044E4()
{
  unint64_t result = qword_100084170;
  if (!qword_100084170)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006EA84, &type metadata for IDSSessionDeclineSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084170);
  }

  return result;
}

unint64_t sub_10000452C()
{
  unint64_t result = qword_100084178;
  if (!qword_100084178)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006EAAC, &type metadata for IDSSessionDeclineSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084178);
  }

  return result;
}

unint64_t sub_100004570()
{
  unint64_t result = qword_100084188;
  if (!qword_100084188)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_100084188);
  }

  return result;
}

uint64_t sub_1000045B4(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_100003FF0(result, a2);
  }
  return result;
}

uint64_t sub_1000045C8(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_100004080(result, a2);
  }
  return result;
}

ValueMetadata *type metadata accessor for SafetyMonitorMessageUnpacker()
{
  return &type metadata for SafetyMonitorMessageUnpacker;
}

uint64_t sub_1000045EC()
{
  return sub_100004DB8( (unint64_t *)&qword_100084190,  (uint64_t (*)(uint64_t))&type metadata accessor for IDSClientMessageResult,  (uint64_t)&protocol conformance descriptor for IDSClientMessageResult);
}

uint64_t sub_100004618@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v102 = a1;
  uint64_t v103 = a2;
  uint64_t v98 = a3;
  uint64_t v97 = type metadata accessor for IDSClientMessageType(0LL);
  uint64_t v95 = *(void *)(v97 - 8);
  __chkstk_darwin(v97);
  v96 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_10000264C(&qword_1000841C0);
  __chkstk_darwin(v5);
  v99 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_10000264C(&qword_1000841C8);
  __chkstk_darwin(v7);
  v101 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_10000264C(&qword_1000841D0);
  __chkstk_darwin(v9);
  v100 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_10000264C(&qword_1000841D8);
  __chkstk_darwin(v11);
  unint64_t v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_10000264C(&qword_1000841E0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for SafetyMonitorMessage.SMMessageType(0LL);
  __chkstk_darwin(v17);
  unint64_t v19 = (char *)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for SafetyMonitorMessage(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  char v23 = (char *)&v51 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = type metadata accessor for PropertyListDecoder(0LL);
  swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
  uint64_t v25 = PropertyListDecoder.init()();
  unint64_t v26 = sub_100004DF8();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)( v104,  &type metadata for SafetyMonitorSchema,  v102,  v103,  &type metadata for SafetyMonitorSchema,  v26);
  if (v3) {
    return swift_release(v25);
  }
  v102 = v16;
  uint64_t v103 = v25;
  v93 = v13;
  v94 = v23;
  uint64_t v91 = v21;
  uint64_t v92 = v20;
  memcpy(v105, v104, 0x970uLL);
  v77 = sub_1000056B4(v105);
  v90 = v19;
  SafetyMonitorMessage.SMMessageType.init(defaultingRawValue:)(v105[0]);
  double v28 = *(double *)&v105[2];
  uint64_t v88 = v105[3];
  uint64_t v89 = v105[1];
  uint64_t v29 = v105[6];
  uint64_t v82 = v105[6];
  uint64_t v83 = v105[4];
  uint64_t v86 = v105[7];
  uint64_t v87 = v105[5];
  uint64_t v30 = v105[8];
  uint64_t v31 = v105[10];
  uint64_t v84 = v105[11];
  uint64_t v85 = v105[9];
  uint64_t v32 = v105[12];
  uint64_t v80 = v105[8];
  uint64_t v81 = v105[13];
  uint64_t v33 = v105[14];
  uint64_t v75 = v105[14];
  uint64_t v76 = v105[12];
  uint64_t v78 = v105[10];
  uint64_t v79 = v105[15];
  uint64_t v34 = v105[16];
  uint64_t v73 = v105[17];
  uint64_t v74 = v105[16];
  uint64_t v35 = LOBYTE(v105[18]);
  swift_bridgeObjectRetain(v105[4]);
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRetain(v34);
  SafetyMonitorMessage.SMsessionType.init(defaultingRawValue:)(v73, v35);
  uint64_t v73 = v105[19];
  int v72 = LOBYTE(v105[20]);
  uint64_t v71 = v105[21];
  int v70 = LOBYTE(v105[22]);
  v36 = v93;
  SafetyMonitorMessage.SMSessionDestinationType.init(defaultingRawValue:)(v105[23], LOBYTE(v105[24]));
  uint64_t v68 = v105[26];
  uint64_t v69 = v105[25];
  uint64_t v37 = v105[27];
  uint64_t v38 = LOBYTE(v105[28]);
  swift_bridgeObjectRetain(v105[26]);
  v39 = v100;
  SafetyMonitorMessage.SMDeviceConfigurationLowPowerModeWarningState.init(defaultingRawValue:)(v37, v38);
  uint64_t v67 = v105[29];
  int v66 = LOBYTE(v105[30]);
  int v64 = LOBYTE(v105[32]);
  uint64_t v65 = v105[31];
  uint64_t v63 = v105[33];
  int v62 = LOBYTE(v105[34]);
  int v60 = LOBYTE(v105[36]);
  uint64_t v61 = v105[35];
  uint64_t v59 = v105[37];
  int v58 = LOBYTE(v105[38]);
  int v56 = LOBYTE(v105[40]);
  uint64_t v57 = v105[39];
  uint64_t v55 = v105[41];
  int v54 = LOBYTE(v105[42]);
  v40 = v101;
  SafetyMonitorMessage.CLClientLocationReferenceFrame.init(defaultingRawValue:)(v105[43], LOBYTE(v105[44]));
  int v52 = LOBYTE(v105[46]);
  uint64_t v53 = v105[45];
  v41 = v99;
  SafetyMonitorMessage.SMTriggerCategory.init(defaultingRawValue:)(v105[47], LOBYTE(v105[48]));
  uint64_t v51 = v105[49];
  uint64_t v42 = v105[50];
  uint64_t v43 = v105[51];
  uint64_t v44 = v105[52];
  char v45 = v105[53];
  swift_bridgeObjectRetain(v105[50]);
  swift_bridgeObjectRetain(v44);
  v50 = v40;
  v46 = v94;
  SafetyMonitorMessage.init(with:interfaceVersion:sendDate:messageID:sessionID:summaryText:receiverHandle:sharingInvitationData:shareURL:participantID:sessionType:estimatedEndTime:coarseEstimatedEndTime:sessionDestinationType:sessionDestinationMapItem:lowPowerModeWarningState:triggerTime:latitude:longitude:hunc:altitude:vunc:timeOfLocation:referenceFrame:speed:triggerType:safetyCacheKey:safetyCacheToken:isSOSTrigger:groupFields:)( v90,  v89,  v88,  v83,  v87,  v82,  v86,  v80,  v28,  v85,  v78,  v84,  v76,  v81,  v75,  v79,  v74,  v102,  v73,  (_BYTE)v72,  v71,  (_BYTE)v70,  v36,  v69,  v68,  v39,  v67,  (_BYTE)v66,  v65,  (_BYTE)v64,  v63,  (_BYTE)v62,  v61,  (_BYTE)v60,  v59,  (_BYTE)v58,  v57,  (_BYTE)v56,  v55,  (_BYTE)v54,  v50,  v53,  (_BYTE)v52,  v41,  v51,  v42,  v43,  v44,  v45,
    v77);
  sub_100005EA0(v105);
  uint64_t v48 = v91;
  uint64_t v47 = v92;
  v49 = v96;
  (*(void (**)(char *, char *, uint64_t))(v91 + 16))(v96, v46, v92);
  (*(void (**)(char *, void, uint64_t))(v95 + 104))( v49,  enum case for IDSClientMessageType.safetyMonitorMessage(_:),  v97);
  IDSClientMessageResult.init(result:)(v49);
  swift_release(v103);
  return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v46, v47);
}

uint64_t sub_100004CB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100004E58(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))sub_100004618);
}

unint64_t sub_100004CD0(uint64_t a1)
{
  unint64_t result = sub_100004CF4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100004CF4()
{
  unint64_t result = qword_100084198;
  if (!qword_100084198)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006EC20, &type metadata for SafetyMonitorMessageUnpacker);
    atomic_store(result, (unint64_t *)&qword_100084198);
  }

  return result;
}

unint64_t sub_100004D38()
{
  unint64_t result = qword_1000841A0;
  if (!qword_1000841A0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___OS_os_log);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000841A0);
  }

  return result;
}

unint64_t sub_100004D74()
{
  unint64_t result = qword_1000841B0;
  if (!qword_1000841B0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1000841B0);
  }

  return result;
}

uint64_t sub_100004DB8(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = a2(255LL);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_100004DF8()
{
  unint64_t result = qword_1000841E8;
  if (!qword_1000841E8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SafetyMonitorSchema,  &type metadata for SafetyMonitorSchema);
    atomic_store(result, (unint64_t *)&qword_1000841E8);
  }

  return result;
}

uint64_t sub_100004E3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100004E58(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))sub_10005F910);
}

uint64_t sub_100004E58( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v8 = type metadata accessor for Explosion(0LL);
  uint64_t v31 = *(void *)(v8 - 8);
  uint64_t v32 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = IDSClientMessageContext.command.getter(v9);
  uint64_t v13 = CommandType.init(rawValue:)(v12);
  if ((v14 & 1) == 0) {
    return a5(a1, a2);
  }
  uint64_t v16 = static os_log_type_t.error.getter(v13);
  sub_100004D38();
  uint64_t v17 = (void *)static OS_os_log.blastDoor.getter();
  uint64_t v18 = sub_10000264C(&qword_1000841A8);
  uint64_t v19 = swift_allocObject(v18, 72LL, 7LL);
  *(_OWORD *)(v19 + 16) = xmmword_10006EBF0;
  uint64_t v33 = IDSClientMessageContext.command.getter(v19);
  LOBYTE(v34) = 0;
  uint64_t v20 = >> prefix<A>(_:)(&v33, &type metadata for UInt);
  uint64_t v22 = v21;
  *(void *)(v19 + 56) = &type metadata for String;
  *(void *)(v19 + 64) = sub_100004D74();
  *(void *)(v19 + 32) = v20;
  *(void *)(v19 + 40) = v22;
  os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, v17, "Invalid command ID %@", 21LL, 2LL, v19);

  swift_bridgeObjectRelease(v19);
  uint64_t v33 = 0LL;
  unint64_t v34 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(21LL);
  uint64_t v23 = swift_bridgeObjectRelease(v34);
  uint64_t v33 = 0xD000000000000013LL;
  unint64_t v34 = 0x800000010006D7B0LL;
  uint64_t v35 = IDSClientMessageContext.command.getter(v23);
  v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
  object = v24._object;
  String.append(_:)(v24);
  swift_bridgeObjectRelease(object);
  Explosion.init(domain:errorType:keyPath:)(0xD000000000000026LL, 0x800000010006D780LL, v33, v34, 0LL, 0LL);
  uint64_t v26 = sub_100004DB8( &qword_1000841B8,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
  uint64_t v27 = v32;
  swift_allocError(v32, v26, 0LL, 0LL);
  uint64_t v28 = v31;
  uint64_t v30 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v31 + 16))(v29, v11, v27);
  swift_willThrow(v30);
  return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v11, v27);
}

uint64_t sub_1000050D8@<X0>(uint64_t a1@<X8>)
{
  v37[1] = a1;
  uint64_t v1 = type metadata accessor for Explosion(0LL);
  uint64_t v39 = *(void *)(v1 - 8);
  uint64_t v40 = v1;
  __chkstk_darwin(v1);
  uint64_t v38 = (char *)v37 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for ClientMessageType(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for IDSClientMessageType(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = IDSClientMessageContext.command.getter(v9);
  uint64_t v13 = CommandType.init(rawValue:)(v12);
  if ((v14 & 1) != 0)
  {
    uint64_t v18 = static os_log_type_t.error.getter(v13);
    sub_100004D38();
    uint64_t v19 = (void *)static OS_os_log.blastDoor.getter();
    uint64_t v20 = sub_10000264C(&qword_1000841A8);
    uint64_t v21 = swift_allocObject(v20, 72LL, 7LL);
    *(_OWORD *)(v21 + 16) = xmmword_10006EBF0;
    uint64_t v41 = IDSClientMessageContext.command.getter(v21);
    LOBYTE(v42) = 0;
    uint64_t v22 = >> prefix<A>(_:)(&v41, &type metadata for UInt);
    uint64_t v24 = v23;
    *(void *)(v21 + 56) = &type metadata for String;
    *(void *)(v21 + 64) = sub_100004D74();
    *(void *)(v21 + 32) = v22;
    *(void *)(v21 + 40) = v24;
    os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, v19, "Invalid command ID %@", 21LL, 2LL, v21);

    swift_bridgeObjectRelease(v21);
    uint64_t v41 = 0LL;
    unint64_t v42 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(21LL);
    uint64_t v25 = swift_bridgeObjectRelease(v42);
    uint64_t v41 = 0xD000000000000013LL;
    unint64_t v42 = 0x800000010006D7B0LL;
    uint64_t v43 = IDSClientMessageContext.command.getter(v25);
    v26._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
    object = v26._object;
    String.append(_:)(v26);
    swift_bridgeObjectRelease(object);
    uint64_t v28 = v38;
    Explosion.init(domain:errorType:keyPath:)(0xD000000000000026LL, 0x800000010006D780LL, v41, v42, 0LL, 0LL);
    uint64_t v29 = sub_100004DB8( &qword_1000841B8,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
    uint64_t v30 = v40;
    swift_allocError(v40, v29, 0LL, 0LL);
    uint64_t v31 = v39;
    uint64_t v33 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v39 + 16))(v32, v28, v30);
    swift_willThrow(v33);
    return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v28, v30);
  }

  else
  {
    uint64_t v15 = v13;
    uint64_t v16 = v37[2];
    if (v13 == 245)
    {
      (*(void (**)(char *, void, uint64_t))(v4 + 104))( v6,  enum case for ClientMessageType.restricted(_:),  v3);
      uint64_t result = IDSRestrictedMessage.init(with:)(v6);
      if (!v16)
      {
        (*(void (**)(char *, void, uint64_t))(v8 + 104))( v11,  enum case for IDSClientMessageType.messageTypeRestricted(_:),  v7);
        return IDSClientMessageResult.init(result:)(v11);
      }
    }

    else
    {
      unint64_t v34 = sub_1000097C0();
      uint64_t v35 = swift_allocError(&type metadata for IDSClientMessageUnpackingError, v34, 0LL, 0LL);
      *(void *)uint64_t v36 = v15;
      *(void *)(v36 + 8) = 0LL;
      *(_BYTE *)(v36 + 16) = 0;
      return swift_willThrow(v35);
    }
  }

  return result;
}

uint64_t sub_100005440@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Explosion(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = IDSClientMessageContext.command.getter(v8);
  uint64_t v12 = CommandType.init(rawValue:)(v11);
  if ((v13 & 1) == 0) {
    return sub_10005ACEC(a1, a2, v12, a3);
  }
  uint64_t v15 = static os_log_type_t.error.getter(v12);
  sub_100004D38();
  uint64_t v16 = (void *)static OS_os_log.blastDoor.getter();
  uint64_t v17 = sub_10000264C(&qword_1000841A8);
  uint64_t v18 = swift_allocObject(v17, 72LL, 7LL);
  *(_OWORD *)(v18 + 16) = xmmword_10006EBF0;
  uint64_t v29 = IDSClientMessageContext.command.getter(v18);
  LOBYTE(v30) = 0;
  uint64_t v19 = >> prefix<A>(_:)(&v29, &type metadata for UInt);
  uint64_t v20 = v7;
  uint64_t v22 = v21;
  *(void *)(v18 + 56) = &type metadata for String;
  *(void *)(v18 + 64) = sub_100004D74();
  *(void *)(v18 + 32) = v19;
  *(void *)(v18 + 40) = v22;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "Invalid command ID %@", 21LL, 2LL, v18);

  swift_bridgeObjectRelease(v18);
  uint64_t v29 = 0LL;
  unint64_t v30 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(21LL);
  uint64_t v23 = swift_bridgeObjectRelease(v30);
  uint64_t v29 = 0xD000000000000013LL;
  unint64_t v30 = 0x800000010006D7B0LL;
  uint64_t v31 = IDSClientMessageContext.command.getter(v23);
  v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
  object = v24._object;
  String.append(_:)(v24);
  swift_bridgeObjectRelease(object);
  Explosion.init(domain:errorType:keyPath:)(0xD000000000000026LL, 0x800000010006D780LL, v29, v30, 0LL, 0LL);
  uint64_t v26 = sub_100004DB8( &qword_1000841B8,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
  swift_allocError(v6, v26, 0LL, 0LL);
  uint64_t v28 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v20 + 16))(v27, v10, v6);
  swift_willThrow(v28);
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v10, v6);
}

char *sub_1000056B4(void *a1)
{
  uint64_t v3 = type metadata accessor for Mirror(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = swift_allocObject(&unk_10007FD08, 24LL, 7LL);
  *(void *)(v7 + 16) = &_swiftEmptyDictionarySingleton;
  uint64_t v8 = v7 + 16;
  v80[1] = &type metadata for SafetyMonitorSchema;
  uint64_t v78 = swift_allocObject(&unk_10007FD30, 2432LL, 7LL);
  memcpy((void *)(v78 + 16), a1, 0x970uLL);
  sub_100006AE4(a1);
  uint64_t v9 = Mirror.init(reflecting:)(&v78);
  uint64_t v10 = Mirror.children.getter(v9);
  uint64_t v11 = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  uint64_t v12 = dispatch thunk of _AnySequenceBox._makeIterator()(v11);
  swift_release(v10);
  uint64_t v13 = swift_retain(v12);
  uint64_t v82 = v12;
  dispatch thunk of _AnyIteratorBoxBase.next()(&v78, v13);
  if (v81)
  {
    uint64_t v68 = v80;
    int v66 = (char *)&type metadata for Any + 8;
    uint64_t v67 = (void *)0x800000010006C4E0LL;
    do
    {
      uint64_t v15 = v78;
      unint64_t v16 = v79;
      v76[0] = v78;
      v76[1] = v79;
      sub_10000969C(v68, v77);
      if (v16)
      {
        uint64_t v73 = v15;
        unint64_t v74 = v16;
        sub_1000096AC((uint64_t)v77, (uint64_t)v75);
        swift_bridgeObjectRetain_n(v16, 2LL);
        v17._countAndFlagsBits = 0x7265766965636572LL;
        v17._object = (void *)0xEE00656C646E6148LL;
        uint64_t v18 = (char *)String.hasPrefix(_:)(v17);
        swift_bridgeObjectRelease(v16);
        sub_100002FD4(v75);
        if ((v18 & 1) != 0)
        {
          uint64_t v73 = v15;
          unint64_t v74 = v16;
          sub_1000096AC((uint64_t)v77, (uint64_t)v75);
          swift_bridgeObjectRetain(v16);
          uint64_t v19 = sub_1000072B8(v15, v16, v7);
          if (v1) {
            goto LABEL_52;
          }
          uint64_t v20 = v19;
          swift_bridgeObjectRelease(v16);
          sub_100002FD4(v75);
          swift_beginAccess(v8, v72, 33LL, 0LL);
          uint64_t v21 = sub_100007C54(v71, v20);
          uint64_t v23 = v22;
          uint64_t v24 = type metadata accessor for SafetyMonitorGroupFields(0LL);
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 48LL))(v23, 1LL, v24))
          {
            uint64_t v73 = v15;
            unint64_t v74 = v16;
            sub_1000096AC((uint64_t)v77, (uint64_t)v75);
            int v25 = swift_dynamicCast(&v69, v75, v66, &type metadata for String, 6LL);
            BOOL v26 = v25 == 0;
            if (v25) {
              uint64_t v27 = v69;
            }
            else {
              uint64_t v27 = 0LL;
            }
            if (v26) {
              uint64_t v28 = 0LL;
            }
            else {
              uint64_t v28 = v70;
            }
            SafetyMonitorGroupFields.receiverHandle.setter(v27, v28);
          }

          ((void (*)(void *, void))v21)(v71, 0LL);
          swift_endAccess(v72);
        }

        uint64_t v73 = v15;
        unint64_t v74 = v16;
        sub_1000096AC((uint64_t)v77, (uint64_t)v75);
        swift_bridgeObjectRetain(v16);
        v29._countAndFlagsBits = 0xD000000000000015LL;
        v29._object = v67;
        uint64_t v18 = (char *)String.hasPrefix(_:)(v29);
        swift_bridgeObjectRelease(v16);
        sub_100002FD4(v75);
        if ((v18 & 1) != 0)
        {
          uint64_t v73 = v15;
          unint64_t v74 = v16;
          sub_1000096AC((uint64_t)v77, (uint64_t)v75);
          swift_bridgeObjectRetain(v16);
          uint64_t v30 = sub_1000072B8(v15, v16, v7);
          if (v1) {
            goto LABEL_52;
          }
          uint64_t v31 = v30;
          swift_bridgeObjectRelease(v16);
          sub_100002FD4(v75);
          swift_beginAccess(v8, v72, 33LL, 0LL);
          uint64_t v32 = sub_100007C54(v71, v31);
          uint64_t v34 = v33;
          uint64_t v35 = type metadata accessor for SafetyMonitorGroupFields(0LL);
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 48LL))(v34, 1LL, v35))
          {
            uint64_t v73 = v15;
            unint64_t v74 = v16;
            sub_1000096AC((uint64_t)v77, (uint64_t)v75);
            int v36 = swift_dynamicCast(&v69, v75, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
            BOOL v37 = v36 == 0;
            if (v36) {
              uint64_t v38 = v69;
            }
            else {
              uint64_t v38 = 0LL;
            }
            if (v37) {
              uint64_t v39 = 0LL;
            }
            else {
              uint64_t v39 = v70;
            }
            SafetyMonitorGroupFields.sharingInvitationData.setter(v38, v39);
          }

          ((void (*)(void *, void))v32)(v71, 0LL);
          swift_endAccess(v72);
        }

        uint64_t v73 = v15;
        unint64_t v74 = v16;
        sub_1000096AC((uint64_t)v77, (uint64_t)v75);
        swift_bridgeObjectRetain(v16);
        v40._countAndFlagsBits = 0x4C52556572616873LL;
        v40._object = (void *)0xE800000000000000LL;
        uint64_t v18 = (char *)String.hasPrefix(_:)(v40);
        swift_bridgeObjectRelease(v16);
        sub_100002FD4(v75);
        if ((v18 & 1) != 0)
        {
          uint64_t v73 = v15;
          unint64_t v74 = v16;
          sub_1000096AC((uint64_t)v77, (uint64_t)v75);
          swift_bridgeObjectRetain(v16);
          uint64_t v41 = sub_1000072B8(v15, v16, v7);
          if (v1) {
            goto LABEL_52;
          }
          uint64_t v42 = v41;
          swift_bridgeObjectRelease(v16);
          sub_100002FD4(v75);
          swift_beginAccess(v8, v72, 33LL, 0LL);
          uint64_t v43 = sub_100007C54(v71, v42);
          uint64_t v45 = v44;
          uint64_t v46 = type metadata accessor for SafetyMonitorGroupFields(0LL);
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 48LL))(v45, 1LL, v46))
          {
            uint64_t v73 = v15;
            unint64_t v74 = v16;
            sub_1000096AC((uint64_t)v77, (uint64_t)v75);
            int v47 = swift_dynamicCast(&v69, v75, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
            BOOL v48 = v47 == 0;
            if (v47) {
              uint64_t v49 = v69;
            }
            else {
              uint64_t v49 = 0LL;
            }
            if (v48) {
              uint64_t v50 = 0LL;
            }
            else {
              uint64_t v50 = v70;
            }
            SafetyMonitorGroupFields.shareURL.setter(v49, v50);
          }

          ((void (*)(void *, void))v43)(v71, 0LL);
          swift_endAccess(v72);
        }

        uint64_t v73 = v15;
        unint64_t v74 = v16;
        sub_1000096AC((uint64_t)v77, (uint64_t)v75);
        swift_bridgeObjectRetain(v16);
        v51._countAndFlagsBits = 0x7069636974726170LL;
        v51._object = (void *)0xED00004449746E61LL;
        uint64_t v18 = (char *)String.hasPrefix(_:)(v51);
        swift_bridgeObjectRelease(v16);
        sub_100002FD4(v75);
        if ((v18 & 1) == 0)
        {
          sub_1000096E8((uint64_t)v76, &qword_1000841F0);
          uint64_t v14 = swift_bridgeObjectRelease(v16);
          goto LABEL_5;
        }

        uint64_t v73 = v15;
        unint64_t v74 = v16;
        sub_1000096AC((uint64_t)v77, (uint64_t)v75);
        swift_bridgeObjectRetain(v16);
        uint64_t v52 = sub_1000072B8(v15, v16, v7);
        if (v1)
        {
LABEL_52:
          sub_1000096E8((uint64_t)v76, &qword_1000841F0);
          swift_bridgeObjectRelease_n(v16, 2LL);
          swift_release_n(v82, 2LL);
          sub_100002FD4(v75);
          swift_release(v7);
          return v18;
        }

        uint64_t v53 = v52;
        swift_bridgeObjectRelease(v16);
        sub_100002FD4(v75);
        swift_beginAccess(v8, v72, 33LL, 0LL);
        int v54 = sub_100007C54(v71, v53);
        uint64_t v56 = v55;
        uint64_t v57 = type metadata accessor for SafetyMonitorGroupFields(0LL);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 48LL))(v56, 1LL, v57))
        {
          ((void (*)(void *, void))v54)(v71, 0LL);
          swift_endAccess(v72);
          swift_bridgeObjectRelease(v16);
        }

        else
        {
          uint64_t v73 = v15;
          unint64_t v74 = v16;
          sub_1000096AC((uint64_t)v77, (uint64_t)v75);
          swift_bridgeObjectRelease(v16);
          int v58 = swift_dynamicCast(&v69, v75, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
          BOOL v59 = v58 == 0;
          if (v58) {
            uint64_t v60 = v69;
          }
          else {
            uint64_t v60 = 0LL;
          }
          if (v59) {
            uint64_t v61 = 0LL;
          }
          else {
            uint64_t v61 = v70;
          }
          SafetyMonitorGroupFields.participantID.setter(v60, v61);
          ((void (*)(void *, void))v54)(v71, 0LL);
          swift_endAccess(v72);
        }
      }

      uint64_t v14 = sub_1000096E8((uint64_t)v76, &qword_1000841F0);
LABEL_5:
      dispatch thunk of _AnyIteratorBoxBase.next()(&v78, v14);
    }

    while (v81);
  }

  swift_release_n(v82, 2LL);
  swift_beginAccess(v8, &v78, 0LL, 0LL);
  uint64_t v62 = *(void *)(v7 + 16);
  uint64_t v63 = swift_bridgeObjectRetain(v62);
  uint64_t v18 = sub_100009584(v63);
  swift_release(v7);
  swift_bridgeObjectRelease(v62);
  return v18;
}

void *sub_100005EA0(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = a1[8];
  uint64_t v4 = a1[10];
  uint64_t v5 = a1[12];
  uint64_t v6 = a1[14];
  uint64_t v7 = a1[16];
  uint64_t v8 = a1[26];
  uint64_t v9 = a1[50];
  uint64_t v10 = a1[52];
  uint64_t v12 = a1[55];
  uint64_t v13 = a1[57];
  uint64_t v14 = a1[59];
  uint64_t v15 = a1[61];
  uint64_t v16 = a1[63];
  uint64_t v17 = a1[65];
  uint64_t v18 = a1[67];
  uint64_t v19 = a1[69];
  uint64_t v20 = a1[71];
  uint64_t v21 = a1[73];
  uint64_t v22 = a1[75];
  uint64_t v23 = a1[77];
  uint64_t v24 = a1[79];
  uint64_t v25 = a1[81];
  uint64_t v26 = a1[83];
  uint64_t v27 = a1[85];
  uint64_t v28 = a1[87];
  uint64_t v29 = a1[89];
  uint64_t v30 = a1[91];
  uint64_t v31 = a1[93];
  uint64_t v32 = a1[95];
  uint64_t v33 = a1[97];
  uint64_t v34 = a1[99];
  uint64_t v35 = a1[101];
  uint64_t v36 = a1[103];
  uint64_t v37 = a1[105];
  uint64_t v38 = a1[107];
  uint64_t v39 = a1[109];
  uint64_t v40 = a1[111];
  uint64_t v41 = a1[113];
  uint64_t v42 = a1[115];
  uint64_t v43 = a1[117];
  uint64_t v44 = a1[119];
  uint64_t v45 = a1[121];
  uint64_t v46 = a1[123];
  uint64_t v47 = a1[125];
  uint64_t v48 = a1[127];
  uint64_t v49 = a1[129];
  uint64_t v50 = a1[131];
  uint64_t v51 = a1[133];
  uint64_t v52 = a1[135];
  uint64_t v53 = a1[137];
  uint64_t v54 = a1[139];
  uint64_t v55 = a1[141];
  uint64_t v56 = a1[143];
  uint64_t v57 = a1[145];
  uint64_t v58 = a1[147];
  uint64_t v59 = a1[149];
  uint64_t v60 = a1[151];
  uint64_t v61 = a1[153];
  uint64_t v62 = a1[155];
  uint64_t v63 = a1[157];
  uint64_t v64 = a1[159];
  uint64_t v65 = a1[161];
  uint64_t v66 = a1[163];
  uint64_t v67 = a1[165];
  uint64_t v68 = a1[167];
  uint64_t v69 = a1[169];
  uint64_t v70 = a1[171];
  uint64_t v71 = a1[173];
  uint64_t v72 = a1[175];
  uint64_t v73 = a1[177];
  uint64_t v74 = a1[179];
  uint64_t v75 = a1[181];
  uint64_t v76 = a1[183];
  uint64_t v77 = a1[185];
  uint64_t v78 = a1[187];
  uint64_t v79 = a1[189];
  uint64_t v80 = a1[191];
  uint64_t v81 = a1[193];
  uint64_t v82 = a1[195];
  uint64_t v83 = a1[197];
  uint64_t v84 = a1[199];
  uint64_t v85 = a1[201];
  uint64_t v86 = a1[203];
  uint64_t v87 = a1[205];
  uint64_t v88 = a1[207];
  uint64_t v89 = a1[209];
  uint64_t v90 = a1[211];
  uint64_t v91 = a1[213];
  uint64_t v92 = a1[215];
  uint64_t v93 = a1[217];
  uint64_t v94 = a1[219];
  uint64_t v95 = a1[221];
  uint64_t v96 = a1[223];
  uint64_t v97 = a1[225];
  uint64_t v98 = a1[227];
  uint64_t v99 = a1[229];
  uint64_t v100 = a1[231];
  uint64_t v101 = a1[233];
  uint64_t v102 = a1[235];
  uint64_t v103 = a1[237];
  uint64_t v104 = a1[239];
  uint64_t v105 = a1[241];
  uint64_t v106 = a1[243];
  uint64_t v107 = a1[245];
  uint64_t v108 = a1[247];
  uint64_t v109 = a1[249];
  uint64_t v110 = a1[251];
  uint64_t v111 = a1[253];
  uint64_t v112 = a1[255];
  uint64_t v113 = a1[257];
  uint64_t v114 = a1[259];
  uint64_t v115 = a1[261];
  uint64_t v116 = a1[263];
  uint64_t v117 = a1[265];
  uint64_t v118 = a1[267];
  uint64_t v119 = a1[269];
  uint64_t v120 = a1[271];
  uint64_t v121 = a1[273];
  uint64_t v122 = a1[275];
  uint64_t v123 = a1[277];
  uint64_t v124 = a1[279];
  uint64_t v125 = a1[281];
  uint64_t v126 = a1[283];
  uint64_t v127 = a1[285];
  uint64_t v128 = a1[287];
  uint64_t v129 = a1[289];
  uint64_t v130 = a1[291];
  uint64_t v131 = a1[293];
  uint64_t v132 = a1[295];
  uint64_t v133 = a1[297];
  uint64_t v134 = a1[299];
  uint64_t v135 = a1[301];
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(v18);
  swift_bridgeObjectRelease(v19);
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(v23);
  swift_bridgeObjectRelease(v24);
  swift_bridgeObjectRelease(v25);
  swift_bridgeObjectRelease(v26);
  swift_bridgeObjectRelease(v27);
  swift_bridgeObjectRelease(v28);
  swift_bridgeObjectRelease(v29);
  swift_bridgeObjectRelease(v30);
  swift_bridgeObjectRelease(v31);
  swift_bridgeObjectRelease(v32);
  swift_bridgeObjectRelease(v33);
  swift_bridgeObjectRelease(v34);
  swift_bridgeObjectRelease(v35);
  swift_bridgeObjectRelease(v36);
  swift_bridgeObjectRelease(v37);
  swift_bridgeObjectRelease(v38);
  swift_bridgeObjectRelease(v39);
  swift_bridgeObjectRelease(v40);
  swift_bridgeObjectRelease(v41);
  swift_bridgeObjectRelease(v42);
  swift_bridgeObjectRelease(v43);
  swift_bridgeObjectRelease(v44);
  swift_bridgeObjectRelease(v45);
  swift_bridgeObjectRelease(v46);
  swift_bridgeObjectRelease(v47);
  swift_bridgeObjectRelease(v48);
  swift_bridgeObjectRelease(v49);
  swift_bridgeObjectRelease(v50);
  swift_bridgeObjectRelease(v51);
  swift_bridgeObjectRelease(v52);
  swift_bridgeObjectRelease(v53);
  swift_bridgeObjectRelease(v54);
  swift_bridgeObjectRelease(v55);
  swift_bridgeObjectRelease(v56);
  swift_bridgeObjectRelease(v57);
  swift_bridgeObjectRelease(v58);
  swift_bridgeObjectRelease(v59);
  swift_bridgeObjectRelease(v60);
  swift_bridgeObjectRelease(v61);
  swift_bridgeObjectRelease(v62);
  swift_bridgeObjectRelease(v63);
  swift_bridgeObjectRelease(v64);
  swift_bridgeObjectRelease(v65);
  swift_bridgeObjectRelease(v66);
  swift_bridgeObjectRelease(v67);
  swift_bridgeObjectRelease(v68);
  swift_bridgeObjectRelease(v69);
  swift_bridgeObjectRelease(v70);
  swift_bridgeObjectRelease(v71);
  swift_bridgeObjectRelease(v72);
  swift_bridgeObjectRelease(v73);
  swift_bridgeObjectRelease(v74);
  swift_bridgeObjectRelease(v75);
  swift_bridgeObjectRelease(v76);
  swift_bridgeObjectRelease(v77);
  swift_bridgeObjectRelease(v78);
  swift_bridgeObjectRelease(v79);
  swift_bridgeObjectRelease(v80);
  swift_bridgeObjectRelease(v81);
  swift_bridgeObjectRelease(v82);
  swift_bridgeObjectRelease(v83);
  swift_bridgeObjectRelease(v84);
  swift_bridgeObjectRelease(v85);
  swift_bridgeObjectRelease(v86);
  swift_bridgeObjectRelease(v87);
  swift_bridgeObjectRelease(v88);
  swift_bridgeObjectRelease(v89);
  swift_bridgeObjectRelease(v90);
  swift_bridgeObjectRelease(v91);
  swift_bridgeObjectRelease(v92);
  swift_bridgeObjectRelease(v93);
  swift_bridgeObjectRelease(v94);
  swift_bridgeObjectRelease(v95);
  swift_bridgeObjectRelease(v96);
  swift_bridgeObjectRelease(v97);
  swift_bridgeObjectRelease(v98);
  swift_bridgeObjectRelease(v99);
  swift_bridgeObjectRelease(v100);
  swift_bridgeObjectRelease(v101);
  swift_bridgeObjectRelease(v102);
  swift_bridgeObjectRelease(v103);
  swift_bridgeObjectRelease(v104);
  swift_bridgeObjectRelease(v105);
  swift_bridgeObjectRelease(v106);
  swift_bridgeObjectRelease(v107);
  swift_bridgeObjectRelease(v108);
  swift_bridgeObjectRelease(v109);
  swift_bridgeObjectRelease(v110);
  swift_bridgeObjectRelease(v111);
  swift_bridgeObjectRelease(v112);
  swift_bridgeObjectRelease(v113);
  swift_bridgeObjectRelease(v114);
  swift_bridgeObjectRelease(v115);
  swift_bridgeObjectRelease(v116);
  swift_bridgeObjectRelease(v117);
  swift_bridgeObjectRelease(v118);
  swift_bridgeObjectRelease(v119);
  swift_bridgeObjectRelease(v120);
  swift_bridgeObjectRelease(v121);
  swift_bridgeObjectRelease(v122);
  swift_bridgeObjectRelease(v123);
  swift_bridgeObjectRelease(v124);
  swift_bridgeObjectRelease(v125);
  swift_bridgeObjectRelease(v126);
  swift_bridgeObjectRelease(v127);
  swift_bridgeObjectRelease(v128);
  swift_bridgeObjectRelease(v129);
  swift_bridgeObjectRelease(v130);
  swift_bridgeObjectRelease(v131);
  swift_bridgeObjectRelease(v132);
  swift_bridgeObjectRelease(v133);
  swift_bridgeObjectRelease(v134);
  swift_bridgeObjectRelease(v135);
  return a1;
}

uint64_t sub_100006674()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100006698()
{
  return swift_deallocObject(v0, 2432LL, 7LL);
}

void *sub_100006AE4(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = a1[6];
  uint64_t v4 = a1[8];
  uint64_t v5 = a1[10];
  uint64_t v6 = a1[12];
  uint64_t v7 = a1[14];
  uint64_t v8 = a1[16];
  uint64_t v9 = a1[26];
  uint64_t v10 = a1[50];
  uint64_t v12 = a1[52];
  uint64_t v13 = a1[55];
  uint64_t v14 = a1[57];
  uint64_t v15 = a1[59];
  uint64_t v16 = a1[61];
  uint64_t v17 = a1[63];
  uint64_t v18 = a1[65];
  uint64_t v19 = a1[67];
  uint64_t v20 = a1[69];
  uint64_t v21 = a1[71];
  uint64_t v22 = a1[73];
  uint64_t v23 = a1[75];
  uint64_t v24 = a1[77];
  uint64_t v25 = a1[79];
  uint64_t v26 = a1[81];
  uint64_t v27 = a1[83];
  uint64_t v28 = a1[85];
  uint64_t v29 = a1[87];
  uint64_t v30 = a1[89];
  uint64_t v31 = a1[91];
  uint64_t v32 = a1[93];
  uint64_t v33 = a1[95];
  uint64_t v34 = a1[97];
  uint64_t v35 = a1[99];
  uint64_t v36 = a1[101];
  uint64_t v37 = a1[103];
  uint64_t v38 = a1[105];
  uint64_t v39 = a1[107];
  uint64_t v40 = a1[109];
  uint64_t v41 = a1[111];
  uint64_t v42 = a1[113];
  uint64_t v43 = a1[115];
  uint64_t v44 = a1[117];
  uint64_t v45 = a1[119];
  uint64_t v46 = a1[121];
  uint64_t v47 = a1[123];
  uint64_t v48 = a1[125];
  uint64_t v49 = a1[127];
  uint64_t v50 = a1[129];
  uint64_t v51 = a1[131];
  uint64_t v52 = a1[133];
  uint64_t v53 = a1[135];
  uint64_t v54 = a1[137];
  uint64_t v55 = a1[139];
  uint64_t v56 = a1[141];
  uint64_t v57 = a1[143];
  uint64_t v58 = a1[145];
  uint64_t v59 = a1[147];
  uint64_t v60 = a1[149];
  uint64_t v61 = a1[151];
  uint64_t v62 = a1[153];
  uint64_t v63 = a1[155];
  uint64_t v64 = a1[157];
  uint64_t v65 = a1[159];
  uint64_t v66 = a1[161];
  uint64_t v67 = a1[163];
  uint64_t v68 = a1[165];
  uint64_t v69 = a1[167];
  uint64_t v70 = a1[169];
  uint64_t v71 = a1[171];
  uint64_t v72 = a1[173];
  uint64_t v73 = a1[175];
  uint64_t v74 = a1[177];
  uint64_t v75 = a1[179];
  uint64_t v76 = a1[181];
  uint64_t v77 = a1[183];
  uint64_t v78 = a1[185];
  uint64_t v79 = a1[187];
  uint64_t v80 = a1[189];
  uint64_t v81 = a1[191];
  uint64_t v82 = a1[193];
  uint64_t v83 = a1[195];
  uint64_t v84 = a1[197];
  uint64_t v85 = a1[199];
  uint64_t v86 = a1[201];
  uint64_t v87 = a1[203];
  uint64_t v88 = a1[205];
  uint64_t v89 = a1[207];
  uint64_t v90 = a1[209];
  uint64_t v91 = a1[211];
  uint64_t v92 = a1[213];
  uint64_t v93 = a1[215];
  uint64_t v94 = a1[217];
  uint64_t v95 = a1[219];
  uint64_t v96 = a1[221];
  uint64_t v97 = a1[223];
  uint64_t v98 = a1[225];
  uint64_t v99 = a1[227];
  uint64_t v100 = a1[229];
  uint64_t v101 = a1[231];
  uint64_t v102 = a1[233];
  uint64_t v103 = a1[235];
  uint64_t v104 = a1[237];
  uint64_t v105 = a1[239];
  uint64_t v106 = a1[241];
  uint64_t v107 = a1[243];
  uint64_t v108 = a1[245];
  uint64_t v109 = a1[247];
  uint64_t v110 = a1[249];
  uint64_t v111 = a1[251];
  uint64_t v112 = a1[253];
  uint64_t v113 = a1[255];
  uint64_t v114 = a1[257];
  uint64_t v115 = a1[259];
  uint64_t v116 = a1[261];
  uint64_t v117 = a1[263];
  uint64_t v118 = a1[265];
  uint64_t v119 = a1[267];
  uint64_t v120 = a1[269];
  uint64_t v121 = a1[271];
  uint64_t v122 = a1[273];
  uint64_t v123 = a1[275];
  uint64_t v124 = a1[277];
  uint64_t v125 = a1[279];
  uint64_t v126 = a1[281];
  uint64_t v127 = a1[283];
  uint64_t v128 = a1[285];
  uint64_t v129 = a1[287];
  uint64_t v130 = a1[289];
  uint64_t v131 = a1[291];
  uint64_t v132 = a1[293];
  uint64_t v133 = a1[295];
  uint64_t v134 = a1[297];
  uint64_t v135 = a1[299];
  swift_bridgeObjectRetain(a1[301]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRetain(v44);
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRetain(v47);
  swift_bridgeObjectRetain(v48);
  swift_bridgeObjectRetain(v49);
  swift_bridgeObjectRetain(v50);
  swift_bridgeObjectRetain(v51);
  swift_bridgeObjectRetain(v52);
  swift_bridgeObjectRetain(v53);
  swift_bridgeObjectRetain(v54);
  swift_bridgeObjectRetain(v55);
  swift_bridgeObjectRetain(v56);
  swift_bridgeObjectRetain(v57);
  swift_bridgeObjectRetain(v58);
  swift_bridgeObjectRetain(v59);
  swift_bridgeObjectRetain(v60);
  swift_bridgeObjectRetain(v61);
  swift_bridgeObjectRetain(v62);
  swift_bridgeObjectRetain(v63);
  swift_bridgeObjectRetain(v64);
  swift_bridgeObjectRetain(v65);
  swift_bridgeObjectRetain(v66);
  swift_bridgeObjectRetain(v67);
  swift_bridgeObjectRetain(v68);
  swift_bridgeObjectRetain(v69);
  swift_bridgeObjectRetain(v70);
  swift_bridgeObjectRetain(v71);
  swift_bridgeObjectRetain(v72);
  swift_bridgeObjectRetain(v73);
  swift_bridgeObjectRetain(v74);
  swift_bridgeObjectRetain(v75);
  swift_bridgeObjectRetain(v76);
  swift_bridgeObjectRetain(v77);
  swift_bridgeObjectRetain(v78);
  swift_bridgeObjectRetain(v79);
  swift_bridgeObjectRetain(v80);
  swift_bridgeObjectRetain(v81);
  swift_bridgeObjectRetain(v82);
  swift_bridgeObjectRetain(v83);
  swift_bridgeObjectRetain(v84);
  swift_bridgeObjectRetain(v85);
  swift_bridgeObjectRetain(v86);
  swift_bridgeObjectRetain(v87);
  swift_bridgeObjectRetain(v88);
  swift_bridgeObjectRetain(v89);
  swift_bridgeObjectRetain(v90);
  swift_bridgeObjectRetain(v91);
  swift_bridgeObjectRetain(v92);
  swift_bridgeObjectRetain(v93);
  swift_bridgeObjectRetain(v94);
  swift_bridgeObjectRetain(v95);
  swift_bridgeObjectRetain(v96);
  swift_bridgeObjectRetain(v97);
  swift_bridgeObjectRetain(v98);
  swift_bridgeObjectRetain(v99);
  swift_bridgeObjectRetain(v100);
  swift_bridgeObjectRetain(v101);
  swift_bridgeObjectRetain(v102);
  swift_bridgeObjectRetain(v103);
  swift_bridgeObjectRetain(v104);
  swift_bridgeObjectRetain(v105);
  swift_bridgeObjectRetain(v106);
  swift_bridgeObjectRetain(v107);
  swift_bridgeObjectRetain(v108);
  swift_bridgeObjectRetain(v109);
  swift_bridgeObjectRetain(v110);
  swift_bridgeObjectRetain(v111);
  swift_bridgeObjectRetain(v112);
  swift_bridgeObjectRetain(v113);
  swift_bridgeObjectRetain(v114);
  swift_bridgeObjectRetain(v115);
  swift_bridgeObjectRetain(v116);
  swift_bridgeObjectRetain(v117);
  swift_bridgeObjectRetain(v118);
  swift_bridgeObjectRetain(v119);
  swift_bridgeObjectRetain(v120);
  swift_bridgeObjectRetain(v121);
  swift_bridgeObjectRetain(v122);
  swift_bridgeObjectRetain(v123);
  swift_bridgeObjectRetain(v124);
  swift_bridgeObjectRetain(v125);
  swift_bridgeObjectRetain(v126);
  swift_bridgeObjectRetain(v127);
  swift_bridgeObjectRetain(v128);
  swift_bridgeObjectRetain(v129);
  swift_bridgeObjectRetain(v130);
  swift_bridgeObjectRetain(v131);
  swift_bridgeObjectRetain(v132);
  swift_bridgeObjectRetain(v133);
  swift_bridgeObjectRetain(v134);
  swift_bridgeObjectRetain(v135);
  return a1;
}

uint64_t sub_1000072B8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v79 = a3;
  uint64_t v7 = sub_10000264C(&qword_1000841F8);
  __chkstk_darwin(v7);
  uint64_t v76 = (char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_10000264C(&qword_100084208);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v84 = (char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v13 = (uint64_t *)((char *)&v72 - v12);
  uint64_t v82 = 0LL;
  unint64_t v83 = 0xE000000000000000LL;
  uint64_t v14 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v14 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v14)
  {
    uint64_t v15 = 7LL;
    if (((a2 >> 60) & ((a1 & 0x800000000000000LL) == 0)) != 0) {
      uint64_t v15 = 11LL;
    }
    uint64_t v16 = v15 | (v14 << 16);
    swift_bridgeObjectRetain(a2);
    for (unint64_t i = v16; ; unint64_t i = v18)
    {
      unint64_t v18 = String.index(before:)(i, a1, a2);
      uint64_t v19 = String.subscript.getter(v18, a1, a2);
      unint64_t v21 = v20;
      if ((Character.isNumber.getter() & 1) == 0) {
        break;
      }
      String.insert(_:at:)(v19, v21, 15LL);
      swift_bridgeObjectRelease(v21);
      if (v18 < 0x4000) {
        goto LABEL_11;
      }
    }

    swift_bridgeObjectRelease(a2);
    a2 = v21;
LABEL_11:
    swift_bridgeObjectRelease(a2);
  }

  uint64_t result = v82;
  unint64_t v23 = v83;
  unint64_t v24 = HIBYTE(v83) & 0xF;
  uint64_t v25 = v82 & 0xFFFFFFFFFFFFLL;
  if ((v83 & 0x2000000000000000LL) != 0) {
    unint64_t v26 = HIBYTE(v83) & 0xF;
  }
  else {
    unint64_t v26 = v82 & 0xFFFFFFFFFFFFLL;
  }
  if (!v26)
  {
LABEL_106:
    swift_bridgeObjectRelease(v23);
    return 0LL;
  }

  if ((v83 & 0x1000000000000000LL) != 0)
  {
    uint64_t v28 = (uint64_t)sub_1000088A0(v82, v83, 10LL);
    char v30 = v71;
    goto LABEL_48;
  }

  if ((v83 & 0x2000000000000000LL) != 0)
  {
    v81[0] = v82;
    v81[1] = v83 & 0xFFFFFFFFFFFFFFLL;
    if (v82 == 43)
    {
      if (v24)
      {
        if (v24 != 1 && (BYTE1(v82) - 48) <= 9u)
        {
          uint64_t v28 = (BYTE1(v82) - 48);
          if (v24 == 2) {
            goto LABEL_47;
          }
          if ((BYTE2(v82) - 48) <= 9u)
          {
            uint64_t v28 = 10LL * (BYTE1(v82) - 48) + (BYTE2(v82) - 48);
            unint64_t v34 = v24 - 3;
            if (v34)
            {
              uint64_t v35 = (unsigned __int8 *)v81 + 3;
              while (1)
              {
                unsigned int v36 = *v35 - 48;
                if (v36 > 9) {
                  goto LABEL_44;
                }
                if (!is_mul_ok(v28, 0xAuLL)) {
                  goto LABEL_44;
                }
                BOOL v32 = __CFADD__(10 * v28, v36);
                uint64_t v28 = 10 * v28 + v36;
                if (v32) {
                  goto LABEL_44;
                }
                char v30 = 0;
                ++v35;
                if (!--v34) {
                  goto LABEL_48;
                }
              }
            }

            goto LABEL_47;
          }
        }

        goto LABEL_44;
      }
    }

    else
    {
      if (v82 != 45)
      {
        if (v24 && (v82 - 48) <= 9u)
        {
          uint64_t v28 = (v82 - 48);
          if (v24 == 1) {
            goto LABEL_47;
          }
          if ((BYTE1(v82) - 48) <= 9u)
          {
            uint64_t v28 = 10LL * (v82 - 48) + (BYTE1(v82) - 48);
            unint64_t v63 = v24 - 2;
            if (v63)
            {
              uint64_t v64 = (unsigned __int8 *)v81 + 2;
              while (1)
              {
                unsigned int v65 = *v64 - 48;
                if (v65 > 9) {
                  goto LABEL_44;
                }
                if (!is_mul_ok(v28, 0xAuLL)) {
                  goto LABEL_44;
                }
                BOOL v32 = __CFADD__(10 * v28, v65);
                uint64_t v28 = 10 * v28 + v65;
                if (v32) {
                  goto LABEL_44;
                }
                char v30 = 0;
                ++v64;
                if (!--v63) {
                  goto LABEL_48;
                }
              }
            }

            goto LABEL_47;
          }
        }

LABEL_44:
        uint64_t v28 = 0LL;
LABEL_45:
        char v30 = 1;
        goto LABEL_48;
      }

      if (v24)
      {
        if (v24 != 1)
        {
          unsigned __int8 v31 = BYTE1(v82) - 48;
          if ((BYTE1(v82) - 48) <= 9u)
          {
            uint64_t v28 = 0LL;
            BOOL v32 = v31 == 0LL;
            unint64_t v33 = -(uint64_t)v31;
            if (!v32) {
              goto LABEL_45;
            }
            if (v24 == 2)
            {
              char v30 = 0;
              uint64_t v28 = v33;
              goto LABEL_48;
            }

            unsigned __int8 v66 = BYTE2(v82) - 48;
            if ((BYTE2(v82) - 48) <= 9u && is_mul_ok(v33, 0xAuLL))
            {
              unint64_t v67 = 10 * v33;
              uint64_t v28 = v67 - v66;
              if (v67 >= v66)
              {
                unint64_t v68 = v24 - 3;
                if (v68)
                {
                  uint64_t v69 = (unsigned __int8 *)v81 + 3;
                  while (1)
                  {
                    unsigned int v70 = *v69 - 48;
                    if (v70 > 9) {
                      goto LABEL_44;
                    }
                    if (!is_mul_ok(v28, 0xAuLL)) {
                      goto LABEL_44;
                    }
                    BOOL v32 = 10 * v28 >= (unint64_t)v70;
                    uint64_t v28 = 10 * v28 - v70;
                    if (!v32) {
                      goto LABEL_44;
                    }
                    char v30 = 0;
                    ++v69;
                    if (!--v68) {
                      goto LABEL_48;
                    }
                  }
                }

LABEL_47:
                char v30 = 0;
                goto LABEL_48;
              }
            }
          }
        }

        goto LABEL_44;
      }

      __break(1u);
    }

    __break(1u);
    goto LABEL_111;
  }

  if ((v82 & 0x1000000000000000LL) != 0) {
    uint64_t v27 = (unsigned __int8 *)((v83 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else {
    uint64_t v27 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v82, v83);
  }
  uint64_t v28 = (uint64_t)sub_100008AA8(v27, v25, 10LL);
  char v30 = v29 & 1;
LABEL_48:
  swift_bridgeObjectRelease(v23);
  if ((v30 & 1) != 0) {
    return 0LL;
  }
  if (!v28) {
    return v28;
  }
  uint64_t v75 = v4;
  uint64_t v37 = v79 + 16;
  swift_beginAccess(v79 + 16, v81, 0LL, 0LL);
  uint64_t v38 = *(void *)v37;
  uint64_t v39 = *(void *)(*(void *)v37 + 64LL);
  uint64_t v77 = *(void *)v37 + 64LL;
  uint64_t v40 = 1LL << *(_BYTE *)(v38 + 32);
  uint64_t v41 = -1LL;
  if (v40 < 64) {
    uint64_t v41 = ~(-1LL << v40);
  }
  unint64_t v23 = v41 & v39;
  int64_t v78 = (unint64_t)(v40 + 63) >> 6;
  int64_t v73 = v78 - 1;
  uint64_t v74 = v37;
  uint64_t result = swift_bridgeObjectRetain(v38);
  int64_t v42 = 0LL;
  uint64_t v79 = v28;
  uint64_t v43 = v84;
  if (!v23) {
    goto LABEL_55;
  }
LABEL_53:
  unint64_t v44 = __clz(__rbit64(v23));
  v23 &= v23 - 1;
  unint64_t v45 = v44 | (v42 << 6);
LABEL_54:
  uint64_t v46 = *(void *)(v38 + 56);
  *uint64_t v43 = *(void *)(*(void *)(v38 + 48) + 8 * v45);
  uint64_t v47 = type metadata accessor for SafetyMonitorGroupFields(0LL);
  uint64_t v48 = *(void *)(v47 - 8);
  uint64_t v49 = v46 + *(void *)(v48 + 72) * v45;
  uint64_t v50 = sub_10000264C(&qword_100084210);
  uint64_t v51 = *(void (**)(char *, uint64_t, uint64_t))(v48 + 16);
  uint64_t v43 = v84;
  v51(&v84[*(int *)(v50 + 48)], v49, v47);
  (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56LL))(v43, 0LL, 1LL, v50);
  uint64_t v28 = v79;
  while (1)
  {
    sub_10000976C((uint64_t)v43, (uint64_t)v13);
    uint64_t v55 = sub_10000264C(&qword_100084210);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v55 - 8) + 48LL))(v13, 1LL, v55) == 1)
    {
      swift_release(v38);
      uint64_t v60 = v75;
      uint64_t v59 = (uint64_t)v76;
      SafetyMonitorGroupFields.init(with:receiverHandle:sharingInvitationData:shareURL:participantID:)( v28,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL);
      if (!v60)
      {
        uint64_t v62 = type metadata accessor for SafetyMonitorGroupFields(0LL);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v62 - 8) + 56LL))(v59, 0LL, 1LL, v62);
        swift_beginAccess(v74, v80, 33LL, 0LL);
        sub_100007A7C(v59, v28);
        swift_endAccess(v80);
      }

      return v28;
    }

    uint64_t v56 = (char *)v13 + *(int *)(v55 + 48);
    if (*v13 == v28)
    {
      swift_release(v38);
      uint64_t v61 = type metadata accessor for SafetyMonitorGroupFields(0LL);
      (*(void (**)(char *, uint64_t))(*(void *)(v61 - 8) + 8LL))(v56, v61);
      return v28;
    }

    uint64_t v57 = type metadata accessor for SafetyMonitorGroupFields(0LL);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v57 - 8) + 8LL))(v56, v57);
    if (v23) {
      goto LABEL_53;
    }
LABEL_55:
    int64_t v52 = v42 + 1;
    if (__OFADD__(v42, 1LL))
    {
      __break(1u);
      goto LABEL_106;
    }

    if (v52 < v78)
    {
      unint64_t v53 = *(void *)(v77 + 8 * v52);
      if (v53) {
        goto LABEL_58;
      }
      v42 += 2LL;
      if (v52 + 1 >= v78)
      {
        int64_t v42 = v52;
        goto LABEL_63;
      }

      unint64_t v53 = *(void *)(v77 + 8 * v42);
      if (v53)
      {
        ++v52;
LABEL_58:
        unint64_t v23 = (v53 - 1) & v53;
        unint64_t v45 = __clz(__rbit64(v53)) + (v52 << 6);
        int64_t v42 = v52;
        goto LABEL_54;
      }

      if (v52 + 2 < v78) {
        break;
      }
    }

LABEL_63:
    uint64_t v54 = sub_10000264C(&qword_100084210);
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56LL))(v43, 1LL, 1LL, v54);
    unint64_t v23 = 0LL;
  }

  unint64_t v53 = *(void *)(v77 + 8 * (v52 + 2));
  if (v53)
  {
    v52 += 2LL;
    goto LABEL_58;
  }

  int64_t v58 = v52 + 3;
  if (v52 + 3 >= v78)
  {
    int64_t v42 = v52 + 2;
    goto LABEL_63;
  }

  unint64_t v53 = *(void *)(v77 + 8 * v58);
  if (v53)
  {
    v52 += 3LL;
    goto LABEL_58;
  }

  while (1)
  {
    int64_t v52 = v58 + 1;
    if (__OFADD__(v58, 1LL)) {
      break;
    }
    if (v52 >= v78)
    {
      int64_t v42 = v73;
      goto LABEL_63;
    }

    unint64_t v53 = *(void *)(v77 + 8 * v52);
    ++v58;
    if (v53) {
      goto LABEL_58;
    }
  }

LABEL_111:
  __break(1u);
  return result;
}

uint64_t sub_100007A7C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_10000264C(&qword_1000841F8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for SafetyMonitorGroupFields(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1LL, v9) == 1)
  {
    sub_1000096E8(a1, &qword_1000841F8);
    unint64_t v13 = sub_10005A6E0(a2);
    if ((v14 & 1) != 0)
    {
      unint64_t v15 = v13;
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
      uint64_t v17 = *v3;
      uint64_t v24 = *v3;
      uint64_t *v3 = 0x8000000000000000LL;
      if (!isUniquelyReferenced_nonNull_native)
      {
        sub_100008438();
        uint64_t v17 = v24;
      }

      (*(void (**)(char *, unint64_t, uint64_t))(v10 + 32))( v8,  *(void *)(v17 + 56) + *(void *)(v10 + 72) * v15,  v9);
      sub_100008658(v15, v17);
      uint64_t v18 = *v3;
      uint64_t *v3 = v17;
      swift_bridgeObjectRelease(v18);
      uint64_t v19 = 0LL;
    }

    else
    {
      uint64_t v19 = 1LL;
    }

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, v19, 1LL, v9);
    return sub_1000096E8((uint64_t)v8, &qword_1000841F8);
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, a1, v9);
    char v20 = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v24 = *v3;
    uint64_t *v3 = 0x8000000000000000LL;
    sub_100008984((uint64_t)v12, a2, v20);
    uint64_t v21 = *v3;
    uint64_t *v3 = v24;
    return swift_bridgeObjectRelease(v21);
  }

void (*sub_100007C54(void *a1, uint64_t a2))(void *a1)
{
  uint64_t v4 = malloc(0x28uLL);
  *a1 = v4;
  void v4[4] = sub_100007CD0(v4, a2);
  return sub_100007CA0;
}

void sub_100007CA0(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 32LL))(*a1, 0LL);
  free(v1);
}

void (*sub_100007CD0(void *a1, uint64_t a2))(uint64_t a1)
{
  uint64_t v5 = malloc(0x50uLL);
  *a1 = v5;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v5[8] = sub_100007F58(v5);
  v5[9] = sub_100007D88(v5 + 4, a2, isUniquelyReferenced_nonNull_native);
  return sub_100007D4C;
}

void sub_100007D4C(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 64LL);
  (*(void (**)(uint64_t, void))(*(void *)a1 + 72LL))(*(void *)a1 + 32LL, 0LL);
  v2(v1, 0LL);
  free(v1);
}

void (*sub_100007D88(void *a1, uint64_t a2, char a3))(uint64_t **a1)
{
  uint64_t v4 = v3;
  uint64_t v8 = malloc(0x28uLL);
  *a1 = v8;
  void *v8 = a2;
  v8[1] = v3;
  uint64_t v9 = sub_10000264C(&qword_1000841F8);
  uint64_t v10 = malloc(*(void *)(*(void *)(v9 - 8) + 64LL));
  v8[2] = v10;
  uint64_t v11 = *v3;
  unint64_t v13 = sub_10005A6E0(a2);
  *((_BYTE *)v8 + 32) = v12 & 1;
  uint64_t v14 = *(void *)(v11 + 16);
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }

  else
  {
    char v17 = v12;
    uint64_t v18 = *(void *)(v11 + 24);
    if (v18 >= v16 && (a3 & 1) != 0)
    {
LABEL_7:
      v8[3] = v13;
      if ((v17 & 1) != 0)
      {
LABEL_8:
        uint64_t v19 = *(void *)(*v4 + 56LL);
        uint64_t v20 = type metadata accessor for SafetyMonitorGroupFields(0LL);
        uint64_t v21 = *(void *)(v20 - 8);
        (*(void (**)(void *, unint64_t, uint64_t))(v21 + 32))( v10,  v19 + *(void *)(v21 + 72) * v13,  v20);
        uint64_t v22 = 0LL;
LABEL_12:
        (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v10, v22, 1LL, v20);
        return sub_100007F0C;
      }

LABEL_11:
      uint64_t v20 = type metadata accessor for SafetyMonitorGroupFields(0LL);
      uint64_t v21 = *(void *)(v20 - 8);
      uint64_t v22 = 1LL;
      goto LABEL_12;
    }

    if (v18 >= v16 && (a3 & 1) == 0)
    {
      sub_100008438();
      goto LABEL_7;
    }

    sub_100007F84(v16, a3 & 1);
    unint64_t v23 = sub_10005A6E0(a2);
    if ((v17 & 1) == (v24 & 1))
    {
      unint64_t v13 = v23;
      v8[3] = v23;
      if ((v17 & 1) != 0) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }

  uint64_t result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt);
  __break(1u);
  return result;
}

      uint64_t v10 = _StringObject.sharedUTF8.getter(v5, a4);
      if (!v10) {
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }
      goto LABEL_5;
    }

    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v15 + v8, v9 - v8);
  }

void sub_100007F0C(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void *)(*a1)[2];
  sub_1000082B4((uint64_t)v2, *((_BYTE *)*a1 + 32), (uint64_t *)(*a1)[1], (*a1)[3], **a1);
  sub_1000096E8((uint64_t)v2, &qword_1000841F8);
  free(v2);
  free(v1);
}

uint64_t (*sub_100007F58(void *a1))(uint64_t result)
{
  *a1 = *v1;
  a1[1] = v1;
  *uint64_t v1 = 0x8000000000000000LL;
  return sub_100007F78;
}

uint64_t sub_100007F78(uint64_t result)
{
  **(void **)(result + 8) = *(void *)result;
  return result;
}

uint64_t sub_100007F84(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for SafetyMonitorGroupFields(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v3;
  if (*(void *)(*v3 + 24) > a1) {
    a1 = *(void *)(*v3 + 24);
  }
  sub_10000264C(&qword_100084200);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  uint64_t v12 = result;
  if (*(void *)(v10 + 16))
  {
    uint64_t v37 = v3;
    int64_t v13 = 0LL;
    uint64_t v14 = *(void *)(v10 + 64);
    uint64_t v40 = (void *)(v10 + 64);
    uint64_t v15 = 1LL << *(_BYTE *)(v10 + 32);
    if (v15 < 64) {
      uint64_t v16 = ~(-1LL << v15);
    }
    else {
      uint64_t v16 = -1LL;
    }
    unint64_t v17 = v16 & v14;
    int64_t v39 = (unint64_t)(v15 + 63) >> 6;
    uint64_t v18 = result + 64;
    int v38 = a2;
    uint64_t v19 = 16LL;
    if ((a2 & 1) != 0) {
      uint64_t v19 = 32LL;
    }
    uint64_t v41 = v19;
    while (1)
    {
      if (v17)
      {
        unint64_t v21 = __clz(__rbit64(v17));
        v17 &= v17 - 1;
        unint64_t v22 = v21 | (v13 << 6);
      }

      else
      {
        int64_t v23 = v13 + 1;
        if (__OFADD__(v13, 1LL))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }

        uint64_t result = (uint64_t)v40;
        if (v23 >= v39) {
          goto LABEL_35;
        }
        unint64_t v24 = v40[v23];
        ++v13;
        if (!v24)
        {
          int64_t v13 = v23 + 1;
          if (v23 + 1 >= v39) {
            goto LABEL_35;
          }
          unint64_t v24 = v40[v13];
          if (!v24)
          {
            int64_t v25 = v23 + 2;
            if (v25 >= v39)
            {
LABEL_35:
              if ((v38 & 1) == 0)
              {
                uint64_t result = swift_release(v10);
                uint64_t v3 = v37;
                goto LABEL_42;
              }

              uint64_t v35 = 1LL << *(_BYTE *)(v10 + 32);
              if (v35 >= 64) {
                bzero(v40, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                void *v40 = -1LL << v35;
              }
              uint64_t v3 = v37;
              *(void *)(v10 + 16) = 0LL;
              break;
            }

            unint64_t v24 = v40[v25];
            if (!v24)
            {
              while (1)
              {
                int64_t v13 = v25 + 1;
                if (__OFADD__(v25, 1LL)) {
                  goto LABEL_44;
                }
                if (v13 >= v39) {
                  goto LABEL_35;
                }
                unint64_t v24 = v40[v13];
                ++v25;
                if (v24) {
                  goto LABEL_25;
                }
              }
            }

            int64_t v13 = v25;
          }
        }

LABEL_25:
        unint64_t v17 = (v24 - 1) & v24;
        unint64_t v22 = __clz(__rbit64(v24)) + (v13 << 6);
      }

      uint64_t v26 = *(void *)(*(void *)(v10 + 48) + 8 * v22);
      uint64_t v27 = *(void *)(v7 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + v41))(v9, *(void *)(v10 + 56) + v27 * v22, v6);
      uint64_t result = static Hasher._hash(seed:_:)(*(void *)(v12 + 40), v26);
      uint64_t v28 = -1LL << *(_BYTE *)(v12 + 32);
      unint64_t v29 = result & ~v28;
      unint64_t v30 = v29 >> 6;
      if (((-1LL << v29) & ~*(void *)(v18 + 8 * (v29 >> 6))) != 0)
      {
        unint64_t v20 = __clz(__rbit64((-1LL << v29) & ~*(void *)(v18 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        char v31 = 0;
        unint64_t v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }

          BOOL v33 = v30 == v32;
          if (v30 == v32) {
            unint64_t v30 = 0LL;
          }
          v31 |= v33;
          uint64_t v34 = *(void *)(v18 + 8 * v30);
        }

        while (v34 == -1);
        unint64_t v20 = __clz(__rbit64(~v34)) + (v30 << 6);
      }

      *(void *)(v18 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v20;
      *(void *)(*(void *)(v12 + 48) + 8 * v20) = v26;
      uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))( *(void *)(v12 + 56) + v27 * v20,  v9,  v6);
      ++*(void *)(v12 + 16);
    }
  }

  uint64_t result = swift_release(v10);
LABEL_42:
  uint64_t *v3 = v12;
  return result;
}

    uint64_t v14 = (v21 - 1) & v21;
    uint64_t v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    unint64_t v17 = 8 * v16;
    uint64_t v18 = *(void *)(*(void *)(v5 + 48) + 8 * v16);
    uint64_t v19 = *(void *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 56) + v19, v1);
    *(void *)(*(void *)(v7 + 48) + v17) = v18;
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))( *(void *)(v7 + 56) + v19,  v4,  v1);
  }

  unint64_t v22 = v20 + 2;
  if (v22 >= v26) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v25 + 8 * v22);
  if (v21)
  {
    uint64_t v11 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v11 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v11 >= v26) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v25 + 8 * v11);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

  uint64_t v59 = a3[6];
  *(void *)((char *)a1 + a3[5]) = *(void *)((char *)a2 + a3[5]);
  uint64_t v60 = (char *)a1 + v59;
  uint64_t v61 = (char *)a2 + v59;
  *(void *)uint64_t v60 = *(void *)v61;
  v60[8] = v61[8];
  uint64_t v62 = a3[7];
  unint64_t v63 = (void *)((char *)a1 + v62);
  uint64_t v64 = (void *)((char *)a2 + v62);
  unsigned __int8 v66 = *v64;
  unsigned int v65 = v64[1];
  unint64_t v67 = v63[1];
  *unint64_t v63 = v66;
  v63[1] = v65;
  swift_bridgeObjectRelease(v67);
  return a1;
}

  if (v32) {
    goto LABEL_26;
  }
LABEL_15:
  if (!(_DWORD)v77) {
    return result;
  }
  return swift_bridgeObjectRelease(*(uint64_t *)((char *)v25 + v26[17] + 8));
}

unint64_t sub_1000082B4(uint64_t a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v10 = sub_10000264C(&qword_1000841F8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for SafetyMonitorGroupFields(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  unint64_t v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v23 - v18;
  sub_100009724(a1, (uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v13) == 1)
  {
    unint64_t result = sub_1000096E8((uint64_t)v12, &qword_1000841F8);
    if ((a2 & 1) != 0) {
      return sub_100008658(a4, *a3);
    }
  }

  else
  {
    unint64_t v21 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
    v21(v19, v12, v13);
    unint64_t v22 = (void *)*a3;
    if ((a2 & 1) != 0)
    {
      return ((uint64_t (*)(unint64_t, char *, uint64_t))v21)( v22[7] + *(void *)(v14 + 72) * a4,  v19,  v13);
    }

    else
    {
      v21(v17, v19, v13);
      return sub_100008814(a4, a5, (uint64_t)v17, v22);
    }
  }

  return result;
}

void *sub_100008438()
{
  uint64_t v1 = type metadata accessor for SafetyMonitorGroupFields(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10000264C(&qword_100084200);
  unint64_t v24 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release(v5);
    *unint64_t v24 = v7;
    return result;
  }

  unint64_t result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1LL << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  int64_t v11 = 0LL;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v12 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v13 = -1LL;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  uint64_t v25 = v5 + 64;
  int64_t v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v11 + 1;
    if (__OFADD__(v11, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v20 >= v26) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      int64_t v11 = v20 + 1;
      if (v20 + 1 >= v26) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v25 + 8 * v11);
      if (!v21) {
        break;
      }
    }

LABEL_28:
  __break(1u);
  return result;
}

unint64_t sub_100008658(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = *(void *)(a2 + 48);
        uint64_t v10 = (void *)(v9 + 8 * v6);
        unint64_t result = static Hasher._hash(seed:_:)(*(void *)(a2 + 40), *v10);
        unint64_t v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
        }

        else if (v11 < v8 && v3 < (uint64_t)v11)
        {
          goto LABEL_6;
        }

        unint64_t v14 = (void *)(v9 + 8 * v3);
        if (v3 != v6 || v14 >= v10 + 1) {
          *unint64_t v14 = *v10;
        }
        uint64_t v15 = *(void *)(a2 + 56);
        uint64_t v16 = *(void *)(*(void *)(type metadata accessor for SafetyMonitorGroupFields(0LL) - 8) + 72LL);
        int64_t v17 = v16 * v3;
        unint64_t result = v15 + v16 * v3;
        int64_t v18 = v16 * v6;
        unint64_t v19 = v15 + v16 * v6 + v16;
        if (v17 < v18 || result >= v19)
        {
          unint64_t result = swift_arrayInitWithTakeFrontToBack();
        }

        else
        {
          int64_t v3 = v6;
          if (v17 == v18) {
            goto LABEL_6;
          }
          unint64_t result = swift_arrayInitWithTakeBackToFront();
        }

        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    unint64_t v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v22 = *v21;
    uint64_t v23 = (-1LL << v3) - 1;
  }

  else
  {
    unint64_t v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v23 = *v21;
    uint64_t v22 = (-1LL << result) - 1;
  }

  *unint64_t v21 = v23 & v22;
  uint64_t v24 = *(void *)(a2 + 16);
  BOOL v25 = __OFSUB__(v24, 1LL);
  uint64_t v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

uint64_t sub_100008814(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t v7 = a4[7];
  uint64_t v8 = type metadata accessor for SafetyMonitorGroupFields(0LL);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32LL))( v7 + *(void *)(*(void *)(v8 - 8) + 72LL) * a1,  a3,  v8);
  uint64_t v10 = a4[2];
  BOOL v11 = __OFADD__(v10, 1LL);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a4[2] = v12;
  }
  return result;
}

unsigned __int8 *sub_1000088A0(uint64_t a1, uint64_t a2, int64_t a3)
{
  uint64_t v14 = a1;
  uint64_t v15 = a2;
  swift_bridgeObjectRetain(a2);
  uint64_t v4 = String.init<A>(_:)( &v14,  &type metadata for String,  &protocol witness table for String,  &protocol witness table for String);
  uint64_t v6 = v4;
  unint64_t v7 = v5;
  if ((v5 & 0x1000000000000000LL) == 0)
  {
    if ((v5 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v9 = HIBYTE(v7) & 0xF;
    uint64_t v14 = v6;
    uint64_t v15 = v7 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v8 = (unsigned __int8 *)&v14;
    goto LABEL_7;
  }

  uint64_t v6 = sub_100008D24(v4, v5);
  unint64_t v11 = v10;
  swift_bridgeObjectRelease(v7);
  unint64_t v7 = v11;
  if ((v11 & 0x2000000000000000LL) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v6 & 0x1000000000000000LL) != 0)
  {
    uint64_t v8 = (unsigned __int8 *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v9 = v6 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    uint64_t v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v6, v7);
  }

LABEL_7:
  uint64_t v12 = sub_100008AA8(v8, v9, a3);
  swift_bridgeObjectRelease(v7);
  return v12;
}

uint64_t sub_100008984(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_10005A6E0(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }

  else
  {
    char v14 = v9;
    uint64_t v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      uint64_t v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        uint64_t v17 = v16[7];
        uint64_t v18 = type metadata accessor for SafetyMonitorGroupFields(0LL);
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 40LL))( v17 + *(void *)(*(void *)(v18 - 8) + 72LL) * v10,  a1,  v18);
      }

      return sub_100008814(v10, a2, a1, v16);
    }

    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_100008438();
      goto LABEL_7;
    }

    sub_100007F84(v13, a3 & 1);
    unint64_t v20 = sub_10005A6E0(a2);
    if ((v14 & 1) == (v21 & 1))
    {
      unint64_t v10 = v20;
      uint64_t v16 = *v4;
      if ((v14 & 1) != 0) {
        goto LABEL_8;
      }
      return sub_100008814(v10, a2, a1, v16);
    }
  }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt);
  __break(1u);
  return result;
}

unsigned __int8 *sub_100008AA8(unsigned __int8 *result, uint64_t a2, int64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }

          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }

          if (result)
          {
            unint64_t v9 = 0LL;
            for (unint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8) {
                    return 0LL;
                  }
                  char v12 = -87;
                }

                else
                {
                  char v12 = -55;
                }
              }

              else
              {
                char v12 = -48;
              }

              if (!is_mul_ok(v9, a3)) {
                return 0LL;
              }
              unint64_t v13 = v9 * a3;
              unsigned __int8 v14 = v11 + v12;
              BOOL v15 = v13 >= v14;
              unint64_t v9 = v13 - v14;
              if (!v15) {
                return 0LL;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }

          return 0LL;
        }

        return 0LL;
      }

      __break(1u);
      goto LABEL_66;
    }

    if (a2)
    {
      unsigned __int8 v25 = a3 + 48;
      unsigned __int8 v26 = a3 + 55;
      unsigned __int8 v27 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v25 = 58;
      }

      else
      {
        unsigned __int8 v27 = 97;
        unsigned __int8 v26 = 65;
      }

      if (result)
      {
        unint64_t v28 = 0LL;
        do
        {
          unsigned int v29 = *result;
          if (v29 < 0x30 || v29 >= v25)
          {
            if (v29 < 0x41 || v29 >= v26)
            {
              if (v29 < 0x61 || v29 >= v27) {
                return 0LL;
              }
              char v30 = -87;
            }

            else
            {
              char v30 = -55;
            }
          }

          else
          {
            char v30 = -48;
          }

          if (!is_mul_ok(v28, a3)) {
            return 0LL;
          }
          unint64_t v31 = v28 * a3;
          unsigned __int8 v32 = v29 + v30;
          BOOL v15 = __CFADD__(v31, v32);
          unint64_t v28 = v31 + v32;
          if (v15) {
            return 0LL;
          }
          ++result;
          --v3;
        }

        while (v3);
        return (unsigned __int8 *)v28;
      }

      return 0LL;
    }

    return 0LL;
  }

  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }

  uint64_t v16 = a2 - 1;
  if (a2 == 1) {
    return 0LL;
  }
  unsigned __int8 v17 = a3 + 48;
  unsigned __int8 v18 = a3 + 55;
  unsigned __int8 v19 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v17 = 58;
  }

  else
  {
    unsigned __int8 v19 = 97;
    unsigned __int8 v18 = 65;
  }

  if (!result) {
    return 0LL;
  }
  unint64_t v9 = 0LL;
  unint64_t v20 = result + 1;
  do
  {
    unsigned int v21 = *v20;
    if (v21 < 0x30 || v21 >= v17)
    {
      if (v21 < 0x41 || v21 >= v18)
      {
        if (v21 < 0x61 || v21 >= v19) {
          return 0LL;
        }
        char v22 = -87;
      }

      else
      {
        char v22 = -55;
      }
    }

    else
    {
      char v22 = -48;
    }

    if (!is_mul_ok(v9, a3)) {
      return 0LL;
    }
    unint64_t v23 = v9 * a3;
    unsigned __int8 v24 = v21 + v22;
    BOOL v15 = __CFADD__(v23, v24);
    unint64_t v9 = v23 + v24;
    if (v15) {
      return 0LL;
    }
    ++v20;
    --v16;
  }

  while (v16);
  return (unsigned __int8 *)v9;
}

uint64_t sub_100008D24(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v2 = a1;
  }
  uint64_t v3 = 7LL;
  if (((a2 >> 60) & ((a1 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v3 = 11LL;
  }
  unint64_t v4 = String.subscript.getter(15LL, v3 | (v2 << 16), a1, a2);
  unint64_t v6 = v5;
  uint64_t v9 = sub_100008DA0(v4, v7, v8, v5);
  swift_bridgeObjectRelease(v6);
  return v9;
}

uint64_t sub_100008DA0(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5 = a3;
  if ((a4 & 0x1000000000000000LL) != 0)
  {
    unint64_t v12 = sub_100008EE4(a1, a2, a3, a4);
    if (v12)
    {
      uint64_t v9 = v12;
      unint64_t v8 = (unint64_t)sub_100008FD0(v12, 0LL);
      unint64_t v5 = sub_100009034((unint64_t)v15, v8 + 32, v9, a1, a2, v5, a4);
      uint64_t v13 = v15[3];
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRelease(v13);
      if (v5 != v9)
      {
        __break(1u);
        goto LABEL_11;
      }
    }

    else
    {
      unint64_t v8 = (unint64_t)&_swiftEmptyArrayStorage;
    }

    uint64_t v14 = static String._uncheckedFromUTF8(_:)(v8 + 32, *(void *)(v8 + 16));
    swift_release(v8);
    return v14;
  }

  else
  {
    unint64_t v8 = a1 >> 16;
    uint64_t v9 = a2 >> 16;
    if ((a4 & 0x2000000000000000LL) == 0)
    {
      if ((a3 & 0x1000000000000000LL) != 0)
      {
        uint64_t v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_5:
        v10 += v8;
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }

unint64_t sub_100008EE4( unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000LL) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4LL << v8;
  if ((result & 0xC) == 4LL << v8)
  {
    uint64_t result = sub_100009244(result, a3, a4);
    unint64_t v7 = result;
  }

  if ((a2 & 0xC) == v9)
  {
    uint64_t result = sub_100009244(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000LL) == 0) {
      return (a2 >> 16) - (v7 >> 16);
    }
  }

  else if ((a4 & 0x1000000000000000LL) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }

  unint64_t v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000LL) == 0) {
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }

  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)(v7, a2, a3, a4);
  }

  __break(1u);
  return result;
}

void *sub_100008FD0(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v4 = sub_10000264C(&qword_100084218);
  unint64_t v5 = (void *)swift_allocObject(v4, v2 + 32, 7LL);
  size_t v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

unint64_t sub_100009034( unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0LL;
    goto LABEL_33;
  }

  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0LL;
    unint64_t v12 = a4;
LABEL_33:
    *uint64_t v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }

  uint64_t v11 = 0LL;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000LL) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4LL << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000LL) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    uint64_t result = v12;
    if (v17 == v15) {
      uint64_t result = sub_100009244(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000LL) != 0)
    {
      uint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }

    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000LL) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }

      else
      {
        uint64_t result = v21;
        if ((a6 & 0x1000000000000000LL) == 0) {
          uint64_t result = _StringObject.sharedUTF8.getter(a6, a7);
        }
        char v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000LL) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }

    uint64_t result = sub_100009244(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000LL) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000LL) + 65540;
      goto LABEL_29;
    }

LABEL_27:
    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    unint64_t v12 = String.UTF8View._foreignIndex(after:)(v12, a6, a7);
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_33;
    }

    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }

  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_100009244(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5 = a1;
  unint64_t v6 = a1 >> 16;
  uint64_t v7 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000LL) == 0 || (a2 & 0x800000000000000LL) != 0)
  {
    uint64_t v13 = String.UTF16View.index(_:offsetBy:)(15LL, v6, a2);
    uint64_t v14 = v13 + (v7 << 16);
    unint64_t v15 = v13 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    unint64_t v16 = v14 & 0xFFFFFFFFFFFF0000LL;
    if (!v7) {
      unint64_t v16 = v15;
    }
    return v16 | 4;
  }

  else
  {
    uint64_t v8 = String.UTF8View._foreignIndex(_:offsetBy:)(15LL, v6);
    uint64_t v9 = v8 + (v7 << 16);
    unint64_t v10 = v8 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    unint64_t v11 = v9 & 0xFFFFFFFFFFFF0000LL;
    if (!v7) {
      unint64_t v11 = v10;
    }
    return v11 | 8;
  }

uint64_t sub_1000092BC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for SafetyMonitorGroupFields(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = ((uint64_t (*)(void))__chkstk_darwin)();
  unint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = __chkstk_darwin(v10);
  unint64_t v15 = (char *)&v32 - v14;
  uint64_t v39 = a4;
  uint64_t v18 = *(void *)(a4 + 64);
  uint64_t v17 = a4 + 64;
  uint64_t v16 = v18;
  uint64_t v37 = v17;
  uint64_t v19 = -1LL << *(_BYTE *)(v17 - 32);
  if (-v19 < 64) {
    uint64_t v20 = ~(-1LL << -(char)v19);
  }
  else {
    uint64_t v20 = -1LL;
  }
  unint64_t v21 = v20 & v16;
  if (!a2)
  {
    int64_t v22 = 0LL;
    a3 = 0LL;
LABEL_38:
    uint64_t v31 = v37;
    *a1 = v39;
    a1[1] = v31;
    a1[2] = ~v19;
    a1[3] = v22;
    a1[4] = v21;
    return a3;
  }

  if (!a3)
  {
    int64_t v22 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t v34 = -1LL << *(_BYTE *)(v17 - 32);
  uint64_t v35 = a1;
  int64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  int64_t v36 = (unint64_t)(63 - v19) >> 6;
  int64_t v33 = v36 - 1;
  uint64_t v38 = a3;
  if (!v21) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v24 = __clz(__rbit64(v21));
  v21 &= v21 - 1;
  unint64_t v25 = v24 | (v22 << 6);
  while (1)
  {
    ++v23;
    uint64_t v29 = *(void *)(v9 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v12, *(void *)(v39 + 56) + v29 * v25, v8);
    char v30 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v30(v15, v12, v8);
    uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v30)(a2, v15, v8);
    a3 = v38;
    if (v23 == v38) {
      goto LABEL_37;
    }
    a2 += v29;
    if (v21) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v26 = v22 + 1;
    if (__OFADD__(v22, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v26 >= v36) {
      goto LABEL_32;
    }
    unint64_t v27 = *(void *)(v37 + 8 * v26);
    if (!v27) {
      break;
    }
LABEL_18:
    unint64_t v21 = (v27 - 1) & v27;
    unint64_t v25 = __clz(__rbit64(v27)) + (v26 << 6);
    int64_t v22 = v26;
  }

  v22 += 2LL;
  if (v26 + 1 >= v36)
  {
    unint64_t v21 = 0LL;
    int64_t v22 = v26;
    goto LABEL_36;
  }

  unint64_t v27 = *(void *)(v37 + 8 * v22);
  if (v27) {
    goto LABEL_14;
  }
  int64_t v28 = v26 + 2;
  if (v26 + 2 >= v36) {
    goto LABEL_32;
  }
  unint64_t v27 = *(void *)(v37 + 8 * v28);
  if (v27) {
    goto LABEL_17;
  }
  int64_t v22 = v26 + 3;
  if (v26 + 3 >= v36)
  {
    unint64_t v21 = 0LL;
    int64_t v22 = v26 + 2;
    goto LABEL_36;
  }

  unint64_t v27 = *(void *)(v37 + 8 * v22);
  if (v27)
  {
LABEL_14:
    int64_t v26 = v22;
    goto LABEL_18;
  }

  int64_t v28 = v26 + 4;
  if (v26 + 4 >= v36)
  {
LABEL_32:
    unint64_t v21 = 0LL;
LABEL_36:
    a3 = v23;
LABEL_37:
    uint64_t v19 = v34;
    a1 = v35;
    goto LABEL_38;
  }

  unint64_t v27 = *(void *)(v37 + 8 * v28);
  if (v27)
  {
LABEL_17:
    int64_t v26 = v28;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v26 = v28 + 1;
    if (__OFADD__(v28, 1LL)) {
      break;
    }
    if (v26 >= v36)
    {
      unint64_t v21 = 0LL;
      int64_t v22 = v33;
      goto LABEL_36;
    }

    unint64_t v27 = *(void *)(v37 + 8 * v26);
    ++v28;
    if (v27) {
      goto LABEL_18;
    }
  }

LABEL_41:
  __break(1u);
  return result;
}

char *sub_100009584(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v3 = sub_10000264C(&qword_100084220);
  uint64_t v4 = *(void *)(type metadata accessor for SafetyMonitorGroupFields(0LL) - 8);
  uint64_t v5 = *(void *)(v4 + 72);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = (v6 + 32) & ~v6;
  uint64_t v8 = (void *)swift_allocObject(v3, v7 + v5 * v1, v6 | 7);
  uint64_t result = (char *)j__malloc_size(v8);
  if (v5)
  {
    if (&result[-v7] != (char *)0x8000000000000000LL || v5 != -1)
    {
      v8[2] = v1;
      v8[3] = 2 * ((uint64_t)&result[-v7] / v5);
      uint64_t v11 = sub_1000092BC(&v13, (uint64_t)v8 + v7, v1, a1);
      uint64_t v12 = v13;
      swift_bridgeObjectRetain(a1);
      sub_1000097B8(v12);
      if (v11 == v1) {
        return (char *)v8;
      }
      __break(1u);
      return (char *)&_swiftEmptyArrayStorage;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

_OWORD *sub_10000969C(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_1000096AC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1000096E8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_10000264C(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t sub_100009724(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000264C(&qword_1000841F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000976C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000264C(&qword_100084208);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000097B8(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

unint64_t sub_1000097C0()
{
  unint64_t result = qword_100084228;
  if (!qword_100084228)
  {
    unint64_t result = swift_getWitnessTable(&unk_100072060, &type metadata for IDSClientMessageUnpackingError);
    atomic_store(result, (unint64_t *)&qword_100084228);
  }

  return result;
}

void sub_100009804(char *a1)
{
}

void sub_100009810()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v2, 0LL);
  __asm { BR              X9 }

Swift::Int sub_10000985C()
{
  return Hasher._finalize()();
}

void sub_1000098BC()
{
  __asm { BR              X10 }

uint64_t sub_1000098F8(uint64_t a1)
{
  return swift_bridgeObjectRelease(0xE600000000000000LL);
}

void sub_100009944(uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }

Swift::Int sub_10000998C()
{
  return Hasher._finalize()();
}

unint64_t sub_1000099EC@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10000AB90(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100009A18()
{
  return ((uint64_t (*)(void))((char *)sub_100009A48 + 4 * byte_10006EC8C[*v0]))();
}

void sub_100009A48(void *a1@<X8>)
{
  *a1 = 0x746E65696C63LL;
  a1[1] = 0xE600000000000000LL;
}

void sub_100009A60(void *a1@<X8>)
{
  *a1 = 1702125924LL;
  a1[1] = 0xE400000000000000LL;
}

void sub_100009A74(void *a1@<X8>)
{
  *a1 = 0x6E6F6973726576LL;
  a1[1] = v1;
}

uint64_t sub_100009A8C()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100009ABC + 4 * byte_10006EC90[*v0]))( 0x646E616D6D6F63LL,  0xE700000000000000LL);
}

uint64_t sub_100009ABC()
{
  return 0x746E65696C63LL;
}

uint64_t sub_100009AD0()
{
  return 1702125924LL;
}

uint64_t sub_100009AE0()
{
  return 0x6E6F6973726576LL;
}

unint64_t sub_100009AF4@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10000AB90(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100009B18(uint64_t a1)
{
  unint64_t v2 = sub_100009D14();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100009B40(uint64_t a1)
{
  unint64_t v2 = sub_100009D14();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IDSSampleMessageSchema.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000264C(&qword_100084230);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100002C78(a1, v9);
  unint64_t v11 = sub_100009D14();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for IDSSampleMessageSchema.CodingKeys,  &type metadata for IDSSampleMessageSchema.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  char v27 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, &v27, v5);
  if (!v2)
  {
    uint64_t v13 = v3[1];
    uint64_t v14 = v3[2];
    char v26 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v13, v14, &v26, v5);
    uint64_t v15 = type metadata accessor for IDSSampleMessageSchema(0LL);
    uint64_t v16 = (char *)v3 + *(int *)(v15 + 24);
    char v25 = 2;
    uint64_t v17 = type metadata accessor for Date(0LL);
    uint64_t v18 = sub_10000A0A0(&qword_100084240, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v16, &v25, v5, v17, v18);
    uint64_t v19 = (char *)v3 + *(int *)(v15 + 28);
    uint64_t v20 = *(void *)v19;
    uint64_t v21 = v19[8];
    char v24 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20, v21, &v24, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_100009D14()
{
  unint64_t result = qword_100084238;
  if (!qword_100084238)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006EE34, &type metadata for IDSSampleMessageSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084238);
  }

  return result;
}

uint64_t type metadata accessor for IDSSampleMessageSchema(uint64_t a1)
{
  uint64_t result = qword_1000842B8;
  if (!qword_1000842B8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for IDSSampleMessageSchema);
  }
  return result;
}

uint64_t IDSSampleMessageSchema.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v25 = a2;
  uint64_t v3 = sub_10000264C(&qword_100084248);
  __chkstk_darwin(v3);
  char v26 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = sub_10000264C(&qword_100084250);
  uint64_t v5 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for IDSSampleMessageSchema(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (uint64_t *)((char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_100002C78(a1, v11);
  unint64_t v13 = sub_100009D14();
  uint64_t v14 = v28;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for IDSSampleMessageSchema.CodingKeys,  &type metadata for IDSSampleMessageSchema.CodingKeys,  v13,  v11,  v12);
  if (v14) {
    return sub_100002FD4(a1);
  }
  uint64_t v15 = v26;
  uint64_t v16 = v5;
  char v32 = 0;
  *uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)(&v32, v27);
  char v31 = 1;
  v10[1] = KeyedDecodingContainer.decode(_:forKey:)(&v31, v27);
  v10[2] = v17;
  uint64_t v18 = type metadata accessor for Date(0LL);
  char v30 = 2;
  uint64_t v19 = sub_10000A0A0(&qword_100084258, (uint64_t)&protocol conformance descriptor for Date);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v15, v18, &v30, v27, v18, v19);
  sub_10000A0E0((uint64_t)v15, (uint64_t)v10 + *(int *)(v8 + 24));
  char v29 = 3;
  uint64_t v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v29, v27);
  char v22 = v21;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v7, v27);
  uint64_t v23 = (char *)v10 + *(int *)(v8 + 28);
  *(void *)uint64_t v23 = v20;
  v23[8] = v22 & 1;
  sub_10000A128((uint64_t)v10, v25);
  sub_100002FD4(a1);
  return sub_10000A16C((uint64_t)v10);
}

uint64_t sub_10000A060(uint64_t a1)
{
  uint64_t v2 = sub_10000264C(&qword_100084248);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10000A0A0(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for Date(255LL);
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_10000A0E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000264C(&qword_100084248);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000A128(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for IDSSampleMessageSchema(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000A16C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for IDSSampleMessageSchema(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10000A1A8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return IDSSampleMessageSchema.init(from:)(a1, a2);
}

uint64_t sub_10000A1BC(void *a1)
{
  return IDSSampleMessageSchema.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for IDSSampleMessageSchema(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v15 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v15);
  }

  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v7 = a2[2];
    a1[2] = v7;
    uint64_t v8 = *(int *)(a3 + 24);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date(0LL);
    uint64_t v12 = *(void *)(v11 - 8);
    unint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain(v7);
    if (v13(v10, 1LL, v11))
    {
      uint64_t v14 = sub_10000264C(&qword_100084248);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
    }

    uint64_t v16 = *(int *)(a3 + 28);
    uint64_t v17 = (char *)v4 + v16;
    uint64_t v18 = (char *)a2 + v16;
    *(void *)uint64_t v17 = *(void *)v18;
    v17[8] = v18[8];
  }

  return v4;
}

uint64_t destroy for IDSSampleMessageSchema(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1LL, v5);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  return result;
}

uint64_t initializeWithCopy for IDSSampleMessageSchema(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 16) = v6;
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain(v6);
  if (v12(v9, 1LL, v10))
  {
    uint64_t v13 = sub_10000264C(&qword_100084248);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
  }

  uint64_t v14 = *(int *)(a3 + 28);
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  *(void *)uint64_t v15 = *(void *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  return a1;
}

void *assignWithCopy for IDSSampleMessageSchema(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1LL, v11);
  int v15 = v13(v10, 1LL, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v9, v10, v11);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }

  if (v15)
  {
LABEL_6:
    uint64_t v16 = sub_10000264C(&qword_100084248);
    memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
LABEL_7:
  uint64_t v17 = *(int *)(a3 + 28);
  uint64_t v18 = (char *)a1 + v17;
  uint64_t v19 = (char *)a2 + v17;
  uint64_t v20 = *(void *)v19;
  v18[8] = v19[8];
  *(void *)uint64_t v18 = v20;
  return a1;
}

uint64_t initializeWithTake for IDSSampleMessageSchema(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9))
  {
    uint64_t v11 = sub_10000264C(&qword_100084248);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0LL, 1LL, v9);
  }

  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  *(void *)uint64_t v13 = *(void *)v14;
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  return a1;
}

uint64_t assignWithTake for IDSSampleMessageSchema(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1LL, v10);
  int v14 = v12(v9, 1LL, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v8, v9, v10);
      goto LABEL_7;
    }

    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }

  if (v14)
  {
LABEL_6:
    uint64_t v15 = sub_10000264C(&qword_100084248);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
LABEL_7:
  uint64_t v16 = *(int *)(a3 + 28);
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  *(void *)uint64_t v17 = *(void *)v18;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for IDSSampleMessageSchema(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10000A80C);
}

uint64_t sub_10000A80C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = sub_10000264C(&qword_100084248);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 24),  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for IDSSampleMessageSchema(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10000A898);
}

uint64_t sub_10000A898(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = sub_10000264C(&qword_100084248);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 24),  a2,  a2,  v7);
  }

  return result;
}

void sub_10000A910(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = &unk_10006ED08;
  sub_10000A998(319LL);
  if (v3 <= 0x3F)
  {
    v4[2] = *(void *)(v2 - 8) + 64LL;
    v4[3] = &unk_10006ED20;
    swift_initStructMetadata(a1, 256LL, 4LL, v4, a1 + 16);
  }

void sub_10000A998(uint64_t a1)
{
  if (!qword_1000842C8)
  {
    uint64_t v2 = type metadata accessor for Date(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_1000842C8);
    }
  }

uint64_t storeEnumTagSinglePayload for IDSSampleMessageSchema.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_10000AA38 + 4 * byte_10006EC99[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10000AA6C + 4 * byte_10006EC94[v4]))();
}

uint64_t sub_10000AA6C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000AA74(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10000AA7CLL);
  }
  return result;
}

uint64_t sub_10000AA88(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10000AA90LL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_10000AA94(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000AA9C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IDSSampleMessageSchema.CodingKeys()
{
  return &type metadata for IDSSampleMessageSchema.CodingKeys;
}

unint64_t sub_10000AABC()
{
  unint64_t result = qword_100084300;
  if (!qword_100084300)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006EE0C, &type metadata for IDSSampleMessageSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084300);
  }

  return result;
}

unint64_t sub_10000AB04()
{
  unint64_t result = qword_100084308;
  if (!qword_100084308)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006ED44, &type metadata for IDSSampleMessageSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084308);
  }

  return result;
}

unint64_t sub_10000AB4C()
{
  unint64_t result = qword_100084310;
  if (!qword_100084310)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006ED6C, &type metadata for IDSSampleMessageSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084310);
  }

  return result;
}

unint64_t sub_10000AB90(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10007CC00, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4) {
    return 4LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_10000ABD8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10000AC14 + 4 * word_10006EE90[a1]))( 0x546567617373656DLL,  0xEB00000000657079LL);
}

unint64_t sub_10000AC14()
{
  return 0xD000000000000010LL;
}

unint64_t sub_10000B074()
{
  return 0xD000000000000016LL;
}

unint64_t sub_10000B08C()
{
  return 0xD000000000000016LL;
}

unint64_t sub_10000B0A4()
{
  return 0xD000000000000016LL;
}

unint64_t sub_10000B0BC()
{
  return 0xD000000000000016LL;
}

unint64_t sub_10000B0D4()
{
  return 0xD000000000000016LL;
}

unint64_t sub_10000B0EC()
{
  return 0xD000000000000016LL;
}

unint64_t sub_10000B104()
{
  return 0xD000000000000016LL;
}

unint64_t sub_10000B11C()
{
  return 0xD000000000000016LL;
}

unint64_t sub_10000B134()
{
  return 0xD000000000000017LL;
}

unint64_t sub_10000B14C()
{
  return 0xD000000000000017LL;
}

unint64_t sub_10000B164()
{
  return 0xD000000000000017LL;
}

unint64_t sub_10000B17C()
{
  return 0xD000000000000017LL;
}

unint64_t sub_10000B194()
{
  return 0xD000000000000017LL;
}

unint64_t sub_10000B1AC()
{
  return 0xD000000000000017LL;
}

unint64_t sub_10000B1C4()
{
  return 0xD000000000000017LL;
}

unint64_t sub_10000B1DC()
{
  return 0xD000000000000017LL;
}

unint64_t sub_10000B1F4()
{
  return 0xD000000000000017LL;
}

unint64_t sub_10000B20C()
{
  return 0xD000000000000017LL;
}

unint64_t sub_10000B224()
{
  return 0xD000000000000017LL;
}

unint64_t sub_10000B23C()
{
  return 0xD000000000000017LL;
}

unint64_t sub_10000B254()
{
  return 0xD000000000000017LL;
}

unint64_t sub_10000B26C()
{
  return 0xD000000000000017LL;
}

unint64_t sub_10000B284()
{
  return 0xD000000000000017LL;
}

unint64_t sub_10000B29C()
{
  return 0xD000000000000017LL;
}

unint64_t sub_10000B2B4()
{
  return 0xD000000000000017LL;
}

unint64_t sub_10000B2CC()
{
  return 0xD000000000000017LL;
}

unint64_t sub_10000B2E4()
{
  return 0xD000000000000017LL;
}

unint64_t sub_10000B2FC()
{
  return 0xD000000000000017LL;
}

unint64_t sub_10000B314()
{
  return 0xD000000000000017LL;
}

unint64_t sub_10000B32C()
{
  return 0xD000000000000017LL;
}

unint64_t sub_10000B344()
{
  return 0xD000000000000017LL;
}

uint64_t sub_10000B35C()
{
  return 0x4C52556572616873LL;
}

uint64_t sub_10000B37C()
{
  return 0x4C52556572616873LL;
}

uint64_t sub_10000B39C()
{
  return 0x4C52556572616873LL;
}

uint64_t sub_10000B3BC()
{
  return 0x4C52556572616873LL;
}

uint64_t sub_10000B3DC()
{
  return 0x4C52556572616873LL;
}

uint64_t sub_10000B3FC()
{
  return 0x4C52556572616873LL;
}

uint64_t sub_10000B41C()
{
  return 0x4C52556572616873LL;
}

uint64_t sub_10000B43C()
{
  return 0x4C52556572616873LL;
}

uint64_t sub_10000B45C()
{
  return 0x4C52556572616873LL;
}

uint64_t sub_10000B478()
{
  return 0x4C52556572616873LL;
}

uint64_t sub_10000B498()
{
  return 0x4C52556572616873LL;
}

uint64_t sub_10000B4B8()
{
  return 0x4C52556572616873LL;
}

uint64_t sub_10000B4D8()
{
  return 0x4C52556572616873LL;
}

uint64_t sub_10000B4F8()
{
  return 0x4C52556572616873LL;
}

uint64_t sub_10000B724()
{
  return 0x7069636974726170LL;
}

uint64_t sub_10000B738()
{
  return 0x7069636974726170LL;
}

uint64_t sub_10000B74C()
{
  return 0x7069636974726170LL;
}

uint64_t sub_10000B760()
{
  return 0x7069636974726170LL;
}

uint64_t sub_10000B774()
{
  return 0x7069636974726170LL;
}

uint64_t sub_10000B788()
{
  return 0x7069636974726170LL;
}

uint64_t sub_10000B79C()
{
  return 0x7069636974726170LL;
}

uint64_t sub_10000B7B0()
{
  return 0x7069636974726170LL;
}

uint64_t sub_10000B7C4()
{
  return 0x7069636974726170LL;
}

uint64_t sub_10000B7D8()
{
  return 0x7069636974726170LL;
}

uint64_t sub_10000B7EC()
{
  return 0x7069636974726170LL;
}

void sub_10000B998()
{
}

uint64_t sub_10000B9BC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2 = *a2;
  uint64_t v3 = sub_10000ABD8(*a1);
  uint64_t v5 = v4;
  uint64_t v6 = sub_10000ABD8(v2);
  if (v3 == v6 && v5 == v7)
  {
    char v10 = 1;
    uint64_t v9 = v5;
  }

  else
  {
    uint64_t v9 = v7;
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
  }

  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

Swift::Int sub_10000BA44()
{
  unsigned __int8 v1 = *v0;
  Hasher.init(_seed:)(v6, 0LL);
  uint64_t v2 = sub_10000ABD8(v1);
  uint64_t v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_10000BAA4(uint64_t a1)
{
  uint64_t v3 = sub_10000ABD8(*v1);
  uint64_t v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_10000BAE4(uint64_t a1)
{
  unsigned __int8 v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  uint64_t v3 = sub_10000ABD8(v2);
  uint64_t v5 = v4;
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_10000BB40@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10000D78C(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_10000BB6C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10000ABD8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10000BB94()
{
  return sub_10000ABD8(*v0);
}

uint64_t sub_10000BB9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10000D78C(a1, a2);
  *a3 = result;
  return result;
}

void sub_10000BBC0(_BYTE *a1@<X8>)
{
  *a1 = -103;
}

uint64_t sub_10000BBCC(uint64_t a1)
{
  unint64_t v2 = sub_10000D6E4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10000BBF4(uint64_t a1)
{
  unint64_t v2 = sub_10000D6E4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SafetyMonitorSchema.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000264C(&qword_100084318);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v315 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100002C78(a1, v9);
  unint64_t v11 = sub_10000D6E4();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for SafetyMonitorSchema.CodingKeys,  &type metadata for SafetyMonitorSchema.CodingKeys,  v11,  v9,  v10);
  double v12 = *v3;
  char v316 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(*(void *)&v12, &v316, v5);
  if (!v2)
  {
    uint64_t v13 = *((void *)v3 + 1);
    char v316 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v13, &v316, v5);
    double v14 = v3[2];
    char v316 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(&v316, v5, v14);
    uint64_t v15 = *((void *)v3 + 3);
    uint64_t v16 = *((void *)v3 + 4);
    char v316 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v15, v16, &v316, v5);
    uint64_t v17 = *((void *)v3 + 5);
    uint64_t v18 = *((void *)v3 + 6);
    char v316 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v17, v18, &v316, v5);
    uint64_t v19 = *((void *)v3 + 7);
    uint64_t v20 = *((void *)v3 + 8);
    char v316 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, v20, &v316, v5);
    uint64_t v21 = *((void *)v3 + 9);
    uint64_t v22 = *((void *)v3 + 10);
    char v316 = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v21, v22, &v316, v5);
    uint64_t v23 = *((void *)v3 + 11);
    uint64_t v24 = *((void *)v3 + 12);
    char v316 = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v23, v24, &v316, v5);
    uint64_t v25 = *((void *)v3 + 13);
    uint64_t v26 = *((void *)v3 + 14);
    char v316 = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v25, v26, &v316, v5);
    uint64_t v27 = *((void *)v3 + 15);
    uint64_t v28 = *((void *)v3 + 16);
    char v316 = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v27, v28, &v316, v5);
    uint64_t v29 = *((void *)v3 + 17);
    uint64_t v30 = *((unsigned __int8 *)v3 + 144);
    char v316 = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v29, v30, &v316, v5);
    uint64_t v31 = *((void *)v3 + 23);
    uint64_t v32 = *((unsigned __int8 *)v3 + 192);
    char v316 = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v31, v32, &v316, v5);
    uint64_t v33 = *((void *)v3 + 25);
    uint64_t v34 = *((void *)v3 + 26);
    char v316 = 12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v33, v34, &v316, v5);
    uint64_t v35 = *((void *)v3 + 27);
    uint64_t v36 = *((unsigned __int8 *)v3 + 224);
    char v316 = 13;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v35, v36, &v316, v5);
    uint64_t v37 = *((void *)v3 + 29);
    uint64_t v38 = *((unsigned __int8 *)v3 + 240);
    char v316 = 14;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v37, v38, &v316, v5);
    uint64_t v39 = *((void *)v3 + 31);
    uint64_t v40 = *((unsigned __int8 *)v3 + 256);
    char v316 = 15;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v39, v40, &v316, v5);
    uint64_t v41 = *((void *)v3 + 33);
    uint64_t v42 = *((unsigned __int8 *)v3 + 272);
    char v316 = 16;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v41, v42, &v316, v5);
    uint64_t v43 = *((void *)v3 + 35);
    uint64_t v44 = *((unsigned __int8 *)v3 + 288);
    char v316 = 17;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v43, v44, &v316, v5);
    uint64_t v45 = *((void *)v3 + 37);
    uint64_t v46 = *((unsigned __int8 *)v3 + 304);
    char v316 = 18;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v45, v46, &v316, v5);
    uint64_t v47 = *((void *)v3 + 39);
    uint64_t v48 = *((unsigned __int8 *)v3 + 320);
    char v316 = 19;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v47, v48, &v316, v5);
    uint64_t v49 = *((void *)v3 + 41);
    uint64_t v50 = *((unsigned __int8 *)v3 + 336);
    char v316 = 20;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v49, v50, &v316, v5);
    uint64_t v51 = *((void *)v3 + 43);
    uint64_t v52 = *((unsigned __int8 *)v3 + 352);
    char v316 = 21;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v51, v52, &v316, v5);
    uint64_t v53 = *((void *)v3 + 45);
    uint64_t v54 = *((unsigned __int8 *)v3 + 368);
    char v316 = 22;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v53, v54, &v316, v5);
    uint64_t v55 = *((void *)v3 + 47);
    uint64_t v56 = *((unsigned __int8 *)v3 + 384);
    char v316 = 23;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v55, v56, &v316, v5);
    uint64_t v57 = *((void *)v3 + 49);
    uint64_t v58 = *((void *)v3 + 50);
    char v316 = 24;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v57, v58, &v316, v5);
    uint64_t v59 = *((void *)v3 + 51);
    uint64_t v60 = *((void *)v3 + 52);
    char v316 = 25;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v59, v60, &v316, v5);
    uint64_t v61 = *((unsigned __int8 *)v3 + 424);
    char v316 = 26;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v61, &v316, v5);
    uint64_t v62 = *((void *)v3 + 19);
    uint64_t v63 = *((unsigned __int8 *)v3 + 160);
    char v316 = 27;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v62, v63, &v316, v5);
    uint64_t v64 = *((void *)v3 + 21);
    uint64_t v65 = *((unsigned __int8 *)v3 + 176);
    char v316 = 28;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v64, v65, &v316, v5);
    uint64_t v66 = *((void *)v3 + 54);
    uint64_t v67 = *((void *)v3 + 55);
    char v316 = 29;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v66, v67, &v316, v5);
    uint64_t v68 = *((void *)v3 + 56);
    uint64_t v69 = *((void *)v3 + 57);
    char v316 = 30;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v68, v69, &v316, v5);
    uint64_t v70 = *((void *)v3 + 58);
    uint64_t v71 = *((void *)v3 + 59);
    char v316 = 31;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v70, v71, &v316, v5);
    uint64_t v72 = *((void *)v3 + 60);
    uint64_t v73 = *((void *)v3 + 61);
    char v316 = 32;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v72, v73, &v316, v5);
    uint64_t v74 = *((void *)v3 + 62);
    uint64_t v75 = *((void *)v3 + 63);
    char v316 = 33;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v74, v75, &v316, v5);
    uint64_t v76 = *((void *)v3 + 64);
    uint64_t v77 = *((void *)v3 + 65);
    char v316 = 34;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v76, v77, &v316, v5);
    uint64_t v78 = *((void *)v3 + 66);
    uint64_t v79 = *((void *)v3 + 67);
    char v316 = 35;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v78, v79, &v316, v5);
    uint64_t v80 = *((void *)v3 + 68);
    uint64_t v81 = *((void *)v3 + 69);
    char v316 = 36;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v80, v81, &v316, v5);
    uint64_t v82 = *((void *)v3 + 70);
    uint64_t v83 = *((void *)v3 + 71);
    char v316 = 37;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v82, v83, &v316, v5);
    uint64_t v84 = *((void *)v3 + 72);
    uint64_t v85 = *((void *)v3 + 73);
    char v316 = 38;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v84, v85, &v316, v5);
    uint64_t v86 = *((void *)v3 + 74);
    uint64_t v87 = *((void *)v3 + 75);
    char v316 = 39;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v86, v87, &v316, v5);
    uint64_t v88 = *((void *)v3 + 76);
    uint64_t v89 = *((void *)v3 + 77);
    char v316 = 40;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v88, v89, &v316, v5);
    uint64_t v90 = *((void *)v3 + 78);
    uint64_t v91 = *((void *)v3 + 79);
    char v316 = 41;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v90, v91, &v316, v5);
    uint64_t v92 = *((void *)v3 + 80);
    uint64_t v93 = *((void *)v3 + 81);
    char v316 = 42;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v92, v93, &v316, v5);
    uint64_t v94 = *((void *)v3 + 82);
    uint64_t v95 = *((void *)v3 + 83);
    char v316 = 43;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v94, v95, &v316, v5);
    uint64_t v96 = *((void *)v3 + 84);
    uint64_t v97 = *((void *)v3 + 85);
    char v316 = 44;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v96, v97, &v316, v5);
    uint64_t v98 = *((void *)v3 + 86);
    uint64_t v99 = *((void *)v3 + 87);
    char v316 = 45;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v98, v99, &v316, v5);
    uint64_t v100 = *((void *)v3 + 88);
    uint64_t v101 = *((void *)v3 + 89);
    char v316 = 46;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v100, v101, &v316, v5);
    uint64_t v102 = *((void *)v3 + 90);
    uint64_t v103 = *((void *)v3 + 91);
    char v316 = 47;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v102, v103, &v316, v5);
    uint64_t v104 = *((void *)v3 + 92);
    uint64_t v105 = *((void *)v3 + 93);
    char v316 = 48;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v104, v105, &v316, v5);
    uint64_t v106 = *((void *)v3 + 94);
    uint64_t v107 = *((void *)v3 + 95);
    char v316 = 49;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v106, v107, &v316, v5);
    uint64_t v108 = *((void *)v3 + 96);
    uint64_t v109 = *((void *)v3 + 97);
    char v316 = 50;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v108, v109, &v316, v5);
    uint64_t v110 = *((void *)v3 + 98);
    uint64_t v111 = *((void *)v3 + 99);
    char v316 = 51;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v110, v111, &v316, v5);
    uint64_t v112 = *((void *)v3 + 100);
    uint64_t v113 = *((void *)v3 + 101);
    char v316 = 52;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v112, v113, &v316, v5);
    uint64_t v114 = *((void *)v3 + 102);
    uint64_t v115 = *((void *)v3 + 103);
    char v316 = 53;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v114, v115, &v316, v5);
    uint64_t v116 = *((void *)v3 + 104);
    uint64_t v117 = *((void *)v3 + 105);
    char v316 = 54;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v116, v117, &v316, v5);
    uint64_t v118 = *((void *)v3 + 106);
    uint64_t v119 = *((void *)v3 + 107);
    char v316 = 55;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v118, v119, &v316, v5);
    uint64_t v120 = *((void *)v3 + 108);
    uint64_t v121 = *((void *)v3 + 109);
    char v316 = 56;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v120, v121, &v316, v5);
    uint64_t v122 = *((void *)v3 + 110);
    uint64_t v123 = *((void *)v3 + 111);
    char v316 = 57;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v122, v123, &v316, v5);
    uint64_t v124 = *((void *)v3 + 112);
    uint64_t v125 = *((void *)v3 + 113);
    char v316 = 58;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v124, v125, &v316, v5);
    uint64_t v126 = *((void *)v3 + 114);
    uint64_t v127 = *((void *)v3 + 115);
    char v316 = 59;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v126, v127, &v316, v5);
    uint64_t v128 = *((void *)v3 + 116);
    uint64_t v129 = *((void *)v3 + 117);
    char v316 = 60;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v128, v129, &v316, v5);
    uint64_t v130 = *((void *)v3 + 118);
    uint64_t v131 = *((void *)v3 + 119);
    char v316 = 61;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v130, v131, &v316, v5);
    uint64_t v132 = *((void *)v3 + 120);
    uint64_t v133 = *((void *)v3 + 121);
    char v316 = 62;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v132, v133, &v316, v5);
    uint64_t v134 = *((void *)v3 + 122);
    uint64_t v135 = *((void *)v3 + 123);
    char v316 = 63;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v134, v135, &v316, v5);
    uint64_t v136 = *((void *)v3 + 124);
    uint64_t v137 = *((void *)v3 + 125);
    char v316 = 64;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v136, v137, &v316, v5);
    uint64_t v138 = *((void *)v3 + 126);
    uint64_t v139 = *((void *)v3 + 127);
    char v316 = 65;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v138, v139, &v316, v5);
    uint64_t v140 = *((void *)v3 + 128);
    uint64_t v141 = *((void *)v3 + 129);
    char v316 = 66;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v140, v141, &v316, v5);
    uint64_t v142 = *((void *)v3 + 130);
    uint64_t v143 = *((void *)v3 + 131);
    char v316 = 67;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v142, v143, &v316, v5);
    uint64_t v144 = *((void *)v3 + 132);
    uint64_t v145 = *((void *)v3 + 133);
    char v316 = 68;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v144, v145, &v316, v5);
    uint64_t v146 = *((void *)v3 + 134);
    uint64_t v147 = *((void *)v3 + 135);
    char v316 = 69;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v146, v147, &v316, v5);
    uint64_t v148 = *((void *)v3 + 136);
    uint64_t v149 = *((void *)v3 + 137);
    char v316 = 70;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v148, v149, &v316, v5);
    uint64_t v150 = *((void *)v3 + 138);
    uint64_t v151 = *((void *)v3 + 139);
    char v316 = 71;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v150, v151, &v316, v5);
    uint64_t v152 = *((void *)v3 + 140);
    uint64_t v153 = *((void *)v3 + 141);
    char v316 = 72;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v152, v153, &v316, v5);
    uint64_t v154 = *((void *)v3 + 142);
    uint64_t v155 = *((void *)v3 + 143);
    char v316 = 73;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v154, v155, &v316, v5);
    uint64_t v156 = *((void *)v3 + 144);
    uint64_t v157 = *((void *)v3 + 145);
    char v316 = 74;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v156, v157, &v316, v5);
    uint64_t v158 = *((void *)v3 + 146);
    uint64_t v159 = *((void *)v3 + 147);
    char v316 = 75;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v158, v159, &v316, v5);
    uint64_t v160 = *((void *)v3 + 148);
    uint64_t v161 = *((void *)v3 + 149);
    char v316 = 76;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v160, v161, &v316, v5);
    uint64_t v162 = *((void *)v3 + 150);
    uint64_t v163 = *((void *)v3 + 151);
    char v316 = 77;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v162, v163, &v316, v5);
    uint64_t v164 = *((void *)v3 + 152);
    uint64_t v165 = *((void *)v3 + 153);
    char v316 = 78;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v164, v165, &v316, v5);
    uint64_t v166 = *((void *)v3 + 154);
    uint64_t v167 = *((void *)v3 + 155);
    char v316 = 79;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v166, v167, &v316, v5);
    uint64_t v168 = *((void *)v3 + 156);
    uint64_t v169 = *((void *)v3 + 157);
    char v316 = 80;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v168, v169, &v316, v5);
    uint64_t v170 = *((void *)v3 + 158);
    uint64_t v171 = *((void *)v3 + 159);
    char v316 = 81;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v170, v171, &v316, v5);
    uint64_t v172 = *((void *)v3 + 160);
    uint64_t v173 = *((void *)v3 + 161);
    char v316 = 82;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v172, v173, &v316, v5);
    uint64_t v174 = *((void *)v3 + 162);
    uint64_t v175 = *((void *)v3 + 163);
    char v316 = 83;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v174, v175, &v316, v5);
    uint64_t v176 = *((void *)v3 + 164);
    uint64_t v177 = *((void *)v3 + 165);
    char v316 = 84;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v176, v177, &v316, v5);
    uint64_t v178 = *((void *)v3 + 166);
    uint64_t v179 = *((void *)v3 + 167);
    char v316 = 85;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v178, v179, &v316, v5);
    uint64_t v180 = *((void *)v3 + 168);
    uint64_t v181 = *((void *)v3 + 169);
    char v316 = 86;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v180, v181, &v316, v5);
    uint64_t v182 = *((void *)v3 + 170);
    uint64_t v183 = *((void *)v3 + 171);
    char v316 = 87;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v182, v183, &v316, v5);
    uint64_t v184 = *((void *)v3 + 172);
    uint64_t v185 = *((void *)v3 + 173);
    char v316 = 88;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v184, v185, &v316, v5);
    uint64_t v186 = *((void *)v3 + 174);
    uint64_t v187 = *((void *)v3 + 175);
    char v316 = 89;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v186, v187, &v316, v5);
    uint64_t v188 = *((void *)v3 + 176);
    uint64_t v189 = *((void *)v3 + 177);
    char v316 = 90;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v188, v189, &v316, v5);
    uint64_t v190 = *((void *)v3 + 178);
    uint64_t v191 = *((void *)v3 + 179);
    char v316 = 91;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v190, v191, &v316, v5);
    uint64_t v192 = *((void *)v3 + 180);
    uint64_t v193 = *((void *)v3 + 181);
    char v316 = 92;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v192, v193, &v316, v5);
    uint64_t v194 = *((void *)v3 + 182);
    uint64_t v195 = *((void *)v3 + 183);
    char v316 = 93;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v194, v195, &v316, v5);
    uint64_t v196 = *((void *)v3 + 184);
    uint64_t v197 = *((void *)v3 + 185);
    char v316 = 94;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v196, v197, &v316, v5);
    uint64_t v198 = *((void *)v3 + 186);
    uint64_t v199 = *((void *)v3 + 187);
    char v316 = 95;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v198, v199, &v316, v5);
    uint64_t v200 = *((void *)v3 + 188);
    uint64_t v201 = *((void *)v3 + 189);
    char v316 = 96;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v200, v201, &v316, v5);
    uint64_t v202 = *((void *)v3 + 190);
    uint64_t v203 = *((void *)v3 + 191);
    char v316 = 97;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v202, v203, &v316, v5);
    uint64_t v204 = *((void *)v3 + 192);
    uint64_t v205 = *((void *)v3 + 193);
    char v316 = 98;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v204, v205, &v316, v5);
    uint64_t v206 = *((void *)v3 + 194);
    uint64_t v207 = *((void *)v3 + 195);
    char v316 = 99;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v206, v207, &v316, v5);
    uint64_t v208 = *((void *)v3 + 196);
    uint64_t v209 = *((void *)v3 + 197);
    char v316 = 100;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v208, v209, &v316, v5);
    uint64_t v210 = *((void *)v3 + 198);
    uint64_t v211 = *((void *)v3 + 199);
    char v316 = 101;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v210, v211, &v316, v5);
    uint64_t v212 = *((void *)v3 + 200);
    uint64_t v213 = *((void *)v3 + 201);
    char v316 = 102;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v212, v213, &v316, v5);
    uint64_t v214 = *((void *)v3 + 202);
    uint64_t v215 = *((void *)v3 + 203);
    char v316 = 103;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v214, v215, &v316, v5);
    uint64_t v216 = *((void *)v3 + 204);
    uint64_t v217 = *((void *)v3 + 205);
    char v316 = 104;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v216, v217, &v316, v5);
    uint64_t v218 = *((void *)v3 + 206);
    uint64_t v219 = *((void *)v3 + 207);
    char v316 = 105;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v218, v219, &v316, v5);
    uint64_t v220 = *((void *)v3 + 208);
    uint64_t v221 = *((void *)v3 + 209);
    char v316 = 106;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v220, v221, &v316, v5);
    uint64_t v222 = *((void *)v3 + 210);
    uint64_t v223 = *((void *)v3 + 211);
    char v316 = 107;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v222, v223, &v316, v5);
    uint64_t v224 = *((void *)v3 + 212);
    uint64_t v225 = *((void *)v3 + 213);
    char v316 = 108;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v224, v225, &v316, v5);
    uint64_t v226 = *((void *)v3 + 214);
    uint64_t v227 = *((void *)v3 + 215);
    char v316 = 109;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v226, v227, &v316, v5);
    uint64_t v228 = *((void *)v3 + 216);
    uint64_t v229 = *((void *)v3 + 217);
    char v316 = 110;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v228, v229, &v316, v5);
    uint64_t v230 = *((void *)v3 + 218);
    uint64_t v231 = *((void *)v3 + 219);
    char v316 = 111;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v230, v231, &v316, v5);
    uint64_t v232 = *((void *)v3 + 220);
    uint64_t v233 = *((void *)v3 + 221);
    char v316 = 112;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v232, v233, &v316, v5);
    uint64_t v234 = *((void *)v3 + 222);
    uint64_t v235 = *((void *)v3 + 223);
    char v316 = 113;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v234, v235, &v316, v5);
    uint64_t v236 = *((void *)v3 + 224);
    uint64_t v237 = *((void *)v3 + 225);
    char v316 = 114;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v236, v237, &v316, v5);
    uint64_t v238 = *((void *)v3 + 226);
    uint64_t v239 = *((void *)v3 + 227);
    char v316 = 115;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v238, v239, &v316, v5);
    uint64_t v240 = *((void *)v3 + 228);
    uint64_t v241 = *((void *)v3 + 229);
    char v316 = 116;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v240, v241, &v316, v5);
    uint64_t v242 = *((void *)v3 + 230);
    uint64_t v243 = *((void *)v3 + 231);
    char v316 = 117;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v242, v243, &v316, v5);
    uint64_t v244 = *((void *)v3 + 232);
    uint64_t v245 = *((void *)v3 + 233);
    char v316 = 118;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v244, v245, &v316, v5);
    uint64_t v246 = *((void *)v3 + 234);
    uint64_t v247 = *((void *)v3 + 235);
    char v316 = 119;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v246, v247, &v316, v5);
    uint64_t v248 = *((void *)v3 + 236);
    uint64_t v249 = *((void *)v3 + 237);
    char v316 = 120;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v248, v249, &v316, v5);
    uint64_t v250 = *((void *)v3 + 238);
    uint64_t v251 = *((void *)v3 + 239);
    char v316 = 121;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v250, v251, &v316, v5);
    uint64_t v252 = *((void *)v3 + 240);
    uint64_t v253 = *((void *)v3 + 241);
    char v316 = 122;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v252, v253, &v316, v5);
    uint64_t v254 = *((void *)v3 + 242);
    uint64_t v255 = *((void *)v3 + 243);
    char v316 = 123;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v254, v255, &v316, v5);
    uint64_t v256 = *((void *)v3 + 244);
    uint64_t v257 = *((void *)v3 + 245);
    char v316 = 124;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v256, v257, &v316, v5);
    uint64_t v258 = *((void *)v3 + 246);
    uint64_t v259 = *((void *)v3 + 247);
    char v316 = 125;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v258, v259, &v316, v5);
    uint64_t v260 = *((void *)v3 + 248);
    uint64_t v261 = *((void *)v3 + 249);
    char v316 = 126;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v260, v261, &v316, v5);
    uint64_t v262 = *((void *)v3 + 250);
    uint64_t v263 = *((void *)v3 + 251);
    char v316 = 127;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v262, v263, &v316, v5);
    uint64_t v264 = *((void *)v3 + 252);
    uint64_t v265 = *((void *)v3 + 253);
    char v316 = 0x80;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v264, v265, &v316, v5);
    uint64_t v266 = *((void *)v3 + 254);
    uint64_t v267 = *((void *)v3 + 255);
    char v316 = -127;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v266, v267, &v316, v5);
    uint64_t v268 = *((void *)v3 + 256);
    uint64_t v269 = *((void *)v3 + 257);
    char v316 = -126;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v268, v269, &v316, v5);
    uint64_t v270 = *((void *)v3 + 258);
    uint64_t v271 = *((void *)v3 + 259);
    char v316 = -125;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v270, v271, &v316, v5);
    uint64_t v272 = *((void *)v3 + 260);
    uint64_t v273 = *((void *)v3 + 261);
    char v316 = -124;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v272, v273, &v316, v5);
    uint64_t v274 = *((void *)v3 + 262);
    uint64_t v275 = *((void *)v3 + 263);
    char v316 = -123;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v274, v275, &v316, v5);
    uint64_t v276 = *((void *)v3 + 264);
    uint64_t v277 = *((void *)v3 + 265);
    char v316 = -122;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v276, v277, &v316, v5);
    uint64_t v278 = *((void *)v3 + 266);
    uint64_t v279 = *((void *)v3 + 267);
    char v316 = -121;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v278, v279, &v316, v5);
    uint64_t v280 = *((void *)v3 + 268);
    uint64_t v281 = *((void *)v3 + 269);
    char v316 = -120;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v280, v281, &v316, v5);
    uint64_t v282 = *((void *)v3 + 270);
    uint64_t v283 = *((void *)v3 + 271);
    char v316 = -119;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v282, v283, &v316, v5);
    uint64_t v284 = *((void *)v3 + 272);
    uint64_t v285 = *((void *)v3 + 273);
    char v316 = -118;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v284, v285, &v316, v5);
    uint64_t v286 = *((void *)v3 + 274);
    uint64_t v287 = *((void *)v3 + 275);
    char v316 = -117;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v286, v287, &v316, v5);
    uint64_t v288 = *((void *)v3 + 276);
    uint64_t v289 = *((void *)v3 + 277);
    char v316 = -116;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v288, v289, &v316, v5);
    uint64_t v290 = *((void *)v3 + 278);
    uint64_t v291 = *((void *)v3 + 279);
    char v316 = -115;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v290, v291, &v316, v5);
    uint64_t v292 = *((void *)v3 + 280);
    uint64_t v293 = *((void *)v3 + 281);
    char v316 = -114;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v292, v293, &v316, v5);
    uint64_t v294 = *((void *)v3 + 282);
    uint64_t v295 = *((void *)v3 + 283);
    char v316 = -113;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v294, v295, &v316, v5);
    uint64_t v296 = *((void *)v3 + 284);
    uint64_t v297 = *((void *)v3 + 285);
    char v316 = -112;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v296, v297, &v316, v5);
    uint64_t v298 = *((void *)v3 + 286);
    uint64_t v299 = *((void *)v3 + 287);
    char v316 = -111;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v298, v299, &v316, v5);
    uint64_t v300 = *((void *)v3 + 288);
    uint64_t v301 = *((void *)v3 + 289);
    char v316 = -110;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v300, v301, &v316, v5);
    uint64_t v302 = *((void *)v3 + 290);
    uint64_t v303 = *((void *)v3 + 291);
    char v316 = -109;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v302, v303, &v316, v5);
    uint64_t v304 = *((void *)v3 + 292);
    uint64_t v305 = *((void *)v3 + 293);
    char v316 = -108;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v304, v305, &v316, v5);
    uint64_t v306 = *((void *)v3 + 294);
    uint64_t v307 = *((void *)v3 + 295);
    char v316 = -107;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v306, v307, &v316, v5);
    uint64_t v308 = *((void *)v3 + 296);
    uint64_t v309 = *((void *)v3 + 297);
    char v316 = -106;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v308, v309, &v316, v5);
    uint64_t v310 = *((void *)v3 + 298);
    uint64_t v311 = *((void *)v3 + 299);
    char v316 = -105;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v310, v311, &v316, v5);
    uint64_t v312 = *((void *)v3 + 300);
    uint64_t v313 = *((void *)v3 + 301);
    char v316 = -104;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v312, v313, &v316, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_10000D6E4()
{
  unint64_t result = qword_100084320;
  if (!qword_100084320)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006F230, &type metadata for SafetyMonitorSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084320);
  }

  return result;
}

void *SafetyMonitorSchema.init(from:)@<X0>(void *a1@<X8>)
{
  unint64_t result = sub_10000DC00(v4);
  if (!v1) {
    return memcpy(a1, v4, 0x970uLL);
  }
  return result;
}

uint64_t sub_10000D778(void *a1)
{
  return SafetyMonitorSchema.encode(to:)(a1);
}

uint64_t sub_10000D78C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_10007CC80, a1, a2, &unk_100084000);
  swift_bridgeObjectRelease(a2);
  uint64_t v4 = 0LL;
  uint64_t result = 45LL;
  switch(v3)
  {
    case 0LL:
      goto LABEL_49;
    case 1LL:
      uint64_t v4 = 1LL;
      goto LABEL_49;
    case 2LL:
      uint64_t v4 = 2LL;
      goto LABEL_49;
    case 3LL:
      uint64_t v4 = 3LL;
      goto LABEL_49;
    case 4LL:
      uint64_t v4 = 4LL;
      goto LABEL_49;
    case 5LL:
      uint64_t v4 = 5LL;
      goto LABEL_49;
    case 6LL:
      uint64_t v4 = 6LL;
      goto LABEL_49;
    case 7LL:
      uint64_t v4 = 7LL;
      goto LABEL_49;
    case 8LL:
      uint64_t v4 = 8LL;
      goto LABEL_49;
    case 9LL:
      uint64_t v4 = 9LL;
      goto LABEL_49;
    case 10LL:
      uint64_t v4 = 10LL;
      goto LABEL_49;
    case 11LL:
      uint64_t v4 = 11LL;
      goto LABEL_49;
    case 12LL:
      uint64_t v4 = 12LL;
      goto LABEL_49;
    case 13LL:
      uint64_t v4 = 13LL;
      goto LABEL_49;
    case 14LL:
      uint64_t v4 = 14LL;
      goto LABEL_49;
    case 15LL:
      uint64_t v4 = 15LL;
      goto LABEL_49;
    case 16LL:
      uint64_t v4 = 16LL;
      goto LABEL_49;
    case 17LL:
      uint64_t v4 = 17LL;
      goto LABEL_49;
    case 18LL:
      uint64_t v4 = 18LL;
      goto LABEL_49;
    case 19LL:
      uint64_t v4 = 19LL;
      goto LABEL_49;
    case 20LL:
      uint64_t v4 = 20LL;
      goto LABEL_49;
    case 21LL:
      uint64_t v4 = 21LL;
      goto LABEL_49;
    case 22LL:
      uint64_t v4 = 22LL;
      goto LABEL_49;
    case 23LL:
      uint64_t v4 = 23LL;
      goto LABEL_49;
    case 24LL:
      uint64_t v4 = 24LL;
      goto LABEL_49;
    case 25LL:
      uint64_t v4 = 25LL;
      goto LABEL_49;
    case 26LL:
      uint64_t v4 = 26LL;
      goto LABEL_49;
    case 27LL:
      uint64_t v4 = 27LL;
      goto LABEL_49;
    case 28LL:
      uint64_t v4 = 28LL;
      goto LABEL_49;
    case 29LL:
      uint64_t v4 = 29LL;
      goto LABEL_49;
    case 30LL:
      uint64_t v4 = 30LL;
      goto LABEL_49;
    case 31LL:
      uint64_t v4 = 31LL;
      goto LABEL_49;
    case 32LL:
      uint64_t v4 = 32LL;
      goto LABEL_49;
    case 33LL:
      uint64_t v4 = 33LL;
      goto LABEL_49;
    case 34LL:
      uint64_t v4 = 34LL;
      goto LABEL_49;
    case 35LL:
      uint64_t v4 = 35LL;
      goto LABEL_49;
    case 36LL:
      uint64_t v4 = 36LL;
      goto LABEL_49;
    case 37LL:
      uint64_t v4 = 37LL;
      goto LABEL_49;
    case 38LL:
      uint64_t v4 = 38LL;
      goto LABEL_49;
    case 39LL:
      uint64_t v4 = 39LL;
      goto LABEL_49;
    case 40LL:
      uint64_t v4 = 40LL;
      goto LABEL_49;
    case 41LL:
      uint64_t v4 = 41LL;
      goto LABEL_49;
    case 42LL:
      uint64_t v4 = 42LL;
      goto LABEL_49;
    case 43LL:
      uint64_t v4 = 43LL;
      goto LABEL_49;
    case 44LL:
      uint64_t v4 = 44LL;
LABEL_49:
      uint64_t result = v4;
      break;
    case 45LL:
      return result;
    case 46LL:
      uint64_t result = 46LL;
      break;
    case 47LL:
      uint64_t result = 47LL;
      break;
    case 48LL:
      uint64_t result = 48LL;
      break;
    case 49LL:
      uint64_t result = 49LL;
      break;
    case 50LL:
      uint64_t result = 50LL;
      break;
    case 51LL:
      uint64_t result = 51LL;
      break;
    case 52LL:
      uint64_t result = 52LL;
      break;
    case 53LL:
      uint64_t result = 53LL;
      break;
    case 54LL:
      uint64_t result = 54LL;
      break;
    case 55LL:
      uint64_t result = 55LL;
      break;
    case 56LL:
      uint64_t result = 56LL;
      break;
    case 57LL:
      uint64_t result = 57LL;
      break;
    case 58LL:
      uint64_t result = 58LL;
      break;
    case 59LL:
      uint64_t result = 59LL;
      break;
    case 60LL:
      uint64_t result = 60LL;
      break;
    case 61LL:
      uint64_t result = 61LL;
      break;
    case 62LL:
      uint64_t result = 62LL;
      break;
    case 63LL:
      uint64_t result = 63LL;
      break;
    case 64LL:
      uint64_t result = 64LL;
      break;
    case 65LL:
      uint64_t result = 65LL;
      break;
    case 66LL:
      uint64_t result = 66LL;
      break;
    case 67LL:
      uint64_t result = 67LL;
      break;
    case 68LL:
      uint64_t result = 68LL;
      break;
    case 69LL:
      uint64_t result = 69LL;
      break;
    case 70LL:
      uint64_t result = 70LL;
      break;
    case 71LL:
      uint64_t result = 71LL;
      break;
    case 72LL:
      uint64_t result = 72LL;
      break;
    case 73LL:
      uint64_t result = 73LL;
      break;
    case 74LL:
      uint64_t result = 74LL;
      break;
    case 75LL:
      uint64_t result = 75LL;
      break;
    case 76LL:
      uint64_t result = 76LL;
      break;
    case 77LL:
      uint64_t result = 77LL;
      break;
    case 78LL:
      uint64_t result = 78LL;
      break;
    case 79LL:
      uint64_t result = 79LL;
      break;
    case 80LL:
      uint64_t result = 80LL;
      break;
    case 81LL:
      uint64_t result = 81LL;
      break;
    case 82LL:
      uint64_t result = 82LL;
      break;
    case 83LL:
      uint64_t result = 83LL;
      break;
    case 84LL:
      uint64_t result = 84LL;
      break;
    case 85LL:
      uint64_t result = 85LL;
      break;
    case 86LL:
      uint64_t result = 86LL;
      break;
    case 87LL:
      uint64_t result = 87LL;
      break;
    case 88LL:
      uint64_t result = 88LL;
      break;
    case 89LL:
      uint64_t result = 89LL;
      break;
    case 90LL:
      uint64_t result = 90LL;
      break;
    case 91LL:
      uint64_t result = 91LL;
      break;
    case 92LL:
      uint64_t result = 92LL;
      break;
    case 93LL:
      uint64_t result = 93LL;
      break;
    case 94LL:
      uint64_t result = 94LL;
      break;
    case 95LL:
      uint64_t result = 95LL;
      break;
    case 96LL:
      uint64_t result = 96LL;
      break;
    case 97LL:
      uint64_t result = 97LL;
      break;
    case 98LL:
      uint64_t result = 98LL;
      break;
    case 99LL:
      uint64_t result = 99LL;
      break;
    case 100LL:
      uint64_t result = 100LL;
      break;
    case 101LL:
      uint64_t result = 101LL;
      break;
    case 102LL:
      uint64_t result = 102LL;
      break;
    case 103LL:
      uint64_t result = 103LL;
      break;
    case 104LL:
      uint64_t result = 104LL;
      break;
    case 105LL:
      uint64_t result = 105LL;
      break;
    case 106LL:
      uint64_t result = 106LL;
      break;
    case 107LL:
      uint64_t result = 107LL;
      break;
    case 108LL:
      uint64_t result = 108LL;
      break;
    case 109LL:
      uint64_t result = 109LL;
      break;
    case 110LL:
      uint64_t result = 110LL;
      break;
    case 111LL:
      uint64_t result = 111LL;
      break;
    case 112LL:
      uint64_t result = 112LL;
      break;
    case 113LL:
      uint64_t result = 113LL;
      break;
    case 114LL:
      uint64_t result = 114LL;
      break;
    case 115LL:
      uint64_t result = 115LL;
      break;
    case 116LL:
      uint64_t result = 116LL;
      break;
    case 117LL:
      uint64_t result = 117LL;
      break;
    case 118LL:
      uint64_t result = 118LL;
      break;
    case 119LL:
      uint64_t result = 119LL;
      break;
    case 120LL:
      uint64_t result = 120LL;
      break;
    case 121LL:
      uint64_t result = 121LL;
      break;
    case 122LL:
      uint64_t result = 122LL;
      break;
    case 123LL:
      uint64_t result = 123LL;
      break;
    case 124LL:
      uint64_t result = 124LL;
      break;
    case 125LL:
      uint64_t result = 125LL;
      break;
    case 126LL:
      uint64_t result = 126LL;
      break;
    case 127LL:
      uint64_t result = 127LL;
      break;
    default:
      else {
        uint64_t result = v3 | 0xFFFFFF80;
      }
      break;
  }

  return result;
}

#error "10000DC00: too big function (funcsize=0)"
uint64_t destroy for SafetyMonitorSchema(void *a1)
{
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(a1[10]);
  swift_bridgeObjectRelease(a1[12]);
  swift_bridgeObjectRelease(a1[14]);
  swift_bridgeObjectRelease(a1[16]);
  swift_bridgeObjectRelease(a1[26]);
  swift_bridgeObjectRelease(a1[50]);
  swift_bridgeObjectRelease(a1[52]);
  swift_bridgeObjectRelease(a1[55]);
  swift_bridgeObjectRelease(a1[57]);
  swift_bridgeObjectRelease(a1[59]);
  swift_bridgeObjectRelease(a1[61]);
  swift_bridgeObjectRelease(a1[63]);
  swift_bridgeObjectRelease(a1[65]);
  swift_bridgeObjectRelease(a1[67]);
  swift_bridgeObjectRelease(a1[69]);
  swift_bridgeObjectRelease(a1[71]);
  swift_bridgeObjectRelease(a1[73]);
  swift_bridgeObjectRelease(a1[75]);
  swift_bridgeObjectRelease(a1[77]);
  swift_bridgeObjectRelease(a1[79]);
  swift_bridgeObjectRelease(a1[81]);
  swift_bridgeObjectRelease(a1[83]);
  swift_bridgeObjectRelease(a1[85]);
  swift_bridgeObjectRelease(a1[87]);
  swift_bridgeObjectRelease(a1[89]);
  swift_bridgeObjectRelease(a1[91]);
  swift_bridgeObjectRelease(a1[93]);
  swift_bridgeObjectRelease(a1[95]);
  swift_bridgeObjectRelease(a1[97]);
  swift_bridgeObjectRelease(a1[99]);
  swift_bridgeObjectRelease(a1[101]);
  swift_bridgeObjectRelease(a1[103]);
  swift_bridgeObjectRelease(a1[105]);
  swift_bridgeObjectRelease(a1[107]);
  swift_bridgeObjectRelease(a1[109]);
  swift_bridgeObjectRelease(a1[111]);
  swift_bridgeObjectRelease(a1[113]);
  swift_bridgeObjectRelease(a1[115]);
  swift_bridgeObjectRelease(a1[117]);
  swift_bridgeObjectRelease(a1[119]);
  swift_bridgeObjectRelease(a1[121]);
  swift_bridgeObjectRelease(a1[123]);
  swift_bridgeObjectRelease(a1[125]);
  swift_bridgeObjectRelease(a1[127]);
  swift_bridgeObjectRelease(a1[129]);
  swift_bridgeObjectRelease(a1[131]);
  swift_bridgeObjectRelease(a1[133]);
  swift_bridgeObjectRelease(a1[135]);
  swift_bridgeObjectRelease(a1[137]);
  swift_bridgeObjectRelease(a1[139]);
  swift_bridgeObjectRelease(a1[141]);
  swift_bridgeObjectRelease(a1[143]);
  swift_bridgeObjectRelease(a1[145]);
  swift_bridgeObjectRelease(a1[147]);
  swift_bridgeObjectRelease(a1[149]);
  swift_bridgeObjectRelease(a1[151]);
  swift_bridgeObjectRelease(a1[153]);
  swift_bridgeObjectRelease(a1[155]);
  swift_bridgeObjectRelease(a1[157]);
  swift_bridgeObjectRelease(a1[159]);
  swift_bridgeObjectRelease(a1[161]);
  swift_bridgeObjectRelease(a1[163]);
  swift_bridgeObjectRelease(a1[165]);
  swift_bridgeObjectRelease(a1[167]);
  swift_bridgeObjectRelease(a1[169]);
  swift_bridgeObjectRelease(a1[171]);
  swift_bridgeObjectRelease(a1[173]);
  swift_bridgeObjectRelease(a1[175]);
  swift_bridgeObjectRelease(a1[177]);
  swift_bridgeObjectRelease(a1[179]);
  swift_bridgeObjectRelease(a1[181]);
  swift_bridgeObjectRelease(a1[183]);
  swift_bridgeObjectRelease(a1[185]);
  swift_bridgeObjectRelease(a1[187]);
  swift_bridgeObjectRelease(a1[189]);
  swift_bridgeObjectRelease(a1[191]);
  swift_bridgeObjectRelease(a1[193]);
  swift_bridgeObjectRelease(a1[195]);
  swift_bridgeObjectRelease(a1[197]);
  swift_bridgeObjectRelease(a1[199]);
  swift_bridgeObjectRelease(a1[201]);
  swift_bridgeObjectRelease(a1[203]);
  swift_bridgeObjectRelease(a1[205]);
  swift_bridgeObjectRelease(a1[207]);
  swift_bridgeObjectRelease(a1[209]);
  swift_bridgeObjectRelease(a1[211]);
  swift_bridgeObjectRelease(a1[213]);
  swift_bridgeObjectRelease(a1[215]);
  swift_bridgeObjectRelease(a1[217]);
  swift_bridgeObjectRelease(a1[219]);
  swift_bridgeObjectRelease(a1[221]);
  swift_bridgeObjectRelease(a1[223]);
  swift_bridgeObjectRelease(a1[225]);
  swift_bridgeObjectRelease(a1[227]);
  swift_bridgeObjectRelease(a1[229]);
  swift_bridgeObjectRelease(a1[231]);
  swift_bridgeObjectRelease(a1[233]);
  swift_bridgeObjectRelease(a1[235]);
  swift_bridgeObjectRelease(a1[237]);
  swift_bridgeObjectRelease(a1[239]);
  swift_bridgeObjectRelease(a1[241]);
  swift_bridgeObjectRelease(a1[243]);
  swift_bridgeObjectRelease(a1[245]);
  swift_bridgeObjectRelease(a1[247]);
  swift_bridgeObjectRelease(a1[249]);
  swift_bridgeObjectRelease(a1[251]);
  swift_bridgeObjectRelease(a1[253]);
  swift_bridgeObjectRelease(a1[255]);
  swift_bridgeObjectRelease(a1[257]);
  swift_bridgeObjectRelease(a1[259]);
  swift_bridgeObjectRelease(a1[261]);
  swift_bridgeObjectRelease(a1[263]);
  swift_bridgeObjectRelease(a1[265]);
  swift_bridgeObjectRelease(a1[267]);
  swift_bridgeObjectRelease(a1[269]);
  swift_bridgeObjectRelease(a1[271]);
  swift_bridgeObjectRelease(a1[273]);
  swift_bridgeObjectRelease(a1[275]);
  swift_bridgeObjectRelease(a1[277]);
  swift_bridgeObjectRelease(a1[279]);
  swift_bridgeObjectRelease(a1[281]);
  swift_bridgeObjectRelease(a1[283]);
  swift_bridgeObjectRelease(a1[285]);
  swift_bridgeObjectRelease(a1[287]);
  swift_bridgeObjectRelease(a1[289]);
  swift_bridgeObjectRelease(a1[291]);
  swift_bridgeObjectRelease(a1[293]);
  swift_bridgeObjectRelease(a1[295]);
  swift_bridgeObjectRelease(a1[297]);
  swift_bridgeObjectRelease(a1[299]);
  return swift_bridgeObjectRelease(a1[301]);
}

uint64_t initializeWithCopy for SafetyMonitorSchema(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 376);
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v6;
  uint64_t v7 = *(void *)(a2 + 56);
  uint64_t v156 = *(void *)(a2 + 48);
  *(void *)(a1 + 48) = v156;
  *(void *)(a1 + 56) = v7;
  uint64_t v8 = *(void *)(a2 + 72);
  uint64_t v155 = *(void *)(a2 + 64);
  *(void *)(a1 + 64) = v155;
  *(void *)(a1 + 72) = v8;
  uint64_t v9 = *(void *)(a2 + 88);
  uint64_t v154 = *(void *)(a2 + 80);
  *(void *)(a1 + 80) = v154;
  *(void *)(a1 + 88) = v9;
  uint64_t v10 = *(void *)(a2 + 104);
  uint64_t v153 = *(void *)(a2 + 96);
  *(void *)(a1 + 96) = v153;
  *(void *)(a1 + 104) = v10;
  uint64_t v11 = *(void *)(a2 + 120);
  uint64_t v152 = *(void *)(a2 + 112);
  *(void *)(a1 + 112) = v152;
  *(void *)(a1 + 120) = v11;
  uint64_t v12 = *(void *)(a2 + 136);
  uint64_t v151 = *(void *)(a2 + 128);
  *(void *)(a1 + 128) = v151;
  *(void *)(a1 + 136) = v12;
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  uint64_t v150 = *(void *)(a2 + 208);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = v150;
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  uint64_t v13 = *(void *)(a2 + 232);
  *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
  *(void *)(a1 + 232) = v13;
  uint64_t v14 = *(void *)(a2 + 248);
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
  *(void *)(a1 + 248) = v14;
  uint64_t v15 = *(void *)(a2 + 264);
  *(_BYTE *)(a1 + 272) = *(_BYTE *)(a2 + 272);
  *(void *)(a1 + 264) = v15;
  uint64_t v16 = *(void *)(a2 + 280);
  *(_BYTE *)(a1 + 288) = *(_BYTE *)(a2 + 288);
  *(void *)(a1 + 280) = v16;
  uint64_t v17 = *(void *)(a2 + 296);
  *(_BYTE *)(a1 + 304) = *(_BYTE *)(a2 + 304);
  *(void *)(a1 + 296) = v17;
  uint64_t v18 = *(void *)(a2 + 312);
  *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
  *(void *)(a1 + 312) = v18;
  uint64_t v19 = *(void *)(a2 + 328);
  *(_BYTE *)(a1 + 336) = *(_BYTE *)(a2 + 336);
  *(void *)(a1 + 328) = v19;
  uint64_t v20 = *(void *)(a2 + 344);
  *(_BYTE *)(a1 + 352) = *(_BYTE *)(a2 + 352);
  *(void *)(a1 + 344) = v20;
  uint64_t v21 = *(void *)(a2 + 360);
  *(_BYTE *)(a1 + 368) = *(_BYTE *)(a2 + 368);
  *(void *)(a1 + 360) = v21;
  *(_BYTE *)(a1 + 384) = *(_BYTE *)(a2 + 384);
  *(void *)(a1 + 376) = v3;
  uint64_t v149 = *(void *)(a2 + 400);
  *(void *)(a1 + 392) = *(void *)(a2 + 392);
  *(void *)(a1 + 400) = v149;
  uint64_t v148 = *(void *)(a2 + 416);
  *(void *)(a1 + 408) = *(void *)(a2 + 408);
  *(void *)(a1 + 416) = v148;
  *(_BYTE *)(a1 + 424) = *(_BYTE *)(a2 + 424);
  uint64_t v147 = *(void *)(a2 + 440);
  *(void *)(a1 + 432) = *(void *)(a2 + 432);
  *(void *)(a1 + 440) = v147;
  uint64_t v146 = *(void *)(a2 + 456);
  *(void *)(a1 + 448) = *(void *)(a2 + 448);
  *(void *)(a1 + 456) = v146;
  uint64_t v145 = *(void *)(a2 + 472);
  *(void *)(a1 + 464) = *(void *)(a2 + 464);
  *(void *)(a1 + 472) = v145;
  uint64_t v144 = *(void *)(a2 + 488);
  *(void *)(a1 + 480) = *(void *)(a2 + 480);
  *(void *)(a1 + 488) = v144;
  uint64_t v22 = *(void *)(a2 + 504);
  *(void *)(a1 + 496) = *(void *)(a2 + 496);
  *(void *)(a1 + 504) = v22;
  *(void *)(a1 + 512) = *(void *)(a2 + 512);
  uint64_t v142 = *(void *)(a2 + 520);
  uint64_t v143 = v22;
  *(void *)(a1 + 520) = v142;
  *(void *)(a1 + 528) = *(void *)(a2 + 528);
  uint64_t v141 = *(void *)(a2 + 536);
  *(void *)(a1 + 536) = v141;
  *(void *)(a1 + 544) = *(void *)(a2 + 544);
  uint64_t v140 = *(void *)(a2 + 552);
  *(void *)(a1 + 552) = v140;
  *(void *)(a1 + 560) = *(void *)(a2 + 560);
  uint64_t v139 = *(void *)(a2 + 568);
  *(void *)(a1 + 568) = v139;
  *(void *)(a1 + 576) = *(void *)(a2 + 576);
  uint64_t v138 = *(void *)(a2 + 584);
  *(void *)(a1 + 584) = v138;
  *(void *)(a1 + 592) = *(void *)(a2 + 592);
  uint64_t v137 = *(void *)(a2 + 600);
  *(void *)(a1 + 600) = v137;
  *(void *)(a1 + 608) = *(void *)(a2 + 608);
  uint64_t v136 = *(void *)(a2 + 616);
  *(void *)(a1 + 616) = v136;
  *(void *)(a1 + 624) = *(void *)(a2 + 624);
  uint64_t v135 = *(void *)(a2 + 632);
  *(void *)(a1 + 632) = v135;
  *(void *)(a1 + 640) = *(void *)(a2 + 640);
  uint64_t v134 = *(void *)(a2 + 648);
  *(void *)(a1 + 648) = v134;
  *(void *)(a1 + 656) = *(void *)(a2 + 656);
  uint64_t v133 = *(void *)(a2 + 664);
  *(void *)(a1 + 664) = v133;
  *(void *)(a1 + 672) = *(void *)(a2 + 672);
  uint64_t v132 = *(void *)(a2 + 680);
  *(void *)(a1 + 680) = v132;
  *(void *)(a1 + 688) = *(void *)(a2 + 688);
  uint64_t v131 = *(void *)(a2 + 696);
  *(void *)(a1 + 696) = v131;
  *(void *)(a1 + 704) = *(void *)(a2 + 704);
  uint64_t v130 = *(void *)(a2 + 712);
  *(void *)(a1 + 712) = v130;
  *(void *)(a1 + 720) = *(void *)(a2 + 720);
  *(void *)(a1 + 736) = *(void *)(a2 + 736);
  *(void *)(a1 + 752) = *(void *)(a2 + 752);
  *(void *)(a1 + 768) = *(void *)(a2 + 768);
  *(void *)(a1 + 784) = *(void *)(a2 + 784);
  *(void *)(a1 + 800) = *(void *)(a2 + 800);
  *(void *)(a1 + 816) = *(void *)(a2 + 816);
  *(void *)(a1 + 832) = *(void *)(a2 + 832);
  *(void *)(a1 + 848) = *(void *)(a2 + 848);
  *(void *)(a1 + 864) = *(void *)(a2 + 864);
  *(void *)(a1 + 880) = *(void *)(a2 + 880);
  *(void *)(a1 + 896) = *(void *)(a2 + 896);
  *(void *)(a1 + 912) = *(void *)(a2 + 912);
  *(void *)(a1 + 928) = *(void *)(a2 + 928);
  *(void *)(a1 + 944) = *(void *)(a2 + 944);
  *(void *)(a1 + 960) = *(void *)(a2 + 960);
  *(void *)(a1 + 976) = *(void *)(a2 + 976);
  *(void *)(a1 + 992) = *(void *)(a2 + 992);
  *(void *)(a1 + 1008) = *(void *)(a2 + 1008);
  *(void *)(a1 + 1024) = *(void *)(a2 + 1024);
  *(void *)(a1 + 1040) = *(void *)(a2 + 1040);
  *(void *)(a1 + 1056) = *(void *)(a2 + 1056);
  *(void *)(a1 + 1072) = *(void *)(a2 + 1072);
  *(void *)(a1 + 1088) = *(void *)(a2 + 1088);
  *(void *)(a1 + 1104) = *(void *)(a2 + 1104);
  *(void *)(a1 + 1120) = *(void *)(a2 + 1120);
  *(void *)(a1 + 1136) = *(void *)(a2 + 1136);
  *(void *)(a1 + 1152) = *(void *)(a2 + 1152);
  *(void *)(a1 + 1168) = *(void *)(a2 + 1168);
  *(void *)(a1 + 1184) = *(void *)(a2 + 1184);
  *(void *)(a1 + 1200) = *(void *)(a2 + 1200);
  *(void *)(a1 + 1216) = *(void *)(a2 + 1216);
  *(void *)(a1 + 1232) = *(void *)(a2 + 1232);
  *(void *)(a1 + 1248) = *(void *)(a2 + 1248);
  *(void *)(a1 + 1264) = *(void *)(a2 + 1264);
  *(void *)(a1 + 1280) = *(void *)(a2 + 1280);
  *(void *)(a1 + 1296) = *(void *)(a2 + 1296);
  *(void *)(a1 + 1312) = *(void *)(a2 + 1312);
  *(void *)(a1 + 1328) = *(void *)(a2 + 1328);
  *(void *)(a1 + 1344) = *(void *)(a2 + 1344);
  *(void *)(a1 + 1360) = *(void *)(a2 + 1360);
  *(void *)(a1 + 1376) = *(void *)(a2 + 1376);
  *(void *)(a1 + 1392) = *(void *)(a2 + 1392);
  *(void *)(a1 + 1408) = *(void *)(a2 + 1408);
  *(void *)(a1 + 1424) = *(void *)(a2 + 1424);
  *(void *)(a1 + 1440) = *(void *)(a2 + 1440);
  *(void *)(a1 + 1456) = *(void *)(a2 + 1456);
  *(void *)(a1 + 1472) = *(void *)(a2 + 1472);
  *(void *)(a1 + 1488) = *(void *)(a2 + 1488);
  *(void *)(a1 + 1504) = *(void *)(a2 + 1504);
  *(void *)(a1 + 1520) = *(void *)(a2 + 1520);
  *(void *)(a1 + 1536) = *(void *)(a2 + 1536);
  *(void *)(a1 + 1552) = *(void *)(a2 + 1552);
  *(void *)(a1 + 1568) = *(void *)(a2 + 1568);
  *(void *)(a1 + 1584) = *(void *)(a2 + 1584);
  *(void *)(a1 + 1600) = *(void *)(a2 + 1600);
  *(void *)(a1 + 1616) = *(void *)(a2 + 1616);
  *(void *)(a1 + 1632) = *(void *)(a2 + 1632);
  *(void *)(a1 + 1648) = *(void *)(a2 + 1648);
  *(void *)(a1 + 1664) = *(void *)(a2 + 1664);
  *(void *)(a1 + 1680) = *(void *)(a2 + 1680);
  *(void *)(a1 + 1696) = *(void *)(a2 + 1696);
  *(void *)(a1 + 1712) = *(void *)(a2 + 1712);
  *(void *)(a1 + 1728) = *(void *)(a2 + 1728);
  *(void *)(a1 + 1744) = *(void *)(a2 + 1744);
  *(void *)(a1 + 1760) = *(void *)(a2 + 1760);
  *(void *)(a1 + 1776) = *(void *)(a2 + 1776);
  *(void *)(a1 + 1792) = *(void *)(a2 + 1792);
  *(void *)(a1 + 1808) = *(void *)(a2 + 1808);
  *(void *)(a1 + 1824) = *(void *)(a2 + 1824);
  *(void *)(a1 + 1840) = *(void *)(a2 + 1840);
  *(void *)(a1 + 1856) = *(void *)(a2 + 1856);
  *(void *)(a1 + 1872) = *(void *)(a2 + 1872);
  *(void *)(a1 + 1888) = *(void *)(a2 + 1888);
  *(void *)(a1 + 1904) = *(void *)(a2 + 1904);
  *(void *)(a1 + 1920) = *(void *)(a2 + 1920);
  *(void *)(a1 + 1936) = *(void *)(a2 + 1936);
  *(void *)(a1 + 1952) = *(void *)(a2 + 1952);
  *(void *)(a1 + 1968) = *(void *)(a2 + 1968);
  *(void *)(a1 + 1984) = *(void *)(a2 + 1984);
  *(void *)(a1 + 2000) = *(void *)(a2 + 2000);
  *(void *)(a1 + 2016) = *(void *)(a2 + 2016);
  *(void *)(a1 + 2032) = *(void *)(a2 + 2032);
  *(void *)(a1 + 2048) = *(void *)(a2 + 2048);
  *(void *)(a1 + 2064) = *(void *)(a2 + 2064);
  *(void *)(a1 + 2080) = *(void *)(a2 + 2080);
  *(void *)(a1 + 2096) = *(void *)(a2 + 2096);
  *(void *)(a1 + 2112) = *(void *)(a2 + 2112);
  *(void *)(a1 + 2128) = *(void *)(a2 + 2128);
  *(void *)(a1 + 2144) = *(void *)(a2 + 2144);
  *(void *)(a1 + 2160) = *(void *)(a2 + 2160);
  *(void *)(a1 + 2176) = *(void *)(a2 + 2176);
  *(void *)(a1 + 2192) = *(void *)(a2 + 2192);
  *(void *)(a1 + 2208) = *(void *)(a2 + 2208);
  *(void *)(a1 + 2224) = *(void *)(a2 + 2224);
  *(void *)(a1 + 2240) = *(void *)(a2 + 2240);
  *(void *)(a1 + 2256) = *(void *)(a2 + 2256);
  *(void *)(a1 + 2272) = *(void *)(a2 + 2272);
  *(void *)(a1 + 2288) = *(void *)(a2 + 2288);
  *(void *)(a1 + 2304) = *(void *)(a2 + 2304);
  *(void *)(a1 + 2320) = *(void *)(a2 + 2320);
  *(void *)(a1 + 2336) = *(void *)(a2 + 2336);
  *(void *)(a1 + 2352) = *(void *)(a2 + 2352);
  *(void *)(a1 + 2368) = *(void *)(a2 + 2368);
  *(void *)(a1 + 2384) = *(void *)(a2 + 2384);
  *(void *)(a1 + 2400) = *(void *)(a2 + 2400);
  uint64_t v23 = *(void *)(a2 + 728);
  *(void *)(a1 + 728) = v23;
  uint64_t v24 = *(void *)(a2 + 744);
  *(void *)(a1 + 744) = v24;
  uint64_t v25 = *(void *)(a2 + 760);
  *(void *)(a1 + 760) = v25;
  uint64_t v26 = *(void *)(a2 + 776);
  *(void *)(a1 + 776) = v26;
  uint64_t v27 = *(void *)(a2 + 792);
  *(void *)(a1 + 792) = v27;
  uint64_t v28 = *(void *)(a2 + 808);
  *(void *)(a1 + 808) = v28;
  uint64_t v29 = *(void *)(a2 + 824);
  *(void *)(a1 + 824) = v29;
  uint64_t v30 = *(void *)(a2 + 840);
  *(void *)(a1 + 840) = v30;
  uint64_t v31 = *(void *)(a2 + 856);
  *(void *)(a1 + 856) = v31;
  uint64_t v33 = *(void *)(a2 + 872);
  *(void *)(a1 + 872) = v33;
  uint64_t v34 = *(void *)(a2 + 888);
  *(void *)(a1 + 888) = v34;
  uint64_t v35 = *(void *)(a2 + 904);
  *(void *)(a1 + 904) = v35;
  uint64_t v36 = *(void *)(a2 + 920);
  *(void *)(a1 + 920) = v36;
  uint64_t v37 = *(void *)(a2 + 936);
  *(void *)(a1 + 936) = v37;
  uint64_t v38 = *(void *)(a2 + 952);
  *(void *)(a1 + 952) = v38;
  uint64_t v39 = *(void *)(a2 + 968);
  *(void *)(a1 + 968) = v39;
  uint64_t v40 = *(void *)(a2 + 984);
  *(void *)(a1 + 984) = v40;
  uint64_t v41 = *(void *)(a2 + 1000);
  *(void *)(a1 + 1000) = v41;
  uint64_t v42 = *(void *)(a2 + 1016);
  *(void *)(a1 + 1016) = v42;
  uint64_t v43 = *(void *)(a2 + 1032);
  *(void *)(a1 + 1032) = v43;
  uint64_t v44 = *(void *)(a2 + 1048);
  *(void *)(a1 + 1048) = v44;
  uint64_t v45 = *(void *)(a2 + 1064);
  *(void *)(a1 + 1064) = v45;
  uint64_t v46 = *(void *)(a2 + 1080);
  *(void *)(a1 + 1080) = v46;
  uint64_t v47 = *(void *)(a2 + 1096);
  *(void *)(a1 + 1096) = v47;
  uint64_t v48 = *(void *)(a2 + 1112);
  *(void *)(a1 + 1112) = v48;
  uint64_t v49 = *(void *)(a2 + 1128);
  *(void *)(a1 + 1128) = v49;
  uint64_t v50 = *(void *)(a2 + 1144);
  *(void *)(a1 + 1144) = v50;
  uint64_t v51 = *(void *)(a2 + 1160);
  *(void *)(a1 + 1160) = v51;
  uint64_t v52 = *(void *)(a2 + 1176);
  *(void *)(a1 + 1176) = v52;
  uint64_t v53 = *(void *)(a2 + 1192);
  *(void *)(a1 + 1192) = v53;
  uint64_t v54 = *(void *)(a2 + 1208);
  *(void *)(a1 + 1208) = v54;
  uint64_t v55 = *(void *)(a2 + 1224);
  *(void *)(a1 + 1224) = v55;
  uint64_t v56 = *(void *)(a2 + 1240);
  *(void *)(a1 + 1240) = v56;
  uint64_t v57 = *(void *)(a2 + 1256);
  *(void *)(a1 + 1256) = v57;
  uint64_t v58 = *(void *)(a2 + 1272);
  *(void *)(a1 + 1272) = v58;
  uint64_t v59 = *(void *)(a2 + 1288);
  *(void *)(a1 + 1288) = v59;
  uint64_t v60 = *(void *)(a2 + 1304);
  *(void *)(a1 + 1304) = v60;
  uint64_t v61 = *(void *)(a2 + 1320);
  *(void *)(a1 + 1320) = v61;
  uint64_t v62 = *(void *)(a2 + 1336);
  *(void *)(a1 + 1336) = v62;
  uint64_t v63 = *(void *)(a2 + 1352);
  *(void *)(a1 + 1352) = v63;
  uint64_t v64 = *(void *)(a2 + 1368);
  *(void *)(a1 + 1368) = v64;
  uint64_t v65 = *(void *)(a2 + 1384);
  *(void *)(a1 + 1384) = v65;
  uint64_t v66 = *(void *)(a2 + 1400);
  *(void *)(a1 + 1400) = v66;
  uint64_t v67 = *(void *)(a2 + 1416);
  *(void *)(a1 + 1416) = v67;
  uint64_t v68 = *(void *)(a2 + 1432);
  *(void *)(a1 + 1432) = v68;
  uint64_t v69 = *(void *)(a2 + 1448);
  *(void *)(a1 + 1448) = v69;
  uint64_t v70 = *(void *)(a2 + 1464);
  *(void *)(a1 + 1464) = v70;
  uint64_t v71 = *(void *)(a2 + 1480);
  *(void *)(a1 + 1480) = v71;
  uint64_t v72 = *(void *)(a2 + 1496);
  *(void *)(a1 + 1496) = v72;
  uint64_t v73 = *(void *)(a2 + 1512);
  *(void *)(a1 + 1512) = v73;
  uint64_t v74 = *(void *)(a2 + 1528);
  *(void *)(a1 + 1528) = v74;
  uint64_t v75 = *(void *)(a2 + 1544);
  *(void *)(a1 + 1544) = v75;
  uint64_t v76 = *(void *)(a2 + 1560);
  *(void *)(a1 + 1560) = v76;
  uint64_t v77 = *(void *)(a2 + 1576);
  *(void *)(a1 + 1576) = v77;
  uint64_t v78 = *(void *)(a2 + 1592);
  *(void *)(a1 + 1592) = v78;
  uint64_t v79 = *(void *)(a2 + 1608);
  *(void *)(a1 + 1608) = v79;
  uint64_t v80 = *(void *)(a2 + 1624);
  *(void *)(a1 + 1624) = v80;
  uint64_t v81 = *(void *)(a2 + 1640);
  *(void *)(a1 + 1640) = v81;
  uint64_t v82 = *(void *)(a2 + 1656);
  *(void *)(a1 + 1656) = v82;
  uint64_t v83 = *(void *)(a2 + 1672);
  *(void *)(a1 + 1672) = v83;
  uint64_t v84 = *(void *)(a2 + 1688);
  *(void *)(a1 + 1688) = v84;
  uint64_t v85 = *(void *)(a2 + 1704);
  *(void *)(a1 + 1704) = v85;
  uint64_t v86 = *(void *)(a2 + 1720);
  *(void *)(a1 + 1720) = v86;
  uint64_t v87 = *(void *)(a2 + 1736);
  *(void *)(a1 + 1736) = v87;
  uint64_t v88 = *(void *)(a2 + 1752);
  *(void *)(a1 + 1752) = v88;
  uint64_t v89 = *(void *)(a2 + 1768);
  *(void *)(a1 + 1768) = v89;
  uint64_t v90 = *(void *)(a2 + 1784);
  *(void *)(a1 + 1784) = v90;
  uint64_t v91 = *(void *)(a2 + 1800);
  *(void *)(a1 + 1800) = v91;
  uint64_t v92 = *(void *)(a2 + 1816);
  *(void *)(a1 + 1816) = v92;
  uint64_t v93 = *(void *)(a2 + 1832);
  *(void *)(a1 + 1832) = v93;
  uint64_t v94 = *(void *)(a2 + 1848);
  *(void *)(a1 + 1848) = v94;
  uint64_t v95 = *(void *)(a2 + 1864);
  *(void *)(a1 + 1864) = v95;
  uint64_t v96 = *(void *)(a2 + 1880);
  *(void *)(a1 + 1880) = v96;
  uint64_t v97 = *(void *)(a2 + 1896);
  *(void *)(a1 + 1896) = v97;
  uint64_t v98 = *(void *)(a2 + 1912);
  *(void *)(a1 + 1912) = v98;
  uint64_t v99 = *(void *)(a2 + 1928);
  *(void *)(a1 + 1928) = v99;
  uint64_t v100 = *(void *)(a2 + 1944);
  *(void *)(a1 + 1944) = v100;
  uint64_t v101 = *(void *)(a2 + 1960);
  *(void *)(a1 + 1960) = v101;
  uint64_t v102 = *(void *)(a2 + 1976);
  *(void *)(a1 + 1976) = v102;
  uint64_t v103 = *(void *)(a2 + 1992);
  *(void *)(a1 + 1992) = v103;
  uint64_t v104 = *(void *)(a2 + 2008);
  *(void *)(a1 + 2008) = v104;
  uint64_t v105 = *(void *)(a2 + 2024);
  *(void *)(a1 + 2024) = v105;
  uint64_t v106 = *(void *)(a2 + 2040);
  *(void *)(a1 + 2040) = v106;
  uint64_t v107 = *(void *)(a2 + 2056);
  *(void *)(a1 + 2056) = v107;
  uint64_t v108 = *(void *)(a2 + 2072);
  *(void *)(a1 + 2072) = v108;
  uint64_t v109 = *(void *)(a2 + 2088);
  *(void *)(a1 + 2088) = v109;
  uint64_t v110 = *(void *)(a2 + 2104);
  *(void *)(a1 + 2104) = v110;
  uint64_t v111 = *(void *)(a2 + 2120);
  *(void *)(a1 + 2120) = v111;
  uint64_t v112 = *(void *)(a2 + 2136);
  *(void *)(a1 + 2136) = v112;
  uint64_t v113 = *(void *)(a2 + 2152);
  *(void *)(a1 + 2152) = v113;
  uint64_t v114 = *(void *)(a2 + 2168);
  *(void *)(a1 + 2168) = v114;
  uint64_t v115 = *(void *)(a2 + 2184);
  *(void *)(a1 + 2184) = v115;
  uint64_t v116 = *(void *)(a2 + 2200);
  *(void *)(a1 + 2200) = v116;
  uint64_t v117 = *(void *)(a2 + 2216);
  *(void *)(a1 + 2216) = v117;
  uint64_t v118 = *(void *)(a2 + 2232);
  *(void *)(a1 + 2232) = v118;
  uint64_t v119 = *(void *)(a2 + 2248);
  *(void *)(a1 + 2248) = v119;
  uint64_t v120 = *(void *)(a2 + 2264);
  *(void *)(a1 + 2264) = v120;
  uint64_t v121 = *(void *)(a2 + 2280);
  *(void *)(a1 + 2280) = v121;
  uint64_t v122 = *(void *)(a2 + 2296);
  *(void *)(a1 + 2296) = v122;
  uint64_t v123 = *(void *)(a2 + 2312);
  *(void *)(a1 + 2312) = v123;
  uint64_t v124 = *(void *)(a2 + 2328);
  *(void *)(a1 + 2328) = v124;
  uint64_t v125 = *(void *)(a2 + 2344);
  *(void *)(a1 + 2344) = v125;
  uint64_t v126 = *(void *)(a2 + 2360);
  *(void *)(a1 + 2360) = v126;
  uint64_t v127 = *(void *)(a2 + 2376);
  *(void *)(a1 + 2376) = v127;
  uint64_t v128 = *(void *)(a2 + 2392);
  *(void *)(a1 + 2392) = v128;
  uint64_t v129 = *(void *)(a2 + 2408);
  *(void *)(a1 + 2408) = v129;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v156);
  swift_bridgeObjectRetain(v155);
  swift_bridgeObjectRetain(v154);
  swift_bridgeObjectRetain(v153);
  swift_bridgeObjectRetain(v152);
  swift_bridgeObjectRetain(v151);
  swift_bridgeObjectRetain(v150);
  swift_bridgeObjectRetain(v149);
  swift_bridgeObjectRetain(v148);
  swift_bridgeObjectRetain(v147);
  swift_bridgeObjectRetain(v146);
  swift_bridgeObjectRetain(v145);
  swift_bridgeObjectRetain(v144);
  swift_bridgeObjectRetain(v143);
  swift_bridgeObjectRetain(v142);
  swift_bridgeObjectRetain(v141);
  swift_bridgeObjectRetain(v140);
  swift_bridgeObjectRetain(v139);
  swift_bridgeObjectRetain(v138);
  swift_bridgeObjectRetain(v137);
  swift_bridgeObjectRetain(v136);
  swift_bridgeObjectRetain(v135);
  swift_bridgeObjectRetain(v134);
  swift_bridgeObjectRetain(v133);
  swift_bridgeObjectRetain(v132);
  swift_bridgeObjectRetain(v131);
  swift_bridgeObjectRetain(v130);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRetain(v44);
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRetain(v47);
  swift_bridgeObjectRetain(v48);
  swift_bridgeObjectRetain(v49);
  swift_bridgeObjectRetain(v50);
  swift_bridgeObjectRetain(v51);
  swift_bridgeObjectRetain(v52);
  swift_bridgeObjectRetain(v53);
  swift_bridgeObjectRetain(v54);
  swift_bridgeObjectRetain(v55);
  swift_bridgeObjectRetain(v56);
  swift_bridgeObjectRetain(v57);
  swift_bridgeObjectRetain(v58);
  swift_bridgeObjectRetain(v59);
  swift_bridgeObjectRetain(v60);
  swift_bridgeObjectRetain(v61);
  swift_bridgeObjectRetain(v62);
  swift_bridgeObjectRetain(v63);
  swift_bridgeObjectRetain(v64);
  swift_bridgeObjectRetain(v65);
  swift_bridgeObjectRetain(v66);
  swift_bridgeObjectRetain(v67);
  swift_bridgeObjectRetain(v68);
  swift_bridgeObjectRetain(v69);
  swift_bridgeObjectRetain(v70);
  swift_bridgeObjectRetain(v71);
  swift_bridgeObjectRetain(v72);
  swift_bridgeObjectRetain(v73);
  swift_bridgeObjectRetain(v74);
  swift_bridgeObjectRetain(v75);
  swift_bridgeObjectRetain(v76);
  swift_bridgeObjectRetain(v77);
  swift_bridgeObjectRetain(v78);
  swift_bridgeObjectRetain(v79);
  swift_bridgeObjectRetain(v80);
  swift_bridgeObjectRetain(v81);
  swift_bridgeObjectRetain(v82);
  swift_bridgeObjectRetain(v83);
  swift_bridgeObjectRetain(v84);
  swift_bridgeObjectRetain(v85);
  swift_bridgeObjectRetain(v86);
  swift_bridgeObjectRetain(v87);
  swift_bridgeObjectRetain(v88);
  swift_bridgeObjectRetain(v89);
  swift_bridgeObjectRetain(v90);
  swift_bridgeObjectRetain(v91);
  swift_bridgeObjectRetain(v92);
  swift_bridgeObjectRetain(v93);
  swift_bridgeObjectRetain(v94);
  swift_bridgeObjectRetain(v95);
  swift_bridgeObjectRetain(v96);
  swift_bridgeObjectRetain(v97);
  swift_bridgeObjectRetain(v98);
  swift_bridgeObjectRetain(v99);
  swift_bridgeObjectRetain(v100);
  swift_bridgeObjectRetain(v101);
  swift_bridgeObjectRetain(v102);
  swift_bridgeObjectRetain(v103);
  swift_bridgeObjectRetain(v104);
  swift_bridgeObjectRetain(v105);
  swift_bridgeObjectRetain(v106);
  swift_bridgeObjectRetain(v107);
  swift_bridgeObjectRetain(v108);
  swift_bridgeObjectRetain(v109);
  swift_bridgeObjectRetain(v110);
  swift_bridgeObjectRetain(v111);
  swift_bridgeObjectRetain(v112);
  swift_bridgeObjectRetain(v113);
  swift_bridgeObjectRetain(v114);
  swift_bridgeObjectRetain(v115);
  swift_bridgeObjectRetain(v116);
  swift_bridgeObjectRetain(v117);
  swift_bridgeObjectRetain(v118);
  swift_bridgeObjectRetain(v119);
  swift_bridgeObjectRetain(v120);
  swift_bridgeObjectRetain(v121);
  swift_bridgeObjectRetain(v122);
  swift_bridgeObjectRetain(v123);
  swift_bridgeObjectRetain(v124);
  swift_bridgeObjectRetain(v125);
  swift_bridgeObjectRetain(v126);
  swift_bridgeObjectRetain(v127);
  swift_bridgeObjectRetain(v128);
  swift_bridgeObjectRetain(v129);
  return a1;
}

uint64_t assignWithCopy for SafetyMonitorSchema(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 48);
  uint64_t v7 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v8 = *(void *)(a2 + 64);
  uint64_t v9 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v10 = *(void *)(a2 + 80);
  uint64_t v11 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  uint64_t v12 = *(void *)(a2 + 96);
  uint64_t v13 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  uint64_t v14 = *(void *)(a2 + 112);
  uint64_t v15 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  uint64_t v16 = *(void *)(a2 + 128);
  uint64_t v17 = *(void *)(a1 + 128);
  *(void *)(a1 + 128) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  uint64_t v18 = *(void *)(a2 + 136);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(void *)(a1 + 136) = v18;
  uint64_t v19 = *(void *)(a2 + 152);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(void *)(a1 + 152) = v19;
  uint64_t v20 = *(void *)(a2 + 168);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(void *)(a1 + 168) = v20;
  uint64_t v21 = *(void *)(a2 + 184);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(void *)(a1 + 184) = v21;
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  uint64_t v22 = *(void *)(a2 + 208);
  uint64_t v23 = *(void *)(a1 + 208);
  *(void *)(a1 + 208) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  uint64_t v24 = *(void *)(a2 + 216);
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  *(void *)(a1 + 216) = v24;
  uint64_t v25 = *(void *)(a2 + 232);
  *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
  *(void *)(a1 + 232) = v25;
  uint64_t v26 = *(void *)(a2 + 248);
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
  *(void *)(a1 + 248) = v26;
  uint64_t v27 = *(void *)(a2 + 264);
  *(_BYTE *)(a1 + 272) = *(_BYTE *)(a2 + 272);
  *(void *)(a1 + 264) = v27;
  uint64_t v28 = *(void *)(a2 + 280);
  *(_BYTE *)(a1 + 288) = *(_BYTE *)(a2 + 288);
  *(void *)(a1 + 280) = v28;
  uint64_t v29 = *(void *)(a2 + 296);
  *(_BYTE *)(a1 + 304) = *(_BYTE *)(a2 + 304);
  *(void *)(a1 + 296) = v29;
  uint64_t v30 = *(void *)(a2 + 312);
  *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
  *(void *)(a1 + 312) = v30;
  uint64_t v31 = *(void *)(a2 + 328);
  *(_BYTE *)(a1 + 336) = *(_BYTE *)(a2 + 336);
  *(void *)(a1 + 328) = v31;
  uint64_t v32 = *(void *)(a2 + 344);
  *(_BYTE *)(a1 + 352) = *(_BYTE *)(a2 + 352);
  *(void *)(a1 + 344) = v32;
  uint64_t v33 = *(void *)(a2 + 360);
  *(_BYTE *)(a1 + 368) = *(_BYTE *)(a2 + 368);
  *(void *)(a1 + 360) = v33;
  uint64_t v34 = *(void *)(a2 + 376);
  *(_BYTE *)(a1 + 384) = *(_BYTE *)(a2 + 384);
  *(void *)(a1 + 376) = v34;
  *(void *)(a1 + 392) = *(void *)(a2 + 392);
  uint64_t v35 = *(void *)(a2 + 400);
  uint64_t v36 = *(void *)(a1 + 400);
  *(void *)(a1 + 400) = v35;
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRelease(v36);
  *(void *)(a1 + 408) = *(void *)(a2 + 408);
  uint64_t v37 = *(void *)(a2 + 416);
  uint64_t v38 = *(void *)(a1 + 416);
  *(void *)(a1 + 416) = v37;
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRelease(v38);
  *(_BYTE *)(a1 + 424) = *(_BYTE *)(a2 + 424);
  *(void *)(a1 + 432) = *(void *)(a2 + 432);
  uint64_t v39 = *(void *)(a2 + 440);
  uint64_t v40 = *(void *)(a1 + 440);
  *(void *)(a1 + 440) = v39;
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRelease(v40);
  *(void *)(a1 + 448) = *(void *)(a2 + 448);
  uint64_t v41 = *(void *)(a2 + 456);
  uint64_t v42 = *(void *)(a1 + 456);
  *(void *)(a1 + 456) = v41;
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRelease(v42);
  *(void *)(a1 + 464) = *(void *)(a2 + 464);
  uint64_t v43 = *(void *)(a2 + 472);
  uint64_t v44 = *(void *)(a1 + 472);
  *(void *)(a1 + 472) = v43;
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRelease(v44);
  *(void *)(a1 + 480) = *(void *)(a2 + 480);
  uint64_t v45 = *(void *)(a2 + 488);
  uint64_t v46 = *(void *)(a1 + 488);
  *(void *)(a1 + 488) = v45;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRelease(v46);
  *(void *)(a1 + 496) = *(void *)(a2 + 496);
  uint64_t v47 = *(void *)(a2 + 504);
  uint64_t v48 = *(void *)(a1 + 504);
  *(void *)(a1 + 504) = v47;
  swift_bridgeObjectRetain(v47);
  swift_bridgeObjectRelease(v48);
  *(void *)(a1 + 512) = *(void *)(a2 + 512);
  uint64_t v49 = *(void *)(a2 + 520);
  uint64_t v50 = *(void *)(a1 + 520);
  *(void *)(a1 + 520) = v49;
  swift_bridgeObjectRetain(v49);
  swift_bridgeObjectRelease(v50);
  *(void *)(a1 + 528) = *(void *)(a2 + 528);
  uint64_t v51 = *(void *)(a2 + 536);
  uint64_t v52 = *(void *)(a1 + 536);
  *(void *)(a1 + 536) = v51;
  swift_bridgeObjectRetain(v51);
  swift_bridgeObjectRelease(v52);
  *(void *)(a1 + 544) = *(void *)(a2 + 544);
  uint64_t v53 = *(void *)(a2 + 552);
  uint64_t v54 = *(void *)(a1 + 552);
  *(void *)(a1 + 552) = v53;
  swift_bridgeObjectRetain(v53);
  swift_bridgeObjectRelease(v54);
  *(void *)(a1 + 560) = *(void *)(a2 + 560);
  uint64_t v55 = *(void *)(a2 + 568);
  uint64_t v56 = *(void *)(a1 + 568);
  *(void *)(a1 + 568) = v55;
  swift_bridgeObjectRetain(v55);
  swift_bridgeObjectRelease(v56);
  *(void *)(a1 + 576) = *(void *)(a2 + 576);
  uint64_t v57 = *(void *)(a2 + 584);
  uint64_t v58 = *(void *)(a1 + 584);
  *(void *)(a1 + 584) = v57;
  swift_bridgeObjectRetain(v57);
  swift_bridgeObjectRelease(v58);
  *(void *)(a1 + 592) = *(void *)(a2 + 592);
  uint64_t v59 = *(void *)(a2 + 600);
  uint64_t v60 = *(void *)(a1 + 600);
  *(void *)(a1 + 600) = v59;
  swift_bridgeObjectRetain(v59);
  swift_bridgeObjectRelease(v60);
  *(void *)(a1 + 608) = *(void *)(a2 + 608);
  uint64_t v61 = *(void *)(a2 + 616);
  uint64_t v62 = *(void *)(a1 + 616);
  *(void *)(a1 + 616) = v61;
  swift_bridgeObjectRetain(v61);
  swift_bridgeObjectRelease(v62);
  *(void *)(a1 + 624) = *(void *)(a2 + 624);
  uint64_t v63 = *(void *)(a2 + 632);
  uint64_t v64 = *(void *)(a1 + 632);
  *(void *)(a1 + 632) = v63;
  swift_bridgeObjectRetain(v63);
  swift_bridgeObjectRelease(v64);
  *(void *)(a1 + 640) = *(void *)(a2 + 640);
  uint64_t v65 = *(void *)(a2 + 648);
  uint64_t v66 = *(void *)(a1 + 648);
  *(void *)(a1 + 648) = v65;
  swift_bridgeObjectRetain(v65);
  swift_bridgeObjectRelease(v66);
  *(void *)(a1 + 656) = *(void *)(a2 + 656);
  uint64_t v67 = *(void *)(a2 + 664);
  uint64_t v68 = *(void *)(a1 + 664);
  *(void *)(a1 + 664) = v67;
  swift_bridgeObjectRetain(v67);
  swift_bridgeObjectRelease(v68);
  *(void *)(a1 + 672) = *(void *)(a2 + 672);
  uint64_t v69 = *(void *)(a2 + 680);
  uint64_t v70 = *(void *)(a1 + 680);
  *(void *)(a1 + 680) = v69;
  swift_bridgeObjectRetain(v69);
  swift_bridgeObjectRelease(v70);
  *(void *)(a1 + 688) = *(void *)(a2 + 688);
  uint64_t v71 = *(void *)(a2 + 696);
  uint64_t v72 = *(void *)(a1 + 696);
  *(void *)(a1 + 696) = v71;
  swift_bridgeObjectRetain(v71);
  swift_bridgeObjectRelease(v72);
  *(void *)(a1 + 704) = *(void *)(a2 + 704);
  uint64_t v73 = *(void *)(a2 + 712);
  uint64_t v74 = *(void *)(a1 + 712);
  *(void *)(a1 + 712) = v73;
  swift_bridgeObjectRetain(v73);
  swift_bridgeObjectRelease(v74);
  *(void *)(a1 + 720) = *(void *)(a2 + 720);
  uint64_t v75 = *(void *)(a2 + 728);
  uint64_t v76 = *(void *)(a1 + 728);
  *(void *)(a1 + 728) = v75;
  swift_bridgeObjectRetain(v75);
  swift_bridgeObjectRelease(v76);
  *(void *)(a1 + 736) = *(void *)(a2 + 736);
  uint64_t v77 = *(void *)(a2 + 744);
  uint64_t v78 = *(void *)(a1 + 744);
  *(void *)(a1 + 744) = v77;
  swift_bridgeObjectRetain(v77);
  swift_bridgeObjectRelease(v78);
  *(void *)(a1 + 752) = *(void *)(a2 + 752);
  uint64_t v79 = *(void *)(a2 + 760);
  uint64_t v80 = *(void *)(a1 + 760);
  *(void *)(a1 + 760) = v79;
  swift_bridgeObjectRetain(v79);
  swift_bridgeObjectRelease(v80);
  *(void *)(a1 + 768) = *(void *)(a2 + 768);
  uint64_t v81 = *(void *)(a2 + 776);
  uint64_t v82 = *(void *)(a1 + 776);
  *(void *)(a1 + 776) = v81;
  swift_bridgeObjectRetain(v81);
  swift_bridgeObjectRelease(v82);
  *(void *)(a1 + 784) = *(void *)(a2 + 784);
  uint64_t v83 = *(void *)(a2 + 792);
  uint64_t v84 = *(void *)(a1 + 792);
  *(void *)(a1 + 792) = v83;
  swift_bridgeObjectRetain(v83);
  swift_bridgeObjectRelease(v84);
  *(void *)(a1 + 800) = *(void *)(a2 + 800);
  uint64_t v85 = *(void *)(a2 + 808);
  uint64_t v86 = *(void *)(a1 + 808);
  *(void *)(a1 + 808) = v85;
  swift_bridgeObjectRetain(v85);
  swift_bridgeObjectRelease(v86);
  *(void *)(a1 + 816) = *(void *)(a2 + 816);
  uint64_t v87 = *(void *)(a2 + 824);
  uint64_t v88 = *(void *)(a1 + 824);
  *(void *)(a1 + 824) = v87;
  swift_bridgeObjectRetain(v87);
  swift_bridgeObjectRelease(v88);
  *(void *)(a1 + 832) = *(void *)(a2 + 832);
  uint64_t v89 = *(void *)(a2 + 840);
  uint64_t v90 = *(void *)(a1 + 840);
  *(void *)(a1 + 840) = v89;
  swift_bridgeObjectRetain(v89);
  swift_bridgeObjectRelease(v90);
  *(void *)(a1 + 848) = *(void *)(a2 + 848);
  uint64_t v91 = *(void *)(a2 + 856);
  uint64_t v92 = *(void *)(a1 + 856);
  *(void *)(a1 + 856) = v91;
  swift_bridgeObjectRetain(v91);
  swift_bridgeObjectRelease(v92);
  *(void *)(a1 + 864) = *(void *)(a2 + 864);
  uint64_t v93 = *(void *)(a2 + 872);
  uint64_t v94 = *(void *)(a1 + 872);
  *(void *)(a1 + 872) = v93;
  swift_bridgeObjectRetain(v93);
  swift_bridgeObjectRelease(v94);
  *(void *)(a1 + 880) = *(void *)(a2 + 880);
  uint64_t v95 = *(void *)(a2 + 888);
  uint64_t v96 = *(void *)(a1 + 888);
  *(void *)(a1 + 888) = v95;
  swift_bridgeObjectRetain(v95);
  swift_bridgeObjectRelease(v96);
  *(void *)(a1 + 896) = *(void *)(a2 + 896);
  uint64_t v97 = *(void *)(a2 + 904);
  uint64_t v98 = *(void *)(a1 + 904);
  *(void *)(a1 + 904) = v97;
  swift_bridgeObjectRetain(v97);
  swift_bridgeObjectRelease(v98);
  *(void *)(a1 + 912) = *(void *)(a2 + 912);
  uint64_t v99 = *(void *)(a2 + 920);
  uint64_t v100 = *(void *)(a1 + 920);
  *(void *)(a1 + 920) = v99;
  swift_bridgeObjectRetain(v99);
  swift_bridgeObjectRelease(v100);
  *(void *)(a1 + 928) = *(void *)(a2 + 928);
  uint64_t v101 = *(void *)(a2 + 936);
  uint64_t v102 = *(void *)(a1 + 936);
  *(void *)(a1 + 936) = v101;
  swift_bridgeObjectRetain(v101);
  swift_bridgeObjectRelease(v102);
  *(void *)(a1 + 944) = *(void *)(a2 + 944);
  uint64_t v103 = *(void *)(a2 + 952);
  uint64_t v104 = *(void *)(a1 + 952);
  *(void *)(a1 + 952) = v103;
  swift_bridgeObjectRetain(v103);
  swift_bridgeObjectRelease(v104);
  *(void *)(a1 + 960) = *(void *)(a2 + 960);
  uint64_t v105 = *(void *)(a2 + 968);
  uint64_t v106 = *(void *)(a1 + 968);
  *(void *)(a1 + 968) = v105;
  swift_bridgeObjectRetain(v105);
  swift_bridgeObjectRelease(v106);
  *(void *)(a1 + 976) = *(void *)(a2 + 976);
  uint64_t v107 = *(void *)(a2 + 984);
  uint64_t v108 = *(void *)(a1 + 984);
  *(void *)(a1 + 984) = v107;
  swift_bridgeObjectRetain(v107);
  swift_bridgeObjectRelease(v108);
  *(void *)(a1 + 992) = *(void *)(a2 + 992);
  uint64_t v109 = *(void *)(a2 + 1000);
  uint64_t v110 = *(void *)(a1 + 1000);
  *(void *)(a1 + 1000) = v109;
  swift_bridgeObjectRetain(v109);
  swift_bridgeObjectRelease(v110);
  *(void *)(a1 + 1008) = *(void *)(a2 + 1008);
  uint64_t v111 = *(void *)(a2 + 1016);
  uint64_t v112 = *(void *)(a1 + 1016);
  *(void *)(a1 + 1016) = v111;
  swift_bridgeObjectRetain(v111);
  swift_bridgeObjectRelease(v112);
  *(void *)(a1 + 1024) = *(void *)(a2 + 1024);
  uint64_t v113 = *(void *)(a2 + 1032);
  uint64_t v114 = *(void *)(a1 + 1032);
  *(void *)(a1 + 1032) = v113;
  swift_bridgeObjectRetain(v113);
  swift_bridgeObjectRelease(v114);
  *(void *)(a1 + 1040) = *(void *)(a2 + 1040);
  uint64_t v115 = *(void *)(a2 + 1048);
  uint64_t v116 = *(void *)(a1 + 1048);
  *(void *)(a1 + 1048) = v115;
  swift_bridgeObjectRetain(v115);
  swift_bridgeObjectRelease(v116);
  *(void *)(a1 + 1056) = *(void *)(a2 + 1056);
  uint64_t v117 = *(void *)(a2 + 1064);
  uint64_t v118 = *(void *)(a1 + 1064);
  *(void *)(a1 + 1064) = v117;
  swift_bridgeObjectRetain(v117);
  swift_bridgeObjectRelease(v118);
  *(void *)(a1 + 1072) = *(void *)(a2 + 1072);
  uint64_t v119 = *(void *)(a2 + 1080);
  uint64_t v120 = *(void *)(a1 + 1080);
  *(void *)(a1 + 1080) = v119;
  swift_bridgeObjectRetain(v119);
  swift_bridgeObjectRelease(v120);
  *(void *)(a1 + 1088) = *(void *)(a2 + 1088);
  uint64_t v121 = *(void *)(a2 + 1096);
  uint64_t v122 = *(void *)(a1 + 1096);
  *(void *)(a1 + 1096) = v121;
  swift_bridgeObjectRetain(v121);
  swift_bridgeObjectRelease(v122);
  *(void *)(a1 + 1104) = *(void *)(a2 + 1104);
  uint64_t v123 = *(void *)(a2 + 1112);
  uint64_t v124 = *(void *)(a1 + 1112);
  *(void *)(a1 + 1112) = v123;
  swift_bridgeObjectRetain(v123);
  swift_bridgeObjectRelease(v124);
  *(void *)(a1 + 1120) = *(void *)(a2 + 1120);
  uint64_t v125 = *(void *)(a2 + 1128);
  uint64_t v126 = *(void *)(a1 + 1128);
  *(void *)(a1 + 1128) = v125;
  swift_bridgeObjectRetain(v125);
  swift_bridgeObjectRelease(v126);
  *(void *)(a1 + 1136) = *(void *)(a2 + 1136);
  uint64_t v127 = *(void *)(a2 + 1144);
  uint64_t v128 = *(void *)(a1 + 1144);
  *(void *)(a1 + 1144) = v127;
  swift_bridgeObjectRetain(v127);
  swift_bridgeObjectRelease(v128);
  *(void *)(a1 + 1152) = *(void *)(a2 + 1152);
  uint64_t v129 = *(void *)(a2 + 1160);
  uint64_t v130 = *(void *)(a1 + 1160);
  *(void *)(a1 + 1160) = v129;
  swift_bridgeObjectRetain(v129);
  swift_bridgeObjectRelease(v130);
  *(void *)(a1 + 1168) = *(void *)(a2 + 1168);
  uint64_t v131 = *(void *)(a2 + 1176);
  uint64_t v132 = *(void *)(a1 + 1176);
  *(void *)(a1 + 1176) = v131;
  swift_bridgeObjectRetain(v131);
  swift_bridgeObjectRelease(v132);
  *(void *)(a1 + 1184) = *(void *)(a2 + 1184);
  uint64_t v133 = *(void *)(a2 + 1192);
  uint64_t v134 = *(void *)(a1 + 1192);
  *(void *)(a1 + 1192) = v133;
  swift_bridgeObjectRetain(v133);
  swift_bridgeObjectRelease(v134);
  *(void *)(a1 + 1200) = *(void *)(a2 + 1200);
  uint64_t v135 = *(void *)(a2 + 1208);
  uint64_t v136 = *(void *)(a1 + 1208);
  *(void *)(a1 + 1208) = v135;
  swift_bridgeObjectRetain(v135);
  swift_bridgeObjectRelease(v136);
  *(void *)(a1 + 1216) = *(void *)(a2 + 1216);
  uint64_t v137 = *(void *)(a2 + 1224);
  uint64_t v138 = *(void *)(a1 + 1224);
  *(void *)(a1 + 1224) = v137;
  swift_bridgeObjectRetain(v137);
  swift_bridgeObjectRelease(v138);
  *(void *)(a1 + 1232) = *(void *)(a2 + 1232);
  uint64_t v139 = *(void *)(a2 + 1240);
  uint64_t v140 = *(void *)(a1 + 1240);
  *(void *)(a1 + 1240) = v139;
  swift_bridgeObjectRetain(v139);
  swift_bridgeObjectRelease(v140);
  *(void *)(a1 + 1248) = *(void *)(a2 + 1248);
  uint64_t v141 = *(void *)(a2 + 1256);
  uint64_t v142 = *(void *)(a1 + 1256);
  *(void *)(a1 + 1256) = v141;
  swift_bridgeObjectRetain(v141);
  swift_bridgeObjectRelease(v142);
  *(void *)(a1 + 1264) = *(void *)(a2 + 1264);
  uint64_t v143 = *(void *)(a2 + 1272);
  uint64_t v144 = *(void *)(a1 + 1272);
  *(void *)(a1 + 1272) = v143;
  swift_bridgeObjectRetain(v143);
  swift_bridgeObjectRelease(v144);
  *(void *)(a1 + 1280) = *(void *)(a2 + 1280);
  uint64_t v145 = *(void *)(a2 + 1288);
  uint64_t v146 = *(void *)(a1 + 1288);
  *(void *)(a1 + 1288) = v145;
  swift_bridgeObjectRetain(v145);
  swift_bridgeObjectRelease(v146);
  *(void *)(a1 + 1296) = *(void *)(a2 + 1296);
  uint64_t v147 = *(void *)(a2 + 1304);
  uint64_t v148 = *(void *)(a1 + 1304);
  *(void *)(a1 + 1304) = v147;
  swift_bridgeObjectRetain(v147);
  swift_bridgeObjectRelease(v148);
  *(void *)(a1 + 1312) = *(void *)(a2 + 1312);
  uint64_t v149 = *(void *)(a2 + 1320);
  uint64_t v150 = *(void *)(a1 + 1320);
  *(void *)(a1 + 1320) = v149;
  swift_bridgeObjectRetain(v149);
  swift_bridgeObjectRelease(v150);
  *(void *)(a1 + 1328) = *(void *)(a2 + 1328);
  uint64_t v151 = *(void *)(a2 + 1336);
  uint64_t v152 = *(void *)(a1 + 1336);
  *(void *)(a1 + 1336) = v151;
  swift_bridgeObjectRetain(v151);
  swift_bridgeObjectRelease(v152);
  *(void *)(a1 + 1344) = *(void *)(a2 + 1344);
  uint64_t v153 = *(void *)(a2 + 1352);
  uint64_t v154 = *(void *)(a1 + 1352);
  *(void *)(a1 + 1352) = v153;
  swift_bridgeObjectRetain(v153);
  swift_bridgeObjectRelease(v154);
  *(void *)(a1 + 1360) = *(void *)(a2 + 1360);
  uint64_t v155 = *(void *)(a2 + 1368);
  uint64_t v156 = *(void *)(a1 + 1368);
  *(void *)(a1 + 1368) = v155;
  swift_bridgeObjectRetain(v155);
  swift_bridgeObjectRelease(v156);
  *(void *)(a1 + 1376) = *(void *)(a2 + 1376);
  uint64_t v157 = *(void *)(a2 + 1384);
  uint64_t v158 = *(void *)(a1 + 1384);
  *(void *)(a1 + 1384) = v157;
  swift_bridgeObjectRetain(v157);
  swift_bridgeObjectRelease(v158);
  *(void *)(a1 + 1392) = *(void *)(a2 + 1392);
  uint64_t v159 = *(void *)(a2 + 1400);
  uint64_t v160 = *(void *)(a1 + 1400);
  *(void *)(a1 + 1400) = v159;
  swift_bridgeObjectRetain(v159);
  swift_bridgeObjectRelease(v160);
  *(void *)(a1 + 1408) = *(void *)(a2 + 1408);
  uint64_t v161 = *(void *)(a2 + 1416);
  uint64_t v162 = *(void *)(a1 + 1416);
  *(void *)(a1 + 1416) = v161;
  swift_bridgeObjectRetain(v161);
  swift_bridgeObjectRelease(v162);
  *(void *)(a1 + 1424) = *(void *)(a2 + 1424);
  uint64_t v163 = *(void *)(a2 + 1432);
  uint64_t v164 = *(void *)(a1 + 1432);
  *(void *)(a1 + 1432) = v163;
  swift_bridgeObjectRetain(v163);
  swift_bridgeObjectRelease(v164);
  *(void *)(a1 + 1440) = *(void *)(a2 + 1440);
  uint64_t v165 = *(void *)(a2 + 1448);
  uint64_t v166 = *(void *)(a1 + 1448);
  *(void *)(a1 + 1448) = v165;
  swift_bridgeObjectRetain(v165);
  swift_bridgeObjectRelease(v166);
  *(void *)(a1 + 1456) = *(void *)(a2 + 1456);
  uint64_t v167 = *(void *)(a2 + 1464);
  uint64_t v168 = *(void *)(a1 + 1464);
  *(void *)(a1 + 1464) = v167;
  swift_bridgeObjectRetain(v167);
  swift_bridgeObjectRelease(v168);
  *(void *)(a1 + 1472) = *(void *)(a2 + 1472);
  uint64_t v169 = *(void *)(a2 + 1480);
  uint64_t v170 = *(void *)(a1 + 1480);
  *(void *)(a1 + 1480) = v169;
  swift_bridgeObjectRetain(v169);
  swift_bridgeObjectRelease(v170);
  *(void *)(a1 + 1488) = *(void *)(a2 + 1488);
  uint64_t v171 = *(void *)(a2 + 1496);
  uint64_t v172 = *(void *)(a1 + 1496);
  *(void *)(a1 + 1496) = v171;
  swift_bridgeObjectRetain(v171);
  swift_bridgeObjectRelease(v172);
  *(void *)(a1 + 1504) = *(void *)(a2 + 1504);
  uint64_t v173 = *(void *)(a2 + 1512);
  uint64_t v174 = *(void *)(a1 + 1512);
  *(void *)(a1 + 1512) = v173;
  swift_bridgeObjectRetain(v173);
  swift_bridgeObjectRelease(v174);
  *(void *)(a1 + 1520) = *(void *)(a2 + 1520);
  uint64_t v175 = *(void *)(a2 + 1528);
  uint64_t v176 = *(void *)(a1 + 1528);
  *(void *)(a1 + 1528) = v175;
  swift_bridgeObjectRetain(v175);
  swift_bridgeObjectRelease(v176);
  *(void *)(a1 + 1536) = *(void *)(a2 + 1536);
  uint64_t v177 = *(void *)(a2 + 1544);
  uint64_t v178 = *(void *)(a1 + 1544);
  *(void *)(a1 + 1544) = v177;
  swift_bridgeObjectRetain(v177);
  swift_bridgeObjectRelease(v178);
  *(void *)(a1 + 1552) = *(void *)(a2 + 1552);
  uint64_t v179 = *(void *)(a2 + 1560);
  uint64_t v180 = *(void *)(a1 + 1560);
  *(void *)(a1 + 1560) = v179;
  swift_bridgeObjectRetain(v179);
  swift_bridgeObjectRelease(v180);
  *(void *)(a1 + 1568) = *(void *)(a2 + 1568);
  uint64_t v181 = *(void *)(a2 + 1576);
  uint64_t v182 = *(void *)(a1 + 1576);
  *(void *)(a1 + 1576) = v181;
  swift_bridgeObjectRetain(v181);
  swift_bridgeObjectRelease(v182);
  *(void *)(a1 + 1584) = *(void *)(a2 + 1584);
  uint64_t v183 = *(void *)(a2 + 1592);
  uint64_t v184 = *(void *)(a1 + 1592);
  *(void *)(a1 + 1592) = v183;
  swift_bridgeObjectRetain(v183);
  swift_bridgeObjectRelease(v184);
  *(void *)(a1 + 1600) = *(void *)(a2 + 1600);
  uint64_t v185 = *(void *)(a2 + 1608);
  uint64_t v186 = *(void *)(a1 + 1608);
  *(void *)(a1 + 1608) = v185;
  swift_bridgeObjectRetain(v185);
  swift_bridgeObjectRelease(v186);
  *(void *)(a1 + 1616) = *(void *)(a2 + 1616);
  uint64_t v187 = *(void *)(a2 + 1624);
  uint64_t v188 = *(void *)(a1 + 1624);
  *(void *)(a1 + 1624) = v187;
  swift_bridgeObjectRetain(v187);
  swift_bridgeObjectRelease(v188);
  *(void *)(a1 + 1632) = *(void *)(a2 + 1632);
  uint64_t v189 = *(void *)(a2 + 1640);
  uint64_t v190 = *(void *)(a1 + 1640);
  *(void *)(a1 + 1640) = v189;
  swift_bridgeObjectRetain(v189);
  swift_bridgeObjectRelease(v190);
  *(void *)(a1 + 1648) = *(void *)(a2 + 1648);
  uint64_t v191 = *(void *)(a2 + 1656);
  uint64_t v192 = *(void *)(a1 + 1656);
  *(void *)(a1 + 1656) = v191;
  swift_bridgeObjectRetain(v191);
  swift_bridgeObjectRelease(v192);
  *(void *)(a1 + 1664) = *(void *)(a2 + 1664);
  uint64_t v193 = *(void *)(a2 + 1672);
  uint64_t v194 = *(void *)(a1 + 1672);
  *(void *)(a1 + 1672) = v193;
  swift_bridgeObjectRetain(v193);
  swift_bridgeObjectRelease(v194);
  *(void *)(a1 + 1680) = *(void *)(a2 + 1680);
  uint64_t v195 = *(void *)(a2 + 1688);
  uint64_t v196 = *(void *)(a1 + 1688);
  *(void *)(a1 + 1688) = v195;
  swift_bridgeObjectRetain(v195);
  swift_bridgeObjectRelease(v196);
  *(void *)(a1 + 1696) = *(void *)(a2 + 1696);
  uint64_t v197 = *(void *)(a2 + 1704);
  uint64_t v198 = *(void *)(a1 + 1704);
  *(void *)(a1 + 1704) = v197;
  swift_bridgeObjectRetain(v197);
  swift_bridgeObjectRelease(v198);
  *(void *)(a1 + 1712) = *(void *)(a2 + 1712);
  uint64_t v199 = *(void *)(a2 + 1720);
  uint64_t v200 = *(void *)(a1 + 1720);
  *(void *)(a1 + 1720) = v199;
  swift_bridgeObjectRetain(v199);
  swift_bridgeObjectRelease(v200);
  *(void *)(a1 + 1728) = *(void *)(a2 + 1728);
  uint64_t v201 = *(void *)(a2 + 1736);
  uint64_t v202 = *(void *)(a1 + 1736);
  *(void *)(a1 + 1736) = v201;
  swift_bridgeObjectRetain(v201);
  swift_bridgeObjectRelease(v202);
  *(void *)(a1 + 1744) = *(void *)(a2 + 1744);
  uint64_t v203 = *(void *)(a2 + 1752);
  uint64_t v204 = *(void *)(a1 + 1752);
  *(void *)(a1 + 1752) = v203;
  swift_bridgeObjectRetain(v203);
  swift_bridgeObjectRelease(v204);
  *(void *)(a1 + 1760) = *(void *)(a2 + 1760);
  uint64_t v205 = *(void *)(a2 + 1768);
  uint64_t v206 = *(void *)(a1 + 1768);
  *(void *)(a1 + 1768) = v205;
  swift_bridgeObjectRetain(v205);
  swift_bridgeObjectRelease(v206);
  *(void *)(a1 + 1776) = *(void *)(a2 + 1776);
  uint64_t v207 = *(void *)(a2 + 1784);
  uint64_t v208 = *(void *)(a1 + 1784);
  *(void *)(a1 + 1784) = v207;
  swift_bridgeObjectRetain(v207);
  swift_bridgeObjectRelease(v208);
  *(void *)(a1 + 1792) = *(void *)(a2 + 1792);
  uint64_t v209 = *(void *)(a2 + 1800);
  uint64_t v210 = *(void *)(a1 + 1800);
  *(void *)(a1 + 1800) = v209;
  swift_bridgeObjectRetain(v209);
  swift_bridgeObjectRelease(v210);
  *(void *)(a1 + 1808) = *(void *)(a2 + 1808);
  uint64_t v211 = *(void *)(a2 + 1816);
  uint64_t v212 = *(void *)(a1 + 1816);
  *(void *)(a1 + 1816) = v211;
  swift_bridgeObjectRetain(v211);
  swift_bridgeObjectRelease(v212);
  *(void *)(a1 + 1824) = *(void *)(a2 + 1824);
  uint64_t v213 = *(void *)(a2 + 1832);
  uint64_t v214 = *(void *)(a1 + 1832);
  *(void *)(a1 + 1832) = v213;
  swift_bridgeObjectRetain(v213);
  swift_bridgeObjectRelease(v214);
  *(void *)(a1 + 1840) = *(void *)(a2 + 1840);
  uint64_t v215 = *(void *)(a2 + 1848);
  uint64_t v216 = *(void *)(a1 + 1848);
  *(void *)(a1 + 1848) = v215;
  swift_bridgeObjectRetain(v215);
  swift_bridgeObjectRelease(v216);
  *(void *)(a1 + 1856) = *(void *)(a2 + 1856);
  uint64_t v217 = *(void *)(a2 + 1864);
  uint64_t v218 = *(void *)(a1 + 1864);
  *(void *)(a1 + 1864) = v217;
  swift_bridgeObjectRetain(v217);
  swift_bridgeObjectRelease(v218);
  *(void *)(a1 + 1872) = *(void *)(a2 + 1872);
  uint64_t v219 = *(void *)(a2 + 1880);
  uint64_t v220 = *(void *)(a1 + 1880);
  *(void *)(a1 + 1880) = v219;
  swift_bridgeObjectRetain(v219);
  swift_bridgeObjectRelease(v220);
  *(void *)(a1 + 1888) = *(void *)(a2 + 1888);
  uint64_t v221 = *(void *)(a2 + 1896);
  uint64_t v222 = *(void *)(a1 + 1896);
  *(void *)(a1 + 1896) = v221;
  swift_bridgeObjectRetain(v221);
  swift_bridgeObjectRelease(v222);
  *(void *)(a1 + 1904) = *(void *)(a2 + 1904);
  uint64_t v223 = *(void *)(a2 + 1912);
  uint64_t v224 = *(void *)(a1 + 1912);
  *(void *)(a1 + 1912) = v223;
  swift_bridgeObjectRetain(v223);
  swift_bridgeObjectRelease(v224);
  *(void *)(a1 + 1920) = *(void *)(a2 + 1920);
  uint64_t v225 = *(void *)(a2 + 1928);
  uint64_t v226 = *(void *)(a1 + 1928);
  *(void *)(a1 + 1928) = v225;
  swift_bridgeObjectRetain(v225);
  swift_bridgeObjectRelease(v226);
  *(void *)(a1 + 1936) = *(void *)(a2 + 1936);
  uint64_t v227 = *(void *)(a2 + 1944);
  uint64_t v228 = *(void *)(a1 + 1944);
  *(void *)(a1 + 1944) = v227;
  swift_bridgeObjectRetain(v227);
  swift_bridgeObjectRelease(v228);
  *(void *)(a1 + 1952) = *(void *)(a2 + 1952);
  uint64_t v229 = *(void *)(a2 + 1960);
  uint64_t v230 = *(void *)(a1 + 1960);
  *(void *)(a1 + 1960) = v229;
  swift_bridgeObjectRetain(v229);
  swift_bridgeObjectRelease(v230);
  *(void *)(a1 + 1968) = *(void *)(a2 + 1968);
  uint64_t v231 = *(void *)(a2 + 1976);
  uint64_t v232 = *(void *)(a1 + 1976);
  *(void *)(a1 + 1976) = v231;
  swift_bridgeObjectRetain(v231);
  swift_bridgeObjectRelease(v232);
  *(void *)(a1 + 1984) = *(void *)(a2 + 1984);
  uint64_t v233 = *(void *)(a2 + 1992);
  uint64_t v234 = *(void *)(a1 + 1992);
  *(void *)(a1 + 1992) = v233;
  swift_bridgeObjectRetain(v233);
  swift_bridgeObjectRelease(v234);
  *(void *)(a1 + 2000) = *(void *)(a2 + 2000);
  uint64_t v235 = *(void *)(a2 + 2008);
  uint64_t v236 = *(void *)(a1 + 2008);
  *(void *)(a1 + 2008) = v235;
  swift_bridgeObjectRetain(v235);
  swift_bridgeObjectRelease(v236);
  *(void *)(a1 + 2016) = *(void *)(a2 + 2016);
  uint64_t v237 = *(void *)(a2 + 2024);
  uint64_t v238 = *(void *)(a1 + 2024);
  *(void *)(a1 + 2024) = v237;
  swift_bridgeObjectRetain(v237);
  swift_bridgeObjectRelease(v238);
  *(void *)(a1 + 2032) = *(void *)(a2 + 2032);
  uint64_t v239 = *(void *)(a2 + 2040);
  uint64_t v240 = *(void *)(a1 + 2040);
  *(void *)(a1 + 2040) = v239;
  swift_bridgeObjectRetain(v239);
  swift_bridgeObjectRelease(v240);
  *(void *)(a1 + 2048) = *(void *)(a2 + 2048);
  uint64_t v241 = *(void *)(a2 + 2056);
  uint64_t v242 = *(void *)(a1 + 2056);
  *(void *)(a1 + 2056) = v241;
  swift_bridgeObjectRetain(v241);
  swift_bridgeObjectRelease(v242);
  *(void *)(a1 + 2064) = *(void *)(a2 + 2064);
  uint64_t v243 = *(void *)(a2 + 2072);
  uint64_t v244 = *(void *)(a1 + 2072);
  *(void *)(a1 + 2072) = v243;
  swift_bridgeObjectRetain(v243);
  swift_bridgeObjectRelease(v244);
  *(void *)(a1 + 2080) = *(void *)(a2 + 2080);
  uint64_t v245 = *(void *)(a2 + 2088);
  uint64_t v246 = *(void *)(a1 + 2088);
  *(void *)(a1 + 2088) = v245;
  swift_bridgeObjectRetain(v245);
  swift_bridgeObjectRelease(v246);
  *(void *)(a1 + 2096) = *(void *)(a2 + 2096);
  uint64_t v247 = *(void *)(a2 + 2104);
  uint64_t v248 = *(void *)(a1 + 2104);
  *(void *)(a1 + 2104) = v247;
  swift_bridgeObjectRetain(v247);
  swift_bridgeObjectRelease(v248);
  *(void *)(a1 + 2112) = *(void *)(a2 + 2112);
  uint64_t v249 = *(void *)(a2 + 2120);
  uint64_t v250 = *(void *)(a1 + 2120);
  *(void *)(a1 + 2120) = v249;
  swift_bridgeObjectRetain(v249);
  swift_bridgeObjectRelease(v250);
  *(void *)(a1 + 2128) = *(void *)(a2 + 2128);
  uint64_t v251 = *(void *)(a2 + 2136);
  uint64_t v252 = *(void *)(a1 + 2136);
  *(void *)(a1 + 2136) = v251;
  swift_bridgeObjectRetain(v251);
  swift_bridgeObjectRelease(v252);
  *(void *)(a1 + 2144) = *(void *)(a2 + 2144);
  uint64_t v253 = *(void *)(a2 + 2152);
  uint64_t v254 = *(void *)(a1 + 2152);
  *(void *)(a1 + 2152) = v253;
  swift_bridgeObjectRetain(v253);
  swift_bridgeObjectRelease(v254);
  *(void *)(a1 + 2160) = *(void *)(a2 + 2160);
  uint64_t v255 = *(void *)(a2 + 2168);
  uint64_t v256 = *(void *)(a1 + 2168);
  *(void *)(a1 + 2168) = v255;
  swift_bridgeObjectRetain(v255);
  swift_bridgeObjectRelease(v256);
  *(void *)(a1 + 2176) = *(void *)(a2 + 2176);
  uint64_t v257 = *(void *)(a2 + 2184);
  uint64_t v258 = *(void *)(a1 + 2184);
  *(void *)(a1 + 2184) = v257;
  swift_bridgeObjectRetain(v257);
  swift_bridgeObjectRelease(v258);
  *(void *)(a1 + 2192) = *(void *)(a2 + 2192);
  uint64_t v259 = *(void *)(a2 + 2200);
  uint64_t v260 = *(void *)(a1 + 2200);
  *(void *)(a1 + 2200) = v259;
  swift_bridgeObjectRetain(v259);
  swift_bridgeObjectRelease(v260);
  *(void *)(a1 + 2208) = *(void *)(a2 + 2208);
  uint64_t v261 = *(void *)(a2 + 2216);
  uint64_t v262 = *(void *)(a1 + 2216);
  *(void *)(a1 + 2216) = v261;
  swift_bridgeObjectRetain(v261);
  swift_bridgeObjectRelease(v262);
  *(void *)(a1 + 2224) = *(void *)(a2 + 2224);
  uint64_t v263 = *(void *)(a2 + 2232);
  uint64_t v264 = *(void *)(a1 + 2232);
  *(void *)(a1 + 2232) = v263;
  swift_bridgeObjectRetain(v263);
  swift_bridgeObjectRelease(v264);
  *(void *)(a1 + 2240) = *(void *)(a2 + 2240);
  uint64_t v265 = *(void *)(a2 + 2248);
  uint64_t v266 = *(void *)(a1 + 2248);
  *(void *)(a1 + 2248) = v265;
  swift_bridgeObjectRetain(v265);
  swift_bridgeObjectRelease(v266);
  *(void *)(a1 + 2256) = *(void *)(a2 + 2256);
  uint64_t v267 = *(void *)(a2 + 2264);
  uint64_t v268 = *(void *)(a1 + 2264);
  *(void *)(a1 + 2264) = v267;
  swift_bridgeObjectRetain(v267);
  swift_bridgeObjectRelease(v268);
  *(void *)(a1 + 2272) = *(void *)(a2 + 2272);
  uint64_t v269 = *(void *)(a2 + 2280);
  uint64_t v270 = *(void *)(a1 + 2280);
  *(void *)(a1 + 2280) = v269;
  swift_bridgeObjectRetain(v269);
  swift_bridgeObjectRelease(v270);
  *(void *)(a1 + 2288) = *(void *)(a2 + 2288);
  uint64_t v271 = *(void *)(a2 + 2296);
  uint64_t v272 = *(void *)(a1 + 2296);
  *(void *)(a1 + 2296) = v271;
  swift_bridgeObjectRetain(v271);
  swift_bridgeObjectRelease(v272);
  *(void *)(a1 + 2304) = *(void *)(a2 + 2304);
  uint64_t v273 = *(void *)(a2 + 2312);
  uint64_t v274 = *(void *)(a1 + 2312);
  *(void *)(a1 + 2312) = v273;
  swift_bridgeObjectRetain(v273);
  swift_bridgeObjectRelease(v274);
  *(void *)(a1 + 2320) = *(void *)(a2 + 2320);
  uint64_t v275 = *(void *)(a2 + 2328);
  uint64_t v276 = *(void *)(a1 + 2328);
  *(void *)(a1 + 2328) = v275;
  swift_bridgeObjectRetain(v275);
  swift_bridgeObjectRelease(v276);
  *(void *)(a1 + 2336) = *(void *)(a2 + 2336);
  uint64_t v277 = *(void *)(a2 + 2344);
  uint64_t v278 = *(void *)(a1 + 2344);
  *(void *)(a1 + 2344) = v277;
  swift_bridgeObjectRetain(v277);
  swift_bridgeObjectRelease(v278);
  *(void *)(a1 + 2352) = *(void *)(a2 + 2352);
  uint64_t v279 = *(void *)(a2 + 2360);
  uint64_t v280 = *(void *)(a1 + 2360);
  *(void *)(a1 + 2360) = v279;
  swift_bridgeObjectRetain(v279);
  swift_bridgeObjectRelease(v280);
  *(void *)(a1 + 2368) = *(void *)(a2 + 2368);
  uint64_t v281 = *(void *)(a2 + 2376);
  uint64_t v282 = *(void *)(a1 + 2376);
  *(void *)(a1 + 2376) = v281;
  swift_bridgeObjectRetain(v281);
  swift_bridgeObjectRelease(v282);
  *(void *)(a1 + 2384) = *(void *)(a2 + 2384);
  uint64_t v283 = *(void *)(a2 + 2392);
  uint64_t v284 = *(void *)(a1 + 2392);
  *(void *)(a1 + 2392) = v283;
  swift_bridgeObjectRetain(v283);
  swift_bridgeObjectRelease(v284);
  *(void *)(a1 + 2400) = *(void *)(a2 + 2400);
  uint64_t v285 = *(void *)(a2 + 2408);
  uint64_t v286 = *(void *)(a1 + 2408);
  *(void *)(a1 + 2408) = v285;
  swift_bridgeObjectRetain(v285);
  swift_bridgeObjectRelease(v286);
  return a1;
}

void *initializeWithTake for SafetyMonitorSchema(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x970uLL);
}

uint64_t assignWithTake for SafetyMonitorSchema(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 48);
  uint64_t v7 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 64);
  uint64_t v9 = *(void *)(a1 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a2 + 80);
  uint64_t v11 = *(void *)(a1 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v10;
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = *(void *)(a2 + 96);
  uint64_t v13 = *(void *)(a1 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v12;
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = *(void *)(a2 + 112);
  uint64_t v15 = *(void *)(a1 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v14;
  swift_bridgeObjectRelease(v15);
  uint64_t v16 = *(void *)(a2 + 128);
  uint64_t v17 = *(void *)(a1 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v16;
  swift_bridgeObjectRelease(v17);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  uint64_t v18 = *(void *)(a2 + 208);
  uint64_t v19 = *(void *)(a1 + 208);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = v18;
  swift_bridgeObjectRelease(v19);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
  *(_BYTE *)(a1 + 272) = *(_BYTE *)(a2 + 272);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  uint64_t v20 = *(void *)(a2 + 280);
  *(_BYTE *)(a1 + 288) = *(_BYTE *)(a2 + 288);
  *(void *)(a1 + 280) = v20;
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  *(_BYTE *)(a1 + 304) = *(_BYTE *)(a2 + 304);
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  *(_BYTE *)(a1 + 336) = *(_BYTE *)(a2 + 336);
  *(_BYTE *)(a1 + 352) = *(_BYTE *)(a2 + 352);
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  *(_BYTE *)(a1 + 368) = *(_BYTE *)(a2 + 368);
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  *(_BYTE *)(a1 + 384) = *(_BYTE *)(a2 + 384);
  *(void *)(a1 + 376) = *(void *)(a2 + 376);
  uint64_t v21 = *(void *)(a2 + 400);
  uint64_t v22 = *(void *)(a1 + 400);
  *(void *)(a1 + 392) = *(void *)(a2 + 392);
  *(void *)(a1 + 400) = v21;
  swift_bridgeObjectRelease(v22);
  uint64_t v23 = *(void *)(a2 + 416);
  uint64_t v24 = *(void *)(a1 + 416);
  *(void *)(a1 + 408) = *(void *)(a2 + 408);
  *(void *)(a1 + 416) = v23;
  swift_bridgeObjectRelease(v24);
  *(_BYTE *)(a1 + 424) = *(_BYTE *)(a2 + 424);
  uint64_t v25 = *(void *)(a2 + 440);
  uint64_t v26 = *(void *)(a1 + 440);
  *(void *)(a1 + 432) = *(void *)(a2 + 432);
  *(void *)(a1 + 440) = v25;
  swift_bridgeObjectRelease(v26);
  uint64_t v27 = *(void *)(a2 + 456);
  uint64_t v28 = *(void *)(a1 + 456);
  *(void *)(a1 + 448) = *(void *)(a2 + 448);
  *(void *)(a1 + 456) = v27;
  swift_bridgeObjectRelease(v28);
  uint64_t v29 = *(void *)(a2 + 472);
  uint64_t v30 = *(void *)(a1 + 472);
  *(void *)(a1 + 464) = *(void *)(a2 + 464);
  *(void *)(a1 + 472) = v29;
  swift_bridgeObjectRelease(v30);
  uint64_t v31 = *(void *)(a2 + 488);
  uint64_t v32 = *(void *)(a1 + 488);
  *(void *)(a1 + 480) = *(void *)(a2 + 480);
  *(void *)(a1 + 488) = v31;
  swift_bridgeObjectRelease(v32);
  uint64_t v33 = *(void *)(a2 + 504);
  uint64_t v34 = *(void *)(a1 + 504);
  *(void *)(a1 + 496) = *(void *)(a2 + 496);
  *(void *)(a1 + 504) = v33;
  swift_bridgeObjectRelease(v34);
  *(void *)(a1 + 512) = *(void *)(a2 + 512);
  uint64_t v35 = *(void *)(a1 + 520);
  *(void *)(a1 + 520) = *(void *)(a2 + 520);
  swift_bridgeObjectRelease(v35);
  *(void *)(a1 + 528) = *(void *)(a2 + 528);
  uint64_t v36 = *(void *)(a1 + 536);
  *(void *)(a1 + 536) = *(void *)(a2 + 536);
  swift_bridgeObjectRelease(v36);
  *(void *)(a1 + 544) = *(void *)(a2 + 544);
  uint64_t v37 = *(void *)(a1 + 552);
  *(void *)(a1 + 552) = *(void *)(a2 + 552);
  swift_bridgeObjectRelease(v37);
  *(void *)(a1 + 560) = *(void *)(a2 + 560);
  uint64_t v38 = *(void *)(a1 + 568);
  *(void *)(a1 + 568) = *(void *)(a2 + 568);
  swift_bridgeObjectRelease(v38);
  *(void *)(a1 + 576) = *(void *)(a2 + 576);
  uint64_t v39 = *(void *)(a1 + 584);
  *(void *)(a1 + 584) = *(void *)(a2 + 584);
  swift_bridgeObjectRelease(v39);
  *(void *)(a1 + 592) = *(void *)(a2 + 592);
  uint64_t v40 = *(void *)(a1 + 600);
  *(void *)(a1 + 600) = *(void *)(a2 + 600);
  swift_bridgeObjectRelease(v40);
  *(void *)(a1 + 608) = *(void *)(a2 + 608);
  uint64_t v41 = *(void *)(a1 + 616);
  *(void *)(a1 + 616) = *(void *)(a2 + 616);
  swift_bridgeObjectRelease(v41);
  *(void *)(a1 + 624) = *(void *)(a2 + 624);
  uint64_t v42 = *(void *)(a1 + 632);
  *(void *)(a1 + 632) = *(void *)(a2 + 632);
  swift_bridgeObjectRelease(v42);
  *(void *)(a1 + 640) = *(void *)(a2 + 640);
  uint64_t v43 = *(void *)(a1 + 648);
  *(void *)(a1 + 648) = *(void *)(a2 + 648);
  swift_bridgeObjectRelease(v43);
  *(void *)(a1 + 656) = *(void *)(a2 + 656);
  uint64_t v44 = *(void *)(a1 + 664);
  *(void *)(a1 + 664) = *(void *)(a2 + 664);
  swift_bridgeObjectRelease(v44);
  *(void *)(a1 + 672) = *(void *)(a2 + 672);
  uint64_t v45 = *(void *)(a1 + 680);
  *(void *)(a1 + 680) = *(void *)(a2 + 680);
  swift_bridgeObjectRelease(v45);
  *(void *)(a1 + 688) = *(void *)(a2 + 688);
  uint64_t v46 = *(void *)(a1 + 696);
  *(void *)(a1 + 696) = *(void *)(a2 + 696);
  swift_bridgeObjectRelease(v46);
  *(void *)(a1 + 704) = *(void *)(a2 + 704);
  uint64_t v47 = *(void *)(a1 + 712);
  *(void *)(a1 + 712) = *(void *)(a2 + 712);
  swift_bridgeObjectRelease(v47);
  *(void *)(a1 + 720) = *(void *)(a2 + 720);
  uint64_t v48 = *(void *)(a1 + 728);
  *(void *)(a1 + 728) = *(void *)(a2 + 728);
  swift_bridgeObjectRelease(v48);
  *(void *)(a1 + 736) = *(void *)(a2 + 736);
  uint64_t v49 = *(void *)(a1 + 744);
  *(void *)(a1 + 744) = *(void *)(a2 + 744);
  swift_bridgeObjectRelease(v49);
  *(void *)(a1 + 752) = *(void *)(a2 + 752);
  uint64_t v50 = *(void *)(a1 + 760);
  *(void *)(a1 + 760) = *(void *)(a2 + 760);
  swift_bridgeObjectRelease(v50);
  *(void *)(a1 + 768) = *(void *)(a2 + 768);
  uint64_t v51 = *(void *)(a1 + 776);
  *(void *)(a1 + 776) = *(void *)(a2 + 776);
  swift_bridgeObjectRelease(v51);
  *(void *)(a1 + 784) = *(void *)(a2 + 784);
  uint64_t v52 = *(void *)(a1 + 792);
  *(void *)(a1 + 792) = *(void *)(a2 + 792);
  swift_bridgeObjectRelease(v52);
  *(void *)(a1 + 800) = *(void *)(a2 + 800);
  uint64_t v53 = *(void *)(a1 + 808);
  *(void *)(a1 + 808) = *(void *)(a2 + 808);
  swift_bridgeObjectRelease(v53);
  *(void *)(a1 + 816) = *(void *)(a2 + 816);
  uint64_t v54 = *(void *)(a1 + 824);
  *(void *)(a1 + 824) = *(void *)(a2 + 824);
  swift_bridgeObjectRelease(v54);
  *(void *)(a1 + 832) = *(void *)(a2 + 832);
  uint64_t v55 = *(void *)(a1 + 840);
  *(void *)(a1 + 840) = *(void *)(a2 + 840);
  swift_bridgeObjectRelease(v55);
  *(void *)(a1 + 848) = *(void *)(a2 + 848);
  uint64_t v56 = *(void *)(a1 + 856);
  *(void *)(a1 + 856) = *(void *)(a2 + 856);
  swift_bridgeObjectRelease(v56);
  *(void *)(a1 + 864) = *(void *)(a2 + 864);
  uint64_t v57 = *(void *)(a1 + 872);
  *(void *)(a1 + 872) = *(void *)(a2 + 872);
  swift_bridgeObjectRelease(v57);
  *(void *)(a1 + 880) = *(void *)(a2 + 880);
  uint64_t v58 = *(void *)(a1 + 888);
  *(void *)(a1 + 888) = *(void *)(a2 + 888);
  swift_bridgeObjectRelease(v58);
  *(void *)(a1 + 896) = *(void *)(a2 + 896);
  uint64_t v59 = *(void *)(a1 + 904);
  *(void *)(a1 + 904) = *(void *)(a2 + 904);
  swift_bridgeObjectRelease(v59);
  *(void *)(a1 + 912) = *(void *)(a2 + 912);
  uint64_t v60 = *(void *)(a1 + 920);
  *(void *)(a1 + 920) = *(void *)(a2 + 920);
  swift_bridgeObjectRelease(v60);
  *(void *)(a1 + 928) = *(void *)(a2 + 928);
  uint64_t v61 = *(void *)(a1 + 936);
  *(void *)(a1 + 936) = *(void *)(a2 + 936);
  swift_bridgeObjectRelease(v61);
  *(void *)(a1 + 944) = *(void *)(a2 + 944);
  uint64_t v62 = *(void *)(a1 + 952);
  *(void *)(a1 + 952) = *(void *)(a2 + 952);
  swift_bridgeObjectRelease(v62);
  *(void *)(a1 + 960) = *(void *)(a2 + 960);
  uint64_t v63 = *(void *)(a1 + 968);
  *(void *)(a1 + 968) = *(void *)(a2 + 968);
  swift_bridgeObjectRelease(v63);
  *(void *)(a1 + 976) = *(void *)(a2 + 976);
  uint64_t v64 = *(void *)(a1 + 984);
  *(void *)(a1 + 984) = *(void *)(a2 + 984);
  swift_bridgeObjectRelease(v64);
  *(void *)(a1 + 992) = *(void *)(a2 + 992);
  uint64_t v65 = *(void *)(a1 + 1000);
  *(void *)(a1 + 1000) = *(void *)(a2 + 1000);
  swift_bridgeObjectRelease(v65);
  *(void *)(a1 + 1008) = *(void *)(a2 + 1008);
  uint64_t v66 = *(void *)(a1 + 1016);
  *(void *)(a1 + 1016) = *(void *)(a2 + 1016);
  swift_bridgeObjectRelease(v66);
  *(void *)(a1 + 1024) = *(void *)(a2 + 1024);
  uint64_t v67 = *(void *)(a1 + 1032);
  *(void *)(a1 + 1032) = *(void *)(a2 + 1032);
  swift_bridgeObjectRelease(v67);
  *(void *)(a1 + 1040) = *(void *)(a2 + 1040);
  uint64_t v68 = *(void *)(a1 + 1048);
  *(void *)(a1 + 1048) = *(void *)(a2 + 1048);
  swift_bridgeObjectRelease(v68);
  *(void *)(a1 + 1056) = *(void *)(a2 + 1056);
  uint64_t v69 = *(void *)(a1 + 1064);
  *(void *)(a1 + 1064) = *(void *)(a2 + 1064);
  swift_bridgeObjectRelease(v69);
  *(void *)(a1 + 1072) = *(void *)(a2 + 1072);
  uint64_t v70 = *(void *)(a1 + 1080);
  *(void *)(a1 + 1080) = *(void *)(a2 + 1080);
  swift_bridgeObjectRelease(v70);
  *(void *)(a1 + 1088) = *(void *)(a2 + 1088);
  uint64_t v71 = *(void *)(a1 + 1096);
  *(void *)(a1 + 1096) = *(void *)(a2 + 1096);
  swift_bridgeObjectRelease(v71);
  *(void *)(a1 + 1104) = *(void *)(a2 + 1104);
  uint64_t v72 = *(void *)(a1 + 1112);
  *(void *)(a1 + 1112) = *(void *)(a2 + 1112);
  swift_bridgeObjectRelease(v72);
  *(void *)(a1 + 1120) = *(void *)(a2 + 1120);
  uint64_t v73 = *(void *)(a1 + 1128);
  *(void *)(a1 + 1128) = *(void *)(a2 + 1128);
  swift_bridgeObjectRelease(v73);
  *(void *)(a1 + 1136) = *(void *)(a2 + 1136);
  uint64_t v74 = *(void *)(a1 + 1144);
  *(void *)(a1 + 1144) = *(void *)(a2 + 1144);
  swift_bridgeObjectRelease(v74);
  *(void *)(a1 + 1152) = *(void *)(a2 + 1152);
  uint64_t v75 = *(void *)(a1 + 1160);
  *(void *)(a1 + 1160) = *(void *)(a2 + 1160);
  swift_bridgeObjectRelease(v75);
  *(void *)(a1 + 1168) = *(void *)(a2 + 1168);
  uint64_t v76 = *(void *)(a1 + 1176);
  *(void *)(a1 + 1176) = *(void *)(a2 + 1176);
  swift_bridgeObjectRelease(v76);
  *(void *)(a1 + 1184) = *(void *)(a2 + 1184);
  uint64_t v77 = *(void *)(a1 + 1192);
  *(void *)(a1 + 1192) = *(void *)(a2 + 1192);
  swift_bridgeObjectRelease(v77);
  *(void *)(a1 + 1200) = *(void *)(a2 + 1200);
  uint64_t v78 = *(void *)(a1 + 1208);
  *(void *)(a1 + 1208) = *(void *)(a2 + 1208);
  swift_bridgeObjectRelease(v78);
  *(void *)(a1 + 1216) = *(void *)(a2 + 1216);
  uint64_t v79 = *(void *)(a1 + 1224);
  *(void *)(a1 + 1224) = *(void *)(a2 + 1224);
  swift_bridgeObjectRelease(v79);
  *(void *)(a1 + 1232) = *(void *)(a2 + 1232);
  uint64_t v80 = *(void *)(a1 + 1240);
  *(void *)(a1 + 1240) = *(void *)(a2 + 1240);
  swift_bridgeObjectRelease(v80);
  *(void *)(a1 + 1248) = *(void *)(a2 + 1248);
  uint64_t v81 = *(void *)(a1 + 1256);
  *(void *)(a1 + 1256) = *(void *)(a2 + 1256);
  swift_bridgeObjectRelease(v81);
  *(void *)(a1 + 1264) = *(void *)(a2 + 1264);
  uint64_t v82 = *(void *)(a1 + 1272);
  *(void *)(a1 + 1272) = *(void *)(a2 + 1272);
  swift_bridgeObjectRelease(v82);
  *(void *)(a1 + 1280) = *(void *)(a2 + 1280);
  uint64_t v83 = *(void *)(a1 + 1288);
  *(void *)(a1 + 1288) = *(void *)(a2 + 1288);
  swift_bridgeObjectRelease(v83);
  *(void *)(a1 + 1296) = *(void *)(a2 + 1296);
  uint64_t v84 = *(void *)(a1 + 1304);
  *(void *)(a1 + 1304) = *(void *)(a2 + 1304);
  swift_bridgeObjectRelease(v84);
  *(void *)(a1 + 1312) = *(void *)(a2 + 1312);
  uint64_t v85 = *(void *)(a1 + 1320);
  *(void *)(a1 + 1320) = *(void *)(a2 + 1320);
  swift_bridgeObjectRelease(v85);
  *(void *)(a1 + 1328) = *(void *)(a2 + 1328);
  uint64_t v86 = *(void *)(a1 + 1336);
  *(void *)(a1 + 1336) = *(void *)(a2 + 1336);
  swift_bridgeObjectRelease(v86);
  *(void *)(a1 + 1344) = *(void *)(a2 + 1344);
  uint64_t v87 = *(void *)(a1 + 1352);
  *(void *)(a1 + 1352) = *(void *)(a2 + 1352);
  swift_bridgeObjectRelease(v87);
  *(void *)(a1 + 1360) = *(void *)(a2 + 1360);
  uint64_t v88 = *(void *)(a1 + 1368);
  *(void *)(a1 + 1368) = *(void *)(a2 + 1368);
  swift_bridgeObjectRelease(v88);
  *(void *)(a1 + 1376) = *(void *)(a2 + 1376);
  uint64_t v89 = *(void *)(a1 + 1384);
  *(void *)(a1 + 1384) = *(void *)(a2 + 1384);
  swift_bridgeObjectRelease(v89);
  *(void *)(a1 + 1392) = *(void *)(a2 + 1392);
  uint64_t v90 = *(void *)(a1 + 1400);
  *(void *)(a1 + 1400) = *(void *)(a2 + 1400);
  swift_bridgeObjectRelease(v90);
  *(void *)(a1 + 1408) = *(void *)(a2 + 1408);
  uint64_t v91 = *(void *)(a1 + 1416);
  *(void *)(a1 + 1416) = *(void *)(a2 + 1416);
  swift_bridgeObjectRelease(v91);
  *(void *)(a1 + 1424) = *(void *)(a2 + 1424);
  uint64_t v92 = *(void *)(a1 + 1432);
  *(void *)(a1 + 1432) = *(void *)(a2 + 1432);
  swift_bridgeObjectRelease(v92);
  *(void *)(a1 + 1440) = *(void *)(a2 + 1440);
  uint64_t v93 = *(void *)(a1 + 1448);
  *(void *)(a1 + 1448) = *(void *)(a2 + 1448);
  swift_bridgeObjectRelease(v93);
  *(void *)(a1 + 1456) = *(void *)(a2 + 1456);
  uint64_t v94 = *(void *)(a1 + 1464);
  *(void *)(a1 + 1464) = *(void *)(a2 + 1464);
  swift_bridgeObjectRelease(v94);
  *(void *)(a1 + 1472) = *(void *)(a2 + 1472);
  uint64_t v95 = *(void *)(a1 + 1480);
  *(void *)(a1 + 1480) = *(void *)(a2 + 1480);
  swift_bridgeObjectRelease(v95);
  *(void *)(a1 + 1488) = *(void *)(a2 + 1488);
  uint64_t v96 = *(void *)(a1 + 1496);
  *(void *)(a1 + 1496) = *(void *)(a2 + 1496);
  swift_bridgeObjectRelease(v96);
  *(void *)(a1 + 1504) = *(void *)(a2 + 1504);
  uint64_t v97 = *(void *)(a1 + 1512);
  *(void *)(a1 + 1512) = *(void *)(a2 + 1512);
  swift_bridgeObjectRelease(v97);
  *(void *)(a1 + 1520) = *(void *)(a2 + 1520);
  uint64_t v98 = *(void *)(a1 + 1528);
  *(void *)(a1 + 1528) = *(void *)(a2 + 1528);
  swift_bridgeObjectRelease(v98);
  *(void *)(a1 + 1536) = *(void *)(a2 + 1536);
  uint64_t v99 = *(void *)(a1 + 1544);
  *(void *)(a1 + 1544) = *(void *)(a2 + 1544);
  swift_bridgeObjectRelease(v99);
  *(void *)(a1 + 1552) = *(void *)(a2 + 1552);
  uint64_t v100 = *(void *)(a1 + 1560);
  *(void *)(a1 + 1560) = *(void *)(a2 + 1560);
  swift_bridgeObjectRelease(v100);
  *(void *)(a1 + 1568) = *(void *)(a2 + 1568);
  uint64_t v101 = *(void *)(a1 + 1576);
  *(void *)(a1 + 1576) = *(void *)(a2 + 1576);
  swift_bridgeObjectRelease(v101);
  *(void *)(a1 + 1584) = *(void *)(a2 + 1584);
  uint64_t v102 = *(void *)(a1 + 1592);
  *(void *)(a1 + 1592) = *(void *)(a2 + 1592);
  swift_bridgeObjectRelease(v102);
  *(void *)(a1 + 1600) = *(void *)(a2 + 1600);
  uint64_t v103 = *(void *)(a1 + 1608);
  *(void *)(a1 + 1608) = *(void *)(a2 + 1608);
  swift_bridgeObjectRelease(v103);
  *(void *)(a1 + 1616) = *(void *)(a2 + 1616);
  uint64_t v104 = *(void *)(a1 + 1624);
  *(void *)(a1 + 1624) = *(void *)(a2 + 1624);
  swift_bridgeObjectRelease(v104);
  *(void *)(a1 + 1632) = *(void *)(a2 + 1632);
  uint64_t v105 = *(void *)(a1 + 1640);
  *(void *)(a1 + 1640) = *(void *)(a2 + 1640);
  swift_bridgeObjectRelease(v105);
  *(void *)(a1 + 1648) = *(void *)(a2 + 1648);
  uint64_t v106 = *(void *)(a1 + 1656);
  *(void *)(a1 + 1656) = *(void *)(a2 + 1656);
  swift_bridgeObjectRelease(v106);
  *(void *)(a1 + 1664) = *(void *)(a2 + 1664);
  uint64_t v107 = *(void *)(a1 + 1672);
  *(void *)(a1 + 1672) = *(void *)(a2 + 1672);
  swift_bridgeObjectRelease(v107);
  *(void *)(a1 + 1680) = *(void *)(a2 + 1680);
  uint64_t v108 = *(void *)(a1 + 1688);
  *(void *)(a1 + 1688) = *(void *)(a2 + 1688);
  swift_bridgeObjectRelease(v108);
  *(void *)(a1 + 1696) = *(void *)(a2 + 1696);
  uint64_t v109 = *(void *)(a1 + 1704);
  *(void *)(a1 + 1704) = *(void *)(a2 + 1704);
  swift_bridgeObjectRelease(v109);
  *(void *)(a1 + 1712) = *(void *)(a2 + 1712);
  uint64_t v110 = *(void *)(a1 + 1720);
  *(void *)(a1 + 1720) = *(void *)(a2 + 1720);
  swift_bridgeObjectRelease(v110);
  *(void *)(a1 + 1728) = *(void *)(a2 + 1728);
  uint64_t v111 = *(void *)(a1 + 1736);
  *(void *)(a1 + 1736) = *(void *)(a2 + 1736);
  swift_bridgeObjectRelease(v111);
  *(void *)(a1 + 1744) = *(void *)(a2 + 1744);
  uint64_t v112 = *(void *)(a1 + 1752);
  *(void *)(a1 + 1752) = *(void *)(a2 + 1752);
  swift_bridgeObjectRelease(v112);
  *(void *)(a1 + 1760) = *(void *)(a2 + 1760);
  uint64_t v113 = *(void *)(a1 + 1768);
  *(void *)(a1 + 1768) = *(void *)(a2 + 1768);
  swift_bridgeObjectRelease(v113);
  *(void *)(a1 + 1776) = *(void *)(a2 + 1776);
  uint64_t v114 = *(void *)(a1 + 1784);
  *(void *)(a1 + 1784) = *(void *)(a2 + 1784);
  swift_bridgeObjectRelease(v114);
  *(void *)(a1 + 1792) = *(void *)(a2 + 1792);
  uint64_t v115 = *(void *)(a1 + 1800);
  *(void *)(a1 + 1800) = *(void *)(a2 + 1800);
  swift_bridgeObjectRelease(v115);
  *(void *)(a1 + 1808) = *(void *)(a2 + 1808);
  uint64_t v116 = *(void *)(a1 + 1816);
  *(void *)(a1 + 1816) = *(void *)(a2 + 1816);
  swift_bridgeObjectRelease(v116);
  *(void *)(a1 + 1824) = *(void *)(a2 + 1824);
  uint64_t v117 = *(void *)(a1 + 1832);
  *(void *)(a1 + 1832) = *(void *)(a2 + 1832);
  swift_bridgeObjectRelease(v117);
  *(void *)(a1 + 1840) = *(void *)(a2 + 1840);
  uint64_t v118 = *(void *)(a1 + 1848);
  *(void *)(a1 + 1848) = *(void *)(a2 + 1848);
  swift_bridgeObjectRelease(v118);
  *(void *)(a1 + 1856) = *(void *)(a2 + 1856);
  uint64_t v119 = *(void *)(a1 + 1864);
  *(void *)(a1 + 1864) = *(void *)(a2 + 1864);
  swift_bridgeObjectRelease(v119);
  *(void *)(a1 + 1872) = *(void *)(a2 + 1872);
  uint64_t v120 = *(void *)(a1 + 1880);
  *(void *)(a1 + 1880) = *(void *)(a2 + 1880);
  swift_bridgeObjectRelease(v120);
  *(void *)(a1 + 1888) = *(void *)(a2 + 1888);
  uint64_t v121 = *(void *)(a1 + 1896);
  *(void *)(a1 + 1896) = *(void *)(a2 + 1896);
  swift_bridgeObjectRelease(v121);
  *(void *)(a1 + 1904) = *(void *)(a2 + 1904);
  uint64_t v122 = *(void *)(a1 + 1912);
  *(void *)(a1 + 1912) = *(void *)(a2 + 1912);
  swift_bridgeObjectRelease(v122);
  *(void *)(a1 + 1920) = *(void *)(a2 + 1920);
  uint64_t v123 = *(void *)(a1 + 1928);
  *(void *)(a1 + 1928) = *(void *)(a2 + 1928);
  swift_bridgeObjectRelease(v123);
  *(void *)(a1 + 1936) = *(void *)(a2 + 1936);
  uint64_t v124 = *(void *)(a1 + 1944);
  *(void *)(a1 + 1944) = *(void *)(a2 + 1944);
  swift_bridgeObjectRelease(v124);
  *(void *)(a1 + 1952) = *(void *)(a2 + 1952);
  uint64_t v125 = *(void *)(a1 + 1960);
  *(void *)(a1 + 1960) = *(void *)(a2 + 1960);
  swift_bridgeObjectRelease(v125);
  *(void *)(a1 + 1968) = *(void *)(a2 + 1968);
  uint64_t v126 = *(void *)(a1 + 1976);
  *(void *)(a1 + 1976) = *(void *)(a2 + 1976);
  swift_bridgeObjectRelease(v126);
  *(void *)(a1 + 1984) = *(void *)(a2 + 1984);
  uint64_t v127 = *(void *)(a1 + 1992);
  *(void *)(a1 + 1992) = *(void *)(a2 + 1992);
  swift_bridgeObjectRelease(v127);
  *(void *)(a1 + 2000) = *(void *)(a2 + 2000);
  uint64_t v128 = *(void *)(a1 + 2008);
  *(void *)(a1 + 2008) = *(void *)(a2 + 2008);
  swift_bridgeObjectRelease(v128);
  *(void *)(a1 + 2016) = *(void *)(a2 + 2016);
  uint64_t v129 = *(void *)(a1 + 2024);
  *(void *)(a1 + 2024) = *(void *)(a2 + 2024);
  swift_bridgeObjectRelease(v129);
  *(void *)(a1 + 2032) = *(void *)(a2 + 2032);
  uint64_t v130 = *(void *)(a1 + 2040);
  *(void *)(a1 + 2040) = *(void *)(a2 + 2040);
  swift_bridgeObjectRelease(v130);
  *(void *)(a1 + 2048) = *(void *)(a2 + 2048);
  uint64_t v131 = *(void *)(a1 + 2056);
  *(void *)(a1 + 2056) = *(void *)(a2 + 2056);
  swift_bridgeObjectRelease(v131);
  *(void *)(a1 + 2064) = *(void *)(a2 + 2064);
  uint64_t v132 = *(void *)(a1 + 2072);
  *(void *)(a1 + 2072) = *(void *)(a2 + 2072);
  swift_bridgeObjectRelease(v132);
  *(void *)(a1 + 2080) = *(void *)(a2 + 2080);
  uint64_t v133 = *(void *)(a1 + 2088);
  *(void *)(a1 + 2088) = *(void *)(a2 + 2088);
  swift_bridgeObjectRelease(v133);
  *(void *)(a1 + 2096) = *(void *)(a2 + 2096);
  uint64_t v134 = *(void *)(a1 + 2104);
  *(void *)(a1 + 2104) = *(void *)(a2 + 2104);
  swift_bridgeObjectRelease(v134);
  *(void *)(a1 + 2112) = *(void *)(a2 + 2112);
  uint64_t v135 = *(void *)(a1 + 2120);
  *(void *)(a1 + 2120) = *(void *)(a2 + 2120);
  swift_bridgeObjectRelease(v135);
  *(void *)(a1 + 2128) = *(void *)(a2 + 2128);
  uint64_t v136 = *(void *)(a1 + 2136);
  *(void *)(a1 + 2136) = *(void *)(a2 + 2136);
  swift_bridgeObjectRelease(v136);
  *(void *)(a1 + 2144) = *(void *)(a2 + 2144);
  uint64_t v137 = *(void *)(a1 + 2152);
  *(void *)(a1 + 2152) = *(void *)(a2 + 2152);
  swift_bridgeObjectRelease(v137);
  *(void *)(a1 + 2160) = *(void *)(a2 + 2160);
  uint64_t v138 = *(void *)(a1 + 2168);
  *(void *)(a1 + 2168) = *(void *)(a2 + 2168);
  swift_bridgeObjectRelease(v138);
  *(void *)(a1 + 2176) = *(void *)(a2 + 2176);
  uint64_t v139 = *(void *)(a1 + 2184);
  *(void *)(a1 + 2184) = *(void *)(a2 + 2184);
  swift_bridgeObjectRelease(v139);
  *(void *)(a1 + 2192) = *(void *)(a2 + 2192);
  uint64_t v140 = *(void *)(a1 + 2200);
  *(void *)(a1 + 2200) = *(void *)(a2 + 2200);
  swift_bridgeObjectRelease(v140);
  *(void *)(a1 + 2208) = *(void *)(a2 + 2208);
  uint64_t v141 = *(void *)(a1 + 2216);
  *(void *)(a1 + 2216) = *(void *)(a2 + 2216);
  swift_bridgeObjectRelease(v141);
  *(void *)(a1 + 2224) = *(void *)(a2 + 2224);
  uint64_t v142 = *(void *)(a1 + 2232);
  *(void *)(a1 + 2232) = *(void *)(a2 + 2232);
  swift_bridgeObjectRelease(v142);
  *(void *)(a1 + 2240) = *(void *)(a2 + 2240);
  uint64_t v143 = *(void *)(a1 + 2248);
  *(void *)(a1 + 2248) = *(void *)(a2 + 2248);
  swift_bridgeObjectRelease(v143);
  *(void *)(a1 + 2256) = *(void *)(a2 + 2256);
  uint64_t v144 = *(void *)(a1 + 2264);
  *(void *)(a1 + 2264) = *(void *)(a2 + 2264);
  swift_bridgeObjectRelease(v144);
  *(void *)(a1 + 2272) = *(void *)(a2 + 2272);
  uint64_t v145 = *(void *)(a1 + 2280);
  *(void *)(a1 + 2280) = *(void *)(a2 + 2280);
  swift_bridgeObjectRelease(v145);
  *(void *)(a1 + 2288) = *(void *)(a2 + 2288);
  uint64_t v146 = *(void *)(a1 + 2296);
  *(void *)(a1 + 2296) = *(void *)(a2 + 2296);
  swift_bridgeObjectRelease(v146);
  *(void *)(a1 + 2304) = *(void *)(a2 + 2304);
  uint64_t v147 = *(void *)(a1 + 2312);
  *(void *)(a1 + 2312) = *(void *)(a2 + 2312);
  swift_bridgeObjectRelease(v147);
  *(void *)(a1 + 2320) = *(void *)(a2 + 2320);
  uint64_t v148 = *(void *)(a1 + 2328);
  *(void *)(a1 + 2328) = *(void *)(a2 + 2328);
  swift_bridgeObjectRelease(v148);
  *(void *)(a1 + 2336) = *(void *)(a2 + 2336);
  uint64_t v149 = *(void *)(a1 + 2344);
  *(void *)(a1 + 2344) = *(void *)(a2 + 2344);
  swift_bridgeObjectRelease(v149);
  *(void *)(a1 + 2352) = *(void *)(a2 + 2352);
  uint64_t v150 = *(void *)(a1 + 2360);
  *(void *)(a1 + 2360) = *(void *)(a2 + 2360);
  swift_bridgeObjectRelease(v150);
  *(void *)(a1 + 2368) = *(void *)(a2 + 2368);
  uint64_t v151 = *(void *)(a1 + 2376);
  *(void *)(a1 + 2376) = *(void *)(a2 + 2376);
  swift_bridgeObjectRelease(v151);
  *(void *)(a1 + 2384) = *(void *)(a2 + 2384);
  uint64_t v152 = *(void *)(a1 + 2392);
  *(void *)(a1 + 2392) = *(void *)(a2 + 2392);
  swift_bridgeObjectRelease(v152);
  *(void *)(a1 + 2400) = *(void *)(a2 + 2400);
  uint64_t v153 = *(void *)(a1 + 2408);
  *(void *)(a1 + 2408) = *(void *)(a2 + 2408);
  swift_bridgeObjectRelease(v153);
  return a1;
}

uint64_t getEnumTagSinglePayload for SafetyMonitorSchema(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 2416)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SafetyMonitorSchema(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 2408) = 0LL;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 2392) = 0u;
    *(_OWORD *)(result + 2376) = 0u;
    *(_OWORD *)(result + 2360) = 0u;
    *(_OWORD *)(result + 2344) = 0u;
    *(_OWORD *)(result + 2328) = 0u;
    *(_OWORD *)(result + 2312) = 0u;
    *(_OWORD *)(result + 2296) = 0u;
    *(_OWORD *)(result + 2280) = 0u;
    *(_OWORD *)(result + 2264) = 0u;
    *(_OWORD *)(result + 2248) = 0u;
    *(_OWORD *)(result + 2232) = 0u;
    *(_OWORD *)(result + 2216) = 0u;
    *(_OWORD *)(result + 2200) = 0u;
    *(_OWORD *)(result + 2184) = 0u;
    *(_OWORD *)(result + 2168) = 0u;
    *(_OWORD *)(result + 2152) = 0u;
    *(_OWORD *)(result + 2136) = 0u;
    *(_OWORD *)(result + 2120) = 0u;
    *(_OWORD *)(result + 2104) = 0u;
    *(_OWORD *)(result + 2088) = 0u;
    *(_OWORD *)(result + 2072) = 0u;
    *(_OWORD *)(result + 2056) = 0u;
    *(_OWORD *)(result + 2040) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 2416) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 2416) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SafetyMonitorSchema()
{
  return &type metadata for SafetyMonitorSchema;
}

uint64_t getEnumTagSinglePayload for SafetyMonitorSchema.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0x68) {
    goto LABEL_17;
  }
  if (a2 + 152 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 152) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 152;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 152;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 152;
    }
  }

uint64_t storeEnumTagSinglePayload for SafetyMonitorSchema.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 152 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 152) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0x68) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0x67) {
    return ((uint64_t (*)(void))((char *)&loc_100028E9C + 4 * byte_10006F0C7[v4]))();
  }
  *a1 = a2 - 104;
  return ((uint64_t (*)(void))((char *)sub_100028ED0 + 4 * byte_10006F0C2[v4]))();
}

uint64_t sub_100028ED0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100028ED8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100028EE0LL);
  }
  return result;
}

uint64_t sub_100028EEC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100028EF4LL);
  }
  *(_BYTE *)uint64_t result = a2 - 104;
  return result;
}

uint64_t sub_100028EF8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100028F00(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SafetyMonitorSchema.CodingKeys()
{
  return &type metadata for SafetyMonitorSchema.CodingKeys;
}

unint64_t sub_100028F20()
{
  unint64_t result = qword_100084328;
  if (!qword_100084328)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006F208, &type metadata for SafetyMonitorSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084328);
  }

  return result;
}

unint64_t sub_100028F68()
{
  unint64_t result = qword_100084330;
  if (!qword_100084330)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006F140, &type metadata for SafetyMonitorSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084330);
  }

  return result;
}

unint64_t sub_100028FB0()
{
  unint64_t result = qword_100084338;
  if (!qword_100084338)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006F168, &type metadata for SafetyMonitorSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084338);
  }

  return result;
}

uint64_t sub_100028FF4(char *a1, char *a2)
{
  return sub_1000609C0(*a1, *a2);
}

Swift::Int sub_100029000()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  String.hash(into:)(v3, qword_10006F488[v1], 0xE100000000000000LL);
  swift_bridgeObjectRelease(0xE100000000000000LL);
  return Hasher._finalize()();
}

uint64_t sub_100029058(uint64_t a1)
{
  return swift_bridgeObjectRelease(0xE100000000000000LL);
}

Swift::Int sub_100029084(uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  String.hash(into:)(v4, qword_10006F488[v2], 0xE100000000000000LL);
  swift_bridgeObjectRelease(0xE100000000000000LL);
  return Hasher._finalize()();
}

unint64_t sub_1000290D8@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10002A46C(*a1);
  *a2 = result;
  return result;
}

void sub_100029104(void *a1@<X8>)
{
  *a1 = qword_10006F488[*v1];
  a1[1] = 0xE100000000000000LL;
}

uint64_t sub_100029120()
{
  return qword_10006F488[*v0];
}

unint64_t sub_100029138@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10002A46C(a1);
  *a2 = result;
  return result;
}

void sub_10002915C(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_100029168(uint64_t a1)
{
  unint64_t v2 = sub_10002939C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100029190(uint64_t a1)
{
  unint64_t v2 = sub_10002939C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IDSSessionCancelSchema.encode(to:)(void *a1)
{
  int v3 = v1;
  uint64_t v5 = sub_10000264C(&qword_100084348);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100002C78(a1, v9);
  unint64_t v11 = sub_10002939C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for IDSSessionCancelSchema.CodingKeys,  &type metadata for IDSSessionCancelSchema.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  LOBYTE(v25) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, &v25, v5);
  if (!v2)
  {
    uint64_t v13 = v3[1];
    uint64_t v14 = v3[2];
    LOBYTE(v25) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v13, v14, &v25, v5);
    uint64_t v15 = v3[3];
    uint64_t v16 = v3[4];
    LOBYTE(v25) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v15, v16, &v25, v5);
    uint64_t v17 = type metadata accessor for IDSSessionCancelSchema(0LL);
    uint64_t v18 = (char *)v3 + *(int *)(v17 + 28);
    LOBYTE(v25) = 3;
    uint64_t v19 = type metadata accessor for IDSSessionCancel.IDSSessionEndedReason(0LL);
    uint64_t v20 = sub_100029794( &qword_100084358,  (uint64_t)&protocol conformance descriptor for IDSSessionCancel.IDSSessionEndedReason);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v18, &v25, v5, v19, v20);
    __int128 v25 = *(_OWORD *)((char *)v3 + *(int *)(v17 + 32));
    char v24 = 4;
    unint64_t v21 = sub_100003C08();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v25, &v24, v5, &type metadata for Data, v21);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_10002939C()
{
  unint64_t result = qword_100084350;
  if (!qword_100084350)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006F434, &type metadata for IDSSessionCancelSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084350);
  }

  return result;
}

uint64_t type metadata accessor for IDSSessionCancelSchema(uint64_t a1)
{
  uint64_t result = qword_1000843D0;
  if (!qword_1000843D0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for IDSSessionCancelSchema);
  }
  return result;
}

uint64_t IDSSessionCancelSchema.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v25 = a2;
  uint64_t v4 = sub_10000264C(&qword_100084360);
  __chkstk_darwin(v4);
  uint64_t v6 = (uint64_t *)((char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v26 = sub_10000264C(&qword_100084368);
  uint64_t v7 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for IDSSessionCancelSchema(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (uint64_t *)((char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v13 = a1[3];
  uint64_t v14 = a1[4];
  uint64_t v27 = a1;
  sub_100002C78(a1, v13);
  unint64_t v15 = sub_10002939C();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for IDSSessionCancelSchema.CodingKeys,  &type metadata for IDSSessionCancelSchema.CodingKeys,  v15,  v13,  v14);
  if (v2) {
    return sub_100002FD4(v27);
  }
  uint64_t v16 = v7;
  LOBYTE(v28) = 0;
  uint64_t v17 = v26;
  *uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)(&v28, v26);
  LOBYTE(v28) = 1;
  v12[1] = KeyedDecodingContainer.decode(_:forKey:)(&v28, v17);
  v12[2] = v18;
  LOBYTE(v28) = 2;
  v12[3] = KeyedDecodingContainer.decode(_:forKey:)(&v28, v17);
  v12[4] = v19;
  uint64_t v20 = type metadata accessor for IDSSessionCancel.IDSSessionEndedReason(0LL);
  LOBYTE(v28) = 3;
  uint64_t v21 = sub_100029794( &qword_100084370,  (uint64_t)&protocol conformance descriptor for IDSSessionCancel.IDSSessionEndedReason);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v6, v20, &v28, v17, v20, v21);
  sub_1000297D4((uint64_t)v6, (uint64_t)v12 + *(int *)(v10 + 28));
  char v29 = 4;
  unint64_t v22 = sub_100004570();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v28,  &type metadata for Data,  &v29,  v17,  &type metadata for Data,  v22);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v9, v17);
  *(_OWORD *)((char *)v12 + *(int *)(v10 + 32)) = v28;
  sub_10002981C((uint64_t)v12, v25);
  sub_100002FD4(v27);
  return sub_100029860((uint64_t)v12);
}

uint64_t sub_100029754(uint64_t a1)
{
  uint64_t v2 = sub_10000264C(&qword_100084360);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100029794(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for IDSSessionCancel.IDSSessionEndedReason(255LL);
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_1000297D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000264C(&qword_100084360);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002981C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for IDSSessionCancelSchema(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100029860(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for IDSSessionCancelSchema(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10002989C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return IDSSessionCancelSchema.init(from:)(a1, a2);
}

uint64_t sub_1000298B0(void *a1)
{
  return IDSSessionCancelSchema.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for IDSSessionCancelSchema(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v17 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v17);
  }

  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v8 = a2[2];
    uint64_t v7 = a2[3];
    a1[2] = v8;
    a1[3] = v7;
    uint64_t v9 = a2[4];
    a1[4] = v9;
    uint64_t v10 = *(int *)(a3 + 28);
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = type metadata accessor for IDSSessionCancel.IDSSessionEndedReason(0LL);
    uint64_t v14 = *(void *)(v13 - 8);
    unint64_t v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    if (v15(v12, 1LL, v13))
    {
      uint64_t v16 = sub_10000264C(&qword_100084360);
      memcpy(v11, v12, *(void *)(*(void *)(v16 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0LL, 1LL, v13);
    }

    uint64_t v18 = *(int *)(a3 + 32);
    uint64_t v19 = (char *)v4 + v18;
    uint64_t v20 = (char *)a2 + v18;
    unint64_t v21 = *((void *)v20 + 1);
    if (v21 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
    }

    else
    {
      uint64_t v22 = *(void *)v20;
      sub_100003FF0(*(void *)v20, *((void *)v20 + 1));
      *(void *)uint64_t v19 = v22;
      *((void *)v19 + 1) = v21;
    }
  }

  return v4;
}

uint64_t destroy for IDSSessionCancelSchema(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for IDSSessionCancel.IDSSessionEndedReason(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1LL, v5);
  if (!(_DWORD)result) {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  uint64_t v8 = (uint64_t *)(a1 + *(int *)(a2 + 32));
  unint64_t v9 = v8[1];
  if (v9 >> 60 != 15) {
    return sub_100004080(*v8, v9);
  }
  return result;
}

uint64_t initializeWithCopy for IDSSessionCancelSchema(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = v6;
  uint64_t v8 = *(void *)(a2 + 32);
  *(void *)(a1 + 32) = v8;
  uint64_t v9 = *(int *)(a3 + 28);
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (const void *)(a2 + v9);
  uint64_t v12 = type metadata accessor for IDSSessionCancel.IDSSessionEndedReason(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  if (v14(v11, 1LL, v12))
  {
    uint64_t v15 = sub_10000264C(&qword_100084360);
    memcpy(v10, v11, *(void *)(*(void *)(v15 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(v10, v11, v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0LL, 1LL, v12);
  }

  uint64_t v16 = *(int *)(a3 + 32);
  uint64_t v17 = a1 + v16;
  uint64_t v18 = (uint64_t *)(a2 + v16);
  unint64_t v19 = v18[1];
  if (v19 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
  }

  else
  {
    uint64_t v20 = *v18;
    sub_100003FF0(*v18, v18[1]);
    *(void *)uint64_t v17 = v20;
    *(void *)(v17 + 8) = v19;
  }

  return a1;
}

void *assignWithCopy for IDSSessionCancelSchema(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[3] = a2[3];
  uint64_t v8 = a2[4];
  uint64_t v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(int *)(a3 + 28);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for IDSSessionCancel.IDSSessionEndedReason(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1LL, v13);
  int v17 = v15(v12, 1LL, v13);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0LL, 1LL, v13);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v17)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
LABEL_6:
    uint64_t v18 = sub_10000264C(&qword_100084360);
    memcpy(v11, v12, *(void *)(*(void *)(v18 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v14 + 24))(v11, v12, v13);
LABEL_7:
  uint64_t v19 = *(int *)(a3 + 32);
  uint64_t v20 = (void *)((char *)a1 + v19);
  unint64_t v21 = (void *)((char *)a2 + v19);
  unint64_t v22 = *(void *)((char *)a2 + v19 + 8);
  if (*(void *)((char *)a1 + v19 + 8) >> 60 != 15LL)
  {
    if (v22 >> 60 != 15)
    {
      uint64_t v24 = *v21;
      sub_100003FF0(v24, v22);
      uint64_t v25 = *v20;
      unint64_t v26 = v20[1];
      *uint64_t v20 = v24;
      v20[1] = v22;
      sub_100004080(v25, v26);
      return a1;
    }

    sub_100004238((uint64_t)v20);
    goto LABEL_12;
  }

  if (v22 >> 60 == 15)
  {
LABEL_12:
    *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
    return a1;
  }

  uint64_t v23 = *v21;
  sub_100003FF0(v23, v22);
  *uint64_t v20 = v23;
  v20[1] = v22;
  return a1;
}

uint64_t initializeWithTake for IDSSessionCancelSchema(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for IDSSessionCancel.IDSSessionEndedReason(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9))
  {
    uint64_t v11 = sub_10000264C(&qword_100084360);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0LL, 1LL, v9);
  }

  *(_OWORD *)(a1 + *(int *)(a3 + 32)) = *(_OWORD *)(a2 + *(int *)(a3 + 32));
  return a1;
}

uint64_t assignWithTake for IDSSessionCancelSchema(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v7;
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = *(int *)(a3 + 28);
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (void *)(a2 + v9);
  uint64_t v12 = type metadata accessor for IDSSessionCancel.IDSSessionEndedReason(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1LL, v12);
  int v16 = v14(v11, 1LL, v12);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 32))(v10, v11, v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0LL, 1LL, v12);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v16)
  {
    (*(void (**)(void *, uint64_t))(v13 + 8))(v10, v12);
LABEL_6:
    uint64_t v17 = sub_10000264C(&qword_100084360);
    memcpy(v10, v11, *(void *)(*(void *)(v17 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, void *, uint64_t))(v13 + 40))(v10, v11, v12);
LABEL_7:
  uint64_t v18 = *(int *)(a3 + 32);
  uint64_t v19 = (uint64_t *)(a1 + v18);
  uint64_t v20 = (uint64_t *)(a2 + v18);
  unint64_t v21 = *(void *)(a1 + v18 + 8);
  if (v21 >> 60 != 15)
  {
    unint64_t v22 = v20[1];
    if (v22 >> 60 != 15)
    {
      uint64_t v23 = *v19;
      *uint64_t v19 = *v20;
      v19[1] = v22;
      sub_100004080(v23, v21);
      return a1;
    }

    sub_100004238((uint64_t)v19);
  }

  *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
  return a1;
}

uint64_t getEnumTagSinglePayload for IDSSessionCancelSchema(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10002A054);
}

uint64_t sub_10002A054(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = sub_10000264C(&qword_100084360);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 28),  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for IDSSessionCancelSchema(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10002A0E0);
}

uint64_t sub_10002A0E0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = sub_10000264C(&qword_100084360);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 28),  a2,  a2,  v7);
  }

  return result;
}

void sub_10002A158(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = &unk_10006F308;
  v4[2] = &unk_10006F308;
  sub_10002A1E4(319LL);
  if (v3 <= 0x3F)
  {
    v4[3] = *(void *)(v2 - 8) + 64LL;
    void v4[4] = &unk_10006F320;
    swift_initStructMetadata(a1, 256LL, 5LL, v4, a1 + 16);
  }

void sub_10002A1E4(uint64_t a1)
{
  if (!qword_1000843E0)
  {
    uint64_t v2 = type metadata accessor for IDSSessionCancel.IDSSessionEndedReason(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_1000843E0);
    }
  }

uint64_t getEnumTagSinglePayload for IDSSessionCancelSchema.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }

uint64_t storeEnumTagSinglePayload for IDSSessionCancelSchema.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_10002A314 + 4 * byte_10006F295[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10002A348 + 4 * byte_10006F290[v4]))();
}

uint64_t sub_10002A348(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002A350(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10002A358LL);
  }
  return result;
}

uint64_t sub_10002A364(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10002A36CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 4;
  return result;
}

uint64_t sub_10002A370(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002A378(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IDSSessionCancelSchema.CodingKeys()
{
  return &type metadata for IDSSessionCancelSchema.CodingKeys;
}

unint64_t sub_10002A398()
{
  unint64_t result = qword_100084420;
  if (!qword_100084420)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006F40C, &type metadata for IDSSessionCancelSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084420);
  }

  return result;
}

unint64_t sub_10002A3E0()
{
  unint64_t result = qword_100084428;
  if (!qword_100084428)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006F344, &type metadata for IDSSessionCancelSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084428);
  }

  return result;
}

unint64_t sub_10002A428()
{
  unint64_t result = qword_100084430;
  if (!qword_100084430)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006F36C, &type metadata for IDSSessionCancelSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084430);
  }

  return result;
}

unint64_t sub_10002A46C(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10007DAF8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5) {
    return 5LL;
  }
  else {
    return v3;
  }
}

unint64_t sub_10002A4B4()
{
  unint64_t result = qword_100084438;
  if (!qword_100084438)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IDSSessionDeclineSchema,  &type metadata for IDSSessionDeclineSchema);
    atomic_store(result, (unint64_t *)&qword_100084438);
  }

  return result;
}

uint64_t sub_10002A4F8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100060864(*a1, *a2);
}

Swift::Int sub_10002A504()
{
  int v1 = *v0;
  Hasher.init(_seed:)(v7, 0LL);
  unint64_t v2 = 0xE400000000000000LL;
  uint64_t v3 = 1702125924LL;
  if (v1 != 1)
  {
    uint64_t v3 = 0x6E6F73616572LL;
    unint64_t v2 = 0xE600000000000000LL;
  }

  if (v1) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0x656C746974LL;
  }
  if (v1) {
    unint64_t v5 = v2;
  }
  else {
    unint64_t v5 = 0xE500000000000000LL;
  }
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_10002A594(uint64_t a1)
{
  unint64_t v2 = 0xE400000000000000LL;
  uint64_t v3 = 1702125924LL;
  if (*v1 != 1)
  {
    uint64_t v3 = 0x6E6F73616572LL;
    unint64_t v2 = 0xE600000000000000LL;
  }

  if (*v1) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0x656C746974LL;
  }
  if (*v1) {
    unint64_t v5 = v2;
  }
  else {
    unint64_t v5 = 0xE500000000000000LL;
  }
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_10002A600(uint64_t a1)
{
  int v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  unint64_t v3 = 0xE400000000000000LL;
  uint64_t v4 = 1702125924LL;
  if (v2 != 1)
  {
    uint64_t v4 = 0x6E6F73616572LL;
    unint64_t v3 = 0xE600000000000000LL;
  }

  if (v2) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0x656C746974LL;
  }
  if (v2) {
    unint64_t v6 = v3;
  }
  else {
    unint64_t v6 = 0xE500000000000000LL;
  }
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

unint64_t sub_10002A68C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10002B758(*a1);
  *a2 = result;
  return result;
}

void sub_10002A6B8(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE500000000000000LL;
  unint64_t v4 = 0xE400000000000000LL;
  uint64_t v5 = 1702125924LL;
  if (v2 != 1)
  {
    uint64_t v5 = 0x6E6F73616572LL;
    unint64_t v4 = 0xE600000000000000LL;
  }

  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x656C746974LL;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_10002A708()
{
  uint64_t v1 = 1702125924LL;
  if (*v0 != 1) {
    uint64_t v1 = 0x6E6F73616572LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x656C746974LL;
  }
}

unint64_t sub_10002A754@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10002B758(a1);
  *a2 = result;
  return result;
}

void sub_10002A778(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_10002A784(uint64_t a1)
{
  unint64_t v2 = sub_10002A95C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10002A7AC(uint64_t a1)
{
  unint64_t v2 = sub_10002A95C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IDSSampleInvitationSchema.encode(to:)(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = sub_10000264C(&qword_100084440);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100002C78(a1, v9);
  unint64_t v11 = sub_10002A95C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for IDSSampleInvitationSchema.CodingKeys,  &type metadata for IDSSampleInvitationSchema.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = v3[1];
  char v25 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, &v25, v5);
  if (!v2)
  {
    uint64_t v14 = type metadata accessor for IDSSampleInvitationSchema(0LL);
    int v15 = (char *)v3 + *(int *)(v14 + 20);
    char v24 = 1;
    uint64_t v16 = type metadata accessor for Date(0LL);
    uint64_t v17 = sub_100004DB8( &qword_100084240,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v15, &v24, v5, v16, v17);
    uint64_t v18 = (uint64_t *)((char *)v3 + *(int *)(v14 + 24));
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    char v23 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, v20, &v23, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_10002A95C()
{
  unint64_t result = qword_100084448;
  if (!qword_100084448)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006F674, &type metadata for IDSSampleInvitationSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084448);
  }

  return result;
}

uint64_t type metadata accessor for IDSSampleInvitationSchema(uint64_t a1)
{
  uint64_t result = qword_1000844C0;
  if (!qword_1000844C0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for IDSSampleInvitationSchema);
  }
  return result;
}

uint64_t IDSSampleInvitationSchema.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v32 = a2;
  uint64_t v3 = sub_10000264C(&qword_100084248);
  __chkstk_darwin(v3);
  uint64_t v5 = (uint64_t *)((char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v33 = sub_10000264C(&qword_100084450);
  uint64_t v6 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  int v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for IDSSampleInvitationSchema(0LL);
  __chkstk_darwin(v9);
  unint64_t v11 = (uint64_t *)((char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  sub_100002C78(a1, v12);
  unint64_t v14 = sub_10002A95C();
  uint64_t v34 = v8;
  uint64_t v15 = v35;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for IDSSampleInvitationSchema.CodingKeys,  &type metadata for IDSSampleInvitationSchema.CodingKeys,  v14,  v12,  v13);
  if (v15) {
    return sub_100002FD4(a1);
  }
  uint64_t v16 = v6;
  uint64_t v31 = v11;
  char v38 = 0;
  uint64_t v17 = v33;
  uint64_t v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v38, v33);
  uint64_t v19 = v31;
  *uint64_t v31 = v18;
  v19[1] = v20;
  uint64_t v21 = type metadata accessor for Date(0LL);
  char v37 = 1;
  uint64_t v22 = sub_100004DB8( &qword_100084258,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v5, v21, &v37, v17, v21, v22);
  sub_10000A0E0((uint64_t)v5, (uint64_t)v31 + *(int *)(v9 + 20));
  char v36 = 2;
  uint64_t v23 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v36, v17);
  uint64_t v25 = v24;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v34, v17);
  uint64_t v27 = (uint64_t)v31;
  uint64_t v26 = v32;
  __int128 v28 = (uint64_t *)((char *)v31 + *(int *)(v9 + 24));
  *__int128 v28 = v23;
  v28[1] = v25;
  sub_10002AC8C(v27, v26);
  sub_100002FD4(a1);
  return sub_10002ACD0(v27);
}

uint64_t sub_10002AC8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for IDSSampleInvitationSchema(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002ACD0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for IDSSampleInvitationSchema(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10002AD0C()
{
  return sub_100004DB8( &qword_100084458,  type metadata accessor for IDSSampleInvitationSchema,  (uint64_t)&protocol conformance descriptor for IDSSampleInvitationSchema);
}

uint64_t sub_10002AD38()
{
  return sub_100004DB8( &qword_100084460,  type metadata accessor for IDSSampleInvitationSchema,  (uint64_t)&protocol conformance descriptor for IDSSampleInvitationSchema);
}

uint64_t sub_10002AD64@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return IDSSampleInvitationSchema.init(from:)(a1, a2);
}

uint64_t sub_10002AD78(void *a1)
{
  return IDSSampleInvitationSchema.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for IDSSampleInvitationSchema( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v15 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v15);
  }

  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date(0LL);
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain(v7);
    if (v13(v10, 1LL, v11))
    {
      uint64_t v14 = sub_10000264C(&qword_100084248);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
    }

    uint64_t v16 = *(int *)(a3 + 24);
    uint64_t v17 = (uint64_t *)((char *)v4 + v16);
    uint64_t v18 = (uint64_t *)((char *)a2 + v16);
    uint64_t v19 = v18[1];
    void *v17 = *v18;
    v17[1] = v19;
    swift_bridgeObjectRetain(v19);
  }

  return v4;
}

uint64_t destroy for IDSSampleInvitationSchema(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  return swift_bridgeObjectRelease(*(void *)(a1 + *(int *)(a2 + 24) + 8));
}

void *initializeWithCopy for IDSSampleInvitationSchema(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain(v6);
  if (v12(v9, 1LL, v10))
  {
    uint64_t v13 = sub_10000264C(&qword_100084248);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
  }

  uint64_t v14 = *(int *)(a3 + 24);
  uint64_t v15 = (void *)((char *)a1 + v14);
  uint64_t v16 = (void *)((char *)a2 + v14);
  uint64_t v17 = v16[1];
  *uint64_t v15 = *v16;
  v15[1] = v17;
  swift_bridgeObjectRetain(v17);
  return a1;
}

void *assignWithCopy for IDSSampleInvitationSchema(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1LL, v11);
  int v15 = v13(v10, 1LL, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v9, v10, v11);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }

  if (v15)
  {
LABEL_6:
    uint64_t v16 = sub_10000264C(&qword_100084248);
    memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
LABEL_7:
  uint64_t v17 = *(int *)(a3 + 24);
  uint64_t v18 = (void *)((char *)a1 + v17);
  uint64_t v19 = (void *)((char *)a2 + v17);
  *uint64_t v18 = *v19;
  uint64_t v20 = v19[1];
  uint64_t v21 = v18[1];
  v18[1] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  return a1;
}

_OWORD *initializeWithTake for IDSSampleInvitationSchema(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9))
  {
    uint64_t v11 = sub_10000264C(&qword_100084248);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0LL, 1LL, v9);
  }

  *(_OWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *assignWithTake for IDSSampleInvitationSchema(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1LL, v11);
  int v15 = v13(v10, 1LL, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v9, v10, v11);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }

  if (v15)
  {
LABEL_6:
    uint64_t v16 = sub_10000264C(&qword_100084248);
    memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
LABEL_7:
  uint64_t v17 = *(int *)(a3 + 24);
  uint64_t v18 = (void *)((char *)a1 + v17);
  uint64_t v19 = (void *)((char *)a2 + v17);
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  uint64_t v22 = v18[1];
  *uint64_t v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease(v22);
  return a1;
}

uint64_t getEnumTagSinglePayload for IDSSampleInvitationSchema(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10002B3A0);
}

uint64_t sub_10002B3A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }

  else
  {
    uint64_t v9 = sub_10000264C(&qword_100084248);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))( a1 + *(int *)(a3 + 20),  a2,  v9);
  }

uint64_t storeEnumTagSinglePayload for IDSSampleInvitationSchema( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10002B438);
}

uint64_t sub_10002B438(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 8) = a2;
  }

  else
  {
    uint64_t v7 = sub_10000264C(&qword_100084248);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 20),  a2,  a2,  v7);
  }

  return result;
}

void sub_10002B4B0(uint64_t a1)
{
  v4[0] = &unk_10006F560;
  sub_10000A998(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(v2 - 8) + 64LL;
    v4[2] = &unk_10006F560;
    swift_initStructMetadata(a1, 256LL, 3LL, v4, a1 + 16);
  }

uint64_t getEnumTagSinglePayload for IDSSampleInvitationSchema.CodingKeys( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

uint64_t storeEnumTagSinglePayload for IDSSampleInvitationSchema.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_10002B600 + 4 * byte_10006F4B5[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10002B634 + 4 * byte_10006F4B0[v4]))();
}

uint64_t sub_10002B634(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002B63C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10002B644LL);
  }
  return result;
}

uint64_t sub_10002B650(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10002B658LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_10002B65C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002B664(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IDSSampleInvitationSchema.CodingKeys()
{
  return &type metadata for IDSSampleInvitationSchema.CodingKeys;
}

unint64_t sub_10002B684()
{
  unint64_t result = qword_100084500;
  if (!qword_100084500)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006F64C, &type metadata for IDSSampleInvitationSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084500);
  }

  return result;
}

unint64_t sub_10002B6CC()
{
  unint64_t result = qword_100084508;
  if (!qword_100084508)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006F584, &type metadata for IDSSampleInvitationSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084508);
  }

  return result;
}

unint64_t sub_10002B714()
{
  unint64_t result = qword_100084510;
  if (!qword_100084510)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006F5AC, &type metadata for IDSSampleInvitationSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084510);
  }

  return result;
}

unint64_t sub_10002B758(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10007DB90, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3) {
    return 3LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_10002B7A0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v34 = a2;
  uint64_t v4 = sub_10000264C(&qword_100084248);
  __chkstk_darwin(v4);
  unsigned int v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for IDSKCSharingInvitation(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v35 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for CloudKitSharingToken(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  int v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v27 - v15;
  uint64_t result = static IDSKCSharingInvitation.decodeCloudKitToken(tokenData:shareURL:)(a1[4], a1[5], a1[2], a1[3]);
  if (!v2)
  {
    uint64_t v28 = v8;
    uint64_t v29 = v7;
    uint64_t v33 = *a1;
    uint64_t v31 = a1[1];
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v16, v10);
    uint64_t v18 = a1[7];
    uint64_t v32 = a1[6];
    uint64_t v19 = type metadata accessor for IDSKCSharingInvitationSchema(0LL);
    sub_10002B9E8((uint64_t)a1 + *(int *)(v19 + 32), (uint64_t)v6);
    uint64_t v20 = (uint64_t *)((char *)a1 + *(int *)(v19 + 36));
    uint64_t v21 = v20[1];
    uint64_t v30 = *v20;
    swift_bridgeObjectRetain(v21);
    uint64_t v22 = v31;
    swift_bridgeObjectRetain(v31);
    swift_bridgeObjectRetain(v18);
    uint64_t v23 = v35;
    IDSKCSharingInvitation.init(with:invitationToken:inviteeHandle:sentTime:displayName:)( v33,  v22,  v14,  v32,  v18,  v6,  v30,  v21);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
    uint64_t v24 = v34;
    (*(void (**)(uint64_t, char *, uint64_t))(v28 + 32))(v34, v23, v29);
    uint64_t v25 = enum case for IDSDictionaryContext.idsKCSharingInvitation(_:);
    uint64_t v26 = type metadata accessor for IDSDictionaryContext(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 104LL))(v24, v25, v26);
  }

  return result;
}

uint64_t sub_10002B9E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000264C(&qword_100084248);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t IDSCommandResponseSchema.encode(to:)(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = sub_10000264C(&qword_100084518);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100002C78(a1, v9);
  unint64_t v11 = sub_10002BD84();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for IDSCommandResponseSchema.CodingKeys,  &type metadata for IDSCommandResponseSchema.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  v32[0] = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v32, v5);
  if (!v2)
  {
    uint64_t v13 = v3[1];
    uint64_t v14 = *((unsigned __int8 *)v3 + 16);
    v32[0] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v13, v14, v32, v5);
    sub_100003BC0((uint64_t)(v3 + 3), (uint64_t)v35);
    sub_100003BC0((uint64_t)v35, (uint64_t)v32);
    char v31 = 2;
    unint64_t v15 = sub_100003C08();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v32, &v31, v5, &type metadata for Data, v15);
    uint64_t v16 = v3[5];
    uint64_t v17 = *((unsigned __int8 *)v3 + 48);
    v32[0] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, v32, v5);
    uint64_t v18 = v3[7];
    uint64_t v19 = *((unsigned __int8 *)v3 + 64);
    v32[0] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, v32, v5);
    sub_100003BC0((uint64_t)(v3 + 9), (uint64_t)v34);
    sub_100003BC0((uint64_t)v34, (uint64_t)v32);
    char v31 = 5;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v32, &v31, v5, &type metadata for Data, v15);
    uint64_t v20 = *((unsigned __int8 *)v3 + 88);
    v32[0] = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20, v32, v5);
    uint64_t v21 = *((unsigned __int8 *)v3 + 89);
    v32[0] = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v21, v32, v5);
    uint64_t v22 = v3[12];
    uint64_t v23 = v3[13];
    v32[0] = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v22, v23, v32, v5);
    uint64_t v24 = v3[14];
    uint64_t v25 = *((unsigned __int8 *)v3 + 120);
    v32[0] = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v24, v25, v32, v5);
    sub_100003BC0((uint64_t)(v3 + 16), (uint64_t)v33);
    sub_100003BC0((uint64_t)v33, (uint64_t)v32);
    char v31 = 10;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v32, &v31, v5, &type metadata for Data, v15);
    uint64_t v26 = *((unsigned __int8 *)v3 + 144);
    v32[0] = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v26, v32, v5);
    uint64_t v27 = v3[19];
    uint64_t v28 = *((unsigned __int8 *)v3 + 160);
    v32[0] = 12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v27, v28, v32, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_10002BD84()
{
  unint64_t result = qword_100084520;
  if (!qword_100084520)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006F864, &type metadata for IDSCommandResponseSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084520);
  }

  return result;
}

__n128 IDSCommandResponseSchema.init(from:)@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v9[9];
    *(_OWORD *)(a2 + 128) = v9[8];
    *(_OWORD *)(a2 + 144) = v5;
    *(_BYTE *)(a2 + 160) = v10;
    __int128 v6 = v9[5];
    *(_OWORD *)(a2 + 64) = v9[4];
    *(_OWORD *)(a2 + 80) = v6;
    __int128 v7 = v9[7];
    *(_OWORD *)(a2 + 96) = v9[6];
    *(_OWORD *)(a2 + 112) = v7;
    __int128 v8 = v9[1];
    *(_OWORD *)a2 = v9[0];
    *(_OWORD *)(a2 + 16) = v8;
    __n128 result = (__n128)v9[3];
    *(_OWORD *)(a2 + 32) = v9[2];
    *(__n128 *)(a2 + 48) = result;
  }

  return result;
}

uint64_t sub_10002BE3C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10002BE64 + 4 * byte_10006F6D0[a1]))( 99LL,  0xE100000000000000LL);
}

uint64_t sub_10002BE64()
{
  return 105LL;
}

uint64_t sub_10002BE6C()
{
  return 85LL;
}

uint64_t sub_10002BE74()
{
  return 115LL;
}

uint64_t sub_10002BE7C()
{
  return 21094LL;
}

uint64_t sub_10002BE88()
{
  return 116LL;
}

uint64_t sub_10002BE90()
{
  return 0x6E7265746E692D78LL;
}

uint64_t sub_10002BEAC()
{
  return 0x6E6967676F6C2D78LL;
}

uint64_t sub_10002BEC8()
{
  return 6906225LL;
}

uint64_t sub_10002BED8()
{
  return 7627121LL;
}

uint64_t sub_10002BEEC()
{
  return 1935960433LL;
}

uint64_t sub_10002BEFC()
{
  return 1936945777LL;
}

uint64_t sub_10002BF0C()
{
  return 30321LL;
}

uint64_t sub_10002BF18(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10002BF40 + 4 * byte_10006F6DD[a1]))( 99LL,  0xE100000000000000LL);
}

uint64_t sub_10002BF40()
{
  return 105LL;
}

uint64_t sub_10002BF48()
{
  return 85LL;
}

uint64_t sub_10002BF50()
{
  return 115LL;
}

uint64_t sub_10002BF58()
{
  return 21094LL;
}

uint64_t sub_10002BF64()
{
  return 116LL;
}

uint64_t sub_10002BF6C()
{
  return 0x6E7265746E692D78LL;
}

uint64_t sub_10002BF88()
{
  return 0x6E6967676F6C2D78LL;
}

uint64_t sub_10002BFA4()
{
  return 6906225LL;
}

uint64_t sub_10002BFB4()
{
  return 7627121LL;
}

uint64_t sub_10002BFC8()
{
  return 1935960433LL;
}

uint64_t sub_10002BFD8()
{
  return 1936945777LL;
}

uint64_t sub_10002BFE8()
{
  return 30321LL;
}

uint64_t sub_10002BFF4(void *a1)
{
  return IDSCommandResponseSchema.encode(to:)(a1);
}

uint64_t sub_10002C04C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2 = *a2;
  uint64_t v3 = sub_10002BE3C(*a1);
  uint64_t v5 = v4;
  uint64_t v6 = sub_10002BE3C(v2);
  if (v3 == v6 && v5 == v7)
  {
    char v10 = 1;
    uint64_t v9 = v5;
  }

  else
  {
    uint64_t v9 = v7;
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
  }

  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

Swift::Int sub_10002C0D4()
{
  unsigned __int8 v1 = *v0;
  Hasher.init(_seed:)(v6, 0LL);
  uint64_t v2 = sub_10002BE3C(v1);
  uint64_t v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_10002C134(uint64_t a1)
{
  uint64_t v3 = sub_10002BE3C(*v1);
  uint64_t v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_10002C174(uint64_t a1)
{
  unsigned __int8 v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  uint64_t v3 = sub_10002BE3C(v2);
  uint64_t v5 = v4;
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

unint64_t sub_10002C1D0@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10002D364(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10002C1FC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10002BE3C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10002C224()
{
  return sub_10002BF18(*v0);
}

unint64_t sub_10002C22C@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10002D364(a1);
  *a2 = result;
  return result;
}

void sub_10002C250(_BYTE *a1@<X8>)
{
  *a1 = 13;
}

uint64_t sub_10002C25C(uint64_t a1)
{
  unint64_t v2 = sub_10002BD84();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10002C284(uint64_t a1)
{
  unint64_t v2 = sub_10002BD84();
  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_10002C2AC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000264C(&qword_100084540);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  __int128 v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  uint64_t v122 = a1;
  sub_100002C78(a1, v9);
  unint64_t v11 = sub_10002BD84();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for IDSCommandResponseSchema.CodingKeys,  &type metadata for IDSCommandResponseSchema.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return (void *)sub_100002FD4(v122);
  }
  uint64_t v66 = a2;
  LOBYTE(v80) = 0;
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)(&v80, v5);
  LOBYTE(v80) = 1;
  uint64_t v65 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v80, v5);
  char v121 = v13 & 1;
  LOBYTE(v69) = 2;
  int v14 = v13;
  unint64_t v15 = sub_100004570();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v80,  &type metadata for Data,  &v69,  v5,  &type metadata for Data,  v15);
  uint64_t v64 = v15;
  int v63 = v14;
  uint64_t v16 = v80;
  unint64_t v17 = v81;
  LOBYTE(v80) = 3;
  sub_1000045B4(v16, v81);
  uint64_t v60 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v80, v5);
  unint64_t v61 = v17;
  uint64_t v62 = v16;
  char v119 = v18 & 1;
  LOBYTE(v80) = 4;
  LODWORD(v17) = v18;
  uint64_t v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v80, v5);
  int v59 = v17;
  char v117 = v20 & 1;
  LOBYTE(v69) = 5;
  LODWORD(v17) = v20;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v80,  &type metadata for Data,  &v69,  v5,  &type metadata for Data,  v64);
  int v57 = v17;
  uint64_t v21 = v80;
  unint64_t v22 = v81;
  LOBYTE(v80) = 6;
  uint64_t v58 = v21;
  sub_1000045B4(v21, v81);
  int v23 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v80, v5);
  unint64_t v68 = v22;
  int v55 = v23;
  uint64_t v56 = v12;
  uint64_t v24 = v58;
  LOBYTE(v80) = 7;
  int v54 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v80, v5);
  LOBYTE(v80) = 8;
  uint64_t v53 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v80, v5);
  uint64_t v51 = v19;
  LOBYTE(v80) = 9;
  uint64_t v67 = v25;
  swift_bridgeObjectRetain(v25);
  uint64_t v26 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v80, v5);
  int v52 = v27;
  uint64_t v28 = v26;
  char v113 = v27 & 1;
  LOBYTE(v69) = 10;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v80,  &type metadata for Data,  &v69,  v5,  &type metadata for Data,  v64);
  uint64_t v29 = v80;
  unint64_t v30 = v81;
  LOBYTE(v80) = 11;
  uint64_t v64 = v29;
  sub_1000045B4(v29, v81);
  int v50 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v80, v5);
  char v109 = 12;
  uint64_t v49 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v109, v5);
  char v32 = v31;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  char v33 = v32 & 1;
  char v110 = v32 & 1;
  *(void *)&__int128 v69 = v56;
  *((void *)&v69 + 1) = v65;
  LOBYTE(v70) = v63 & 1;
  unint64_t v34 = v61;
  *((void *)&v70 + 1) = v62;
  *(void *)&__int128 v71 = v61;
  *((void *)&v71 + 1) = v60;
  LOBYTE(v72) = v59 & 1;
  *((void *)&v72 + 1) = v51;
  LOBYTE(v73) = v57 & 1;
  *((void *)&v73 + 1) = v24;
  uint64_t v35 = v24;
  uint64_t v36 = v67;
  unint64_t v37 = v68;
  *(void *)&__int128 v74 = v68;
  BYTE8(v74) = v55;
  BYTE9(v74) = v54;
  *(void *)&__int128 v75 = v53;
  *((void *)&v75 + 1) = v67;
  *(void *)&__int128 v76 = v28;
  BYTE8(v76) = v52 & 1;
  uint64_t v38 = v64;
  *(void *)&__int128 v77 = v64;
  *((void *)&v77 + 1) = v30;
  LOBYTE(v78) = v50;
  *((void *)&v78 + 1) = v49;
  char v79 = v33;
  sub_10002D3AC(&v69);
  sub_1000045C8(v38, v30);
  swift_bridgeObjectRelease(v36);
  uint64_t v39 = v35;
  sub_1000045C8(v35, v37);
  uint64_t v40 = v62;
  sub_1000045C8(v62, v34);
  sub_100002FD4(v122);
  uint64_t v80 = v56;
  unint64_t v81 = v65;
  char v82 = v121;
  *(_DWORD *)uint64_t v83 = *(_DWORD *)v120;
  *(_DWORD *)&v83[3] = *(_DWORD *)&v120[3];
  uint64_t v84 = v40;
  unint64_t v85 = v34;
  uint64_t v86 = v60;
  char v87 = v119;
  *(_DWORD *)uint64_t v88 = *(_DWORD *)v118;
  *(_DWORD *)&v88[3] = *(_DWORD *)&v118[3];
  uint64_t v89 = v51;
  char v90 = v117;
  *(_DWORD *)uint64_t v91 = *(_DWORD *)v116;
  *(_DWORD *)&v91[3] = *(_DWORD *)&v116[3];
  uint64_t v92 = v39;
  unint64_t v93 = v37;
  char v94 = v55;
  char v95 = v54;
  int v96 = v114;
  __int16 v97 = v115;
  uint64_t v98 = v53;
  uint64_t v99 = v36;
  uint64_t v100 = v28;
  char v101 = v113;
  *(_DWORD *)&v102[3] = *(_DWORD *)&v112[3];
  *(_DWORD *)uint64_t v102 = *(_DWORD *)v112;
  uint64_t v103 = v64;
  unint64_t v104 = v30;
  char v105 = v50;
  *(_DWORD *)&v106[3] = *(_DWORD *)&v111[3];
  *(_DWORD *)uint64_t v106 = *(_DWORD *)v111;
  uint64_t v107 = v49;
  char v108 = v110;
  unint64_t result = sub_10002D414(&v80);
  __int128 v42 = v78;
  uint64_t v43 = v66;
  *(_OWORD *)(v66 + 128) = v77;
  *(_OWORD *)(v43 + 144) = v42;
  *(_BYTE *)(v43 + 160) = v79;
  __int128 v44 = v74;
  *(_OWORD *)(v43 + 64) = v73;
  *(_OWORD *)(v43 + 80) = v44;
  __int128 v45 = v76;
  *(_OWORD *)(v43 + 96) = v75;
  *(_OWORD *)(v43 + 112) = v45;
  __int128 v46 = v70;
  *(_OWORD *)uint64_t v43 = v69;
  *(_OWORD *)(v43 + 16) = v46;
  __int128 v47 = v72;
  *(_OWORD *)(v43 + 32) = v71;
  *(_OWORD *)(v43 + 48) = v47;
  return result;
}

uint64_t destroy for IDSCommandResponseSchema(uint64_t *a1)
{
  unint64_t v2 = a1[4];
  if (v2 >> 60 != 15) {
    sub_100004080(a1[3], v2);
  }
  unint64_t v3 = a1[10];
  if (v3 >> 60 != 15) {
    sub_100004080(a1[9], v3);
  }
  uint64_t result = swift_bridgeObjectRelease(a1[13]);
  unint64_t v5 = a1[17];
  if (v5 >> 60 != 15) {
    return sub_100004080(a1[16], v5);
  }
  return result;
}

uint64_t initializeWithCopy for IDSCommandResponseSchema(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  unint64_t v5 = (uint64_t *)(a2 + 24);
  unint64_t v6 = *(void *)(a2 + 32);
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)v5;
  }

  else
  {
    uint64_t v7 = *v5;
    sub_100003FF0(*v5, *(void *)(a2 + 32));
    *(void *)(a1 + 24) = v7;
    *(void *)(a1 + 32) = v6;
  }

  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  __int128 v8 = (uint64_t *)(a2 + 72);
  unint64_t v9 = *(void *)(a2 + 80);
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 72) = *(_OWORD *)v8;
  }

  else
  {
    uint64_t v10 = *v8;
    sub_100003FF0(*v8, *(void *)(a2 + 80));
    *(void *)(a1 + 72) = v10;
    *(void *)(a1 + 80) = v9;
  }

  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  uint64_t v11 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v11;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  uint64_t v12 = (_OWORD *)(a2 + 128);
  unint64_t v13 = *(void *)(a2 + 136);
  swift_bridgeObjectRetain(v11);
  if (v13 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 128) = *v12;
  }

  else
  {
    uint64_t v14 = *(void *)v12;
    sub_100003FF0(v14, v13);
    *(void *)(a1 + 128) = v14;
    *(void *)(a1 + 136) = v13;
  }

  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  return a1;
}

uint64_t assignWithCopy for IDSCommandResponseSchema(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  unint64_t v5 = (_OWORD *)(a1 + 24);
  unint64_t v6 = (uint64_t *)(a2 + 24);
  unint64_t v7 = *(void *)(a2 + 32);
  if (*(void *)(a1 + 32) >> 60 == 15LL)
  {
    if (v7 >> 60 != 15)
    {
      uint64_t v8 = *v6;
      sub_100003FF0(*v6, *(void *)(a2 + 32));
      *(void *)(a1 + 24) = v8;
      *(void *)(a1 + 32) = v7;
      goto LABEL_8;
    }

    goto LABEL_6;
  }

  if (v7 >> 60 == 15)
  {
    sub_100004238(a1 + 24);
LABEL_6:
    *unint64_t v5 = *(_OWORD *)v6;
    goto LABEL_8;
  }

  uint64_t v9 = *v6;
  sub_100003FF0(*v6, *(void *)(a2 + 32));
  uint64_t v10 = *(void *)(a1 + 24);
  unint64_t v11 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = v9;
  *(void *)(a1 + 32) = v7;
  sub_100004080(v10, v11);
LABEL_8:
  uint64_t v12 = *(void *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(void *)(a1 + 40) = v12;
  uint64_t v13 = *(void *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(void *)(a1 + 56) = v13;
  uint64_t v14 = (uint64_t *)(a2 + 72);
  unint64_t v15 = *(void *)(a2 + 80);
  if (*(void *)(a1 + 80) >> 60 == 15LL)
  {
    if (v15 >> 60 != 15)
    {
      uint64_t v16 = *v14;
      sub_100003FF0(*v14, *(void *)(a2 + 80));
      *(void *)(a1 + 72) = v16;
      *(void *)(a1 + 80) = v15;
      goto LABEL_15;
    }

    goto LABEL_13;
  }

  if (v15 >> 60 == 15)
  {
    sub_100004238(a1 + 72);
LABEL_13:
    *(_OWORD *)(a1 + 72) = *(_OWORD *)v14;
    goto LABEL_15;
  }

  uint64_t v17 = *v14;
  sub_100003FF0(*v14, *(void *)(a2 + 80));
  uint64_t v18 = *(void *)(a1 + 72);
  unint64_t v19 = *(void *)(a1 + 80);
  *(void *)(a1 + 72) = v17;
  *(void *)(a1 + 80) = v15;
  sub_100004080(v18, v19);
LABEL_15:
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  uint64_t v20 = *(void *)(a2 + 104);
  uint64_t v21 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  uint64_t v22 = *(void *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(void *)(a1 + 112) = v22;
  int v23 = (uint64_t *)(a2 + 128);
  unint64_t v24 = *(void *)(a2 + 136);
  if (*(void *)(a1 + 136) >> 60 != 15LL)
  {
    if (v24 >> 60 != 15)
    {
      uint64_t v26 = *v23;
      sub_100003FF0(*v23, *(void *)(a2 + 136));
      uint64_t v27 = *(void *)(a1 + 128);
      unint64_t v28 = *(void *)(a1 + 136);
      *(void *)(a1 + 128) = v26;
      *(void *)(a1 + 136) = v24;
      sub_100004080(v27, v28);
      goto LABEL_22;
    }

    sub_100004238(a1 + 128);
    goto LABEL_20;
  }

  if (v24 >> 60 == 15)
  {
LABEL_20:
    *(_OWORD *)(a1 + 128) = *(_OWORD *)v23;
    goto LABEL_22;
  }

  uint64_t v25 = *v23;
  sub_100003FF0(*v23, *(void *)(a2 + 136));
  *(void *)(a1 + 128) = v25;
  *(void *)(a1 + 136) = v24;
LABEL_22:
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  uint64_t v29 = *(void *)(a2 + 152);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(void *)(a1 + 152) = v29;
  return a1;
}

__n128 initializeWithTake for IDSCommandResponseSchema(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __int128 v4 = a2[3];
  __int128 v5 = a2[4];
  __int128 v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  __n128 result = (__n128)a2[7];
  __int128 v8 = a2[8];
  __int128 v9 = a2[9];
  *(_BYTE *)(a1 + 160) = *((_BYTE *)a2 + 160);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

uint64_t assignWithTake for IDSCommandResponseSchema(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  __int128 v5 = (_OWORD *)(a1 + 24);
  __int128 v6 = (_OWORD *)(a2 + 24);
  unint64_t v7 = *(void *)(a1 + 32);
  if (v7 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v8 = *(void *)(a2 + 32);
  if (v8 >> 60 == 15)
  {
    sub_100004238(a1 + 24);
LABEL_4:
    *__int128 v5 = *v6;
    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)v6;
  *(void *)(a1 + 32) = v8;
  sub_100004080(v9, v7);
LABEL_6:
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  uint64_t v10 = (_OWORD *)(a2 + 72);
  unint64_t v11 = *(void *)(a1 + 80);
  if (v11 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)(a1 + 72) = *v10;
    goto LABEL_11;
  }

  unint64_t v12 = *(void *)(a2 + 80);
  if (v12 >> 60 == 15)
  {
    sub_100004238(a1 + 72);
    goto LABEL_9;
  }

  uint64_t v13 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = *(void *)v10;
  *(void *)(a1 + 80) = v12;
  sub_100004080(v13, v11);
LABEL_11:
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  uint64_t v14 = *(void *)(a2 + 104);
  uint64_t v15 = *(void *)(a1 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v14;
  swift_bridgeObjectRelease(v15);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  uint64_t v16 = (void *)(a2 + 128);
  unint64_t v17 = *(void *)(a1 + 136);
  if (v17 >> 60 != 15)
  {
    unint64_t v18 = *(void *)(a2 + 136);
    if (v18 >> 60 != 15)
    {
      uint64_t v19 = *(void *)(a1 + 128);
      *(void *)(a1 + 128) = *v16;
      *(void *)(a1 + 136) = v18;
      sub_100004080(v19, v17);
      goto LABEL_16;
    }

    sub_100004238(a1 + 128);
  }

  *(_OWORD *)(a1 + 128) = *(_OWORD *)v16;
LABEL_16:
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  return a1;
}

uint64_t getEnumTagSinglePayload for IDSCommandResponseSchema(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 161)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 104);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for IDSCommandResponseSchema( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 152) = 0LL;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 160) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 161) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 161) = 0;
    }
    if (a2) {
      *(void *)(result + 104) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for IDSCommandResponseSchema()
{
  return &type metadata for IDSCommandResponseSchema;
}

uint64_t getEnumTagSinglePayload for IDSCommandResponseSchema.CodingKeys( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF4) {
    goto LABEL_17;
  }
  if (a2 + 12 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 12) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 12;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }

uint64_t storeEnumTagSinglePayload for IDSCommandResponseSchema.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 12 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 12) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF4) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF3) {
    return ((uint64_t (*)(void))((char *)&loc_10002D20C + 4 * byte_10006F6EF[v4]))();
  }
  *a1 = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_10002D240 + 4 * byte_10006F6EA[v4]))();
}

uint64_t sub_10002D240(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002D248(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10002D250LL);
  }
  return result;
}

uint64_t sub_10002D25C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10002D264LL);
  }
  *(_BYTE *)__n128 result = a2 + 12;
  return result;
}

uint64_t sub_10002D268(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002D270(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IDSCommandResponseSchema.CodingKeys()
{
  return &type metadata for IDSCommandResponseSchema.CodingKeys;
}

unint64_t sub_10002D290()
{
  unint64_t result = qword_100084528;
  if (!qword_100084528)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006F83C, &type metadata for IDSCommandResponseSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084528);
  }

  return result;
}

unint64_t sub_10002D2D8()
{
  unint64_t result = qword_100084530;
  if (!qword_100084530)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006F774, &type metadata for IDSCommandResponseSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084530);
  }

  return result;
}

unint64_t sub_10002D320()
{
  unint64_t result = qword_100084538;
  if (!qword_100084538)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006F79C, &type metadata for IDSCommandResponseSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084538);
  }

  return result;
}

unint64_t sub_10002D364(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10007DBF8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xD) {
    return 13LL;
  }
  else {
    return v3;
  }
}

void *sub_10002D3AC(void *a1)
{
  uint64_t v2 = a1[9];
  unint64_t v3 = a1[10];
  uint64_t v4 = a1[13];
  uint64_t v5 = a1[16];
  unint64_t v6 = a1[17];
  sub_1000045B4(a1[3], a1[4]);
  sub_1000045B4(v2, v3);
  swift_bridgeObjectRetain(v4);
  sub_1000045B4(v5, v6);
  return a1;
}

void *sub_10002D414(void *a1)
{
  uint64_t v2 = a1[9];
  unint64_t v3 = a1[10];
  uint64_t v4 = a1[13];
  uint64_t v5 = a1[16];
  unint64_t v6 = a1[17];
  sub_1000045C8(a1[3], a1[4]);
  sub_1000045C8(v2, v3);
  swift_bridgeObjectRelease(v4);
  sub_1000045C8(v5, v6);
  return a1;
}

uint64_t sub_10002D47C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10002D4A4 + 4 * byte_10006F8C0[a1]))( 118LL,  0xE100000000000000LL);
}

uint64_t sub_10002D4A4()
{
  return 98LL;
}

uint64_t sub_10002D4AC()
{
  return 115LL;
}

uint64_t sub_10002D4B4()
{
  return 112LL;
}

uint64_t sub_10002D4BC()
{
  return 99LL;
}

uint64_t sub_10002D4C4()
{
  return 25443LL;
}

uint64_t sub_10002D4D0()
{
  return 26989LL;
}

uint64_t sub_10002D4DC()
{
  return 7500147LL;
}

unint64_t sub_10002D4EC()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_10002D508()
{
  return 1835819888LL;
}

uint64_t sub_10002D518()
{
  return 107LL;
}

uint64_t sub_10002D520()
{
  return 29555LL;
}

uint64_t sub_10002D52C()
{
  return 29043LL;
}

uint64_t sub_10002D538(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10002D560 + 4 * byte_10006F8CD[a1]))( 118LL,  0xE100000000000000LL);
}

uint64_t sub_10002D560()
{
  return 98LL;
}

uint64_t sub_10002D568()
{
  return 115LL;
}

uint64_t sub_10002D570()
{
  return 112LL;
}

uint64_t sub_10002D578()
{
  return 99LL;
}

uint64_t sub_10002D580()
{
  return 25443LL;
}

uint64_t sub_10002D58C()
{
  return 26989LL;
}

uint64_t sub_10002D598()
{
  return 7500147LL;
}

unint64_t sub_10002D5A8()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_10002D5C4()
{
  return 1835819888LL;
}

uint64_t sub_10002D5D4()
{
  return 107LL;
}

uint64_t sub_10002D5DC()
{
  return 29555LL;
}

uint64_t sub_10002D5E8()
{
  return 29043LL;
}

uint64_t sub_10002D5F4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2 = *a2;
  uint64_t v3 = sub_10002D47C(*a1);
  uint64_t v5 = v4;
  uint64_t v6 = sub_10002D47C(v2);
  if (v3 == v6 && v5 == v7)
  {
    char v10 = 1;
    uint64_t v9 = v5;
  }

  else
  {
    uint64_t v9 = v7;
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
  }

  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

Swift::Int sub_10002D67C()
{
  unsigned __int8 v1 = *v0;
  Hasher.init(_seed:)(v6, 0LL);
  uint64_t v2 = sub_10002D47C(v1);
  uint64_t v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_10002D6DC(uint64_t a1)
{
  uint64_t v3 = sub_10002D47C(*v1);
  uint64_t v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_10002D71C(uint64_t a1)
{
  unsigned __int8 v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  uint64_t v3 = sub_10002D47C(v2);
  uint64_t v5 = v4;
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

unint64_t sub_10002D778@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10002DCC0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10002D7A4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10002D47C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10002D7CC()
{
  return sub_10002D538(*v0);
}

unint64_t sub_10002D7D4@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10002DCC0(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10002D7F8(uint64_t a1)
{
  unint64_t v2 = sub_10002DBB4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10002D820(uint64_t a1)
{
  unint64_t v2 = sub_10002DBB4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IDSSessionAcceptSchema.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000264C(&qword_100084548);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100002C78(a1, v9);
  unint64_t v11 = sub_10002DBB4();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for IDSSessionAcceptSchema.CodingKeys,  &type metadata for IDSSessionAcceptSchema.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  v29[0] = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v29, v5);
  if (!v2)
  {
    sub_100003BC0((uint64_t)(v3 + 1), (uint64_t)v33);
    sub_100003BC0((uint64_t)v33, (uint64_t)v29);
    char v28 = 1;
    unint64_t v13 = sub_100003C08();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v29, &v28, v5, &type metadata for Data, v13);
    uint64_t v14 = v3[3];
    uint64_t v15 = v3[4];
    v29[0] = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, v29, v5);
    uint64_t v16 = v3[5];
    uint64_t v17 = v3[6];
    v29[0] = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, v29, v5);
    sub_100003BC0((uint64_t)(v3 + 7), (uint64_t)v32);
    sub_100003BC0((uint64_t)v32, (uint64_t)v29);
    char v28 = 4;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v29, &v28, v5, &type metadata for Data, v13);
    uint64_t v18 = *((unsigned __int8 *)v3 + 72);
    v29[0] = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v29, v5);
    uint64_t v19 = *((unsigned __int8 *)v3 + 73);
    v29[0] = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, v29, v5);
    uint64_t v20 = *((unsigned __int8 *)v3 + 74);
    v29[0] = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20, v29, v5);
    sub_100003BC0((uint64_t)(v3 + 10), (uint64_t)v31);
    sub_100003BC0((uint64_t)v31, (uint64_t)v29);
    char v28 = 8;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v29, &v28, v5, &type metadata for Data, v13);
    uint64_t v21 = *((unsigned __int8 *)v3 + 96);
    v29[0] = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v21, v29, v5);
    sub_100003BC0((uint64_t)(v3 + 13), (uint64_t)v30);
    sub_100003BC0((uint64_t)v30, (uint64_t)v29);
    char v28 = 10;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v29, &v28, v5, &type metadata for Data, v13);
    uint64_t v22 = v3[15];
    uint64_t v23 = *((unsigned __int8 *)v3 + 128);
    v29[0] = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v22, v23, v29, v5);
    uint64_t v24 = v3[17];
    uint64_t v25 = *((unsigned __int8 *)v3 + 144);
    v29[0] = 12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v24, v25, v29, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_10002DBB4()
{
  unint64_t result = qword_100084550;
  if (!qword_100084550)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006FA54, &type metadata for IDSSessionAcceptSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084550);
  }

  return result;
}

double IDSSessionAcceptSchema.init(from:)@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v9[7];
    *(_OWORD *)(a2 + 96) = v9[6];
    *(_OWORD *)(a2 + 112) = v5;
    *(_OWORD *)(a2 + 128) = v9[8];
    *(_BYTE *)(a2 + 144) = v10;
    __int128 v6 = v9[3];
    *(_OWORD *)(a2 + 32) = v9[2];
    *(_OWORD *)(a2 + 48) = v6;
    __int128 v7 = v9[5];
    *(_OWORD *)(a2 + 64) = v9[4];
    *(_OWORD *)(a2 + 80) = v7;
    double result = *(double *)v9;
    __int128 v8 = v9[1];
    *(_OWORD *)a2 = v9[0];
    *(_OWORD *)(a2 + 16) = v8;
  }

  return result;
}

uint64_t sub_10002DC68(void *a1)
{
  return IDSSessionAcceptSchema.encode(to:)(a1);
}

unint64_t sub_10002DCC0(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10007DD50, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xD) {
    return 13LL;
  }
  else {
    return v3;
  }
}

void *sub_10002DD08@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000264C(&qword_100084570);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  __int128 v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  char v109 = a1;
  sub_100002C78(a1, v9);
  unint64_t v11 = sub_10002DBB4();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for IDSSessionAcceptSchema.CodingKeys,  &type metadata for IDSSessionAcceptSchema.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return (void *)sub_100002FD4(v109);
  }
  uint64_t v61 = a2;
  LOBYTE(v79) = 0;
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)(&v79, v5);
  LOBYTE(v69) = 1;
  unint64_t v13 = sub_100004570();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v79,  &type metadata for Data,  &v69,  v5,  &type metadata for Data,  v13);
  uint64_t v64 = v13;
  uint64_t v15 = v79;
  unint64_t v14 = v80;
  LOBYTE(v79) = 2;
  sub_1000045B4(v15, v80);
  uint64_t v58 = KeyedDecodingContainer.decode(_:forKey:)(&v79, v5);
  *(void *)&__int128 v59 = v12;
  *((void *)&v59 + 1) = v15;
  unint64_t v60 = v14;
  LOBYTE(v79) = 3;
  uint64_t v17 = v16;
  swift_bridgeObjectRetain(v16);
  uint64_t v18 = KeyedDecodingContainer.decode(_:forKey:)(&v79, v5);
  uint64_t v63 = v17;
  uint64_t v19 = v18;
  LOBYTE(v69) = 4;
  uint64_t v21 = v20;
  swift_bridgeObjectRetain(v20);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v79,  &type metadata for Data,  &v69,  v5,  &type metadata for Data,  v64);
  uint64_t v62 = v21;
  uint64_t v23 = v79;
  unint64_t v22 = v80;
  LOBYTE(v79) = 5;
  sub_1000045B4(v23, v80);
  int v24 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v79, v5);
  unint64_t v67 = v22;
  uint64_t v68 = v23;
  int v57 = v24;
  LOBYTE(v79) = 6;
  LODWORD(v23) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v79, v5);
  LOBYTE(v79) = 7;
  int v56 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v79, v5);
  LOBYTE(v69) = 8;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v79,  &type metadata for Data,  &v69,  v5,  &type metadata for Data,  v64);
  int v55 = v23;
  uint64_t v54 = v19;
  uint64_t v25 = v79;
  LOBYTE(v79) = 9;
  unint64_t v65 = v80;
  uint64_t v66 = v25;
  sub_1000045B4(v25, v80);
  LODWORD(v22) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v79, v5);
  LOBYTE(v69) = 10;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v79,  &type metadata for Data,  &v69,  v5,  &type metadata for Data,  v64);
  uint64_t v26 = v79;
  LOBYTE(v79) = 11;
  uint64_t v64 = v26;
  unint64_t v27 = v80;
  sub_1000045B4(v26, v80);
  uint64_t v53 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v79, v5);
  int v52 = v28 & 1;
  char v107 = v28 & 1;
  char v104 = 12;
  uint64_t v29 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v104, v5);
  char v31 = v30;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  char v32 = v31 & 1;
  char v105 = v31 & 1;
  __int128 v69 = v59;
  *(void *)&__int128 v70 = v60;
  *((void *)&v70 + 1) = v58;
  *(void *)&__int128 v71 = v63;
  *((void *)&v71 + 1) = v54;
  unint64_t v33 = v67;
  *(void *)&__int128 v72 = v62;
  *((void *)&v72 + 1) = v68;
  uint64_t v34 = v68;
  *(void *)&__int128 v73 = v67;
  BYTE8(v73) = v57;
  BYTE9(v73) = v55;
  BYTE10(v73) = v56;
  unint64_t v36 = v65;
  uint64_t v35 = v66;
  *(void *)&__int128 v74 = v66;
  *((void *)&v74 + 1) = v65;
  int v51 = v22;
  LOBYTE(v75) = v22;
  uint64_t v37 = v64;
  *((void *)&v75 + 1) = v64;
  *(void *)&__int128 v76 = v27;
  unint64_t v50 = v27;
  *((void *)&v76 + 1) = v53;
  LOBYTE(v77) = v52;
  *((void *)&v77 + 1) = v29;
  char v78 = v32;
  sub_10002EE6C(&v69);
  sub_1000045C8(v37, v27);
  sub_1000045C8(v35, v36);
  uint64_t v38 = v34;
  unint64_t v39 = v33;
  sub_1000045C8(v34, v33);
  uint64_t v40 = v63;
  swift_bridgeObjectRelease(v63);
  uint64_t v41 = v62;
  swift_bridgeObjectRelease(v62);
  unint64_t v43 = *((void *)&v59 + 1);
  unint64_t v42 = v60;
  sub_1000045C8(*((uint64_t *)&v59 + 1), v60);
  sub_100002FD4(v109);
  uint64_t v79 = v59;
  unint64_t v80 = v43;
  unint64_t v81 = v42;
  uint64_t v82 = v58;
  uint64_t v83 = v40;
  uint64_t v84 = v54;
  uint64_t v85 = v41;
  uint64_t v86 = v38;
  unint64_t v87 = v39;
  char v88 = v57;
  char v89 = v55;
  char v90 = v56;
  int v91 = *(_DWORD *)&v108[7];
  char v92 = v108[11];
  uint64_t v93 = v66;
  unint64_t v94 = v65;
  char v95 = v51;
  *(_DWORD *)&v96[3] = *(_DWORD *)&v108[3];
  *(_DWORD *)int v96 = *(_DWORD *)v108;
  uint64_t v97 = v64;
  unint64_t v98 = v50;
  uint64_t v99 = v53;
  char v100 = v107;
  *(_DWORD *)&v101[3] = *(_DWORD *)&v106[3];
  *(_DWORD *)char v101 = *(_DWORD *)v106;
  uint64_t v102 = v29;
  char v103 = v105;
  double result = sub_10002EF00(&v79);
  __int128 v45 = v76;
  uint64_t v46 = v61;
  *(_OWORD *)(v61 + 96) = v75;
  *(_OWORD *)(v46 + 112) = v45;
  *(_OWORD *)(v46 + 128) = v77;
  *(_BYTE *)(v46 + 144) = v78;
  __int128 v47 = v72;
  *(_OWORD *)(v46 + 32) = v71;
  *(_OWORD *)(v46 + 48) = v47;
  __int128 v48 = v74;
  *(_OWORD *)(v46 + 64) = v73;
  *(_OWORD *)(v46 + 80) = v48;
  __int128 v49 = v70;
  *(_OWORD *)uint64_t v46 = v69;
  *(_OWORD *)(v46 + 16) = v49;
  return result;
}

uint64_t destroy for IDSSessionAcceptSchema(uint64_t *a1)
{
  unint64_t v2 = a1[2];
  if (v2 >> 60 != 15) {
    sub_100004080(a1[1], v2);
  }
  swift_bridgeObjectRelease(a1[4]);
  uint64_t result = swift_bridgeObjectRelease(a1[6]);
  unint64_t v4 = a1[8];
  if (v4 >> 60 != 15) {
    uint64_t result = sub_100004080(a1[7], v4);
  }
  unint64_t v5 = a1[11];
  if (v5 >> 60 != 15) {
    uint64_t result = sub_100004080(a1[10], v5);
  }
  unint64_t v6 = a1[14];
  if (v6 >> 60 != 15) {
    return sub_100004080(a1[13], v6);
  }
  return result;
}

uint64_t initializeWithCopy for IDSSessionAcceptSchema(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  unint64_t v4 = (uint64_t *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  if (v5 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)v4;
  }

  else
  {
    uint64_t v6 = *v4;
    sub_100003FF0(*v4, *(void *)(a2 + 16));
    *(void *)(a1 + 8) = v6;
    *(void *)(a1 + 16) = v5;
  }

  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v7;
  uint64_t v8 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v8;
  uint64_t v9 = (uint64_t *)(a2 + 56);
  unint64_t v10 = *(void *)(a2 + 64);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 56) = *(_OWORD *)v9;
  }

  else
  {
    uint64_t v11 = *v9;
    sub_100003FF0(*v9, v10);
    *(void *)(a1 + 56) = v11;
    *(void *)(a1 + 64) = v10;
  }

  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_WORD *)(a1 + 73) = *(_WORD *)(a2 + 73);
  uint64_t v12 = (uint64_t *)(a2 + 80);
  unint64_t v13 = *(void *)(a2 + 88);
  if (v13 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 80) = *(_OWORD *)v12;
  }

  else
  {
    uint64_t v14 = *v12;
    sub_100003FF0(*v12, *(void *)(a2 + 88));
    *(void *)(a1 + 80) = v14;
    *(void *)(a1 + 88) = v13;
  }

  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  uint64_t v15 = (uint64_t *)(a2 + 104);
  unint64_t v16 = *(void *)(a2 + 112);
  if (v16 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 104) = *(_OWORD *)v15;
  }

  else
  {
    uint64_t v17 = *v15;
    sub_100003FF0(*v15, *(void *)(a2 + 112));
    *(void *)(a1 + 104) = v17;
    *(void *)(a1 + 112) = v16;
  }

  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  return a1;
}

uint64_t assignWithCopy for IDSSessionAcceptSchema(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  unint64_t v4 = (_OWORD *)(a1 + 8);
  unint64_t v5 = (uint64_t *)(a2 + 8);
  unint64_t v6 = *(void *)(a2 + 16);
  if (*(void *)(a1 + 16) >> 60 == 15LL)
  {
    if (v6 >> 60 != 15)
    {
      uint64_t v7 = *v5;
      sub_100003FF0(*v5, *(void *)(a2 + 16));
      *(void *)(a1 + 8) = v7;
      *(void *)(a1 + 16) = v6;
      goto LABEL_8;
    }

    goto LABEL_6;
  }

  if (v6 >> 60 == 15)
  {
    sub_100004238(a1 + 8);
LABEL_6:
    *unint64_t v4 = *(_OWORD *)v5;
    goto LABEL_8;
  }

  uint64_t v8 = *v5;
  sub_100003FF0(*v5, *(void *)(a2 + 16));
  uint64_t v9 = *(void *)(a1 + 8);
  unint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v6;
  sub_100004080(v9, v10);
LABEL_8:
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v11 = *(void *)(a2 + 32);
  uint64_t v12 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v13 = *(void *)(a2 + 48);
  uint64_t v14 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  uint64_t v15 = (uint64_t *)(a2 + 56);
  unint64_t v16 = *(void *)(a2 + 64);
  if (*(void *)(a1 + 64) >> 60 == 15LL)
  {
    if (v16 >> 60 != 15)
    {
      uint64_t v17 = *v15;
      sub_100003FF0(*v15, *(void *)(a2 + 64));
      *(void *)(a1 + 56) = v17;
      *(void *)(a1 + 64) = v16;
      goto LABEL_15;
    }

    goto LABEL_13;
  }

  if (v16 >> 60 == 15)
  {
    sub_100004238(a1 + 56);
LABEL_13:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)v15;
    goto LABEL_15;
  }

  uint64_t v18 = *v15;
  sub_100003FF0(*v15, *(void *)(a2 + 64));
  uint64_t v19 = *(void *)(a1 + 56);
  unint64_t v20 = *(void *)(a1 + 64);
  *(void *)(a1 + 56) = v18;
  *(void *)(a1 + 64) = v16;
  sub_100004080(v19, v20);
LABEL_15:
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  uint64_t v21 = (uint64_t *)(a2 + 80);
  unint64_t v22 = *(void *)(a2 + 88);
  if (*(void *)(a1 + 88) >> 60 == 15LL)
  {
    if (v22 >> 60 != 15)
    {
      uint64_t v23 = *v21;
      sub_100003FF0(*v21, *(void *)(a2 + 88));
      *(void *)(a1 + 80) = v23;
      *(void *)(a1 + 88) = v22;
      goto LABEL_22;
    }

    goto LABEL_20;
  }

  if (v22 >> 60 == 15)
  {
    sub_100004238(a1 + 80);
LABEL_20:
    *(_OWORD *)(a1 + 80) = *(_OWORD *)v21;
    goto LABEL_22;
  }

  uint64_t v24 = *v21;
  sub_100003FF0(*v21, *(void *)(a2 + 88));
  uint64_t v25 = *(void *)(a1 + 80);
  unint64_t v26 = *(void *)(a1 + 88);
  *(void *)(a1 + 80) = v24;
  *(void *)(a1 + 88) = v22;
  sub_100004080(v25, v26);
LABEL_22:
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  unint64_t v27 = (uint64_t *)(a2 + 104);
  unint64_t v28 = *(void *)(a2 + 112);
  if (*(void *)(a1 + 112) >> 60 != 15LL)
  {
    if (v28 >> 60 != 15)
    {
      uint64_t v30 = *v27;
      sub_100003FF0(*v27, *(void *)(a2 + 112));
      uint64_t v31 = *(void *)(a1 + 104);
      unint64_t v32 = *(void *)(a1 + 112);
      *(void *)(a1 + 104) = v30;
      *(void *)(a1 + 112) = v28;
      sub_100004080(v31, v32);
      goto LABEL_29;
    }

    sub_100004238(a1 + 104);
    goto LABEL_27;
  }

  if (v28 >> 60 == 15)
  {
LABEL_27:
    *(_OWORD *)(a1 + 104) = *(_OWORD *)v27;
    goto LABEL_29;
  }

  uint64_t v29 = *v27;
  sub_100003FF0(*v27, *(void *)(a2 + 112));
  *(void *)(a1 + 104) = v29;
  *(void *)(a1 + 112) = v28;
LABEL_29:
  uint64_t v33 = *(void *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(void *)(a1 + 120) = v33;
  uint64_t v34 = *(void *)(a2 + 136);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(void *)(a1 + 136) = v34;
  return a1;
}

__n128 initializeWithTake for IDSSessionAcceptSchema(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  __int128 v7 = *(_OWORD *)(a2 + 112);
  __int128 v8 = *(_OWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for IDSSessionAcceptSchema(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  __int128 v4 = (_OWORD *)(a1 + 8);
  __int128 v5 = (_OWORD *)(a2 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  if (v6 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v7 = *(void *)(a2 + 16);
  if (v7 >> 60 == 15)
  {
    sub_100004238(a1 + 8);
LABEL_4:
    *__int128 v4 = *v5;
    goto LABEL_6;
  }

  uint64_t v8 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)v5;
  *(void *)(a1 + 16) = v7;
  sub_100004080(v8, v6);
LABEL_6:
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v9;
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = *(void *)(a2 + 48);
  uint64_t v12 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v11;
  swift_bridgeObjectRelease(v12);
  uint64_t v13 = (_OWORD *)(a2 + 56);
  unint64_t v14 = *(void *)(a1 + 64);
  if (v14 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)(a1 + 56) = *v13;
    goto LABEL_11;
  }

  unint64_t v15 = *(void *)(a2 + 64);
  if (v15 >> 60 == 15)
  {
    sub_100004238(a1 + 56);
    goto LABEL_9;
  }

  uint64_t v16 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = *(void *)v13;
  *(void *)(a1 + 64) = v15;
  sub_100004080(v16, v14);
LABEL_11:
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_WORD *)(a1 + 73) = *(_WORD *)(a2 + 73);
  uint64_t v17 = (_OWORD *)(a2 + 80);
  unint64_t v18 = *(void *)(a1 + 88);
  if (v18 >> 60 == 15)
  {
LABEL_14:
    *(_OWORD *)(a1 + 80) = *v17;
    goto LABEL_16;
  }

  unint64_t v19 = *(void *)(a2 + 88);
  if (v19 >> 60 == 15)
  {
    sub_100004238(a1 + 80);
    goto LABEL_14;
  }

  uint64_t v20 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = *(void *)v17;
  *(void *)(a1 + 88) = v19;
  sub_100004080(v20, v18);
LABEL_16:
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  uint64_t v21 = (void *)(a2 + 104);
  unint64_t v22 = *(void *)(a1 + 112);
  if (v22 >> 60 != 15)
  {
    unint64_t v23 = *(void *)(a2 + 112);
    if (v23 >> 60 != 15)
    {
      uint64_t v24 = *(void *)(a1 + 104);
      *(void *)(a1 + 104) = *v21;
      *(void *)(a1 + 112) = v23;
      sub_100004080(v24, v22);
      goto LABEL_21;
    }

    sub_100004238(a1 + 104);
  }

  *(_OWORD *)(a1 + 104) = *(_OWORD *)v21;
LABEL_21:
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  return a1;
}

uint64_t getEnumTagSinglePayload for IDSSessionAcceptSchema(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 145)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IDSSessionAcceptSchema(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 136) = 0LL;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 144) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 145) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 145) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for IDSSessionAcceptSchema()
{
  return &type metadata for IDSSessionAcceptSchema;
}

uint64_t storeEnumTagSinglePayload for IDSSessionAcceptSchema.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 12 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 12) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF4) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF3) {
    return ((uint64_t (*)(void))((char *)&loc_10002ED14 + 4 * byte_10006F8DF[v4]))();
  }
  *a1 = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_10002ED48 + 4 * byte_10006F8DA[v4]))();
}

uint64_t sub_10002ED48(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002ED50(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10002ED58LL);
  }
  return result;
}

uint64_t sub_10002ED64(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10002ED6CLL);
  }
  *(_BYTE *)__n128 result = a2 + 12;
  return result;
}

uint64_t sub_10002ED70(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002ED78(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IDSSessionAcceptSchema.CodingKeys()
{
  return &type metadata for IDSSessionAcceptSchema.CodingKeys;
}

unint64_t sub_10002ED98()
{
  unint64_t result = qword_100084558;
  if (!qword_100084558)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006FA2C, &type metadata for IDSSessionAcceptSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084558);
  }

  return result;
}

unint64_t sub_10002EDE0()
{
  unint64_t result = qword_100084560;
  if (!qword_100084560)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006F964, &type metadata for IDSSessionAcceptSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084560);
  }

  return result;
}

unint64_t sub_10002EE28()
{
  unint64_t result = qword_100084568;
  if (!qword_100084568)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006F98C, &type metadata for IDSSessionAcceptSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084568);
  }

  return result;
}

void *sub_10002EE6C(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = a1[6];
  uint64_t v4 = a1[7];
  unint64_t v5 = a1[8];
  uint64_t v6 = a1[10];
  unint64_t v7 = a1[11];
  uint64_t v8 = a1[13];
  unint64_t v9 = a1[14];
  sub_1000045B4(a1[1], a1[2]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  sub_1000045B4(v4, v5);
  sub_1000045B4(v6, v7);
  sub_1000045B4(v8, v9);
  return a1;
}

void *sub_10002EF00(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = a1[6];
  uint64_t v4 = a1[7];
  unint64_t v5 = a1[8];
  uint64_t v6 = a1[10];
  unint64_t v7 = a1[11];
  uint64_t v8 = a1[13];
  unint64_t v9 = a1[14];
  sub_1000045C8(a1[1], a1[2]);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  sub_1000045C8(v4, v5);
  sub_1000045C8(v6, v7);
  sub_1000045C8(v8, v9);
  return a1;
}

uint64_t sub_10002EF94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v61 = a3;
  uint64_t v6 = type metadata accessor for IDSSessionInvitation.TransportType(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = &v41[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v10 = (int *)type metadata accessor for IDSSessionInvitationSchema(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = &v41[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v13 = type metadata accessor for PropertyListDecoder(0LL);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  uint64_t v14 = PropertyListDecoder.init()();
  unint64_t v15 = sub_10002F240();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v12, v10, a1, a2, v10, v15);
  if (!v3)
  {
    (*(void (**)(_BYTE *, void *, uint64_t))(v7 + 16))(v9, v12, v6);
    uint64_t v16 = *(void *)((char *)v12 + v10[5]);
    uint64_t v17 = (char *)v12 + v10[6];
    uint64_t v59 = *(void *)v17;
    uint64_t v60 = v16;
    unsigned int v58 = v17[8];
    uint64_t v18 = v10[7];
    uint64_t v19 = v10[8];
    uint64_t v20 = v10[9];
    uint64_t v21 = v10[10];
    uint64_t v22 = v10[12];
    unint64_t v23 = (void *)((char *)v12 + v10[11]);
    uint64_t v24 = *v23;
    unint64_t v46 = v23[1];
    uint64_t v47 = v24;
    int v25 = *((unsigned __int8 *)v12 + v22);
    uint64_t v26 = v10[14];
    unint64_t v27 = (void *)((char *)v12 + v10[13]);
    unint64_t v28 = v27[1];
    uint64_t v43 = *v27;
    int v56 = *((unsigned __int8 *)v12 + v26);
    int v57 = v25;
    uint64_t v29 = v10[16];
    uint64_t v30 = (void *)((char *)v12 + v10[15]);
    int v55 = v9;
    uint64_t v31 = *v30;
    unint64_t v32 = v30[1];
    int v52 = *((unsigned __int8 *)v12 + v29);
    uint64_t v33 = v10[18];
    uint64_t v34 = (void *)((char *)v12 + v10[17]);
    uint64_t v35 = v34[1];
    uint64_t v49 = *v34;
    int v48 = *((unsigned __int8 *)v12 + v33);
    unint64_t v36 = (void *)((char *)v12 + v10[19]);
    int v44 = *((unsigned __int8 *)v12 + v10[20]);
    uint64_t v37 = v36[1];
    uint64_t v45 = *v36;
    int v42 = *((unsigned __int8 *)v12 + v10[21]);
    LODWORD(v21) = *((unsigned __int8 *)v12 + v21);
    unsigned int v53 = *((unsigned __int8 *)v12 + v20);
    unsigned int v54 = v21;
    LODWORD(v19) = *((unsigned __int8 *)v12 + v19);
    unsigned int v50 = *((unsigned __int8 *)v12 + v18);
    unsigned int v51 = v19;
    sub_1000045B4(v24, v46);
    uint64_t v38 = v43;
    sub_1000045B4(v43, v28);
    sub_1000045B4(v31, v32);
    swift_bridgeObjectRetain(v35);
    swift_bridgeObjectRetain(v37);
    HIBYTE(v40) = v42;
    LOBYTE(v40) = v44;
    IDSSessionInvitation.init(with:version:connectionCountHint:disableEncryption:singleChannelDirectMode:useStunMessageIntegrity:useSecureQRControlMessage:blob:messageIsRealTime:unauthenticatedPublicKey:assumeRemoteDeviceEncryption:sessionMessageContext:usePhoneContinuityLocalMessage:participantID:declineOnNetworkError:sessionID:needsToWaitForPreConnectionData:useCloudPairedControlChannel:)( v55,  v60,  v59,  v58,  v50,  v51,  v53,  v54,  v47,  v46,  (_BYTE)v57,  v38,  v28,  (_BYTE)v56,  v31,  v32,  (_BYTE)v52,  v49,  v35,  (_BYTE)v48,  v45,  v37,  v40);
    sub_10002F288((uint64_t)v12);
  }

  return swift_release(v14);
}

unint64_t sub_10002F240()
{
  unint64_t result = qword_100084578;
  if (!qword_100084578)
  {
    uint64_t v1 = type metadata accessor for IDSSessionInvitationSchema(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for IDSSessionInvitationSchema, v1);
    atomic_store(result, (unint64_t *)&qword_100084578);
  }

  return result;
}

uint64_t sub_10002F288(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for IDSSessionInvitationSchema(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

BOOL IDSInvitationContextType.init(rawValue:)(uint64_t a1)
{
  return a1 != 1;
}

uint64_t IDSInvitationContextType.rawValue.getter()
{
  return 1LL;
}

Swift::Int sub_10002F2D8()
{
  return Hasher._finalize()();
}

void sub_10002F318()
{
}

Swift::Int sub_10002F33C(uint64_t a1)
{
  return Hasher._finalize()();
}

void *sub_10002F378@<X0>(void *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result != 1LL;
  return result;
}

void sub_10002F38C(void *a1@<X8>)
{
  *a1 = 1LL;
}

uint64_t sub_10002F398(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10003B824();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10002F3F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10003B824();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10002F440(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10002F478 + 4 * byte_10006FAB0[a1]))( 0xD000000000000013LL,  0x800000010006D8C0LL);
}

uint64_t sub_10002F478(uint64_t a1)
{
  return a1 + 1;
}

BOOL sub_10002F4BC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_10002F4D0()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10002F514()
{
}

Swift::Int sub_10002F53C(uint64_t a1)
{
  Swift::UInt v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_10002F57C()
{
  return sub_10002F440(*v0);
}

uint64_t sub_10002F584@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10003B524(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10002F5A8(uint64_t a1)
{
  unint64_t v2 = sub_10002FE58();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10002F5D0(uint64_t a1)
{
  unint64_t v2 = sub_10002FE58();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10002F600()
{
  return 12383LL;
}

void sub_10002F610(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_10002F61C(uint64_t a1)
{
  unint64_t v2 = sub_10002FE9C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10002F644(uint64_t a1)
{
  unint64_t v2 = sub_10002FE9C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10002F66C(uint64_t a1)
{
  unint64_t v2 = sub_10002FF24();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10002F694(uint64_t a1)
{
  unint64_t v2 = sub_10002FF24();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10002F6BC(uint64_t a1)
{
  unint64_t v2 = sub_100030034();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10002F6E4(uint64_t a1)
{
  unint64_t v2 = sub_100030034();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10002F70C(uint64_t a1)
{
  unint64_t v2 = sub_10002FFAC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10002F734(uint64_t a1)
{
  unint64_t v2 = sub_10002FFAC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10002F75C(uint64_t a1)
{
  unint64_t v2 = sub_1000300B4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10002F784(uint64_t a1)
{
  unint64_t v2 = sub_1000300B4();
  return CodingKey.debugDescription.getter(a1, v2);
}

void IDSDictionaryContextClientSchema.encode(to:)(void *a1)
{
  uint64_t v2 = sub_10000264C(&qword_100084580);
  uint64_t v37 = *(void *)(v2 - 8);
  uint64_t v38 = v2;
  __chkstk_darwin(v2);
  unint64_t v36 = (char *)v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_10000264C(&qword_100084588);
  uint64_t v34 = *(void *)(v4 - 8);
  uint64_t v35 = v4;
  __chkstk_darwin(v4);
  uint64_t v33 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_10000264C(&qword_100084590);
  uint64_t v31 = *(void *)(v6 - 8);
  uint64_t v32 = v6;
  __chkstk_darwin(v6);
  uint64_t v30 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = type metadata accessor for IDSKCSharingInvitationSchema(0LL);
  __chkstk_darwin(v28);
  uint64_t v29 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_10000264C(&qword_100084598);
  uint64_t v26 = *(void *)(v9 - 8);
  uint64_t v27 = v9;
  __chkstk_darwin(v9);
  int v25 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = type metadata accessor for IDSHomeKitInvitationSchema(0LL);
  __chkstk_darwin(v23);
  uint64_t v24 = (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = sub_10000264C(&qword_1000845A0);
  v21[1] = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v12 = type metadata accessor for IDSSampleInvitationSchema(0LL);
  __chkstk_darwin(v12);
  uint64_t v13 = type metadata accessor for IDSDictionaryContextClientSchema(0LL);
  __chkstk_darwin(v13);
  unint64_t v15 = (char *)v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_10000264C(&qword_1000845A8);
  uint64_t v39 = *(void *)(v16 - 8);
  uint64_t v40 = v16;
  __chkstk_darwin(v16);
  uint64_t v17 = a1[3];
  uint64_t v18 = a1[4];
  sub_100002C78(a1, v17);
  unint64_t v19 = sub_10002FE58();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for IDSDictionaryContextClientSchema.CodingKeys,  &type metadata for IDSDictionaryContextClientSchema.CodingKeys,  v19,  v17,  v18);
  sub_100030F74(v41, (uint64_t)v15, type metadata accessor for IDSDictionaryContextClientSchema);
  uint64_t v20 = (char *)sub_10002FABC + 4 * byte_10006FAB5[swift_getEnumCaseMultiPayload(v15, v13)];
  __asm { BR              X10 }

uint64_t sub_10002FABC()
{
  *(_BYTE *)(v5 - 112) = 0;
  unint64_t v6 = sub_1000300B4();
  uint64_t v7 = *(void *)(v5 - 128);
  ((void (*)(ValueMetadata *, uint64_t, uint64_t, ValueMetadata *, unint64_t))KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:))( &type metadata for IDSDictionaryContextClientSchema.IdsSampleInvitationCodingKeys,  v5 - 112,  v7,  &type metadata for IDSDictionaryContextClientSchema.IdsSampleInvitationCodingKeys,  v6);
  uint64_t v8 = sub_100004DB8( &qword_100084460,  type metadata accessor for IDSSampleInvitationSchema,  (uint64_t)&protocol conformance descriptor for IDSSampleInvitationSchema);
  uint64_t v9 = *(void *)(v5 - 272);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, v10, v9, v2, v8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 280) + 8LL))(v0, v9);
  sub_100030078(v3, type metadata accessor for IDSSampleInvitationSchema);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 136) + 8LL))(v1, v7);
}

uint64_t type metadata accessor for IDSDictionaryContextClientSchema(uint64_t a1)
{
  return sub_100032508(a1, qword_100084770, (uint64_t)&nominal type descriptor for IDSDictionaryContextClientSchema);
}

unint64_t sub_10002FE58()
{
  unint64_t result = qword_1000845B0;
  if (!qword_1000845B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000709F8, &type metadata for IDSDictionaryContextClientSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000845B0);
  }

  return result;
}

unint64_t sub_10002FE9C()
{
  unint64_t result = qword_1000845B8;
  if (!qword_1000845B8)
  {
    unint64_t result = swift_getWitnessTable( &unk_1000709A8,  &type metadata for IDSDictionaryContextClientSchema.IdsActivitySharingInvitationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000845B8);
  }

  return result;
}

unint64_t sub_10002FEE0()
{
  unint64_t result = qword_1000845C0;
  if (!qword_1000845C0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IDSActivitySharingInvitationSchema,  &type metadata for IDSActivitySharingInvitationSchema);
    atomic_store(result, (unint64_t *)&qword_1000845C0);
  }

  return result;
}

unint64_t sub_10002FF24()
{
  unint64_t result = qword_1000845C8;
  if (!qword_1000845C8)
  {
    unint64_t result = swift_getWitnessTable( &unk_100070958,  &type metadata for IDSDictionaryContextClientSchema.IdsHealthInvitationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000845C8);
  }

  return result;
}

unint64_t sub_10002FF68()
{
  unint64_t result = qword_1000845D0;
  if (!qword_1000845D0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IDSHealthInvitationSchema,  &type metadata for IDSHealthInvitationSchema);
    atomic_store(result, (unint64_t *)&qword_1000845D0);
  }

  return result;
}

unint64_t sub_10002FFAC()
{
  unint64_t result = qword_1000845D8;
  if (!qword_1000845D8)
  {
    unint64_t result = swift_getWitnessTable( &unk_100070908,  &type metadata for IDSDictionaryContextClientSchema.IdsKCSharingInvitationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000845D8);
  }

  return result;
}

uint64_t sub_10002FFF0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

unint64_t sub_100030034()
{
  unint64_t result = qword_1000845E8;
  if (!qword_1000845E8)
  {
    unint64_t result = swift_getWitnessTable( &unk_1000708B8,  &type metadata for IDSDictionaryContextClientSchema.IdsHomekitInvitationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000845E8);
  }

  return result;
}

uint64_t sub_100030078(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

unint64_t sub_1000300B4()
{
  unint64_t result = qword_1000845F8;
  if (!qword_1000845F8)
  {
    unint64_t result = swift_getWitnessTable( &unk_100070868,  &type metadata for IDSDictionaryContextClientSchema.IdsSampleInvitationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000845F8);
  }

  return result;
}

uint64_t IDSDictionaryContextClientSchema.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v50 = a2;
  uint64_t v46 = sub_10000264C(&qword_100084600);
  uint64_t v49 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  int v56 = (char *)v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v45 = sub_10000264C(&qword_100084608);
  uint64_t v48 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  unsigned int v54 = (char *)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v44 = sub_10000264C(&qword_100084610);
  uint64_t v47 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  unsigned int v53 = (char *)v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_10000264C(&qword_100084618);
  uint64_t v42 = *(void *)(v6 - 8);
  uint64_t v43 = v6;
  __chkstk_darwin(v6);
  int v52 = (char *)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v41 = sub_10000264C(&qword_100084620);
  v40[4] = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  unsigned int v51 = (char *)v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v58 = sub_10000264C(&qword_100084628);
  uint64_t v55 = *(void *)(v58 - 8);
  __chkstk_darwin(v58);
  uint64_t v10 = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v57 = type metadata accessor for IDSDictionaryContextClientSchema(0LL);
  uint64_t v11 = __chkstk_darwin(v57);
  v40[3] = (char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  unint64_t v15 = (char *)v40 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)v40 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v22 = (char *)v40 - v21;
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)v40 - v23;
  uint64_t v25 = a1[3];
  uint64_t v26 = a1[4];
  uint64_t v59 = a1;
  sub_100002C78(a1, v25);
  unint64_t v27 = sub_10002FE58();
  uint64_t v28 = v60;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for IDSDictionaryContextClientSchema.CodingKeys,  &type metadata for IDSDictionaryContextClientSchema.CodingKeys,  v27,  v25,  v26);
  if (!v28)
  {
    v40[1] = v22;
    v40[0] = v15;
    v40[2] = v18;
    uint64_t v60 = v24;
    uint64_t v29 = v58;
    uint64_t v30 = KeyedDecodingContainer.allKeys.getter(v58);
    uint64_t v31 = v30;
    if (*(void *)(v30 + 16) == 1LL) {
      __asm { BR              X10 }
    }

    uint64_t v32 = v29;
    uint64_t v33 = type metadata accessor for DecodingError(0LL);
    swift_allocError(v33, &protocol witness table for DecodingError, 0LL, 0LL);
    uint64_t v34 = v31;
    unint64_t v36 = v35;
    sub_10000264C(&qword_100084630);
    uint64_t *v36 = v57;
    uint64_t v37 = KeyedDecodingContainer.codingPath.getter(v32);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)( v37,  0xD00000000000002BLL,  0x800000010006D7D0LL,  0LL);
    uint64_t v38 = (*(uint64_t (**)(uint64_t *, void, uint64_t))(*(void *)(v33 - 8) + 104LL))( v36,  enum case for DecodingError.typeMismatch(_:),  v33);
    swift_willThrow(v38);
    swift_bridgeObjectRelease(v34);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v10, v32);
  }

  return sub_100002FD4(v59);
}

unint64_t sub_100030A48()
{
  unint64_t result = qword_100084638;
  if (!qword_100084638)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IDSActivitySharingInvitationSchema,  &type metadata for IDSActivitySharingInvitationSchema);
    atomic_store(result, (unint64_t *)&qword_100084638);
  }

  return result;
}

unint64_t sub_100030A8C()
{
  unint64_t result = qword_100084640;
  if (!qword_100084640)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IDSHealthInvitationSchema,  &type metadata for IDSHealthInvitationSchema);
    atomic_store(result, (unint64_t *)&qword_100084640);
  }

  return result;
}

uint64_t sub_100030AD0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return IDSDictionaryContextClientSchema.init(from:)(a1, a2);
}

void sub_100030AE4(void *a1)
{
}

unint64_t sub_100030AF8()
{
  return 0xD000000000000011LL;
}

uint64_t sub_100030B14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10003B710(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_100030B3C(uint64_t a1)
{
  unint64_t v2 = sub_100030F30();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100030B64(uint64_t a1)
{
  unint64_t v2 = sub_100030F30();
  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int sub_100030B8C()
{
  return Hasher._finalize()();
}

void sub_100030BCC()
{
}

Swift::Int sub_100030BF0(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_100030C2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 12383 && a2 == 0xE200000000000000LL)
  {
    uint64_t result = swift_bridgeObjectRelease(0xE200000000000000LL);
    char v8 = 0;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(12383LL, 0xE200000000000000LL, a1, a2, 0LL);
    uint64_t result = swift_bridgeObjectRelease(a2);
    char v8 = v6 ^ 1;
  }

  *a3 = v8 & 1;
  return result;
}

uint64_t sub_100030CA8(uint64_t a1)
{
  unint64_t v2 = sub_100030FB8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100030CD0(uint64_t a1)
{
  unint64_t v2 = sub_100030FB8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IDSDictionaryContextData.encode(to:)(void *a1)
{
  uint64_t v2 = sub_10000264C(&qword_100084658);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v24 = v2;
  uint64_t v25 = v3;
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = type metadata accessor for IDSDictionaryContextClientSchema(0LL);
  __chkstk_darwin(v23);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for IDSDictionaryContextData(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_10000264C(&qword_100084660);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = a1[3];
  uint64_t v15 = a1[4];
  sub_100002C78(a1, v16);
  unint64_t v17 = sub_100030F30();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for IDSDictionaryContextData.CodingKeys,  &type metadata for IDSDictionaryContextData.CodingKeys,  v17,  v16,  v15);
  sub_100030F74(v22, (uint64_t)v10, type metadata accessor for IDSDictionaryContextData);
  sub_10002FFF0((uint64_t)v10, (uint64_t)v7, type metadata accessor for IDSDictionaryContextClientSchema);
  sub_100030FB8();
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  uint64_t v18 = sub_100004DB8( &qword_100084678,  type metadata accessor for IDSDictionaryContextClientSchema,  (uint64_t)&protocol conformance descriptor for IDSDictionaryContextClientSchema);
  uint64_t v19 = v24;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v7, v20, v24, v23, v18);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v5, v19);
  sub_100030078((uint64_t)v7, type metadata accessor for IDSDictionaryContextClientSchema);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t type metadata accessor for IDSDictionaryContextData(uint64_t a1)
{
  return sub_100032508(a1, (uint64_t *)&unk_100084818, (uint64_t)&nominal type descriptor for IDSDictionaryContextData);
}

unint64_t sub_100030F30()
{
  unint64_t result = qword_100084668;
  if (!qword_100084668)
  {
    unint64_t result = swift_getWitnessTable(&unk_100070818, &type metadata for IDSDictionaryContextData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084668);
  }

  return result;
}

uint64_t sub_100030F74(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

unint64_t sub_100030FB8()
{
  unint64_t result = qword_100084670;
  if (!qword_100084670)
  {
    unint64_t result = swift_getWitnessTable( &unk_1000707C8,  &type metadata for IDSDictionaryContextData.DictionaryContextCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084670);
  }

  return result;
}

uint64_t IDSDictionaryContextData.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v32 = a2;
  uint64_t v33 = type metadata accessor for IDSDictionaryContextData(0LL);
  __chkstk_darwin(v33);
  uint64_t v34 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_10000264C(&qword_100084680);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v35 = sub_10000264C(&qword_100084688);
  uint64_t v8 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_100002C78(a1, v11);
  unint64_t v13 = sub_100030F30();
  uint64_t v37 = v10;
  uint64_t v14 = v36;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for IDSDictionaryContextData.CodingKeys,  &type metadata for IDSDictionaryContextData.CodingKeys,  v13,  v11,  v12);
  if (!v14)
  {
    uint64_t v15 = v7;
    uint64_t v31 = v5;
    uint64_t v16 = v4;
    uint64_t v36 = v8;
    uint64_t v18 = (uint64_t)v34;
    uint64_t v17 = v35;
    uint64_t v19 = KeyedDecodingContainer.allKeys.getter(v35);
    if (*(void *)(v19 + 16) == 1LL)
    {
      sub_100030FB8();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v20 = v36;
      uint64_t v21 = type metadata accessor for IDSDictionaryContextClientSchema(0LL);
      uint64_t v22 = sub_100004DB8( &qword_100084690,  type metadata accessor for IDSDictionaryContextClientSchema,  (uint64_t)&protocol conformance descriptor for IDSDictionaryContextClientSchema);
      KeyedDecodingContainer.decode<A>(_:forKey:)(v21, v23, v16, v21, v22);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v15, v16);
      swift_bridgeObjectRelease(v19);
      (*(void (**)(char *, uint64_t))(v20 + 8))(v37, v17);
      sub_10002FFF0(v18, v32, type metadata accessor for IDSDictionaryContextData);
    }

    else
    {
      uint64_t v24 = type metadata accessor for DecodingError(0LL);
      swift_allocError(v24, &protocol witness table for DecodingError, 0LL, 0LL);
      uint64_t v26 = v25;
      sub_10000264C(&qword_100084630);
      uint64_t *v26 = v33;
      uint64_t v27 = KeyedDecodingContainer.codingPath.getter(v17);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)( v27,  0xD00000000000002BLL,  0x800000010006D7D0LL,  0LL);
      uint64_t v28 = (*(uint64_t (**)(uint64_t *, void, uint64_t))(*(void *)(v24 - 8) + 104LL))( v26,  enum case for DecodingError.typeMismatch(_:),  v24);
      swift_willThrow(v28);
      uint64_t v29 = v36;
      swift_bridgeObjectRelease(v19);
      (*(void (**)(char *, uint64_t))(v29 + 8))(v37, v17);
    }
  }

  return sub_100002FD4(a1);
}

uint64_t sub_100031300@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return IDSDictionaryContextData.init(from:)(a1, a2);
}

uint64_t sub_100031314(void *a1)
{
  return IDSDictionaryContextData.encode(to:)(a1);
}

uint64_t sub_100031328(char *a1, char *a2)
{
  return sub_100060754(*a1, *a2);
}

Swift::Int sub_100031334()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  String.hash(into:)(v3, qword_100070A50[v1], 0xE200000000000000LL);
  swift_bridgeObjectRelease(0xE200000000000000LL);
  return Hasher._finalize()();
}

uint64_t sub_10003138C(uint64_t a1)
{
  return swift_bridgeObjectRelease(0xE200000000000000LL);
}

Swift::Int sub_1000313B8(uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  String.hash(into:)(v4, qword_100070A50[v2], 0xE200000000000000LL);
  swift_bridgeObjectRelease(0xE200000000000000LL);
  return Hasher._finalize()();
}

unint64_t sub_10003140C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10003B794(*a1);
  *a2 = result;
  return result;
}

void sub_100031438(void *a1@<X8>)
{
  *a1 = qword_100070A50[*v1];
  a1[1] = 0xE200000000000000LL;
}

uint64_t sub_100031454()
{
  return qword_100070A50[*v0];
}

unint64_t sub_10003146C@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10003B794(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100031490(uint64_t a1)
{
  unint64_t v2 = sub_100031DCC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000314B8(uint64_t a1)
{
  unint64_t v2 = sub_100031DCC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IDSInvitationContextSchema.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v87 = a2;
  uint64_t v81 = type metadata accessor for Explosion(0LL);
  uint64_t v83 = *(void *)(v81 - 8);
  __chkstk_darwin(v81);
  uint64_t v82 = (char *)&v78 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v89 = type metadata accessor for IDSKCSharingInvitationSchema(0LL);
  __chkstk_darwin(v89);
  uint64_t v84 = (char *)&v78 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v86 = type metadata accessor for IDSHomeKitInvitationSchema(0LL);
  __chkstk_darwin(v86);
  uint64_t v85 = (char *)&v78 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v88 = type metadata accessor for IDSSampleInvitationSchema(0LL);
  __chkstk_darwin(v88);
  uint64_t v7 = (char *)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_10000264C(&qword_100084698);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v78 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for IDSInvitationContextSchema(0LL);
  __chkstk_darwin(v12);
  uint64_t v14 = (uint64_t *)((char *)&v78 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v15 = a1[3];
  uint64_t v16 = a1[4];
  char v90 = a1;
  sub_100002C78(a1, v15);
  unint64_t v17 = sub_100031DCC();
  uint64_t v18 = v91;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for IDSInvitationContextSchema.CodingKeys,  &type metadata for IDSInvitationContextSchema.CodingKeys,  v17,  v15,  v16);
  if (v18) {
    return sub_100002FD4(v90);
  }
  uint64_t v19 = (uint64_t)v7;
  uint64_t v20 = v89;
  LOBYTE(v92) = 0;
  uint64_t v21 = v11;
  uint64_t v22 = KeyedDecodingContainer.decode(_:forKey:)(&v92, v8);
  *uint64_t v14 = v22;
  v14[1] = (uint64_t)v24;
  int v91 = v14;
  LOBYTE(v92) = 1;
  uint64_t v25 = v24;
  uint64_t v26 = v22;
  unint64_t v27 = sub_100031E10();
  swift_bridgeObjectRetain(v25);
  KeyedDecodingContainer.decode<A>(_:forKey:)( &type metadata for IDSInvitationContextType,  &v92,  v8,  &type metadata for IDSInvitationContextType,  v27);
  uint64_t v79 = v8;
  unint64_t v80 = v21;
  if (v26 == 0xD00000000000001FLL)
  {
    unint64_t v29 = 0x800000010006D800LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001FLL, 0x800000010006D800LL, v26, v25, 0LL) & 1) != 0)
  {
    unint64_t v29 = (unint64_t)v25;
LABEL_8:
    swift_bridgeObjectRelease(v29);
    LOBYTE(v92) = 2;
    uint64_t v30 = sub_100004DB8( &qword_100084458,  type metadata accessor for IDSSampleInvitationSchema,  (uint64_t)&protocol conformance descriptor for IDSSampleInvitationSchema);
    uint64_t v32 = v79;
    uint64_t v31 = v80;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v88, &v92, v79, v88, v30);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v31, v32);
    uint64_t v33 = v90;
    uint64_t v34 = (uint64_t)v91;
    uint64_t v35 = (uint64_t)v91 + *(int *)(v12 + 24);
    sub_10002FFF0(v19, v35, type metadata accessor for IDSSampleInvitationSchema);
    uint64_t v36 = type metadata accessor for IDSDictionaryContextClientSchema(0LL);
    uint64_t v37 = v35;
    uint64_t v38 = 0LL;
LABEL_9:
    swift_storeEnumTagMultiPayload(v37, v36, v38);
LABEL_10:
    uint64_t v39 = v87;
LABEL_11:
    sub_100030F74(v34, v39, type metadata accessor for IDSInvitationContextSchema);
    sub_100002FD4(v33);
    return sub_100030078(v34, type metadata accessor for IDSInvitationContextSchema);
  }

  if (v26 == 0x7469766E692D6B68LL && v25 == (void *)0xEC00000031762D65LL)
  {
    swift_bridgeObjectRelease(0xEC00000031762D65LL);
    uint64_t v40 = v86;
LABEL_17:
    LOBYTE(v92) = 2;
    uint64_t v42 = sub_100004DB8( &qword_100084650,  type metadata accessor for IDSHomeKitInvitationSchema,  (uint64_t)&protocol conformance descriptor for IDSHomeKitInvitationSchema);
    uint64_t v43 = (uint64_t)v85;
    uint64_t v44 = v40;
    uint64_t v45 = v79;
    uint64_t v46 = v40;
    uint64_t v47 = v80;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v44, &v92, v79, v46, v42);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v47, v45);
    uint64_t v33 = v90;
    uint64_t v34 = (uint64_t)v91;
    uint64_t v48 = (uint64_t)v91 + *(int *)(v12 + 24);
    sub_10002FFF0(v43, v48, type metadata accessor for IDSHomeKitInvitationSchema);
    uint64_t v36 = type metadata accessor for IDSDictionaryContextClientSchema(0LL);
    uint64_t v37 = v48;
    uint64_t v38 = 1LL;
    goto LABEL_9;
  }

  char v41 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7469766E692D6B68LL, 0xEC00000031762D65LL, v26, v25, 0LL);
  uint64_t v40 = v86;
  if ((v41 & 1) != 0)
  {
    swift_bridgeObjectRelease(v25);
    goto LABEL_17;
  }

  if (v26 == 0xD000000000000023LL && v25 == (void *)0x800000010006D820LL)
  {
    swift_bridgeObjectRelease(0x800000010006D820LL);
    uint64_t v49 = v20;
LABEL_23:
    uint64_t v34 = (uint64_t)v91;
    LOBYTE(v92) = 2;
    uint64_t v50 = sub_100004DB8( &qword_100084648,  type metadata accessor for IDSKCSharingInvitationSchema,  (uint64_t)&protocol conformance descriptor for IDSKCSharingInvitationSchema);
    uint64_t v51 = (uint64_t)v84;
    uint64_t v52 = v49;
    uint64_t v53 = v79;
    uint64_t v54 = v49;
    uint64_t v55 = v80;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v52, &v92, v79, v54, v50);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v55, v53);
    uint64_t v33 = v90;
    uint64_t v56 = v34 + *(int *)(v12 + 24);
    sub_10002FFF0(v51, v56, type metadata accessor for IDSKCSharingInvitationSchema);
    uint64_t v36 = type metadata accessor for IDSDictionaryContextClientSchema(0LL);
    uint64_t v37 = v56;
    uint64_t v38 = 2LL;
    goto LABEL_9;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000023LL, 0x800000010006D820LL, v26, v25, 0LL) & 1) != 0)
  {
    uint64_t v49 = v20;
    swift_bridgeObjectRelease(v25);
    goto LABEL_23;
  }

  if (v26 == 49 && v25 == (void *)0xE100000000000000LL)
  {
    swift_bridgeObjectRelease(0xE100000000000000LL);
    uint64_t v39 = v87;
LABEL_29:
    uint64_t v34 = (uint64_t)v91;
    char v94 = 2;
    unint64_t v58 = sub_100030A8C();
    uint64_t v60 = v79;
    uint64_t v59 = v80;
    KeyedDecodingContainer.decode<A>(_:forKey:)( &type metadata for IDSHealthInvitationSchema,  &v94,  v79,  &type metadata for IDSHealthInvitationSchema,  v58);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v59, v60);
    uint64_t v61 = (_OWORD *)(v34 + *(int *)(v12 + 24));
    *uint64_t v61 = v92;
    uint64_t v62 = type metadata accessor for IDSDictionaryContextClientSchema(0LL);
    swift_storeEnumTagMultiPayload(v61, v62, 3LL);
    uint64_t v33 = v90;
    goto LABEL_11;
  }

  char v57 = _stringCompareWithSmolCheck(_:_:expecting:)(49LL, 0xE100000000000000LL, v26, v25, 0LL);
  uint64_t v39 = v87;
  if ((v57 & 1) != 0)
  {
    swift_bridgeObjectRelease(v25);
    goto LABEL_29;
  }

  if (v26 == 0xD000000000000017LL)
  {
    unint64_t v63 = 0x800000010006D850LL;
    if (v25 == (void *)0x800000010006D850LL)
    {
LABEL_34:
      swift_bridgeObjectRelease(v63);
      uint64_t v34 = (uint64_t)v91;
      char v94 = 2;
      unint64_t v64 = sub_100030A48();
      uint64_t v66 = v79;
      unint64_t v65 = v80;
      KeyedDecodingContainer.decode<A>(_:forKey:)( &type metadata for IDSActivitySharingInvitationSchema,  &v94,  v79,  &type metadata for IDSActivitySharingInvitationSchema,  v64);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v65, v66);
      uint64_t v67 = v93;
      uint64_t v68 = v34 + *(int *)(v12 + 24);
      *(_OWORD *)uint64_t v68 = v92;
      *(void *)(v68 + 16) = v67;
      uint64_t v69 = type metadata accessor for IDSDictionaryContextClientSchema(0LL);
      swift_storeEnumTagMultiPayload(v68, v69, 4LL);
      uint64_t v33 = v90;
      goto LABEL_10;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017LL, 0x800000010006D850LL, v26, v25, 0LL) & 1) != 0)
  {
    unint64_t v63 = (unint64_t)v25;
    goto LABEL_34;
  }

  *(void *)&__int128 v92 = 0LL;
  *((void *)&v92 + 1) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(31LL);
  swift_bridgeObjectRelease(*((void *)&v92 + 1));
  *(void *)&__int128 v92 = 0xD00000000000001CLL;
  *((void *)&v92 + 1) = 0x800000010006D8A0LL;
  v70._countAndFlagsBits = v26;
  v70._object = v25;
  String.append(_:)(v70);
  swift_bridgeObjectRelease(v25);
  v71._countAndFlagsBits = 41LL;
  v71._object = (void *)0xE100000000000000LL;
  String.append(_:)(v71);
  __int128 v72 = v82;
  Explosion.init(domain:errorType:keyPath:)( 0xD000000000000027LL,  0x800000010006D870LL,  v92,  *((void *)&v92 + 1),  0LL,  0LL);
  uint64_t v73 = sub_100004DB8( &qword_1000841B8,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
  uint64_t v74 = v81;
  swift_allocError(v81, v73, 0LL, 0LL);
  uint64_t v75 = v83;
  uint64_t v77 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v83 + 16))(v76, v72, v74);
  swift_willThrow(v77);
  (*(void (**)(char *, uint64_t))(v75 + 8))(v72, v74);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v80, v79);
  uint64_t v28 = v91;
  sub_100002FD4(v90);
  return swift_bridgeObjectRelease(v28[1]);
}

uint64_t type metadata accessor for IDSInvitationContextSchema(uint64_t a1)
{
  return sub_100032508(a1, qword_100084880, (uint64_t)&nominal type descriptor for IDSInvitationContextSchema);
}

unint64_t sub_100031DCC()
{
  unint64_t result = qword_1000846A0;
  if (!qword_1000846A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100070778, &type metadata for IDSInvitationContextSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000846A0);
  }

  return result;
}

unint64_t sub_100031E10()
{
  unint64_t result = qword_1000846A8;
  if (!qword_1000846A8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IDSInvitationContextType,  &type metadata for IDSInvitationContextType);
    atomic_store(result, (unint64_t *)&qword_1000846A8);
  }

  return result;
}

uint64_t IDSInvitationContextSchema.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000264C(&qword_1000846B0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100002C78(a1, v9);
  unint64_t v11 = sub_100031DCC();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for IDSInvitationContextSchema.CodingKeys,  &type metadata for IDSInvitationContextSchema.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = v3[1];
  char v22 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v22, v5);
  if (!v2)
  {
    char v21 = 1;
    unint64_t v14 = sub_100031FDC();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v21, v5, &type metadata for IDSInvitationContextType, v14);
    uint64_t v15 = (char *)v3 + *(int *)(type metadata accessor for IDSInvitationContextSchema(0LL) + 24);
    char v20 = 2;
    uint64_t v16 = type metadata accessor for IDSDictionaryContextData(0LL);
    uint64_t v17 = sub_100004DB8( &qword_1000846C0,  type metadata accessor for IDSDictionaryContextData,  (uint64_t)&protocol conformance descriptor for IDSDictionaryContextData);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v15, &v20, v5, v16, v17);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_100031FDC()
{
  unint64_t result = qword_1000846B8;
  if (!qword_1000846B8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IDSInvitationContextType,  &type metadata for IDSInvitationContextType);
    atomic_store(result, (unint64_t *)&qword_1000846B8);
  }

  return result;
}

uint64_t sub_100032020@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return IDSInvitationContextSchema.init(from:)(a1, a2);
}

uint64_t sub_100032034(void *a1)
{
  return IDSInvitationContextSchema.encode(to:)(a1);
}

void sub_100032048(char *a1)
{
}

void sub_100032054()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v2, 0LL);
  __asm { BR              X9 }

Swift::Int sub_100032094()
{
  return Hasher._finalize()();
}

void sub_1000320DC()
{
  __asm { BR              X10 }

uint64_t sub_10003210C(uint64_t a1)
{
  return swift_bridgeObjectRelease(v1);
}

void sub_100032140(uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }

Swift::Int sub_10003217C()
{
  return Hasher._finalize()();
}

unint64_t sub_1000321C4@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10003B7DC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000321F0()
{
  return ((uint64_t (*)(void))((char *)sub_100032214 + 4 * byte_10006FAD0[*v0]))();
}

void sub_100032214(void *a1@<X8>)
{
  *a1 = 115LL;
  a1[1] = v1;
}

void sub_100032220(void *a1@<X8>)
{
  *a1 = 101LL;
  a1[1] = v1;
}

void sub_10003222C(void *a1@<X8>)
{
  *a1 = 4475253LL;
  a1[1] = 0xE300000000000000LL;
}

uint64_t sub_100032240()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100032264 + 4 * byte_10006FAD4[*v0]))( 99LL,  0xE100000000000000LL);
}

uint64_t sub_100032264()
{
  return 115LL;
}

uint64_t sub_10003226C()
{
  return 101LL;
}

uint64_t sub_100032274()
{
  return 4475253LL;
}

unint64_t sub_100032284@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10003B7DC(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000322A8(uint64_t a1)
{
  unint64_t v2 = sub_1000324B0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000322D0(uint64_t a1)
{
  unint64_t v2 = sub_1000324B0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IDSInvitationSchema.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000264C(&qword_1000846C8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100002C78(a1, v9);
  unint64_t v11 = sub_1000324B0();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for IDSInvitationSchema.CodingKeys,  &type metadata for IDSInvitationSchema.CodingKeys,  v11,  v9,  v10);
  char v27 = 0;
  uint64_t v12 = type metadata accessor for IDSInvitationContextSchema(0LL);
  uint64_t v13 = sub_100004DB8( &qword_1000846D8,  type metadata accessor for IDSInvitationContextSchema,  (uint64_t)&protocol conformance descriptor for IDSInvitationContextSchema);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v27, v5, v12, v13);
  if (!v2)
  {
    unint64_t v14 = (int *)type metadata accessor for IDSInvitationSchema(0LL);
    uint64_t v15 = *(void *)(v3 + v14[5]);
    char v26 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v15, &v26, v5);
    uint64_t v16 = (uint64_t *)(v3 + v14[6]);
    uint64_t v17 = *v16;
    uint64_t v18 = *((unsigned __int8 *)v16 + 8);
    char v25 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, v18, &v25, v5);
    uint64_t v19 = (uint64_t *)(v3 + v14[7]);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    char v24 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v20, v21, &v24, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1000324B0()
{
  unint64_t result = qword_1000846D0;
  if (!qword_1000846D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100070728, &type metadata for IDSInvitationSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000846D0);
  }

  return result;
}

uint64_t type metadata accessor for IDSInvitationSchema(uint64_t a1)
{
  return sub_100032508(a1, qword_100084918, (uint64_t)&nominal type descriptor for IDSInvitationSchema);
}

uint64_t sub_100032508(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata(a1, a3);
  }
  return result;
}

uint64_t IDSInvitationSchema.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v28 = a2;
  uint64_t v4 = type metadata accessor for IDSInvitationContextSchema(0LL);
  __chkstk_darwin(v4);
  unint64_t v29 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = sub_10000264C(&qword_1000846E0);
  uint64_t v6 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = (int *)type metadata accessor for IDSInvitationSchema(0LL);
  __chkstk_darwin(v9);
  unint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  uint64_t v31 = a1;
  sub_100002C78(a1, v12);
  unint64_t v14 = sub_1000324B0();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for IDSInvitationSchema.CodingKeys,  &type metadata for IDSInvitationSchema.CodingKeys,  v14,  v12,  v13);
  if (v2) {
    return sub_100002FD4(v31);
  }
  uint64_t v15 = v6;
  uint64_t v16 = (uint64_t)v11;
  char v35 = 0;
  uint64_t v17 = sub_100004DB8( &qword_1000846E8,  type metadata accessor for IDSInvitationContextSchema,  (uint64_t)&protocol conformance descriptor for IDSInvitationContextSchema);
  uint64_t v18 = (uint64_t)v29;
  uint64_t v19 = v30;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v4, &v35, v30, v4, v17);
  sub_10002FFF0(v18, v16, type metadata accessor for IDSInvitationContextSchema);
  char v34 = 1;
  *(void *)(v16 + v9[5]) = KeyedDecodingContainer.decode(_:forKey:)(&v34, v19);
  char v33 = 2;
  uint64_t v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v33, v19);
  uint64_t v21 = v16 + v9[6];
  *(void *)uint64_t v21 = v20;
  *(_BYTE *)(v21 + 8) = v22 & 1;
  char v32 = 3;
  uint64_t v24 = KeyedDecodingContainer.decode(_:forKey:)(&v32, v19);
  uint64_t v26 = v25;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v8, v19);
  char v27 = (uint64_t *)(v16 + v9[7]);
  *char v27 = v24;
  v27[1] = v26;
  sub_100030F74(v16, v28, type metadata accessor for IDSInvitationSchema);
  sub_100002FD4(v31);
  return sub_100030078(v16, type metadata accessor for IDSInvitationSchema);
}

unint64_t sub_100032810()
{
  unint64_t result = qword_1000846F0;
  if (!qword_1000846F0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IDSInvitationContextType,  &type metadata for IDSInvitationContextType);
    atomic_store(result, (unint64_t *)&qword_1000846F0);
  }

  return result;
}

uint64_t sub_100032854@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return IDSInvitationSchema.init(from:)(a1, a2);
}

uint64_t sub_100032868(void *a1)
{
  return IDSInvitationSchema.encode(to:)(a1);
}

uint64_t sub_100032888()
{
  return 0LL;
}

ValueMetadata *type metadata accessor for IDSInvitationContextType()
{
  return &type metadata for IDSInvitationContextType;
}

uint64_t initializeBufferWithCopyOfBuffer for IDSDictionaryContextClientSchema( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) == 0)
  {
    uint64_t v5 = (char *)&loc_1000328FC + 4 * byte_10006FAD8[swift_getEnumCaseMultiPayload(a2, a3)];
    __asm { BR              X10 }
  }

  uint64_t v6 = *a2;
  *a1 = *a2;
  uint64_t v7 = v6 + ((v4 + 16LL) & ~(unint64_t)v4);
  swift_retain(v6);
  return v7;
}

uint64_t destroy for IDSDictionaryContextClientSchema(uint64_t *a1, uint64_t a2)
{
  uint64_t result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((int)result)
  {
    case 0:
      swift_bridgeObjectRelease(a1[1]);
      uint64_t v4 = type metadata accessor for IDSSampleInvitationSchema(0LL);
      uint64_t v5 = (char *)a1 + *(int *)(v4 + 20);
      uint64_t v6 = type metadata accessor for Date(0LL);
      uint64_t v7 = *(void *)(v6 - 8);
      uint64_t v8 = *(int *)(v4 + 24);
      goto LABEL_22;
    case 1:
      swift_bridgeObjectRelease(a1[1]);
      uint64_t v9 = (int *)type metadata accessor for IDSHomeKitInvitationSchema(0LL);
      uint64_t v10 = (char *)a1 + v9[5];
      uint64_t v11 = type metadata accessor for Date(0LL);
      uint64_t v12 = *(void *)(v11 - 8);
      swift_bridgeObjectRelease(*(uint64_t *)((char *)a1 + v9[6] + 8));
      uint64_t v13 = (uint64_t *)((char *)a1 + v9[10]);
      if (*v13 != 1LL)
      {
        swift_bridgeObjectRelease(*v13);
        swift_bridgeObjectRelease(v13[1]);
      }

      unint64_t v14 = (char *)a1 + v9[11];
      uint64_t v15 = type metadata accessor for UUID(0LL);
      uint64_t v16 = *(void *)(v15 - 8);
      uint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
      if (!v17(v14, 1LL, v15)) {
        (*(void (**)(char *, uint64_t))(v16 + 8))(v14, v15);
      }
      uint64_t v18 = (uint64_t *)((char *)a1 + v9[12]);
      unint64_t v19 = v18[1];
      if (v19 >> 60 != 15) {
        sub_100004080(*v18, v19);
      }
      swift_bridgeObjectRelease(*(uint64_t *)((char *)a1 + v9[13] + 8));
      uint64_t v20 = (char *)a1 + v9[14];
      if (!v17(v20, 1LL, v15)) {
        (*(void (**)(char *, uint64_t))(v16 + 8))(v20, v15);
      }
      swift_bridgeObjectRelease(*(uint64_t *)((char *)a1 + v9[15] + 8));
      uint64_t v21 = (uint64_t *)((char *)a1 + v9[16]);
      unint64_t v22 = v21[1];
      if (v22 >> 60 != 15) {
        sub_100004080(*v21, v22);
      }
      uint64_t result = swift_bridgeObjectRelease(*(uint64_t *)((char *)a1 + v9[17] + 8));
      uint64_t v23 = (uint64_t *)((char *)a1 + v9[20]);
      unint64_t v24 = v23[1];
      if (v24 >> 60 != 15) {
        uint64_t result = sub_100004080(*v23, v24);
      }
      break;
    case 2:
      swift_bridgeObjectRelease(a1[1]);
      swift_bridgeObjectRelease(a1[3]);
      sub_100004080(a1[4], a1[5]);
      swift_bridgeObjectRelease(a1[7]);
      uint64_t v25 = type metadata accessor for IDSKCSharingInvitationSchema(0LL);
      uint64_t v26 = (char *)a1 + *(int *)(v25 + 32);
      uint64_t v27 = type metadata accessor for Date(0LL);
      uint64_t v28 = *(void *)(v27 - 8);
      uint64_t v8 = *(int *)(v25 + 36);
LABEL_22:
      uint64_t result = swift_bridgeObjectRelease(*(uint64_t *)((char *)a1 + v8 + 8));
      break;
    case 3:
      uint64_t result = sub_100004080(*a1, a1[1]);
      break;
    case 4:
      uint64_t result = sub_100004080(a1[1], a1[2]);
      break;
    default:
      return result;
  }

  return result;
}

void initializeWithCopy for IDSDictionaryContextClientSchema(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (char *)sub_1000331E0 + 4 * byte_10006FAE2[swift_getEnumCaseMultiPayload(a2, a3)];
  __asm { BR              X10 }

void *sub_1000331E0()
{
  uint64_t v18 = v1;
  uint64_t v4 = v3[1];
  void *v0 = *v3;
  v0[1] = v4;
  uint64_t v5 = type metadata accessor for IDSSampleInvitationSchema(0LL);
  uint64_t v6 = *(int *)(v5 + 20);
  uint64_t v7 = (char *)v0 + v6;
  uint64_t v8 = (char *)v3 + v6;
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  swift_bridgeObjectRetain(v4);
  if (v11(v8, 1LL, v9))
  {
    uint64_t v12 = sub_10000264C(&qword_100084248);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0LL, 1LL, v9);
  }

  uint64_t v13 = *(int *)(v5 + 24);
  unint64_t v14 = (void *)((char *)v0 + v13);
  uint64_t v15 = (void *)((char *)v3 + v13);
  uint64_t v16 = v15[1];
  *unint64_t v14 = *v15;
  v14[1] = v16;
  swift_bridgeObjectRetain(v16);
  swift_storeEnumTagMultiPayload(v0, v18, v2);
  return v0;
}

uint64_t assignWithCopy for IDSDictionaryContextClientSchema(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    sub_100030078(result, type metadata accessor for IDSDictionaryContextClientSchema);
    uint64_t v5 = (char *)&loc_1000337B4 + 4 * byte_10006FAE7[swift_getEnumCaseMultiPayload(a2, a3)];
    __asm { BR              X10 }
  }

  return result;
}

_OWORD *initializeWithTake for IDSDictionaryContextClientSchema(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      __int128 v14 = a2[1];
      *a1 = *a2;
      a1[1] = v14;
      __int128 v15 = a2[3];
      a1[2] = a2[2];
      a1[3] = v15;
      uint64_t v16 = type metadata accessor for IDSKCSharingInvitationSchema(0LL);
      uint64_t v17 = *(int *)(v16 + 32);
      uint64_t v18 = (char *)a1 + v17;
      unint64_t v19 = (char *)a2 + v17;
      uint64_t v20 = type metadata accessor for Date(0LL);
      uint64_t v21 = *(void *)(v20 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1LL, v20))
      {
        uint64_t v22 = sub_10000264C(&qword_100084248);
        memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v18, v19, v20);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0LL, 1LL, v20);
      }

      *(_OWORD *)((char *)a1 + *(int *)(v16 + 36)) = *(_OWORD *)((char *)a2 + *(int *)(v16 + 36));
      uint64_t v30 = a1;
      uint64_t v31 = a3;
      uint64_t v32 = 2LL;
      goto LABEL_23;
    case 1:
      *a1 = *a2;
      uint64_t v23 = (int *)type metadata accessor for IDSHomeKitInvitationSchema(0LL);
      uint64_t v24 = v23[5];
      uint64_t v25 = (char *)a1 + v24;
      uint64_t v26 = (char *)a2 + v24;
      uint64_t v27 = type metadata accessor for Date(0LL);
      uint64_t v28 = *(void *)(v27 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1LL, v27))
      {
        uint64_t v29 = sub_10000264C(&qword_100084248);
        memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v25, v26, v27);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0LL, 1LL, v27);
      }

      *(_OWORD *)((char *)a1 + v23[6]) = *(_OWORD *)((char *)a2 + v23[6]);
      *((_BYTE *)a1 + v23[7]) = *((_BYTE *)a2 + v23[7]);
      uint64_t v33 = v23[8];
      char v34 = (char *)a1 + v33;
      char v35 = (char *)a2 + v33;
      v34[8] = v35[8];
      *(void *)char v34 = *(void *)v35;
      *((_BYTE *)a1 + v23[9]) = *((_BYTE *)a2 + v23[9]);
      *(_OWORD *)((char *)a1 + v23[10]) = *(_OWORD *)((char *)a2 + v23[10]);
      uint64_t v36 = v23[11];
      uint64_t v37 = (char *)a1 + v36;
      uint64_t v38 = (char *)a2 + v36;
      uint64_t v39 = type metadata accessor for UUID(0LL);
      uint64_t v40 = *(void *)(v39 - 8);
      char v41 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48);
      if (v41(v38, 1LL, v39))
      {
        uint64_t v42 = sub_10000264C(&qword_1000846F8);
        memcpy(v37, v38, *(void *)(*(void *)(v42 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v37, v38, v39);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v37, 0LL, 1LL, v39);
      }

      *(_OWORD *)((char *)a1 + v23[12]) = *(_OWORD *)((char *)a2 + v23[12]);
      *(_OWORD *)((char *)a1 + v23[13]) = *(_OWORD *)((char *)a2 + v23[13]);
      uint64_t v43 = v23[14];
      uint64_t v44 = (char *)a1 + v43;
      uint64_t v45 = (char *)a2 + v43;
      if (v41((char *)a2 + v43, 1LL, v39))
      {
        uint64_t v46 = sub_10000264C(&qword_1000846F8);
        memcpy(v44, v45, *(void *)(*(void *)(v46 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v44, v45, v39);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v44, 0LL, 1LL, v39);
      }

      *(_OWORD *)((char *)a1 + v23[15]) = *(_OWORD *)((char *)a2 + v23[15]);
      *(_OWORD *)((char *)a1 + v23[16]) = *(_OWORD *)((char *)a2 + v23[16]);
      *(_OWORD *)((char *)a1 + v23[17]) = *(_OWORD *)((char *)a2 + v23[17]);
      uint64_t v47 = v23[18];
      uint64_t v48 = (char *)a1 + v47;
      uint64_t v49 = (char *)a2 + v47;
      v48[8] = v49[8];
      *(void *)uint64_t v48 = *(void *)v49;
      uint64_t v50 = v23[19];
      uint64_t v51 = (char *)a1 + v50;
      uint64_t v52 = (char *)a2 + v50;
      v51[8] = v52[8];
      *(void *)uint64_t v51 = *(void *)v52;
      *(_OWORD *)((char *)a1 + v23[20]) = *(_OWORD *)((char *)a2 + v23[20]);
      uint64_t v30 = a1;
      uint64_t v31 = a3;
      uint64_t v32 = 1LL;
      goto LABEL_23;
    case 0:
      *a1 = *a2;
      uint64_t v7 = type metadata accessor for IDSSampleInvitationSchema(0LL);
      uint64_t v8 = *(int *)(v7 + 20);
      uint64_t v9 = (char *)a1 + v8;
      uint64_t v10 = (char *)a2 + v8;
      uint64_t v11 = type metadata accessor for Date(0LL);
      uint64_t v12 = *(void *)(v11 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1LL, v11))
      {
        uint64_t v13 = sub_10000264C(&qword_100084248);
        memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
      }

      *(_OWORD *)((char *)a1 + *(int *)(v7 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v7 + 24));
      uint64_t v30 = a1;
      uint64_t v31 = a3;
      uint64_t v32 = 0LL;
LABEL_23:
      swift_storeEnumTagMultiPayload(v30, v31, v32);
      return a1;
  }

  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  return a1;
}

_OWORD *assignWithTake for IDSDictionaryContextClientSchema(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100030078((uint64_t)a1, type metadata accessor for IDSDictionaryContextClientSchema);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    switch(EnumCaseMultiPayload)
    {
      case 2:
        __int128 v14 = a2[1];
        *a1 = *a2;
        a1[1] = v14;
        __int128 v15 = a2[3];
        a1[2] = a2[2];
        a1[3] = v15;
        uint64_t v16 = type metadata accessor for IDSKCSharingInvitationSchema(0LL);
        uint64_t v17 = *(int *)(v16 + 32);
        uint64_t v18 = (char *)a1 + v17;
        unint64_t v19 = (char *)a2 + v17;
        uint64_t v20 = type metadata accessor for Date(0LL);
        uint64_t v21 = *(void *)(v20 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1LL, v20))
        {
          uint64_t v22 = sub_10000264C(&qword_100084248);
          memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v18, v19, v20);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0LL, 1LL, v20);
        }

        *(_OWORD *)((char *)a1 + *(int *)(v16 + 36)) = *(_OWORD *)((char *)a2 + *(int *)(v16 + 36));
        uint64_t v30 = a1;
        uint64_t v31 = a3;
        uint64_t v32 = 2LL;
        goto LABEL_24;
      case 1:
        *a1 = *a2;
        uint64_t v23 = (int *)type metadata accessor for IDSHomeKitInvitationSchema(0LL);
        uint64_t v24 = v23[5];
        uint64_t v25 = (char *)a1 + v24;
        uint64_t v26 = (char *)a2 + v24;
        uint64_t v27 = type metadata accessor for Date(0LL);
        uint64_t v28 = *(void *)(v27 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1LL, v27))
        {
          uint64_t v29 = sub_10000264C(&qword_100084248);
          memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v25, v26, v27);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0LL, 1LL, v27);
        }

        *(_OWORD *)((char *)a1 + v23[6]) = *(_OWORD *)((char *)a2 + v23[6]);
        *((_BYTE *)a1 + v23[7]) = *((_BYTE *)a2 + v23[7]);
        uint64_t v33 = v23[8];
        char v34 = (char *)a1 + v33;
        char v35 = (char *)a2 + v33;
        v34[8] = v35[8];
        *(void *)char v34 = *(void *)v35;
        *((_BYTE *)a1 + v23[9]) = *((_BYTE *)a2 + v23[9]);
        *(_OWORD *)((char *)a1 + v23[10]) = *(_OWORD *)((char *)a2 + v23[10]);
        uint64_t v36 = v23[11];
        uint64_t v37 = (char *)a1 + v36;
        uint64_t v38 = (char *)a2 + v36;
        uint64_t v39 = type metadata accessor for UUID(0LL);
        uint64_t v40 = *(void *)(v39 - 8);
        char v41 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48);
        if (v41(v38, 1LL, v39))
        {
          uint64_t v42 = sub_10000264C(&qword_1000846F8);
          memcpy(v37, v38, *(void *)(*(void *)(v42 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v37, v38, v39);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v37, 0LL, 1LL, v39);
        }

        *(_OWORD *)((char *)a1 + v23[12]) = *(_OWORD *)((char *)a2 + v23[12]);
        *(_OWORD *)((char *)a1 + v23[13]) = *(_OWORD *)((char *)a2 + v23[13]);
        uint64_t v43 = v23[14];
        uint64_t v44 = (char *)a1 + v43;
        uint64_t v45 = (char *)a2 + v43;
        if (v41((char *)a2 + v43, 1LL, v39))
        {
          uint64_t v46 = sub_10000264C(&qword_1000846F8);
          memcpy(v44, v45, *(void *)(*(void *)(v46 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v44, v45, v39);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v44, 0LL, 1LL, v39);
        }

        *(_OWORD *)((char *)a1 + v23[15]) = *(_OWORD *)((char *)a2 + v23[15]);
        *(_OWORD *)((char *)a1 + v23[16]) = *(_OWORD *)((char *)a2 + v23[16]);
        *(_OWORD *)((char *)a1 + v23[17]) = *(_OWORD *)((char *)a2 + v23[17]);
        uint64_t v47 = v23[18];
        uint64_t v48 = (char *)a1 + v47;
        uint64_t v49 = (char *)a2 + v47;
        v48[8] = v49[8];
        *(void *)uint64_t v48 = *(void *)v49;
        uint64_t v50 = v23[19];
        uint64_t v51 = (char *)a1 + v50;
        uint64_t v52 = (char *)a2 + v50;
        v51[8] = v52[8];
        *(void *)uint64_t v51 = *(void *)v52;
        *(_OWORD *)((char *)a1 + v23[20]) = *(_OWORD *)((char *)a2 + v23[20]);
        uint64_t v30 = a1;
        uint64_t v31 = a3;
        uint64_t v32 = 1LL;
        goto LABEL_24;
      case 0:
        *a1 = *a2;
        uint64_t v7 = type metadata accessor for IDSSampleInvitationSchema(0LL);
        uint64_t v8 = *(int *)(v7 + 20);
        uint64_t v9 = (char *)a1 + v8;
        uint64_t v10 = (char *)a2 + v8;
        uint64_t v11 = type metadata accessor for Date(0LL);
        uint64_t v12 = *(void *)(v11 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1LL, v11))
        {
          uint64_t v13 = sub_10000264C(&qword_100084248);
          memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
        }

        *(_OWORD *)((char *)a1 + *(int *)(v7 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v7 + 24));
        uint64_t v30 = a1;
        uint64_t v31 = a3;
        uint64_t v32 = 0LL;
LABEL_24:
        swift_storeEnumTagMultiPayload(v30, v31, v32);
        return a1;
    }

    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  return a1;
}

uint64_t getEnumTagSinglePayload for IDSDictionaryContextClientSchema(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48LL))();
}

uint64_t storeEnumTagSinglePayload for IDSDictionaryContextClientSchema( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56LL))();
}

uint64_t sub_100034684(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

uint64_t sub_100034694(uint64_t a1)
{
  uint64_t result = type metadata accessor for IDSSampleInvitationSchema(319LL);
  if (v3 <= 0x3F)
  {
    v6[0] = *(void *)(result - 8) + 64LL;
    uint64_t result = type metadata accessor for IDSHomeKitInvitationSchema(319LL);
    if (v4 <= 0x3F)
    {
      v6[1] = *(void *)(result - 8) + 64LL;
      uint64_t result = type metadata accessor for IDSKCSharingInvitationSchema(319LL);
      if (v5 <= 0x3F)
      {
        _OWORD v6[2] = *(void *)(result - 8) + 64LL;
        v6[3] = &unk_10006FDD8;
        v6[4] = &unk_10006FDF0;
        swift_initEnumMetadataMultiPayload(a1, 256LL, 5LL, v6);
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for IDSDictionaryContextData(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) == 0)
  {
    uint64_t v6 = type metadata accessor for IDSDictionaryContextClientSchema(0LL);
    uint64_t v7 = (char *)&loc_1000347A8 + 4 * byte_10006FAEC[swift_getEnumCaseMultiPayload(a2, v6)];
    __asm { BR              X10 }
  }

  uint64_t v8 = *a2;
  *a1 = *a2;
  uint64_t v9 = v8 + ((v5 + 16LL) & ~(unint64_t)v5);
  swift_retain(v8);
  return v9;
}

uint64_t destroy for IDSDictionaryContextData(uint64_t *a1)
{
  uint64_t v2 = type metadata accessor for IDSDictionaryContextClientSchema(0LL);
  uint64_t result = swift_getEnumCaseMultiPayload(a1, v2);
  switch((int)result)
  {
    case 0:
      swift_bridgeObjectRelease(a1[1]);
      uint64_t v4 = type metadata accessor for IDSSampleInvitationSchema(0LL);
      int v5 = (char *)a1 + *(int *)(v4 + 20);
      uint64_t v6 = type metadata accessor for Date(0LL);
      uint64_t v7 = *(void *)(v6 - 8);
      uint64_t v8 = *(int *)(v4 + 24);
      goto LABEL_22;
    case 1:
      swift_bridgeObjectRelease(a1[1]);
      uint64_t v9 = (int *)type metadata accessor for IDSHomeKitInvitationSchema(0LL);
      uint64_t v10 = (char *)a1 + v9[5];
      uint64_t v11 = type metadata accessor for Date(0LL);
      uint64_t v12 = *(void *)(v11 - 8);
      swift_bridgeObjectRelease(*(uint64_t *)((char *)a1 + v9[6] + 8));
      uint64_t v13 = (uint64_t *)((char *)a1 + v9[10]);
      if (*v13 != 1LL)
      {
        swift_bridgeObjectRelease(*v13);
        swift_bridgeObjectRelease(v13[1]);
      }

      __int128 v14 = (char *)a1 + v9[11];
      uint64_t v15 = type metadata accessor for UUID(0LL);
      uint64_t v16 = *(void *)(v15 - 8);
      uint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
      if (!v17(v14, 1LL, v15)) {
        (*(void (**)(char *, uint64_t))(v16 + 8))(v14, v15);
      }
      uint64_t v18 = (uint64_t *)((char *)a1 + v9[12]);
      unint64_t v19 = v18[1];
      if (v19 >> 60 != 15) {
        sub_100004080(*v18, v19);
      }
      swift_bridgeObjectRelease(*(uint64_t *)((char *)a1 + v9[13] + 8));
      uint64_t v20 = (char *)a1 + v9[14];
      if (!v17(v20, 1LL, v15)) {
        (*(void (**)(char *, uint64_t))(v16 + 8))(v20, v15);
      }
      swift_bridgeObjectRelease(*(uint64_t *)((char *)a1 + v9[15] + 8));
      uint64_t v21 = (uint64_t *)((char *)a1 + v9[16]);
      unint64_t v22 = v21[1];
      if (v22 >> 60 != 15) {
        sub_100004080(*v21, v22);
      }
      uint64_t result = swift_bridgeObjectRelease(*(uint64_t *)((char *)a1 + v9[17] + 8));
      uint64_t v23 = (uint64_t *)((char *)a1 + v9[20]);
      unint64_t v24 = v23[1];
      if (v24 >> 60 != 15) {
        uint64_t result = sub_100004080(*v23, v24);
      }
      break;
    case 2:
      swift_bridgeObjectRelease(a1[1]);
      swift_bridgeObjectRelease(a1[3]);
      sub_100004080(a1[4], a1[5]);
      swift_bridgeObjectRelease(a1[7]);
      uint64_t v25 = type metadata accessor for IDSKCSharingInvitationSchema(0LL);
      uint64_t v26 = (char *)a1 + *(int *)(v25 + 32);
      uint64_t v27 = type metadata accessor for Date(0LL);
      uint64_t v28 = *(void *)(v27 - 8);
      uint64_t v8 = *(int *)(v25 + 36);
LABEL_22:
      uint64_t result = swift_bridgeObjectRelease(*(uint64_t *)((char *)a1 + v8 + 8));
      break;
    case 3:
      uint64_t result = sub_100004080(*a1, a1[1]);
      break;
    case 4:
      uint64_t result = sub_100004080(a1[1], a1[2]);
      break;
    default:
      return result;
  }

  return result;
}

void initializeWithCopy for IDSDictionaryContextData(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for IDSDictionaryContextClientSchema(0LL);
  uint64_t v4 = (char *)sub_1000350A4 + 4 * byte_10006FAF6[swift_getEnumCaseMultiPayload(a2, v3)];
  __asm { BR              X10 }

void *sub_1000350A4()
{
  uint64_t v18 = v1;
  uint64_t v4 = v3[1];
  void *v0 = *v3;
  v0[1] = v4;
  uint64_t v5 = type metadata accessor for IDSSampleInvitationSchema(0LL);
  uint64_t v6 = *(int *)(v5 + 20);
  uint64_t v7 = (char *)v0 + v6;
  uint64_t v8 = (char *)v3 + v6;
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  swift_bridgeObjectRetain(v4);
  if (v11(v8, 1LL, v9))
  {
    uint64_t v12 = sub_10000264C(&qword_100084248);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0LL, 1LL, v9);
  }

  uint64_t v13 = *(int *)(v5 + 24);
  __int128 v14 = (void *)((char *)v0 + v13);
  uint64_t v15 = (void *)((char *)v3 + v13);
  uint64_t v16 = v15[1];
  *__int128 v14 = *v15;
  v14[1] = v16;
  swift_bridgeObjectRetain(v16);
  swift_storeEnumTagMultiPayload(v0, v18, v2);
  return v0;
}

uint64_t assignWithCopy for IDSDictionaryContextData(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    sub_100030078(result, type metadata accessor for IDSDictionaryContextClientSchema);
    uint64_t v3 = type metadata accessor for IDSDictionaryContextClientSchema(0LL);
    uint64_t v4 = (char *)&loc_100035680 + 4 * byte_10006FAFB[swift_getEnumCaseMultiPayload(a2, v3)];
    __asm { BR              X10 }
  }

  return result;
}

_OWORD *initializeWithTake for IDSDictionaryContextData(_OWORD *a1, _OWORD *a2)
{
  uint64_t v4 = type metadata accessor for IDSDictionaryContextClientSchema(0LL);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v4);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      __int128 v13 = a2[1];
      *a1 = *a2;
      a1[1] = v13;
      __int128 v14 = a2[3];
      a1[2] = a2[2];
      a1[3] = v14;
      uint64_t v15 = type metadata accessor for IDSKCSharingInvitationSchema(0LL);
      uint64_t v16 = *(int *)(v15 + 32);
      uint64_t v17 = (char *)a1 + v16;
      uint64_t v18 = (char *)a2 + v16;
      uint64_t v19 = type metadata accessor for Date(0LL);
      uint64_t v20 = *(void *)(v19 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1LL, v19))
      {
        uint64_t v21 = sub_10000264C(&qword_100084248);
        memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0LL, 1LL, v19);
      }

      *(_OWORD *)((char *)a1 + *(int *)(v15 + 36)) = *(_OWORD *)((char *)a2 + *(int *)(v15 + 36));
      uint64_t v29 = a1;
      uint64_t v30 = v4;
      uint64_t v31 = 2LL;
      goto LABEL_23;
    case 1:
      *a1 = *a2;
      unint64_t v22 = (int *)type metadata accessor for IDSHomeKitInvitationSchema(0LL);
      uint64_t v23 = v22[5];
      unint64_t v24 = (char *)a1 + v23;
      uint64_t v25 = (char *)a2 + v23;
      uint64_t v26 = type metadata accessor for Date(0LL);
      uint64_t v27 = *(void *)(v26 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1LL, v26))
      {
        uint64_t v28 = sub_10000264C(&qword_100084248);
        memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0LL, 1LL, v26);
      }

      *(_OWORD *)((char *)a1 + v22[6]) = *(_OWORD *)((char *)a2 + v22[6]);
      *((_BYTE *)a1 + v22[7]) = *((_BYTE *)a2 + v22[7]);
      uint64_t v32 = v22[8];
      uint64_t v33 = (char *)a1 + v32;
      char v34 = (char *)a2 + v32;
      v33[8] = v34[8];
      *(void *)uint64_t v33 = *(void *)v34;
      *((_BYTE *)a1 + v22[9]) = *((_BYTE *)a2 + v22[9]);
      *(_OWORD *)((char *)a1 + v22[10]) = *(_OWORD *)((char *)a2 + v22[10]);
      uint64_t v35 = v22[11];
      uint64_t v36 = (char *)a1 + v35;
      uint64_t v37 = (char *)a2 + v35;
      uint64_t v38 = type metadata accessor for UUID(0LL);
      uint64_t v39 = *(void *)(v38 - 8);
      uint64_t v40 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48);
      if (v40(v37, 1LL, v38))
      {
        uint64_t v41 = sub_10000264C(&qword_1000846F8);
        memcpy(v36, v37, *(void *)(*(void *)(v41 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v36, v37, v38);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0LL, 1LL, v38);
      }

      *(_OWORD *)((char *)a1 + v22[12]) = *(_OWORD *)((char *)a2 + v22[12]);
      *(_OWORD *)((char *)a1 + v22[13]) = *(_OWORD *)((char *)a2 + v22[13]);
      uint64_t v42 = v22[14];
      uint64_t v43 = (char *)a1 + v42;
      uint64_t v44 = (char *)a2 + v42;
      if (v40((char *)a2 + v42, 1LL, v38))
      {
        uint64_t v45 = sub_10000264C(&qword_1000846F8);
        memcpy(v43, v44, *(void *)(*(void *)(v45 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v43, v44, v38);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v43, 0LL, 1LL, v38);
      }

      *(_OWORD *)((char *)a1 + v22[15]) = *(_OWORD *)((char *)a2 + v22[15]);
      *(_OWORD *)((char *)a1 + v22[16]) = *(_OWORD *)((char *)a2 + v22[16]);
      *(_OWORD *)((char *)a1 + v22[17]) = *(_OWORD *)((char *)a2 + v22[17]);
      uint64_t v46 = v22[18];
      uint64_t v47 = (char *)a1 + v46;
      uint64_t v48 = (char *)a2 + v46;
      v47[8] = v48[8];
      *(void *)uint64_t v47 = *(void *)v48;
      uint64_t v49 = v22[19];
      uint64_t v50 = (char *)a1 + v49;
      uint64_t v51 = (char *)a2 + v49;
      v50[8] = v51[8];
      *(void *)uint64_t v50 = *(void *)v51;
      *(_OWORD *)((char *)a1 + v22[20]) = *(_OWORD *)((char *)a2 + v22[20]);
      uint64_t v29 = a1;
      uint64_t v30 = v4;
      uint64_t v31 = 1LL;
      goto LABEL_23;
    case 0:
      *a1 = *a2;
      uint64_t v6 = type metadata accessor for IDSSampleInvitationSchema(0LL);
      uint64_t v7 = *(int *)(v6 + 20);
      uint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      uint64_t v10 = type metadata accessor for Date(0LL);
      uint64_t v11 = *(void *)(v10 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1LL, v10))
      {
        uint64_t v12 = sub_10000264C(&qword_100084248);
        memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
      }

      *(_OWORD *)((char *)a1 + *(int *)(v6 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v6 + 24));
      uint64_t v29 = a1;
      uint64_t v30 = v4;
      uint64_t v31 = 0LL;
LABEL_23:
      swift_storeEnumTagMultiPayload(v29, v30, v31);
      return a1;
  }

  memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64LL));
  return a1;
}

_OWORD *assignWithTake for IDSDictionaryContextData(_OWORD *a1, _OWORD *a2)
{
  if (a1 != a2)
  {
    sub_100030078((uint64_t)a1, type metadata accessor for IDSDictionaryContextClientSchema);
    uint64_t v4 = type metadata accessor for IDSDictionaryContextClientSchema(0LL);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v4);
    switch(EnumCaseMultiPayload)
    {
      case 2:
        __int128 v13 = a2[1];
        *a1 = *a2;
        a1[1] = v13;
        __int128 v14 = a2[3];
        a1[2] = a2[2];
        a1[3] = v14;
        uint64_t v15 = type metadata accessor for IDSKCSharingInvitationSchema(0LL);
        uint64_t v16 = *(int *)(v15 + 32);
        uint64_t v17 = (char *)a1 + v16;
        uint64_t v18 = (char *)a2 + v16;
        uint64_t v19 = type metadata accessor for Date(0LL);
        uint64_t v20 = *(void *)(v19 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1LL, v19))
        {
          uint64_t v21 = sub_10000264C(&qword_100084248);
          memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0LL, 1LL, v19);
        }

        *(_OWORD *)((char *)a1 + *(int *)(v15 + 36)) = *(_OWORD *)((char *)a2 + *(int *)(v15 + 36));
        uint64_t v29 = a1;
        uint64_t v30 = v4;
        uint64_t v31 = 2LL;
        goto LABEL_24;
      case 1:
        *a1 = *a2;
        unint64_t v22 = (int *)type metadata accessor for IDSHomeKitInvitationSchema(0LL);
        uint64_t v23 = v22[5];
        unint64_t v24 = (char *)a1 + v23;
        uint64_t v25 = (char *)a2 + v23;
        uint64_t v26 = type metadata accessor for Date(0LL);
        uint64_t v27 = *(void *)(v26 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1LL, v26))
        {
          uint64_t v28 = sub_10000264C(&qword_100084248);
          memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0LL, 1LL, v26);
        }

        *(_OWORD *)((char *)a1 + v22[6]) = *(_OWORD *)((char *)a2 + v22[6]);
        *((_BYTE *)a1 + v22[7]) = *((_BYTE *)a2 + v22[7]);
        uint64_t v32 = v22[8];
        uint64_t v33 = (char *)a1 + v32;
        char v34 = (char *)a2 + v32;
        v33[8] = v34[8];
        *(void *)uint64_t v33 = *(void *)v34;
        *((_BYTE *)a1 + v22[9]) = *((_BYTE *)a2 + v22[9]);
        *(_OWORD *)((char *)a1 + v22[10]) = *(_OWORD *)((char *)a2 + v22[10]);
        uint64_t v35 = v22[11];
        uint64_t v36 = (char *)a1 + v35;
        uint64_t v37 = (char *)a2 + v35;
        uint64_t v38 = type metadata accessor for UUID(0LL);
        uint64_t v39 = *(void *)(v38 - 8);
        uint64_t v40 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48);
        if (v40(v37, 1LL, v38))
        {
          uint64_t v41 = sub_10000264C(&qword_1000846F8);
          memcpy(v36, v37, *(void *)(*(void *)(v41 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v36, v37, v38);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0LL, 1LL, v38);
        }

        *(_OWORD *)((char *)a1 + v22[12]) = *(_OWORD *)((char *)a2 + v22[12]);
        *(_OWORD *)((char *)a1 + v22[13]) = *(_OWORD *)((char *)a2 + v22[13]);
        uint64_t v42 = v22[14];
        uint64_t v43 = (char *)a1 + v42;
        uint64_t v44 = (char *)a2 + v42;
        if (v40((char *)a2 + v42, 1LL, v38))
        {
          uint64_t v45 = sub_10000264C(&qword_1000846F8);
          memcpy(v43, v44, *(void *)(*(void *)(v45 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v43, v44, v38);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v43, 0LL, 1LL, v38);
        }

        *(_OWORD *)((char *)a1 + v22[15]) = *(_OWORD *)((char *)a2 + v22[15]);
        *(_OWORD *)((char *)a1 + v22[16]) = *(_OWORD *)((char *)a2 + v22[16]);
        *(_OWORD *)((char *)a1 + v22[17]) = *(_OWORD *)((char *)a2 + v22[17]);
        uint64_t v46 = v22[18];
        uint64_t v47 = (char *)a1 + v46;
        uint64_t v48 = (char *)a2 + v46;
        v47[8] = v48[8];
        *(void *)uint64_t v47 = *(void *)v48;
        uint64_t v49 = v22[19];
        uint64_t v50 = (char *)a1 + v49;
        uint64_t v51 = (char *)a2 + v49;
        v50[8] = v51[8];
        *(void *)uint64_t v50 = *(void *)v51;
        *(_OWORD *)((char *)a1 + v22[20]) = *(_OWORD *)((char *)a2 + v22[20]);
        uint64_t v29 = a1;
        uint64_t v30 = v4;
        uint64_t v31 = 1LL;
        goto LABEL_24;
      case 0:
        *a1 = *a2;
        uint64_t v6 = type metadata accessor for IDSSampleInvitationSchema(0LL);
        uint64_t v7 = *(int *)(v6 + 20);
        uint64_t v8 = (char *)a1 + v7;
        uint64_t v9 = (char *)a2 + v7;
        uint64_t v10 = type metadata accessor for Date(0LL);
        uint64_t v11 = *(void *)(v10 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1LL, v10))
        {
          uint64_t v12 = sub_10000264C(&qword_100084248);
          memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
        }

        *(_OWORD *)((char *)a1 + *(int *)(v6 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v6 + 24));
        uint64_t v29 = a1;
        uint64_t v30 = v4;
        uint64_t v31 = 0LL;
LABEL_24:
        swift_storeEnumTagMultiPayload(v29, v30, v31);
        return a1;
    }

    memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64LL));
  }

  return a1;
}

uint64_t getEnumTagSinglePayload for IDSDictionaryContextData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for IDSDictionaryContextClientSchema(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for IDSDictionaryContextData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for IDSDictionaryContextClientSchema(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(a1, a2, a3, v6);
}

uint64_t sub_1000365CC(uint64_t a1)
{
  uint64_t result = type metadata accessor for IDSDictionaryContextClientSchema(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8);
    swift_initEnumMetadataSingleCase(a1, 256LL, v4 + 64);
    uint64_t result = 0LL;
    *(_DWORD *)(*(void *)(a1 - 8) + 84LL) = *(_DWORD *)(v4 + 84);
  }

  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for IDSInvitationContextSchema(void *a1, void *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) == 0)
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = (char *)a2 + *(int *)(a3 + 24);
    uint64_t v7 = type metadata accessor for IDSDictionaryContextClientSchema(0LL);
    swift_bridgeObjectRetain(v5);
    uint64_t v8 = (char *)&loc_1000366A8 + 4 * byte_10006FB00[swift_getEnumCaseMultiPayload(v6, v7)];
    __asm { BR              X10 }
  }

  uint64_t v9 = *a2;
  *a1 = *a2;
  uint64_t v10 = v9 + ((v4 + 16LL) & ~(unint64_t)v4);
  swift_retain(v9);
  return v10;
}

uint64_t destroy for IDSInvitationContextSchema(uint64_t a1, uint64_t a2)
{
  int v4 = (uint64_t *)(a1 + *(int *)(a2 + 24));
  uint64_t v5 = type metadata accessor for IDSDictionaryContextClientSchema(0LL);
  uint64_t result = swift_getEnumCaseMultiPayload(v4, v5);
  switch((int)result)
  {
    case 0:
      swift_bridgeObjectRelease(v4[1]);
      uint64_t v7 = type metadata accessor for IDSSampleInvitationSchema(0LL);
      uint64_t v8 = (char *)v4 + *(int *)(v7 + 20);
      uint64_t v9 = type metadata accessor for Date(0LL);
      uint64_t v10 = *(void *)(v9 - 8);
      uint64_t v11 = *(int *)(v7 + 24);
      goto LABEL_22;
    case 1:
      swift_bridgeObjectRelease(v4[1]);
      uint64_t v12 = (int *)type metadata accessor for IDSHomeKitInvitationSchema(0LL);
      __int128 v13 = (char *)v4 + v12[5];
      uint64_t v14 = type metadata accessor for Date(0LL);
      uint64_t v15 = *(void *)(v14 - 8);
      swift_bridgeObjectRelease(*(uint64_t *)((char *)v4 + v12[6] + 8));
      uint64_t v16 = (uint64_t *)((char *)v4 + v12[10]);
      if (*v16 != 1LL)
      {
        swift_bridgeObjectRelease(*v16);
        swift_bridgeObjectRelease(v16[1]);
      }

      uint64_t v17 = (char *)v4 + v12[11];
      uint64_t v18 = type metadata accessor for UUID(0LL);
      uint64_t v19 = *(void *)(v18 - 8);
      uint64_t v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
      if (!v20(v17, 1LL, v18)) {
        (*(void (**)(char *, uint64_t))(v19 + 8))(v17, v18);
      }
      uint64_t v21 = (uint64_t *)((char *)v4 + v12[12]);
      unint64_t v22 = v21[1];
      if (v22 >> 60 != 15) {
        sub_100004080(*v21, v22);
      }
      swift_bridgeObjectRelease(*(uint64_t *)((char *)v4 + v12[13] + 8));
      uint64_t v23 = (char *)v4 + v12[14];
      if (!v20(v23, 1LL, v18)) {
        (*(void (**)(char *, uint64_t))(v19 + 8))(v23, v18);
      }
      swift_bridgeObjectRelease(*(uint64_t *)((char *)v4 + v12[15] + 8));
      unint64_t v24 = (uint64_t *)((char *)v4 + v12[16]);
      unint64_t v25 = v24[1];
      if (v25 >> 60 != 15) {
        sub_100004080(*v24, v25);
      }
      uint64_t result = swift_bridgeObjectRelease(*(uint64_t *)((char *)v4 + v12[17] + 8));
      uint64_t v26 = (uint64_t *)((char *)v4 + v12[20]);
      unint64_t v27 = v26[1];
      if (v27 >> 60 != 15) {
        uint64_t result = sub_100004080(*v26, v27);
      }
      break;
    case 2:
      swift_bridgeObjectRelease(v4[1]);
      swift_bridgeObjectRelease(v4[3]);
      sub_100004080(v4[4], v4[5]);
      swift_bridgeObjectRelease(v4[7]);
      uint64_t v28 = type metadata accessor for IDSKCSharingInvitationSchema(0LL);
      uint64_t v29 = (char *)v4 + *(int *)(v28 + 32);
      uint64_t v30 = type metadata accessor for Date(0LL);
      uint64_t v31 = *(void *)(v30 - 8);
      uint64_t v11 = *(int *)(v28 + 36);
LABEL_22:
      uint64_t result = swift_bridgeObjectRelease(*(uint64_t *)((char *)v4 + v11 + 8));
      break;
    case 3:
      uint64_t result = sub_100004080(*v4, v4[1]);
      break;
    case 4:
      uint64_t result = sub_100004080(v4[1], v4[2]);
      break;
    default:
      return result;
  }

  return result;
}

void initializeWithCopy for IDSInvitationContextSchema(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  int v4 = (char *)a2 + *(int *)(a3 + 24);
  uint64_t v5 = type metadata accessor for IDSDictionaryContextClientSchema(0LL);
  swift_bridgeObjectRetain(v3);
  uint64_t v6 = (char *)sub_100036FE8 + 4 * byte_10006FB0A[swift_getEnumCaseMultiPayload(v4, v5)];
  __asm { BR              X10 }

uint64_t sub_100036FE8()
{
  unsigned int v19 = v3;
  uint64_t v20 = v2;
  uint64_t v5 = v4[1];
  *uint64_t v1 = *v4;
  v1[1] = v5;
  uint64_t v6 = type metadata accessor for IDSSampleInvitationSchema(0LL);
  uint64_t v7 = *(int *)(v6 + 20);
  uint64_t v8 = (char *)v1 + v7;
  uint64_t v9 = (char *)v4 + v7;
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain(v5);
  if (v12(v9, 1LL, v10))
  {
    uint64_t v13 = sub_10000264C(&qword_100084248);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
  }

  uint64_t v14 = *(int *)(v6 + 24);
  uint64_t v15 = (void *)((char *)v1 + v14);
  uint64_t v16 = (void *)((char *)v4 + v14);
  uint64_t v17 = v16[1];
  *uint64_t v15 = *v16;
  v15[1] = v17;
  swift_bridgeObjectRetain(v17);
  swift_storeEnumTagMultiPayload(v1, v20, v19);
  return v0;
}

void *assignWithCopy for IDSInvitationContextSchema(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  if (a1 != a2)
  {
    uint64_t v8 = *(int *)(a3 + 24);
    uint64_t v9 = (char *)a2 + v8;
    sub_100030078((uint64_t)a1 + v8, type metadata accessor for IDSDictionaryContextClientSchema);
    uint64_t v10 = type metadata accessor for IDSDictionaryContextClientSchema(0LL);
    uint64_t v11 = (char *)&loc_100037610 + 4 * byte_10006FB0F[swift_getEnumCaseMultiPayload(v9, v10)];
    __asm { BR              X10 }
  }

  return a1;
}

_OWORD *initializeWithTake for IDSInvitationContextSchema(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (_OWORD *)((char *)a1 + v4);
  uint64_t v6 = (_OWORD *)((char *)a2 + v4);
  uint64_t v7 = type metadata accessor for IDSDictionaryContextClientSchema(0LL);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v6, v7);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      __int128 v16 = v6[1];
      *uint64_t v5 = *v6;
      v5[1] = v16;
      __int128 v17 = v6[3];
      v5[2] = v6[2];
      v5[3] = v17;
      uint64_t v18 = type metadata accessor for IDSKCSharingInvitationSchema(0LL);
      uint64_t v19 = *(int *)(v18 + 32);
      uint64_t v20 = (char *)v5 + v19;
      uint64_t v21 = (char *)v6 + v19;
      uint64_t v22 = type metadata accessor for Date(0LL);
      uint64_t v23 = *(void *)(v22 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1LL, v22))
      {
        uint64_t v24 = sub_10000264C(&qword_100084248);
        memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v20, v21, v22);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0LL, 1LL, v22);
      }

      *(_OWORD *)((char *)v5 + *(int *)(v18 + 36)) = *(_OWORD *)((char *)v6 + *(int *)(v18 + 36));
      uint64_t v32 = v5;
      uint64_t v33 = v7;
      uint64_t v34 = 2LL;
      goto LABEL_23;
    case 1:
      *uint64_t v5 = *v6;
      unint64_t v25 = (int *)type metadata accessor for IDSHomeKitInvitationSchema(0LL);
      uint64_t v26 = v25[5];
      unint64_t v27 = (char *)v5 + v26;
      uint64_t v28 = (char *)v6 + v26;
      uint64_t v29 = type metadata accessor for Date(0LL);
      uint64_t v30 = *(void *)(v29 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1LL, v29))
      {
        uint64_t v31 = sub_10000264C(&qword_100084248);
        memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v27, v28, v29);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0LL, 1LL, v29);
      }

      *(_OWORD *)((char *)v5 + v25[6]) = *(_OWORD *)((char *)v6 + v25[6]);
      *((_BYTE *)v5 + v25[7]) = *((_BYTE *)v6 + v25[7]);
      uint64_t v35 = v25[8];
      uint64_t v36 = (char *)v5 + v35;
      uint64_t v37 = (char *)v6 + v35;
      v36[8] = v37[8];
      *(void *)uint64_t v36 = *(void *)v37;
      *((_BYTE *)v5 + v25[9]) = *((_BYTE *)v6 + v25[9]);
      *(_OWORD *)((char *)v5 + v25[10]) = *(_OWORD *)((char *)v6 + v25[10]);
      uint64_t v38 = v25[11];
      uint64_t v39 = (char *)v5 + v38;
      uint64_t v40 = (char *)v6 + v38;
      uint64_t v41 = type metadata accessor for UUID(0LL);
      uint64_t v42 = *(void *)(v41 - 8);
      uint64_t v43 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48);
      if (v43(v40, 1LL, v41))
      {
        uint64_t v44 = sub_10000264C(&qword_1000846F8);
        memcpy(v39, v40, *(void *)(*(void *)(v44 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v39, v40, v41);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v39, 0LL, 1LL, v41);
      }

      *(_OWORD *)((char *)v5 + v25[12]) = *(_OWORD *)((char *)v6 + v25[12]);
      *(_OWORD *)((char *)v5 + v25[13]) = *(_OWORD *)((char *)v6 + v25[13]);
      uint64_t v45 = v25[14];
      uint64_t v46 = (char *)v5 + v45;
      uint64_t v47 = (char *)v6 + v45;
      if (v43((char *)v6 + v45, 1LL, v41))
      {
        uint64_t v48 = sub_10000264C(&qword_1000846F8);
        memcpy(v46, v47, *(void *)(*(void *)(v48 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v46, v47, v41);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v46, 0LL, 1LL, v41);
      }

      *(_OWORD *)((char *)v5 + v25[15]) = *(_OWORD *)((char *)v6 + v25[15]);
      *(_OWORD *)((char *)v5 + v25[16]) = *(_OWORD *)((char *)v6 + v25[16]);
      *(_OWORD *)((char *)v5 + v25[17]) = *(_OWORD *)((char *)v6 + v25[17]);
      uint64_t v49 = v25[18];
      uint64_t v50 = (char *)v5 + v49;
      uint64_t v51 = (char *)v6 + v49;
      v50[8] = v51[8];
      *(void *)uint64_t v50 = *(void *)v51;
      uint64_t v52 = v25[19];
      uint64_t v53 = (char *)v5 + v52;
      uint64_t v54 = (char *)v6 + v52;
      v53[8] = v54[8];
      *(void *)uint64_t v53 = *(void *)v54;
      *(_OWORD *)((char *)v5 + v25[20]) = *(_OWORD *)((char *)v6 + v25[20]);
      uint64_t v32 = v5;
      uint64_t v33 = v7;
      uint64_t v34 = 1LL;
      goto LABEL_23;
    case 0:
      *uint64_t v5 = *v6;
      uint64_t v9 = type metadata accessor for IDSSampleInvitationSchema(0LL);
      uint64_t v10 = *(int *)(v9 + 20);
      uint64_t v11 = (char *)v5 + v10;
      uint64_t v12 = (char *)v6 + v10;
      uint64_t v13 = type metadata accessor for Date(0LL);
      uint64_t v14 = *(void *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v13))
      {
        uint64_t v15 = sub_10000264C(&qword_100084248);
        memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0LL, 1LL, v13);
      }

      *(_OWORD *)((char *)v5 + *(int *)(v9 + 24)) = *(_OWORD *)((char *)v6 + *(int *)(v9 + 24));
      uint64_t v32 = v5;
      uint64_t v33 = v7;
      uint64_t v34 = 0LL;
LABEL_23:
      swift_storeEnumTagMultiPayload(v32, v33, v34);
      return a1;
  }

  memcpy(v5, v6, *(void *)(*(void *)(v7 - 8) + 64LL));
  return a1;
}

void *assignWithTake for IDSInvitationContextSchema(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  if (a1 != a2)
  {
    uint64_t v8 = *(int *)(a3 + 24);
    uint64_t v9 = (_OWORD *)((char *)a1 + v8);
    uint64_t v10 = (_OWORD *)((char *)a2 + v8);
    sub_100030078((uint64_t)a1 + v8, type metadata accessor for IDSDictionaryContextClientSchema);
    uint64_t v11 = type metadata accessor for IDSDictionaryContextClientSchema(0LL);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v10, v11);
    switch(EnumCaseMultiPayload)
    {
      case 2:
        __int128 v20 = v10[1];
        *uint64_t v9 = *v10;
        v9[1] = v20;
        __int128 v21 = v10[3];
        v9[2] = v10[2];
        v9[3] = v21;
        uint64_t v22 = type metadata accessor for IDSKCSharingInvitationSchema(0LL);
        uint64_t v23 = *(int *)(v22 + 32);
        uint64_t v24 = (char *)v9 + v23;
        unint64_t v25 = (char *)v10 + v23;
        uint64_t v26 = type metadata accessor for Date(0LL);
        uint64_t v27 = *(void *)(v26 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1LL, v26))
        {
          uint64_t v28 = sub_10000264C(&qword_100084248);
          memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0LL, 1LL, v26);
        }

        *(_OWORD *)((char *)v9 + *(int *)(v22 + 36)) = *(_OWORD *)((char *)v10 + *(int *)(v22 + 36));
        uint64_t v36 = v9;
        uint64_t v37 = v11;
        uint64_t v38 = 2LL;
        goto LABEL_24;
      case 1:
        *uint64_t v9 = *v10;
        uint64_t v29 = (int *)type metadata accessor for IDSHomeKitInvitationSchema(0LL);
        uint64_t v30 = v29[5];
        uint64_t v31 = (char *)v9 + v30;
        uint64_t v32 = (char *)v10 + v30;
        uint64_t v33 = type metadata accessor for Date(0LL);
        uint64_t v34 = *(void *)(v33 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1LL, v33))
        {
          uint64_t v35 = sub_10000264C(&qword_100084248);
          memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v31, v32, v33);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0LL, 1LL, v33);
        }

        *(_OWORD *)((char *)v9 + v29[6]) = *(_OWORD *)((char *)v10 + v29[6]);
        *((_BYTE *)v9 + v29[7]) = *((_BYTE *)v10 + v29[7]);
        uint64_t v39 = v29[8];
        uint64_t v40 = (char *)v9 + v39;
        uint64_t v41 = (char *)v10 + v39;
        v40[8] = v41[8];
        *(void *)uint64_t v40 = *(void *)v41;
        *((_BYTE *)v9 + v29[9]) = *((_BYTE *)v10 + v29[9]);
        *(_OWORD *)((char *)v9 + v29[10]) = *(_OWORD *)((char *)v10 + v29[10]);
        uint64_t v42 = v29[11];
        uint64_t v43 = (char *)v9 + v42;
        uint64_t v44 = (char *)v10 + v42;
        uint64_t v45 = type metadata accessor for UUID(0LL);
        uint64_t v46 = *(void *)(v45 - 8);
        uint64_t v47 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48);
        if (v47(v44, 1LL, v45))
        {
          uint64_t v48 = sub_10000264C(&qword_1000846F8);
          memcpy(v43, v44, *(void *)(*(void *)(v48 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v43, v44, v45);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v46 + 56))(v43, 0LL, 1LL, v45);
        }

        *(_OWORD *)((char *)v9 + v29[12]) = *(_OWORD *)((char *)v10 + v29[12]);
        *(_OWORD *)((char *)v9 + v29[13]) = *(_OWORD *)((char *)v10 + v29[13]);
        uint64_t v49 = v29[14];
        uint64_t v50 = (char *)v9 + v49;
        uint64_t v51 = (char *)v10 + v49;
        if (v47((char *)v10 + v49, 1LL, v45))
        {
          uint64_t v52 = sub_10000264C(&qword_1000846F8);
          memcpy(v50, v51, *(void *)(*(void *)(v52 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v50, v51, v45);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v46 + 56))(v50, 0LL, 1LL, v45);
        }

        *(_OWORD *)((char *)v9 + v29[15]) = *(_OWORD *)((char *)v10 + v29[15]);
        *(_OWORD *)((char *)v9 + v29[16]) = *(_OWORD *)((char *)v10 + v29[16]);
        *(_OWORD *)((char *)v9 + v29[17]) = *(_OWORD *)((char *)v10 + v29[17]);
        uint64_t v53 = v29[18];
        uint64_t v54 = (char *)v9 + v53;
        uint64_t v55 = (char *)v10 + v53;
        v54[8] = v55[8];
        *(void *)uint64_t v54 = *(void *)v55;
        uint64_t v56 = v29[19];
        char v57 = (char *)v9 + v56;
        unint64_t v58 = (char *)v10 + v56;
        v57[8] = v58[8];
        *(void *)char v57 = *(void *)v58;
        *(_OWORD *)((char *)v9 + v29[20]) = *(_OWORD *)((char *)v10 + v29[20]);
        uint64_t v36 = v9;
        uint64_t v37 = v11;
        uint64_t v38 = 1LL;
        goto LABEL_24;
      case 0:
        *uint64_t v9 = *v10;
        uint64_t v13 = type metadata accessor for IDSSampleInvitationSchema(0LL);
        uint64_t v14 = *(int *)(v13 + 20);
        uint64_t v15 = (char *)v9 + v14;
        __int128 v16 = (char *)v10 + v14;
        uint64_t v17 = type metadata accessor for Date(0LL);
        uint64_t v18 = *(void *)(v17 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1LL, v17))
        {
          uint64_t v19 = sub_10000264C(&qword_100084248);
          memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0LL, 1LL, v17);
        }

        *(_OWORD *)((char *)v9 + *(int *)(v13 + 24)) = *(_OWORD *)((char *)v10 + *(int *)(v13 + 24));
        uint64_t v36 = v9;
        uint64_t v37 = v11;
        uint64_t v38 = 0LL;
LABEL_24:
        swift_storeEnumTagMultiPayload(v36, v37, v38);
        return a1;
    }

    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  return a1;
}

uint64_t getEnumTagSinglePayload for IDSInvitationContextSchema(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000384F8);
}

uint64_t sub_1000384F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    type metadata accessor for IDSDictionaryContextData(0LL);
    uint64_t v8 = a1 + *(int *)(a3 + 24);
    uint64_t v9 = type metadata accessor for IDSDictionaryContextClientSchema(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))(v8, a2, v9);
  }

uint64_t storeEnumTagSinglePayload for IDSInvitationContextSchema( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003858C);
}

uint64_t sub_10003858C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    type metadata accessor for IDSDictionaryContextData(0LL);
    uint64_t v7 = v5 + *(int *)(a4 + 24);
    uint64_t v8 = type metadata accessor for IDSDictionaryContextClientSchema(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v7, a2, a2, v8);
  }

  return result;
}

uint64_t sub_10003860C(uint64_t a1)
{
  v4[0] = &unk_10006FE50;
  v4[1] = (char *)&value witness table for () + 64;
  uint64_t result = type metadata accessor for IDSDictionaryContextClientSchema(319LL);
  if (v3 <= 0x3F)
  {
    v4[2] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 3LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for IDSInvitationSchema(void *a1, void *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) == 0)
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = (char *)a2 + *(int *)(type metadata accessor for IDSInvitationContextSchema(0LL) + 24);
    uint64_t v7 = type metadata accessor for IDSDictionaryContextClientSchema(0LL);
    swift_bridgeObjectRetain(v5);
    uint64_t v8 = (char *)&loc_100038720 + 4 * byte_10006FB14[swift_getEnumCaseMultiPayload(v6, v7)];
    __asm { BR              X10 }
  }

  uint64_t v9 = *a2;
  *a1 = *a2;
  uint64_t v10 = v9 + ((v4 + 16LL) & ~(unint64_t)v4);
  swift_retain(v9);
  return v10;
}

uint64_t destroy for IDSInvitationSchema(uint64_t a1, uint64_t a2)
{
  int v4 = (uint64_t *)(a1 + *(int *)(type metadata accessor for IDSInvitationContextSchema(0LL) + 24));
  uint64_t v5 = type metadata accessor for IDSDictionaryContextClientSchema(0LL);
  switch(swift_getEnumCaseMultiPayload(v4, v5))
  {
    case 0u:
      swift_bridgeObjectRelease(v4[1]);
      uint64_t v6 = type metadata accessor for IDSSampleInvitationSchema(0LL);
      uint64_t v7 = (char *)v4 + *(int *)(v6 + 20);
      uint64_t v8 = type metadata accessor for Date(0LL);
      uint64_t v9 = *(void *)(v8 - 8);
      uint64_t v10 = *(int *)(v6 + 24);
      goto LABEL_22;
    case 1u:
      swift_bridgeObjectRelease(v4[1]);
      uint64_t v11 = (int *)type metadata accessor for IDSHomeKitInvitationSchema(0LL);
      uint64_t v12 = (char *)v4 + v11[5];
      uint64_t v13 = type metadata accessor for Date(0LL);
      uint64_t v14 = *(void *)(v13 - 8);
      swift_bridgeObjectRelease(*(uint64_t *)((char *)v4 + v11[6] + 8));
      uint64_t v15 = (uint64_t *)((char *)v4 + v11[10]);
      if (*v15 != 1LL)
      {
        swift_bridgeObjectRelease(*v15);
        swift_bridgeObjectRelease(v15[1]);
      }

      __int128 v16 = (char *)v4 + v11[11];
      uint64_t v17 = type metadata accessor for UUID(0LL);
      uint64_t v18 = *(void *)(v17 - 8);
      uint64_t v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
      if (!v19(v16, 1LL, v17)) {
        (*(void (**)(char *, uint64_t))(v18 + 8))(v16, v17);
      }
      __int128 v20 = (uint64_t *)((char *)v4 + v11[12]);
      unint64_t v21 = v20[1];
      if (v21 >> 60 != 15) {
        sub_100004080(*v20, v21);
      }
      swift_bridgeObjectRelease(*(uint64_t *)((char *)v4 + v11[13] + 8));
      uint64_t v22 = (char *)v4 + v11[14];
      if (!v19(v22, 1LL, v17)) {
        (*(void (**)(char *, uint64_t))(v18 + 8))(v22, v17);
      }
      swift_bridgeObjectRelease(*(uint64_t *)((char *)v4 + v11[15] + 8));
      uint64_t v23 = (uint64_t *)((char *)v4 + v11[16]);
      unint64_t v24 = v23[1];
      if (v24 >> 60 != 15) {
        sub_100004080(*v23, v24);
      }
      swift_bridgeObjectRelease(*(uint64_t *)((char *)v4 + v11[17] + 8));
      unint64_t v25 = (uint64_t *)((char *)v4 + v11[20]);
      unint64_t v26 = v25[1];
      if (v26 >> 60 == 15) {
        return swift_bridgeObjectRelease(*(void *)(a1 + *(int *)(a2 + 28) + 8));
      }
      uint64_t v27 = *v25;
LABEL_25:
      sub_100004080(v27, v26);
      return swift_bridgeObjectRelease(*(void *)(a1 + *(int *)(a2 + 28) + 8));
    case 2u:
      swift_bridgeObjectRelease(v4[1]);
      swift_bridgeObjectRelease(v4[3]);
      sub_100004080(v4[4], v4[5]);
      swift_bridgeObjectRelease(v4[7]);
      uint64_t v28 = type metadata accessor for IDSKCSharingInvitationSchema(0LL);
      uint64_t v29 = (char *)v4 + *(int *)(v28 + 32);
      uint64_t v30 = type metadata accessor for Date(0LL);
      uint64_t v31 = *(void *)(v30 - 8);
      uint64_t v10 = *(int *)(v28 + 36);
LABEL_22:
      swift_bridgeObjectRelease(*(uint64_t *)((char *)v4 + v10 + 8));
      return swift_bridgeObjectRelease(*(void *)(a1 + *(int *)(a2 + 28) + 8));
    case 3u:
      uint64_t v27 = *v4;
      unint64_t v26 = v4[1];
      goto LABEL_25;
    case 4u:
      uint64_t v27 = v4[1];
      unint64_t v26 = v4[2];
      goto LABEL_25;
    default:
      return swift_bridgeObjectRelease(*(void *)(a1 + *(int *)(a2 + 28) + 8));
  }

void initializeWithCopy for IDSInvitationSchema(void *a1, void *a2)
{
  uint64_t v2 = a2[1];
  *a1 = *a2;
  a1[1] = v2;
  unint64_t v3 = (char *)a2 + *(int *)(type metadata accessor for IDSInvitationContextSchema(0LL) + 24);
  uint64_t v4 = type metadata accessor for IDSDictionaryContextClientSchema(0LL);
  swift_bridgeObjectRetain(v2);
  uint64_t v5 = (char *)sub_1000390B0 + 4 * byte_10006FB1E[swift_getEnumCaseMultiPayload(v3, v4)];
  __asm { BR              X10 }

uint64_t sub_1000390B0( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__dst, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25)
{
  unsigned int v55 = v31;
  uint64_t v53 = v30;
  uint64_t v54 = v27;
  uint64_t v32 = v29[1];
  *uint64_t v28 = *v29;
  v28[1] = v32;
  uint64_t v33 = type metadata accessor for IDSSampleInvitationSchema(0LL);
  uint64_t v34 = *(int *)(v33 + 20);
  uint64_t v52 = (char *)v28 + v34;
  uint64_t v35 = (char *)v29 + v34;
  uint64_t v36 = type metadata accessor for Date(0LL);
  uint64_t v37 = *(void *)(v36 - 8);
  uint64_t v38 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48);
  swift_bridgeObjectRetain(v32);
  if (v38(v35, 1LL, v36))
  {
    uint64_t v39 = sub_10000264C(&qword_100084248);
    memcpy(v52, v35, *(void *)(*(void *)(v39 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v52, v35, v36);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v52, 0LL, 1LL, v36);
  }

  uint64_t v40 = *(int *)(v33 + 24);
  uint64_t v41 = (void *)((char *)v28 + v40);
  uint64_t v42 = (void *)((char *)v29 + v40);
  uint64_t v43 = v42[1];
  void *v41 = *v42;
  v41[1] = v43;
  swift_bridgeObjectRetain(v43);
  swift_storeEnumTagMultiPayload(v28, v53, v55);
  uint64_t v44 = v54[6];
  *(void *)(v25 + v54[5]) = *(void *)(v26 + v54[5]);
  uint64_t v45 = v25 + v44;
  uint64_t v46 = v26 + v44;
  *(void *)uint64_t v45 = *(void *)v46;
  *(_BYTE *)(v45 + 8) = *(_BYTE *)(v46 + 8);
  uint64_t v47 = v54[7];
  uint64_t v48 = (void *)(v25 + v47);
  uint64_t v49 = (void *)(v26 + v47);
  uint64_t v50 = v49[1];
  *uint64_t v48 = *v49;
  v48[1] = v50;
  swift_bridgeObjectRetain(v50);
  return v25;
}

void *assignWithCopy for IDSInvitationSchema(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = type metadata accessor for IDSInvitationContextSchema(0LL);
  if (a1 != a2)
  {
    uint64_t v9 = *(int *)(v8 + 24);
    uint64_t v10 = (char *)a2 + v9;
    sub_100030078((uint64_t)a1 + v9, type metadata accessor for IDSDictionaryContextClientSchema);
    uint64_t v11 = type metadata accessor for IDSDictionaryContextClientSchema(0LL);
    uint64_t v12 = (char *)&loc_100039748 + 4 * byte_10006FB23[swift_getEnumCaseMultiPayload(v10, v11)];
    __asm { BR              X10 }
  }

  *(void *)((char *)a1 + a3[5]) = *(void *)((char *)a2 + a3[5]);
  uint64_t v13 = a3[6];
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = *(void *)v15;
  v14[8] = v15[8];
  *(void *)uint64_t v14 = v16;
  uint64_t v17 = a3[7];
  uint64_t v18 = (void *)((char *)a1 + v17);
  uint64_t v19 = (void *)((char *)a2 + v17);
  *uint64_t v18 = *v19;
  uint64_t v20 = v19[1];
  uint64_t v21 = v18[1];
  v18[1] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  return a1;
}

_OWORD *initializeWithTake for IDSInvitationSchema(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(type metadata accessor for IDSInvitationContextSchema(0LL) + 24);
  uint64_t v7 = (_OWORD *)((char *)a1 + v6);
  uint64_t v8 = (_OWORD *)((char *)a2 + v6);
  uint64_t v9 = type metadata accessor for IDSDictionaryContextClientSchema(0LL);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v8, v9);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      uint64_t v63 = v9;
      __int128 v18 = v8[1];
      *uint64_t v7 = *v8;
      v7[1] = v18;
      __int128 v19 = v8[3];
      v7[2] = v8[2];
      v7[3] = v19;
      uint64_t v20 = type metadata accessor for IDSKCSharingInvitationSchema(0LL);
      uint64_t v21 = *(int *)(v20 + 32);
      uint64_t v22 = (char *)v7 + v21;
      uint64_t v23 = (char *)v8 + v21;
      uint64_t v24 = type metadata accessor for Date(0LL);
      uint64_t v25 = *(void *)(v24 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1LL, v24))
      {
        uint64_t v26 = sub_10000264C(&qword_100084248);
        memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v22, v23, v24);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0LL, 1LL, v24);
      }

      *(_OWORD *)((char *)v7 + *(int *)(v20 + 36)) = *(_OWORD *)((char *)v8 + *(int *)(v20 + 36));
      uint64_t v34 = v7;
      uint64_t v35 = v63;
      uint64_t v36 = 2LL;
      goto LABEL_23;
    case 1:
      uint64_t v64 = v9;
      *uint64_t v7 = *v8;
      uint64_t v27 = (int *)type metadata accessor for IDSHomeKitInvitationSchema(0LL);
      uint64_t v28 = v27[5];
      uint64_t v29 = (char *)v7 + v28;
      uint64_t v30 = (char *)v8 + v28;
      uint64_t v31 = type metadata accessor for Date(0LL);
      uint64_t v32 = *(void *)(v31 - 8);
      uint64_t v61 = a3;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1LL, v31))
      {
        uint64_t v33 = sub_10000264C(&qword_100084248);
        memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v29, v30, v31);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0LL, 1LL, v31);
      }

      *(_OWORD *)((char *)v7 + v27[6]) = *(_OWORD *)((char *)v8 + v27[6]);
      *((_BYTE *)v7 + v27[7]) = *((_BYTE *)v8 + v27[7]);
      uint64_t v37 = v27[8];
      uint64_t v38 = (char *)v7 + v37;
      uint64_t v39 = (char *)v8 + v37;
      v38[8] = v39[8];
      *(void *)uint64_t v38 = *(void *)v39;
      *((_BYTE *)v7 + v27[9]) = *((_BYTE *)v8 + v27[9]);
      *(_OWORD *)((char *)v7 + v27[10]) = *(_OWORD *)((char *)v8 + v27[10]);
      uint64_t v40 = v27[11];
      uint64_t v41 = (char *)v7 + v40;
      uint64_t v42 = (char *)v8 + v40;
      uint64_t v43 = type metadata accessor for UUID(0LL);
      uint64_t v44 = *(void *)(v43 - 8);
      uint64_t v45 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48);
      if (v45(v42, 1LL, v43))
      {
        uint64_t v46 = sub_10000264C(&qword_1000846F8);
        memcpy(v41, v42, *(void *)(*(void *)(v46 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v41, v42, v43);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v44 + 56))(v41, 0LL, 1LL, v43);
      }

      *(_OWORD *)((char *)v7 + v27[12]) = *(_OWORD *)((char *)v8 + v27[12]);
      *(_OWORD *)((char *)v7 + v27[13]) = *(_OWORD *)((char *)v8 + v27[13]);
      uint64_t v47 = v27[14];
      uint64_t v48 = (char *)v7 + v47;
      uint64_t v49 = (char *)v8 + v47;
      if (v45((char *)v8 + v47, 1LL, v43))
      {
        uint64_t v50 = sub_10000264C(&qword_1000846F8);
        memcpy(v48, v49, *(void *)(*(void *)(v50 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v48, v49, v43);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v44 + 56))(v48, 0LL, 1LL, v43);
      }

      a3 = v61;
      uint64_t v35 = v64;
      *(_OWORD *)((char *)v7 + v27[15]) = *(_OWORD *)((char *)v8 + v27[15]);
      *(_OWORD *)((char *)v7 + v27[16]) = *(_OWORD *)((char *)v8 + v27[16]);
      *(_OWORD *)((char *)v7 + v27[17]) = *(_OWORD *)((char *)v8 + v27[17]);
      uint64_t v51 = v27[18];
      uint64_t v52 = (char *)v7 + v51;
      uint64_t v53 = (char *)v8 + v51;
      v52[8] = v53[8];
      *(void *)uint64_t v52 = *(void *)v53;
      uint64_t v54 = v27[19];
      unsigned int v55 = (char *)v7 + v54;
      uint64_t v56 = (char *)v8 + v54;
      v55[8] = v56[8];
      *(void *)unsigned int v55 = *(void *)v56;
      *(_OWORD *)((char *)v7 + v27[20]) = *(_OWORD *)((char *)v8 + v27[20]);
      uint64_t v34 = v7;
      uint64_t v36 = 1LL;
      goto LABEL_23;
    case 0:
      uint64_t v62 = v9;
      *uint64_t v7 = *v8;
      uint64_t v11 = type metadata accessor for IDSSampleInvitationSchema(0LL);
      uint64_t v12 = *(int *)(v11 + 20);
      uint64_t v13 = (char *)v7 + v12;
      uint64_t v14 = (char *)v8 + v12;
      uint64_t v15 = type metadata accessor for Date(0LL);
      uint64_t v16 = *(void *)(v15 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15))
      {
        uint64_t v17 = sub_10000264C(&qword_100084248);
        memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
      }

      *(_OWORD *)((char *)v7 + *(int *)(v11 + 24)) = *(_OWORD *)((char *)v8 + *(int *)(v11 + 24));
      uint64_t v34 = v7;
      uint64_t v35 = v62;
      uint64_t v36 = 0LL;
LABEL_23:
      swift_storeEnumTagMultiPayload(v34, v35, v36);
      goto LABEL_24;
  }

  memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64LL));
LABEL_24:
  uint64_t v57 = a3[6];
  *(void *)((char *)a1 + a3[5]) = *(void *)((char *)a2 + a3[5]);
  unint64_t v58 = (char *)a1 + v57;
  uint64_t v59 = (char *)a2 + v57;
  *(void *)unint64_t v58 = *(void *)v59;
  v58[8] = v59[8];
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  return a1;
}

void *assignWithTake for IDSInvitationSchema(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = type metadata accessor for IDSInvitationContextSchema(0LL);
  if (a1 != a2)
  {
    uint64_t v9 = *(int *)(v8 + 24);
    uint64_t v10 = (_OWORD *)((char *)a1 + v9);
    uint64_t v11 = (_OWORD *)((char *)a2 + v9);
    sub_100030078((uint64_t)a1 + v9, type metadata accessor for IDSDictionaryContextClientSchema);
    uint64_t v12 = type metadata accessor for IDSDictionaryContextClientSchema(0LL);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v11, v12);
    switch(EnumCaseMultiPayload)
    {
      case 2:
        uint64_t v71 = v12;
        __int128 v21 = v11[1];
        *uint64_t v10 = *v11;
        v10[1] = v21;
        __int128 v22 = v11[3];
        v10[2] = v11[2];
        v10[3] = v22;
        uint64_t v23 = type metadata accessor for IDSKCSharingInvitationSchema(0LL);
        uint64_t v24 = *(int *)(v23 + 32);
        uint64_t v25 = (char *)v10 + v24;
        uint64_t v26 = (char *)v11 + v24;
        uint64_t v27 = type metadata accessor for Date(0LL);
        uint64_t v28 = *(void *)(v27 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1LL, v27))
        {
          uint64_t v29 = sub_10000264C(&qword_100084248);
          memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v25, v26, v27);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0LL, 1LL, v27);
        }

        *(_OWORD *)((char *)v10 + *(int *)(v23 + 36)) = *(_OWORD *)((char *)v11 + *(int *)(v23 + 36));
        uint64_t v37 = v10;
        uint64_t v38 = v71;
        uint64_t v39 = 2LL;
        goto LABEL_24;
      case 1:
        uint64_t v72 = v12;
        *uint64_t v10 = *v11;
        uint64_t v30 = (int *)type metadata accessor for IDSHomeKitInvitationSchema(0LL);
        uint64_t v31 = v30[5];
        uint64_t v32 = (char *)v10 + v31;
        uint64_t v33 = (char *)v11 + v31;
        uint64_t v34 = type metadata accessor for Date(0LL);
        uint64_t v35 = *(void *)(v34 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1LL, v34))
        {
          uint64_t v36 = sub_10000264C(&qword_100084248);
          memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v32, v33, v34);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0LL, 1LL, v34);
        }

        *(_OWORD *)((char *)v10 + v30[6]) = *(_OWORD *)((char *)v11 + v30[6]);
        *((_BYTE *)v10 + v30[7]) = *((_BYTE *)v11 + v30[7]);
        uint64_t v40 = v30[8];
        uint64_t v41 = (char *)v10 + v40;
        uint64_t v42 = (char *)v11 + v40;
        v41[8] = v42[8];
        *(void *)uint64_t v41 = *(void *)v42;
        *((_BYTE *)v10 + v30[9]) = *((_BYTE *)v11 + v30[9]);
        *(_OWORD *)((char *)v10 + v30[10]) = *(_OWORD *)((char *)v11 + v30[10]);
        uint64_t v43 = v30[11];
        uint64_t v44 = (char *)v10 + v43;
        uint64_t v45 = (char *)v11 + v43;
        uint64_t v46 = type metadata accessor for UUID(0LL);
        uint64_t v47 = *(void *)(v46 - 8);
        uint64_t v69 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48);
        if (v69(v45, 1LL, v46))
        {
          uint64_t v48 = sub_10000264C(&qword_1000846F8);
          memcpy(v44, v45, *(void *)(*(void *)(v48 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v44, v45, v46);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(v44, 0LL, 1LL, v46);
        }

        *(_OWORD *)((char *)v10 + v30[12]) = *(_OWORD *)((char *)v11 + v30[12]);
        *(_OWORD *)((char *)v10 + v30[13]) = *(_OWORD *)((char *)v11 + v30[13]);
        uint64_t v49 = v30[14];
        uint64_t v50 = (char *)v10 + v49;
        uint64_t v51 = (char *)v11 + v49;
        if (v69((char *)v11 + v49, 1LL, v46))
        {
          uint64_t v52 = sub_10000264C(&qword_1000846F8);
          memcpy(v50, v51, *(void *)(*(void *)(v52 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v50, v51, v46);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(v50, 0LL, 1LL, v46);
        }

        *(_OWORD *)((char *)v10 + v30[15]) = *(_OWORD *)((char *)v11 + v30[15]);
        *(_OWORD *)((char *)v10 + v30[16]) = *(_OWORD *)((char *)v11 + v30[16]);
        *(_OWORD *)((char *)v10 + v30[17]) = *(_OWORD *)((char *)v11 + v30[17]);
        uint64_t v53 = v30[18];
        uint64_t v54 = (char *)v10 + v53;
        unsigned int v55 = (char *)v11 + v53;
        v54[8] = v55[8];
        *(void *)uint64_t v54 = *(void *)v55;
        uint64_t v56 = v30[19];
        uint64_t v57 = (char *)v10 + v56;
        unint64_t v58 = (char *)v11 + v56;
        v57[8] = v58[8];
        *(void *)uint64_t v57 = *(void *)v58;
        *(_OWORD *)((char *)v10 + v30[20]) = *(_OWORD *)((char *)v11 + v30[20]);
        uint64_t v37 = v10;
        uint64_t v38 = v72;
        uint64_t v39 = 1LL;
        goto LABEL_24;
      case 0:
        uint64_t v70 = v12;
        *uint64_t v10 = *v11;
        uint64_t v14 = type metadata accessor for IDSSampleInvitationSchema(0LL);
        uint64_t v15 = *(int *)(v14 + 20);
        uint64_t v16 = (char *)v10 + v15;
        uint64_t v17 = (char *)v11 + v15;
        uint64_t v18 = type metadata accessor for Date(0LL);
        uint64_t v19 = *(void *)(v18 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1LL, v18))
        {
          uint64_t v20 = sub_10000264C(&qword_100084248);
          memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v16, v17, v18);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0LL, 1LL, v18);
        }

        uint64_t v38 = v70;
        *(_OWORD *)((char *)v10 + *(int *)(v14 + 24)) = *(_OWORD *)((char *)v11 + *(int *)(v14 + 24));
        uint64_t v37 = v10;
        uint64_t v39 = 0LL;
LABEL_24:
        swift_storeEnumTagMultiPayload(v37, v38, v39);
        goto LABEL_25;
    }

    memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64LL));
  }

uint64_t getEnumTagSinglePayload for IDSInvitationSchema(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003A774);
}

uint64_t sub_10003A774(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for IDSInvitationContextSchema(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 28) + 8);
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for IDSInvitationSchema(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003A800);
}

uint64_t sub_10003A800(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for IDSInvitationContextSchema(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 28) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_10003A87C(uint64_t a1)
{
  uint64_t result = type metadata accessor for IDSInvitationContextSchema(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[2] = "\t";
    void v4[3] = &unk_10006FE50;
    swift_initStructMetadata(a1, 256LL, 4LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for IDSInvitationSchema.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_10003A950 + 4 * byte_10006FB2D[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10003A984 + 4 * byte_10006FB28[v4]))();
}

uint64_t sub_10003A984(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003A98C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10003A994LL);
  }
  return result;
}

uint64_t sub_10003A9A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10003A9A8LL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_10003A9AC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003A9B4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IDSInvitationSchema.CodingKeys()
{
  return &type metadata for IDSInvitationSchema.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for IDSInvitationContextSchema.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_10003AA1C + 4 * byte_10006FB37[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10003AA50 + 4 * byte_10006FB32[v4]))();
}

uint64_t sub_10003AA50(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003AA58(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10003AA60LL);
  }
  return result;
}

uint64_t sub_10003AA6C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10003AA74LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_10003AA78(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003AA80(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IDSInvitationContextSchema.CodingKeys()
{
  return &type metadata for IDSInvitationContextSchema.CodingKeys;
}

ValueMetadata *type metadata accessor for IDSDictionaryContextData.CodingKeys()
{
  return &type metadata for IDSDictionaryContextData.CodingKeys;
}

ValueMetadata *type metadata accessor for IDSDictionaryContextData.DictionaryContextCodingKeys()
{
  return &type metadata for IDSDictionaryContextData.DictionaryContextCodingKeys;
}

uint64_t storeEnumTagSinglePayload for IDSDictionaryContextClientSchema.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_10003AB08 + 4 * byte_10006FB41[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10003AB3C + 4 * byte_10006FB3C[v4]))();
}

uint64_t sub_10003AB3C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003AB44(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10003AB4CLL);
  }
  return result;
}

uint64_t sub_10003AB58(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10003AB60LL);
  }
  *(_BYTE *)uint64_t result = a2 + 4;
  return result;
}

uint64_t sub_10003AB64(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003AB6C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IDSDictionaryContextClientSchema.CodingKeys()
{
  return &type metadata for IDSDictionaryContextClientSchema.CodingKeys;
}

ValueMetadata *type metadata accessor for IDSDictionaryContextClientSchema.IdsSampleInvitationCodingKeys()
{
  return &type metadata for IDSDictionaryContextClientSchema.IdsSampleInvitationCodingKeys;
}

ValueMetadata *type metadata accessor for IDSDictionaryContextClientSchema.IdsHomekitInvitationCodingKeys()
{
  return &type metadata for IDSDictionaryContextClientSchema.IdsHomekitInvitationCodingKeys;
}

ValueMetadata *type metadata accessor for IDSDictionaryContextClientSchema.IdsKCSharingInvitationCodingKeys()
{
  return &type metadata for IDSDictionaryContextClientSchema.IdsKCSharingInvitationCodingKeys;
}

ValueMetadata *type metadata accessor for IDSDictionaryContextClientSchema.IdsHealthInvitationCodingKeys()
{
  return &type metadata for IDSDictionaryContextClientSchema.IdsHealthInvitationCodingKeys;
}

uint64_t getEnumTagSinglePayload for IDSMadridProtocolDeliveryContext.CodingKeys(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  else {
    int v2 = 2;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

uint64_t _s19IDSBlastDoorService24IDSInvitationContextTypeOwst_0(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_10003AC58 + 4 * byte_10006FB46[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_10003AC78 + 4 * byte_10006FB4B[v4]))();
  }
}

_BYTE *sub_10003AC58(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_10003AC78(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_10003AC80(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_10003AC88(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_10003AC90(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_10003AC98(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for IDSDictionaryContextClientSchema.IdsActivitySharingInvitationCodingKeys()
{
  return &type metadata for IDSDictionaryContextClientSchema.IdsActivitySharingInvitationCodingKeys;
}

unint64_t sub_10003ACB8()
{
  unint64_t result = qword_100084958;
  if (!qword_100084958)
  {
    unint64_t result = swift_getWitnessTable( &unk_100070018,  &type metadata for IDSDictionaryContextClientSchema.IdsActivitySharingInvitationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084958);
  }

  return result;
}

unint64_t sub_10003AD00()
{
  unint64_t result = qword_100084960;
  if (!qword_100084960)
  {
    unint64_t result = swift_getWitnessTable( &unk_1000700D0,  &type metadata for IDSDictionaryContextClientSchema.IdsHealthInvitationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084960);
  }

  return result;
}

unint64_t sub_10003AD48()
{
  unint64_t result = qword_100084968;
  if (!qword_100084968)
  {
    unint64_t result = swift_getWitnessTable( &unk_100070188,  &type metadata for IDSDictionaryContextClientSchema.IdsKCSharingInvitationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084968);
  }

  return result;
}

unint64_t sub_10003AD90()
{
  unint64_t result = qword_100084970;
  if (!qword_100084970)
  {
    unint64_t result = swift_getWitnessTable( &unk_100070240,  &type metadata for IDSDictionaryContextClientSchema.IdsHomekitInvitationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084970);
  }

  return result;
}

unint64_t sub_10003ADD8()
{
  unint64_t result = qword_100084978;
  if (!qword_100084978)
  {
    unint64_t result = swift_getWitnessTable( &unk_1000702F8,  &type metadata for IDSDictionaryContextClientSchema.IdsSampleInvitationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084978);
  }

  return result;
}

unint64_t sub_10003AE20()
{
  unint64_t result = qword_100084980;
  if (!qword_100084980)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000703B0, &type metadata for IDSDictionaryContextClientSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084980);
  }

  return result;
}

unint64_t sub_10003AE68()
{
  unint64_t result = qword_100084988;
  if (!qword_100084988)
  {
    unint64_t result = swift_getWitnessTable( &unk_100070468,  &type metadata for IDSDictionaryContextData.DictionaryContextCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084988);
  }

  return result;
}

unint64_t sub_10003AEB0()
{
  unint64_t result = qword_100084990;
  if (!qword_100084990)
  {
    unint64_t result = swift_getWitnessTable(&unk_100070520, &type metadata for IDSDictionaryContextData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084990);
  }

  return result;
}

unint64_t sub_10003AEF8()
{
  unint64_t result = qword_100084998;
  if (!qword_100084998)
  {
    unint64_t result = swift_getWitnessTable(&unk_100070610, &type metadata for IDSInvitationContextSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084998);
  }

  return result;
}

unint64_t sub_10003AF40()
{
  unint64_t result = qword_1000849A0;
  if (!qword_1000849A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100070700, &type metadata for IDSInvitationSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000849A0);
  }

  return result;
}

unint64_t sub_10003AF88()
{
  unint64_t result = qword_1000849A8;
  if (!qword_1000849A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100070638, &type metadata for IDSInvitationSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000849A8);
  }

  return result;
}

unint64_t sub_10003AFD0()
{
  unint64_t result = qword_1000849B0;
  if (!qword_1000849B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100070660, &type metadata for IDSInvitationSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000849B0);
  }

  return result;
}

unint64_t sub_10003B018()
{
  unint64_t result = qword_1000849B8;
  if (!qword_1000849B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100070548, &type metadata for IDSInvitationContextSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000849B8);
  }

  return result;
}

unint64_t sub_10003B060()
{
  unint64_t result = qword_1000849C0;
  if (!qword_1000849C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100070570, &type metadata for IDSInvitationContextSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000849C0);
  }

  return result;
}

unint64_t sub_10003B0A8()
{
  unint64_t result = qword_1000849C8;
  if (!qword_1000849C8)
  {
    unint64_t result = swift_getWitnessTable( &unk_1000703D8,  &type metadata for IDSDictionaryContextData.DictionaryContextCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000849C8);
  }

  return result;
}

unint64_t sub_10003B0F0()
{
  unint64_t result = qword_1000849D0;
  if (!qword_1000849D0)
  {
    unint64_t result = swift_getWitnessTable( &unk_100070400,  &type metadata for IDSDictionaryContextData.DictionaryContextCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000849D0);
  }

  return result;
}

unint64_t sub_10003B138()
{
  unint64_t result = qword_1000849D8;
  if (!qword_1000849D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100070490, &type metadata for IDSDictionaryContextData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000849D8);
  }

  return result;
}

unint64_t sub_10003B180()
{
  unint64_t result = qword_1000849E0;
  if (!qword_1000849E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000704B8, &type metadata for IDSDictionaryContextData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000849E0);
  }

  return result;
}

unint64_t sub_10003B1C8()
{
  unint64_t result = qword_1000849E8;
  if (!qword_1000849E8)
  {
    unint64_t result = swift_getWitnessTable( &unk_100070268,  &type metadata for IDSDictionaryContextClientSchema.IdsSampleInvitationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000849E8);
  }

  return result;
}

unint64_t sub_10003B210()
{
  unint64_t result = qword_1000849F0;
  if (!qword_1000849F0)
  {
    unint64_t result = swift_getWitnessTable( &unk_100070290,  &type metadata for IDSDictionaryContextClientSchema.IdsSampleInvitationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000849F0);
  }

  return result;
}

unint64_t sub_10003B258()
{
  unint64_t result = qword_1000849F8;
  if (!qword_1000849F8)
  {
    unint64_t result = swift_getWitnessTable( &unk_1000701B0,  &type metadata for IDSDictionaryContextClientSchema.IdsHomekitInvitationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000849F8);
  }

  return result;
}

unint64_t sub_10003B2A0()
{
  unint64_t result = qword_100084A00;
  if (!qword_100084A00)
  {
    unint64_t result = swift_getWitnessTable( &unk_1000701D8,  &type metadata for IDSDictionaryContextClientSchema.IdsHomekitInvitationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084A00);
  }

  return result;
}

unint64_t sub_10003B2E8()
{
  unint64_t result = qword_100084A08;
  if (!qword_100084A08)
  {
    unint64_t result = swift_getWitnessTable( &unk_1000700F8,  &type metadata for IDSDictionaryContextClientSchema.IdsKCSharingInvitationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084A08);
  }

  return result;
}

unint64_t sub_10003B330()
{
  unint64_t result = qword_100084A10;
  if (!qword_100084A10)
  {
    unint64_t result = swift_getWitnessTable( &unk_100070120,  &type metadata for IDSDictionaryContextClientSchema.IdsKCSharingInvitationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084A10);
  }

  return result;
}

unint64_t sub_10003B378()
{
  unint64_t result = qword_100084A18;
  if (!qword_100084A18)
  {
    unint64_t result = swift_getWitnessTable( &unk_100070040,  &type metadata for IDSDictionaryContextClientSchema.IdsHealthInvitationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084A18);
  }

  return result;
}

unint64_t sub_10003B3C0()
{
  unint64_t result = qword_100084A20;
  if (!qword_100084A20)
  {
    unint64_t result = swift_getWitnessTable( &unk_100070068,  &type metadata for IDSDictionaryContextClientSchema.IdsHealthInvitationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084A20);
  }

  return result;
}

unint64_t sub_10003B408()
{
  unint64_t result = qword_100084A28;
  if (!qword_100084A28)
  {
    unint64_t result = swift_getWitnessTable( &unk_10006FF88,  &type metadata for IDSDictionaryContextClientSchema.IdsActivitySharingInvitationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084A28);
  }

  return result;
}

unint64_t sub_10003B450()
{
  unint64_t result = qword_100084A30;
  if (!qword_100084A30)
  {
    unint64_t result = swift_getWitnessTable( &unk_10006FFB0,  &type metadata for IDSDictionaryContextClientSchema.IdsActivitySharingInvitationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084A30);
  }

  return result;
}

unint64_t sub_10003B498()
{
  unint64_t result = qword_100084A38;
  if (!qword_100084A38)
  {
    unint64_t result = swift_getWitnessTable(&unk_100070320, &type metadata for IDSDictionaryContextClientSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084A38);
  }

  return result;
}

unint64_t sub_10003B4E0()
{
  unint64_t result = qword_100084A40;
  if (!qword_100084A40)
  {
    unint64_t result = swift_getWitnessTable(&unk_100070348, &type metadata for IDSDictionaryContextClientSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084A40);
  }

  return result;
}

uint64_t sub_10003B524(uint64_t a1, unint64_t a2)
{
  if (a1 == 0xD000000000000013LL)
  {
    unint64_t v4 = 0x800000010006D8C0LL;
    if (a2 == 0x800000010006D8C0LL) {
      goto LABEL_5;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013LL, 0x800000010006D8C0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  if (a1 == 0xD000000000000014LL && a2 == 0x800000010006D8E0LL)
  {
    unint64_t v6 = 0x800000010006D8E0LL;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014LL, 0x800000010006D8E0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v6 = a2;
    goto LABEL_11;
  }

  if (a1 == 0xD000000000000016LL && a2 == 0x800000010006D900LL)
  {
    unint64_t v7 = 0x800000010006D900LL;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016LL, 0x800000010006D900LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_17;
  }

  if (a1 == 0xD000000000000013LL)
  {
    unint64_t v8 = 0x800000010006D920LL;
    if (a2 == 0x800000010006D920LL) {
      goto LABEL_22;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013LL, 0x800000010006D920LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_22:
    swift_bridgeObjectRelease(v8);
    return 3LL;
  }

  if (a1 == 0xD00000000000001CLL && a2 == 0x800000010006D940LL)
  {
    swift_bridgeObjectRelease(0x800000010006D940LL);
    return 4LL;
  }

  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001CLL, 0x800000010006D940LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0) {
      return 4LL;
    }
    else {
      return 5LL;
    }
  }

uint64_t sub_10003B710(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000011LL && a2 == 0x800000010006D960LL)
  {
    swift_bridgeObjectRelease(0x800000010006D960LL);
    char v3 = 0;
  }

  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x800000010006D960LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    char v3 = v4 ^ 1;
  }

  return v3 & 1;
}

unint64_t sub_10003B794(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10007DEA8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3) {
    return 3LL;
  }
  else {
    return v3;
  }
}

unint64_t sub_10003B7DC(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10007DF10, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4) {
    return 4LL;
  }
  else {
    return v3;
  }
}

unint64_t sub_10003B824()
{
  unint64_t result = qword_100084A48;
  if (!qword_100084A48)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IDSInvitationContextType,  &type metadata for IDSInvitationContextType);
    atomic_store(result, (unint64_t *)&qword_100084A48);
  }

  return result;
}

uint64_t IDSMadridProtocolPayload.encode(to:)(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = sub_10000264C(&qword_100084A50);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v233 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100002C78(a1, v9);
  unint64_t v11 = sub_10003DD6C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for IDSMadridProtocolPayload.CodingKeys,  &type metadata for IDSMadridProtocolPayload.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  v236[0] = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v236, v5);
  if (!v2)
  {
    uint64_t v13 = v3[1];
    uint64_t v14 = *((unsigned __int8 *)v3 + 16);
    v236[0] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v13, v14, v236, v5);
    uint64_t v15 = v3[3];
    uint64_t v16 = *((unsigned __int8 *)v3 + 32);
    v236[0] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v15, v16, v236, v5);
    sub_10003DF8C((uint64_t)(v3 + 5), (uint64_t)v278, &qword_100084158);
    sub_10003DF8C((uint64_t)v278, (uint64_t)v236, &qword_100084158);
    char v237 = 3;
    unint64_t v17 = sub_100003C08();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v236, &v237, v5, &type metadata for Data, v17);
    sub_10003DF8C((uint64_t)(v3 + 7), (uint64_t)v277, &qword_100084158);
    sub_10003DF8C((uint64_t)v277, (uint64_t)v236, &qword_100084158);
    char v237 = 4;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v236, &v237, v5, &type metadata for Data, v17);
    sub_10003DF8C((uint64_t)(v3 + 9), (uint64_t)v276, &qword_100084158);
    sub_10003DF8C((uint64_t)v276, (uint64_t)v236, &qword_100084158);
    char v237 = 5;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v236, &v237, v5, &type metadata for Data, v17);
    sub_10003DF8C((uint64_t)(v3 + 11), (uint64_t)v275, &qword_100084158);
    sub_10003DF8C((uint64_t)v275, (uint64_t)v236, &qword_100084158);
    char v237 = 6;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v236, &v237, v5, &type metadata for Data, v17);
    sub_10003DF8C((uint64_t)(v3 + 13), (uint64_t)v274, &qword_100084158);
    sub_10003DF8C((uint64_t)v274, (uint64_t)v236, &qword_100084158);
    char v237 = 7;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v236, &v237, v5, &type metadata for Data, v17);
    uint64_t v18 = v3[15];
    uint64_t v19 = v3[16];
    v236[0] = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, v236, v5);
    sub_10003DF8C((uint64_t)(v3 + 17), (uint64_t)v273, &qword_100084158);
    sub_10003DF8C((uint64_t)v273, (uint64_t)v236, &qword_100084158);
    char v237 = 9;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v236, &v237, v5, &type metadata for Data, v17);
    uint64_t v20 = v3[19];
    uint64_t v21 = v3[20];
    v236[0] = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20, v21, v236, v5);
    uint64_t v22 = *((unsigned __int8 *)v3 + 168);
    v236[0] = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v22, v236, v5);
    sub_10003DF8C((uint64_t)(v3 + 22), (uint64_t)v272, &qword_100084A60);
    sub_10003DF8C((uint64_t)v272, (uint64_t)v236, &qword_100084A60);
    char v237 = 12;
    unint64_t v23 = sub_10003DDB0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)( v236,  &v237,  v5,  &type metadata for IDSMadridProtocolDeliveryContext,  v23);
    uint64_t v24 = v3[24];
    uint64_t v25 = *((unsigned __int8 *)v3 + 200);
    v236[0] = 13;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v24, v25, v236, v5);
    sub_10003DF8C((uint64_t)(v3 + 26), (uint64_t)v271, &qword_100084158);
    sub_10003DF8C((uint64_t)v271, (uint64_t)v236, &qword_100084158);
    char v237 = 14;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v236, &v237, v5, &type metadata for Data, v17);
    uint64_t v26 = *((unsigned __int8 *)v3 + 224);
    v236[0] = 15;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v26, v236, v5);
    uint64_t v27 = *((unsigned __int8 *)v3 + 225);
    v236[0] = 16;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v27, v236, v5);
    sub_10003DF8C((uint64_t)(v3 + 29), (uint64_t)v270, &qword_100084158);
    sub_10003DF8C((uint64_t)v270, (uint64_t)v236, &qword_100084158);
    char v237 = 17;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v236, &v237, v5, &type metadata for Data, v17);
    sub_10003DF8C((uint64_t)(v3 + 31), (uint64_t)v269, &qword_100084158);
    sub_10003DF8C((uint64_t)v269, (uint64_t)v236, &qword_100084158);
    char v237 = 18;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v236, &v237, v5, &type metadata for Data, v17);
    uint64_t v28 = v3[33];
    uint64_t v29 = v3[34];
    v236[0] = 19;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v28, v29, v236, v5);
    uint64_t v30 = v3[35];
    uint64_t v31 = v3[36];
    v236[0] = 20;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v30, v31, v236, v5);
    uint64_t v32 = v3[37];
    uint64_t v33 = v3[38];
    v236[0] = 21;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v32, v33, v236, v5);
    sub_10003DF8C((uint64_t)(v3 + 39), (uint64_t)v268, &qword_100084158);
    sub_10003DF8C((uint64_t)v268, (uint64_t)v236, &qword_100084158);
    char v237 = 22;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v236, &v237, v5, &type metadata for Data, v17);
    uint64_t v34 = v3[41];
    uint64_t v235 = (unsigned __int8 *)(v3 + 42);
    uint64_t v35 = *((unsigned __int8 *)v3 + 336);
    v236[0] = 23;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v34, v35, v236, v5);
    uint64_t v36 = v3[43];
    uint64_t v37 = v3[44];
    v236[0] = 24;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v36, v37, v236, v5);
    uint64_t v38 = v3[45];
    uint64_t v39 = v3[46];
    v236[0] = 25;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v38, v39, v236, v5);
    uint64_t v40 = v3[47];
    uint64_t v41 = v3[48];
    v236[0] = 26;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v40, v41, v236, v5);
    sub_10003DF8C((uint64_t)(v3 + 49), (uint64_t)v279, &qword_100084A70);
    sub_10003DF8C((uint64_t)v279, (uint64_t)v236, &qword_100084A70);
    char v237 = 27;
    uint64_t v42 = sub_10000264C(&qword_100084A78);
    uint64_t v43 = sub_100056A88( &qword_100084A80,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    uint64_t v234 = v42;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v236, &v237, v5, v42, v43);
    sub_10003DF8C((uint64_t)(v3 + 50), (uint64_t)&v267, &qword_100084A70);
    sub_10003DF8C((uint64_t)&v267, (uint64_t)v236, &qword_100084A70);
    char v237 = 28;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v236, &v237, v5, v234, v43);
    uint64_t v44 = v3[51];
    uint64_t v45 = v3[52];
    v236[0] = 29;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v44, v45, v236, v5);
    uint64_t v46 = v3[53];
    uint64_t v47 = v3[54];
    v236[0] = 30;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v46, v47, v236, v5);
    uint64_t v48 = v3[55];
    uint64_t v49 = v235[112];
    v236[0] = 31;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v48, v49, v236, v5);
    uint64_t v50 = v3[57];
    uint64_t v51 = v235[128];
    v236[0] = 32;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v50, v51, v236, v5);
    uint64_t v52 = v3[59];
    uint64_t v53 = v3[60];
    v236[0] = 33;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v52, v53, v236, v5);
    sub_10003DF8C((uint64_t)(v3 + 61), (uint64_t)v266, &qword_100084158);
    sub_10003DF8C((uint64_t)v266, (uint64_t)v236, &qword_100084158);
    char v237 = 34;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v236, &v237, v5, &type metadata for Data, v17);
    sub_10003DF8C((uint64_t)(v3 + 63), (uint64_t)v265, &qword_100084158);
    sub_10003DF8C((uint64_t)v265, (uint64_t)v236, &qword_100084158);
    char v237 = 35;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v236, &v237, v5, &type metadata for Data, v17);
    uint64_t v54 = v3[65];
    uint64_t v55 = v235[192];
    v236[0] = 36;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v54, v55, v236, v5);
    sub_10003DF8C((uint64_t)(v3 + 67), (uint64_t)v264, &qword_100084158);
    sub_10003DF8C((uint64_t)v264, (uint64_t)v236, &qword_100084158);
    char v237 = 37;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v236, &v237, v5, &type metadata for Data, v17);
    uint64_t v56 = v3[69];
    uint64_t v57 = v3[70];
    v236[0] = 38;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v56, v57, v236, v5);
    uint64_t v58 = v3[71];
    uint64_t v59 = v3[72];
    v236[0] = 39;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v58, v59, v236, v5);
    uint64_t v60 = v3[73];
    uint64_t v61 = v3[74];
    v236[0] = 40;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v60, v61, v236, v5);
    uint64_t v62 = v3[75];
    uint64_t v63 = v235[272];
    v236[0] = 41;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v62, v63, v236, v5);
    uint64_t v64 = v3[77];
    uint64_t v65 = v235[288];
    v236[0] = 42;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v64, v65, v236, v5);
    uint64_t v66 = v3[79];
    uint64_t v67 = v235[304];
    v236[0] = 43;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v66, v67, v236, v5);
    uint64_t v68 = v3[81];
    uint64_t v69 = v235[320];
    v236[0] = 44;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v68, v69, v236, v5);
    sub_10003DF8C((uint64_t)(v3 + 83), (uint64_t)v263, &qword_100084158);
    sub_10003DF8C((uint64_t)v263, (uint64_t)v236, &qword_100084158);
    char v237 = 45;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v236, &v237, v5, &type metadata for Data, v17);
    uint64_t v70 = v3[85];
    uint64_t v71 = v3[86];
    v236[0] = 46;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v70, v71, v236, v5);
    uint64_t v72 = v3[87];
    uint64_t v73 = v235[368];
    v236[0] = 47;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v72, v73, v236, v5);
    uint64_t v74 = v3[89];
    uint64_t v75 = v235[384];
    v236[0] = 48;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v74, v75, v236, v5);
    uint64_t v76 = v3[91];
    uint64_t v77 = v3[92];
    v236[0] = 49;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v76, v77, v236, v5);
    uint64_t v78 = v3[93];
    uint64_t v79 = v235[416];
    v236[0] = 50;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v78, v79, v236, v5);
    uint64_t v80 = v3[95];
    uint64_t v81 = v3[96];
    v236[0] = 51;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v80, v81, v236, v5);
    uint64_t v82 = v3[97];
    uint64_t v83 = v235[448];
    v236[0] = 52;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v82, v83, v236, v5);
    uint64_t v84 = v3[99];
    uint64_t v85 = v235[464];
    v236[0] = 53;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v84, v85, v236, v5);
    uint64_t v86 = v3[101];
    uint64_t v87 = v235[480];
    v236[0] = 54;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v86, v87, v236, v5);
    sub_10003DF8C((uint64_t)(v3 + 103), (uint64_t)&v262, &qword_100084A88);
    sub_10003DF8C((uint64_t)&v262, (uint64_t)v236, &qword_100084A88);
    char v237 = 55;
    uint64_t v88 = sub_10000264C(&qword_100084A90);
    uint64_t v89 = sub_100056CB0( &qword_100084A98,  &qword_100084A90,  (void (*)(void))sub_10003DE38,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    uint64_t v234 = v88;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v236, &v237, v5, v88, v89);
    sub_10003DF8C((uint64_t)(v3 + 104), (uint64_t)&v261, &qword_100084A88);
    sub_10003DF8C((uint64_t)&v261, (uint64_t)v236, &qword_100084A88);
    char v237 = 56;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v236, &v237, v5, v234, v89);
    uint64_t v90 = v3[105];
    uint64_t v91 = v235[512];
    v236[0] = 57;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v90, v91, v236, v5);
    uint64_t v92 = v3[107];
    uint64_t v93 = v235[528];
    v236[0] = 58;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v92, v93, v236, v5);
    uint64_t v94 = v3[109];
    uint64_t v95 = v235[544];
    v236[0] = 59;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v94, v95, v236, v5);
    uint64_t v96 = *((unsigned __int8 *)v3 + 881);
    v236[0] = 60;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v96, v236, v5);
    uint64_t v97 = *((unsigned __int8 *)v3 + 882);
    v236[0] = 61;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v97, v236, v5);
    uint64_t v98 = *((unsigned __int8 *)v3 + 883);
    v236[0] = 62;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v98, v236, v5);
    uint64_t v99 = *((unsigned __int8 *)v3 + 884);
    v236[0] = 63;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v99, v236, v5);
    uint64_t v100 = v3[111];
    uint64_t v101 = v3[112];
    v236[0] = 64;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v100, v101, v236, v5);
    uint64_t v102 = v3[113];
    uint64_t v103 = v3[114];
    v236[0] = 65;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v102, v103, v236, v5);
    sub_10003DF8C((uint64_t)(v3 + 115), (uint64_t)v260, &qword_100084158);
    sub_10003DF8C((uint64_t)v260, (uint64_t)v236, &qword_100084158);
    char v237 = 66;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v236, &v237, v5, &type metadata for Data, v17);
    uint64_t v104 = v3[117];
    uint64_t v105 = v3[118];
    v236[0] = 67;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v104, v105, v236, v5);
    uint64_t v106 = v3[119];
    uint64_t v107 = v3[120];
    v236[0] = 68;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v106, v107, v236, v5);
    uint64_t v108 = v3[121];
    uint64_t v109 = v3[122];
    v236[0] = 69;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v108, v109, v236, v5);
    uint64_t v110 = v3[123];
    uint64_t v111 = v3[124];
    v236[0] = 70;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v110, v111, v236, v5);
    uint64_t v112 = v3[125];
    uint64_t v113 = v3[126];
    v236[0] = 71;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v112, v113, v236, v5);
    uint64_t v114 = v3[127];
    uint64_t v115 = v235[688];
    v236[0] = 72;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v114, v115, v236, v5);
    uint64_t v116 = v3[129];
    uint64_t v117 = v3[130];
    v236[0] = 73;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v116, v117, v236, v5);
    uint64_t v118 = v3[131];
    uint64_t v119 = v235[720];
    v236[0] = 74;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v118, v119, v236, v5);
    uint64_t v120 = v3[133];
    uint64_t v121 = v3[134];
    v236[0] = 75;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v120, v121, v236, v5);
    uint64_t v122 = v3[135];
    uint64_t v123 = v235[752];
    v236[0] = 76;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v122, v123, v236, v5);
    uint64_t v124 = *((unsigned __int8 *)v3 + 1089);
    v236[0] = 77;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v124, v236, v5);
    uint64_t v125 = v3[137];
    uint64_t v126 = v3[138];
    v236[0] = 78;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v125, v126, v236, v5);
    uint64_t v127 = v3[139];
    uint64_t v128 = v235[784];
    v236[0] = 79;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v127, v128, v236, v5);
    uint64_t v129 = v3[141];
    uint64_t v130 = v235[800];
    v236[0] = 80;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v129, v130, v236, v5);
    uint64_t v131 = v3[143];
    uint64_t v132 = v3[144];
    v236[0] = 81;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v131, v132, v236, v5);
    sub_10003DF8C((uint64_t)(v3 + 145), (uint64_t)v259, &qword_100084AA8);
    sub_10003DF8C((uint64_t)v259, (uint64_t)v236, &qword_100084AA8);
    char v237 = 82;
    unint64_t v133 = sub_10003DE7C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)( v236,  &v237,  v5,  &type metadata for IDSMadridProtocolHttpHeaders,  v133);
    sub_10003DF8C((uint64_t)(v3 + 157), (uint64_t)v258, &qword_100084158);
    sub_10003DF8C((uint64_t)v258, (uint64_t)v236, &qword_100084158);
    char v237 = 83;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v236, &v237, v5, &type metadata for Data, v17);
    uint64_t v134 = v3[159];
    uint64_t v135 = v3[160];
    v236[0] = 84;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v134, v135, v236, v5);
    sub_10003DF8C((uint64_t)(v3 + 161), (uint64_t)v257, &qword_100084158);
    sub_10003DF8C((uint64_t)v257, (uint64_t)v236, &qword_100084158);
    char v237 = 85;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v236, &v237, v5, &type metadata for Data, v17);
    uint64_t v136 = v3[163];
    uint64_t v137 = v235[976];
    v236[0] = 86;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v136, v137, v236, v5);
    uint64_t v138 = v3[165];
    uint64_t v139 = v3[166];
    v236[0] = 87;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v138, v139, v236, v5);
    uint64_t v140 = *((unsigned __int8 *)v3 + 1336);
    v236[0] = 88;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v140, v236, v5);
    uint64_t v141 = *((unsigned __int8 *)v3 + 1337);
    v236[0] = 89;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v141, v236, v5);
    uint64_t v142 = *((unsigned __int8 *)v3 + 1338);
    v236[0] = 90;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v142, v236, v5);
    uint64_t v143 = v3[168];
    uint64_t v144 = v235[1016];
    v236[0] = 91;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v143, v144, v236, v5);
    uint64_t v145 = v3[170];
    uint64_t v146 = v3[171];
    v236[0] = 92;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v145, v146, v236, v5);
    sub_10003DF8C((uint64_t)(v3 + 172), (uint64_t)v256, &qword_100084158);
    sub_10003DF8C((uint64_t)v256, (uint64_t)v236, &qword_100084158);
    char v237 = 93;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v236, &v237, v5, &type metadata for Data, v17);
    sub_10003DF8C((uint64_t)(v3 + 174), (uint64_t)v255, &qword_100084158);
    sub_10003DF8C((uint64_t)v255, (uint64_t)v236, &qword_100084158);
    char v237 = 94;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v236, &v237, v5, &type metadata for Data, v17);
    uint64_t v147 = v3[176];
    uint64_t v148 = v235[1080];
    v236[0] = 95;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v147, v148, v236, v5);
    uint64_t v149 = *((unsigned __int8 *)v3 + 1417);
    v236[0] = 96;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v149, v236, v5);
    uint64_t v150 = *((unsigned __int8 *)v3 + 1418);
    v236[0] = 97;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v150, v236, v5);
    uint64_t v151 = v3[178];
    uint64_t v152 = v235[1096];
    v236[0] = 98;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v151, v152, v236, v5);
    uint64_t v153 = v3[180];
    uint64_t v154 = v235[1112];
    v236[0] = 99;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v153, v154, v236, v5);
    uint64_t v155 = *((unsigned __int8 *)v3 + 1449);
    v236[0] = 100;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v155, v236, v5);
    uint64_t v156 = v3[182];
    uint64_t v157 = v235[1128];
    v236[0] = 101;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v156, v157, v236, v5);
    uint64_t v158 = v3[184];
    uint64_t v159 = v235[1144];
    v236[0] = 102;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v158, v159, v236, v5);
    uint64_t v160 = v3[186];
    uint64_t v161 = v3[187];
    v236[0] = 103;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v160, v161, v236, v5);
    uint64_t v162 = v3[188];
    uint64_t v163 = v235[1176];
    v236[0] = 104;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v162, v163, v236, v5);
    uint64_t v164 = v3[190];
    uint64_t v165 = v235[1192];
    v236[0] = 105;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v164, v165, v236, v5);
    sub_10003DF8C((uint64_t)(v3 + 192), (uint64_t)v254, &qword_100084158);
    sub_10003DF8C((uint64_t)v254, (uint64_t)v236, &qword_100084158);
    char v237 = 106;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v236, &v237, v5, &type metadata for Data, v17);
    sub_10003DF8C((uint64_t)(v3 + 194), (uint64_t)v253, &qword_100084158);
    sub_10003DF8C((uint64_t)v253, (uint64_t)v236, &qword_100084158);
    char v237 = 107;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v236, &v237, v5, &type metadata for Data, v17);
    uint64_t v166 = v3[196];
    uint64_t v167 = v235[1240];
    v236[0] = 108;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v166, v167, v236, v5);
    sub_10003DF8C((uint64_t)(v3 + 198), (uint64_t)v252, &qword_100084158);
    sub_10003DF8C((uint64_t)v252, (uint64_t)v236, &qword_100084158);
    char v237 = 109;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v236, &v237, v5, &type metadata for Data, v17);
    sub_10003DF8C((uint64_t)(v3 + 200), (uint64_t)v251, &qword_100084158);
    sub_10003DF8C((uint64_t)v251, (uint64_t)v236, &qword_100084158);
    char v237 = 110;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v236, &v237, v5, &type metadata for Data, v17);
    uint64_t v168 = v3[202];
    uint64_t v169 = v235[1288];
    v236[0] = 111;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v168, v169, v236, v5);
    uint64_t v170 = v3[204];
    uint64_t v171 = v235[1304];
    v236[0] = 112;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v170, v171, v236, v5);
    sub_10003DF8C((uint64_t)(v3 + 206), (uint64_t)&v250, &qword_100084AB8);
    sub_10003DF8C((uint64_t)&v250, (uint64_t)v236, &qword_100084AB8);
    char v237 = 113;
    uint64_t v172 = sub_10000264C(&qword_100084AC0);
    uint64_t v173 = sub_100056CB0( &qword_100084AC8,  &qword_100084AC0,  (void (*)(void))sub_10003DEC0,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v236, &v237, v5, v172, v173);
    uint64_t v174 = v3[207];
    uint64_t v175 = v3[208];
    v236[0] = 114;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v174, v175, v236, v5);
    uint64_t v176 = v3[209];
    uint64_t v177 = v3[210];
    v236[0] = 115;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v176, v177, v236, v5);
    uint64_t v178 = v3[211];
    uint64_t v179 = v235[1360];
    v236[0] = 116;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v178, v179, v236, v5);
    uint64_t v180 = *((unsigned __int8 *)v3 + 1697);
    v236[0] = 117;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v180, v236, v5);
    uint64_t v181 = *((unsigned __int8 *)v3 + 1698);
    v236[0] = 118;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v181, v236, v5);
    uint64_t v182 = v3[213];
    uint64_t v183 = v235[1376];
    v236[0] = 119;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v182, v183, v236, v5);
    sub_10003DF8C((uint64_t)(v3 + 215), (uint64_t)v249, &qword_100084158);
    sub_10003DF8C((uint64_t)v249, (uint64_t)v236, &qword_100084158);
    char v237 = 120;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v236, &v237, v5, &type metadata for Data, v17);
    uint64_t v184 = v3[217];
    uint64_t v185 = v235[1408];
    v236[0] = 121;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v184, v185, v236, v5);
    uint64_t v186 = *((unsigned __int8 *)v3 + 1745);
    v236[0] = 122;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v186, v236, v5);
    uint64_t v187 = v3[219];
    uint64_t v188 = v3[220];
    v236[0] = 123;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v187, v188, v236, v5);
    uint64_t v189 = v3[221];
    uint64_t v190 = v235[1440];
    v236[0] = 124;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v189, v190, v236, v5);
    uint64_t v191 = v3[223];
    uint64_t v192 = v235[1456];
    v236[0] = 125;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v191, v192, v236, v5);
    sub_10003DF8C((uint64_t)(v3 + 225), (uint64_t)v248, &qword_100084158);
    sub_10003DF8C((uint64_t)v248, (uint64_t)v236, &qword_100084158);
    char v237 = 126;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v236, &v237, v5, &type metadata for Data, v17);
    sub_10003DF8C((uint64_t)(v3 + 227), (uint64_t)v247, &qword_100084158);
    sub_10003DF8C((uint64_t)v247, (uint64_t)v236, &qword_100084158);
    char v237 = 127;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v236, &v237, v5, &type metadata for Data, v17);
    uint64_t v193 = v3[229];
    uint64_t v194 = v235[1504];
    v236[0] = 0x80;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v193, v194, v236, v5);
    sub_10003DF8C((uint64_t)(v3 + 231), (uint64_t)v246, &qword_100084158);
    sub_10003DF8C((uint64_t)v246, (uint64_t)v236, &qword_100084158);
    char v237 = -127;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v236, &v237, v5, &type metadata for Data, v17);
    sub_10003DF8C((uint64_t)(v3 + 233), (uint64_t)v245, &qword_100084158);
    sub_10003DF8C((uint64_t)v245, (uint64_t)v236, &qword_100084158);
    char v237 = -126;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v236, &v237, v5, &type metadata for Data, v17);
    sub_10003DF8C((uint64_t)(v3 + 235), (uint64_t)v244, &qword_100084158);
    sub_10003DF8C((uint64_t)v244, (uint64_t)v236, &qword_100084158);
    char v237 = -125;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v236, &v237, v5, &type metadata for Data, v17);
    uint64_t v195 = v3[237];
    uint64_t v196 = v235[1568];
    v236[0] = -124;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v195, v196, v236, v5);
    sub_10003DF8C((uint64_t)(v3 + 239), (uint64_t)v243, &qword_100084158);
    sub_10003DF8C((uint64_t)v243, (uint64_t)v236, &qword_100084158);
    char v237 = -123;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v236, &v237, v5, &type metadata for Data, v17);
    uint64_t v197 = v3[241];
    uint64_t v198 = v235[1600];
    v236[0] = -122;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v197, v198, v236, v5);
    sub_10003DF8C((uint64_t)(v3 + 243), (uint64_t)v242, &qword_100084158);
    sub_10003DF8C((uint64_t)v242, (uint64_t)v236, &qword_100084158);
    char v237 = -121;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v236, &v237, v5, &type metadata for Data, v17);
    uint64_t v199 = v3[245];
    uint64_t v200 = v3[246];
    v236[0] = -120;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v199, v200, v236, v5);
    uint64_t v201 = v3[247];
    uint64_t v202 = v235[1648];
    v236[0] = -119;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v201, v202, v236, v5);
    uint64_t v203 = v3[249];
    uint64_t v204 = v235[1664];
    v236[0] = -118;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v203, v204, v236, v5);
    uint64_t v205 = v3[251];
    uint64_t v206 = v235[1680];
    v236[0] = -117;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v205, v206, v236, v5);
    uint64_t v207 = v3[253];
    uint64_t v208 = v235[1696];
    v236[0] = -116;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v207, v208, v236, v5);
    sub_10003DF8C((uint64_t)(v3 + 255), (uint64_t)&v241, &qword_100084AD8);
    sub_10003DF8C((uint64_t)&v241, (uint64_t)v236, &qword_100084AD8);
    char v237 = -115;
    uint64_t v209 = sub_10000264C(&qword_100084AE0);
    uint64_t v210 = sub_100056CB0( &qword_100084AE8,  &qword_100084AE0,  (void (*)(void))sub_10003DF04,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v236, &v237, v5, v209, v210);
    sub_10003DF8C((uint64_t)(v3 + 256), (uint64_t)&v240, &qword_100084AF8);
    sub_10003DF8C((uint64_t)&v240, (uint64_t)v236, &qword_100084AF8);
    char v237 = -114;
    uint64_t v211 = sub_10000264C(&qword_100084B00);
    uint64_t v212 = sub_100056CB0( &qword_100084B08,  &qword_100084B00,  (void (*)(void))sub_10003DF48,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v236, &v237, v5, v211, v212);
    sub_10003DF8C((uint64_t)(v3 + 257), (uint64_t)v239, &qword_100084158);
    sub_10003DF8C((uint64_t)v239, (uint64_t)v236, &qword_100084158);
    char v237 = -113;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v236, &v237, v5, &type metadata for Data, v17);
    uint64_t v213 = v3[259];
    uint64_t v214 = v235[1744];
    v236[0] = -112;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v213, v214, v236, v5);
    sub_10003DF8C((uint64_t)(v3 + 261), (uint64_t)&v238, &qword_100084B18);
    sub_10003DF8C((uint64_t)&v238, (uint64_t)v236, &qword_100084B18);
    char v237 = -111;
    uint64_t v215 = sub_10000264C(&qword_100084B20);
    uint64_t v216 = sub_100056CB0( &qword_100084B28,  &qword_100084B20,  (void (*)(void))sub_10003DFD0,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v236, &v237, v5, v215, v216);
    uint64_t v217 = v3[262];
    uint64_t v218 = v235[1768];
    v236[0] = -110;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v217, v218, v236, v5);
    uint64_t v219 = v3[264];
    uint64_t v220 = v235[1784];
    v236[0] = -109;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v219, v220, v236, v5);
    uint64_t v221 = *((unsigned __int8 *)v3 + 2121);
    v236[0] = -108;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v221, v236, v5);
    uint64_t v222 = *((unsigned __int8 *)v3 + 2122);
    v236[0] = -107;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v222, v236, v5);
    uint64_t v223 = v3[266];
    uint64_t v224 = v3[267];
    v236[0] = -106;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v223, v224, v236, v5);
    uint64_t v225 = *((unsigned __int8 *)v3 + 2144);
    v236[0] = -105;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v225, v236, v5);
    uint64_t v226 = v3[269];
    uint64_t v227 = v235[1824];
    v236[0] = -104;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v226, v227, v236, v5);
    uint64_t v228 = v3[271];
    uint64_t v229 = v235[1840];
    v236[0] = -103;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v228, v229, v236, v5);
    uint64_t v230 = *((unsigned __int8 *)v3 + 2177);
    v236[0] = -102;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v230, v236, v5);
    uint64_t v231 = *((unsigned __int8 *)v3 + 2178);
    v236[0] = -101;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v231, v236, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_10003DD6C()
{
  unint64_t result = qword_100084A58;
  if (!qword_100084A58)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000718DC, &type metadata for IDSMadridProtocolPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084A58);
  }

  return result;
}

unint64_t sub_10003DDB0()
{
  unint64_t result = qword_100084A68;
  if (!qword_100084A68)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IDSMadridProtocolDeliveryContext,  &type metadata for IDSMadridProtocolDeliveryContext);
    atomic_store(result, (unint64_t *)&qword_100084A68);
  }

  return result;
}

uint64_t sub_10003DDF4(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2( 255LL,  (char *)a1 + (int)result,  -(result >> 32),  0LL,  0LL);
    *a1 = result;
  }

  return result;
}

unint64_t sub_10003DE38()
{
  unint64_t result = qword_100084AA0;
  if (!qword_100084AA0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IDSMadridProtocolPayload,  &type metadata for IDSMadridProtocolPayload);
    atomic_store(result, (unint64_t *)&qword_100084AA0);
  }

  return result;
}

unint64_t sub_10003DE7C()
{
  unint64_t result = qword_100084AB0;
  if (!qword_100084AB0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IDSMadridProtocolHttpHeaders,  &type metadata for IDSMadridProtocolHttpHeaders);
    atomic_store(result, (unint64_t *)&qword_100084AB0);
  }

  return result;
}

unint64_t sub_10003DEC0()
{
  unint64_t result = qword_100084AD0;
  if (!qword_100084AD0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IDSQuickRelayPluginRequest,  &type metadata for IDSQuickRelayPluginRequest);
    atomic_store(result, (unint64_t *)&qword_100084AD0);
  }

  return result;
}

unint64_t sub_10003DF04()
{
  unint64_t result = qword_100084AF0;
  if (!qword_100084AF0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IDSQuickRelayAllocationStatus,  &type metadata for IDSQuickRelayAllocationStatus);
    atomic_store(result, (unint64_t *)&qword_100084AF0);
  }

  return result;
}

unint64_t sub_10003DF48()
{
  unint64_t result = qword_100084B10;
  if (!qword_100084B10)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IDSQuickRelaySelfAllocToken,  &type metadata for IDSQuickRelaySelfAllocToken);
    atomic_store(result, (unint64_t *)&qword_100084B10);
  }

  return result;
}

uint64_t sub_10003DF8C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10000264C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

unint64_t sub_10003DFD0()
{
  unint64_t result = qword_100084B30;
  if (!qword_100084B30)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IDSQuickRelayPluginAllocation,  &type metadata for IDSQuickRelayPluginAllocation);
    atomic_store(result, (unint64_t *)&qword_100084B30);
  }

  return result;
}

void *IDSMadridProtocolPayload.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  unint64_t result = sub_100040A2C(a1, __src);
  if (!v2) {
    return memcpy(a2, __src, 0x883uLL);
  }
  return result;
}

uint64_t sub_10003E064(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10003E08C + 4 * word_100070A70[a1]))( 99LL,  0xE100000000000000LL);
}

uint64_t sub_10003E08C()
{
  return 25443LL;
}

uint64_t sub_10003E098()
{
  return 118LL;
}

uint64_t sub_10003E0A0()
{
  return 80LL;
}

uint64_t sub_10003E0A8()
{
  return 78LL;
}

uint64_t sub_10003E0B0()
{
  return 20582LL;
}

uint64_t sub_10003E0BC()
{
  return 20577LL;
}

uint64_t sub_10003E0C8()
{
  return 27984LL;
}

uint64_t sub_10003E0D4()
{
  return 105LL;
}

uint64_t sub_10003E0DC()
{
  return 85LL;
}

uint64_t sub_10003E0E4()
{
  return 18801LL;
}

uint64_t sub_10003E0F0()
{
  return 68LL;
}

uint64_t sub_10003E0F8()
{
  return 25412LL;
}

uint64_t sub_10003E104()
{
  return 7758947LL;
}

uint64_t sub_10003E118()
{
  return 7496803LL;
}

uint64_t sub_10003E128()
{
  return 29294LL;
}

uint64_t sub_10003E134()
{
  return 25703LL;
}

uint64_t sub_10003E140()
{
  return 21619LL;
}

uint64_t sub_10003E14C()
{
  return 21608LL;
}

uint64_t sub_10003E158()
{
  return 20596LL;
}

uint64_t sub_10003E164()
{
  return 24949LL;
}

uint64_t sub_10003E170()
{
  return 20333LL;
}

uint64_t sub_10003E17C()
{
  return 21357LL;
}

uint64_t sub_10003E188()
{
  return 19565LL;
}

uint64_t sub_10003E194()
{
  return 16749LL;
}

uint64_t sub_10003E1A0()
{
  return 21101LL;
}

uint64_t sub_10003E1AC()
{
  return 21869LL;
}

uint64_t sub_10003E1B8()
{
  return 7102820LL;
}

uint64_t sub_10003E1C8()
{
  return 7107940LL;
}

uint64_t sub_10003E1DC()
{
  return 21092LL;
}

uint64_t sub_10003E1E8()
{
  return 21109LL;
}

uint64_t sub_10003E1F4()
{
  return 22637LL;
}

uint64_t sub_10003E200()
{
  return 22115LL;
}

uint64_t sub_10003E20C()
{
  return 18531LL;
}

uint64_t sub_10003E218()
{
  return 16995LL;
}

uint64_t sub_10003E224()
{
  return 21091LL;
}

uint64_t sub_10003E230()
{
  return 21613LL;
}

uint64_t sub_10003E23C()
{
  return 116LL;
}

uint64_t sub_10003E244()
{
  return 20595LL;
}

uint64_t sub_10003E250()
{
  return 18803LL;
}

uint64_t sub_10003E25C()
{
  return 20589LL;
}

uint64_t sub_10003E268()
{
  return 115LL;
}

uint64_t sub_10003E270()
{
  return 101LL;
}

uint64_t sub_10003E278()
{
  return 25967LL;
}

uint64_t sub_10003E284()
{
  return 21094LL;
}

uint64_t sub_10003E290()
{
  return 21862LL;
}

uint64_t sub_10003E29C()
{
  return 19814LL;
}

uint64_t sub_10003E2A8()
{
  return 5457510LL;
}

uint64_t sub_10003E2B8()
{
  return 21350LL;
}

uint64_t sub_10003E2C4()
{
  return 5067366LL;
}

uint64_t sub_10003E2D4()
{
  return 4543590LL;
}

uint64_t sub_10003E2E4()
{
  return 69LL;
}

uint64_t sub_10003E2EC()
{
  return 72LL;
}

uint64_t sub_10003E2F4()
{
  return 6910576LL;
}

uint64_t sub_10003E304()
{
  return 7037793LL;
}

uint64_t sub_10003E314()
{
  return 7107684LL;
}

uint64_t sub_10003E328()
{
  return 7105901LL;
}

uint64_t sub_10003E818()
{
  return 6910577LL;
}

uint64_t sub_10003E82C()
{
  return 1987539825LL;
}

uint64_t sub_10003E83C()
{
  return 1986163313LL;
}

uint64_t sub_10003E84C()
{
  return 0x7070687271LL;
}

uint64_t sub_10003E860()
{
  return 1886415217LL;
}

uint64_t sub_10003E870()
{
  return 1952543601LL;
}

uint64_t sub_10003E880()
{
  return 7565937LL;
}

uint64_t sub_10003E894()
{
  return 7102833LL;
}

uint64_t sub_10003E8A8()
{
  return 0x7674617371LL;
}

uint64_t sub_10003E8BC()
{
  return 1885696625LL;
}

uint64_t sub_10003E8CC()
{
  return 0x7473617271LL;
}

uint64_t sub_10003E8E0()
{
  return 1634496625LL;
}

uint64_t sub_10003E8F0()
{
  return 6514033LL;
}

uint64_t sub_10003E900()
{
  return 17263LL;
}

uint64_t sub_10003E90C()
{
  return 17001LL;
}

uint64_t sub_10003E918()
{
  return 16759LL;
}

uint64_t sub_10003E924()
{
  return 17509LL;
}

uint64_t sub_10003E930()
{
  return 21093LL;
}

uint64_t sub_10003E93C()
{
  return 7496807LL;
}

uint64_t sub_10003E950()
{
  return 28019LL;
}

uint64_t sub_10003E95C()
{
  return 7697512LL;
}

void sub_10003E96C()
{
}

uint64_t sub_10003E98C(void *a1)
{
  return IDSMadridProtocolPayload.encode(to:)(a1);
}

uint64_t sub_10003E9DC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2 = *a2;
  uint64_t v3 = sub_10003E064(*a1);
  uint64_t v5 = v4;
  uint64_t v6 = sub_10003E064(v2);
  if (v3 == v6 && v5 == v7)
  {
    char v10 = 1;
    uint64_t v9 = v5;
  }

  else
  {
    uint64_t v9 = v7;
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
  }

  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

Swift::Int sub_10003EA64()
{
  unsigned __int8 v1 = *v0;
  Hasher.init(_seed:)(v6, 0LL);
  uint64_t v2 = sub_10003E064(v1);
  uint64_t v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_10003EAC4(uint64_t a1)
{
  uint64_t v3 = sub_10003E064(*v1);
  uint64_t v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_10003EB04(uint64_t a1)
{
  unsigned __int8 v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  uint64_t v3 = sub_10003E064(v2);
  uint64_t v5 = v4;
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_10003EB60@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10004EA34(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_10003EB8C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10003E064(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10003EBB4()
{
  return sub_10003E064(*v0);
}

uint64_t sub_10003EBBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10004EA34(a1, a2);
  *a3 = result;
  return result;
}

void sub_10003EBE0(_BYTE *a1@<X8>)
{
  *a1 = -100;
}

uint64_t sub_10003EBEC(uint64_t a1)
{
  unint64_t v2 = sub_10003DD6C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10003EC14(uint64_t a1)
{
  unint64_t v2 = sub_10003DD6C();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10003EC3C(char *a1)
{
}

void sub_10003EC48()
{
}

void sub_10003EC50(uint64_t a1)
{
}

void sub_10003EC58(uint64_t a1)
{
}

unint64_t sub_10003EC60@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10004EEA8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10003EC8C()
{
  return ((uint64_t (*)(void))((char *)sub_10003ECB0 + 4 * byte_100070BA8[*v0]))();
}

void sub_10003ECB0(void *a1@<X8>)
{
  *a1 = 26994LL;
  a1[1] = v1;
}

void sub_10003ECBC(void *a1@<X8>)
{
  *a1 = 0xD000000000000019LL;
  a1[1] = 0x800000010006D200LL;
}

void sub_10003ECDC(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_10003ED00(void *a1@<X8>)
{
  *a1 = 26739LL;
  a1[1] = v1;
}

void sub_10003ED0C(void *a1@<X8>)
{
  *a1 = 29537LL;
  a1[1] = v1;
}

uint64_t sub_10003ED18()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10003ED3C + 4 * byte_100070BAE[*v0]))( 21345LL,  0xE200000000000000LL);
}

uint64_t sub_10003ED3C()
{
  return 26994LL;
}

unint64_t sub_10003ED44()
{
  return 0xD000000000000019LL;
}

uint64_t sub_10003ED60()
{
  return 0x6172742D33622D78LL;
}

uint64_t sub_10003ED80()
{
  return 26739LL;
}

uint64_t sub_10003ED88()
{
  return 29537LL;
}

unint64_t sub_10003ED90@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10004EEA8(a1);
  *a2 = result;
  return result;
}

void sub_10003EDB4(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_10003EDC0(uint64_t a1)
{
  unint64_t v2 = sub_10004E9F0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10003EDE8(uint64_t a1)
{
  unint64_t v2 = sub_10004E9F0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IDSMadridProtocolHttpHeaders.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000264C(&qword_100084B38);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100002C78(a1, v9);
  unint64_t v11 = sub_10004E9F0();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for IDSMadridProtocolHttpHeaders.CodingKeys,  &type metadata for IDSMadridProtocolHttpHeaders.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = v3[1];
  char v31 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, &v31, v5);
  if (!v2)
  {
    uint64_t v14 = v3[2];
    uint64_t v15 = v3[3];
    char v30 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, &v30, v5);
    uint64_t v16 = v3[4];
    uint64_t v17 = v3[5];
    char v29 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, &v29, v5);
    uint64_t v18 = v3[6];
    uint64_t v19 = v3[7];
    char v28 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, &v28, v5);
    uint64_t v20 = v3[8];
    uint64_t v21 = v3[9];
    char v27 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20, v21, &v27, v5);
    uint64_t v22 = v3[10];
    uint64_t v23 = v3[11];
    char v26 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v22, v23, &v26, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

double IDSMadridProtocolHttpHeaders.init(from:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v8[3];
    a2[2] = v8[2];
    a2[3] = v5;
    __int128 v6 = v8[5];
    a2[4] = v8[4];
    a2[5] = v6;
    double result = *(double *)v8;
    __int128 v7 = v8[1];
    *a2 = v8[0];
    a2[1] = v7;
  }

  return result;
}

uint64_t sub_10003F00C(void *a1)
{
  return IDSMadridProtocolHttpHeaders.encode(to:)(a1);
}

Swift::Int sub_10003F020()
{
  return Hasher._finalize()();
}

uint64_t sub_10003F064(uint64_t a1)
{
  return String.hash(into:)(a1, 99LL, 0xE100000000000000LL);
}

Swift::Int sub_10003F070(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_10003F0B0@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  v3._countAndFlagsBits = *a1;
  uint64_t v4 = (void *)a1[1];
  v3._object = v4;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10007EF00, v3);
  uint64_t result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

void sub_10003F100(void *a1@<X8>)
{
  *a1 = 99LL;
  a1[1] = 0xE100000000000000LL;
}

uint64_t sub_10003F110()
{
  return 99LL;
}

uint64_t sub_10003F11C@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10007EF38, v3);
  uint64_t result = swift_bridgeObjectRelease(object);
  *a2 = v5 != 0;
  return result;
}

uint64_t sub_10003F170(uint64_t a1)
{
  unint64_t v2 = sub_10004F300();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10003F198(uint64_t a1)
{
  unint64_t v2 = sub_10004F300();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IDSMadridProtocolDeliveryContext.encode(to:)(void *a1, uint64_t a2, char a3)
{
  uint64_t v5 = a3 & 1;
  uint64_t v6 = sub_10000264C(&qword_100084B48);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_100002C78(a1, v10);
  unint64_t v12 = sub_10004F300();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for IDSMadridProtocolDeliveryContext.CodingKeys,  &type metadata for IDSMadridProtocolDeliveryContext.CodingKeys,  v12,  v10,  v11);
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a2, v5, v13, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

void *IDSMadridProtocolDeliveryContext.init(from:)(void *a1)
{
  uint64_t v3 = sub_10000264C(&qword_100084B58);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v9 = sub_100002C78(a1, v7);
  unint64_t v10 = sub_10004F300();
  uint64_t v11 = dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for IDSMadridProtocolDeliveryContext.CodingKeys,  &type metadata for IDSMadridProtocolDeliveryContext.CodingKeys,  v10,  v7,  v8);
  if (!v1)
  {
    uint64_t v9 = (void *)KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v11, v3);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }

  sub_100002FD4(a1);
  return v9;
}

uint64_t sub_10003F3CC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000264C(&qword_100084B58);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100002C78(a1, v9);
  unint64_t v11 = sub_10004F300();
  uint64_t v12 = dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for IDSMadridProtocolDeliveryContext.CodingKeys,  &type metadata for IDSMadridProtocolDeliveryContext.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return sub_100002FD4(a1);
  }
  uint64_t v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v12, v5);
  char v15 = v14;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = sub_100002FD4(a1);
  *(void *)a2 = v13;
  *(_BYTE *)(a2 + 8) = v15 & 1;
  return result;
}

uint64_t sub_10003F4F8(void *a1)
{
  uint64_t v3 = sub_10000264C(&qword_100084B48);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *v1;
  uint64_t v8 = *((unsigned __int8 *)v1 + 8);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100002C78(a1, v9);
  unint64_t v11 = sub_10004F300();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for IDSMadridProtocolDeliveryContext.CodingKeys,  &type metadata for IDSMadridProtocolDeliveryContext.CodingKeys,  v11,  v9,  v10);
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v7, v8, v12, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_10003F5E8(char *a1, char *a2)
{
  return sub_1000606F0(*a1, *a2);
}

Swift::Int sub_10003F5F4()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  String.hash(into:)(v3, *(void *)&aQpln_0[8 * v1], 0xE400000000000000LL);
  swift_bridgeObjectRelease(0xE400000000000000LL);
  return Hasher._finalize()();
}

uint64_t sub_10003F64C(uint64_t a1)
{
  return swift_bridgeObjectRelease(0xE400000000000000LL);
}

Swift::Int sub_10003F678(uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  String.hash(into:)(v4, *(void *)&aQpln_0[8 * v2], 0xE400000000000000LL);
  swift_bridgeObjectRelease(0xE400000000000000LL);
  return Hasher._finalize()();
}

unint64_t sub_10003F6CC@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  v3._rawValue = &off_10007EF70;
  unint64_t result = sub_10004F630(*a1, v3);
  *a2 = result;
  return result;
}

void sub_10003F700(void *a1@<X8>)
{
  *a1 = *(void *)&aQpln_0[8 * *v1];
  a1[1] = 0xE400000000000000LL;
}

uint64_t sub_10003F71C()
{
  return *(void *)&aQpln_0[8 * *v0];
}

unint64_t sub_10003F734@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  v3._rawValue = &off_10007EF70;
  unint64_t result = sub_10004F630(a1, v3);
  *a2 = result;
  return result;
}

uint64_t sub_10003F760(uint64_t a1)
{
  unint64_t v2 = sub_10004F344();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10003F788(uint64_t a1)
{
  unint64_t v2 = sub_10004F344();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IDSQuickRelayPluginRequest.encode(to:)(void *a1)
{
  Swift::OpaquePointer v3 = v1;
  uint64_t v5 = sub_10000264C(&qword_100084B60);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100002C78(a1, v9);
  unint64_t v11 = sub_10004F344();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for IDSQuickRelayPluginRequest.CodingKeys,  &type metadata for IDSQuickRelayPluginRequest.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = v3[1];
  char v24 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, &v24, v5);
  if (!v2)
  {
    uint64_t v14 = v3[2];
    uint64_t v15 = v3[3];
    char v23 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, &v23, v5);
    uint64_t v16 = v3[4];
    uint64_t v17 = *((unsigned __int8 *)v3 + 40);
    char v22 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, &v22, v5);
    uint64_t v18 = *((unsigned __int8 *)v3 + 41);
    char v21 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, &v21, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

double IDSQuickRelayPluginRequest.init(from:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v7[0];
    *a2 = v6;
    a2[1] = v5;
    double result = *(double *)((char *)v7 + 10);
    *(_OWORD *)((char *)a2 + 26) = *(_OWORD *)((char *)v7 + 10);
  }

  return result;
}

uint64_t sub_10003F958(void *a1)
{
  return IDSQuickRelayPluginRequest.encode(to:)(a1);
}

void sub_10003F96C(char *a1)
{
}

void sub_10003F978()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v2, 0LL);
  __asm { BR              X9 }

Swift::Int sub_10003F9C0()
{
  return Hasher._finalize()();
}

void sub_10003FA10()
{
  __asm { BR              X10 }

uint64_t sub_10003FA44(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(v2);
}

void sub_10003FA78(uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }

Swift::Int sub_10003FABC()
{
  return Hasher._finalize()();
}

unint64_t sub_10003FB0C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  v3._rawValue = &off_10007EFF0;
  unint64_t result = sub_10004F630(*a1, v3);
  *a2 = result;
  return result;
}

uint64_t sub_10003FB40()
{
  return ((uint64_t (*)(void))((char *)sub_10003FB68 + 4 * byte_100070BC0[*v0]))();
}

void sub_10003FB68(void *a1@<X8>)
{
  *a1 = v1 + 655360;
  a1[1] = v2;
}

void sub_10003FB74(void *a1@<X8>)
{
  *a1 = 116LL;
  a1[1] = 0xE100000000000000LL;
}

void sub_10003FB84(void *a1@<X8>)
{
  *a1 = 20596LL;
  a1[1] = 0xE200000000000000LL;
}

uint64_t sub_10003FB94()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10003FBBC + 4 * byte_100070BC4[*v0]))( 6910577LL,  0xE300000000000000LL);
}

uint64_t sub_10003FBBC(uint64_t a1)
{
  return a1 + 655360;
}

uint64_t sub_10003FBC4()
{
  return 116LL;
}

uint64_t sub_10003FBD0()
{
  return 20596LL;
}

unint64_t sub_10003FBDC@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  v3._rawValue = &off_10007EFF0;
  unint64_t result = sub_10004F630(a1, v3);
  *a2 = result;
  return result;
}

uint64_t sub_10003FC08(uint64_t a1)
{
  unint64_t v2 = sub_10004F5EC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10003FC30(uint64_t a1)
{
  unint64_t v2 = sub_10004F5EC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IDSQuickRelayAllocationStatus.encode(to:)(void *a1)
{
  Swift::OpaquePointer v3 = v1;
  uint64_t v5 = sub_10000264C(&qword_100084B70);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100002C78(a1, v9);
  unint64_t v11 = sub_10004F5EC();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for IDSQuickRelayAllocationStatus.CodingKeys,  &type metadata for IDSQuickRelayAllocationStatus.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = *((unsigned __int8 *)v3 + 8);
  v22[0] = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, v22, v5);
  if (!v2)
  {
    uint64_t v14 = v3[2];
    uint64_t v15 = *((unsigned __int8 *)v3 + 24);
    v22[0] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, v22, v5);
    sub_10003DF8C((uint64_t)(v3 + 4), (uint64_t)v23, &qword_100084158);
    sub_10003DF8C((uint64_t)v23, (uint64_t)v22, &qword_100084158);
    char v21 = 2;
    unint64_t v16 = sub_100003C08();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v22, &v21, v5, &type metadata for Data, v16);
    uint64_t v17 = v3[6];
    uint64_t v18 = v3[7];
    v22[0] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, v18, v22, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

double IDSQuickRelayAllocationStatus.init(from:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
    double result = *(double *)&v8;
    __int128 v6 = v9;
    a2[2] = v8;
    a2[3] = v6;
  }

  return result;
}

uint64_t sub_10003FE3C(void *a1)
{
  return IDSQuickRelayAllocationStatus.encode(to:)(a1);
}

void sub_10003FE74(char *a1)
{
}

void sub_10003FE80()
{
}

void sub_10003FE8C()
{
  __asm { BR              X10 }

uint64_t sub_10003FEC0(uint64_t a1)
{
  return swift_bridgeObjectRelease(0xE500000000000000LL);
}

void sub_10003FF28(uint64_t a1)
{
}

unint64_t sub_10003FF30@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10004F91C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10003FF5C()
{
  return ((uint64_t (*)(void))((char *)sub_10003FF84 + 4 * byte_100070BCF[*v0]))();
}

void sub_10003FF84(void *a1@<X8>)
{
  *a1 = 0x3670697271LL;
  a1[1] = 0xE500000000000000LL;
}

void sub_10003FF9C(void *a1@<X8>)
{
  *a1 = 7369329LL;
  a1[1] = 0xE300000000000000LL;
}

void sub_10003FFB0(void *a1@<X8>)
{
  *a1 = 1802728049LL;
  a1[1] = v1;
}

void sub_10003FFC0(void *a1@<X8>)
{
  *a1 = 1769173617LL;
  a1[1] = v1;
}

void sub_10003FFD0(void *a1@<X8>)
{
  *a1 = 1953722993LL;
  a1[1] = v1;
}

void sub_10003FFE0(void *a1@<X8>)
{
  *a1 = 1919971953LL;
  a1[1] = v1;
}

uint64_t sub_10003FFF0()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100040018 + 4 * byte_100070BD6[*v0]))( 1885958769LL,  0xE400000000000000LL);
}

uint64_t sub_100040018()
{
  return 0x3670697271LL;
}

uint64_t sub_10004002C()
{
  return 7369329LL;
}

uint64_t sub_10004003C()
{
  return 1802728049LL;
}

uint64_t sub_100040048()
{
  return 1769173617LL;
}

uint64_t sub_100040054()
{
  return 1953722993LL;
}

uint64_t sub_100040060()
{
  return 1919971953LL;
}

unint64_t sub_10004006C@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10004F91C(a1);
  *a2 = result;
  return result;
}

void sub_100040090(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_10004009C(uint64_t a1)
{
  unint64_t v2 = sub_10004F8D8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000400C4(uint64_t a1)
{
  unint64_t v2 = sub_10004F8D8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IDSQuickRelaySelfAllocToken.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000264C(&qword_100084B80);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  __int128 v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100002C78(a1, v9);
  unint64_t v11 = sub_10004F8D8();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for IDSQuickRelaySelfAllocToken.CodingKeys,  &type metadata for IDSQuickRelaySelfAllocToken.CodingKeys,  v11,  v9,  v10);
  sub_10003DF8C(v3, (uint64_t)v25, &qword_100084158);
  sub_10003DF8C((uint64_t)v25, (uint64_t)v20, &qword_100084158);
  char v19 = 0;
  unint64_t v12 = sub_100003C08();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v20, &v19, v5, &type metadata for Data, v12);
  if (!v2)
  {
    sub_10003DF8C(v3 + 16, (uint64_t)v24, &qword_100084158);
    sub_10003DF8C((uint64_t)v24, (uint64_t)v20, &qword_100084158);
    char v19 = 1;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v20, &v19, v5, &type metadata for Data, v12);
    uint64_t v13 = *(void *)(v3 + 32);
    uint64_t v14 = *(unsigned __int8 *)(v3 + 40);
    v20[0] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v13, v14, v20, v5);
    sub_10003DF8C(v3 + 48, (uint64_t)v23, &qword_100084158);
    sub_10003DF8C((uint64_t)v23, (uint64_t)v20, &qword_100084158);
    char v19 = 3;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v20, &v19, v5, &type metadata for Data, v12);
    sub_10003DF8C(v3 + 64, (uint64_t)v22, &qword_100084158);
    sub_10003DF8C((uint64_t)v22, (uint64_t)v20, &qword_100084158);
    char v19 = 4;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v20, &v19, v5, &type metadata for Data, v12);
    sub_10003DF8C(v3 + 80, (uint64_t)v21, &qword_100084158);
    sub_10003DF8C((uint64_t)v21, (uint64_t)v20, &qword_100084158);
    char v19 = 5;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v20, &v19, v5, &type metadata for Data, v12);
    uint64_t v15 = *(void *)(v3 + 96);
    uint64_t v16 = *(unsigned __int8 *)(v3 + 104);
    v20[0] = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v15, v16, v20, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

__n128 IDSQuickRelaySelfAllocToken.init(from:)@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v8[0];
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_OWORD *)(a2 + 80) = v5;
    *(_OWORD *)(a2 + 89) = *(_OWORD *)((char *)v8 + 9);
    __int128 v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
    __n128 result = (__n128)v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(__n128 *)(a2 + 48) = result;
  }

  return result;
}

uint64_t sub_10004042C(void *a1)
{
  return IDSQuickRelaySelfAllocToken.encode(to:)(a1);
}

void sub_100040474(char *a1)
{
}

void sub_100040480()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v2, 0LL);
  __asm { BR              X9 }

Swift::Int sub_1000404C4()
{
  return Hasher._finalize()();
}

void sub_100040520()
{
  __asm { BR              X10 }

uint64_t sub_100040554(uint64_t a1)
{
  return swift_bridgeObjectRelease(v1);
}

void sub_10004059C(uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }

Swift::Int sub_1000405DC()
{
  return Hasher._finalize()();
}

unint64_t sub_100040638@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10004FFD0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100040664()
{
  return ((uint64_t (*)(void))((char *)sub_10004068C + 4 * byte_100070BEC[*v0]))();
}

void sub_10004068C(void *a1@<X8>)
{
  *a1 = 1936486513LL;
  a1[1] = v1;
}

void sub_10004069C(void *a1@<X8>)
{
  *a1 = 6910577LL;
  a1[1] = 0xE300000000000000LL;
}

void sub_1000406B0(void *a1@<X8>)
{
  *a1 = 1802728049LL;
  a1[1] = v1;
}

void sub_1000406C0(void *a1@<X8>)
{
  *a1 = 1953722993LL;
  a1[1] = v1;
}

uint64_t sub_1000406D0()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000406F8 + 4 * byte_100070BF1[*v0]))( 1852600433LL,  0xE400000000000000LL);
}

uint64_t sub_1000406F8()
{
  return 1936486513LL;
}

uint64_t sub_100040704()
{
  return 6910577LL;
}

uint64_t sub_100040714()
{
  return 1802728049LL;
}

uint64_t sub_100040720()
{
  return 1953722993LL;
}

unint64_t sub_10004072C@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10004FFD0(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100040750(uint64_t a1)
{
  unint64_t v2 = sub_10004FF8C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100040778(uint64_t a1)
{
  unint64_t v2 = sub_10004FF8C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IDSQuickRelayPluginAllocation.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000264C(&qword_100084B90);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  __int128 v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100002C78(a1, v9);
  unint64_t v11 = sub_10004FF8C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for IDSQuickRelayPluginAllocation.CodingKeys,  &type metadata for IDSQuickRelayPluginAllocation.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = v3[1];
  v22[0] = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, v22, v5);
  if (!v2)
  {
    uint64_t v14 = v3[2];
    uint64_t v15 = *((unsigned __int8 *)v3 + 24);
    v22[0] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, v22, v5);
    uint64_t v16 = v3[4];
    uint64_t v17 = *((unsigned __int8 *)v3 + 40);
    v22[0] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, v22, v5);
    sub_10003DF8C((uint64_t)(v3 + 6), (uint64_t)v24, &qword_100084158);
    sub_10003DF8C((uint64_t)v24, (uint64_t)v22, &qword_100084158);
    char v21 = 3;
    unint64_t v18 = sub_100003C08();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v22, &v21, v5, &type metadata for Data, v18);
    sub_10003DF8C((uint64_t)(v3 + 8), (uint64_t)v23, &qword_100084158);
    sub_10003DF8C((uint64_t)v23, (uint64_t)v22, &qword_100084158);
    char v21 = 4;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v22, &v21, v5, &type metadata for Data, v18);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

__n128 IDSQuickRelayPluginAllocation.init(from:)@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v6[4];
    __n128 result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }

  return result;
}

uint64_t sub_1000409EC(void *a1)
{
  return IDSQuickRelayPluginAllocation.encode(to:)(a1);
}

void *sub_100040A2C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = sub_10000264C(&qword_100084C70);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  __int128 v8 = (char *)&v269 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  v563 = a1;
  sub_100002C78(a1, v9);
  unint64_t v11 = sub_10003DD6C();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for IDSMadridProtocolPayload.CodingKeys,  &type metadata for IDSMadridProtocolPayload.CodingKeys,  v11,  v9,  v10);
  uint64_t v1045 = v2;
  if (v2)
  {
    LODWORD(v562) = 0;
    unint64_t v14 = 0LL;
    unint64_t v15 = 0LL;
    unint64_t v16 = 0LL;
    goto LABEL_4;
  }

  LOBYTE(v565) = 0;
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)(&v565, v5);
  LOBYTE(v565) = 1;
  uint64_t v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  v561 = a2;
  uint64_t v562 = v13;
  char v1044 = v25 & 1;
  LOBYTE(v565) = 2;
  int v26 = v25;
  uint64_t v27 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  LODWORD(v559) = v26;
  uint64_t v560 = v27;
  char v1042 = v28 & 1;
  LOBYTE(v564[0]) = 3;
  int v29 = v28;
  unint64_t v30 = sub_100004570();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v565,  &type metadata for Data,  v564,  v5,  &type metadata for Data,  v30);
  LODWORD(v557) = v29;
  uint64_t v558 = v12;
  uint64_t v31 = v565;
  unint64_t v32 = v30;
  uint64_t v33 = v566;
  LOBYTE(v564[0]) = 4;
  sub_1000045B4(v565, v566);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v565,  &type metadata for Data,  v564,  v5,  &type metadata for Data,  v32);
  uint64_t v493 = v33;
  uint64_t v492 = v31;
  uint64_t v34 = v32;
  unint64_t v35 = v566;
  LOBYTE(v564[0]) = 5;
  uint64_t v491 = v565;
  sub_1000045B4(v565, v566);
  uint64_t v556 = v34;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v565,  &type metadata for Data,  v564,  v5,  &type metadata for Data,  v34);
  unint64_t v490 = v35;
  uint64_t v36 = v565;
  uint64_t v37 = v566;
  LOBYTE(v564[0]) = 6;
  sub_1000045B4(v565, v566);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v565,  &type metadata for Data,  v564,  v5,  &type metadata for Data,  v556);
  uint64_t v489 = v37;
  uint64_t v488 = v36;
  uint64_t v38 = v565;
  unint64_t v39 = v566;
  LOBYTE(v564[0]) = 7;
  sub_1000045B4(v565, v566);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v565,  &type metadata for Data,  v564,  v5,  &type metadata for Data,  v556);
  uint64_t v1045 = 0LL;
  unint64_t v487 = v39;
  uint64_t v486 = v38;
  uint64_t v40 = v565;
  unint64_t v41 = v566;
  LOBYTE(v565) = 8;
  uint64_t v485 = v40;
  sub_1000045B4(v40, v566);
  uint64_t v42 = v1045;
  uint64_t v555 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  uint64_t v1045 = v42;
  unint64_t v484 = v41;
  if (v42)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_1000045C8(v485, v41);
    sub_1000045C8(v38, v39);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v35);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    unint64_t v15 = 0LL;
    unint64_t v16 = 0LL;
    unint64_t v14 = 248LL;
    goto LABEL_4;
  }

  LOBYTE(v564[0]) = 9;
  uint64_t v483 = v43;
  swift_bridgeObjectRetain(v43);
  uint64_t v44 = v1045;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v565,  &type metadata for Data,  v564,  v5,  &type metadata for Data,  v556);
  uint64_t v1045 = v44;
  if (v44)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    unint64_t v15 = 0LL;
    unint64_t v16 = 0LL;
    unint64_t v14 = 504LL;
    goto LABEL_4;
  }

  uint64_t v45 = v565;
  LOBYTE(v565) = 10;
  uint64_t v481 = v45;
  unint64_t v482 = v566;
  sub_1000045B4(v45, v566);
  uint64_t v46 = v1045;
  uint64_t v47 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  uint64_t v480 = v48;
  uint64_t v1045 = v46;
  if (v46)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    unint64_t v15 = 0LL;
    unint64_t v16 = 0LL;
    unint64_t v14 = 1016LL;
    goto LABEL_4;
  }

  uint64_t v49 = v47;
  LOBYTE(v565) = 11;
  swift_bridgeObjectRetain(v480);
  uint64_t v50 = v1045;
  LODWORD(v554) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  uint64_t v1045 = v50;
  if (v50
    || (LOBYTE(v564[0]) = 12,
        unint64_t v51 = sub_100056A44(),
        uint64_t v52 = v1045,
        KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v565,  &type metadata for IDSMadridProtocolDeliveryContext,  v564,  v5,  &type metadata for IDSMadridProtocolDeliveryContext,  v51),  (uint64_t v1045 = v52) != 0))
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease(v480);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    unint64_t v15 = 0LL;
    unint64_t v16 = 0LL;
    unint64_t v14 = 2040LL;
    goto LABEL_4;
  }

  uint64_t v552 = v565;
  LODWORD(v551) = v566;
  LODWORD(v549) = BYTE1(v566);
  char v1039 = BYTE1(v566);
  LOBYTE(v565) = 13;
  uint64_t v550 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  LODWORD(v553) = v53;
  uint64_t v1045 = 0LL;
  char v1036 = v53 & 1;
  LOBYTE(v564[0]) = 14;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v565,  &type metadata for Data,  v564,  v5,  &type metadata for Data,  v556);
  uint64_t v1045 = 0LL;
  uint64_t v54 = v565;
  LOBYTE(v565) = 15;
  uint64_t v478 = v54;
  unint64_t v479 = v566;
  sub_1000045B4(v54, v566);
  uint64_t v55 = v1045;
  int v56 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  LODWORD(v548) = v56;
  uint64_t v1045 = v55;
  if (v55)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_1000045C8(v478, v479);
    swift_bridgeObjectRelease(v480);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    unint64_t v15 = 0LL;
    unint64_t v16 = 0LL;
    unint64_t v14 = 18424LL;
    goto LABEL_4;
  }

  LOBYTE(v565) = 16;
  LODWORD(v547) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  uint64_t v1045 = 0LL;
  LOBYTE(v564[0]) = 17;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v565,  &type metadata for Data,  v564,  v5,  &type metadata for Data,  v556);
  uint64_t v1045 = 0LL;
  LOBYTE(v564[0]) = 18;
  uint64_t v476 = v565;
  unint64_t v477 = v566;
  sub_1000045B4(v565, v566);
  uint64_t v57 = v1045;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v565,  &type metadata for Data,  v564,  v5,  &type metadata for Data,  v556);
  uint64_t v1045 = v57;
  if (v57)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_1000045C8(v476, v477);
    sub_1000045C8(v478, v479);
    swift_bridgeObjectRelease(v480);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    unint64_t v15 = 0LL;
    unint64_t v16 = 0LL;
    unint64_t v14 = 149496LL;
    goto LABEL_4;
  }

  uint64_t v58 = v565;
  LOBYTE(v565) = 19;
  uint64_t v474 = v58;
  unint64_t v475 = v566;
  sub_1000045B4(v58, v566);
  uint64_t v59 = v1045;
  uint64_t v546 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  uint64_t v473 = v60;
  uint64_t v1045 = v59;
  if (v59)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_1000045C8(v474, v475);
    sub_1000045C8(v476, v477);
    sub_1000045C8(v478, v479);
    swift_bridgeObjectRelease(v480);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    unint64_t v15 = 0LL;
    unint64_t v16 = 0LL;
    unint64_t v14 = 411640LL;
    goto LABEL_4;
  }

  LOBYTE(v565) = 20;
  swift_bridgeObjectRetain(v473);
  uint64_t v61 = v1045;
  uint64_t v545 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  uint64_t v472 = v62;
  uint64_t v1045 = v61;
  if (v61)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease(v473);
    sub_1000045C8(v474, v475);
    sub_1000045C8(v476, v477);
    sub_1000045C8(v478, v479);
    swift_bridgeObjectRelease(v480);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    unint64_t v15 = 0LL;
    unint64_t v16 = 0LL;
    unint64_t v14 = 935928LL;
    goto LABEL_4;
  }

  LOBYTE(v565) = 21;
  swift_bridgeObjectRetain(v472);
  uint64_t v63 = v1045;
  uint64_t v544 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  uint64_t v471 = v64;
  uint64_t v1045 = v63;
  if (v63)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease(v473);
    swift_bridgeObjectRelease(v472);
    sub_1000045C8(v474, v475);
    sub_1000045C8(v476, v477);
    sub_1000045C8(v478, v479);
    swift_bridgeObjectRelease(v480);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    unint64_t v15 = 0LL;
    unint64_t v16 = 0LL;
    unint64_t v14 = 1984504LL;
    goto LABEL_4;
  }

  LOBYTE(v564[0]) = 22;
  swift_bridgeObjectRetain(v471);
  uint64_t v65 = v1045;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v565,  &type metadata for Data,  v564,  v5,  &type metadata for Data,  v556);
  uint64_t v1045 = v65;
  if (v65)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease(v473);
    swift_bridgeObjectRelease(v472);
    swift_bridgeObjectRelease(v471);
    sub_1000045C8(v474, v475);
    sub_1000045C8(v476, v477);
    sub_1000045C8(v478, v479);
    swift_bridgeObjectRelease(v480);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    unint64_t v15 = 0LL;
    unint64_t v16 = 0LL;
    unint64_t v14 = 4081656LL;
    goto LABEL_4;
  }

  uint64_t v66 = v565;
  LOBYTE(v565) = 23;
  uint64_t v469 = v66;
  unint64_t v470 = v566;
  sub_1000045B4(v66, v566);
  uint64_t v67 = v1045;
  uint64_t v542 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  LODWORD(v543) = v68;
  uint64_t v1045 = v67;
  if (v67)
  {
    unint64_t v14 = 8275960LL;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_1000045C8(v469, v470);
    swift_bridgeObjectRelease(v473);
    swift_bridgeObjectRelease(v472);
    swift_bridgeObjectRelease(v471);
    sub_1000045C8(v474, v475);
    sub_1000045C8(v476, v477);
    sub_1000045C8(v478, v479);
    swift_bridgeObjectRelease(v480);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    unint64_t v15 = 0LL;
    unint64_t v16 = 0LL;
    goto LABEL_4;
  }

  char v1032 = v543 & 1;
  LOBYTE(v565) = 24;
  uint64_t v541 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  uint64_t v468 = v69;
  uint64_t v1045 = 0LL;
  LOBYTE(v565) = 25;
  swift_bridgeObjectRetain(v69);
  uint64_t v70 = v1045;
  uint64_t v540 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  uint64_t v467 = v71;
  uint64_t v1045 = v70;
  if (v70)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease(v468);
    sub_1000045C8(v469, v470);
    swift_bridgeObjectRelease(v473);
    swift_bridgeObjectRelease(v472);
    swift_bridgeObjectRelease(v471);
    sub_1000045C8(v474, v475);
    sub_1000045C8(v476, v477);
    sub_1000045C8(v478, v479);
    swift_bridgeObjectRelease(v480);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    unint64_t v15 = 0LL;
    unint64_t v16 = 0LL;
    unint64_t v14 = 25053176LL;
    goto LABEL_4;
  }

  LOBYTE(v565) = 26;
  swift_bridgeObjectRetain(v467);
  uint64_t v72 = v1045;
  uint64_t v539 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  uint64_t v466 = v73;
  uint64_t v1045 = v72;
  if (v72)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease(v468);
    swift_bridgeObjectRelease(v467);
    sub_1000045C8(v469, v470);
    swift_bridgeObjectRelease(v473);
    swift_bridgeObjectRelease(v472);
    swift_bridgeObjectRelease(v471);
    sub_1000045C8(v474, v475);
    sub_1000045C8(v476, v477);
    sub_1000045C8(v478, v479);
    swift_bridgeObjectRelease(v480);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    unint64_t v15 = 0LL;
    unint64_t v16 = 0LL;
    unint64_t v14 = 58607608LL;
    goto LABEL_4;
  }

  uint64_t v74 = sub_10000264C(&qword_100084A78);
  LOBYTE(v564[0]) = 27;
  uint64_t v75 = sub_100056A88( &qword_100084C80,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  swift_bridgeObjectRetain(v466);
  uint64_t v76 = v1045;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v565, v74, v564, v5, v74, v75);
  uint64_t v1045 = v76;
  if (v76)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease(v468);
    swift_bridgeObjectRelease(v467);
    swift_bridgeObjectRelease(v466);
    sub_1000045C8(v469, v470);
    swift_bridgeObjectRelease(v473);
    swift_bridgeObjectRelease(v472);
    swift_bridgeObjectRelease(v471);
    sub_1000045C8(v474, v475);
    sub_1000045C8(v476, v477);
    sub_1000045C8(v478, v479);
    swift_bridgeObjectRelease(v480);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    unint64_t v15 = 0LL;
    unint64_t v16 = 0LL;
    unint64_t v14 = 125716472LL;
    goto LABEL_4;
  }

  LOBYTE(v564[0]) = 28;
  uint64_t v465 = v565;
  swift_bridgeObjectRetain(v565);
  uint64_t v77 = v1045;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v565, v74, v564, v5, v74, v75);
  uint64_t v1045 = v77;
  if (v77)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease(v468);
    swift_bridgeObjectRelease(v467);
    swift_bridgeObjectRelease(v466);
    swift_bridgeObjectRelease(v465);
    sub_1000045C8(v469, v470);
    swift_bridgeObjectRelease(v473);
    swift_bridgeObjectRelease(v472);
    swift_bridgeObjectRelease(v471);
    sub_1000045C8(v474, v475);
    sub_1000045C8(v476, v477);
    sub_1000045C8(v478, v479);
    swift_bridgeObjectRelease(v480);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    unint64_t v15 = 0LL;
    unint64_t v16 = 0LL;
    unint64_t v14 = 259934200LL;
    goto LABEL_4;
  }

  uint64_t v78 = v565;
  LOBYTE(v565) = 29;
  uint64_t v464 = v78;
  swift_bridgeObjectRetain(v78);
  uint64_t v79 = v1045;
  uint64_t v538 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  uint64_t v463 = v80;
  uint64_t v1045 = v79;
  if (v79)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease(v468);
    swift_bridgeObjectRelease(v467);
    swift_bridgeObjectRelease(v466);
    swift_bridgeObjectRelease(v465);
    swift_bridgeObjectRelease(v464);
    sub_1000045C8(v469, v470);
    swift_bridgeObjectRelease(v473);
    swift_bridgeObjectRelease(v472);
    swift_bridgeObjectRelease(v471);
    sub_1000045C8(v474, v475);
    sub_1000045C8(v476, v477);
    sub_1000045C8(v478, v479);
    swift_bridgeObjectRelease(v480);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    unint64_t v15 = 0LL;
    unint64_t v16 = 0LL;
    unint64_t v14 = 528369656LL;
    goto LABEL_4;
  }

  LOBYTE(v565) = 30;
  swift_bridgeObjectRetain(v463);
  uint64_t v81 = v1045;
  uint64_t v537 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  uint64_t v462 = v82;
  uint64_t v1045 = v81;
  if (v81)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease(v468);
    swift_bridgeObjectRelease(v467);
    swift_bridgeObjectRelease(v466);
    swift_bridgeObjectRelease(v465);
    swift_bridgeObjectRelease(v464);
    swift_bridgeObjectRelease(v463);
    sub_1000045C8(v469, v470);
    swift_bridgeObjectRelease(v473);
    swift_bridgeObjectRelease(v472);
    swift_bridgeObjectRelease(v471);
    sub_1000045C8(v474, v475);
    sub_1000045C8(v476, v477);
    sub_1000045C8(v478, v479);
    swift_bridgeObjectRelease(v480);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    unint64_t v15 = 0LL;
    unint64_t v16 = 0LL;
    unint64_t v14 = 1065240568LL;
    goto LABEL_4;
  }

  LOBYTE(v565) = 31;
  swift_bridgeObjectRetain(v462);
  uint64_t v83 = v1045;
  uint64_t v535 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  LODWORD(v536) = v84;
  uint64_t v1045 = v83;
  if (v83)
  {
    unint64_t v14 = 2138982392LL;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease(v468);
    swift_bridgeObjectRelease(v467);
    swift_bridgeObjectRelease(v466);
    swift_bridgeObjectRelease(v465);
    swift_bridgeObjectRelease(v464);
    swift_bridgeObjectRelease(v463);
    swift_bridgeObjectRelease(v462);
    sub_1000045C8(v469, v470);
    swift_bridgeObjectRelease(v473);
    swift_bridgeObjectRelease(v472);
    swift_bridgeObjectRelease(v471);
    sub_1000045C8(v474, v475);
    sub_1000045C8(v476, v477);
    sub_1000045C8(v478, v479);
    swift_bridgeObjectRelease(v480);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    unint64_t v15 = 0LL;
    unint64_t v16 = 0LL;
    goto LABEL_4;
  }

  char v1030 = v536 & 1;
  LOBYTE(v565) = 32;
  uint64_t v533 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  LODWORD(v534) = v85;
  uint64_t v1045 = 0LL;
  char v1028 = v85 & 1;
  LOBYTE(v565) = 33;
  uint64_t v532 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  uint64_t v461 = v86;
  uint64_t v1045 = 0LL;
  LOBYTE(v564[0]) = 34;
  swift_bridgeObjectRetain(v86);
  uint64_t v87 = v1045;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v565,  &type metadata for Data,  v564,  v5,  &type metadata for Data,  v556);
  uint64_t v1045 = v87;
  if (v87)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease(v468);
    swift_bridgeObjectRelease(v467);
    swift_bridgeObjectRelease(v466);
    swift_bridgeObjectRelease(v465);
    swift_bridgeObjectRelease(v464);
    swift_bridgeObjectRelease(v463);
    swift_bridgeObjectRelease(v462);
    swift_bridgeObjectRelease(v461);
    sub_1000045C8(v469, v470);
    swift_bridgeObjectRelease(v473);
    swift_bridgeObjectRelease(v472);
    swift_bridgeObjectRelease(v471);
    sub_1000045C8(v474, v475);
    sub_1000045C8(v476, v477);
    sub_1000045C8(v478, v479);
    swift_bridgeObjectRelease(v480);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    unint64_t v15 = 0LL;
    unint64_t v16 = 0LL;
    unint64_t v14 = 0x27F7E47F8LL;
    goto LABEL_4;
  }

  LOBYTE(v564[0]) = 35;
  uint64_t v459 = v565;
  unint64_t v460 = v566;
  sub_1000045B4(v565, v566);
  uint64_t v88 = v1045;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v565,  &type metadata for Data,  v564,  v5,  &type metadata for Data,  v556);
  uint64_t v1045 = v88;
  if (v88)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_1000045C8(v459, v460);
    swift_bridgeObjectRelease(v468);
    swift_bridgeObjectRelease(v467);
    swift_bridgeObjectRelease(v466);
    swift_bridgeObjectRelease(v465);
    swift_bridgeObjectRelease(v464);
    swift_bridgeObjectRelease(v463);
    swift_bridgeObjectRelease(v462);
    swift_bridgeObjectRelease(v461);
    sub_1000045C8(v469, v470);
    swift_bridgeObjectRelease(v473);
    swift_bridgeObjectRelease(v472);
    swift_bridgeObjectRelease(v471);
    sub_1000045C8(v474, v475);
    sub_1000045C8(v476, v477);
    sub_1000045C8(v478, v479);
    swift_bridgeObjectRelease(v480);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    unint64_t v15 = 0LL;
    unint64_t v16 = 0LL;
    unint64_t v14 = 0x67F7E47F8LL;
    goto LABEL_4;
  }

  uint64_t v89 = v565;
  LOBYTE(v565) = 36;
  uint64_t v457 = v89;
  unint64_t v458 = v566;
  sub_1000045B4(v89, v566);
  uint64_t v90 = v1045;
  uint64_t v530 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  LODWORD(v531) = v91;
  uint64_t v1045 = v90;
  if (v90)
  {
    unint64_t v14 = 0xE7F7E47F8LL;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_1000045C8(v457, v458);
    sub_1000045C8(v459, v460);
    swift_bridgeObjectRelease(v468);
    swift_bridgeObjectRelease(v467);
    swift_bridgeObjectRelease(v466);
    swift_bridgeObjectRelease(v465);
    swift_bridgeObjectRelease(v464);
    swift_bridgeObjectRelease(v463);
    swift_bridgeObjectRelease(v462);
    swift_bridgeObjectRelease(v461);
    sub_1000045C8(v469, v470);
    swift_bridgeObjectRelease(v473);
    swift_bridgeObjectRelease(v472);
    swift_bridgeObjectRelease(v471);
    sub_1000045C8(v474, v475);
    sub_1000045C8(v476, v477);
    sub_1000045C8(v478, v479);
    swift_bridgeObjectRelease(v480);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    unint64_t v15 = 0LL;
    unint64_t v16 = 0LL;
    goto LABEL_4;
  }

  char v1026 = v531 & 1;
  LOBYTE(v564[0]) = 37;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v565,  &type metadata for Data,  v564,  v5,  &type metadata for Data,  v556);
  uint64_t v1045 = 0LL;
  uint64_t v92 = v565;
  LOBYTE(v565) = 38;
  uint64_t v455 = v92;
  unint64_t v456 = v566;
  sub_1000045B4(v92, v566);
  uint64_t v93 = v1045;
  uint64_t v529 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  uint64_t v454 = v94;
  uint64_t v1045 = v93;
  if (v93)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_1000045C8(v455, v456);
    sub_1000045C8(v457, v458);
    sub_1000045C8(v459, v460);
    swift_bridgeObjectRelease(v468);
    swift_bridgeObjectRelease(v467);
    swift_bridgeObjectRelease(v466);
    swift_bridgeObjectRelease(v465);
    swift_bridgeObjectRelease(v464);
    swift_bridgeObjectRelease(v463);
    swift_bridgeObjectRelease(v462);
    swift_bridgeObjectRelease(v461);
    sub_1000045C8(v469, v470);
    swift_bridgeObjectRelease(v473);
    swift_bridgeObjectRelease(v472);
    swift_bridgeObjectRelease(v471);
    sub_1000045C8(v474, v475);
    sub_1000045C8(v476, v477);
    sub_1000045C8(v478, v479);
    swift_bridgeObjectRelease(v480);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    unint64_t v15 = 0LL;
    unint64_t v16 = 0LL;
    unint64_t v14 = 0x2E7F7E47F8LL;
    goto LABEL_4;
  }

  LOBYTE(v565) = 39;
  swift_bridgeObjectRetain(v454);
  uint64_t v95 = v1045;
  uint64_t v528 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  uint64_t v453 = v96;
  uint64_t v1045 = v95;
  if (v95)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease(v454);
    sub_1000045C8(v455, v456);
    sub_1000045C8(v457, v458);
    sub_1000045C8(v459, v460);
    swift_bridgeObjectRelease(v468);
    swift_bridgeObjectRelease(v467);
    swift_bridgeObjectRelease(v466);
    swift_bridgeObjectRelease(v465);
    swift_bridgeObjectRelease(v464);
    swift_bridgeObjectRelease(v463);
    swift_bridgeObjectRelease(v462);
    swift_bridgeObjectRelease(v461);
    sub_1000045C8(v469, v470);
    swift_bridgeObjectRelease(v473);
    swift_bridgeObjectRelease(v472);
    swift_bridgeObjectRelease(v471);
    sub_1000045C8(v474, v475);
    sub_1000045C8(v476, v477);
    sub_1000045C8(v478, v479);
    swift_bridgeObjectRelease(v480);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    unint64_t v15 = 0LL;
    unint64_t v16 = 0LL;
    unint64_t v14 = 0x6E7F7E47F8LL;
    goto LABEL_4;
  }

  LOBYTE(v565) = 40;
  swift_bridgeObjectRetain(v453);
  uint64_t v97 = v1045;
  uint64_t v527 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  uint64_t v452 = v98;
  uint64_t v1045 = v97;
  if (v97)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease(v454);
    swift_bridgeObjectRelease(v453);
    sub_1000045C8(v455, v456);
    sub_1000045C8(v457, v458);
    sub_1000045C8(v459, v460);
    swift_bridgeObjectRelease(v468);
    swift_bridgeObjectRelease(v467);
    swift_bridgeObjectRelease(v466);
    swift_bridgeObjectRelease(v465);
    swift_bridgeObjectRelease(v464);
    swift_bridgeObjectRelease(v463);
    swift_bridgeObjectRelease(v462);
    swift_bridgeObjectRelease(v461);
    sub_1000045C8(v469, v470);
    swift_bridgeObjectRelease(v473);
    swift_bridgeObjectRelease(v472);
    swift_bridgeObjectRelease(v471);
    sub_1000045C8(v474, v475);
    sub_1000045C8(v476, v477);
    sub_1000045C8(v478, v479);
    swift_bridgeObjectRelease(v480);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    unint64_t v15 = 0LL;
    unint64_t v16 = 0LL;
    unint64_t v14 = 0xEE7F7E47F8LL;
    goto LABEL_4;
  }

  unint64_t v15 = 0LL;
  LOBYTE(v565) = 41;
  swift_bridgeObjectRetain(v452);
  uint64_t v99 = v1045;
  uint64_t v525 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  LODWORD(v526) = v100;
  uint64_t v1045 = v99;
  if (v99)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease(v454);
    swift_bridgeObjectRelease(v453);
    swift_bridgeObjectRelease(v452);
    sub_1000045C8(v455, v456);
    sub_1000045C8(v457, v458);
    sub_1000045C8(v459, v460);
    swift_bridgeObjectRelease(v468);
    swift_bridgeObjectRelease(v467);
    swift_bridgeObjectRelease(v466);
    swift_bridgeObjectRelease(v465);
    swift_bridgeObjectRelease(v464);
    swift_bridgeObjectRelease(v463);
    swift_bridgeObjectRelease(v462);
    swift_bridgeObjectRelease(v461);
    sub_1000045C8(v469, v470);
    swift_bridgeObjectRelease(v473);
    swift_bridgeObjectRelease(v472);
    swift_bridgeObjectRelease(v471);
    sub_1000045C8(v474, v475);
    sub_1000045C8(v476, v477);
    sub_1000045C8(v478, v479);
    swift_bridgeObjectRelease(v480);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    unint64_t v16 = 0LL;
    unint64_t v14 = 0x1EE7F7E47F8LL;
    goto LABEL_4;
  }

  char v1024 = v526 & 1;
  LOBYTE(v565) = 42;
  uint64_t v523 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  LODWORD(v524) = v101;
  uint64_t v1045 = 0LL;
  char v1022 = v101 & 1;
  LOBYTE(v565) = 43;
  uint64_t v521 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  LODWORD(v522) = v102;
  uint64_t v1045 = 0LL;
  char v1020 = v102 & 1;
  LOBYTE(v565) = 44;
  uint64_t v520 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  LODWORD(v519) = v103;
  uint64_t v1045 = 0LL;
  char v1018 = v103 & 1;
  LOBYTE(v564[0]) = 45;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v565,  &type metadata for Data,  v564,  v5,  &type metadata for Data,  v556);
  uint64_t v1045 = 0LL;
  uint64_t v104 = v565;
  LOBYTE(v565) = 46;
  uint64_t v450 = v104;
  unint64_t v451 = v566;
  sub_1000045B4(v104, v566);
  uint64_t v105 = v1045;
  uint64_t v518 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  uint64_t v449 = v106;
  uint64_t v1045 = v105;
  if (v105)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_1000045C8(v450, v451);
    swift_bridgeObjectRelease(v454);
    swift_bridgeObjectRelease(v453);
    swift_bridgeObjectRelease(v452);
    sub_1000045C8(v455, v456);
    sub_1000045C8(v457, v458);
    sub_1000045C8(v459, v460);
    swift_bridgeObjectRelease(v468);
    swift_bridgeObjectRelease(v467);
    swift_bridgeObjectRelease(v466);
    swift_bridgeObjectRelease(v465);
    swift_bridgeObjectRelease(v464);
    swift_bridgeObjectRelease(v463);
    swift_bridgeObjectRelease(v462);
    swift_bridgeObjectRelease(v461);
    sub_1000045C8(v469, v470);
    swift_bridgeObjectRelease(v473);
    swift_bridgeObjectRelease(v472);
    swift_bridgeObjectRelease(v471);
    sub_1000045C8(v474, v475);
    sub_1000045C8(v476, v477);
    sub_1000045C8(v478, v479);
    swift_bridgeObjectRelease(v480);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    unint64_t v15 = 0LL;
    unint64_t v16 = 0LL;
    unint64_t v14 = 0x21EE7F7E47F8LL;
    goto LABEL_4;
  }

  unint64_t v15 = 0LL;
  LOBYTE(v565) = 47;
  swift_bridgeObjectRetain(v449);
  uint64_t v107 = v1045;
  uint64_t v517 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  int v370 = v108;
  uint64_t v1045 = v107;
  if (v107)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease(v449);
    sub_1000045C8(v450, v451);
    swift_bridgeObjectRelease(v454);
    swift_bridgeObjectRelease(v453);
    swift_bridgeObjectRelease(v452);
    sub_1000045C8(v455, v456);
    sub_1000045C8(v457, v458);
    sub_1000045C8(v459, v460);
    swift_bridgeObjectRelease(v468);
    swift_bridgeObjectRelease(v467);
    swift_bridgeObjectRelease(v466);
    swift_bridgeObjectRelease(v465);
    swift_bridgeObjectRelease(v464);
    swift_bridgeObjectRelease(v463);
    swift_bridgeObjectRelease(v462);
    swift_bridgeObjectRelease(v461);
    sub_1000045C8(v469, v470);
    swift_bridgeObjectRelease(v473);
    swift_bridgeObjectRelease(v472);
    swift_bridgeObjectRelease(v471);
    sub_1000045C8(v474, v475);
    sub_1000045C8(v476, v477);
    sub_1000045C8(v478, v479);
    swift_bridgeObjectRelease(v480);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    unint64_t v16 = 0LL;
    unint64_t v14 = 0x61EE7F7E47F8LL;
    goto LABEL_4;
  }

  char v1016 = v370 & 1;
  LOBYTE(v565) = 48;
  uint64_t v516 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  int v369 = v109;
  uint64_t v1045 = 0LL;
  char v1014 = v109 & 1;
  LOBYTE(v565) = 49;
  uint64_t v515 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  uint64_t v448 = v110;
  uint64_t v1045 = 0LL;
  unint64_t v15 = 0LL;
  LOBYTE(v565) = 50;
  swift_bridgeObjectRetain(v110);
  uint64_t v111 = v1045;
  uint64_t v514 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  int v365 = v112;
  uint64_t v1045 = v111;
  if (v111)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease(v449);
    swift_bridgeObjectRelease(v448);
    sub_1000045C8(v450, v451);
    swift_bridgeObjectRelease(v454);
    swift_bridgeObjectRelease(v453);
    swift_bridgeObjectRelease(v452);
    sub_1000045C8(v455, v456);
    sub_1000045C8(v457, v458);
    sub_1000045C8(v459, v460);
    swift_bridgeObjectRelease(v468);
    swift_bridgeObjectRelease(v467);
    swift_bridgeObjectRelease(v466);
    swift_bridgeObjectRelease(v465);
    swift_bridgeObjectRelease(v464);
    swift_bridgeObjectRelease(v463);
    swift_bridgeObjectRelease(v462);
    swift_bridgeObjectRelease(v461);
    sub_1000045C8(v469, v470);
    swift_bridgeObjectRelease(v473);
    swift_bridgeObjectRelease(v472);
    swift_bridgeObjectRelease(v471);
    sub_1000045C8(v474, v475);
    sub_1000045C8(v476, v477);
    sub_1000045C8(v478, v479);
    swift_bridgeObjectRelease(v480);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    unint64_t v16 = 0LL;
    unint64_t v14 = 0x261EE7F7E47F8LL;
    goto LABEL_4;
  }

  char v1012 = v365 & 1;
  LOBYTE(v565) = 51;
  uint64_t v513 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  uint64_t v447 = v113;
  uint64_t v1045 = 0LL;
  unint64_t v15 = 0LL;
  LOBYTE(v565) = 52;
  swift_bridgeObjectRetain(v113);
  uint64_t v114 = v1045;
  uint64_t v512 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  int v363 = v115;
  uint64_t v1045 = v114;
  if (v114) {
    goto LABEL_150;
  }
  char v1010 = v363 & 1;
  LOBYTE(v565) = 53;
  uint64_t v511 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  int v361 = v116;
  uint64_t v1045 = 0LL;
  char v1008 = v116 & 1;
  LOBYTE(v565) = 54;
  uint64_t v510 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  int v359 = v117;
  uint64_t v1045 = 0LL;
  char v1006 = v117 & 1;
  uint64_t v118 = sub_10000264C(&qword_100084A90);
  LOBYTE(v564[0]) = 55;
  uint64_t v119 = sub_100056CB0( &qword_100084C88,  &qword_100084A90,  (void (*)(void))sub_100056AE8,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  uint64_t v120 = v1045;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v565, v118, v564, v5, v118, v119);
  uint64_t v1045 = v120;
  if (v120)
  {
LABEL_150:
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease(v449);
    swift_bridgeObjectRelease(v448);
    swift_bridgeObjectRelease(v447);
    sub_1000045C8(v450, v451);
    swift_bridgeObjectRelease(v454);
    swift_bridgeObjectRelease(v453);
    swift_bridgeObjectRelease(v452);
    sub_1000045C8(v455, v456);
    sub_1000045C8(v457, v458);
    sub_1000045C8(v459, v460);
    swift_bridgeObjectRelease(v468);
    swift_bridgeObjectRelease(v467);
    swift_bridgeObjectRelease(v466);
    swift_bridgeObjectRelease(v465);
    swift_bridgeObjectRelease(v464);
    swift_bridgeObjectRelease(v463);
    swift_bridgeObjectRelease(v462);
    swift_bridgeObjectRelease(v461);
    sub_1000045C8(v469, v470);
    swift_bridgeObjectRelease(v473);
    swift_bridgeObjectRelease(v472);
    swift_bridgeObjectRelease(v471);
    sub_1000045C8(v474, v475);
    sub_1000045C8(v476, v477);
    sub_1000045C8(v478, v479);
    swift_bridgeObjectRelease(v480);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    unint64_t v16 = 0LL;
    unint64_t v14 = 0xA61EE7F7E47F8LL;
    goto LABEL_4;
  }

  LOBYTE(v564[0]) = 56;
  uint64_t v446 = v565;
  swift_bridgeObjectRetain(v565);
  uint64_t v121 = v1045;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v565, v118, v564, v5, v118, v119);
  uint64_t v1045 = v121;
  if (v121)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease(v449);
    swift_bridgeObjectRelease(v448);
    swift_bridgeObjectRelease(v447);
    swift_bridgeObjectRelease(v446);
    sub_1000045C8(v450, v451);
    swift_bridgeObjectRelease(v454);
    swift_bridgeObjectRelease(v453);
    swift_bridgeObjectRelease(v452);
    sub_1000045C8(v455, v456);
    sub_1000045C8(v457, v458);
    sub_1000045C8(v459, v460);
    swift_bridgeObjectRelease(v468);
    swift_bridgeObjectRelease(v467);
    swift_bridgeObjectRelease(v466);
    swift_bridgeObjectRelease(v465);
    swift_bridgeObjectRelease(v464);
    swift_bridgeObjectRelease(v463);
    swift_bridgeObjectRelease(v462);
    swift_bridgeObjectRelease(v461);
    sub_1000045C8(v469, v470);
    swift_bridgeObjectRelease(v473);
    swift_bridgeObjectRelease(v472);
    swift_bridgeObjectRelease(v471);
    sub_1000045C8(v474, v475);
    sub_1000045C8(v476, v477);
    sub_1000045C8(v478, v479);
    swift_bridgeObjectRelease(v480);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    unint64_t v15 = 0LL;
    unint64_t v16 = 0LL;
    unint64_t v14 = 0x8A61EE7F7E47F8LL;
    goto LABEL_4;
  }

  unint64_t v15 = 0LL;
  uint64_t v122 = v565;
  LOBYTE(v565) = 57;
  uint64_t v445 = v122;
  swift_bridgeObjectRetain(v122);
  uint64_t v123 = v1045;
  uint64_t v509 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  int v358 = v124;
  uint64_t v1045 = v123;
  if (v123)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease(v449);
    swift_bridgeObjectRelease(v448);
    swift_bridgeObjectRelease(v447);
    swift_bridgeObjectRelease(v446);
    swift_bridgeObjectRelease(v445);
    sub_1000045C8(v450, v451);
    swift_bridgeObjectRelease(v454);
    swift_bridgeObjectRelease(v453);
    swift_bridgeObjectRelease(v452);
    sub_1000045C8(v455, v456);
    sub_1000045C8(v457, v458);
    sub_1000045C8(v459, v460);
    swift_bridgeObjectRelease(v468);
    swift_bridgeObjectRelease(v467);
    swift_bridgeObjectRelease(v466);
    swift_bridgeObjectRelease(v465);
    swift_bridgeObjectRelease(v464);
    swift_bridgeObjectRelease(v463);
    swift_bridgeObjectRelease(v462);
    swift_bridgeObjectRelease(v461);
    sub_1000045C8(v469, v470);
    swift_bridgeObjectRelease(v473);
    swift_bridgeObjectRelease(v472);
    swift_bridgeObjectRelease(v471);
    sub_1000045C8(v474, v475);
    sub_1000045C8(v476, v477);
    sub_1000045C8(v478, v479);
    swift_bridgeObjectRelease(v480);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    unint64_t v16 = 0LL;
    unint64_t v14 = 0x18A61EE7F7E47F8LL;
    goto LABEL_4;
  }

  char v1004 = v358 & 1;
  LOBYTE(v565) = 58;
  uint64_t v508 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  int v356 = v125;
  uint64_t v1045 = 0LL;
  char v1002 = v125 & 1;
  LOBYTE(v565) = 59;
  uint64_t v507 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  int v355 = v126;
  uint64_t v1045 = 0LL;
  char v1000 = v126 & 1;
  LOBYTE(v565) = 60;
  LODWORD(v506) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  uint64_t v1045 = 0LL;
  LOBYTE(v565) = 61;
  LODWORD(v505) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  uint64_t v1045 = 0LL;
  LOBYTE(v565) = 62;
  LODWORD(v504) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  uint64_t v1045 = 0LL;
  LOBYTE(v565) = 63;
  LODWORD(v503) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  uint64_t v1045 = 0LL;
  LOBYTE(v565) = 64;
  uint64_t v502 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  uint64_t v444 = v127;
  uint64_t v1045 = 0LL;
  LOBYTE(v565) = 65;
  swift_bridgeObjectRetain(v127);
  uint64_t v128 = v1045;
  uint64_t v501 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  uint64_t v443 = v129;
  uint64_t v1045 = v128;
  if (v128)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease(v449);
    swift_bridgeObjectRelease(v448);
    swift_bridgeObjectRelease(v447);
    swift_bridgeObjectRelease(v446);
    swift_bridgeObjectRelease(v445);
    swift_bridgeObjectRelease(v444);
    sub_1000045C8(v450, v451);
    swift_bridgeObjectRelease(v454);
    swift_bridgeObjectRelease(v453);
    swift_bridgeObjectRelease(v452);
    sub_1000045C8(v455, v456);
    sub_1000045C8(v457, v458);
    sub_1000045C8(v459, v460);
    swift_bridgeObjectRelease(v468);
    swift_bridgeObjectRelease(v467);
    swift_bridgeObjectRelease(v466);
    swift_bridgeObjectRelease(v465);
    swift_bridgeObjectRelease(v464);
    swift_bridgeObjectRelease(v463);
    swift_bridgeObjectRelease(v462);
    swift_bridgeObjectRelease(v461);
    sub_1000045C8(v469, v470);
    swift_bridgeObjectRelease(v473);
    swift_bridgeObjectRelease(v472);
    swift_bridgeObjectRelease(v471);
    sub_1000045C8(v474, v475);
    sub_1000045C8(v476, v477);
    sub_1000045C8(v478, v479);
    swift_bridgeObjectRelease(v480);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    unint64_t v16 = 0LL;
    unint64_t v14 = 0x18A61EE7F7E47F8LL;
    unint64_t v15 = 1LL;
    goto LABEL_4;
  }

  LOBYTE(v564[0]) = 66;
  swift_bridgeObjectRetain(v443);
  uint64_t v130 = v1045;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v565,  &type metadata for Data,  v564,  v5,  &type metadata for Data,  v556);
  uint64_t v1045 = v130;
  if (v130)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease(v449);
    swift_bridgeObjectRelease(v448);
    swift_bridgeObjectRelease(v447);
    swift_bridgeObjectRelease(v446);
    swift_bridgeObjectRelease(v445);
    swift_bridgeObjectRelease(v444);
    swift_bridgeObjectRelease(v443);
    sub_1000045C8(v450, v451);
    swift_bridgeObjectRelease(v454);
    swift_bridgeObjectRelease(v453);
    swift_bridgeObjectRelease(v452);
    sub_1000045C8(v455, v456);
    sub_1000045C8(v457, v458);
    sub_1000045C8(v459, v460);
    swift_bridgeObjectRelease(v468);
    swift_bridgeObjectRelease(v467);
    swift_bridgeObjectRelease(v466);
    swift_bridgeObjectRelease(v465);
    swift_bridgeObjectRelease(v464);
    swift_bridgeObjectRelease(v463);
    swift_bridgeObjectRelease(v462);
    swift_bridgeObjectRelease(v461);
    sub_1000045C8(v469, v470);
    swift_bridgeObjectRelease(v473);
    swift_bridgeObjectRelease(v472);
    swift_bridgeObjectRelease(v471);
    sub_1000045C8(v474, v475);
    sub_1000045C8(v476, v477);
    sub_1000045C8(v478, v479);
    swift_bridgeObjectRelease(v480);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    unint64_t v16 = 0LL;
    unint64_t v14 = 0x18A61EE7F7E47F8LL;
    unint64_t v15 = 3LL;
    goto LABEL_4;
  }

  uint64_t v131 = v565;
  LOBYTE(v565) = 67;
  uint64_t v441 = v131;
  unint64_t v442 = v566;
  sub_1000045B4(v131, v566);
  uint64_t v132 = v1045;
  uint64_t v500 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  uint64_t v440 = v133;
  uint64_t v1045 = v132;
  if (v132)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_1000045C8(v441, v442);
    swift_bridgeObjectRelease(v449);
    swift_bridgeObjectRelease(v448);
    swift_bridgeObjectRelease(v447);
    swift_bridgeObjectRelease(v446);
    swift_bridgeObjectRelease(v445);
    swift_bridgeObjectRelease(v444);
    swift_bridgeObjectRelease(v443);
    sub_1000045C8(v450, v451);
    swift_bridgeObjectRelease(v454);
    swift_bridgeObjectRelease(v453);
    swift_bridgeObjectRelease(v452);
    sub_1000045C8(v455, v456);
    sub_1000045C8(v457, v458);
    sub_1000045C8(v459, v460);
    swift_bridgeObjectRelease(v468);
    swift_bridgeObjectRelease(v467);
    swift_bridgeObjectRelease(v466);
    swift_bridgeObjectRelease(v465);
    swift_bridgeObjectRelease(v464);
    swift_bridgeObjectRelease(v463);
    swift_bridgeObjectRelease(v462);
    swift_bridgeObjectRelease(v461);
    sub_1000045C8(v469, v470);
    swift_bridgeObjectRelease(v473);
    swift_bridgeObjectRelease(v472);
    swift_bridgeObjectRelease(v471);
    sub_1000045C8(v474, v475);
    sub_1000045C8(v476, v477);
    sub_1000045C8(v478, v479);
    swift_bridgeObjectRelease(v480);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    unint64_t v16 = 0LL;
    unint64_t v14 = 0x18A61EE7F7E47F8LL;
    unint64_t v15 = 7LL;
    goto LABEL_4;
  }

  LOBYTE(v565) = 68;
  swift_bridgeObjectRetain(v440);
  uint64_t v134 = v1045;
  uint64_t v499 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  uint64_t v439 = v135;
  uint64_t v1045 = v134;
  if (v134)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease(v440);
    sub_1000045C8(v441, v442);
    swift_bridgeObjectRelease(v449);
    swift_bridgeObjectRelease(v448);
    swift_bridgeObjectRelease(v447);
    swift_bridgeObjectRelease(v446);
    swift_bridgeObjectRelease(v445);
    swift_bridgeObjectRelease(v444);
    swift_bridgeObjectRelease(v443);
    sub_1000045C8(v450, v451);
    swift_bridgeObjectRelease(v454);
    swift_bridgeObjectRelease(v453);
    swift_bridgeObjectRelease(v452);
    sub_1000045C8(v455, v456);
    sub_1000045C8(v457, v458);
    sub_1000045C8(v459, v460);
    swift_bridgeObjectRelease(v468);
    swift_bridgeObjectRelease(v467);
    swift_bridgeObjectRelease(v466);
    swift_bridgeObjectRelease(v465);
    swift_bridgeObjectRelease(v464);
    swift_bridgeObjectRelease(v463);
    swift_bridgeObjectRelease(v462);
    swift_bridgeObjectRelease(v461);
    sub_1000045C8(v469, v470);
    swift_bridgeObjectRelease(v473);
    swift_bridgeObjectRelease(v472);
    swift_bridgeObjectRelease(v471);
    sub_1000045C8(v474, v475);
    sub_1000045C8(v476, v477);
    sub_1000045C8(v478, v479);
    swift_bridgeObjectRelease(v480);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    unint64_t v16 = 0LL;
    unint64_t v14 = 0x18A61EE7F7E47F8LL;
    unint64_t v15 = 15LL;
    goto LABEL_4;
  }

  LOBYTE(v565) = 69;
  swift_bridgeObjectRetain(v439);
  uint64_t v136 = v1045;
  uint64_t v498 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  uint64_t v438 = v137;
  uint64_t v1045 = v136;
  if (v136)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease(v440);
    swift_bridgeObjectRelease(v439);
    sub_1000045C8(v441, v442);
    swift_bridgeObjectRelease(v449);
    swift_bridgeObjectRelease(v448);
    swift_bridgeObjectRelease(v447);
    swift_bridgeObjectRelease(v446);
    swift_bridgeObjectRelease(v445);
    swift_bridgeObjectRelease(v444);
    swift_bridgeObjectRelease(v443);
    sub_1000045C8(v450, v451);
    swift_bridgeObjectRelease(v454);
    swift_bridgeObjectRelease(v453);
    swift_bridgeObjectRelease(v452);
    sub_1000045C8(v455, v456);
    sub_1000045C8(v457, v458);
    sub_1000045C8(v459, v460);
    swift_bridgeObjectRelease(v468);
    swift_bridgeObjectRelease(v467);
    swift_bridgeObjectRelease(v466);
    swift_bridgeObjectRelease(v465);
    swift_bridgeObjectRelease(v464);
    swift_bridgeObjectRelease(v463);
    swift_bridgeObjectRelease(v462);
    swift_bridgeObjectRelease(v461);
    sub_1000045C8(v469, v470);
    swift_bridgeObjectRelease(v473);
    swift_bridgeObjectRelease(v472);
    swift_bridgeObjectRelease(v471);
    sub_1000045C8(v474, v475);
    sub_1000045C8(v476, v477);
    sub_1000045C8(v478, v479);
    swift_bridgeObjectRelease(v480);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    unint64_t v16 = 0LL;
    unint64_t v14 = 0x18A61EE7F7E47F8LL;
    unint64_t v15 = 31LL;
    goto LABEL_4;
  }

  LOBYTE(v565) = 70;
  swift_bridgeObjectRetain(v438);
  uint64_t v138 = v1045;
  uint64_t v497 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  uint64_t v437 = v139;
  uint64_t v1045 = v138;
  if (v138)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease(v440);
    swift_bridgeObjectRelease(v439);
    swift_bridgeObjectRelease(v438);
    sub_1000045C8(v441, v442);
    swift_bridgeObjectRelease(v449);
    swift_bridgeObjectRelease(v448);
    swift_bridgeObjectRelease(v447);
    swift_bridgeObjectRelease(v446);
    swift_bridgeObjectRelease(v445);
    swift_bridgeObjectRelease(v444);
    swift_bridgeObjectRelease(v443);
    sub_1000045C8(v450, v451);
    swift_bridgeObjectRelease(v454);
    swift_bridgeObjectRelease(v453);
    swift_bridgeObjectRelease(v452);
    sub_1000045C8(v455, v456);
    sub_1000045C8(v457, v458);
    sub_1000045C8(v459, v460);
    swift_bridgeObjectRelease(v468);
    swift_bridgeObjectRelease(v467);
    swift_bridgeObjectRelease(v466);
    swift_bridgeObjectRelease(v465);
    swift_bridgeObjectRelease(v464);
    swift_bridgeObjectRelease(v463);
    swift_bridgeObjectRelease(v462);
    swift_bridgeObjectRelease(v461);
    sub_1000045C8(v469, v470);
    swift_bridgeObjectRelease(v473);
    swift_bridgeObjectRelease(v472);
    swift_bridgeObjectRelease(v471);
    sub_1000045C8(v474, v475);
    sub_1000045C8(v476, v477);
    sub_1000045C8(v478, v479);
    swift_bridgeObjectRelease(v480);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    unint64_t v16 = 0LL;
    unint64_t v14 = 0x18A61EE7F7E47F8LL;
    unint64_t v15 = 63LL;
    goto LABEL_4;
  }

  LOBYTE(v565) = 71;
  swift_bridgeObjectRetain(v437);
  uint64_t v140 = v1045;
  uint64_t v496 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  uint64_t v436 = v141;
  uint64_t v1045 = v140;
  if (v140)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease(v440);
    swift_bridgeObjectRelease(v439);
    swift_bridgeObjectRelease(v438);
    swift_bridgeObjectRelease(v437);
    sub_1000045C8(v441, v442);
    swift_bridgeObjectRelease(v449);
    swift_bridgeObjectRelease(v448);
    swift_bridgeObjectRelease(v447);
    swift_bridgeObjectRelease(v446);
    swift_bridgeObjectRelease(v445);
    swift_bridgeObjectRelease(v444);
    swift_bridgeObjectRelease(v443);
    sub_1000045C8(v450, v451);
    swift_bridgeObjectRelease(v454);
    swift_bridgeObjectRelease(v453);
    swift_bridgeObjectRelease(v452);
    sub_1000045C8(v455, v456);
    sub_1000045C8(v457, v458);
    sub_1000045C8(v459, v460);
    swift_bridgeObjectRelease(v468);
    swift_bridgeObjectRelease(v467);
    swift_bridgeObjectRelease(v466);
    swift_bridgeObjectRelease(v465);
    swift_bridgeObjectRelease(v464);
    swift_bridgeObjectRelease(v463);
    swift_bridgeObjectRelease(v462);
    swift_bridgeObjectRelease(v461);
    sub_1000045C8(v469, v470);
    swift_bridgeObjectRelease(v473);
    swift_bridgeObjectRelease(v472);
    swift_bridgeObjectRelease(v471);
    sub_1000045C8(v474, v475);
    sub_1000045C8(v476, v477);
    sub_1000045C8(v478, v479);
    swift_bridgeObjectRelease(v480);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    unint64_t v16 = 0LL;
    unint64_t v14 = 0x18A61EE7F7E47F8LL;
    unint64_t v15 = 127LL;
    goto LABEL_4;
  }

  unint64_t v15 = 255LL;
  LOBYTE(v565) = 72;
  swift_bridgeObjectRetain(v436);
  uint64_t v142 = v1045;
  uint64_t v495 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  int v345 = v143;
  uint64_t v1045 = v142;
  if (v142)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease(v440);
    swift_bridgeObjectRelease(v439);
    swift_bridgeObjectRelease(v438);
    swift_bridgeObjectRelease(v437);
    swift_bridgeObjectRelease(v436);
    sub_1000045C8(v441, v442);
    swift_bridgeObjectRelease(v449);
    swift_bridgeObjectRelease(v448);
    swift_bridgeObjectRelease(v447);
    swift_bridgeObjectRelease(v446);
    swift_bridgeObjectRelease(v445);
    swift_bridgeObjectRelease(v444);
    swift_bridgeObjectRelease(v443);
    sub_1000045C8(v450, v451);
    swift_bridgeObjectRelease(v454);
    swift_bridgeObjectRelease(v453);
    swift_bridgeObjectRelease(v452);
    sub_1000045C8(v455, v456);
    sub_1000045C8(v457, v458);
    sub_1000045C8(v459, v460);
    swift_bridgeObjectRelease(v468);
    swift_bridgeObjectRelease(v467);
    swift_bridgeObjectRelease(v466);
    swift_bridgeObjectRelease(v465);
    swift_bridgeObjectRelease(v464);
    swift_bridgeObjectRelease(v463);
    swift_bridgeObjectRelease(v462);
    swift_bridgeObjectRelease(v461);
    sub_1000045C8(v469, v470);
    swift_bridgeObjectRelease(v473);
    swift_bridgeObjectRelease(v472);
    swift_bridgeObjectRelease(v471);
    sub_1000045C8(v474, v475);
    sub_1000045C8(v476, v477);
    sub_1000045C8(v478, v479);
    swift_bridgeObjectRelease(v480);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
LABEL_234:
    unint64_t v14 = 0x18A61EE7F7E47F8LL;
    unint64_t v16 = 0LL;
    goto LABEL_4;
  }

  char v997 = v345 & 1;
  LOBYTE(v565) = 73;
  uint64_t v494 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  uint64_t v435 = v144;
  uint64_t v1045 = 0LL;
  unint64_t v15 = 767LL;
  LOBYTE(v565) = 74;
  swift_bridgeObjectRetain(v144);
  uint64_t v145 = v1045;
  uint64_t v372 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  int v342 = v146;
  uint64_t v1045 = v145;
  if (v145)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease(v440);
    swift_bridgeObjectRelease(v439);
    swift_bridgeObjectRelease(v438);
    swift_bridgeObjectRelease(v437);
    swift_bridgeObjectRelease(v436);
    swift_bridgeObjectRelease(v435);
    sub_1000045C8(v441, v442);
    swift_bridgeObjectRelease(v449);
    swift_bridgeObjectRelease(v448);
    swift_bridgeObjectRelease(v447);
    swift_bridgeObjectRelease(v446);
    swift_bridgeObjectRelease(v445);
    swift_bridgeObjectRelease(v444);
    swift_bridgeObjectRelease(v443);
    sub_1000045C8(v450, v451);
    swift_bridgeObjectRelease(v454);
    swift_bridgeObjectRelease(v453);
    swift_bridgeObjectRelease(v452);
    sub_1000045C8(v455, v456);
    sub_1000045C8(v457, v458);
    sub_1000045C8(v459, v460);
    swift_bridgeObjectRelease(v468);
    swift_bridgeObjectRelease(v467);
    swift_bridgeObjectRelease(v466);
    swift_bridgeObjectRelease(v465);
    swift_bridgeObjectRelease(v464);
    swift_bridgeObjectRelease(v463);
    swift_bridgeObjectRelease(v462);
    swift_bridgeObjectRelease(v461);
    sub_1000045C8(v469, v470);
    swift_bridgeObjectRelease(v473);
    swift_bridgeObjectRelease(v472);
    swift_bridgeObjectRelease(v471);
    sub_1000045C8(v474, v475);
    sub_1000045C8(v476, v477);
    sub_1000045C8(v478, v479);
    swift_bridgeObjectRelease(v480);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    goto LABEL_234;
  }

  char v995 = v342 & 1;
  LOBYTE(v565) = 75;
  uint64_t v371 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  uint64_t v434 = v147;
  uint64_t v1045 = 0LL;
  unint64_t v15 = 2815LL;
  LOBYTE(v565) = 76;
  swift_bridgeObjectRetain(v147);
  uint64_t v148 = v1045;
  uint64_t v368 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  int v338 = v149;
  uint64_t v1045 = v148;
  if (v148)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease(v440);
    swift_bridgeObjectRelease(v439);
    swift_bridgeObjectRelease(v438);
    swift_bridgeObjectRelease(v437);
    swift_bridgeObjectRelease(v436);
    swift_bridgeObjectRelease(v435);
    swift_bridgeObjectRelease(v434);
    sub_1000045C8(v441, v442);
    swift_bridgeObjectRelease(v449);
    swift_bridgeObjectRelease(v448);
    swift_bridgeObjectRelease(v447);
    swift_bridgeObjectRelease(v446);
    swift_bridgeObjectRelease(v445);
    swift_bridgeObjectRelease(v444);
    swift_bridgeObjectRelease(v443);
    sub_1000045C8(v450, v451);
    swift_bridgeObjectRelease(v454);
    swift_bridgeObjectRelease(v453);
    swift_bridgeObjectRelease(v452);
    sub_1000045C8(v455, v456);
    sub_1000045C8(v457, v458);
    sub_1000045C8(v459, v460);
    swift_bridgeObjectRelease(v468);
    swift_bridgeObjectRelease(v467);
    swift_bridgeObjectRelease(v466);
    swift_bridgeObjectRelease(v465);
    swift_bridgeObjectRelease(v464);
    swift_bridgeObjectRelease(v463);
    swift_bridgeObjectRelease(v462);
    swift_bridgeObjectRelease(v461);
    sub_1000045C8(v469, v470);
    swift_bridgeObjectRelease(v473);
    swift_bridgeObjectRelease(v472);
    swift_bridgeObjectRelease(v471);
    sub_1000045C8(v474, v475);
    sub_1000045C8(v476, v477);
    sub_1000045C8(v478, v479);
    swift_bridgeObjectRelease(v480);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    goto LABEL_234;
  }

  char v993 = v338 & 1;
  LOBYTE(v565) = 77;
  int v367 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  uint64_t v1045 = 0LL;
  LOBYTE(v565) = 78;
  uint64_t v366 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  uint64_t v429 = v150;
  uint64_t v1045 = 0LL;
  unint64_t v15 = 19199LL;
  LOBYTE(v565) = 79;
  swift_bridgeObjectRetain(v150);
  uint64_t v151 = v1045;
  uint64_t v364 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  int v334 = v152;
  uint64_t v1045 = v151;
  if (v151)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease(v440);
    swift_bridgeObjectRelease(v439);
    swift_bridgeObjectRelease(v438);
    swift_bridgeObjectRelease(v437);
    swift_bridgeObjectRelease(v436);
    swift_bridgeObjectRelease(v435);
    swift_bridgeObjectRelease(v434);
    swift_bridgeObjectRelease(v429);
    sub_1000045C8(v441, v442);
    swift_bridgeObjectRelease(v449);
    swift_bridgeObjectRelease(v448);
    swift_bridgeObjectRelease(v447);
    swift_bridgeObjectRelease(v446);
    swift_bridgeObjectRelease(v445);
    swift_bridgeObjectRelease(v444);
    swift_bridgeObjectRelease(v443);
    sub_1000045C8(v450, v451);
    swift_bridgeObjectRelease(v454);
    swift_bridgeObjectRelease(v453);
    swift_bridgeObjectRelease(v452);
    sub_1000045C8(v455, v456);
    sub_1000045C8(v457, v458);
    sub_1000045C8(v459, v460);
    swift_bridgeObjectRelease(v468);
    swift_bridgeObjectRelease(v467);
    swift_bridgeObjectRelease(v466);
    swift_bridgeObjectRelease(v465);
    swift_bridgeObjectRelease(v464);
    swift_bridgeObjectRelease(v463);
    swift_bridgeObjectRelease(v462);
    swift_bridgeObjectRelease(v461);
    sub_1000045C8(v469, v470);
    swift_bridgeObjectRelease(v473);
    swift_bridgeObjectRelease(v472);
    swift_bridgeObjectRelease(v471);
    sub_1000045C8(v474, v475);
    sub_1000045C8(v476, v477);
    sub_1000045C8(v478, v479);
    swift_bridgeObjectRelease(v480);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    goto LABEL_234;
  }

  char v990 = v334 & 1;
  LOBYTE(v565) = 80;
  uint64_t v362 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  int v337 = v153;
  uint64_t v1045 = 0LL;
  char v988 = v153 & 1;
  LOBYTE(v565) = 81;
  uint64_t v360 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  uint64_t v418 = v154;
  uint64_t v1045 = 0LL;
  LOBYTE(v564[0]) = 82;
  unint64_t v155 = sub_100056B2C();
  swift_bridgeObjectRetain(v418);
  unint64_t v156 = v155;
  uint64_t v157 = v1045;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v565,  &type metadata for IDSMadridProtocolHttpHeaders,  v564,  v5,  &type metadata for IDSMadridProtocolHttpHeaders,  v156);
  uint64_t v1045 = v157;
  if (v157)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease(v440);
    swift_bridgeObjectRelease(v439);
    swift_bridgeObjectRelease(v438);
    swift_bridgeObjectRelease(v437);
    swift_bridgeObjectRelease(v436);
    swift_bridgeObjectRelease(v435);
    swift_bridgeObjectRelease(v434);
    swift_bridgeObjectRelease(v429);
    swift_bridgeObjectRelease(v418);
    sub_1000045C8(v441, v442);
    swift_bridgeObjectRelease(v449);
    swift_bridgeObjectRelease(v448);
    swift_bridgeObjectRelease(v447);
    swift_bridgeObjectRelease(v446);
    swift_bridgeObjectRelease(v445);
    swift_bridgeObjectRelease(v444);
    swift_bridgeObjectRelease(v443);
    sub_1000045C8(v450, v451);
    swift_bridgeObjectRelease(v454);
    swift_bridgeObjectRelease(v453);
    swift_bridgeObjectRelease(v452);
    sub_1000045C8(v455, v456);
    sub_1000045C8(v457, v458);
    sub_1000045C8(v459, v460);
    swift_bridgeObjectRelease(v468);
    swift_bridgeObjectRelease(v467);
    swift_bridgeObjectRelease(v466);
    swift_bridgeObjectRelease(v465);
    swift_bridgeObjectRelease(v464);
    swift_bridgeObjectRelease(v463);
    swift_bridgeObjectRelease(v462);
    swift_bridgeObjectRelease(v461);
    sub_1000045C8(v469, v470);
    swift_bridgeObjectRelease(v473);
    swift_bridgeObjectRelease(v472);
    swift_bridgeObjectRelease(v471);
    sub_1000045C8(v474, v475);
    sub_1000045C8(v476, v477);
    sub_1000045C8(v478, v479);
    swift_bridgeObjectRelease(v480);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    unint64_t v16 = 0LL;
    unint64_t v14 = 0x18A61EE7F7E47F8LL;
    unint64_t v15 = 150271LL;
    goto LABEL_4;
  }

  LOBYTE(v564[0]) = 83;
  uint64_t v433 = v576;
  uint64_t v432 = v575;
  uint64_t v430 = v574;
  uint64_t v427 = v573;
  uint64_t v414 = v565;
  uint64_t v415 = v566;
  uint64_t v417 = v567;
  uint64_t v419 = v568;
  uint64_t v420 = v569;
  uint64_t v422 = v570;
  uint64_t v424 = v571;
  uint64_t v425 = v572;
  sub_100056B70(v565, v566, v567, v568, v569, v570, v571, v572, v573, v574, v575, v576);
  uint64_t v158 = v1045;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v565,  &type metadata for Data,  v564,  v5,  &type metadata for Data,  v556);
  uint64_t v1045 = v158;
  if (v158)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_1000569D0(v414, v415, v417, v419, v420, v422, v424, v425, v427, v430, v432, v433);
    swift_bridgeObjectRelease(v440);
    swift_bridgeObjectRelease(v439);
    swift_bridgeObjectRelease(v438);
    swift_bridgeObjectRelease(v437);
    swift_bridgeObjectRelease(v436);
    swift_bridgeObjectRelease(v435);
    swift_bridgeObjectRelease(v434);
    swift_bridgeObjectRelease(v429);
    swift_bridgeObjectRelease(v418);
    sub_1000045C8(v441, v442);
    swift_bridgeObjectRelease(v449);
    swift_bridgeObjectRelease(v448);
    swift_bridgeObjectRelease(v447);
    swift_bridgeObjectRelease(v446);
    swift_bridgeObjectRelease(v445);
    swift_bridgeObjectRelease(v444);
    swift_bridgeObjectRelease(v443);
    sub_1000045C8(v450, v451);
    swift_bridgeObjectRelease(v454);
    swift_bridgeObjectRelease(v453);
    swift_bridgeObjectRelease(v452);
    sub_1000045C8(v455, v456);
    sub_1000045C8(v457, v458);
    sub_1000045C8(v459, v460);
    swift_bridgeObjectRelease(v468);
    swift_bridgeObjectRelease(v467);
    swift_bridgeObjectRelease(v466);
    swift_bridgeObjectRelease(v465);
    swift_bridgeObjectRelease(v464);
    swift_bridgeObjectRelease(v463);
    swift_bridgeObjectRelease(v462);
    swift_bridgeObjectRelease(v461);
    sub_1000045C8(v469, v470);
    swift_bridgeObjectRelease(v473);
    swift_bridgeObjectRelease(v472);
    swift_bridgeObjectRelease(v471);
    sub_1000045C8(v474, v475);
    sub_1000045C8(v476, v477);
    sub_1000045C8(v478, v479);
    swift_bridgeObjectRelease(v480);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    unint64_t v16 = 0LL;
    unint64_t v14 = 0x18A61EE7F7E47F8LL;
    unint64_t v15 = 412415LL;
    goto LABEL_4;
  }

  uint64_t v159 = v565;
  LOBYTE(v565) = 84;
  uint64_t v428 = v159;
  unint64_t v431 = v566;
  sub_1000045B4(v159, v566);
  uint64_t v160 = v1045;
  uint64_t v357 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  uint64_t v426 = v161;
  uint64_t v1045 = v160;
  if (v160)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_1000045C8(v428, v431);
    sub_1000569D0(v414, v415, v417, v419, v420, v422, v424, v425, v427, v430, v432, v433);
    swift_bridgeObjectRelease(v440);
    swift_bridgeObjectRelease(v439);
    swift_bridgeObjectRelease(v438);
    swift_bridgeObjectRelease(v437);
    swift_bridgeObjectRelease(v436);
    swift_bridgeObjectRelease(v435);
    swift_bridgeObjectRelease(v434);
    swift_bridgeObjectRelease(v429);
    swift_bridgeObjectRelease(v418);
    sub_1000045C8(v441, v442);
    swift_bridgeObjectRelease(v449);
    swift_bridgeObjectRelease(v448);
    swift_bridgeObjectRelease(v447);
    swift_bridgeObjectRelease(v446);
    swift_bridgeObjectRelease(v445);
    swift_bridgeObjectRelease(v444);
    swift_bridgeObjectRelease(v443);
    sub_1000045C8(v450, v451);
    swift_bridgeObjectRelease(v454);
    swift_bridgeObjectRelease(v453);
    swift_bridgeObjectRelease(v452);
    sub_1000045C8(v455, v456);
    sub_1000045C8(v457, v458);
    sub_1000045C8(v459, v460);
    swift_bridgeObjectRelease(v468);
    swift_bridgeObjectRelease(v467);
    swift_bridgeObjectRelease(v466);
    swift_bridgeObjectRelease(v465);
    swift_bridgeObjectRelease(v464);
    swift_bridgeObjectRelease(v463);
    swift_bridgeObjectRelease(v462);
    swift_bridgeObjectRelease(v461);
    sub_1000045C8(v469, v470);
    swift_bridgeObjectRelease(v473);
    swift_bridgeObjectRelease(v472);
    swift_bridgeObjectRelease(v471);
    sub_1000045C8(v474, v475);
    sub_1000045C8(v476, v477);
    sub_1000045C8(v478, v479);
    swift_bridgeObjectRelease(v480);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    unint64_t v16 = 0LL;
    unint64_t v14 = 0x18A61EE7F7E47F8LL;
    unint64_t v15 = 936703LL;
    goto LABEL_4;
  }

  LOBYTE(v564[0]) = 85;
  swift_bridgeObjectRetain(v426);
  uint64_t v162 = v1045;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v565,  &type metadata for Data,  v564,  v5,  &type metadata for Data,  v556);
  uint64_t v1045 = v162;
  if (v162)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease(v426);
    sub_1000045C8(v428, v431);
    sub_1000569D0(v414, v415, v417, v419, v420, v422, v424, v425, v427, v430, v432, v433);
    swift_bridgeObjectRelease(v440);
    swift_bridgeObjectRelease(v439);
    swift_bridgeObjectRelease(v438);
    swift_bridgeObjectRelease(v437);
    swift_bridgeObjectRelease(v436);
    swift_bridgeObjectRelease(v435);
    swift_bridgeObjectRelease(v434);
    swift_bridgeObjectRelease(v429);
    swift_bridgeObjectRelease(v418);
    sub_1000045C8(v441, v442);
    swift_bridgeObjectRelease(v449);
    swift_bridgeObjectRelease(v448);
    swift_bridgeObjectRelease(v447);
    swift_bridgeObjectRelease(v446);
    swift_bridgeObjectRelease(v445);
    swift_bridgeObjectRelease(v444);
    swift_bridgeObjectRelease(v443);
    sub_1000045C8(v450, v451);
    swift_bridgeObjectRelease(v454);
    swift_bridgeObjectRelease(v453);
    swift_bridgeObjectRelease(v452);
    sub_1000045C8(v455, v456);
    sub_1000045C8(v457, v458);
    sub_1000045C8(v459, v460);
    swift_bridgeObjectRelease(v468);
    swift_bridgeObjectRelease(v467);
    swift_bridgeObjectRelease(v466);
    swift_bridgeObjectRelease(v465);
    swift_bridgeObjectRelease(v464);
    swift_bridgeObjectRelease(v463);
    swift_bridgeObjectRelease(v462);
    swift_bridgeObjectRelease(v461);
    sub_1000045C8(v469, v470);
    swift_bridgeObjectRelease(v473);
    swift_bridgeObjectRelease(v472);
    swift_bridgeObjectRelease(v471);
    sub_1000045C8(v474, v475);
    sub_1000045C8(v476, v477);
    sub_1000045C8(v478, v479);
    swift_bridgeObjectRelease(v480);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    unint64_t v16 = 0LL;
    unint64_t v14 = 0x18A61EE7F7E47F8LL;
    unint64_t v15 = 1985279LL;
    goto LABEL_4;
  }

  unint64_t v15 = 4082431LL;
  uint64_t v163 = v565;
  LOBYTE(v565) = 86;
  uint64_t v421 = v163;
  unint64_t v423 = v566;
  sub_1000045B4(v163, v566);
  uint64_t v164 = v1045;
  uint64_t v354 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  int v330 = v165;
  uint64_t v1045 = v164;
  if (v164)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_1000045C8(v421, v423);
    swift_bridgeObjectRelease(v426);
    sub_1000045C8(v428, v431);
    sub_1000569D0(v414, v415, v417, v419, v420, v422, v424, v425, v427, v430, v432, v433);
    swift_bridgeObjectRelease(v440);
    swift_bridgeObjectRelease(v439);
    swift_bridgeObjectRelease(v438);
    swift_bridgeObjectRelease(v437);
    swift_bridgeObjectRelease(v436);
    swift_bridgeObjectRelease(v435);
    swift_bridgeObjectRelease(v434);
    swift_bridgeObjectRelease(v429);
    swift_bridgeObjectRelease(v418);
    sub_1000045C8(v441, v442);
    swift_bridgeObjectRelease(v449);
    swift_bridgeObjectRelease(v448);
    swift_bridgeObjectRelease(v447);
    swift_bridgeObjectRelease(v446);
    swift_bridgeObjectRelease(v445);
    swift_bridgeObjectRelease(v444);
    swift_bridgeObjectRelease(v443);
    sub_1000045C8(v450, v451);
    swift_bridgeObjectRelease(v454);
    swift_bridgeObjectRelease(v453);
    swift_bridgeObjectRelease(v452);
    sub_1000045C8(v455, v456);
    sub_1000045C8(v457, v458);
    sub_1000045C8(v459, v460);
    swift_bridgeObjectRelease(v468);
    swift_bridgeObjectRelease(v467);
    swift_bridgeObjectRelease(v466);
    swift_bridgeObjectRelease(v465);
    swift_bridgeObjectRelease(v464);
    swift_bridgeObjectRelease(v463);
    swift_bridgeObjectRelease(v462);
    swift_bridgeObjectRelease(v461);
    sub_1000045C8(v469, v470);
    swift_bridgeObjectRelease(v473);
    swift_bridgeObjectRelease(v472);
    swift_bridgeObjectRelease(v471);
    sub_1000045C8(v474, v475);
    sub_1000045C8(v476, v477);
    sub_1000045C8(v478, v479);
    swift_bridgeObjectRelease(v480);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    goto LABEL_234;
  }

  char v986 = v330 & 1;
  LOBYTE(v565) = 87;
  uint64_t v353 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  uint64_t v416 = v166;
  uint64_t v1045 = 0LL;
  unint64_t v15 = 12471039LL;
  LOBYTE(v565) = 88;
  swift_bridgeObjectRetain(v416);
  uint64_t v167 = v1045;
  int v352 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  uint64_t v1045 = v167;
  if (v167)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease(v416);
    sub_1000045C8(v421, v423);
    swift_bridgeObjectRelease(v426);
    sub_1000045C8(v428, v431);
    sub_1000569D0(v414, v415, v417, v419, v420, v422, v424, v425, v427, v430, v432, v433);
    swift_bridgeObjectRelease(v440);
    swift_bridgeObjectRelease(v439);
    swift_bridgeObjectRelease(v438);
    swift_bridgeObjectRelease(v437);
    swift_bridgeObjectRelease(v436);
    swift_bridgeObjectRelease(v435);
    swift_bridgeObjectRelease(v434);
    swift_bridgeObjectRelease(v429);
    swift_bridgeObjectRelease(v418);
    sub_1000045C8(v441, v442);
    swift_bridgeObjectRelease(v449);
    swift_bridgeObjectRelease(v448);
    swift_bridgeObjectRelease(v447);
    swift_bridgeObjectRelease(v446);
    swift_bridgeObjectRelease(v445);
    swift_bridgeObjectRelease(v444);
    swift_bridgeObjectRelease(v443);
    sub_1000045C8(v450, v451);
    swift_bridgeObjectRelease(v454);
    swift_bridgeObjectRelease(v453);
    swift_bridgeObjectRelease(v452);
    sub_1000045C8(v455, v456);
    sub_1000045C8(v457, v458);
    sub_1000045C8(v459, v460);
    swift_bridgeObjectRelease(v468);
    swift_bridgeObjectRelease(v467);
    swift_bridgeObjectRelease(v466);
    swift_bridgeObjectRelease(v465);
    swift_bridgeObjectRelease(v464);
    swift_bridgeObjectRelease(v463);
    swift_bridgeObjectRelease(v462);
    swift_bridgeObjectRelease(v461);
    sub_1000045C8(v469, v470);
    swift_bridgeObjectRelease(v473);
    swift_bridgeObjectRelease(v472);
    swift_bridgeObjectRelease(v471);
    sub_1000045C8(v474, v475);
    sub_1000045C8(v476, v477);
    sub_1000045C8(v478, v479);
    swift_bridgeObjectRelease(v480);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    goto LABEL_234;
  }

  LOBYTE(v565) = 89;
  int v351 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  uint64_t v1045 = 0LL;
  LOBYTE(v565) = 90;
  int v350 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  uint64_t v1045 = 0LL;
  LOBYTE(v565) = 91;
  uint64_t v349 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  int v326 = v168;
  uint64_t v1045 = 0LL;
  char v982 = v168 & 1;
  LOBYTE(v565) = 92;
  uint64_t v348 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  uint64_t v413 = v169;
  uint64_t v1045 = 0LL;
  LOBYTE(v564[0]) = 93;
  swift_bridgeObjectRetain(v413);
  uint64_t v170 = v1045;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v565,  &type metadata for Data,  v564,  v5,  &type metadata for Data,  v556);
  uint64_t v1045 = v170;
  if (v170)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease(v416);
    swift_bridgeObjectRelease(v413);
    sub_1000045C8(v421, v423);
    swift_bridgeObjectRelease(v426);
    sub_1000045C8(v428, v431);
    sub_1000569D0(v414, v415, v417, v419, v420, v422, v424, v425, v427, v430, v432, v433);
    swift_bridgeObjectRelease(v440);
    swift_bridgeObjectRelease(v439);
    swift_bridgeObjectRelease(v438);
    swift_bridgeObjectRelease(v437);
    swift_bridgeObjectRelease(v436);
    swift_bridgeObjectRelease(v435);
    swift_bridgeObjectRelease(v434);
    swift_bridgeObjectRelease(v429);
    swift_bridgeObjectRelease(v418);
    sub_1000045C8(v441, v442);
    swift_bridgeObjectRelease(v449);
    swift_bridgeObjectRelease(v448);
    swift_bridgeObjectRelease(v447);
    swift_bridgeObjectRelease(v446);
    swift_bridgeObjectRelease(v445);
    swift_bridgeObjectRelease(v444);
    swift_bridgeObjectRelease(v443);
    sub_1000045C8(v450, v451);
    swift_bridgeObjectRelease(v454);
    swift_bridgeObjectRelease(v453);
    swift_bridgeObjectRelease(v452);
    sub_1000045C8(v455, v456);
    sub_1000045C8(v457, v458);
    sub_1000045C8(v459, v460);
    swift_bridgeObjectRelease(v468);
    swift_bridgeObjectRelease(v467);
    swift_bridgeObjectRelease(v466);
    swift_bridgeObjectRelease(v465);
    swift_bridgeObjectRelease(v464);
    swift_bridgeObjectRelease(v463);
    swift_bridgeObjectRelease(v462);
    swift_bridgeObjectRelease(v461);
    sub_1000045C8(v469, v470);
    swift_bridgeObjectRelease(v473);
    swift_bridgeObjectRelease(v472);
    swift_bridgeObjectRelease(v471);
    sub_1000045C8(v474, v475);
    sub_1000045C8(v476, v477);
    sub_1000045C8(v478, v479);
    swift_bridgeObjectRelease(v480);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    unint64_t v16 = 0LL;
    unint64_t v14 = 0x18A61EE7F7E47F8LL;
    unint64_t v15 = 280906495LL;
    goto LABEL_4;
  }

  LOBYTE(v564[0]) = 94;
  uint64_t v411 = v565;
  unint64_t v412 = v566;
  sub_1000045B4(v565, v566);
  uint64_t v171 = v1045;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v565,  &type metadata for Data,  v564,  v5,  &type metadata for Data,  v556);
  uint64_t v1045 = v171;
  if (v171)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_1000045C8(v411, v412);
    swift_bridgeObjectRelease(v416);
    swift_bridgeObjectRelease(v413);
    sub_1000045C8(v421, v423);
    swift_bridgeObjectRelease(v426);
    sub_1000045C8(v428, v431);
    sub_1000569D0(v414, v415, v417, v419, v420, v422, v424, v425, v427, v430, v432, v433);
    swift_bridgeObjectRelease(v440);
    swift_bridgeObjectRelease(v439);
    swift_bridgeObjectRelease(v438);
    swift_bridgeObjectRelease(v437);
    swift_bridgeObjectRelease(v436);
    swift_bridgeObjectRelease(v435);
    swift_bridgeObjectRelease(v434);
    swift_bridgeObjectRelease(v429);
    swift_bridgeObjectRelease(v418);
    sub_1000045C8(v441, v442);
    swift_bridgeObjectRelease(v449);
    swift_bridgeObjectRelease(v448);
    swift_bridgeObjectRelease(v447);
    swift_bridgeObjectRelease(v446);
    swift_bridgeObjectRelease(v445);
    swift_bridgeObjectRelease(v444);
    swift_bridgeObjectRelease(v443);
    sub_1000045C8(v450, v451);
    swift_bridgeObjectRelease(v454);
    swift_bridgeObjectRelease(v453);
    swift_bridgeObjectRelease(v452);
    sub_1000045C8(v455, v456);
    sub_1000045C8(v457, v458);
    sub_1000045C8(v459, v460);
    swift_bridgeObjectRelease(v468);
    swift_bridgeObjectRelease(v467);
    swift_bridgeObjectRelease(v466);
    swift_bridgeObjectRelease(v465);
    swift_bridgeObjectRelease(v464);
    swift_bridgeObjectRelease(v463);
    swift_bridgeObjectRelease(v462);
    swift_bridgeObjectRelease(v461);
    sub_1000045C8(v469, v470);
    swift_bridgeObjectRelease(v473);
    swift_bridgeObjectRelease(v472);
    swift_bridgeObjectRelease(v471);
    sub_1000045C8(v474, v475);
    sub_1000045C8(v476, v477);
    sub_1000045C8(v478, v479);
    swift_bridgeObjectRelease(v480);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    unint64_t v16 = 0LL;
    unint64_t v14 = 0x18A61EE7F7E47F8LL;
    unint64_t v15 = 817777407LL;
    goto LABEL_4;
  }

  unint64_t v15 = 1891519231LL;
  uint64_t v172 = v565;
  LOBYTE(v565) = 95;
  uint64_t v409 = v172;
  unint64_t v410 = v566;
  sub_1000045B4(v172, v566);
  uint64_t v173 = v1045;
  uint64_t v347 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  int v317 = v174;
  uint64_t v1045 = v173;
  if (v173)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_1000045C8(v409, v410);
    sub_1000045C8(v411, v412);
    swift_bridgeObjectRelease(v416);
    swift_bridgeObjectRelease(v413);
    sub_1000045C8(v421, v423);
    swift_bridgeObjectRelease(v426);
    sub_1000045C8(v428, v431);
    sub_1000569D0(v414, v415, v417, v419, v420, v422, v424, v425, v427, v430, v432, v433);
    swift_bridgeObjectRelease(v440);
    swift_bridgeObjectRelease(v439);
    swift_bridgeObjectRelease(v438);
    swift_bridgeObjectRelease(v437);
    swift_bridgeObjectRelease(v436);
    swift_bridgeObjectRelease(v435);
    swift_bridgeObjectRelease(v434);
    swift_bridgeObjectRelease(v429);
    swift_bridgeObjectRelease(v418);
    sub_1000045C8(v441, v442);
    swift_bridgeObjectRelease(v449);
    swift_bridgeObjectRelease(v448);
    swift_bridgeObjectRelease(v447);
    swift_bridgeObjectRelease(v446);
    swift_bridgeObjectRelease(v445);
    swift_bridgeObjectRelease(v444);
    swift_bridgeObjectRelease(v443);
    sub_1000045C8(v450, v451);
    swift_bridgeObjectRelease(v454);
    swift_bridgeObjectRelease(v453);
    swift_bridgeObjectRelease(v452);
    sub_1000045C8(v455, v456);
    sub_1000045C8(v457, v458);
    sub_1000045C8(v459, v460);
    swift_bridgeObjectRelease(v468);
    swift_bridgeObjectRelease(v467);
    swift_bridgeObjectRelease(v466);
    swift_bridgeObjectRelease(v465);
    swift_bridgeObjectRelease(v464);
    swift_bridgeObjectRelease(v463);
    swift_bridgeObjectRelease(v462);
    swift_bridgeObjectRelease(v461);
    sub_1000045C8(v469, v470);
    swift_bridgeObjectRelease(v473);
    swift_bridgeObjectRelease(v472);
    swift_bridgeObjectRelease(v471);
    sub_1000045C8(v474, v475);
    sub_1000045C8(v476, v477);
    sub_1000045C8(v478, v479);
    swift_bridgeObjectRelease(v480);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    goto LABEL_234;
  }

  char v980 = v317 & 1;
  LOBYTE(v565) = 96;
  int v346 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  uint64_t v1045 = 0LL;
  LOBYTE(v565) = 97;
  int v344 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  uint64_t v1045 = 0LL;
  LOBYTE(v565) = 98;
  uint64_t v343 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  int v313 = v175;
  uint64_t v1045 = 0LL;
  char v977 = v175 & 1;
  LOBYTE(v565) = 99;
  uint64_t v341 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  int v312 = v176;
  uint64_t v1045 = 0LL;
  char v975 = v176 & 1;
  LOBYTE(v565) = 100;
  int v340 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  uint64_t v1045 = 0LL;
  LOBYTE(v565) = 101;
  uint64_t v339 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  int v310 = v177;
  uint64_t v1045 = 0LL;
  char v972 = v177 & 1;
  LOBYTE(v565) = 102;
  uint64_t v336 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  int v308 = v178;
  uint64_t v1045 = 0LL;
  char v970 = v178 & 1;
  LOBYTE(v565) = 103;
  uint64_t v335 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  uint64_t v408 = v179;
  uint64_t v1045 = 0LL;
  unint64_t v15 = 0x8070BE4AFFLL;
  LOBYTE(v565) = 104;
  swift_bridgeObjectRetain(v408);
  uint64_t v180 = v1045;
  uint64_t v333 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  int v305 = v181;
  uint64_t v1045 = v180;
  if (v180)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease(v408);
    sub_1000045C8(v409, v410);
    sub_1000045C8(v411, v412);
    swift_bridgeObjectRelease(v416);
    swift_bridgeObjectRelease(v413);
    sub_1000045C8(v421, v423);
    swift_bridgeObjectRelease(v426);
    sub_1000045C8(v428, v431);
    sub_1000569D0(v414, v415, v417, v419, v420, v422, v424, v425, v427, v430, v432, v433);
    swift_bridgeObjectRelease(v440);
    swift_bridgeObjectRelease(v439);
    swift_bridgeObjectRelease(v438);
    swift_bridgeObjectRelease(v437);
    swift_bridgeObjectRelease(v436);
    swift_bridgeObjectRelease(v435);
    swift_bridgeObjectRelease(v434);
    swift_bridgeObjectRelease(v429);
    swift_bridgeObjectRelease(v418);
    sub_1000045C8(v441, v442);
    swift_bridgeObjectRelease(v449);
    swift_bridgeObjectRelease(v448);
    swift_bridgeObjectRelease(v447);
    swift_bridgeObjectRelease(v446);
    swift_bridgeObjectRelease(v445);
    swift_bridgeObjectRelease(v444);
    swift_bridgeObjectRelease(v443);
    sub_1000045C8(v450, v451);
    swift_bridgeObjectRelease(v454);
    swift_bridgeObjectRelease(v453);
    swift_bridgeObjectRelease(v452);
    sub_1000045C8(v455, v456);
    sub_1000045C8(v457, v458);
    sub_1000045C8(v459, v460);
    swift_bridgeObjectRelease(v468);
    swift_bridgeObjectRelease(v467);
    swift_bridgeObjectRelease(v466);
    swift_bridgeObjectRelease(v465);
    swift_bridgeObjectRelease(v464);
    swift_bridgeObjectRelease(v463);
    swift_bridgeObjectRelease(v462);
    swift_bridgeObjectRelease(v461);
    sub_1000045C8(v469, v470);
    swift_bridgeObjectRelease(v473);
    swift_bridgeObjectRelease(v472);
    swift_bridgeObjectRelease(v471);
    sub_1000045C8(v474, v475);
    sub_1000045C8(v476, v477);
    sub_1000045C8(v478, v479);
    swift_bridgeObjectRelease(v480);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    goto LABEL_234;
  }

  char v968 = v305 & 1;
  LOBYTE(v565) = 105;
  uint64_t v332 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  int v303 = v182;
  uint64_t v1045 = 0LL;
  char v966 = v182 & 1;
  LOBYTE(v564[0]) = 106;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v565,  &type metadata for Data,  v564,  v5,  &type metadata for Data,  v556);
  uint64_t v1045 = 0LL;
  LOBYTE(v564[0]) = 107;
  uint64_t v407 = v565;
  unint64_t v406 = v566;
  sub_1000045B4(v565, v566);
  uint64_t v183 = v1045;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v565,  &type metadata for Data,  v564,  v5,  &type metadata for Data,  v556);
  uint64_t v1045 = v183;
  if (v183)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_1000045C8(v407, v406);
    swift_bridgeObjectRelease(v408);
    sub_1000045C8(v409, v410);
    sub_1000045C8(v411, v412);
    swift_bridgeObjectRelease(v416);
    swift_bridgeObjectRelease(v413);
    sub_1000045C8(v421, v423);
    swift_bridgeObjectRelease(v426);
    sub_1000045C8(v428, v431);
    sub_1000569D0(v414, v415, v417, v419, v420, v422, v424, v425, v427, v430, v432, v433);
    swift_bridgeObjectRelease(v440);
    swift_bridgeObjectRelease(v439);
    swift_bridgeObjectRelease(v438);
    swift_bridgeObjectRelease(v437);
    swift_bridgeObjectRelease(v436);
    swift_bridgeObjectRelease(v435);
    swift_bridgeObjectRelease(v434);
    swift_bridgeObjectRelease(v429);
    swift_bridgeObjectRelease(v418);
    sub_1000045C8(v441, v442);
    swift_bridgeObjectRelease(v449);
    swift_bridgeObjectRelease(v448);
    swift_bridgeObjectRelease(v447);
    swift_bridgeObjectRelease(v446);
    swift_bridgeObjectRelease(v445);
    swift_bridgeObjectRelease(v444);
    swift_bridgeObjectRelease(v443);
    sub_1000045C8(v450, v451);
    swift_bridgeObjectRelease(v454);
    swift_bridgeObjectRelease(v453);
    swift_bridgeObjectRelease(v452);
    sub_1000045C8(v455, v456);
    sub_1000045C8(v457, v458);
    sub_1000045C8(v459, v460);
    swift_bridgeObjectRelease(v468);
    swift_bridgeObjectRelease(v467);
    swift_bridgeObjectRelease(v466);
    swift_bridgeObjectRelease(v465);
    swift_bridgeObjectRelease(v464);
    swift_bridgeObjectRelease(v463);
    swift_bridgeObjectRelease(v462);
    swift_bridgeObjectRelease(v461);
    sub_1000045C8(v469, v470);
    swift_bridgeObjectRelease(v473);
    swift_bridgeObjectRelease(v472);
    swift_bridgeObjectRelease(v471);
    sub_1000045C8(v474, v475);
    sub_1000045C8(v476, v477);
    sub_1000045C8(v478, v479);
    swift_bridgeObjectRelease(v480);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    unint64_t v16 = 0LL;
    unint64_t v15 = 0x48070BE4AFFLL;
    unint64_t v14 = 0x18A61EE7F7E47F8LL;
    goto LABEL_4;
  }

  unint64_t v15 = 0xC8070BE4AFFLL;
  uint64_t v184 = v565;
  LOBYTE(v565) = 108;
  uint64_t v405 = v184;
  unint64_t v404 = v566;
  sub_1000045B4(v184, v566);
  uint64_t v185 = v1045;
  uint64_t v331 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  int v296 = v186;
  uint64_t v1045 = v185;
  if (v185)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_1000045C8(v405, v404);
    sub_1000045C8(v407, v406);
    swift_bridgeObjectRelease(v408);
    sub_1000045C8(v409, v410);
    sub_1000045C8(v411, v412);
    swift_bridgeObjectRelease(v416);
    swift_bridgeObjectRelease(v413);
    sub_1000045C8(v421, v423);
    swift_bridgeObjectRelease(v426);
    sub_1000045C8(v428, v431);
    sub_1000569D0(v414, v415, v417, v419, v420, v422, v424, v425, v427, v430, v432, v433);
    swift_bridgeObjectRelease(v440);
    swift_bridgeObjectRelease(v439);
    swift_bridgeObjectRelease(v438);
    swift_bridgeObjectRelease(v437);
    swift_bridgeObjectRelease(v436);
    swift_bridgeObjectRelease(v435);
    swift_bridgeObjectRelease(v434);
    swift_bridgeObjectRelease(v429);
    swift_bridgeObjectRelease(v418);
    sub_1000045C8(v441, v442);
    swift_bridgeObjectRelease(v449);
    swift_bridgeObjectRelease(v448);
    swift_bridgeObjectRelease(v447);
    swift_bridgeObjectRelease(v446);
    swift_bridgeObjectRelease(v445);
    swift_bridgeObjectRelease(v444);
    swift_bridgeObjectRelease(v443);
    sub_1000045C8(v450, v451);
    swift_bridgeObjectRelease(v454);
    swift_bridgeObjectRelease(v453);
    swift_bridgeObjectRelease(v452);
    sub_1000045C8(v455, v456);
    sub_1000045C8(v457, v458);
    sub_1000045C8(v459, v460);
    swift_bridgeObjectRelease(v468);
    swift_bridgeObjectRelease(v467);
    swift_bridgeObjectRelease(v466);
    swift_bridgeObjectRelease(v465);
    swift_bridgeObjectRelease(v464);
    swift_bridgeObjectRelease(v463);
    swift_bridgeObjectRelease(v462);
    swift_bridgeObjectRelease(v461);
    sub_1000045C8(v469, v470);
    swift_bridgeObjectRelease(v473);
    swift_bridgeObjectRelease(v472);
    swift_bridgeObjectRelease(v471);
    sub_1000045C8(v474, v475);
    sub_1000045C8(v476, v477);
    sub_1000045C8(v478, v479);
    swift_bridgeObjectRelease(v480);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    goto LABEL_234;
  }

  char v964 = v296 & 1;
  LOBYTE(v564[0]) = 109;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v565,  &type metadata for Data,  v564,  v5,  &type metadata for Data,  v556);
  uint64_t v1045 = 0LL;
  LOBYTE(v564[0]) = 110;
  uint64_t v403 = v565;
  unint64_t v402 = v566;
  sub_1000045B4(v565, v566);
  uint64_t v187 = v1045;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v565,  &type metadata for Data,  v564,  v5,  &type metadata for Data,  v556);
  uint64_t v1045 = v187;
  if (v187)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_1000045C8(v403, v402);
    sub_1000045C8(v405, v404);
    sub_1000045C8(v407, v406);
    swift_bridgeObjectRelease(v408);
    sub_1000045C8(v409, v410);
    sub_1000045C8(v411, v412);
    swift_bridgeObjectRelease(v416);
    swift_bridgeObjectRelease(v413);
    sub_1000045C8(v421, v423);
    swift_bridgeObjectRelease(v426);
    sub_1000045C8(v428, v431);
    sub_1000569D0(v414, v415, v417, v419, v420, v422, v424, v425, v427, v430, v432, v433);
    swift_bridgeObjectRelease(v440);
    swift_bridgeObjectRelease(v439);
    swift_bridgeObjectRelease(v438);
    swift_bridgeObjectRelease(v437);
    swift_bridgeObjectRelease(v436);
    swift_bridgeObjectRelease(v435);
    swift_bridgeObjectRelease(v434);
    swift_bridgeObjectRelease(v429);
    swift_bridgeObjectRelease(v418);
    sub_1000045C8(v441, v442);
    swift_bridgeObjectRelease(v449);
    swift_bridgeObjectRelease(v448);
    swift_bridgeObjectRelease(v447);
    swift_bridgeObjectRelease(v446);
    swift_bridgeObjectRelease(v445);
    swift_bridgeObjectRelease(v444);
    swift_bridgeObjectRelease(v443);
    sub_1000045C8(v450, v451);
    swift_bridgeObjectRelease(v454);
    swift_bridgeObjectRelease(v453);
    swift_bridgeObjectRelease(v452);
    sub_1000045C8(v455, v456);
    sub_1000045C8(v457, v458);
    sub_1000045C8(v459, v460);
    swift_bridgeObjectRelease(v468);
    swift_bridgeObjectRelease(v467);
    swift_bridgeObjectRelease(v466);
    swift_bridgeObjectRelease(v465);
    swift_bridgeObjectRelease(v464);
    swift_bridgeObjectRelease(v463);
    swift_bridgeObjectRelease(v462);
    swift_bridgeObjectRelease(v461);
    sub_1000045C8(v469, v470);
    swift_bridgeObjectRelease(v473);
    swift_bridgeObjectRelease(v472);
    swift_bridgeObjectRelease(v471);
    sub_1000045C8(v474, v475);
    sub_1000045C8(v476, v477);
    sub_1000045C8(v478, v479);
    swift_bridgeObjectRelease(v480);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    unint64_t v16 = 0LL;
    unint64_t v15 = 0x2C8070BE4AFFLL;
    unint64_t v14 = 0x18A61EE7F7E47F8LL;
    goto LABEL_4;
  }

  uint64_t v328 = 0LL;
  unint64_t v15 = 0x6C8070BE4AFFLL;
  uint64_t v188 = v565;
  LOBYTE(v565) = 111;
  uint64_t v401 = v188;
  unint64_t v400 = v566;
  sub_1000045B4(v188, v566);
  uint64_t v189 = v1045;
  uint64_t v329 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  int v291 = v190;
  uint64_t v1045 = v189;
  if (v189) {
    goto LABEL_215;
  }
  char v962 = v291 & 1;
  LOBYTE(v565) = 112;
  uint64_t v327 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  int v289 = v191;
  uint64_t v1045 = 0LL;
  char v960 = v191 & 1;
  uint64_t v192 = sub_10000264C(&qword_100084AC0);
  LOBYTE(v564[0]) = 113;
  uint64_t v193 = sub_100056CB0( &qword_100084CA0,  &qword_100084AC0,  (void (*)(void))sub_100056BE4,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  uint64_t v194 = v1045;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v565, v192, v564, v5, v192, v193);
  uint64_t v1045 = v194;
  if (v194)
  {
LABEL_215:
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_1000045C8(v401, v400);
    sub_1000045C8(v403, v402);
    sub_1000045C8(v405, v404);
    sub_1000045C8(v407, v406);
    swift_bridgeObjectRelease(v408);
    sub_1000045C8(v409, v410);
    sub_1000045C8(v411, v412);
    swift_bridgeObjectRelease(v416);
    swift_bridgeObjectRelease(v413);
    sub_1000045C8(v421, v423);
    swift_bridgeObjectRelease(v426);
    sub_1000045C8(v428, v431);
    sub_1000569D0(v414, v415, v417, v419, v420, v422, v424, v425, v427, v430, v432, v433);
    swift_bridgeObjectRelease(v440);
    swift_bridgeObjectRelease(v439);
    swift_bridgeObjectRelease(v438);
    swift_bridgeObjectRelease(v437);
    swift_bridgeObjectRelease(v436);
    swift_bridgeObjectRelease(v435);
    swift_bridgeObjectRelease(v434);
    swift_bridgeObjectRelease(v429);
    swift_bridgeObjectRelease(v418);
    sub_1000045C8(v441, v442);
    swift_bridgeObjectRelease(v449);
    swift_bridgeObjectRelease(v448);
    swift_bridgeObjectRelease(v447);
    swift_bridgeObjectRelease(v446);
    swift_bridgeObjectRelease(v445);
    swift_bridgeObjectRelease(v444);
    swift_bridgeObjectRelease(v443);
    sub_1000045C8(v450, v451);
    swift_bridgeObjectRelease(v454);
    swift_bridgeObjectRelease(v453);
    swift_bridgeObjectRelease(v452);
    sub_1000045C8(v455, v456);
    sub_1000045C8(v457, v458);
    sub_1000045C8(v459, v460);
    swift_bridgeObjectRelease(v468);
    swift_bridgeObjectRelease(v467);
    swift_bridgeObjectRelease(v466);
    swift_bridgeObjectRelease(v465);
    swift_bridgeObjectRelease(v464);
    swift_bridgeObjectRelease(v463);
    swift_bridgeObjectRelease(v462);
    swift_bridgeObjectRelease(v461);
    sub_1000045C8(v469, v470);
    swift_bridgeObjectRelease(v473);
    swift_bridgeObjectRelease(v472);
    swift_bridgeObjectRelease(v471);
    sub_1000045C8(v474, v475);
    sub_1000045C8(v476, v477);
    sub_1000045C8(v478, v479);
    swift_bridgeObjectRelease(v480);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    unint64_t v14 = 0x18A61EE7F7E47F8LL;
    unint64_t v16 = v328;
    goto LABEL_4;
  }

  uint64_t v195 = v565;
  LOBYTE(v565) = 114;
  uint64_t v399 = v195;
  swift_bridgeObjectRetain(v195);
  uint64_t v196 = v1045;
  uint64_t v324 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  uint64_t v398 = v197;
  uint64_t v1045 = v196;
  if (v196)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease(v399);
    sub_1000045C8(v401, v400);
    sub_1000045C8(v403, v402);
    sub_1000045C8(v405, v404);
    sub_1000045C8(v407, v406);
    swift_bridgeObjectRelease(v408);
    sub_1000045C8(v409, v410);
    sub_1000045C8(v411, v412);
    swift_bridgeObjectRelease(v416);
    swift_bridgeObjectRelease(v413);
    sub_1000045C8(v421, v423);
    swift_bridgeObjectRelease(v426);
    sub_1000045C8(v428, v431);
    sub_1000569D0(v414, v415, v417, v419, v420, v422, v424, v425, v427, v430, v432, v433);
    swift_bridgeObjectRelease(v440);
    swift_bridgeObjectRelease(v439);
    swift_bridgeObjectRelease(v438);
    swift_bridgeObjectRelease(v437);
    swift_bridgeObjectRelease(v436);
    swift_bridgeObjectRelease(v435);
    swift_bridgeObjectRelease(v434);
    swift_bridgeObjectRelease(v429);
    swift_bridgeObjectRelease(v418);
    sub_1000045C8(v441, v442);
    swift_bridgeObjectRelease(v449);
    swift_bridgeObjectRelease(v448);
    swift_bridgeObjectRelease(v447);
    swift_bridgeObjectRelease(v446);
    swift_bridgeObjectRelease(v445);
    swift_bridgeObjectRelease(v444);
    swift_bridgeObjectRelease(v443);
    sub_1000045C8(v450, v451);
    swift_bridgeObjectRelease(v454);
    swift_bridgeObjectRelease(v453);
    swift_bridgeObjectRelease(v452);
    sub_1000045C8(v455, v456);
    sub_1000045C8(v457, v458);
    sub_1000045C8(v459, v460);
    swift_bridgeObjectRelease(v468);
    swift_bridgeObjectRelease(v467);
    swift_bridgeObjectRelease(v466);
    swift_bridgeObjectRelease(v465);
    swift_bridgeObjectRelease(v464);
    swift_bridgeObjectRelease(v463);
    swift_bridgeObjectRelease(v462);
    swift_bridgeObjectRelease(v461);
    sub_1000045C8(v469, v470);
    swift_bridgeObjectRelease(v473);
    swift_bridgeObjectRelease(v472);
    swift_bridgeObjectRelease(v471);
    sub_1000045C8(v474, v475);
    sub_1000045C8(v476, v477);
    sub_1000045C8(v478, v479);
    swift_bridgeObjectRelease(v480);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    unint64_t v16 = 0LL;
    unint64_t v15 = 0x26C8070BE4AFFLL;
    unint64_t v14 = 0x18A61EE7F7E47F8LL;
    goto LABEL_4;
  }

  LOBYTE(v565) = 115;
  swift_bridgeObjectRetain(v398);
  uint64_t v198 = v1045;
  uint64_t v322 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  uint64_t v397 = v199;
  uint64_t v1045 = v198;
  if (v198)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease(v399);
    swift_bridgeObjectRelease(v398);
    sub_1000045C8(v401, v400);
    sub_1000045C8(v403, v402);
    sub_1000045C8(v405, v404);
    sub_1000045C8(v407, v406);
    swift_bridgeObjectRelease(v408);
    sub_1000045C8(v409, v410);
    sub_1000045C8(v411, v412);
    swift_bridgeObjectRelease(v416);
    swift_bridgeObjectRelease(v413);
    sub_1000045C8(v421, v423);
    swift_bridgeObjectRelease(v426);
    sub_1000045C8(v428, v431);
    sub_1000569D0(v414, v415, v417, v419, v420, v422, v424, v425, v427, v430, v432, v433);
    swift_bridgeObjectRelease(v440);
    swift_bridgeObjectRelease(v439);
    swift_bridgeObjectRelease(v438);
    swift_bridgeObjectRelease(v437);
    swift_bridgeObjectRelease(v436);
    swift_bridgeObjectRelease(v435);
    swift_bridgeObjectRelease(v434);
    swift_bridgeObjectRelease(v429);
    swift_bridgeObjectRelease(v418);
    sub_1000045C8(v441, v442);
    swift_bridgeObjectRelease(v449);
    swift_bridgeObjectRelease(v448);
    swift_bridgeObjectRelease(v447);
    swift_bridgeObjectRelease(v446);
    swift_bridgeObjectRelease(v445);
    swift_bridgeObjectRelease(v444);
    swift_bridgeObjectRelease(v443);
    sub_1000045C8(v450, v451);
    swift_bridgeObjectRelease(v454);
    swift_bridgeObjectRelease(v453);
    swift_bridgeObjectRelease(v452);
    sub_1000045C8(v455, v456);
    sub_1000045C8(v457, v458);
    sub_1000045C8(v459, v460);
    swift_bridgeObjectRelease(v468);
    swift_bridgeObjectRelease(v467);
    swift_bridgeObjectRelease(v466);
    swift_bridgeObjectRelease(v465);
    swift_bridgeObjectRelease(v464);
    swift_bridgeObjectRelease(v463);
    swift_bridgeObjectRelease(v462);
    swift_bridgeObjectRelease(v461);
    sub_1000045C8(v469, v470);
    swift_bridgeObjectRelease(v473);
    swift_bridgeObjectRelease(v472);
    swift_bridgeObjectRelease(v471);
    sub_1000045C8(v474, v475);
    sub_1000045C8(v476, v477);
    sub_1000045C8(v478, v479);
    swift_bridgeObjectRelease(v480);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    unint64_t v16 = 0LL;
    unint64_t v15 = 0x66C8070BE4AFFLL;
    unint64_t v14 = 0x18A61EE7F7E47F8LL;
    goto LABEL_4;
  }

  unint64_t v15 = 0xE6C8070BE4AFFLL;
  LOBYTE(v565) = 116;
  swift_bridgeObjectRetain(v397);
  uint64_t v200 = v1045;
  uint64_t v319 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  int v287 = v201;
  uint64_t v1045 = v200;
  if (v200)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease(v399);
    swift_bridgeObjectRelease(v398);
    swift_bridgeObjectRelease(v397);
    sub_1000045C8(v401, v400);
    sub_1000045C8(v403, v402);
    sub_1000045C8(v405, v404);
    sub_1000045C8(v407, v406);
    swift_bridgeObjectRelease(v408);
    sub_1000045C8(v409, v410);
    sub_1000045C8(v411, v412);
    swift_bridgeObjectRelease(v416);
    swift_bridgeObjectRelease(v413);
    sub_1000045C8(v421, v423);
    swift_bridgeObjectRelease(v426);
    sub_1000045C8(v428, v431);
    sub_1000569D0(v414, v415, v417, v419, v420, v422, v424, v425, v427, v430, v432, v433);
    swift_bridgeObjectRelease(v440);
    swift_bridgeObjectRelease(v439);
    swift_bridgeObjectRelease(v438);
    swift_bridgeObjectRelease(v437);
    swift_bridgeObjectRelease(v436);
    swift_bridgeObjectRelease(v435);
    swift_bridgeObjectRelease(v434);
    swift_bridgeObjectRelease(v429);
    swift_bridgeObjectRelease(v418);
    sub_1000045C8(v441, v442);
    swift_bridgeObjectRelease(v449);
    swift_bridgeObjectRelease(v448);
    swift_bridgeObjectRelease(v447);
    swift_bridgeObjectRelease(v446);
    swift_bridgeObjectRelease(v445);
    swift_bridgeObjectRelease(v444);
    swift_bridgeObjectRelease(v443);
    sub_1000045C8(v450, v451);
    swift_bridgeObjectRelease(v454);
    swift_bridgeObjectRelease(v453);
    swift_bridgeObjectRelease(v452);
    sub_1000045C8(v455, v456);
    sub_1000045C8(v457, v458);
    sub_1000045C8(v459, v460);
    swift_bridgeObjectRelease(v468);
    swift_bridgeObjectRelease(v467);
    swift_bridgeObjectRelease(v466);
    swift_bridgeObjectRelease(v465);
    swift_bridgeObjectRelease(v464);
    swift_bridgeObjectRelease(v463);
    swift_bridgeObjectRelease(v462);
    swift_bridgeObjectRelease(v461);
    sub_1000045C8(v469, v470);
    swift_bridgeObjectRelease(v473);
    swift_bridgeObjectRelease(v472);
    swift_bridgeObjectRelease(v471);
    sub_1000045C8(v474, v475);
    sub_1000045C8(v476, v477);
    sub_1000045C8(v478, v479);
    swift_bridgeObjectRelease(v480);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    goto LABEL_234;
  }

  char v958 = v287 & 1;
  LOBYTE(v565) = 117;
  int v316 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  uint64_t v1045 = 0LL;
  LOBYTE(v565) = 118;
  int v315 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  uint64_t v1045 = 0LL;
  LOBYTE(v565) = 119;
  uint64_t v314 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  int v286 = v202;
  uint64_t v1045 = 0LL;
  char v955 = v202 & 1;
  LOBYTE(v564[0]) = 120;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v565,  &type metadata for Data,  v564,  v5,  &type metadata for Data,  v556);
  uint64_t v1045 = 0LL;
  unint64_t v15 = 0x10E6C8070BE4AFFLL;
  uint64_t v203 = v565;
  LOBYTE(v565) = 121;
  uint64_t v396 = v203;
  unint64_t v395 = v566;
  sub_1000045B4(v203, v566);
  uint64_t v204 = v1045;
  uint64_t v311 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  int v285 = v205;
  uint64_t v1045 = v204;
  if (v204)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_1000045C8(v396, v395);
    swift_bridgeObjectRelease(v399);
    swift_bridgeObjectRelease(v398);
    swift_bridgeObjectRelease(v397);
    sub_1000045C8(v401, v400);
    sub_1000045C8(v403, v402);
    sub_1000045C8(v405, v404);
    sub_1000045C8(v407, v406);
    swift_bridgeObjectRelease(v408);
    sub_1000045C8(v409, v410);
    sub_1000045C8(v411, v412);
    swift_bridgeObjectRelease(v416);
    swift_bridgeObjectRelease(v413);
    sub_1000045C8(v421, v423);
    swift_bridgeObjectRelease(v426);
    sub_1000045C8(v428, v431);
    sub_1000569D0(v414, v415, v417, v419, v420, v422, v424, v425, v427, v430, v432, v433);
    swift_bridgeObjectRelease(v440);
    swift_bridgeObjectRelease(v439);
    swift_bridgeObjectRelease(v438);
    swift_bridgeObjectRelease(v437);
    swift_bridgeObjectRelease(v436);
    swift_bridgeObjectRelease(v435);
    swift_bridgeObjectRelease(v434);
    swift_bridgeObjectRelease(v429);
    swift_bridgeObjectRelease(v418);
    sub_1000045C8(v441, v442);
    swift_bridgeObjectRelease(v449);
    swift_bridgeObjectRelease(v448);
    swift_bridgeObjectRelease(v447);
    swift_bridgeObjectRelease(v446);
    swift_bridgeObjectRelease(v445);
    swift_bridgeObjectRelease(v444);
    swift_bridgeObjectRelease(v443);
    sub_1000045C8(v450, v451);
    swift_bridgeObjectRelease(v454);
    swift_bridgeObjectRelease(v453);
    swift_bridgeObjectRelease(v452);
    sub_1000045C8(v455, v456);
    sub_1000045C8(v457, v458);
    sub_1000045C8(v459, v460);
    swift_bridgeObjectRelease(v468);
    swift_bridgeObjectRelease(v467);
    swift_bridgeObjectRelease(v466);
    swift_bridgeObjectRelease(v465);
    swift_bridgeObjectRelease(v464);
    swift_bridgeObjectRelease(v463);
    swift_bridgeObjectRelease(v462);
    swift_bridgeObjectRelease(v461);
    sub_1000045C8(v469, v470);
    swift_bridgeObjectRelease(v473);
    swift_bridgeObjectRelease(v472);
    swift_bridgeObjectRelease(v471);
    sub_1000045C8(v474, v475);
    sub_1000045C8(v476, v477);
    sub_1000045C8(v478, v479);
    swift_bridgeObjectRelease(v480);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    goto LABEL_234;
  }

  char v953 = v285 & 1;
  LOBYTE(v565) = 122;
  int v309 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  uint64_t v1045 = 0LL;
  LOBYTE(v565) = 123;
  uint64_t v307 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  uint64_t v394 = v206;
  uint64_t v1045 = 0LL;
  unint64_t v15 = 0x90E6C8070BE4AFFLL;
  LOBYTE(v565) = 124;
  swift_bridgeObjectRetain(v206);
  uint64_t v207 = v1045;
  uint64_t v306 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  int v284 = v208;
  uint64_t v1045 = v207;
  if (v207)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease(v394);
    sub_1000045C8(v396, v395);
    swift_bridgeObjectRelease(v399);
    swift_bridgeObjectRelease(v398);
    swift_bridgeObjectRelease(v397);
    sub_1000045C8(v401, v400);
    sub_1000045C8(v403, v402);
    sub_1000045C8(v405, v404);
    sub_1000045C8(v407, v406);
    swift_bridgeObjectRelease(v408);
    sub_1000045C8(v409, v410);
    sub_1000045C8(v411, v412);
    swift_bridgeObjectRelease(v416);
    swift_bridgeObjectRelease(v413);
    sub_1000045C8(v421, v423);
    swift_bridgeObjectRelease(v426);
    sub_1000045C8(v428, v431);
    sub_1000569D0(v414, v415, v417, v419, v420, v422, v424, v425, v427, v430, v432, v433);
    swift_bridgeObjectRelease(v440);
    swift_bridgeObjectRelease(v439);
    swift_bridgeObjectRelease(v438);
    swift_bridgeObjectRelease(v437);
    swift_bridgeObjectRelease(v436);
    swift_bridgeObjectRelease(v435);
    swift_bridgeObjectRelease(v434);
    swift_bridgeObjectRelease(v429);
    swift_bridgeObjectRelease(v418);
    sub_1000045C8(v441, v442);
    swift_bridgeObjectRelease(v449);
    swift_bridgeObjectRelease(v448);
    swift_bridgeObjectRelease(v447);
    swift_bridgeObjectRelease(v446);
    swift_bridgeObjectRelease(v445);
    swift_bridgeObjectRelease(v444);
    swift_bridgeObjectRelease(v443);
    sub_1000045C8(v450, v451);
    swift_bridgeObjectRelease(v454);
    swift_bridgeObjectRelease(v453);
    swift_bridgeObjectRelease(v452);
    sub_1000045C8(v455, v456);
    sub_1000045C8(v457, v458);
    sub_1000045C8(v459, v460);
    swift_bridgeObjectRelease(v468);
    swift_bridgeObjectRelease(v467);
    swift_bridgeObjectRelease(v466);
    swift_bridgeObjectRelease(v465);
    swift_bridgeObjectRelease(v464);
    swift_bridgeObjectRelease(v463);
    swift_bridgeObjectRelease(v462);
    swift_bridgeObjectRelease(v461);
    sub_1000045C8(v469, v470);
    swift_bridgeObjectRelease(v473);
    swift_bridgeObjectRelease(v472);
    swift_bridgeObjectRelease(v471);
    sub_1000045C8(v474, v475);
    sub_1000045C8(v476, v477);
    sub_1000045C8(v478, v479);
    swift_bridgeObjectRelease(v480);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    goto LABEL_234;
  }

  char v950 = v284 & 1;
  LOBYTE(v565) = 125;
  uint64_t v304 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  int v283 = v209;
  uint64_t v1045 = 0LL;
  char v948 = v209 & 1;
  LOBYTE(v564[0]) = 126;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v565,  &type metadata for Data,  v564,  v5,  &type metadata for Data,  v556);
  uint64_t v1045 = 0LL;
  LOBYTE(v564[0]) = 127;
  uint64_t v393 = v565;
  unint64_t v392 = v566;
  sub_1000045B4(v565, v566);
  uint64_t v210 = v1045;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v565,  &type metadata for Data,  v564,  v5,  &type metadata for Data,  v556);
  uint64_t v1045 = v210;
  if (v210)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_1000045C8(v393, v392);
    swift_bridgeObjectRelease(v394);
    sub_1000045C8(v396, v395);
    swift_bridgeObjectRelease(v399);
    swift_bridgeObjectRelease(v398);
    swift_bridgeObjectRelease(v397);
    sub_1000045C8(v401, v400);
    sub_1000045C8(v403, v402);
    sub_1000045C8(v405, v404);
    sub_1000045C8(v407, v406);
    swift_bridgeObjectRelease(v408);
    sub_1000045C8(v409, v410);
    sub_1000045C8(v411, v412);
    swift_bridgeObjectRelease(v416);
    swift_bridgeObjectRelease(v413);
    sub_1000045C8(v421, v423);
    swift_bridgeObjectRelease(v426);
    sub_1000045C8(v428, v431);
    sub_1000569D0(v414, v415, v417, v419, v420, v422, v424, v425, v427, v430, v432, v433);
    swift_bridgeObjectRelease(v440);
    swift_bridgeObjectRelease(v439);
    swift_bridgeObjectRelease(v438);
    swift_bridgeObjectRelease(v437);
    swift_bridgeObjectRelease(v436);
    swift_bridgeObjectRelease(v435);
    swift_bridgeObjectRelease(v434);
    swift_bridgeObjectRelease(v429);
    swift_bridgeObjectRelease(v418);
    sub_1000045C8(v441, v442);
    swift_bridgeObjectRelease(v449);
    swift_bridgeObjectRelease(v448);
    swift_bridgeObjectRelease(v447);
    swift_bridgeObjectRelease(v446);
    swift_bridgeObjectRelease(v445);
    swift_bridgeObjectRelease(v444);
    swift_bridgeObjectRelease(v443);
    sub_1000045C8(v450, v451);
    swift_bridgeObjectRelease(v454);
    swift_bridgeObjectRelease(v453);
    swift_bridgeObjectRelease(v452);
    sub_1000045C8(v455, v456);
    sub_1000045C8(v457, v458);
    sub_1000045C8(v459, v460);
    swift_bridgeObjectRelease(v468);
    swift_bridgeObjectRelease(v467);
    swift_bridgeObjectRelease(v466);
    swift_bridgeObjectRelease(v465);
    swift_bridgeObjectRelease(v464);
    swift_bridgeObjectRelease(v463);
    swift_bridgeObjectRelease(v462);
    swift_bridgeObjectRelease(v461);
    sub_1000045C8(v469, v470);
    swift_bridgeObjectRelease(v473);
    swift_bridgeObjectRelease(v472);
    swift_bridgeObjectRelease(v471);
    sub_1000045C8(v474, v475);
    sub_1000045C8(v476, v477);
    sub_1000045C8(v478, v479);
    swift_bridgeObjectRelease(v480);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    unint64_t v16 = 0LL;
    unint64_t v15 = 0x490E6C8070BE4AFFLL;
    unint64_t v14 = 0x18A61EE7F7E47F8LL;
    goto LABEL_4;
  }

  unint64_t v15 = 0xC90E6C8070BE4AFFLL;
  uint64_t v211 = v565;
  LOBYTE(v565) = 0x80;
  uint64_t v391 = v211;
  unint64_t v390 = v566;
  sub_1000045B4(v211, v566);
  uint64_t v212 = v1045;
  uint64_t v298 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
  int v282 = v213;
  uint64_t v1045 = v212;
  if (v212)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_1000045C8(v391, v390);
    sub_1000045C8(v393, v392);
    swift_bridgeObjectRelease(v394);
    sub_1000045C8(v396, v395);
    swift_bridgeObjectRelease(v399);
    swift_bridgeObjectRelease(v398);
    swift_bridgeObjectRelease(v397);
    sub_1000045C8(v401, v400);
    sub_1000045C8(v403, v402);
    sub_1000045C8(v405, v404);
    sub_1000045C8(v407, v406);
    swift_bridgeObjectRelease(v408);
    sub_1000045C8(v409, v410);
    sub_1000045C8(v411, v412);
    swift_bridgeObjectRelease(v416);
    swift_bridgeObjectRelease(v413);
    sub_1000045C8(v421, v423);
    swift_bridgeObjectRelease(v426);
    sub_1000045C8(v428, v431);
    sub_1000569D0(v414, v415, v417, v419, v420, v422, v424, v425, v427, v430, v432, v433);
    swift_bridgeObjectRelease(v440);
    swift_bridgeObjectRelease(v439);
    swift_bridgeObjectRelease(v438);
    swift_bridgeObjectRelease(v437);
    swift_bridgeObjectRelease(v436);
    swift_bridgeObjectRelease(v435);
    swift_bridgeObjectRelease(v434);
    swift_bridgeObjectRelease(v429);
    swift_bridgeObjectRelease(v418);
    sub_1000045C8(v441, v442);
    swift_bridgeObjectRelease(v449);
    swift_bridgeObjectRelease(v448);
    swift_bridgeObjectRelease(v447);
    swift_bridgeObjectRelease(v446);
    swift_bridgeObjectRelease(v445);
    swift_bridgeObjectRelease(v444);
    swift_bridgeObjectRelease(v443);
    sub_1000045C8(v450, v451);
    swift_bridgeObjectRelease(v454);
    swift_bridgeObjectRelease(v453);
    swift_bridgeObjectRelease(v452);
    sub_1000045C8(v455, v456);
    sub_1000045C8(v457, v458);
    sub_1000045C8(v459, v460);
    swift_bridgeObjectRelease(v468);
    swift_bridgeObjectRelease(v467);
    swift_bridgeObjectRelease(v466);
    swift_bridgeObjectRelease(v465);
    swift_bridgeObjectRelease(v464);
    swift_bridgeObjectRelease(v463);
    swift_bridgeObjectRelease(v462);
    swift_bridgeObjectRelease(v461);
    sub_1000045C8(v469, v470);
    swift_bridgeObjectRelease(v473);
    swift_bridgeObjectRelease(v472);
    swift_bridgeObjectRelease(v471);
    sub_1000045C8(v474, v475);
    sub_1000045C8(v476, v477);
    sub_1000045C8(v478, v479);
    swift_bridgeObjectRelease(v480);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    goto LABEL_234;
  }

  char v946 = v282 & 1;
  LOBYTE(v564[0]) = -127;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v565,  &type metadata for Data,  v564,  v5,  &type metadata for Data,  v556);
  uint64_t v1045 = 0LL;
  LOBYTE(v564[0]) = -126;
  uint64_t v389 = v565;
  unint64_t v388 = v566;
  sub_1000045B4(v565, v566);
  uint64_t v214 = v1045;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v565,  &type metadata for Data,  v564,  v5,  &type metadata for Data,  v556);
  uint64_t v1045 = v214;
  if (v214)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_1000045C8(v389, v388);
    sub_1000045C8(v391, v390);
    sub_1000045C8(v393, v392);
    swift_bridgeObjectRelease(v394);
    sub_1000045C8(v396, v395);
    swift_bridgeObjectRelease(v399);
    swift_bridgeObjectRelease(v398);
    swift_bridgeObjectRelease(v397);
    sub_1000045C8(v401, v400);
    sub_1000045C8(v403, v402);
    sub_1000045C8(v405, v404);
    sub_1000045C8(v407, v406);
    swift_bridgeObjectRelease(v408);
    sub_1000045C8(v409, v410);
    sub_1000045C8(v411, v412);
    swift_bridgeObjectRelease(v416);
    swift_bridgeObjectRelease(v413);
    sub_1000045C8(v421, v423);
    swift_bridgeObjectRelease(v426);
    sub_1000045C8(v428, v431);
    sub_1000569D0(v414, v415, v417, v419, v420, v422, v424, v425, v427, v430, v432, v433);
    swift_bridgeObjectRelease(v440);
    swift_bridgeObjectRelease(v439);
    swift_bridgeObjectRelease(v438);
    swift_bridgeObjectRelease(v437);
    swift_bridgeObjectRelease(v436);
    swift_bridgeObjectRelease(v435);
    swift_bridgeObjectRelease(v434);
    swift_bridgeObjectRelease(v429);
    swift_bridgeObjectRelease(v418);
    sub_1000045C8(v441, v442);
    swift_bridgeObjectRelease(v449);
    swift_bridgeObjectRelease(v448);
    swift_bridgeObjectRelease(v447);
    swift_bridgeObjectRelease(v446);
    swift_bridgeObjectRelease(v445);
    swift_bridgeObjectRelease(v444);
    swift_bridgeObjectRelease(v443);
    sub_1000045C8(v450, v451);
    swift_bridgeObjectRelease(v454);
    swift_bridgeObjectRelease(v453);
    swift_bridgeObjectRelease(v452);
    sub_1000045C8(v455, v456);
    sub_1000045C8(v457, v458);
    sub_1000045C8(v459, v460);
    swift_bridgeObjectRelease(v468);
    swift_bridgeObjectRelease(v467);
    swift_bridgeObjectRelease(v466);
    swift_bridgeObjectRelease(v465);
    swift_bridgeObjectRelease(v464);
    swift_bridgeObjectRelease(v463);
    swift_bridgeObjectRelease(v462);
    swift_bridgeObjectRelease(v461);
    sub_1000045C8(v469, v470);
    swift_bridgeObjectRelease(v473);
    swift_bridgeObjectRelease(v472);
    swift_bridgeObjectRelease(v471);
    sub_1000045C8(v474, v475);
    sub_1000045C8(v476, v477);
    sub_1000045C8(v478, v479);
    swift_bridgeObjectRelease(v480);
    sub_1000045C8(v481, v482);
    swift_bridgeObjectRelease(v483);
    sub_1000045C8(v485, v484);
    sub_1000045C8(v486, v487);
    sub_1000045C8(v488, v489);
    sub_1000045C8(v491, v490);
    sub_1000045C8(v492, v493);
    LODWORD(v562) = 0;
    unint64_t v14 = 0x18A61EE7F7E47F8LL;
    unint64_t v16 = 2LL;
  }

  else
  {
    LOBYTE(v564[0]) = -125;
    uint64_t v387 = v565;
    unint64_t v386 = v566;
    sub_1000045B4(v565, v566);
    uint64_t v215 = v1045;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v565,  &type metadata for Data,  v564,  v5,  &type metadata for Data,  v556);
    uint64_t v1045 = v215;
    if (v215)
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      sub_1000045C8(v387, v386);
      sub_1000045C8(v389, v388);
      sub_1000045C8(v391, v390);
      sub_1000045C8(v393, v392);
      swift_bridgeObjectRelease(v394);
      sub_1000045C8(v396, v395);
      swift_bridgeObjectRelease(v399);
      swift_bridgeObjectRelease(v398);
      swift_bridgeObjectRelease(v397);
      sub_1000045C8(v401, v400);
      sub_1000045C8(v403, v402);
      sub_1000045C8(v405, v404);
      sub_1000045C8(v407, v406);
      swift_bridgeObjectRelease(v408);
      sub_1000045C8(v409, v410);
      sub_1000045C8(v411, v412);
      swift_bridgeObjectRelease(v416);
      swift_bridgeObjectRelease(v413);
      sub_1000045C8(v421, v423);
      swift_bridgeObjectRelease(v426);
      sub_1000045C8(v428, v431);
      sub_1000569D0(v414, v415, v417, v419, v420, v422, v424, v425, v427, v430, v432, v433);
      swift_bridgeObjectRelease(v440);
      swift_bridgeObjectRelease(v439);
      swift_bridgeObjectRelease(v438);
      swift_bridgeObjectRelease(v437);
      swift_bridgeObjectRelease(v436);
      swift_bridgeObjectRelease(v435);
      swift_bridgeObjectRelease(v434);
      swift_bridgeObjectRelease(v429);
      swift_bridgeObjectRelease(v418);
      sub_1000045C8(v441, v442);
      swift_bridgeObjectRelease(v449);
      swift_bridgeObjectRelease(v448);
      swift_bridgeObjectRelease(v447);
      swift_bridgeObjectRelease(v446);
      swift_bridgeObjectRelease(v445);
      swift_bridgeObjectRelease(v444);
      swift_bridgeObjectRelease(v443);
      sub_1000045C8(v450, v451);
      swift_bridgeObjectRelease(v454);
      swift_bridgeObjectRelease(v453);
      swift_bridgeObjectRelease(v452);
      sub_1000045C8(v455, v456);
      sub_1000045C8(v457, v458);
      sub_1000045C8(v459, v460);
      swift_bridgeObjectRelease(v468);
      swift_bridgeObjectRelease(v467);
      swift_bridgeObjectRelease(v466);
      swift_bridgeObjectRelease(v465);
      swift_bridgeObjectRelease(v464);
      swift_bridgeObjectRelease(v463);
      swift_bridgeObjectRelease(v462);
      swift_bridgeObjectRelease(v461);
      sub_1000045C8(v469, v470);
      swift_bridgeObjectRelease(v473);
      swift_bridgeObjectRelease(v472);
      swift_bridgeObjectRelease(v471);
      sub_1000045C8(v474, v475);
      sub_1000045C8(v476, v477);
      sub_1000045C8(v478, v479);
      swift_bridgeObjectRelease(v480);
      sub_1000045C8(v481, v482);
      swift_bridgeObjectRelease(v483);
      sub_1000045C8(v485, v484);
      sub_1000045C8(v486, v487);
      sub_1000045C8(v488, v489);
      sub_1000045C8(v491, v490);
      sub_1000045C8(v492, v493);
      LODWORD(v562) = 0;
      unint64_t v14 = 0x18A61EE7F7E47F8LL;
      unint64_t v16 = 6LL;
    }

    else
    {
      uint64_t v216 = v565;
      LOBYTE(v565) = -124;
      uint64_t v385 = v216;
      unint64_t v384 = v566;
      sub_1000045B4(v216, v566);
      uint64_t v217 = v1045;
      uint64_t v288 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
      int v281 = v218;
      uint64_t v1045 = v217;
      if (v217)
      {
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
        sub_1000045C8(v385, v384);
        sub_1000045C8(v387, v386);
        sub_1000045C8(v389, v388);
        sub_1000045C8(v391, v390);
        sub_1000045C8(v393, v392);
        swift_bridgeObjectRelease(v394);
        sub_1000045C8(v396, v395);
        swift_bridgeObjectRelease(v399);
        swift_bridgeObjectRelease(v398);
        swift_bridgeObjectRelease(v397);
        sub_1000045C8(v401, v400);
        sub_1000045C8(v403, v402);
        sub_1000045C8(v405, v404);
        sub_1000045C8(v407, v406);
        swift_bridgeObjectRelease(v408);
        sub_1000045C8(v409, v410);
        sub_1000045C8(v411, v412);
        swift_bridgeObjectRelease(v416);
        swift_bridgeObjectRelease(v413);
        sub_1000045C8(v421, v423);
        swift_bridgeObjectRelease(v426);
        sub_1000045C8(v428, v431);
        sub_1000569D0(v414, v415, v417, v419, v420, v422, v424, v425, v427, v430, v432, v433);
        swift_bridgeObjectRelease(v440);
        swift_bridgeObjectRelease(v439);
        swift_bridgeObjectRelease(v438);
        swift_bridgeObjectRelease(v437);
        swift_bridgeObjectRelease(v436);
        swift_bridgeObjectRelease(v435);
        swift_bridgeObjectRelease(v434);
        swift_bridgeObjectRelease(v429);
        swift_bridgeObjectRelease(v418);
        sub_1000045C8(v441, v442);
        swift_bridgeObjectRelease(v449);
        swift_bridgeObjectRelease(v448);
        swift_bridgeObjectRelease(v447);
        swift_bridgeObjectRelease(v446);
        swift_bridgeObjectRelease(v445);
        swift_bridgeObjectRelease(v444);
        swift_bridgeObjectRelease(v443);
        sub_1000045C8(v450, v451);
        swift_bridgeObjectRelease(v454);
        swift_bridgeObjectRelease(v453);
        swift_bridgeObjectRelease(v452);
        sub_1000045C8(v455, v456);
        sub_1000045C8(v457, v458);
        sub_1000045C8(v459, v460);
        swift_bridgeObjectRelease(v468);
        swift_bridgeObjectRelease(v467);
        swift_bridgeObjectRelease(v466);
        swift_bridgeObjectRelease(v465);
        swift_bridgeObjectRelease(v464);
        swift_bridgeObjectRelease(v463);
        swift_bridgeObjectRelease(v462);
        swift_bridgeObjectRelease(v461);
        sub_1000045C8(v469, v470);
        swift_bridgeObjectRelease(v473);
        swift_bridgeObjectRelease(v472);
        swift_bridgeObjectRelease(v471);
        sub_1000045C8(v474, v475);
        sub_1000045C8(v476, v477);
        sub_1000045C8(v478, v479);
        swift_bridgeObjectRelease(v480);
        sub_1000045C8(v481, v482);
        swift_bridgeObjectRelease(v483);
        sub_1000045C8(v485, v484);
        sub_1000045C8(v486, v487);
        sub_1000045C8(v488, v489);
        sub_1000045C8(v491, v490);
        sub_1000045C8(v492, v493);
        LODWORD(v562) = 0;
        unint64_t v14 = 0x18A61EE7F7E47F8LL;
        unint64_t v16 = 14LL;
      }

      else
      {
        char v944 = v281 & 1;
        LOBYTE(v564[0]) = -123;
        KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v565,  &type metadata for Data,  v564,  v5,  &type metadata for Data,  v556);
        uint64_t v1045 = 0LL;
        uint64_t v219 = v565;
        LOBYTE(v565) = -122;
        uint64_t v383 = v219;
        unint64_t v382 = v566;
        sub_1000045B4(v219, v566);
        uint64_t v220 = v1045;
        uint64_t v328 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
        int v280 = v221;
        uint64_t v1045 = v220;
        if (v220)
        {
          (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
          sub_1000045C8(v383, v382);
          sub_1000045C8(v385, v384);
          sub_1000045C8(v387, v386);
          sub_1000045C8(v389, v388);
          sub_1000045C8(v391, v390);
          sub_1000045C8(v393, v392);
          swift_bridgeObjectRelease(v394);
          sub_1000045C8(v396, v395);
          swift_bridgeObjectRelease(v399);
          swift_bridgeObjectRelease(v398);
          swift_bridgeObjectRelease(v397);
          sub_1000045C8(v401, v400);
          sub_1000045C8(v403, v402);
          sub_1000045C8(v405, v404);
          sub_1000045C8(v407, v406);
          swift_bridgeObjectRelease(v408);
          sub_1000045C8(v409, v410);
          sub_1000045C8(v411, v412);
          swift_bridgeObjectRelease(v416);
          swift_bridgeObjectRelease(v413);
          sub_1000045C8(v421, v423);
          swift_bridgeObjectRelease(v426);
          sub_1000045C8(v428, v431);
          sub_1000569D0(v414, v415, v417, v419, v420, v422, v424, v425, v427, v430, v432, v433);
          swift_bridgeObjectRelease(v440);
          swift_bridgeObjectRelease(v439);
          swift_bridgeObjectRelease(v438);
          swift_bridgeObjectRelease(v437);
          swift_bridgeObjectRelease(v436);
          swift_bridgeObjectRelease(v435);
          swift_bridgeObjectRelease(v434);
          swift_bridgeObjectRelease(v429);
          swift_bridgeObjectRelease(v418);
          sub_1000045C8(v441, v442);
          swift_bridgeObjectRelease(v449);
          swift_bridgeObjectRelease(v448);
          swift_bridgeObjectRelease(v447);
          swift_bridgeObjectRelease(v446);
          swift_bridgeObjectRelease(v445);
          swift_bridgeObjectRelease(v444);
          swift_bridgeObjectRelease(v443);
          sub_1000045C8(v450, v451);
          swift_bridgeObjectRelease(v454);
          swift_bridgeObjectRelease(v453);
          swift_bridgeObjectRelease(v452);
          sub_1000045C8(v455, v456);
          sub_1000045C8(v457, v458);
          sub_1000045C8(v459, v460);
          swift_bridgeObjectRelease(v468);
          swift_bridgeObjectRelease(v467);
          swift_bridgeObjectRelease(v466);
          swift_bridgeObjectRelease(v465);
          swift_bridgeObjectRelease(v464);
          swift_bridgeObjectRelease(v463);
          swift_bridgeObjectRelease(v462);
          swift_bridgeObjectRelease(v461);
          sub_1000045C8(v469, v470);
          swift_bridgeObjectRelease(v473);
          swift_bridgeObjectRelease(v472);
          swift_bridgeObjectRelease(v471);
          sub_1000045C8(v474, v475);
          sub_1000045C8(v476, v477);
          sub_1000045C8(v478, v479);
          swift_bridgeObjectRelease(v480);
          sub_1000045C8(v481, v482);
          swift_bridgeObjectRelease(v483);
          sub_1000045C8(v485, v484);
          sub_1000045C8(v486, v487);
          sub_1000045C8(v488, v489);
          sub_1000045C8(v491, v490);
          sub_1000045C8(v492, v493);
          LODWORD(v562) = 0;
          unint64_t v14 = 0x18A61EE7F7E47F8LL;
          unint64_t v16 = 46LL;
        }

        else
        {
          char v942 = v280 & 1;
          LOBYTE(v564[0]) = -121;
          KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v565,  &type metadata for Data,  v564,  v5,  &type metadata for Data,  v556);
          uint64_t v1045 = 0LL;
          uint64_t v222 = v565;
          LOBYTE(v565) = -120;
          uint64_t v381 = v222;
          unint64_t v380 = v566;
          sub_1000045B4(v222, v566);
          uint64_t v223 = v1045;
          uint64_t v325 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
          uint64_t v379 = v224;
          uint64_t v1045 = v223;
          if (v223)
          {
            (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
            sub_1000045C8(v381, v380);
            sub_1000045C8(v383, v382);
            sub_1000045C8(v385, v384);
            sub_1000045C8(v387, v386);
            sub_1000045C8(v389, v388);
            sub_1000045C8(v391, v390);
            sub_1000045C8(v393, v392);
            swift_bridgeObjectRelease(v394);
            sub_1000045C8(v396, v395);
            swift_bridgeObjectRelease(v399);
            swift_bridgeObjectRelease(v398);
            swift_bridgeObjectRelease(v397);
            sub_1000045C8(v401, v400);
            sub_1000045C8(v403, v402);
            sub_1000045C8(v405, v404);
            sub_1000045C8(v407, v406);
            swift_bridgeObjectRelease(v408);
            sub_1000045C8(v409, v410);
            sub_1000045C8(v411, v412);
            swift_bridgeObjectRelease(v416);
            swift_bridgeObjectRelease(v413);
            sub_1000045C8(v421, v423);
            swift_bridgeObjectRelease(v426);
            sub_1000045C8(v428, v431);
            sub_1000569D0(v414, v415, v417, v419, v420, v422, v424, v425, v427, v430, v432, v433);
            swift_bridgeObjectRelease(v440);
            swift_bridgeObjectRelease(v439);
            swift_bridgeObjectRelease(v438);
            swift_bridgeObjectRelease(v437);
            swift_bridgeObjectRelease(v436);
            swift_bridgeObjectRelease(v435);
            swift_bridgeObjectRelease(v434);
            swift_bridgeObjectRelease(v429);
            swift_bridgeObjectRelease(v418);
            sub_1000045C8(v441, v442);
            swift_bridgeObjectRelease(v449);
            swift_bridgeObjectRelease(v448);
            swift_bridgeObjectRelease(v447);
            swift_bridgeObjectRelease(v446);
            swift_bridgeObjectRelease(v445);
            swift_bridgeObjectRelease(v444);
            swift_bridgeObjectRelease(v443);
            sub_1000045C8(v450, v451);
            swift_bridgeObjectRelease(v454);
            swift_bridgeObjectRelease(v453);
            swift_bridgeObjectRelease(v452);
            sub_1000045C8(v455, v456);
            sub_1000045C8(v457, v458);
            sub_1000045C8(v459, v460);
            swift_bridgeObjectRelease(v468);
            swift_bridgeObjectRelease(v467);
            swift_bridgeObjectRelease(v466);
            swift_bridgeObjectRelease(v465);
            swift_bridgeObjectRelease(v464);
            swift_bridgeObjectRelease(v463);
            swift_bridgeObjectRelease(v462);
            swift_bridgeObjectRelease(v461);
            sub_1000045C8(v469, v470);
            swift_bridgeObjectRelease(v473);
            swift_bridgeObjectRelease(v472);
            swift_bridgeObjectRelease(v471);
            sub_1000045C8(v474, v475);
            sub_1000045C8(v476, v477);
            sub_1000045C8(v478, v479);
            swift_bridgeObjectRelease(v480);
            sub_1000045C8(v481, v482);
            swift_bridgeObjectRelease(v483);
            sub_1000045C8(v485, v484);
            sub_1000045C8(v486, v487);
            sub_1000045C8(v488, v489);
            sub_1000045C8(v491, v490);
            sub_1000045C8(v492, v493);
            LODWORD(v562) = 0;
            unint64_t v14 = 0x18A61EE7F7E47F8LL;
            unint64_t v16 = 174LL;
          }

          else
          {
            LOBYTE(v565) = -119;
            swift_bridgeObjectRetain(v379);
            uint64_t v225 = v1045;
            uint64_t v323 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
            int v279 = v226;
            uint64_t v1045 = v225;
            if (v225) {
              goto LABEL_249;
            }
            char v940 = v279 & 1;
            LOBYTE(v565) = -118;
            uint64_t v321 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
            int v278 = v227;
            uint64_t v1045 = 0LL;
            char v938 = v227 & 1;
            LOBYTE(v565) = -117;
            uint64_t v320 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
            int v277 = v228;
            uint64_t v1045 = 0LL;
            char v936 = v228 & 1;
            LOBYTE(v565) = -116;
            uint64_t v318 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
            int v276 = v229;
            uint64_t v1045 = 0LL;
            char v934 = v229 & 1;
            uint64_t v230 = sub_10000264C(&qword_100084AE0);
            LOBYTE(v564[0]) = -115;
            uint64_t v231 = sub_100056CB0( &qword_100084CB0,  &qword_100084AE0,  (void (*)(void))sub_100056C28,  (uint64_t)&protocol conformance descriptor for <A> [A]);
            uint64_t v232 = v1045;
            KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v565, v230, v564, v5, v230, v231);
            uint64_t v1045 = v232;
            if (v232)
            {
LABEL_249:
              (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
              swift_bridgeObjectRelease(v379);
              sub_1000045C8(v381, v380);
              sub_1000045C8(v383, v382);
              sub_1000045C8(v385, v384);
              sub_1000045C8(v387, v386);
              sub_1000045C8(v389, v388);
              sub_1000045C8(v391, v390);
              sub_1000045C8(v393, v392);
              swift_bridgeObjectRelease(v394);
              sub_1000045C8(v396, v395);
              swift_bridgeObjectRelease(v399);
              swift_bridgeObjectRelease(v398);
              swift_bridgeObjectRelease(v397);
              sub_1000045C8(v401, v400);
              sub_1000045C8(v403, v402);
              sub_1000045C8(v405, v404);
              sub_1000045C8(v407, v406);
              swift_bridgeObjectRelease(v408);
              sub_1000045C8(v409, v410);
              sub_1000045C8(v411, v412);
              swift_bridgeObjectRelease(v416);
              swift_bridgeObjectRelease(v413);
              sub_1000045C8(v421, v423);
              swift_bridgeObjectRelease(v426);
              sub_1000045C8(v428, v431);
              sub_1000569D0(v414, v415, v417, v419, v420, v422, v424, v425, v427, v430, v432, v433);
              swift_bridgeObjectRelease(v440);
              swift_bridgeObjectRelease(v439);
              swift_bridgeObjectRelease(v438);
              swift_bridgeObjectRelease(v437);
              swift_bridgeObjectRelease(v436);
              swift_bridgeObjectRelease(v435);
              swift_bridgeObjectRelease(v434);
              swift_bridgeObjectRelease(v429);
              swift_bridgeObjectRelease(v418);
              sub_1000045C8(v441, v442);
              swift_bridgeObjectRelease(v449);
              swift_bridgeObjectRelease(v448);
              swift_bridgeObjectRelease(v447);
              swift_bridgeObjectRelease(v446);
              swift_bridgeObjectRelease(v445);
              swift_bridgeObjectRelease(v444);
              swift_bridgeObjectRelease(v443);
              sub_1000045C8(v450, v451);
              swift_bridgeObjectRelease(v454);
              swift_bridgeObjectRelease(v453);
              swift_bridgeObjectRelease(v452);
              sub_1000045C8(v455, v456);
              sub_1000045C8(v457, v458);
              sub_1000045C8(v459, v460);
              swift_bridgeObjectRelease(v468);
              swift_bridgeObjectRelease(v467);
              swift_bridgeObjectRelease(v466);
              swift_bridgeObjectRelease(v465);
              swift_bridgeObjectRelease(v464);
              swift_bridgeObjectRelease(v463);
              swift_bridgeObjectRelease(v462);
              swift_bridgeObjectRelease(v461);
              sub_1000045C8(v469, v470);
              swift_bridgeObjectRelease(v473);
              swift_bridgeObjectRelease(v472);
              swift_bridgeObjectRelease(v471);
              sub_1000045C8(v474, v475);
              sub_1000045C8(v476, v477);
              sub_1000045C8(v478, v479);
              swift_bridgeObjectRelease(v480);
              sub_1000045C8(v481, v482);
              swift_bridgeObjectRelease(v483);
              sub_1000045C8(v485, v484);
              sub_1000045C8(v486, v487);
              sub_1000045C8(v488, v489);
              sub_1000045C8(v491, v490);
              sub_1000045C8(v492, v493);
              LODWORD(v562) = 0;
              unint64_t v14 = 0x18A61EE7F7E47F8LL;
              unint64_t v16 = 430LL;
            }

            else
            {
              uint64_t v233 = v565;
              uint64_t v234 = sub_10000264C(&qword_100084B00);
              LOBYTE(v564[0]) = -114;
              uint64_t v235 = sub_100056CB0( &qword_100084CC0,  &qword_100084B00,  (void (*)(void))sub_100056C6C,  (uint64_t)&protocol conformance descriptor for <A> [A]);
              uint64_t v378 = v233;
              swift_bridgeObjectRetain(v233);
              uint64_t v236 = v235;
              uint64_t v237 = v1045;
              KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v565, v234, v564, v5, v234, v236);
              uint64_t v1045 = v237;
              if (v237)
              {
                (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
                swift_bridgeObjectRelease(v379);
                swift_bridgeObjectRelease(v378);
                sub_1000045C8(v381, v380);
                sub_1000045C8(v383, v382);
                sub_1000045C8(v385, v384);
                sub_1000045C8(v387, v386);
                sub_1000045C8(v389, v388);
                sub_1000045C8(v391, v390);
                sub_1000045C8(v393, v392);
                swift_bridgeObjectRelease(v394);
                sub_1000045C8(v396, v395);
                swift_bridgeObjectRelease(v399);
                swift_bridgeObjectRelease(v398);
                swift_bridgeObjectRelease(v397);
                sub_1000045C8(v401, v400);
                sub_1000045C8(v403, v402);
                sub_1000045C8(v405, v404);
                sub_1000045C8(v407, v406);
                swift_bridgeObjectRelease(v408);
                sub_1000045C8(v409, v410);
                sub_1000045C8(v411, v412);
                swift_bridgeObjectRelease(v416);
                swift_bridgeObjectRelease(v413);
                sub_1000045C8(v421, v423);
                swift_bridgeObjectRelease(v426);
                sub_1000045C8(v428, v431);
                sub_1000569D0(v414, v415, v417, v419, v420, v422, v424, v425, v427, v430, v432, v433);
                swift_bridgeObjectRelease(v440);
                swift_bridgeObjectRelease(v439);
                swift_bridgeObjectRelease(v438);
                swift_bridgeObjectRelease(v437);
                swift_bridgeObjectRelease(v436);
                swift_bridgeObjectRelease(v435);
                swift_bridgeObjectRelease(v434);
                swift_bridgeObjectRelease(v429);
                swift_bridgeObjectRelease(v418);
                sub_1000045C8(v441, v442);
                swift_bridgeObjectRelease(v449);
                swift_bridgeObjectRelease(v448);
                swift_bridgeObjectRelease(v447);
                swift_bridgeObjectRelease(v446);
                swift_bridgeObjectRelease(v445);
                swift_bridgeObjectRelease(v444);
                swift_bridgeObjectRelease(v443);
                sub_1000045C8(v450, v451);
                swift_bridgeObjectRelease(v454);
                swift_bridgeObjectRelease(v453);
                swift_bridgeObjectRelease(v452);
                sub_1000045C8(v455, v456);
                sub_1000045C8(v457, v458);
                sub_1000045C8(v459, v460);
                swift_bridgeObjectRelease(v468);
                swift_bridgeObjectRelease(v467);
                swift_bridgeObjectRelease(v466);
                swift_bridgeObjectRelease(v465);
                swift_bridgeObjectRelease(v464);
                swift_bridgeObjectRelease(v463);
                swift_bridgeObjectRelease(v462);
                swift_bridgeObjectRelease(v461);
                sub_1000045C8(v469, v470);
                swift_bridgeObjectRelease(v473);
                swift_bridgeObjectRelease(v472);
                swift_bridgeObjectRelease(v471);
                sub_1000045C8(v474, v475);
                sub_1000045C8(v476, v477);
                sub_1000045C8(v478, v479);
                swift_bridgeObjectRelease(v480);
                sub_1000045C8(v481, v482);
                swift_bridgeObjectRelease(v483);
                sub_1000045C8(v485, v484);
                sub_1000045C8(v486, v487);
                sub_1000045C8(v488, v489);
                sub_1000045C8(v491, v490);
                sub_1000045C8(v492, v493);
                LODWORD(v562) = 0;
                unint64_t v15 = 0xC90E6C8070BE4AFFLL;
                unint64_t v14 = 0x18A61EE7F7E47F8LL;
                unint64_t v16 = 8622LL;
              }

              else
              {
                LOBYTE(v564[0]) = -113;
                uint64_t v377 = v565;
                swift_bridgeObjectRetain(v565);
                uint64_t v238 = v1045;
                KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v565,  &type metadata for Data,  v564,  v5,  &type metadata for Data,  v556);
                uint64_t v1045 = v238;
                if (v238)
                {
                  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
                  swift_bridgeObjectRelease(v379);
                  swift_bridgeObjectRelease(v378);
                  swift_bridgeObjectRelease(v377);
                  sub_1000045C8(v381, v380);
                  sub_1000045C8(v383, v382);
                  sub_1000045C8(v385, v384);
                  sub_1000045C8(v387, v386);
                  sub_1000045C8(v389, v388);
                  sub_1000045C8(v391, v390);
                  sub_1000045C8(v393, v392);
                  swift_bridgeObjectRelease(v394);
                  sub_1000045C8(v396, v395);
                  swift_bridgeObjectRelease(v399);
                  swift_bridgeObjectRelease(v398);
                  swift_bridgeObjectRelease(v397);
                  sub_1000045C8(v401, v400);
                  sub_1000045C8(v403, v402);
                  sub_1000045C8(v405, v404);
                  sub_1000045C8(v407, v406);
                  swift_bridgeObjectRelease(v408);
                  sub_1000045C8(v409, v410);
                  sub_1000045C8(v411, v412);
                  swift_bridgeObjectRelease(v416);
                  swift_bridgeObjectRelease(v413);
                  sub_1000045C8(v421, v423);
                  swift_bridgeObjectRelease(v426);
                  sub_1000045C8(v428, v431);
                  sub_1000569D0(v414, v415, v417, v419, v420, v422, v424, v425, v427, v430, v432, v433);
                  swift_bridgeObjectRelease(v440);
                  swift_bridgeObjectRelease(v439);
                  swift_bridgeObjectRelease(v438);
                  swift_bridgeObjectRelease(v437);
                  swift_bridgeObjectRelease(v436);
                  swift_bridgeObjectRelease(v435);
                  swift_bridgeObjectRelease(v434);
                  swift_bridgeObjectRelease(v429);
                  swift_bridgeObjectRelease(v418);
                  sub_1000045C8(v441, v442);
                  swift_bridgeObjectRelease(v449);
                  swift_bridgeObjectRelease(v448);
                  swift_bridgeObjectRelease(v447);
                  swift_bridgeObjectRelease(v446);
                  swift_bridgeObjectRelease(v445);
                  swift_bridgeObjectRelease(v444);
                  swift_bridgeObjectRelease(v443);
                  sub_1000045C8(v450, v451);
                  swift_bridgeObjectRelease(v454);
                  swift_bridgeObjectRelease(v453);
                  swift_bridgeObjectRelease(v452);
                  sub_1000045C8(v455, v456);
                  sub_1000045C8(v457, v458);
                  sub_1000045C8(v459, v460);
                  swift_bridgeObjectRelease(v468);
                  swift_bridgeObjectRelease(v467);
                  swift_bridgeObjectRelease(v466);
                  swift_bridgeObjectRelease(v465);
                  swift_bridgeObjectRelease(v464);
                  swift_bridgeObjectRelease(v463);
                  swift_bridgeObjectRelease(v462);
                  swift_bridgeObjectRelease(v461);
                  sub_1000045C8(v469, v470);
                  swift_bridgeObjectRelease(v473);
                  swift_bridgeObjectRelease(v472);
                  swift_bridgeObjectRelease(v471);
                  sub_1000045C8(v474, v475);
                  sub_1000045C8(v476, v477);
                  sub_1000045C8(v478, v479);
                  swift_bridgeObjectRelease(v480);
                  sub_1000045C8(v481, v482);
                  swift_bridgeObjectRelease(v483);
                  sub_1000045C8(v485, v484);
                  sub_1000045C8(v486, v487);
                  sub_1000045C8(v488, v489);
                  sub_1000045C8(v491, v490);
                  sub_1000045C8(v492, v493);
                  LODWORD(v562) = 0;
                  unint64_t v15 = 0xC90E6C8070BE4AFFLL;
                  unint64_t v14 = 0x18A61EE7F7E47F8LL;
                  unint64_t v16 = 25006LL;
                }

                else
                {
                  unint64_t v15 = 0xC90E6C8070BE4AFFLL;
                  uint64_t v239 = v565;
                  LOBYTE(v565) = -112;
                  uint64_t v376 = v239;
                  unint64_t v375 = v566;
                  sub_1000045B4(v239, v566);
                  uint64_t v240 = v1045;
                  uint64_t v556 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
                  int v275 = v241;
                  uint64_t v1045 = v240;
                  if (v240
                    || (char v932 = v275 & 1,
                        uint64_t v242 = sub_10000264C(&qword_100084B20),
                        LOBYTE(v564[0]) = -111,
                        uint64_t v243 = sub_100056CB0( &qword_100084CD0,  &qword_100084B20,  (void (*)(void))sub_100056D14,  (uint64_t)&protocol conformance descriptor for <A> [A]),  v244 = v1045,  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v565, v242, v564, v5, v242, v243),  (v1045 = v244) != 0))
                  {
                    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
                    sub_1000045C8(v376, v375);
                    swift_bridgeObjectRelease(v379);
                    swift_bridgeObjectRelease(v378);
                    swift_bridgeObjectRelease(v377);
                    sub_1000045C8(v381, v380);
                    sub_1000045C8(v383, v382);
                    sub_1000045C8(v385, v384);
                    sub_1000045C8(v387, v386);
                    sub_1000045C8(v389, v388);
                    sub_1000045C8(v391, v390);
                    sub_1000045C8(v393, v392);
                    swift_bridgeObjectRelease(v394);
                    sub_1000045C8(v396, v395);
                    swift_bridgeObjectRelease(v399);
                    swift_bridgeObjectRelease(v398);
                    swift_bridgeObjectRelease(v397);
                    sub_1000045C8(v401, v400);
                    sub_1000045C8(v403, v402);
                    sub_1000045C8(v405, v404);
                    sub_1000045C8(v407, v406);
                    swift_bridgeObjectRelease(v408);
                    sub_1000045C8(v409, v410);
                    sub_1000045C8(v411, v412);
                    swift_bridgeObjectRelease(v416);
                    swift_bridgeObjectRelease(v413);
                    sub_1000045C8(v421, v423);
                    swift_bridgeObjectRelease(v426);
                    sub_1000045C8(v428, v431);
                    sub_1000569D0(v414, v415, v417, v419, v420, v422, v424, v425, v427, v430, v432, v433);
                    swift_bridgeObjectRelease(v440);
                    swift_bridgeObjectRelease(v439);
                    swift_bridgeObjectRelease(v438);
                    swift_bridgeObjectRelease(v437);
                    swift_bridgeObjectRelease(v436);
                    swift_bridgeObjectRelease(v435);
                    swift_bridgeObjectRelease(v434);
                    swift_bridgeObjectRelease(v429);
                    swift_bridgeObjectRelease(v418);
                    sub_1000045C8(v441, v442);
                    swift_bridgeObjectRelease(v449);
                    swift_bridgeObjectRelease(v448);
                    swift_bridgeObjectRelease(v447);
                    swift_bridgeObjectRelease(v446);
                    swift_bridgeObjectRelease(v445);
                    swift_bridgeObjectRelease(v444);
                    swift_bridgeObjectRelease(v443);
                    sub_1000045C8(v450, v451);
                    swift_bridgeObjectRelease(v454);
                    swift_bridgeObjectRelease(v453);
                    swift_bridgeObjectRelease(v452);
                    sub_1000045C8(v455, v456);
                    sub_1000045C8(v457, v458);
                    sub_1000045C8(v459, v460);
                    swift_bridgeObjectRelease(v468);
                    swift_bridgeObjectRelease(v467);
                    swift_bridgeObjectRelease(v466);
                    swift_bridgeObjectRelease(v465);
                    swift_bridgeObjectRelease(v464);
                    swift_bridgeObjectRelease(v463);
                    swift_bridgeObjectRelease(v462);
                    swift_bridgeObjectRelease(v461);
                    sub_1000045C8(v469, v470);
                    swift_bridgeObjectRelease(v473);
                    swift_bridgeObjectRelease(v472);
                    swift_bridgeObjectRelease(v471);
                    sub_1000045C8(v474, v475);
                    sub_1000045C8(v476, v477);
                    sub_1000045C8(v478, v479);
                    swift_bridgeObjectRelease(v480);
                    sub_1000045C8(v481, v482);
                    swift_bridgeObjectRelease(v483);
                    sub_1000045C8(v485, v484);
                    sub_1000045C8(v486, v487);
                    sub_1000045C8(v488, v489);
                    sub_1000045C8(v491, v490);
                    sub_1000045C8(v492, v493);
                    LODWORD(v562) = 0;
                    unint64_t v14 = 0x18A61EE7F7E47F8LL;
                    unint64_t v16 = 57774LL;
                  }

                  else
                  {
                    uint64_t v245 = v565;
                    LOBYTE(v565) = -110;
                    uint64_t v374 = v245;
                    swift_bridgeObjectRetain(v245);
                    uint64_t v246 = v1045;
                    uint64_t v302 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
                    int v274 = v247;
                    uint64_t v1045 = v246;
                    if (v246)
                    {
                      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
                      swift_bridgeObjectRelease(v374);
                      sub_1000045C8(v376, v375);
                      swift_bridgeObjectRelease(v379);
                      swift_bridgeObjectRelease(v378);
                      swift_bridgeObjectRelease(v377);
                      sub_1000045C8(v381, v380);
                      sub_1000045C8(v383, v382);
                      sub_1000045C8(v385, v384);
                      sub_1000045C8(v387, v386);
                      sub_1000045C8(v389, v388);
                      sub_1000045C8(v391, v390);
                      sub_1000045C8(v393, v392);
                      swift_bridgeObjectRelease(v394);
                      sub_1000045C8(v396, v395);
                      swift_bridgeObjectRelease(v399);
                      swift_bridgeObjectRelease(v398);
                      swift_bridgeObjectRelease(v397);
                      sub_1000045C8(v401, v400);
                      sub_1000045C8(v403, v402);
                      sub_1000045C8(v405, v404);
                      sub_1000045C8(v407, v406);
                      swift_bridgeObjectRelease(v408);
                      sub_1000045C8(v409, v410);
                      sub_1000045C8(v411, v412);
                      swift_bridgeObjectRelease(v416);
                      swift_bridgeObjectRelease(v413);
                      sub_1000045C8(v421, v423);
                      swift_bridgeObjectRelease(v426);
                      sub_1000045C8(v428, v431);
                      sub_1000569D0(v414, v415, v417, v419, v420, v422, v424, v425, v427, v430, v432, v433);
                      swift_bridgeObjectRelease(v440);
                      swift_bridgeObjectRelease(v439);
                      swift_bridgeObjectRelease(v438);
                      swift_bridgeObjectRelease(v437);
                      swift_bridgeObjectRelease(v436);
                      swift_bridgeObjectRelease(v435);
                      swift_bridgeObjectRelease(v434);
                      swift_bridgeObjectRelease(v429);
                      swift_bridgeObjectRelease(v418);
                      sub_1000045C8(v441, v442);
                      swift_bridgeObjectRelease(v449);
                      swift_bridgeObjectRelease(v448);
                      swift_bridgeObjectRelease(v447);
                      swift_bridgeObjectRelease(v446);
                      swift_bridgeObjectRelease(v445);
                      swift_bridgeObjectRelease(v444);
                      swift_bridgeObjectRelease(v443);
                      sub_1000045C8(v450, v451);
                      swift_bridgeObjectRelease(v454);
                      swift_bridgeObjectRelease(v453);
                      swift_bridgeObjectRelease(v452);
                      sub_1000045C8(v455, v456);
                      sub_1000045C8(v457, v458);
                      sub_1000045C8(v459, v460);
                      swift_bridgeObjectRelease(v468);
                      swift_bridgeObjectRelease(v467);
                      swift_bridgeObjectRelease(v466);
                      swift_bridgeObjectRelease(v465);
                      swift_bridgeObjectRelease(v464);
                      swift_bridgeObjectRelease(v463);
                      swift_bridgeObjectRelease(v462);
                      swift_bridgeObjectRelease(v461);
                      sub_1000045C8(v469, v470);
                      swift_bridgeObjectRelease(v473);
                      swift_bridgeObjectRelease(v472);
                      swift_bridgeObjectRelease(v471);
                      sub_1000045C8(v474, v475);
                      sub_1000045C8(v476, v477);
                      sub_1000045C8(v478, v479);
                      swift_bridgeObjectRelease(v480);
                      sub_1000045C8(v481, v482);
                      swift_bridgeObjectRelease(v483);
                      sub_1000045C8(v485, v484);
                      sub_1000045C8(v486, v487);
                      sub_1000045C8(v488, v489);
                      sub_1000045C8(v491, v490);
                      sub_1000045C8(v492, v493);
                      LODWORD(v562) = 0;
                      unint64_t v14 = 0x18A61EE7F7E47F8LL;
                      unint64_t v16 = 188846LL;
                    }

                    else
                    {
                      char v930 = v274 & 1;
                      LOBYTE(v565) = -109;
                      uint64_t v301 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
                      int v273 = v248;
                      uint64_t v1045 = 0LL;
                      char v928 = v248 & 1;
                      LOBYTE(v565) = -108;
                      int v300 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
                      uint64_t v1045 = 0LL;
                      LOBYTE(v565) = -107;
                      int v299 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
                      uint64_t v1045 = 0LL;
                      LOBYTE(v565) = -106;
                      uint64_t v297 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
                      uint64_t v373 = v249;
                      uint64_t v1045 = 0LL;
                      LOBYTE(v565) = -105;
                      swift_bridgeObjectRetain(v249);
                      uint64_t v250 = v1045;
                      int v251 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
                      int v295 = v251;
                      uint64_t v1045 = v250;
                      if (!v250)
                      {
                        LOBYTE(v565) = -104;
                        uint64_t v294 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
                        int v272 = v252;
                        uint64_t v1045 = 0LL;
                        char v926 = v252 & 1;
                        LOBYTE(v565) = -103;
                        uint64_t v293 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
                        int v271 = v253;
                        uint64_t v1045 = 0LL;
                        char v924 = v253 & 1;
                        LOBYTE(v565) = -102;
                        int v292 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v565, v5);
                        uint64_t v1045 = 0LL;
                        char v923 = -101;
                        int v290 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v923, v5);
                        uint64_t v1045 = 0LL;
                        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
                        BYTE1(v564[23]) = v549;
                        LOBYTE(v564[2]) = v559 & 1;
                        LOBYTE(v564[4]) = v557 & 1;
                        LOBYTE(v564[25]) = v553 & 1;
                        LOBYTE(v564[42]) = v543 & 1;
                        LOBYTE(v564[56]) = v536 & 1;
                        LOBYTE(v564[58]) = v534 & 1;
                        LOBYTE(v564[66]) = v531 & 1;
                        LOBYTE(v564[76]) = v526 & 1;
                        LOBYTE(v564[78]) = v524 & 1;
                        LOBYTE(v564[80]) = v522 & 1;
                        LOBYTE(v564[82]) = v519 & 1;
                        LOBYTE(v564[88]) = v370 & 1;
                        LOBYTE(v564[90]) = v369 & 1;
                        LOBYTE(v564[94]) = v365 & 1;
                        LOBYTE(v564[98]) = v363 & 1;
                        LOBYTE(v564[100]) = v361 & 1;
                        LOBYTE(v564[102]) = v359 & 1;
                        LOBYTE(v564[106]) = v358 & 1;
                        LOBYTE(v564[108]) = v356 & 1;
                        LOBYTE(v564[110]) = v355 & 1;
                        LOBYTE(v564[128]) = v345 & 1;
                        LOBYTE(v564[132]) = v342 & 1;
                        LOBYTE(v564[136]) = v338 & 1;
                        LOBYTE(v564[140]) = v334 & 1;
                        v564[0] = v558;
                        v564[1] = v562;
                        v564[3] = v560;
                        v564[5] = v492;
                        v564[6] = v493;
                        v564[7] = v491;
                        v564[8] = v490;
                        v564[9] = v488;
                        v564[10] = v489;
                        v564[11] = v486;
                        v564[12] = v487;
                        v564[13] = v485;
                        v564[14] = v484;
                        v564[15] = v555;
                        v564[16] = v483;
                        v564[17] = v481;
                        v564[18] = v482;
                        uint64_t v270 = v49;
                        v564[19] = v49;
                        v564[20] = v480;
                        LOBYTE(v564[21]) = v554;
                        v564[22] = v552;
                        LOBYTE(v564[23]) = v551;
                        v564[24] = v550;
                        v564[26] = v478;
                        v564[27] = v479;
                        LOBYTE(v564[28]) = v548;
                        BYTE1(v564[28]) = v547;
                        v564[29] = v476;
                        v564[30] = v477;
                        v564[31] = v474;
                        v564[32] = v475;
                        v564[33] = v546;
                        v564[34] = v473;
                        v564[35] = v545;
                        v564[36] = v472;
                        v564[37] = v544;
                        v564[38] = v471;
                        v564[39] = v469;
                        v564[40] = v470;
                        v564[41] = v542;
                        v564[43] = v541;
                        v564[44] = v468;
                        v564[45] = v540;
                        v564[46] = v467;
                        v564[47] = v539;
                        v564[48] = v466;
                        v564[49] = v465;
                        v564[50] = v464;
                        v564[51] = v538;
                        v564[52] = v463;
                        v564[53] = v537;
                        v564[54] = v462;
                        v564[55] = v535;
                        v564[57] = v533;
                        v564[59] = v532;
                        v564[60] = v461;
                        v564[61] = v459;
                        v564[62] = v460;
                        v564[63] = v457;
                        v564[64] = v458;
                        v564[65] = v530;
                        v564[67] = v455;
                        v564[68] = v456;
                        v564[69] = v529;
                        v564[70] = v454;
                        v564[71] = v528;
                        v564[72] = v453;
                        v564[73] = v527;
                        v564[74] = v452;
                        v564[75] = v525;
                        v564[77] = v523;
                        v564[79] = v521;
                        v564[81] = v520;
                        v564[83] = v450;
                        v564[84] = v451;
                        v564[85] = v518;
                        v564[86] = v449;
                        v564[87] = v517;
                        v564[89] = v516;
                        v564[91] = v515;
                        v564[92] = v448;
                        v564[93] = v514;
                        v564[95] = v513;
                        v564[96] = v447;
                        v564[97] = v512;
                        v564[99] = v511;
                        v564[101] = v510;
                        v564[103] = v446;
                        v564[104] = v445;
                        v564[105] = v509;
                        v564[107] = v508;
                        v564[109] = v507;
                        BYTE1(v564[110]) = v506;
                        BYTE2(v564[110]) = v505;
                        BYTE3(v564[110]) = v504;
                        BYTE4(v564[110]) = v503;
                        v564[111] = v502;
                        v564[112] = v444;
                        v564[113] = v501;
                        v564[114] = v443;
                        v564[115] = v441;
                        v564[116] = v442;
                        v564[117] = v500;
                        v564[118] = v440;
                        v564[119] = v499;
                        v564[120] = v439;
                        v564[121] = v498;
                        v564[122] = v438;
                        v564[123] = v497;
                        v564[124] = v437;
                        v564[125] = v496;
                        v564[126] = v436;
                        v564[127] = v495;
                        v564[129] = v494;
                        v564[130] = v435;
                        v564[131] = v372;
                        v564[133] = v371;
                        v564[134] = v434;
                        v564[135] = v368;
                        BYTE1(v564[136]) = v367;
                        v564[137] = v366;
                        v564[138] = v429;
                        v564[139] = v364;
                        v564[141] = v362;
                        LOBYTE(v564[142]) = v337 & 1;
                        v564[143] = v360;
                        v564[144] = v418;
                        v564[145] = v414;
                        v564[146] = v415;
                        v564[147] = v417;
                        v564[148] = v419;
                        v564[149] = v420;
                        v564[150] = v422;
                        v564[151] = v424;
                        v564[152] = v425;
                        v564[153] = v427;
                        v564[154] = v430;
                        v564[155] = v432;
                        v564[156] = v433;
                        v564[157] = v428;
                        v564[158] = v431;
                        v564[159] = v357;
                        v564[160] = v426;
                        v564[161] = v421;
                        v564[162] = v423;
                        v564[163] = v354;
                        LOBYTE(v564[164]) = v330 & 1;
                        v564[165] = v353;
                        v564[166] = v416;
                        LOBYTE(v564[167]) = v352;
                        BYTE1(v564[167]) = v351;
                        BYTE2(v564[167]) = v350;
                        v564[168] = v349;
                        LOBYTE(v564[169]) = v326 & 1;
                        v564[170] = v348;
                        v564[171] = v413;
                        v564[172] = v411;
                        v564[173] = v412;
                        v564[174] = v409;
                        v564[175] = v410;
                        v564[176] = v347;
                        LOBYTE(v564[177]) = v317 & 1;
                        BYTE1(v564[177]) = v346;
                        BYTE2(v564[177]) = v344;
                        v564[178] = v343;
                        LOBYTE(v564[179]) = v313 & 1;
                        v564[180] = v341;
                        LOBYTE(v564[181]) = v312 & 1;
                        BYTE1(v564[181]) = v340;
                        v564[182] = v339;
                        LOBYTE(v564[183]) = v310 & 1;
                        v564[184] = v336;
                        LOBYTE(v564[185]) = v308 & 1;
                        v564[186] = v335;
                        v564[187] = v408;
                        v564[188] = v333;
                        LOBYTE(v564[189]) = v305 & 1;
                        v564[190] = v332;
                        LOBYTE(v564[191]) = v303 & 1;
                        v564[192] = v407;
                        v564[193] = v406;
                        v564[194] = v405;
                        v564[195] = v404;
                        v564[196] = v331;
                        LOBYTE(v564[197]) = v296 & 1;
                        v564[198] = v403;
                        v564[199] = v402;
                        v564[200] = v401;
                        v564[201] = v400;
                        v564[202] = v329;
                        LOBYTE(v564[203]) = v291 & 1;
                        v564[204] = v327;
                        LOBYTE(v564[205]) = v289 & 1;
                        v564[206] = v399;
                        v564[207] = v324;
                        v564[208] = v398;
                        v564[209] = v322;
                        v564[210] = v397;
                        v564[211] = v319;
                        LOBYTE(v564[212]) = v287 & 1;
                        BYTE1(v564[212]) = v316;
                        BYTE2(v564[212]) = v315;
                        v564[213] = v314;
                        LOBYTE(v564[214]) = v286 & 1;
                        v564[215] = v396;
                        v564[216] = v395;
                        v564[217] = v311;
                        LOBYTE(v564[218]) = v285 & 1;
                        BYTE1(v564[218]) = v309;
                        v564[219] = v307;
                        v564[220] = v394;
                        v564[221] = v306;
                        LOBYTE(v564[222]) = v284 & 1;
                        v564[223] = v304;
                        LOBYTE(v564[224]) = v283 & 1;
                        v564[225] = v393;
                        v564[226] = v392;
                        v564[227] = v391;
                        v564[228] = v390;
                        v564[229] = v298;
                        LOBYTE(v564[230]) = v282 & 1;
                        v564[231] = v389;
                        v564[232] = v388;
                        v564[233] = v387;
                        v564[234] = v386;
                        v564[235] = v385;
                        v564[236] = v384;
                        v564[237] = v288;
                        LOBYTE(v564[238]) = v281 & 1;
                        v564[239] = v383;
                        v564[240] = v382;
                        v564[241] = v328;
                        LOBYTE(v564[242]) = v280 & 1;
                        v564[243] = v381;
                        v564[244] = v380;
                        v564[245] = v325;
                        uint64_t v254 = v379;
                        v564[246] = v379;
                        v564[247] = v323;
                        LOBYTE(v564[248]) = v279 & 1;
                        v564[249] = v321;
                        LOBYTE(v564[250]) = v278 & 1;
                        v564[251] = v320;
                        LOBYTE(v564[252]) = v277 & 1;
                        v564[253] = v318;
                        LOBYTE(v564[254]) = v276 & 1;
                        uint64_t v255 = v378;
                        v564[255] = v378;
                        uint64_t v256 = v377;
                        v564[256] = v377;
                        uint64_t v257 = v376;
                        v564[257] = v376;
                        unint64_t v258 = v375;
                        v564[258] = v375;
                        v564[259] = v556;
                        LOBYTE(v564[260]) = v275 & 1;
                        uint64_t v259 = v374;
                        v564[261] = v374;
                        v564[262] = v302;
                        LOBYTE(v564[263]) = v274 & 1;
                        v564[264] = v301;
                        LOBYTE(v564[265]) = v273 & 1;
                        BYTE1(v564[265]) = v300;
                        BYTE2(v564[265]) = v299;
                        v564[266] = v297;
                        uint64_t v260 = v373;
                        v564[267] = v373;
                        LOBYTE(v564[268]) = v295;
                        v564[269] = v294;
                        LOBYTE(v564[270]) = v272 & 1;
                        v564[271] = v293;
                        LOBYTE(v564[272]) = v271 & 1;
                        BYTE1(v564[272]) = v292;
                        BYTE2(v564[272]) = v290;
                        sub_100056D58((uint64_t)v564);
                        swift_bridgeObjectRelease(v259);
                        swift_bridgeObjectRelease(v260);
                        sub_1000045C8(v257, v258);
                        swift_bridgeObjectRelease(v254);
                        swift_bridgeObjectRelease(v255);
                        swift_bridgeObjectRelease(v256);
                        sub_1000045C8(v381, v380);
                        sub_1000045C8(v383, v382);
                        sub_1000045C8(v385, v384);
                        sub_1000045C8(v387, v386);
                        sub_1000045C8(v389, v388);
                        sub_1000045C8(v391, v390);
                        sub_1000045C8(v393, v392);
                        swift_bridgeObjectRelease(v394);
                        sub_1000045C8(v396, v395);
                        swift_bridgeObjectRelease(v399);
                        swift_bridgeObjectRelease(v398);
                        swift_bridgeObjectRelease(v397);
                        sub_1000045C8(v401, v400);
                        sub_1000045C8(v403, v402);
                        sub_1000045C8(v405, v404);
                        sub_1000045C8(v407, v406);
                        swift_bridgeObjectRelease(v408);
                        sub_1000045C8(v409, v410);
                        sub_1000045C8(v411, v412);
                        swift_bridgeObjectRelease(v416);
                        swift_bridgeObjectRelease(v413);
                        sub_1000045C8(v421, v423);
                        swift_bridgeObjectRelease(v426);
                        sub_1000045C8(v428, v431);
                        sub_1000569D0(v414, v415, v417, v419, v420, v422, v424, v425, v427, v430, v432, v433);
                        swift_bridgeObjectRelease(v440);
                        swift_bridgeObjectRelease(v439);
                        swift_bridgeObjectRelease(v438);
                        swift_bridgeObjectRelease(v437);
                        swift_bridgeObjectRelease(v436);
                        swift_bridgeObjectRelease(v435);
                        swift_bridgeObjectRelease(v434);
                        swift_bridgeObjectRelease(v429);
                        swift_bridgeObjectRelease(v418);
                        sub_1000045C8(v441, v442);
                        swift_bridgeObjectRelease(v449);
                        swift_bridgeObjectRelease(v448);
                        swift_bridgeObjectRelease(v447);
                        swift_bridgeObjectRelease(v446);
                        swift_bridgeObjectRelease(v445);
                        swift_bridgeObjectRelease(v444);
                        swift_bridgeObjectRelease(v443);
                        sub_1000045C8(v450, v451);
                        swift_bridgeObjectRelease(v454);
                        swift_bridgeObjectRelease(v453);
                        swift_bridgeObjectRelease(v452);
                        sub_1000045C8(v455, v456);
                        sub_1000045C8(v457, v458);
                        sub_1000045C8(v459, v460);
                        swift_bridgeObjectRelease(v468);
                        swift_bridgeObjectRelease(v467);
                        swift_bridgeObjectRelease(v466);
                        swift_bridgeObjectRelease(v465);
                        swift_bridgeObjectRelease(v464);
                        swift_bridgeObjectRelease(v463);
                        swift_bridgeObjectRelease(v462);
                        swift_bridgeObjectRelease(v461);
                        sub_1000045C8(v469, v470);
                        swift_bridgeObjectRelease(v473);
                        swift_bridgeObjectRelease(v472);
                        swift_bridgeObjectRelease(v471);
                        sub_1000045C8(v474, v475);
                        sub_1000045C8(v476, v477);
                        sub_1000045C8(v478, v479);
                        swift_bridgeObjectRelease(v480);
                        sub_1000045C8(v481, v482);
                        swift_bridgeObjectRelease(v483);
                        sub_1000045C8(v485, v484);
                        uint64_t v261 = v486;
                        unint64_t v262 = v487;
                        sub_1000045C8(v486, v487);
                        uint64_t v263 = v488;
                        uint64_t v264 = v489;
                        sub_1000045C8(v488, v489);
                        uint64_t v265 = v491;
                        uint64_t v266 = v490;
                        sub_1000045C8(v491, v490);
                        uint64_t v267 = v492;
                        uint64_t v268 = v493;
                        sub_1000045C8(v492, v493);
                        sub_100002FD4(v563);
                        uint64_t v565 = v558;
                        uint64_t v566 = v562;
                        uint64_t v568 = v560;
                        uint64_t v570 = v267;
                        uint64_t v571 = v268;
                        uint64_t v572 = v265;
                        uint64_t v573 = v266;
                        uint64_t v574 = v263;
                        uint64_t v575 = v264;
                        uint64_t v576 = v261;
                        unint64_t v577 = v262;
                        uint64_t v578 = v485;
                        unint64_t v579 = v484;
                        uint64_t v580 = v555;
                        uint64_t v581 = v483;
                        uint64_t v582 = v481;
                        unint64_t v583 = v482;
                        uint64_t v584 = v270;
                        uint64_t v585 = v480;
                        char v586 = v554;
                        uint64_t v588 = v552;
                        char v589 = v551;
                        uint64_t v593 = v550;
                        uint64_t v596 = v478;
                        unint64_t v597 = v479;
                        char v598 = v548;
                        char v599 = v547;
                        uint64_t v602 = v476;
                        unint64_t v603 = v477;
                        uint64_t v604 = v474;
                        unint64_t v605 = v475;
                        uint64_t v606 = v546;
                        uint64_t v607 = v473;
                        uint64_t v608 = v545;
                        uint64_t v609 = v472;
                        uint64_t v610 = v544;
                        uint64_t v611 = v471;
                        uint64_t v612 = v469;
                        unint64_t v613 = v470;
                        uint64_t v614 = v542;
                        uint64_t v617 = v541;
                        uint64_t v618 = v468;
                        uint64_t v619 = v540;
                        uint64_t v620 = v467;
                        uint64_t v621 = v539;
                        uint64_t v622 = v466;
                        uint64_t v623 = v465;
                        uint64_t v624 = v464;
                        uint64_t v625 = v538;
                        uint64_t v626 = v463;
                        uint64_t v627 = v537;
                        uint64_t v628 = v462;
                        uint64_t v629 = v535;
                        uint64_t v632 = v533;
                        uint64_t v635 = v532;
                        uint64_t v636 = v461;
                        uint64_t v637 = v459;
                        unint64_t v638 = v460;
                        uint64_t v639 = v457;
                        unint64_t v640 = v458;
                        uint64_t v641 = v530;
                        uint64_t v644 = v455;
                        unint64_t v645 = v456;
                        uint64_t v646 = v529;
                        uint64_t v647 = v454;
                        uint64_t v648 = v528;
                        uint64_t v649 = v453;
                        uint64_t v650 = v527;
                        uint64_t v651 = v452;
                        uint64_t v652 = v525;
                        uint64_t v655 = v523;
                        uint64_t v658 = v521;
                        uint64_t v661 = v520;
                        uint64_t v664 = v450;
                        unint64_t v665 = v451;
                        uint64_t v666 = v518;
                        uint64_t v667 = v449;
                        uint64_t v668 = v517;
                        uint64_t v671 = v516;
                        uint64_t v674 = v515;
                        uint64_t v675 = v448;
                        uint64_t v676 = v514;
                        uint64_t v679 = v513;
                        uint64_t v680 = v447;
                        uint64_t v681 = v512;
                        uint64_t v684 = v511;
                        uint64_t v687 = v510;
                        uint64_t v690 = v446;
                        uint64_t v691 = v445;
                        uint64_t v692 = v509;
                        uint64_t v695 = v508;
                        uint64_t v698 = v507;
                        char v700 = v506;
                        char v701 = v505;
                        char v702 = v504;
                        char v703 = v503;
                        uint64_t v706 = v502;
                        uint64_t v707 = v444;
                        uint64_t v708 = v501;
                        uint64_t v709 = v443;
                        uint64_t v710 = v441;
                        unint64_t v711 = v442;
                        uint64_t v712 = v500;
                        uint64_t v713 = v440;
                        uint64_t v714 = v499;
                        uint64_t v715 = v439;
                        uint64_t v716 = v498;
                        uint64_t v717 = v438;
                        uint64_t v718 = v497;
                        uint64_t v719 = v437;
                        uint64_t v720 = v496;
                        uint64_t v721 = v436;
                        uint64_t v722 = v495;
                        uint64_t v725 = v494;
                        uint64_t v726 = v435;
                        uint64_t v727 = v372;
                        uint64_t v730 = v371;
                        uint64_t v731 = v434;
                        uint64_t v732 = v368;
                        char v734 = v367;
                        uint64_t v737 = v366;
                        uint64_t v738 = v429;
                        uint64_t v739 = v364;
                        uint64_t v742 = v362;
                        uint64_t v745 = v360;
                        uint64_t v746 = v418;
                        uint64_t v747 = v414;
                        uint64_t v748 = v415;
                        uint64_t v749 = v417;
                        uint64_t v750 = v419;
                        uint64_t v751 = v420;
                        uint64_t v752 = v422;
                        uint64_t v753 = v424;
                        uint64_t v754 = v425;
                        uint64_t v755 = v427;
                        uint64_t v756 = v430;
                        uint64_t v757 = v432;
                        uint64_t v758 = v433;
                        uint64_t v759 = v428;
                        unint64_t v760 = v431;
                        uint64_t v761 = v357;
                        uint64_t v762 = v426;
                        uint64_t v763 = v421;
                        unint64_t v764 = v423;
                        uint64_t v765 = v354;
                        uint64_t v768 = v353;
                        uint64_t v769 = v416;
                        char v770 = v352;
                        char v771 = v351;
                        char v772 = v350;
                        uint64_t v775 = v349;
                        uint64_t v778 = v348;
                        uint64_t v779 = v413;
                        uint64_t v780 = v411;
                        unint64_t v781 = v412;
                        uint64_t v782 = v409;
                        unint64_t v783 = v410;
                        uint64_t v784 = v347;
                        char v786 = v346;
                        char v787 = v344;
                        uint64_t v790 = v343;
                        uint64_t v793 = v341;
                        char v795 = v340;
                        uint64_t v798 = v339;
                        uint64_t v801 = v336;
                        uint64_t v804 = v335;
                        uint64_t v805 = v408;
                        uint64_t v806 = v333;
                        uint64_t v809 = v332;
                        uint64_t v812 = v407;
                        unint64_t v813 = v406;
                        uint64_t v814 = v405;
                        unint64_t v815 = v404;
                        uint64_t v816 = v331;
                        uint64_t v819 = v403;
                        unint64_t v820 = v402;
                        uint64_t v821 = v401;
                        unint64_t v822 = v400;
                        uint64_t v823 = v329;
                        uint64_t v826 = v327;
                        uint64_t v829 = v399;
                        uint64_t v830 = v324;
                        uint64_t v831 = v398;
                        uint64_t v832 = v322;
                        uint64_t v833 = v397;
                        uint64_t v834 = v319;
                        char v836 = v316;
                        char v837 = v315;
                        uint64_t v840 = v314;
                        uint64_t v843 = v396;
                        unint64_t v844 = v395;
                        uint64_t v845 = v311;
                        char v847 = v309;
                        uint64_t v850 = v307;
                        uint64_t v851 = v394;
                        uint64_t v852 = v306;
                        uint64_t v855 = v304;
                        uint64_t v858 = v393;
                        unint64_t v859 = v392;
                        uint64_t v860 = v391;
                        unint64_t v861 = v390;
                        uint64_t v862 = v298;
                        uint64_t v865 = v389;
                        unint64_t v866 = v388;
                        uint64_t v867 = v387;
                        unint64_t v868 = v386;
                        uint64_t v869 = v385;
                        unint64_t v870 = v384;
                        uint64_t v871 = v288;
                        *(_DWORD *)v616 = *(_DWORD *)v1031;
                        *(_DWORD *)v631 = *(_DWORD *)v1029;
                        *(_DWORD *)v634 = *(_DWORD *)v1027;
                        *(_DWORD *)v643 = *(_DWORD *)v1025;
                        *(_DWORD *)v654 = *(_DWORD *)v1023;
                        *(_DWORD *)v657 = *(_DWORD *)v1021;
                        *(_DWORD *)v660 = *(_DWORD *)v1019;
                        *(_DWORD *)v663 = *(_DWORD *)v1017;
                        *(_DWORD *)v670 = *(_DWORD *)v1015;
                        *(_DWORD *)v673 = *(_DWORD *)v1013;
                        *(_DWORD *)v678 = *(_DWORD *)v1011;
                        *(_DWORD *)v683 = *(_DWORD *)v1009;
                        *(_DWORD *)v686 = *(_DWORD *)v1007;
                        *(_DWORD *)v689 = *(_DWORD *)v1005;
                        *(_DWORD *)v694 = *(_DWORD *)v1003;
                        *(_DWORD *)v697 = *(_DWORD *)v1001;
                        __int16 v704 = v998;
                        *(_DWORD *)v724 = *(_DWORD *)v996;
                        *(_DWORD *)v729 = *(_DWORD *)v994;
                        int v735 = v991;
                        *(_DWORD *)v741 = *(_DWORD *)v989;
                        *(_DWORD *)v744 = *(_DWORD *)v987;
                        *(_DWORD *)v767 = *(_DWORD *)v985;
                        int v773 = v983;
                        *(_DWORD *)v777 = *(_DWORD *)v981;
                        int v788 = v978;
                        *(_DWORD *)v792 = *(_DWORD *)v976;
                        int v796 = v973;
                        *(_DWORD *)v800 = *(_DWORD *)v971;
                        *(_DWORD *)v803 = *(_DWORD *)v969;
                        *(_DWORD *)v808 = *(_DWORD *)v967;
                        *(_DWORD *)v811 = *(_DWORD *)v965;
                        *(_DWORD *)v818 = *(_DWORD *)v963;
                        *(_DWORD *)v825 = *(_DWORD *)v961;
                        *(_DWORD *)v828 = *(_DWORD *)v959;
                        int v838 = v956;
                        *(_DWORD *)v842 = *(_DWORD *)v954;
                        int v848 = v951;
                        *(_DWORD *)v854 = *(_DWORD *)v949;
                        *(_DWORD *)v857 = *(_DWORD *)v947;
                        *(_DWORD *)v864 = *(_DWORD *)v945;
                        *(_DWORD *)v873 = *(_DWORD *)v943;
                        *(_DWORD *)v878 = *(_DWORD *)v941;
                        LOBYTE(v567) = v1044;
                        *(_DWORD *)((char *)&v567 + 1) = *(_DWORD *)v1043;
                        HIDWORD(v567) = *(_DWORD *)&v1043[3];
                        LOBYTE(v569) = v1042;
                        *(_DWORD *)((char *)&v569 + 1) = *(_DWORD *)v1041;
                        HIDWORD(v569) = *(_DWORD *)&v1041[3];
                        *(_DWORD *)v587 = *(_DWORD *)v1040;
                        *(_DWORD *)&v587[3] = *(_DWORD *)&v1040[3];
                        char v590 = v1039;
                        int v591 = v1037;
                        __int16 v592 = v1038;
                        char v594 = v1036;
                        *(_DWORD *)v595 = *(_DWORD *)v1035;
                        *(_DWORD *)&v595[3] = *(_DWORD *)&v1035[3];
                        __int16 v601 = v1034;
                        int v600 = v1033;
                        char v615 = v1032;
                        *(_DWORD *)&v616[3] = *(_DWORD *)&v1031[3];
                        char v630 = v1030;
                        *(_DWORD *)&v631[3] = *(_DWORD *)&v1029[3];
                        char v633 = v1028;
                        *(_DWORD *)&v634[3] = *(_DWORD *)&v1027[3];
                        char v642 = v1026;
                        *(_DWORD *)&v643[3] = *(_DWORD *)&v1025[3];
                        char v653 = v1024;
                        *(_DWORD *)&v654[3] = *(_DWORD *)&v1023[3];
                        char v656 = v1022;
                        *(_DWORD *)&v657[3] = *(_DWORD *)&v1021[3];
                        char v659 = v1020;
                        *(_DWORD *)&v660[3] = *(_DWORD *)&v1019[3];
                        char v662 = v1018;
                        *(_DWORD *)&v663[3] = *(_DWORD *)&v1017[3];
                        char v669 = v1016;
                        *(_DWORD *)&v670[3] = *(_DWORD *)&v1015[3];
                        char v672 = v1014;
                        *(_DWORD *)&v673[3] = *(_DWORD *)&v1013[3];
                        char v677 = v1012;
                        *(_DWORD *)&v678[3] = *(_DWORD *)&v1011[3];
                        char v682 = v1010;
                        *(_DWORD *)&v683[3] = *(_DWORD *)&v1009[3];
                        char v685 = v1008;
                        *(_DWORD *)&v686[3] = *(_DWORD *)&v1007[3];
                        char v688 = v1006;
                        *(_DWORD *)&v689[3] = *(_DWORD *)&v1005[3];
                        char v693 = v1004;
                        *(_DWORD *)&v694[3] = *(_DWORD *)&v1003[3];
                        char v696 = v1002;
                        *(_DWORD *)&v697[3] = *(_DWORD *)&v1001[3];
                        char v699 = v1000;
                        char v705 = v999;
                        char v723 = v997;
                        *(_DWORD *)&v724[3] = *(_DWORD *)&v996[3];
                        char v728 = v995;
                        *(_DWORD *)&v729[3] = *(_DWORD *)&v994[3];
                        char v733 = v993;
                        __int16 v736 = v992;
                        char v740 = v990;
                        *(_DWORD *)&v741[3] = *(_DWORD *)&v989[3];
                        char v743 = v988;
                        *(_DWORD *)&v744[3] = *(_DWORD *)&v987[3];
                        char v766 = v986;
                        *(_DWORD *)&v767[3] = *(_DWORD *)&v985[3];
                        char v774 = v984;
                        char v776 = v982;
                        *(_DWORD *)&v777[3] = *(_DWORD *)&v981[3];
                        char v785 = v980;
                        char v789 = v979;
                        char v791 = v977;
                        *(_DWORD *)&v792[3] = *(_DWORD *)&v976[3];
                        char v794 = v975;
                        __int16 v797 = v974;
                        char v799 = v972;
                        *(_DWORD *)&v800[3] = *(_DWORD *)&v971[3];
                        char v802 = v970;
                        *(_DWORD *)&v803[3] = *(_DWORD *)&v969[3];
                        char v807 = v968;
                        *(_DWORD *)&v808[3] = *(_DWORD *)&v967[3];
                        char v810 = v966;
                        *(_DWORD *)&v811[3] = *(_DWORD *)&v965[3];
                        char v817 = v964;
                        *(_DWORD *)&v818[3] = *(_DWORD *)&v963[3];
                        char v824 = v962;
                        *(_DWORD *)&v825[3] = *(_DWORD *)&v961[3];
                        char v827 = v960;
                        *(_DWORD *)&v828[3] = *(_DWORD *)&v959[3];
                        char v835 = v958;
                        char v839 = v957;
                        char v841 = v955;
                        *(_DWORD *)&v842[3] = *(_DWORD *)&v954[3];
                        char v846 = v953;
                        __int16 v849 = v952;
                        char v853 = v950;
                        *(_DWORD *)&v854[3] = *(_DWORD *)&v949[3];
                        char v856 = v948;
                        *(_DWORD *)&v857[3] = *(_DWORD *)&v947[3];
                        char v863 = v946;
                        *(_DWORD *)&v864[3] = *(_DWORD *)&v945[3];
                        char v872 = v944;
                        *(_DWORD *)&v873[3] = *(_DWORD *)&v943[3];
                        uint64_t v874 = v383;
                        unint64_t v875 = v382;
                        uint64_t v876 = v328;
                        char v877 = v942;
                        *(_DWORD *)&v878[3] = *(_DWORD *)&v941[3];
                        uint64_t v879 = v381;
                        unint64_t v880 = v380;
                        uint64_t v881 = v325;
                        uint64_t v882 = v379;
                        uint64_t v883 = v323;
                        char v884 = v940;
                        *(_DWORD *)v885 = *(_DWORD *)v939;
                        *(_DWORD *)&v885[3] = *(_DWORD *)&v939[3];
                        uint64_t v886 = v321;
                        char v887 = v938;
                        *(_DWORD *)v888 = *(_DWORD *)v937;
                        *(_DWORD *)&v888[3] = *(_DWORD *)&v937[3];
                        uint64_t v889 = v320;
                        char v890 = v936;
                        *(_DWORD *)v891 = *(_DWORD *)v935;
                        *(_DWORD *)&v891[3] = *(_DWORD *)&v935[3];
                        uint64_t v892 = v318;
                        char v893 = v934;
                        *(_DWORD *)v894 = *(_DWORD *)v933;
                        *(_DWORD *)&v894[3] = *(_DWORD *)&v933[3];
                        uint64_t v895 = v378;
                        uint64_t v896 = v377;
                        uint64_t v897 = v376;
                        unint64_t v898 = v375;
                        uint64_t v899 = v556;
                        char v900 = v932;
                        *(_DWORD *)v901 = *(_DWORD *)v931;
                        *(_DWORD *)&v901[3] = *(_DWORD *)&v931[3];
                        uint64_t v902 = v374;
                        uint64_t v903 = v302;
                        char v904 = v930;
                        *(_DWORD *)v905 = *(_DWORD *)v929;
                        *(_DWORD *)&v905[3] = *(_DWORD *)&v929[3];
                        uint64_t v906 = v301;
                        char v907 = v928;
                        char v908 = v300;
                        char v909 = v299;
                        int v910 = *(_DWORD *)&v927[7];
                        char v911 = v927[11];
                        uint64_t v912 = v297;
                        uint64_t v913 = v373;
                        char v914 = v295;
                        *(_DWORD *)v915 = *(_DWORD *)v927;
                        *(_DWORD *)&v915[3] = *(_DWORD *)&v927[3];
                        uint64_t v916 = v294;
                        char v917 = v926;
                        *(_DWORD *)v918 = *(_DWORD *)v925;
                        *(_DWORD *)&v918[3] = *(_DWORD *)&v925[3];
                        uint64_t v919 = v293;
                        char v920 = v924;
                        char v921 = v292;
                        char v922 = v290;
                        sub_100057360((uint64_t)&v565);
                        return memcpy(v561, v564, 0x883uLL);
                      }

                      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
                      swift_bridgeObjectRelease(v374);
                      swift_bridgeObjectRelease(v373);
                      sub_1000045C8(v376, v375);
                      swift_bridgeObjectRelease(v379);
                      swift_bridgeObjectRelease(v378);
                      swift_bridgeObjectRelease(v377);
                      sub_1000045C8(v381, v380);
                      sub_1000045C8(v383, v382);
                      sub_1000045C8(v385, v384);
                      sub_1000045C8(v387, v386);
                      sub_1000045C8(v389, v388);
                      sub_1000045C8(v391, v390);
                      sub_1000045C8(v393, v392);
                      swift_bridgeObjectRelease(v394);
                      sub_1000045C8(v396, v395);
                      swift_bridgeObjectRelease(v399);
                      swift_bridgeObjectRelease(v398);
                      swift_bridgeObjectRelease(v397);
                      sub_1000045C8(v401, v400);
                      sub_1000045C8(v403, v402);
                      sub_1000045C8(v405, v404);
                      sub_1000045C8(v407, v406);
                      swift_bridgeObjectRelease(v408);
                      sub_1000045C8(v409, v410);
                      sub_1000045C8(v411, v412);
                      swift_bridgeObjectRelease(v416);
                      swift_bridgeObjectRelease(v413);
                      sub_1000045C8(v421, v423);
                      swift_bridgeObjectRelease(v426);
                      sub_1000045C8(v428, v431);
                      sub_1000569D0(v414, v415, v417, v419, v420, v422, v424, v425, v427, v430, v432, v433);
                      swift_bridgeObjectRelease(v440);
                      swift_bridgeObjectRelease(v439);
                      swift_bridgeObjectRelease(v438);
                      swift_bridgeObjectRelease(v437);
                      swift_bridgeObjectRelease(v436);
                      swift_bridgeObjectRelease(v435);
                      swift_bridgeObjectRelease(v434);
                      swift_bridgeObjectRelease(v429);
                      swift_bridgeObjectRelease(v418);
                      sub_1000045C8(v441, v442);
                      swift_bridgeObjectRelease(v449);
                      swift_bridgeObjectRelease(v448);
                      swift_bridgeObjectRelease(v447);
                      swift_bridgeObjectRelease(v446);
                      swift_bridgeObjectRelease(v445);
                      swift_bridgeObjectRelease(v444);
                      swift_bridgeObjectRelease(v443);
                      sub_1000045C8(v450, v451);
                      swift_bridgeObjectRelease(v454);
                      swift_bridgeObjectRelease(v453);
                      swift_bridgeObjectRelease(v452);
                      sub_1000045C8(v455, v456);
                      sub_1000045C8(v457, v458);
                      sub_1000045C8(v459, v460);
                      swift_bridgeObjectRelease(v468);
                      swift_bridgeObjectRelease(v467);
                      swift_bridgeObjectRelease(v466);
                      swift_bridgeObjectRelease(v465);
                      swift_bridgeObjectRelease(v464);
                      swift_bridgeObjectRelease(v463);
                      swift_bridgeObjectRelease(v462);
                      swift_bridgeObjectRelease(v461);
                      sub_1000045C8(v469, v470);
                      swift_bridgeObjectRelease(v473);
                      swift_bridgeObjectRelease(v472);
                      swift_bridgeObjectRelease(v471);
                      sub_1000045C8(v474, v475);
                      sub_1000045C8(v476, v477);
                      sub_1000045C8(v478, v479);
                      swift_bridgeObjectRelease(v480);
                      sub_1000045C8(v481, v482);
                      swift_bridgeObjectRelease(v483);
                      sub_1000045C8(v485, v484);
                      sub_1000045C8(v486, v487);
                      sub_1000045C8(v488, v489);
                      sub_1000045C8(v491, v490);
                      sub_1000045C8(v492, v493);
                      LODWORD(v562) = 1;
                      unint64_t v14 = 0x18A61EE7F7E47F8LL;
                      unint64_t v16 = 4383150LL;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

LABEL_4:
  __n128 result = (void *)sub_100002FD4(v563);
  uint64_t v522 = (v15 >> 1) & 1;
  LODWORD(v521) = v15 & 1;
  uint64_t v523 = (v15 >> 2) & 1;
  uint64_t v524 = (v15 >> 3) & 1;
  uint64_t v525 = (v15 >> 4) & 1;
  uint64_t v526 = (v15 >> 5) & 1;
  uint64_t v527 = (v15 >> 6) & 1;
  uint64_t v528 = (v15 >> 7) & 1;
  uint64_t v529 = (v15 >> 9) & 1;
  uint64_t v530 = (v15 >> 11) & 1;
  uint64_t v531 = (v15 >> 14) & 1;
  uint64_t v532 = (v15 >> 17) & 1;
  uint64_t v533 = (v15 >> 18) & 1;
  uint64_t v534 = (v15 >> 19) & 1;
  uint64_t v535 = (v15 >> 20) & 1;
  uint64_t v536 = (v15 >> 21) & 1;
  uint64_t v537 = (v15 >> 23) & 1;
  uint64_t v538 = (v15 >> 28) & 1;
  uint64_t v539 = (v15 >> 29) & 1;
  uint64_t v540 = (v15 >> 30) & 1;
  uint64_t v541 = (v15 >> 39) & 1;
  uint64_t v542 = (v15 >> 42) & 1;
  uint64_t v543 = (v15 >> 43) & 1;
  uint64_t v544 = (v15 >> 45) & 1;
  uint64_t v545 = (v15 >> 46) & 1;
  uint64_t v546 = (v15 >> 49) & 1;
  uint64_t v547 = (v15 >> 50) & 1;
  uint64_t v548 = (v15 >> 51) & 1;
  uint64_t v549 = HIBYTE(v15) & 1;
  uint64_t v550 = (v15 >> 59) & 1;
  uint64_t v551 = (v15 >> 62) & 1;
  uint64_t v552 = v15 >> 63;
  uint64_t v553 = (v16 >> 1) & 1;
  uint64_t v554 = (v16 >> 2) & 1;
  uint64_t v555 = (v16 >> 3) & 1;
  uint64_t v556 = (v16 >> 5) & 1;
  uint64_t v557 = (v16 >> 7) & 1;
  uint64_t v558 = (v16 >> 8) & 1;
  uint64_t v559 = (v16 >> 13) & 1;
  uint64_t v560 = (v16 >> 14) & 1;
  v561 = (void *)((v16 >> 15) & 1);
  v563 = (void *)((v16 >> 17) & 1);
  uint64_t v18 = (v14 >> 4) & 1;
  uint64_t v19 = (v14 >> 5) & 1;
  uint64_t v20 = (v14 >> 6) & 1;
  uint64_t v21 = (v14 >> 7) & 1;
  uint64_t v22 = (v14 >> 8) & 1;
  uint64_t v23 = (v14 >> 9) & 1;
  uint64_t v24 = (v14 >> 10) & 1;
  uint64_t v494 = (v14 >> 14) & 1;
  uint64_t v495 = (v14 >> 17) & 1;
  uint64_t v496 = (v14 >> 18) & 1;
  uint64_t v497 = (v14 >> 19) & 1;
  uint64_t v498 = (v14 >> 20) & 1;
  uint64_t v499 = (v14 >> 21) & 1;
  uint64_t v500 = (v14 >> 22) & 1;
  uint64_t v501 = (v14 >> 24) & 1;
  uint64_t v502 = (v14 >> 25) & 1;
  uint64_t v503 = (v14 >> 26) & 1;
  uint64_t v504 = (v14 >> 27) & 1;
  uint64_t v505 = (v14 >> 28) & 1;
  uint64_t v506 = (v14 >> 29) & 1;
  uint64_t v507 = (v14 >> 30) & 1;
  uint64_t v508 = (v14 >> 33) & 1;
  uint64_t v509 = (v14 >> 34) & 1;
  uint64_t v510 = (v14 >> 35) & 1;
  uint64_t v511 = (v14 >> 37) & 1;
  uint64_t v512 = (v14 >> 38) & 1;
  uint64_t v513 = (v14 >> 39) & 1;
  uint64_t v514 = (v14 >> 40) & 1;
  uint64_t v515 = (v14 >> 45) & 1;
  uint64_t v516 = (v14 >> 46) & 1;
  uint64_t v517 = (v14 >> 49) & 1;
  uint64_t v518 = (v14 >> 51) & 1;
  uint64_t v519 = (v14 >> 55) & 1;
  uint64_t v520 = HIBYTE(v14) & 1;
  if ((v14 & 8) != 0)
  {
    __n128 result = (void *)sub_1000045C8(v492, v493);
    if ((_DWORD)v18)
    {
LABEL_6:
      __n128 result = (void *)sub_1000045C8(v491, v490);
      if (!(_DWORD)v19) {
        goto LABEL_7;
      }
      goto LABEL_265;
    }
  }

  else if ((_DWORD)v18)
  {
    goto LABEL_6;
  }

  if (!(_DWORD)v19)
  {
LABEL_7:
    if ((_DWORD)v20) {
      goto LABEL_8;
    }
    goto LABEL_266;
  }

LABEL_265:
  __n128 result = (void *)sub_1000045C8(v488, v489);
  if ((_DWORD)v20)
  {
LABEL_8:
    __n128 result = (void *)sub_1000045C8(v486, v487);
    if (!(_DWORD)v21) {
      goto LABEL_9;
    }
    goto LABEL_267;
  }

LABEL_266:
  if (!(_DWORD)v21)
  {
LABEL_9:
    if ((_DWORD)v22) {
      goto LABEL_10;
    }
    goto LABEL_268;
  }

LABEL_267:
  __n128 result = (void *)sub_1000045C8(v485, v484);
  if ((_DWORD)v22)
  {
LABEL_10:
    __n128 result = (void *)swift_bridgeObjectRelease(v483);
    if (!(_DWORD)v23) {
      goto LABEL_11;
    }
    goto LABEL_269;
  }

LABEL_268:
  if (!(_DWORD)v23)
  {
LABEL_11:
    if ((_DWORD)v24) {
      goto LABEL_12;
    }
    goto LABEL_270;
  }

LABEL_269:
  __n128 result = (void *)sub_1000045C8(v481, v482);
  if ((_DWORD)v24)
  {
LABEL_12:
    __n128 result = (void *)swift_bridgeObjectRelease(v480);
    if (!(_DWORD)v494) {
      goto LABEL_13;
    }
    goto LABEL_271;
  }

LABEL_270:
  if (!(_DWORD)v494)
  {
LABEL_13:
    if ((_DWORD)v495) {
      goto LABEL_14;
    }
    goto LABEL_272;
  }

LABEL_271:
  __n128 result = (void *)sub_1000045C8(v478, v479);
  if ((_DWORD)v495)
  {
LABEL_14:
    __n128 result = (void *)sub_1000045C8(v476, v477);
    if (!(_DWORD)v496) {
      goto LABEL_15;
    }
    goto LABEL_273;
  }

LABEL_272:
  if (!(_DWORD)v496)
  {
LABEL_15:
    if ((_DWORD)v497) {
      goto LABEL_16;
    }
    goto LABEL_274;
  }

LABEL_273:
  __n128 result = (void *)sub_1000045C8(v474, v475);
  if ((_DWORD)v497)
  {
LABEL_16:
    __n128 result = (void *)swift_bridgeObjectRelease(v473);
    if (!(_DWORD)v498) {
      goto LABEL_17;
    }
    goto LABEL_275;
  }

LABEL_274:
  if (!(_DWORD)v498)
  {
LABEL_17:
    if ((_DWORD)v499) {
      goto LABEL_18;
    }
    goto LABEL_276;
  }

LABEL_275:
  __n128 result = (void *)swift_bridgeObjectRelease(v472);
  if ((_DWORD)v499)
  {
LABEL_18:
    __n128 result = (void *)swift_bridgeObjectRelease(v471);
    if (!(_DWORD)v500) {
      goto LABEL_19;
    }
    goto LABEL_277;
  }

LABEL_276:
  if (!(_DWORD)v500)
  {
LABEL_19:
    if ((_DWORD)v501) {
      goto LABEL_20;
    }
    goto LABEL_278;
  }

LABEL_277:
  __n128 result = (void *)sub_1000045C8(v469, v470);
  if ((_DWORD)v501)
  {
LABEL_20:
    __n128 result = (void *)swift_bridgeObjectRelease(v468);
    if (!(_DWORD)v502) {
      goto LABEL_21;
    }
    goto LABEL_279;
  }

LABEL_278:
  if (!(_DWORD)v502)
  {
LABEL_21:
    if ((_DWORD)v503) {
      goto LABEL_22;
    }
    goto LABEL_280;
  }

LABEL_279:
  __n128 result = (void *)swift_bridgeObjectRelease(v467);
  if ((_DWORD)v503)
  {
LABEL_22:
    __n128 result = (void *)swift_bridgeObjectRelease(v466);
    if (!(_DWORD)v504) {
      goto LABEL_23;
    }
    goto LABEL_281;
  }

LABEL_280:
  if (!(_DWORD)v504)
  {
LABEL_23:
    if ((_DWORD)v505) {
      goto LABEL_24;
    }
    goto LABEL_282;
  }

LABEL_281:
  __n128 result = (void *)swift_bridgeObjectRelease(v465);
  if ((_DWORD)v505)
  {
LABEL_24:
    __n128 result = (void *)swift_bridgeObjectRelease(v464);
    if (!(_DWORD)v506) {
      goto LABEL_25;
    }
    goto LABEL_283;
  }

LABEL_282:
  if (!(_DWORD)v506)
  {
LABEL_25:
    if ((_DWORD)v507) {
      goto LABEL_26;
    }
    goto LABEL_284;
  }

LABEL_283:
  __n128 result = (void *)swift_bridgeObjectRelease(v463);
  if ((_DWORD)v507)
  {
LABEL_26:
    __n128 result = (void *)swift_bridgeObjectRelease(v462);
    if (!(_DWORD)v508) {
      goto LABEL_27;
    }
    goto LABEL_285;
  }

LABEL_284:
  if (!(_DWORD)v508)
  {
LABEL_27:
    if ((_DWORD)v509) {
      goto LABEL_28;
    }
    goto LABEL_286;
  }

LABEL_285:
  __n128 result = (void *)swift_bridgeObjectRelease(v461);
  if ((_DWORD)v509)
  {
LABEL_28:
    __n128 result = (void *)sub_1000045C8(v459, v460);
    if (!(_DWORD)v510) {
      goto LABEL_29;
    }
    goto LABEL_287;
  }

LABEL_286:
  if (!(_DWORD)v510)
  {
LABEL_29:
    if ((_DWORD)v511) {
      goto LABEL_30;
    }
    goto LABEL_288;
  }

LABEL_287:
  __n128 result = (void *)sub_1000045C8(v457, v458);
  if ((_DWORD)v511)
  {
LABEL_30:
    __n128 result = (void *)sub_1000045C8(v455, v456);
    if (!(_DWORD)v512) {
      goto LABEL_31;
    }
    goto LABEL_289;
  }

LABEL_288:
  if (!(_DWORD)v512)
  {
LABEL_31:
    if ((_DWORD)v513) {
      goto LABEL_32;
    }
    goto LABEL_290;
  }

LABEL_289:
  __n128 result = (void *)swift_bridgeObjectRelease(v454);
  if ((_DWORD)v513)
  {
LABEL_32:
    __n128 result = (void *)swift_bridgeObjectRelease(v453);
    if (!(_DWORD)v514) {
      goto LABEL_33;
    }
    goto LABEL_291;
  }

LABEL_290:
  if (!(_DWORD)v514)
  {
LABEL_33:
    if ((_DWORD)v515) {
      goto LABEL_34;
    }
    goto LABEL_292;
  }

LABEL_291:
  __n128 result = (void *)swift_bridgeObjectRelease(v452);
  if ((_DWORD)v515)
  {
LABEL_34:
    __n128 result = (void *)sub_1000045C8(v450, v451);
    if (!(_DWORD)v516) {
      goto LABEL_35;
    }
    goto LABEL_293;
  }

LABEL_292:
  if (!(_DWORD)v516)
  {
LABEL_35:
    if ((_DWORD)v517) {
      goto LABEL_36;
    }
    goto LABEL_294;
  }

LABEL_293:
  __n128 result = (void *)swift_bridgeObjectRelease(v449);
  if ((_DWORD)v517)
  {
LABEL_36:
    __n128 result = (void *)swift_bridgeObjectRelease(v448);
    if (!(_DWORD)v518) {
      goto LABEL_37;
    }
    goto LABEL_295;
  }

LABEL_294:
  if (!(_DWORD)v518)
  {
LABEL_37:
    if ((_DWORD)v519) {
      goto LABEL_38;
    }
    goto LABEL_296;
  }

LABEL_295:
  __n128 result = (void *)swift_bridgeObjectRelease(v447);
  if ((_DWORD)v519)
  {
LABEL_38:
    __n128 result = (void *)swift_bridgeObjectRelease(v446);
    if (!(_DWORD)v520) {
      goto LABEL_39;
    }
    goto LABEL_297;
  }

LABEL_296:
  if (!(_DWORD)v520)
  {
LABEL_39:
    if ((_DWORD)v521) {
      goto LABEL_40;
    }
    goto LABEL_298;
  }

LABEL_297:
  __n128 result = (void *)swift_bridgeObjectRelease(v445);
  if ((_DWORD)v521)
  {
LABEL_40:
    __n128 result = (void *)swift_bridgeObjectRelease(v444);
    if (!(_DWORD)v522) {
      goto LABEL_41;
    }
    goto LABEL_299;
  }

LABEL_298:
  if (!(_DWORD)v522)
  {
LABEL_41:
    if ((_DWORD)v523) {
      goto LABEL_42;
    }
    goto LABEL_300;
  }

LABEL_299:
  __n128 result = (void *)swift_bridgeObjectRelease(v443);
  if ((_DWORD)v523)
  {
LABEL_42:
    __n128 result = (void *)sub_1000045C8(v441, v442);
    if (!(_DWORD)v524) {
      goto LABEL_43;
    }
    goto LABEL_301;
  }

LABEL_300:
  if (!(_DWORD)v524)
  {
LABEL_43:
    if ((_DWORD)v525) {
      goto LABEL_44;
    }
    goto LABEL_302;
  }

LABEL_301:
  __n128 result = (void *)swift_bridgeObjectRelease(v440);
  if ((_DWORD)v525)
  {
LABEL_44:
    __n128 result = (void *)swift_bridgeObjectRelease(v439);
    if (!(_DWORD)v526) {
      goto LABEL_45;
    }
    goto LABEL_303;
  }

LABEL_302:
  if (!(_DWORD)v526)
  {
LABEL_45:
    if ((_DWORD)v527) {
      goto LABEL_46;
    }
    goto LABEL_304;
  }

LABEL_303:
  __n128 result = (void *)swift_bridgeObjectRelease(v438);
  if ((_DWORD)v527)
  {
LABEL_46:
    __n128 result = (void *)swift_bridgeObjectRelease(v437);
    if (!(_DWORD)v528) {
      goto LABEL_47;
    }
    goto LABEL_305;
  }

LABEL_304:
  if (!(_DWORD)v528)
  {
LABEL_47:
    if ((_DWORD)v529) {
      goto LABEL_48;
    }
    goto LABEL_306;
  }

LABEL_305:
  __n128 result = (void *)swift_bridgeObjectRelease(v436);
  if ((_DWORD)v529)
  {
LABEL_48:
    __n128 result = (void *)swift_bridgeObjectRelease(v435);
    if (!(_DWORD)v530) {
      goto LABEL_49;
    }
    goto LABEL_307;
  }

LABEL_306:
  if (!(_DWORD)v530)
  {
LABEL_49:
    if ((_DWORD)v531) {
      goto LABEL_50;
    }
    goto LABEL_308;
  }

LABEL_307:
  __n128 result = (void *)swift_bridgeObjectRelease(v434);
  if ((_DWORD)v531)
  {
LABEL_50:
    __n128 result = (void *)swift_bridgeObjectRelease(v429);
    if (!(_DWORD)v532) {
      goto LABEL_51;
    }
    goto LABEL_309;
  }

LABEL_308:
  if (!(_DWORD)v532)
  {
LABEL_51:
    if ((_DWORD)v533) {
      goto LABEL_52;
    }
    goto LABEL_310;
  }

LABEL_309:
  __n128 result = (void *)swift_bridgeObjectRelease(v418);
  if ((_DWORD)v533)
  {
LABEL_52:
    __n128 result = (void *)sub_1000569D0(v414, v415, v417, v419, v420, v422, v424, v425, v427, v430, v432, v433);
    if (!(_DWORD)v534) {
      goto LABEL_53;
    }
    goto LABEL_311;
  }

LABEL_310:
  if (!(_DWORD)v534)
  {
LABEL_53:
    if ((_DWORD)v535) {
      goto LABEL_54;
    }
    goto LABEL_312;
  }

LABEL_311:
  __n128 result = (void *)sub_1000045C8(v428, v431);
  if ((_DWORD)v535)
  {
LABEL_54:
    __n128 result = (void *)swift_bridgeObjectRelease(v426);
    if (!(_DWORD)v536) {
      goto LABEL_55;
    }
    goto LABEL_313;
  }

LABEL_312:
  if (!(_DWORD)v536)
  {
LABEL_55:
    if ((_DWORD)v537) {
      goto LABEL_56;
    }
    goto LABEL_314;
  }

LABEL_313:
  __n128 result = (void *)sub_1000045C8(v421, v423);
  if ((_DWORD)v537)
  {
LABEL_56:
    __n128 result = (void *)swift_bridgeObjectRelease(v416);
    if (!(_DWORD)v538) {
      goto LABEL_57;
    }
    goto LABEL_315;
  }

LABEL_314:
  if (!(_DWORD)v538)
  {
LABEL_57:
    if ((_DWORD)v539) {
      goto LABEL_58;
    }
    goto LABEL_316;
  }

LABEL_315:
  __n128 result = (void *)swift_bridgeObjectRelease(v413);
  if ((_DWORD)v539)
  {
LABEL_58:
    __n128 result = (void *)sub_1000045C8(v411, v412);
    if (!(_DWORD)v540) {
      goto LABEL_59;
    }
    goto LABEL_317;
  }

LABEL_316:
  if (!(_DWORD)v540)
  {
LABEL_59:
    if ((_DWORD)v541) {
      goto LABEL_60;
    }
    goto LABEL_318;
  }

LABEL_317:
  __n128 result = (void *)sub_1000045C8(v409, v410);
  if ((_DWORD)v541)
  {
LABEL_60:
    __n128 result = (void *)swift_bridgeObjectRelease(v408);
    if (!(_DWORD)v542) {
      goto LABEL_61;
    }
    goto LABEL_319;
  }

LABEL_318:
  if (!(_DWORD)v542)
  {
LABEL_61:
    if ((_DWORD)v543) {
      goto LABEL_62;
    }
    goto LABEL_320;
  }

LABEL_319:
  __n128 result = (void *)sub_1000045C8(v407, v406);
  if ((_DWORD)v543)
  {
LABEL_62:
    __n128 result = (void *)sub_1000045C8(v405, v404);
    if (!(_DWORD)v544) {
      goto LABEL_63;
    }
    goto LABEL_321;
  }

LABEL_320:
  if (!(_DWORD)v544)
  {
LABEL_63:
    if ((_DWORD)v545) {
      goto LABEL_64;
    }
    goto LABEL_322;
  }

LABEL_321:
  __n128 result = (void *)sub_1000045C8(v403, v402);
  if ((_DWORD)v545)
  {
LABEL_64:
    __n128 result = (void *)sub_1000045C8(v401, v400);
    if (!(_DWORD)v546) {
      goto LABEL_65;
    }
    goto LABEL_323;
  }

LABEL_322:
  if (!(_DWORD)v546)
  {
LABEL_65:
    if ((_DWORD)v547) {
      goto LABEL_66;
    }
    goto LABEL_324;
  }

LABEL_323:
  __n128 result = (void *)swift_bridgeObjectRelease(v399);
  if ((_DWORD)v547)
  {
LABEL_66:
    __n128 result = (void *)swift_bridgeObjectRelease(v398);
    if (!(_DWORD)v548) {
      goto LABEL_67;
    }
    goto LABEL_325;
  }

LABEL_324:
  if (!(_DWORD)v548)
  {
LABEL_67:
    if ((_DWORD)v549) {
      goto LABEL_68;
    }
    goto LABEL_326;
  }

LABEL_325:
  __n128 result = (void *)swift_bridgeObjectRelease(v397);
  if ((_DWORD)v549)
  {
LABEL_68:
    __n128 result = (void *)sub_1000045C8(v396, v395);
    if (!(_DWORD)v550) {
      goto LABEL_69;
    }
    goto LABEL_327;
  }

LABEL_326:
  if (!(_DWORD)v550)
  {
LABEL_69:
    if ((_DWORD)v551) {
      goto LABEL_70;
    }
    goto LABEL_328;
  }

LABEL_327:
  __n128 result = (void *)swift_bridgeObjectRelease(v394);
  if ((_DWORD)v551)
  {
LABEL_70:
    __n128 result = (void *)sub_1000045C8(v393, v392);
    if (!(_DWORD)v552) {
      goto LABEL_71;
    }
    goto LABEL_329;
  }

LABEL_328:
  if (!(_DWORD)v552)
  {
LABEL_71:
    if ((_DWORD)v553) {
      goto LABEL_72;
    }
    goto LABEL_330;
  }

LABEL_329:
  __n128 result = (void *)sub_1000045C8(v391, v390);
  if ((_DWORD)v553)
  {
LABEL_72:
    __n128 result = (void *)sub_1000045C8(v389, v388);
    if (!(_DWORD)v554) {
      goto LABEL_73;
    }
    goto LABEL_331;
  }

LABEL_330:
  if (!(_DWORD)v554)
  {
LABEL_73:
    if ((_DWORD)v555) {
      goto LABEL_74;
    }
    goto LABEL_332;
  }

LABEL_331:
  __n128 result = (void *)sub_1000045C8(v387, v386);
  if ((_DWORD)v555)
  {
LABEL_74:
    __n128 result = (void *)sub_1000045C8(v385, v384);
    if (!(_DWORD)v556) {
      goto LABEL_75;
    }
    goto LABEL_333;
  }

LABEL_332:
  if (!(_DWORD)v556)
  {
LABEL_75:
    if ((_DWORD)v557) {
      goto LABEL_76;
    }
    goto LABEL_334;
  }

LABEL_333:
  __n128 result = (void *)sub_1000045C8(v383, v382);
  if ((_DWORD)v557)
  {
LABEL_76:
    __n128 result = (void *)sub_1000045C8(v381, v380);
    if (!(_DWORD)v558) {
      goto LABEL_77;
    }
    goto LABEL_335;
  }

LABEL_334:
  if (!(_DWORD)v558)
  {
LABEL_77:
    if ((_DWORD)v559) {
      goto LABEL_78;
    }
    goto LABEL_336;
  }

LABEL_335:
  __n128 result = (void *)swift_bridgeObjectRelease(v379);
  if ((_DWORD)v559)
  {
LABEL_78:
    __n128 result = (void *)swift_bridgeObjectRelease(v378);
    if (!(_DWORD)v560) {
      goto LABEL_79;
    }
    goto LABEL_337;
  }

LABEL_336:
  if (!(_DWORD)v560)
  {
LABEL_79:
    if ((_DWORD)v561) {
      goto LABEL_80;
    }
    goto LABEL_338;
  }

LABEL_337:
  __n128 result = (void *)swift_bridgeObjectRelease(v377);
  if ((_DWORD)v561)
  {
LABEL_80:
    __n128 result = (void *)sub_1000045C8(v376, v375);
    if (!(_DWORD)v563) {
      goto LABEL_81;
    }
LABEL_339:
    __n128 result = (void *)swift_bridgeObjectRelease(v374);
    if (!(_DWORD)v562) {
      return result;
    }
    return (void *)swift_bridgeObjectRelease(v373);
  }

LABEL_338:
  if ((_DWORD)v563) {
    goto LABEL_339;
  }
LABEL_81:
  if ((_DWORD)v562) {
    return (void *)swift_bridgeObjectRelease(v373);
  }
  return result;
}

unint64_t sub_10004E9F0()
{
  unint64_t result = qword_100084B40;
  if (!qword_100084B40)
  {
    unint64_t result = swift_getWitnessTable(&unk_10007188C, &type metadata for IDSMadridProtocolHttpHeaders.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084B40);
  }

  return result;
}

uint64_t sub_10004EA34(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_10007DF90, a1, a2, &unk_100084010);
  swift_bridgeObjectRelease(a2);
  uint64_t v4 = 0LL;
  uint64_t result = 48LL;
  switch(v3)
  {
    case 0LL:
      goto LABEL_52;
    case 1LL:
      uint64_t v4 = 1LL;
      goto LABEL_52;
    case 2LL:
      uint64_t v4 = 2LL;
      goto LABEL_52;
    case 3LL:
      uint64_t v4 = 3LL;
      goto LABEL_52;
    case 4LL:
      uint64_t v4 = 4LL;
      goto LABEL_52;
    case 5LL:
      uint64_t v4 = 5LL;
      goto LABEL_52;
    case 6LL:
      uint64_t v4 = 6LL;
      goto LABEL_52;
    case 7LL:
      uint64_t v4 = 7LL;
      goto LABEL_52;
    case 8LL:
      uint64_t v4 = 8LL;
      goto LABEL_52;
    case 9LL:
      uint64_t v4 = 9LL;
      goto LABEL_52;
    case 10LL:
      uint64_t v4 = 10LL;
      goto LABEL_52;
    case 11LL:
      uint64_t v4 = 11LL;
      goto LABEL_52;
    case 12LL:
      uint64_t v4 = 12LL;
      goto LABEL_52;
    case 13LL:
      uint64_t v4 = 13LL;
      goto LABEL_52;
    case 14LL:
      uint64_t v4 = 14LL;
      goto LABEL_52;
    case 15LL:
      uint64_t v4 = 15LL;
      goto LABEL_52;
    case 16LL:
      uint64_t v4 = 16LL;
      goto LABEL_52;
    case 17LL:
      uint64_t v4 = 17LL;
      goto LABEL_52;
    case 18LL:
      uint64_t v4 = 18LL;
      goto LABEL_52;
    case 19LL:
      uint64_t v4 = 19LL;
      goto LABEL_52;
    case 20LL:
      uint64_t v4 = 20LL;
      goto LABEL_52;
    case 21LL:
      uint64_t v4 = 21LL;
      goto LABEL_52;
    case 22LL:
      uint64_t v4 = 22LL;
      goto LABEL_52;
    case 23LL:
      uint64_t v4 = 23LL;
      goto LABEL_52;
    case 24LL:
      uint64_t v4 = 24LL;
      goto LABEL_52;
    case 25LL:
      uint64_t v4 = 25LL;
      goto LABEL_52;
    case 26LL:
      uint64_t v4 = 26LL;
      goto LABEL_52;
    case 27LL:
      uint64_t v4 = 27LL;
      goto LABEL_52;
    case 28LL:
      uint64_t v4 = 28LL;
      goto LABEL_52;
    case 29LL:
      uint64_t v4 = 29LL;
      goto LABEL_52;
    case 30LL:
      uint64_t v4 = 30LL;
      goto LABEL_52;
    case 31LL:
      uint64_t v4 = 31LL;
      goto LABEL_52;
    case 32LL:
      uint64_t v4 = 32LL;
      goto LABEL_52;
    case 33LL:
      uint64_t v4 = 33LL;
      goto LABEL_52;
    case 34LL:
      uint64_t v4 = 34LL;
      goto LABEL_52;
    case 35LL:
      uint64_t v4 = 35LL;
      goto LABEL_52;
    case 36LL:
      uint64_t v4 = 36LL;
      goto LABEL_52;
    case 37LL:
      uint64_t v4 = 37LL;
      goto LABEL_52;
    case 38LL:
      uint64_t v4 = 38LL;
      goto LABEL_52;
    case 39LL:
      uint64_t v4 = 39LL;
      goto LABEL_52;
    case 40LL:
      uint64_t v4 = 40LL;
      goto LABEL_52;
    case 41LL:
      uint64_t v4 = 41LL;
      goto LABEL_52;
    case 42LL:
      uint64_t v4 = 42LL;
      goto LABEL_52;
    case 43LL:
      uint64_t v4 = 43LL;
      goto LABEL_52;
    case 44LL:
      uint64_t v4 = 44LL;
      goto LABEL_52;
    case 45LL:
      uint64_t v4 = 45LL;
      goto LABEL_52;
    case 46LL:
      uint64_t v4 = 46LL;
      goto LABEL_52;
    case 47LL:
      uint64_t v4 = 47LL;
LABEL_52:
      uint64_t result = v4;
      break;
    case 48LL:
      return result;
    case 49LL:
      uint64_t result = 49LL;
      break;
    case 50LL:
      uint64_t result = 50LL;
      break;
    case 51LL:
      uint64_t result = 51LL;
      break;
    case 52LL:
      uint64_t result = 52LL;
      break;
    case 53LL:
      uint64_t result = 53LL;
      break;
    case 54LL:
      uint64_t result = 54LL;
      break;
    case 55LL:
      uint64_t result = 55LL;
      break;
    case 56LL:
      uint64_t result = 56LL;
      break;
    case 57LL:
      uint64_t result = 57LL;
      break;
    case 58LL:
      uint64_t result = 58LL;
      break;
    case 59LL:
      uint64_t result = 59LL;
      break;
    case 60LL:
      uint64_t result = 60LL;
      break;
    case 61LL:
      uint64_t result = 61LL;
      break;
    case 62LL:
      uint64_t result = 62LL;
      break;
    case 63LL:
      uint64_t result = 63LL;
      break;
    case 64LL:
      uint64_t result = 64LL;
      break;
    case 65LL:
      uint64_t result = 65LL;
      break;
    case 66LL:
      uint64_t result = 66LL;
      break;
    case 67LL:
      uint64_t result = 67LL;
      break;
    case 68LL:
      uint64_t result = 68LL;
      break;
    case 69LL:
      uint64_t result = 69LL;
      break;
    case 70LL:
      uint64_t result = 70LL;
      break;
    case 71LL:
      uint64_t result = 71LL;
      break;
    case 72LL:
      uint64_t result = 72LL;
      break;
    case 73LL:
      uint64_t result = 73LL;
      break;
    case 74LL:
      uint64_t result = 74LL;
      break;
    case 75LL:
      uint64_t result = 75LL;
      break;
    case 76LL:
      uint64_t result = 76LL;
      break;
    case 77LL:
      uint64_t result = 77LL;
      break;
    case 78LL:
      uint64_t result = 78LL;
      break;
    case 79LL:
      uint64_t result = 79LL;
      break;
    case 80LL:
      uint64_t result = 80LL;
      break;
    case 81LL:
      uint64_t result = 81LL;
      break;
    case 82LL:
      uint64_t result = 82LL;
      break;
    case 83LL:
      uint64_t result = 83LL;
      break;
    case 84LL:
      uint64_t result = 84LL;
      break;
    case 85LL:
      uint64_t result = 85LL;
      break;
    case 86LL:
      uint64_t result = 86LL;
      break;
    case 87LL:
      uint64_t result = 87LL;
      break;
    case 88LL:
      uint64_t result = 88LL;
      break;
    case 89LL:
      uint64_t result = 89LL;
      break;
    case 90LL:
      uint64_t result = 90LL;
      break;
    case 91LL:
      uint64_t result = 91LL;
      break;
    case 92LL:
      uint64_t result = 92LL;
      break;
    case 93LL:
      uint64_t result = 93LL;
      break;
    case 94LL:
      uint64_t result = 94LL;
      break;
    case 95LL:
      uint64_t result = 95LL;
      break;
    case 96LL:
      uint64_t result = 96LL;
      break;
    case 97LL:
      uint64_t result = 97LL;
      break;
    case 98LL:
      uint64_t result = 98LL;
      break;
    case 99LL:
      uint64_t result = 99LL;
      break;
    case 100LL:
      uint64_t result = 100LL;
      break;
    case 101LL:
      uint64_t result = 101LL;
      break;
    case 102LL:
      uint64_t result = 102LL;
      break;
    case 103LL:
      uint64_t result = 103LL;
      break;
    case 104LL:
      uint64_t result = 104LL;
      break;
    case 105LL:
      uint64_t result = 105LL;
      break;
    case 106LL:
      uint64_t result = 106LL;
      break;
    case 107LL:
      uint64_t result = 107LL;
      break;
    case 108LL:
      uint64_t result = 108LL;
      break;
    case 109LL:
      uint64_t result = 109LL;
      break;
    case 110LL:
      uint64_t result = 110LL;
      break;
    case 111LL:
      uint64_t result = 111LL;
      break;
    case 112LL:
      uint64_t result = 112LL;
      break;
    case 113LL:
      uint64_t result = 113LL;
      break;
    case 114LL:
      uint64_t result = 114LL;
      break;
    case 115LL:
      uint64_t result = 115LL;
      break;
    case 116LL:
      uint64_t result = 116LL;
      break;
    case 117LL:
      uint64_t result = 117LL;
      break;
    case 118LL:
      uint64_t result = 118LL;
      break;
    case 119LL:
      uint64_t result = 119LL;
      break;
    case 120LL:
      uint64_t result = 120LL;
      break;
    case 121LL:
      uint64_t result = 121LL;
      break;
    case 122LL:
      uint64_t result = 122LL;
      break;
    case 123LL:
      uint64_t result = 123LL;
      break;
    case 124LL:
      uint64_t result = 124LL;
      break;
    case 125LL:
      uint64_t result = 125LL;
      break;
    case 126LL:
      uint64_t result = 126LL;
      break;
    case 127LL:
      uint64_t result = 127LL;
      break;
    default:
      else {
        uint64_t result = v3 | 0xFFFFFF80;
      }
      break;
  }

  return result;
}

unint64_t sub_10004EEA8(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10007EE50, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 6) {
    return 6LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_10004EEF0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_10000264C(&qword_100084C68);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  __int128 v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100002C78(a1, v9);
  unint64_t v11 = sub_10004E9F0();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for IDSMadridProtocolHttpHeaders.CodingKeys,  &type metadata for IDSMadridProtocolHttpHeaders.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return sub_100002FD4(a1);
  }
  char v44 = 0;
  uint64_t v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v44, v5);
  uint64_t v14 = v13;
  char v43 = 1;
  swift_bridgeObjectRetain(v13);
  uint64_t v36 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v43, v5);
  char v42 = 2;
  uint64_t v38 = v15;
  swift_bridgeObjectRetain(v15);
  uint64_t v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v42, v5);
  uint64_t v37 = v17;
  uint64_t v33 = v16;
  char v41 = 3;
  swift_bridgeObjectRetain(v17);
  uint64_t v34 = 0LL;
  uint64_t v32 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v41, v5);
  char v40 = 4;
  uint64_t v35 = v18;
  swift_bridgeObjectRetain(v18);
  uint64_t v30 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v40, v5);
  uint64_t v31 = v19;
  char v39 = 5;
  swift_bridgeObjectRetain(v19);
  uint64_t v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v39, v5);
  uint64_t v22 = v21;
  uint64_t v23 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v34 = v20;
  v23(v8, v5);
  swift_bridgeObjectRetain(v22);
  sub_100002FD4(a1);
  swift_bridgeObjectRelease(v22);
  uint64_t v24 = v31;
  swift_bridgeObjectRelease(v31);
  uint64_t v25 = v35;
  swift_bridgeObjectRelease(v35);
  uint64_t v26 = v37;
  swift_bridgeObjectRelease(v37);
  uint64_t v27 = v38;
  swift_bridgeObjectRelease(v38);
  uint64_t result = swift_bridgeObjectRelease(v14);
  *a2 = v12;
  a2[1] = v14;
  a2[2] = v36;
  a2[3] = v27;
  a2[4] = v33;
  a2[5] = v26;
  a2[6] = v32;
  a2[7] = v25;
  a2[8] = v30;
  a2[9] = v24;
  a2[10] = v34;
  a2[11] = v22;
  return result;
}

unint64_t sub_10004F300()
{
  unint64_t result = qword_100084B50;
  if (!qword_100084B50)
  {
    unint64_t result = swift_getWitnessTable(&unk_10007183C, &type metadata for IDSMadridProtocolDeliveryContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084B50);
  }

  return result;
}

unint64_t sub_10004F344()
{
  unint64_t result = qword_100084B68;
  if (!qword_100084B68)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000717EC, &type metadata for IDSQuickRelayPluginRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084B68);
  }

  return result;
}

uint64_t sub_10004F388@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000264C(&qword_100084C60);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  __int128 v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100002C78(a1, v9);
  unint64_t v11 = sub_10004F344();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for IDSQuickRelayPluginRequest.CodingKeys,  &type metadata for IDSQuickRelayPluginRequest.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return sub_100002FD4(a1);
  }
  char v30 = 0;
  uint64_t v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v30, v5);
  uint64_t v14 = v13;
  uint64_t v25 = v12;
  char v29 = 1;
  swift_bridgeObjectRetain(v13);
  uint64_t v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v29, v5);
  uint64_t v17 = v16;
  uint64_t v23 = v15;
  char v28 = 2;
  swift_bridgeObjectRetain(v16);
  uint64_t v24 = v17;
  uint64_t v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v28, v5);
  int v26 = v19;
  uint64_t v22 = v18;
  char v27 = 3;
  LOBYTE(v17) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v27, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_100002FD4(a1);
  uint64_t v20 = v24;
  swift_bridgeObjectRelease(v24);
  uint64_t result = swift_bridgeObjectRelease(v14);
  *(void *)a2 = v25;
  *(void *)(a2 + 8) = v14;
  *(void *)(a2 + 16) = v23;
  *(void *)(a2 + 24) = v20;
  *(void *)(a2 + 32) = v22;
  *(_BYTE *)(a2 + 40) = v26 & 1;
  *(_BYTE *)(a2 + 41) = v17;
  return result;
}

unint64_t sub_10004F5EC()
{
  unint64_t result = qword_100084B78;
  if (!qword_100084B78)
  {
    unint64_t result = swift_getWitnessTable(&unk_10007179C, &type metadata for IDSQuickRelayAllocationStatus.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084B78);
  }

  return result;
}

unint64_t sub_10004F630(Swift::String string, Swift::OpaquePointer cases)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease(object);
  if (v5 >= 4) {
    return 4LL;
  }
  else {
    return v5;
  }
}

uint64_t sub_10004F674@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000264C(&qword_100084C58);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  __int128 v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100002C78(a1, v9);
  unint64_t v11 = sub_10004F5EC();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for IDSQuickRelayAllocationStatus.CodingKeys,  &type metadata for IDSQuickRelayAllocationStatus.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return sub_100002FD4(a1);
  }
  LOBYTE(v31) = 0;
  uint64_t v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v31, v5);
  char v14 = v13;
  LOBYTE(v31) = 1;
  uint64_t v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v31, v5);
  int v33 = v16;
  uint64_t v30 = v15;
  char v34 = 2;
  unint64_t v17 = sub_100004570();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v31,  &type metadata for Data,  &v34,  v5,  &type metadata for Data,  v17);
  uint64_t v18 = v31;
  LOBYTE(v31) = 3;
  unint64_t v28 = v32;
  uint64_t v29 = v18;
  sub_1000045B4(v18, v32);
  uint64_t v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v31, v5);
  uint64_t v21 = v20;
  uint64_t v22 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v23 = v19;
  v22(v8, v5);
  unint64_t v25 = v28;
  uint64_t v24 = v29;
  sub_1000045B4(v29, v28);
  swift_bridgeObjectRetain(v21);
  sub_1000045C8(v24, v25);
  sub_100002FD4(a1);
  sub_1000045C8(v24, v25);
  uint64_t result = swift_bridgeObjectRelease(v21);
  *(void *)a2 = v12;
  *(_BYTE *)(a2 + 8) = v14 & 1;
  *(void *)(a2 + 16) = v30;
  *(_BYTE *)(a2 + 24) = v33 & 1;
  *(void *)(a2 + 32) = v24;
  *(void *)(a2 + 40) = v25;
  *(void *)(a2 + 48) = v23;
  *(void *)(a2 + 56) = v21;
  return result;
}

unint64_t sub_10004F8D8()
{
  unint64_t result = qword_100084B88;
  if (!qword_100084B88)
  {
    unint64_t result = swift_getWitnessTable(&unk_10007174C, &type metadata for IDSQuickRelaySelfAllocToken.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084B88);
  }

  return result;
}

unint64_t sub_10004F91C(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10007F070, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 7) {
    return 7LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_10004F964@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_10000264C(&qword_100084C50);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  __int128 v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100002C78(a1, v9);
  unint64_t v11 = sub_10004F8D8();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for IDSQuickRelaySelfAllocToken.CodingKeys,  &type metadata for IDSQuickRelaySelfAllocToken.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return sub_100002FD4(a1);
  }
  uint64_t v59 = a2;
  char v63 = 0;
  unint64_t v12 = sub_100004570();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v60,  &type metadata for Data,  &v63,  v5,  &type metadata for Data,  v12);
  uint64_t v13 = v60;
  unint64_t v14 = v61;
  char v63 = 1;
  sub_1000045B4(v60, v61);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v60,  &type metadata for Data,  &v63,  v5,  &type metadata for Data,  v12);
  uint64_t v57 = v13;
  unint64_t v58 = v14;
  uint64_t v15 = v60;
  LOBYTE(v60) = 2;
  uint64_t v16 = v15;
  unint64_t v17 = v61;
  sub_1000045B4(v15, v61);
  unint64_t v56 = 0LL;
  uint64_t v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v60, v5);
  int v62 = v19;
  uint64_t v52 = v18;
  uint64_t v55 = v16;
  unint64_t v56 = v17;
  char v63 = 3;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v60,  &type metadata for Data,  &v63,  v5,  &type metadata for Data,  v12);
  uint64_t v20 = v60;
  unint64_t v21 = v61;
  char v63 = 4;
  sub_1000045B4(v60, v61);
  uint64_t v48 = 0LL;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v60,  &type metadata for Data,  &v63,  v5,  &type metadata for Data,  v12);
  unint64_t v50 = v21;
  uint64_t v51 = v20;
  uint64_t v22 = v60;
  char v63 = 5;
  unint64_t v49 = v61;
  sub_1000045B4(v60, v61);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v60,  &type metadata for Data,  &v63,  v5,  &type metadata for Data,  v12);
  uint64_t v47 = v22;
  uint64_t v23 = v60;
  unint64_t v24 = v61;
  LOBYTE(v60) = 6;
  sub_1000045B4(v23, v61);
  uint64_t v46 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v60, v5);
  int v45 = v25;
  uint64_t v26 = v51;
  unint64_t v53 = v24;
  uint64_t v54 = v23;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_1000045B4(v57, v58);
  uint64_t v27 = v55;
  uint64_t v28 = v26;
  uint64_t v29 = v23;
  unint64_t v30 = v49;
  unint64_t v31 = v56;
  sub_1000045B4(v55, v56);
  uint64_t v32 = v28;
  unint64_t v33 = v50;
  sub_1000045B4(v32, v50);
  sub_1000045B4(v22, v30);
  sub_1000045B4(v29, v24);
  sub_1000045C8(v29, v24);
  sub_1000045C8(v22, v30);
  uint64_t v34 = v51;
  sub_1000045C8(v51, v33);
  sub_1000045C8(v27, v31);
  uint64_t v36 = v57;
  unint64_t v35 = v58;
  sub_1000045C8(v57, v58);
  sub_100002FD4(a1);
  sub_1000045C8(v36, v35);
  unint64_t v37 = v31;
  sub_1000045C8(v27, v31);
  sub_1000045C8(v34, v33);
  uint64_t v38 = v47;
  sub_1000045C8(v47, v30);
  unint64_t v39 = v53;
  uint64_t v40 = v54;
  uint64_t result = sub_1000045C8(v54, v53);
  unint64_t v42 = v58;
  char v43 = v59;
  *uint64_t v59 = v36;
  v43[1] = v42;
  v43[2] = v27;
  v43[3] = v37;
  v43[4] = v52;
  *((_BYTE *)v43 + 40) = v62 & 1;
  v43[6] = v51;
  v43[7] = v33;
  v43[8] = v38;
  v43[9] = v30;
  v43[10] = v40;
  v43[11] = v39;
  v43[12] = v46;
  *((_BYTE *)v43 + 104) = v45 & 1;
  return result;
}

unint64_t sub_10004FF8C()
{
  unint64_t result = qword_100084B98;
  if (!qword_100084B98)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000716FC, &type metadata for IDSQuickRelayPluginAllocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084B98);
  }

  return result;
}

unint64_t sub_10004FFD0(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10007F138, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5) {
    return 5LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_100050018@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000264C(&qword_100084C48);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  __int128 v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100002C78(a1, v9);
  unint64_t v11 = sub_10004FF8C();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for IDSQuickRelayPluginAllocation.CodingKeys,  &type metadata for IDSQuickRelayPluginAllocation.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return sub_100002FD4(a1);
  }
  LOBYTE(v30) = 0;
  uint64_t v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v30, v5);
  uint64_t v14 = v13;
  LOBYTE(v30) = 1;
  swift_bridgeObjectRetain(v13);
  uint64_t v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v30, v5);
  int v32 = v16;
  uint64_t v29 = v15;
  LOBYTE(v30) = 2;
  uint64_t v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v30, v5);
  int v26 = v18;
  uint64_t v27 = v17;
  char v33 = 3;
  unint64_t v28 = sub_100004570();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v30,  &type metadata for Data,  &v33,  v5,  &type metadata for Data,  v28);
  char v33 = 4;
  unint64_t v24 = v31;
  uint64_t v25 = v30;
  sub_1000045B4(v30, v31);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v30,  &type metadata for Data,  &v33,  v5,  &type metadata for Data,  v28);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v19 = v30;
  unint64_t v20 = v31;
  swift_bridgeObjectRetain(v14);
  unint64_t v22 = v24;
  uint64_t v21 = v25;
  sub_1000045B4(v25, v24);
  sub_1000045B4(v19, v20);
  sub_1000045C8(v21, v22);
  swift_bridgeObjectRelease(v14);
  sub_100002FD4(a1);
  swift_bridgeObjectRelease(v14);
  sub_1000045C8(v21, v22);
  uint64_t result = sub_1000045C8(v19, v20);
  *(void *)a2 = v12;
  *(void *)(a2 + 8) = v14;
  *(void *)(a2 + 16) = v29;
  *(_BYTE *)(a2 + 24) = v32 & 1;
  *(void *)(a2 + 32) = v27;
  *(_BYTE *)(a2 + 40) = v26 & 1;
  *(void *)(a2 + 48) = v21;
  *(void *)(a2 + 56) = v22;
  *(void *)(a2 + 64) = v19;
  *(void *)(a2 + 72) = v20;
  return result;
}

uint64_t destroy for IDSMadridProtocolPayload(uint64_t *a1)
{
  unint64_t v2 = a1[6];
  if (v2 >> 60 != 15) {
    sub_100004080(a1[5], v2);
  }
  unint64_t v3 = a1[8];
  if (v3 >> 60 != 15) {
    sub_100004080(a1[7], v3);
  }
  unint64_t v4 = a1[10];
  if (v4 >> 60 != 15) {
    sub_100004080(a1[9], v4);
  }
  unint64_t v5 = a1[12];
  if (v5 >> 60 != 15) {
    sub_100004080(a1[11], v5);
  }
  unint64_t v6 = a1[14];
  if (v6 >> 60 != 15) {
    sub_100004080(a1[13], v6);
  }
  swift_bridgeObjectRelease(a1[16]);
  unint64_t v7 = a1[18];
  if (v7 >> 60 != 15) {
    sub_100004080(a1[17], v7);
  }
  swift_bridgeObjectRelease(a1[20]);
  unint64_t v8 = a1[27];
  if (v8 >> 60 != 15) {
    sub_100004080(a1[26], v8);
  }
  unint64_t v9 = a1[30];
  if (v9 >> 60 != 15) {
    sub_100004080(a1[29], v9);
  }
  unint64_t v10 = a1[32];
  if (v10 >> 60 != 15) {
    sub_100004080(a1[31], v10);
  }
  swift_bridgeObjectRelease(a1[34]);
  swift_bridgeObjectRelease(a1[36]);
  swift_bridgeObjectRelease(a1[38]);
  unint64_t v11 = a1[40];
  if (v11 >> 60 != 15) {
    sub_100004080(a1[39], v11);
  }
  swift_bridgeObjectRelease(a1[44]);
  swift_bridgeObjectRelease(a1[46]);
  swift_bridgeObjectRelease(a1[48]);
  swift_bridgeObjectRelease(a1[49]);
  swift_bridgeObjectRelease(a1[50]);
  swift_bridgeObjectRelease(a1[52]);
  swift_bridgeObjectRelease(a1[54]);
  swift_bridgeObjectRelease(a1[60]);
  unint64_t v12 = a1[62];
  if (v12 >> 60 != 15) {
    sub_100004080(a1[61], v12);
  }
  unint64_t v13 = a1[64];
  if (v13 >> 60 != 15) {
    sub_100004080(a1[63], v13);
  }
  unint64_t v14 = a1[68];
  if (v14 >> 60 != 15) {
    sub_100004080(a1[67], v14);
  }
  swift_bridgeObjectRelease(a1[70]);
  swift_bridgeObjectRelease(a1[72]);
  swift_bridgeObjectRelease(a1[74]);
  unint64_t v15 = a1[84];
  if (v15 >> 60 != 15) {
    sub_100004080(a1[83], v15);
  }
  swift_bridgeObjectRelease(a1[86]);
  swift_bridgeObjectRelease(a1[92]);
  swift_bridgeObjectRelease(a1[96]);
  swift_bridgeObjectRelease(a1[103]);
  swift_bridgeObjectRelease(a1[104]);
  swift_bridgeObjectRelease(a1[112]);
  swift_bridgeObjectRelease(a1[114]);
  unint64_t v16 = a1[116];
  if (v16 >> 60 != 15) {
    sub_100004080(a1[115], v16);
  }
  swift_bridgeObjectRelease(a1[118]);
  swift_bridgeObjectRelease(a1[120]);
  swift_bridgeObjectRelease(a1[122]);
  swift_bridgeObjectRelease(a1[124]);
  swift_bridgeObjectRelease(a1[126]);
  swift_bridgeObjectRelease(a1[130]);
  swift_bridgeObjectRelease(a1[134]);
  swift_bridgeObjectRelease(a1[138]);
  swift_bridgeObjectRelease(a1[144]);
  uint64_t v17 = a1[146];
  if (v17 != 1)
  {
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(a1[148]);
    swift_bridgeObjectRelease(a1[150]);
    swift_bridgeObjectRelease(a1[152]);
    swift_bridgeObjectRelease(a1[154]);
    swift_bridgeObjectRelease(a1[156]);
  }

  unint64_t v18 = a1[158];
  if (v18 >> 60 != 15) {
    sub_100004080(a1[157], v18);
  }
  swift_bridgeObjectRelease(a1[160]);
  unint64_t v19 = a1[162];
  if (v19 >> 60 != 15) {
    sub_100004080(a1[161], v19);
  }
  swift_bridgeObjectRelease(a1[166]);
  swift_bridgeObjectRelease(a1[171]);
  unint64_t v20 = a1[173];
  if (v20 >> 60 != 15) {
    sub_100004080(a1[172], v20);
  }
  unint64_t v21 = a1[175];
  if (v21 >> 60 != 15) {
    sub_100004080(a1[174], v21);
  }
  swift_bridgeObjectRelease(a1[187]);
  unint64_t v22 = a1[193];
  if (v22 >> 60 != 15) {
    sub_100004080(a1[192], v22);
  }
  unint64_t v23 = a1[195];
  if (v23 >> 60 != 15) {
    sub_100004080(a1[194], v23);
  }
  unint64_t v24 = a1[199];
  if (v24 >> 60 != 15) {
    sub_100004080(a1[198], v24);
  }
  unint64_t v25 = a1[201];
  if (v25 >> 60 != 15) {
    sub_100004080(a1[200], v25);
  }
  swift_bridgeObjectRelease(a1[206]);
  swift_bridgeObjectRelease(a1[208]);
  swift_bridgeObjectRelease(a1[210]);
  unint64_t v26 = a1[216];
  if (v26 >> 60 != 15) {
    sub_100004080(a1[215], v26);
  }
  swift_bridgeObjectRelease(a1[220]);
  unint64_t v27 = a1[226];
  if (v27 >> 60 != 15) {
    sub_100004080(a1[225], v27);
  }
  unint64_t v28 = a1[228];
  if (v28 >> 60 != 15) {
    sub_100004080(a1[227], v28);
  }
  unint64_t v29 = a1[232];
  if (v29 >> 60 != 15) {
    sub_100004080(a1[231], v29);
  }
  unint64_t v30 = a1[234];
  if (v30 >> 60 != 15) {
    sub_100004080(a1[233], v30);
  }
  unint64_t v31 = a1[236];
  if (v31 >> 60 != 15) {
    sub_100004080(a1[235], v31);
  }
  unint64_t v32 = a1[240];
  if (v32 >> 60 != 15) {
    sub_100004080(a1[239], v32);
  }
  unint64_t v33 = a1[244];
  if (v33 >> 60 != 15) {
    sub_100004080(a1[243], v33);
  }
  swift_bridgeObjectRelease(a1[246]);
  swift_bridgeObjectRelease(a1[255]);
  swift_bridgeObjectRelease(a1[256]);
  unint64_t v34 = a1[258];
  if (v34 >> 60 != 15) {
    sub_100004080(a1[257], v34);
  }
  swift_bridgeObjectRelease(a1[261]);
  return swift_bridgeObjectRelease(a1[267]);
}

uint64_t initializeWithCopy for IDSMadridProtocolPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  unint64_t v5 = (uint64_t *)(a2 + 40);
  unint64_t v6 = *(void *)(a2 + 48);
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 40) = *(_OWORD *)v5;
  }

  else
  {
    uint64_t v7 = *v5;
    sub_100003FF0(*v5, *(void *)(a2 + 48));
    *(void *)(a1 + 40) = v7;
    *(void *)(a1 + 48) = v6;
  }

  unint64_t v8 = (uint64_t *)(a2 + 56);
  unint64_t v9 = *(void *)(a2 + 64);
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 56) = *(_OWORD *)v8;
  }

  else
  {
    uint64_t v10 = *v8;
    sub_100003FF0(*v8, *(void *)(a2 + 64));
    *(void *)(a1 + 56) = v10;
    *(void *)(a1 + 64) = v9;
  }

  unint64_t v11 = (uint64_t *)(a2 + 72);
  unint64_t v12 = *(void *)(a2 + 80);
  if (v12 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 72) = *(_OWORD *)v11;
  }

  else
  {
    uint64_t v13 = *v11;
    sub_100003FF0(*v11, *(void *)(a2 + 80));
    *(void *)(a1 + 72) = v13;
    *(void *)(a1 + 80) = v12;
  }

  unint64_t v14 = (uint64_t *)(a2 + 88);
  unint64_t v15 = *(void *)(a2 + 96);
  if (v15 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 88) = *(_OWORD *)v14;
  }

  else
  {
    uint64_t v16 = *v14;
    sub_100003FF0(*v14, *(void *)(a2 + 96));
    *(void *)(a1 + 88) = v16;
    *(void *)(a1 + 96) = v15;
  }

  uint64_t v17 = (uint64_t *)(a2 + 104);
  unint64_t v18 = *(void *)(a2 + 112);
  if (v18 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 104) = *(_OWORD *)v17;
  }

  else
  {
    uint64_t v19 = *v17;
    sub_100003FF0(*v17, *(void *)(a2 + 112));
    *(void *)(a1 + 104) = v19;
    *(void *)(a1 + 112) = v18;
  }

  uint64_t v20 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v20;
  unint64_t v21 = (_OWORD *)(a2 + 136);
  unint64_t v22 = *(void *)(a2 + 144);
  swift_bridgeObjectRetain(v20);
  if (v22 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 136) = *v21;
  }

  else
  {
    uint64_t v23 = *(void *)v21;
    sub_100003FF0(v23, v22);
    *(void *)(a1 + 136) = v23;
    *(void *)(a1 + 144) = v22;
  }

  uint64_t v24 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v24;
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(_WORD *)(a1 + 184) = *(_WORD *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  unint64_t v25 = (_OWORD *)(a2 + 208);
  unint64_t v26 = *(void *)(a2 + 216);
  swift_bridgeObjectRetain(v24);
  if (v26 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 208) = *v25;
  }

  else
  {
    uint64_t v27 = *(void *)v25;
    sub_100003FF0(v27, v26);
    *(void *)(a1 + 208) = v27;
    *(void *)(a1 + 216) = v26;
  }

  *(_WORD *)(a1 + 224) = *(_WORD *)(a2 + 224);
  unint64_t v28 = (uint64_t *)(a2 + 232);
  unint64_t v29 = *(void *)(a2 + 240);
  if (v29 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 232) = *(_OWORD *)v28;
  }

  else
  {
    uint64_t v30 = *v28;
    sub_100003FF0(*v28, *(void *)(a2 + 240));
    *(void *)(a1 + 232) = v30;
    *(void *)(a1 + 240) = v29;
  }

  unint64_t v31 = (uint64_t *)(a2 + 248);
  unint64_t v32 = *(void *)(a2 + 256);
  if (v32 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 248) = *(_OWORD *)v31;
  }

  else
  {
    uint64_t v33 = *v31;
    sub_100003FF0(*v31, *(void *)(a2 + 256));
    *(void *)(a1 + 248) = v33;
    *(void *)(a1 + 256) = v32;
  }

  uint64_t v34 = *(void *)(a2 + 272);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = v34;
  uint64_t v35 = *(void *)(a2 + 288);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(void *)(a1 + 288) = v35;
  uint64_t v36 = *(void *)(a2 + 304);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  *(void *)(a1 + 304) = v36;
  unint64_t v37 = (uint64_t *)(a2 + 312);
  unint64_t v38 = *(void *)(a2 + 320);
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRetain(v36);
  if (v38 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 312) = *(_OWORD *)v37;
  }

  else
  {
    uint64_t v39 = *v37;
    sub_100003FF0(*v37, v38);
    *(void *)(a1 + 312) = v39;
    *(void *)(a1 + 320) = v38;
  }

  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  *(_BYTE *)(a1 + 336) = *(_BYTE *)(a2 + 336);
  uint64_t v40 = *(void *)(a2 + 352);
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  *(void *)(a1 + 352) = v40;
  uint64_t v41 = *(void *)(a2 + 368);
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  *(void *)(a1 + 368) = v41;
  uint64_t v42 = *(void *)(a2 + 384);
  *(void *)(a1 + 376) = *(void *)(a2 + 376);
  *(void *)(a1 + 384) = v42;
  uint64_t v43 = *(void *)(a2 + 392);
  uint64_t v44 = *(void *)(a2 + 400);
  *(void *)(a1 + 392) = v43;
  *(void *)(a1 + 400) = v44;
  uint64_t v45 = *(void *)(a2 + 416);
  *(void *)(a1 + 408) = *(void *)(a2 + 408);
  *(void *)(a1 + 416) = v45;
  uint64_t v46 = *(void *)(a2 + 432);
  *(void *)(a1 + 424) = *(void *)(a2 + 424);
  *(void *)(a1 + 432) = v46;
  *(_BYTE *)(a1 + 448) = *(_BYTE *)(a2 + 448);
  *(void *)(a1 + 440) = *(void *)(a2 + 440);
  *(void *)(a1 + 456) = *(void *)(a2 + 456);
  *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
  uint64_t v47 = *(void *)(a2 + 480);
  *(void *)(a1 + 472) = *(void *)(a2 + 472);
  *(void *)(a1 + 480) = v47;
  uint64_t v158 = (uint64_t *)(a2 + 488);
  unint64_t v48 = *(void *)(a2 + 496);
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRetain(v44);
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRetain(v47);
  if (v48 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 488) = *(_OWORD *)v158;
  }

  else
  {
    uint64_t v49 = *v158;
    sub_100003FF0(*v158, v48);
    *(void *)(a1 + 488) = v49;
    *(void *)(a1 + 496) = v48;
  }

  unint64_t v50 = (uint64_t *)(a2 + 504);
  unint64_t v51 = *(void *)(a2 + 512);
  if (v51 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 504) = *(_OWORD *)v50;
  }

  else
  {
    uint64_t v52 = *v50;
    sub_100003FF0(*v50, *(void *)(a2 + 512));
    *(void *)(a1 + 504) = v52;
    *(void *)(a1 + 512) = v51;
  }

  *(void *)(a1 + 520) = *(void *)(a2 + 520);
  *(_BYTE *)(a1 + 528) = *(_BYTE *)(a2 + 528);
  unint64_t v53 = (uint64_t *)(a2 + 536);
  unint64_t v54 = *(void *)(a2 + 544);
  if (v54 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 536) = *(_OWORD *)v53;
  }

  else
  {
    uint64_t v55 = *v53;
    sub_100003FF0(*v53, *(void *)(a2 + 544));
    *(void *)(a1 + 536) = v55;
    *(void *)(a1 + 544) = v54;
  }

  *(void *)(a1 + 552) = *(void *)(a2 + 552);
  uint64_t v56 = *(void *)(a2 + 560);
  *(void *)(a1 + 560) = v56;
  *(void *)(a1 + 568) = *(void *)(a2 + 568);
  uint64_t v57 = *(void *)(a2 + 576);
  *(void *)(a1 + 576) = v57;
  *(void *)(a1 + 584) = *(void *)(a2 + 584);
  uint64_t v58 = *(void *)(a2 + 592);
  *(void *)(a1 + 592) = v58;
  *(void *)(a1 + 600) = *(void *)(a2 + 600);
  *(_BYTE *)(a1 + 608) = *(_BYTE *)(a2 + 608);
  uint64_t v59 = *(void *)(a2 + 616);
  *(_BYTE *)(a1 + 624) = *(_BYTE *)(a2 + 624);
  *(void *)(a1 + 616) = v59;
  *(_BYTE *)(a1 + 640) = *(_BYTE *)(a2 + 640);
  *(void *)(a1 + 632) = *(void *)(a2 + 632);
  *(_BYTE *)(a1 + 656) = *(_BYTE *)(a2 + 656);
  *(void *)(a1 + 648) = *(void *)(a2 + 648);
  uint64_t v60 = (uint64_t *)(a2 + 664);
  unint64_t v61 = *(void *)(a2 + 672);
  swift_bridgeObjectRetain(v56);
  swift_bridgeObjectRetain(v57);
  swift_bridgeObjectRetain(v58);
  if (v61 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 664) = *(_OWORD *)v60;
  }

  else
  {
    uint64_t v62 = *v60;
    sub_100003FF0(*v60, v61);
    *(void *)(a1 + 664) = v62;
    *(void *)(a1 + 672) = v61;
  }

  *(void *)(a1 + 680) = *(void *)(a2 + 680);
  uint64_t v63 = *(void *)(a2 + 688);
  *(void *)(a1 + 688) = v63;
  *(void *)(a1 + 696) = *(void *)(a2 + 696);
  *(_BYTE *)(a1 + 704) = *(_BYTE *)(a2 + 704);
  *(void *)(a1 + 712) = *(void *)(a2 + 712);
  *(_BYTE *)(a1 + 720) = *(_BYTE *)(a2 + 720);
  *(void *)(a1 + 728) = *(void *)(a2 + 728);
  uint64_t v64 = *(void *)(a2 + 736);
  *(void *)(a1 + 736) = v64;
  uint64_t v65 = *(void *)(a2 + 744);
  *(_BYTE *)(a1 + 752) = *(_BYTE *)(a2 + 752);
  *(void *)(a1 + 744) = v65;
  *(void *)(a1 + 760) = *(void *)(a2 + 760);
  uint64_t v66 = *(void *)(a2 + 768);
  *(void *)(a1 + 768) = v66;
  *(void *)(a1 + 776) = *(void *)(a2 + 776);
  *(_BYTE *)(a1 + 784) = *(_BYTE *)(a2 + 784);
  *(void *)(a1 + 792) = *(void *)(a2 + 792);
  *(_BYTE *)(a1 + 800) = *(_BYTE *)(a2 + 800);
  *(_BYTE *)(a1 + 816) = *(_BYTE *)(a2 + 816);
  *(void *)(a1 + 808) = *(void *)(a2 + 808);
  uint64_t v67 = *(void *)(a2 + 824);
  *(void *)(a1 + 824) = v67;
  uint64_t v68 = *(void *)(a2 + 832);
  *(void *)(a1 + 832) = v68;
  *(_BYTE *)(a1 + 848) = *(_BYTE *)(a2 + 848);
  *(void *)(a1 + 840) = *(void *)(a2 + 840);
  *(_BYTE *)(a1 + 864) = *(_BYTE *)(a2 + 864);
  *(void *)(a1 + 856) = *(void *)(a2 + 856);
  *(_BYTE *)(a1 + 880) = *(_BYTE *)(a2 + 880);
  *(void *)(a1 + 872) = *(void *)(a2 + 872);
  *(_DWORD *)(a1 + 881) = *(_DWORD *)(a2 + 881);
  *(void *)(a1 + 888) = *(void *)(a2 + 888);
  uint64_t v69 = *(void *)(a2 + 896);
  *(void *)(a1 + 896) = v69;
  *(void *)(a1 + 904) = *(void *)(a2 + 904);
  uint64_t v70 = *(void *)(a2 + 912);
  *(void *)(a1 + 912) = v70;
  uint64_t v71 = (uint64_t *)(a2 + 920);
  unint64_t v72 = *(void *)(a2 + 928);
  swift_bridgeObjectRetain(v63);
  swift_bridgeObjectRetain(v64);
  swift_bridgeObjectRetain(v66);
  swift_bridgeObjectRetain(v67);
  swift_bridgeObjectRetain(v68);
  swift_bridgeObjectRetain(v69);
  swift_bridgeObjectRetain(v70);
  if (v72 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 920) = *(_OWORD *)v71;
  }

  else
  {
    uint64_t v73 = *v71;
    sub_100003FF0(*v71, v72);
    *(void *)(a1 + 920) = v73;
    *(void *)(a1 + 928) = v72;
  }

  *(void *)(a1 + 936) = *(void *)(a2 + 936);
  uint64_t v74 = *(void *)(a2 + 944);
  *(void *)(a1 + 944) = v74;
  *(void *)(a1 + 952) = *(void *)(a2 + 952);
  uint64_t v75 = *(void *)(a2 + 960);
  *(void *)(a1 + 960) = v75;
  *(void *)(a1 + 968) = *(void *)(a2 + 968);
  uint64_t v76 = *(void *)(a2 + 976);
  *(void *)(a1 + 976) = v76;
  *(void *)(a1 + 984) = *(void *)(a2 + 984);
  uint64_t v77 = *(void *)(a2 + 992);
  *(void *)(a1 + 992) = v77;
  *(void *)(a1 + 1000) = *(void *)(a2 + 1000);
  uint64_t v78 = *(void *)(a2 + 1008);
  *(void *)(a1 + 1008) = v78;
  *(void *)(a1 + 1016) = *(void *)(a2 + 1016);
  *(_BYTE *)(a1 + 1024) = *(_BYTE *)(a2 + 1024);
  *(void *)(a1 + 1032) = *(void *)(a2 + 1032);
  uint64_t v79 = *(void *)(a2 + 1040);
  *(void *)(a1 + 1040) = v79;
  *(void *)(a1 + 1048) = *(void *)(a2 + 1048);
  *(_BYTE *)(a1 + 1056) = *(_BYTE *)(a2 + 1056);
  *(void *)(a1 + 1064) = *(void *)(a2 + 1064);
  uint64_t v80 = *(void *)(a2 + 1072);
  *(void *)(a1 + 1072) = v80;
  uint64_t v81 = *(void *)(a2 + 1080);
  *(_BYTE *)(a1 + 1088) = *(_BYTE *)(a2 + 1088);
  *(void *)(a1 + 1080) = v81;
  *(_BYTE *)(a1 + 1089) = *(_BYTE *)(a2 + 1089);
  *(void *)(a1 + 1096) = *(void *)(a2 + 1096);
  uint64_t v82 = *(void *)(a2 + 1104);
  *(void *)(a1 + 1104) = v82;
  *(_BYTE *)(a1 + 1120) = *(_BYTE *)(a2 + 1120);
  *(void *)(a1 + 1112) = *(void *)(a2 + 1112);
  *(_BYTE *)(a1 + 1136) = *(_BYTE *)(a2 + 1136);
  *(void *)(a1 + 1128) = *(void *)(a2 + 1128);
  *(void *)(a1 + 1144) = *(void *)(a2 + 1144);
  uint64_t v83 = *(void *)(a2 + 1152);
  *(void *)(a1 + 1152) = v83;
  uint64_t v159 = *(void *)(a2 + 1168);
  swift_bridgeObjectRetain(v74);
  swift_bridgeObjectRetain(v75);
  swift_bridgeObjectRetain(v76);
  swift_bridgeObjectRetain(v77);
  swift_bridgeObjectRetain(v78);
  swift_bridgeObjectRetain(v79);
  swift_bridgeObjectRetain(v80);
  swift_bridgeObjectRetain(v82);
  swift_bridgeObjectRetain(v83);
  if (v159 == 1)
  {
    __int128 v84 = *(_OWORD *)(a2 + 1208);
    *(_OWORD *)(a1 + 1192) = *(_OWORD *)(a2 + 1192);
    *(_OWORD *)(a1 + 1208) = v84;
    __int128 v85 = *(_OWORD *)(a2 + 1240);
    *(_OWORD *)(a1 + 1224) = *(_OWORD *)(a2 + 1224);
    *(_OWORD *)(a1 + 1240) = v85;
    __int128 v86 = *(_OWORD *)(a2 + 1176);
    *(_OWORD *)(a1 + 1160) = *(_OWORD *)(a2 + 1160);
    *(_OWORD *)(a1 + 1176) = v86;
  }

  else
  {
    *(void *)(a1 + 1160) = *(void *)(a2 + 1160);
    *(void *)(a1 + 1168) = v159;
    *(void *)(a1 + 1176) = *(void *)(a2 + 1176);
    uint64_t v87 = *(void *)(a2 + 1184);
    *(void *)(a1 + 1184) = v87;
    *(void *)(a1 + 1192) = *(void *)(a2 + 1192);
    uint64_t v88 = *(void *)(a2 + 1200);
    *(void *)(a1 + 1200) = v88;
    *(void *)(a1 + 1208) = *(void *)(a2 + 1208);
    uint64_t v89 = *(void *)(a2 + 1216);
    *(void *)(a1 + 1216) = v89;
    *(void *)(a1 + 1224) = *(void *)(a2 + 1224);
    uint64_t v90 = *(void *)(a2 + 1232);
    *(void *)(a1 + 1232) = v90;
    *(void *)(a1 + 1240) = *(void *)(a2 + 1240);
    uint64_t v91 = *(void *)(a2 + 1248);
    *(void *)(a1 + 1248) = v91;
    swift_bridgeObjectRetain(v159);
    swift_bridgeObjectRetain(v87);
    swift_bridgeObjectRetain(v88);
    swift_bridgeObjectRetain(v89);
    swift_bridgeObjectRetain(v90);
    swift_bridgeObjectRetain(v91);
  }

  uint64_t v92 = (uint64_t *)(a2 + 1256);
  unint64_t v93 = *(void *)(a2 + 1264);
  if (v93 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 1256) = *(_OWORD *)v92;
  }

  else
  {
    uint64_t v94 = *v92;
    sub_100003FF0(*v92, *(void *)(a2 + 1264));
    *(void *)(a1 + 1256) = v94;
    *(void *)(a1 + 1264) = v93;
  }

  *(void *)(a1 + 1272) = *(void *)(a2 + 1272);
  uint64_t v95 = *(void *)(a2 + 1280);
  *(void *)(a1 + 1280) = v95;
  uint64_t v96 = (_OWORD *)(a2 + 1288);
  unint64_t v97 = *(void *)(a2 + 1296);
  swift_bridgeObjectRetain(v95);
  if (v97 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 1288) = *v96;
  }

  else
  {
    uint64_t v98 = *(void *)v96;
    sub_100003FF0(v98, v97);
    *(void *)(a1 + 1288) = v98;
    *(void *)(a1 + 1296) = v97;
  }

  *(void *)(a1 + 1304) = *(void *)(a2 + 1304);
  *(_BYTE *)(a1 + 1312) = *(_BYTE *)(a2 + 1312);
  *(void *)(a1 + 1320) = *(void *)(a2 + 1320);
  uint64_t v99 = *(void *)(a2 + 1328);
  *(void *)(a1 + 1328) = v99;
  *(_BYTE *)(a1 + 1336) = *(_BYTE *)(a2 + 1336);
  *(_WORD *)(a1 + 1337) = *(_WORD *)(a2 + 1337);
  *(_BYTE *)(a1 + 1352) = *(_BYTE *)(a2 + 1352);
  *(void *)(a1 + 1344) = *(void *)(a2 + 1344);
  *(void *)(a1 + 1360) = *(void *)(a2 + 1360);
  uint64_t v100 = *(void *)(a2 + 1368);
  *(void *)(a1 + 1368) = v100;
  int v101 = (uint64_t *)(a2 + 1376);
  unint64_t v102 = *(void *)(a2 + 1384);
  swift_bridgeObjectRetain(v99);
  swift_bridgeObjectRetain(v100);
  if (v102 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 1376) = *(_OWORD *)v101;
  }

  else
  {
    uint64_t v103 = *v101;
    sub_100003FF0(*v101, v102);
    *(void *)(a1 + 1376) = v103;
    *(void *)(a1 + 1384) = v102;
  }

  uint64_t v104 = (uint64_t *)(a2 + 1392);
  unint64_t v105 = *(void *)(a2 + 1400);
  if (v105 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 1392) = *(_OWORD *)v104;
  }

  else
  {
    uint64_t v106 = *v104;
    sub_100003FF0(*v104, *(void *)(a2 + 1400));
    *(void *)(a1 + 1392) = v106;
    *(void *)(a1 + 1400) = v105;
  }

  *(void *)(a1 + 1408) = *(void *)(a2 + 1408);
  *(_BYTE *)(a1 + 1416) = *(_BYTE *)(a2 + 1416);
  *(_WORD *)(a1 + 1417) = *(_WORD *)(a2 + 1417);
  *(void *)(a1 + 1424) = *(void *)(a2 + 1424);
  *(_BYTE *)(a1 + 1432) = *(_BYTE *)(a2 + 1432);
  *(void *)(a1 + 1440) = *(void *)(a2 + 1440);
  *(_WORD *)(a1 + 1448) = *(_WORD *)(a2 + 1448);
  *(_BYTE *)(a1 + 1464) = *(_BYTE *)(a2 + 1464);
  *(void *)(a1 + 1456) = *(void *)(a2 + 1456);
  *(_BYTE *)(a1 + 1480) = *(_BYTE *)(a2 + 1480);
  *(void *)(a1 + 1472) = *(void *)(a2 + 1472);
  *(void *)(a1 + 1488) = *(void *)(a2 + 1488);
  uint64_t v107 = *(void *)(a2 + 1496);
  *(void *)(a1 + 1496) = v107;
  *(_BYTE *)(a1 + 1512) = *(_BYTE *)(a2 + 1512);
  *(void *)(a1 + 1504) = *(void *)(a2 + 1504);
  *(_BYTE *)(a1 + 1528) = *(_BYTE *)(a2 + 1528);
  *(void *)(a1 + 1520) = *(void *)(a2 + 1520);
  int v108 = (_OWORD *)(a2 + 1536);
  unint64_t v109 = *(void *)(a2 + 1544);
  swift_bridgeObjectRetain(v107);
  if (v109 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 1536) = *v108;
  }

  else
  {
    uint64_t v110 = *(void *)v108;
    sub_100003FF0(v110, v109);
    *(void *)(a1 + 1536) = v110;
    *(void *)(a1 + 1544) = v109;
  }

  uint64_t v111 = (uint64_t *)(a2 + 1552);
  unint64_t v112 = *(void *)(a2 + 1560);
  if (v112 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 1552) = *(_OWORD *)v111;
  }

  else
  {
    uint64_t v113 = *v111;
    sub_100003FF0(*v111, *(void *)(a2 + 1560));
    *(void *)(a1 + 1552) = v113;
    *(void *)(a1 + 1560) = v112;
  }

  *(void *)(a1 + 1568) = *(void *)(a2 + 1568);
  *(_BYTE *)(a1 + 1576) = *(_BYTE *)(a2 + 1576);
  uint64_t v114 = (uint64_t *)(a2 + 1584);
  unint64_t v115 = *(void *)(a2 + 1592);
  if (v115 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 1584) = *(_OWORD *)v114;
  }

  else
  {
    uint64_t v116 = *v114;
    sub_100003FF0(*v114, *(void *)(a2 + 1592));
    *(void *)(a1 + 1584) = v116;
    *(void *)(a1 + 1592) = v115;
  }

  int v117 = (uint64_t *)(a2 + 1600);
  unint64_t v118 = *(void *)(a2 + 1608);
  if (v118 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 1600) = *(_OWORD *)v117;
  }

  else
  {
    uint64_t v119 = *v117;
    sub_100003FF0(*v117, *(void *)(a2 + 1608));
    *(void *)(a1 + 1600) = v119;
    *(void *)(a1 + 1608) = v118;
  }

  *(void *)(a1 + 1616) = *(void *)(a2 + 1616);
  *(_BYTE *)(a1 + 1624) = *(_BYTE *)(a2 + 1624);
  *(void *)(a1 + 1632) = *(void *)(a2 + 1632);
  *(_BYTE *)(a1 + 1640) = *(_BYTE *)(a2 + 1640);
  uint64_t v120 = *(void *)(a2 + 1648);
  *(void *)(a1 + 1648) = v120;
  *(void *)(a1 + 1656) = *(void *)(a2 + 1656);
  uint64_t v121 = *(void *)(a2 + 1664);
  *(void *)(a1 + 1664) = v121;
  *(void *)(a1 + 1672) = *(void *)(a2 + 1672);
  uint64_t v122 = *(void *)(a2 + 1680);
  *(void *)(a1 + 1680) = v122;
  *(void *)(a1 + 1688) = *(void *)(a2 + 1688);
  *(_BYTE *)(a1 + 1696) = *(_BYTE *)(a2 + 1696);
  *(_WORD *)(a1 + 1697) = *(_WORD *)(a2 + 1697);
  *(void *)(a1 + 1704) = *(void *)(a2 + 1704);
  *(_BYTE *)(a1 + 1712) = *(_BYTE *)(a2 + 1712);
  uint64_t v123 = (uint64_t *)(a2 + 1720);
  unint64_t v124 = *(void *)(a2 + 1728);
  swift_bridgeObjectRetain(v120);
  swift_bridgeObjectRetain(v121);
  swift_bridgeObjectRetain(v122);
  if (v124 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 1720) = *(_OWORD *)v123;
  }

  else
  {
    uint64_t v125 = *v123;
    sub_100003FF0(*v123, v124);
    *(void *)(a1 + 1720) = v125;
    *(void *)(a1 + 1728) = v124;
  }

  *(void *)(a1 + 1736) = *(void *)(a2 + 1736);
  *(_WORD *)(a1 + 1744) = *(_WORD *)(a2 + 1744);
  *(void *)(a1 + 1752) = *(void *)(a2 + 1752);
  uint64_t v126 = *(void *)(a2 + 1760);
  *(void *)(a1 + 1760) = v126;
  *(void *)(a1 + 1768) = *(void *)(a2 + 1768);
  *(_BYTE *)(a1 + 1776) = *(_BYTE *)(a2 + 1776);
  *(_BYTE *)(a1 + 1792) = *(_BYTE *)(a2 + 1792);
  *(void *)(a1 + 1784) = *(void *)(a2 + 1784);
  uint64_t v127 = (_OWORD *)(a2 + 1800);
  unint64_t v128 = *(void *)(a2 + 1808);
  swift_bridgeObjectRetain(v126);
  if (v128 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 1800) = *v127;
  }

  else
  {
    uint64_t v129 = *(void *)v127;
    sub_100003FF0(v129, v128);
    *(void *)(a1 + 1800) = v129;
    *(void *)(a1 + 1808) = v128;
  }

  uint64_t v130 = (uint64_t *)(a2 + 1816);
  unint64_t v131 = *(void *)(a2 + 1824);
  if (v131 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 1816) = *(_OWORD *)v130;
  }

  else
  {
    uint64_t v132 = *v130;
    sub_100003FF0(*v130, *(void *)(a2 + 1824));
    *(void *)(a1 + 1816) = v132;
    *(void *)(a1 + 1824) = v131;
  }

  *(void *)(a1 + 1832) = *(void *)(a2 + 1832);
  *(_BYTE *)(a1 + 1840) = *(_BYTE *)(a2 + 1840);
  uint64_t v133 = (uint64_t *)(a2 + 1848);
  unint64_t v134 = *(void *)(a2 + 1856);
  if (v134 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 1848) = *(_OWORD *)v133;
  }

  else
  {
    uint64_t v135 = *v133;
    sub_100003FF0(*v133, *(void *)(a2 + 1856));
    *(void *)(a1 + 1848) = v135;
    *(void *)(a1 + 1856) = v134;
  }

  uint64_t v136 = (uint64_t *)(a2 + 1864);
  unint64_t v137 = *(void *)(a2 + 1872);
  if (v137 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 1864) = *(_OWORD *)v136;
  }

  else
  {
    uint64_t v138 = *v136;
    sub_100003FF0(*v136, *(void *)(a2 + 1872));
    *(void *)(a1 + 1864) = v138;
    *(void *)(a1 + 1872) = v137;
  }

  uint64_t v139 = (uint64_t *)(a2 + 1880);
  unint64_t v140 = *(void *)(a2 + 1888);
  if (v140 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 1880) = *(_OWORD *)v139;
  }

  else
  {
    uint64_t v141 = *v139;
    sub_100003FF0(*v139, *(void *)(a2 + 1888));
    *(void *)(a1 + 1880) = v141;
    *(void *)(a1 + 1888) = v140;
  }

  *(void *)(a1 + 1896) = *(void *)(a2 + 1896);
  *(_BYTE *)(a1 + 1904) = *(_BYTE *)(a2 + 1904);
  uint64_t v142 = (uint64_t *)(a2 + 1912);
  unint64_t v143 = *(void *)(a2 + 1920);
  if (v143 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 1912) = *(_OWORD *)v142;
  }

  else
  {
    uint64_t v144 = *v142;
    sub_100003FF0(*v142, *(void *)(a2 + 1920));
    *(void *)(a1 + 1912) = v144;
    *(void *)(a1 + 1920) = v143;
  }

  *(void *)(a1 + 1928) = *(void *)(a2 + 1928);
  *(_BYTE *)(a1 + 1936) = *(_BYTE *)(a2 + 1936);
  uint64_t v145 = (uint64_t *)(a2 + 1944);
  unint64_t v146 = *(void *)(a2 + 1952);
  if (v146 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 1944) = *(_OWORD *)v145;
  }

  else
  {
    uint64_t v147 = *v145;
    sub_100003FF0(*v145, *(void *)(a2 + 1952));
    *(void *)(a1 + 1944) = v147;
    *(void *)(a1 + 1952) = v146;
  }

  *(void *)(a1 + 1960) = *(void *)(a2 + 1960);
  uint64_t v148 = *(void *)(a2 + 1968);
  *(void *)(a1 + 1968) = v148;
  *(void *)(a1 + 1976) = *(void *)(a2 + 1976);
  *(_BYTE *)(a1 + 1984) = *(_BYTE *)(a2 + 1984);
  *(void *)(a1 + 1992) = *(void *)(a2 + 1992);
  *(_BYTE *)(a1 + 2000) = *(_BYTE *)(a2 + 2000);
  *(void *)(a1 + 2008) = *(void *)(a2 + 2008);
  *(_BYTE *)(a1 + 2016) = *(_BYTE *)(a2 + 2016);
  uint64_t v149 = *(void *)(a2 + 2024);
  *(_BYTE *)(a1 + 2032) = *(_BYTE *)(a2 + 2032);
  *(void *)(a1 + 2024) = v149;
  uint64_t v150 = *(void *)(a2 + 2040);
  *(void *)(a1 + 2040) = v150;
  uint64_t v151 = *(void *)(a2 + 2048);
  *(void *)(a1 + 2048) = v151;
  int v152 = (uint64_t *)(a2 + 2056);
  unint64_t v153 = *(void *)(a2 + 2064);
  swift_bridgeObjectRetain(v148);
  swift_bridgeObjectRetain(v150);
  swift_bridgeObjectRetain(v151);
  if (v153 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 2056) = *(_OWORD *)v152;
  }

  else
  {
    uint64_t v154 = *v152;
    sub_100003FF0(*v152, v153);
    *(void *)(a1 + 2056) = v154;
    *(void *)(a1 + 2064) = v153;
  }

  *(void *)(a1 + 2072) = *(void *)(a2 + 2072);
  *(_BYTE *)(a1 + 2080) = *(_BYTE *)(a2 + 2080);
  uint64_t v155 = *(void *)(a2 + 2088);
  *(void *)(a1 + 2088) = v155;
  *(void *)(a1 + 2096) = *(void *)(a2 + 2096);
  *(_BYTE *)(a1 + 2104) = *(_BYTE *)(a2 + 2104);
  *(void *)(a1 + 2112) = *(void *)(a2 + 2112);
  *(_WORD *)(a1 + 2120) = *(_WORD *)(a2 + 2120);
  *(_BYTE *)(a1 + 2122) = *(_BYTE *)(a2 + 2122);
  *(void *)(a1 + 2128) = *(void *)(a2 + 2128);
  uint64_t v156 = *(void *)(a2 + 2136);
  *(void *)(a1 + 2136) = v156;
  *(_BYTE *)(a1 + 2144) = *(_BYTE *)(a2 + 2144);
  *(void *)(a1 + 2152) = *(void *)(a2 + 2152);
  *(_BYTE *)(a1 + 2160) = *(_BYTE *)(a2 + 2160);
  *(void *)(a1 + 2168) = *(void *)(a2 + 2168);
  *(_WORD *)(a1 + 2176) = *(_WORD *)(a2 + 2176);
  *(_BYTE *)(a1 + 2178) = *(_BYTE *)(a2 + 2178);
  swift_bridgeObjectRetain(v155);
  swift_bridgeObjectRetain(v156);
  return a1;
}

uint64_t assignWithCopy for IDSMadridProtocolPayload(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(void *)(a1 + 24) = v5;
  unint64_t v6 = (_OWORD *)(a1 + 40);
  uint64_t v7 = (uint64_t *)(a2 + 40);
  unint64_t v8 = *(void *)(a2 + 48);
  if (*(void *)(a1 + 48) >> 60 == 15LL)
  {
    if (v8 >> 60 != 15)
    {
      uint64_t v9 = *v7;
      sub_100003FF0(*v7, *(void *)(a2 + 48));
      *(void *)(a1 + 40) = v9;
      *(void *)(a1 + 48) = v8;
      goto LABEL_8;
    }

    goto LABEL_6;
  }

  if (v8 >> 60 == 15)
  {
    sub_100004238(a1 + 40);
LABEL_6:
    *unint64_t v6 = *(_OWORD *)v7;
    goto LABEL_8;
  }

  uint64_t v10 = *v7;
  sub_100003FF0(*v7, *(void *)(a2 + 48));
  uint64_t v11 = *(void *)(a1 + 40);
  unint64_t v12 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = v10;
  *(void *)(a1 + 48) = v8;
  sub_100004080(v11, v12);
LABEL_8:
  uint64_t v13 = (uint64_t *)(a2 + 56);
  unint64_t v14 = *(void *)(a2 + 64);
  if (*(void *)(a1 + 64) >> 60 == 15LL)
  {
    if (v14 >> 60 != 15)
    {
      uint64_t v15 = *v13;
      sub_100003FF0(*v13, *(void *)(a2 + 64));
      *(void *)(a1 + 56) = v15;
      *(void *)(a1 + 64) = v14;
      goto LABEL_15;
    }

    goto LABEL_13;
  }

  if (v14 >> 60 == 15)
  {
    sub_100004238(a1 + 56);
LABEL_13:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)v13;
    goto LABEL_15;
  }

  uint64_t v16 = *v13;
  sub_100003FF0(*v13, *(void *)(a2 + 64));
  uint64_t v17 = *(void *)(a1 + 56);
  unint64_t v18 = *(void *)(a1 + 64);
  *(void *)(a1 + 56) = v16;
  *(void *)(a1 + 64) = v14;
  sub_100004080(v17, v18);
LABEL_15:
  uint64_t v19 = (uint64_t *)(a2 + 72);
  unint64_t v20 = *(void *)(a2 + 80);
  if (*(void *)(a1 + 80) >> 60 == 15LL)
  {
    if (v20 >> 60 != 15)
    {
      uint64_t v21 = *v19;
      sub_100003FF0(*v19, *(void *)(a2 + 80));
      *(void *)(a1 + 72) = v21;
      *(void *)(a1 + 80) = v20;
      goto LABEL_22;
    }

    goto LABEL_20;
  }

  if (v20 >> 60 == 15)
  {
    sub_100004238(a1 + 72);
LABEL_20:
    *(_OWORD *)(a1 + 72) = *(_OWORD *)v19;
    goto LABEL_22;
  }

  uint64_t v22 = *v19;
  sub_100003FF0(*v19, *(void *)(a2 + 80));
  uint64_t v23 = *(void *)(a1 + 72);
  unint64_t v24 = *(void *)(a1 + 80);
  *(void *)(a1 + 72) = v22;
  *(void *)(a1 + 80) = v20;
  sub_100004080(v23, v24);
LABEL_22:
  unint64_t v25 = (uint64_t *)(a2 + 88);
  unint64_t v26 = *(void *)(a2 + 96);
  if (*(void *)(a1 + 96) >> 60 == 15LL)
  {
    if (v26 >> 60 != 15)
    {
      uint64_t v27 = *v25;
      sub_100003FF0(*v25, *(void *)(a2 + 96));
      *(void *)(a1 + 88) = v27;
      *(void *)(a1 + 96) = v26;
      goto LABEL_29;
    }

    goto LABEL_27;
  }

  if (v26 >> 60 == 15)
  {
    sub_100004238(a1 + 88);
LABEL_27:
    *(_OWORD *)(a1 + 88) = *(_OWORD *)v25;
    goto LABEL_29;
  }

  uint64_t v28 = *v25;
  sub_100003FF0(*v25, *(void *)(a2 + 96));
  uint64_t v29 = *(void *)(a1 + 88);
  unint64_t v30 = *(void *)(a1 + 96);
  *(void *)(a1 + 88) = v28;
  *(void *)(a1 + 96) = v26;
  sub_100004080(v29, v30);
LABEL_29:
  unint64_t v31 = (uint64_t *)(a2 + 104);
  unint64_t v32 = *(void *)(a2 + 112);
  if (*(void *)(a1 + 112) >> 60 == 15LL)
  {
    if (v32 >> 60 != 15)
    {
      uint64_t v33 = *v31;
      sub_100003FF0(*v31, *(void *)(a2 + 112));
      *(void *)(a1 + 104) = v33;
      *(void *)(a1 + 112) = v32;
      goto LABEL_36;
    }

    goto LABEL_34;
  }

  if (v32 >> 60 == 15)
  {
    sub_100004238(a1 + 104);
LABEL_34:
    *(_OWORD *)(a1 + 104) = *(_OWORD *)v31;
    goto LABEL_36;
  }

  uint64_t v34 = *v31;
  sub_100003FF0(*v31, *(void *)(a2 + 112));
  uint64_t v35 = *(void *)(a1 + 104);
  unint64_t v36 = *(void *)(a1 + 112);
  *(void *)(a1 + 104) = v34;
  *(void *)(a1 + 112) = v32;
  sub_100004080(v35, v36);
LABEL_36:
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  uint64_t v37 = *(void *)(a2 + 128);
  uint64_t v38 = *(void *)(a1 + 128);
  *(void *)(a1 + 128) = v37;
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRelease(v38);
  uint64_t v39 = (uint64_t *)(a2 + 136);
  unint64_t v40 = *(void *)(a2 + 144);
  if (*(void *)(a1 + 144) >> 60 == 15LL)
  {
    if (v40 >> 60 != 15)
    {
      uint64_t v41 = *v39;
      sub_100003FF0(*v39, *(void *)(a2 + 144));
      *(void *)(a1 + 136) = v41;
      *(void *)(a1 + 144) = v40;
      goto LABEL_43;
    }

    goto LABEL_41;
  }

  if (v40 >> 60 == 15)
  {
    sub_100004238(a1 + 136);
LABEL_41:
    *(_OWORD *)(a1 + 136) = *(_OWORD *)v39;
    goto LABEL_43;
  }

  uint64_t v42 = *v39;
  sub_100003FF0(*v39, *(void *)(a2 + 144));
  uint64_t v43 = *(void *)(a1 + 136);
  unint64_t v44 = *(void *)(a1 + 144);
  *(void *)(a1 + 136) = v42;
  *(void *)(a1 + 144) = v40;
  sub_100004080(v43, v44);
LABEL_43:
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  uint64_t v45 = *(void *)(a2 + 160);
  uint64_t v46 = *(void *)(a1 + 160);
  *(void *)(a1 + 160) = v45;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRelease(v46);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  uint64_t v47 = *(void *)(a2 + 176);
  *(_WORD *)(a1 + 184) = *(_WORD *)(a2 + 184);
  *(void *)(a1 + 176) = v47;
  uint64_t v48 = *(void *)(a2 + 192);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(void *)(a1 + 192) = v48;
  uint64_t v49 = (uint64_t *)(a2 + 208);
  unint64_t v50 = *(void *)(a2 + 216);
  if (*(void *)(a1 + 216) >> 60 == 15LL)
  {
    if (v50 >> 60 != 15)
    {
      uint64_t v51 = *v49;
      sub_100003FF0(*v49, *(void *)(a2 + 216));
      *(void *)(a1 + 208) = v51;
      *(void *)(a1 + 216) = v50;
      goto LABEL_50;
    }

    goto LABEL_48;
  }

  if (v50 >> 60 == 15)
  {
    sub_100004238(a1 + 208);
LABEL_48:
    *(_OWORD *)(a1 + 208) = *(_OWORD *)v49;
    goto LABEL_50;
  }

  uint64_t v52 = *v49;
  sub_100003FF0(*v49, *(void *)(a2 + 216));
  uint64_t v53 = *(void *)(a1 + 208);
  unint64_t v54 = *(void *)(a1 + 216);
  *(void *)(a1 + 208) = v52;
  *(void *)(a1 + 216) = v50;
  sub_100004080(v53, v54);
LABEL_50:
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  *(_BYTE *)(a1 + 225) = *(_BYTE *)(a2 + 225);
  uint64_t v55 = (uint64_t *)(a2 + 232);
  unint64_t v56 = *(void *)(a2 + 240);
  if (*(void *)(a1 + 240) >> 60 == 15LL)
  {
    if (v56 >> 60 != 15)
    {
      uint64_t v57 = *v55;
      sub_100003FF0(*v55, *(void *)(a2 + 240));
      *(void *)(a1 + 232) = v57;
      *(void *)(a1 + 240) = v56;
      goto LABEL_57;
    }

    goto LABEL_55;
  }

  if (v56 >> 60 == 15)
  {
    sub_100004238(a1 + 232);
LABEL_55:
    *(_OWORD *)(a1 + 232) = *(_OWORD *)v55;
    goto LABEL_57;
  }

  uint64_t v58 = *v55;
  sub_100003FF0(*v55, *(void *)(a2 + 240));
  uint64_t v59 = *(void *)(a1 + 232);
  unint64_t v60 = *(void *)(a1 + 240);
  *(void *)(a1 + 232) = v58;
  *(void *)(a1 + 240) = v56;
  sub_100004080(v59, v60);
LABEL_57:
  unint64_t v61 = (uint64_t *)(a2 + 248);
  unint64_t v62 = *(void *)(a2 + 256);
  if (*(void *)(a1 + 256) >> 60 == 15LL)
  {
    if (v62 >> 60 != 15)
    {
      uint64_t v63 = *v61;
      sub_100003FF0(*v61, *(void *)(a2 + 256));
      *(void *)(a1 + 248) = v63;
      *(void *)(a1 + 256) = v62;
      goto LABEL_64;
    }

    goto LABEL_62;
  }

  if (v62 >> 60 == 15)
  {
    sub_100004238(a1 + 248);
LABEL_62:
    *(_OWORD *)(a1 + 248) = *(_OWORD *)v61;
    goto LABEL_64;
  }

  uint64_t v64 = *v61;
  sub_100003FF0(*v61, *(void *)(a2 + 256));
  uint64_t v65 = *(void *)(a1 + 248);
  unint64_t v66 = *(void *)(a1 + 256);
  *(void *)(a1 + 248) = v64;
  *(void *)(a1 + 256) = v62;
  sub_100004080(v65, v66);
LABEL_64:
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  uint64_t v67 = *(void *)(a2 + 272);
  uint64_t v68 = *(void *)(a1 + 272);
  *(void *)(a1 + 272) = v67;
  swift_bridgeObjectRetain(v67);
  swift_bridgeObjectRelease(v68);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  uint64_t v69 = *(void *)(a2 + 288);
  uint64_t v70 = *(void *)(a1 + 288);
  *(void *)(a1 + 288) = v69;
  swift_bridgeObjectRetain(v69);
  swift_bridgeObjectRelease(v70);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  uint64_t v71 = *(void *)(a2 + 304);
  uint64_t v72 = *(void *)(a1 + 304);
  *(void *)(a1 + 304) = v71;
  swift_bridgeObjectRetain(v71);
  swift_bridgeObjectRelease(v72);
  uint64_t v73 = (uint64_t *)(a2 + 312);
  unint64_t v74 = *(void *)(a2 + 320);
  if (*(void *)(a1 + 320) >> 60 == 15LL)
  {
    if (v74 >> 60 != 15)
    {
      uint64_t v75 = *v73;
      sub_100003FF0(*v73, *(void *)(a2 + 320));
      *(void *)(a1 + 312) = v75;
      *(void *)(a1 + 320) = v74;
      goto LABEL_71;
    }

    goto LABEL_69;
  }

  if (v74 >> 60 == 15)
  {
    sub_100004238(a1 + 312);
LABEL_69:
    *(_OWORD *)(a1 + 312) = *(_OWORD *)v73;
    goto LABEL_71;
  }

  uint64_t v76 = *v73;
  sub_100003FF0(*v73, *(void *)(a2 + 320));
  uint64_t v77 = *(void *)(a1 + 312);
  unint64_t v78 = *(void *)(a1 + 320);
  *(void *)(a1 + 312) = v76;
  *(void *)(a1 + 320) = v74;
  sub_100004080(v77, v78);
LABEL_71:
  uint64_t v79 = *(void *)(a2 + 328);
  *(_BYTE *)(a1 + 336) = *(_BYTE *)(a2 + 336);
  *(void *)(a1 + 328) = v79;
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  uint64_t v80 = *(void *)(a2 + 352);
  uint64_t v81 = *(void *)(a1 + 352);
  *(void *)(a1 + 352) = v80;
  swift_bridgeObjectRetain(v80);
  swift_bridgeObjectRelease(v81);
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  uint64_t v82 = *(void *)(a2 + 368);
  uint64_t v83 = *(void *)(a1 + 368);
  *(void *)(a1 + 368) = v82;
  swift_bridgeObjectRetain(v82);
  swift_bridgeObjectRelease(v83);
  *(void *)(a1 + 376) = *(void *)(a2 + 376);
  uint64_t v84 = *(void *)(a2 + 384);
  uint64_t v85 = *(void *)(a1 + 384);
  *(void *)(a1 + 384) = v84;
  swift_bridgeObjectRetain(v84);
  swift_bridgeObjectRelease(v85);
  uint64_t v86 = *(void *)(a1 + 392);
  uint64_t v87 = *(void *)(a2 + 392);
  *(void *)(a1 + 392) = v87;
  swift_bridgeObjectRetain(v87);
  swift_bridgeObjectRelease(v86);
  uint64_t v88 = *(void *)(a1 + 400);
  uint64_t v89 = *(void *)(a2 + 400);
  *(void *)(a1 + 400) = v89;
  swift_bridgeObjectRetain(v89);
  swift_bridgeObjectRelease(v88);
  *(void *)(a1 + 408) = *(void *)(a2 + 408);
  uint64_t v90 = *(void *)(a2 + 416);
  uint64_t v91 = *(void *)(a1 + 416);
  *(void *)(a1 + 416) = v90;
  swift_bridgeObjectRetain(v90);
  swift_bridgeObjectRelease(v91);
  *(void *)(a1 + 424) = *(void *)(a2 + 424);
  uint64_t v92 = *(void *)(a2 + 432);
  uint64_t v93 = *(void *)(a1 + 432);
  *(void *)(a1 + 432) = v92;
  swift_bridgeObjectRetain(v92);
  swift_bridgeObjectRelease(v93);
  uint64_t v94 = *(void *)(a2 + 440);
  *(_BYTE *)(a1 + 448) = *(_BYTE *)(a2 + 448);
  *(void *)(a1 + 440) = v94;
  uint64_t v95 = *(void *)(a2 + 456);
  *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
  *(void *)(a1 + 456) = v95;
  *(void *)(a1 + 472) = *(void *)(a2 + 472);
  uint64_t v96 = *(void *)(a2 + 480);
  uint64_t v97 = *(void *)(a1 + 480);
  *(void *)(a1 + 480) = v96;
  swift_bridgeObjectRetain(v96);
  swift_bridgeObjectRelease(v97);
  uint64_t v98 = (uint64_t *)(a2 + 488);
  unint64_t v99 = *(void *)(a2 + 496);
  if (*(void *)(a1 + 496) >> 60 == 15LL)
  {
    if (v99 >> 60 != 15)
    {
      uint64_t v100 = *v98;
      sub_100003FF0(*v98, *(void *)(a2 + 496));
      *(void *)(a1 + 488) = v100;
      *(void *)(a1 + 496) = v99;
      goto LABEL_78;
    }

    goto LABEL_76;
  }

  if (v99 >> 60 == 15)
  {
    sub_100004238(a1 + 488);
LABEL_76:
    *(_OWORD *)(a1 + 488) = *(_OWORD *)v98;
    goto LABEL_78;
  }

  uint64_t v101 = *v98;
  sub_100003FF0(*v98, *(void *)(a2 + 496));
  uint64_t v102 = *(void *)(a1 + 488);
  unint64_t v103 = *(void *)(a1 + 496);
  *(void *)(a1 + 488) = v101;
  *(void *)(a1 + 496) = v99;
  sub_100004080(v102, v103);
LABEL_78:
  uint64_t v104 = (uint64_t *)(a2 + 504);
  unint64_t v105 = *(void *)(a2 + 512);
  if (*(void *)(a1 + 512) >> 60 == 15LL)
  {
    if (v105 >> 60 != 15)
    {
      uint64_t v106 = *v104;
      sub_100003FF0(*v104, *(void *)(a2 + 512));
      *(void *)(a1 + 504) = v106;
      *(void *)(a1 + 512) = v105;
      goto LABEL_85;
    }

    goto LABEL_83;
  }

  if (v105 >> 60 == 15)
  {
    sub_100004238(a1 + 504);
LABEL_83:
    *(_OWORD *)(a1 + 504) = *(_OWORD *)v104;
    goto LABEL_85;
  }

  uint64_t v107 = *v104;
  sub_100003FF0(*v104, *(void *)(a2 + 512));
  uint64_t v108 = *(void *)(a1 + 504);
  unint64_t v109 = *(void *)(a1 + 512);
  *(void *)(a1 + 504) = v107;
  *(void *)(a1 + 512) = v105;
  sub_100004080(v108, v109);
LABEL_85:
  uint64_t v110 = *(void *)(a2 + 520);
  *(_BYTE *)(a1 + 528) = *(_BYTE *)(a2 + 528);
  *(void *)(a1 + 520) = v110;
  uint64_t v111 = (uint64_t *)(a2 + 536);
  unint64_t v112 = *(void *)(a2 + 544);
  if (*(void *)(a1 + 544) >> 60 == 15LL)
  {
    if (v112 >> 60 != 15)
    {
      uint64_t v113 = *v111;
      sub_100003FF0(*v111, *(void *)(a2 + 544));
      *(void *)(a1 + 536) = v113;
      *(void *)(a1 + 544) = v112;
      goto LABEL_92;
    }

    goto LABEL_90;
  }

  if (v112 >> 60 == 15)
  {
    sub_100004238(a1 + 536);
LABEL_90:
    *(_OWORD *)(a1 + 536) = *(_OWORD *)v111;
    goto LABEL_92;
  }

  uint64_t v114 = *v111;
  sub_100003FF0(*v111, *(void *)(a2 + 544));
  uint64_t v115 = *(void *)(a1 + 536);
  unint64_t v116 = *(void *)(a1 + 544);
  *(void *)(a1 + 536) = v114;
  *(void *)(a1 + 544) = v112;
  sub_100004080(v115, v116);
LABEL_92:
  *(void *)(a1 + 552) = *(void *)(a2 + 552);
  uint64_t v117 = *(void *)(a2 + 560);
  uint64_t v118 = *(void *)(a1 + 560);
  *(void *)(a1 + 560) = v117;
  swift_bridgeObjectRetain(v117);
  swift_bridgeObjectRelease(v118);
  *(void *)(a1 + 568) = *(void *)(a2 + 568);
  uint64_t v119 = *(void *)(a2 + 576);
  uint64_t v120 = *(void *)(a1 + 576);
  *(void *)(a1 + 576) = v119;
  swift_bridgeObjectRetain(v119);
  swift_bridgeObjectRelease(v120);
  *(void *)(a1 + 584) = *(void *)(a2 + 584);
  uint64_t v121 = *(void *)(a2 + 592);
  uint64_t v122 = *(void *)(a1 + 592);
  *(void *)(a1 + 592) = v121;
  swift_bridgeObjectRetain(v121);
  swift_bridgeObjectRelease(v122);
  uint64_t v123 = *(void *)(a2 + 600);
  *(_BYTE *)(a1 + 608) = *(_BYTE *)(a2 + 608);
  *(void *)(a1 + 600) = v123;
  uint64_t v124 = *(void *)(a2 + 616);
  *(_BYTE *)(a1 + 624) = *(_BYTE *)(a2 + 624);
  *(void *)(a1 + 616) = v124;
  uint64_t v125 = *(void *)(a2 + 632);
  *(_BYTE *)(a1 + 640) = *(_BYTE *)(a2 + 640);
  *(void *)(a1 + 632) = v125;
  uint64_t v126 = *(void *)(a2 + 648);
  *(_BYTE *)(a1 + 656) = *(_BYTE *)(a2 + 656);
  *(void *)(a1 + 648) = v126;
  uint64_t v127 = (uint64_t *)(a2 + 664);
  unint64_t v128 = *(void *)(a2 + 672);
  if (*(void *)(a1 + 672) >> 60 == 15LL)
  {
    if (v128 >> 60 != 15)
    {
      uint64_t v129 = *v127;
      sub_100003FF0(*v127, *(void *)(a2 + 672));
      *(void *)(a1 + 664) = v129;
      *(void *)(a1 + 672) = v128;
      goto LABEL_99;
    }

    goto LABEL_97;
  }

  if (v128 >> 60 == 15)
  {
    sub_100004238(a1 + 664);
LABEL_97:
    *(_OWORD *)(a1 + 664) = *(_OWORD *)v127;
    goto LABEL_99;
  }

  uint64_t v130 = *v127;
  sub_100003FF0(*v127, *(void *)(a2 + 672));
  uint64_t v131 = *(void *)(a1 + 664);
  unint64_t v132 = *(void *)(a1 + 672);
  *(void *)(a1 + 664) = v130;
  *(void *)(a1 + 672) = v128;
  sub_100004080(v131, v132);
LABEL_99:
  *(void *)(a1 + 680) = *(void *)(a2 + 680);
  uint64_t v133 = *(void *)(a2 + 688);
  uint64_t v134 = *(void *)(a1 + 688);
  *(void *)(a1 + 688) = v133;
  swift_bridgeObjectRetain(v133);
  swift_bridgeObjectRelease(v134);
  uint64_t v135 = *(void *)(a2 + 696);
  *(_BYTE *)(a1 + 704) = *(_BYTE *)(a2 + 704);
  *(void *)(a1 + 696) = v135;
  uint64_t v136 = *(void *)(a2 + 712);
  *(_BYTE *)(a1 + 720) = *(_BYTE *)(a2 + 720);
  *(void *)(a1 + 712) = v136;
  *(void *)(a1 + 728) = *(void *)(a2 + 728);
  uint64_t v137 = *(void *)(a2 + 736);
  uint64_t v138 = *(void *)(a1 + 736);
  *(void *)(a1 + 736) = v137;
  swift_bridgeObjectRetain(v137);
  swift_bridgeObjectRelease(v138);
  uint64_t v139 = *(void *)(a2 + 744);
  *(_BYTE *)(a1 + 752) = *(_BYTE *)(a2 + 752);
  *(void *)(a1 + 744) = v139;
  *(void *)(a1 + 760) = *(void *)(a2 + 760);
  uint64_t v140 = *(void *)(a2 + 768);
  uint64_t v141 = *(void *)(a1 + 768);
  *(void *)(a1 + 768) = v140;
  swift_bridgeObjectRetain(v140);
  swift_bridgeObjectRelease(v141);
  uint64_t v142 = *(void *)(a2 + 776);
  *(_BYTE *)(a1 + 784) = *(_BYTE *)(a2 + 784);
  *(void *)(a1 + 776) = v142;
  uint64_t v143 = *(void *)(a2 + 792);
  *(_BYTE *)(a1 + 800) = *(_BYTE *)(a2 + 800);
  *(void *)(a1 + 792) = v143;
  uint64_t v144 = *(void *)(a2 + 808);
  *(_BYTE *)(a1 + 816) = *(_BYTE *)(a2 + 816);
  *(void *)(a1 + 808) = v144;
  uint64_t v145 = *(void *)(a1 + 824);
  uint64_t v146 = *(void *)(a2 + 824);
  *(void *)(a1 + 824) = v146;
  swift_bridgeObjectRetain(v146);
  swift_bridgeObjectRelease(v145);
  uint64_t v147 = *(void *)(a1 + 832);
  uint64_t v148 = *(void *)(a2 + 832);
  *(void *)(a1 + 832) = v148;
  swift_bridgeObjectRetain(v148);
  swift_bridgeObjectRelease(v147);
  uint64_t v149 = *(void *)(a2 + 840);
  *(_BYTE *)(a1 + 848) = *(_BYTE *)(a2 + 848);
  *(void *)(a1 + 840) = v149;
  uint64_t v150 = *(void *)(a2 + 856);
  *(_BYTE *)(a1 + 864) = *(_BYTE *)(a2 + 864);
  *(void *)(a1 + 856) = v150;
  uint64_t v151 = *(void *)(a2 + 872);
  *(_BYTE *)(a1 + 880) = *(_BYTE *)(a2 + 880);
  *(void *)(a1 + 872) = v151;
  *(_BYTE *)(a1 + 881) = *(_BYTE *)(a2 + 881);
  *(_BYTE *)(a1 + 882) = *(_BYTE *)(a2 + 882);
  *(_BYTE *)(a1 + 883) = *(_BYTE *)(a2 + 883);
  *(_BYTE *)(a1 + 884) = *(_BYTE *)(a2 + 884);
  *(void *)(a1 + 888) = *(void *)(a2 + 888);
  uint64_t v152 = *(void *)(a2 + 896);
  uint64_t v153 = *(void *)(a1 + 896);
  *(void *)(a1 + 896) = v152;
  swift_bridgeObjectRetain(v152);
  swift_bridgeObjectRelease(v153);
  *(void *)(a1 + 904) = *(void *)(a2 + 904);
  uint64_t v154 = *(void *)(a2 + 912);
  uint64_t v155 = *(void *)(a1 + 912);
  *(void *)(a1 + 912) = v154;
  swift_bridgeObjectRetain(v154);
  swift_bridgeObjectRelease(v155);
  uint64_t v156 = (uint64_t *)(a2 + 920);
  unint64_t v157 = *(void *)(a2 + 928);
  if (*(void *)(a1 + 928) >> 60 == 15LL)
  {
    if (v157 >> 60 != 15)
    {
      uint64_t v158 = *v156;
      sub_100003FF0(*v156, *(void *)(a2 + 928));
      *(void *)(a1 + 920) = v158;
      *(void *)(a1 + 928) = v157;
      goto LABEL_106;
    }

    goto LABEL_104;
  }

  if (v157 >> 60 == 15)
  {
    sub_100004238(a1 + 920);
LABEL_104:
    *(_OWORD *)(a1 + 920) = *(_OWORD *)v156;
    goto LABEL_106;
  }

  uint64_t v159 = *v156;
  sub_100003FF0(*v156, *(void *)(a2 + 928));
  uint64_t v160 = *(void *)(a1 + 920);
  unint64_t v161 = *(void *)(a1 + 928);
  *(void *)(a1 + 920) = v159;
  *(void *)(a1 + 928) = v157;
  sub_100004080(v160, v161);
LABEL_106:
  *(void *)(a1 + 936) = *(void *)(a2 + 936);
  uint64_t v162 = *(void *)(a2 + 944);
  uint64_t v163 = *(void *)(a1 + 944);
  *(void *)(a1 + 944) = v162;
  swift_bridgeObjectRetain(v162);
  swift_bridgeObjectRelease(v163);
  *(void *)(a1 + 952) = *(void *)(a2 + 952);
  uint64_t v164 = *(void *)(a2 + 960);
  uint64_t v165 = *(void *)(a1 + 960);
  *(void *)(a1 + 960) = v164;
  swift_bridgeObjectRetain(v164);
  swift_bridgeObjectRelease(v165);
  *(void *)(a1 + 968) = *(void *)(a2 + 968);
  uint64_t v166 = *(void *)(a2 + 976);
  uint64_t v167 = *(void *)(a1 + 976);
  *(void *)(a1 + 976) = v166;
  swift_bridgeObjectRetain(v166);
  swift_bridgeObjectRelease(v167);
  *(void *)(a1 + 984) = *(void *)(a2 + 984);
  uint64_t v168 = *(void *)(a2 + 992);
  uint64_t v169 = *(void *)(a1 + 992);
  *(void *)(a1 + 992) = v168;
  swift_bridgeObjectRetain(v168);
  swift_bridgeObjectRelease(v169);
  *(void *)(a1 + 1000) = *(void *)(a2 + 1000);
  uint64_t v170 = *(void *)(a2 + 1008);
  uint64_t v171 = *(void *)(a1 + 1008);
  *(void *)(a1 + 1008) = v170;
  swift_bridgeObjectRetain(v170);
  swift_bridgeObjectRelease(v171);
  uint64_t v172 = *(void *)(a2 + 1016);
  *(_BYTE *)(a1 + 1024) = *(_BYTE *)(a2 + 1024);
  *(void *)(a1 + 1016) = v172;
  *(void *)(a1 + 1032) = *(void *)(a2 + 1032);
  uint64_t v173 = *(void *)(a2 + 1040);
  uint64_t v174 = *(void *)(a1 + 1040);
  *(void *)(a1 + 1040) = v173;
  swift_bridgeObjectRetain(v173);
  swift_bridgeObjectRelease(v174);
  uint64_t v175 = *(void *)(a2 + 1048);
  *(_BYTE *)(a1 + 1056) = *(_BYTE *)(a2 + 1056);
  *(void *)(a1 + 1048) = v175;
  *(void *)(a1 + 1064) = *(void *)(a2 + 1064);
  uint64_t v176 = *(void *)(a2 + 1072);
  uint64_t v177 = *(void *)(a1 + 1072);
  *(void *)(a1 + 1072) = v176;
  swift_bridgeObjectRetain(v176);
  swift_bridgeObjectRelease(v177);
  uint64_t v178 = *(void *)(a2 + 1080);
  *(_BYTE *)(a1 + 1088) = *(_BYTE *)(a2 + 1088);
  *(void *)(a1 + 1080) = v178;
  *(_BYTE *)(a1 + 1089) = *(_BYTE *)(a2 + 1089);
  *(void *)(a1 + 1096) = *(void *)(a2 + 1096);
  uint64_t v179 = *(void *)(a2 + 1104);
  uint64_t v180 = *(void *)(a1 + 1104);
  *(void *)(a1 + 1104) = v179;
  swift_bridgeObjectRetain(v179);
  swift_bridgeObjectRelease(v180);
  uint64_t v181 = *(void *)(a2 + 1112);
  *(_BYTE *)(a1 + 1120) = *(_BYTE *)(a2 + 1120);
  *(void *)(a1 + 1112) = v181;
  uint64_t v182 = *(void *)(a2 + 1128);
  *(_BYTE *)(a1 + 1136) = *(_BYTE *)(a2 + 1136);
  *(void *)(a1 + 1128) = v182;
  *(void *)(a1 + 1144) = *(void *)(a2 + 1144);
  uint64_t v183 = *(void *)(a2 + 1152);
  uint64_t v184 = *(void *)(a1 + 1152);
  *(void *)(a1 + 1152) = v183;
  swift_bridgeObjectRetain(v183);
  swift_bridgeObjectRelease(v184);
  uint64_t v185 = (_OWORD *)(a1 + 1160);
  int v186 = (_OWORD *)(a2 + 1160);
  uint64_t v187 = *(void *)(a1 + 1168);
  uint64_t v188 = *(void *)(a2 + 1168);
  if (v187 == 1)
  {
    if (v188 == 1)
    {
      __int128 v189 = *(_OWORD *)(a2 + 1176);
      *uint64_t v185 = *v186;
      *(_OWORD *)(a1 + 1176) = v189;
      __int128 v190 = *(_OWORD *)(a2 + 1192);
      __int128 v191 = *(_OWORD *)(a2 + 1208);
      __int128 v192 = *(_OWORD *)(a2 + 1240);
      *(_OWORD *)(a1 + 1224) = *(_OWORD *)(a2 + 1224);
      *(_OWORD *)(a1 + 1240) = v192;
      *(_OWORD *)(a1 + 1192) = v190;
      *(_OWORD *)(a1 + 1208) = v191;
    }

    else
    {
      *(void *)(a1 + 1160) = *(void *)(a2 + 1160);
      uint64_t v197 = *(void *)(a2 + 1168);
      *(void *)(a1 + 1168) = v197;
      *(void *)(a1 + 1176) = *(void *)(a2 + 1176);
      uint64_t v198 = *(void *)(a2 + 1184);
      *(void *)(a1 + 1184) = v198;
      *(void *)(a1 + 1192) = *(void *)(a2 + 1192);
      uint64_t v199 = *(void *)(a2 + 1200);
      *(void *)(a1 + 1200) = v199;
      *(void *)(a1 + 1208) = *(void *)(a2 + 1208);
      uint64_t v200 = *(void *)(a2 + 1216);
      *(void *)(a1 + 1216) = v200;
      *(void *)(a1 + 1224) = *(void *)(a2 + 1224);
      uint64_t v201 = *(void *)(a2 + 1232);
      *(void *)(a1 + 1232) = v201;
      *(void *)(a1 + 1240) = *(void *)(a2 + 1240);
      uint64_t v202 = *(void *)(a2 + 1248);
      *(void *)(a1 + 1248) = v202;
      swift_bridgeObjectRetain(v197);
      swift_bridgeObjectRetain(v198);
      swift_bridgeObjectRetain(v199);
      swift_bridgeObjectRetain(v200);
      swift_bridgeObjectRetain(v201);
      swift_bridgeObjectRetain(v202);
    }
  }

  else if (v188 == 1)
  {
    sub_1000532F8((void *)(a1 + 1160));
    __int128 v193 = *(_OWORD *)(a2 + 1176);
    *uint64_t v185 = *v186;
    *(_OWORD *)(a1 + 1176) = v193;
    __int128 v194 = *(_OWORD *)(a2 + 1240);
    __int128 v196 = *(_OWORD *)(a2 + 1192);
    __int128 v195 = *(_OWORD *)(a2 + 1208);
    *(_OWORD *)(a1 + 1224) = *(_OWORD *)(a2 + 1224);
    *(_OWORD *)(a1 + 1240) = v194;
    *(_OWORD *)(a1 + 1192) = v196;
    *(_OWORD *)(a1 + 1208) = v195;
  }

  else
  {
    *(void *)(a1 + 1160) = *(void *)(a2 + 1160);
    uint64_t v203 = *(void *)(a2 + 1168);
    *(void *)(a1 + 1168) = v203;
    swift_bridgeObjectRetain(v203);
    swift_bridgeObjectRelease(v187);
    *(void *)(a1 + 1176) = *(void *)(a2 + 1176);
    uint64_t v204 = *(void *)(a2 + 1184);
    uint64_t v205 = *(void *)(a1 + 1184);
    *(void *)(a1 + 1184) = v204;
    swift_bridgeObjectRetain(v204);
    swift_bridgeObjectRelease(v205);
    *(void *)(a1 + 1192) = *(void *)(a2 + 1192);
    uint64_t v206 = *(void *)(a2 + 1200);
    uint64_t v207 = *(void *)(a1 + 1200);
    *(void *)(a1 + 1200) = v206;
    swift_bridgeObjectRetain(v206);
    swift_bridgeObjectRelease(v207);
    *(void *)(a1 + 1208) = *(void *)(a2 + 1208);
    uint64_t v208 = *(void *)(a2 + 1216);
    uint64_t v209 = *(void *)(a1 + 1216);
    *(void *)(a1 + 1216) = v208;
    swift_bridgeObjectRetain(v208);
    swift_bridgeObjectRelease(v209);
    *(void *)(a1 + 1224) = *(void *)(a2 + 1224);
    uint64_t v210 = *(void *)(a2 + 1232);
    uint64_t v211 = *(void *)(a1 + 1232);
    *(void *)(a1 + 1232) = v210;
    swift_bridgeObjectRetain(v210);
    swift_bridgeObjectRelease(v211);
    *(void *)(a1 + 1240) = *(void *)(a2 + 1240);
    uint64_t v212 = *(void *)(a2 + 1248);
    uint64_t v213 = *(void *)(a1 + 1248);
    *(void *)(a1 + 1248) = v212;
    swift_bridgeObjectRetain(v212);
    swift_bridgeObjectRelease(v213);
  }

  uint64_t v214 = (uint64_t *)(a2 + 1256);
  unint64_t v215 = *(void *)(a2 + 1264);
  if (*(void *)(a1 + 1264) >> 60 == 15LL)
  {
    if (v215 >> 60 != 15)
    {
      uint64_t v216 = *v214;
      sub_100003FF0(*v214, *(void *)(a2 + 1264));
      *(void *)(a1 + 1256) = v216;
      *(void *)(a1 + 1264) = v215;
      goto LABEL_120;
    }

    goto LABEL_118;
  }

  if (v215 >> 60 == 15)
  {
    sub_100004238(a1 + 1256);
LABEL_118:
    *(_OWORD *)(a1 + 1256) = *(_OWORD *)v214;
    goto LABEL_120;
  }

  uint64_t v217 = *v214;
  sub_100003FF0(*v214, *(void *)(a2 + 1264));
  uint64_t v218 = *(void *)(a1 + 1256);
  unint64_t v219 = *(void *)(a1 + 1264);
  *(void *)(a1 + 1256) = v217;
  *(void *)(a1 + 1264) = v215;
  sub_100004080(v218, v219);
LABEL_120:
  *(void *)(a1 + 1272) = *(void *)(a2 + 1272);
  uint64_t v220 = *(void *)(a2 + 1280);
  uint64_t v221 = *(void *)(a1 + 1280);
  *(void *)(a1 + 1280) = v220;
  swift_bridgeObjectRetain(v220);
  swift_bridgeObjectRelease(v221);
  uint64_t v222 = (uint64_t *)(a2 + 1288);
  unint64_t v223 = *(void *)(a2 + 1296);
  if (*(void *)(a1 + 1296) >> 60 == 15LL)
  {
    if (v223 >> 60 != 15)
    {
      uint64_t v224 = *v222;
      sub_100003FF0(*v222, *(void *)(a2 + 1296));
      *(void *)(a1 + 1288) = v224;
      *(void *)(a1 + 1296) = v223;
      goto LABEL_127;
    }

    goto LABEL_125;
  }

  if (v223 >> 60 == 15)
  {
    sub_100004238(a1 + 1288);
LABEL_125:
    *(_OWORD *)(a1 + 1288) = *(_OWORD *)v222;
    goto LABEL_127;
  }

  uint64_t v225 = *v222;
  sub_100003FF0(*v222, *(void *)(a2 + 1296));
  uint64_t v226 = *(void *)(a1 + 1288);
  unint64_t v227 = *(void *)(a1 + 1296);
  *(void *)(a1 + 1288) = v225;
  *(void *)(a1 + 1296) = v223;
  sub_100004080(v226, v227);
LABEL_127:
  uint64_t v228 = *(void *)(a2 + 1304);
  *(_BYTE *)(a1 + 1312) = *(_BYTE *)(a2 + 1312);
  *(void *)(a1 + 1304) = v228;
  *(void *)(a1 + 1320) = *(void *)(a2 + 1320);
  uint64_t v229 = *(void *)(a2 + 1328);
  uint64_t v230 = *(void *)(a1 + 1328);
  *(void *)(a1 + 1328) = v229;
  swift_bridgeObjectRetain(v229);
  swift_bridgeObjectRelease(v230);
  *(_BYTE *)(a1 + 1336) = *(_BYTE *)(a2 + 1336);
  *(_BYTE *)(a1 + 1337) = *(_BYTE *)(a2 + 1337);
  *(_BYTE *)(a1 + 1338) = *(_BYTE *)(a2 + 1338);
  uint64_t v231 = *(void *)(a2 + 1344);
  *(_BYTE *)(a1 + 1352) = *(_BYTE *)(a2 + 1352);
  *(void *)(a1 + 1344) = v231;
  *(void *)(a1 + 1360) = *(void *)(a2 + 1360);
  uint64_t v232 = *(void *)(a2 + 1368);
  uint64_t v233 = *(void *)(a1 + 1368);
  *(void *)(a1 + 1368) = v232;
  swift_bridgeObjectRetain(v232);
  swift_bridgeObjectRelease(v233);
  uint64_t v234 = (uint64_t *)(a2 + 1376);
  unint64_t v235 = *(void *)(a2 + 1384);
  if (*(void *)(a1 + 1384) >> 60 == 15LL)
  {
    if (v235 >> 60 != 15)
    {
      uint64_t v236 = *v234;
      sub_100003FF0(*v234, *(void *)(a2 + 1384));
      *(void *)(a1 + 1376) = v236;
      *(void *)(a1 + 1384) = v235;
      goto LABEL_134;
    }

    goto LABEL_132;
  }

  if (v235 >> 60 == 15)
  {
    sub_100004238(a1 + 1376);
LABEL_132:
    *(_OWORD *)(a1 + 1376) = *(_OWORD *)v234;
    goto LABEL_134;
  }

  uint64_t v237 = *v234;
  sub_100003FF0(*v234, *(void *)(a2 + 1384));
  uint64_t v238 = *(void *)(a1 + 1376);
  unint64_t v239 = *(void *)(a1 + 1384);
  *(void *)(a1 + 1376) = v237;
  *(void *)(a1 + 1384) = v235;
  sub_100004080(v238, v239);
LABEL_134:
  uint64_t v240 = (uint64_t *)(a2 + 1392);
  unint64_t v241 = *(void *)(a2 + 1400);
  if (*(void *)(a1 + 1400) >> 60 == 15LL)
  {
    if (v241 >> 60 != 15)
    {
      uint64_t v242 = *v240;
      sub_100003FF0(*v240, *(void *)(a2 + 1400));
      *(void *)(a1 + 1392) = v242;
      *(void *)(a1 + 1400) = v241;
      goto LABEL_141;
    }

    goto LABEL_139;
  }

  if (v241 >> 60 == 15)
  {
    sub_100004238(a1 + 1392);
LABEL_139:
    *(_OWORD *)(a1 + 1392) = *(_OWORD *)v240;
    goto LABEL_141;
  }

  uint64_t v243 = *v240;
  sub_100003FF0(*v240, *(void *)(a2 + 1400));
  uint64_t v244 = *(void *)(a1 + 1392);
  unint64_t v245 = *(void *)(a1 + 1400);
  *(void *)(a1 + 1392) = v243;
  *(void *)(a1 + 1400) = v241;
  sub_100004080(v244, v245);
LABEL_141:
  uint64_t v246 = *(void *)(a2 + 1408);
  *(_BYTE *)(a1 + 1416) = *(_BYTE *)(a2 + 1416);
  *(void *)(a1 + 1408) = v246;
  *(_BYTE *)(a1 + 1417) = *(_BYTE *)(a2 + 1417);
  *(_BYTE *)(a1 + 1418) = *(_BYTE *)(a2 + 1418);
  uint64_t v247 = *(void *)(a2 + 1424);
  *(_BYTE *)(a1 + 1432) = *(_BYTE *)(a2 + 1432);
  *(void *)(a1 + 1424) = v247;
  uint64_t v248 = *(void *)(a2 + 1440);
  *(_BYTE *)(a1 + 1448) = *(_BYTE *)(a2 + 1448);
  *(void *)(a1 + 1440) = v248;
  *(_BYTE *)(a1 + 1449) = *(_BYTE *)(a2 + 1449);
  uint64_t v249 = *(void *)(a2 + 1456);
  *(_BYTE *)(a1 + 1464) = *(_BYTE *)(a2 + 1464);
  *(void *)(a1 + 1456) = v249;
  uint64_t v250 = *(void *)(a2 + 1472);
  *(_BYTE *)(a1 + 1480) = *(_BYTE *)(a2 + 1480);
  *(void *)(a1 + 1472) = v250;
  *(void *)(a1 + 1488) = *(void *)(a2 + 1488);
  uint64_t v251 = *(void *)(a2 + 1496);
  uint64_t v252 = *(void *)(a1 + 1496);
  *(void *)(a1 + 1496) = v251;
  swift_bridgeObjectRetain(v251);
  swift_bridgeObjectRelease(v252);
  uint64_t v253 = *(void *)(a2 + 1504);
  *(_BYTE *)(a1 + 1512) = *(_BYTE *)(a2 + 1512);
  *(void *)(a1 + 1504) = v253;
  uint64_t v254 = *(void *)(a2 + 1520);
  *(_BYTE *)(a1 + 1528) = *(_BYTE *)(a2 + 1528);
  *(void *)(a1 + 1520) = v254;
  uint64_t v255 = (uint64_t *)(a2 + 1536);
  unint64_t v256 = *(void *)(a2 + 1544);
  if (*(void *)(a1 + 1544) >> 60 == 15LL)
  {
    if (v256 >> 60 != 15)
    {
      uint64_t v257 = *v255;
      sub_100003FF0(*v255, *(void *)(a2 + 1544));
      *(void *)(a1 + 1536) = v257;
      *(void *)(a1 + 1544) = v256;
      goto LABEL_148;
    }

    goto LABEL_146;
  }

  if (v256 >> 60 == 15)
  {
    sub_100004238(a1 + 1536);
LABEL_146:
    *(_OWORD *)(a1 + 1536) = *(_OWORD *)v255;
    goto LABEL_148;
  }

  uint64_t v258 = *v255;
  sub_100003FF0(*v255, *(void *)(a2 + 1544));
  uint64_t v259 = *(void *)(a1 + 1536);
  unint64_t v260 = *(void *)(a1 + 1544);
  *(void *)(a1 + 1536) = v258;
  *(void *)(a1 + 1544) = v256;
  sub_100004080(v259, v260);
LABEL_148:
  uint64_t v261 = (uint64_t *)(a2 + 1552);
  unint64_t v262 = *(void *)(a2 + 1560);
  if (*(void *)(a1 + 1560) >> 60 == 15LL)
  {
    if (v262 >> 60 != 15)
    {
      uint64_t v263 = *v261;
      sub_100003FF0(*v261, *(void *)(a2 + 1560));
      *(void *)(a1 + 1552) = v263;
      *(void *)(a1 + 1560) = v262;
      goto LABEL_155;
    }

    goto LABEL_153;
  }

  if (v262 >> 60 == 15)
  {
    sub_100004238(a1 + 1552);
LABEL_153:
    *(_OWORD *)(a1 + 1552) = *(_OWORD *)v261;
    goto LABEL_155;
  }

  uint64_t v264 = *v261;
  sub_100003FF0(*v261, *(void *)(a2 + 1560));
  uint64_t v265 = *(void *)(a1 + 1552);
  unint64_t v266 = *(void *)(a1 + 1560);
  *(void *)(a1 + 1552) = v264;
  *(void *)(a1 + 1560) = v262;
  sub_100004080(v265, v266);
LABEL_155:
  uint64_t v267 = *(void *)(a2 + 1568);
  *(_BYTE *)(a1 + 1576) = *(_BYTE *)(a2 + 1576);
  *(void *)(a1 + 1568) = v267;
  uint64_t v268 = (uint64_t *)(a2 + 1584);
  unint64_t v269 = *(void *)(a2 + 1592);
  if (*(void *)(a1 + 1592) >> 60 == 15LL)
  {
    if (v269 >> 60 != 15)
    {
      uint64_t v270 = *v268;
      sub_100003FF0(*v268, *(void *)(a2 + 1592));
      *(void *)(a1 + 1584) = v270;
      *(void *)(a1 + 1592) = v269;
      goto LABEL_162;
    }

    goto LABEL_160;
  }

  if (v269 >> 60 == 15)
  {
    sub_100004238(a1 + 1584);
LABEL_160:
    *(_OWORD *)(a1 + 1584) = *(_OWORD *)v268;
    goto LABEL_162;
  }

  uint64_t v271 = *v268;
  sub_100003FF0(*v268, *(void *)(a2 + 1592));
  uint64_t v272 = *(void *)(a1 + 1584);
  unint64_t v273 = *(void *)(a1 + 1592);
  *(void *)(a1 + 1584) = v271;
  *(void *)(a1 + 1592) = v269;
  sub_100004080(v272, v273);
LABEL_162:
  int v274 = (uint64_t *)(a2 + 1600);
  unint64_t v275 = *(void *)(a2 + 1608);
  if (*(void *)(a1 + 1608) >> 60 == 15LL)
  {
    if (v275 >> 60 != 15)
    {
      uint64_t v276 = *v274;
      sub_100003FF0(*v274, *(void *)(a2 + 1608));
      *(void *)(a1 + 1600) = v276;
      *(void *)(a1 + 1608) = v275;
      goto LABEL_169;
    }

    goto LABEL_167;
  }

  if (v275 >> 60 == 15)
  {
    sub_100004238(a1 + 1600);
LABEL_167:
    *(_OWORD *)(a1 + 1600) = *(_OWORD *)v274;
    goto LABEL_169;
  }

  uint64_t v277 = *v274;
  sub_100003FF0(*v274, *(void *)(a2 + 1608));
  uint64_t v278 = *(void *)(a1 + 1600);
  unint64_t v279 = *(void *)(a1 + 1608);
  *(void *)(a1 + 1600) = v277;
  *(void *)(a1 + 1608) = v275;
  sub_100004080(v278, v279);
LABEL_169:
  uint64_t v280 = *(void *)(a2 + 1616);
  *(_BYTE *)(a1 + 1624) = *(_BYTE *)(a2 + 1624);
  *(void *)(a1 + 1616) = v280;
  uint64_t v281 = *(void *)(a2 + 1632);
  *(_BYTE *)(a1 + 1640) = *(_BYTE *)(a2 + 1640);
  *(void *)(a1 + 1632) = v281;
  uint64_t v282 = *(void *)(a1 + 1648);
  uint64_t v283 = *(void *)(a2 + 1648);
  *(void *)(a1 + 1648) = v283;
  swift_bridgeObjectRetain(v283);
  swift_bridgeObjectRelease(v282);
  *(void *)(a1 + 1656) = *(void *)(a2 + 1656);
  uint64_t v284 = *(void *)(a2 + 1664);
  uint64_t v285 = *(void *)(a1 + 1664);
  *(void *)(a1 + 1664) = v284;
  swift_bridgeObjectRetain(v284);
  swift_bridgeObjectRelease(v285);
  *(void *)(a1 + 1672) = *(void *)(a2 + 1672);
  uint64_t v286 = *(void *)(a2 + 1680);
  uint64_t v287 = *(void *)(a1 + 1680);
  *(void *)(a1 + 1680) = v286;
  swift_bridgeObjectRetain(v286);
  swift_bridgeObjectRelease(v287);
  uint64_t v288 = *(void *)(a2 + 1688);
  *(_BYTE *)(a1 + 1696) = *(_BYTE *)(a2 + 1696);
  *(void *)(a1 + 1688) = v288;
  *(_BYTE *)(a1 + 1697) = *(_BYTE *)(a2 + 1697);
  *(_BYTE *)(a1 + 1698) = *(_BYTE *)(a2 + 1698);
  uint64_t v289 = *(void *)(a2 + 1704);
  *(_BYTE *)(a1 + 1712) = *(_BYTE *)(a2 + 1712);
  *(void *)(a1 + 1704) = v289;
  int v290 = (uint64_t *)(a2 + 1720);
  unint64_t v291 = *(void *)(a2 + 1728);
  if (*(void *)(a1 + 1728) >> 60 == 15LL)
  {
    if (v291 >> 60 != 15)
    {
      uint64_t v292 = *v290;
      sub_100003FF0(*v290, *(void *)(a2 + 1728));
      *(void *)(a1 + 1720) = v292;
      *(void *)(a1 + 1728) = v291;
      goto LABEL_176;
    }

    goto LABEL_174;
  }

  if (v291 >> 60 == 15)
  {
    sub_100004238(a1 + 1720);
LABEL_174:
    *(_OWORD *)(a1 + 1720) = *(_OWORD *)v290;
    goto LABEL_176;
  }

  uint64_t v293 = *v290;
  sub_100003FF0(*v290, *(void *)(a2 + 1728));
  uint64_t v294 = *(void *)(a1 + 1720);
  unint64_t v295 = *(void *)(a1 + 1728);
  *(void *)(a1 + 1720) = v293;
  *(void *)(a1 + 1728) = v291;
  sub_100004080(v294, v295);
LABEL_176:
  uint64_t v296 = *(void *)(a2 + 1736);
  *(_BYTE *)(a1 + 1744) = *(_BYTE *)(a2 + 1744);
  *(void *)(a1 + 1736) = v296;
  *(_BYTE *)(a1 + 1745) = *(_BYTE *)(a2 + 1745);
  *(void *)(a1 + 1752) = *(void *)(a2 + 1752);
  uint64_t v297 = *(void *)(a2 + 1760);
  uint64_t v298 = *(void *)(a1 + 1760);
  *(void *)(a1 + 1760) = v297;
  swift_bridgeObjectRetain(v297);
  swift_bridgeObjectRelease(v298);
  uint64_t v299 = *(void *)(a2 + 1768);
  *(_BYTE *)(a1 + 1776) = *(_BYTE *)(a2 + 1776);
  *(void *)(a1 + 1768) = v299;
  uint64_t v300 = *(void *)(a2 + 1784);
  *(_BYTE *)(a1 + 1792) = *(_BYTE *)(a2 + 1792);
  *(void *)(a1 + 1784) = v300;
  uint64_t v301 = (uint64_t *)(a2 + 1800);
  unint64_t v302 = *(void *)(a2 + 1808);
  if (*(void *)(a1 + 1808) >> 60 == 15LL)
  {
    if (v302 >> 60 != 15)
    {
      uint64_t v303 = *v301;
      sub_100003FF0(*v301, *(void *)(a2 + 1808));
      *(void *)(a1 + 1800) = v303;
      *(void *)(a1 + 1808) = v302;
      goto LABEL_183;
    }

    goto LABEL_181;
  }

  if (v302 >> 60 == 15)
  {
    sub_100004238(a1 + 1800);
LABEL_181:
    *(_OWORD *)(a1 + 1800) = *(_OWORD *)v301;
    goto LABEL_183;
  }

  uint64_t v304 = *v301;
  sub_100003FF0(*v301, *(void *)(a2 + 1808));
  uint64_t v305 = *(void *)(a1 + 1800);
  unint64_t v306 = *(void *)(a1 + 1808);
  *(void *)(a1 + 1800) = v304;
  *(void *)(a1 + 1808) = v302;
  sub_100004080(v305, v306);
LABEL_183:
  uint64_t v307 = (uint64_t *)(a2 + 1816);
  unint64_t v308 = *(void *)(a2 + 1824);
  if (*(void *)(a1 + 1824) >> 60 == 15LL)
  {
    if (v308 >> 60 != 15)
    {
      uint64_t v309 = *v307;
      sub_100003FF0(*v307, *(void *)(a2 + 1824));
      *(void *)(a1 + 1816) = v309;
      *(void *)(a1 + 1824) = v308;
      goto LABEL_190;
    }

    goto LABEL_188;
  }

  if (v308 >> 60 == 15)
  {
    sub_100004238(a1 + 1816);
LABEL_188:
    *(_OWORD *)(a1 + 1816) = *(_OWORD *)v307;
    goto LABEL_190;
  }

  uint64_t v310 = *v307;
  sub_100003FF0(*v307, *(void *)(a2 + 1824));
  uint64_t v311 = *(void *)(a1 + 1816);
  unint64_t v312 = *(void *)(a1 + 1824);
  *(void *)(a1 + 1816) = v310;
  *(void *)(a1 + 1824) = v308;
  sub_100004080(v311, v312);
LABEL_190:
  uint64_t v313 = *(void *)(a2 + 1832);
  *(_BYTE *)(a1 + 1840) = *(_BYTE *)(a2 + 1840);
  *(void *)(a1 + 1832) = v313;
  uint64_t v314 = (uint64_t *)(a2 + 1848);
  unint64_t v315 = *(void *)(a2 + 1856);
  if (*(void *)(a1 + 1856) >> 60 == 15LL)
  {
    if (v315 >> 60 != 15)
    {
      uint64_t v316 = *v314;
      sub_100003FF0(*v314, *(void *)(a2 + 1856));
      *(void *)(a1 + 1848) = v316;
      *(void *)(a1 + 1856) = v315;
      goto LABEL_197;
    }

    goto LABEL_195;
  }

  if (v315 >> 60 == 15)
  {
    sub_100004238(a1 + 1848);
LABEL_195:
    *(_OWORD *)(a1 + 1848) = *(_OWORD *)v314;
    goto LABEL_197;
  }

  uint64_t v317 = *v314;
  sub_100003FF0(*v314, *(void *)(a2 + 1856));
  uint64_t v318 = *(void *)(a1 + 1848);
  unint64_t v319 = *(void *)(a1 + 1856);
  *(void *)(a1 + 1848) = v317;
  *(void *)(a1 + 1856) = v315;
  sub_100004080(v318, v319);
LABEL_197:
  uint64_t v320 = (uint64_t *)(a2 + 1864);
  unint64_t v321 = *(void *)(a2 + 1872);
  if (*(void *)(a1 + 1872) >> 60 == 15LL)
  {
    if (v321 >> 60 != 15)
    {
      uint64_t v322 = *v320;
      sub_100003FF0(*v320, *(void *)(a2 + 1872));
      *(void *)(a1 + 1864) = v322;
      *(void *)(a1 + 1872) = v321;
      goto LABEL_204;
    }

    goto LABEL_202;
  }

  if (v321 >> 60 == 15)
  {
    sub_100004238(a1 + 1864);
LABEL_202:
    *(_OWORD *)(a1 + 1864) = *(_OWORD *)v320;
    goto LABEL_204;
  }

  uint64_t v323 = *v320;
  sub_100003FF0(*v320, *(void *)(a2 + 1872));
  uint64_t v324 = *(void *)(a1 + 1864);
  unint64_t v325 = *(void *)(a1 + 1872);
  *(void *)(a1 + 1864) = v323;
  *(void *)(a1 + 1872) = v321;
  sub_100004080(v324, v325);
LABEL_204:
  int v326 = (uint64_t *)(a2 + 1880);
  unint64_t v327 = *(void *)(a2 + 1888);
  if (*(void *)(a1 + 1888) >> 60 == 15LL)
  {
    if (v327 >> 60 != 15)
    {
      uint64_t v328 = *v326;
      sub_100003FF0(*v326, *(void *)(a2 + 1888));
      *(void *)(a1 + 1880) = v328;
      *(void *)(a1 + 1888) = v327;
      goto LABEL_211;
    }

    goto LABEL_209;
  }

  if (v327 >> 60 == 15)
  {
    sub_100004238(a1 + 1880);
LABEL_209:
    *(_OWORD *)(a1 + 1880) = *(_OWORD *)v326;
    goto LABEL_211;
  }

  uint64_t v329 = *v326;
  sub_100003FF0(*v326, *(void *)(a2 + 1888));
  uint64_t v330 = *(void *)(a1 + 1880);
  unint64_t v331 = *(void *)(a1 + 1888);
  *(void *)(a1 + 1880) = v329;
  *(void *)(a1 + 1888) = v327;
  sub_100004080(v330, v331);
LABEL_211:
  uint64_t v332 = *(void *)(a2 + 1896);
  *(_BYTE *)(a1 + 1904) = *(_BYTE *)(a2 + 1904);
  *(void *)(a1 + 1896) = v332;
  uint64_t v333 = (uint64_t *)(a2 + 1912);
  unint64_t v334 = *(void *)(a2 + 1920);
  if (*(void *)(a1 + 1920) >> 60 == 15LL)
  {
    if (v334 >> 60 != 15)
    {
      uint64_t v335 = *v333;
      sub_100003FF0(*v333, *(void *)(a2 + 1920));
      *(void *)(a1 + 1912) = v335;
      *(void *)(a1 + 1920) = v334;
      goto LABEL_218;
    }

    goto LABEL_216;
  }

  if (v334 >> 60 == 15)
  {
    sub_100004238(a1 + 1912);
LABEL_216:
    *(_OWORD *)(a1 + 1912) = *(_OWORD *)v333;
    goto LABEL_218;
  }

  uint64_t v336 = *v333;
  sub_100003FF0(*v333, *(void *)(a2 + 1920));
  uint64_t v337 = *(void *)(a1 + 1912);
  unint64_t v338 = *(void *)(a1 + 1920);
  *(void *)(a1 + 1912) = v336;
  *(void *)(a1 + 1920) = v334;
  sub_100004080(v337, v338);
LABEL_218:
  uint64_t v339 = *(void *)(a2 + 1928);
  *(_BYTE *)(a1 + 1936) = *(_BYTE *)(a2 + 1936);
  *(void *)(a1 + 1928) = v339;
  int v340 = (uint64_t *)(a2 + 1944);
  unint64_t v341 = *(void *)(a2 + 1952);
  if (*(void *)(a1 + 1952) >> 60 == 15LL)
  {
    if (v341 >> 60 != 15)
    {
      uint64_t v342 = *v340;
      sub_100003FF0(*v340, *(void *)(a2 + 1952));
      *(void *)(a1 + 1944) = v342;
      *(void *)(a1 + 1952) = v341;
      goto LABEL_225;
    }

    goto LABEL_223;
  }

  if (v341 >> 60 == 15)
  {
    sub_100004238(a1 + 1944);
LABEL_223:
    *(_OWORD *)(a1 + 1944) = *(_OWORD *)v340;
    goto LABEL_225;
  }

  uint64_t v343 = *v340;
  sub_100003FF0(*v340, *(void *)(a2 + 1952));
  uint64_t v344 = *(void *)(a1 + 1944);
  unint64_t v345 = *(void *)(a1 + 1952);
  *(void *)(a1 + 1944) = v343;
  *(void *)(a1 + 1952) = v341;
  sub_100004080(v344, v345);
LABEL_225:
  *(void *)(a1 + 1960) = *(void *)(a2 + 1960);
  uint64_t v346 = *(void *)(a2 + 1968);
  uint64_t v347 = *(void *)(a1 + 1968);
  *(void *)(a1 + 1968) = v346;
  swift_bridgeObjectRetain(v346);
  swift_bridgeObjectRelease(v347);
  uint64_t v348 = *(void *)(a2 + 1976);
  *(_BYTE *)(a1 + 1984) = *(_BYTE *)(a2 + 1984);
  *(void *)(a1 + 1976) = v348;
  uint64_t v349 = *(void *)(a2 + 1992);
  *(_BYTE *)(a1 + 2000) = *(_BYTE *)(a2 + 2000);
  *(void *)(a1 + 1992) = v349;
  uint64_t v350 = *(void *)(a2 + 2008);
  *(_BYTE *)(a1 + 2016) = *(_BYTE *)(a2 + 2016);
  *(void *)(a1 + 2008) = v350;
  uint64_t v351 = *(void *)(a2 + 2024);
  *(_BYTE *)(a1 + 2032) = *(_BYTE *)(a2 + 2032);
  *(void *)(a1 + 2024) = v351;
  uint64_t v352 = *(void *)(a1 + 2040);
  uint64_t v353 = *(void *)(a2 + 2040);
  *(void *)(a1 + 2040) = v353;
  swift_bridgeObjectRetain(v353);
  swift_bridgeObjectRelease(v352);
  uint64_t v354 = *(void *)(a1 + 2048);
  uint64_t v355 = *(void *)(a2 + 2048);
  *(void *)(a1 + 2048) = v355;
  swift_bridgeObjectRetain(v355);
  swift_bridgeObjectRelease(v354);
  int v356 = (uint64_t *)(a2 + 2056);
  unint64_t v357 = *(void *)(a2 + 2064);
  if (*(void *)(a1 + 2064) >> 60 != 15LL)
  {
    if (v357 >> 60 != 15)
    {
      uint64_t v359 = *v356;
      sub_100003FF0(*v356, *(void *)(a2 + 2064));
      uint64_t v360 = *(void *)(a1 + 2056);
      unint64_t v361 = *(void *)(a1 + 2064);
      *(void *)(a1 + 2056) = v359;
      *(void *)(a1 + 2064) = v357;
      sub_100004080(v360, v361);
      goto LABEL_232;
    }

    sub_100004238(a1 + 2056);
    goto LABEL_230;
  }

  if (v357 >> 60 == 15)
  {
LABEL_230:
    *(_OWORD *)(a1 + 2056) = *(_OWORD *)v356;
    goto LABEL_232;
  }

  uint64_t v358 = *v356;
  sub_100003FF0(*v356, *(void *)(a2 + 2064));
  *(void *)(a1 + 2056) = v358;
  *(void *)(a1 + 2064) = v357;
LABEL_232:
  uint64_t v362 = *(void *)(a2 + 2072);
  *(_BYTE *)(a1 + 2080) = *(_BYTE *)(a2 + 2080);
  *(void *)(a1 + 2072) = v362;
  uint64_t v363 = *(void *)(a1 + 2088);
  uint64_t v364 = *(void *)(a2 + 2088);
  *(void *)(a1 + 2088) = v364;
  swift_bridgeObjectRetain(v364);
  swift_bridgeObjectRelease(v363);
  uint64_t v365 = *(void *)(a2 + 2096);
  *(_BYTE *)(a1 + 2104) = *(_BYTE *)(a2 + 2104);
  *(void *)(a1 + 2096) = v365;
  uint64_t v366 = *(void *)(a2 + 2112);
  *(_BYTE *)(a1 + 2120) = *(_BYTE *)(a2 + 2120);
  *(void *)(a1 + 2112) = v366;
  *(_BYTE *)(a1 + 2121) = *(_BYTE *)(a2 + 2121);
  *(_BYTE *)(a1 + 2122) = *(_BYTE *)(a2 + 2122);
  *(void *)(a1 + 2128) = *(void *)(a2 + 2128);
  uint64_t v367 = *(void *)(a2 + 2136);
  uint64_t v368 = *(void *)(a1 + 2136);
  *(void *)(a1 + 2136) = v367;
  swift_bridgeObjectRetain(v367);
  swift_bridgeObjectRelease(v368);
  *(_BYTE *)(a1 + 2144) = *(_BYTE *)(a2 + 2144);
  uint64_t v369 = *(void *)(a2 + 2152);
  *(_BYTE *)(a1 + 2160) = *(_BYTE *)(a2 + 2160);
  *(void *)(a1 + 2152) = v369;
  uint64_t v370 = *(void *)(a2 + 2168);
  *(_BYTE *)(a1 + 2176) = *(_BYTE *)(a2 + 2176);
  *(void *)(a1 + 2168) = v370;
  *(_BYTE *)(a1 + 2177) = *(_BYTE *)(a2 + 2177);
  *(_BYTE *)(a1 + 2178) = *(_BYTE *)(a2 + 2178);
  return a1;
}

void *sub_1000532F8(void *a1)
{
  return a1;
}

void *initializeWithTake for IDSMadridProtocolPayload(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x883uLL);
}

uint64_t assignWithTake for IDSMadridProtocolPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  uint64_t v5 = (_OWORD *)(a1 + 40);
  unint64_t v6 = (_OWORD *)(a2 + 40);
  unint64_t v7 = *(void *)(a1 + 48);
  if (v7 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v8 = *(void *)(a2 + 48);
  if (v8 >> 60 == 15)
  {
    sub_100004238(a1 + 40);
LABEL_4:
    *uint64_t v5 = *v6;
    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = *(void *)v6;
  *(void *)(a1 + 48) = v8;
  sub_100004080(v9, v7);
LABEL_6:
  uint64_t v10 = (_OWORD *)(a2 + 56);
  unint64_t v11 = *(void *)(a1 + 64);
  if (v11 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)(a1 + 56) = *v10;
    goto LABEL_11;
  }

  unint64_t v12 = *(void *)(a2 + 64);
  if (v12 >> 60 == 15)
  {
    sub_100004238(a1 + 56);
    goto LABEL_9;
  }

  uint64_t v13 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = *(void *)v10;
  *(void *)(a1 + 64) = v12;
  sub_100004080(v13, v11);
LABEL_11:
  unint64_t v14 = (_OWORD *)(a2 + 72);
  unint64_t v15 = *(void *)(a1 + 80);
  if (v15 >> 60 == 15)
  {
LABEL_14:
    *(_OWORD *)(a1 + 72) = *v14;
    goto LABEL_16;
  }

  unint64_t v16 = *(void *)(a2 + 80);
  if (v16 >> 60 == 15)
  {
    sub_100004238(a1 + 72);
    goto LABEL_14;
  }

  uint64_t v17 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = *(void *)v14;
  *(void *)(a1 + 80) = v16;
  sub_100004080(v17, v15);
LABEL_16:
  unint64_t v18 = (_OWORD *)(a2 + 88);
  unint64_t v19 = *(void *)(a1 + 96);
  if (v19 >> 60 == 15)
  {
LABEL_19:
    *(_OWORD *)(a1 + 88) = *v18;
    goto LABEL_21;
  }

  unint64_t v20 = *(void *)(a2 + 96);
  if (v20 >> 60 == 15)
  {
    sub_100004238(a1 + 88);
    goto LABEL_19;
  }

  uint64_t v21 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = *(void *)v18;
  *(void *)(a1 + 96) = v20;
  sub_100004080(v21, v19);
LABEL_21:
  uint64_t v22 = (_OWORD *)(a2 + 104);
  unint64_t v23 = *(void *)(a1 + 112);
  if (v23 >> 60 == 15)
  {
LABEL_24:
    *(_OWORD *)(a1 + 104) = *v22;
    goto LABEL_26;
  }

  unint64_t v24 = *(void *)(a2 + 112);
  if (v24 >> 60 == 15)
  {
    sub_100004238(a1 + 104);
    goto LABEL_24;
  }

  uint64_t v25 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = *(void *)v22;
  *(void *)(a1 + 112) = v24;
  sub_100004080(v25, v23);
LABEL_26:
  uint64_t v26 = *(void *)(a2 + 128);
  uint64_t v27 = *(void *)(a1 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v26;
  swift_bridgeObjectRelease(v27);
  uint64_t v28 = (_OWORD *)(a2 + 136);
  unint64_t v29 = *(void *)(a1 + 144);
  if (v29 >> 60 == 15)
  {
LABEL_29:
    *(_OWORD *)(a1 + 136) = *v28;
    goto LABEL_31;
  }

  unint64_t v30 = *(void *)(a2 + 144);
  if (v30 >> 60 == 15)
  {
    sub_100004238(a1 + 136);
    goto LABEL_29;
  }

  uint64_t v31 = *(void *)(a1 + 136);
  *(void *)(a1 + 136) = *(void *)v28;
  *(void *)(a1 + 144) = v30;
  sub_100004080(v31, v29);
LABEL_31:
  uint64_t v32 = *(void *)(a2 + 160);
  uint64_t v33 = *(void *)(a1 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v32;
  swift_bridgeObjectRelease(v33);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(_WORD *)(a1 + 184) = *(_WORD *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  uint64_t v34 = (_OWORD *)(a2 + 208);
  unint64_t v35 = *(void *)(a1 + 216);
  if (v35 >> 60 == 15)
  {
LABEL_34:
    *(_OWORD *)(a1 + 208) = *v34;
    goto LABEL_36;
  }

  unint64_t v36 = *(void *)(a2 + 216);
  if (v36 >> 60 == 15)
  {
    sub_100004238(a1 + 208);
    goto LABEL_34;
  }

  uint64_t v37 = *(void *)(a1 + 208);
  *(void *)(a1 + 208) = *(void *)v34;
  *(void *)(a1 + 216) = v36;
  sub_100004080(v37, v35);
LABEL_36:
  *(_WORD *)(a1 + 224) = *(_WORD *)(a2 + 224);
  uint64_t v38 = (_OWORD *)(a2 + 232);
  unint64_t v39 = *(void *)(a1 + 240);
  if (v39 >> 60 == 15)
  {
LABEL_39:
    *(_OWORD *)(a1 + 232) = *v38;
    goto LABEL_41;
  }

  unint64_t v40 = *(void *)(a2 + 240);
  if (v40 >> 60 == 15)
  {
    sub_100004238(a1 + 232);
    goto LABEL_39;
  }

  uint64_t v41 = *(void *)(a1 + 232);
  *(void *)(a1 + 232) = *(void *)v38;
  *(void *)(a1 + 240) = v40;
  sub_100004080(v41, v39);
LABEL_41:
  uint64_t v42 = (_OWORD *)(a2 + 248);
  unint64_t v43 = *(void *)(a1 + 256);
  if (v43 >> 60 == 15)
  {
LABEL_44:
    *(_OWORD *)(a1 + 248) = *v42;
    goto LABEL_46;
  }

  unint64_t v44 = *(void *)(a2 + 256);
  if (v44 >> 60 == 15)
  {
    sub_100004238(a1 + 248);
    goto LABEL_44;
  }

  uint64_t v45 = *(void *)(a1 + 248);
  *(void *)(a1 + 248) = *(void *)v42;
  *(void *)(a1 + 256) = v44;
  sub_100004080(v45, v43);
LABEL_46:
  uint64_t v46 = *(void *)(a2 + 272);
  uint64_t v47 = *(void *)(a1 + 272);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = v46;
  swift_bridgeObjectRelease(v47);
  uint64_t v48 = *(void *)(a2 + 288);
  uint64_t v49 = *(void *)(a1 + 288);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(void *)(a1 + 288) = v48;
  swift_bridgeObjectRelease(v49);
  uint64_t v50 = *(void *)(a2 + 304);
  uint64_t v51 = *(void *)(a1 + 304);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  *(void *)(a1 + 304) = v50;
  swift_bridgeObjectRelease(v51);
  uint64_t v52 = (_OWORD *)(a2 + 312);
  unint64_t v53 = *(void *)(a1 + 320);
  if (v53 >> 60 == 15)
  {
LABEL_49:
    *(_OWORD *)(a1 + 312) = *v52;
    goto LABEL_51;
  }

  unint64_t v54 = *(void *)(a2 + 320);
  if (v54 >> 60 == 15)
  {
    sub_100004238(a1 + 312);
    goto LABEL_49;
  }

  uint64_t v55 = *(void *)(a1 + 312);
  *(void *)(a1 + 312) = *(void *)v52;
  *(void *)(a1 + 320) = v54;
  sub_100004080(v55, v53);
LABEL_51:
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  *(_BYTE *)(a1 + 336) = *(_BYTE *)(a2 + 336);
  uint64_t v56 = *(void *)(a2 + 352);
  uint64_t v57 = *(void *)(a1 + 352);
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  *(void *)(a1 + 352) = v56;
  swift_bridgeObjectRelease(v57);
  uint64_t v58 = *(void *)(a2 + 368);
  uint64_t v59 = *(void *)(a1 + 368);
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  *(void *)(a1 + 368) = v58;
  swift_bridgeObjectRelease(v59);
  uint64_t v60 = *(void *)(a2 + 384);
  uint64_t v61 = *(void *)(a1 + 384);
  *(void *)(a1 + 376) = *(void *)(a2 + 376);
  *(void *)(a1 + 384) = v60;
  swift_bridgeObjectRelease(v61);
  uint64_t v62 = *(void *)(a1 + 392);
  *(void *)(a1 + 392) = *(void *)(a2 + 392);
  swift_bridgeObjectRelease(v62);
  uint64_t v63 = *(void *)(a1 + 400);
  *(void *)(a1 + 400) = *(void *)(a2 + 400);
  swift_bridgeObjectRelease(v63);
  uint64_t v64 = *(void *)(a2 + 416);
  uint64_t v65 = *(void *)(a1 + 416);
  *(void *)(a1 + 408) = *(void *)(a2 + 408);
  *(void *)(a1 + 416) = v64;
  swift_bridgeObjectRelease(v65);
  uint64_t v66 = *(void *)(a2 + 432);
  uint64_t v67 = *(void *)(a1 + 432);
  *(void *)(a1 + 424) = *(void *)(a2 + 424);
  *(void *)(a1 + 432) = v66;
  swift_bridgeObjectRelease(v67);
  *(void *)(a1 + 440) = *(void *)(a2 + 440);
  *(_BYTE *)(a1 + 448) = *(_BYTE *)(a2 + 448);
  *(void *)(a1 + 456) = *(void *)(a2 + 456);
  *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
  uint64_t v68 = *(void *)(a2 + 480);
  uint64_t v69 = *(void *)(a1 + 480);
  *(void *)(a1 + 472) = *(void *)(a2 + 472);
  *(void *)(a1 + 480) = v68;
  swift_bridgeObjectRelease(v69);
  uint64_t v70 = (_OWORD *)(a2 + 488);
  unint64_t v71 = *(void *)(a1 + 496);
  if (v71 >> 60 == 15)
  {
LABEL_54:
    *(_OWORD *)(a1 + 488) = *v70;
    goto LABEL_56;
  }

  unint64_t v72 = *(void *)(a2 + 496);
  if (v72 >> 60 == 15)
  {
    sub_100004238(a1 + 488);
    goto LABEL_54;
  }

  uint64_t v73 = *(void *)(a1 + 488);
  *(void *)(a1 + 488) = *(void *)v70;
  *(void *)(a1 + 496) = v72;
  sub_100004080(v73, v71);
LABEL_56:
  unint64_t v74 = (_OWORD *)(a2 + 504);
  unint64_t v75 = *(void *)(a1 + 512);
  if (v75 >> 60 == 15)
  {
LABEL_59:
    *(_OWORD *)(a1 + 504) = *v74;
    goto LABEL_61;
  }

  unint64_t v76 = *(void *)(a2 + 512);
  if (v76 >> 60 == 15)
  {
    sub_100004238(a1 + 504);
    goto LABEL_59;
  }

  uint64_t v77 = *(void *)(a1 + 504);
  *(void *)(a1 + 504) = *(void *)v74;
  *(void *)(a1 + 512) = v76;
  sub_100004080(v77, v75);
LABEL_61:
  *(void *)(a1 + 520) = *(void *)(a2 + 520);
  *(_BYTE *)(a1 + 528) = *(_BYTE *)(a2 + 528);
  unint64_t v78 = (_OWORD *)(a2 + 536);
  unint64_t v79 = *(void *)(a1 + 544);
  if (v79 >> 60 == 15)
  {
LABEL_64:
    *(_OWORD *)(a1 + 536) = *v78;
    goto LABEL_66;
  }

  unint64_t v80 = *(void *)(a2 + 544);
  if (v80 >> 60 == 15)
  {
    sub_100004238(a1 + 536);
    goto LABEL_64;
  }

  uint64_t v81 = *(void *)(a1 + 536);
  *(void *)(a1 + 536) = *(void *)v78;
  *(void *)(a1 + 544) = v80;
  sub_100004080(v81, v79);
LABEL_66:
  *(void *)(a1 + 552) = *(void *)(a2 + 552);
  uint64_t v82 = *(void *)(a1 + 560);
  *(void *)(a1 + 560) = *(void *)(a2 + 560);
  swift_bridgeObjectRelease(v82);
  *(void *)(a1 + 568) = *(void *)(a2 + 568);
  uint64_t v83 = *(void *)(a1 + 576);
  *(void *)(a1 + 576) = *(void *)(a2 + 576);
  swift_bridgeObjectRelease(v83);
  *(void *)(a1 + 584) = *(void *)(a2 + 584);
  uint64_t v84 = *(void *)(a1 + 592);
  *(void *)(a1 + 592) = *(void *)(a2 + 592);
  swift_bridgeObjectRelease(v84);
  *(void *)(a1 + 600) = *(void *)(a2 + 600);
  *(_BYTE *)(a1 + 608) = *(_BYTE *)(a2 + 608);
  *(void *)(a1 + 616) = *(void *)(a2 + 616);
  *(_BYTE *)(a1 + 624) = *(_BYTE *)(a2 + 624);
  *(void *)(a1 + 632) = *(void *)(a2 + 632);
  *(_BYTE *)(a1 + 640) = *(_BYTE *)(a2 + 640);
  *(_BYTE *)(a1 + 656) = *(_BYTE *)(a2 + 656);
  uint64_t v85 = (_OWORD *)(a2 + 664);
  *(void *)(a1 + 648) = *(void *)(a2 + 648);
  unint64_t v86 = *(void *)(a1 + 672);
  if (v86 >> 60 == 15)
  {
LABEL_69:
    *(_OWORD *)(a1 + 664) = *v85;
    goto LABEL_71;
  }

  unint64_t v87 = *(void *)(a2 + 672);
  if (v87 >> 60 == 15)
  {
    sub_100004238(a1 + 664);
    goto LABEL_69;
  }

  uint64_t v88 = *(void *)(a1 + 664);
  *(void *)(a1 + 664) = *(void *)v85;
  *(void *)(a1 + 672) = v87;
  sub_100004080(v88, v86);
LABEL_71:
  *(void *)(a1 + 680) = *(void *)(a2 + 680);
  uint64_t v89 = *(void *)(a1 + 688);
  *(void *)(a1 + 688) = *(void *)(a2 + 688);
  swift_bridgeObjectRelease(v89);
  *(void *)(a1 + 696) = *(void *)(a2 + 696);
  *(_BYTE *)(a1 + 704) = *(_BYTE *)(a2 + 704);
  *(void *)(a1 + 712) = *(void *)(a2 + 712);
  *(_BYTE *)(a1 + 720) = *(_BYTE *)(a2 + 720);
  *(void *)(a1 + 728) = *(void *)(a2 + 728);
  uint64_t v90 = *(void *)(a1 + 736);
  *(void *)(a1 + 736) = *(void *)(a2 + 736);
  swift_bridgeObjectRelease(v90);
  *(void *)(a1 + 744) = *(void *)(a2 + 744);
  *(_BYTE *)(a1 + 752) = *(_BYTE *)(a2 + 752);
  *(void *)(a1 + 760) = *(void *)(a2 + 760);
  uint64_t v91 = *(void *)(a1 + 768);
  *(void *)(a1 + 768) = *(void *)(a2 + 768);
  swift_bridgeObjectRelease(v91);
  *(void *)(a1 + 776) = *(void *)(a2 + 776);
  *(_BYTE *)(a1 + 784) = *(_BYTE *)(a2 + 784);
  *(void *)(a1 + 792) = *(void *)(a2 + 792);
  *(_BYTE *)(a1 + 800) = *(_BYTE *)(a2 + 800);
  *(void *)(a1 + 808) = *(void *)(a2 + 808);
  *(_BYTE *)(a1 + 816) = *(_BYTE *)(a2 + 816);
  uint64_t v92 = *(void *)(a1 + 824);
  *(void *)(a1 + 824) = *(void *)(a2 + 824);
  swift_bridgeObjectRelease(v92);
  uint64_t v93 = *(void *)(a1 + 832);
  *(void *)(a1 + 832) = *(void *)(a2 + 832);
  swift_bridgeObjectRelease(v93);
  *(void *)(a1 + 840) = *(void *)(a2 + 840);
  *(_BYTE *)(a1 + 848) = *(_BYTE *)(a2 + 848);
  *(void *)(a1 + 856) = *(void *)(a2 + 856);
  *(_BYTE *)(a1 + 864) = *(_BYTE *)(a2 + 864);
  *(void *)(a1 + 872) = *(void *)(a2 + 872);
  *(_BYTE *)(a1 + 880) = *(_BYTE *)(a2 + 880);
  *(_DWORD *)(a1 + 881) = *(_DWORD *)(a2 + 881);
  *(void *)(a1 + 888) = *(void *)(a2 + 888);
  uint64_t v94 = *(void *)(a1 + 896);
  *(void *)(a1 + 896) = *(void *)(a2 + 896);
  swift_bridgeObjectRelease(v94);
  *(void *)(a1 + 904) = *(void *)(a2 + 904);
  uint64_t v95 = *(void *)(a1 + 912);
  *(void *)(a1 + 912) = *(void *)(a2 + 912);
  swift_bridgeObjectRelease(v95);
  uint64_t v96 = (_OWORD *)(a2 + 920);
  unint64_t v97 = *(void *)(a1 + 928);
  if (v97 >> 60 == 15)
  {
LABEL_74:
    *(_OWORD *)(a1 + 920) = *v96;
    goto LABEL_76;
  }

  unint64_t v98 = *(void *)(a2 + 928);
  if (v98 >> 60 == 15)
  {
    sub_100004238(a1 + 920);
    goto LABEL_74;
  }

  uint64_t v99 = *(void *)(a1 + 920);
  *(void *)(a1 + 920) = *(void *)v96;
  *(void *)(a1 + 928) = v98;
  sub_100004080(v99, v97);
LABEL_76:
  *(void *)(a1 + 936) = *(void *)(a2 + 936);
  uint64_t v100 = *(void *)(a1 + 944);
  *(void *)(a1 + 944) = *(void *)(a2 + 944);
  swift_bridgeObjectRelease(v100);
  *(void *)(a1 + 952) = *(void *)(a2 + 952);
  uint64_t v101 = *(void *)(a1 + 960);
  *(void *)(a1 + 960) = *(void *)(a2 + 960);
  swift_bridgeObjectRelease(v101);
  *(void *)(a1 + 968) = *(void *)(a2 + 968);
  uint64_t v102 = *(void *)(a1 + 976);
  *(void *)(a1 + 976) = *(void *)(a2 + 976);
  swift_bridgeObjectRelease(v102);
  *(void *)(a1 + 984) = *(void *)(a2 + 984);
  uint64_t v103 = *(void *)(a1 + 992);
  *(void *)(a1 + 992) = *(void *)(a2 + 992);
  swift_bridgeObjectRelease(v103);
  *(void *)(a1 + 1000) = *(void *)(a2 + 1000);
  uint64_t v104 = *(void *)(a1 + 1008);
  *(void *)(a1 + 1008) = *(void *)(a2 + 1008);
  swift_bridgeObjectRelease(v104);
  *(void *)(a1 + 1016) = *(void *)(a2 + 1016);
  *(_BYTE *)(a1 + 1024) = *(_BYTE *)(a2 + 1024);
  *(void *)(a1 + 1032) = *(void *)(a2 + 1032);
  uint64_t v105 = *(void *)(a1 + 1040);
  *(void *)(a1 + 1040) = *(void *)(a2 + 1040);
  swift_bridgeObjectRelease(v105);
  *(void *)(a1 + 1048) = *(void *)(a2 + 1048);
  *(_BYTE *)(a1 + 1056) = *(_BYTE *)(a2 + 1056);
  *(void *)(a1 + 1064) = *(void *)(a2 + 1064);
  uint64_t v106 = *(void *)(a1 + 1072);
  *(void *)(a1 + 1072) = *(void *)(a2 + 1072);
  swift_bridgeObjectRelease(v106);
  *(void *)(a1 + 1080) = *(void *)(a2 + 1080);
  *(_WORD *)(a1 + 1088) = *(_WORD *)(a2 + 1088);
  *(void *)(a1 + 1096) = *(void *)(a2 + 1096);
  uint64_t v107 = *(void *)(a1 + 1104);
  *(void *)(a1 + 1104) = *(void *)(a2 + 1104);
  swift_bridgeObjectRelease(v107);
  *(void *)(a1 + 1112) = *(void *)(a2 + 1112);
  *(_BYTE *)(a1 + 1120) = *(_BYTE *)(a2 + 1120);
  *(void *)(a1 + 1128) = *(void *)(a2 + 1128);
  *(_BYTE *)(a1 + 1136) = *(_BYTE *)(a2 + 1136);
  *(void *)(a1 + 1144) = *(void *)(a2 + 1144);
  uint64_t v108 = *(void *)(a1 + 1152);
  *(void *)(a1 + 1152) = *(void *)(a2 + 1152);
  swift_bridgeObjectRelease(v108);
  uint64_t v109 = *(void *)(a1 + 1168);
  if (v109 == 1)
  {
LABEL_79:
    __int128 v111 = *(_OWORD *)(a2 + 1208);
    *(_OWORD *)(a1 + 1192) = *(_OWORD *)(a2 + 1192);
    *(_OWORD *)(a1 + 1208) = v111;
    __int128 v112 = *(_OWORD *)(a2 + 1240);
    *(_OWORD *)(a1 + 1224) = *(_OWORD *)(a2 + 1224);
    *(_OWORD *)(a1 + 1240) = v112;
    __int128 v113 = *(_OWORD *)(a2 + 1176);
    *(_OWORD *)(a1 + 1160) = *(_OWORD *)(a2 + 1160);
    *(_OWORD *)(a1 + 1176) = v113;
    goto LABEL_81;
  }

  uint64_t v110 = *(void *)(a2 + 1168);
  if (v110 == 1)
  {
    sub_1000532F8((void *)(a1 + 1160));
    goto LABEL_79;
  }

  *(void *)(a1 + 1160) = *(void *)(a2 + 1160);
  *(void *)(a1 + 1168) = v110;
  swift_bridgeObjectRelease(v109);
  *(void *)(a1 + 1176) = *(void *)(a2 + 1176);
  uint64_t v114 = *(void *)(a1 + 1184);
  *(void *)(a1 + 1184) = *(void *)(a2 + 1184);
  swift_bridgeObjectRelease(v114);
  *(void *)(a1 + 1192) = *(void *)(a2 + 1192);
  uint64_t v115 = *(void *)(a1 + 1200);
  *(void *)(a1 + 1200) = *(void *)(a2 + 1200);
  swift_bridgeObjectRelease(v115);
  *(void *)(a1 + 1208) = *(void *)(a2 + 1208);
  uint64_t v116 = *(void *)(a1 + 1216);
  *(void *)(a1 + 1216) = *(void *)(a2 + 1216);
  swift_bridgeObjectRelease(v116);
  *(void *)(a1 + 1224) = *(void *)(a2 + 1224);
  uint64_t v117 = *(void *)(a1 + 1232);
  *(void *)(a1 + 1232) = *(void *)(a2 + 1232);
  swift_bridgeObjectRelease(v117);
  *(void *)(a1 + 1240) = *(void *)(a2 + 1240);
  uint64_t v118 = *(void *)(a1 + 1248);
  *(void *)(a1 + 1248) = *(void *)(a2 + 1248);
  swift_bridgeObjectRelease(v118);
LABEL_81:
  uint64_t v119 = (_OWORD *)(a2 + 1256);
  unint64_t v120 = *(void *)(a1 + 1264);
  if (v120 >> 60 == 15)
  {
LABEL_84:
    *(_OWORD *)(a1 + 1256) = *v119;
    goto LABEL_86;
  }

  unint64_t v121 = *(void *)(a2 + 1264);
  if (v121 >> 60 == 15)
  {
    sub_100004238(a1 + 1256);
    goto LABEL_84;
  }

  uint64_t v122 = *(void *)(a1 + 1256);
  *(void *)(a1 + 1256) = *(void *)v119;
  *(void *)(a1 + 1264) = v121;
  sub_100004080(v122, v120);
LABEL_86:
  *(void *)(a1 + 1272) = *(void *)(a2 + 1272);
  uint64_t v123 = *(void *)(a1 + 1280);
  *(void *)(a1 + 1280) = *(void *)(a2 + 1280);
  swift_bridgeObjectRelease(v123);
  uint64_t v124 = (_OWORD *)(a2 + 1288);
  unint64_t v125 = *(void *)(a1 + 1296);
  if (v125 >> 60 == 15)
  {
LABEL_89:
    *(_OWORD *)(a1 + 1288) = *v124;
    goto LABEL_91;
  }

  unint64_t v126 = *(void *)(a2 + 1296);
  if (v126 >> 60 == 15)
  {
    sub_100004238(a1 + 1288);
    goto LABEL_89;
  }

  uint64_t v127 = *(void *)(a1 + 1288);
  *(void *)(a1 + 1288) = *(void *)v124;
  *(void *)(a1 + 1296) = v126;
  sub_100004080(v127, v125);
LABEL_91:
  *(void *)(a1 + 1304) = *(void *)(a2 + 1304);
  *(_BYTE *)(a1 + 1312) = *(_BYTE *)(a2 + 1312);
  *(void *)(a1 + 1320) = *(void *)(a2 + 1320);
  uint64_t v128 = *(void *)(a1 + 1328);
  *(void *)(a1 + 1328) = *(void *)(a2 + 1328);
  swift_bridgeObjectRelease(v128);
  *(_BYTE *)(a1 + 1336) = *(_BYTE *)(a2 + 1336);
  *(_WORD *)(a1 + 1337) = *(_WORD *)(a2 + 1337);
  *(void *)(a1 + 1344) = *(void *)(a2 + 1344);
  *(_BYTE *)(a1 + 1352) = *(_BYTE *)(a2 + 1352);
  *(void *)(a1 + 1360) = *(void *)(a2 + 1360);
  uint64_t v129 = *(void *)(a1 + 1368);
  *(void *)(a1 + 1368) = *(void *)(a2 + 1368);
  swift_bridgeObjectRelease(v129);
  uint64_t v130 = (_OWORD *)(a2 + 1376);
  unint64_t v131 = *(void *)(a1 + 1384);
  if (v131 >> 60 == 15)
  {
LABEL_94:
    *(_OWORD *)(a1 + 1376) = *v130;
    goto LABEL_96;
  }

  unint64_t v132 = *(void *)(a2 + 1384);
  if (v132 >> 60 == 15)
  {
    sub_100004238(a1 + 1376);
    goto LABEL_94;
  }

  uint64_t v133 = *(void *)(a1 + 1376);
  *(void *)(a1 + 1376) = *(void *)v130;
  *(void *)(a1 + 1384) = v132;
  sub_100004080(v133, v131);
LABEL_96:
  uint64_t v134 = (_OWORD *)(a2 + 1392);
  unint64_t v135 = *(void *)(a1 + 1400);
  if (v135 >> 60 == 15)
  {
LABEL_99:
    *(_OWORD *)(a1 + 1392) = *v134;
    goto LABEL_101;
  }

  unint64_t v136 = *(void *)(a2 + 1400);
  if (v136 >> 60 == 15)
  {
    sub_100004238(a1 + 1392);
    goto LABEL_99;
  }

  uint64_t v137 = *(void *)(a1 + 1392);
  *(void *)(a1 + 1392) = *(void *)v134;
  *(void *)(a1 + 1400) = v136;
  sub_100004080(v137, v135);
LABEL_101:
  *(void *)(a1 + 1408) = *(void *)(a2 + 1408);
  *(_BYTE *)(a1 + 1416) = *(_BYTE *)(a2 + 1416);
  *(_WORD *)(a1 + 1417) = *(_WORD *)(a2 + 1417);
  *(void *)(a1 + 1424) = *(void *)(a2 + 1424);
  *(_BYTE *)(a1 + 1432) = *(_BYTE *)(a2 + 1432);
  *(void *)(a1 + 1440) = *(void *)(a2 + 1440);
  *(_WORD *)(a1 + 1448) = *(_WORD *)(a2 + 1448);
  *(_BYTE *)(a1 + 1464) = *(_BYTE *)(a2 + 1464);
  *(void *)(a1 + 1456) = *(void *)(a2 + 1456);
  *(_BYTE *)(a1 + 1480) = *(_BYTE *)(a2 + 1480);
  *(void *)(a1 + 1472) = *(void *)(a2 + 1472);
  *(void *)(a1 + 1488) = *(void *)(a2 + 1488);
  uint64_t v138 = *(void *)(a1 + 1496);
  *(void *)(a1 + 1496) = *(void *)(a2 + 1496);
  swift_bridgeObjectRelease(v138);
  *(void *)(a1 + 1504) = *(void *)(a2 + 1504);
  *(_BYTE *)(a1 + 1512) = *(_BYTE *)(a2 + 1512);
  *(void *)(a1 + 1520) = *(void *)(a2 + 1520);
  *(_BYTE *)(a1 + 1528) = *(_BYTE *)(a2 + 1528);
  uint64_t v139 = (_OWORD *)(a2 + 1536);
  unint64_t v140 = *(void *)(a1 + 1544);
  if (v140 >> 60 == 15)
  {
LABEL_104:
    *(_OWORD *)(a1 + 1536) = *v139;
    goto LABEL_106;
  }

  unint64_t v141 = *(void *)(a2 + 1544);
  if (v141 >> 60 == 15)
  {
    sub_100004238(a1 + 1536);
    goto LABEL_104;
  }

  uint64_t v142 = *(void *)(a1 + 1536);
  *(void *)(a1 + 1536) = *(void *)v139;
  *(void *)(a1 + 1544) = v141;
  sub_100004080(v142, v140);
LABEL_106:
  uint64_t v143 = (_OWORD *)(a2 + 1552);
  unint64_t v144 = *(void *)(a1 + 1560);
  if (v144 >> 60 == 15)
  {
LABEL_109:
    *(_OWORD *)(a1 + 1552) = *v143;
    goto LABEL_111;
  }

  unint64_t v145 = *(void *)(a2 + 1560);
  if (v145 >> 60 == 15)
  {
    sub_100004238(a1 + 1552);
    goto LABEL_109;
  }

  uint64_t v146 = *(void *)(a1 + 1552);
  *(void *)(a1 + 1552) = *(void *)v143;
  *(void *)(a1 + 1560) = v145;
  sub_100004080(v146, v144);
LABEL_111:
  *(void *)(a1 + 1568) = *(void *)(a2 + 1568);
  *(_BYTE *)(a1 + 1576) = *(_BYTE *)(a2 + 1576);
  uint64_t v147 = (_OWORD *)(a2 + 1584);
  unint64_t v148 = *(void *)(a1 + 1592);
  if (v148 >> 60 == 15)
  {
LABEL_114:
    *(_OWORD *)(a1 + 1584) = *v147;
    goto LABEL_116;
  }

  unint64_t v149 = *(void *)(a2 + 1592);
  if (v149 >> 60 == 15)
  {
    sub_100004238(a1 + 1584);
    goto LABEL_114;
  }

  uint64_t v150 = *(void *)(a1 + 1584);
  *(void *)(a1 + 1584) = *(void *)v147;
  *(void *)(a1 + 1592) = v149;
  sub_100004080(v150, v148);
LABEL_116:
  uint64_t v151 = (_OWORD *)(a2 + 1600);
  unint64_t v152 = *(void *)(a1 + 1608);
  if (v152 >> 60 == 15)
  {
LABEL_119:
    *(_OWORD *)(a1 + 1600) = *v151;
    goto LABEL_121;
  }

  unint64_t v153 = *(void *)(a2 + 1608);
  if (v153 >> 60 == 15)
  {
    sub_100004238(a1 + 1600);
    goto LABEL_119;
  }

  uint64_t v154 = *(void *)(a1 + 1600);
  *(void *)(a1 + 1600) = *(void *)v151;
  *(void *)(a1 + 1608) = v153;
  sub_100004080(v154, v152);
LABEL_121:
  *(void *)(a1 + 1616) = *(void *)(a2 + 1616);
  *(_BYTE *)(a1 + 1624) = *(_BYTE *)(a2 + 1624);
  *(void *)(a1 + 1632) = *(void *)(a2 + 1632);
  *(_BYTE *)(a1 + 1640) = *(_BYTE *)(a2 + 1640);
  uint64_t v155 = *(void *)(a1 + 1648);
  *(void *)(a1 + 1648) = *(void *)(a2 + 1648);
  swift_bridgeObjectRelease(v155);
  *(void *)(a1 + 1656) = *(void *)(a2 + 1656);
  uint64_t v156 = *(void *)(a1 + 1664);
  *(void *)(a1 + 1664) = *(void *)(a2 + 1664);
  swift_bridgeObjectRelease(v156);
  *(void *)(a1 + 1672) = *(void *)(a2 + 1672);
  uint64_t v157 = *(void *)(a1 + 1680);
  *(void *)(a1 + 1680) = *(void *)(a2 + 1680);
  swift_bridgeObjectRelease(v157);
  *(void *)(a1 + 1688) = *(void *)(a2 + 1688);
  *(_BYTE *)(a1 + 1696) = *(_BYTE *)(a2 + 1696);
  *(_WORD *)(a1 + 1697) = *(_WORD *)(a2 + 1697);
  *(void *)(a1 + 1704) = *(void *)(a2 + 1704);
  *(_BYTE *)(a1 + 1712) = *(_BYTE *)(a2 + 1712);
  uint64_t v158 = (_OWORD *)(a2 + 1720);
  unint64_t v159 = *(void *)(a1 + 1728);
  if (v159 >> 60 == 15)
  {
LABEL_124:
    *(_OWORD *)(a1 + 1720) = *v158;
    goto LABEL_126;
  }

  unint64_t v160 = *(void *)(a2 + 1728);
  if (v160 >> 60 == 15)
  {
    sub_100004238(a1 + 1720);
    goto LABEL_124;
  }

  uint64_t v161 = *(void *)(a1 + 1720);
  *(void *)(a1 + 1720) = *(void *)v158;
  *(void *)(a1 + 1728) = v160;
  sub_100004080(v161, v159);
LABEL_126:
  *(void *)(a1 + 1736) = *(void *)(a2 + 1736);
  *(_WORD *)(a1 + 1744) = *(_WORD *)(a2 + 1744);
  *(void *)(a1 + 1752) = *(void *)(a2 + 1752);
  uint64_t v162 = *(void *)(a1 + 1760);
  *(void *)(a1 + 1760) = *(void *)(a2 + 1760);
  swift_bridgeObjectRelease(v162);
  *(void *)(a1 + 1768) = *(void *)(a2 + 1768);
  *(_BYTE *)(a1 + 1776) = *(_BYTE *)(a2 + 1776);
  *(void *)(a1 + 1784) = *(void *)(a2 + 1784);
  *(_BYTE *)(a1 + 1792) = *(_BYTE *)(a2 + 1792);
  uint64_t v163 = (_OWORD *)(a2 + 1800);
  unint64_t v164 = *(void *)(a1 + 1808);
  if (v164 >> 60 == 15)
  {
LABEL_129:
    *(_OWORD *)(a1 + 1800) = *v163;
    goto LABEL_131;
  }

  unint64_t v165 = *(void *)(a2 + 1808);
  if (v165 >> 60 == 15)
  {
    sub_100004238(a1 + 1800);
    goto LABEL_129;
  }

  uint64_t v166 = *(void *)(a1 + 1800);
  *(void *)(a1 + 1800) = *(void *)v163;
  *(void *)(a1 + 1808) = v165;
  sub_100004080(v166, v164);
LABEL_131:
  uint64_t v167 = (_OWORD *)(a2 + 1816);
  unint64_t v168 = *(void *)(a1 + 1824);
  if (v168 >> 60 == 15)
  {
LABEL_134:
    *(_OWORD *)(a1 + 1816) = *v167;
    goto LABEL_136;
  }

  unint64_t v169 = *(void *)(a2 + 1824);
  if (v169 >> 60 == 15)
  {
    sub_100004238(a1 + 1816);
    goto LABEL_134;
  }

  uint64_t v170 = *(void *)(a1 + 1816);
  *(void *)(a1 + 1816) = *(void *)v167;
  *(void *)(a1 + 1824) = v169;
  sub_100004080(v170, v168);
LABEL_136:
  *(void *)(a1 + 1832) = *(void *)(a2 + 1832);
  *(_BYTE *)(a1 + 1840) = *(_BYTE *)(a2 + 1840);
  uint64_t v171 = (_OWORD *)(a2 + 1848);
  unint64_t v172 = *(void *)(a1 + 1856);
  if (v172 >> 60 == 15)
  {
LABEL_139:
    *(_OWORD *)(a1 + 1848) = *v171;
    goto LABEL_141;
  }

  unint64_t v173 = *(void *)(a2 + 1856);
  if (v173 >> 60 == 15)
  {
    sub_100004238(a1 + 1848);
    goto LABEL_139;
  }

  uint64_t v174 = *(void *)(a1 + 1848);
  *(void *)(a1 + 1848) = *(void *)v171;
  *(void *)(a1 + 1856) = v173;
  sub_100004080(v174, v172);
LABEL_141:
  uint64_t v175 = (_OWORD *)(a2 + 1864);
  unint64_t v176 = *(void *)(a1 + 1872);
  if (v176 >> 60 == 15)
  {
LABEL_144:
    *(_OWORD *)(a1 + 1864) = *v175;
    goto LABEL_146;
  }

  unint64_t v177 = *(void *)(a2 + 1872);
  if (v177 >> 60 == 15)
  {
    sub_100004238(a1 + 1864);
    goto LABEL_144;
  }

  uint64_t v178 = *(void *)(a1 + 1864);
  *(void *)(a1 + 1864) = *(void *)v175;
  *(void *)(a1 + 1872) = v177;
  sub_100004080(v178, v176);
LABEL_146:
  uint64_t v179 = (_OWORD *)(a2 + 1880);
  unint64_t v180 = *(void *)(a1 + 1888);
  if (v180 >> 60 == 15)
  {
LABEL_149:
    *(_OWORD *)(a1 + 1880) = *v179;
    goto LABEL_151;
  }

  unint64_t v181 = *(void *)(a2 + 1888);
  if (v181 >> 60 == 15)
  {
    sub_100004238(a1 + 1880);
    goto LABEL_149;
  }

  uint64_t v182 = *(void *)(a1 + 1880);
  *(void *)(a1 + 1880) = *(void *)v179;
  *(void *)(a1 + 1888) = v181;
  sub_100004080(v182, v180);
LABEL_151:
  *(void *)(a1 + 1896) = *(void *)(a2 + 1896);
  *(_BYTE *)(a1 + 1904) = *(_BYTE *)(a2 + 1904);
  uint64_t v183 = (_OWORD *)(a2 + 1912);
  unint64_t v184 = *(void *)(a1 + 1920);
  if (v184 >> 60 == 15)
  {
LABEL_154:
    *(_OWORD *)(a1 + 1912) = *v183;
    goto LABEL_156;
  }

  unint64_t v185 = *(void *)(a2 + 1920);
  if (v185 >> 60 == 15)
  {
    sub_100004238(a1 + 1912);
    goto LABEL_154;
  }

  uint64_t v186 = *(void *)(a1 + 1912);
  *(void *)(a1 + 1912) = *(void *)v183;
  *(void *)(a1 + 1920) = v185;
  sub_100004080(v186, v184);
LABEL_156:
  *(void *)(a1 + 1928) = *(void *)(a2 + 1928);
  *(_BYTE *)(a1 + 1936) = *(_BYTE *)(a2 + 1936);
  uint64_t v187 = (_OWORD *)(a2 + 1944);
  unint64_t v188 = *(void *)(a1 + 1952);
  if (v188 >> 60 == 15)
  {
LABEL_159:
    *(_OWORD *)(a1 + 1944) = *v187;
    goto LABEL_161;
  }

  unint64_t v189 = *(void *)(a2 + 1952);
  if (v189 >> 60 == 15)
  {
    sub_100004238(a1 + 1944);
    goto LABEL_159;
  }

  uint64_t v190 = *(void *)(a1 + 1944);
  *(void *)(a1 + 1944) = *(void *)v187;
  *(void *)(a1 + 1952) = v189;
  sub_100004080(v190, v188);
LABEL_161:
  *(void *)(a1 + 1960) = *(void *)(a2 + 1960);
  uint64_t v191 = *(void *)(a1 + 1968);
  *(void *)(a1 + 1968) = *(void *)(a2 + 1968);
  swift_bridgeObjectRelease(v191);
  *(void *)(a1 + 1976) = *(void *)(a2 + 1976);
  *(_BYTE *)(a1 + 1984) = *(_BYTE *)(a2 + 1984);
  *(void *)(a1 + 1992) = *(void *)(a2 + 1992);
  *(_BYTE *)(a1 + 2000) = *(_BYTE *)(a2 + 2000);
  *(void *)(a1 + 2008) = *(void *)(a2 + 2008);
  *(_BYTE *)(a1 + 2016) = *(_BYTE *)(a2 + 2016);
  *(_BYTE *)(a1 + 2032) = *(_BYTE *)(a2 + 2032);
  *(void *)(a1 + 2024) = *(void *)(a2 + 2024);
  uint64_t v192 = *(void *)(a1 + 2040);
  *(void *)(a1 + 2040) = *(void *)(a2 + 2040);
  swift_bridgeObjectRelease(v192);
  uint64_t v193 = *(void *)(a1 + 2048);
  *(void *)(a1 + 2048) = *(void *)(a2 + 2048);
  swift_bridgeObjectRelease(v193);
  __int128 v194 = (void *)(a2 + 2056);
  unint64_t v195 = *(void *)(a1 + 2064);
  if (v195 >> 60 != 15)
  {
    unint64_t v196 = *(void *)(a2 + 2064);
    if (v196 >> 60 != 15)
    {
      uint64_t v197 = *(void *)(a1 + 2056);
      *(void *)(a1 + 2056) = *v194;
      *(void *)(a1 + 2064) = v196;
      sub_100004080(v197, v195);
      goto LABEL_166;
    }

    sub_100004238(a1 + 2056);
  }

  *(_OWORD *)(a1 + 2056) = *(_OWORD *)v194;
LABEL_166:
  *(void *)(a1 + 2072) = *(void *)(a2 + 2072);
  *(_BYTE *)(a1 + 2080) = *(_BYTE *)(a2 + 2080);
  uint64_t v198 = *(void *)(a1 + 2088);
  *(void *)(a1 + 2088) = *(void *)(a2 + 2088);
  swift_bridgeObjectRelease(v198);
  *(void *)(a1 + 2096) = *(void *)(a2 + 2096);
  *(_BYTE *)(a1 + 2104) = *(_BYTE *)(a2 + 2104);
  *(void *)(a1 + 2112) = *(void *)(a2 + 2112);
  *(_BYTE *)(a1 + 2120) = *(_BYTE *)(a2 + 2120);
  *(_WORD *)(a1 + 2121) = *(_WORD *)(a2 + 2121);
  *(void *)(a1 + 2128) = *(void *)(a2 + 2128);
  uint64_t v199 = *(void *)(a1 + 2136);
  *(void *)(a1 + 2136) = *(void *)(a2 + 2136);
  swift_bridgeObjectRelease(v199);
  *(_BYTE *)(a1 + 2144) = *(_BYTE *)(a2 + 2144);
  *(void *)(a1 + 2152) = *(void *)(a2 + 2152);
  *(_BYTE *)(a1 + 2160) = *(_BYTE *)(a2 + 2160);
  *(void *)(a1 + 2168) = *(void *)(a2 + 2168);
  *(_BYTE *)(a1 + 2176) = *(_BYTE *)(a2 + 2176);
  *(_WORD *)(a1 + 2177) = *(_WORD *)(a2 + 2177);
  return a1;
}

uint64_t getEnumTagSinglePayload for IDSMadridProtocolPayload(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 2179)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 128);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for IDSMadridProtocolPayload( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 2168) = 0LL;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 2178) = 0;
    *(_WORD *)(result + 2176) = 0;
    *(_OWORD *)(result + 2152) = 0u;
    *(_OWORD *)(result + 2136) = 0u;
    *(_OWORD *)(result + 2120) = 0u;
    *(_OWORD *)(result + 2104) = 0u;
    *(_OWORD *)(result + 2088) = 0u;
    *(_OWORD *)(result + 2072) = 0u;
    *(_OWORD *)(result + 2056) = 0u;
    *(_OWORD *)(result + 2040) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 2179) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 2179) = 0;
    }
    if (a2) {
      *(void *)(result + 128) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for IDSMadridProtocolPayload()
{
  return &type metadata for IDSMadridProtocolPayload;
}

uint64_t destroy for IDSMadridProtocolHttpHeaders(void *a1)
{
  return swift_bridgeObjectRelease(a1[11]);
}

void *initializeWithCopy for IDSMadridProtocolHttpHeaders(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  uint64_t v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  uint64_t v8 = a2[11];
  a1[10] = a2[10];
  a1[11] = v8;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  return a1;
}

void *assignWithCopy for IDSMadridProtocolHttpHeaders(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[6] = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a1[7];
  a1[7] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  a1[8] = a2[8];
  uint64_t v12 = a2[9];
  uint64_t v13 = a1[9];
  a1[9] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  a1[10] = a2[10];
  uint64_t v14 = a2[11];
  uint64_t v15 = a1[11];
  a1[11] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  return a1;
}

__n128 initializeWithTake for IDSMadridProtocolHttpHeaders(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

void *assignWithTake for IDSMadridProtocolHttpHeaders(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a2[7];
  uint64_t v11 = a1[7];
  a1[6] = a2[6];
  a1[7] = v10;
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = a2[9];
  uint64_t v13 = a1[9];
  a1[8] = a2[8];
  a1[9] = v12;
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = a2[11];
  uint64_t v15 = a1[11];
  a1[10] = a2[10];
  a1[11] = v14;
  swift_bridgeObjectRelease(v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for IDSMadridProtocolHttpHeaders(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 96)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for IDSMadridProtocolHttpHeaders( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 88) = 0LL;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 96) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 96) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for IDSMadridProtocolHttpHeaders()
{
  return &type metadata for IDSMadridProtocolHttpHeaders;
}

uint64_t initializeBufferWithCopyOfBuffer for IDSMadridProtocolDeliveryContext(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(void *)__n128 result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for IDSMadridProtocolDeliveryContext(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for IDSMadridProtocolDeliveryContext(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_BYTE *)(result + 8) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 9) = v3;
  return result;
}

ValueMetadata *type metadata accessor for IDSMadridProtocolDeliveryContext()
{
  return &type metadata for IDSMadridProtocolDeliveryContext;
}

uint64_t destroy for IDSQuickRelayPluginRequest(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 24));
}

uint64_t initializeWithCopy for IDSQuickRelayPluginRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for IDSQuickRelayPluginRequest(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(void *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  return a1;
}

__n128 initializeWithTake for IDSQuickRelayPluginRequest(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 26) = *(_OWORD *)(a2 + 26);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for IDSQuickRelayPluginRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for IDSQuickRelayPluginRequest(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 42)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for IDSQuickRelayPluginRequest( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 40) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 42) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 42) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for IDSQuickRelayPluginRequest()
{
  return &type metadata for IDSQuickRelayPluginRequest;
}

uint64_t destroy for IDSQuickRelayAllocationStatus(uint64_t *a1)
{
  unint64_t v2 = a1[5];
  if (v2 >> 60 != 15) {
    sub_100004080(a1[4], v2);
  }
  return swift_bridgeObjectRelease(a1[7]);
}

uint64_t initializeWithCopy for IDSQuickRelayAllocationStatus(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  int v4 = (uint64_t *)(a2 + 32);
  unint64_t v5 = *(void *)(a2 + 40);
  if (v5 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v4;
  }

  else
  {
    uint64_t v6 = *v4;
    sub_100003FF0(*v4, *(void *)(a2 + 40));
    *(void *)(a1 + 32) = v6;
    *(void *)(a1 + 40) = v5;
  }

  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t assignWithCopy for IDSQuickRelayAllocationStatus(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(void *)a1 = v4;
  uint64_t v5 = a2[2];
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  *(void *)(a1 + 16) = v5;
  uint64_t v6 = (_OWORD *)(a1 + 32);
  uint64_t v7 = a2 + 4;
  unint64_t v8 = a2[5];
  if (*(void *)(a1 + 40) >> 60 != 15LL)
  {
    if (v8 >> 60 != 15)
    {
      uint64_t v10 = *v7;
      sub_100003FF0(*v7, a2[5]);
      uint64_t v11 = *(void *)(a1 + 32);
      unint64_t v12 = *(void *)(a1 + 40);
      *(void *)(a1 + 32) = v10;
      *(void *)(a1 + 40) = v8;
      sub_100004080(v11, v12);
      goto LABEL_8;
    }

    sub_100004238(a1 + 32);
    goto LABEL_6;
  }

  if (v8 >> 60 == 15)
  {
LABEL_6:
    *uint64_t v6 = *(_OWORD *)v7;
    goto LABEL_8;
  }

  uint64_t v9 = *v7;
  sub_100003FF0(*v7, a2[5]);
  *(void *)(a1 + 32) = v9;
  *(void *)(a1 + 40) = v8;
LABEL_8:
  *(void *)(a1 + 48) = a2[6];
  uint64_t v13 = a2[7];
  uint64_t v14 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  return a1;
}

__n128 initializeWithTake for IDSQuickRelayAllocationStatus(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for IDSQuickRelayAllocationStatus(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  __int128 v4 = (_OWORD *)(a1 + 32);
  uint64_t v5 = (void *)(a2 + 32);
  unint64_t v6 = *(void *)(a1 + 40);
  if (v6 >> 60 != 15)
  {
    unint64_t v7 = *(void *)(a2 + 40);
    if (v7 >> 60 != 15)
    {
      uint64_t v8 = *(void *)(a1 + 32);
      *(void *)(a1 + 32) = *v5;
      *(void *)(a1 + 40) = v7;
      sub_100004080(v8, v6);
      goto LABEL_6;
    }

    sub_100004238(a1 + 32);
  }

  *__int128 v4 = *(_OWORD *)v5;
LABEL_6:
  uint64_t v9 = *(void *)(a2 + 56);
  uint64_t v10 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v9;
  swift_bridgeObjectRelease(v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for IDSQuickRelayAllocationStatus(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 56);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for IDSQuickRelayAllocationStatus( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 56) = 0LL;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 64) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 64) = 0;
    }
    if (a2) {
      *(void *)(result + 56) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for IDSQuickRelayAllocationStatus()
{
  return &type metadata for IDSQuickRelayAllocationStatus;
}

uint64_t *destroy for IDSQuickRelaySelfAllocToken(uint64_t *result)
{
  uint64_t v1 = result;
  unint64_t v2 = result[1];
  if (v2 >> 60 != 15) {
    __n128 result = (uint64_t *)sub_100004080(*result, v2);
  }
  unint64_t v3 = v1[3];
  if (v3 >> 60 != 15) {
    __n128 result = (uint64_t *)sub_100004080(v1[2], v3);
  }
  unint64_t v4 = v1[7];
  if (v4 >> 60 != 15) {
    __n128 result = (uint64_t *)sub_100004080(v1[6], v4);
  }
  unint64_t v5 = v1[9];
  if (v5 >> 60 != 15) {
    __n128 result = (uint64_t *)sub_100004080(v1[8], v5);
  }
  unint64_t v6 = v1[11];
  if (v6 >> 60 != 15) {
    return (uint64_t *)sub_100004080(v1[10], v6);
  }
  return result;
}

uint64_t initializeWithCopy for IDSQuickRelaySelfAllocToken(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = a2[1];
  if (v4 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }

  else
  {
    uint64_t v5 = *a2;
    sub_100003FF0(*a2, a2[1]);
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v4;
  }

  unint64_t v6 = a2 + 2;
  unint64_t v7 = a2[3];
  if (v7 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v6;
  }

  else
  {
    uint64_t v8 = *v6;
    sub_100003FF0(*v6, a2[3]);
    *(void *)(a1 + 16) = v8;
    *(void *)(a1 + 24) = v7;
  }

  *(void *)(a1 + 32) = a2[4];
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  uint64_t v9 = a2 + 6;
  unint64_t v10 = a2[7];
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)v9;
  }

  else
  {
    uint64_t v11 = *v9;
    sub_100003FF0(*v9, a2[7]);
    *(void *)(a1 + 48) = v11;
    *(void *)(a1 + 56) = v10;
  }

  unint64_t v12 = a2 + 8;
  unint64_t v13 = a2[9];
  if (v13 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 64) = *(_OWORD *)v12;
  }

  else
  {
    uint64_t v14 = *v12;
    sub_100003FF0(*v12, a2[9]);
    *(void *)(a1 + 64) = v14;
    *(void *)(a1 + 72) = v13;
  }

  uint64_t v15 = a2 + 10;
  unint64_t v16 = a2[11];
  if (v16 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 80) = *(_OWORD *)v15;
  }

  else
  {
    uint64_t v17 = *v15;
    sub_100003FF0(*v15, a2[11]);
    *(void *)(a1 + 80) = v17;
    *(void *)(a1 + 88) = v16;
  }

  *(void *)(a1 + 96) = a2[12];
  *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
  return a1;
}

uint64_t assignWithCopy for IDSQuickRelaySelfAllocToken(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8) >> 60 == 15LL)
  {
    if (v4 >> 60 != 15)
    {
      uint64_t v5 = *(void *)a2;
      sub_100003FF0(*(void *)a2, *(void *)(a2 + 8));
      *(void *)a1 = v5;
      *(void *)(a1 + 8) = v4;
      goto LABEL_8;
    }

    goto LABEL_6;
  }

  if (v4 >> 60 == 15)
  {
    sub_100004238(a1);
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }

  uint64_t v6 = *(void *)a2;
  sub_100003FF0(*(void *)a2, *(void *)(a2 + 8));
  uint64_t v7 = *(void *)a1;
  unint64_t v8 = *(void *)(a1 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v4;
  sub_100004080(v7, v8);
LABEL_8:
  uint64_t v9 = (uint64_t *)(a2 + 16);
  unint64_t v10 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24) >> 60 == 15LL)
  {
    if (v10 >> 60 != 15)
    {
      uint64_t v11 = *v9;
      sub_100003FF0(*v9, *(void *)(a2 + 24));
      *(void *)(a1 + 16) = v11;
      *(void *)(a1 + 24) = v10;
      goto LABEL_15;
    }

    goto LABEL_13;
  }

  if (v10 >> 60 == 15)
  {
    sub_100004238(a1 + 16);
LABEL_13:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v9;
    goto LABEL_15;
  }

  uint64_t v12 = *v9;
  sub_100003FF0(*v9, *(void *)(a2 + 24));
  uint64_t v13 = *(void *)(a1 + 16);
  unint64_t v14 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v12;
  *(void *)(a1 + 24) = v10;
  sub_100004080(v13, v14);
LABEL_15:
  uint64_t v15 = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(void *)(a1 + 32) = v15;
  unint64_t v16 = (uint64_t *)(a2 + 48);
  unint64_t v17 = *(void *)(a2 + 56);
  if (*(void *)(a1 + 56) >> 60 == 15LL)
  {
    if (v17 >> 60 != 15)
    {
      uint64_t v18 = *v16;
      sub_100003FF0(*v16, *(void *)(a2 + 56));
      *(void *)(a1 + 48) = v18;
      *(void *)(a1 + 56) = v17;
      goto LABEL_22;
    }

    goto LABEL_20;
  }

  if (v17 >> 60 == 15)
  {
    sub_100004238(a1 + 48);
LABEL_20:
    *(_OWORD *)(a1 + 48) = *(_OWORD *)v16;
    goto LABEL_22;
  }

  uint64_t v19 = *v16;
  sub_100003FF0(*v16, *(void *)(a2 + 56));
  uint64_t v20 = *(void *)(a1 + 48);
  unint64_t v21 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = v19;
  *(void *)(a1 + 56) = v17;
  sub_100004080(v20, v21);
LABEL_22:
  uint64_t v22 = (uint64_t *)(a2 + 64);
  unint64_t v23 = *(void *)(a2 + 72);
  if (*(void *)(a1 + 72) >> 60 == 15LL)
  {
    if (v23 >> 60 != 15)
    {
      uint64_t v24 = *v22;
      sub_100003FF0(*v22, *(void *)(a2 + 72));
      *(void *)(a1 + 64) = v24;
      *(void *)(a1 + 72) = v23;
      goto LABEL_29;
    }

    goto LABEL_27;
  }

  if (v23 >> 60 == 15)
  {
    sub_100004238(a1 + 64);
LABEL_27:
    *(_OWORD *)(a1 + 64) = *(_OWORD *)v22;
    goto LABEL_29;
  }

  uint64_t v25 = *v22;
  sub_100003FF0(*v22, *(void *)(a2 + 72));
  uint64_t v26 = *(void *)(a1 + 64);
  unint64_t v27 = *(void *)(a1 + 72);
  *(void *)(a1 + 64) = v25;
  *(void *)(a1 + 72) = v23;
  sub_100004080(v26, v27);
LABEL_29:
  uint64_t v28 = (uint64_t *)(a2 + 80);
  unint64_t v29 = *(void *)(a2 + 88);
  if (*(void *)(a1 + 88) >> 60 != 15LL)
  {
    if (v29 >> 60 != 15)
    {
      uint64_t v31 = *v28;
      sub_100003FF0(*v28, *(void *)(a2 + 88));
      uint64_t v32 = *(void *)(a1 + 80);
      unint64_t v33 = *(void *)(a1 + 88);
      *(void *)(a1 + 80) = v31;
      *(void *)(a1 + 88) = v29;
      sub_100004080(v32, v33);
      goto LABEL_36;
    }

    sub_100004238(a1 + 80);
    goto LABEL_34;
  }

  if (v29 >> 60 == 15)
  {
LABEL_34:
    *(_OWORD *)(a1 + 80) = *(_OWORD *)v28;
    goto LABEL_36;
  }

  uint64_t v30 = *v28;
  sub_100003FF0(*v28, *(void *)(a2 + 88));
  *(void *)(a1 + 80) = v30;
  *(void *)(a1 + 88) = v29;
LABEL_36:
  uint64_t v34 = *(void *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(void *)(a1 + 96) = v34;
  return a1;
}

__n128 initializeWithTake for IDSQuickRelaySelfAllocToken(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  __int128 v5 = a2[4];
  __int128 v6 = a2[5];
  *(_OWORD *)(a1 + 89) = *(__int128 *)((char *)a2 + 89);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for IDSQuickRelaySelfAllocToken(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v5 = *(void *)(a2 + 8);
  if (v5 >> 60 == 15)
  {
    sub_100004238(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }

  uint64_t v6 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  sub_100004080(v6, v4);
LABEL_6:
  uint64_t v7 = (_OWORD *)(a2 + 16);
  unint64_t v8 = *(void *)(a1 + 24);
  if (v8 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)(a1 + 16) = *v7;
    goto LABEL_11;
  }

  unint64_t v9 = *(void *)(a2 + 24);
  if (v9 >> 60 == 15)
  {
    sub_100004238(a1 + 16);
    goto LABEL_9;
  }

  uint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)v7;
  *(void *)(a1 + 24) = v9;
  sub_100004080(v10, v8);
LABEL_11:
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  uint64_t v11 = (_OWORD *)(a2 + 48);
  unint64_t v12 = *(void *)(a1 + 56);
  if (v12 >> 60 == 15)
  {
LABEL_14:
    *(_OWORD *)(a1 + 48) = *v11;
    goto LABEL_16;
  }

  unint64_t v13 = *(void *)(a2 + 56);
  if (v13 >> 60 == 15)
  {
    sub_100004238(a1 + 48);
    goto LABEL_14;
  }

  uint64_t v14 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = *(void *)v11;
  *(void *)(a1 + 56) = v13;
  sub_100004080(v14, v12);
LABEL_16:
  uint64_t v15 = (_OWORD *)(a2 + 64);
  unint64_t v16 = *(void *)(a1 + 72);
  if (v16 >> 60 == 15)
  {
LABEL_19:
    *(_OWORD *)(a1 + 64) = *v15;
    goto LABEL_21;
  }

  unint64_t v17 = *(void *)(a2 + 72);
  if (v17 >> 60 == 15)
  {
    sub_100004238(a1 + 64);
    goto LABEL_19;
  }

  uint64_t v18 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = *(void *)v15;
  *(void *)(a1 + 72) = v17;
  sub_100004080(v18, v16);
LABEL_21:
  uint64_t v19 = (void *)(a2 + 80);
  unint64_t v20 = *(void *)(a1 + 88);
  if (v20 >> 60 != 15)
  {
    unint64_t v21 = *(void *)(a2 + 88);
    if (v21 >> 60 != 15)
    {
      uint64_t v22 = *(void *)(a1 + 80);
      *(void *)(a1 + 80) = *v19;
      *(void *)(a1 + 88) = v21;
      sub_100004080(v22, v20);
      goto LABEL_26;
    }

    sub_100004238(a1 + 80);
  }

  *(_OWORD *)(a1 + 80) = *(_OWORD *)v19;
LABEL_26:
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for IDSQuickRelaySelfAllocToken(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xC && *(_BYTE *)(a1 + 105)) {
    return (*(_DWORD *)a1 + 12);
  }
  uint64_t v3 = *(void *)(a1 + 8) >> 60;
  if (((4 * (_DWORD)v3) & 0xC) != 0) {
    int v4 = 14 - ((4 * v3) & 0xC | (v3 >> 2));
  }
  else {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for IDSQuickRelaySelfAllocToken( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xB)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 104) = 0;
    *(void *)__n128 result = a2 - 12;
    if (a3 >= 0xC) {
      *(_BYTE *)(result + 105) = 1;
    }
  }

  else
  {
    if (a3 >= 0xC) {
      *(_BYTE *)(result + 105) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0LL;
      *(void *)(result + 8) = (unint64_t)((4 * (a2 ^ 0xF)) | ((a2 ^ 0xF) >> 2)) << 60;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for IDSQuickRelaySelfAllocToken()
{
  return &type metadata for IDSQuickRelaySelfAllocToken;
}

uint64_t destroy for IDSQuickRelayPluginAllocation(void *a1)
{
  uint64_t result = swift_bridgeObjectRelease(a1[1]);
  unint64_t v3 = a1[7];
  if (v3 >> 60 != 15) {
    uint64_t result = sub_100004080(a1[6], v3);
  }
  unint64_t v4 = a1[9];
  if (v4 >> 60 != 15) {
    return sub_100004080(a1[8], v4);
  }
  return result;
}

uint64_t initializeWithCopy for IDSQuickRelayPluginAllocation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  unint64_t v5 = (_OWORD *)(a2 + 48);
  unint64_t v6 = *(void *)(a2 + 56);
  swift_bridgeObjectRetain(v4);
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 48) = *v5;
  }

  else
  {
    uint64_t v7 = *(void *)v5;
    sub_100003FF0(v7, v6);
    *(void *)(a1 + 48) = v7;
    *(void *)(a1 + 56) = v6;
  }

  unint64_t v8 = (uint64_t *)(a2 + 64);
  unint64_t v9 = *(void *)(a2 + 72);
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 64) = *(_OWORD *)v8;
  }

  else
  {
    uint64_t v10 = *v8;
    sub_100003FF0(*v8, v9);
    *(void *)(a1 + 64) = v10;
    *(void *)(a1 + 72) = v9;
  }

  return a1;
}

uint64_t assignWithCopy for IDSQuickRelayPluginAllocation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(void *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(void *)(a1 + 32) = v7;
  unint64_t v8 = (uint64_t *)(a2 + 48);
  unint64_t v9 = *(void *)(a2 + 56);
  if (*(void *)(a1 + 56) >> 60 == 15LL)
  {
    if (v9 >> 60 != 15)
    {
      uint64_t v10 = *v8;
      sub_100003FF0(*v8, *(void *)(a2 + 56));
      *(void *)(a1 + 48) = v10;
      *(void *)(a1 + 56) = v9;
      goto LABEL_8;
    }

    goto LABEL_6;
  }

  if (v9 >> 60 == 15)
  {
    sub_100004238(a1 + 48);
LABEL_6:
    *(_OWORD *)(a1 + 48) = *(_OWORD *)v8;
    goto LABEL_8;
  }

  uint64_t v11 = *v8;
  sub_100003FF0(*v8, *(void *)(a2 + 56));
  uint64_t v12 = *(void *)(a1 + 48);
  unint64_t v13 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = v11;
  *(void *)(a1 + 56) = v9;
  sub_100004080(v12, v13);
LABEL_8:
  uint64_t v14 = (uint64_t *)(a2 + 64);
  unint64_t v15 = *(void *)(a2 + 72);
  if (*(void *)(a1 + 72) >> 60 != 15LL)
  {
    if (v15 >> 60 != 15)
    {
      uint64_t v17 = *v14;
      sub_100003FF0(*v14, v15);
      uint64_t v18 = *(void *)(a1 + 64);
      unint64_t v19 = *(void *)(a1 + 72);
      *(void *)(a1 + 64) = v17;
      *(void *)(a1 + 72) = v15;
      sub_100004080(v18, v19);
      return a1;
    }

    sub_100004238(a1 + 64);
    goto LABEL_13;
  }

  if (v15 >> 60 == 15)
  {
LABEL_13:
    *(_OWORD *)(a1 + 64) = *(_OWORD *)v14;
    return a1;
  }

  uint64_t v16 = *v14;
  sub_100003FF0(*v14, v15);
  *(void *)(a1 + 64) = v16;
  *(void *)(a1 + 72) = v15;
  return a1;
}

__n128 initializeWithTake for IDSQuickRelayPluginAllocation(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for IDSQuickRelayPluginAllocation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  uint64_t v6 = (_OWORD *)(a2 + 48);
  unint64_t v7 = *(void *)(a1 + 56);
  if (v7 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v8 = *(void *)(a2 + 56);
  if (v8 >> 60 == 15)
  {
    sub_100004238(a1 + 48);
LABEL_4:
    *(_OWORD *)(a1 + 48) = *v6;
    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = *(void *)v6;
  *(void *)(a1 + 56) = v8;
  sub_100004080(v9, v7);
LABEL_6:
  uint64_t v10 = (void *)(a2 + 64);
  unint64_t v11 = *(void *)(a1 + 72);
  if (v11 >> 60 != 15)
  {
    unint64_t v12 = *(void *)(a2 + 72);
    if (v12 >> 60 != 15)
    {
      uint64_t v13 = *(void *)(a1 + 64);
      *(void *)(a1 + 64) = *v10;
      *(void *)(a1 + 72) = v12;
      sub_100004080(v13, v11);
      return a1;
    }

    sub_100004238(a1 + 64);
  }

  *(_OWORD *)(a1 + 64) = *(_OWORD *)v10;
  return a1;
}

uint64_t getEnumTagSinglePayload for IDSQuickRelayPluginAllocation(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 80)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for IDSQuickRelayPluginAllocation( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 72) = 0LL;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 80) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 80) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for IDSQuickRelayPluginAllocation()
{
  return &type metadata for IDSQuickRelayPluginAllocation;
}

uint64_t storeEnumTagSinglePayload for IDSQuickRelayPluginAllocation.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_100055DD4 + 4 * byte_100070CFB[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100055E08 + 4 * byte_100070CF6[v4]))();
}

uint64_t sub_100055E08(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100055E10(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100055E18LL);
  }
  return result;
}

uint64_t sub_100055E24(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100055E2CLL);
  }
  *(_BYTE *)__n128 result = a2 + 4;
  return result;
}

uint64_t sub_100055E30(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100055E38(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IDSQuickRelayPluginAllocation.CodingKeys()
{
  return &type metadata for IDSQuickRelayPluginAllocation.CodingKeys;
}

uint64_t getEnumTagSinglePayload for IDSQuickRelaySelfAllocToken.CodingKeys( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }

uint64_t storeEnumTagSinglePayload for IDSQuickRelaySelfAllocToken.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_100055F30 + 4 * byte_100070D05[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_100055F64 + 4 * byte_100070D00[v4]))();
}

uint64_t sub_100055F64(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100055F6C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100055F74LL);
  }
  return result;
}

uint64_t sub_100055F80(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100055F88LL);
  }
  *(_BYTE *)__n128 result = a2 + 6;
  return result;
}

uint64_t sub_100055F8C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100055F94(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IDSQuickRelaySelfAllocToken.CodingKeys()
{
  return &type metadata for IDSQuickRelaySelfAllocToken.CodingKeys;
}

ValueMetadata *type metadata accessor for IDSQuickRelayAllocationStatus.CodingKeys()
{
  return &type metadata for IDSQuickRelayAllocationStatus.CodingKeys;
}

uint64_t _s19IDSBlastDoorService29IDSQuickRelayAllocationStatusV10CodingKeysOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_100056014 + 4 * byte_100070D0F[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100056048 + 4 * byte_100070D0A[v4]))();
}

uint64_t sub_100056048(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100056050(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100056058LL);
  }
  return result;
}

uint64_t sub_100056064(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10005606CLL);
  }
  *(_BYTE *)__n128 result = a2 + 3;
  return result;
}

uint64_t sub_100056070(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100056078(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IDSQuickRelayPluginRequest.CodingKeys()
{
  return &type metadata for IDSQuickRelayPluginRequest.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for IDSMadridProtocolDeliveryContext.CodingKeys( uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1000560D4 + 4 * byte_100070D14[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1000560F4 + 4 * byte_100070D19[v4]))();
  }
}

_BYTE *sub_1000560D4(_BYTE *result, char a2)
{
  *__n128 result = a2;
  return result;
}

_BYTE *sub_1000560F4(_BYTE *result)
{
  *__n128 result = 0;
  return result;
}

_DWORD *sub_1000560FC(_DWORD *result, int a2)
{
  *__n128 result = a2;
  return result;
}

_WORD *sub_100056104(_WORD *result, __int16 a2)
{
  *__n128 result = a2;
  return result;
}

_WORD *sub_10005610C(_WORD *result)
{
  *__n128 result = 0;
  return result;
}

_DWORD *sub_100056114(_DWORD *result)
{
  *__n128 result = 0;
  return result;
}

ValueMetadata *type metadata accessor for IDSMadridProtocolDeliveryContext.CodingKeys()
{
  return &type metadata for IDSMadridProtocolDeliveryContext.CodingKeys;
}

uint64_t getEnumTagSinglePayload for IDSMadridProtocolHttpHeaders.CodingKeys( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }

uint64_t storeEnumTagSinglePayload for IDSMadridProtocolHttpHeaders.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_10005620C + 4 * byte_100070D23[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_100056240 + 4 * byte_100070D1E[v4]))();
}

uint64_t sub_100056240(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100056248(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100056250LL);
  }
  return result;
}

uint64_t sub_10005625C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100056264LL);
  }
  *(_BYTE *)__n128 result = a2 + 5;
  return result;
}

uint64_t sub_100056268(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100056270(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IDSMadridProtocolHttpHeaders.CodingKeys()
{
  return &type metadata for IDSMadridProtocolHttpHeaders.CodingKeys;
}

uint64_t getEnumTagSinglePayload for IDSMadridProtocolPayload.CodingKeys( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0x65) {
    goto LABEL_17;
  }
  if (a2 + 155 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 155) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 155;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 155;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 155;
    }
  }

uint64_t storeEnumTagSinglePayload for IDSMadridProtocolPayload.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 155 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 155) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0x65) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0x64) {
    return ((uint64_t (*)(void))((char *)&loc_100056368 + 4 * byte_100070D2D[v4]))();
  }
  *a1 = a2 - 101;
  return ((uint64_t (*)(void))((char *)sub_10005639C + 4 * byte_100070D28[v4]))();
}

uint64_t sub_10005639C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000563A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000563ACLL);
  }
  return result;
}

uint64_t sub_1000563B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000563C0LL);
  }
  *(_BYTE *)__n128 result = a2 - 101;
  return result;
}

uint64_t sub_1000563C4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000563CC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IDSMadridProtocolPayload.CodingKeys()
{
  return &type metadata for IDSMadridProtocolPayload.CodingKeys;
}

unint64_t sub_1000563EC()
{
  unint64_t result = qword_100084BA0;
  if (!qword_100084BA0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100071134, &type metadata for IDSMadridProtocolPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084BA0);
  }

  return result;
}

unint64_t sub_100056434()
{
  unint64_t result = qword_100084BA8;
  if (!qword_100084BA8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100071224, &type metadata for IDSMadridProtocolHttpHeaders.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084BA8);
  }

  return result;
}

unint64_t sub_10005647C()
{
  unint64_t result = qword_100084BB0;
  if (!qword_100084BB0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100071314, &type metadata for IDSMadridProtocolDeliveryContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084BB0);
  }

  return result;
}

unint64_t sub_1000564C4()
{
  unint64_t result = qword_100084BB8;
  if (!qword_100084BB8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100071404, &type metadata for IDSQuickRelayPluginRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084BB8);
  }

  return result;
}

unint64_t sub_10005650C()
{
  unint64_t result = qword_100084BC0;
  if (!qword_100084BC0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000714F4, &type metadata for IDSQuickRelayAllocationStatus.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084BC0);
  }

  return result;
}

unint64_t sub_100056554()
{
  unint64_t result = qword_100084BC8;
  if (!qword_100084BC8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000715E4, &type metadata for IDSQuickRelaySelfAllocToken.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084BC8);
  }

  return result;
}

unint64_t sub_10005659C()
{
  unint64_t result = qword_100084BD0;
  if (!qword_100084BD0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000716D4, &type metadata for IDSQuickRelayPluginAllocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084BD0);
  }

  return result;
}

unint64_t sub_1000565E4()
{
  unint64_t result = qword_100084BD8;
  if (!qword_100084BD8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10007160C, &type metadata for IDSQuickRelayPluginAllocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084BD8);
  }

  return result;
}

unint64_t sub_10005662C()
{
  unint64_t result = qword_100084BE0;
  if (!qword_100084BE0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100071634, &type metadata for IDSQuickRelayPluginAllocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084BE0);
  }

  return result;
}

unint64_t sub_100056674()
{
  unint64_t result = qword_100084BE8;
  if (!qword_100084BE8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10007151C, &type metadata for IDSQuickRelaySelfAllocToken.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084BE8);
  }

  return result;
}

unint64_t sub_1000566BC()
{
  unint64_t result = qword_100084BF0;
  if (!qword_100084BF0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100071544, &type metadata for IDSQuickRelaySelfAllocToken.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084BF0);
  }

  return result;
}

unint64_t sub_100056704()
{
  unint64_t result = qword_100084BF8;
  if (!qword_100084BF8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10007142C, &type metadata for IDSQuickRelayAllocationStatus.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084BF8);
  }

  return result;
}

unint64_t sub_10005674C()
{
  unint64_t result = qword_100084C00;
  if (!qword_100084C00)
  {
    unint64_t result = swift_getWitnessTable(&unk_100071454, &type metadata for IDSQuickRelayAllocationStatus.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084C00);
  }

  return result;
}

unint64_t sub_100056794()
{
  unint64_t result = qword_100084C08;
  if (!qword_100084C08)
  {
    unint64_t result = swift_getWitnessTable(&unk_10007133C, &type metadata for IDSQuickRelayPluginRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084C08);
  }

  return result;
}

unint64_t sub_1000567DC()
{
  unint64_t result = qword_100084C10;
  if (!qword_100084C10)
  {
    unint64_t result = swift_getWitnessTable(&unk_100071364, &type metadata for IDSQuickRelayPluginRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084C10);
  }

  return result;
}

unint64_t sub_100056824()
{
  unint64_t result = qword_100084C18;
  if (!qword_100084C18)
  {
    unint64_t result = swift_getWitnessTable(&unk_10007124C, &type metadata for IDSMadridProtocolDeliveryContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084C18);
  }

  return result;
}

unint64_t sub_10005686C()
{
  unint64_t result = qword_100084C20;
  if (!qword_100084C20)
  {
    unint64_t result = swift_getWitnessTable(&unk_100071274, &type metadata for IDSMadridProtocolDeliveryContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084C20);
  }

  return result;
}

unint64_t sub_1000568B4()
{
  unint64_t result = qword_100084C28;
  if (!qword_100084C28)
  {
    unint64_t result = swift_getWitnessTable(&unk_10007115C, &type metadata for IDSMadridProtocolHttpHeaders.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084C28);
  }

  return result;
}

unint64_t sub_1000568FC()
{
  unint64_t result = qword_100084C30;
  if (!qword_100084C30)
  {
    unint64_t result = swift_getWitnessTable(&unk_100071184, &type metadata for IDSMadridProtocolHttpHeaders.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084C30);
  }

  return result;
}

unint64_t sub_100056944()
{
  unint64_t result = qword_100084C38;
  if (!qword_100084C38)
  {
    unint64_t result = swift_getWitnessTable(&unk_10007106C, &type metadata for IDSMadridProtocolPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084C38);
  }

  return result;
}

unint64_t sub_10005698C()
{
  unint64_t result = qword_100084C40;
  if (!qword_100084C40)
  {
    unint64_t result = swift_getWitnessTable(&unk_100071094, &type metadata for IDSMadridProtocolPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084C40);
  }

  return result;
}

uint64_t sub_1000569D0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a2 != 1)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(a8);
    swift_bridgeObjectRelease(a10);
    return swift_bridgeObjectRelease(a12);
  }

  return result;
}

unint64_t sub_100056A44()
{
  unint64_t result = qword_100084C78;
  if (!qword_100084C78)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IDSMadridProtocolDeliveryContext,  &type metadata for IDSMadridProtocolDeliveryContext);
    atomic_store(result, (unint64_t *)&qword_100084C78);
  }

  return result;
}

uint64_t sub_100056A88(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = sub_10003DDF4(&qword_100084A78);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_100056AE8()
{
  unint64_t result = qword_100084C90;
  if (!qword_100084C90)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IDSMadridProtocolPayload,  &type metadata for IDSMadridProtocolPayload);
    atomic_store(result, (unint64_t *)&qword_100084C90);
  }

  return result;
}

unint64_t sub_100056B2C()
{
  unint64_t result = qword_100084C98;
  if (!qword_100084C98)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IDSMadridProtocolHttpHeaders,  &type metadata for IDSMadridProtocolHttpHeaders);
    atomic_store(result, (unint64_t *)&qword_100084C98);
  }

  return result;
}

uint64_t sub_100056B70( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a2 != 1)
  {
    swift_bridgeObjectRetain(a12);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(a8);
    return swift_bridgeObjectRetain(a10);
  }

  return result;
}

unint64_t sub_100056BE4()
{
  unint64_t result = qword_100084CA8;
  if (!qword_100084CA8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IDSQuickRelayPluginRequest,  &type metadata for IDSQuickRelayPluginRequest);
    atomic_store(result, (unint64_t *)&qword_100084CA8);
  }

  return result;
}

unint64_t sub_100056C28()
{
  unint64_t result = qword_100084CB8;
  if (!qword_100084CB8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IDSQuickRelayAllocationStatus,  &type metadata for IDSQuickRelayAllocationStatus);
    atomic_store(result, (unint64_t *)&qword_100084CB8);
  }

  return result;
}

unint64_t sub_100056C6C()
{
  unint64_t result = qword_100084CC8;
  if (!qword_100084CC8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IDSQuickRelaySelfAllocToken,  &type metadata for IDSQuickRelaySelfAllocToken);
    atomic_store(result, (unint64_t *)&qword_100084CC8);
  }

  return result;
}

uint64_t sub_100056CB0(unint64_t *a1, uint64_t *a2, void (*a3)(void), uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v8 = sub_10003DDF4(a2);
    a3();
    uint64_t result = swift_getWitnessTable(a4, v8);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_100056D14()
{
  unint64_t result = qword_100084CD8;
  if (!qword_100084CD8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IDSQuickRelayPluginAllocation,  &type metadata for IDSQuickRelayPluginAllocation);
    atomic_store(result, (unint64_t *)&qword_100084CD8);
  }

  return result;
}

uint64_t sub_100056D58(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  unint64_t v4 = *(void *)(a1 + 64);
  uint64_t v3 = *(void *)(a1 + 72);
  unint64_t v5 = *(void *)(a1 + 80);
  uint64_t v6 = *(void *)(a1 + 88);
  unint64_t v7 = *(void *)(a1 + 96);
  uint64_t v8 = *(void *)(a1 + 104);
  unint64_t v9 = *(void *)(a1 + 112);
  uint64_t v14 = *(void *)(a1 + 136);
  uint64_t v12 = *(void *)(a1 + 128);
  unint64_t v13 = *(void *)(a1 + 144);
  uint64_t v16 = *(void *)(a1 + 160);
  unint64_t v18 = *(void *)(a1 + 216);
  uint64_t v19 = *(void *)(a1 + 208);
  unint64_t v21 = *(void *)(a1 + 240);
  uint64_t v22 = *(void *)(a1 + 232);
  unint64_t v25 = *(void *)(a1 + 256);
  uint64_t v26 = *(void *)(a1 + 248);
  uint64_t v32 = *(void *)(a1 + 272);
  uint64_t v27 = *(void *)(a1 + 304);
  uint64_t v36 = *(void *)(a1 + 312);
  uint64_t v34 = *(void *)(a1 + 288);
  unint64_t v35 = *(void *)(a1 + 320);
  uint64_t v39 = *(void *)(a1 + 352);
  uint64_t v43 = *(void *)(a1 + 368);
  uint64_t v44 = *(void *)(a1 + 384);
  uint64_t v45 = *(void *)(a1 + 392);
  __int128 v78 = *(_OWORD *)(a1 + 1224);
  uint64_t v15 = *(void *)(a1 + 400);
  uint64_t v17 = *(void *)(a1 + 416);
  uint64_t v20 = *(void *)(a1 + 432);
  uint64_t v10 = *(void *)(a1 + 480);
  uint64_t v23 = *(void *)(a1 + 488);
  unint64_t v24 = *(void *)(a1 + 496);
  uint64_t v28 = *(void *)(a1 + 504);
  unint64_t v29 = *(void *)(a1 + 512);
  uint64_t v30 = *(void *)(a1 + 536);
  unint64_t v31 = *(void *)(a1 + 544);
  uint64_t v37 = *(void *)(a1 + 560);
  uint64_t v38 = *(void *)(a1 + 576);
  uint64_t v33 = *(void *)(a1 + 592);
  uint64_t v40 = *(void *)(a1 + 664);
  unint64_t v41 = *(void *)(a1 + 672);
  uint64_t v46 = *(void *)(a1 + 688);
  uint64_t v47 = *(void *)(a1 + 736);
  uint64_t v48 = *(void *)(a1 + 768);
  uint64_t v49 = *(void *)(a1 + 824);
  uint64_t v50 = *(void *)(a1 + 832);
  uint64_t v51 = *(void *)(a1 + 896);
  uint64_t v42 = *(void *)(a1 + 912);
  uint64_t v53 = *(void *)(a1 + 920);
  unint64_t v54 = *(void *)(a1 + 928);
  uint64_t v55 = *(void *)(a1 + 944);
  uint64_t v56 = *(void *)(a1 + 960);
  uint64_t v57 = *(void *)(a1 + 976);
  uint64_t v58 = *(void *)(a1 + 992);
  uint64_t v59 = *(void *)(a1 + 1008);
  uint64_t v60 = *(void *)(a1 + 1040);
  uint64_t v61 = *(void *)(a1 + 1072);
  uint64_t v52 = *(void *)(a1 + 1152);
  uint64_t v65 = *(void *)(a1 + 1160);
  uint64_t v66 = *(void *)(a1 + 1168);
  uint64_t v67 = *(void *)(a1 + 1176);
  uint64_t v68 = *(void *)(a1 + 1184);
  uint64_t v69 = *(void *)(a1 + 1192);
  uint64_t v70 = *(void *)(a1 + 1200);
  uint64_t v71 = *(void *)(a1 + 1208);
  uint64_t v72 = *(void *)(a1 + 1216);
  uint64_t v63 = *(void *)(a1 + 1104);
  uint64_t v64 = *(void *)(a1 + 1240);
  uint64_t v62 = *(void *)(a1 + 1248);
  uint64_t v73 = *(void *)(a1 + 1256);
  unint64_t v74 = *(void *)(a1 + 1264);
  uint64_t v75 = *(void *)(a1 + 1280);
  uint64_t v76 = *(void *)(a1 + 1288);
  unint64_t v77 = *(void *)(a1 + 1296);
  uint64_t v80 = *(void *)(a1 + 1328);
  uint64_t v79 = *(void *)(a1 + 1368);
  uint64_t v81 = *(void *)(a1 + 1376);
  unint64_t v82 = *(void *)(a1 + 1384);
  uint64_t v83 = *(void *)(a1 + 1392);
  unint64_t v84 = *(void *)(a1 + 1400);
  uint64_t v85 = *(void *)(a1 + 1496);
  uint64_t v86 = *(void *)(a1 + 1536);
  unint64_t v87 = *(void *)(a1 + 1544);
  uint64_t v88 = *(void *)(a1 + 1552);
  unint64_t v89 = *(void *)(a1 + 1560);
  uint64_t v90 = *(void *)(a1 + 1584);
  unint64_t v91 = *(void *)(a1 + 1592);
  uint64_t v92 = *(void *)(a1 + 1600);
  unint64_t v93 = *(void *)(a1 + 1608);
  uint64_t v95 = *(void *)(a1 + 1648);
  uint64_t v96 = *(void *)(a1 + 1664);
  uint64_t v94 = *(void *)(a1 + 1680);
  uint64_t v97 = *(void *)(a1 + 1720);
  unint64_t v98 = *(void *)(a1 + 1728);
  uint64_t v99 = *(void *)(a1 + 1760);
  uint64_t v100 = *(void *)(a1 + 1800);
  unint64_t v101 = *(void *)(a1 + 1808);
  uint64_t v102 = *(void *)(a1 + 1816);
  unint64_t v103 = *(void *)(a1 + 1824);
  uint64_t v104 = *(void *)(a1 + 1848);
  unint64_t v105 = *(void *)(a1 + 1856);
  uint64_t v106 = *(void *)(a1 + 1864);
  unint64_t v107 = *(void *)(a1 + 1872);
  uint64_t v108 = *(void *)(a1 + 1880);
  unint64_t v109 = *(void *)(a1 + 1888);
  uint64_t v110 = *(void *)(a1 + 1912);
  unint64_t v111 = *(void *)(a1 + 1920);
  unint64_t v112 = *(void *)(a1 + 1952);
  uint64_t v113 = *(void *)(a1 + 1944);
  uint64_t v115 = *(void *)(a1 + 1968);
  uint64_t v116 = *(void *)(a1 + 2040);
  uint64_t v114 = *(void *)(a1 + 2048);
  unint64_t v117 = *(void *)(a1 + 2064);
  uint64_t v118 = *(void *)(a1 + 2056);
  uint64_t v119 = *(void *)(a1 + 2136);
  uint64_t v120 = *(void *)(a1 + 2088);
  sub_1000045B4(*(void *)(a1 + 40), *(void *)(a1 + 48));
  sub_1000045B4(v2, v4);
  sub_1000045B4(v3, v5);
  sub_1000045B4(v6, v7);
  sub_1000045B4(v8, v9);
  swift_bridgeObjectRetain(v12);
  sub_1000045B4(v14, v13);
  swift_bridgeObjectRetain(v16);
  sub_1000045B4(v19, v18);
  sub_1000045B4(v22, v21);
  sub_1000045B4(v26, v25);
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRetain(v34);
  sub_1000045B4(v36, v35);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRetain(v44);
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v20);
  sub_1000045B4(v23, v24);
  sub_1000045B4(v28, v29);
  sub_1000045B4(v30, v31);
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRetain(v38);
  sub_1000045B4(v40, v41);
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRetain(v47);
  swift_bridgeObjectRetain(v48);
  swift_bridgeObjectRetain(v49);
  swift_bridgeObjectRetain(v50);
  swift_bridgeObjectRetain(v51);
  sub_1000045B4(v53, v54);
  swift_bridgeObjectRetain(v52);
  swift_bridgeObjectRetain(v55);
  swift_bridgeObjectRetain(v56);
  swift_bridgeObjectRetain(v57);
  swift_bridgeObjectRetain(v58);
  swift_bridgeObjectRetain(v59);
  swift_bridgeObjectRetain(v60);
  swift_bridgeObjectRetain(v61);
  swift_bridgeObjectRetain(v63);
  sub_100056B70(v65, v66, v67, v68, v69, v70, v71, v72, v78, *((uint64_t *)&v78 + 1), v64, v62);
  sub_1000045B4(v73, v74);
  swift_bridgeObjectRetain(v75);
  sub_1000045B4(v76, v77);
  swift_bridgeObjectRetain(v79);
  swift_bridgeObjectRetain(v80);
  sub_1000045B4(v81, v82);
  sub_1000045B4(v83, v84);
  swift_bridgeObjectRetain(v85);
  sub_1000045B4(v86, v87);
  sub_1000045B4(v88, v89);
  sub_1000045B4(v90, v91);
  sub_1000045B4(v92, v93);
  swift_bridgeObjectRetain(v94);
  swift_bridgeObjectRetain(v95);
  swift_bridgeObjectRetain(v96);
  sub_1000045B4(v97, v98);
  swift_bridgeObjectRetain(v99);
  sub_1000045B4(v100, v101);
  sub_1000045B4(v102, v103);
  sub_1000045B4(v104, v105);
  sub_1000045B4(v106, v107);
  sub_1000045B4(v108, v109);
  sub_1000045B4(v110, v111);
  sub_1000045B4(v113, v112);
  swift_bridgeObjectRetain(v114);
  swift_bridgeObjectRetain(v115);
  swift_bridgeObjectRetain(v116);
  sub_1000045B4(v118, v117);
  swift_bridgeObjectRetain(v119);
  swift_bridgeObjectRetain(v120);
  return a1;
}

uint64_t sub_100057360(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  unint64_t v4 = *(void *)(a1 + 64);
  uint64_t v3 = *(void *)(a1 + 72);
  unint64_t v6 = *(void *)(a1 + 80);
  uint64_t v5 = *(void *)(a1 + 88);
  unint64_t v8 = *(void *)(a1 + 96);
  uint64_t v7 = *(void *)(a1 + 104);
  unint64_t v9 = *(void *)(a1 + 112);
  uint64_t v12 = *(void *)(a1 + 128);
  unint64_t v14 = *(void *)(a1 + 144);
  uint64_t v15 = *(void *)(a1 + 136);
  uint64_t v16 = *(void *)(a1 + 160);
  unint64_t v18 = *(void *)(a1 + 216);
  uint64_t v19 = *(void *)(a1 + 208);
  unint64_t v21 = *(void *)(a1 + 240);
  uint64_t v22 = *(void *)(a1 + 232);
  unint64_t v25 = *(void *)(a1 + 256);
  uint64_t v26 = *(void *)(a1 + 248);
  uint64_t v29 = *(void *)(a1 + 272);
  uint64_t v30 = *(void *)(a1 + 288);
  uint64_t v33 = *(void *)(a1 + 304);
  unint64_t v35 = *(void *)(a1 + 320);
  uint64_t v36 = *(void *)(a1 + 312);
  uint64_t v38 = *(void *)(a1 + 352);
  uint64_t v40 = *(void *)(a1 + 368);
  uint64_t v42 = *(void *)(a1 + 384);
  uint64_t v10 = *(void *)(a1 + 400);
  uint64_t v44 = *(void *)(a1 + 392);
  __int128 v78 = *(_OWORD *)(a1 + 1224);
  uint64_t v13 = *(void *)(a1 + 416);
  uint64_t v17 = *(void *)(a1 + 432);
  uint64_t v20 = *(void *)(a1 + 480);
  uint64_t v23 = *(void *)(a1 + 488);
  unint64_t v24 = *(void *)(a1 + 496);
  uint64_t v27 = *(void *)(a1 + 504);
  unint64_t v28 = *(void *)(a1 + 512);
  uint64_t v31 = *(void *)(a1 + 536);
  unint64_t v32 = *(void *)(a1 + 544);
  uint64_t v34 = *(void *)(a1 + 560);
  uint64_t v37 = *(void *)(a1 + 576);
  uint64_t v39 = *(void *)(a1 + 592);
  uint64_t v41 = *(void *)(a1 + 664);
  unint64_t v43 = *(void *)(a1 + 672);
  uint64_t v45 = *(void *)(a1 + 688);
  uint64_t v46 = *(void *)(a1 + 736);
  uint64_t v47 = *(void *)(a1 + 768);
  uint64_t v48 = *(void *)(a1 + 824);
  uint64_t v49 = *(void *)(a1 + 832);
  uint64_t v50 = *(void *)(a1 + 896);
  uint64_t v51 = *(void *)(a1 + 912);
  uint64_t v52 = *(void *)(a1 + 920);
  unint64_t v53 = *(void *)(a1 + 928);
  uint64_t v54 = *(void *)(a1 + 944);
  uint64_t v55 = *(void *)(a1 + 960);
  uint64_t v56 = *(void *)(a1 + 976);
  uint64_t v57 = *(void *)(a1 + 992);
  uint64_t v58 = *(void *)(a1 + 1008);
  uint64_t v59 = *(void *)(a1 + 1040);
  uint64_t v60 = *(void *)(a1 + 1072);
  uint64_t v61 = *(void *)(a1 + 1104);
  uint64_t v65 = *(void *)(a1 + 1160);
  uint64_t v66 = *(void *)(a1 + 1168);
  uint64_t v67 = *(void *)(a1 + 1176);
  uint64_t v68 = *(void *)(a1 + 1184);
  uint64_t v69 = *(void *)(a1 + 1192);
  uint64_t v70 = *(void *)(a1 + 1200);
  uint64_t v71 = *(void *)(a1 + 1208);
  uint64_t v72 = *(void *)(a1 + 1216);
  uint64_t v63 = *(void *)(a1 + 1152);
  uint64_t v64 = *(void *)(a1 + 1240);
  uint64_t v62 = *(void *)(a1 + 1248);
  uint64_t v73 = *(void *)(a1 + 1256);
  unint64_t v74 = *(void *)(a1 + 1264);
  uint64_t v75 = *(void *)(a1 + 1280);
  uint64_t v76 = *(void *)(a1 + 1288);
  unint64_t v77 = *(void *)(a1 + 1296);
  uint64_t v79 = *(void *)(a1 + 1328);
  uint64_t v80 = *(void *)(a1 + 1368);
  uint64_t v81 = *(void *)(a1 + 1376);
  unint64_t v82 = *(void *)(a1 + 1384);
  uint64_t v83 = *(void *)(a1 + 1392);
  unint64_t v84 = *(void *)(a1 + 1400);
  uint64_t v85 = *(void *)(a1 + 1496);
  uint64_t v86 = *(void *)(a1 + 1536);
  unint64_t v87 = *(void *)(a1 + 1544);
  uint64_t v88 = *(void *)(a1 + 1552);
  unint64_t v89 = *(void *)(a1 + 1560);
  uint64_t v90 = *(void *)(a1 + 1584);
  unint64_t v91 = *(void *)(a1 + 1592);
  uint64_t v92 = *(void *)(a1 + 1600);
  unint64_t v93 = *(void *)(a1 + 1608);
  uint64_t v94 = *(void *)(a1 + 1648);
  uint64_t v95 = *(void *)(a1 + 1664);
  uint64_t v96 = *(void *)(a1 + 1680);
  uint64_t v97 = *(void *)(a1 + 1720);
  unint64_t v98 = *(void *)(a1 + 1728);
  uint64_t v99 = *(void *)(a1 + 1760);
  uint64_t v100 = *(void *)(a1 + 1800);
  unint64_t v101 = *(void *)(a1 + 1808);
  uint64_t v102 = *(void *)(a1 + 1816);
  unint64_t v103 = *(void *)(a1 + 1824);
  uint64_t v104 = *(void *)(a1 + 1848);
  unint64_t v105 = *(void *)(a1 + 1856);
  uint64_t v106 = *(void *)(a1 + 1864);
  unint64_t v107 = *(void *)(a1 + 1872);
  uint64_t v108 = *(void *)(a1 + 1880);
  unint64_t v109 = *(void *)(a1 + 1888);
  uint64_t v110 = *(void *)(a1 + 1912);
  unint64_t v111 = *(void *)(a1 + 1920);
  unint64_t v112 = *(void *)(a1 + 1952);
  uint64_t v113 = *(void *)(a1 + 1944);
  uint64_t v114 = *(void *)(a1 + 1968);
  uint64_t v115 = *(void *)(a1 + 2040);
  uint64_t v116 = *(void *)(a1 + 2048);
  unint64_t v117 = *(void *)(a1 + 2064);
  uint64_t v118 = *(void *)(a1 + 2056);
  uint64_t v119 = *(void *)(a1 + 2088);
  uint64_t v120 = *(void *)(a1 + 2136);
  sub_1000045C8(*(void *)(a1 + 40), *(void *)(a1 + 48));
  sub_1000045C8(v2, v4);
  sub_1000045C8(v3, v6);
  sub_1000045C8(v5, v8);
  sub_1000045C8(v7, v9);
  swift_bridgeObjectRelease(v12);
  sub_1000045C8(v15, v14);
  swift_bridgeObjectRelease(v16);
  sub_1000045C8(v19, v18);
  sub_1000045C8(v22, v21);
  sub_1000045C8(v26, v25);
  swift_bridgeObjectRelease(v29);
  swift_bridgeObjectRelease(v30);
  swift_bridgeObjectRelease(v33);
  sub_1000045C8(v36, v35);
  swift_bridgeObjectRelease(v38);
  swift_bridgeObjectRelease(v40);
  swift_bridgeObjectRelease(v42);
  swift_bridgeObjectRelease(v44);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(v20);
  sub_1000045C8(v23, v24);
  sub_1000045C8(v27, v28);
  sub_1000045C8(v31, v32);
  swift_bridgeObjectRelease(v34);
  swift_bridgeObjectRelease(v37);
  swift_bridgeObjectRelease(v39);
  sub_1000045C8(v41, v43);
  swift_bridgeObjectRelease(v45);
  swift_bridgeObjectRelease(v46);
  swift_bridgeObjectRelease(v47);
  swift_bridgeObjectRelease(v48);
  swift_bridgeObjectRelease(v49);
  swift_bridgeObjectRelease(v50);
  swift_bridgeObjectRelease(v51);
  sub_1000045C8(v52, v53);
  swift_bridgeObjectRelease(v54);
  swift_bridgeObjectRelease(v55);
  swift_bridgeObjectRelease(v56);
  swift_bridgeObjectRelease(v57);
  swift_bridgeObjectRelease(v58);
  swift_bridgeObjectRelease(v59);
  swift_bridgeObjectRelease(v60);
  swift_bridgeObjectRelease(v61);
  swift_bridgeObjectRelease(v63);
  sub_1000569D0(v65, v66, v67, v68, v69, v70, v71, v72, v78, *((uint64_t *)&v78 + 1), v64, v62);
  sub_1000045C8(v73, v74);
  swift_bridgeObjectRelease(v75);
  sub_1000045C8(v76, v77);
  swift_bridgeObjectRelease(v79);
  swift_bridgeObjectRelease(v80);
  sub_1000045C8(v81, v82);
  sub_1000045C8(v83, v84);
  swift_bridgeObjectRelease(v85);
  sub_1000045C8(v86, v87);
  sub_1000045C8(v88, v89);
  sub_1000045C8(v90, v91);
  sub_1000045C8(v92, v93);
  swift_bridgeObjectRelease(v94);
  swift_bridgeObjectRelease(v95);
  swift_bridgeObjectRelease(v96);
  sub_1000045C8(v97, v98);
  swift_bridgeObjectRelease(v99);
  sub_1000045C8(v100, v101);
  sub_1000045C8(v102, v103);
  sub_1000045C8(v104, v105);
  sub_1000045C8(v106, v107);
  sub_1000045C8(v108, v109);
  sub_1000045C8(v110, v111);
  sub_1000045C8(v113, v112);
  swift_bridgeObjectRelease(v114);
  swift_bridgeObjectRelease(v115);
  swift_bridgeObjectRelease(v116);
  sub_1000045C8(v118, v117);
  swift_bridgeObjectRelease(v119);
  swift_bridgeObjectRelease(v120);
  return a1;
}

void *sub_100057974(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for PropertyListDecoder(0LL);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  uint64_t v6 = PropertyListDecoder.init()();
  unint64_t v7 = sub_100057B74();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)( &v28,  &type metadata for IDSSessionAcceptSchema,  a1,  a2,  &type metadata for IDSSessionAcceptSchema,  v7);
  if (v2) {
    return (void *)swift_release(v6);
  }
  v26[6] = v34;
  v26[7] = v35;
  v26[8] = v36;
  char v27 = v37;
  v26[2] = v30;
  v26[3] = v31;
  v26[4] = v32;
  v26[5] = v33;
  v26[0] = v28;
  v26[1] = v29;
  uint64_t v38 = v28;
  uint64_t v20 = v29;
  uint64_t v21 = *((void *)&v28 + 1);
  __int128 v9 = v30;
  uint64_t v25 = *((void *)&v29 + 1);
  __int128 v10 = v31;
  unint64_t v15 = v32;
  char v23 = BYTE10(v32);
  __int16 v24 = WORD4(v32);
  __int128 v11 = v33;
  char v22 = v34;
  uint64_t v12 = *((void *)&v34 + 1);
  __int128 v13 = v35;
  uint64_t v19 = v30;
  char v18 = v36;
  uint64_t v17 = *((void *)&v36 + 1);
  char v16 = v37;
  sub_1000045B4(*((uint64_t *)&v28 + 1), v29);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  sub_1000045B4(*((uint64_t *)&v10 + 1), v15);
  sub_1000045B4(v11, *((unint64_t *)&v11 + 1));
  sub_1000045B4(v12, v13);
  BYTE2(v14) = v23;
  LOWORD(v14) = v24;
  IDSSessionAccept.init(with:blob:sessionID:participantID:sessionMessageContext:useCloudPairedControlChannel:useStunMessageIntegrity:useSecureQRControlMessage:unauthenticatedPublicKey:remoteUsePhoneContinuityLocalMessage:remoteKeyMaterialData:remoteSSRC:remoteSecStart:)( v38,  v21,  v20,  v25,  v19,  *((void *)&v9 + 1),  v10,  *((void *)&v10 + 1),  v15,  v14,  v11,  *((void *)&v11 + 1),  v22,  v12,  v13,  *((void *)&v13 + 1),  v18,  v17,  v16);
  swift_release(v6);
  return sub_10002EF00(v26);
}

unint64_t sub_100057B74()
{
  unint64_t result = qword_100084CE0;
  if (!qword_100084CE0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IDSSessionAcceptSchema,  &type metadata for IDSSessionAcceptSchema);
    atomic_store(result, (unint64_t *)&qword_100084CE0);
  }

  return result;
}

uint64_t sub_100057BB8(char *a1, char *a2)
{
  return sub_10005FDC0(*a1, *a2);
}

Swift::Int sub_100057BC4()
{
  int v1 = *v0;
  Hasher.init(_seed:)(v5, 0LL);
  if (v1) {
    uint64_t v2 = 0x64616F6C796170LL;
  }
  else {
    uint64_t v2 = 1835365481LL;
  }
  if (v1) {
    unint64_t v3 = 0xE700000000000000LL;
  }
  else {
    unint64_t v3 = 0xE400000000000000LL;
  }
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_100057C3C(uint64_t a1)
{
  if (*v1) {
    uint64_t v2 = 0x64616F6C796170LL;
  }
  else {
    uint64_t v2 = 1835365481LL;
  }
  if (*v1) {
    unint64_t v3 = 0xE700000000000000LL;
  }
  else {
    unint64_t v3 = 0xE400000000000000LL;
  }
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_100057C90(uint64_t a1)
{
  int v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2) {
    uint64_t v3 = 0x64616F6C796170LL;
  }
  else {
    uint64_t v3 = 1835365481LL;
  }
  if (v2) {
    unint64_t v4 = 0xE700000000000000LL;
  }
  else {
    unint64_t v4 = 0xE400000000000000LL;
  }
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_100057D04@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  v3._countAndFlagsBits = *a1;
  unint64_t v4 = (void *)a1[1];
  v3._object = v4;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10007F1D0, v3);
  uint64_t result = swift_bridgeObjectRelease(v4);
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

void sub_100057D60(uint64_t *a1@<X8>)
{
  uint64_t v2 = 1835365481LL;
  if (*v1) {
    uint64_t v2 = 0x64616F6C796170LL;
  }
  unint64_t v3 = 0xE400000000000000LL;
  if (*v1) {
    unint64_t v3 = 0xE700000000000000LL;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_100057D98()
{
  if (*v0) {
    return 0x64616F6C796170LL;
  }
  else {
    return 1835365481LL;
  }
}

uint64_t sub_100057DCC@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10007F1D0, v3);
  uint64_t result = swift_bridgeObjectRelease(object);
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

void sub_100057E2C(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_100057E38(uint64_t a1)
{
  unint64_t v2 = sub_100057FC4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100057E60(uint64_t a1)
{
  unint64_t v2 = sub_100057FC4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IDSActivitySharingInvitationSchema.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v8 = sub_10000264C(&qword_100084CE8);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  __int128 v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  sub_100002C78(a1, v12);
  unint64_t v14 = sub_100057FC4();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for IDSActivitySharingInvitationSchema.CodingKeys,  &type metadata for IDSActivitySharingInvitationSchema.CodingKeys,  v14,  v12,  v13);
  LOBYTE(v19[0]) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, v19, v8);
  if (!v4)
  {
    v19[0] = a3;
    v19[1] = v18;
    char v20 = 1;
    unint64_t v15 = sub_100003C08();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v19, &v20, v8, &type metadata for Data, v15);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

unint64_t sub_100057FC4()
{
  unint64_t result = qword_100084CF0;
  if (!qword_100084CF0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100071B00, &type metadata for IDSActivitySharingInvitationSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084CF0);
  }

  return result;
}

uint64_t IDSActivitySharingInvitationSchema.init(from:)(void *a1)
{
  uint64_t result = sub_100058074(a1);
  if (v1) {
    return v3;
  }
  return result;
}

uint64_t sub_10005802C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100058074(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }

  return result;
}

uint64_t sub_100058058(void *a1)
{
  return IDSActivitySharingInvitationSchema.encode(to:)(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_100058074(void *a1)
{
  uint64_t v3 = sub_10000264C(&qword_100084D10);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100002C78(a1, v7);
  unint64_t v9 = sub_100057FC4();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for IDSActivitySharingInvitationSchema.CodingKeys,  &type metadata for IDSActivitySharingInvitationSchema.CodingKeys,  v9,  v7,  v8);
  if (!v1)
  {
    LOBYTE(v14) = 0;
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)(&v14, v3);
    char v13 = 1;
    unint64_t v10 = sub_100004570();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for Data, &v13, v3, &type metadata for Data, v10);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }

  sub_100002FD4(a1);
  return v7;
}

uint64_t destroy for IDSActivitySharingInvitationSchema(uint64_t a1)
{
  return sub_100004080(*(void *)(a1 + 8), *(void *)(a1 + 16));
}

void *_s19IDSBlastDoorService34IDSActivitySharingInvitationSchemaVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  unint64_t v4 = a2[2];
  sub_100003FF0(v3, v4);
  a1[1] = v3;
  a1[2] = v4;
  return a1;
}

void *assignWithCopy for IDSActivitySharingInvitationSchema(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a2[1];
  unint64_t v4 = a2[2];
  sub_100003FF0(v3, v4);
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[2];
  a1[1] = v3;
  a1[2] = v4;
  sub_100004080(v5, v6);
  return a1;
}

__n128 initializeWithTake for IDSActivitySharingInvitationSchema(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for IDSActivitySharingInvitationSchema(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  sub_100004080(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for IDSActivitySharingInvitationSchema(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xD && *(_BYTE *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 16) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 16) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for IDSActivitySharingInvitationSchema( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)__n128 result = a2 - 13;
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 24) = 0;
    }
    if (a2)
    {
      *(void *)(result + 8) = 0LL;
      *(void *)(result + 16) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for IDSActivitySharingInvitationSchema()
{
  return &type metadata for IDSActivitySharingInvitationSchema;
}

uint64_t getEnumTagSinglePayload for IDSActivitySharingInvitationSchema.CodingKeys( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

uint64_t storeEnumTagSinglePayload for IDSActivitySharingInvitationSchema.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10005846C + 4 * byte_100071955[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000584A0 + 4 * asc_100071950[v4]))();
}

uint64_t sub_1000584A0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000584A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000584B0LL);
  }
  return result;
}

uint64_t sub_1000584BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000584C4LL);
  }
  *(_BYTE *)__n128 result = a2 + 1;
  return result;
}

uint64_t sub_1000584C8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000584D0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_1000584DC(_BYTE *result, char a2)
{
  *__n128 result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for IDSActivitySharingInvitationSchema.CodingKeys()
{
  return &type metadata for IDSActivitySharingInvitationSchema.CodingKeys;
}

unint64_t sub_1000584FC()
{
  unint64_t result = qword_100084CF8;
  if (!qword_100084CF8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100071AD8, &type metadata for IDSActivitySharingInvitationSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084CF8);
  }

  return result;
}

unint64_t sub_100058544()
{
  unint64_t result = qword_100084D00;
  if (!qword_100084D00)
  {
    unint64_t result = swift_getWitnessTable(&unk_100071A10, &type metadata for IDSActivitySharingInvitationSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084D00);
  }

  return result;
}

unint64_t sub_10005858C()
{
  unint64_t result = qword_100084D08;
  if (!qword_100084D08)
  {
    unint64_t result = swift_getWitnessTable(&unk_100071A38, &type metadata for IDSActivitySharingInvitationSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084D08);
  }

  return result;
}

void sub_1000585D0(char *a1)
{
}

void sub_1000585DC()
{
}

void sub_1000585E4()
{
  __asm { BR              X10 }

uint64_t sub_100058620(uint64_t a1)
{
  return swift_bridgeObjectRelease(0xE800000000000000LL);
}

void sub_1000586C8(uint64_t a1)
{
}

unint64_t sub_1000586D0@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_100059AC4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000586FC()
{
  return ((uint64_t (*)(void))((char *)sub_10005872C + 4 * byte_100071B56[*v0]))();
}

void sub_10005872C(void *a1@<X8>)
{
  *a1 = 0x4C52556572616873LL;
  a1[1] = 0xE800000000000000LL;
}

void sub_100058748(void *a1@<X8>)
{
  *a1 = 0x6974617469766E69LL;
  a1[1] = 0xEF6E656B6F546E6FLL;
}

void sub_100058770(uint64_t a1@<X8>)
{
  *(_WORD *)(a1 + 14) = -4864;
}

void sub_100058798(void *a1@<X8>)
{
  *a1 = 0x656D6954746E6573LL;
  a1[1] = 0xE800000000000000LL;
}

void sub_1000587B4(void *a1@<X8>)
{
  *a1 = 0x6D614E70756F7267LL;
  a1[1] = 0xE900000000000065LL;
}

uint64_t sub_1000587D4()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100058804 + 4 * byte_100071B5C[*v0]))( 0x444970756F7267LL,  0xE700000000000000LL);
}

uint64_t sub_100058804()
{
  return 0x4C52556572616873LL;
}

uint64_t sub_10005881C()
{
  return 0x6974617469766E69LL;
}

uint64_t sub_100058840()
{
  return 0x4865657469766E69LL;
}

uint64_t sub_100058864()
{
  return 0x656D6954746E6573LL;
}

uint64_t sub_10005887C()
{
  return 0x6D614E70756F7267LL;
}

unint64_t sub_100058898@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_100059AC4(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000588BC(uint64_t a1)
{
  unint64_t v2 = sub_100058B24();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000588E4(uint64_t a1)
{
  unint64_t v2 = sub_100058B24();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IDSKCSharingInvitationSchema.encode(to:)(void *a1)
{
  int v3 = v1;
  uint64_t v5 = sub_10000264C(&qword_100084D18);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100002C78(a1, v9);
  unint64_t v11 = sub_100058B24();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for IDSKCSharingInvitationSchema.CodingKeys,  &type metadata for IDSKCSharingInvitationSchema.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = v3[1];
  LOBYTE(v29) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v29, v5);
  if (!v2)
  {
    uint64_t v14 = v3[2];
    uint64_t v15 = v3[3];
    LOBYTE(v29) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &v29, v5);
    __int128 v29 = *((_OWORD *)v3 + 2);
    char v28 = 2;
    unint64_t v16 = sub_100003C08();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v29, &v28, v5, &type metadata for Data, v16);
    uint64_t v17 = v3[6];
    uint64_t v18 = v3[7];
    LOBYTE(v29) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v17, v18, &v29, v5);
    uint64_t v19 = type metadata accessor for IDSKCSharingInvitationSchema(0LL);
    uint64_t v20 = (uint64_t)v3 + *(int *)(v19 + 32);
    LOBYTE(v29) = 4;
    uint64_t v21 = type metadata accessor for Date(0LL);
    uint64_t v22 = sub_100004DB8( &qword_100084240,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v20, &v29, v5, v21, v22);
    char v23 = (uint64_t *)((char *)v3 + *(int *)(v19 + 36));
    uint64_t v24 = *v23;
    uint64_t v25 = v23[1];
    LOBYTE(v29) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v24, v25, &v29, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_100058B24()
{
  unint64_t result = qword_100084D20;
  if (!qword_100084D20)
  {
    unint64_t result = swift_getWitnessTable(&unk_100071D54, &type metadata for IDSKCSharingInvitationSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084D20);
  }

  return result;
}

uint64_t type metadata accessor for IDSKCSharingInvitationSchema(uint64_t a1)
{
  uint64_t result = qword_100084D88;
  if (!qword_100084D88) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for IDSKCSharingInvitationSchema);
  }
  return result;
}

uint64_t IDSKCSharingInvitationSchema.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v28 = a2;
  uint64_t v3 = sub_10000264C(&qword_100084248);
  __chkstk_darwin(v3);
  uint64_t v5 = (uint64_t *)((char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v29 = sub_10000264C(&qword_100084D28);
  uint64_t v6 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v7 = type metadata accessor for IDSKCSharingInvitationSchema(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a1[3];
  uint64_t v10 = a1[4];
  __int128 v30 = a1;
  sub_100002C78(a1, v11);
  unint64_t v12 = sub_100058B24();
  uint64_t v13 = v31;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for IDSKCSharingInvitationSchema.CodingKeys,  &type metadata for IDSKCSharingInvitationSchema.CodingKeys,  v12,  v11,  v10);
  if (v13) {
    return sub_100002FD4(v30);
  }
  __int128 v31 = v5;
  LOBYTE(v32) = 0;
  uint64_t v14 = v29;
  *(void *)uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)(&v32, v29);
  *((void *)v9 + 1) = v15;
  LOBYTE(v32) = 1;
  *((void *)v9 + 2) = KeyedDecodingContainer.decode(_:forKey:)(&v32, v14);
  *((void *)v9 + 3) = v16;
  char v33 = 2;
  unint64_t v17 = sub_100004570();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for Data, &v33, v14, &type metadata for Data, v17);
  uint64_t v18 = v6;
  *((_OWORD *)v9 + 2) = v32;
  LOBYTE(v32) = 3;
  *((void *)v9 + 6) = KeyedDecodingContainer.decode(_:forKey:)(&v32, v14);
  *((void *)v9 + 7) = v19;
  uint64_t v20 = type metadata accessor for Date(0LL);
  LOBYTE(v32) = 4;
  uint64_t v21 = sub_100004DB8( &qword_100084258,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  uint64_t v22 = v31;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v31, v20, &v32, v14, v20, v21);
  sub_10000A0E0((uint64_t)v22, (uint64_t)&v9[*(int *)(v7 + 32)]);
  LOBYTE(v32) = 5;
  uint64_t v23 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v32, v14);
  uint64_t v25 = v24;
  (*(void (**)(void, uint64_t))(v18 + 8))(0LL, v14);
  uint64_t v26 = (uint64_t *)&v9[*(int *)(v7 + 36)];
  uint64_t *v26 = v23;
  v26[1] = v25;
  sub_100058F74((uint64_t)v9, v28);
  sub_100002FD4(v30);
  return sub_100058FB8((uint64_t)v9);
}

uint64_t sub_100058F74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for IDSKCSharingInvitationSchema(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100058FB8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for IDSKCSharingInvitationSchema(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100058FF4()
{
  return sub_100004DB8( &qword_100084648,  type metadata accessor for IDSKCSharingInvitationSchema,  (uint64_t)&protocol conformance descriptor for IDSKCSharingInvitationSchema);
}

uint64_t sub_100059020()
{
  return sub_100004DB8( &qword_1000845E0,  type metadata accessor for IDSKCSharingInvitationSchema,  (uint64_t)&protocol conformance descriptor for IDSKCSharingInvitationSchema);
}

uint64_t sub_10005904C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return IDSKCSharingInvitationSchema.init(from:)(a1, a2);
}

uint64_t sub_100059060(void *a1)
{
  return IDSKCSharingInvitationSchema.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for IDSKCSharingInvitationSchema( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v19);
  }

  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a2[4];
    unint64_t v10 = a2[5];
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    sub_100003FF0(v9, v10);
    a1[4] = v9;
    a1[5] = v10;
    uint64_t v11 = a2[7];
    a1[6] = a2[6];
    a1[7] = v11;
    uint64_t v12 = *(int *)(a3 + 32);
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for Date(0LL);
    uint64_t v16 = *(void *)(v15 - 8);
    unint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
    swift_bridgeObjectRetain(v11);
    if (v17(v14, 1LL, v15))
    {
      uint64_t v18 = sub_10000264C(&qword_100084248);
      memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
    }

    uint64_t v20 = *(int *)(a3 + 36);
    uint64_t v21 = (uint64_t *)((char *)a1 + v20);
    uint64_t v22 = (uint64_t *)((char *)a2 + v20);
    uint64_t v23 = v22[1];
    *uint64_t v21 = *v22;
    v21[1] = v23;
    swift_bridgeObjectRetain(v23);
  }

  return a1;
}

uint64_t destroy for IDSKCSharingInvitationSchema(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  return swift_bridgeObjectRelease(*(void *)((char *)a1 + *(int *)(a2 + 36) + 8));
}

void *initializeWithCopy for IDSKCSharingInvitationSchema(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a2[4];
  unint64_t v9 = a2[5];
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  sub_100003FF0(v8, v9);
  a1[4] = v8;
  a1[5] = v9;
  uint64_t v10 = a2[7];
  a1[6] = a2[6];
  a1[7] = v10;
  uint64_t v11 = *(int *)(a3 + 32);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for Date(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  swift_bridgeObjectRetain(v10);
  if (v16(v13, 1LL, v14))
  {
    uint64_t v17 = sub_10000264C(&qword_100084248);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  uint64_t v18 = *(int *)(a3 + 36);
  uint64_t v19 = (void *)((char *)a1 + v18);
  uint64_t v20 = (void *)((char *)a2 + v18);
  uint64_t v21 = v20[1];
  *uint64_t v19 = *v20;
  v19[1] = v21;
  swift_bridgeObjectRetain(v21);
  return a1;
}

void *assignWithCopy for IDSKCSharingInvitationSchema(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  uint64_t v8 = a2[3];
  uint64_t v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a2[4];
  unint64_t v11 = a2[5];
  sub_100003FF0(v10, v11);
  uint64_t v12 = a1[4];
  unint64_t v13 = a1[5];
  a1[4] = v10;
  a1[5] = v11;
  sub_100004080(v12, v13);
  a1[6] = a2[6];
  uint64_t v14 = a2[7];
  uint64_t v15 = a1[7];
  a1[7] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  uint64_t v16 = *(int *)(a3 + 32);
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = type metadata accessor for Date(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  int v22 = v21(v17, 1LL, v19);
  int v23 = v21(v18, 1LL, v19);
  if (!v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 24))(v17, v18, v19);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
    goto LABEL_6;
  }

  if (v23)
  {
LABEL_6:
    uint64_t v24 = sub_10000264C(&qword_100084248);
    memcpy(v17, v18, *(void *)(*(void *)(v24 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0LL, 1LL, v19);
LABEL_7:
  uint64_t v25 = *(int *)(a3 + 36);
  uint64_t v26 = (void *)((char *)a1 + v25);
  uint64_t v27 = (void *)((char *)a2 + v25);
  void *v26 = *v27;
  uint64_t v28 = v27[1];
  uint64_t v29 = v26[1];
  v26[1] = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v29);
  return a1;
}

_OWORD *initializeWithTake for IDSKCSharingInvitationSchema(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  __int128 v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = *(int *)(a3 + 32);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = sub_10000264C(&qword_100084248);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  *(_OWORD *)((char *)a1 + *(int *)(a3 + 36)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 36));
  return a1;
}

void *assignWithTake for IDSKCSharingInvitationSchema(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = a1[1];
  *a1 = *(void *)a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = a1[3];
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a1[4];
  unint64_t v11 = a1[5];
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  sub_100004080(v10, v11);
  uint64_t v12 = *(void *)(a2 + 56);
  uint64_t v13 = a1[7];
  a1[6] = *(void *)(a2 + 48);
  a1[7] = v12;
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = *(int *)(a3 + 32);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)(a2 + v14);
  uint64_t v17 = type metadata accessor for Date(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1LL, v17);
  int v21 = v19(v16, 1LL, v17);
  if (!v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v15, v16, v17);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
    goto LABEL_6;
  }

  if (v21)
  {
LABEL_6:
    uint64_t v22 = sub_10000264C(&qword_100084248);
    memcpy(v15, v16, *(void *)(*(void *)(v22 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0LL, 1LL, v17);
LABEL_7:
  uint64_t v23 = *(int *)(a3 + 36);
  uint64_t v24 = (void *)((char *)a1 + v23);
  uint64_t v25 = (uint64_t *)(a2 + v23);
  uint64_t v27 = *v25;
  uint64_t v26 = v25[1];
  uint64_t v28 = v24[1];
  *uint64_t v24 = v27;
  v24[1] = v26;
  swift_bridgeObjectRelease(v28);
  return a1;
}

uint64_t getEnumTagSinglePayload for IDSKCSharingInvitationSchema(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100059794);
}

uint64_t sub_100059794(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = sub_10000264C(&qword_100084248);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 32),  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for IDSKCSharingInvitationSchema( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100059820);
}

uint64_t sub_100059820(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = sub_10000264C(&qword_100084248);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 32),  a2,  a2,  v7);
  }

  return result;
}

void sub_100059898(uint64_t a1)
{
  v4[0] = &unk_100071C10;
  v4[1] = &unk_100071C10;
  v4[2] = &unk_100071C28;
  void v4[3] = &unk_100071C10;
  sub_10000A998(319LL);
  if (v3 <= 0x3F)
  {
    void v4[4] = *(void *)(v2 - 8) + 64LL;
    void v4[5] = &unk_100071C40;
    swift_initStructMetadata(a1, 256LL, 6LL, v4, a1 + 16);
  }

uint64_t storeEnumTagSinglePayload for IDSKCSharingInvitationSchema.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_10005996C + 4 * byte_100071B67[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1000599A0 + 4 * byte_100071B62[v4]))();
}

uint64_t sub_1000599A0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000599A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000599B0LL);
  }
  return result;
}

uint64_t sub_1000599BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000599C4LL);
  }
  *(_BYTE *)uint64_t result = a2 + 5;
  return result;
}

uint64_t sub_1000599C8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000599D0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IDSKCSharingInvitationSchema.CodingKeys()
{
  return &type metadata for IDSKCSharingInvitationSchema.CodingKeys;
}

unint64_t sub_1000599F0()
{
  unint64_t result = qword_100084DD0;
  if (!qword_100084DD0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100071D2C, &type metadata for IDSKCSharingInvitationSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084DD0);
  }

  return result;
}

unint64_t sub_100059A38()
{
  unint64_t result = qword_100084DD8;
  if (!qword_100084DD8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100071C64, &type metadata for IDSKCSharingInvitationSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084DD8);
  }

  return result;
}

unint64_t sub_100059A80()
{
  unint64_t result = qword_100084DE0;
  if (!qword_100084DE0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100071C8C, &type metadata for IDSKCSharingInvitationSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084DE0);
  }

  return result;
}

unint64_t sub_100059AC4(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10007F220, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 6) {
    return 6LL;
  }
  else {
    return v3;
  }
}

Swift::Int sub_100059B0C()
{
  return Hasher._finalize()();
}

uint64_t sub_100059B68(uint64_t a1)
{
  return String.hash(into:)(a1, 0x61447463656A624FLL, 0xED000079654B6174LL);
}

Swift::Int sub_100059B8C(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_100059BE4@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  v3._countAndFlagsBits = *a1;
  uint64_t v4 = (void *)a1[1];
  v3._object = v4;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10007F2D0, v3);
  uint64_t result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

void sub_100059C34(uint64_t a1@<X8>)
{
  *(_WORD *)(a1 + 14) = -4864;
}

uint64_t sub_100059C5C()
{
  return 0x61447463656A624FLL;
}

uint64_t sub_100059C80@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10007F308, v3);
  uint64_t result = swift_bridgeObjectRelease(object);
  *a2 = v5 != 0;
  return result;
}

uint64_t sub_100059CD4(uint64_t a1)
{
  unint64_t v2 = sub_100059E28();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100059CFC(uint64_t a1)
{
  unint64_t v2 = sub_100059E28();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IDSHealthInvitationSchema.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000264C(&qword_100084DE8);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_100002C78(a1, v10);
  unint64_t v12 = sub_100059E28();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for IDSHealthInvitationSchema.CodingKeys,  &type metadata for IDSHealthInvitationSchema.CodingKeys,  v12,  v10,  v11);
  v16[0] = a2;
  v16[1] = a3;
  unint64_t v13 = sub_100003C08();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v16, v14, v6, &type metadata for Data, v13);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_100059E28()
{
  unint64_t result = qword_100084DF0;
  if (!qword_100084DF0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100071F58, &type metadata for IDSHealthInvitationSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084DF0);
  }

  return result;
}

void *IDSHealthInvitationSchema.init(from:)(void *a1)
{
  return sub_100059EC0(a1);
}

void *sub_100059E80@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  unint64_t result = sub_100059EC0(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }

  return result;
}

uint64_t sub_100059EA8(void *a1)
{
  return IDSHealthInvitationSchema.encode(to:)(a1, *v1, v1[1]);
}

void *sub_100059EC0(void *a1)
{
  uint64_t v3 = sub_10000264C(&qword_100084E10);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v9 = sub_100002C78(a1, v7);
  unint64_t v10 = sub_100059E28();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for IDSHealthInvitationSchema.CodingKeys,  &type metadata for IDSHealthInvitationSchema.CodingKeys,  v10,  v7,  v8);
  if (v1)
  {
    sub_100002FD4(a1);
  }

  else
  {
    unint64_t v11 = sub_100004570();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for Data, v12, v3, &type metadata for Data, v11);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v9 = v14;
    sub_100002FD4(a1);
  }

  return v9;
}

uint64_t *initializeBufferWithCopyOfBuffer for IDSHealthInvitationSchema(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_100003FF0(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t destroy for IDSHealthInvitationSchema(uint64_t a1)
{
  return sub_100004080(*(void *)a1, *(void *)(a1 + 8));
}

uint64_t *assignWithCopy for IDSHealthInvitationSchema(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_100003FF0(*a2, v4);
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_100004080(v5, v6);
  return a1;
}

__n128 initializeWithTake for IDSHomeKitInvitationSchema.IDSHomeKitInvitationRequestedCapabilitiesSchema( __n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t *assignWithTake for IDSHealthInvitationSchema(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_100004080(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for IDSHealthInvitationSchema(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xD && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for IDSHealthInvitationSchema( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)__n128 result = a2 - 13;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 16) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0LL;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for IDSHealthInvitationSchema()
{
  return &type metadata for IDSHealthInvitationSchema;
}

uint64_t storeEnumTagSinglePayload for IDSHealthInvitationSchema.CodingKeys(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_10005A1AC + 4 * byte_100071DB0[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_10005A1CC + 4 * byte_100071DB5[v4]))();
  }
}

_BYTE *sub_10005A1AC(_BYTE *result, char a2)
{
  *__n128 result = a2;
  return result;
}

_BYTE *sub_10005A1CC(_BYTE *result)
{
  *__n128 result = 0;
  return result;
}

_DWORD *sub_10005A1D4(_DWORD *result, int a2)
{
  *__n128 result = a2;
  return result;
}

_WORD *sub_10005A1DC(_WORD *result, __int16 a2)
{
  *__n128 result = a2;
  return result;
}

_WORD *sub_10005A1E4(_WORD *result)
{
  *__n128 result = 0;
  return result;
}

_DWORD *sub_10005A1EC(_DWORD *result)
{
  *__n128 result = 0;
  return result;
}

ValueMetadata *type metadata accessor for IDSHealthInvitationSchema.CodingKeys()
{
  return &type metadata for IDSHealthInvitationSchema.CodingKeys;
}

unint64_t sub_10005A20C()
{
  unint64_t result = qword_100084DF8;
  if (!qword_100084DF8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100071F30, &type metadata for IDSHealthInvitationSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084DF8);
  }

  return result;
}

unint64_t sub_10005A254()
{
  unint64_t result = qword_100084E00;
  if (!qword_100084E00)
  {
    unint64_t result = swift_getWitnessTable(&unk_100071E68, &type metadata for IDSHealthInvitationSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084E00);
  }

  return result;
}

unint64_t sub_10005A29C()
{
  unint64_t result = qword_100084E08;
  if (!qword_100084E08)
  {
    unint64_t result = swift_getWitnessTable(&unk_100071E90, &type metadata for IDSHealthInvitationSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084E08);
  }

  return result;
}

ValueMetadata *type metadata accessor for IDSClientMessageUnpacker()
{
  return &type metadata for IDSClientMessageUnpacker;
}

unint64_t sub_10005A2F8()
{
  unint64_t result = qword_100084190;
  if (!qword_100084190)
  {
    uint64_t v1 = type metadata accessor for IDSClientMessageResult(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for IDSClientMessageResult, v1);
    atomic_store(result, (unint64_t *)&qword_100084190);
  }

  return result;
}

uint64_t sub_10005A340(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = ((uint64_t (*)(void))IDSClientMessageContext.service.getter)();
  uint64_t v10 = v9;
  if (*(void *)(a4 + 16) && (unint64_t v11 = sub_10005A5E0(v8, v9), (v12 & 1) != 0))
  {
    sub_10005A69C(*(void *)(a4 + 56) + 40 * v11, (uint64_t)&v23);
    swift_bridgeObjectRelease(v10);
    if (*((void *)&v24 + 1))
    {
      sub_10005A684(&v23, (uint64_t)v26);
      uint64_t v13 = v27;
      uint64_t v14 = v28;
      sub_100002C78(v26, v27);
      dispatch thunk of ContextualUnpacker.unpack(from:with:)(a1, a2, a3, v13, *(void *)(v14 + 8));
      return sub_100002FD4(v26);
    }
  }

  else
  {
    uint64_t v25 = 0LL;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    swift_bridgeObjectRelease(v10);
  }

  uint64_t v16 = sub_10005A644((uint64_t)&v23);
  uint64_t v17 = IDSClientMessageContext.service.getter(v16);
  uint64_t v19 = v18;
  unint64_t v20 = sub_1000097C0();
  uint64_t v21 = swift_allocError(&type metadata for IDSClientMessageUnpackingError, v20, 0LL, 0LL);
  *(void *)uint64_t v22 = v17;
  *(void *)(v22 + 8) = v19;
  *(_BYTE *)(v22 + 16) = 1;
  return swift_willThrow(v21);
}

unint64_t sub_10005A48C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_10000264C(&qword_100084E48);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10005AABC(v7, (uint64_t)&v16);
    uint64_t v8 = v16;
    uint64_t v9 = v17;
    unint64_t result = sub_10005A5E0(v16, v17);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    char v12 = (uint64_t *)(v4[6] + 16 * result);
    *char v12 = v8;
    v12[1] = v9;
    unint64_t result = sub_10005A684(&v18, v4[7] + 40 * result);
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4[2] = v15;
    v7 += 56LL;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10005A5B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005A340(a1, a2, a3, *v3);
}

unint64_t sub_10005A5E0(uint64_t a1, uint64_t a2)
{
  Swift::Int v5 = Hasher._finalize()();
  return sub_10005A710(a1, a2, v5);
}

uint64_t sub_10005A644(uint64_t a1)
{
  uint64_t v2 = sub_10000264C(&qword_100084E18);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10005A684(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_10005A69C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t sub_10005A6E0(uint64_t a1)
{
  uint64_t v3 = static Hasher._hash(seed:_:)(*(void *)(v1 + 40), a1);
  return sub_10005A7F0(a1, v3);
}

unint64_t sub_10005A710(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    uint64_t v11 = v10[1];
    BOOL v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0LL) & 1) == 0)
    {
      uint64_t v13 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v13;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          break;
        }
        BOOL v14 = (void *)(v9 + 16 * v6);
        uint64_t v15 = v14[1];
        BOOL v16 = *v14 == a1 && v15 == a2;
      }

      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0LL) & 1) == 0);
    }
  }

  return v6;
}

unint64_t sub_10005A7F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }

  return result;
}

unint64_t sub_10005A88C()
{
  uint64_t v0 = sub_10000264C(&qword_100084E20);
  uint64_t inited = swift_initStackObject(v0, v4);
  *(_OWORD *)(inited + 16) = xmmword_100071FB0;
  *(void *)(inited + 32) = 0xD00000000000002ELL;
  *(void *)(inited + 40) = 0x800000010006D980LL;
  *(void *)(inited + 72) = &type metadata for IDSSampleMessageUnpacker;
  *(void *)(inited + 80) = sub_10005A9AC();
  *(void *)(inited + 88) = 0xD000000000000026LL;
  *(void *)(inited + 96) = 0x800000010006D9B0LL;
  *(void *)(inited + 128) = &type metadata for FTAudioVideoMessageUnpacker;
  unint64_t v2 = sub_10005A9F0();
  *(void *)(inited + 136) = v2;
  *(void *)(inited + 144) = 0xD000000000000026LL;
  *(void *)(inited + 152) = 0x800000010006D9E0LL;
  *(void *)(inited + 184) = &type metadata for FTAudioVideoMessageUnpacker;
  *(void *)(inited + 192) = v2;
  *(void *)(inited + 200) = 0xD000000000000023LL;
  *(void *)(inited + 208) = 0x800000010006DA10LL;
  *(void *)(inited + 240) = &type metadata for FTLivePhotoMessageUnpacker;
  *(void *)(inited + 248) = sub_10005AA34();
  *(void *)(inited + 256) = 0xD000000000000025LL;
  *(void *)(inited + 264) = 0x800000010006DA40LL;
  *(void *)(inited + 296) = &type metadata for SafetyMonitorMessageUnpacker;
  *(void *)(inited + 304) = sub_10005AA78();
  return sub_10005A48C(inited);
}

unint64_t sub_10005A9AC()
{
  unint64_t result = qword_100084E28;
  if (!qword_100084E28)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000724F4, &type metadata for IDSSampleMessageUnpacker);
    atomic_store(result, (unint64_t *)&qword_100084E28);
  }

  return result;
}

unint64_t sub_10005A9F0()
{
  unint64_t result = qword_100084E30;
  if (!qword_100084E30)
  {
    unint64_t result = swift_getWitnessTable(&unk_100072104, &type metadata for FTAudioVideoMessageUnpacker);
    atomic_store(result, (unint64_t *)&qword_100084E30);
  }

  return result;
}

unint64_t sub_10005AA34()
{
  unint64_t result = qword_100084E38;
  if (!qword_100084E38)
  {
    unint64_t result = swift_getWitnessTable(&unk_100072234, &type metadata for FTLivePhotoMessageUnpacker);
    atomic_store(result, (unint64_t *)&qword_100084E38);
  }

  return result;
}

unint64_t sub_10005AA78()
{
  unint64_t result = qword_100084E40;
  if (!qword_100084E40)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006EC58, &type metadata for SafetyMonitorMessageUnpacker);
    atomic_store(result, (unint64_t *)&qword_100084E40);
  }

  return result;
}

uint64_t sub_10005AABC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000264C(&qword_100084E50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005AB08(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

uint64_t destroy for IDSClientMessageUnpackingError(uint64_t a1)
{
  return sub_10005AB28(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_10005AB28(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

uint64_t _s19IDSBlastDoorService30IDSClientMessageUnpackingErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_10005AB08(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for IDSClientMessageUnpackingError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_10005AB08(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  char v8 = *(_BYTE *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_10005AB28(v6, v7, v8);
  return a1;
}

__n128 initializeWithTake for IDSClientMessageUnpackingError(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for IDSClientMessageUnpackingError(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  char v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_10005AB28(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for IDSClientMessageUnpackingError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for IDSClientMessageUnpackingError( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 17) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 16) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_10005ACB8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_10005ACC0(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for IDSClientMessageUnpackingError()
{
  return &type metadata for IDSClientMessageUnpackingError;
}

ValueMetadata *type metadata accessor for FTAudioVideoMessageUnpacker()
{
  return &type metadata for FTAudioVideoMessageUnpacker;
}

uint64_t sub_10005ACEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v66 = a1;
  uint64_t v67 = a2;
  uint64_t v65 = a4;
  uint64_t v5 = type metadata accessor for IDSSessionReinitiate(0LL);
  uint64_t v59 = *(void *)(v5 - 8);
  uint64_t v60 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for IDSSessionAccept(0LL);
  uint64_t v57 = *(void *)(v8 - 8);
  uint64_t v58 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for IDSSessionCancel(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  BOOL v14 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for IDSSessionDecline(0LL);
  uint64_t v55 = *(void *)(v15 - 8);
  uint64_t v56 = v15;
  __chkstk_darwin(v15);
  uint64_t v61 = (char *)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for IDSClientMessageType(0LL);
  uint64_t v62 = *(void *)(v17 - 8);
  uint64_t v63 = v17;
  __chkstk_darwin(v17);
  uint64_t v64 = (char *)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for IDSSessionInvitation(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v54 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  switch(a3)
  {
    case 232LL:
      uint64_t v28 = v74;
      uint64_t result = sub_10002EF94(v66, v67, (uint64_t)v22);
      if (!v28)
      {
        uint64_t v29 = v64;
        (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v64, v22, v19);
        (*(void (**)(char *, void, uint64_t))(v62 + 104))( v29,  enum case for IDSClientMessageType.sessionInvitation(_:),  v63);
        IDSClientMessageResult.init(result:)(v29);
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v22, v19);
      }

      break;
    case 233LL:
      uint64_t v30 = v74;
      uint64_t result = (uint64_t)sub_100057974(v66, v67);
      if (!v30)
      {
        uint64_t v32 = v57;
        uint64_t v31 = v58;
        char v33 = v64;
        (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v64, v10, v58);
        (*(void (**)(char *, void, uint64_t))(v62 + 104))( v33,  enum case for IDSClientMessageType.sessionAccept(_:),  v63);
        IDSClientMessageResult.init(result:)(v33);
        __int128 v34 = *(uint64_t (**)(char *, uint64_t))(v32 + 8);
        __int128 v35 = v10;
        goto LABEL_15;
      }

      break;
    case 234LL:
    case 237LL:
      uint64_t v23 = type metadata accessor for PropertyListDecoder(0LL);
      swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
      uint64_t v24 = PropertyListDecoder.init()();
      unint64_t v25 = sub_10002A4B4();
      uint64_t v26 = v74;
      dispatch thunk of PropertyListDecoder.decode<A>(_:from:)( v68,  &type metadata for IDSSessionDeclineSchema,  v66,  v67,  &type metadata for IDSSessionDeclineSchema,  v25);
      if (!v26)
      {
        uint64_t v44 = v68[0];
        uint64_t v45 = v68[1];
        uint64_t v46 = v69;
        uint64_t v47 = v70;
        uint64_t v48 = v71;
        uint64_t v49 = v72;
        unint64_t v50 = v73;
        swift_bridgeObjectRetain(v69);
        swift_bridgeObjectRetain(v48);
        sub_1000045B4(v49, v50);
        IDSSessionDecline.init(with:sessionID:participantID:sessionMessageContext:)(v44, v45, v46, v47, v48, v49, v50);
        swift_bridgeObjectRelease(v48);
        swift_bridgeObjectRelease(v46);
        swift_release(v24);
        sub_1000045C8(v49, v50);
        uint64_t v51 = v55;
        uint64_t v31 = v56;
        uint64_t v52 = v64;
        unint64_t v53 = v61;
        (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v64, v61, v56);
        (*(void (**)(char *, void, uint64_t))(v62 + 104))( v52,  enum case for IDSClientMessageType.sessionDecline(_:),  v63);
        IDSClientMessageResult.init(result:)(v52);
        __int128 v34 = *(uint64_t (**)(char *, uint64_t))(v51 + 8);
        __int128 v35 = v53;
        goto LABEL_15;
      }

      uint64_t result = swift_release(v24);
      break;
    case 235LL:
      uint64_t v36 = v74;
      uint64_t result = sub_10005F6D0(v66, v67);
      if (!v36)
      {
        char v37 = v64;
        (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v64, v14, v11);
        (*(void (**)(char *, void, uint64_t))(v62 + 104))( v37,  enum case for IDSClientMessageType.sessionCancel(_:),  v63);
        IDSClientMessageResult.init(result:)(v37);
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
      }

      break;
    case 238LL:
      uint64_t v41 = v74;
      uint64_t result = sub_10005B8C4(v66, v67);
      if (!v41)
      {
        uint64_t v42 = v59;
        uint64_t v31 = v60;
        unint64_t v43 = v64;
        (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v64, v7, v60);
        (*(void (**)(char *, void, uint64_t))(v62 + 104))( v43,  enum case for IDSClientMessageType.sessionReinitiate(_:),  v63);
        IDSClientMessageResult.init(result:)(v43);
        __int128 v34 = *(uint64_t (**)(char *, uint64_t))(v42 + 8);
        __int128 v35 = v7;
LABEL_15:
        uint64_t result = v34(v35, v31);
      }

      break;
    default:
      unint64_t v38 = sub_1000097C0();
      uint64_t v39 = swift_allocError(&type metadata for IDSClientMessageUnpackingError, v38, 0LL, 0LL);
      *(void *)uint64_t v40 = a3;
      *(void *)(v40 + 8) = 0LL;
      *(_BYTE *)(v40 + 16) = 0;
      uint64_t result = swift_willThrow(v39);
      break;
  }

  return result;
}

uint64_t sub_10005B1D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100005440(a1, a2, a3);
}

unint64_t sub_10005B1E4(uint64_t a1)
{
  unint64_t result = sub_10005B208();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10005B208()
{
  unint64_t result = qword_100084E58;
  if (!qword_100084E58)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000720CC, &type metadata for FTAudioVideoMessageUnpacker);
    atomic_store(result, (unint64_t *)&qword_100084E58);
  }

  return result;
}

ValueMetadata *type metadata accessor for IDSCommandWebTunnelResponseUnpacker()
{
  return &type metadata for IDSCommandWebTunnelResponseUnpacker;
}

unint64_t sub_10005B260()
{
  unint64_t result = qword_100084E60;
  if (!qword_100084E60)
  {
    uint64_t v1 = type metadata accessor for IDSCommandWebTunnelResponse(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for IDSCommandWebTunnelResponse, v1);
    atomic_store(result, (unint64_t *)&qword_100084E60);
  }

  return result;
}

uint64_t sub_10005B2A8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v64 = a2;
  uint64_t v5 = sub_10000264C(&qword_100084E70);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v48 - v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v48 - v12;
  uint64_t v14 = type metadata accessor for APSUserPayloadHttpHeaders(0LL);
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL);
  v15(v13, 1LL, 1LL, v14);
  uint64_t v16 = a1[14];
  uint64_t v66 = v3;
  uint64_t v65 = v8;
  if (v16 != 1)
  {
    uint64_t v56 = v15;
    uint64_t v17 = (uint64_t)v13;
    uint64_t v18 = a1[23];
    uint64_t v19 = a1[24];
    uint64_t v20 = a1[22];
    uint64_t v60 = a1[21];
    uint64_t v61 = v18;
    uint64_t v21 = a1[19];
    uint64_t v22 = a1[20];
    uint64_t v23 = a1[18];
    uint64_t v62 = a1[17];
    uint64_t v63 = v21;
    uint64_t v24 = a1[15];
    uint64_t v25 = a1[16];
    uint64_t v58 = a1[13];
    uint64_t v59 = v24;
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v20);
    uint64_t v47 = v19;
    uint64_t v13 = (char *)v17;
    uint64_t v26 = v16;
    uint64_t v27 = v66;
    APSUserPayloadHttpHeaders.init(with:responseIdentifierString:strictTransportSecurity:traceId:splunkHint:asHttpHeader:)( v58,  v26,  v59,  v25,  v62,  v23,  v63,  v22,  v60,  v20,  v61,  v47);
    uint64_t result = sub_10005B83C(v17);
    if (v27) {
      return result;
    }
    uint64_t v66 = 0LL;
    v56(v11, 0LL, 1LL, v14);
    sub_10005B87C((uint64_t)v11, v17);
    uint64_t v8 = v65;
  }

  uint64_t v29 = *a1;
  uint64_t v62 = a1[1];
  uint64_t v63 = v29;
  LODWORD(v61) = *((unsigned __int8 *)a1 + 16);
  uint64_t v31 = a1[3];
  unint64_t v30 = a1[4];
  uint64_t v60 = a1[5];
  LODWORD(v59) = *((unsigned __int8 *)a1 + 48);
  uint64_t v32 = a1[7];
  uint64_t v57 = v13;
  uint64_t v58 = v32;
  uint64_t v48 = a1[8];
  uint64_t v56 = (void (*)(char *, uint64_t, uint64_t, uint64_t))a1[9];
  int v55 = *((unsigned __int8 *)a1 + 80);
  uint64_t v33 = a1[11];
  uint64_t v34 = a1[12];
  unint64_t v53 = v30;
  uint64_t v54 = v33;
  sub_10005B7F4((uint64_t)v13, (uint64_t)v8);
  uint64_t v36 = a1[31];
  __int128 v35 = a1 + 31;
  uint64_t v37 = *(v35 - 6);
  unint64_t v38 = *(v35 - 5);
  uint64_t v39 = *(v35 - 4);
  uint64_t v40 = *(v35 - 3);
  uint64_t v51 = v36;
  uint64_t v52 = v39;
  uint64_t v41 = *(v35 - 2);
  unint64_t v42 = *(v35 - 1);
  int v50 = *((unsigned __int8 *)v35 + 8);
  uint64_t v43 = v35[2];
  uint64_t v44 = v35[3];
  uint64_t v49 = v43;
  sub_1000045B4(v31, v30);
  swift_bridgeObjectRetain(v34);
  uint64_t v45 = v48;
  swift_bridgeObjectRetain(v48);
  sub_1000045B4(v37, v38);
  swift_bridgeObjectRetain(v40);
  sub_1000045B4(v41, v42);
  swift_bridgeObjectRetain(v44);
  LOBYTE(v46) = v50;
  IDSCommandWebTunnelResponse.init(with:messageId:messageUUID:responseStatus:contentType:epochTimeNanos:httpUrl:httpHeaders:httpBody:httpBodyUrl:httpBodyKey:httpResponseStatus:httpErrorMsg:)( v63,  v62,  v61,  v31,  v53,  v60,  v59,  v58,  v45,  v56,  (_BYTE)v55,  v54,  v34,  v65,  v37,  v38,  v52,  v40,  v41,  v42,  v51,  v46,  v49,  v44);
  return sub_10005B83C((uint64_t)v57);
}

uint64_t sub_10005B5D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = type metadata accessor for PropertyListDecoder(0LL);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  uint64_t v8 = PropertyListDecoder.init()();
  unint64_t v9 = sub_10005B6A4();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)( v11,  &type metadata for IDSCommandWebTunnelResponseSchema,  a1,  a2,  &type metadata for IDSCommandWebTunnelResponseSchema,  v9);
  uint64_t result = swift_release(v8);
  if (!v3)
  {
    memcpy(__dst, v11, sizeof(__dst));
    sub_10005B2A8(__dst, a3);
    return sub_10005B6E8((uint64_t)__dst);
  }

  return result;
}

unint64_t sub_10005B6A4()
{
  unint64_t result = qword_100084E68;
  if (!qword_100084E68)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IDSCommandWebTunnelResponseSchema,  &type metadata for IDSCommandWebTunnelResponseSchema);
    atomic_store(result, (unint64_t *)&qword_100084E68);
  }

  return result;
}

uint64_t sub_10005B6E8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v3 = *(void *)(a1 + 96);
  uint64_t v4 = *(void *)(a1 + 120);
  uint64_t v16 = *(void *)(a1 + 112);
  uint64_t v17 = *(void *)(a1 + 104);
  uint64_t v5 = *(void *)(a1 + 128);
  uint64_t v6 = *(void *)(a1 + 136);
  uint64_t v7 = *(void *)(a1 + 144);
  uint64_t v8 = *(void *)(a1 + 152);
  __int128 v12 = *(_OWORD *)(a1 + 168);
  uint64_t v9 = *(void *)(a1 + 184);
  uint64_t v10 = *(void *)(a1 + 192);
  uint64_t v14 = *(void *)(a1 + 200);
  uint64_t v15 = *(void *)(a1 + 160);
  unint64_t v13 = *(void *)(a1 + 208);
  uint64_t v18 = *(void *)(a1 + 224);
  uint64_t v20 = *(void *)(a1 + 232);
  unint64_t v19 = *(void *)(a1 + 240);
  uint64_t v21 = *(void *)(a1 + 272);
  sub_1000045C8(*(void *)(a1 + 24), *(void *)(a1 + 32));
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  sub_1000569D0(v17, v16, v4, v5, v6, v7, v8, v15, v12, *((uint64_t *)&v12 + 1), v9, v10);
  sub_1000045C8(v14, v13);
  swift_bridgeObjectRelease(v18);
  sub_1000045C8(v20, v19);
  swift_bridgeObjectRelease(v21);
  return a1;
}

uint64_t sub_10005B7F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000264C(&qword_100084E70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005B83C(uint64_t a1)
{
  uint64_t v2 = sub_10000264C(&qword_100084E70);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10005B87C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000264C(&qword_100084E70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005B8C4(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = type metadata accessor for IDSSessionReinitiate.IDSSessionReinitiateSubcommand(0LL);
  uint64_t v5 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for IDSSessionReinitiateSchema(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for PropertyListDecoder(0LL);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  uint64_t v12 = PropertyListDecoder.init()();
  unint64_t v13 = sub_10005BA4C();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v10, v8, a1, a2, v8, v13);
  if (!v2)
  {
    uint64_t v14 = *(void *)v10;
    uint64_t v20 = *((void *)v10 + 1);
    uint64_t v21 = v14;
    uint64_t v15 = *((void *)v10 + 2);
    uint64_t v19 = *((void *)v10 + 3);
    uint64_t v16 = *((void *)v10 + 4);
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, &v10[*(int *)(v8 + 28)], v22);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v16);
    IDSSessionReinitiate.init(with:sessionID:participantID:sessionReinitiateSubcommand:)(v21, v20, v15, v19, v16, v7);
    sub_100003078((uint64_t)v10);
  }

  return swift_release(v12);
}

unint64_t sub_10005BA4C()
{
  unint64_t result = qword_100084E78;
  if (!qword_100084E78)
  {
    uint64_t v1 = type metadata accessor for IDSSessionReinitiateSchema(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for IDSSessionReinitiateSchema, v1);
    atomic_store(result, (unint64_t *)&qword_100084E78);
  }

  return result;
}

ValueMetadata *type metadata accessor for IDSInvitationUnpacker()
{
  return &type metadata for IDSInvitationUnpacker;
}

uint64_t sub_10005BAA4()
{
  return sub_100004DB8( &qword_100084E80,  (uint64_t (*)(uint64_t))&type metadata accessor for IDSInvitation,  (uint64_t)&protocol conformance descriptor for IDSInvitation);
}

void sub_10005BAD0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v24 = a1;
  uint64_t v2 = type metadata accessor for IDSActivitySharingInvitation(0LL);
  uint64_t v19 = *(void *)(v2 - 8);
  uint64_t v20 = v2;
  __chkstk_darwin(v2);
  uint64_t v22 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for IDSHealthInvitation(0LL);
  uint64_t v17 = *(void *)(v4 - 8);
  uint64_t v18 = v4;
  __chkstk_darwin(v4);
  uint64_t v21 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for IDSKCSharingInvitationSchema(0LL);
  __chkstk_darwin(v6);
  uint64_t v7 = type metadata accessor for IDSHomeKitInvitationSchema(0LL);
  __chkstk_darwin(v7);
  uint64_t v8 = sub_10000264C(&qword_100084248);
  __chkstk_darwin(v8);
  uint64_t v16 = type metadata accessor for IDSSampleInvitation(0LL);
  __chkstk_darwin(v16);
  uint64_t v9 = type metadata accessor for IDSSampleInvitationSchema(0LL);
  __chkstk_darwin(v9);
  uint64_t v10 = type metadata accessor for IDSDictionaryContextClientSchema(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100030F74(v24, (uint64_t)v12, v13);
  uint64_t v14 = (char *)sub_10005BCF4 + 4 * byte_100072180[swift_getEnumCaseMultiPayload(v12, v10)];
  __asm { BR              X10 }

uint64_t sub_10005BCF4()
{
  uint64_t v7 = *v0;
  uint64_t v8 = v0[1];
  sub_10005C48C((uint64_t)v0 + *(int *)(v2 + 20), v1, &qword_100084248);
  uint64_t v9 = (uint64_t *)((char *)v0 + *(int *)(v2 + 24));
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v8);
  uint64_t v12 = v10;
  uint64_t v13 = *(void *)(v6 - 88);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))IDSSampleInvitation.init(with:date:reason:))( v7,  v8,  v1,  v12,  v11);
  if (!v13)
  {
    uint64_t v14 = *(void *)(v6 - 96);
    (*(void (**)(uint64_t, uint64_t, void))(v5 + 32))(v14, v3, *(void *)(v6 - 152));
    uint64_t v15 = enum case for IDSDictionaryContext.idsSampleInvitation(_:);
    uint64_t v16 = type metadata accessor for IDSDictionaryContext(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 104LL))(v14, v15, v16);
  }

  return sub_100030078((uint64_t)v0, type metadata accessor for IDSSampleInvitationSchema);
}

uint64_t sub_10005BF24@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v63 = (char *)a1;
  uint64_t v64 = a2;
  uint64_t v56 = a3;
  uint64_t v3 = type metadata accessor for IDSInvitationContextType(0LL);
  uint64_t v58 = *(void *)(v3 - 8);
  uint64_t v59 = v3;
  __chkstk_darwin(v3);
  uint64_t v60 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v61 = type metadata accessor for IDSDictionaryContext(0LL);
  uint64_t v57 = *(void *)(v61 - 8);
  __chkstk_darwin(v61);
  uint64_t v62 = (uint64_t)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for IDSDictionaryContextClientSchema(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for IDSDictionaryContextData(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_10000264C(&qword_100084E88);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v49 - v17;
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v49 - v19;
  uint64_t v21 = (int *)type metadata accessor for IDSInvitationSchema(0LL);
  __chkstk_darwin(v21);
  uint64_t v23 = (uint64_t *)((char *)&v49 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v24 = type metadata accessor for PropertyListDecoder(0LL);
  swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
  uint64_t v25 = PropertyListDecoder.init()();
  uint64_t v26 = sub_100004DB8( &qword_100084E90,  type metadata accessor for IDSInvitationSchema,  (uint64_t)&protocol conformance descriptor for IDSInvitationSchema);
  uint64_t v27 = v65;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v23, v21, v63, v64, v21, v26);
  if (v27) {
    return swift_release(v25);
  }
  uint64_t v63 = v15;
  uint64_t v64 = v18;
  uint64_t v65 = v25;
  uint64_t v29 = type metadata accessor for IDSInvitationContext(0LL);
  uint64_t v55 = *(void *)(v29 - 8);
  unint64_t v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v55 + 56);
  v30(v20, 1LL, 1LL, v29);
  uint64_t v31 = type metadata accessor for IDSInvitationContextSchema(0LL);
  sub_100030F74((uint64_t)v23 + *(int *)(v31 + 24), (uint64_t)v11, type metadata accessor for IDSDictionaryContextData);
  sub_10002FFF0((uint64_t)v11, (uint64_t)v8, type metadata accessor for IDSDictionaryContextClientSchema);
  uint64_t v33 = *v23;
  uint64_t v32 = v23[1];
  swift_bridgeObjectRetain(v32);
  sub_10005BAD0((uint64_t)v8, v62);
  uint64_t v50 = v29;
  uint64_t v51 = v30;
  uint64_t v52 = v23;
  unint64_t v53 = v8;
  uint64_t v54 = v20;
  swift_bridgeObjectRelease(v32);
  uint64_t v34 = v57;
  __int128 v35 = v60;
  uint64_t v36 = v61;
  (*(void (**)(char *, uint64_t, uint64_t))(v57 + 16))(v60, v62, v61);
  (*(void (**)(char *, void, uint64_t))(v58 + 104))( v35,  enum case for IDSInvitationContextType.dictionary(_:),  v59);
  swift_bridgeObjectRetain(v32);
  uint64_t v37 = (uint64_t)v64;
  IDSInvitationContext.init(with:contextType:context:)(v33, v32, 1LL, v35);
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v62, v36);
  sub_100030078((uint64_t)v53, type metadata accessor for IDSDictionaryContextClientSchema);
  uint64_t v38 = (uint64_t)v54;
  sub_10005C404((uint64_t)v54);
  uint64_t v39 = v50;
  v51((char *)v37, 0LL, 1LL, v50);
  sub_10005C444(v37, v38);
  uint64_t v40 = (uint64_t)v63;
  sub_10005C48C(v38, (uint64_t)v63, &qword_100084E88);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v40, 1LL, v39);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    uint64_t v41 = v21[6];
    uint64_t v42 = (uint64_t)v52;
    uint64_t v43 = *(void *)((char *)v52 + v21[5]);
    uint64_t v44 = *(void *)((char *)v52 + v41);
    uint64_t v45 = *((unsigned __int8 *)v52 + v41 + 8);
    int v46 = (void *)((char *)v52 + v21[7]);
    uint64_t v47 = *v46;
    uint64_t v48 = v46[1];
    swift_bridgeObjectRetain(v48);
    IDSInvitation.init(with:state:expiration:identifier:)(v40, v43, v44, v45, v47, v48);
    swift_release(v65);
    sub_10005C404(v38);
    return sub_100030078(v42, type metadata accessor for IDSInvitationSchema);
  }

  return result;
}

uint64_t sub_10005C3F0@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10005BF24(a1, a2, a3);
}

uint64_t sub_10005C404(uint64_t a1)
{
  uint64_t v2 = sub_10000264C(&qword_100084E88);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10005C444(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000264C(&qword_100084E88);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005C48C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10000264C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

ValueMetadata *type metadata accessor for FTLivePhotoMessageUnpacker()
{
  return &type metadata for FTLivePhotoMessageUnpacker;
}

uint64_t sub_10005C4E0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000050D8(a1);
}

unint64_t sub_10005C4F4(uint64_t a1)
{
  unint64_t result = sub_10005C518();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10005C518()
{
  unint64_t result = qword_100084E98;
  if (!qword_100084E98)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000721FC, &type metadata for FTLivePhotoMessageUnpacker);
    atomic_store(result, (unint64_t *)&qword_100084E98);
  }

  return result;
}

uint64_t sub_10005C55C@<X0>(char **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v134 = a2;
  uint64_t v4 = sub_10000264C(&qword_1000846F8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v143 = (uint64_t)&v127 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v142 = (uint64_t)&v127 - v7;
  uint64_t v133 = type metadata accessor for IDSHomeKitInvitation(0LL);
  uint64_t v132 = *(void *)(v133 - 8);
  __chkstk_darwin(v133);
  uint64_t v138 = (char *)&v127 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_10000264C(&qword_100084248);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v141 = (uint64_t)&v127 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v153 = (uint64_t)&v127 - v13;
  __chkstk_darwin(v12);
  uint64_t v152 = (uint64_t)&v127 - v14;
  uint64_t v15 = sub_10000264C(&qword_100084EA0);
  __chkstk_darwin(v15);
  uint64_t v146 = (char *)&v127 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for IDSHomeKitInviteeScheduleYearDayRule(0LL);
  uint64_t v157 = *(void *)(v17 - 8);
  uint64_t v158 = v17;
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v150 = (char *)&v127 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18);
  unint64_t v144 = (char *)&v127 - v20;
  uint64_t v151 = type metadata accessor for IDSHomeKitInviteeScheduleYearDayRuleSchema(0LL);
  uint64_t v135 = *(void *)(v151 - 8);
  __chkstk_darwin(v151);
  uint64_t v154 = (char *)&v127 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = type metadata accessor for IDSHomeKitInviteeScheduleWeekDayRule(0LL);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = __chkstk_darwin(v22);
  unint64_t v159 = (char *)&v127 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v156 = (char *)&v127 - v27;
  __chkstk_darwin(v26);
  unint64_t v148 = (char *)&v127 - v28;
  uint64_t v29 = sub_10000264C(&qword_100084EA8);
  uint64_t v30 = __chkstk_darwin(v29);
  uint64_t v140 = (uint64_t)&v127 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = __chkstk_darwin(v30);
  unint64_t v136 = (char *)&v127 - v33;
  __chkstk_darwin(v32);
  uint64_t v145 = (uint64_t)&v127 - v34;
  uint64_t v35 = sub_10000264C(&qword_100084EB0);
  uint64_t v36 = __chkstk_darwin(v35);
  uint64_t v137 = (uint64_t)&v127 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v38 = __chkstk_darwin(v36);
  uint64_t v40 = (char *)&v127 - v39;
  __chkstk_darwin(v38);
  uint64_t v155 = (uint64_t)&v127 - v41;
  uint64_t v42 = sub_10000264C(&qword_100084EB8);
  uint64_t v43 = __chkstk_darwin(v42);
  uint64_t v139 = (uint64_t)&v127 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v45 = __chkstk_darwin(v43);
  uint64_t v47 = (char *)&v127 - v46;
  __chkstk_darwin(v45);
  uint64_t v49 = (char *)&v127 - v48;
  uint64_t v50 = type metadata accessor for IDSHomeKitInvitation.IDSHomeKitInvitationRequestedCapabilities(0LL);
  uint64_t v51 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56LL);
  unint64_t v149 = v49;
  v51(v49, 1LL, 1LL, v50);
  uint64_t v147 = (int *)type metadata accessor for IDSHomeKitInvitationSchema(0LL);
  uint64_t v52 = (double *)((char *)a1 + v147[6]);
  uint64_t v53 = *((void *)v52 + 1);
  if (v53)
  {
    double v54 = *v52;
    uint64_t v55 = swift_bridgeObjectRetain(v53);
    IDSHomeKitInvitation.IDSHomeKitInvitationRequestedCapabilities.init(with:homeSupportedFeatures:)(v55, v54);
    if (v2)
    {
LABEL_48:
      uint64_t v74 = (uint64_t)v149;
      return sub_1000096E8(v74, &qword_100084EB8);
    }

    uint64_t v56 = a1;
    uint64_t v57 = (uint64_t)v149;
    sub_1000096E8((uint64_t)v149, &qword_100084EB8);
    v51(v47, 0LL, 1LL, v50);
    uint64_t v58 = v57;
    a1 = v56;
    sub_10003DF8C((uint64_t)v47, v58, &qword_100084EB8);
  }

  uint64_t v59 = type metadata accessor for CloudKitSharingToken(0LL);
  uint64_t v60 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v59 - 8) + 56LL);
  v60(v155, 1LL, 1LL, v59);
  uint64_t v61 = (uint64_t *)((char *)a1 + v147[16]);
  unint64_t v62 = v61[1];
  if (v62 >> 60 == 15)
  {
    uint64_t v63 = v155;
  }

  else
  {
    unint64_t v131 = a1;
    uint64_t v64 = *v61;
    sub_100003FF0(*v61, v62);
    static IDSHomeKitInvitation.decodeCloudKitToken(_:)(v64, v62);
    if (v2)
    {
      sub_1000045C8(v64, v62);
LABEL_47:
      sub_1000096E8(v155, &qword_100084EB0);
      goto LABEL_48;
    }

    uint64_t v65 = v155;
    sub_1000096E8(v155, &qword_100084EB0);
    unint64_t v66 = v62;
    uint64_t v63 = v65;
    sub_1000045C8(v64, v66);
    v60((uint64_t)v40, 0LL, 1LL, v59);
    sub_10003DF8C((uint64_t)v40, v65, &qword_100084EB0);
    a1 = v131;
  }

  uint64_t v67 = type metadata accessor for IDSHomeKitInviteeSchedule(0LL);
  uint64_t v68 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v67 - 8) + 56LL);
  uint64_t v69 = v145;
  uint64_t v130 = v67;
  uint64_t v129 = v68;
  ((void (*)(uint64_t, uint64_t, uint64_t))v68)(v145, 1LL, 1LL);
  uint64_t v70 = (uint64_t *)((char *)a1 + v147[10]);
  uint64_t v71 = *v70;
  uint64_t v72 = v70[1];
  unint64_t v73 = v156;
  if (*v70)
  {
    if (v71 == 1)
    {
      uint64_t v74 = (uint64_t)v149;
      goto LABEL_45;
    }

    uint64_t v77 = *(void *)(v71 + 16);
    if (v77)
    {
      uint64_t v128 = v70[1];
      unint64_t v131 = a1;
      uint64_t v127 = swift_bridgeObjectRetain(v71);
      __int128 v78 = (unsigned __int8 *)(v127 + 72);
      uint64_t v75 = &_swiftEmptyArrayStorage;
      do
      {
        IDSHomeKitInviteeScheduleWeekDayRule.init(with:endTime:daysOfTheWeek:)( *((void *)v78 - 5),  *(v78 - 32),  *((void *)v78 - 3),  *(v78 - 16),  *((void *)v78 - 1),  *v78);
        if (v2)
        {
          swift_bridgeObjectRelease(v127);
          uint64_t v83 = v75;
LABEL_40:
          swift_bridgeObjectRelease(v83);
          goto LABEL_46;
        }

        uint64_t v79 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
        uint64_t v80 = v148;
        v79(v148, v73, v22);
        v79(v159, v80, v22);
        if ((swift_isUniquelyReferenced_nonNull_native(v75) & 1) == 0) {
          uint64_t v75 = sub_10006B85C(0LL, v75[2] + 1LL, 1LL, v75);
        }
        unint64_t v82 = v75[2];
        unint64_t v81 = v75[3];
        if (v82 >= v81 >> 1) {
          uint64_t v75 = sub_10006B85C(v81 > 1, v82 + 1, 1LL, v75);
        }
        v78 += 48;
        v75[2] = v82 + 1;
        v79( (char *)v75 + ((*(unsigned __int8 *)(v23 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80))
        + *(void *)(v23 + 72) * v82,
          v159,
          v22);
        --v77;
        unint64_t v73 = v156;
      }

      while (v77);
      swift_bridgeObjectRelease(v127);
      a1 = v131;
      uint64_t v63 = v155;
      uint64_t v72 = v128;
      uint64_t v76 = (uint64_t)v146;
      if (!v128) {
        goto LABEL_38;
      }
    }

    else
    {
      uint64_t v75 = &_swiftEmptyArrayStorage;
      uint64_t v63 = v155;
      uint64_t v76 = (uint64_t)v146;
      if (!v72) {
        goto LABEL_38;
      }
    }
  }

  else
  {
    uint64_t v75 = &_swiftEmptyArrayStorage;
    uint64_t v76 = (uint64_t)v146;
    if (!v72) {
      goto LABEL_38;
    }
  }

  uint64_t v84 = *(void *)(v72 + 16);
  if (v84)
  {
    unint64_t v131 = a1;
    uint64_t v85 = v72 + ((*(unsigned __int8 *)(v135 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v135 + 80));
    uint64_t v156 = *(char **)(v135 + 72);
    uint64_t v128 = v72;
    swift_bridgeObjectRetain(v72);
    unint64_t v159 = (char *)&_swiftEmptyArrayStorage;
    uint64_t v86 = (uint64_t)v154;
    do
    {
      sub_10005D260(v85, v86);
      uint64_t v87 = v152;
      sub_10005C48C(v86, v152, &qword_100084248);
      uint64_t v88 = v153;
      sub_10005C48C(v86 + *(int *)(v151 + 20), v153, &qword_100084248);
      IDSHomeKitInviteeScheduleYearDayRule.init(with:endDate:)(v87, v88);
      if (v2)
      {
        sub_10005D2A4(v86);
        swift_bridgeObjectRelease(v128);
        swift_bridgeObjectRelease(v75);
        uint64_t v83 = v159;
        goto LABEL_40;
      }

      uint64_t v90 = v157;
      uint64_t v89 = v158;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v157 + 56))(v76, 0LL, 1LL, v158);
      sub_10005D2A4(v86);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v90 + 48))(v76, 1LL, v89) == 1)
      {
        sub_1000096E8(v76, &qword_100084EA0);
      }

      else
      {
        uint64_t v91 = v76;
        uint64_t v92 = *(void (**)(char *, uint64_t, uint64_t))(v90 + 32);
        unint64_t v93 = v144;
        v92(v144, v91, v89);
        v92(v150, (uint64_t)v93, v89);
        uint64_t v94 = v159;
        if ((swift_isUniquelyReferenced_nonNull_native(v159) & 1) == 0) {
          uint64_t v94 = (char *)sub_10006B848(0LL, *((void *)v94 + 2) + 1LL, 1LL, v94);
        }
        unint64_t v96 = *((void *)v94 + 2);
        unint64_t v95 = *((void *)v94 + 3);
        if (v96 >= v95 >> 1) {
          uint64_t v94 = (char *)sub_10006B848(v95 > 1, v96 + 1, 1LL, v94);
        }
        *((void *)v94 + 2) = v96 + 1;
        unint64_t v97 = (*(unsigned __int8 *)(v157 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v157 + 80);
        unint64_t v159 = v94;
        v92(&v94[v97 + *(void *)(v157 + 72) * v96], (uint64_t)v150, v158);
        uint64_t v76 = (uint64_t)v146;
      }

      v85 += (uint64_t)v156;
      --v84;
      uint64_t v86 = (uint64_t)v154;
    }

    while (v84);
    swift_bridgeObjectRelease(v128);
    a1 = v131;
    uint64_t v63 = v155;
    unint64_t v98 = v159;
    goto LABEL_42;
  }

LABEL_38:
  unint64_t v98 = &_swiftEmptyArrayStorage;
LABEL_42:
  uint64_t v99 = (uint64_t)v136;
  IDSHomeKitInviteeSchedule.init(with:yearDayRules:)(v75, v98);
  uint64_t v69 = v145;
  sub_1000096E8(v145, &qword_100084EA8);
  uint64_t v74 = (uint64_t)v149;
  if (v2)
  {
    sub_1000096E8(v63, &qword_100084EB0);
    return sub_1000096E8(v74, &qword_100084EB8);
  }

  v129(v99, 0LL, 1LL, v130);
  sub_10003DF8C(v99, v69, &qword_100084EA8);
LABEL_45:
  uint64_t v100 = a1[1];
  unint64_t v159 = *a1;
  unint64_t v101 = v147;
  sub_10005C48C((uint64_t)a1 + v147[5], v141, &qword_100084248);
  sub_10005C48C(v74, v139, &qword_100084EB8);
  uint64_t v102 = v101[7];
  unint64_t v103 = (char *)a1 + v101[8];
  uint64_t v158 = *(void *)v103;
  LODWORD(v157) = v103[8];
  LODWORD(v156) = *((unsigned __int8 *)a1 + v101[9]);
  LODWORD(v154) = *((unsigned __int8 *)a1 + v102);
  sub_10005C48C(v69, v140, &qword_100084EA8);
  sub_10005C48C((uint64_t)a1 + v101[11], v142, &qword_1000846F8);
  uint64_t v104 = (uint64_t *)((char *)a1 + v101[12]);
  uint64_t v105 = v63;
  uint64_t v106 = *v104;
  unint64_t v107 = v104[1];
  uint64_t v108 = (uint64_t *)((char *)a1 + v101[13]);
  uint64_t v109 = *v108;
  uint64_t v152 = v108[1];
  uint64_t v153 = v109;
  sub_10005C48C((uint64_t)a1 + v101[14], v143, &qword_1000846F8);
  uint64_t v110 = v105;
  uint64_t v111 = v137;
  sub_10005C48C(v110, v137, &qword_100084EB0);
  unint64_t v112 = (uint64_t *)((char *)a1 + v101[17]);
  uint64_t v113 = *v112;
  uint64_t v114 = v112[1];
  uint64_t v115 = (char **)((char *)a1 + v101[18]);
  uint64_t v150 = *v115;
  uint64_t v151 = v113;
  LODWORD(v148) = *((unsigned __int8 *)v115 + 8);
  uint64_t v116 = v101[20];
  unint64_t v117 = (char *)a1 + v101[19];
  uint64_t v147 = *(int **)v117;
  LODWORD(v146) = v117[8];
  uint64_t v118 = *(uint64_t *)((char *)a1 + v116);
  unint64_t v119 = *(unint64_t *)((char *)a1 + v116 + 8);
  swift_bridgeObjectRetain(v100);
  sub_1000045B4(v106, v107);
  swift_bridgeObjectRetain(v114);
  uint64_t v120 = v152;
  swift_bridgeObjectRetain(v152);
  sub_1000045B4(v118, v119);
  uint64_t v126 = v106;
  unint64_t v121 = v138;
  IDSHomeKitInvitation.init(with:inviteExpiryDate:requestedCapabilities:homeSuppressInviteNotification:inviteePrivilege:doesHomeHaveCameras:inviteeSchedule:homeUUID:controllerPublicKey:controllerPairingName:invitationIdentifier:homeInvitationShareToken:userId:invitationState:presenceAuthorizationStatus:issuerPublicKeyExternalRepresentation:)( v159,  v100,  v141,  v139,  v154,  v158,  v157,  v156,  v140,  v142,  v126,  v107,  v153,  v120,  v143,  v111,  v151,  v114,  v150,  (_BYTE)v148,  v147,  (_BYTE)v146,  v118,  v119);
  if (v2)
  {
LABEL_46:
    sub_1000096E8(v145, &qword_100084EA8);
    goto LABEL_47;
  }

  sub_1000096E8(v145, &qword_100084EA8);
  sub_1000096E8(v155, &qword_100084EB0);
  sub_1000096E8((uint64_t)v149, &qword_100084EB8);
  uint64_t v123 = v134;
  (*(void (**)(uint64_t, char *, uint64_t))(v132 + 32))(v134, v121, v133);
  uint64_t v124 = enum case for IDSDictionaryContext.idsHomekitInvitation(_:);
  uint64_t v125 = type metadata accessor for IDSDictionaryContext(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v125 - 8) + 104LL))(v123, v124, v125);
}

uint64_t sub_10005D260(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for IDSHomeKitInviteeScheduleYearDayRuleSchema(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005D2A4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for IDSHomeKitInviteeScheduleYearDayRuleSchema(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t IDSCommandWebTunnelResponseSchema.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000264C(&qword_100084EC0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v32[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100002C78(a1, v9);
  unint64_t v11 = sub_10005D6C8();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for IDSCommandWebTunnelResponseSchema.CodingKeys,  &type metadata for IDSCommandWebTunnelResponseSchema.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  v32[0] = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v32, v5);
  if (!v2)
  {
    uint64_t v13 = v3[1];
    uint64_t v14 = *((unsigned __int8 *)v3 + 16);
    v32[0] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v13, v14, v32, v5);
    sub_10003DF8C((uint64_t)(v3 + 3), (uint64_t)v36, &qword_100084158);
    sub_10003DF8C((uint64_t)v36, (uint64_t)v32, &qword_100084158);
    char v37 = 2;
    unint64_t v15 = sub_100003C08();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v32, &v37, v5, &type metadata for Data, v15);
    uint64_t v16 = v3[5];
    uint64_t v17 = *((unsigned __int8 *)v3 + 48);
    v32[0] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, v32, v5);
    uint64_t v18 = v3[7];
    uint64_t v19 = v3[8];
    v32[0] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, v32, v5);
    uint64_t v20 = v3[9];
    uint64_t v21 = *((unsigned __int8 *)v3 + 80);
    v32[0] = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20, v21, v32, v5);
    uint64_t v22 = v3[11];
    uint64_t v23 = v3[12];
    v32[0] = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v22, v23, v32, v5);
    sub_10003DF8C((uint64_t)(v3 + 13), (uint64_t)v35, &qword_100084AA8);
    sub_10003DF8C((uint64_t)v35, (uint64_t)v32, &qword_100084AA8);
    char v37 = 7;
    unint64_t v24 = sub_10003DE7C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)( v32,  &v37,  v5,  &type metadata for IDSMadridProtocolHttpHeaders,  v24);
    sub_10003DF8C((uint64_t)(v3 + 25), (uint64_t)v34, &qword_100084158);
    sub_10003DF8C((uint64_t)v34, (uint64_t)v32, &qword_100084158);
    char v37 = 8;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v32, &v37, v5, &type metadata for Data, v15);
    uint64_t v25 = v3[27];
    uint64_t v26 = v3[28];
    v32[0] = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v25, v26, v32, v5);
    sub_10003DF8C((uint64_t)(v3 + 29), (uint64_t)v33, &qword_100084158);
    sub_10003DF8C((uint64_t)v33, (uint64_t)v32, &qword_100084158);
    char v37 = 10;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v32, &v37, v5, &type metadata for Data, v15);
    uint64_t v27 = v3[31];
    uint64_t v28 = *((unsigned __int8 *)v3 + 256);
    v32[0] = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v27, v28, v32, v5);
    uint64_t v29 = v3[33];
    uint64_t v30 = v3[34];
    v32[0] = 12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v29, v30, v32, v5);
  }

  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_10005D6C8()
{
  unint64_t result = qword_100084EC8;
  if (!qword_100084EC8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000723F0, &type metadata for IDSCommandWebTunnelResponseSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084EC8);
  }

  return result;
}

void *IDSCommandWebTunnelResponseSchema.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  unint64_t result = sub_10005DB38(a1, __src);
  if (!v2) {
    return memcpy(a2, __src, 0x118uLL);
  }
  return result;
}

uint64_t sub_10005D75C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10005D784 + 4 * byte_100072250[a1]))( 99LL,  0xE100000000000000LL);
}

uint64_t sub_10005D784()
{
  return 105LL;
}

uint64_t sub_10005D78C()
{
  return 85LL;
}

uint64_t sub_10005D794()
{
  return 115LL;
}

uint64_t sub_10005D79C()
{
  return 21603LL;
}

uint64_t sub_10005D7A8()
{
  return 101LL;
}

uint64_t sub_10005D7B0()
{
  return 117LL;
}

uint64_t sub_10005D7B8()
{
  return 104LL;
}

uint64_t sub_10005D7C0()
{
  return 98LL;
}

uint64_t sub_10005D7C8()
{
  return 30050LL;
}

uint64_t sub_10005D7D4()
{
  return 27490LL;
}

uint64_t sub_10005D7E0()
{
  return 29544LL;
}

uint64_t sub_10005D7EC()
{
  return 29288LL;
}

uint64_t sub_10005D7F8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10005D820 + 4 * byte_10007225D[a1]))( 99LL,  0xE100000000000000LL);
}

uint64_t sub_10005D820()
{
  return 105LL;
}

uint64_t sub_10005D828()
{
  return 85LL;
}

uint64_t sub_10005D830()
{
  return 115LL;
}

uint64_t sub_10005D838()
{
  return 21603LL;
}

uint64_t sub_10005D844()
{
  return 101LL;
}

uint64_t sub_10005D84C()
{
  return 117LL;
}

uint64_t sub_10005D854()
{
  return 104LL;
}

uint64_t sub_10005D85C()
{
  return 98LL;
}

uint64_t sub_10005D864()
{
  return 30050LL;
}

uint64_t sub_10005D870()
{
  return 27490LL;
}

uint64_t sub_10005D87C()
{
  return 29544LL;
}

uint64_t sub_10005D888()
{
  return 29288LL;
}

uint64_t sub_10005D894(void *a1)
{
  return IDSCommandWebTunnelResponseSchema.encode(to:)(a1);
}

uint64_t sub_10005D8E4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2 = *a2;
  uint64_t v3 = sub_10005D75C(*a1);
  uint64_t v5 = v4;
  uint64_t v6 = sub_10005D75C(v2);
  if (v3 == v6 && v5 == v7)
  {
    char v10 = 1;
    uint64_t v9 = v5;
  }

  else
  {
    uint64_t v9 = v7;
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
  }

  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

Swift::Int sub_10005D96C()
{
  unsigned __int8 v1 = *v0;
  Hasher.init(_seed:)(v6, 0LL);
  uint64_t v2 = sub_10005D75C(v1);
  uint64_t v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_10005D9CC(uint64_t a1)
{
  uint64_t v3 = sub_10005D75C(*v1);
  uint64_t v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_10005DA0C(uint64_t a1)
{
  unsigned __int8 v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  uint64_t v3 = sub_10005D75C(v2);
  uint64_t v5 = v4;
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

unint64_t sub_10005DA68@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10005F2DC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10005DA94@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10005D75C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10005DABC()
{
  return sub_10005D7F8(*v0);
}

unint64_t sub_10005DAC4@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10005F2DC(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10005DAE8(uint64_t a1)
{
  unint64_t v2 = sub_10005D6C8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005DB10(uint64_t a1)
{
  unint64_t v2 = sub_10005D6C8();
  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_10005DB38@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = sub_10000264C(&qword_100084EE8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  uint64_t v138 = a1;
  sub_100002C78(a1, v9);
  unint64_t v11 = sub_10005D6C8();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for IDSCommandWebTunnelResponseSchema.CodingKeys,  &type metadata for IDSCommandWebTunnelResponseSchema.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return (void *)sub_100002FD4(v138);
  }
  uint64_t v74 = a2;
  LOBYTE(v93) = 0;
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)(&v93, v5);
  LOBYTE(v93) = 1;
  uint64_t v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v93, v5);
  int v15 = v14;
  uint64_t v73 = v13;
  char v137 = v14 & 1;
  LOBYTE(v92[0]) = 2;
  unint64_t v16 = sub_100004570();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v93,  &type metadata for Data,  v92,  v5,  &type metadata for Data,  v16);
  uint64_t v88 = v16;
  int v72 = v15;
  uint64_t v17 = v93;
  LOBYTE(v93) = 3;
  uint64_t v18 = v94;
  sub_1000045B4(v17, v94);
  uint64_t v69 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v93, v5);
  uint64_t v70 = v17;
  uint64_t v71 = v18;
  char v135 = v19 & 1;
  LOBYTE(v93) = 4;
  LODWORD(v18) = v19;
  uint64_t v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v93, v5);
  int v67 = v18;
  uint64_t v68 = v20;
  LOBYTE(v93) = 5;
  uint64_t v22 = v21;
  swift_bridgeObjectRetain(v21);
  uint64_t v23 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v93, v5);
  uint64_t v87 = v22;
  uint64_t v66 = v23;
  char v133 = v24 & 1;
  LOBYTE(v93) = 6;
  LODWORD(v22) = v24;
  uint64_t v25 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v93, v5);
  int v64 = v22;
  uint64_t v65 = v25;
  LOBYTE(v92[0]) = 7;
  uint64_t v27 = v26;
  unint64_t v28 = sub_100056B2C();
  swift_bridgeObjectRetain(v27);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v93,  &type metadata for IDSMadridProtocolHttpHeaders,  v92,  v5,  &type metadata for IDSMadridProtocolHttpHeaders,  v28);
  uint64_t v86 = v27;
  uint64_t v29 = v102;
  uint64_t v30 = v103;
  LOBYTE(v92[0]) = 8;
  uint64_t v80 = v104;
  uint64_t v91 = v101;
  uint64_t v83 = v96;
  uint64_t v84 = v93;
  uint64_t v81 = v94;
  uint64_t v82 = v95;
  uint64_t v85 = v97;
  uint64_t v89 = v98;
  uint64_t v90 = v99;
  uint64_t v63 = v100;
  sub_100056B70(v93, v94, v95, v96, v97, v98, v99, v100, v101, v102, v103, v104);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v93,  &type metadata for Data,  v92,  v5,  &type metadata for Data,  v88);
  uint64_t v79 = v29;
  uint64_t v62 = v12;
  uint64_t v31 = v63;
  uint64_t v32 = v93;
  LOBYTE(v93) = 9;
  uint64_t v77 = v32;
  uint64_t v78 = v94;
  sub_1000045B4(v32, v94);
  uint64_t v33 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v93, v5);
  uint64_t v76 = v34;
  uint64_t v35 = v33;
  LOBYTE(v92[0]) = 10;
  swift_bridgeObjectRetain(v34);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v93,  &type metadata for Data,  v92,  v5,  &type metadata for Data,  v88);
  uint64_t v36 = v93;
  LOBYTE(v93) = 11;
  uint64_t v88 = v36;
  uint64_t v75 = v94;
  sub_1000045B4(v36, v94);
  uint64_t v61 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v93, v5);
  int v58 = v37 & 1;
  char v131 = v37 & 1;
  char v129 = 12;
  uint64_t v38 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v129, v5);
  uint64_t v59 = v39;
  uint64_t v60 = v38;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  LOBYTE(v92[2]) = v72 & 1;
  LOBYTE(v92[6]) = v67 & 1;
  LOBYTE(v92[10]) = v64 & 1;
  LOBYTE(v92[32]) = v58;
  v92[0] = v62;
  v92[1] = v73;
  v92[3] = v70;
  v92[4] = v71;
  v92[5] = v69;
  v92[7] = v68;
  v92[8] = v87;
  v92[9] = v66;
  v92[11] = v65;
  v92[12] = v86;
  uint64_t v40 = v80;
  v92[13] = v84;
  v92[14] = v81;
  v92[15] = v82;
  v92[16] = v83;
  v92[17] = v85;
  v92[18] = v89;
  v92[19] = v90;
  v92[20] = v31;
  unint64_t v41 = v78;
  v92[21] = v91;
  v92[22] = v79;
  v92[23] = v30;
  v92[24] = v80;
  uint64_t v56 = v30;
  uint64_t v57 = v35;
  uint64_t v42 = v76;
  uint64_t v43 = v77;
  v92[25] = v77;
  v92[26] = v78;
  v92[27] = v35;
  v92[28] = v76;
  uint64_t v44 = v88;
  v92[29] = v88;
  unint64_t v45 = v75;
  v92[30] = v75;
  v92[31] = v61;
  v92[33] = v60;
  v92[34] = v59;
  sub_10005F324((uint64_t)v92);
  sub_1000045C8(v44, v45);
  swift_bridgeObjectRelease(v42);
  sub_1000045C8(v43, v41);
  uint64_t v54 = v30;
  uint64_t v55 = v40;
  uint64_t v46 = v83;
  uint64_t v47 = v81;
  uint64_t v48 = v82;
  sub_1000569D0(v84, v81, v82, v83, v85, v89, v90, v63, v91, v79, v54, v55);
  uint64_t v49 = v87;
  swift_bridgeObjectRelease(v87);
  uint64_t v50 = v86;
  swift_bridgeObjectRelease(v86);
  uint64_t v51 = v70;
  uint64_t v52 = v71;
  sub_1000045C8(v70, v71);
  sub_100002FD4(v138);
  uint64_t v93 = v62;
  uint64_t v94 = v73;
  LOBYTE(v95) = v137;
  *(_DWORD *)((char *)&v95 + 1) = *(_DWORD *)v136;
  HIDWORD(v95) = *(_DWORD *)&v136[3];
  uint64_t v96 = v51;
  uint64_t v97 = v52;
  uint64_t v98 = v69;
  LOBYTE(v99) = v135;
  *(_DWORD *)((char *)&v99 + 1) = *(_DWORD *)v134;
  HIDWORD(v99) = *(_DWORD *)&v134[3];
  uint64_t v100 = v68;
  uint64_t v101 = v49;
  uint64_t v102 = v66;
  LOBYTE(v103) = v133;
  *(_DWORD *)((char *)&v103 + 1) = *(_DWORD *)v132;
  HIDWORD(v103) = *(_DWORD *)&v132[3];
  uint64_t v104 = v65;
  uint64_t v105 = v50;
  uint64_t v106 = v84;
  uint64_t v107 = v47;
  uint64_t v108 = v48;
  uint64_t v109 = v46;
  uint64_t v110 = v85;
  uint64_t v111 = v89;
  uint64_t v112 = v90;
  uint64_t v113 = v63;
  uint64_t v114 = v91;
  uint64_t v115 = v79;
  uint64_t v116 = v56;
  uint64_t v117 = v80;
  uint64_t v118 = v77;
  uint64_t v119 = v78;
  uint64_t v120 = v57;
  uint64_t v121 = v76;
  uint64_t v122 = v88;
  uint64_t v123 = v75;
  uint64_t v124 = v61;
  char v125 = v131;
  *(_DWORD *)uint64_t v126 = *(_DWORD *)v130;
  *(_DWORD *)&v126[3] = *(_DWORD *)&v130[3];
  uint64_t v127 = v60;
  uint64_t v128 = v59;
  sub_10005B6E8((uint64_t)&v93);
  return memcpy(v74, v92, 0x118uLL);
}

uint64_t destroy for IDSCommandWebTunnelResponseSchema(uint64_t *a1)
{
  unint64_t v2 = a1[4];
  if (v2 >> 60 != 15) {
    sub_100004080(a1[3], v2);
  }
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(a1[12]);
  uint64_t v3 = a1[14];
  if (v3 != 1)
  {
    swift_bridgeObjectRelease(v3);
    swift_bridgeObjectRelease(a1[16]);
    swift_bridgeObjectRelease(a1[18]);
    swift_bridgeObjectRelease(a1[20]);
    swift_bridgeObjectRelease(a1[22]);
    swift_bridgeObjectRelease(a1[24]);
  }

  unint64_t v4 = a1[26];
  if (v4 >> 60 != 15) {
    sub_100004080(a1[25], v4);
  }
  swift_bridgeObjectRelease(a1[28]);
  unint64_t v5 = a1[30];
  if (v5 >> 60 != 15) {
    sub_100004080(a1[29], v5);
  }
  return swift_bridgeObjectRelease(a1[34]);
}

uint64_t initializeWithCopy for IDSCommandWebTunnelResponseSchema(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  unint64_t v5 = (uint64_t *)(a2 + 24);
  unint64_t v6 = *(void *)(a2 + 32);
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)v5;
  }

  else
  {
    uint64_t v7 = *v5;
    sub_100003FF0(*v5, *(void *)(a2 + 32));
    *(void *)(a1 + 24) = v7;
    *(void *)(a1 + 32) = v6;
  }

  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  uint64_t v8 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v8;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  uint64_t v9 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v9;
  uint64_t v10 = *(void *)(a2 + 112);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  if (v10 == 1)
  {
    __int128 v11 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v11;
    __int128 v12 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 184) = v12;
    __int128 v13 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = v13;
  }

  else
  {
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(void *)(a1 + 112) = v10;
    uint64_t v14 = *(void *)(a2 + 128);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(void *)(a1 + 128) = v14;
    uint64_t v15 = *(void *)(a2 + 144);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(void *)(a1 + 144) = v15;
    uint64_t v16 = *(void *)(a2 + 160);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(void *)(a1 + 160) = v16;
    uint64_t v17 = *(void *)(a2 + 176);
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    *(void *)(a1 + 176) = v17;
    uint64_t v18 = *(void *)(a2 + 192);
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    *(void *)(a1 + 192) = v18;
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v18);
  }

  int v19 = (uint64_t *)(a2 + 200);
  unint64_t v20 = *(void *)(a2 + 208);
  if (v20 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 200) = *(_OWORD *)v19;
  }

  else
  {
    uint64_t v21 = *v19;
    sub_100003FF0(*v19, *(void *)(a2 + 208));
    *(void *)(a1 + 200) = v21;
    *(void *)(a1 + 208) = v20;
  }

  uint64_t v22 = *(void *)(a2 + 224);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = v22;
  uint64_t v23 = (_OWORD *)(a2 + 232);
  unint64_t v24 = *(void *)(a2 + 240);
  swift_bridgeObjectRetain(v22);
  if (v24 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 232) = *v23;
  }

  else
  {
    uint64_t v25 = *(void *)v23;
    sub_100003FF0(v25, v24);
    *(void *)(a1 + 232) = v25;
    *(void *)(a1 + 240) = v24;
  }

  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
  uint64_t v26 = *(void *)(a2 + 272);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = v26;
  swift_bridgeObjectRetain(v26);
  return a1;
}

uint64_t assignWithCopy for IDSCommandWebTunnelResponseSchema(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  unint64_t v5 = (_OWORD *)(a1 + 24);
  unint64_t v6 = (uint64_t *)(a2 + 24);
  unint64_t v7 = *(void *)(a2 + 32);
  if (*(void *)(a1 + 32) >> 60 == 15LL)
  {
    if (v7 >> 60 != 15)
    {
      uint64_t v8 = *v6;
      sub_100003FF0(*v6, *(void *)(a2 + 32));
      *(void *)(a1 + 24) = v8;
      *(void *)(a1 + 32) = v7;
      goto LABEL_8;
    }

    goto LABEL_6;
  }

  if (v7 >> 60 == 15)
  {
    sub_100004238(a1 + 24);
LABEL_6:
    *unint64_t v5 = *(_OWORD *)v6;
    goto LABEL_8;
  }

  uint64_t v9 = *v6;
  sub_100003FF0(*v6, *(void *)(a2 + 32));
  uint64_t v10 = *(void *)(a1 + 24);
  unint64_t v11 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = v9;
  *(void *)(a1 + 32) = v7;
  sub_100004080(v10, v11);
LABEL_8:
  uint64_t v12 = *(void *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(void *)(a1 + 40) = v12;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v13 = *(void *)(a2 + 64);
  uint64_t v14 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  uint64_t v15 = *(void *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(void *)(a1 + 72) = v15;
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  uint64_t v16 = *(void *)(a2 + 96);
  uint64_t v17 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  uint64_t v18 = (_OWORD *)(a1 + 104);
  int v19 = (_OWORD *)(a2 + 104);
  uint64_t v20 = *(void *)(a1 + 112);
  uint64_t v21 = *(void *)(a2 + 112);
  if (v20 == 1)
  {
    if (v21 == 1)
    {
      __int128 v22 = *(_OWORD *)(a2 + 120);
      *uint64_t v18 = *v19;
      *(_OWORD *)(a1 + 120) = v22;
      __int128 v23 = *(_OWORD *)(a2 + 136);
      __int128 v24 = *(_OWORD *)(a2 + 152);
      __int128 v25 = *(_OWORD *)(a2 + 184);
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 184) = v25;
      *(_OWORD *)(a1 + 136) = v23;
      *(_OWORD *)(a1 + 152) = v24;
    }

    else
    {
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      uint64_t v30 = *(void *)(a2 + 112);
      *(void *)(a1 + 112) = v30;
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      uint64_t v31 = *(void *)(a2 + 128);
      *(void *)(a1 + 128) = v31;
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      uint64_t v32 = *(void *)(a2 + 144);
      *(void *)(a1 + 144) = v32;
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      uint64_t v33 = *(void *)(a2 + 160);
      *(void *)(a1 + 160) = v33;
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      uint64_t v34 = *(void *)(a2 + 176);
      *(void *)(a1 + 176) = v34;
      *(void *)(a1 + 184) = *(void *)(a2 + 184);
      uint64_t v35 = *(void *)(a2 + 192);
      *(void *)(a1 + 192) = v35;
      swift_bridgeObjectRetain(v30);
      swift_bridgeObjectRetain(v31);
      swift_bridgeObjectRetain(v32);
      swift_bridgeObjectRetain(v33);
      swift_bridgeObjectRetain(v34);
      swift_bridgeObjectRetain(v35);
    }
  }

  else if (v21 == 1)
  {
    sub_1000532F8((void *)(a1 + 104));
    __int128 v26 = *(_OWORD *)(a2 + 120);
    *uint64_t v18 = *v19;
    *(_OWORD *)(a1 + 120) = v26;
    __int128 v27 = *(_OWORD *)(a2 + 184);
    __int128 v29 = *(_OWORD *)(a2 + 136);
    __int128 v28 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 184) = v27;
    *(_OWORD *)(a1 + 136) = v29;
    *(_OWORD *)(a1 + 152) = v28;
  }

  else
  {
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    uint64_t v36 = *(void *)(a2 + 112);
    *(void *)(a1 + 112) = v36;
    swift_bridgeObjectRetain(v36);
    swift_bridgeObjectRelease(v20);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    uint64_t v37 = *(void *)(a2 + 128);
    uint64_t v38 = *(void *)(a1 + 128);
    *(void *)(a1 + 128) = v37;
    swift_bridgeObjectRetain(v37);
    swift_bridgeObjectRelease(v38);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    uint64_t v39 = *(void *)(a2 + 144);
    uint64_t v40 = *(void *)(a1 + 144);
    *(void *)(a1 + 144) = v39;
    swift_bridgeObjectRetain(v39);
    swift_bridgeObjectRelease(v40);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    uint64_t v41 = *(void *)(a2 + 160);
    uint64_t v42 = *(void *)(a1 + 160);
    *(void *)(a1 + 160) = v41;
    swift_bridgeObjectRetain(v41);
    swift_bridgeObjectRelease(v42);
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    uint64_t v43 = *(void *)(a2 + 176);
    uint64_t v44 = *(void *)(a1 + 176);
    *(void *)(a1 + 176) = v43;
    swift_bridgeObjectRetain(v43);
    swift_bridgeObjectRelease(v44);
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    uint64_t v45 = *(void *)(a2 + 192);
    uint64_t v46 = *(void *)(a1 + 192);
    *(void *)(a1 + 192) = v45;
    swift_bridgeObjectRetain(v45);
    swift_bridgeObjectRelease(v46);
  }

  uint64_t v47 = (uint64_t *)(a2 + 200);
  unint64_t v48 = *(void *)(a2 + 208);
  if (*(void *)(a1 + 208) >> 60 == 15LL)
  {
    if (v48 >> 60 != 15)
    {
      uint64_t v49 = *v47;
      sub_100003FF0(*v47, *(void *)(a2 + 208));
      *(void *)(a1 + 200) = v49;
      *(void *)(a1 + 208) = v48;
      goto LABEL_22;
    }

    goto LABEL_20;
  }

  if (v48 >> 60 == 15)
  {
    sub_100004238(a1 + 200);
LABEL_20:
    *(_OWORD *)(a1 + 200) = *(_OWORD *)v47;
    goto LABEL_22;
  }

  uint64_t v50 = *v47;
  sub_100003FF0(*v47, *(void *)(a2 + 208));
  uint64_t v51 = *(void *)(a1 + 200);
  unint64_t v52 = *(void *)(a1 + 208);
  *(void *)(a1 + 200) = v50;
  *(void *)(a1 + 208) = v48;
  sub_100004080(v51, v52);
LABEL_22:
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  uint64_t v53 = *(void *)(a2 + 224);
  uint64_t v54 = *(void *)(a1 + 224);
  *(void *)(a1 + 224) = v53;
  swift_bridgeObjectRetain(v53);
  swift_bridgeObjectRelease(v54);
  uint64_t v55 = (uint64_t *)(a2 + 232);
  unint64_t v56 = *(void *)(a2 + 240);
  if (*(void *)(a1 + 240) >> 60 != 15LL)
  {
    if (v56 >> 60 != 15)
    {
      uint64_t v58 = *v55;
      sub_100003FF0(*v55, *(void *)(a2 + 240));
      uint64_t v59 = *(void *)(a1 + 232);
      unint64_t v60 = *(void *)(a1 + 240);
      *(void *)(a1 + 232) = v58;
      *(void *)(a1 + 240) = v56;
      sub_100004080(v59, v60);
      goto LABEL_29;
    }

    sub_100004238(a1 + 232);
    goto LABEL_27;
  }

  if (v56 >> 60 == 15)
  {
LABEL_27:
    *(_OWORD *)(a1 + 232) = *(_OWORD *)v55;
    goto LABEL_29;
  }

  uint64_t v57 = *v55;
  sub_100003FF0(*v55, *(void *)(a2 + 240));
  *(void *)(a1 + 232) = v57;
  *(void *)(a1 + 240) = v56;
LABEL_29:
  uint64_t v61 = *(void *)(a2 + 248);
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
  *(void *)(a1 + 248) = v61;
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  uint64_t v62 = *(void *)(a2 + 272);
  uint64_t v63 = *(void *)(a1 + 272);
  *(void *)(a1 + 272) = v62;
  swift_bridgeObjectRetain(v62);
  swift_bridgeObjectRelease(v63);
  return a1;
}

void *initializeWithTake for IDSCommandWebTunnelResponseSchema(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x118uLL);
}

uint64_t assignWithTake for IDSCommandWebTunnelResponseSchema(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  unint64_t v5 = (_OWORD *)(a1 + 24);
  unint64_t v6 = (_OWORD *)(a2 + 24);
  unint64_t v7 = *(void *)(a1 + 32);
  if (v7 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v8 = *(void *)(a2 + 32);
  if (v8 >> 60 == 15)
  {
    sub_100004238(a1 + 24);
LABEL_4:
    *unint64_t v5 = *v6;
    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)v6;
  *(void *)(a1 + 32) = v8;
  sub_100004080(v9, v7);
LABEL_6:
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 64);
  uint64_t v11 = *(void *)(a1 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v10;
  swift_bridgeObjectRelease(v11);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  uint64_t v12 = *(void *)(a2 + 96);
  uint64_t v13 = *(void *)(a1 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v12;
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = *(void *)(a1 + 112);
  if (v14 == 1)
  {
LABEL_9:
    __int128 v16 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v16;
    __int128 v17 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 184) = v17;
    __int128 v18 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = v18;
    goto LABEL_11;
  }

  uint64_t v15 = *(void *)(a2 + 112);
  if (v15 == 1)
  {
    sub_1000532F8((void *)(a1 + 104));
    goto LABEL_9;
  }

  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v15;
  swift_bridgeObjectRelease(v14);
  uint64_t v19 = *(void *)(a2 + 128);
  uint64_t v20 = *(void *)(a1 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v19;
  swift_bridgeObjectRelease(v20);
  uint64_t v21 = *(void *)(a2 + 144);
  uint64_t v22 = *(void *)(a1 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v21;
  swift_bridgeObjectRelease(v22);
  uint64_t v23 = *(void *)(a2 + 160);
  uint64_t v24 = *(void *)(a1 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v23;
  swift_bridgeObjectRelease(v24);
  uint64_t v25 = *(void *)(a2 + 176);
  uint64_t v26 = *(void *)(a1 + 176);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = v25;
  swift_bridgeObjectRelease(v26);
  uint64_t v27 = *(void *)(a2 + 192);
  uint64_t v28 = *(void *)(a1 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = v27;
  swift_bridgeObjectRelease(v28);
LABEL_11:
  __int128 v29 = (_OWORD *)(a2 + 200);
  unint64_t v30 = *(void *)(a1 + 208);
  if (v30 >> 60 == 15)
  {
LABEL_14:
    *(_OWORD *)(a1 + 200) = *v29;
    goto LABEL_16;
  }

  unint64_t v31 = *(void *)(a2 + 208);
  if (v31 >> 60 == 15)
  {
    sub_100004238(a1 + 200);
    goto LABEL_14;
  }

  uint64_t v32 = *(void *)(a1 + 200);
  *(void *)(a1 + 200) = *(void *)v29;
  *(void *)(a1 + 208) = v31;
  sub_100004080(v32, v30);
LABEL_16:
  uint64_t v33 = *(void *)(a2 + 224);
  uint64_t v34 = *(void *)(a1 + 224);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = v33;
  swift_bridgeObjectRelease(v34);
  uint64_t v35 = (void *)(a2 + 232);
  unint64_t v36 = *(void *)(a1 + 240);
  if (v36 >> 60 != 15)
  {
    unint64_t v37 = *(void *)(a2 + 240);
    if (v37 >> 60 != 15)
    {
      uint64_t v38 = *(void *)(a1 + 232);
      *(void *)(a1 + 232) = *v35;
      *(void *)(a1 + 240) = v37;
      sub_100004080(v38, v36);
      goto LABEL_21;
    }

    sub_100004238(a1 + 232);
  }

  *(_OWORD *)(a1 + 232) = *(_OWORD *)v35;
LABEL_21:
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
  uint64_t v39 = *(void *)(a2 + 272);
  uint64_t v40 = *(void *)(a1 + 272);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = v39;
  swift_bridgeObjectRelease(v40);
  return a1;
}

uint64_t getEnumTagSinglePayload for IDSCommandWebTunnelResponseSchema(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 280)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 64);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for IDSCommandWebTunnelResponseSchema( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 280) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 280) = 0;
    }
    if (a2) {
      *(void *)(result + 64) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for IDSCommandWebTunnelResponseSchema()
{
  return &type metadata for IDSCommandWebTunnelResponseSchema;
}

uint64_t storeEnumTagSinglePayload for IDSCommandWebTunnelResponseSchema.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 12 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 12) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF4) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF3) {
    return ((uint64_t (*)(void))((char *)&loc_10005F184 + 4 * byte_10007226F[v4]))();
  }
  *a1 = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_10005F1B8 + 4 * byte_10007226A[v4]))();
}

uint64_t sub_10005F1B8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005F1C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10005F1C8LL);
  }
  return result;
}

uint64_t sub_10005F1D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10005F1DCLL);
  }
  *(_BYTE *)unint64_t result = a2 + 12;
  return result;
}

uint64_t sub_10005F1E0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005F1E8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IDSCommandWebTunnelResponseSchema.CodingKeys()
{
  return &type metadata for IDSCommandWebTunnelResponseSchema.CodingKeys;
}

unint64_t sub_10005F208()
{
  unint64_t result = qword_100084ED0;
  if (!qword_100084ED0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000723C8, &type metadata for IDSCommandWebTunnelResponseSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084ED0);
  }

  return result;
}

unint64_t sub_10005F250()
{
  unint64_t result = qword_100084ED8;
  if (!qword_100084ED8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100072300, &type metadata for IDSCommandWebTunnelResponseSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084ED8);
  }

  return result;
}

unint64_t sub_10005F298()
{
  unint64_t result = qword_100084EE0;
  if (!qword_100084EE0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100072328, &type metadata for IDSCommandWebTunnelResponseSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084EE0);
  }

  return result;
}

unint64_t sub_10005F2DC(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10007F340, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xD) {
    return 13LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_10005F324(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v3 = *(void *)(a1 + 96);
  uint64_t v4 = *(void *)(a1 + 120);
  uint64_t v16 = *(void *)(a1 + 112);
  uint64_t v17 = *(void *)(a1 + 104);
  uint64_t v5 = *(void *)(a1 + 128);
  uint64_t v6 = *(void *)(a1 + 136);
  uint64_t v7 = *(void *)(a1 + 144);
  uint64_t v8 = *(void *)(a1 + 152);
  __int128 v12 = *(_OWORD *)(a1 + 168);
  uint64_t v9 = *(void *)(a1 + 184);
  uint64_t v10 = *(void *)(a1 + 192);
  uint64_t v14 = *(void *)(a1 + 200);
  uint64_t v15 = *(void *)(a1 + 160);
  unint64_t v13 = *(void *)(a1 + 208);
  uint64_t v18 = *(void *)(a1 + 224);
  uint64_t v20 = *(void *)(a1 + 232);
  unint64_t v19 = *(void *)(a1 + 240);
  uint64_t v21 = *(void *)(a1 + 272);
  sub_1000045B4(*(void *)(a1 + 24), *(void *)(a1 + 32));
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v2);
  sub_100056B70(v17, v16, v4, v5, v6, v7, v8, v15, v12, *((uint64_t *)&v12 + 1), v9, v10);
  sub_1000045B4(v14, v13);
  swift_bridgeObjectRetain(v18);
  sub_1000045B4(v20, v19);
  swift_bridgeObjectRetain(v21);
  return a1;
}

ValueMetadata *type metadata accessor for IDSCommandResponseUnpacker()
{
  return &type metadata for IDSCommandResponseUnpacker;
}

unint64_t sub_10005F444()
{
  unint64_t result = qword_100084EF0;
  if (!qword_100084EF0)
  {
    uint64_t v1 = type metadata accessor for IDSCommandResponse(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for IDSCommandResponse, v1);
    atomic_store(result, (unint64_t *)&qword_100084EF0);
  }

  return result;
}

void *sub_10005F48C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = type metadata accessor for PropertyListDecoder(0LL);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  uint64_t v8 = PropertyListDecoder.init()();
  unint64_t v9 = sub_10005F68C();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)( &v33,  &type metadata for IDSCommandResponseSchema,  a1,  a2,  &type metadata for IDSCommandResponseSchema,  v9);
  if (v3) {
    return (void *)swift_release(v8);
  }
  uint64_t v44 = a3;
  swift_release(v8);
  v31[8] = v41;
  v31[9] = v42;
  char v32 = v43;
  v31[4] = v37;
  v31[5] = v38;
  v31[6] = v39;
  v31[7] = v40;
  v31[0] = v33;
  v31[1] = v34;
  v31[2] = v35;
  v31[3] = v36;
  uint64_t v29 = *((void *)&v33 + 1);
  uint64_t v30 = v33;
  unsigned int v28 = v34;
  uint64_t v20 = v35;
  uint64_t v21 = *((void *)&v34 + 1);
  uint64_t v27 = *((void *)&v35 + 1);
  unsigned int v26 = v36;
  uint64_t v25 = *((void *)&v36 + 1);
  uint64_t v11 = *((void *)&v37 + 1);
  unint64_t v12 = v38;
  __int16 v23 = WORD4(v38);
  char v24 = v37;
  uint64_t v13 = *((void *)&v39 + 1);
  uint64_t v22 = v39;
  uint64_t v19 = v40;
  char v18 = BYTE8(v40);
  __int128 v14 = v41;
  char v15 = v42;
  uint64_t v16 = *((void *)&v42 + 1);
  char v17 = v43;
  sub_1000045B4(*((uint64_t *)&v34 + 1), v35);
  sub_1000045B4(v11, v12);
  swift_bridgeObjectRetain(v13);
  sub_1000045B4(v14, *((unint64_t *)&v14 + 1));
  IDSCommandResponse.init(with:messageId:messageUUID:responseStatus:failReason:token:internalBuild:loggingProfile:applicationId:requestType:idsSessionId:sharedSession:protocolVersion:)( v30,  v29,  v28,  v21,  v20,  v27,  v26,  v25,  v24,  v11,  v12,  v23,  v22,  v13,  v19,  v18,  v14,  *((void *)&v14 + 1),  v15,  v16,  v17);
  return sub_10002D414(v31);
}

void *sub_10005F678@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10005F48C(a1, a2, a3);
}

unint64_t sub_10005F68C()
{
  unint64_t result = qword_100084EF8;
  if (!qword_100084EF8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IDSCommandResponseSchema,  &type metadata for IDSCommandResponseSchema);
    atomic_store(result, (unint64_t *)&qword_100084EF8);
  }

  return result;
}

uint64_t sub_10005F6D0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_10000264C(&qword_100084360);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for IDSSessionCancelSchema(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (uint64_t *)((char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v11 = type metadata accessor for PropertyListDecoder(0LL);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  uint64_t v12 = PropertyListDecoder.init()();
  unint64_t v13 = sub_10005F870();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v10, v8, a1, a2, v8, v13);
  if (!v2)
  {
    uint64_t v23 = *v10;
    uint64_t v14 = v10[1];
    uint64_t v15 = v10[2];
    uint64_t v21 = v10[3];
    uint64_t v22 = v14;
    uint64_t v16 = v10[4];
    sub_10005F8B8((uint64_t)v10 + *(int *)(v8 + 28), (uint64_t)v7);
    char v17 = (uint64_t *)((char *)v10 + *(int *)(v8 + 32));
    uint64_t v18 = *v17;
    unint64_t v19 = v17[1];
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v16);
    sub_1000045B4(v18, v19);
    IDSSessionCancel.init(with:sessionID:participantID:remoteEndReason:sessionMessageContext:)( v23,  v22,  v15,  v21,  v16,  v7,  v18,  v19);
    sub_100029860((uint64_t)v10);
  }

  return swift_release(v12);
}

unint64_t sub_10005F870()
{
  unint64_t result = qword_100084F00;
  if (!qword_100084F00)
  {
    uint64_t v1 = type metadata accessor for IDSSessionCancelSchema(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for IDSSessionCancelSchema, v1);
    atomic_store(result, (unint64_t *)&qword_100084F00);
  }

  return result;
}

uint64_t sub_10005F8B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000264C(&qword_100084360);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for IDSSampleMessageUnpacker()
{
  return &type metadata for IDSSampleMessageUnpacker;
}

uint64_t sub_10005F910@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v33 = a1;
  uint64_t v34 = a2;
  uint64_t v31 = a3;
  uint64_t v30 = type metadata accessor for IDSClientMessageType(0LL);
  uint64_t v3 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_10000264C(&qword_100084248);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for IDSSampleMessage(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  char v32 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for IDSSampleMessageSchema(0LL);
  __chkstk_darwin(v12);
  uint64_t v14 = (uint64_t *)((char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v15 = type metadata accessor for PropertyListDecoder(0LL);
  swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  uint64_t v16 = PropertyListDecoder.init()();
  uint64_t v17 = sub_100004DB8( &qword_100084F10,  type metadata accessor for IDSSampleMessageSchema,  (uint64_t)&protocol conformance descriptor for IDSSampleMessageSchema);
  uint64_t v18 = v35;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v14, v12, v33, v34, v12, v17);
  if (v18) {
    return swift_release(v16);
  }
  uint64_t v33 = v10;
  uint64_t v34 = v3;
  __int128 v35 = v5;
  uint64_t v19 = *v14;
  uint64_t v20 = v14[1];
  uint64_t v21 = v14[2];
  sub_10002B9E8((uint64_t)v14 + *(int *)(v12 + 24), (uint64_t)v8);
  uint64_t v22 = (char *)v14 + *(int *)(v12 + 28);
  uint64_t v23 = *(void *)v22;
  uint64_t v24 = v22[8];
  swift_bridgeObjectRetain(v21);
  IDSSampleMessage.init(with:clientName:date:version:)(v19, 0LL, v20, v21, v8, v23, v24);
  unsigned int v26 = v32;
  uint64_t v25 = v33;
  uint64_t v27 = v35;
  (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v35, v32, v9);
  (*(void (**)(char *, void, uint64_t))(v34 + 104))( v27,  enum case for IDSClientMessageType.idsSampleMessage(_:),  v30);
  IDSClientMessageResult.init(result:)(v27);
  swift_release(v16);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v26, v9);
  return sub_10000A16C((uint64_t)v14);
}

uint64_t sub_10005FB8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100004E3C(a1, a2, a3, a4);
}

unint64_t sub_10005FBA0(uint64_t a1)
{
  unint64_t result = sub_10005FBC4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10005FBC4()
{
  unint64_t result = qword_100084F08;
  if (!qword_100084F08)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000724BC, &type metadata for IDSSampleMessageUnpacker);
    atomic_store(result, (unint64_t *)&qword_100084F08);
  }

  return result;
}

uint64_t sub_10005FC08(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0x6144646E45444D48LL;
  }
  else {
    uint64_t v3 = 0x7472617453444D48LL;
  }
  if (v2) {
    unint64_t v4 = 0xEF79654B65746144LL;
  }
  else {
    unint64_t v4 = 0xED000079654B6574LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0x6144646E45444D48LL;
  }
  else {
    uint64_t v5 = 0x7472617453444D48LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xED000079654B6574LL;
  }
  else {
    unint64_t v6 = 0xEF79654B65746144LL;
  }
  if (v3 == v5 && v4 == v6)
  {
    char v7 = 1;
    unint64_t v6 = v4;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0LL);
  }

  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_10005FCC4(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0x800000010006D6A0LL;
  int v3 = a1;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v4 = 0xD000000000000025LL;
    }
    else {
      unint64_t v4 = 0xD00000000000002BLL;
    }
    if (v3 == 1) {
      unint64_t v5 = 0x800000010006D6D0LL;
    }
    else {
      unint64_t v5 = 0x800000010006D700LL;
    }
    int v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1) {
        unint64_t v7 = 0xD000000000000025LL;
      }
      else {
        unint64_t v7 = 0xD00000000000002BLL;
      }
      if (v6 == 1) {
        unint64_t v2 = 0x800000010006D6D0LL;
      }
      else {
        unint64_t v2 = 0x800000010006D700LL;
      }
      if (v4 != v7) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }

  else
  {
    unint64_t v4 = 0xD000000000000027LL;
    unint64_t v5 = 0x800000010006D6A0LL;
    int v6 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }

  unint64_t v7 = 0xD000000000000027LL;
  if (v4 != 0xD000000000000027LL)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v7, v2, 0LL);
    goto LABEL_22;
  }

LABEL_19:
  if (v5 != v2) {
    goto LABEL_21;
  }
  char v8 = 1;
  unint64_t v2 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v2);
  return v8 & 1;
}

  if (v5 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
  unint64_t v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

uint64_t sub_10005FDC0(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0x64616F6C796170LL;
  }
  else {
    uint64_t v3 = 1835365481LL;
  }
  if (v2) {
    unint64_t v4 = 0xE400000000000000LL;
  }
  else {
    unint64_t v4 = 0xE700000000000000LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0x64616F6C796170LL;
  }
  else {
    uint64_t v5 = 1835365481LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xE700000000000000LL;
  }
  else {
    unint64_t v6 = 0xE400000000000000LL;
  }
  if (v3 == v5 && v4 == v6)
  {
    char v7 = 1;
    unint64_t v6 = v4;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0LL);
  }

  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_10005FE5C(char a1, char a2)
{
  if ((a1 & 1) != 0) {
    unint64_t v2 = 0x800000010006D680LL;
  }
  else {
    unint64_t v2 = 0x800000010006D660LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v3 = 0x800000010006D680LL;
  }
  else {
    unint64_t v3 = 0x800000010006D660LL;
  }
  if (v2 == v3)
  {
    char v4 = 1;
    unint64_t v3 = v2;
  }

  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016LL, v2, 0xD000000000000016LL, v3, 0LL);
  }

  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  return v4 & 1;
}

void sub_10005FEF8(char a1)
{
  __asm { BR              X10 }

uint64_t sub_10005FF38(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10005FF88 + 4 * byte_100072515[a2]))(1936486513LL);
}

uint64_t sub_10005FF88(uint64_t a1)
{
  if (a1 == 1936486513 && v1 == v2)
  {
    char v3 = 1;
    uint64_t v2 = v1;
  }

  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 1936486513LL, v2, 0LL);
  }

  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v3 & 1;
}

void sub_100060020(char a1)
{
  __asm { BR              X10 }

uint64_t sub_100060060(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10006009C + 4 * byte_10007251E[a2]))(a3 + 655360);
}

uint64_t sub_10006009C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3 + 655360;
  if (a1 == v5 && v3 == v4)
  {
    char v6 = 1;
    uint64_t v4 = v3;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v3, v5, v4, 0LL);
  }

  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  return v6 & 1;
}

void sub_10006011C(char a1)
{
  __asm { BR              X10 }

uint64_t sub_100060154(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1000601C8 + 4 * byte_100072528[a2]))(26994LL);
}

uint64_t sub_1000601C8(uint64_t a1)
{
  if (a1 == 26994 && v1 == v2)
  {
    char v3 = 1;
    uint64_t v2 = v1;
  }

  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 26994LL, v2, 0LL);
  }

  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v3 & 1;
}

void sub_100060288(char a1)
{
  __asm { BR              X10 }

uint64_t sub_1000602D8(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100060388 + 4 * byte_100072534[a2]))(0x4C52556572616873LL);
}

uint64_t sub_100060388(uint64_t a1)
{
  if (a1 == 0x4C52556572616873LL && v1 == 0xE800000000000000LL) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x4C52556572616873LL, 0xE800000000000000LL, 0LL);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE800000000000000LL);
  return v2 & 1;
}

void sub_100060488(char a1)
{
  __asm { BR              X10 }

uint64_t sub_1000604C8(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100060538 + 4 * byte_100072541[a2]))(0x3670697271LL);
}

uint64_t sub_100060538(uint64_t a1)
{
  if (a1 == 0x3670697271LL && v1 == 0xE500000000000000LL) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x3670697271LL, 0xE500000000000000LL, 0LL);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE500000000000000LL);
  return v2 & 1;
}

void sub_100060600(char a1)
{
  __asm { BR              X10 }

uint64_t sub_100060638(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100060674 + 4 * byte_10007254C[a2]))(115LL);
}

uint64_t sub_100060674(uint64_t a1)
{
  if (a1 == 115 && v1 == v2)
  {
    char v3 = 1;
    uint64_t v2 = v1;
  }

  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 115LL, v2, 0LL);
  }

  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v3 & 1;
}

uint64_t sub_1000606F0(char a1, char a2)
{
  uint64_t v2 = *(void *)&aQpln_1[8 * a1];
  uint64_t v3 = *(void *)&aQpln_1[8 * a2];
  if (v2 == v3) {
    char v4 = 1;
  }
  else {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, 0xE400000000000000LL, v3, 0xE400000000000000LL, 0LL);
  }
  swift_bridgeObjectRelease_n(0xE400000000000000LL, 2LL);
  return v4 & 1;
}

uint64_t sub_100060754(char a1, char a2)
{
  uint64_t v2 = *(void *)&aCs_0[8 * a1];
  uint64_t v3 = *(void *)&aCs_0[8 * a2];
  if (v2 == v3) {
    char v4 = 1;
  }
  else {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, 0xE200000000000000LL, v3, 0xE200000000000000LL, 0LL);
  }
  swift_bridgeObjectRelease_n(0xE200000000000000LL, 2LL);
  return v4 & 1;
}

uint64_t sub_1000607B8(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    unint64_t v3 = 0xD00000000000001ALL;
  }
  else {
    unint64_t v3 = 0xD000000000000010LL;
  }
  if (v2) {
    unint64_t v4 = 0x800000010006D400LL;
  }
  else {
    unint64_t v4 = 0x800000010006D420LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v5 = 0xD00000000000001ALL;
  }
  else {
    unint64_t v5 = 0xD000000000000010LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0x800000010006D420LL;
  }
  else {
    unint64_t v6 = 0x800000010006D400LL;
  }
  if (v3 == v5 && v4 == v6)
  {
    char v7 = 1;
    unint64_t v6 = v4;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0LL);
  }

  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_100060864(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v2 = 0x656C746974LL;
  int v3 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v4 = 1702125924LL;
    }
    else {
      uint64_t v4 = 0x6E6F73616572LL;
    }
    if (v3 == 1) {
      unint64_t v5 = 0xE400000000000000LL;
    }
    else {
      unint64_t v5 = 0xE600000000000000LL;
    }
    int v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1) {
        uint64_t v2 = 1702125924LL;
      }
      else {
        uint64_t v2 = 0x6E6F73616572LL;
      }
      if (v6 == 1) {
        unint64_t v7 = 0xE400000000000000LL;
      }
      else {
        unint64_t v7 = 0xE600000000000000LL;
      }
      if (v4 != v2) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }

  else
  {
    unint64_t v5 = 0xE500000000000000LL;
    uint64_t v4 = 0x656C746974LL;
    int v6 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }

  unint64_t v7 = 0xE500000000000000LL;
  if (v4 != 0x656C746974LL)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0LL);
    goto LABEL_22;
  }

uint64_t sub_10006095C(char a1, char a2)
{
  uint64_t v2 = *(void *)&aV_0[8 * a1];
  uint64_t v3 = *(void *)&aV_0[8 * a2];
  if (v2 == v3) {
    char v4 = 1;
  }
  else {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, 0xE100000000000000LL, v3, 0xE100000000000000LL, 0LL);
  }
  swift_bridgeObjectRelease_n(0xE100000000000000LL, 2LL);
  return v4 & 1;
}

uint64_t sub_1000609C0(char a1, char a2)
{
  uint64_t v2 = *(void *)&aV_1[8 * a1];
  uint64_t v3 = *(void *)&aV_1[8 * a2];
  if (v2 == v3) {
    char v4 = 1;
  }
  else {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, 0xE100000000000000LL, v3, 0xE100000000000000LL, 0LL);
  }
  swift_bridgeObjectRelease_n(0xE100000000000000LL, 2LL);
  return v4 & 1;
}

void sub_100060A24(char a1)
{
  __asm { BR              X10 }

uint64_t sub_100060A74(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100060AC8 + 4 * byte_100072554[a2]))(0x746E65696C63LL);
}

uint64_t sub_100060AC8(uint64_t a1)
{
  if (a1 == 0x746E65696C63LL && v1 == 0xE600000000000000LL) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x746E65696C63LL, 0xE600000000000000LL, 0LL);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE600000000000000LL);
  return v2 & 1;
}

void sub_100060B60(char a1)
{
  __asm { BR              X10 }

uint64_t sub_100060B98(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100060BD8 + 4 * byte_10007255C[a2]))(115LL);
}

uint64_t sub_100060BD8(uint64_t a1)
{
  if (a1 == 115 && v1 == v2)
  {
    char v3 = 1;
    uint64_t v2 = v1;
  }

  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 115LL, v2, 0LL);
  }

  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v3 & 1;
}

void sub_100060C58(char a1)
{
  __asm { BR              X10 }

Swift::Int sub_100060C9C()
{
  return Hasher._finalize()();
}

void sub_100060D18(char a1)
{
  __asm { BR              X10 }

Swift::Int sub_100060D68()
{
  return Hasher._finalize()();
}

Swift::Int sub_100060E24(char a1)
{
  if ((a1 & 1) != 0) {
    unint64_t v2 = 0xD00000000000001ALL;
  }
  else {
    unint64_t v2 = 0xD000000000000010LL;
  }
  if ((a1 & 1) != 0) {
    unint64_t v3 = 0x800000010006D420LL;
  }
  else {
    unint64_t v3 = 0x800000010006D400LL;
  }
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

Swift::Int sub_100060EAC(char a1)
{
  if ((a1 & 1) != 0) {
    unint64_t v2 = 0x800000010006D680LL;
  }
  else {
    unint64_t v2 = 0x800000010006D660LL;
  }
  String.hash(into:)(v4, 0xD000000000000016LL, v2);
  swift_bridgeObjectRelease(v2);
  return Hasher._finalize()();
}

Swift::Int sub_100060F28(char a1)
{
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v2 = 0xD000000000000025LL;
    }
    else {
      unint64_t v2 = 0xD00000000000002BLL;
    }
    if (a1 == 1) {
      unint64_t v3 = 0x800000010006D6D0LL;
    }
    else {
      unint64_t v3 = 0x800000010006D700LL;
    }
  }

  else
  {
    unint64_t v2 = 0xD000000000000027LL;
    unint64_t v3 = 0x800000010006D6A0LL;
  }

  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_100060FCC(uint64_t a1, unsigned __int8 a2)
{
  int v2 = a2;
  if (a2)
  {
    if (a2 == 1) {
      unint64_t v3 = 0xD000000000000025LL;
    }
    else {
      unint64_t v3 = 0xD00000000000002BLL;
    }
    if (v2 == 1) {
      unint64_t v4 = 0x800000010006D6D0LL;
    }
    else {
      unint64_t v4 = 0x800000010006D700LL;
    }
  }

  else
  {
    unint64_t v3 = 0xD000000000000027LL;
    unint64_t v4 = 0x800000010006D6A0LL;
  }

  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v4);
}

void sub_100061048(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_10006107C(uint64_t a1)
{
  return swift_bridgeObjectRelease(v1);
}

Swift::Int sub_1000610E4(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0) {
    unint64_t v3 = 0xD00000000000001ALL;
  }
  else {
    unint64_t v3 = 0xD000000000000010LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v4 = 0x800000010006D420LL;
  }
  else {
    unint64_t v4 = 0x800000010006D400LL;
  }
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

void sub_100061168(uint64_t a1, char a2)
{
  __asm { BR              X10 }

Swift::Int sub_1000611AC()
{
  return Hasher._finalize()();
}

void sub_100061228(uint64_t a1, char a2)
{
  __asm { BR              X10 }

Swift::Int sub_100061274()
{
  return Hasher._finalize()();
}

void sub_100061330(uint64_t a1, char a2)
{
  __asm { BR              X10 }

Swift::Int sub_100061370()
{
  return Hasher._finalize()();
}

Swift::Int sub_1000613EC(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0) {
    unint64_t v3 = 0x800000010006D680LL;
  }
  else {
    unint64_t v3 = 0x800000010006D660LL;
  }
  String.hash(into:)(v5, 0xD000000000000016LL, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

Swift::Int sub_100061464(uint64_t a1, char a2)
{
  if (a2)
  {
    if (a2 == 1) {
      unint64_t v3 = 0xD000000000000025LL;
    }
    else {
      unint64_t v3 = 0xD00000000000002BLL;
    }
    if (a2 == 1) {
      unint64_t v4 = 0x800000010006D6D0LL;
    }
    else {
      unint64_t v4 = 0x800000010006D700LL;
    }
  }

  else
  {
    unint64_t v3 = 0xD000000000000027LL;
    unint64_t v4 = 0x800000010006D6A0LL;
  }

  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_100061504(char *a1, char *a2)
{
  return sub_1000607B8(*a1, *a2);
}

Swift::Int sub_100061510()
{
  return sub_100060E24(*v0);
}

uint64_t sub_100061518(uint64_t a1)
{
  if (*v1) {
    unint64_t v2 = 0xD00000000000001ALL;
  }
  else {
    unint64_t v2 = 0xD000000000000010LL;
  }
  if (*v1) {
    unint64_t v3 = 0x800000010006D420LL;
  }
  else {
    unint64_t v3 = 0x800000010006D400LL;
  }
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_10006157C(uint64_t a1)
{
  return sub_1000610E4(a1, *v1);
}

uint64_t sub_100061584@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_10007F498;
  return sub_10006345C(v2, a1, a2);
}

void sub_100061590(unint64_t *a1@<X8>)
{
  if (*v1) {
    unint64_t v2 = 0xD00000000000001ALL;
  }
  else {
    unint64_t v2 = 0xD000000000000010LL;
  }
  unint64_t v3 = 0x800000010006D400LL;
  if (*v1) {
    unint64_t v3 = 0x800000010006D420LL;
  }
  *a1 = v2;
  a1[1] = v3;
}

unint64_t sub_1000615D8()
{
  if (*v0) {
    return 0xD00000000000001ALL;
  }
  else {
    return 0xD000000000000010LL;
  }
}

uint64_t sub_10006161C@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  v2._rawValue = &off_10007F498;
  return sub_10006356C(a1, v2, a2);
}

uint64_t sub_100061628(uint64_t a1)
{
  unint64_t v2 = sub_1000617D0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100061650(uint64_t a1)
{
  unint64_t v2 = sub_1000617D0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IDSHomeKitInvitationSchema.IDSHomeKitInvitationRequestedCapabilitiesSchema.encode(to:)( void *a1, uint64_t a2, double a3)
{
  uint64_t v7 = sub_10000264C(&qword_100084F18);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_100002C78(a1, v11);
  unint64_t v13 = sub_1000617D0();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for IDSHomeKitInvitationSchema.IDSHomeKitInvitationRequestedCapabilitiesSchema.CodingKeys,  &type metadata for IDSHomeKitInvitationSchema.IDSHomeKitInvitationRequestedCapabilitiesSchema.CodingKeys,  v13,  v11,  v12);
  char v20 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(&v20, v7, a3);
  if (!v3)
  {
    uint64_t v18 = a2;
    char v19 = 1;
    uint64_t v14 = sub_10000264C(&qword_100084F28);
    uint64_t v15 = sub_100067074( &qword_100084F30,  (uint64_t)&protocol witness table for Int,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v18, &v19, v7, v14, v15);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

unint64_t sub_1000617D0()
{
  unint64_t result = qword_100084F20;
  if (!qword_100084F20)
  {
    unint64_t result = swift_getWitnessTable( &unk_100072ED8,  &type metadata for IDSHomeKitInvitationSchema.IDSHomeKitInvitationRequestedCapabilitiesSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084F20);
  }

  return result;
}

void *IDSHomeKitInvitationSchema.IDSHomeKitInvitationRequestedCapabilitiesSchema.init(from:)(void *a1)
{
  return sub_100063A4C(a1);
}

uint64_t sub_100061828(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100061868 + 4 * byte_100072585[a1]))( 0x6D614E656D6F486BLL,  0xE900000000000065LL);
}

unint64_t sub_100061868()
{
  return 0xD000000000000018LL;
}

unint64_t sub_100061960()
{
  return 0xD00000000000001CLL;
}

unint64_t sub_100061978()
{
  return 0xD00000000000001ELL;
}

uint64_t sub_100061990()
{
  return 0x4B4449726573556BLL;
}

unint64_t sub_1000619AC()
{
  return 0xD000000000000013LL;
}

unint64_t sub_1000619C4()
{
  return 0xD000000000000023LL;
}

void sub_1000619DC()
{
}

uint64_t sub_1000619FC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100061A3C + 4 * byte_100072596[a1]))( 0x6D614E656D6F486BLL,  0xE900000000000065LL);
}

unint64_t sub_100061A3C()
{
  return 0xD000000000000018LL;
}

unint64_t sub_100061B34()
{
  return 0xD00000000000001CLL;
}

unint64_t sub_100061B4C()
{
  return 0xD00000000000001ELL;
}

uint64_t sub_100061B64()
{
  return 0x4B4449726573556BLL;
}

unint64_t sub_100061B80()
{
  return 0xD000000000000013LL;
}

unint64_t sub_100061B98()
{
  return 0xD000000000000023LL;
}

void sub_100061BB0()
{
}

void *sub_100061BD0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  unint64_t result = sub_100063A4C(a1);
  if (!v2)
  {
    *a2 = v5;
    a2[1] = result;
  }

  return result;
}

uint64_t sub_100061BFC(void *a1)
{
  return IDSHomeKitInvitationSchema.IDSHomeKitInvitationRequestedCapabilitiesSchema.encode(to:)( a1,  *(void *)(v1 + 8),  *(double *)v1);
}

uint64_t sub_100061C18(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2 = *a2;
  uint64_t v3 = sub_100061828(*a1);
  uint64_t v5 = v4;
  uint64_t v6 = sub_100061828(v2);
  if (v3 == v6 && v5 == v7)
  {
    char v10 = 1;
    uint64_t v9 = v5;
  }

  else
  {
    uint64_t v9 = v7;
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
  }

  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

Swift::Int sub_100061CA0()
{
  unsigned __int8 v1 = *v0;
  Hasher.init(_seed:)(v6, 0LL);
  uint64_t v2 = sub_100061828(v1);
  uint64_t v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_100061D00(uint64_t a1)
{
  uint64_t v3 = sub_100061828(*v1);
  uint64_t v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100061D40(uint64_t a1)
{
  unsigned __int8 v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  uint64_t v3 = sub_100061828(v2);
  uint64_t v5 = v4;
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_100061D9C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_100063E14(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_100061DC8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100061828(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100061DF0()
{
  return sub_1000619FC(*v0);
}

uint64_t sub_100061DF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100063E14(a1, a2);
  *a3 = result;
  return result;
}

void sub_100061E1C(_BYTE *a1@<X8>)
{
  *a1 = 17;
}

uint64_t sub_100061E28(uint64_t a1)
{
  unint64_t v2 = sub_100063BE0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100061E50(uint64_t a1)
{
  unint64_t v2 = sub_100063BE0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IDSHomeKitInvitationSchema.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000264C(&qword_100084F38);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100002C78(a1, v9);
  unint64_t v11 = sub_100063BE0();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for IDSHomeKitInvitationSchema.CodingKeys,  &type metadata for IDSHomeKitInvitationSchema.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = v3[1];
  LOBYTE(v47) = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, &v47, v5);
  if (!v2)
  {
    uint64_t v14 = (int *)type metadata accessor for IDSHomeKitInvitationSchema(0LL);
    uint64_t v15 = (char *)v3 + v14[5];
    LOBYTE(v47) = 1;
    uint64_t v16 = type metadata accessor for Date(0LL);
    uint64_t v17 = sub_100004DB8( &qword_100084240,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v15, &v47, v5, v16, v17);
    __int128 v47 = *(_OWORD *)((char *)v3 + v14[6]);
    char v48 = 2;
    unint64_t v18 = sub_100063C38();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)( &v47,  &v48,  v5,  &type metadata for IDSHomeKitInvitationSchema.IDSHomeKitInvitationRequestedCapabilitiesSchema,  v18);
    uint64_t v19 = *((unsigned __int8 *)v3 + v14[7]);
    LOBYTE(v47) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, &v47, v5);
    char v20 = (char *)v3 + v14[8];
    uint64_t v21 = *(void *)v20;
    uint64_t v22 = v20[8];
    LOBYTE(v47) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v21, v22, &v47, v5);
    uint64_t v23 = *((unsigned __int8 *)v3 + v14[9]);
    LOBYTE(v47) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v23, &v47, v5);
    __int128 v47 = *(_OWORD *)((char *)v3 + v14[10]);
    char v48 = 6;
    unint64_t v24 = sub_100063C7C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)( &v47,  &v48,  v5,  &type metadata for IDSHomeKitInviteeScheduleSchema,  v24);
    uint64_t v25 = (char *)v3 + v14[11];
    LOBYTE(v47) = 7;
    uint64_t v26 = type metadata accessor for UUID(0LL);
    uint64_t v27 = sub_100004DB8( &qword_100084F58,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v25, &v47, v5, v26, v27);
    __int128 v47 = *(_OWORD *)((char *)v3 + v14[12]);
    char v48 = 8;
    unint64_t v46 = sub_100003C08();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v47, &v48, v5, &type metadata for Data, v46);
    unsigned int v28 = (uint64_t *)((char *)v3 + v14[13]);
    uint64_t v29 = *v28;
    uint64_t v30 = v28[1];
    LOBYTE(v47) = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v29, v30, &v47, v5);
    uint64_t v31 = (char *)v3 + v14[14];
    LOBYTE(v47) = 10;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v31, &v47, v5, v26, v27);
    char v32 = (uint64_t *)((char *)v3 + v14[15]);
    uint64_t v33 = *v32;
    uint64_t v34 = v32[1];
    LOBYTE(v47) = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v33, v34, &v47, v5);
    __int128 v47 = *(_OWORD *)((char *)v3 + v14[16]);
    char v48 = 12;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v47, &v48, v5, &type metadata for Data, v46);
    __int128 v35 = (uint64_t *)((char *)v3 + v14[17]);
    uint64_t v36 = *v35;
    uint64_t v37 = v35[1];
    LOBYTE(v47) = 13;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v36, v37, &v47, v5);
    __int128 v38 = (char *)v3 + v14[18];
    uint64_t v39 = *(void *)v38;
    uint64_t v40 = v38[8];
    LOBYTE(v47) = 14;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v39, v40, &v47, v5);
    __int128 v41 = (char *)v3 + v14[19];
    uint64_t v42 = *(void *)v41;
    uint64_t v43 = v41[8];
    LOBYTE(v47) = 15;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v42, v43, &v47, v5);
    __int128 v47 = *(_OWORD *)((char *)v3 + v14[20]);
    char v48 = 16;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v47, &v48, v5, &type metadata for Data, v46);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t IDSHomeKitInvitationSchema.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v73 = a2;
  uint64_t v4 = sub_10000264C(&qword_1000846F8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t *)((char *)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v5);
  uint64_t v9 = (uint64_t *)((char *)&v71 - v8);
  uint64_t v10 = sub_10000264C(&qword_100084248);
  __chkstk_darwin(v10);
  uint64_t v12 = (uint64_t *)((char *)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v75 = sub_10000264C(&qword_100084F60);
  uint64_t v13 = *(void *)(v75 - 8);
  __chkstk_darwin(v75);
  uint64_t v15 = (char *)&v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v80 = (int *)type metadata accessor for IDSHomeKitInvitationSchema(0LL);
  __chkstk_darwin(v80);
  uint64_t v79 = (uint64_t *)((char *)&v71 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v18 = a1[3];
  uint64_t v17 = a1[4];
  uint64_t v76 = a1;
  sub_100002C78(a1, v18);
  unint64_t v19 = sub_100063BE0();
  uint64_t v74 = v15;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for IDSHomeKitInvitationSchema.CodingKeys,  &type metadata for IDSHomeKitInvitationSchema.CodingKeys,  v19,  v18,  v17);
  if (v2)
  {
    uint64_t v78 = v2;
    int v23 = 0;
    unsigned int v24 = 0;
  }

  else
  {
    uint64_t v77 = v7;
    uint64_t v78 = v9;
    uint64_t v72 = v13;
    uint64_t v20 = v73;
    LOBYTE(v81) = 0;
    uint64_t v21 = v75;
    uint64_t v22 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v81, v75);
    uint64_t v33 = v79;
    *uint64_t v79 = v22;
    v33[1] = v34;
    uint64_t v35 = type metadata accessor for Date(0LL);
    LOBYTE(v81) = 1;
    uint64_t v36 = sub_100004DB8( &qword_100084258,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v12, v35, &v81, v21, v35, v36);
    uint64_t v37 = v80;
    sub_10003DF8C((uint64_t)v12, (uint64_t)v33 + v80[5], &qword_100084248);
    char v82 = 2;
    unint64_t v38 = sub_100063CF0();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v81,  &type metadata for IDSHomeKitInvitationSchema.IDSHomeKitInvitationRequestedCapabilitiesSchema,  &v82,  v21,  &type metadata for IDSHomeKitInvitationSchema.IDSHomeKitInvitationRequestedCapabilitiesSchema,  v38);
    uint64_t v39 = v33;
    *(_OWORD *)((char *)v33 + v37[6]) = v81;
    LOBYTE(v81) = 3;
    *((_BYTE *)v33 + v37[7]) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v81, v21);
    LOBYTE(v81) = 4;
    uint64_t v40 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v81, v21);
    __int128 v41 = (char *)v33 + v37[8];
    *(void *)__int128 v41 = v40;
    v41[8] = v42 & 1;
    LOBYTE(v81) = 5;
    *((_BYTE *)v33 + v37[9]) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v81, v21);
    char v82 = 6;
    unint64_t v43 = sub_100063D34();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v81,  &type metadata for IDSHomeKitInviteeScheduleSchema,  &v82,  v21,  &type metadata for IDSHomeKitInviteeScheduleSchema,  v43);
    *(_OWORD *)((char *)v33 + v37[10]) = v81;
    uint64_t v44 = type metadata accessor for UUID(0LL);
    LOBYTE(v81) = 7;
    uint64_t v45 = sub_100004DB8( &qword_100084F78,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    unint64_t v46 = v78;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v78, v44, &v81, v21, v44, v45);
    sub_10003DF8C((uint64_t)v46, (uint64_t)v39 + v37[11], &qword_1000846F8);
    char v82 = 8;
    unint64_t v47 = sub_100004570();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v81,  &type metadata for Data,  &v82,  v21,  &type metadata for Data,  v47);
    *(_OWORD *)((char *)v39 + v37[12]) = v81;
    LOBYTE(v81) = 9;
    uint64_t v48 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v81, v21);
    uint64_t v78 = 0LL;
    uint64_t v50 = (uint64_t *)((char *)v79 + v80[13]);
    uint64_t *v50 = v48;
    v50[1] = v49;
    LOBYTE(v81) = 10;
    uint64_t v51 = v78;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v77, v44, &v81, v75, v44, v45);
    uint64_t v78 = v51;
    if (v51)
    {
      (*(void (**)(char *, uint64_t))(v72 + 8))(v74, v75);
      int v23 = 0;
      unsigned int v24 = 967;
    }

    else
    {
      sub_10003DF8C((uint64_t)v77, (uint64_t)v79 + v80[14], &qword_1000846F8);
      LOBYTE(v81) = 11;
      unint64_t v52 = v78;
      uint64_t v53 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v81, v75);
      uint64_t v78 = v52;
      if (v52)
      {
        (*(void (**)(char *, uint64_t))(v72 + 8))(v74, v75);
        int v23 = 0;
        unsigned int v24 = 1991;
      }

      else
      {
        uint64_t v55 = (uint64_t *)((char *)v79 + v80[15]);
        *uint64_t v55 = v53;
        v55[1] = v54;
        char v82 = 12;
        unint64_t v56 = v78;
        KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v81,  &type metadata for Data,  &v82,  v75,  &type metadata for Data,  v47);
        uint64_t v78 = v56;
        if (!v56)
        {
          *(_OWORD *)((char *)v79 + v80[16]) = v81;
          LOBYTE(v81) = 13;
          uint64_t v57 = v78;
          uint64_t v58 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v81, v75);
          LODWORD(v77) = v57 == 0LL;
          uint64_t v78 = v57;
          if (!v57)
          {
            unint64_t v60 = (uint64_t *)((char *)v79 + v80[17]);
            *unint64_t v60 = v58;
            v60[1] = v59;
            LOBYTE(v81) = 14;
            uint64_t v61 = v78;
            uint64_t v62 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v81, v75);
            uint64_t v78 = v61;
            if (!v61)
            {
              int v64 = (char *)v79 + v80[18];
              *(void *)int v64 = v62;
              v64[8] = v63 & 1;
              LOBYTE(v81) = 15;
              uint64_t v65 = v78;
              uint64_t v66 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v81, v75);
              uint64_t v78 = v65;
              if (!v65)
              {
                uint64_t v68 = (char *)v79 + v80[19];
                *(void *)uint64_t v68 = v66;
                v68[8] = v67 & 1;
                char v82 = 16;
                uint64_t v69 = v78;
                KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v81,  &type metadata for Data,  &v82,  v75,  &type metadata for Data,  v47);
                uint64_t v78 = v69;
                if (!v69)
                {
                  (*(void (**)(char *, uint64_t))(v72 + 8))(v74, v75);
                  uint64_t v70 = (uint64_t)v79;
                  *(_OWORD *)((char *)v79 + v80[20]) = v81;
                  sub_100030F74(v70, v20, type metadata accessor for IDSHomeKitInvitationSchema);
                  sub_100002FD4(v76);
                  return sub_100030078(v70, type metadata accessor for IDSHomeKitInvitationSchema);
                }
              }
            }
          }

          (*(void (**)(char *, uint64_t))(v72 + 8))(v74, v75);
          sub_100002FD4(v76);
          uint64_t v25 = v79;
          swift_bridgeObjectRelease(v79[1]);
          uint64_t v26 = v80;
          sub_1000096E8((uint64_t)v25 + v80[5], &qword_100084248);
          swift_bridgeObjectRelease(*(uint64_t *)((char *)v25 + v26[6] + 8));
          int v32 = 1;
          int v23 = 1;
          int v31 = 1;
          int v30 = 1;
          int v29 = 1;
          LOBYTE(v28) = 1;
LABEL_9:
          uint64_t result = sub_100063CC0(*(uint64_t *)((char *)v25 + v26[10]), *(uint64_t *)((char *)v25 + v26[10] + 8));
          if ((v28 & 1) != 0) {
            goto LABEL_10;
          }
          goto LABEL_21;
        }

        (*(void (**)(char *, uint64_t))(v72 + 8))(v74, v75);
        unsigned int v24 = 4039;
        int v23 = 1;
      }
    }
  }

  uint64_t v25 = v79;
  uint64_t v26 = v80;
  uint64_t result = sub_100002FD4(v76);
  int v28 = (v24 >> 7) & 1;
  int v29 = (v24 >> 8) & 1;
  int v30 = (v24 >> 9) & 1;
  int v31 = (v24 >> 10) & 1;
  if ((v24 & 1) != 0)
  {
    uint64_t result = swift_bridgeObjectRelease(v25[1]);
    if ((v24 & 2) == 0)
    {
LABEL_6:
      if ((v24 & 4) == 0) {
        goto LABEL_7;
      }
LABEL_19:
      uint64_t result = swift_bridgeObjectRelease(*(uint64_t *)((char *)v25 + v26[6] + 8));
      if ((v24 & 0x40) != 0) {
        goto LABEL_8;
      }
      goto LABEL_20;
    }
  }

  else if ((v24 & 2) == 0)
  {
    goto LABEL_6;
  }

  uint64_t result = sub_1000096E8((uint64_t)v25 + v26[5], &qword_100084248);
  if ((v24 & 4) != 0) {
    goto LABEL_19;
  }
LABEL_7:
  if ((v24 & 0x40) != 0)
  {
LABEL_8:
    LODWORD(v77) = 0;
    int v32 = 0;
    goto LABEL_9;
  }

LABEL_20:
  int v32 = 0;
  LODWORD(v77) = 0;
  if ((v24 & 0x80) != 0)
  {
LABEL_10:
    uint64_t result = sub_1000096E8((uint64_t)v25 + v26[11], &qword_1000846F8);
    if ((v29 & 1) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }

LABEL_21:
  if (!v29)
  {
LABEL_11:
    if (v30) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }

LABEL_22:
  uint64_t result = sub_1000045C8(*(uint64_t *)((char *)v25 + v26[12]), *(uint64_t *)((char *)v25 + v26[12] + 8));
  if ((v30 & 1) != 0)
  {
LABEL_12:
    uint64_t result = swift_bridgeObjectRelease(*(uint64_t *)((char *)v25 + v26[13] + 8));
    if ((v31 & 1) == 0) {
      goto LABEL_13;
    }
    goto LABEL_24;
  }

LABEL_23:
  if (!v31)
  {
LABEL_13:
    if (v23) {
      goto LABEL_14;
    }
    goto LABEL_25;
  }

LABEL_24:
  uint64_t result = sub_1000096E8((uint64_t)v25 + v26[14], &qword_1000846F8);
  if ((v23 & 1) != 0)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease(*(uint64_t *)((char *)v25 + v26[15] + 8));
    if ((v32 & 1) == 0) {
      goto LABEL_15;
    }
LABEL_26:
    uint64_t result = sub_1000045C8(*(uint64_t *)((char *)v25 + v26[16]), *(uint64_t *)((char *)v25 + v26[16] + 8));
    return swift_bridgeObjectRelease(*(uint64_t *)((char *)v25 + v26[17] + 8));
  }

uint64_t sub_100062C5C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return IDSHomeKitInvitationSchema.init(from:)(a1, a2);
}

uint64_t sub_100062C70(void *a1)
{
  return IDSHomeKitInvitationSchema.encode(to:)(a1);
}

uint64_t sub_100062C84(char *a1, char *a2)
{
  return sub_10005FE5C(*a1, *a2);
}

Swift::Int sub_100062C90()
{
  return sub_100060EAC(*v0);
}

uint64_t sub_100062C98(uint64_t a1)
{
  if (*v1) {
    unint64_t v2 = 0x800000010006D680LL;
  }
  else {
    unint64_t v2 = 0x800000010006D660LL;
  }
  String.hash(into:)(a1, 0xD000000000000016LL, v2);
  return swift_bridgeObjectRelease(v2);
}

Swift::Int sub_100062CF0(uint64_t a1)
{
  return sub_1000613EC(a1, *v1);
}

uint64_t sub_100062CF8@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_10007F6A0;
  return sub_10006345C(v2, a1, a2);
}

void sub_100062D04(void *a1@<X8>)
{
  unint64_t v2 = 0x800000010006D660LL;
  if (*v1) {
    unint64_t v2 = 0x800000010006D680LL;
  }
  *a1 = 0xD000000000000016LL;
  a1[1] = v2;
}

unint64_t sub_100062D40()
{
  return 0xD000000000000016LL;
}

uint64_t sub_100062D70@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  v2._rawValue = &off_10007F6A0;
  return sub_10006356C(a1, v2, a2);
}

uint64_t sub_100062D7C(uint64_t a1)
{
  unint64_t v2 = sub_100063D78();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100062DA4(uint64_t a1)
{
  unint64_t v2 = sub_100063D78();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IDSHomeKitInviteeScheduleSchema.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_10000264C(&qword_100084F80);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_100002C78(a1, v11);
  unint64_t v13 = sub_100063D78();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for IDSHomeKitInviteeScheduleSchema.CodingKeys,  &type metadata for IDSHomeKitInviteeScheduleSchema.CodingKeys,  v13,  v11,  v12);
  uint64_t v21 = a2;
  char v20 = 0;
  uint64_t v14 = sub_10000264C(&qword_100084F90);
  uint64_t v15 = sub_100066F44( &qword_100084F98,  (void (*)(void))sub_100063DBC,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v21, &v20, v7, v14, v15);
  if (!v3)
  {
    uint64_t v21 = a3;
    char v20 = 1;
    uint64_t v16 = sub_10000264C(&qword_100084FA8);
    uint64_t v17 = sub_100066FF0( &qword_100084FB0,  &qword_100084FB8,  (uint64_t)&protocol conformance descriptor for IDSHomeKitInviteeScheduleYearDayRuleSchema,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v21, &v20, v7, v16, v17);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t IDSHomeKitInviteeScheduleSchema.init(from:)(void *a1)
{
  return sub_100063E64(a1);
}

unint64_t sub_100062F78(char a1)
{
  if (!a1) {
    return 0xD000000000000027LL;
  }
  if (a1 == 1) {
    return 0xD000000000000025LL;
  }
  return 0xD00000000000002BLL;
}

uint64_t sub_100062FD4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100063E64(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }

  return result;
}

uint64_t sub_100062FFC(void *a1)
{
  return IDSHomeKitInviteeScheduleSchema.encode(to:)(a1, *v1, v1[1]);
}

uint64_t sub_100063014(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10005FCC4(*a1, *a2);
}

Swift::Int sub_100063020()
{
  return sub_100060F28(*v0);
}

uint64_t sub_100063028(uint64_t a1)
{
  return sub_100060FCC(a1, *v1);
}

Swift::Int sub_100063030(uint64_t a1)
{
  return sub_100061464(a1, *v1);
}

unint64_t sub_100063038@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1000640B4(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_100063064@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_100062F78(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_10006308C()
{
  return sub_100062F78(*v0);
}

unint64_t sub_100063094@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1000640B4(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000630B8(uint64_t a1)
{
  unint64_t v2 = sub_100064070();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000630E0(uint64_t a1)
{
  unint64_t v2 = sub_100064070();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IDSHomeKitInviteeScheduleWeekDayRuleSchema.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000264C(&qword_100084FC0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100002C78(a1, v9);
  unint64_t v11 = sub_100064070();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for IDSHomeKitInviteeScheduleWeekDayRuleSchema.CodingKeys,  &type metadata for IDSHomeKitInviteeScheduleWeekDayRuleSchema.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = *((unsigned __int8 *)v3 + 8);
  char v22 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, &v22, v5);
  if (!v2)
  {
    uint64_t v14 = v3[2];
    uint64_t v15 = *((unsigned __int8 *)v3 + 24);
    char v21 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, &v21, v5);
    uint64_t v16 = v3[4];
    uint64_t v17 = *((unsigned __int8 *)v3 + 40);
    char v20 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, &v20, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

double IDSHomeKitInviteeScheduleWeekDayRuleSchema.init(from:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v7[0];
    *a2 = v6;
    a2[1] = v5;
    double result = *(double *)((char *)v7 + 9);
    *(_OWORD *)((char *)a2 + 25) = *(_OWORD *)((char *)v7 + 9);
  }

  return result;
}

uint64_t sub_100063290(void *a1)
{
  return IDSHomeKitInviteeScheduleWeekDayRuleSchema.encode(to:)(a1);
}

uint64_t sub_1000632A4(char *a1, char *a2)
{
  return sub_10005FC08(*a1, *a2);
}

Swift::Int sub_1000632B0()
{
  int v1 = *v0;
  Hasher.init(_seed:)(v5, 0LL);
  if (v1) {
    uint64_t v2 = 0x6144646E45444D48LL;
  }
  else {
    uint64_t v2 = 0x7472617453444D48LL;
  }
  if (v1) {
    unint64_t v3 = 0xED000079654B6574LL;
  }
  else {
    unint64_t v3 = 0xEF79654B65746144LL;
  }
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_100063348(uint64_t a1)
{
  if (*v1) {
    uint64_t v2 = 0x6144646E45444D48LL;
  }
  else {
    uint64_t v2 = 0x7472617453444D48LL;
  }
  if (*v1) {
    unint64_t v3 = 0xED000079654B6574LL;
  }
  else {
    unint64_t v3 = 0xEF79654B65746144LL;
  }
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_1000633BC(uint64_t a1)
{
  int v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2) {
    uint64_t v3 = 0x6144646E45444D48LL;
  }
  else {
    uint64_t v3 = 0x7472617453444D48LL;
  }
  if (v2) {
    unint64_t v4 = 0xED000079654B6574LL;
  }
  else {
    unint64_t v4 = 0xEF79654B65746144LL;
  }
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_100063450@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_10007F758;
  return sub_10006345C(v2, a1, a2);
}

uint64_t sub_10006345C@<X0>(Swift::OpaquePointer cases@<0:X3>, uint64_t *a2@<X0>, char *a3@<X8>)
{
  v4._countAndFlagsBits = *a2;
  __int128 v5 = (void *)a2[1];
  v4._object = v5;
  Swift::Int v6 = _findStringSwitchCase(cases:string:)(cases, v4);
  uint64_t result = swift_bridgeObjectRelease(v5);
  if (v6 == 1) {
    char v8 = 1;
  }
  else {
    char v8 = 2;
  }
  if (!v6) {
    char v8 = 0;
  }
  *a3 = v8;
  return result;
}

void sub_1000634B4(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x7472617453444D48LL;
  if (*v1) {
    uint64_t v2 = 0x6144646E45444D48LL;
  }
  unint64_t v3 = 0xEF79654B65746144LL;
  if (*v1) {
    unint64_t v3 = 0xED000079654B6574LL;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_10006350C()
{
  if (*v0) {
    return 0x6144646E45444D48LL;
  }
  else {
    return 0x7472617453444D48LL;
  }
}

uint64_t sub_100063560@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  v2._rawValue = &off_10007F758;
  return sub_10006356C(a1, v2, a2);
}

uint64_t sub_10006356C@<X0>( Swift::String string@<0:X0, 8:X1>, Swift::OpaquePointer cases@<0:X4>, char *a3@<X8>)
{
  object = string._object;
  v4._countAndFlagsBits = string._countAndFlagsBits;
  v4._object = object;
  Swift::Int v6 = _findStringSwitchCase(cases:string:)(cases, v4);
  uint64_t result = swift_bridgeObjectRelease(object);
  if (v6 == 1) {
    char v8 = 1;
  }
  else {
    char v8 = 2;
  }
  if (!v6) {
    char v8 = 0;
  }
  *a3 = v8;
  return result;
}

uint64_t sub_1000635C8(uint64_t a1)
{
  unint64_t v2 = sub_1000642AC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000635F0(uint64_t a1)
{
  unint64_t v2 = sub_1000642AC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IDSHomeKitInviteeScheduleYearDayRuleSchema.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000264C(&qword_100084FD0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100002C78(a1, v9);
  unint64_t v11 = sub_1000642AC();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for IDSHomeKitInviteeScheduleYearDayRuleSchema.CodingKeys,  &type metadata for IDSHomeKitInviteeScheduleYearDayRuleSchema.CodingKeys,  v11,  v9,  v10);
  char v18 = 0;
  uint64_t v12 = type metadata accessor for Date(0LL);
  uint64_t v13 = sub_100004DB8( &qword_100084240,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v3, &v18, v5, v12, v13);
  if (!v2)
  {
    uint64_t v14 = v3 + *(int *)(type metadata accessor for IDSHomeKitInviteeScheduleYearDayRuleSchema(0LL) + 20);
    char v17 = 1;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v14, &v17, v5, v12, v13);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t IDSHomeKitInviteeScheduleYearDayRuleSchema.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v28 = a2;
  uint64_t v4 = sub_10000264C(&qword_100084248);
  uint64_t v5 = __chkstk_darwin(v4);
  int v29 = (char **)((char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v5);
  int v30 = (char **)((char *)&v26 - v7);
  uint64_t v31 = sub_10000264C(&qword_100084FE0);
  uint64_t v8 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for IDSHomeKitInviteeScheduleYearDayRuleSchema(0LL);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = a1[3];
  uint64_t v15 = a1[4];
  sub_100002C78(a1, v14);
  unint64_t v16 = sub_1000642AC();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for IDSHomeKitInviteeScheduleYearDayRuleSchema.CodingKeys,  &type metadata for IDSHomeKitInviteeScheduleYearDayRuleSchema.CodingKeys,  v16,  v14,  v15);
  if (v2) {
    return sub_100002FD4(a1);
  }
  uint64_t v26 = v13;
  uint64_t v27 = a1;
  uint64_t v17 = v8;
  uint64_t v18 = type metadata accessor for Date(0LL);
  char v33 = 0;
  uint64_t v19 = sub_100004DB8( &qword_100084258,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  char v20 = v30;
  uint64_t v21 = v31;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v30, v18, &v33, v31, v18, v19);
  uint64_t v22 = v19;
  uint64_t v23 = (uint64_t)v26;
  sub_10003DF8C((uint64_t)v20, (uint64_t)v26, &qword_100084248);
  char v32 = 1;
  unsigned int v24 = v29;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v29, v18, &v32, v21, v18, v22);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v10, v21);
  sub_10003DF8C((uint64_t)v24, v23 + *(int *)(v11 + 20), &qword_100084248);
  sub_100030F74(v23, v28, type metadata accessor for IDSHomeKitInviteeScheduleYearDayRuleSchema);
  sub_100002FD4(v27);
  return sub_100030078(v23, type metadata accessor for IDSHomeKitInviteeScheduleYearDayRuleSchema);
}

uint64_t sub_100063A24@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return IDSHomeKitInviteeScheduleYearDayRuleSchema.init(from:)(a1, a2);
}

uint64_t sub_100063A38(void *a1)
{
  return IDSHomeKitInviteeScheduleYearDayRuleSchema.encode(to:)(a1);
}

void *sub_100063A4C(void *a1)
{
  uint64_t v3 = sub_10000264C(&qword_1000851F8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v9 = sub_100002C78(a1, v7);
  unint64_t v10 = sub_1000617D0();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for IDSHomeKitInvitationSchema.IDSHomeKitInvitationRequestedCapabilitiesSchema.CodingKeys,  &type metadata for IDSHomeKitInvitationSchema.IDSHomeKitInvitationRequestedCapabilitiesSchema.CodingKeys,  v10,  v7,  v8);
  if (v1)
  {
    sub_100002FD4(a1);
  }

  else
  {
    char v16 = 0;
    KeyedDecodingContainer.decode(_:forKey:)(&v16, v3);
    uint64_t v11 = sub_10000264C(&qword_100084F28);
    char v15 = 1;
    uint64_t v12 = sub_100067074( &qword_100085200,  (uint64_t)&protocol witness table for Int,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v11, &v15, v3, v11, v12);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v9 = (void *)v14[1];
    sub_100002FD4(a1);
  }

  return v9;
}

unint64_t sub_100063BE0()
{
  unint64_t result = qword_100084F40;
  if (!qword_100084F40)
  {
    unint64_t result = swift_getWitnessTable(&unk_100072E88, &type metadata for IDSHomeKitInvitationSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084F40);
  }

  return result;
}

uint64_t type metadata accessor for IDSHomeKitInvitationSchema(uint64_t a1)
{
  return sub_100032508(a1, (uint64_t *)&unk_100085040, (uint64_t)&nominal type descriptor for IDSHomeKitInvitationSchema);
}

unint64_t sub_100063C38()
{
  unint64_t result = qword_100084F48;
  if (!qword_100084F48)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IDSHomeKitInvitationSchema.IDSHomeKitInvitationRequestedCapabilitiesSchema,  &type metadata for IDSHomeKitInvitationSchema.IDSHomeKitInvitationRequestedCapabilitiesSchema);
    atomic_store(result, (unint64_t *)&qword_100084F48);
  }

  return result;
}

unint64_t sub_100063C7C()
{
  unint64_t result = qword_100084F50;
  if (!qword_100084F50)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IDSHomeKitInviteeScheduleSchema,  &type metadata for IDSHomeKitInviteeScheduleSchema);
    atomic_store(result, (unint64_t *)&qword_100084F50);
  }

  return result;
}

uint64_t sub_100063CC0(uint64_t result, uint64_t a2)
{
  if (result != 1)
  {
    swift_bridgeObjectRelease(result);
    return swift_bridgeObjectRelease(a2);
  }

  return result;
}

unint64_t sub_100063CF0()
{
  unint64_t result = qword_100084F68;
  if (!qword_100084F68)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IDSHomeKitInvitationSchema.IDSHomeKitInvitationRequestedCapabilitiesSchema,  &type metadata for IDSHomeKitInvitationSchema.IDSHomeKitInvitationRequestedCapabilitiesSchema);
    atomic_store(result, (unint64_t *)&qword_100084F68);
  }

  return result;
}

unint64_t sub_100063D34()
{
  unint64_t result = qword_100084F70;
  if (!qword_100084F70)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IDSHomeKitInviteeScheduleSchema,  &type metadata for IDSHomeKitInviteeScheduleSchema);
    atomic_store(result, (unint64_t *)&qword_100084F70);
  }

  return result;
}

unint64_t sub_100063D78()
{
  unint64_t result = qword_100084F88;
  if (!qword_100084F88)
  {
    unint64_t result = swift_getWitnessTable(&unk_100072E38, &type metadata for IDSHomeKitInviteeScheduleSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084F88);
  }

  return result;
}

unint64_t sub_100063DBC()
{
  unint64_t result = qword_100084FA0;
  if (!qword_100084FA0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IDSHomeKitInviteeScheduleWeekDayRuleSchema,  &type metadata for IDSHomeKitInviteeScheduleWeekDayRuleSchema);
    atomic_store(result, (unint64_t *)&qword_100084FA0);
  }

  return result;
}

uint64_t type metadata accessor for IDSHomeKitInviteeScheduleYearDayRuleSchema(uint64_t a1)
{
  return sub_100032508( a1,  qword_100085118,  (uint64_t)&nominal type descriptor for IDSHomeKitInviteeScheduleYearDayRuleSchema);
}

uint64_t sub_100063E14(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_10007F4E8, a1, a2, &unk_100084020);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x11) {
    return 17LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_100063E64(void *a1)
{
  uint64_t v3 = sub_10000264C(&qword_1000851D0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100002C78(a1, v7);
  unint64_t v9 = sub_100063D78();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for IDSHomeKitInviteeScheduleSchema.CodingKeys,  &type metadata for IDSHomeKitInviteeScheduleSchema.CodingKeys,  v9,  v7,  v8);
  if (v1)
  {
    sub_100002FD4(a1);
  }

  else
  {
    uint64_t v10 = sub_10000264C(&qword_100084F90);
    HIBYTE(v16) = 0;
    uint64_t v11 = sub_100066F44( &qword_1000851D8,  (void (*)(void))sub_100066FAC,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v17, v10, (char *)&v16 + 7, v3, v10, v11);
    uint64_t v7 = v17;
    uint64_t v13 = sub_10000264C(&qword_100084FA8);
    HIBYTE(v16) = 1;
    uint64_t v14 = sub_100066FF0( &qword_1000851E8,  &qword_1000851F0,  (uint64_t)&protocol conformance descriptor for IDSHomeKitInviteeScheduleYearDayRuleSchema,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    swift_bridgeObjectRetain(v7);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v17, v13, (char *)&v16 + 7, v3, v13, v14);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v15 = v17;
    swift_bridgeObjectRetain(v17);
    sub_100002FD4(a1);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v7);
  }

  return v7;
}

unint64_t sub_100064070()
{
  unint64_t result = qword_100084FC8;
  if (!qword_100084FC8)
  {
    unint64_t result = swift_getWitnessTable( &unk_100072DE8,  &type metadata for IDSHomeKitInviteeScheduleWeekDayRuleSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084FC8);
  }

  return result;
}

unint64_t sub_1000640B4(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10007F6F0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3) {
    return 3LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_1000640FC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000264C(&qword_1000851C8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100002C78(a1, v9);
  unint64_t v11 = sub_100064070();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for IDSHomeKitInviteeScheduleWeekDayRuleSchema.CodingKeys,  &type metadata for IDSHomeKitInviteeScheduleWeekDayRuleSchema.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return sub_100002FD4(a1);
  }
  char v27 = 0;
  uint64_t v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v27, v5);
  char v14 = v13;
  char v26 = 1;
  uint64_t v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v26, v5);
  int v24 = v16;
  uint64_t v23 = v15;
  char v25 = 2;
  uint64_t v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v25, v5);
  uint64_t v18 = v8;
  char v20 = v19;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v18, v5);
  uint64_t result = sub_100002FD4(a1);
  *(void *)a2 = v12;
  *(_BYTE *)(a2 + 8) = v14 & 1;
  *(void *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 24) = v24 & 1;
  *(void *)(a2 + 32) = v17;
  *(_BYTE *)(a2 + 40) = v20 & 1;
  return result;
}

unint64_t sub_1000642AC()
{
  unint64_t result = qword_100084FD8;
  if (!qword_100084FD8)
  {
    unint64_t result = swift_getWitnessTable( &unk_100072D98,  &type metadata for IDSHomeKitInviteeScheduleYearDayRuleSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084FD8);
  }

  return result;
}

uint64_t sub_1000642F0()
{
  return sub_100004DB8( &qword_100084650,  type metadata accessor for IDSHomeKitInvitationSchema,  (uint64_t)&protocol conformance descriptor for IDSHomeKitInvitationSchema);
}

uint64_t sub_10006431C()
{
  return sub_100004DB8( &qword_1000845F0,  type metadata accessor for IDSHomeKitInvitationSchema,  (uint64_t)&protocol conformance descriptor for IDSHomeKitInvitationSchema);
}

void *initializeBufferWithCopyOfBuffer for IDSHomeKitInvitationSchema(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v15 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v15);
  }

  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date(0LL);
    uint64_t v12 = *(void *)(v11 - 8);
    char v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain(v7);
    if (v13(v10, 1LL, v11))
    {
      uint64_t v14 = sub_10000264C(&qword_100084248);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
    }

    uint64_t v16 = a3[6];
    uint64_t v17 = a3[7];
    uint64_t v18 = (void *)((char *)v4 + v16);
    char v19 = (void *)((char *)a2 + v16);
    uint64_t v20 = v19[1];
    *uint64_t v18 = *v19;
    v18[1] = v20;
    *((_BYTE *)v4 + v17) = *((_BYTE *)a2 + v17);
    uint64_t v21 = a3[8];
    uint64_t v22 = a3[9];
    uint64_t v23 = (char *)v4 + v21;
    int v24 = (char *)a2 + v21;
    *(void *)uint64_t v23 = *(void *)v24;
    v23[8] = v24[8];
    *((_BYTE *)v4 + v22) = *((_BYTE *)a2 + v22);
    uint64_t v25 = a3[10];
    char v26 = (char *)v4 + v25;
    char v27 = (char *)a2 + v25;
    uint64_t v28 = *(void *)((char *)a2 + v25);
    swift_bridgeObjectRetain(v20);
    if (v28 == 1)
    {
      *(_OWORD *)char v26 = *(_OWORD *)v27;
    }

    else
    {
      uint64_t v29 = *((void *)v27 + 1);
      *(void *)char v26 = v28;
      *((void *)v26 + 1) = v29;
      swift_bridgeObjectRetain(v28);
      swift_bridgeObjectRetain(v29);
    }

    uint64_t v30 = a3[11];
    uint64_t v31 = (char *)v4 + v30;
    char v32 = (char *)a2 + v30;
    uint64_t v33 = type metadata accessor for UUID(0LL);
    uint64_t v34 = *(void *)(v33 - 8);
    uint64_t v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48);
    if (v35(v32, 1LL, v33))
    {
      uint64_t v36 = sub_10000264C(&qword_1000846F8);
      memcpy(v31, v32, *(void *)(*(void *)(v36 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v31, v32, v33);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0LL, 1LL, v33);
    }

    uint64_t v37 = a3[12];
    unint64_t v38 = (char *)v4 + v37;
    uint64_t v39 = (char *)a2 + v37;
    unint64_t v40 = *((void *)v39 + 1);
    if (v40 >> 60 == 15)
    {
      *(_OWORD *)unint64_t v38 = *(_OWORD *)v39;
    }

    else
    {
      uint64_t v41 = *(void *)v39;
      sub_100003FF0(*(void *)v39, *((void *)v39 + 1));
      *(void *)unint64_t v38 = v41;
      *((void *)v38 + 1) = v40;
    }

    uint64_t v42 = a3[13];
    uint64_t v43 = a3[14];
    uint64_t v44 = (void *)((char *)v4 + v42);
    uint64_t v45 = (void *)((char *)a2 + v42);
    uint64_t v46 = v45[1];
    *uint64_t v44 = *v45;
    v44[1] = v46;
    unint64_t v47 = (char *)v4 + v43;
    uint64_t v48 = (char *)a2 + v43;
    swift_bridgeObjectRetain(v46);
    if (v35(v48, 1LL, v33))
    {
      uint64_t v49 = sub_10000264C(&qword_1000846F8);
      memcpy(v47, v48, *(void *)(*(void *)(v49 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v47, v48, v33);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v47, 0LL, 1LL, v33);
    }

    uint64_t v50 = a3[15];
    uint64_t v51 = a3[16];
    unint64_t v52 = (void *)((char *)v4 + v50);
    uint64_t v53 = (void *)((char *)a2 + v50);
    uint64_t v54 = v53[1];
    *unint64_t v52 = *v53;
    v52[1] = v54;
    uint64_t v55 = (char *)v4 + v51;
    unint64_t v56 = (_OWORD *)((char *)a2 + v51);
    unint64_t v57 = *(void *)((char *)a2 + v51 + 8);
    swift_bridgeObjectRetain(v54);
    if (v57 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v55 = *v56;
    }

    else
    {
      uint64_t v58 = *(void *)v56;
      sub_100003FF0(v58, v57);
      *(void *)uint64_t v55 = v58;
      *((void *)v55 + 1) = v57;
    }

    uint64_t v59 = a3[17];
    uint64_t v60 = a3[18];
    uint64_t v61 = (void *)((char *)v4 + v59);
    uint64_t v62 = (void *)((char *)a2 + v59);
    uint64_t v63 = v62[1];
    *uint64_t v61 = *v62;
    v61[1] = v63;
    int v64 = (char *)v4 + v60;
    uint64_t v65 = (char *)a2 + v60;
    v64[8] = v65[8];
    *(void *)int v64 = *(void *)v65;
    uint64_t v66 = a3[19];
    uint64_t v67 = a3[20];
    uint64_t v68 = (char *)v4 + v66;
    uint64_t v69 = (char *)a2 + v66;
    *(void *)uint64_t v68 = *(void *)v69;
    v68[8] = v69[8];
    uint64_t v70 = (char *)v4 + v67;
    uint64_t v71 = (_OWORD *)((char *)a2 + v67);
    unint64_t v72 = *(void *)((char *)a2 + v67 + 8);
    swift_bridgeObjectRetain(v63);
    if (v72 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v70 = *v71;
    }

    else
    {
      uint64_t v73 = *(void *)v71;
      sub_100003FF0(v73, v72);
      *(void *)uint64_t v70 = v73;
      *((void *)v70 + 1) = v72;
    }
  }

  return v4;
}

uint64_t destroy for IDSHomeKitInvitationSchema(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  swift_bridgeObjectRelease(*(void *)(a1 + a2[6] + 8));
  uint64_t v7 = (void *)(a1 + a2[10]);
  if (*v7 != 1LL)
  {
    swift_bridgeObjectRelease(*v7);
    swift_bridgeObjectRelease(v7[1]);
  }

  uint64_t v8 = a1 + a2[11];
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (!v11(v8, 1LL, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  }
  uint64_t v12 = (uint64_t *)(a1 + a2[12]);
  unint64_t v13 = v12[1];
  if (v13 >> 60 != 15) {
    sub_100004080(*v12, v13);
  }
  swift_bridgeObjectRelease(*(void *)(a1 + a2[13] + 8));
  uint64_t v14 = a1 + a2[14];
  if (!v11(v14, 1LL, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v14, v9);
  }
  swift_bridgeObjectRelease(*(void *)(a1 + a2[15] + 8));
  uint64_t v15 = (uint64_t *)(a1 + a2[16]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15) {
    sub_100004080(*v15, v16);
  }
  uint64_t result = swift_bridgeObjectRelease(*(void *)(a1 + a2[17] + 8));
  uint64_t v18 = (uint64_t *)(a1 + a2[20]);
  unint64_t v19 = v18[1];
  if (v19 >> 60 != 15) {
    return sub_100004080(*v18, v19);
  }
  return result;
}

void *initializeWithCopy for IDSHomeKitInvitationSchema(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain(v6);
  if (v12(v9, 1LL, v10))
  {
    uint64_t v13 = sub_10000264C(&qword_100084248);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
  }

  uint64_t v14 = a3[6];
  uint64_t v15 = a3[7];
  unint64_t v16 = (void *)((char *)a1 + v14);
  uint64_t v17 = (void *)((char *)a2 + v14);
  uint64_t v18 = v17[1];
  *unint64_t v16 = *v17;
  v16[1] = v18;
  *((_BYTE *)a1 + v15) = *((_BYTE *)a2 + v15);
  uint64_t v19 = a3[8];
  uint64_t v20 = a3[9];
  uint64_t v21 = (char *)a1 + v19;
  uint64_t v22 = (char *)a2 + v19;
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v22[8];
  *((_BYTE *)a1 + v20) = *((_BYTE *)a2 + v20);
  uint64_t v23 = a3[10];
  int v24 = (char *)a1 + v23;
  uint64_t v25 = (char *)a2 + v23;
  uint64_t v26 = *(void *)((char *)a2 + v23);
  swift_bridgeObjectRetain(v18);
  if (v26 == 1)
  {
    *(_OWORD *)int v24 = *(_OWORD *)v25;
  }

  else
  {
    uint64_t v27 = *((void *)v25 + 1);
    *(void *)int v24 = v26;
    *((void *)v24 + 1) = v27;
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v27);
  }

  uint64_t v28 = a3[11];
  uint64_t v29 = (char *)a1 + v28;
  uint64_t v30 = (char *)a2 + v28;
  uint64_t v31 = type metadata accessor for UUID(0LL);
  uint64_t v32 = *(void *)(v31 - 8);
  uint64_t v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48);
  if (v33(v30, 1LL, v31))
  {
    uint64_t v34 = sub_10000264C(&qword_1000846F8);
    memcpy(v29, v30, *(void *)(*(void *)(v34 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v29, v30, v31);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0LL, 1LL, v31);
  }

  uint64_t v35 = a3[12];
  uint64_t v36 = (char *)a1 + v35;
  uint64_t v37 = (char *)a2 + v35;
  unint64_t v38 = *((void *)v37 + 1);
  if (v38 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v36 = *(_OWORD *)v37;
  }

  else
  {
    uint64_t v39 = *(void *)v37;
    sub_100003FF0(*(void *)v37, *((void *)v37 + 1));
    *(void *)uint64_t v36 = v39;
    *((void *)v36 + 1) = v38;
  }

  uint64_t v40 = a3[13];
  uint64_t v41 = a3[14];
  uint64_t v42 = (void *)((char *)a1 + v40);
  uint64_t v43 = (void *)((char *)a2 + v40);
  uint64_t v44 = v43[1];
  *uint64_t v42 = *v43;
  v42[1] = v44;
  uint64_t v45 = (char *)a1 + v41;
  uint64_t v46 = (char *)a2 + v41;
  swift_bridgeObjectRetain(v44);
  if (v33(v46, 1LL, v31))
  {
    uint64_t v47 = sub_10000264C(&qword_1000846F8);
    memcpy(v45, v46, *(void *)(*(void *)(v47 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v45, v46, v31);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v45, 0LL, 1LL, v31);
  }

  uint64_t v48 = a3[15];
  uint64_t v49 = a3[16];
  uint64_t v50 = (void *)((char *)a1 + v48);
  uint64_t v51 = (void *)((char *)a2 + v48);
  uint64_t v52 = v51[1];
  void *v50 = *v51;
  v50[1] = v52;
  uint64_t v53 = (char *)a1 + v49;
  uint64_t v54 = (_OWORD *)((char *)a2 + v49);
  unint64_t v55 = *(void *)((char *)a2 + v49 + 8);
  swift_bridgeObjectRetain(v52);
  if (v55 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v53 = *v54;
  }

  else
  {
    uint64_t v56 = *(void *)v54;
    sub_100003FF0(v56, v55);
    *(void *)uint64_t v53 = v56;
    *((void *)v53 + 1) = v55;
  }

  uint64_t v57 = a3[17];
  uint64_t v58 = a3[18];
  uint64_t v59 = (void *)((char *)a1 + v57);
  uint64_t v60 = (void *)((char *)a2 + v57);
  uint64_t v61 = v60[1];
  *uint64_t v59 = *v60;
  v59[1] = v61;
  uint64_t v62 = (char *)a1 + v58;
  uint64_t v63 = (char *)a2 + v58;
  v62[8] = v63[8];
  *(void *)uint64_t v62 = *(void *)v63;
  uint64_t v64 = a3[19];
  uint64_t v65 = a3[20];
  uint64_t v66 = (char *)a1 + v64;
  uint64_t v67 = (char *)a2 + v64;
  *(void *)uint64_t v66 = *(void *)v67;
  v66[8] = v67[8];
  uint64_t v68 = (char *)a1 + v65;
  uint64_t v69 = (_OWORD *)((char *)a2 + v65);
  unint64_t v70 = *(void *)((char *)a2 + v65 + 8);
  swift_bridgeObjectRetain(v61);
  if (v70 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v68 = *v69;
  }

  else
  {
    uint64_t v71 = *(void *)v69;
    sub_100003FF0(v71, v70);
    *(void *)uint64_t v68 = v71;
    *((void *)v68 + 1) = v70;
  }

  return a1;
}

void *assignWithCopy for IDSHomeKitInvitationSchema(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1LL, v11);
  int v15 = v13(v10, 1LL, v11);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
LABEL_6:
    uint64_t v16 = sub_10000264C(&qword_100084248);
    memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v9, v10, v11);
LABEL_7:
  uint64_t v17 = a3[6];
  uint64_t v18 = (void *)((char *)a1 + v17);
  uint64_t v19 = (void *)((char *)a2 + v17);
  *uint64_t v18 = *v19;
  uint64_t v20 = v19[1];
  uint64_t v21 = v18[1];
  v18[1] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  uint64_t v22 = a3[8];
  uint64_t v23 = (char *)a1 + v22;
  int v24 = (char *)a2 + v22;
  char v25 = v24[8];
  *(void *)uint64_t v23 = *(void *)v24;
  v23[8] = v25;
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  uint64_t v26 = a3[10];
  uint64_t v27 = (void *)((char *)a1 + v26);
  uint64_t v28 = (char *)a2 + v26;
  uint64_t v29 = *(void *)((char *)a1 + v26);
  uint64_t v30 = *(void *)((char *)a2 + v26);
  if (v29 == 1)
  {
    if (v30 != 1)
    {
      *uint64_t v27 = v30;
      uint64_t v31 = *((void *)v28 + 1);
      v27[1] = v31;
      swift_bridgeObjectRetain(v30);
      swift_bridgeObjectRetain(v31);
      goto LABEL_14;
    }

    goto LABEL_12;
  }

  if (v30 == 1)
  {
    sub_1000651DC((void *)((char *)a1 + v26));
LABEL_12:
    *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
    goto LABEL_14;
  }

  *uint64_t v27 = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v29);
  uint64_t v32 = v27[1];
  uint64_t v33 = *((void *)v28 + 1);
  v27[1] = v33;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRelease(v32);
LABEL_14:
  uint64_t v34 = a3[11];
  uint64_t v35 = (char *)a1 + v34;
  uint64_t v36 = (char *)a2 + v34;
  uint64_t v37 = type metadata accessor for UUID(0LL);
  uint64_t v38 = *(void *)(v37 - 8);
  uint64_t v39 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v38 + 48);
  int v40 = v39(v35, 1LL, v37);
  int v41 = v39(v36, 1LL, v37);
  if (v40)
  {
    if (!v41)
    {
      (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v35, v36, v37);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0LL, 1LL, v37);
      goto LABEL_20;
    }

    goto LABEL_19;
  }

  if (v41)
  {
    (*(void (**)(char *, uint64_t))(v38 + 8))(v35, v37);
LABEL_19:
    uint64_t v42 = sub_10000264C(&qword_1000846F8);
    memcpy(v35, v36, *(void *)(*(void *)(v42 - 8) + 64LL));
    goto LABEL_20;
  }

  (*(void (**)(char *, char *, uint64_t))(v38 + 24))(v35, v36, v37);
LABEL_20:
  uint64_t v43 = a3[12];
  uint64_t v44 = (void *)((char *)a1 + v43);
  uint64_t v45 = (void *)((char *)a2 + v43);
  unint64_t v46 = *(void *)((char *)a2 + v43 + 8);
  if (*(void *)((char *)a1 + v43 + 8) >> 60 == 15LL)
  {
    if (v46 >> 60 != 15)
    {
      uint64_t v47 = *v45;
      sub_100003FF0(v47, v46);
      *uint64_t v44 = v47;
      v44[1] = v46;
      goto LABEL_27;
    }

    goto LABEL_25;
  }

  if (v46 >> 60 == 15)
  {
    sub_100004238((uint64_t)v44);
LABEL_25:
    *(_OWORD *)uint64_t v44 = *(_OWORD *)v45;
    goto LABEL_27;
  }

  uint64_t v48 = *v45;
  sub_100003FF0(v48, v46);
  uint64_t v49 = *v44;
  unint64_t v50 = v44[1];
  *uint64_t v44 = v48;
  v44[1] = v46;
  sub_100004080(v49, v50);
LABEL_27:
  uint64_t v51 = a3[13];
  uint64_t v52 = (void *)((char *)a1 + v51);
  uint64_t v53 = (void *)((char *)a2 + v51);
  *uint64_t v52 = *v53;
  uint64_t v54 = v53[1];
  uint64_t v55 = v52[1];
  v52[1] = v54;
  swift_bridgeObjectRetain(v54);
  swift_bridgeObjectRelease(v55);
  uint64_t v56 = a3[14];
  uint64_t v57 = (char *)a1 + v56;
  uint64_t v58 = (char *)a2 + v56;
  int v59 = v39((char *)a1 + v56, 1LL, v37);
  int v60 = v39(v58, 1LL, v37);
  if (v59)
  {
    if (!v60)
    {
      (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v57, v58, v37);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v57, 0LL, 1LL, v37);
      goto LABEL_33;
    }

    goto LABEL_32;
  }

  if (v60)
  {
    (*(void (**)(char *, uint64_t))(v38 + 8))(v57, v37);
LABEL_32:
    uint64_t v61 = sub_10000264C(&qword_1000846F8);
    memcpy(v57, v58, *(void *)(*(void *)(v61 - 8) + 64LL));
    goto LABEL_33;
  }

  (*(void (**)(char *, char *, uint64_t))(v38 + 24))(v57, v58, v37);
LABEL_33:
  uint64_t v62 = a3[15];
  uint64_t v63 = (void *)((char *)a1 + v62);
  uint64_t v64 = (void *)((char *)a2 + v62);
  *uint64_t v63 = *v64;
  uint64_t v65 = v64[1];
  uint64_t v66 = v63[1];
  v63[1] = v65;
  swift_bridgeObjectRetain(v65);
  swift_bridgeObjectRelease(v66);
  uint64_t v67 = a3[16];
  uint64_t v68 = (void *)((char *)a1 + v67);
  uint64_t v69 = (void *)((char *)a2 + v67);
  unint64_t v70 = *(void *)((char *)a2 + v67 + 8);
  if (*(void *)((char *)a1 + v67 + 8) >> 60 == 15LL)
  {
    if (v70 >> 60 != 15)
    {
      uint64_t v71 = *v69;
      sub_100003FF0(v71, v70);
      *uint64_t v68 = v71;
      v68[1] = v70;
      goto LABEL_40;
    }

    goto LABEL_38;
  }

  if (v70 >> 60 == 15)
  {
    sub_100004238((uint64_t)v68);
LABEL_38:
    *(_OWORD *)uint64_t v68 = *(_OWORD *)v69;
    goto LABEL_40;
  }

  uint64_t v72 = *v69;
  sub_100003FF0(v72, v70);
  uint64_t v73 = *v68;
  unint64_t v74 = v68[1];
  *uint64_t v68 = v72;
  v68[1] = v70;
  sub_100004080(v73, v74);
LABEL_40:
  uint64_t v75 = a3[17];
  uint64_t v76 = (void *)((char *)a1 + v75);
  uint64_t v77 = (void *)((char *)a2 + v75);
  *uint64_t v76 = *v77;
  uint64_t v78 = v77[1];
  uint64_t v79 = v76[1];
  v76[1] = v78;
  swift_bridgeObjectRetain(v78);
  swift_bridgeObjectRelease(v79);
  uint64_t v80 = a3[18];
  __int128 v81 = (char *)a1 + v80;
  char v82 = (char *)a2 + v80;
  uint64_t v83 = *(void *)v82;
  v81[8] = v82[8];
  *(void *)__int128 v81 = v83;
  uint64_t v84 = a3[19];
  uint64_t v85 = (char *)a1 + v84;
  uint64_t v86 = (char *)a2 + v84;
  uint64_t v87 = *(void *)v86;
  v85[8] = v86[8];
  *(void *)uint64_t v85 = v87;
  uint64_t v88 = a3[20];
  uint64_t v89 = (void *)((char *)a1 + v88);
  uint64_t v90 = (void *)((char *)a2 + v88);
  unint64_t v91 = *(void *)((char *)a2 + v88 + 8);
  if (*(void *)((char *)a1 + v88 + 8) >> 60 != 15LL)
  {
    if (v91 >> 60 != 15)
    {
      uint64_t v93 = *v90;
      sub_100003FF0(v93, v91);
      uint64_t v94 = *v89;
      unint64_t v95 = v89[1];
      *uint64_t v89 = v93;
      v89[1] = v91;
      sub_100004080(v94, v95);
      return a1;
    }

    sub_100004238((uint64_t)v89);
    goto LABEL_45;
  }

  if (v91 >> 60 == 15)
  {
LABEL_45:
    *(_OWORD *)uint64_t v89 = *(_OWORD *)v90;
    return a1;
  }

  uint64_t v92 = *v90;
  sub_100003FF0(v92, v91);
  *uint64_t v89 = v92;
  v89[1] = v91;
  return a1;
}

void *sub_1000651DC(void *a1)
{
  return a1;
}

_OWORD *initializeWithTake for IDSHomeKitInvitationSchema(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9))
  {
    uint64_t v11 = sub_10000264C(&qword_100084248);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0LL, 1LL, v9);
  }

  uint64_t v12 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *((_BYTE *)a1 + v12) = *((_BYTE *)a2 + v12);
  uint64_t v13 = a3[8];
  uint64_t v14 = a3[9];
  int v15 = (char *)a1 + v13;
  uint64_t v16 = (char *)a2 + v13;
  *(void *)int v15 = *(void *)v16;
  v15[8] = v16[8];
  *((_BYTE *)a1 + v14) = *((_BYTE *)a2 + v14);
  uint64_t v17 = a3[11];
  *(_OWORD *)((char *)a1 + a3[10]) = *(_OWORD *)((char *)a2 + a3[10]);
  uint64_t v18 = (char *)a1 + v17;
  uint64_t v19 = (char *)a2 + v17;
  uint64_t v20 = type metadata accessor for UUID(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
  if (v22(v19, 1LL, v20))
  {
    uint64_t v23 = sub_10000264C(&qword_1000846F8);
    memcpy(v18, v19, *(void *)(*(void *)(v23 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v18, v19, v20);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0LL, 1LL, v20);
  }

  uint64_t v24 = a3[13];
  *(_OWORD *)((char *)a1 + a3[12]) = *(_OWORD *)((char *)a2 + a3[12]);
  *(_OWORD *)((char *)a1 + v24) = *(_OWORD *)((char *)a2 + v24);
  uint64_t v25 = a3[14];
  uint64_t v26 = (char *)a1 + v25;
  uint64_t v27 = (char *)a2 + v25;
  if (v22((char *)a2 + v25, 1LL, v20))
  {
    uint64_t v28 = sub_10000264C(&qword_1000846F8);
    memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v26, v27, v20);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v26, 0LL, 1LL, v20);
  }

  uint64_t v29 = a3[16];
  *(_OWORD *)((char *)a1 + a3[15]) = *(_OWORD *)((char *)a2 + a3[15]);
  *(_OWORD *)((char *)a1 + v29) = *(_OWORD *)((char *)a2 + v29);
  uint64_t v30 = a3[18];
  *(_OWORD *)((char *)a1 + a3[17]) = *(_OWORD *)((char *)a2 + a3[17]);
  uint64_t v31 = (char *)a1 + v30;
  uint64_t v32 = (char *)a2 + v30;
  *(void *)uint64_t v31 = *(void *)v32;
  v31[8] = v32[8];
  uint64_t v33 = a3[19];
  uint64_t v34 = a3[20];
  uint64_t v35 = (char *)a1 + v33;
  uint64_t v36 = (char *)a2 + v33;
  *(void *)uint64_t v35 = *(void *)v36;
  v35[8] = v36[8];
  *(_OWORD *)((char *)a1 + v34) = *(_OWORD *)((char *)a2 + v34);
  return a1;
}

void *assignWithTake for IDSHomeKitInvitationSchema(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1LL, v11);
  int v15 = v13(v10, 1LL, v11);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
LABEL_6:
    uint64_t v16 = sub_10000264C(&qword_100084248);
    memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v9, v10, v11);
LABEL_7:
  uint64_t v17 = a3[6];
  uint64_t v18 = (void *)((char *)a1 + v17);
  uint64_t v19 = (void *)((char *)a2 + v17);
  *uint64_t v18 = *v19;
  uint64_t v20 = v18[1];
  v18[1] = v19[1];
  swift_bridgeObjectRelease(v20);
  uint64_t v21 = a3[8];
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  uint64_t v22 = (char *)a1 + v21;
  uint64_t v23 = (char *)a2 + v21;
  *(void *)uint64_t v22 = *(void *)v23;
  v22[8] = v23[8];
  uint64_t v24 = a3[10];
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  uint64_t v25 = (char *)a1 + v24;
  uint64_t v26 = (char *)a2 + v24;
  uint64_t v27 = *(void *)((char *)a1 + v24);
  if (v27 == 1)
  {
LABEL_10:
    *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
    goto LABEL_12;
  }

  if (*(void *)v26 == 1LL)
  {
    sub_1000651DC((void *)((char *)a1 + v24));
    goto LABEL_10;
  }

  *(void *)uint64_t v25 = *(void *)v26;
  swift_bridgeObjectRelease(v27);
  uint64_t v28 = *((void *)v25 + 1);
  *((void *)v25 + 1) = *((void *)v26 + 1);
  swift_bridgeObjectRelease(v28);
LABEL_12:
  uint64_t v29 = a3[11];
  uint64_t v30 = (char *)a1 + v29;
  uint64_t v31 = (char *)a2 + v29;
  uint64_t v32 = type metadata accessor for UUID(0LL);
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v34 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 48);
  int v35 = v34(v30, 1LL, v32);
  int v36 = v34(v31, 1LL, v32);
  if (v35)
  {
    if (!v36)
    {
      (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v30, v31, v32);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0LL, 1LL, v32);
      goto LABEL_18;
    }

    goto LABEL_17;
  }

  if (v36)
  {
    (*(void (**)(char *, uint64_t))(v33 + 8))(v30, v32);
LABEL_17:
    uint64_t v37 = sub_10000264C(&qword_1000846F8);
    memcpy(v30, v31, *(void *)(*(void *)(v37 - 8) + 64LL));
    goto LABEL_18;
  }

  (*(void (**)(char *, char *, uint64_t))(v33 + 40))(v30, v31, v32);
LABEL_18:
  uint64_t v38 = a3[12];
  uint64_t v39 = (uint64_t)a1 + v38;
  int v40 = (char *)a2 + v38;
  unint64_t v41 = *(void *)((char *)a1 + v38 + 8);
  if (v41 >> 60 == 15)
  {
LABEL_21:
    *(_OWORD *)uint64_t v39 = *(_OWORD *)v40;
    goto LABEL_23;
  }

  unint64_t v42 = *((void *)v40 + 1);
  if (v42 >> 60 == 15)
  {
    sub_100004238(v39);
    goto LABEL_21;
  }

  uint64_t v43 = *(void *)v39;
  *(void *)uint64_t v39 = *(void *)v40;
  *(void *)(v39 + 8) = v42;
  sub_100004080(v43, v41);
LABEL_23:
  uint64_t v44 = a3[13];
  uint64_t v45 = (void *)((char *)a1 + v44);
  unint64_t v46 = (void *)((char *)a2 + v44);
  uint64_t v48 = *v46;
  uint64_t v47 = v46[1];
  uint64_t v49 = v45[1];
  *uint64_t v45 = v48;
  v45[1] = v47;
  swift_bridgeObjectRelease(v49);
  uint64_t v50 = a3[14];
  uint64_t v51 = (char *)a1 + v50;
  uint64_t v52 = (char *)a2 + v50;
  int v53 = v34((char *)a1 + v50, 1LL, v32);
  int v54 = v34(v52, 1LL, v32);
  if (v53)
  {
    if (!v54)
    {
      (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v51, v52, v32);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v51, 0LL, 1LL, v32);
      goto LABEL_29;
    }

    goto LABEL_28;
  }

  if (v54)
  {
    (*(void (**)(char *, uint64_t))(v33 + 8))(v51, v32);
LABEL_28:
    uint64_t v55 = sub_10000264C(&qword_1000846F8);
    memcpy(v51, v52, *(void *)(*(void *)(v55 - 8) + 64LL));
    goto LABEL_29;
  }

  (*(void (**)(char *, char *, uint64_t))(v33 + 40))(v51, v52, v32);
LABEL_29:
  uint64_t v56 = a3[15];
  uint64_t v57 = (void *)((char *)a1 + v56);
  uint64_t v58 = (void *)((char *)a2 + v56);
  uint64_t v60 = *v58;
  uint64_t v59 = v58[1];
  uint64_t v61 = v57[1];
  *uint64_t v57 = v60;
  v57[1] = v59;
  swift_bridgeObjectRelease(v61);
  uint64_t v62 = a3[16];
  uint64_t v63 = (uint64_t)a1 + v62;
  uint64_t v64 = (char *)a2 + v62;
  unint64_t v65 = *(void *)((char *)a1 + v62 + 8);
  if (v65 >> 60 == 15)
  {
LABEL_32:
    *(_OWORD *)uint64_t v63 = *(_OWORD *)v64;
    goto LABEL_34;
  }

  unint64_t v66 = *((void *)v64 + 1);
  if (v66 >> 60 == 15)
  {
    sub_100004238(v63);
    goto LABEL_32;
  }

  uint64_t v67 = *(void *)v63;
  *(void *)uint64_t v63 = *(void *)v64;
  *(void *)(v63 + 8) = v66;
  sub_100004080(v67, v65);
LABEL_34:
  uint64_t v68 = a3[17];
  uint64_t v69 = (void *)((char *)a1 + v68);
  unint64_t v70 = (void *)((char *)a2 + v68);
  uint64_t v72 = *v70;
  uint64_t v71 = v70[1];
  uint64_t v73 = v69[1];
  *uint64_t v69 = v72;
  v69[1] = v71;
  swift_bridgeObjectRelease(v73);
  uint64_t v74 = a3[18];
  uint64_t v75 = a3[19];
  uint64_t v76 = (char *)a1 + v74;
  uint64_t v77 = (char *)a2 + v74;
  v76[8] = v77[8];
  *(void *)uint64_t v76 = *(void *)v77;
  uint64_t v78 = (char *)a1 + v75;
  uint64_t v79 = (char *)a2 + v75;
  v78[8] = v79[8];
  *(void *)uint64_t v78 = *(void *)v79;
  uint64_t v80 = a3[20];
  __int128 v81 = (void *)((char *)a1 + v80);
  char v82 = (void *)((char *)a2 + v80);
  unint64_t v83 = *(void *)((char *)a1 + v80 + 8);
  if (v83 >> 60 != 15)
  {
    unint64_t v84 = v82[1];
    if (v84 >> 60 != 15)
    {
      uint64_t v85 = *v81;
      *__int128 v81 = *v82;
      v81[1] = v84;
      sub_100004080(v85, v83);
      return a1;
    }

    sub_100004238((uint64_t)v81);
  }

  *(_OWORD *)__int128 v81 = *(_OWORD *)v82;
  return a1;
}

uint64_t getEnumTagSinglePayload for IDSHomeKitInvitationSchema(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006593C);
}

uint64_t sub_10006593C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }

  else
  {
    uint64_t v9 = sub_10000264C(&qword_100084248);
    uint64_t v10 = *(void *)(v9 - 8);
    if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
    {
      uint64_t v11 = v9;
      uint64_t v12 = *(int *)(a3 + 20);
    }

    else
    {
      uint64_t v11 = sub_10000264C(&qword_1000846F8);
      uint64_t v10 = *(void *)(v11 - 8);
      uint64_t v12 = *(int *)(a3 + 44);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }

uint64_t storeEnumTagSinglePayload for IDSHomeKitInvitationSchema( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000659FC);
}

uint64_t sub_1000659FC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 8) = a2;
  }

  else
  {
    uint64_t v8 = sub_10000264C(&qword_100084248);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a4 + 20);
    }

    else
    {
      uint64_t v10 = sub_10000264C(&qword_1000846F8);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a4 + 44);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }

  return result;
}

void sub_100065AA0(uint64_t a1)
{
  v6[0] = &unk_1000727B0;
  sub_100065B90( 319LL,  (unint64_t *)&qword_1000842C8,  (uint64_t (*)(uint64_t))&type metadata accessor for Date);
  if (v3 <= 0x3F)
  {
    v6[1] = *(void *)(v2 - 8) + 64LL;
    _OWORD v6[2] = &unk_1000727B0;
    v6[3] = &unk_1000727C8;
    v6[4] = &unk_1000727E0;
    _OWORD v6[5] = &unk_1000727C8;
    v6[6] = &unk_1000727F8;
    sub_100065B90( 319LL,  (unint64_t *)&unk_100085050,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
    if (v5 <= 0x3F)
    {
      uint64_t v7 = *(void *)(v4 - 8) + 64LL;
      uint64_t v8 = &unk_100072810;
      uint64_t v9 = &unk_1000727B0;
      uint64_t v10 = v7;
      uint64_t v11 = &unk_1000727B0;
      uint64_t v12 = &unk_100072810;
      uint64_t v13 = &unk_1000727B0;
      int v14 = &unk_1000727E0;
      int v15 = &unk_1000727E0;
      uint64_t v16 = &unk_100072810;
      swift_initStructMetadata(a1, 256LL, 17LL, v6, a1 + 16);
    }
  }

void sub_100065B90(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  if (!*a2)
  {
    uint64_t v5 = a3(255LL);
    unint64_t v6 = type metadata accessor for Optional(a1, v5);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }

void *initializeBufferWithCopyOfBuffer for IDSHomeKitInvitationSchema.IDSHomeKitInvitationRequestedCapabilitiesSchema( void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for IDSHomeKitInvitationSchema.IDSHomeKitInvitationRequestedCapabilitiesSchema(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 8));
}

void *assignWithCopy for IDSHomeKitInvitationSchema.IDSHomeKitInvitationRequestedCapabilitiesSchema( void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

void *assignWithTake for IDSHomeKitInvitationSchema.IDSHomeKitInvitationRequestedCapabilitiesSchema( void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for IDSHomeKitInvitationSchema.IDSHomeKitInvitationRequestedCapabilitiesSchema( uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IDSHomeKitInvitationSchema.IDSHomeKitInvitationRequestedCapabilitiesSchema( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for IDSHomeKitInvitationSchema.IDSHomeKitInvitationRequestedCapabilitiesSchema()
{
  return &type metadata for IDSHomeKitInvitationSchema.IDSHomeKitInvitationRequestedCapabilitiesSchema;
}

uint64_t destroy for IDSHomeKitInviteeScheduleSchema(void *a1)
{
  return swift_bridgeObjectRelease(a1[1]);
}

uint64_t *_s19IDSBlastDoorService31IDSHomeKitInviteeScheduleSchemaVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t *assignWithCopy for IDSHomeKitInviteeScheduleSchema(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  *a1 = *a2;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v4);
  uint64_t v6 = a1[1];
  uint64_t v7 = a2[1];
  a1[1] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v6);
  return a1;
}

void *assignWithTake for IDSHomeKitInviteeScheduleSchema(void *a1, _OWORD *a2)
{
  uint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for IDSHomeKitInviteeScheduleSchema(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for IDSHomeKitInviteeScheduleSchema( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for IDSHomeKitInviteeScheduleSchema()
{
  return &type metadata for IDSHomeKitInviteeScheduleSchema;
}

__n128 initializeWithCopy for IDSHomeKitInviteeScheduleWeekDayRuleSchema(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for IDSHomeKitInviteeScheduleWeekDayRuleSchema(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for IDSHomeKitInviteeScheduleWeekDayRuleSchema( uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 41) = v3;
  return result;
}

ValueMetadata *type metadata accessor for IDSHomeKitInviteeScheduleWeekDayRuleSchema()
{
  return &type metadata for IDSHomeKitInviteeScheduleWeekDayRuleSchema;
}

uint64_t *initializeBufferWithCopyOfBuffer for IDSHomeKitInviteeScheduleYearDayRuleSchema( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v11);
  }

  else
  {
    uint64_t v7 = type metadata accessor for Date(0LL);
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t v9 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48);
    if (v9(a2, 1LL, v7))
    {
      uint64_t v10 = sub_10000264C(&qword_100084248);
      memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0LL, 1LL, v7);
    }

    uint64_t v12 = *(int *)(a3 + 20);
    uint64_t v13 = (char *)a1 + v12;
    int v14 = (char *)a2 + v12;
    if (v9((uint64_t *)v14, 1LL, v7))
    {
      uint64_t v15 = sub_10000264C(&qword_100084248);
      memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v13, v14, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v13, 0LL, 1LL, v7);
    }
  }

  return a1;
}

uint64_t destroy for IDSHomeKitInviteeScheduleYearDayRuleSchema(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v6(a1, 1LL, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  }
  uint64_t v7 = a1 + *(int *)(a2 + 20);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(v7, 1LL, v4);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v4);
  }
  return result;
}

char *initializeWithCopy for IDSHomeKitInviteeScheduleYearDayRuleSchema(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1LL, v6))
  {
    uint64_t v9 = sub_10000264C(&qword_100084248);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0LL, 1LL, v6);
  }

  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  if (v8(v12, 1LL, v6))
  {
    uint64_t v13 = sub_10000264C(&qword_100084248);
    memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v11, v12, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v11, 0LL, 1LL, v6);
  }

  return a1;
}

char *assignWithCopy for IDSHomeKitInviteeScheduleYearDayRuleSchema(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1LL, v6);
  int v10 = v8(a2, 1LL, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = sub_10000264C(&qword_100084248);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = &a1[v12];
  int v14 = &a2[v12];
  int v15 = v8(&a1[v12], 1LL, v6);
  int v16 = v8(v14, 1LL, v6);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(v13, v14, v6);
      return a1;
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    goto LABEL_12;
  }

  if (v16)
  {
LABEL_12:
    uint64_t v17 = sub_10000264C(&qword_100084248);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v13, v14, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v13, 0LL, 1LL, v6);
  return a1;
}

char *initializeWithTake for IDSHomeKitInviteeScheduleYearDayRuleSchema(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1LL, v6))
  {
    uint64_t v9 = sub_10000264C(&qword_100084248);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0LL, 1LL, v6);
  }

  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  if (v8(v12, 1LL, v6))
  {
    uint64_t v13 = sub_10000264C(&qword_100084248);
    memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v11, v12, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v11, 0LL, 1LL, v6);
  }

  return a1;
}

char *assignWithTake for IDSHomeKitInviteeScheduleYearDayRuleSchema(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1LL, v6);
  int v10 = v8(a2, 1LL, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = sub_10000264C(&qword_100084248);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = &a1[v12];
  int v14 = &a2[v12];
  int v15 = v8(&a1[v12], 1LL, v6);
  int v16 = v8(v14, 1LL, v6);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(v13, v14, v6);
      return a1;
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    goto LABEL_12;
  }

  if (v16)
  {
LABEL_12:
    uint64_t v17 = sub_10000264C(&qword_100084248);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v13, v14, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v13, 0LL, 1LL, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for IDSHomeKitInviteeScheduleYearDayRuleSchema( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000666E8);
}

uint64_t sub_1000666E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000264C(&qword_100084248);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for IDSHomeKitInviteeScheduleYearDayRuleSchema( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100066734);
}

uint64_t sub_100066734(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000264C(&qword_100084248);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(a1, a2, a2, v4);
}

void sub_100066778(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(v2 - 8) + 64LL;
    v4[1] = v4[0];
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
  }

ValueMetadata *type metadata accessor for IDSHomeKitInviteeScheduleYearDayRuleSchema.CodingKeys()
{
  return &type metadata for IDSHomeKitInviteeScheduleYearDayRuleSchema.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for IDSHomeKitInviteeScheduleWeekDayRuleSchema.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_100066854 + 4 * byte_1000725AC[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100066888 + 4 * byte_1000725A7[v4]))();
}

uint64_t sub_100066888(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100066890(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100066898LL);
  }
  return result;
}

uint64_t sub_1000668A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000668ACLL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1000668B0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000668B8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IDSHomeKitInviteeScheduleWeekDayRuleSchema.CodingKeys()
{
  return &type metadata for IDSHomeKitInviteeScheduleWeekDayRuleSchema.CodingKeys;
}

ValueMetadata *type metadata accessor for IDSHomeKitInviteeScheduleSchema.CodingKeys()
{
  return &type metadata for IDSHomeKitInviteeScheduleSchema.CodingKeys;
}

uint64_t getEnumTagSinglePayload for IDSHomeKitInvitationSchema.CodingKeys( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF0) {
    goto LABEL_17;
  }
  if (a2 + 16 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 16) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 16;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 16;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 16;
    }
  }

uint64_t storeEnumTagSinglePayload for IDSHomeKitInvitationSchema.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 16 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 16) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF0) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xEF) {
    return ((uint64_t (*)(void))((char *)&loc_1000669C0 + 4 * byte_1000725B6[v4]))();
  }
  *a1 = a2 + 16;
  return ((uint64_t (*)(void))((char *)sub_1000669F4 + 4 * byte_1000725B1[v4]))();
}

uint64_t sub_1000669F4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000669FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100066A04LL);
  }
  return result;
}

uint64_t sub_100066A10(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100066A18LL);
  }
  *(_BYTE *)uint64_t result = a2 + 16;
  return result;
}

uint64_t sub_100066A1C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100066A24(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IDSHomeKitInvitationSchema.CodingKeys()
{
  return &type metadata for IDSHomeKitInvitationSchema.CodingKeys;
}

uint64_t _s19IDSBlastDoorService42IDSHomeKitInviteeScheduleYearDayRuleSchemaV10CodingKeysOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100066A8C + 4 * byte_1000725C0[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100066AC0 + 4 * byte_1000725BB[v4]))();
}

uint64_t sub_100066AC0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100066AC8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100066AD0LL);
  }
  return result;
}

uint64_t sub_100066ADC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100066AE4LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100066AE8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100066AF0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IDSHomeKitInvitationSchema.IDSHomeKitInvitationRequestedCapabilitiesSchema.CodingKeys()
{
  return &type metadata for IDSHomeKitInvitationSchema.IDSHomeKitInvitationRequestedCapabilitiesSchema.CodingKeys;
}

unint64_t sub_100066B10()
{
  unint64_t result = qword_100085150;
  if (!qword_100085150)
  {
    unint64_t result = swift_getWitnessTable( &unk_1000729B0,  &type metadata for IDSHomeKitInvitationSchema.IDSHomeKitInvitationRequestedCapabilitiesSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100085150);
  }

  return result;
}

unint64_t sub_100066B58()
{
  unint64_t result = qword_100085158;
  if (!qword_100085158)
  {
    unint64_t result = swift_getWitnessTable(&unk_100072AA0, &type metadata for IDSHomeKitInvitationSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100085158);
  }

  return result;
}

unint64_t sub_100066BA0()
{
  unint64_t result = qword_100085160;
  if (!qword_100085160)
  {
    unint64_t result = swift_getWitnessTable(&unk_100072B90, &type metadata for IDSHomeKitInviteeScheduleSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100085160);
  }

  return result;
}

unint64_t sub_100066BE8()
{
  unint64_t result = qword_100085168;
  if (!qword_100085168)
  {
    unint64_t result = swift_getWitnessTable( &unk_100072C80,  &type metadata for IDSHomeKitInviteeScheduleWeekDayRuleSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100085168);
  }

  return result;
}

unint64_t sub_100066C30()
{
  unint64_t result = qword_100085170;
  if (!qword_100085170)
  {
    unint64_t result = swift_getWitnessTable( &unk_100072D70,  &type metadata for IDSHomeKitInviteeScheduleYearDayRuleSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100085170);
  }

  return result;
}

unint64_t sub_100066C78()
{
  unint64_t result = qword_100085178;
  if (!qword_100085178)
  {
    unint64_t result = swift_getWitnessTable( &unk_100072CA8,  &type metadata for IDSHomeKitInviteeScheduleYearDayRuleSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100085178);
  }

  return result;
}

unint64_t sub_100066CC0()
{
  unint64_t result = qword_100085180;
  if (!qword_100085180)
  {
    unint64_t result = swift_getWitnessTable( &unk_100072CD0,  &type metadata for IDSHomeKitInviteeScheduleYearDayRuleSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100085180);
  }

  return result;
}

unint64_t sub_100066D08()
{
  unint64_t result = qword_100085188;
  if (!qword_100085188)
  {
    unint64_t result = swift_getWitnessTable( &unk_100072BB8,  &type metadata for IDSHomeKitInviteeScheduleWeekDayRuleSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100085188);
  }

  return result;
}

unint64_t sub_100066D50()
{
  unint64_t result = qword_100085190;
  if (!qword_100085190)
  {
    unint64_t result = swift_getWitnessTable( &unk_100072BE0,  &type metadata for IDSHomeKitInviteeScheduleWeekDayRuleSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100085190);
  }

  return result;
}

unint64_t sub_100066D98()
{
  unint64_t result = qword_100085198;
  if (!qword_100085198)
  {
    unint64_t result = swift_getWitnessTable(&unk_100072AC8, &type metadata for IDSHomeKitInviteeScheduleSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100085198);
  }

  return result;
}

unint64_t sub_100066DE0()
{
  unint64_t result = qword_1000851A0;
  if (!qword_1000851A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100072AF0, &type metadata for IDSHomeKitInviteeScheduleSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000851A0);
  }

  return result;
}

unint64_t sub_100066E28()
{
  unint64_t result = qword_1000851A8;
  if (!qword_1000851A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000729D8, &type metadata for IDSHomeKitInvitationSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000851A8);
  }

  return result;
}

unint64_t sub_100066E70()
{
  unint64_t result = qword_1000851B0;
  if (!qword_1000851B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100072A00, &type metadata for IDSHomeKitInvitationSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000851B0);
  }

  return result;
}

unint64_t sub_100066EB8()
{
  unint64_t result = qword_1000851B8;
  if (!qword_1000851B8)
  {
    unint64_t result = swift_getWitnessTable( &unk_1000728E8,  &type metadata for IDSHomeKitInvitationSchema.IDSHomeKitInvitationRequestedCapabilitiesSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000851B8);
  }

  return result;
}

unint64_t sub_100066F00()
{
  unint64_t result = qword_1000851C0;
  if (!qword_1000851C0)
  {
    unint64_t result = swift_getWitnessTable( &unk_100072910,  &type metadata for IDSHomeKitInvitationSchema.IDSHomeKitInvitationRequestedCapabilitiesSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000851C0);
  }

  return result;
}

uint64_t sub_100066F44(unint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = sub_10003DDF4(&qword_100084F90);
    a2();
    uint64_t result = swift_getWitnessTable(a3, v7);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_100066FAC()
{
  unint64_t result = qword_1000851E0;
  if (!qword_1000851E0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IDSHomeKitInviteeScheduleWeekDayRuleSchema,  &type metadata for IDSHomeKitInviteeScheduleWeekDayRuleSchema);
    atomic_store(result, (unint64_t *)&qword_1000851E0);
  }

  return result;
}

uint64_t sub_100066FF0(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v9 = sub_10003DDF4(&qword_100084FA8);
    sub_100004DB8(a2, type metadata accessor for IDSHomeKitInviteeScheduleYearDayRuleSchema, a3);
    uint64_t result = swift_getWitnessTable(a4, v9);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_100067074(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = sub_10003DDF4(&qword_100084F28);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_1000670DC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100067104 + 4 * a3[a1]))( 116LL,  0xE100000000000000LL);
}

uint64_t sub_100067104()
{
  return 118LL;
}

uint64_t sub_10006710C()
{
  return 26723LL;
}

uint64_t sub_100067118()
{
  return 25956LL;
}

uint64_t sub_100067124()
{
  return 25715LL;
}

uint64_t sub_100067130()
{
  return 26989LL;
}

uint64_t sub_10006713C()
{
  return 7500147LL;
}

uint64_t sub_10006714C()
{
  return 98LL;
}

uint64_t sub_100067154()
{
  return 29810LL;
}

unint64_t sub_100067160()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_10006717C()
{
  return 25970LL;
}

uint64_t sub_100067188()
{
  return 99LL;
}

uint64_t sub_100067190()
{
  return 1835819888LL;
}

uint64_t sub_1000671A0()
{
  return 112LL;
}

uint64_t sub_1000671A8()
{
  return 100LL;
}

uint64_t sub_1000671B0()
{
  return 115LL;
}

uint64_t sub_1000671B8()
{
  return 6579056LL;
}

uint64_t sub_1000671C8()
{
  return 25443LL;
}

uint64_t sub_1000671D4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000671FC + 4 * byte_100072FC2[a1]))( 116LL,  0xE100000000000000LL);
}

uint64_t sub_1000671FC()
{
  return 118LL;
}

uint64_t sub_100067204()
{
  return 26723LL;
}

uint64_t sub_100067210()
{
  return 25956LL;
}

uint64_t sub_10006721C()
{
  return 25715LL;
}

uint64_t sub_100067228()
{
  return 26989LL;
}

uint64_t sub_100067234()
{
  return 7500147LL;
}

uint64_t sub_100067244()
{
  return 98LL;
}

uint64_t sub_10006724C()
{
  return 29810LL;
}

unint64_t sub_100067258()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_100067274()
{
  return 25970LL;
}

uint64_t sub_100067280()
{
  return 99LL;
}

uint64_t sub_100067288()
{
  return 1835819888LL;
}

uint64_t sub_100067298()
{
  return 112LL;
}

uint64_t sub_1000672A0()
{
  return 100LL;
}

uint64_t sub_1000672A8()
{
  return 115LL;
}

uint64_t sub_1000672B0()
{
  return 6579056LL;
}

uint64_t sub_1000672C0()
{
  return 25443LL;
}

uint64_t sub_1000672CC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2 = *a2;
  uint64_t v3 = sub_1000670DC(*a1);
  uint64_t v5 = v4;
  uint64_t v6 = sub_1000670DC(v2);
  if (v3 == v6 && v5 == v7)
  {
    char v10 = 1;
    uint64_t v9 = v5;
  }

  else
  {
    uint64_t v9 = v7;
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
  }

  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

Swift::Int sub_100067354()
{
  unsigned __int8 v1 = *v0;
  Hasher.init(_seed:)(v6, 0LL);
  uint64_t v2 = sub_1000670DC(v1);
  uint64_t v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_1000673B4(uint64_t a1)
{
  uint64_t v3 = sub_1000670DC(*v1);
  uint64_t v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1000673F4(uint64_t a1)
{
  unsigned __int8 v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  uint64_t v3 = sub_1000670DC(v2);
  uint64_t v5 = v4;
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_100067450@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10006906C(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_10006747C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000670DC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000674A4()
{
  return sub_1000671D4(*v0);
}

uint64_t sub_1000674AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10006906C(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000674D0(_BYTE *a1@<X8>)
{
  *a1 = 18;
}

uint64_t sub_1000674DC(uint64_t a1)
{
  unint64_t v2 = sub_10006798C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100067504(uint64_t a1)
{
  unint64_t v2 = sub_10006798C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IDSSessionInvitationSchema.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000264C(&qword_100085208);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100002C78(a1, v9);
  unint64_t v11 = sub_10006798C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for IDSSessionInvitationSchema.CodingKeys,  &type metadata for IDSSessionInvitationSchema.CodingKeys,  v11,  v9,  v10);
  LOBYTE(v39) = 0;
  uint64_t v12 = type metadata accessor for IDSSessionInvitation.TransportType(0LL);
  uint64_t v13 = sub_10006817C( &qword_100085218,  (uint64_t)&protocol conformance descriptor for IDSSessionInvitation.TransportType);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v39, v5, v12, v13);
  if (!v2)
  {
    int v14 = (int *)type metadata accessor for IDSSessionInvitationSchema(0LL);
    uint64_t v15 = *(void *)(v3 + v14[5]);
    LOBYTE(v39) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v15, &v39, v5);
    int v16 = (uint64_t *)(v3 + v14[6]);
    uint64_t v17 = *v16;
    uint64_t v18 = *((unsigned __int8 *)v16 + 8);
    LOBYTE(v39) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, v18, &v39, v5);
    uint64_t v19 = *(unsigned __int8 *)(v3 + v14[7]);
    LOBYTE(v39) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, &v39, v5);
    uint64_t v20 = *(unsigned __int8 *)(v3 + v14[8]);
    LOBYTE(v39) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20, &v39, v5);
    uint64_t v21 = *(unsigned __int8 *)(v3 + v14[9]);
    LOBYTE(v39) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v21, &v39, v5);
    uint64_t v22 = *(unsigned __int8 *)(v3 + v14[10]);
    LOBYTE(v39) = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v22, &v39, v5);
    __int128 v39 = *(_OWORD *)(v3 + v14[11]);
    char v38 = 7;
    unint64_t v23 = sub_100003C08();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v39, &v38, v5, &type metadata for Data, v23);
    uint64_t v24 = *(unsigned __int8 *)(v3 + v14[12]);
    LOBYTE(v39) = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v24, &v39, v5);
    __int128 v39 = *(_OWORD *)(v3 + v14[13]);
    char v38 = 9;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v39, &v38, v5, &type metadata for Data, v23);
    uint64_t v25 = *(unsigned __int8 *)(v3 + v14[14]);
    LOBYTE(v39) = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v25, &v39, v5);
    __int128 v39 = *(_OWORD *)(v3 + v14[15]);
    char v38 = 11;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v39, &v38, v5, &type metadata for Data, v23);
    uint64_t v26 = *(unsigned __int8 *)(v3 + v14[16]);
    LOBYTE(v39) = 12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v26, &v39, v5);
    uint64_t v27 = (uint64_t *)(v3 + v14[17]);
    uint64_t v28 = *v27;
    uint64_t v29 = v27[1];
    LOBYTE(v39) = 13;
    KeyedEncodingContainer.encode(_:forKey:)(v28, v29, &v39, v5);
    uint64_t v30 = *(unsigned __int8 *)(v3 + v14[18]);
    LOBYTE(v39) = 14;
    KeyedEncodingContainer.encode(_:forKey:)(v30, &v39, v5);
    uint64_t v31 = (uint64_t *)(v3 + v14[19]);
    uint64_t v32 = *v31;
    uint64_t v33 = v31[1];
    LOBYTE(v39) = 15;
    KeyedEncodingContainer.encode(_:forKey:)(v32, v33, &v39, v5);
    uint64_t v34 = *(unsigned __int8 *)(v3 + v14[20]);
    LOBYTE(v39) = 16;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v34, &v39, v5);
    uint64_t v35 = *(unsigned __int8 *)(v3 + v14[21]);
    LOBYTE(v39) = 17;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v35, &v39, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_10006798C()
{
  unint64_t result = qword_100085210;
  if (!qword_100085210)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000731C4, &type metadata for IDSSessionInvitationSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100085210);
  }

  return result;
}

uint64_t type metadata accessor for IDSSessionInvitationSchema(uint64_t a1)
{
  uint64_t result = qword_100085288;
  if (!qword_100085288) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for IDSSessionInvitationSchema);
  }
  return result;
}

uint64_t IDSSessionInvitationSchema.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for IDSSessionInvitation.TransportType(0LL);
  uint64_t v42 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v41 = sub_10000264C(&qword_100085220);
  uint64_t v8 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v45 = (int *)type metadata accessor for IDSSessionInvitationSchema(0LL);
  __chkstk_darwin(v45);
  uint64_t v43 = a1;
  uint64_t v44 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = a1[3];
  uint64_t v12 = a1[4];
  sub_100002C78(a1, v13);
  unint64_t v14 = sub_10006798C();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for IDSSessionInvitationSchema.CodingKeys,  &type metadata for IDSSessionInvitationSchema.CodingKeys,  v14,  v13,  v12);
  if (v2) {
    return sub_100002FD4(v43);
  }
  uint64_t v39 = a2;
  uint64_t v40 = v8;
  LOBYTE(v46) = 0;
  uint64_t v15 = sub_10006817C( &qword_100085228,  (uint64_t)&protocol conformance descriptor for IDSSessionInvitation.TransportType);
  uint64_t v16 = v41;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v5, &v46, v41, v5, v15);
  uint64_t v17 = v44;
  (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v44, v7, v5);
  LOBYTE(v46) = 1;
  uint64_t v18 = KeyedDecodingContainer.decode(_:forKey:)(&v46, v16);
  uint64_t v19 = v45;
  *(void *)&v17[v45[5]] = v18;
  LOBYTE(v46) = 2;
  uint64_t v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v46, v16);
  uint64_t v21 = &v17[v19[6]];
  *(void *)uint64_t v21 = v20;
  v21[8] = v22 & 1;
  LOBYTE(v46) = 3;
  v17[v19[7]] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v46, v16);
  LOBYTE(v46) = 4;
  v17[v19[8]] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v46, v16);
  LOBYTE(v46) = 5;
  v17[v19[9]] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v46, v16);
  LOBYTE(v46) = 6;
  v17[v19[10]] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v46, v16);
  char v47 = 7;
  unint64_t v23 = sub_100004570();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v46,  &type metadata for Data,  &v47,  v16,  &type metadata for Data,  v23);
  *(_OWORD *)&v17[v45[11]] = v46;
  LOBYTE(v46) = 8;
  char v24 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v46, v16);
  v17[v45[12]] = v24;
  char v47 = 9;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v46,  &type metadata for Data,  &v47,  v16,  &type metadata for Data,  v23);
  *(_OWORD *)&v44[v45[13]] = v46;
  LOBYTE(v46) = 10;
  char v25 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v46, v41);
  v44[v45[14]] = v25;
  char v47 = 11;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v46,  &type metadata for Data,  &v47,  v41,  &type metadata for Data,  v23);
  *(_OWORD *)&v44[v45[15]] = v46;
  LOBYTE(v46) = 12;
  char v26 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v46, v41);
  v44[v45[16]] = v26;
  LOBYTE(v46) = 13;
  uint64_t v27 = KeyedDecodingContainer.decode(_:forKey:)(&v46, v41);
  uint64_t v28 = (uint64_t *)&v44[v45[17]];
  *uint64_t v28 = v27;
  v28[1] = v29;
  LOBYTE(v46) = 14;
  char v30 = KeyedDecodingContainer.decode(_:forKey:)(&v46, v41);
  v44[v45[18]] = v30 & 1;
  LOBYTE(v46) = 15;
  uint64_t v31 = KeyedDecodingContainer.decode(_:forKey:)(&v46, v41);
  uint64_t v32 = (uint64_t *)&v44[v45[19]];
  *uint64_t v32 = v31;
  v32[1] = v33;
  LOBYTE(v46) = 16;
  char v34 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v46, v41);
  v44[v45[20]] = v34;
  LOBYTE(v46) = 17;
  char v35 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v46, v41);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v10, v41);
  uint64_t v36 = (uint64_t)v44;
  v44[v45[21]] = v35;
  sub_1000681BC(v36, v39);
  sub_100002FD4(v43);
  return sub_10002F288(v36);
}

uint64_t sub_10006817C(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for IDSSessionInvitation.TransportType(255LL);
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_1000681BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for IDSSessionInvitationSchema(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100068200@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return IDSSessionInvitationSchema.init(from:)(a1, a2);
}

uint64_t sub_100068214(void *a1)
{
  return IDSSessionInvitationSchema.encode(to:)(a1);
}

void *initializeBufferWithCopyOfBuffer for IDSSessionInvitationSchema(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (void *)(v17 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v17);
  }

  else
  {
    uint64_t v7 = type metadata accessor for IDSSessionInvitation.TransportType(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *(void *)((char *)a1 + a3[5]) = *(void *)((char *)a2 + a3[5]);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    *(void *)uint64_t v9 = *(void *)v10;
    v9[8] = v10[8];
    uint64_t v11 = a3[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    *((_BYTE *)a1 + v11) = *((_BYTE *)a2 + v11);
    uint64_t v12 = a3[10];
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    *((_BYTE *)a1 + v12) = *((_BYTE *)a2 + v12);
    uint64_t v13 = a3[11];
    unint64_t v14 = (char *)a1 + v13;
    uint64_t v15 = (char *)a2 + v13;
    unint64_t v16 = *((void *)v15 + 1);
    if (v16 >> 60 == 15)
    {
      *(_OWORD *)unint64_t v14 = *(_OWORD *)v15;
    }

    else
    {
      uint64_t v18 = *(void *)v15;
      sub_100003FF0(*(void *)v15, *((void *)v15 + 1));
      *(void *)unint64_t v14 = v18;
      *((void *)v14 + 1) = v16;
    }

    uint64_t v19 = a3[13];
    *((_BYTE *)a1 + a3[12]) = *((_BYTE *)a2 + a3[12]);
    uint64_t v20 = (char *)a1 + v19;
    uint64_t v21 = (void *)((char *)a2 + v19);
    unint64_t v22 = *(void *)((char *)a2 + v19 + 8);
    if (v22 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
    }

    else
    {
      uint64_t v23 = *v21;
      sub_100003FF0(*v21, v22);
      *(void *)uint64_t v20 = v23;
      *((void *)v20 + 1) = v22;
    }

    uint64_t v24 = a3[15];
    *((_BYTE *)a1 + a3[14]) = *((_BYTE *)a2 + a3[14]);
    char v25 = (char *)a1 + v24;
    char v26 = (void *)((char *)a2 + v24);
    unint64_t v27 = *(void *)((char *)a2 + v24 + 8);
    if (v27 >> 60 == 15)
    {
      *(_OWORD *)char v25 = *(_OWORD *)v26;
    }

    else
    {
      uint64_t v28 = *v26;
      sub_100003FF0(*v26, v27);
      *(void *)char v25 = v28;
      *((void *)v25 + 1) = v27;
    }

    uint64_t v29 = a3[17];
    *((_BYTE *)a1 + a3[16]) = *((_BYTE *)a2 + a3[16]);
    char v30 = (void *)((char *)a1 + v29);
    uint64_t v31 = (void *)((char *)a2 + v29);
    uint64_t v32 = v31[1];
    *char v30 = *v31;
    v30[1] = v32;
    uint64_t v33 = a3[19];
    *((_BYTE *)a1 + a3[18]) = *((_BYTE *)a2 + a3[18]);
    char v34 = (void *)((char *)a1 + v33);
    char v35 = (void *)((char *)a2 + v33);
    uint64_t v36 = v35[1];
    *char v34 = *v35;
    v34[1] = v36;
    uint64_t v37 = a3[21];
    *((_BYTE *)a1 + a3[20]) = *((_BYTE *)a2 + a3[20]);
    *((_BYTE *)a1 + v37) = *((_BYTE *)a2 + v37);
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRetain(v36);
  }

  return a1;
}

uint64_t destroy for IDSSessionInvitationSchema(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for IDSSessionInvitation.TransportType(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  int v5 = (uint64_t *)(a1 + a2[11]);
  unint64_t v6 = v5[1];
  if (v6 >> 60 != 15) {
    sub_100004080(*v5, v6);
  }
  uint64_t v7 = (uint64_t *)(a1 + a2[13]);
  unint64_t v8 = v7[1];
  if (v8 >> 60 != 15) {
    sub_100004080(*v7, v8);
  }
  uint64_t v9 = (uint64_t *)(a1 + a2[15]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15) {
    sub_100004080(*v9, v10);
  }
  swift_bridgeObjectRelease(*(void *)(a1 + a2[17] + 8));
  return swift_bridgeObjectRelease(*(void *)(a1 + a2[19] + 8));
}

uint64_t initializeWithCopy for IDSSessionInvitationSchema(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for IDSSessionInvitation.TransportType(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)v9;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  uint64_t v10 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v10) = *(_BYTE *)(a2 + v10);
  uint64_t v11 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(a2 + v11);
  uint64_t v12 = a3[11];
  uint64_t v13 = a1 + v12;
  unint64_t v14 = (uint64_t *)(a2 + v12);
  unint64_t v15 = v14[1];
  if (v15 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  }

  else
  {
    uint64_t v16 = *v14;
    sub_100003FF0(*v14, v14[1]);
    *(void *)uint64_t v13 = v16;
    *(void *)(v13 + 8) = v15;
  }

  uint64_t v17 = a3[13];
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  uint64_t v18 = a1 + v17;
  uint64_t v19 = (uint64_t *)(a2 + v17);
  unint64_t v20 = *(void *)(a2 + v17 + 8);
  if (v20 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
  }

  else
  {
    uint64_t v21 = *v19;
    sub_100003FF0(*v19, v20);
    *(void *)uint64_t v18 = v21;
    *(void *)(v18 + 8) = v20;
  }

  uint64_t v22 = a3[15];
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  uint64_t v23 = a1 + v22;
  uint64_t v24 = (uint64_t *)(a2 + v22);
  unint64_t v25 = *(void *)(a2 + v22 + 8);
  if (v25 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
  }

  else
  {
    uint64_t v26 = *v24;
    sub_100003FF0(*v24, v25);
    *(void *)uint64_t v23 = v26;
    *(void *)(v23 + 8) = v25;
  }

  uint64_t v27 = a3[17];
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  uint64_t v28 = (void *)(a1 + v27);
  uint64_t v29 = (void *)(a2 + v27);
  uint64_t v30 = v29[1];
  *uint64_t v28 = *v29;
  v28[1] = v30;
  uint64_t v31 = a3[19];
  *(_BYTE *)(a1 + a3[18]) = *(_BYTE *)(a2 + a3[18]);
  uint64_t v32 = (void *)(a1 + v31);
  uint64_t v33 = (void *)(a2 + v31);
  uint64_t v34 = v33[1];
  *uint64_t v32 = *v33;
  v32[1] = v34;
  uint64_t v35 = a3[21];
  *(_BYTE *)(a1 + a3[20]) = *(_BYTE *)(a2 + a3[20]);
  *(_BYTE *)(a1 + v35) = *(_BYTE *)(a2 + v35);
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v34);
  return a1;
}

uint64_t assignWithCopy for IDSSessionInvitationSchema(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for IDSSessionInvitation.TransportType(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  uint64_t v7 = a3[6];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(_BYTE *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  *(_BYTE *)(v8 + 8) = v10;
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  uint64_t v11 = a3[11];
  uint64_t v12 = (uint64_t *)(a1 + v11);
  uint64_t v13 = (uint64_t *)(a2 + v11);
  unint64_t v14 = *(void *)(a2 + v11 + 8);
  if (*(void *)(a1 + v11 + 8) >> 60 == 15LL)
  {
    if (v14 >> 60 != 15)
    {
      uint64_t v15 = *v13;
      sub_100003FF0(v15, v14);
      *uint64_t v12 = v15;
      v12[1] = v14;
      goto LABEL_8;
    }

    goto LABEL_6;
  }

  if (v14 >> 60 == 15)
  {
    sub_100004238((uint64_t)v12);
LABEL_6:
    *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
    goto LABEL_8;
  }

  uint64_t v16 = *v13;
  sub_100003FF0(v16, v14);
  uint64_t v17 = *v12;
  unint64_t v18 = v12[1];
  *uint64_t v12 = v16;
  v12[1] = v14;
  sub_100004080(v17, v18);
LABEL_8:
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  uint64_t v19 = a3[13];
  unint64_t v20 = (uint64_t *)(a1 + v19);
  uint64_t v21 = (uint64_t *)(a2 + v19);
  unint64_t v22 = *(void *)(a2 + v19 + 8);
  if (*(void *)(a1 + v19 + 8) >> 60 == 15LL)
  {
    if (v22 >> 60 != 15)
    {
      uint64_t v23 = *v21;
      sub_100003FF0(v23, v22);
      *unint64_t v20 = v23;
      v20[1] = v22;
      goto LABEL_15;
    }

    goto LABEL_13;
  }

  if (v22 >> 60 == 15)
  {
    sub_100004238((uint64_t)v20);
LABEL_13:
    *(_OWORD *)unint64_t v20 = *(_OWORD *)v21;
    goto LABEL_15;
  }

  uint64_t v24 = *v21;
  sub_100003FF0(v24, v22);
  uint64_t v25 = *v20;
  unint64_t v26 = v20[1];
  *unint64_t v20 = v24;
  v20[1] = v22;
  sub_100004080(v25, v26);
LABEL_15:
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  uint64_t v27 = a3[15];
  uint64_t v28 = (uint64_t *)(a1 + v27);
  uint64_t v29 = (uint64_t *)(a2 + v27);
  unint64_t v30 = *(void *)(a2 + v27 + 8);
  if (*(void *)(a1 + v27 + 8) >> 60 != 15LL)
  {
    if (v30 >> 60 != 15)
    {
      uint64_t v32 = *v29;
      sub_100003FF0(v32, v30);
      uint64_t v33 = *v28;
      unint64_t v34 = v28[1];
      *uint64_t v28 = v32;
      v28[1] = v30;
      sub_100004080(v33, v34);
      goto LABEL_22;
    }

    sub_100004238((uint64_t)v28);
    goto LABEL_20;
  }

  if (v30 >> 60 == 15)
  {
LABEL_20:
    *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
    goto LABEL_22;
  }

  uint64_t v31 = *v29;
  sub_100003FF0(v31, v30);
  *uint64_t v28 = v31;
  v28[1] = v30;
LABEL_22:
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  uint64_t v35 = a3[17];
  uint64_t v36 = (void *)(a1 + v35);
  uint64_t v37 = (void *)(a2 + v35);
  void *v36 = *v37;
  uint64_t v38 = v37[1];
  uint64_t v39 = v36[1];
  v36[1] = v38;
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRelease(v39);
  *(_BYTE *)(a1 + a3[18]) = *(_BYTE *)(a2 + a3[18]);
  uint64_t v40 = a3[19];
  uint64_t v41 = (void *)(a1 + v40);
  uint64_t v42 = (void *)(a2 + v40);
  void *v41 = *v42;
  uint64_t v43 = v42[1];
  uint64_t v44 = v41[1];
  v41[1] = v43;
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRelease(v44);
  *(_BYTE *)(a1 + a3[20]) = *(_BYTE *)(a2 + a3[20]);
  *(_BYTE *)(a1 + a3[21]) = *(_BYTE *)(a2 + a3[21]);
  return a1;
}

uint64_t initializeWithTake for IDSSessionInvitationSchema(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for IDSSessionInvitation.TransportType(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)v9;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  uint64_t v10 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v10) = *(_BYTE *)(a2 + v10);
  uint64_t v11 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(a2 + v11);
  uint64_t v12 = a3[12];
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v12) = *(_BYTE *)(a2 + v12);
  uint64_t v13 = a3[14];
  *(_OWORD *)(a1 + a3[13]) = *(_OWORD *)(a2 + a3[13]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  uint64_t v14 = a3[16];
  *(_OWORD *)(a1 + a3[15]) = *(_OWORD *)(a2 + a3[15]);
  *(_BYTE *)(a1 + v14) = *(_BYTE *)(a2 + v14);
  uint64_t v15 = a3[18];
  *(_OWORD *)(a1 + a3[17]) = *(_OWORD *)(a2 + a3[17]);
  *(_BYTE *)(a1 + v15) = *(_BYTE *)(a2 + v15);
  uint64_t v16 = a3[20];
  *(_OWORD *)(a1 + a3[19]) = *(_OWORD *)(a2 + a3[19]);
  *(_BYTE *)(a1 + v16) = *(_BYTE *)(a2 + v16);
  *(_BYTE *)(a1 + a3[21]) = *(_BYTE *)(a2 + a3[21]);
  return a1;
}

uint64_t assignWithTake for IDSSessionInvitationSchema(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for IDSSessionInvitation.TransportType(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)v9;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  uint64_t v10 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v10) = *(_BYTE *)(a2 + v10);
  uint64_t v11 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(a2 + v11);
  uint64_t v12 = a3[11];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  unint64_t v15 = *(void *)(a1 + v12 + 8);
  if (v15 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v16 = *(void *)(v14 + 8);
  if (v16 >> 60 == 15)
  {
    sub_100004238(v13);
LABEL_4:
    *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
    goto LABEL_6;
  }

  uint64_t v17 = *(void *)v13;
  *(void *)uint64_t v13 = *(void *)v14;
  *(void *)(v13 + 8) = v16;
  sub_100004080(v17, v15);
LABEL_6:
  uint64_t v18 = a3[13];
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  unint64_t v21 = *(void *)(a1 + v18 + 8);
  if (v21 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
    goto LABEL_11;
  }

  unint64_t v22 = *(void *)(v20 + 8);
  if (v22 >> 60 == 15)
  {
    sub_100004238(v19);
    goto LABEL_9;
  }

  uint64_t v23 = *(void *)v19;
  *(void *)uint64_t v19 = *(void *)v20;
  *(void *)(v19 + 8) = v22;
  sub_100004080(v23, v21);
LABEL_11:
  uint64_t v24 = a3[15];
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  uint64_t v25 = (uint64_t *)(a1 + v24);
  unint64_t v26 = (uint64_t *)(a2 + v24);
  unint64_t v27 = *(void *)(a1 + v24 + 8);
  if (v27 >> 60 != 15)
  {
    unint64_t v28 = v26[1];
    if (v28 >> 60 != 15)
    {
      uint64_t v29 = *v25;
      *uint64_t v25 = *v26;
      v25[1] = v28;
      sub_100004080(v29, v27);
      goto LABEL_16;
    }

    sub_100004238((uint64_t)v25);
  }

  *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
LABEL_16:
  uint64_t v30 = a3[17];
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  uint64_t v31 = (void *)(a1 + v30);
  uint64_t v32 = (uint64_t *)(a2 + v30);
  uint64_t v34 = *v32;
  uint64_t v33 = v32[1];
  uint64_t v35 = v31[1];
  *uint64_t v31 = v34;
  v31[1] = v33;
  swift_bridgeObjectRelease(v35);
  uint64_t v36 = a3[19];
  *(_BYTE *)(a1 + a3[18]) = *(_BYTE *)(a2 + a3[18]);
  uint64_t v37 = (void *)(a1 + v36);
  uint64_t v38 = (uint64_t *)(a2 + v36);
  uint64_t v40 = *v38;
  uint64_t v39 = v38[1];
  uint64_t v41 = v37[1];
  *uint64_t v37 = v40;
  v37[1] = v39;
  swift_bridgeObjectRelease(v41);
  uint64_t v42 = a3[21];
  *(_BYTE *)(a1 + a3[20]) = *(_BYTE *)(a2 + a3[20]);
  *(_BYTE *)(a1 + v42) = *(_BYTE *)(a2 + v42);
  return a1;
}

uint64_t getEnumTagSinglePayload for IDSSessionInvitationSchema(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100068C74);
}

uint64_t sub_100068C74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for IDSSessionInvitation.TransportType(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 68) + 8);
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for IDSSessionInvitationSchema( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100068D00);
}

uint64_t sub_100068D00(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for IDSSessionInvitation.TransportType(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 68) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_100068D7C(uint64_t a1)
{
  uint64_t result = type metadata accessor for IDSSessionInvitation.TransportType(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
    void v4[2] = "\t";
    void v4[3] = &unk_100073068;
    void v4[4] = &unk_100073068;
    void v4[5] = &unk_100073068;
    void v4[6] = &unk_100073068;
    v4[7] = &unk_100073080;
    v4[8] = &unk_100073068;
    void v4[9] = &unk_100073080;
    v4[10] = &unk_100073068;
    v4[11] = &unk_100073080;
    v4[12] = &unk_100073068;
    v4[13] = &unk_100073098;
    v4[14] = &unk_1000730B0;
    v4[15] = &unk_100073098;
    v4[16] = &unk_100073068;
    v4[17] = &unk_100073068;
    swift_initStructMetadata(a1, 256LL, 18LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t getEnumTagSinglePayload for IDSSessionInvitationSchema.CodingKeys( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xEF) {
    goto LABEL_17;
  }
  if (a2 + 17 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 17) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 17;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 17;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 17;
    }
  }

uint64_t storeEnumTagSinglePayload for IDSSessionInvitationSchema.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 17 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 17) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xEF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xEE) {
    return ((uint64_t (*)(void))((char *)&loc_100068F14 + 4 * byte_100072FD9[v4]))();
  }
  *a1 = a2 + 17;
  return ((uint64_t (*)(void))((char *)sub_100068F48 + 4 * byte_100072FD4[v4]))();
}

uint64_t sub_100068F48(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100068F50(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100068F58LL);
  }
  return result;
}

uint64_t sub_100068F64(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100068F6CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 17;
  return result;
}

uint64_t sub_100068F70(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100068F78(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IDSSessionInvitationSchema.CodingKeys()
{
  return &type metadata for IDSSessionInvitationSchema.CodingKeys;
}

unint64_t sub_100068F98()
{
  unint64_t result = qword_100085300;
  if (!qword_100085300)
  {
    unint64_t result = swift_getWitnessTable(&unk_10007319C, &type metadata for IDSSessionInvitationSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100085300);
  }

  return result;
}

unint64_t sub_100068FE0()
{
  unint64_t result = qword_100085308;
  if (!qword_100085308)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000730D4, &type metadata for IDSSessionInvitationSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100085308);
  }

  return result;
}

unint64_t sub_100069028()
{
  unint64_t result = qword_100085310;
  if (!qword_100085310)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000730FC, &type metadata for IDSSessionInvitationSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100085310);
  }

  return result;
}

uint64_t sub_10006906C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_10007F7A8, a1, a2, &unk_100084030);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x12) {
    return 18LL;
  }
  else {
    return v3;
  }
}

ValueMetadata *type metadata accessor for IDSMadridPayloadUnpacker()
{
  return &type metadata for IDSMadridPayloadUnpacker;
}

unint64_t sub_1000690D0()
{
  unint64_t result = qword_100085318;
  if (!qword_100085318)
  {
    uint64_t v1 = type metadata accessor for APSUserPayload(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for APSUserPayload, v1);
    atomic_store(result, (unint64_t *)&qword_100085318);
  }

  return result;
}

#error "10006B70C: call analysis failed (funcsize=2425)"
uint64_t sub_10006B75C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  void v9[273];
  _BYTE __dst[2184];
  int v5 = type metadata accessor for PropertyListDecoder(0LL);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  unsigned int v6 = PropertyListDecoder.init()();
  BOOL v7 = sub_100056AE8();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)( v9,  &type metadata for IDSMadridProtocolPayload,  a1,  a2,  &type metadata for IDSMadridProtocolPayload,  v7);
  unint64_t result = swift_release(v6);
  if (!v2)
  {
    memcpy(__dst, v9, 0x883uLL);
    sub_100069118(__dst);
    return sub_100057360((uint64_t)__dst);
  }

  return result;
}

void *sub_10006B848(size_t a1, int64_t a2, uint64_t a3, void *a4)
{
  return sub_10006B870( a1,  a2,  a3,  a4,  &qword_100085358,  (uint64_t (*)(void))&type metadata accessor for IDSHomeKitInviteeScheduleYearDayRule);
}

void *sub_10006B85C(size_t a1, int64_t a2, uint64_t a3, void *a4)
{
  return sub_10006B870( a1,  a2,  a3,  a4,  &qword_100085350,  (uint64_t (*)(void))&type metadata accessor for IDSHomeKitInviteeScheduleWeekDayRule);
}

void *sub_10006B870( size_t a1, int64_t a2, uint64_t a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  char v8 = a1;
  if ((a3 & 1) != 0)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000LL < 0)
      {
LABEL_30:
        __break(1u);
        return dispatch thunk of PropertyListDecoder.decode<A>(_:from:)((void *)v10, a1, a2, a3, a4, a5);
      }

      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v10 = a2;
  }

  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    int64_t v12 = a4[2];
  }
  else {
    int64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v13 = sub_10000264C(a5);
  uint64_t v14 = *(void *)(a6(0LL) - 8);
  uint64_t v15 = *(void *)(v14 + 72);
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = (v16 + 32) & ~v16;
  uint64_t v18 = (void *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  a1 = j__malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  int64_t v10 = a1 - v17;
  if (a1 - v17 == 0x8000000000000000LL && v15 == -1) {
    goto LABEL_29;
  }
  v18[2] = v11;
  v18[3] = 2 * (v10 / v15);
LABEL_19:
  uint64_t v20 = a6(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  uint64_t v23 = (char *)v18 + v22;
  uint64_t v24 = (char *)a4 + v22;
  if ((v8 & 1) != 0)
  {
    if (v18 < a4 || v23 >= &v24[*(void *)(v21 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v23, v24, v11, v20);
    }

    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }

    a4[2] = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v23, v24, v11, v20);
  }

  swift_bridgeObjectRelease(a4);
  return v18;
}