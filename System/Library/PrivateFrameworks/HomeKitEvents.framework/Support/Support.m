uint64_t sub_1000037E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  NSArray *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t result;
  void v20[2];
  v20[1] = a1;
  v20[0] = type metadata accessor for URL.DirectoryHint(0LL);
  v1 = *(void *)(v20[0] - 8LL);
  __chkstk_darwin(v20[0]);
  v3 = (char *)v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v4 = sub_10000D228(&qword_10007EEB8);
  __chkstk_darwin(v4);
  v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v7 = type metadata accessor for URL(0LL);
  v8 = *(void *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  v13 = (char *)v20 - v12;
  v14 = NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, 1uLL, 1);
  v15 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, &type metadata for String);

  if (v15[2])
  {
    v16 = v15[4];
    v17 = v15[5];
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRelease(v15);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1LL, 1LL, v7);
    (*(void (**)(char *, void, void))(v1 + 104))( v3,  enum case for URL.DirectoryHint.inferFromPath(_:),  v20[0]);
    URL.init(filePath:directoryHint:relativeTo:)(v16, v17, v3, v6);
    URL.appendingPathComponent(_:)(0x64656D6F68LL, 0xE500000000000000LL);
    v18 = *(void (**)(char *, uint64_t))(v8 + 8);
    v18(v11, v7);
    URL.appendingPathComponent(_:)(0x6E657665656D6F68LL, 0xEB00000000647374LL);
    return ((uint64_t (*)(char *, uint64_t))v18)(v13, v7);
  }

  else
  {
    swift_bridgeObjectRelease(v15);
    result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000001FLL,  0x80000001000626B0LL,  "homeeventsd/MainDriver.swift",  28LL,  2LL,  334LL,  0);
    __break(1u);
  }

  return result;
}

uint64_t sub_100003A3C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = a1;
  swift_retain();
  return swift_release(v2);
}

void sub_100003A64()
{
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  v5 = &v17[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  if ((static OSVariant.isSeedBuild.getter(v3) & 1) != 0 || (static OSVariant.isInternalBuild.getter() & 1) != 0)
  {
    uint64_t v6 = sub_10000D1E8(&qword_10007EE30, type metadata accessor for MainDriver, (uint64_t)&unk_100060428);
    uint64_t v7 = sub_10000D1E8(&qword_10007EE18, type metadata accessor for MainDriver, (uint64_t)&unk_100060458);
    uint64_t v8 = static LoggedObject<>.logger.getter(v0, v6, v7);
    v9 = (os_log_s *)Logger.logObject.getter(v8);
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Enabling CoreData concurrency assertions", v11, 2u);
      swift_slowDealloc(v11, -1LL, -1LL);
    }

    (*(void (**)(_BYTE *, uint64_t))(v2 + 8))(v5, v1);
    id v12 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
    uint64_t v13 = sub_10000D228(&qword_10007EF38);
    uint64_t inited = swift_initStackObject(v13, v17);
    *(_OWORD *)(inited + 16) = xmmword_100060320;
    *(void *)(inited + 32) = 0xD000000000000023LL;
    *(void *)(inited + 40) = 0x8000000100062680LL;
    *(void *)(inited + 72) = &type metadata for Int;
    *(void *)(inited + 48) = 1LL;
    unint64_t v15 = sub_10005880C(inited);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v15);
    [v12 registerDefaults:isa];
  }
}

os_log_s *sub_100003C70()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v57 = *(void *)(v2 - 8);
  uint64_t v58 = v2;
  uint64_t v3 = __chkstk_darwin(v2);
  v5 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v53 - v6;
  uint64_t v8 = sub_10000D228(&qword_10007EEB8);
  __chkstk_darwin(v8);
  os_log_type_t v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for URL(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  unint64_t v15 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  v17 = (char *)&v53 - v16;
  sub_100007C34((uint64_t)v10);
  v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  uint64_t v59 = v11;
  if (v18(v10, 1LL, v11) == 1)
  {
    sub_10000D5AC((uint64_t)v10, &qword_10007EEB8);
    uint64_t v19 = sub_10000D1E8(&qword_10007EE30, type metadata accessor for MainDriver, (uint64_t)&unk_100060428);
    uint64_t v20 = sub_10000D1E8(&qword_10007EE18, type metadata accessor for MainDriver, (uint64_t)&unk_100060458);
    uint64_t v21 = static LoggedObject<>.logger.getter(v1, v19, v20);
    v22 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v23 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Can't find the versioned model bundle", v24, 2u);
      swift_slowDealloc(v24, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v57 + 8))(v5, v58);
    unint64_t v25 = sub_10000D4DC();
    uint64_t v26 = swift_allocError(&type metadata for MainDriver.CoreDataError, v25, 0LL, 0LL);
    void *v27 = 0xD000000000000025LL;
    v27[1] = 0x8000000100062620LL;
    swift_willThrow(v26);
  }

  else
  {
    uint64_t v28 = v59;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v17, v10, v59);
    id v29 = objc_allocWithZone(&OBJC_CLASS___NSManagedObjectModel);
    URL._bridgeToObjectiveC()(v30);
    v32 = v31;
    v22 = (os_log_s *)[v29 initWithContentsOfURL:v31];

    if (v22)
    {
      -[os_log_s _setIsEditable:](v22, "_setIsEditable:", 0LL);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v28);
    }

    else
    {
      uint64_t v33 = sub_10000D1E8(&qword_10007EE30, type metadata accessor for MainDriver, (uint64_t)&unk_100060428);
      uint64_t v34 = sub_10000D1E8(&qword_10007EE18, type metadata accessor for MainDriver, (uint64_t)&unk_100060458);
      uint64_t v35 = v1;
      v36 = v7;
      static LoggedObject<>.logger.getter(v35, v33, v34);
      v37 = v15;
      uint64_t v38 = (*(uint64_t (**)(char *, char *, uint64_t))(v12 + 16))(v15, v17, v28);
      v39 = (os_log_s *)Logger.logObject.getter(v38);
      os_log_type_t v40 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v39, v40))
      {
        uint64_t v41 = swift_slowAlloc(12LL, -1LL);
        v56 = v36;
        v42 = (uint8_t *)v41;
        uint64_t v55 = swift_slowAlloc(32LL, -1LL);
        uint64_t v62 = v55;
        *(_DWORD *)v42 = 136446210;
        v54 = v42 + 4;
        uint64_t v43 = sub_10000D1E8( &qword_10007EEC8,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
        uint64_t v44 = v59;
        uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter(v59, v43);
        unint64_t v47 = v46;
        uint64_t v60 = sub_100046274(v45, v46, &v62);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v54);
        swift_bridgeObjectRelease(v47);
        v22 = *(os_log_s **)(v12 + 8);
        ((void (*)(char *, uint64_t))v22)(v37, v44);
        _os_log_impl( (void *)&_mh_execute_header,  v39,  v40,  "Can't load the managed object model at %{public}s",  v42,  0xCu);
        uint64_t v48 = v55;
        swift_arrayDestroy(v55, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v48, -1LL, -1LL);
        swift_slowDealloc(v42, -1LL, -1LL);

        (*(void (**)(char *, uint64_t))(v57 + 8))(v56, v58);
      }

      else
      {
        v22 = *(os_log_s **)(v12 + 8);
        ((void (*)(char *, uint64_t))v22)(v37, v59);

        (*(void (**)(char *, uint64_t))(v57 + 8))(v36, v58);
      }

      unint64_t v49 = sub_10000D4DC();
      uint64_t v50 = swift_allocError(&type metadata for MainDriver.CoreDataError, v49, 0LL, 0LL);
      void *v51 = 0xD000000000000023LL;
      v51[1] = 0x8000000100062650LL;
      swift_willThrow(v50);
      ((void (*)(char *, uint64_t))v22)(v17, v59);
    }
  }

  return v22;
}

uint64_t sub_1000041AC(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  v2[4] = *v1;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  v2[5] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[6] = v4;
  v2[7] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100004214, v1, 0LL);
}

uint64_t sub_100004214()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = sub_10000D1E8(&qword_10007EE30, type metadata accessor for MainDriver, (uint64_t)&unk_100060428);
  uint64_t v3 = sub_10000D1E8(&qword_10007EE18, type metadata accessor for MainDriver, (uint64_t)&unk_100060458);
  uint64_t v4 = static LoggedObject<>.logger.getter(v1, v2, v3);
  v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Starting", v7, 2u);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  uint64_t v9 = v0[6];
  uint64_t v8 = v0[7];
  uint64_t v10 = v0[5];

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  uint64_t v11 = (void *)swift_task_alloc(dword_10007EE9C);
  v0[8] = v11;
  void *v11 = v0;
  v11[1] = sub_100004344;
  return sub_10000440C();
}

uint64_t sub_100004344()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 24LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 64LL));
  return swift_task_switch(sub_10000439C, v1, 0LL);
}

uint64_t sub_10000439C()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24) + OBJC_IVAR____TtC11homeeventsd10MainDriver_completion;
  uint64_t v4 = sub_10000D228(&qword_10007EEA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(v2, v3, v4);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000440C()
{
  v1[9] = v0;
  uint64_t v2 = type metadata accessor for Constants(0LL);
  v1[10] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[11] = v3;
  v1[12] = swift_task_alloc((*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10000446C, v0, 0LL);
}

uint64_t sub_10000446C()
{
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = OBJC_IVAR____TtC11homeeventsd10MainDriver_server;
  *(void *)(v0 + 104) = OBJC_IVAR____TtC11homeeventsd10MainDriver_server;
  if (*(void *)(v1 + v2))
  {
    swift_task_dealloc(*(void *)(v0 + 96));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    if (*(void *)(v1 + OBJC_IVAR____TtC11homeeventsd10MainDriver_localDatabaseName + 8)) {
      sub_100004FC0();
    }
    sub_1000055F8();
    *(_BYTE *)(*(void *)(v0 + 72) + OBJC_IVAR____TtC11homeeventsd10MainDriver_isCoreDataSetUp) = 1;
    uint64_t v4 = (void *)(*(void *)(v0 + 72) + OBJC_IVAR____TtC11homeeventsd10MainDriver_localStorageProperties);
    if (*v4)
    {
      uint64_t v5 = v4[1];
      *(void *)(v0 + 112) = v5;
      swift_retain(v5);
      return swift_task_switch(sub_1000045C4, v5, 0LL);
    }

    else
    {
      os_log_type_t v6 = (void *)swift_task_alloc(dword_10007EEAC);
      *(void *)(v0 + 120) = v6;
      *os_log_type_t v6 = v0;
      v6[1] = sub_100004620;
      return sub_100007454();
    }
  }

uint64_t sub_1000045C4()
{
  uint64_t v1 = v0[14];
  sub_10001E8F0(v0[9]);
  swift_release(v1);
  uint64_t v2 = (uint64_t **)swift_task_alloc(dword_10007EEAC);
  v0[15] = (uint64_t)v2;
  *uint64_t v2 = v0;
  v2[1] = (uint64_t *)sub_100004620;
  return sub_100007454();
}

uint64_t sub_100004620()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 72LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 120LL));
  return swift_task_switch(sub_100004678, v1, 0LL);
}

uint64_t sub_100004678()
{
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 104);
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v4 = *(void *)(v0 + 88);
  uint64_t v5 = *(void *)(v0 + 72);
  sub_10000D478(v5 + OBJC_IVAR____TtC11homeeventsd10MainDriver_features, v0 + 16);
  char v22 = *(_BYTE *)(v5 + OBJC_IVAR____TtC11homeeventsd10MainDriver_isCoreDataSetUp);
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v1, enum case for Constants.xpcServiceName(_:), v3);
  uint64_t v6 = swift_retain(v5);
  uint64_t v7 = Constants.rawValue.getter(v6);
  uint64_t v9 = v8;
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v3);
  uint64_t v10 = (objc_class *)type metadata accessor for XPCServer();
  uint64_t v11 = objc_allocWithZone(v10);
  uint64_t v12 = &v11[OBJC_IVAR____TtC11homeeventsd9XPCServer_mainDriver];
  swift_weakInit(&v11[OBJC_IVAR____TtC11homeeventsd9XPCServer_mainDriver], 0LL);
  uint64_t v13 = OBJC_IVAR____TtC11homeeventsd9XPCServer_listener;
  uint64_t v14 = sub_10000D228(&qword_10007EEB0);
  uint64_t v15 = swift_allocObject(v14, 36LL, 7LL);
  *(void *)(v15 + 16) = 0LL;
  *(void *)(v15 + 24) = 0LL;
  *(_DWORD *)(v15 + 32) = 0;
  *(void *)&v11[v13] = v15;
  swift_weakAssign(v12, v5);
  sub_10000D478(v0 + 16, (uint64_t)&v11[OBJC_IVAR____TtC11homeeventsd9XPCServer_features]);
  v11[OBJC_IVAR____TtC11homeeventsd9XPCServer_isCoreDataSetUp] = v22;
  uint64_t v16 = (uint64_t *)&v11[OBJC_IVAR____TtC11homeeventsd9XPCServer_serviceName];
  *uint64_t v16 = v7;
  v16[1] = v9;
  v17 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))&v11[OBJC_IVAR____TtC11homeeventsd9XPCServer_proxyConnectionFactory];
  char *v17 = sub_10000E0DC;
  v17[1] = 0LL;
  *(void *)(v0 + 56) = v11;
  *(void *)(v0 + 64) = v10;
  id v18 = objc_msgSendSuper2((objc_super *)(v0 + 56), "init");
  swift_release(v5);
  _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0((void *)(v0 + 16));
  uint64_t v19 = *(void **)(v5 + v2);
  *(void *)(v5 + v2) = v18;
  id v20 = v18;

  sub_10000DC74();
  swift_task_dealloc(*(void *)(v0 + 96));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100004848()
{
  v1[2] = v0;
  v1[3] = *v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  v1[4] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[5] = v3;
  v1[6] = swift_task_alloc((*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000048B0, v0, 0LL);
}

uint64_t sub_1000048B0()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = sub_10000D1E8(&qword_10007EE30, type metadata accessor for MainDriver, (uint64_t)&unk_100060428);
  uint64_t v3 = sub_10000D1E8(&qword_10007EE18, type metadata accessor for MainDriver, (uint64_t)&unk_100060458);
  uint64_t v4 = static LoggedObject<>.logger.getter(v1, v2, v3);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Shutting down", v7, 2u);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  uint64_t v9 = v0[5];
  uint64_t v8 = v0[6];
  uint64_t v10 = v0[4];
  uint64_t v11 = v0[2];

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  uint64_t v12 = *(void **)(v11 + OBJC_IVAR____TtC11homeeventsd10MainDriver_server);
  if (v12)
  {
    *(void *)(v11 + OBJC_IVAR____TtC11homeeventsd10MainDriver_server) = 0LL;
    sub_10000DE90();
  }

  v0[7] = *(void *)(v0[2] + OBJC_IVAR____TtC11homeeventsd10MainDriver_promise);
  uint64_t v13 = sub_10000D228(&qword_10007EE88);
  unint64_t v14 = sub_10000D42C();
  uint64_t v15 = dispatch thunk of Actor.unownedExecutor.getter(v13, v14);
  return swift_task_switch(sub_100004A30, v15, v16);
}

uint64_t sub_100004A30()
{
  uint64_t v1 = *(void *)(v0 + 48);
  Promise<>.resolve()();
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100004A68()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC11homeeventsd10MainDriver_completion;
  uint64_t v2 = sub_10000D228(&qword_10007EEA0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  swift_release(*(void *)(v0 + OBJC_IVAR____TtC11homeeventsd10MainDriver_promise));

  _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0((void *)(v0 + OBJC_IVAR____TtC11homeeventsd10MainDriver_features));
  _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0((void *)(v0
                                                                + OBJC_IVAR____TtC11homeeventsd10MainDriver_accountStore));

  sub_10000D664( *(void **)(v0 + OBJC_IVAR____TtC11homeeventsd10MainDriver_localStorageProperties),  *(void *)(v0 + OBJC_IVAR____TtC11homeeventsd10MainDriver_localStorageProperties + 8));
  sub_10000D690((void *)(v0 + OBJC_IVAR____TtC11homeeventsd10MainDriver_scheduler));
  uint64_t v3 = v0 + OBJC_IVAR____TtC11homeeventsd10MainDriver_storageDirectory;
  uint64_t v4 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(v3, v4);
  swift_bridgeObjectRelease(*(void *)(v0 + OBJC_IVAR____TtC11homeeventsd10MainDriver_localDatabaseName + 8));
  _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0((void *)(v0
                                                                + OBJC_IVAR____TtC11homeeventsd10MainDriver_resetFlag));
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_100004B98()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_100004BB0()
{
  return type metadata accessor for MainDriver(0LL);
}

uint64_t type metadata accessor for MainDriver(uint64_t a1)
{
  uint64_t result = qword_10007EBF8;
  if (!qword_10007EBF8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MainDriver);
  }
  return result;
}

void sub_100004BF4(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v6[1] = *(void *)(v2 - 8) + 64LL;
    v6[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    v6[3] = &unk_1000603B0;
    v6[4] = &unk_1000603C8;
    v6[5] = &unk_1000603C8;
    v6[6] = &unk_1000603C8;
    v6[7] = &unk_1000603E0;
    v6[8] = &unk_1000603E0;
    v6[9] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v6[10] = &unk_1000603B0;
    v6[11] = &unk_1000603F8;
    v6[12] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v6[13] = &unk_1000603E0;
    v6[14] = (char *)&value witness table for Builtin.Int64 + 64;
    uint64_t v4 = type metadata accessor for URL(319LL);
    if (v5 <= 0x3F)
    {
      v6[15] = *(void *)(v4 - 8) + 64LL;
      v6[16] = &unk_1000603F8;
      v6[17] = &unk_1000603E0;
      swift_updateClassMetadata2(a1, 256LL, 18LL, v6, a1 + 80);
    }
  }

void sub_100004CEC(uint64_t a1)
{
  if (!qword_10007EC18)
  {
    uint64_t v2 = sub_100004D58((uint64_t *)&unk_10007EC20);
    unint64_t v3 = type metadata accessor for Future( a1,  (char *)&type metadata for () + 8,  v2,  &protocol self-conformance witness table for Error);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_10007EC18);
    }
  }

uint64_t sub_100004D58(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2( 255LL,  (char *)a1 + (int)result,  -(result >> 32),  0LL,  0LL);
    *a1 = result;
  }

  return result;
}

void *initializeBufferWithCopyOfBuffer for MainDriver.LocalStorageProperties(void *a1, uint64_t a2)
{
  unint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  id v5 = v3;
  swift_retain(v4);
  return a1;
}

uint64_t destroy for MainDriver.LocalStorageProperties(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 8));
}

uint64_t assignWithCopy for MainDriver.LocalStorageProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v8 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  swift_retain(v7);
  swift_release(v8);
  return a1;
}

__n128 initializeWithTake for MainDriver.LocalStorageProperties(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t assignWithTake for MainDriver.LocalStorageProperties(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *a2;
  swift_release(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for MainDriver.LocalStorageProperties(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MainDriver.LocalStorageProperties(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for MainDriver.LocalStorageProperties()
{
  return &type metadata for MainDriver.LocalStorageProperties;
}

uint64_t sub_100004F2C()
{
  return v0;
}

uint64_t sub_100004F38(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for MainDriver(0LL);
  uint64_t v4 = sub_10000D1E8(&qword_10007EE18, type metadata accessor for MainDriver, (uint64_t)&unk_100060458);
  return static LoggedObject<>.logger.getter(v3, a2, v4);
}

uint64_t sub_100004F98()
{
  uint64_t v0 = type metadata accessor for MainDriver(0LL);
  return static LoggedObject.logCategory.getter(v0);
}

void sub_100004FC0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = type metadata accessor for CocoaError.Code(0LL);
  uint64_t v37 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v40 = type metadata accessor for Logger(0LL);
  uint64_t v4 = *(void *)(v40 - 8);
  uint64_t v5 = __chkstk_darwin(v40);
  uint64_t v34 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v33 = (char *)&v33 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v10 = __chkstk_darwin(v9);
  v36 = (char *)&v33 - v11;
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v33 - v12;
  uint64_t v14 = sub_10000D1E8(&qword_10007EE30, type metadata accessor for MainDriver, (uint64_t)&unk_100060428);
  uint64_t v38 = sub_10000D1E8(&qword_10007EE18, type metadata accessor for MainDriver, (uint64_t)&unk_100060458);
  uint64_t v39 = v14;
  uint64_t v15 = static LoggedObject<>.logger.getter(v2, v14, v38);
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    id v18 = v1;
    uint64_t v19 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Checking whether reset has been requested", v19, 2u);
    id v20 = v19;
    uint64_t v1 = v18;
    swift_slowDealloc(v20, -1LL, -1LL);
  }

  uint64_t v21 = *(void (**)(char *, uint64_t))(v4 + 8);
  v21(v13, v40);
  uint64_t v35 = v1;
  char v22 = sub_10000D408( (void *)((char *)v1 + OBJC_IVAR____TtC11homeeventsd10MainDriver_resetFlag),  *(void *)((char *)v1 + OBJC_IVAR____TtC11homeeventsd10MainDriver_resetFlag + 24));
  uint64_t v23 = Data.init(contentsOf:options:)(v22, 0LL);
  sub_10000D620(v23, v24);
  uint64_t v25 = static LoggedObject<>.logger.getter(v2, v39, v38);
  uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
  os_log_type_t v27 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v28 = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Reset request detected, removing all configuration", v28, 2u);
    swift_slowDealloc(v28, -1LL, -1LL);
  }

  v21(v33, v40);
  sub_10000AC34();
  sub_10000A8F8();
  uint64_t v29 = static LoggedObject<>.logger.getter(v2, v39, v38);
  v30 = (os_log_s *)Logger.logObject.getter(v29);
  os_log_type_t v31 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v30, v31))
  {
    v32 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)v32 = 0;
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Exiting", v32, 2u);
    swift_slowDealloc(v32, -1LL, -1LL);
  }

  v21(v34, v40);
  exit(0);
}

void sub_1000055F8()
{
  os_log_t v299 = *v0;
  uint64_t v1 = type metadata accessor for CocoaError.Code(0LL);
  v286 = *(uint8_t **)(v1 - 8);
  v287 = (os_log_s *)v1;
  uint64_t v2 = __chkstk_darwin(v1);
  v285 = (char *)&v261 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v2);
  v284 = (uint64_t *)((char *)&v261 - v4);
  v296 = (void *)type metadata accessor for CocoaError(0LL);
  uint64_t v292 = *(v296 - 1);
  uint64_t v5 = __chkstk_darwin(v296);
  v283 = (char *)&v261 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v5);
  v289 = (char *)&v261 - v8;
  __chkstk_darwin(v7);
  v293 = (os_log_s *)((char *)&v261 - v9);
  uint64_t v10 = sub_10000D228(&qword_10007EEB8);
  uint64_t v11 = __chkstk_darwin(v10);
  v274 = (char *)&v261 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  v282 = (char *)&v261 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  v276 = (char *)&v261 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  v278 = (char *)&v261 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  v280 = (char *)&v261 - v20;
  __chkstk_darwin(v19);
  char v22 = (char *)&v261 - v21;
  uint64_t v23 = type metadata accessor for URL(0LL);
  v295 = *(char **)(v23 - 8);
  uint64_t v24 = __chkstk_darwin(v23);
  v273 = (char *)&v261 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = __chkstk_darwin(v24);
  v281 = (char *)&v261 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  v275 = (char *)&v261 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  v277 = (char *)&v261 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  v279 = (char *)&v261 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  v294 = (char *)&v261 - v35;
  __chkstk_darwin(v34);
  uint64_t v37 = (char *)&v261 - v36;
  uint64_t v38 = type metadata accessor for Logger(0LL);
  uint64_t v39 = __chkstk_darwin(v38);
  uint64_t v40 = __chkstk_darwin(v39);
  v42 = (char *)&v261 - v41;
  uint64_t v43 = __chkstk_darwin(v40);
  __chkstk_darwin(v43);
  uint64_t v45 = __chkstk_darwin((char *)&v261 - v44);
  uint64_t v46 = __chkstk_darwin(v45);
  uint64_t v48 = (char *)&v261 - v47;
  uint64_t v49 = __chkstk_darwin(v46);
  v51 = (char *)&v261 - v50;
  uint64_t v52 = __chkstk_darwin(v49);
  uint64_t v53 = __chkstk_darwin(v52);
  uint64_t v60 = (char *)&v261 - v59;
  uint64_t v61 = *(os_log_t *)((char *)v0 + OBJC_IVAR____TtC11homeeventsd10MainDriver_localStorageProperties);
  if (!v61)
  {
    unint64_t v85 = sub_10000D4DC();
    uint64_t v86 = swift_allocError(&type metadata for MainDriver.CoreDataError, v85, 0LL, 0LL);
    void *v87 = 0xD000000000000025LL;
    v87[1] = 0x8000000100062560LL;
    swift_willThrow(v86);
    return;
  }

  os_log_t v291 = v54;
  uint64_t v62 = *(uint64_t *)((char *)v0 + OBJC_IVAR____TtC11homeeventsd10MainDriver_localDatabaseName + 8);
  uint64_t v297 = v38;
  if (v62)
  {
    v266 = (char *)v53;
    v269 = v42;
    uint64_t v264 = v58;
    uint64_t v263 = v57;
    v267 = v56;
    v288 = (void *)v23;
    id v290 = v61;
    v265 = v0;
    v63 = (void *)sub_100009A44();
    v64.super.Class isa = sub_10000BBE8().super.isa;
    uint64_t v65 = sub_10000D1E8(&qword_10007EE30, type metadata accessor for MainDriver, (uint64_t)&unk_100060428);
    uint64_t v66 = sub_10000D1E8(&qword_10007EE18, type metadata accessor for MainDriver, (uint64_t)&unk_100060458);
    uint64_t v271 = v65;
    uint64_t v270 = v66;
    static LoggedObject<>.logger.getter(v299, v65, v66);
    id v67 = v63;
    v68 = (os_log_s *)Logger.logObject.getter(v67);
    int v69 = static os_log_type_t.info.getter();
    BOOL v70 = os_log_type_enabled(v68, (os_log_type_t)v69);
    Class isa = v64.super.isa;
    if (v70)
    {
      int v262 = v69;
      v71 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v72 = swift_slowAlloc(32LL, -1LL);
      os_log_t v303 = (os_log_t)v72;
      *(_DWORD *)v71 = 136446210;
      id v268 = v67;
      id v73 = [v67 URL];
      if (v73)
      {
        v74 = v73;
        uint64_t v261 = v72;
        v75 = v294;
        static URL._unconditionallyBridgeFromObjectiveC(_:)(v73);

        v76 = v295;
        v77 = (void (*)(char *, char *, void *))*((void *)v295 + 4);
        v78 = v75;
        id v67 = v288;
        v77(v22, v78, v288);
        (*((void (**)(char *, void, uint64_t, id))v76 + 7))(v22, 0LL, 1LL, v67);
        if ((*((unsigned int (**)(char *, uint64_t, id))v76 + 6))(v22, 1LL, v67) != 1)
        {
          v77(v37, v22, v67);
          uint64_t v79 = sub_10000D1E8( &qword_10007EEC8,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
          uint64_t v80 = dispatch thunk of CustomStringConvertible.description.getter(v67, v79);
          unint64_t v82 = v81;
          (*((void (**)(char *, id))v76 + 1))(v37, v67);
          os_log_t v301 = (os_log_t)sub_100046274(v80, v82, (uint64_t *)&v303);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v301, v302, v71 + 4);
          swift_bridgeObjectRelease(v82);
          id v67 = v268;

          _os_log_impl( (void *)&_mh_execute_header,  v68,  (os_log_type_t)v262,  "Loading persistent store at %{public}s",  v71,  0xCu);
          uint64_t v83 = v261;
          swift_arrayDestroy(v261, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v83, -1LL, -1LL);
          swift_slowDealloc(v71, -1LL, -1LL);

          os_log_t v84 = (os_log_t)*((void *)v291 + 1);
          uint64_t v38 = v297;
          ((void (*)(char *, uint64_t))v84)(v48, v297);
          v64.super.Class isa = isa;
          goto LABEL_14;
        }
      }

      else
      {

        (*((void (**)(char *, uint64_t, uint64_t, void *))v295 + 7))(v22, 1LL, 1LL, v288);
        __break(1u);
      }

      __break(1u);
      goto LABEL_57;
    }

    os_log_t v84 = (os_log_t)*((void *)v291 + 1);
    ((void (*)(char *, uint64_t))v84)(v48, v38);
LABEL_14:
    uint64_t v105 = (uint64_t)v298;
    os_log_t v104 = v299;
    sub_100007D58(v290, v67, (uint64_t)v64.super.isa);
    uint64_t v48 = (char *)v105;
    uint64_t v106 = (uint64_t)v288;
    v107 = v293;
    if (!v105)
    {
LABEL_46:
      v236 = v267;
      static LoggedObject<>.logger.getter(v104, v271, v270);
      id v237 = v290;
      id v238 = v67;
      id v67 = v237;
      uint64_t v37 = (char *)v238;
      v239 = (os_log_s *)Logger.logObject.getter(v37);
      int v240 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v239, (os_log_type_t)v240))
      {
        LODWORD(v296) = v240;
        os_log_t v299 = v239;
        uint64_t v72 = v106;
        os_log_t v291 = v84;
        uint64_t v241 = swift_slowAlloc(22LL, -1LL);
        v293 = (os_log_s *)swift_slowAlloc(64LL, -1LL);
        os_log_t v303 = v293;
        *(_DWORD *)uint64_t v241 = 136446466;
        id v242 = [v37 URL];
        if (v242)
        {
          v243 = v242;
          os_log_t v298 = (os_log_t)v48;
          static URL._unconditionallyBridgeFromObjectiveC(_:)(v242);

          v244 = v295;
          v245 = (void (*)(void))*((void *)v295 + 4);
          v246 = v280;
          v245();
          (*((void (**)(char *, void, uint64_t, uint64_t))v244 + 7))(v246, 0LL, 1LL, v72);
          if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v244 + 6))(v246, 1LL, v72) != 1)
          {
            v247 = v279;
            ((void (*)(char *, char *, uint64_t))v245)(v279, v246, v72);
            uint64_t v248 = sub_10000D1E8( &qword_10007EEC8,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
            uint64_t v249 = dispatch thunk of CustomStringConvertible.description.getter(v72, v248);
            unint64_t v251 = v250;
            (*((void (**)(char *, uint64_t))v244 + 1))(v247, v72);
            os_log_t v301 = (os_log_t)sub_100046274(v249, v251, (uint64_t *)&v303);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v301, v302, v241 + 4);
            swift_bridgeObjectRelease(v251);

            *(_WORD *)(v241 + 12) = 2082;
            id v252 = [v67 persistentStoreCoordinator];
            id v253 = [v252 managedObjectModel];

            id v254 = [v253 versionChecksum];
            uint64_t v255 = static String._unconditionallyBridgeFromObjectiveC(_:)(v254);
            unint64_t v257 = v256;

            os_log_t v301 = (os_log_t)sub_100046274(v255, v257, (uint64_t *)&v303);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v301, v302, v241 + 14);
            swift_bridgeObjectRelease(v257);

            os_log_t v258 = v299;
            _os_log_impl( (void *)&_mh_execute_header,  v299,  (os_log_type_t)v296,  "Successfully loaded persistent store at %{public}s with version checksum %{public}s",  (uint8_t *)v241,  0x16u);
            v259 = v293;
            swift_arrayDestroy(v293, 2LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v259, -1LL, -1LL);
            swift_slowDealloc(v241, -1LL, -1LL);

            ((void (*)(char *, uint64_t))v291)(v267, v297);
            return;
          }

          goto LABEL_60;
        }

LABEL_59:
        (*((void (**)(char *, uint64_t, uint64_t, uint64_t))v295 + 7))(v280, 1LL, 1LL, v72);
        __break(1u);
LABEL_60:

        __break(1u);
        goto LABEL_61;
      }

      v188 = v236;
LABEL_51:
      ((void (*)(char *, uint64_t))v84)(v188, v297);
      return;
    }

    os_log_t v303 = (os_log_t)v105;
    swift_errorRetain(v105);
    uint64_t v108 = sub_10000D228((uint64_t *)&unk_10007EC20);
    v109 = v296;
    if (swift_dynamicCast(v107, &v303, v108, v296, 0LL))
    {
      os_log_t v291 = v84;
      id v268 = v67;
      v110 = v289;
      (*(void (**)(char *, os_log_s *, void *))(v292 + 32))(v289, v107, v109);
      uint64_t v111 = sub_10000D1E8( &qword_10007EED0,  (uint64_t (*)(uint64_t))&type metadata accessor for CocoaError,  (uint64_t)&protocol conformance descriptor for CocoaError);
      v112 = v284;
      v113 = _BridgedStoredNSError.code.getter(v284, v109, v111);
      v114 = v285;
      static CocoaError.Code.persistentStoreIncompatibleVersionHash.getter(v113);
      uint64_t v115 = sub_10000D1E8( &qword_10007EED8,  (uint64_t (*)(uint64_t))&type metadata accessor for CocoaError.Code,  (uint64_t)&protocol conformance descriptor for CocoaError.Code);
      v116 = v287;
      dispatch thunk of RawRepresentable.rawValue.getter(&v301, v287, v115);
      dispatch thunk of RawRepresentable.rawValue.getter(&v300, v116, v115);
      v118 = (os_log_s *)v300;
      os_log_t v117 = v301;
      v119 = (void (*)(char *, os_log_s *))*((void *)v286 + 1);
      v119(v114, v116);
      v119((char *)v112, v116);
      if (v117 == v118)
      {
        swift_errorRelease(v105);
        uint64_t v48 = v266;
        static LoggedObject<>.logger.getter(v299, v271, v270);
        uint64_t v120 = v292;
        v121 = v283;
        v122 = v296;
        (*(void (**)(char *, char *, void *))(v292 + 16))(v283, v110, v296);
        uint64_t v37 = (char *)v268;
        v123 = (os_log_s *)Logger.logObject.getter(v37);
        int v124 = static os_log_type_t.error.getter();
        BOOL v125 = os_log_type_enabled(v123, (os_log_type_t)v124);
        v126 = (void (*)(char *, uint64_t))v291;
        if (v125)
        {
          LODWORD(v293) = v124;
          uint64_t v127 = swift_slowAlloc(22LL, -1LL);
          v287 = (os_log_s *)swift_slowAlloc(8LL, -1LL);
          os_log_t v298 = (os_log_t)swift_slowAlloc(32LL, -1LL);
          os_log_t v301 = v298;
          *(_DWORD *)uint64_t v127 = 136446466;
          id v128 = [v37 URL];
          if (!v128)
          {
LABEL_61:

            (*((void (**)(char *, uint64_t, uint64_t, void *))v295 + 7))(v278, 1LL, 1LL, v288);
            __break(1u);
            goto LABEL_62;
          }

          v129 = v128;
          v130 = v294;
          static URL._unconditionallyBridgeFromObjectiveC(_:)(v128);

          uint64_t v48 = v295;
          v131 = (void (*)(char *, char *, void *))*((void *)v295 + 4);
          v132 = v278;
          v133 = v288;
          v131(v278, v130, v288);
          (*((void (**)(char *, void, uint64_t, void *))v48 + 7))(v132, 0LL, 1LL, v133);
          if ((*((unsigned int (**)(char *, uint64_t, void *))v48 + 6))(v132, 1LL, v133) == 1)
          {
LABEL_62:

            __break(1u);
            goto LABEL_63;
          }

          v134 = v277;
          v131(v277, v132, v133);
          uint64_t v135 = sub_10000D1E8( &qword_10007EEC8,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
          uint64_t v136 = dispatch thunk of CustomStringConvertible.description.getter(v133, v135);
          unint64_t v138 = v137;
          (*((void (**)(char *, void *))v48 + 1))(v134, v133);
          uint64_t v300 = sub_100046274(v136, v138, (uint64_t *)&v301);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v300, &v301, v127 + 4);
          swift_bridgeObjectRelease(v138);

          *(_WORD *)(v127 + 12) = 2114;
          v139 = v283;
          uint64_t v141 = CocoaError._nsError.getter(v140);
          uint64_t v142 = _swift_stdlib_bridgeErrorToNSError(v141);
          uint64_t v300 = v142;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v300, &v301, v127 + 14);
          v143 = v287;
          *(void *)v287 = v142;
          v144 = *(char **)(v292 + 8);
          ((void (*)(char *, void *))v144)(v139, v296);
          _os_log_impl( (void *)&_mh_execute_header,  v123,  (os_log_type_t)v293,  "Persistent store at %{public}s has an incompatible version: %{public}@",  (uint8_t *)v127,  0x16u);
          uint64_t v145 = sub_10000D228(&qword_10007EE38);
          swift_arrayDestroy(v143, 1LL, v145);
          swift_slowDealloc(v143, -1LL, -1LL);
          os_log_t v146 = v298;
          swift_arrayDestroy(v298, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v146, -1LL, -1LL);
          swift_slowDealloc(v127, -1LL, -1LL);

          uint64_t v147 = v297;
          ((void (*)(char *, uint64_t))v291)(v266, v297);
        }

        else
        {

          v189 = v121;
          v144 = *(char **)(v120 + 8);
          ((void (*)(char *, void *))v144)(v189, v122);

          uint64_t v147 = v297;
          v126(v48, v297);
        }

        v64.super.Class isa = isa;
        id v190 = v290;
        sub_100009DF4(v290, v37);
        uint64_t v48 = 0LL;
        v293 = (os_log_s *)v144;
        uint64_t v191 = v264;
        static LoggedObject<>.logger.getter(v299, v271, v270);
        uint64_t v37 = v37;
        v192 = (os_log_s *)Logger.logObject.getter(v37);
        int v193 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v192, (os_log_type_t)v193))
        {
          LODWORD(v292) = v193;
          v194 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          v287 = (os_log_s *)swift_slowAlloc(32LL, -1LL);
          os_log_t v301 = v287;
          *(_DWORD *)v194 = 136446210;
          id v195 = [v37 URL];
          if (!v195)
          {
LABEL_63:

            (*((void (**)(char *, uint64_t, uint64_t, void *))v295 + 7))(v276, 1LL, 1LL, v288);
            __break(1u);
            goto LABEL_64;
          }

          v196 = v195;
          os_log_t v298 = 0LL;
          v197 = v294;
          static URL._unconditionallyBridgeFromObjectiveC(_:)(v195);

          v198 = v295;
          v199 = (void (*)(char *, char *, void *))*((void *)v295 + 4);
          uint64_t v48 = v276;
          v200 = v197;
          v201 = v288;
          v199(v276, v200, v288);
          (*((void (**)(char *, void, uint64_t, void *))v198 + 7))(v48, 0LL, 1LL, v201);
          if ((*((unsigned int (**)(char *, uint64_t, void *))v198 + 6))(v48, 1LL, v201) == 1)
          {
LABEL_64:

            __break(1u);
            goto LABEL_65;
          }

          v286 = v194 + 4;
          v202 = v275;
          v199(v275, v48, v201);
          uint64_t v203 = sub_10000D1E8( &qword_10007EEC8,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
          uint64_t v204 = dispatch thunk of CustomStringConvertible.description.getter(v201, v203);
          unint64_t v206 = v205;
          (*((void (**)(char *, void *))v198 + 1))(v202, v201);
          uint64_t v300 = sub_100046274(v204, v206, (uint64_t *)&v301);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v300, &v301, v286);
          swift_bridgeObjectRelease(v206);

          _os_log_impl( (void *)&_mh_execute_header,  v192,  (os_log_type_t)v292,  "Retrying load of store at %{public}s after handling previous error",  v194,  0xCu);
          v207 = v287;
          swift_arrayDestroy(v287, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v207, -1LL, -1LL);
          swift_slowDealloc(v194, -1LL, -1LL);

          uint64_t v147 = v297;
          os_log_t v84 = v291;
          ((void (*)(uint64_t, uint64_t))v291)(v264, v297);
          uint64_t v48 = (char *)v298;
          uint64_t v106 = (uint64_t)v201;
          id v208 = v290;
        }

        else
        {

          id v208 = v190;
          os_log_t v84 = v291;
          ((void (*)(uint64_t, uint64_t))v291)(v191, v147);
          uint64_t v106 = (uint64_t)v288;
        }

        v209 = v208;
        os_log_t v104 = v299;
        sub_100007D58(v209, v37, (uint64_t)v64.super.isa);
        id v67 = v268;
        if (v48)
        {
          Class v210 = v64.super.isa;
          uint64_t v211 = v263;
          static LoggedObject<>.logger.getter(v104, v271, v270);
          v212 = v37;
          swift_errorRetain(v48);
          uint64_t v37 = v212;
          uint64_t v213 = swift_errorRetain(v48);
          v214 = (void *)Logger.logObject.getter(v213);
          int v215 = static os_log_type_t.fault.getter();
          if (!os_log_type_enabled((os_log_t)v214, (os_log_type_t)v215))
          {

            swift_errorRelease(v48);
            swift_errorRelease(v48);

            uint64_t v235 = ((uint64_t (*)(uint64_t, uint64_t))v84)(v211, v147);
            goto LABEL_53;
          }

          LODWORD(v292) = v215;
          uint64_t v216 = swift_slowAlloc(22LL, -1LL);
          v287 = (os_log_s *)swift_slowAlloc(8LL, -1LL);
          os_log_t v299 = (os_log_t)swift_slowAlloc(32LL, -1LL);
          os_log_t v301 = v299;
          *(_DWORD *)uint64_t v216 = 136446466;
          id v217 = [v37 URL];
          if (v217)
          {
            v218 = v217;
            os_log_t v298 = (os_log_t)v48;
            v219 = v294;
            static URL._unconditionallyBridgeFromObjectiveC(_:)(v217);

            v220 = v295;
            v221 = (void (*)(char *, char *, void *))*((void *)v295 + 4);
            v222 = v274;
            v223 = v219;
            v224 = v288;
            v221(v274, v223, v288);
            (*((void (**)(char *, void, uint64_t, void *))v220 + 7))(v222, 0LL, 1LL, v224);
            if ((*((unsigned int (**)(char *, uint64_t, void *))v220 + 6))(v222, 1LL, v224) != 1)
            {
              v225 = v273;
              v221(v273, v222, v224);
              uint64_t v226 = sub_10000D1E8( &qword_10007EEC8,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
              uint64_t v227 = dispatch thunk of CustomStringConvertible.description.getter(v224, v226);
              unint64_t v229 = v228;
              (*((void (**)(char *, void *))v220 + 1))(v225, v224);
              uint64_t v300 = sub_100046274(v227, v229, (uint64_t *)&v301);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v300, &v301, v216 + 4);
              swift_bridgeObjectRelease(v229);

              *(_WORD *)(v216 + 12) = 2114;
              os_log_t v230 = v298;
              swift_errorRetain(v298);
              uint64_t v231 = _swift_stdlib_bridgeErrorToNSError(v230);
              uint64_t v300 = v231;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v300, &v301, v216 + 14);
              v232 = v287;
              *(void *)v287 = v231;
              swift_errorRelease(v230);
              swift_errorRelease(v230);
              _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v214,  (os_log_type_t)v292,  "Unable to load persistent store at %{public}s after repair: %{public}@",  (uint8_t *)v216,  0x16u);
              uint64_t v233 = sub_10000D228(&qword_10007EE38);
              swift_arrayDestroy(v232, 1LL, v233);
              swift_slowDealloc(v232, -1LL, -1LL);
              os_log_t v234 = v299;
              swift_arrayDestroy(v299, 1LL, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v234, -1LL, -1LL);
              swift_slowDealloc(v216, -1LL, -1LL);

              uint64_t v235 = ((uint64_t (*)(uint64_t, uint64_t))v291)(v263, v297);
              Class v210 = isa;
LABEL_53:
              v260 = v290;
              swift_willThrow(v235);

              ((void (*)(char *, void *))v293)(v289, v296);
              swift_errorRelease(v303);
              return;
            }

LABEL_66:
            swift_errorRelease(v298);
            __break(1u);
            return;
          }

  swift_release(*(void *)(v0 + 88));
  if (v13[2])
  {
    v112 = (void *)swift_task_alloc(dword_10007FA14);
    *(void *)(v0 + 200) = v112;
    char *v112 = v0;
    v112[1] = sub_10002A8A0;
    sub_10002A9A0((uint64_t)v13, *(void *)(v0 + 80), v0 + 16);
  }

  else
  {
    swift_bridgeObjectRelease(v13);
    v113 = *(void *)(v0 + 168);
    v114 = *(void *)(v0 + 176);
    v116 = *(void *)(v0 + 136);
    uint64_t v115 = *(void *)(v0 + 144);
    v118 = *(void *)(v0 + 120);
    os_log_t v117 = *(void *)(v0 + 128);
    v119 = *(void *)(v0 + 16);
    sub_10002D330(*(void *)(v0 + 192), 0LL);
    swift_task_dealloc(v114);
    swift_task_dealloc(v113);
    swift_task_dealloc(v115);
    swift_task_dealloc(v116);
    swift_task_dealloc(v117);
    swift_task_dealloc(v118);
    (*(void (**)(uint64_t))(v0 + 8))(v119);
  }

LABEL_65:
          swift_errorRelease(v48);
          (*((void (**)(char *, uint64_t, uint64_t, void *))v295 + 7))(v274, 1LL, 1LL, v288);
          __break(1u);
          goto LABEL_66;
        }

        ((void (*)(char *, void *))v293)(v289, v296);
        swift_errorRelease(v303);
        goto LABEL_46;
      }

      (*(void (**)(char *, void *))(v292 + 8))(v110, v296);
      os_log_t v104 = v299;
      v64.super.Class isa = isa;
      id v67 = v268;
      os_log_t v84 = v291;
    }

    swift_errorRelease(v303);
    v164 = v269;
    static LoggedObject<>.logger.getter(v104, v271, v270);
    id v165 = v67;
    swift_errorRetain(v105);
    uint64_t v37 = (char *)v165;
    uint64_t v166 = swift_errorRetain(v105);
    id v67 = (id)Logger.logObject.getter(v166);
    int v167 = static os_log_type_t.fault.getter();
    if (!os_log_type_enabled((os_log_t)v67, (os_log_type_t)v167))
    {

      swift_errorRelease(v105);
      swift_errorRelease(v105);

      uint64_t v186 = ((uint64_t (*)(char *, uint64_t))v84)(v164, v38);
      goto LABEL_31;
    }

    LODWORD(v296) = v167;
    uint64_t v72 = swift_slowAlloc(22LL, -1LL);
    v293 = (os_log_s *)swift_slowAlloc(8LL, -1LL);
    os_log_t v299 = (os_log_t)swift_slowAlloc(32LL, -1LL);
    os_log_t v303 = v299;
    *(_DWORD *)uint64_t v72 = 136446466;
    id v168 = [v37 URL];
    if (v168)
    {
      v169 = v168;
      os_log_t v291 = v84;
      os_log_t v298 = (os_log_t)v105;
      v170 = v294;
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v168);

      v171 = v295;
      v172 = (void (*)(char *, char *, void *))*((void *)v295 + 4);
      v173 = v282;
      v174 = v170;
      v175 = v288;
      v172(v282, v174, v288);
      (*((void (**)(char *, void, uint64_t, void *))v171 + 7))(v173, 0LL, 1LL, v175);
      if ((*((unsigned int (**)(char *, uint64_t, void *))v171 + 6))(v173, 1LL, v175) != 1)
      {
        v176 = v281;
        v172(v281, v173, v175);
        uint64_t v177 = sub_10000D1E8( &qword_10007EEC8,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
        uint64_t v178 = dispatch thunk of CustomStringConvertible.description.getter(v175, v177);
        unint64_t v180 = v179;
        (*((void (**)(char *, void *))v171 + 1))(v176, v175);
        os_log_t v301 = (os_log_t)sub_100046274(v178, v180, (uint64_t *)&v303);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v301, v302, v72 + 4);
        swift_bridgeObjectRelease(v180);

        *(_WORD *)(v72 + 12) = 2114;
        os_log_t v181 = v298;
        swift_errorRetain(v298);
        os_log_t v182 = (os_log_t)_swift_stdlib_bridgeErrorToNSError(v181);
        os_log_t v301 = v182;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v301, v302, v72 + 14);
        v183 = v293;
        *(void *)v293 = v182;
        swift_errorRelease(v181);
        swift_errorRelease(v181);
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v67,  (os_log_type_t)v296,  "Unable to load persistent store at %{public}s: %{public}@",  (uint8_t *)v72,  0x16u);
        uint64_t v184 = sub_10000D228(&qword_10007EE38);
        swift_arrayDestroy(v183, 1LL, v184);
        swift_slowDealloc(v183, -1LL, -1LL);
        os_log_t v185 = v299;
        swift_arrayDestroy(v299, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v185, -1LL, -1LL);
        swift_slowDealloc(v72, -1LL, -1LL);

        uint64_t v186 = ((uint64_t (*)(char *, uint64_t))v291)(v269, v297);
        v64.super.Class isa = isa;
LABEL_31:
        v187 = v290;
        swift_willThrow(v186);

        return;
      }

LABEL_58:
      swift_errorRelease(v298);
      __break(1u);
      goto LABEL_59;
    }

      swift_bridgeObjectRelease(0x8000000000000000LL);
      swift_bridgeObjectRetain(v96);
      if ((v103 & 1) == 0)
      {
        sub_10005CC20(v99, v92, v94, (uint64_t)_swiftEmptyArrayStorage, v96);
        swift_bridgeObjectRetain(v94);
      }

      uint64_t v106 = v96[7];
      uint64_t v135 = v96;
      v107 = swift_bridgeObjectRelease(v96);
      uint64_t v108 = (void *)(v106 + 8 * v99);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v107);
      v110 = *(void *)((*v108 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      v109 = *(void *)((*v108 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
      if (v110 >= v109 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v109 > 1, v110 + 1, 1LL);
      }
      uint64_t v111 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v110, v137);
      specialized Array._endMutation()(v111);

      swift_bridgeObjectRelease(v94);
      uint64_t v136 = sub_10002A990;
      uint64_t v37 = v138;
      uint64_t v9 = v139;
      uint64_t v12 = v140;
LABEL_51:
      unint64_t v85 = *(void *)(v0 + 168);
      uint64_t v86 = *(void *)(v0 + 152);
      (*(void (**)(uint64_t, void, uint64_t))(v37 + 16))(v85, *(void *)(v0 + 176), v86);
      sub_10002D350(v30, 1);
      v87 = *(void *)(v0 + 16);
      uint64_t v88 = swift_isUniquelyReferenced_nonNull_native(v87);
      sub_10005C7A0((uint64_t)v30, v85, v88);
      *(void *)(v0 + 16) = v87;
      swift_bridgeObjectRelease(0x8000000000000000LL);
      uint64_t v89 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
      v89(v85, v86);
      sub_10002D35C(v30, 1);

      sub_10002D35C(v30, 1);
      uint64_t v13 = v135;
      v89(*(void *)(v0 + 176), *(void *)(v0 + 152));
    }

    else
    {
      uint64_t v39 = type metadata accessor for EventRecordUploader(0LL);
      sub_10000D1E8(&qword_10007F9D8, type metadata accessor for EventRecordUploader, (uint64_t)&unk_1000615B0);
      static LoggedObject.logger.getter(v39);
      uint64_t v40 = (os_log_s *)v32;
      uint64_t v14 = (os_log_s *)Logger.logObject.getter(v40);
      uint64_t v41 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v14, v41))
      {
        v42 = swift_slowAlloc(12LL, -1LL);
        uint64_t v43 = (os_log_s **)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)v42 = 138543362;
        *(void *)(v42 + 4) = v40;
        *uint64_t v43 = v40;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  v41,  "Upload for record %{public}@ succeeded",  (uint8_t *)v42,  0xCu);
        uint64_t v44 = sub_10000D228(&qword_10007EE38);
        swift_arrayDestroy(v43, 1LL, v44);
        swift_slowDealloc(v43, -1LL, -1LL);
        swift_slowDealloc(v42, -1LL, -1LL);
      }

      else
      {

        uint64_t v14 = v40;
      }

      uint64_t v15 = *(void *)(v0 + 176);
      uint64_t v16 = *(void *)(v0 + 136);
      uint64_t v17 = *(void *)(v0 + 104);

      (*(void (**)(uint64_t, uint64_t))(v133 + 8))(v16, v17);
      uint64_t v18 = *(void *)(v0 + 16);
      uint64_t v19 = swift_isUniquelyReferenced_nonNull_native(v18);
      uint64_t v141 = v18;
      uint64_t v20 = sub_10002CD74(0LL, v15, v19);
      *(void *)(v0 + 16) = v141;
      swift_bridgeObjectRelease(0x8000000000000000LL);

      sub_10002D35C(v30, 0);
      sub_10002D340(v20);
      uint64_t v9 = v139;
      uint64_t v12 = v140;
      (*(void (**)(void, void))(v138 + 8))(*(void *)(v0 + 176), *(void *)(v0 + 152));
    }
  }

  char v22 = v12 + 1;
  if (__OFADD__(v12, 1LL))
  {
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
    return;
  }

  if (v22 >= v131) {
    goto LABEL_66;
  }
  uint64_t v23 = *(void *)(v130 + 8 * v22);
  uint64_t v24 = v12 + 1;
  if (v23) {
    goto LABEL_23;
  }
  uint64_t v24 = v12 + 2;
  if (v12 + 2 >= v131) {
    goto LABEL_66;
  }
  uint64_t v23 = *(void *)(v130 + 8 * v24);
  if (v23) {
    goto LABEL_23;
  }
  uint64_t v24 = v12 + 3;
  if (v12 + 3 >= v131) {
    goto LABEL_66;
  }
  uint64_t v23 = *(void *)(v130 + 8 * v24);
  if (v23)
  {
LABEL_23:
    v139 = (v23 - 1) & v23;
    uint64_t v140 = v24;
    uint64_t v21 = __clz(__rbit64(v23)) + (v24 << 6);
    goto LABEL_24;
  }

  uint64_t v25 = v12 + 4;
  if (v12 + 4 < v131)
  {
    uint64_t v23 = *(void *)(v130 + 8 * v25);
    if (!v23)
    {
      while (1)
      {
        uint64_t v24 = v25 + 1;
        if (__OFADD__(v25, 1LL)) {
          goto LABEL_72;
        }
        if (v24 >= v131) {
          goto LABEL_66;
        }
        uint64_t v23 = *(void *)(v130 + 8 * v24);
        ++v25;
        if (v23) {
          goto LABEL_23;
        }
      }
    }

    uint64_t v24 = v12 + 4;
    goto LABEL_23;
  }

LABEL_57:
    swift_errorRelease(v48);
    (*((void (**)(char *, uint64_t, uint64_t, void *))v295 + 7))(v282, 1LL, 1LL, v288);
    __break(1u);
    goto LABEL_58;
  }

  v295 = v55;
  uint64_t v88 = sub_10000D1E8(&qword_10007EE30, type metadata accessor for MainDriver, (uint64_t)&unk_100060428);
  uint64_t v89 = sub_10000D1E8(&qword_10007EE18, type metadata accessor for MainDriver, (uint64_t)&unk_100060458);
  v296 = v61;
  os_log_t v90 = v299;
  uint64_t v91 = static LoggedObject<>.logger.getter(v299, v88, v89);
  v92 = (os_log_s *)Logger.logObject.getter(v91);
  os_log_type_t v93 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v92, v93))
  {
    v94 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)v94 = 0;
    _os_log_impl((void *)&_mh_execute_header, v92, v93, "Loading in-memory persistent store", v94, 2u);
    swift_slowDealloc(v94, -1LL, -1LL);
  }

  os_log_t v84 = (os_log_t)*((void *)v291 + 1);
  ((void (*)(char *, uint64_t))v84)(v60, v297);
  v95 = v296;
  os_log_t v96 = v298;
  sub_10000B8D8(v296);
  if (!v96)
  {
    v148 = v295;
    static LoggedObject<>.logger.getter(v90, v88, v89);
    id v149 = v95;
    v150 = (os_log_s *)Logger.logObject.getter(v149);
    os_log_type_t v151 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v150, v151))
    {
      v152 = (_DWORD *)swift_slowAlloc(12LL, -1LL);
      os_log_t v299 = (os_log_t)swift_slowAlloc(32LL, -1LL);
      os_log_t v303 = v299;
      v296 = v152;
      _DWORD *v152 = 136446210;
      v294 = (char *)(v152 + 1);
      id v153 = [v149 persistentStoreCoordinator];
      id v154 = [v153 managedObjectModel];
      os_log_t v298 = 0LL;
      id v155 = v154;

      id v156 = [v155 versionChecksum];
      uint64_t v157 = static String._unconditionallyBridgeFromObjectiveC(_:)(v156);
      unint64_t v159 = v158;

      os_log_t v301 = (os_log_t)sub_100046274(v157, v159, (uint64_t *)&v303);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v301, v302, v294);
      swift_bridgeObjectRelease(v159);

      os_log_type_t v160 = v151;
      v161 = v296;
      _os_log_impl( (void *)&_mh_execute_header,  v150,  v160,  "Successfully loaded in-memory persistent store with version checksum %{public}s",  (uint8_t *)v296,  0xCu);
      os_log_t v162 = v299;
      swift_arrayDestroy(v299, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v162, -1LL, -1LL);
      swift_slowDealloc(v161, -1LL, -1LL);
    }

    else
    {
    }

    v188 = v148;
    goto LABEL_51;
  }

  static LoggedObject<>.logger.getter(v90, v88, v89);
  swift_errorRetain(v96);
  uint64_t v97 = swift_errorRetain(v96);
  v98 = (os_log_s *)Logger.logObject.getter(v97);
  os_log_type_t v99 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v98, v99))
  {
    os_log_t v299 = v84;
    v100 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    v101 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)v100 = 138543362;
    swift_errorRetain(v96);
    uint64_t v102 = _swift_stdlib_bridgeErrorToNSError(v96);
    os_log_t v303 = (os_log_t)v102;
    os_log_t v84 = v299;
    v95 = v296;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v303, &v304, v100 + 4);
    uint64_t *v101 = v102;
    swift_errorRelease(v96);
    swift_errorRelease(v96);
    _os_log_impl( (void *)&_mh_execute_header,  v98,  v99,  "Failed to load in-memory persistent store: %{public}@",  v100,  0xCu);
    uint64_t v103 = sub_10000D228(&qword_10007EE38);
    swift_arrayDestroy(v101, 1LL, v103);
    swift_slowDealloc(v101, -1LL, -1LL);
    swift_slowDealloc(v100, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(v96);
    swift_errorRelease(v96);
  }

  uint64_t v163 = ((uint64_t (*)(char *, uint64_t))v84)(v51, v297);
  swift_willThrow(v163);
}

uint64_t sub_100007454()
{
  v1[2] = v0;
  v1[3] = *v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  v1[4] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[5] = v3;
  v1[6] = swift_task_alloc((*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = (void *)swift_task_alloc(dword_10007EE2C);
  v1[7] = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_1000074CC;
  return sub_10000CA80();
}

uint64_t sub_1000074CC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 56LL));
  return swift_task_switch(sub_100007524, v1, 0LL);
}

uint64_t sub_100007524()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v3 = sub_10000D1E8(&qword_10007EE30, type metadata accessor for MainDriver, (uint64_t)&unk_100060428);
  uint64_t v4 = sub_10000D1E8(&qword_10007EE18, type metadata accessor for MainDriver, (uint64_t)&unk_100060458);
  static LoggedObject<>.logger.getter(v1, v3, v4);
  uint64_t v5 = swift_retain(v2);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = *(void *)(v0 + 16);
  if (v8)
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v10 = 67109120;
    if ((swift_task_isCurrentExecutor(v9, 0LL) & 1) == 0) {
      swift_task_reportUnexpectedExecutor("homeeventsd/MainDriver.swift", 28LL, 1LL, 220LL, *(void *)(v0 + 16), 0LL);
    }
    uint64_t v11 = *(void *)(v0 + 16);
    *(_DWORD *)(v0 + 64) = *(unsigned __int8 *)(v11 + OBJC_IVAR____TtC11homeeventsd10MainDriver_isCloudKitLoggedIn);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 68, v10 + 4);
    swift_release(v11);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "CloudKit initialization finished, logged in: %{BOOL}d", v10, 8u);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  else
  {
    swift_release(*(void *)(v0 + 16));
  }

  uint64_t v12 = *(void *)(v0 + 48);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 40) + 8LL))(v12, *(void *)(v0 + 32));
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000076C4(char a1, char a2)
{
  *(void *)(v3 + 16) = v2;
  *(_BYTE *)(v3 + 65) = a2;
  *(_BYTE *)(v3 + 64) = a1;
  *(void *)(v3 + 24) = *v2;
  uint64_t v4 = type metadata accessor for Logger(0LL);
  *(void *)(v3 + 32) = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  *(void *)(v3 + 40) = v5;
  *(void *)(v3 + 48) = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_10000D228(&qword_10007EE68);
  *(void *)(v3 + 56) = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100007758, v2, 0LL);
}

uint64_t sub_100007758()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR____TtC11homeeventsd10MainDriver_localStorageProperties);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 56);
    char v4 = *(_BYTE *)(v0 + 65);
    char v5 = *(_BYTE *)(v0 + 64);
    uint64_t v6 = *(void *)(v1 + OBJC_IVAR____TtC11homeeventsd10MainDriver_maxCloudKitRecordsPerOperation);
    uint64_t v7 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v3, 1LL, 1LL, v7);
    uint64_t v8 = swift_allocObject(&unk_1000757B8, 50LL, 7LL);
    *(void *)(v8 + 16) = 0LL;
    *(void *)(v8 + 24) = 0LL;
    *(void *)(v8 + 32) = v2;
    *(void *)(v8 + 40) = v6;
    *(_BYTE *)(v8 + 48) = v5;
    *(_BYTE *)(v8 + 49) = v4;
    id v9 = v2;
    uint64_t v10 = sub_10005DBB4(v3, (uint64_t)&unk_10007EE78, v8);
    swift_release(v10);
  }

  else
  {
    uint64_t v11 = *(void *)(v0 + 24);
    uint64_t v12 = sub_10000D1E8(&qword_10007EE30, type metadata accessor for MainDriver, (uint64_t)&unk_100060428);
    uint64_t v13 = sub_10000D1E8(&qword_10007EE18, type metadata accessor for MainDriver, (uint64_t)&unk_100060458);
    uint64_t v14 = static LoggedObject<>.logger.getter(v11, v12, v13);
    uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v16 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  v16,  "Not creating metric without valid CoreData database",  v17,  2u);
      swift_slowDealloc(v17, -1LL, -1LL);
    }

    uint64_t v19 = *(void *)(v0 + 40);
    uint64_t v18 = *(void *)(v0 + 48);
    uint64_t v20 = *(void *)(v0 + 32);

    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
  }

  uint64_t v21 = *(void *)(v0 + 48);
  swift_task_dealloc(*(void *)(v0 + 56));
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100007918(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7)
{
  *(_BYTE *)(v7 + 57) = a7;
  *(_BYTE *)(v7 + 56) = a6;
  *(void *)(v7 + 16) = a4;
  *(void *)(v7 + 24) = a5;
  return swift_task_switch(sub_100007938, 0LL, 0LL);
}

uint64_t sub_100007938()
{
  char v1 = *(_BYTE *)(v0 + 57);
  char v2 = *(_BYTE *)(v0 + 56);
  uint64_t v3 = *(void **)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v5 = type metadata accessor for CoreDataDatabase();
  uint64_t v6 = swift_allocObject(v5, 33LL, 7LL);
  *(void *)(v0 + 32) = v6;
  *(void *)(v6 + 16) = [v3 newBackgroundContext];
  *(void *)(v6 + 24) = v4;
  *(_BYTE *)(v6 + 32) = 0;
  v9[3] = v5;
  v9[4] = &off_100077B60;
  v9[0] = v6;
  objc_allocWithZone((Class)type metadata accessor for ProcessLaunchLogEvent());
  swift_retain(v6);
  *(void *)(v0 + 40) = sub_100013284((uint64_t)v9, v2, v1);
  uint64_t v7 = (void *)swift_task_alloc(dword_10007F444);
  *(void *)(v0 + 48) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_100007A1C;
  return sub_1000133E0();
}

uint64_t sub_100007A1C()
{
  return swift_task_switch(sub_100007A70, 0LL, 0LL);
}

uint64_t sub_100007A70()
{
  uint64_t v1 = *(void *)(v0 + 32);
  char v2 = *(void **)(v0 + 40);
  sub_1000144C0();

  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100007AAC()
{
  *(void *)(v1 + 32) = v0;
  char v2 = (void *)swift_task_alloc(dword_10007EE2C);
  *(void *)(v1 + 40) = v2;
  *char v2 = v1;
  v2[1] = sub_100007AF4;
  return sub_10000CA80();
}

uint64_t sub_100007AF4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 32LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 40LL));
  return swift_task_switch(sub_100007B48, v1, 0LL);
}

uint64_t sub_100007B48()
{
  uint64_t v1 = *(void *)(v0 + 32);
  char v2 = (objc_class *)type metadata accessor for AccountChangedListener();
  uint64_t v3 = (char *)objc_allocWithZone(v2);
  uint64_t v4 = swift_weakInit(&v3[OBJC_IVAR____TtC11homeeventsd22AccountChangedListener_mainDriver], 0LL);
  swift_weakAssign(v4, v1);
  *(void *)(v0 + 16) = v3;
  *(void *)(v0 + 24) = v2;
  id v5 = objc_msgSendSuper2((objc_super *)(v0 + 16), "init");
  uint64_t v6 = *(void **)(v1 + OBJC_IVAR____TtC11homeeventsd10MainDriver_accountChangedListener);
  *(void *)(v1 + OBJC_IVAR____TtC11homeeventsd10MainDriver_accountChangedListener) = v5;
  id v7 = v5;

  [*(id *)(v1 + OBJC_IVAR____TtC11homeeventsd10MainDriver_notificationCenter) addObserver:v7 selector:"accountChangedWithNotification:" name:CKAccountChangedNotification object:*(void *)(v1 + OBJC_IVAR____TtC11homeeventsd10MainDriver_cloudKitContainer)];
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100007C34@<X0>(uint64_t a1@<X8>)
{
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v1);
  id v4 = [(id)objc_opt_self(NSBundle) bundleForClass:ObjCClassFromMetadata];
  NSString v5 = String._bridgeToObjectiveC()();
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [v4 URLForResource:v5 withExtension:v6];

  if (v7)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v7);

    uint64_t v8 = type metadata accessor for URL(0LL);
    id v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL);
    uint64_t v10 = a1;
    uint64_t v11 = 0LL;
  }

  else
  {
    uint64_t v8 = type metadata accessor for URL(0LL);
    id v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL);
    uint64_t v10 = a1;
    uint64_t v11 = 1LL;
  }

  return v9(v10, v11, 1LL, v8);
}

void sub_100007D44()
{
  qword_100080790 = (uint64_t)&off_1000754F8;
}

void sub_100007D58(void *a1, void *a2, uint64_t a3)
{
  uint64_t v227 = a3;
  uint64_t v233 = (uint64_t *)type metadata accessor for CocoaError.Code(0LL);
  uint64_t v232 = *(v233 - 1);
  uint64_t v5 = __chkstk_darwin(v233);
  uint64_t v231 = (char *)&v213 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  os_log_t v230 = (char *)&v213 - v7;
  uint64_t v8 = sub_10000D228(&qword_10007EEB8);
  uint64_t v9 = __chkstk_darwin(v8);
  v221 = (char *)&v213 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  v225 = (char *)&v213 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  v223 = (char *)&v213 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  os_log_t v242 = (os_log_t)((char *)&v213 - v16);
  __chkstk_darwin(v15);
  id v217 = (char *)&v213 - v17;
  uint64_t v236 = type metadata accessor for URL(0LL);
  uint64_t v243 = *(void *)(v236 - 8);
  uint64_t v18 = __chkstk_darwin(v236);
  v220 = (char *)&v213 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = __chkstk_darwin(v18);
  v224 = (char *)&v213 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  v222 = (char *)&v213 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v216 = (char *)&v213 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v235 = (os_log_s *)((char *)&v213 - v27);
  __chkstk_darwin(v26);
  int v215 = (char *)&v213 - v28;
  uint64_t v247 = type metadata accessor for Logger(0LL);
  int v240 = *(uint64_t **)(v247 - 8);
  uint64_t v29 = __chkstk_darwin(v247);
  os_log_t v234 = (char *)&v213 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = __chkstk_darwin(v29);
  id v238 = (char *)&v213 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  id v237 = (char *)&v213 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  v219 = (char *)&v213 - v36;
  __chkstk_darwin(v35);
  v218 = (char *)&v213 - v37;
  uint64_t v38 = type metadata accessor for CocoaError(0LL);
  uint64_t v39 = *(void *)(v38 - 8);
  uint64_t v40 = __chkstk_darwin(v38);
  uint64_t v226 = (char *)&v213 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v42 = __chkstk_darwin(v40);
  unint64_t v229 = (char *)&v213 - v43;
  uint64_t v44 = __chkstk_darwin(v42);
  uint64_t v244 = (uint64_t)&v213 - v45;
  uint64_t v46 = __chkstk_darwin(v44);
  uint64_t v249 = (char *)&v213 - v47;
  __chkstk_darwin(v46);
  uint64_t v49 = (char *)&v213 - v48;
  uint64_t v50 = sub_10000D228(&qword_10007EEF8);
  uint64_t v51 = __chkstk_darwin(v50);
  uint64_t v241 = (uint64_t)&v213 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v51);
  v54 = (char *)&v213 - v53;
  uint64_t v55 = sub_10000D228(&qword_10007EEE0);
  uint64_t v56 = swift_allocObject(v55, 40LL, 7LL);
  *(_OWORD *)(v56 + 16) = xmmword_100060330;
  *(void *)(v56 + 32) = a2;
  *(void *)&__int128 aBlock = v56;
  specialized Array._endMutation()(v56);
  uint64_t v57 = aBlock;
  sub_10000D5E8(0LL, &qword_10007EEE8, &OBJC_CLASS___NSPersistentStoreDescription_ptr);
  id v58 = a2;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v57);
  [a1 setPersistentStoreDescriptions:isa];

  [v58 setShouldMigrateStoreAutomatically:0];
  os_log_t v245 = (os_log_t)v58;
  [v58 setShouldInferMappingModelAutomatically:0];
  uint64_t v250 = v39;
  uint64_t v60 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v39 + 56);
  v60(v54, 1LL, 1LL, v38);
  uint64_t v61 = swift_allocObject(&unk_1000757E0, 24LL, 7LL);
  *(void *)(v61 + 16) = 0LL;
  unint64_t v257 = sub_10000D544;
  uint64_t v258 = v61;
  *(void *)&__int128 aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256LL;
  *(void *)&__int128 v256 = sub_10000B2D8;
  *((void *)&v256 + 1) = &unk_100075820;
  uint64_t v62 = _Block_copy(&aBlock);
  uint64_t v63 = v258;
  swift_retain(v61);
  swift_release(v63);
  id v228 = a1;
  [a1 loadPersistentStoresWithCompletionHandler:v62];
  _Block_release(v62);
  swift_beginAccess(v61 + 16, v254, 0LL, 0LL);
  uint64_t v64 = *(void *)(v61 + 16);
  if (!v64)
  {
    swift_release(v61);
    goto LABEL_6;
  }

  uint64_t v65 = swift_errorRetain(v64);
  swift_willThrow(v65);
  swift_release(v61);
  *(void *)&__int128 aBlock = v64;
  swift_errorRetain(v64);
  uint64_t v66 = sub_10000D228((uint64_t *)&unk_10007EC20);
  if ((swift_dynamicCast(v49, &aBlock, v66, v38, 0LL) & 1) == 0)
  {
LABEL_21:
    uint64_t v112 = swift_errorRelease(aBlock);
    swift_willThrow(v112);
LABEL_51:
    sub_10000D5AC((uint64_t)v54, &qword_10007EEF8);
    return;
  }

  v239 = v60;
  v246 = v54;
  id v67 = v229;
  v214 = *(void (**)(char *, char *, uint64_t))(v250 + 32);
  v214(v229, v49, v38);
  uint64_t v68 = sub_10000D1E8( &qword_10007EED0,  (uint64_t (*)(uint64_t))&type metadata accessor for CocoaError,  (uint64_t)&protocol conformance descriptor for CocoaError);
  int v69 = v230;
  BOOL v70 = _BridgedStoredNSError.code.getter(v230, v38, v68);
  v71 = v231;
  static CocoaError.Code.persistentStoreIncompatibleVersionHash.getter(v70);
  uint64_t v72 = sub_10000D1E8( &qword_10007EED8,  (uint64_t (*)(uint64_t))&type metadata accessor for CocoaError.Code,  (uint64_t)&protocol conformance descriptor for CocoaError.Code);
  id v73 = v233;
  dispatch thunk of RawRepresentable.rawValue.getter(&v251, v233, v72);
  dispatch thunk of RawRepresentable.rawValue.getter(&v253, v73, v72);
  uint64_t v74 = v251;
  uint64_t v75 = v253;
  v76 = *(void (**)(char *, uint64_t *))(v232 + 8);
  v76(v71, v73);
  v76(v69, v73);
  if (v74 != v75)
  {
    (*(void (**)(char *, uint64_t))(v250 + 8))(v67, v38);
    v54 = v246;
    goto LABEL_21;
  }

  v54 = v246;
  sub_10000D5AC((uint64_t)v246, &qword_10007EEF8);
  swift_errorRelease(v64);
  v214(v54, v67, v38);
  v239(v54, 0LL, 1LL, v38);
  swift_errorRelease(aBlock);
  v239 = 0LL;
LABEL_6:
  uint64_t v77 = v38;
  uint64_t v78 = v241;
  sub_10000D564((uint64_t)v54, v241);
  uint64_t v79 = v250;
  int v80 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v250 + 48))(v78, 1LL, v77);
  os_log_t v82 = (os_log_t)v243;
  uint64_t v81 = v244;
  os_log_t v83 = v245;
  os_log_t v84 = v242;
  v246 = v54;
  if (v80 == 1)
  {
    sub_10000D5AC(v78, &qword_10007EEF8);
    uint64_t v85 = sub_10000D1E8(&qword_10007EE30, type metadata accessor for MainDriver, (uint64_t)&unk_100060428);
    uint64_t v86 = sub_10000D1E8(&qword_10007EE18, type metadata accessor for MainDriver, (uint64_t)&unk_100060458);
    v87 = v238;
    static LoggedObject<>.logger.getter(v248, v85, v86);
    uint64_t v88 = v83;
    uint64_t v89 = (void *)Logger.logObject.getter(v88);
    int v90 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled((os_log_t)v89, (os_log_type_t)v90))
    {

      uint64_t v102 = (void (*)(char *, uint64_t))v240[1];
      uint64_t v103 = v87;
      goto LABEL_23;
    }

    LODWORD(v250) = v90;
    uint64_t v91 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v249 = (char *)swift_slowAlloc(32LL, -1LL);
    *(void *)&__int128 aBlock = v249;
    *(_DWORD *)uint64_t v91 = 136315138;
    id v92 = -[os_log_s URL](v88, "URL");
    if (v92)
    {
      os_log_type_t v93 = v92;
      os_log_t v83 = v235;
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v92);

      v94 = (void (*)(char *, os_log_t, uint64_t))*((void *)v82 + 4);
      os_log_t v84 = v82;
      os_log_t v82 = (os_log_t)v225;
      uint64_t v95 = v236;
      v94(v225, v83, v236);
      (*((void (**)(os_log_t, void, uint64_t, uint64_t))v84 + 7))(v82, 0LL, 1LL, v95);
      if ((*((unsigned int (**)(os_log_t, uint64_t, uint64_t))v84 + 6))(v82, 1LL, v95) != 1)
      {
        os_log_t v96 = v224;
        v94(v224, v82, v95);
        uint64_t v97 = sub_10000D1E8( &qword_10007EEC8,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
        uint64_t v98 = dispatch thunk of CustomStringConvertible.description.getter(v95, v97);
        unint64_t v100 = v99;
        (*((void (**)(char *, uint64_t))v84 + 1))(v96, v95);
        uint64_t v251 = sub_100046274(v98, v100, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v251, &v252, v91 + 4);
        swift_bridgeObjectRelease(v100);

        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v89,  (os_log_type_t)v250,  "Load succeeded with migration disabled for store at %s",  v91,  0xCu);
        v101 = v249;
        swift_arrayDestroy(v249, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v101, -1LL, -1LL);
        swift_slowDealloc(v91, -1LL, -1LL);

        uint64_t v102 = (void (*)(char *, uint64_t))v240[1];
        uint64_t v103 = v238;
LABEL_23:
        uint64_t v113 = v247;
LABEL_47:
        v102(v103, v113);
        sub_10000D5AC((uint64_t)v246, &qword_10007EEF8);
        return;
      }
    }

    else
    {

      (*((void (**)(char *, uint64_t, uint64_t, uint64_t))v82 + 7))(v225, 1LL, 1LL, v236);
      __break(1u);
    }

    __break(1u);
    goto LABEL_61;
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v79 + 32))(v249, v78, v77);
  uint64_t v104 = sub_10000D1E8( &qword_10007EED0,  (uint64_t (*)(uint64_t))&type metadata accessor for CocoaError,  (uint64_t)&protocol conformance descriptor for CocoaError);
  uint64_t v105 = _BridgedStoredNSError.userInfo.getter(v77, v104);
  if (*(void *)(v105 + 16) && (unint64_t v106 = sub_10005A2E0(0x617461646174656DLL, 0xE800000000000000LL), (v107 & 1) != 0))
  {
    sub_10000D2C8(*(void *)(v105 + 56) + 32 * v106, (uint64_t)&aBlock);
  }

  else
  {
    __int128 aBlock = 0u;
    __int128 v256 = 0u;
  }

  swift_bridgeObjectRelease(v105);
  if (!*((void *)&v256 + 1)) {
    goto LABEL_34;
  }
  uint64_t v108 = sub_10000D228(&qword_10007EF08);
  if ((swift_dynamicCast(&v251, &aBlock, (char *)&type metadata for Any + 8, v108, 6LL) & 1) == 0)
  {
LABEL_35:
    uint64_t v138 = sub_10000D1E8(&qword_10007EE30, type metadata accessor for MainDriver, (uint64_t)&unk_100060428);
    uint64_t v139 = sub_10000D1E8(&qword_10007EE18, type metadata accessor for MainDriver, (uint64_t)&unk_100060458);
    uint64_t v140 = v237;
    static LoggedObject<>.logger.getter(v248, v138, v139);
    (*(void (**)(uint64_t, char *, uint64_t))(v79 + 16))(v81, v249, v77);
    os_log_t v84 = v83;
    uint64_t v141 = (void *)Logger.logObject.getter(v84);
    int v142 = static os_log_type_t.fault.getter();
    if (!os_log_type_enabled((os_log_t)v141, (os_log_type_t)v142))
    {

      (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v81, v77);
      os_log_t v84 = (os_log_t)v240[1];
      ((void (*)(char *, uint64_t))v84)(v140, v247);
      goto LABEL_41;
    }

    LODWORD(v238) = v142;
    uint64_t v88 = (os_log_s *)swift_slowAlloc(22LL, -1LL);
    uint64_t v233 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    os_log_t v242 = (os_log_t)swift_slowAlloc(32LL, -1LL);
    *(void *)&__int128 aBlock = v242;
    *(_DWORD *)uint64_t v88 = 136446466;
    id v143 = -[os_log_s URL](v84, "URL");
    uint64_t v91 = (uint8_t *)v236;
    if (!v143)
    {
LABEL_61:

      (*((void (**)(char *, uint64_t, uint64_t, uint8_t *))v82 + 7))(v223, 1LL, 1LL, v91);
      __break(1u);
      goto LABEL_62;
    }

    v144 = v143;
    uint64_t v241 = v77;
    os_log_t v83 = v235;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v143);

    uint64_t v145 = (void (*)(char *, os_log_t, uint8_t *))*((void *)v82 + 4);
    os_log_t v146 = v223;
    v145(v223, v83, v91);
    (*((void (**)(char *, void, uint64_t, uint8_t *))v82 + 7))(v146, 0LL, 1LL, v91);
    if ((*((unsigned int (**)(char *, uint64_t, uint8_t *))v82 + 6))(v146, 1LL, v91) == 1)
    {
LABEL_62:

      __break(1u);
      goto LABEL_63;
    }

    uint64_t v147 = v222;
    v145(v222, (os_log_t)v146, v91);
    uint64_t v148 = sub_10000D1E8( &qword_10007EEC8,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    uint64_t v149 = dispatch thunk of CustomStringConvertible.description.getter(v91, v148);
    unint64_t v151 = v150;
    (*((void (**)(char *, uint8_t *))v82 + 1))(v147, v91);
    uint64_t v251 = sub_100046274(v149, v151, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v251, &v252, (char *)v88 + 4);
    swift_bridgeObjectRelease(v151);

    *((_WORD *)v88 + 6) = 2114;
    uint64_t v152 = v244;
    uint64_t v153 = ((uint64_t (*)(void))CocoaError._nsError.getter)();
    uint64_t v154 = _swift_stdlib_bridgeErrorToNSError(v153);
    uint64_t v251 = v154;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v251, &v252, (char *)v88 + 14);
    id v155 = v233;
    *uint64_t v233 = v154;
    uint64_t v79 = v250;
    uint64_t v77 = v241;
    (*(void (**)(uint64_t, uint64_t))(v250 + 8))(v152, v241);
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v141,  (os_log_type_t)v238,  "Unable to determine version checksum for store at %{public}s: %{public}@",  (uint8_t *)v88,  0x16u);
    uint64_t v156 = sub_10000D228(&qword_10007EE38);
    swift_arrayDestroy(v155, 1LL, v156);
    swift_slowDealloc(v155, -1LL, -1LL);
    os_log_t v157 = v242;
    swift_arrayDestroy(v242, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v157, -1LL, -1LL);
    swift_slowDealloc(v88, -1LL, -1LL);

    os_log_t v84 = (os_log_t)v240[1];
    ((void (*)(char *, uint64_t))v84)(v237, v247);
LABEL_39:
    os_log_t v83 = v245;
LABEL_41:
    -[os_log_s setShouldMigrateStoreAutomatically:](v83, "setShouldMigrateStoreAutomatically:", 1LL);
    -[os_log_s setShouldInferMappingModelAutomatically:](v83, "setShouldInferMappingModelAutomatically:", 1LL);
    -[os_log_s setOption:forKey:](v83, "setOption:forKey:", v227, NSPersistentStoreStagedMigrationManagerOptionKey);
    uint64_t v158 = swift_allocObject(&unk_1000757E0, 24LL, 7LL);
    *(void *)(v158 + 16) = 0LL;
    unint64_t v257 = sub_10000D544;
    uint64_t v258 = v158;
    *(void *)&__int128 aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256LL;
    *(void *)&__int128 v256 = sub_10000B2D8;
    *((void *)&v256 + 1) = &unk_100075848;
    unint64_t v159 = _Block_copy(&aBlock);
    uint64_t v160 = v258;
    swift_retain(v158);
    swift_release(v160);
    [v228 loadPersistentStoresWithCompletionHandler:v159];
    _Block_release(v159);
    swift_beginAccess(v158 + 16, &aBlock, 0LL, 0LL);
    uint64_t v88 = *(os_log_s **)(v158 + 16);
    v161 = v234;
    if (!v88)
    {
      swift_release(v158);
      uint64_t v102 = *(void (**)(char *, uint64_t))(v79 + 8);
      uint64_t v103 = v249;
      uint64_t v113 = v77;
      goto LABEL_47;
    }

    uint64_t v162 = swift_errorRetain(*(void *)(v158 + 16));
    swift_willThrow(v162);
    swift_release(v158);
    uint64_t v163 = sub_10000D1E8(&qword_10007EE30, type metadata accessor for MainDriver, (uint64_t)&unk_100060428);
    uint64_t v164 = sub_10000D1E8(&qword_10007EE18, type metadata accessor for MainDriver, (uint64_t)&unk_100060458);
    static LoggedObject<>.logger.getter(v248, v163, v164);
    id v165 = v226;
    (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v226, v249, v77);
    os_log_t v82 = v83;
    os_log_t v83 = (os_log_t)Logger.logObject.getter(v82);
    int v166 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v83, (os_log_type_t)v166))
    {
      LODWORD(v242) = v166;
      os_log_t v245 = v83;
      uint64_t v248 = v84;
      uint64_t v167 = swift_slowAlloc(22LL, -1LL);
      int v240 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v244 = swift_slowAlloc(32LL, -1LL);
      uint64_t v251 = v244;
      *(_DWORD *)uint64_t v167 = 136446466;
      id v168 = -[os_log_s URL](v82, "URL");
      if (!v168)
      {
LABEL_63:

        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v243 + 56))(v221, 1LL, 1LL, v236);
        __break(1u);
        goto LABEL_64;
      }

      v169 = v168;
      uint64_t v241 = v77;
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v168);

      os_log_t v83 = (os_log_t)v243;
      v170 = *(void (**)(void))(v243 + 32);
      v171 = v221;
      os_log_t v84 = (os_log_t)v236;
      v170();
      (*((void (**)(char *, void, uint64_t, os_log_t))v83 + 7))(v171, 0LL, 1LL, v84);
      if ((*((unsigned int (**)(char *, uint64_t, os_log_t))v83 + 6))(v171, 1LL, v84) == 1)
      {
LABEL_64:

        __break(1u);
        goto LABEL_65;
      }

      v172 = v220;
      ((void (*)(char *, char *, os_log_t))v170)(v220, v171, v84);
      uint64_t v173 = sub_10000D1E8( &qword_10007EEC8,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      uint64_t v174 = dispatch thunk of CustomStringConvertible.description.getter(v84, v173);
      unint64_t v176 = v175;
      (*((void (**)(char *, os_log_t))v83 + 1))(v172, v84);
      uint64_t v253 = sub_100046274(v174, v176, &v251);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v253, v254, v167 + 4);
      swift_bridgeObjectRelease(v176);

      *(_WORD *)(v167 + 12) = 2114;
      uint64_t v177 = v226;
      uint64_t v179 = CocoaError._nsError.getter(v178);
      uint64_t v180 = _swift_stdlib_bridgeErrorToNSError(v179);
      uint64_t v253 = v180;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v253, v254, v167 + 14);
      os_log_t v181 = v240;
      *int v240 = v180;
      os_log_t v182 = *(void (**)(char *, uint64_t))(v250 + 8);
      uint64_t v77 = v241;
      v182(v177, v241);
      os_log_t v183 = v245;
      _os_log_impl( (void *)&_mh_execute_header,  v245,  (os_log_type_t)v242,  "Store at %{public}s failed to migrate: %{public}@",  (uint8_t *)v167,  0x16u);
      uint64_t v184 = sub_10000D228(&qword_10007EE38);
      swift_arrayDestroy(v181, 1LL, v184);
      swift_slowDealloc(v181, -1LL, -1LL);
      uint64_t v185 = v244;
      swift_arrayDestroy(v244, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v185, -1LL, -1LL);
      swift_slowDealloc(v167, -1LL, -1LL);

      uint64_t v186 = ((uint64_t (*)(char *, uint64_t))v248)(v234, v247);
    }

    else
    {

      v187 = v161;
      os_log_t v182 = *(void (**)(char *, uint64_t))(v79 + 8);
      v182(v165, v77);

      uint64_t v186 = ((uint64_t (*)(char *, uint64_t))v84)(v187, v247);
    }

    v188 = v249;
    uint64_t v189 = CocoaError._nsError.getter(v186);
    swift_willThrow(v189);
    swift_errorRelease(v88);
    v182(v188, v77);
    goto LABEL_50;
  }

  uint64_t v109 = v251;
  if (*(void *)(v251 + 16) && (unint64_t v110 = sub_10005A2E0(0xD00000000000001ELL, 0x8000000100062600LL), (v111 & 1) != 0))
  {
    sub_10000D2C8(*(void *)(v109 + 56) + 32 * v110, (uint64_t)&aBlock);
  }

  else
  {
    __int128 aBlock = 0u;
    __int128 v256 = 0u;
  }

  swift_bridgeObjectRelease(v109);
  if (!*((void *)&v256 + 1))
  {
LABEL_34:
    sub_10000D5AC((uint64_t)&aBlock, &qword_10007EF00);
    goto LABEL_35;
  }

  uint64_t v114 = v251;
  uint64_t v88 = v252;
  if (qword_10007EB50 != -1) {
    swift_once(&qword_10007EB50, sub_100007D44);
  }
  uint64_t v244 = v114;
  char v115 = sub_100009980(v114, (uint64_t)v88, (void *)qword_100080790);
  uint64_t v116 = sub_10000D1E8(&qword_10007EE30, type metadata accessor for MainDriver, (uint64_t)&unk_100060428);
  uint64_t v117 = sub_10000D1E8(&qword_10007EE18, type metadata accessor for MainDriver, (uint64_t)&unk_100060458);
  if ((v115 & 1) != 0)
  {
    v118 = v218;
    static LoggedObject<>.logger.getter(v248, v116, v117);
    os_log_t v83 = v83;
    uint64_t v119 = swift_bridgeObjectRetain(v88);
    uint64_t v120 = (os_log_s *)Logger.logObject.getter(v119);
    int v121 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v120, (os_log_type_t)v121))
    {
      LODWORD(v238) = v121;
      os_log_t v242 = v120;
      uint64_t v122 = swift_slowAlloc(22LL, -1LL);
      id v237 = (char *)swift_slowAlloc(64LL, -1LL);
      *(void *)&__int128 aBlock = v237;
      *(_DWORD *)uint64_t v122 = 136446466;
      id v123 = -[os_log_s URL](v83, "URL");
      if (!v123)
      {
LABEL_65:
        swift_bridgeObjectRelease(v88);

        (*((void (**)(char *, uint64_t, uint64_t, uint64_t))v82 + 7))(v217, 1LL, 1LL, v236);
        __break(1u);
        goto LABEL_66;
      }

      int v124 = v123;
      uint64_t v241 = v77;
      BOOL v125 = v235;
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v123);

      v126 = (void (*)(char *, os_log_s *, uint64_t))*((void *)v82 + 4);
      uint64_t v127 = v217;
      id v128 = v125;
      uint64_t v129 = v236;
      v126(v217, v128, v236);
      (*((void (**)(char *, void, uint64_t, uint64_t))v82 + 7))(v127, 0LL, 1LL, v129);
      if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v82 + 6))(v127, 1LL, v129) == 1)
      {
LABEL_66:
        swift_bridgeObjectRelease(v88);

        __break(1u);
        goto LABEL_67;
      }

      os_log_t v130 = v82;
      uint64_t v233 = (uint64_t *)(v122 + 4);
      v131 = v215;
      v126(v215, (os_log_s *)v127, v129);
      uint64_t v132 = sub_10000D1E8( &qword_10007EEC8,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      uint64_t v133 = dispatch thunk of CustomStringConvertible.description.getter(v129, v132);
      unint64_t v135 = v134;
      (*((void (**)(char *, uint64_t))v130 + 1))(v131, v129);
      uint64_t v251 = sub_100046274(v133, v135, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v251, &v252, v233);
      swift_bridgeObjectRelease(v135);

      *(_WORD *)(v122 + 12) = 2082;
      swift_bridgeObjectRetain(v88);
      uint64_t v251 = sub_100046274(v244, (unint64_t)v88, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v251, &v252, v122 + 14);
      swift_bridgeObjectRelease_n(v88, 3LL);
      os_log_t v136 = v242;
      _os_log_impl( (void *)&_mh_execute_header,  v242,  (os_log_type_t)v238,  "Store at %{public}s requires migration from known version checksum: %{public}s",  (uint8_t *)v122,  0x16u);
      unint64_t v137 = v237;
      swift_arrayDestroy(v237, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v137, -1LL, -1LL);
      swift_slowDealloc(v122, -1LL, -1LL);

      os_log_t v84 = (os_log_t)v240[1];
      ((void (*)(char *, uint64_t))v84)(v218, v247);
      uint64_t v77 = v241;
      uint64_t v79 = v250;
      os_log_t v83 = v245;
      goto LABEL_41;
    }

    swift_bridgeObjectRelease_n(v88, 2LL);
    os_log_t v84 = (os_log_t)v240[1];
    ((void (*)(char *, uint64_t))v84)(v118, v247);
    goto LABEL_39;
  }

  id v190 = v219;
  static LoggedObject<>.logger.getter(v248, v116, v117);
  os_log_t v83 = v83;
  uint64_t v191 = swift_bridgeObjectRetain(v88);
  v192 = (void *)Logger.logObject.getter(v191);
  int v193 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled((os_log_t)v192, (os_log_type_t)v193))
  {

    swift_bridgeObjectRelease_n(v88, 2LL);
    uint64_t v210 = ((uint64_t (*)(char *, uint64_t))v240[1])(v190, v247);
    goto LABEL_58;
  }

  LODWORD(v245) = v193;
  uint64_t v248 = (os_log_s *)v192;
  uint64_t v194 = swift_slowAlloc(22LL, -1LL);
  v239 = (void (*)(char *, uint64_t, uint64_t, uint64_t))swift_slowAlloc(64LL, -1LL);
  *(void *)&__int128 aBlock = v239;
  *(_DWORD *)uint64_t v194 = 136446466;
  id v195 = -[os_log_s URL](v83, "URL");
  if (!v195)
  {
LABEL_67:
    swift_bridgeObjectRelease(v88);

    (*((void (**)(os_log_t, uint64_t, uint64_t, uint64_t))v82 + 7))(v84, 1LL, 1LL, v236);
    __break(1u);
    goto LABEL_68;
  }

  v196 = v195;
  uint64_t v241 = v77;
  v197 = v235;
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v195);

  v198 = (void (*)(os_log_t, os_log_s *, uint64_t))*((void *)v82 + 4);
  v199 = v197;
  uint64_t v200 = v236;
  v198(v84, v199, v236);
  (*((void (**)(os_log_t, void, uint64_t, uint64_t))v82 + 7))(v84, 0LL, 1LL, v200);
  if ((*((unsigned int (**)(os_log_t, uint64_t, uint64_t))v82 + 6))(v84, 1LL, v200) != 1)
  {
    os_log_t v201 = v84;
    os_log_t v202 = v82;
    uint64_t v203 = v216;
    v198((os_log_t)v216, v201, v200);
    uint64_t v204 = sub_10000D1E8( &qword_10007EEC8,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    uint64_t v205 = dispatch thunk of CustomStringConvertible.description.getter(v200, v204);
    unint64_t v207 = v206;
    (*((void (**)(char *, uint64_t))v202 + 1))(v203, v200);
    uint64_t v251 = sub_100046274(v205, v207, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v251, &v252, v194 + 4);
    swift_bridgeObjectRelease(v207);

    *(_WORD *)(v194 + 12) = 2082;
    swift_bridgeObjectRetain(v88);
    uint64_t v251 = sub_100046274(v244, (unint64_t)v88, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v251, &v252, v194 + 14);
    swift_bridgeObjectRelease_n(v88, 3LL);
    os_log_t v208 = v248;
    _os_log_impl( (void *)&_mh_execute_header,  v248,  (os_log_type_t)v245,  "Store at %{public}s will not be migrated as it has an unknown version checksum: %{public}s",  (uint8_t *)v194,  0x16u);
    v209 = v239;
    swift_arrayDestroy(v239, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v209, -1LL, -1LL);
    swift_slowDealloc(v194, -1LL, -1LL);

    uint64_t v210 = ((uint64_t (*)(char *, uint64_t))v240[1])(v219, v247);
    uint64_t v77 = v241;
    uint64_t v79 = v250;
LABEL_58:
    uint64_t v211 = v249;
    uint64_t v212 = CocoaError._nsError.getter(v210);
    swift_willThrow(v212);
    (*(void (**)(char *, uint64_t))(v79 + 8))(v211, v77);
LABEL_50:
    v54 = v246;
    goto LABEL_51;
  }

LABEL_68:
  swift_bridgeObjectRelease(v88);
  __break(1u);
}

uint64_t sub_100009980(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0LL;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1LL;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if ((result & 1) != 0) {
    return 1LL;
  }
  if (v3 == 1) {
    return 0LL;
  }
  uint64_t v9 = a3 + 7;
  for (uint64_t i = 1LL; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1LL)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1LL;
    }
    uint64_t result = 0LL;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_100009A44()
{
  uint64_t v1 = *v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v42 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v4 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for URL(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v7);
  BOOL v12 = (char *)&v39 - v11;
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v39 - v13;
  uint64_t v15 = *(uint64_t (**)(char *, char *, uint64_t))(v6 + 16);
  uint64_t result = v15(v12, (char *)v0 + OBJC_IVAR____TtC11homeeventsd10MainDriver_storageDirectory, v5);
  uint64_t v17 = *(uint64_t *)((char *)v0 + OBJC_IVAR____TtC11homeeventsd10MainDriver_localDatabaseName + 8);
  if (v17)
  {
    URL.appendingPathComponent(_:)( *(uint64_t *)((char *)v0 + OBJC_IVAR____TtC11homeeventsd10MainDriver_localDatabaseName),  v17);
    uint64_t v41 = *(void (**)(char *, uint64_t))(v6 + 8);
    v41(v12, v5);
    uint64_t v18 = sub_10000D1E8(&qword_10007EE30, type metadata accessor for MainDriver, (uint64_t)&unk_100060428);
    uint64_t v19 = sub_10000D1E8(&qword_10007EE18, type metadata accessor for MainDriver, (uint64_t)&unk_100060458);
    static LoggedObject<>.logger.getter(v1, v18, v19);
    uint64_t v20 = v15(v9, v14, v5);
    uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v24 = swift_slowAlloc(32LL, -1LL);
      uint64_t v40 = v2;
      uint64_t v25 = v24;
      uint64_t v44 = v24;
      *(_DWORD *)uint64_t v23 = 136446210;
      uint64_t v39 = v23 + 4;
      uint64_t v26 = sub_10000D1E8( &qword_10007EEC8,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter(v5, v26);
      unint64_t v29 = v28;
      uint64_t v43 = sub_100046274(v27, v28, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v39);
      swift_bridgeObjectRelease(v29);
      uint64_t v30 = v9;
      uint64_t v31 = v41;
      v41(v30, v5);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Computed storeURL: %{public}s", v23, 0xCu);
      swift_arrayDestroy(v25, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1LL, -1LL);
      swift_slowDealloc(v23, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v42 + 8))(v4, v40);
    }

    else
    {
      uint64_t v32 = v9;
      uint64_t v31 = v41;
      v41(v32, v5);

      (*(void (**)(char *, uint64_t))(v42 + 8))(v4, v2);
    }

    id v33 = objc_allocWithZone(&OBJC_CLASS___NSPersistentStoreDescription);
    URL._bridgeToObjectiveC()(v34);
    uint64_t v36 = v35;
    id v37 = [v33 initWithURL:v35];

    sub_10000D5E8(0LL, (unint64_t *)&qword_10007EF30, &OBJC_CLASS___NSNumber_ptr);
    Class isa = NSNumber.init(integerLiteral:)(2LL).super.super.isa;
    [v37 setOption:isa forKey:NSPersistentStoreConnectionPoolMaxSizeKey];

    v31(v14, v5);
    return (uint64_t)v37;
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_100009DF4(void *a1, void *a2)
{
  id v76 = a1;
  uint64_t v4 = *v2;
  uint64_t v5 = type metadata accessor for NSPersistentStore.StoreType(0LL);
  uint64_t v79 = *(void *)(v5 - 8);
  uint64_t v80 = v5;
  __chkstk_darwin(v5);
  uint64_t v78 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v82 = type metadata accessor for Logger(0LL);
  uint64_t v74 = *(void *)(v82 - 8);
  uint64_t v7 = __chkstk_darwin(v82);
  id v73 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v67 - v9;
  uint64_t v11 = sub_10000D228(&qword_10007EEB8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for URL(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v67 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v67 - v20;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v67 - v22;
  id v75 = a2;
  id v24 = [a2 URL];
  if (!v24)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v13, 1LL, 1LL, v14);
    goto LABEL_14;
  }

  uint64_t v25 = v24;
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v24);

  uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
  v26(v13, v21, v14);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v13, 0LL, 1LL, v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14) == 1)
  {
LABEL_14:
    sub_10000D5AC((uint64_t)v13, &qword_10007EEB8);
LABEL_16:
    uint64_t v84 = 0LL;
    unint64_t v85 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(49LL);
    swift_bridgeObjectRelease(v85);
    uint64_t v84 = 0xD00000000000002FLL;
    unint64_t v85 = 0x80000001000625D0LL;
    id v62 = [v76 persistentStoreDescriptions];
    uint64_t v63 = sub_10000D5E8(0LL, &qword_10007EEE8, &OBJC_CLASS___NSPersistentStoreDescription_ptr);
    uint64_t v64 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v62, v63);

    v65._countAndFlagsBits = Array.description.getter(v64, v63);
    object = v65._object;
    String.append(_:)(v65);
    swift_bridgeObjectRelease(object);
    swift_bridgeObjectRelease(v64);
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v84,  v85,  "homeeventsd/MainDriver.swift",  28LL,  2LL,  485LL,  0);
    __break(1u);
    return;
  }

  uint64_t v27 = ((uint64_t (*)(char *, char *, uint64_t))v26)(v23, v13, v14);
  if ((URL.isFileURL.getter(v27) & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v23, v14);
    goto LABEL_16;
  }

  uint64_t v28 = sub_10000D1E8(&qword_10007EE30, type metadata accessor for MainDriver, (uint64_t)&unk_100060428);
  uint64_t v29 = sub_10000D1E8(&qword_10007EE18, type metadata accessor for MainDriver, (uint64_t)&unk_100060458);
  uint64_t v71 = v28;
  uint64_t v70 = v29;
  uint64_t v72 = v4;
  static LoggedObject<>.logger.getter(v4, v28, v29);
  uint64_t v30 = *(uint64_t (**)(char *, char *, uint64_t))(v15 + 16);
  uint64_t v81 = v23;
  uint64_t v31 = v30(v18, v23, v14);
  uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
  os_log_type_t v33 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = swift_slowAlloc(12LL, -1LL);
    uint64_t v68 = v18;
    uint64_t v35 = (uint8_t *)v34;
    uint64_t v36 = swift_slowAlloc(32LL, -1LL);
    uint64_t v84 = v36;
    *(_DWORD *)uint64_t v35 = 136446210;
    int v69 = v35 + 4;
    uint64_t v37 = sub_10000D1E8( &qword_10007EEC8,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter(v14, v37);
    unint64_t v40 = v39;
    uint64_t v86 = sub_100046274(v38, v39, &v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v69);
    swift_bridgeObjectRelease(v40);
    uint64_t v41 = *(void (**)(char *, uint64_t))(v15 + 8);
    v41(v68, v14);
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Removing persistent store at %{public}s", v35, 0xCu);
    swift_arrayDestroy(v36, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1LL, -1LL);
    swift_slowDealloc(v35, -1LL, -1LL);
  }

  else
  {
    uint64_t v41 = *(void (**)(char *, uint64_t))(v15 + 8);
    v41(v18, v14);
  }

  uint64_t v42 = *(void (**)(char *, uint64_t))(v74 + 8);
  v42(v10, v82);
  id v43 = [v76 persistentStoreCoordinator];
  id v44 = [v75 type];
  uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
  uint64_t v47 = v46;

  uint64_t v48 = v47;
  uint64_t v49 = v78;
  NSPersistentStore.StoreType.init(rawValue:)(v45, v48);
  uint64_t v50 = sub_10000D228(&qword_10007EEF0);
  uint64_t inited = swift_initStackObject(v50, v83);
  *(_OWORD *)(inited + 16) = xmmword_100060320;
  uint64_t v84 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSPersistentStoreForceDestroyOption);
  unint64_t v85 = v52;
  AnyHashable.init<A>(_:)(&v84, &type metadata for String, &protocol witness table for String);
  *(void *)(inited + 96) = &type metadata for Bool;
  *(_BYTE *)(inited + 72) = 1;
  unint64_t v53 = sub_100058940(inited);
  v54 = v81;
  uint64_t v55 = v77;
  NSPersistentStoreCoordinator.destroyPersistentStore(at:type:options:)(v81, v49, v53);
  if (v55)
  {
    swift_bridgeObjectRelease(v53);

    (*(void (**)(char *, uint64_t))(v79 + 8))(v49, v80);
    uint64_t v56 = v54;
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v79 + 8))(v49, v80);
    swift_bridgeObjectRelease(v53);

    id v57 = [(id)objc_opt_self(NSFileManager) defaultManager];
    sub_1000485A8();

    uint64_t v58 = static LoggedObject<>.logger.getter(v72, v71, v70);
    uint64_t v59 = (os_log_s *)Logger.logObject.getter(v58);
    os_log_type_t v60 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v59, v60))
    {
      uint64_t v61 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v61 = 0;
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "Successfully removed persistent store", v61, 2u);
      swift_slowDealloc(v61, -1LL, -1LL);
    }

    v42(v73, v82);
    uint64_t v56 = v81;
  }

  v41(v56, v14);
}

uint64_t sub_10000A598()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = type metadata accessor for CocoaError.Code(0LL);
  uint64_t v23 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_10000D1E8(&qword_10007EE30, type metadata accessor for MainDriver, (uint64_t)&unk_100060428);
  uint64_t v11 = sub_10000D1E8(&qword_10007EE18, type metadata accessor for MainDriver, (uint64_t)&unk_100060458);
  uint64_t v12 = static LoggedObject<>.logger.getter(v2, v10, v11);
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Reset requested, setting reset request flag", v15, 2u);
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v16 = sub_10000D408( (void *)((char *)v1 + OBJC_IVAR____TtC11homeeventsd10MainDriver_resetFlag),  *(void *)((char *)v1 + OBJC_IVAR____TtC11homeeventsd10MainDriver_resetFlag + 24));
  uint64_t v17 = v24;
  uint64_t result = Data.write(to:options:)(v16, 0LL, 0LL, 0xC000000000000000LL);
  if (v17)
  {
    uint64_t v19 = swift_errorRetain(v17);
    static CocoaError.fileWriteFileExists.getter(v19);
    uint64_t v20 = sub_10000D1E8( (unint64_t *)&qword_10007EE80,  (uint64_t (*)(uint64_t))&type metadata accessor for CocoaError.Code,  (uint64_t)&protocol conformance descriptor for CocoaError.Code);
    char v21 = static _ErrorCodeProtocol.~= infix(_:_:)(v5, v17, v3, v20);
    swift_errorRelease(v17);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v5, v3);
    if ((v21 & 1) != 0) {
      return swift_errorRelease(v17);
    }
  }

  return result;
}

void sub_10000A7D0()
{
  uint64_t v1 = *v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_10000D1E8(&qword_10007EE30, type metadata accessor for MainDriver, (uint64_t)&unk_100060428);
  uint64_t v7 = sub_10000D1E8(&qword_10007EE18, type metadata accessor for MainDriver, (uint64_t)&unk_100060458);
  uint64_t v8 = static LoggedObject<>.logger.getter(v1, v6, v7);
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Exiting", v11, 2u);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  exit(0);
}

id sub_10000A8F8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v18 - v6;
  uint64_t v8 = sub_10000D1E8(&qword_10007EE30, type metadata accessor for MainDriver, (uint64_t)&unk_100060428);
  uint64_t v9 = sub_10000D1E8(&qword_10007EE18, type metadata accessor for MainDriver, (uint64_t)&unk_100060458);
  uint64_t v10 = static LoggedObject<>.logger.getter(v2, v8, v9);
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    v18[1] = v9;
    uint64_t v14 = v3;
    uint64_t v15 = v13;
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Clearing reset request flag", v13, 2u);
    uint64_t v16 = v15;
    uint64_t v3 = v14;
    swift_slowDealloc(v16, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  sub_10000D408( (void *)((char *)v1 + OBJC_IVAR____TtC11homeeventsd10MainDriver_resetFlag),  *(void *)((char *)v1 + OBJC_IVAR____TtC11homeeventsd10MainDriver_resetFlag + 24));
  return sub_100027190();
}

id sub_10000AC34()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v49 - v8;
  uint64_t v10 = sub_10000D1E8(&qword_10007EE30, type metadata accessor for MainDriver, (uint64_t)&unk_100060428);
  uint64_t v52 = sub_10000D1E8(&qword_10007EE18, type metadata accessor for MainDriver, (uint64_t)&unk_100060458);
  unint64_t v53 = (void *)v10;
  static LoggedObject<>.logger.getter(v2, v10, v52);
  uint64_t v11 = swift_retain_n(v1, 2LL);
  os_log_type_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.default.getter();
  BOOL v14 = os_log_type_enabled(v12, v13);
  p_types = &stru_10007DFF8.types;
  v54 = v2;
  if (v14)
  {
    uint64_t v50 = v7;
    uint64_t v51 = v3;
    uint64_t v16 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v17 = (void *)swift_slowAlloc(32LL, -1LL);
    id v57 = v17;
    *(_DWORD *)uint64_t v16 = 136315138;
    if ((swift_task_isCurrentExecutor(v1, 0LL) & 1) == 0) {
      swift_task_reportUnexpectedExecutor("homeeventsd/MainDriver.swift", 28LL, 1LL, 545LL, v1, 0LL);
    }
    uint64_t v18 = type metadata accessor for URL(0LL);
    uint64_t v19 = sub_10000D1E8( &qword_10007EEC8,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter(v18, v19);
    unint64_t v22 = v21;
    uint64_t v55 = sub_100046274(v20, v21, (uint64_t *)&v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v16 + 4);
    unint64_t v23 = v22;
    p_types = (char **)(&stru_10007DFF8 + 8);
    swift_bridgeObjectRelease(v23);
    swift_release_n(v1, 2LL);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Removing all files in storage directory '%s'", v16, 0xCu);
    swift_arrayDestroy(v17, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1LL, -1LL);
    swift_slowDealloc(v16, -1LL, -1LL);

    uint64_t v24 = *(void (**)(char *, uint64_t))(v4 + 8);
    uint64_t v3 = v51;
    v24(v9, v51);
    uint64_t v7 = v50;
  }

  else
  {
    swift_release_n(v1, 2LL);

    uint64_t v24 = *(void (**)(char *, uint64_t))(v4 + 8);
    v24(v9, v3);
  }

  id v25 = [(id)objc_opt_self(NSFileManager) defaultManager];
  URL._bridgeToObjectiveC()((NSURL *)p_types[375]);
  uint64_t v27 = v26;
  id v57 = 0LL;
  unsigned int v28 = [v25 removeItemAtURL:v26 error:&v57];

  if (v28) {
    return v57;
  }
  uint64_t v51 = (uint64_t)v57;
  id v30 = v57;
  uint64_t v31 = _convertNSErrorToError(_:)(v51);

  swift_willThrow(v32);
  static LoggedObject<>.logger.getter(v54, v53, v52);
  swift_retain(v1);
  swift_errorRetain(v31);
  swift_retain(v1);
  uint64_t v33 = swift_errorRetain(v31);
  uint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
  uint64_t v35 = v7;
  os_log_type_t v36 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v34, v36))
  {
    uint64_t v50 = v35;
    uint64_t v51 = v3;
    uint64_t v37 = swift_slowAlloc(22LL, -1LL);
    unint64_t v53 = (void *)swift_slowAlloc(8LL, -1LL);
    v54 = (void *)swift_slowAlloc(32LL, -1LL);
    id v57 = v54;
    *(_DWORD *)uint64_t v37 = 136315394;
    if ((swift_task_isCurrentExecutor(v1, 0LL) & 1) == 0) {
      swift_task_reportUnexpectedExecutor("homeeventsd/MainDriver.swift", 28LL, 1LL, 549LL, v1, 0LL);
    }
    uint64_t v38 = type metadata accessor for URL(0LL);
    uint64_t v39 = sub_10000D1E8( &qword_10007EEC8,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    uint64_t v40 = dispatch thunk of CustomStringConvertible.description.getter(v38, v39);
    unint64_t v42 = v41;
    uint64_t v55 = sub_100046274(v40, v41, (uint64_t *)&v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v37 + 4);
    swift_bridgeObjectRelease(v42);
    swift_release_n(v1, 2LL);
    *(_WORD *)(v37 + 12) = 2114;
    swift_errorRetain(v31);
    uint64_t v43 = _swift_stdlib_bridgeErrorToNSError(v31);
    uint64_t v55 = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v37 + 14);
    id v44 = v53;
    *unint64_t v53 = v43;
    swift_errorRelease(v31);
    swift_errorRelease(v31);
    _os_log_impl( (void *)&_mh_execute_header,  v34,  v36,  "Failed to remove storage directory '%s': %{public}@",  (uint8_t *)v37,  0x16u);
    uint64_t v45 = sub_10000D228(&qword_10007EE38);
    swift_arrayDestroy(v44, 1LL, v45);
    swift_slowDealloc(v44, -1LL, -1LL);
    uint64_t v46 = v54;
    swift_arrayDestroy(v54, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v46, -1LL, -1LL);
    swift_slowDealloc(v37, -1LL, -1LL);

    swift_errorRelease(v31);
    uint64_t v47 = v50;
    uint64_t v48 = v51;
  }

  else
  {
    swift_errorRelease(v31);
    swift_release_n(v1, 2LL);
    swift_errorRelease(v31);
    swift_errorRelease(v31);

    uint64_t v47 = v35;
    uint64_t v48 = v3;
  }

  return (id)((uint64_t (*)(char *, uint64_t))v24)(v47, v48);
}

void sub_10000B240(uint64_t a1, void *a2, void *a3)
{
  if (a3)
  {
    uint64_t v9 = a3;
    id v5 = a3;
    uint64_t v6 = sub_10000D228(&qword_10007EE50);
    CheckedContinuation.resume(throwing:)(&v9, v6);
  }

  else
  {
    uint64_t v9 = a2;
    id v7 = a2;
    uint64_t v8 = sub_10000D228(&qword_10007EE50);
    CheckedContinuation.resume(returning:)(&v9, v8);
  }

void sub_10000B2D8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = *(void (**)(id, void *))(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  swift_retain(v5);
  id v8 = a2;
  id v7 = a3;
  v6(v8, a3);
  swift_release(v5);
}

id sub_10000B34C()
{
  return *v0;
}

uint64_t sub_10000B354@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

void *sub_10000B35C@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_10000B36C(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_10000B378(uint64_t a1)
{
  uint64_t v2 = sub_10000D1E8( &qword_10007EFC8,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_10006069C);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10000B3B8(uint64_t a1)
{
  uint64_t v2 = sub_10000D1E8( &qword_10007EFC8,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_10006069C);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_10000B3F8(uint64_t a1)
{
  uint64_t v2 = sub_10000D1E8( &qword_10007EFF8,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_100060948);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_10000B438()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(CKErrorDomain);
}

uint64_t sub_10000B448(uint64_t a1)
{
  uint64_t v2 = sub_10000D1E8( &qword_10007EFF8,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_100060948);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_10000B488(uint64_t a1)
{
  uint64_t v2 = sub_10000D1E8( &qword_10007EFF8,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_100060948);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_10000B4C8(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D1E8( &qword_10007EFF8,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_100060948);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_10000B52C()
{
  id v1 = *v0;
  uint64_t v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t sub_10000B560(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D1E8( &qword_10007EFF8,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_100060948);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_10000B5B4()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(BGSystemTaskSchedulerErrorDomain);
}

uint64_t sub_10000B5C4(uint64_t a1)
{
  uint64_t v2 = sub_10000D1E8( &qword_10007EF80,  (uint64_t (*)(uint64_t))type metadata accessor for BGSystemTaskSchedulerError,  (uint64_t)&unk_1000607C8);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_10000B604(uint64_t a1)
{
  uint64_t v2 = sub_10000D1E8( &qword_10007EF80,  (uint64_t (*)(uint64_t))type metadata accessor for BGSystemTaskSchedulerError,  (uint64_t)&unk_1000607C8);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_10000B644(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D1E8( &qword_10007EF80,  (uint64_t (*)(uint64_t))type metadata accessor for BGSystemTaskSchedulerError,  (uint64_t)&unk_1000607C8);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_10000B6A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D1E8( &qword_10007EF80,  (uint64_t (*)(uint64_t))type metadata accessor for BGSystemTaskSchedulerError,  (uint64_t)&unk_1000607C8);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

Swift::Int sub_10000B6F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v7[9] = *v3;
  Hasher.init(_seed:)(v7);
  dispatch thunk of Hashable.hash(into:)(v7, a2, a3);
  return Hasher._finalize()();
}

BOOL sub_10000B754(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_10000B768(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000D1E8( &qword_10007EFF8,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_100060948);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_10000B7C0(uint64_t a1)
{
  uint64_t v2 = sub_10000D1E8( &qword_10007EF88,  (uint64_t (*)(uint64_t))type metadata accessor for BGSystemTaskSchedulerError,  (uint64_t)&unk_100060908);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10000B800(uint64_t a1)
{
  uint64_t v2 = sub_10000D1E8( &qword_10007EF88,  (uint64_t (*)(uint64_t))type metadata accessor for BGSystemTaskSchedulerError,  (uint64_t)&unk_100060908);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_10000B840(uint64_t a1)
{
  uint64_t v2 = sub_10000D1E8( &qword_10007EF80,  (uint64_t (*)(uint64_t))type metadata accessor for BGSystemTaskSchedulerError,  (uint64_t)&unk_1000607C8);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_10000B880(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000D1E8( &qword_10007EF80,  (uint64_t (*)(uint64_t))type metadata accessor for BGSystemTaskSchedulerError,  (uint64_t)&unk_1000607C8);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_10000B8D8(void *a1)
{
  uint64_t v2 = type metadata accessor for URL.DirectoryHint(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_10000D228(&qword_10007EEB8);
  __chkstk_darwin(v6);
  id v8 = (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for URL(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  os_log_type_t v12 = (char *)aBlock - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_10000D228(&qword_10007EEE0);
  uint64_t v14 = swift_allocObject(v13, 40LL, 7LL);
  *(_OWORD *)(v14 + 16) = xmmword_100060330;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1LL, 1LL, v9);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))( v5,  enum case for URL.DirectoryHint.inferFromPath(_:),  v2);
  URL.init(filePath:directoryHint:relativeTo:)(0x6C756E2F7665642FLL, 0xE90000000000006CLL, v5, v8);
  id v15 = objc_allocWithZone(&OBJC_CLASS___NSPersistentStoreDescription);
  URL._bridgeToObjectiveC()(v16);
  uint64_t v18 = v17;
  id v19 = [v15 initWithURL:v17];

  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  id v20 = [v19 setType:NSInMemoryStoreType];
  *(void *)(v14 + 32) = v19;
  aBlock[0] = v14;
  specialized Array._endMutation()(v20);
  uint64_t v21 = aBlock[0];
  sub_10000D5E8(0LL, &qword_10007EEE8, &OBJC_CLASS___NSPersistentStoreDescription_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v21);
  [a1 setPersistentStoreDescriptions:isa];

  uint64_t v23 = swift_allocObject(&unk_1000757E0, 24LL, 7LL);
  *(void *)(v23 + 16) = 0LL;
  aBlock[4] = sub_10000D544;
  uint64_t v29 = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10000B2D8;
  aBlock[3] = &unk_1000757F8;
  uint64_t v24 = _Block_copy(aBlock);
  uint64_t v25 = v29;
  swift_retain(v23);
  swift_release(v25);
  [a1 loadPersistentStoresWithCompletionHandler:v24];
  _Block_release(v24);
  swift_beginAccess(v23 + 16, aBlock, 0LL, 0LL);
  if (*(void *)(v23 + 16))
  {
    uint64_t v26 = swift_errorRetain(*(void *)(v23 + 16));
    swift_willThrow(v26);
  }

  return swift_release(v23);
}

NSStagedMigrationManager sub_10000BBE8()
{
  if (qword_10007EB50 != -1) {
    swift_once(&qword_10007EB50, sub_100007D44);
  }
  uint64_t v0 = qword_100080790;
  uint64_t v1 = *(void *)(qword_100080790 + 16);
  if (v1)
  {
    swift_bridgeObjectRetain(qword_100080790);
    specialized ContiguousArray.reserveCapacity(_:)(v1);
    sub_10000D5E8(0LL, &qword_10007EF10, &OBJC_CLASS___NSLightweightMigrationStage_ptr);
    uint64_t v2 = (uint64_t *)(v0 + 40);
    do
    {
      uint64_t v4 = *(v2 - 1);
      uint64_t v3 = *v2;
      uint64_t v5 = sub_10000D228(&qword_10007EF18);
      v6._rawValue = (void *)swift_allocObject(v5, 48LL, 7LL);
      *((_OWORD *)v6._rawValue + 1) = xmmword_100060320;
      *((void *)v6._rawValue + 4) = v4;
      *((void *)v6._rawValue + 5) = v3;
      swift_bridgeObjectRetain(v3);
      Class isa = NSLightweightMigrationStage.init(_:)(v6).super.super.isa;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v8 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v8);
      uint64_t v9 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v8, isa);
      specialized ContiguousArray._endMutation()(v9);
      v2 += 2;
      --v1;
    }

    while (v1);
    swift_bridgeObjectRelease(v0);
  }

  if ((unint64_t)_swiftEmptyArrayStorage >> 62)
  {
    else {
      uint64_t v13 = (void *)((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL);
    }
    uint64_t v14 = sub_10000D5E8(0LL, &qword_10007EF20, &OBJC_CLASS___NSMigrationStage_ptr);
    swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
    uint64_t v11 = (void *)_bridgeCocoaArray<A>(_:)(v13, v14);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  }

  else
  {
    uint64_t v10 = swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v10);
    sub_10000D5E8(0LL, &qword_10007EF20, &OBJC_CLASS___NSMigrationStage_ptr);
    uint64_t v11 = _swiftEmptyArrayStorage;
  }

  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  sub_10000D5E8(0LL, &qword_10007EF28, &OBJC_CLASS___NSStagedMigrationManager_ptr);
  return NSStagedMigrationManager.init(_:)((Swift::OpaquePointer)v11);
}

uint64_t sub_10000BDE4()
{
  uint64_t v1 = sub_10000D228(&qword_10007EE50);
  v0[19] = v1;
  uint64_t v2 = *(void *)(v1 - 8);
  v0[20] = v2;
  v0[21] = swift_task_alloc((*(void *)(v2 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10000BE44, 0LL, 0LL);
}

id sub_10000BE44()
{
  id result = [(id)objc_opt_self(ACAccountStore) defaultStore];
  v0[22] = result;
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = v0 + 2;
    uint64_t v5 = v0[20];
    uint64_t v4 = v0[21];
    uint64_t v6 = v0[19];
    v0[7] = v0 + 18;
    v0[2] = v0;
    v0[3] = sub_10000BF98;
    uint64_t v7 = swift_continuation_init(v0 + 2, 1LL);
    v0[17] = v6;
    uint64_t v8 = sub_10000D27C(v0 + 14);
    uint64_t v9 = sub_10000D228(&qword_10007EE58);
    uint64_t v10 = sub_10000D228((uint64_t *)&unk_10007EC20);
    CheckedContinuation.init(continuation:function:)( v7,  0xD000000000000026LL,  0x80000001000624F0LL,  v9,  v10,  &protocol self-conformance witness table for Error);
    (*(void (**)(void *, uint64_t, uint64_t))(v5 + 32))(v8, v4, v6);
    v0[10] = _NSConcreteStackBlock;
    uint64_t v11 = v0 + 10;
    v11[1] = 1107296256LL;
    v11[2] = sub_10000B240;
    v11[3] = &unk_100075780;
    objc_msgSend(v2, "aa_primaryAppleAccountWithCompletion:", v11);
    return (id)swift_continuation_await(v3);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10000BF98()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 184LL) = v1;
  if (v1) {
    uint64_t v2 = sub_10000C050;
  }
  else {
    uint64_t v2 = sub_10000BFF8;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_10000BFF8()
{
  uint64_t v1 = *(void **)(v0 + 144);
  if (v1) {

  }
  uint64_t v2 = *(void *)(v0 + 168);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(BOOL))(v0 + 8))(v1 != 0LL);
}

uint64_t sub_10000C050()
{
  uint64_t v1 = *(void **)(v0 + 176);
  uint64_t v2 = *(void *)(v0 + 168);
  swift_willThrow();

  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))(0LL);
}

uint64_t sub_10000C0A0()
{
  v1[4] = v0;
  v1[5] = *v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  v1[6] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[7] = v3;
  unint64_t v4 = (*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[8] = swift_task_alloc(v4);
  v1[9] = swift_task_alloc(v4);
  v1[10] = swift_task_alloc(v4);
  v1[11] = swift_task_alloc(v4);
  uint64_t v7 = (uint64_t (__cdecl *)())((char *)&dword_10007EE48 + dword_10007EE48);
  uint64_t v5 = (void *)swift_task_alloc(unk_10007EE4C);
  v1[12] = v5;
  void *v5 = v1;
  v5[1] = sub_10000C154;
  return v7();
}

uint64_t sub_10000C154(char a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 96);
  *(void *)(*v2 + 104) = v1;
  swift_task_dealloc(v5);
  uint64_t v6 = *(void *)(v4 + 32);
  if (v1)
  {
    uint64_t v7 = sub_10000C4B0;
  }

  else
  {
    *(_BYTE *)(v4 + 176) = a1 & 1;
    uint64_t v7 = sub_10000C1CC;
  }

  return swift_task_switch(v7, v6, 0LL);
}

uint64_t sub_10000C1CC()
{
  uint64_t v1 = *(void *)(v0 + 32);
  if (*(_BYTE *)(v0 + 176) == 1)
  {
    *(_BYTE *)(v1 + OBJC_IVAR____TtC11homeeventsd10MainDriver_isCloudKitLoggedIn) = 1;
LABEL_10:
    uint64_t v30 = *(void *)(v0 + 80);
    uint64_t v32 = *(void *)(v0 + 64);
    uint64_t v31 = *(void *)(v0 + 72);
    swift_task_dealloc(*(void *)(v0 + 88));
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  *(_BYTE *)(v1 + OBJC_IVAR____TtC11homeeventsd10MainDriver_isCloudKitLoggedIn) = 0;
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR____TtC11homeeventsd10MainDriver_localStorageProperties);
  *(void *)(v0 + 112) = v2;
  uint64_t v3 = *(void *)(v0 + 40);
  if (!v2)
  {
    uint64_t v21 = sub_10000D1E8(&qword_10007EE30, type metadata accessor for MainDriver, (uint64_t)&unk_100060428);
    uint64_t v22 = sub_10000D1E8(&qword_10007EE18, type metadata accessor for MainDriver, (uint64_t)&unk_100060458);
    uint64_t v23 = static LoggedObject<>.logger.getter(v3, v21, v22);
    uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  v25,  "We're no longer logged in and we also don't have a persistent container",  v26,  2u);
      swift_slowDealloc(v26, -1LL, -1LL);
    }

    uint64_t v27 = *(void *)(v0 + 72);
    uint64_t v28 = *(void *)(v0 + 48);
    uint64_t v29 = *(void *)(v0 + 56);

    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v27, v28);
    goto LABEL_10;
  }

  uint64_t v4 = sub_10000D1E8(&qword_10007EE30, type metadata accessor for MainDriver, (uint64_t)&unk_100060428);
  *(void *)(v0 + 120) = v4;
  uint64_t v5 = sub_10000D1E8(&qword_10007EE18, type metadata accessor for MainDriver, (uint64_t)&unk_100060458);
  *(void *)(v0 + 128) = v5;
  id v6 = v2;
  uint64_t v7 = static LoggedObject<>.logger.getter(v3, v4, v5);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "Primary apple account is no longer logged in, clearing the local database",  v10,  2u);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  uint64_t v11 = *(void *)(v0 + 88);
  uint64_t v12 = *(void *)(v0 + 48);
  uint64_t v13 = *(void *)(v0 + 56);
  uint64_t v14 = *(void *)(v0 + 32);

  id v15 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  *(void *)(v0 + 136) = v15;
  v15(v11, v12);
  uint64_t v16 = *(void *)(v14 + OBJC_IVAR____TtC11homeeventsd10MainDriver_maxCloudKitRecordsPerOperation);
  uint64_t v17 = type metadata accessor for CoreDataDatabase();
  uint64_t v18 = swift_allocObject(v17, 33LL, 7LL);
  *(void *)(v0 + 144) = v18;
  *(void *)(v18 + 16) = [v6 newBackgroundContext];
  *(void *)(v18 + 24) = v16;
  *(_BYTE *)(v18 + 32) = 0;
  id v19 = (void *)swift_task_alloc(dword_10008059C);
  *(void *)(v0 + 152) = v19;
  *id v19 = v0;
  v19[1] = sub_10000C6B8;
  return sub_100052BA4();
}

uint64_t sub_10000C4B0()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = sub_10000D1E8(&qword_10007EE30, type metadata accessor for MainDriver, (uint64_t)&unk_100060428);
  uint64_t v4 = sub_10000D1E8(&qword_10007EE18, type metadata accessor for MainDriver, (uint64_t)&unk_100060458);
  static LoggedObject<>.logger.getter(v2, v3, v4);
  swift_errorRetain(v1);
  uint64_t v5 = swift_errorRetain(v1);
  id v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    os_log_type_t v9 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v8 = 138543362;
    swift_errorRetain(v1);
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(void *)(v0 + 16) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4);
    uint64_t *v9 = v10;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "Unable to retrieve primary apple account, not doing anything: %{public}@",  v8,  0xCu);
    uint64_t v11 = sub_10000D228(&qword_10007EE38);
    swift_arrayDestroy(v9, 1LL, v11);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);

    swift_errorRelease(v1);
  }

  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  (*(void (**)(void, void))(*(void *)(v0 + 56) + 8LL))(*(void *)(v0 + 64), *(void *)(v0 + 48));
  uint64_t v12 = *(void *)(v0 + 80);
  uint64_t v14 = *(void *)(v0 + 64);
  uint64_t v13 = *(void *)(v0 + 72);
  swift_task_dealloc(*(void *)(v0 + 88));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000C6B8(uint64_t a1)
{
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 152LL);
  v3[20] = a1;
  v3[21] = v1;
  swift_task_dealloc(v4);
  if (v1) {
    uint64_t v5 = sub_10000C868;
  }
  else {
    uint64_t v5 = sub_10000C724;
  }
  return swift_task_switch(v5, v3[4], 0LL);
}

uint64_t sub_10000C724()
{
  uint64_t v1 = static LoggedObject<>.logger.getter();
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = *(void *)(v0 + 160);
    uint64_t v5 = *(void *)(v0 + 144);
    id v6 = *(void **)(v0 + 112);
    os_log_type_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)os_log_type_t v7 = 134217984;
    *(void *)(v0 + 24) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v7 + 4);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Deleted %ld events from the local database", v7, 0xCu);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {
    uint64_t v5 = *(void *)(v0 + 144);
    id v6 = *(void **)(v0 + 112);
  }

  swift_release(v5);

  (*(void (**)(void, void))(v0 + 136))(*(void *)(v0 + 80), *(void *)(v0 + 48));
  uint64_t v8 = *(void *)(v0 + 80);
  uint64_t v10 = *(void *)(v0 + 64);
  uint64_t v9 = *(void *)(v0 + 72);
  swift_task_dealloc(*(void *)(v0 + 88));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000C868()
{
  uint64_t v1 = *(void **)(v0 + 112);
  swift_release(*(void *)(v0 + 144));

  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = sub_10000D1E8(&qword_10007EE30, type metadata accessor for MainDriver, (uint64_t)&unk_100060428);
  uint64_t v5 = sub_10000D1E8(&qword_10007EE18, type metadata accessor for MainDriver, (uint64_t)&unk_100060458);
  static LoggedObject<>.logger.getter(v3, v4, v5);
  swift_errorRetain(v2);
  uint64_t v6 = swift_errorRetain(v2);
  os_log_type_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v10 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v9 = 138543362;
    swift_errorRetain(v2);
    uint64_t v11 = _swift_stdlib_bridgeErrorToNSError(v2);
    *(void *)(v0 + 16) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v9 + 4);
    *uint64_t v10 = v11;
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "Unable to retrieve primary apple account, not doing anything: %{public}@",  v9,  0xCu);
    uint64_t v12 = sub_10000D228(&qword_10007EE38);
    swift_arrayDestroy(v10, 1LL, v12);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);

    swift_errorRelease(v2);
  }

  else
  {
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    swift_errorRelease(v2);
  }

  (*(void (**)(void, void))(*(void *)(v0 + 56) + 8LL))(*(void *)(v0 + 64), *(void *)(v0 + 48));
  uint64_t v13 = *(void *)(v0 + 80);
  uint64_t v15 = *(void *)(v0 + 64);
  uint64_t v14 = *(void *)(v0 + 72);
  swift_task_dealloc(*(void *)(v0 + 88));
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000CA80()
{
  v1[6] = v0;
  v1[7] = *v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  v1[8] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[9] = v3;
  unint64_t v4 = (*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[10] = swift_task_alloc(v4);
  v1[11] = swift_task_alloc(v4);
  v1[12] = swift_task_alloc(v4);
  v1[13] = swift_task_alloc(v4);
  return swift_task_switch(sub_10000CB10, v0, 0LL);
}

uint64_t sub_10000CB10()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = sub_10000D1E8(&qword_10007EE30, type metadata accessor for MainDriver, (uint64_t)&unk_100060428);
  v0[14] = v2;
  uint64_t v3 = sub_10000D1E8(&qword_10007EE18, type metadata accessor for MainDriver, (uint64_t)&unk_100060458);
  v0[15] = v3;
  uint64_t v4 = static LoggedObject<>.logger.getter(v1, v2, v3);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    os_log_type_t v7 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)os_log_type_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Handling CloudKit account notification", v7, 2u);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  uint64_t v8 = v0[13];
  uint64_t v9 = v0[8];
  uint64_t v10 = v0[9];
  uint64_t v11 = v0[6];

  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  v0[16] = v12;
  v12(v8, v9);
  uint64_t v13 = *(void *)(v11 + OBJC_IVAR____TtC11homeeventsd10MainDriver_cloudKitContainer);
  uint64_t v16 = (uint64_t (*)(uint64_t))((char *)&dword_1000802D8 + dword_1000802D8);
  uint64_t v14 = (void *)swift_task_alloc(unk_1000802DC);
  v0[17] = v14;
  *uint64_t v14 = v0;
  v14[1] = sub_10000CC78;
  return v16(v13);
}

uint64_t sub_10000CC78()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 136);
  *(void *)(*v1 + 144) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_10000CDEC;
  }
  else {
    uint64_t v4 = sub_10000CCDC;
  }
  return swift_task_switch(v4, *(void *)(v2 + 48), 0LL);
}

uint64_t sub_10000CCDC()
{
  uint64_t v1 = static LoggedObject<>.logger.getter();
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "CloudKit thinks we're logged in", v4, 2u);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v0 + 128);
  uint64_t v6 = *(void *)(v0 + 96);
  uint64_t v7 = *(void *)(v0 + 64);
  uint64_t v8 = *(void *)(v0 + 48);

  v5(v6, v7);
  *(_BYTE *)(v8 + OBJC_IVAR____TtC11homeeventsd10MainDriver_isCloudKitLoggedIn) = 1;
  uint64_t v9 = *(void *)(v0 + 96);
  uint64_t v11 = *(void *)(v0 + 80);
  uint64_t v10 = *(void *)(v0 + 88);
  swift_task_dealloc(*(void *)(v0 + 104));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000CDEC()
{
  uint64_t v1 = *(void *)(v0 + 144);
  *(void *)(v0 + 32) = v1;
  swift_errorRetain(v1);
  uint64_t v2 = sub_10000D228((uint64_t *)&unk_10007EC20);
  if (!swift_dynamicCast(v0 + 16, v0 + 32, v2, &type metadata for CloudKitAccountError, 0LL))
  {
LABEL_4:
    uint64_t v4 = *(void *)(v0 + 144);
    uint64_t v6 = *(void *)(v0 + 112);
    uint64_t v5 = *(void *)(v0 + 120);
    uint64_t v7 = *(void *)(v0 + 56);
    swift_errorRelease(*(void *)(v0 + 32));
    static LoggedObject<>.logger.getter(v7, v6, v5);
    swift_errorRetain(v4);
    uint64_t v8 = swift_errorRetain(v4);
    uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
    os_log_type_t v10 = static os_log_type_t.error.getter();
    BOOL v11 = os_log_type_enabled(v9, v10);
    uint64_t v12 = *(void *)(v0 + 144);
    if (v11)
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v14 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v13 = 138543362;
      swift_errorRetain(v12);
      uint64_t v15 = _swift_stdlib_bridgeErrorToNSError(v12);
      *(void *)(v0 + 40) = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v13 + 4);
      *uint64_t v14 = v15;
      swift_errorRelease(v12);
      swift_errorRelease(v12);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Unable to get CloudKit's status: %{public}@", v13, 0xCu);
      uint64_t v16 = sub_10000D228(&qword_10007EE38);
      swift_arrayDestroy(v14, 1LL, v16);
      swift_slowDealloc(v14, -1LL, -1LL);
      swift_slowDealloc(v13, -1LL, -1LL);

      swift_errorRelease(v12);
    }

    else
    {
      swift_errorRelease(*(void *)(v0 + 144));
      swift_errorRelease(v12);
      swift_errorRelease(v12);
    }

    uint64_t v17 = *(void *)(v0 + 48);
    (*(void (**)(void, void))(v0 + 128))(*(void *)(v0 + 80), *(void *)(v0 + 64));
    *(_BYTE *)(v17 + OBJC_IVAR____TtC11homeeventsd10MainDriver_isCloudKitLoggedIn) = 1;
    uint64_t v18 = *(void *)(v0 + 96);
    uint64_t v20 = *(void *)(v0 + 80);
    uint64_t v19 = *(void *)(v0 + 88);
    swift_task_dealloc(*(void *)(v0 + 104));
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  unint64_t v3 = *(void *)(v0 + 24);
  if (v3)
  {
    sub_10000D268(*(void *)(v0 + 16), v3);
    goto LABEL_4;
  }

  uint64_t v22 = *(void *)(v0 + 112);
  uint64_t v23 = *(void *)(v0 + 120);
  uint64_t v24 = *(void *)(v0 + 56);
  swift_errorRelease(*(void *)(v0 + 144));
  uint64_t v25 = static LoggedObject<>.logger.getter(v24, v22, v23);
  uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
  os_log_type_t v27 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v28 = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "CloudKit thinks we're logged out", v28, 2u);
    swift_slowDealloc(v28, -1LL, -1LL);
  }

  uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v0 + 128);
  uint64_t v30 = *(void *)(v0 + 88);
  uint64_t v31 = *(void *)(v0 + 64);

  v29(v30, v31);
  uint64_t v32 = (void *)swift_task_alloc(dword_10007EE44);
  *(void *)(v0 + 152) = v32;
  void *v32 = v0;
  v32[1] = sub_10000D134;
  return sub_10000C0A0();
}

uint64_t sub_10000D134()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 152LL));
  return swift_task_switch(sub_10000D18C, v1, 0LL);
}

uint64_t sub_10000D18C()
{
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 88);
  swift_task_dealloc(*(void *)(v0 + 104));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000D1E8(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = a2(255LL);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_10000D228(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

uint64_t sub_10000D268(uint64_t a1, unint64_t a2)
{
  if (a2 >= 2) {
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

void *sub_10000D27C(void *a1)
{
  uint64_t v1 = a1;
  if ((*(_BYTE *)(*(void *)(a1[3] - 8LL) + 82LL) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (void *)v2;
  }

  return v1;
}

uint64_t sub_10000D2B8(uint64_t a1, uint64_t a2)
{
  return sub_10000D2C8(a2 + 32, a1 + 32);
}

uint64_t sub_10000D2C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10000D304(uint64_t a1)
{
  return _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0((void *)(a1 + 32));
}

uint64_t sub_10000D31C()
{
  return swift_deallocObject(v0, 50LL, 7LL);
}

uint64_t sub_10000D348()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  char v4 = *(_BYTE *)(v0 + 48);
  char v5 = *(_BYTE *)(v0 + 49);
  uint64_t v6 = swift_task_alloc(dword_10007EE74);
  *(void *)(v1 + 16) = v6;
  *(void *)uint64_t v6 = v1;
  *(void *)(v6 + 8) = sub_10000D3C0;
  *(_BYTE *)(v6 + 57) = v5;
  *(_BYTE *)(v6 + 56) = v4;
  *(void *)(v6 + 16) = v2;
  *(void *)(v6 + 24) = v3;
  return swift_task_switch(sub_100007938, 0LL, 0LL);
}

uint64_t sub_10000D3C0()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

void *sub_10000D408(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) + 16LL) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80LL)));
  return result;
}

unint64_t sub_10000D42C()
{
  unint64_t result = qword_10007EE90;
  if (!qword_10007EE90)
  {
    uint64_t v1 = sub_100004D58(&qword_10007EE88);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Promise<A>, v1);
    atomic_store(result, &qword_10007EE90);
  }

  return result;
}

uint64_t sub_10000D478(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(void *a1)
{
  uint64_t v1 = *(void *)(a1[3] - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release(*a1);
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

unint64_t sub_10000D4DC()
{
  unint64_t result = qword_10007EEC0;
  if (!qword_10007EEC0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100060750, &type metadata for MainDriver.CoreDataError);
    atomic_store(result, (unint64_t *)&qword_10007EEC0);
  }

  return result;
}

uint64_t sub_10000D520()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10000D544(uint64_t a1, uint64_t a2)
{
  return sub_100011FF8(a1, a2, v2);
}

uint64_t sub_10000D54C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10000D55C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10000D564(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D228(&qword_10007EEF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000D5AC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_10000D228(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t sub_10000D5E8(uint64_t a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t v5 = objc_opt_self(*a3);
    uint64_t result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }

  return result;
}

uint64_t sub_10000D620(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release(result);
  }

  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

void *sub_10000D664(void *result, uint64_t a2)
{
  if (result)
  {

    return (void *)swift_release(a2);
  }

  return result;
}

void *sub_10000D690(void *a1)
{
  return a1;
}

ValueMetadata *type metadata accessor for MainDriver.AccountStore()
{
  return &type metadata for MainDriver.AccountStore;
}

void *initializeBufferWithCopyOfBuffer for MainDriver.CoreDataError(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for MainDriver.CoreDataError(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 8));
}

void *assignWithCopy for MainDriver.CoreDataError(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v3);
  return a1;
}

void *assignWithTake for MainDriver.CoreDataError(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for MainDriver.CoreDataError(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MainDriver.CoreDataError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t sub_10000D7FC()
{
  return 0LL;
}

ValueMetadata *type metadata accessor for MainDriver.CoreDataError()
{
  return &type metadata for MainDriver.CoreDataError;
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void type metadata accessor for Code(uint64_t a1)
{
}

void type metadata accessor for CKError(uint64_t a1)
{
}

void _s3__C4CodeOMa_0(uint64_t a1)
{
}

void type metadata accessor for CKAccountStatus(uint64_t a1)
{
}

uint64_t sub_10000D87C()
{
  return sub_10000D1E8( &qword_10007EF68,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1000605B4);
}

uint64_t sub_10000D8A8()
{
  return sub_10000D1E8( &qword_10007EF70,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_1000605E0);
}

uint64_t sub_10000D8D4()
{
  return sub_10000D1E8( &qword_10007EF78,  (uint64_t (*)(uint64_t))type metadata accessor for Code,  (uint64_t)&unk_1000606E0);
}

uint64_t sub_10000D900()
{
  return sub_10000D1E8( &qword_10007EF80,  (uint64_t (*)(uint64_t))type metadata accessor for BGSystemTaskSchedulerError,  (uint64_t)&unk_1000607C8);
}

void type metadata accessor for BGSystemTaskSchedulerError(uint64_t a1)
{
}

uint64_t sub_10000D940()
{
  return sub_10000D1E8( &qword_10007EF88,  (uint64_t (*)(uint64_t))type metadata accessor for BGSystemTaskSchedulerError,  (uint64_t)&unk_100060908);
}

uint64_t sub_10000D96C()
{
  return sub_10000D1E8( &qword_10007EF90,  (uint64_t (*)(uint64_t))type metadata accessor for BGSystemTaskSchedulerError,  (uint64_t)&unk_100060898);
}

uint64_t sub_10000D998()
{
  return sub_10000D1E8( &qword_10007EF98,  (uint64_t (*)(uint64_t))type metadata accessor for BGSystemTaskSchedulerError,  (uint64_t)&unk_100060830);
}

uint64_t sub_10000D9C4()
{
  return sub_10000D1E8( (unint64_t *)&qword_10007EFA0,  (uint64_t (*)(uint64_t))type metadata accessor for Code,  (uint64_t)&unk_100060790);
}

uint64_t sub_10000D9F0()
{
  return sub_10000D1E8( &qword_10007EFA8,  (uint64_t (*)(uint64_t))type metadata accessor for Code,  (uint64_t)&unk_100060708);
}

unint64_t sub_10000DA20()
{
  unint64_t result = qword_10007EFB0;
  if (!qword_10007EFB0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_10007EFB0);
  }

  return result;
}

uint64_t sub_10000DA64()
{
  return sub_10000D1E8( &qword_10007EFB8,  (uint64_t (*)(uint64_t))type metadata accessor for BGSystemTaskSchedulerError,  (uint64_t)&unk_100060870);
}

uint64_t sub_10000DA90()
{
  return sub_10000D1E8( &qword_10007EFC0,  (uint64_t (*)(uint64_t))type metadata accessor for BGSystemTaskSchedulerError,  (uint64_t)&unk_1000608C8);
}

uint64_t sub_10000DABC()
{
  return sub_10000D1E8( &qword_10007EFC8,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_10006069C);
}

uint64_t sub_10000DAE8()
{
  return sub_10000D1E8( &qword_10007EFD0,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_100060668);
}

uint64_t sub_10000DB14()
{
  return sub_10000D1E8( &qword_10007EFD8,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_100060624);
}

uint64_t sub_10000DB40()
{
  return sub_10000D1E8(&qword_10007EFE0, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_0, (uint64_t)&unk_1000609B4);
}

uint64_t sub_10000DB6C()
{
  return sub_10000D1E8(&qword_10007EFE8, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_0, (uint64_t)&unk_100060578);
}

uint64_t sub_10000DB98()
{
  return sub_10000D1E8(&qword_10007EFF0, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_0, (uint64_t)&unk_10006054C);
}

uint64_t sub_10000DBC4()
{
  return sub_10000D1E8( &qword_10007EFF8,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_100060948);
}

void type metadata accessor for QualityOfService(uint64_t a1)
{
}

void sub_10000DC04(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, a3);
    if (!v5) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }

void sub_10000DC74()
{
  uint64_t ObjectType = swift_getObjectType(v0);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t Strong = swift_weakLoadStrong(&v0[OBJC_IVAR____TtC11homeeventsd9XPCServer_mainDriver]);
  swift_release(Strong);
  if (Strong)
  {
    uint64_t v7 = *(void *)&v0[OBJC_IVAR____TtC11homeeventsd9XPCServer_listener];
    uint64_t v8 = (os_unfair_lock_s *)(v7 + 32);
    os_unfair_lock_lock((os_unfair_lock_t)(v7 + 32));
    uint64_t v9 = *(void *)(v7 + 16);
    os_unfair_lock_unlock(v8);
    if (v9)
    {
      sub_10000E6BC();
      uint64_t v10 = static LoggedObject.logger.getter(ObjectType);
      BOOL v11 = (os_log_s *)Logger.logObject.getter(v10);
      os_log_type_t v12 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v13 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "Starting server that was already started", v13, 2u);
        swift_slowDealloc(v13, -1LL, -1LL);
      }

      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    }

    else
    {
      uint64_t v14 = *(void *)&v0[OBJC_IVAR____TtC11homeeventsd9XPCServer_serviceName + 8];
      id v15 = objc_allocWithZone(&OBJC_CLASS___NSXPCListener);
      swift_bridgeObjectRetain(v14);
      NSString v16 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v14);
      id v17 = [v15 initWithMachServiceName:v16];

      uint64_t v18 = (objc_class *)_s8ListenerCMa();
      uint64_t v19 = (char *)objc_allocWithZone(v18);
      *(void *)&v19[OBJC_IVAR____TtCC11homeeventsd9XPCServer8Listener_hmDelegate + 8] = 0LL;
      swift_unknownObjectWeakInit();
      *(void *)&v19[OBJC_IVAR____TtCC11homeeventsd9XPCServer8Listener_listener] = v17;
      v21.receiver = v19;
      v21.super_class = v18;
      id v20 = objc_msgSendSuper2(&v21, "init");
      sub_10000E700((uint64_t)v20, v0);
    }
  }

  else
  {
    __break(1u);
  }

uint64_t sub_10000DE90()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType(v0);
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *(void *)&v1[OBJC_IVAR____TtC11homeeventsd9XPCServer_listener];
  os_unfair_lock_lock((os_unfair_lock_t)(v7 + 32));
  uint64_t v8 = *(void *)(v7 + 16);
  *(void *)(v7 + 16) = 0LL;
  *(void *)(v7 + 24) = 0LL;
  os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 32));
  if (v8) {
    [*(id *)(v8 + OBJC_IVAR____TtCC11homeeventsd9XPCServer8Listener_listener) invalidate];
  }
  sub_10000E6BC();
  static LoggedObject.logger.getter(ObjectType);
  uint64_t v9 = v1;
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    os_log_type_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v13 = swift_slowAlloc(32LL, -1LL);
    uint64_t v21 = v4;
    uint64_t v14 = v13;
    uint64_t v23 = v13;
    uint64_t v19 = v3;
    uint64_t v20 = v8;
    *(_DWORD *)os_log_type_t v12 = 136446210;
    uint64_t v15 = *(void *)&v9[OBJC_IVAR____TtC11homeeventsd9XPCServer_serviceName];
    unint64_t v16 = *(void *)&v9[OBJC_IVAR____TtC11homeeventsd9XPCServer_serviceName + 8];
    swift_bridgeObjectRetain(v16);
    uint64_t v22 = sub_100046274(v15, v16, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v12 + 4);

    swift_bridgeObjectRelease(v16);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "No longer listening for connections to %{public}s", v12, 0xCu);
    swift_arrayDestroy(v14, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);

    swift_unknownObjectRelease(v20);
    return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v6, v19);
  }

  else
  {

    swift_unknownObjectRelease(v8);
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }

uint64_t sub_10000E0DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for XPCServerProxy();
  swift_allocObject(v7, 128LL, 7LL);
  swift_unknownObjectRetain(a1);
  swift_retain(a3);
  return sub_100038954(v9, a1, a2, a3);
}

id sub_10000E188()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for XPCServer()
{
  return objc_opt_self(&OBJC_CLASS____TtC11homeeventsd9XPCServer);
}

uint64_t sub_10000E24C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_beginAccess(a1 + 16, v23, 0LL, 0LL);
  uint64_t result = swift_unknownObjectWeakLoadStrong(a1 + 16);
  if (result)
  {
    uint64_t v7 = result;
    uint64_t v8 = *(void *)(a1 + 24);
    uint64_t v9 = type metadata accessor for XPCServer();
    sub_10000E6BC();
    static LoggedObject.logger.getter(v9);
    uint64_t v10 = swift_unknownObjectRetain_n(v7, 2LL);
    os_log_type_t v11 = (os_log_s *)Logger.logObject.getter(v10);
    os_log_type_t v12 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = v8;
      uint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v15 = swift_slowAlloc(32LL, -1LL);
      uint64_t v22 = v15;
      *(_DWORD *)uint64_t v14 = 136446210;
      uint64_t v20 = v14 + 4;
      uint64_t ObjectType = swift_getObjectType(v7);
      uint64_t v21 = v7;
      uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter(ObjectType, *(void *)(v13 + 8));
      unint64_t v19 = v18;
      uint64_t v21 = sub_100046274(v17, v18, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v20);
      swift_unknownObjectRelease_n(v7, 2LL);
      swift_bridgeObjectRelease(v19);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Connection interrupted: %{public}s", v14, 0xCu);
      swift_arrayDestroy(v15, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1LL, -1LL);
      swift_slowDealloc(v14, -1LL, -1LL);
      swift_unknownObjectRelease(v7);
    }

    else
    {

      swift_unknownObjectRelease_n(v7, 3LL);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }

  return result;
}

uint64_t sub_10000E464(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_beginAccess(a1 + 16, v27, 0LL, 0LL);
  uint64_t result = swift_unknownObjectWeakLoadStrong(a1 + 16);
  if (result)
  {
    uint64_t v7 = result;
    uint64_t v8 = *(void *)(a1 + 24);
    uint64_t v9 = type metadata accessor for XPCServer();
    sub_10000E6BC();
    static LoggedObject.logger.getter(v9);
    uint64_t v10 = swift_unknownObjectRetain_n(v7, 2LL);
    os_log_type_t v11 = (os_log_s *)Logger.logObject.getter(v10);
    os_log_type_t v12 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = swift_slowAlloc(12LL, -1LL);
      uint64_t v24 = v8;
      uint64_t v14 = (uint8_t *)v13;
      uint64_t v15 = swift_slowAlloc(32LL, -1LL);
      *(void *)&v26[0] = v15;
      *(_DWORD *)uint64_t v14 = 136446210;
      uint64_t v23 = v14 + 4;
      uint64_t ObjectType = swift_getObjectType(v7);
      uint64_t v25 = v7;
      uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter(ObjectType, *(void *)(v24 + 8));
      unint64_t v19 = v18;
      uint64_t v25 = sub_100046274(v17, v18, (uint64_t *)v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, v26, v23);
      swift_unknownObjectRelease_n(v7, 2LL);
      swift_bridgeObjectRelease(v19);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Connection invalidated: %{public}s", v14, 0xCu);
      swift_arrayDestroy(v15, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1LL, -1LL);
      uint64_t v20 = v14;
      uint64_t v8 = v24;
      swift_slowDealloc(v20, -1LL, -1LL);
    }

    else
    {

      swift_unknownObjectRelease_n(v7, 2LL);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    uint64_t v21 = swift_getObjectType(v7);
    memset(v26, 0, sizeof(v26));
    (*(void (**)(_OWORD *, uint64_t, uint64_t))(v8 + 144))(v26, v21, v8);
    return swift_unknownObjectRelease(v7);
  }

  return result;
}

uint64_t sub_10000E6AC()
{
  return static LoggedObject.logger.getter(v0);
}

uint64_t sub_10000E6B4()
{
  return static LoggedObject.logCategory.getter(v0);
}

unint64_t sub_10000E6BC()
{
  unint64_t result = qword_10007F128;
  if (!qword_10007F128)
  {
    uint64_t v1 = type metadata accessor for XPCServer();
    unint64_t result = swift_getWitnessTable(&unk_100060A78, v1);
    atomic_store(result, (unint64_t *)&qword_10007F128);
  }

  return result;
}

uint64_t sub_10000E700(uint64_t a1, char *a2)
{
  uint64_t ObjectType = swift_getObjectType(a2);
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *(void *)&a2[OBJC_IVAR____TtC11homeeventsd9XPCServer_listener];
  os_unfair_lock_lock((os_unfair_lock_t)(v9 + 32));
  swift_unknownObjectRelease(*(void *)(v9 + 16));
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = &off_100076B58;
  swift_unknownObjectRetain(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 32));
  uint64_t v10 = *(void **)(a1 + OBJC_IVAR____TtCC11homeeventsd9XPCServer8Listener_listener);
  os_log_type_t v11 = a2;
  [v10 setDelegate:a1];
  *(void *)(a1 + OBJC_IVAR____TtCC11homeeventsd9XPCServer8Listener_hmDelegate + 8) = &off_100075B90;
  swift_unknownObjectWeakAssign();

  [v10 activate];
  sub_10000E6BC();
  static LoggedObject.logger.getter(ObjectType);
  os_log_type_t v12 = v11;
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v16 = swift_slowAlloc(32LL, -1LL);
    uint64_t v22 = v5;
    uint64_t v17 = v16;
    uint64_t v24 = v16;
    uint64_t v21 = v6;
    *(_DWORD *)uint64_t v15 = 136446210;
    uint64_t v19 = *(void *)&v12[OBJC_IVAR____TtC11homeeventsd9XPCServer_serviceName];
    unint64_t v18 = *(void *)&v12[OBJC_IVAR____TtC11homeeventsd9XPCServer_serviceName + 8];
    swift_bridgeObjectRetain(v18);
    uint64_t v23 = sub_100046274(v19, v18, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v15 + 4);

    swift_bridgeObjectRelease(v18);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Listening for new connections to %{public}s", v15, 0xCu);
    swift_arrayDestroy(v17, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1LL, -1LL);
    swift_slowDealloc(v15, -1LL, -1LL);

    return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v8, v22);
  }

  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }

uint64_t sub_10000E984(uint64_t a1, uint64_t a2, char a3)
{
  *(_BYTE *)(v3 + 592) = a3;
  *(void *)(v3 + 336) = a1;
  *(void *)(v3 + 344) = a2;
  uint64_t v4 = type metadata accessor for Logger(0LL);
  *(void *)(v3 + 352) = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  *(void *)(v3 + 360) = v5;
  unint64_t v6 = (*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v3 + 368) = swift_task_alloc(v6);
  *(void *)(v3 + 376) = swift_task_alloc(v6);
  *(void *)(v3 + 384) = swift_task_alloc(v6);
  *(void *)(v3 + 392) = swift_task_alloc(v6);
  *(void *)(v3 + 400) = swift_task_alloc(v6);
  *(void *)(v3 + 408) = swift_task_alloc(v6);
  *(void *)(v3 + 416) = swift_task_alloc(v6);
  *(void *)(v3 + 424) = swift_task_alloc(v6);
  *(void *)(v3 + 432) = swift_task_alloc(v6);
  return swift_task_switch(sub_10000EA4C, 0LL, 0LL);
}

void sub_10000EA4C()
{
  if ((*(_BYTE *)(v0 + 592) & 1) != 0 || *(uint64_t *)(v0 + 344) >= 1)
  {
    uint64_t v1 = *(void *)(v0 + 336);
    char v19 = *(_BYTE *)(v0 + 592);
    type metadata accessor for Configuration(0LL);
    *(void *)(v0 + 176) = sub_10000D228(&qword_10007F138);
    *(void *)(v0 + 184) = swift_getOpaqueTypeConformance2();
    sub_10000D27C((void *)(v0 + 152));
    static Configuration.defaultFeatureDataSource.getter();
    uint64_t v2 = sub_10000D478(v1, v0 + 192);
    uint64_t v18 = static Configuration.cloudKitContainer.getter(v2);
    uint64_t v17 = static Configuration.cloudKitRecordDateCoalescingWindowSeconds.getter();
    uint64_t v16 = static Constants.maxCloudKitRecordsPerOperation.getter();
    uint64_t v3 = *(void *)(v0 + 216);
    sub_10001001C(v0 + 192, v3);
    uint64_t v4 = *(void *)(v3 - 8);
    uint64_t v5 = (uint64_t *)swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
    *(void *)(v0 + 440) = v5;
    (*(void (**)(void))(v4 + 16))();
    uint64_t v6 = *v5;
    uint64_t v7 = type metadata accessor for CoreDataDatabase();
    *(void *)(v0 + 232) = v6;
    *(void *)(v0 + 256) = v7;
    *(void *)(v0 + 264) = &off_100077B60;
    uint64_t v8 = type metadata accessor for EventUploader();
    *(void *)(v0 + 448) = v8;
    uint64_t inited = (void *)swift_initStackObject(v8, v0 + 16);
    *(void *)(v0 + 456) = inited;
    uint64_t v10 = *(void *)(v0 + 256);
    uint64_t v11 = sub_10001001C(v0 + 232, v10);
    uint64_t v12 = *(void *)(v10 - 8);
    uint64_t v13 = (void *)swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
    (*(void (**)(void *, uint64_t, uint64_t))(v12 + 16))(v13, v11, v10);
    inited[7] = *v13;
    inited[10] = v7;
    inited[11] = &off_100077B60;
    sub_100010044((__int128 *)(v0 + 152), (uint64_t)(inited + 2));
    inited[15] = v17;
    inited[16] = v16;
    inited[13] = 0LL;
    inited[14] = 0LL;
    inited[12] = v18;
    _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0((void *)(v0 + 232));
    swift_task_dealloc(v13);
    _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0((void *)(v0 + 192));
    if ((v19 & 1) != 0)
    {
      sub_10000D408(inited + 7, inited[10]);
      os_log_type_t v14 = (void *)swift_task_alloc(dword_10008061C);
      *(void *)(v0 + 464) = v14;
      uint64_t v15 = sub_10000ECAC;
    }

    else
    {
      *(void *)(v0 + 304) = 0LL;
      swift_beginAccess(v0 + 304, v0 + 272, 1LL, 0LL);
      sub_10000D408((void *)(*(void *)(v0 + 456) + 56LL), *(void *)(*(void *)(v0 + 456) + 80LL));
      os_log_type_t v14 = (void *)swift_task_alloc(dword_10008061C);
      *(void *)(v0 + 520) = v14;
      uint64_t v15 = sub_10000F244;
    }

    *os_log_type_t v14 = v0;
    v14[1] = v15;
    sub_100057770();
  }

  else
  {
    __break(1u);
  }

uint64_t sub_10000ECAC(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 464);
  *(void *)(v3 + 472) = a1;
  *(void *)(v3 + 480) = v1;
  swift_task_dealloc(v4);
  if (v1) {
    uint64_t v5 = sub_10000EF98;
  }
  else {
    uint64_t v5 = sub_10000ED18;
  }
  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_10000ED18()
{
  uint64_t v1 = *(void *)(v0 + 472);
  *(void *)(v0 + 488) = sub_10001005C();
  uint64_t v2 = *(void *)(v0 + 448);
  if (v1 < 1)
  {
    uint64_t v14 = static LoggedObject.logger.getter(v2);
    uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v16 = static os_log_type_t.default.getter();
    BOOL v17 = os_log_type_enabled(v15, v16);
    uint64_t v18 = *(void *)(v0 + 456);
    if (v17)
    {
      char v19 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)char v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "No pending events to upload", v19, 2u);
      swift_slowDealloc(v19, -1LL, -1LL);

      swift_release(v18);
    }

    else
    {
      swift_release(*(void *)(v0 + 456));
    }

    (*(void (**)(void, void))(*(void *)(v0 + 360) + 8LL))(*(void *)(v0 + 416), *(void *)(v0 + 352));
    uint64_t v20 = *(void *)(v0 + 432);
    uint64_t v22 = *(void *)(v0 + 416);
    uint64_t v21 = *(void *)(v0 + 424);
    uint64_t v24 = *(void *)(v0 + 400);
    uint64_t v23 = *(void *)(v0 + 408);
    uint64_t v26 = *(void *)(v0 + 384);
    uint64_t v25 = *(void *)(v0 + 392);
    uint64_t v28 = *(void *)(v0 + 368);
    uint64_t v27 = *(void *)(v0 + 376);
    swift_task_dealloc(*(void *)(v0 + 440));
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v3 = static LoggedObject.logger.getter(v2);
    uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
    os_log_type_t v5 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = *(void *)(v0 + 472);
      uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)uint64_t v7 = 134217984;
      *(void *)(v0 + 296) = v6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 296, v0 + 304, v7 + 4);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Uploading %ld pending events", v7, 0xCu);
      swift_slowDealloc(v7, -1LL, -1LL);
    }

    uint64_t v8 = *(void *)(v0 + 432);
    uint64_t v9 = *(void *)(v0 + 352);
    uint64_t v10 = *(void *)(v0 + 360);

    uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    *(void *)(v0 + 496) = v11;
    v11(v8, v9);
    uint64_t v12 = (void *)swift_task_alloc(dword_1000804D4);
    *(void *)(v0 + 504) = v12;
    *uint64_t v12 = v0;
    v12[1] = sub_10000F054;
    return sub_10004C9E0();
  }

uint64_t sub_10000EF98()
{
  uint64_t v1 = *(void *)(v0 + 432);
  uint64_t v3 = *(void *)(v0 + 416);
  uint64_t v2 = *(void *)(v0 + 424);
  uint64_t v5 = *(void *)(v0 + 400);
  uint64_t v4 = *(void *)(v0 + 408);
  uint64_t v7 = *(void *)(v0 + 384);
  uint64_t v6 = *(void *)(v0 + 392);
  uint64_t v8 = *(void *)(v0 + 368);
  uint64_t v9 = *(void *)(v0 + 376);
  swift_task_dealloc(*(void *)(v0 + 440));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v9);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000F054()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 504LL);
  *(void *)(*(void *)v1 + 512LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_10000FF60;
  }
  else {
    uint64_t v3 = sub_10000F0B8;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_10000F0B8()
{
  uint64_t v1 = static LoggedObject.logger.getter(*(void *)(v0 + 448));
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = *(void *)(v0 + 472);
    uint64_t v5 = *(void *)(v0 + 456);
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v6 = 134217984;
    *(void *)(v0 + 312) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 312, v0 + 320, v6 + 4);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Successfully uploaded all %ld pending events", v6, 0xCu);
    swift_slowDealloc(v6, -1LL, -1LL);

    swift_release(v5);
  }

  else
  {
    swift_release(*(void *)(v0 + 456));
  }

  (*(void (**)(void, void))(v0 + 496))(*(void *)(v0 + 424), *(void *)(v0 + 352));
  uint64_t v7 = *(void *)(v0 + 432);
  uint64_t v9 = *(void *)(v0 + 416);
  uint64_t v8 = *(void *)(v0 + 424);
  uint64_t v11 = *(void *)(v0 + 400);
  uint64_t v10 = *(void *)(v0 + 408);
  uint64_t v13 = *(void *)(v0 + 384);
  uint64_t v12 = *(void *)(v0 + 392);
  uint64_t v15 = *(void *)(v0 + 368);
  uint64_t v14 = *(void *)(v0 + 376);
  swift_task_dealloc(*(void *)(v0 + 440));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000F244(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 520);
  *(void *)(*v2 + 528) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = sub_10000F7FC;
  }

  else
  {
    *(void *)(v4 + 536) = a1;
    uint64_t v6 = sub_10000F2B8;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_10000F2B8()
{
  uint64_t v1 = *(void *)(v0 + 536);
  uint64_t v2 = *(void *)(v0 + 304);
  sub_10001005C();
  uint64_t v3 = *(void *)(v0 + 448);
  if (v1 < 1)
  {
    if (v2)
    {
      uint64_t v19 = static LoggedObject.logger.getter(v3);
      uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
      os_log_type_t v21 = static os_log_type_t.default.getter();
      BOOL v22 = os_log_type_enabled(v20, v21);
      uint64_t v23 = *(void *)(v0 + 456);
      uint64_t v25 = *(void *)(v0 + 360);
      uint64_t v24 = *(void *)(v0 + 368);
      uint64_t v26 = *(void *)(v0 + 352);
      if (v22)
      {
        uint64_t v56 = *(void *)(v0 + 352);
        uint64_t v27 = swift_slowAlloc(22LL, -1LL);
        uint64_t v55 = v25;
        uint64_t v28 = swift_slowAlloc(32LL, -1LL);
        uint64_t v57 = v28;
        *(_DWORD *)uint64_t v27 = 134218242;
        *(void *)(v0 + 320) = v2;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 320, v0 + 328, v27 + 4);
        *(_WORD *)(v27 + 12) = 2080;
        if (v2 == 1) {
          uint64_t v29 = 0LL;
        }
        else {
          uint64_t v29 = 29541LL;
        }
        if (v2 == 1) {
          unint64_t v30 = 0xE000000000000000LL;
        }
        else {
          unint64_t v30 = 0xE200000000000000LL;
        }
        *(void *)(v0 + 328) = sub_100046274(v29, v30, &v57);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 328, v0 + 336, v27 + 14);
        swift_bridgeObjectRelease(v30);
        _os_log_impl( (void *)&_mh_execute_header,  v20,  v21,  "Successfully uploaded %ld batch%s of pending events",  (uint8_t *)v27,  0x16u);
        swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v28, -1LL, -1LL);
        swift_slowDealloc(v27, -1LL, -1LL);

        swift_release(v23);
        (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v24, v56);
      }

      else
      {
        swift_release(*(void *)(v0 + 456));

        (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
      }
    }

    else
    {
      uint64_t v40 = static LoggedObject.logger.getter(v3);
      unint64_t v41 = (os_log_s *)Logger.logObject.getter(v40);
      os_log_type_t v42 = static os_log_type_t.default.getter();
      BOOL v43 = os_log_type_enabled(v41, v42);
      uint64_t v44 = *(void *)(v0 + 456);
      if (v43)
      {
        uint64_t v45 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v45 = 0;
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "No pending events to upload", v45, 2u);
        swift_slowDealloc(v45, -1LL, -1LL);

        swift_release(v44);
      }

      else
      {
        swift_release(*(void *)(v0 + 456));
      }

      (*(void (**)(void, void))(*(void *)(v0 + 360) + 8LL))( *(void *)(v0 + 376),  *(void *)(v0 + 352));
    }

    uint64_t v46 = *(void *)(v0 + 432);
    uint64_t v48 = *(void *)(v0 + 416);
    uint64_t v47 = *(void *)(v0 + 424);
    uint64_t v50 = *(void *)(v0 + 400);
    uint64_t v49 = *(void *)(v0 + 408);
    uint64_t v52 = *(void *)(v0 + 384);
    uint64_t v51 = *(void *)(v0 + 392);
    uint64_t v54 = *(void *)(v0 + 368);
    uint64_t v53 = *(void *)(v0 + 376);
    swift_task_dealloc(*(void *)(v0 + 440));
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    if (v2)
    {
      uint64_t v4 = static LoggedObject.logger.getter(v3);
      uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
      os_log_type_t v6 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v5, v6))
      {
        uint64_t v7 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v7 = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, v6, "Pending events remaining, starting another upload", v7, 2u);
        swift_slowDealloc(v7, -1LL, -1LL);
      }

      uint64_t v8 = *(void *)(v0 + 448);
      uint64_t v9 = *(void *)(v0 + 400);
      uint64_t v10 = *(void *)(v0 + 352);
      uint64_t v11 = *(void *)(v0 + 360);

      uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
      v12(v9, v10);
      uint64_t v13 = static LoggedObject.logger.getter(v8);
      uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
      os_log_type_t v15 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v14, v15))
      {
        uint64_t v16 = swift_slowAlloc(12LL, -1LL);
        *(_DWORD *)uint64_t v16 = 134217984;
        *(void *)(v16 + 4) = *(void *)(v0 + 304);
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "Batch %ld", (uint8_t *)v16, 0xCu);
        swift_slowDealloc(v16, -1LL, -1LL);
      }

      uint64_t v17 = *(void *)(v0 + 392);
      uint64_t v18 = *(void *)(v0 + 352);
    }

    else
    {
      uint64_t v31 = static LoggedObject.logger.getter(v3);
      uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
      os_log_type_t v33 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v32, v33))
      {
        uint64_t v34 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v34 = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "Uploading pending events", v34, 2u);
        swift_slowDealloc(v34, -1LL, -1LL);
      }

      uint64_t v17 = *(void *)(v0 + 408);
      uint64_t v18 = *(void *)(v0 + 352);
      uint64_t v35 = *(void *)(v0 + 360);

      uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
    }

    v12(v17, v18);
    *(void *)(v0 + 544) = v12;
    os_log_type_t v36 = *(void **)(v0 + 456);
    sub_10000D408(v36 + 7, v36[10]);
    uint64_t v37 = v36[16];
    uint64_t v38 = (void *)swift_task_alloc(dword_100080604);
    *(void *)(v0 + 552) = v38;
    *uint64_t v38 = v0;
    v38[1] = sub_10000F8B8;
    return sub_10005507C(v37);
  }

uint64_t sub_10000F7FC()
{
  uint64_t v1 = *(void *)(v0 + 432);
  uint64_t v3 = *(void *)(v0 + 416);
  uint64_t v2 = *(void *)(v0 + 424);
  uint64_t v5 = *(void *)(v0 + 400);
  uint64_t v4 = *(void *)(v0 + 408);
  uint64_t v7 = *(void *)(v0 + 384);
  uint64_t v6 = *(void *)(v0 + 392);
  uint64_t v8 = *(void *)(v0 + 368);
  uint64_t v9 = *(void *)(v0 + 376);
  swift_task_dealloc(*(void *)(v0 + 440));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v9);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000F8B8(uint64_t a1)
{
  uint64_t v4 = *(void *)(*(void *)v2 + 552LL);
  uint64_t v5 = *(void **)v2;
  v5[70] = a1;
  v5[71] = v1;
  swift_task_dealloc(v4);
  if (v1) {
    return swift_task_switch(sub_10000F9C0, 0LL, 0LL);
  }
  uint64_t v7 = (void *)swift_task_alloc(dword_100080494);
  v5[72] = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_10000F95C;
  return sub_10004DDEC(a1);
}

uint64_t sub_10000F95C()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 576LL);
  *(void *)(*(void *)v1 + 584LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_10000FA7C;
  }
  else {
    uint64_t v3 = sub_10000FB40;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_10000F9C0()
{
  uint64_t v1 = *(void *)(v0 + 432);
  uint64_t v3 = *(void *)(v0 + 416);
  uint64_t v2 = *(void *)(v0 + 424);
  uint64_t v5 = *(void *)(v0 + 400);
  uint64_t v4 = *(void *)(v0 + 408);
  uint64_t v7 = *(void *)(v0 + 384);
  uint64_t v6 = *(void *)(v0 + 392);
  uint64_t v8 = *(void *)(v0 + 368);
  uint64_t v9 = *(void *)(v0 + 376);
  swift_task_dealloc(*(void *)(v0 + 440));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v9);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000FA7C()
{
  uint64_t v1 = *(void *)(v0 + 432);
  uint64_t v3 = *(void *)(v0 + 416);
  uint64_t v2 = *(void *)(v0 + 424);
  uint64_t v5 = *(void *)(v0 + 400);
  uint64_t v4 = *(void *)(v0 + 408);
  uint64_t v7 = *(void *)(v0 + 384);
  uint64_t v6 = *(void *)(v0 + 392);
  uint64_t v8 = *(void *)(v0 + 368);
  uint64_t v9 = *(void *)(v0 + 376);
  swift_task_dealloc(*(void *)(v0 + 440));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v9);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000FB40()
{
  uint64_t v1 = *(void *)(v0 + 448);
  swift_bridgeObjectRelease(*(void *)(v0 + 560));
  sub_10001005C();
  uint64_t v2 = static LoggedObject.logger.getter(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v5 = 134217984;
    *(void *)(v5 + 4) = *(void *)(v0 + 304);
    _os_log_impl( (void *)&_mh_execute_header,  v3,  v4,  "Finished uploading pending events (batch %ld)",  (uint8_t *)v5,  0xCu);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 544);
  uint64_t v7 = *(void *)(v0 + 384);
  uint64_t v8 = *(void *)(v0 + 352);

  uint64_t result = v6(v7, v8);
  uint64_t v10 = *(void *)(v0 + 304);
  BOOL v11 = __OFADD__(v10, 1LL);
  uint64_t v12 = v10 + 1;
  if (v11)
  {
    __break(1u);
  }

  else
  {
    uint64_t v13 = *(void *)(v0 + 344);
    *(void *)(v0 + 304) = v12;
    if (v12 == v13)
    {
      uint64_t v14 = *(void *)(v0 + 448);
      if (v13)
      {
        uint64_t v15 = static LoggedObject.logger.getter(v14);
        uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
        os_log_type_t v17 = static os_log_type_t.default.getter();
        BOOL v18 = os_log_type_enabled(v16, v17);
        uint64_t v19 = *(void *)(v0 + 456);
        uint64_t v21 = *(void *)(v0 + 360);
        uint64_t v20 = *(void *)(v0 + 368);
        uint64_t v22 = *(void *)(v0 + 352);
        if (v18)
        {
          uint64_t v44 = *(void *)(v0 + 352);
          uint64_t v23 = swift_slowAlloc(22LL, -1LL);
          uint64_t v43 = v21;
          uint64_t v24 = swift_slowAlloc(32LL, -1LL);
          uint64_t v45 = v24;
          *(_DWORD *)uint64_t v23 = 134218242;
          *(void *)(v0 + 320) = v13;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 320, v0 + 328, v23 + 4);
          *(_WORD *)(v23 + 12) = 2080;
          if (v13 == 1) {
            uint64_t v25 = 0LL;
          }
          else {
            uint64_t v25 = 29541LL;
          }
          if (v13 == 1) {
            unint64_t v26 = 0xE000000000000000LL;
          }
          else {
            unint64_t v26 = 0xE200000000000000LL;
          }
          *(void *)(v0 + 328) = sub_100046274(v25, v26, &v45);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 328, v0 + 336, v23 + 14);
          swift_bridgeObjectRelease(v26);
          _os_log_impl( (void *)&_mh_execute_header,  v16,  v17,  "Successfully uploaded %ld batch%s of pending events",  (uint8_t *)v23,  0x16u);
          swift_arrayDestroy(v24, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v24, -1LL, -1LL);
          swift_slowDealloc(v23, -1LL, -1LL);

          swift_release(v19);
          (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v20, v44);
        }

        else
        {
          swift_release(*(void *)(v0 + 456));

          (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
        }
      }

      else
      {
        uint64_t v28 = static LoggedObject.logger.getter(v14);
        uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
        os_log_type_t v30 = static os_log_type_t.default.getter();
        BOOL v31 = os_log_type_enabled(v29, v30);
        uint64_t v32 = *(void *)(v0 + 456);
        if (v31)
        {
          os_log_type_t v33 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)os_log_type_t v33 = 0;
          _os_log_impl((void *)&_mh_execute_header, v29, v30, "No pending events to upload", v33, 2u);
          swift_slowDealloc(v33, -1LL, -1LL);

          swift_release(v32);
        }

        else
        {
          swift_release(*(void *)(v0 + 456));
        }

        (*(void (**)(void, void))(*(void *)(v0 + 360) + 8LL))( *(void *)(v0 + 376),  *(void *)(v0 + 352));
      }

      uint64_t v34 = *(void *)(v0 + 432);
      uint64_t v36 = *(void *)(v0 + 416);
      uint64_t v35 = *(void *)(v0 + 424);
      uint64_t v38 = *(void *)(v0 + 400);
      uint64_t v37 = *(void *)(v0 + 408);
      uint64_t v40 = *(void *)(v0 + 384);
      uint64_t v39 = *(void *)(v0 + 392);
      uint64_t v42 = *(void *)(v0 + 368);
      uint64_t v41 = *(void *)(v0 + 376);
      swift_task_dealloc(*(void *)(v0 + 440));
      swift_task_dealloc(v34);
      swift_task_dealloc(v35);
      swift_task_dealloc(v36);
      swift_task_dealloc(v37);
      swift_task_dealloc(v38);
      swift_task_dealloc(v39);
      swift_task_dealloc(v40);
      swift_task_dealloc(v41);
      swift_task_dealloc(v42);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }

    else
    {
      sub_10000D408((void *)(*(void *)(v0 + 456) + 56LL), *(void *)(*(void *)(v0 + 456) + 80LL));
      uint64_t v27 = (void *)swift_task_alloc(dword_10008061C);
      *(void *)(v0 + 520) = v27;
      void *v27 = v0;
      v27[1] = sub_10000F244;
      return sub_100057770();
    }
  }

  return result;
}

uint64_t sub_10000FF60()
{
  uint64_t v1 = *(void *)(v0 + 432);
  uint64_t v3 = *(void *)(v0 + 416);
  uint64_t v2 = *(void *)(v0 + 424);
  uint64_t v5 = *(void *)(v0 + 400);
  uint64_t v4 = *(void *)(v0 + 408);
  uint64_t v7 = *(void *)(v0 + 384);
  uint64_t v6 = *(void *)(v0 + 392);
  uint64_t v8 = *(void *)(v0 + 368);
  uint64_t v9 = *(void *)(v0 + 376);
  swift_task_dealloc(*(void *)(v0 + 440));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v9);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001001C(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }

  return result;
}

uint64_t sub_100010044(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

unint64_t sub_10001005C()
{
  unint64_t result = qword_10007F140;
  if (!qword_10007F140)
  {
    uint64_t v1 = type metadata accessor for EventUploader();
    unint64_t result = swift_getWitnessTable(&unk_100061E74, v1);
    atomic_store(result, (unint64_t *)&qword_10007F140);
  }

  return result;
}

uint64_t sub_1000100A4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  BOOL v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = objc_allocWithZone(v4);
  *(void *)&v12[OBJC_IVAR____TtC11homeeventsd25CloudUploadResultLogEvent_numErrorResults] = a2;
  v12[OBJC_IVAR____TtC11homeeventsd25CloudUploadResultLogEvent_attributedToFakeData] = a3;
  v41.receiver = v12;
  v41.super_class = v4;
  id v13 = objc_msgSendSuper2(&v41, "init");
  type metadata accessor for MetricsManager(0LL);
  uint64_t v14 = static MetricsManager.sharedInstance.getter();
  id v15 = v13;
  MetricsManager.submitLogEvent(_:error:)(v15, a1);
  swift_release(v14);

  sub_1000106B4();
  static LoggedObject.logger.getter(v4);
  id v16 = v15;
  swift_errorRetain(a1);
  id v17 = v16;
  uint64_t v18 = swift_errorRetain(a1);
  uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
  os_log_type_t v20 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v38 = v9;
    uint64_t v39 = v8;
    uint64_t v21 = swift_slowAlloc(22LL, -1LL);
    uint64_t v36 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v37 = swift_slowAlloc(32LL, -1LL);
    uint64_t v42 = v37;
    *(_DWORD *)uint64_t v21 = 136446466;
    unint64_t v22 = sub_100010470();
    uint64_t v23 = swift_bridgeObjectRetain(v22);
    uint64_t v24 = sub_100025FAC(v23);
    swift_bridgeObjectRelease(v22);
    uint64_t v40 = (uint64_t)v24;
    sub_1000106F8(&v40);
    swift_bridgeObjectRelease(v22);
    uint64_t v25 = v40;
    uint64_t v26 = sub_10000D228((uint64_t *)&unk_10007F190);
    uint64_t v27 = Array.description.getter(v25, v26);
    unint64_t v29 = v28;
    swift_release(v25);
    uint64_t v40 = sub_100046274(v27, v29, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v21 + 4);

    swift_bridgeObjectRelease(v29);
    *(_WORD *)(v21 + 12) = 2114;
    if (a1)
    {
      swift_errorRetain(a1);
      uint64_t v30 = _swift_stdlib_bridgeErrorToNSError(a1);
      uint64_t v40 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v21 + 14);
    }

    else
    {
      uint64_t v40 = 0LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v21 + 14);
      uint64_t v30 = 0LL;
    }

    uint64_t v33 = v37;
    uint64_t v32 = v38;
    uint64_t v34 = v36;
    uint64_t *v36 = v30;
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl( (void *)&_mh_execute_header,  v19,  v20,  "Submitted CloudUploadResultLogEvent: %{public}s, with error: %{public}@",  (uint8_t *)v21,  0x16u);
    uint64_t v35 = sub_10000D228(&qword_10007EE38);
    swift_arrayDestroy(v34, 1LL, v35);
    swift_slowDealloc(v34, -1LL, -1LL);
    swift_arrayDestroy(v33, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1LL, -1LL);
    swift_slowDealloc(v21, -1LL, -1LL);

    return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v11, v39);
  }

  else
  {

    swift_errorRelease(a1);
    swift_errorRelease(a1);

    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }

unint64_t sub_100010470()
{
  uint64_t v1 = sub_10000D228((uint64_t *)&unk_10007F1A0);
  uint64_t inited = swift_initStackObject(v1, v4);
  *(_OWORD *)(inited + 16) = xmmword_100060B00;
  *(void *)(inited + 32) = 0x6C61746F546D756ELL;
  *(void *)(inited + 40) = 0xEF73746C75736552LL;
  *(void *)(inited + 48) = [objc_allocWithZone(NSNumber) initWithInteger:1];
  *(void *)(inited + 56) = 0x726F7272456D756ELL;
  *(void *)(inited + 64) = 0xEF73746C75736552LL;
  *(void *)(inited + 72) = [objc_allocWithZone(NSNumber) initWithInteger:*(void *)(v0 + OBJC_IVAR____TtC11homeeventsd25CloudUploadResultLogEvent_numErrorResults)];
  *(void *)(inited + 80) = 0xD000000000000014LL;
  *(void *)(inited + 88) = 0x8000000100062C00LL;
  *(void *)(inited + 96) = [objc_allocWithZone(NSNumber) initWithBool:*(unsigned __int8 *)(v0 + OBJC_IVAR____TtC11homeeventsd25CloudUploadResultLogEvent_attributedToFakeData)];
  return sub_100058A80(inited);
}

uint64_t sub_10001058C(char a1)
{
  return sub_1000100A4(0LL, 0LL, a1);
}

uint64_t sub_10001059C(uint64_t a1, char a2)
{
  return sub_1000100A4(a1, 1LL, a2);
}

uint64_t type metadata accessor for CloudUploadResultLogEvent()
{
  return objc_opt_self(&OBJC_CLASS____TtC11homeeventsd25CloudUploadResultLogEvent);
}

unint64_t sub_1000106B4()
{
  unint64_t result = qword_10007F188;
  if (!qword_10007F188)
  {
    uint64_t v1 = type metadata accessor for CloudUploadResultLogEvent();
    unint64_t result = swift_getWitnessTable(&unk_100060B3C, v1);
    atomic_store(result, (unint64_t *)&qword_10007F188);
  }

  return result;
}

Swift::Int sub_1000106F8(void *a1)
{
  __int128 v2 = (void *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0) {
    __int128 v2 = (void *)sub_100026C74(v2);
  }
  uint64_t v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  Swift::Int result = sub_100010760(v5);
  *a1 = v2;
  return result;
}

Swift::Int sub_100010760(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000LL) == 0)
    {
      if (v3) {
        return sub_100010E84(0LL, v3, 1LL, a1);
      }
      return result;
    }

    goto LABEL_154;
  }

  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1)
  {
LABEL_162:
    Swift::Int result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL,  2,  936LL,  0);
    __break(1u);
    return result;
  }

  Swift::Int v107 = result;
  uint64_t v104 = a1;
  if (v3 < 2)
  {
    uint64_t v9 = &_swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage + 32;
    if (v3 != 1)
    {
      unint64_t v13 = *((void *)&_swiftEmptyArrayStorage + 2);
      uint64_t v12 = (char *)&_swiftEmptyArrayStorage;
LABEL_120:
      os_log_t v96 = v12;
      unint64_t v106 = v9;
      if (v13 < 2) {
        goto LABEL_117;
      }
      uint64_t v97 = *v104;
      while (1)
      {
        unint64_t v98 = v13 - 2;
        if (v13 < 2) {
          goto LABEL_149;
        }
        if (!v97) {
          goto LABEL_161;
        }
        uint64_t v95 = v96;
        uint64_t v99 = *(void *)&v96[16 * v98 + 32];
        uint64_t v100 = *(void *)&v96[16 * v13 + 24];
        sub_100010F68( (char *)(v97 + 24 * v99),  (char *)(v97 + 24LL * *(void *)&v96[16 * v13 + 16]),  v97 + 24 * v100,  __dst);
        if (v1) {
          goto LABEL_116;
        }
        if (v100 < v99) {
          goto LABEL_150;
        }
        if ((swift_isUniquelyReferenced_nonNull_native(v95) & 1) == 0) {
          uint64_t v95 = sub_100026A50((uint64_t)v95);
        }
        if (v98 >= *((void *)v95 + 2)) {
          goto LABEL_151;
        }
        v101 = &v95[16 * v98 + 32];
        *(void *)v101 = v99;
        *((void *)v101 + 1) = v100;
        unint64_t v102 = *((void *)v95 + 2);
        if (v13 > v102) {
          goto LABEL_152;
        }
        memmove(&v95[16 * v13 + 16], &v95[16 * v13 + 32], 16 * (v102 - v13));
        os_log_t v96 = v95;
        *((void *)v95 + 2) = v102 - 1;
        unint64_t v13 = v102 - 1;
        if (v102 <= 2) {
          goto LABEL_117;
        }
      }
    }

    unint64_t v106 = &_swiftEmptyArrayStorage;
  }

  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = sub_10000D228((uint64_t *)&unk_10007F190);
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)(v6, v7);
    *(void *)(v8 + 16) = v6;
    unint64_t v106 = (void *)v8;
    __dst = (char *)(v8 + 32);
  }

  Swift::Int v10 = 0LL;
  uint64_t v11 = *a1;
  uint64_t v105 = *a1 + 8;
  uint64_t v103 = *a1 - 24;
  uint64_t v12 = (char *)&_swiftEmptyArrayStorage;
  Swift::Int v108 = v3;
  uint64_t v109 = v11;
  while (1)
  {
    Swift::Int v14 = v10++;
    if (v10 >= v3) {
      goto LABEL_46;
    }
    id v15 = (uint64_t *)(v11 + 24 * v10);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = (void *)(v11 + 24 * v14);
    if (v16 == *v18 && v17 == v18[1])
    {
      Swift::Int v21 = v14 + 2;
      if (v14 + 2 >= v3) {
        goto LABEL_45;
      }
      int v20 = 0;
    }

    else
    {
      int v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
      Swift::Int v21 = v14 + 2;
      if (v14 + 2 >= v3) {
        goto LABEL_36;
      }
    }

    unint64_t v22 = (void *)(v105 + 24 * v21);
    do
    {
      uint64_t v24 = (void *)(v11 + 24 * v10);
      if (*(v22 - 1) == *v24 && *v22 == v24[1])
      {
        if ((v20 & 1) != 0) {
          goto LABEL_37;
        }
      }

      else if (((v20 ^ _stringCompareWithSmolCheck(_:_:expecting:)()) & 1) != 0)
      {
        goto LABEL_36;
      }

      v22 += 3;
      Swift::Int v23 = v21 + 1;
      Swift::Int v10 = v21;
      Swift::Int v21 = v23;
    }

    while (v23 < v3);
    Swift::Int v21 = v23;
LABEL_36:
    Swift::Int v10 = v21;
    if ((v20 & 1) != 0)
    {
LABEL_37:
      if (v21 < v14) {
        goto LABEL_157;
      }
      if (v14 < v21)
      {
        uint64_t v26 = 24 * v21;
        uint64_t v27 = 24 * v14;
        Swift::Int v28 = v21;
        Swift::Int v29 = v14;
        do
        {
          if (v29 != --v28)
          {
            if (!v11) {
              goto LABEL_160;
            }
            uint64_t v30 = v11 + v27;
            uint64_t v31 = v11 + v26;
            uint64_t v32 = *(void *)(v11 + v27);
            __int128 v33 = *(_OWORD *)(v11 + v27 + 8);
            __int128 v34 = *(_OWORD *)(v11 + v26 - 24);
            *(void *)(v30 + 16) = *(void *)(v11 + v26 - 8);
            *(_OWORD *)uint64_t v30 = v34;
            *(void *)(v31 - 24) = v32;
            *(_OWORD *)(v31 - 16) = v33;
          }

          ++v29;
          v26 -= 24LL;
          v27 += 24LL;
        }

        while (v29 < v28);
      }

LABEL_45:
      Swift::Int v10 = v21;
    }

LABEL_46:
    if (v10 < v3)
    {
      if (__OFSUB__(v10, v14)) {
        goto LABEL_153;
      }
      if (v10 - v14 < v107)
      {
        if (__OFADD__(v14, v107)) {
          goto LABEL_155;
        }
        if (v14 + v107 >= v3) {
          Swift::Int v35 = v3;
        }
        else {
          Swift::Int v35 = v14 + v107;
        }
        if (v35 < v14) {
          goto LABEL_156;
        }
        if (v10 != v35)
        {
          uint64_t v36 = v103 + 24 * v10;
          do
          {
            uint64_t v37 = (uint64_t *)(v11 + 24 * v10);
            uint64_t v38 = *v37;
            uint64_t v39 = v37[1];
            Swift::Int v40 = v14;
            uint64_t v41 = v36;
            do
            {
              BOOL v42 = v38 == *(void *)v41 && v39 == *(void *)(v41 + 8);
              if (v42 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
                break;
              }
              if (!v11) {
                goto LABEL_158;
              }
              __int128 v43 = *(_OWORD *)(v41 + 32);
              uint64_t v44 = *(void *)(v41 + 16);
              uint64_t v38 = *(void *)(v41 + 24);
              *(_OWORD *)(v41 + 24) = *(_OWORD *)v41;
              *(void *)(v41 + 40) = v44;
              *(void *)uint64_t v41 = v38;
              *(_OWORD *)(v41 + 8) = v43;
              uint64_t v39 = v43;
              v41 -= 24LL;
              ++v40;
            }

            while (v10 != v40);
            ++v10;
            v36 += 24LL;
          }

          while (v10 != v35);
          Swift::Int v10 = v35;
        }
      }
    }

    if (v10 < v14)
    {
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
LABEL_158:
      __break(1u);
LABEL_159:
      __break(1u);
LABEL_160:
      __break(1u);
LABEL_161:
      __break(1u);
      goto LABEL_162;
    }

    if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0) {
      uint64_t v12 = sub_10002689C(0LL, *((void *)v12 + 2) + 1LL, 1, v12);
    }
    unint64_t v46 = *((void *)v12 + 2);
    unint64_t v45 = *((void *)v12 + 3);
    unint64_t v13 = v46 + 1;
    if (v46 >= v45 >> 1) {
      uint64_t v12 = sub_10002689C((char *)(v45 > 1), v46 + 1, 1, v12);
    }
    *((void *)v12 + 2) = v13;
    uint64_t v47 = v12 + 32;
    uint64_t v48 = &v12[16 * v46 + 32];
    *(void *)uint64_t v48 = v14;
    *((void *)v48 + 1) = v10;
    if (v46) {
      break;
    }
    unint64_t v13 = 1LL;
    uint64_t v11 = v109;
LABEL_15:
    Swift::Int v3 = v108;
    if (v10 >= v108)
    {
      uint64_t v9 = v106;
      goto LABEL_120;
    }
  }

  uint64_t v11 = v109;
  while (1)
  {
    unint64_t v49 = v13 - 1;
    if (v13 >= 4)
    {
      uint64_t v54 = &v47[16 * v13];
      uint64_t v55 = *((void *)v54 - 8);
      uint64_t v56 = *((void *)v54 - 7);
      BOOL v60 = __OFSUB__(v56, v55);
      uint64_t v57 = v56 - v55;
      if (v60) {
        goto LABEL_137;
      }
      uint64_t v59 = *((void *)v54 - 6);
      uint64_t v58 = *((void *)v54 - 5);
      BOOL v60 = __OFSUB__(v58, v59);
      uint64_t v52 = v58 - v59;
      char v53 = v60;
      if (v60) {
        goto LABEL_138;
      }
      unint64_t v61 = v13 - 2;
      id v62 = &v47[16 * v13 - 32];
      uint64_t v64 = *(void *)v62;
      uint64_t v63 = *((void *)v62 + 1);
      BOOL v60 = __OFSUB__(v63, v64);
      uint64_t v65 = v63 - v64;
      if (v60) {
        goto LABEL_140;
      }
      BOOL v60 = __OFADD__(v52, v65);
      uint64_t v66 = v52 + v65;
      if (v60) {
        goto LABEL_143;
      }
      if (v66 >= v57)
      {
        uint64_t v84 = &v47[16 * v49];
        uint64_t v86 = *(void *)v84;
        uint64_t v85 = *((void *)v84 + 1);
        BOOL v60 = __OFSUB__(v85, v86);
        uint64_t v87 = v85 - v86;
        if (v60) {
          goto LABEL_147;
        }
        BOOL v77 = v52 < v87;
        goto LABEL_105;
      }
    }

    else
    {
      if (v13 != 3)
      {
        uint64_t v78 = *((void *)v12 + 4);
        uint64_t v79 = *((void *)v12 + 5);
        BOOL v60 = __OFSUB__(v79, v78);
        uint64_t v71 = v79 - v78;
        char v72 = v60;
        goto LABEL_99;
      }

      uint64_t v51 = *((void *)v12 + 4);
      uint64_t v50 = *((void *)v12 + 5);
      BOOL v60 = __OFSUB__(v50, v51);
      uint64_t v52 = v50 - v51;
      char v53 = v60;
    }

    if ((v53 & 1) != 0) {
      goto LABEL_139;
    }
    unint64_t v61 = v13 - 2;
    uint64_t v67 = &v47[16 * v13 - 32];
    uint64_t v69 = *(void *)v67;
    uint64_t v68 = *((void *)v67 + 1);
    BOOL v70 = __OFSUB__(v68, v69);
    uint64_t v71 = v68 - v69;
    char v72 = v70;
    if (v70) {
      goto LABEL_142;
    }
    id v73 = &v47[16 * v49];
    uint64_t v75 = *(void *)v73;
    uint64_t v74 = *((void *)v73 + 1);
    BOOL v60 = __OFSUB__(v74, v75);
    uint64_t v76 = v74 - v75;
    if (v60) {
      goto LABEL_145;
    }
    if (__OFADD__(v71, v76)) {
      goto LABEL_146;
    }
    if (v71 + v76 >= v52)
    {
      BOOL v77 = v52 < v76;
LABEL_105:
      if (v77) {
        unint64_t v49 = v61;
      }
      goto LABEL_107;
    }

    sub_100026994((void **)&v29, (const void **)&v28, &v27);
    return 1LL;
  }

  Swift::Int result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

LABEL_99:
    if ((v72 & 1) != 0) {
      goto LABEL_141;
    }
    uint64_t v80 = &v47[16 * v49];
    uint64_t v82 = *(void *)v80;
    uint64_t v81 = *((void *)v80 + 1);
    BOOL v60 = __OFSUB__(v81, v82);
    uint64_t v83 = v81 - v82;
    if (v60) {
      goto LABEL_144;
    }
    if (v83 < v71) {
      goto LABEL_15;
    }
LABEL_107:
    unint64_t v88 = v49 - 1;
    if (v49 - 1 >= v13)
    {
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
      goto LABEL_148;
    }

    if (!v11) {
      goto LABEL_159;
    }
    uint64_t v89 = v11;
    int v90 = &v47[16 * v88];
    uint64_t v91 = *(void *)v90;
    id v92 = &v47[16 * v49];
    uint64_t v93 = *((void *)v92 + 1);
    sub_100010F68((char *)(v89 + 24LL * *(void *)v90), (char *)(v89 + 24LL * *(void *)v92), v89 + 24 * v93, __dst);
    if (v1) {
      break;
    }
    if (v93 < v91) {
      goto LABEL_134;
    }
    if (v49 > *((void *)v12 + 2)) {
      goto LABEL_135;
    }
    *(void *)int v90 = v91;
    *(void *)&v47[16 * v88 + 8] = v93;
    unint64_t v94 = *((void *)v12 + 2);
    if (v49 >= v94) {
      goto LABEL_136;
    }
    unint64_t v13 = v94 - 1;
    memmove(&v47[16 * v49], v92 + 16, 16 * (v94 - 1 - v49));
    *((void *)v12 + 2) = v94 - 1;
    BOOL v77 = v94 > 2;
    uint64_t v11 = v109;
    if (!v77) {
      goto LABEL_15;
    }
  }

  uint64_t v95 = v12;
LABEL_116:
  os_log_t v96 = v95;
LABEL_117:
  swift_bridgeObjectRelease(v96);
  *((void *)v106 + 2) = 0LL;
  return swift_bridgeObjectRelease(v106);
}

uint64_t sub_100010E84(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 24 * a3 - 24;
LABEL_5:
    uint64_t v9 = (uint64_t *)(v7 + 24 * v4);
    Swift::Int result = *v9;
    uint64_t v10 = v9[1];
    uint64_t v11 = v6;
    uint64_t v12 = v8;
    while (1)
    {
      BOOL v13 = result == *(void *)v12 && v10 == *(void *)(v12 + 8);
      if (v13 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 24LL;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }

      if (!v7) {
        break;
      }
      __int128 v14 = *(_OWORD *)(v12 + 32);
      uint64_t v15 = *(void *)(v12 + 16);
      Swift::Int result = *(void *)(v12 + 24);
      *(_OWORD *)(v12 + 24) = *(_OWORD *)v12;
      *(void *)(v12 + 40) = v15;
      *(void *)uint64_t v12 = result;
      *(_OWORD *)(v12 + 8) = v14;
      uint64_t v10 = v14;
      v12 -= 24LL;
      if (v4 == ++v11) {
        goto LABEL_4;
      }
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_100010F68(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = (a2 - __src) / 24;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 24;
  Swift::Int v29 = __src;
  Swift::Int v28 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -23)
    {
      if (__dst != a2 || &a2[24 * v11] <= __dst) {
        memmove(__dst, a2, 24 * v11);
      }
      uint64_t v17 = &v4[24 * v11];
      uint64_t v27 = v17;
      Swift::Int v29 = v6;
      if (v7 < v6 && v10 >= 24)
      {
        unint64_t v18 = a3 - 24;
        uint64_t v19 = v6;
        while (1)
        {
          int v20 = (char *)(v18 + 24);
          uint64_t v21 = *((void *)v19 - 3);
          uint64_t v22 = *((void *)v19 - 2);
          v19 -= 24;
          BOOL v23 = *((void *)v17 - 3) == v21 && *((void *)v17 - 2) == v22;
          if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            uint64_t v27 = v17 - 24;
            if (v20 < v17 || v18 >= (unint64_t)v17 || v20 != v17)
            {
              __int128 v25 = *(_OWORD *)(v17 - 24);
              *(void *)(v18 + 16) = *((void *)v17 - 1);
              *(_OWORD *)unint64_t v18 = v25;
            }

            uint64_t v19 = v6;
            v17 -= 24;
            if (v6 <= v7) {
              goto LABEL_46;
            }
          }

          else
          {
            if (v20 != v6 || v18 >= (unint64_t)v6)
            {
              __int128 v24 = *(_OWORD *)v19;
              *(void *)(v18 + 16) = *((void *)v19 + 2);
              *(_OWORD *)unint64_t v18 = v24;
            }

            Swift::Int v29 = v19;
            if (v19 <= v7) {
              goto LABEL_46;
            }
          }

          v18 -= 24LL;
          uint64_t v6 = v19;
          if (v17 <= v4) {
            goto LABEL_46;
          }
        }
      }

      goto LABEL_46;
    }
  }

  else if (v8 >= -23)
  {
    if (__dst != __src || &__src[24 * v9] <= __dst) {
      memmove(__dst, __src, 24 * v9);
    }
    uint64_t v12 = &v4[24 * v9];
    uint64_t v27 = v12;
    if ((unint64_t)v6 < a3 && v8 >= 24)
    {
      do
      {
        BOOL v13 = *(void *)v6 == *(void *)v4 && *((void *)v6 + 1) == *((void *)v4 + 1);
        if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          if (v7 != v4)
          {
            __int128 v16 = *(_OWORD *)v4;
            *((void *)v7 + 2) = *((void *)v4 + 2);
            *(_OWORD *)uint64_t v7 = v16;
          }

          v4 += 24;
          Swift::Int v28 = v4;
          __int128 v14 = v6;
        }

        else
        {
          __int128 v14 = v6 + 24;
          if (v7 < v6 || v7 >= v14 || v7 != v6)
          {
            __int128 v15 = *(_OWORD *)v6;
            *((void *)v7 + 2) = *((void *)v6 + 2);
            *(_OWORD *)uint64_t v7 = v15;
          }
        }

        v7 += 24;
        if (v4 >= v12) {
          break;
        }
        uint64_t v6 = v14;
      }

      while ((unint64_t)v14 < a3);
      Swift::Int v29 = v7;
    }

unint64_t sub_10001123C()
{
  unint64_t result = qword_10007F910;
  if (!qword_10007F910)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSObject);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10007F910);
  }

  return result;
}

unint64_t sub_100011278()
{
  uint64_t v1 = sub_10000D228((uint64_t *)&unk_10007F1A0);
  uint64_t inited = swift_initStackObject(v1, &v4);
  *(_OWORD *)(inited + 16) = xmmword_100060B70;
  *(void *)(inited + 32) = 0x64756F6C436D756ELL;
  *(void *)(inited + 40) = 0xEF7364616F6C7055LL;
  *(void *)(inited + 48) = [objc_allocWithZone(NSNumber) initWithInteger:*(void *)(v0 + OBJC_IVAR____TtC11homeeventsd25CloudUploadVolumeLogEvent_numCloudUploads)];
  *(void *)(inited + 56) = 0x424B656D756C6F76LL;
  *(void *)(inited + 64) = 0xE800000000000000LL;
  *(void *)(inited + 72) = [objc_allocWithZone(NSNumber) initWithInteger:*(void *)(v0 + OBJC_IVAR____TtC11homeeventsd25CloudUploadVolumeLogEvent_volumeKB)];
  *(void *)(inited + 80) = 0x726F6365526D756ELL;
  *(void *)(inited + 88) = 0xEA00000000007364LL;
  *(void *)(inited + 96) = [objc_allocWithZone(NSNumber) initWithInteger:*(void *)(v0 + OBJC_IVAR____TtC11homeeventsd25CloudUploadVolumeLogEvent_numRecords)];
  *(void *)(inited + 104) = 0xD000000000000014LL;
  *(void *)(inited + 112) = 0x8000000100062C00LL;
  *(void *)(inited + 120) = [objc_allocWithZone(NSNumber) initWithBool:*(unsigned __int8 *)(v0 + OBJC_IVAR____TtC11homeeventsd25CloudUploadVolumeLogEvent_attributedToFakeData)];
  return sub_100058A80(inited);
}

uint64_t type metadata accessor for CloudUploadVolumeLogEvent()
{
  return objc_opt_self(&OBJC_CLASS____TtC11homeeventsd25CloudUploadVolumeLogEvent);
}

uint64_t initializeBufferWithCopyOfBuffer for CloudKitError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(_BYTE *)(a2 + 8);
  sub_100011534(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

uint64_t sub_100011534(uint64_t a1, char a2)
{
  if (a2 == 2 || a2 == 1) {
    return swift_bridgeObjectRetain();
  }
  if (!a2) {
    return swift_errorRetain();
  }
  return result;
}

uint64_t destroy for CloudKitError(uint64_t a1)
{
  return sub_100011568(*(void *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t sub_100011568(uint64_t result, char a2)
{
  if (a2 == 2 || a2 == 1) {
    return swift_bridgeObjectRelease(result);
  }
  if (!a2) {
    return swift_errorRelease(result);
  }
  return result;
}

uint64_t assignWithCopy for CloudKitError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(_BYTE *)(a2 + 8);
  sub_100011534(*(void *)a2, v4);
  uint64_t v5 = *(void *)a1;
  *(void *)a1 = v3;
  char v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  sub_100011568(v5, v6);
  return a1;
}

uint64_t initializeWithTake for CloudKitError(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t assignWithTake for CloudKitError(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 8);
  uint64_t v4 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  char v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  sub_100011568(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for CloudKitError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CloudKitError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 9) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 9) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 8) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_1000116B8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_1000116C0(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for CloudKitError()
{
  return &type metadata for CloudKitError;
}

unint64_t destroy for CloudKitAccountError(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

uint64_t _s11homeeventsd20CloudKitAccountErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }

  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }

  return a1;
}

void *assignWithCopy for CloudKitAccountError(void *a1, void *a2)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = a2[1];
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }

LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }

  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(a1[1]);
    goto LABEL_7;
  }

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v4);
  return a1;
}

  swift_bridgeObjectRelease(v3);
  __break(1u);
}

  __break(1u);
  return result;
}

    __int128 v25 = v17 + 1;
    if (__OFADD__(v17, 1LL))
    {
      __break(1u);
      goto LABEL_31;
    }

    if (v25 >= v40) {
      goto LABEL_29;
    }
    uint64_t v26 = *(void *)(v39 + 8 * v25);
    ++v17;
    if (!v26)
    {
      uint64_t v17 = v25 + 1;
      if (v25 + 1 >= v40) {
        goto LABEL_29;
      }
      uint64_t v26 = *(void *)(v39 + 8 * v17);
      if (!v26)
      {
        uint64_t v17 = v25 + 2;
        if (v25 + 2 >= v40) {
          goto LABEL_29;
        }
        uint64_t v26 = *(void *)(v39 + 8 * v17);
        if (!v26)
        {
          uint64_t v17 = v25 + 3;
          if (v25 + 3 >= v40) {
            goto LABEL_29;
          }
          uint64_t v26 = *(void *)(v39 + 8 * v17);
          if (!v26) {
            break;
          }
        }
      }
    }

uint64_t assignWithTake for CloudKitAccountError(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4 < 0xFFFFFFFF) {
    goto LABEL_5;
  }
  unint64_t v5 = *(void *)(a2 + 8);
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(v4);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }

  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for CloudKitAccountError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFE && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for CloudKitAccountError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0LL;
    *(void *)(result + 8) = 0LL;
    *(_DWORD *)unint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(_BYTE *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 1;
    }
  }

  return result;
}

uint64_t sub_1000118EC(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_100011904(void *result, int a2)
{
  if (a2 < 0)
  {
    *unint64_t result = a2 ^ 0x80000000;
    result[1] = 0LL;
  }

  else if (a2)
  {
    result[1] = (a2 - 1);
  }

  return result;
}

ValueMetadata *type metadata accessor for CloudKitAccountError()
{
  return &type metadata for CloudKitAccountError;
}

uint64_t sub_100011938(uint64_t a1, char a2, uint64_t a3)
{
  *(_BYTE *)(v3 + 184) = a2;
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = a3;
  uint64_t v4 = type metadata accessor for DiagnosticFileCollector(0LL);
  *(void *)(v3 + 32) = v4;
  unint64_t v5 = (*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v3 + 40) = swift_task_alloc(v5);
  *(void *)(v3 + 48) = swift_task_alloc(v5);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  *(void *)(v3 + 56) = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  *(void *)(v3 + 64) = v7;
  *(void *)(v3 + 72) = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_10000D228(&qword_10007EEB8);
  *(void *)(v3 + 80) = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for URL.DirectoryHint(0LL);
  *(void *)(v3 + 88) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v3 + 96) = v10;
  *(void *)(v3 + 104) = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Constants(0LL);
  *(void *)(v3 + 112) = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  *(void *)(v3 + 120) = v12;
  *(void *)(v3 + 128) = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for URL(0LL);
  *(void *)(v3 + 136) = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  *(void *)(v3 + 144) = v14;
  *(void *)(v3 + 152) = swift_task_alloc((*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100011A6C, 0LL, 0LL);
}

uint64_t sub_100011A6C()
{
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 128);
  uint64_t v3 = *(void *)(v0 + 136);
  uint64_t v5 = *(void *)(v0 + 112);
  uint64_t v4 = *(void *)(v0 + 120);
  uint64_t v6 = *(void *)(v0 + 96);
  uint64_t v7 = *(void *)(v0 + 104);
  uint64_t v39 = v6;
  uint64_t v8 = *(void *)(v0 + 80);
  uint64_t v9 = *(void *)(v0 + 88);
  uint64_t v35 = *(void *)(v0 + 152);
  uint64_t v36 = *(void *)(v0 + 72);
  uint64_t v37 = *(void *)(v0 + 64);
  uint64_t v38 = *(void *)(v0 + 56);
  uint64_t v45 = *(void *)(v0 + 48);
  uint64_t v44 = *(int **)(v0 + 32);
  char v43 = *(_BYTE *)(v0 + 184);
  uint64_t v41 = *(void *)(v0 + 40);
  BOOL v42 = *(void **)(v0 + 24);
  uint64_t v40 = *(void *)(v0 + 16);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v4 + 104))( v2,  enum case for Constants.diagnosticsTargetDirectoryPath(_:),  v5);
  uint64_t v11 = Constants.rawValue.getter(v10);
  uint64_t v33 = v12;
  uint64_t v34 = v11;
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v5);
  uint64_t v13 = enum case for URL.DirectoryHint.isDirectory(_:);
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 104);
  v14(v7, enum case for URL.DirectoryHint.isDirectory(_:), v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 56))(v8, 1LL, 1LL, v3);
  URL.init(filePath:directoryHint:relativeTo:)(v34, v33, v7, v8);
  uint64_t v15 = sub_10000D228(&qword_10007EF18);
  uint64_t v16 = swift_allocObject(v15, 64LL, 7LL);
  *(_OWORD *)(v16 + 16) = xmmword_100060C90;
  uint64_t v17 = UUID.init()(v16);
  uint64_t v18 = UUID.uuidString.getter(v17);
  uint64_t v20 = v19;
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v38);
  *(void *)(v16 + 32) = v18;
  *(void *)(v16 + 40) = v20;
  *(void *)(v16 + 48) = 0xD000000000000010LL;
  *(void *)(v16 + 56) = 0x8000000100062EE0LL;
  v14(v7, v13, v9);
  unint64_t v21 = sub_100011F34();
  URL.appending<A>(components:directoryHint:)(v16, v7, &type metadata for String, v21);
  swift_bridgeObjectRelease(v16);
  (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v7, v9);
  uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v1 + 8);
  *(void *)(v0 + 160) = v22;
  v22(v35, v3);
  BOOL v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16);
  v23(v35, v40, v3);
  type metadata accessor for Configuration(0LL);
  id v24 = v42;
  __int128 v25 = (void *)static Configuration.cloudKitContainer.getter(v24);
  *(_BYTE *)uint64_t v41 = v43;
  *(void *)(v41 + 8) = v24;
  v23(v41 + v44[6], v35, v3);
  *(void *)(v41 + v44[7]) = v25;
  id v26 = objc_allocWithZone(&OBJC_CLASS___CKOperationGroup);
  id v27 = v24;
  id v28 = v25;
  id v29 = [v26 init];
  id v46 = v29;
  sub_100019424(&v46, (uint64_t)v28);
  id v30 = v29;

  v22(v35, v3);
  *(void *)(v41 + v44[8]) = v30;
  sub_100011F78(v41, v45);
  uint64_t v31 = (void *)swift_task_alloc(dword_10007F4DC);
  *(void *)(v0 + 168) = v31;
  void *v31 = v0;
  v31[1] = sub_100011D84;
  return sub_100019134();
}

uint64_t sub_100011D84()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 168LL);
  *(void *)(*(void *)v1 + 176LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_100011E80;
  }
  else {
    uint64_t v3 = sub_100011DE8;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_100011DE8()
{
  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v2 = *(void *)(v0 + 128);
  uint64_t v3 = *(void *)(v0 + 104);
  uint64_t v5 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 80);
  uint64_t v7 = *(void *)(v0 + 40);
  uint64_t v6 = *(void *)(v0 + 48);
  sub_100011FBC(v6);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100011E80()
{
  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(v0 + 160);
  uint64_t v4 = *(void *)(v0 + 128);
  uint64_t v3 = *(void *)(v0 + 136);
  uint64_t v5 = *(void *)(v0 + 104);
  uint64_t v7 = *(void *)(v0 + 72);
  uint64_t v6 = *(void *)(v0 + 80);
  uint64_t v8 = *(void *)(v0 + 48);
  uint64_t v11 = *(void *)(v0 + 40);
  uint64_t v9 = *(void *)(v0 + 16);
  sub_100011FBC(v8);
  v2(v9, v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_100011F34()
{
  unint64_t result = qword_10007F200;
  if (!qword_10007F200)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_10007F200);
  }

  return result;
}

uint64_t sub_100011F78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DiagnosticFileCollector(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100011FBC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DiagnosticFileCollector(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100011FF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  *(void *)(a3 + 16) = a2;
  swift_errorRetain(a2);
  return swift_errorRelease(v5);
}

uint64_t *sub_100012054(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v19);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + a3[5]), (uint64_t *)((char *)a2 + a3[5]), v7);
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL))(v10, v11, v12);
    uint64_t v13 = a3[8];
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    uint64_t v14 = (uint64_t *)((char *)a1 + v13);
    uint64_t v15 = *(uint64_t *)((char *)a2 + v13);
    unint64_t v16 = *(uint64_t *)((char *)a2 + v13 + 8);
    sub_100012154(v15, v16);
    *uint64_t v14 = v15;
    v14[1] = v16;
    uint64_t v17 = a3[9];
    uint64_t v18 = *(uint64_t *)((char *)a2 + v17);
    *(uint64_t *)((char *)a1 + v17) = v18;
    swift_bridgeObjectRetain(v18);
  }

  return a1;
}

uint64_t sub_100012154(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain(result);
  }

  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100012198(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL);
  v5(a1, v4);
  v5(a1 + a2[5], v4);
  uint64_t v6 = a1 + a2[6];
  uint64_t v7 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL))(v6, v7);
  sub_10000D620(*(void *)(a1 + a2[8]), *(void *)(a1 + a2[8] + 8));
  return swift_bridgeObjectRelease(*(void *)(a1 + a2[9]));
}

uint64_t sub_10001222C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
  uint64_t v12 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  uint64_t v13 = (uint64_t *)(a1 + v12);
  uint64_t v14 = *(void *)(a2 + v12);
  unint64_t v15 = *(void *)(a2 + v12 + 8);
  sub_100012154(v14, v15);
  *uint64_t v13 = v14;
  v13[1] = v15;
  uint64_t v16 = a3[9];
  uint64_t v17 = *(void *)(a2 + v16);
  *(void *)(a1 + v16) = v17;
  swift_bridgeObjectRetain(v17);
  return a1;
}

uint64_t sub_100012300(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 24LL))(v9, v10, v11);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  uint64_t v12 = a3[8];
  uint64_t v13 = (uint64_t *)(a1 + v12);
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v15 = *v14;
  unint64_t v16 = v14[1];
  sub_100012154(*v14, v16);
  uint64_t v17 = *v13;
  unint64_t v18 = v13[1];
  *uint64_t v13 = v15;
  v13[1] = v16;
  sub_10000D620(v17, v18);
  uint64_t v19 = a3[9];
  uint64_t v20 = *(void *)(a2 + v19);
  uint64_t v21 = *(void *)(a1 + v19);
  *(void *)(a1 + v19) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  return a1;
}

uint64_t sub_1000123EC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32LL))(v9, v10, v11);
  uint64_t v12 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v12) = *(_OWORD *)(a2 + v12);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_1000124A8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40LL))(v9, v10, v11);
  uint64_t v12 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  uint64_t v13 = *(void *)(a1 + v12);
  unint64_t v14 = *(void *)(a1 + v12 + 8);
  *(_OWORD *)(a1 + v12) = *(_OWORD *)(a2 + v12);
  sub_10000D620(v13, v14);
  uint64_t v15 = a3[9];
  uint64_t v16 = *(void *)(a1 + v15);
  *(void *)(a1 + v15) = *(void *)(a2 + v15);
  swift_bridgeObjectRelease(v16);
  return a1;
}

uint64_t sub_100012578(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100012584);
}

uint64_t sub_100012584(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
    return v9(v10, a2, v8);
  }

  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 24);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }

  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 36));
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  return (v14 + 1);
}

uint64_t sub_10001262C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100012638);
}

uint64_t sub_100012638(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
    return v11(v12, a2, a2, v10);
  }

  uint64_t result = type metadata accessor for Date(0LL);
  uint64_t v14 = *(void *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 24);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }

  *(void *)(a1 + *(int *)(a4 + 36)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for PendingEventData(uint64_t a1)
{
  uint64_t result = qword_10007F260;
  if (!qword_10007F260) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PendingEventData);
  }
  return result;
}

uint64_t sub_100012718(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v5[0] = *(void *)(result - 8) + 64LL;
    v5[1] = v5[0];
    uint64_t result = type metadata accessor for Date(319LL);
    if (v4 <= 0x3F)
    {
      uint64_t v5[2] = *(void *)(result - 8) + 64LL;
      v5[3] = (char *)&value witness table for Builtin.Int64 + 64;
      v5[4] = &unk_100060CD8;
      v5[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
      swift_initStructMetadata(a1, 256LL, 6LL, v5, a1 + 16);
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1000127C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v33 = *v3;
  uint64_t v34 = a2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v37 = *(void *)(v6 - 8);
  uint64_t v38 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v35 = *(void *)(v9 - 8);
  uint64_t v36 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10000D5E8(0LL, &qword_10007F390, &OBJC_CLASS___OS_dispatch_source_ptr);
  sub_10000D5E8(0LL, &qword_10007F398, &OBJC_CLASS___OS_dispatch_queue_ptr);
  (*(void (**)(char *, void, uint64_t))(v13 + 104))( v15,  enum case for DispatchQoS.QoSClass.default(_:),  v12);
  uint64_t v16 = (void *)static OS_dispatch_queue.global(qos:)(v15);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  uint64_t v17 = static OS_dispatch_source.makeSignalSource(signal:queue:)(a1, v16);

  uint64_t ObjectType = swift_getObjectType(v17);
  uint64_t v19 = swift_allocObject(&unk_100075D80, 48LL, 7LL);
  *(_DWORD *)(v19 + 16) = a1;
  *(void *)(v19 + 24) = v34;
  *(void *)(v19 + 32) = a3;
  *(void *)(v19 + 40) = v33;
  aBlock[4] = sub_100012FA0;
  uint64_t v43 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100037AD4;
  aBlock[3] = &unk_100075D98;
  uint64_t v20 = _Block_copy(aBlock);
  uint64_t v21 = swift_retain(a3);
  static DispatchQoS.unspecified.getter(v21);
  sub_100012C90();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)(v11, v8, v20, ObjectType);
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v8, v38);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v11, v36);
  swift_release(v43);
  OS_dispatch_source.resume()();
  uint64_t v22 = v39;
  BOOL v23 = (void *)(v39 + 112);
  unint64_t v24 = swift_beginAccess(v39 + 112, aBlock, 0LL, 0LL);
  uint64_t v25 = *(void *)(v22 + 112);
  if (*(void *)(v25 + 16) && (unint64_t v24 = sub_10005A374(a1), (v26 & 1) != 0))
  {
    uint64_t v27 = *(void *)(*(void *)(v25 + 56) + 8 * v24);
    swift_getObjectType(v27);
    swift_unknownObjectRetain(v27);
    OS_dispatch_source.cancel()();
    swift_unknownObjectRelease(v27);
  }

  else
  {
    id v28 = (void (__cdecl *)(int))SIG_IGN.getter(v24);
    signal(a1, v28);
  }

  swift_beginAccess(v23, v41, 33LL, 0LL);
  swift_unknownObjectRetain(v17);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v23);
  uint64_t v40 = *v23;
  *BOOL v23 = 0x8000000000000000LL;
  sub_10005C510(v17, a1, isUniquelyReferenced_nonNull_native);
  uint64_t v30 = *v23;
  *BOOL v23 = v40;
  swift_bridgeObjectRelease(v30);
  swift_endAccess(v41);
  return swift_unknownObjectRelease(v17);
}

uint64_t sub_100012B08(int a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100013014( &qword_10007F3B8,  v11,  (uint64_t (*)(uint64_t))type metadata accessor for SignalHandler,  (uint64_t)&unk_100060D28);
  uint64_t v14 = sub_100013014( &qword_10007F388,  v13,  (uint64_t (*)(uint64_t))type metadata accessor for SignalHandler,  (uint64_t)&unk_100060D58);
  uint64_t v15 = static LoggedObject<>.logger.getter(a4, v12, v14);
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    unint64_t v18 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)unint64_t v18 = 67109120;
    int v22 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v18 + 4);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Received signal %d", v18, 8u);
    swift_slowDealloc(v18, -1LL, -1LL);
  }

  uint64_t v19 = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return a2(v19);
}

uint64_t sub_100012C90()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags(0LL);
  int v5 = _swiftEmptyArrayStorage;
  uint64_t v1 = sub_100013014( &qword_10007F3A0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v2 = sub_10000D228(&qword_10007F3A8);
  unint64_t v3 = sub_100012FC8();
  return dispatch thunk of SetAlgebra.init<A>(_:)(&v5, v2, v3, v0, v1);
}

uint64_t sub_100012D28()
{
  uint64_t result = swift_beginAccess(v0 + 112, v17, 1LL, 0LL);
  int64_t v2 = 0LL;
  uint64_t v3 = *(void *)(v0 + 112);
  *(void *)(v0 + 112) = &_swiftEmptyDictionarySingleton;
  uint64_t v4 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  uint64_t v6 = v3 + 64;
  unint64_t v7 = v5 & *(void *)(v3 + 64);
  int64_t v8 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v2 << 6);
      goto LABEL_5;
    }

    int64_t v14 = v2 + 1;
    if (__OFADD__(v2, 1LL))
    {
      __break(1u);
      goto LABEL_23;
    }

    if (v14 >= v8) {
      return swift_release(v3);
    }
    unint64_t v15 = *(void *)(v6 + 8 * v14);
    ++v2;
    if (!v15)
    {
      int64_t v2 = v14 + 1;
      if (v14 + 1 >= v8) {
        return swift_release(v3);
      }
      unint64_t v15 = *(void *)(v6 + 8 * v2);
      if (!v15)
      {
        int64_t v2 = v14 + 2;
        if (v14 + 2 >= v8) {
          return swift_release(v3);
        }
        unint64_t v15 = *(void *)(v6 + 8 * v2);
        if (!v15) {
          break;
        }
      }
    }

LABEL_20:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v10 = __clz(__rbit64(v15)) + (v2 << 6);
LABEL_5:
    int v11 = *(_DWORD *)(*(void *)(v3 + 48) + 4 * v10);
    uint64_t v12 = *(void *)(*(void *)(v3 + 56) + 8 * v10);
    swift_getObjectType(v12);
    swift_unknownObjectRetain(v12);
    OS_dispatch_source.cancel()();
    uint64_t v13 = (void (__cdecl *)(int))SIG_DFL.getter();
    signal(v11, v13);
    uint64_t result = swift_unknownObjectRelease(v12);
  }

  int64_t v16 = v14 + 3;
  if (v16 >= v8) {
    return swift_release(v3);
  }
  unint64_t v15 = *(void *)(v6 + 8 * v16);
  if (v15)
  {
    int64_t v2 = v16;
    goto LABEL_20;
  }

  while (1)
  {
    int64_t v2 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v2 >= v8) {
      return swift_release(v3);
    }
    unint64_t v15 = *(void *)(v6 + 8 * v2);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }

    int v11 = (v14 - 1) & v14;
    uint64_t v12 = __clz(__rbit64(v14)) + (v7 << 6);
LABEL_21:
    int64_t v16 = *(void *)(v0 + 296);
    os_log_type_t v17 = *(void *)(v0 + 176);
    (*(void (**)(uint64_t, unint64_t, uint64_t, __n128))(v2 + 16))( v16,  *(void *)(v57 + 48) + *(void *)(v2 + 72) * v12,  v17,  v6);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v2 + 56))(v16, 0LL, 1LL, v17);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v16, 1LL, v17) == 1)
    {
      uint64_t v47 = *(void *)(v0 + 112);
LABEL_31:
      swift_release(v47);
      unint64_t v49 = **(void **)(v0 + 104);
      uint64_t v50 = sub_10000D228(&qword_10007FBD0);
      *(void *)(v0 + 304) = v50;
      uint64_t v51 = sub_10000D228((uint64_t *)&unk_10007EC20);
      ThrowingTaskGroup.makeAsyncIterator()(v49, v50, v51, &protocol self-conformance witness table for Error);
      uint64_t v52 = (void *)swift_task_alloc(_sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTu[1]);
      *(void *)(v0 + 312) = v52;
      *uint64_t v52 = v0;
      v52[1] = sub_10002F774;
      _sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF( *(void *)(v0 + 264),  0LL,  0LL,  *(void *)(v0 + 272),  v0 + 72);
      return;
    }

    uint64_t v58 = v11;
    uint64_t v59 = v7;
    unint64_t v18 = *(void *)(v0 + 296);
    uint64_t v19 = *(void *)(v0 + 256);
    uint64_t v63 = v19;
    uint64_t v64 = *(void *)(v0 + 248);
    uint64_t v20 = *(void *)(v0 + 240);
    uint64_t v21 = v2;
    int v22 = *(void *)(v0 + 216);
    BOOL v60 = v22;
    unint64_t v61 = *(void *)(v0 + 232);
    id v62 = *(void *)(v0 + 192);
    uint64_t v23 = *(void *)(v0 + 176);
    unint64_t v24 = *(void *)(v0 + 120);
    uint64_t v25 = type metadata accessor for TaskPriority(0LL);
    char v26 = *(void *)(v25 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56))(v19, 1LL, 1LL, v25);
    sub_100034C8C(v24, v20);
    uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 32);
    v27(v22, v18, v23);
    id v28 = *(unsigned __int8 *)(v56 + 80);
    id v29 = (v28 + 32) & ~v28;
    uint64_t v30 = *(unsigned __int8 *)(v21 + 80);
    uint64_t v31 = (v61 + v30 + v29) & ~v30;
    uint64_t v32 = swift_allocObject(&unk_1000768A8, v31 + v62, v28 | v30 | 7);
    *(void *)(v32 + 16) = 0LL;
    uint64_t v33 = (uint64_t *)(v32 + 16);
    *(void *)(v32 + 24) = 0LL;
    sub_100034DA0(v20, v32 + v29);
    v27(v32 + v31, v60, v23);
    sub_10001C5D8(v63, v64);
    uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v64, 1LL, v25);
    uint64_t v35 = *(void *)(v0 + 248);
    if ((_DWORD)v34 == 1)
    {
      sub_10000D5AC(*(void *)(v0 + 248), &qword_10007EE68);
      uint64_t v36 = 0LL;
      uint64_t v37 = *v33;
      if (*v33) {
        goto LABEL_24;
      }
    }

    else
    {
      uint64_t v43 = TaskPriority.rawValue.getter(v34);
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v35, v25);
      uint64_t v36 = v43;
      uint64_t v37 = *v33;
      if (*v33)
      {
LABEL_24:
        uint64_t v38 = *(void *)(v32 + 24);
        uint64_t ObjectType = swift_getObjectType(v37);
        swift_unknownObjectRetain(v37);
        uint64_t v40 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v38);
        BOOL v42 = v41;
        swift_unknownObjectRelease(v37);
        goto LABEL_27;
      }
    }

    uint64_t v40 = 0LL;
    BOOL v42 = 0LL;
LABEL_27:
    int64_t v2 = v55;
    uint64_t v5 = v58;
    unint64_t v7 = v59;
    uint64_t v44 = **(void **)(v0 + 104);
    uint64_t v45 = sub_10000D228(&qword_10007FBD0);
    id v46 = v42 | v40;
    if (v42 | v40)
    {
      id v46 = v0 + 16;
      *(void *)(v0 + 16) = 0LL;
      *(void *)(v0 + 24) = 0LL;
      *(void *)(v0 + 32) = v40;
      *(void *)(v0 + 40) = v42;
    }

    int64_t v8 = *(void *)(v0 + 256);
    *(void *)(v0 + 48) = 1LL;
    *(void *)(v0 + 56) = v46;
    *(void *)(v0 + 64) = v44;
    unint64_t v9 = swift_task_create(v36 | 0x3100, v0 + 48, v45, &unk_10007FC08, v32);
    swift_release(v9);
    sub_10000D5AC(v8, &qword_10007EE68);
  }

  unint64_t v15 = v13 + 3;
  if (v15 >= v54)
  {
LABEL_30:
    uint64_t v48 = *(void *)(v0 + 112);
    (*(void (**)(void, uint64_t, uint64_t, void, __n128))(v2 + 56))( *(void *)(v0 + 296),  1LL,  1LL,  *(void *)(v0 + 176),  v6);
    uint64_t v47 = v48;
    goto LABEL_31;
  }

  int64_t v14 = *(void *)(v53 + 8 * v15);
  if (v14)
  {
    unint64_t v7 = v15;
    goto LABEL_20;
  }

  while (1)
  {
    unint64_t v7 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v7 >= v54) {
      goto LABEL_30;
    }
    int64_t v14 = *(void *)(v53 + 8 * v7);
    ++v15;
    if (v14) {
      goto LABEL_20;
    }
  }

LABEL_23:
  __break(1u);
  return result;
}

    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  unint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }

  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10000D5E8(0LL, &qword_10007FA28, &OBJC_CLASS___CKRecord_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }

    sub_10005D408();
    uint64_t v25 = (void *)v30;
    goto LABEL_6;
  }

  ((void (*)(void, void, void))v21)( *(void *)(v0 + 160),  *(void *)(v0 + 136),  *(void *)(v0 + 144));
  uint64_t v40 = swift_isUniquelyReferenced_nonNull_native(v26);
  *(void *)(v0 + 88) = v26;
  uint64_t v30 = sub_10005A3A8(v27);
  BOOL v42 = *(void *)(v26 + 16);
  uint64_t v43 = (v41 & 1) == 0;
  uint64_t v44 = v42 + v43;
  if (__OFADD__(v42, v43))
  {
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v45 = (uint64_t (*)(unint64_t, uint64_t, uint64_t))v21;
  id v46 = v41;
  if (*(void *)(*v25 + 24LL) >= v44)
  {
    if ((v40 & 1) == 0) {
      sub_10005D408();
    }
  }

  else
  {
    uint64_t v47 = *(void *)(v0 + 200);
    sub_10005B40C(v44, v40);
    uint64_t v48 = sub_10005A3A8(v47);
    if ((v46 & 1) != (v49 & 1)) {
      return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(*(void *)(v0 + 176));
    }
    uint64_t v30 = v48;
  }

  uint64_t v52 = *(void **)(v0 + 88);
  if ((v46 & 1) != 0)
  {
    (*(void (**)(unint64_t, void, void))(*(void *)(v0 + 152) + 40LL))( v52[7] + *(void *)(*(void *)(v0 + 152) + 72LL) * v30,  *(void *)(v0 + 160),  *(void *)(v0 + 144));
LABEL_20:
    id v62 = *(void *)(v0 + 200);
    uint64_t v63 = *(void *)(v0 + 176);
    uint64_t v64 = *(void *)(v0 + 184);
    uint64_t v39 = *(void *)(v0 + 88);
    swift_bridgeObjectRelease(0x8000000000000000LL);
    uint64_t v38 = *(void (**)(unint64_t, uint64_t))(v64 + 8);
    v38(v62, v63);
    goto LABEL_21;
  }

  char v53 = *(void *)(v0 + 200);
  uint64_t v54 = *(void *)(v0 + 176);
  uint64_t v55 = *(void *)(v0 + 184);
  uint64_t v57 = *(void *)(v0 + 152);
  uint64_t v56 = *(void *)(v0 + 160);
  uint64_t v58 = *(void *)(v0 + 144);
  v52[(v30 >> 6) + 8] |= 1LL << v30;
  v22(v52[6] + *(void *)(v55 + 72) * v30, v53, v54);
  uint64_t result = v45(v52[7] + *(void *)(v57 + 72) * v30, v56, v58);
  uint64_t v59 = v52[2];
  BOOL v60 = __OFADD__(v59, 1LL);
  unint64_t v61 = v59 + 1;
  if (!v60)
  {
    v52[2] = v61;
    goto LABEL_20;
  }

  __break(1u);
  return result;
}

    unint64_t v7 = (v15 - 1) & v15;
    uint64_t v12 = __clz(__rbit64(v15)) + (v16 << 6);
    unint64_t v10 = v16;
  }

  os_log_type_t v17 = v10 + 5;
  if (v10 + 5 >= v8)
  {
LABEL_39:
    sub_100026D14(a1);
    return;
  }

  unint64_t v15 = *(void *)(v4 + 8 * v17);
  if (v15)
  {
    int64_t v16 = v10 + 5;
    goto LABEL_23;
  }

  while (1)
  {
    int64_t v16 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v16 >= v8) {
      goto LABEL_39;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v16);
    ++v17;
    if (v15) {
      goto LABEL_23;
    }
  }

        sub_100058188(v0 + 16);
        uint64_t v20 = 0LL;
        uint64_t v21 = 0LL;
LABEL_24:
        uint64_t v36 = *(void *)(v0 + 136);
        uint64_t v37 = *(void *)(v0 + 120);
        sub_100013014( &qword_1000805A0,  v19,  (uint64_t (*)(uint64_t))type metadata accessor for CoreDataDatabase,  (uint64_t)&unk_100061F34);
        static LoggedObject.logger.getter(v36);
        swift_bridgeObjectRetain_n(v21, 2LL);
        uint64_t v38 = swift_bridgeObjectRetain_n(v37, 2LL);
        uint64_t v39 = (os_log_s *)Logger.logObject.getter(v38);
        uint64_t v40 = static os_log_type_t.default.getter();
        uint64_t v41 = os_log_type_enabled(v39, v40);
        BOOL v42 = *(void *)(v0 + 176);
        uint64_t v43 = *(void *)(v0 + 144);
        uint64_t v71 = *(void *)(v0 + 152);
        uint64_t v44 = *(void *)(v0 + 120);
        if (v41)
        {
          uint64_t v45 = *(void *)(v0 + 112);
          uint64_t v67 = *(void *)(v0 + 176);
          id v46 = swift_slowAlloc(22LL, -1LL);
          uint64_t v66 = swift_slowAlloc(64LL, -1LL);
          uint64_t v76 = v66;
          *(_DWORD *)id v46 = 136446466;
          uint64_t v69 = v3;
          swift_bridgeObjectRetain(v44);
          *(void *)(v0 + 96) = sub_100046274(v45, v44, &v76);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v46 + 4);
          swift_bridgeObjectRelease_n(v44, 3LL);
          *(_WORD *)(v46 + 12) = 2080;
          *(void *)(v0 + 48) = v20;
          *(void *)(v0 + 56) = v21;
          swift_bridgeObjectRetain(v21);
          uint64_t v47 = sub_10000D228(&qword_100080630);
          uint64_t v48 = String.init<A>(describing:)(v0 + 48, v47);
          uint64_t v50 = v49;
          *(void *)(v0 + 88) = sub_100046274(v48, v49, &v76);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v46 + 14);
          swift_bridgeObjectRelease(v50);
          swift_bridgeObjectRelease_n(v21, 2LL);
          _os_log_impl( (void *)&_mh_execute_header,  v39,  v40,  "Got metadata value for '%{public}s': %s",  (uint8_t *)v46,  0x16u);
          swift_arrayDestroy(v66, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v66, -1LL, -1LL);
          swift_slowDealloc(v46, -1LL, -1LL);

          (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v67, v43);
        }

        else
        {
          swift_bridgeObjectRelease_n(*(void *)(v0 + 120), 2LL);
          swift_bridgeObjectRelease_n(v21, 2LL);

          (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v42, v43);
        }

        goto LABEL_36;
      }

      char *v11 = 0u;
      *(_OWORD *)(v0 + 32) = 0u;
      swift_bridgeObjectRelease(v16);
    }

    else
    {
      char *v11 = 0u;
      *(_OWORD *)(v0 + 32) = 0u;
    }

    swift_bridgeObjectRelease(v12);
    goto LABEL_23;
  }

    int64_t v16 = (v25 - 1) & v25;
    int v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_24:
    uint64_t v27 = *(void *)(v7 + 72);
    id v28 = *(void *)(v10 + 48) + v27 * v22;
    if ((v45 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v9, v28, v6);
      id v29 = *(void *)(*(void *)(v10 + 56) + 8 * v22);
    }

    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, v28, v6);
      id v29 = *(void *)(*(void *)(v10 + 56) + 8 * v22);
      swift_errorRetain(v29);
    }

    uint64_t v30 = *(void *)(v12 + 40);
    uint64_t v31 = sub_100013014( &qword_10007F4A0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v30, v6, v31);
    uint64_t v32 = -1LL << *(_BYTE *)(v12 + 32);
    uint64_t v33 = result & ~v32;
    uint64_t v34 = v33 >> 6;
    if (((-1LL << v33) & ~*(void *)(v17 + 8 * (v33 >> 6))) != 0)
    {
      uint64_t v20 = __clz(__rbit64((-1LL << v33) & ~*(void *)(v17 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v35 = 0;
      uint64_t v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v37 = v34 == v36;
        if (v34 == v36) {
          uint64_t v34 = 0LL;
        }
        v35 |= v37;
        uint64_t v38 = *(void *)(v17 + 8 * v34);
      }

      while (v38 == -1);
      uint64_t v20 = __clz(__rbit64(~v38)) + (v34 << 6);
    }

    *(void *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v20;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))( *(void *)(v12 + 48) + v27 * v20,  v9,  v6);
    *(void *)(*(void *)(v12 + 56) + 8 * v20) = v29;
    ++*(void *)(v12 + 16);
  }

  swift_release(v10);
  uint64_t v3 = v41;
  unint64_t v24 = v43;
  if ((v45 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v39 = 1LL << *(_BYTE *)(v10 + 32);
  if (v39 >= 64) {
    bzero(v24, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    void *v24 = -1LL << v39;
  }
  *(void *)(v10 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v10);
  *uint64_t v3 = v12;
  return result;
}

    int64_t v16 = (v25 - 1) & v25;
    int v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_24:
    uint64_t v27 = *(void *)(v7 + 72);
    id v28 = *(void *)(v10 + 48) + v27 * v22;
    if ((v45 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v9, v28, v6);
      id v29 = *(void *)(*(void *)(v10 + 56) + 8 * v22);
    }

    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, v28, v6);
      id v29 = *(void *)(*(void *)(v10 + 56) + 8 * v22);
      swift_bridgeObjectRetain(v29);
    }

    uint64_t v30 = *(void *)(v12 + 40);
    uint64_t v31 = sub_100013014( &qword_10007F4A0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v30, v6, v31);
    uint64_t v32 = -1LL << *(_BYTE *)(v12 + 32);
    uint64_t v33 = result & ~v32;
    uint64_t v34 = v33 >> 6;
    if (((-1LL << v33) & ~*(void *)(v17 + 8 * (v33 >> 6))) != 0)
    {
      uint64_t v20 = __clz(__rbit64((-1LL << v33) & ~*(void *)(v17 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v35 = 0;
      uint64_t v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v37 = v34 == v36;
        if (v34 == v36) {
          uint64_t v34 = 0LL;
        }
        v35 |= v37;
        uint64_t v38 = *(void *)(v17 + 8 * v34);
      }

      while (v38 == -1);
      uint64_t v20 = __clz(__rbit64(~v38)) + (v34 << 6);
    }

    *(void *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v20;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))( *(void *)(v12 + 48) + v27 * v20,  v9,  v6);
    *(void *)(*(void *)(v12 + 56) + 8 * v20) = v29;
    ++*(void *)(v12 + 16);
  }

  swift_release(v10);
  uint64_t v3 = v41;
  unint64_t v24 = v43;
  if ((v45 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v39 = 1LL << *(_BYTE *)(v10 + 32);
  if (v39 >= 64) {
    bzero(v24, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    void *v24 = -1LL << v39;
  }
  *(void *)(v10 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v10);
  *uint64_t v3 = v12;
  return result;
}

    int64_t v16 = (v25 - 1) & v25;
    int v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_24:
    uint64_t v27 = *(void *)(v7 + 72);
    id v28 = *(void *)(v10 + 48) + v27 * v22;
    if ((v45 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v9, v28, v6);
      id v29 = *(void *)(*(void *)(v10 + 56) + 8 * v22);
    }

    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, v28, v6);
      id v29 = *(void *)(*(void *)(v10 + 56) + 8 * v22);
      swift_errorRetain(v29);
    }

    uint64_t v30 = *(void *)(v12 + 40);
    uint64_t v31 = sub_100013014( &qword_10007F4A0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v30, v6, v31);
    uint64_t v32 = -1LL << *(_BYTE *)(v12 + 32);
    uint64_t v33 = result & ~v32;
    uint64_t v34 = v33 >> 6;
    if (((-1LL << v33) & ~*(void *)(v17 + 8 * (v33 >> 6))) != 0)
    {
      uint64_t v20 = __clz(__rbit64((-1LL << v33) & ~*(void *)(v17 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v35 = 0;
      uint64_t v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v37 = v34 == v36;
        if (v34 == v36) {
          uint64_t v34 = 0LL;
        }
        v35 |= v37;
        uint64_t v38 = *(void *)(v17 + 8 * v34);
      }

      while (v38 == -1);
      uint64_t v20 = __clz(__rbit64(~v38)) + (v34 << 6);
    }

    *(void *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v20;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))( *(void *)(v12 + 48) + v27 * v20,  v9,  v6);
    *(void *)(*(void *)(v12 + 56) + 8 * v20) = v29;
    ++*(void *)(v12 + 16);
  }

  swift_release(v10);
  uint64_t v3 = v41;
  unint64_t v24 = v43;
  if ((v45 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v39 = 1LL << *(_BYTE *)(v10 + 32);
  if (v39 >= 64) {
    bzero(v24, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    void *v24 = -1LL << v39;
  }
  *(void *)(v10 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v10);
  *uint64_t v3 = v12;
  return result;
}

uint64_t sub_100012EB8()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for SignalHandler()
{
  return objc_opt_self(&OBJC_CLASS____TtC11homeeventsd13SignalHandler);
}

uint64_t sub_100012EFC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for SignalHandler();
  uint64_t v5 = sub_100013014( &qword_10007F388,  v4,  (uint64_t (*)(uint64_t))type metadata accessor for SignalHandler,  (uint64_t)&unk_100060D58);
  return static LoggedObject<>.logger.getter(v3, a2, v5);
}

uint64_t sub_100012F58()
{
  uint64_t v0 = type metadata accessor for SignalHandler();
  return static LoggedObject.logCategory.getter(v0);
}

uint64_t sub_100012F7C()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_100012FA0()
{
  return sub_100012B08( *(_DWORD *)(v0 + 16),  *(uint64_t (**)(uint64_t))(v0 + 24),  *(void *)(v0 + 32),  *(void *)(v0 + 40));
}

uint64_t sub_100012FB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100012FC0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

unint64_t sub_100012FC8()
{
  unint64_t result = qword_10007F3B0;
  if (!qword_10007F3B0)
  {
    uint64_t v1 = sub_100004D58(&qword_10007F3A8);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10007F3B0);
  }

  return result;
}

uint64_t sub_100013014(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = a3(a2);
    uint64_t result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_100013054(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100058E3C(*a1, *a2);
}

Swift::Int sub_100013060()
{
  int v1 = *v0;
  Hasher.init(_seed:)(v7);
  unint64_t v2 = 0xE600000000000000LL;
  uint64_t v3 = 0x6D617374656ALL;
  if (v1 != 1)
  {
    uint64_t v3 = 0x64696C6176LL;
    unint64_t v2 = 0xE500000000000000LL;
  }

  if (v1) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0x6873617263LL;
  }
  if (v1) {
    unint64_t v5 = v2;
  }
  else {
    unint64_t v5 = 0xE500000000000000LL;
  }
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_1000130F4(uint64_t a1)
{
  unint64_t v2 = 0xE600000000000000LL;
  uint64_t v3 = 0x6D617374656ALL;
  if (*v1 != 1)
  {
    uint64_t v3 = 0x64696C6176LL;
    unint64_t v2 = 0xE500000000000000LL;
  }

  if (*v1) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0x6873617263LL;
  }
  if (*v1) {
    unint64_t v5 = v2;
  }
  else {
    unint64_t v5 = 0xE500000000000000LL;
  }
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100013164()
{
  int v1 = *v0;
  Hasher.init(_seed:)(v7);
  unint64_t v2 = 0xE600000000000000LL;
  uint64_t v3 = 0x6D617374656ALL;
  if (v1 != 1)
  {
    uint64_t v3 = 0x64696C6176LL;
    unint64_t v2 = 0xE500000000000000LL;
  }

  if (v1) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0x6873617263LL;
  }
  if (v1) {
    unint64_t v5 = v2;
  }
  else {
    unint64_t v5 = 0xE500000000000000LL;
  }
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

unint64_t sub_1000131F4@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_100015460(*a1);
  *a2 = result;
  return result;
}

void sub_100013220(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE500000000000000LL;
  unint64_t v4 = 0xE600000000000000LL;
  uint64_t v5 = 0x6D617374656ALL;
  if (v2 != 1)
  {
    uint64_t v5 = 0x64696C6176LL;
    unint64_t v4 = 0xE500000000000000LL;
  }

  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x6873617263LL;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

void sub_100013274(void *a1@<X8>)
{
  *a1 = &off_1000755A0;
}

id sub_100013284(uint64_t a1, char a2, char a3)
{
  uint64_t v7 = &v3[OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_previousLaunchTimeMetadataKey];
  *uint64_t v7 = 0xD000000000000012LL;
  v7[1] = 0x8000000100062F90LL;
  int64_t v8 = &v3[OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_previousLaunchTime];
  *(void *)int64_t v8 = 0LL;
  v8[8] = 1;
  unint64_t v9 = &v3[OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_numLaunchesWithPendingEvents];
  *(void *)unint64_t v9 = 0LL;
  v9[8] = 1;
  unint64_t v10 = &v3[OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_numPendingEventsAtLaunch];
  *(void *)unint64_t v10 = 0LL;
  v10[8] = 1;
  *(void *)&v3[OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_pendingEventsFetchFailureCount] = -1LL;
  v3[OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_previousExitType] = 3;
  int v11 = &v3[OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_previousExitReason];
  void *v11 = 0LL;
  v11[1] = 0LL;
  uint64_t v12 = OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_metricsManager;
  type metadata accessor for MetricsManager(0LL);
  uint64_t v13 = v3;
  *(void *)&v3[v12] = static MetricsManager.sharedInstance.getter();
  sub_1000154A8(a1, (uint64_t)&v13[OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_database]);
  v13[OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_attributedToFakeData] = a2;
  v13[OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_launchedByClientRequest] = a3;

  v16.receiver = v13;
  v16.super_class = (Class)type metadata accessor for ProcessLaunchLogEvent();
  id v14 = objc_msgSendSuper2(&v16, "init");
  sub_1000154F0(a1);
  return v14;
}

uint64_t sub_1000133E0()
{
  v1[2] = v0;
  v1[3] = swift_getObjectType(v0);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  v1[4] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[5] = v3;
  v1[6] = swift_task_alloc((*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v4 = (void *)swift_task_alloc(dword_10007F474);
  v1[7] = v4;
  *unint64_t v4 = v1;
  v4[1] = sub_10001345C;
  return sub_1000135E4();
}

uint64_t sub_10001345C()
{
  return swift_task_switch(sub_1000134B0, 0LL, 0LL);
}

uint64_t sub_1000134B0()
{
  id v1 = [(id)objc_opt_self(RBSProcessHandle) currentProcess];
  id v2 = [v1 lastExitContext];

  if (v2)
  {
    sub_1000142D4(v2);
  }

  else
  {
    uint64_t v3 = *(void *)(v0 + 24);
    sub_100015530();
    uint64_t v4 = static LoggedObject.logger.getter(v3);
    uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
    uint64_t v6 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v5, (os_log_type_t)v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  (os_log_type_t)v6,  "No lastExitContext found for current process, not setting exit properties",  v7,  2u);
      swift_slowDealloc(v7, -1LL, -1LL);
    }

    uint64_t v9 = *(void *)(v0 + 40);
    uint64_t v8 = *(void *)(v0 + 48);
    uint64_t v10 = *(void *)(v0 + 32);

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  }

  swift_task_dealloc(*(void *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000135E4()
{
  v1[19] = v0;
  v1[20] = swift_getObjectType(v0);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  v1[21] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[22] = v3;
  unint64_t v4 = (*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[23] = swift_task_alloc(v4);
  v1[24] = swift_task_alloc(v4);
  v1[25] = swift_task_alloc(v4);
  v1[26] = swift_task_alloc(v4);
  return swift_task_switch(sub_100013678, 0LL, 0LL);
}

uint64_t sub_100013678()
{
  if (*(void *)(v0 + 80))
  {
    uint64_t v1 = *(void *)(v0 + 152);
    sub_100010044((__int128 *)(v0 + 56), v0 + 16);
    sub_10000D408((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v2 = v1 + OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_previousLaunchTimeMetadataKey;
    uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_previousLaunchTimeMetadataKey);
    *(void *)(v0 + 216) = v3;
    uint64_t v4 = *(void *)(v2 + 8);
    *(void *)(v0 + 224) = v4;
    uint64_t v5 = (void *)swift_task_alloc(dword_10008063C);
    *(void *)(v0 + 232) = v5;
    void *v5 = v0;
    v5[1] = sub_10001381C;
    return sub_100053D20(v3, v4);
  }

  else
  {
    uint64_t v7 = *(void *)(v0 + 160);
    sub_1000154F0(v0 + 56);
    sub_100015530();
    uint64_t v8 = static LoggedObject.logger.getter(v7);
    uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      int v11 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)int v11 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  v10,  "Cannot call setLaunchProperties without a valid database -- setting all properties to nil",  v11,  2u);
      swift_slowDealloc(v11, -1LL, -1LL);
    }

    uint64_t v13 = *(void *)(v0 + 176);
    uint64_t v12 = *(void *)(v0 + 184);
    uint64_t v14 = *(void *)(v0 + 168);

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    uint64_t v15 = *(void *)(v0 + 200);
    uint64_t v17 = *(void *)(v0 + 184);
    uint64_t v16 = *(void *)(v0 + 192);
    swift_task_dealloc(*(void *)(v0 + 208));
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_10001381C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 232);
  *(void *)(v3 + 240) = a1;
  *(void *)(v3 + 248) = a2;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_100013878, 0LL, 0LL);
}

uint64_t sub_100013878()
{
  uint64_t v1 = *(void *)(v0 + 248);
  if (v1)
  {
    *(void *)(v0 + 136) = 0LL;
    uint64_t v2 = swift_task_alloc(32LL);
    *(void *)(v2 + 16) = v0 + 136;
    uint64_t v3 = *(void *)(v0 + 240);
    if ((v1 & 0x1000000000000000LL) != 0
      || (uint64_t v4 = *(void *)(v0 + 248), !(v4 & 0x2000000000000000LL | v3 & 0x1000000000000000LL)))
    {
      _StringGuts._slowWithCString<A>(_:)(sub_100015574, v2, *(void *)(v0 + 240), v1, &type metadata for Bool);
      swift_bridgeObjectRelease(v1);
      int v21 = *(unsigned __int8 *)(v0 + 304);
    }

    else
    {
      uint64_t v5 = swift_task_alloc(32LL);
      *(void *)(v5 + 16) = sub_100015574;
      *(void *)(v5 + 24) = v2;
      if ((v4 & 0x2000000000000000LL) != 0)
      {
        uint64_t v14 = *(void *)(v0 + 240);
        uint64_t v15 = *(void *)(v0 + 248) & 0xFFFFFFFFFFFFFFLL;
        *(void *)(v0 + 96) = v14;
        *(void *)(v0 + 104) = v15;
        int v21 = (v14 > 0x20u || ((0x100003E01uLL >> v14) & 1) == 0)
           && (uint64_t v16 = (_BYTE *)_swift_stdlib_strtod_clocale(v0 + 96, v0 + 136)) != 0LL
           && *v16 == 0;
        swift_bridgeObjectRelease(v1);
        swift_task_dealloc(v5);
      }

      else
      {
        if ((v3 & 0x1000000000000000LL) != 0)
        {
          ((void (*)(uint64_t *__return_ptr, uint64_t))sub_100015574)( v36,  (*(void *)(v0 + 248) & 0xFFFFFFFFFFFFFFFLL) + 32);
        }

        else
        {
          uint64_t v31 = _StringObject.sharedUTF8.getter(*(void *)(v0 + 240), v1);
          (*(void (**)(uint64_t *__return_ptr, uint64_t))(v5 + 16))(v36, v31);
        }

        int v21 = LOBYTE(v36[0]);
        swift_task_dealloc(v5);
        swift_bridgeObjectRelease(v1);
      }
    }

    uint64_t v22 = *(void *)(v0 + 152);
    swift_task_dealloc(v2);
    uint64_t v23 = *(void *)(v0 + 136);
    if (!v21) {
      uint64_t v23 = 0LL;
    }
    uint64_t v24 = v22 + OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_previousLaunchTime;
    *(void *)uint64_t v24 = v23;
    *(_BYTE *)(v24 + 8) = v21 ^ 1;
  }

  else
  {
    uint64_t v7 = *(void **)(v0 + 152);
    uint64_t v6 = *(void *)(v0 + 160);
    sub_100015530();
    static LoggedObject.logger.getter(v6);
    uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v9 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v11 = *(void *)(v0 + 216);
      unint64_t v10 = *(void *)(v0 + 224);
      uint64_t v33 = *(void *)(v0 + 176);
      uint64_t v34 = *(void *)(v0 + 168);
      uint64_t v35 = *(void *)(v0 + 208);
      uint64_t v32 = *(void **)(v0 + 152);
      uint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v13 = swift_slowAlloc(32LL, -1LL);
      v36[0] = v13;
      *(_DWORD *)uint64_t v12 = 136446210;
      swift_bridgeObjectRetain(v10);
      *(void *)(v0 + 128) = sub_100046274(v11, v10, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v12 + 4);

      swift_bridgeObjectRelease(v10);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Found no value for %{public}s in metadata store", v12, 0xCu);
      swift_arrayDestroy(v13, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1LL, -1LL);
      swift_slowDealloc(v12, -1LL, -1LL);

      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v35, v34);
    }

    else
    {
      uint64_t v17 = *(void *)(v0 + 208);
      uint64_t v18 = *(void *)(v0 + 168);
      uint64_t v19 = *(void *)(v0 + 176);
      uint64_t v20 = *(void **)(v0 + 152);

      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
    }
  }

  uint64_t v25 = *(void **)(v0 + 152);
  sub_10000D408((void *)(v0 + 16), *(void *)(v0 + 40));
  uint64_t v26 = Double.description.getter([v25 startTime]);
  uint64_t v28 = v27;
  *(void *)(v0 + 2sub_1000154A8(*(void *)(v0 + 152) + OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_database, v0 + 56) = v27;
  id v29 = (void *)swift_task_alloc(dword_10008062C);
  *(void *)(v0 + 264) = v29;
  *id v29 = v0;
  v29[1] = sub_100013C60;
  return sub_100052EA0(*(void *)(v0 + 216), *(void *)(v0 + 224), v26, v28);
}

uint64_t sub_100013C60()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 264);
  *(void *)(*v1 + 272) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_100013D20;
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v2 + 256));
    uint64_t v4 = sub_100013CCC;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_100013CCC()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10008061C);
  v0[35] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100013FE8;
  return sub_100057770();
}

uint64_t sub_100013D20()
{
  uint64_t v1 = (void *)v0[19];
  uint64_t v2 = v0[34];
  uint64_t v3 = v0[20];
  swift_bridgeObjectRelease(v0[32]);
  sub_100015530();
  static LoggedObject.logger.getter(v3);
  id v4 = v1;
  swift_errorRetain(v2);
  id v5 = v4;
  uint64_t v6 = swift_errorRetain(v2);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = v0[34];
    unint64_t v10 = v0[28];
    uint64_t v23 = v0[27];
    uint64_t v25 = v0[22];
    uint64_t v26 = v0[21];
    uint64_t v27 = v0[25];
    uint64_t v11 = (void *)v0[19];
    uint64_t v12 = swift_slowAlloc(22LL, -1LL);
    uint64_t v13 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v24 = swift_slowAlloc(32LL, -1LL);
    uint64_t v28 = v24;
    *(_DWORD *)uint64_t v12 = 136446466;
    swift_bridgeObjectRetain(v10);
    v0[14] = sub_100046274(v23, v10, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 14, v0 + 15, v12 + 4);

    swift_bridgeObjectRelease(v10);
    *(_WORD *)(v12 + 12) = 2114;
    swift_errorRetain(v9);
    uint64_t v14 = _swift_stdlib_bridgeErrorToNSError(v9);
    v0[18] = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 18, v0 + 19, v12 + 14);
    *uint64_t v13 = v14;
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "Encountered error when saving metadata for %{public}s: %{public}@",  (uint8_t *)v12,  0x16u);
    uint64_t v15 = sub_10000D228(&qword_10007EE38);
    swift_arrayDestroy(v13, 1LL, v15);
    swift_slowDealloc(v13, -1LL, -1LL);
    swift_arrayDestroy(v24, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);

    swift_errorRelease(v9);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v27, v26);
  }

  else
  {
    uint64_t v16 = v0[34];
    uint64_t v17 = v0[25];
    uint64_t v18 = v0[21];
    uint64_t v19 = v0[22];
    uint64_t v20 = (void *)v0[19];
    swift_errorRelease(v16);

    swift_errorRelease(v16);
    swift_errorRelease(v16);

    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
  }

  sub_10000D408(v0 + 2, v0[5]);
  int v21 = (void *)swift_task_alloc(dword_10008061C);
  v0[35] = v21;
  *int v21 = v0;
  v21[1] = sub_100013FE8;
  return sub_100057770();
}

uint64_t sub_100013FE8(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 280);
  *(void *)(*v2 + 288) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = sub_1000140D4;
  }

  else
  {
    *(void *)(v4 + 296) = a1;
    uint64_t v6 = sub_10001405C;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_10001405C()
{
  uint64_t v1 = *(void *)(v0 + 152) + OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_numPendingEventsAtLaunch;
  *(void *)uint64_t v1 = *(void *)(v0 + 296);
  *(_BYTE *)(v1 + 8) = 0;
  _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0((void *)(v0 + 16));
  uint64_t v2 = *(void *)(v0 + 200);
  uint64_t v4 = *(void *)(v0 + 184);
  uint64_t v3 = *(void *)(v0 + 192);
  swift_task_dealloc(*(void *)(v0 + 208));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000140D4()
{
  uint64_t v1 = *(void *)(v0 + 288);
  uint64_t v2 = *(void *)(v0 + 152);
  uint64_t v3 = *(void *)(v0 + 160);
  uint64_t v4 = *(void *)(v2 + OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_pendingEventsFetchFailureCount);
  uint64_t v5 = v2 + OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_numPendingEventsAtLaunch;
  *(void *)uint64_t v5 = v4;
  *(_BYTE *)(v5 + 8) = 0;
  sub_100015530();
  static LoggedObject.logger.getter(v3);
  swift_errorRetain(v1);
  uint64_t v6 = swift_errorRetain(v1);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = *(void *)(v0 + 288);
    unint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v11 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)unint64_t v10 = 138543362;
    swift_errorRetain(v9);
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError(v9);
    *(void *)(v0 + 120) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v10 + 4);
    uint64_t *v11 = v12;
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "Encountered error when trying to count pending events in the database: %{public}@",  v10,  0xCu);
    uint64_t v13 = sub_10000D228(&qword_10007EE38);
    swift_arrayDestroy(v11, 1LL, v13);
    swift_slowDealloc(v11, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);

    swift_errorRelease(v9);
  }

  else
  {
    uint64_t v14 = *(void *)(v0 + 288);
    swift_errorRelease(v14);
    swift_errorRelease(v14);
    swift_errorRelease(v14);
  }

  (*(void (**)(void, void))(*(void *)(v0 + 176) + 8LL))(*(void *)(v0 + 192), *(void *)(v0 + 168));
  _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0((void *)(v0 + 16));
  uint64_t v15 = *(void *)(v0 + 200);
  uint64_t v17 = *(void *)(v0 + 184);
  uint64_t v16 = *(void *)(v0 + 192);
  swift_task_dealloc(*(void *)(v0 + 208));
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000142D4(void *a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = swift_getObjectType(v1);
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  os_log_type_t v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v9 = [a1 status];
  if (v9)
  {
    unint64_t v10 = v9;
    if ([v9 isJetsam])
    {
      char v11 = 1;
    }

    else if ([v10 isCrash])
    {
      char v11 = 0;
    }

    else
    {
      if (![v10 isValid])
      {
LABEL_12:
        id v17 = [v10 error];
        swift_getErrorValue();
        uint64_t v18 = Error.localizedDescription.getter(v23[1], v23[2]);
        uint64_t v20 = v19;

        int v21 = (uint64_t *)(v2 + OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_previousExitReason);
        uint64_t v22 = *(void *)(v2 + OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_previousExitReason + 8);
        *int v21 = v18;
        v21[1] = v20;

        return swift_bridgeObjectRelease(v22);
      }

      char v11 = 2;
    }

    *(_BYTE *)(v2 + OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_previousExitType) = v11;
    goto LABEL_12;
  }

  sub_100015530();
  uint64_t v12 = static LoggedObject.logger.getter(ObjectType);
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  v14,  "Found no metadata from previous exit context, so not setting properties",  v15,  2u);
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000144C0()
{
  uint64_t ObjectType = swift_getObjectType(v0);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MetricsManager.submitLogEvent(_:error:)(v0, 0LL);
  sub_100015530();
  static LoggedObject.logger.getter(ObjectType);
  id v6 = v0;
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v23 = v3;
    uint64_t v24 = v2;
    id v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v26 = v10;
    *(_DWORD *)id v9 = 136446210;
    id v11 = [v6 coreAnalyticsEventDictionary];
    unint64_t v12 = sub_10001123C();
    uint64_t v13 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v11,  &type metadata for String,  v12,  &protocol witness table for String);

    uint64_t v14 = swift_bridgeObjectRetain(v13);
    uint64_t v15 = sub_100025FAC(v14);
    swift_bridgeObjectRelease(v13);
    uint64_t v25 = (uint64_t)v15;
    sub_1000106F8(&v25);
    swift_bridgeObjectRelease(v13);
    uint64_t v16 = v25;
    uint64_t v17 = sub_10000D228((uint64_t *)&unk_10007F190);
    uint64_t v18 = Array.description.getter(v16, v17);
    unint64_t v20 = v19;
    swift_release(v16);
    uint64_t v25 = sub_100046274(v18, v20, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v9 + 4);
    swift_bridgeObjectRelease(v20);

    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Submitted ProcessLaunchLogEvent: %{public}s", v9, 0xCu);
    swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);

    return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v5, v24);
  }

  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }

uint64_t sub_100014760(uint64_t a1)
{
  uint64_t ObjectType = swift_getObjectType(v1);
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MetricsManager.submitLogEvent(_:error:)(v1, a1);
  sub_100015530();
  static LoggedObject.logger.getter(ObjectType);
  id v8 = v1;
  swift_errorRetain(a1);
  id v9 = v8;
  uint64_t v10 = swift_errorRetain(a1);
  id v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v32 = v5;
    uint64_t v33 = v4;
    uint64_t v13 = swift_slowAlloc(22LL, -1LL);
    uint64_t v30 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v31 = swift_slowAlloc(32LL, -1LL);
    uint64_t v35 = v31;
    *(_DWORD *)uint64_t v13 = 136446466;
    id v14 = [v9 coreAnalyticsEventDictionary];
    unint64_t v15 = sub_10001123C();
    uint64_t v16 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v14,  &type metadata for String,  v15,  &protocol witness table for String);

    uint64_t v17 = swift_bridgeObjectRetain(v16);
    uint64_t v18 = sub_100025FAC(v17);
    swift_bridgeObjectRelease(v16);
    uint64_t v34 = (uint64_t)v18;
    sub_1000106F8(&v34);
    swift_bridgeObjectRelease(v16);
    uint64_t v19 = v34;
    uint64_t v20 = sub_10000D228((uint64_t *)&unk_10007F190);
    uint64_t v21 = Array.description.getter(v19, v20);
    unint64_t v23 = v22;
    swift_release(v19);
    uint64_t v34 = sub_100046274(v21, v23, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v13 + 4);
    swift_bridgeObjectRelease(v23);

    *(_WORD *)(v13 + 12) = 2114;
    swift_errorRetain(a1);
    uint64_t v24 = _swift_stdlib_bridgeErrorToNSError(a1);
    uint64_t v34 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v13 + 14);
    uint64_t v25 = v30;
    uint64_t *v30 = v24;
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl( (void *)&_mh_execute_header,  v11,  v12,  "Submitted ProcessLaunchLogEvent: %{public}s with error: %{public}@",  (uint8_t *)v13,  0x16u);
    uint64_t v26 = sub_10000D228(&qword_10007EE38);
    swift_arrayDestroy(v25, 1LL, v26);
    swift_slowDealloc(v25, -1LL, -1LL);
    uint64_t v27 = v31;
    swift_arrayDestroy(v31, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1LL, -1LL);
    swift_slowDealloc(v13, -1LL, -1LL);

    return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v7, v33);
  }

  else
  {

    swift_errorRelease(a1);
    swift_errorRelease(a1);

    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

id sub_100014B1C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ProcessLaunchLogEvent();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ProcessLaunchLogEvent()
{
  return objc_opt_self(&OBJC_CLASS____TtC11homeeventsd21ProcessLaunchLogEvent);
}

void sub_100014C58()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000D228((uint64_t *)&unk_10007F1A0);
  uint64_t inited = swift_initStackObject(v2, v4);
  *(_OWORD *)(inited + 16) = xmmword_100060D80;
  *(void *)(inited + 32) = 0x636E75614C6D756ELL;
  *(void *)(inited + 40) = 0xEB00000000736568LL;
  *(void *)(inited + 48) = [objc_allocWithZone(NSNumber) initWithInteger:1];
  *(void *)(inited + sub_1000154A8(*(void *)(v0 + 152) + OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_database, v0 + 56) = 0x68736172436D756ELL;
  *(void *)(inited + 64) = 0xEA00000000007365LL;
  __asm { BR              X10 }

uint64_t sub_100014D40()
{
  v1[9] = objc_msgSend(objc_allocWithZone(*(Class *)(v4 + 3968)), *(SEL *)(v5 + 3056), 1);
  v1[10] = 0x617374654A6D756ELL;
  v1[11] = v2 + 8;
  return ((uint64_t (*)(uint64_t))((char *)&loc_100014DD4 + dword_10001521C[*(unsigned __int8 *)(v0 + v3)]))(0x6873617263LL);
}

void sub_100014DF0()
{
  v1[12] = objc_msgSend(objc_allocWithZone(*(Class *)(v3 + 3968)), *(SEL *)(v4 + 3056), 1);
  v1[13] = 0xD00000000000001ALL;
  v1[14] = 0x8000000100063070LL;
  v1[15] = objc_msgSend( objc_allocWithZone(*(Class *)(v3 + 3968)),  *(SEL *)(v4 + 3056),  v0[OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_launchedByClientRequest]);
  v1[16] = 0xD000000000000026LL;
  v1[17] = 0x8000000100063090LL;
  v1[18] = objc_msgSend( objc_allocWithZone(*(Class *)(v3 + 3968)),  *(SEL *)(v4 + 3056),  v0[OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_attributedToFakeData]);
  unint64_t v5 = sub_100058A80((uint64_t)v1);
  if ((v0[OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_numPendingEventsAtLaunch + 8] & 1) == 0)
  {
    uint64_t v6 = *(void *)&v0[OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_numPendingEventsAtLaunch];
    id v7 = objc_msgSend(objc_allocWithZone(*(Class *)(v3 + 3968)), *(SEL *)(v4 + 3056), v6);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v5);
    sub_10005C644((uint64_t)v7, 0xD000000000000018LL, 0x8000000100062FD0LL, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease(0x8000000000000000LL);
    id v9 = objc_msgSend(objc_allocWithZone(*(Class *)(v3 + 3968)), *(SEL *)(v4 + 3056), v6 > 0);
    char v10 = swift_isUniquelyReferenced_nonNull_native(v5);
    sub_10005C644((uint64_t)v9, 0xD00000000000001CLL, 0x8000000100062FB0LL, v10);
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  if ((v0[OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_previousLaunchTime + 8] & 1) != 0) {
LABEL_8:
  }
    __asm { BR              X10 }

  double v11 = *(double *)&v0[OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_previousLaunchTime];
  [v0 startTime];
  double v13 = (v12 - v11) * 1000.0;
  if ((~*(void *)&v13 & 0x7FF0000000000000LL) != 0)
  {
    if (v13 > -9.22337204e18)
    {
      if (v13 < 9.22337204e18)
      {
        id v14 = objc_msgSend(objc_allocWithZone(*(Class *)(v3 + 3968)), *(SEL *)(v4 + 3056), (uint64_t)v13);
        char v15 = swift_isUniquelyReferenced_nonNull_native(v5);
        sub_10005C644((uint64_t)v14, 0xD00000000000001FLL, 0x80000001000630C0LL, v15);
        swift_bridgeObjectRelease(0x8000000000000000LL);
        goto LABEL_8;
      }

LABEL_11:
      __break(1u);
      JUMPOUT(0x10001520CLL);
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  goto LABEL_11;
}

    v16[(v10 >> 6) + 8] |= 1LL << v10;
    *(_DWORD *)(v16[6] + 4 * v10) = a2;
    *(void *)(v16[7] + 8 * v10) = a1;
    uint64_t v19 = v16[2];
    uint64_t v20 = __OFADD__(v19, 1LL);
    uint64_t v21 = v19 + 1;
    if (!v20)
    {
      v16[2] = v21;
      return result;
    }

    goto LABEL_14;
  }

  sub_10005A79C(result, a3 & 1);
  unint64_t result = sub_10005A374(a2);
  if ((v14 & 1) == (v18 & 1))
  {
    char v10 = result;
    uint64_t v16 = (void *)*v4;
    if ((v14 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v18[(v12 >> 6) + 8] |= 1LL << v12;
    unint64_t v22 = (uint64_t *)(v18[6] + 16 * v12);
    void *v22 = a2;
    v22[1] = a3;
    *(void *)(v18[7] + 8 * v12) = a1;
    unint64_t v23 = v18[2];
    uint64_t v24 = __OFADD__(v23, 1LL);
    uint64_t v25 = v23 + 1;
    if (!v24)
    {
      void v18[2] = v25;
      swift_bridgeObjectRetain(a3);
      return;
    }

    goto LABEL_14;
  }

  sub_10005AA54(v15, a4 & 1);
  uint64_t v20 = sub_10005A2E0(a2, a3);
  if ((v16 & 1) == (v21 & 1))
  {
    double v12 = v20;
    uint64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

_BYTE *initializeBufferWithCopyOfBuffer for EventUploadScheduledWaitOutcome(_BYTE *result, _BYTE *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ProcessExitType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

          __break(1u);
          return result;
        }

uint64_t storeEnumTagSinglePayload for ProcessExitType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_100015330 + 4 * byte_100060D95[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100015364 + 4 * byte_100060D90[v4]))();
}

uint64_t sub_100015364(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001536C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100015374LL);
  }
  return result;
}

uint64_t sub_100015380(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100015388LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_10001538C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100015394(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000153A0(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1000153A8(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for ProcessExitType()
{
  return &type metadata for ProcessExitType;
}

unint64_t sub_1000153C4()
{
  unint64_t result = qword_10007F448;
  if (!qword_10007F448)
  {
    uint64_t v1 = sub_100004D58(&qword_10007F450);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10007F448);
  }

  return result;
}

unint64_t sub_100015414()
{
  unint64_t result = qword_10007F458;
  if (!qword_10007F458)
  {
    unint64_t result = swift_getWitnessTable(&unk_100060E88, &type metadata for ProcessExitType);
    atomic_store(result, (unint64_t *)&qword_10007F458);
  }

  return result;
}

unint64_t sub_100015460(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100075538, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3) {
    return 3LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_1000154A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D228(&qword_10007F460);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000154F0(uint64_t a1)
{
  uint64_t v2 = sub_10000D228(&qword_10007F460);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_100015530()
{
  unint64_t result = qword_10007F468;
  if (!qword_10007F468)
  {
    uint64_t v1 = type metadata accessor for ProcessLaunchLogEvent();
    unint64_t result = swift_getWitnessTable(&unk_100060EB0, v1);
    atomic_store(result, &qword_10007F468);
  }

  return result;
}

_BYTE *sub_100015574@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3 = *result;
  BOOL v4 = v3 > 0x20;
  uint64_t v5 = (1LL << v3) & 0x100003E01LL;
  BOOL v6 = v4 || v5 == 0;
  BOOL v7 = v6 && (result = (_BYTE *)_swift_stdlib_strtod_clocale()) != 0LL && *result == 0;
  *a2 = v7;
  return result;
}

uint64_t sub_1000155E0(uint64_t a1, char *a2)
{
  unsigned int v3 = v2;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v3;
  uint64_t v11 = *(void *)(*v3 + 40LL);
  uint64_t v13 = sub_10000D1E8(&qword_10007F4A0, v12, (uint64_t)&protocol conformance descriptor for UUID);
  swift_bridgeObjectRetain(v10);
  uint64_t v35 = a2;
  uint64_t v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  uint64_t v15 = -1LL << *(_BYTE *)(v10 + 32);
  unint64_t v16 = v14 & ~v15;
  uint64_t v17 = v10;
  uint64_t v18 = v10 + 56;
  if (((*(void *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) != 0)
  {
    uint64_t v31 = v3;
    uint64_t v32 = a1;
    uint64_t v33 = ~v15;
    uint64_t v34 = v7;
    uint64_t v19 = *(void *)(v7 + 72);
    uint64_t v20 = *(void (**)(void, void, void))(v7 + 16);
    while (1)
    {
      uint64_t v21 = v17;
      unint64_t v22 = v20;
      v20(v9, *(void *)(v17 + 48) + v19 * v16, v6);
      uint64_t v23 = sub_10000D1E8( &qword_1000806B0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      char v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v35, v6, v23);
      uint64_t v25 = *(void (**)(char *, uint64_t))(v34 + 8);
      v25(v9, v6);
      if ((v24 & 1) != 0) {
        break;
      }
      unint64_t v16 = (v16 + 1) & v33;
      uint64_t v17 = v21;
      uint64_t v20 = v22;
      if (((*(void *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v21);
        unsigned int v3 = v31;
        a1 = v32;
        uint64_t v26 = v34;
        goto LABEL_7;
      }
    }

    swift_bridgeObjectRelease(v21);
    v25(v35, v6);
    v22(v32, *(void *)(*v31 + 48LL) + v19 * v16, v6);
    return 0LL;
  }

  else
  {
    swift_bridgeObjectRelease(v10);
    uint64_t v20 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v26 = v7;
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v28 = v35;
    v20(v9, v35, v6);
    uint64_t v36 = *v3;
    *unsigned int v3 = 0x8000000000000000LL;
    sub_100015BA8((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    uint64_t v29 = *v3;
    *unsigned int v3 = v36;
    swift_bridgeObjectRelease(v29);
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(a1, v28, v6);
    return 1LL;
  }

uint64_t sub_10001583C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v40 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_10000D228(&qword_10007F4A8);
  uint64_t v8 = static _SetStorage.resize(original:capacity:move:)(v7, a1, 1LL);
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16)) {
    goto LABEL_39;
  }
  uint64_t v10 = 1LL << *(_BYTE *)(v7 + 32);
  uint64_t v11 = *(void *)(v7 + 56);
  uint64_t v39 = (void *)(v7 + 56);
  if (v10 < 64) {
    uint64_t v12 = ~(-1LL << v10);
  }
  else {
    uint64_t v12 = -1LL;
  }
  unint64_t v13 = v12 & v11;
  uint64_t v37 = v2;
  int64_t v38 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v14 = v8 + 56;
  uint64_t result = swift_retain(v7);
  int64_t v16 = 0LL;
  while (1)
  {
    if (v13)
    {
      unint64_t v18 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_26;
    }

    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1LL))
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return result;
    }

    if (v20 >= v38) {
      goto LABEL_35;
    }
    unint64_t v21 = v39[v20];
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v38) {
        goto LABEL_35;
      }
      unint64_t v21 = v39[v16];
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v38) {
          goto LABEL_35;
        }
        unint64_t v21 = v39[v16];
        if (!v21) {
          break;
        }
      }
    }

LABEL_25:
    unint64_t v13 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_26:
    uint64_t v23 = v7;
    uint64_t v24 = *(void *)(v7 + 48);
    uint64_t v25 = *(void *)(v40 + 72);
    uint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v40 + 32);
    v26(v6, v24 + v25 * v19, v4);
    uint64_t v27 = *(void *)(v9 + 40);
    uint64_t v28 = sub_10000D1E8( &qword_10007F4A0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v27, v4, v28);
    uint64_t v29 = -1LL << *(_BYTE *)(v9 + 32);
    unint64_t v30 = result & ~v29;
    unint64_t v31 = v30 >> 6;
    if (((-1LL << v30) & ~*(void *)(v14 + 8 * (v30 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1LL << v30) & ~*(void *)(v14 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v32 = 0;
      unint64_t v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }

        BOOL v34 = v31 == v33;
        if (v31 == v33) {
          unint64_t v31 = 0LL;
        }
        v32 |= v34;
        uint64_t v35 = *(void *)(v14 + 8 * v31);
      }

      while (v35 == -1);
      unint64_t v17 = __clz(__rbit64(~v35)) + (v31 << 6);
    }

    *(void *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v9 + 48) + v17 * v25, v6, v4);
    ++*(void *)(v9 + 16);
    uint64_t v7 = v23;
  }

  int64_t v22 = v20 + 3;
  if (v22 < v38)
  {
    unint64_t v21 = v39[v22];
    if (!v21)
    {
      while (1)
      {
        int64_t v16 = v22 + 1;
        if (__OFADD__(v22, 1LL)) {
          goto LABEL_41;
        }
        if (v16 >= v38) {
          goto LABEL_35;
        }
        unint64_t v21 = v39[v16];
        ++v22;
        if (v21) {
          goto LABEL_25;
        }
      }
    }

    int64_t v16 = v22;
    goto LABEL_25;
  }

    uint64_t v14 = (v22 - 1) & v22;
    int64_t v20 = __clz(__rbit64(v22)) + (v17 << 6);
LABEL_26:
    uint64_t v24 = *(void *)(v5 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, *(void *)(v8 + 48) + v24 * v20, v4);
    uint64_t v25 = *(void *)(v10 + 40);
    uint64_t v26 = sub_10000D1E8( &qword_10007F4A0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v25, v4, v26);
    uint64_t v27 = -1LL << *(_BYTE *)(v10 + 32);
    uint64_t v28 = result & ~v27;
    uint64_t v29 = v28 >> 6;
    if (((-1LL << v28) & ~*(void *)(v15 + 8 * (v28 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1LL << v28) & ~*(void *)(v15 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v30 = 0;
      unint64_t v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        char v32 = v29 == v31;
        if (v29 == v31) {
          uint64_t v29 = 0LL;
        }
        v30 |= v32;
        unint64_t v33 = *(void *)(v15 + 8 * v29);
      }

      while (v33 == -1);
      unint64_t v18 = __clz(__rbit64(~v33)) + (v29 << 6);
    }

    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32))( *(void *)(v10 + 48) + v18 * v24,  v7,  v4);
    ++*(void *)(v10 + 16);
  }

  uint64_t v23 = v21 + 3;
  if (v23 >= v37)
  {
LABEL_35:
    uint64_t result = swift_release_n(v8, 2LL);
    uint64_t v2 = v35;
    goto LABEL_37;
  }

  int64_t v22 = *(void *)(v36 + 8 * v23);
  if (v22)
  {
    unint64_t v17 = v23;
    goto LABEL_25;
  }

  while (1)
  {
    unint64_t v17 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v17 >= v37) {
      goto LABEL_35;
    }
    int64_t v22 = *(void *)(v36 + 8 * v17);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }

    int64_t v16 = (v27 - 1) & v27;
    uint64_t v24 = __clz(__rbit64(v27)) + (v19 << 6);
LABEL_26:
    uint64_t v29 = v51;
    unint64_t v30 = *(void *)(v52 + 72);
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v52 + v21))(v9, *(void *)(v51 + 48) + v30 * v24, v7);
    unint64_t v31 = *(void *)(v29 + 56);
    char v32 = *(void *)(v54 + 72);
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v54 + v21))(v53, v31 + v32 * v24, v55);
    unint64_t v33 = *(void *)(v12 + 40);
    BOOL v34 = sub_100013014( &qword_10007F4A0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v33, v7, v34);
    uint64_t v35 = -1LL << *(_BYTE *)(v12 + 32);
    uint64_t v36 = result & ~v35;
    uint64_t v37 = v36 >> 6;
    if (((-1LL << v36) & ~*(void *)(v17 + 8 * (v36 >> 6))) != 0)
    {
      int64_t v22 = __clz(__rbit64((-1LL << v36) & ~*(void *)(v17 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      int64_t v38 = 0;
      uint64_t v39 = (unint64_t)(63 - v35) >> 6;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }

        uint64_t v40 = v37 == v39;
        if (v37 == v39) {
          uint64_t v37 = 0LL;
        }
        v38 |= v40;
        uint64_t v41 = *(void *)(v17 + 8 * v37);
      }

      while (v41 == -1);
      int64_t v22 = __clz(__rbit64(~v41)) + (v37 << 6);
    }

    *(void *)(v17 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v22;
    (*(void (**)(unint64_t, _BYTE *, uint64_t))(v52 + 32))(*(void *)(v12 + 48) + v30 * v22, v9, v7);
    uint64_t result = (*(uint64_t (**)(unint64_t, _BYTE *, uint64_t))(v54 + 32))( *(void *)(v12 + 56) + v32 * v22,  v53,  v55);
    ++*(void *)(v12 + 16);
  }

  uint64_t v28 = v25 + 2;
  if (v28 >= v48)
  {
LABEL_36:
    uint64_t v43 = v51;
    swift_release(v51);
    BOOL v42 = v47;
    if ((v46 & 1) != 0) {
      goto LABEL_39;
    }
    goto LABEL_43;
  }

  uint64_t v27 = v49[v28];
  if (v27)
  {
    unint64_t v19 = v28;
    goto LABEL_25;
  }

  while (1)
  {
    unint64_t v19 = v28 + 1;
    if (__OFADD__(v28, 1LL)) {
      break;
    }
    if (v19 >= v48) {
      goto LABEL_36;
    }
    uint64_t v27 = v49[v19];
    ++v28;
    if (v27) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v21 - 1) & v21;
    uint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    int64_t v16 = 4 * v15;
    unint64_t v17 = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v15);
    unint64_t v18 = 8 * v15;
    unint64_t v19 = *(void *)(*(void *)(v2 + 56) + v18);
    *(_DWORD *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v18) = v19;
    uint64_t result = (void *)swift_unknownObjectRetain(v19);
  }

  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    uint64_t v9 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v23 - 1) & v23;
    uint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    int64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    unint64_t v18 = v17[1];
    unint64_t v19 = 8 * v15;
    int64_t v20 = *(void **)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    uint64_t result = v20;
  }

  uint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  uint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    uint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v14 = (v21 - 1) & v21;
    int64_t v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    unint64_t v17 = *(void *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v17, v1);
    unint64_t v18 = 8 * v16;
    unint64_t v19 = *(void *)(*(void *)(v5 + 56) + 8 * v16);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v17, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v18) = v19;
    uint64_t result = (void *)swift_errorRetain(v19);
  }

  int64_t v22 = v20 + 2;
  if (v22 >= v26) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v25 + 8 * v22);
  if (v21)
  {
    uint64_t v11 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v11 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v11 >= v26) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v25 + 8 * v11);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v23 - 1) & v23;
    uint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    int64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    unint64_t v18 = v17[1];
    unint64_t v19 = 8 * v15;
    int64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    uint64_t result = (void *)swift_bridgeObjectRetain(v20);
  }

  uint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  uint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    uint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v14 = (v21 - 1) & v21;
    int64_t v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    unint64_t v17 = *(void *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v17, v1);
    unint64_t v18 = 8 * v16;
    unint64_t v19 = *(void *)(*(void *)(v5 + 56) + 8 * v16);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v17, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v18) = v19;
    uint64_t result = (void *)swift_errorRetain(v19);
  }

  int64_t v22 = v20 + 2;
  if (v22 >= v26) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v25 + 8 * v22);
  if (v21)
  {
    uint64_t v11 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v11 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v11 >= v26) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v25 + 8 * v11);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v23 - 1) & v23;
    uint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    int64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    unint64_t v19 = *v17;
    unint64_t v18 = v17[1];
    int64_t v20 = 32 * v15;
    sub_10000D2C8(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = v19;
    v21[1] = v18;
    sub_10003FEB4(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    uint64_t result = (void *)swift_bridgeObjectRetain(v18);
  }

  uint64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v2);
    uint64_t v1 = v25;
    goto LABEL_28;
  }

  uint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    uint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

LABEL_35:
  swift_release(v7);
  uint64_t v2 = v37;
  uint64_t v36 = 1LL << *(_BYTE *)(v7 + 32);
  if (v36 > 63) {
    bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    void *v39 = -1LL << v36;
  }
  *(void *)(v7 + 16) = 0LL;
LABEL_39:
  uint64_t result = swift_release(v7);
  *uint64_t v2 = v9;
  return result;
}

  __break(1u);
  return result;
}

uint64_t sub_100015BA8(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v30 = a1;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  uint64_t v29 = v3;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  uint64_t v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10001583C(v12);
  }

  else
  {
    if (v11 > v10)
    {
      sub_100015DAC();
      goto LABEL_12;
    }

    sub_100015FD0(v12);
  }

  uint64_t v13 = *v3;
  uint64_t v14 = *(void *)(*v3 + 40);
  uint64_t v15 = sub_10000D1E8( &qword_10007F4A0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v6, v15);
  uint64_t v17 = -1LL << *(_BYTE *)(v13 + 32);
  a2 = v16 & ~v17;
  if (((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v18 = ~v17;
    uint64_t v19 = *(void *)(v7 + 72);
    int64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v9, *(void *)(v13 + 48) + v19 * a2, v6);
      uint64_t v21 = sub_10000D1E8( &qword_1000806B0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v30, v6, v21);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v22 & 1) != 0) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v18;
    }

    while (((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0);
  }

LABEL_12:
  uint64_t v23 = v30;
  uint64_t v24 = *v29;
  *(void *)(*v29 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))( *(void *)(v24 + 48) + *(void *)(v7 + 72) * a2,  v23,  v6);
  uint64_t v26 = *(void *)(v24 + 16);
  BOOL v27 = __OFADD__(v26, 1LL);
  uint64_t v28 = v26 + 1;
  if (!v27)
  {
    *(void *)(v24 + 16) = v28;
    return result;
  }

  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

void *sub_100015DAC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10000D228(&qword_10007F4A8);
  uint64_t v6 = *v0;
  uint64_t v7 = static _SetStorage.copy(original:)(*v0);
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = (void *)swift_release(v6);
LABEL_30:
    *uint64_t v1 = v8;
    return result;
  }

  uint64_t v25 = v1;
  uint64_t result = (void *)(v7 + 56);
  uint64_t v10 = v6 + 56;
  unint64_t v11 = (unint64_t)((1LL << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  int64_t v13 = 0LL;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v14 = 1LL << *(_BYTE *)(v6 + 32);
  uint64_t v15 = -1LL;
  if (v14 < 64) {
    uint64_t v15 = ~(-1LL << v14);
  }
  unint64_t v16 = v15 & *(void *)(v6 + 56);
  int64_t v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      unint64_t v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }

    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
      __break(1u);
      goto LABEL_32;
    }

    if (v21 >= v17) {
      goto LABEL_28;
    }
    unint64_t v22 = *(void *)(v10 + 8 * v21);
    ++v13;
    if (!v22)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v17) {
        goto LABEL_28;
      }
      unint64_t v22 = *(void *)(v10 + 8 * v13);
      if (!v22)
      {
        int64_t v13 = v21 + 2;
        if (v21 + 2 >= v17) {
          goto LABEL_28;
        }
        unint64_t v22 = *(void *)(v10 + 8 * v13);
        if (!v22) {
          break;
        }
      }
    }

LABEL_27:
    unint64_t v16 = (v22 - 1) & v22;
    unint64_t v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_12:
    unint64_t v20 = *(void *)(v3 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v20, v2);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))( *(void *)(v8 + 48) + v20,  v5,  v2);
  }

  int64_t v23 = v21 + 3;
  if (v23 >= v17)
  {
LABEL_28:
    uint64_t result = (void *)swift_release(v6);
    uint64_t v1 = v25;
    goto LABEL_30;
  }

  unint64_t v22 = *(void *)(v10 + 8 * v23);
  if (v22)
  {
    int64_t v13 = v23;
    goto LABEL_27;
  }

  while (1)
  {
    int64_t v13 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v13 >= v17) {
      goto LABEL_28;
    }
    unint64_t v22 = *(void *)(v10 + 8 * v13);
    ++v23;
    if (v22) {
      goto LABEL_27;
    }
  }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

LABEL_32:
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_100015FD0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_10000D228(&qword_10007F4A8);
  uint64_t v9 = static _SetStorage.resize(original:capacity:move:)(v8, a1, 0LL);
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16))
  {
    uint64_t result = swift_release(v8);
LABEL_37:
    *uint64_t v2 = v10;
    return result;
  }

  uint64_t v11 = 1LL << *(_BYTE *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 56);
  uint64_t v35 = v2;
  uint64_t v36 = v8 + 56;
  if (v11 < 64) {
    uint64_t v13 = ~(-1LL << v11);
  }
  else {
    uint64_t v13 = -1LL;
  }
  unint64_t v14 = v13 & v12;
  int64_t v37 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v15 = v9 + 56;
  uint64_t result = swift_retain(v8);
  int64_t v17 = 0LL;
  while (1)
  {
    if (v14)
    {
      unint64_t v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v20 = v19 | (v17 << 6);
      goto LABEL_26;
    }

    int64_t v21 = v17 + 1;
    if (__OFADD__(v17, 1LL))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }

    if (v21 >= v37) {
      goto LABEL_35;
    }
    unint64_t v22 = *(void *)(v36 + 8 * v21);
    ++v17;
    if (!v22)
    {
      int64_t v17 = v21 + 1;
      if (v21 + 1 >= v37) {
        goto LABEL_35;
      }
      unint64_t v22 = *(void *)(v36 + 8 * v17);
      if (!v22)
      {
        int64_t v17 = v21 + 2;
        if (v21 + 2 >= v37) {
          goto LABEL_35;
        }
        unint64_t v22 = *(void *)(v36 + 8 * v17);
        if (!v22) {
          break;
        }
      }
    }

LABEL_39:
  __break(1u);
  return result;
}

  __break(1u);
}

uint64_t sub_1000162F8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t v9 = sub_10000D228(&qword_10007F488);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = sub_10000D1E8( &qword_10007F4A0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v19 = Set.init(minimumCapacity:)(v12, v2, v13);
  if (v12)
  {
    uint64_t v14 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v18 = *(void *)(v3 + 72);
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    while (1)
    {
      v15(v11, v14, v2);
      unint64_t v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
      v16(v11, 0LL, 1LL, v2);
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v11, v2);
      sub_1000155E0((uint64_t)v8, v6);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      v14 += v18;
      if (!--v12) {
        goto LABEL_7;
      }
    }
  }

  else
  {
    unint64_t v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
LABEL_7:
    v16(v11, 1LL, 1LL, v2);
  }

  return v19;
}

uint64_t sub_1000164C8(uint64_t a1, uint64_t a2)
{
  v2[9] = a1;
  v2[10] = a2;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  v2[11] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[12] = v4;
  unint64_t v5 = (*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[13] = swift_task_alloc(v5);
  v2[14] = swift_task_alloc(v5);
  v2[15] = swift_task_alloc(v5);
  v2[16] = swift_task_alloc(v5);
  v2[17] = swift_task_alloc(v5);
  v2[18] = swift_task_alloc(v5);
  v2[19] = swift_task_alloc(v5);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  v2[20] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[21] = v7;
  unint64_t v8 = (*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[22] = swift_task_alloc(v8);
  v2[23] = swift_task_alloc(v8);
  v2[24] = swift_task_alloc(v8);
  uint64_t v9 = sub_10000D228(&qword_10007F488);
  v2[25] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000165DC, 0LL, 0LL);
}

uint64_t sub_1000165DC()
{
  Class super_class = v0[4].super_class;
  uint64_t v2 = type metadata accessor for Configuration(0LL);
  uint64_t v3 = (void *)static Configuration.cloudKitContainer.getter(v2);
  id v4 = [v3 privateCloudDatabase];
  v0[13].receiver = v4;

  id v5 = objc_allocWithZone(&OBJC_CLASS___CKOperationGroup);
  id v6 = v4;
  uint64_t v7 = (objc_class *)[v5 init];
  v0[13].Class super_class = v7;
  v80[0] = v7;
  sub_10004B008(v80, v6, 17LL);

  if (super_class)
  {
    uint64_t v8 = (uint64_t)v0[4].super_class;
    uint64_t v9 = *(void *)(v8 + 16);
    Class v10 = v0[10].super_class;
    uint64_t v70 = v8;
    if (v9)
    {
      receiver = (void (**)(Class, Class))v0[6].receiver;
      unint64_t v69 = (LOBYTE(v10[10].isa) + 32LL) & ~(unint64_t)LOBYTE(v10[10].isa);
      unint64_t v11 = v8 + v69;
      Class isa = v10[9].isa;
      uint64_t v12 = (void (*)(void, void, void))v10[2].isa;
      swift_bridgeObjectRetain_n(v0[4].super_class, 2LL);
      uint64_t v13 = v9;
      uint64_t v75 = v12;
      Class v77 = v10;
      while (1)
      {
        Class v17 = v0[12].super_class;
        id v18 = v0[10].receiver;
        v12(v17, v11, v18);
        uint64_t v76 = (void (*)(Class, uint64_t, uint64_t, id, __n128))v10[7].isa;
        ((void (*)(Class, void, uint64_t, id))v76)(v17, 0LL, 1LL, v18);
        uint64_t v78 = v13;
        id v19 = v0[12].receiver;
        Class v20 = v0[11].super_class;
        Class v21 = v10;
        id v22 = v0[10].receiver;
        ((void (*)(id, Class, id))v21[4].isa)(v19, v0[12].super_class, v22);
        uint64_t v23 = type metadata accessor for XPCServer();
        sub_10000D1E8( (unint64_t *)&qword_10007F128,  (uint64_t (*)(uint64_t))type metadata accessor for XPCServer,  (uint64_t)&unk_100060A78);
        static LoggedObject.logger.getter(v23);
        uint64_t v24 = ((uint64_t (*)(Class, id, id))v12)(v20, v19, v22);
        uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
        os_log_type_t v26 = static os_log_type_t.default.getter(v25);
        BOOL v27 = os_log_type_enabled(v25, v26);
        Class v28 = v0[11].super_class;
        unint64_t v29 = (objc_class *)v0[12].receiver;
        id v30 = v0[10].receiver;
        Class v31 = v0[5].super_class;
        if (v27)
        {
          Class v72 = v0[9].super_class;
          Class v73 = v0[5].super_class;
          uint64_t v32 = swift_slowAlloc(22LL, -1LL);
          uint64_t v33 = (void *)swift_slowAlloc(32LL, -1LL);
          v80[0] = v33;
          *(_DWORD *)uint64_t v32 = 141558274;
          *(void *)(v32 + 4) = 1752392040LL;
          *(_WORD *)(v32 + 12) = 2080;
          uint64_t v34 = sub_10000D1E8( &qword_10007F498,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter(v30, v34);
          uint64_t v71 = v29;
          unint64_t v37 = v36;
          *(void *)(v32 + 14) = sub_100046274(v35, v36, (uint64_t *)v80);
          swift_bridgeObjectRelease(v37);
          int64_t v38 = (void (*)(Class, id))v77[1].isa;
          v38(v28, v30);
          _os_log_impl( (void *)&_mh_execute_header,  v25,  v26,  "Clearing all events for home: %{mask.hash}s",  (uint8_t *)v32,  0x16u);
          swift_arrayDestroy(v33, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v33, -1LL, -1LL);
          swift_slowDealloc(v32, -1LL, -1LL);

          receiver[1](v72, v73);
          v38(v71, v30);
          uint64_t v12 = v75;
          Class v10 = v77;
        }

        else
        {
          Class v14 = v0[9].super_class;

          Class v10 = v77;
          uint64_t v15 = (void (*)(Class, id))v77[1].isa;
          v15(v28, v30);
          receiver[1](v14, v31);
          v15(v29, v30);
          uint64_t v12 = v75;
        }

        v11 += (unint64_t)isa;
        uint64_t v13 = v78 - 1;
        if (v78 == 1)
        {
          uint64_t v8 = v70;
          uint64_t v50 = v76;
          goto LABEL_14;
        }
      }

      uint64_t v8 = v70;
      swift_bridgeObjectRelease(v70);
      v80[0] = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v9);
      unint64_t v53 = v69;
    }

    else
    {
      uint64_t v50 = (void (*)(Class, uint64_t, uint64_t, id, __n128))v10[7].isa;
      __n128 v16 = swift_bridgeObjectRetain_n(v8, 2LL);
LABEL_14:
      v50(v0[12].super_class, 1LL, 1LL, v0[10].receiver, v16);
      swift_bridgeObjectRelease(v8);
      uint64_t v51 = _swiftEmptyArrayStorage;
      if (!v9) {
        goto LABEL_20;
      }
      Class v52 = v0[10].super_class;
      v80[0] = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v9);
      Class isa = v52[9].isa;
      uint64_t v12 = (void (*)(void, void, void))v52[2].isa;
      unint64_t v53 = (LOBYTE(v52[10].isa) + 32LL) & ~(unint64_t)LOBYTE(v52[10].isa);
    }

    Class v54 = v0[10].super_class;
    unint64_t v55 = v8 + v53;
    do
    {
      id v56 = v0[11].receiver;
      id v57 = v0[10].receiver;
      v12(v56, v55, v57);
      uint64_t v58 = static EventRecord.recordZoneID(forHomeIdentifier:)(v56);
      uint64_t v59 = ((uint64_t (*)(id, id))v54[1].isa)(v56, v57);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v59);
      uint64_t v60 = *((void *)v80[0] + 2);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v60);
      uint64_t v61 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v60, v58);
      specialized ContiguousArray._endMutation()(v61);
      v55 += (unint64_t)isa;
      --v9;
    }

    while (v9);
    uint64_t v51 = v80[0];
LABEL_20:
    v0[14].receiver = v51;
    id v62 = v0[5].receiver;
    uint64_t v63 = (objc_class *)type metadata accessor for EventUploadSubtaskLogEvent();
    uint64_t v64 = (char *)objc_allocWithZone(v63);
    uint64_t v65 = OBJC_IVAR____TtC11homeeventsd26EventUploadSubtaskLogEvent_metricsManager;
    type metadata accessor for MetricsManager(0LL);
    uint64_t v66 = v64;
    *(void *)&v64[v65] = static MetricsManager.sharedInstance.getter();
    v66[OBJC_IVAR____TtC11homeeventsd26EventUploadSubtaskLogEvent_subtaskType] = 2;
    *(void *)&v66[OBJC_IVAR____TtC11homeeventsd26EventUploadSubtaskLogEvent_numRecords] = 0LL;
    v66[OBJC_IVAR____TtC11homeeventsd26EventUploadSubtaskLogEvent_attributedToFakeData] = 0;

    v0[2].receiver = v66;
    v0[2].Class super_class = v63;
    v0[14].Class super_class = (Class)objc_msgSendSuper2(v0 + 2, "init");
    sub_10000D408(v62, v62[3]);
    uint64_t v67 = sub_1000162F8(v70);
    v0[15].receiver = (id)v67;
    swift_bridgeObjectRelease(v70);
    uint64_t v68 = (objc_super **)swift_task_alloc(dword_1000805C4);
    v0[15].Class super_class = (Class)v68;
    char *v68 = v0;
    v68[1] = (objc_super *)sub_100016C84;
    return sub_100056FB4(v67);
  }

  uint64_t v39 = type metadata accessor for XPCServer();
  v0[17].receiver = (id)v39;
  v0[17].Class super_class = (Class)sub_10000D1E8( (unint64_t *)&qword_10007F128,  (uint64_t (*)(uint64_t))type metadata accessor for XPCServer,  (uint64_t)&unk_100060A78);
  uint64_t v40 = static LoggedObject.logger.getter(v39);
  uint64_t v41 = (os_log_s *)Logger.logObject.getter(v40);
  os_log_type_t v42 = static os_log_type_t.default.getter(v41);
  if (os_log_type_enabled(v41, v42))
  {
    uint64_t v43 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v43 = 0;
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "Clearing all events for all homes", v43, 2u);
    swift_slowDealloc(v43, -1LL, -1LL);
  }

  Class v44 = v0[8].super_class;
  Class v45 = v0[5].super_class;
  id v46 = v0[6].receiver;

  uint64_t v47 = (void (*)(void, void))v46[1];
  v0[18].receiver = v47;
  v47(v44, v45);
  uint64_t v48 = (objc_super **)swift_task_alloc(dword_10008038C);
  v0[18].Class super_class = (Class)v48;
  *uint64_t v48 = v0;
  v48[1] = (objc_super *)sub_10001766C;
  return sub_10004A41C((uint64_t)v6, (uint64_t)v7);
}

uint64_t sub_100016C84(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 248);
  *(void *)(*v2 + 2sub_1000154A8(*(void *)(v0 + 152) + OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_database, v0 + 56) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    id v6 = sub_10001710C;
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v4 + 240));
    *(void *)(v4 + 264) = a1;
    id v6 = sub_100016D00;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_100016D00()
{
  uint64_t v1 = *(char **)(v0 + 232);
  *(void *)&v1[OBJC_IVAR____TtC11homeeventsd26EventUploadSubtaskLogEvent_numRecords] = *(void *)(v0 + 264);
  sub_1000252A0();

  uint64_t v2 = *(void *)(v0 + 224);
  *(void *)(v0 + 360) = v2;
  if ((unint64_t)v2 >> 62)
  {
    if (v2 < 0) {
      uint64_t v21 = v2;
    }
    else {
      uint64_t v21 = v2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v2);
    uint64_t v22 = _CocoaArrayWrapper.endIndex.getter(v21);
    swift_bridgeObjectRelease(v2);
    if (v22) {
      goto LABEL_3;
    }
  }

  else if (*(void *)((v2 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
LABEL_3:
    uint64_t v3 = type metadata accessor for XPCServer();
    *(void *)(v0 + 368) = v3;
    *(void *)(v0 + 376) = sub_10000D1E8( (unint64_t *)&qword_10007F128,  (uint64_t (*)(uint64_t))type metadata accessor for XPCServer,  (uint64_t)&unk_100060A78);
    static LoggedObject.logger.getter(v3);
    uint64_t v4 = swift_bridgeObjectRetain_n(v2, 2LL);
    uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
    os_log_type_t v6 = static os_log_type_t.info.getter(v5);
    BOOL v7 = os_log_type_enabled(v5, v6);
    uint64_t v8 = *(void *)(v0 + 112);
    uint64_t v9 = *(void *)(v0 + 88);
    uint64_t v10 = *(void *)(v0 + 96);
    if (v7)
    {
      uint64_t v44 = *(void *)(v0 + 112);
      uint64_t v42 = *(void *)(v0 + 96);
      unint64_t v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v12 = swift_slowAlloc(32LL, -1LL);
      uint64_t v46 = v12;
      *(_DWORD *)unint64_t v11 = 136446210;
      unint64_t v13 = sub_100018640();
      swift_bridgeObjectRetain(v2);
      uint64_t v15 = Array.description.getter(v14, v13);
      uint64_t v41 = v9;
      unint64_t v17 = v16;
      swift_bridgeObjectRelease(v2);
      *(void *)(v0 + 48) = sub_100046274(v15, v17, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v11 + 4);
      swift_bridgeObjectRelease(v17);
      swift_bridgeObjectRelease_n(v2, 2LL);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Deleting home zones: %{public}s", v11, 0xCu);
      swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1LL, -1LL);
      swift_slowDealloc(v11, -1LL, -1LL);

      id v18 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
      v18(v44, v41);
    }

    else
    {
      swift_bridgeObjectRelease_n(v2, 2LL);

      id v18 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
      v18(v8, v9);
    }

    *(void *)(v0 + 384) = v18;
    id v19 = (void *)swift_task_alloc(dword_10008035C);
    *(void *)(v0 + 392) = v19;
    *id v19 = v0;
    v19[1] = sub_1000182D0;
    return sub_10004A9C4(v2, *(void *)(v0 + 208), *(void *)(v0 + 216));
  }

  swift_bridgeObjectRelease(v2);
  uint64_t v23 = type metadata accessor for XPCServer();
  sub_10000D1E8( (unint64_t *)&qword_10007F128,  (uint64_t (*)(uint64_t))type metadata accessor for XPCServer,  (uint64_t)&unk_100060A78);
  uint64_t v24 = static LoggedObject.logger.getter(v23);
  uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
  os_log_type_t v26 = static os_log_type_t.info.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    BOOL v27 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)BOOL v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "No home zones to delete", v27, 2u);
    swift_slowDealloc(v27, -1LL, -1LL);
  }

  unint64_t v29 = *(void **)(v0 + 208);
  Class v28 = *(void **)(v0 + 216);
  uint64_t v30 = *(void *)(v0 + 96);

  Class v31 = *(void (**)(uint64_t, void))(v30 + 8);
  uint64_t v32 = *(void *)(v0 + 192);
  uint64_t v33 = *(void *)(v0 + 200);
  uint64_t v35 = *(void *)(v0 + 176);
  uint64_t v34 = *(void *)(v0 + 184);
  uint64_t v37 = *(void *)(v0 + 144);
  uint64_t v36 = *(void *)(v0 + 152);
  uint64_t v39 = *(void *)(v0 + 128);
  uint64_t v38 = *(void *)(v0 + 136);
  uint64_t v40 = *(void *)(v0 + 120);
  uint64_t v43 = *(void *)(v0 + 112);
  uint64_t v45 = *(void *)(v0 + 104);
  v31(v40, *(void *)(v0 + 88));
  swift_task_dealloc(v33);
  swift_task_dealloc(v32);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v43);
  swift_task_dealloc(v45);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001710C()
{
  uint64_t v1 = *(void *)(v0 + 256);
  swift_bridgeObjectRelease(*(void *)(v0 + 240));
  uint64_t v2 = type metadata accessor for XPCServer();
  uint64_t v3 = sub_10000D1E8( (unint64_t *)&qword_10007F128,  (uint64_t (*)(uint64_t))type metadata accessor for XPCServer,  (uint64_t)&unk_100060A78);
  static LoggedObject.logger.getter(v2);
  swift_errorRetain(v1);
  uint64_t v4 = swift_errorRetain(v1);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v59 = v2;
    uint64_t v7 = *(void *)(v0 + 256);
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v8 = 138543362;
    swift_errorRetain(v7);
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(void *)(v0 + 64) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v8 + 4);
    uint64_t *v9 = v10;
    swift_errorRelease(v7);
    uint64_t v11 = v7;
    uint64_t v2 = v59;
    swift_errorRelease(v11);
    _os_log_impl( (void *)&_mh_execute_header,  v5,  v6,  "Ignoring error removing events from the database: %{public}@",  v8,  0xCu);
    uint64_t v12 = sub_10000D228(&qword_10007EE38);
    swift_arrayDestroy(v9, 1LL, v12);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    uint64_t v13 = *(void *)(v0 + 256);
    swift_errorRelease(v13);
    swift_errorRelease(v13);
  }

  uint64_t v14 = *(void *)(v0 + 256);
  uint64_t v15 = *(void **)(v0 + 232);
  uint64_t v16 = *(void *)(v0 + 144);
  uint64_t v17 = *(void *)(v0 + 88);
  uint64_t v18 = *(void *)(v0 + 96);

  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
  sub_100025500(v14);

  swift_errorRelease(v14);
  uint64_t v19 = *(void *)(v0 + 224);
  *(void *)(v0 + 360) = v19;
  if ((unint64_t)v19 >> 62)
  {
    if (v19 < 0) {
      uint64_t v37 = v19;
    }
    else {
      uint64_t v37 = v19 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v19);
    uint64_t v38 = _CocoaArrayWrapper.endIndex.getter(v37);
    swift_bridgeObjectRelease(v19);
    if (v38) {
      goto LABEL_6;
    }
  }

  else if (*(void *)((v19 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
LABEL_6:
    *(void *)(v0 + 368) = v2;
    *(void *)(v0 + 376) = v3;
    static LoggedObject.logger.getter(v2);
    uint64_t v20 = swift_bridgeObjectRetain_n(v19, 2LL);
    uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v22 = static os_log_type_t.info.getter(v21);
    BOOL v23 = os_log_type_enabled(v21, v22);
    uint64_t v24 = *(void *)(v0 + 112);
    uint64_t v25 = *(void *)(v0 + 88);
    uint64_t v26 = *(void *)(v0 + 96);
    if (v23)
    {
      uint64_t v60 = *(void *)(v0 + 112);
      uint64_t v57 = *(void *)(v0 + 96);
      BOOL v27 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v28 = swift_slowAlloc(32LL, -1LL);
      uint64_t v62 = v28;
      *(_DWORD *)BOOL v27 = 136446210;
      unint64_t v29 = sub_100018640();
      swift_bridgeObjectRetain(v19);
      uint64_t v31 = Array.description.getter(v30, v29);
      uint64_t v56 = v25;
      unint64_t v33 = v32;
      swift_bridgeObjectRelease(v19);
      *(void *)(v0 + 48) = sub_100046274(v31, v33, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v27 + 4);
      swift_bridgeObjectRelease(v33);
      swift_bridgeObjectRelease_n(v19, 2LL);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Deleting home zones: %{public}s", v27, 0xCu);
      swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1LL, -1LL);
      swift_slowDealloc(v27, -1LL, -1LL);

      uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v57 + 8);
      v34(v60, v56);
    }

    else
    {
      swift_bridgeObjectRelease_n(v19, 2LL);

      uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
      v34(v24, v25);
    }

    *(void *)(v0 + 384) = v34;
    uint64_t v35 = (void *)swift_task_alloc(dword_10008035C);
    *(void *)(v0 + 392) = v35;
    *uint64_t v35 = v0;
    v35[1] = sub_1000182D0;
    return sub_10004A9C4(v19, *(void *)(v0 + 208), *(void *)(v0 + 216));
  }

  swift_bridgeObjectRelease(v19);
  uint64_t v39 = static LoggedObject.logger.getter(v2);
  uint64_t v40 = (os_log_s *)Logger.logObject.getter(v39);
  os_log_type_t v41 = static os_log_type_t.info.getter(v40);
  if (os_log_type_enabled(v40, v41))
  {
    uint64_t v42 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v42 = 0;
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "No home zones to delete", v42, 2u);
    swift_slowDealloc(v42, -1LL, -1LL);
  }

  uint64_t v44 = *(void **)(v0 + 208);
  uint64_t v43 = *(void **)(v0 + 216);
  uint64_t v45 = *(void *)(v0 + 96);

  uint64_t v46 = *(void (**)(uint64_t, void))(v45 + 8);
  uint64_t v47 = *(void *)(v0 + 192);
  uint64_t v48 = *(void *)(v0 + 200);
  uint64_t v50 = *(void *)(v0 + 176);
  uint64_t v49 = *(void *)(v0 + 184);
  uint64_t v52 = *(void *)(v0 + 144);
  uint64_t v51 = *(void *)(v0 + 152);
  uint64_t v54 = *(void *)(v0 + 128);
  uint64_t v53 = *(void *)(v0 + 136);
  uint64_t v55 = *(void *)(v0 + 120);
  uint64_t v58 = *(void *)(v0 + 112);
  uint64_t v61 = *(void *)(v0 + 104);
  v46(v55, *(void *)(v0 + 88));
  swift_task_dealloc(v48);
  swift_task_dealloc(v47);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v58);
  swift_task_dealloc(v61);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001766C(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 296);
  *(void *)(v3 + 304) = a1;
  *(void *)(v3 + 312) = v1;
  swift_task_dealloc(v4);
  if (v1) {
    uint64_t v5 = sub_10001849C;
  }
  else {
    uint64_t v5 = sub_1000176D8;
  }
  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_1000176D8()
{
  uint64_t receiver = (uint64_t)v0[19].receiver;
  if (!((unint64_t)receiver >> 62))
  {
    uint64_t v2 = *(void *)((receiver & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v2) {
      goto LABEL_3;
    }
LABEL_14:
    swift_bridgeObjectRelease(v0[19].receiver);
    v0[20].uint64_t receiver = _swiftEmptyArrayStorage;
    uint64_t v14 = v0[5].receiver;
    uint64_t v15 = (objc_class *)type metadata accessor for EventUploadSubtaskLogEvent();
    uint64_t v16 = (char *)objc_allocWithZone(v15);
    uint64_t v17 = OBJC_IVAR____TtC11homeeventsd26EventUploadSubtaskLogEvent_metricsManager;
    type metadata accessor for MetricsManager(0LL);
    uint64_t v18 = v16;
    *(void *)&v16[v17] = static MetricsManager.sharedInstance.getter();
    v18[OBJC_IVAR____TtC11homeeventsd26EventUploadSubtaskLogEvent_subtaskType] = 2;
    *(void *)&v18[OBJC_IVAR____TtC11homeeventsd26EventUploadSubtaskLogEvent_numRecords] = 0LL;
    v18[OBJC_IVAR____TtC11homeeventsd26EventUploadSubtaskLogEvent_attributedToFakeData] = 0;

    v0[1].uint64_t receiver = v18;
    v0[1].Class super_class = v15;
    v0[20].Class super_class = (Class)objc_msgSendSuper2(v0 + 1, "init");
    sub_10000D408(v14, v14[3]);
    uint64_t v19 = (objc_super **)swift_task_alloc(dword_10008059C);
    v0[21].uint64_t receiver = v19;
    *uint64_t v19 = v0;
    v19[1] = (objc_super *)sub_1000178EC;
    return sub_100052BA4();
  }

  if (receiver < 0) {
    uint64_t v13 = (uint64_t)v0[19].receiver;
  }
  else {
    uint64_t v13 = receiver & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v0[19].receiver);
  uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v13);
  swift_bridgeObjectRelease(receiver);
  if (!v2) {
    goto LABEL_14;
  }
LABEL_3:
  uint64_t result = specialized ContiguousArray.reserveCapacity(_:)(v2);
  if ((v2 & 0x8000000000000000LL) == 0)
  {
    uint64_t v4 = 0LL;
    unint64_t v5 = receiver & 0xC000000000000001LL;
    uint64_t v6 = (uint64_t)v0[19].receiver + 32;
    do
    {
      if (v5) {
        id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v0[19].receiver);
      }
      else {
        id v7 = *(id *)(v6 + 8 * v4);
      }
      uint64_t v8 = v7;
      ++v4;
      id v9 = [v7 zoneID];

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v10);
      uint64_t v11 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v11);
      uint64_t v12 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v9);
      specialized ContiguousArray._endMutation()(v12);
    }

    while (v2 != v4);
    goto LABEL_14;
  }

  __break(1u);
  return result;
}

uint64_t sub_1000178EC(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 336);
  *(void *)(*v2 + 344) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = sub_100017D6C;
  }

  else
  {
    *(void *)(v4 + 352) = a1;
    uint64_t v6 = sub_100017960;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_100017960()
{
  uint64_t v1 = *(char **)(v0 + 328);
  *(void *)&v1[OBJC_IVAR____TtC11homeeventsd26EventUploadSubtaskLogEvent_numRecords] = *(void *)(v0 + 352);
  sub_1000252A0();

  uint64_t v2 = *(void *)(v0 + 320);
  *(void *)(v0 + 360) = v2;
  if ((unint64_t)v2 >> 62)
  {
    if (v2 < 0) {
      uint64_t v21 = v2;
    }
    else {
      uint64_t v21 = v2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v2);
    uint64_t v22 = _CocoaArrayWrapper.endIndex.getter(v21);
    swift_bridgeObjectRelease(v2);
    if (v22) {
      goto LABEL_3;
    }
  }

  else if (*(void *)((v2 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
LABEL_3:
    uint64_t v3 = type metadata accessor for XPCServer();
    *(void *)(v0 + 368) = v3;
    *(void *)(v0 + 376) = sub_10000D1E8( (unint64_t *)&qword_10007F128,  (uint64_t (*)(uint64_t))type metadata accessor for XPCServer,  (uint64_t)&unk_100060A78);
    static LoggedObject.logger.getter(v3);
    uint64_t v4 = swift_bridgeObjectRetain_n(v2, 2LL);
    uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
    os_log_type_t v6 = static os_log_type_t.info.getter(v5);
    BOOL v7 = os_log_type_enabled(v5, v6);
    uint64_t v8 = *(void *)(v0 + 112);
    uint64_t v9 = *(void *)(v0 + 88);
    uint64_t v10 = *(void *)(v0 + 96);
    if (v7)
    {
      uint64_t v44 = *(void *)(v0 + 112);
      uint64_t v42 = *(void *)(v0 + 96);
      uint64_t v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v12 = swift_slowAlloc(32LL, -1LL);
      uint64_t v46 = v12;
      *(_DWORD *)uint64_t v11 = 136446210;
      unint64_t v13 = sub_100018640();
      swift_bridgeObjectRetain(v2);
      uint64_t v15 = Array.description.getter(v14, v13);
      uint64_t v41 = v9;
      unint64_t v17 = v16;
      swift_bridgeObjectRelease(v2);
      *(void *)(v0 + 48) = sub_100046274(v15, v17, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v11 + 4);
      swift_bridgeObjectRelease(v17);
      swift_bridgeObjectRelease_n(v2, 2LL);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Deleting home zones: %{public}s", v11, 0xCu);
      swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1LL, -1LL);
      swift_slowDealloc(v11, -1LL, -1LL);

      uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
      v18(v44, v41);
    }

    else
    {
      swift_bridgeObjectRelease_n(v2, 2LL);

      uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
      v18(v8, v9);
    }

    *(void *)(v0 + 384) = v18;
    uint64_t v19 = (void *)swift_task_alloc(dword_10008035C);
    *(void *)(v0 + 392) = v19;
    *uint64_t v19 = v0;
    v19[1] = sub_1000182D0;
    return sub_10004A9C4(v2, *(void *)(v0 + 208), *(void *)(v0 + 216));
  }

  swift_bridgeObjectRelease(v2);
  uint64_t v23 = type metadata accessor for XPCServer();
  sub_10000D1E8( (unint64_t *)&qword_10007F128,  (uint64_t (*)(uint64_t))type metadata accessor for XPCServer,  (uint64_t)&unk_100060A78);
  uint64_t v24 = static LoggedObject.logger.getter(v23);
  uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
  os_log_type_t v26 = static os_log_type_t.info.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    BOOL v27 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)BOOL v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "No home zones to delete", v27, 2u);
    swift_slowDealloc(v27, -1LL, -1LL);
  }

  unint64_t v29 = *(void **)(v0 + 208);
  uint64_t v28 = *(void **)(v0 + 216);
  uint64_t v30 = *(void *)(v0 + 96);

  uint64_t v31 = *(void (**)(uint64_t, void))(v30 + 8);
  uint64_t v32 = *(void *)(v0 + 192);
  uint64_t v33 = *(void *)(v0 + 200);
  uint64_t v35 = *(void *)(v0 + 176);
  uint64_t v34 = *(void *)(v0 + 184);
  uint64_t v37 = *(void *)(v0 + 144);
  uint64_t v36 = *(void *)(v0 + 152);
  uint64_t v39 = *(void *)(v0 + 128);
  uint64_t v38 = *(void *)(v0 + 136);
  uint64_t v40 = *(void *)(v0 + 120);
  uint64_t v43 = *(void *)(v0 + 112);
  uint64_t v45 = *(void *)(v0 + 104);
  v31(v40, *(void *)(v0 + 88));
  swift_task_dealloc(v33);
  swift_task_dealloc(v32);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v43);
  swift_task_dealloc(v45);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100017D6C()
{
  uint64_t v1 = *(void *)(v0 + 344);
  static LoggedObject.logger.getter(*(void *)(v0 + 272));
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void *)(v0 + 344);
    os_log_type_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    BOOL v7 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)os_log_type_t v6 = 138543362;
    swift_errorRetain(v5);
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(void *)(v0 + sub_1000154A8(*(void *)(v0 + 152) + OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_database, v0 + 56) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v6 + 4);
    *BOOL v7 = v8;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Ignoring error clearing local database: %{public}@", v6, 0xCu);
    uint64_t v9 = sub_10000D228(&qword_10007EE38);
    swift_arrayDestroy(v7, 1LL, v9);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  else
  {
    uint64_t v10 = *(void *)(v0 + 344);
    swift_errorRelease(v10);
    swift_errorRelease(v10);
  }

  uint64_t v11 = *(void *)(v0 + 344);
  uint64_t v12 = *(void **)(v0 + 328);
  unint64_t v13 = *(void (**)(uint64_t, uint64_t))(v0 + 288);
  uint64_t v14 = *(void *)(v0 + 128);
  uint64_t v15 = *(void *)(v0 + 88);

  v13(v14, v15);
  sub_100025500(v11);

  swift_errorRelease(v11);
  uint64_t v16 = *(void *)(v0 + 320);
  *(void *)(v0 + 360) = v16;
  if ((unint64_t)v16 >> 62)
  {
    if (v16 < 0) {
      uint64_t v35 = v16;
    }
    else {
      uint64_t v35 = v16 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v16);
    uint64_t v36 = _CocoaArrayWrapper.endIndex.getter(v35);
    swift_bridgeObjectRelease(v16);
    if (v36) {
      goto LABEL_6;
    }
  }

  else if (*(void *)((v16 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
LABEL_6:
    uint64_t v17 = type metadata accessor for XPCServer();
    *(void *)(v0 + 368) = v17;
    *(void *)(v0 + 376) = sub_10000D1E8( (unint64_t *)&qword_10007F128,  (uint64_t (*)(uint64_t))type metadata accessor for XPCServer,  (uint64_t)&unk_100060A78);
    static LoggedObject.logger.getter(v17);
    uint64_t v18 = swift_bridgeObjectRetain_n(v16, 2LL);
    uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v20 = static os_log_type_t.info.getter(v19);
    BOOL v21 = os_log_type_enabled(v19, v20);
    uint64_t v22 = *(void *)(v0 + 112);
    uint64_t v23 = *(void *)(v0 + 88);
    uint64_t v24 = *(void *)(v0 + 96);
    if (v21)
    {
      uint64_t v58 = *(void *)(v0 + 112);
      uint64_t v56 = *(void *)(v0 + 96);
      uint64_t v25 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v26 = swift_slowAlloc(32LL, -1LL);
      uint64_t v60 = v26;
      *(_DWORD *)uint64_t v25 = 136446210;
      unint64_t v27 = sub_100018640();
      swift_bridgeObjectRetain(v16);
      uint64_t v29 = Array.description.getter(v28, v27);
      uint64_t v55 = v23;
      unint64_t v31 = v30;
      swift_bridgeObjectRelease(v16);
      *(void *)(v0 + 48) = sub_100046274(v29, v31, &v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v25 + 4);
      swift_bridgeObjectRelease(v31);
      swift_bridgeObjectRelease_n(v16, 2LL);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Deleting home zones: %{public}s", v25, 0xCu);
      swift_arrayDestroy(v26, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1LL, -1LL);
      swift_slowDealloc(v25, -1LL, -1LL);

      uint64_t v32 = *(void (**)(uint64_t, uint64_t))(v56 + 8);
      v32(v58, v55);
    }

    else
    {
      swift_bridgeObjectRelease_n(v16, 2LL);

      uint64_t v32 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
      v32(v22, v23);
    }

    *(void *)(v0 + 384) = v32;
    uint64_t v33 = (void *)swift_task_alloc(dword_10008035C);
    *(void *)(v0 + 392) = v33;
    *uint64_t v33 = v0;
    v33[1] = sub_1000182D0;
    return sub_10004A9C4(v16, *(void *)(v0 + 208), *(void *)(v0 + 216));
  }

  swift_bridgeObjectRelease(v16);
  uint64_t v37 = type metadata accessor for XPCServer();
  sub_10000D1E8( (unint64_t *)&qword_10007F128,  (uint64_t (*)(uint64_t))type metadata accessor for XPCServer,  (uint64_t)&unk_100060A78);
  uint64_t v38 = static LoggedObject.logger.getter(v37);
  uint64_t v39 = (os_log_s *)Logger.logObject.getter(v38);
  os_log_type_t v40 = static os_log_type_t.info.getter(v39);
  if (os_log_type_enabled(v39, v40))
  {
    uint64_t v41 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v41 = 0;
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "No home zones to delete", v41, 2u);
    swift_slowDealloc(v41, -1LL, -1LL);
  }

  uint64_t v43 = *(void **)(v0 + 208);
  uint64_t v42 = *(void **)(v0 + 216);
  uint64_t v44 = *(void *)(v0 + 96);

  uint64_t v45 = *(void (**)(uint64_t, void))(v44 + 8);
  uint64_t v46 = *(void *)(v0 + 192);
  uint64_t v47 = *(void *)(v0 + 200);
  uint64_t v49 = *(void *)(v0 + 176);
  uint64_t v48 = *(void *)(v0 + 184);
  uint64_t v51 = *(void *)(v0 + 144);
  uint64_t v50 = *(void *)(v0 + 152);
  uint64_t v53 = *(void *)(v0 + 128);
  uint64_t v52 = *(void *)(v0 + 136);
  uint64_t v54 = *(void *)(v0 + 120);
  uint64_t v57 = *(void *)(v0 + 112);
  uint64_t v59 = *(void *)(v0 + 104);
  v45(v54, *(void *)(v0 + 88));
  swift_task_dealloc(v47);
  swift_task_dealloc(v46);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v57);
  swift_task_dealloc(v59);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000182D0()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 392);
  *(void *)(*v1 + 400) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    os_log_type_t v4 = sub_100018568;
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v2 + 360));
    os_log_type_t v4 = sub_10001833C;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_10001833C()
{
  uint64_t v1 = static LoggedObject.logger.getter(*(void *)(v0 + 368));
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    os_log_type_t v4 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)os_log_type_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Finished clearing events", v4, 2u);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  os_log_type_t v6 = *(void **)(v0 + 208);
  uint64_t v5 = *(void **)(v0 + 216);

  uint64_t v7 = *(void *)(v0 + 192);
  uint64_t v8 = *(void *)(v0 + 200);
  uint64_t v10 = *(void *)(v0 + 176);
  uint64_t v9 = *(void *)(v0 + 184);
  uint64_t v12 = *(void *)(v0 + 144);
  uint64_t v11 = *(void *)(v0 + 152);
  uint64_t v14 = *(void *)(v0 + 128);
  uint64_t v13 = *(void *)(v0 + 136);
  uint64_t v15 = *(void *)(v0 + 104);
  uint64_t v17 = *(void *)(v0 + 120);
  uint64_t v18 = *(void *)(v0 + 112);
  (*(void (**)(uint64_t, void))(v0 + 384))(v15, *(void *)(v0 + 88));
  swift_task_dealloc(v8);
  swift_task_dealloc(v7);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001849C()
{
  uint64_t v1 = *(void **)(v0 + 216);

  uint64_t v2 = *(void *)(v0 + 192);
  uint64_t v4 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 184);
  uint64_t v6 = *(void *)(v0 + 144);
  uint64_t v5 = *(void *)(v0 + 152);
  uint64_t v8 = *(void *)(v0 + 128);
  uint64_t v7 = *(void *)(v0 + 136);
  uint64_t v9 = *(void *)(v0 + 112);
  uint64_t v10 = *(void *)(v0 + 120);
  uint64_t v12 = *(void *)(v0 + 104);
  swift_task_dealloc(*(void *)(v0 + 200));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v10);
  swift_task_dealloc(v9);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100018568()
{
  uint64_t v1 = *(void *)(v0 + 360);
  uint64_t v2 = *(void **)(v0 + 216);

  swift_bridgeObjectRelease(v1);
  uint64_t v3 = *(void *)(v0 + 192);
  uint64_t v5 = *(void *)(v0 + 176);
  uint64_t v4 = *(void *)(v0 + 184);
  uint64_t v7 = *(void *)(v0 + 144);
  uint64_t v6 = *(void *)(v0 + 152);
  uint64_t v9 = *(void *)(v0 + 128);
  uint64_t v8 = *(void *)(v0 + 136);
  uint64_t v10 = *(void *)(v0 + 112);
  uint64_t v11 = *(void *)(v0 + 120);
  uint64_t v13 = *(void *)(v0 + 104);
  swift_task_dealloc(*(void *)(v0 + 200));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v10);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_100018640()
{
  unint64_t result = qword_10007F490;
  if (!qword_10007F490)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___CKRecordZoneID);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10007F490);
  }

  return result;
}

BOOL sub_10001867C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_100018690()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1000186D4()
{
}

Swift::Int sub_1000186FC()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void *sub_10001873C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_100018748(void *a1@<X8>)
{
  *a1 = 0LL;
}

void *sub_100018750@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *sub_100018764@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *sub_100018778@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_10001878C(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *sub_1000187BC@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_1000187E8@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

void *sub_10001880C(void *result)
{
  *v1 |= *result;
  return result;
}

void *sub_100018820(void *result)
{
  *v1 &= *result;
  return result;
}

void *sub_100018834(void *result)
{
  *v1 ^= *result;
  return result;
}

void *sub_100018848@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_10001885C(void *a1)
{
  return (*v1 & ~*a1) == 0LL;
}

BOOL sub_100018870(void *a1)
{
  return (*v1 & *a1) == 0LL;
}

BOOL sub_100018884(void *a1)
{
  return (*a1 & ~*v1) == 0LL;
}

BOOL sub_100018898()
{
  return *v0 == 0LL;
}

uint64_t sub_1000188A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

void *sub_1000188C0(void *result)
{
  *v1 &= ~*result;
  return result;
}

uint64_t sub_1000188D4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_1000190F8(a1);
  uint64_t result = swift_bridgeObjectRelease(a1);
  *a2 = v4;
  return result;
}

uint64_t sub_100018910()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

uint64_t sub_10001893C()
{
  return *(_BYTE *)(v0 + 16) & 1;
}

uint64_t sub_100018948()
{
  return *(_BYTE *)(v0 + 17) & 1;
}

uint64_t sub_100018954()
{
  return *(_BYTE *)(v0 + 18) & 1;
}

uint64_t sub_100018960()
{
  if (*(_BYTE *)(v0 + 19) == 4) {
    return 0LL;
  }
  else {
    return *(unsigned __int8 *)(v0 + 19);
  }
}

double sub_100018970()
{
  double result = *(double *)(v0 + 24);
  if (*(_BYTE *)(v0 + 32)) {
    return 0.0;
  }
  return result;
}

double sub_100018988()
{
  double result = *(double *)(v0 + 40);
  if (*(_BYTE *)(v0 + 48)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000189A0()
{
  if (*(_BYTE *)(v0 + 64)) {
    return 0LL;
  }
  else {
    return *(void *)(v0 + 56);
  }
}

unint64_t sub_1000189B4()
{
  unsigned __int8 v1 = [v0 resources];
  unint64_t v2 = (unint64_t)[v0 resources] & 2 | v1 & 1;
  unint64_t v3 = (unint64_t)[v0 resources] & 4;
  unint64_t v4 = v2 | v3 | (unint64_t)[v0 resources] & 8;
  return v4 | (unint64_t)[v0 resources] & 0x10;
}

id sub_100018A38(char a1)
{
  if ((a1 & 1) != 0)
  {
    if ((a1 & 2) != 0)
    {
      uint64_t v2 = 3LL;
      if ((a1 & 4) != 0) {
        goto LABEL_4;
      }
    }

    else
    {
      uint64_t v2 = 1LL;
      if ((a1 & 4) != 0) {
        goto LABEL_4;
      }
    }
  }

  else
  {
    if ((a1 & 2) == 0)
    {
      uint64_t v2 = 0LL;
      if ((a1 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }

    uint64_t v2 = 2LL;
    if ((a1 & 4) != 0) {
LABEL_4:
    }
      v2 |= 4uLL;
  }

LABEL_5:
  if ((a1 & 8) != 0)
  {
    v2 |= 8uLL;
    if ((a1 & 0x10) == 0) {
      return [v1 setResources:v2];
    }
    goto LABEL_7;
  }

  if ((a1 & 0x10) != 0) {
LABEL_7:
  }
    v2 |= 0x10uLL;
  return [v1 setResources:v2];
}

        uint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    BOOL v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v22 = *v21;
    uint64_t v23 = (-1LL << v3) - 1;
  }

  else
  {
    BOOL v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v23 = *v21;
    uint64_t v22 = (-1LL << result) - 1;
  }

  *BOOL v21 = v23 & v22;
  uint64_t v24 = *(void *)(a2 + 16);
  uint64_t v25 = __OFSUB__(v24, 1LL);
  uint64_t v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

  *a1 = v8;
  if ((a6 & 0x8000000000000000LL) != 0) {
    return 0LL;
  }
  else {
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
  }
}

uint64_t sub_100018A9C()
{
  id v1 = [*v0 identifier];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

id sub_100018AF0()
{
  return [*v0 requiresNetworkConnectivity];
}

id sub_100018B10()
{
  return [*v0 shouldWakeDevice];
}

id sub_100018B30()
{
  return [*v0 requiresExternalPower];
}

id sub_100018B50()
{
  id result = [*v0 priority];
  else {
    return (id)result;
  }
}

id sub_100018B78()
{
  return [*v0 trySchedulingBefore];
}

id sub_100018B88()
{
  return [*v0 scheduleAfter];
}

unint64_t sub_100018B98()
{
  return sub_1000189B4();
}

uint64_t initializeBufferWithCopyOfBuffer for BackgroundSystemTaskScheduler(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t initializeWithCopy for BackgroundSystemTaskRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(void *)(a1 + sub_1000154A8(*(void *)(v0 + 152) + OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_database, v0 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for BackgroundSystemTaskRequest(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(_BYTE *)(a1 + 19) = *(_BYTE *)(a2 + 19);
  uint64_t v6 = *(void *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(void *)(a1 + 24) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(void *)(a1 + 40) = v7;
  uint64_t v8 = *(void *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(void *)(a1 + sub_1000154A8(*(void *)(v0 + 152) + OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_database, v0 + 56) = v8;
  return a1;
}

__n128 initializeWithTake for BackgroundSystemTaskRequest(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for BackgroundSystemTaskRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(void *)(a1 + sub_1000154A8(*(void *)(v0 + 152) + OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_database, v0 + 56) = *(void *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for BackgroundSystemTaskRequest(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 65)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BackgroundSystemTaskRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + sub_1000154A8(*(void *)(v0 + 152) + OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_database, v0 + 56) = 0LL;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 65) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 65) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for BackgroundSystemTaskRequest()
{
  return &type metadata for BackgroundSystemTaskRequest;
}

ValueMetadata *type metadata accessor for BackgroundSystemTaskRequestResources()
{
  return &type metadata for BackgroundSystemTaskRequestResources;
}

uint64_t getEnumTagSinglePayload for EventUploadScheduledWaitOutcome(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

uint64_t storeEnumTagSinglePayload for BackgroundSystemTaskRequestPriority( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_100018F10 + 4 * byte_100060EF5[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100018F44 + 4 * byte_100060EF0[v4]))();
}

uint64_t sub_100018F44(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100018F4C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100018F54LL);
  }
  return result;
}

uint64_t sub_100018F60(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100018F68LL);
  }
  *(_BYTE *)__n128 result = a2 + 3;
  return result;
}

uint64_t sub_100018F6C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100018F74(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BackgroundSystemTaskRequestPriority()
{
  return &type metadata for BackgroundSystemTaskRequestPriority;
}

unint64_t sub_100018F94()
{
  unint64_t result = qword_10007F4B0;
  if (!qword_10007F4B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100061024, &type metadata for BackgroundSystemTaskRequestPriority);
    atomic_store(result, (unint64_t *)&qword_10007F4B0);
  }

  return result;
}

unint64_t sub_100018FDC()
{
  unint64_t result = qword_10007F4B8;
  if (!qword_10007F4B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006107C, &type metadata for BackgroundSystemTaskRequestResources);
    atomic_store(result, (unint64_t *)&qword_10007F4B8);
  }

  return result;
}

unint64_t sub_100019024()
{
  unint64_t result = qword_10007F4C0;
  if (!qword_10007F4C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006104C, &type metadata for BackgroundSystemTaskRequestResources);
    atomic_store(result, (unint64_t *)&qword_10007F4C0);
  }

  return result;
}

unint64_t sub_10001906C()
{
  unint64_t result = qword_10007F4C8;
  if (!qword_10007F4C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000610A4, &type metadata for BackgroundSystemTaskRequestResources);
    atomic_store(result, (unint64_t *)&qword_10007F4C8);
  }

  return result;
}

unint64_t sub_1000190B4()
{
  unint64_t result = qword_10007F4D0;
  if (!qword_10007F4D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000610DC, &type metadata for BackgroundSystemTaskRequestResources);
    atomic_store(result, &qword_10007F4D0);
  }

  return result;
}

uint64_t sub_1000190F8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0LL;
  }
  uint64_t result = 0LL;
  uint64_t v4 = (uint64_t *)(a1 + 32);
  do
  {
    uint64_t v6 = *v4++;
    uint64_t v5 = v6;
    if ((v6 & ~result) == 0) {
      uint64_t v5 = 0LL;
    }
    result |= v5;
    --v1;
  }

  while (v1);
  return result;
}

uint64_t sub_100019134()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  v1[3] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[4] = v3;
  v1[5] = swift_task_alloc((*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100019194, 0LL, 0LL);
}

uint64_t sub_100019194()
{
  uint64_t v1 = *(_BYTE **)(v0 + 16);
  if ((*v1 & 1) != 0)
  {
    uint64_t v2 = swift_task_alloc(32LL);
    *(void *)(v0 + 48) = v2;
    *(void *)(v2 + 16) = v1;
    uint64_t v3 = (void *)swift_task_alloc(async function pointer to withThrowingTaskGroup<A, B>(of:returning:isolation:body:)[1]);
    *(void *)(v0 + sub_1000154A8(*(void *)(v0 + 152) + OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_database, v0 + 56) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100019348;
    return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)( v3,  (char *)&type metadata for () + 8,  (char *)&type metadata for () + 8,  0LL,  0LL,  &unk_10007F4F0,  v2,  (char *)&type metadata for () + 8);
  }

  else
  {
    uint64_t v5 = type metadata accessor for DiagnosticFileCollector(0LL);
    sub_10000D1E8(&qword_10007F4E0, type metadata accessor for DiagnosticFileCollector, (uint64_t)&unk_100061210);
    uint64_t v6 = static LoggedObject.logger.getter(v5);
    BOOL v7 = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v8 = static os_log_type_t.info.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "Consent was not provided to collect sensitive info, bailing out",  v9,  2u);
      swift_slowDealloc(v9, -1LL, -1LL);
    }

    uint64_t v11 = *(void *)(v0 + 32);
    uint64_t v10 = *(void *)(v0 + 40);
    uint64_t v12 = *(void *)(v0 + 24);

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    swift_task_dealloc(*(void *)(v0 + 40));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_100019348()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 56);
  *(void *)(*v1 + 64) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_1000193E8;
  }

  else
  {
    swift_task_dealloc(*(void *)(v2 + 48));
    uint64_t v4 = sub_1000193B4;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_1000193B4()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000193E8()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100019424(id *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  id v5 = *a1;
  id v6 = [*a1 defaultConfiguration];
  if (!v6)
  {
    __break(1u);
    goto LABEL_6;
  }

  BOOL v7 = v6;
  [v6 setContainer:a2];

  id v8 = [v5 defaultConfiguration];
  if (!v8)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  uint64_t v9 = v8;
  [v8 setQualityOfService:25];

  v25[2] = 0LL;
  unint64_t v26 = 0xE000000000000000LL;
  v25[0] = 47LL;
  v25[1] = 0xE100000000000000LL;
  __chkstk_darwin(v10);
  v24[2] = v25;
  uint64_t v11 = (void *)sub_10001BC90( 0x7FFFFFFFFFFFFFFFLL,  1,  sub_10001C920,  (uint64_t)v24,  0xD000000000000029LL,  0x8000000100063150LL);
  uint64_t v3 = v11;
  if (v11[2])
  {
    uint64_t v12 = v11[4];
    uint64_t v13 = v11[5];
    uint64_t v14 = v11[6];
    uint64_t v15 = v11[7];
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRelease(v3);
    v16._countAndFlagsBits = static String._fromSubstring(_:)(v12, v13, v14, v15);
    object = v16._object;
    String.append(_:)(v16);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(object);
    v18._countAndFlagsBits = 46LL;
    v18._object = (void *)0xE100000000000000LL;
    String.append(_:)(v18);
    v25[0] = type metadata accessor for DiagnosticFileCollector(0LL);
    uint64_t v19 = sub_10000D228(&qword_10007F590);
    v20._countAndFlagsBits = String.init<A>(describing:)(v25, v19);
    BOOL v21 = v20._object;
    String.append(_:)(v20);
    swift_bridgeObjectRelease(v21);
    unint64_t v22 = v26;
    NSString v23 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v22);
    [v5 setName:v23];

    return;
  }

void sub_10001961C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DiagnosticFileCollector(0LL);
  uint64_t v3 = __chkstk_darwin(v2);
  id v5 = (char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  BOOL v7 = (char *)&v58 - v6;
  uint64_t v66 = type metadata accessor for Logger(0LL);
  uint64_t v8 = *(void *)(v66 - 8);
  uint64_t v9 = __chkstk_darwin(v66);
  uint64_t v11 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v64 = (char *)&v58 - v12;
  id v13 = [(id)objc_opt_self(NSFileManager) defaultManager];
  char v71 = 0;
  uint64_t v65 = v0 + *(int *)(v2 + 24);
  URL.absoluteString.getter();
  uint64_t v15 = v14;
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v15);
  id v68 = v13;
  LODWORD(v15) = [v13 fileExistsAtPath:v16 isDirectory:&v71];

  uint64_t v17 = v1;
  if ((_DWORD)v15)
  {
    uint64_t v61 = v5;
    uint64_t v62 = v11;
    uint64_t v63 = v8;
    sub_10000D1E8(&qword_10007F4E0, type metadata accessor for DiagnosticFileCollector, (uint64_t)&unk_100061210);
    static LoggedObject.logger.getter(v2);
    uint64_t v18 = sub_10001B8AC(v1, (uint64_t)v7);
    uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v20 = static os_log_type_t.info.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = swift_slowAlloc(22LL, -1LL);
      uint64_t v60 = v1;
      uint64_t v22 = v21;
      NSString v23 = (void *)swift_slowAlloc(64LL, -1LL);
      id v73 = v23;
      *(_DWORD *)uint64_t v22 = 136315394;
      swift_beginAccess(&v71, v72, 0LL, 0LL);
      if (v71) {
        uint64_t v24 = 0x726F746365726964LL;
      }
      else {
        uint64_t v24 = 1701603686LL;
      }
      if (v71) {
        unint64_t v25 = 0xE900000000000079LL;
      }
      else {
        unint64_t v25 = 0xE400000000000000LL;
      }
      uint64_t v69 = sub_100046274(v24, v25, (uint64_t *)&v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, v70, v22 + 4);
      swift_bridgeObjectRelease(v25);
      *(_WORD *)(v22 + 12) = 2080;
      uint64_t v59 = v22 + 14;
      uint64_t v26 = type metadata accessor for URL(0LL);
      uint64_t v27 = sub_10000D1E8( &qword_10007EEC8,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter(v26, v27);
      unint64_t v30 = v29;
      uint64_t v69 = sub_100046274(v28, v29, (uint64_t *)&v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, v70, v59);
      swift_bridgeObjectRelease(v30);
      sub_100011FBC((uint64_t)v7);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Removing %s at '%s'", (uint8_t *)v22, 0x16u);
      swift_arrayDestroy(v23, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1LL, -1LL);
      uint64_t v31 = v22;
      uint64_t v17 = v60;
      swift_slowDealloc(v31, -1LL, -1LL);
    }

    else
    {
      sub_100011FBC((uint64_t)v7);
    }

    uint64_t v8 = v63;
    (*(void (**)(char *, uint64_t))(v63 + 8))(v64, v66);
    URL._bridgeToObjectiveC()(v32);
    uint64_t v34 = v33;
    id v73 = 0LL;
    unsigned int v35 = [v68 removeItemAtURL:v33 error:&v73];

    id v36 = v73;
    if (!v35) {
      goto LABEL_18;
    }
    id v37 = v73;
    id v5 = v61;
    uint64_t v11 = v62;
  }

  sub_10000D1E8(&qword_10007F4E0, type metadata accessor for DiagnosticFileCollector, (uint64_t)&unk_100061210);
  static LoggedObject.logger.getter(v2);
  uint64_t v38 = sub_10001B8AC(v17, (uint64_t)v5);
  uint64_t v39 = (os_log_s *)Logger.logObject.getter(v38);
  os_log_type_t v40 = static os_log_type_t.info.getter(v39);
  if (os_log_type_enabled(v39, v40))
  {
    uint64_t v41 = swift_slowAlloc(12LL, -1LL);
    uint64_t v62 = v11;
    uint64_t v42 = (uint8_t *)v41;
    uint64_t v43 = (void *)swift_slowAlloc(32LL, -1LL);
    uint64_t v63 = v8;
    uint64_t v44 = v43;
    id v73 = v43;
    *(_DWORD *)uint64_t v42 = 136315138;
    uint64_t v45 = type metadata accessor for URL(0LL);
    uint64_t v46 = sub_10000D1E8( &qword_10007EEC8,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter(v45, v46);
    unint64_t v49 = v48;
    uint64_t v69 = sub_100046274(v47, v48, (uint64_t *)&v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, v70, v42 + 4);
    swift_bridgeObjectRelease(v49);
    sub_100011FBC((uint64_t)v5);
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "Creating diagnostic directory at '%s'", v42, 0xCu);
    swift_arrayDestroy(v44, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1LL, -1LL);
    swift_slowDealloc(v42, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v63 + 8))(v62, v66);
  }

  else
  {
    sub_100011FBC((uint64_t)v5);

    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v66);
  }

  URL._bridgeToObjectiveC()(v50);
  uint64_t v52 = v51;
  id v73 = 0LL;
  unsigned __int8 v53 = [v68 createDirectoryAtURL:v51 withIntermediateDirectories:1 attributes:0 error:&v73];

  id v36 = v73;
  if ((v53 & 1) == 0)
  {
LABEL_18:
    id v55 = v36;
    uint64_t v56 = _convertNSErrorToError(_:)(v36);

    uint64_t v67 = v56;
    swift_willThrow(v57);
    goto LABEL_19;
  }

  id v54 = v73;
LABEL_19:
}

uint64_t type metadata accessor for DiagnosticFileCollector(uint64_t a1)
{
  uint64_t result = qword_10007F608;
  if (!qword_10007F608) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DiagnosticFileCollector);
  }
  return result;
}

uint64_t sub_100019C6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[2] = a2;
  v3[3] = a3;
  uint64_t v4 = *(void *)(type metadata accessor for DiagnosticFileCollector(0LL) - 8);
  v3[4] = v4;
  uint64_t v5 = *(void *)(v4 + 64);
  v3[5] = v5;
  v3[6] = swift_task_alloc((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_10000D228(&qword_10007EE68);
  v3[7] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100019CF0, 0LL, 0LL);
}

uint64_t sub_100019CF0()
{
  uint64_t v2 = v0[6];
  uint64_t v1 = v0[7];
  uint64_t v4 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v5 = v0[3];
  uint64_t v16 = v5;
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  BOOL v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL);
  v7(v1, 1LL, 1LL, v6);
  sub_10001B8AC(v5, v2);
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = (v8 + 32) & ~v8;
  uint64_t v10 = v9 + v3;
  uint64_t v11 = v8 | 7;
  uint64_t v12 = swift_allocObject(&unk_100076318, v10, v8 | 7);
  *(void *)(v12 + 16) = 0LL;
  *(void *)(v12 + 24) = 0LL;
  sub_100011F78(v2, v12 + v9);
  sub_10001A3E8(v1, (uint64_t)&unk_10007F500, v12);
  sub_10001B974(v1);
  v7(v1, 1LL, 1LL, v6);
  sub_10001B8AC(v16, v2);
  uint64_t v13 = swift_allocObject(&unk_100076340, v10, v11);
  *(void *)(v13 + 16) = 0LL;
  *(void *)(v13 + 24) = 0LL;
  sub_100011F78(v2, v13 + v9);
  sub_10001A3E8(v1, (uint64_t)&unk_10007F510, v13);
  sub_10001B974(v1);
  uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10007F518 + dword_10007F518);
  uint64_t v14 = (void *)swift_task_alloc(unk_10007F51C);
  v0[8] = v14;
  *uint64_t v14 = v0;
  v14[1] = sub_100019E74;
  return v17(0LL, 0LL);
}

uint64_t sub_100019E74()
{
  uint64_t v1 = *(void *)(*v0 + 56);
  uint64_t v2 = *(void *)(*v0 + 48);
  uint64_t v4 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 64));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_100019ED8()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10007F53C);
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10001D0F0;
  return sub_100019F20();
}

uint64_t sub_100019F20()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for CloudKitExporter(0LL);
  v1[3] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[4] = v3;
  v1[5] = swift_task_alloc((*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for URL(0LL);
  v1[6] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v1[7] = v5;
  uint64_t v6 = *(void *)(v5 + 64);
  v1[8] = v6;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v1[9] = swift_task_alloc(v7);
  v1[10] = swift_task_alloc(v7);
  return swift_task_switch(sub_100019FBC, 0LL, 0LL);
}

uint64_t sub_100019FBC()
{
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[7];
  uint64_t v4 = v0[8];
  uint64_t v5 = v0[6];
  uint64_t v6 = v0[2];
  uint64_t v7 = type metadata accessor for DiagnosticFileCollector(0LL);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v8(v2, v6 + *(int *)(v7 + 24), v5);
  uint64_t v9 = swift_allocObject(&unk_100076390, 32LL, 7LL);
  v0[11] = v9;
  *(_DWORD *)(v9 + 16) = 0;
  *(void *)(v9 + 24) = _swiftEmptyArrayStorage;
  v8(v1, v2, v5);
  uint64_t v10 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v11 = (v10 + 16) & ~v10;
  unint64_t v12 = (v4 + v11 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v13 = swift_allocObject(&unk_1000763B8, v12 + 8, v10 | 7);
  v0[12] = v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v13 + v11, v1, v5);
  *(void *)(v13 + v12) = v9;
  uint64_t v14 = *(void **)(v6 + *(int *)(v7 + 32));
  type metadata accessor for Configuration(0LL);
  swift_retain(v9);
  swift_retain(v13);
  id v15 = v14;
  uint64_t v16 = static Configuration.cloudKitContainer.getter(v15);
  CloudKitExporter.init(outputStreamFactory:operationGroup:container:)(sub_10001C6DC, v13, v15, v16);
  uint64_t v17 = (void *)swift_task_alloc(async function pointer to CloudKitExporter.start()[1]);
  v0[13] = v17;
  void *v17 = v0;
  v17[1] = sub_10001A134;
  return CloudKitExporter.start()();
}

uint64_t sub_10001A134()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 104LL);
  *(void *)(*(void *)v1 + 112LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_10001A34C;
  }
  else {
    uint64_t v3 = sub_10001A198;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_10001A198()
{
  uint64_t v1 = v0[11];
  uint64_t v2 = (os_unfair_lock_s *)(v1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 16));
  uint64_t v3 = *(void *)(v1 + 24);
  v0[15] = v3;
  swift_bridgeObjectRetain(v3);
  os_unfair_lock_unlock(v2);
  uint64_t v4 = swift_task_alloc(32LL);
  v0[16] = v4;
  *(void *)(v4 + 16) = v3;
  uint64_t v5 = (void *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  v0[17] = v5;
  void *v5 = v0;
  v5[1] = sub_10001A248;
  return withTaskGroup<A, B>(of:returning:isolation:body:)();
}

uint64_t sub_10001A248()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 128LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 120LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 136LL));
  swift_bridgeObjectRelease(v2);
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10001A2B0, 0LL, 0LL);
}

uint64_t sub_10001A2B0()
{
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v4 = *(void *)(v0 + 48);
  uint64_t v5 = *(void *)(v0 + 56);
  uint64_t v7 = *(void *)(v0 + 32);
  uint64_t v6 = *(void *)(v0 + 40);
  uint64_t v8 = *(void *)(v0 + 24);
  swift_release(*(void *)(v0 + 96));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v4);
  swift_release(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001A34C()
{
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v4 = *(void *)(v0 + 48);
  uint64_t v5 = *(void *)(v0 + 56);
  uint64_t v7 = *(void *)(v0 + 32);
  uint64_t v6 = *(void *)(v0 + 40);
  uint64_t v8 = *(void *)(v0 + 24);
  swift_release(*(void *)(v0 + 96));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v4);
  swift_release(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001A3E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_10000D228(&qword_10007EE68);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v26[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001C5D8(a1, (uint64_t)v10);
  uint64_t v11 = type metadata accessor for TaskPriority(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1LL, v11) == 1)
  {
    sub_10001B974((uint64_t)v10);
    uint64_t v13 = 12544LL;
    uint64_t v14 = *(void *)(a3 + 16);
    if (v14)
    {
LABEL_3:
      uint64_t v15 = *(void *)(a3 + 24);
      uint64_t ObjectType = swift_getObjectType(v14);
      swift_unknownObjectRetain(v14);
      uint64_t v17 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v15);
      uint64_t v19 = v18;
      swift_unknownObjectRelease(v14);
      goto LABEL_6;
    }
  }

  else
  {
    unsigned __int8 v20 = TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v11);
    uint64_t v13 = v20 | 0x3100LL;
    uint64_t v14 = *(void *)(a3 + 16);
    if (v14) {
      goto LABEL_3;
    }
  }

  uint64_t v17 = 0LL;
  uint64_t v19 = 0LL;
LABEL_6:
  uint64_t v21 = *v4;
  uint64_t v22 = (void *)(v19 | v17);
  if (v19 | v17)
  {
    v27[0] = 0LL;
    v27[1] = 0LL;
    uint64_t v22 = v27;
    v27[2] = v17;
    v27[3] = v19;
  }

  v26[0] = 1LL;
  v26[1] = v22;
  _OWORD v26[2] = v21;
  uint64_t v23 = swift_task_create(v13, v26, (char *)&type metadata for () + 8, a2, a3);
  return swift_release(v23);
}

uint64_t sub_10001A568()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10007F52C);
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000D3C0;
  return sub_10001A5B0();
}

uint64_t sub_10001A5B0()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for URL(0LL);
  v1[3] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[4] = v3;
  uint64_t v4 = *(void *)(v3 + 64);
  v1[5] = v4;
  unint64_t v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v1[6] = swift_task_alloc(v5);
  v1[7] = swift_task_alloc(v5);
  return swift_task_switch(sub_10001A624, 0LL, 0LL);
}

uint64_t sub_10001A624()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[7];
  uint64_t v4 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v6 = v0[2];
  uint64_t v5 = v0[3];
  uint64_t v7 = *(void **)(v6 + 8);
  uint64_t v8 = v6 + *(int *)(type metadata accessor for DiagnosticFileCollector(0LL) + 24);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v9(v2, v8, v5);
  v9(v1, v2, v5);
  uint64_t v10 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v11 = (v10 + 24) & ~v10;
  uint64_t v12 = swift_allocObject(&unk_100076368, v11 + v3, v10 | 7);
  v0[8] = v12;
  *(void *)(v12 + 16) = v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v12 + v11, v1, v5);
  uint64_t v13 = async function pointer to NSPersistentStoreCoordinator.perform<A>(_:)[1];
  v7;
  uint64_t v14 = (void *)swift_task_alloc(v13);
  v0[9] = v14;
  *uint64_t v14 = v0;
  v14[1] = sub_10001A72C;
  return NSPersistentStoreCoordinator.perform<A>(_:)();
}

uint64_t sub_10001A72C()
{
  uint64_t v3 = *(void *)(*(void *)v1 + 64LL);
  uint64_t v2 = *(void *)(*(void *)v1 + 72LL);
  *(void *)(*(void *)v1 + 80LL) = v0;
  swift_task_dealloc(v2);
  swift_release(v3);
  if (v0) {
    uint64_t v4 = sub_10001A7E8;
  }
  else {
    uint64_t v4 = sub_10001A798;
  }
  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_10001A798()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 56);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 32) + 8LL))(v2, *(void *)(v0 + 24));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001A7E8()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 56);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 32) + 8LL))(v2, *(void *)(v0 + 24));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001A838(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  if (a1)
  {
    uint64_t ObjectType = swift_getObjectType(a1);
    uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, a2);
    uint64_t v8 = v7;
  }

  else
  {
    uint64_t v6 = 0LL;
    uint64_t v8 = 0LL;
  }

  v3[5] = v6;
  v3[6] = v8;
  return swift_task_switch(sub_10001A8AC, v6, v8);
}

uint64_t sub_10001A8AC()
{
  uint64_t v1 = **(void **)(v0 + 32);
  uint64_t v2 = sub_10000D228((uint64_t *)&unk_10007EC20);
  *(void *)(v0 + sub_1000154A8(*(void *)(v0 + 152) + OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_database, v0 + 56) = v2;
  if ((ThrowingTaskGroup.isEmpty.getter( v1,  (char *)&type metadata for () + 8,  v2,  &protocol self-conformance witness table for Error) & 1) != 0) {
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  *(void *)(v0 + 64) = 0LL;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to ThrowingTaskGroup.next(isolation:)[1]);
  *(void *)(v0 + 72) = v4;
  uint64_t v5 = sub_10000D228(&qword_10007F520);
  *uint64_t v4 = v0;
  v4[1] = sub_10001A97C;
  return ThrowingTaskGroup.next(isolation:)(v0 + 88, *(void *)(v0 + 16), *(void *)(v0 + 24), v5);
}

uint64_t sub_10001A97C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 72);
  *(void *)(*v1 + 80) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 40);
    uint64_t v5 = *(void *)(v2 + 48);
    uint64_t v6 = sub_10001AAB4;
  }

  else
  {
    *(_BYTE *)(v2 + 89) = *(_BYTE *)(v2 + 88);
    uint64_t v4 = *(void *)(v2 + 40);
    uint64_t v5 = *(void *)(v2 + 48);
    uint64_t v6 = sub_10001A9E8;
  }

  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_10001A9E8()
{
  if ((*(_BYTE *)(v0 + 89) & 1) == 0) {
    goto LABEL_7;
  }
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = ThrowingTaskGroup.isEmpty.getter( **(void **)(v0 + 32),  (char *)&type metadata for () + 8,  *(void *)(v0 + 56),  &protocol self-conformance witness table for Error);
  if ((v2 & 1) == 0)
  {
    *(void *)(v0 + 64) = v1;
LABEL_7:
    uint64_t v4 = (void *)swift_task_alloc(async function pointer to ThrowingTaskGroup.next(isolation:)[1]);
    *(void *)(v0 + 72) = v4;
    uint64_t v5 = sub_10000D228(&qword_10007F520);
    *uint64_t v4 = v0;
    v4[1] = sub_10001A97C;
    return ThrowingTaskGroup.next(isolation:)(v0 + 88, *(void *)(v0 + 16), *(void *)(v0 + 24), v5);
  }

  if (v1) {
    swift_willThrow(v2);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001AAB4()
{
  uint64_t v1 = *(void *)(v0 + 80);
  if (*(void *)(v0 + 64))
  {
    swift_errorRelease(*(void *)(v0 + 80));
    uint64_t v1 = *(void *)(v0 + 64);
  }

  uint64_t v2 = ThrowingTaskGroup.isEmpty.getter( **(void **)(v0 + 32),  (char *)&type metadata for () + 8,  *(void *)(v0 + 56),  &protocol self-conformance witness table for Error);
  if ((v2 & 1) != 0)
  {
    if (v1) {
      swift_willThrow(v2);
    }
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    *(void *)(v0 + 64) = v1;
    uint64_t v4 = (void *)swift_task_alloc(async function pointer to ThrowingTaskGroup.next(isolation:)[1]);
    *(void *)(v0 + 72) = v4;
    uint64_t v5 = sub_10000D228(&qword_10007F520);
    *uint64_t v4 = v0;
    v4[1] = sub_10001A97C;
    return ThrowingTaskGroup.next(isolation:)(v0 + 88, *(void *)(v0 + 16), *(void *)(v0 + 24), v5);
  }

uint64_t sub_10001AB90@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v8 = type metadata accessor for URL(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = (os_unfair_lock_s *)(a3 + 16);
  id v12 = (id)CKDatabaseScopeString(a1);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  uint64_t v14 = v13;

  Swift::String v15 = String.lowercased()();
  swift_bridgeObjectRelease(v14);
  Swift::String v33 = v15;
  v16._countAndFlagsBits = 95LL;
  v16._object = (void *)0xE100000000000000LL;
  String.append(_:)(v16);
  id v17 = [a2 zoneID];
  id v18 = [v17 zoneName];

  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  uint64_t v21 = v20;

  v22._countAndFlagsBits = v19;
  v22._object = v21;
  String.append(_:)(v22);
  swift_bridgeObjectRelease(v21);
  v23._countAndFlagsBits = 0x6E6F736A2ELL;
  v23._object = (void *)0xE500000000000000LL;
  String.append(_:)(v23);
  object = v33._object;
  URL.appendingPathComponent(_:)(v33._countAndFlagsBits, v33._object);
  swift_bridgeObjectRelease(object);
  uint64_t v25 = type metadata accessor for AsyncFileOutputStream(0LL);
  swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
  uint64_t v26 = sub_1000428B4((uint64_t)v10);
  os_unfair_lock_lock((os_unfair_lock_t)(a3 + 16));
  uint64_t v27 = swift_retain(v26);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v27);
  uint64_t v28 = *(void *)(a3 + 24) & 0xFFFFFFFFFFFFFF8LL;
  unint64_t v30 = *(void *)(v28 + 0x10);
  unint64_t v29 = *(void *)(v28 + 24);
  if (v30 >= v29 >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1LL);
  }
  uint64_t v31 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v30, v26);
  specialized Array._endMutation()(v31);
  os_unfair_lock_unlock(v11);
  a4[3] = v25;
  uint64_t result = sub_10000D1E8(&qword_10007F588, type metadata accessor for AsyncFileOutputStream, (uint64_t)&unk_100061B80);
  a4[4] = result;
  *a4 = v26;
  return result;
}

uint64_t sub_10001ADB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v3[9] = a2;
  v3[10] = a3;
  unint64_t v4 = (*(void *)(*(void *)(sub_10000D228(&qword_10007EE68) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[11] = swift_task_alloc(v4);
  v3[12] = swift_task_alloc(v4);
  return swift_task_switch(sub_10001AE20, 0LL, 0LL);
}

uint64_t sub_10001AE20()
{
  uint64_t v1 = *(void *)(v0 + 80);
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0) {
      uint64_t v27 = *(void *)(v0 + 80);
    }
    else {
      uint64_t v27 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*(void *)(v0 + 80));
    uint64_t result = _CocoaArrayWrapper.endIndex.getter(v27);
    uint64_t v2 = result;
    if (result) {
      goto LABEL_3;
    }
LABEL_20:
    swift_bridgeObjectRelease(*(void *)(v0 + 80));
    uint64_t v28 = (void *)swift_task_alloc(async function pointer to TaskGroup.awaitAllRemainingTasks(isolation:)[1]);
    *(void *)(v0 + 104) = v28;
    uint64_t v29 = sub_10000D228(&qword_10007F578);
    *uint64_t v28 = v0;
    v28[1] = sub_10001B100;
    return TaskGroup.awaitAllRemainingTasks(isolation:)(0LL, 0LL, v29);
  }

  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  uint64_t result = swift_bridgeObjectRetain(*(void *)(v0 + 80));
  if (!v2) {
    goto LABEL_20;
  }
LABEL_3:
  if (v2 >= 1)
  {
    uint64_t v4 = 0LL;
    unint64_t v31 = v1 & 0xC000000000000001LL;
    uint64_t v30 = *(void *)(v0 + 80) + 32LL;
    uint64_t v32 = v2;
    while (1)
    {
      if (v31)
      {
        uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(v4, *(void *)(v0 + 80));
      }

      else
      {
        uint64_t v7 = *(void *)(v30 + 8 * v4);
        swift_retain(v7);
      }

      uint64_t v9 = *(void *)(v0 + 88);
      uint64_t v8 = *(void *)(v0 + 96);
      uint64_t v10 = type metadata accessor for TaskPriority(0LL);
      uint64_t v11 = *(void *)(v10 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(v8, 1LL, 1LL, v10);
      id v12 = (void *)swift_allocObject(&unk_1000763E0, 40LL, 7LL);
      v12[2] = 0LL;
      uint64_t v13 = v12 + 2;
      v12[3] = 0LL;
      v12[4] = v7;
      sub_10001C5D8(v8, v9);
      LODWORD(v9) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1LL, v10);
      uint64_t v14 = swift_retain(v7);
      uint64_t v15 = *(void *)(v0 + 88);
      if ((_DWORD)v9 == 1)
      {
        sub_10001B974(*(void *)(v0 + 88));
        uint64_t v16 = 0LL;
        uint64_t v17 = *v13;
        if (!*v13) {
          goto LABEL_13;
        }
      }

      else
      {
        unsigned __int8 v23 = TaskPriority.rawValue.getter(v14);
        (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v15, v10);
        uint64_t v16 = v23;
        uint64_t v17 = *v13;
        if (!*v13)
        {
LABEL_13:
          uint64_t v20 = 0LL;
          uint64_t v22 = 0LL;
          goto LABEL_14;
        }
      }

      uint64_t v18 = v12[3];
      uint64_t ObjectType = swift_getObjectType(v17);
      swift_unknownObjectRetain(v17);
      uint64_t v20 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v18);
      uint64_t v22 = v21;
      swift_unknownObjectRelease(v17);
LABEL_14:
      uint64_t v24 = **(void **)(v0 + 72);
      uint64_t v25 = swift_allocObject(&unk_100076408, 32LL, 7LL);
      *(void *)(v25 + 16) = &unk_10007F568;
      *(void *)(v25 + 24) = v12;
      uint64_t v26 = v22 | v20;
      if (v22 | v20)
      {
        *(void *)(v0 + 16) = 0LL;
        *(void *)(v0 + 24) = 0LL;
        uint64_t v26 = v0 + 16;
        *(void *)(v0 + 32) = v20;
        *(void *)(v0 + 40) = v22;
      }

      ++v4;
      uint64_t v5 = *(void *)(v0 + 96);
      *(void *)(v0 + 48) = 1LL;
      *(void *)(v0 + sub_1000154A8(*(void *)(v0 + 152) + OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_database, v0 + 56) = v26;
      *(void *)(v0 + 64) = v24;
      uint64_t v6 = swift_task_create(v16 | 0x3100, v0 + 48, (char *)&type metadata for () + 8, &unk_10007F570, v25);
      swift_release(v7);
      swift_release(v6);
      sub_10001B974(v5);
      if (v32 == v4) {
        goto LABEL_20;
      }
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_10001B100()
{
  uint64_t v1 = *(void *)(*v0 + 96);
  uint64_t v2 = *(void *)(*v0 + 88);
  uint64_t v4 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 104));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_10001B15C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return swift_task_switch(sub_10001B174, 0LL, 0LL);
}

uint64_t sub_10001B174()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to Task<>.value.getter[1]);
  *(void *)(v0 + 24) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10001B1F8;
  return Task<>.value.getter();
}

uint64_t sub_10001B1F8()
{
  return swift_task_switch(sub_10001B24C, 0LL, 0LL);
}

uint64_t sub_10001B24C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001B254(void *a1, uint64_t a2)
{
  uint64_t v70 = a2;
  uint64_t v3 = type metadata accessor for NSPersistentStore.StoreType(0LL);
  uint64_t v76 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v75 = &v65[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v72 = *(void *)(v5 - 8);
  uint64_t v73 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = &v65[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = sub_10000D228(&qword_10007EEB8);
  __chkstk_darwin(v8);
  uint64_t v10 = &v65[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v11 = type metadata accessor for URL(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  char v71 = &v65[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = &v65[-v16];
  uint64_t v18 = __chkstk_darwin(v15);
  Class v77 = &v65[-v19];
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v22 = &v65[-v21];
  __chkstk_darwin(v20);
  uint64_t v78 = &v65[-v23];
  uint64_t v74 = a1;
  id v24 = [a1 persistentStores];
  unint64_t v25 = sub_10001BBA4();
  uint64_t v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v24, v25);

  if (!((unint64_t)v26 >> 62))
  {
    if (*(void *)((v26 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
      goto LABEL_3;
    }
LABEL_16:
    swift_bridgeObjectRelease(v26);
    __break(1u);
    goto LABEL_17;
  }

  if (v26 < 0) {
    uint64_t v63 = v26;
  }
  else {
    uint64_t v63 = v26 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v26);
  uint64_t v64 = _CocoaArrayWrapper.endIndex.getter(v63);
  swift_bridgeObjectRelease(v26);
  if (!v64) {
    goto LABEL_16;
  }
LABEL_3:
  if ((v26 & 0xC000000000000001LL) != 0)
  {
LABEL_17:
    id v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v26);
    goto LABEL_6;
  }

  if (!*(void *)((v26 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    __break(1u);
    goto LABEL_19;
  }

  id v27 = *(id *)(v26 + 32);
LABEL_6:
  uint64_t v28 = v27;
  swift_bridgeObjectRelease(v26);
  id v29 = [v28 URL];

  if (!v29)
  {
LABEL_19:
    uint64_t result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1LL, 1LL, v11);
    goto LABEL_20;
  }

  static URL._unconditionallyBridgeFromObjectiveC(_:)(v29);

  uint64_t v30 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v12 + 32);
  v30(v10, v22, v11);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v12 + 56))(v10, 0LL, 1LL, v11);
  uint64_t result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v12 + 48))(v10, 1LL, v11);
  uint64_t v32 = v78;
  if ((_DWORD)result == 1)
  {
LABEL_20:
    __break(1u);
    return result;
  }

  uint64_t v33 = ((uint64_t (*)(_BYTE *, _BYTE *, uint64_t))v30)(v78, v10, v11);
  uint64_t v34 = URL.lastPathComponent.getter(v33);
  uint64_t v36 = v35;
  id v37 = v77;
  URL.appendingPathComponent(_:)(v34, v35);
  swift_bridgeObjectRelease(v36);
  uint64_t v38 = type metadata accessor for DiagnosticFileCollector(0LL);
  sub_10000D1E8(&qword_10007F4E0, type metadata accessor for DiagnosticFileCollector, (uint64_t)&unk_100061210);
  static LoggedObject.logger.getter(v38);
  uint64_t v39 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v12 + 16);
  v39(v17, v32, v11);
  os_log_type_t v40 = v71;
  uint64_t v41 = ((uint64_t (*)(_BYTE *, _BYTE *, uint64_t))v39)(v71, v37, v11);
  uint64_t v42 = (os_log_s *)Logger.logObject.getter(v41);
  os_log_type_t v43 = static os_log_type_t.info.getter();
  int v44 = v43;
  if (os_log_type_enabled(v42, v43))
  {
    uint64_t v45 = swift_slowAlloc(22LL, -1LL);
    uint64_t v70 = v3;
    uint64_t v46 = v45;
    uint64_t v69 = swift_slowAlloc(64LL, -1LL);
    uint64_t v81 = v69;
    *(_DWORD *)uint64_t v46 = 136315394;
    uint64_t v47 = sub_10000D1E8( &qword_10007EEC8,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    os_log_t v67 = v42;
    uint64_t v48 = v47;
    int v66 = v44;
    uint64_t v49 = dispatch thunk of CustomStringConvertible.description.getter(v11, v47);
    unint64_t v51 = v50;
    uint64_t v79 = sub_100046274(v49, v50, &v81);
    id v68 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v46 + 4);
    swift_bridgeObjectRelease(v51);
    uint64_t v52 = *(void (**)(_BYTE *, uint64_t))(v12 + 8);
    v52(v17, v11);
    *(_WORD *)(v46 + 12) = 2080;
    uint64_t v53 = dispatch thunk of CustomStringConvertible.description.getter(v11, v48);
    unint64_t v55 = v54;
    uint64_t v79 = sub_100046274(v53, v54, &v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v46 + 14);
    swift_bridgeObjectRelease(v55);
    v52(v40, v11);
    os_log_t v56 = v67;
    _os_log_impl((void *)&_mh_execute_header, v67, (os_log_type_t)v66, "Copying '%s' to '%s'", (uint8_t *)v46, 0x16u);
    uint64_t v57 = v69;
    swift_arrayDestroy(v69, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v57, -1LL, -1LL);
    uint64_t v58 = v46;
    uint64_t v3 = v70;
    swift_slowDealloc(v58, -1LL, -1LL);

    uint64_t v59 = (*(uint64_t (**)(_BYTE *, uint64_t))(v72 + 8))(v68, v73);
  }

  else
  {
    uint64_t v52 = *(void (**)(_BYTE *, uint64_t))(v12 + 8);
    v52(v17, v11);
    v52(v40, v11);

    uint64_t v59 = (*(uint64_t (**)(_BYTE *, uint64_t))(v72 + 8))(v7, v73);
  }

  uint64_t v60 = v75;
  static NSPersistentStore.StoreType.sqlite.getter(v59);
  uint64_t v61 = v77;
  uint64_t v62 = v78;
  NSPersistentStoreCoordinator.replacePersistentStore(at:destinationOptions:withPersistentStoreFrom:sourceOptions:type:)( v77,  0LL,  v78,  0LL,  v60);
  (*(void (**)(_BYTE *, uint64_t))(v76 + 8))(v60, v3);
  v52(v61, v11);
  return ((uint64_t (*)(_BYTE *, uint64_t))v52)(v62, v11);
}

uint64_t sub_10001B844(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = (void *)swift_task_alloc(dword_10007F4EC);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_10000D3C0;
  return sub_100019C6C(a1, a2, v6);
}

uint64_t sub_10001B8AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DiagnosticFileCollector(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001B8F4()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10007F4FC);
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10001D0F0;
  uint64_t v2 = (void *)swift_task_alloc(dword_10007F53C);
  v1[2] = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_10001D0F0;
  return sub_100019F20();
}

uint64_t sub_10001B974(uint64_t a1)
{
  uint64_t v2 = sub_10000D228(&qword_10007EE68);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10001B9B8()
{
  uint64_t v1 = (int *)type metadata accessor for DiagnosticFileCollector(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  uint64_t v7 = v0 + v4;

  uint64_t v8 = v0 + v4 + v1[6];
  uint64_t v9 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);

  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10001BA64()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10007F50C);
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10001D0F0;
  uint64_t v2 = (void *)swift_task_alloc(dword_10007F52C);
  v1[2] = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_10000D3C0;
  return sub_10001A5B0();
}

uint64_t sub_10001BAE4()
{
  uint64_t v1 = type metadata accessor for URL(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10001BB58()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(type metadata accessor for URL(0LL) - 8) + 80LL);
  return sub_10001B254(*(void **)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

unint64_t sub_10001BBA4()
{
  unint64_t result = qword_10007F530;
  if (!qword_10007F530)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSPersistentStore);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, &qword_10007F530);
  }

  return result;
}

uint64_t sub_10001BBE0(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_10001BC44;
  return v6(a1);
}

uint64_t sub_10001BC44()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10001BC90( uint64_t a1, char a2, uint64_t (*a3)(void *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  v57[3] = a4;
  if (a1 < 0) {
    goto LABEL_44;
  }
  uint64_t v10 = swift_allocObject(&unk_100076430, 24LL, 7LL);
  *(void *)(v10 + 16) = _swiftEmptyArrayStorage;
  uint64_t v54 = swift_allocObject(&unk_100076458, 24LL, 7LL);
  *(void *)(v54 + 16) = 15LL;
  uint64_t v11 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000LL) != 0 ? (uint64_t v12 = HIBYTE(a6) & 0xF) : (uint64_t v12 = a5 & 0xFFFFFFFFFFFFLL), !v12))
  {
    if ((a6 & 0x2000000000000000LL) == 0) {
      uint64_t v11 = a5 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v33 = 7LL;
    if (((a6 >> 60) & ((a5 & 0x800000000000000LL) == 0)) != 0) {
      uint64_t v33 = 11LL;
    }
    sub_10001C12C(v33 | (v11 << 16), v54, a2 & 1, v10);
    swift_bridgeObjectRelease(a6);
    uint64_t v14 = *(void **)(v10 + 16);
    swift_bridgeObjectRetain(v14);
    swift_release(v10);
    uint64_t v34 = v54;
LABEL_41:
    swift_release(v34);
    return (uint64_t)v14;
  }

  uint64_t v49 = a1;
  uint64_t v50 = v10;
  uint64_t v13 = 7LL;
  if (((a6 >> 60) & ((a5 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v13 = 11LL;
  }
  uint64_t v48 = v13 | (v12 << 16);
  unint64_t v55 = 4 * v12;
  uint64_t v14 = _swiftEmptyArrayStorage;
  unint64_t v15 = 15LL;
  unint64_t v16 = 15LL;
  unint64_t v17 = 15LL;
  while (1)
  {
    uint64_t v18 = String.subscript.getter(v15, a5, a6);
    uint64_t v20 = v19;
    v57[0] = v18;
    v57[1] = v19;
    char v21 = a3(v57);
    if (v6)
    {
      swift_release(v50);
      swift_release(v54);
      swift_bridgeObjectRelease(v20);
      swift_bridgeObjectRelease(a6);
      return (uint64_t)v14;
    }

    char v22 = v21;
    swift_bridgeObjectRelease(v20);
    if ((v22 & 1) != 0) {
      break;
    }
    unint64_t v15 = String.index(after:)(v15, a5, a6);
LABEL_11:
    if (v55 == v15 >> 14) {
      goto LABEL_31;
    }
  }

  if (v16 >> 14 == v15 >> 14 && (a2 & 1) != 0)
  {
    unint64_t v15 = String.index(after:)(v15, a5, a6);
    *(void *)(v54 + 16) = v15;
    unint64_t v16 = v15;
    unint64_t v17 = v15;
    goto LABEL_11;
  }

  if (v15 >> 14 < v16 >> 14) {
    goto LABEL_43;
  }
  uint64_t v23 = String.subscript.getter(v16, v15, a5, a6);
  uint64_t v51 = v24;
  uint64_t v52 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0) {
    uint64_t v14 = sub_10001C298(0LL, v14[2] + 1LL, 1, v14);
  }
  unint64_t v30 = v14[2];
  unint64_t v29 = v14[3];
  if (v30 >= v29 >> 1) {
    uint64_t v14 = sub_10001C298((void *)(v29 > 1), v30 + 1, 1, v14);
  }
  v14[2] = v30 + 1;
  unint64_t v31 = &v14[4 * v30];
  v31[4] = v52;
  v31[5] = v26;
  v31[6] = v28;
  v31[7] = v51;
  *(void *)(v50 + 16) = v14;
  uint64_t v32 = String.index(after:)(v15, a5, a6);
  unint64_t v15 = v32;
  *(void *)(v54 + 16) = v32;
  if (v14[2] != v49)
  {
    unint64_t v16 = v32;
    unint64_t v17 = v32;
    goto LABEL_11;
  }

  unint64_t v17 = v32;
  unint64_t v16 = v32;
LABEL_31:
  if (v55 == v16 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease(a6);
    uint64_t v35 = v50;
LABEL_40:
    swift_bridgeObjectRetain(v14);
    swift_release(v35);
    uint64_t v34 = v54;
    goto LABEL_41;
  }

  if (v55 >= v17 >> 14)
  {
    uint64_t v36 = String.subscript.getter(v17, v48, a5, a6);
    uint64_t v38 = v37;
    uint64_t v40 = v39;
    uint64_t v42 = v41;
    swift_bridgeObjectRelease(a6);
    if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0) {
      uint64_t v14 = sub_10001C298(0LL, v14[2] + 1LL, 1, v14);
    }
    unint64_t v44 = v14[2];
    unint64_t v43 = v14[3];
    if (v44 >= v43 >> 1) {
      uint64_t v14 = sub_10001C298((void *)(v43 > 1), v44 + 1, 1, v14);
    }
    v14[2] = v44 + 1;
    uint64_t v45 = &v14[4 * v44];
    v45[4] = v36;
    v45[5] = v38;
    v45[6] = v40;
    v45[7] = v42;
    uint64_t v35 = v50;
    *(void *)(v50 + 16) = v14;
    goto LABEL_40;
  }

LABEL_43:
  _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Range requires lowerBound <= upperBound",  39LL,  2LL,  "Swift/Range.swift",  17LL,  2,  754LL,  0);
  __break(1u);
LABEL_44:
  LOBYTE(v47) = 2;
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Must take zero or more splits",  29LL,  2LL,  "Swift/Collection.swift",  22LL,  v47,  1552LL,  0);
  __break(1u);
  return result;
}

      uint64_t result = swift_release(v43);
      goto LABEL_44;
    }

    uint64_t v26 = v49;
    uint64_t v27 = v49[v25];
    ++v19;
    if (!v27)
    {
      uint64_t v19 = v25 + 1;
      if (v25 + 1 >= v48) {
        goto LABEL_36;
      }
      uint64_t v27 = v49[v19];
      if (!v27) {
        break;
      }
    }

uint64_t sub_10001C12C(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v4 = *(void *)(a2 + 16) >> 14;
  int v5 = (v4 == a1 >> 14) & a3;
  if (v5 == 1) {
    return v5 ^ 1u;
  }
  if (a1 >> 14 >= v4)
  {
    uint64_t v7 = String.subscript.getter();
    uint64_t v9 = v8;
    uint64_t v11 = v10;
    uint64_t v13 = v12;
    uint64_t v14 = *(void **)(a4 + 16);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v14);
    *(void *)(a4 + 16) = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v14 = sub_10001C298(0LL, v14[2] + 1LL, 1, v14);
      *(void *)(a4 + 16) = v14;
    }

    unint64_t v17 = v14[2];
    unint64_t v16 = v14[3];
    if (v17 >= v16 >> 1)
    {
      uint64_t v14 = sub_10001C298((void *)(v16 > 1), v17 + 1, 1, v14);
      *(void *)(a4 + 16) = v14;
    }

    v14[2] = v17 + 1;
    uint64_t v18 = &v14[4 * v17];
    v18[4] = v7;
    v18[5] = v9;
    v18[6] = v11;
    v18[7] = v13;
    return v5 ^ 1u;
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Range requires lowerBound <= upperBound",  39LL,  2LL,  "Swift/Range.swift",  17LL,  2,  754LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_10001C284(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10001C3B8( a1,  a2,  a3,  a4,  (uint64_t *)&unk_10007F8E0,  (uint64_t (*)(void))&type metadata accessor for UUID);
}

void *sub_10001C298(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_10000D228(&qword_10007F598);
      uint64_t v11 = (void *)swift_allocObject(v10, 32 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 1;
      }
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 5);
      uint64_t v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v8 + 4]) {
          memmove(v14, a4 + 4, 32 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_10001C9A8(0LL, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

uint64_t sub_10001C3A4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10001C3B8(a1, a2, a3, a4, &qword_10007F5A0, type metadata accessor for PendingEventData);
}

uint64_t sub_10001C3B8( char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if ((a3 & 1) != 0)
  {
    unint64_t v9 = *(void *)(a4 + 24);
    uint64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000LL < 0)
      {
        __break(1u);
LABEL_29:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division by zero",  16LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14377LL,  0);
LABEL_31:
        __break(1u);
        return result;
      }

      uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v10 = a2;
  }

  uint64_t v11 = *(void *)(a4 + 16);
  if (v10 <= v11) {
    uint64_t v12 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v13 = sub_10000D228(a5);
  uint64_t v14 = *(void *)(a6(0LL) - 8);
  uint64_t v15 = *(void *)(v14 + 72);
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = (v16 + 32) & ~v16;
  uint64_t v18 = (void *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  size_t v19 = j__malloc_size(v18);
  if (!v15) {
    goto LABEL_29;
  }
  if (v19 - v17 == 0x8000000000000000LL && v15 == -1)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division results in an overflow",  31LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14384LL,  0);
    goto LABEL_31;
  }

  void v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  uint64_t v21 = a6(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  unint64_t v23 = (*(unsigned __int8 *)(v22 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  unint64_t v24 = (unint64_t)v18 + v23;
  if ((a1 & 1) != 0)
  {
    unint64_t v25 = a4 + v23;
    if ((unint64_t)v18 < a4 || v24 >= v25 + *(void *)(v22 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v18 + v23, v25, v11, v21);
    }

    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v18 + v23);
    }

    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    sub_10001CA9C(0LL, v11, v24, a4, a6);
  }

  swift_bridgeObjectRelease(a4);
  return (uint64_t)v18;
}

uint64_t sub_10001C5C4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10001C3B8( a1,  a2,  a3,  a4,  &qword_10007F5A8,  (uint64_t (*)(void))&type metadata accessor for SomeEvent);
}

uint64_t sub_10001C5D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D228(&qword_10007EE68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001C620()
{
  uint64_t v1 = sub_10000D228(&qword_10007F540);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8LL))(v0 + 24, v1);
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10001C668()
{
  uint64_t v1 = type metadata accessor for URL(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(void *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_10001C6DC@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7 = type metadata accessor for URL(0LL);
  return sub_10001AB90( a1,  a2,  *(void *)(v3 + ((*(void *)(*(void *)(v7 - 8) + 64LL)
                       + ((*(unsigned __int8 *)(*(void *)(v7 - 8) + 80LL) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v7 - 8) + 80LL))
                       + 7) & 0xFFFFFFFFFFFFF8LL)),
           a3);
}

uint64_t sub_10001C744(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = (void *)swift_task_alloc(dword_10007F54C);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_10000D3C0;
  return sub_10001ADB4(a1, a2, v6);
}

uint64_t sub_10001C7AC()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10001C7D8()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc(dword_10007F55C);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10001D0F0;
  v3[2] = v2;
  return swift_task_switch(sub_10001B174, 0LL, 0LL);
}

uint64_t sub_10001C838()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10001C85C(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_10007F564);
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_10001D0F0;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_10007F560 + dword_10007F560))(a1, v4);
}

uint64_t sub_10001C8CC(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
  }
}

uint64_t sub_10001C920(void *a1)
{
  uint64_t v2 = *(void **)(v1 + 16);
  if (*a1 == *v2 && a1[1] == v2[1]) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
  }
}

uint64_t sub_10001C974()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10001C998()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10001C9A8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10001CA9C( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v5 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  uint64_t v9 = *(void *)(a5(0LL) - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = *(void *)(v9 + 72);
  unint64_t v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  uint64_t v13 = v11 * v5;
  unint64_t v14 = a3 + v13;
  unint64_t v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v14;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t *sub_10001CBB4(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v20 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v20);
  }

  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    uint64_t v7 = (void *)a2[1];
    a1[1] = (uint64_t)v7;
    uint64_t v8 = a3[6];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for URL(0LL);
    unint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
    id v13 = v7;
    v12(v9, v10, v11);
    uint64_t v14 = a3[7];
    uint64_t v15 = a3[8];
    uint64_t v16 = *(void **)((char *)a2 + v14);
    *(uint64_t *)((char *)v4 + v14) = (uint64_t)v16;
    uint64_t v17 = *(void **)((char *)a2 + v15);
    *(uint64_t *)((char *)v4 + v15) = (uint64_t)v17;
    id v18 = v16;
    id v19 = v17;
  }

  return v4;
}

void sub_10001CC80(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t sub_10001CCE8(uint64_t a1, uint64_t a2, int *a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  unint64_t v6 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = a3[6];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for URL(0LL);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL);
  id v12 = v6;
  v11(v8, v9, v10);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = *(void **)(a2 + v13);
  *(void *)(a1 + v13) = v15;
  uint64_t v16 = *(void **)(a2 + v14);
  *(void *)(a1 + v14) = v16;
  id v17 = v15;
  id v18 = v16;
  return a1;
}

uint64_t sub_10001CD88(uint64_t a1, uint64_t a2, int *a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  unint64_t v6 = *(void **)(a2 + 8);
  uint64_t v7 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v6;
  id v8 = v6;

  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 24LL))(v10, v11, v12);
  uint64_t v13 = a3[7];
  uint64_t v14 = *(void **)(a2 + v13);
  uint64_t v15 = *(void **)(a1 + v13);
  *(void *)(a1 + v13) = v14;
  id v16 = v14;

  uint64_t v17 = a3[8];
  id v18 = *(void **)(a2 + v17);
  id v19 = *(void **)(a1 + v17);
  *(void *)(a1 + v17) = v18;
  id v20 = v18;

  return a1;
}

uint64_t sub_10001CE38(uint64_t a1, uint64_t a2, int *a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  uint64_t v10 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + v10) = *(void *)(a2 + v10);
  return a1;
}

uint64_t sub_10001CEC0(uint64_t a1, uint64_t a2, int *a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v6 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);

  uint64_t v7 = a3[6];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40LL))(v8, v9, v10);
  uint64_t v11 = a3[7];
  uint64_t v12 = *(void **)(a1 + v11);
  *(void *)(a1 + v11) = *(void *)(a2 + v11);

  uint64_t v13 = a3[8];
  uint64_t v14 = *(void **)(a1 + v13);
  *(void *)(a1 + v13) = *(void *)(a2 + v13);

  return a1;
}

uint64_t sub_10001CF64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001CF70);
}

uint64_t sub_10001CF70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for URL(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 24),  a2,  v8);
  }

uint64_t sub_10001CFEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001CFF8);
}

uint64_t sub_10001CFF8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for URL(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 24),  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_10001D06C(uint64_t a1)
{
  v4[0] = &unk_1000611F8;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    v4[2] = *(void *)(result - 8) + 64LL;
    v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
    swift_initStructMetadata(a1, 256LL, 5LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_10001D0F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D228(&qword_10007EE68);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
  uint64_t v8 = (void *)swift_allocObject(&unk_1000764C0, 48LL, 7LL);
  v8[2] = 0LL;
  v8[3] = 0LL;
  v8[4] = a1;
  v8[5] = a2;
  swift_retain(a1);
  swift_retain(a2);
  uint64_t v9 = sub_10005DBB4((uint64_t)v6, (uint64_t)&unk_10007F670, (uint64_t)v8);
  return swift_release(v9);
}

uint64_t sub_10001D1C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5[2] = a5;
  uint64_t v6 = type metadata accessor for Logger(0LL);
  v5[3] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[4] = v7;
  v5[5] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = (void *)swift_task_alloc(dword_10007EC14);
  void v5[6] = v8;
  *uint64_t v8 = v5;
  v8[1] = sub_10001D238;
  return sub_100004848();
}

uint64_t sub_10001D238()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 48LL));
  return swift_task_switch(sub_10001D290, v1, 0LL);
}

uint64_t sub_10001D290()
{
  return swift_task_switch(sub_10001D2CC, 0LL, 0LL);
}

void sub_10001D2CC()
{
  uint64_t v1 = static LoggedObject.logger.getter(&type metadata for Main);
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Exiting after handling SIGTERM", v4, 2u);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  uint64_t v6 = v0[4];
  uint64_t v5 = v0[5];
  uint64_t v7 = v0[3];

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  exit(0);
}

int main(int argc, const char **argv, const char **envp)
{
  uint64_t v3 = swift_task_create(2048LL, 0LL, (char *)&type metadata for () + 8, &unk_10007F650, 0LL);
  uint64_t MainExecutor = swift_task_getMainExecutor();
  uint64_t v6 = swift_job_run(v3, MainExecutor, v5);
  int result = swift_task_asyncMainDrainQueue(v6);
  __break(1u);
  return result;
}

uint64_t sub_10001D3EC()
{
  v0[2] = type metadata accessor for MainActor(0LL);
  v0[3] = static MainActor.shared.getter();
  uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10007F658 + dword_10007F658);
  uint64_t v1 = (void *)swift_task_alloc(unk_10007F65C);
  v0[4] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10001D45C;
  return v3();
}

uint64_t sub_10001D45C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 32LL));
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_10001D4CC, v2, v3);
}

void sub_10001D4CC()
{
}

uint64_t sub_10001D4F0( uint64_t a1, void *a2, void *a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  uint64_t v75 = a7;
  uint64_t v78 = a6;
  uint64_t v72 = a5;
  uint64_t v80 = a4;
  id v81 = a2;
  id v82 = a3;
  uint64_t v12 = (char **)*a10;
  uint64_t v79 = type metadata accessor for URL(0LL);
  uint64_t v74 = *(void *)(v79 - 8);
  uint64_t v13 = __chkstk_darwin(v79);
  char v71 = (char *)&v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v73 = (char *)&v71 - v15;
  uint64_t v16 = sub_10000D228(&qword_10007EEA0);
  uint64_t v76 = *(void *)(v16 - 8);
  uint64_t v77 = v16;
  __chkstk_darwin(v16);
  id v18 = (char *)&v71 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for Logger(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v71 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = sub_10000D228(&qword_10007F138);
  v93[3] = v23;
  v93[4] = swift_getOpaqueTypeConformance2();
  unint64_t v24 = sub_10000D27C(v93);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 32LL))(v24, a1, v23);
  v92[3] = sub_10001E798();
  v92[4] = &off_1000768E8;
  v92[0] = a8;
  swift_defaultActor_initialize(a10);
  *(void *)((char *)a10 + OBJC_IVAR____TtC11homeeventsd10MainDriver_server) = 0LL;
  *((_BYTE *)a10 + OBJC_IVAR____TtC11homeeventsd10MainDriver_isCoreDataSetUp) = 0;
  *((_BYTE *)a10 + OBJC_IVAR____TtC11homeeventsd10MainDriver_isCloudKitLoggedIn) = 1;
  *((_BYTE *)a10 + OBJC_IVAR____TtC11homeeventsd10MainDriver_didRecordProcessLaunchMetrics) = 0;
  *(void *)((char *)a10 + OBJC_IVAR____TtC11homeeventsd10MainDriver_accountChangedListener) = 0LL;
  uint64_t v25 = sub_10001E7D4(&qword_10007EE30, (uint64_t)&unk_100060428);
  uint64_t v26 = sub_10001E7D4(&qword_10007EE18, (uint64_t)&unk_100060458);
  uint64_t v83 = v12;
  uint64_t v27 = static LoggedObject<>.logger.getter(v12, v25, v26);
  uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
  os_log_type_t v29 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v28, v29))
  {
    unint64_t v30 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v30 = 0;
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Initialized", v30, 2u);
    swift_slowDealloc(v30, -1LL, -1LL);
  }

  uint64_t v31 = (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  uint64_t v91 = 0LL;
  __chkstk_darwin(v31);
  *(&v71 - 2) = (char *)&v91;
  uint64_t v32 = sub_10000D228((uint64_t *)&unk_10007EC20);
  Future.init(closure:)( sub_10001E814,  &v71 - 4,  (char *)&type metadata for () + 8,  v32,  &protocol self-conformance witness table for Error);
  (*(void (**)(uint64_t, char *, uint64_t))(v76 + 32))( (uint64_t)a10 + OBJC_IVAR____TtC11homeeventsd10MainDriver_completion,  v18,  v77);
  uint64_t v33 = v91;
  if (v91)
  {
    *(void *)((char *)a10 + OBJC_IVAR____TtC11homeeventsd10MainDriver_promise) = v91;
    swift_retain(v33);
    sub_100003A64();
    sub_10000D478((uint64_t)v93, (uint64_t)a10 + OBJC_IVAR____TtC11homeeventsd10MainDriver_features);
    uint64_t v34 = (char *)a10 + OBJC_IVAR____TtC11homeeventsd10MainDriver_accountStore;
    *((void *)v34 + 3) = &type metadata for MainDriver.AccountStore;
    *((void *)v34 + 4) = &off_1000759D0;
    id v35 = v81;
    id v36 = v82;
    *(void *)((char *)a10 + OBJC_IVAR____TtC11homeeventsd10MainDriver_notificationCenter) = v81;
    *(void *)((char *)a10 + OBJC_IVAR____TtC11homeeventsd10MainDriver_cloudKitContainer) = v36;
    uint64_t v37 = v74;
    uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t))(v74 + 16);
    uint64_t v40 = v79;
    uint64_t v39 = v80;
    v38((char *)a10 + OBJC_IVAR____TtC11homeeventsd10MainDriver_storageDirectory, (uint64_t)v80, v79);
    uint64_t v41 = (void *)((char *)a10 + OBJC_IVAR____TtC11homeeventsd10MainDriver_localDatabaseName);
    uint64_t v42 = v78;
    *uint64_t v41 = v72;
    v41[1] = v42;
    uint64_t v78 = (uint64_t)a10 + OBJC_IVAR____TtC11homeeventsd10MainDriver_scheduler;
    sub_10000D478((uint64_t)v92, (uint64_t)a10 + OBJC_IVAR____TtC11homeeventsd10MainDriver_scheduler);
    uint64_t v77 = OBJC_IVAR____TtC11homeeventsd10MainDriver_maxCloudKitRecordsPerOperation;
    *(void *)((char *)a10 + OBJC_IVAR____TtC11homeeventsd10MainDriver_maxCloudKitRecordsPerOperation) = a9;
    uint64_t v43 = v75;
    sub_10001E81C(v75, (uint64_t)&v86);
    unint64_t v44 = v73;
    v38(v73, (uint64_t)v39, v40);
    if (v87)
    {
      uint64_t v45 = v36;
      uint64_t v46 = *(void (**)(char *, uint64_t))(v37 + 8);
      id v47 = v35;
      id v48 = v45;
      v46(v44, v40);
      sub_100010044(&v86, (uint64_t)&v88);
    }

    else
    {
      id v49 = v35;
      id v50 = v36;
      uint64_t v51 = v44;
      uint64_t v52 = v71;
      URL.appendingPathComponent(_:)(0x7465736572LL, 0xE500000000000000LL);
      uint64_t v46 = *(void (**)(char *, uint64_t))(v37 + 8);
      v46(v51, v40);
      uint64_t v89 = type metadata accessor for FileBackedBooleanFlag(0LL);
      int v90 = &off_100076798;
      uint64_t v53 = sub_10000D27C(&v88);
      (*(void (**)(void *, char *, uint64_t))(v37 + 32))(v53, v52, v40);
      sub_10001E864((uint64_t)&v86);
    }

    sub_100010044(&v88, (uint64_t)a10 + OBJC_IVAR____TtC11homeeventsd10MainDriver_resetFlag);
    uint64_t v54 = sub_100003C70();
    id v55 = objc_allocWithZone(&OBJC_CLASS___NSPersistentContainer);
    os_log_t v56 = v54;
    NSString v57 = String._bridgeToObjectiveC()();
    id v58 = [v55 initWithName:v57 managedObjectModel:v56];

    sub_10000D478((uint64_t)v93, (uint64_t)v85);
    sub_10001E8A4(v78, (uint64_t)v84);
    uint64_t v59 = *(void *)((char *)a10 + v77);
    uint64_t v60 = type metadata accessor for EventUploadTask();
    uint64_t v61 = swift_allocObject(v60, 248LL, 15LL);
    uint64_t v62 = sub_10001001C((uint64_t)v85, v85[3]);
    uint64_t v83 = &v71;
    __chkstk_darwin(v62);
    uint64_t v64 = v43;
    uint64_t v65 = (char *)&v71 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    (*(void (**)(char *))(v66 + 16))(v65);
    id v67 = v58;
    uint64_t v68 = sub_10001DBC8((uint64_t)v65, (uint64_t)v84, (uint64_t)v67, v59, v61);
    _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v85);

    _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v92);
    sub_10001E864(v64);
    v46(v80, v79);
    _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v93);
    uint64_t v69 = (void *)((char *)a10 + OBJC_IVAR____TtC11homeeventsd10MainDriver_localStorageProperties);
    *uint64_t v69 = v67;
    v69[1] = v68;
    swift_release(v91);
    return (uint64_t)a10;
  }

  else
  {
    uint64_t result = swift_bridgeObjectRelease(v78);
    __break(1u);
  }

  return result;
}

uint64_t sub_10001DBC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = sub_10000D228(&qword_10007F138);
  uint64_t v15 = v10;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v11 = sub_10000D27C(&v14);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32LL))(v11, a1, v10);
  swift_defaultActor_initialize(a5);
  *(void *)(a5 + 208) = 0LL;
  *(_BYTE *)(a5 + 216) = 0;
  *(void *)(a5 + 224) = 0x4000000000000000LL;
  swift_weakInit(a5 + 232, 0LL);
  *(void *)(a5 + 240) = 0LL;
  sub_100010044(&v14, a5 + 112);
  __int128 v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a5 + 152) = *(_OWORD *)a2;
  *(_OWORD *)(a5 + 168) = v12;
  *(void *)(a5 + 184) = *(void *)(a2 + 32);
  *(void *)(a5 + 192) = a3;
  *(void *)(a5 + 200) = a4;
  return a5;
}

uint64_t sub_10001DCA0()
{
  uint64_t v1 = sub_10000D228(&qword_10007EEA0);
  v0[3] = v1;
  uint64_t v2 = *(void *)(v1 - 8);
  v0[4] = v2;
  v0[5] = swift_task_alloc((*(void *)(v2 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for URL(0LL);
  v0[6] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_10000D228(&qword_10007F138);
  v0[7] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v0[8] = v5;
  unint64_t v6 = (*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v0[9] = swift_task_alloc(v6);
  v0[10] = swift_task_alloc(v6);
  uint64_t v7 = type metadata accessor for Logger(0LL);
  v0[11] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v0[12] = v8;
  unint64_t v9 = (*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v0[13] = swift_task_alloc(v9);
  v0[14] = swift_task_alloc(v9);
  v0[15] = swift_task_alloc(v9);
  v0[16] = swift_task_alloc(v9);
  uint64_t v10 = type metadata accessor for MainActor(0LL);
  v0[17] = v10;
  v0[18] = static MainActor.shared.getter();
  uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter(v10, &protocol witness table for MainActor);
  v0[19] = v11;
  v0[20] = v12;
  return swift_task_switch(sub_10001DDE4, v11, v12);
}

uint64_t sub_10001DDE4()
{
  v0[21] = sub_10001E674();
  uint64_t v1 = static LoggedObject.logger.getter(&type metadata for Main);
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Starting", v4, 2u);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  uint64_t v5 = v0[16];
  uint64_t v6 = v0[11];
  uint64_t v7 = v0[12];

  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v0[22] = v8;
  v8(v5, v6);
  id v9 = [(id)objc_opt_self(NSBundle) mainBundle];
  id v10 = [v9 bundleIdentifier];

  if (v10)
  {
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    uint64_t v13 = v12;

    uint64_t v14 = String.utf8CString.getter(v11, v13);
    swift_bridgeObjectRelease(v13);
    LOBYTE(v11) = _set_user_dir_suffix(v14 + 32);
    swift_release(v14);
    if ((v11 & 1) == 0)
    {
      uint64_t v15 = static LoggedObject.logger.getter(&type metadata for Main);
      uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
      os_log_type_t v17 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v16, v17))
      {
        id v18 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)id v18 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Unable to set user dir suffix", v18, 2u);
        swift_slowDealloc(v18, -1LL, -1LL);
      }

      uint64_t v19 = v0[15];
      uint64_t v20 = v0[11];

      v8(v19, v20);
    }
  }

  uint64_t v22 = v0[9];
  uint64_t v21 = v0[10];
  uint64_t v23 = v0[8];
  uint64_t v41 = v0[7];
  uint64_t v24 = v0[6];
  uint64_t v38 = (char *)v24;
  type metadata accessor for Configuration(0LL);
  static Configuration.defaultFeatureDataSource.getter();
  uint64_t v43 = 0LL;
  memset(v42, 0, sizeof(v42));
  id v40 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
  uint64_t v39 = (void *)static Configuration.cloudKitContainer.getter(v40);
  uint64_t v25 = type metadata accessor for MainDriver(0LL);
  uint64_t v26 = sub_1000037E0(v24);
  uint64_t v27 = static Configuration.persistentStoreName.getter(v26);
  uint64_t v29 = v28;
  id v30 = [(id)objc_opt_self(BGSystemTaskScheduler) sharedScheduler];
  uint64_t v31 = static Constants.maxCloudKitRecordsPerOperation.getter();
  uint64_t v32 = (void *)swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v22, v21, v41);
  uint64_t v33 = sub_10001D4F0(v22, v40, v39, v38, v27, v29, (uint64_t)v42, (uint64_t)v30, v31, v32);
  v0[23] = v33;
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v21, v41);
  uint64_t v34 = type metadata accessor for SignalHandler();
  uint64_t v35 = swift_allocObject(v34, 120LL, 15LL);
  v0[24] = v35;
  swift_defaultActor_initialize(v35);
  *(void *)(v35 + 112) = &_swiftEmptyDictionarySingleton;
  uint64_t v36 = swift_allocObject(&unk_100076498, 32LL, 7LL);
  v0[25] = v36;
  *(void *)(v36 + 16) = v33;
  *(void *)(v36 + 24) = v35;
  swift_retain(v33);
  swift_retain(v35);
  return swift_task_switch(sub_10001E190, v35, 0LL);
}

uint64_t sub_10001E190()
{
  uint64_t v1 = v0[25];
  sub_1000127C0(15LL, (uint64_t)sub_10001E6E4, v1);
  swift_release(v1);
  uint64_t v2 = (uint64_t **)swift_task_alloc(dword_10007EC0C);
  v0[26] = (uint64_t)v2;
  *uint64_t v2 = v0;
  v2[1] = (uint64_t *)sub_10001E200;
  return sub_1000041AC(v0[5]);
}

uint64_t sub_10001E200()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 208));
  os_log_type_t v3 = (void *)swift_task_alloc(async function pointer to Future.result.getter[1]);
  *(void *)(v1 + 216) = v3;
  *os_log_type_t v3 = v2;
  v3[1] = sub_10001E26C;
  return Future.result.getter();
}

uint64_t sub_10001E26C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 216);
  uint64_t v5 = *(void *)(*v1 + 32);
  uint64_t v4 = *(void *)(*v1 + 40);
  uint64_t v6 = *(void *)(*v1 + 24);
  *(void *)(*v1 + 224) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0) {
    uint64_t v7 = sub_10001E4A4;
  }
  else {
    uint64_t v7 = sub_10001E2F4;
  }
  return swift_task_switch(v7, *(void *)(v2 + 152), *(void *)(v2 + 160));
}

uint64_t sub_10001E2F4()
{
  return swift_task_switch(sub_10001E308, *(void *)(v0 + 192), 0LL);
}

uint64_t sub_10001E308()
{
  return swift_task_switch(sub_10001E340, *(void *)(v0 + 152), *(void *)(v0 + 160));
}

uint64_t sub_10001E340()
{
  uint64_t v1 = static LoggedObject.logger.getter(&type metadata for Main);
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v6 = *(void *)(v0 + 184);
  uint64_t v5 = *(void *)(v0 + 192);
  if (v4)
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Exiting", v7, 2u);
    swift_slowDealloc(v7, -1LL, -1LL);

    swift_release(v5);
    swift_release(v6);
  }

  else
  {
    swift_release(*(void *)(v0 + 184));
    swift_release(v5);
  }

  uint64_t v8 = *(void *)(v0 + 120);
  uint64_t v9 = *(void *)(v0 + 128);
  uint64_t v11 = *(void *)(v0 + 104);
  uint64_t v10 = *(void *)(v0 + 112);
  uint64_t v12 = *(void *)(v0 + 80);
  uint64_t v13 = *(void *)(v0 + 72);
  uint64_t v15 = *(void *)(v0 + 40);
  uint64_t v14 = *(void *)(v0 + 48);
  (*(void (**)(uint64_t, void))(v0 + 176))(v10, *(void *)(v0 + 88));
  swift_task_dealloc(v9);
  swift_task_dealloc(v8);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10001E4A4()
{
  uint64_t v1 = *(void *)(v0 + 224);
  static LoggedObject.logger.getter(&type metadata for Main);
  uint64_t v2 = swift_errorRetain(v1);
  os_log_type_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void *)(v0 + 136);
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v6 = 138412290;
    uint64_t v8 = static MainActor.shared.getter();
    uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
    uint64_t v11 = v10;
    if ((swift_task_isCurrentExecutor(v9, v10) & 1) == 0) {
      swift_task_reportUnexpectedExecutor("homeeventsd/Main.swift", 22LL, 1LL, 39LL, v9, v11);
    }
    uint64_t v12 = *(void *)(v0 + 224);
    swift_errorRetain(v12);
    swift_release(v8);
    uint64_t v13 = _swift_stdlib_bridgeErrorToNSError(v12);
    *(void *)(v0 + 16) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v6 + 4);
    *uint64_t v7 = v13;
    swift_errorRelease(v12);
    swift_errorRelease(v12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MainDriver threw error: %@", v6, 0xCu);
    uint64_t v14 = sub_10000D228(&qword_10007EE38);
    swift_arrayDestroy(v7, 1LL, v14);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  else
  {
    uint64_t v15 = *(void *)(v0 + 224);
    swift_errorRelease(v15);
    swift_errorRelease(v15);
  }

  (*(void (**)(void, void))(v0 + 176))(*(void *)(v0 + 104), *(void *)(v0 + 88));
  exit(1);
}

unint64_t sub_10001E674()
{
  unint64_t result = qword_10007F660;
  if (!qword_10007F660)
  {
    unint64_t result = swift_getWitnessTable(&unk_100061248, &type metadata for Main);
    atomic_store(result, &qword_10007F660);
  }

  return result;
}

uint64_t sub_10001E6B8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10001E6E4()
{
  return sub_10001D0F4(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10001E6EC()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10001E720(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc(dword_10007F66C);
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_10000D3C0;
  return sub_10001D1C4(a1, v4, v5, v7, v6);
}

unint64_t sub_10001E798()
{
  unint64_t result = qword_10007F678;
  if (!qword_10007F678)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___BGSystemTaskScheduler);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10007F678);
  }

  return result;
}

uint64_t sub_10001E7D4(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for MainDriver(255LL);
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_10001E814(uint64_t a1)
{
  return sub_100003A3C(a1, *(uint64_t **)(v1 + 16));
}

uint64_t sub_10001E81C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D228(&qword_10007F680);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001E864(uint64_t a1)
{
  uint64_t v2 = sub_10000D228(&qword_10007F680);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10001E8A4(uint64_t a1, uint64_t a2)
{
  return a2;
}

ValueMetadata *type metadata accessor for Main()
{
  return &type metadata for Main;
}

uint64_t sub_10001E8F0(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_weakAssign(v2 + 29, a1);
  sub_10000D478((uint64_t)(v2 + 14), (uint64_t)v21);
  uint64_t v4 = (void *)v2[24];
  uint64_t v5 = v2[25];
  uint64_t v6 = type metadata accessor for CoreDataDatabase();
  uint64_t v7 = swift_allocObject(v6, 33LL, 7LL);
  *(void *)(v7 + 16) = [v4 newBackgroundContext];
  *(void *)(v7 + 24) = v5;
  *(_BYTE *)(v7 + 32) = 0;
  uint64_t v8 = *(void **)(a1 + OBJC_IVAR____TtC11homeeventsd10MainDriver_cloudKitContainer);
  type metadata accessor for Configuration(0LL);
  id v9 = v8;
  uint64_t v10 = static Configuration.cloudKitRecordDateCoalescingWindowSeconds.getter();
  v20[3] = v6;
  v20[4] = &off_100077B60;
  v20[0] = v7;
  uint64_t v11 = type metadata accessor for EventUploader();
  uint64_t v12 = (void *)swift_allocObject(v11, 136LL, 7LL);
  uint64_t v13 = sub_10001001C((uint64_t)v20, v6);
  __chkstk_darwin(v13);
  uint64_t v15 = (void *)((char *)v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v16 + 16))(v15);
  uint64_t v17 = *v15;
  v12[10] = v6;
  v12[11] = &off_100077B60;
  v12[7] = v17;
  sub_100010044(v21, (uint64_t)(v12 + 2));
  v12[15] = v10;
  v12[16] = v5;
  v12[13] = 0LL;
  v12[14] = 0LL;
  v12[12] = v9;
  _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v20);
  uint64_t v18 = v2[26];
  v2[26] = v12;
  swift_release(v18);
  swift_retain(v2);
  sub_100035394(0xD000000000000036LL, 0x80000001000633E0LL, (uint64_t)sub_100023350, (uint64_t)v2);
  sub_100035394(0xD00000000000003CLL, 0x8000000100063480LL, (uint64_t)sub_100023350, (uint64_t)v2);
  sub_100035394(0xD000000000000044LL, 0x80000001000634C0LL, (uint64_t)sub_100023350, (uint64_t)v2);
  return swift_release(v2);
}

void sub_10001EAE0()
{
  qword_1000807B8 = 0x40AC200000000000LL;
}

uint64_t sub_10001EAF4()
{
  swift_release(*(void *)(v0 + 208));
  swift_weakDestroy(v0 + 232, v1);

  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for EventUploadTask()
{
  return objc_opt_self(&OBJC_CLASS____TtC11homeeventsd15EventUploadTask);
}

uint64_t sub_10001EB60(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for EventUploadTask();
  uint64_t v5 = sub_100013014( &qword_10007F7E8,  v4,  (uint64_t (*)(uint64_t))type metadata accessor for EventUploadTask,  (uint64_t)&unk_100061314);
  return static LoggedObject<>.logger.getter(v3, a2, v5);
}

uint64_t sub_10001EBBC()
{
  uint64_t v0 = type metadata accessor for EventUploadTask();
  return static LoggedObject.logCategory.getter(v0);
}

uint64_t sub_10001EBE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D228(&qword_10007EE68);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
  sub_100023358(a1, (uint64_t)v13);
  uint64_t v8 = swift_allocObject(&unk_100076548, 80LL, 7LL);
  *(void *)(v8 + 16) = 0LL;
  *(void *)(v8 + 24) = 0LL;
  *(void *)(v8 + 32) = a2;
  __int128 v9 = v13[1];
  *(_OWORD *)(v8 + 40) = v13[0];
  *(_OWORD *)(v8 + sub_1000154A8(*(void *)(v0 + 152) + OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_database, v0 + 56) = v9;
  *(void *)(v8 + 72) = v14;
  swift_retain(a2);
  uint64_t v10 = sub_100021C68((uint64_t)v6, (uint64_t)&unk_10007F810, v8);
  sub_10001B974((uint64_t)v6);
  return v10;
}

uint64_t sub_10001ECDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (void *)swift_task_alloc(dword_10007F81C);
  *(void *)(v5 + 16) = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_10000D3C0;
  return sub_10001ED30(a5);
}

uint64_t sub_10001ED30(uint64_t a1)
{
  v2[32] = a1;
  v2[33] = v1;
  v2[34] = *v1;
  uint64_t v3 = type metadata accessor for CancellationError(0LL);
  v2[35] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[36] = v4;
  v2[37] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Logger(0LL);
  v2[38] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[39] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[40] = swift_task_alloc(v7);
  v2[41] = swift_task_alloc(v7);
  v2[42] = swift_task_alloc(v7);
  v2[43] = swift_task_alloc(v7);
  v2[44] = swift_task_alloc(v7);
  v2[45] = swift_task_alloc(v7);
  v2[46] = swift_task_alloc(v7);
  v2[47] = swift_task_alloc(v7);
  v2[48] = swift_task_alloc(v7);
  v2[49] = swift_task_alloc(v7);
  v2[50] = swift_task_alloc(v7);
  v2[51] = swift_task_alloc(v7);
  v2[52] = swift_task_alloc(v7);
  v2[53] = swift_task_alloc(v7);
  v2[54] = swift_task_alloc(v7);
  v2[55] = swift_task_alloc(v7);
  return swift_task_switch(sub_10001EE78, v1, 0LL);
}

uint64_t sub_10001EE78()
{
  uint64_t v1 = *(void *)(v0 + 272);
  uint64_t v2 = *(void **)(v0 + 256);
  uint64_t v3 = v2[3];
  uint64_t v4 = v2[4];
  sub_10000D408(v2, v3);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  unint64_t v7 = v6;
  *(void *)(v0 + 448) = v5;
  *(void *)(v0 + 4sub_1000154A8(*(void *)(v0 + 152) + OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_database, v0 + 56) = v6;
  uint64_t v8 = sub_100013014( &qword_10007F7F8,  v6,  (uint64_t (*)(uint64_t))type metadata accessor for EventUploadTask,  (uint64_t)&unk_1000612E4);
  *(void *)(v0 + 464) = v8;
  uint64_t v10 = sub_100013014( &qword_10007F7E8,  v9,  (uint64_t (*)(uint64_t))type metadata accessor for EventUploadTask,  (uint64_t)&unk_100061314);
  *(void *)(v0 + 472) = v10;
  uint64_t v37 = v10;
  static LoggedObject<>.logger.getter(v1, v8, v10);
  uint64_t v11 = swift_bridgeObjectRetain_n(v7, 2LL);
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v34 = *(void *)(v0 + 312);
    uint64_t v35 = *(void *)(v0 + 304);
    uint64_t v36 = *(void *)(v0 + 440);
    uint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v15 = swift_slowAlloc(32LL, -1LL);
    uint64_t v38 = v15;
    *(_DWORD *)uint64_t v14 = 136446210;
    swift_bridgeObjectRetain(v7);
    *(void *)(v0 + 248) = sub_100046274(v5, v7, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 248, v0 + 256, v14 + 4);
    swift_bridgeObjectRelease_n(v7, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v12,  v13,  "Successfully launched the task associated with identifier %{public}s",  v14,  0xCu);
    swift_arrayDestroy(v15, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1LL, -1LL);
    swift_slowDealloc(v14, -1LL, -1LL);

    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
    v16(v36, v35);
  }

  else
  {
    uint64_t v17 = *(void *)(v0 + 440);
    uint64_t v18 = *(void *)(v0 + 304);
    uint64_t v19 = *(void *)(v0 + 312);
    swift_bridgeObjectRelease_n(v7, 2LL);

    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v16(v17, v18);
  }

  *(void *)(v0 + 480) = v16;
  uint64_t v20 = *(void *)(v0 + 264);
  uint64_t v21 = *(void **)(v20 + 240);
  if (v21)
  {
    id v22 = v21;
    sub_100058F3C(3);

    id v23 = *(id *)(v20 + 240);
    *(void *)(v20 + 240) = 0LL;
  }

  else
  {
    id v23 = [objc_allocWithZone((Class)type metadata accessor for EventUploadScheduledWaitLogEvent()) init];
    sub_100058F3C(2);
  }

  uint64_t v24 = *(void *)(v0 + 264);

  uint64_t Strong = swift_weakLoadStrong(v24 + 232);
  *(void *)(v0 + 488) = Strong;
  if (Strong) {
    return swift_task_switch(sub_10001F224, Strong, 0LL);
  }
  uint64_t v27 = static LoggedObject<>.logger.getter(*(void *)(v0 + 272), v8, v37);
  uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
  os_log_type_t v29 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v28, v29))
  {
    id v30 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v30 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v28,  v29,  "MainDriver unexpectedly nil when trying to submit process launch metrics via background task",  v30,  2u);
    swift_slowDealloc(v30, -1LL, -1LL);
  }

  uint64_t v31 = *(void *)(v0 + 432);
  uint64_t v32 = *(void *)(v0 + 304);

  v16(v31, v32);
  *(void *)(v0 + 88) = 0LL;
  *(_BYTE *)(v0 + 96) = 1;
  uint64_t v33 = (void *)swift_task_alloc(dword_10007F824);
  *(void *)(v0 + 504) = v33;
  *uint64_t v33 = v0;
  v33[1] = sub_10001F35C;
  return sub_100022584();
}

uint64_t sub_10001F224()
{
  uint64_t v1 = v0[61];
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC11homeeventsd10MainDriver_didRecordProcessLaunchMetrics) & 1) != 0) {
    return swift_task_switch(sub_10001F300, v0[33], 0LL);
  }
  *(_BYTE *)(v1 + OBJC_IVAR____TtC11homeeventsd10MainDriver_didRecordProcessLaunchMetrics) = 1;
  uint64_t v3 = (void *)swift_task_alloc(dword_10007EE64);
  v0[62] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10001F2B0;
  return sub_1000076C4(0, 0);
}

uint64_t sub_10001F2B0()
{
  uint64_t v1 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 496));
  return swift_task_switch(sub_10001F300, *(void *)(v1 + 264), 0LL);
}

uint64_t sub_10001F300()
{
  *(void *)(v0 + 88) = 0LL;
  *(_BYTE *)(v0 + 96) = 1;
  uint64_t v1 = (void *)swift_task_alloc(dword_10007F824);
  *(void *)(v0 + 504) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10001F35C;
  return sub_100022584();
}

uint64_t sub_10001F35C(char a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 504);
  *(void *)(*v2 + 512) = v1;
  swift_task_dealloc(v5);
  uint64_t v6 = *(void *)(v4 + 264);
  if (v1)
  {
    unint64_t v7 = sub_100020A70;
  }

  else
  {
    *(_BYTE *)(v4 + 97) = a1 & 1;
    unint64_t v7 = sub_10001F3D4;
  }

  return swift_task_switch(v7, v6, 0LL);
}

uint64_t sub_10001F3D4()
{
  int v1 = *(unsigned __int8 *)(v0 + 97);
  uint64_t v2 = *(void *)(v0 + 464);
  uint64_t v3 = *(void *)(v0 + 472);
  uint64_t v4 = *(void *)(v0 + 272);
  if (v1 == 1)
  {
    uint64_t v5 = static LoggedObject<>.logger.getter(v4, v2, v3);
    uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Successfully uploaded events", v8, 2u);
      swift_slowDealloc(v8, -1LL, -1LL);
    }

    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v0 + 480);
    uint64_t v10 = *(void *)(v0 + 424);
    uint64_t v11 = *(void *)(v0 + 304);

    v9(v10, v11);
    sub_100022DB0();
  }

  else
  {
    uint64_t v12 = static LoggedObject<>.logger.getter(v4, v2, v3);
    os_log_type_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  v14,  "Declining to start our task because it is already running",  v15,  2u);
      swift_slowDealloc(v15, -1LL, -1LL);
    }

    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v0 + 480);
    uint64_t v17 = *(void *)(v0 + 416);
    uint64_t v18 = *(void *)(v0 + 304);

    v16(v17, v18);
  }

  uint64_t v19 = *(void **)(v0 + 264);
  uint64_t v20 = v19[17];
  uint64_t v21 = v19[18];
  sub_10000D408(v19 + 14, v20);
  dispatch thunk of FeatureDataSource.isLadleSchedulingEnabled.getter(v20, v21);
  uint64_t v22 = *(void *)(v0 + 456);
  static LoggedObject<>.logger.getter(*(void *)(v0 + 272), *(void *)(v0 + 464), *(void *)(v0 + 472));
  uint64_t v23 = swift_bridgeObjectRetain(v22);
  uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
  os_log_type_t v25 = static os_log_type_t.info.getter();
  BOOL v26 = os_log_type_enabled(v24, v25);
  uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v0 + 480);
  unint64_t v28 = *(void *)(v0 + 456);
  if (v26)
  {
    uint64_t v29 = *(void *)(v0 + 448);
    uint64_t v51 = *(void *)(v0 + 304);
    uint64_t v53 = *(void *)(v0 + 384);
    id v30 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v31 = swift_slowAlloc(32LL, -1LL);
    uint64_t v56 = v31;
    *(_DWORD *)id v30 = 136446210;
    swift_bridgeObjectRetain(v28);
    *(void *)(v0 + 112) = sub_100046274(v29, v28, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v30 + 4);
    swift_bridgeObjectRelease_n(v28, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v24,  v25,  "Marking task associated with identifier %{public}s complete",  v30,  0xCu);
    swift_arrayDestroy(v31, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1LL, -1LL);
    swift_slowDealloc(v30, -1LL, -1LL);

    v27(v53, v51);
  }

  else
  {
    uint64_t v32 = *(void *)(v0 + 384);
    uint64_t v33 = *(void *)(v0 + 304);
    swift_bridgeObjectRelease_n(*(void *)(v0 + 456), 2LL);

    v27(v32, v33);
  }

  uint64_t v34 = *(void **)(v0 + 256);
  uint64_t v35 = v34[3];
  uint64_t v36 = v34[4];
  sub_10000D408(v34, v35);
  (*(void (**)(uint64_t, uint64_t))(v36 + 40))(v35, v36);
  if (v1)
  {
    uint64_t result = *(void *)(*(void *)(v0 + 264) + 208LL);
    *(void *)(v0 + 552) = result;
    if (result)
    {
      swift_retain(result);
      return swift_task_switch(sub_1000205BC, 0LL, 0LL);
    }

    else
    {
      __break(1u);
    }
  }

  else
  {
    uint64_t v38 = *(void *)(v0 + 432);
    uint64_t v40 = *(void *)(v0 + 416);
    uint64_t v39 = *(void *)(v0 + 424);
    uint64_t v42 = *(void *)(v0 + 400);
    uint64_t v41 = *(void *)(v0 + 408);
    uint64_t v43 = *(void *)(v0 + 384);
    uint64_t v44 = *(void *)(v0 + 392);
    uint64_t v46 = *(void *)(v0 + 368);
    uint64_t v45 = *(void *)(v0 + 376);
    uint64_t v47 = *(void *)(v0 + 360);
    uint64_t v48 = *(void *)(v0 + 352);
    uint64_t v49 = *(void *)(v0 + 344);
    uint64_t v50 = *(void *)(v0 + 336);
    uint64_t v52 = *(void *)(v0 + 328);
    uint64_t v54 = *(void *)(v0 + 320);
    uint64_t v55 = *(void *)(v0 + 296);
    swift_task_dealloc(*(void *)(v0 + 440));
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v44);
    swift_task_dealloc(v43);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v52);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  return result;
}

uint64_t sub_10001F844()
{
  int v1 = (void *)swift_task_alloc(dword_10008061C);
  *(void *)(v0 + 528) = v1;
  *int v1 = v0;
  v1[1] = sub_10001F89C;
  return sub_100057770();
}

uint64_t sub_10001F89C(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 528);
  *(void *)(*v2 + 536) = v1;
  swift_task_dealloc(v5);
  uint64_t v6 = *(void *)(v4 + 264);
  if (v1)
  {
    os_log_type_t v7 = sub_10001FF70;
  }

  else
  {
    *(void *)(v4 + 544) = a1;
    os_log_type_t v7 = sub_10001F910;
  }

  return swift_task_switch(v7, v6, 0LL);
}

uint64_t sub_10001F910()
{
  uint64_t v1 = *(void *)(v0 + 544);
  swift_release(*(void *)(v0 + 520));
  if (v1 < 1)
  {
    uint64_t v20 = *(void *)(v0 + 456);
    static LoggedObject<>.logger.getter(*(void *)(v0 + 272), *(void *)(v0 + 464), *(void *)(v0 + 472));
    uint64_t v21 = swift_bridgeObjectRetain(v20);
    uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v23 = static os_log_type_t.info.getter();
    BOOL v24 = os_log_type_enabled(v22, v23);
    os_log_type_t v25 = *(void (**)(uint64_t, uint64_t))(v0 + 480);
    unint64_t v26 = *(void *)(v0 + 456);
    if (v24)
    {
      uint64_t v27 = *(void *)(v0 + 448);
      uint64_t v57 = *(void *)(v0 + 304);
      uint64_t v60 = *(void *)(v0 + 392);
      unint64_t v28 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v29 = swift_slowAlloc(32LL, -1LL);
      v62[0] = v29;
      *(_DWORD *)unint64_t v28 = 136446210;
      swift_bridgeObjectRetain(v26);
      *(void *)(v0 + 152) = sub_100046274(v27, v26, v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v28 + 4);
      swift_bridgeObjectRelease_n(v26, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v22,  v23,  "Marking task associated with identifier %{public}s complete",  v28,  0xCu);
      swift_arrayDestroy(v29, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1LL, -1LL);
      swift_slowDealloc(v28, -1LL, -1LL);

      v25(v60, v57);
    }

    else
    {
      uint64_t v35 = *(void *)(v0 + 392);
      uint64_t v36 = *(void *)(v0 + 304);
      swift_bridgeObjectRelease_n(*(void *)(v0 + 456), 2LL);

      v25(v35, v36);
    }

    uint64_t v37 = *(void **)(v0 + 256);
    uint64_t v38 = v37[3];
    uint64_t v39 = v37[4];
    sub_10000D408(v37, v38);
    (*(void (**)(uint64_t, uint64_t))(v39 + 40))(v38, v39);
  }

  else
  {
    uint64_t v2 = *(void *)(v0 + 536);
    uint64_t v3 = *(void **)(v0 + 256);
    swift_beginAccess(v0 + 88, v0 + 16, 0LL, 0LL);
    if (*(_BYTE *)(v0 + 96)) {
      double v4 = 0.0;
    }
    else {
      double v4 = *(double *)(v0 + 88);
    }
    uint64_t v5 = v3[3];
    uint64_t v6 = v3[4];
    sub_10000D408(v3, v5);
    (*(void (**)(uint64_t, uint64_t, double))(v6 + 48))(v5, v6, v4);
    if (v2)
    {
      uint64_t v7 = v2;
      uint64_t v8 = *(void *)(v0 + 456);
      static LoggedObject<>.logger.getter(*(void *)(v0 + 272), *(void *)(v0 + 464), *(void *)(v0 + 472));
      swift_errorRetain(v7);
      swift_bridgeObjectRetain(v8);
      uint64_t v9 = swift_errorRetain(v7);
      uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
      os_log_type_t v11 = static os_log_type_t.default.getter();
      BOOL v12 = os_log_type_enabled(v10, v11);
      os_log_type_t v13 = *(void (**)(uint64_t, uint64_t))(v0 + 480);
      unint64_t v14 = *(void *)(v0 + 456);
      if (v12)
      {
        uint64_t v15 = *(void *)(v0 + 448);
        uint64_t v56 = *(void *)(v0 + 304);
        uint64_t v59 = *(void *)(v0 + 400);
        uint64_t v16 = swift_slowAlloc(22LL, -1LL);
        uint64_t v17 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
        uint64_t v53 = swift_slowAlloc(32LL, -1LL);
        v62[0] = v53;
        *(_DWORD *)uint64_t v16 = 136446466;
        swift_bridgeObjectRetain(v14);
        *(void *)(v0 + 128) = sub_100046274(v15, v14, v62);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v16 + 4);
        swift_bridgeObjectRelease_n(v14, 3LL);
        *(_WORD *)(v16 + 12) = 2114;
        swift_errorRetain(v7);
        uint64_t v18 = _swift_stdlib_bridgeErrorToNSError(v7);
        *(void *)(v0 + 136) = v18;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v16 + 14);
        uint64_t *v17 = v18;
        swift_errorRelease(v7);
        swift_errorRelease(v7);
        _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "Failed to mark the task associated with identifier %{public}s as expired, marking complete and resubmitting: %{public}@",  (uint8_t *)v16,  0x16u);
        uint64_t v19 = sub_10000D228(&qword_10007EE38);
        swift_arrayDestroy(v17, 1LL, v19);
        swift_slowDealloc(v17, -1LL, -1LL);
        swift_arrayDestroy(v53, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v53, -1LL, -1LL);
        swift_slowDealloc(v16, -1LL, -1LL);

        v13(v59, v56);
      }

      else
      {
        uint64_t v30 = *(void *)(v0 + 400);
        uint64_t v31 = *(void *)(v0 + 304);
        swift_bridgeObjectRelease_n(*(void *)(v0 + 456), 2LL);
        swift_errorRelease(v7);
        swift_errorRelease(v7);

        v13(v30, v31);
      }

      uint64_t v32 = *(void **)(v0 + 256);
      uint64_t v33 = v32[3];
      uint64_t v34 = v32[4];
      sub_10000D408(v32, v33);
      (*(void (**)(uint64_t, uint64_t))(v34 + 40))(v33, v34);
      sub_1000220E4(*(void *)(v0 + 88), *(_BYTE *)(v0 + 96));
      swift_errorRelease(v7);
    }

    else
    {
      swift_bridgeObjectRelease(*(void *)(v0 + 456));
    }
  }

  uint64_t v40 = *(void *)(v0 + 432);
  uint64_t v42 = *(void *)(v0 + 416);
  uint64_t v41 = *(void *)(v0 + 424);
  uint64_t v44 = *(void *)(v0 + 400);
  uint64_t v43 = *(void *)(v0 + 408);
  uint64_t v45 = *(void *)(v0 + 384);
  uint64_t v46 = *(void *)(v0 + 392);
  uint64_t v48 = *(void *)(v0 + 368);
  uint64_t v47 = *(void *)(v0 + 376);
  uint64_t v50 = *(void *)(v0 + 360);
  uint64_t v51 = *(void *)(v0 + 352);
  uint64_t v52 = *(void *)(v0 + 344);
  uint64_t v54 = *(void *)(v0 + 336);
  uint64_t v55 = *(void *)(v0 + 328);
  uint64_t v58 = *(void *)(v0 + 320);
  uint64_t v61 = *(void *)(v0 + 296);
  swift_task_dealloc(*(void *)(v0 + 440));
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v46);
  swift_task_dealloc(v45);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v58);
  swift_task_dealloc(v61);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001FF70()
{
  uint64_t v1 = v0 + 16;
  uint64_t v2 = v0 + 88;
  uint64_t v3 = *(void *)(v0 + 536);
  uint64_t v5 = *(void *)(v0 + 464);
  uint64_t v4 = *(void *)(v0 + 472);
  uint64_t v6 = *(void *)(v0 + 272);
  swift_release(*(void *)(v0 + 520));
  static LoggedObject<>.logger.getter(v6, v5, v4);
  swift_errorRetain(v3);
  uint64_t v7 = swift_errorRetain(v3);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = *(void *)(v0 + 536);
    os_log_type_t v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    BOOL v12 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)os_log_type_t v11 = 138543362;
    swift_errorRetain(v10);
    uint64_t v13 = _swift_stdlib_bridgeErrorToNSError(v10);
    *(void *)(v0 + 144) = v13;
    uint64_t v1 = v0 + 16;
    uint64_t v2 = v0 + 88;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v11 + 4);
    *BOOL v12 = v13;
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "Failed to check if there are further pending events, assuming there are: %{public}@",  v11,  0xCu);
    uint64_t v14 = sub_10000D228(&qword_10007EE38);
    swift_arrayDestroy(v12, 1LL, v14);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);

    swift_errorRelease(v10);
  }

  else
  {
    uint64_t v15 = *(void *)(v0 + 536);
    swift_errorRelease(v15);
    swift_errorRelease(v15);
    swift_errorRelease(v15);
  }

  (*(void (**)(void, void))(v0 + 480))(*(void *)(v0 + 408), *(void *)(v0 + 304));
  uint64_t v16 = *(void **)(v0 + 256);
  swift_beginAccess(v2, v1, 0LL, 0LL);
  if (*(_BYTE *)(v0 + 96)) {
    double v17 = 0.0;
  }
  else {
    double v17 = *(double *)(v0 + 88);
  }
  uint64_t v18 = v16[3];
  uint64_t v19 = v16[4];
  sub_10000D408(v16, v18);
  (*(void (**)(uint64_t, uint64_t, double))(v19 + 48))(v18, v19, v17);
  swift_bridgeObjectRelease(*(void *)(v0 + 456));
  uint64_t v20 = *(void *)(v0 + 432);
  uint64_t v22 = *(void *)(v0 + 416);
  uint64_t v21 = *(void *)(v0 + 424);
  uint64_t v24 = *(void *)(v0 + 400);
  uint64_t v23 = *(void *)(v0 + 408);
  uint64_t v25 = *(void *)(v0 + 384);
  uint64_t v26 = *(void *)(v0 + 392);
  uint64_t v28 = *(void *)(v0 + 368);
  uint64_t v27 = *(void *)(v0 + 376);
  uint64_t v30 = *(void *)(v0 + 360);
  uint64_t v31 = *(void *)(v0 + 352);
  uint64_t v32 = *(void *)(v0 + 344);
  uint64_t v33 = *(void *)(v0 + 336);
  uint64_t v34 = *(void *)(v0 + 328);
  uint64_t v35 = *(void *)(v0 + 320);
  uint64_t v36 = *(void *)(v0 + 296);
  swift_task_dealloc(*(void *)(v0 + 440));
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v26);
  swift_task_dealloc(v25);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000205BC()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10008061C);
  *(void *)(v0 + 560) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100020614;
  return sub_100057770();
}

uint64_t sub_100020614(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 560);
  *(void *)(*v2 + 568) = v1;
  swift_task_dealloc(v5);
  uint64_t v6 = *(void *)(v4 + 264);
  if (v1)
  {
    uint64_t v7 = sub_100020950;
  }

  else
  {
    *(void *)(v4 + 576) = a1;
    uint64_t v7 = sub_100020688;
  }

  return swift_task_switch(v7, v6, 0LL);
}

uint64_t sub_100020688()
{
  uint64_t v1 = *(void *)(v0 + 576);
  swift_release(*(void *)(v0 + 552));
  if (v1 < 1) {
    goto LABEL_6;
  }
  uint64_t v2 = static LoggedObject<>.logger.getter(*(void *)(v0 + 272), *(void *)(v0 + 464), *(void *)(v0 + 472));
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  v4,  "Found pending events in the local database, scheduling a follow-up task to upload them",  v5,  2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = *(void *)(v0 + 568);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v0 + 480);
  uint64_t v8 = *(void *)(v0 + 376);
  uint64_t v9 = *(void *)(v0 + 304);

  v7(v8, v9);
  swift_beginAccess(v0 + 88, v0 + 64, 0LL, 0LL);
  sub_1000220E4(*(void *)(v0 + 88), *(_BYTE *)(v0 + 96));
  if (v6)
  {
    uint64_t v10 = *(void *)(v0 + 432);
    uint64_t v12 = *(void *)(v0 + 416);
    uint64_t v11 = *(void *)(v0 + 424);
    uint64_t v14 = *(void *)(v0 + 400);
    uint64_t v13 = *(void *)(v0 + 408);
    uint64_t v15 = *(void *)(v0 + 384);
    uint64_t v16 = *(void *)(v0 + 392);
    uint64_t v17 = *(void *)(v0 + 376);
    uint64_t v29 = *(void *)(v0 + 368);
    uint64_t v30 = *(void *)(v0 + 360);
    uint64_t v32 = *(void *)(v0 + 352);
    uint64_t v34 = *(void *)(v0 + 344);
    uint64_t v36 = *(void *)(v0 + 336);
    uint64_t v38 = *(void *)(v0 + 328);
    uint64_t v40 = *(void *)(v0 + 320);
    uint64_t v42 = *(void *)(v0 + 296);
    swift_task_dealloc(*(void *)(v0 + 440));
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v16);
    swift_task_dealloc(v15);
    swift_task_dealloc(v17);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v32);
    swift_task_dealloc(v34);
    swift_task_dealloc(v36);
    swift_task_dealloc(v38);
    swift_task_dealloc(v40);
    swift_task_dealloc(v42);
    uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
  }

  else
  {
LABEL_6:
    uint64_t v19 = *(void *)(v0 + 432);
    uint64_t v21 = *(void *)(v0 + 416);
    uint64_t v20 = *(void *)(v0 + 424);
    uint64_t v23 = *(void *)(v0 + 400);
    uint64_t v22 = *(void *)(v0 + 408);
    uint64_t v24 = *(void *)(v0 + 384);
    uint64_t v25 = *(void *)(v0 + 392);
    uint64_t v27 = *(void *)(v0 + 368);
    uint64_t v26 = *(void *)(v0 + 376);
    uint64_t v31 = *(void *)(v0 + 360);
    uint64_t v33 = *(void *)(v0 + 352);
    uint64_t v35 = *(void *)(v0 + 344);
    uint64_t v37 = *(void *)(v0 + 336);
    uint64_t v39 = *(void *)(v0 + 328);
    uint64_t v41 = *(void *)(v0 + 320);
    uint64_t v43 = *(void *)(v0 + 296);
    swift_task_dealloc(*(void *)(v0 + 440));
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v25);
    swift_task_dealloc(v24);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v31);
    swift_task_dealloc(v33);
    swift_task_dealloc(v35);
    swift_task_dealloc(v37);
    swift_task_dealloc(v39);
    swift_task_dealloc(v41);
    swift_task_dealloc(v43);
    uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
  }

  return v18();
}

uint64_t sub_100020950()
{
  uint64_t v1 = *(void *)(v0 + 432);
  uint64_t v3 = *(void *)(v0 + 416);
  uint64_t v2 = *(void *)(v0 + 424);
  uint64_t v5 = *(void *)(v0 + 400);
  uint64_t v4 = *(void *)(v0 + 408);
  uint64_t v7 = *(void *)(v0 + 384);
  uint64_t v6 = *(void *)(v0 + 392);
  uint64_t v9 = *(void *)(v0 + 368);
  uint64_t v8 = *(void *)(v0 + 376);
  uint64_t v11 = *(void *)(v0 + 360);
  uint64_t v12 = *(void *)(v0 + 352);
  uint64_t v13 = *(void *)(v0 + 344);
  uint64_t v14 = *(void *)(v0 + 336);
  uint64_t v15 = *(void *)(v0 + 328);
  uint64_t v16 = *(void *)(v0 + 320);
  uint64_t v17 = *(void *)(v0 + 296);
  swift_task_dealloc(*(void *)(v0 + 440));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100020A70()
{
  uint64_t v1 = *(void *)(v0 + 512);
  *(void *)(v0 + 120) = v1;
  uint64_t v2 = (void *)(v0 + 120);
  swift_errorRetain(v1);
  uint64_t v3 = sub_10000D228((uint64_t *)&unk_10007EC20);
  char v4 = swift_dynamicCast(v0 + 40, v0 + 120, v3, &type metadata for EventUploader.UploadFailure, 0LL);
  uint64_t v5 = *(void *)(v0 + 512);
  if ((v4 & 1) != 0)
  {
    swift_errorRelease(*(void *)(v0 + 512));
    double v6 = *(double *)(v0 + 40);
    unint64_t v7 = *(void *)(v0 + 48);
    uint64_t v8 = *(void *)(v0 + 56);
    if (v7 >> 62)
    {
      uint64_t v154 = (void *)(v0 + 184);
      if (v7 >> 62 == 1)
      {
        os_log_t v157 = (void *)(v0 + 200);
        swift_errorRetain(v8);
        sub_100022DB0();
        uint64_t v10 = *(void *)(v0 + 464);
        uint64_t v9 = *(void *)(v0 + 472);
        uint64_t v11 = *(void *)(v0 + 272);
        if ((v7 & 1) != 0)
        {
          sub_100022F2C();
          double v83 = v82;
          *(double *)(v0 + 88) = v82;
          *(_BYTE *)(v0 + 96) = 0;
          static LoggedObject<>.logger.getter(v11, v10, v9);
          swift_errorRetain(v8);
          uint64_t v84 = swift_errorRetain(v8);
          uint64_t v85 = (os_log_s *)Logger.logObject.getter(v84);
          os_log_type_t v86 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v85, v86))
          {
            uint64_t v87 = swift_slowAlloc(22LL, -1LL);
            uint64_t result = swift_slowAlloc(8LL, -1LL);
            *(_DWORD *)uint64_t v87 = 134218242;
            if ((~*(void *)&v83 & 0x7FF0000000000000LL) == 0)
            {
LABEL_66:
              __break(1u);
              goto LABEL_67;
            }

            if (v83 <= -9.22337204e18)
            {
LABEL_67:
              __break(1u);
              goto LABEL_68;
            }

            uint64_t v148 = (void *)result;
            if (v83 >= 9.22337204e18)
            {
LABEL_68:
              __break(1u);
              goto LABEL_69;
            }

            *uint64_t v154 = (uint64_t)v83;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v154, v0 + 192, v87 + 4);
            *(_WORD *)(v87 + 12) = 2114;
            swift_errorRetain(v8);
            uint64_t v88 = _swift_stdlib_bridgeErrorToNSError(v8);
            *(void *)(v0 + 192) = v88;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 192, v157, v87 + 14);
            void *v148 = v88;
            uint64_t v89 = *(void *)&v6;
            sub_100023444(*(uint64_t *)&v6, v7, v8);
            sub_100023444(*(uint64_t *)&v6, v7, v8);
            _os_log_impl( (void *)&_mh_execute_header,  v85,  v86,  "Encountered recoverable error that did not include a retry time suggestion, using %ld seconds: %{public}@",  (uint8_t *)v87,  0x16u);
            uint64_t v90 = sub_10000D228(&qword_10007EE38);
            swift_arrayDestroy(v148, 1LL, v90);
            swift_slowDealloc(v148, -1LL, -1LL);
            swift_slowDealloc(v87, -1LL, -1LL);

            sub_100023444(*(uint64_t *)&v6, v7, v8);
          }

          else
          {
            sub_100023444(*(uint64_t *)&v6, v7, v8);
            sub_100023444(*(uint64_t *)&v6, v7, v8);
            swift_errorRelease(v8);

            uint64_t v89 = *(void *)&v6;
          }

          Swift::Int v108 = *(void (**)(uint64_t, uint64_t))(v0 + 480);
          uint64_t v109 = *(void *)(v0 + 344);
          uint64_t v110 = *(void *)(v0 + 304);
          uint64_t v111 = v89;
          goto LABEL_44;
        }

        *(double *)(v0 + 88) = v6;
        *(_BYTE *)(v0 + 96) = 0;
        static LoggedObject<>.logger.getter(v11, v10, v9);
        swift_errorRetain(v8);
        uint64_t v12 = swift_errorRetain(v8);
        uint64_t v13 = (void *)Logger.logObject.getter(v12);
        os_log_type_t v14 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled((os_log_t)v13, v14))
        {
          sub_100023444(*(uint64_t *)&v6, v7, v8);
          sub_100023444(*(uint64_t *)&v6, v7, v8);
          swift_errorRelease(v8);

          uint64_t v18 = *(void *)&v6;
          goto LABEL_40;
        }

        uint64_t v15 = swift_slowAlloc(22LL, -1LL);
        uint64_t result = swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)uint64_t v15 = 134218242;
        if ((~*(void *)&v6 & 0x7FF0000000000000LL) != 0)
        {
          if (v6 > -9.22337204e18)
          {
            v144 = (void *)result;
            if (v6 < 9.22337204e18)
            {
              *os_log_t v157 = (uint64_t)v6;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v157, v0 + 208, v15 + 4);
              *(_WORD *)(v15 + 12) = 2114;
              swift_errorRetain(v8);
              uint64_t v17 = _swift_stdlib_bridgeErrorToNSError(v8);
              *(void *)(v0 + 208) = v17;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v15 + 14);
              uint64_t v18 = *(void *)&v6;
              void *v144 = v17;
              uint64_t v2 = (void *)(v0 + 120);
              sub_100023444(*(uint64_t *)&v6, v7, v8);
              sub_100023444(*(uint64_t *)&v6, v7, v8);
              _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v13,  v14,  "Encountered recoverable error that includes suggested retry time of %ld seconds: %{public}@",  (uint8_t *)v15,  0x16u);
              uint64_t v19 = sub_10000D228(&qword_10007EE38);
              swift_arrayDestroy(v144, 1LL, v19);
              swift_slowDealloc(v144, -1LL, -1LL);
              swift_slowDealloc(v15, -1LL, -1LL);

              sub_100023444(*(uint64_t *)&v6, v7, v8);
LABEL_40:
              Swift::Int v108 = *(void (**)(uint64_t, uint64_t))(v0 + 480);
              uint64_t v109 = *(void *)(v0 + 352);
              uint64_t v110 = *(void *)(v0 + 304);
              uint64_t v111 = v18;
LABEL_44:
              sub_100023444(v111, v7, v8);
              v108(v109, v110);
              goto LABEL_48;
            }

            goto LABEL_62;
          }
        }

        else
        {
          __break(1u);
        }

        __break(1u);
LABEL_62:
        __break(1u);
        goto LABEL_63;
      }

      unint64_t v159 = (void *)(v0 + 120);
      uint64_t v60 = *(void *)(v0 + 464);
      uint64_t v59 = *(void *)(v0 + 472);
      uint64_t v61 = *(void *)(v0 + 272);
      swift_errorRetain(*(void *)&v6);
      sub_100022DB0();
      static LoggedObject<>.logger.getter(v61, v60, v59);
      swift_errorRetain(*(void *)&v6);
      uint64_t v62 = swift_errorRetain(*(void *)&v6);
      uint64_t v63 = (os_log_s *)Logger.logObject.getter(v62);
      os_log_type_t v64 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v63, v64))
      {
        uint64_t v65 = *(void *)&v6;
        logb = v63;
        uint64_t v66 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v147 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)uint64_t v66 = 138543362;
        swift_errorRetain(*(void *)&v6);
        uint64_t v67 = v8;
        unint64_t v68 = v7;
        uint64_t v69 = _swift_stdlib_bridgeErrorToNSError(*(void *)&v6);
        *(void *)(v0 + 176) = v69;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v154, v66 + 4);
        *uint64_t v147 = v69;
        unint64_t v7 = v68;
        uint64_t v8 = v67;
        sub_100023444(*(uint64_t *)&v6, v7, v67);
        sub_100023444(*(uint64_t *)&v6, v7, v67);
        _os_log_impl( (void *)&_mh_execute_header,  logb,  v64,  "Encountered non-recoverable error when attempting to upload events: %{public}@",  v66,  0xCu);
        uint64_t v70 = sub_10000D228(&qword_10007EE38);
        swift_arrayDestroy(v147, 1LL, v70);
        swift_slowDealloc(v147, -1LL, -1LL);
        swift_slowDealloc(v66, -1LL, -1LL);

        sub_100023444(*(uint64_t *)&v6, v7, v67);
      }

      else
      {
        sub_100023444(*(uint64_t *)&v6, v7, v8);
        sub_100023444(*(uint64_t *)&v6, v7, v8);
        swift_errorRelease(*(void *)&v6);

        uint64_t v65 = *(void *)&v6;
      }

      uint64_t v103 = *(void (**)(uint64_t, uint64_t))(v0 + 480);
      uint64_t v104 = *(void *)(v0 + 336);
      uint64_t v105 = *(void *)(v0 + 304);
      sub_100023444(v65, v7, v8);
      uint64_t v106 = v104;
      uint64_t v107 = v105;
LABEL_47:
      v103(v106, v107);
      uint64_t v2 = v159;
      goto LABEL_48;
    }

    unint64_t v155 = *(void *)(v0 + 48);
    unint64_t v159 = (void *)(v0 + 120);
    os_log_t log = (os_log_t)(v0 + 232);
    uint64_t v47 = *(void *)(v0 + 464);
    uint64_t v46 = *(void *)(v0 + 472);
    uint64_t v48 = *(void *)(v0 + 272);
    if ((v7 & 1) != 0)
    {
      swift_bridgeObjectRetain(v8);
      sub_100022F2C();
      double v92 = v91;
      *(double *)(v0 + 88) = v91;
      *(_BYTE *)(v0 + 96) = 0;
      static LoggedObject<>.logger.getter(v48, v47, v46);
      uint64_t v93 = swift_bridgeObjectRetain(v8);
      uint64_t v50 = (os_log_s *)Logger.logObject.getter(v93);
      os_log_type_t v94 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v50, v94))
      {
        uint64_t v95 = swift_slowAlloc(22LL, -1LL);
        uint64_t result = swift_slowAlloc(32LL, -1LL);
        uint64_t v161 = result;
        *(_DWORD *)uint64_t v95 = 134218242;
        if ((~*(void *)&v92 & 0x7FF0000000000000LL) == 0)
        {
LABEL_69:
          __break(1u);
          goto LABEL_70;
        }

        if (v92 <= -9.22337204e18)
        {
LABEL_70:
          __break(1u);
          goto LABEL_71;
        }

        uint64_t v143 = result;
        if (v92 >= 9.22337204e18)
        {
LABEL_71:
          __break(1u);
LABEL_72:
          __break(1u);
          goto LABEL_73;
        }

        uint64_t v138 = *(void *)(v0 + 360);
        uint64_t v140 = *(void (**)(uint64_t, uint64_t))(v0 + 480);
        uint64_t v136 = *(void *)(v0 + 304);
        *(void *)(v0 + 216) = (uint64_t)v92;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224, v95 + 4);
        *(_WORD *)(v95 + 12) = 2082;
        uint64_t v96 = type metadata accessor for UUID(0LL);
        uint64_t v97 = sub_100013014( &qword_10007F4A0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v98 = swift_bridgeObjectRetain(v8);
        uint64_t v99 = Dictionary.description.getter(v98, v96, v3, v97);
        unint64_t v101 = v100;
        sub_100023444(*(uint64_t *)&v6, v155, v8);
        *(void *)(v0 + 224) = sub_100046274(v99, v101, &v161);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 224, log, v95 + 14);
        swift_bridgeObjectRelease(v101);
        sub_100023444(*(uint64_t *)&v6, v155, v8);
        sub_100023444(*(uint64_t *)&v6, v155, v8);
        _os_log_impl( (void *)&_mh_execute_header,  v50,  v94,  "Encountered some errors that did not include any retry time suggestion, using %ld seconds: %{public}s",  (uint8_t *)v95,  0x16u);
        swift_arrayDestroy(v143, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v143, -1LL, -1LL);
        uint64_t v102 = v95;
        uint64_t v2 = (void *)(v0 + 120);
        swift_slowDealloc(v102, -1LL, -1LL);

        sub_100023444(*(uint64_t *)&v6, v155, v8);
        v140(v138, v136);
        goto LABEL_48;
      }

      uint64_t v112 = *(void *)&v6;
      uint64_t v103 = *(void (**)(uint64_t, uint64_t))(v0 + 480);
      uint64_t v113 = *(void *)(v0 + 360);
    }

    else
    {
      swift_bridgeObjectRetain(v8);
      sub_100022DB0();
      *(double *)(v0 + 88) = v6;
      *(_BYTE *)(v0 + 96) = 0;
      static LoggedObject<>.logger.getter(v48, v47, v46);
      uint64_t v49 = swift_bridgeObjectRetain(v8);
      uint64_t v50 = (os_log_s *)Logger.logObject.getter(v49);
      os_log_type_t v51 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v50, v51))
      {
        uint64_t v52 = swift_slowAlloc(22LL, -1LL);
        uint64_t result = swift_slowAlloc(32LL, -1LL);
        uint64_t v161 = result;
        *(_DWORD *)uint64_t v52 = 134218242;
        if ((~*(void *)&v6 & 0x7FF0000000000000LL) == 0)
        {
LABEL_63:
          __break(1u);
          goto LABEL_64;
        }

        if (v6 <= -9.22337204e18)
        {
LABEL_64:
          __break(1u);
          goto LABEL_65;
        }

        uint64_t v146 = result;
        if (v6 >= 9.22337204e18)
        {
LABEL_65:
          __break(1u);
          goto LABEL_66;
        }

        uint64_t v139 = *(void *)(v0 + 368);
        int v142 = *(void (**)(uint64_t, uint64_t))(v0 + 480);
        uint64_t v137 = *(void *)(v0 + 304);
        *(void *)(v0 + 232) = (uint64_t)v6;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(log, v0 + 240, v52 + 4);
        *(_WORD *)(v52 + 12) = 2082;
        uint64_t v53 = type metadata accessor for UUID(0LL);
        uint64_t v54 = sub_100013014( &qword_10007F4A0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v55 = swift_bridgeObjectRetain(v8);
        uint64_t v56 = Dictionary.description.getter(v55, v53, v3, v54);
        unint64_t v58 = v57;
        sub_100023444(*(uint64_t *)&v6, v155, v8);
        *(void *)(v0 + 240) = sub_100046274(v56, v58, &v161);
        uint64_t v2 = (void *)(v0 + 120);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v0 + 248, v52 + 14);
        swift_bridgeObjectRelease(v58);
        sub_100023444(*(uint64_t *)&v6, v155, v8);
        sub_100023444(*(uint64_t *)&v6, v155, v8);
        _os_log_impl( (void *)&_mh_execute_header,  v50,  v51,  "Encountered some errors that include suggested retry time of %ld seconds: %{public}s",  (uint8_t *)v52,  0x16u);
        swift_arrayDestroy(v146, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v146, -1LL, -1LL);
        swift_slowDealloc(v52, -1LL, -1LL);

        sub_100023444(*(uint64_t *)&v6, v155, v8);
        v142(v139, v137);
LABEL_48:
        uint64_t v81 = *v2;
LABEL_49:
        swift_errorRelease(v81);
        char v76 = 1;
        goto LABEL_50;
      }

      uint64_t v112 = *(void *)&v6;
      uint64_t v103 = *(void (**)(uint64_t, uint64_t))(v0 + 480);
      uint64_t v113 = *(void *)(v0 + 368);
    }

    uint64_t v114 = *(void *)(v0 + 304);
    sub_100023444(v112, v155, v8);
    sub_100023444(v112, v155, v8);

    sub_100023444(v112, v155, v8);
    uint64_t v106 = v113;
    uint64_t v107 = v114;
    goto LABEL_47;
  }

  uint64_t v20 = *(void *)(v0 + 296);
  uint64_t v21 = *(void *)(v0 + 280);
  swift_errorRelease(*(void *)(v0 + 120));
  *(void *)(v0 + 104) = v5;
  swift_errorRetain(v5);
  int v22 = swift_dynamicCast(v20, v0 + 104, v3, v21, 0LL);
  uint64_t v23 = *(void *)(v0 + 512);
  uint64_t v25 = *(void *)(v0 + 464);
  uint64_t v24 = *(void *)(v0 + 472);
  if (!v22)
  {
    uint64_t v37 = *(void *)(v0 + 272);
    swift_errorRelease(*(void *)(v0 + 104));
    static LoggedObject<>.logger.getter(v37, v25, v24);
    swift_errorRetain(v23);
    uint64_t v38 = swift_errorRetain(v23);
    uint64_t v39 = (os_log_s *)Logger.logObject.getter(v38);
    os_log_type_t v40 = static os_log_type_t.error.getter();
    BOOL v41 = os_log_type_enabled(v39, v40);
    uint64_t v42 = *(void *)(v0 + 512);
    if (v41)
    {
      uint64_t v43 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v158 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v43 = 138543362;
      swift_errorRetain(v42);
      uint64_t v44 = _swift_stdlib_bridgeErrorToNSError(v42);
      *(void *)(v0 + 160) = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v43 + 4);
      *uint64_t v158 = v44;
      uint64_t v2 = (void *)(v0 + 120);
      swift_errorRelease(v42);
      swift_errorRelease(v42);
      _os_log_impl( (void *)&_mh_execute_header,  v39,  v40,  "Encountered unhandled error when attempting to upload events: %{public}@",  v43,  0xCu);
      uint64_t v45 = sub_10000D228(&qword_10007EE38);
      swift_arrayDestroy(v158, 1LL, v45);
      swift_slowDealloc(v158, -1LL, -1LL);
      swift_slowDealloc(v43, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(*(void *)(v0 + 512));
      swift_errorRelease(v42);
    }

    uint64_t v77 = *(void *)(v0 + 512);
    uint64_t v78 = *(void (**)(uint64_t, uint64_t))(v0 + 480);
    uint64_t v79 = *(void *)(v0 + 320);
    uint64_t v80 = *(void *)(v0 + 304);

    v78(v79, v80);
    sub_100022DB0();
    uint64_t v81 = v77;
    goto LABEL_49;
  }

  uint64_t v26 = *(void *)(v0 + 456);
  uint64_t v27 = *(void *)(v0 + 272);
  swift_errorRelease(v23);
  static LoggedObject<>.logger.getter(v27, v25, v24);
  uint64_t v28 = swift_bridgeObjectRetain_n(v26, 2LL);
  uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
  os_log_type_t v30 = static os_log_type_t.default.getter();
  BOOL v31 = os_log_type_enabled(v29, v30);
  uint64_t v32 = *(void (**)(os_log_t, uint64_t))(v0 + 480);
  unint64_t v33 = *(void *)(v0 + 456);
  if (v31)
  {
    uint64_t v34 = *(void *)(v0 + 448);
    uint64_t v145 = *(void *)(v0 + 304);
    os_log_t loga = *(os_log_t *)(v0 + 328);
    uint64_t v35 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v141 = v32;
    uint64_t v36 = swift_slowAlloc(32LL, -1LL);
    uint64_t v161 = v36;
    *(_DWORD *)uint64_t v35 = 136446210;
    swift_bridgeObjectRetain(v33);
    *(void *)(v0 + 168) = sub_100046274(v34, v33, &v161);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v35 + 4);
    swift_bridgeObjectRelease_n(v33, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v29,  v30,  "The task associated with identifier %{public}s has been canceled",  v35,  0xCu);
    swift_arrayDestroy(v36, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1LL, -1LL);
    swift_slowDealloc(v35, -1LL, -1LL);

    v141(loga, v145);
  }

  else
  {
    char v71 = *(os_log_s **)(v0 + 328);
    uint64_t v72 = *(void *)(v0 + 304);

    swift_bridgeObjectRelease_n(v33, 2LL);
    v32(v71, v72);
  }

  uint64_t v74 = *(void *)(v0 + 288);
  uint64_t v73 = *(void *)(v0 + 296);
  uint64_t v75 = *(void *)(v0 + 280);
  sub_100022DB0();
  (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v73, v75);
  swift_errorRelease(*(void *)(v0 + 104));
  char v76 = 0;
  uint64_t v2 = (void *)(v0 + 120);
LABEL_50:
  char v115 = *(void **)(v0 + 264);
  uint64_t v116 = v115[17];
  uint64_t v117 = v115[18];
  sub_10000D408(v115 + 14, v116);
  char v118 = dispatch thunk of FeatureDataSource.isLadleSchedulingEnabled.getter(v116, v117);
  if ((v76 & 1) == 0 && (v118 & 1) != 0)
  {
    uint64_t result = *(void *)(*(void *)(v0 + 264) + 208LL);
    *(void *)(v0 + 520) = result;
    if (result)
    {
      swift_retain(result);
      uint64_t v119 = sub_10001F844;
      return swift_task_switch(v119, 0LL, 0LL);
    }

    goto LABEL_72;
  }

  uint64_t v120 = *(void *)(v0 + 456);
  static LoggedObject<>.logger.getter(*(void *)(v0 + 272), *(void *)(v0 + 464), *(void *)(v0 + 472));
  uint64_t v121 = swift_bridgeObjectRetain(v120);
  uint64_t v122 = (os_log_s *)Logger.logObject.getter(v121);
  os_log_type_t v123 = static os_log_type_t.info.getter();
  BOOL v124 = os_log_type_enabled(v122, v123);
  BOOL v125 = *(void (**)(uint64_t, uint64_t))(v0 + 480);
  unint64_t v126 = *(void *)(v0 + 456);
  if (v124)
  {
    uint64_t v149 = v2 - 1;
    uint64_t v127 = v2;
    uint64_t v128 = *(void *)(v0 + 448);
    uint64_t v156 = *(void *)(v0 + 304);
    uint64_t v160 = *(void *)(v0 + 384);
    os_log_t logc = *(os_log_t *)(v0 + 480);
    uint64_t v129 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v130 = swift_slowAlloc(32LL, -1LL);
    uint64_t v161 = v130;
    *(_DWORD *)uint64_t v129 = 136446210;
    swift_bridgeObjectRetain(v126);
    *(void *)(v0 + 112) = sub_100046274(v128, v126, &v161);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v149, v127, v129 + 4);
    swift_bridgeObjectRelease_n(v126, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v122,  v123,  "Marking task associated with identifier %{public}s complete",  v129,  0xCu);
    swift_arrayDestroy(v130, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v130, -1LL, -1LL);
    swift_slowDealloc(v129, -1LL, -1LL);

    ((void (*)(uint64_t, uint64_t))logc)(v160, v156);
  }

  else
  {
    uint64_t v131 = *(void *)(v0 + 384);
    uint64_t v132 = *(void *)(v0 + 304);

    swift_bridgeObjectRelease_n(v126, 2LL);
    v125(v131, v132);
  }

  uint64_t v133 = *(void **)(v0 + 256);
  uint64_t v134 = v133[3];
  uint64_t v135 = v133[4];
  sub_10000D408(v133, v134);
  (*(void (**)(uint64_t, uint64_t))(v135 + 40))(v134, v135);
  uint64_t result = *(void *)(*(void *)(v0 + 264) + 208LL);
  *(void *)(v0 + 552) = result;
  if (result)
  {
    swift_retain(result);
    uint64_t v119 = sub_1000205BC;
    return swift_task_switch(v119, 0LL, 0LL);
  }

LABEL_73:
  __break(1u);
  return result;
}

uint64_t sub_100021C68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000D228(&qword_10007EE68);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001C5D8(a1, (uint64_t)v8);
  uint64_t v9 = type metadata accessor for TaskPriority(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9);
  if ((_DWORD)v11 == 1)
  {
    sub_10001B974((uint64_t)v8);
    uint64_t v12 = 4096LL;
    uint64_t v13 = *(void *)(a3 + 16);
    if (!v13)
    {
LABEL_6:
      uint64_t v19 = 0LL;
      return swift_task_create(v12, v19, (char *)&type metadata for () + 8, a2, a3);
    }
  }

  else
  {
    unsigned __int8 v20 = TaskPriority.rawValue.getter(v11);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    uint64_t v12 = v20 | 0x1000LL;
    uint64_t v13 = *(void *)(a3 + 16);
    if (!v13) {
      goto LABEL_6;
    }
  }

  uint64_t v14 = *(void *)(a3 + 24);
  uint64_t ObjectType = swift_getObjectType(v13);
  swift_unknownObjectRetain(v13);
  uint64_t v16 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v14);
  uint64_t v18 = v17;
  swift_unknownObjectRelease(v13);
  if (!(v18 | v16)) {
    goto LABEL_6;
  }
  v22[0] = 0LL;
  v22[1] = 0LL;
  uint64_t v19 = v22;
  v22[2] = v16;
  v22[3] = v18;
  return swift_task_create(v12, v19, (char *)&type metadata for () + 8, a2, a3);
}

uint64_t sub_100021DD8(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  uint64_t v3 = type metadata accessor for EventRecord.DecodedEvent(0LL);
  v2[6] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[7] = v4;
  v2[8] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100021E38, v1, 0LL);
}

objc_super *sub_100021E38()
{
  uint64_t v1 = v0 + 1;
  uint64_t receiver = v0[2].receiver;
  uint64_t v3 = receiver[2];
  if (v3)
  {
    Class super_class = v0[3].super_class;
    uint64_t v5 = (uint64_t)receiver + ((LOBYTE(super_class[10].isa) + 32LL) & ~(unint64_t)LOBYTE(super_class[10].isa));
    Class isa = super_class[9].isa;
    uint64_t v7 = (uint64_t (*)(id, uint64_t, id, __n128))super_class[2].isa;
    __n128 v8 = swift_bridgeObjectRetain(receiver);
    uint64_t v9 = v3 - 1;
    do
    {
      id v10 = v0[4].receiver;
      id v11 = v0[3].receiver;
      uint64_t v12 = v7(v10, v5, v11, v8);
      char v13 = EventRecord.DecodedEvent.isFake.getter(v12);
      ((void (*)(id, id))super_class[1].isa)(v10, v11);
      BOOL v15 = v9-- != 0;
      if ((v13 & 1) == 0) {
        break;
      }
      v5 += (uint64_t)isa;
    }

    while (v15);
    swift_bridgeObjectRelease(v0[2].receiver);
    uint64_t v1 = v0 + 1;
  }

  else
  {
    char v13 = 1;
  }

  Class v16 = v0[2].super_class;
  uint64_t v17 = (objc_class *)type metadata accessor for EventUploadSubtaskLogEvent();
  uint64_t v18 = (char *)objc_allocWithZone(v17);
  uint64_t v19 = OBJC_IVAR____TtC11homeeventsd26EventUploadSubtaskLogEvent_metricsManager;
  type metadata accessor for MetricsManager(0LL);
  unsigned __int8 v20 = v18;
  *(void *)&v18[v19] = static MetricsManager.sharedInstance.getter();
  v20[OBJC_IVAR____TtC11homeeventsd26EventUploadSubtaskLogEvent_subtaskType] = 0;
  *(void *)&v20[OBJC_IVAR____TtC11homeeventsd26EventUploadSubtaskLogEvent_numRecords] = v3;
  v20[OBJC_IVAR____TtC11homeeventsd26EventUploadSubtaskLogEvent_attributedToFakeData] = v13 & 1;

  v0[1].uint64_t receiver = v20;
  v0[1].Class super_class = v17;
  uint64_t result = -[objc_super init](v1, "init");
  v0[4].Class super_class = (Class)result;
  Class v22 = v16[26].isa;
  v0[5].uint64_t receiver = v22;
  if (v22)
  {
    uint64_t v23 = dword_1000804E4;
    swift_retain(v22);
    uint64_t v24 = (objc_super **)swift_task_alloc(v23);
    v0[5].Class super_class = (Class)v24;
    os_log_s *v24 = v0;
    v24[1] = (objc_super *)sub_100021FD4;
    return (objc_super *)sub_10004D144((uint64_t)v0[2].receiver);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100021FD4()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 88);
  *(void *)(*v1 + 96) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 40);
    uint64_t v5 = sub_100022088;
  }

  else
  {
    uint64_t v6 = *(void *)(v2 + 40);
    swift_release(*(void *)(v2 + 80));
    uint64_t v5 = sub_100022048;
    uint64_t v4 = v6;
  }

  return swift_task_switch(v5, v4, 0LL);
}

uint64_t sub_100022048()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void **)(v0 + 72);
  sub_1000252A0();

  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100022088()
{
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v2 = *(void **)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 64);
  swift_release(*(void *)(v0 + 80));
  uint64_t v4 = sub_100025500(v1);
  swift_willThrow(v4);

  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000220E4(uint64_t a1, char a2)
{
  uint64_t v6 = *v2;
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v35 = [objc_allocWithZone((Class)type metadata accessor for EventUploadScheduledWaitLogEvent()) init];
  if ((v2[27] & 1) == 0)
  {
    if ((a2 & 1) != 0) {
      double v21 = 5.0;
    }
    else {
      double v21 = *(double *)&a1 + 5.0;
    }
    if ((a2 & 1) != 0) {
      char v22 = 4;
    }
    else {
      char v22 = 2;
    }
    v36[3] = (uint64_t)&type metadata for BackgroundSystemTaskRequest;
    v36[4] = (uint64_t)&off_100075FC0;
    uint64_t v23 = swift_allocObject(&unk_100076520, 81LL, 7LL);
    v36[0] = v23;
    *(void *)(v23 + 16) = 0xD000000000000036LL;
    *(void *)(v23 + 24) = 0x80000001000633E0LL;
    *(_WORD *)(v23 + 32) = 257;
    *(_BYTE *)(v23 + 34) = 0;
    *(_BYTE *)(v23 + 35) = v22;
    *(double *)(v23 + 40) = v21;
    *(_BYTE *)(v23 + 48) = 0;
    *(double *)(v23 + sub_1000154A8(*(void *)(v0 + 152) + OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_database, v0 + 56) = *(double *)&a1;
    *(_BYTE *)(v23 + 64) = a2 & 1;
    *(void *)(v23 + 72) = 6LL;
    *(_BYTE *)(v23 + 80) = 0;
    sub_100035930(v36);
    if (!v3)
    {
      _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v36);
      BOOL v31 = (void *)v2[30];
      v2[30] = (uint64_t)v35;

      return;
    }

    _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v36);
    v36[0] = v3;
    swift_errorRetain(v3);
    uint64_t v24 = sub_10000D228((uint64_t *)&unk_10007EC20);
    if (swift_dynamicCast(&v37, v36, v24, &type metadata for BackgroundSystemTaskSchedulerError, 0LL))
    {
      swift_errorRelease(v3);
      if ((_BYTE)v37)
      {
        if (v37 == 2)
        {
          id v32 = v35;
          sub_100058F3C(1);

          swift_errorRelease(v36[0]);
        }

        else
        {
          _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000021LL,  0x8000000100063450LL,  "homeeventsd/EventUploadTask.swift",  33LL,  2LL,  119LL,  0);
          __break(1u);
        }

        return;
      }

      unint64_t v25 = sub_100022540();
      uint64_t v26 = swift_allocError(&type metadata for BackgroundSystemTaskSchedulerError, v25, 0LL, 0LL);
      _BYTE *v27 = 0;
      id v28 = v35;
      sub_1000591C4(v26);
      swift_errorRelease(v26);
      uint64_t v29 = swift_allocError(&type metadata for BackgroundSystemTaskSchedulerError, v25, 0LL, 0LL);
      _BYTE *v30 = 0;
      swift_willThrow(v29);
    }

    else
    {
    }

    swift_errorRelease(v36[0]);
    return;
  }

  uint64_t v12 = sub_100013014( &qword_10007F7F8,  v11,  (uint64_t (*)(uint64_t))type metadata accessor for EventUploadTask,  (uint64_t)&unk_1000612E4);
  uint64_t v14 = sub_100013014( &qword_10007F7E8,  v13,  (uint64_t (*)(uint64_t))type metadata accessor for EventUploadTask,  (uint64_t)&unk_100061314);
  uint64_t v15 = static LoggedObject<>.logger.getter(v6, v12, v14);
  Class v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v19 = swift_slowAlloc(32LL, -1LL);
    v36[0] = v19;
    *(_DWORD *)uint64_t v18 = 136446210;
    uint64_t v34 = v18 + 4;
    uint64_t v37 = sub_100046274(0xD000000000000036LL, 0x80000001000633E0LL, v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v34);
    _os_log_impl( (void *)&_mh_execute_header,  v16,  v17,  "Declining to schedule a task associated with identifier %{public}s because our task is currently running",  v18,  0xCu);
    swift_arrayDestroy(v19, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1LL, -1LL);
    swift_slowDealloc(v18, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  id v20 = v35;
  sub_100058F3C(1);
}

uint64_t sub_10002251C()
{
  return swift_deallocObject(v0, 81LL, 7LL);
}

unint64_t sub_100022540()
{
  unint64_t result = qword_10007F7F0;
  if (!qword_10007F7F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000618CC, &type metadata for BackgroundSystemTaskSchedulerError);
    atomic_store(result, (unint64_t *)&qword_10007F7F0);
  }

  return result;
}

uint64_t sub_100022584()
{
  v1[2] = v0;
  v1[3] = *v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  v1[4] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[5] = v3;
  unint64_t v4 = (*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[6] = swift_task_alloc(v4);
  v1[7] = swift_task_alloc(v4);
  return swift_task_switch(sub_1000225FC, v0, 0LL);
}

uint64_t sub_1000225FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = *(void *)(v2 + 24);
  int v5 = *(unsigned __int8 *)(v3 + 216);
  *(_BYTE *)(v2 + 128) = v5;
  if (v5 == 1)
  {
    uint64_t v6 = sub_100013014( &qword_10007F7F8,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for EventUploadTask,  (uint64_t)&unk_1000612E4);
    uint64_t v8 = sub_100013014( &qword_10007F7E8,  v7,  (uint64_t (*)(uint64_t))type metadata accessor for EventUploadTask,  (uint64_t)&unk_100061314);
    uint64_t v9 = static LoggedObject<>.logger.getter(v4, v6, v8);
    id v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Upload already running", v12, 2u);
      swift_slowDealloc(v12, -1LL, -1LL);
    }

    uint64_t v13 = *(void *)(v2 + 56);
    uint64_t v14 = *(void *)(v2 + 32);
    uint64_t v15 = *(void *)(v2 + 40);

    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
    LOBYTE(v13) = *(_BYTE *)(v2 + 128);
    uint64_t v16 = *(void *)(v2 + 48);
    swift_task_dealloc(*(void *)(v2 + 56));
    swift_task_dealloc(v16);
    return (*(uint64_t (**)(BOOL))(v2 + 8))((v13 & 1) == 0);
  }

  else
  {
    *(_BYTE *)(v3 + 216) = 1;
    uint64_t v18 = sub_100013014( &qword_10007F7F8,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for EventUploadTask,  (uint64_t)&unk_1000612E4);
    uint64_t v20 = sub_100013014( &qword_10007F7E8,  v19,  (uint64_t (*)(uint64_t))type metadata accessor for EventUploadTask,  (uint64_t)&unk_100061314);
    uint64_t v21 = static LoggedObject<>.logger.getter(v4, v18, v20);
    char v22 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Upload currently running", v24, 2u);
      swift_slowDealloc(v24, -1LL, -1LL);
    }

    uint64_t v26 = *(void *)(v2 + 40);
    uint64_t v25 = *(void *)(v2 + 48);
    uint64_t v27 = *(void *)(v2 + 32);
    id v28 = *(void **)(v2 + 16);

    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
    uint64_t v29 = v28[17];
    uint64_t v30 = v28[18];
    sub_10000D408(v28 + 14, v29);
    uint64_t result = dispatch thunk of FeatureDataSource.isLadleSchedulingEnabled.getter(v29, v30);
    uint64_t v31 = v28[26];
    *(void *)(v2 + 64) = v31;
    if ((result & 1) != 0)
    {
      if (v31)
      {
        uint64_t v32 = dword_1000804D4;
        swift_retain(v31);
        uint64_t v33 = (void *)swift_task_alloc(v32);
        *(void *)(v2 + 72) = v33;
        *uint64_t v33 = v2;
        v33[1] = sub_1000228DC;
        return sub_10004C9E0();
      }

      __break(1u);
    }

    else if (v31)
    {
      swift_retain(v31);
      return swift_task_switch(sub_1000229A0, 0LL, 0LL);
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_1000228DC()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 72);
  *(void *)(*v1 + 80) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 16);
    int v5 = sub_100022C04;
  }

  else
  {
    uint64_t v6 = *(void *)(v2 + 16);
    swift_release(*(void *)(v2 + 64));
    int v5 = sub_100022950;
    uint64_t v4 = v6;
  }

  return swift_task_switch(v5, v4, 0LL);
}

uint64_t sub_100022950()
{
  char v1 = *(_BYTE *)(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 48);
  swift_task_dealloc(*(void *)(v0 + 56));
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(BOOL))(v0 + 8))((v1 & 1) == 0);
}

uint64_t sub_1000229A0()
{
  char v1 = *(void **)(v0 + 64);
  sub_10000D408(v1 + 7, v1[10]);
  uint64_t v2 = v1[16];
  uint64_t v3 = (void *)swift_task_alloc(dword_100080604);
  *(void *)(v0 + 88) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100022A00;
  return sub_10005507C(v2);
}

uint64_t sub_100022A00(uint64_t a1)
{
  uint64_t v4 = *(void *)(*(void *)v2 + 88LL);
  int v5 = *(void **)v2;
  v5[12] = a1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5[15] = v1;
    return swift_task_switch(sub_100022B98, v5[2], 0LL);
  }

  else
  {
    uint64_t v7 = (void *)swift_task_alloc(dword_100080494);
    v5[13] = v7;
    *uint64_t v7 = v5;
    v7[1] = sub_100022AA4;
    return sub_10004DDEC(a1);
  }

uint64_t sub_100022AA4()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 104LL);
  *(void *)(*(void *)v1 + 112LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_100022B54;
  }
  else {
    uint64_t v3 = sub_100022B08;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_100022B08()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[2];
  swift_bridgeObjectRelease(v0[12]);
  swift_release(v1);
  return swift_task_switch(sub_100023470, v2, 0LL);
}

uint64_t sub_100022B54()
{
  v0[15] = v0[14];
  return swift_task_switch(sub_100022B98, v0[2], 0LL);
}

uint64_t sub_100022B98()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  swift_release(*(void *)(v0 + 64));
  sub_100022C70(v4, v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))(0LL);
}

uint64_t sub_100022C04()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  swift_release(*(void *)(v0 + 64));
  sub_100022C70(v4, v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))(0LL);
}

uint64_t sub_100022C70(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(_BYTE *)(a1 + 216) = 0;
  uint64_t v9 = sub_100013014( &qword_10007F7F8,  v8,  (uint64_t (*)(uint64_t))type metadata accessor for EventUploadTask,  (uint64_t)&unk_1000612E4);
  uint64_t v11 = sub_100013014( &qword_10007F7E8,  v10,  (uint64_t (*)(uint64_t))type metadata accessor for EventUploadTask,  (uint64_t)&unk_100061314);
  uint64_t v12 = static LoggedObject<>.logger.getter(a2, v9, v11);
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Upload no longer running", v15, 2u);
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_100022DB0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100013014( &qword_10007F7F8,  v7,  (uint64_t (*)(uint64_t))type metadata accessor for EventUploadTask,  (uint64_t)&unk_1000612E4);
  uint64_t v10 = sub_100013014( &qword_10007F7E8,  v9,  (uint64_t (*)(uint64_t))type metadata accessor for EventUploadTask,  (uint64_t)&unk_100061314);
  uint64_t v11 = static LoggedObject<>.logger.getter(v2, v8, v10);
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    os_log_type_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)os_log_type_t v14 = 134217984;
    uint64_t v17 = 2LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v14 + 4);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Resetting back off time interval to %ld seconds", v14, 0xCu);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v1[28] = 0x4000000000000000LL;
  return result;
}

uint64_t sub_100022F2C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)v0;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v27 - v9;
  double v11 = v1[28];
  double v12 = v11 + v11;
  if (qword_10007EB58 != -1) {
    swift_once(&qword_10007EB58, sub_10001EAE0);
  }
  v1[28] = v12;
  uint64_t v13 = sub_100013014( &qword_10007F7F8,  v8,  (uint64_t (*)(uint64_t))type metadata accessor for EventUploadTask,  (uint64_t)&unk_1000612E4);
  uint64_t v15 = sub_100013014( &qword_10007F7E8,  v14,  (uint64_t (*)(uint64_t))type metadata accessor for EventUploadTask,  (uint64_t)&unk_100061314);
  if (v12 == v11)
  {
    static LoggedObject<>.logger.getter(v2, v13, v15);
    uint64_t v16 = swift_retain(v1);
    uint64_t v17 = (void *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled((os_log_t)v17, v18))
    {

      swift_release(v1);
      return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v10, v3);
    }

    uint64_t v19 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v19 = 134217984;
    uint64_t result = swift_task_isCurrentExecutor(v1, 0LL);
    if ((result & 1) == 0) {
      uint64_t result = swift_task_reportUnexpectedExecutor("homeeventsd/EventUploadTask.swift", 33LL, 1LL, 295LL, v1, 0LL);
    }
    double v21 = v1[28];
    if ((~*(void *)&v21 & 0x7FF0000000000000LL) != 0)
    {
      if (v21 > -9.22337204e18)
      {
        if (v21 < 9.22337204e18)
        {
          uint64_t v28 = (uint64_t)v21;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v19 + 4);
          swift_release(v1);
          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v17,  v18,  "Back off time interval staying at %ld seconds",  v19,  0xCu);
          swift_slowDealloc(v19, -1LL, -1LL);

          return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v10, v3);
        }

        goto LABEL_29;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  static LoggedObject<>.logger.getter(v2, v13, v15);
  uint64_t v22 = swift_retain(v1);
  os_log_type_t v23 = (void *)Logger.logObject.getter(v22);
  os_log_type_t v24 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled((os_log_t)v23, v24))
  {

    swift_release(v1);
    goto LABEL_25;
  }

  uint64_t result = swift_slowAlloc(22LL, -1LL);
  *(_DWORD *)uint64_t result = 134218240;
  if ((~*(void *)&v11 & 0x7FF0000000000000LL) == 0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }

  if (v11 <= -9.22337204e18)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }

  if (v11 >= 9.22337204e18)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }

  uint64_t v25 = result;
  uint64_t v28 = (uint64_t)v11;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, result + 4);
  *(_WORD *)(v25 + 12) = 2048;
  uint64_t result = swift_task_isCurrentExecutor(v1, 0LL);
  if ((result & 1) == 0) {
    uint64_t result = swift_task_reportUnexpectedExecutor("homeeventsd/EventUploadTask.swift", 33LL, 1LL, 297LL, v1, 0LL);
  }
  double v26 = v1[28];
  if ((~*(void *)&v26 & 0x7FF0000000000000LL) == 0) {
    goto LABEL_33;
  }
  if (v26 <= -9.22337204e18)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }

  if (v26 < 9.22337204e18)
  {
    uint64_t v28 = (uint64_t)v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v25 + 14);
    swift_release(v1);
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v23,  v24,  "Advanced back off time interval from %ld to %ld seconds",  (uint8_t *)v25,  0x16u);
    swift_slowDealloc(v25, -1LL, -1LL);

LABEL_25:
    uint64_t v10 = v7;
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v10, v3);
  }

uint64_t sub_100023350(uint64_t a1)
{
  return sub_10001EBE0(a1, v1);
}

uint64_t sub_100023358(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100023394()
{
  return swift_deallocObject(v0, 80LL, 7LL);
}

uint64_t sub_1000233C8()
{
  uint64_t v2 = (void *)swift_task_alloc(dword_10007F80C);
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_10000D3C0;
  uint64_t v3 = (void *)swift_task_alloc(dword_10007F81C);
  v2[2] = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_10000D3C0;
  return sub_10001ED30(v0 + 40);
}

uint64_t sub_100023444(uint64_t result, unint64_t a2, uint64_t a3)
{
  unint64_t v3 = a2 >> 62;
  if (a2 >> 62 == 2) {
    return swift_errorRelease(result);
  }
  if ((_DWORD)v3 == 1)
  {
    uint64_t result = a3;
    return swift_errorRelease(result);
  }

  if (!(_DWORD)v3) {
    return swift_bridgeObjectRelease(a3);
  }
  return result;
}

uint64_t sub_100023474@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v38 = a3;
  uint64_t v36 = a2;
  uint64_t v4 = type metadata accessor for FakeEvent.State(0LL);
  __chkstk_darwin(v4);
  uint64_t v37 = (uint64_t)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_10000D228(&qword_10007F488);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_10000D228(&qword_10007F838);
  __chkstk_darwin(v9);
  double v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v36 - v18;
  __chkstk_darwin(v17);
  double v21 = (char *)&v36 - v20;
  uint64_t v22 = type metadata accessor for Date(0LL);
  __chkstk_darwin(v22);
  os_log_type_t v24 = (char *)&v36 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v25 + 16))(v24, a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v21, v36, v12);
  uint64_t v26 = type metadata accessor for EventCategory(0LL);
  uint64_t v27 = 1LL;
  uint64_t v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56LL))(v11, 1LL, 1LL, v26);
  uint64_t v29 = UUID.init()(v28);
  UUID.init()(v29);
  uint64_t v39 = 0LL;
  uint64_t v30 = swift_stdlib_random(&v39, 8LL);
  if ((v39 & 0x20000) != 0)
  {
    UUID.init()(v30);
    uint64_t v27 = 0LL;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v8, v27, 1LL, v12);
  uint64_t v31 = v37;
  sub_100023720(v37);
  uint64_t v32 = v38;
  FakeEvent.init(date:homeIdentifier:category:roomIdentifier:roomName:accessoryIdentifier:accessoryName:userIdentifier:state:)( v24,  v21,  v11,  v19,  0LL,  0LL,  v16,  0LL,  0LL,  v8,  v31);
  uint64_t v33 = enum case for EventRecord.DecodedEvent.fakeEvent(_:);
  uint64_t v34 = type metadata accessor for EventRecord.DecodedEvent(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 104LL))(v32, v33, v34);
}

unint64_t sub_100023720@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10000D228(&qword_10007F840);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = static FakeEvent.State.allCases.getter(v3);
  unint64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
    unint64_t result = sub_10002386C(v7);
    if ((result & 0x8000000000000000LL) != 0)
    {
      __break(1u);
    }

    else
    {
      unint64_t v9 = result;
      if (result < *(void *)(v6 + 16))
      {
        uint64_t v10 = type metadata accessor for FakeEvent.State(0LL);
        uint64_t v11 = *(void *)(v10 - 8);
        (*(void (**)(char *, unint64_t, uint64_t))(v11 + 16))( v5,  v6 + ((*(unsigned __int8 *)(v11 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))
        + *(void *)(v11 + 72) * v9,
          v10);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v5, 0LL, 1LL, v10);
        goto LABEL_6;
      }
    }

    __break(1u);
    goto LABEL_10;
  }

  uint64_t v10 = ((uint64_t (*)(void))type metadata accessor for FakeEvent.State)();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v5, 1LL, 1LL, v10);
LABEL_6:
  swift_bridgeObjectRelease(v6);
  type metadata accessor for FakeEvent.State(0LL);
  uint64_t v12 = *(void *)(v10 - 8);
  unint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v5, 1LL, v10);
  if ((_DWORD)result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 32))(a1, v5, v10);
  }
LABEL_10:
  __break(1u);
  return result;
}

unint64_t sub_10002386C(unint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    unint64_t v3 = 0LL;
    swift_stdlib_random(&v3, 8LL);
    unint64_t result = (v3 * (unsigned __int128)v1) >> 64;
    if (v3 * v1 < v1)
    {
      unint64_t v2 = -(uint64_t)v1 % v1;
      if (v2 > v3 * v1)
      {
        do
        {
          unint64_t v3 = 0LL;
          swift_stdlib_random(&v3, 8LL);
        }

        while (v2 > v3 * v1);
        return (v3 * (unsigned __int128)v1) >> 64;
      }
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1000238F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  *(_BYTE *)(v6 + 113) = a6;
  *(_BYTE *)(v6 + 112) = a5;
  *(void *)(v6 + sub_1000154A8(*(void *)(v0 + 152) + OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_database, v0 + 56) = a3;
  *(void *)(v6 + 64) = a4;
  *(void *)(v6 + 40) = a1;
  *(void *)(v6 + 48) = a2;
  uint64_t v7 = type metadata accessor for Logger(0LL);
  *(void *)(v6 + 72) = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  *(void *)(v6 + 80) = v8;
  *(void *)(v6 + 88) = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100023960, 0LL, 0LL);
}

uint64_t sub_100023960()
{
  uint64_t v1 = *(void *)(v0 + 56);
  if (v1 < 1)
  {
    uint64_t v13 = type metadata accessor for HomeKitEventsError(0LL);
    uint64_t v14 = sub_10000D1E8( &qword_10007F830,  (uint64_t (*)(uint64_t))&type metadata accessor for HomeKitEventsError,  (uint64_t)&protocol conformance descriptor for HomeKitEventsError);
    swift_allocError(v13, v14, 0LL, 0LL);
    uint64_t v16 = v15;
    _StringGuts.grow(_:)(35LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    *(void *)(v0 + 16) = v1;
    v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    object = v17._object;
    String.append(_:)(v17);
    swift_bridgeObjectRelease(object);
    *uint64_t v16 = 0xD000000000000021LL;
    v16[1] = 0x8000000100063510LL;
    uint64_t v19 = (*(uint64_t (**)(void *, void, uint64_t))(*(void *)(v13 - 8) + 104LL))( v16,  enum case for HomeKitEventsError.unexpected(_:),  v13);
    swift_willThrow(v19);
    swift_task_dealloc(*(void *)(v0 + 88));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v2 = type metadata accessor for XPCServer();
    sub_10000D1E8( (unint64_t *)&qword_10007F128,  (uint64_t (*)(uint64_t))type metadata accessor for XPCServer,  (uint64_t)&unk_100060A78);
    uint64_t v3 = static LoggedObject.logger.getter(v2);
    uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
    os_log_type_t v5 = static os_log_type_t.default.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = *(void *)(v0 + 56);
      uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)uint64_t v7 = 134217984;
      *(void *)(v0 + 32) = v6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v7 + 4);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Creating %ld fake event(s)", v7, 0xCu);
      swift_slowDealloc(v7, -1LL, -1LL);
    }

    uint64_t v8 = *(void *)(v0 + 56);
    __int128 v20 = *(_OWORD *)(v0 + 40);
    (*(void (**)(void, void))(*(void *)(v0 + 80) + 8LL))(*(void *)(v0 + 88), *(void *)(v0 + 72));
    uint64_t v9 = swift_task_alloc(32LL);
    *(_OWORD *)(v9 + 16) = v20;
    uint64_t v10 = sub_100027610((void (*)(uint64_t *))sub_100023CA4, v9, 0LL, v8);
    *(void *)(v0 + 96) = v10;
    swift_task_dealloc(v9);
    *(void *)&__int128 v20 = (char *)&dword_1000800C8 + dword_1000800C8;
    uint64_t v11 = (void *)swift_task_alloc(unk_1000800CC);
    *(void *)(v0 + 104) = v11;
    void *v11 = v0;
    v11[1] = sub_100023C30;
    return ((uint64_t (*)(uint64_t, uint64_t, char, char))v20)( v10,  *(void *)(v0 + 64),  *(_BYTE *)(v0 + 112),  *(_BYTE *)(v0 + 113));
  }

uint64_t sub_100023C30()
{
  uint64_t v2 = *(void *)(*v1 + 104);
  uint64_t v3 = *v1;
  swift_task_dealloc(v2);
  uint64_t v4 = *(void *)(v3 + 96);
  if (v0)
  {
    swift_bridgeObjectRelease(v4);
    swift_task_dealloc(*(void *)(v3 + 88));
  }

  else
  {
    uint64_t v5 = *(void *)(v3 + 88);
    swift_bridgeObjectRelease(v4);
    swift_task_dealloc(v5);
  }

  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100023CA4@<X0>(uint64_t a1@<X8>)
{
  return sub_100023474(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

void *sub_100023CC0(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v18[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = _swiftEmptyArrayStorage;
  if (v7)
  {
    uint64_t v17 = v1;
    double v21 = _swiftEmptyArrayStorage;
    sub_10002CCC8(0, v7, 0);
    uint64_t v9 = *(void *)(type metadata accessor for SomeEvent(0LL) - 8);
    uint64_t v10 = a1 + ((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    do
    {
      SomeEvent.anyEvent.getter(v18);
      uint64_t v12 = v19;
      uint64_t v13 = v20;
      sub_10000D408(v18, v19);
      dispatch thunk of EventProtocol.homeIdentifier.getter(v12, v13);
      _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v18);
      uint64_t v8 = v21;
      if ((swift_isUniquelyReferenced_nonNull_native(v21) & 1) == 0)
      {
        sub_10002CCC8(0, v8[2] + 1LL, 1);
        uint64_t v8 = v21;
      }

      unint64_t v15 = v8[2];
      unint64_t v14 = v8[3];
      if (v15 >= v14 >> 1)
      {
        sub_10002CCC8(v14 > 1, v15 + 1, 1);
        uint64_t v8 = v21;
      }

      v8[2] = v15 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))( (unint64_t)v8 + ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
      + *(void *)(v4 + 72) * v15,
        v6,
        v3);
      double v21 = v8;
      v10 += v11;
      --v7;
    }

    while (v7);
  }

  return v8;
}

uint64_t sub_100023E6C()
{
  uint64_t v0 = type metadata accessor for XPCServer();
  sub_10000D1E8( (unint64_t *)&qword_10007F128,  (uint64_t (*)(uint64_t))type metadata accessor for XPCServer,  (uint64_t)&unk_100060A78);
  return static LoggedObject.logger.getter(v0);
}

uint64_t sub_100023EC0(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128LL;
    return __clz(__rbit64(v1)) + v2;
  }

  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3LL;
  }
  unint64_t v8 = v7 - 3;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128LL;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64LL;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

int64_t sub_100023F60(int64_t result, int a2, char a3, uint64_t a4)
{
  if ((a3 & 1) != 0) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (unint64_t result = 1LL << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }

  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }

  unint64_t v8 = v7 & (-2LL << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0LL;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }

  return result;
}

uint64_t sub_100024044(uint64_t a1)
{
  v1[5] = a1;
  uint64_t v2 = type metadata accessor for UUID(0LL);
  v1[6] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[7] = v3;
  unint64_t v4 = (*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[8] = swift_task_alloc(v4);
  v1[9] = swift_task_alloc(v4);
  uint64_t v5 = type metadata accessor for Logger(0LL);
  v1[10] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v1[11] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[12] = swift_task_alloc(v7);
  v1[13] = swift_task_alloc(v7);
  return swift_task_switch(sub_1000240EC, 0LL, 0LL);
}

uint64_t sub_1000240EC()
{
  unint64_t v1 = v0;
  uint64_t v2 = sub_100023CC0(v0[5]);
  uint64_t v3 = sub_1000162F8((uint64_t)v2);
  swift_bridgeObjectRelease(v2);
  uint64_t v4 = type metadata accessor for XPCServer();
  v0[14] = v4;
  v0[15] = sub_10000D1E8( (unint64_t *)&qword_10007F128,  (uint64_t (*)(uint64_t))type metadata accessor for XPCServer,  (uint64_t)&unk_100060A78);
  static LoggedObject.logger.getter(v4);
  swift_bridgeObjectRetain_n(v3, 2LL);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.info.getter(v6);
  uint64_t v55 = v0;
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v49 = v0[11];
    uint64_t v51 = v0[10];
    uint64_t v53 = v0[13];
    uint64_t v8 = v0[6];
    unint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    unint64_t v10 = (void *)swift_slowAlloc(32LL, -1LL);
    v56[0] = v10;
    *(_DWORD *)unint64_t v9 = 136315138;
    uint64_t v11 = sub_10000D1E8( &qword_10007F4A0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    swift_bridgeObjectRetain(v3);
    uint64_t v13 = Set.description.getter(v12, v8, v11);
    unint64_t v15 = v14;
    swift_bridgeObjectRelease(v3);
    v0[4] = sub_100046274(v13, v15, (uint64_t *)v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 4, v0 + 5, v9 + 4);
    unint64_t v16 = v15;
    unint64_t v1 = v0;
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease_n(v3, 2LL);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Ensuring zones exist for homes: %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);

    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v49 + 8);
    v17(v53, v51);
  }

  else
  {
    uint64_t v18 = v0[13];
    uint64_t v20 = v0[10];
    uint64_t v19 = v0[11];
    swift_bridgeObjectRelease_n(v3, 2LL);

    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v17(v18, v20);
  }

  uint64_t v21 = v3;
  v1[16] = v17;
  uint64_t v22 = type metadata accessor for Configuration(0LL);
  uint64_t v23 = (void *)static Configuration.cloudKitContainer.getter(v22);
  id v24 = [v23 privateCloudDatabase];
  v1[17] = v24;

  id v25 = objc_allocWithZone(&OBJC_CLASS___CKOperationGroup);
  id v26 = v24;
  id v27 = [v25 init];
  v1[18] = v27;
  v56[0] = v27;
  sub_10004B008(v56, v26, 25LL);

  uint64_t v28 = *(void *)(v3 + 16);
  if (v28)
  {
    id v50 = v27;
    id v52 = v26;
    uint64_t v29 = v1[7];
    v56[0] = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v28);
    uint64_t result = sub_100023EC0(v3);
    int64_t v31 = result;
    int v33 = v32;
    char v35 = v34 & 1;
    uint64_t v54 = v3 + 56;
    while ((v31 & 0x8000000000000000LL) == 0 && v31 < 1LL << *(_BYTE *)(v21 + 32))
    {
      if (*(_DWORD *)(v21 + 36) != v33) {
        goto LABEL_16;
      }
      uint64_t v37 = v55[8];
      uint64_t v36 = v55[9];
      uint64_t v38 = v55[6];
      (*(void (**)(uint64_t, int64_t, uint64_t))(v29 + 16))( v36,  *(void *)(v21 + 48) + *(void *)(v29 + 72) * v31,  v38);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 32))(v37, v36, v38);
      uint64_t v39 = v21;
      uint64_t v40 = static EventRecord.recordZoneID(forHomeIdentifier:)(v37);
      uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 8))(v37, v38);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v41);
      uint64_t v42 = *((void *)v56[0] + 2);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v42);
      uint64_t v43 = v40;
      uint64_t v21 = v39;
      uint64_t v44 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v42, v43);
      specialized ContiguousArray._endMutation()(v44);
      uint64_t result = sub_100023F60(v31, v33, v35 & 1, v39);
      int64_t v31 = result;
      int v33 = v45;
      char v35 = v46 & 1;
      if (!--v28)
      {
        sub_100024EEC(result, v45, v46 & 1);
        uint64_t v47 = v56[0];
        swift_bridgeObjectRelease(v39);
        unint64_t v1 = v55;
        id v27 = v50;
        id v26 = v52;
        goto LABEL_13;
      }
    }

    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
  }

  else
  {
    swift_bridgeObjectRelease(v3);
    uint64_t v47 = _swiftEmptyArrayStorage;
LABEL_13:
    v1[19] = v47;
    uint64_t v48 = (void *)swift_task_alloc(dword_1000803B4);
    v1[20] = v48;
    *uint64_t v48 = v1;
    v48[1] = sub_100024588;
    return sub_10004AD38((uint64_t)v47, (uint64_t)v26, (uint64_t)v27);
  }

  return result;
}

uint64_t sub_100024588()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 160);
  *(void *)(*v1 + 168) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_bridgeObjectRelease(*(void *)(v2 + 152));
    uint64_t v4 = sub_10002466C;
  }

  else
  {
    uint64_t v4 = sub_1000245F4;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_1000245F4()
{
  unint64_t v1 = *(void **)(v0 + 144);
  uint64_t v2 = *(void **)(v0 + 136);
  uint64_t v3 = *(void *)(v0 + 96);
  uint64_t v4 = *(void *)(v0 + 104);
  uint64_t v6 = *(void *)(v0 + 64);
  uint64_t v5 = *(void *)(v0 + 72);
  swift_bridgeObjectRelease(*(void *)(v0 + 152));

  swift_task_dealloc(v4);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002466C()
{
  uint64_t v1 = *(void *)(v0 + 168);
  static LoggedObject.logger.getter(*(void *)(v0 + 112));
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void *)(v0 + 168);
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    os_log_type_t v7 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v6 = 138543362;
    swift_errorRetain(v5);
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(void *)(v0 + 24) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v6 + 4);
    *os_log_type_t v7 = v8;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Unable to ensure that the zones exists: %{public}@", v6, 0xCu);
    uint64_t v9 = sub_10000D228(&qword_10007EE38);
    swift_arrayDestroy(v7, 1LL, v9);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  else
  {
    uint64_t v10 = *(void *)(v0 + 168);
    swift_errorRelease(v10);
    swift_errorRelease(v10);
  }

  uint64_t v11 = v3;
  uint64_t v13 = *(void **)(v0 + 136);
  uint64_t v12 = *(void **)(v0 + 144);
  unint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 128);
  uint64_t v16 = *(void *)(v0 + 96);
  uint64_t v15 = *(void *)(v0 + 104);
  uint64_t v18 = *(void *)(v0 + 72);
  uint64_t v17 = *(void *)(v0 + 80);
  uint64_t v19 = *(void *)(v0 + 64);

  uint64_t v20 = v14(v16, v17);
  swift_willThrow(v20);

  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100024850(uint64_t a1)
{
  v1[4] = a1;
  uint64_t v2 = type metadata accessor for UUID(0LL);
  v1[5] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[6] = v3;
  v1[7] = swift_task_alloc((*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for Logger(0LL);
  v1[8] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v1[9] = v5;
  unint64_t v6 = (*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[10] = swift_task_alloc(v6);
  v1[11] = swift_task_alloc(v6);
  return swift_task_switch(sub_1000248E8, 0LL, 0LL);
}

uint64_t sub_1000248E8()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v5 = type metadata accessor for XPCServer();
  *(void *)(v0 + 96) = v5;
  *(void *)(v0 + 104) = sub_10000D1E8( (unint64_t *)&qword_10007F128,  (uint64_t (*)(uint64_t))type metadata accessor for XPCServer,  (uint64_t)&unk_100060A78);
  static LoggedObject.logger.getter(v5);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  os_log_type_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.info.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = *(void *)(v0 + 56);
    uint64_t v39 = *(void *)(v0 + 64);
    uint64_t v40 = *(void *)(v0 + 88);
    uint64_t v10 = *(void *)(v0 + 40);
    uint64_t v37 = *(void *)(v0 + 48);
    uint64_t v38 = *(void *)(v0 + 72);
    uint64_t v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v12 = (void *)swift_slowAlloc(32LL, -1LL);
    v41[0] = v12;
    *(_DWORD *)uint64_t v11 = 136315138;
    uint64_t v13 = sub_10000D1E8( &qword_10007F498,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v14 = v9;
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter(v10, v13);
    unint64_t v17 = v16;
    *(void *)(v0 + 24) = sub_100046274(v15, v16, (uint64_t *)v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v11 + 4);
    swift_bridgeObjectRelease(v17);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v14, v10);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Ensuring zone exists for home: %s", v11, 0xCu);
    swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);

    uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v38 + 8);
    v18(v40, v39);
  }

  else
  {
    uint64_t v19 = *(void *)(v0 + 88);
    uint64_t v20 = *(void *)(v0 + 64);
    uint64_t v21 = *(void *)(v0 + 72);
    (*(void (**)(void, void))(*(void *)(v0 + 48) + 8LL))(*(void *)(v0 + 56), *(void *)(v0 + 40));

    uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
    v18(v19, v20);
  }

  *(void *)(v0 + 112) = v18;
  uint64_t v22 = *(void *)(v0 + 32);
  uint64_t v23 = type metadata accessor for Configuration(0LL);
  id v24 = (void *)static Configuration.cloudKitContainer.getter(v23);
  id v25 = [v24 privateCloudDatabase];
  *(void *)(v0 + 120) = v25;

  id v26 = objc_allocWithZone(&OBJC_CLASS___CKOperationGroup);
  id v27 = v25;
  id v28 = [v26 init];
  *(void *)(v0 + 128) = v28;
  v41[0] = v28;
  sub_10004B008(v41, v27, -1LL);

  uint64_t v29 = (void *)static EventRecord.recordZoneID(forHomeIdentifier:)(v22);
  *(void *)(v0 + 136) = v29;
  uint64_t v30 = sub_10000D228(&qword_10007EEE0);
  uint64_t v31 = swift_allocObject(v30, 40LL, 7LL);
  *(_OWORD *)(v31 + 16) = xmmword_100060330;
  *(void *)(v31 + 32) = v29;
  v41[0] = (void *)v31;
  specialized Array._endMutation()(v31);
  int v32 = v41[0];
  *(void **)(v0 + 144) = v41[0];
  uint64_t v33 = dword_1000803B4;
  id v34 = v29;
  char v35 = (void *)swift_task_alloc(v33);
  *(void *)(v0 + 152) = v35;
  *char v35 = v0;
  v35[1] = sub_100024C24;
  return sub_10004AD38((uint64_t)v32, (uint64_t)v27, (uint64_t)v28);
}

uint64_t sub_100024C24()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 152);
  *(void *)(*v1 + 160) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_100024D00;
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v2 + 144));
    uint64_t v4 = sub_100024C90;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_100024C90()
{
  uint64_t v1 = *(void **)(v0 + 128);
  uint64_t v2 = *(void **)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v4 = *(void *)(v0 + 88);
  uint64_t v5 = *(void *)(v0 + 56);

  swift_task_dealloc(v4);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100024D00()
{
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v2 = *(void *)(v0 + 96);
  swift_bridgeObjectRelease(*(void *)(v0 + 144));
  static LoggedObject.logger.getter(v2);
  swift_errorRetain(v1);
  uint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(void *)(v0 + 160);
    os_log_type_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    os_log_type_t v8 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)os_log_type_t v7 = 138543362;
    swift_errorRetain(v6);
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError(v6);
    *(void *)(v0 + 16) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v7 + 4);
    *os_log_type_t v8 = v9;
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Unable to ensure that the zone exists: %{public}@", v7, 0xCu);
    uint64_t v10 = sub_10000D228(&qword_10007EE38);
    swift_arrayDestroy(v8, 1LL, v10);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {
    uint64_t v11 = *(void *)(v0 + 160);
    swift_errorRelease(v11);
    swift_errorRelease(v11);
  }

  uint64_t v12 = v4;
  uint64_t v14 = *(void **)(v0 + 128);
  uint64_t v13 = *(void **)(v0 + 136);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 112);
  unint64_t v16 = *(void **)(v0 + 120);
  uint64_t v18 = *(void *)(v0 + 80);
  uint64_t v17 = *(void *)(v0 + 88);
  uint64_t v20 = *(void *)(v0 + 56);
  uint64_t v19 = *(void *)(v0 + 64);

  uint64_t v21 = v15(v18, v19);
  swift_willThrow(v21);

  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100024EEC(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

uint64_t sub_100024EFC(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 3u) {
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

uint64_t destroy for HMVCommandHandlerError(uint64_t a1)
{
  return sub_100024F24(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_100024F24(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 3u) {
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

uint64_t _s11homeeventsd22HMVCommandHandlerErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(_BYTE *)(a2 + 16);
  sub_100024EFC(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for HMVCommandHandlerError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(_BYTE *)(a2 + 16);
  sub_100024EFC(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_100024F24(v6, v7, v8);
  return a1;
}

__n128 initializeWithTake for HMVCommandHandlerError(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for HMVCommandHandlerError(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_100024F24(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for HMVCommandHandlerError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for HMVCommandHandlerError( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 253;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 17) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 16) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_1000250BC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_1000250C4(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for HMVCommandHandlerError()
{
  return &type metadata for HMVCommandHandlerError;
}

ValueMetadata *type metadata accessor for HMVCommandHandlers()
{
  return &type metadata for HMVCommandHandlers;
}

Swift::Int sub_1000250EC(char a1)
{
  unint64_t v2 = 0xD000000000000013LL;
  Hasher.init(_seed:)(v5);
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v3 = 0x80000001000622E0LL;
    }
    else {
      unint64_t v3 = 0x8000000100062300LL;
    }
  }

  else
  {
    unint64_t v2 = 0xD000000000000012LL;
    unint64_t v3 = 0x80000001000622C0LL;
  }

  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_10002518C(uint64_t a1, char a2)
{
  unint64_t v3 = 0xD000000000000013LL;
  if (a2)
  {
    if (a2 == 1) {
      unint64_t v4 = 0x80000001000622E0LL;
    }
    else {
      unint64_t v4 = 0x8000000100062300LL;
    }
  }

  else
  {
    unint64_t v3 = 0xD000000000000012LL;
    unint64_t v4 = 0x80000001000622C0LL;
  }

  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v4);
}

Swift::Int sub_100025204(uint64_t a1, char a2)
{
  unint64_t v3 = 0xD000000000000013LL;
  Hasher.init(_seed:)(v6);
  if (a2)
  {
    if (a2 == 1) {
      unint64_t v4 = 0x80000001000622E0LL;
    }
    else {
      unint64_t v4 = 0x8000000100062300LL;
    }
  }

  else
  {
    unint64_t v3 = 0xD000000000000012LL;
    unint64_t v4 = 0x80000001000622C0LL;
  }

  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_1000252A0()
{
  uint64_t ObjectType = swift_getObjectType(v0);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MetricsManager.submitLogEvent(_:error:)(v0, 0LL);
  sub_100026CD0();
  static LoggedObject.logger.getter(ObjectType);
  id v6 = v0;
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v21 = v3;
    uint64_t v22 = v2;
    uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v24 = v10;
    *(_DWORD *)uint64_t v9 = 136446210;
    unint64_t v11 = sub_100025904();
    uint64_t v12 = swift_bridgeObjectRetain(v11);
    uint64_t v13 = sub_100025FAC(v12);
    swift_bridgeObjectRelease(v11);
    uint64_t v23 = (uint64_t)v13;
    sub_1000106F8(&v23);
    swift_bridgeObjectRelease(v11);
    uint64_t v14 = v23;
    uint64_t v15 = sub_10000D228((uint64_t *)&unk_10007F190);
    uint64_t v16 = Array.description.getter(v14, v15);
    unint64_t v18 = v17;
    swift_release(v14);
    uint64_t v23 = sub_100046274(v16, v18, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v9 + 4);

    swift_bridgeObjectRelease(v18);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Submitted EventUploadSubtaskLogEvent: %{public}s", v9, 0xCu);
    swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);

    return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v5, v22);
  }

  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }

uint64_t sub_100025500(uint64_t a1)
{
  uint64_t ObjectType = swift_getObjectType(v1);
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MetricsManager.submitLogEvent(_:error:)(v1, a1);
  sub_100026CD0();
  static LoggedObject.logger.getter(ObjectType);
  id v8 = v1;
  swift_errorRetain(a1);
  id v9 = v8;
  uint64_t v10 = swift_errorRetain(a1);
  unint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v30 = v5;
    uint64_t v31 = v4;
    uint64_t v13 = swift_slowAlloc(22LL, -1LL);
    id v28 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v29 = swift_slowAlloc(32LL, -1LL);
    uint64_t v33 = v29;
    *(_DWORD *)uint64_t v13 = 136446466;
    unint64_t v14 = sub_100025904();
    uint64_t v15 = swift_bridgeObjectRetain(v14);
    uint64_t v16 = sub_100025FAC(v15);
    swift_bridgeObjectRelease(v14);
    uint64_t v32 = (uint64_t)v16;
    sub_1000106F8(&v32);
    swift_bridgeObjectRelease(v14);
    uint64_t v17 = v32;
    uint64_t v18 = sub_10000D228((uint64_t *)&unk_10007F190);
    uint64_t v19 = Array.description.getter(v17, v18);
    unint64_t v21 = v20;
    swift_release(v17);
    uint64_t v32 = sub_100046274(v19, v21, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v13 + 4);

    swift_bridgeObjectRelease(v21);
    *(_WORD *)(v13 + 12) = 2114;
    swift_errorRetain(a1);
    uint64_t v22 = _swift_stdlib_bridgeErrorToNSError(a1);
    uint64_t v32 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v13 + 14);
    uint64_t v23 = v28;
    *id v28 = v22;
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl( (void *)&_mh_execute_header,  v11,  v12,  "Submitted EventUploadSubtaskLogEvent: %{public}s, with error: %{public}@",  (uint8_t *)v13,  0x16u);
    uint64_t v24 = sub_10000D228(&qword_10007EE38);
    swift_arrayDestroy(v23, 1LL, v24);
    swift_slowDealloc(v23, -1LL, -1LL);
    uint64_t v25 = v29;
    swift_arrayDestroy(v29, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1LL, -1LL);
    swift_slowDealloc(v13, -1LL, -1LL);

    return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v7, v31);
  }

  else
  {

    swift_errorRelease(a1);
    swift_errorRelease(a1);

    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

unint64_t sub_100025824(char a1)
{
  unint64_t result = 0xD000000000000013LL;
  if (!a1) {
    return 0xD000000000000012LL;
  }
  return result;
}

uint64_t sub_10002587C(char *a1, unsigned __int8 *a2)
{
  return sub_100058D44(*a1, *a2);
}

Swift::Int sub_100025888()
{
  return sub_1000250EC(*v0);
}

uint64_t sub_100025890(uint64_t a1)
{
  return sub_10002518C(a1, *v1);
}

Swift::Int sub_100025898(uint64_t a1)
{
  return sub_100025204(a1, *v1);
}

unint64_t sub_1000258A0@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_100026C88(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_1000258CC@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_100025824(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_1000258F4(void *a1@<X8>)
{
  *a1 = &off_100075630;
}

unint64_t sub_100025904()
{
  uint64_t v1 = sub_10000D228((uint64_t *)&unk_10007F1A0);
  uint64_t inited = swift_initStackObject(v1, v25);
  *(_OWORD *)(inited + 16) = xmmword_1000613F0;
  *(void *)(inited + 32) = 0x546B736174627573LL;
  *(void *)(inited + 40) = 0xEB00000000657079LL;
  int v3 = v0[OBJC_IVAR____TtC11homeeventsd26EventUploadSubtaskLogEvent_subtaskType];
  unint64_t v4 = 0x8000000100062300LL;
  if (v3 == 1) {
    unint64_t v4 = 0x80000001000622E0LL;
  }
  if (v0[OBJC_IVAR____TtC11homeeventsd26EventUploadSubtaskLogEvent_subtaskType]) {
    unint64_t v5 = v4;
  }
  else {
    unint64_t v5 = 0x80000001000622C0LL;
  }
  uint64_t v6 = inited;
  id v7 = objc_allocWithZone(&OBJC_CLASS___NSString);
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v5);
  id v9 = [v7 initWithString:v8];

  *(void *)(v6 + 48) = v9;
  *(void *)(v6 + sub_1000154A8(*(void *)(v0 + 152) + OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_database, v0 + 56) = 0x726F6365526D756ELL;
  *(void *)(v6 + 64) = 0xEA00000000007364LL;
  *(void *)(v6 + 72) = [objc_allocWithZone(NSNumber) initWithInteger:*(void *)&v0[OBJC_IVAR____TtC11homeeventsd26EventUploadSubtaskLogEvent_numRecords]];
  strcpy((char *)(v6 + 80), "numLocalWrites");
  *(_BYTE *)(v6 + 9_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 5) = -18;
  if (v3)
  {
    if (v3 == 1) {
      unint64_t v10 = 0x80000001000622E0LL;
    }
    else {
      unint64_t v10 = 0x8000000100062300LL;
    }
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)( 0xD000000000000013LL,  v10,  0xD000000000000012LL,  0x80000001000622C0LL,  0LL);
    swift_bridgeObjectRelease(v10);
    uint64_t v12 = v11 & 1;
  }

  else
  {
    swift_bridgeObjectRelease(0x80000001000622C0LL);
    uint64_t v12 = 1LL;
  }

  *(void *)(v6 + 96) = [objc_allocWithZone(NSNumber) initWithInteger:v12];
  *(void *)(v6 + 104) = 0x64756F6C436D756ELL;
  *(void *)(v6 + 112) = 0xEF7364616F6C7055LL;
  if (v3)
  {
    unint64_t v13 = 0x80000001000622E0LL;
    if (v3 == 1
      || (unint64_t v13 = 0x8000000100062300LL, v14 = 0xD000000000000013LL, 0x8000000100062300LL == 0x80000001000622E0LL))
    {
      swift_bridgeObjectRelease(v13);
      uint64_t v15 = 1LL;
      goto LABEL_18;
    }
  }

  else
  {
    unint64_t v13 = 0x80000001000622C0LL;
    unint64_t v14 = 0xD000000000000012LL;
  }

  char v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v13, 0xD000000000000013LL, 0x80000001000622E0LL, 0LL);
  swift_bridgeObjectRelease(v13);
  uint64_t v15 = v16 & 1;
LABEL_18:
  *(void *)(v6 + 120) = [objc_allocWithZone(NSNumber) initWithInteger:v15];
  *(void *)(v6 + 128) = 0x6C61636F4C6D756ELL;
  *(void *)(v6 + 136) = 0xEF736574656C6544LL;
  if (v3)
  {
    unint64_t v17 = 0x8000000100062300LL;
    if (v3 != 1
      || (v17 = 0x80000001000622E0LL, unint64_t v18 = 0xD000000000000013LL, 0x80000001000622E0LL == 0x8000000100062300LL))
    {
      swift_bridgeObjectRelease(v17);
      uint64_t v19 = 1LL;
      goto LABEL_24;
    }
  }

  else
  {
    unint64_t v17 = 0x80000001000622C0LL;
    unint64_t v18 = 0xD000000000000012LL;
  }

  char v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v17, 0xD000000000000013LL, 0x8000000100062300LL, 0LL);
  swift_bridgeObjectRelease(v17);
  uint64_t v19 = v20 & 1;
LABEL_24:
  *(void *)(v6 + 144) = [objc_allocWithZone(NSNumber) initWithInteger:v19];
  *(void *)(v6 + 152) = 0xD000000000000014LL;
  *(void *)(v6 + 160) = 0x8000000100062C00LL;
  *(void *)(v6 + 168) = [objc_allocWithZone(NSNumber) initWithBool:v0[OBJC_IVAR____TtC11homeeventsd26EventUploadSubtaskLogEvent_attributedToFakeData]];
  unint64_t v21 = sub_100058A80(v6);
  if ((uint64_t)[v0 durationMilliseconds] >= 1)
  {
    id v22 = objc_msgSend( objc_allocWithZone(NSNumber),  "initWithInteger:",  objc_msgSend(v0, "durationMilliseconds"));
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v21);
    sub_10005C644((uint64_t)v22, 0xD000000000000014LL, 0x80000001000635A0LL, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  return v21;
}

uint64_t type metadata accessor for EventUploadSubtaskLogEvent()
{
  return objc_opt_self(&OBJC_CLASS____TtC11homeeventsd26EventUploadSubtaskLogEvent);
}

uint64_t storeEnumTagSinglePayload for EventUploadSubtask(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_100025E94 + 4 * byte_100061405[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100025EC8 + 4 * byte_100061400[v4]))();
}

uint64_t sub_100025EC8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100025ED0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100025ED8LL);
  }
  return result;
}

uint64_t sub_100025EE4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100025EECLL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_100025EF0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100025EF8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EventUploadSubtask()
{
  return &type metadata for EventUploadSubtask;
}

unint64_t sub_100025F18()
{
  unint64_t result = qword_10007F8A8;
  if (!qword_10007F8A8)
  {
    uint64_t v1 = sub_100004D58(&qword_10007F8B0);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10007F8A8);
  }

  return result;
}

unint64_t sub_100025F68()
{
  unint64_t result = qword_10007F8B8;
  if (!qword_10007F8B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100061504, &type metadata for EventUploadSubtask);
    atomic_store(result, (unint64_t *)&qword_10007F8B8);
  }

  return result;
}

void *sub_100025FAC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = sub_10000D228(&qword_10007F8D0);
  uint64_t v4 = (void *)swift_allocObject(v3, 24 * v1 + 32, 7LL);
  size_t v5 = j__malloc_size(v4);
  v4[2] = v1;
  v4[3] = 2 * ((uint64_t)(v5 - 32) / 24);
  uint64_t v6 = sub_100026A64(&v9, v4 + 4, v1, a1);
  uint64_t v7 = v9;
  swift_bridgeObjectRetain(a1);
  sub_100026D14(v7);
  if (v6 != (void *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }

  return v4;
}

uint64_t sub_1000260A0(char a1, int64_t a2, char a3, void *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_10000D228(&qword_10007F8D0);
    char v11 = (void *)swift_allocObject(v10, 24 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
  }

  else
  {
    char v11 = _swiftEmptyArrayStorage;
  }

  unint64_t v13 = (unint64_t)(v11 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 24 * v8) {
      memmove(v11 + 4, a4 + 4, 24 * v8);
    }
    a4[2] = 0LL;
    goto LABEL_28;
  }

  if (v14 >= v13 + 24 * v8 || v13 >= v14 + 24 * v8)
  {
    sub_10000D228((uint64_t *)&unk_10007F190);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }

LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

uint64_t sub_100026244(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_10000D228(&qword_10007F908);
    char v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 1;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 5);
  }

  else
  {
    char v11 = (char *)_swiftEmptyArrayStorage;
  }

  unint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8]) {
      memmove(v14, v15, 32 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[32 * v8] || v14 >= &v15[32 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_1000263B0(char a1, int64_t a2, char a3, void *a4)
{
  return sub_1000266BC( a1,  a2,  a3,  a4,  &qword_10007F900,  (uint64_t (*)(void))&type metadata accessor for EventRecord.DecodedEvent);
}

uint64_t sub_1000263C4(char a1, int64_t a2, char a3, void *a4)
{
  return sub_1000266BC( a1,  a2,  a3,  a4,  (uint64_t *)&unk_10007F8E0,  (uint64_t (*)(void))&type metadata accessor for UUID);
}

uint64_t sub_1000263D8(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_10000D228(&qword_10007EF18);
    char v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    char v11 = (char *)_swiftEmptyArrayStorage;
  }

  unint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_100026540(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_10000D228((uint64_t *)&unk_10007F8F0);
    char v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    char v11 = (char *)_swiftEmptyArrayStorage;
  }

  unint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_1000266A8(char a1, int64_t a2, char a3, void *a4)
{
  return sub_1000266BC(a1, a2, a3, a4, &qword_10007F5A0, type metadata accessor for PendingEventData);
}

uint64_t sub_1000266BC( char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if ((a3 & 1) != 0)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000LL < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }

      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v10 = a2;
  }

  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    unint64_t v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v13 = sub_10000D228(a5);
  uint64_t v14 = *(void *)(a6(0LL) - 8);
  uint64_t v15 = *(void *)(v14 + 72);
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = (v16 + 32) & ~v16;
  unint64_t v18 = (void *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  size_t v19 = j__malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }

  if (v19 - v17 == 0x8000000000000000LL && v15 == -1) {
    goto LABEL_34;
  }
  void v18[2] = v11;
  void v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  uint64_t v21 = a6(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  unint64_t v23 = (*(unsigned __int8 *)(v22 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  uint64_t v24 = (char *)v18 + v23;
  uint64_t v25 = (char *)a4 + v23;
  if ((a1 & 1) != 0)
  {
    if (v18 < a4 || v24 >= &v25[*(void *)(v22 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v24, v25, v11, v21);
    }

    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }

    a4[2] = 0LL;
    goto LABEL_32;
  }

  uint64_t v26 = *(void *)(v22 + 72) * v11;
  uint64_t v27 = &v24[v26];
  unint64_t v28 = (unint64_t)&v25[v26];
  if (v25 >= v27 || (unint64_t)v24 >= v28)
  {
    swift_arrayInitWithCopy(v24);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v18;
  }

LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

char *sub_10002689C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_10000D228(&qword_10007F8D8);
    uint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    uint64_t v11 = (char *)&_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v14, v15, 16 * v8);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_100026994(void **a1, const void **a2, void *a3)
{
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -24)
  {
    char v7 = 2;
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v7,  1046LL,  0);
    __break(1u);
  }

  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v6 = v4 / 24;
    if (result != v3 || result >= &v3[24 * v6]) {
      return (char *)memmove(result, v3, 24 * v6);
    }
  }

  return result;
}

char *sub_100026A50(uint64_t a1)
{
  return sub_10002689C(0LL, *(void *)(a1 + 16), 0, (char *)a1);
}

void *sub_100026A64(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  char v5 = result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0LL;
    uint64_t v10 = 0LL;
LABEL_39:
    void *v5 = a4;
    v5[1] = v6;
    uint64_t v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (void *)v10;
  }

  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0LL;
    goto LABEL_39;
  }

  if (a3 < 0) {
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  uint64_t v24 = -1LL << *(_BYTE *)(a4 + 32);
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    char v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    uint64_t v22 = *(void **)(*(void *)(a4 + 56) + 8 * v16);
    void *v11 = *v20;
    v11[1] = v21;
    v11[2] = v22;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      id v23 = v22;
      goto LABEL_38;
    }

    v11 += 3;
    swift_bridgeObjectRetain(v21);
    uint64_t result = v22;
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL)) {
      break;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18)
    {
      v12 += 2LL;
      if (v17 + 1 >= v14)
      {
        unint64_t v9 = 0LL;
        int64_t v12 = v17;
      }

      else
      {
        unint64_t v18 = *(void *)(v6 + 8 * v12);
        if (v18) {
          goto LABEL_14;
        }
        int64_t v19 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_33;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v19);
        if (v18)
        {
LABEL_17:
          int64_t v17 = v19;
          goto LABEL_18;
        }

        int64_t v12 = v17 + 3;
        if (v17 + 3 < v14)
        {
          unint64_t v18 = *(void *)(v6 + 8 * v12);
          if (v18)
          {
LABEL_14:
            int64_t v17 = v12;
            goto LABEL_18;
          }

          int64_t v19 = v17 + 4;
          if (v17 + 4 >= v14)
          {
LABEL_33:
            unint64_t v9 = 0LL;
            goto LABEL_37;
          }

          unint64_t v18 = *(void *)(v6 + 8 * v19);
          if (!v18)
          {
            while (1)
            {
              int64_t v17 = v19 + 1;
              if (__OFADD__(v19, 1LL)) {
                goto LABEL_42;
              }
              if (v17 >= v14)
              {
                unint64_t v9 = 0LL;
                int64_t v12 = v14 - 1;
                goto LABEL_37;
              }

              unint64_t v18 = *(void *)(v6 + 8 * v17);
              ++v19;
              if (v18) {
                goto LABEL_18;
              }
            }
          }

          goto LABEL_17;
        }

        unint64_t v9 = 0LL;
        int64_t v12 = v17 + 2;
      }

LABEL_37:
      uint64_t v10 = v13;
LABEL_38:
      uint64_t v7 = v24;
      goto LABEL_39;
    }

LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }

  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

    unint64_t v16 = (v21 - 1) & v21;
    uint64_t v53 = v22;
  }

  id v23 = v10 + 4;
  if (v10 + 4 >= v43) {
    return (uint64_t)v9;
  }
  uint64_t v21 = *(void *)(v42 + 8 * v23);
  if (v21)
  {
    uint64_t v22 = v10 + 4;
    goto LABEL_18;
  }

  while (1)
  {
    uint64_t v22 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v22 >= v43) {
      return (uint64_t)v9;
    }
    uint64_t v21 = *(void *)(v42 + 8 * v22);
    ++v23;
    if (v21) {
      goto LABEL_18;
    }
  }

uint64_t sub_100026C74(void *a1)
{
  return sub_1000260A0(0, a1[2], 0, a1);
}

unint64_t sub_100026C88(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000755C8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3) {
    return 3LL;
  }
  else {
    return v3;
  }
}

unint64_t sub_100026CD0()
{
  unint64_t result = qword_10007F8C0;
  if (!qword_10007F8C0)
  {
    uint64_t v1 = type metadata accessor for EventUploadSubtaskLogEvent();
    unint64_t result = swift_getWitnessTable(&unk_10006152C, v1);
    atomic_store(result, (unint64_t *)&qword_10007F8C0);
  }

  return result;
}

uint64_t sub_100026D14(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100026D1C(uint64_t a1, uint64_t a2)
{
  v2[9] = a1;
  v2[10] = a2;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  v2[11] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[12] = v4;
  v2[13] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100026D7C, 0LL, 0LL);
}

uint64_t sub_100026D7C()
{
  uint64_t v1 = (void *)v0[9];
  uint64_t v2 = v0[10];
  if (v2)
  {
    sub_10000D408(v1, v1[3]);
    uint64_t v3 = swift_bridgeObjectRetain(v2);
    uint64_t v4 = sub_1000162F8(v3);
    v0[14] = v4;
    swift_bridgeObjectRelease(v2);
    char v5 = (void *)swift_task_alloc(dword_1000805C4);
    v0[15] = v5;
    void *v5 = v0;
    v5[1] = sub_100026E40;
    return sub_100056FB4(v4);
  }

  else
  {
    sub_10000D408(v1, v1[3]);
    uint64_t v7 = (void *)swift_task_alloc(dword_10008059C);
    v0[17] = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_100027004;
    return sub_100052BA4();
  }

uint64_t sub_100026E40(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[2] = v2;
  v3[3] = a1;
  v3[4] = v1;
  uint64_t v4 = v3[15];
  v3[16] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    char v5 = sub_100026FC8;
  }

  else
  {
    swift_bridgeObjectRelease(v3[14]);
    char v5 = sub_100026EB4;
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_100026EB4()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = type metadata accessor for XPCServer();
  sub_10000E6BC();
  uint64_t v3 = static LoggedObject.logger.getter(v2);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v6 = 134217984;
    *(void *)(v0 + 64) = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v6 + 4);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Done clearing %ld event(s) from the local database", v6, 0xCu);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  uint64_t v7 = *(void *)(v0 + 104);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 96) + 8LL))(v7, *(void *)(v0 + 88));
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100026FC8()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100027004(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[5] = v2;
  v3[6] = a1;
  v3[7] = v1;
  uint64_t v4 = (void *)*v2;
  swift_task_dealloc(v3[17]);
  if (!v1) {
    return swift_task_switch(sub_10002707C, 0LL, 0LL);
  }
  swift_task_dealloc(v3[13]);
  return ((uint64_t (*)(void))v4[1])();
}

uint64_t sub_10002707C()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = type metadata accessor for XPCServer();
  sub_10000E6BC();
  uint64_t v3 = static LoggedObject.logger.getter(v2);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v6 = 134217984;
    *(void *)(v0 + 64) = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v6 + 4);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Done clearing %ld event(s) from the local database", v6, 0xCu);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  uint64_t v7 = *(void *)(v0 + 104);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 96) + 8LL))(v7, *(void *)(v0 + 88));
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_100027190()
{
  uint64_t v0 = type metadata accessor for CocoaError.Code(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v4 = [(id)objc_opt_self(NSFileManager) defaultManager];
  URL._bridgeToObjectiveC()(v5);
  uint64_t v7 = v6;
  id v17 = 0LL;
  unsigned int v8 = [v4 removeItemAtURL:v6 error:&v17];

  id v9 = v17;
  if (v8) {
    return v17;
  }
  id v11 = v17;
  uint64_t v12 = _convertNSErrorToError(_:)(v9);

  swift_willThrow(v13);
  uint64_t v14 = swift_errorRetain(v12);
  static CocoaError.fileNoSuchFile.getter(v14);
  unint64_t v15 = sub_100027310();
  char v16 = static _ErrorCodeProtocol.~= infix(_:_:)(v3, v12, v0, v15);
  swift_errorRelease(v12);
  id result = (id)(*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if ((v16 & 1) != 0) {
    return (id)swift_errorRelease(v12);
  }
  return result;
}

unint64_t sub_100027310()
{
  unint64_t result = qword_10007EE80;
  if (!qword_10007EE80)
  {
    uint64_t v1 = type metadata accessor for CocoaError.Code(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for CocoaError.Code, v1);
    atomic_store(result, (unint64_t *)&qword_10007EE80);
  }

  return result;
}

uint64_t sub_100027358(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL(0LL);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_100027394(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
}

uint64_t sub_1000273C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_10002740C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_100027450(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_100027494(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_1000274D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000274E4);
}

uint64_t sub_1000274E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(a1, a2, v4);
}

uint64_t sub_100027520(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10002752C);
}

uint64_t sub_10002752C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for FileBackedBooleanFlag(uint64_t a1)
{
  uint64_t result = qword_10007F980;
  if (!qword_10007F980) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FileBackedBooleanFlag);
  }
  return result;
}

uint64_t sub_1000275A8(uint64_t a1)
{
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 1LL, &v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_100027610(void (*a1)(uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  char v20 = a1;
  uint64_t v21 = a2;
  uint64_t v19 = type metadata accessor for EventRecord.DecodedEvent(0LL);
  uint64_t v8 = *(void *)(v19 - 8);
  uint64_t result = __chkstk_darwin(v19);
  id v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = a3;
  uint64_t v12 = a4 - a3;
  if (__OFSUB__(a4, a3))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  uint64_t v13 = _swiftEmptyArrayStorage;
  if (!v12) {
    return (uint64_t)v13;
  }
  uint64_t v24 = _swiftEmptyArrayStorage;
  uint64_t result = sub_10002CCAC(0, v12 & ~(v12 >> 63), 0);
  if ((v12 & 0x8000000000000000LL) == 0)
  {
    uint64_t v13 = v24;
    uint64_t v14 = v22;
    if (a4 <= v22) {
      uint64_t v15 = v22;
    }
    else {
      uint64_t v15 = a4;
    }
    uint64_t v18 = v15;
    while (a4 != v14)
    {
      uint64_t v23 = v14;
      v20(&v23);
      if (v5)
      {
        swift_release(v13);
        return (uint64_t)v13;
      }

      uint64_t v5 = 0LL;
      uint64_t v24 = v13;
      unint64_t v17 = v13[2];
      unint64_t v16 = v13[3];
      if (v17 >= v16 >> 1)
      {
        sub_10002CCAC(v16 > 1, v17 + 1, 1);
        uint64_t v13 = v24;
      }

      _OWORD v13[2] = v17 + 1;
      uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v8 + 32))( (unint64_t)v13 + ((*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
               + *(void *)(v8 + 72) * v17,
                 v11,
                 v19);
      if (a4 < v22) {
        goto LABEL_19;
      }
      if (v18 == v14) {
        goto LABEL_20;
      }
      if (a4 == ++v14) {
        return (uint64_t)v13;
      }
    }

    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

LABEL_22:
  __break(1u);
  return result;
}

    uint64_t v5 = (v9 - 1) & v9;
    uint64_t v7 = __clz(__rbit64(v9)) + (v1 << 6);
LABEL_23:
    id v11 = *(void **)(*(void *)(v2 + 48) + 8 * v7);
    uint64_t v12 = *(void *)(v2 + 56) + 16 * v7;
    uint64_t v13 = *(void **)v12;
    uint64_t v14 = *(void *)(v0 + 136);
    if (*(_BYTE *)(v12 + 8) == 1)
    {
      sub_10002D350(v13, 1);
      sub_10002D350(v13, 1);
      uint64_t v31 = v11;
      static LoggedObject.logger.getter(v14);
      sub_10002D350(v13, 1);
      sub_10002D350(v13, 1);
      uint64_t v32 = v31;
      uint64_t v33 = (os_log_s *)Logger.logObject.getter(v32);
      id v34 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v33, v34))
      {
        char v35 = swift_slowAlloc(22LL, -1LL);
        uint64_t v36 = (void *)swift_slowAlloc(16LL, -1LL);
        *(_DWORD *)char v35 = 138543618;
        *(void *)(v35 + 4) = v32;
        uint64_t *v36 = v32;
        *(_WORD *)(v35 + 12) = 2114;
        swift_errorRetain(v13);
        uint64_t v37 = _swift_stdlib_bridgeErrorToNSError(v13);
        *(void *)(v35 + 14) = v37;
        v36[1] = v37;
        sub_10002D35C(v13, 1);
        sub_10002D35C(v13, 1);
        _os_log_impl( (void *)&_mh_execute_header,  v33,  v34,  "Failed to create zone %{public}@: %{public}@",  (uint8_t *)v35,  0x16u);
        uint64_t v38 = sub_10000D228(&qword_10007EE38);
        swift_arrayDestroy(v36, 2LL, v38);
        swift_slowDealloc(v36, -1LL, -1LL);
        swift_slowDealloc(v35, -1LL, -1LL);

        sub_10002D35C(v13, 1);
        sub_10002D35C(v13, 1);
      }

      else
      {
        sub_10002D35C(v13, 1);

        sub_10002D35C(v13, 1);
        sub_10002D35C(v13, 1);

        sub_10002D35C(v13, 1);
      }

      (*(void (**)(void, void))(v0 + 152))(*(void *)(v0 + 120), *(void *)(v0 + 88));
      goto LABEL_4;
    }

    sub_10002D350(v13, 0);
    uint64_t v15 = v11;
    static LoggedObject.logger.getter(v14);
    unint64_t v16 = (os_log_s *)v15;
    unint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    uint64_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc(12LL, -1LL);
      char v20 = (os_log_s **)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v19 = 138543362;
      *(void *)(v19 + 4) = v16;
      *char v20 = v16;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Successfully created zone %{public}@", (uint8_t *)v19, 0xCu);
      uint64_t v21 = sub_10000D228(&qword_10007EE38);
      swift_arrayDestroy(v20, 1LL, v21);
      swift_slowDealloc(v20, -1LL, -1LL);
      swift_slowDealloc(v19, -1LL, -1LL);
    }

    else
    {

      unint64_t v17 = v16;
    }

    uint64_t v22 = *(void *)(v0 + 112);
    uint64_t v23 = *(void *)(v0 + 88);

    v48(v22, v23);
    uint64_t v24 = -[os_log_s zoneName](v16, "zoneName");
    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    uint64_t v27 = v26;

    if (*(void *)(v49 + 16) && (unint64_t v28 = sub_10005A2E0(v25, v27), (v29 & 1) != 0))
    {
      uint64_t v30 = *(void *)(*(void *)(v49 + 56) + 8 * v28);
      swift_bridgeObjectRetain(v30);
      swift_bridgeObjectRelease(v27);
      sub_10002B5A4(v30);
    }

    else
    {
      swift_bridgeObjectRelease(v27);
    }

    sub_10002D35C(v13, 0);
  }

  uint64_t v10 = v8 + 3;
  if (v10 < v47)
  {
    id v9 = *(void *)(v46 + 8 * v10);
    if (!v9)
    {
      while (1)
      {
        uint64_t v1 = v10 + 1;
        if (__OFADD__(v10, 1LL)) {
          break;
        }
        if (v1 >= v47) {
          goto LABEL_34;
        }
        id v9 = *(void *)(v46 + 8 * v1);
        ++v10;
        if (v9) {
          goto LABEL_22;
        }
      }

    uint64_t v6 = (v13 - 1) & v13;
    uint64_t v78 = v14;
    id v11 = __clz(__rbit64(v13)) + (v14 << 6);
LABEL_23:
    unint64_t v17 = *(void *)(v0 + 48);
    unint64_t v16 = *(void *)(v0 + 56);
    uint64_t v18 = *(void **)(*(void *)(v76 + 48) + 8 * v11);
    uint64_t v19 = *(void *)(v76 + 56) + 16 * v11;
    char v20 = *(void **)v19;
    uint64_t v21 = *(_BYTE *)(v19 + 8);
    uint64_t v22 = v18;
    sub_10002D350(v20, v21);
    uint64_t v23 = [v22 recordName];
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    uint64_t v26 = v25;

    UUID.init(uuidString:)(v24, v26);
    swift_bridgeObjectRelease(v26);
    uint64_t v27 = v77;
    (*(void (**)(void, void, void))(v77 + 32))( *(void *)(v0 + 72),  *(void *)(v0 + 48),  *(void *)(v0 + 56));
    unint64_t v28 = *(void *)(v0 + 128);
    if ((v21 & 1) == 0)
    {
      static LoggedObject.logger.getter(*(void *)(v0 + 128));
      uint64_t v38 = (os_log_s *)v22;
      uint64_t v39 = (os_log_s *)Logger.logObject.getter(v38);
      uint64_t v40 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v39, v40))
      {
        uint64_t v41 = swift_slowAlloc(12LL, -1LL);
        uint64_t v42 = (os_log_s **)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)uint64_t v41 = 138543362;
        *(void *)(v41 + 4) = v38;
        os_log_s *v42 = v38;
        _os_log_impl( (void *)&_mh_execute_header,  v39,  v40,  "Retried upload for record %{public}@ succeeded",  (uint8_t *)v41,  0xCu);
        uint64_t v43 = sub_10000D228(&qword_10007EE38);
        swift_arrayDestroy(v42, 1LL, v43);
        swift_slowDealloc(v42, -1LL, -1LL);
        swift_slowDealloc(v41, -1LL, -1LL);
      }

      else
      {

        uint64_t v39 = v38;
      }

      uint64_t v44 = *(void (**)(uint64_t, uint64_t))(v0 + 144);
      uint64_t v45 = *(void *)(v0 + 112);
      uint64_t v47 = *(void *)(v0 + 72);
      char v46 = *(void *)(v0 + 80);
      uint64_t v48 = *(void **)(v0 + 40);

      v44(v45, v46);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v48);
      id v50 = (void *)*v48;
      uint64_t v79 = (void *)*v48;
      *uint64_t v48 = 0x8000000000000000LL;
      id v52 = sub_10005A3A8(v47);
      uint64_t v53 = v50[2];
      uint64_t v54 = (v51 & 1) == 0;
      uint64_t v55 = v53 + v54;
      if (__OFADD__(v53, v54))
      {
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
        goto LABEL_47;
      }

      uint64_t v56 = v51;
      if (v50[3] >= v55)
      {
        uint64_t v27 = v77;
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          if ((v51 & 1) == 0) {
            goto LABEL_39;
          }
        }

        else
        {
          sub_10005D024();
          id v50 = v79;
          if ((v56 & 1) == 0) {
            goto LABEL_39;
          }
        }
      }

      else
      {
        unint64_t v57 = *(void *)(v0 + 72);
        sub_10005AD60(v55, isUniquelyReferenced_nonNull_native);
        id v50 = v79;
        unint64_t v58 = sub_10005A3A8(v57);
        uint64_t v27 = v77;
        if ((v56 & 1) != (v59 & 1))
        {
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(*(void *)(v0 + 56));
          return;
        }

        id v52 = v58;
        if ((v56 & 1) == 0)
        {
LABEL_39:
          uint64_t v62 = *(void *)(v0 + 72);
          uint64_t v63 = *(void *)(v0 + 56);
          v50[(v52 >> 6) + 8] |= 1LL << v52;
          (*(void (**)(unint64_t, uint64_t, uint64_t))(v27 + 16))( v50[6] + *(void *)(v27 + 72) * v52,  v62,  v63);
          *(void *)(v50[7] + 8 * v52) = 0LL;
          os_log_type_t v64 = v50[2];
          uint64_t v65 = __OFADD__(v64, 1LL);
          uint64_t v66 = v64 + 1;
          if (v65) {
            goto LABEL_46;
          }
          v50[2] = v66;
          uint64_t v61 = 1LL;
          goto LABEL_41;
        }
      }

      uint64_t v60 = v50[7];
      uint64_t v61 = *(void *)(v60 + 8 * v52);
      *(void *)(v60 + 8 * v52) = 0LL;
LABEL_41:
      uint64_t v67 = *(uint64_t **)(v0 + 40);
      unint64_t v68 = *v67;
      *uint64_t v67 = (uint64_t)v50;
      swift_bridgeObjectRelease(v68);

      sub_10002D35C(v20, 0);
      sub_10002D340(v61);
      goto LABEL_6;
    }

    swift_errorRetain(v20);
    static LoggedObject.logger.getter(v28);
    uint64_t v29 = v22;
    sub_10002D350(v20, 1);
    uint64_t v30 = v29;
    uint64_t v31 = sub_10002D350(v20, 1);
    uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
    uint64_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      id v34 = swift_slowAlloc(22LL, -1LL);
      char v35 = (void *)swift_slowAlloc(16LL, -1LL);
      *(_DWORD *)id v34 = 138543618;
      *(void *)(v34 + 4) = v30;
      *char v35 = v30;

      *(_WORD *)(v34 + 12) = 2114;
      swift_errorRetain(v20);
      uint64_t v36 = _swift_stdlib_bridgeErrorToNSError(v20);
      *(void *)(v34 + 14) = v36;
      v35[1] = v36;
      sub_10002D35C(v20, 1);
      sub_10002D35C(v20, 1);
      _os_log_impl( (void *)&_mh_execute_header,  v32,  v33,  "Retried upload for record %{public}@ failed: %{public}@",  (uint8_t *)v34,  0x16u);
      uint64_t v37 = sub_10000D228(&qword_10007EE38);
      swift_arrayDestroy(v35, 2LL, v37);
      swift_slowDealloc(v35, -1LL, -1LL);
      swift_slowDealloc(v34, -1LL, -1LL);

      sub_10002D35C(v20, 1);
    }

    else
    {

      sub_10002D35C(v20, 1);
      sub_10002D35C(v20, 1);
      swift_errorRelease(v20);
    }

    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v0 + 144);
    uint64_t v8 = *(void *)(v0 + 104);
    id v9 = *(void *)(v0 + 80);
    sub_10002D35C(v20, 1);

    v7(v8, v9);
LABEL_6:
    (*(void (**)(void, void))(v27 + 8))(*(void *)(v0 + 72), *(void *)(v0 + 56));
    uint64_t v1 = v78;
  }

  uint64_t v15 = v1 + 4;
  if (v1 + 4 >= v75) {
    goto LABEL_42;
  }
  uint64_t v13 = *(void *)(v74 + 8 * v15);
  if (v13)
  {
    uint64_t v14 = v1 + 4;
    goto LABEL_22;
  }

  while (1)
  {
    uint64_t v14 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v14 >= v75) {
      goto LABEL_42;
    }
    uint64_t v13 = *(void *)(v74 + 8 * v14);
    ++v15;
    if (v13) {
      goto LABEL_22;
    }
  }

    uint64_t v15 = (v26 - 1) & v26;
  }

  uint64_t v27 = v25 + 4;
  if (v27 >= v40)
  {
LABEL_29:
    swift_release(v45);
    return v38;
  }

  uint64_t v26 = *(void *)(v39 + 8 * v27);
  if (v26)
  {
    unint64_t v17 = v27;
    goto LABEL_22;
  }

  while (1)
  {
    unint64_t v17 = v27 + 1;
    if (__OFADD__(v27, 1LL)) {
      break;
    }
    if (v17 >= v40) {
      goto LABEL_29;
    }
    uint64_t v26 = *(void *)(v39 + 8 * v17);
    ++v27;
    if (v26) {
      goto LABEL_22;
    }
  }

    uint64_t v13 = (v28 - 1) & v28;
    uint64_t v44 = v29;
    uint64_t v21 = __clz(__rbit64(v28)) + (v29 << 6);
LABEL_9:
    uint64_t v23 = *(void *)(v14 + 72) * v21;
    (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))(v17, *(void *)(v22 + 48) + v23, v16);
    uint64_t v24 = *(void *)(v15 + 72) * v21;
    uint64_t v25 = *(void *)(v22 + 56) + v24;
    uint64_t v26 = v40;
    (*(void (**)(char *, unint64_t, uint64_t))(v15 + 16))(v40, v25, v18);
    (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(*(void *)(v19 + 48) + v23, v17, v16);
    uint64_t result = (char *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v15 + 32))( *(void *)(v19 + 56) + v24,  v26,  v18);
    uint64_t v10 = v44;
  }

  uint64_t v30 = v27 + 2;
  if (v30 >= v35)
  {
LABEL_23:
    uint64_t result = (char *)swift_release(v42);
    uint64_t v31 = v33;
    uint64_t v32 = v43;
    goto LABEL_25;
  }

  unint64_t v28 = *(void *)(v34 + 8 * v30);
  if (v28)
  {
    uint64_t v29 = v30;
    goto LABEL_22;
  }

  while (1)
  {
    uint64_t v29 = v30 + 1;
    if (__OFADD__(v30, 1LL)) {
      break;
    }
    if (v29 >= v35) {
      goto LABEL_23;
    }
    unint64_t v28 = *(void *)(v34 + 8 * v29);
    ++v30;
    if (v28) {
      goto LABEL_22;
    }
  }

void *sub_1000277B8( void *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (v6)
  {
    uint64_t v18 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v6);
    uint64_t v9 = *(void *)(type metadata accessor for PendingEventData(0LL) - 8);
    uint64_t v10 = a3 + ((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    while (1)
    {
      uint64_t v12 = a1(&v17, v10, &v16);
      if (v4) {
        break;
      }
      uint64_t v4 = 0LL;
      uint64_t v13 = v17;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v12);
      uint64_t v14 = v18[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v14);
      uint64_t v15 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v13);
      specialized ContiguousArray._endMutation()(v15);
      v10 += v11;
      if (!--v6) {
        return v18;
      }
    }

    return (void *)swift_release(v18);
  }

  return result;
}

void *sub_1000278C4(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v2);
    uint64_t v4 = sub_10002D1CC(v1);
    int v6 = v5;
    uint64_t v7 = v1 + 64;
    uint64_t result = (void *)sub_10000D5E8(0LL, (unint64_t *)&qword_10007F490, &OBJC_CLASS___CKRecordZoneID_ptr);
    uint64_t v8 = 0LL;
    uint64_t v31 = v1 + 80;
    int v32 = v6;
    uint64_t v33 = v1;
    while ((v4 & 0x8000000000000000LL) == 0 && v4 < 1LL << *(_BYTE *)(v1 + 32))
    {
      unint64_t v10 = (unint64_t)v4 >> 6;
      if (*(_DWORD *)(v1 + 36) != v6) {
        goto LABEL_23;
      }
      uint64_t v34 = v8;
      uint64_t v11 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v4);
      uint64_t v12 = *v11;
      uint64_t v13 = (void *)v11[1];
      uint64_t v14 = *(void *)(*(void *)(v1 + 56) + 8 * v4);
      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(CKCurrentUserDefaultName);
      uint64_t v17 = v16;
      swift_bridgeObjectRetain_n(v13, 2LL);
      swift_bridgeObjectRetain(v14);
      v18._countAndFlagsBits = v12;
      v18._object = v13;
      v19._countAndFlagsBits = v15;
      v19._object = v17;
      Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v18, v19).super.isa;
      id v21 = [objc_allocWithZone(CKRecordZone) initWithZoneID:isa];
      swift_bridgeObjectRelease(v14);
      swift_bridgeObjectRelease(v13);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v22);
      uint64_t v23 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v23);
      uint64_t v24 = v23;
      uint64_t v1 = v33;
      uint64_t v25 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v24, v21);
      uint64_t result = (void *)specialized ContiguousArray._endMutation()(v25);
      int64_t v9 = 1LL << *(_BYTE *)(v33 + 32);
      if (v4 >= v9) {
        goto LABEL_24;
      }
      uint64_t v26 = *(void *)(v7 + 8 * v10);
      if ((v26 & (1LL << v4)) == 0) {
        goto LABEL_25;
      }
      int v6 = v32;
      if (*(_DWORD *)(v33 + 36) != v32) {
        goto LABEL_26;
      }
      unint64_t v27 = v26 & (-2LL << (v4 & 0x3F));
      if (v27)
      {
        int64_t v9 = __clz(__rbit64(v27)) | v4 & 0xFFFFFFFFFFFFFFC0LL;
      }

      else
      {
        unint64_t v28 = v10 + 1;
        unint64_t v29 = (unint64_t)(v9 + 63) >> 6;
        if (v10 + 1 < v29)
        {
          unint64_t v30 = *(void *)(v7 + 8 * v28);
          if (v30)
          {
LABEL_18:
            int64_t v9 = __clz(__rbit64(v30)) + (v28 << 6);
          }

          else
          {
            while (v29 - 2 != v10)
            {
              unint64_t v30 = *(void *)(v31 + 8 * v10++);
              if (v30)
              {
                unint64_t v28 = v10 + 1;
                goto LABEL_18;
              }
            }
          }
        }
      }

      uint64_t v8 = v34 + 1;
      uint64_t v4 = v9;
      if (v34 + 1 == v2) {
        return _swiftEmptyArrayStorage;
      }
    }

    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }

  return result;
}

void *sub_100027B50(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_10002CD20(0, v1, 0);
  uint64_t result = (void *)sub_10002D1CC(a1);
  uint64_t v5 = (uint64_t)result;
  uint64_t v6 = 0LL;
  uint64_t v7 = a1 + 64;
  int64_t v21 = v1;
  int v22 = v4;
  uint64_t v23 = a1 + 64;
  while ((v5 & 0x8000000000000000LL) == 0 && v5 < 1LL << *(_BYTE *)(a1 + 32))
  {
    unint64_t v10 = (unint64_t)v5 >> 6;
    if (*(_DWORD *)(a1 + 36) != v4) {
      goto LABEL_24;
    }
    uint64_t v11 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v5);
    uint64_t v12 = v11[1];
    uint64_t v24 = *v11;
    unint64_t v14 = _swiftEmptyArrayStorage[2];
    unint64_t v13 = _swiftEmptyArrayStorage[3];
    uint64_t result = (void *)swift_bridgeObjectRetain(v12);
    if (v14 >= v13 >> 1) {
      uint64_t result = (void *)sub_10002CD20(v13 > 1, v14 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v14 + 1;
    uint64_t v15 = &_swiftEmptyArrayStorage[2 * v14];
    v15[4] = v24;
    v15[5] = v12;
    int64_t v8 = 1LL << *(_BYTE *)(a1 + 32);
    if (v5 >= v8) {
      goto LABEL_25;
    }
    uint64_t v7 = a1 + 64;
    uint64_t v16 = *(void *)(v23 + 8 * v10);
    if ((v16 & (1LL << v5)) == 0) {
      goto LABEL_26;
    }
    int v4 = v22;
    if (*(_DWORD *)(a1 + 36) != v22) {
      goto LABEL_27;
    }
    unint64_t v17 = v16 & (-2LL << (v5 & 0x3F));
    if (v17)
    {
      int64_t v8 = __clz(__rbit64(v17)) | v5 & 0xFFFFFFFFFFFFFFC0LL;
      int64_t v9 = v21;
    }

    else
    {
      unint64_t v18 = v10 + 1;
      unint64_t v19 = (unint64_t)(v8 + 63) >> 6;
      int64_t v9 = v21;
      if (v10 + 1 < v19)
      {
        unint64_t v20 = *(void *)(v23 + 8 * v18);
        if (v20)
        {
LABEL_20:
          int64_t v8 = __clz(__rbit64(v20)) + (v18 << 6);
        }

        else
        {
          while (v19 - 2 != v10)
          {
            unint64_t v20 = *(void *)(a1 + 80 + 8 * v10++);
            if (v20)
            {
              unint64_t v18 = v10 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }

    ++v6;
    uint64_t v5 = v8;
    if (v6 == v9) {
      return _swiftEmptyArrayStorage;
    }
  }

  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

void *sub_100027D58( void (*a1)(__int128 *__return_ptr, void *, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  int64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = _swiftEmptyArrayStorage;
  if (v5)
  {
    unint64_t v20 = _swiftEmptyArrayStorage;
    sub_10002CD3C(0, v5, 0);
    uint64_t v6 = _swiftEmptyArrayStorage;
    int64_t v9 = (unint64_t *)(a3 + 40);
    while (1)
    {
      uint64_t v10 = *(v9 - 1);
      unint64_t v11 = *v9;
      v18[0] = v10;
      v18[1] = v11;
      sub_100012154(v10, v11);
      a1(&v19, v18, &v17);
      if (v4) {
        break;
      }
      uint64_t v4 = 0LL;
      sub_10000D620(v10, v11);
      __int128 v12 = v19;
      unint64_t v20 = v6;
      unint64_t v14 = v6[2];
      unint64_t v13 = v6[3];
      if (v14 >= v13 >> 1)
      {
        __int128 v16 = v19;
        sub_10002CD3C(v13 > 1, v14 + 1, 1);
        __int128 v12 = v16;
        uint64_t v6 = v20;
      }

      v9 += 2;
      v6[2] = v14 + 1;
      *(_OWORD *)&v6[2 * v14 + 4] = v12;
      if (!--v5) {
        return v6;
      }
    }

    sub_10000D620(v10, v11);
    swift_release(v6);
  }

  return v6;
}

uint64_t sub_100027E94@<X0>(void *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v28 = a4;
  int v27 = a3;
  uint64_t v8 = type metadata accessor for DatabaseConfiguration(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  __int128 v12 = &v26[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v10);
  unint64_t v14 = &v26[-v13];
  sub_10000D478((uint64_t)a1, (uint64_t)v30);
  uint64_t v15 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 16);
  v15(v14, a2, v8);
  v15(v12, a2, v8);
  uint64_t v16 = type metadata accessor for LubyRackoffEncryptionKey(0LL);
  uint64_t v17 = type metadata accessor for UUID(0LL);
  type metadata accessor for Configuration(0LL);
  uint64_t v18 = static Configuration.encryptionKeyWriteCacheSeconds.getter();
  uint64_t v19 = sub_10000D1E8( &qword_10007F4A0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  asyncCache<A, B>(of:withKeysOf:expirationSeconds:)(v29, v16, v17, v18, v17, v16, v19);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a2, v8);
  _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(a1);
  unint64_t v20 = (int *)type metadata accessor for EventRecordUploader.Configuration(0LL);
  uint64_t v21 = a5 + v20[8];
  int v22 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v9 + 32);
  v22(v21, v12, v8);
  uint64_t v23 = (int *)type metadata accessor for TagEncryptionKeyController(0LL);
  uint64_t v24 = v21 + v23[5];
  *(void *)uint64_t v24 = 0LL;
  *(_BYTE *)(v24 + 8) = 1;
  LOBYTE(a1) = v27;
  *(_BYTE *)(v21 + v23[6]) = v27;
  sub_100010044(v29, v21 + v23[7]);
  sub_100010044(v30, a5);
  uint64_t result = ((uint64_t (*)(uint64_t, _BYTE *, uint64_t))v22)(a5 + v20[5], v14, v8);
  *(_BYTE *)(a5 + v20[6]) = (_BYTE)a1;
  *(void *)(a5 + v20[7]) = v28;
  return result;
}

uint64_t sub_100028080(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  uint64_t v3 = *(void *)(type metadata accessor for EventRecordUploader(0LL) - 8);
  v2[5] = v3;
  uint64_t v4 = *(void *)(v3 + 64);
  v2[6] = v4;
  v2[7] = swift_task_alloc((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_10000D228(&qword_10007EE68);
  v2[8] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100028104, 0LL, 0LL);
}

void sub_100028104()
{
  uint64_t v1 = v0[3];
  if (*(void *)(v1 + 16))
  {
    uint64_t v3 = v0[7];
    uint64_t v2 = v0[8];
    uint64_t v5 = v0[5];
    uint64_t v4 = v0[6];
    uint64_t v6 = v0[4];
    uint64_t v7 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v2, 1LL, 1LL, v7);
    sub_10002CC4C(v6, v3, type metadata accessor for EventRecordUploader);
    uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
    uint64_t v9 = (v8 + 40) & ~v8;
    uint64_t v10 = (void *)swift_allocObject(&unk_1000767C0, v9 + v4, v8 | 7);
    v10[2] = 0LL;
    v10[3] = 0LL;
    v10[4] = v1;
    sub_1000289F8(v3, (uint64_t)v10 + v9);
    swift_bridgeObjectRetain(v1);
    uint64_t v11 = sub_10002947C(v2, (uint64_t)&unk_10007F9C8, (uint64_t)v10);
    v0[9] = v11;
    __int128 v12 = (void *)swift_task_alloc(async function pointer to Task.value.getter[1]);
    v0[10] = v12;
    uint64_t v13 = sub_10000D228(&qword_10007F9D0);
    uint64_t v14 = sub_10000D228((uint64_t *)&unk_10007EC20);
    *__int128 v12 = v0;
    v12[1] = sub_100028250;
    Task.value.getter(v0 + 2, v11, v13, v14, &protocol self-conformance witness table for Error);
  }

  else
  {
    __break(1u);
  }

uint64_t sub_100028250()
{
  uint64_t v3 = *(void *)(*(void *)v1 + 72LL);
  uint64_t v2 = *(void *)(*(void *)v1 + 80LL);
  *(void *)(*(void *)v1 + 88LL) = v0;
  swift_task_dealloc(v2);
  swift_release(v3);
  if (v0) {
    uint64_t v4 = sub_100028300;
  }
  else {
    uint64_t v4 = sub_1000282BC;
  }
  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_1000282BC()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 16);
  swift_task_dealloc(*(void *)(v0 + 64));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t sub_100028300()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_task_dealloc(*(void *)(v0 + 64));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002833C()
{
  return 0x726564616F6C7055LL;
}

uint64_t type metadata accessor for EventRecordUploader(uint64_t a1)
{
  return sub_1000289C4(a1, qword_10007FB50, (uint64_t)&nominal type descriptor for EventRecordUploader);
}

uint64_t sub_100028368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v5[9] = a4;
  v5[10] = a5;
  v5[8] = a1;
  uint64_t v6 = type metadata accessor for Logger(0LL);
  v5[11] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[12] = v7;
  unint64_t v8 = (*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[13] = swift_task_alloc(v8);
  v5[14] = swift_task_alloc(v8);
  v5[15] = swift_task_alloc(v8);
  return swift_task_switch(sub_1000283E8, 0LL, 0LL);
}

uint64_t sub_1000283E8()
{
  uint64_t v1 = v0[9];
  uint64_t v2 = type metadata accessor for EventRecordUploader(0LL);
  v0[16] = v2;
  v0[17] = sub_10000D1E8(&qword_10007F9D8, type metadata accessor for EventRecordUploader, (uint64_t)&unk_1000615B0);
  static LoggedObject.logger.getter(v2);
  uint64_t v3 = swift_bridgeObjectRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = v0[9];
    uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v7 = 134217984;
    v0[7] = *(void *)(v6 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 7, v0 + 8, v7 + 4);
    swift_bridgeObjectRelease(v6);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Beginning upload of %ld record(s)", v7, 0xCu);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease(v0[9]);
  }

  uint64_t v8 = v0[15];
  uint64_t v9 = v0[11];
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v0[12] + 8LL);
  v0[18] = v10;
  v10(v8, v9);
  uint64_t v11 = (void *)swift_task_alloc(dword_10007F9E4);
  v0[19] = v11;
  void *v11 = v0;
  v11[1] = sub_100028558;
  return sub_100028AD0(v0[9]);
}

uint64_t sub_100028558(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[2] = v2;
  v3[3] = a1;
  v3[4] = v1;
  uint64_t v4 = v3[19];
  v3[20] = v1;
  swift_task_dealloc(v4);
  if (v1) {
    os_log_type_t v5 = sub_10002870C;
  }
  else {
    os_log_type_t v5 = sub_1000285C4;
  }
  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_1000285C4()
{
  uint64_t v1 = *(void *)(v0 + 72);
  static LoggedObject.logger.getter(*(void *)(v0 + 128));
  uint64_t v2 = swift_bridgeObjectRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void *)(v0 + 72);
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v6 = 134217984;
    *(void *)(v0 + 48) = *(void *)(v5 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v6 + 4);
    swift_bridgeObjectRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Upload of %ld record(s) completed", v6, 0xCu);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v0 + 72));
  }

  uint64_t v7 = *(void *)(v0 + 24);
  uint64_t v8 = *(void *)(v0 + 112);
  uint64_t v9 = *(void *)(v0 + 120);
  uint64_t v10 = *(void *)(v0 + 104);
  uint64_t v11 = *(void **)(v0 + 64);
  (*(void (**)(uint64_t, void))(v0 + 144))(v8, *(void *)(v0 + 88));
  void *v11 = v7;
  swift_task_dealloc(v9);
  swift_task_dealloc(v8);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002870C()
{
  uint64_t v1 = *(void *)(v0 + 160);
  static LoggedObject.logger.getter(*(void *)(v0 + 128));
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void *)(v0 + 160);
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v6 = 138543362;
    swift_errorRetain(v5);
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(void *)(v0 + 40) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v6 + 4);
    *uint64_t v7 = v8;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to upload all records: %{public}@", v6, 0xCu);
    uint64_t v9 = sub_10000D228(&qword_10007EE38);
    swift_arrayDestroy(v7, 1LL, v9);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  else
  {
    uint64_t v10 = *(void *)(v0 + 160);
    swift_errorRelease(v10);
    swift_errorRelease(v10);
  }

  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 144);
  uint64_t v13 = *(void *)(v0 + 112);
  uint64_t v12 = *(void *)(v0 + 120);
  uint64_t v14 = *(void *)(v0 + 104);
  uint64_t v15 = *(void *)(v0 + 88);

  uint64_t v16 = v11(v14, v15);
  swift_willThrow(v16);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000288D8()
{
  uint64_t v1 = *(void *)(type metadata accessor for EventRecordUploader(0LL) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  uint64_t v6 = (void *)(v0 + v3);
  _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v6);
  uint64_t v7 = type metadata accessor for EventRecordUploader.Configuration(0LL);
  uint64_t v8 = (char *)v6 + *(int *)(v7 + 20);
  uint64_t v9 = type metadata accessor for DatabaseConfiguration(0LL);
  uint64_t v10 = *(void (**)(char *, uint64_t))(*(void *)(v9 - 8) + 8LL);
  v10(v8, v9);
  uint64_t v11 = (char *)v6 + *(int *)(v7 + 32);
  v10(v11, v9);
  uint64_t v12 = type metadata accessor for TagEncryptionKeyController(0LL);
  _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(&v11[*(int *)(v12 + 28)]);
  return swift_deallocObject(v0, v4, v5);
}

uint64_t type metadata accessor for EventRecordUploader.Configuration(uint64_t a1)
{
  return sub_1000289C4(a1, qword_10007FAB0, (uint64_t)&nominal type descriptor for EventRecordUploader.Configuration);
}

uint64_t sub_1000289C4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata(a1, a3);
  }
  return result;
}

uint64_t sub_1000289F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for EventRecordUploader(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100028A3C(uint64_t a1)
{
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(type metadata accessor for EventRecordUploader(0LL) - 8) + 80LL);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  uint64_t v9 = (void *)swift_task_alloc(dword_10007F9C4);
  *(void *)(v2 + 16) = v9;
  void *v9 = v2;
  v9[1] = sub_10000D3C0;
  return sub_100028368(a1, v5, v6, v7, v8);
}

uint64_t sub_100028AD0(uint64_t a1)
{
  v2[7] = a1;
  v2[8] = v1;
  uint64_t v3 = type metadata accessor for DatabaseConfiguration(0LL);
  v2[9] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[10] = v4;
  v2[11] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Date(0LL);
  v2[12] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[13] = v6;
  v2[14] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for PendingEventData(0LL);
  v2[15] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[16] = v8;
  v2[17] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  v2[18] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v2[19] = v10;
  v2[20] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for TagEncryptionKeyController(0LL);
  v2[21] = swift_task_alloc((*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for EventRecordUploader(0LL);
  v2[22] = swift_task_alloc((*(void *)(*(void *)(v12 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100028BE8, 0LL, 0LL);
}

uint64_t sub_100028BE8()
{
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v2 = *(void *)(v0 + 56);
  sub_10002CC4C(*(void *)(v0 + 64), v1, type metadata accessor for EventRecordUploader);
  int64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = type metadata accessor for EventRecordUploader.Configuration(0LL);
  *(void *)(v0 + 184) = v4;
  int64_t v5 = *(void *)(v1 + *(int *)(v4 + 28));
  uint64_t result = sub_10002CCE4(v1, type metadata accessor for EventRecordUploader);
  if (v5 < v3)
  {
    __break(1u);
  }

  else
  {
    uint64_t v7 = *(void **)(v0 + 64);
    uint64_t v8 = v7[3];
    uint64_t v9 = v7[4];
    sub_10000D408(v7, v8);
    if ((dispatch thunk of FeatureDataSource.isEventCategoryTagWritingEnabled.getter(v8, v9) & 1) != 0)
    {
      sub_10002CC4C( *(void *)(v0 + 64) + *(int *)(v4 + 32),  *(void *)(v0 + 168),  type metadata accessor for TagEncryptionKeyController);
      uint64_t v10 = _swiftEmptyArrayStorage;
      if (v3)
      {
        uint64_t v11 = *(void *)(v0 + 152);
        uint64_t v12 = *(void *)(v0 + 128);
        uint64_t v38 = *(void *)(v0 + 120);
        uint64_t v39 = _swiftEmptyArrayStorage;
        uint64_t v13 = *(void *)(v0 + 56);
        sub_10002CCC8(0, v3, 0);
        uint64_t v14 = v13 + ((*(unsigned __int8 *)(v12 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
        uint64_t v15 = *(void *)(v12 + 72);
        uint64_t v10 = _swiftEmptyArrayStorage;
        do
        {
          uint64_t v16 = *(void *)(v0 + 160);
          uint64_t v18 = *(void *)(v0 + 136);
          uint64_t v17 = *(void *)(v0 + 144);
          sub_10002CC4C(v14, v18, type metadata accessor for PendingEventData);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v16, v18 + *(int *)(v38 + 20), v17);
          sub_10002CCE4(v18, type metadata accessor for PendingEventData);
          if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
          {
            sub_10002CCC8(0, v10[2] + 1LL, 1);
            uint64_t v10 = v39;
          }

          unint64_t v20 = v10[2];
          unint64_t v19 = v10[3];
          if (v20 >= v19 >> 1)
          {
            sub_10002CCC8(v19 > 1, v20 + 1, 1);
            uint64_t v10 = v39;
          }

          uint64_t v21 = *(void *)(v0 + 160);
          uint64_t v22 = *(void *)(v0 + 144);
          v10[2] = v20 + 1;
          (*(void (**)(unint64_t, uint64_t, uint64_t))(v11 + 32))( (unint64_t)v10 + ((*(unsigned __int8 *)(v11 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))
          + *(void *)(v11 + 72) * v20,
            v21,
            v22);
          uint64_t v39 = v10;
          v14 += v15;
          --v3;
        }

        while (v3);
      }

      uint64_t v27 = sub_1000162F8((uint64_t)v10);
      *(void *)(v0 + 192) = v27;
      swift_bridgeObjectRelease(v10);
      uint64_t v28 = (void *)swift_task_alloc(dword_10007FBCC);
      *(void *)(v0 + 200) = v28;
      *uint64_t v28 = v0;
      v28[1] = sub_100028FD0;
      return sub_10002ED08(v27);
    }

    else
    {
      uint64_t v23 = *(void *)(v0 + 112);
      uint64_t v24 = *(void *)(v0 + 56);
      *(_OWORD *)(v0 + 16) = 0u;
      *(_OWORD *)(v0 + 32) = 0u;
      static Date.now.getter();
      uint64_t v25 = (void *)swift_task_alloc(64LL);
      v25[2] = 0LL;
      void v25[3] = v0 + 24;
      v25[4] = v0 + 40;
      v25[5] = v0 + 16;
      v25[6] = v0 + 32;
      v25[7] = v23;
      uint64_t v26 = sub_1000277B8( (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t *))sub_10002CB98,  (uint64_t)v25,  v24);
      *(void *)(v0 + 224) = v26;
      unint64_t v29 = v26;
      uint64_t v30 = *(void *)(v0 + 184);
      uint64_t v32 = *(void *)(v0 + 80);
      uint64_t v31 = *(void *)(v0 + 88);
      uint64_t v34 = *(void *)(v0 + 64);
      uint64_t v33 = *(void *)(v0 + 72);
      swift_bridgeObjectRelease(0LL);
      swift_task_dealloc(v25);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16))(v31, v34 + *(int *)(v30 + 20), v33);
      uint64_t v35 = swift_task_alloc(32LL);
      *(void *)(v0 + 232) = v35;
      *(void *)(v35 + 16) = v34;
      *(void *)(v35 + 24) = v29;
      uint64_t v36 = (void *)swift_task_alloc(async function pointer to DatabaseConfiguration.configure<A>(_:)[1]);
      *(void *)(v0 + 240) = v36;
      uint64_t v37 = sub_10000D228(&qword_10007F9D0);
      void *v36 = v0;
      v36[1] = sub_100029248;
      return DatabaseConfiguration.configure<A>(_:)(v0 + 48, &unk_10007F9F0, v35, v37);
    }
  }

  return result;
}

uint64_t sub_100028FD0(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  uint64_t v5 = *(void *)(*(void *)v2 + 200LL);
  *(void *)(*(void *)v2 + 208LL) = v1;
  swift_task_dealloc(v5);
  uint64_t v6 = v4[24];
  uint64_t v7 = v4[21];
  if (v1)
  {
    sub_10002CCE4(v7, type metadata accessor for TagEncryptionKeyController);
    swift_bridgeObjectRelease(v6);
    uint64_t v8 = sub_100029374;
  }

  else
  {
    v4[27] = a1;
    sub_10002CCE4(v7, type metadata accessor for TagEncryptionKeyController);
    swift_bridgeObjectRelease(v6);
    uint64_t v8 = sub_100029074;
  }

  return swift_task_switch(v8, 0LL, 0LL);
}

uint64_t sub_100029074()
{
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  uint64_t v2 = *(void *)(v0 + 208);
  uint64_t v1 = *(void *)(v0 + 216);
  uint64_t v3 = *(void *)(v0 + 112);
  uint64_t v4 = *(void *)(v0 + 56);
  static Date.now.getter();
  uint64_t v5 = (void *)swift_task_alloc(64LL);
  uint64_t v5[2] = v1;
  v5[3] = v0 + 24;
  v5[4] = v0 + 40;
  v5[5] = v0 + 16;
  void v5[6] = v0 + 32;
  v5[7] = v3;
  uint64_t v6 = sub_1000277B8((void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t *))sub_10002CB98, (uint64_t)v5, v4);
  *(void *)(v0 + 224) = v6;
  if (v2)
  {
    uint64_t v8 = *(void *)(v0 + 104);
    uint64_t v7 = *(void *)(v0 + 112);
    uint64_t v9 = *(void *)(v0 + 96);
    swift_bridgeObjectRelease(v1);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    swift_task_dealloc(v5);
    uint64_t v10 = *(void *)(v0 + 168);
    uint64_t v11 = *(void *)(v0 + 160);
    uint64_t v12 = *(void *)(v0 + 136);
    uint64_t v13 = *(void *)(v0 + 112);
    uint64_t v14 = *(void *)(v0 + 88);
    swift_task_dealloc(*(void *)(v0 + 176));
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v16 = v6;
    uint64_t v17 = *(void *)(v0 + 184);
    uint64_t v19 = *(void *)(v0 + 80);
    uint64_t v18 = *(void *)(v0 + 88);
    uint64_t v21 = *(void *)(v0 + 64);
    uint64_t v20 = *(void *)(v0 + 72);
    swift_bridgeObjectRelease(v1);
    swift_task_dealloc(v5);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v18, v21 + *(int *)(v17 + 20), v20);
    uint64_t v22 = swift_task_alloc(32LL);
    *(void *)(v0 + 232) = v22;
    *(void *)(v22 + 16) = v21;
    *(void *)(v22 + 24) = v16;
    uint64_t v23 = (void *)swift_task_alloc(async function pointer to DatabaseConfiguration.configure<A>(_:)[1]);
    *(void *)(v0 + 240) = v23;
    uint64_t v24 = sub_10000D228(&qword_10007F9D0);
    *uint64_t v23 = v0;
    v23[1] = sub_100029248;
    return DatabaseConfiguration.configure<A>(_:)(v0 + 48, &unk_10007F9F0, v22, v24);
  }

uint64_t sub_100029248()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 240LL);
  *(void *)(*(void *)v1 + 248LL) = v0;
  swift_task_dealloc(v3);
  uint64_t v5 = v2[28];
  uint64_t v4 = v2[29];
  (*(void (**)(void, void))(v2[10] + 8LL))(v2[11], v2[9]);
  swift_bridgeObjectRelease(v5);
  swift_task_dealloc(v4);
  if (v0) {
    uint64_t v6 = sub_1000293F0;
  }
  else {
    uint64_t v6 = sub_1000292D8;
  }
  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_1000292D8()
{
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v2 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 160);
  uint64_t v4 = *(void *)(v0 + 136);
  uint64_t v5 = *(void *)(v0 + 112);
  uint64_t v6 = *(void *)(v0 + 88);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 104) + 8LL))(v5, *(void *)(v0 + 96));
  uint64_t v7 = *(void *)(v0 + 48);
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v7);
}

uint64_t sub_100029374()
{
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v3 = *(void *)(v0 + 136);
  uint64_t v4 = *(void *)(v0 + 112);
  uint64_t v5 = *(void *)(v0 + 88);
  swift_task_dealloc(*(void *)(v0 + 176));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000293F0()
{
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v3 = *(void *)(v0 + 136);
  uint64_t v4 = *(void *)(v0 + 112);
  uint64_t v5 = *(void *)(v0 + 88);
  swift_task_dealloc(*(void *)(v0 + 176));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002947C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1LL, v6) == 1)
  {
    sub_10000D5AC(a1, &qword_10007EE68);
    uint64_t v8 = 7168LL;
    uint64_t v9 = *(void *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      uint64_t v10 = *(void *)(a3 + 24);
      uint64_t ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      uint64_t v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }

  else
  {
    unsigned __int8 v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    uint64_t v8 = v15 | 0x1C00LL;
    uint64_t v9 = *(void *)(a3 + 16);
    if (v9) {
      goto LABEL_3;
    }
  }

  uint64_t v12 = 0LL;
  uint64_t v14 = 0LL;
LABEL_6:
  uint64_t v16 = sub_10000D228(&qword_10007F9D0);
  if (v14 | v12)
  {
    v19[0] = 0LL;
    v19[1] = 0LL;
    uint64_t v17 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }

  else
  {
    uint64_t v17 = 0LL;
  }

  return swift_task_create(v8, v17, v16, a2, a3);
}

uint64_t sub_1000295B0(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  uint64_t v4 = type metadata accessor for Logger(0LL);
  v3[7] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[8] = v5;
  unint64_t v6 = (*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  void v3[9] = swift_task_alloc(v6);
  v3[10] = swift_task_alloc(v6);
  return swift_task_switch(sub_100029624, 0LL, 0LL);
}

uint64_t sub_100029624()
{
  uint64_t v1 = v0 + 4;
  uint64_t v2 = v0[4];
  uint64_t v3 = type metadata accessor for EventRecordUploader(0LL);
  v0[11] = v3;
  v0[12] = sub_10000D1E8(&qword_10007F9D8, type metadata accessor for EventRecordUploader, (uint64_t)&unk_1000615B0);
  static LoggedObject.logger.getter(v3);
  uint64_t v4 = swift_bridgeObjectRetain_n(v2, 2LL);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.default.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  unint64_t v8 = v0[4];
  if (v7)
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v9 = 134217984;
    if (v8 >> 62)
    {
      uint64_t v17 = *v1;
      if (*v1 < 0) {
        uint64_t v18 = *v1;
      }
      else {
        uint64_t v18 = v8 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(*v1);
      uint64_t v10 = _CocoaArrayWrapper.endIndex.getter(v18);
      swift_bridgeObjectRelease(v17);
    }

    else
    {
      uint64_t v10 = *(void *)((v8 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    uint64_t v11 = *v1;
    swift_bridgeObjectRelease(*v1);
    v0[3] = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v9 + 4);
    swift_bridgeObjectRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Beginning CloudKit upload of %ld record(s)", v9, 0xCu);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(*v1, 2LL);
  }

  uint64_t v12 = v0[10];
  uint64_t v13 = v0[7];
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v0[8] + 8LL);
  v0[13] = v14;
  v14(v12, v13);
  unsigned __int8 v15 = (void *)swift_task_alloc(async function pointer to CKDatabase.modifyRecords(saving:deleting:savePolicy:atomically:)[1]);
  v0[14] = v15;
  *unsigned __int8 v15 = v0;
  v15[1] = sub_100029804;
  return CKDatabase.modifyRecords(saving:deleting:savePolicy:atomically:)(v0[4], _swiftEmptyArrayStorage, 2LL, 0LL);
}

uint64_t sub_100029804(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (*v3)[14];
  BOOL v7 = *v3;
  v7[15] = v2;
  swift_task_dealloc(v6);
  if (v2) {
    return swift_task_switch(sub_100029934, 0LL, 0LL);
  }
  swift_bridgeObjectRelease(a2);
  v7[16] = a1;
  uint64_t v9 = (uint64_t **)swift_task_alloc(dword_10007FA04);
  v7[17] = (uint64_t)v9;
  uint8_t *v9 = v7;
  v9[1] = (uint64_t *)sub_1000298BC;
  return sub_100029AF4(v7[4], v7[5], a1);
}

uint64_t sub_1000298BC(uint64_t a1)
{
  uint64_t v3 = *(void *)(*v1 + 128);
  uint64_t v5 = *(void *)(*v1 + 72);
  uint64_t v4 = *(void *)(*v1 + 80);
  uint64_t v7 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 136));
  swift_bridgeObjectRelease(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(uint64_t))(v7 + 8))(a1);
}

uint64_t sub_100029934()
{
  uint64_t v1 = *(void *)(v0 + 120);
  static LoggedObject.logger.getter(*(void *)(v0 + 88));
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void *)(v0 + 120);
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v6 = 138543362;
    swift_errorRetain(v5);
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(void *)(v0 + 16) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v6 + 4);
    *uint64_t v7 = v8;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Upload operation failed: %{public}@", v6, 0xCu);
    uint64_t v9 = sub_10000D228(&qword_10007EE38);
    swift_arrayDestroy(v7, 1LL, v9);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  else
  {
    uint64_t v10 = *(void *)(v0 + 120);
    swift_errorRelease(v10);
    swift_errorRelease(v10);
  }

  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 104);
  uint64_t v13 = *(void *)(v0 + 72);
  uint64_t v12 = *(void *)(v0 + 80);
  uint64_t v14 = *(void *)(v0 + 56);

  uint64_t v15 = v11(v13, v14);
  swift_willThrow(v15);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100029AF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[11] = a3;
  v4[12] = v3;
  v4[9] = a1;
  v4[10] = a2;
  uint64_t v5 = type metadata accessor for Logger(0LL);
  v4[13] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[14] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[15] = swift_task_alloc(v7);
  v4[16] = swift_task_alloc(v7);
  v4[17] = swift_task_alloc(v7);
  uint64_t v8 = sub_10000D228(&qword_10007F488);
  v4[18] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  v4[19] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v4[20] = v10;
  unint64_t v11 = (*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[21] = swift_task_alloc(v11);
  v4[22] = swift_task_alloc(v11);
  return swift_task_switch(sub_100029BD0, 0LL, 0LL);
}

void sub_100029BD0()
{
  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v138 = *(void *)(v0 + 160);
  uint64_t v133 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = sub_10000D228(&qword_10007FA08);
  uint64_t v6 = sub_10000D1E8( &qword_10007F4A0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  *(void *)(v0 + 16) = Dictionary.init(minimumCapacity:)(v4, v1, v5, v6);
  uint64_t v127 = (void *)(v0 + 24);
  BOOL v125 = (void *)(v0 + 40);
  uint64_t v121 = (void *)(v0 + 56);
  uint64_t v129 = (void **)(v0 + 32);
  uint64_t v130 = v2 + 64;
  uint64_t v7 = -1LL;
  uint64_t v8 = -1LL << *(_BYTE *)(v2 + 32);
  if (-v8 < 64) {
    uint64_t v7 = ~(-1LL << -(char)v8);
  }
  unint64_t v9 = v7 & *(void *)(v2 + 64);
  unint64_t v10 = (unint64_t)(63 - v8) >> 6;
  uint64_t v11 = v3 & 0xFFFFFFFFFFFFFF8LL;
  uint64_t v123 = v3 & 0xFFFFFFFFFFFFFF8LL;
  if (v3 < 0) {
    uint64_t v11 = v3;
  }
  uint64_t v120 = v11;
  int64_t v131 = v10;
  unint64_t v132 = v3 & 0xC000000000000001LL;
  uint64_t v128 = v3 + 32;
  uint64_t v134 = v2;
  swift_bridgeObjectRetain(v2);
  uint64_t v136 = 0LL;
  uint64_t v12 = 0LL;
  unint64_t v124 = (unint64_t)v3 >> 62;
  uint64_t v13 = &_swiftEmptyDictionarySingleton;
  while (1)
  {
    *(void *)(v0 + 184) = v13;
    *(void *)(v0 + 192) = v136;
    if (!v9) {
      break;
    }
    uint64_t v139 = (v9 - 1) & v9;
    int64_t v140 = v12;
    unint64_t v21 = __clz(__rbit64(v9)) | (v12 << 6);
LABEL_24:
    uint64_t v27 = *(void *)(v0 + 144);
    uint64_t v26 = *(void *)(v0 + 152);
    uint64_t v28 = *(void **)(*(void *)(v134 + 48) + 8 * v21);
    uint64_t v29 = *(void *)(v134 + 56) + 16 * v21;
    uint64_t v30 = *(void **)v29;
    char v31 = *(_BYTE *)(v29 + 8);
    id v32 = v28;
    sub_10002D350(v30, v31);
    id v33 = [v32 recordName];
    uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
    uint64_t v36 = v35;

    UUID.init(uuidString:)(v34, v36);
    swift_bridgeObjectRelease(v36);
    uint64_t v37 = v138;
    (*(void (**)(void, void, void))(v138 + 32))( *(void *)(v0 + 176),  *(void *)(v0 + 144),  *(void *)(v0 + 152));
    if ((v31 & 1) != 0)
    {
      uint64_t v38 = *(void *)(v0 + 96);
      uint64_t v135 = v13;
      if ((*(_BYTE *)(v38 + *(int *)(type metadata accessor for EventRecordUploader.Configuration(0LL) + 24)) & 1) != 0)
      {
        swift_errorRetain(v30);
LABEL_47:
        uint64_t v73 = type metadata accessor for EventRecordUploader(0LL);
        sub_10000D1E8(&qword_10007F9D8, type metadata accessor for EventRecordUploader, (uint64_t)&unk_1000615B0);
        static LoggedObject.logger.getter(v73);
        id v74 = v32;
        sub_10002D350(v30, 1);
        id v75 = v74;
        id v76 = sub_10002D350(v30, 1);
        uint64_t v77 = (os_log_s *)Logger.logObject.getter(v76);
        os_log_type_t v78 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v77, v78))
        {
          uint64_t v79 = swift_slowAlloc(22LL, -1LL);
          uint64_t v80 = (void *)swift_slowAlloc(16LL, -1LL);
          *(_DWORD *)uint64_t v79 = 138543618;
          *(void *)(v79 + 4) = v75;
          *uint64_t v80 = v75;

          *(_WORD *)(v79 + 12) = 2114;
          swift_errorRetain(v30);
          uint64_t v81 = _swift_stdlib_bridgeErrorToNSError(v30);
          *(void *)(v79 + 14) = v81;
          v80[1] = v81;
          sub_10002D35C(v30, 1);
          sub_10002D35C(v30, 1);
          _os_log_impl( (void *)&_mh_execute_header,  v77,  v78,  "Upload for record %{public}@ failed: %{public}@",  (uint8_t *)v79,  0x16u);
          uint64_t v82 = sub_10000D228(&qword_10007EE38);
          swift_arrayDestroy(v80, 2LL, v82);
          swift_slowDealloc(v80, -1LL, -1LL);
          swift_slowDealloc(v79, -1LL, -1LL);
        }

        else
        {

          sub_10002D35C(v30, 1);
          sub_10002D35C(v30, 1);
        }

        unint64_t v9 = v139;
        uint64_t v12 = v140;
        uint64_t v83 = *(void *)(v0 + 120);
        uint64_t v84 = *(void *)(v0 + 104);

        (*(void (**)(uint64_t, uint64_t))(v133 + 8))(v83, v84);
        goto LABEL_51;
      }

      *uint64_t v127 = v30;
      swift_errorRetain(v30);
      swift_errorRetain(v30);
      uint64_t v45 = sub_10000D228((uint64_t *)&unk_10007EC20);
      type metadata accessor for CKError(0LL);
      uint64_t v47 = v46;
      if ((swift_dynamicCast(v129, v127, v45, v46, 6LL) & 1) == 0) {
        goto LABEL_47;
      }
      uint64_t v48 = *v129;
      *(void *)(v0 + 48) = *v129;
      uint64_t v49 = sub_10000D1E8( &qword_10007EFF8,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_100060948);
      _BridgedStoredNSError.code.getter(v125, v47, v49);
      if (*v125 != 26LL)
      {
        *(void *)(v0 + 64) = v48;
        _BridgedStoredNSError.code.getter(v121, v47, v49);
        if (*v121 != 28LL)
        {

          goto LABEL_47;
        }
      }

      uint64_t v50 = type metadata accessor for EventRecordUploader(0LL);
      sub_10000D1E8(&qword_10007F9D8, type metadata accessor for EventRecordUploader, (uint64_t)&unk_1000615B0);
      static LoggedObject.logger.getter(v50);
      id v126 = v32;
      id v51 = v32;
      id v52 = v48;
      id v53 = v51;
      id v54 = v52;
      uint64_t v55 = (os_log_s *)Logger.logObject.getter(v54);
      os_log_type_t v56 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v55, v56))
      {
        uint64_t v57 = swift_slowAlloc(22LL, -1LL);
        unint64_t v58 = (void *)swift_slowAlloc(16LL, -1LL);
        *(_DWORD *)uint64_t v57 = 138543618;
        *(void *)(v57 + 4) = v53;
        *unint64_t v58 = v53;

        *(_WORD *)(v57 + 12) = 2114;
        id v59 = v54;
        uint64_t v60 = _swift_stdlib_bridgeErrorToNSError(v59);
        *(void *)(v57 + 14) = v60;
        v58[1] = v60;

        _os_log_impl( (void *)&_mh_execute_header,  v55,  v56,  "Will retry upload for record %{public}@ that failed with missing zone error: %{public}@",  (uint8_t *)v57,  0x16u);
        uint64_t v61 = sub_10000D228(&qword_10007EE38);
        swift_arrayDestroy(v58, 2LL, v61);
        swift_slowDealloc(v58, -1LL, -1LL);
        swift_slowDealloc(v57, -1LL, -1LL);
      }

      else
      {

        uint64_t v55 = (os_log_s *)v53;
      }

      uint64_t v62 = *(void *)(v0 + 128);
      uint64_t v63 = *(void *)(v0 + 104);

      (*(void (**)(uint64_t, uint64_t))(v133 + 8))(v62, v63);
      uint64_t v64 = *(void *)(v0 + 72);
      if (v124)
      {
        swift_bridgeObjectRetain(v64);
        uint64_t v65 = _CocoaArrayWrapper.endIndex.getter(v120);
        if (!v65)
        {
LABEL_64:
          swift_bridgeObjectRelease(*(void *)(v0 + 72));

LABEL_65:
          uint64_t v37 = v138;
          unint64_t v9 = v139;
          uint64_t v12 = v140;
          id v32 = v126;
          goto LABEL_51;
        }
      }

      else
      {
        uint64_t v65 = *(void *)(v123 + 16);
        swift_bridgeObjectRetain(v64);
        if (!v65) {
          goto LABEL_64;
        }
      }

      uint64_t v122 = v54;
      sub_10000D5E8(0LL, (unint64_t *)&qword_10007F910, &OBJC_CLASS___NSObject_ptr);
      uint64_t v66 = 0LL;
      while (1)
      {
        if (v132) {
          id v67 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v66, *(void *)(v0 + 72));
        }
        else {
          id v67 = *(id *)(v128 + 8 * v66);
        }
        unint64_t v68 = v67;
        uint64_t v69 = v66 + 1;
        if (__OFADD__(v66, 1LL))
        {
          __break(1u);
          goto LABEL_70;
        }

        id v70 = [v67 recordID];
        char v71 = v53;
        char v72 = static NSObject.== infix(_:_:)();

        if ((v72 & 1) != 0) {
          break;
        }

        ++v66;
        id v53 = v71;
        if (v69 == v65)
        {
          swift_bridgeObjectRelease(*(void *)(v0 + 72));

          goto LABEL_65;
        }
      }

      swift_bridgeObjectRelease(*(void *)(v0 + 72));
      id v90 = [v71 zoneID];
      id v91 = [v90 zoneName];

      uint64_t v92 = static String._unconditionallyBridgeFromObjectiveC(_:)(v91);
      uint64_t v94 = v93;

      id v95 = v68;
      sub_10002D330((uint64_t)v136, 0LL);
      uint64_t v96 = v135;
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v135);
      unint64_t v99 = sub_10005A2E0(v92, v94);
      uint64_t v100 = v135[2];
      BOOL v101 = (v98 & 1) == 0;
      uint64_t v102 = v100 + v101;
      if (__OFADD__(v100, v101)) {
        goto LABEL_73;
      }
      char v103 = v98;
      uint64_t v137 = v95;
      if (v135[3] < v102)
      {
        sub_10005B0F8(v102, isUniquelyReferenced_nonNull_native);
        uint64_t v96 = v135;
        unint64_t v104 = sub_10005A2E0(v92, v94);
        id v32 = v126;
        if ((v103 & 1) == (v105 & 1))
        {
          unint64_t v99 = v104;
          goto LABEL_58;
        }

LABEL_70:
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
        return;
      }

      id v32 = v126;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_10005D254();
        uint64_t v96 = v135;
      }

uint64_t sub_10002A8A0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 184LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 200LL));
  swift_bridgeObjectRelease(v1);
  return swift_task_switch(sub_10002A900, 0LL, 0LL);
}

uint64_t sub_10002A900()
{
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v2 = *(void *)(v0 + 176);
  uint64_t v4 = *(void *)(v0 + 136);
  uint64_t v3 = *(void *)(v0 + 144);
  uint64_t v6 = *(void *)(v0 + 120);
  uint64_t v5 = *(void *)(v0 + 128);
  uint64_t v7 = *(void *)(v0 + 16);
  sub_10002D330(*(void *)(v0 + 192), 0LL);
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v7);
}

void sub_10002A990(void *a1@<X8>)
{
  *a1 = &_swiftEmptyArrayStorage;
}

uint64_t sub_10002A9A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[9] = a3;
  v4[10] = v3;
  v4[7] = a1;
  v4[8] = a2;
  uint64_t v5 = type metadata accessor for Logger(0LL);
  v4[11] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[12] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[13] = swift_task_alloc(v7);
  v4[14] = swift_task_alloc(v7);
  v4[15] = swift_task_alloc(v7);
  v4[16] = swift_task_alloc(v7);
  return swift_task_switch(sub_10002AA2C, 0LL, 0LL);
}

uint64_t sub_10002AA2C()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = type metadata accessor for EventRecordUploader(0LL);
  v0[17] = v2;
  v0[18] = sub_10000D1E8(&qword_10007F9D8, type metadata accessor for EventRecordUploader, (uint64_t)&unk_1000615B0);
  static LoggedObject.logger.getter(v2);
  uint64_t v3 = swift_bridgeObjectRetain_n(v1, 2LL);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v21 = v0[12];
    uint64_t v22 = v0[11];
    uint64_t v23 = v0[16];
    uint64_t v6 = v0[7];
    uint64_t v19 = v6;
    unint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v20 = swift_slowAlloc(32LL, -1LL);
    uint64_t v24 = v20;
    *(_DWORD *)unint64_t v7 = 136446210;
    uint64_t v8 = sub_100027B50(v6);
    uint64_t v9 = Array.description.getter(v8, &type metadata for String);
    unint64_t v11 = v10;
    swift_bridgeObjectRelease(v8);
    v0[6] = sub_100046274(v9, v11, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 6, v0 + 7, v7 + 4);
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease_n(v19, 2LL);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Attempting to create zones: %{public}s", v7, 0xCu);
    swift_arrayDestroy(v20, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);

    uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
    v12(v23, v22);
  }

  else
  {
    uint64_t v13 = v0[16];
    uint64_t v14 = v0[11];
    uint64_t v15 = v0[12];
    swift_bridgeObjectRelease_n(v0[7], 2LL);

    uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v12(v13, v14);
  }

  v0[19] = v12;
  uint64_t v16 = sub_1000278C4(v0[7]);
  v0[20] = v16;
  uint64_t v17 = (void *)swift_task_alloc(async function pointer to CKDatabase.modifyRecordZones(saving:deleting:)[1]);
  v0[21] = v17;
  void *v17 = v0;
  v17[1] = sub_10002ACAC;
  return CKDatabase.modifyRecordZones(saving:deleting:)(v16, _swiftEmptyArrayStorage);
}

uint64_t sub_10002ACAC(uint64_t a1, uint64_t a2)
{
  os_log_type_t v5 = *(void **)v3;
  uint64_t v6 = *(void *)(*(void *)v3 + 168LL);
  v5[22] = a1;
  v5[23] = v2;
  swift_task_dealloc(v6);
  uint64_t v7 = v5[20];
  if (v2)
  {
    swift_bridgeObjectRelease(v7);
    uint64_t v8 = sub_10002B3D8;
  }

  else
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(v7);
    uint64_t v8 = sub_10002AD40;
  }

  return swift_task_switch(v8, 0LL, 0LL);
}

uint64_t sub_10002AD40()
{
  int64_t v1 = 0LL;
  *(void *)(v0 + 32) = _swiftEmptyArrayStorage;
  uint64_t v2 = *(void *)(v0 + 176);
  uint64_t v49 = *(void *)(v0 + 56);
  uint64_t v46 = v2 + 64;
  uint64_t v3 = -1LL;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  if (-v4 < 64) {
    uint64_t v3 = ~(-1LL << -(char)v4);
  }
  unint64_t v5 = v3 & *(void *)(v2 + 64);
  int64_t v47 = (unint64_t)(63 - v4) >> 6;
LABEL_4:
  uint64_t v48 = *(void (**)(uint64_t, uint64_t))(v0 + 152);
  while (1)
  {
    if (v5)
    {
      unint64_t v6 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v7 = v6 | (v1 << 6);
      goto LABEL_23;
    }

    int64_t v8 = v1 + 1;
    if (__OFADD__(v1, 1LL))
    {
      __break(1u);
      goto LABEL_38;
    }

    if (v8 >= v47) {
      goto LABEL_34;
    }
    unint64_t v9 = *(void *)(v46 + 8 * v8);
    ++v1;
    if (!v9)
    {
      int64_t v1 = v8 + 1;
      if (v8 + 1 >= v47) {
        goto LABEL_34;
      }
      unint64_t v9 = *(void *)(v46 + 8 * v1);
      if (!v9)
      {
        int64_t v1 = v8 + 2;
        if (v8 + 2 >= v47) {
          goto LABEL_34;
        }
        unint64_t v9 = *(void *)(v46 + 8 * v1);
        if (!v9) {
          break;
        }
      }
    }

LABEL_38:
      __break(1u);
LABEL_39:
      if (v2 < 0) {
        uint64_t v41 = v2;
      }
      else {
        uint64_t v41 = v2 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v2);
      uint64_t v42 = _CocoaArrayWrapper.endIndex.getter(v41);
      swift_bridgeObjectRelease(v2);
      if (!v42) {
        goto LABEL_43;
      }
LABEL_36:
      uint64_t v39 = (void *)swift_task_alloc(dword_10007FA1C);
      *(void *)(v0 + 200) = v39;
      void *v39 = v0;
      v39[1] = sub_10002B328;
      return sub_10002B75C(v2, *(void *)(v0 + 64), *(void *)(v0 + 72));
    }

    int64_t v1 = v10;
    goto LABEL_22;
  }

LABEL_34:
  swift_release(*(void *)(v0 + 176));
  uint64_t v2 = *(void *)(v0 + 32);
  *(void *)(v0 + 192) = v2;
  if (*(void *)((v2 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
    goto LABEL_36;
  }
LABEL_43:
  swift_bridgeObjectRelease(v2);
  uint64_t v43 = *(void *)(v0 + 120);
  uint64_t v45 = *(void *)(v0 + 104);
  uint64_t v44 = *(void *)(v0 + 112);
  swift_task_dealloc(*(void *)(v0 + 128));
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

  swift_bridgeObjectRelease(v31);
  uint64_t v55 = _swiftEmptyArrayStorage;
LABEL_35:
  static LoggedObject.logger.getter(v89);
  uint64_t v80 = swift_bridgeObjectRetain(v55);
  uint64_t v81 = (os_log_s *)Logger.logObject.getter(v80);
  uint64_t v82 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v81, v82))
  {
    uint64_t v83 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v83 = 134217984;
    Swift::Int v108 = (void *)v55[2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v108, &v109, v83 + 4);
    swift_bridgeObjectRelease(v55);
    _os_log_impl((void *)&_mh_execute_header, v81, v82, "Fetched %ld pending event(s)", v83, 0xCu);
    swift_slowDealloc(v83, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease(v55);
  }

  v90(v86, v91);
  *uint64_t v85 = v55;
}

uint64_t sub_10002B328()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 192LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 200LL));
  swift_bridgeObjectRelease(v1);
  return swift_task_switch(sub_10002B384, 0LL, 0LL);
}

uint64_t sub_10002B384()
{
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 112);
  swift_task_dealloc(*(void *)(v0 + 128));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002B3D8()
{
  uint64_t v1 = *(void *)(v0 + 184);
  static LoggedObject.logger.getter(*(void *)(v0 + 136));
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void *)(v0 + 184);
    unint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    unint64_t v7 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)unint64_t v6 = 138543362;
    swift_errorRetain(v5);
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(void *)(v0 + 24) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v6 + 4);
    *unint64_t v7 = v8;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to create zones: %{public}@", v6, 0xCu);
    uint64_t v9 = sub_10000D228(&qword_10007EE38);
    swift_arrayDestroy(v7, 1LL, v9);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);

    swift_errorRelease(v5);
  }

  else
  {
    uint64_t v10 = *(void *)(v0 + 184);
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    swift_errorRelease(v10);
  }

  (*(void (**)(void, void))(v0 + 152))(*(void *)(v0 + 104), *(void *)(v0 + 88));
  uint64_t v11 = *(void *)(v0 + 120);
  uint64_t v13 = *(void *)(v0 + 104);
  uint64_t v12 = *(void *)(v0 + 112);
  swift_task_dealloc(*(void *)(v0 + 128));
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002B5A4(uint64_t a1)
{
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v16 = a1;
    }
    else {
      uint64_t v16 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v4 = *v1;
  if (!((unint64_t)*v1 >> 62))
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t v6 = v5 + v3;
    if (!__OFADD__(v5, v3)) {
      goto LABEL_5;
    }
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  if (v4 < 0) {
    uint64_t v17 = *v1;
  }
  else {
    uint64_t v17 = v4 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(*v1);
  uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v17);
  swift_bridgeObjectRelease(v4);
  uint64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3)) {
    goto LABEL_29;
  }
LABEL_5:
  uint64_t v4 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *uint64_t v1 = v4;
  uint64_t v5 = 0LL;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000LL) == 0 && (v4 & 0x4000000000000000LL) == 0)
  {
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8LL;
    if (v6 <= *(void *)((v4 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      goto LABEL_15;
    }
    uint64_t v5 = 1LL;
  }

  uint64_t v9 = *(void *)((v4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (1)
  {
    if (v9 <= v6) {
      uint64_t v9 = v6;
    }
    swift_bridgeObjectRetain(v4);
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v5, v9, 1LL, v4);
    swift_bridgeObjectRelease(*v1);
    *uint64_t v1 = v4;
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8LL;
LABEL_15:
    uint64_t result = sub_10002CFC4(v8 + 8LL * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1);
    if (v11 >= v3) {
      break;
    }
LABEL_30:
    __break(1u);
LABEL_31:
    if (v4 < 0) {
      uint64_t v18 = v4;
    }
    else {
      uint64_t v18 = v4 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v4);
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(v4);
  }

  if (v11 < 1) {
    goto LABEL_19;
  }
  uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  BOOL v13 = __OFADD__(v12, v11);
  uint64_t v14 = v12 + v11;
  if (!v13)
  {
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8LL) + 0x10) = v14;
LABEL_19:
    uint64_t v15 = swift_bridgeObjectRelease(result);
    return specialized Array._endMutation()(v15);
  }

  __break(1u);
  return result;
}

uint64_t sub_10002B75C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  uint64_t v4 = sub_10000D228(&qword_10007F488);
  v3[6] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for UUID(0LL);
  v3[7] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[8] = v6;
  void v3[9] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Logger(0LL);
  v3[10] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v3[11] = v8;
  unint64_t v9 = (*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[12] = swift_task_alloc(v9);
  v3[13] = swift_task_alloc(v9);
  v3[14] = swift_task_alloc(v9);
  v3[15] = swift_task_alloc(v9);
  return swift_task_switch(sub_10002B834, 0LL, 0LL);
}

uint64_t sub_10002B834()
{
  uint64_t v1 = type metadata accessor for EventRecordUploader(0LL);
  v0[16] = v1;
  v0[17] = sub_10000D1E8(&qword_10007F9D8, type metadata accessor for EventRecordUploader, (uint64_t)&unk_1000615B0);
  uint64_t v2 = static LoggedObject.logger.getter(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Attempting to upload records again", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = v0[15];
  uint64_t v7 = v0[10];
  uint64_t v8 = v0[11];

  unint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v0[18] = v9;
  v9(v6, v7);
  uint64_t v10 = (void *)swift_task_alloc(async function pointer to CKDatabase.modifyRecords(saving:deleting:savePolicy:atomically:)[1]);
  v0[19] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_10002B96C;
  return CKDatabase.modifyRecords(saving:deleting:savePolicy:atomically:)(v0[3], _swiftEmptyArrayStorage, 0LL, 1LL);
}

uint64_t sub_10002B96C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v3;
  uint64_t v6 = *(void *)(*v3 + 152);
  *(void *)(v5 + 160) = a1;
  *(void *)(v5 + 168) = v2;
  swift_task_dealloc(v6);
  if (v2)
  {
    uint64_t v7 = sub_10002C088;
  }

  else
  {
    swift_bridgeObjectRelease(a2);
    uint64_t v7 = sub_10002B9E4;
  }

  return swift_task_switch(v7, 0LL, 0LL);
}

void sub_10002B9E4()
{
  int64_t v1 = 0LL;
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v3 = *(void *)(v2 + 64);
  uint64_t v74 = v2 + 64;
  uint64_t v4 = -1LL;
  uint64_t v76 = *(void *)(v0 + 160);
  uint64_t v5 = -1LL << *(_BYTE *)(v76 + 32);
  uint64_t v77 = *(void *)(v0 + 64);
  if (-v5 < 64) {
    uint64_t v4 = ~(-1LL << -(char)v5);
  }
  unint64_t v6 = v4 & v3;
  int64_t v75 = (unint64_t)(63 - v5) >> 6;
  while (1)
  {
    if (v6)
    {
      unint64_t v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      int64_t v78 = v1;
      unint64_t v11 = v10 | (v1 << 6);
      goto LABEL_23;
    }

    int64_t v12 = v1 + 1;
    if (__OFADD__(v1, 1LL)) {
      goto LABEL_45;
    }
    if (v12 >= v75)
    {
LABEL_42:
      swift_release(*(void *)(v0 + 160));
      uint64_t v69 = *(void *)(v0 + 112);
      uint64_t v71 = *(void *)(v0 + 96);
      uint64_t v70 = *(void *)(v0 + 104);
      uint64_t v72 = *(void *)(v0 + 72);
      uint64_t v73 = *(void *)(v0 + 48);
      swift_task_dealloc(*(void *)(v0 + 120));
      swift_task_dealloc(v69);
      swift_task_dealloc(v70);
      swift_task_dealloc(v71);
      swift_task_dealloc(v72);
      swift_task_dealloc(v73);
      (*(void (**)(void))(v0 + 8))();
      return;
    }

    unint64_t v13 = *(void *)(v74 + 8 * v12);
    int64_t v14 = v1 + 1;
    if (!v13)
    {
      int64_t v14 = v1 + 2;
      if (v1 + 2 >= v75) {
        goto LABEL_42;
      }
      unint64_t v13 = *(void *)(v74 + 8 * v14);
      if (!v13)
      {
        int64_t v14 = v1 + 3;
        if (v1 + 3 >= v75) {
          goto LABEL_42;
        }
        unint64_t v13 = *(void *)(v74 + 8 * v14);
        if (!v13) {
          break;
        }
      }
    }

LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
}

uint64_t sub_10002C088()
{
  uint64_t v1 = *(void *)(v0 + 168);
  static LoggedObject.logger.getter(*(void *)(v0 + 128));
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void *)(v0 + 168);
    unint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)unint64_t v6 = 138543362;
    swift_errorRetain(v5);
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(void *)(v0 + 16) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v6 + 4);
    *uint64_t v7 = v8;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Retried upload operation failed: %{public}@", v6, 0xCu);
    uint64_t v9 = sub_10000D228(&qword_10007EE38);
    swift_arrayDestroy(v7, 1LL, v9);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);

    swift_errorRelease(v5);
  }

  else
  {
    uint64_t v10 = *(void *)(v0 + 168);
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    swift_errorRelease(v10);
  }

  (*(void (**)(void, void))(v0 + 144))(*(void *)(v0 + 96), *(void *)(v0 + 80));
  uint64_t v11 = *(void *)(v0 + 112);
  uint64_t v13 = *(void *)(v0 + 96);
  uint64_t v12 = *(void *)(v0 + 104);
  uint64_t v14 = *(void *)(v0 + 72);
  uint64_t v15 = *(void *)(v0 + 48);
  swift_task_dealloc(*(void *)(v0 + 120));
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10002C26C(uint64_t a1)
{
  __asm { BR              X10 }

void sub_10002C374( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, void *a5@<X4>, void *a6@<X5>, char *a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  uint64_t v84 = a7;
  uint64_t v85 = a8;
  uint64_t v86 = (void *)a2;
  uint64_t v76 = a6;
  uint64_t v82 = a4;
  uint64_t v83 = a5;
  uint64_t v81 = a3;
  int64_t v78 = a9;
  uint64_t v10 = type metadata accessor for PendingEventData(0LL);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v77 = (uint64_t)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v75 = (uint64_t)&v74 - v13;
  uint64_t v79 = type metadata accessor for Logger(0LL);
  uint64_t v14 = *(void *)(v79 - 8);
  uint64_t v15 = __chkstk_darwin(v79);
  uint64_t v17 = (char *)&v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v74 - v18;
  uint64_t v20 = type metadata accessor for EventRecord.DataType(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  id v23 = (char *)&v74 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v80 = *(void *)(a1 + *(int *)(v10 + 28));
  uint64_t v24 = (*(uint64_t (**)(char *, void, uint64_t))(v21 + 104))( v23,  enum case for EventRecord.DataType.fakeEvent(_:),  v20);
  uint64_t v25 = EventRecord.DataType.rawValue.getter(v24);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
  uint64_t v26 = v87;
  Class v27 = sub_10002D6E8(a1, (uint64_t)v86);
  if (v26)
  {
    *(void *)uint64_t v85 = v26;
    return;
  }

  Class v28 = v27;
  id v29 = v82;
  uint64_t v86 = (void *)v10;
  uint64_t v87 = v17;
  id v30 = v83;
  uint64_t v85 = v14;
  if (v80 == v25)
  {
    if (__OFADD__(*v81, 1LL))
    {
      __break(1u);
      goto LABEL_24;
    }

    ++*v81;
    uint64_t v31 = (uint64_t)-[objc_class size](v27, "size");
    id v30 = (void *)(*v29 + v31 / 1000);
    if (!__OFADD__(*v29, v31 / 1000)) {
      goto LABEL_10;
    }
    __break(1u);
  }

  id v32 = v30;
  uint64_t v33 = *v30;
  BOOL v34 = __OFADD__(v33, 1LL);
  uint64_t v35 = v33 + 1;
  if (v34)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  void *v32 = v35;
  uint64_t v36 = (uint64_t)-[objc_class size](v28, "size");
  id v29 = v76;
  id v30 = (void *)(*v76 + v36 / 1000);
  if (__OFADD__(*v76, v36 / 1000))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

LABEL_10:
  uint64_t v37 = (uint64_t)v28;
  uint64_t v38 = (uint64_t)v86;
  *id v29 = v30;
  double v39 = Date.timeIntervalSince(_:)(a1 + *(int *)(v38 + 24));
  double v40 = 0.0;
  if (v39 <= 0.0)
  {
    double v40 = v39;
    if (v39 >= 2592000.0)
    {
      uint64_t v87 = 0LL;
      uint64_t v60 = type metadata accessor for EventRecordUploader(0LL);
      sub_10000D1E8(&qword_10007F9D8, type metadata accessor for EventRecordUploader, (uint64_t)&unk_1000615B0);
      static LoggedObject.logger.getter(v60);
      uint64_t v61 = v75;
      uint64_t v62 = sub_10002CC4C(a1, v75, type metadata accessor for PendingEventData);
      uint64_t v63 = (os_log_s *)Logger.logObject.getter(v62);
      os_log_type_t v64 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v63, v64))
      {
        uint64_t v65 = swift_slowAlloc(12LL, -1LL);
        uint64_t v84 = v19;
        uint64_t v66 = (uint8_t *)v65;
        uint64_t v67 = swift_slowAlloc(32LL, -1LL);
        uint64_t v86 = (void *)v37;
        uint64_t v68 = v67;
        uint64_t v89 = v67;
        *(_DWORD *)uint64_t v66 = 136446210;
        uint64_t v69 = type metadata accessor for UUID(0LL);
        uint64_t v70 = sub_10000D1E8( &qword_10007F498,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v71 = dispatch thunk of CustomStringConvertible.description.getter(v69, v70);
        unint64_t v73 = v72;
        uint64_t v88 = sub_100046274(v71, v72, &v89);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89, v66 + 4);
        swift_bridgeObjectRelease(v73);
        sub_10002CCE4(v61, type metadata accessor for PendingEventData);
        _os_log_impl( (void *)&_mh_execute_header,  v63,  v64,  "Event %{public}s happened more than 30 days ago, setting immediate expiration time",  v66,  0xCu);
        swift_arrayDestroy(v68, 1LL, (char *)&type metadata for Any + 8);
        unint64_t v58 = v86;
        swift_slowDealloc(v68, -1LL, -1LL);
        swift_slowDealloc(v66, -1LL, -1LL);

        (*(void (**)(char *, uint64_t))(v85 + 8))(v84, v79);
        uint64_t v57 = v78;
      }

      else
      {
        sub_10002CCE4(v61, type metadata accessor for PendingEventData);

        (*(void (**)(char *, uint64_t))(v85 + 8))(v19, v79);
        uint64_t v57 = v78;
        unint64_t v58 = (void *)v37;
      }

      goto LABEL_19;
    }
  }

  uint64_t v86 = v28;
  double v41 = 2592000.0 - v40;
  uint64_t v42 = type metadata accessor for EventRecordUploader(0LL);
  sub_10000D1E8(&qword_10007F9D8, type metadata accessor for EventRecordUploader, (uint64_t)&unk_1000615B0);
  uint64_t v43 = v87;
  static LoggedObject.logger.getter(v42);
  uint64_t v44 = v77;
  uint64_t v45 = sub_10002CC4C(a1, v77, type metadata accessor for PendingEventData);
  uint64_t v46 = (void *)Logger.logObject.getter(v45);
  os_log_type_t v47 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled((os_log_t)v46, v47))
  {
    sub_10002CCE4(v44, type metadata accessor for PendingEventData);

    (*(void (**)(char *, uint64_t))(v85 + 8))(v43, v79);
    goto LABEL_18;
  }

  uint64_t v48 = swift_slowAlloc(22LL, -1LL);
  uint64_t v49 = swift_slowAlloc(32LL, -1LL);
  uint64_t v89 = v49;
  *(_DWORD *)uint64_t v48 = 136315394;
  uint64_t v50 = type metadata accessor for UUID(0LL);
  uint64_t v51 = sub_10000D1E8( &qword_10007F498,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v52 = dispatch thunk of CustomStringConvertible.description.getter(v50, v51);
  unint64_t v54 = v53;
  uint64_t v88 = sub_100046274(v52, v53, &v89);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89, v48 + 4);
  swift_bridgeObjectRelease(v54);
  sub_10002CCE4(v44, type metadata accessor for PendingEventData);
  *(_WORD *)(v48 + 12) = 2048;
  if ((~*(void *)&v41 & 0x7FF0000000000000LL) == 0) {
    goto LABEL_26;
  }
  if (v41 <= -9.22337204e18)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  uint64_t v55 = v79;
  uint64_t v56 = v85;
  if (v41 < 9.22337204e18)
  {
    uint64_t v88 = (uint64_t)v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89, v48 + 14);
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v46,  v47,  "Event %s will use expiration time %ld",  (uint8_t *)v48,  0x16u);
    swift_arrayDestroy(v49, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v49, -1LL, -1LL);
    swift_slowDealloc(v48, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v56 + 8))(v87, v55);
LABEL_18:
    uint64_t v57 = v78;
    unint64_t v58 = v86;
LABEL_19:
    Class isa = Double._bridgeToObjectiveC()().super.super.isa;
    [v58 setExpirationAfterTimeInterval:isa];

    *uint64_t v57 = v58;
    return;
  }

LABEL_28:
  __break(1u);
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

uint64_t sub_10002CA9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a1;
  uint64_t v7 = (void *)swift_task_alloc(dword_10007F9FC);
  *(void *)(v4 + 24) = v7;
  *uint64_t v7 = v4;
  v7[1] = sub_10002CB04;
  return sub_1000295B0(a4, a2);
}

uint64_t sub_10002CB04(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 24);
  uint64_t v6 = *v2;
  swift_task_dealloc(v5);
  if (v1) {
    return (*(uint64_t (**)(void))(v6 + 8))();
  }
  *(void *)(v4 + 32) = a1;
  return swift_task_switch(sub_10002CB80, 0LL, 0LL);
}

uint64_t sub_10002CB80()
{
  **(void **)(v0 + 16) = *(void *)(v0 + 32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10002CB98(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
}

uint64_t sub_10002CBBC(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = (void *)swift_task_alloc(dword_10007F9EC);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_10001D0F0;
  v7[2] = a1;
  uint64_t v8 = (void *)swift_task_alloc(dword_10007F9FC);
  v7[3] = v8;
  *uint64_t v8 = v7;
  v8[1] = sub_10002CB04;
  return sub_1000295B0(v6, a2);
}

uint64_t sub_10002CC4C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_10002CC90(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100026244(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10002CCAC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000263B0(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10002CCC8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000263C4(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10002CCE4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t sub_10002CD20(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000263D8(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10002CD3C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100026540(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10002CD58(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000266A8(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10002CD74(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_10005A3A8(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }

  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t result = *(void *)(v21 + 8 * v14);
      *(void *)(v21 + 8 * v14) = a1;
      return result;
    }

    goto LABEL_11;
  }

  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_10005D024();
    goto LABEL_7;
  }

  sub_10005AD60(v17, a3 & 1);
  unint64_t v23 = sub_10005A3A8(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }

  unint64_t v14 = v23;
  uint64_t v20 = *v4;
  if ((v18 & 1) != 0) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  sub_10005CB88(v14, (uint64_t)v11, a1, v20);
  return 1LL;
}

void (*sub_10002CED0( void (**a1)(id *a1), unint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_10002CF50(v6, a2, a3);
  return sub_10002CF24;
}

void sub_10002CF24(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32LL))(*a1);
  free(v1);
}

void (*sub_10002CF50(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001LL) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }

  if ((a2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if (*(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return sub_10002CFBC;
  }

  __break(1u);
  return result;
}

void sub_10002CFBC(id *a1)
{
}

uint64_t sub_10002CFC4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0) {
      uint64_t v16 = a3;
    }
    else {
      uint64_t v16 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7) {
      return a3;
    }
  }

  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v7) {
      return a3;
    }
  }

  if (!a1) {
    goto LABEL_25;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8LL;
  if (v6)
  {
    if (a3 < 0) {
      uint64_t v10 = a3;
    }
    else {
      uint64_t v10 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_10002D368();
        swift_bridgeObjectRetain(a3);
        for (unint64_t i = 0LL; i != v7; ++i)
        {
          sub_10000D228(&qword_10007FA20);
          char v13 = sub_10002CED0(v18, i, a3);
          id v15 = *v14;
          ((void (*)(void (**)(id *), void))v13)(v18, 0LL);
          *(void *)(a1 + 8 * i) = v15;
        }

        swift_bridgeObjectRelease(a3);
        return a3;
      }

      goto LABEL_24;
    }

LABEL_26:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_10002D1CC(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2LL;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64LL;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64LL;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

uint64_t sub_10002D254(uint64_t a1)
{
  unint64_t v1 = 300 * a1;
  if ((unsigned __int128)(a1 * (__int128)300LL) >> 64 != (300 * a1) >> 63)
  {
    __break(1u);
    goto LABEL_17;
  }

  if ((v1 & 0x8000000000000000LL) != 0)
  {
LABEL_17:
    char v6 = 2;
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  v6,  3451LL,  0);
    __break(1u);
    return result;
  }

  if (HIDWORD(v1) > 0x18) {
    return 7LL;
  }
  if (v1 >> 31 > 4) {
    return 6LL;
  }
  if (v1 >> 30) {
    return 5LL;
  }
  if (v1 >> 22 > 0x18) {
    return 4LL;
  }
  unint64_t v2 = v1 >> 21;
  BOOL v3 = v1 >= 0x100000;
  uint64_t v4 = 1LL;
  if (v3) {
    uint64_t v4 = 2LL;
  }
  if (v2 <= 4) {
    return v4;
  }
  else {
    return 3LL;
  }
}

uint64_t sub_10002D330(uint64_t result, uint64_t a2)
{
  if (result) {
    return swift_release(a2);
  }
  return result;
}

uint64_t sub_10002D340(uint64_t result)
{
  if (result != 1) {
    return swift_errorRelease(result);
  }
  return result;
}

id sub_10002D350(void *a1, char a2)
{
  if ((a2 & 1) != 0) {
    return (id)swift_errorRetain(a1);
  }
  else {
    return a1;
  }
}

void sub_10002D35C(void *a1, char a2)
{
  if ((a2 & 1) != 0) {
    swift_errorRelease(a1);
  }
  else {
}
  }

unint64_t sub_10002D368()
{
  unint64_t result = qword_10007FA30;
  if (!qword_10007FA30)
  {
    uint64_t v1 = sub_100004D58(&qword_10007FA20);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10007FA30);
  }

  return result;
}

Class sub_10002D3B4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for EventRecord.Field(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = v2;
  __chkstk_darwin(v2);
  char v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for RecordType(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10000D5E8(0LL, &qword_10007FA50, &OBJC_CLASS___CKRecordID_ptr);
  uint64_t v52 = a1;
  uint64_t v11 = UUID.uuidString.getter();
  char v13 = v12;
  unint64_t v54 = (int *)type metadata accessor for PendingEventData(0LL);
  v14.super.Class isa = (Class)static EventRecord.recordZoneID(forHomeIdentifier:)(a1 + v54[5]);
  v15._countAndFlagsBits = v11;
  v15._object = v13;
  Class isa = CKRecordID.init(recordName:zoneID:)(v15, v14).super.isa;
  uint64_t v17 = sub_10000D5E8(0LL, &qword_10007FA28, &OBJC_CLASS___CKRecord_ptr);
  uint64_t v18 = static EventRecord.recordType.getter();
  uint64_t v19 = RecordType.rawValue.getter(v18);
  uint64_t v21 = v20;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v53.super.Class isa = isa;
  v22._countAndFlagsBits = v19;
  v22._object = v21;
  Class v55 = CKRecord.init(recordType:recordID:)(v22, v53).super.isa;
  uint64_t v51 = *(void (**)(char *, void, uint64_t))(v3 + 104);
  uint64_t v23 = v4;
  v51(v6, enum case for EventRecord.Field.date(_:), v4);
  uint64_t v24 = static EventRecord.fieldKey(_:)(v6);
  uint64_t v26 = v25;
  uint64_t v50 = *(void (**)(char *, uint64_t))(v3 + 8);
  v50(v6, v4);
  uint64_t v27 = v52;
  uint64_t v28 = v52 + v54[6];
  uint64_t v29 = type metadata accessor for Date(0LL);
  uint64_t v57 = (void *)v29;
  unint64_t v58 = &protocol witness table for Date;
  id v30 = sub_10000D27C(v56);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 16LL))(v30, v28, v29);
  uint64_t v31 = v24;
  Class v32 = v55;
  CKRecordKeyValueSetting.subscript.setter(v56, v31, v26, v17);
  id v33 = -[objc_class encryptedValues](v32, "encryptedValues");
  uint64_t ObjectType = swift_getObjectType(v33);
  uint64_t v35 = v51;
  v51(v6, enum case for EventRecord.Field.data(_:), v23);
  uint64_t v36 = static EventRecord.fieldKey(_:)(v6);
  uint64_t v38 = v37;
  double v39 = v50;
  v50(v6, v23);
  double v40 = v54;
  double v41 = (uint64_t *)(v27 + v54[8]);
  uint64_t v42 = *v41;
  unint64_t v43 = v41[1];
  uint64_t v57 = &type metadata for Data;
  unint64_t v58 = &protocol witness table for Data;
  v56[0] = v42;
  v56[1] = v43;
  sub_100012154(v42, v43);
  CKRecordKeyValueSetting.subscript.setter(v56, v36, v38, ObjectType);
  v35(v6, enum case for EventRecord.Field.dataType(_:), v23);
  uint64_t v44 = static EventRecord.fieldKey(_:)(v6);
  uint64_t v46 = v45;
  v39(v6, v23);
  uint64_t v47 = *(void *)(v27 + v40[7]);
  uint64_t v57 = &type metadata for Int64;
  unint64_t v58 = &protocol witness table for Int64;
  v56[0] = v47;
  CKRecordKeyValueSetting.subscript.setter(v56, v44, v46, ObjectType);

  swift_unknownObjectRelease(v33);
  return v55;
}

Class sub_10002D6E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for EventRecord.Field(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_10000D228(&qword_10007FA38);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v9);
  CKRecordZoneID v14 = (char *)&v40 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v40 - v15;
  Class v41 = sub_10002D3B4(a1);
  if (a2)
  {
    if (*(void *)(a2 + 16)
      && (uint64_t v17 = type metadata accessor for PendingEventData(0LL),
          unint64_t v18 = sub_10005A3A8(a1 + *(int *)(v17 + 20)),
          (v19 & 1) != 0))
    {
      unint64_t v20 = v18;
      uint64_t v40 = *(void *)(a2 + 56);
      uint64_t v21 = type metadata accessor for LubyRackoffEncryptionKey(0LL);
      *(void *)&__int128 v42 = a1;
      uint64_t v22 = *(void *)(v21 - 8);
      (*(void (**)(char *, unint64_t, uint64_t))(v22 + 16))( v16,  v40 + *(void *)(v22 + 72) * v20,  v21);
      uint64_t v23 = *(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56);
      a1 = v42;
      v23(v16, 0LL, 1LL, v21);
    }

    else
    {
      uint64_t v21 = type metadata accessor for LubyRackoffEncryptionKey(0LL);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56LL))(v16, 1LL, 1LL, v21);
    }

    sub_10002DC94((uint64_t)v16, (uint64_t)v14);
    type metadata accessor for LubyRackoffEncryptionKey(0LL);
    *(void *)&__int128 v42 = *(void *)(v21 - 8);
    uint64_t v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48);
    if (v24(v14, 1LL, v21) == 1)
    {
      __break(1u);
    }

    else
    {
      sub_10000D5AC((uint64_t)v14, &qword_10007FA38);
      (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for EventRecord.Field.tags(_:), v4);
      uint64_t v40 = static EventRecord.fieldKey(_:)(v7);
      uint64_t v26 = v25;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      sub_10002DC94((uint64_t)v16, (uint64_t)v11);
      if (v24(v11, 1LL, v21) != 1)
      {
        uint64_t v27 = type metadata accessor for PendingEventData(0LL);
        uint64_t v28 = *(void *)(a1 + *(int *)(v27 + 36));
        __chkstk_darwin(v27);
        *(&v40 - 2) = a1;
        *(&v40 - 1) = (uint64_t)v11;
        swift_bridgeObjectRetain(v28);
        uint64_t v29 = v46;
        id v30 = sub_100027D58( (void (*)(__int128 *__return_ptr, void *, uint64_t *))sub_10002DCDC,  (uint64_t)(&v40 - 4),  v28);
        if (v29)
        {
          swift_bridgeObjectRelease(v28);
          sub_10000D5AC((uint64_t)v16, &qword_10007FA38);
          swift_bridgeObjectRelease(v26);
          Class v31 = v41;

          (*(void (**)(char *, uint64_t))(v42 + 8))(v11, v21);
        }

        else
        {
          uint64_t v36 = v30;
          swift_bridgeObjectRelease(v28);
          (*(void (**)(char *, uint64_t))(v42 + 8))(v11, v21);
          uint64_t v44 = sub_10000D228(&qword_10007FA40);
          unint64_t v45 = sub_10002DC38();
          v43[0] = v36;
          uint64_t v37 = sub_10000D5E8(0LL, &qword_10007FA28, &OBJC_CLASS___CKRecord_ptr);
          Class v31 = v41;
          CKRecordKeyValueSetting.subscript.setter(v43, v40, v26, v37);
          sub_10000D5AC((uint64_t)v16, &qword_10007FA38);
        }

        return v31;
      }
    }

    __break(1u);
    JUMPOUT(0x10002DC28LL);
  }

  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for EventRecord.Field.tags(_:), v4);
  uint64_t v32 = static EventRecord.fieldKey(_:)(v7);
  uint64_t v34 = v33;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v35 = *(void *)(a1 + *(int *)(type metadata accessor for PendingEventData(0LL) + 36));
  if (*(void *)(v35 + 16))
  {
    swift_bridgeObjectRetain(v35);
    __asm { BR              X9 }
  }

  uint64_t v44 = sub_10000D228(&qword_10007FA40);
  unint64_t v45 = sub_10002DC38();
  v43[0] = _swiftEmptyArrayStorage;
  uint64_t v38 = sub_10000D5E8(0LL, &qword_10007FA28, &OBJC_CLASS___CKRecord_ptr);
  Class v31 = v41;
  CKRecordKeyValueSetting.subscript.setter(v43, v32, v34, v38);
  return v31;
}

unint64_t sub_10002DC38()
{
  unint64_t result = qword_10007FA48;
  if (!qword_10007FA48)
  {
    uint64_t v1 = sub_100004D58(&qword_10007FA40);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_10007FA48);
  }

  return result;
}

uint64_t sub_10002DC94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D228(&qword_10007FA38);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

void sub_10002DCDC(uint64_t a1)
{
}

void *sub_10002DCF8(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v23 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v23 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v23);
  }

  else
  {
    __int128 v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)v4 + v8;
    uint64_t v10 = (uint64_t)a2 + v8;
    uint64_t v11 = type metadata accessor for DatabaseConfiguration(0LL);
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16LL);
    v12(v9, v10, v11);
    uint64_t v13 = a3[7];
    *((_BYTE *)v4 + a3[6]) = *((_BYTE *)a2 + a3[6]);
    *(void *)((char *)v4 + v13) = *(uint64_t *)((char *)a2 + v13);
    uint64_t v14 = a3[8];
    uint64_t v15 = (char *)v4 + v14;
    uint64_t v16 = (uint64_t)a2 + v14;
    v12((char *)v4 + v14, v16, v11);
    uint64_t v17 = (int *)type metadata accessor for TagEncryptionKeyController(0LL);
    uint64_t v18 = v17[5];
    char v19 = &v15[v18];
    uint64_t v20 = v16 + v18;
    *(void *)char v19 = *(void *)v20;
    v19[8] = *(_BYTE *)(v20 + 8);
    v15[v17[6]] = *(_BYTE *)(v16 + v17[6]);
    uint64_t v21 = v17[7];
    __int128 v22 = *(_OWORD *)(v16 + v21 + 24);
    *(_OWORD *)&v15[v21 + 24] = v22;
    (**(void (***)(void))(v22 - 8))();
  }

  return v4;
}

uint64_t sub_10002DE38(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for DatabaseConfiguration(0LL);
  uint64_t v6 = *(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL);
  v6(v4, v5);
  __int128 v7 = (char *)a1 + *(int *)(a2 + 32);
  v6(v7, v5);
  uint64_t v8 = &v7[*(int *)(type metadata accessor for TagEncryptionKeyController(0LL) + 28)];
  return _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v8);
}

uint64_t sub_10002DEB8(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for DatabaseConfiguration(0LL);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL);
  v11(v8, v9, v10);
  uint64_t v12 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(void *)(a1 + v12) = *(void *)(a2 + v12);
  uint64_t v13 = a3[8];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  v11(a1 + v13, v15, v10);
  uint64_t v16 = (int *)type metadata accessor for TagEncryptionKeyController(0LL);
  uint64_t v17 = v16[5];
  uint64_t v18 = v14 + v17;
  uint64_t v19 = v15 + v17;
  *(void *)uint64_t v18 = *(void *)v19;
  *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
  *(_BYTE *)(v14 + v16[6]) = *(_BYTE *)(v15 + v16[6]);
  uint64_t v20 = v16[7];
  __int128 v21 = *(_OWORD *)(v15 + v20 + 24);
  *(_OWORD *)(v14 + v20 + 24) = v21;
  (**(void (***)(void))(v21 - 8))();
  return a1;
}

void *sub_10002DFC4(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for DatabaseConfiguration(0LL);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24LL);
  v10(v7, v8, v9);
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  uint64_t v11 = a3[8];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  v10((char *)a1 + v11, v13, v9);
  uint64_t v14 = (int *)type metadata accessor for TagEncryptionKeyController(0LL);
  uint64_t v15 = v14[5];
  uint64_t v16 = &v12[v15];
  uint64_t v17 = &v13[v15];
  char v18 = v17[8];
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v18;
  v12[v14[6]] = v13[v14[6]];
  sub_10002E0AC(&v12[v14[7]], &v13[v14[7]]);
  return a1;
}

void *sub_10002E0AC(void *result, void *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v9 = *(void *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        uint64_t v11 = *result;
        uint64_t v12 = *a2;
        swift_retain(*a2);
        unint64_t result = (void *)swift_release(v11);
        *uint64_t v3 = v12;
      }

      else
      {
        return (void *)(*(uint64_t (**)(void *, void *, void))(v9 + 24))(result, a2, result[3]);
      }
    }

    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      int v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        uint64_t v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          uint64_t v14 = *a2;
          *uint64_t v3 = *a2;
          swift_retain(v14);
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(result, a2, v5);
        }

        return (void *)swift_release(v10);
      }

      else
      {
        (*(void (**)(_BYTE *, void *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          uint64_t v13 = *a2;
          *uint64_t v3 = *a2;
          swift_retain(v13);
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v3, a2, v5);
        }

        return (void *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }

  return result;
}

uint64_t sub_10002E214(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for DatabaseConfiguration(0LL);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32LL);
  v11(v8, v9, v10);
  uint64_t v12 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(void *)(a1 + v12) = *(void *)(a2 + v12);
  uint64_t v13 = a3[8];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  v11(a1 + v13, v15, v10);
  uint64_t v16 = (int *)type metadata accessor for TagEncryptionKeyController(0LL);
  uint64_t v17 = v16[5];
  uint64_t v18 = v14 + v17;
  uint64_t v19 = v15 + v17;
  *(void *)uint64_t v18 = *(void *)v19;
  *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
  *(_BYTE *)(v14 + v16[6]) = *(_BYTE *)(v15 + v16[6]);
  uint64_t v20 = v16[7];
  uint64_t v21 = v14 + v20;
  uint64_t v22 = v15 + v20;
  *(void *)(v21 + 32) = *(void *)(v22 + 32);
  __int128 v23 = *(_OWORD *)(v22 + 16);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
  *(_OWORD *)(v21 + 16) = v23;
  return a1;
}

uint64_t sub_10002E310(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for DatabaseConfiguration(0LL);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40LL);
  v11(v8, v9, v10);
  uint64_t v12 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(void *)(a1 + v12) = *(void *)(a2 + v12);
  uint64_t v13 = a3[8];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  v11(a1 + v13, v15, v10);
  uint64_t v16 = (int *)type metadata accessor for TagEncryptionKeyController(0LL);
  uint64_t v17 = v16[5];
  uint64_t v18 = v14 + v17;
  uint64_t v19 = v15 + v17;
  *(void *)uint64_t v18 = *(void *)v19;
  *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
  *(_BYTE *)(v14 + v16[6]) = *(_BYTE *)(v15 + v16[6]);
  uint64_t v20 = v16[7];
  uint64_t v21 = v14 + v20;
  uint64_t v22 = v15 + v20;
  _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0((void *)v21);
  __int128 v23 = *(_OWORD *)(v22 + 16);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
  *(_OWORD *)(v21 + 16) = v23;
  *(void *)(v21 + 32) = *(void *)(v22 + 32);
  return a1;
}

uint64_t sub_10002E418(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10002E424);
}

uint64_t sub_10002E424(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for DatabaseConfiguration(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a3 + 20);
    }

    else
    {
      uint64_t v10 = type metadata accessor for TagEncryptionKeyController(0LL);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a3 + 32);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }

uint64_t sub_10002E4C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10002E4D0);
}

uint64_t sub_10002E4D0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for DatabaseConfiguration(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a4 + 20);
    }

    else
    {
      uint64_t v10 = type metadata accessor for TagEncryptionKeyController(0LL);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a4 + 32);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }

  return result;
}

uint64_t sub_10002E56C(uint64_t a1)
{
  v5[0] = "(";
  uint64_t result = type metadata accessor for DatabaseConfiguration(319LL);
  if (v3 <= 0x3F)
  {
    v5[1] = *(void *)(result - 8) + 64LL;
    uint64_t v5[2] = &unk_100061608;
    v5[3] = (char *)&value witness table for Builtin.Int64 + 64;
    uint64_t result = type metadata accessor for TagEncryptionKeyController(319LL);
    if (v4 <= 0x3F)
    {
      v5[4] = *(void *)(result - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 5LL, v5, a1 + 16);
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_10002E614(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for EventRecordUploader.Configuration(0LL);
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *(void *)a1 = *a2;
    a1 = v22 + ((v5 + 16LL) & ~(unint64_t)v5);
    swift_retain(v22);
  }

  else
  {
    __int128 v6 = (int *)v4;
    __int128 v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    uint64_t v8 = v6[5];
    uint64_t v9 = a1 + v8;
    uint64_t v10 = (uint64_t)a2 + v8;
    uint64_t v11 = type metadata accessor for DatabaseConfiguration(0LL);
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16LL);
    v12(v9, v10, v11);
    *(_BYTE *)(a1 + v6[6]) = *((_BYTE *)a2 + v6[6]);
    *(void *)(a1 + v6[7]) = *(uint64_t *)((char *)a2 + v6[7]);
    uint64_t v13 = v6[8];
    uint64_t v14 = a1 + v13;
    uint64_t v15 = (uint64_t)a2 + v13;
    v12(a1 + v13, v15, v11);
    uint64_t v16 = (int *)type metadata accessor for TagEncryptionKeyController(0LL);
    uint64_t v17 = v16[5];
    uint64_t v18 = v14 + v17;
    uint64_t v19 = v15 + v17;
    *(void *)uint64_t v18 = *(void *)v19;
    *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
    *(_BYTE *)(v14 + v16[6]) = *(_BYTE *)(v15 + v16[6]);
    uint64_t v20 = v16[7];
    __int128 v21 = *(_OWORD *)(v15 + v20 + 24);
    *(_OWORD *)(v14 + v20 + 24) = v21;
    (**(void (***)(void))(v21 - 8))();
  }

  return a1;
}

uint64_t sub_10002E760(void *a1)
{
  uint64_t v2 = type metadata accessor for EventRecordUploader.Configuration(0LL);
  unint64_t v3 = (char *)a1 + *(int *)(v2 + 20);
  uint64_t v4 = type metadata accessor for DatabaseConfiguration(0LL);
  int v5 = *(void (**)(char *, uint64_t))(*(void *)(v4 - 8) + 8LL);
  v5(v3, v4);
  __int128 v6 = (char *)a1 + *(int *)(v2 + 32);
  v5(v6, v4);
  __int128 v7 = &v6[*(int *)(type metadata accessor for TagEncryptionKeyController(0LL) + 28)];
  return _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v7);
}

uint64_t sub_10002E7E8(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  int v5 = (int *)type metadata accessor for EventRecordUploader.Configuration(0LL);
  uint64_t v6 = v5[5];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for DatabaseConfiguration(0LL);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16LL);
  v10(v7, v8, v9);
  *(_BYTE *)(a1 + v5[6]) = *(_BYTE *)(a2 + v5[6]);
  *(void *)(a1 + v5[7]) = *(void *)(a2 + v5[7]);
  uint64_t v11 = v5[8];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  v10(a1 + v11, v13, v9);
  uint64_t v14 = (int *)type metadata accessor for TagEncryptionKeyController(0LL);
  uint64_t v15 = v14[5];
  uint64_t v16 = v12 + v15;
  uint64_t v17 = v13 + v15;
  *(void *)uint64_t v16 = *(void *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  *(_BYTE *)(v12 + v14[6]) = *(_BYTE *)(v13 + v14[6]);
  uint64_t v18 = v14[7];
  __int128 v19 = *(_OWORD *)(v13 + v18 + 24);
  *(_OWORD *)(v12 + v18 + 24) = v19;
  (**(void (***)(void))(v19 - 8))();
  return a1;
}

void *sub_10002E900(void *a1, void *a2)
{
  __int128 v4 = (int *)type metadata accessor for EventRecordUploader.Configuration(0LL);
  uint64_t v5 = v4[5];
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for DatabaseConfiguration(0LL);
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 24LL);
  v9(v6, v7, v8);
  *((_BYTE *)a1 + v4[6]) = *((_BYTE *)a2 + v4[6]);
  *(void *)((char *)a1 + v4[7]) = *(void *)((char *)a2 + v4[7]);
  uint64_t v10 = v4[8];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  v9((char *)a1 + v10, v12, v8);
  uint64_t v13 = (int *)type metadata accessor for TagEncryptionKeyController(0LL);
  uint64_t v14 = v13[5];
  uint64_t v15 = &v11[v14];
  uint64_t v16 = &v12[v14];
  char v17 = v16[8];
  *(void *)uint64_t v15 = *(void *)v16;
  v15[8] = v17;
  v11[v13[6]] = v12[v13[6]];
  sub_10002E0AC(&v11[v13[7]], &v12[v13[7]]);
  return a1;
}

uint64_t sub_10002E9F0(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v5 = (int *)type metadata accessor for EventRecordUploader.Configuration(0LL);
  uint64_t v6 = v5[5];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for DatabaseConfiguration(0LL);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL);
  v10(v7, v8, v9);
  *(_BYTE *)(a1 + v5[6]) = *(_BYTE *)(a2 + v5[6]);
  *(void *)(a1 + v5[7]) = *(void *)(a2 + v5[7]);
  uint64_t v11 = v5[8];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  v10(a1 + v11, v13, v9);
  uint64_t v14 = (int *)type metadata accessor for TagEncryptionKeyController(0LL);
  uint64_t v15 = v14[5];
  uint64_t v16 = v12 + v15;
  uint64_t v17 = v13 + v15;
  *(void *)uint64_t v16 = *(void *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  *(_BYTE *)(v12 + v14[6]) = *(_BYTE *)(v13 + v14[6]);
  uint64_t v18 = v14[7];
  uint64_t v19 = v12 + v18;
  uint64_t v20 = v13 + v18;
  *(void *)(v19 + 32) = *(void *)(v20 + 32);
  __int128 v21 = *(_OWORD *)(v20 + 16);
  *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
  *(_OWORD *)(v19 + 16) = v21;
  return a1;
}

uint64_t sub_10002EAF8(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v5 = (int *)type metadata accessor for EventRecordUploader.Configuration(0LL);
  uint64_t v6 = v5[5];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for DatabaseConfiguration(0LL);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40LL);
  v10(v7, v8, v9);
  *(_BYTE *)(a1 + v5[6]) = *(_BYTE *)(a2 + v5[6]);
  *(void *)(a1 + v5[7]) = *(void *)(a2 + v5[7]);
  uint64_t v11 = v5[8];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  v10(a1 + v11, v13, v9);
  uint64_t v14 = (int *)type metadata accessor for TagEncryptionKeyController(0LL);
  uint64_t v15 = v14[5];
  uint64_t v16 = v12 + v15;
  uint64_t v17 = v13 + v15;
  *(void *)uint64_t v16 = *(void *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  *(_BYTE *)(v12 + v14[6]) = *(_BYTE *)(v13 + v14[6]);
  uint64_t v18 = v14[7];
  uint64_t v19 = v12 + v18;
  uint64_t v20 = v13 + v18;
  _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0((void *)v19);
  __int128 v21 = *(_OWORD *)(v20 + 16);
  *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
  *(_OWORD *)(v19 + 16) = v21;
  *(void *)(v19 + 32) = *(void *)(v20 + 32);
  return a1;
}

uint64_t sub_10002EC0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10002EC18);
}

uint64_t sub_10002EC18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for EventRecordUploader.Configuration(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(a1, a2, v4);
}

uint64_t sub_10002EC54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10002EC60);
}

uint64_t sub_10002EC60(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for EventRecordUploader.Configuration(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(a1, a2, a2, v4);
}

uint64_t sub_10002ECA0(uint64_t a1)
{
  uint64_t result = type metadata accessor for EventRecordUploader.Configuration(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 1LL, &v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_10002ED08(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  v2[6] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[7] = v4;
  v2[8] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10002ED68, 0LL, 0LL);
}

uint64_t sub_10002ED68()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = type metadata accessor for TagEncryptionKeyController(0LL);
  sub_10000D1E8(&qword_10007FBB8, type metadata accessor for TagEncryptionKeyController, (uint64_t)&unk_100061684);
  static LoggedObject.logger.getter(v2);
  uint64_t v3 = swift_bridgeObjectRetain_n(v1, 2LL);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v23 = v0[7];
    uint64_t v24 = v0[6];
    uint64_t v25 = v0[8];
    uint64_t v6 = v0[4];
    uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v8 = swift_slowAlloc(32LL, -1LL);
    uint64_t v26 = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    uint64_t v9 = type metadata accessor for UUID(0LL);
    uint64_t v10 = sub_10000D1E8( &qword_10007F4A0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v11 = swift_bridgeObjectRetain(v6);
    uint64_t v12 = Set.description.getter(v11, v9, v10);
    unint64_t v14 = v13;
    swift_bridgeObjectRelease(v6);
    v0[3] = sub_100046274(v12, v14, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v7 + 4);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease_n(v6, 2LL);
    _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "[Colander] Ensuring encryption keys for homes with identifiers: %s",  v7,  0xCu);
    swift_arrayDestroy(v8, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);

    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v25, v24);
  }

  else
  {
    uint64_t v16 = v0[7];
    uint64_t v15 = v0[8];
    uint64_t v17 = v0[6];
    swift_bridgeObjectRelease_n(v0[4], 2LL);

    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
  }

  uint64_t v18 = sub_10000D228(&qword_10007FBD0);
  uint64_t v19 = swift_task_alloc(32LL);
  v0[9] = v19;
  *(_OWORD *)(v19 + 16) = *((_OWORD *)v0 + 2);
  uint64_t v20 = sub_10000D228(&qword_10007FBE8);
  __int128 v21 = (void *)swift_task_alloc(async function pointer to withThrowingTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  v0[10] = v21;
  *__int128 v21 = v0;
  v21[1] = sub_10002F02C;
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)(v0 + 2, v18, v20, 0LL, 0LL, &unk_10007FBE0, v19, v18);
}

uint64_t sub_10002F02C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 80);
  *(void *)(*v1 + 88) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_10002F0D4;
  }

  else
  {
    swift_task_dealloc(*(void *)(v2 + 72));
    uint64_t v4 = sub_10002F098;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_10002F098()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_task_dealloc(*(void *)(v0 + 64));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_10002F0D4()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_task_dealloc(*(void *)(v0 + 72));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002F110(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[14] = a3;
  v4[15] = a4;
  v4[12] = a1;
  v4[13] = a2;
  unint64_t v5 = (*(void *)(*(void *)(sub_10000D228(&qword_10007FA38) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[16] = swift_task_alloc(v5);
  v4[17] = swift_task_alloc(v5);
  uint64_t v6 = type metadata accessor for LubyRackoffEncryptionKey(0LL);
  v4[18] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[19] = v7;
  unint64_t v8 = (*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[20] = swift_task_alloc(v8);
  v4[21] = swift_task_alloc(v8);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  v4[22] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v4[23] = v10;
  uint64_t v11 = *(void *)(v10 + 64);
  v4[24] = v11;
  unint64_t v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v4[25] = swift_task_alloc(v12);
  v4[26] = swift_task_alloc(v12);
  v4[27] = swift_task_alloc(v12);
  uint64_t v13 = *(void *)(type metadata accessor for TagEncryptionKeyController(0LL) - 8);
  v4[28] = v13;
  uint64_t v14 = *(void *)(v13 + 64);
  v4[29] = v14;
  v4[30] = swift_task_alloc((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v15 = (*(void *)(*(void *)(sub_10000D228(&qword_10007EE68) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[31] = swift_task_alloc(v15);
  v4[32] = swift_task_alloc(v15);
  uint64_t v16 = sub_10000D228(&qword_10007FBF0);
  v4[33] = swift_task_alloc((*(void *)(*(void *)(v16 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_10000D228(&qword_10007FBF8);
  v4[34] = v17;
  uint64_t v18 = *(void *)(v17 - 8);
  v4[35] = v18;
  v4[36] = swift_task_alloc((*(void *)(v18 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = sub_10000D228(&qword_10007F488);
  v4[37] = swift_task_alloc((*(void *)(*(void *)(v19 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10002F2D0, 0LL, 0LL);
}

void sub_10002F2D0()
{
  uint64_t v56 = *(void *)(v0 + 224);
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v53 = v1 + 56;
  uint64_t v2 = *(void *)(v0 + 184);
  uint64_t v3 = -1LL;
  uint64_t v4 = -1LL << *(_BYTE *)(v1 + 32);
  if (-v4 < 64) {
    uint64_t v3 = ~(-1LL << -(char)v4);
  }
  unint64_t v5 = v3 & *(void *)(v1 + 56);
  int64_t v54 = (unint64_t)(63 - v4) >> 6;
  uint64_t v57 = *(void *)(v0 + 112);
  __n128 v6 = swift_bridgeObjectRetain(v1);
  int64_t v7 = 0LL;
  uint64_t v55 = v2;
  while (1)
  {
    if (v5)
    {
      unint64_t v10 = __clz(__rbit64(v5));
      uint64_t v11 = (v5 - 1) & v5;
      unint64_t v12 = v10 | (v7 << 6);
      goto LABEL_21;
    }

    int64_t v13 = v7 + 1;
    if (__OFADD__(v7, 1LL))
    {
      __break(1u);
      goto LABEL_33;
    }

    if (v13 >= v54) {
      goto LABEL_30;
    }
    unint64_t v14 = *(void *)(v53 + 8 * v13);
    ++v7;
    if (!v14)
    {
      int64_t v7 = v13 + 1;
      if (v13 + 1 >= v54) {
        goto LABEL_30;
      }
      unint64_t v14 = *(void *)(v53 + 8 * v7);
      if (!v14)
      {
        int64_t v7 = v13 + 2;
        if (v13 + 2 >= v54) {
          goto LABEL_30;
        }
        unint64_t v14 = *(void *)(v53 + 8 * v7);
        if (!v14) {
          break;
        }
      }
    }

LABEL_33:
  __break(1u);
}

        unint64_t v12 = (v22 - 1) & v22;
        uint64_t v20 = __clz(__rbit64(v22)) + (v9 << 6);
      }

      uint64_t v28 = *(void *)(v5 + 56);
      uint64_t v29 = *(unsigned int *)(*(void *)(v5 + 48) + 4 * v20);
      uint64_t v30 = *(void *)(v28 + 8 * v20);
      if ((a2 & 1) == 0) {
        swift_unknownObjectRetain(*(void *)(v28 + 8 * v20));
      }
      uint64_t result = static Hasher._hash(seed:bytes:count:)(*(void *)(v8 + 40), v29, 4LL);
      int64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
      uint64_t v16 = result & ~v15;
      uint64_t v17 = v16 >> 6;
      if (((-1LL << v16) & ~*(void *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        uint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v24 = 0;
        uint64_t v25 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }

          uint64_t v26 = v17 == v25;
          if (v17 == v25) {
            uint64_t v17 = 0LL;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v14 + 8 * v17);
        }

        while (v27 == -1);
        uint64_t v18 = __clz(__rbit64(~v27)) + (v17 << 6);
      }

      *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
      *(_DWORD *)(*(void *)(v8 + 48) + 4 * v18) = v29;
      *(void *)(*(void *)(v8 + 56) + 8 * v18) = v30;
      ++*(void *)(v8 + 16);
    }
  }

  uint64_t result = swift_release(v5);
LABEL_43:
  *uint64_t v3 = v8;
  return result;
}

    uint64_t v11 = (v24 - 1) & v24;
    uint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void **)(*(void *)(v5 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      uint64_t v34 = v33;
    }

    Hasher.init(_seed:)(v40);
    String.hash(into:)(v40, v32, v31);
    uint64_t result = Hasher._finalize()();
    int64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v16 = result & ~v15;
    uint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v26 = 0;
      uint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v28 = v17 == v27;
        if (v17 == v27) {
          uint64_t v17 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }

      while (v29 == -1);
      uint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    uint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *uint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v36;
  uint64_t v23 = (void *)(v5 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v35 = 1LL << *(_BYTE *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v23 = -1LL << v35;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

    uint64_t v11 = (v24 - 1) & v24;
    uint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      swift_bridgeObjectRetain(v33);
    }

    Hasher.init(_seed:)(v38);
    String.hash(into:)(v38, v32, v31);
    uint64_t result = Hasher._finalize()();
    int64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v16 = result & ~v15;
    uint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v26 = 0;
      uint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v28 = v17 == v27;
        if (v17 == v27) {
          uint64_t v17 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }

      while (v29 == -1);
      uint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    uint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *uint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v23 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v34 = 1LL << *(_BYTE *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v23 = -1LL << v34;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

    uint64_t v11 = (v25 - 1) & v25;
    uint64_t v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    uint64_t v31 = 8 * v22;
    uint64_t v32 = *(void **)(*(void *)(v5 + 48) + v31);
    uint64_t v33 = *(void *)(*(void *)(v5 + 56) + v31);
    if ((a2 & 1) == 0)
    {
      uint64_t v34 = v32;
      swift_errorRetain(v33);
    }

    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v8 + 40));
    uint64_t v16 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v17 = result & ~v16;
    uint64_t v18 = v17 >> 6;
    if (((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      uint64_t v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v29 = v18 == v28;
        if (v18 == v28) {
          uint64_t v18 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v13 + 8 * v18);
      }

      while (v30 == -1);
      uint64_t v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }

    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    uint64_t v20 = 8 * v19;
    *(void *)(*(void *)(v8 + 48) + v20) = v32;
    *(void *)(*(void *)(v8 + 56) + v20) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v36;
  uint64_t v24 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v35 = 1LL << *(_BYTE *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    void *v24 = -1LL << v35;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

uint64_t sub_10002F774()
{
  uint64_t v2 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 312));
  if (v0)
  {
    *(void *)(v2 + 344) = &_swiftEmptyDictionarySingleton;
    uint64_t v3 = sub_10002FD44;
  }

  else
  {
    *(void *)(v2 + 320) = &_swiftEmptyDictionarySingleton;
    uint64_t v3 = sub_10002F7E4;
  }

  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_10002F7E4()
{
  uint64_t v1 = *(void *)(v0 + 304);
  uint64_t v2 = *(void *)(v0 + 264);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 48LL))(v2, 1LL, v1) == 1)
  {
    uint64_t v3 = *(void *)(v0 + 320);
    uint64_t v5 = *(void *)(v0 + 288);
    uint64_t v4 = *(void *)(v0 + 296);
    uint64_t v7 = *(void *)(v0 + 248);
    uint64_t v6 = *(void *)(v0 + 256);
    uint64_t v8 = *(void *)(v0 + 240);
    uint64_t v9 = *(void *)(v0 + 216);
    uint64_t v68 = *(void *)(v0 + 208);
    uint64_t v69 = *(void *)(v0 + 200);
    uint64_t v70 = *(void *)(v0 + 168);
    uint64_t v71 = *(void *)(v0 + 160);
    uint64_t v72 = *(void *)(v0 + 136);
    uint64_t v73 = *(void *)(v0 + 128);
    unint64_t v10 = *(void **)(v0 + 96);
    (*(void (**)(uint64_t, void))(*(void *)(v0 + 280) + 8LL))(v5, *(void *)(v0 + 272));
    *unint64_t v10 = v3;
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v2);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v68);
    swift_task_dealloc(v69);
    swift_task_dealloc(v70);
    swift_task_dealloc(v71);
    swift_task_dealloc(v72);
    swift_task_dealloc(v73);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  uint64_t v12 = *(void *)(v0 + 208);
  unint64_t v74 = *(void *)(v0 + 200);
  uint64_t v13 = *(void *)(v0 + 176);
  uint64_t v14 = *(void *)(v0 + 184);
  uint64_t v15 = *(void *)(v0 + 168);
  uint64_t v17 = *(void *)(v0 + 144);
  uint64_t v16 = *(void *)(v0 + 152);
  uint64_t v18 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 136);
  uint64_t v19 = v2 + *(int *)(v1 + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32))(v12, v2, v13);
  uint64_t v20 = v19;
  unint64_t v21 = *(void *)(v16 + 32);
  ((void (*)(uint64_t, uint64_t, uint64_t))v21)(v15, v20, v17);
  uint64_t v22 = *(void (**)(unint64_t, uint64_t, uint64_t))(v14 + 16);
  v22(v74, v12, v13);
  (*(void (**)(void, uint64_t, uint64_t))(v16 + 16))(v18, v15, v17);
  uint64_t v23 = *(void (**)(void (*)(uint64_t, unint64_t, uint64_t), uint64_t, uint64_t, uint64_t))(v16 + 56);
  v23(v18, 0LL, 1LL, v17);
  int v24 = (*(uint64_t (**)(void, uint64_t, uint64_t))(v16 + 48))(v18, 1LL, v17);
  uint64_t v25 = (void *)(v0 + 320);
  uint64_t v26 = *(void *)(v0 + 320);
  uint64_t v27 = *(void *)(v0 + 200);
  if (v24 == 1)
  {
    uint64_t v18 = (void (*)(uint64_t, unint64_t, uint64_t))v21;
    sub_10000D5AC(*(void *)(v0 + 136), &qword_10007FA38);
    swift_bridgeObjectRetain(v26);
    unint64_t v21 = sub_10005A3A8(v27);
    char v29 = v28;
    swift_bridgeObjectRelease(v26);
    if ((v29 & 1) == 0)
    {
      uint64_t v50 = *(void *)(v0 + 184);
      v23(*(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 128), 1LL, 1LL, *(void *)(v0 + 144));
      uint64_t v38 = *(void (**)(unint64_t, uint64_t))(v50 + 8);
      uint64_t v39 = *(void *)(v0 + 320);
      goto LABEL_12;
    }

    unint64_t v30 = v0 + 80;
    uint64_t v31 = *v25;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v25);
    *(void *)(v0 + 80) = v31;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
LABEL_6:
      uint64_t v33 = *(void *)(v0 + 184);
      uint64_t v34 = *(void *)(v0 + 144);
      uint64_t v35 = *(void *)(v0 + 152);
      uint64_t v36 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 128);
      unint64_t v37 = *(void *)(*v25 + 48LL) + *(void *)(v33 + 72) * v21;
      uint64_t v38 = *(void (**)(unint64_t, uint64_t))(v33 + 8);
      v38(v37, *(void *)(v0 + 176));
      uint64_t v39 = *(void *)(v0 + 80);
      v18((uint64_t)v36, *(void *)(v39 + 56) + *(void *)(v35 + 72) * v21, v34);
      sub_1000347E4(v21, v39);
      swift_bridgeObjectRelease(0x8000000000000000LL);
      v23(v36, 0LL, 1LL, v34);
LABEL_12:
      uint64_t v51 = *(void *)(v0 + 128);
      v38(*(void *)(v0 + 200), *(void *)(v0 + 176));
      sub_10000D5AC(v51, &qword_10007FA38);
LABEL_21:
      *(void *)(v0 + 328) = v39;
      unint64_t v65 = *(void *)(v0 + 208);
      uint64_t v66 = *(void *)(v0 + 176);
      (*(void (**)(void, void))(*(void *)(v0 + 152) + 8LL))( *(void *)(v0 + 168),  *(void *)(v0 + 144));
      v38(v65, v66);
      uint64_t v67 = (void *)swift_task_alloc(_sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTu[1]);
      *(void *)(v0 + 336) = v67;
      *uint64_t v67 = v0;
      v67[1] = sub_10002FCD4;
      return _sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF( *(void *)(v0 + 264),  0LL,  0LL,  *(void *)(v0 + 272),  v0 + 72);
    }

uint64_t sub_10002FCD4()
{
  uint64_t v2 = *(void **)v1;
  swift_task_dealloc(*(void *)(*(void *)v1 + 336LL));
  if (v0)
  {
    v2[43] = v2[41];
    uint64_t v3 = sub_10002FD44;
  }

  else
  {
    v2[40] = v2[41];
    uint64_t v3 = sub_10002F7E4;
  }

  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_10002FD44()
{
  uint64_t v1 = *(void *)(v0 + 344);
  uint64_t v3 = *(void *)(v0 + 288);
  uint64_t v2 = *(void *)(v0 + 296);
  uint64_t v5 = *(void *)(v0 + 256);
  uint64_t v4 = *(void *)(v0 + 264);
  uint64_t v7 = *(void *)(v0 + 240);
  uint64_t v6 = *(void *)(v0 + 248);
  uint64_t v8 = *(void *)(v0 + 216);
  uint64_t v10 = *(void *)(v0 + 208);
  uint64_t v11 = *(void *)(v0 + 200);
  uint64_t v12 = *(void *)(v0 + 168);
  uint64_t v13 = *(void *)(v0 + 160);
  uint64_t v14 = *(void *)(v0 + 136);
  uint64_t v15 = *(void *)(v0 + 128);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 280) + 8LL))(v3, *(void *)(v0 + 272));
  swift_bridgeObjectRelease(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002FE44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v5[9] = a4;
  v5[10] = a5;
  v5[8] = a1;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  v5[11] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[12] = v7;
  unint64_t v8 = (*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[13] = swift_task_alloc(v8);
  v5[14] = swift_task_alloc(v8);
  v5[15] = swift_task_alloc(v8);
  v5[16] = swift_task_alloc(v8);
  v5[17] = swift_task_alloc(v8);
  v5[18] = swift_task_alloc(v8);
  uint64_t v9 = type metadata accessor for Logger(0LL);
  v5[19] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v5[20] = v10;
  unint64_t v11 = (*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[21] = swift_task_alloc(v11);
  v5[22] = swift_task_alloc(v11);
  v5[23] = swift_task_alloc(v11);
  v5[24] = swift_task_alloc(v11);
  v5[25] = swift_task_alloc(v11);
  unint64_t v12 = (*(void *)(*(void *)(sub_10000D228(&qword_10007FA38) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[26] = swift_task_alloc(v12);
  v5[27] = swift_task_alloc(v12);
  v5[28] = swift_task_alloc(v12);
  uint64_t v13 = type metadata accessor for LubyRackoffEncryptionKey(0LL);
  v5[29] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v5[30] = v14;
  unint64_t v15 = (*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[31] = swift_task_alloc(v15);
  v5[32] = swift_task_alloc(v15);
  v5[33] = swift_task_alloc(v15);
  v5[34] = swift_task_alloc(v15);
  return swift_task_switch(sub_10002FFD4, 0LL, 0LL);
}

uint64_t sub_10002FFD4(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 72);
  uint64_t v3 = type metadata accessor for TagEncryptionKeyController(0LL);
  *(void *)(v1 + 280) = v3;
  uint64_t v4 = *(int *)(v3 + 28);
  *(_DWORD *)(v1 + 392) = v4;
  uint64_t v5 = *(void *)(v2 + v4 + 24);
  uint64_t v6 = *(void *)(v2 + v4 + 32);
  sub_10000D408((void *)(v2 + v4), v5);
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to dispatch thunk of AsyncCache.subscript.getter[1]);
  *(void *)(v1 + 288) = v7;
  *uint64_t v7 = v1;
  v7[1] = sub_100030184;
  return dispatch thunk of AsyncCache.subscript.getter(*(void *)(v1 + 224), *(void *)(v1 + 80), v5, v6);
}

uint64_t sub_100030184()
{
  return swift_task_switch(sub_1000301D8, 0LL, 0LL);
}

uint64_t sub_1000301D8()
{
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v2 = *(void *)(v0 + 240);
  uint64_t v3 = *(void *)(v0 + 224);
  uint64_t v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  *(void *)(v0 + 296) = v4;
  if (v4(v3, 1LL, v1) == 1)
  {
    sub_10000D5AC(v3, &qword_10007FA38);
    uint64_t v5 = (void *)swift_task_alloc(dword_10007FC14);
    *(void *)(v0 + 304) = v5;
    void *v5 = v0;
    v5[1] = sub_1000305B4;
    return sub_100031AC0(*(void *)(v0 + 216), *(void *)(v0 + 80));
  }

  else
  {
    uint64_t v7 = *(void *)(v0 + 280);
    uint64_t v8 = *(void *)(v0 + 144);
    uint64_t v9 = *(void *)(v0 + 88);
    uint64_t v10 = *(void *)(v0 + 96);
    uint64_t v11 = *(void *)(v0 + 80);
    unint64_t v12 = *(void (**)(void, uint64_t, uint64_t))(v2 + 32);
    v12(*(void *)(v0 + 272), v3, v1);
    sub_10000D1E8(&qword_10007FBB8, type metadata accessor for TagEncryptionKeyController, (uint64_t)&unk_100061684);
    static LoggedObject.logger.getter(v7);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
    uint64_t v14 = v13(v8, v11, v9);
    unint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v16 = static os_log_type_t.debug.getter();
    BOOL v17 = os_log_type_enabled(v15, v16);
    uint64_t v18 = *(void *)(v0 + 200);
    uint64_t v19 = *(void *)(v0 + 152);
    uint64_t v56 = *(void *)(v0 + 160);
    uint64_t v20 = *(void *)(v0 + 144);
    uint64_t v22 = *(void *)(v0 + 88);
    uint64_t v21 = *(void *)(v0 + 96);
    if (v17)
    {
      uint64_t v52 = v13;
      uint64_t v50 = *(void *)(v0 + 200);
      uint64_t v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v54 = v12;
      uint64_t v24 = swift_slowAlloc(32LL, -1LL);
      uint64_t v58 = v24;
      *(_DWORD *)uint64_t v23 = 136315138;
      uint64_t v25 = sub_10000D1E8( &qword_10007F498,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter(v22, v25);
      unint64_t v28 = v27;
      *(void *)(v0 + sub_1000154A8(*(void *)(v0 + 152) + OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_database, v0 + 56) = sub_100046274(v26, v27, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v23 + 4);
      unint64_t v29 = v28;
      uint64_t v13 = v52;
      swift_bridgeObjectRelease(v29);
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Returning cached encryption key for home: %s", v23, 0xCu);
      swift_arrayDestroy(v24, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v30 = v24;
      unint64_t v12 = v54;
      swift_slowDealloc(v30, -1LL, -1LL);
      swift_slowDealloc(v23, -1LL, -1LL);

      (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v50, v19);
    }

    else
    {
      (*(void (**)(void, void))(v21 + 8))(*(void *)(v0 + 144), *(void *)(v0 + 88));

      (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v18, v19);
    }

    uint64_t v31 = *(void *)(v0 + 272);
    uint64_t v32 = *(void *)(v0 + 232);
    uint64_t v34 = *(void *)(v0 + 80);
    uint64_t v33 = *(void *)(v0 + 88);
    uint64_t v35 = *(void *)(v0 + 64);
    uint64_t v36 = v35 + *(int *)(sub_10000D228(&qword_10007FBD0) + 48);
    v13(v35, v34, v33);
    v12(v36, v31, v32);
    uint64_t v37 = *(void *)(v0 + 264);
    uint64_t v39 = *(void *)(v0 + 248);
    uint64_t v38 = *(void *)(v0 + 256);
    uint64_t v41 = *(void *)(v0 + 216);
    uint64_t v40 = *(void *)(v0 + 224);
    uint64_t v42 = *(void *)(v0 + 200);
    uint64_t v43 = *(void *)(v0 + 208);
    uint64_t v45 = *(void *)(v0 + 184);
    uint64_t v44 = *(void *)(v0 + 192);
    uint64_t v46 = *(void *)(v0 + 176);
    uint64_t v47 = *(void *)(v0 + 168);
    uint64_t v48 = *(void *)(v0 + 144);
    uint64_t v49 = *(void *)(v0 + 136);
    uint64_t v51 = *(void *)(v0 + 128);
    uint64_t v53 = *(void *)(v0 + 120);
    uint64_t v55 = *(void *)(v0 + 112);
    uint64_t v57 = *(void *)(v0 + 104);
    swift_task_dealloc(*(void *)(v0 + 272));
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v43);
    swift_task_dealloc(v42);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v51);
    swift_task_dealloc(v53);
    swift_task_dealloc(v55);
    swift_task_dealloc(v57);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1000305B4()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 304LL);
  *(void *)(*(void *)v1 + 312LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_100031744;
  }
  else {
    uint64_t v3 = sub_100030618;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_100030618()
{
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v2 = *(void *)(v0 + 216);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 296))(v2, 1LL, v1) == 1)
  {
    uint64_t v3 = *(void *)(v0 + 312);
    uint64_t v4 = sub_10000D5AC(v2, &qword_10007FA38);
    uint64_t v5 = static Task<>.checkCancellation()(v4);
    if (v3)
    {
      uint64_t v6 = *(void *)(v0 + 264);
      uint64_t v8 = *(void *)(v0 + 248);
      uint64_t v7 = *(void *)(v0 + 256);
      uint64_t v9 = *(void *)(v0 + 216);
      uint64_t v10 = *(void *)(v0 + 224);
      uint64_t v12 = *(void *)(v0 + 200);
      uint64_t v11 = *(void *)(v0 + 208);
      uint64_t v13 = *(void *)(v0 + 192);
      uint64_t v22 = *(void *)(v0 + 184);
      uint64_t v23 = *(void *)(v0 + 176);
      uint64_t v24 = *(void *)(v0 + 168);
      uint64_t v25 = *(void *)(v0 + 144);
      uint64_t v26 = *(void *)(v0 + 136);
      uint64_t v27 = *(void *)(v0 + 128);
      uint64_t v28 = *(void *)(v0 + 120);
      uint64_t v29 = *(void *)(v0 + 112);
      uint64_t v30 = *(void *)(v0 + 104);
      swift_task_dealloc(*(void *)(v0 + 272));
      swift_task_dealloc(v6);
      swift_task_dealloc(v7);
      swift_task_dealloc(v8);
      swift_task_dealloc(v10);
      swift_task_dealloc(v9);
      swift_task_dealloc(v11);
      swift_task_dealloc(v12);
      swift_task_dealloc(v13);
      swift_task_dealloc(v22);
      swift_task_dealloc(v23);
      swift_task_dealloc(v24);
      swift_task_dealloc(v25);
      swift_task_dealloc(v26);
      swift_task_dealloc(v27);
      swift_task_dealloc(v28);
      swift_task_dealloc(v29);
      swift_task_dealloc(v30);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }

    else
    {
      UUID.init()(v5);
      uint64_t v21 = (void *)swift_task_alloc(dword_10007FB8C);
      *(void *)(v0 + 336) = v21;
      *uint64_t v21 = v0;
      v21[1] = sub_100030C00;
      return sub_1000322E8(*(void *)(v0 + 128), *(void *)(v0 + 256), *(void *)(v0 + 80), *(void *)(v0 + 120));
    }
  }

  else
  {
    uint64_t v15 = *(void *)(v0 + 264);
    os_log_type_t v16 = (void *)(*(void *)(v0 + 72) + *(int *)(v0 + 392));
    BOOL v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 240) + 32LL);
    *(void *)(v0 + 320) = v17;
    v17(v15, v2, v1);
    uint64_t v18 = v16[3];
    uint64_t v19 = v16[4];
    sub_10000D408(v16, v18);
    uint64_t v20 = (void *)swift_task_alloc(async function pointer to dispatch thunk of AsyncCache.set(_:key:)[1]);
    *(void *)(v0 + 328) = v20;
    *uint64_t v20 = v0;
    v20[1] = sub_100030864;
    return dispatch thunk of AsyncCache.set(_:key:)(*(void *)(v0 + 264), *(void *)(v0 + 80), v18, v19);
  }

uint64_t sub_100030864()
{
  return swift_task_switch(sub_1000308B8, 0LL, 0LL);
}

uint64_t sub_1000308B8()
{
  uint64_t v1 = *(void *)(v0 + 280);
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v3 = *(void *)(v0 + 88);
  uint64_t v4 = *(void *)(v0 + 96);
  uint64_t v5 = *(void *)(v0 + 80);
  sub_10000D1E8(&qword_10007FBB8, type metadata accessor for TagEncryptionKeyController, (uint64_t)&unk_100061684);
  static LoggedObject.logger.getter(v1);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  uint64_t v7 = v6(v2, v5, v3);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v46 = *(void *)(v0 + 152);
    uint64_t v48 = *(void *)(v0 + 192);
    uint64_t v10 = *(void *)(v0 + 136);
    uint64_t v42 = *(void *)(v0 + 96);
    uint64_t v44 = *(void *)(v0 + 160);
    uint64_t v50 = v6;
    uint64_t v11 = *(void *)(v0 + 88);
    uint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v13 = swift_slowAlloc(32LL, -1LL);
    uint64_t v52 = v13;
    *(_DWORD *)uint64_t v12 = 136315138;
    uint64_t v14 = sub_10000D1E8( &qword_10007F498,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter(v11, v14);
    unint64_t v17 = v16;
    *(void *)(v0 + 48) = sub_100046274(v15, v16, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v12 + 4);
    swift_bridgeObjectRelease(v17);
    uint64_t v18 = v11;
    uint64_t v6 = v50;
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v10, v18);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Reusing existing encryption key for home: %s", v12, 0xCu);
    swift_arrayDestroy(v13, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);

    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v48, v46);
  }

  else
  {
    uint64_t v19 = *(void *)(v0 + 192);
    uint64_t v20 = *(void *)(v0 + 152);
    uint64_t v21 = *(void *)(v0 + 160);
    (*(void (**)(void, void))(*(void *)(v0 + 96) + 8LL))(*(void *)(v0 + 136), *(void *)(v0 + 88));

    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v19, v20);
  }

  uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 320);
  uint64_t v23 = *(void *)(v0 + 264);
  uint64_t v24 = *(void *)(v0 + 232);
  uint64_t v26 = *(void *)(v0 + 80);
  uint64_t v25 = *(void *)(v0 + 88);
  uint64_t v27 = *(void *)(v0 + 64);
  uint64_t v28 = v27 + *(int *)(sub_10000D228(&qword_10007FBD0) + 48);
  v6(v27, v26, v25);
  v22(v28, v23, v24);
  uint64_t v29 = *(void *)(v0 + 264);
  uint64_t v31 = *(void *)(v0 + 248);
  uint64_t v30 = *(void *)(v0 + 256);
  uint64_t v33 = *(void *)(v0 + 216);
  uint64_t v32 = *(void *)(v0 + 224);
  uint64_t v34 = *(void *)(v0 + 200);
  uint64_t v35 = *(void *)(v0 + 208);
  uint64_t v37 = *(void *)(v0 + 184);
  uint64_t v36 = *(void *)(v0 + 192);
  uint64_t v39 = *(void *)(v0 + 176);
  uint64_t v40 = *(void *)(v0 + 168);
  uint64_t v41 = *(void *)(v0 + 144);
  uint64_t v43 = *(void *)(v0 + 136);
  uint64_t v45 = *(void *)(v0 + 128);
  uint64_t v47 = *(void *)(v0 + 120);
  uint64_t v49 = *(void *)(v0 + 112);
  uint64_t v51 = *(void *)(v0 + 104);
  swift_task_dealloc(*(void *)(v0 + 272));
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v35);
  swift_task_dealloc(v34);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v43);
  swift_task_dealloc(v45);
  swift_task_dealloc(v47);
  swift_task_dealloc(v49);
  swift_task_dealloc(v51);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100030C00()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 336LL);
  uint64_t v4 = *(void *)(*(void *)v1 + 120LL);
  uint64_t v5 = *(void *)(*(void *)v1 + 88LL);
  uint64_t v6 = *(void *)(*(void *)v1 + 96LL);
  *(void *)(*(void *)v1 + 344LL) = v0;
  swift_task_dealloc(v3);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v2[44] = v7;
  v7(v4, v5);
  if (v0)
  {
    uint64_t v8 = sub_100031868;
  }

  else
  {
    v7(v2[16], v2[11]);
    uint64_t v8 = sub_100030C9C;
  }

  return swift_task_switch(v8, 0LL, 0LL);
}

uint64_t sub_100030C9C()
{
  uint64_t v1 = *(void *)(v0 + 344);
  static Task<>.checkCancellation()();
  if (v1)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 240) + 8LL))(*(void *)(v0 + 256), *(void *)(v0 + 232));
    uint64_t v2 = *(void *)(v0 + 264);
    uint64_t v4 = *(void *)(v0 + 248);
    uint64_t v3 = *(void *)(v0 + 256);
    uint64_t v5 = *(void *)(v0 + 216);
    uint64_t v6 = *(void *)(v0 + 224);
    uint64_t v8 = *(void *)(v0 + 200);
    uint64_t v7 = *(void *)(v0 + 208);
    uint64_t v9 = *(void *)(v0 + 192);
    uint64_t v12 = *(void *)(v0 + 184);
    uint64_t v13 = *(void *)(v0 + 176);
    uint64_t v14 = *(void *)(v0 + 168);
    uint64_t v15 = *(void *)(v0 + 144);
    uint64_t v16 = *(void *)(v0 + 136);
    uint64_t v17 = *(void *)(v0 + 128);
    uint64_t v18 = *(void *)(v0 + 120);
    uint64_t v19 = *(void *)(v0 + 112);
    uint64_t v20 = *(void *)(v0 + 104);
    swift_task_dealloc(*(void *)(v0 + 272));
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v6);
    swift_task_dealloc(v5);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v11 = (void *)swift_task_alloc(dword_10007FC14);
    *(void *)(v0 + 360) = v11;
    void *v11 = v0;
    v11[1] = sub_100030E24;
    return sub_100031AC0(*(void *)(v0 + 208), *(void *)(v0 + 80));
  }

uint64_t sub_100030E24()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 360LL);
  *(void *)(*(void *)v1 + 368LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_10003198C;
  }
  else {
    uint64_t v3 = sub_100030E88;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_100030E88()
{
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v2 = *(void *)(v0 + 208);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 296))(v2, 1LL, v1) == 1)
  {
    uint64_t v3 = *(void *)(v0 + 280);
    sub_10000D5AC(v2, &qword_10007FA38);
    sub_10000D1E8(&qword_10007FBB8, type metadata accessor for TagEncryptionKeyController, (uint64_t)&unk_100061684);
    uint64_t v4 = static LoggedObject.logger.getter(v3);
    uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
    os_log_type_t v6 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  v6,  "Query failed to return key we just created, using it anyway",  v7,  2u);
      swift_slowDealloc(v7, -1LL, -1LL);
    }

    uint64_t v8 = *(void *)(v0 + 240);
    uint64_t v39 = *(void *)(v0 + 232);
    uint64_t v41 = *(void *)(v0 + 256);
    uint64_t v9 = *(void *)(v0 + 184);
    uint64_t v11 = *(void *)(v0 + 152);
    uint64_t v10 = *(void *)(v0 + 160);
    uint64_t v13 = *(void *)(v0 + 88);
    uint64_t v12 = *(void *)(v0 + 96);
    uint64_t v14 = *(void *)(v0 + 80);
    uint64_t v15 = *(void *)(v0 + 64);

    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    uint64_t v16 = v15 + *(int *)(sub_10000D228(&qword_10007FBD0) + 48);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v15, v14, v13);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v16, v41, v39);
    uint64_t v17 = *(void *)(v0 + 264);
    uint64_t v19 = *(void *)(v0 + 248);
    uint64_t v18 = *(void *)(v0 + 256);
    uint64_t v21 = *(void *)(v0 + 216);
    uint64_t v20 = *(void *)(v0 + 224);
    uint64_t v22 = *(void *)(v0 + 200);
    uint64_t v23 = *(void *)(v0 + 208);
    uint64_t v25 = *(void *)(v0 + 184);
    uint64_t v24 = *(void *)(v0 + 192);
    uint64_t v33 = *(void *)(v0 + 176);
    uint64_t v34 = *(void *)(v0 + 168);
    uint64_t v35 = *(void *)(v0 + 144);
    uint64_t v36 = *(void *)(v0 + 136);
    uint64_t v37 = *(void *)(v0 + 128);
    uint64_t v38 = *(void *)(v0 + 120);
    uint64_t v40 = *(void *)(v0 + 112);
    uint64_t v42 = *(void *)(v0 + 104);
    swift_task_dealloc(*(void *)(v0 + 272));
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v23);
    swift_task_dealloc(v22);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v40);
    swift_task_dealloc(v42);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v27 = *(void *)(v0 + 248);
    uint64_t v28 = (void *)(*(void *)(v0 + 72) + *(int *)(v0 + 392));
    uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 240) + 32LL);
    *(void *)(v0 + 376) = v29;
    v29(v27, v2, v1);
    uint64_t v30 = v28[3];
    uint64_t v31 = v28[4];
    sub_10000D408(v28, v30);
    uint64_t v32 = (void *)swift_task_alloc(async function pointer to dispatch thunk of AsyncCache.set(_:key:)[1]);
    *(void *)(v0 + 384) = v32;
    void *v32 = v0;
    v32[1] = sub_100031178;
    return dispatch thunk of AsyncCache.set(_:key:)(*(void *)(v0 + 248), *(void *)(v0 + 80), v30, v31);
  }

uint64_t sub_100031178()
{
  return swift_task_switch(sub_1000311CC, 0LL, 0LL);
}

uint64_t sub_1000311CC()
{
  uint64_t v1 = *(void *)(v0 + 96);
  char v2 = static LubyRackoffEncryptionKey.== infix(_:_:)(*(void *)(v0 + 248), *(void *)(v0 + 256));
  sub_10000D1E8(&qword_10007FBB8, type metadata accessor for TagEncryptionKeyController, (uint64_t)&unk_100061684);
  uint64_t v3 = *(void *)(v0 + 280);
  uint64_t v5 = *(void *)(v0 + 80);
  uint64_t v4 = *(void *)(v0 + 88);
  if ((v2 & 1) == 0)
  {
    uint64_t v24 = *(void *)(v0 + 104);
    static LoggedObject.logger.getter(v3);
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16);
    uint64_t v25 = v7(v24, v5, v4);
    uint64_t v9 = (os_log_s *)Logger.logObject.getter(v25);
    os_log_type_t v26 = static os_log_type_t.default.getter();
    BOOL v27 = os_log_type_enabled(v9, v26);
    uint64_t v12 = *(void *)(v0 + 256);
    uint64_t v13 = *(void *)(v0 + 232);
    uint64_t v14 = *(void *)(v0 + 240);
    uint64_t v57 = *(void (**)(uint64_t, uint64_t))(v0 + 352);
    uint64_t v59 = *(void *)(v0 + 160);
    uint64_t v61 = *(void *)(v0 + 152);
    uint64_t v63 = *(void *)(v0 + 168);
    uint64_t v15 = *(void *)(v0 + 104);
    uint64_t v16 = *(void *)(v0 + 88);
    if (v27)
    {
      uint64_t v66 = v7;
      uint64_t v28 = swift_slowAlloc(22LL, -1LL);
      uint64_t v52 = v13;
      uint64_t v29 = swift_slowAlloc(32LL, -1LL);
      uint64_t v68 = v29;
      *(_DWORD *)uint64_t v28 = 141558275;
      *(void *)(v0 + 16) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v28 + 4);
      *(_WORD *)(v28 + 12) = 2081;
      uint64_t v30 = sub_10000D1E8( &qword_10007F498,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter(v16, v30);
      unint64_t v33 = v32;
      *(void *)(v0 + 24) = sub_100046274(v31, v32, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v28 + 14);
      swift_bridgeObjectRelease(v33);
      v57(v15, v16);
      _os_log_impl( (void *)&_mh_execute_header,  v9,  v26,  "Using encryption key just created by another device for home: %{private,mask.hash}s",  (uint8_t *)v28,  0x16u);
      swift_arrayDestroy(v29, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1LL, -1LL);
      uint64_t v34 = v28;
      uint64_t v7 = v66;
      swift_slowDealloc(v34, -1LL, -1LL);

      (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v63, v61);
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v52);
      goto LABEL_7;
    }

LABEL_6:
    v57(v15, v16);
    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v63, v61);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
    goto LABEL_7;
  }

  uint64_t v6 = *(void *)(v0 + 112);
  static LoggedObject.logger.getter(v3);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16);
  uint64_t v8 = v7(v6, v5, v4);
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.default.getter();
  BOOL v11 = os_log_type_enabled(v9, v10);
  uint64_t v12 = *(void *)(v0 + 256);
  uint64_t v13 = *(void *)(v0 + 232);
  uint64_t v14 = *(void *)(v0 + 240);
  uint64_t v57 = *(void (**)(uint64_t, uint64_t))(v0 + 352);
  uint64_t v59 = *(void *)(v0 + 160);
  uint64_t v61 = *(void *)(v0 + 152);
  uint64_t v63 = *(void *)(v0 + 176);
  uint64_t v15 = *(void *)(v0 + 112);
  uint64_t v16 = *(void *)(v0 + 88);
  if (!v11) {
    goto LABEL_6;
  }
  unint64_t v65 = v7;
  uint64_t v17 = swift_slowAlloc(22LL, -1LL);
  uint64_t v54 = v13;
  uint64_t v18 = swift_slowAlloc(32LL, -1LL);
  uint64_t v68 = v18;
  *(_DWORD *)uint64_t v17 = 141558275;
  *(void *)(v0 + 32) = 1752392040LL;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v17 + 4);
  *(_WORD *)(v17 + 12) = 2081;
  uint64_t v19 = sub_10000D1E8( &qword_10007F498,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter(v16, v19);
  unint64_t v22 = v21;
  *(void *)(v0 + 40) = sub_100046274(v20, v21, &v68);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v17 + 14);
  swift_bridgeObjectRelease(v22);
  v57(v15, v16);
  _os_log_impl( (void *)&_mh_execute_header,  v9,  v10,  "Using newly-created encryption key for home: %{private,mask.hash}s",  (uint8_t *)v17,  0x16u);
  swift_arrayDestroy(v18, 1LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v18, -1LL, -1LL);
  uint64_t v23 = v17;
  uint64_t v7 = v65;
  swift_slowDealloc(v23, -1LL, -1LL);

  (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v63, v61);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v54);
LABEL_7:
  uint64_t v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 376);
  uint64_t v36 = *(void *)(v0 + 248);
  uint64_t v37 = *(void *)(v0 + 232);
  uint64_t v39 = *(void *)(v0 + 80);
  uint64_t v38 = *(void *)(v0 + 88);
  uint64_t v40 = *(void *)(v0 + 64);
  uint64_t v41 = v40 + *(int *)(sub_10000D228(&qword_10007FBD0) + 48);
  v7(v40, v39, v38);
  v35(v41, v36, v37);
  uint64_t v42 = *(void *)(v0 + 264);
  uint64_t v44 = *(void *)(v0 + 248);
  uint64_t v43 = *(void *)(v0 + 256);
  uint64_t v46 = *(void *)(v0 + 216);
  uint64_t v45 = *(void *)(v0 + 224);
  uint64_t v47 = *(void *)(v0 + 200);
  uint64_t v48 = *(void *)(v0 + 208);
  uint64_t v50 = *(void *)(v0 + 184);
  uint64_t v49 = *(void *)(v0 + 192);
  uint64_t v53 = *(void *)(v0 + 176);
  uint64_t v55 = *(void *)(v0 + 168);
  uint64_t v56 = *(void *)(v0 + 144);
  uint64_t v58 = *(void *)(v0 + 136);
  uint64_t v60 = *(void *)(v0 + 128);
  uint64_t v62 = *(void *)(v0 + 120);
  uint64_t v64 = *(void *)(v0 + 112);
  uint64_t v67 = *(void *)(v0 + 104);
  swift_task_dealloc(*(void *)(v0 + 272));
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v48);
  swift_task_dealloc(v47);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v53);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v58);
  swift_task_dealloc(v60);
  swift_task_dealloc(v62);
  swift_task_dealloc(v64);
  swift_task_dealloc(v67);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100031744()
{
  uint64_t v1 = *(void *)(v0 + 264);
  uint64_t v3 = *(void *)(v0 + 248);
  uint64_t v2 = *(void *)(v0 + 256);
  uint64_t v4 = *(void *)(v0 + 216);
  uint64_t v5 = *(void *)(v0 + 224);
  uint64_t v7 = *(void *)(v0 + 200);
  uint64_t v6 = *(void *)(v0 + 208);
  uint64_t v9 = *(void *)(v0 + 184);
  uint64_t v8 = *(void *)(v0 + 192);
  uint64_t v11 = *(void *)(v0 + 176);
  uint64_t v12 = *(void *)(v0 + 168);
  uint64_t v13 = *(void *)(v0 + 144);
  uint64_t v14 = *(void *)(v0 + 136);
  uint64_t v15 = *(void *)(v0 + 128);
  uint64_t v16 = *(void *)(v0 + 120);
  uint64_t v17 = *(void *)(v0 + 112);
  uint64_t v18 = *(void *)(v0 + 104);
  swift_task_dealloc(*(void *)(v0 + 272));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100031868()
{
  uint64_t v1 = *(void *)(v0 + 264);
  uint64_t v3 = *(void *)(v0 + 248);
  uint64_t v2 = *(void *)(v0 + 256);
  uint64_t v4 = *(void *)(v0 + 216);
  uint64_t v5 = *(void *)(v0 + 224);
  uint64_t v7 = *(void *)(v0 + 200);
  uint64_t v6 = *(void *)(v0 + 208);
  uint64_t v9 = *(void *)(v0 + 184);
  uint64_t v8 = *(void *)(v0 + 192);
  uint64_t v11 = *(void *)(v0 + 176);
  uint64_t v12 = *(void *)(v0 + 168);
  uint64_t v13 = *(void *)(v0 + 144);
  uint64_t v14 = *(void *)(v0 + 136);
  uint64_t v15 = *(void *)(v0 + 128);
  uint64_t v16 = *(void *)(v0 + 120);
  uint64_t v17 = *(void *)(v0 + 112);
  uint64_t v18 = *(void *)(v0 + 104);
  swift_task_dealloc(*(void *)(v0 + 272));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003198C()
{
  uint64_t v1 = *(void *)(v0 + 264);
  uint64_t v3 = *(void *)(v0 + 248);
  uint64_t v2 = *(void *)(v0 + 256);
  uint64_t v4 = *(void *)(v0 + 216);
  uint64_t v5 = *(void *)(v0 + 224);
  uint64_t v7 = *(void *)(v0 + 200);
  uint64_t v6 = *(void *)(v0 + 208);
  uint64_t v9 = *(void *)(v0 + 184);
  uint64_t v8 = *(void *)(v0 + 192);
  uint64_t v11 = *(void *)(v0 + 176);
  uint64_t v12 = *(void *)(v0 + 168);
  uint64_t v13 = *(void *)(v0 + 144);
  uint64_t v14 = *(void *)(v0 + 136);
  uint64_t v15 = *(void *)(v0 + 128);
  uint64_t v16 = *(void *)(v0 + 120);
  uint64_t v17 = *(void *)(v0 + 112);
  uint64_t v18 = *(void *)(v0 + 104);
  swift_task_dealloc(*(void *)(v0 + 272));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100031AC0(uint64_t a1, uint64_t a2)
{
  v3[26] = a2;
  v3[27] = v2;
  v3[25] = a1;
  uint64_t v4 = type metadata accessor for Logger(0LL);
  v3[28] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[29] = v5;
  v3[30] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for EncryptionKeyRecord.KeyType(0LL);
  v3[31] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[32] = v7;
  v3[33] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for UUID(0LL);
  v3[34] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v3[35] = v9;
  unint64_t v10 = (*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[36] = swift_task_alloc(v10);
  v3[37] = swift_task_alloc(v10);
  v3[38] = swift_task_alloc(v10);
  uint64_t v11 = type metadata accessor for DatabaseConfiguration(0LL);
  v3[39] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v3[40] = v12;
  v3[41] = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for EncryptionKeyQuery(0LL);
  v3[42] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v3[43] = v14;
  v3[44] = swift_task_alloc((*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100031BE0, 0LL, 0LL);
}

uint64_t sub_100031BE0()
{
  uint64_t v1 = v0[41];
  uint64_t v2 = v0[38];
  uint64_t v3 = v0[37];
  uint64_t v4 = v0[34];
  uint64_t v5 = v0[35];
  uint64_t v7 = v0[26];
  uint64_t v6 = v0[27];
  (*(void (**)(uint64_t, uint64_t, void))(v0[40] + 16LL))(v1, v6, v0[39]);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v0[45] = v8;
  v8(v2, v7, v4);
  uint64_t v9 = type metadata accessor for TagEncryptionKeyController(0LL);
  v0[46] = v9;
  unint64_t v10 = (uint64_t *)(v6 + *(int *)(v9 + 20));
  uint64_t v11 = *v10;
  uint64_t v12 = *((unsigned __int8 *)v10 + 8);
  UUID.init()();
  EncryptionKeyQuery.init(database:homeIdentifier:queryIdentifier:resultsLimit:qualityOfService:)( v1,  v2,  v3,  1LL,  0LL,  v11,  v12);
  uint64_t v13 = (void *)swift_task_alloc(async function pointer to EncryptionKeyQuery.fetchKeys()[1]);
  v0[47] = v13;
  *uint64_t v13 = v0;
  v13[1] = sub_100031CCC;
  return EncryptionKeyQuery.fetchKeys()();
}

uint64_t sub_100031CCC(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 376);
  *(void *)(v3 + 384) = a1;
  *(void *)(v3 + 392) = v1;
  swift_task_dealloc(v4);
  if (v1) {
    uint64_t v5 = sub_100032248;
  }
  else {
    uint64_t v5 = sub_100031D38;
  }
  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_100031D38()
{
  uint64_t v1 = *(void *)(v0 + 384);
  if (!*(void *)(v1 + 16))
  {
    *(void *)(v0 + 88) = 0LL;
    *(_OWORD *)(v0 + sub_1000154A8(*(void *)(v0 + 152) + OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_database, v0 + 56) = 0u;
    *(_OWORD *)(v0 + 72) = 0u;
    swift_bridgeObjectRelease(v1);
    goto LABEL_6;
  }

  sub_10000D478(v1 + 32, v0 + 56);
  swift_bridgeObjectRelease(v1);
  if (!*(void *)(v0 + 80))
  {
LABEL_6:
    (*(void (**)(void, void))(*(void *)(v0 + 344) + 8LL))(*(void *)(v0 + 352), *(void *)(v0 + 336));
    sub_10000D5AC(v0 + 56, &qword_10007FC18);
LABEL_11:
    uint64_t v37 = *(void *)(v0 + 200);
    uint64_t v38 = type metadata accessor for LubyRackoffEncryptionKey(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56LL))(v37, 1LL, 1LL, v38);
    goto LABEL_12;
  }

  uint64_t v3 = *(void *)(v0 + 256);
  uint64_t v2 = *(void *)(v0 + 264);
  uint64_t v4 = *(void *)(v0 + 248);
  sub_100010044((__int128 *)(v0 + 56), v0 + 16);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v6 = sub_10000D408((void *)(v0 + 16), v5);
  swift_getDynamicType(v6, v5, 1LL);
  dispatch thunk of static EncryptionKey.recordKeyType.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v3 + 88))(v2, v4) != enum case for EncryptionKeyRecord.KeyType.tagsLubyRackoff(_:))
  {
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 360);
    uint64_t v11 = *(void *)(v0 + 368);
    uint64_t v13 = *(void *)(v0 + 288);
    uint64_t v14 = *(void *)(v0 + 272);
    uint64_t v15 = *(void *)(v0 + 208);
    sub_10000D1E8(&qword_10007FBB8, type metadata accessor for TagEncryptionKeyController, (uint64_t)&unk_100061684);
    static LoggedObject.logger.getter(v11);
    v12(v13, v15, v14);
    uint64_t v16 = sub_10000D478(v0 + 16, v0 + 96);
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t type = static os_log_type_t.error.getter();
    BOOL v18 = os_log_type_enabled(v17, type);
    uint64_t v20 = *(void *)(v0 + 344);
    uint64_t v19 = *(void *)(v0 + 352);
    uint64_t v21 = *(void *)(v0 + 336);
    uint64_t v23 = *(void *)(v0 + 280);
    uint64_t v22 = *(void *)(v0 + 288);
    uint64_t v24 = *(void *)(v0 + 272);
    uint64_t v51 = *(void *)(v0 + 232);
    uint64_t v52 = *(void *)(v0 + 224);
    uint64_t v53 = *(void *)(v0 + 240);
    if (v18)
    {
      uint64_t v49 = *(void *)(v0 + 352);
      uint64_t v25 = swift_slowAlloc(32LL, -1LL);
      uint64_t v47 = swift_slowAlloc(64LL, -1LL);
      uint64_t v54 = v47;
      *(_DWORD *)uint64_t v25 = 141558531;
      *(void *)(v0 + 192) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 192, v0 + 200, v25 + 4);
      *(_WORD *)(v25 + 12) = 2081;
      uint64_t v48 = v20;
      uint64_t v26 = sub_10000D1E8( &qword_10007F498,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter(v24, v26);
      uint64_t v46 = v21;
      unint64_t v29 = v28;
      *(void *)(v0 + 176) = sub_100046274(v27, v28, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v25 + 14);
      swift_bridgeObjectRelease(v29);
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
      *(_WORD *)(v25 + 22) = 2080;
      uint64_t v30 = *(void *)(v0 + 120);
      uint64_t v31 = sub_10000D408((void *)(v0 + 96), v30);
      uint64_t v32 = *(void *)(v30 - 8);
      uint64_t v33 = swift_task_alloc((*(void *)(v32 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
      (*(void (**)(uint64_t, void *, uint64_t))(v32 + 16))(v33, v31, v30);
      uint64_t v34 = String.init<A>(describing:)(v33, v30);
      unint64_t v36 = v35;
      swift_task_dealloc(v33);
      *(void *)(v0 + 184) = sub_100046274(v34, v36, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192, v25 + 24);
      swift_bridgeObjectRelease(v36);
      _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0((void *)(v0 + 96));
      _os_log_impl( (void *)&_mh_execute_header,  v17,  type,  "Encryption key for home %{private,mask.hash}s is unknown type: %s",  (uint8_t *)v25,  0x20u);
      swift_arrayDestroy(v47, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v47, -1LL, -1LL);
      swift_slowDealloc(v25, -1LL, -1LL);

      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v53, v52);
      _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0((void *)(v0 + 16));
      (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v49, v46);
    }

    else
    {

      _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0((void *)(v0 + 96));
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v53, v52);
      _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0((void *)(v0 + 16));
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
    }

    (*(void (**)(void, void))(*(void *)(v0 + 256) + 8LL))(*(void *)(v0 + 264), *(void *)(v0 + 248));
    goto LABEL_11;
  }

  uint64_t v7 = *(void *)(v0 + 200);
  (*(void (**)(void, void))(*(void *)(v0 + 344) + 8LL))(*(void *)(v0 + 352), *(void *)(v0 + 336));
  sub_100010044((__int128 *)(v0 + 16), v0 + 136);
  uint64_t v8 = sub_10000D228(&qword_10007FC20);
  uint64_t v9 = type metadata accessor for LubyRackoffEncryptionKey(0LL);
  int v10 = swift_dynamicCast(v7, v0 + 136, v8, v9, 6LL);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v7, v10 ^ 1u, 1LL, v9);
LABEL_12:
  uint64_t v39 = *(void *)(v0 + 328);
  uint64_t v41 = *(void *)(v0 + 296);
  uint64_t v40 = *(void *)(v0 + 304);
  uint64_t v42 = *(void *)(v0 + 288);
  uint64_t v43 = *(void *)(v0 + 264);
  uint64_t v44 = *(void *)(v0 + 240);
  swift_task_dealloc(*(void *)(v0 + 352));
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100032248()
{
  uint64_t v1 = *(void *)(v0 + 352);
  uint64_t v2 = *(void *)(v0 + 328);
  uint64_t v4 = *(void *)(v0 + 296);
  uint64_t v3 = *(void *)(v0 + 304);
  uint64_t v5 = *(void *)(v0 + 288);
  uint64_t v6 = *(void *)(v0 + 264);
  uint64_t v7 = *(void *)(v0 + 240);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 344) + 8LL))(v1, *(void *)(v0 + 336));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000322E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[10] = a4;
  v5[11] = v4;
  v5[8] = a2;
  void v5[9] = a3;
  v5[7] = a1;
  uint64_t v6 = type metadata accessor for DatabaseConfiguration(0LL);
  v5[12] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[13] = v7;
  v5[14] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Date(0LL);
  v5[15] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  v5[16] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v5[17] = v10;
  v5[18] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for EncryptionKeyRecord(0LL);
  v5[19] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v5[20] = v12;
  v5[21] = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000323C0, 0LL, 0LL);
}

uint64_t sub_1000323C0()
{
  uint64_t v1 = v0[21];
  uint64_t v2 = v0[18];
  uint64_t v3 = v0[16];
  uint64_t v4 = v0[17];
  uint64_t v24 = v0[15];
  uint64_t v30 = v0[14];
  uint64_t v31 = v0[19];
  uint64_t v28 = v0[20];
  uint64_t v29 = v0[12];
  uint64_t v5 = v0[10];
  uint64_t v26 = v0[13];
  uint64_t v27 = v0[11];
  uint64_t v6 = v0[8];
  uint64_t v7 = v0[9];
  uint64_t v25 = v7;
  LubyRackoffEncryptionKey.init()();
  sub_10000D5E8(0LL, (unint64_t *)&qword_10007F490, &OBJC_CLASS___CKRecordZoneID_ptr);
  type metadata accessor for Configuration(0LL);
  uint64_t v8 = static Configuration.zoneName(forHomeIdentifier:)(v7);
  uint64_t v10 = v9;
  v11._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(CKCurrentUserDefaultName);
  v11._object = v12;
  v13._countAndFlagsBits = v8;
  v13._object = v10;
  Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v13, v11).super.isa;
  v0[22] = isa;
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[23] = v15;
  v15(v2, v5, v3);
  uint64_t v16 = type metadata accessor for LubyRackoffEncryptionKey(0LL);
  v0[24] = v16;
  v0[5] = v16;
  v0[6] = sub_10000D1E8( &qword_10007FB90,  (uint64_t (*)(uint64_t))&type metadata accessor for LubyRackoffEncryptionKey,  (uint64_t)&protocol conformance descriptor for LubyRackoffEncryptionKey);
  uint64_t v17 = sub_10000D27C(v0 + 2);
  uint64_t v18 = *(void *)(v16 - 8);
  v0[25] = v18;
  uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v18 + 16))(v17, v6, v16);
  static Date.now.getter(v19);
  EncryptionKeyRecord.init(identifier:key:effectiveDate:)(v2, v0 + 2, v24);
  Class v20 = EncryptionKeyRecord.toCKRecord(zoneID:)((CKRecordZoneID)isa).super.isa;
  v0[26] = v20;
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v1, v31);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v30, v27, v29);
  uint64_t v21 = (void *)swift_task_alloc(64LL);
  v0[27] = v21;
  __int128 v21[2] = v25;
  v21[3] = v5;
  v21[4] = v20;
  v21[5] = v27;
  v21[6] = isa;
  uint64_t v22 = (void *)swift_task_alloc(async function pointer to DatabaseConfiguration.configure<A>(_:)[1]);
  v0[28] = v22;
  void *v22 = v0;
  v22[1] = sub_1000325DC;
  return DatabaseConfiguration.configure<A>(_:)(v22, &unk_10007FBA0, v21, (char *)&type metadata for () + 8);
}

uint64_t sub_1000325DC()
{
  uint64_t v3 = *(void *)(*(void *)v1 + 216LL);
  uint64_t v2 = *(void *)(*(void *)v1 + 224LL);
  uint64_t v5 = *(void *)(*(void *)v1 + 104LL);
  uint64_t v4 = *(void *)(*(void *)v1 + 112LL);
  uint64_t v6 = *(void *)(*(void *)v1 + 96LL);
  *(void *)(*(void *)v1 + 232LL) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v7 = sub_100032714;
  }
  else {
    uint64_t v7 = sub_100032670;
  }
  return swift_task_switch(v7, 0LL, 0LL);
}

uint64_t sub_100032670()
{
  uint64_t v2 = *(void **)(v0 + 176);
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 184);
  uint64_t v3 = *(void *)(v0 + 168);
  uint64_t v4 = *(void *)(v0 + 144);
  uint64_t v6 = *(void *)(v0 + 120);
  uint64_t v5 = *(void *)(v0 + 128);
  uint64_t v7 = *(void *)(v0 + 112);
  uint64_t v8 = *(void *)(v0 + 80);
  uint64_t v9 = *(void *)(v0 + 56);

  v1(v9, v8, v5);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100032714()
{
  uint64_t v1 = *(void *)(v0 + 200);
  uint64_t v2 = *(void *)(v0 + 192);
  uint64_t v3 = *(void *)(v0 + 168);
  uint64_t v4 = *(void **)(v0 + 176);
  uint64_t v5 = *(void *)(v0 + 144);
  uint64_t v7 = *(void *)(v0 + 112);
  uint64_t v6 = *(void *)(v0 + 120);
  uint64_t v8 = *(void *)(v0 + 64);

  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v8, v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000327A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[74] = a7;
  v7[73] = a6;
  v7[72] = a5;
  v7[71] = a4;
  v7[70] = a3;
  v7[69] = a2;
  uint64_t v8 = sub_10000D228(&qword_10007FBA8);
  v7[75] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[76] = v9;
  v7[77] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_10000D228(&qword_10007FBB0);
  v7[78] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v7[79] = v11;
  v7[80] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for UUID(0LL);
  v7[81] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v7[82] = v13;
  unint64_t v14 = (*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v7[83] = swift_task_alloc(v14);
  v7[84] = swift_task_alloc(v14);
  v7[85] = swift_task_alloc(v14);
  v7[86] = swift_task_alloc(v14);
  v7[87] = swift_task_alloc(v14);
  v7[88] = swift_task_alloc(v14);
  uint64_t v15 = type metadata accessor for Logger(0LL);
  v7[89] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v7[90] = v16;
  unint64_t v17 = (*(void *)(v16 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v7[91] = swift_task_alloc(v17);
  v7[92] = swift_task_alloc(v17);
  v7[93] = swift_task_alloc(v17);
  v7[94] = swift_task_alloc(v17);
  return swift_task_switch(sub_100032904, 0LL, 0LL);
}

uint64_t sub_100032904()
{
  uint64_t v1 = v0[88];
  uint64_t v2 = v0[87];
  uint64_t v3 = v0[82];
  uint64_t v4 = v0[81];
  uint64_t v5 = v0[71];
  uint64_t v6 = v0[70];
  uint64_t v7 = type metadata accessor for TagEncryptionKeyController(0LL);
  v0[95] = v7;
  v0[96] = sub_10000D1E8( &qword_10007FBB8,  type metadata accessor for TagEncryptionKeyController,  (uint64_t)&unk_100061684);
  static LoggedObject.logger.getter(v7);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[97] = v8;
  v8(v1, v6, v4);
  uint64_t v9 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v8)(v2, v5, v4);
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v44 = v0[90];
    uint64_t v45 = v0[89];
    uint64_t v46 = v0[94];
    os_log_type_t type = v11;
    uint64_t v12 = v0[88];
    uint64_t v13 = v0[87];
    uint64_t v41 = v0[82];
    uint64_t v14 = v0[81];
    uint64_t v15 = swift_slowAlloc(22LL, -1LL);
    uint64_t v43 = swift_slowAlloc(64LL, -1LL);
    uint64_t v47 = v43;
    *(_DWORD *)uint64_t v15 = 136315394;
    uint64_t v16 = sub_10000D1E8( &qword_10007F498,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter(v14, v16);
    unint64_t v19 = v18;
    v0[67] = sub_100046274(v17, v18, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 67, v0 + 68, v15 + 4);
    swift_bridgeObjectRelease(v19);
    Class v20 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
    v20(v12, v14);
    *(_WORD *)(v15 + 12) = 2080;
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter(v14, v16);
    unint64_t v23 = v22;
    v0[68] = sub_100046274(v21, v22, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 68, v0 + 69, v15 + 14);
    swift_bridgeObjectRelease(v23);
    v20(v13, v14);
    _os_log_impl((void *)&_mh_execute_header, v10, type, "Saving encryption key for home %s: %s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy(v43, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1LL, -1LL);
    swift_slowDealloc(v15, -1LL, -1LL);

    uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
    v24(v46, v45);
  }

  else
  {
    uint64_t v25 = v0[94];
    uint64_t v26 = v0[90];
    uint64_t v27 = v0[89];
    uint64_t v28 = v0[87];
    uint64_t v29 = v0[81];
    Class v20 = *(void (**)(uint64_t, uint64_t))(v0[82] + 8LL);
    v20(v0[88], v29);
    v20(v28, v29);

    uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
    v24(v25, v27);
  }

  v0[99] = v20;
  v0[98] = v24;
  uint64_t v30 = v0[80];
  uint64_t v31 = v0[79];
  uint64_t v32 = v0[78];
  uint64_t v33 = v0[72];
  uint64_t v34 = (void *)v0[69];
  v0[7] = v0 + 61;
  v0[2] = v0;
  v0[3] = sub_100032CF4;
  uint64_t v35 = swift_continuation_init(v0 + 2, 1LL);
  v0[41] = v32;
  unint64_t v36 = sub_10000D27C(v0 + 38);
  uint64_t v37 = sub_10000D5E8(0LL, &qword_10007FA28, &OBJC_CLASS___CKRecord_ptr);
  v0[100] = v37;
  uint64_t v38 = sub_10000D228((uint64_t *)&unk_10007EC20);
  v0[101] = v38;
  CheckedContinuation.init(continuation:function:)( v35,  0xD000000000000026LL,  0x80000001000624F0LL,  v37,  v38,  &protocol self-conformance witness table for Error);
  uint64_t v39 = *(void (**)(void *, uint64_t, uint64_t))(v31 + 32);
  v0[102] = v39;
  v39(v36, v30, v32);
  v0[34] = _NSConcreteStackBlock;
  v0[35] = 1107296256LL;
  v0[36] = sub_1000473E8;
  v0[37] = &unk_100076820;
  [v34 saveRecord:v33 completionHandler:v0 + 34];
  return swift_continuation_await(v0 + 2);
}

uint64_t sub_100032CF4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 824LL) = v1;
  if (v1) {
    uint64_t v2 = sub_10003361C;
  }
  else {
    uint64_t v2 = sub_100032D54;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_100032D54()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 776);
  uint64_t v2 = *(void *)(v0 + 688);
  uint64_t v3 = *(void *)(v0 + 680);
  uint64_t v4 = *(void *)(v0 + 648);
  uint64_t v5 = *(void *)(v0 + 568);
  uint64_t v6 = *(void *)(v0 + 560);
  static LoggedObject.logger.getter(*(void *)(v0 + 760));
  v1(v2, v6, v4);
  uint64_t v7 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v1)(v3, v5, v4);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v41 = *(void *)(v0 + 744);
    uint64_t v43 = *(void (**)(uint64_t, uint64_t))(v0 + 784);
    uint64_t v40 = *(void *)(v0 + 712);
    os_log_type_t type = v9;
    uint64_t v10 = *(void *)(v0 + 688);
    unint64_t v36 = *(void (**)(uint64_t, uint64_t))(v0 + 792);
    uint64_t v37 = *(void *)(v0 + 680);
    uint64_t v11 = *(void *)(v0 + 648);
    uint64_t v12 = swift_slowAlloc(32LL, -1LL);
    uint64_t v39 = swift_slowAlloc(64LL, -1LL);
    uint64_t v45 = v39;
    *(_DWORD *)uint64_t v12 = 141558531;
    *(void *)(v0 + 496) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 496, v0 + 504, v12 + 4);
    *(_WORD *)(v12 + 12) = 2081;
    uint64_t v13 = sub_10000D1E8( &qword_10007F498,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter(v11, v13);
    unint64_t v16 = v15;
    *(void *)(v0 + 504) = sub_100046274(v14, v15, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 504, v0 + 512, v12 + 14);
    swift_bridgeObjectRelease(v16);
    v36(v10, v11);
    *(_WORD *)(v12 + 22) = 2082;
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter(v11, v13);
    unint64_t v19 = v18;
    *(void *)(v0 + 512) = sub_100046274(v17, v18, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 512, v0 + 520, v12 + 24);
    swift_bridgeObjectRelease(v19);
    v36(v37, v11);
    _os_log_impl( (void *)&_mh_execute_header,  v8,  type,  "Successfully saved encryption key for home %{private,mask.hash}s: %{public}s",  (uint8_t *)v12,  0x20u);
    swift_arrayDestroy(v39, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);

    v43(v41, v40);
  }

  else
  {
    Class v20 = *(void (**)(uint64_t, uint64_t))(v0 + 792);
    uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v0 + 784);
    uint64_t v22 = *(void *)(v0 + 744);
    uint64_t v23 = *(void *)(v0 + 712);
    uint64_t v24 = *(void *)(v0 + 680);
    uint64_t v25 = *(void *)(v0 + 648);
    v20(*(void *)(v0 + 688), v25);
    v20(v24, v25);

    v21(v22, v23);
  }

  uint64_t v26 = *(void *)(v0 + 744);
  uint64_t v27 = *(void *)(v0 + 736);
  uint64_t v28 = *(void *)(v0 + 728);
  uint64_t v29 = *(void *)(v0 + 704);
  uint64_t v30 = *(void *)(v0 + 696);
  uint64_t v31 = *(void *)(v0 + 688);
  uint64_t v32 = *(void *)(v0 + 680);
  uint64_t v33 = *(void *)(v0 + 672);
  uint64_t v34 = *(void *)(v0 + 664);
  uint64_t v42 = *(void *)(v0 + 640);
  uint64_t v44 = *(void *)(v0 + 616);
  swift_task_dealloc(*(void *)(v0 + 752));
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000330B4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 176LL);
  *(void *)(*(void *)v0 + 848LL) = v1;
  if (v1) {
    uint64_t v2 = sub_100033DD0;
  }
  else {
    uint64_t v2 = sub_100033114;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_100033114()
{
  uint64_t v1 = *(void **)(v0 + 840);
  uint64_t v2 = v0 + 80;
  uint64_t v3 = *(void (**)(void *, uint64_t, uint64_t))(v0 + 816);
  uint64_t v4 = *(void *)(v0 + 808);
  uint64_t v5 = *(void *)(v0 + 800);
  uint64_t v6 = *(void *)(v0 + 640);
  uint64_t v7 = *(void *)(v0 + 624);
  uint64_t v13 = *(void *)(v0 + 576);
  uint64_t v8 = *(void **)(v0 + 552);

  *(void *)(v0 + 120) = v0 + 472;
  *(void *)(v0 + 80) = v0;
  *(void *)(v0 + 88) = sub_10003324C;
  uint64_t v9 = swift_continuation_init(v0 + 80, 1LL);
  *(void *)(v0 + 264) = v7;
  uint64_t v10 = sub_10000D27C((void *)(v0 + 240));
  CheckedContinuation.init(continuation:function:)( v9,  0xD000000000000026LL,  0x80000001000624F0LL,  v5,  v4,  &protocol self-conformance witness table for Error);
  v3(v10, v6, v7);
  *(void *)(v0 + 208) = _NSConcreteStackBlock;
  uint64_t v11 = (void *)(v0 + 208);
  v11[1] = 1107296256LL;
  v11[2] = sub_1000473E8;
  v11[3] = &unk_100076870;
  [v8 saveRecord:v13 completionHandler:v11];
  return swift_continuation_await(v2);
}

uint64_t sub_10003324C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112LL);
  *(void *)(*(void *)v0 + 856LL) = v1;
  if (v1) {
    uint64_t v2 = sub_1000341A0;
  }
  else {
    uint64_t v2 = sub_1000332AC;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_1000332AC()
{
  swift_errorRelease(*(void *)(v0 + 480));
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 776);
  uint64_t v2 = *(void *)(v0 + 688);
  uint64_t v3 = *(void *)(v0 + 680);
  uint64_t v4 = *(void *)(v0 + 648);
  uint64_t v5 = *(void *)(v0 + 568);
  uint64_t v6 = *(void *)(v0 + 560);
  static LoggedObject.logger.getter(*(void *)(v0 + 760));
  v1(v2, v6, v4);
  uint64_t v7 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v1)(v3, v5, v4);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v41 = *(void *)(v0 + 744);
    uint64_t v43 = *(void (**)(uint64_t, uint64_t))(v0 + 784);
    uint64_t v40 = *(void *)(v0 + 712);
    os_log_type_t type = v9;
    uint64_t v10 = *(void *)(v0 + 688);
    unint64_t v36 = *(void (**)(uint64_t, uint64_t))(v0 + 792);
    uint64_t v37 = *(void *)(v0 + 680);
    uint64_t v11 = *(void *)(v0 + 648);
    uint64_t v12 = swift_slowAlloc(32LL, -1LL);
    uint64_t v39 = swift_slowAlloc(64LL, -1LL);
    uint64_t v45 = v39;
    *(_DWORD *)uint64_t v12 = 141558531;
    *(void *)(v0 + 496) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 496, v0 + 504, v12 + 4);
    *(_WORD *)(v12 + 12) = 2081;
    uint64_t v13 = sub_10000D1E8( &qword_10007F498,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter(v11, v13);
    unint64_t v16 = v15;
    *(void *)(v0 + 504) = sub_100046274(v14, v15, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 504, v0 + 512, v12 + 14);
    swift_bridgeObjectRelease(v16);
    v36(v10, v11);
    *(_WORD *)(v12 + 22) = 2082;
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter(v11, v13);
    unint64_t v19 = v18;
    *(void *)(v0 + 512) = sub_100046274(v17, v18, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 512, v0 + 520, v12 + 24);
    swift_bridgeObjectRelease(v19);
    v36(v37, v11);
    _os_log_impl( (void *)&_mh_execute_header,  v8,  type,  "Successfully saved encryption key for home %{private,mask.hash}s: %{public}s",  (uint8_t *)v12,  0x20u);
    swift_arrayDestroy(v39, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);

    v43(v41, v40);
  }

  else
  {
    Class v20 = *(void (**)(uint64_t, uint64_t))(v0 + 792);
    uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v0 + 784);
    uint64_t v22 = *(void *)(v0 + 744);
    uint64_t v23 = *(void *)(v0 + 712);
    uint64_t v24 = *(void *)(v0 + 680);
    uint64_t v25 = *(void *)(v0 + 648);
    v20(*(void *)(v0 + 688), v25);
    v20(v24, v25);

    v21(v22, v23);
  }

  uint64_t v26 = *(void *)(v0 + 744);
  uint64_t v27 = *(void *)(v0 + 736);
  uint64_t v28 = *(void *)(v0 + 728);
  uint64_t v29 = *(void *)(v0 + 704);
  uint64_t v30 = *(void *)(v0 + 696);
  uint64_t v31 = *(void *)(v0 + 688);
  uint64_t v32 = *(void *)(v0 + 680);
  uint64_t v33 = *(void *)(v0 + 672);
  uint64_t v34 = *(void *)(v0 + 664);
  uint64_t v42 = *(void *)(v0 + 640);
  uint64_t v44 = *(void *)(v0 + 616);
  swift_task_dealloc(*(void *)(v0 + 752));
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003361C(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 824);
  uint64_t v3 = *(void *)(v1 + 808);
  swift_willThrow(a1);
  *(void *)(v1 + 480) = v2;
  swift_errorRetain(v2);
  type metadata accessor for CKError(0LL);
  uint64_t v5 = v4;
  if ((swift_dynamicCast(v1 + 464, v1 + 480, v3, v4, 0LL) & 1) != 0)
  {
    uint64_t v6 = *(void *)(v1 + 760);
    uint64_t v7 = *(void *)(v1 + 584);
    uint64_t v8 = *(void **)(v1 + 464);
    *(void *)(v1 + 832) = v8;
    if ((*(_BYTE *)(v7 + *(int *)(v6 + 24)) & 1) == 0)
    {
      *(void *)(v1 + 424) = v8;
      uint64_t v42 = sub_10000D1E8( &qword_10007EFF8,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_100060948);
      _BridgedStoredNSError.code.getter((void *)(v1 + 416), v5, v42);
      if (*(void *)(v1 + 416) == 28LL
        || (*(void *)(v1 + 440) = v8,
            _BridgedStoredNSError.code.getter((void *)(v1 + 432), v5, v42),
            *(void *)(v1 + 432) == 26LL))
      {
        uint64_t v43 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 776);
        uint64_t v44 = *(void *)(v1 + 760);
        uint64_t v45 = *(void *)(v1 + 664);
        uint64_t v46 = *(void *)(v1 + 648);
        uint64_t v47 = *(void *)(v1 + 560);
        swift_errorRelease(*(void *)(v1 + 824));
        static LoggedObject.logger.getter(v44);
        uint64_t v48 = v43(v45, v47, v46);
        uint64_t v49 = (os_log_s *)Logger.logObject.getter(v48);
        os_log_type_t v50 = static os_log_type_t.info.getter();
        BOOL v51 = os_log_type_enabled(v49, v50);
        uint64_t v52 = *(void (**)(uint64_t, uint64_t))(v1 + 784);
        uint64_t v53 = *(void *)(v1 + 728);
        uint64_t v54 = *(void *)(v1 + 712);
        uint64_t v55 = *(void *)(v1 + 664);
        uint64_t v56 = *(void *)(v1 + 648);
        if (v51)
        {
          uint64_t v84 = *(void (**)(uint64_t, os_log_t))(v1 + 784);
          int64_t v78 = *(void (**)(uint64_t, uint64_t))(v1 + 792);
          os_log_t logb = *(os_log_t *)(v1 + 712);
          uint64_t v57 = swift_slowAlloc(22LL, -1LL);
          uint64_t v58 = swift_slowAlloc(32LL, -1LL);
          v85[0] = v58;
          *(_DWORD *)uint64_t v57 = 141558275;
          *(void *)(v1 + 520) = 1752392040LL;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 520, v1 + 528, v57 + 4);
          *(_WORD *)(v57 + 12) = 2081;
          uint64_t v59 = sub_10000D1E8( &qword_10007F498,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          uint64_t v60 = dispatch thunk of CustomStringConvertible.description.getter(v56, v59);
          uint64_t v76 = v53;
          unint64_t v62 = v61;
          *(void *)(v1 + 528) = sub_100046274(v60, v61, v85);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 528, v1 + 536, v57 + 14);
          swift_bridgeObjectRelease(v62);
          v78(v55, v56);
          _os_log_impl( (void *)&_mh_execute_header,  v49,  v50,  "Zone does not exist for home %{private,mask.hash}s, will create",  (uint8_t *)v57,  0x16u);
          swift_arrayDestroy(v58, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v58, -1LL, -1LL);
          swift_slowDealloc(v57, -1LL, -1LL);

          v84(v76, logb);
        }

        else
        {
          (*(void (**)(void, void))(v1 + 792))(*(void *)(v1 + 664), *(void *)(v1 + 648));

          v52(v53, v54);
        }

        uint64_t v63 = *(void *)(v1 + 808);
        uint64_t v64 = *(void *)(v1 + 616);
        uint64_t v65 = *(void *)(v1 + 608);
        uint64_t v66 = *(void *)(v1 + 600);
        os_log_t logc = *(os_log_t *)(v1 + 552);
        id v67 = [objc_allocWithZone(CKRecordZone) initWithZoneID:*(void *)(v1 + 592)];
        *(void *)(v1 + 840) = v67;
        *(void *)(v1 + 184) = v1 + 448;
        *(void *)(v1 + 144) = v1;
        *(void *)(v1 + 152) = sub_1000330B4;
        uint64_t v68 = swift_continuation_init(v1 + 144, 1LL);
        *(void *)(v1 + 392) = v66;
        uint64_t v69 = sub_10000D27C((void *)(v1 + 368));
        uint64_t v70 = sub_10000D5E8(0LL, &qword_10007FBC0, &OBJC_CLASS___CKRecordZone_ptr);
        CheckedContinuation.init(continuation:function:)( v68,  0xD000000000000026LL,  0x80000001000624F0LL,  v70,  v63,  &protocol self-conformance witness table for Error);
        (*(void (**)(void *, uint64_t, uint64_t))(v65 + 32))(v69, v64, v66);
        *(void *)(v1 + 336) = _NSConcreteStackBlock;
        *(void *)(v1 + 344) = 1107296256LL;
        *(void *)(v1 + 352) = sub_100034568;
        *(void *)(v1 + 360) = &unk_100076848;
        -[os_log_s saveRecordZone:completionHandler:](logc, "saveRecordZone:completionHandler:", v67, v1 + 336);
        return swift_continuation_await(v1 + 144);
      }
    }
  }

  uint64_t v9 = *(void *)(v1 + 824);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 776);
  uint64_t v11 = *(void *)(v1 + 760);
  uint64_t v12 = *(void *)(v1 + 672);
  uint64_t v13 = *(void *)(v1 + 648);
  uint64_t v14 = *(void *)(v1 + 560);
  swift_errorRelease(*(void *)(v1 + 480));
  swift_errorRetain(v9);
  static LoggedObject.logger.getter(v11);
  v10(v12, v14, v13);
  swift_errorRetain(v9);
  uint64_t v15 = swift_errorRetain(v9);
  unint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.error.getter();
  BOOL v18 = os_log_type_enabled(v16, v17);
  unint64_t v19 = *(void (**)(uint64_t, uint64_t))(v1 + 792);
  Class v20 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 784);
  uint64_t v21 = *(void *)(v1 + 736);
  uint64_t v22 = *(void *)(v1 + 712);
  uint64_t v23 = *(void *)(v1 + 672);
  uint64_t v24 = *(void *)(v1 + 648);
  if (v18)
  {
    uint64_t v73 = *(void *)(v1 + 712);
    uint64_t v25 = swift_slowAlloc(32LL, -1LL);
    uint64_t v71 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v72 = swift_slowAlloc(32LL, -1LL);
    v85[0] = v72;
    *(_DWORD *)uint64_t v25 = 141558531;
    *(void *)(v1 + 4sub_1000154A8(*(void *)(v0 + 152) + OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_database, v0 + 56) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 456, v1 + 464, v25 + 4);
    *(_WORD *)(v25 + 12) = 2081;
    uint64_t v26 = sub_10000D1E8( &qword_10007F498,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter(v24, v26);
    os_log_t log = v16;
    unint64_t v29 = v28;
    *(void *)(v1 + 400) = sub_100046274(v27, v28, v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 400, v1 + 408, v25 + 14);
    swift_bridgeObjectRelease(v29);
    v19(v23, v24);
    *(_WORD *)(v25 + 22) = 2114;
    swift_errorRetain(v9);
    uint64_t v30 = _swift_stdlib_bridgeErrorToNSError(v9);
    *(void *)(v1 + 408) = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 408, v1 + 416, v25 + 24);
    uint64_t *v71 = v30;
    swift_errorRelease(v9);
    uint64_t v31 = v9;
    swift_errorRelease(v9);
    _os_log_impl( (void *)&_mh_execute_header,  log,  v17,  "Failed to save encryption key for home %{private,mask.hash}s: %{public}@",  (uint8_t *)v25,  0x20u);
    uint64_t v32 = sub_10000D228(&qword_10007EE38);
    swift_arrayDestroy(v71, 1LL, v32);
    swift_slowDealloc(v71, -1LL, -1LL);
    swift_arrayDestroy(v72, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v72, -1LL, -1LL);
    swift_slowDealloc(v25, -1LL, -1LL);

    uint64_t v33 = v20(v21, v73);
  }

  else
  {
    v19(*(void *)(v1 + 672), *(void *)(v1 + 648));
    swift_errorRelease(v9);
    uint64_t v31 = v9;
    swift_errorRelease(v9);

    uint64_t v33 = v20(v21, v22);
  }

  uint64_t v34 = *(void *)(v1 + 752);
  uint64_t v35 = *(void *)(v1 + 744);
  uint64_t v36 = *(void *)(v1 + 736);
  uint64_t v37 = *(void *)(v1 + 728);
  uint64_t v38 = *(void *)(v1 + 704);
  uint64_t v39 = *(void *)(v1 + 696);
  uint64_t v40 = *(void *)(v1 + 688);
  uint64_t v74 = *(void *)(v1 + 680);
  uint64_t v75 = *(void *)(v1 + 672);
  uint64_t v77 = *(void *)(v1 + 664);
  os_log_t loga = *(os_log_t *)(v1 + 640);
  uint64_t v83 = *(void *)(v1 + 616);
  swift_willThrow(v33);
  swift_errorRelease(v31);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v74);
  swift_task_dealloc(v75);
  swift_task_dealloc(v77);
  swift_task_dealloc(loga);
  swift_task_dealloc(v83);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100033DD0(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + 840);
  uint64_t v3 = *(void **)(v1 + 832);
  swift_willThrow(a1);

  uint64_t v4 = *(void *)(v1 + 848);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 776);
  uint64_t v6 = *(void *)(v1 + 760);
  uint64_t v7 = *(void *)(v1 + 672);
  uint64_t v8 = *(void *)(v1 + 648);
  uint64_t v9 = *(void *)(v1 + 560);
  swift_errorRelease(*(void *)(v1 + 480));
  swift_errorRetain(v4);
  static LoggedObject.logger.getter(v6);
  v5(v7, v9, v8);
  swift_errorRetain(v4);
  uint64_t v45 = v4;
  uint64_t v10 = swift_errorRetain(v4);
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v1 + 792);
    uint64_t v41 = *(void *)(v1 + 736);
    uint64_t v43 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 784);
    uint64_t v39 = *(void *)(v1 + 712);
    uint64_t v14 = *(void *)(v1 + 672);
    uint64_t v15 = *(void *)(v1 + 648);
    uint64_t v16 = swift_slowAlloc(32LL, -1LL);
    uint64_t v35 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v37 = swift_slowAlloc(32LL, -1LL);
    uint64_t v46 = v37;
    *(_DWORD *)uint64_t v16 = 141558531;
    *(void *)(v1 + 4sub_1000154A8(*(void *)(v0 + 152) + OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_database, v0 + 56) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 456, v1 + 464, v16 + 4);
    *(_WORD *)(v16 + 12) = 2081;
    uint64_t v17 = sub_10000D1E8( &qword_10007F498,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter(v15, v17);
    unint64_t v20 = v19;
    *(void *)(v1 + 400) = sub_100046274(v18, v19, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 400, v1 + 408, v16 + 14);
    swift_bridgeObjectRelease(v20);
    v13(v14, v15);
    *(_WORD *)(v16 + 22) = 2114;
    swift_errorRetain(v45);
    uint64_t v21 = _swift_stdlib_bridgeErrorToNSError(v45);
    *(void *)(v1 + 408) = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 408, v1 + 416, v16 + 24);
    *uint64_t v35 = v21;
    swift_errorRelease(v45);
    swift_errorRelease(v45);
    _os_log_impl( (void *)&_mh_execute_header,  v11,  v12,  "Failed to save encryption key for home %{private,mask.hash}s: %{public}@",  (uint8_t *)v16,  0x20u);
    uint64_t v22 = sub_10000D228(&qword_10007EE38);
    swift_arrayDestroy(v35, 1LL, v22);
    swift_slowDealloc(v35, -1LL, -1LL);
    swift_arrayDestroy(v37, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1LL, -1LL);
    swift_slowDealloc(v16, -1LL, -1LL);

    uint64_t v23 = v43(v41, v39);
  }

  else
  {
    uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 784);
    uint64_t v25 = *(void *)(v1 + 736);
    uint64_t v26 = *(void *)(v1 + 712);
    (*(void (**)(void, void))(v1 + 792))(*(void *)(v1 + 672), *(void *)(v1 + 648));
    swift_errorRelease(v4);
    swift_errorRelease(v4);

    uint64_t v23 = v24(v25, v26);
  }

  uint64_t v27 = *(void *)(v1 + 752);
  uint64_t v28 = *(void *)(v1 + 744);
  uint64_t v29 = *(void *)(v1 + 736);
  uint64_t v30 = *(void *)(v1 + 728);
  uint64_t v31 = *(void *)(v1 + 704);
  uint64_t v32 = *(void *)(v1 + 696);
  uint64_t v33 = *(void *)(v1 + 688);
  uint64_t v36 = *(void *)(v1 + 680);
  uint64_t v38 = *(void *)(v1 + 672);
  uint64_t v40 = *(void *)(v1 + 664);
  uint64_t v42 = *(void *)(v1 + 640);
  uint64_t v44 = *(void *)(v1 + 616);
  swift_willThrow(v23);
  swift_errorRelease(v45);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v36);
  swift_task_dealloc(v38);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000341A0(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + 832);
  swift_willThrow(a1);

  uint64_t v3 = *(void *)(v1 + 856);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 776);
  uint64_t v5 = *(void *)(v1 + 760);
  uint64_t v6 = *(void *)(v1 + 672);
  uint64_t v7 = *(void *)(v1 + 648);
  uint64_t v8 = *(void *)(v1 + 560);
  swift_errorRelease(*(void *)(v1 + 480));
  swift_errorRetain(v3);
  static LoggedObject.logger.getter(v5);
  v4(v6, v8, v7);
  swift_errorRetain(v3);
  uint64_t v44 = v3;
  uint64_t v9 = swift_errorRetain(v3);
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    os_log_type_t v12 = *(void (**)(uint64_t, uint64_t))(v1 + 792);
    uint64_t v40 = *(void *)(v1 + 736);
    uint64_t v42 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 784);
    uint64_t v38 = *(void *)(v1 + 712);
    uint64_t v13 = *(void *)(v1 + 672);
    uint64_t v14 = *(void *)(v1 + 648);
    uint64_t v15 = swift_slowAlloc(32LL, -1LL);
    uint64_t v34 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v36 = swift_slowAlloc(32LL, -1LL);
    uint64_t v45 = v36;
    *(_DWORD *)uint64_t v15 = 141558531;
    *(void *)(v1 + 4sub_1000154A8(*(void *)(v0 + 152) + OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_database, v0 + 56) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 456, v1 + 464, v15 + 4);
    *(_WORD *)(v15 + 12) = 2081;
    uint64_t v16 = sub_10000D1E8( &qword_10007F498,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter(v14, v16);
    unint64_t v19 = v18;
    *(void *)(v1 + 400) = sub_100046274(v17, v18, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 400, v1 + 408, v15 + 14);
    swift_bridgeObjectRelease(v19);
    v12(v13, v14);
    *(_WORD *)(v15 + 22) = 2114;
    swift_errorRetain(v44);
    uint64_t v20 = _swift_stdlib_bridgeErrorToNSError(v44);
    *(void *)(v1 + 408) = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 408, v1 + 416, v15 + 24);
    *uint64_t v34 = v20;
    swift_errorRelease(v44);
    swift_errorRelease(v44);
    _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "Failed to save encryption key for home %{private,mask.hash}s: %{public}@",  (uint8_t *)v15,  0x20u);
    uint64_t v21 = sub_10000D228(&qword_10007EE38);
    swift_arrayDestroy(v34, 1LL, v21);
    swift_slowDealloc(v34, -1LL, -1LL);
    swift_arrayDestroy(v36, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1LL, -1LL);
    swift_slowDealloc(v15, -1LL, -1LL);

    uint64_t v22 = v42(v40, v38);
  }

  else
  {
    uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 784);
    uint64_t v24 = *(void *)(v1 + 736);
    uint64_t v25 = *(void *)(v1 + 712);
    (*(void (**)(void, void))(v1 + 792))(*(void *)(v1 + 672), *(void *)(v1 + 648));
    swift_errorRelease(v3);
    swift_errorRelease(v3);

    uint64_t v22 = v23(v24, v25);
  }

  uint64_t v26 = *(void *)(v1 + 752);
  uint64_t v27 = *(void *)(v1 + 744);
  uint64_t v28 = *(void *)(v1 + 736);
  uint64_t v29 = *(void *)(v1 + 728);
  uint64_t v30 = *(void *)(v1 + 704);
  uint64_t v31 = *(void *)(v1 + 696);
  uint64_t v32 = *(void *)(v1 + 688);
  uint64_t v35 = *(void *)(v1 + 680);
  uint64_t v37 = *(void *)(v1 + 672);
  uint64_t v39 = *(void *)(v1 + 664);
  uint64_t v41 = *(void *)(v1 + 640);
  uint64_t v43 = *(void *)(v1 + 616);
  swift_willThrow(v22);
  swift_errorRelease(v44);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v35);
  swift_task_dealloc(v37);
  swift_task_dealloc(v39);
  swift_task_dealloc(v41);
  swift_task_dealloc(v43);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_100034568(uint64_t a1, void *a2, void *a3)
{
  if (a3)
  {
    uint64_t v9 = a3;
    id v5 = a3;
    uint64_t v6 = sub_10000D228(&qword_10007FBA8);
    CheckedContinuation.resume(throwing:)(&v9, v6);
  }

  else if (a2)
  {
    uint64_t v9 = a2;
    id v7 = a2;
    uint64_t v8 = sub_10000D228(&qword_10007FBA8);
    CheckedContinuation.resume(returning:)(&v9, v8);
  }

  else
  {
    __break(1u);
  }

uint64_t sub_100034608()
{
  uint64_t result = static EncryptionKeyQuery.logCategory.getter();
  qword_1000807C0 = result;
  *(void *)algn_1000807C8 = v1;
  return result;
}

uint64_t sub_100034628()
{
  if (qword_10007EB60 != -1) {
    swift_once(&qword_10007EB60, sub_100034608);
  }
  uint64_t v0 = qword_1000807C0;
  swift_bridgeObjectRetain(*(void *)algn_1000807C8);
  return v0;
}

uint64_t sub_100034684(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = v2[5];
  uint64_t v10 = v2[6];
  os_log_type_t v11 = (void *)swift_task_alloc(dword_10007FB9C);
  *(void *)(v3 + 16) = v11;
  void *v11 = v3;
  v11[1] = sub_10001D0F0;
  return sub_1000327A8(a1, a2, v6, v7, v8, v9, v10);
}

uint64_t type metadata accessor for TagEncryptionKeyController(uint64_t a1)
{
  uint64_t result = qword_10007FC80;
  if (!qword_10007FC80) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TagEncryptionKeyController);
  }
  return result;
}

uint64_t sub_100034750(uint64_t a1, uint64_t a2)
{
  return sub_10000D2C8(a2 + 32, a1 + 32);
}

uint64_t sub_100034760(uint64_t a1)
{
  return _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0((void *)(a1 + 32));
}

uint64_t sub_100034778(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v8 = (void *)swift_task_alloc(dword_10007FBDC);
  *(void *)(v3 + 16) = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_10001D0F0;
  return sub_10002F110(a1, a2, v7, v6);
}

unint64_t sub_1000347E4(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v44 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a2 + 64;
  uint64_t v9 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1LL << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    unint64_t result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1LL << v10)) != 0)
    {
      unint64_t v43 = (result + 1) & v11;
      uint64_t v12 = *(void *)(v44 + 72);
      uint64_t v42 = *(void (**)(char *, unint64_t, uint64_t))(v44 + 16);
      uint64_t v13 = v11;
      do
      {
        uint64_t v14 = v8;
        uint64_t v15 = v12;
        int64_t v16 = v12 * v10;
        uint64_t v17 = v13;
        v42(v7, *(void *)(a2 + 48) + v12 * v10, v4);
        uint64_t v18 = *(void *)(a2 + 40);
        uint64_t v19 = sub_10000D1E8( &qword_10007F4A0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v4, v19);
        unint64_t result = (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v7, v4);
        uint64_t v13 = v17;
        unint64_t v21 = v20 & v17;
        if (a1 >= (uint64_t)v43)
        {
          if (v21 >= v43 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            uint64_t v24 = *(void *)(a2 + 48);
            unint64_t v25 = v24 + v15 * a1;
            uint64_t v26 = v24 + v16;
            uint64_t v8 = v14;
            if (v15 * a1 < v16 || v25 >= v26 + v15)
            {
              swift_arrayInitWithTakeFrontToBack(v25, v26, 1LL, v4);
            }

            else if (v15 * a1 != v16)
            {
              swift_arrayInitWithTakeBackToFront(v25);
            }

            uint64_t v27 = *(void *)(a2 + 56);
            uint64_t v28 = type metadata accessor for LubyRackoffEncryptionKey(0LL);
            uint64_t v29 = *(void *)(*(void *)(v28 - 8) + 72LL);
            int64_t v30 = v29 * a1;
            unint64_t result = v27 + v29 * a1;
            int64_t v31 = v29 * v10;
            uint64_t v32 = v27 + v29 * v10;
            unint64_t v33 = v32 + v29;
            if (v30 < v31 || result >= v33)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack(result, v32, 1LL, v28);
              a1 = v10;
              uint64_t v13 = v17;
            }

            else
            {
              a1 = v10;
              uint64_t v13 = v17;
              if (v30 != v31)
              {
                unint64_t result = swift_arrayInitWithTakeBackToFront(result);
                uint64_t v13 = v17;
                a1 = v10;
              }
            }

            goto LABEL_5;
          }
        }

        else if (v21 >= v43 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }

        uint64_t v8 = v14;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v13;
        uint64_t v12 = v15;
      }

      while (((*(void *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
    }

    uint64_t v35 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v36 = *v35;
    uint64_t v37 = (-1LL << a1) - 1;
  }

  else
  {
    uint64_t v35 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v37 = *v35;
    uint64_t v36 = (-1LL << a1) - 1;
  }

  *uint64_t v35 = v37 & v36;
  uint64_t v38 = *(void *)(a2 + 16);
  BOOL v39 = __OFSUB__(v38, 1LL);
  uint64_t v40 = v38 - 1;
  if (v39)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v40;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

unint64_t sub_100034AB8(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        unint64_t v10 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v11 = *v10;
        uint64_t v12 = v10[1];
        Hasher.init(_seed:)(v27);
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v27, v11, v12);
        Swift::Int v13 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease(v12);
        unint64_t v14 = v13 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v14 < v8) {
            goto LABEL_5;
          }
        }

        else if (v14 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v14)
        {
LABEL_11:
          uint64_t v15 = *(void *)(a2 + 48);
          int64_t v16 = (_OWORD *)(v15 + 16 * v3);
          uint64_t v17 = (_OWORD *)(v15 + 16 * v6);
          if (v3 != v6 || v16 >= v17 + 1) {
            *int64_t v16 = *v17;
          }
          uint64_t v18 = *(void *)(a2 + 56);
          uint64_t v19 = (_OWORD *)(v18 + 32 * v3);
          uint64_t v20 = (_OWORD *)(v18 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v19 >= v20 + 2))
          {
            __int128 v9 = v20[1];
            *uint64_t v19 = *v20;
            v19[1] = v9;
            int64_t v3 = v6;
          }
        }

uint64_t sub_100034C8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TagEncryptionKeyController(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100034CD0()
{
  uint64_t v1 = type metadata accessor for TagEncryptionKeyController(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v10 = v9 + *(void *)(v7 + 64);
  uint64_t v11 = v3 | v8 | 7;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  uint64_t v12 = v0 + v4;
  uint64_t v13 = type metadata accessor for DatabaseConfiguration(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8LL))(v12, v13);
  _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0((void *)(v12 + *(int *)(v1 + 28)));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return swift_deallocObject(v0, v10, v11);
}

uint64_t sub_100034DA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TagEncryptionKeyController(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100034DE4(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for TagEncryptionKeyController(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64);
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID(0LL) - 8) + 80LL);
  unint64_t v8 = v5 + v6 + v7;
  uint64_t v9 = *(void *)(v1 + 16);
  uint64_t v10 = *(void *)(v1 + 24);
  uint64_t v11 = v1 + v5;
  uint64_t v12 = v1 + (v8 & ~v7);
  uint64_t v13 = (void *)swift_task_alloc(dword_10007FC04);
  *(void *)(v2 + 16) = v13;
  *uint64_t v13 = v2;
  v13[1] = sub_10000D3C0;
  return sub_10002FE44(a1, v9, v10, v11, v12);
}

void *sub_100034E98(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (void *)(v14 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v14);
  }

  else
  {
    uint64_t v7 = type metadata accessor for DatabaseConfiguration(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)a1 + v8;
    uint64_t v11 = (char *)a2 + v8;
    *(void *)uint64_t v10 = *(void *)v11;
    v10[8] = v11[8];
    *((_BYTE *)a1 + v9) = *((_BYTE *)a2 + v9);
    uint64_t v12 = a3[7];
    __int128 v13 = *(_OWORD *)((char *)a2 + v12 + 24);
    *(_OWORD *)((char *)a1 + v12 + 24) = v13;
    (**(void (***)(void))(v13 - 8))();
  }

  return a1;
}

uint64_t sub_100034F5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DatabaseConfiguration(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  return _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0((void *)(a1 + *(int *)(a2 + 28)));
}

uint64_t sub_100034FA4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DatabaseConfiguration(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  uint64_t v11 = a3[7];
  __int128 v12 = *(_OWORD *)(a2 + v11 + 24);
  *(_OWORD *)(a1 + v11 + 24) = v12;
  (**(void (***)(void))(v12 - 8))();
  return a1;
}

uint64_t sub_10003503C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DatabaseConfiguration(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  *(_BYTE *)(v8 + 8) = *((_BYTE *)v9 + 8);
  *(void *)uint64_t v8 = v10;
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  sub_10002E0AC((void *)(a1 + a3[7]), (void *)(a2 + a3[7]));
  return a1;
}

uint64_t sub_1000350C4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DatabaseConfiguration(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  uint64_t v11 = a3[7];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  __int128 v14 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  *(_OWORD *)(v12 + 16) = v14;
  *(void *)(v12 + 32) = *(void *)(v13 + 32);
  return a1;
}

uint64_t sub_100035154(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DatabaseConfiguration(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  char v11 = *(_BYTE *)(a2 + v8);
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  *(_BYTE *)(a1 + v8) = v11;
  uint64_t v12 = a3[7];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0((void *)(a1 + v12));
  __int128 v15 = *(_OWORD *)(v14 + 16);
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  *(_OWORD *)(v13 + 16) = v15;
  *(void *)(v13 + 32) = *(void *)(v14 + 32);
  return a1;
}

uint64_t sub_1000351EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000351F8);
}

uint64_t sub_1000351F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DatabaseConfiguration(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 28) + 24);
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  return (v9 + 1);
}

uint64_t sub_100035278(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100035284);
}

uint64_t sub_100035284(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for DatabaseConfiguration(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 28) + 24) = (a2 - 1);
  return result;
}

uint64_t sub_100035300(uint64_t a1)
{
  uint64_t result = type metadata accessor for DatabaseConfiguration(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = "\t";
    v4[2] = &unk_100061708;
    v4[3] = &unk_100061720;
    swift_initStructMetadata(a1, 256LL, 4LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_100035394(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  int v5 = v4;
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v48 = *(void *)(v10 - 8);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v44 = (char *)&v42 - v15;
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v42 - v16;
  unint64_t v47 = sub_100037780();
  static LoggedObject.logger.getter(&type metadata for BackgroundSystemTaskScheduler);
  uint64_t v18 = swift_bridgeObjectRetain_n(a2, 2LL);
  uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v46 = a4;
    uint64_t v21 = swift_slowAlloc(12LL, -1LL);
    uint64_t v42 = a3;
    uint64_t v22 = (uint8_t *)v21;
    uint64_t v23 = swift_slowAlloc(32LL, -1LL);
    unint64_t v43 = v5;
    uint64_t v24 = v23;
    v50[0] = v23;
    uint64_t v45 = v13;
    *(_DWORD *)uint64_t v22 = 136315138;
    swift_bridgeObjectRetain(a2);
    uint64_t v49 = sub_100046274(a1, a2, v50);
    a4 = v46;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, v50, v22 + 4);
    swift_bridgeObjectRelease_n(a2, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v19,  v20,  "Attempting to register launch handler associated with identifier %s",  v22,  0xCu);
    swift_arrayDestroy(v24, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v25 = v24;
    int v5 = v43;
    swift_slowDealloc(v25, -1LL, -1LL);
    uint64_t v26 = v22;
    a3 = v42;
    swift_slowDealloc(v26, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a2, 2LL);
  }

  uint64_t v48 = *(void *)(v48 + 8);
  ((void (*)(char *, uint64_t))v48)(v17, v10);
  uint64_t v27 = (void *)swift_allocObject(&unk_100076998, 48LL, 7LL);
  v27[2] = a1;
  v27[3] = a2;
  void v27[4] = a3;
  v27[5] = a4;
  uint64_t v28 = v5[3];
  uint64_t v29 = v5[4];
  sub_10000D408(v5, v28);
  int64_t v30 = *(void (**)(uint64_t, unint64_t, void *(*)(uint64_t), void *, uint64_t, uint64_t))(v29 + 8);
  swift_bridgeObjectRetain(a2);
  swift_retain(a4);
  v30(a1, a2, sub_100037838, v27, v28, v29);
  int64_t v31 = v44;
  static LoggedObject.logger.getter(&type metadata for BackgroundSystemTaskScheduler);
  uint64_t v32 = swift_bridgeObjectRetain_n(a2, 2LL);
  unint64_t v33 = (os_log_s *)Logger.logObject.getter(v32);
  uint64_t v34 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v33, (os_log_type_t)v34))
  {
    uint64_t v35 = a1;
    uint64_t v46 = v10;
    uint64_t v36 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v37 = v31;
    uint64_t v38 = swift_slowAlloc(32LL, -1LL);
    v50[0] = v38;
    *(_DWORD *)uint64_t v36 = 136446210;
    swift_bridgeObjectRetain(a2);
    uint64_t v49 = sub_100046274(v35, a2, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, v50, v36 + 4);
    swift_bridgeObjectRelease_n(a2, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v33,  (os_log_type_t)v34,  "Successfully registered launch handler associated with identifier %{public}s",  v36,  0xCu);
    swift_arrayDestroy(v38, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1LL, -1LL);
    swift_slowDealloc(v36, -1LL, -1LL);

    swift_release(v27);
    BOOL v39 = v37;
    uint64_t v40 = v46;
  }

  else
  {

    swift_release(v27);
    swift_bridgeObjectRelease_n(a2, 2LL);
    BOOL v39 = v31;
    uint64_t v40 = v10;
  }

  return ((uint64_t (*)(char *, uint64_t))v48)(v39, v40);
}

uint64_t sub_100035930(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger(0LL);
  id v90 = *(void (***)(char *, uint64_t))(v4 - 8);
  uint64_t v91 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v87 = (char *)&v81 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v85 = (char *)&v81 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v81 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v86 = (char *)&v81 - v13;
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v81 - v14;
  uint64_t v16 = a1[3];
  uint64_t v17 = a1[4];
  sub_10000D408(a1, v16);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v16, v17);
  unint64_t v20 = v19;
  uint64_t v21 = v1[3];
  uint64_t v22 = v1[4];
  sub_10000D408(v2, v2[3]);
  uint64_t v23 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v22 + 24);
  uint64_t v89 = v18;
  char v24 = v23(v18, v20, v21, v22);
  unint64_t v25 = sub_100037780();
  if ((v24 & 1) != 0)
  {
    static LoggedObject.logger.getter(&type metadata for BackgroundSystemTaskScheduler);
    uint64_t v26 = swift_bridgeObjectRetain(v20);
    uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
    os_log_type_t v28 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      unint64_t v30 = v20;
      uint64_t v31 = swift_slowAlloc(32LL, -1LL);
      uint64_t v94 = v31;
      *(_DWORD *)uint64_t v29 = 136446210;
      swift_bridgeObjectRetain(v30);
      uint64_t v92 = sub_100046274(v89, v30, &v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v29 + 4);
      swift_bridgeObjectRelease_n(v30, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v27,  v28,  "Declining to submit task request associated with identifier %{public}s because another request is already schedu led, but not yet completed",  v29,  0xCu);
      swift_arrayDestroy(v31, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1LL, -1LL);
      swift_slowDealloc(v29, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v20, 2LL);
    }

    v90[1](v11, v91);
    goto LABEL_8;
  }

  static LoggedObject.logger.getter(&type metadata for BackgroundSystemTaskScheduler);
  uint64_t v32 = swift_bridgeObjectRetain_n(v20, 2LL);
  unint64_t v33 = (os_log_s *)Logger.logObject.getter(v32);
  os_log_type_t v34 = static os_log_type_t.info.getter();
  BOOL v35 = os_log_type_enabled(v33, v34);
  unint64_t v83 = v25;
  unint64_t v84 = v20;
  if (v35)
  {
    uint64_t v36 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v37 = swift_slowAlloc(32LL, -1LL);
    uint64_t v94 = v37;
    *(_DWORD *)uint64_t v36 = 136446210;
    uint64_t v82 = v36 + 4;
    swift_bridgeObjectRetain(v20);
    uint64_t v92 = sub_100046274(v89, v20, &v94);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v82);
    swift_bridgeObjectRelease_n(v20, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v33,  v34,  "Attempting to submit task request associated with identifier %{public}s",  v36,  0xCu);
    swift_arrayDestroy(v37, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1LL, -1LL);
    swift_slowDealloc(v36, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v20, 2LL);
  }

  uint64_t v42 = v90[1];
  v42(v15, v91);
  uint64_t v43 = v88;
  uint64_t v44 = v2[3];
  uint64_t v45 = v2[4];
  sub_10000D408(v2, v44);
  uint64_t v46 = v43;
  (*(void (**)(void *, uint64_t, uint64_t))(v45 + 16))(a1, v44, v45);
  uint64_t v47 = v43;
  if (v43)
  {
    type metadata accessor for Code(0LL);
    uint64_t v49 = v48;
    uint64_t v94 = 5LL;
    swift_errorRetain(v43);
    unint64_t v50 = sub_1000377C4();
    char v51 = static _ErrorCodeProtocol.~= infix(_:_:)(&v94, v43, v49, v50);
    swift_errorRelease(v43);
    unint64_t v52 = v84;
    if ((v51 & 1) != 0)
    {
      swift_errorRelease(v43);
      uint64_t v53 = v85;
      static LoggedObject.logger.getter(&type metadata for BackgroundSystemTaskScheduler);
      uint64_t v54 = swift_bridgeObjectRetain(v52);
      uint64_t v55 = (os_log_s *)Logger.logObject.getter(v54);
      os_log_type_t v56 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v55, v56))
      {
        uint64_t v57 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v58 = v42;
        unint64_t v59 = v52;
        uint64_t v60 = swift_slowAlloc(32LL, -1LL);
        uint64_t v94 = v60;
        *(_DWORD *)uint64_t v57 = 136446210;
        swift_bridgeObjectRetain(v59);
        uint64_t v92 = sub_100046274(v89, v59, &v94);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v57 + 4);
        swift_bridgeObjectRelease_n(v59, 3LL);
        _os_log_impl( (void *)&_mh_execute_header,  v55,  v56,  "Attempted to submit request for %{public}s even though another request was already pending",  v57,  0xCu);
        swift_arrayDestroy(v60, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v60, -1LL, -1LL);
        swift_slowDealloc(v57, -1LL, -1LL);

        v58(v53, v91);
      }

      else
      {

        swift_bridgeObjectRelease_n(v52, 2LL);
        v42(v53, v91);
      }

LABEL_8:
      unint64_t v38 = sub_100022540();
      uint64_t v39 = swift_allocError(&type metadata for BackgroundSystemTaskSchedulerError, v38, 0LL, 0LL);
      *uint64_t v40 = 2;
      return swift_willThrow(v39);
    }

    uint64_t v68 = v87;
    static LoggedObject.logger.getter(&type metadata for BackgroundSystemTaskScheduler);
    swift_errorRetain(v43);
    swift_bridgeObjectRetain(v52);
    uint64_t v69 = swift_errorRetain(v43);
    uint64_t v70 = (os_log_s *)Logger.logObject.getter(v69);
    os_log_type_t v71 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v70, v71))
    {
      uint64_t v72 = swift_slowAlloc(22LL, -1LL);
      uint64_t v73 = swift_slowAlloc(8LL, -1LL);
      id v90 = (void (**)(char *, uint64_t))v42;
      uint64_t v74 = (void *)v73;
      uint64_t v75 = swift_slowAlloc(32LL, -1LL);
      uint64_t v94 = v75;
      *(_DWORD *)uint64_t v72 = 136446466;
      swift_bridgeObjectRetain(v52);
      uint64_t v92 = sub_100046274(v89, v52, &v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v72 + 4);
      swift_bridgeObjectRelease_n(v52, 3LL);
      *(_WORD *)(v72 + 12) = 2114;
      swift_errorRetain(v46);
      uint64_t v76 = _swift_stdlib_bridgeErrorToNSError(v46);
      uint64_t v92 = v76;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v72 + 14);
      void *v74 = v76;
      swift_errorRelease(v46);
      swift_errorRelease(v46);
      _os_log_impl( (void *)&_mh_execute_header,  v70,  v71,  "Received unknown error while attempting to submit task request associated with identifier %{public}s: %{public}@",  (uint8_t *)v72,  0x16u);
      uint64_t v77 = sub_10000D228(&qword_10007EE38);
      swift_arrayDestroy(v74, 1LL, v77);
      swift_slowDealloc(v74, -1LL, -1LL);
      swift_arrayDestroy(v75, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v75, -1LL, -1LL);
      swift_slowDealloc(v72, -1LL, -1LL);

      ((void (*)(char *, uint64_t))v90)(v87, v91);
    }

    else
    {
      swift_bridgeObjectRelease_n(v52, 2LL);
      swift_errorRelease(v46);
      swift_errorRelease(v46);

      v42(v68, v91);
    }

    unint64_t v78 = sub_100022540();
    uint64_t v79 = swift_allocError(&type metadata for BackgroundSystemTaskSchedulerError, v78, 0LL, 0LL);
    *uint64_t v80 = 0;
    swift_willThrow(v79);
    return swift_errorRelease(v47);
  }

  else
  {
    unint64_t v61 = v86;
    static LoggedObject.logger.getter(&type metadata for BackgroundSystemTaskScheduler);
    unint64_t v62 = v84;
    uint64_t v63 = swift_bridgeObjectRetain(v84);
    uint64_t v64 = (os_log_s *)Logger.logObject.getter(v63);
    os_log_type_t v65 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v64, v65))
    {
      id v90 = (void (**)(char *, uint64_t))v42;
      uint64_t v66 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v67 = swift_slowAlloc(32LL, -1LL);
      uint64_t v94 = v67;
      *(_DWORD *)uint64_t v66 = 136446210;
      swift_bridgeObjectRetain(v62);
      uint64_t v92 = sub_100046274(v89, v62, &v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v66 + 4);
      swift_bridgeObjectRelease_n(v62, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v64,  v65,  "Successfully submitted task request associated with identifier %{public}s",  v66,  0xCu);
      swift_arrayDestroy(v67, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v67, -1LL, -1LL);
      swift_slowDealloc(v66, -1LL, -1LL);

      return ((uint64_t (*)(char *, uint64_t))v90)(v61, v91);
    }

    else
    {

      swift_bridgeObjectRelease_n(v62, 2LL);
      return ((uint64_t (*)(char *, uint64_t))v42)(v61, v91);
    }
  }

    uint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }

    if (v14 >= v8) {
      goto LABEL_39;
    }
    uint64_t v15 = *(void *)(v4 + 8 * v14);
    uint64_t v16 = v10 + 1;
    if (!v15)
    {
      uint64_t v16 = v10 + 2;
      if (v10 + 2 >= v8) {
        goto LABEL_39;
      }
      uint64_t v15 = *(void *)(v4 + 8 * v16);
      if (!v15)
      {
        uint64_t v16 = v10 + 3;
        if (v10 + 3 >= v8) {
          goto LABEL_39;
        }
        uint64_t v15 = *(void *)(v4 + 8 * v16);
        if (!v15)
        {
          uint64_t v16 = v10 + 4;
          if (v10 + 4 >= v8) {
            goto LABEL_39;
          }
          uint64_t v15 = *(void *)(v4 + 8 * v16);
          if (!v15) {
            break;
          }
        }
      }
    }

void *sub_1000362D8( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t (*a4)(void), uint64_t a5)
{
  uint64_t v10 = sub_10000D228(&qword_10007EE68);
  __chkstk_darwin(v10);
  uint64_t v37 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Logger(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10000D478(a1, (uint64_t)v40);
  sub_100037780();
  static LoggedObject.logger.getter(&type metadata for BackgroundSystemTaskScheduler);
  uint64_t v16 = swift_bridgeObjectRetain_n(a3, 2LL);
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v36 = a4;
    uint64_t v19 = swift_slowAlloc(12LL, -1LL);
    uint64_t v34 = v12;
    unint64_t v20 = (uint8_t *)v19;
    uint64_t v21 = swift_slowAlloc(32LL, -1LL);
    uint64_t v35 = a5;
    uint64_t v22 = v21;
    uint64_t v39 = v21;
    *(_DWORD *)unint64_t v20 = 136446210;
    swift_bridgeObjectRetain(a3);
    uint64_t v38 = sub_100046274(a2, a3, &v39);
    a4 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v20 + 4);
    swift_bridgeObjectRelease_n(a3, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v17,  v18,  "Beginning execution of task associated with identifier %{public}s",  v20,  0xCu);
    swift_arrayDestroy(v22, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1LL, -1LL);
    swift_slowDealloc(v20, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v34);
  }

  else
  {

    swift_bridgeObjectRelease_n(a3, 2LL);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }

  uint64_t v23 = a4(v40);
  char v24 = (void *)swift_allocObject(&unk_1000769C0, 40LL, 7LL);
  v24[2] = a2;
  v24[3] = a3;
  void v24[4] = v23;
  uint64_t v25 = v41;
  uint64_t v26 = v42;
  sub_10001001C((uint64_t)v40, v41);
  uint64_t v27 = *(void (**)(void (*)(), void *, uint64_t, uint64_t))(v26 + 24);
  swift_bridgeObjectRetain(a3);
  swift_retain(v23);
  v27(sub_100037870, v24, v25, v26);
  uint64_t v28 = type metadata accessor for TaskPriority(0LL);
  uint64_t v29 = (uint64_t)v37;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56LL))(v37, 1LL, 1LL, v28);
  unint64_t v30 = (void *)swift_allocObject(&unk_1000769E8, 56LL, 7LL);
  __int128 v30[2] = 0LL;
  v30[3] = 0LL;
  v30[4] = v23;
  v30[5] = a2;
  v30[6] = a3;
  swift_bridgeObjectRetain(a3);
  swift_retain(v23);
  uint64_t v31 = sub_10005DBB4(v29, (uint64_t)&unk_10007FCD0, (uint64_t)v30);
  swift_release(v23);
  swift_release(v31);
  return sub_100037930(v40);
}

void sub_100036620(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100037780();
  static LoggedObject.logger.getter(&type metadata for BackgroundSystemTaskScheduler);
  uint64_t v10 = swift_bridgeObjectRetain_n(a2, 2LL);
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v17[1] = a3;
    uint64_t v13 = swift_slowAlloc(12LL, -1LL);
    v17[0] = v6;
    uint64_t v14 = a1;
    uint64_t v15 = (uint8_t *)v13;
    uint64_t v16 = swift_slowAlloc(32LL, -1LL);
    uint64_t v19 = v16;
    *(_DWORD *)uint64_t v15 = 136446210;
    swift_bridgeObjectRetain(a2);
    uint64_t v18 = sub_100046274(v14, a2, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v15 + 4);
    swift_bridgeObjectRelease_n(a2, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v11,  v12,  "System scheduler is expiring the task run associated with identifier %{public}s",  v15,  0xCu);
    swift_arrayDestroy(v16, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1LL, -1LL);
    swift_slowDealloc(v15, -1LL, -1LL);

    (*(void (**)(char *, void))(v7 + 8))(v9, v17[0]);
  }

  else
  {

    swift_bridgeObjectRelease_n(a2, 2LL);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }

  sub_10000D228((uint64_t *)&unk_10007EC20);
  Task.cancel()();
}

uint64_t sub_100036838(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void v6[9] = a5;
  v6[10] = a6;
  uint64_t v8 = type metadata accessor for CancellationError(0LL);
  v6[11] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v6[12] = v9;
  v6[13] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Logger(0LL);
  v6[14] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v6[15] = v11;
  unint64_t v12 = (*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v6[16] = swift_task_alloc(v12);
  v6[17] = swift_task_alloc(v12);
  void v6[18] = swift_task_alloc(v12);
  uint64_t v13 = (void *)swift_task_alloc(async function pointer to Task.result.getter[1]);
  v6[19] = v13;
  uint64_t v14 = sub_10000D228((uint64_t *)&unk_10007EC20);
  v6[20] = v14;
  *uint64_t v13 = v6;
  v13[1] = sub_100036934;
  return Task.result.getter( v6 + 2,  a4,  (char *)&type metadata for () + 8,  v14,  &protocol self-conformance witness table for Error);
}

uint64_t sub_100036934()
{
  return swift_task_switch(sub_100036988, 0LL, 0LL);
}

uint64_t sub_100036988()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (*(_BYTE *)(v0 + 24) == 1)
  {
    uint64_t v2 = *(void *)(v0 + 160);
    uint64_t v3 = *(void *)(v0 + 104);
    uint64_t v4 = *(void *)(v0 + 88);
    *(void *)(v0 + 32) = v1;
    swift_errorRetain(v1);
    char v5 = swift_dynamicCast(v3, v0 + 32, v2, v4, 0LL);
    uint64_t v6 = *(void *)(v0 + 80);
    if ((v5 & 1) != 0)
    {
      sub_100037780();
      static LoggedObject.logger.getter(&type metadata for BackgroundSystemTaskScheduler);
      uint64_t v7 = swift_bridgeObjectRetain_n(v6, 2LL);
      uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
      os_log_type_t v9 = static os_log_type_t.default.getter();
      BOOL v10 = os_log_type_enabled(v8, v9);
      uint64_t v11 = *(void *)(v0 + 136);
      uint64_t v12 = *(void *)(v0 + 112);
      uint64_t v13 = *(void *)(v0 + 120);
      unint64_t v14 = *(void *)(v0 + 80);
      if (v10)
      {
        uint64_t v47 = *(void *)(v0 + 72);
        uint64_t v52 = *(void *)(v0 + 120);
        uint64_t v15 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v49 = v11;
        uint64_t v16 = swift_slowAlloc(32LL, -1LL);
        uint64_t v56 = v16;
        *(_DWORD *)uint64_t v15 = 136446210;
        swift_bridgeObjectRetain(v14);
        *(void *)(v0 + sub_1000154A8(*(void *)(v0 + 152) + OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_database, v0 + 56) = sub_100046274(v47, v14, &v56);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v15 + 4);
        swift_bridgeObjectRelease_n(v14, 3LL);
        _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "Task associated with identifier %{public}s was canceled",  v15,  0xCu);
        swift_arrayDestroy(v16, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v16, -1LL, -1LL);
        swift_slowDealloc(v15, -1LL, -1LL);

        sub_100037970(v1, 1);
        (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v49, v12);
      }

      else
      {
        sub_100037970(v1, 1);
        swift_bridgeObjectRelease_n(v14, 2LL);

        (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
      }

      (*(void (**)(void, void))(*(void *)(v0 + 96) + 8LL))(*(void *)(v0 + 104), *(void *)(v0 + 88));
      swift_errorRelease(*(void *)(v0 + 32));
    }

    else
    {
      swift_errorRelease(*(void *)(v0 + 32));
      sub_100037780();
      static LoggedObject.logger.getter(&type metadata for BackgroundSystemTaskScheduler);
      swift_bridgeObjectRetain(v6);
      sub_100037964(v1, 1);
      swift_bridgeObjectRetain(v6);
      uint64_t v29 = sub_100037964(v1, 1);
      unint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
      os_log_type_t v31 = static os_log_type_t.error.getter();
      BOOL v32 = os_log_type_enabled(v30, v31);
      uint64_t v34 = *(void *)(v0 + 120);
      uint64_t v33 = *(void *)(v0 + 128);
      uint64_t v35 = *(void *)(v0 + 112);
      unint64_t v36 = *(void *)(v0 + 80);
      if (v32)
      {
        uint64_t v55 = *(void *)(v0 + 128);
        uint64_t v37 = *(void *)(v0 + 72);
        uint64_t v54 = *(void *)(v0 + 112);
        uint64_t v38 = swift_slowAlloc(22LL, -1LL);
        uint64_t v51 = v34;
        uint64_t v39 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
        uint64_t v40 = swift_slowAlloc(32LL, -1LL);
        uint64_t v56 = v40;
        *(_DWORD *)uint64_t v38 = 136446466;
        swift_bridgeObjectRetain(v36);
        *(void *)(v0 + 40) = sub_100046274(v37, v36, &v56);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v38 + 4);
        swift_bridgeObjectRelease_n(v36, 3LL);
        *(_WORD *)(v38 + 12) = 2112;
        swift_errorRetain(v1);
        uint64_t v41 = _swift_stdlib_bridgeErrorToNSError(v1);
        *(void *)(v0 + 48) = v41;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v38 + 14);
        uint64_t *v39 = v41;
        sub_100037970(v1, 1);
        sub_100037970(v1, 1);
        _os_log_impl( (void *)&_mh_execute_header,  v30,  v31,  "Execution of task associated with identifier %{public}s failed: %@",  (uint8_t *)v38,  0x16u);
        uint64_t v42 = sub_10000D228(&qword_10007EE38);
        swift_arrayDestroy(v39, 1LL, v42);
        swift_slowDealloc(v39, -1LL, -1LL);
        swift_arrayDestroy(v40, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v40, -1LL, -1LL);
        swift_slowDealloc(v38, -1LL, -1LL);

        sub_100037970(v1, 1);
        (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v55, v54);
      }

      else
      {
        sub_100037970(v1, 1);
        swift_bridgeObjectRelease_n(v36, 2LL);
        sub_100037970(v1, 1);
        sub_100037970(v1, 1);

        (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
      }
    }
  }

  else
  {
    uint64_t v17 = *(void *)(v0 + 80);
    sub_100037780();
    static LoggedObject.logger.getter(&type metadata for BackgroundSystemTaskScheduler);
    uint64_t v18 = swift_bridgeObjectRetain_n(v17, 2LL);
    uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v20 = static os_log_type_t.info.getter();
    BOOL v21 = os_log_type_enabled(v19, v20);
    uint64_t v22 = *(void *)(v0 + 144);
    uint64_t v23 = *(void *)(v0 + 112);
    char v24 = *(os_log_s **)(v0 + 120);
    unint64_t v25 = *(void *)(v0 + 80);
    if (v21)
    {
      uint64_t v53 = *(void *)(v0 + 112);
      uint64_t v26 = *(void *)(v0 + 72);
      uint64_t v50 = *(void *)(v0 + 144);
      uint64_t v27 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      os_log_t log = v24;
      uint64_t v28 = swift_slowAlloc(32LL, -1LL);
      uint64_t v56 = v28;
      *(_DWORD *)uint64_t v27 = 136446210;
      swift_bridgeObjectRetain(v25);
      *(void *)(v0 + 64) = sub_100046274(v26, v25, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v27 + 4);
      swift_bridgeObjectRelease_n(v25, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v19,  v20,  "Finished execution of task associated with identifier %{public}s",  v27,  0xCu);
      swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1LL, -1LL);
      swift_slowDealloc(v27, -1LL, -1LL);

      (*((void (**)(uint64_t, uint64_t))log + 1))(v50, v53);
    }

    else
    {
      swift_bridgeObjectRelease_n(*(void *)(v0 + 80), 2LL);

      (*((void (**)(uint64_t, uint64_t))v24 + 1))(v22, v23);
    }
  }

  uint64_t v43 = *(void *)(v0 + 136);
  uint64_t v44 = *(void *)(v0 + 128);
  uint64_t v45 = *(void *)(v0 + 104);
  swift_task_dealloc(*(void *)(v0 + 144));
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100036FE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v5 = v4;
  uint64_t v8 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  NSString v12 = String._bridgeToObjectiveC()();
  sub_10000D5E8(0LL, &qword_10007F398, &OBJC_CLASS___OS_dispatch_queue_ptr);
  (*(void (**)(char *, void, uint64_t))(v9 + 104))( v11,  enum case for DispatchQoS.QoSClass.background(_:),  v8);
  uint64_t v13 = (void *)static OS_dispatch_queue.global(qos:)(v11);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v14 = swift_allocObject(&unk_100076A10, 32LL, 7LL);
  *(void *)(v14 + 16) = a3;
  *(void *)(v14 + 24) = a4;
  aBlock[4] = sub_1000379A0;
  uint64_t v21 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100037220;
  aBlock[3] = &unk_100076A28;
  uint64_t v15 = _Block_copy(aBlock);
  uint64_t v16 = v21;
  swift_retain(a4);
  swift_release(v16);
  LOBYTE(v_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 5) = [v5 registerForTaskWithIdentifier:v12 usingQueue:v13 launchHandler:v15];
  _Block_release(v15);

  if ((v5 & 1) == 0)
  {
    unint64_t v17 = sub_100022540();
    uint64_t v18 = swift_allocError(&type metadata for BackgroundSystemTaskSchedulerError, v17, 0LL, 0LL);
    *uint64_t v19 = 1;
    swift_willThrow(v18);
  }

uint64_t sub_1000371B0(void *a1, void (*a2)(void *))
{
  v6[3] = sub_10000D5E8(0LL, &qword_10007FCD8, &OBJC_CLASS___BGSystemTask_ptr);
  v6[4] = &off_100077898;
  v6[0] = a1;
  id v4 = a1;
  a2(v6);
  return _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v6);
}

void sub_100037220(uint64_t a1, void *a2)
{
  id v4 = *(void (**)(void))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  id v5 = a2;
  v4();
  swift_release(v3);
}

void sub_100037270(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  sub_10000D408(a1, v4);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
  uint64_t v7 = v6;
  id v8 = objc_allocWithZone(&OBJC_CLASS___BGNonRepeatingSystemTaskRequest);
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v7);
  id v10 = [v8 initWithIdentifier:v9];

  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_10000D408(a1, v11);
  uint64_t v13 = *(unsigned __int8 (**)(uint64_t, uint64_t))(v12 + 88);
  id v14 = v10;
  objc_msgSend(v14, "setPriority:", v13(v11, v12));

  uint64_t v15 = a1[3];
  uint64_t v16 = a1[4];
  sub_10000D408(a1, v15);
  unint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(v16 + 16);
  id v18 = v14;
  objc_msgSend(v18, "setRequiresNetworkConnectivity:", v17(v15, v16) & 1);

  uint64_t v19 = a1[3];
  uint64_t v20 = a1[4];
  sub_10000D408(a1, v19);
  uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t))(v20 + 40);
  id v22 = v18;
  objc_msgSend(v22, "setShouldWakeDevice:", v21(v19, v20) & 1);

  uint64_t v23 = a1[3];
  uint64_t v24 = a1[4];
  sub_10000D408(a1, v23);
  unint64_t v25 = *(uint64_t (**)(uint64_t, uint64_t))(v24 + 64);
  id v26 = v22;
  objc_msgSend(v26, "setRequiresExternalPower:", v25(v23, v24) & 1);

  uint64_t v27 = a1[3];
  uint64_t v28 = a1[4];
  sub_10000D408(a1, v27);
  char v29 = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 160))(v27, v28);
  sub_100018A38(v29);
  uint64_t v30 = a1[3];
  uint64_t v31 = a1[4];
  sub_10000D408(a1, v30);
  if ((*(double (**)(uint64_t, uint64_t))(v31 + 136))(v30, v31) > 0.0)
  {
    uint64_t v32 = a1[3];
    uint64_t v33 = a1[4];
    sub_10000D408(a1, v32);
    (*(void (**)(uint64_t, uint64_t))(v33 + 136))(v32, v33);
    objc_msgSend(v26, "setScheduleAfter:");
  }

  uint64_t v34 = a1[3];
  uint64_t v35 = a1[4];
  sub_10000D408(a1, v34);
  if ((*(double (**)(uint64_t, uint64_t))(v35 + 112))(v34, v35) > 0.0)
  {
    uint64_t v36 = a1[3];
    uint64_t v37 = a1[4];
    sub_10000D408(a1, v36);
    (*(void (**)(uint64_t, uint64_t))(v37 + 112))(v36, v37);
    objc_msgSend(v26, "setTrySchedulingBefore:");
  }

  id v43 = 0LL;
  unsigned __int8 v38 = [v2 submitTaskRequest:v26 error:&v43];
  id v39 = v43;
  if ((v38 & 1) != 0)
  {
    id v40 = v43;
  }

  else
  {
    id v41 = v43;
    _convertNSErrorToError(_:)(v39);

    swift_willThrow(v42);
  }
}

void sub_10003759C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_1000375BC(void *a1)
{
}

BOOL sub_1000375DC()
{
  uint64_t v1 = *v0;
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 taskRequestForIdentifier:v2];

  if (v3) {
  return v3 != 0LL;
  }
}

uint64_t initializeWithCopy for BackgroundSystemTaskScheduler(uint64_t a1, uint64_t a2)
{
  __int128 v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

void *assignWithCopy for BackgroundSystemTaskScheduler(void *a1, void *a2)
{
  return a1;
}

__n128 initializeWithTake for BackgroundSystemTaskScheduler(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for BackgroundSystemTaskScheduler(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for BackgroundSystemTaskScheduler(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BackgroundSystemTaskScheduler(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 40) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for BackgroundSystemTaskScheduler()
{
  return &type metadata for BackgroundSystemTaskScheduler;
}

unint64_t sub_100037780()
{
  unint64_t result = qword_10007FCC0;
  if (!qword_10007FCC0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100061810, &type metadata for BackgroundSystemTaskScheduler);
    atomic_store(result, &qword_10007FCC0);
  }

  return result;
}

unint64_t sub_1000377C4()
{
  unint64_t result = qword_10007EFA0;
  if (!qword_10007EFA0)
  {
    type metadata accessor for Code(255LL);
    unint64_t result = swift_getWitnessTable(&unk_100060790, v1);
    atomic_store(result, (unint64_t *)&qword_10007EFA0);
  }

  return result;
}

uint64_t sub_10003780C()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

void *sub_100037838(uint64_t a1)
{
  return sub_1000362D8( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(uint64_t (**)(void))(v1 + 32),  *(void *)(v1 + 40));
}

uint64_t sub_100037844()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_100037870()
{
}

uint64_t sub_10003787C()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_1000378B0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  NSString v9 = (void *)swift_task_alloc(dword_10007FCCC);
  *(void *)(v2 + 16) = v9;
  void *v9 = v2;
  v9[1] = sub_10000D3C0;
  return sub_100036838(a1, v4, v5, v6, v7, v8);
}

void *sub_100037930(void *a1)
{
  return a1;
}

uint64_t sub_100037964(uint64_t result, char a2)
{
  if ((a2 & 1) != 0) {
    return swift_errorRetain(result);
  }
  return result;
}

uint64_t sub_100037970(uint64_t result, char a2)
{
  if ((a2 & 1) != 0) {
    return swift_errorRelease(result);
  }
  return result;
}

uint64_t sub_10003797C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000379A0(void *a1)
{
  return sub_1000371B0(a1, *(void (**)(void *))(v1 + 16));
}

uint64_t sub_1000379A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000379B8(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t storeEnumTagSinglePayload for BackgroundSystemTaskSchedulerError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_100037A0C + 4 * byte_100061785[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100037A40 + 4 * byte_100061780[v4]))();
}

uint64_t sub_100037A40(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100037A48(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100037A50LL);
  }
  return result;
}

uint64_t sub_100037A5C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100037A64LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_100037A68(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100037A70(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BackgroundSystemTaskSchedulerError()
{
  return &type metadata for BackgroundSystemTaskSchedulerError;
}

unint64_t sub_100037A90()
{
  unint64_t result = qword_10007FCE0;
  if (!qword_10007FCE0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000618A4, &type metadata for BackgroundSystemTaskSchedulerError);
    atomic_store(result, (unint64_t *)&qword_10007FCE0);
  }

  return result;
}

uint64_t sub_100037AD4(uint64_t a1)
{
  __int16 v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

id sub_100037B2C()
{
  v2.uint64_t receiver = v0;
  v2.Class super_class = (Class)_s8ListenerCMa();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t _s8ListenerCMa()
{
  return objc_opt_self(&OBJC_CLASS____TtCC11homeeventsd9XPCServer8Listener);
}

uint64_t sub_100037C48(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t ObjectType = swift_getObjectType(a3);
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v9);
  id v14 = (uint8_t *)&v69 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v69 - v15;
  unint64_t v17 = sub_1000385F4();
  uint64_t Strong = swift_weakLoadStrong(a3 + OBJC_IVAR____TtC11homeeventsd9XPCServer_mainDriver);
  if (Strong)
  {
    uint64_t v75 = Strong;
    if ((*(_BYTE *)(a3 + OBJC_IVAR____TtC11homeeventsd9XPCServer_isCoreDataSetUp) & 1) != 0)
    {
      uint64_t v74 = v14;
      unint64_t v19 = v17;
      uint64_t v20 = *(void *)(a3 + OBJC_IVAR____TtC11homeeventsd9XPCServer_listener);
      uint64_t v21 = (os_unfair_lock_s *)(v20 + 32);
      os_unfair_lock_lock((os_unfair_lock_t)(v20 + 32));
      uint64_t v22 = *(void *)(v20 + 16);
      if (v22)
      {
        os_unfair_lock_unlock(v21);
        if (v22 == a1)
        {
          uint64_t v72 = v8;
          uint64_t v73 = v7;
          uint64_t v23 = a2;
          uint64_t v24 = (void **)(*(uint64_t (**)(void *, unint64_t, uint64_t, uint64_t))(a3
                                                                                               + OBJC_IVAR____TtC11homeeventsd9XPCServer_proxyConnectionFactory))( a2,  v19,  v75,  a3 + OBJC_IVAR____TtC11homeeventsd9XPCServer_features);
          unint64_t v25 = (void *)objc_opt_self(&OBJC_CLASS___NSXPCInterface);
          id v26 = [v25 interfaceWithProtocol:&OBJC_PROTOCOL____TtP13HomeKitEvents18XPCClientInterface_];
          [v23 setRemoteObjectInterface:v26];

          id v27 = [v25 interfaceWithProtocol:&OBJC_PROTOCOL____TtP13HomeKitEvents18XPCServerInterface_];
          uint64_t v28 = sub_10000D228(&qword_10007FDA0);
          uint64_t inited = swift_initStackObject(v28, v84);
          __int128 v71 = xmmword_100060C90;
          *(_OWORD *)(inited + 16) = xmmword_100060C90;
          uint64_t v30 = sub_10000D5E8(0LL, &qword_10007FDA8, &OBJC_CLASS___NSArray_ptr);
          *(void *)(inited + 32) = v30;
          uint64_t v31 = sub_10000D5E8(0LL, (unint64_t *)&unk_10007FDB0, &OBJC_CLASS___NSUUID_ptr);
          *(void *)(inited + 40) = v31;
          sub_1000427A4(inited, (uint64_t)"hmvutilClearEventsWithHomes:reply:", 0LL, 0);
          swift_setDeallocating(inited);
          uint64_t v32 = swift_initStackObject(v28, v83);
          *(_OWORD *)(v32 + 16) = v71;
          *(void *)(v32 + 32) = v30;
          *(void *)(v32 + 40) = v31;
          sub_1000427A4(v32, (uint64_t)"clearEventsWithHomes:reply:", 0LL, 0);
          swift_setDeallocating(v32);
          uint64_t v33 = swift_initStackObject(v28, v82);
          *(_OWORD *)(v33 + 16) = v71;
          *(void *)(v33 + 32) = v30;
          *(void *)(v33 + 40) = v31;
          sub_1000427A4(v33, (uint64_t)"hmvutilClearLocalDatabaseWithHomes:reply:", 0LL, 0);
          swift_setDeallocating(v33);
          id v70 = v27;
          [v23 setExportedInterface:v27];
          uint64_t v34 = swift_getObjectType(v24);
          uint64_t v79 = (void *)v34;
          __int128 aBlock = v24;
          *(void *)&__int128 v71 = v24;
          swift_unknownObjectRetain(v24);
          uint64_t v35 = _bridgeAnythingToObjectiveC<A>(_:)(&aBlock, v34);
          _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(&aBlock);
          [v23 setExportedObject:v35];
          swift_unknownObjectRelease(v35);
          uint64_t v36 = swift_allocObject(&unk_100076B98, 32LL, 7LL);
          *(void *)(v36 + 24) = v19;
          swift_unknownObjectWeakInit(v36 + 16, v23);
          uint64_t v80 = sub_100038670;
          uint64_t v81 = v36;
          __int128 aBlock = _NSConcreteStackBlock;
          uint64_t v77 = 1107296256LL;
          unint64_t v78 = sub_100037AD4;
          uint64_t v79 = &unk_100076BB0;
          uint64_t v37 = _Block_copy(&aBlock);
          swift_release(v81);
          [v23 setInterruptionHandler:v37];
          _Block_release(v37);
          uint64_t v38 = swift_allocObject(&unk_100076B98, 32LL, 7LL);
          *(void *)(v38 + 24) = v19;
          swift_unknownObjectWeakInit(v38 + 16, v23);
          uint64_t v80 = sub_100038690;
          uint64_t v81 = v38;
          __int128 aBlock = _NSConcreteStackBlock;
          uint64_t v77 = 1107296256LL;
          unint64_t v78 = sub_100037AD4;
          uint64_t v79 = &unk_100076BD8;
          id v39 = _Block_copy(&aBlock);
          swift_release(v81);
          [v23 setInvalidationHandler:v39];
          _Block_release(v39);
          [v23 activate];
          sub_10000E6BC();
          id v40 = v74;
          static LoggedObject.logger.getter(ObjectType);
          uint64_t v41 = swift_unknownObjectRetain_n(v23, 2LL);
          uint64_t v42 = (os_log_s *)Logger.logObject.getter(v41);
          os_log_type_t v43 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v42, v43))
          {
            uint64_t v44 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
            uint64_t v45 = (void **)swift_slowAlloc(32LL, -1LL);
            __int128 aBlock = v45;
            *(_DWORD *)uint64_t v44 = 136446210;
            id v46 = [v23 description];
            uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
            unint64_t v49 = v48;

            uint64_t v85 = sub_100046274(v47, v49, (uint64_t *)&aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, v86, v44 + 4);

            swift_bridgeObjectRelease(v49);
            _os_log_impl((void *)&_mh_execute_header, v42, v43, "Accepted new connection: %{public}s", v44, 0xCu);
            uint64_t v50 = 1LL;
            swift_arrayDestroy(v45, 1LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v45, -1LL, -1LL);
            swift_slowDealloc(v44, -1LL, -1LL);

            swift_unknownObjectRelease(v71);
            swift_release(v75);
            (*(void (**)(uint8_t *, uint64_t))(v72 + 8))(v74, v73);
          }

          else
          {

            swift_unknownObjectRelease(v71);
            swift_release(v75);
            (*(void (**)(uint8_t *, uint64_t))(v72 + 8))(v40, v73);
            return 1LL;
          }

          return v50;
        }
      }

      else
      {
        os_unfair_lock_unlock(v21);
      }

      sub_10000E6BC();
      static LoggedObject.logger.getter(ObjectType);
      uint64_t v58 = a2;
      uint64_t v59 = swift_unknownObjectRetain_n(a2, 2LL);
      uint64_t v60 = (os_log_s *)Logger.logObject.getter(v59);
      os_log_type_t v61 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v60, v61))
      {
        uint64_t v73 = v7;
        unint64_t v62 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v63 = (void **)swift_slowAlloc(32LL, -1LL);
        __int128 aBlock = v63;
        *(_DWORD *)unint64_t v62 = 136446210;
        uint64_t v74 = v62 + 4;
        id v64 = [v58 description];
        uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
        uint64_t v72 = v8;
        unint64_t v67 = v66;

        uint64_t v85 = sub_100046274(v65, v67, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, v86, v74);

        swift_bridgeObjectRelease(v67);
        _os_log_impl( (void *)&_mh_execute_header,  v60,  v61,  "Ignoring connection for a different listener: %{public}s",  v62,  0xCu);
        swift_arrayDestroy(v63, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v63, -1LL, -1LL);
        swift_slowDealloc(v62, -1LL, -1LL);

        swift_release(v75);
        (*(void (**)(char *, uint64_t))(v72 + 8))(v11, v73);
        return 0LL;
      }

      swift_release(v75);
      uint64_t v56 = *(void (**)(char *, uint64_t))(v8 + 8);
      uint64_t v57 = v11;
    }

    else
    {
      uint64_t v51 = v8;
      sub_10000E6BC();
      uint64_t v52 = static LoggedObject.logger.getter(ObjectType);
      uint64_t v53 = (os_log_s *)Logger.logObject.getter(v52);
      os_log_type_t v54 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v53, v54))
      {
        uint64_t v55 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v55 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v53,  v54,  "Ignoring connection when core data has not been set up",  v55,  2u);
        swift_slowDealloc(v55, -1LL, -1LL);
      }

      swift_release(v75);
      uint64_t v56 = *(void (**)(char *, uint64_t))(v51 + 8);
      uint64_t v57 = v16;
    }

    v56(v57, v7);
    return 0LL;
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000017LL,  0x8000000100063770LL,  "homeeventsd/XPCServer.swift",  27LL,  2LL,  88LL,  0);
  __break(1u);
  return result;
}

unint64_t sub_1000385F4()
{
  unint64_t result = qword_10007FD88;
  if (!qword_10007FD88)
  {
    uint64_t v1 = sub_10000D5E8(255LL, (unint64_t *)&qword_10007FD90, &OBJC_CLASS___NSXPCConnection_ptr);
    unint64_t result = swift_getWitnessTable(&unk_100061938, v1);
    atomic_store(result, (unint64_t *)&qword_10007FD88);
  }

  return result;
}

uint64_t sub_10003864C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100038670()
{
  return sub_10000E24C(v0);
}

uint64_t sub_100038678(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100038688(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100038690()
{
  return sub_10000E464(v0);
}

uint64_t sub_100038698(uint64_t a1)
{
  return a1;
}

double sub_1000386C4@<D0>(_OWORD *a1@<X8>)
{
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v1 valueForEntitlement:v3];

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)(v4);
    swift_unknownObjectRelease(v4);
  }

  else
  {
    double result = 0.0;
    *a1 = 0u;
    a1[1] = 0u;
  }

  return result;
}

uint64_t sub_100038740(void *a1)
{
  uint64_t v2 = a1[3];
  if (v2)
  {
    id v4 = sub_10000D408(a1, a1[3]);
    uint64_t v5 = *(void *)(v2 - 8);
    __chkstk_darwin(v4);
    uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    (*(void (**)(char *))(v5 + 16))(v7);
    uint64_t v8 = _bridgeAnythingToObjectiveC<A>(_:)(v7, v2);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v2);
    _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(a1);
  }

  else
  {
    uint64_t v8 = 0LL;
  }

  [v1 setExportedObject:v8];
  return swift_unknownObjectRelease(v8);
}

uint64_t sub_10003881C()
{
  id v1 = [(id)objc_opt_self(HMFProcessInfo) processInfoForXPCConnection:v0];
  id v2 = [v1 signingIdentifier];

  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

unint64_t sub_1000388AC(uint64_t a1)
{
  unint64_t result = sub_1000388D0();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000388D0()
{
  unint64_t result = qword_10007FDC0;
  if (!qword_10007FDC0)
  {
    unint64_t v1 = sub_100038918();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_10007FDC0);
  }

  return result;
}

unint64_t sub_100038918()
{
  unint64_t result = qword_10007FD90;
  if (!qword_10007FD90)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSXPCConnection);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10007FD90);
  }

  return result;
}

uint64_t sub_100038954(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a2;
  v4[3] = a3;
  swift_weakAssign(v4 + 4, a4);
  uint64_t v9 = *(void **)(a4 + OBJC_IVAR____TtC11homeeventsd10MainDriver_localStorageProperties);
  if (v9)
  {
    uint64_t v10 = *(void *)(a4 + OBJC_IVAR____TtC11homeeventsd10MainDriver_localStorageProperties + 8);
    swift_unknownObjectRetain(a2);
    sub_1000414A0(v9, v10);
    id v11 = v9;
    uint64_t v12 = static Constants.maxCloudKitRecordsPerOperation.getter();
    uint64_t v13 = type metadata accessor for CoreDataDatabase();
    uint64_t v14 = swift_allocObject(v13, 33LL, 7LL);
    id v15 = [v11 newBackgroundContext];

    *(void *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = v15;
    *(void *)(v14 + 24) = v12;
    *(_BYTE *)(v14 + 32) = 0;
    uint64_t v18 = v13;
    unint64_t v19 = &off_100077B60;
    swift_unknownObjectRelease(a2);
    swift_release(a4);
    *(void *)&__int128 v17 = v14;
    _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(a1);
    sub_100010044(&v17, (uint64_t)(v4 + 10));
    v4[15] = v10;

    return (uint64_t)v4;
  }

  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003ALL,  0x8000000100063A30LL,  "homeeventsd/XPCServerProxy.swift",  32LL,  2LL,  30LL,  0);
    __break(1u);
  }

  return result;
}

uint64_t sub_100038AD8()
{
  return swift_deallocClassInstance(v0, 128LL, 7LL);
}

uint64_t type metadata accessor for XPCServerProxy()
{
  return objc_opt_self(&OBJC_CLASS____TtC11homeeventsd14XPCServerProxy);
}

uint64_t sub_100038B3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_10000D228(&qword_10007EE68);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Logger(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for XPCServer();
  sub_10000D1E8( (unint64_t *)&qword_10007F128,  (uint64_t (*)(uint64_t))type metadata accessor for XPCServer,  (uint64_t)&unk_100060A78);
  static LoggedObject.logger.getter(v15);
  uint64_t v16 = swift_bridgeObjectRetain_n(a1, 2LL);
  __int128 v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v38 = v11;
    uint64_t v19 = swift_slowAlloc(12LL, -1LL);
    uint64_t v40 = a2;
    uint64_t v20 = (uint8_t *)v19;
    uint64_t v21 = swift_slowAlloc(32LL, -1LL);
    uint64_t v41 = a3;
    uint64_t v42 = a1;
    uint64_t v22 = v21;
    *(void *)&v43[0] = v21;
    uint64_t v37 = v12;
    *(_DWORD *)uint64_t v20 = 136315138;
    uint64_t v39 = v4;
    swift_bridgeObjectRetain(a1);
    uint64_t v23 = sub_10000D228(&qword_10007FFD8);
    uint64_t v24 = String.init<A>(describing:)(&v42, v23);
    unint64_t v26 = v25;
    uint64_t v42 = sub_100046274(v24, v25, (uint64_t *)v43);
    uint64_t v4 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43, v20 + 4);
    swift_bridgeObjectRelease_n(a1, 2LL);
    swift_bridgeObjectRelease(v26);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "calling clearEvents(%s", v20, 0xCu);
    swift_arrayDestroy(v22, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v27 = v22;
    a3 = v41;
    swift_slowDealloc(v27, -1LL, -1LL);
    uint64_t v28 = v20;
    a2 = v40;
    swift_slowDealloc(v28, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v37 + 8))(v14, v38);
  }

  else
  {

    swift_bridgeObjectRelease_n(a1, 2LL);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }

  uint64_t v29 = swift_allocObject(&unk_1000775B8, 32LL, 7LL);
  *(void *)(v29 + swift_unknownObjectWeakDestroy(v0 + 16) = a2;
  *(void *)(v29 + 24) = a3;
  swift_retain(a3);
  char v30 = sub_100038EB0(1, (uint64_t)sub_10004058C, v29);
  uint64_t result = swift_release(v29);
  if ((v30 & 1) != 0)
  {
    uint64_t result = swift_weakLoadStrong(v4 + 32);
    if (result)
    {
      uint64_t v32 = result;
      sub_10003FA30(result, 0);
      swift_release(v32);
      uint64_t v33 = type metadata accessor for TaskPriority(0LL);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56LL))(v10, 1LL, 1LL, v33);
      sub_10000D478(v4 + 80, (uint64_t)v43);
      uint64_t v34 = (void *)swift_allocObject(&unk_1000775E0, 96LL, 7LL);
      v34[2] = 0LL;
      v34[3] = 0LL;
      v34[4] = a1;
      sub_100010044(v43, (uint64_t)(v34 + 5));
      v34[10] = a2;
      v34[11] = a3;
      swift_bridgeObjectRetain(a1);
      swift_retain(a3);
      uint64_t v35 = sub_10005DBB4((uint64_t)v10, (uint64_t)&unk_100080018, (uint64_t)v34);
      return swift_release(v35);
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

uint64_t sub_100038EB0(char a1, uint64_t a2, uint64_t a3)
{
  void (*v28)(__int128 *__return_ptr, unint64_t, unint64_t, uint64_t, uint64_t);
  unint64_t v29;
  id v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  os_log_s *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  os_log_s *v42;
  os_log_type_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  os_log_s *v63;
  os_log_type_t v64;
  uint8_t *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  const char *v73;
  char v74;
  uint64_t v75;
  uint64_t result;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  os_log_s *v81;
  os_log_type_t v82;
  uint8_t *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  id v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  _OWORD v104[2];
  uint64_t v4 = v3;
  uint64_t v97 = a2;
  char v98 = a3;
  uint64_t v6 = sub_10000D228(&qword_10007EE68);
  __chkstk_darwin(v6);
  uint64_t v96 = (char *)&v89 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v94 = *(void *)(v8 - 8);
  id v95 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v89 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v93 = (char *)&v89 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  __chkstk_darwin(v14);
  id v90 = v16;
  uint64_t v91 = (char *)&v89 - v15;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v17 = 0xD000000000000026LL;
    }
    else {
      unint64_t v17 = 0xD000000000000028LL;
    }
    if (a1 == 1) {
      unint64_t v18 = 0x8000000100063970LL;
    }
    else {
      unint64_t v18 = 0x80000001000638B0LL;
    }
  }

  else
  {
    unint64_t v18 = 0x80000001000639A0LL;
    unint64_t v17 = 0xD000000000000025LL;
  }

  *(void *)&v104[0] = v17;
  *((void *)&v104[0] + 1) = v18;
  *(void *)&uint64_t v102 = 46LL;
  *((void *)&v102 + 1) = 0xE100000000000000LL;
  unint64_t v19 = sub_100011F34();
  uint64_t v20 = StringProtocol.components<A>(separatedBy:)( &v102,  &type metadata for String,  &type metadata for String,  v19,  v19);
  uint64_t v21 = v20;
  uint64_t v22 = *(void *)(v20 + 16);
  if (!v22)
  {
    uint64_t result = swift_bridgeObjectRelease(v20);
    __break(1u);
    return result;
  }

  uint64_t v23 = v20 + 16 * v22;
  unint64_t v24 = *(void *)(v23 + 24);
  uint64_t v92 = *(void *)(v23 + 16);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v21);
  uint64_t v25 = *(void *)(v4 + 16);
  uint64_t v26 = *(void *)(v4 + 24);
  uint64_t ObjectType = swift_getObjectType(v25);
  uint64_t v28 = *(void (**)(__int128 *__return_ptr, unint64_t, unint64_t, uint64_t, uint64_t))(v26 + 32);
  swift_unknownObjectRetain(v25);
  v28(&v102, v17, v18, ObjectType, v26);
  swift_bridgeObjectRelease(v18);
  swift_unknownObjectRelease(v25);
  if (!v103)
  {
    sub_10000D5AC((uint64_t)&v102, &qword_10007EF00);
    uint64_t v33 = type metadata accessor for XPCServer();
    sub_10000D1E8( (unint64_t *)&qword_10007F128,  (uint64_t (*)(uint64_t))type metadata accessor for XPCServer,  (uint64_t)&unk_100060A78);
    static LoggedObject.logger.getter(v33);
    swift_bridgeObjectRetain(v24);
    uint64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
    uint64_t v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v38 = swift_slowAlloc(32LL, -1LL);
      *(void *)&v104[0] = v38;
      *(_DWORD *)uint64_t v37 = 136446210;
      swift_bridgeObjectRetain(v24);
      *(void *)&uint64_t v102 = sub_100046274(v92, v24, (uint64_t *)v104);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, (char *)&v102 + 8, v37 + 4);
      swift_bridgeObjectRelease_n(v24, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v35,  v36,  "Denying %{public}s privilege because the connection has no entitlement",  v37,  0xCu);
      swift_arrayDestroy(v38, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1LL, -1LL);
      swift_slowDealloc(v37, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v24, 2LL);
    }

    (*(void (**)(char *, uint64_t))(v94 + 8))(v11, v95);
    uint64_t v55 = (uint64_t)v96;
    os_log_type_t v54 = v97;
    uint64_t v56 = sub_10003FC0C();
    uint64_t v57 = swift_allocError(&type metadata for XPCServerProxy.ConnectionError, v56, 0LL, 0LL);
    *(void *)uint64_t v58 = 0xD000000000000013LL;
    *(void *)(v58 + 8) = 0x80000001000638E0LL;
    *(_BYTE *)(v58 + swift_unknownObjectWeakDestroy(v0 + 16) = 1;
    swift_willThrow(v57);
    uint64_t v59 = v98;
    goto LABEL_39;
  }

  sub_10003FEB4(&v102, v104);
  sub_10000D2C8((uint64_t)v104, (uint64_t)&v102);
  uint64_t v29 = sub_10003FEC4();
  if (!swift_dynamicCast(&v100, &v102, (char *)&type metadata for Any + 8, v29, 6LL))
  {
    uint64_t v39 = type metadata accessor for XPCServer();
    sub_10000D1E8( (unint64_t *)&qword_10007F128,  (uint64_t (*)(uint64_t))type metadata accessor for XPCServer,  (uint64_t)&unk_100060A78);
    uint64_t v40 = v93;
    static LoggedObject.logger.getter(v39);
    sub_10000D2C8((uint64_t)v104, (uint64_t)&v102);
    swift_bridgeObjectRetain(v24);
    uint64_t v42 = (os_log_s *)Logger.logObject.getter(v41);
    os_log_type_t v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v44 = swift_slowAlloc(22LL, -1LL);
      uint64_t v45 = (void *)swift_slowAlloc(64LL, -1LL);
      uint64_t v100 = v45;
      *(_DWORD *)uint64_t v44 = 136446466;
      swift_bridgeObjectRetain(v24);
      unint64_t v99 = sub_100046274(v92, v24, (uint64_t *)&v100);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, &v100, v44 + 4);
      swift_bridgeObjectRelease_n(v24, 3LL);
      *(_WORD *)(v44 + 12) = 2080;
      id v46 = v103;
      uint64_t v47 = sub_10000D408(&v102, v103);
      __chkstk_darwin(v47);
      unint64_t v49 = (char *)&v89 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      (*(void (**)(char *))(v50 + 16))(v49);
      uint64_t v51 = String.init<A>(describing:)(v49, v46);
      uint64_t v53 = v52;
      unint64_t v99 = sub_100046274(v51, v52, (uint64_t *)&v100);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, &v100, v44 + 14);
      swift_bridgeObjectRelease(v53);
      _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(&v102);
      _os_log_impl( (void *)&_mh_execute_header,  v42,  v43,  "Denying %{public}s privilege because the entitlement wasn't a number: %s",  (uint8_t *)v44,  0x16u);
      swift_arrayDestroy(v45, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1LL, -1LL);
      swift_slowDealloc(v44, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v94 + 8))(v93, v95);
    }

    else
    {
      swift_bridgeObjectRelease_n(v24, 2LL);
      _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(&v102);

      (*(void (**)(char *, uint64_t))(v94 + 8))(v40, v95);
    }

    os_log_type_t v54 = v97;
    uint64_t v59 = v98;
    uint64_t v55 = (uint64_t)v96;
    unint64_t v67 = sub_10003FC0C();
    uint64_t v57 = swift_allocError(&type metadata for XPCServerProxy.ConnectionError, v67, 0LL, 0LL);
    *(void *)uint64_t v68 = 0xD000000000000016LL;
    *(void *)(v68 + 8) = 0x8000000100063900LL;
    *(_BYTE *)(v68 + swift_unknownObjectWeakDestroy(v0 + 16) = 1;
    swift_willThrow(v57);
    goto LABEL_38;
  }

  char v30 = v100;
  if (([v100 BOOLValue] & 1) == 0)
  {
    uint64_t v60 = type metadata accessor for XPCServer();
    sub_10000D1E8( (unint64_t *)&qword_10007F128,  (uint64_t (*)(uint64_t))type metadata accessor for XPCServer,  (uint64_t)&unk_100060A78);
    os_log_type_t v61 = v91;
    static LoggedObject.logger.getter(v60);
    swift_bridgeObjectRetain(v24);
    uint64_t v63 = (os_log_s *)Logger.logObject.getter(v62);
    id v64 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v63, v64))
    {
      uint64_t v65 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      unint64_t v66 = swift_slowAlloc(32LL, -1LL);
      *(void *)&uint64_t v102 = v66;
      *(_DWORD *)uint64_t v65 = 136446210;
      swift_bridgeObjectRetain(v24);
      uint64_t v100 = (id)sub_100046274(v92, v24, (uint64_t *)&v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, &v101, v65 + 4);
      swift_bridgeObjectRelease_n(v24, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v63,  v64,  "Denying %{public}s privilege because the entitlement was NO",  v65,  0xCu);
      swift_arrayDestroy(v66, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v66, -1LL, -1LL);
      swift_slowDealloc(v65, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v24, 2LL);
    }

    (*(void (**)(char *, uint64_t))(v94 + 8))(v61, v95);
    os_log_type_t v54 = v97;
    uint64_t v59 = v98;
    uint64_t v55 = (uint64_t)v96;
    uint64_t v69 = sub_10003FC0C();
    id v70 = swift_allocError(&type metadata for XPCServerProxy.ConnectionError, v69, 0LL, 0LL);
    uint64_t v57 = v70;
    uint64_t v72 = 0xD000000000000017LL;
    uint64_t v73 = "Wrong entitlement value";
    goto LABEL_37;
  }

  if (a1)
  {
    if (a1 != 1)
    {
      uint64_t v77 = swift_bridgeObjectRelease(0x80000001000638B0LL);
      if ((static OSVariant.isInternalBuild.getter(v77) & 1) != 0)
      {
LABEL_31:
        swift_bridgeObjectRelease(v24);

        _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v104);
        return 1LL;
      }

      goto LABEL_33;
    }

    uint64_t v31 = 0xD000000000000026LL;
    uint64_t v32 = 0x8000000100063970LL;
  }

  else
  {
    uint64_t v32 = 0x80000001000639A0LL;
    uint64_t v31 = 0xD000000000000025LL;
  }

  uint64_t v74 = _stringCompareWithSmolCheck(_:_:expecting:)(v31, v32, 0xD000000000000028LL, 0x80000001000638B0LL, 0LL);
  uint64_t v75 = swift_bridgeObjectRelease(v32);
  if ((v74 & 1) == 0 || (static OSVariant.isInternalBuild.getter(v75) & 1) != 0) {
    goto LABEL_31;
  }
LABEL_33:
  unint64_t v78 = type metadata accessor for XPCServer();
  sub_10000D1E8( (unint64_t *)&qword_10007F128,  (uint64_t (*)(uint64_t))type metadata accessor for XPCServer,  (uint64_t)&unk_100060A78);
  uint64_t v79 = v90;
  static LoggedObject.logger.getter(v78);
  swift_bridgeObjectRetain(v24);
  uint64_t v81 = (os_log_s *)Logger.logObject.getter(v80);
  uint64_t v82 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v81, v82))
  {
    unint64_t v83 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    unint64_t v84 = swift_slowAlloc(32LL, -1LL);
    *(void *)&uint64_t v102 = v84;
    *(_DWORD *)unint64_t v83 = 136446210;
    swift_bridgeObjectRetain(v24);
    uint64_t v100 = (id)sub_100046274(v92, v24, (uint64_t *)&v102);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, &v101, v83 + 4);
    swift_bridgeObjectRelease_n(v24, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v81,  v82,  "Denying %{public}s privilege because the device does not have an internal build",  v83,  0xCu);
    swift_arrayDestroy(v84, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v84, -1LL, -1LL);
    swift_slowDealloc(v83, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v24, 2LL);
  }

  (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v79, v95);
  os_log_type_t v54 = v97;
  uint64_t v59 = v98;
  uint64_t v55 = (uint64_t)v96;
  uint64_t v85 = sub_10003FC0C();
  id v70 = swift_allocError(&type metadata for XPCServerProxy.ConnectionError, v85, 0LL, 0LL);
  uint64_t v57 = v70;
  uint64_t v72 = 0xD00000000000002ALL;
  uint64_t v73 = "Entitlement restricted to internal devices";
LABEL_37:
  *(void *)__int128 v71 = v72;
  *(void *)(v71 + 8) = (unint64_t)(v73 - 32) | 0x8000000000000000LL;
  *(_BYTE *)(v71 + swift_unknownObjectWeakDestroy(v0 + 16) = 1;
  swift_willThrow(v70);

LABEL_38:
  _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v104);
LABEL_39:
  uint64_t v86 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v86 - 8) + 56LL))(v55, 1LL, 1LL, v86);
  uint64_t v87 = (void *)swift_allocObject(&unk_100076D98, 56LL, 7LL);
  v87[2] = 0LL;
  v87[3] = 0LL;
  v87[4] = v54;
  v87[5] = v59;
  v87[6] = v57;
  swift_retain(v59);
  uint64_t v88 = sub_10005DBB4(v55, (uint64_t)&unk_10007FEF8, (uint64_t)v87);
  swift_release(v88);
  return 0LL;
}

uint64_t sub_100039A04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[2] = a6;
  v7[3] = a7;
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10007F480 + dword_10007F480);
  uint64_t v10 = (void *)swift_task_alloc(unk_10007F484);
  v7[4] = v10;
  *uint64_t v10 = v7;
  v10[1] = sub_100039A74;
  return v12(a4, a5);
}

uint64_t sub_100039A74()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 32LL);
  *(void *)(*(void *)v1 + 4swift_weakInit(v4 + 4, 0LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_100039B0C;
  }
  else {
    uint64_t v3 = sub_100039AD8;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_100039AD8()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100039B0C()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void (**)(uint64_t))(v0 + 16);
  swift_errorRetain(v1);
  v2(v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100039B80(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v3 = 0LL;
  }
  id v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);
}

uint64_t sub_100039BCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4 = v3;
  uint64_t v8 = sub_10000D228(&qword_10007EE68);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Logger(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for XPCServer();
  sub_10000D1E8( (unint64_t *)&qword_10007F128,  (uint64_t (*)(uint64_t))type metadata accessor for XPCServer,  (uint64_t)&unk_100060A78);
  static LoggedObject.logger.getter(v15);
  swift_bridgeObjectRetain(a1);
  unint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    unint64_t v19 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v44 = v4;
    uint64_t v20 = a2;
    uint64_t v21 = a3;
    uint64_t v22 = v10;
    uint64_t v23 = v19;
    *(_DWORD *)unint64_t v19 = 134217984;
    *(void *)&v45[0] = *(void *)(a1 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v45, (char *)v45 + 8, v19 + 4);
    swift_bridgeObjectRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "calling createEvents(%ld events)", v23, 0xCu);
    unint64_t v24 = v23;
    uint64_t v10 = v22;
    a3 = v21;
    a2 = v20;
    id v4 = v44;
    swift_slowDealloc(v24, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease(a1);
  }

  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t v25 = swift_allocObject(&unk_100077540, 32LL, 7LL);
  *(void *)(v25 + swift_unknownObjectWeakDestroy(v0 + 16) = a2;
  *(void *)(v25 + 24) = a3;
  swift_retain(a3);
  char v26 = sub_100038EB0(1, (uint64_t)sub_100041714, v25);
  uint64_t result = swift_release(v25);
  if ((v26 & 1) != 0)
  {
    uint64_t v28 = a2;
    uint64_t result = swift_weakLoadStrong(v4 + 4);
    if (result)
    {
      uint64_t v29 = result;
      sub_10003FA30(result, 0);
      swift_release(v29);
      uint64_t v30 = v4[2];
      uint64_t v31 = v4[3];
      uint64_t ObjectType = swift_getObjectType(v30);
      uint64_t v33 = *(uint64_t (**)(uint64_t, uint64_t))(v31 + 160);
      swift_unknownObjectRetain(v30);
      uint64_t v34 = v33(ObjectType, v31);
      uint64_t v36 = v35;
      swift_unknownObjectRelease(v30);
      if (v36) {
        uint64_t v37 = v34;
      }
      else {
        uint64_t v37 = 0x436E776F6E6B6E75LL;
      }
      if (v36) {
        uint64_t v38 = v36;
      }
      else {
        uint64_t v38 = 0xED0000746E65696CLL;
      }
      type metadata accessor for EventUploadRequestLogEvent();
      sub_100041718(v37, v38, *(void *)(a1 + 16), 0);
      swift_bridgeObjectRelease(v38);
      uint64_t v39 = (uint64_t)(v4 + 5);
      uint64_t v40 = v4[15];
      uint64_t v41 = type metadata accessor for TaskPriority(0LL);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56LL))(v10, 1LL, 1LL, v41);
      sub_10000D478(v39, (uint64_t)v45);
      uint64_t v42 = (void *)swift_allocObject(&unk_100077568, 104LL, 7LL);
      _OWORD v42[2] = 0LL;
      v42[3] = 0LL;
      v42[4] = a1;
      sub_100010044(v45, (uint64_t)(v42 + 5));
      v42[10] = v40;
      v42[11] = v28;
      v42[12] = a3;
      swift_bridgeObjectRetain(a1);
      swift_retain(a3);
      swift_retain(v40);
      uint64_t v43 = sub_10005DBB4((uint64_t)v10, (uint64_t)&unk_100080008, (uint64_t)v42);
      return swift_release(v43);
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

uint64_t sub_100039F50( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[2] = a7;
  v8[3] = a8;
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char, char))((char *)&dword_100080350 + dword_100080350);
  uint64_t v12 = (void *)swift_task_alloc(unk_100080354);
  v8[4] = v12;
  *uint64_t v12 = v8;
  v12[1] = sub_100039FD4;
  return v14(a4, a5, a6, 0, 0);
}

uint64_t sub_100039FD4()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 32LL);
  *(void *)(*(void *)v1 + 4swift_weakInit(v4 + 4, 0LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_10004167C;
  }
  else {
    uint64_t v3 = sub_100041680;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_10003A0CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v73 = a5;
  uint64_t v74 = a4;
  unint64_t v66 = (char *)a1;
  uint64_t v67 = a2;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v68 = v8;
  uint64_t v9 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v69 = *(void *)(v10 - 8);
  uint64_t v70 = v10;
  __chkstk_darwin(v10);
  uint64_t v65 = v11;
  __int128 v71 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_10000D228(&qword_10007EE68);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for Logger(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  os_log_type_t v18 = (char *)&v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for XPCServer();
  sub_10000D1E8( (unint64_t *)&qword_10007F128,  (uint64_t (*)(uint64_t))type metadata accessor for XPCServer,  (uint64_t)&unk_100060A78);
  uint64_t v20 = static LoggedObject.logger.getter(v19);
  uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
  os_log_type_t v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v64 = v6;
    unint64_t v24 = v9;
    uint64_t v25 = v14;
    char v26 = v23;
    *(_DWORD *)uint64_t v23 = 134217984;
    uint64_t v75 = a3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v23 + 4);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "calling createFakeEvents(%ld events)", v26, 0xCu);
    uint64_t v27 = v26;
    uint64_t v14 = v25;
    uint64_t v9 = v24;
    uint64_t v6 = v64;
    swift_slowDealloc(v27, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  uint64_t v28 = swift_allocObject(&unk_1000774C8, 32LL, 7LL);
  *(void *)(v28 + swift_unknownObjectWeakDestroy(v0 + 16) = v74;
  uint64_t v29 = v73;
  *(void *)(v28 + 24) = v73;
  swift_retain(v29);
  uint64_t v30 = v72;
  char v31 = sub_100038EB0(1, (uint64_t)sub_100041714, v28);
  uint64_t result = swift_release(v28);
  if ((v31 & 1) != 0)
  {
    uint64_t v33 = a3;
    uint64_t result = swift_weakLoadStrong(v30 + 4);
    if (result)
    {
      uint64_t v34 = result;
      sub_10003FA30(result, 1);
      swift_release(v34);
      uint64_t v35 = v30[2];
      uint64_t v36 = v30[3];
      uint64_t ObjectType = swift_getObjectType(v35);
      uint64_t v38 = *(uint64_t (**)(uint64_t, uint64_t))(v36 + 160);
      swift_unknownObjectRetain(v35);
      uint64_t v39 = v38(ObjectType, v36);
      uint64_t v41 = v40;
      swift_unknownObjectRelease(v35);
      if (v41) {
        uint64_t v42 = v39;
      }
      else {
        uint64_t v42 = 0x436E776F6E6B6E75LL;
      }
      if (v41) {
        uint64_t v43 = v41;
      }
      else {
        uint64_t v43 = 0xED0000746E65696CLL;
      }
      type metadata accessor for EventUploadRequestLogEvent();
      uint64_t v63 = v33;
      sub_100041718(v42, v43, v33, 1);
      swift_bridgeObjectRelease(v43);
      uint64_t v72 = (void *)v30[15];
      uint64_t v44 = type metadata accessor for TaskPriority(0LL);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56LL))(v14, 1LL, 1LL, v44);
      uint64_t v45 = v69;
      id v46 = *(void (**)(char *, uint64_t, uint64_t))(v69 + 16);
      uint64_t v47 = (uint64_t)v66;
      unint64_t v66 = v14;
      uint64_t v48 = v70;
      v46(v71, v47, v70);
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v67, v6);
      uint64_t v49 = *(unsigned __int8 *)(v45 + 80);
      uint64_t v50 = (v49 + 32) & ~v49;
      uint64_t v51 = *(unsigned __int8 *)(v7 + 80);
      uint64_t v67 = v7;
      uint64_t v52 = (v65 + v51 + v50) & ~v51;
      unint64_t v53 = (v68 + v52 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      unint64_t v54 = (v53 + 15) & 0xFFFFFFFFFFFFFFF8LL;
      unint64_t v55 = (v54 + 15) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v56 = v6;
      uint64_t v57 = swift_allocObject(&unk_1000774F0, v55 + 16, v49 | v51 | 7);
      *(void *)(v57 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
      *(void *)(v57 + 24) = 0LL;
      (*(void (**)(uint64_t, char *, uint64_t))(v45 + 32))(v57 + v50, v71, v48);
      (*(void (**)(uint64_t, char *, uint64_t))(v67 + 32))(v57 + v52, v9, v56);
      *(void *)(v57 + v53) = v63;
      uint64_t v59 = v72;
      uint64_t v58 = v73;
      *(void *)(v57 + v54) = v72;
      uint64_t v60 = (void *)(v57 + v55);
      *uint64_t v60 = v74;
      v60[1] = v58;
      swift_retain(v58);
      swift_retain(v59);
      uint64_t v61 = sub_10005DBB4((uint64_t)v66, (uint64_t)&unk_10007FFF8, v57);
      return swift_release(v61);
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

uint64_t sub_10003A544( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[2] = a8;
  v8[3] = v16;
  uint64_t v15 = (char *)&dword_10007F828 + dword_10007F828;
  uint64_t v13 = (void *)swift_task_alloc(unk_10007F82C);
  v8[4] = v13;
  *uint64_t v13 = v8;
  v13[1] = sub_100039FD4;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void))v15)(a4, a5, a6, a7, 0LL, 0LL);
}

uint64_t sub_10003A730(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_10000D228(&qword_10007EE68);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = swift_weakLoadStrong(v2 + 32);
  if (result)
  {
    uint64_t v9 = result;
    sub_10003FA30(result, 0);
    swift_release(v9);
    uint64_t result = swift_weakLoadStrong(v2 + 32);
    if (result)
    {
      uint64_t v10 = result;
      uint64_t v11 = swift_allocObject(&unk_100076F00, 32LL, 7LL);
      *(void *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
      *(void *)(v11 + 24) = a2;
      uint64_t v12 = *sub_10000D408((void *)(v2 + 80), *(void *)(v2 + 104));
      v17[3] = type metadata accessor for CoreDataDatabase();
      v17[4] = &off_100077B60;
      v17[0] = v12;
      uint64_t v13 = type metadata accessor for TaskPriority(0LL);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v7, 1LL, 1LL, v13);
      sub_10000D478((uint64_t)v17, (uint64_t)v16);
      uint64_t v14 = (void *)swift_allocObject(&unk_100076F28, 96LL, 7LL);
      v14[2] = 0LL;
      v14[3] = 0LL;
      v14[4] = v10;
      v14[5] = sub_10004058C;
      v14[6] = v11;
      sub_100010044(v16, (uint64_t)(v14 + 7));
      swift_retain(a2);
      swift_retain(v12);
      swift_retain(v10);
      swift_retain(v11);
      uint64_t v15 = sub_10005DBB4((uint64_t)v7, (uint64_t)&unk_10007FF20, (uint64_t)v14);
      swift_release(v15);
      _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v17);
      swift_release(v10);
      return swift_release(v11);
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_10003A970(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = sub_10000D228(&qword_10007EE68);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Logger(0LL);
  uint64_t v38 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for XPCServer();
  sub_10000D1E8( (unint64_t *)&qword_10007F128,  (uint64_t (*)(uint64_t))type metadata accessor for XPCServer,  (uint64_t)&unk_100060A78);
  static LoggedObject.logger.getter(v16);
  uint64_t v17 = swift_bridgeObjectRetain_n(a2, 2LL);
  os_log_type_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v35 = v12;
    uint64_t v20 = swift_slowAlloc(12LL, -1LL);
    uint64_t v36 = a3;
    uint64_t v21 = (uint8_t *)v20;
    uint64_t v22 = swift_slowAlloc(32LL, -1LL);
    uint64_t v37 = a4;
    uint64_t v23 = v22;
    uint64_t v40 = v22;
    uint64_t v34 = v13;
    *(_DWORD *)uint64_t v21 = 136315138;
    swift_bridgeObjectRetain(a2);
    uint64_t v39 = sub_100046274(a1, a2, &v40);
    uint64_t v12 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v21 + 4);
    swift_bridgeObjectRelease_n(a2, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "calling hmvutil echo(%s)", v21, 0xCu);
    swift_arrayDestroy(v23, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v24 = v23;
    a4 = v37;
    swift_slowDealloc(v24, -1LL, -1LL);
    uint64_t v25 = v21;
    a3 = v36;
    swift_slowDealloc(v25, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v38 + 8))(v15, v34);
  }

  else
  {

    swift_bridgeObjectRelease_n(a2, 2LL);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v15, v13);
  }

  uint64_t v26 = swift_allocObject(&unk_100077400, 32LL, 7LL);
  *(void *)(v26 + swift_unknownObjectWeakDestroy(v0 + 16) = a3;
  *(void *)(v26 + 24) = a4;
  swift_retain(a4);
  char v27 = sub_100038EB0(2, (uint64_t)sub_100040FF0, v26);
  uint64_t result = swift_release(v26);
  if ((v27 & 1) != 0)
  {
    uint64_t result = swift_weakLoadStrong(v5 + 32);
    if (result)
    {
      uint64_t v29 = result;
      sub_10003FA30(result, 0);
      swift_release(v29);
      uint64_t v30 = type metadata accessor for TaskPriority(0LL);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56LL))(v12, 1LL, 1LL, v30);
      char v31 = (void *)swift_allocObject(&unk_100077428, 64LL, 7LL);
      v31[2] = 0LL;
      v31[3] = 0LL;
      v31[4] = a3;
      v31[5] = a4;
      v31[6] = a1;
      v31[7] = a2;
      swift_bridgeObjectRetain(a2);
      swift_retain(a4);
      uint64_t v32 = sub_10005DBB4((uint64_t)v12, (uint64_t)&unk_10007FFE8, (uint64_t)v31);
      return swift_release(v32);
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

uint64_t sub_10003ACC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  return swift_task_switch(sub_10003ACDC, 0LL, 0LL);
}

uint64_t sub_10003ACDC()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10003AD30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2)
  {
    NSString v6 = 0LL;
    if (a3) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v7 = 0LL;
    goto LABEL_6;
  }

  NSString v6 = String._bridgeToObjectiveC()();
  if (!a3) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v7 = _convertErrorToNSError(_:)(a3);
LABEL_6:
  id v8 = (id)v7;
  (*(void (**)(uint64_t, NSString))(a4 + 16))(a4, v6);
}

uint64_t sub_10003ADA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_10000D228(&qword_10007EE68);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Logger(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for XPCServer();
  sub_10000D1E8( (unint64_t *)&qword_10007F128,  (uint64_t (*)(uint64_t))type metadata accessor for XPCServer,  (uint64_t)&unk_100060A78);
  static LoggedObject.logger.getter(v15);
  uint64_t v16 = swift_bridgeObjectRetain_n(a1, 2LL);
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v38 = v11;
    uint64_t v19 = swift_slowAlloc(12LL, -1LL);
    uint64_t v40 = a2;
    uint64_t v20 = (uint8_t *)v19;
    uint64_t v21 = swift_slowAlloc(32LL, -1LL);
    uint64_t v41 = a3;
    uint64_t v42 = a1;
    uint64_t v22 = v21;
    *(void *)&v43[0] = v21;
    uint64_t v37 = v12;
    *(_DWORD *)uint64_t v20 = 136315138;
    uint64_t v39 = v4;
    swift_bridgeObjectRetain(a1);
    uint64_t v23 = sub_10000D228(&qword_10007FFD8);
    uint64_t v24 = String.init<A>(describing:)(&v42, v23);
    unint64_t v26 = v25;
    uint64_t v42 = sub_100046274(v24, v25, (uint64_t *)v43);
    uint64_t v4 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43, v20 + 4);
    swift_bridgeObjectRelease_n(a1, 2LL);
    swift_bridgeObjectRelease(v26);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "calling hmvutil clearEvents(%s", v20, 0xCu);
    swift_arrayDestroy(v22, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v27 = v22;
    a3 = v41;
    swift_slowDealloc(v27, -1LL, -1LL);
    uint64_t v28 = v20;
    a2 = v40;
    swift_slowDealloc(v28, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v37 + 8))(v14, v38);
  }

  else
  {

    swift_bridgeObjectRelease_n(a1, 2LL);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }

  uint64_t v29 = swift_allocObject(&unk_100077388, 32LL, 7LL);
  *(void *)(v29 + swift_unknownObjectWeakDestroy(v0 + 16) = a2;
  *(void *)(v29 + 24) = a3;
  swift_retain(a3);
  char v30 = sub_100038EB0(2, (uint64_t)sub_100041714, v29);
  uint64_t result = swift_release(v29);
  if ((v30 & 1) != 0)
  {
    uint64_t result = swift_weakLoadStrong(v4 + 32);
    if (result)
    {
      uint64_t v32 = result;
      sub_10003FA30(result, 0);
      swift_release(v32);
      uint64_t v33 = type metadata accessor for TaskPriority(0LL);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56LL))(v10, 1LL, 1LL, v33);
      sub_10000D478(v4 + 80, (uint64_t)v43);
      uint64_t v34 = (void *)swift_allocObject(&unk_1000773B0, 96LL, 7LL);
      v34[2] = 0LL;
      v34[3] = 0LL;
      v34[4] = a1;
      sub_100010044(v43, (uint64_t)(v34 + 5));
      v34[10] = a2;
      v34[11] = a3;
      swift_bridgeObjectRetain(a1);
      swift_retain(a3);
      uint64_t v35 = sub_10005DBB4((uint64_t)v10, (uint64_t)&unk_10007FFD0, (uint64_t)v34);
      return swift_release(v35);
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

uint64_t sub_10003B11C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[2] = a6;
  v7[3] = a7;
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10007F480 + dword_10007F480);
  uint64_t v10 = (void *)swift_task_alloc(unk_10007F484);
  v7[4] = v10;
  *uint64_t v10 = v7;
  v10[1] = sub_100039FD4;
  return v12(a4, a5);
}

uint64_t sub_10003B1A8( uint64_t a1, int a2, uint64_t a3, void *aBlock, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v12 = _Block_copy(aBlock);
  if (a3)
  {
    uint64_t v13 = type metadata accessor for UUID(0LL);
    a3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a3, v13);
  }

  uint64_t v14 = swift_allocObject(a5, 24LL, 7LL);
  *(void *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = v12;
  swift_retain(a1);
  a7(a3, a6, v14);
  swift_release(a1);
  swift_release(v14);
  return swift_bridgeObjectRelease(a3);
}

uint64_t sub_10003B250(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_10000D228(&qword_10007EE68);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Logger(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for XPCServer();
  sub_10000D1E8( (unint64_t *)&qword_10007F128,  (uint64_t (*)(uint64_t))type metadata accessor for XPCServer,  (uint64_t)&unk_100060A78);
  uint64_t v16 = static LoggedObject.logger.getter(v15);
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    uint64_t v33 = a3;
    uint64_t v20 = v4;
    uint64_t v21 = v10;
    uint64_t v22 = a2;
    uint64_t v23 = a1;
    uint64_t v24 = v19;
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "calling hmvutil clearLocalDatabase()", v19, 2u);
    unint64_t v25 = v24;
    a1 = v23;
    a2 = v22;
    uint64_t v10 = v21;
    uint64_t v4 = v20;
    a3 = v33;
    swift_slowDealloc(v25, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t v26 = swift_allocObject(&unk_100077310, 32LL, 7LL);
  *(void *)(v26 + swift_unknownObjectWeakDestroy(v0 + 16) = a2;
  *(void *)(v26 + 24) = a3;
  swift_retain(a3);
  char v27 = sub_100038EB0(2, (uint64_t)sub_100041714, v26);
  uint64_t result = swift_release(v26);
  if ((v27 & 1) != 0)
  {
    uint64_t result = swift_weakLoadStrong(v4 + 32);
    if (result)
    {
      uint64_t v29 = result;
      sub_10003FA30(result, 0);
      swift_release(v29);
      uint64_t v30 = type metadata accessor for TaskPriority(0LL);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56LL))(v10, 1LL, 1LL, v30);
      sub_10000D478(v4 + 80, (uint64_t)v34);
      char v31 = (void *)swift_allocObject(&unk_100077338, 96LL, 7LL);
      v31[2] = 0LL;
      v31[3] = 0LL;
      sub_100010044(v34, (uint64_t)(v31 + 4));
      v31[9] = a1;
      v31[10] = a2;
      v31[11] = a3;
      swift_bridgeObjectRetain(a1);
      swift_retain(a3);
      uint64_t v32 = sub_10005DBB4((uint64_t)v10, (uint64_t)&unk_10007FFC0, (uint64_t)v31);
      return swift_release(v32);
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

uint64_t sub_10003B4EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[2] = a6;
  v7[3] = a7;
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10007F920 + dword_10007F920);
  uint64_t v10 = (void *)swift_task_alloc(unk_10007F924);
  v7[4] = v10;
  *uint64_t v10 = v7;
  v10[1] = sub_100039FD4;
  return v12(a4, a5);
}

uint64_t sub_10003B578(uint64_t a1, int a2, int a3, int a4, void (*a5)(void), uint64_t a6)
{
  int v55 = a2;
  int v56 = a3;
  uint64_t v10 = sub_10000D228(&qword_10007EE68);
  __chkstk_darwin(v10);
  uint64_t v12 = &v51[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v57 = type metadata accessor for Logger(0LL);
  uint64_t v13 = *(void *)(v57 - 8);
  uint64_t v14 = __chkstk_darwin(v57);
  unint64_t v54 = &v51[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v14);
  uint64_t v17 = &v51[-v16];
  uint64_t v18 = type metadata accessor for XPCServer();
  uint64_t v53 = sub_10000D1E8( (unint64_t *)&qword_10007F128,  (uint64_t (*)(uint64_t))type metadata accessor for XPCServer,  (uint64_t)&unk_100060A78);
  static LoggedObject.logger.getter(v18);
  swift_bridgeObjectRetain(a1);
  uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  BOOL v22 = os_log_type_enabled(v20, v21);
  int v52 = a4;
  if (v22)
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v23 = 134217984;
    *(void *)&v59[0] = *(void *)(a1 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v59, (char *)v59 + 8, v23 + 4);
    swift_bridgeObjectRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "calling hmvutil createEvents(%ld events)", v23, 0xCu);
    swift_slowDealloc(v23, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease(a1);
  }

  uint64_t v24 = *(void (**)(_BYTE *, uint64_t))(v13 + 8);
  uint64_t v25 = v57;
  v24(v17, v57);
  uint64_t v26 = swift_allocObject(&unk_100077298, 32LL, 7LL);
  *(void *)(v26 + swift_unknownObjectWeakDestroy(v0 + 16) = a5;
  *(void *)(v26 + 24) = a6;
  swift_retain(a6);
  char v27 = v58;
  char v28 = sub_100038EB0(2, (uint64_t)sub_100041714, v26);
  uint64_t result = swift_release(v26);
  if ((v28 & 1) != 0)
  {
    if ((v55 & 1) != 0 && (v56 & 1) != 0)
    {
      uint64_t v30 = v54;
      uint64_t v31 = static LoggedObject.logger.getter(v18);
      uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
      os_log_type_t v33 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v32, v33))
      {
        uint64_t v34 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v34 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v32,  v33,  "Incompatible argument flags uploadOnly and saveOnly cannot be reconciled, declining to create events",  v34,  2u);
        swift_slowDealloc(v34, -1LL, -1LL);
      }

      v24(v30, v25);
      unint64_t v35 = sub_10003FC0C();
      uint64_t v36 = swift_allocError(&type metadata for XPCServerProxy.ConnectionError, v35, 0LL, 0LL);
      *(void *)uint64_t v37 = 0xD00000000000002ELL;
      *(void *)(v37 + 8) = 0x80000001000639D0LL;
      *(_BYTE *)(v37 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
      a5();
      return swift_errorRelease(v36);
    }

    else
    {
      uint64_t result = swift_weakLoadStrong(v27 + 4);
      if (result)
      {
        uint64_t v38 = result;
        sub_10003FA30(result, 0);
        swift_release(v38);
        uint64_t v40 = v27[2];
        uint64_t v39 = v27[3];
        uint64_t v41 = v27;
        uint64_t ObjectType = swift_getObjectType(v40);
        uint64_t v43 = *(uint64_t (**)(uint64_t, uint64_t))(v39 + 160);
        swift_unknownObjectRetain(v40);
        uint64_t v44 = v43(ObjectType, v39);
        uint64_t v46 = v45;
        swift_unknownObjectRelease(v40);
        if (!v46)
        {
          uint64_t v44 = 0x436E776F6E6B6E75LL;
          uint64_t v46 = 0xED0000746E65696CLL;
        }

        type metadata accessor for EventUploadRequestLogEvent();
        sub_100041718(v44, v46, *(void *)(a1 + 16), 0);
        swift_bridgeObjectRelease(v46);
        uint64_t v47 = v27[15];
        uint64_t v48 = type metadata accessor for TaskPriority(0LL);
        (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56LL))(v12, 1LL, 1LL, v48);
        sub_10000D478((uint64_t)(v41 + 5), (uint64_t)v59);
        uint64_t v49 = swift_allocObject(&unk_1000772C0, 112LL, 7LL);
        *(void *)(v49 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
        *(void *)(v49 + 24) = 0LL;
        *(void *)(v49 + 32) = a1;
        sub_100010044(v59, v49 + 40);
        *(void *)(v49 + 80) = v47;
        *(_BYTE *)(v49 + 88) = v55 & 1;
        *(_BYTE *)(v49 + 89) = v56 & 1;
        *(_BYTE *)(v49 + 90) = v52 & 1;
        *(void *)(v49 + 96) = a5;
        *(void *)(v49 + 104) = a6;
        swift_bridgeObjectRetain(a1);
        swift_retain(a6);
        swift_retain(v47);
        uint64_t v50 = sub_10005DBB4((uint64_t)v12, (uint64_t)&unk_10007FFB0, v49);
        return swift_release(v50);
      }

      else
      {
        __break(1u);
      }
    }
  }

  return result;
}

uint64_t sub_10003BA28( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[2] = v18;
  v8[3] = v19;
  uint64_t v16 = (char *)&dword_100080760 + dword_100080760;
  uint64_t v14 = (void *)swift_task_alloc(unk_100080764);
  v8[4] = v14;
  *uint64_t v14 = v8;
  v14[1] = sub_100039FD4;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))v16)(a4, a5, a6, a7, a8, v17);
}

uint64_t sub_10003BB8C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, uint64_t a7, uint64_t a8)
{
  int v68 = a5;
  int v69 = a6;
  int v67 = a4;
  uint64_t v61 = a1;
  uint64_t v62 = a2;
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v66 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v63 = v12;
  uint64_t v72 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Date(0LL);
  uint64_t v64 = *(void *)(v13 - 8);
  uint64_t v65 = v13;
  __chkstk_darwin(v13);
  uint64_t v60 = v14;
  uint64_t v70 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_10000D228(&qword_10007EE68);
  __chkstk_darwin(v15);
  uint64_t v71 = (uint64_t)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for Logger(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v58 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for XPCServer();
  sub_10000D1E8( (unint64_t *)&qword_10007F128,  (uint64_t (*)(uint64_t))type metadata accessor for XPCServer,  (uint64_t)&unk_100060A78);
  uint64_t v22 = static LoggedObject.logger.getter(v21);
  uint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
  os_log_type_t v24 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v25 = 134217984;
    uint64_t v74 = a3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v25 + 4);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "calling createFakeEvents(%ld events)", v25, 0xCu);
    swift_slowDealloc(v25, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  uint64_t v26 = swift_allocObject(&unk_100077220, 32LL, 7LL);
  *(void *)(v26 + swift_unknownObjectWeakDestroy(v0 + 16) = a7;
  *(void *)(v26 + 24) = a8;
  swift_retain(a8);
  char v27 = v73;
  char v28 = sub_100038EB0(2, (uint64_t)sub_100041714, v26);
  uint64_t result = swift_release(v26);
  if ((v28 & 1) != 0)
  {
    uint64_t v58 = a7;
    uint64_t v59 = a8;
    uint64_t result = swift_weakLoadStrong(v27 + 4);
    if (result)
    {
      uint64_t v30 = result;
      sub_10003FA30(result, 1);
      swift_release(v30);
      uint64_t v31 = v27[2];
      uint64_t v32 = v27[3];
      uint64_t ObjectType = swift_getObjectType(v31);
      uint64_t v34 = *(uint64_t (**)(uint64_t, uint64_t))(v32 + 160);
      swift_unknownObjectRetain(v31);
      uint64_t v35 = v34(ObjectType, v32);
      uint64_t v37 = v36;
      swift_unknownObjectRelease(v31);
      if (v37) {
        uint64_t v38 = v35;
      }
      else {
        uint64_t v38 = 0x436E776F6E6B6E75LL;
      }
      if (v37) {
        uint64_t v39 = v37;
      }
      else {
        uint64_t v39 = 0xED0000746E65696CLL;
      }
      type metadata accessor for EventUploadRequestLogEvent();
      sub_100041718(v38, v39, a3, 1);
      swift_bridgeObjectRelease(v39);
      uint64_t v73 = (void *)v27[15];
      uint64_t v40 = type metadata accessor for TaskPriority(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56LL))(v71, 1LL, 1LL, v40);
      uint64_t v41 = v64;
      uint64_t v42 = v65;
      (*(void (**)(char *, uint64_t, uint64_t))(v64 + 16))(v70, v61, v65);
      uint64_t v43 = v66;
      (*(void (**)(char *, uint64_t, uint64_t))(v66 + 16))(v72, v62, v11);
      uint64_t v44 = *(unsigned __int8 *)(v41 + 80);
      uint64_t v45 = (v44 + 32) & ~v44;
      uint64_t v46 = *(unsigned __int8 *)(v43 + 80);
      uint64_t v47 = (v60 + v46 + v45) & ~v46;
      unint64_t v48 = (v63 + v47 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      unint64_t v49 = (v48 + 15) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v63 = v11;
      unint64_t v50 = (v49 + 18) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v51 = a3;
      uint64_t v52 = swift_allocObject(&unk_100077248, v50 + 16, v44 | v46 | 7);
      *(void *)(v52 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
      *(void *)(v52 + 24) = 0LL;
      (*(void (**)(uint64_t, char *, uint64_t))(v41 + 32))(v52 + v45, v70, v42);
      (*(void (**)(uint64_t, char *, uint64_t))(v43 + 32))(v52 + v47, v72, v63);
      *(void *)(v52 + v48) = v51;
      unint64_t v53 = v52 + v49;
      unint64_t v54 = v73;
      *(void *)unint64_t v53 = v73;
      *(_BYTE *)(v53 + 8) = v67 & 1;
      *(_BYTE *)(v53 + 9) = v68 & 1;
      *(_BYTE *)(v53 + _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 10) = v69 & 1;
      int v55 = (void *)(v52 + v50);
      uint64_t v56 = v59;
      *int v55 = v58;
      v55[1] = v56;
      swift_retain(v56);
      swift_retain(v54);
      uint64_t v57 = sub_10005DBB4(v71, (uint64_t)&unk_10007FFA0, v52);
      return swift_release(v57);
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

uint64_t sub_10003C018( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  *(void *)(v8 + 48) = v17;
  *(void *)(v8 + sub_1000154A8(*(void *)(v0 + 152) + OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_database, v0 + 56) = v18;
  *(_BYTE *)(v8 + 89) = v15;
  *(_BYTE *)(v8 + 88) = a8;
  *(void *)(v8 + 32) = a6;
  *(void *)(v8 + 40) = a7;
  *(void *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = a4;
  *(void *)(v8 + 24) = a5;
  if ((v16 & 1) != 0)
  {
    uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char, char))((char *)&dword_10007F828
                                                                                 + dword_10007F828);
    uint64_t v9 = (void *)swift_task_alloc(unk_10007F82C);
    *(void *)(v8 + 72) = v9;
    void *v9 = v8;
    v9[1] = sub_10003C1AC;
    return v13( *(void *)(v8 + 16),  *(void *)(v8 + 24),  *(void *)(v8 + 32),  *(void *)(v8 + 40),  *(_BYTE *)(v8 + 88),  *(_BYTE *)(v8 + 89));
  }

  else
  {
    uint64_t v14 = (uint64_t (*)(uint64_t))((char *)&dword_10007F848 + dword_10007F848);
    uint64_t v12 = (void *)swift_task_alloc(unk_10007F84C);
    *(void *)(v8 + 64) = v12;
    *uint64_t v12 = v8;
    v12[1] = sub_10003C0F4;
    return v14(a5);
  }

uint64_t sub_10003C0F4()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 64);
  uint64_t v4 = *v1;
  swift_task_dealloc(v3);
  if (v0)
  {
    *(void *)(v2 + 80) = v0;
    return swift_task_switch(sub_10003C244, 0LL, 0LL);
  }

  else
  {
    uint64_t v7 = (char *)&dword_10007F828 + dword_10007F828;
    NSString v6 = (void *)swift_task_alloc(unk_10007F82C);
    *(void *)(v2 + 72) = v6;
    *NSString v6 = v4;
    v6[1] = sub_10003C1AC;
    return ((uint64_t (*)(void, void, void, void, void, void))v7)( *(void *)(v2 + 16),  *(void *)(v2 + 24),  *(void *)(v2 + 32),  *(void *)(v2 + 40),  *(unsigned __int8 *)(v2 + 88),  *(unsigned __int8 *)(v2 + 89));
  }

uint64_t sub_10003C1AC()
{
  uint64_t v2 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 72));
  if (v0)
  {
    *(void *)(v2 + 80) = v0;
    uint64_t v3 = sub_10003C244;
  }

  else
  {
    uint64_t v3 = sub_10003C210;
  }

  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_10003C210()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003C244()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void (**)(uint64_t))(v0 + 48);
  swift_errorRetain(v1);
  v2(v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003C404(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_10000D228(&qword_10007EE68);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Logger(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for XPCServer();
  sub_10000D1E8( (unint64_t *)&qword_10007F128,  (uint64_t (*)(uint64_t))type metadata accessor for XPCServer,  (uint64_t)&unk_100060A78);
  uint64_t v14 = static LoggedObject.logger.getter(v13);
  char v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "calling hmvutil dumpLocalDatabase()", v17, 2u);
    swift_slowDealloc(v17, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  uint64_t v18 = swift_allocObject(&unk_1000771A8, 32LL, 7LL);
  *(void *)(v18 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  *(void *)(v18 + 24) = a2;
  swift_retain(a2);
  char v19 = sub_100038EB0(2, (uint64_t)sub_1000409C0, v18);
  uint64_t result = swift_release(v18);
  if ((v19 & 1) != 0)
  {
    uint64_t result = swift_weakLoadStrong(v3 + 32);
    if (result)
    {
      uint64_t v21 = result;
      sub_10003FA30(result, 0);
      swift_release(v21);
      uint64_t v22 = type metadata accessor for TaskPriority(0LL);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56LL))(v8, 1LL, 1LL, v22);
      sub_10000D478(v3 + 80, (uint64_t)v26);
      uint64_t v23 = (void *)swift_allocObject(&unk_1000771D0, 88LL, 7LL);
      v23[2] = 0LL;
      void v23[3] = 0LL;
      sub_100010044(v26, (uint64_t)(v23 + 4));
      v23[9] = a1;
      v23[10] = a2;
      swift_retain(a2);
      uint64_t v24 = sub_10005DBB4((uint64_t)v8, (uint64_t)&unk_10007FF80, (uint64_t)v23);
      return swift_release(v24);
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

uint64_t sub_10003C668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  return swift_task_switch(sub_10003C684, 0LL, 0LL);
}

uint64_t sub_10003C684()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_100080604);
  *(void *)(v0 + 40) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10003C6DC;
  return sub_10005507C(0x7FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10003C6DC(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 40);
  *(void *)(*v2 + 48) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = sub_10003C7CC;
  }

  else
  {
    *(void *)(v4 + sub_1000154A8(*(void *)(v0 + 152) + OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_database, v0 + 56) = a1;
    uint64_t v6 = sub_10003C750;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_10003C750()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void (**)(uint64_t, void))(v0 + 24);
  uint64_t v3 = sub_1000400E4(v1);
  swift_bridgeObjectRelease(v1);
  uint64_t v4 = sub_10003F6C0(v3);
  swift_bridgeObjectRelease(v3);
  v2(v4, 0LL);
  swift_release(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003C7CC()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void (**)(void, uint64_t))(v0 + 24);
  swift_errorRetain(v1);
  v2(0LL, v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10003C898(objc_class *a1, uint64_t a2, uint64_t a3)
{
  Class isa = a1;
  if (a1)
  {
    type metadata accessor for UUID(0LL);
    sub_10000D228(&qword_10007FF90);
    sub_10000D1E8( &qword_10007F4A0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }

  if (a2) {
    uint64_t v6 = _convertErrorToNSError(_:)(a2);
  }
  else {
    uint64_t v6 = 0LL;
  }
  id v7 = (id)v6;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, isa);
}

uint64_t sub_10003C960(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_10000D228(&qword_10007EE68);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Logger(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for XPCServer();
  sub_10000D1E8( (unint64_t *)&qword_10007F128,  (uint64_t (*)(uint64_t))type metadata accessor for XPCServer,  (uint64_t)&unk_100060A78);
  uint64_t v16 = static LoggedObject.logger.getter(v15);
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    char v19 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    uint64_t v34 = a3;
    uint64_t v20 = v4;
    uint64_t v21 = v10;
    uint64_t v22 = a2;
    uint64_t v23 = a1;
    uint64_t v24 = v19;
    *(_WORD *)char v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "calling hmvutil uploadEvents()", v19, 2u);
    uint64_t v25 = v24;
    a1 = v23;
    a2 = v22;
    uint64_t v10 = v21;
    uint64_t v4 = v20;
    a3 = v34;
    swift_slowDealloc(v25, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t v26 = swift_allocObject(&unk_100077130, 32LL, 7LL);
  *(void *)(v26 + swift_unknownObjectWeakDestroy(v0 + 16) = a2;
  *(void *)(v26 + 24) = a3;
  swift_retain(a3);
  char v27 = sub_100038EB0(2, (uint64_t)sub_100041714, v26);
  uint64_t result = swift_release(v26);
  if ((v27 & 1) != 0)
  {
    uint64_t result = swift_weakLoadStrong(v4 + 32);
    if (result)
    {
      uint64_t v29 = result;
      sub_10003FA30(result, 0);
      swift_release(v29);
      uint64_t v30 = type metadata accessor for TaskPriority(0LL);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56LL))(v10, 1LL, 1LL, v30);
      sub_10000D478(v4 + 80, (uint64_t)v35);
      uint64_t v31 = (void *)swift_allocObject(&unk_100077158, 96LL, 7LL);
      v31[2] = 0LL;
      v31[3] = 0LL;
      sub_100010044(v35, (uint64_t)(v31 + 4));
      v31[9] = a1;
      v31[10] = a2;
      v31[11] = a3;
      id v32 = a1;
      swift_retain(a3);
      uint64_t v33 = sub_10005DBB4((uint64_t)v10, (uint64_t)&unk_10007FF70, (uint64_t)v31);
      return swift_release(v33);
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

uint64_t sub_10003CBF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  return swift_task_switch(sub_10003CC14, 0LL, 0LL);
}

uint64_t sub_10003CC14()
{
  uint64_t v1 = *(void *)(v0 + 24);
  if (v1) {
    id v2 = [*(id *)(v0 + 24) integerValue];
  }
  else {
    id v2 = 0LL;
  }
  uint64_t v5 = (char *)&dword_10007F130 + dword_10007F130;
  uint64_t v3 = (void *)swift_task_alloc(unk_10007F134);
  *(void *)(v0 + 48) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10003CCAC;
  return ((uint64_t (*)(void, id, BOOL))v5)(*(void *)(v0 + 16), v2, v1 == 0);
}

uint64_t sub_10003CCAC()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 48LL);
  *(void *)(*(void *)v1 + 56LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_10003CD44;
  }
  else {
    uint64_t v3 = sub_10003CD10;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_10003CD10()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003CD44()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void (**)(uint64_t))(v0 + 32);
  swift_errorRetain(v1);
  v2(v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003CE20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_10000D228(&qword_10007EE68);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Logger(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for XPCServer();
  sub_10000D1E8( (unint64_t *)&qword_10007F128,  (uint64_t (*)(uint64_t))type metadata accessor for XPCServer,  (uint64_t)&unk_100060A78);
  uint64_t v16 = static LoggedObject.logger.getter(v15);
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    char v19 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v30 = a3;
    uint64_t v31 = a1;
    uint64_t v20 = v4;
    uint64_t v21 = v19;
    *(_DWORD *)char v19 = 134217984;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v19 + 4);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "calling hmvutil exit(%ld)", v21, 0xCu);
    uint64_t v22 = v21;
    uint64_t v4 = v20;
    a3 = v30;
    swift_slowDealloc(v22, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t v23 = swift_allocObject(&unk_1000770B8, 32LL, 7LL);
  *(void *)(v23 + swift_unknownObjectWeakDestroy(v0 + 16) = a2;
  *(void *)(v23 + 24) = a3;
  swift_retain(a3);
  char v24 = sub_100038EB0(2, (uint64_t)sub_100041714, v23);
  uint64_t result = swift_release(v23);
  if ((v24 & 1) != 0)
  {
    uint64_t result = swift_weakLoadStrong(v4 + 32);
    if (result)
    {
      uint64_t v26 = result;
      sub_10003FA30(result, 0);
      swift_release(v26);
      uint64_t v27 = type metadata accessor for TaskPriority(0LL);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56LL))(v10, 1LL, 1LL, v27);
      char v28 = (void *)swift_allocObject(&unk_1000770E0, 56LL, 7LL);
      v28[2] = 0LL;
      v28[3] = 0LL;
      v28[4] = a2;
      v28[5] = a3;
      v28[6] = a1;
      swift_retain(a3);
      uint64_t v29 = sub_10005DBB4((uint64_t)v10, (uint64_t)&unk_10007FF60, (uint64_t)v28);
      return swift_release(v29);
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

uint64_t sub_10003D0A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  return swift_task_switch(sub_10003D0C0, 0LL, 0LL);
}

void sub_10003D0C0()
{
  int64_t v1 = *(void *)(v0 + 32);
  (*(void (**)(void))(v0 + 16))(0LL);
  if (v1 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
  }

  else
  {
    uint64_t v2 = *(void *)(v0 + 32);
    if (v2 <= 0x7FFFFFFF) {
      exit(v2);
    }
  }

  __break(1u);
}

void *sub_10003D184(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v32 = a1;
  uint64_t v33 = a2;
  uint64_t v8 = sub_10000D228(&qword_10007EE68);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Logger(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for XPCServer();
  sub_10000D1E8( (unint64_t *)&qword_10007F128,  (uint64_t (*)(uint64_t))type metadata accessor for XPCServer,  (uint64_t)&unk_100060A78);
  uint64_t v16 = static LoggedObject.logger.getter(v15);
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    char v19 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)char v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "calling hmvutil registerForTaskWithIdentifier()", v19, 2u);
    swift_slowDealloc(v19, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t v20 = swift_allocObject(&unk_100077018, 32LL, 7LL);
  *(void *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = a3;
  *(void *)(v20 + 24) = a4;
  swift_retain(a4);
  char v21 = sub_100038EB0(2, (uint64_t)sub_100041714, v20);
  uint64_t result = (void *)swift_release(v20);
  if ((v21 & 1) != 0)
  {
    uint64_t v23 = v5 + 32;
    uint64_t result = (void *)swift_weakLoadStrong(v5 + 32);
    if (result)
    {
      char v24 = result;
      sub_10003FA30((uint64_t)result, 0);
      swift_release(v24);
      uint64_t result = (void *)swift_weakLoadStrong(v23);
      if (result)
      {
        uint64_t v25 = result;
        sub_10001E8A4((uint64_t)result + OBJC_IVAR____TtC11homeeventsd10MainDriver_scheduler, (uint64_t)v36);
        swift_release(v25);
        uint64_t v26 = type metadata accessor for TaskPriority(0LL);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56LL))(v10, 1LL, 1LL, v26);
        sub_10001E8A4((uint64_t)v36, (uint64_t)v34);
        uint64_t v27 = swift_allocObject(&unk_100077040, 104LL, 7LL);
        *(void *)(v27 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
        *(void *)(v27 + 24) = 0LL;
        __int128 v28 = v34[1];
        *(_OWORD *)(v27 + 32) = v34[0];
        *(_OWORD *)(v27 + 48) = v28;
        uint64_t v29 = v32;
        uint64_t v30 = v33;
        *(void *)(v27 + 64) = v35;
        *(void *)(v27 + 72) = v29;
        *(void *)(v27 + 80) = v30;
        *(void *)(v27 + 88) = a3;
        *(void *)(v27 + 96) = a4;
        swift_retain(a4);
        swift_bridgeObjectRetain(v30);
        uint64_t v31 = sub_10005DBB4((uint64_t)v10, (uint64_t)&unk_10007FF40, v27);
        swift_release(v31);
        return sub_10000D690(v36);
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_10003D43C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[5] = a7;
  v8[6] = a8;
  v8[3] = a5;
  v8[4] = a6;
  v8[2] = a4;
  return swift_task_switch(sub_10003D45C, 0LL, 0LL);
}

uint64_t sub_10003D45C()
{
  int64_t v1 = *(void (**)(void))(v0 + 40);
  sub_100035394(*(void *)(v0 + 24), *(void *)(v0 + 32), (uint64_t)sub_10003D4B4, 0LL);
  v1(0LL);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003D4B4()
{
  uint64_t v0 = sub_10000D228(&qword_10007EE68);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)v18 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for TaskPriority(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, 1LL, 1LL, v3);
  uint64_t v5 = swift_allocObject(&unk_100077068, 32LL, 7LL);
  *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
  uint64_t v6 = (void *)(v5 + 16);
  *(void *)(v5 + 24) = 0LL;
  uint64_t v7 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1LL, v3);
  if ((_DWORD)v7 == 1)
  {
    sub_10000D5AC((uint64_t)v2, &qword_10007EE68);
    uint64_t v8 = 7168LL;
LABEL_6:
    uint64_t v16 = 0LL;
    return swift_task_create(v8, v16, (char *)&type metadata for () + 8, &unk_10007FF50, v5);
  }

  unsigned __int8 v9 = TaskPriority.rawValue.getter(v7);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v2, v3);
  uint64_t v8 = v9 | 0x1C00LL;
  uint64_t v10 = *v6;
  if (!*v6) {
    goto LABEL_6;
  }
  uint64_t v11 = *(void *)(v5 + 24);
  uint64_t ObjectType = swift_getObjectType(*v6);
  swift_unknownObjectRetain(v10);
  uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
  uint64_t v15 = v14;
  swift_unknownObjectRelease(v10);
  if (!(v15 | v13)) {
    goto LABEL_6;
  }
  v18[0] = 0LL;
  v18[1] = 0LL;
  uint64_t v16 = v18;
  void v18[2] = v13;
  void v18[3] = v15;
  return swift_task_create(v8, v16, (char *)&type metadata for () + 8, &unk_10007FF50, v5);
}

uint64_t sub_10003D658()
{
  return sub_100040844(*(uint64_t (**)(void))(v0 + 8));
}

void *sub_10003D684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v32 = a1;
  uint64_t v33 = a2;
  uint64_t v8 = sub_10000D228(&qword_10007EE68);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Logger(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for XPCServer();
  sub_10000D1E8( (unint64_t *)&qword_10007F128,  (uint64_t (*)(uint64_t))type metadata accessor for XPCServer,  (uint64_t)&unk_100060A78);
  uint64_t v16 = static LoggedObject.logger.getter(v15);
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    char v19 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)char v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "calling hmvutil submitTaskRequestForIdentifier()", v19, 2u);
    swift_slowDealloc(v19, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t v20 = swift_allocObject(&unk_100076F78, 32LL, 7LL);
  *(void *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = a3;
  *(void *)(v20 + 24) = a4;
  swift_retain(a4);
  char v21 = sub_100038EB0(2, (uint64_t)sub_100041714, v20);
  uint64_t result = (void *)swift_release(v20);
  if ((v21 & 1) != 0)
  {
    uint64_t v23 = v5 + 32;
    uint64_t result = (void *)swift_weakLoadStrong(v5 + 32);
    if (result)
    {
      char v24 = result;
      sub_10003FA30((uint64_t)result, 0);
      swift_release(v24);
      uint64_t result = (void *)swift_weakLoadStrong(v23);
      if (result)
      {
        uint64_t v25 = result;
        sub_10001E8A4((uint64_t)result + OBJC_IVAR____TtC11homeeventsd10MainDriver_scheduler, (uint64_t)v36);
        swift_release(v25);
        uint64_t v26 = type metadata accessor for TaskPriority(0LL);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56LL))(v10, 1LL, 1LL, v26);
        sub_10001E8A4((uint64_t)v36, (uint64_t)v34);
        uint64_t v27 = swift_allocObject(&unk_100076FA0, 104LL, 7LL);
        *(void *)(v27 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
        *(void *)(v27 + 24) = 0LL;
        __int128 v28 = v34[1];
        *(_OWORD *)(v27 + 32) = v34[0];
        *(_OWORD *)(v27 + 48) = v28;
        uint64_t v29 = v32;
        uint64_t v30 = v33;
        *(void *)(v27 + 64) = v35;
        *(void *)(v27 + 72) = v29;
        *(void *)(v27 + 80) = v30;
        *(void *)(v27 + 88) = a3;
        *(void *)(v27 + 96) = a4;
        swift_retain(a4);
        swift_bridgeObjectRetain(v30);
        uint64_t v31 = sub_10005DBB4((uint64_t)v10, (uint64_t)&unk_10007FF30, v27);
        swift_release(v31);
        return sub_10000D690(v36);
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_10003D93C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[10] = a7;
  v8[11] = a8;
  v8[8] = a5;
  v8[9] = a6;
  v8[7] = a4;
  return swift_task_switch(sub_10003D95C, 0LL, 0LL);
}

uint64_t sub_10003D95C()
{
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v1 = *(void *)(v0 + 72);
  *(void *)(v0 + 40) = &type metadata for BackgroundSystemTaskRequest;
  *(void *)(v0 + 48) = &off_100075FC0;
  uint64_t v3 = swift_allocObject(&unk_100076FC8, 81LL, 7LL);
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  *(_DWORD *)(v3 + 32) = 67109121;
  *(void *)(v3 + 40) = 0x4014000000000000LL;
  *(_BYTE *)(v3 + 48) = 0;
  *(void *)(v3 + sub_1000154A8(*(void *)(v0 + 152) + OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_database, v0 + 56) = 0LL;
  *(_BYTE *)(v3 + 64) = 1;
  *(void *)(v3 + 72) = 6LL;
  *(_BYTE *)(v3 + 80) = 0;
  swift_bridgeObjectRetain(v1);
  sub_100035930((void *)(v0 + 16));
  uint64_t v4 = *(void (**)(void))(v0 + 80);
  _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0((void *)(v0 + 16));
  v4(0LL);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003DA6C( uint64_t a1, int a2, uint64_t a3, void *aBlock, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v12 = _Block_copy(aBlock);
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  uint64_t v15 = v14;
  uint64_t v16 = swift_allocObject(a5, 24LL, 7LL);
  *(void *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = v12;
  swift_retain(a1);
  a7(v13, v15, a6, v16);
  swift_release(a1);
  swift_bridgeObjectRelease(v15);
  return swift_release(v16);
}

uint64_t sub_10003DB18(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4, char a5, uint64_t a6)
{
  __int128 v28 = a3;
  uint64_t v29 = a4;
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for XPCServer();
  sub_10000D1E8( (unint64_t *)&qword_10007F128,  (uint64_t (*)(uint64_t))type metadata accessor for XPCServer,  (uint64_t)&unk_100060A78);
  uint64_t v15 = static LoggedObject.logger.getter(v14);
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    os_log_type_t v18 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    uint64_t v27 = a2;
    char v19 = a5;
    uint64_t v20 = a6;
    char v21 = v18;
    *(_WORD *)os_log_type_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, v28, v18, 2u);
    uint64_t v22 = v21;
    a6 = v20;
    a5 = v19;
    a2 = v27;
    swift_slowDealloc(v22, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  uint64_t v23 = swift_allocObject(v29, 32LL, 7LL);
  *(void *)(v23 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  *(void *)(v23 + 24) = a2;
  swift_retain(a2);
  char v24 = sub_100038EB0(a5, a6, v23);
  uint64_t result = swift_release(v23);
  if ((v24 & 1) != 0) {
    return sub_10003A730(a1, a2);
  }
  return result;
}

uint64_t sub_10003DD64(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v83 = a4;
  uint64_t v84 = a5;
  uint64_t v8 = sub_10000D228(&qword_10007EE68);
  __chkstk_darwin(v8);
  uint64_t v77 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v11 = *(void **)(v10 - 8);
  uint64_t v12 = v11[8];
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v76 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v74 = (char *)&v68 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  os_log_type_t v18 = (char *)&v68 - v17;
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v68 - v19;
  uint64_t v21 = type metadata accessor for Logger(0LL);
  uint64_t v80 = *(void *)(v21 - 8);
  uint64_t v81 = v21;
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v68 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = type metadata accessor for XPCServer();
  sub_10000D1E8( (unint64_t *)&qword_10007F128,  (uint64_t (*)(uint64_t))type metadata accessor for XPCServer,  (uint64_t)&unk_100060A78);
  static LoggedObject.logger.getter(v24);
  uint64_t v25 = (void (*)(char *, uint64_t, uint64_t))v11[2];
  v25(v20, a1, v10);
  uint64_t v72 = v25;
  uint64_t v26 = ((uint64_t (*)(char *, uint64_t, uint64_t))v25)(v18, a2, v10);
  uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
  os_log_type_t v28 = static os_log_type_t.debug.getter();
  int v78 = v28;
  BOOL v29 = os_log_type_enabled(v27, v28);
  int v79 = a3;
  uint64_t v75 = v11;
  uint64_t v73 = v12;
  if (v29)
  {
    uint64_t v30 = swift_slowAlloc(28LL, -1LL);
    uint64_t v70 = a1;
    uint64_t v31 = v30;
    uint64_t v69 = swift_slowAlloc(64LL, -1LL);
    uint64_t v86 = v69;
    *(_DWORD *)uint64_t v31 = 136315650;
    uint64_t v32 = sub_10000D1E8( &qword_10007F498,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v71 = a2;
    uint64_t v33 = v32;
    os_log_t v68 = v27;
    uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter(v10, v32);
    unint64_t v36 = v35;
    uint64_t v85 = sub_100046274(v34, v35, &v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86, v31 + 4);
    swift_bridgeObjectRelease(v36);
    uint64_t v37 = (void (*)(char *, uint64_t))v11[1];
    v37(v20, v10);
    *(_WORD *)(v31 + 12) = 2080;
    uint64_t v38 = v33;
    a2 = v71;
    uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter(v10, v38);
    unint64_t v41 = v40;
    uint64_t v85 = sub_100046274(v39, v40, &v86);
    char v42 = v79;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86, v31 + 14);
    swift_bridgeObjectRelease(v41);
    v37(v18, v10);
    *(_WORD *)(v31 + 22) = 1024;
    LODWORD(v8_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 5) = v42 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, (char *)&v85 + 4, v31 + 24);
    uint64_t v27 = v68;
    _os_log_impl( (void *)&_mh_execute_header,  v68,  (os_log_type_t)v78,  "calling hmvutil createEncryptionKey(%s, %s, %{BOOL}d)",  (uint8_t *)v31,  0x1Cu);
    uint64_t v43 = v69;
    swift_arrayDestroy(v69, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1LL, -1LL);
    uint64_t v44 = v31;
    a1 = v70;
    swift_slowDealloc(v44, -1LL, -1LL);
  }

  else
  {
    uint64_t v45 = (void (*)(char *, uint64_t))v11[1];
    v45(v20, v10);
    v45(v18, v10);
  }

  (*(void (**)(char *, uint64_t))(v80 + 8))(v23, v81);
  uint64_t v46 = swift_allocObject(&unk_100076E60, 32LL, 7LL);
  *(void *)(v46 + swift_unknownObjectWeakDestroy(v0 + 16) = v83;
  uint64_t v47 = v84;
  *(void *)(v46 + 24) = v84;
  swift_retain(v47);
  unint64_t v48 = v82;
  char v49 = sub_100038EB0(2, (uint64_t)sub_100041714, v46);
  uint64_t result = swift_release(v46);
  if ((v49 & 1) != 0)
  {
    uint64_t result = swift_weakLoadStrong(v48 + 32);
    if (result)
    {
      uint64_t v51 = result;
      uint64_t v82 = (char *)*(id *)(result + OBJC_IVAR____TtC11homeeventsd10MainDriver_cloudKitContainer);
      swift_release(v51);
      uint64_t v52 = type metadata accessor for TaskPriority(0LL);
      uint64_t v53 = (uint64_t)v77;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56LL))(v77, 1LL, 1LL, v52);
      unint64_t v54 = v74;
      int v55 = v72;
      v72(v74, a1, v10);
      uint64_t v56 = v76;
      v55(v76, a2, v10);
      uint64_t v57 = v75;
      uint64_t v58 = *((unsigned __int8 *)v75 + 80);
      uint64_t v59 = (v58 + 40) & ~v58;
      uint64_t v60 = (v73 + v58 + v59) & ~v58;
      uint64_t v61 = v60 + v73;
      unint64_t v62 = (v60 + v73) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v63 = (char *)swift_allocObject(&unk_100076E88, v62 + 24, v58 | 7);
      uint64_t v64 = &v63[v62];
      *((void *)v63 + 2) = 0LL;
      *((void *)v63 + 3) = 0LL;
      *((void *)v63 + 4) = v82;
      uint64_t v65 = (void (*)(char *, char *, uint64_t))v57[4];
      v65(&v63[v59], v54, v10);
      v65(&v63[v60], v56, v10);
      v63[v61] = v79 & 1;
      uint64_t v66 = v84;
      *((void *)v64 + 1) = v83;
      *((void *)v64 + 2) = v66;
      swift_retain(v66);
      uint64_t v67 = sub_10005DBB4(v53, (uint64_t)&unk_10007FF18, (uint64_t)v63);
      return swift_release(v67);
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

uint64_t sub_10003E2A4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[2] = a8;
  v8[3] = v16;
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100080320 + dword_100080320);
  uint64_t v13 = (void *)swift_task_alloc(unk_100080324);
  v8[4] = v13;
  *uint64_t v13 = v8;
  v13[1] = sub_100039FD4;
  return v15(a4, a5, a6, a7);
}

uint64_t sub_10003E464(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v76 = a3;
  uint64_t v77 = a4;
  uint64_t v6 = sub_10000D228(&qword_10007EE68);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void **)(v9 - 8);
  uint64_t v11 = v10[8];
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v71 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v12);
  os_log_t v68 = (char *)&v62 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v62 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v62 - v18;
  uint64_t v20 = type metadata accessor for Logger(0LL);
  uint64_t v73 = *(void *)(v20 - 8);
  uint64_t v74 = v20;
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v62 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = type metadata accessor for XPCServer();
  sub_10000D1E8( (unint64_t *)&qword_10007F128,  (uint64_t (*)(uint64_t))type metadata accessor for XPCServer,  (uint64_t)&unk_100060A78);
  static LoggedObject.logger.getter(v23);
  uint64_t v24 = (void (*)(char *, uint64_t, uint64_t))v10[2];
  v24(v19, a1, v9);
  uint64_t v66 = v24;
  uint64_t v25 = ((uint64_t (*)(char *, uint64_t, uint64_t))v24)(v17, a2, v9);
  uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
  os_log_type_t v27 = static os_log_type_t.debug.getter();
  int v72 = v27;
  BOOL v28 = os_log_type_enabled(v26, v27);
  uint64_t v69 = a1;
  uint64_t v70 = v10;
  uint64_t v67 = v11;
  if (v28)
  {
    uint64_t v29 = swift_slowAlloc(22LL, -1LL);
    uint64_t v63 = swift_slowAlloc(64LL, -1LL);
    uint64_t v79 = v63;
    *(_DWORD *)uint64_t v29 = 136315394;
    uint64_t v65 = (char *)(v29 + 4);
    uint64_t v30 = sub_10000D1E8( &qword_10007F498,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    os_log_t v62 = v26;
    uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter(v9, v30);
    unint64_t v33 = v32;
    uint64_t v78 = sub_100046274(v31, v32, &v79);
    uint64_t v64 = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v65);
    swift_bridgeObjectRelease(v33);
    uint64_t v65 = v8;
    uint64_t v34 = (void (*)(char *, uint64_t))v10[1];
    v34(v19, v9);
    *(_WORD *)(v29 + 12) = 2080;
    uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter(v9, v30);
    unint64_t v37 = v36;
    uint64_t v78 = sub_100046274(v35, v36, &v79);
    a2 = v64;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v29 + 14);
    swift_bridgeObjectRelease(v37);
    v34(v17, v9);
    uint64_t v8 = v65;
    uint64_t v26 = v62;
    _os_log_impl( (void *)&_mh_execute_header,  v62,  (os_log_type_t)v72,  "calling hmvutil deleteEncryptionKey(%s, %s)",  (uint8_t *)v29,  0x16u);
    uint64_t v38 = v63;
    swift_arrayDestroy(v63, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1LL, -1LL);
    swift_slowDealloc(v29, -1LL, -1LL);
  }

  else
  {
    uint64_t v39 = (void (*)(char *, uint64_t))v10[1];
    v39(v19, v9);
    v39(v17, v9);
  }

  (*(void (**)(char *, uint64_t))(v73 + 8))(v22, v74);
  uint64_t v40 = swift_allocObject(&unk_100076DE8, 32LL, 7LL);
  *(void *)(v40 + swift_unknownObjectWeakDestroy(v0 + 16) = v76;
  uint64_t v41 = v77;
  *(void *)(v40 + 24) = v77;
  swift_retain(v41);
  uint64_t v42 = v75;
  char v43 = sub_100038EB0(2, (uint64_t)sub_100041714, v40);
  uint64_t result = swift_release(v40);
  if ((v43 & 1) != 0)
  {
    uint64_t result = swift_weakLoadStrong(v42 + 32);
    if (result)
    {
      uint64_t v45 = result;
      id v46 = *(id *)(result + OBJC_IVAR____TtC11homeeventsd10MainDriver_cloudKitContainer);
      swift_release(v45);
      uint64_t v47 = type metadata accessor for TaskPriority(0LL);
      uint64_t v48 = (uint64_t)v8;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56LL))(v8, 1LL, 1LL, v47);
      char v49 = v68;
      unint64_t v50 = v66;
      v66(v68, v69, v9);
      uint64_t v51 = v71;
      v50(v71, a2, v9);
      uint64_t v52 = v70;
      uint64_t v53 = *((unsigned __int8 *)v70 + 80);
      uint64_t v54 = (v53 + 40) & ~v53;
      uint64_t v55 = (v67 + v53 + v54) & ~v53;
      unint64_t v56 = (v67 + v55 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v57 = (char *)swift_allocObject(&unk_100076E10, v56 + 16, v53 | 7);
      *((void *)v57 + 2) = 0LL;
      *((void *)v57 + 3) = 0LL;
      *((void *)v57 + 4) = v46;
      uint64_t v58 = (void (*)(char *, char *, uint64_t))v52[4];
      v58(&v57[v54], v49, v9);
      v58(&v57[v55], v51, v9);
      uint64_t v59 = &v57[v56];
      uint64_t v60 = v77;
      *(void *)uint64_t v59 = v76;
      *((void *)v59 + 1) = v60;
      swift_retain(v60);
      uint64_t v61 = sub_10005DBB4(v48, (uint64_t)&unk_10007FF08, (uint64_t)v57);
      return swift_release(v61);
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

uint64_t sub_10003E964( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[2] = a7;
  v8[3] = a8;
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1000802F0 + dword_1000802F0);
  uint64_t v12 = (void *)swift_task_alloc(unk_1000802F4);
  v8[4] = v12;
  *uint64_t v12 = v8;
  v12[1] = sub_100039FD4;
  return v14(a4, a5, a6);
}

uint64_t sub_10003EB04(int a1, void (*a2)(char *, uint64_t), uint64_t a3)
{
  int v60 = a1;
  uint64_t v5 = sub_10000D228(&qword_10007EEB8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_10000D228(&qword_10007EE68);
  __chkstk_darwin(v8);
  unint64_t v56 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v59 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v57 = (char *)&v56 - v15;
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v56 - v16;
  uint64_t v18 = type metadata accessor for XPCServer();
  uint64_t v58 = sub_10000D1E8( (unint64_t *)&qword_10007F128,  (uint64_t (*)(uint64_t))type metadata accessor for XPCServer,  (uint64_t)&unk_100060A78);
  uint64_t v19 = static LoggedObject.logger.getter(v18);
  uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v22 = 67109120;
    int v63 = v60 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v22 + 4);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "calling collectDiagnostics(%{BOOL}d)", v22, 8u);
    swift_slowDealloc(v22, -1LL, -1LL);
  }

  uint64_t v23 = *(void (**)(char *, uint64_t))(v11 + 8);
  v23(v17, v10);
  uint64_t v24 = swift_allocObject(&unk_100076CF8, 32LL, 7LL);
  *(void *)(v24 + swift_unknownObjectWeakDestroy(v0 + 16) = a2;
  *(void *)(v24 + 24) = a3;
  swift_retain(a3);
  uint64_t v25 = v61;
  char v26 = sub_100038EB0(2, (uint64_t)sub_10003F6B8, v24);
  uint64_t result = swift_release(v24);
  if ((v26 & 1) != 0)
  {
    uint64_t result = swift_weakLoadStrong(v25 + 32);
    if (result)
    {
      uint64_t v28 = result;
      sub_10003FA30(result, 0);
      swift_release(v28);
      sub_10000D478(v25 + 80, (uint64_t)&v63);
      uint64_t v29 = sub_10000D228(&qword_10007FEB8);
      uint64_t v30 = type metadata accessor for CoreDataDatabase();
      if (swift_dynamicCast(&v62, &v63, v29, v30, 6LL))
      {
        uint64_t v31 = a2;
        uint64_t v32 = v62;
        id v33 = [*(id *)(v62 + 16) persistentStoreCoordinator];
        if (v33)
        {
          id v34 = v33;
          uint64_t v35 = type metadata accessor for TaskPriority(0LL);
          uint64_t v36 = (uint64_t)v56;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56LL))(v56, 1LL, 1LL, v35);
          uint64_t v37 = swift_allocObject(&unk_100076D20, 64LL, 7LL);
          char v38 = v60 & 1;
          *(void *)(v37 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
          *(void *)(v37 + 24) = 0LL;
          *(_BYTE *)(v37 + 32) = v38;
          *(void *)(v37 + 40) = v34;
          *(void *)(v37 + 48) = v31;
          *(void *)(v37 + sub_1000154A8(*(void *)(v0 + 152) + OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_database, v0 + 56) = a3;
          swift_retain(a3);
          uint64_t v39 = sub_10005DBB4(v36, (uint64_t)&unk_10007FED0, v37);
          swift_release(v32);
          return swift_release(v39);
        }

        uint64_t v48 = static LoggedObject.logger.getter(v18);
        char v49 = (os_log_s *)Logger.logObject.getter(v48);
        os_log_type_t v50 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v49, v50))
        {
          uint64_t v51 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v51 = 0;
          _os_log_impl((void *)&_mh_execute_header, v49, v50, "CoreDataDatabase has no coordinator", v51, 2u);
          swift_slowDealloc(v51, -1LL, -1LL);
        }

        v23(v57, v10);
        uint64_t v52 = type metadata accessor for URL(0LL);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56LL))(v7, 1LL, 1LL, v52);
        unint64_t v53 = sub_10003FC0C();
        uint64_t v54 = swift_allocError(&type metadata for XPCServerProxy.ConnectionError, v53, 0LL, 0LL);
        *(void *)uint64_t v55 = 0xD000000000000023LL;
        *(void *)(v55 + 8) = 0x8000000100063880LL;
        *(_BYTE *)(v55 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
        v31(v7, v54);
        swift_errorRelease(v54);
        swift_release(v32);
      }

      else
      {
        uint64_t v40 = static LoggedObject.logger.getter(v18);
        uint64_t v41 = (os_log_s *)Logger.logObject.getter(v40);
        os_log_type_t v42 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v41, v42))
        {
          char v43 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)char v43 = 0;
          _os_log_impl((void *)&_mh_execute_header, v41, v42, "Database is not a CoreDataDatabase", v43, 2u);
          swift_slowDealloc(v43, -1LL, -1LL);
        }

        v23(v59, v10);
        uint64_t v44 = type metadata accessor for URL(0LL);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56LL))(v7, 1LL, 1LL, v44);
        unint64_t v45 = sub_10003FC0C();
        uint64_t v46 = swift_allocError(&type metadata for XPCServerProxy.ConnectionError, v45, 0LL, 0LL);
        *(void *)uint64_t v47 = 0xD000000000000022LL;
        *(void *)(v47 + 8) = 0x8000000100063850LL;
        *(_BYTE *)(v47 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
        a2(v7, v46);
        swift_errorRelease(v46);
      }

      return sub_10000D5AC((uint64_t)v7, &qword_10007EEB8);
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

uint64_t sub_10003F0CC(uint64_t a1, void (*a2)(char *, uint64_t))
{
  uint64_t v4 = sub_10000D228(&qword_10007EEB8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
  a2(v6, a1);
  return sub_10000D5AC((uint64_t)v6, &qword_10007EEB8);
}

uint64_t sub_10003F17C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[2] = a6;
  v7[3] = a7;
  uint64_t v10 = sub_10000D228(&qword_10007EEB8);
  v7[4] = swift_task_alloc((*(void *)(*(void *)(v10 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for URL(0LL);
  v7[5] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v7[6] = v12;
  uint64_t v13 = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  v7[7] = v13;
  uint64_t v14 = (void *)swift_task_alloc(dword_10007F1FC);
  v7[8] = v14;
  *uint64_t v14 = v7;
  v14[1] = sub_10003F234;
  return sub_100011938(v13, a4, a5);
}

uint64_t sub_10003F234()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 64LL);
  *(void *)(*(void *)v1 + 72LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_10003F348;
  }
  else {
    uint64_t v3 = sub_10003F298;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_10003F298()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v5 = *(void (**)(uint64_t, void))(v0 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v4, v1, v3);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v2 + 56))(v4, 0LL, 1LL, v3);
  v5(v4, 0LL);
  sub_10000D5AC(v4, &qword_10007EEB8);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v6 = *(void *)(v0 + 32);
  swift_task_dealloc(*(void *)(v0 + 56));
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003F348()
{
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(v0 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(v0 + 48) + 56LL))( v2,  1LL,  1LL,  *(void *)(v0 + 40));
  swift_errorRetain(v1);
  v3(v2, v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  sub_10000D5AC(v2, &qword_10007EEB8);
  uint64_t v4 = *(void *)(v0 + 32);
  swift_task_dealloc(*(void *)(v0 + 56));
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10003F45C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000D228(&qword_10007EEB8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10003FF00(a1, (uint64_t)v8);
  uint64_t v9 = type metadata accessor for URL(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v12 = 0LL;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9) != 1)
  {
    URL._bridgeToObjectiveC()(v11);
    uint64_t v12 = v13;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
  }

  if (a2) {
    uint64_t v14 = (void *)_convertErrorToNSError(_:)(a2);
  }
  else {
    uint64_t v14 = 0LL;
  }
  (*(void (**)(uint64_t, void *, void *))(a3 + 16))(a3, v12, v14);
}

uint64_t sub_10003F554()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_10003F578(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10003F580(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  return swift_task_switch(sub_10003F59C, 0LL, 0LL);
}

uint64_t sub_10003F59C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003F5D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(_BYTE *)(v5 + 32) = a5;
  *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = a4;
  return swift_task_switch(sub_10003F5EC, a4, 0LL);
}

uint64_t sub_10003F5EC()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC11homeeventsd10MainDriver_didRecordProcessLaunchMetrics) & 1) != 0) {
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  *(_BYTE *)(v1 + OBJC_IVAR____TtC11homeeventsd10MainDriver_didRecordProcessLaunchMetrics) = 1;
  uint64_t v3 = (void *)swift_task_alloc(dword_10007EE64);
  *(void *)(v0 + 24) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10003F670;
  return sub_1000076C4(*(_BYTE *)(v0 + 32), 1);
}

uint64_t sub_10003F670()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 24));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10003F6B8(uint64_t a1)
{
  return sub_10003F0CC(a1, *(void (**)(char *, uint64_t))(v1 + 16));
}

uint64_t sub_10003F6C0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PendingEventData(0LL);
  uint64_t v47 = *(void *)(v2 - 8);
  uint64_t v48 = v2;
  __chkstk_darwin(v2);
  uint64_t v46 = (uint64_t)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v51 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  os_log_type_t v50 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  char v49 = (char *)&v41 - v7;
  sub_10000D228(&qword_10007FF88);
  uint64_t result = static _DictionaryStorage.copy(original:)(a1);
  uint64_t v9 = (void *)result;
  int64_t v10 = 0LL;
  uint64_t v52 = a1;
  uint64_t v13 = *(void *)(a1 + 64);
  uint64_t v12 = a1 + 64;
  uint64_t v11 = v13;
  uint64_t v14 = 1LL << *(_BYTE *)(v12 - 32);
  uint64_t v15 = -1LL;
  if (v14 < 64) {
    uint64_t v15 = ~(-1LL << v14);
  }
  unint64_t v16 = v15 & v11;
  uint64_t v42 = v12;
  int64_t v43 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v45 = result + 64;
  __int128 v44 = xmmword_100060C90;
  uint64_t v17 = v50;
  if ((v15 & v11) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v18 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  int64_t v53 = v10;
  for (unint64_t i = v18 | (v10 << 6); ; unint64_t i = __clz(__rbit64(v21)) + (v22 << 6))
  {
    uint64_t v25 = v51;
    uint64_t v24 = v52;
    unint64_t v26 = *(void *)(v51 + 72) * i;
    os_log_type_t v27 = v49;
    (*(void (**)(char *, unint64_t, uint64_t))(v51 + 16))(v49, *(void *)(v52 + 48) + v26, v4);
    uint64_t v28 = *(void *)(*(void *)(v24 + 56) + 8 * i);
    uint64_t v29 = *(uint64_t (**)(char *, char *, uint64_t))(v25 + 32);
    uint64_t result = v29(v17, v27, v4);
    if (*(void *)(v28 + 16) != 1LL)
    {
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }

    uint64_t v30 = v46;
    sub_100040A84( v28 + ((*(unsigned __int8 *)(v47 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80)),  v46);
    uint64_t v31 = sub_10000D228(&qword_10007F908);
    uint64_t v32 = swift_allocObject(v31, 96LL, 7LL);
    *(_OWORD *)(v32 + swift_unknownObjectWeakDestroy(v0 + 16) = v44;
    uint64_t v33 = v48;
    uint64_t v34 = *(void *)(v30 + *(int *)(v48 + 28));
    *(void *)(v32 + sub_1000154A8(*(void *)(v0 + 152) + OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_database, v0 + 56) = &type metadata for Int64;
    *(void *)(v32 + 32) = v34;
    uint64_t v35 = (uint64_t *)(v30 + *(int *)(v33 + 32));
    uint64_t v36 = *v35;
    unint64_t v37 = v35[1];
    *(void *)(v32 + 88) = &type metadata for Data;
    *(void *)(v32 + 64) = v36;
    *(void *)(v32 + 72) = v37;
    sub_100012154(v36, v37);
    sub_100040AC8(v30);
    *(void *)(v45 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << i;
    uint64_t result = v29((char *)(v9[6] + v26), v17, v4);
    *(void *)(v9[7] + 8 * i) = v32;
    uint64_t v38 = v9[2];
    BOOL v39 = __OFADD__(v38, 1LL);
    uint64_t v40 = v38 + 1;
    if (v39) {
      goto LABEL_25;
    }
    v9[2] = v40;
    int64_t v10 = v53;
    if (v16) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v20 = v10 + 1;
    if (__OFADD__(v10, 1LL)) {
      goto LABEL_26;
    }
    if (v20 >= v43) {
      return (uint64_t)v9;
    }
    unint64_t v21 = *(void *)(v42 + 8 * v20);
    int64_t v22 = v10 + 1;
    if (!v21)
    {
      int64_t v22 = v10 + 2;
      if (v10 + 2 >= v43) {
        return (uint64_t)v9;
      }
      unint64_t v21 = *(void *)(v42 + 8 * v22);
      if (!v21)
      {
        int64_t v22 = v10 + 3;
        if (v10 + 3 >= v43) {
          return (uint64_t)v9;
        }
        unint64_t v21 = *(void *)(v42 + 8 * v22);
        if (!v21) {
          break;
        }
      }
    }

uint64_t sub_10003FA30(uint64_t a1, char a2)
{
  uint64_t v4 = sub_10000D228(&qword_10007EE68);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for TaskPriority(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1LL, 1LL, v7);
  uint64_t v9 = swift_allocObject(&unk_100076D48, 41LL, 7LL);
  *(void *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
  int64_t v10 = (void *)(v9 + 16);
  *(void *)(v9 + 24) = 0LL;
  *(void *)(v9 + 32) = a1;
  *(_BYTE *)(v9 + 40) = a2;
  int v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7);
  uint64_t v12 = swift_retain(a1);
  if (v11 == 1)
  {
    sub_10000D5AC((uint64_t)v6, &qword_10007EE68);
    uint64_t v13 = 0LL;
    uint64_t v14 = 0LL;
    uint64_t v15 = 7168LL;
  }

  else
  {
    unsigned __int8 v16 = TaskPriority.rawValue.getter(v12);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
    uint64_t v15 = v16 | 0x1C00LL;
    uint64_t v17 = *v10;
    if (*v10)
    {
      uint64_t v18 = *(void *)(v9 + 24);
      uint64_t ObjectType = swift_getObjectType(*v10);
      swift_unknownObjectRetain(v17);
      uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v18);
      uint64_t v14 = v20;
      swift_unknownObjectRelease(v17);
    }

    else
    {
      uint64_t v13 = 0LL;
      uint64_t v14 = 0LL;
    }
  }

  uint64_t v21 = swift_allocObject(&unk_100076D70, 32LL, 7LL);
  *(void *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = &unk_10007FEE0;
  *(void *)(v21 + 24) = v9;
  if (v14 | v13)
  {
    v25[0] = 0LL;
    v25[1] = 0LL;
    int64_t v22 = v25;
    v25[2] = v13;
    void v25[3] = v14;
  }

  else
  {
    int64_t v22 = 0LL;
  }

  uint64_t v23 = swift_task_create(v15, v22, (char *)&type metadata for () + 8, &unk_10007FEE8, v21);
  return swift_release(v23);
}

unint64_t sub_10003FC0C()
{
  unint64_t result = qword_10007FEC0;
  if (!qword_10007FEC0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000619EC, &type metadata for XPCServerProxy.ConnectionError);
    atomic_store(result, &qword_10007FEC0);
  }

  return result;
}

uint64_t sub_10003FC50()
{
  swift_release(*(void *)(v0 + 56));
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_10003FC84(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  char v6 = *(_BYTE *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 48);
  uint64_t v9 = *(void *)(v1 + 56);
  int64_t v10 = (void *)swift_task_alloc(dword_10007FECC);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v10;
  *int64_t v10 = v2;
  v10[1] = sub_10001D0F0;
  return sub_10003F17C(a1, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_10003FD14()
{
  return swift_deallocObject(v0, 41LL, 7LL);
}

uint64_t sub_10003FD40()
{
  uint64_t v2 = *(void *)(v0 + 32);
  char v3 = *(_BYTE *)(v0 + 40);
  uint64_t v4 = swift_task_alloc(dword_10007FEDC);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = sub_10001D0F0;
  *(_BYTE *)(v4 + 32) = v3;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = v2;
  return swift_task_switch(sub_10003F5EC, v2, 0LL);
}

uint64_t sub_10003FDA8(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_100080754);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_10001D0F0;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_100080750 + dword_100080750))(a1, v4);
}

uint64_t sub_10003FE18()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_10003FE4C()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc(dword_10007FEF4);
  __int128 v4 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_10001D0F0;
  *(void *)(v3 + 32) = v2;
  *(_OWORD *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  return swift_task_switch(sub_10003F59C, 0LL, 0LL);
}

_OWORD *sub_10003FEB4(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

unint64_t sub_10003FEC4()
{
  unint64_t result = qword_10007EF30;
  if (!qword_10007EF30)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSNumber);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10007EF30);
  }

  return result;
}

uint64_t sub_10003FF00(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D228(&qword_10007EEB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

void sub_10003FF48(uint64_t a1)
{
}

uint64_t sub_10003FF50()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = (v5 + v3 + v4) & ~v3;
  unint64_t v8 = (v5 + v7 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_unknownObjectRelease(*(void *)(v0 + 16));

  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v9(v0 + v4, v1);
  v9(v0 + v7, v1);
  swift_release(*(void *)(v0 + v8 + 8));
  return swift_deallocObject(v0, v8 + 16, v6);
}

uint64_t sub_100040004()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = (v5 + v3 + v4) & ~v3;
  uint64_t v7 = (v5 + v6 + 7) & 0xFFFFFFFFFFFFF8LL;
  uint64_t v8 = *(void *)(v0 + 32);
  uint64_t v9 = v0 + v4;
  uint64_t v10 = v0 + v6;
  uint64_t v11 = swift_task_alloc(dword_10007FF04);
  __int128 v12 = *(_OWORD *)(v0 + v7);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v11;
  *(void *)uint64_t v11 = v1;
  *(void *)(v11 + 8) = sub_10001D0F0;
  *(_OWORD *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = v12;
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1000802F0 + dword_1000802F0);
  uint64_t v13 = (uint64_t *)swift_task_alloc(unk_1000802F4);
  *(void *)(v11 + 32) = v13;
  *uint64_t v13 = v11;
  v13[1] = (uint64_t)sub_100039FD4;
  return v15(v8, v9, v10);
}

uint64_t sub_1000400E4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v48 = (uint64_t)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for PendingEventData(0LL);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v47 = (uint64_t)&v39 - v10;
  uint64_t v11 = &_swiftEmptyDictionarySingleton;
  char v49 = &_swiftEmptyDictionarySingleton;
  uint64_t v12 = *(void *)(a1 + 16);
  if (!v12) {
    return (uint64_t)v11;
  }
  uint64_t v13 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v14 = (v13 + 32) & ~v13;
  uint64_t v15 = a1 + v14;
  uint64_t v16 = *(void *)(v9 + 72);
  uint64_t v46 = v14;
  uint64_t v41 = v13 | 7;
  uint64_t v42 = v16 + v14;
  __int128 v40 = xmmword_100060320;
  int64_t v43 = v8;
  uint64_t v44 = v3;
  uint64_t v45 = v2;
  while (1)
  {
    uint64_t v18 = v47;
    sub_100040A84(v15, v47);
    uint64_t v19 = v48;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v48, v18, v2);
    unint64_t v21 = sub_10005A3A8(v19);
    uint64_t v22 = v11[2];
    BOOL v23 = (v20 & 1) == 0;
    uint64_t v24 = v22 + v23;
    if (__OFADD__(v22, v23)) {
      break;
    }
    char v25 = v20;
    if (v11[3] < v24)
    {
      sub_10005B810(v24, 1LL);
      uint64_t v11 = v49;
      unint64_t v26 = sub_10005A3A8(v48);
      if ((v25 & 1) != (v27 & 1)) {
        goto LABEL_19;
      }
      unint64_t v21 = v26;
    }

    if ((v25 & 1) != 0)
    {
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v48, v2);
      uint64_t v11 = v49;
      uint64_t v28 = v49[7];
      sub_100040B04(v47, (uint64_t)v8);
      unint64_t v29 = *(void *)(v28 + 8 * v21);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v29);
      *(void *)(v28 + 8 * v21) = v29;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        unint64_t v29 = sub_10001C3A4(0, *(void *)(v29 + 16) + 1LL, 1, v29);
        *(void *)(v28 + 8 * v21) = v29;
      }

      unint64_t v32 = *(void *)(v29 + 16);
      unint64_t v31 = *(void *)(v29 + 24);
      if (v32 >= v31 >> 1)
      {
        unint64_t v29 = sub_10001C3A4(v31 > 1, v32 + 1, 1, v29);
        *(void *)(v28 + 8 * v21) = v29;
      }

      uint64_t v2 = v45;
      uint64_t v17 = v46;
      *(void *)(v29 + swift_unknownObjectWeakDestroy(v0 + 16) = v32 + 1;
      uint64_t v8 = v43;
      sub_100040B04((uint64_t)v43, v29 + v17 + v32 * v16);
      uint64_t v3 = v44;
    }

    else
    {
      uint64_t v33 = sub_10000D228(&qword_10007F5A0);
      uint64_t v34 = swift_allocObject(v33, v42, v41);
      *(_OWORD *)(v34 + swift_unknownObjectWeakDestroy(v0 + 16) = v40;
      sub_100040B04(v47, v34 + v46);
      v11[(v21 >> 6) + 8] |= 1LL << v21;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))( v11[6] + *(void *)(v3 + 72) * v21,  v48,  v2);
      *(void *)(v11[7] + 8 * v21) = v34;
      uint64_t v35 = v11[2];
      BOOL v36 = __OFADD__(v35, 1LL);
      uint64_t v37 = v35 + 1;
      if (v36) {
        goto LABEL_18;
      }
      v11[2] = v37;
    }

    v15 += v16;
    if (!--v12) {
      return (uint64_t)v11;
    }
  }

  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v2);
  __break(1u);
  return result;
}

uint64_t sub_1000403F4()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = (v5 + v3 + v4) & ~v3;
  unint64_t v8 = (v7 + v5) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v9 = v8 + v0;
  unint64_t v10 = v8 + 24;
  swift_unknownObjectRelease(*(void *)(v0 + 16));

  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v11(v0 + v4, v1);
  v11(v0 + v7, v1);
  swift_release(*(void *)(v9 + 16));
  return swift_deallocObject(v0, v10, v6);
}

uint64_t sub_1000404A4()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = (v5 + v3 + v4) & ~v3;
  uint64_t v7 = v6 + v5;
  uint64_t v8 = (v7 & 0xFFFFFFFFFFFFF8LL) + v0;
  uint64_t v9 = *(void *)(v0 + 32);
  uint64_t v10 = v0 + v4;
  uint64_t v11 = v0 + v6;
  uint64_t v12 = *(unsigned __int8 *)(v0 + v7);
  uint64_t v13 = swift_task_alloc(dword_10007FF14);
  __int128 v14 = *(_OWORD *)(v8 + 8);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v13;
  *(void *)uint64_t v13 = v1;
  *(void *)(v13 + 8) = sub_10001D0F0;
  *(_OWORD *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = v14;
  uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100080320 + dword_100080320);
  uint64_t v15 = (uint64_t *)swift_task_alloc(unk_100080324);
  *(void *)(v13 + 32) = v15;
  *uint64_t v15 = v13;
  v15[1] = (uint64_t)sub_100039FD4;
  return v17(v9, v10, v11, v12);
}

uint64_t sub_10004058C()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1000405AC()
{
  return swift_deallocObject(v0, 96LL, 7LL);
}

uint64_t sub_1000405E8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc(dword_10008075C);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v9;
  void *v9 = v2;
  v9[1] = sub_10000D3C0;
  return sub_10005DF84(a1, v4, v5, v6, v7, v8, (uint64_t)(v1 + 7));
}

uint64_t sub_10004067C()
{
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 96);
  uint64_t v4 = swift_task_alloc(dword_10007FF2C);
  __int128 v5 = *(_OWORD *)(v0 + 80);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = sub_10001D0F0;
  *(void *)(v4 + 88) = v3;
  *(_OWORD *)(v4 + 72) = v5;
  *(void *)(v4 + sub_1000154A8(*(void *)(v0 + 152) + OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_database, v0 + 56) = v0 + 32;
  *(void *)(v4 + 64) = v2;
  return swift_task_switch(sub_10003D95C, 0LL, 0LL);
}

uint64_t sub_1000406F8()
{
  return swift_deallocObject(v0, 81LL, 7LL);
}

uint64_t sub_100040720()
{
  return swift_deallocObject(v0, 104LL, 7LL);
}

uint64_t sub_10004075C()
{
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 96);
  uint64_t v4 = swift_task_alloc(dword_10007FF3C);
  __int128 v5 = *(_OWORD *)(v0 + 80);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = sub_10001D0F0;
  *(void *)(v4 + 48) = v3;
  *(_OWORD *)(v4 + 32) = v5;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = v0 + 32;
  *(void *)(v4 + 2_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = v2;
  return swift_task_switch(sub_10003D45C, 0LL, 0LL);
}

uint64_t sub_1000407D8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000407FC()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10007FF4C);
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000D3C0;
  return sub_10000D3C0();
}

uint64_t sub_100040844(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100040850()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_10004087C()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc(dword_10007FF5C);
  __int128 v4 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_10001D0F0;
  *(void *)(v3 + 32) = v2;
  *(_OWORD *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  return swift_task_switch(sub_10003D0C0, 0LL, 0LL);
}

uint64_t sub_1000408E4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100040908()
{
  swift_release(*(void *)(v0 + 88));
  return swift_deallocObject(v0, 96LL, 7LL);
}

uint64_t sub_100040944()
{
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v3 = swift_task_alloc(dword_10007FF6C);
  __int128 v4 = *(_OWORD *)(v0 + 80);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_10001D0F0;
  *(_OWORD *)(v3 + 32) = v4;
  *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = v0 + 32;
  *(void *)(v3 + 2_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = v2;
  return swift_task_switch(sub_10003CC14, 0LL, 0LL);
}

void sub_1000409B8(objc_class *a1, uint64_t a2)
{
}

uint64_t sub_1000409C0(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(v1 + 16))(0LL, a1);
}

uint64_t sub_1000409E8()
{
  return swift_deallocObject(v0, 88LL, 7LL);
}

uint64_t sub_100040A1C()
{
  uint64_t v2 = swift_task_alloc(dword_10007FF7C);
  __int128 v3 = *(_OWORD *)(v0 + 72);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_10001D0F0;
  *(_OWORD *)(v2 + 2_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = v3;
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v0 + 32;
  return swift_task_switch(sub_10003C684, 0LL, 0LL);
}

uint64_t sub_100040A84(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PendingEventData(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100040AC8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PendingEventData(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100040B04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PendingEventData(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100040B48()
{
  uint64_t v1 = type metadata accessor for Date(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v13 = v3 | v8 | 7;
  unint64_t v10 = (((*(void *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v11 = (v10 + 18) & 0xFFFFFFFFFFFFFFF8LL;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  swift_release(*(void *)(v0 + v10));
  swift_release(*(void *)(v0 + v11 + 8));
  return swift_deallocObject(v0, v11 + 16, v13);
}

uint64_t sub_100040C40(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for Date(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v8 = (*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v16 = *(void *)(v1 + 24);
  uint64_t v17 = *(void *)(v1 + 16);
  uint64_t v10 = v1 + v7;
  uint64_t v11 = *(void *)(v1 + v8);
  uint64_t v12 = *(void *)(v1 + v9);
  char v13 = *(_BYTE *)(v1 + v9 + 8);
  __int128 v14 = (void *)swift_task_alloc(dword_10007FF9C);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v14;
  *__int128 v14 = v2;
  v14[1] = sub_10001D0F0;
  return sub_10003C018(a1, v17, v16, v1 + v4, v10, v11, v12, v13);
}

uint64_t sub_100040D60()
{
  return swift_deallocObject(v0, 112LL, 7LL);
}

uint64_t sub_100040DA4()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v4 = *(unsigned __int8 *)(v0 + 88);
  uint64_t v5 = *(unsigned __int8 *)(v0 + 89);
  uint64_t v6 = *(unsigned __int8 *)(v0 + 90);
  uint64_t v7 = swift_task_alloc(dword_10007FFAC);
  __int128 v8 = *(_OWORD *)(v0 + 96);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  *(void *)uint64_t v7 = v1;
  *(void *)(v7 + 8) = sub_10001D0F0;
  *(_OWORD *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = v8;
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100080760
                                                                                     + dword_100080760);
  unint64_t v9 = (uint64_t *)swift_task_alloc(unk_100080764);
  *(void *)(v7 + 32) = v9;
  uint64_t *v9 = v7;
  v9[1] = (uint64_t)sub_100039FD4;
  return v11(v2, v0 + 40, v3, v4, v5, v6);
}

uint64_t sub_100040E70()
{
  return swift_deallocObject(v0, 96LL, 7LL);
}

uint64_t sub_100040EAC()
{
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v3 = swift_task_alloc(dword_10007FFBC);
  __int128 v4 = *(_OWORD *)(v0 + 80);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_10001D0F0;
  *(_OWORD *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10007F920 + dword_10007F920);
  uint64_t v5 = (uint64_t *)swift_task_alloc(unk_10007F924);
  *(void *)(v3 + 32) = v5;
  uint64_t *v5 = v3;
  v5[1] = (uint64_t)sub_100039FD4;
  return v7(v0 + 32, v2);
}

uint64_t sub_100040F4C()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = swift_task_alloc(dword_10007FFCC);
  __int128 v4 = *(_OWORD *)(v0 + 80);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_10001D0F0;
  *(_OWORD *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10007F480 + dword_10007F480);
  uint64_t v5 = (uint64_t *)swift_task_alloc(unk_10007F484);
  *(void *)(v3 + 32) = v5;
  uint64_t *v5 = v3;
  v5[1] = (uint64_t)sub_100039FD4;
  return v7(v2, v0 + 40);
}

void sub_100040FE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_100040FF0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, uint64_t))(v1 + 16))(0LL, 0LL, a1);
}

uint64_t sub_10004101C()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_100041050()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v4 = swift_task_alloc(dword_10007FFE4);
  __int128 v5 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = sub_10001D0F0;
  *(void *)(v4 + 32) = v2;
  *(void *)(v4 + 40) = v3;
  *(_OWORD *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  return swift_task_switch(sub_10003ACDC, 0LL, 0LL);
}

uint64_t sub_1000410C0()
{
  uint64_t v1 = type metadata accessor for Date(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v13 = v3 | v8 | 7;
  unint64_t v10 = (((*(void *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  swift_release(*(void *)(v0 + v10));
  swift_release(*(void *)(v0 + v11 + 8));
  return swift_deallocObject(v0, v11 + 16, v13);
}

uint64_t sub_1000411B8()
{
  uint64_t v2 = *(void *)(type metadata accessor for Date(0LL) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  uint64_t v5 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v6 = (v3 + v4 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v9 = (v8 + 15) & 0xFFFFFFFFFFFFF8LL;
  uint64_t v10 = v0 + v6;
  uint64_t v11 = *(void *)(v0 + v7);
  uint64_t v12 = *(void *)(v0 + v8);
  uint64_t v13 = swift_task_alloc(dword_10007FFF4);
  __int128 v14 = *(_OWORD *)(v0 + v9);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v13;
  *(void *)uint64_t v13 = v1;
  *(void *)(v13 + 8) = sub_10001D0F0;
  *(_OWORD *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = v14;
  uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char, char))((char *)&dword_10007F828
                                                                               + dword_10007F828);
  uint64_t v15 = (uint64_t *)swift_task_alloc(unk_10007F82C);
  *(void *)(v13 + 32) = v15;
  *uint64_t v15 = v13;
  v15[1] = (uint64_t)sub_100039FD4;
  return v17(v0 + v3, v10, v11, v12, 0, 0);
}

uint64_t sub_1000412D0()
{
  return swift_deallocObject(v0, 104LL, 7LL);
}

uint64_t sub_100041314()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v4 = swift_task_alloc(dword_100080004);
  __int128 v5 = *(_OWORD *)(v0 + 88);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = sub_10001D0F0;
  *(_OWORD *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  unint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char, char))((char *)&dword_100080350 + dword_100080350);
  unint64_t v6 = (uint64_t *)swift_task_alloc(unk_100080354);
  *(void *)(v4 + 32) = v6;
  *unint64_t v6 = v4;
  v6[1] = (uint64_t)sub_100039FD4;
  return v8(v2, v0 + 40, v3, 0, 0);
}

uint64_t sub_1000413C8()
{
  return swift_deallocObject(v0, 96LL, 7LL);
}

uint64_t sub_100041404()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = swift_task_alloc(dword_100080014);
  __int128 v4 = *(_OWORD *)(v0 + 80);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_10001D0F0;
  *(_OWORD *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  unint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10007F480 + dword_10007F480);
  __int128 v5 = (uint64_t *)swift_task_alloc(unk_10007F484);
  *(void *)(v3 + 32) = v5;
  uint64_t *v5 = v3;
  v5[1] = (uint64_t)sub_100039A74;
  return v7(v2, v0 + 40);
}

void *sub_1000414A0(void *result, uint64_t a2)
{
  if (result)
  {
    id v3 = result;
    return (void *)swift_retain(a2);
  }

  return result;
}

uint64_t sub_1000414D0(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRetain(a2);
}

uint64_t destroy for XPCServerProxy.ConnectionError(uint64_t *a1)
{
  return sub_1000414E8(*a1, a1[1]);
}

uint64_t sub_1000414E8(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(a2);
}

uint64_t _s11homeeventsd14XPCServerProxyC15ConnectionErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_1000414D0(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for XPCServerProxy.ConnectionError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_1000414D0(*(void *)a2, v4);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  sub_1000414E8(v6, v7);
  return a1;
}

uint64_t assignWithTake for XPCServerProxy.ConnectionError(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  sub_1000414E8(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for XPCServerProxy.ConnectionError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for XPCServerProxy.ConnectionError( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
    *(void *)uint64_t result = a2 - 255;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 1_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 7) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 1_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 7) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_10004165C(uint64_t result, char a2)
{
  *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for XPCServerProxy.ConnectionError()
{
  return &type metadata for XPCServerProxy.ConnectionError;
}

uint64_t sub_100041718(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __int128 v14 = objc_allocWithZone(v5);
  uint64_t v15 = &v14[OBJC_IVAR____TtC11homeeventsd26EventUploadRequestLogEvent_clientName];
  *uint64_t v15 = a1;
  v15[1] = a2;
  *(void *)&v14[OBJC_IVAR____TtC11homeeventsd26EventUploadRequestLogEvent_numEventsToUpload] = a3;
  v14[OBJC_IVAR____TtC11homeeventsd26EventUploadRequestLogEvent_attributedToFakeData] = a4;
  v39.uint64_t receiver = v14;
  v39.Class super_class = v5;
  *(void *)&double v16 = swift_bridgeObjectRetain(a2).n128_u64[0];
  id v17 = objc_msgSendSuper2(&v39, "init", v16);
  type metadata accessor for MetricsManager(0LL);
  uint64_t v18 = static MetricsManager.sharedInstance.getter();
  id v19 = v17;
  MetricsManager.submitLogEvent(_:error:)(v19, 0LL);
  swift_release(v18);

  sub_100041CB0();
  static LoggedObject.logger.getter(v5);
  id v20 = v19;
  unint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
  os_log_type_t v22 = static os_log_type_t.info.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v35 = v11;
    uint64_t v36 = v10;
    BOOL v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v24 = swift_slowAlloc(32LL, -1LL);
    uint64_t v38 = v24;
    *(_DWORD *)BOOL v23 = 136315138;
    unint64_t v25 = sub_1000419F0();
    swift_bridgeObjectRetain(v25);
    char v27 = sub_100025FAC(v26);
    swift_bridgeObjectRelease(v25);
    uint64_t v37 = (uint64_t)v27;
    sub_1000106F8(&v37);
    swift_bridgeObjectRelease(v25);
    uint64_t v28 = v37;
    uint64_t v29 = sub_10000D228((uint64_t *)&unk_10007F190);
    uint64_t v30 = Array.description.getter(v28, v29);
    unint64_t v32 = v31;
    swift_release(v28);
    uint64_t v37 = sub_100046274(v30, v32, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v23 + 4);

    swift_bridgeObjectRelease(v32);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Submitted EventUploadRequestLogEvent: %s", v23, 0xCu);
    swift_arrayDestroy(v24, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1LL, -1LL);
    swift_slowDealloc(v23, -1LL, -1LL);

    return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v13, v36);
  }

  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }

unint64_t sub_1000419F0()
{
  uint64_t v1 = sub_10000D228((uint64_t *)&unk_10007F1A0);
  uint64_t inited = swift_initStackObject(v1, &v8);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100060B70;
  *(void *)(inited + 32) = 0x65757165526D756ELL;
  *(void *)(inited + 40) = 0xEB00000000737473LL;
  *(void *)(inited + 48) = [objc_allocWithZone(NSNumber) initWithInteger:1];
  *(void *)(inited + sub_1000154A8(*(void *)(v0 + 152) + OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_database, v0 + 56) = 0x614E746E65696C63LL;
  *(void *)(inited + 6_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = 0xEA0000000000656DLL;
  uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC11homeeventsd26EventUploadRequestLogEvent_clientName + 8);
  id v4 = objc_allocWithZone(&OBJC_CLASS___NSString);
  swift_bridgeObjectRetain(v3);
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v3);
  id v6 = [v4 initWithString:v5];

  *(void *)(inited + 72) = v6;
  *(void *)(inited + 80) = 0xD000000000000011LL;
  *(void *)(inited + 88) = 0x8000000100063AC0LL;
  *(void *)(inited + 96) = [objc_allocWithZone(NSNumber) initWithInteger:*(void *)(v0 + OBJC_IVAR____TtC11homeeventsd26EventUploadRequestLogEvent_numEventsToUpload)];
  *(void *)(inited + 10_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = 0xD000000000000014LL;
  *(void *)(inited + 112) = 0x8000000100062C00LL;
  *(void *)(inited + 120) = [objc_allocWithZone(NSNumber) initWithBool:*(unsigned __int8 *)(v0 + OBJC_IVAR____TtC11homeeventsd26EventUploadRequestLogEvent_attributedToFakeData)];
  return sub_100058A80(inited);
}

uint64_t type metadata accessor for EventUploadRequestLogEvent()
{
  return objc_opt_self(&OBJC_CLASS____TtC11homeeventsd26EventUploadRequestLogEvent);
}

unint64_t sub_100041CB0()
{
  unint64_t result = qword_1000800C0;
  if (!qword_1000800C0)
  {
    uint64_t v1 = type metadata accessor for EventUploadRequestLogEvent();
    unint64_t result = swift_getWitnessTable(&unk_100061A7C, v1);
    atomic_store(result, (unint64_t *)&qword_1000800C0);
  }

  return result;
}

uint64_t sub_100041CF4()
{
  uint64_t v0 = type metadata accessor for XPCServer();
  sub_10000E6BC();
  return static LoggedObject.logger.getter(v0);
}

void *sub_100041D30(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_10000D228(&qword_1000800D0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = type metadata accessor for PendingEventData(0LL);
  uint64_t v8 = *(void *)(v25 - 8);
  uint64_t v9 = __chkstk_darwin(v25);
  uint64_t v24 = (uint64_t)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v23 = (uint64_t)&v21 - v11;
  uint64_t v12 = *(void *)(a1 + 16);
  if (!v12) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v13 = *(void *)(type metadata accessor for EventRecord.DecodedEvent(0LL) - 8);
  uint64_t v14 = a1 + ((*(unsigned __int8 *)(v13 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  uint64_t v15 = *(void *)(v13 + 72);
  uint64_t v21 = a1;
  swift_bridgeObjectRetain(a1);
  double v16 = _swiftEmptyArrayStorage;
  uint64_t v22 = a2;
  do
  {
    sub_10004DD60(v14, a2, (uint64_t)v7);
    if (v2)
    {
      swift_bridgeObjectRelease(v16);
      swift_bridgeObjectRelease(v21);
      return v16;
    }

    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1LL, v25) == 1)
    {
      sub_10004262C((uint64_t)v7);
    }

    else
    {
      uint64_t v17 = v23;
      sub_100040B04((uint64_t)v7, v23);
      sub_100040B04(v17, v24);
      if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0) {
        double v16 = (void *)sub_10001C3A4(0, v16[2] + 1LL, 1, (unint64_t)v16);
      }
      unint64_t v19 = v16[2];
      unint64_t v18 = v16[3];
      if (v19 >= v18 >> 1) {
        double v16 = (void *)sub_10001C3A4(v18 > 1, v19 + 1, 1, (unint64_t)v16);
      }
      __int128 v16[2] = v19 + 1;
      sub_100040B04( v24,  (uint64_t)v16 + ((*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
      + *(void *)(v8 + 72) * v19);
      a2 = v22;
    }

    v14 += v15;
    --v12;
  }

  while (v12);
  swift_bridgeObjectRelease(v21);
  return v16;
}

uint64_t sub_100041F74(uint64_t a1, uint64_t a2, char a3, char a4)
{
  *(_BYTE *)(v4 + 121) = a4;
  *(_BYTE *)(v4 + 120) = a3;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  *(void *)(v4 + 2_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = a2;
  uint64_t v5 = type metadata accessor for Logger(0LL);
  *(void *)(v4 + 32) = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  *(void *)(v4 + 40) = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v4 + 48) = swift_task_alloc(v7);
  *(void *)(v4 + sub_1000154A8(*(void *)(v0 + 152) + OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_database, v0 + 56) = swift_task_alloc(v7);
  *(void *)(v4 + 6_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = swift_task_alloc(v7);
  return swift_task_switch(sub_100041FF8, 0LL, 0LL);
}

uint64_t sub_100041FF8()
{
  if (*(_BYTE *)(v0 + 120) == 1)
  {
    uint64_t v1 = type metadata accessor for XPCServer();
    sub_10000E6BC();
    uint64_t v2 = static LoggedObject.logger.getter(v1);
    uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
    os_log_type_t v4 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Asked to upload only, skipping local database save", v5, 2u);
      swift_slowDealloc(v5, -1LL, -1LL);
    }

    uint64_t v6 = *(void *)(v0 + 64);
    uint64_t v7 = *(void *)(v0 + 32);
    uint64_t v8 = *(void *)(v0 + 40);
    uint64_t v9 = *(void *)(v0 + 24);

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    return swift_task_switch(sub_100042138, v9, 0LL);
  }

  else
  {
    uint64_t v11 = (void *)swift_task_alloc(dword_10007F804);
    *(void *)(v0 + 10_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = v11;
    void *v11 = v0;
    v11[1] = sub_100042358;
    return sub_100021DD8(*(void *)(v0 + 16));
  }

uint64_t sub_100042138()
{
  uint64_t result = *(void *)(*(void *)(v0 + 24) + 208LL);
  *(void *)(v0 + 72) = result;
  if (result)
  {
    swift_retain(result);
    return swift_task_switch(sub_100042184, 0LL, 0LL);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100042184()
{
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[2];
  swift_retain(v1);
  uint64_t v3 = sub_100041D30(v2, v1);
  v0[10] = v3;
  swift_release(v1);
  os_log_type_t v4 = (void *)swift_task_alloc(dword_100080494);
  v0[11] = v4;
  *os_log_type_t v4 = v0;
  v4[1] = sub_100042204;
  return sub_10004DDEC((uint64_t)v3);
}

uint64_t sub_100042204()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 88LL);
  *(void *)(*(void *)v1 + 96LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_1000422C0;
  }
  else {
    uint64_t v3 = sub_100042268;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_100042268()
{
  uint64_t v1 = *(void *)(v0 + 72);
  swift_bridgeObjectRelease(*(void *)(v0 + 80));
  swift_release(v1);
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 48);
  swift_task_dealloc(*(void *)(v0 + 64));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000422C0()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRelease(*(void *)(v0 + 80));
  return swift_task_switch(sub_100042300, v1, 0LL);
}

uint64_t sub_100042300()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 48);
  swift_task_dealloc(*(void *)(v0 + 64));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100042358()
{
  uint64_t v2 = *(void *)(*v1 + 104);
  uint64_t v3 = *v1;
  *(void *)(v3 + 112) = v0;
  swift_task_dealloc(v2);
  if (!v0) {
    return swift_task_switch(sub_1000423EC, 0LL, 0LL);
  }
  uint64_t v4 = *(void *)(v3 + 56);
  uint64_t v5 = *(void *)(v3 + 48);
  swift_task_dealloc(*(void *)(v3 + 64));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1000423EC()
{
  int v1 = *(unsigned __int8 *)(v0 + 121);
  uint64_t v2 = type metadata accessor for XPCServer();
  sub_10000E6BC();
  if (v1 == 1)
  {
    uint64_t v3 = static LoggedObject.logger.getter(v2);
    uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
    os_log_type_t v5 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Asked to save only, skipping cloud upload request", v6, 2u);
      swift_slowDealloc(v6, -1LL, -1LL);
    }

    uint64_t v7 = *(void *)(v0 + 56);
    uint64_t v8 = *(void *)(v0 + 32);
    uint64_t v9 = *(void *)(v0 + 40);

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    uint64_t v10 = *(void *)(v0 + 56);
    uint64_t v11 = *(void *)(v0 + 48);
    swift_task_dealloc(*(void *)(v0 + 64));
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v13 = static LoggedObject.logger.getter(v2);
    uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
    os_log_type_t v15 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v14, v15))
    {
      double v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)double v16 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  v15,  "Requesting background upload of events to CloudKit database",  v16,  2u);
      swift_slowDealloc(v16, -1LL, -1LL);
    }

    uint64_t v18 = *(void *)(v0 + 40);
    uint64_t v17 = *(void *)(v0 + 48);
    uint64_t v20 = *(void *)(v0 + 24);
    uint64_t v19 = *(void *)(v0 + 32);

    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
    return swift_task_switch(sub_1000425BC, v20, 0LL);
  }

uint64_t sub_1000425BC()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 48);
  swift_task_dealloc(*(void *)(v0 + 64));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004262C(uint64_t a1)
{
  uint64_t v2 = sub_10000D228(&qword_1000800D0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for SharedHandlers()
{
  return &type metadata for SharedHandlers;
}

void *sub_10004267C(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
    sub_10002CC90(0, v1, 0);
    uint64_t v4 = (uint64_t *)(a1 + 32);
    uint64_t v2 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v9 = *v4;
      uint64_t v5 = sub_10000D228(&qword_1000800D8);
      swift_dynamicCast(v10, &v9, v5, (char *)&type metadata for Any + 8, 7LL);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_10002CC90(0, v2[2] + 1LL, 1);
        uint64_t v2 = v11;
      }

      unint64_t v7 = v2[2];
      unint64_t v6 = v2[3];
      if (v7 >= v6 >> 1)
      {
        sub_10002CC90(v6 > 1, v7 + 1, 1);
        uint64_t v2 = v11;
      }

      v2[2] = v7 + 1;
      sub_10003FEB4(v10, &v2[4 * v7 + 4]);
      ++v4;
      --v1;
    }

    while (v1);
  }

  return v2;
}

void sub_1000427A4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = sub_10004267C(a1);
  id v9 = objc_allocWithZone(&OBJC_CLASS___NSSet);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v8);
  id v11 = [v9 initWithArray:isa];

  uint64_t v14 = 0LL;
  static Set._forceBridgeFromObjectiveC(_:result:)( v11,  &v14,  &type metadata for AnyHashable,  &protocol witness table for AnyHashable);
  uint64_t v12 = v14;
  if (v14)
  {

    Class v13 = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v12);
    [v4 setClasses:v13 forSelector:a2 argumentIndex:a3 ofReply:a4 & 1];
  }

  else
  {
    __break(1u);
  }

uint64_t sub_1000428B4(uint64_t a1)
{
  uint64_t v52 = a1;
  uint64_t v50 = *v1;
  uint64_t v47 = type metadata accessor for URL(0LL);
  uint64_t v2 = *(void *)(v47 - 8);
  uint64_t v49 = *(void *)(v2 + 64);
  __chkstk_darwin(v47);
  uint64_t v48 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_10000D228(&qword_10007EE68);
  __chkstk_darwin(v4);
  uint64_t v53 = (uint64_t)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_10000D228(&qword_100080280);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_10000D228(&qword_10007F580);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v44 = v10;
  uint64_t v46 = v11;
  __chkstk_darwin(v10);
  Class v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v45 = sub_10000D228(&qword_100080288);
  uint64_t v42 = *(void *)(v45 - 8);
  uint64_t v14 = *(void *)(v42 + 64);
  uint64_t v15 = __chkstk_darwin(v45);
  uint64_t v41 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v40 - v16;
  uint64_t v18 = type metadata accessor for AsyncFileOutputStream.InternalStreamElement(0LL);
  (*(void (**)(char *, void, uint64_t))(v7 + 104))( v9,  enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:),  v6);
  __int128 v40 = v17;
  int64_t v43 = v13;
  static AsyncStream.makeStream(of:bufferingPolicy:)(v17, v13, v18, v9, v18);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v20 = v51;
  uint64_t v19 = v52;
  uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  uint64_t v22 = v47;
  v21(v51 + OBJC_IVAR____TtC11homeeventsd21AsyncFileOutputStream_url, v52, v47);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 16))( v20 + OBJC_IVAR____TtC11homeeventsd21AsyncFileOutputStream_pipe,  v13,  v10);
  uint64_t v23 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56LL))(v53, 1LL, 1LL, v23);
  uint64_t v24 = v48;
  uint64_t v25 = v22;
  v21((uint64_t)v48, v19, v22);
  char v27 = v41;
  uint64_t v26 = v42;
  uint64_t v28 = v17;
  uint64_t v29 = v45;
  (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v41, v28, v45);
  uint64_t v30 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v31 = v2;
  uint64_t v32 = (v30 + 32) & ~v30;
  uint64_t v33 = *(unsigned __int8 *)(v26 + 80);
  uint64_t v34 = v26;
  uint64_t v35 = (v49 + v33 + v32) & ~v33;
  unint64_t v36 = (v14 + v35 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v37 = swift_allocObject(&unk_100077728, v36 + 8, v30 | v33 | 7);
  *(void *)(v37 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
  *(void *)(v37 + 2_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = 0LL;
  (*(void (**)(uint64_t, char *, uint64_t))(v31 + 32))(v37 + v32, v24, v25);
  (*(void (**)(uint64_t, char *, uint64_t))(v34 + 32))(v37 + v35, v27, v29);
  *(void *)(v37 + v36) = v50;
  uint64_t v38 = sub_10005DBB4(v53, (uint64_t)&unk_100080298, v37);
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v52, v25);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v43, v44);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v40, v29);
  uint64_t result = v51;
  *(void *)(v51 + OBJC_IVAR____TtC11homeeventsd21AsyncFileOutputStream_task) = v38;
  return result;
}

uint64_t sub_100042C28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = (void *)swift_task_alloc(dword_1000802A4);
  *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = v8;
  *uint64_t v8 = v5;
  v8[1] = sub_10001D0F0;
  return sub_100042C88(a4, a5);
}

uint64_t sub_100042C88(uint64_t a1, uint64_t a2)
{
  v3[18] = a2;
  v3[19] = v2;
  v3[17] = a1;
  unint64_t v4 = (*(void *)(*(void *)(sub_10000D228(&qword_1000801C8) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[20] = swift_task_alloc(v4);
  v3[21] = swift_task_alloc(v4);
  v3[22] = swift_task_alloc(v4);
  uint64_t v5 = sub_10000D228(&qword_1000801C0);
  v3[23] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[24] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[25] = swift_task_alloc(v7);
  v3[26] = swift_task_alloc(v7);
  v3[27] = swift_task_alloc(v7);
  uint64_t v8 = type metadata accessor for URL(0LL);
  v3[28] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v3[29] = v9;
  unint64_t v10 = (*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[30] = swift_task_alloc(v10);
  v3[31] = swift_task_alloc(v10);
  v3[32] = swift_task_alloc(v10);
  v3[33] = swift_task_alloc(v10);
  v3[34] = swift_task_alloc(v10);
  v3[35] = swift_task_alloc(v10);
  v3[36] = swift_task_alloc(v10);
  v3[37] = swift_task_alloc(v10);
  uint64_t v11 = type metadata accessor for Logger(0LL);
  v3[38] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v3[39] = v12;
  unint64_t v13 = (*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[40] = swift_task_alloc(v13);
  v3[41] = swift_task_alloc(v13);
  v3[42] = swift_task_alloc(v13);
  v3[43] = swift_task_alloc(v13);
  v3[44] = swift_task_alloc(v13);
  v3[45] = swift_task_alloc(v13);
  v3[46] = swift_task_alloc(v13);
  uint64_t v14 = type metadata accessor for AsyncFileOutputStream.InternalStreamElement(0LL);
  v3[47] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v3[48] = v15;
  unint64_t v16 = (*(void *)(v15 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[49] = swift_task_alloc(v16);
  v3[50] = swift_task_alloc(v16);
  uint64_t v17 = sub_10000D228(&qword_1000802A8);
  v3[51] = swift_task_alloc((*(void *)(*(void *)(v17 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_10000D228(&qword_1000802B0);
  v3[52] = v18;
  uint64_t v19 = *(void *)(v18 - 8);
  v3[53] = v19;
  v3[54] = swift_task_alloc((*(void *)(v19 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100042EC8, 0LL, 0LL);
}

uint64_t sub_100042EC8()
{
  *(void *)(v0 + 32) = 0LL;
  uint64_t v1 = sub_10000D228(&qword_100080288);
  AsyncStream.makeAsyncIterator()(v1);
  *(_BYTE *)(v0 + 4sub_1000154A8(*(void *)(v0 + 152) + OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_database, v0 + 56) = 1;
  *(void *)(v0 + 440) = 0LL;
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  *(void *)(v0 + 448) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100042F50;
  return AsyncStream.Iterator.next(isolation:)(*(void *)(v0 + 408), 0LL, 0LL, *(void *)(v0 + 416));
}

uint64_t sub_100042F50()
{
  return swift_task_switch(sub_100042FA4, 0LL, 0LL);
}

uint64_t sub_100042FA4()
{
  v259 = (void **)(v0 + 32);
  uint64_t v1 = *(void *)(v0 + 408);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 384) + 48LL))( v1,  1LL,  *(void *)(v0 + 376)) != 1)
  {
    char v2 = *(_BYTE *)(v0 + 456);
    sub_100046A90(v1, *(void *)(v0 + 400));
    if ((v2 & 1) != 0)
    {
      uint64_t v3 = *(void *)(v0 + 136);
      uint64_t v233 = (uint64_t *)(v0 + 128);
      uint64_t v4 = *(void *)(v0 + 296);
      uint64_t v5 = *(void *)(v0 + 224);
      uint64_t v6 = *(void *)(v0 + 232);
      uint64_t v7 = *(void *)(v0 + 152);
      sub_10000D1E8(&qword_100080270, type metadata accessor for AsyncFileOutputStream, (uint64_t)&unk_100061B50);
      static LoggedObject.logger.getter(v7);
      uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
      uint64_t v9 = v8(v4, v3, v5);
      unint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
      os_log_type_t v11 = static os_log_type_t.debug.getter();
      BOOL v12 = os_log_type_enabled(v10, v11);
      uint64_t v13 = *(void *)(v0 + 312);
      uint64_t v237 = *(void *)(v0 + 304);
      uint64_t v245 = *(void *)(v0 + 368);
      uint64_t v14 = *(void *)(v0 + 296);
      uint64_t v15 = *(void *)(v0 + 224);
      uint64_t v16 = *(void *)(v0 + 232);
      uint64_t v230 = v0 + 88;
      uint64_t v248 = v8;
      if (v12)
      {
        uint64_t v17 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v223 = swift_slowAlloc(32LL, -1LL);
        v260[0] = v223;
        *(_DWORD *)uint64_t v17 = 136315138;
        uint64_t v18 = sub_10000D1E8( &qword_10007EEC8,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
        uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter(v15, v18);
        unint64_t v21 = v20;
        *uint64_t v233 = sub_100046274(v19, v20, v260);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v233, v0 + 136, v17 + 4);
        swift_bridgeObjectRelease(v21);
        uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
        v22(v14, v15);
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "Creating '%s'", v17, 0xCu);
        swift_arrayDestroy(v223, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v223, -1LL, -1LL);
        uint64_t v23 = v17;
        uint64_t v8 = v248;
        swift_slowDealloc(v23, -1LL, -1LL);
      }

      else
      {
        uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
        v22(v14, v15);
      }

      uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
      v24(v245, v237);
      id v46 = [(id)objc_opt_self(NSFileManager) defaultManager];
      URL.path.getter();
      uint64_t v48 = v47;
      NSString v49 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v48);
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      unsigned __int8 v51 = [v46 createFileAtPath:v49 contents:isa attributes:0];

      uint64_t v52 = *(void *)(v0 + 224);
      uint64_t v53 = *(void *)(v0 + 152);
      uint64_t v54 = *(void *)(v0 + 136);
      if ((v51 & 1) == 0)
      {
        uint64_t v73 = *(void *)(v0 + 288);
        static LoggedObject.logger.getter(v53);
        uint64_t v74 = v8(v73, v54, v52);
        uint64_t v75 = (os_log_s *)Logger.logObject.getter(v74);
        os_log_type_t v76 = static os_log_type_t.error.getter();
        BOOL v77 = os_log_type_enabled(v75, v76);
        uint64_t v78 = *(void *)(v0 + 360);
        uint64_t v79 = *(void *)(v0 + 304);
        uint64_t v80 = *(void *)(v0 + 288);
        uint64_t v81 = *(void *)(v0 + 224);
        if (v77)
        {
          uint64_t v254 = *(void *)(v0 + 304);
          uint64_t v249 = *(void *)(v0 + 360);
          uint64_t v82 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          int v240 = v22;
          uint64_t v83 = swift_slowAlloc(32LL, -1LL);
          v260[0] = v83;
          *(_DWORD *)uint64_t v82 = 136446210;
          uint64_t v84 = sub_10000D1E8( &qword_10007EEC8,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
          uint64_t v85 = dispatch thunk of CustomStringConvertible.description.getter(v81, v84);
          unint64_t v87 = v86;
          *(void *)(v0 + 80) = sub_100046274(v85, v86, v260);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v230, v82 + 4);
          swift_bridgeObjectRelease(v87);
          v240(v80, v81);
          _os_log_impl((void *)&_mh_execute_header, v75, v76, "Failed to create '%{public}s'", v82, 0xCu);
          swift_arrayDestroy(v83, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v83, -1LL, -1LL);
          swift_slowDealloc(v82, -1LL, -1LL);

          v24(v249, v254);
        }

        else
        {
          v22(*(void *)(v0 + 288), *(void *)(v0 + 224));

          v24(v78, v79);
        }

        uint64_t v112 = *(void *)(v0 + 184);
        uint64_t v113 = *(void *)(v0 + 192);
        uint64_t v114 = *(void *)(v0 + 176);
        sub_100046B18(*(void *)(v0 + 400) + *(int *)(*(void *)(v0 + 376) + 20LL), v114);
        int v115 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v113 + 48))(v114, 1LL, v112);
        uint64_t v117 = *(void *)(v0 + 424);
        uint64_t v116 = *(void *)(v0 + 432);
        uint64_t v118 = *(void *)(v0 + 416);
        uint64_t v119 = *(void *)(v0 + 400);
        if (v115 != 1)
        {
          uint64_t v121 = *(void *)(v0 + 216);
          uint64_t v122 = *(void *)(v0 + 184);
          uint64_t v123 = *(void *)(v0 + 192);
          (*(void (**)(uint64_t, void, uint64_t))(v123 + 32))(v121, *(void *)(v0 + 176), v122);
          unint64_t v124 = sub_100046BA0();
          uint64_t v125 = swift_allocError(&type metadata for AsyncFileOutputStream.WriteError, v124, 0LL, 0LL);
          *id v126 = 1;
          *(void *)(v0 + 72) = v125;
          CheckedContinuation.resume(throwing:)(v0 + 72, v122);
          (*(void (**)(uint64_t, uint64_t))(v123 + 8))(v121, v122);
          sub_100046224(v119);
          (*(void (**)(uint64_t, uint64_t))(v117 + 8))(v116, v118);
          goto LABEL_42;
        }

        uint64_t v120 = *(void *)(v0 + 176);
        sub_100046224(*(void *)(v0 + 400));
        (*(void (**)(uint64_t, uint64_t))(v117 + 8))(v116, v118);
LABEL_39:
        sub_100046B60(v120);
        goto LABEL_42;
      }

      uint64_t v55 = *(void *)(v0 + 280);
      static LoggedObject.logger.getter(v53);
      uint64_t v56 = v8(v55, v54, v52);
      uint64_t v57 = (os_log_s *)Logger.logObject.getter(v56);
      os_log_type_t v58 = static os_log_type_t.debug.getter();
      BOOL v59 = os_log_type_enabled(v57, v58);
      uint64_t v60 = *(void *)(v0 + 352);
      uint64_t v61 = *(void *)(v0 + 304);
      uint64_t v62 = *(void *)(v0 + 280);
      uint64_t v63 = *(void *)(v0 + 224);
      v246 = (void (*)(os_log_t, uint64_t))v24;
      if (v59)
      {
        uint64_t v239 = *(void *)(v0 + 304);
        int v64 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        os_log_t log = (os_log_t)swift_slowAlloc(32LL, -1LL);
        v260[0] = (uint64_t)log;
        *(_DWORD *)int v64 = 136315138;
        uint64_t v65 = sub_10000D1E8( &qword_10007EEC8,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
        uint64_t v66 = dispatch thunk of CustomStringConvertible.description.getter(v63, v65);
        uint64_t v67 = v22;
        unint64_t v69 = v68;
        *(void *)(v0 + 120) = sub_100046274(v66, v68, v260);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v233, v64 + 4);
        unint64_t v70 = v69;
        uint64_t v22 = v67;
        swift_bridgeObjectRelease(v70);
        v67(v62, v63);
        _os_log_impl((void *)&_mh_execute_header, v57, v58, "Opening '%s'", v64, 0xCu);
        swift_arrayDestroy(log, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(log, -1LL, -1LL);
        swift_slowDealloc(v64, -1LL, -1LL);

        uint64_t v71 = v60;
        uint64_t v72 = v239;
      }

      else
      {
        v22(v62, v63);

        uint64_t v71 = v60;
        uint64_t v72 = v61;
      }

      v24(v71, v72);
      uint64_t v235 = (uint64_t *)(v0 + 112);
      uint64_t v88 = *(void *)(v0 + 440);
      uint64_t v89 = *(void *)(v0 + 272);
      uint64_t v90 = *(void *)(v0 + 224);
      uint64_t v91 = *(void *)(v0 + 136);
      sub_100046BE4();
      v248(v89, v91, v90);
      id v92 = sub_100045F14(v89);
      uint64_t v93 = *(void *)(v0 + 224);
      uint64_t v94 = *(void *)(v0 + 152);
      uint64_t v95 = *(void *)(v0 + 136);
      if (v88)
      {
        uint64_t v241 = v22;
        uint64_t v96 = *(void *)(v0 + 248);
        static LoggedObject.logger.getter(v94);
        v248(v96, v95, v93);
        swift_errorRetain(v88);
        uint64_t v97 = swift_errorRetain(v88);
        char v98 = (os_log_s *)Logger.logObject.getter(v97);
        os_log_type_t v99 = static os_log_type_t.error.getter();
        BOOL v100 = os_log_type_enabled(v98, v99);
        BOOL v101 = *(os_log_s **)(v0 + 328);
        uint64_t v102 = *(void *)(v0 + 304);
        uint64_t v103 = *(void *)(v0 + 248);
        uint64_t v104 = *(void *)(v0 + 224);
        if (v100)
        {
          uint64_t v255 = *(void *)(v0 + 304);
          uint64_t v105 = swift_slowAlloc(22LL, -1LL);
          v224 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
          uint64_t v250 = swift_slowAlloc(32LL, -1LL);
          v260[0] = v250;
          *(_DWORD *)uint64_t v105 = 136446466;
          os_log_t loga = v98;
          uint64_t v106 = sub_10000D1E8( &qword_10007EEC8,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
          uint64_t v107 = dispatch thunk of CustomStringConvertible.description.getter(v104, v106);
          os_log_t v227 = v101;
          unint64_t v109 = v108;
          *(void *)(v0 + 96) = sub_100046274(v107, v108, v260);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v105 + 4);
          swift_bridgeObjectRelease(v109);
          v241(v103, v104);
          *(_WORD *)(v105 + 12) = 2114;
          swift_errorRetain(v88);
          uint64_t v110 = _swift_stdlib_bridgeErrorToNSError(v88);
          *(void *)(v0 + 10_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = v110;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v235, v105 + 14);
          uint64_t *v224 = v110;
          swift_errorRelease(v88);
          swift_errorRelease(v88);
          _os_log_impl( (void *)&_mh_execute_header,  loga,  v99,  "Failed to open file handle for '%{public}s': %{public}@",  (uint8_t *)v105,  0x16u);
          uint64_t v111 = sub_10000D228(&qword_10007EE38);
          swift_arrayDestroy(v224, 1LL, v111);
          swift_slowDealloc(v224, -1LL, -1LL);
          swift_arrayDestroy(v250, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v250, -1LL, -1LL);
          swift_slowDealloc(v105, -1LL, -1LL);

          v246(v227, v255);
        }

        else
        {
          v241(*(void *)(v0 + 248), *(void *)(v0 + 224));
          swift_errorRelease(v88);
          swift_errorRelease(v88);

          v24((uint64_t)v101, v102);
        }

        uint64_t v145 = *(void *)(v0 + 184);
        uint64_t v146 = *(void *)(v0 + 192);
        uint64_t v147 = *(void *)(v0 + 168);
        sub_100046B18(*(void *)(v0 + 400) + *(int *)(*(void *)(v0 + 376) + 20LL), v147);
        int v148 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v146 + 48))(v147, 1LL, v145);
        uint64_t v150 = *(void *)(v0 + 424);
        uint64_t v149 = *(void *)(v0 + 432);
        uint64_t v151 = *(void *)(v0 + 416);
        uint64_t v152 = *(void *)(v0 + 400);
        if (v148 == 1)
        {
          uint64_t v120 = *(void *)(v0 + 168);
          swift_errorRelease(v88);
          sub_100046224(v152);
          uint64_t v153 = *(void (**)(uint64_t, uint64_t))(v150 + 8);
LABEL_38:
          v153(v149, v151);
          goto LABEL_39;
        }

        uint64_t v154 = *(void *)(v0 + 208);
        uint64_t v155 = *(void *)(v0 + 184);
        uint64_t v156 = *(void *)(v0 + 192);
        (*(void (**)(uint64_t, void, uint64_t))(v156 + 32))(v154, *(void *)(v0 + 168), v155);
        unint64_t v157 = sub_100046BA0();
        uint64_t v158 = swift_allocError(&type metadata for AsyncFileOutputStream.WriteError, v157, 0LL, 0LL);
        *unint64_t v159 = 2;
        *(void *)(v0 + 88) = v158;
        CheckedContinuation.resume(throwing:)(v230, v155);
        swift_errorRelease(v88);
        (*(void (**)(uint64_t, uint64_t))(v156 + 8))(v154, v155);
        sub_100046224(v152);
        uint64_t v160 = *(void (**)(uint64_t, uint64_t))(v150 + 8);
        goto LABEL_41;
      }

      id v127 = v92;
      uint64_t v128 = *(void *)(v0 + 264);

      *(void *)(v0 + 32) = v127;
      static LoggedObject.logger.getter(v94);
      uint64_t v129 = v248(v128, v95, v93);
      uint64_t v130 = (os_log_s *)Logger.logObject.getter(v129);
      os_log_type_t v131 = static os_log_type_t.info.getter(v130);
      BOOL v132 = os_log_type_enabled(v130, v131);
      uint64_t v133 = *(os_log_s **)(v0 + 344);
      uint64_t v134 = *(void *)(v0 + 304);
      uint64_t v135 = *(void *)(v0 + 264);
      uint64_t v136 = *(void *)(v0 + 224);
      if (v132)
      {
        __int128 v256 = *(os_log_s **)(v0 + 344);
        uint64_t v137 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        os_log_t v242 = v22;
        uint64_t v138 = swift_slowAlloc(32LL, -1LL);
        v260[0] = v138;
        *(_DWORD *)uint64_t v137 = 136446210;
        uint64_t v139 = sub_10000D1E8( &qword_10007EEC8,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
        uint64_t v140 = dispatch thunk of CustomStringConvertible.description.getter(v136, v139);
        uint64_t v251 = v134;
        unint64_t v142 = v141;
        *uint64_t v235 = sub_100046274(v140, v141, v260);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v235, v0 + 120, v137 + 4);
        swift_bridgeObjectRelease(v142);
        v242(v135, v136);
        _os_log_impl((void *)&_mh_execute_header, v130, v131, "Created '%{public}s'", v137, 0xCu);
        swift_arrayDestroy(v138, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v138, -1LL, -1LL);
        swift_slowDealloc(v137, -1LL, -1LL);

        uint64_t v143 = v256;
        uint64_t v144 = v251;
      }

      else
      {
        v22(*(void *)(v0 + 264), *(void *)(v0 + 224));

        uint64_t v143 = v133;
        uint64_t v144 = v134;
      }

      v246(v143, v144);
      uint64_t v253 = 0LL;
    }

    else
    {
      uint64_t v253 = *(void *)(v0 + 440);
    }

    uint64_t v26 = *(void *)(v0 + 392);
    uint64_t v25 = *(void *)(v0 + 400);
    uint64_t v27 = *(void *)(v0 + 256);
    uint64_t v29 = *(void *)(v0 + 224);
    uint64_t v28 = *(void *)(v0 + 232);
    uint64_t v30 = *(void *)(v0 + 152);
    uint64_t v31 = *(void *)(v0 + 136);
    sub_10000D1E8(&qword_100080270, type metadata accessor for AsyncFileOutputStream, (uint64_t)&unk_100061B50);
    static LoggedObject.logger.getter(v30);
    sub_1000468B4(v25, v26);
    uint64_t v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 16);
    uint64_t v33 = v32(v27, v31, v29);
    uint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
    os_log_type_t v35 = static os_log_type_t.debug.getter();
    BOOL v36 = os_log_type_enabled(v34, v35);
    uint64_t v37 = *(void *)(v0 + 392);
    id v238 = (void (*)(uint64_t, uint64_t, uint64_t))v32;
    if (v36)
    {
      uint64_t v38 = (_DWORD *)swift_slowAlloc(22LL, -1LL);
      *(void *)(v0 + 6_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = swift_slowAlloc(32LL, -1LL);
      *uint64_t v38 = 134218242;
      __asm { BR              X12 }
    }

    uint64_t v39 = *(void *)(v0 + 336);
    uint64_t v40 = *(void *)(v0 + 304);
    uint64_t v41 = *(void *)(v0 + 312);
    uint64_t v42 = *(void *)(v0 + 256);
    uint64_t v43 = *(void *)(v0 + 224);
    uint64_t v44 = *(void *)(v0 + 232);
    sub_100046224(v37);
    os_log_t v234 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
    v234(v42, v43);

    uint64_t v45 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
    v45(v39, v40);
    uint64_t v161 = *v259;
    if (!*v259)
    {
      __break(1u);
      JUMPOUT(0x1000443FCLL);
    }

    uint64_t v162 = *(uint64_t **)(v0 + 400);
    uint64_t v163 = *v162;
    unint64_t v164 = v162[1];
    *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = *v162;
    *(void *)(v0 + 2_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = v164;
    id v165 = v161;
    sub_100012154(v163, v164);
    unint64_t v166 = sub_100046AD4();
    uint64_t v167 = v253;
    NSFileHandle.write<A>(contentsOf:)(v0 + 16, &type metadata for Data, v166);
    if (!v253)
    {
      uint64_t v189 = *(void *)(v0 + 400);

      sub_10000D620(v163, v164);
      sub_100046224(v189);
      *(_BYTE *)(v0 + 4sub_1000154A8(*(void *)(v0 + 152) + OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_database, v0 + 56) = 0;
      *(void *)(v0 + 440) = 0LL;
      id v190 = (void *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
      *(void *)(v0 + 448) = v190;
      *id v190 = v0;
      v190[1] = sub_100042F50;
      return AsyncStream.Iterator.next(isolation:)(*(void *)(v0 + 408), 0LL, 0LL, *(void *)(v0 + 416));
    }

    unint64_t v257 = v45;
    uint64_t v168 = *(void *)(v0 + 240);
    uint64_t v169 = *(void *)(v0 + 224);
    uint64_t v170 = *(void *)(v0 + 152);
    uint64_t v171 = *(void *)(v0 + 136);
    sub_10000D620(v163, v164);

    static LoggedObject.logger.getter(v170);
    v238(v168, v171, v169);
    swift_errorRetain(v167);
    uint64_t v172 = swift_errorRetain(v167);
    uint64_t v173 = (os_log_s *)Logger.logObject.getter(v172);
    os_log_type_t v174 = static os_log_type_t.error.getter();
    BOOL v175 = os_log_type_enabled(v173, v174);
    uint64_t v176 = *(void *)(v0 + 320);
    uint64_t v177 = *(void *)(v0 + 304);
    uint64_t v178 = *(void *)(v0 + 240);
    uint64_t v179 = *(void *)(v0 + 224);
    if (v175)
    {
      id v228 = v173;
      uint64_t v180 = swift_slowAlloc(22LL, -1LL);
      v225 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v231 = swift_slowAlloc(32LL, -1LL);
      v260[0] = v231;
      *(_DWORD *)uint64_t v180 = 136446466;
      uint64_t v181 = sub_10000D1E8( &qword_10007EEC8,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      uint64_t v182 = dispatch thunk of CustomStringConvertible.description.getter(v179, v181);
      uint64_t v243 = v177;
      unint64_t v184 = v183;
      *(void *)(v0 + 48) = sub_100046274(v182, v183, v260);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v180 + 4);
      swift_bridgeObjectRelease(v184);
      v234(v178, v179);
      *(_WORD *)(v180 + 12) = 2114;
      swift_errorRetain(v167);
      uint64_t v185 = _swift_stdlib_bridgeErrorToNSError(v167);
      *(void *)(v0 + sub_1000154A8(*(void *)(v0 + 152) + OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_database, v0 + 56) = v185;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v180 + 14);
      uint64_t *v225 = v185;
      swift_errorRelease(v167);
      swift_errorRelease(v167);
      _os_log_impl( (void *)&_mh_execute_header,  v228,  v174,  "Failed to write to '%{public}s': %{public}@",  (uint8_t *)v180,  0x16u);
      uint64_t v186 = sub_10000D228(&qword_10007EE38);
      swift_arrayDestroy(v225, 1LL, v186);
      swift_slowDealloc(v225, -1LL, -1LL);
      swift_arrayDestroy(v231, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v231, -1LL, -1LL);
      swift_slowDealloc(v180, -1LL, -1LL);

      uint64_t v188 = v243;
      uint64_t v187 = v176;
    }

    else
    {
      v234(*(void *)(v0 + 240), *(void *)(v0 + 224));
      swift_errorRelease(v167);
      swift_errorRelease(v167);

      uint64_t v187 = v176;
      uint64_t v188 = v177;
    }

    v257(v187, v188);
    uint64_t v192 = *(void *)(v0 + 184);
    uint64_t v193 = *(void *)(v0 + 192);
    uint64_t v194 = *(void *)(v0 + 160);
    sub_100046B18(*(void *)(v0 + 400) + *(int *)(*(void *)(v0 + 376) + 20LL), v194);
    int v195 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v193 + 48))(v194, 1LL, v192);
    uint64_t v196 = *(void *)(v0 + 424);
    uint64_t v149 = *(void *)(v0 + 432);
    uint64_t v151 = *(void *)(v0 + 416);
    uint64_t v197 = *(void *)(v0 + 400);
    if (v195 == 1)
    {
      uint64_t v120 = *(void *)(v0 + 160);
      swift_errorRelease(v167);
      sub_100046224(v197);
      uint64_t v153 = *(void (**)(uint64_t, uint64_t))(v196 + 8);
      goto LABEL_38;
    }

    uint64_t v199 = *(void *)(v0 + 192);
    uint64_t v198 = *(void *)(v0 + 200);
    uint64_t v200 = *(void *)(v0 + 184);
    (*(void (**)(uint64_t, void, uint64_t))(v199 + 32))(v198, *(void *)(v0 + 160), v200);
    unint64_t v201 = sub_100046BA0();
    uint64_t v202 = swift_allocError(&type metadata for AsyncFileOutputStream.WriteError, v201, 0LL, 0LL);
    *uint64_t v203 = 3;
    *(void *)(v0 + 40) = v202;
    CheckedContinuation.resume(throwing:)(v0 + 40, v200);
    swift_errorRelease(v167);
    (*(void (**)(uint64_t, uint64_t))(v199 + 8))(v198, v200);
    sub_100046224(v197);
    uint64_t v160 = *(void (**)(uint64_t, uint64_t))(v196 + 8);
LABEL_41:
    v160(v149, v151);
    goto LABEL_42;
  }

  (*(void (**)(void, void))(*(void *)(v0 + 424) + 8LL))(*(void *)(v0 + 432), *(void *)(v0 + 416));
LABEL_42:
  uint64_t v204 = *(void *)(v0 + 432);
  uint64_t v206 = *(void *)(v0 + 400);
  uint64_t v205 = *(void *)(v0 + 408);
  uint64_t v207 = *(void *)(v0 + 392);
  uint64_t v209 = *(void *)(v0 + 360);
  uint64_t v208 = *(void *)(v0 + 368);
  uint64_t v211 = *(void *)(v0 + 344);
  uint64_t v210 = *(void *)(v0 + 352);
  uint64_t v212 = *(void *)(v0 + 336);
  uint64_t v213 = *(void *)(v0 + 328);
  uint64_t v214 = *(void *)(v0 + 320);
  uint64_t v215 = *(void *)(v0 + 296);
  uint64_t v216 = *(void *)(v0 + 288);
  uint64_t v217 = *(void *)(v0 + 280);
  uint64_t v218 = *(void *)(v0 + 272);
  uint64_t v219 = *(void *)(v0 + 264);
  os_log_t logb = *(os_log_t *)(v0 + 256);
  uint64_t v226 = *(void *)(v0 + 248);
  os_log_t v229 = *(os_log_t *)(v0 + 240);
  uint64_t v232 = *(void *)(v0 + 216);
  uint64_t v236 = *(void *)(v0 + 208);
  uint64_t v244 = *(void *)(v0 + 200);
  uint64_t v247 = *(void *)(v0 + 176);
  uint64_t v252 = *(void *)(v0 + 168);
  uint64_t v258 = *(void *)(v0 + 160);
  sub_1000455A4(v259, *(void (**)(char *, uint64_t))(v0 + 136), *(void *)(v0 + 152));

  swift_task_dealloc(v204);
  swift_task_dealloc(v205);
  swift_task_dealloc(v206);
  swift_task_dealloc(v207);
  swift_task_dealloc(v208);
  swift_task_dealloc(v209);
  swift_task_dealloc(v210);
  swift_task_dealloc(v211);
  swift_task_dealloc(v212);
  swift_task_dealloc(v213);
  swift_task_dealloc(v214);
  swift_task_dealloc(v215);
  swift_task_dealloc(v216);
  swift_task_dealloc(v217);
  swift_task_dealloc(v218);
  swift_task_dealloc(v219);
  swift_task_dealloc(logb);
  swift_task_dealloc(v226);
  swift_task_dealloc(v229);
  swift_task_dealloc(v232);
  swift_task_dealloc(v236);
  swift_task_dealloc(v244);
  swift_task_dealloc(v247);
  swift_task_dealloc(v252);
  swift_task_dealloc(v258);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004440C()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + OBJC_IVAR____TtC11homeeventsd21AsyncFileOutputStream_pipe;
  uint64_t v3 = sub_10000D228(&qword_10007F580);
  AsyncStream.Continuation.finish()();
  uint64_t v4 = v1 + OBJC_IVAR____TtC11homeeventsd21AsyncFileOutputStream_url;
  uint64_t v5 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(v2, v3);
  swift_release(*(void *)(v1 + OBJC_IVAR____TtC11homeeventsd21AsyncFileOutputStream_task));
  return swift_deallocClassInstance( v1,  *(unsigned int *)(*(void *)v1 + 48LL),  *(unsigned __int16 *)(*(void *)v1 + 52LL));
}

uint64_t sub_1000444AC()
{
  return type metadata accessor for AsyncFileOutputStream(0LL);
}

uint64_t type metadata accessor for AsyncFileOutputStream(uint64_t a1)
{
  return sub_1000289C4(a1, (uint64_t *)&unk_100080120, (uint64_t)&nominal type descriptor for AsyncFileOutputStream);
}

void sub_1000444C8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    v6[0] = *(void *)(v2 - 8) + 64LL;
    sub_10004455C(319LL);
    if (v5 <= 0x3F)
    {
      v6[1] = *(void *)(v4 - 8) + 64LL;
      v6[2] = (char *)&value witness table for Builtin.NativeObject + 64;
      swift_updateClassMetadata2(a1, 256LL, 3LL, v6, a1 + 80);
    }
  }

void sub_10004455C(uint64_t a1)
{
  if (!qword_100080130)
  {
    uint64_t v2 = type metadata accessor for AsyncFileOutputStream.InternalStreamElement(255LL);
    unint64_t v3 = type metadata accessor for AsyncStream.Continuation(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_100080130);
    }
  }

uint64_t type metadata accessor for AsyncFileOutputStream.InternalStreamElement(uint64_t a1)
{
  return sub_1000289C4( a1,  (uint64_t *)&unk_100080228,  (uint64_t)&nominal type descriptor for AsyncFileOutputStream.InternalStreamElement);
}

uint64_t *sub_1000445C4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v15);
  }

  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_100012154(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = *(int *)(a3 + 20);
    unint64_t v10 = (char *)a1 + v9;
    os_log_type_t v11 = (char *)a2 + v9;
    uint64_t v12 = sub_10000D228(&qword_1000801C0);
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12))
    {
      uint64_t v14 = sub_10000D228(&qword_1000801C8);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0LL, 1LL, v12);
    }
  }

  return a1;
}

uint64_t sub_1000446C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = sub_10000D228(&qword_1000801C0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1LL, v5);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  return result;
}

uint64_t *sub_100044748(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_100012154(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  unint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = sub_10000D228(&qword_1000801C0);
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = sub_10000D228(&qword_1000801C8);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  return a1;
}

uint64_t *sub_10004481C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_100012154(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10000D620(v8, v9);
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = sub_10000D228(&qword_1000801C0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  LODWORD(v_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 7) = v15(v11, 1LL, v13);
  int v16 = v15(v12, 1LL, v13);
  if (!(_DWORD)v7)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 24))(v11, v12, v13);
      return a1;
    }

    (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }

  if (v16)
  {
LABEL_6:
    uint64_t v17 = sub_10000D228(&qword_1000801C8);
    memcpy(v11, v12, *(void *)(*(void *)(v17 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0LL, 1LL, v13);
  return a1;
}

_OWORD *sub_100044944(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_10000D228(&qword_1000801C0);
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7))
  {
    uint64_t v9 = sub_10000D228(&qword_1000801C8);
    memcpy(v5, v6, *(void *)(*(void *)(v9 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v5, v6, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0LL, 1LL, v7);
  }

  return a1;
}

uint64_t *sub_100044A04(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_10000D620(v6, v7);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = sub_10000D228(&qword_1000801C0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1LL, v11);
  int v15 = v13(v10, 1LL, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v9, v10, v11);
      return a1;
    }

    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }

  if (v15)
  {
LABEL_6:
    uint64_t v16 = sub_10000D228(&qword_1000801C8);
    memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
  return a1;
}

uint64_t sub_100044B24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100044B30);
}

uint64_t sub_100044B30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0) {
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0LL;
    }
  }

  else
  {
    uint64_t v8 = sub_10000D228(&qword_1000801C8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 20),  a2,  v8);
  }

uint64_t sub_100044BBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100044BC8);
}

char *sub_100044BC8(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *(void *)uint64_t result = 0LL;
    *((void *)result + sub_1000220E4(0LL, 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }

  else
  {
    uint64_t v7 = sub_10000D228(&qword_1000801C8);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 20)],  a2,  a2,  v7);
  }

  return result;
}

void sub_100044C48(uint64_t a1)
{
  v4[0] = &unk_100061B38;
  sub_100044CBC(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(v2 - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
  }

void sub_100044CBC(uint64_t a1)
{
  if (!qword_100080238)
  {
    uint64_t v2 = sub_100004D58(&qword_1000801C0);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_100080238);
    }
  }

uint64_t sub_100044D14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v71 = *v2;
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v69 = *(void *)(v5 - 8);
  uint64_t v70 = v5;
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v63 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v6);
  int v64 = (char *)&v61 - v9;
  __chkstk_darwin(v8);
  uint64_t v65 = (char *)&v61 - v10;
  uint64_t v11 = sub_10000D228(&qword_100080268);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v61 = (char *)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v62 = (char *)&v61 - v16;
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v61 - v17;
  uint64_t v19 = type metadata accessor for AsyncFileOutputStream.InternalStreamElement(0LL);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v61 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = __chkstk_darwin(v20);
  uint64_t v25 = (char *)&v61 - v24;
  __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v61 - v26;
  unint64_t v68 = v2;
  sub_1000468B4(a1, (uint64_t)&v61 - v26);
  uint64_t v28 = sub_10000D228(&qword_10007F580);
  AsyncStream.Continuation.yield(_:)(v27, v28);
  uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v29(v18, a2, v11);
  uint64_t v66 = v12;
  uint64_t v67 = v18;
  uint64_t v30 = *(uint64_t (**)(char *, uint64_t))(v12 + 88);
  uint64_t v72 = v11;
  uint64_t result = v30(v18, v11);
  if ((_DWORD)result != enum case for AsyncStream.Continuation.YieldResult.enqueued<A>(_:))
  {
    int v32 = result;
    if ((_DWORD)result == enum case for AsyncStream.Continuation.YieldResult.dropped<A>(_:))
    {
      sub_10000D1E8(&qword_100080270, type metadata accessor for AsyncFileOutputStream, (uint64_t)&unk_100061B50);
      uint64_t v33 = v65;
      static LoggedObject.logger.getter(v71);
      sub_1000468B4(a1, (uint64_t)v25);
      uint64_t v34 = v68;
      uint64_t v35 = swift_retain_n(v68, 2LL);
      BOOL v36 = (os_log_s *)Logger.logObject.getter(v35);
      os_log_type_t v37 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v36, v37))
      {
        uint64_t v38 = (_DWORD *)swift_slowAlloc(22LL, -1LL);
        uint64_t v74 = swift_slowAlloc(32LL, -1LL);
        *uint64_t v38 = 134218242;
        __asm { BR              X12 }
      }

      sub_100046224((uint64_t)v25);

      swift_release_n(v34, 2LL);
      (*(void (**)(char *, uint64_t))(v69 + 8))(v33, v70);
      return (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v67, v72);
    }

    else
    {
      int v39 = enum case for AsyncStream.Continuation.YieldResult.terminated<A>(_:);
      sub_10000D1E8(&qword_100080270, type metadata accessor for AsyncFileOutputStream, (uint64_t)&unk_100061B50);
      if (v32 == v39)
      {
        uint64_t v40 = v64;
        static LoggedObject.logger.getter(v71);
        sub_1000468B4(a1, (uint64_t)v22);
        uint64_t v41 = v68;
        uint64_t v42 = swift_retain_n(v68, 2LL);
        uint64_t v43 = (os_log_s *)Logger.logObject.getter(v42);
        os_log_type_t v44 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v43, v44))
        {
          uint64_t v45 = (_DWORD *)swift_slowAlloc(22LL, -1LL);
          uint64_t v74 = swift_slowAlloc(32LL, -1LL);
          *uint64_t v45 = 134218242;
          __asm { BR              X12 }
        }

        sub_100046224((uint64_t)v22);

        swift_release_n(v41, 2LL);
        return (*(uint64_t (**)(char *, uint64_t))(v69 + 8))(v40, v70);
      }

      else
      {
        id v46 = v63;
        static LoggedObject.logger.getter(v71);
        uint64_t v47 = v62;
        uint64_t v48 = a2;
        uint64_t v49 = v72;
        uint64_t v50 = ((uint64_t (*)(char *, uint64_t, uint64_t))v29)(v62, v48, v72);
        unsigned __int8 v51 = (os_log_s *)Logger.logObject.getter(v50);
        os_log_type_t v52 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v51, v52))
        {
          uint64_t v53 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v54 = swift_slowAlloc(32LL, -1LL);
          uint64_t v74 = v54;
          *(_DWORD *)uint64_t v53 = 136315138;
          uint64_t v55 = v61;
          v29(v61, (uint64_t)v47, v72);
          uint64_t v56 = String.init<A>(describing:)(v55, v72);
          uint64_t v57 = v47;
          unint64_t v59 = v58;
          uint64_t v73 = sub_100046274(v56, v58, &v74);
          uint64_t v49 = v72;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74, v53 + 4);
          swift_bridgeObjectRelease(v59);
          uint64_t v60 = *(void (**)(char *, uint64_t))(v66 + 8);
          v60(v57, v49);
          _os_log_impl((void *)&_mh_execute_header, v51, v52, "Unhandled stream result: %s", v53, 0xCu);
          swift_arrayDestroy(v54, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v54, -1LL, -1LL);
          swift_slowDealloc(v53, -1LL, -1LL);
        }

        else
        {
          uint64_t v60 = *(void (**)(char *, uint64_t))(v66 + 8);
          v60(v47, v49);
        }

        (*(void (**)(char *, uint64_t))(v69 + 8))(v46, v70);
        return ((uint64_t (*)(char *, uint64_t))v60)(v67, v49);
      }
    }
  }

  return result;
}

uint64_t sub_1000455A4(void **a1, void (*a2)(char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v106 = *(void **)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v94 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)&v94 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v103 = (uint64_t *)((char *)&v94 - v14);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v94 - v15;
  uint64_t v107 = type metadata accessor for Logger(0LL);
  uint64_t v17 = *(void *)(v107 - 8);
  uint64_t v18 = __chkstk_darwin(v107);
  uint64_t v104 = (char *)&v94 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v94 - v21;
  uint64_t v23 = __chkstk_darwin(v20);
  __chkstk_darwin(v23);
  uint64_t v26 = (char *)&v94 - v25;
  uint64_t v27 = *a1;
  if (v27)
  {
    uint64_t v96 = v24;
    uint64_t v97 = v9;
    uint64_t v28 = sub_10000D1E8(&qword_100080270, type metadata accessor for AsyncFileOutputStream, (uint64_t)&unk_100061B50);
    id v105 = v27;
    uint64_t v99 = v28;
    uint64_t v101 = a3;
    static LoggedObject.logger.getter(a3);
    uint64_t v29 = v106;
    uint64_t v30 = (uint64_t (*)(uint64_t *, uint64_t (*)(void, void), uint64_t))v106[2];
    uint64_t v102 = a2;
    BOOL v100 = v30;
    uint64_t v31 = v30((uint64_t *)v16, (uint64_t (*)(void, void))a2, v6);
    int v32 = (os_log_s *)Logger.logObject.getter(v31);
    os_log_type_t v33 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v35 = (void *)swift_slowAlloc(32LL, -1LL);
      id v109 = v35;
      uint64_t v98 = v17;
      *(_DWORD *)uint64_t v34 = 136446210;
      uint64_t v95 = v34 + 4;
      uint64_t v36 = sub_10000D1E8( &qword_10007EEC8,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter(v6, v36);
      unint64_t v39 = v38;
      uint64_t v108 = sub_100046274(v37, v38, (uint64_t *)&v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v108, &v109, v95);
      swift_bridgeObjectRelease(v39);
      uint64_t v40 = (void *)v29[1];
      uint64_t v41 = v6;
      uint64_t v106 = v40;
      ((void (*)(char *, uint64_t))v40)(v16, v6);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Closing '%{public}s'", v34, 0xCu);
      swift_arrayDestroy(v35, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1LL, -1LL);
      swift_slowDealloc(v34, -1LL, -1LL);

      uint64_t v42 = *(void (**)(char *, uint64_t))(v98 + 8);
    }

    else
    {
      uint64_t v56 = (void *)v29[1];
      uint64_t v41 = v6;
      uint64_t v106 = v56;
      ((void (*)(char *, uint64_t))v56)(v16, v6);

      uint64_t v42 = *(void (**)(char *, uint64_t))(v17 + 8);
    }

    v42(v26, v107);
    id v109 = 0LL;
    unsigned int v57 = [v105 closeAndReturnError:&v109];
    id v58 = v109;
    uint64_t v59 = v101;
    uint64_t v60 = v102;
    if (v57)
    {
      id v61 = v109;
      uint64_t v62 = v96;
      static LoggedObject.logger.getter(v59);
      uint64_t v63 = v103;
      uint64_t v64 = v100(v103, (uint64_t (*)(void, void))v60, v41);
      uint64_t v65 = (os_log_s *)Logger.logObject.getter(v64);
      os_log_type_t v66 = static os_log_type_t.info.getter(v65);
      if (os_log_type_enabled(v65, v66))
      {
        uint64_t v67 = swift_slowAlloc(12LL, -1LL);
        uint64_t v102 = v42;
        unint64_t v68 = (uint8_t *)v67;
        uint64_t v69 = (void *)swift_slowAlloc(32LL, -1LL);
        id v109 = v69;
        *(_DWORD *)unint64_t v68 = 136446210;
        uint64_t v70 = sub_10000D1E8( &qword_10007EEC8,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
        uint64_t v71 = dispatch thunk of CustomStringConvertible.description.getter(v41, v70);
        unint64_t v73 = v72;
        uint64_t v108 = sub_100046274(v71, v72, (uint64_t *)&v109);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v108, &v109, v68 + 4);
        swift_bridgeObjectRelease(v73);
        ((void (*)(uint64_t *, uint64_t))v106)(v63, v41);
        _os_log_impl((void *)&_mh_execute_header, v65, v66, "Finished writing '%{public}s'", v68, 0xCu);
        swift_arrayDestroy(v69, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v69, -1LL, -1LL);
        swift_slowDealloc(v68, -1LL, -1LL);

        uint64_t v74 = v62;
        return ((uint64_t (*)(char *, uint64_t))v102)(v74, v107);
      }

      ((void (*)(uint64_t *, uint64_t))v106)(v63, v41);

      uint64_t v93 = v62;
    }

    else
    {
      id v75 = v109;
      uint64_t v76 = _convertNSErrorToError(_:)(v58);

      swift_willThrow(v77);
      static LoggedObject.logger.getter(v59);
      uint64_t v78 = v97;
      v100((uint64_t *)v97, (uint64_t (*)(void, void))v60, v41);
      swift_errorRetain(v76);
      uint64_t v79 = swift_errorRetain(v76);
      uint64_t v80 = (os_log_s *)Logger.logObject.getter(v79);
      os_log_type_t v81 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v80, v81))
      {
        uint64_t v82 = swift_slowAlloc(22LL, -1LL);
        uint64_t v103 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
        uint64_t v83 = (void *)swift_slowAlloc(32LL, -1LL);
        uint64_t v102 = v42;
        uint64_t v84 = v83;
        id v109 = v83;
        *(_DWORD *)uint64_t v82 = 136446466;
        uint64_t v85 = sub_10000D1E8( &qword_10007EEC8,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
        uint64_t v86 = dispatch thunk of CustomStringConvertible.description.getter(v41, v85);
        unint64_t v88 = v87;
        uint64_t v108 = sub_100046274(v86, v87, (uint64_t *)&v109);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v108, &v109, v82 + 4);
        swift_bridgeObjectRelease(v88);
        ((void (*)(char *, uint64_t))v106)(v78, v41);
        *(_WORD *)(v82 + 12) = 2114;
        swift_errorRetain(v76);
        uint64_t v89 = _swift_stdlib_bridgeErrorToNSError(v76);
        uint64_t v108 = v89;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v108, &v109, v82 + 14);
        uint64_t v90 = v103;
        *uint64_t v103 = v89;
        swift_errorRelease(v76);
        swift_errorRelease(v76);
        _os_log_impl( (void *)&_mh_execute_header,  v80,  v81,  "Failed to close file handle for '%{public}s': %{public}@",  (uint8_t *)v82,  0x16u);
        uint64_t v91 = sub_10000D228(&qword_10007EE38);
        swift_arrayDestroy(v90, 1LL, v91);
        swift_slowDealloc(v90, -1LL, -1LL);
        swift_arrayDestroy(v84, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v84, -1LL, -1LL);
        swift_slowDealloc(v82, -1LL, -1LL);

        swift_errorRelease(v76);
        uint64_t v74 = v104;
        return ((uint64_t (*)(char *, uint64_t))v102)(v74, v107);
      }

      swift_errorRelease(v76);
      ((void (*)(char *, uint64_t))v106)(v78, v41);
      swift_errorRelease(v76);
      swift_errorRelease(v76);

      uint64_t v93 = v104;
    }

    return ((uint64_t (*)(char *, uint64_t))v42)(v93, v107);
  }

  else
  {
    sub_10000D1E8(&qword_100080270, type metadata accessor for AsyncFileOutputStream, (uint64_t)&unk_100061B50);
    static LoggedObject.logger.getter(a3);
    uint64_t v43 = v106;
    uint64_t v44 = ((uint64_t (*)(char *, void (*)(char *, uint64_t), uint64_t))v106[2])(v12, a2, v6);
    uint64_t v45 = (os_log_s *)Logger.logObject.getter(v44);
    os_log_type_t v46 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v47 = swift_slowAlloc(12LL, -1LL);
      uint64_t v98 = v17;
      uint64_t v48 = v6;
      uint64_t v49 = (uint8_t *)v47;
      uint64_t v50 = (void *)swift_slowAlloc(32LL, -1LL);
      id v109 = v50;
      *(_DWORD *)uint64_t v49 = 136446210;
      id v105 = v49 + 4;
      uint64_t v51 = sub_10000D1E8( &qword_10007EEC8,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      uint64_t v52 = dispatch thunk of CustomStringConvertible.description.getter(v48, v51);
      unint64_t v54 = v53;
      uint64_t v108 = sub_100046274(v52, v53, (uint64_t *)&v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v108, &v109, v105);
      swift_bridgeObjectRelease(v54);
      ((void (*)(char *, uint64_t))v43[1])(v12, v48);
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Finished without ever opening '%{public}s'", v49, 0xCu);
      swift_arrayDestroy(v50, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1LL, -1LL);
      swift_slowDealloc(v49, -1LL, -1LL);

      uint64_t v55 = *(uint64_t (**)(char *, uint64_t))(v98 + 8);
    }

    else
    {
      ((void (*)(char *, uint64_t))v43[1])(v12, v6);

      uint64_t v55 = *(uint64_t (**)(char *, uint64_t))(v17 + 8);
    }

    return v55(v22, v107);
  }

id sub_100045F14(uint64_t a1)
{
  uint64_t v2 = v1;
  URL._bridgeToObjectiveC()(__stack_chk_guard);
  uint64_t v5 = v4;
  id v14 = 0LL;
  id v6 = [(id)swift_getObjCClassFromMetadata(v2) fileHandleForWritingToURL:v4 error:&v14];

  id v7 = v14;
  if (v6)
  {
    uint64_t v8 = type metadata accessor for URL(0LL);
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL);
    id v10 = v7;
    v9(a1, v8);
  }

  else
  {
    id v11 = v14;
    _convertNSErrorToError(_:)(v7);

    swift_willThrow();
    uint64_t v12 = type metadata accessor for URL(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8LL))(a1, v12);
  }

  return v6;
}

uint64_t sub_100046028(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AsyncFileOutputStream.InternalStreamElement(0LL);
  __chkstk_darwin(v4);
  id v6 = (uint64_t *)((char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v23 = sub_10000D228(&qword_100080268);
  uint64_t v7 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for String.Encoding(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  id v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static String.Encoding.utf8.getter(v12);
  uint64_t v15 = String.data(using:allowLossyConversion:)(v14, 0LL, a1, a2);
  unint64_t v17 = v16;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  if (v17 >> 60 == 15)
  {
    __break(1u);
  }

  else
  {
    uint64_t v19 = (char *)v6 + *(int *)(v4 + 20);
    uint64_t v20 = sub_10000D228(&qword_1000801C0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56LL))(v19, 1LL, 1LL, v20);
    *id v6 = v15;
    v6[1] = v17;
    sub_100012154(v15, v17);
    sub_100044D14((uint64_t)v6, (uint64_t)v9);
    sub_100046224((uint64_t)v6);
    uint64_t v21 = v23;
    return sub_100046260(v15, v17);
  }

  return result;
}

uint64_t sub_100046200(uint64_t a1, uint64_t a2)
{
  return sub_100046028(a1, a2);
}

uint64_t sub_100046224(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AsyncFileOutputStream.InternalStreamElement(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100046260(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10000D620(result, a2);
  }
  return result;
}

uint64_t sub_100046274(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_100046344(v12, 0LL, 0LL, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_10000D2C8((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }

  else
  {
    uint64_t ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_10000D2C8((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }

    swift_bridgeObjectRetain(a2);
  }

  _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v12);
  return v7;
}

uint64_t sub_100046344(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000LL) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0LL, HIBYTE(a6) & 0xF, __dst, a3);
            uint64_t result = 0LL;
            *a1 = (uint64_t)__dst;
            return result;
          }

          goto LABEL_17;
        }
      }
    }

LABEL_13:
    uint64_t result = sub_1000464FC(a5, a6);
    *a1 = v13;
    return result;
  }

  if ((a6 & 0x1000000000000000LL) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000LL) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }

  uint64_t v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "Swift/StringTesting.swift",  25LL,  2,  151LL,  0);
    __break(1u);
LABEL_17:
    LOBYTE(v1_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = 2;
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory overlapping range",  58LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  v14,  1173LL,  0);
    __break(1u);
    return result;
  }

  if (v3 != v2) {
    goto LABEL_15;
  }
  uint64_t v6 = 1;
  uint64_t v2 = v3;
LABEL_16:
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  return v6 & 1;
}

uint64_t sub_1000464FC(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_100046590(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
    uint64_t v2 = sub_100046768(0, *(void *)(v2 + 16) + 1LL, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_100046768(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = 0;
  return v2;
}

void *sub_100046590(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000LL) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v4 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v4)
  {
    while (1)
    {
      uint64_t v5 = sub_100046704(v4, 0LL);
      if (v4 < 0) {
        break;
      }
      uint64_t v6 = v5;
      uint64_t v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0) {
        goto LABEL_14;
      }
      if (v7 == v4) {
        return v6;
      }
      LOBYTE(v_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 10) = 2;
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "invalid Collection: less than 'count' elements in collection",  60LL,  2LL,  "Swift/ContiguousArrayBuffer.swift",  33LL,  v10,  1122LL,  0);
      __break(1u);
LABEL_10:
      uint64_t v4 = String.UTF8View._foreignCount()();
      if (!v4) {
        return _swiftEmptyArrayStorage;
      }
    }

    LOBYTE(v_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableBufferPointer with negative count",  46LL,  2LL,  "Swift/UnsafeBufferPointer.swift",  31LL,  v10,  71LL,  0);
    __break(1u);
LABEL_14:
    LOBYTE(v_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 10) = 2;
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Insufficient space allocated to copy string contents",  52LL,  2LL,  "Swift/StringUTF8View.swift",  26LL,  v10,  430LL,  0);
    __break(1u);
  }

  else
  {
    return _swiftEmptyArrayStorage;
  }

  return result;
}

void *sub_100046704(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v4 = sub_10000D228(&qword_100080278);
  uint64_t v5 = (void *)swift_allocObject(v4, v2 + 32, 7LL);
  size_t v6 = j__malloc_size(v5);
  uint64_t v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_100046768(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_10000D228(&qword_100080278);
    uint64_t v11 = (char *)swift_allocObject(v10, v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * v12 - 64;
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  int v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8]) {
      memmove(v13, v14, v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }

uint64_t sub_1000468B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AsyncFileOutputStream.InternalStreamElement(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000468F8()
{
  uint64_t v1 = type metadata accessor for URL(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = sub_10000D228(&qword_100080288);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v5 + v8) & ~v8;
  uint64_t v10 = v3 | v8 | 7;
  unint64_t v11 = ((*(void *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return swift_deallocObject(v0, v11, v10);
}

uint64_t sub_1000469C4()
{
  uint64_t v2 = *(void *)(type metadata accessor for URL(0LL) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = v3 + *(void *)(v2 + 64);
  uint64_t v5 = *(void *)(sub_10000D228(&qword_100080288) - 8);
  uint64_t v6 = v0 + ((v4 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  uint64_t v7 = (void *)swift_task_alloc(dword_100080294);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = sub_10000D3C0;
  uint64_t v8 = (void *)swift_task_alloc(dword_1000802A4);
  v7[2] = v8;
  *uint64_t v8 = v7;
  v8[1] = sub_10001D0F0;
  return sub_100042C88(v0 + v3, v6);
}

uint64_t sub_100046A90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AsyncFileOutputStream.InternalStreamElement(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_100046AD4()
{
  unint64_t result = qword_1000802B8;
  if (!qword_1000802B8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1000802B8);
  }

  return result;
}

uint64_t sub_100046B18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D228(&qword_1000801C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100046B60(uint64_t a1)
{
  uint64_t v2 = sub_10000D228(&qword_1000801C8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_100046BA0()
{
  unint64_t result = qword_1000802C0;
  if (!qword_1000802C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100061C34, &type metadata for AsyncFileOutputStream.WriteError);
    atomic_store(result, (unint64_t *)&qword_1000802C0);
  }

  return result;
}

unint64_t sub_100046BE4()
{
  unint64_t result = qword_1000802C8;
  if (!qword_1000802C8)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSFileHandle);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000802C8);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for AsyncFileOutputStream.WriteError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = 1;
  }
  else {
    LODWORD(v_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_100046C6C + 4 * byte_100061AF5[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100046CA0 + 4 * asc_100061AF0[v4]))();
}

uint64_t sub_100046CA0(uint64_t result)
{
  *(_BYTE *)(result + sub_1000220E4(0LL, 1) = v1;
  return result;
}

uint64_t sub_100046CA8(uint64_t result, int a2)
{
  *(_WORD *)(result + sub_1000220E4(0LL, 1) = 0;
  if (a2) {
    JUMPOUT(0x100046CB0LL);
  }
  return result;
}

uint64_t sub_100046CBC(uint64_t result, int a2)
{
  *(_DWORD *)(result + sub_1000220E4(0LL, 1) = 0;
  if (!a2) {
    JUMPOUT(0x100046CC4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_100046CC8(uint64_t result)
{
  *(_DWORD *)(result + sub_1000220E4(0LL, 1) = v1;
  return result;
}

uint64_t sub_100046CD0(uint64_t result)
{
  *(_WORD *)(result + sub_1000220E4(0LL, 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AsyncFileOutputStream.WriteError()
{
  return &type metadata for AsyncFileOutputStream.WriteError;
}

unint64_t sub_100046CF0()
{
  unint64_t result = qword_1000802D0;
  if (!qword_1000802D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100061C0C, &type metadata for AsyncFileOutputStream.WriteError);
    atomic_store(result, (unint64_t *)&qword_1000802D0);
  }

  return result;
}

void sub_100046D34(uint64_t a1, void *a2, void *a3)
{
  if (a3)
  {
    uint64_t v8 = a3;
    id v5 = a3;
    uint64_t v6 = sub_10000D228(&qword_1000802E0);
    CheckedContinuation.resume(throwing:)(&v8, v6);
  }

  else
  {
    uint64_t v8 = a2;
    uint64_t v7 = sub_10000D228(&qword_1000802E0);
    CheckedContinuation.resume(returning:)(&v8, v7);
  }

uint64_t sub_100046DC8(uint64_t a1)
{
  v1[25] = a1;
  uint64_t v2 = sub_10000D228(&qword_1000802E0);
  v1[26] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[27] = v3;
  v1[28] = swift_task_alloc((*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100046E2C, 0LL, 0LL);
}

uint64_t sub_100046E2C()
{
  __int16 v1 = v0 + 2;
  uint64_t v3 = v0[27];
  uint64_t v2 = v0[28];
  uint64_t v4 = (void *)v0[25];
  uint64_t v5 = v0[26];
  v0[7] = v0 + 23;
  v0[2] = v0;
  v0[3] = sub_100046F50;
  uint64_t v6 = swift_continuation_init(v0 + 2, 1LL);
  v0[17] = v5;
  uint64_t v7 = sub_10000D27C(v0 + 14);
  type metadata accessor for CKAccountStatus(0LL);
  uint64_t v9 = v8;
  v0[29] = v8;
  uint64_t v10 = sub_10000D228((uint64_t *)&unk_10007EC20);
  CheckedContinuation.init(continuation:function:)( v6,  0xD000000000000026LL,  0x80000001000624F0LL,  v9,  v10,  &protocol self-conformance witness table for Error);
  (*(void (**)(void *, uint64_t, uint64_t))(v3 + 32))(v7, v2, v5);
  v0[10] = _NSConcreteStackBlock;
  unint64_t v11 = v0 + 10;
  v11[1] = 1107296256LL;
  v11[2] = sub_100046D34;
  v11[3] = &unk_100077870;
  [v4 accountStatusWithCompletionHandler:v11];
  return swift_continuation_await(v1);
}

uint64_t sub_100046F50()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 24(*(void (**)(void, void, void))(v0 + 16))(*(void *)(v0 + 32), *(void *)(v0 + 40), 0LL) = v1;
  if (v1) {
    uint64_t v2 = sub_10004718C;
  }
  else {
    uint64_t v2 = sub_100046FB0;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_100046FB0()
{
  uint64_t v1 = v0[23];
  switch(v1)
  {
    case 0LL:
    case 4LL:
      uint64_t v2 = v0[29];
      _StringGuts.grow(_:)(25LL);
      v0[20] = 0LL;
      v0[21] = 0xE000000000000000LL;
      v3._object = (void *)0x8000000100063DB0LL;
      v3._countAndFlagsBits = 0xD000000000000017LL;
      String.append(_:)(v3);
      v0[24] = v1;
      _print_unlocked<A, B>(_:_:)( v0 + 24,  v0 + 20,  v2,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
      uint64_t v4 = v0[20];
      uint64_t v5 = v0[21];
      goto LABEL_4;
    case 1LL:
      swift_task_dealloc(v0[28]);
      unint64_t v11 = (uint64_t (*)(void))v0[1];
      return v11();
    case 2LL:
      unint64_t v12 = sub_1000471E8();
      uint64_t v9 = swift_allocError(&type metadata for CloudKitAccountError, v12, 0LL, 0LL);
      *uint64_t v13 = xmmword_100061C80;
      goto LABEL_8;
    case 3LL:
      unint64_t v14 = sub_1000471E8();
      uint64_t v9 = swift_allocError(&type metadata for CloudKitAccountError, v14, 0LL, 0LL);
      *uint64_t v15 = 0LL;
      v15[1] = 0LL;
      goto LABEL_8;
    default:
      uint64_t v6 = v0[29];
      _StringGuts.grow(_:)(28LL);
      v0[18] = 0LL;
      v0[19] = 0xE000000000000000LL;
      v7._countAndFlagsBits = 0xD00000000000001ALL;
      v7._object = (void *)0x8000000100063D90LL;
      String.append(_:)(v7);
      v0[22] = v1;
      _print_unlocked<A, B>(_:_:)( v0 + 22,  v0 + 18,  v6,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
      uint64_t v4 = v0[18];
      uint64_t v5 = v0[19];
LABEL_4:
      unint64_t v8 = sub_1000471E8();
      uint64_t v9 = swift_allocError(&type metadata for CloudKitAccountError, v8, 0LL, 0LL);
      *uint64_t v10 = v4;
      v10[1] = v5;
LABEL_8:
      swift_willThrow(v9);
      swift_task_dealloc(v0[28]);
      unint64_t v11 = (uint64_t (*)(void))v0[1];
      return v11();
  }

uint64_t sub_10004718C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000471D0(uint64_t a1, uint64_t a2)
{
  return sub_10000D2C8(a2 + 32, a1 + 32);
}

uint64_t sub_1000471E0(uint64_t a1)
{
  return _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0((void *)(a1 + 32));
}

unint64_t sub_1000471E8()
{
  unint64_t result = qword_1000802E8;
  if (!qword_1000802E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100060C48, &type metadata for CloudKitAccountError);
    atomic_store(result, (unint64_t *)&qword_1000802E8);
  }

  return result;
}

id sub_10004722C()
{
  id v5 = 0LL;
  unsigned int v1 = objc_msgSend(v0, "setTaskExpiredWithRetryAfter:error:", &v5);
  id v2 = v5;
  if (v1) {
    return v5;
  }
  id v4 = v5;
  _convertNSErrorToError(_:)(v2);

  return (id)swift_willThrow();
}

void sub_1000472D0(uint64_t a1, uint64_t a2)
{
  id v5 = *v2;
  if (a1)
  {
    v8[4] = a1;
    uint64_t v9 = a2;
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 1107296256LL;
    v8[2] = sub_100037AD4;
    v8[3] = &unk_1000778D0;
    uint64_t v6 = _Block_copy(v8);
    uint64_t v7 = v9;
    swift_retain(a2);
    swift_release(v7);
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  [v5 setExpirationHandler:v6];
  sub_10002D330(a1, a2);
  _Block_release(v6);
}

id sub_100047390()
{
  return [*v0 setTaskCompleted];
}

id sub_1000473A0()
{
  return sub_10004722C();
}

uint64_t sub_1000473C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000473D0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

ValueMetadata *type metadata accessor for BackgroundSystemTask()
{
  return &type metadata for BackgroundSystemTask;
}

void sub_1000473E8(uint64_t a1, void *a2, void *a3)
{
}

uint64_t sub_1000473F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[38] = a3;
  v4[39] = a4;
  v4[37] = a2;
  uint64_t v5 = sub_10000D228(&qword_100080308);
  v4[40] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[41] = v6;
  v4[42] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for RecordType(0LL);
  v4[43] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[44] = v8;
  v4[45] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_10000D228(&qword_10007FBB0);
  v4[46] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v4[47] = v10;
  v4[48] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000474B0, 0LL, 0LL);
}

uint64_t sub_1000474B0()
{
  unsigned int v1 = v0 + 2;
  uint64_t v3 = v0[47];
  uint64_t v2 = v0[48];
  uint64_t v4 = v0[46];
  uint64_t v6 = (void *)v0[37];
  uint64_t v5 = v0[38];
  v0[7] = v0 + 35;
  v0[2] = v0;
  v0[3] = sub_1000475F4;
  uint64_t v7 = swift_continuation_init(v0 + 2, 1LL);
  v0[33] = v4;
  uint64_t v8 = sub_10000D27C(v0 + 30);
  uint64_t v9 = sub_10000D5E8(0LL, &qword_10007FA28, &OBJC_CLASS___CKRecord_ptr);
  uint64_t v10 = sub_10000D228((uint64_t *)&unk_10007EC20);
  v0[49] = v10;
  CheckedContinuation.init(continuation:function:)( v7,  0xD000000000000026LL,  0x80000001000624F0LL,  v9,  v10,  &protocol self-conformance witness table for Error);
  (*(void (**)(void *, uint64_t, uint64_t))(v3 + 32))(v8, v2, v4);
  v0[26] = _NSConcreteStackBlock;
  unint64_t v11 = v0 + 26;
  v11[1] = 1107296256LL;
  v11[2] = sub_1000473E8;
  v11[3] = &unk_100077978;
  [v6 fetchRecordWithID:v5 completionHandler:v11];
  return swift_continuation_await(v1);
}

uint64_t sub_1000475F4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 40(*(void (**)(void, void, void))(v0 + 16))(*(void *)(v0 + 32), *(void *)(v0 + 40), 0LL) = v1;
  if (v1) {
    uint64_t v2 = sub_100047A10;
  }
  else {
    uint64_t v2 = sub_100047654;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_100047654()
{
  uint64_t v2 = *(void *)(v0 + 352);
  uint64_t v1 = *(void *)(v0 + 360);
  uint64_t v3 = *(void *)(v0 + 344);
  uint64_t v4 = *(void **)(v0 + 280);
  uint64_t v5 = CKRecord.recordType.getter();
  uint64_t v7 = v6;

  uint64_t v8 = static EncryptionKeyRecord.recordType.getter();
  uint64_t v9 = RecordType.rawValue.getter(v8);
  unint64_t v11 = v10;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if (v5 == v9 && v7 == v11)
  {
    swift_bridgeObjectRelease(v7);
  }

  else
  {
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, v9, v11, 0LL);
    swift_bridgeObjectRelease(v11);
    if ((v13 & 1) == 0)
    {
      _StringGuts.grow(_:)(38LL);
      swift_bridgeObjectRelease(0xE000000000000000LL);
      uint64_t v14 = type metadata accessor for UUID(0LL);
      uint64_t v15 = sub_10000D1E8( &qword_10007F498,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v14, v15);
      object = v16._object;
      String.append(_:)(v16);
      swift_bridgeObjectRelease(object);
      v18._object = (void *)0x8000000100063DD0LL;
      v18._countAndFlagsBits = 0xD00000000000001ALL;
      String.append(_:)(v18);
      v19._countAndFlagsBits = v5;
      v19._object = v7;
      String.append(_:)(v19);
      swift_bridgeObjectRelease(v7);
      v20._countAndFlagsBits = 34LL;
      v20._object = (void *)0xE100000000000000LL;
      String.append(_:)(v20);
      unint64_t v21 = sub_100048504();
      uint64_t v22 = swift_allocError(&type metadata for HMVCommandHandlerError, v21, 0LL, 0LL);
      *(void *)uint64_t v23 = 0x2064726F636552LL;
      *(void *)(v23 + 8) = 0xE700000000000000LL;
      *(_BYTE *)(v23 + swift_unknownObjectWeakDestroy(v0 + 16) = 2;
      swift_willThrow(v22);
      uint64_t v24 = *(void *)(v0 + 360);
      uint64_t v25 = *(void *)(v0 + 336);
      swift_task_dealloc(*(void *)(v0 + 384));
      swift_task_dealloc(v24);
      swift_task_dealloc(v25);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }

  uint64_t v27 = v0 + 80;
  uint64_t v28 = *(void *)(v0 + 392);
  uint64_t v30 = *(void *)(v0 + 328);
  uint64_t v29 = *(void *)(v0 + 336);
  uint64_t v31 = *(void *)(v0 + 320);
  os_log_type_t v33 = *(void **)(v0 + 296);
  uint64_t v32 = *(void *)(v0 + 304);
  swift_bridgeObjectRelease(v7);
  *(void *)(v0 + 120) = v0 + 272;
  *(void *)(v0 + 80) = v0;
  *(void *)(v0 + 88) = sub_10004795C;
  uint64_t v34 = swift_continuation_init(v0 + 80, 1LL);
  *(void *)(v0 + 200) = v31;
  uint64_t v35 = sub_10000D27C((void *)(v0 + 176));
  uint64_t v36 = sub_10000D5E8(0LL, &qword_10007FA50, &OBJC_CLASS___CKRecordID_ptr);
  CheckedContinuation.init(continuation:function:)( v34,  0xD000000000000026LL,  0x80000001000624F0LL,  v36,  v28,  &protocol self-conformance witness table for Error);
  (*(void (**)(void *, uint64_t, uint64_t))(v30 + 32))(v35, v29, v31);
  *(void *)(v0 + 14_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = _NSConcreteStackBlock;
  uint64_t v37 = (void *)(v0 + 144);
  v37[1] = 1107296256LL;
  v37[2] = sub_100047B70;
  v37[3] = &unk_1000779A0;
  [v33 deleteRecordWithID:v32 completionHandler:v37];
  return swift_continuation_await(v27);
}

uint64_t sub_10004795C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112LL);
  *(void *)(*(void *)v0 + 408LL) = v1;
  if (v1) {
    uint64_t v2 = sub_100047B14;
  }
  else {
    uint64_t v2 = sub_1000479BC;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_1000479BC()
{
  uint64_t v1 = *(void *)(v0 + 360);
  uint64_t v2 = *(void *)(v0 + 336);
  swift_task_dealloc(*(void *)(v0 + 384));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100047A10(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 400);
  swift_willThrow(a1);
  _s3__C4CodeOMa_0(0LL);
  uint64_t v4 = v3;
  *(void *)(v1 + 288) = 11LL;
  swift_errorRetain(v2);
  uint64_t v5 = sub_10000D1E8(&qword_10007EFE0, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_0, (uint64_t)&unk_1000609B4);
  LOBYTE(v_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = static _ErrorCodeProtocol.~= infix(_:_:)(v1 + 288, v2, v4, v5);
  swift_errorRelease(v2);
  if ((v4 & 1) != 0)
  {
    swift_errorRelease(*(void *)(v1 + 400));
    uint64_t v6 = *(void *)(v1 + 360);
    uint64_t v7 = *(void *)(v1 + 336);
    swift_task_dealloc(*(void *)(v1 + 384));
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
  }

  else
  {
    uint64_t v8 = *(void *)(v1 + 360);
    uint64_t v9 = *(void *)(v1 + 336);
    swift_task_dealloc(*(void *)(v1 + 384));
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
  }

  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100047B14()
{
  uint64_t v1 = *(void *)(v0 + 360);
  uint64_t v2 = *(void *)(v0 + 336);
  swift_task_dealloc(*(void *)(v0 + 384));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100047B70(uint64_t a1, void *a2, void *a3)
{
}

void sub_100047B7C(uint64_t a1, void *a2, void *a3, uint64_t *a4)
{
  if (a3)
  {
    unint64_t v11 = a3;
    id v7 = a3;
    uint64_t v8 = sub_10000D228(a4);
    CheckedContinuation.resume(throwing:)(&v11, v8);
  }

  else if (a2)
  {
    unint64_t v11 = a2;
    id v9 = a2;
    uint64_t v10 = sub_10000D228(a4);
    CheckedContinuation.resume(returning:)(&v11, v10);
  }

  else
  {
    __break(1u);
  }

id sub_100047C18(uint64_t a1)
{
  id v2 = [objc_allocWithZone(CKOperationGroup) init];
  __int128 v21[2] = 0LL;
  unint64_t v22 = 0xE000000000000000LL;
  v21[0] = 47LL;
  v21[1] = 0xE100000000000000LL;
  v20[2] = v21;
  uint64_t v3 = (void *)sub_10001BC90( 0x7FFFFFFFFFFFFFFFLL,  1,  sub_100048548,  (uint64_t)v20,  0xD000000000000033LL,  0x8000000100063E20LL);
  uint64_t v4 = v3;
  if (!v3[2])
  {
    id result = (id)swift_bridgeObjectRelease(v3);
    __break(1u);
    goto LABEL_6;
  }

  uint64_t v5 = v3[4];
  uint64_t v6 = v3[5];
  uint64_t v7 = v3[6];
  uint64_t v8 = v3[7];
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v4);
  v9._countAndFlagsBits = static String._fromSubstring(_:)(v5, v6, v7, v8);
  object = v9._object;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(object);
  v11._countAndFlagsBits = 46LL;
  v11._object = (void *)0xE100000000000000LL;
  String.append(_:)(v11);
  v21[0] = &type metadata for HMVCommandHandlers;
  uint64_t v12 = sub_10000D228(&qword_100080318);
  v13._countAndFlagsBits = String.init<A>(describing:)(v21, v12);
  uint64_t v14 = v13._object;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v14);
  unint64_t v15 = v22;
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v15);
  [v2 setName:v16];

  [v2 setExpectedSendSize:1];
  id result = [v2 defaultConfiguration];
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  Swift::String v18 = result;
  [result setContainer:a1];

  id result = [v2 defaultConfiguration];
  if (result)
  {
    Swift::String v19 = result;
    [result setQualityOfService:25];

    return v2;
  }

uint64_t sub_100047E1C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(_BYTE *)(v4 + 128) = a4;
  *(void *)(v4 + 2_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = a2;
  *(void *)(v4 + 32) = a3;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  uint64_t v5 = type metadata accessor for LubyRackoffEncryptionKey(0LL);
  *(void *)(v4 + 40) = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  *(void *)(v4 + 48) = v6;
  *(void *)(v4 + sub_1000154A8(*(void *)(v0 + 152) + OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_database, v0 + 56) = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for UUID(0LL);
  *(void *)(v4 + 6_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  *(void *)(v4 + 72) = v8;
  *(void *)(v4 + 80) = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for TagEncryptionKeyController(0LL);
  *(void *)(v4 + 88) = v9;
  *(void *)(v4 + 96) = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100047ED0, 0LL, 0LL);
}

uint64_t sub_100047ED0()
{
  id v2 = *(int **)(v0 + 88);
  uint64_t v1 = *(void **)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 64);
  uint64_t v4 = *(void *)(v0 + 40);
  char v21 = *(_BYTE *)(v0 + 128);
  uint64_t v5 = *(void **)(v0 + 16);
  id v6 = sub_100047C18((uint64_t)v5);
  *(void *)(v0 + 10_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = v6;
  uint64_t v7 = sub_10000D228(&qword_100080328);
  uint64_t v8 = (char *)v1 + *(int *)(v7 + 48);
  uint64_t v9 = *(int *)(v7 + 64);
  *uint64_t v1 = v5;
  uint64_t v10 = enum case for QueryScope.owned(_:);
  uint64_t Scope = type metadata accessor for QueryScope(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(Scope - 8) + 104LL))(v8, v10, Scope);
  *(void *)((char *)v1 + v9) = v6;
  uint64_t v12 = enum case for DatabaseConfiguration.unconfigured(_:);
  uint64_t v13 = type metadata accessor for DatabaseConfiguration(0LL);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 104LL))(v1, v12, v13);
  type metadata accessor for Configuration(0LL);
  id v14 = v5;
  uint64_t v15 = static Configuration.encryptionKeyWriteCacheSeconds.getter(v6);
  NSString v16 = (void *)((char *)v1 + v2[7]);
  uint64_t v17 = sub_10000D1E8( &qword_10007F4A0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  asyncCache<A, B>(of:withKeysOf:expirationSeconds:)(v16, v4, v3, v15, v3, v4, v17);
  Swift::String v18 = (char *)v1 + v2[5];
  *(void *)Swift::String v18 = 0LL;
  v18[8] = 1;
  *((_BYTE *)v1 + v2[6]) = v21;
  Swift::String v19 = (void *)swift_task_alloc(dword_10007FB8C);
  *(void *)(v0 + 112) = v19;
  *Swift::String v19 = v0;
  v19[1] = sub_10004806C;
  return sub_1000322E8(*(void *)(v0 + 80), *(void *)(v0 + 56), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_10004806C()
{
  id v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 112LL);
  *(void *)(*(void *)v1 + 12(*(void (**)(void, void, void))(v0 + 16))(*(void *)(v0 + 32), *(void *)(v0 + 40), 0LL) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_10004815C;
  }

  else
  {
    (*(void (**)(void, void))(v2[6] + 8LL))(v2[7], v2[5]);
    uint64_t v4 = sub_1000480E0;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_1000480E0()
{
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v5 = *(void *)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 64);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  sub_100048564(v1);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004815C()
{
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 56);

  sub_100048564(v1);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000481C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch(sub_1000481DC, 0LL, 0LL);
}

uint64_t sub_1000481DC()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = (void *)v0[2];
  v0[5] = [v3 privateCloudDatabase];
  id v4 = sub_100047C18((uint64_t)v3);
  v0[6] = v4;
  [v4 setExpectedReceiveSize:1];
  sub_10000D5E8(0LL, &qword_10007FA50, &OBJC_CLASS___CKRecordID_ptr);
  uint64_t v5 = UUID.uuidString.getter();
  uint64_t v7 = v6;
  sub_10000D5E8(0LL, (unint64_t *)&qword_10007F490, &OBJC_CLASS___CKRecordZoneID_ptr);
  type metadata accessor for Configuration(0LL);
  uint64_t v8 = static Configuration.zoneName(forHomeIdentifier:)(v2);
  uint64_t v10 = v9;
  v11._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(CKCurrentUserDefaultName);
  v11._object = v12;
  v13._countAndFlagsBits = v8;
  v13._object = v10;
  Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v13, v11).super.isa;
  v15._countAndFlagsBits = v5;
  v15._object = v7;
  Class v16 = CKRecordID.init(recordName:zoneID:)(v15, (CKRecordZoneID)isa).super.isa;
  v0[7] = v16;
  uint64_t v17 = swift_task_alloc(32LL);
  v0[8] = v17;
  *(void *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = v16;
  *(void *)(v17 + 2_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = v1;
  uint64_t v18 = async function pointer to CKDatabase.configuredWith<A>(configuration:group:body:)[1];
  id v19 = v4;
  Swift::String v20 = (void *)swift_task_alloc(v18);
  v0[9] = v20;
  *Swift::String v20 = v0;
  v20[1] = sub_100048374;
  return CKDatabase.configuredWith<A>(configuration:group:body:)();
}

uint64_t sub_100048374()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 72);
  *(void *)(*v1 + 80) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    id v4 = sub_10004842C;
  }

  else
  {
    uint64_t v5 = *(void *)(v2 + 64);

    swift_task_dealloc(v5);
    id v4 = sub_1000483EC;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_1000483EC()
{
  uint64_t v1 = *(void **)(v0 + 56);
  uint64_t v2 = *(void **)(v0 + 40);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004842C()
{
  uint64_t v1 = *(void **)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 64);
  id v4 = *(void **)(v0 + 40);
  uint64_t v3 = *(void **)(v0 + 48);

  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100048480(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v8 = (void *)swift_task_alloc(dword_1000802FC);
  *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_10000D3C0;
  return sub_1000473F4(a1, a2, v7, v6);
}

uint64_t sub_1000484EC(uint64_t a1, uint64_t a2)
{
  return sub_10000D2C8(a2 + 32, a1 + 32);
}

uint64_t sub_1000484FC(uint64_t a1)
{
  return _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0((void *)(a1 + 32));
}

unint64_t sub_100048504()
{
  unint64_t result = qword_100080310;
  if (!qword_100080310)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000613A4, &type metadata for HMVCommandHandlerError);
    atomic_store(result, (unint64_t *)&qword_100080310);
  }

  return result;
}

uint64_t sub_100048548(void *a1)
{
  return sub_10001C8CC(a1, *(void **)(v1 + 16)) & 1;
}

uint64_t sub_100048564(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TagEncryptionKeyController(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

id sub_1000485A8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CocoaError.Code(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (NSURL *)((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = (char *)((char *)&v20 - (char *)v5);
  URL._bridgeToObjectiveC()(v5);
  uint64_t v8 = v7;
  id v20 = 0LL;
  LODWORD(swift_weakDestroy(v0 + 4, v1) = [v1 removeItemAtURL:v7 error:&v20];

  id v9 = v20;
  if ((_DWORD)v1) {
    return v20;
  }
  id v11 = v20;
  uint64_t v12 = _convertNSErrorToError(_:)(v9);

  swift_willThrow(v13);
  uint64_t v14 = swift_errorRetain(v12);
  static CocoaError.fileNoSuchFile.getter(v14);
  unint64_t v15 = sub_100027310();
  char v16 = static _ErrorCodeProtocol.~= infix(_:_:)(v6, v12, v2, v15);
  swift_errorRelease(v12);
  uint64_t v17 = *(void (**)(char *, uint64_t))(v3 + 8);
  v17(v6, v2);
  if ((v16 & 1) != 0) {
    return (id)swift_errorRelease(v12);
  }
  uint64_t v18 = swift_errorRetain(v12);
  static CocoaError.fileReadNoSuchFile.getter(v18);
  char v19 = static _ErrorCodeProtocol.~= infix(_:_:)(v6, v12, v2, v15);
  swift_errorRelease(v12);
  id result = (id)((uint64_t (*)(char *, uint64_t))v17)(v6, v2);
  if ((v19 & 1) != 0) {
    return (id)swift_errorRelease(v12);
  }
  return result;
}

uint64_t sub_100048748(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = v4;
  sub_10000D620(a1, a2);
  uint64_t v6 = static String._fromUTF8Repairing(_:)(v5 + 32, *(void *)(v5 + 16));
  swift_release(v5);
  return v6;
}

uint64_t sub_1000487BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (a1) {
    uint64_t v4 = a2 - a1;
  }
  else {
    uint64_t v4 = 0LL;
  }
  uint64_t result = static String._fromUTF8Repairing(_:)(a1, v4);
  *a3 = result;
  a3[1] = v6;
  return result;
}

void *sub_1000487F4( uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  if (a1) {
    uint64_t v4 = a2 - a1;
  }
  else {
    uint64_t v4 = 0LL;
  }
  uint64_t result = a3(&v6, a1, v4);
  if (!v3) {
    return (void *)v6;
  }
  return result;
}

void *sub_100048840( uint64_t a1, uint64_t a2, uint64_t a3, void *(*a4)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  uint64_t result = (void *)__DataStorage._bytes.getter();
  uint64_t v9 = (uint64_t)result;
  if (result)
  {
    uint64_t result = (void *)__DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }

    v9 += a1 - (void)result;
  }

  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v12 = __DataStorage._length.getter();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t v14 = v9 + v13;
  if (v9) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0LL;
  }
  uint64_t result = sub_1000487F4(v9, v15, a4);
  if (v4) {
    return (void *)v16;
  }
  return result;
}

void sub_1000488EC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void *sub_100048968()
{
  if (BYTE6(v0))
  {
    uint64_t v6 = sub_10000D228(&qword_100080278);
    uint64_t v4 = (void *)swift_allocObject(v6, BYTE6(v0) + 32LL, 7LL);
    size_t v7 = j__malloc_size(v4);
    void v4[2] = BYTE6(v0);
    v4[3] = 2 * v7 - 64;
    sub_100012154(v2, v0);
    uint64_t v8 = ((uint64_t (*)(uint64_t, void *, void, uint64_t, unint64_t))Data._copyContents(initializing:))( v3,  v4 + 4,  BYTE6(v0),  v2,  v0);
    sub_10000D620(v2, v0);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v1);
    if (v8 != BYTE6(v0))
    {
      __break(1u);
      JUMPOUT(0x100048A3CLL);
    }
  }

  return v4;
}

uint64_t sub_100048A54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (!a1) {
    a2 = 0LL;
  }
  uint64_t result = static String._fromUTF8Repairing(_:)(a1, a2);
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_100048A88(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SomeAccessoryEvent(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v40 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v37 - v7;
  __chkstk_darwin(v6);
  BOOL v10 = (char *)&v37 - v9;
  uint64_t v11 = type metadata accessor for SomeEvent(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  unint64_t v38 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v37 - v16;
  __chkstk_darwin(v15);
  char v19 = (char *)&v37 - v18;
  id v20 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  uint64_t v39 = a1;
  v20((char *)&v37 - v18, a1, v11);
  if ((*(unsigned int (**)(char *, uint64_t))(v12 + 88))(v19, v11) == enum case for SomeEvent.accessory(_:))
  {
    (*(void (**)(char *, uint64_t))(v12 + 96))(v19, v11);
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v10, v19, v2);
    char v21 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
    v21(v8, v10, v2);
    int v22 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v8, v2);
    if (v22 == enum case for SomeAccessoryEvent.contactSensor(_:)
      || v22 == enum case for SomeAccessoryEvent.door(_:)
      || v22 == enum case for SomeAccessoryEvent.garageDoor(_:)
      || v22 == enum case for SomeAccessoryEvent.lock(_:)
      || v22 == enum case for SomeAccessoryEvent.securitySystem(_:)
      || v22 == enum case for SomeAccessoryEvent.smokeDetector(_:)
      || v22 == enum case for SomeAccessoryEvent.window(_:))
    {
      uint64_t v29 = *(void (**)(char *, uint64_t))(v3 + 8);
      v29(v10, v2);
      v29(v8, v2);
      return 1LL;
    }

    unint64_t v41 = 0LL;
    unint64_t v42 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(19LL);
    swift_bridgeObjectRelease(v42);
    unint64_t v41 = 0xD000000000000011LL;
    unint64_t v42 = 0x8000000100063E90LL;
    os_log_type_t v33 = v40;
    v21(v40, v10, v2);
    v34._countAndFlagsBits = String.init<A>(describing:)(v33, v2);
    object = v34._object;
    String.append(_:)(v34);
    swift_bridgeObjectRelease(object);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v41,  v42,  "homeeventsd/SharedHandlers+CreateEvents.swift",  45LL,  2LL,  84LL,  0);
  }

  else
  {
    v20(v17, v39, v11);
    unint64_t v41 = 0LL;
    unint64_t v42 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(19LL);
    swift_bridgeObjectRelease(v42);
    unint64_t v41 = 0xD000000000000011LL;
    unint64_t v42 = 0x8000000100063E90LL;
    uint64_t v30 = v38;
    v20(v38, (uint64_t)v17, v11);
    v31._countAndFlagsBits = String.init<A>(describing:)(v30, v11);
    uint64_t v32 = v31._object;
    String.append(_:)(v31);
    swift_bridgeObjectRelease(v32);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v41,  v42,  "homeeventsd/SharedHandlers+CreateEvents.swift",  45LL,  2LL,  97LL,  0);
  }

  __break(1u);
  return result;
}

uint64_t sub_100048E04(uint64_t a1, uint64_t a2)
{
  uint64_t v117 = a2;
  uint64_t v4 = type metadata accessor for SomeEvent(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v116 = (char *)&v103 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v119 = (char *)&v103 - v9;
  __chkstk_darwin(v8);
  uint64_t v120 = (char *)&v103 - v10;
  uint64_t v126 = type metadata accessor for Logger(0LL);
  uint64_t v11 = *(void *)(v126 - 8);
  uint64_t v12 = __chkstk_darwin(v126);
  uint64_t v14 = (char *)&v103 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v112 = (char *)&v103 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v107 = (char *)&v103 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v121 = (char *)&v103 - v20;
  __chkstk_darwin(v19);
  int v22 = (char *)&v103 - v21;
  uint64_t v23 = type metadata accessor for XPCServer();
  uint64_t v124 = sub_10000D1E8( (unint64_t *)&qword_10007F128,  (uint64_t (*)(uint64_t))type metadata accessor for XPCServer,  (uint64_t)&unk_100060A78);
  uint64_t v125 = (uint64_t *)v23;
  static LoggedObject.logger.getter(v23);
  swift_bridgeObjectRetain(a1);
  uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
  os_log_type_t v26 = ((uint64_t (*)(void))static os_log_type_t.default.getter)();
  BOOL v27 = os_log_type_enabled(v25, v26);
  uint64_t v104 = v14;
  uint64_t v108 = v4;
  if (v27)
  {
    uint64_t v28 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v28 = 134217984;
    uint64_t v4 = v108;
    uint64_t v132 = *(void *)(a1 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133, v28 + 4);
    swift_bridgeObjectRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Creating %ld events", v28, 0xCu);
    swift_slowDealloc(v28, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease(a1);
  }

  uint64_t v29 = *(void (**)(char *, uint64_t))(v11 + 8);
  v29(v22, v126);
  int64_t v30 = *(void *)(a1 + 16);
  uint64_t result = sub_10001C5C4(0, v30, 0, (unint64_t)_swiftEmptyArrayStorage);
  uint64_t v127 = v2;
  if (v30)
  {
    uint64_t v118 = result;
    __n128 v32 = swift_bridgeObjectRetain(a1);
    uint64_t v103 = a1;
    os_log_type_t v33 = (unint64_t *)(a1 + 40);
    v32.n128_u64[0] = 136315138LL;
    __n128 v110 = v32;
    uint64_t v106 = (char *)&type metadata for Any + 8;
    v32.n128_u64[0] = 136446210LL;
    __n128 v105 = v32;
    uint64_t v111 = v29;
    uint64_t v109 = v5;
    Swift::String v34 = v121;
    while (1)
    {
      uint64_t v35 = v29;
      uint64_t v122 = v33;
      int64_t v123 = v30;
      uint64_t v36 = *(v33 - 1);
      unint64_t v37 = *v33;
      unint64_t v38 = *v33 >> 62;
      sub_100012154(v36, *v33);
      static LoggedObject.logger.getter(v125);
      sub_100012154(v36, v37);
      uint64_t v39 = sub_100012154(v36, v37);
      uint64_t v40 = (os_log_s *)Logger.logObject.getter(v39);
      os_log_type_t v41 = static os_log_type_t.debug.getter();
      BOOL v42 = os_log_type_enabled(v40, v41);
      int v115 = (void (*)(unint64_t, char *, uint64_t))v38;
      if (v42)
      {
        uint64_t v43 = (_DWORD *)swift_slowAlloc(12LL, -1LL);
        uint64_t v44 = swift_slowAlloc(32LL, -1LL);
        *(void *)&__int128 v128 = v44;
        *uint64_t v43 = v110.n128_u32[0];
        uint64_t v45 = (char *)&loc_100049220 + dword_100049FD4[v38];
        uint64_t v114 = v43;
        uint64_t v113 = v44;
        __asm { BR              X9 }
      }

      sub_10000D620(v36, v37);
      sub_10000D620(v36, v37);

      uint64_t v29 = v35;
      v35(v34, v126);
      uint64_t v46 = (uint64_t)v120;
      uint64_t v47 = type metadata accessor for JSONDecoder(0LL);
      swift_allocObject(v47, *(unsigned int *)(v47 + 48), *(unsigned __int16 *)(v47 + 52));
      uint64_t v48 = JSONDecoder.init()();
      uint64_t v49 = sub_10000D1E8( &qword_100080330,  (uint64_t (*)(uint64_t))&type metadata accessor for SomeEvent,  (uint64_t)&protocol conformance descriptor for SomeEvent);
      uint64_t v50 = v119;
      uint64_t v51 = v127;
      dispatch thunk of JSONDecoder.decode<A>(_:from:)(v4, v36, v37, v4, v49);
      uint64_t v127 = v51;
      if (v51) {
        break;
      }
      swift_release(v48);
      uint64_t v52 = *(void (**)(uint64_t, char *, uint64_t))(v5 + 32);
      v52(v46, v50, v4);
      if ((sub_100048A88(v46) & 1) != 0)
      {
        int v115 = (void (*)(unint64_t, char *, uint64_t))v52;
        uint64_t v114 = (_DWORD *)v36;
        SomeEvent.anyEvent.getter(&v132);
        unint64_t v53 = v107;
        static LoggedObject.logger.getter(v125);
        uint64_t v54 = sub_10000D478((uint64_t)&v132, (uint64_t)&v128);
        uint64_t v55 = (os_log_s *)Logger.logObject.getter(v54);
        os_log_type_t v56 = static os_log_type_t.default.getter(v55);
        if (os_log_type_enabled(v55, v56))
        {
          uint64_t v57 = swift_slowAlloc(12LL, -1LL);
          uint64_t v58 = swift_slowAlloc(32LL, -1LL);
          uint64_t v134 = v58;
          *(_DWORD *)uint64_t v57 = v105.n128_u32[0];
          uint64_t v59 = v129;
          uint64_t v60 = sub_10000D408(&v128, v129);
          v131[0] = swift_getDynamicType(v60, v59, 1LL);
          v131[1] = v130;
          uint64_t v61 = sub_10000D228(&qword_100080348);
          uint64_t v62 = String.init<A>(describing:)(v131, v61);
          unint64_t v64 = v63;
          *(void *)(v57 + _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = sub_100046274(v62, v63, &v134);
          swift_bridgeObjectRelease(v64);
          _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(&v128);
          _os_log_impl( (void *)&_mh_execute_header,  v55,  v56,  "Successfully created %{public}s event",  (uint8_t *)v57,  0xCu);
          swift_arrayDestroy(v58, 1LL, (char *)&type metadata for Any + 8);
          uint64_t v65 = v58;
          uint64_t v29 = v111;
          swift_slowDealloc(v65, -1LL, -1LL);
          swift_slowDealloc(v57, -1LL, -1LL);
        }

        else
        {
          _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(&v128);
        }

        v29(v53, v126);
        os_log_type_t v66 = v112;
        static LoggedObject.logger.getter(v125);
        uint64_t v67 = sub_10000D478((uint64_t)&v132, (uint64_t)&v128);
        unint64_t v68 = (os_log_s *)Logger.logObject.getter(v67);
        os_log_type_t v69 = static os_log_type_t.info.getter(v68);
        if (os_log_type_enabled(v68, v69))
        {
          uint64_t v70 = swift_slowAlloc(12LL, -1LL);
          uint64_t v71 = swift_slowAlloc(32LL, -1LL);
          v131[0] = v71;
          *(_DWORD *)uint64_t v70 = v110.n128_u32[0];
          uint64_t v72 = v129;
          unint64_t v73 = sub_10000D408(&v128, v129);
          unint64_t v74 = v37;
          __chkstk_darwin(v73);
          uint64_t v76 = (char *)&v103 - ((v75 + 15) & 0xFFFFFFFFFFFFFFF0LL);
          (*(void (**)(char *))(v77 + 16))(v76);
          uint64_t v78 = v76;
          uint64_t v5 = v109;
          uint64_t v79 = String.init<A>(describing:)(v78, v72);
          unint64_t v81 = v80;
          uint64_t v82 = v126;
          *(void *)(v70 + _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = sub_100046274(v79, v80, v131);
          swift_bridgeObjectRelease(v81);
          _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(&v128);
          _os_log_impl((void *)&_mh_execute_header, v68, v69, "%s", (uint8_t *)v70, 0xCu);
          swift_arrayDestroy(v71, 1LL, (char *)&type metadata for Any + 8);
          uint64_t v83 = v71;
          uint64_t v29 = v111;
          swift_slowDealloc(v83, -1LL, -1LL);
          swift_slowDealloc(v70, -1LL, -1LL);

          uint64_t v84 = v112;
          uint64_t v85 = v82;
          unint64_t v37 = v74;
          uint64_t v4 = v108;
        }

        else
        {
          _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(&v128);

          uint64_t v84 = v66;
          uint64_t v85 = v126;
        }

        v29(v84, v85);
        uint64_t v86 = v120;
        Swift::String v34 = v121;
        (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v116, v120, v4);
        uint64_t v87 = v118;
        unint64_t v89 = *(void *)(v118 + 16);
        unint64_t v88 = *(void *)(v118 + 24);
        if (v89 >= v88 >> 1) {
          uint64_t v87 = sub_10001C5C4(v88 > 1, v89 + 1, 1, v118);
        }
        *(void *)(v87 + swift_unknownObjectWeakDestroy(v0 + 16) = v89 + 1;
        unint64_t v90 = (*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
        uint64_t v118 = v87;
        v115(v87 + v90 + *(void *)(v5 + 72) * v89, v116, v4);
        sub_10000D620((uint64_t)v114, v37);
        _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(&v132);
        (*(void (**)(char *, uint64_t))(v5 + 8))(v86, v4);
      }

      else
      {
        (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v46, v4);
        sub_10000D620(v36, v37);
        Swift::String v34 = v121;
      }

      os_log_type_t v33 = v122 + 2;
      int64_t v30 = v123 - 1;
      if (v123 == 1)
      {
        swift_bridgeObjectRelease(v103);
        return v118;
      }
    }

    swift_bridgeObjectRelease(v118);
    swift_bridgeObjectRelease(v103);
    swift_release(v48);
    uint64_t v91 = v104;
    static LoggedObject.logger.getter(v125);
    sub_100012154(v36, v37);
    uint64_t v92 = v127;
    swift_errorRetain(v127);
    sub_100012154(v36, v37);
    uint64_t v93 = swift_errorRetain(v92);
    uint64_t v94 = (os_log_s *)Logger.logObject.getter(v93);
    os_log_type_t v95 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v94, v95))
    {
      uint64_t v114 = (_DWORD *)v36;
      uint64_t v96 = swift_slowAlloc(22LL, -1LL);
      uint64_t v97 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v134 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)uint64_t v96 = 138543618;
      uint64_t v98 = v127;
      swift_errorRetain(v127);
      uint64_t v99 = _swift_stdlib_bridgeErrorToNSError(v98);
      uint64_t v132 = v99;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133, v96 + 4);
      uint64_t v125 = v97;
      *uint64_t v97 = v99;
      swift_errorRelease(v98);
      swift_errorRelease(v98);
      *(_WORD *)(v96 + 12) = 2080;
      __asm { BR              X10 }
    }

    uint64_t v100 = v127;
    swift_errorRelease(v127);
    swift_errorRelease(v100);
    sub_10000D620(v36, v37);
    sub_10000D620(v36, v37);

    uint64_t v101 = ((uint64_t (*)(char *, uint64_t))v35)(v91, v126);
    uint64_t v102 = v127;
    swift_willThrow(v101);
    uint64_t v127 = v102;
    return sub_10000D620(v36, v37);
  }

  return result;
}

uint64_t sub_100049FF4(uint64_t a1)
{
  uint64_t v2 = sub_10000D228(&qword_100080340);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10004A034(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  *(_BYTE *)(v5 + 113) = a5;
  *(_BYTE *)(v5 + 112) = a4;
  *(void *)(v5 + 2_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = a2;
  *(void *)(v5 + 32) = a3;
  *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  uint64_t v6 = type metadata accessor for SomeEvent(0LL);
  *(void *)(v5 + 40) = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  *(void *)(v5 + 48) = v7;
  *(void *)(v5 + sub_1000154A8(*(void *)(v0 + 152) + OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_database, v0 + 56) = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for EventRecord.DecodedEvent(0LL);
  *(void *)(v5 + 6_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)(v5 + 72) = v9;
  *(void *)(v5 + 80) = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10004A0C8, 0LL, 0LL);
}

uint64_t sub_10004A0C8()
{
  uint64_t v1 = sub_100048E04(*(void *)(v0 + 16), *(void *)(v0 + 24));
  uint64_t v2 = v1;
  int64_t v3 = *(void *)(v1 + 16);
  if (v3)
  {
    uint64_t v4 = *(void *)(v0 + 72);
    uint64_t v5 = *(void *)(v0 + 48);
    uint64_t v25 = _swiftEmptyArrayStorage;
    sub_10002CCAC(0, v3, 0);
    uint64_t v20 = v2;
    unint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v22 = *(void *)(v5 + 72);
    uint64_t v23 = v5;
    uint64_t v7 = *(void (**)(uint64_t, unint64_t, uint64_t))(v5 + 16);
    unsigned int v21 = enum case for EventRecord.DecodedEvent.someEvent(_:);
    uint64_t v8 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v9 = *(void *)(v0 + 80);
      uint64_t v11 = *(void *)(v0 + 56);
      uint64_t v10 = *(void *)(v0 + 64);
      uint64_t v12 = *(void *)(v0 + 40);
      v7(v11, v6, v12);
      v7(v9, v11, v12);
      (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v9, v21, v10);
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v11, v12);
      if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
      {
        sub_10002CCAC(0, v8[2] + 1LL, 1);
        uint64_t v8 = v25;
      }

      unint64_t v14 = v8[2];
      unint64_t v13 = v8[3];
      if (v14 >= v13 >> 1)
      {
        sub_10002CCAC(v13 > 1, v14 + 1, 1);
        uint64_t v8 = v25;
      }

      *(void *)(v0 + 88) = v8;
      uint64_t v15 = *(void *)(v0 + 80);
      uint64_t v16 = *(void *)(v0 + 64);
      v8[2] = v14 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))( (unint64_t)v8 + ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
      + *(void *)(v4 + 72) * v14,
        v15,
        v16);
      uint64_t v25 = v8;
      v6 += v22;
      --v3;
    }

    while (v3);
    swift_bridgeObjectRelease(v20);
    uint64_t v24 = (uint64_t (*)(uint64_t, uint64_t, char, char))((char *)&dword_1000800C8 + dword_1000800C8);
    uint64_t v17 = (void *)swift_task_alloc(unk_1000800CC);
    *(void *)(v0 + 96) = v17;
    void *v17 = v0;
    v17[1] = sub_10004A328;
    return v24((uint64_t)v8, *(void *)(v0 + 32), *(_BYTE *)(v0 + 112), *(_BYTE *)(v0 + 113));
  }

  else
  {
    swift_bridgeObjectRelease(v1);
    uint64_t v19 = *(void *)(v0 + 56);
    swift_task_dealloc(*(void *)(v0 + 80));
    swift_task_dealloc(v19);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_10004A328()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 96LL);
  *(void *)(*(void *)v1 + 104LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    int64_t v3 = sub_10004A3D4;
  }
  else {
    int64_t v3 = sub_10004A38C;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_10004A38C()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_task_dealloc(*(void *)(v0 + 80));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004A3D4()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_task_dealloc(*(void *)(v0 + 80));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004A41C(uint64_t a1, uint64_t a2)
{
  v2[5] = a1;
  v2[6] = a2;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  v2[7] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[8] = v4;
  unint64_t v5 = (*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[9] = swift_task_alloc(v5);
  v2[10] = swift_task_alloc(v5);
  v2[11] = swift_task_alloc(v5);
  return swift_task_switch(sub_10004A498, 0LL, 0LL);
}

uint64_t sub_10004A498()
{
  v0[12] = sub_10004C708();
  uint64_t v1 = static LoggedObject.logger.getter(&type metadata for ZoneUtils);
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Fetching all record zones", v4, 2u);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  uint64_t v5 = v0[11];
  uint64_t v6 = v0[7];
  uint64_t v7 = v0[8];
  uint64_t v8 = v0[6];

  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v0[13] = v9;
  v9(v5, v6);
  uint64_t v10 = (void *)swift_task_alloc(async function pointer to CKDatabase.configuredWith<A>(configuration:group:body:)[1]);
  v0[14] = v10;
  uint64_t v11 = sub_10000D228(&qword_100080398);
  *uint64_t v10 = v0;
  v10[1] = sub_10004A5D8;
  return CKDatabase.configuredWith<A>(configuration:group:body:)(v0 + 2, 0LL, v8, &unk_100080390, 0LL, v11);
}

uint64_t sub_10004A5D8()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 112LL);
  *(void *)(*(void *)v1 + 12(*(void (**)(void, void, void))(v0 + 16))(*(void *)(v0 + 32), *(void *)(v0 + 40), 0LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    os_log_type_t v3 = sub_10004A97C;
  }
  else {
    os_log_type_t v3 = sub_10004A63C;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_10004A63C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  static LoggedObject.logger.getter(&type metadata for ZoneUtils);
  uint64_t v2 = swift_bridgeObjectRetain_n(v1, 2LL);
  os_log_type_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v5 = 134217984;
    if ((unint64_t)v1 >> 62)
    {
      if (v1 < 0) {
        uint64_t v24 = v1;
      }
      else {
        uint64_t v24 = v1 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v1);
      uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v24);
      swift_bridgeObjectRelease(v1);
    }

    else
    {
      uint64_t v6 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    swift_bridgeObjectRelease(v1);
    *(void *)(v0 + 32) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v5 + 4);
    swift_bridgeObjectRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Found %ld zone(s)", v5, 0xCu);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v1, 2LL);
  }

  (*(void (**)(void, void))(v0 + 104))(*(void *)(v0 + 80), *(void *)(v0 + 56));
  static LoggedObject.logger.getter(&type metadata for ZoneUtils);
  uint64_t v7 = swift_bridgeObjectRetain_n(v1, 2LL);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  BOOL v10 = os_log_type_enabled(v8, v9);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v0 + 104);
  uint64_t v12 = *(void *)(v0 + 72);
  uint64_t v13 = *(void *)(v0 + 56);
  if (v10)
  {
    os_log_type_t v26 = *(void (**)(uint64_t, uint64_t))(v0 + 104);
    unint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v15 = swift_slowAlloc(32LL, -1LL);
    uint64_t v27 = v15;
    *(_DWORD *)unint64_t v14 = 136315138;
    uint64_t v25 = v12;
    uint64_t v16 = sub_10000D5E8(0LL, &qword_10007FBC0, &OBJC_CLASS___CKRecordZone_ptr);
    swift_bridgeObjectRetain(v1);
    uint64_t v18 = Array.description.getter(v17, v16);
    unint64_t v20 = v19;
    swift_bridgeObjectRelease(v1);
    *(void *)(v0 + 2_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = sub_100046274(v18, v20, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v14 + 4);
    swift_bridgeObjectRelease(v20);
    swift_bridgeObjectRelease_n(v1, 2LL);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%s", v14, 0xCu);
    swift_arrayDestroy(v15, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1LL, -1LL);
    swift_slowDealloc(v14, -1LL, -1LL);

    v26(v25, v13);
  }

  else
  {
    swift_bridgeObjectRelease_n(v1, 2LL);

    v11(v12, v13);
  }

  uint64_t v21 = *(void *)(v0 + 80);
  uint64_t v22 = *(void *)(v0 + 72);
  swift_task_dealloc(*(void *)(v0 + 88));
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_10004A97C()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 72);
  swift_task_dealloc(*(void *)(v0 + 88));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004A9C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  uint64_t v4 = type metadata accessor for Logger(0LL);
  v3[6] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[7] = v5;
  v3[8] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10004AA28, 0LL, 0LL);
}

uint64_t sub_10004AA28()
{
  uint64_t v1 = v0[3];
  sub_10004C708();
  static LoggedObject.logger.getter(&type metadata for ZoneUtils);
  uint64_t v2 = swift_bridgeObjectRetain_n(v1, 2LL);
  os_log_type_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v22 = v0[7];
    uint64_t v23 = v0[6];
    uint64_t v24 = v0[8];
    uint64_t v5 = v0[3];
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    uint64_t v25 = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    uint64_t v8 = sub_10000D5E8(0LL, (unint64_t *)&qword_10007F490, &OBJC_CLASS___CKRecordZoneID_ptr);
    swift_bridgeObjectRetain(v5);
    uint64_t v10 = Array.description.getter(v9, v8);
    unint64_t v12 = v11;
    swift_bridgeObjectRelease(v5);
    v0[2] = sub_100046274(v10, v12, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v6 + 4);
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease_n(v5, 2LL);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Deleting zone(s) %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);

    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v24, v23);
  }

  else
  {
    uint64_t v14 = v0[7];
    uint64_t v13 = v0[8];
    uint64_t v15 = v0[6];
    swift_bridgeObjectRelease_n(v0[3], 2LL);

    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  }

  uint64_t v16 = v0[4];
  uint64_t v17 = v0[5];
  uint64_t v18 = v0[3];
  unint64_t v19 = (void *)swift_task_alloc(48LL);
  v0[9] = v19;
  v19[2] = v16;
  v19[3] = v17;
  void v19[4] = v18;
  unint64_t v20 = (void *)swift_task_alloc(async function pointer to CKDatabase.configuredWith<A>(configuration:group:body:)[1]);
  v0[10] = v20;
  *unint64_t v20 = v0;
  v20[1] = sub_10004AC98;
  return CKDatabase.configuredWith<A>(configuration:group:body:)();
}

uint64_t sub_10004AC98()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 80);
  *(void *)(*v1 + 88) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    os_log_type_t v4 = sub_10002F0D4;
  }

  else
  {
    swift_task_dealloc(*(void *)(v2 + 72));
    os_log_type_t v4 = sub_10004AD04;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_10004AD04()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004AD38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  uint64_t v4 = type metadata accessor for Logger(0LL);
  v3[6] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[7] = v5;
  v3[8] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10004AD9C, 0LL, 0LL);
}

uint64_t sub_10004AD9C()
{
  uint64_t v1 = v0[3];
  sub_10004C708();
  static LoggedObject.logger.getter(&type metadata for ZoneUtils);
  swift_bridgeObjectRetain_n(v1, 2LL);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.info.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v21 = v0[7];
    uint64_t v22 = v0[6];
    uint64_t v23 = v0[8];
    uint64_t v5 = v0[3];
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    uint64_t v24 = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    uint64_t v8 = sub_10000D5E8(0LL, (unint64_t *)&qword_10007F490, &OBJC_CLASS___CKRecordZoneID_ptr);
    swift_bridgeObjectRetain(v5);
    uint64_t v10 = Array.description.getter(v9, v8);
    unint64_t v12 = v11;
    swift_bridgeObjectRelease(v5);
    v0[2] = sub_100046274(v10, v12, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v6 + 4);
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease_n(v5, 2LL);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Ensuring zone(s) exist %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);

    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v23, v22);
  }

  else
  {
    uint64_t v14 = v0[7];
    uint64_t v13 = v0[8];
    uint64_t v15 = v0[6];
    swift_bridgeObjectRelease_n(v0[3], 2LL);

    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  }

  uint64_t v16 = v0[5];
  uint64_t v17 = v0[3];
  uint64_t v18 = swift_task_alloc(32LL);
  v0[9] = v18;
  *(void *)(v18 + swift_unknownObjectWeakDestroy(v0 + 16) = v17;
  unint64_t v19 = (void *)swift_task_alloc(async function pointer to CKDatabase.configuredWith<A>(configuration:group:body:)[1]);
  v0[10] = v19;
  *unint64_t v19 = v0;
  v19[1] = sub_10004AC98;
  return CKDatabase.configuredWith<A>(configuration:group:body:)( v19,  0LL,  v16,  &unk_1000803C0,  v18,  (char *)&type metadata for () + 8);
}

void sub_10004B008(void **a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  unint64_t v24 = 0xE000000000000000LL;
  v23[0] = 47LL;
  v23[1] = 0xE100000000000000LL;
  v23[2] = 0LL;
  v22[2] = v23;
  uint64_t v6 = (void *)sub_10001BC90( 0x7FFFFFFFFFFFFFFFLL,  1,  sub_100048548,  (uint64_t)v22,  0xD00000000000001BLL,  0x8000000100063ED0LL);
  uint64_t v7 = v6;
  if (v6[2])
  {
    uint64_t v8 = v6[4];
    uint64_t v9 = v6[5];
    uint64_t v10 = v6[6];
    uint64_t v11 = v6[7];
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRelease(v7);
    v12._countAndFlagsBits = static String._fromSubstring(_:)(v8, v9, v10, v11);
    object = v12._object;
    String.append(_:)(v12);
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(object);
    v14._countAndFlagsBits = 46LL;
    v14._object = (void *)0xE100000000000000LL;
    String.append(_:)(v14);
    v23[0] = &type metadata for ZoneUtils;
    uint64_t v15 = sub_10000D228(&qword_1000803A8);
    v16._countAndFlagsBits = String.init<A>(describing:)(v23, v15);
    uint64_t v17 = v16._object;
    String.append(_:)(v16);
    swift_bridgeObjectRelease(v17);
    unint64_t v18 = v24;
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v18);
    [v5 setName:v19];

    [v5 setExpectedSendSize:1];
    id v20 = [objc_allocWithZone(CKOperationConfiguration) init];
    id v21 = [a2 container];
    [v20 setContainer:v21];

    [v20 setQualityOfService:a3];
    [v5 setDefaultConfiguration:v20];
  }

  else
  {
    swift_bridgeObjectRelease(v6);
    __break(1u);
  }

uint64_t sub_10004B210(uint64_t a1, uint64_t a2)
{
  v2[20] = a1;
  v2[21] = a2;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  v2[22] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[23] = v4;
  v2[24] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_10000D228(&qword_1000803A0);
  v2[25] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[26] = v6;
  v2[27] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10004B29C, 0LL, 0LL);
}

uint64_t sub_10004B29C()
{
  uint64_t v1 = v0 + 2;
  uint64_t v3 = v0[26];
  uint64_t v2 = v0[27];
  uint64_t v4 = v0[25];
  uint64_t v5 = (void *)v0[21];
  v0[7] = v0 + 18;
  v0[2] = v0;
  v0[3] = sub_10004B3C4;
  uint64_t v6 = swift_continuation_init(v0 + 2, 1LL);
  v0[17] = v4;
  uint64_t v7 = sub_10000D27C(v0 + 14);
  uint64_t v8 = sub_10000D228(&qword_100080398);
  uint64_t v9 = sub_10000D228((uint64_t *)&unk_10007EC20);
  CheckedContinuation.init(continuation:function:)( v6,  0xD000000000000026LL,  0x80000001000624F0LL,  v8,  v9,  &protocol self-conformance witness table for Error);
  (*(void (**)(void *, uint64_t, uint64_t))(v3 + 32))(v7, v2, v4);
  v0[10] = _NSConcreteStackBlock;
  uint64_t v10 = v0 + 10;
  v10[1] = 1107296256LL;
  _OWORD v10[2] = sub_10004B644;
  v10[3] = &unk_1000779C8;
  [v5 fetchAllRecordZonesWithCompletionHandler:v10];
  return swift_continuation_await(v1);
}

uint64_t sub_10004B3C4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 224LL) = v1;
  if (v1) {
    uint64_t v2 = sub_10004B470;
  }
  else {
    uint64_t v2 = sub_10004B424;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_10004B424()
{
  uint64_t v1 = *(void *)(v0 + 216);
  uint64_t v2 = *(void *)(v0 + 192);
  **(void **)(v0 + 160) = *(void *)(v0 + 144);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004B470(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 224);
  swift_willThrow(a1);
  sub_10004C708();
  static LoggedObject.logger.getter(&type metadata for ZoneUtils);
  swift_errorRetain(v2);
  uint64_t v3 = swift_errorRetain(v2);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(void *)(v1 + 224);
    uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v8 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v7 = 138543362;
    swift_errorRetain(v6);
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError(v6);
    *(void *)(v1 + 152) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 152, v1 + 160, v7 + 4);
    *uint64_t v8 = v9;
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to fetch all record zones: %{public}@", v7, 0xCu);
    uint64_t v10 = sub_10000D228(&qword_10007EE38);
    swift_arrayDestroy(v8, 1LL, v10);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {
    uint64_t v11 = *(void *)(v1 + 224);
    swift_errorRelease(v11);
    swift_errorRelease(v11);
  }

  uint64_t v12 = *(void *)(v1 + 216);
  uint64_t v14 = *(void *)(v1 + 184);
  uint64_t v13 = *(void *)(v1 + 192);
  uint64_t v15 = *(void *)(v1 + 176);

  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  swift_willThrow(v16);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_10004B644(uint64_t a1, uint64_t a2, void *a3)
{
  if (a3)
  {
    uint64_t v9 = (uint64_t)a3;
    id v5 = a3;
    uint64_t v6 = sub_10000D228(&qword_1000803A0);
    CheckedContinuation.resume(throwing:)(&v9, v6);
  }

  else
  {
    uint64_t v7 = sub_10000D5E8(0LL, &qword_10007FBC0, &OBJC_CLASS___CKRecordZone_ptr);
    uint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v7);
    uint64_t v8 = sub_10000D228(&qword_1000803A0);
    CheckedContinuation.resume(returning:)(&v9, v8);
  }

uint64_t sub_10004B6FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[4] = a2;
  v3[5] = a3;
  uint64_t v4 = type metadata accessor for Logger(0LL);
  v3[6] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[7] = v5;
  unint64_t v6 = (*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[8] = swift_task_alloc(v6);
  void v3[9] = swift_task_alloc(v6);
  return swift_task_switch(sub_10004B76C, 0LL, 0LL);
}

uint64_t sub_10004B76C()
{
  uint64_t v1 = v0[5];
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0) {
      uint64_t v14 = v0[5];
    }
    else {
      uint64_t v14 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v0[5]);
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v14);
    swift_bridgeObjectRelease(v1);
  }

  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  if (!v2) {
    goto LABEL_10;
  }
  uint64_t result = specialized ContiguousArray.reserveCapacity(_:)(v2);
  if ((v2 & 0x8000000000000000LL) == 0)
  {
    uint64_t v4 = 0LL;
    unint64_t v5 = v1 & 0xC000000000000001LL;
    uint64_t v6 = v0[5] + 32LL;
    do
    {
      if (v5) {
        id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v0[5]);
      }
      else {
        id v7 = *(id *)(v6 + 8 * v4);
      }
      uint64_t v8 = v7;
      ++v4;
      id v9 = [objc_allocWithZone(CKRecordZone) initWithZoneID:v7];

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v10);
      uint64_t v11 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v11);
      uint64_t v12 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v9);
      specialized ContiguousArray._endMutation()(v12);
    }

    while (v2 != v4);
LABEL_10:
    v0[10] = _swiftEmptyArrayStorage;
    uint64_t v13 = (void *)swift_task_alloc(async function pointer to CKDatabase.modifyRecordZones(saving:deleting:)[1]);
    v0[11] = v13;
    *uint64_t v13 = v0;
    v13[1] = sub_10004B8E8;
    return CKDatabase.modifyRecordZones(saving:deleting:)(_swiftEmptyArrayStorage, _swiftEmptyArrayStorage);
  }

  __break(1u);
  return result;
}

uint64_t sub_10004B8E8(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  uint64_t v7 = *(void *)(*v3 + 88);
  *(void *)(*v3 + 96) = v2;
  swift_task_dealloc(v7);
  uint64_t v8 = *(void *)(v6 + 80);
  if (v2)
  {
    swift_bridgeObjectRelease(*(void *)(v6 + 80));
    id v9 = sub_10004BC3C;
  }

  else
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(v8);
    *(void *)(v6 + 10_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = a1;
    id v9 = sub_10004B984;
  }

  return swift_task_switch(v9, 0LL, 0LL);
}

uint64_t sub_10004B984()
{
  uint64_t v1 = v0[13];
  sub_10004BE2C( v1,  (void (*)(uint64_t, uint64_t, __n128))sub_10002D350,  (void (*)(uint64_t, uint64_t))sub_10002D35C);
  uint64_t v3 = v2;
  swift_bridgeObjectRelease(v1);
  uint64_t v4 = v0[9];
  if (*(void *)(v3 + 16))
  {
    sub_10004C708();
    static LoggedObject.logger.getter(&type metadata for ZoneUtils);
    swift_bridgeObjectRetain_n(v3, 2LL);
    uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.error.getter();
    BOOL v8 = os_log_type_enabled(v6, v7);
    uint64_t v9 = v0[9];
    uint64_t v10 = v0[6];
    uint64_t v11 = v0[7];
    if (v8)
    {
      uint64_t v30 = v0[9];
      uint64_t v29 = v0[7];
      uint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v13 = swift_slowAlloc(32LL, -1LL);
      uint64_t v31 = v13;
      *(_DWORD *)uint64_t v12 = 136446210;
      uint64_t v14 = sub_10000D5E8(0LL, (unint64_t *)&qword_10007F490, &OBJC_CLASS___CKRecordZoneID_ptr);
      swift_bridgeObjectRetain(v3);
      uint64_t v28 = v10;
      uint64_t v15 = sub_10000D228((uint64_t *)&unk_10007EC20);
      unint64_t v16 = sub_10004C80C();
      uint64_t v17 = Dictionary.description.getter(v3, v14, v15, v16);
      unint64_t v19 = v18;
      swift_bridgeObjectRelease(v3);
      v0[3] = sub_100046274(v17, v19, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v12 + 4);
      swift_bridgeObjectRelease(v19);
      swift_bridgeObjectRelease_n(v3, 2LL);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Zone addition(s) failed: %{public}s", v12, 0xCu);
      swift_arrayDestroy(v13, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1LL, -1LL);
      swift_slowDealloc(v12, -1LL, -1LL);

      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v30, v28);
    }

    else
    {
      swift_bridgeObjectRelease_n(v3, 2LL);

      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    }

    unint64_t v22 = sub_10004C7C8();
    uint64_t v23 = swift_allocError(&type metadata for CloudKitError, v22, 0LL, 0LL);
    uint64_t v25 = v0[8];
    uint64_t v24 = v0[9];
    *(void *)uint64_t v26 = v3;
    *(_BYTE *)(v26 + 8) = 2;
    swift_willThrow(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    id v21 = (uint64_t (*)(void))v0[1];
  }

  else
  {
    uint64_t v20 = v0[8];
    swift_bridgeObjectRelease(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v20);
    id v21 = (uint64_t (*)(void))v0[1];
  }

  return v21();
}

uint64_t sub_10004BC3C()
{
  uint64_t v1 = *(void *)(v0 + 96);
  sub_10004C708();
  static LoggedObject.logger.getter(&type metadata for ZoneUtils);
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void *)(v0 + 96);
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    os_log_type_t v7 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v6 = 138543362;
    swift_errorRetain(v5);
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v6 + 4);
    *os_log_type_t v7 = v8;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "CloudKit add zone failed: %{public}@", v6, 0xCu);
    uint64_t v9 = sub_10000D228(&qword_10007EE38);
    swift_arrayDestroy(v7, 1LL, v9);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  else
  {
    uint64_t v10 = *(void *)(v0 + 96);
    swift_errorRelease(v10);
    swift_errorRelease(v10);
  }

  (*(void (**)(void, void))(*(void *)(v0 + 56) + 8LL))(*(void *)(v0 + 64), *(void *)(v0 + 48));
  unint64_t v11 = sub_10004C7C8();
  uint64_t v12 = swift_allocError(&type metadata for CloudKitError, v11, 0LL, 0LL);
  uint64_t v14 = *(void *)(v0 + 64);
  uint64_t v13 = *(void *)(v0 + 72);
  *(void *)uint64_t v15 = *(void *)(v0 + 96);
  *(_BYTE *)(v15 + 8) = 0;
  swift_willThrow(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10004BE2C( uint64_t a1, void (*a2)(uint64_t, uint64_t, __n128), void (*a3)(uint64_t, uint64_t))
{
  uint64_t v4 = a1 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a1 + 32);
  if (-v5 < 64) {
    uint64_t v6 = ~(-1LL << -(char)v5);
  }
  else {
    uint64_t v6 = -1LL;
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v8 = (unint64_t)(63 - v5) >> 6;
  __n128 v9 = swift_bridgeObjectRetain(a1);
  int64_t v10 = 0LL;
  if (!v7) {
    goto LABEL_8;
  }
LABEL_5:
  unint64_t v11 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  unint64_t v12 = v11 | (v10 << 6);
  while (1)
  {
    uint64_t v13 = *(void *)(a1 + 56) + 16 * v12;
    if (*(_BYTE *)(v13 + 8) == 1)
    {
      unint64_t v18 = *(void **)(*(void *)(a1 + 48) + 8 * v12);
      uint64_t v19 = *(void *)v13;
      unint64_t v20 = *((void *)&_swiftEmptyDictionarySingleton + 2);
      if (*((void *)&_swiftEmptyDictionarySingleton + 3) <= v20)
      {
        uint64_t v22 = v20 + 1;
        a2(v19, 1LL, v9);
        ((void (*)(uint64_t, uint64_t))a2)(v19, 1LL);
        id v23 = v18;
        sub_10005BBA8(v22, 1LL);
      }

      else
      {
        a2(v19, 1LL, v9);
        ((void (*)(uint64_t, uint64_t))a2)(v19, 1LL);
        id v21 = v18;
      }

      Swift::Int v24 = NSObject._rawHashValue(seed:)(*((void *)&_swiftEmptyDictionarySingleton + 5));
      uint64_t v25 = (char *)&_swiftEmptyDictionarySingleton + 64;
      uint64_t v26 = -1LL << *((_BYTE *)&_swiftEmptyDictionarySingleton + 32);
      unint64_t v27 = v24 & ~v26;
      unint64_t v28 = v27 >> 6;
      if (((-1LL << v27) & ~*((void *)&_swiftEmptyDictionarySingleton + (v27 >> 6) + 8)) == 0)
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v26) >> 6;
        while (++v28 != v31 || (v30 & 1) == 0)
        {
          BOOL v32 = v28 == v31;
          if (v28 == v31) {
            unint64_t v28 = 0LL;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)&v25[8 * v28];
          if (v33 != -1)
          {
            unint64_t v29 = __clz(__rbit64(~v33)) + (v28 << 6);
            goto LABEL_37;
          }
        }

        goto LABEL_41;
      }

      unint64_t v29 = __clz(__rbit64((-1LL << v27) & ~*((void *)&_swiftEmptyDictionarySingleton + (v27 >> 6) + 8))) | v27 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_37:
      *(void *)&v25[(v29 >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << v29;
      uint64_t v34 = 8 * v29;
      *(void *)(*((void *)&_swiftEmptyDictionarySingleton + 6) + v3_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = v18;
      *(void *)(*((void *)&_swiftEmptyDictionarySingleton + 7) + v3_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = v19;
      ++*((void *)&_swiftEmptyDictionarySingleton + 2);
      a3(v19, 1LL);
      if (v7) {
        goto LABEL_5;
      }
    }

    else if (v7)
    {
      goto LABEL_5;
    }

LABEL_42:
  __break(1u);
}

uint64_t sub_10004C130(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = type metadata accessor for Logger(0LL);
  v5[4] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  void v5[5] = v8;
  unint64_t v9 = (*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  void v5[6] = swift_task_alloc(v9);
  v5[7] = swift_task_alloc(v9);
  int64_t v10 = (void *)swift_task_alloc(async function pointer to CKDatabase.modifyRecordZones(saving:deleting:)[1]);
  v5[8] = v10;
  *int64_t v10 = v5;
  v10[1] = sub_10004C1D4;
  return CKDatabase.modifyRecordZones(saving:deleting:)(_swiftEmptyArrayStorage, a5);
}

uint64_t sub_10004C1D4(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  uint64_t v7 = *(void *)(*v3 + 64);
  *(void *)(*v3 + 72) = v2;
  swift_task_dealloc(v7);
  if (v2)
  {
    uint64_t v8 = sub_10004C518;
  }

  else
  {
    *(void *)(v6 + 80) = a2;
    swift_bridgeObjectRelease(a1);
    uint64_t v8 = sub_10004C254;
  }

  return swift_task_switch(v8, 0LL, 0LL);
}

uint64_t sub_10004C254()
{
  uint64_t v1 = v0[10];
  sub_10004BE2C( v1,  (void (*)(uint64_t, uint64_t, __n128))sub_100037964,  (void (*)(uint64_t, uint64_t))sub_100037970);
  uint64_t v3 = v2;
  swift_bridgeObjectRelease(v1);
  uint64_t v4 = v0[7];
  if (*(void *)(v3 + 16))
  {
    sub_10004C708();
    static LoggedObject.logger.getter(&type metadata for ZoneUtils);
    swift_bridgeObjectRetain_n(v3, 2LL);
    uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.error.getter();
    BOOL v8 = os_log_type_enabled(v6, v7);
    uint64_t v9 = v0[4];
    uint64_t v10 = v0[7];
    uint64_t v11 = v0[5];
    if (v8)
    {
      uint64_t v29 = v0[7];
      uint64_t v28 = v0[4];
      unint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v13 = swift_slowAlloc(32LL, -1LL);
      uint64_t v30 = v13;
      *(_DWORD *)unint64_t v12 = 136446210;
      uint64_t v14 = sub_10000D5E8(0LL, (unint64_t *)&qword_10007F490, &OBJC_CLASS___CKRecordZoneID_ptr);
      swift_bridgeObjectRetain(v3);
      uint64_t v15 = sub_10000D228((uint64_t *)&unk_10007EC20);
      unint64_t v16 = sub_10004C80C();
      uint64_t v17 = Dictionary.description.getter(v3, v14, v15, v16);
      unint64_t v19 = v18;
      swift_bridgeObjectRelease(v3);
      v0[3] = sub_100046274(v17, v19, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v12 + 4);
      swift_bridgeObjectRelease(v19);
      swift_bridgeObjectRelease_n(v3, 2LL);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Zone deletion(s) failed: %{public}s", v12, 0xCu);
      swift_arrayDestroy(v13, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1LL, -1LL);
      swift_slowDealloc(v12, -1LL, -1LL);

      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v29, v28);
    }

    else
    {
      swift_bridgeObjectRelease_n(v3, 2LL);

      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v9);
    }

    unint64_t v22 = sub_10004C7C8();
    uint64_t v23 = swift_allocError(&type metadata for CloudKitError, v22, 0LL, 0LL);
    uint64_t v25 = v0[6];
    uint64_t v24 = v0[7];
    *(void *)uint64_t v26 = v3;
    *(_BYTE *)(v26 + 8) = 2;
    swift_willThrow(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    id v21 = (uint64_t (*)(void))v0[1];
  }

  else
  {
    uint64_t v20 = v0[6];
    swift_bridgeObjectRelease(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v20);
    id v21 = (uint64_t (*)(void))v0[1];
  }

  return v21();
}

uint64_t sub_10004C518()
{
  uint64_t v1 = *(void *)(v0 + 72);
  sub_10004C708();
  static LoggedObject.logger.getter(&type metadata for ZoneUtils);
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void *)(v0 + 72);
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    os_log_type_t v7 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v6 = 138543362;
    swift_errorRetain(v5);
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v6 + 4);
    *os_log_type_t v7 = v8;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "CloudKit delete failed: %{public}@", v6, 0xCu);
    uint64_t v9 = sub_10000D228(&qword_10007EE38);
    swift_arrayDestroy(v7, 1LL, v9);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  else
  {
    uint64_t v10 = *(void *)(v0 + 72);
    swift_errorRelease(v10);
    swift_errorRelease(v10);
  }

  (*(void (**)(void, void))(*(void *)(v0 + 40) + 8LL))(*(void *)(v0 + 48), *(void *)(v0 + 32));
  unint64_t v11 = sub_10004C7C8();
  uint64_t v12 = swift_allocError(&type metadata for CloudKitError, v11, 0LL, 0LL);
  uint64_t v14 = *(void *)(v0 + 48);
  uint64_t v13 = *(void *)(v0 + 56);
  *(void *)uint64_t v15 = *(void *)(v0 + 72);
  *(_BYTE *)(v15 + 8) = 0;
  swift_willThrow(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_10004C708()
{
  unint64_t result = qword_100080360;
  if (!qword_100080360)
  {
    unint64_t result = swift_getWitnessTable(&unk_100061CF8, &type metadata for ZoneUtils);
    atomic_store(result, &qword_100080360);
  }

  return result;
}

uint64_t sub_10004C74C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = (void *)swift_task_alloc(dword_10008036C);
  *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = v9;
  void *v9 = v3;
  v9[1] = sub_10001D0F0;
  return sub_10004C130(a1, a2, v6, v7, v8);
}

unint64_t sub_10004C7C8()
{
  unint64_t result = qword_100080378;
  if (!qword_100080378)
  {
    unint64_t result = swift_getWitnessTable(&unk_100060C08, &type metadata for CloudKitError);
    atomic_store(result, (unint64_t *)&qword_100080378);
  }

  return result;
}

unint64_t sub_10004C80C()
{
  unint64_t result = qword_100080380;
  if (!qword_100080380)
  {
    uint64_t v1 = sub_10000D5E8(255LL, (unint64_t *)&qword_10007F490, &OBJC_CLASS___CKRecordZoneID_ptr);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, &qword_100080380);
  }

  return result;
}

uint64_t sub_10004C864(uint64_t a1, uint64_t a2)
{
  return sub_10000D2C8(a2 + 32, a1 + 32);
}

uint64_t sub_10004C874(uint64_t a1)
{
  return _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0((void *)(a1 + 32));
}

uint64_t sub_10004C87C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = (void *)swift_task_alloc(dword_1000803BC);
  *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_10000D3C0;
  return sub_10004B6FC(a1, a2, v6);
}

void *initializeBufferWithCopyOfBuffer for ZoneUtils(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  os_log_type_t v4 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  id v5 = v3;
  id v6 = v4;
  return a1;
}

void destroy for ZoneUtils(id *a1)
{
}

uint64_t assignWithCopy for ZoneUtils(uint64_t a1, uint64_t a2)
{
  os_log_type_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  uint64_t v7 = *(void **)(a2 + 8);
  uint64_t v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  id v9 = v7;

  return a1;
}

uint64_t assignWithTake for ZoneUtils(uint64_t a1, _OWORD *a2)
{
  os_log_type_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

ValueMetadata *type metadata accessor for ZoneUtils()
{
  return &type metadata for ZoneUtils;
}

uint64_t sub_10004C9E0()
{
  v1[3] = v0;
  v1[4] = *v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  v1[5] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[6] = v3;
  unint64_t v4 = (*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[7] = swift_task_alloc(v4);
  v1[8] = swift_task_alloc(v4);
  return swift_task_switch(sub_10004CA58, 0LL, 0LL);
}

uint64_t sub_10004CA58(uint64_t a1)
{
  if ((static Task<>.isCancelled.getter(a1) & 1) != 0)
  {
    uint64_t v3 = *(void *)(v1 + 32);
    sub_100013014( (unint64_t *)&qword_10007F140,  v2,  (uint64_t (*)(uint64_t))type metadata accessor for EventUploader,  (uint64_t)&unk_100061E74);
    uint64_t v4 = static LoggedObject.logger.getter(v3);
    id v5 = (os_log_s *)Logger.logObject.getter(v4);
    os_log_type_t v6 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Canceled before fetching pending events", v7, 2u);
      swift_slowDealloc(v7, -1LL, -1LL);
    }

    uint64_t v8 = *(void *)(v1 + 64);
    uint64_t v9 = *(void *)(v1 + 40);
    uint64_t v10 = *(void *)(v1 + 48);

    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
    uint64_t v11 = type metadata accessor for CancellationError(0LL);
    uint64_t v12 = sub_100013014( &qword_1000804D8,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for CancellationError,  (uint64_t)&protocol conformance descriptor for CancellationError);
    swift_allocError(v11, v12, 0LL, 0LL);
    uint64_t v13 = CancellationError.init()();
    swift_willThrow(v13);
    uint64_t v14 = *(void *)(v1 + 56);
    swift_task_dealloc(*(void *)(v1 + 64));
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }

  else
  {
    unint64_t v16 = *(void **)(v1 + 24);
    *(void *)(v1 + 72) = v16[16];
    sub_10000D408(v16 + 7, v16[10]);
    uint64_t v17 = (void *)swift_task_alloc(dword_100080604);
    *(void *)(v1 + 80) = v17;
    void *v17 = v1;
    v17[1] = sub_10004CC14;
    return sub_10005507C(*(void *)(v1 + 72));
  }

uint64_t sub_10004CC14(uint64_t a1)
{
  uint64_t v3 = *(void *)(*v2 + 80);
  uint64_t v4 = *v2;
  *(void *)(v4 + 88) = a1;
  swift_task_dealloc(v3);
  if (!v1) {
    return swift_task_switch(sub_10004CC98, 0LL, 0LL);
  }
  uint64_t v5 = *(void *)(v4 + 56);
  swift_task_dealloc(*(void *)(v4 + 64));
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_10004CC98()
{
  uint64_t v1 = v0[11];
  if (*(void *)(v1 + 16))
  {
    if ((static Task<>.isCancelled.getter(v1) & 1) == 0)
    {
      uint64_t v15 = (void *)swift_task_alloc(dword_100080494);
      v0[12] = v15;
      *uint64_t v15 = v0;
      v15[1] = sub_10004CEE0;
      return sub_10004DDEC(v0[11]);
    }

    uint64_t v3 = v0[11];
    uint64_t v4 = v0[4];
    sub_100013014( (unint64_t *)&qword_10007F140,  v2,  (uint64_t (*)(uint64_t))type metadata accessor for EventUploader,  (uint64_t)&unk_100061E74);
    static LoggedObject.logger.getter(v4);
    uint64_t v5 = swift_bridgeObjectRetain(v3);
    os_log_type_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.info.getter();
    BOOL v8 = os_log_type_enabled(v6, v7);
    uint64_t v9 = v0[11];
    if (v8)
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)uint64_t v10 = 134217984;
      uint64_t v11 = *(void *)(v9 + 16);
      swift_bridgeObjectRelease(v9);
      v0[2] = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v10 + 4);
      swift_bridgeObjectRelease(v9);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Canceled before uploading %ld pending event(s)", v10, 0xCu);
      swift_slowDealloc(v10, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(v0[11], 2LL);
    }

    (*(void (**)(void, void))(v0[6] + 8LL))(v0[7], v0[5]);
    uint64_t v17 = type metadata accessor for CancellationError(0LL);
    uint64_t v18 = sub_100013014( &qword_1000804D8,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for CancellationError,  (uint64_t)&protocol conformance descriptor for CancellationError);
    swift_allocError(v17, v18, 0LL, 0LL);
    uint64_t v19 = CancellationError.init()();
    swift_willThrow(v19);
    uint64_t v20 = v0[7];
    swift_task_dealloc(v0[8]);
    swift_task_dealloc(v20);
    uint64_t v14 = (uint64_t (*)(void))v0[1];
  }

  else
  {
    uint64_t v12 = v0[7];
    uint64_t v13 = v0[8];
    swift_bridgeObjectRelease(v1);
    swift_task_dealloc(v13);
    swift_task_dealloc(v12);
    uint64_t v14 = (uint64_t (*)(void))v0[1];
  }

  return v14();
}

uint64_t sub_10004CEE0()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 96LL);
  *(void *)(*(void *)v1 + 104LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_10004D100;
  }
  else {
    uint64_t v3 = sub_10004CF44;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_10004CF44()
{
  uint64_t v1 = swift_bridgeObjectRelease(*(void *)(v0 + 88));
  if ((static Task<>.isCancelled.getter(v1) & 1) != 0)
  {
    uint64_t v3 = *(void *)(v0 + 32);
    sub_100013014( (unint64_t *)&qword_10007F140,  v2,  (uint64_t (*)(uint64_t))type metadata accessor for EventUploader,  (uint64_t)&unk_100061E74);
    uint64_t v4 = static LoggedObject.logger.getter(v3);
    uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
    os_log_type_t v6 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v5, v6))
    {
      os_log_type_t v7 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)os_log_type_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Canceled before fetching pending events", v7, 2u);
      swift_slowDealloc(v7, -1LL, -1LL);
    }

    uint64_t v8 = *(void *)(v0 + 64);
    uint64_t v9 = *(void *)(v0 + 40);
    uint64_t v10 = *(void *)(v0 + 48);

    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
    uint64_t v11 = type metadata accessor for CancellationError(0LL);
    uint64_t v12 = sub_100013014( &qword_1000804D8,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for CancellationError,  (uint64_t)&protocol conformance descriptor for CancellationError);
    swift_allocError(v11, v12, 0LL, 0LL);
    uint64_t v13 = CancellationError.init()();
    swift_willThrow(v13);
    uint64_t v14 = *(void *)(v0 + 56);
    swift_task_dealloc(*(void *)(v0 + 64));
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    sub_10000D408((void *)(*(void *)(v0 + 24) + 56LL), *(void *)(*(void *)(v0 + 24) + 80LL));
    unint64_t v16 = (void *)swift_task_alloc(dword_100080604);
    *(void *)(v0 + 80) = v16;
    *unint64_t v16 = v0;
    v16[1] = sub_10004CC14;
    return sub_10005507C(*(void *)(v0 + 72));
  }

uint64_t sub_10004D100()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_task_dealloc(*(void *)(v0 + 64));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004D144(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  v2[5] = *v1;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  v2[6] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[7] = v4;
  v2[8] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10004D1AC, 0LL, 0LL);
}

uint64_t sub_10004D1AC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2[3];
  uint64_t v4 = v2[5];
  sub_100013014( (unint64_t *)&qword_10007F140,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for EventUploader,  (uint64_t)&unk_100061E74);
  static LoggedObject.logger.getter(v4);
  swift_bridgeObjectRetain(v3);
  os_log_type_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = v2[3];
    uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v9 = 134217984;
    v2[2] = *(void *)(v8 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 2, v2 + 3, v9 + 4);
    swift_bridgeObjectRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Saving %ld event(s)", v9, 0xCu);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease(v2[3]);
  }

  uint64_t v10 = v2[5];
  uint64_t v12 = v2[3];
  uint64_t v11 = v2[4];
  (*(void (**)(void, void))(v2[7] + 8LL))(v2[8], v2[6]);
  swift_retain(v11);
  uint64_t v13 = sub_100052748(v12, v11, v10);
  v2[9] = v13;
  swift_release(v11);
  sub_10000D408((void *)(v11 + 56), *(void *)(v11 + 80));
  uint64_t v14 = (void *)swift_task_alloc(dword_100080624);
  v2[10] = v14;
  *uint64_t v14 = v2;
  v14[1] = sub_10004D350;
  return sub_1000545D8((uint64_t)v13);
}

uint64_t sub_10004D350()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 80LL);
  *(void *)(*(void *)v1 + 88LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_10004D3F0;
  }
  else {
    uint64_t v3 = sub_10004D3B4;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_10004D3B4()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_bridgeObjectRelease(*(void *)(v0 + 72));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004D3F0()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_bridgeObjectRelease(*(void *)(v0 + 72));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004D42C@<X0>( void (*a1)(char *, void, uint64_t, uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v82 = a1;
  uint64_t v77 = a3;
  uint64_t v84 = a4;
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v78 = *(void *)(v5 - 8);
  uint64_t v79 = v5;
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  unint64_t v81 = (char *)&v70 - v9;
  uint64_t v10 = sub_10000D228(&qword_1000800D0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for PendingEventData(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (void (*)(char *, uint64_t))((char *)&v70 - v19);
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v80 = (uint64_t)&v70 - v22;
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v70 - v23;
  uint64_t v25 = v83;
  sub_10004FF60((uint64_t)v82, *(void *)(a2 + 120), (uint64_t)v12);
  if (v25)
  {
    swift_errorRelease(v25);
    uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
    v26(v12, 1LL, 1LL, v13);
    sub_10000D5AC((uint64_t)v12, &qword_1000800D0);
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v26)(v84, 1LL, 1LL, v13);
  }

  else
  {
    unint64_t v73 = v17;
    uint64_t v75 = 0LL;
    uint64_t v76 = v8;
    uint64_t v82 = *(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56);
    uint64_t v83 = v20;
    v82(v12, 0LL, 1LL, v13);
    sub_100040B04((uint64_t)v12, (uint64_t)v24);
    uint64_t v29 = sub_100013014( (unint64_t *)&qword_10007F140,  v28,  (uint64_t (*)(uint64_t))type metadata accessor for EventUploader,  (uint64_t)&unk_100061E74);
    uint64_t v30 = v77;
    uint64_t v74 = v29;
    static LoggedObject.logger.getter(v77);
    uint64_t v31 = sub_100040A84((uint64_t)v24, v80);
    BOOL v32 = (os_log_s *)Logger.logObject.getter(v31);
    os_log_type_t v33 = static os_log_type_t.info.getter();
    int v34 = v33;
    BOOL v35 = os_log_type_enabled(v32, v33);
    uint64_t v36 = v13;
    uint64_t v37 = v30;
    uint64_t v38 = v78;
    if (v35)
    {
      uint64_t v39 = swift_slowAlloc(22LL, -1LL);
      uint64_t v72 = swift_slowAlloc(64LL, -1LL);
      uint64_t v87 = v72;
      *(_DWORD *)uint64_t v39 = 136446466;
      int v71 = v34;
      uint64_t v85 = v36;
      uint64_t v40 = sub_10000D228(&qword_1000804E8);
      uint64_t v41 = String.init<A>(describing:)(&v85, v40);
      BOOL v42 = v24;
      unint64_t v44 = v43;
      uint64_t v85 = sub_100046274(v41, v43, &v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86, v39 + 4);
      swift_bridgeObjectRelease(v44);
      *(_WORD *)(v39 + 12) = 2082;
      uint64_t v70 = v39 + 14;
      uint64_t v45 = type metadata accessor for UUID(0LL);
      uint64_t v46 = sub_100013014( &qword_10007F498,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v47 = v80;
      uint64_t v48 = v45;
      uint64_t v24 = v42;
      uint64_t v49 = dispatch thunk of CustomStringConvertible.description.getter(v48, v46);
      unint64_t v51 = v50;
      uint64_t v85 = sub_100046274(v49, v50, &v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86, v70);
      swift_bridgeObjectRelease(v51);
      sub_100040AC8(v47);
      _os_log_impl( (void *)&_mh_execute_header,  v32,  (os_log_type_t)v71,  "Created %{public}s with identifier %{public}s",  (uint8_t *)v39,  0x16u);
      uint64_t v52 = v72;
      swift_arrayDestroy(v72, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v52, -1LL, -1LL);
      swift_slowDealloc(v39, -1LL, -1LL);

      unint64_t v53 = *(void (**)(char *, uint64_t))(v78 + 8);
    }

    else
    {
      sub_100040AC8(v80);

      unint64_t v53 = *(void (**)(char *, uint64_t))(v38 + 8);
    }

    uint64_t v54 = v79;
    v53(v81, v79);
    uint64_t v55 = (uint64_t)v83;
    os_log_type_t v56 = v76;
    static LoggedObject.logger.getter(v37);
    uint64_t v57 = sub_100040A84((uint64_t)v24, v55);
    uint64_t v58 = (os_log_s *)Logger.logObject.getter(v57);
    os_log_type_t v59 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v58, v59))
    {
      uint64_t v83 = v53;
      uint64_t v60 = v55;
      uint64_t v61 = v36;
      uint64_t v62 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v63 = swift_slowAlloc(32LL, -1LL);
      uint64_t v87 = v63;
      *(_DWORD *)uint64_t v62 = 136315138;
      unint64_t v81 = (char *)(v62 + 4);
      uint64_t v64 = (uint64_t)v73;
      sub_100040A84(v60, (uint64_t)v73);
      uint64_t v65 = v64;
      uint64_t v36 = v61;
      uint64_t v66 = String.init<A>(describing:)(v65, v61);
      unint64_t v68 = v67;
      uint64_t v85 = sub_100046274(v66, v67, &v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86, v81);
      swift_bridgeObjectRelease(v68);
      sub_100040AC8(v60);
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "%s", v62, 0xCu);
      swift_arrayDestroy(v63, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v63, -1LL, -1LL);
      swift_slowDealloc(v62, -1LL, -1LL);

      v83(v76, v79);
    }

    else
    {
      sub_100040AC8(v55);

      v53(v56, v54);
    }

    uint64_t v69 = v84;
    sub_100040B04((uint64_t)v24, v84);
    return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v82)(v69, 0LL, 1LL, v36);
  }

uint64_t sub_10004D9FC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (uint64_t)v2;
  uint64_t v6 = *v2;
  uint64_t v7 = type metadata accessor for DatabaseConfiguration(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (void **)((char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  id v11 = [objc_allocWithZone(CKOperationGroup) init];
  v22[0] = v11;
  sub_10004DB74(v22, a1, v3, v6);
  sub_10000D478(v3 + 16, (uint64_t)v22);
  uint64_t v12 = sub_10000D228(&qword_100080328);
  uint64_t v13 = (char *)v10 + *(int *)(v12 + 48);
  uint64_t v14 = *(int *)(v12 + 64);
  uint64_t v15 = *(void **)(v3 + 96);
  *uint64_t v10 = v15;
  uint64_t v16 = enum case for QueryScope.owned(_:);
  uint64_t Scope = type metadata accessor for QueryScope(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(Scope - 8) + 104LL))(v13, v16, Scope);
  *(void *)((char *)v10 + v1_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = v11;
  (*(void (**)(void *, void, uint64_t))(v8 + 104))( v10,  enum case for DatabaseConfiguration.unconfigured(_:),  v7);
  uint64_t v18 = *(void *)(v3 + 128);
  a2[3] = type metadata accessor for EventRecordUploader(0LL);
  a2[4] = &off_1000767D8;
  uint64_t v19 = sub_10000D27C(a2);
  id v20 = v15;
  return sub_100027E94(v22, (uint64_t)v10, 1, v18, (uint64_t)v19);
}

void sub_10004DB74(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = a3;
  uint64_t v6 = *a1;
  v24[2] = 0LL;
  unint64_t v25 = 0xE000000000000000LL;
  v24[0] = 47LL;
  v24[1] = 0xE100000000000000LL;
  v23[2] = v24;
  uint64_t v7 = (void *)sub_10001BC90( 0x7FFFFFFFFFFFFFFFLL,  1,  sub_100048548,  (uint64_t)v23,  0xD00000000000001FLL,  0x8000000100063F60LL);
  uint64_t v8 = v7;
  if (v7[2])
  {
    uint64_t v9 = v7[4];
    uint64_t v10 = v7[5];
    uint64_t v12 = v7[6];
    uint64_t v11 = v7[7];
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRelease(v8);
    v13._countAndFlagsBits = static String._fromSubstring(_:)(v9, v10, v12, v11);
    object = v13._object;
    String.append(_:)(v13);
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(object);
    v15._countAndFlagsBits = 46LL;
    v15._object = (void *)0xE100000000000000LL;
    String.append(_:)(v15);
    v24[0] = a4;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata(a4);
    v17._countAndFlagsBits = String.init<A>(describing:)(v24, MetatypeMetadata);
    uint64_t v18 = v17._object;
    String.append(_:)(v17);
    swift_bridgeObjectRelease(v18);
    unint64_t v19 = v25;
    NSString v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v19);
    [v6 setName:v20];

    [v6 setQuantity:a2];
    [v6 setExpectedSendSize:sub_10002D254(a2)];
    id v21 = [v6 defaultConfiguration];
    if (v21)
    {
      uint64_t v22 = v21;
      [v21 setContainer:*(void *)(v26 + 96)];
      [v22 setQualityOfService:17];

      return;
    }
  }

  else
  {
    swift_bridgeObjectRelease(v7);
    __break(1u);
  }

  __break(1u);
}

uint64_t sub_10004DD60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (v3)
  {
    swift_errorRelease(v3);
    uint64_t v5 = type metadata accessor for PendingEventData(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))( a3,  1LL,  1LL,  v5);
  }

  else
  {
    uint64_t v7 = type metadata accessor for PendingEventData(0LL);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(a3, 0LL, 1LL, v7);
  }

uint64_t sub_10004DDEC(uint64_t a1)
{
  v2[18] = a1;
  v2[19] = v1;
  v2[20] = *v1;
  uint64_t v3 = type metadata accessor for UUID(0LL);
  v2[21] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[22] = v4;
  unint64_t v5 = (*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[23] = swift_task_alloc(v5);
  v2[24] = swift_task_alloc(v5);
  uint64_t v6 = type metadata accessor for EventRecord.DataType(0LL);
  v2[25] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[26] = v7;
  v2[27] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_10000D228(&qword_100080498);
  v2[28] = v8;
  v2[29] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v9 = (*(void *)(*(void *)(sub_10000D228(&qword_1000804A0) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[30] = swift_task_alloc(v9);
  v2[31] = swift_task_alloc(v9);
  v2[32] = swift_task_alloc(v9);
  uint64_t v10 = type metadata accessor for PendingEventData(0LL);
  v2[33] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v2[34] = v11;
  v2[35] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v12 = (*(void *)(*(void *)(sub_10000D228(&qword_1000800D0) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[36] = swift_task_alloc(v12);
  v2[37] = swift_task_alloc(v12);
  unint64_t v13 = (*(void *)(*(void *)(sub_10000D228(&qword_1000804A8) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[38] = swift_task_alloc(v13);
  v2[39] = swift_task_alloc(v13);
  v2[40] = swift_task_alloc(v13);
  uint64_t v14 = sub_10000D228(&qword_10007F488);
  v2[41] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v2[42] = v15;
  unint64_t v16 = (*(void *)(v15 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[43] = swift_task_alloc(v16);
  v2[44] = swift_task_alloc(v16);
  v2[45] = swift_task_alloc(v16);
  v2[46] = swift_task_alloc(v16);
  uint64_t v17 = type metadata accessor for Logger(0LL);
  v2[47] = v17;
  uint64_t v18 = *(void *)(v17 - 8);
  v2[48] = v18;
  unint64_t v19 = (*(void *)(v18 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[49] = swift_task_alloc(v19);
  v2[50] = swift_task_alloc(v19);
  v2[51] = swift_task_alloc(v19);
  v2[52] = swift_task_alloc(v19);
  v2[53] = swift_task_alloc(v19);
  v2[54] = swift_task_alloc(v19);
  v2[55] = swift_task_alloc(v19);
  v2[56] = swift_task_alloc(v19);
  v2[57] = swift_task_alloc(v19);
  return swift_task_switch(sub_10004E070, 0LL, 0LL);
}

uint64_t sub_10004E070(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 144);
  uint64_t v4 = *(void *)(v3 + 16);
  *(void *)(v2 + 46_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = v4;
  *(void *)(v2 + 472) = sub_100013014( (unint64_t *)&qword_10007F140,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for EventUploader,  (uint64_t)&unk_100061E74);
  uint64_t v5 = *(void *)(v2 + 160);
  uint64_t v133 = v4;
  if (!v4)
  {
    uint64_t v12 = static LoggedObject.logger.getter(v5);
    unint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "No events to upload", v15, 2u);
      swift_slowDealloc(v15, -1LL, -1LL);
    }

    uint64_t v16 = *(void *)(v2 + 416);
    uint64_t v17 = *(void *)(v2 + 376);
    uint64_t v18 = *(void *)(v2 + 384);

    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
    uint64_t v19 = *(void *)(v2 + 448);
    uint64_t v21 = *(void *)(v2 + 432);
    uint64_t v20 = *(void *)(v2 + 440);
    uint64_t v22 = *(void *)(v2 + 416);
    uint64_t v23 = *(void *)(v2 + 424);
    uint64_t v25 = *(void *)(v2 + 400);
    uint64_t v24 = *(void *)(v2 + 408);
    uint64_t v26 = *(void *)(v2 + 392);
    uint64_t v27 = *(void *)(v2 + 368);
    uint64_t v125 = *(void *)(v2 + 360);
    uint64_t v126 = *(void *)(v2 + 352);
    uint64_t v127 = *(void *)(v2 + 344);
    uint64_t v128 = *(void *)(v2 + 320);
    uint64_t v129 = *(void *)(v2 + 312);
    uint64_t v130 = *(void *)(v2 + 304);
    uint64_t v131 = *(void *)(v2 + 296);
    uint64_t v134 = *(void *)(v2 + 288);
    uint64_t v135 = *(void *)(v2 + 280);
    uint64_t v137 = *(void *)(v2 + 256);
    uint64_t v139 = *(void *)(v2 + 248);
    uint64_t v141 = *(void *)(v2 + 240);
    uint64_t v143 = *(void *)(v2 + 232);
    uint64_t v145 = *(void *)(v2 + 216);
    uint64_t v146 = *(void *)(v2 + 192);
    uint64_t v149 = *(void *)(v2 + 184);
    swift_task_dealloc(*(void *)(v2 + 456));
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v23);
    swift_task_dealloc(v22);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v125);
    swift_task_dealloc(v126);
    swift_task_dealloc(v127);
    swift_task_dealloc(v128);
    swift_task_dealloc(v129);
    swift_task_dealloc(v130);
    swift_task_dealloc(v131);
    swift_task_dealloc(v134);
    swift_task_dealloc(v135);
    swift_task_dealloc(v137);
    swift_task_dealloc(v139);
    swift_task_dealloc(v141);
    swift_task_dealloc(v143);
    swift_task_dealloc(v145);
    swift_task_dealloc(v146);
    swift_task_dealloc(v149);
    return (*(uint64_t (**)(void))(v2 + 8))();
  }

  static LoggedObject.logger.getter(v5);
  uint64_t v6 = swift_bridgeObjectRetain(v3);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = *(void *)(v2 + 144);
  if (v9)
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v11 = 134217984;
    *(void *)(v2 + 136) = v133;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 136, v2 + 144, v11 + 4);
    swift_bridgeObjectRelease(v10);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Uploading %ld event(s)", v11, 0xCu);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v2 + 144));
  }

  uint64_t v132 = (void *)(v2 + 16);

  uint64_t v29 = *(void *)(v2 + 456);
  uint64_t v30 = *(void *)(v2 + 376);
  uint64_t v31 = *(void *)(v2 + 160);
  uint64_t v32 = *(void *)(v2 + 144);
  os_log_type_t v33 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 + 384) + 8LL);
  *(void *)(v2 + 480) = v33;
  v33(v29, v30);
  static LoggedObject.logger.getter(v31);
  uint64_t v34 = swift_bridgeObjectRetain_n(v32, 2LL);
  BOOL v35 = (os_log_s *)Logger.logObject.getter(v34);
  os_log_type_t v36 = static os_log_type_t.debug.getter();
  BOOL v37 = os_log_type_enabled(v35, v36);
  uint64_t v38 = *(void *)(v2 + 448);
  uint64_t v39 = *(void *)(v2 + 376);
  if (v37)
  {
    uint64_t v40 = *(void *)(v2 + 264);
    uint64_t v41 = *(void *)(v2 + 144);
    uint64_t v150 = *(void *)(v2 + 376);
    uint64_t v147 = *(void *)(v2 + 448);
    BOOL v42 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v43 = swift_slowAlloc(32LL, -1LL);
    uint64_t v152 = v43;
    *(_DWORD *)BOOL v42 = 136315138;
    uint64_t v44 = swift_bridgeObjectRetain(v41);
    uint64_t v45 = Array.description.getter(v44, v40);
    unint64_t v47 = v46;
    swift_bridgeObjectRelease(v41);
    *(void *)(v2 + 128) = sub_100046274(v45, v47, &v152);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 128, v2 + 136, v42 + 4);
    swift_bridgeObjectRelease(v47);
    swift_bridgeObjectRelease_n(v41, 2LL);
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "%s", v42, 0xCu);
    swift_arrayDestroy(v43, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1LL, -1LL);
    swift_slowDealloc(v42, -1LL, -1LL);

    uint64_t v48 = v147;
    uint64_t v49 = v150;
  }

  else
  {
    swift_bridgeObjectRelease_n(*(void *)(v2 + 144), 2LL);

    uint64_t v48 = v38;
    uint64_t v49 = v39;
  }

  v33(v48, v49);
  unint64_t v50 = v133;
  uint64_t v51 = *(void *)(v2 + 152);
  uint64_t v52 = *(void (**)(uint64_t))(v51 + 104);
  if (v52)
  {
    uint64_t v53 = *(void *)(v51 + 112);
    swift_retain(v53);
    v52(v133);
    sub_10002D330((uint64_t)v52, v53);
  }

  else
  {
    sub_10004D9FC(v133, v132);
  }

  uint64_t v151 = *(void *)(v2 + 336);
  uint64_t v54 = *(void *)(v2 + 272);
  uint64_t v140 = *(void *)(v2 + 224);
  uint64_t v142 = *(void *)(v2 + 264);
  uint64_t v144 = *(void *)(v2 + 208);
  uint64_t v55 = *(void *)(v2 + 168);
  uint64_t v56 = *(void *)(v2 + 176);
  uint64_t v57 = *(void *)(v2 + 144);
  uint64_t v58 = sub_100013014( &qword_10007F4A0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  swift_bridgeObjectRetain(v57);
  uint64_t result = Set.init(minimumCapacity:)(0LL, v55, v58);
  unint64_t i = 0LL;
  uint64_t v152 = result;
  unsigned int v138 = enum case for EventRecord.DataType.fakeEvent(_:);
  uint64_t v148 = v54;
  BOOL v60 = v133 == 0;
  if (v133) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v63 = 1LL;
  for (unint64_t i = v50; ; ++i)
  {
    uint64_t v65 = *(void *)(v2 + 288);
    uint64_t v64 = *(void *)(v2 + 296);
    uint64_t v66 = *(void *)(v2 + 264);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v54 + 56))(v64, v63, 1LL, v66);
    sub_1000526C0(v64, v65, &qword_1000800D0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v65, 1LL, v66) == 1)
    {
      uint64_t v67 = v151;
      unint64_t v68 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v151 + 56);
      v68(*(void *)(v2 + 312), 1LL, 1LL, *(void *)(v2 + 328));
      goto LABEL_33;
    }

    uint64_t v69 = *(void *)(v2 + 280);
    uint64_t v71 = *(void *)(v2 + 248);
    uint64_t v70 = *(void *)(v2 + 256);
    uint64_t v72 = *(void *)(v2 + 232);
    uint64_t v73 = *(void *)(v2 + 200);
    sub_100040B04(*(void *)(v2 + 288), v69);
    EventRecord.DataType.init(rawValue:)(*(void *)(v69 + *(int *)(v142 + 28)));
    (*(void (**)(uint64_t, void, uint64_t))(v144 + 104))(v71, v138, v73);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v144 + 56))(v71, 0LL, 1LL, v73);
    uint64_t v74 = v72 + *(int *)(v140 + 48);
    sub_100052704(v70, v72, &qword_1000804A0);
    sub_100052704(v71, v74, &qword_1000804A0);
    uint64_t v75 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v144 + 48);
    if (v75(v72, 1LL, v73) == 1)
    {
      uint64_t v67 = v151;
      if (v75(v74, 1LL, *(void *)(v2 + 200)) == 1)
      {
        uint64_t v76 = *(void *)(v2 + 248);
        uint64_t v77 = *(void *)(v2 + 256);
        sub_10000D5AC(*(void *)(v2 + 232), &qword_1000804A0);
        sub_10000D5AC(v76, &qword_1000804A0);
        sub_10000D5AC(v77, &qword_1000804A0);
LABEL_31:
        (*(void (**)(void, void, void))(v56 + 16))( *(void *)(v2 + 312),  *(void *)(v2 + 280),  *(void *)(v2 + 168));
        uint64_t v81 = 0LL;
        goto LABEL_32;
      }

      goto LABEL_28;
    }

    uint64_t v78 = *(void *)(v2 + 200);
    sub_100052704(*(void *)(v2 + 232), *(void *)(v2 + 240), &qword_1000804A0);
    if (v75(v74, 1LL, v78) == 1)
    {
      (*(void (**)(void, void))(v144 + 8))(*(void *)(v2 + 240), *(void *)(v2 + 200));
      uint64_t v67 = v151;
LABEL_28:
      uint64_t v79 = *(void *)(v2 + 248);
      uint64_t v80 = *(void *)(v2 + 256);
      sub_10000D5AC(*(void *)(v2 + 232), &qword_100080498);
      sub_10000D5AC(v79, &qword_1000804A0);
      sub_10000D5AC(v80, &qword_1000804A0);
      goto LABEL_29;
    }

    uint64_t v82 = *(void *)(v2 + 248);
    uint64_t v136 = *(void *)(v2 + 256);
    uint64_t v84 = *(void *)(v2 + 232);
    uint64_t v83 = *(void *)(v2 + 240);
    uint64_t v85 = *(void *)(v2 + 216);
    uint64_t v86 = *(void *)(v2 + 200);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v144 + 32))(v85, v74, v86);
    uint64_t v87 = sub_100013014( &qword_1000804C0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for EventRecord.DataType,  (uint64_t)&protocol conformance descriptor for EventRecord.DataType);
    char v88 = dispatch thunk of static Equatable.== infix(_:_:)(v83, v85, v86, v87);
    unint64_t v89 = *(void (**)(uint64_t, uint64_t))(v144 + 8);
    v89(v83, v86);
    uint64_t v90 = v85;
    unint64_t v50 = v133;
    v89(v90, v86);
    sub_10000D5AC(v84, &qword_1000804A0);
    sub_10000D5AC(v82, &qword_1000804A0);
    sub_10000D5AC(v136, &qword_1000804A0);
    uint64_t v67 = v151;
    if ((v88 & 1) != 0) {
      goto LABEL_31;
    }
LABEL_29:
    uint64_t v81 = 1LL;
LABEL_32:
    uint64_t v91 = *(void *)(v2 + 328);
    uint64_t v92 = *(void *)(v2 + 312);
    uint64_t v93 = *(void *)(v2 + 280);
    (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v56 + 56))(v92, v81, 1LL, *(void *)(v2 + 168));
    sub_100040AC8(v93);
    unint64_t v68 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v67 + 56);
    v68(v92, 0LL, 1LL, v91);
LABEL_33:
    uint64_t v94 = *(void *)(v2 + 328);
    uint64_t v95 = *(void *)(v2 + 312);
    uint64_t v96 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48);
    if (v96(v95, 1LL, v94) == 1)
    {
      uint64_t v97 = *(void *)(v2 + 320);
      sub_10000D5AC(v95, &qword_1000804A8);
      uint64_t v98 = v97;
      uint64_t v99 = 1LL;
    }

    else
    {
      uint64_t v100 = *(void *)(v2 + 360);
      uint64_t v101 = *(void *)(v2 + 168);
      sub_1000526C0(v95, v100, &qword_10007F488);
      int v102 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v56 + 48))(v100, 1LL, v101);
      uint64_t v103 = *(void *)(v2 + 360);
      if (v102 == 1)
      {
        uint64_t result = sub_10000D5AC(v103, &qword_10007F488);
        goto LABEL_17;
      }

      uint64_t v104 = *(void *)(v2 + 320);
      uint64_t v94 = *(void *)(v2 + 328);
      sub_1000526C0(v103, v104, &qword_10007F488);
      uint64_t v98 = v104;
      uint64_t v99 = 0LL;
    }

    v68(v98, v99, 1LL, v94);
    uint64_t v105 = *(void *)(v2 + 328);
    uint64_t v106 = *(void *)(v2 + 304);
    sub_1000526C0(*(void *)(v2 + 320), v106, &qword_1000804A8);
    if (v96(v106, 1LL, v105) == 1)
    {
      (*(void (**)(void, uint64_t, uint64_t, void))(v56 + 56))( *(void *)(v2 + 368),  1LL,  1LL,  *(void *)(v2 + 168));
      uint64_t v107 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v56 + 48);
    }

    else
    {
      uint64_t v108 = *(void *)(v2 + 344);
      uint64_t v109 = *(void *)(v2 + 352);
      uint64_t v110 = *(void *)(v2 + 168);
      sub_1000526C0(*(void *)(v2 + 304), v109, &qword_10007F488);
      sub_100052704(v109, v108, &qword_10007F488);
      uint64_t v107 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v56 + 48);
      uint64_t result = v107(v108, 1LL, v110);
      if ((_DWORD)result == 1) {
        goto LABEL_45;
      }
      uint64_t v111 = *(void *)(v2 + 368);
      uint64_t v112 = *(void *)(v2 + 352);
      uint64_t v113 = *(void *)(v2 + 168);
      (*(void (**)(uint64_t, void, uint64_t))(v56 + 32))(v111, *(void *)(v2 + 344), v113);
      sub_10000D5AC(v112, &qword_10007F488);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v56 + 56))(v111, 0LL, 1LL, v113);
    }

    uint64_t v114 = *(void *)(v2 + 368);
    uint64_t v115 = *(void *)(v2 + 168);
    if (v107(v114, 1LL, v115) == 1)
    {
      swift_bridgeObjectRelease(*(void *)(v2 + 144));
      uint64_t v116 = v152;
      *(void *)(v2 + 488) = v152;
      uint64_t v117 = *(void *)(v116 + 16);
      *(void *)(v2 + 496) = v117;
      BOOL v118 = v117 == v50;
      uint64_t v119 = (objc_class *)type metadata accessor for EventUploadSubtaskLogEvent();
      uint64_t v120 = (char *)objc_allocWithZone(v119);
      unint64_t v121 = v50;
      uint64_t v122 = OBJC_IVAR____TtC11homeeventsd26EventUploadSubtaskLogEvent_metricsManager;
      type metadata accessor for MetricsManager(0LL);
      int64_t v123 = v120;
      *(void *)&v120[v122] = static MetricsManager.sharedInstance.getter();
      v123[OBJC_IVAR____TtC11homeeventsd26EventUploadSubtaskLogEvent_subtaskType] = 1;
      *(void *)&v123[OBJC_IVAR____TtC11homeeventsd26EventUploadSubtaskLogEvent_numRecords] = v121;
      v123[OBJC_IVAR____TtC11homeeventsd26EventUploadSubtaskLogEvent_attributedToFakeData] = v118;

      *(void *)(v2 + sub_1000154A8(*(void *)(v0 + 152) + OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_database, v0 + 56) = v123;
      *(void *)(v2 + 6_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = v119;
      *(void *)(v2 + 50_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = objc_msgSendSuper2((objc_super *)(v2 + 56), "init");
      sub_10000D408(v132, *(void *)(v2 + 40));
      uint64_t v124 = (void *)swift_task_alloc(dword_10007F9BC);
      *(void *)(v2 + 512) = v124;
      *uint64_t v124 = v2;
      v124[1] = sub_10004EC68;
      return sub_100028080(*(void *)(v2 + 144));
    }

    uint64_t v62 = *(char **)(v2 + 184);
    uint64_t v61 = *(void *)(v2 + 192);
    (*(void (**)(char *, uint64_t, uint64_t))(v56 + 32))(v62, v114, v115);
    sub_1000155E0(v61, v62);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v56 + 8))(v61, v115);
LABEL_17:
    uint64_t v54 = v148;
    BOOL v60 = i >= v50;
    if (i == v50) {
      goto LABEL_20;
    }
LABEL_18:
    if (v60) {
      break;
    }
    sub_100040A84( *(void *)(v2 + 144)
    + ((*(unsigned __int8 *)(v54 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80))
    + *(void *)(v54 + 72) * i,
      *(void *)(v2 + 296));
    uint64_t v63 = 0LL;
  }

  __break(1u);
LABEL_45:
  __break(1u);
  return result;
}

uint64_t sub_10004EC68(uint64_t a1)
{
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 512LL);
  v3[65] = a1;
  v3[66] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    swift_bridgeObjectRelease(v3[61]);
    uint64_t v5 = sub_10004EE7C;
  }

  else
  {
    uint64_t v5 = sub_10004ECE0;
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_10004ECE0()
{
  uint64_t v1 = static LoggedObject.logger.getter(*(void *)(v0 + 160));
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Upload operation completed successfully", v4, 2u);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  uint64_t v5 = *(void *)(v0 + 520);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v0 + 480);
  uint64_t v6 = *(void *)(v0 + 488);
  uint64_t v15 = *(void *)(v0 + 464);
  uint64_t v16 = *(void *)(v0 + 496);
  uint64_t v8 = *(void *)(v0 + 440);
  uint64_t v9 = *(void *)(v0 + 376);
  uint64_t v10 = *(void *)(v0 + 160);

  v7(v8, v9);
  sub_1000252A0();
  *(void *)(v0 + 112) = &_swiftEmptyDictionarySingleton;
  *(void *)(v0 + 72) = 0LL;
  *(_BYTE *)(v0 + 80) = 1;
  uint64_t v11 = (void *)swift_task_alloc(48LL);
  v11[2] = v6;
  v11[3] = v0 + 112;
  v11[4] = v0 + 72;
  v11[5] = v10;
  uint64_t v12 = sub_1000522EC(v5, (void (*)(char *, uint64_t))sub_1000522E0, (uint64_t)v11);
  *(void *)(v0 + 536) = v12;
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  swift_task_dealloc(v11);
  unint64_t v13 = (void *)swift_task_alloc(dword_1000804BC);
  *(void *)(v0 + 54_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = v13;
  *unint64_t v13 = v0;
  v13[1] = sub_10004F594;
  return sub_100051878((uint64_t)v12, v16 == v15);
}

uint64_t sub_10004EE7C()
{
  uint64_t v1 = *(void *)(v0 + 528);
  sub_100025500(v1);
  uint64_t v2 = sub_100052188(v1);
  if (!(v3 >> 62)) {
    return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000027LL,  0x8000000100063F90LL,  "homeeventsd/EventUploader.swift",  31LL,  2LL,  248LL,  0);
  }
  uint64_t v5 = v2;
  uint64_t v6 = v3;
  uint64_t v7 = v4;
  if (v3 >> 62 == 1)
  {
    uint64_t v8 = *(void *)(v0 + 528);
    uint64_t v9 = *(void *)(v0 + 160);
    if ((v3 & 1) != 0)
    {
      uint64_t v74 = v5;
      uint64_t v10 = (uint64_t *)(v0 + 400);
      static LoggedObject.logger.getter(v9);
      swift_errorRetain(v8);
      uint64_t v30 = swift_errorRetain(v8);
      uint64_t v12 = (os_log_s *)Logger.logObject.getter(v30);
      os_log_type_t v31 = static os_log_type_t.error.getter();
      BOOL v32 = os_log_type_enabled(v12, v31);
      uint64_t v33 = *(void *)(v0 + 528);
      if (v32)
      {
        uint64_t v34 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        BOOL v35 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
        uint64_t v70 = v34;
        *(_DWORD *)uint64_t v34 = 138543362;
        os_log_type_t v36 = v34 + 4;
        swift_errorRetain(v33);
        uint64_t v37 = v7;
        uint64_t v38 = _swift_stdlib_bridgeErrorToNSError(v33);
        *(void *)(v0 + 88) = v38;
        uint64_t v10 = (uint64_t *)(v0 + 400);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v36);
        *BOOL v35 = v38;
        uint64_t v7 = v37;
        swift_errorRelease(v33);
        swift_errorRelease(v33);
        _os_log_impl( (void *)&_mh_execute_header,  v12,  v31,  "Upload operation failed with recoverable error that did not include a retry time suggestion: %{public}@",  v70,  0xCu);
        uint64_t v39 = sub_10000D228(&qword_10007EE38);
        swift_arrayDestroy(v35, 1LL, v39);
        swift_slowDealloc(v35, -1LL, -1LL);
        swift_slowDealloc(v70, -1LL, -1LL);
      }

      else
      {
        swift_errorRelease(*(void *)(v0 + 528));
        swift_errorRelease(v33);
      }

      uint64_t v5 = v74;
    }

    else
    {
      uint64_t v76 = v4;
      uint64_t v10 = (uint64_t *)(v0 + 408);
      static LoggedObject.logger.getter(v9);
      swift_errorRetain(v8);
      uint64_t v11 = swift_errorRetain(v8);
      uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
      os_log_type_t v13 = static os_log_type_t.error.getter();
      BOOL v14 = os_log_type_enabled(v12, v13);
      uint64_t v15 = *(void *)(v0 + 528);
      if (v14)
      {
        uint64_t v16 = swift_slowAlloc(22LL, -1LL);
        uint64_t v72 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)uint64_t v16 = 134349314;
        *(void *)(v0 + 96) = v5;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v16 + 4);
        *(_WORD *)(v16 + 12) = 2114;
        swift_errorRetain(v15);
        uint64_t v17 = _swift_stdlib_bridgeErrorToNSError(v15);
        *(void *)(v0 + 10_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = v17;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v16 + 14);
        *uint64_t v72 = v17;
        uint64_t v10 = (uint64_t *)(v0 + 408);
        swift_errorRelease(v15);
        swift_errorRelease(v15);
        _os_log_impl( (void *)&_mh_execute_header,  v12,  v13,  "Upload operation failed with recoverable error that includes suggested retry time of %{public}f seconds: %{public}@",  (uint8_t *)v16,  0x16u);
        uint64_t v18 = sub_10000D228(&qword_10007EE38);
        swift_arrayDestroy(v72, 1LL, v18);
        swift_slowDealloc(v72, -1LL, -1LL);
        swift_slowDealloc(v16, -1LL, -1LL);
      }

      else
      {
        swift_errorRelease(*(void *)(v0 + 528));
        swift_errorRelease(v15);
      }

      uint64_t v7 = v76;
    }
  }

  else
  {
    uint64_t v20 = *(void *)(v0 + 528);
    uint64_t v10 = (uint64_t *)(v0 + 392);
    static LoggedObject.logger.getter(*(void *)(v0 + 160));
    swift_errorRetain(v20);
    uint64_t v21 = swift_errorRetain(v20);
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v22 = static os_log_type_t.error.getter();
    BOOL v23 = os_log_type_enabled(v12, v22);
    uint64_t v24 = *(void *)(v0 + 528);
    if (v23)
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v77 = v7;
      uint64_t v26 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v25 = 138543362;
      swift_errorRetain(v24);
      uint64_t v27 = _swift_stdlib_bridgeErrorToNSError(v24);
      *(void *)(v0 + 120) = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v25 + 4);
      *uint64_t v26 = v27;
      swift_errorRelease(v24);
      swift_errorRelease(v24);
      _os_log_impl( (void *)&_mh_execute_header,  v12,  v22,  "Upload operation failed with non-recoverable error: %{public}@",  v25,  0xCu);
      uint64_t v28 = sub_10000D228(&qword_10007EE38);
      swift_arrayDestroy(v26, 1LL, v28);
      uint64_t v29 = v26;
      uint64_t v7 = v77;
      swift_slowDealloc(v29, -1LL, -1LL);
      swift_slowDealloc(v25, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(*(void *)(v0 + 528));
      swift_errorRelease(v24);
    }
  }

  uint64_t v40 = *v10;
  uint64_t v41 = *(void *)(v0 + 528);
  BOOL v42 = *(void **)(v0 + 504);
  uint64_t v43 = *(void (**)(uint64_t, uint64_t))(v0 + 480);
  uint64_t v44 = *(void *)(v0 + 376);

  v43(v40, v44);
  unint64_t v45 = sub_10005229C();
  uint64_t v78 = swift_allocError(&type metadata for EventUploader.UploadFailure, v45, 0LL, 0LL);
  *unint64_t v46 = v5;
  v46[1] = v6;
  v46[2] = v7;
  swift_willThrow(v78);
  swift_errorRelease(v41);

  uint64_t v48 = *(void *)(v0 + 448);
  uint64_t v47 = *(void *)(v0 + 456);
  uint64_t v50 = *(void *)(v0 + 432);
  uint64_t v49 = *(void *)(v0 + 440);
  uint64_t v52 = *(void *)(v0 + 416);
  uint64_t v51 = *(void *)(v0 + 424);
  uint64_t v54 = *(void *)(v0 + 400);
  uint64_t v53 = *(void *)(v0 + 408);
  uint64_t v55 = *(void *)(v0 + 392);
  uint64_t v56 = *(void *)(v0 + 368);
  uint64_t v57 = *(void *)(v0 + 360);
  uint64_t v58 = *(void *)(v0 + 352);
  uint64_t v59 = *(void *)(v0 + 344);
  uint64_t v60 = *(void *)(v0 + 320);
  uint64_t v61 = *(void *)(v0 + 312);
  uint64_t v62 = *(void *)(v0 + 304);
  uint64_t v63 = *(void *)(v0 + 296);
  uint64_t v64 = *(void *)(v0 + 288);
  uint64_t v65 = *(void *)(v0 + 280);
  uint64_t v66 = *(void *)(v0 + 256);
  uint64_t v67 = *(void *)(v0 + 248);
  uint64_t v68 = *(void *)(v0 + 240);
  uint64_t v69 = *(void *)(v0 + 232);
  uint64_t v71 = *(void *)(v0 + 216);
  uint64_t v73 = *(void *)(v0 + 192);
  uint64_t v75 = *(void *)(v0 + 184);
  _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0((void *)(v0 + 16));
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  swift_task_dealloc(v64);
  swift_task_dealloc(v65);
  swift_task_dealloc(v66);
  swift_task_dealloc(v67);
  swift_task_dealloc(v68);
  swift_task_dealloc(v69);
  swift_task_dealloc(v71);
  swift_task_dealloc(v73);
  swift_task_dealloc(v75);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004F594()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 544);
  *(void *)(*v1 + 552) = v0;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(*(void *)(v2 + 536));
  if (v0) {
    uint64_t v4 = sub_10004FAAC;
  }
  else {
    uint64_t v4 = sub_10004F600;
  }
  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_10004F600()
{
  uint64_t v1 = *(void *)(v0 + 160);
  if (*(void *)(*(void *)(v0 + 112) + 16LL))
  {
    uint64_t v2 = static LoggedObject.logger.getter(v1);
    uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Some events failed to upload", v5, 2u);
      swift_slowDealloc(v5, -1LL, -1LL);
    }

    uint64_t v6 = *(void **)(v0 + 504);
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v0 + 480);
    uint64_t v8 = *(void *)(v0 + 432);
    uint64_t v9 = *(void *)(v0 + 376);

    v7(v8, v9);
    uint64_t v10 = *(void *)(v0 + 112);
    uint64_t v11 = *(void *)(v0 + 72);
    uint64_t v12 = *(unsigned __int8 *)(v0 + 80);
    unint64_t v13 = sub_10005229C();
    swift_allocError(&type metadata for EventUploader.UploadFailure, v13, 0LL, 0LL);
    *BOOL v14 = v11;
    v14[1] = v12;
    v14[2] = v10;
    uint64_t v15 = swift_bridgeObjectRetain(v10);
    swift_willThrow(v15);

    swift_bridgeObjectRelease(*(void *)(v0 + 112));
    uint64_t v17 = *(void *)(v0 + 448);
    uint64_t v16 = *(void *)(v0 + 456);
    uint64_t v19 = *(void *)(v0 + 432);
    uint64_t v18 = *(void *)(v0 + 440);
    uint64_t v21 = *(void *)(v0 + 416);
    uint64_t v20 = *(void *)(v0 + 424);
    uint64_t v23 = *(void *)(v0 + 400);
    uint64_t v22 = *(void *)(v0 + 408);
    uint64_t v24 = *(void *)(v0 + 392);
    uint64_t v43 = *(void *)(v0 + 368);
    uint64_t v44 = *(void *)(v0 + 360);
    uint64_t v45 = *(void *)(v0 + 352);
    uint64_t v46 = *(void *)(v0 + 344);
    uint64_t v48 = *(void *)(v0 + 320);
    uint64_t v50 = *(void *)(v0 + 312);
    uint64_t v52 = *(void *)(v0 + 304);
    uint64_t v54 = *(void *)(v0 + 296);
    uint64_t v56 = *(void *)(v0 + 288);
    uint64_t v58 = *(void *)(v0 + 280);
    uint64_t v60 = *(void *)(v0 + 256);
    uint64_t v62 = *(void *)(v0 + 248);
    uint64_t v64 = *(void *)(v0 + 240);
    uint64_t v66 = *(void *)(v0 + 232);
    uint64_t v68 = *(void *)(v0 + 216);
    uint64_t v70 = *(void *)(v0 + 192);
    uint64_t v72 = *(void *)(v0 + 184);
    _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0((void *)(v0 + 16));
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v48);
    swift_task_dealloc(v50);
    swift_task_dealloc(v52);
    swift_task_dealloc(v54);
    swift_task_dealloc(v56);
    swift_task_dealloc(v58);
    swift_task_dealloc(v60);
    swift_task_dealloc(v62);
    swift_task_dealloc(v64);
    swift_task_dealloc(v66);
    swift_task_dealloc(v68);
    swift_task_dealloc(v70);
    swift_task_dealloc(v72);
    uint64_t v25 = *(uint64_t (**)(void))(v0 + 8);
  }

  else
  {
    uint64_t v26 = static LoggedObject.logger.getter(v1);
    uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
    os_log_type_t v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "All events uploaded successfully", v29, 2u);
      swift_slowDealloc(v29, -1LL, -1LL);
    }

    uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v0 + 480);
    uint64_t v31 = *(void *)(v0 + 424);
    uint64_t v32 = *(void *)(v0 + 376);

    v30(v31, v32);
    swift_bridgeObjectRelease(*(void *)(v0 + 112));
    _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0((void *)(v0 + 16));
    uint64_t v33 = *(void *)(v0 + 448);
    uint64_t v35 = *(void *)(v0 + 432);
    uint64_t v34 = *(void *)(v0 + 440);
    uint64_t v36 = *(void *)(v0 + 416);
    uint64_t v37 = *(void *)(v0 + 424);
    uint64_t v39 = *(void *)(v0 + 400);
    uint64_t v38 = *(void *)(v0 + 408);
    uint64_t v40 = *(void *)(v0 + 392);
    uint64_t v41 = *(void *)(v0 + 368);
    uint64_t v47 = *(void *)(v0 + 360);
    uint64_t v49 = *(void *)(v0 + 352);
    uint64_t v51 = *(void *)(v0 + 344);
    uint64_t v53 = *(void *)(v0 + 320);
    uint64_t v55 = *(void *)(v0 + 312);
    uint64_t v57 = *(void *)(v0 + 304);
    uint64_t v59 = *(void *)(v0 + 296);
    uint64_t v61 = *(void *)(v0 + 288);
    uint64_t v63 = *(void *)(v0 + 280);
    uint64_t v65 = *(void *)(v0 + 256);
    uint64_t v67 = *(void *)(v0 + 248);
    uint64_t v69 = *(void *)(v0 + 240);
    uint64_t v71 = *(void *)(v0 + 232);
    uint64_t v73 = *(void *)(v0 + 216);
    uint64_t v74 = *(void *)(v0 + 192);
    uint64_t v75 = *(void *)(v0 + 184);
    swift_task_dealloc(*(void *)(v0 + 456));
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v37);
    swift_task_dealloc(v36);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v47);
    swift_task_dealloc(v49);
    swift_task_dealloc(v51);
    swift_task_dealloc(v53);
    swift_task_dealloc(v55);
    swift_task_dealloc(v57);
    swift_task_dealloc(v59);
    swift_task_dealloc(v61);
    swift_task_dealloc(v63);
    swift_task_dealloc(v65);
    swift_task_dealloc(v67);
    swift_task_dealloc(v69);
    swift_task_dealloc(v71);
    swift_task_dealloc(v73);
    swift_task_dealloc(v74);
    swift_task_dealloc(v75);
    uint64_t v25 = *(uint64_t (**)(void))(v0 + 8);
  }

  return v25();
}

uint64_t sub_10004FAAC()
{
  uint64_t v1 = *(void *)(v0 + 160);
  if (*(void *)(*(void *)(v0 + 112) + 16LL))
  {
    uint64_t v2 = static LoggedObject.logger.getter(v1);
    uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Some events failed to upload", v5, 2u);
      swift_slowDealloc(v5, -1LL, -1LL);
    }

    uint64_t v6 = *(void **)(v0 + 504);
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v0 + 480);
    uint64_t v8 = *(void *)(v0 + 432);
    uint64_t v9 = *(void *)(v0 + 376);

    v7(v8, v9);
    uint64_t v10 = *(void *)(v0 + 112);
    uint64_t v11 = *(void *)(v0 + 72);
    uint64_t v12 = *(unsigned __int8 *)(v0 + 80);
    unint64_t v13 = sub_10005229C();
    swift_allocError(&type metadata for EventUploader.UploadFailure, v13, 0LL, 0LL);
    *BOOL v14 = v11;
    v14[1] = v12;
    v14[2] = v10;
    uint64_t v15 = swift_bridgeObjectRetain(v10);
    swift_willThrow(v15);

    swift_bridgeObjectRelease(*(void *)(v0 + 112));
    uint64_t v17 = *(void *)(v0 + 448);
    uint64_t v16 = *(void *)(v0 + 456);
    uint64_t v19 = *(void *)(v0 + 432);
    uint64_t v18 = *(void *)(v0 + 440);
    uint64_t v21 = *(void *)(v0 + 416);
    uint64_t v20 = *(void *)(v0 + 424);
    uint64_t v23 = *(void *)(v0 + 400);
    uint64_t v22 = *(void *)(v0 + 408);
    uint64_t v24 = *(void *)(v0 + 392);
    uint64_t v43 = *(void *)(v0 + 368);
    uint64_t v44 = *(void *)(v0 + 360);
    uint64_t v45 = *(void *)(v0 + 352);
    uint64_t v46 = *(void *)(v0 + 344);
    uint64_t v48 = *(void *)(v0 + 320);
    uint64_t v50 = *(void *)(v0 + 312);
    uint64_t v52 = *(void *)(v0 + 304);
    uint64_t v54 = *(void *)(v0 + 296);
    uint64_t v56 = *(void *)(v0 + 288);
    uint64_t v58 = *(void *)(v0 + 280);
    uint64_t v60 = *(void *)(v0 + 256);
    uint64_t v62 = *(void *)(v0 + 248);
    uint64_t v64 = *(void *)(v0 + 240);
    uint64_t v66 = *(void *)(v0 + 232);
    uint64_t v68 = *(void *)(v0 + 216);
    uint64_t v70 = *(void *)(v0 + 192);
    uint64_t v72 = *(void *)(v0 + 184);
    _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0((void *)(v0 + 16));
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v48);
    swift_task_dealloc(v50);
    swift_task_dealloc(v52);
    swift_task_dealloc(v54);
    swift_task_dealloc(v56);
    swift_task_dealloc(v58);
    swift_task_dealloc(v60);
    swift_task_dealloc(v62);
    swift_task_dealloc(v64);
    swift_task_dealloc(v66);
    swift_task_dealloc(v68);
    swift_task_dealloc(v70);
    swift_task_dealloc(v72);
    uint64_t v25 = *(uint64_t (**)(void))(v0 + 8);
  }

  else
  {
    uint64_t v26 = static LoggedObject.logger.getter(v1);
    uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
    os_log_type_t v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "All events uploaded successfully", v29, 2u);
      swift_slowDealloc(v29, -1LL, -1LL);
    }

    uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v0 + 480);
    uint64_t v31 = *(void *)(v0 + 424);
    uint64_t v32 = *(void *)(v0 + 376);

    v30(v31, v32);
    swift_bridgeObjectRelease(*(void *)(v0 + 112));
    _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0((void *)(v0 + 16));
    uint64_t v33 = *(void *)(v0 + 448);
    uint64_t v35 = *(void *)(v0 + 432);
    uint64_t v34 = *(void *)(v0 + 440);
    uint64_t v36 = *(void *)(v0 + 416);
    uint64_t v37 = *(void *)(v0 + 424);
    uint64_t v39 = *(void *)(v0 + 400);
    uint64_t v38 = *(void *)(v0 + 408);
    uint64_t v40 = *(void *)(v0 + 392);
    uint64_t v41 = *(void *)(v0 + 368);
    uint64_t v47 = *(void *)(v0 + 360);
    uint64_t v49 = *(void *)(v0 + 352);
    uint64_t v51 = *(void *)(v0 + 344);
    uint64_t v53 = *(void *)(v0 + 320);
    uint64_t v55 = *(void *)(v0 + 312);
    uint64_t v57 = *(void *)(v0 + 304);
    uint64_t v59 = *(void *)(v0 + 296);
    uint64_t v61 = *(void *)(v0 + 288);
    uint64_t v63 = *(void *)(v0 + 280);
    uint64_t v65 = *(void *)(v0 + 256);
    uint64_t v67 = *(void *)(v0 + 248);
    uint64_t v69 = *(void *)(v0 + 240);
    uint64_t v71 = *(void *)(v0 + 232);
    uint64_t v73 = *(void *)(v0 + 216);
    uint64_t v74 = *(void *)(v0 + 192);
    uint64_t v75 = *(void *)(v0 + 184);
    swift_task_dealloc(*(void *)(v0 + 456));
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v37);
    swift_task_dealloc(v36);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v47);
    swift_task_dealloc(v49);
    swift_task_dealloc(v51);
    swift_task_dealloc(v53);
    swift_task_dealloc(v55);
    swift_task_dealloc(v57);
    swift_task_dealloc(v59);
    swift_task_dealloc(v61);
    swift_task_dealloc(v63);
    swift_task_dealloc(v65);
    swift_task_dealloc(v67);
    swift_task_dealloc(v69);
    swift_task_dealloc(v71);
    swift_task_dealloc(v73);
    swift_task_dealloc(v74);
    swift_task_dealloc(v75);
    uint64_t v25 = *(uint64_t (**)(void))(v0 + 8);
  }

  return v25();
}

uint64_t sub_10004FF60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v87 = a2;
  uint64_t v86 = a3;
  uint64_t v99 = type metadata accessor for EventRecord.DecodedEvent(0LL);
  uint64_t v92 = *(void *)(v99 - 8);
  __chkstk_darwin(v99);
  unint64_t v91 = (unint64_t)&v85 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v93 = (char *)v5;
  uint64_t v94 = v6;
  __chkstk_darwin(v5);
  uint64_t v100 = (char *)&v85 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v88 = *(void *)(v8 - 8);
  uint64_t v89 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v85 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  unint64_t v13 = (char *)&v85 - v12;
  uint64_t v95 = type metadata accessor for EventRecord.DataType(0LL);
  uint64_t v14 = *(void *)(v95 - 8);
  uint64_t v15 = __chkstk_darwin(v95);
  uint64_t v17 = (char *)&v85 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v85 - v18;
  uint64_t v20 = type metadata accessor for UUID(0LL);
  uint64_t v96 = *(void *)(v20 - 8);
  uint64_t v97 = v20;
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v85 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = __chkstk_darwin(v21);
  uint64_t v26 = (char *)&v85 - v25;
  uint64_t v27 = __chkstk_darwin(v24);
  uint64_t v98 = (char *)&v85 - v28;
  UUID.init()(v27);
  uint64_t v29 = v101;
  uint64_t v30 = static EventRecord.encodeEvent(_:)(v17, a1);
  uint64_t v101 = v29;
  if (!v29)
  {
    uint64_t v99 = (uint64_t)v26;
    uint64_t v85 = v23;
    uint64_t v100 = v11;
    uint64_t v93 = v19;
    uint64_t v94 = v14;
    uint64_t v55 = v30;
    unint64_t v56 = v31;
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v19, v17, v95);
    unint64_t v91 = v56;
    uint64_t v92 = v55;
    uint64_t v57 = sub_100012154(v55, v56);
    uint64_t v58 = EventRecord.DecodedEvent.tags.getter(v57);
    EventRecord.DecodedEvent.anyEvent.getter(&v102);
    uint64_t v59 = v104;
    uint64_t v60 = v105;
    sub_10000D408(&v102, v104);
    uint64_t v61 = v87;
    uint64_t v90 = (void *)v58;
    if (v87 < 1)
    {
      uint64_t v67 = v98;
      dispatch thunk of EventProtocol.date.getter(v59, v60);
      goto LABEL_13;
    }

    uint64_t v62 = v100;
    uint64_t v63 = dispatch thunk of EventProtocol.date.getter(v59, v60);
    double v64 = Date.timeIntervalSinceReferenceDate.getter(v63);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v88 + 8))(v62, v89);
    if ((~*(void *)&v64 & 0x7FF0000000000000LL) != 0)
    {
      if (v64 > -9.22337204e18)
      {
        if (v64 < 9.22337204e18)
        {
          uint64_t v66 = (uint64_t)v64 / v61;
          if ((unsigned __int128)(v66 * (__int128)v61) >> 64 == (v66 * v61) >> 63)
          {
            uint64_t v67 = v98;
            Date.init(timeIntervalSinceReferenceDate:)(result, (double)(v66 * v61));
LABEL_13:
            uint64_t v69 = v96;
            uint64_t v70 = v67;
            uint64_t v71 = v67;
            uint64_t v72 = v97;
            (*(void (**)(uint64_t, char *, uint64_t))(v96 + 16))(v99, v71, v97);
            uint64_t v73 = v104;
            uint64_t v74 = v105;
            sub_10000D408(&v102, v104);
            dispatch thunk of EventProtocol.homeIdentifier.getter(v73, v74);
            uint64_t v75 = v88;
            uint64_t v76 = v89;
            uint64_t v77 = (*(uint64_t (**)(char *, char *, uint64_t))(v88 + 16))(v100, v13, v89);
            uint64_t v78 = v93;
            uint64_t v98 = (char *)EventRecord.DataType.rawValue.getter(v77);
            unint64_t v80 = v91;
            uint64_t v79 = v92;
            sub_10000D620(v92, v91);
            (*(void (**)(char *, uint64_t))(v75 + 8))(v13, v76);
            (*(void (**)(char *, uint64_t))(v94 + 8))(v78, v95);
            (*(void (**)(char *, uint64_t))(v69 + 8))(v70, v72);
            uint64_t v81 = *(void (**)(uint64_t, uint64_t, uint64_t))(v69 + 32);
            uint64_t v82 = v86;
            v81(v86, v99, v72);
            uint64_t v83 = (int *)type metadata accessor for PendingEventData(0LL);
            v81(v82 + v83[5], (uint64_t)v85, v72);
            (*(void (**)(uint64_t, char *, uint64_t))(v75 + 32))(v82 + v83[6], v100, v76);
            *(void *)(v82 + v83[7]) = v98;
            uint64_t v84 = (uint64_t *)(v82 + v83[8]);
            *uint64_t v84 = v79;
            v84[1] = v80;
            *(void *)(v82 + v83[9]) = v90;
            return _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(&v102);
          }

LABEL_16:
        __break(1u);
        goto LABEL_17;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
    goto LABEL_16;
  }

  sub_100013014( (unint64_t *)&qword_10007F140,  v31,  (uint64_t (*)(uint64_t))type metadata accessor for EventUploader,  (uint64_t)&unk_100061E74);
  static LoggedObject.logger.getter(v90);
  unint64_t v33 = v91;
  uint64_t v32 = v92;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v92 + 16))(v91, a1, v99);
  uint64_t v34 = v101;
  swift_errorRetain(v101);
  uint64_t v35 = swift_errorRetain(v34);
  uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
  os_log_type_t v37 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v38 = swift_slowAlloc(22LL, -1LL);
    uint64_t v90 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v95 = swift_slowAlloc(32LL, -1LL);
    uint64_t v106 = v95;
    *(_DWORD *)uint64_t v38 = 136315394;
    EventRecord.DecodedEvent.anyEvent.getter(&v102);
    uint64_t v39 = v104;
    uint64_t v40 = sub_10000D408(&v102, v104);
    __chkstk_darwin(v40);
    unint64_t v42 = v33;
    uint64_t v43 = (char *)&v85 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    (*(void (**)(char *))(v44 + 16))(v43);
    uint64_t v45 = String.init<A>(describing:)(v43, v39);
    unint64_t v47 = v46;
    _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(&v102);
    uint64_t v102 = sub_100046274(v45, v47, &v106);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, v103, v38 + 4);
    swift_bridgeObjectRelease(v47);
    (*(void (**)(unint64_t, uint64_t))(v32 + 8))(v42, v99);
    *(_WORD *)(v38 + 12) = 2114;
    uint64_t v48 = v101;
    swift_errorRetain(v101);
    uint64_t v49 = _swift_stdlib_bridgeErrorToNSError(v48);
    uint64_t v102 = v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, v103, v38 + 14);
    uint64_t v50 = v90;
    *uint64_t v90 = v49;
    swift_errorRelease(v48);
    swift_errorRelease(v48);
    _os_log_impl( (void *)&_mh_execute_header,  v36,  v37,  "Encoding event: %s failed with error: %{public}@",  (uint8_t *)v38,  0x16u);
    uint64_t v51 = sub_10000D228(&qword_10007EE38);
    swift_arrayDestroy(v50, 1LL, v51);
    swift_slowDealloc(v50, -1LL, -1LL);
    uint64_t v52 = v95;
    swift_arrayDestroy(v95, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v52, -1LL, -1LL);
    uint64_t v53 = v98;
    swift_slowDealloc(v38, -1LL, -1LL);

    uint64_t v54 = (*(uint64_t (**)(char *, char *))(v94 + 8))(v100, v93);
  }

  else
  {
    (*(void (**)(unint64_t, uint64_t))(v32 + 8))(v33, v99);
    uint64_t v68 = v101;
    swift_errorRelease(v101);
    swift_errorRelease(v68);

    uint64_t v54 = (*(uint64_t (**)(char *, char *))(v94 + 8))(v100, v93);
    uint64_t v53 = v98;
  }

  swift_willThrow(v54);
  return (*(uint64_t (**)(char *, uint64_t))(v96 + 8))(v53, v97);
}

uint64_t sub_1000506D4()
{
  sub_10002D330(*(void *)(v0 + 104), *(void *)(v0 + 112));
  return swift_deallocClassInstance(v0, 136LL, 7LL);
}

uint64_t type metadata accessor for EventUploader()
{
  return objc_opt_self(&OBJC_CLASS____TtC11homeeventsd13EventUploader);
}

uint64_t sub_100050730@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X8>)
{
  uint64_t v140 = a5;
  uint64_t v149 = a7;
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  unsigned int v138 = (char *)&v138 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v139 = (char *)&v138 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v141 = (char *)&v138 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  os_log_t v142 = (os_log_t)((char *)&v138 - v21);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v138 - v23;
  __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v138 - v25;
  uint64_t v27 = type metadata accessor for Logger(0LL);
  uint64_t v147 = *(void *)(v27 - 8);
  uint64_t v148 = v27;
  uint64_t v28 = __chkstk_darwin(v27);
  uint64_t v144 = (uint64_t *)((char *)&v138 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v145 = (char *)&v138 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v146 = (char *)&v138 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v143 = (char *)&v138 - v35;
  __chkstk_darwin(v34);
  os_log_type_t v37 = (char *)&v138 - v36;
  char v38 = sub_1000516EC(a1, a3);
  uint64_t v152 = v13;
  if (!a2)
  {
    type metadata accessor for CloudUploadResultLogEvent();
    sub_10001058C(v38 & 1);
    sub_100013014( (unint64_t *)&qword_10007F140,  v56,  (uint64_t (*)(uint64_t))type metadata accessor for EventUploader,  (uint64_t)&unk_100061E74);
    static LoggedObject.logger.getter(a6);
    uint64_t v57 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 16);
    uint64_t v58 = v57(v26, a1, v12);
    uint64_t v59 = (os_log_s *)Logger.logObject.getter(v58);
    os_log_type_t v60 = static os_log_type_t.debug.getter();
    uint64_t v50 = v12;
    if (os_log_type_enabled(v59, v60))
    {
      uint64_t v61 = swift_slowAlloc(12LL, -1LL);
      uint64_t v150 = v57;
      uint64_t v151 = a1;
      uint64_t v62 = (uint8_t *)v61;
      uint64_t v63 = swift_slowAlloc(32LL, -1LL);
      v156[0] = v63;
      *(_DWORD *)uint64_t v62 = 136446210;
      uint64_t v64 = sub_100013014( &qword_10007F498,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v65 = dispatch thunk of CustomStringConvertible.description.getter(v12, v64);
      unint64_t v67 = v66;
      uint64_t v155 = (char *)sub_100046274(v65, v66, v156);
      uint64_t v50 = v12;
      uint64_t v13 = v152;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, v156, v62 + 4);
      swift_bridgeObjectRelease(v67);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v26, v12);
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "Event %{public}s uploaded successfully", v62, 0xCu);
      swift_arrayDestroy(v63, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v63, -1LL, -1LL);
      uint64_t v68 = v62;
      uint64_t v57 = v150;
      a1 = v151;
      swift_slowDealloc(v68, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v13 + 8))(v26, v12);
    }

    (*(void (**)(char *, uint64_t))(v147 + 8))(v37, v148);
    uint64_t v88 = v149;
    v57(v149, a1, v50);
LABEL_19:
    uint64_t v89 = 0LL;
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v88, v89, 1LL, v50);
  }

  uint64_t v150 = (uint64_t (*)(char *, uint64_t, uint64_t))v12;
  uint64_t v151 = a1;
  type metadata accessor for CloudUploadResultLogEvent();
  swift_errorRetain(a2);
  sub_10001059C(a2, v38 & 1);
  if (*(void *)(*a4 + 16LL) < 5uLL)
  {
    uint64_t v39 = v152;
    uint64_t v40 = v150;
    (*(void (**)(char *, uint64_t, uint64_t (*)(char *, uint64_t, uint64_t)))(v152 + 16))( v24,  v151,  v150);
    swift_errorRetain(a2);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a4);
    v156[0] = *a4;
    *a4 = 0x8000000000000000LL;
    sub_10005C8FC(a2, (uint64_t)v24, isUniquelyReferenced_nonNull_native);
    uint64_t v42 = *a4;
    *a4 = v156[0];
    swift_bridgeObjectRelease(v42);
    (*(void (**)(char *, uint64_t (*)(char *, uint64_t, uint64_t)))(v39 + 8))(v24, v40);
  }

  v156[0] = a2;
  swift_errorRetain(a2);
  uint64_t v43 = sub_10000D228((uint64_t *)&unk_10007EC20);
  type metadata accessor for CKError(0LL);
  uint64_t v45 = v44;
  if ((swift_dynamicCast(&v155, v156, v43, v44, 6LL) & 1) == 0)
  {
    uint64_t v69 = a6;
    sub_100013014( (unint64_t *)&qword_10007F140,  v46,  (uint64_t (*)(uint64_t))type metadata accessor for EventUploader,  (uint64_t)&unk_100061E74);
    uint64_t v70 = v143;
    static LoggedObject.logger.getter(v69);
    uint64_t v13 = v152;
    uint64_t v71 = *(char **)(v152 + 16);
    os_log_t v72 = v142;
    uint64_t v73 = v150;
    ((void (*)(os_log_t, uint64_t, uint64_t (*)(char *, uint64_t, uint64_t)))v71)(v142, v151, v150);
    swift_errorRetain(a2);
    uint64_t v74 = swift_errorRetain(a2);
    uint64_t v75 = (os_log_s *)Logger.logObject.getter(v74);
    os_log_type_t v76 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v75, v76))
    {
      uint64_t v77 = swift_slowAlloc(22LL, -1LL);
      uint64_t v144 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v145 = (char *)swift_slowAlloc(32LL, -1LL);
      v156[0] = (uint64_t)v145;
      *(_DWORD *)uint64_t v77 = 136446466;
      uint64_t v146 = v71;
      uint64_t v78 = a2;
      uint64_t v79 = sub_100013014( &qword_10007F498,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v80 = dispatch thunk of CustomStringConvertible.description.getter(v73, v79);
      unint64_t v82 = v81;
      uint64_t v155 = (char *)sub_100046274(v80, v81, v156);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, v156, v77 + 4);
      swift_bridgeObjectRelease(v82);
      (*(void (**)(os_log_t, uint64_t (*)(char *, uint64_t, uint64_t)))(v152 + 8))(v72, v73);
      *(_WORD *)(v77 + 12) = 2114;
      swift_errorRetain(a2);
      uint64_t v83 = _swift_stdlib_bridgeErrorToNSError(a2);
      uint64_t v155 = (char *)v83;
      uint64_t v13 = v152;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, v156, v77 + 14);
      uint64_t v84 = v144;
      uint64_t *v144 = v83;
      swift_errorRelease(v78);
      swift_errorRelease(v78);
      _os_log_impl( (void *)&_mh_execute_header,  v75,  v76,  "Unhandled error for event %{public}s: %{public}@",  (uint8_t *)v77,  0x16u);
      uint64_t v85 = sub_10000D228(&qword_10007EE38);
      swift_arrayDestroy(v84, 1LL, v85);
      swift_slowDealloc(v84, -1LL, -1LL);
      uint64_t v86 = v145;
      swift_arrayDestroy(v145, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v86, -1LL, -1LL);
      swift_slowDealloc(v77, -1LL, -1LL);

      uint64_t v87 = v78;
      uint64_t v71 = v146;
      swift_errorRelease(v87);
    }

    else
    {
      swift_errorRelease(a2);
      (*(void (**)(os_log_t, uint64_t (*)(char *, uint64_t, uint64_t)))(v13 + 8))(v72, v73);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

    (*(void (**)(char *, uint64_t))(v147 + 8))(v70, v148);
    uint64_t v88 = v149;
    uint64_t v50 = (uint64_t)v73;
LABEL_18:
    ((void (*)(char *, uint64_t, uint64_t))v71)(v88, v151, v50);
    goto LABEL_19;
  }

  uint64_t v143 = (char *)a2;
  unint64_t v47 = v155;
  double v48 = COERCE_DOUBLE(related decl 'e' for CKErrorCode.retryAfterSeconds.getter(v155));
  uint64_t v50 = (uint64_t)v150;
  uint64_t v49 = v151;
  uint64_t v13 = v152;
  uint64_t v52 = v144;
  uint64_t v51 = v145;
  if ((v53 & 1) == 0)
  {
    uint64_t v54 = v140;
    if ((*(_BYTE *)(v140 + 8) & 1) != 0)
    {
      double v55 = 0.0;
      if (v48 > 0.0) {
        double v55 = v48;
      }
    }

    else
    {
      double v55 = *(double *)v140;
    }

    *(double *)uint64_t v140 = v55;
    *(_BYTE *)(v54 + 8) = 0;
  }

  uint64_t v155 = v47;
  uint64_t v91 = sub_100013014( &qword_10007EFF8,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_100060948);
  _BridgedStoredNSError.code.getter(v156, v45, v91);
  switch(v156[0])
  {
    case 1LL:
    case 3LL:
    case 4LL:
    case 6LL:
    case 7LL:
    case 9LL:
    case 0xALL:
    case 0xELL:
    case 0x16LL:
    case 0x17LL:
    case 0x22LL:
    case 0x24LL:
    case 0x6FLL:
    case 0x73LL:
      sub_100013014( (unint64_t *)&qword_10007F140,  v92,  (uint64_t (*)(uint64_t))type metadata accessor for EventUploader,  (uint64_t)&unk_100061E74);
      uint64_t v93 = v146;
      static LoggedObject.logger.getter(a6);
      uint64_t v94 = v141;
      (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v141, v49, v50);
      uint64_t v95 = v47;
      uint64_t v96 = (os_log_s *)Logger.logObject.getter(v95);
      os_log_type_t v97 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v96, v97))
      {
        uint64_t v98 = swift_slowAlloc(22LL, -1LL);
        uint64_t v99 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
        uint64_t v100 = swift_slowAlloc(32LL, -1LL);
        v156[0] = v100;
        *(_DWORD *)uint64_t v98 = 136446466;
        uint64_t v101 = sub_100013014( &qword_10007F498,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v102 = dispatch thunk of CustomStringConvertible.description.getter(v150, v101);
        unint64_t v104 = v103;
        uint64_t v155 = (char *)sub_100046274(v102, v103, v156);
        uint64_t v13 = v152;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, v156, v98 + 4);
        swift_bridgeObjectRelease(v104);
        (*(void (**)(char *, uint64_t (*)(char *, uint64_t, uint64_t)))(v13 + 8))(v94, v150);
        *(_WORD *)(v98 + 12) = 2114;
        uint64_t v105 = v95;
        uint64_t v106 = _swift_stdlib_bridgeErrorToNSError(v105);
        uint64_t v155 = (char *)v106;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, v156, v98 + 14);
        *uint64_t v99 = v106;

        _os_log_impl( (void *)&_mh_execute_header,  v96,  v97,  "Error indicates retry may succeed, holding on to event %{public}s: %{public}@",  (uint8_t *)v98,  0x16u);
        uint64_t v107 = sub_10000D228(&qword_10007EE38);
        uint64_t v89 = 1LL;
        swift_arrayDestroy(v99, 1LL, v107);
        uint64_t v108 = v99;
        uint64_t v50 = (uint64_t)v150;
        swift_slowDealloc(v108, -1LL, -1LL);
        swift_arrayDestroy(v100, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v100, -1LL, -1LL);
        swift_slowDealloc(v98, -1LL, -1LL);

        swift_errorRelease(v143);
        (*(void (**)(char *, uint64_t))(v147 + 8))(v146, v148);
      }

      else
      {
        swift_errorRelease(v143);

        (*(void (**)(char *, uint64_t))(v13 + 8))(v94, v50);
        (*(void (**)(char *, uint64_t))(v147 + 8))(v93, v148);
        uint64_t v89 = 1LL;
      }

      uint64_t v88 = v149;
      break;
    default:
      uint64_t v155 = v47;
      _BridgedStoredNSError.code.getter(v156, v45, v91);
      if (v156[0] == 26 || v156[0] == 28)
      {
        sub_100013014( (unint64_t *)&qword_10007F140,  v109,  (uint64_t (*)(uint64_t))type metadata accessor for EventUploader,  (uint64_t)&unk_100061E74);
        static LoggedObject.logger.getter(a6);
        uint64_t v110 = v139;
        uint64_t v146 = *(char **)(v13 + 16);
        ((void (*)(char *, uint64_t, uint64_t))v146)(v139, v49, v50);
        uint64_t v111 = v47;
        uint64_t v112 = v51;
        uint64_t v113 = (os_log_s *)Logger.logObject.getter(v111);
        os_log_type_t v114 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v113, v114))
        {
          uint64_t v115 = swift_slowAlloc(22LL, -1LL);
          uint64_t v144 = (uint64_t *)swift_slowAlloc(32LL, -1LL);
          uint64_t v155 = v111;
          v156[0] = (uint64_t)v144;
          *(_DWORD *)uint64_t v115 = 134218242;
          _BridgedStoredNSError.code.getter(&v154, v45, v91);
          uint64_t v13 = v152;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v154, &v155, v115 + 4);

          *(_WORD *)(v115 + 12) = 2082;
          uint64_t v116 = sub_100013014( &qword_10007F498,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          uint64_t v117 = dispatch thunk of CustomStringConvertible.description.getter(v150, v116);
          unint64_t v119 = v118;
          uint64_t v155 = (char *)sub_100046274(v117, v118, v156);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, v156, v115 + 14);
          swift_bridgeObjectRelease(v119);
          (*(void (**)(char *, uint64_t (*)(char *, uint64_t, uint64_t)))(v13 + 8))(v110, v150);
          _os_log_impl( (void *)&_mh_execute_header,  v113,  v114,  "Zone does not exist (%ld), dropping event %{public}s",  (uint8_t *)v115,  0x16u);
          uint64_t v120 = v144;
          swift_arrayDestroy(v144, 1LL, (char *)&type metadata for Any + 8);
          uint64_t v50 = (uint64_t)v150;
          swift_slowDealloc(v120, -1LL, -1LL);
          uint64_t v121 = v115;
          uint64_t v49 = v151;
          swift_slowDealloc(v121, -1LL, -1LL);

          swift_errorRelease(v143);
          (*(void (**)(char *, uint64_t))(v147 + 8))(v145, v148);
        }

        else
        {
          swift_errorRelease(v143);

          (*(void (**)(char *, uint64_t))(v13 + 8))(v110, v50);
          (*(void (**)(char *, uint64_t))(v147 + 8))(v112, v148);
        }

        uint64_t v88 = v149;
        ((void (*)(char *, uint64_t, uint64_t))v146)(v149, v49, v50);
        goto LABEL_19;
      }

      sub_100013014( (unint64_t *)&qword_10007F140,  v109,  (uint64_t (*)(uint64_t))type metadata accessor for EventUploader,  (uint64_t)&unk_100061E74);
      static LoggedObject.logger.getter(a6);
      uint64_t v71 = *(char **)(v13 + 16);
      ((void (*)(char *, uint64_t, uint64_t))v71)(v138, v49, v50);
      uint64_t v122 = v47;
      int64_t v123 = (os_log_s *)Logger.logObject.getter(v122);
      os_log_type_t v124 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v123, v124))
      {
        uint64_t v125 = swift_slowAlloc(32LL, -1LL);
        uint64_t v126 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
        uint64_t v145 = (char *)swift_slowAlloc(32LL, -1LL);
        uint64_t v154 = (uint64_t)v122;
        uint64_t v155 = v145;
        *(_DWORD *)uint64_t v125 = 134218498;
        uint64_t v146 = v71;
        os_log_t v142 = v123;
        _BridgedStoredNSError.code.getter(&v153, v45, v91);
        uint64_t v50 = (uint64_t)v150;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, &v154, v125 + 4);

        *(_WORD *)(v125 + 12) = 2082;
        uint64_t v127 = sub_100013014( &qword_10007F498,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v128 = v138;
        uint64_t v129 = dispatch thunk of CustomStringConvertible.description.getter(v50, v127);
        unint64_t v131 = v130;
        uint64_t v154 = sub_100046274(v129, v130, (uint64_t *)&v155);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v154, &v155, v125 + 14);
        swift_bridgeObjectRelease(v131);
        (*(void (**)(char *, uint64_t))(v152 + 8))(v128, v50);
        *(_WORD *)(v125 + 22) = 2114;
        uint64_t v132 = v122;
        uint64_t v133 = _swift_stdlib_bridgeErrorToNSError(v132);
        uint64_t v154 = v133;
        uint64_t v71 = v146;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v154, &v155, v125 + 24);
        *uint64_t v126 = v133;

        os_log_t v134 = v142;
        _os_log_impl( (void *)&_mh_execute_header,  v142,  v124,  "Unhandled CloudKit error code (%ld), dropping event %{public}s: %{public}@",  (uint8_t *)v125,  0x20u);
        uint64_t v135 = sub_10000D228(&qword_10007EE38);
        swift_arrayDestroy(v126, 1LL, v135);
        uint64_t v136 = v126;
        uint64_t v13 = v152;
        swift_slowDealloc(v136, -1LL, -1LL);
        uint64_t v137 = v145;
        swift_arrayDestroy(v145, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v137, -1LL, -1LL);
        swift_slowDealloc(v125, -1LL, -1LL);

        swift_errorRelease(v143);
        (*(void (**)(uint64_t *, uint64_t))(v147 + 8))(v144, v148);
      }

      else
      {
        swift_errorRelease(v143);

        (*(void (**)(char *, uint64_t))(v13 + 8))(v138, v50);
        (*(void (**)(uint64_t *, uint64_t))(v147 + 8))(v52, v148);
      }

      uint64_t v88 = v149;
      goto LABEL_18;
  }

  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v88, v89, 1LL, v50);
}

uint64_t sub_1000516EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v19 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (*(void *)(a2 + 16)
    && (uint64_t v7 = *(void *)(a2 + 40),
        uint64_t v8 = sub_100013014( &qword_10007F4A0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID),  v9 = dispatch thunk of Hashable._rawHashValue(seed:)(v7, v4, v8),  v10 = -1LL << *(_BYTE *)(a2 + 32),  v11 = v9 & ~v10,  ((*(void *)(a2 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0))
  {
    uint64_t v12 = ~v10;
    uint64_t v13 = *(void *)(v19 + 72);
    uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v19 + 16);
    do
    {
      v14(v6, *(void *)(a2 + 48) + v13 * v11, v4);
      uint64_t v15 = sub_100013014( &qword_1000806B0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      char v16 = dispatch thunk of static Equatable.== infix(_:_:)(v6, a1, v4, v15);
      (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v4);
      if ((v16 & 1) != 0) {
        break;
      }
      unint64_t v11 = (v11 + 1) & v12;
    }

    while (((*(void *)(a2 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0);
  }

  else
  {
    char v16 = 0;
  }

  return v16 & 1;
}

uint64_t sub_100051878(uint64_t a1, char a2)
{
  *(_BYTE *)(v3 + 192) = a2;
  *(void *)(v3 + 6_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = a1;
  *(void *)(v3 + 72) = v2;
  *(void *)(v3 + 80) = *v2;
  uint64_t v4 = type metadata accessor for Logger(0LL);
  *(void *)(v3 + 88) = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  *(void *)(v3 + 96) = v5;
  unint64_t v6 = (*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v3 + 10_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = swift_task_alloc(v6);
  *(void *)(v3 + 112) = swift_task_alloc(v6);
  *(void *)(v3 + 120) = swift_task_alloc(v6);
  *(void *)(v3 + 128) = swift_task_alloc(v6);
  *(void *)(v3 + 136) = swift_task_alloc(v6);
  return swift_task_switch(sub_100051918, 0LL, 0LL);
}

uint64_t sub_100051918(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 64);
  uint64_t v4 = *(void *)(v3 + 16);
  *(void *)(v2 + 14_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = v4;
  *(void *)(v2 + 152) = sub_100013014( (unint64_t *)&qword_10007F140,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for EventUploader,  (uint64_t)&unk_100061E74);
  uint64_t v5 = *(void *)(v2 + 80);
  if (v4)
  {
    static LoggedObject.logger.getter(v5);
    uint64_t v6 = swift_bridgeObjectRetain(v3);
    uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v8 = static os_log_type_t.info.getter();
    BOOL v9 = os_log_type_enabled(v7, v8);
    uint64_t v10 = *(void *)(v2 + 64);
    if (v9)
    {
      unint64_t v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)unint64_t v11 = 134217984;
      *(void *)(v2 + sub_1000154A8(*(void *)(v0 + 152) + OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_database, v0 + 56) = v4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 56, v2 + 64, v11 + 4);
      swift_bridgeObjectRelease(v10);
      _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "Deleting %ld record identifier(s) for successful uploads from the local database",  v11,  0xCu);
      swift_slowDealloc(v11, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease(v10);
    }

    uint64_t v24 = *(void *)(v2 + 128);
    uint64_t v25 = *(void *)(v2 + 88);
    uint64_t v26 = *(void *)(v2 + 80);
    uint64_t v27 = *(void *)(v2 + 64);
    uint64_t v28 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 + 96) + 8LL);
    *(void *)(v2 + 160) = v28;
    v28(v24, v25);
    static LoggedObject.logger.getter(v26);
    uint64_t v29 = swift_bridgeObjectRetain_n(v27, 2LL);
    uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v31 = static os_log_type_t.debug.getter();
    BOOL v32 = os_log_type_enabled(v30, v31);
    uint64_t v33 = *(void *)(v2 + 120);
    uint64_t v34 = *(void *)(v2 + 88);
    uint64_t v35 = *(void *)(v2 + 64);
    if (v32)
    {
      uint64_t v54 = *(void *)(v2 + 88);
      uint64_t v53 = *(void *)(v2 + 120);
      uint64_t v36 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v55 = v4;
      uint64_t v37 = swift_slowAlloc(32LL, -1LL);
      uint64_t v56 = v37;
      *(_DWORD *)uint64_t v36 = 136315138;
      uint64_t v38 = type metadata accessor for UUID(0LL);
      uint64_t v39 = swift_bridgeObjectRetain(v35);
      uint64_t v40 = Array.description.getter(v39, v38);
      unint64_t v42 = v41;
      swift_bridgeObjectRelease(v35);
      *(void *)(v2 + 48) = sub_100046274(v40, v42, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 48, v2 + 56, v36 + 4);
      swift_bridgeObjectRelease(v42);
      swift_bridgeObjectRelease_n(v35, 2LL);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "%s", v36, 0xCu);
      swift_arrayDestroy(v37, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v43 = v37;
      uint64_t v4 = v55;
      swift_slowDealloc(v43, -1LL, -1LL);
      swift_slowDealloc(v36, -1LL, -1LL);

      uint64_t v44 = v53;
      uint64_t v45 = v54;
    }

    else
    {
      swift_bridgeObjectRelease_n(*(void *)(v2 + 64), 2LL);

      uint64_t v44 = v33;
      uint64_t v45 = v34;
    }

    v28(v44, v45);
    uint64_t v46 = *(void *)(v2 + 72);
    char v47 = *(_BYTE *)(v2 + 192);
    double v48 = (objc_class *)type metadata accessor for EventUploadSubtaskLogEvent();
    uint64_t v49 = (char *)objc_allocWithZone(v48);
    uint64_t v50 = OBJC_IVAR____TtC11homeeventsd26EventUploadSubtaskLogEvent_metricsManager;
    type metadata accessor for MetricsManager(0LL);
    uint64_t v51 = v49;
    *(void *)&v49[v50] = static MetricsManager.sharedInstance.getter();
    v51[OBJC_IVAR____TtC11homeeventsd26EventUploadSubtaskLogEvent_subtaskType] = 2;
    *(void *)&v51[OBJC_IVAR____TtC11homeeventsd26EventUploadSubtaskLogEvent_numRecords] = v4;
    v51[OBJC_IVAR____TtC11homeeventsd26EventUploadSubtaskLogEvent_attributedToFakeData] = v47;

    *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v51;
    *(void *)(v2 + 2_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = v48;
    *(void *)(v2 + 168) = objc_msgSendSuper2((objc_super *)(v2 + 16), "init");
    sub_10000D408((void *)(v46 + 56), *(void *)(v46 + 80));
    uint64_t v52 = (void *)swift_task_alloc(dword_1000805EC);
    *(void *)(v2 + 176) = v52;
    *uint64_t v52 = v2;
    v52[1] = sub_100051DCC;
    return sub_100055DC0(*(void *)(v2 + 64));
  }

  else
  {
    uint64_t v12 = static LoggedObject.logger.getter(v5);
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  v14,  "No record identifiers for successful uploads to delete",  v15,  2u);
      swift_slowDealloc(v15, -1LL, -1LL);
    }

    uint64_t v16 = *(void *)(v2 + 136);
    uint64_t v17 = *(void *)(v2 + 88);
    uint64_t v18 = *(void *)(v2 + 96);

    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
    uint64_t v19 = *(void *)(v2 + 128);
    uint64_t v21 = *(void *)(v2 + 112);
    uint64_t v20 = *(void *)(v2 + 120);
    uint64_t v22 = *(void *)(v2 + 104);
    swift_task_dealloc(*(void *)(v2 + 136));
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    return (*(uint64_t (**)(void))(v2 + 8))();
  }

uint64_t sub_100051DCC()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 176LL);
  *(void *)(*(void *)v1 + 184LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_100051F88;
  }
  else {
    uint64_t v3 = sub_100051E30;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_100051E30()
{
  uint64_t v1 = *(void *)(v0 + 64);
  static LoggedObject.logger.getter(*(void *)(v0 + 80));
  uint64_t v2 = swift_bridgeObjectRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void *)(v0 + 144);
    uint64_t v6 = *(void *)(v0 + 64);
    uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v7 = 134217984;
    *(void *)(v0 + 40) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v7 + 4);
    swift_bridgeObjectRelease(v6);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Successfully deleted %ld record identifier(s)", v7, 0xCu);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v0 + 64));
  }

  os_log_type_t v8 = *(void **)(v0 + 168);
  (*(void (**)(void, void))(v0 + 160))(*(void *)(v0 + 112), *(void *)(v0 + 88));
  sub_1000252A0();

  uint64_t v9 = *(void *)(v0 + 128);
  uint64_t v11 = *(void *)(v0 + 112);
  uint64_t v10 = *(void *)(v0 + 120);
  uint64_t v12 = *(void *)(v0 + 104);
  swift_task_dealloc(*(void *)(v0 + 136));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100051F88()
{
  uint64_t v1 = *(void *)(v0 + 184);
  uint64_t v2 = *(void *)(v0 + 80);
  sub_100025500(v1);
  static LoggedObject.logger.getter(v2);
  swift_errorRetain(v1);
  uint64_t v3 = swift_errorRetain(v1);
  os_log_type_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(void *)(v0 + 184);
    uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    os_log_type_t v8 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v7 = 138543362;
    swift_errorRetain(v6);
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError(v6);
    *(void *)(v0 + 32) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v7 + 4);
    *os_log_type_t v8 = v9;
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to delete record identifier(s): %{public}@", v7, 0xCu);
    uint64_t v10 = sub_10000D228(&qword_10007EE38);
    swift_arrayDestroy(v8, 1LL, v10);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {
    uint64_t v11 = *(void *)(v0 + 184);
    swift_errorRelease(v11);
    swift_errorRelease(v11);
  }

  uint64_t v12 = v4;
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 160);
  os_log_type_t v14 = *(void **)(v0 + 168);
  uint64_t v16 = *(void *)(v0 + 128);
  uint64_t v15 = *(void *)(v0 + 136);
  uint64_t v18 = *(void *)(v0 + 112);
  uint64_t v17 = *(void *)(v0 + 120);
  uint64_t v19 = *(void *)(v0 + 104);
  uint64_t v20 = *(void *)(v0 + 88);

  uint64_t v21 = v13(v19, v20);
  swift_willThrow(v21);

  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100052188(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v11 = a1;
  swift_errorRetain(a1);
  uint64_t v2 = sub_10000D228((uint64_t *)&unk_10007EC20);
  type metadata accessor for CKError(0LL);
  uint64_t v4 = v3;
  if ((swift_dynamicCast(&v10, &v11, v2, v3, 6LL) & 1) != 0)
  {
    os_log_type_t v5 = v10;
    uint64_t v6 = related decl 'e' for CKErrorCode.retryAfterSeconds.getter(v10);
    if ((v7 & 1) != 0)
    {
      uint64_t v10 = v5;
      uint64_t v8 = sub_100013014( &qword_10007EFF8,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_100060948);
      _BridgedStoredNSError.code.getter(&v11, v4, v8);
      switch(v11)
      {
        case 1LL:
        case 3LL:
        case 4LL:
        case 6LL:
        case 7LL:
        case 9LL:
        case 10LL:
        case 14LL:
        case 22LL:
        case 23LL:
        case 34LL:
        case 36LL:
        case 111LL:
        case 115LL:
          uint64_t v1 = 0LL;
          break;
        default:

          goto LABEL_7;
      }
    }

    else
    {
      return v6;
    }
  }

  else
  {
LABEL_7:
    swift_errorRetain(v1);
  }

  return v1;
}

unint64_t sub_10005229C()
{
  unint64_t result = qword_1000804B0;
  if (!qword_1000804B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100061EB4, &type metadata for EventUploader.UploadFailure);
    atomic_store(result, &qword_1000804B0);
  }

  return result;
}

uint64_t sub_1000522E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  return sub_100050730( a1,  a2,  *(void *)(v3 + 16),  *(void **)(v3 + 24),  *(void *)(v3 + 32),  *(void *)(v3 + 40),  a3);
}

void *sub_1000522EC(uint64_t a1, void (*a2)(char *, uint64_t), uint64_t a3)
{
  uint64_t v41 = a3;
  uint64_t v44 = a2;
  uint64_t v4 = sub_10000D228(&qword_10007F488);
  __chkstk_darwin(v4);
  uint64_t v43 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v46 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v46 - 8);
  uint64_t v7 = __chkstk_darwin(v46);
  uint64_t v37 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v36 = (char *)&v35 - v9;
  uint64_t v42 = sub_10000D228(&qword_1000804C8);
  __chkstk_darwin(v42);
  uint64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v39 = a1 + 64;
  uint64_t v13 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v14 = -1LL;
  if (v13 < 64) {
    uint64_t v14 = ~(-1LL << v13);
  }
  unint64_t v15 = v14 & v12;
  int64_t v40 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v45 = a1;
  unint64_t result = (void *)swift_bridgeObjectRetain(a1);
  int64_t v17 = 0LL;
  uint64_t v38 = _swiftEmptyArrayStorage;
  if (!v15) {
    goto LABEL_7;
  }
LABEL_4:
  unint64_t v18 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  for (unint64_t i = v18 | (v17 << 6); ; unint64_t i = __clz(__rbit64(v26)) + (v17 << 6))
  {
    uint64_t v20 = v45;
    uint64_t v21 = *(void *)(v6 + 72);
    uint64_t v22 = v46;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v11, *(void *)(v45 + 48) + v21 * i, v46);
    uint64_t v23 = *(void *)(*(void *)(v20 + 56) + 8 * i);
    *(void *)&v11[*(int *)(v42 + 48)] = v23;
    swift_errorRetain(v23);
    uint64_t v24 = (uint64_t)v43;
    v44(v11, v23);
    sub_10000D5AC((uint64_t)v11, &qword_1000804C8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v24, 1LL, v22) == 1)
    {
      unint64_t result = (void *)sub_10000D5AC(v24, &qword_10007F488);
      if (v15) {
        goto LABEL_4;
      }
    }

    else
    {
      uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 32);
      uint64_t v29 = v36;
      uint64_t v30 = v46;
      v28(v36, v24, v46);
      v28(v37, (uint64_t)v29, v30);
      if ((swift_isUniquelyReferenced_nonNull_native(v38) & 1) == 0) {
        uint64_t v38 = (void *)sub_10001C284(0, v38[2] + 1LL, 1, (unint64_t)v38);
      }
      unint64_t v32 = v38[2];
      unint64_t v31 = v38[3];
      if (v32 >= v31 >> 1) {
        uint64_t v38 = (void *)sub_10001C284(v31 > 1, v32 + 1, 1, (unint64_t)v38);
      }
      uint64_t v33 = v37;
      uint64_t v34 = v38;
      v38[2] = v32 + 1;
      unint64_t result = (void *)((uint64_t (*)(char *, char *, uint64_t))v28)( (char *)v34 + ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
                         + v32 * v21,
                           v33,
                           v46);
      if (v15) {
        goto LABEL_4;
      }
    }

LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_1000526C0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10000D228(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_100052704(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10000D228(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

void *sub_100052748(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v28 = a2;
  uint64_t v6 = sub_10000D228(&qword_1000800D0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = type metadata accessor for PendingEventData(0LL);
  uint64_t v9 = *(void *)(v27 - 8);
  uint64_t v10 = __chkstk_darwin(v27);
  uint64_t v26 = (uint64_t)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v25 = (uint64_t)&v22 - v12;
  uint64_t v13 = *(void *)(a1 + 16);
  if (!v13) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v14 = *(void *)(type metadata accessor for EventRecord.DecodedEvent(0LL) - 8);
  unint64_t v15 = (void (*)(char *, void, uint64_t, uint64_t))(a1
                                                              + ((*(unsigned __int8 *)(v14 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80)));
  uint64_t v16 = *(void *)(v14 + 72);
  uint64_t v23 = a1;
  swift_bridgeObjectRetain(a1);
  int64_t v17 = _swiftEmptyArrayStorage;
  uint64_t v24 = a3;
  do
  {
    sub_10004D42C(v15, v28, a3, (uint64_t)v8);
    if (v3)
    {
      swift_bridgeObjectRelease(v17);
      swift_bridgeObjectRelease(v23);
      return v17;
    }

    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1LL, v27) == 1)
    {
      sub_10000D5AC((uint64_t)v8, &qword_1000800D0);
    }

    else
    {
      uint64_t v18 = v25;
      sub_100040B04((uint64_t)v8, v25);
      sub_100040B04(v18, v26);
      if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0) {
        int64_t v17 = (void *)sub_10001C3A4(0, v17[2] + 1LL, 1, (unint64_t)v17);
      }
      unint64_t v20 = v17[2];
      unint64_t v19 = v17[3];
      if (v20 >= v19 >> 1) {
        int64_t v17 = (void *)sub_10001C3A4(v19 > 1, v20 + 1, 1, (unint64_t)v17);
      }
      void v17[2] = v20 + 1;
      sub_100040B04( v26,  (uint64_t)v17 + ((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
      + *(void *)(v9 + 72) * v20);
      a3 = v24;
    }

    unint64_t v15 = (void (*)(char *, void, uint64_t, uint64_t))((char *)v15 + v16);
    --v13;
  }

  while (v13);
  swift_bridgeObjectRelease(v23);
  return v17;
}

uint64_t sub_1000529A0(uint64_t result, unint64_t a2, uint64_t a3)
{
  unint64_t v3 = a2 >> 62;
  if (a2 >> 62 == 2) {
    return swift_errorRetain(result);
  }
  if ((_DWORD)v3 == 1)
  {
    unint64_t result = a3;
    return swift_errorRetain(result);
  }

  if (!(_DWORD)v3) {
    return swift_bridgeObjectRetain(a3);
  }
  return result;
}

uint64_t destroy for EventUploader.UploadFailure(uint64_t a1)
{
  return sub_100023444(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16));
}

uint64_t *_s11homeeventsd13EventUploaderC13UploadFailureOwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  sub_1000529A0(*a2, v4, v5);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  return a1;
}

uint64_t *assignWithCopy for EventUploader.UploadFailure(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  sub_1000529A0(*a2, v4, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  uint64_t v8 = a1[2];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  sub_100023444(v6, v7, v8);
  return a1;
}

__n128 initializeWithTake for EventUploader.UploadFailure(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t *assignWithTake for EventUploader.UploadFailure(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *a1;
  unint64_t v6 = a1[1];
  uint64_t v5 = a1[2];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = v3;
  sub_100023444(v4, v6, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for EventUploader.UploadFailure(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)(a1 + 8) >> 1;
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for EventUploader.UploadFailure(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 2_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = 0LL;
      *(void *)(result + 8) = 2LL * -a2;
      *(void *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
      return result;
    }

    *(_BYTE *)(result + 2_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t sub_100052B64(uint64_t a1)
{
  return *(void *)(a1 + 8) >> 62;
}

uint64_t sub_100052B70(uint64_t result)
{
  *(void *)(result + 8) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t sub_100052B80(uint64_t result, uint64_t a2)
{
  *(void *)(result + 8) = *(void *)(result + 8) & 1LL | (a2 << 62);
  return result;
}

ValueMetadata *type metadata accessor for EventUploader.UploadFailure()
{
  return &type metadata for EventUploader.UploadFailure;
}

uint64_t sub_100052BA4()
{
  v1[3] = v0;
  v1[4] = *v0;
  uint64_t v2 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0LL);
  v1[5] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[6] = v3;
  v1[7] = swift_task_alloc((*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100052C0C, 0LL, 0LL);
}

uint64_t sub_100052C0C()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = swift_allocObject(&unk_100077BB8, 32LL, 7LL);
  __int128 v5 = *(_OWORD *)(v0 + 24);
  uint64_t v6 = *(void *)(v0 + 24);
  unint64_t v7 = *(void **)(v6 + 16);
  *(void *)(v0 + 6_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = v4;
  *(_OWORD *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  uint64_t v8 = (void *)swift_allocObject(&unk_100077BE0, 40LL, 7LL);
  *(void *)(v0 + 72) = v8;
  v8[2] = sub_100057E9C;
  v8[3] = v4;
  v8[4] = v7;
  uint64_t v9 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 104);
  swift_retain(v6);
  v10(v1, v9, v3);
  uint64_t v11 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  swift_retain(v4);
  v7;
  uint64_t v12 = (void *)swift_task_alloc(v11);
  *(void *)(v0 + 80) = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_100052D38;
  return NSManagedObjectContext.perform<A>(schedule:_:)( v0 + 16,  *(void *)(v0 + 56),  sub_1000580E0,  v8,  &type metadata for Int);
}

uint64_t sub_100052D38()
{
  uint64_t v2 = *(void *)(*v1 + 80);
  uint64_t v4 = *(void *)(*v1 + 48);
  uint64_t v3 = *(void *)(*v1 + 56);
  uint64_t v5 = *(void *)(*v1 + 40);
  uint64_t v6 = *v1;
  *(void *)(v6 + 88) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0)
  {
    swift_release(*(void *)(v6 + 72));
    return swift_task_switch(sub_100052E04, 0LL, 0LL);
  }

  else
  {
    uint64_t v8 = *(void *)(v6 + 64);
    uint64_t v9 = *(void *)(v6 + 56);
    swift_release(*(void *)(v6 + 72));
    swift_release(v8);
    uint64_t v10 = *(void *)(v6 + 16);
    swift_task_dealloc(v9);
    return (*(uint64_t (**)(uint64_t))(v6 + 8))(v10);
  }

uint64_t sub_100052E04()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_release(*(void *)(v0 + 64));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_100052E40(void (*a1)(void), uint64_t a2, void *a3)
{
  if (v3) {
    return (id)swift_willThrow([a3 reset]);
  }
  else {
    return [a3 reset];
  }
}

uint64_t sub_100052EA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v5[6] = a4;
  v5[7] = v4;
  v5[4] = a2;
  void v5[5] = a3;
  v5[3] = a1;
  v5[8] = *v4;
  uint64_t v6 = type metadata accessor for Logger(0LL);
  void v5[9] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[10] = v7;
  v5[11] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0LL);
  v5[12] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v5[13] = v9;
  v5[14] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100052F38, 0LL, 0LL);
}

uint64_t sub_100052F38()
{
  uint64_t v1 = *(void **)(*(void *)(v0 + 56) + 16LL);
  id v2 = [v1 persistentStoreCoordinator];
  *(void *)(v0 + 120) = v2;
  if (v2)
  {
    uint64_t v4 = v2;
    uint64_t v5 = *(void *)(v0 + 104);
    uint64_t v35 = *(void *)(v0 + 112);
    uint64_t v6 = *(void *)(v0 + 96);
    uint64_t v7 = *(void *)(v0 + 40);
    uint64_t v8 = *(void *)(v0 + 48);
    uint64_t v10 = *(void *)(v0 + 24);
    uint64_t v9 = *(void *)(v0 + 32);
    uint64_t v11 = swift_allocObject(&unk_100077D70, 72LL, 7LL);
    *(void *)(v0 + 128) = v11;
    *(void *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
    *(void *)(v11 + 2_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = v10;
    *(void *)(v11 + 32) = v9;
    *(void *)(v11 + 40) = v7;
    *(void *)(v11 + 48) = v8;
    __int128 v33 = *(_OWORD *)(v0 + 56);
    *(_OWORD *)(v11 + sub_1000154A8(*(void *)(v0 + 152) + OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_database, v0 + 56) = v33;
    uint64_t v12 = (void *)swift_allocObject(&unk_100077D98, 40LL, 7LL);
    *(void *)(v0 + 136) = v12;
    v12[2] = sub_100058778;
    uint64_t v12[3] = v11;
    v12[4] = v1;
    uint64_t v13 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 104);
    id v15 = v4;
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v8);
    swift_retain(v33);
    v14(v35, v13, v6);
    uint64_t v16 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
    swift_retain(v11);
    v1;
    int64_t v17 = (void *)swift_task_alloc(v16);
    *(void *)(v0 + 14_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = v17;
    void *v17 = v0;
    v17[1] = sub_100053284;
    return NSManagedObjectContext.perform<A>(schedule:_:)( v17,  *(void *)(v0 + 112),  sub_1000587E8,  v12,  (char *)&type metadata for () + 8);
  }

  else
  {
    uint64_t v19 = *(void *)(v0 + 64);
    uint64_t v20 = *(void *)(v0 + 32);
    sub_100013014( &qword_1000805A0,  v3,  (uint64_t (*)(uint64_t))type metadata accessor for CoreDataDatabase,  (uint64_t)&unk_100061F34);
    static LoggedObject.logger.getter(v19);
    uint64_t v21 = swift_bridgeObjectRetain_n(v20, 2LL);
    uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v23 = static os_log_type_t.error.getter();
    BOOL v24 = os_log_type_enabled(v22, v23);
    uint64_t v26 = *(void *)(v0 + 80);
    uint64_t v25 = *(void *)(v0 + 88);
    uint64_t v27 = *(void *)(v0 + 72);
    unint64_t v28 = *(void *)(v0 + 32);
    if (v24)
    {
      uint64_t v29 = *(void *)(v0 + 24);
      uint64_t v36 = *(void *)(v0 + 72);
      uint64_t v30 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v34 = v25;
      uint64_t v31 = swift_slowAlloc(32LL, -1LL);
      uint64_t v37 = v31;
      *(_DWORD *)uint64_t v30 = 136446210;
      swift_bridgeObjectRetain(v28);
      *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_100046274(v29, v28, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v30 + 4);
      swift_bridgeObjectRelease_n(v28, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v22,  v23,  "Could not set metadata '%{public}s' without coordinator",  v30,  0xCu);
      swift_arrayDestroy(v31, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1LL, -1LL);
      swift_slowDealloc(v30, -1LL, -1LL);

      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v34, v36);
    }

    else
    {
      swift_bridgeObjectRelease_n(*(void *)(v0 + 32), 2LL);

      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
    }

    uint64_t v32 = *(void *)(v0 + 88);
    swift_task_dealloc(*(void *)(v0 + 112));
    swift_task_dealloc(v32);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_100053284()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 144);
  uint64_t v5 = *(void *)(*v1 + 104);
  uint64_t v4 = *(void *)(*v1 + 112);
  uint64_t v6 = *(void *)(*v1 + 96);
  *(void *)(*v1 + 152) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  uint64_t v7 = *(void *)(v2 + 136);
  if (v0)
  {
    swift_release(v7);
    uint64_t v8 = sub_100053370;
  }

  else
  {
    uint64_t v9 = *(void *)(v2 + 128);
    swift_release(v7);
    swift_release(v9);
    uint64_t v8 = sub_100053328;
  }

  return swift_task_switch(v8, 0LL, 0LL);
}

uint64_t sub_100053328()
{
  uint64_t v1 = *(void *)(v0 + 88);
  swift_task_dealloc(*(void *)(v0 + 112));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100053370()
{
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 88);

  swift_release(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000533CC( void *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v88 = a6;
  uint64_t v90 = a4;
  uint64_t v92 = a2;
  uint64_t v13 = type metadata accessor for Logger(0LL);
  uint64_t v91 = *(void *)(v13 - 8);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v87 = (char *)&v81 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v89 = (char *)&v81 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v81 - v19;
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v81 - v21;
  id v23 = [a1 persistentStores];
  uint64_t v24 = sub_10000D5E8(0LL, &qword_10007F530, &OBJC_CLASS___NSPersistentStore_ptr);
  uint64_t v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v23, v24);

  if (!((unint64_t)v25 >> 62))
  {
    if (*(void *)((v25 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
      goto LABEL_3;
    }
LABEL_29:
    swift_bridgeObjectRelease(v25);
    sub_100013014( &qword_1000805A0,  v75,  (uint64_t (*)(uint64_t))type metadata accessor for CoreDataDatabase,  (uint64_t)&unk_100061F34);
    static LoggedObject.logger.getter(a7);
    uint64_t v76 = swift_bridgeObjectRetain_n(a3, 2LL);
    uint64_t v77 = (os_log_s *)Logger.logObject.getter(v76);
    os_log_type_t v78 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v77, v78))
    {
      uint64_t v90 = v13;
      uint64_t v79 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v80 = swift_slowAlloc(32LL, -1LL);
      *(void *)&__int128 v96 = v80;
      *(_DWORD *)uint64_t v79 = 136446210;
      swift_bridgeObjectRetain(a3);
      *(void *)&v94[0] = sub_100046274(v92, a3, (uint64_t *)&v96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v94, (char *)v94 + 8, v79 + 4);
      swift_bridgeObjectRelease_n(a3, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v77,  v78,  "Could not set metadata '%{public}s' without persistent store",  v79,  0xCu);
      swift_arrayDestroy(v80, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v80, -1LL, -1LL);
      swift_slowDealloc(v79, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v91 + 8))(v22, v90);
    }

    else
    {

      swift_bridgeObjectRelease_n(a3, 2LL);
      (*(void (**)(char *, uint64_t))(v91 + 8))(v22, v13);
    }

    return;
  }

  if (v25 < 0) {
    uint64_t v73 = v25;
  }
  else {
    uint64_t v73 = v25 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v25);
  uint64_t v74 = _CocoaArrayWrapper.endIndex.getter(v73);
  swift_bridgeObjectRelease(v25);
  if (!v74) {
    goto LABEL_29;
  }
LABEL_3:
  if ((v25 & 0xC000000000000001LL) != 0)
  {
    id v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v25);
  }

  else
  {
    if (!*(void *)((v25 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
      __break(1u);
    }
    id v26 = *(id *)(v25 + 32);
  }

  uint64_t v27 = v26;
  swift_bridgeObjectRelease(v25);
  uint64_t v29 = sub_100013014( &qword_1000805A0,  v28,  (uint64_t (*)(uint64_t))type metadata accessor for CoreDataDatabase,  (uint64_t)&unk_100061F34);
  uint64_t v86 = a7;
  static LoggedObject.logger.getter(a7);
  swift_bridgeObjectRetain_n(a5, 2LL);
  uint64_t v30 = swift_bridgeObjectRetain_n(a3, 2LL);
  uint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
  os_log_type_t v32 = static os_log_type_t.default.getter();
  BOOL v33 = os_log_type_enabled(v31, v32);
  uint64_t v85 = v29;
  if (v33)
  {
    uint64_t v34 = swift_slowAlloc(22LL, -1LL);
    uint64_t v84 = v27;
    uint64_t v35 = v34;
    uint64_t v82 = swift_slowAlloc(64LL, -1LL);
    *(void *)&v94[0] = v82;
    *(_DWORD *)uint64_t v35 = 136446466;
    uint64_t v83 = v8;
    swift_bridgeObjectRetain(a3);
    *(void *)&__int128 v96 = sub_100046274(v92, a3, (uint64_t *)v94);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, (char *)&v96 + 8, v35 + 4);
    swift_bridgeObjectRelease_n(a3, 3LL);
    *(_WORD *)(v35 + 12) = 2080;
    *(void *)&__int128 v96 = v90;
    *((void *)&v96 + sub_1000220E4(0LL, 1) = a5;
    swift_bridgeObjectRetain(a5);
    uint64_t v36 = sub_10000D228(&qword_100080630);
    uint64_t v37 = String.init<A>(describing:)(&v96, v36);
    uint64_t v38 = v13;
    unint64_t v40 = v39;
    *(void *)&__int128 v96 = sub_100046274(v37, v39, (uint64_t *)v94);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, (char *)&v96 + 8, v35 + 14);
    swift_bridgeObjectRelease_n(a5, 2LL);
    unint64_t v41 = v40;
    uint64_t v13 = v38;
    swift_bridgeObjectRelease(v41);
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "Setting metadata: '%{public}s' = %s", (uint8_t *)v35, 0x16u);
    uint64_t v42 = v82;
    swift_arrayDestroy(v82, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1LL, -1LL);
    uint64_t v43 = v35;
    uint64_t v27 = v84;
    swift_slowDealloc(v43, -1LL, -1LL);

    uint64_t v91 = *(void *)(v91 + 8);
    ((void (*)(char *, uint64_t))v91)(v20, v38);
    uint64_t v44 = v86;
    if (a5)
    {
LABEL_8:
      *((void *)&v97 + sub_1000220E4(0LL, 1) = &type metadata for String;
      *(void *)&__int128 v96 = v90;
      *((void *)&v96 + sub_1000220E4(0LL, 1) = a5;
      goto LABEL_11;
    }
  }

  else
  {

    swift_bridgeObjectRelease_n(a5, 2LL);
    swift_bridgeObjectRelease_n(a3, 2LL);
    uint64_t v91 = *(void *)(v91 + 8);
    ((void (*)(char *, uint64_t))v91)(v20, v13);
    uint64_t v44 = v86;
    if (a5) {
      goto LABEL_8;
    }
  }

  __int128 v96 = 0u;
  __int128 v97 = 0u;
LABEL_11:
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRetain(a5);
  id v45 = [v27 metadata];
  if (!v45)
  {
    __break(1u);
    return;
  }

  uint64_t v46 = v45;
  uint64_t v47 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v45,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);

  unint64_t v95 = v47;
  if (a5)
  {
    sub_10003FEB4(&v96, v94);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v47);
    uint64_t v93 = v47;
    unint64_t v95 = 0x8000000000000000LL;
    sub_10005CA58(v94, v92, a3, isUniquelyReferenced_nonNull_native);
    unint64_t v49 = v93;
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(0x8000000000000000LL);
    if (v49)
    {
LABEL_14:
      v50.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v49);
      goto LABEL_17;
    }
  }

  else
  {
    sub_100058188((uint64_t)&v96);
    sub_100057F74(v92, a3, v94);
    swift_bridgeObjectRelease(a3);
    sub_100058188((uint64_t)v94);
    unint64_t v49 = v95;
    if (v95) {
      goto LABEL_14;
    }
  }

  v50.super.Class isa = 0LL;
LABEL_17:
  [v27 setMetadata:v50.super.isa];

  uint64_t v51 = *(void **)(v88 + 16);
  *(void *)&__int128 v96 = 0LL;
  unsigned int v52 = [v51 save:&v96];
  uint64_t v53 = v96;
  if (v52)
  {
    id v54 = (id)v96;
    uint64_t v55 = static LoggedObject.logger.getter(v44);
    uint64_t v56 = (os_log_s *)Logger.logObject.getter(v55);
    os_log_type_t v57 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v56, v57))
    {
      uint64_t v58 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v58 = 0;
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "Successfully set metadata", v58, 2u);
      swift_slowDealloc(v58, -1LL, -1LL);
    }

    ((void (*)(char *, uint64_t))v91)(v89, v13);
  }

  else
  {
    id v59 = (id)v96;
    uint64_t v60 = _convertNSErrorToError(_:)(v53);

    swift_willThrow(v61);
    uint64_t v62 = v87;
    static LoggedObject.logger.getter(v44);
    swift_errorRetain(v60);
    uint64_t v63 = swift_errorRetain(v60);
    uint64_t v64 = (os_log_s *)Logger.logObject.getter(v63);
    os_log_type_t v65 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v64, v65))
    {
      uint64_t v84 = v27;
      unint64_t v66 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      unint64_t v67 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)unint64_t v66 = 138543362;
      swift_errorRetain(v60);
      uint64_t v68 = v60;
      uint64_t v69 = _swift_stdlib_bridgeErrorToNSError(v60);
      *(void *)&__int128 v96 = v69;
      uint64_t v27 = v84;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, (char *)&v96 + 8, v66 + 4);
      *unint64_t v67 = v69;
      swift_errorRelease(v68);
      swift_errorRelease(v68);
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "Failed to save metadata changes: %{public}@", v66, 0xCu);
      uint64_t v70 = sub_10000D228(&qword_10007EE38);
      swift_arrayDestroy(v67, 1LL, v70);
      swift_slowDealloc(v67, -1LL, -1LL);
      uint64_t v71 = v66;
      uint64_t v62 = v87;
      swift_slowDealloc(v71, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(v60);
      swift_errorRelease(v60);
    }

    uint64_t v72 = ((uint64_t (*)(char *, uint64_t))v91)(v62, v13);
    swift_willThrow(v72);
  }

uint64_t sub_100053D20(uint64_t a1, uint64_t a2)
{
  v3[15] = a2;
  v3[16] = v2;
  v3[14] = a1;
  v3[17] = *v2;
  uint64_t v4 = type metadata accessor for Logger(0LL);
  v3[18] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[19] = v5;
  unint64_t v6 = (*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[20] = swift_task_alloc(v6);
  v3[21] = swift_task_alloc(v6);
  v3[22] = swift_task_alloc(v6);
  return swift_task_switch(sub_100053DA8, 0LL, 0LL);
}

void sub_100053DA8()
{
  id v1 = [*(id *)(*(void *)(v0 + 128) + 16) persistentStoreCoordinator];
  if (!v1)
  {
    uint64_t v22 = *(void *)(v0 + 136);
    uint64_t v23 = *(void *)(v0 + 120);
    sub_100013014( &qword_1000805A0,  v2,  (uint64_t (*)(uint64_t))type metadata accessor for CoreDataDatabase,  (uint64_t)&unk_100061F34);
    static LoggedObject.logger.getter(v22);
    uint64_t v24 = swift_bridgeObjectRetain_n(v23, 2LL);
    uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
    os_log_type_t v26 = static os_log_type_t.error.getter();
    BOOL v27 = os_log_type_enabled(v25, v26);
    uint64_t v29 = *(void *)(v0 + 152);
    uint64_t v28 = *(void *)(v0 + 160);
    uint64_t v30 = *(void *)(v0 + 144);
    unint64_t v31 = *(void *)(v0 + 120);
    if (v27)
    {
      uint64_t v32 = *(void *)(v0 + 112);
      uint64_t v74 = *(void *)(v0 + 144);
      uint64_t v70 = *(void *)(v0 + 160);
      BOOL v33 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v34 = swift_slowAlloc(32LL, -1LL);
      uint64_t v76 = v34;
      *(_DWORD *)BOOL v33 = 136446210;
      swift_bridgeObjectRetain(v31);
      *(void *)(v0 + 80) = sub_100046274(v32, v31, &v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v33 + 4);
      swift_bridgeObjectRelease_n(v31, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v25,  v26,  "Could not get metadata '%{public}s' without coordinator",  v33,  0xCu);
      swift_arrayDestroy(v34, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1LL, -1LL);
      swift_slowDealloc(v33, -1LL, -1LL);

      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v70, v74);
LABEL_35:
      uint64_t v20 = 0LL;
      uint64_t v21 = 0LL;
LABEL_36:
      uint64_t v64 = *(void *)(v0 + 168);
      uint64_t v65 = *(void *)(v0 + 160);
      swift_task_dealloc(*(void *)(v0 + 176));
      swift_task_dealloc(v64);
      swift_task_dealloc(v65);
      (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v20, v21);
      return;
    }

    swift_bridgeObjectRelease_n(*(void *)(v0 + 120), 2LL);

    uint64_t v35 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
LABEL_34:
    v35(v28, v30);
    goto LABEL_35;
  }

  uint64_t v3 = v1;
  id v4 = [v1 persistentStores];
  uint64_t v5 = sub_10000D5E8(0LL, &qword_10007F530, &OBJC_CLASS___NSPersistentStore_ptr);
  uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v5);

  if (!((unint64_t)v6 >> 62))
  {
    if (*(void *)((v6 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
      goto LABEL_4;
    }
    goto LABEL_31;
  }

  if (v6 < 0) {
    uint64_t v51 = v6;
  }
  else {
    uint64_t v51 = v6 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v6);
  uint64_t v52 = _CocoaArrayWrapper.endIndex.getter(v51);
  swift_bridgeObjectRelease(v6);
  if (!v52)
  {
LABEL_31:
    uint64_t v53 = *(void *)(v0 + 136);
    uint64_t v54 = *(void *)(v0 + 120);
    swift_bridgeObjectRelease(v6);
    sub_100013014( &qword_1000805A0,  v55,  (uint64_t (*)(uint64_t))type metadata accessor for CoreDataDatabase,  (uint64_t)&unk_100061F34);
    static LoggedObject.logger.getter(v53);
    uint64_t v56 = swift_bridgeObjectRetain_n(v54, 2LL);
    os_log_type_t v57 = (os_log_s *)Logger.logObject.getter(v56);
    os_log_type_t v58 = static os_log_type_t.error.getter();
    BOOL v59 = os_log_type_enabled(v57, v58);
    uint64_t v28 = *(void *)(v0 + 168);
    uint64_t v30 = *(void *)(v0 + 144);
    uint64_t v60 = *(void *)(v0 + 152);
    unint64_t v61 = *(void *)(v0 + 120);
    if (v59)
    {
      uint64_t v75 = *(void *)(v0 + 152);
      uint64_t v68 = *(void *)(v0 + 112);
      uint64_t v72 = *(void *)(v0 + 144);
      uint64_t v62 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v63 = swift_slowAlloc(32LL, -1LL);
      uint64_t v76 = v63;
      *(_DWORD *)uint64_t v62 = 136446210;
      swift_bridgeObjectRetain(v61);
      *(void *)(v0 + 10_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = sub_100046274(v68, v61, &v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v62 + 4);
      swift_bridgeObjectRelease_n(v61, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v57,  v58,  "Could not get metadata '%{public}s' without persistent store",  v62,  0xCu);
      swift_arrayDestroy(v63, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v63, -1LL, -1LL);
      swift_slowDealloc(v62, -1LL, -1LL);

      (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v28, v72);
      goto LABEL_35;
    }

    swift_bridgeObjectRelease_n(v61, 2LL);
    uint64_t v35 = *(void (**)(uint64_t, uint64_t))(v60 + 8);
    goto LABEL_34;
  }

LABEL_4:
  if ((v6 & 0xC000000000000001LL) != 0)
  {
    id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v6);
  }

  else
  {
    if (!*(void *)((v6 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
      __break(1u);
      goto LABEL_39;
    }

    id v7 = *(id *)(v6 + 32);
  }

  uint64_t v8 = v7;
  swift_bridgeObjectRelease(v6);
  id v9 = [v8 metadata];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = (_OWORD *)(v0 + 16);
    uint64_t v12 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v9,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);

    uint64_t v73 = v8;
    if (*(void *)(v12 + 16))
    {
      uint64_t v14 = *(void *)(v0 + 112);
      uint64_t v13 = *(void *)(v0 + 120);
      swift_bridgeObjectRetain(v13);
      unint64_t v15 = sub_10005A2E0(v14, v13);
      uint64_t v16 = *(void *)(v0 + 120);
      if ((v17 & 1) != 0)
      {
        sub_10000D2C8(*(void *)(v12 + 56) + 32 * v15, v0 + 16);
        swift_bridgeObjectRelease(v12);
        swift_bridgeObjectRelease(v16);
        if (*(void *)(v0 + 40))
        {
          int v18 = swift_dynamicCast(v0 + 64, v0 + 16, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
          if (v18) {
            uint64_t v20 = *(void *)(v0 + 64);
          }
          else {
            uint64_t v20 = 0LL;
          }
          if (v18) {
            uint64_t v21 = *(void *)(v0 + 72);
          }
          else {
            uint64_t v21 = 0LL;
          }
          goto LABEL_24;
        }

uint64_t sub_100054594()
{
  return swift_deallocClassInstance(v0, 33LL, 7LL);
}

uint64_t type metadata accessor for CoreDataDatabase()
{
  return objc_opt_self(&OBJC_CLASS____TtC11homeeventsd16CoreDataDatabase);
}

uint64_t sub_1000545D8(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  v2[5] = *v1;
  uint64_t v3 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0LL);
  v2[6] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[7] = v4;
  v2[8] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Logger(0LL);
  v2[9] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[10] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[11] = swift_task_alloc(v7);
  v2[12] = swift_task_alloc(v7);
  return swift_task_switch(sub_100054678, 0LL, 0LL);
}

uint64_t sub_100054678(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 24);
  uint64_t v4 = *(void *)(v3 + 16);
  sub_100013014( &qword_1000805A0,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for CoreDataDatabase,  (uint64_t)&unk_100061F34);
  uint64_t v5 = *(void *)(v2 + 40);
  if (v4)
  {
    static LoggedObject.logger.getter(v5);
    swift_bridgeObjectRetain(v3);
    unint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v8 = static os_log_type_t.default.getter();
    BOOL v9 = os_log_type_enabled(v7, v8);
    uint64_t v10 = *(void *)(v2 + 24);
    if (v9)
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)uint64_t v11 = 134217984;
      *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 16, v2 + 24, v11 + 4);
      swift_bridgeObjectRelease(v10);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Saving %ld event(s)", v11, 0xCu);
      swift_slowDealloc(v11, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease(*(void *)(v2 + 24));
    }

    uint64_t v23 = *(void *)(v2 + 56);
    uint64_t v22 = *(void *)(v2 + 64);
    uint64_t v24 = *(void *)(v2 + 48);
    uint64_t v25 = *(void *)(v2 + 24);
    __int128 v33 = *(_OWORD *)(v2 + 32);
    (*(void (**)(void, void))(*(void *)(v2 + 80) + 8LL))(*(void *)(v2 + 96), *(void *)(v2 + 72));
    os_log_type_t v26 = *(void **)(v33 + 16);
    uint64_t v27 = swift_allocObject(&unk_100077D20, 40LL, 7LL);
    *(void *)(v2 + 10_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = v27;
    *(void *)(v27 + swift_unknownObjectWeakDestroy(v0 + 16) = v25;
    *(_OWORD *)(v27 + 2_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = v33;
    uint64_t v28 = (void *)swift_allocObject(&unk_100077D48, 40LL, 7LL);
    *(void *)(v2 + 112) = v28;
    v28[2] = sub_1000582F8;
    v28[3] = v27;
    v28[4] = v26;
    uint64_t v29 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
    uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 104);
    swift_bridgeObjectRetain(v25);
    swift_retain(v33);
    v30(v22, v29, v24);
    uint64_t v31 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
    swift_retain(v27);
    v26;
    uint64_t v32 = (void *)swift_task_alloc(v31);
    *(void *)(v2 + 120) = v32;
    void *v32 = v2;
    v32[1] = sub_1000549A0;
    return NSManagedObjectContext.perform<A>(schedule:_:)( v32,  *(void *)(v2 + 64),  sub_1000587E8,  v28,  (char *)&type metadata for () + 8);
  }

  else
  {
    uint64_t v12 = static LoggedObject.logger.getter(v5);
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      unint64_t v15 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "No events to save", v15, 2u);
      swift_slowDealloc(v15, -1LL, -1LL);
    }

    uint64_t v17 = *(void *)(v2 + 80);
    uint64_t v16 = *(void *)(v2 + 88);
    uint64_t v18 = *(void *)(v2 + 72);

    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
    uint64_t v19 = *(void *)(v2 + 88);
    uint64_t v20 = *(void *)(v2 + 64);
    swift_task_dealloc(*(void *)(v2 + 96));
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    return (*(uint64_t (**)(void))(v2 + 8))();
  }

uint64_t sub_1000549A0()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 120);
  uint64_t v5 = *(void *)(*v1 + 56);
  uint64_t v4 = *(void *)(*v1 + 64);
  uint64_t v6 = *(void *)(*v1 + 48);
  *(void *)(*v1 + 128) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  uint64_t v7 = *(void *)(v2 + 112);
  if (v0)
  {
    swift_release(v7);
    os_log_type_t v8 = sub_100054A8C;
  }

  else
  {
    uint64_t v9 = *(void *)(v2 + 104);
    swift_release(v7);
    swift_release(v9);
    os_log_type_t v8 = sub_100054A44;
  }

  return swift_task_switch(v8, 0LL, 0LL);
}

uint64_t sub_100054A44()
{
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 64);
  swift_task_dealloc(*(void *)(v0 + 96));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100054A8C()
{
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 64);
  swift_release(*(void *)(v0 + 104));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100054AE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger(0LL);
  os_log_type_t v58 = *(void (**)(char *, uint64_t))(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  BOOL v59 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v7);
  os_log_type_t v57 = (char *)&v56 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v56 - v12;
  __chkstk_darwin(v11);
  unint64_t v15 = (char *)&v56 - v14;
  uint64_t v60 = sub_100013014( &qword_1000805A0,  v16,  (uint64_t (*)(uint64_t))type metadata accessor for CoreDataDatabase,  (uint64_t)&unk_100061F34);
  uint64_t v17 = static LoggedObject.logger.getter(a3);
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    uint64_t v56 = a1;
    uint64_t v21 = v6;
    uint64_t v22 = v20;
    *(_WORD *)uint64_t v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Creating pending events from event data", v20, 2u);
    uint64_t v23 = v22;
    uint64_t v6 = v21;
    a1 = v56;
    swift_slowDealloc(v23, -1LL, -1LL);
  }

  uint64_t v24 = (void (*)(char *, uint64_t))*((void *)v58 + 1);
  v24(v15, v6);
  swift_retain(a2);
  uint64_t v25 = (uint64_t)sub_100058318(a1, a2);
  swift_release(a2);
  static LoggedObject.logger.getter(a3);
  swift_bridgeObjectRetain(v25);
  uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
  os_log_type_t v28 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v27, v28))
  {
    os_log_type_t v58 = v24;
    uint64_t v56 = v6;
    uint64_t v29 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v29 = 134217984;
    if ((unint64_t)v25 >> 62)
    {
      if (v25 < 0) {
        uint64_t v55 = v25;
      }
      else {
        uint64_t v55 = v25 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v25);
      uint64_t v30 = (void *)_CocoaArrayWrapper.endIndex.getter(v55);
      swift_bridgeObjectRelease(v25);
    }

    else
    {
      uint64_t v30 = *(void **)((v25 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    swift_bridgeObjectRelease(v25);
    id v61 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, v62, v29 + 4);
    swift_bridgeObjectRelease(v25);
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Saving %ld pending event(s)", v29, 0xCu);
    swift_slowDealloc(v29, -1LL, -1LL);

    uint64_t v6 = v56;
    uint64_t v24 = v58;
    v58(v13, v56);
  }

  else
  {

    swift_bridgeObjectRelease_n(v25, 2LL);
    v24(v13, v6);
  }

  uint64_t v31 = *(void **)(a2 + 16);
  id v61 = 0LL;
  unsigned int v32 = [v31 save:&v61];
  id v33 = v61;
  if (v32)
  {
    id v34 = v61;
    uint64_t v35 = v57;
    uint64_t v36 = static LoggedObject.logger.getter(a3);
    uint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
    os_log_type_t v38 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v37, v38))
    {
      unint64_t v39 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Successfully saved pending events", v39, 2u);
      swift_slowDealloc(v39, -1LL, -1LL);
    }

    return ((uint64_t (*)(char *, uint64_t))v24)(v35, v6);
  }

  else
  {
    id v41 = v61;
    uint64_t v42 = _convertNSErrorToError(_:)(v33);

    swift_willThrow(v43);
    static LoggedObject.logger.getter(a3);
    swift_errorRetain(v42);
    uint64_t v44 = swift_errorRetain(v42);
    uint64_t v45 = (os_log_s *)Logger.logObject.getter(v44);
    os_log_type_t v46 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v47 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v48 = swift_slowAlloc(8LL, -1LL);
      os_log_type_t v58 = v24;
      unint64_t v49 = (void *)v48;
      *(_DWORD *)uint64_t v47 = 138543362;
      swift_errorRetain(v42);
      uint64_t v50 = v6;
      uint64_t v51 = (void *)_swift_stdlib_bridgeErrorToNSError(v42);
      id v61 = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, v62, v47 + 4);
      *unint64_t v49 = v51;
      uint64_t v6 = v50;
      swift_errorRelease(v42);
      swift_errorRelease(v42);
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Failed to save pending events: %{public}@", v47, 0xCu);
      uint64_t v52 = sub_10000D228(&qword_10007EE38);
      swift_arrayDestroy(v49, 1LL, v52);
      uint64_t v53 = v49;
      uint64_t v24 = v58;
      swift_slowDealloc(v53, -1LL, -1LL);
      swift_slowDealloc(v47, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(v42);
      swift_errorRelease(v42);
    }

    uint64_t v54 = ((uint64_t (*)(char *, uint64_t))v24)(v59, v6);
    return swift_willThrow(v54);
  }

uint64_t sub_10005507C(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  v2[6] = *v1;
  uint64_t v3 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0LL);
  v2[7] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[8] = v4;
  v2[9] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Logger(0LL);
  v2[10] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[11] = v6;
  v2[12] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10005510C, 0LL, 0LL);
}

uint64_t sub_10005510C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 48);
  sub_100013014( &qword_1000805A0,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for CoreDataDatabase,  (uint64_t)&unk_100061F34);
  uint64_t v4 = static LoggedObject.logger.getter(v3);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = *(void *)(v2 + 32);
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v8 = 134217984;
    *(void *)(v2 + 2_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 24, v2 + 32, v8 + 4);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Fetching pending events (limit = %ld)", v8, 0xCu);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  uint64_t v9 = *(void *)(v2 + 72);
  uint64_t v10 = *(void *)(v2 + 56);
  uint64_t v11 = *(void *)(v2 + 64);
  uint64_t v12 = *(void *)(v2 + 32);
  __int128 v18 = *(_OWORD *)(v2 + 40);
  (*(void (**)(void, void))(*(void *)(v2 + 88) + 8LL))(*(void *)(v2 + 96), *(void *)(v2 + 80));
  uint64_t v13 = swift_allocObject(&unk_100077CA8, 40LL, 7LL);
  *(void *)(v2 + 10_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = v13;
  *(void *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = v12;
  *(_OWORD *)(v13 + 2_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = v18;
  (*(void (**)(uint64_t, void, uint64_t))(v11 + 104))( v9,  enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:),  v10);
  uint64_t v14 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  swift_retain(v18);
  unint64_t v15 = (void *)swift_task_alloc(v14);
  *(void *)(v2 + 112) = v15;
  uint64_t v16 = sub_10000D228(&qword_100080608);
  *unint64_t v15 = v2;
  v15[1] = sub_1000552EC;
  return NSManagedObjectContext.perform<A>(schedule:_:)(v2 + 16, *(void *)(v2 + 72), sub_100058290, v13, v16);
}

uint64_t sub_1000552EC()
{
  uint64_t v3 = *(void *)(*(void *)v1 + 104LL);
  uint64_t v2 = *(void *)(*(void *)v1 + 112LL);
  uint64_t v5 = *(void *)(*(void *)v1 + 64LL);
  uint64_t v4 = *(void *)(*(void *)v1 + 72LL);
  uint64_t v6 = *(void *)(*(void *)v1 + 56LL);
  *(void *)(*(void *)v1 + 12(*(void (**)(void, void, void))(v0 + 16))(*(void *)(v0 + 32), *(void *)(v0 + 40), 0LL) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_release(v3);
  if (v0) {
    uint64_t v7 = sub_1000553C8;
  }
  else {
    uint64_t v7 = sub_100055380;
  }
  return swift_task_switch(v7, 0LL, 0LL);
}

uint64_t sub_100055380()
{
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 16);
  swift_task_dealloc(*(void *)(v0 + 96));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t sub_1000553C8()
{
  uint64_t v1 = *(void *)(v0 + 72);
  swift_task_dealloc(*(void *)(v0 + 96));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100055408(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v85 = a4;
  uint64_t v7 = type metadata accessor for Date(0LL);
  uint64_t v101 = *(void *)(v7 - 8);
  uint64_t v102 = v7;
  __chkstk_darwin(v7);
  uint64_t v106 = (char *)v84 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v99 = *(void *)(v9 - 8);
  uint64_t v100 = v9;
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v105 = (char *)v84 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  unint64_t v104 = (char *)v84 - v12;
  uint64_t v13 = type metadata accessor for PendingEventData(0LL);
  uint64_t v97 = *(void *)(v13 - 8);
  uint64_t v98 = (int *)v13;
  __chkstk_darwin(v13);
  uint64_t v107 = (char *)v84 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v91 = type metadata accessor for Logger(0LL);
  uint64_t v15 = *(void *)(v91 - 8);
  uint64_t v16 = __chkstk_darwin(v91);
  __int128 v18 = (char *)v84 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v86 = (char *)v84 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v23 = (char *)v84 - v22;
  __chkstk_darwin(v21);
  uint64_t v25 = (char *)v84 - v24;
  uint64_t v88 = sub_100013014( &qword_1000805A0,  v26,  (uint64_t (*)(uint64_t))type metadata accessor for CoreDataDatabase,  (uint64_t)&unk_100061F34);
  uint64_t v89 = a3;
  uint64_t v27 = static LoggedObject.logger.getter(a3);
  os_log_type_t v28 = (os_log_s *)Logger.logObject.getter(v27);
  os_log_type_t v29 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v30 = 0;
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Beginning fetch", v30, 2u);
    swift_slowDealloc(v30, -1LL, -1LL);
  }

  uint64_t v31 = 0xD000000000000012LL;

  uint64_t v90 = *(void (**)(char *, uint64_t))(v15 + 8);
  v90(v25, v91);
  uint64_t v32 = type metadata accessor for PendingUploadEvent();
  uint64_t v108 = (void *)v32;
  uint64_t v33 = sub_10000D228(&qword_100080610);
  uint64_t v34 = String.init<A>(describing:)(&v108, v33);
  uint64_t v36 = v35;
  if ((v34 != 0xD000000000000012LL || v35 != 0x80000001000640B0LL)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(v34, v35, 0xD000000000000012LL, 0x80000001000640B0LL, 0LL) & 1) == 0)
  {
    __break(1u);
    goto LABEL_30;
  }

  id v37 = objc_allocWithZone(&OBJC_CLASS___NSFetchRequest);
  NSString v38 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v36);
  id v39 = [v37 initWithEntityName:v38];

  [v39 setReturnsObjectsAsFaults:0];
  [v39 setFetchLimit:a1];
  if ((a2[4] & 1) == 0) {
    [v39 setFetchBatchSize:a2[3]];
  }
  id v87 = v39;
  os_log_type_t v40 = v103;
  uint64_t v41 = NSManagedObjectContext.fetch<A>(_:)(v39, v32);
  a2 = v40;
  if (v40)
  {
    static LoggedObject.logger.getter(v89);
    swift_errorRetain(v40);
    uint64_t v42 = swift_errorRetain(v40);
    uint64_t v43 = (os_log_s *)Logger.logObject.getter(v42);
    os_log_type_t v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      os_log_type_t v46 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v45 = 138543362;
      swift_errorRetain(v40);
      uint64_t v47 = _swift_stdlib_bridgeErrorToNSError(v40);
      uint64_t v108 = (void *)v47;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v108, &v109, v45 + 4);
      *os_log_type_t v46 = v47;
      swift_errorRelease(v40);
      swift_errorRelease(v40);
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "Failed to fetch pending events: %{public}@", v45, 0xCu);
      uint64_t v48 = sub_10000D228(&qword_10007EE38);
      swift_arrayDestroy(v46, 1LL, v48);
      swift_slowDealloc(v46, -1LL, -1LL);
      swift_slowDealloc(v45, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(v40);
      swift_errorRelease(v40);
    }

    uint64_t v78 = ((uint64_t (*)(char *, uint64_t))v90)(v18, v91);
    swift_willThrow(v78);

    return;
  }

  uint64_t v31 = v41;
  uint64_t v49 = static LoggedObject.logger.getter(v89);
  uint64_t v50 = (os_log_s *)Logger.logObject.getter(v49);
  os_log_type_t v51 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v50, v51))
  {
    uint64_t v52 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v52 = 0;
    _os_log_impl((void *)&_mh_execute_header, v50, v51, "Fetch completed successfully", v52, 2u);
    swift_slowDealloc(v52, -1LL, -1LL);
  }

  v90(v23, v91);
  __int128 v18 = v107;
  if ((unint64_t)v31 >> 62)
  {
LABEL_30:
    if (v31 < 0) {
      uint64_t v79 = v31;
    }
    else {
      uint64_t v79 = v31 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v31);
    uint64_t v53 = _CocoaArrayWrapper.endIndex.getter(v79);
    swift_bridgeObjectRelease(v31);
    if (v53) {
      goto LABEL_15;
    }
    goto LABEL_34;
  }

  uint64_t v53 = *(void *)((v31 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (v53)
  {
LABEL_15:
    uint64_t v108 = _swiftEmptyArrayStorage;
    sub_10002CD58(0, v53 & ~(v53 >> 63), 0);
    if (v53 < 0)
    {
      __break(1u);
      return;
    }

    v84[1] = a2;
    uint64_t v54 = 0LL;
    uint64_t v55 = v108;
    uint64_t v93 = &unk_100061F60;
    unint64_t v94 = v31 & 0xC000000000000001LL;
    unint64_t v92 = 0x8000000100061F60LL;
    uint64_t v95 = v53;
    uint64_t v96 = v31;
    do
    {
      unint64_t v103 = v55;
      if (v94) {
        id v56 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v54, v31);
      }
      else {
        id v56 = *(id *)(v31 + 8 * v54 + 32);
      }
      os_log_type_t v57 = v56;
      id v58 = [v56 identifier];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      id v59 = [v57 homeIdentifier];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      id v60 = [v57 date];
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      id v61 = [v57 type];
      id v62 = [v57 data];
      uint64_t v63 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v65 = v64;

      NSString v66 = String._bridgeToObjectiveC()();
      [v57 willAccessValueForKey:v66];

      id v67 = [v57 primitiveUnencryptedTags];
      if (v67)
      {
        uint64_t v68 = v67;
        uint64_t v69 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v67, &type metadata for Data);
      }

      else
      {
        uint64_t v69 = _swiftEmptyArrayStorage;
      }

      NSString v70 = String._bridgeToObjectiveC()();
      [v57 didAccessValueForKey:v70];

      uint64_t v71 = v100;
      uint64_t v72 = *(void (**)(char *, char *, uint64_t))(v99 + 32);
      v72(v18, v104, v100);
      uint64_t v73 = v98;
      v72(&v107[v98[5]], v105, v71);
      (*(void (**)(char *, char *, uint64_t))(v101 + 32))(&v107[v73[6]], v106, v102);

      *(void *)&v107[v73[7]] = v61;
      uint64_t v74 = (uint64_t *)&v107[v73[8]];
      uint64_t *v74 = v63;
      v74[1] = v65;
      uint64_t v75 = v73[9];
      __int128 v18 = v107;
      *(void *)&v107[v75] = v69;
      uint64_t v55 = v103;
      uint64_t v108 = v103;
      unint64_t v77 = v103[2];
      unint64_t v76 = v103[3];
      if (v77 >= v76 >> 1)
      {
        sub_10002CD58(v76 > 1, v77 + 1, 1);
        uint64_t v55 = v108;
      }

      ++v54;
      v55[2] = v77 + 1;
      sub_100040B04( (uint64_t)v18,  (uint64_t)v55 + ((*(unsigned __int8 *)(v97 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80))
      + *(void *)(v97 + 72) * v77);
      uint64_t v31 = v96;
    }

    while (v95 != v54);
    swift_bridgeObjectRelease(v96);
    goto LABEL_35;
  }

uint64_t sub_100055DC0(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  v2[4] = *v1;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  v2[5] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[6] = v4;
  v2[7] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0LL);
  v2[8] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[9] = v6;
  v2[10] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100055E50, 0LL, 0LL);
}

uint64_t sub_100055E50(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 16);
  if (*(void *)(v3 + 16))
  {
    uint64_t v5 = *(void *)(v2 + 72);
    uint64_t v4 = *(void *)(v2 + 80);
    uint64_t v6 = *(void *)(v2 + 64);
    uint64_t v7 = swift_allocObject(&unk_100077C58, 40LL, 7LL);
    __int128 v8 = *(_OWORD *)(v2 + 24);
    uint64_t v9 = *(void *)(v2 + 24);
    uint64_t v10 = *(void **)(v9 + 16);
    *(void *)(v2 + 88) = v7;
    *(void *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
    *(_OWORD *)(v7 + 2_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = v8;
    uint64_t v11 = (void *)swift_allocObject(&unk_100077C80, 40LL, 7LL);
    *(void *)(v2 + 96) = v11;
    v11[2] = sub_1000581F0;
    v11[3] = v7;
    v11[4] = v10;
    uint64_t v12 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 104);
    swift_bridgeObjectRetain(v3);
    swift_retain(v9);
    v13(v4, v12, v6);
    uint64_t v14 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
    swift_retain(v7);
    v10;
    uint64_t v15 = (void *)swift_task_alloc(v14);
    *(void *)(v2 + 10_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = v15;
    *uint64_t v15 = v2;
    v15[1] = sub_100056084;
    return NSManagedObjectContext.perform<A>(schedule:_:)( v15,  *(void *)(v2 + 80),  sub_100058210,  v11,  (char *)&type metadata for () + 8);
  }

  else
  {
    uint64_t v17 = *(void *)(v2 + 32);
    sub_100013014( &qword_1000805A0,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for CoreDataDatabase,  (uint64_t)&unk_100061F34);
    uint64_t v18 = static LoggedObject.logger.getter(v17);
    uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "No identifiers to delete", v21, 2u);
      swift_slowDealloc(v21, -1LL, -1LL);
    }

    uint64_t v23 = *(void *)(v2 + 48);
    uint64_t v22 = *(void *)(v2 + 56);
    uint64_t v24 = *(void *)(v2 + 40);

    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
    uint64_t v25 = *(void *)(v2 + 56);
    swift_task_dealloc(*(void *)(v2 + 80));
    swift_task_dealloc(v25);
    return (*(uint64_t (**)(void))(v2 + 8))();
  }

uint64_t sub_100056084()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 104);
  uint64_t v5 = *(void *)(*v1 + 72);
  uint64_t v4 = *(void *)(*v1 + 80);
  uint64_t v6 = *(void *)(*v1 + 64);
  *(void *)(*v1 + 112) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  uint64_t v7 = *(void *)(v2 + 96);
  if (v0)
  {
    swift_release(v7);
    __int128 v8 = sub_100056168;
  }

  else
  {
    uint64_t v9 = *(void *)(v2 + 88);
    swift_release(v7);
    swift_release(v9);
    __int128 v8 = sub_100056128;
  }

  return swift_task_switch(v8, 0LL, 0LL);
}

uint64_t sub_100056128()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_task_dealloc(*(void *)(v0 + 80));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100056168()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 56);
  swift_release(*(void *)(v0 + 88));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000561B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v50 = a2;
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v45 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  __int128 v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (void (*)(char *, uint64_t))((char *)&v43 - v9);
  uint64_t v11 = type metadata accessor for PendingUploadEvent();
  id v12 = [(id)swift_getObjCClassFromMetadata(v11) fetchRequest];
  sub_10000D5E8(0LL, &qword_1000805C8, &OBJC_CLASS___NSPredicate_ptr);
  uint64_t v13 = sub_10000D228(&qword_1000805D0);
  uint64_t v14 = swift_allocObject(v13, 72LL, 7LL);
  *(_OWORD *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100060320;
  *(void *)(v14 + sub_1000154A8(*(void *)(v0 + 152) + OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_database, v0 + 56) = sub_10000D228(&qword_1000805F0);
  *(void *)(v14 + 6_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = sub_10005822C( &qword_1000805F8,  &qword_1000805F0,  (uint64_t)&protocol conformance descriptor for [A]);
  *(void *)(v14 + 32) = a1;
  swift_bridgeObjectRetain(a1);
  uint64_t v15 = (void *)NSPredicate.init(format:_:)(0xD000000000000010LL, 0x8000000100064090LL, v14);
  id v47 = v12;
  [v12 setPredicate:v15];

  sub_100013014( &qword_1000805A0,  v16,  (uint64_t (*)(uint64_t))type metadata accessor for CoreDataDatabase,  (uint64_t)&unk_100061F34);
  static LoggedObject.logger.getter(a3);
  uint64_t v17 = swift_bridgeObjectRetain_n(a1, 2LL);
  os_log_type_t v46 = v10;
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.default.getter();
  BOOL v20 = os_log_type_enabled(v18, v19);
  uint64_t v48 = v8;
  uint64_t v49 = v5;
  if (v20)
  {
    uint64_t v21 = swift_slowAlloc(22LL, -1LL);
    uint64_t v44 = swift_slowAlloc(32LL, -1LL);
    uint64_t v53 = v44;
    *(_DWORD *)uint64_t v21 = 134218242;
    uint64_t v51 = *(void *)(a1 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v21 + 4);
    *(_WORD *)(v21 + 12) = 2080;
    uint64_t v43 = v21 + 14;
    uint64_t v22 = type metadata accessor for UUID(0LL);
    uint64_t v23 = swift_bridgeObjectRetain(a1);
    uint64_t v24 = a3;
    uint64_t v25 = Array.description.getter(v23, v22);
    unint64_t v27 = v26;
    swift_bridgeObjectRelease(a1);
    uint64_t v28 = v25;
    a3 = v24;
    uint64_t v51 = sub_100046274(v28, v27, &v53);
    uint64_t v5 = v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v43);
    swift_bridgeObjectRelease_n(a1, 2LL);
    swift_bridgeObjectRelease(v27);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Deleting %ld identifier(s): %s", (uint8_t *)v21, 0x16u);
    uint64_t v29 = v44;
    swift_arrayDestroy(v44, 1LL, (char *)&type metadata for Any + 8);
    __int128 v8 = v48;
    swift_slowDealloc(v29, -1LL, -1LL);
    swift_slowDealloc(v21, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a1, 2LL);
  }

  uint64_t v30 = *(void (**)(char *, uint64_t))(v45 + 8);
  v30((char *)v46, v5);
  static LoggedObject.logger.getter(a3);
  uint64_t v31 = swift_bridgeObjectRetain_n(a1, 2LL);
  uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
  os_log_type_t v33 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v35 = swift_slowAlloc(32LL, -1LL);
    os_log_type_t v46 = v30;
    uint64_t v36 = v35;
    uint64_t v53 = v35;
    *(_DWORD *)uint64_t v34 = 136315138;
    uint64_t v37 = type metadata accessor for UUID(0LL);
    uint64_t v38 = swift_bridgeObjectRetain(a1);
    uint64_t v39 = Array.description.getter(v38, v37);
    unint64_t v41 = v40;
    swift_bridgeObjectRelease(a1);
    uint64_t v51 = sub_100046274(v39, v41, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v34 + 4);
    swift_bridgeObjectRelease_n(a1, 2LL);
    swift_bridgeObjectRelease(v41);
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "%s", v34, 0xCu);
    swift_arrayDestroy(v36, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1LL, -1LL);
    swift_slowDealloc(v34, -1LL, -1LL);

    v46(v48, v49);
  }

  else
  {

    swift_bridgeObjectRelease_n(a1, 2LL);
    v30(v8, v5);
  }

  uint64_t v42 = v47;
  sub_1000566A8((uint64_t)v47);
}

os_log_s *sub_1000566A8(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v78 = *(void *)(v4 - 8);
  uint64_t v79 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v75 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v75 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v75 - v14;
  id v16 = [objc_allocWithZone(NSBatchDeleteRequest) initWithFetchRequest:a1];
  [v16 setResultType:2];
  uint64_t v17 = (void *)v1[2];
  *(void *)&v81[0] = 0LL;
  id v18 = [v17 executeRequest:v16 error:v81];
  os_log_type_t v19 = *(void **)&v81[0];
  if (!v18)
  {
    id v27 = *(id *)&v81[0];
    uint64_t v28 = _convertNSErrorToError(_:)(v19);

    swift_willThrow(v29);
    sub_100013014( &qword_1000805A0,  v30,  (uint64_t (*)(uint64_t))type metadata accessor for CoreDataDatabase,  (uint64_t)&unk_100061F34);
    static LoggedObject.logger.getter(v3);
    swift_errorRetain(v28);
    uint64_t v31 = swift_errorRetain(v28);
    uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      id v77 = v16;
      uint64_t v34 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v35 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v34 = 138543362;
      swift_errorRetain(v28);
      uint64_t v36 = _swift_stdlib_bridgeErrorToNSError(v28);
      *(void *)&__int128 v82 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, (char *)&v82 + 8, v34 + 4);
      *uint64_t v35 = v36;
      id v16 = v77;
      swift_errorRelease(v28);
      swift_errorRelease(v28);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Batch delete failed to execute: %{public}@", v34, 0xCu);
      uint64_t v37 = sub_10000D228(&qword_10007EE38);
      swift_arrayDestroy(v35, 1LL, v37);
      swift_slowDealloc(v35, -1LL, -1LL);
      swift_slowDealloc(v34, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(v28);
      swift_errorRelease(v28);
    }

    uint64_t v50 = (*(uint64_t (**)(char *, uint64_t))(v78 + 8))(v7, v79);
    swift_willThrow(v50);

    return v32;
  }

  id v20 = v18;
  *((void *)&v83 + sub_1000220E4(0LL, 1) = sub_10000D5E8(0LL, &qword_1000805A8, &OBJC_CLASS___NSPersistentStoreResult_ptr);
  *(void *)&__int128 v82 = v20;
  sub_10003FEB4(&v82, v84);
  sub_10000D2C8((uint64_t)v84, (uint64_t)&v82);
  uint64_t v21 = sub_10000D5E8(0LL, &qword_1000805B0, &OBJC_CLASS___NSBatchDeleteResult_ptr);
  id v22 = v19;
  if (!swift_dynamicCast(v81, &v82, (char *)&type metadata for Any + 8, v21, 6LL))
  {
    sub_100013014( &qword_1000805A0,  v23,  (uint64_t (*)(uint64_t))type metadata accessor for CoreDataDatabase,  (uint64_t)&unk_100061F34);
    static LoggedObject.logger.getter(v3);
    uint64_t v38 = sub_10000D2C8((uint64_t)v84, (uint64_t)&v82);
    uint64_t v32 = (os_log_s *)Logger.logObject.getter(v38);
    os_log_type_t v39 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v32, v39))
    {
      id v77 = v16;
      unint64_t v40 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v41 = swift_slowAlloc(32LL, -1LL);
      *(void *)&v81[0] = v41;
      *(_DWORD *)unint64_t v40 = 136446210;
      unint64_t v76 = v40 + 4;
      uint64_t v42 = *((void *)&v83 + 1);
      uint64_t v43 = sub_10000D408(&v82, *((uint64_t *)&v83 + 1));
      __chkstk_darwin(v43);
      uint64_t v45 = (char *)&v75 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      (*(void (**)(char *))(v46 + 16))(v45);
      uint64_t v47 = String.init<A>(describing:)(v45, v42);
      unint64_t v49 = v48;
      id v16 = v77;
      uint64_t v80 = sub_100046274(v47, v48, (uint64_t *)v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, v81, v76);
      swift_bridgeObjectRelease(v49);
      _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(&v82);
      _os_log_impl( (void *)&_mh_execute_header,  v32,  v39,  "Unexpected result type for batch delete: %{public}s",  v40,  0xCu);
      swift_arrayDestroy(v41, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1LL, -1LL);
      swift_slowDealloc(v40, -1LL, -1LL);
    }

    else
    {
      _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(&v82);
    }

    (*(void (**)(char *, uint64_t))(v78 + 8))(v10, v79);
    unint64_t v51 = sub_1000580FC();
    uint64_t v52 = swift_allocError(&type metadata for LocalDatabaseError, v51, 0LL, 0LL);
    *uint64_t v53 = 0xD000000000000027LL;
    v53[1] = 0x8000000100064010LL;
    swift_willThrow(v52);
LABEL_27:

    _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v84);
    return v32;
  }

  uint64_t v24 = *(void **)&v81[0];
  id v25 = [*(id *)&v81[0] result];
  if (v25)
  {
    id v26 = v25;
    _bridgeAnyObjectToAny(_:)(v25);
    swift_unknownObjectRelease(v26);
  }

  else
  {
    memset(v81, 0, sizeof(v81));
  }

  sub_100058140((uint64_t)v81, (uint64_t)&v82);
  if (!*((void *)&v83 + 1))
  {
    sub_100058188((uint64_t)&v82);
    goto LABEL_20;
  }

  uint64_t v54 = sub_10000D5E8(0LL, (unint64_t *)&qword_10007EF30, &OBJC_CLASS___NSNumber_ptr);
  if ((swift_dynamicCast(&v80, &v82, (char *)&type metadata for Any + 8, v54, 6LL) & 1) == 0)
  {
LABEL_20:
    sub_100013014( &qword_1000805A0,  v55,  (uint64_t (*)(uint64_t))type metadata accessor for CoreDataDatabase,  (uint64_t)&unk_100061F34);
    static LoggedObject.logger.getter(v3);
    id v61 = v24;
    uint64_t v32 = (os_log_s *)Logger.logObject.getter(v61);
    os_log_type_t v62 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v32, v62))
    {
      uint64_t v63 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v64 = swift_slowAlloc(32LL, -1LL);
      *(void *)&v81[0] = v64;
      *(_DWORD *)uint64_t v63 = 136446210;
      id v65 = [v61 result];
      id v77 = v16;
      if (v65)
      {
        id v66 = v65;
        _bridgeAnyObjectToAny(_:)(v65);
        swift_unknownObjectRelease(v66);
      }

      else
      {
        __int128 v82 = 0u;
        __int128 v83 = 0u;
      }

      uint64_t v67 = sub_10000D228(&qword_10007EF00);
      uint64_t v68 = String.init<A>(describing:)(&v82, v67);
      unint64_t v70 = v69;
      *(void *)&__int128 v82 = sub_100046274(v68, v69, (uint64_t *)v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, (char *)&v82 + 8, v63 + 4);

      swift_bridgeObjectRelease(v70);
      _os_log_impl((void *)&_mh_execute_header, v32, v62, "Expected number as result, got %{public}s", v63, 0xCu);
      swift_arrayDestroy(v64, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v64, -1LL, -1LL);
      swift_slowDealloc(v63, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v78 + 8))(v13, v79);
      id v16 = v77;
    }

    else
    {

      (*(void (**)(char *, uint64_t))(v78 + 8))(v13, v79);
    }

    unint64_t v71 = sub_1000580FC();
    uint64_t v72 = swift_allocError(&type metadata for LocalDatabaseError, v71, 0LL, 0LL);
    *uint64_t v73 = 0xD000000000000020LL;
    v73[1] = 0x8000000100064040LL;
    swift_willThrow(v72);

    goto LABEL_27;
  }

  id v56 = (void *)v80;
  sub_100013014( &qword_1000805A0,  v55,  (uint64_t (*)(uint64_t))type metadata accessor for CoreDataDatabase,  (uint64_t)&unk_100061F34);
  uint64_t v57 = static LoggedObject.logger.getter(v3);
  id v58 = (os_log_s *)Logger.logObject.getter(v57);
  os_log_type_t v59 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v58, v59))
  {
    id v60 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v60 = 0;
    _os_log_impl((void *)&_mh_execute_header, v58, v59, "Batch delete succeeded", v60, 2u);
    swift_slowDealloc(v60, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v78 + 8))(v15, v79);
  uint64_t v32 = (os_log_s *)[v56 integerValue];

  _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v84);
  return v32;
}

uint64_t sub_100056FB4(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  v2[5] = *v1;
  uint64_t v3 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0LL);
  v2[6] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[7] = v4;
  v2[8] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10005701C, 0LL, 0LL);
}

uint64_t sub_10005701C()
{
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 48);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v5 = swift_allocObject(&unk_100077C08, 40LL, 7LL);
  __int128 v6 = *(_OWORD *)(v0 + 32);
  uint64_t v7 = *(void *)(v0 + 32);
  uint64_t v8 = *(void **)(v7 + 16);
  *(void *)(v0 + 72) = v5;
  *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  *(_OWORD *)(v5 + 2_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = v6;
  uint64_t v9 = (void *)swift_allocObject(&unk_100077C30, 40LL, 7LL);
  *(void *)(v0 + 80) = v9;
  v9[2] = sub_1000581CC;
  v9[3] = v5;
  v9[4] = v8;
  uint64_t v10 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 104);
  swift_bridgeObjectRetain(v4);
  swift_retain(v7);
  v11(v1, v10, v3);
  uint64_t v12 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  swift_retain(v5);
  v8;
  uint64_t v13 = (void *)swift_task_alloc(v12);
  *(void *)(v0 + 88) = v13;
  *uint64_t v13 = v0;
  v13[1] = sub_10005715C;
  return NSManagedObjectContext.perform<A>(schedule:_:)( v0 + 16,  *(void *)(v0 + 64),  sub_1000587D4,  v9,  &type metadata for Int);
}

uint64_t sub_10005715C()
{
  uint64_t v2 = *(void *)(*v1 + 88);
  uint64_t v4 = *(void *)(*v1 + 56);
  uint64_t v3 = *(void *)(*v1 + 64);
  uint64_t v5 = *(void *)(*v1 + 48);
  uint64_t v6 = *v1;
  *(void *)(v6 + 96) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0)
  {
    swift_release(*(void *)(v6 + 80));
    return swift_task_switch(sub_100057228, 0LL, 0LL);
  }

  else
  {
    uint64_t v8 = *(void *)(v6 + 72);
    uint64_t v9 = *(void *)(v6 + 64);
    swift_release(*(void *)(v6 + 80));
    swift_release(v8);
    uint64_t v10 = *(void *)(v6 + 16);
    swift_task_dealloc(v9);
    return (*(uint64_t (**)(uint64_t))(v6 + 8))(v10);
  }

uint64_t sub_100057228()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_release(*(void *)(v0 + 72));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100057264(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, os_log_s **a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v37 = a2;
  uint64_t v34 = a4;
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v36 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for PendingUploadEvent();
  id v12 = [(id)swift_getObjCClassFromMetadata(v11) fetchRequest];
  sub_10000D5E8(0LL, &qword_1000805C8, &OBJC_CLASS___NSPredicate_ptr);
  uint64_t v13 = sub_10000D228(&qword_1000805D0);
  uint64_t v14 = swift_allocObject(v13, 72LL, 7LL);
  *(_OWORD *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100060320;
  *(void *)(v14 + sub_1000154A8(*(void *)(v0 + 152) + OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_database, v0 + 56) = sub_10000D228(&qword_1000805D8);
  *(void *)(v14 + 6_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = sub_10005822C( &qword_1000805E0,  &qword_1000805D8,  (uint64_t)&protocol conformance descriptor for Set<A>);
  *(void *)(v14 + 32) = a1;
  swift_bridgeObjectRetain(a1);
  uint64_t v15 = (void *)NSPredicate.init(format:_:)(0xD000000000000014LL, 0x8000000100064070LL, v14);
  [v12 setPredicate:v15];

  sub_100013014( &qword_1000805A0,  v16,  (uint64_t (*)(uint64_t))type metadata accessor for CoreDataDatabase,  (uint64_t)&unk_100061F34);
  static LoggedObject.logger.getter(a3);
  uint64_t v17 = swift_bridgeObjectRetain_n(a1, 2LL);
  uint64_t v35 = v10;
  id v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v33 = v4;
    id v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v21 = swift_slowAlloc(32LL, -1LL);
    id v32 = v12;
    uint64_t v22 = v21;
    uint64_t v40 = v21;
    *(_DWORD *)id v20 = 136315138;
    uint64_t v31 = v20 + 4;
    uint64_t v23 = type metadata accessor for UUID(0LL);
    uint64_t v24 = sub_100013014( &qword_10007F4A0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v25 = swift_bridgeObjectRetain(a1);
    uint64_t v26 = Set.description.getter(v25, v23, v24);
    unint64_t v28 = v27;
    swift_bridgeObjectRelease(a1);
    uint64_t v29 = v26;
    uint64_t v5 = v33;
    uint64_t v38 = sub_100046274(v29, v28, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v31);
    swift_bridgeObjectRelease_n(a1, 2LL);
    swift_bridgeObjectRelease(v28);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Deleting events for homes %s", v20, 0xCu);
    swift_arrayDestroy(v22, 1LL, (char *)&type metadata for Any + 8);
    id v12 = v32;
    swift_slowDealloc(v22, -1LL, -1LL);
    swift_slowDealloc(v20, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a1, 2LL);
  }

  (*(void (**)(char *, uint64_t))(v36 + 8))(v35, v8);
  uint64_t v30 = sub_1000566A8((uint64_t)v12);

  if (!v5) {
    *uint64_t v34 = v30;
  }
}

void sub_1000575CC(uint64_t a1@<X1>, os_log_s **a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for PendingUploadEvent();
  id v11 = [(id)swift_getObjCClassFromMetadata(v10) fetchRequest];
  sub_100013014( &qword_1000805A0,  v12,  (uint64_t (*)(uint64_t))type metadata accessor for CoreDataDatabase,  (uint64_t)&unk_100061F34);
  uint64_t v13 = static LoggedObject.logger.getter(a1);
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    uint64_t v23 = v7;
    uint64_t v17 = a2;
    id v18 = v16;
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Executing batch delete to clear the database", v16, 2u);
    os_log_type_t v19 = v18;
    a2 = v17;
    uint64_t v3 = v2;
    uint64_t v7 = v23;
    swift_slowDealloc(v19, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v20 = v3;
  uint64_t v21 = sub_1000566A8((uint64_t)v11);

  if (!v20) {
    *a2 = v21;
  }
}

uint64_t sub_100057770()
{
  v1[3] = v0;
  v1[4] = *v0;
  uint64_t v2 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0LL);
  v1[5] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[6] = v3;
  v1[7] = swift_task_alloc((*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000577D8, 0LL, 0LL);
}

uint64_t sub_1000577D8()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = swift_allocObject(&unk_100077CD0, 32LL, 7LL);
  __int128 v5 = *(_OWORD *)(v0 + 24);
  uint64_t v6 = *(void *)(v0 + 24);
  uint64_t v7 = *(void **)(v6 + 16);
  *(void *)(v0 + 6_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = v4;
  *(_OWORD *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  uint64_t v8 = (void *)swift_allocObject(&unk_100077CF8, 40LL, 7LL);
  *(void *)(v0 + 72) = v8;
  v8[2] = sub_1000582AC;
  v8[3] = v4;
  v8[4] = v7;
  uint64_t v9 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 104);
  swift_retain(v6);
  v10(v1, v9, v3);
  uint64_t v11 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  swift_retain(v4);
  v7;
  uint64_t v12 = (void *)swift_task_alloc(v11);
  *(void *)(v0 + 80) = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_100057904;
  return NSManagedObjectContext.perform<A>(schedule:_:)( v0 + 16,  *(void *)(v0 + 56),  sub_1000587D4,  v8,  &type metadata for Int);
}

uint64_t sub_100057904()
{
  uint64_t v2 = *(void *)(*v1 + 80);
  uint64_t v4 = *(void *)(*v1 + 48);
  uint64_t v3 = *(void *)(*v1 + 56);
  uint64_t v5 = *(void *)(*v1 + 40);
  uint64_t v6 = *v1;
  *(void *)(v6 + 88) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0)
  {
    swift_release(*(void *)(v6 + 72));
    return swift_task_switch(sub_1000587CC, 0LL, 0LL);
  }

  else
  {
    uint64_t v8 = *(void *)(v6 + 64);
    uint64_t v9 = *(void *)(v6 + 56);
    swift_release(*(void *)(v6 + 72));
    swift_release(v8);
    uint64_t v10 = *(void *)(v6 + 16);
    swift_task_dealloc(v9);
    return (*(uint64_t (**)(uint64_t))(v6 + 8))(v10);
  }

uint64_t sub_1000579D0@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v43 = a2;
  uint64_t v46 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v46 - 8);
  uint64_t v4 = __chkstk_darwin(v46);
  uint64_t v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v44 = (char *)&v43 - v8;
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v43 - v9;
  sub_100013014( &qword_1000805A0,  v11,  (uint64_t (*)(uint64_t))type metadata accessor for CoreDataDatabase,  (uint64_t)&unk_100061F34);
  uint64_t v12 = static LoggedObject.logger.getter(a1);
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    os_log_type_t v15 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)os_log_type_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Fetching pending event count", v15, 2u);
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  uint64_t v16 = *(void (**)(char *, uint64_t))(v3 + 8);
  v16(v10, v46);
  uint64_t v17 = type metadata accessor for PendingUploadEvent();
  uint64_t v47 = v17;
  uint64_t v18 = sub_10000D228(&qword_100080610);
  uint64_t v19 = String.init<A>(describing:)(&v47, v18);
  uint64_t v21 = v20;
  if (v19 == 0xD000000000000012LL && v20 == 0x80000001000640B0LL
    || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v20, 0xD000000000000012LL, 0x80000001000640B0LL, 0LL),
        (result & 1) != 0))
  {
    id v23 = objc_allocWithZone(&OBJC_CLASS___NSFetchRequest);
    NSString v24 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v21);
    id v25 = [v23 initWithEntityName:v24];

    uint64_t v26 = v45;
    uint64_t v27 = NSManagedObjectContext.count<A>(for:)(v25, v17);
    if (v26)
    {
      uint64_t v45 = v16;

      static LoggedObject.logger.getter(a1);
      swift_errorRetain(v26);
      uint64_t v28 = swift_errorRetain(v26);
      uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
      os_log_type_t v30 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v29, v30))
      {
        uint64_t v31 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        id v32 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)uint64_t v31 = 138543362;
        swift_errorRetain(v26);
        uint64_t v33 = _swift_stdlib_bridgeErrorToNSError(v26);
        uint64_t v47 = v33;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v31 + 4);
        uint64_t *v32 = v33;
        swift_errorRelease(v26);
        swift_errorRelease(v26);
        _os_log_impl( (void *)&_mh_execute_header,  v29,  v30,  "Failed to fetch pending event count: %{public}@",  v31,  0xCu);
        uint64_t v34 = sub_10000D228(&qword_10007EE38);
        swift_arrayDestroy(v32, 1LL, v34);
        swift_slowDealloc(v32, -1LL, -1LL);
        swift_slowDealloc(v31, -1LL, -1LL);
      }

      else
      {
        swift_errorRelease(v26);
        swift_errorRelease(v26);
      }

      uint64_t v42 = ((uint64_t (*)(char *, uint64_t))v45)(v6, v46);
      return swift_willThrow(v42);
    }

    else
    {
      uint64_t v35 = v27;

      uint64_t v36 = v44;
      uint64_t v37 = static LoggedObject.logger.getter(a1);
      uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
      os_log_type_t v39 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v38, v39))
      {
        uint64_t v40 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        *(_DWORD *)uint64_t v40 = 134217984;
        uint64_t v47 = v35;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v40 + 4);
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "Fetched pending event count: %ld", v40, 0xCu);
        uint64_t v41 = v40;
        uint64_t v36 = v44;
        swift_slowDealloc(v41, -1LL, -1LL);
      }

      uint64_t result = ((uint64_t (*)(char *, uint64_t))v16)(v36, v46);
      *uint64_t v43 = v35;
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

unint64_t sub_100057E5C()
{
  return 0xD000000000000010LL;
}

uint64_t sub_100057E78()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_100057E9C(os_log_s **a1@<X8>)
{
}

void sub_100057EB4(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = [*a1 primitiveUnencryptedTags];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, &type metadata for Data);
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  *a2 = v5;
}

void sub_100057F18(void *a1, void **a2)
{
  uint64_t v2 = *a2;
  if (*a1) {
    v3.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  }
  else {
    v3.super.Class isa = 0LL;
  }
  Class isa = v3.super.isa;
  objc_msgSend(v2, "setPrimitiveUnencryptedTags:");
}

double sub_100057F74@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  unint64_t v9 = sub_10005A2E0(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    uint64_t v12 = *v4;
    uint64_t v15 = *v4;
    *uint64_t v4 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10005D918();
      uint64_t v12 = v15;
    }

    swift_bridgeObjectRelease(*(void *)(*(void *)(v12 + 48) + 16 * v9 + 8));
    sub_10003FEB4((_OWORD *)(*(void *)(v12 + 56) + 32 * v9), a3);
    sub_100034AB8(v9, v12);
    uint64_t v13 = *v4;
    *uint64_t v4 = v12;
    swift_bridgeObjectRelease(v13);
  }

  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }

  return result;
}

id sub_100058064@<X0>(void (*a1)(uint64_t *__return_ptr)@<X0>, void *a2@<X2>, void *a3@<X8>)
{
  if (v3) {
    return (id)swift_willThrow([a2 reset]);
  }
  id result = [a2 reset];
  *a3 = v7;
  return result;
}

id sub_1000580E0@<X0>(void *a1@<X8>)
{
  return sub_100058064(*(void (**)(uint64_t *__return_ptr))(v1 + 16), *(void **)(v1 + 32), a1);
}

unint64_t sub_1000580FC()
{
  unint64_t result = qword_1000805B8;
  if (!qword_1000805B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100061FF4, &type metadata for LocalDatabaseError);
    atomic_store(result, &qword_1000805B8);
  }

  return result;
}

uint64_t sub_100058140(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D228(&qword_10007EF00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100058188(uint64_t a1)
{
  uint64_t v2 = sub_10000D228(&qword_10007EF00);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void sub_1000581CC(os_log_s **a1@<X8>)
{
}

void sub_1000581F0()
{
}

id sub_100058210()
{
  return sub_100052E40(*(void (**)(void))(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_10005822C(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = sub_100004D58(a2);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_10005826C()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_100058290(void *a1@<X8>)
{
}

uint64_t sub_1000582AC@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000579D0(*(void *)(v1 + 24), a1);
}

uint64_t sub_1000582CC()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1000582F8()
{
  return sub_100054AE8(v0[2], v0[3], v0[4]);
}

void *sub_100058318(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v54 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v53 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v53 - 8);
  uint64_t v9 = __chkstk_darwin(v53);
  os_log_type_t v59 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v45 - v11;
  uint64_t v52 = (int *)type metadata accessor for PendingEventData(0LL);
  uint64_t v13 = *((void *)v52 - 1);
  __chkstk_darwin(v52);
  uint64_t v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = *(void *)(a1 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (v16)
  {
    uint64_t v45 = v2;
    id v61 = _swiftEmptyArrayStorage;
    uint64_t v57 = v16;
    specialized ContiguousArray.reserveCapacity(_:)(v16);
    uint64_t v18 = a1 + ((*(unsigned __int8 *)(v13 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    uint64_t v19 = *(void **)(a2 + 16);
    uint64_t v46 = *(void *)(v13 + 72);
    id v47 = v19;
    id v58 = v7;
    uint64_t v21 = v53;
    uint64_t v20 = v54;
    uint64_t v50 = v8;
    uint64_t v51 = v5;
    uint64_t v48 = v15;
    unint64_t v49 = v12;
    do
    {
      uint64_t v56 = v18;
      sub_100040A84(v18, (uint64_t)v15);
      uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
      v27(v12, v15, v21);
      uint64_t v28 = v52;
      uint64_t v29 = v52[8];
      uint64_t v30 = v21;
      uint64_t v55 = *(void *)&v15[v52[7]];
      uint64_t v32 = *(void *)&v15[v29];
      unint64_t v31 = *(void *)&v15[v29 + 8];
      v27(v59, &v15[v52[5]], v30);
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v58, &v15[v28[6]], v5);
      uint64_t v33 = *(void *)&v15[v28[9]];
      id v34 = objc_allocWithZone((Class)type metadata accessor for PendingUploadEvent());
      id v35 = v47;
      sub_100012154(v32, v31);
      id v36 = objc_msgSend(v34, "initWithContext:", v35, swift_bridgeObjectRetain(v33).n128_f64[0]);
      unint64_t v37 = v31;
      uint64_t v38 = v32;
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      [v36 setIdentifier:isa];

      [v36 setType:v55];
      Class v40 = Data._bridgeToObjectiveC()().super.isa;
      [v36 setData:v40];

      Class v41 = UUID._bridgeToObjectiveC()().super.isa;
      [v36 setHomeIdentifier:v41];

      Class v42 = Date._bridgeToObjectiveC()().super.isa;
      [v36 setDate:v42];

      uint64_t KeyPath = swift_getKeyPath(&unk_100061FA0);
      id v60 = v36;
      uint64_t v44 = swift_retain(KeyPath);
      _KeyValueCodingAndObserving.willChangeValue<A>(for:)(v44, &protocol witness table for NSObject);
      if (*(void *)(v33 + 16)) {
        v22.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
      }
      else {
        v22.super.Class isa = 0LL;
      }
      swift_bridgeObjectRelease(v33);
      [v36 setPrimitiveUnencryptedTags:v22.super.isa];

      id v60 = v36;
      _KeyValueCodingAndObserving.didChangeValue<A>(for:)(KeyPath, &protocol witness table for NSObject);
      sub_10000D620(v38, v37);

      uint64_t v20 = v54;
      uint64_t v5 = v51;
      (*(void (**)(char *, uint64_t))(v54 + 8))(v58, v51);
      uint64_t v8 = v50;
      id v23 = *(void (**)(char *, uint64_t))(v50 + 8);
      uint64_t v21 = v53;
      v23(v59, v53);
      uint64_t v12 = v49;
      v23(v49, v21);
      uint64_t v15 = v48;
      uint64_t v24 = sub_100040AC8((uint64_t)v48);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v24);
      uint64_t v25 = v61[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v25);
      uint64_t v26 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v25, v36);
      specialized ContiguousArray._endMutation()(v26);
      uint64_t v18 = v56 + v46;
      --v57;
    }

    while (v57);
    return v61;
  }

  return result;
}

const char *sub_100058728()
{
  return "primitiveUnencryptedTags";
}

uint64_t sub_10005873C()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  swift_release(*(void *)(v0 + 56));
  return swift_deallocObject(v0, 72LL, 7LL);
}

void sub_100058778()
{
}

uint64_t sub_1000587A0()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

id sub_1000587D4@<X0>(void *a1@<X8>)
{
  return sub_1000580E0(a1);
}

id sub_1000587E8()
{
  return sub_100058210();
}

ValueMetadata *type metadata accessor for LocalDatabaseError()
{
  return &type metadata for LocalDatabaseError;
}

unint64_t sub_10005880C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_10000D228(&qword_1000806E0);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100052704(v7, (uint64_t)&v16, (uint64_t *)&unk_100080700);
    uint64_t v8 = v16;
    uint64_t v9 = v17;
    unint64_t result = sub_10005A2E0(v16, v17);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v12 = (uint64_t *)(v4[6] + 16 * result);
    *uint64_t v12 = v8;
    v12[1] = v9;
    unint64_t result = (unint64_t)sub_10003FEB4(&v18, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    void v4[2] = v15;
    v7 += 48LL;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100058940(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_10000D228(&qword_1000806F0);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100052704(v7, (uint64_t)v16, &qword_1000806F8);
    unint64_t result = sub_10005A344((uint64_t)v16);
    if ((v9 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v10 = v4[6] + 40 * result;
    __int128 v11 = v16[0];
    __int128 v12 = v16[1];
    *(void *)(v10 + 32) = v17;
    *(_OWORD *)uint64_t v10 = v11;
    *(_OWORD *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = v12;
    unint64_t result = (unint64_t)sub_10003FEB4(&v18, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    void v4[2] = v15;
    v7 += 72LL;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100058A80(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_10000D228(&qword_100080690);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v6 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v7 = (uint64_t)*(v6 - 2);
    uint64_t v8 = (uint64_t)*(v6 - 1);
    char v9 = *v6;
    swift_bridgeObjectRetain(v8);
    id v10 = v9;
    unint64_t result = sub_10005A2E0(v7, v8);
    if ((v12 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v13 = (uint64_t *)(v4[6] + 16 * result);
    *uint64_t v13 = v7;
    v13[1] = v8;
    *(void *)(v4[7] + 8 * result) = v10;
    uint64_t v14 = v4[2];
    BOOL v15 = __OFADD__(v14, 1LL);
    uint64_t v16 = v14 + 1;
    if (v15) {
      goto LABEL_11;
    }
    void v4[2] = v16;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void sub_100058B98(char a1)
{
  __asm { BR              X10 }

uint64_t sub_100058BFC(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100058C7C + 4 * byte_100062044[a2]))(0x6566654474696177LL);
}

uint64_t sub_100058C7C(uint64_t a1)
{
  if (a1 == 0x6566654474696177LL && v1 == 0xEC00000064657272LL) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEC00000064657272LL);
  return v2 & 1;
}

uint64_t sub_100058D44(char a1, unsigned __int8 a2)
{
  unint64_t v2 = 0x80000001000622C0LL;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v3 = 0x80000001000622E0LL;
    }
    else {
      unint64_t v3 = 0x8000000100062300LL;
    }
    unint64_t v4 = 0xD000000000000013LL;
    int v5 = a2;
    if (a2)
    {
LABEL_6:
      if (v5 == 1) {
        unint64_t v2 = 0x80000001000622E0LL;
      }
      else {
        unint64_t v2 = 0x8000000100062300LL;
      }
      if (v4 != 0xD000000000000013LL) {
        goto LABEL_15;
      }
      goto LABEL_13;
    }
  }

  else
  {
    unint64_t v4 = 0xD000000000000012LL;
    unint64_t v3 = 0x80000001000622C0LL;
    int v5 = a2;
    if (a2) {
      goto LABEL_6;
    }
  }

  if (v4 != 0xD000000000000012LL)
  {
LABEL_15:
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_16;
  }

uint64_t sub_100058E3C(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 0x6D617374656ALL;
    }
    else {
      uint64_t v3 = 0x64696C6176LL;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE600000000000000LL;
    }
    else {
      unint64_t v4 = 0xE500000000000000LL;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 0x6D617374656ALL;
      }
      else {
        uint64_t v6 = 0x64696C6176LL;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE600000000000000LL;
      }
      else {
        unint64_t v7 = 0xE500000000000000LL;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }

  else
  {
    unint64_t v4 = 0xE500000000000000LL;
    uint64_t v3 = 0x6873617263LL;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }

  unint64_t v7 = 0xE500000000000000LL;
  if (v3 != 0x6873617263LL)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }

LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
  unint64_t v7 = v4;
LABEL_22:
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

uint64_t sub_100058F3C(char a1)
{
  int v2 = v1;
  uint64_t ObjectType = swift_getObjectType(v2);
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v2[OBJC_IVAR____TtC11homeeventsd32EventUploadScheduledWaitLogEvent_outcome] = a1;
  MetricsManager.submitLogEvent(_:error:)(v2, 0LL);
  sub_100013014( &qword_1000806D8,  v9,  (uint64_t (*)(uint64_t))type metadata accessor for EventUploadScheduledWaitLogEvent,  (uint64_t)&unk_1000621B8);
  static LoggedObject.logger.getter(ObjectType);
  id v10 = v2;
  __int128 v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v26 = v6;
    uint64_t v27 = v5;
    uint64_t v13 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v14 = swift_slowAlloc(32LL, -1LL);
    uint64_t v29 = v14;
    *(_DWORD *)uint64_t v13 = 136446210;
    sub_100059884();
    uint64_t v16 = v15;
    uint64_t v17 = swift_bridgeObjectRetain(v15);
    __int128 v18 = sub_100025FAC(v17);
    swift_bridgeObjectRelease(v16);
    uint64_t v28 = (uint64_t)v18;
    sub_1000106F8(&v28);
    swift_bridgeObjectRelease(v16);
    uint64_t v19 = v28;
    uint64_t v20 = sub_10000D228((uint64_t *)&unk_10007F190);
    uint64_t v21 = Array.description.getter(v19, v20);
    unint64_t v23 = v22;
    swift_release(v19);
    uint64_t v28 = sub_100046274(v21, v23, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v13 + 4);

    swift_bridgeObjectRelease(v23);
    _os_log_impl( (void *)&_mh_execute_header,  v11,  v12,  "Submitted EventUploadScheduledWaitLogEvent: %{public}s",  v13,  0xCu);
    swift_arrayDestroy(v14, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1LL, -1LL);
    swift_slowDealloc(v13, -1LL, -1LL);

    return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v8, v27);
  }

  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }

uint64_t sub_1000591C4(uint64_t a1)
{
  uint64_t ObjectType = swift_getObjectType(v1);
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v1[OBJC_IVAR____TtC11homeeventsd32EventUploadScheduledWaitLogEvent_outcome] = 0;
  MetricsManager.submitLogEvent(_:error:)(v1, a1);
  sub_100013014( &qword_1000806D8,  v8,  (uint64_t (*)(uint64_t))type metadata accessor for EventUploadScheduledWaitLogEvent,  (uint64_t)&unk_1000621B8);
  static LoggedObject.logger.getter(ObjectType);
  uint64_t v9 = v1;
  swift_errorRetain(a1);
  id v10 = v9;
  uint64_t v11 = swift_errorRetain(a1);
  os_log_type_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v32 = v5;
    uint64_t v33 = v4;
    uint64_t v14 = swift_slowAlloc(22LL, -1LL);
    uint64_t v30 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v31 = swift_slowAlloc(32LL, -1LL);
    uint64_t v35 = v31;
    *(_DWORD *)uint64_t v14 = 136446466;
    sub_100059884();
    uint64_t v16 = v15;
    uint64_t v17 = swift_bridgeObjectRetain(v15);
    __int128 v18 = sub_100025FAC(v17);
    swift_bridgeObjectRelease(v16);
    uint64_t v34 = (uint64_t)v18;
    sub_1000106F8(&v34);
    swift_bridgeObjectRelease(v16);
    uint64_t v19 = v34;
    uint64_t v20 = sub_10000D228((uint64_t *)&unk_10007F190);
    uint64_t v21 = Array.description.getter(v19, v20);
    unint64_t v23 = v22;
    swift_release(v19);
    uint64_t v34 = sub_100046274(v21, v23, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v14 + 4);

    swift_bridgeObjectRelease(v23);
    *(_WORD *)(v14 + 12) = 2114;
    swift_errorRetain(a1);
    uint64_t v24 = _swift_stdlib_bridgeErrorToNSError(a1);
    uint64_t v34 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v14 + 14);
    uint64_t v25 = v30;
    uint64_t *v30 = v24;
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl( (void *)&_mh_execute_header,  v12,  v13,  "Submitted EventUploadScheduledWaitLogEvent: %{public}s, with error: %{public}@",  (uint8_t *)v14,  0x16u);
    uint64_t v26 = sub_10000D228(&qword_10007EE38);
    swift_arrayDestroy(v25, 1LL, v26);
    swift_slowDealloc(v25, -1LL, -1LL);
    uint64_t v27 = v31;
    swift_arrayDestroy(v31, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1LL, -1LL);
    swift_slowDealloc(v14, -1LL, -1LL);

    return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v7, v33);
  }

  else
  {

    swift_errorRelease(a1);
    swift_errorRelease(a1);

    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

void sub_10005950C(char *a1)
{
}

void sub_100059518()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v2);
  __asm { BR              X9 }

Swift::Int sub_10005956C()
{
  return Hasher._finalize()();
}

void sub_1000595FC()
{
  __asm { BR              X10 }

uint64_t sub_100059640(uint64_t a1)
{
  return swift_bridgeObjectRelease(0xEC00000064657272LL);
}

void sub_1000596BC()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v2);
  __asm { BR              X9 }

Swift::Int sub_10005970C()
{
  return Hasher._finalize()();
}

unint64_t sub_10005979C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10005DAFC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000597C8()
{
  return ((uint64_t (*)(void))((char *)sub_100059800 + 4 * byte_100062054[*v0]))();
}

void sub_100059800(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 1_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = -5120;
}

void sub_100059828(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 1_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = -5120;
}

void sub_10005984C(uint64_t a1@<X8>)
{
  *(_WORD *)(a1 + 1_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = -4864;
}

void sub_100059874(void *a1@<X8>)
{
  *a1 = &off_1000756D8;
}

void sub_100059884()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000D228((uint64_t *)&unk_10007F1A0);
  uint64_t inited = swift_initStackObject(v2, v4);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100060320;
  *(void *)(inited + 32) = 0x73746961576D756ELL;
  *(void *)(inited + 40) = 0xE800000000000000LL;
  *(void *)(inited + 48) = [objc_allocWithZone(NSNumber) initWithInteger:1];
  sub_100058A80(inited);
  __asm { BR              X9 }

uint64_t sub_100059964()
{
  id v2 = objc_allocWithZone(&OBJC_CLASS___NSString);
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0xEC00000064657272LL);
  id v4 = [v2 initWithString:v3];

  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v0);
  sub_10005C644((uint64_t)v4, 0x6374754F74696177LL, 0xEF65707954656D6FLL, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  return ((uint64_t (*)(uint64_t))((char *)sub_100059A90 + 4 * byte_100062062[v1]))(0x6566654474696177LL);
}

uint64_t sub_100059A90()
{
  id v4 = objc_msgSend(objc_allocWithZone(*(Class *)(v2 + 3968)), *(SEL *)(v3 + 3056), 1);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v0);
  sub_10005C644((uint64_t)v4, 0x73746961576D756ELL, 0xEF6465726F727245LL, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  return ((uint64_t (*)(uint64_t))((char *)sub_100059BB4 + 4 * byte_100062066[v1]))(0x6F72724574696177LL);
}

uint64_t sub_100059BB4()
{
  id v4 = objc_msgSend(objc_allocWithZone(*(Class *)(v2 + 3968)), *(SEL *)(v3 + 3056), 1);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v0);
  sub_10005C644((uint64_t)v4, 0xD000000000000010LL, 0x8000000100064130LL, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  return ((uint64_t (*)(uint64_t))((char *)sub_100059CD8 + 4 * byte_10006206A[v1]))(0x6F72724574696177LL);
}

uint64_t sub_100059CD8()
{
  char v4 = _stringCompareWithSmolCheck(_:_:expecting:)( 0x6566654474696177LL,  0xEC00000064657272LL,  0x6870724F74696177LL,  0xEC00000064656E61LL,  0LL);
  swift_bridgeObjectRelease(0xEC00000064657272LL);
  id v5 = objc_msgSend(objc_allocWithZone(*(Class *)(v2 + 3968)), *(SEL *)(v3 + 3056), v4 & 1);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v0);
  sub_10005C644((uint64_t)v5, 0xD000000000000010LL, 0x8000000100064150LL, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  return ((uint64_t (*)(uint64_t))((char *)sub_100059DEC + 4 * byte_10006206E[v1]))(0x6F72724574696177LL);
}

uint64_t sub_100059DEC()
{
  char v5 = _stringCompareWithSmolCheck(_:_:expecting:)( 0x6566654474696177LL,  0xEC00000064657272LL,  0x6363755374696177LL,  0xED00006465646565LL,  0LL);
  swift_bridgeObjectRelease(0xEC00000064657272LL);
  id v6 = objc_msgSend(objc_allocWithZone(*(Class *)(v3 + 3968)), *(SEL *)(v4 + 3056), v5 & 1);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
  sub_10005C644((uint64_t)v6, 0xD000000000000011LL, 0x8000000100064170LL, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  if ((uint64_t)[v0 durationMilliseconds] >= 1 && ((1 << *((_BYTE *)v0 + v2)) & 0xB) != 0)
  {
    id v8 = objc_msgSend( objc_allocWithZone(*(Class *)(v3 + 3968)),  *(SEL *)(v4 + 3056),  objc_msgSend(v0, "durationMilliseconds"));
    char v9 = swift_isUniquelyReferenced_nonNull_native(v1);
    sub_10005C644((uint64_t)v8, 0xD000000000000014LL, 0x80000001000635A0LL, v9);
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  return v1;
}

uint64_t type metadata accessor for EventUploadScheduledWaitLogEvent()
{
  return objc_opt_self(&OBJC_CLASS____TtC11homeeventsd32EventUploadScheduledWaitLogEvent);
}

uint64_t storeEnumTagSinglePayload for EventUploadScheduledWaitOutcome( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = 1;
  }
  else {
    LODWORD(v_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_10005A1C8 + 4 * byte_100062077[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10005A1FC + 4 * byte_100062072[v4]))();
}

uint64_t sub_10005A1FC(uint64_t result)
{
  *(_BYTE *)(result + sub_1000220E4(0LL, 1) = v1;
  return result;
}

uint64_t sub_10005A204(uint64_t result, int a2)
{
  *(_WORD *)(result + sub_1000220E4(0LL, 1) = 0;
  if (a2) {
    JUMPOUT(0x10005A20CLL);
  }
  return result;
}

uint64_t sub_10005A218(uint64_t result, int a2)
{
  *(_DWORD *)(result + sub_1000220E4(0LL, 1) = 0;
  if (!a2) {
    JUMPOUT(0x10005A220LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_10005A224(uint64_t result)
{
  *(_DWORD *)(result + sub_1000220E4(0LL, 1) = v1;
  return result;
}

uint64_t sub_10005A22C(uint64_t result)
{
  *(_WORD *)(result + sub_1000220E4(0LL, 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EventUploadScheduledWaitOutcome()
{
  return &type metadata for EventUploadScheduledWaitOutcome;
}

unint64_t sub_10005A24C()
{
  unint64_t result = qword_100080678;
  if (!qword_100080678)
  {
    uint64_t v1 = sub_100004D58(&qword_100080680);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100080678);
  }

  return result;
}

unint64_t sub_10005A29C()
{
  unint64_t result = qword_100080688;
  if (!qword_100080688)
  {
    unint64_t result = swift_getWitnessTable(&unk_100062190, &type metadata for EventUploadScheduledWaitOutcome);
    atomic_store(result, (unint64_t *)&qword_100080688);
  }

  return result;
}

unint64_t sub_10005A2E0(uint64_t a1, uint64_t a2)
{
  Swift::Int v4 = Hasher._finalize()();
  return sub_10005A418(a1, a2, v4);
}

unint64_t sub_10005A344(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_10005A4F8(a1, v4);
}

unint64_t sub_10005A374(unsigned int a1)
{
  uint64_t v3 = static Hasher._hash(seed:bytes:count:)(*(void *)(v1 + 40), a1, 4LL);
  return sub_10005A5BC(a1, v3);
}

unint64_t sub_10005A3A8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v2 + 40);
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = sub_100013014( &qword_10007F4A0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_10005A658(a1, v7);
}

unint64_t sub_10005A418(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    id v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          break;
        }
        os_log_type_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }

      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }

  return v6;
}

unint64_t sub_10005A4F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0)
  {
    uint64_t v6 = ~v3;
    do
    {
      sub_10005DB44(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      char v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_10005DB80((uint64_t)v9);
      if ((v7 & 1) != 0) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v6;
    }

    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0);
  }

  return v4;
}

unint64_t sub_10005A5BC(int a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(_DWORD *)(v7 + 4 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(_DWORD *)(v7 + 4 * result) == a1) {
          break;
        }
      }
    }
  }

  return result;
}

unint64_t sub_10005A658(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v18 = a1;
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v10 = a2 & ~v9;
  if (((*(void *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = *(void *)(v6 + 72);
    os_log_type_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(void *)(v3 + 48) + v12 * v10, v5);
      uint64_t v14 = sub_100013014( &qword_1000806B0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v18, v5, v14);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v15 & 1) != 0) {
        break;
      }
      unint64_t v10 = (v10 + 1) & v11;
    }

    while (((*(void *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
  }

  return v10;
}

uint64_t sub_10005A79C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_10000D228(&qword_1000806E8);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v9 = 0LL;
    uint64_t v32 = v3;
    uint64_t v33 = (void *)(v5 + 64);
    uint64_t v10 = 1LL << *(_BYTE *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1LL << v10);
    }
    else {
      uint64_t v11 = -1LL;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v20 = v19 | (v9 << 6);
      }

      else
      {
        int64_t v21 = v9 + 1;
        if (__OFADD__(v9, 1LL))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }

        uint64_t result = v5 + 64;
        if (v21 >= v13) {
          goto LABEL_36;
        }
        unint64_t v22 = v33[v21];
        ++v9;
        if (!v22)
        {
          int64_t v9 = v21 + 1;
          if (v21 + 1 >= v13) {
            goto LABEL_36;
          }
          unint64_t v22 = v33[v9];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v13)
            {
LABEL_36:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release(v5);
                uint64_t v3 = v32;
                goto LABEL_43;
              }

              uint64_t v31 = 1LL << *(_BYTE *)(v5 + 32);
              if (v31 >= 64) {
                bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                *uint64_t v33 = -1LL << v31;
              }
              uint64_t v3 = v32;
              *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
              break;
            }

            unint64_t v22 = v33[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v9 = v23 + 1;
                if (__OFADD__(v23, 1LL)) {
                  goto LABEL_45;
                }
                if (v9 >= v13) {
                  goto LABEL_36;
                }
                unint64_t v22 = v33[v9];
                ++v23;
                if (v22) {
                  goto LABEL_33;
                }
              }
            }

            int64_t v9 = v23;
          }
        }

Swift::Int sub_10005AA54(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_10000D228(&qword_100080690);
  char v39 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v38 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  id v36 = v3;
  int64_t v37 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v22 >= v37) {
      break;
    }
    int64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v37) {
        goto LABEL_36;
      }
      unint64_t v24 = *(void *)(v38 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_36:
          swift_release(v5);
          uint64_t v3 = v36;
          if ((v39 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v24 = *(void *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v37) {
              goto LABEL_36;
            }
            unint64_t v24 = *(void *)(v38 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v25;
      }
    }

uint64_t sub_10005AD60(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_10000D228(&qword_1000806C0);
  int v45 = a2;
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16)) {
    goto LABEL_43;
  }
  uint64_t v13 = 1LL << *(_BYTE *)(v10 + 32);
  uint64_t v14 = *(void *)(v10 + 64);
  uint64_t v43 = (void *)(v10 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1LL << v13);
  }
  else {
    uint64_t v15 = -1LL;
  }
  unint64_t v16 = v15 & v14;
  Class v41 = v2;
  int64_t v42 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v17 = v11 + 64;
  uint64_t result = swift_retain(v10);
  int64_t v19 = 0LL;
  for (i = v10; ; uint64_t v10 = i)
  {
    if (v16)
    {
      unint64_t v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v22 = v21 | (v19 << 6);
      goto LABEL_24;
    }

    int64_t v23 = v19 + 1;
    if (__OFADD__(v19, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v42) {
      break;
    }
    unint64_t v24 = v43;
    unint64_t v25 = v43[v23];
    ++v19;
    if (!v25)
    {
      int64_t v19 = v23 + 1;
      if (v23 + 1 >= v42) {
        goto LABEL_36;
      }
      unint64_t v25 = v43[v19];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v42)
        {
LABEL_36:
          swift_release(v10);
          uint64_t v3 = v41;
          if ((v45 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = v43[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v19 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v19 >= v42) {
              goto LABEL_36;
            }
            unint64_t v25 = v43[v19];
            ++v26;
            if (v25) {
              goto LABEL_23;
            }
          }
        }

        int64_t v19 = v26;
      }
    }

Swift::Int sub_10005B0F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_10000D228(&qword_1000806C8);
  char v37 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v22 >= v35) {
      break;
    }
    int64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_36;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v35) {
              goto LABEL_36;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v25;
      }
    }

uint64_t sub_10005B40C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for LubyRackoffEncryptionKey(0LL);
  uint64_t v54 = *(void *)(v5 - 8);
  uint64_t v55 = v5;
  __chkstk_darwin(v5);
  uint64_t v53 = &v45[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v52 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = &v45[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  id v47 = v2;
  uint64_t v10 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_10000D228(&qword_1000806B8);
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16))
  {
    uint64_t result = swift_release(v10);
    int64_t v42 = v47;
LABEL_44:
    uint64_t *v42 = v12;
    return result;
  }

  uint64_t v13 = 1LL << *(_BYTE *)(v10 + 32);
  uint64_t v14 = *(void *)(v10 + 64);
  unint64_t v49 = (void *)(v10 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1LL << v13);
  }
  else {
    uint64_t v15 = -1LL;
  }
  unint64_t v16 = v15 & v14;
  int64_t v48 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v17 = v11 + 64;
  uint64_t v51 = v10;
  uint64_t result = swift_retain(v10);
  int64_t v19 = 0LL;
  int v46 = a2;
  uint64_t v20 = 16LL;
  if ((a2 & 1) != 0) {
    uint64_t v20 = 32LL;
  }
  uint64_t v50 = v20;
  uint64_t v21 = v20;
  while (1)
  {
    if (v16)
    {
      unint64_t v23 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v24 = v23 | (v19 << 6);
      goto LABEL_26;
    }

    int64_t v25 = v19 + 1;
    if (__OFADD__(v19, 1LL))
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }

    if (v25 >= v48)
    {
      uint64_t v43 = v51;
      swift_release(v51);
      int64_t v42 = v47;
      char v26 = v49;
      if ((v46 & 1) != 0)
      {
LABEL_39:
        uint64_t v44 = 1LL << *(_BYTE *)(v43 + 32);
        if (v44 >= 64) {
          bzero(v26, ((unint64_t)(v44 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
        }
        else {
          *char v26 = -1LL << v44;
        }
        *(void *)(v43 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
      }

uint64_t sub_10005B810(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_10000D228(&qword_1000806D0);
  int v45 = a2;
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16)) {
    goto LABEL_43;
  }
  uint64_t v13 = 1LL << *(_BYTE *)(v10 + 32);
  uint64_t v14 = *(void *)(v10 + 64);
  uint64_t v43 = (void *)(v10 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1LL << v13);
  }
  else {
    uint64_t v15 = -1LL;
  }
  unint64_t v16 = v15 & v14;
  uint64_t v41 = v2;
  int64_t v42 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v17 = v11 + 64;
  uint64_t result = swift_retain(v10);
  int64_t v19 = 0LL;
  for (i = v10; ; uint64_t v10 = i)
  {
    if (v16)
    {
      unint64_t v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v22 = v21 | (v19 << 6);
      goto LABEL_24;
    }

    int64_t v23 = v19 + 1;
    if (__OFADD__(v19, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v42) {
      break;
    }
    unint64_t v24 = v43;
    unint64_t v25 = v43[v23];
    ++v19;
    if (!v25)
    {
      int64_t v19 = v23 + 1;
      if (v23 + 1 >= v42) {
        goto LABEL_36;
      }
      unint64_t v25 = v43[v19];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v42)
        {
LABEL_36:
          swift_release(v10);
          uint64_t v3 = v41;
          if ((v45 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = v43[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v19 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v19 >= v42) {
              goto LABEL_36;
            }
            unint64_t v25 = v43[v19];
            ++v26;
            if (v25) {
              goto LABEL_23;
            }
          }
        }

        int64_t v19 = v26;
      }
    }

Swift::Int sub_10005BBA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_10000D228(&qword_100080698);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  unint64_t v36 = v3;
  uint64_t v37 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v15 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }

    int64_t v23 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v12) {
      break;
    }
    unint64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v37 + 8 * v23);
    ++v15;
    if (!v25)
    {
      int64_t v15 = v23 + 1;
      if (v23 + 1 >= v12) {
        goto LABEL_36;
      }
      unint64_t v25 = *(void *)(v37 + 8 * v15);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release(v5);
          uint64_t v3 = v36;
          if ((a2 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = *(void *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v15 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v15 >= v12) {
              goto LABEL_36;
            }
            unint64_t v25 = *(void *)(v37 + 8 * v15);
            ++v26;
            if (v25) {
              goto LABEL_33;
            }
          }
        }

        int64_t v15 = v26;
      }
    }

uint64_t sub_10005BE7C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_10000D228((uint64_t *)&unk_1000806A0);
  int v45 = a2;
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16)) {
    goto LABEL_43;
  }
  uint64_t v13 = 1LL << *(_BYTE *)(v10 + 32);
  uint64_t v14 = *(void *)(v10 + 64);
  uint64_t v43 = (void *)(v10 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1LL << v13);
  }
  else {
    uint64_t v15 = -1LL;
  }
  unint64_t v16 = v15 & v14;
  uint64_t v41 = v2;
  int64_t v42 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v17 = v11 + 64;
  uint64_t result = swift_retain(v10);
  int64_t v19 = 0LL;
  for (i = v10; ; uint64_t v10 = i)
  {
    if (v16)
    {
      unint64_t v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v22 = v21 | (v19 << 6);
      goto LABEL_24;
    }

    int64_t v23 = v19 + 1;
    if (__OFADD__(v19, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v42) {
      break;
    }
    unint64_t v24 = v43;
    unint64_t v25 = v43[v23];
    ++v19;
    if (!v25)
    {
      int64_t v19 = v23 + 1;
      if (v23 + 1 >= v42) {
        goto LABEL_36;
      }
      unint64_t v25 = v43[v19];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v42)
        {
LABEL_36:
          swift_release(v10);
          uint64_t v3 = v41;
          if ((v45 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = v43[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v19 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v19 >= v42) {
              goto LABEL_36;
            }
            unint64_t v25 = v43[v19];
            ++v26;
            if (v25) {
              goto LABEL_23;
            }
          }
        }

        int64_t v19 = v26;
      }
    }

uint64_t sub_10005C214(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_10000D228(&qword_1000806E0);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    unint64_t v34 = v3;
    uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
    unint64_t v36 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v35 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 64;
    uint64_t result = swift_retain(v5);
    int64_t v14 = 0LL;
    while (1)
    {
      if (v11)
      {
        unint64_t v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v18 = v17 | (v14 << 6);
      }

      else
      {
        int64_t v19 = v14 + 1;
        if (__OFADD__(v14, 1LL))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }

        if (v19 >= v35) {
          goto LABEL_37;
        }
        unint64_t v20 = v36[v19];
        ++v14;
        if (!v20)
        {
          int64_t v14 = v19 + 1;
          if (v19 + 1 >= v35) {
            goto LABEL_37;
          }
          unint64_t v20 = v36[v14];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v35)
            {
LABEL_37:
              swift_release(v5);
              uint64_t v3 = v34;
              if ((a2 & 1) != 0)
              {
                uint64_t v33 = 1LL << *(_BYTE *)(v5 + 32);
                if (v33 >= 64) {
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  void *v36 = -1LL << v33;
                }
                *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
              }

              break;
            }

            unint64_t v20 = v36[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v14 = v21 + 1;
                if (__OFADD__(v21, 1LL)) {
                  goto LABEL_44;
                }
                if (v14 >= v35) {
                  goto LABEL_37;
                }
                unint64_t v20 = v36[v14];
                ++v21;
                if (v20) {
                  goto LABEL_24;
                }
              }
            }

            int64_t v14 = v21;
          }
        }

LABEL_24:
        unint64_t v11 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v14 << 6);
      }

      unint64_t v22 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v18);
      uint64_t v24 = *v22;
      uint64_t v23 = v22[1];
      unint64_t v25 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v18);
      if ((a2 & 1) != 0)
      {
        sub_10003FEB4(v25, v38);
      }

      else
      {
        sub_10000D2C8((uint64_t)v25, (uint64_t)v38);
        swift_bridgeObjectRetain(v23);
      }

      Hasher.init(_seed:)(v37);
      String.hash(into:)(v37, v24, v23);
      uint64_t result = Hasher._finalize()();
      uint64_t v26 = -1LL << *(_BYTE *)(v8 + 32);
      unint64_t v27 = result & ~v26;
      unint64_t v28 = v27 >> 6;
      if (((-1LL << v27) & ~*(void *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1LL << v27) & ~*(void *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        char v29 = 0;
        unint64_t v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }

          BOOL v31 = v28 == v30;
          if (v28 == v30) {
            unint64_t v28 = 0LL;
          }
          v29 |= v31;
          uint64_t v32 = *(void *)(v12 + 8 * v28);
        }

        while (v32 == -1);
        unint64_t v15 = __clz(__rbit64(~v32)) + (v28 << 6);
      }

      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
      unint64_t v16 = (void *)(*(void *)(v8 + 48) + 16 * v15);
      *unint64_t v16 = v24;
      v16[1] = v23;
      uint64_t result = (uint64_t)sub_10003FEB4(v38, (_OWORD *)(*(void *)(v8 + 56) + 32 * v15));
      ++*(void *)(v8 + 16);
    }
  }

  uint64_t result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

uint64_t sub_10005C510(uint64_t a1, unsigned int a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_10005A374(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_10005CCD0();
LABEL_7:
    unint64_t v16 = (void *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t result = swift_unknownObjectRelease(*(void *)(v17 + 8 * v10));
      *(void *)(v17 + 8 * v_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 10) = a1;
      return result;
    }

LABEL_15:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int32);
  __break(1u);
  return result;
}

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_10005C644(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_10005A2E0(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_10005CE74();
LABEL_7:
    char v18 = (void *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      uint64_t v19 = v18[7];

      *(void *)(v19 + 8 * v12) = a1;
      return;
    }

uint64_t sub_10005C7A0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_10005A3A8(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }

  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    unint64_t v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t result = swift_errorRelease(*(void *)(v21 + 8 * v14));
      *(void *)(v21 + 8 * v1_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = a1;
      return result;
    }

    goto LABEL_11;
  }

  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_10005D024();
    goto LABEL_7;
  }

  sub_10005AD60(v17, a3 & 1);
  unint64_t v23 = sub_10005A3A8(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }

  unint64_t v14 = v23;
  unint64_t v20 = *v4;
  if ((v18 & 1) != 0) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_10005CB88(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_10005C8FC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_10005A3A8(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }

  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    unint64_t v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t result = swift_errorRelease(*(void *)(v21 + 8 * v14));
      *(void *)(v21 + 8 * v1_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = a1;
      return result;
    }

    goto LABEL_11;
  }

  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_10005D6E8();
    goto LABEL_7;
  }

  sub_10005BE7C(v17, a3 & 1);
  unint64_t v23 = sub_10005A3A8(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }

  unint64_t v14 = v23;
  unint64_t v20 = *v4;
  if ((v18 & 1) != 0) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_10005CB88(v14, (uint64_t)v11, a1, v20);
}

_OWORD *sub_10005CA58(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_10005A2E0(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    char v16 = v11;
    uint64_t v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      char v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        uint64_t v19 = (void *)(v18[7] + 32 * v12);
        _s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v19);
        return sub_10003FEB4(a1, v19);
      }

      goto LABEL_11;
    }

    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_10005D918();
      goto LABEL_7;
    }

    sub_10005C214(v15, a4 & 1);
    unint64_t v21 = sub_10005A2E0(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      char v18 = *v5;
      if ((v16 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_10005CC68(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain(a3);
    }
  }

  uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_10005CB88(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))( v8 + *(void *)(*(void *)(v9 - 8) + 72LL) * a1,  a2,  v9);
  *(void *)(a4[7] + 8 * asub_1000220E4(0LL, 1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1LL);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

unint64_t sub_10005CC20(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1LL << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  void *v5 = a2;
  v5[1] = a3;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1LL);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

_OWORD *sub_10005CC68(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_10003FEB4(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

void *sub_10005CCD0()
{
  uint64_t v1 = v0;
  sub_10000D228(&qword_1000806E8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }

id sub_10005CE74()
{
  uint64_t v1 = v0;
  sub_10000D228(&qword_100080690);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

void *sub_10005D024()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10000D228(&qword_1000806C0);
  int64_t v24 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_26:
    id result = (void *)swift_release(v5);
    uint64_t *v24 = v7;
    return result;
  }

  id result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1LL << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  uint64_t v25 = v5 + 64;
  int64_t v11 = 0LL;
  *(void *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v5 + 16);
  uint64_t v12 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v13 = -1LL;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  int64_t v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v11 + 1;
    if (__OFADD__(v11, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v20 >= v26) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      int64_t v11 = v20 + 1;
      if (v20 + 1 >= v26) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v25 + 8 * v11);
      if (!v21) {
        break;
      }
    }

void *sub_10005D254()
{
  uint64_t v1 = v0;
  sub_10000D228(&qword_1000806C8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

char *sub_10005D408()
{
  uint64_t v41 = type metadata accessor for LubyRackoffEncryptionKey(0LL);
  uint64_t v37 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v40 = (char *)&v33 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v39 = type metadata accessor for UUID(0LL);
  uint64_t v36 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  uint64_t v38 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10000D228(&qword_1000806B8);
  uint64_t v33 = v0;
  uint64_t v3 = *v0;
  uint64_t v4 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v43 = v4;
  if (!v5)
  {
    id result = (char *)swift_release(v3);
    uint64_t v32 = v43;
    BOOL v31 = v33;
LABEL_25:
    uint64_t *v31 = v32;
    return result;
  }

  uint64_t v6 = v4;
  id result = (char *)(v4 + 64);
  uint64_t v8 = (char *)(v3 + 64);
  unint64_t v9 = (unint64_t)((1LL << *(_BYTE *)(v6 + 32)) + 63) >> 6;
  uint64_t v34 = v3 + 64;
  if (v6 != v3 || result >= &v8[8 * v9])
  {
    id result = (char *)memmove(result, v8, 8 * v9);
    uint64_t v6 = v43;
  }

  int64_t v10 = 0LL;
  *(void *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v42 = v3;
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v35 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v14 = v36;
  uint64_t v15 = v37;
  unint64_t v17 = v38;
  uint64_t v16 = v39;
  uint64_t v18 = v41;
  uint64_t v19 = v43;
  while (1)
  {
    if (v13)
    {
      unint64_t v20 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      int64_t v44 = v10;
      unint64_t v21 = v20 | (v10 << 6);
      uint64_t v22 = v42;
      goto LABEL_9;
    }

    int64_t v27 = v10 + 1;
    uint64_t v22 = v42;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v27 >= v35) {
      goto LABEL_23;
    }
    unint64_t v28 = *(void *)(v34 + 8 * v27);
    int64_t v29 = v10 + 1;
    if (!v28)
    {
      int64_t v29 = v27 + 1;
      if (v27 + 1 >= v35) {
        goto LABEL_23;
      }
      unint64_t v28 = *(void *)(v34 + 8 * v29);
      if (!v28) {
        break;
      }
    }

void *sub_10005D6E8()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10000D228((uint64_t *)&unk_1000806A0);
  unint64_t v24 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_26:
    id result = (void *)swift_release(v5);
    uint64_t *v24 = v7;
    return result;
  }

  id result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1LL << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  uint64_t v25 = v5 + 64;
  int64_t v11 = 0LL;
  *(void *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v5 + 16);
  uint64_t v12 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v13 = -1LL;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  int64_t v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v11 + 1;
    if (__OFADD__(v11, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v20 >= v26) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      int64_t v11 = v20 + 1;
      if (v20 + 1 >= v26) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v25 + 8 * v11);
      if (!v21) {
        break;
      }
    }

void *sub_10005D918()
{
  uint64_t v1 = v0;
  sub_10000D228(&qword_1000806E0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    id result = (void *)swift_release(v2);
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t v25 = v1;
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

unint64_t sub_10005DAFC(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100075658, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4) {
    return 4LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_10005DB44(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10005DB80(uint64_t a1)
{
  return a1;
}

uint64_t sub_10005DBB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1LL, v6) == 1)
  {
    sub_10001B974(a1);
    uint64_t v8 = 7168LL;
    uint64_t v9 = *(void *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      uint64_t v10 = *(void *)(a3 + 24);
      uint64_t ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      uint64_t v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }

  else
  {
    unsigned __int8 v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    uint64_t v8 = v15 | 0x1C00LL;
    uint64_t v9 = *(void *)(a3 + 16);
    if (v9) {
      goto LABEL_3;
    }
  }

  uint64_t v12 = 0LL;
  uint64_t v14 = 0LL;
LABEL_6:
  uint64_t v16 = swift_allocObject(&unk_100077FE8, 32LL, 7LL);
  *(void *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = a2;
  *(void *)(v16 + 2_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = a3;
  if (v14 | v12)
  {
    v19[0] = 0LL;
    v19[1] = 0LL;
    unint64_t v17 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }

  else
  {
    unint64_t v17 = 0LL;
  }

  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_10007FEE8, v16);
}

uint64_t sub_10005DCF8()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10007EE24);
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10001D0F0;
  return sub_100007AAC();
}

id sub_10005DE6C()
{
  v2.uint64_t receiver = v0;
  v2.Class super_class = (Class)type metadata accessor for AccountChangedListener();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AccountChangedListener()
{
  return objc_opt_self(&OBJC_CLASS____TtC11homeeventsd22AccountChangedListener);
}

uint64_t sub_10005DECC()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10005DEF8()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_100080744);
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000D3C0;
  objc_super v2 = (void *)swift_task_alloc(dword_10007EE24);
  v1[2] = v2;
  *objc_super v2 = v1;
  v2[1] = sub_10001D0F0;
  return sub_100007AAC();
}

uint64_t sub_10005DF60()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10005DF84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  uint64_t v8 = type metadata accessor for Logger(0LL);
  v7[6] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[7] = v9;
  unint64_t v10 = (*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v7[8] = swift_task_alloc(v10);
  void v7[9] = swift_task_alloc(v10);
  return swift_task_switch(sub_10005DFF8, 0LL, 0LL);
}

uint64_t sub_10005DFF8()
{
  uint64_t v1 = type metadata accessor for XPCServer();
  v0[10] = v1;
  v0[11] = sub_10000E6BC();
  uint64_t v2 = static LoggedObject.logger.getter(v1);
  unint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Resetting configuration", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = v0[9];
  uint64_t v7 = v0[6];
  uint64_t v8 = v0[7];
  uint64_t v9 = v0[2];

  unint64_t v10 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v0[12] = v10;
  v10(v6, v7);
  return swift_task_switch(sub_10005E0F8, v9, 0LL);
}

uint64_t sub_10005E0F8()
{
  v0[13] = 0LL;
  unint64_t v3 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10007F480 + dword_10007F480);
  uint64_t v1 = (void *)swift_task_alloc(unk_10007F484);
  v0[14] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10005E198;
  return v3(0LL, v0[5]);
}

uint64_t sub_10005E198()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 112LL);
  *(void *)(*(void *)v1 + 12(*(void (**)(void, void, void))(v0 + 16))(*(void *)(v0 + 32), *(void *)(v0 + 40), 0LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    unint64_t v3 = sub_10005E2E4;
  }
  else {
    unint64_t v3 = sub_10005E1FC;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

void sub_10005E1FC()
{
  uint64_t v1 = *(void *)(v0 + 80);
  (*(void (**)(void))(v0 + 24))(0LL);
  uint64_t v2 = static LoggedObject.logger.getter(v1);
  unint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Restarting", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v0 + 96);
  uint64_t v7 = *(void *)(v0 + 64);
  uint64_t v8 = *(void *)(v0 + 48);

  v6(v7, v8);
  sub_10000A7D0();
}

void sub_10005E2E4()
{
  uint64_t v1 = *(void *)(v0 + 80);
  (*(void (**)(void))(v0 + 24))(0LL);
  uint64_t v2 = static LoggedObject.logger.getter(v1);
  unint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Restarting", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v0 + 96);
  uint64_t v7 = *(void *)(v0 + 64);
  uint64_t v8 = *(void *)(v0 + 48);

  v6(v7, v8);
  sub_10000A7D0();
}

uint64_t sub_10005E3D4()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v3 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 72);
  os_log_type_t v4 = *(void (**)(uint64_t))(v0 + 24);
  swift_errorRetain(v1);
  v4(v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005E448(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  *(_BYTE *)(v6 + 138) = a6;
  *(_BYTE *)(v6 + 13_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 7) = a5;
  *(_BYTE *)(v6 + 136) = a4;
  *(void *)(v6 + 2_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = a2;
  *(void *)(v6 + 32) = a3;
  *(void *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  uint64_t v7 = type metadata accessor for SomeEvent(0LL);
  *(void *)(v6 + 40) = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  *(void *)(v6 + 48) = v8;
  *(void *)(v6 + sub_1000154A8(*(void *)(v0 + 152) + OBJC_IVAR____TtC11homeeventsd21ProcessLaunchLogEvent_database, v0 + 56) = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for EventRecord.DecodedEvent(0LL);
  *(void *)(v6 + 6_s11homeeventsd29BackgroundSystemTaskSchedulerVwxx_0(v0 + 4) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v6 + 72) = v10;
  *(void *)(v6 + 80) = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10005E4E0, 0LL, 0LL);
}

uint64_t sub_10005E4E0()
{
  uint64_t v1 = sub_100048E04(*(void *)(v0 + 16), *(void *)(v0 + 24));
  *(void *)(v0 + 88) = v1;
  uint64_t v2 = v1;
  int64_t v3 = *(void *)(v1 + 16);
  if (v3)
  {
    if ((*(_BYTE *)(v0 + 138) & 1) != 0)
    {
      uint64_t v4 = *(void *)(v0 + 72);
      uint64_t v5 = *(void *)(v0 + 48);
      int64_t v26 = _swiftEmptyArrayStorage;
      sub_10002CCAC(0, v3, 0);
      unint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
      uint64_t v22 = *(void *)(v5 + 72);
      uint64_t v23 = v5;
      uint64_t v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16);
      unsigned int v21 = enum case for EventRecord.DecodedEvent.someEvent(_:);
      uint64_t v8 = _swiftEmptyArrayStorage;
      do
      {
        unint64_t v9 = *(void *)(v0 + 80);
        unint64_t v11 = *(void *)(v0 + 56);
        uint64_t v10 = *(void *)(v0 + 64);
        uint64_t v12 = *(void *)(v0 + 40);
        v7(v11, v6, v12);
        v7(v9, v11, v12);
        (*(void (**)(unint64_t, void, uint64_t))(v4 + 104))(v9, v21, v10);
        (*(void (**)(unint64_t, uint64_t))(v23 + 8))(v11, v12);
        if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
        {
          sub_10002CCAC(0, v8[2] + 1LL, 1);
          uint64_t v8 = v26;
        }

        unint64_t v14 = v8[2];
        unint64_t v13 = v8[3];
        if (v14 >= v13 >> 1)
        {
          sub_10002CCAC(v13 > 1, v14 + 1, 1);
          uint64_t v8 = v26;
        }

        uint64_t v15 = *(void *)(v0 + 80);
        uint64_t v16 = *(void *)(v0 + 64);
        v8[2] = v14 + 1;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))( (unint64_t)v8 + ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
        + *(void *)(v4 + 72) * v14,
          v15,
          v16);
        int64_t v26 = v8;
        v6 += v22;
        --v3;
      }

      while (v3);
      swift_bridgeObjectRelease(*(void *)(v0 + 88));
      *(void *)(v0 + 112) = v8;
      uint64_t v25 = (uint64_t (*)(uint64_t, uint64_t, char, char))((char *)&dword_1000800C8 + dword_1000800C8);
      uint64_t v19 = (void *)swift_task_alloc(unk_1000800CC);
      *(void *)(v0 + 120) = v19;
      *uint64_t v19 = v0;
      v19[1] = sub_10005EA48;
      return v25((uint64_t)v8, *(void *)(v0 + 32), *(_BYTE *)(v0 + 136), *(_BYTE *)(v0 + 137));
    }

    else
    {
      int64_t v24 = (uint64_t (*)(uint64_t))((char *)&dword_10007F850 + dword_10007F850);
      uint64_t v18 = (void *)swift_task_alloc(unk_10007F854);
      *(void *)(v0 + 96) = v18;
      *uint64_t v18 = v0;
      v18[1] = sub_10005E7A0;
      return v24(v2);
    }
  }

  else
  {
    swift_bridgeObjectRelease(v1);
    uint64_t v17 = *(void *)(v0 + 56);
    swift_task_dealloc(*(void *)(v0 + 80));
    swift_task_dealloc(v17);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_10005E7A0()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 96LL);
  *(void *)(*(void *)v1 + 104LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    int64_t v3 = sub_10005E804;
  }
  else {
    int64_t v3 = sub_10005E84C;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_10005E804()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_task_dealloc(*(void *)(v0 + 80));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005E84C()
{
  uint64_t v1 = *(void *)(v0 + 88);
  int64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 72);
    uint64_t v4 = *(void *)(v0 + 48);
    uint64_t v22 = _swiftEmptyArrayStorage;
    sub_10002CCAC(0, v2, 0);
    uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v19 = *(void *)(v4 + 72);
    uint64_t v20 = v4;
    unint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
    unsigned int v18 = enum case for EventRecord.DecodedEvent.someEvent(_:);
    uint64_t v7 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v8 = *(void *)(v0 + 80);
      uint64_t v10 = *(void *)(v0 + 56);
      uint64_t v9 = *(void *)(v0 + 64);
      uint64_t v11 = *(void *)(v0 + 40);
      v6(v10, v5, v11);
      v6(v8, v10, v11);
      (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v8, v18, v9);
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v10, v11);
      if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
      {
        sub_10002CCAC(0, v7[2] + 1LL, 1);
        uint64_t v7 = v22;
      }

      unint64_t v13 = v7[2];
      unint64_t v12 = v7[3];
      if (v13 >= v12 >> 1)
      {
        sub_10002CCAC(v12 > 1, v13 + 1, 1);
        uint64_t v7 = v22;
      }

      uint64_t v14 = *(void *)(v0 + 80);
      uint64_t v15 = *(void *)(v0 + 64);
      v7[2] = v13 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))( (unint64_t)v7 + ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
      + *(void *)(v3 + 72) * v13,
        v14,
        v15);
      uint64_t v22 = v7;
      v5 += v19;
      --v2;
    }

    while (v2);
    swift_bridgeObjectRelease(*(void *)(v0 + 88));
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v0 + 88));
    uint64_t v7 = _swiftEmptyArrayStorage;
  }

  *(void *)(v0 + 112) = v7;
  unsigned int v21 = (uint64_t (*)(uint64_t, uint64_t, char, char))((char *)&dword_1000800C8 + dword_1000800C8);
  uint64_t v16 = (void *)swift_task_alloc(unk_1000800CC);
  *(void *)(v0 + 120) = v16;
  *uint64_t v16 = v0;
  v16[1] = sub_10005EA48;
  return v21((uint64_t)v7, *(void *)(v0 + 32), *(_BYTE *)(v0 + 136), *(_BYTE *)(v0 + 137));
}

uint64_t sub_10005EA48()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 120LL);
  *(void *)(*(void *)v1 + 128LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_10005EAF4;
  }
  else {
    uint64_t v3 = sub_10005EAAC;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_10005EAAC()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_task_dealloc(*(void *)(v0 + 80));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005EAF4()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_task_dealloc(*(void *)(v0 + 80));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_10005EB90()
{
  v2.uint64_t receiver = v0;
  v2.Class super_class = (Class)type metadata accessor for PendingUploadEvent();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for PendingUploadEvent()
{
  return objc_opt_self(&OBJC_CLASS___HMVPendingUploadEvent);
}