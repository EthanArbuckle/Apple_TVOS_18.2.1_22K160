BOOL _AvoidSuspendingPid(BOOL result)
{
  uint64_t buffer;
  __int16 v3;
  uint64_t v4;
  v4 = *MEMORY[0x1895F89C0];
  if (!result)
  {
    proc_name(result, &buffer, 0x21u);
    return buffer == 0x64796669746F6ELL || buffer == 0x676F646863746177LL && v3 == 100;
  }

  return result;
}

CFStringRef _CopyStringForTime(int a1, double a2)
{
  uint64_t v44 = *MEMORY[0x1895F89C0];
  time_t v37 = (uint64_t)(*MEMORY[0x189604DA8] + a2);
  localtime_r(&v37, &v38);
  size_t v4 = strftime(v43, 0x40uLL, "%Y-%m-%d %T", &v38);
  if (!v4) {
    return &stru_189F64BD8;
  }
  unint64_t v5 = v4;
  if (v4 >= 0x40)
  {
    int v13 = *__error();
    _sa_logt();
    v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__str = 136315138;
      v42 = v43;
      _os_log_error_impl(&dword_186C92000, v14, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)__str, 0xCu);
    }

    *__error() = v13;
    _SASetCrashLogMessage(88, "%s", v15, v16, v17, v18, v19, v20, (char)v43);
    _os_crash();
    __break(1u);
    goto LABEL_15;
  }

  if (a1 >= 1)
  {
    double v6 = fmod(a2, 1.0);
    snprintf(__str, 0x10uLL, "%0.*f", a1, v6);
    v5 += strlcpy(&v43[v5], &__str[1], 64 - v5);
    if (v5 >= 0x40) {
      goto LABEL_18;
    }
  }

  size_t v7 = strftime(&v43[v5], 64 - v5, " %z", &v38);
  if (!v7) {
    v43[v5] = 0;
  }
  if (v7 + v5 >= 0x40)
  {
LABEL_15:
    int v21 = *__error();
    _sa_logt();
    v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__str = 136315138;
      v42 = v43;
      _os_log_error_impl(&dword_186C92000, v22, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)__str, 0xCu);
    }

    *__error() = v21;
    _SASetCrashLogMessage(116, "%s", v23, v24, v25, v26, v27, v28, (char)v43);
    _os_crash();
    __break(1u);
LABEL_18:
    int v29 = *__error();
    _sa_logt();
    v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v40 = v43;
      _os_log_error_impl(&dword_186C92000, v30, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
    }

    *__error() = v29;
    _SASetCrashLogMessage(100, "%s", v31, v32, v33, v34, v35, v36, (char)v43);
    _os_crash();
    __break(1u);
  }

  uint64_t v8 = SANSStringForCString(v43);
  v9 = (void *)v8;
  v10 = &stru_189F64BD8;
  if (v8) {
    v10 = (__CFString *)v8;
  }
  v11 = v10;

  return v11;
}

void sub_186C94ABC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

LABEL_18:
        uint64_t v16 = v5[5];
        v5[5] = 0LL;
      }

      uint64_t v17 = (id *)v5[4];
      uint64_t v18 = 0LL;
      v5[4] = 0LL;
LABEL_23:

      unint64_t v5 = v17;
    }

    while (v17);
  }
}
  }
}

    [v13 exitTimestamp];
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v20)
    {
      +[SATimestamp timestampWithKTraceEvent:fromSession:]((uint64_t)&OBJC_CLASS___SATimestamp, a2);
      int v21 = (void *)objc_claimAutoreleasedReturnValue();
      -[SASampleStore task:exitedAtTimestamp:]((uint64_t)v11, v13, v21);
    }

LABEL_21:
    goto LABEL_22;
  }

                            int v21 = *__error();
                            _sa_logt();
                            v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                            if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
                            {
                              [v8 name];
                              v366 = (void *)objc_claimAutoreleasedReturnValue();
                              v367 = [v8 pid];
                              *(_DWORD *)buf = 138412546;
                              *(void *)&uint8_t buf[4] = v366;
                              *(_WORD *)&buf[12] = 1024;
                              *(_DWORD *)&buf[14] = v367;
                              _os_log_error_impl( &dword_186C92000,  v22,  OS_LOG_TYPE_ERROR,  "SAKTSYM %@ [%d] libktrace load info failed verification",  buf,  0x12u);
                            }

                            uint64_t v23 = __error();
LABEL_25:
                            *uint64_t v23 = v21;
                            goto LABEL_26;
                          }
                        }
                      }
                    }
                  }
    }
  }
}

      goto LABEL_20;
    }

    v11 = *__error();
    _sa_logt();
    v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      int v13 = *(void *)(a1 + 72);
      v14 = *(void *)(a1 + 80);
      *(_DWORD *)buf = 134218496;
      v109 = v10;
      v110 = 2048;
      v111 = v13;
      v112 = 2048;
      v113 = v14;
      _os_log_error_impl(&dword_186C92000, v12, OS_LOG_TYPE_ERROR, "%lu < %lu, < %lu", buf, 0x20u);
    }

    *__error() = v11;
    _SASetCrashLogMessage(3770, "%lu < %lu, < %lu", v15, v16, v17, v18, v19, v20, v10);
    _os_crash();
    __break(1u);
LABEL_10:
    v10 = *(void *)(a1 + 80);
    uint64_t v8 = *(id *)(a1 + 32);
    goto LABEL_11;
  }

  if (!*(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL))
  {
    uint64_t v15 = objc_alloc(*(Class *)(a1 + 56));
    uint64_t v16 = *(void *)(a1 + 32);
    SACachedNSString(*(void **)(a1 + 40));
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue();
    uint64_t v18 = [v15 initWithUUID:v16 path:v17];
    uint64_t v19 = *(void *)(*(void *)(a1 + 48) + 8LL);
    uint64_t v20 = *(void **)(v19 + 40);
    *(void *)(v19 + 40) = v18;

    if (v4)
    {
      [v4 addObject:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)];
    }

    else
    {
      int v21 = (void *)objc_msgSend( objc_alloc(MEMORY[0x189603FA8]),  "initWithObjects:",  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40),  0);
      [v3 setObject:v21 forKeyedSubscript:*(void *)(a1 + 32)];
    }
  }
}

  return v12;
}
  }

      [v7 insertObject:v13 atIndex:0];
      goto LABEL_19;
    }

    p_isa = 0LL;
LABEL_64:
    if ((v9 & 1) != 0)
    {
LABEL_65:
      v52 = v11->_leafOfCRootFramesReplacedBySwiftAsync;
      if (v52)
      {
        v53 = v52;
        do
        {
          [v7 insertObject:v53 atIndex:0];
          v54 = v53->_parentFrame;
          v55 = v54;

          v53 = v55;
        }

        while (v54);
      }
    }

    if (p_isa) {
      v56 = v10;
    }
    else {
      v56 = 0;
    }
    if (v56)
    {
      v57 = p_isa[4];
      v58 = (_BYTE *)[p_isa copyWithNewParent:v57];

      if (v58)
      {
        if (v9) {
          v59 = 18;
        }
        else {
          v59 = 16;
        }
        v58[8] = v59 | v58[8] & 0xED;
      }

      [v7 addObject:v58];
    }
  }

  return v7;
}

      ++v3;
      v2 += 2168LL;
    }

    while (v3 < _MergedGlobals_9);
  }

  uint64_t v18 = *(unsigned int **)(a1 + 48);
  do
  {
    uint64_t v19 = __ldxr(v18);
    uint64_t v20 = v19 - 1;
  }

  while (__stxr(v20, v18));
  if (!v20) {
    free(*(void **)(a1 + 40));
  }
  dispatch_semaphore_signal((dispatch_semaphore_t)qword_18C4B16E0);
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

      pid_for_thread = *(_DWORD *)(a2 + 88);
      v11 = *(_DWORD *)(a2 + 48);
      if (pid_for_thread < 0)
      {
        pid_for_thread = ktrace_get_pid_for_thread();
        v11 = *(_DWORD *)(a2 + 48);
      }

      goto LABEL_20;
    }

    if (v7 > 730268059)
    {
      v10 = 412;
    }

    else
    {
      v10 = 408;
    }

    v11 = *(_DWORD *)(a2 + 48);
    if (v7 != (v10 | 0x2B870000)) {
      goto LABEL_20;
    }
    goto LABEL_18;
  }

void sub_186C95724( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

LABEL_42:
      if (!a8) {
        return 0LL;
      }
      v9 = 0LL;
      *a8 = -1;
      return v9;
    default:
      return v9;
  }

  [v31 threadStates];
  uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue();
  v45 = [v44 lastObject];
  v46 = v26 | v45;

  v47 = v45 != 0;
  if (!(v26 | v45))
  {
    v51 = v189;
    v50 = v187;
LABEL_250:

LABEL_251:
    return v46;
  }

  if (v45 && [(id)v45 endSampleIndex] == a7)
  {
    v48 = *__error();
    _sa_logt();
    v49 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v50 = v187;
    if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      v195 = [v31 threadId];
      _os_log_error_impl( &dword_186C92000,  v49,  OS_LOG_TYPE_ERROR,  "Already saw thread 0x%llx in this stackshot, ignoring second instance",  buf,  0xCu);
    }

    v46 = 0LL;
    *__error() = v48;
    goto LABEL_249;
  }

  v52 = a13;
  if ((a19 & 1) != 0)
  {
    v53 = 1;
  }

  else
  {
    v54 = (unsigned __int8 *)(v26 + 64);
    if (!v26) {
      v54 = (unsigned __int8 *)(v27 + 16);
    }
    v53 = (*v54 >> 6) & 1;
  }

  v172 = v53;
  if (v26)
  {
    if (v45)
    {
      v55 = [(id)v45 name];

      v47 = ((unint64_t)a10 | v55) == 0;
      if (a10)
      {
        if (v55)
        {
          v56 = [(id)v45 name];
          v47 = strcmp(a10, (const char *)[v56 UTF8String]) == 0;
        }
      }
    }
  }

  if (a13)
  {
    v57 = (void *)a13[1];
    if (!v57)
    {
      v52 = 0LL;
      if (v45) {
        goto LABEL_63;
      }
LABEL_68:
      v175 = 0;
      goto LABEL_71;
    }

    SANSStringForCString(v57);
    v52 = (void *)objc_claimAutoreleasedReturnValue();
  }

  if (!v45) {
    goto LABEL_68;
  }
LABEL_63:
  v58 = [(id)v45 waitInfo];

  v175 = (a12 | v58) == 0;
  if (a12 && v58)
  {
    v59 = [(id)v45 waitInfo];
    v60 = (void *)v59;
    if (a13)
    {
      v61 = *(unsigned __int16 *)(*a13 + 2LL);
      v62 = *(unsigned __int8 *)(*a13 + 4LL);
    }

    else
    {
      v61 = 0LL;
      v62 = 0LL;
    }

    v175 = -[SAWaitInfo matchesKCDataWaitInfo:portName:flags:domain:](v59, a12, v52, v61, v62);
  }

              goto LABEL_43;
            }
          }
        }
      }

      [a1 creationTimestamp];
      int v21 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v21) {
        goto LABEL_23;
      }
      [a1 creationTimestamp];
      uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue();
      int v29 = [v28 ge:v45];

      if (v29)
      {
        *a5 = [v13 cpuTimeNs];
        a5[1] = [v13 instructions];
        uint64_t v27 = [v13 cycles];
        int v21 = 0LL;
        goto LABEL_21;
      }

      int v21 = 0LL;
      goto LABEL_23;
    }
  }

          v10 = 1LL;
          goto LABEL_33;
        }
      }

      if ((v29 & 1) != 0) {
        v10 = -1LL;
      }
      else {
        v10 = 1LL;
      }
      goto LABEL_33;
    }
}

LABEL_12:
  if (self->_numSwiftAsyncFrames) {
    isSwiftAsyncStackTruncated = 1;
  }
  else {
    isSwiftAsyncStackTruncated = self->_isSwiftAsyncStackTruncated;
  }
  int v13 = 1;
  if ((a3 & 0x10) == 0
    && isSwiftAsyncStackTruncated
    && ((a3 & 4) == 0 || v4 < self->_swiftAsyncStitchIndex))
  {
    -[SAFrame reset](self->_frame, "reset");
    frame = self->_frame;
    if (frame) {
      frame->_BOOLs.bits |= 2u;
    }
    if (self->_isSwiftAsyncStackTruncated)
    {
      uint64_t v15 = self->_frame;
      if (v15)
      {
        v15->_BOOLs.bits |= 8u;
        uint64_t v16 = self->_frame;
      }

      else
      {
        uint64_t v16 = 0LL;
      }

      v8[2](v8, v16);
      uint64_t v17 = self->_frame;
      if (v17) {
        v17->_BOOLs.bits &= ~8u;
      }
    }

    numSwiftAsyncFrames = self->_numSwiftAsyncFrames;
    if ((_DWORD)numSwiftAsyncFrames)
    {
      uint64_t v19 = 0;
      do
      {
        uint64_t v20 = -[SAFrameIterator addressForStackDepth:frames:numFrames:isUserspace:isSwiftAsync:isLeaf:frameIndexUsed:]( (uint64_t)self,  v19,  (uint64_t *)self->_swiftAsyncFrames,  numSwiftAsyncFrames,  1,  1,  (BOOL *)buf,  0LL);
        int v21 = self->_frame;
        if (v21) {
          v21->_address = v20;
        }
        v22 = -[SAFrameIterator binaryLoadInfoForUserAddress:](self, v20);
        uint64_t v23 = self->_frame;
        if (v23) {
          objc_storeWeak((id *)&v23->_binaryLoadInfo, v22);
        }

        v8[2](v8, self->_frame);
        ++v19;
        numSwiftAsyncFrames = self->_numSwiftAsyncFrames;
      }

      while (v19 < numSwiftAsyncFrames);
    }

    int v13 = 0;
  }

  if ((a3 & 0x18) != 0) {
    uint64_t v24 = isSwiftAsyncStackTruncated;
  }
  else {
    uint64_t v24 = 0;
  }
  if (self->_swiftAsyncStitchIndex > self->_numUserFrames)
  {
LABEL_115:
    v70 = *__error();
    _sa_logt();
    v71 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
    {
      swiftAsyncStitchIndex = self->_swiftAsyncStitchIndex;
      LODWORD(v4) = self->_numUserFrames;
      v73 = -[SAFrameIterator debugDescription](self, "debugDescription");
      v74 = [v73 UTF8String];
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)v122 = swiftAsyncStitchIndex;
      *(_WORD *)&v122[4] = 1024;
      *(_DWORD *)&v122[6] = (_DWORD)v4;
      v123 = 2080;
      v124 = v74;
      _os_log_error_impl( &dword_186C92000,  v71,  OS_LOG_TYPE_ERROR,  "_swiftAsyncStitchIndex %u, _numUserFrames %u: %s",  buf,  0x18u);
    }

    *__error() = v70;
    v75 = self->_swiftAsyncStitchIndex;
    -[SAFrameIterator debugDescription](self, "debugDescription");
    self = (SAFrameIterator *) objc_claimAutoreleasedReturnValue();
    -[SAFrameIterator UTF8String](self, "UTF8String");
    _SASetCrashLogMessage(884, "_swiftAsyncStitchIndex %u, _numUserFrames %u: %s", v76, v77, v78, v79, v80, v81, v75);

    _os_crash();
    __break(1u);
LABEL_118:
    v82 = *__error();
    _sa_logt();
    v83 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR))
    {
      numKernelFrames = self->_numKernelFrames;
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)v122 = numKernelFrames;
      _os_log_error_impl(&dword_186C92000, v83, OS_LOG_TYPE_ERROR, "%d _numKernelFrames", buf, 8u);
    }

    *__error() = v82;
    _SASetCrashLogMessage(948, "%d _numKernelFrames", v85, v86, v87, v88, v89, v90, self->_numKernelFrames);
    _os_crash();
    __break(1u);
    goto LABEL_121;
  }

  if ((v13 | v24 ^ 1) != 1) {
    goto LABEL_70;
  }
  -[SAFrame reset](self->_frame, "reset");
  uint64_t v25 = v13 ^ 1;
  if (!self->_isUserStackTruncated) {
    uint64_t v25 = 1;
  }
  if ((v25 & 1) == 0)
  {
    uint64_t v26 = self->_frame;
    if (v26)
    {
      v26->_BOOLs.bits |= 8u;
      uint64_t v27 = self->_frame;
    }

    else
    {
      uint64_t v27 = 0LL;
    }

    v8[2](v8, v27);
    uint64_t v28 = self->_frame;
    if (v28) {
      v28->_BOOLs.bits &= ~8u;
    }
  }

  userFrames = self->_userFrames;
  if (!userFrames) {
    goto LABEL_70;
  }
  if (!self->_numUserFrames)
  {
LABEL_121:
    a3 = *__error();
    _sa_logt();
    v91 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v91, OS_LOG_TYPE_ERROR))
    {
      v92 = self->_numUserFrames;
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)v122 = v92;
      _os_log_error_impl(&dword_186C92000, v91, OS_LOG_TYPE_ERROR, "%d _numUserFrames", buf, 8u);
    }

    *__error() = a3;
    _SASetCrashLogMessage(900, "%d _numUserFrames", v93, v94, v95, v96, v97, v98, self->_numUserFrames);
    _os_crash();
    __break(1u);
    goto LABEL_124;
  }

  isSwiftAsyncStackTruncated = (_DWORD)v4 + 1;
  if (!self->_assumeUserBinaryLoadInfosContainMainBinary) {
    goto LABEL_52;
  }
  v30 = -[NSArray firstObject](self->_userBinaryLoadInfos, "firstObject");
  uint64_t v31 = [v30 loadAddress];

  if (!v31)
  {
    userFrames = self->_userFrames;
LABEL_52:
    if (*((_DWORD *)userFrames + 1)) {
      uint64_t v33 = 0x100000000LL;
    }
    else {
      uint64_t v33 = *MEMORY[0x1895FD590];
    }
    goto LABEL_55;
  }

  -[NSArray firstObject](self->_userBinaryLoadInfos, "firstObject");
  uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v33 = [v32 loadAddress];

LABEL_55:
  uint64_t v34 = self->_swiftAsyncStitchIndex;
  if (v34 > isSwiftAsyncStackTruncated)
  {
LABEL_124:
    v99 = *__error();
    _sa_logt();
    v100 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v100, OS_LOG_TYPE_ERROR))
    {
      v101 = self->_swiftAsyncStitchIndex;
      -[SAFrameIterator debugDescription](self, "debugDescription");
      a3 = (unint64_t) objc_claimAutoreleasedReturnValue();
      v102 = [(id)a3 UTF8String];
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)v122 = v101;
      *(_WORD *)&v122[4] = 1024;
      *(_DWORD *)&v122[6] = (_DWORD)v4;
      v123 = 2080;
      v124 = v102;
      _os_log_error_impl( &dword_186C92000,  v100,  OS_LOG_TYPE_ERROR,  "_swiftAsyncStitchIndex %u, maxDepth %u: %s",  buf,  0x18u);
    }

    *__error() = v99;
    v103 = self->_swiftAsyncStitchIndex;
    -[SAFrameIterator debugDescription](self, "debugDescription");
    self = (SAFrameIterator *) objc_claimAutoreleasedReturnValue();
    -[SAFrameIterator UTF8String](self, "UTF8String");
    _SASetCrashLogMessage(915, "_swiftAsyncStitchIndex %u, maxDepth %u: %s", v104, v105, v106, v107, v108, v109, v103);

    _os_crash();
    __break(1u);
LABEL_127:
    v110 = *__error();
    _sa_logt();
    v111 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v111, OS_LOG_TYPE_ERROR))
    {
      v112 = self->_numUserFrames;
      v113 = self->_swiftAsyncStitchIndex;
      *(_DWORD *)buf = 67109888;
      *(_DWORD *)v122 = isSwiftAsyncStackTruncated;
      *(_WORD *)&v122[4] = 1024;
      *(_DWORD *)&v122[6] = v112;
      v123 = 2048;
      v124 = a3;
      v125 = 1024;
      v126 = v113;
      _os_log_error_impl( &dword_186C92000,  v111,  OS_LOG_TYPE_ERROR,  "endingDepth %u, numUserFrames %u, backtraceStyle 0x%llx, stitchIndex %u",  buf,  0x1Eu);
    }

    *__error() = v110;
    _SASetCrashLogMessage( 920,  "endingDepth %u, numUserFrames %u, backtraceStyle 0x%llx, stitchIndex %u",  v114,  v115,  v116,  v117,  v118,  v119,  isSwiftAsyncStackTruncated);
    _os_crash();
    __break(1u);
  }

  uint64_t v35 = (_DWORD)v4 - v34;
  if (v13) {
    uint64_t v36 = 0;
  }
  else {
    uint64_t v36 = v35 + 1;
  }
  isSwiftAsyncStackTruncated = self->_numUserFrames;
  if (v24)
  {
    isSwiftAsyncStackTruncated = v35 + 1;
    if (v35 + 1 > self->_numUserFrames) {
      goto LABEL_127;
    }
  }

  if (v36 < isSwiftAsyncStackTruncated)
  {
    do
    {
      buf[0] = 0;
      time_t v37 = -[SAFrameIterator addressForStackDepth:frames:numFrames:isUserspace:isSwiftAsync:isLeaf:frameIndexUsed:]( (uint64_t)self,  v36,  (uint64_t *)self->_userFrames,  self->_numUserFrames,  1,  0,  (BOOL *)buf,  0LL);
      LOBYTE(v13) = v13 & (v37 < v33);
      if ((v13 & 1) == 0)
      {
        tm v38 = buf[0];
        v39 = self->_frame;
        if (v39)
        {
          v39->_BOOLs.bits = (v39->_BOOLs.bits & 0xFE | buf[0]) ^ 1;
          v40 = self->_frame;
          if (v40) {
            v40->_address = v37;
          }
        }

        -[SAFrameIterator binaryLoadInfoForUserAddress:](self, v37);
        size_t v4 = (void *)objc_claimAutoreleasedReturnValue();
        v41 = self->_frame;
        if (v41) {
          objc_storeWeak((id *)&v41->_binaryLoadInfo, v4);
        }

        v8[2](v8, self->_frame);
        if (v38) {
          break;
        }
      }

      ++v36;
    }

    while (isSwiftAsyncStackTruncated != v36);
  }

    result = -[SAMSTypeStats addTask:thread:size:errors:](v11[4], a3, a4, a5, a6);
    v12 = *(_BYTE *)(a2 + 24);
    if ((v12 & 0x10) == 0)
    {
LABEL_6:
      if ((v12 & 0x20) == 0) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
  }

  return a1;
}

          v10 = *(unsigned int *)(a1 + 136);
          if ((_DWORD)v10)
          {
            v11 = *(void *)(a1 + 112);
            while (*(void *)v11 != v6)
            {
              v11 += 28LL;
              if (!--v10) {
                goto LABEL_16;
              }
            }

            if (*(_WORD *)(v11 + 26))
            {
              uint64_t v18 = *(unsigned int *)(a1 + 96);
              if ((_DWORD)v18)
              {
                v12 = *(void **)(a1 + 104);
                while (*(unsigned __int16 *)*v12 != *(unsigned __int16 *)(v11 + 26))
                {
                  v12 += 2;
                  if (!--v18) {
                    goto LABEL_17;
                  }
                }

                goto LABEL_18;
              }
            }
          }

          else
          {
LABEL_16:
            v11 = 0LL;
          }

    v14 = v13;
    CSSymbolForeachSourceInfo();

    goto LABEL_13;
  }

  uint64_t v18 = (void *)[objc_alloc(MEMORY[0x189603FA8]) initWithCapacity:a5 + a2];
  if (a2)
  {
    uint64_t v19 = 0LL;
    uint64_t v20 = 24LL * a2;
    do
    {
      uuidForBytes(a1 + v19 + 8);
      int v21 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = 0LL;
      if (!v19 && (a6 & 1) == 0)
      {
        else {
          v22 = 0LL;
        }
      }

      +[SABinary binaryWithUUID:absolutePath:](&OBJC_CLASS___SABinary, "binaryWithUUID:absolutePath:", v21, v22);
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue();
      +[SABinaryLoadInfo binaryLoadInfoWithBinary:loadAddress:isInKernelAddressSpace:exclave:]( (uint64_t)&OBJC_CLASS___SABinaryLoadInfo,  v23,  *(void *)(a1 + v19),  a6,  0LL);
      uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue();
      [v18 addObject:v24];

      v19 += 24LL;
    }

    while (v20 != v19);
  }

  if (a5)
  {
    uint64_t v25 = a5;
    uint64_t v26 = (uint64_t)a4 + 8;
    do
    {
      uuidForBytes(v26);
      uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue();
      +[SABinary binaryWithUUID:absolutePath:](&OBJC_CLASS___SABinary, "binaryWithUUID:absolutePath:", v27, 0LL);
      uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue();
      -[SABinary segmentWithCleanName:](v28, @"__TEXT_EXEC");
      int v29 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v29)
      {
        +[SASegment segmentWithBinary:name:length:]((uint64_t)&OBJC_CLASS___SASegment, v28, @"__TEXT_EXEC", 0LL);
        int v29 = (void *)objc_claimAutoreleasedReturnValue();
        -[SABinary addSegment:](v28, v29);
      }
      v30 = +[SABinaryLoadInfo binaryLoadInfoWithSegment:loadAddress:isInKernelAddressSpace:exclave:]( &OBJC_CLASS___SABinaryLoadInfo,  v29,  *(void *)(v26 - 8),  a6,  0LL);
      [v18 addObject:v30];

      v26 += 24LL;
      --v25;
    }

    while (v25);
  }

  if ((a6 & 1) != 0) {
    [v18 sortUsingComparator:&__block_literal_global_665];
  }
  uint64_t v17 = (void *)[v18 copy];

LABEL_28:
  return v17;
}

          objc_msgSend(v21, "endTimestamp", v14);
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          uint64_t v23 = [v22 lt:v45];

          if (v23)
          {

            v14 = v44;
          }

          else
          {
            v14 = v44;
            if (v21)
            {
              if (![v13 isIdleWorkQueue]
                || [v21 isIdleWorkQueue])
              {
                uint64_t v24 = [v13 cpuTimeNs];
                *a5 = v24 - [v21 cpuTimeNs];
                uint64_t v25 = [v13 instructions];
                a5[1] = v25 - [v21 instructions];
                uint64_t v26 = [v13 cycles];
                uint64_t v27 = v26 - [v21 cycles];
LABEL_21:
                a5[2] = v27;
              }

    *(_BYTE *)(v20 + 15) |= 0x40u;
    tds_ss_flags = a3->tds_ss_flags;
    if ((tds_ss_flags & 0x1000) == 0)
    {
LABEL_6:
      if ((tds_ss_flags & 0x800) == 0)
      {
LABEL_8:
        v22 = [v17 copy];
        uint64_t v23 = *(void **)(v20 + 104);
        *(void *)(v20 + 104) = v22;

        goto LABEL_9;
      }

  var11_low = (char)var11_low;
  if (((char)var11_low & 0x1000) != 0)
  {
    *(_BYTE *)(v20 + 15) |= 0x80u;
    var11_low = SLOBYTE(a3->var11);
  }

  if ((var11_low & 0x800) != 0) {
    *(_BYTE *)(v20 + 19) |= 0x40u;
  }
LABEL_16:

  return (SAThreadState *)v20;
}

    v88 = 1;
LABEL_13:
    v89 = 1;
    goto LABEL_14;
  }

  v84 = v340;
  v85 = v371;
  v86 = v366;
  v87 = v352;
  if (a19 == 1) {
    goto LABEL_12;
  }
  v88 = 0;
  v89 = 1;
  if (v366 && a19 == -1) {
    v88 = [v366 hasPrefix:@"com.apple."];
  }
LABEL_14:
  v90 = a21;
  v91 = a17;
  v343 = v75;
  if ([*(id *)(a1 + 16) printJson])
  {
    SAJSONWriteDictionaryFirstEntry(v85, (uint64_t)@"name", v362);
    if (v84)
    {
      [v84 uuid];
      v92 = (void *)objc_claimAutoreleasedReturnValue();
      [v92 UUIDString];
      v93 = (void *)objc_claimAutoreleasedReturnValue();
      SAJSONWriteDictionaryEntry(v85, @"uuid", v93);

      v75 = v343;
    }

    if (v75) {
      SAJSONWriteDictionaryEntry(v85, @"path", v75);
    }
    if (v356) {
      SAJSONWriteDictionaryEntry(v85, @"sharedcaches", v356);
    }
    if ((_DWORD)a8 != -314)
    {
      objc_msgSend(MEMORY[0x189607968], "numberWithUnsignedInt:");
      v94 = (void *)objc_claimAutoreleasedReturnValue();
      SAJSONWriteDictionaryEntry(v85, @"uid", v94);
    }

    if (a17)
    {
      [*(id *)(a1 + 160) osProductName];
      v95 = (void *)objc_claimAutoreleasedReturnValue();

      if (v95)
      {
        [*(id *)(a1 + 160) osProductName];
        v96 = (void *)objc_claimAutoreleasedReturnValue();
        v97 = SAIsEmbeddedPlatform(v96);

        [MEMORY[0x189607968] numberWithUnsignedLongLong:a17];
        v98 = (void *)objc_claimAutoreleasedReturnValue();
        if (v97) {
          v99 = @"adamID";
        }
        else {
          v99 = @"appItemID";
        }
        SAJSONWriteDictionaryEntry(v85, v99, v98);
        v86 = v366;
      }

      else
      {
        [MEMORY[0x189607968] numberWithUnsignedLongLong:a17];
        v98 = (void *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v85, @"adamID", v98);
      }
    }

    if (v358)
    {
      SACopySanitizedString(v358, 1, 0LL);
      v111 = (void *)objc_claimAutoreleasedReturnValue();
      SAJSONWriteDictionaryEntry(v85, @"appExternalID", v111);
    }

    v112 = v345;
    if (v89)
    {
      if (v88) {
        v113 = (void *)MEMORY[0x189604A88];
      }
      else {
        v113 = (void *)MEMORY[0x189604A80];
      }
      SAJSONWriteDictionaryEntry(v85, @"isFirstParty", v113);
    }

    if (a21)
    {
      SAJSONWriteDictionaryEntry(v85, @"isBeta", MEMORY[0x189604A88]);
      if (v351) {
        SAJSONWriteDictionaryEntry(v85, @"cohort", v351);
      }
    }

    v114 = v356;
    if (v361) {
      SAJSONWriteDictionaryEntry(v85, @"betaIdentifier", v361);
    }
    v115 = v355;
    if (v86)
    {
      SACopySanitizedString(v86, 1, 0LL);
      v116 = (void *)objc_claimAutoreleasedReturnValue();
      SAJSONWriteDictionaryEntry(v85, @"bundleIdentifier", v116);
    }

    if (v359)
    {
      SAJSONWriteDictionaryEntry(v85, @"version", v359);
    }

    else
    {
      v118 = v363;
      v117 = v364;
      if (v344 == 0)
      {
LABEL_89:
        if (v345)
        {
          SACopySanitizedString(v345, 1, 0LL);
          v122 = (void *)objc_claimAutoreleasedReturnValue();
          SAJSONWriteDictionaryEntry(v85, @"buildVersion", v122);
        }

        if (v118)
        {
          SACopySanitizedString(v118, 1, 0LL);
          v123 = (void *)objc_claimAutoreleasedReturnValue();
          SAJSONWriteDictionaryEntry(v85, @"productBuildVersion", v123);
        }

        if (v355)
        {
          SACopySanitizedString(v355, 1, 0LL);
          v124 = (void *)objc_claimAutoreleasedReturnValue();
          SAJSONWriteDictionaryEntry(v85, @"projectName", v124);
        }

        if (v117)
        {
          SACopySanitizedString(v117, 1, 0LL);
          v125 = (void *)objc_claimAutoreleasedReturnValue();
          SAJSONWriteDictionaryEntry(v85, @"sourceVersion", v125);
        }

        if (v367) {
          SAJSONWriteDictionaryEntry(v85, @"codesigningID", v367);
        }
        if (v360) {
          SAJSONWriteDictionaryEntry(v85, @"teamID", v360);
        }
        if ((unint64_t)[v368 count] > 1
          || [v368 count] == 1
          && ([v368 allKeys],
              v126 = (void *)objc_claimAutoreleasedReturnValue(),
              [v126 firstObject],
              v127 = (void *)objc_claimAutoreleasedReturnValue(),
              v128 = [v127 isEqualToString:@"none"],
              v127,
              v126,
              (v128 & 1) == 0))
        {
          SAJSONWriteDictionaryEntry(v85, @"resourceCoalitionSampleCounts", v368);
        }

        v87 = v352;
        if (v352) {
          SAJSONWriteDictionaryEntry(v85, @"onBehalfOf", v352);
        }
        if (v349) {
          SAJSONWriteDictionaryEntry(v85, @"parent", v349);
        }
        if (v348) {
          SAJSONWriteDictionaryEntry(v85, @"responsible", v348);
        }
        v86 = v366;
        if (v347) {
          SAJSONWriteDictionaryEntry(v85, @"taskExecedFrom", v347);
        }
        if (v346) {
          SAJSONWriteDictionaryEntry(v85, @"taskExecedTo", v346);
        }
        if (v350) {
          SAJSONWriteDictionaryEntry(v85, @"arch", v350);
        }
        if (v353) {
          SAJSONWriteDictionaryEntry(v85, @"startTime", v353);
        }
        if (v365) {
          SAJSONWriteDictionaryEntry(v85, @"endTime", v365);
        }
        if (a38 != 0x7FFFFFFFFFFFFFFFLL)
        {
          objc_msgSend(MEMORY[0x189607968], "numberWithUnsignedInteger:");
          v129 = (void *)objc_claimAutoreleasedReturnValue();
          SAJSONWriteDictionaryEntry(v85, @"startSampleIndex", v129);
        }

        if (a39 != 0x7FFFFFFFFFFFFFFFLL)
        {
          objc_msgSend(MEMORY[0x189607968], "numberWithUnsignedInteger:");
          v130 = (void *)objc_claimAutoreleasedReturnValue();
          SAJSONWriteDictionaryEntry(v85, @"endSampleIndex", v130);
        }

        [MEMORY[0x189607968] numberWithUnsignedInteger:a40];
        v131 = (void *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v85, @"numSamples", v131);

        if (a42)
        {
          objc_msgSend(MEMORY[0x189607968], "numberWithUnsignedInteger:");
          v132 = (void *)objc_claimAutoreleasedReturnValue();
          SAJSONWriteDictionaryEntry(v85, @"numSamplesSuspended", v132);
        }

        if (a43)
        {
          objc_msgSend(MEMORY[0x189607968], "numberWithUnsignedInteger:");
          v133 = (void *)objc_claimAutoreleasedReturnValue();
          SAJSONWriteDictionaryEntry(v85, @"numSamplesTerminated", v133);
        }

        if (a44)
        {
          objc_msgSend(MEMORY[0x189607968], "numberWithUnsignedLongLong:");
          v134 = (void *)objc_claimAutoreleasedReturnValue();
          SAJSONWriteDictionaryEntry(v85, @"startingTaskSize", v134);
        }

        if (a45)
        {
          objc_msgSend(MEMORY[0x189607968], "numberWithUnsignedLongLong:");
          v135 = (void *)objc_claimAutoreleasedReturnValue();
          SAJSONWriteDictionaryEntry(v85, @"endingTaskSize", v135);
        }

        if (a46)
        {
          objc_msgSend(MEMORY[0x189607968], "numberWithUnsignedLongLong:");
          v136 = (void *)objc_claimAutoreleasedReturnValue();
          SAJSONWriteDictionaryEntry(v85, @"maxTaskSize", v136);
        }

        if (a47 != 0x7FFFFFFFFFFFFFFFLL)
        {
          objc_msgSend(MEMORY[0x189607968], "numberWithUnsignedInteger:");
          v137 = (void *)objc_claimAutoreleasedReturnValue();
          SAJSONWriteDictionaryEntry(v85, @"startSampleIndexOfMaxTaskSize", v137);
        }

        if (a48 != 0x7FFFFFFFFFFFFFFFLL)
        {
          objc_msgSend(MEMORY[0x189607968], "numberWithUnsignedInteger:");
          v138 = (void *)objc_claimAutoreleasedReturnValue();
          SAJSONWriteDictionaryEntry(v85, @"endSampleIndexOfMaxTaskSize", v138);
        }

        v139 = v357;
        if (a49)
        {
          objc_msgSend(MEMORY[0x189607968], "numberWithUnsignedInt:");
          v140 = (void *)objc_claimAutoreleasedReturnValue();
          SAJSONWriteDictionaryEntry(v85, @"numPageins", v140);
        }

        if (a50)
        {
          objc_msgSend(MEMORY[0x189607968], "numberWithUnsignedLongLong:");
          v141 = (void *)objc_claimAutoreleasedReturnValue();
          SAJSONWriteDictionaryEntry(v85, @"cpuNanoseconds", v141);
        }

        if (a51)
        {
          objc_msgSend(MEMORY[0x189607968], "numberWithUnsignedLongLong:");
          v142 = (void *)objc_claimAutoreleasedReturnValue();
          SAJSONWriteDictionaryEntry(v85, @"cpuInstructions", v142);
        }

        if (a52)
        {
          objc_msgSend(MEMORY[0x189607968], "numberWithUnsignedLongLong:");
          v143 = (void *)objc_claimAutoreleasedReturnValue();
          SAJSONWriteDictionaryEntry(v85, @"cpuCycles", v143);
        }

        if (a56) {
          SAJSONWriteDictionaryEntry(v85, @"usesSuddenTermination", MEMORY[0x189604A88]);
        }
        if (a57) {
          SAJSONWriteDictionaryEntry(v85, @"allowsIdleExit", MEMORY[0x189604A88]);
        }
        if (a58) {
          SAJSONWriteDictionaryEntry(v85, @"isTranslocated", MEMORY[0x189604A88]);
        }
        if (a59)
        {
          SAJSONWriteDictionaryEntry(v85, @"isUnresponsive", MEMORY[0x189604A88]);
          if (a9 > 0.0)
          {
            [MEMORY[0x189607968] numberWithDouble:a9];
            v144 = (void *)objc_claimAutoreleasedReturnValue();
            SAJSONWriteDictionaryEntry(v85, @"timeOfLastResponseCF", v144);
          }
        }

        if (a60)
        {
          objc_msgSend(MEMORY[0x189607968], "numberWithUnsignedInteger:");
          v145 = (void *)objc_claimAutoreleasedReturnValue();
          SAJSONWriteDictionaryEntry(v85, @"numThreads", v145);
        }

        if (a61)
        {
          objc_msgSend(MEMORY[0x189607968], "numberWithUnsignedInteger:");
          v146 = (void *)objc_claimAutoreleasedReturnValue();
          SAJSONWriteDictionaryEntry(v85, @"numIdleWorkQueueThreads", v146);
        }

        if (a62)
        {
          objc_msgSend(MEMORY[0x189607968], "numberWithUnsignedInteger:");
          v147 = (void *)objc_claimAutoreleasedReturnValue();
          SAJSONWriteDictionaryEntry(v85, @"numOtherHiddenThreads", v147);
        }

        if (a63) {
          SAJSONWriteDictionaryEntry(v85, @"hieSwallowedException", MEMORY[0x189604A88]);
        }
        if (a64) {
          SAJSONWriteDictionaryEntry(v85, @"wqExceededConstrainedThreadLimit", MEMORY[0x189604A88]);
        }
        if (a65) {
          SAJSONWriteDictionaryEntry(v85, @"wqExceededTotalThreadLimit", MEMORY[0x189604A88]);
        }
        if ([v357 count]) {
          SAJSONWriteDictionaryEntry(v85, @"threadsDeadlocked", v357);
        }
        if ([v354 count]) {
          SAJSONWriteDictionaryEntry(v85, @"threadsBlockedByADeadlock", v354);
        }
        if (a69)
        {
          objc_msgSend(MEMORY[0x189607968], "numberWithUnsignedInteger:");
          v148 = (void *)objc_claimAutoreleasedReturnValue();
          SAJSONWriteDictionaryEntry(v85, @"numIOs", v148);

          [MEMORY[0x189607968] numberWithUnsignedLongLong:a68];
          v149 = (void *)objc_claimAutoreleasedReturnValue();
          SAJSONWriteDictionaryEntry(v85, @"ioSize", v149);
        }

        goto LABEL_434;
      }

      if ((void)v344)
      {
        SACopySanitizedString((void *)v344, 1, 0LL);
        v119 = (__CFString *)(id)objc_claimAutoreleasedReturnValue();
      }

      else
      {
        v119 = @"???";
      }

      if (*((void *)&v344 + 1))
      {
        SACopySanitizedString(*((void **)&v344 + 1), 1, 0LL);
        v120 = (__CFString *)(id)objc_claimAutoreleasedReturnValue();
      }

      else
      {
        v120 = @"???";
      }

      v121 = (void *)[objc_alloc(NSString) initWithFormat:@"%@ (%@)", v119, v120];
      SAJSONWriteDictionaryEntry(v85, @"version", v121);
    }

    v118 = v363;
    v117 = v364;
    goto LABEL_89;
  }

  if (a70)
  {
    [v85 printWithFormat:@"%-*s%@\n", 18, "Command: ", v362];
    if (!v84) {
      goto LABEL_46;
    }
    goto LABEL_41;
  }

  v100 = "Powerstats for: ";
  if (([*(id *)(a1 + 16) microstackshotsFormat] & 1) == 0
    && ![*(id *)(a1 + 16) systemstatsFormat])
  {
    v100 = "Process: ";
  }

  [v85 printWithFormat:@"%-*s%@", 18, v100, v362];
  *(_BYTE *)(a1 + 105) = 1;
  v90 = a21;
  v91 = a17;
  if (([*(id *)(a1 + 16) systemstatsFormat] & 1) == 0)
  {
    v101 = a40;
    if (a40 && a42 == a40)
    {
      [v85 appendString:@" (suspended)"];
      v101 = a40;
    }

    if (v101 && a43 == a40) {
      [v85 appendString:@" (zombie)"];
    }
  }

  [v85 appendString:@"\n"];
  if (v84)
  {
LABEL_41:
    if (![*(id *)(a1 + 16) systemstatsFormat])
    {
      [v84 uuid];
      v103 = (void *)objc_claimAutoreleasedReturnValue();
      [v103 UUIDString];
      v104 = (void *)objc_claimAutoreleasedReturnValue();
      [v85 printWithFormat:@"%-*s%@\n", 18, "UUID: ", v104];

      v75 = v343;
      goto LABEL_45;
    }
    v102 = -[SASamplePrinter indexForBinary:](a1, (uint64_t)v84);
    if (v102)
    {
      v103 = v102;
      objc_msgSend(v85, "printWithFormat:", @"%-*s%lu\n", 18, "UUID: ", objc_msgSend(v102, "unsignedLongValue"));
LABEL_45:

      goto LABEL_46;
    }

LABEL_70:
  if ((a3 & 0x19) != 0) {
    goto LABEL_111;
  }
  -[SAFrame reset](self->_frame, "reset");
  v42 = self->_frame;
  if (v42) {
    v42->_BOOLs.bits |= 4u;
  }
  if (self->_kernelFrames)
  {
    if (self->_numKernelFrames)
    {
      if (self->_isKernelStackTruncated)
      {
        v43 = self->_frame;
        if (v43)
        {
          v43->_BOOLs.bits |= 8u;
          uint64_t v44 = self->_frame;
        }

        else
        {
          uint64_t v44 = 0LL;
        }

        v8[2](v8, v44);
        v45 = self->_frame;
        if (v45) {
          v45->_BOOLs.bits &= ~8u;
        }
      }

      v46 = self->_numKernelFrames;
      if (self->_exclaveInsertionIndex == -1) {
        v47 = 1;
      }
      else {
        v47 = (a3 >> 5) & 1;
      }
      if (*((_DWORD *)self->_kernelFrames + 1)) {
        v48 = 0xFFFFFFFFLL;
      }
      else {
        v48 = *MEMORY[0x1895FD590] - 1LL;
      }
      if ((_DWORD)v46)
      {
        v49 = 0;
        v50 = 0;
        v51 = 1;
        do
        {
          v120 = 0;
          *(_DWORD *)buf = -1;
          v52 = -[SAFrameIterator addressForStackDepth:frames:numFrames:isUserspace:isSwiftAsync:isLeaf:frameIndexUsed:]( (uint64_t)self,  v49,  (uint64_t *)self->_kernelFrames,  v46,  0,  0,  &v120,  buf);
          if (((v47 | v50) & 1) == 0)
          {
            if (*(_DWORD *)buf >= self->_exclaveInsertionIndex)
            {
              v50 = 0;
            }

            else
            {
              v8[2](v8, &self->_exclaveFrame->super);
              v50 = 1;
            }
          }

          v51 &= v52 < v48;
          if ((v51 & 1) == 0)
          {
            v53 = v120;
            v54 = self->_frame;
            if (v54)
            {
              v54->_BOOLs.bits = (v54->_BOOLs.bits & 0xFE | v120) ^ 1;
              v55 = self->_frame;
              if (v55) {
                v55->_address = v52;
              }
            }
            v56 = +[SABinaryLoadInfo binaryLoadInfoForAddress:inBinaryLoadInfos:libraryCache:]( &OBJC_CLASS___SABinaryLoadInfo,  "binaryLoadInfoForAddress:inBinaryLoadInfos:libraryCache:",  v52,  self->_kernelBinaryLoadInfos,  0LL);
            v57 = self->_frame;
            if (v57) {
              objc_storeWeak((id *)&v57->_binaryLoadInfo, v56);
            }

            v8[2](v8, self->_frame);
            if (v53) {
              break;
            }
          }

          ++v49;
          v46 = self->_numKernelFrames;
        }

        while (v49 < v46);
      }

      else
      {
        v50 = 0;
      }

      if (((v47 | v50) & 1) == 0)
      {
        exclaveFrame = self->_exclaveFrame;
LABEL_110:
        v8[2](v8, &exclaveFrame->super);
        goto LABEL_111;
      }

      goto LABEL_111;
    }

    goto LABEL_118;
  }

  continuation = self->_continuation;
  if (continuation)
  {
    v59 = self->_frame;
    if (v59) {
      v59->_address = continuation;
    }
    v60 = +[SABinaryLoadInfo binaryLoadInfoForAddress:inBinaryLoadInfos:libraryCache:]( &OBJC_CLASS___SABinaryLoadInfo,  "binaryLoadInfoForAddress:inBinaryLoadInfos:libraryCache:");
    v61 = self->_frame;
    if (v61) {
      objc_storeWeak((id *)&v61->_binaryLoadInfo, v60);
    }

    exclaveFrame = (SAExclaveFrame *)self->_frame;
    goto LABEL_110;
  }

  -[SATask _gatherDataFromLiveProcessIsLate:mainBinaryPath:]((uint64_t)v57, 0LL, v59);
LABEL_71:

LABEL_72:
LABEL_73:

  return v57;
}

                                                if ((v1 & 0x4000000) != 0) {
                                                  goto LABEL_171;
                                                }
                                                goto LABEL_71;
                                              }

LABEL_111:
}

      [(id)a1 portName];
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      int v13 = v58 != 0LL;

      if (a5 && v58)
      {
LABEL_233:
        uint64_t v17 = (void *)[@"semaphore" mutableCopy];
        if ((a4 & 2) != 0
          || ([(id)a1 portName], v92 = (void *)objc_claimAutoreleasedReturnValue(),
                                                v92,
                                                v92))
        {
          [v17 appendFormat:@" port"];
          [(id)a1 portName];
          v93 = (void *)objc_claimAutoreleasedReturnValue();

          if (v93)
          {
            [(id)a1 portName];
            v94 = (void *)objc_claimAutoreleasedReturnValue();
            [v17 appendFormat:@" name %@", v94];
          }

          if ([(id)a1 portFlags]) {
            objc_msgSend(v17, "appendFormat:", @" flags 0x%llx", objc_msgSend((id)a1, "portFlags"));
          }
          if ([(id)a1 portDomain]) {
            objc_msgSend(v17, "appendFormat:", @" in domain %llu", objc_msgSend((id)a1, "portDomain"));
          }
          if ((a4 & 2) != 0) {
            objc_msgSend(v17, "appendFormat:", @" address 0x%llx", *(void *)(a1 + 24));
          }
        }

        v53 = *(void *)(a1 + 16);
        if (v53)
        {
LABEL_244:
          if ((v53 & 0x80000000) != 0)
          {
            v70 = @" owned by unknown process";
          }

          else
          {
LABEL_245:
            if ((_DWORD)v53 != a2)
            {
              v12[2](v12, v53, 0LL);
              v95 = (void *)objc_claimAutoreleasedReturnValue();
              [v17 appendFormat:@" owned by %@", v95];

              goto LABEL_197;
            }

            v70 = @" owned by this process";
          }
        }

        else
        {
LABEL_247:
          v70 = @" with unknown owner";
        }

      uint64_t v17 = v113;
LABEL_112:

      objc_autoreleasePoolPop(context);
      if (++a6 == v114)
      {
LABEL_117:

        uint64_t v19 = v108;
        goto LABEL_118;
      }
    }

    [v17 states];
    uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue();
    [v28 objectAtIndexedSubscript:a6];
    int v29 = (void *)objc_claimAutoreleasedReturnValue();

    [v29 thread];
    v30 = (id)objc_claimAutoreleasedReturnValue();
    if (![*(id *)(a1 + 160) targetDispatchQueueId])
    {
      if (([v30 isMainThread] & 1) != 0
        || (uint64_t v31 = [v30 threadId], v31 == objc_msgSend(*(id *)(a1 + 160), "targetThreadId")))
      {
        v121 = 1;
        goto LABEL_112;
      }
    }

    goto LABEL_25;
  }

LABEL_16:
}
        }
      }

  v14 = [v2 count];

LABEL_24:
LABEL_25:

  return v14;
}

      [v12 sizeInBytesForSerializedVersion];
      goto LABEL_10;
    }

    uint64_t v18 = @"No ordering list";
LABEL_15:
    +[SAException exceptionWithName:reason:userInfo:]( &OBJC_CLASS___SAException,  "exceptionWithName:reason:userInfo:",  @"Encoding failure",  v18,  0LL);
    uint64_t v19 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v19);
    goto LABEL_16;
  }

  return v10;
}

  return v10;
}
}

    v10 = 0LL;
    goto LABEL_17;
  }

      if ((unint64_t)[v14[5] count] > 1)
      {
        int v21 = 0LL;
        goto LABEL_22;
      }

      v22 = objc_getProperty(v14, v20, 40LL, 1);
LABEL_19:
      [v22 firstObject];
      int v21 = (void *)objc_claimAutoreleasedReturnValue();
      [MEMORY[0x189603FE8] null];
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue();

      if (v21 == v23)
      {

        int v21 = 0LL;
      }

      if (!v14)
      {
        uint64_t v28 = 0LL;
        goto LABEL_25;
      }

  v10 = [v3 length];
  if (v6) {
    v11 = v7;
  }
  else {
    v11 = 1;
  }
  v9 = 1LL;
  if (v10 && v11 && (!*(_DWORD *)(a1 + 76) || ([v3 isEqualToString:@"kernel_task"] & 1) == 0))
  {
    v12 = [v3 copy];
    int v13 = *(void **)(a1 + 56);
    *(void *)(a1 + 56) = v12;
  }

LABEL_34:
  LOBYTE(v13) = !-[SAFrame isSwiftAsync](v5, "isSwiftAsync") && *(_DWORD *)(v4 + 18) != 0;
  if (v5)
  {
    p_BOOLs = &v5->_BOOLs;
    bits = v5->_BOOLs.bits;
    goto LABEL_39;
  }

  return v5;
}

      v12 = 0;
LABEL_35:

      goto LABEL_36;
    }
  }

  size_t v7 = 0;
LABEL_16:

LABEL_19:
  return v7;
}

    v59 = @"Bad leaf user frame index";
    goto LABEL_44;
  }

  if (*a2 != 287528982LL)
  {
    v46 = a2[1];
    if (v46 >= 0xFFFFFFFFFFFFFFFELL)
    {
      v59 = @"Bad leaf frame index";
      goto LABEL_44;
    }

    v47 = (void *)objc_opt_class();
    _SASerializableInstanceForIndexUsingDeserializationDictionaryAndDataBufferDictionaryAndClass(v46, v61, v7, v47, 0);
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v48
      || (int v13 = v48, v50 = objc_getProperty(v48, v49, 8LL, 1),
                     v50,
                     v50))
    {
      v59 = @"nil leaf frame";
      goto LABEL_44;
    }

    v52 = objc_getProperty(v13, v51, 8LL, 1);
    v53 = *(void **)(a1 + 64);
    *(void *)(a1 + 64) = v52;

    v54 = *(void **)(a1 + 80);
    *(void *)(a1 + 80) = 0LL;

    if (*a2 <= 0x11235814uLL)
    {
      v58 = *(void **)(a1 + 104);
      *(void *)(a1 + 104) = 0LL;
    }

    else
    {
      v55 = a2[2];
      if (v55 == -2LL) {
        goto LABEL_33;
      }
      v56 = (void *)objc_opt_class();
      v57 = _SASerializableInstanceForIndexUsingDeserializationDictionaryAndDataBufferDictionaryAndClass(v55, v61, v7, v56, 0);
      v58 = *(void **)(a1 + 104);
      *(void *)(a1 + 104) = v57;
    }

    uint64_t v19 = *(void **)(a1 + 88);
    *(void *)(a1 + 8_Block_object_dispose(va, 8) = 0LL;
    goto LABEL_31;
  }

  uint64_t v31 = a2[1];
  if (v31 == -2LL) {
    goto LABEL_34;
  }
  uint64_t v32 = (void *)objc_opt_class();
  _SASerializableInstanceForIndexUsingDeserializationDictionaryAndDataBufferDictionaryAndClass(v31, v61, v7, v32, 0);
  uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue();
  int v13 = v33;
  if (v33) {
    uint64_t v35 = objc_getProperty(v33, v34, 8LL, 1);
  }
  else {
    uint64_t v35 = 0LL;
  }
  objc_storeStrong((id *)(a1 + 64), v35);
  uint64_t v36 = a2[2];
  if (v36 == -2LL) {
    goto LABEL_35;
  }
  time_t v37 = (void *)objc_opt_class();
  _SASerializableInstanceForIndexUsingDeserializationDictionaryAndDataBufferDictionaryAndClass(v36, v61, v7, v37, 0);
  tm v38 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v19 = v38;
  if (v38) {
    v40 = objc_getProperty(v38, v39, 8LL, 1);
  }
  else {
    v40 = 0LL;
  }
  objc_storeStrong((id *)(a1 + 80), v40);
  v41 = a2[3];
  if (v41 != -2LL)
  {
    v42 = (void *)objc_opt_class();
    v43 = _SASerializableInstanceForIndexUsingDeserializationDictionaryAndDataBufferDictionaryAndClass(v41, v61, v7, v42, 0);
    uint64_t v44 = *(void **)(a1 + 104);
    *(void *)(a1 + 104) = v43;

    v45 = *(void **)(a1 + 88);
    *(void *)(a1 + 8_Block_object_dispose(va, 8) = 0LL;

    goto LABEL_31;
  }

      if (v11 < v28)
      {
        uint64_t v32 = v14;

        v10 = v32;
        v11 = v28;
      }

      v12 = (unint64_t *)MEMORY[0x1895FD590];
      ++v13;
    }

    while (v9 != v13);
    uint64_t v44 = [obj countByEnumeratingWithState:&v67 objects:v89 count:16];
    v9 = v44;
  }

  while (v44);
LABEL_47:
}

  return v37;
}

LABEL_54:
      v72 = *__error();
      _sa_logt();
      v73 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
      {
        v74 = *(unsigned int *)((char *)a3 + 18);
        *(_DWORD *)buf = 134218496;
        *(void *)v152 = a4;
        *(_WORD *)&v152[8] = 1024;
        *(_DWORD *)&v152[10] = v74;
        *(_WORD *)&v152[14] = 2048;
        *(void *)&v152[16] = 8 * v74 + 31;
        _os_log_error_impl( &dword_186C92000,  v73,  OS_LOG_TYPE_ERROR,  "bufferLength %lu < serialized SAFrame struct plus %u children %lu",  buf,  0x1Cu);
      }

      *__error() = v72;
      _SASetCrashLogMessage( 1415,  "bufferLength %lu < serialized SAFrame struct plus %u children %lu",  v75,  v76,  v77,  v78,  v79,  v80,  a4);
      _os_crash();
      __break(1u);
LABEL_57:
      v81 = *__error();
      _sa_logt();
      v82 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v82, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_186C92000, v82, OS_LOG_TYPE_ERROR, "bad parent frame buffer", buf, 2u);
      }

      *__error() = v81;
      _SASetCrashLogMessage(1423, "bad parent frame buffer", v83, v84, v85, v86, v87, v88, v138);
      _os_crash();
      __break(1u);
LABEL_60:
      v89 = *__error();
      _sa_logt();
      v90 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        *(void *)v152 = a3;
        *(_WORD *)&v152[8] = 2048;
        *(void *)&v152[10] = 31LL;
        _os_log_error_impl( &dword_186C92000,  v90,  OS_LOG_TYPE_ERROR,  "bufferLength %lu < serialized SAFrame struct %lu",  buf,  0x16u);
      }

      *__error() = v89;
      _SASetCrashLogMessage( 1468,  "bufferLength %lu < serialized SAFrame struct %lu",  v91,  v92,  v93,  v94,  v95,  v96,  (char)a3);
      _os_crash();
      __break(1u);
LABEL_63:
      v97 = *__error();
      _sa_logt();
      v98 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
      {
        v99 = *(unsigned int *)(a4 + 18);
        *(_DWORD *)buf = 134218496;
        *(void *)v152 = a3;
        *(_WORD *)&v152[8] = 1024;
        *(_DWORD *)&v152[10] = v99;
        *(_WORD *)&v152[14] = 2048;
        *(void *)&v152[16] = 8 * v99 + 31;
        _os_log_error_impl( &dword_186C92000,  v98,  OS_LOG_TYPE_ERROR,  "bufferLength %lu < serialized SAFrame struct plus %u children %lu",  buf,  0x1Cu);
      }

      *__error() = v97;
      _SASetCrashLogMessage( 1469,  "bufferLength %lu < serialized SAFrame struct plus %u children %lu",  v100,  v101,  v102,  v103,  v104,  v105,  (char)a3);
      _os_crash();
      __break(1u);
LABEL_66:
      v106 = *__error();
      _sa_logt();
      v107 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v107, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_186C92000, v107, OS_LOG_TYPE_ERROR, "empty child frames array", buf, 2u);
      }

      *__error() = v106;
      _SASetCrashLogMessage(1516, "empty child frames array", v108, v109, v110, v111, v112, v113, v138);
      _os_crash();
      __break(1u);
LABEL_69:
      v114 = *__error();
      _sa_logt();
      v115 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v115, OS_LOG_TYPE_ERROR))
      {
        v116 = *(_DWORD *)(a4 + 18);
        *(_DWORD *)buf = 134218240;
        *(void *)v152 = a3;
        *(_WORD *)&v152[8] = 1024;
        *(_DWORD *)&v152[10] = v116;
        _os_log_error_impl( &dword_186C92000,  v115,  OS_LOG_TYPE_ERROR,  "bufferLength %lu < serialized SAFrame struct v4 with %u children",  buf,  0x12u);
      }

      *__error() = v114;
      _SASetCrashLogMessage( 1483,  "bufferLength %lu < serialized SAFrame struct v4 with %u children",  v117,  v118,  v119,  v120,  v121,  v122,  (char)a3);
      _os_crash();
      __break(1u);
LABEL_72:
      v123 = *__error();
      _sa_logt();
      v124 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v125 = self;
      if (os_log_type_enabled(v124, OS_LOG_TYPE_ERROR))
      {
        v126 = (*(unsigned __int8 *)(a4 + 30) >> 3) & 1;
        v127 = [(id)a3 debugDescription];
        v128 = [v127 UTF8String];
        ClassName = object_getClassName(v125);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)v152 = v126;
        *(_WORD *)&v152[4] = 2080;
        *(void *)&v152[6] = v128;
        *(_WORD *)&v152[14] = 2080;
        *(void *)&v152[16] = ClassName;
        _os_log_error_impl( &dword_186C92000,  v124,  OS_LOG_TYPE_ERROR,  "Frame exclave:%d has exclave %s, is class %s, not SAExclaveFrame",  buf,  0x1Cu);
      }

      *__error() = v123;
      v130 = (*(unsigned __int8 *)(a4 + 30) >> 3) & 1;
      v131 = [(id)a3 debugDescription];
      [v131 UTF8String];
      object_getClassName(v125);
      _SASetCrashLogMessage( 1487,  "Frame exclave:%d has exclave %s, is class %s, not SAExclaveFrame",  v132,  v133,  v134,  v135,  v136,  v137,  v130);

      _os_crash();
      __break(1u);
    }

                if ((v1 & 0x200) != 0) {
                  goto LABEL_107;
                }
                goto LABEL_55;
              }

LABEL_55:
      goto LABEL_56;
    }

    uint64_t v16 = &unk_189F82768;
  }

  else
  {
    uint64_t v16 = &unk_189F82780;
  }

LABEL_13:
    +[SAException exceptionWithName:reason:userInfo:]( &OBJC_CLASS___SAException,  "exceptionWithName:reason:userInfo:",  @"Decoding failure",  @"Unknown SAFrame version",  0LL);
    uint64_t v19 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v19);
LABEL_14:
    if (v6 != -1LL)
    {
      uint64_t v20 = (void *)objc_opt_class();
      _SASerializableInstanceForIndexUsingDeserializationDictionaryAndDataBufferDictionaryAndClass( v6,  v11,  (void *)v12,  v20,  0);
      int v21 = (SAFrame *)objc_claimAutoreleasedReturnValue();
      double v6 = (unint64_t)v143;
      if (v21)
      {
LABEL_20:
        int v29 = -[SAFrameDeserializationHelper initWithFrame:buffer:bufferLength:]( objc_alloc(&OBJC_CLASS___SAFrameDeserializationHelper),  "initWithFrame:buffer:bufferLength:",  v21,  a3,  a4);
        v30 = objc_alloc(&OBJC_CLASS___SAFrameSiblingsDeserializationHelper);
        v140 = v29;
        v150 = v29;
        [MEMORY[0x189603F18] arrayWithObjects:&v150 count:1];
        uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue();
        uint64_t v32 = -[SAFrameSiblingsDeserializationHelper initWithFrameHelpers:](v30, "initWithFrameHelpers:", v31);

        v138 = 0;
        v139 = (void *)v32;
        uint64_t v33 = (void *)[objc_alloc(MEMORY[0x189603FA8]) initWithObjects:v32];
        if (![v33 count]) {
          goto LABEL_46;
        }
        v141 = v33;
        v142 = v21;
        v147 = (void *)v12;
        v148 = v11;
        while (1)
        {
          uint64_t v34 = (void *)MEMORY[0x186E47ACC]();
          [v33 lastObject];
          uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue();
          [v35 frameHelpers];
          uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue();
          time_t v37 = [v35 index];
          if (v37 >= [v36 count])
          {
            [v33 removeLastObject];
            goto LABEL_45;
          }

          v146 = v35;
          objc_msgSend(v36, "objectAtIndexedSubscript:", objc_msgSend(v35, "index"));
          a3 = (const void *)objc_claimAutoreleasedReturnValue();
          [(id)a3 frame];
          self = (SAFrame *)objc_claimAutoreleasedReturnValue();
          a4 = [(id)a3 buffer];
          v145 = (void *)a3;
          tm v38 = (const void *)[(id)a3 bufferLength];
          a3 = v38;
          v144 = v36;
          v149 = self;
          self = *(SAFrame **)(a4 + 10);
          v39 = (void *)objc_opt_class();
          v40 =  _SASerializableInstanceForIndexUsingDeserializationDictionaryAndDataBufferDictionaryAndClass( (unint64_t)self,  v11,  (void *)v12,  v39,  0);
          v41 = (unint64_t *)(a4 + 31);
          v42 = *(unsigned int *)(a4 + 18);
          if (*(unsigned __int8 *)(a4 + 1) >= 4u)
          {
            v43 = &v41[v42];
            uint64_t v44 = *v43;
            v45 = (void *)objc_opt_class();
            _SASerializableInstanceForIndexUsingDeserializationDictionaryAndDataBufferDictionaryAndClass( v44,  v148,  v147,  v45,  0);
            a3 = (const void *)objc_claimAutoreleasedReturnValue();
            if (a3)
            {
              objc_opt_class();
              self = v149;
              if ((objc_opt_isKindOfClass() & 1) == 0) {
                goto LABEL_72;
              }
              if (v149) {
                objc_storeWeak((id *)&v149[1].super.isa, (id)a3);
              }
            }
          }

          uint64_t v35 = v146;
          objc_msgSend(v146, "setIndex:", objc_msgSend(v146, "index") + 1);
          if (!(_DWORD)v42)
          {
            v54 = v149;
            -[SAFrame setChildFrameOrFrames:]((uint64_t)v149, 0LL);
            v12 = (unint64_t)v147;
            uint64_t v36 = v144;
            goto LABEL_44;
          }

          a3 = (const void *)[objc_alloc(MEMORY[0x189603FE0]) initWithCapacity:v42];
          a4 = [objc_alloc(MEMORY[0x189603FA8]) initWithCapacity:v42];
          do
          {
            v46 = *v41++;
            v47 = (void *)objc_opt_class();
            self = (SAFrame *)SASerializableBufferForIndexUsingDeserializationDictionaryAndDataBufferDictionaryAndClass( v46,  v148,  v147,  v47);
            v49 = v48;
            v50 = (void *)objc_opt_class();
            v51 = _SASerializableInstanceForIndexUsingDeserializationDictionaryAndDataBufferDictionaryAndClass( v46,  v148,  v147,  v50,  0);
            if (!v51)
            {
              v56 = *__error();
              _sa_logt();
              v57 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)buf = 0;
                _os_log_error_impl(&dword_186C92000, v57, OS_LOG_TYPE_ERROR, "can't decode child", buf, 2u);
              }

              *__error() = v56;
              _SASetCrashLogMessage(1508, "can't decode child", v58, v59, v60, v61, v62, v63, 0);
              _os_crash();
              __break(1u);
LABEL_51:
              v64 = *__error();
              _sa_logt();
              v65 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                *(void *)v152 = a4;
                *(_WORD *)&v152[8] = 2048;
                *(void *)&v152[10] = 31LL;
                _os_log_error_impl( &dword_186C92000,  v65,  OS_LOG_TYPE_ERROR,  "bufferLength %lu < serialized SAFrame struct %lu",  buf,  0x16u);
              }

              *__error() = v64;
              _SASetCrashLogMessage( 1414,  "bufferLength %lu < serialized SAFrame struct %lu",  v66,  v67,  v68,  v69,  v70,  v71,  a4);
              _os_crash();
              __break(1u);
              goto LABEL_54;
            }

            v52 = (void *)v51;
            *(void *)(v51 + 32) = v149;
            self = -[SAFrameDeserializationHelper initWithFrame:buffer:bufferLength:]( objc_alloc(&OBJC_CLASS___SAFrameDeserializationHelper),  "initWithFrame:buffer:bufferLength:",  v51,  self,  v49);
            [(id)a3 addObject:v52];
            [(id)a4 addObject:self];

            --v42;
          }

          while (v42);
          if (![(id)a3 count]) {
            goto LABEL_66;
          }
          if ([(id)a3 count] == 1)
          {
            [(id)a3 anyObject];
            v53 = (void *)objc_claimAutoreleasedReturnValue();
            v54 = v149;
            -[SAFrame setChildFrameOrFrames:]((uint64_t)v149, v53);
          }

          else
          {
            v54 = v149;
            -[SAFrame setChildFrameOrFrames:]((uint64_t)v149, (void *)a3);
          }

          int v21 = v142;
          double v6 = (unint64_t)v143;
          uint64_t v33 = v141;
          v12 = (unint64_t)v147;
          uint64_t v36 = v144;
          v55 = -[SAFrameSiblingsDeserializationHelper initWithFrameHelpers:]( objc_alloc(&OBJC_CLASS___SAFrameSiblingsDeserializationHelper),  "initWithFrameHelpers:",  a4);
          [v141 addObject:v55];

          uint64_t v35 = v146;
LABEL_44:

          v11 = v148;
LABEL_45:

          objc_autoreleasePoolPop(v34);
          if (![v33 count])
          {
LABEL_46:
            *(_BYTE *)double v6 = 0;

            goto LABEL_47;
          }
        }
      }

      v12 = *__error();
      _sa_logt();
      v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_186C92000, v22, OS_LOG_TYPE_ERROR, "can't decode root frame", buf, 2u);
      }

      *__error() = v12;
      _SASetCrashLogMessage(1437, "can't decode root frame", v23, v24, v25, v26, v27, v28, v138);
      _os_crash();
      __break(1u);
    }

    int v21 = self;
    double v6 = (unint64_t)v143;
    goto LABEL_20;
  }

    result = -[SAMSTypeStats addTask:thread:size:errors:](v11[5], a3, a4, a5, a6);
    v12 = *(_BYTE *)(a2 + 24);
    if ((v12 & 0x20) == 0)
    {
LABEL_8:
      if ((v12 & 0x3B) == 0) {
        return -[SAMSTypeStats addTask:thread:size:errors:](v11[7], a3, a4, a5, a6);
      }
      return result;
    }

        objc_msgSend(MEMORY[0x189607968], "numberWithUnsignedLongLong:", objc_msgSend(v11, "slide"));
        uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue();
        uint64_t v18 = [v5 containsObject:v17];

        if (v18)
        {
          if (v11) {
            v11[24] = 1;
          }
          [v39 removeObject:v11];
        }

        else
        {
          objc_msgSend(MEMORY[0x189607968], "numberWithUnsignedLongLong:", objc_msgSend(v11, "slide"));
          uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue();
          [v5 addObject:v19];
        }
      }

      uint64_t v8 = [v6 countByEnumeratingWithState:&v40 objects:v54 count:16];
    }

    while (v8);
  }
}
  }

  return v3;
}

    *__error() = v12;
    goto LABEL_14;
  }

  if (*(void *)a3 != 2271560481LL)
  {
    v12 = *__error();
    _sa_logt();
    int v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = 0;
      v14 = "WARNING: Bad magic value";
      uint64_t v15 = (uint8_t *)&v16;
      goto LABEL_12;
    }

    goto LABEL_13;
  }

  -[SABinaryLoadInfo populateReferencesUsingPAStyleSerializedImageInfo:andDeserializationDictionary:andDataBufferDictionary:]( (uint64_t)self->_binaryLoadInfo,  (uint64_t)a3,  v9,  v10);
LABEL_14:
}

    *(_BYTE *)(v20 + 15) |= 0x80u;
    if ((a3->tds_ss_flags & 0x800) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }

    unint64_t v5 = v20;
  }
}

  return v14;
}
}

    if ([v9 count])
    {
      uint64_t v18 = 0LL;
      do
      {
        uint64_t v19 = *(void **)(a1 + 32);
        [v9 objectAtIndexedSubscript:v18];
        uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue();
        [v19 objectForKeyedSubscript:v20];
        int v21 = (_BYTE *)objc_claimAutoreleasedReturnValue();

        if (v21)
        {
          v21[10] = 1;
          if (v11 != 0x7FFFFFFFFFFFFFFFLL)
          {
            v21[9] = 1;
            if (v18 >= v11) {
              v21[8] = 1;
            }
          }
        }

        ++v18;
      }

      while (v18 < [v9 count]);
    }

    size_t v4 = v22;
  }
}

    if (v21)
    {
      uint64_t v34 = &v22[v20];
      uint64_t v35 = [objc_alloc(MEMORY[0x189603FE0]) initWithCapacity:v21];
      uint64_t v36 = (void *)a1[35];
      a1[35] = v35;

      while (1)
      {
        time_t v37 = *v34++;
        tm v38 = (void *)objc_opt_class();
        _SASerializableInstanceForIndexUsingDeserializationDictionaryAndDataBufferDictionaryAndClass( v37,  v52,  v7,  v38,  0);
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v39) {
          break;
        }
        v41 = v39;
        v42 = (void *)a1[35];
        v43 = objc_getProperty(v39, v40, 8LL, 1);
        [v42 addObject:v43];

        if (!--v21) {
          goto LABEL_17;
        }
      }

      i = @"Failed to deserialize root frame";
      goto LABEL_21;
    }

  [v5 objectForKeyedSubscript:@"build_number"];
  v14 = (__CFString *)objc_claimAutoreleasedReturnValue();
  uint64_t v15 = v1[2];
  if (!v15 || v14 && ([v15 isEqualToString:v14] & 1) != 0)
  {
    v37[0] = MEMORY[0x1895F87A8];
    v37[1] = 3221225472LL;
    v37[2] = __27__SABinaryLocator_mappings__block_invoke;
    v37[3] = &unk_189F61B20;
    v37[4] = v1;
    [v5 enumerateKeysAndObjectsUsingBlock:v37];
    v3 = v1[1];
  }

  else
  {
    uint64_t v16 = (const char *)[@"/var/db/spindump/UUIDToBinaryLocations" UTF8String];
    if (!v16)
    {
      uint64_t v28 = *__error();
      _sa_logt();
      int v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_186C92000, v29, OS_LOG_TYPE_ERROR, "No cstring path for nsstring path", buf, 2u);
      }

      *__error() = v28;
      _SASetCrashLogMessage(110, "No cstring path for nsstring path", v30, v31, v32, v33, v34, v35, v36);
      _os_crash();
      __break(1u);
    }

    if (unlink(v16))
    {
      uint64_t v17 = *__error();
      _sa_logt();
      uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        uint64_t v25 = *__error();
        *(_DWORD *)buf = 138412546;
        v39 = @"/var/db/spindump/UUIDToBinaryLocations";
        v40 = 1024;
        LODWORD(v41) = v25;
        _os_log_error_impl( &dword_186C92000,  v18,  OS_LOG_TYPE_ERROR,  "Unable to unlink old binary locator file %@: %{errno}d",  buf,  0x12u);
      }

      *__error() = v17;
    }

    else
    {
      uint64_t v23 = *__error();
      _sa_logt();
      uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v26 = [v5 count];
        uint64_t v27 = @"unknown";
        if (v14) {
          uint64_t v27 = v14;
        }
        *(_DWORD *)buf = 138412546;
        v39 = v27;
        v40 = 2048;
        v41 = v26;
        _os_log_debug_impl( &dword_186C92000,  v24,  OS_LOG_TYPE_DEBUG,  "Deleted old binary locator file from old build %@ with %ld items",  buf,  0x16u);
      }

      *__error() = v23;
    }

    v3 = v1[1];
  }

LABEL_3:
  objc_sync_exit(v1);

  return v3;
}

LABEL_47:
}

    uint64_t v34 = *(void *)(a1 + 40);
    if (v34) {
      *(void *)(v34 + 32) = v5;
    }
  }

      v56 = *(void *)(*(void *)(*((void *)a1 + 5) + 8LL) + 40LL);
      if (v56)
      {
        if ((*(_BYTE *)(v56 + 24) & 1) != 0)
        {
          v57 = *__error();
          _sa_logt();
          v58 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
          {
            v59 = [*(id *)(*(void *)(*((void *)a1 + 5) + 8) + 40) slide];
            v60 = [*(id *)(*(void *)(*((void *)a1 + 5) + 8) + 40) slidBaseAddress];
            [*(id *)(*(void *)(*((void *)a1 + 5) + 8) + 40) uuid];
            v11 = (void *)objc_claimAutoreleasedReturnValue();
            v61 = [v11 UUIDString];
            v62 = [v61 UTF8String];
            *(_DWORD *)buf = 134218498;
            *(void *)(v5 + 4) = v59;
            v89 = 2048;
            *(void *)(v5 + 14) = v60;
            v91 = 2080;
            v92 = v62;
            _os_log_error_impl( &dword_186C92000,  v58,  OS_LOG_TYPE_ERROR,  "No matching shared cache for defunct 0x%llx 0x%llx %s",  buf,  0x20u);
          }

          *__error() = v57;
          v3 = (id)[*(id *)(*(void *)(*((void *)a1 + 5) + 8) + 40) slide];
          double v6 = (id)[*(id *)(*(void *)(*((void *)a1 + 5) + 8) + 40) slidBaseAddress];
          [*(id *)(*(void *)(*((void *)a1 + 5) + 8) + 40) uuid];
          a1 = (id)objc_claimAutoreleasedReturnValue();
          uint64_t v16 = [a1 UUIDString];
          [v16 UTF8String];
          _SASetCrashLogMessage( 3666,  "No matching shared cache for defunct 0x%llx 0x%llx %s",  v63,  v64,  v65,  v66,  v67,  v68,  (char)v3);

          _os_crash();
          __break(1u);
LABEL_52:
          v69 = [v16 slidBaseAddress];
          v70 = (uint64_t)v11 + [v16 slide] - v69;
          v71 = 8LL;
LABEL_54:
          *(void *)(*(void *)(*(void *)(*((void *)a1 + 5) + 8LL) + 40LL) + v71) = v70;
          goto LABEL_55;
        }
      }
    }
  }

id SAGetStackshotDataFromTailspinStackshotChunk(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  v2 = v1;
  if (v1 && (unint64_t)[v1 length] >= 0x10)
  {
    id v5 = v2;
    double v6 = (void *)[v5 bytes];
    unint64_t v7 = *v6 + 16LL;
    if (v7 <= [v5 length])
    {
      objc_msgSend(v5, "subdataWithRange:", 16, *v6);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
    }

    else
    {
      int v8 = *__error();
      _sa_logt();
      v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = *v6;
        int v11 = 134218496;
        uint64_t v12 = v10;
        __int16 v13 = 2048;
        uint64_t v14 = 16LL;
        __int16 v15 = 2048;
        uint64_t v16 = [v5 length];
        _os_log_impl( &dword_186C92000,  v9,  OS_LOG_TYPE_DEFAULT,  "WARNING: Malformed tailspin stackshot chunk: stackshot data is %llu bytes (+ %lu header), but chunk is only %lu bytes",  (uint8_t *)&v11,  0x20u);
      }

      v3 = 0LL;
      *__error() = v8;
    }
  }

  else
  {
    v3 = 0LL;
  }

  return v3;
}

id _sa_logt()
{
  if (qword_18C4B12F0 != -1) {
    dispatch_once(&qword_18C4B12F0, &__block_literal_global_0);
  }
  return (id)qword_18C4B12E8;
}

void ___sa_logt_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.sampleanalysis", "logging");
  id v1 = (void *)qword_18C4B12E8;
  qword_18C4B12E8 = (uint64_t)v0;
}

CFTypeRef SACFBundleCopyStringForKey(__CFBundle *a1, const __CFString *a2)
{
  CFTypeRef result = CFBundleGetValueForInfoDictionaryKey(a1, a2);
  if (result)
  {
    id v4 = (id)result;
    CFTypeID v3 = CFGetTypeID(result);
    if (v3 == CFStringGetTypeID()) {
      return v4;
    }
    else {
      return (CFTypeRef)[objc_alloc(NSString) initWithFormat:@"%@", v4];
    }
  }

  return result;
}

void *SANSDictionaryCopyStringForKey(void *a1, uint64_t a2)
{
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v2) {
    return v2;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0) {
    return v2;
  }
  uint64_t v4 = [objc_alloc(NSString) initWithFormat:@"%@", v2];

  return (void *)v4;
}

double ReduceToSignificantDigits(int a1, unsigned int *a2, double a3)
{
  double v4 = a3;
  BOOL v5 = a3 < 0.0;
  if (a3 == 0.0)
  {
    if (a2) {
      *a2 = 0;
    }
  }

  else
  {
    double v7 = -a3;
    if (!v5) {
      double v7 = v4;
    }
    unsigned int v8 = vcvtpd_s64_f64(log10(v7));
    if (a2) {
      *a2 = v8;
    }
    double v9 = __exp10((double)(int)(a1 - v8));
    return (double)(uint64_t)round(v9 * v4) / v9;
  }

  return v4;
}

id uuidForBytes(uint64_t a1)
{
  return (id)[objc_alloc(MEMORY[0x189607AB8]) initWithUUIDBytes:a1];
}

id uuidForString(void *a1)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = objc_alloc(NSString);
  objc_msgSend(v1, "substringWithRange:", 0, 8);
  CFTypeID v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "substringWithRange:", 8, 4);
  double v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "substringWithRange:", 12, 4);
  BOOL v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "substringWithRange:", 16, 4);
  double v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "substringWithRange:", 20, 12);
  double v7 = (void *)objc_claimAutoreleasedReturnValue();
  unsigned int v8 = (void *)[v2 initWithFormat:@"%@-%@-%@-%@-%@", v3, v4, v5, v6, v7];

  id v1 = v8;
  if (uuid_parse((const char *)[v1 UTF8String], uu))
  {
    int v9 = *__error();
    _sa_logt();
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v14 = v1;
      _os_log_error_impl(&dword_186C92000, v10, OS_LOG_TYPE_ERROR, "Unable to parse uuid %@", buf, 0xCu);
    }

    int v11 = 0LL;
    *__error() = v9;
  }

  else
  {
LABEL_6:
    int v11 = (void *)[objc_alloc(MEMORY[0x189607AB8]) initWithUUIDBytes:uu];
  }

  return v11;
}

uint64_t is_apple_internal_setting()
{
  if (qword_18C4B12F8 != -1) {
    dispatch_once(&qword_18C4B12F8, &__block_literal_global_9);
  }
  return _MergedGlobals_2;
}

uint64_t __is_apple_internal_setting_block_invoke()
{
  uint64_t result = os_variant_has_internal_diagnostics();
  _MergedGlobals_2 = result;
  return result;
}

uint64_t _SASetCrashLogMessage( int a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t result = snprintf(_SASetCrashLogMessage_crash_string, 0x400uLL, "%d ", a1);
  if ((result - 1) <= 0x3FE) {
    uint64_t result = vsnprintf( &_SASetCrashLogMessage_crash_string[result],  1024LL - result,  a2,  &a9);
  }
  qword_18C6AAD80 = (uint64_t)_SASetCrashLogMessage_crash_string;
  return result;
}

LABEL_7:
    uint64_t result = -[SAMSTypeStats addTask:thread:size:errors:](v11[6], a3, a4, a5, a6);
    uint64_t v12 = *(_BYTE *)(a2 + 24);
    goto LABEL_8;
  }

  return result;
}
}

  return v1;
}

  __int16 v15 = *__error();
  _sa_logt();
  uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    -[SASegment nonInlineSymbolAtOffsetIntoSegment:](*(void **)(a1 + 32), a4);
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue();
    [v18 debugDescription];
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue();
    [*(id *)(a1 + 32) debugDescription];
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412546;
    v22 = v19;
    uint64_t v23 = 2112;
    uint64_t v24 = v20;
    _os_log_error_impl( &dword_186C92000,  v16,  OS_LOG_TYPE_ERROR,  "No symbol name for inline symbol (after non-inline symbol %@ in %@)",  buf,  0x16u);
  }

  uint64_t v12 = 0LL;
  id v14 = 0LL;
  uint64_t v10 = 0LL;
  *__error() = v15;
LABEL_13:

  return v10;
}

      *(_BYTE *)(v20 + 19) |= 0x40u;
      goto LABEL_8;
    }

    return (uint64_t)a1;
  }

  uint64_t v16 = *__error();
  _sa_logt();
  uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl( &dword_186C92000,  v17,  OS_LOG_TYPE_ERROR,  "Neither thread nor dispatchQueue nor swiftTask provided",  buf,  2u);
  }

  *__error() = v16;
  _SASetCrashLogMessage( 394,  "Neither thread nor dispatchQueue nor swiftTask provided",  v18,  v19,  v20,  v21,  v22,  v23,  (char)v24.receiver);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}
}

  uint64_t v10 = -1LL;
LABEL_17:

  return v10;
}

    uint64_t v10 = -1LL;
    goto LABEL_8;
  }

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0) {
      goto LABEL_4;
    }
    CFTypeID v3 = *__error();
    _sa_logt();
    double v6 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled((os_log_t)v6, OS_LOG_TYPE_ERROR))
    {
      v30 = (objc_class *)objc_opt_class();
      uint64_t v12 = NSStringFromClass(v30);
      *(_DWORD *)buf = 136315138;
      v93 = [v12 UTF8String];
      _os_log_error_impl(&dword_186C92000, (os_log_t)v6, OS_LOG_TYPE_ERROR, "second is a %s", buf, 0xCu);
    }

    *__error() = v3;
    uint64_t v31 = (objc_class *)objc_opt_class();
    double v7 = NSStringFromClass(v31);
    uint64_t v32 = [v7 UTF8String];
    _SASetCrashLogMessage(11197, "second is a %s", v33, v34, v35, v36, v37, v38, v32);

    _os_crash();
    __break(1u);
    goto LABEL_38;
  }

  if (v6) {
    __int16 v15 = objc_getProperty(v6, v14, 40LL, 1);
  }
  else {
    __int16 v15 = 0LL;
  }
  uint64_t v16 = v15;
  uint64_t v17 = [v16 count];

  if (v7) {
    uint64_t v19 = objc_getProperty(v7, v18, 40LL, 1);
  }
  else {
    uint64_t v19 = 0LL;
  }
  uint64_t v20 = v19;
  int v21 = [v20 count];

  if (v17 < v21) {
    goto LABEL_7;
  }
  if (v17 > v21) {
    goto LABEL_4;
  }
  [v6 frame];
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v23 = [v22 address];

  [v7 frame];
  uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v25 = [v24 address];

  if (v23 <= v25) {
    uint64_t v26 = 0LL;
  }
  else {
    uint64_t v26 = -1LL;
  }
  if (v23 < v25) {
    uint64_t v10 = 1LL;
  }
  else {
    uint64_t v10 = v26;
  }
LABEL_8:

  return v10;
}

  *a4 = 1;
LABEL_381:
  objc_autoreleasePoolPop(v9);
}
}
}

void sub_186C9C07C(_Unwind_Exception *a1)
{
}

LABEL_43:
          }

          v83 = [v81 countByEnumeratingWithState:&v84 objects:v92 count:16];
        }

        while (v83);
      }

      __int16 v15 = v73 + 1;
    }

    while (v73 + 1 != v72);
    v72 = [obj countByEnumeratingWithState:&v88 objects:v93 count:16];
  }

  while (v72);
  __int16 v13 = obj;

  if (v77)
  {
    v39 = (SATask *)v77;
    v40 = v39;
    v42 = v75;
    v41 = v76;
    goto LABEL_55;
  }

  if (v75)
  {
    v42 = v75;
    v39 = 0LL;
    v40 = v42;
    v41 = v76;
LABEL_55:
    v45 = v78;
    v43 = v79;
LABEL_56:
    uint64_t v44 = v74;
  }

  else
  {
    if (v78)
    {
      v45 = v78;
      v42 = 0LL;
      v39 = 0LL;
      v40 = v45;
      v41 = v76;
      v43 = v79;
      goto LABEL_56;
    }

    if (v74)
    {
      uint64_t v44 = v74;
      v45 = 0LL;
      v42 = 0LL;
      v39 = 0LL;
      v40 = v44;
      v41 = v76;
      v43 = v79;
    }

    else if (v79)
    {
      v43 = v79;
      uint64_t v44 = 0LL;
      v45 = 0LL;
      v42 = 0LL;
      v39 = 0LL;
      v40 = v43;
      v41 = v76;
    }

    else
    {
      if (v76)
      {
        v41 = v76;
        v43 = 0LL;
        uint64_t v44 = 0LL;
        v45 = 0LL;
        v42 = 0LL;
        v39 = 0LL;
        v40 = v41;
      }

      else
      {
        v41 = 0LL;
        v43 = 0LL;
        uint64_t v44 = 0LL;
        v45 = 0LL;
        v42 = 0LL;
        v39 = 0LL;
        v40 = 0LL;
      }

      __int16 v13 = obj;
    }
  }
}
}

LABEL_44:
  objc_autoreleasePoolPop(v8);

  return v9;
}

LABEL_57:
  self = v80;
  v50 = v69;
  if (!v40)
  {
    int v11 = 0;
    goto LABEL_74;
  }

                      if ((v1 & 0x1000) != 0) {
                        goto LABEL_119;
                      }
                      goto LABEL_58;
                    }

    objc_msgSend(*(id *)(v43 + 8), "printWithFormat:", @"%-*sYes\n", 18, "Share With Devs: ");
    goto LABEL_58;
  }

  if (*(_BYTE *)(v43 + 152))
  {
    v49 = (id *)(v17 + 160);
    if (v1208) {
      goto LABEL_55;
    }
    goto LABEL_57;
  }

  v49 = (id *)(v17 + 160);
  if ((v1208 & 1) == 0) {
    goto LABEL_58;
  }
LABEL_59:
  if ([*v49 dataSource])
  {
    v50 = [*v49 dataSource];
    v51 = v50 & 1;
    v52 = v1366;
    if ((v50 & 1) != 0)
    {
      strcpy(v1366, "Stackshots");
      v52 = &v1366[10];
    }

    if (([*v49 dataSource] & 2) != 0)
    {
      if ((v50 & 1) != 0) {
        v52 += snprintf(v52, (char *)&buf - v52, ", ");
      }
      v52 += snprintf(v52, (char *)&buf - v52, "KPerf Lightweight PET");
      v51 = 1;
    }

    if (([*v49 dataSource] & 4) != 0)
    {
      v53 = v1217;
      if ((v51 & 1) != 0) {
        v52 += snprintf(v52, (char *)&buf - v52, ", ");
      }
      v52 += snprintf(v52, (char *)&buf - v52, "Microstackshots");
      v51 = 1;
    }

    else
    {
      v53 = v1217;
    }

    if (([*v53 dataSource] & 8) != 0)
    {
      v54 = v1217;
      if ((v51 & 1) != 0) {
        v52 += snprintf(v52, (char *)&buf - v52, ", ");
      }
      v52 += snprintf(v52, (char *)&buf - v52, "KPerf non-PET");
      v51 = 1;
    }

    else
    {
      v54 = v1217;
    }

    v55 = [*v54 dataSource];
    v43 = v1256;
    if ((v55 & 0x10) != 0)
    {
      if ((v51 & 1) != 0) {
        v52 += snprintf(v52, (char *)&buf - v52, ", ");
      }
      snprintf(v52, (char *)&buf - v52, "Custom callstacks");
    }
  }

  else
  {
    strcpy(v1366, "Unknown");
  }

  v58 = *(void **)(v43 + 8);
  v57 = (__CFString *)(v43 + 8);
  v56 = v58;
  p_isa = &v57->isa;
  if (v1208)
  {
    SANSStringForCString(v1366);
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    SAJSONWriteDictionaryEntry(v56, @"dataSource", v59);
  }

  else
  {
    objc_msgSend(v56, "printWithFormat:", @"%-*s%s\n", 18, "Data Source: ", v1366);
    v1334 = 0u;
    v1333 = 0u;
    v1332 = 0u;
    v1331 = 0u;
    [*v1217 kernelCaches];
    obj = (id)objc_claimAutoreleasedReturnValue();
    v60 = [obj countByEnumeratingWithState:&v1331 objects:v1365 count:16];
    if (v60)
    {
      v61 = *(void *)v1332;
      v57 = @"%-*s0x%llx %@\n";
      do
      {
        for (i = 0LL; i != v60; ++i)
        {
          if (*(void *)v1332 != v61) {
            objc_enumerationMutation(obj);
          }
          v63 = *(void **)(*((void *)&v1331 + 1) + 8 * i);
          v64 = *p_isa;
          v65 = [v63 loadAddress];
          [v63 uuid];
          v66 = (void *)objc_claimAutoreleasedReturnValue();
          [v66 UUIDString];
          v67 = (void *)objc_claimAutoreleasedReturnValue();
          [v64 printWithFormat:@"%-*s0x%llx %@\n", 18, "Kernel Cache: ", v65, v67];
        }

        v60 = [obj countByEnumeratingWithState:&v1331 objects:v1365 count:16];
      }

      while (v60);
    }

    v1330 = 0u;
    v1329 = 0u;
    v1328 = 0u;
    v1327 = 0u;
    [*v1217 sharedCaches];
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    v68 = [v59 countByEnumeratingWithState:&v1327 objects:v1364 count:16];
    if (v68)
    {
      v69 = *(void *)v1328;
      v57 = @"%-*s%@\n";
      do
      {
        for (j = 0LL; j != v68; ++j)
        {
          if (*(void *)v1328 != v69) {
            objc_enumerationMutation(v59);
          }
          v71 = *p_isa;
          _shared_cache_display_string(*(void **)(*((void *)&v1327 + 1) + 8 * j));
          v72 = (void *)objc_claimAutoreleasedReturnValue();
          [v71 printWithFormat:@"%-*s%@\n", 18, "Shared Cache: ", v72];
        }

        v68 = [v59 countByEnumeratingWithState:&v1327 objects:v1364 count:16];
      }

      while (v68);
    }
  }

  [*v1217 reason];
  v73 = (void *)objc_claimAutoreleasedReturnValue();

  if (v73)
  {
    v74 = *p_isa;
    [*v1217 reason];
    v75 = (void *)objc_claimAutoreleasedReturnValue();
    v76 = v75;
    if (v1208)
    {
      SAJSONWriteDictionaryEntry(v74, @"reason", v75);

      goto LABEL_104;
    }

    SACopySanitizedString(v75, 1, 0xFFuLL);
    v57 = (__CFString *)objc_claimAutoreleasedReturnValue();
    [v74 printWithFormat:@"%-*s%@\n", 18, "Reason: ", v57];

    goto LABEL_103;
  }

  if ((v1208 & 1) == 0) {
LABEL_103:
  }
    [*p_isa appendString:@"\n"];
LABEL_104:
  if ([*v1217 targetHIDEventMachAbs])
  {
    v77 = *(void **)(v1256 + 112);
    if (v77)
    {
      [v77 hidEventTimestamp];
      v1173 = (void *)objc_claimAutoreleasedReturnValue();
      [*(id *)(v1256 + 112) steps];
      v78 = (void *)objc_claimAutoreleasedReturnValue();
      [v78 lastObject];
      v79 = (void *)objc_claimAutoreleasedReturnValue();
      v80 = [v79 timestamp];
    }

    else
    {
      v1173 = +[SATimestamp timestampWithMachAbsTime:machContTime:wallTime:machTimebase:]( SATimestamp,  "timestampWithMachAbsTime:machContTime:wallTime:machTimebase:",  [*v1217 targetHIDEventMachAbs],  0,  objc_msgSend(*v1217, "machTimebase"),  0.0);
      if ([*v1217 targetHIDEventEndMachAbs])
      {
        v92 = +[SATimestamp timestampWithMachAbsTime:machContTime:wallTime:machTimebase:]( SATimestamp,  "timestampWithMachAbsTime:machContTime:wallTime:machTimebase:",  [*v1217 targetHIDEventEndMachAbs],  0,  objc_msgSend(*v1217, "machTimebase"),  0.0);
        v81 = v1256;
        v82 = v1217;
        v80 = v92;
        goto LABEL_109;
      }

      v80 = 0LL;
    }
  }

  else
  {
    v80 = 0LL;
    v1173 = 0LL;
  }

  v81 = v1256;
  v82 = v1217;
LABEL_109:
  v1172 = (void *)v80;
  v83 = *(void **)(v81 + 128);
  if (v83) {
    goto LABEL_110;
  }
  v87 = 0.0;
  if (([*v82 targetProcessId] & 0x80000000) != 0)
  {
    v1179 = 0LL;
    goto LABEL_189;
  }

  v83 = *(void **)(v1256 + 128);
  if (v83)
  {
LABEL_110:
    v84 = v83;
  }

  else
  {
    [*v1217 targetProcess];
    v89 = (id)objc_claimAutoreleasedReturnValue();

    v84 = v89;
    if (!v89)
    {
      v90 = *__error();
      _sa_logt();
      v91 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v91, OS_LOG_TYPE_ERROR))
      {
        v1143 = [*v1217 targetProcessId];
        *(_DWORD *)v1379 = 67109120;
        *(_DWORD *)&v1379[4] = v1143;
        _os_log_error_impl(&dword_186C92000, v91, OS_LOG_TYPE_ERROR, "No task for target pid %d", v1379, 8u);
      }

      v1179 = 0LL;
      *__error() = v90;
      goto LABEL_189;
    }
  }

  self = v84;
  if (v1208)
  {
    v85 = *p_isa;
    objc_msgSend(MEMORY[0x189607968], "numberWithInt:", objc_msgSend(v84, "pid"));
    v86 = (void *)objc_claimAutoreleasedReturnValue();
    SAJSONWriteDictionaryEntry(v85, @"targetTaskPid", v86);

    v1179 = 0LL;
    v87 = 0.0;
    goto LABEL_189;
  }

  [v84 startTimestamp];
  v1176 = (void *)objc_claimAutoreleasedReturnValue();
  v88 = [self ppid];
  if ((_DWORD)v88 == -1 || (_DWORD)v88 == [self pid])
  {
    v1228 = 0LL;
  }

  else
  {
    v93 = -[SASampleStore lastTaskWithPid:onOrBeforeTimestamp:](*v1217, v88, v1176);
    if (v93)
    {
      v94 = v93;
    }

    else
    {
      -[SASampleStore firstTaskWithPid:](*v1217, v88);
      v94 = (id)objc_claimAutoreleasedReturnValue();

      if (!v94)
      {
        -[SASamplePrinter displayNameForPid:threadId:timestamp:]((void *)v1256, v88, 0LL, v1176);
        v1228 = (id)objc_claimAutoreleasedReturnValue();
        goto LABEL_132;
      }
    }

    -[SASamplePrinter displayNameForTask:]((void *)v1256, v94);
    v1228 = (id)objc_claimAutoreleasedReturnValue();
  }

LABEL_65:
  if (self->_targetProcess == v40)
  {
    int v11 = 1;
  }

  else
  {
    objc_storeStrong((id *)&self->_targetProcess, v40);
    self->_targetProcessId = -[SATask pid](v40, "pid");
    v53 = self;
    if (self->_targetThreadId)
    {
      v54 = -[SATask threads](self->_targetProcess, "threads");
      [MEMORY[0x189607968] numberWithUnsignedLongLong:v53->_targetThreadId];
      v55 = (void *)objc_claimAutoreleasedReturnValue();
      [v54 objectForKeyedSubscript:v55];
      v56 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v56) {
        v53->_targetThreadId = 0LL;
      }
    }

    if (v53->_targetDispatchQueueId)
    {
      v57 = -[SATask dispatchQueues](v53->_targetProcess, "dispatchQueues");
      [MEMORY[0x189607968] numberWithUnsignedLongLong:v53->_targetDispatchQueueId];
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      [v57 objectForKeyedSubscript:v58];
      v59 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v59) {
        v53->_targetDispatchQueueId = 0LL;
      }
    }

    int v11 = 1;
    v50 = v69;
  }

                                      if ((v1 & 0x100000) != 0) {
                                        goto LABEL_151;
                                      }
                                      goto LABEL_66;
                                    }

    if (((v37 | v25 & CSIsNull() ^ 1) & 1) == 0)
    {
      SymbolOwnerForExclaveUUID = CreateSymbolOwnerForExclaveUUID(v8[9]);
      int v29 = v43;
      uint64_t v44 = CSIsNull();
      v45 = (~(_BYTE)a2 & 5) != 0 ? 1 : v44;
      if ((v45 & 1) == 0)
      {
        v46 = (_BYTE *)CSSymbolOwnerGetPath();
        SAFilepathForCString(v46);
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        v48 = v47;
        if (v47 && [v47 isAbsolutePath])
        {
          v49 = +[SABinaryLocator sharedBinaryLocator](&OBJC_CLASS___SABinaryLocator, "sharedBinaryLocator");
          [MEMORY[0x189604030] fileURLWithPath:v48 isDirectory:0];
          v50 = (void *)objc_claimAutoreleasedReturnValue();
          -[SABinaryLocator addURL:ForUUID:](v49, v50, v8[9]);

          [v49 done];
        }
      }
    }

    if (((v39 | v123 & CSIsNull() ^ 1) & 1) == 0 && !kill(v122, 0))
    {
      if (v122)
      {
        v51 = *__error();
        _sa_logt();
        v52 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
        {
          [v8 debugDescription];
          v53 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)dest = 67109378;
          *(_DWORD *)&dest[4] = v122;
          *(_WORD *)&dest[8] = 2112;
          *(void *)&dest[10] = v53;
          _os_log_impl( &dword_186C92000,  v52,  OS_LOG_TYPE_DEFAULT,  "WARNING: Inspecting live process [%d] to get symbol owner for %@",  dest,  0x12u);
        }

        *__error() = v51;
      }

      SymbolicatorForLiveProcess = CreateSymbolicatorForLiveProcess(v122, a5);
      v56 = v55;
      if ((CSIsNull() & 1) == 0)
      {
        [v8[9] getUUIDBytes:buf];
        SymbolOwnerForExclaveUUID = CSSymbolicatorGetSymbolOwnerWithCFUUIDBytesAtTime();
        int v29 = v57;
        if ((CSIsNull() & 1) != 0)
        {
          v58 = *__error();
          _sa_logt();
          v59 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
          {
            [v8 debugDescription];
            v92 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)dest = 67109378;
            *(_DWORD *)&dest[4] = v122;
            *(_WORD *)&dest[8] = 2112;
            *(void *)&dest[10] = v92;
            _os_log_debug_impl( &dword_186C92000,  v59,  OS_LOG_TYPE_DEBUG,  "Process [%d] didn't have symbol owner for %@",  dest,  0x12u);
          }

          *__error() = v58;
        }

        else
        {
          v64 = (_BYTE *)CSSymbolOwnerGetPath();
          SAFilepathForCString(v64);
          v65 = (void *)objc_claimAutoreleasedReturnValue();
          if (v65)
          {
            v126 = 0;
            if (((*((_BYTE *)v8 + 66) != 0) & ~(_DWORD)v118) != 0
              || ((v66 = SAFilepathMatches(*v11, v65, &v126), v126) ? (v67 = v66) : (v67 = 0), v67 == 1))
            {
              objc_storeStrong(v8 + 10, v65);
              *((_BYTE *)v8 + 66) = 0;
            }

            v68 = objc_msgSend(v65, "isAbsolutePath", v118) ^ 1;
            if ((~(_DWORD)a2 & 5LL) != 0) {
              LOBYTE(v6_Block_object_dispose(va, 8) = 1;
            }
            if ((v68 & 1) == 0)
            {
              v69 = +[SABinaryLocator sharedBinaryLocator](&OBJC_CLASS___SABinaryLocator, "sharedBinaryLocator");
              v70 = (char)v118;
              if (!*((_BYTE *)v8 + 66)) {
                v70 = 1;
              }
              if ((v70 & 1) == 0)
              {
                v124 = *__error();
                _sa_logt();
                v71 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v71, OS_LOG_TYPE_INFO))
                {
                  v72 = v8[9];
                  v73 = v8[10];
                  *(_DWORD *)dest = 138543874;
                  *(void *)&dest[4] = v72;
                  *(_WORD *)&dest[12] = 2112;
                  *(void *)&dest[14] = v73;
                  *(_WORD *)&dest[22] = 2112;
                  v141 = (uint64_t (*)(uint64_t, uint64_t))v65;
                  _os_log_impl( &dword_186C92000,  v71,  OS_LOG_TYPE_INFO,  "%{public}@ moved: replacing %@ with %@",  dest,  0x20u);
                }

                *__error() = v124;
                -[SABinaryLocator removeURLForUUID:](v69, v8[9]);
              }

              [MEMORY[0x189604030] fileURLWithPath:v65 isDirectory:0];
              v74 = (void *)objc_claimAutoreleasedReturnValue();
              -[SABinaryLocator addURL:ForUUID:](v69, v74, v8[9]);

              [v69 done];
            }
          }

          CSRetain();
        }

        +[SABinary dataFillingQueue]();
        v75 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue();
        block[0] = MEMORY[0x1895F87A8];
        block[1] = 3221225472LL;
        block[2] = __89__SABinary_symbolOwnerWrapperWithOptions_pid_checkExclave_additionalCSSymbolicatorFlags___block_invoke_128;
        block[3] = &__block_descriptor_48_e5_v8__0l;
        block[4] = SymbolicatorForLiveProcess;
        block[5] = v56;
        dispatch_async(v75, block);
      }
    }

    if ((CSIsNull() & 1) != 0) {
      goto LABEL_122;
    }
    if (CSIsNull())
    {
      v94 = *__error();
      _sa_logt();
      v95 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v95, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)dest = 0;
        _os_log_error_impl(&dword_186C92000, v95, OS_LOG_TYPE_ERROR, "CSSymbolOwner is NULL", dest, 2u);
      }

      *__error() = v94;
      _SASetCrashLogMessage(1943, "CSSymbolOwner is NULL", v96, v97, v98, v99, v100, v101, (char)v118);
      _os_crash();
      __break(1u);
LABEL_137:
      v102 = *__error();
      _sa_logt();
      v103 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)dest = 0;
        _os_log_error_impl( &dword_186C92000,  v103,  OS_LOG_TYPE_ERROR,  "_symbolOwnerWrapper is nil after setting CSSymbolOwner",  dest,  2u);
      }

      *__error() = v102;
      _SASetCrashLogMessage( 2252,  "_symbolOwnerWrapper is nil after setting CSSymbolOwner",  v104,  v105,  v106,  v107,  v108,  v109,  (char)v118);
      _os_crash();
      __break(1u);
      goto LABEL_140;
    }

    v76 = v8;
    objc_sync_enter(v76);
    if (!v76[1]) {
      goto LABEL_114;
    }
    if ((CSSymbolOwnerIsDsym() & 1) != 0)
    {
      -[SACSSymbolOwnerWrapper symbolOwner](v76[1]);
      if ((CSSymbolOwnerIsDsym() & 1) == 0)
      {
LABEL_114:
        v77 = objc_alloc(&OBJC_CLASS___SACSSymbolOwnerWrapper);
        if (v77)
        {
          if (CSIsNull())
          {
LABEL_140:
            v110 = *__error();
            _sa_logt();
            v111 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v111, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)dest = 0;
              _os_log_error_impl(&dword_186C92000, v111, OS_LOG_TYPE_ERROR, "CSSymbolOwner is NULL", dest, 2u);
            }

            *__error() = v110;
            _SASetCrashLogMessage(47, "CSSymbolOwner is NULL", v112, v113, v114, v115, v116, v117, (char)v118);
            _os_crash();
            __break(1u);
            goto LABEL_143;
          }

          *(void *)dest = v77;
          *(void *)&dest[8] = &OBJC_CLASS___SACSSymbolOwnerWrapper;
          v77 = (SACSSymbolOwnerWrapper *)objc_msgSendSuper2((objc_super *)dest, sel_init);
          if (v77)
          {
            v77->_symbolOwner._opaque_1 = CSRetain();
            v77->_symbolOwner._opaque_2 = v78;
            v77->_isDiskLayout = v120;
          }
        }

        v79 = (void *)v76[1];
        v76[1] = (uint64_t)v77;

        -[SABinary addInfoFromSymbolOwner:fromDisk:includeExpensiveInfo:]( (uint64_t)v76,  SymbolOwnerForExclaveUUID,  v29,  v120,  0);
      }
    }

    else if (!*v11)
    {
      v80 = (_BYTE *)CSSymbolOwnerGetPath();
      v81 = SAFilepathForCString(v80);
      v82 = *v11;
      void *v11 = (void *)v81;
    }

    objc_sync_exit(v76);

    CSRelease();
    if (v76[1])
    {
LABEL_122:
      v83 = objc_msgSend(*v11, "isAbsolutePath", v118);
      if ((a2 & 1) != 0 && ((v83 ^ 1) & 1) == 0)
      {
        v84 = (unint64_t)v8[2];
        if ((v84 & 1) == 0)
        {
          v8[2] = (id)(v84 | 1);
          -[SABinary gatherBundleInfo](v8);
        }
      }

      goto LABEL_126;
    }

    goto LABEL_137;
  }

  uint64_t v23 = [*v11 isAbsolutePath];
  if ((a2 & 1) != 0 && ((v23 ^ 1) & 1) == 0)
  {
    uint64_t v24 = (unint64_t)v8[2];
    if ((v24 & 1) == 0)
    {
      v8[2] = (id)(v24 | 1);
      -[SABinary gatherBundleInfo](v8);
    }
  }

  if (v227[3] || *((_BYTE *)v223 + 24) && ([*((id *)a1 + 2) displayCallTreesWithZeroCount] & 1) != 0)
  {
    if ([*((id *)a1 + 2) omitStacksBelowSampleCount] < 1) {
      v59 = 0LL;
    }
    else {
      v59 = [*((id *)a1 + 2) omitStacksBelowSampleCount];
    }
    if ((int)[*((id *)a1 + 2) omitStacksBelowPercentOfTaskSamples] >= 1)
    {
      v60 = [*((id *)a1 + 2) omitStacksBelowPercentOfTaskSamples];
      if (v59 <= v60 * v97 / 0x64uLL) {
        v59 = v60 * v97 / 0x64uLL;
      }
    }

    if (!v59 || v227[3] > v59)
    {
LABEL_77:
      if ([v117 count] == 1)
      {
        [v117 firstObject];
        v61 = (void *)objc_claimAutoreleasedReturnValue();
        [MEMORY[0x189603FE8] null];
        v62 = (void *)objc_claimAutoreleasedReturnValue();
        v41 = v61 == v62;

        if ((_DWORD)v41) {
          [v117 removeAllObjects];
        }
      }

      if ([v116 count] == 1)
      {
        [v116 firstObject];
        v64 = (void *)objc_claimAutoreleasedReturnValue();
        [MEMORY[0x189603FE8] null];
        v65 = (void *)objc_claimAutoreleasedReturnValue();
        v41 = v64 == v65;

        if ((_DWORD)v41) {
          [v116 removeAllObjects];
        }
      }

      v66 = *(void **)(*(void *)&buf[8] + 40LL);
      if (!v66)
      {
        v69 = 0LL;
LABEL_112:
        if (self)
        {
          *((_BYTE *)self + 11) = *((_BYTE *)v241 + 24);
          objc_setProperty_atomic(self, v63, (id)v235[5], 64LL);
          *((_BYTE *)self + 12) = *((_BYTE *)v231 + 24);
          *((void *)self + 4) = v227[3];
          *((void *)self + 9) = v249[3];
          *((void *)self + 10) = v245[3];
          objc_setProperty_atomic(self, v83, v69, 88LL);
          *((_DWORD *)self + 4) = *((_DWORD *)v219 + 6);
          *((_DWORD *)self + 5) = *((_DWORD *)v215 + 6);
          *((_DWORD *)self + 6) = *((_DWORD *)v211 + 6);
          *((_DWORD *)self + 7) = *((_DWORD *)v207 + 6);
          *((void *)self + 12) = v203[3];
          *((void *)self + 13) = v199[3];
          *((void *)self + 14) = v195[3];
        }

        v84 = [v31 isProcessorIdleThread];
        if (self) {
          *((_BYTE *)self + 13) = v84;
        }
        v85 = [v31 isGlobalForcedIdle];
        if (self)
        {
          *((_BYTE *)self + 14) = v85;
          *((void *)self + 17) = v191[3];
          *((void *)self + 1_Block_object_dispose(va, 8) = v187[3];
          *((void *)self + 19) = v178[3];
        }

        goto LABEL_119;
      }

      v67 = v66;
      [*((id *)a1 + 20) timeWhenTransitionedToSamplingAllThreads];
      v68 = (void *)objc_claimAutoreleasedReturnValue();
      if (v68)
      {
      }

      else
      {
        [*((id *)a1 + 20) timeWhenTransitionedToSamplingAllProcesses];
        v70 = (void *)objc_claimAutoreleasedReturnValue();
        v41 = v70 == 0LL;

        if ((v41 & 1) != 0)
        {
          v69 = 0LL;
LABEL_111:

          goto LABEL_112;
        }
      }

      else {
        v71 = 0x7FFFFFFFFFFFFFFFLL;
      }
      [v67 firstThreadStateOnOrAfterTime:0 sampleIndex:v71];
      v72 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v72) {
        goto LABEL_109;
      }
      if (!-[SASamplePrinter hasTimeIndexes]((uint64_t)a1)
        || (unint64_t)[v72 startSampleIndex] <= *((void *)a1 + 6))
      {
        [v72 startTimestamp];
        v73 = (void *)objc_claimAutoreleasedReturnValue();
        v74 = [v73 gt:*((void *)a1 + 4)];

        if (!v74) {
          goto LABEL_109;
        }
      }

      [v67 creationTimestamp];
      v75 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v75)
      {
LABEL_124:
        [v72 startTimestamp];
        v69 = (void *)objc_claimAutoreleasedReturnValue();
        goto LABEL_110;
      }

      v76 = -[SASamplePrinter hasTimeIndexes]((uint64_t)a1);
      if (v76)
      {
        v77 = (void *)*((void *)a1 + 20);
        v41 = [v67 creationTimestamp];
        v78 = [v77 indexOfFirstSampleOnOrAfterTimestamp:v41];
        if (v78 < [v72 startSampleIndex])
        {

          goto LABEL_124;
        }

        if (-[SASamplePrinter hasTimeIndexes]((uint64_t)a1))
        {

          goto LABEL_108;
        }
      }

      else if (-[SASamplePrinter hasTimeIndexes]((uint64_t)a1))
      {
LABEL_108:

        goto LABEL_109;
      }

      [v67 creationTimestamp];
      v86 = (void *)objc_claimAutoreleasedReturnValue();
      [v72 startTimestamp];
      v87 = (void *)objc_claimAutoreleasedReturnValue();
      v88 = [v86 lt:v87];

      if (v76)
      {

        if ((v88 & 1) != 0) {
          goto LABEL_124;
        }
      }

      else
      {

        if (v88) {
          goto LABEL_124;
        }
      }

LABEL_74:
LABEL_75:
  return v11;
}

    v22 = v51 + 1;
    uint64_t v32 = *__error();
    _sa_logt();
    v53 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v34 = v53;
    if (v22 < v20)
    {
      if (!os_log_type_enabled(v53, OS_LOG_TYPE_INFO)) {
        goto LABEL_26;
      }
      *(_DWORD *)buf = 134217984;
      v180 = v22;
      goto LABEL_25;
    }

    if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      v180 = v20;
      goto LABEL_72;
    }

                                                        if ((v1 & 0x40000000) != 0) {
                                                          goto LABEL_187;
                                                        }
                                                        goto LABEL_75;
                                                      }

LABEL_14:
  if (!*(void *)(a1 + 160))
  {
    int v21 = *(unsigned int *)(a1 + 152);
    if ((v21 & 0x80000000) == 0)
    {
      if (v3)
      {
        [v3 endTime];
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        -[SASampleStore taskWithPid:atTimestamp:](a1, v21, v22);
        uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue();
        uint64_t v24 = v23;
        if (v23)
        {
          uint64_t v25 = v23;
          uint64_t v26 = *(void **)(a1 + 160);
          *(void *)(a1 + 160) = v25;
        }

        else
        {
          uint64_t v33 = *(unsigned int *)(a1 + 152);
          [v3 startTime];
          uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue();
          uint64_t v34 = -[SASampleStore taskWithPid:atTimestamp:](a1, v33, v26);
          uint64_t v35 = *(void **)(a1 + 160);
          *(void *)(a1 + 160) = v34;
        }

        if (!*(void *)(a1 + 160))
        {
          int v29 = *__error();
          _sa_logt();
          v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
            goto LABEL_26;
          }
          time_t v37 = *(_DWORD *)(a1 + 152);
          tm v38 = 67109120;
          LODWORD(v39) = v37;
          uint64_t v32 = "no task with pid %d in event time range, clearing target process";
          goto LABEL_30;
        }
      }

      else
      {
        uint64_t v27 = -[SASampleStore lastTaskWithPid:]((void *)a1, *(unsigned int *)(a1 + 152));
        uint64_t v28 = *(void **)(a1 + 160);
        *(void *)(a1 + 160) = v27;

        if (!*(void *)(a1 + 160))
        {
          int v29 = *__error();
          _sa_logt();
          v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
          {
LABEL_26:

            *__error() = v29;
            *(_DWORD *)(a1 + 152) = -1;
            goto LABEL_15;
          }

          uint64_t v31 = *(_DWORD *)(a1 + 152);
          tm v38 = 67109120;
          LODWORD(v39) = v31;
          uint64_t v32 = "no task with pid %d, clearing target process";
LABEL_30:
          _os_log_error_impl(&dword_186C92000, v30, OS_LOG_TYPE_ERROR, v32, (uint8_t *)&v38, 8u);
          goto LABEL_26;
        }
      }
    }
  }

  return v5;
}

    [v22 setObject:v15 forKey:v14];
    a1 += a1[2] + 3;

    ++v12;
  }

  while (v12 != a2);

  return v22;
}

        int v21 = v19;

        uint64_t v18 = v21;
LABEL_15:

LABEL_26:
        __int16 v13 = v17;
        id v14 = v18;
LABEL_27:

        int v9 = v73;
        a2 = v72;
        double v7 = 0x189607000LL;
        goto LABEL_28;
      }

      v61 = *__error();
      _sa_logt();
      v62 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
      {
        v63 = [v10 debugDescription];
        v64 = [v63 UTF8String];
        *(_DWORD *)buf = 136315138;
        v79 = v64;
        _os_log_error_impl(&dword_186C92000, v62, OS_LOG_TYPE_ERROR, "no earlierTaskEndTimestamp in %s", buf, 0xCu);
      }

      *__error() = v61;
      BOOL v5 = [v10 debugDescription];
      v65 = [v5 UTF8String];
      _SASetCrashLogMessage(12816, "no earlierTaskEndTimestamp in %s", v66, v67, v68, v69, v70, v71, v65);

      _os_crash();
      __break(1u);
      goto LABEL_85;
    }

    id v14 = 0LL;
LABEL_28:

    if (v14) {
      goto LABEL_29;
    }
LABEL_17:
    Property = a1[20];
    if (Property) {
      Property = objc_getProperty(Property, v22, 976LL, 1);
    }
    uint64_t v24 = Property;
    [*(id *)(v7 + 2408) numberWithInt:a2];
    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue();
    [v24 objectForKeyedSubscript:v25];
    uint64_t v26 = (__CFString *)objc_claimAutoreleasedReturnValue();

    if (!v26)
    {
      uint64_t v27 = @"UNKNOWN";
      if (!(_DWORD)a2) {
        uint64_t v27 = @"kernel_task";
      }
      uint64_t v26 = v27;
    }

    uint64_t v28 = v26;

    goto LABEL_30;
  }

  [v9 lastObject];
  id v14 = (id)objc_claimAutoreleasedReturnValue();
  if (!v14) {
    goto LABEL_17;
  }
LABEL_29:
  -[SASamplePrinter displayNameForTask:includePid:](a1, v14, 0);
  uint64_t v28 = (__CFString *)objc_claimAutoreleasedReturnValue();
LABEL_30:

LABEL_31:
  return v28;
}

          uint64_t v18 = 0LL;
          goto LABEL_15;
        }

        if (WeakRetained | v9) {
          goto LABEL_14;
        }
      }

      uint64_t v19 = [v5 address];
      uint64_t v18 = v19 == [v7 address];
      goto LABEL_17;
    }

    goto LABEL_12;
  }

  uint64_t v18 = 1LL;
LABEL_17:

  return v18;
}

  return v21;
}

LABEL_15:
}
  }

  else
  {
    int v9 = 0LL;
  }

  return v9;
}

    *__error() = v14;
    goto LABEL_16;
  }

  v303 = a6;
  uint64_t v16 = v12;
  uint64_t v17 = [v16 bytes];
  uint64_t v18 = [v16 length];
  v295 = (__objc2_class *)v18;
  uint64_t v19 = (__objc2_class *)(v18 + v17);
  uint64_t v20 = (int *)(v17 + 16);
  if (v17 + 16 > (unint64_t)(v18 + v17) || (int v21 = *(unsigned int *)(v17 + 4), (char *)v20 + v21 > (char *)v19))
  {
LABEL_13:
    id v14 = *__error();
    _sa_logt();
    __int16 v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.isa) = 134217984;
      *(__objc2_class **)((char *)&buf.isa + 4) = v295;
      _os_log_error_impl( &dword_186C92000,  v15,  OS_LOG_TYPE_ERROR,  "Overran kcdata buffer (length %lu)",  (uint8_t *)&buf,  0xCu);
    }

    goto LABEL_15;
  }

  v22 = (_DWORD *)v17;
  while (*v22 != -242132755)
  {
    uint64_t v23 = (char *)v22 + v21;
    uint64_t v24 = v23 + 32;
    if (v23 + 32 <= (char *)v19)
    {
      v22 = v23 + 16;
      int v21 = *((unsigned int *)v23 + 5);
    }

    goto LABEL_13;
  }

  v289 = a7;
  obj = a3;
  v264 = a4;
  v276 = (int *)v17;
  v328 = (int *)v17;
  v329 = v18 + v17;
  if ((v303 & 1) == 0)
  {
    uint64_t v27 = *(void *)(a1 + 360);
    *(void *)(a1 + 352) |= 1uLL;
    if (!v27) {
      *(void *)(a1 + 360) = 2LL;
    }
  }

  uint64_t v28 = (void *)objc_msgSend( objc_alloc(MEMORY[0x189603FC8]),  "initWithCapacity:",  objc_msgSend(*(id *)(a1 + 112), "count"));
  v324 = 0u;
  v325 = 0u;
  v326 = 0u;
  v327 = 0u;
  v304 = a1;
  int v29 = *(id *)(a1 + 112);
  v30 = [v29 countByEnumeratingWithState:&v324 objects:v334 count:16];
  if (v30)
  {
    uint64_t v31 = *(void *)v325;
    do
    {
      for (i = 0LL; i != v30; ++i)
      {
        if (*(void *)v325 != v31) {
          objc_enumerationMutation(v29);
        }
        uint64_t v33 = *(void *)(*((void *)&v324 + 1) + 8 * i);
        if (v33 && *(_DWORD *)(v33 + 32))
        {
          objc_msgSend(MEMORY[0x189607968], "numberWithUnsignedInt:");
          uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue();
          [v28 setObject:v33 forKeyedSubscript:v34];
        }
      }

      v30 = [v29 countByEnumeratingWithState:&v324 objects:v334 count:16];
    }

    while (v30);
  }

  v282 = objc_alloc_init(MEMORY[0x189603FE0]);
  v275 = objc_alloc_init(MEMORY[0x189603FE0]);
  if ((v303 & 1) != 0)
  {
    v277 = 0LL;
    uint64_t v35 = v276;
    goto LABEL_125;
  }

  uint64_t v36 = 0LL;
  time_t v37 = 0;
  tm v38 = 0LL;
  v39 = 0LL;
  v40 = 0;
  LOBYTE(v41) = 0;
  v42 = 0LL;
  v296 = -1LL;
  v43 = v276;
  while (1)
  {
    uint64_t v44 = v43[1];
    if ((char *)v20 + v44 > (char *)v19 || (v45 = *v43, *v43 == -242132755))
    {
LABEL_123:
      uint64_t v36 = v36;
      v277 = v36;
      goto LABEL_124;
    }

    if ((v45 & 0xFFFFFFF0) == 0x20) {
      v46 = 17;
    }
    else {
      v46 = *v43;
    }
    else {
      v47 = (uint64_t *)(v43 + 12);
    }
    if ((v41 & 1) != 0)
    {
      LOBYTE(v41) = v46 != 20 || v42 != *((void **)v43 + 1);
      goto LABEL_68;
    }

    LOBYTE(v41) = 0;
    if (v46 > 2308)
    {
      if (v46 != 2309 && v46 != 2352 && v46 != 2368) {
        goto LABEL_68;
      }
      LOBYTE(v41) = 0;
      v54 = *v47;
LABEL_67:
      v296 = v54;
      goto LABEL_68;
    }

    if (v46 == 17) {
      break;
    }
    if (v46 == 19)
    {
      v58 = v43[4];
      if ((v58 == 2353 || v58 == 2307) && (v37 & 1) == 0)
      {
        LOBYTE(v41) = 0;
        time_t v37 = 1;
        tm v38 = *((void *)v43 + 1);
      }

      else
      {
        if ((v37 & 1) != 0) {
          v42 = (void *)*((void *)v43 + 1);
        }
        LOBYTE(v41) = v37;
      }
    }

    else if (v46 == 20)
    {
      if (*((void *)v43 + 1) != v38) {
        goto LABEL_98;
      }
      if (v40 && v39 && v296 != -1)
      {
        __ptr = v42;
        context = v36;
        if (!v36)
        {
          v48 = v39;
          context = objc_alloc_init(MEMORY[0x189603FC8]);
          v39 = v48;
        }

        v49 = v40;
        v283 = v39;
        v50 = v39;
        do
        {
          [MEMORY[0x189607968] numberWithInt:*v50];
          v51 = (void *)objc_claimAutoreleasedReturnValue();
          [context objectForKey:v51];
          v52 = (id)objc_claimAutoreleasedReturnValue();
          if (!v52)
          {
            v52 = objc_alloc_init(MEMORY[0x189603FE0]);
            [context setObject:v52 forKey:v51];
          }

          [MEMORY[0x189607968] numberWithUnsignedLongLong:v296];
          v53 = (void *)objc_claimAutoreleasedReturnValue();
          [v52 addObject:v53];

          ++v50;
          --v49;
        }

        while (v49);
        uint64_t v36 = context;
        v39 = v283;
        goto LABEL_107;
      }

      if (v39)
      {
        __ptr = v42;
LABEL_107:
        free(v39);
        LOBYTE(v41) = 0;
        v40 = 0;
        v39 = 0LL;
        tm v38 = 0LL;
        time_t v37 = 0;
        v296 = -1LL;
        v42 = __ptr;
        goto LABEL_68;
      }

      LOBYTE(v41) = 0;
      v40 = 0;
      tm v38 = 0LL;
      time_t v37 = 0;
      v54 = -1LL;
      goto LABEL_67;
    }

      goto LABEL_16;
    }

    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      int v9 = -[os_log_s count](v8, "count");
      if (v9 == [v2 count]) {
        goto LABEL_8;
      }
      goto LABEL_35;
    }

      *(_BYTE *)(v20 + 19) |= 0x40u;
      goto LABEL_16;
    }
}

    int v21 = 0LL;
    *__error() = v15;
    goto LABEL_25;
  }

  uint64_t v10 = v9;
  destLen = v7;
  int v11 = uncompress(v9, &destLen, v8, v5 - 8);
  if (v11)
  {
    uint64_t v12 = v11;
    __int16 v13 = *__error();
    _sa_logt();
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v40) = v12;
      _os_log_error_impl(&dword_186C92000, v14, OS_LOG_TYPE_ERROR, "Unable to decompress binary format: %d", buf, 8u);
    }

LABEL_24:
    *__error() = v13;
    free(v10);
    int v21 = 0LL;
    goto LABEL_25;
  }

  if (v7 != destLen)
  {
    __int16 v13 = *__error();
    _sa_logt();
    uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218240;
      v40 = destLen;
      v41 = 2048;
      v42 = v7;
      _os_log_error_impl( &dword_186C92000,  v27,  OS_LOG_TYPE_ERROR,  "Unexpected uncompressed size %lu, expected %llu",  buf,  0x16u);
    }

    goto LABEL_24;
  }

  v22 = objc_alloc(MEMORY[0x189603F48]);
  uint64_t v23 = (void *)[v22 initWithBytesNoCopy:v10 length:destLen freeWhenDone:1];
  if (v23)
  {
    time_t v37 = 0LL;
    uint64_t v24 = (void *)[objc_alloc(MEMORY[0x189607908]) initForReadingFromData:v23 error:&v37];
    uint64_t v25 = v37;
    uint64_t v26 = v25;
    if (v24)
    {

      [v24 decodeObjectOfClass:objc_opt_class() forKey:*MEMORY[0x1896075C8]];
      uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue();
      [v24 finishDecoding];
      if (v26)
      {
        [v26 sampleStore];
        int v21 = (void *)objc_claimAutoreleasedReturnValue();
        [v21 setDataGatheringOptions:628];
      }

      else
      {
        uint64_t v33 = *__error();
        _sa_logt();
        uint64_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_186C92000, v34, OS_LOG_TYPE_ERROR, "Unable to unarchive binary format", buf, 2u);
        }

        uint64_t v26 = 0LL;
        int v21 = 0LL;
        *__error() = v33;
      }
    }

    else
    {
      uint64_t v31 = *__error();
      _sa_logt();
      uint64_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        uint64_t v35 = [v26 description];
        uint64_t v36 = [v35 UTF8String];
        *(_DWORD *)buf = 136315138;
        v40 = v36;
        _os_log_error_impl(&dword_186C92000, v32, OS_LOG_TYPE_ERROR, "Unable to unarchive: %s", buf, 0xCu);
      }

      int v21 = 0LL;
      *__error() = v31;
    }
  }

  else
  {
    int v29 = *__error();
    _sa_logt();
    v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_186C92000, v30, OS_LOG_TYPE_ERROR, "Unable to create NSData for binary format", buf, 2u);
    }

    *__error() = v29;
    free(v10);
    int v21 = 0LL;
  }

LABEL_25:
  return v21;
}

void sub_186C9D858( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_186C9D9C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

LABEL_11:
  return v10;
}

    int v9 = 0LL;
    goto LABEL_12;
  }
}

      v5->_isGlobalForcedIdle = 1;
      return v5;
    }

    uint64_t v10 = @"Bad magic";
  }

  else
  {
    uint64_t v10 = @"NULL buffer";
  }

  +[SAException exceptionWithName:reason:userInfo:]( &OBJC_CLASS___SAException,  "exceptionWithName:reason:userInfo:",  @"Decoding failure",  v10,  0LL);
  int v11 = (id)objc_claimAutoreleasedReturnValue();
  objc_exception_throw(v11);
  -[SAPAStyleThreadData populateReferencesUsingBuffer:bufferLength:andDeserializationDictionary:andDataBufferDictionary:]( v12,  v13,  v14,  v15,  v16,  v17);
  return result;
}

  return v5 == 0LL;
}

          int v11 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_13;
        }

        [v10 thread];
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue();
        __int16 v13 = [v12 threadId];

        if (!v13) {
          goto LABEL_11;
        }
        [MEMORY[0x189607968] numberWithUnsignedLongLong:v13];
        id v14 = (void *)objc_claimAutoreleasedReturnValue();
        __int16 v15 = [v9 indexOfObject:v14];

        if (v15 != 0x7FFFFFFFFFFFFFFFLL) {
          break;
        }
        [MEMORY[0x189607968] numberWithUnsignedLongLong:v13];
        uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue();
        [v9 addObject:v16];

        uint64_t v17 = [v10 dependency];

        uint64_t v10 = (_BYTE *)v17;
        if (!v17) {
          goto LABEL_11;
        }
      }

      int v11 = v15;
    }
}
}

void sub_186C9E194( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
}

LABEL_287:
      goto LABEL_288;
    }

    uint64_t v18 = 0;
    uint64_t v19 = *(void *)v276;
LABEL_35:
    uint64_t v20 = 0LL;
    while (1)
    {
      if (*(void *)v276 != v19) {
        objc_enumerationMutation(v16);
      }
      int v21 = *(void **)(*((void *)&v275 + 1) + 8 * v20);
      if ((v18 & 1) != 0) {
        goto LABEL_42;
      }
      [*(id *)(*((void *)&v275 + 1) + 8 * v20) binary];
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      [v22 path];
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue();
      uint64_t v24 = v23 == 0LL;

      if (v24) {
        break;
      }
      uint64_t v18 = 0;
LABEL_43:
      [v21 binary];
      uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue();
      [v26 gatherInfoWithDataGatheringOptions:self->_dataGatheringOptions | 2 pid:0];

      if (v17 == ++v20)
      {
        uint64_t v17 = [v16 countByEnumeratingWithState:&v275 objects:v313 count:16];
        if (!v17) {
          goto LABEL_45;
        }
        goto LABEL_35;
      }
    }

    uint64_t v25 =  +[SABinaryLoadInfo binaryLoadInfoForLiveProcessWithPid:dataGatheringOptions:additionalCSSymbolicatorFlags:]( &OBJC_CLASS___SABinaryLoadInfo,  "binaryLoadInfoForLiveProcessWithPid:dataGatheringOptions:additionalCSSymbolicatorFlags:",  0LL,  self->_dataGatheringOptions | 2,  self->_additionalCSSymbolicatorFlags);
LABEL_42:
    uint64_t v18 = 1;
    goto LABEL_43;
  }

  if (self->_lastWakeTime == 0.0) {
    self->_lastWakeTime = -[SASampleStore _getLastWakeTime]((uint64_t)self);
  }
  if (self->_shouldGatherKextStat && !self->_kextStat)
  {
    if (qword_18C4B1318 != -1) {
      dispatch_once(&qword_18C4B1318, &__block_literal_global_346);
    }
    objc_storeStrong((id *)&self->_kextStat, (id)qword_18C4B1310);
  }

  -[SASampleStore gatherBootArgs]((uint64_t)self);
  if (!self->_systemAdvisoryLevels)
  {
    uint64_t v44 = objc_alloc_init(MEMORY[0x189603FC8]);
    AdvisoryDetailed = IOCopySystemLoadAdvisoryDetailed();
    v46 = AdvisoryDetailed;
    if (AdvisoryDetailed)
    {
      v47 = -[__CFDictionary objectForKeyedSubscript:](AdvisoryDetailed, "objectForKeyedSubscript:", @"UserLevel");
      v48 = -[__CFDictionary objectForKeyedSubscript:](v46, "objectForKeyedSubscript:", @"BatteryLevel");
      v49 = -[__CFDictionary objectForKeyedSubscript:](v46, "objectForKeyedSubscript:", @"CombinedLevel");
      if (v47)
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v50 = (void *)[v47 copy];
          [v44 setObject:v50 forKeyedSubscript:0x189F64F98];
        }
      }

      if (v48)
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v51 = (void *)[v48 copy];
          [v44 setObject:v51 forKeyedSubscript:0x189F64FB8];
        }
      }

      if (v49)
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v52 = (void *)[v49 copy];
          [v44 setObject:v52 forKeyedSubscript:0x189F64FD8];
        }
      }
    }

    LODWORD(out_token) = 0;
    if (!notify_register_check((const char *)*MEMORY[0x1895FB8A0], (int *)&out_token))
    {
      *(void *)&buf.f_bsize = 0LL;
      state = notify_get_state(out_token, (uint64_t *)&buf.f_bsize);
      v54 = *(void *)&buf.f_bsize;
      notify_cancel(out_token);
      if (!state)
      {
        [MEMORY[0x189607968] numberWithUnsignedInt:v54];
        v55 = (void *)objc_claimAutoreleasedReturnValue();
        [v44 setObject:v55 forKeyedSubscript:0x189F64FF8];
      }
    }

    if ([v44 count])
    {
      v56 = (void *)[v44 copy];
      objc_setProperty_atomic(self, v57, v56, 504LL);
    }
  }

  if (!self->_homeVolumeSpace)
  {
    SAGetHomeDirectoryURL();
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    v59 = v58;
    if (v58)
    {
      v60 = v58;
      if (!statfs((const char *)[v60 fileSystemRepresentation], &buf))
      {
        f_bsize = buf.f_bsize;
        f_blocks = buf.f_blocks;
        f_bavail = buf.f_bavail;
        v64 = (void *)[objc_alloc(MEMORY[0x189603FC8]) initWithCapacity:3];
        [MEMORY[0x189607968] numberWithUnsignedLongLong:f_blocks * f_bsize];
        v65 = (void *)objc_claimAutoreleasedReturnValue();
        [v64 setObject:v65 forKeyedSubscript:0x189F65038];

        [MEMORY[0x189607968] numberWithUnsignedLongLong:f_bavail * f_bsize];
        v66 = (void *)objc_claimAutoreleasedReturnValue();
        [v64 setObject:v66 forKeyedSubscript:0x189F65058];

        *(_DWORD *)&v323[8] = 0;
        *(void *)v323 = 0LL;
        *(void *)&v316 = 0LL;
        *(void *)&out_token = 5LL;
        *((void *)&out_token + 1) = 32LL;
        v67 = v60;
        if (!getattrlist((const char *)[v67 fileSystemRepresentation], &out_token, v323, 0xCuLL, 1u)
          && *(uint64_t *)&v323[4] >= 1)
        {
          v308[0] = 0LL;
          if (!fsctl( (const char *)[v67 fileSystemRepresentation], 0x4004681BuLL, v308, 0))
          {
            if (v308[0])
            {
              [MEMORY[0x189607968] numberWithUnsignedLongLong:*(void *)&v323[4] * v308[0]];
              v68 = (void *)objc_claimAutoreleasedReturnValue();
              [v64 setObject:v68 forKeyedSubscript:0x189F65078];
            }
          }
        }

        v69 = (NSDictionary *)[v64 copy];
        homeVolumeSpace = self->_homeVolumeSpace;
        self->_homeVolumeSpace = v69;
      }
    }
  }

  if (!self->_nonDefaultFeatureFlags)
  {
    if (qword_18C4B1338 != -1) {
      dispatch_once(&qword_18C4B1338, &__block_literal_global_367);
    }
    objc_storeStrong((id *)&self->_nonDefaultFeatureFlags, (id)qword_18C4B1340);
  }

  if (-[NSMutableArray count](self->_powerModeTransitions, "count")) {
    goto LABEL_117;
  }
  v71 = (void *)[objc_alloc(MEMORY[0x189604038]) initWithSuiteName:@"com.apple.powerd.lowpowermode.state"];
  v72 = v71;
  if (!v71
    || ([v71 objectForKey:@"state"],
        v73 = (void *)objc_claimAutoreleasedReturnValue(),
        v74 = v73 == 0LL,
        v73,
        v74))
  {
    v80 = *__error();
    _sa_logt();
    v81 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v81, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf.f_bsize) = 0;
      _os_log_debug_impl( &dword_186C92000,  v81,  OS_LOG_TYPE_DEBUG,  "Unable to get low power mode defaults",  (uint8_t *)&buf,  2u);
    }

    v82 = __error();
    v75 = 0;
    goto LABEL_115;
  }

  v75 = [v72 BOOLForKey:@"state"];
  [v72 objectForKey:@"stateChangeDate"];
  v76 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v76)
  {
    v80 = *__error();
    _sa_logt();
    v142 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v142, OS_LOG_TYPE_FAULT))
    {
      LOWORD(buf.f_bsize) = 0;
      _os_log_fault_impl( &dword_186C92000,  v142,  OS_LOG_TYPE_FAULT,  "No stateChangeDate for low power mode",  (uint8_t *)&buf,  2u);
    }

    v82 = __error();
LABEL_115:
    v76 = 0LL;
    v79 = 0LL;
    *v82 = v80;
    goto LABEL_116;
  }

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v143 = *__error();
    _sa_logt();
    v144 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v144, OS_LOG_TYPE_FAULT))
    {
      [(id)objc_opt_class() debugDescription];
      v248 = (void *)objc_claimAutoreleasedReturnValue();
      buf.f_bsize = 138412290;
      *(void *)&buf.f_iosize = v248;
      _os_log_fault_impl( &dword_186C92000,  v144,  OS_LOG_TYPE_FAULT,  "low power mode stateChangeDate is not an NSDate: %@",  (uint8_t *)&buf,  0xCu);
    }

    *__error() = v143;
    v76 = 0LL;
    goto LABEL_214;
  }

  [v76 timeIntervalSinceReferenceDate];
  if (v77 == 0.0)
  {
LABEL_214:
    v79 = 0LL;
    goto LABEL_116;
  }

  [v76 timeIntervalSinceReferenceDate];
  v79 = +[SATimestamp timestampWithMachAbsTime:machAbsTimeSec:machContTime:machContTimeSec:wallTime:]( &OBJC_CLASS___SATimestamp,  "timestampWithMachAbsTime:machAbsTimeSec:machContTime:machContTimeSec:wallTime:",  0LL,  0LL,  0.0,  0.0,  v78);
LABEL_116:
  v83 = -[SAPowerModeTransition initWithLowPowerMode:timestamp:]( (id *)objc_alloc(&OBJC_CLASS___SAPowerModeTransition),  v75,  v79);
  v84 = -[SASampleStore addPowerModeTransition:]((id *)&self->super.isa, v83);

LABEL_117:
  if (!self->_installedRootNames)
  {
    if (!qword_18C4B1380)
    {
      *(_OWORD *)&buf.f_bsize = xmmword_189F61F10;
      buf.f_bfree = 0LL;
      qword_18C4B1380 = _sl_dlopen();
    }

    if (qword_18C4B1380)
    {
      *(void *)&out_token = 0LL;
      *((void *)&out_token + 1) = &out_token;
      *(void *)&v316 = 0x2050000000LL;
      v89 = (void *)qword_18C4B1388;
      *((void *)&v316 + 1) = qword_18C4B1388;
      if (!qword_18C4B1388)
      {
        *(void *)&buf.f_bsize = MEMORY[0x1895F87A8];
        buf.f_blocks = 3221225472LL;
        buf.f_bfree = (uint64_t)__getDUSessionClass_block_invoke;
        buf.f_bavail = (uint64_t)&unk_189F61EF0;
        buf.f_files = (uint64_t)&out_token;
        __getDUSessionClass_block_invoke((uint64_t)&buf);
        v89 = *(void **)(*((void *)&out_token + 1) + 24LL);
      }

      v90 = v89;
      _Block_object_dispose(&out_token, 8);
      *(void *)&out_token = 0LL;
      *((void *)&out_token + 1) = &out_token;
      *(void *)&v316 = 0x2050000000LL;
      v91 = (void *)qword_18C4B1390;
      *((void *)&v316 + 1) = qword_18C4B1390;
      if (!qword_18C4B1390)
      {
        *(void *)&buf.f_bsize = MEMORY[0x1895F87A8];
        buf.f_blocks = 3221225472LL;
        buf.f_bfree = (uint64_t)__getDURootClass_block_invoke;
        buf.f_bavail = (uint64_t)&unk_189F61EF0;
        buf.f_files = (uint64_t)&out_token;
        __getDURootClass_block_invoke((uint64_t)&buf);
        v91 = *(void **)(*((void *)&out_token + 1) + 24LL);
      }

      v92 = v91;
      _Block_object_dispose(&out_token, 8);
      if (objc_opt_class() && objc_opt_class())
      {
        v93 = dispatch_semaphore_create(0LL);
        dispatch_get_global_queue(0LL, 0LL);
        v94 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue();
        *(void *)&buf.f_bsize = MEMORY[0x1895F87A8];
        buf.f_blocks = 3221225472LL;
        buf.f_bfree = (uint64_t)__40__SASampleStore_gatherRootInstalledInfo__block_invoke;
        buf.f_bavail = (uint64_t)&unk_189F61CC0;
        buf.f_fsid = (fsid_t)v90;
        buf.f_files = (uint64_t)self;
        v95 = v93;
        buf.f_ffree = (uint64_t)v95;
        dispatch_async(v94, &buf);

        v96 = dispatch_time(0LL, 1000000000LL);
        if (dispatch_semaphore_wait(v95, v96))
        {
          v97 = *__error();
          _sa_logt();
          v98 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
          {
            LOWORD(out_token) = 0;
            _os_log_error_impl( &dword_186C92000,  v98,  OS_LOG_TYPE_ERROR,  "Timed out waiting for darwinup",  (uint8_t *)&out_token,  2u);
          }

          *__error() = v97;
        }
      }
    }
  }

  if (!self->_isRootInstalled)
  {
    *(void *)v323 = 0LL;
    v308[0] = 8LL;
    v85 = sysctlbyname("kern.roots_installed", v323, v308, 0LL, 0LL);
    v86 = *__error();
    _sa_logt();
    v87 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v88 = v87;
    if (v85)
    {
      if (os_log_type_enabled(v87, OS_LOG_TYPE_ERROR))
      {
        v206 = *__error();
        LODWORD(out_token) = 67109120;
        DWORD1(out_token) = v206;
        _os_log_error_impl( &dword_186C92000,  v88,  OS_LOG_TYPE_ERROR,  "Unable to get installed root info kern.roots_installed: %{errno}d",  (uint8_t *)&out_token,  8u);
      }

      *__error() = v86;
    }

    else
    {
      if (os_log_type_enabled(v87, OS_LOG_TYPE_INFO))
      {
        LODWORD(out_token) = 134217984;
        *(void *)((char *)&out_token + 4) = *(void *)v323;
        _os_log_impl( &dword_186C92000,  v88,  OS_LOG_TYPE_INFO,  "Installed root info kern.roots_installed: %llu",  (uint8_t *)&out_token,  0xCu);
      }

      *__error() = v86;
      if (*(void *)v323) {
        self->_isRootInstalled = 1;
      }
    }
  }

  if (!self->_keyboardLanguages)
  {
    v261 = objc_alloc_init(MEMORY[0x189603FA8]);
    v259 = (id)CFPreferencesCopyValue( @"KeyboardsCurrentAndNext",  @"com.apple.keyboard.preferences",  @"mobile",  (CFStringRef)*MEMORY[0x189605178]);
    if (v259)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v317 = 0u;
        v318 = 0u;
        out_token = 0u;
        v316 = 0u;
        v100 = v259;
        v101 = [v100 countByEnumeratingWithState:&out_token objects:&buf count:16];
        if (v101)
        {
          v102 = *(void *)v316;
          do
          {
            for (k = 0LL; k != v101; ++k)
            {
              if (*(void *)v316 != v102) {
                objc_enumerationMutation(v100);
              }
              v104 = *(void **)(*((void *)&out_token + 1) + 8 * k);
              if (v104)
              {
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0)
                {
                  [v104 stringByReplacingOccurrencesOfString:@"@sw=" withString:@" "];
                  v105 = (void *)objc_claimAutoreleasedReturnValue();
                  [v105 stringByReplacingOccurrencesOfString:@"@hw=" withString:@" "];
                  v106 = (void *)objc_claimAutoreleasedReturnValue();

                  [v106 stringByReplacingOccurrencesOfString:@";hw=" withString:&stru_189F64BD8];
                  v107 = (void *)objc_claimAutoreleasedReturnValue();

                  [v107 stringByReplacingOccurrencesOfString:@";sw=" withString:&stru_189F64BD8];
                  v108 = (void *)objc_claimAutoreleasedReturnValue();

                  [v108 stringByReplacingOccurrencesOfString:@"Automatic" withString:&stru_189F64BD8];
                  v109 = (void *)objc_claimAutoreleasedReturnValue();

                  v110 = *__error();
                  _sa_logt();
                  v111 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v111, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)v323 = 138412546;
                    *(void *)&v323[4] = v104;
                    *(_WORD *)&v323[12] = 2112;
                    *(void *)&v323[14] = v109;
                    _os_log_debug_impl(&dword_186C92000, v111, OS_LOG_TYPE_DEBUG, "keyboard %@ -> %@", v323, 0x16u);
                  }

                  *__error() = v110;
                  if (([v261 containsObject:v109] & 1) == 0) {
                    [v261 addObject:v109];
                  }
                }

                else
                {
                  v112 = *__error();
                  _sa_logt();
                  v113 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v113, OS_LOG_TYPE_FAULT))
                  {
                    ClassName = object_getClassName(v104);
                    *(_DWORD *)v323 = 136315138;
                    *(void *)&v323[4] = ClassName;
                    _os_log_fault_impl( &dword_186C92000,  v113,  OS_LOG_TYPE_FAULT,  "keyboard not a string! %s",  v323,  0xCu);
                  }

                  *__error() = v112;
                }
              }
            }

            v101 = [v100 countByEnumeratingWithState:&out_token objects:&buf count:16];
          }

          while (v101);
        }

        v115 = (NSArray *)[v261 copy];
        keyboardLanguages = self->_keyboardLanguages;
        self->_keyboardLanguages = v115;
      }

      else
      {
        v117 = *__error();
        _sa_logt();
        v118 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v118, OS_LOG_TYPE_FAULT))
        {
          v246 = object_getClassName(v259);
          buf.f_bsize = 136315138;
          *(void *)&buf.f_iosize = v246;
          _os_log_fault_impl( &dword_186C92000,  v118,  OS_LOG_TYPE_FAULT,  "keyboards not an array! %s",  (uint8_t *)&buf,  0xCu);
        }

        *__error() = v117;
      }
    }
  }

  if (!self->_preferredLanguages)
  {
    getPreferredLanguages();
    v119 = (void *)objc_claimAutoreleasedReturnValue();
    v120 = v119;
    if (v119 && [v119 count])
    {
      v121 = *__error();
      _sa_logt();
      v122 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v122, OS_LOG_TYPE_DEBUG))
      {
        buf.f_bsize = 138412290;
        *(void *)&buf.f_iosize = v120;
        _os_log_debug_impl( &dword_186C92000,  v122,  OS_LOG_TYPE_DEBUG,  "Preferred languages found: %@",  (uint8_t *)&buf,  0xCu);
      }

      *__error() = v121;
      if ((unint64_t)[v120 count] < 2)
      {
        v123 = (NSArray *)[v120 copy];
      }

      else
      {
        objc_msgSend(v120, "subarrayWithRange:", 0, 2);
        v123 = (NSArray *)objc_claimAutoreleasedReturnValue();
      }

      preferredLanguages = self->_preferredLanguages;
      self->_preferredLanguages = v123;
    }

    else
    {
      v125 = *__error();
      _sa_logt();
      v126 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v126, OS_LOG_TYPE_FAULT))
      {
        LOWORD(buf.f_bsize) = 0;
        _os_log_fault_impl( &dword_186C92000,  v126,  OS_LOG_TYPE_FAULT,  "Preferred languages are not found!",  (uint8_t *)&buf,  2u);
      }

      *__error() = v125;
    }
  }

  if (!self->_countryCode)
  {
    getPreferredLanguages();
    v127 = (void *)objc_claimAutoreleasedReturnValue();
    v128 = (void *)MEMORY[0x189603F90];
    [v127 firstObject];
    v129 = (void *)objc_claimAutoreleasedReturnValue();
    [v128 localeWithLocaleIdentifier:v129];
    v130 = (void *)objc_claimAutoreleasedReturnValue();
    [v130 objectForKey:*MEMORY[0x189603A98]];
    v131 = (void *)objc_claimAutoreleasedReturnValue();

    if (v131 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    {
      v132 = *__error();
      _sa_logt();
      v133 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v133, OS_LOG_TYPE_DEBUG))
      {
        buf.f_bsize = 138412290;
        *(void *)&buf.f_iosize = v131;
        _os_log_debug_impl(&dword_186C92000, v133, OS_LOG_TYPE_DEBUG, "Country code found: %@", (uint8_t *)&buf, 0xCu);
      }

      *__error() = v132;
      objc_storeStrong((id *)&self->_countryCode, v131);
    }

    else
    {
      v134 = *__error();
      _sa_logt();
      v135 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v135, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(buf.f_bsize) = 0;
        _os_log_debug_impl(&dword_186C92000, v135, OS_LOG_TYPE_DEBUG, "Country code not found!", (uint8_t *)&buf, 2u);
      }

      *__error() = v134;
    }
  }

  if (!self->_hasHardwareKeyboardInfo)
  {
    p_hasHardwareKeyboardInfo = &self->_hasHardwareKeyboardInfo;
    self->_hasHardwareKeyboardInfo = 1;
    v137 = (const __CFBoolean *)CFPreferencesCopyValue( @"HardwareKeyboardLastSeen",  @"com.apple.keyboard.preferences",  @"mobile",  (CFStringRef)*MEMORY[0x189605178]);
    v138 = v137;
    if (!v137)
    {
      p_hasHardwareKeyboardInfo = &self->_hardwareKeyboard;
      goto LABEL_194;
    }

    v139 = CFGetTypeID(v137);
    if (v139 != CFBooleanGetTypeID())
    {
      LODWORD(v174) = *__error();
      _sa_logt();
      v168 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v168, OS_LOG_TYPE_FAULT)) {
        goto LABEL_365;
      }
      goto LABEL_363;
    }

    self->_hardwareKeyboard = CFBooleanGetValue(v138) != 0;
    CFRelease(v138);
  }

  while (1)
  {
    if (self->_numVnodesHardLimit) {
      goto LABEL_219;
    }
    *(void *)&out_token = 0LL;
    *(void *)v323 = 0LL;
    v308[0] = 0LL;
    *(void *)&buf.f_bsize = 8LL;
    if (sysctlbyname("kern.num_vnodes", &out_token, (size_t *)&buf.f_bsize, 0LL, 0LL))
    {
      v140 = *__error();
      _sa_logt();
      v141 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v141, OS_LOG_TYPE_ERROR))
      {
        v207 = *__error();
        *(_DWORD *)v319 = 67109120;
        *(_DWORD *)&v319[4] = v207;
        _os_log_error_impl( &dword_186C92000,  v141,  OS_LOG_TYPE_ERROR,  "Unable to get kern.num_vnodes: %{errno}d",  v319,  8u);
      }

LABEL_218:
      *__error() = v140;
      goto LABEL_219;
    }

    *(void *)&buf.f_bsize = 8LL;
    if (sysctlbyname("kern.free_vnodes", v323, (size_t *)&buf.f_bsize, 0LL, 0LL))
    {
      v140 = *__error();
      _sa_logt();
      v141 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v141, OS_LOG_TYPE_ERROR))
      {
        v247 = *__error();
        *(_DWORD *)v319 = 67109120;
        *(_DWORD *)&v319[4] = v247;
        _os_log_error_impl( &dword_186C92000,  v141,  OS_LOG_TYPE_ERROR,  "Unable to get kern.free_vnodes: %{errno}d",  v319,  8u);
      }

      goto LABEL_218;
    }

    *(void *)&buf.f_bsize = 8LL;
    if (sysctlbyname("kern.maxvnodes", v308, (size_t *)&buf.f_bsize, 0LL, 0LL))
    {
      v140 = *__error();
      _sa_logt();
      v141 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v141, OS_LOG_TYPE_ERROR))
      {
        v249 = *__error();
        *(_DWORD *)v319 = 67109120;
        *(_DWORD *)&v319[4] = v249;
        _os_log_error_impl( &dword_186C92000,  v141,  OS_LOG_TYPE_ERROR,  "Unable to get kern.maxvnodes: %{errno}d",  v319,  8u);
      }

      goto LABEL_218;
    }

    LODWORD(cf) = 0;
    *(void *)&buf.f_bsize = 4LL;
    if (sysctlbyname("vfs.vnstats.vn_dealloc_level", &cf, (size_t *)&buf.f_bsize, 0LL, 0LL))
    {
      v140 = *__error();
      _sa_logt();
      v141 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v141, OS_LOG_TYPE_ERROR))
      {
        v250 = *__error();
        *(_DWORD *)v319 = 67109120;
        *(_DWORD *)&v319[4] = v250;
        _os_log_error_impl( &dword_186C92000,  v141,  OS_LOG_TYPE_ERROR,  "Unable to get vfs.vnstats.vn_dealloc_level: %{errno}d",  v319,  8u);
      }

      goto LABEL_218;
    }

    v244 = v308[0];
    v245 = v308[0] << ((_DWORD)cf != 0);
    self->_numVnodesAllocated = out_token;
    self->_numVnodesFree = *(void *)v323;
    self->_numVnodesSoftLimit = v244;
    self->_numVnodesHardLimit = v245;
LABEL_219:
    if (!self->_processNameForUnknownPids)
    {
      *(void *)&buf.f_bsize = 0LL;
      buf.f_blocks = (uint64_t)&buf;
      buf.f_bfree = 0x3032000000LL;
      buf.f_bavail = (uint64_t)__Block_byref_object_copy__0;
      buf.f_files = (uint64_t)__Block_byref_object_dispose__0;
      buf.f_ffree = (uint64_t)objc_alloc_init(MEMORY[0x189603FC8]);
      *(void *)&out_token = MEMORY[0x1895F87A8];
      *((void *)&out_token + 1) = 3221225472LL;
      *(void *)&v316 = __42__SASampleStore_gatherUnknownProcessNames__block_invoke;
      *((void *)&v316 + 1) = &unk_189F61C50;
      *(void *)&v317 = self;
      *((void *)&v317 + 1) = &buf;
      -[SASampleStore enumerateTasks:](self, "enumerateTasks:", &out_token);
      v145 = (NSDictionary *)-[NSDictionary copy](self->_processNameForUnknownPids, "copy");
      processNameForUnknownPids = self->_processNameForUnknownPids;
      self->_processNameForUnknownPids = v145;

      _Block_object_dispose(&buf, 8);
    }

    v147 = objc_alloc_init(MEMORY[0x189603FC8]);
    *(void *)&buf.f_bsize = MEMORY[0x1895F87A8];
    buf.f_blocks = 3221225472LL;
    buf.f_bfree = (uint64_t)__52__SASampleStore_gatherUnknownResourceCoalitionNames__block_invoke;
    buf.f_bavail = (uint64_t)&unk_189F61C78;
    buf.f_files = (uint64_t)v147;
    v148 = v147;
    -[SASampleStore enumerateTasks:](self, "enumerateTasks:", &buf);

    if (!self->_activeTrials)
    {
      if (!qword_18C4B1370)
      {
        *(_OWORD *)&buf.f_bsize = xmmword_189F61ED0;
        buf.f_bfree = 0LL;
        qword_18C4B1370 = _sl_dlopen();
      }

      if (qword_18C4B1370)
      {
        v149 = dispatch_semaphore_create(0LL);
        dispatch_get_global_queue(0LL, 0LL);
        v150 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue();
        *(void *)&buf.f_bsize = MEMORY[0x1895F87A8];
        buf.f_blocks = 3221225472LL;
        buf.f_bfree = (uint64_t)__29__SASampleStore_gatherTrials__block_invoke;
        buf.f_bavail = (uint64_t)&unk_189F61B70;
        buf.f_files = (uint64_t)self;
        v151 = v149;
        buf.f_ffree = (uint64_t)v151;
        dispatch_async(v150, &buf);

        v152 = dispatch_time(0LL, 5000000000LL);
        if (dispatch_semaphore_wait(v151, v152))
        {
          v153 = *__error();
          _sa_logt();
          v154 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v154, OS_LOG_TYPE_ERROR))
          {
            LOWORD(out_token) = 0;
            _os_log_error_impl( &dword_186C92000,  v154,  OS_LOG_TYPE_ERROR,  "Timed out waiting for trial info",  (uint8_t *)&out_token,  2u);
          }

          *__error() = v153;
        }
      }
    }

    if (!self->_gpuRestartCount)
    {
      *(void *)&out_token = 0LL;
      *((void *)&out_token + 1) = &out_token;
      v316 = 0x2020000000uLL;
      *(void *)v323 = 0LL;
      *(void *)&v323[8] = v323;
      *(void *)&v323[16] = 0x2020000000LL;
      v324 = 0LL;
      v308[0] = 0LL;
      v308[1] = (size_t)v308;
      v308[2] = 0x2020000000LL;
      v309 = 0;
      *(void *)v319 = 0LL;
      v320 = v319;
      v321 = 0x2020000000LL;
      v322 = 0;
      self->_gpuRestartCount = 0LL;
      self->_gpuRestartLastMachAbs = 0LL;
      cf = 0LL;
      v306 = 0LL;
      v155 = IOServiceMatching("AGXAccelerator");
      v156 = (const void *)IOReportCopyChannelsForDrivers();
      CFRelease(v155);
      if (!v156)
      {
        v159 = *__error();
        _sa_logt();
        v160 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v160, OS_LOG_TYPE_ERROR))
        {
          buf.f_bsize = 138412290;
          *(void *)&buf.f_iosize = cf;
          _os_log_error_impl( &dword_186C92000,  v160,  OS_LOG_TYPE_ERROR,  "Failed to get IOReport channels: %@",  (uint8_t *)&buf,  0xCu);
        }

        *__error() = v159;
        goto LABEL_259;
      }

      if (IOReportGetChannelCount())
      {
        Subscription = (const void *)IOReportCreateSubscription();
        if (Subscription && v306)
        {
          Samples = (const void *)IOReportCreateSamples();
          if (Samples)
          {
            *(void *)&buf.f_bsize = MEMORY[0x1895F87A8];
            buf.f_blocks = 3221225472LL;
            buf.f_bfree = (uint64_t)__30__SASampleStore_gatherGPUInfo__block_invoke;
            buf.f_bavail = (uint64_t)&unk_189F61BB8;
            buf.f_files = (uint64_t)&out_token;
            buf.f_ffree = (uint64_t)v308;
            buf.f_fsid = (fsid_t)v323;
            *(void *)&buf.f_owner = v319;
            IOReportIterate();
            self->_gpuRestartCount = *(void *)(*((void *)&out_token + 1) + 24LL);
            self->_gpuRestartLastMachAbs = *(void *)(*(void *)&v323[8] + 24LL);
LABEL_250:
            if (cf) {
              CFRelease(cf);
            }
            if (Samples) {
              CFRelease(Samples);
            }
            if (v306) {
              CFRelease(v306);
            }
            if (Subscription) {
              CFRelease(Subscription);
            }
            CFRelease(v156);
LABEL_259:
            _Block_object_dispose(v319, 8);
            _Block_object_dispose(v308, 8);
            _Block_object_dispose(v323, 8);
            _Block_object_dispose(&out_token, 8);
            goto LABEL_260;
          }

          v161 = *__error();
          _sa_logt();
          v164 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v164, OS_LOG_TYPE_ERROR))
          {
            buf.f_bsize = 138412290;
            *(void *)&buf.f_iosize = cf;
            _os_log_error_impl( &dword_186C92000,  v164,  OS_LOG_TYPE_ERROR,  "Failed to create IOReport samples: %@",  (uint8_t *)&buf,  0xCu);
          }
        }

        else
        {
          v161 = *__error();
          _sa_logt();
          v164 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v164, OS_LOG_TYPE_ERROR))
          {
            buf.f_bsize = 138412290;
            *(void *)&buf.f_iosize = cf;
            _os_log_error_impl( &dword_186C92000,  v164,  OS_LOG_TYPE_ERROR,  "Failed to subscribe to IOReport channels: %@",  (uint8_t *)&buf,  0xCu);
          }
        }

        v163 = __error();
        Samples = 0LL;
      }

      else
      {
        v161 = *__error();
        _sa_logt();
        v162 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v162, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(buf.f_bsize) = 0;
          _os_log_debug_impl( &dword_186C92000,  v162,  OS_LOG_TYPE_DEBUG,  "No IOReport channels found",  (uint8_t *)&buf,  2u);
        }

        v163 = __error();
        Samples = 0LL;
        Subscription = 0LL;
      }

      *v163 = v161;
      goto LABEL_250;
    }

      v379[2](v379, 0xFFFFFFFFLL);
LABEL_309:

      goto LABEL_378;
    }

    uint64_t v19 = *(_DWORD *)(*(void *)(*(void *)(v18 + 8) + 24LL) + 8LL * (v17 - 1) + 4) + a3;
    if (v19 >= 0)
    {
      v413 = *(_DWORD *)(*(void *)(*(void *)(v18 + 8) + 24LL) + 8LL * (v17 - 1) + 4) + a3;
      goto LABEL_18;
    }

LABEL_260:
    if (self->_attemptedToGatherModelInfo) {
      goto LABEL_282;
    }
    v165 = -[SASampleStore models](self, "models");
    v166 = v165 == 0LL;

    if (!v166) {
      goto LABEL_282;
    }
    self->_attemptedToGatherModelInfo = 1;
    if (!qword_18C4B13A8)
    {
      *(_OWORD *)&buf.f_bsize = xmmword_189F61F68;
      buf.f_bfree = 0LL;
      qword_18C4B13A8 = _sl_dlopen();
    }

    if (!qword_18C4B13A8) {
      break;
    }
    v167 = -[SASampleStore startTime](self, "startTime");
    v168 = (os_log_s *)[v167 copyDate];
    v169 = -[SASampleStore endTime](self, "endTime");
    v138 = (const __CFBoolean *)[v169 copyDate];

    if (!v168 || !v138)
    {
      v182 = *__error();
      _sa_logt();
      v183 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v183, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf.f_bsize) = 0;
        _os_log_error_impl( &dword_186C92000,  v183,  OS_LOG_TYPE_ERROR,  "No wall time for event, cannot gather model info",  (uint8_t *)&buf,  2u);
      }

      *__error() = v182;
      goto LABEL_281;
    }
    v170 = -[os_log_s dateByAddingTimeInterval:](v168, "dateByAddingTimeInterval:", -60.0);
    v171 = -[__CFBoolean dateByAddingTimeInterval:](v138, "dateByAddingTimeInterval:", 60.0);
    v172 = dispatch_semaphore_create(0LL);
    *(void *)&buf.f_bsize = MEMORY[0x1895F87A8];
    buf.f_blocks = 3221225472LL;
    buf.f_bfree = (uint64_t)__32__SASampleStore_gatherModelInfo__block_invoke;
    buf.f_bavail = (uint64_t)&unk_189F61CE8;
    buf.f_files = (uint64_t)self;
    p_hasHardwareKeyboardInfo = v172;
    buf.f_ffree = (uint64_t)p_hasHardwareKeyboardInfo;
    v173 = v170;
    v174 = v171;
    v175 = &buf;
    *(void *)v323 = 0LL;
    *(void *)&v323[8] = v323;
    *(void *)&v323[16] = 0x2020000000LL;
    v176 = (void (*)(id, id, statfs *))off_18C4B13B0;
    v324 = off_18C4B13B0;
    if (!off_18C4B13B0)
    {
      *(void *)&out_token = MEMORY[0x1895F87A8];
      *((void *)&out_token + 1) = 3221225472LL;
      *(void *)&v316 = __getSAModelGatherInfoSymbolLoc_block_invoke;
      *((void *)&v316 + 1) = &unk_189F61EF0;
      *(void *)&v317 = v323;
      __getSAModelGatherInfoSymbolLoc_block_invoke((uint64_t)&out_token);
      v176 = *(void (**)(id, id, statfs *))(*(void *)&v323[8] + 24LL);
    }

    _Block_object_dispose(v323, 8);
    if (v176)
    {
      v176(v173, v174, v175);

      v177 = dispatch_time(0LL, 10000000000LL);
      if (dispatch_semaphore_wait((dispatch_semaphore_t)p_hasHardwareKeyboardInfo, v177))
      {
        v178 = *__error();
        _sa_logt();
        v179 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v179, OS_LOG_TYPE_ERROR))
        {
          LOWORD(out_token) = 0;
          _os_log_error_impl( &dword_186C92000,  v179,  OS_LOG_TYPE_ERROR,  "Timed out waiting for model info",  (uint8_t *)&out_token,  2u);
        }

        *__error() = v178;
      }

LABEL_281:
      goto LABEL_282;
    }

    v253 = dlerror();
    abort_report_np();
    __break(1u);
LABEL_365:
    v251 = CFGetTypeID(v138);
    v252 = (__CFString *)CFCopyTypeIDDescription(v251);
    buf.f_bsize = 138412290;
    *(void *)&buf.f_iosize = v252;
    _os_log_fault_impl( &dword_186C92000,  v168,  OS_LOG_TYPE_FAULT,  "HardwareKeyboardLastSeen not a BOOLean: %@",  (uint8_t *)&buf,  0xCu);

LABEL_363:
    *__error() = (int)v174;
    CFRelease(v138);
LABEL_194:
    *p_hasHardwareKeyboardInfo = 0;
  }

  v180 = *__error();
  _sa_logt();
  v181 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v181, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf.f_bsize) = 0;
    _os_log_error_impl(&dword_186C92000, v181, OS_LOG_TYPE_ERROR, "SAModel not available", (uint8_t *)&buf, 2u);
  }

  *__error() = v180;
LABEL_282:
  v184 = +[SATimestamp timestamp](&OBJC_CLASS___SATimestamp, "timestamp", v253);
  [v184 wallTime];
  v186 = v185;
  [v184 machContTimeSeconds];
  v188 = v187;
  v254 = v184;
  LastWake = -[SASampleStore _getLastWakeTime]((uint64_t)self);
  if (LastWake != 0.0)
  {
    if (LastWake <= 0.0)
    {
      v190 = 0LL;
    }

    else
    {
      v190 = -[SATimestamp initWithMachAbsTime:machAbsTimeSec:machContTime:machContTimeSec:wallTime:]( objc_alloc(&OBJC_CLASS___SATimestamp),  "initWithMachAbsTime:machAbsTimeSec:machContTime:machContTimeSec:wallTime:",  0LL,  0LL,  0.0,  0.0,  LastWake);
      -[SATimestamp guessMissingTimesBasedOnTimestamp:](v190, "guessMissingTimesBasedOnTimestamp:", v254);
    }

    v279[0] = MEMORY[0x1895F87A8];
    v279[1] = 3221225472LL;
    v279[2] = __28__SASampleStore_postprocess__block_invoke_3_158;
    v279[3] = &unk_189F614B8;
    v282 = v186 - v188;
    obj = v190;
    v280 = obj;
    v254 = v254;
    v281 = v254;
    -[SASampleStore iterateAllTimestamps:]((uint64_t)self, v279);

    goto LABEL_287;
  }

LABEL_288:
  if (self)
  {
    if (!self->_kernelVersion)
    {
      buf.f_mntonname[680] = 0;
      if (uname((utsname *)&buf))
      {
        v191 = *__error();
        _sa_logt();
        v192 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v192, OS_LOG_TYPE_DEFAULT))
        {
          v193 = *__error();
          LODWORD(out_token) = 67109120;
          DWORD1(out_token) = v193;
          _os_log_impl( &dword_186C92000,  v192,  OS_LOG_TYPE_DEFAULT,  "WARNING: unable to get kernel strings: %d",  (uint8_t *)&out_token,  8u);
        }

        *__error() = v191;
      }

      else if (buf.f_mntonname[680])
      {
        SANSStringForCString(&buf.f_mntonname[680]);
        v194 = (NSString *)objc_claimAutoreleasedReturnValue();
        kernelVersion = self->_kernelVersion;
        self->_kernelVersion = v194;
      }
    }

    if (!self->_osProductName && !self->_osProductVersion && !self->_osProductVersionExtra && !self->_osBuildVersion)
    {
      v196 = (const __CFDictionary *)_CFCopySupplementalVersionDictionary();
      v197 = v196;
      if (v196)
      {
        CFDictionaryGetValue(v196, (const void *)*MEMORY[0x189604B68]);
        v198 = (NSString *)objc_claimAutoreleasedReturnValue();
        osProductName = self->_osProductName;
        self->_osProductName = v198;

        CFDictionaryGetValue(v197, (const void *)*MEMORY[0x189604B78]);
        v200 = (NSString *)objc_claimAutoreleasedReturnValue();
        osProductVersion = self->_osProductVersion;
        self->_osProductVersion = v200;

        CFDictionaryGetValue(v197, (const void *)*MEMORY[0x189604B70]);
        v202 = (NSString *)objc_claimAutoreleasedReturnValue();
        osProductVersionExtra = self->_osProductVersionExtra;
        self->_osProductVersionExtra = v202;

        CFDictionaryGetValue(v197, (const void *)*MEMORY[0x189604B60]);
        v204 = (NSString *)objc_claimAutoreleasedReturnValue();
        osBuildVersion = self->_osBuildVersion;
        self->_osBuildVersion = v204;

        CFRelease(v197);
      }

      else
      {
        v208 = *__error();
        _sa_logt();
        v209 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v209, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf.f_bsize) = 0;
          _os_log_error_impl( &dword_186C92000,  v209,  OS_LOG_TYPE_ERROR,  "unable to get system versions dictionary",  (uint8_t *)&buf,  2u);
        }

        *__error() = v208;
      }
    }
  }

  -[SASampleStore gatherMachineArchitecture](self, "gatherMachineArchitecture");
  if (self)
  {
    if (!self->_workQueueSoftThreadLimit)
    {
      *(void *)&out_token = 4LL;
      if (sysctlbyname( "kern.wq_max_constrained_threads",  &self->_workQueueSoftThreadLimit,  (size_t *)&out_token,  0LL,  0LL))
      {
        v210 = *__error();
        _sa_logt();
        v211 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v211, OS_LOG_TYPE_ERROR))
        {
          v235 = *__error();
          v236 = __error();
          v237 = strerror(*v236);
          buf.f_bsize = 67109378;
          buf.f_iosize = v235;
          LOWORD(buf.f_blocks) = 2080;
          *(uint64_t *)((char *)&buf.f_blocks + 2) = (uint64_t)v237;
          _os_log_error_impl( &dword_186C92000,  v211,  OS_LOG_TYPE_ERROR,  "Unable to get kern.wq_max_constrained_threads: %d %s",  (uint8_t *)&buf,  0x12u);
        }

        *__error() = v210;
      }
    }

    if (!self->_workQueueHardThreadLimit)
    {
      *(void *)&out_token = 4LL;
      if (sysctlbyname("kern.wq_max_threads", &self->_workQueueHardThreadLimit, (size_t *)&out_token, 0LL, 0LL))
      {
        v212 = *__error();
        _sa_logt();
        v213 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v213, OS_LOG_TYPE_ERROR))
        {
          v238 = *__error();
          v239 = __error();
          v240 = strerror(*v239);
          buf.f_bsize = 67109378;
          buf.f_iosize = v238;
          LOWORD(buf.f_blocks) = 2080;
          *(uint64_t *)((char *)&buf.f_blocks + 2) = (uint64_t)v240;
          _os_log_error_impl( &dword_186C92000,  v213,  OS_LOG_TYPE_ERROR,  "Unable to get kern.wq_max_threads: %d %s",  (uint8_t *)&buf,  0x12u);
        }

        *__error() = v212;
      }
    }

    if (qword_18C4B1330 != -1) {
      dispatch_once(&qword_18C4B1330, &__block_literal_global_354);
    }
    objc_storeStrong((id *)&self->_hardwareModel, (id)qword_18C4B1328);
    if (!self->_numActiveCPUs)
    {
      *(void *)&out_token = 4LL;
      if (sysctlbyname("hw.activecpu", &self->_numActiveCPUs, (size_t *)&out_token, 0LL, 0LL))
      {
        v215 = *__error();
        _sa_logt();
        v216 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v216, OS_LOG_TYPE_ERROR))
        {
          v241 = *__error();
          v242 = __error();
          v243 = strerror(*v242);
          buf.f_bsize = 67109378;
          buf.f_iosize = v241;
          LOWORD(buf.f_blocks) = 2080;
          *(uint64_t *)((char *)&buf.f_blocks + 2) = (uint64_t)v243;
          _os_log_error_impl( &dword_186C92000,  v216,  OS_LOG_TYPE_ERROR,  "Unable to get hw.activecpu: %d %s",  (uint8_t *)&buf,  0x12u);
        }

        *__error() = v215;
      }

      if (!objc_getProperty(self, v214, 1032LL, 1))
      {
        current = ktrace_machine_create_current();
        if (current)
        {
          MEMORY[0x186E47040]();
          v218 = CSArchitectureIs64Bit();
          -[SASampleStore _populateFromKtraceMachineInfo:is64bit:]((uint64_t)self, current, v218);
          ktrace_machine_destroy();
        }

        else
        {
          v219 = *__error();
          _sa_logt();
          v220 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v220, OS_LOG_TYPE_ERROR))
          {
            LOWORD(buf.f_bsize) = 0;
            _os_log_error_impl( &dword_186C92000,  v220,  OS_LOG_TYPE_ERROR,  "Unable to get ktrace machine - cannot determine P vs E cores",  (uint8_t *)&buf,  2u);
          }

          *__error() = v219;
        }
      }
    }
  }

  -[SASampleStore gatherHWPageSize]((int *)self);
  -[SASampleStore gatherVMPageSize]((int *)self);
  if (self)
  {
    if (!self->_appleInternalIsKnown)
    {
      self->_appleInternalIsKnown = 1;
      self->_isAppleInternal = is_apple_internal_setting();
      if (qword_18C4B13A0 != -1) {
        dispatch_once(&qword_18C4B13A0, &__block_literal_global_1483);
      }
      objc_storeStrong((id *)&self->_automatedDeviceGroup, (id)qword_18C4B1398);
      if (self->_isAppleInternal)
      {
        self->_hasInternalCarryDeviceDistinction = 1;
        if (!self->_automatedDeviceGroup)
        {
          v232 = (void *)CFPreferencesCopyValue( @"ExperimentGroup",  @"com.apple.da",  @"mobile",  (CFStringRef)*MEMORY[0x189605178]);
          [v232 lowercaseString];
          v233 = (void *)objc_claimAutoreleasedReturnValue();

          if ([v233 containsString:@"carry"]) {
            v234 = 1;
          }
          else {
            v234 = [v233 containsString:@"walkabout"];
          }

          self->_isInternalCarryDevice = v234;
        }
      }
    }

    if (self->_numOSCryptexFileExtents <= 0)
    {
      if (qword_18C4B1350 != -1) {
        dispatch_once(&qword_18C4B1350, &__block_literal_global_396);
      }
      self->_numOSCryptexFileExtents = qword_18C4B1358;
    }
  }

LABEL_335:
  v265 = 0u;
  v266 = 0u;
  v263 = 0u;
  v264 = 0u;
  v221 = (void *)-[NSMutableArray copy](self->_sharedCaches, "copy");
  v222 = [v221 countByEnumeratingWithState:&v263 objects:v310 count:16];
  if (v222)
  {
    v223 = *(void *)v264;
    do
    {
      for (m = 0LL; m != v222; ++m)
      {
        if (*(void *)v264 != v223) {
          objc_enumerationMutation(v221);
        }
        v225 = *(_BYTE **)(*((void *)&v263 + 1) + 8 * m);
        if (v225 && (v225[24] & 1) != 0)
        {
          [*(id *)(*((void *)&v263 + 1) + 8 * m) uuid];
          v226 = (void *)objc_claimAutoreleasedReturnValue();
          v227 = +[SASharedCache sharedCacheWithUUID:slide:slidBaseAddress:]( SASharedCache,  "sharedCacheWithUUID:slide:slidBaseAddress:",  v226,  [v225 slide],  objc_msgSend(v225, "slidBaseAddress"));
          [v227 binaryLoadInfos];
          v228 = (void *)objc_claimAutoreleasedReturnValue();
          if ([v228 count])
          {

            goto LABEL_344;
          }

          [v225 binaryLoadInfos];
          v229 = (void *)objc_claimAutoreleasedReturnValue();
          v230 = [v229 count] == 0;

          if (v230)
          {
LABEL_344:
            -[NSMutableArray removeObject:](self->_sharedCaches, "removeObject:", v225);
            -[SASampleStore addSharedCache:]((uint64_t)self, v227);
          }

          continue;
        }
      }

      v222 = [v221 countByEnumeratingWithState:&v263 objects:v310 count:16];
    }

    while (v222);
  }

  -[NSMutableArray sortUsingComparator:](self->_ioEvents, "sortUsingComparator:", &__block_literal_global_162);
  -[NSMutableDictionary enumerateKeysAndObjectsUsingBlock:]( self->_ioEventsByTid,  "enumerateKeysAndObjectsUsingBlock:",  &__block_literal_global_163);
  v231 = -[SASampleStore fixupAllFrames]((id *)&self->super.isa);
  if (self->_machTimebase.denom && self->_machTimebase.numer)
  {
    v262[0] = MEMORY[0x1895F87A8];
    v262[1] = 3221225472LL;
    v262[2] = __28__SASampleStore_postprocess__block_invoke_7;
    v262[3] = &unk_189F61580;
    v262[4] = self;
    -[SASampleStore iterateAllTimestamps:]((uint64_t)self, v262);
  }

  _Block_object_dispose(&v287, 8);
  _Block_object_dispose(&v291, 8);
  _Block_object_dispose(&v295, 8);
  _Block_object_dispose(&v299, 8);
}

void sub_186CA0E94(_Unwind_Exception *a1)
{
}

void sub_186CA11AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

LABEL_20:
}
}

    *(_BYTE *)(v20 + 15) |= 0x40u;
    ths_ss_flags = a3->ths_ss_flags;
    if ((ths_ss_flags & 0x1000) == 0)
    {
LABEL_14:
      if ((ths_ss_flags & 0x800) == 0)
      {
LABEL_16:
        uint64_t v25 = objc_msgSend(v18, "copy", a9);
        uint64_t v26 = *(void **)(v20 + 104);
        *(void *)(v20 + 104) = v25;

        goto LABEL_17;
      }

    double v7 = v28;
    BOOL v5 = v29;
    uint64_t v10 = v27;
  }
}

LABEL_23:
}

              if (([v13 isIdleWorkQueue] & 1) == 0)
              {
                [a1 threadStates];
                v30 = (void *)objc_claimAutoreleasedReturnValue();
                if ([v30 count] - 1 <= a2)
                {
LABEL_41:

                  goto LABEL_42;
                }

                [v13 endTimestamp];
                uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue();
                uint64_t v32 = [v31 lt:v9];

                if (v32)
                {
                  [a1 threadStates];
                  uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue();
                  [v33 objectAtIndexedSubscript:a2 + 1];
                  v30 = (void *)objc_claimAutoreleasedReturnValue();

                  if (v14 != 0x7FFFFFFFFFFFFFFFLL)
                  {
                    if ([v30 startSampleIndex] == 0x7FFFFFFFFFFFFFFFLL)
                    {
                      uint64_t v34 = a2 + 2;
                      while (1)
                      {
                        [a1 threadStates];
                        uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue();
                        uint64_t v36 = [v35 count] - 1;

                        if (v34 - 1 >= v36) {
                          break;
                        }
                        [a1 threadStates];
                        time_t v37 = (void *)objc_claimAutoreleasedReturnValue();
                        [v37 objectAtIndexedSubscript:v34];
                        tm v38 = (void *)objc_claimAutoreleasedReturnValue();

                        ++v34;
                        v30 = v38;
                        if ([v38 startSampleIndex] != 0x7FFFFFFFFFFFFFFFLL) {
                          goto LABEL_35;
                        }
                      }

                      tm v38 = 0LL;
                    }

                    else
                    {
                      tm v38 = v30;
                    }

    goto LABEL_24;
  }

      int v21 = 0;
LABEL_26:

      goto LABEL_27;
    }

    int v21 = 0;
  }

        v46 = *__error();
        _sa_logt();
        v47 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
        {
          v48 = a1[2];
          if (v48)
          {
            v49 = v48[19];
            if (!v49)
            {
              if (*((_BYTE *)v48 + 11)) {
                v49 = 3LL;
              }
              else {
                v49 = 1LL;
              }
            }
          }

          else
          {
            v49 = 0LL;
          }

          v50 = [v48 debugDescription];
          v51 = [v50 UTF8String];
          *(_DWORD *)buf = 134218242;
          *(void *)&uint8_t buf[4] = v49;
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = v51;
          _os_log_error_impl( &dword_186C92000,  v47,  OS_LOG_TYPE_ERROR,  "stacksForTask with not kSAAggregateCallTreesByDispatchQueue nor Thread %llu: %s",  buf,  0x16u);
        }

        *__error() = v46;
        v52 = a1[2];
        v53 = -[SASamplePrintOptions callTreeAggregationResolved]((uint64_t)v52);
        v54 = [v52 debugDescription];
        [v54 UTF8String];
        _SASetCrashLogMessage( 8219,  "stacksForTask with not kSAAggregateCallTreesByDispatchQueue nor Thread %llu: %s",  v55,  v56,  v57,  v58,  v59,  v60,  v53);

        _os_crash();
        __break(1u);
      }
    }

    else if (*((_BYTE *)v20 + 11))
    {
      goto LABEL_23;
    }

    -[os_log_s dispatchQueues](v5, "dispatchQueues");
    time_t v37 = (void *)objc_claimAutoreleasedReturnValue();
    v69[0] = v21;
    v69[1] = 3221225472LL;
    v69[2] = __49__SASamplePrinter_stacksForTask_taskSampleCount___block_invoke_2;
    v69[3] = &unk_189F63F60;
    v69[4] = a1;
    uint64_t v35 = (id *)&v70;
    tm v38 = v21;
    v39 = v6;
    v40 = v5;
    v70 = v40;
    uint64_t v36 = (id *)v71;
    v41 = v19;
    v71[0] = v41;
    v71[1] = a3;
    [v37 enumerateKeysAndObjectsUsingBlock:v69];
    v42 = -[os_log_s threads](v40, "threads");
    v65[0] = v38;
    v65[1] = 3221225472LL;
    v65[2] = __49__SASamplePrinter_stacksForTask_taskSampleCount___block_invoke_3;
    v65[3] = &unk_189F63F38;
    v65[4] = a1;
    v43 = v40;
    double v6 = v39;
    int v21 = v38;
    v66 = v43;
    v67 = v41;
    v68 = a3;
    [v42 enumerateKeysAndObjectsUsingBlock:v65];

    goto LABEL_21;
  }

    uint64_t v10 = a1 + 16;
    return *(void *)v10;
  }

  if ((v3 - 735576101) < 2)
  {
LABEL_24:
    uint64_t v10 = a1 + 8;
    return *(void *)v10;
  }

  if (v3 == 730268056 || v3 == 730268060) {
    goto LABEL_23;
  }
  return result;
}

LABEL_84:
      v175 = *__error();
      _sa_logt();
      v92 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
      {
        log = v92;
        v93 = (void *)*((void *)a1 + 2);
        [MEMORY[0x189607968] numberWithInt:v163];
        v171 = (void *)objc_claimAutoreleasedReturnValue();
        [v93 objectForKeyedSubscript:v171];
        v168 = (void *)objc_claimAutoreleasedReturnValue();
        v149 = [v168 count];
        v94 = (void *)*((void *)a1 + 2);
        [MEMORY[0x189607968] numberWithInt:v163];
        newValuea = (id)objc_claimAutoreleasedReturnValue();
        [v94 objectForKeyedSubscript:newValuea];
        v161 = (void *)objc_claimAutoreleasedReturnValue();
        [v161 lastObject];
        v159 = (void *)objc_claimAutoreleasedReturnValue();
        v157 = [v159 debugDescription];
        v142 = [v157 UTF8String];
        v95 = (void *)*((void *)a1 + 2);
        [MEMORY[0x189607968] numberWithInt:v163];
        v152 = (void *)objc_claimAutoreleasedReturnValue();
        [v95 objectForKeyedSubscript:v152];
        v150 = (void *)objc_claimAutoreleasedReturnValue();
        [v150 lastObject];
        v147 = (void *)objc_claimAutoreleasedReturnValue();
        v139 = [v147 uniquePid];
        v96 = (void *)*((void *)a1 + 2);
        [MEMORY[0x189607968] numberWithInt:v163];
        v145 = (void *)objc_claimAutoreleasedReturnValue();
        [v96 objectForKeyedSubscript:v145];
        v143 = (void *)objc_claimAutoreleasedReturnValue();
        [v143 lastObject];
        v141 = (void *)objc_claimAutoreleasedReturnValue();
        [v141 mainBinaryLoadInfo];
        v140 = (void *)objc_claimAutoreleasedReturnValue();
        v97 = [v140 debugDescription];
        v138 = [v97 UTF8String];
        v98 = [v156 count];
        v99 = [v26 debugDescription];
        v100 = [v99 UTF8String];
        v101 = [v26 uniquePid];
        [v26 mainBinaryLoadInfo];
        v102 = (void *)objc_claimAutoreleasedReturnValue();
        v103 = [v102 debugDescription];
        v104 = [v103 UTF8String];
        *(_DWORD *)buf = 67111426;
        *(_DWORD *)v177 = (_DWORD)v163;
        *(_WORD *)&v177[4] = 2048;
        *(void *)&v177[6] = v149;
        *(_WORD *)&v177[14] = 2080;
        *(void *)&v177[16] = v142;
        v178 = 2048;
        v179 = v139;
        v180 = 2080;
        v181 = v138;
        v182 = 2048;
        v183 = a3;
        v184 = 2048;
        v185 = v98;
        v92 = log;
        v186 = 2080;
        v187 = v100;
        v188 = 2048;
        v189 = v101;
        v190 = 2080;
        v191 = v104;
        _os_log_error_impl( &dword_186C92000,  log,  OS_LOG_TYPE_ERROR,  "_tasksByPid[%d] (count %lu) .lastObject %s (unique pid %llu, main binary %s) != tasksWithUniquePid[%llu] (coun t %lu) .lastObject %s (unique pid %llu, main binary %s)",  buf,  0x62u);
      }

      *__error() = v175;
      v105 = (void *)*((void *)a1 + 2);
      int v21 = v163;
      [MEMORY[0x189607968] numberWithInt:v163];
      loga = (os_log_t)objc_claimAutoreleasedReturnValue();
      [v105 objectForKeyedSubscript:loga];
      v174 = (id)objc_claimAutoreleasedReturnValue();
      [v174 count];
      v106 = (void *)*((void *)a1 + 2);
      [MEMORY[0x189607968] numberWithInt:v163];
      v172 = (void *)objc_claimAutoreleasedReturnValue();
      [v106 objectForKeyedSubscript:v172];
      v169 = (void *)objc_claimAutoreleasedReturnValue();
      [v169 lastObject];
      newValueb = (id)objc_claimAutoreleasedReturnValue();
      v162 = [newValueb debugDescription];
      [v162 UTF8String];
      v107 = (void *)*((void *)a1 + 2);
      [MEMORY[0x189607968] numberWithInt:v163];
      v160 = (void *)objc_claimAutoreleasedReturnValue();
      [v107 objectForKeyedSubscript:v160];
      v153 = (void *)objc_claimAutoreleasedReturnValue();
      [v153 lastObject];
      v151 = (void *)objc_claimAutoreleasedReturnValue();
      [v151 uniquePid];
      v108 = (void *)*((void *)a1 + 2);
      [MEMORY[0x189607968] numberWithInt:v163];
      v148 = (void *)objc_claimAutoreleasedReturnValue();
      [v108 objectForKeyedSubscript:v148];
      v146 = (void *)objc_claimAutoreleasedReturnValue();
      [v146 lastObject];
      v144 = (void *)objc_claimAutoreleasedReturnValue();
      [v144 mainBinaryLoadInfo];
      v109 = (void *)objc_claimAutoreleasedReturnValue();
      v110 = [v109 debugDescription];
      [v110 UTF8String];
      [v156 count];
      v111 = [v26 debugDescription];
      a1 = (id)[v111 UTF8String];
      [v26 uniquePid];
      [v26 mainBinaryLoadInfo];
      uint64_t v26 = (_DWORD *)objc_claimAutoreleasedReturnValue();
      v112 = [v26 debugDescription];
      [v112 UTF8String];
      _SASetCrashLogMessage( 1447,  "_tasksByPid[%d] (count %lu) .lastObject %s (unique pid %llu, main binary %s) != tasksWithUniquePid[%llu] (count %lu) .lastObject %s (unique pid %llu, main binary %s)",  v113,  v114,  v115,  v116,  v117,  v118,  (char)v163);

      _os_crash();
      __break(1u);
LABEL_87:
      v119 = *__error();
      _sa_logt();
      v120 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v120, OS_LOG_TYPE_ERROR))
      {
        v121 = (void *)*((void *)a1 + 2);
        [MEMORY[0x189607968] numberWithInt:v163];
        v122 = (void *)objc_claimAutoreleasedReturnValue();
        [v121 objectForKeyedSubscript:v122];
        v123 = (void *)objc_claimAutoreleasedReturnValue();
        v124 = [v123 count];
        v125 = [v26 debugDescription];
        v126 = [v125 UTF8String];
        *(_DWORD *)buf = 134218242;
        *(void *)v177 = v124;
        *(_WORD *)&v177[8] = 2080;
        *(void *)&v177[10] = v126;
        _os_log_error_impl( &dword_186C92000,  v120,  OS_LOG_TYPE_ERROR,  "_tasksByPid[-1] (count %lu) does not contain task %s that didn't have pid until now",  buf,  0x16u);
      }

      *__error() = v119;
      v127 = (void *)*((void *)a1 + 2);
      [MEMORY[0x189607968] numberWithInt:v163];
      v128 = (void *)objc_claimAutoreleasedReturnValue();
      [v127 objectForKeyedSubscript:v128];
      v129 = (void *)objc_claimAutoreleasedReturnValue();
      v130 = [v129 count];
      v131 = [v26 debugDescription];
      [v131 UTF8String];
      _SASetCrashLogMessage( 1458,  "_tasksByPid[-1] (count %lu) does not contain task %s that didn't have pid until now",  v132,  v133,  v134,  v135,  v136,  v137,  v130);

      _os_crash();
      __break(1u);
      goto LABEL_90;
    }

    if (v25)
    {
      a2 = [v25 pid];
LABEL_29:
      if ((-[SATask correspondsToUniquePid:name:loadInfos:numLoadInfos:textExecLoadInfos:numTextExecLoadInfos:architecture:sharedCache:]( (uint64_t)v26,  a3,  v21,  a6,  a7,  a9,  a10,  a12,  v174) & 1) != 0)
      {
LABEL_30:
        if (a5)
        {
          v45 = a5;
          v46 = objc_getProperty(v26, v42, 272LL, 1);

          if (!v46)
          {
            v47 = v24;
            [v47 reverseObjectEnumerator];
            v48 = (void *)objc_claimAutoreleasedReturnValue();
            [v48 nextObject];
            v49 = (void *)objc_claimAutoreleasedReturnValue();
            if (v49)
            {
              v50 = v24;
              v51 = +[SATimestamp timestampWithMachAbsTime:machAbsTimeSec:machContTime:machContTimeSec:wallTime:]( &OBJC_CLASS___SATimestamp,  "timestampWithMachAbsTime:machAbsTimeSec:machContTime:machContTimeSec:wallTime:",  0LL,  0LL,  0.0,  0.0,  (double)v45 - *MEMORY[0x189604DA8]);
              objc_setProperty_atomic(v49, v52, v51, 272LL);
              [v49 execTimestamp];
              v53 = (void *)objc_claimAutoreleasedReturnValue();

              if (v53)
              {
                [v49 execTimestamp];
                v54 = (void *)objc_claimAutoreleasedReturnValue();
                -[SASampleStore _backfillPidStartTimestamp:toPreviousTasksEnumerator:execTimestampOfNextTask:]( v51,  v48,  v54);
              }

              uint64_t v24 = v50;
            }
          }
        }

        -[SASampleStore addNewImageInfos:numLoadInfos:name:sharedCache:architecture:toTask:]( (uint64_t)a1,  (uint64_t)a6,  a7,  v21,  v174,  a12,  v26);
        [v26 exitTimestamp];
        v55 = (void *)objc_claimAutoreleasedReturnValue();

        int v21 = newValue;
        if (v55) {
          objc_setProperty_atomic(v26, v56, newValue, 232LL);
        }
        uint64_t v26 = v26;
        v57 = v26;
        goto LABEL_72;
      }

      goto LABEL_24;
    }

    a2 = 0xFFFFFFFFLL;
    goto LABEL_47;
  }

  if ((_DWORD)a2 == -1)
  {
    v78 = *__error();
    _sa_logt();
    uint64_t v26 = (_DWORD *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled((os_log_t)v26, OS_LOG_TYPE_ERROR))
    {
      if (a7)
      {
        uuidForBytes((uint64_t)a6 + 8);
        a1 = (id)objc_claimAutoreleasedReturnValue();
        [a1 UUIDString];
        uint64_t v20 = (os_log_s *) objc_claimAutoreleasedReturnValue();
        v79 = (const char *)-[os_log_s UTF8String](v20, "UTF8String");
      }

      else
      {
        v79 = "no load info";
      }

      *(_DWORD *)buf = 136315394;
      *(void *)v177 = v21;
      *(_WORD *)&v177[8] = 2080;
      *(void *)&v177[10] = v79;
      _os_log_error_impl( &dword_186C92000,  (os_log_t)v26,  OS_LOG_TYPE_ERROR,  "unknown uniquepid and pid for %s (%s)",  buf,  0x16u);
      if (a7)
      {
      }
    }

    *__error() = v78;
    if (a7)
    {
      uuidForBytes((uint64_t)a6 + 8);
      uint64_t v26 = (_DWORD *)objc_claimAutoreleasedReturnValue();
      a1 = [v26 UUIDString];
      [a1 UTF8String];
      _SASetCrashLogMessage(1480, "unknown uniquepid and pid for %s (%s)", v86, v87, v88, v89, v90, v91, (char)v21);
    }

    else
    {
      _SASetCrashLogMessage(1480, "unknown uniquepid and pid for %s (%s)", v80, v81, v82, v83, v84, v85, (char)v21);
    }

    _os_crash();
    __break(1u);
    goto LABEL_84;
  }

  v39 = (void *)*((void *)a1 + 2);
  [MEMORY[0x189607968] numberWithInt:a2];
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  [v39 objectForKeyedSubscript:v40];
  uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v24)
  {
    uint64_t v26 = 0LL;
    goto LABEL_47;
  }

  v41 = [v24 lastObject];
  uint64_t v26 = (_DWORD *)v41;
  if (!v41)
  {
LABEL_47:
    uint64_t v44 = 1;
    goto LABEL_48;
  }

  if (-[SATask correspondsToPid:name:loadInfos:numLoadInfos:textExecLoadInfos:numTextExecLoadInfos:architecture:sharedCache:]( v41,  a2,  v21,  a6,  a7,  a9,  a10,  a12,  v174)) {
    goto LABEL_30;
  }
LABEL_24:
  [v26 exitTimestamp];
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  if (v43)
  {
  }

  else if (*((void *)a1 + 45) >= 2uLL)
  {
    -[SASampleStore task:exitedAtTimestamp:]((uint64_t)a1, v26, newValue);
  }

  uint64_t v44 = 0;
LABEL_48:
  if ((*((_BYTE *)a1 + 408) & 2) != 0)
  {
    v60 = SAExecutablePath(a2, v21);
    v58 = a2;
    v59 = (void *)v60;
  }

  else
  {
    v58 = a2;
    v59 = 0LL;
  }
  v61 = +[SATask taskWithPid:uniquePid:name:mainBinaryPath:pidStartTime:loadInfos:numLoadInfos:textExecLoadInfos:numTextExecLoadInfos:architecture:sharedCache:]( (uint64_t)&OBJC_CLASS___SATask,  v58,  a3,  (uint64_t)v21,  v59,  a5,  (uint64_t)a6,  a7,  (uint64_t)a9,  a10,  a12,  v174);
  v57 = v61;
  int v21 = newValue;
  if ((v44 & 1) == 0 && *((void *)a1 + 45) >= 2uLL)
  {
    if (v61)
    {
      objc_setProperty_atomic(v61, v62, newValue, 224LL);
      v64 = objc_getProperty(v57, v63, 272LL, 1);
      if (v64)
      {
        v66 = v64;
        v67 = v26 ? objc_getProperty(v26, v65, 272LL, 1) : 0LL;
        v68 = v67;

        if (!v68)
        {
          v70 = objc_getProperty(v57, v69, 272LL, 1);
          v71 = newValue;
          v72 = v70;
          [v24 reverseObjectEnumerator];
          v73 = (void *)objc_claimAutoreleasedReturnValue();
          -[SASampleStore _backfillPidStartTimestamp:toPreviousTasksEnumerator:execTimestampOfNextTask:](v72, v73, v71);
        }
      }
    }
  }

  -[SASampleStore addTask:]((uint64_t)a1, v57);
  v74 = *((void *)a1 + 51);
  if ((v74 & 2) == 0) {
    goto LABEL_71;
  }
  if ((a15 & 1) != 0) {
    goto LABEL_69;
  }
  if ((v74 & 0x80) != 0)
  {
    [v57 binaryLoadInfos];
    v75 = (void *)objc_claimAutoreleasedReturnValue();
    if (![v75 count] || (v158 & 1) != 0 || (a11 & 1) != 0 || !objc_msgSend(v57, "pid"))
    {

LABEL_69:
      -[SATask gatherLoadInfoFromLiveProcessWithDataGatheringOptions:additionalCSSymbolicatorFlags:]( (uint64_t)v57,  *((void *)a1 + 51),  *((_DWORD *)a1 + 82));
      goto LABEL_70;
    }

    v76 = [v57 uniquePid];

    if (!v76) {
      goto LABEL_69;
    }
  }

LABEL_33:
          -[SATask _gatherDataFromLiveProcessIsLate:mainBinaryPath:]((uint64_t)v30, 0LL, v22);
          uint64_t v19 = v40;
          goto LABEL_34;
        }

    *__error() = v32;
    uint64_t v26 = -1;
    goto LABEL_48;
  }

  uint64_t v19 = open(v18, 0);
  if (v19 == -1)
  {
    uint64_t v32 = *__error();
    _sa_logt();
    uint64_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      uint64_t v35 = *__error();
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)v78 = v35;
      uint64_t v34 = "Unable to open microstackshots file: %{errno}d";
      uint64_t v36 = v33;
      time_t v37 = 8;
LABEL_32:
      _os_log_error_impl(&dword_186C92000, v36, OS_LOG_TYPE_ERROR, v34, buf, v37);
      goto LABEL_33;
    }

    goto LABEL_33;
  }

  uint64_t v20 = gzdopen(v19, "r");
  if (!v20)
  {
    uint64_t v32 = *__error();
    _sa_logt();
    uint64_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      uint64_t v34 = "Unable to gzdopen microstackshots file";
      goto LABEL_31;
    }

    goto LABEL_33;
  }

  int v21 = v20;
  v71 = v17;
  v22 = (char *)calloc(1uLL, 0x20000uLL);
  if (!v22) {
    goto LABEL_57;
  }
  uint64_t v23 = v22;
  uint64_t v24 = gzread(v21, v22, 0x20000u);
  if (v24 < 1)
  {
    uint64_t v26 = 0;
    goto LABEL_39;
  }

  uint64_t v25 = 0LL;
  uint64_t v26 = 0;
  uint64_t v27 = 0x20000LL;
  v73 = v21;
  while (1)
  {
    uint64_t v28 = v25 + v24;
    if (v28) {
      break;
    }
    uint64_t v25 = 0LL;
LABEL_22:
    uint64_t v24 = gzread(v21, &v23[v25], v27 - v25);
    if (v24 <= 0)
    {
      if (v25) {
        goto LABEL_38;
      }
      goto LABEL_39;
    }
  }

  v72 = v24;
  __size = v27;
  int v29 = 0LL;
  while (1)
  {
    uint64_t v25 = v28 - v29;
    int v21 = (gzFile_s *)[objc_alloc(MEMORY[0x189603F48]) initWithBytesNoCopy:&v23[v29] length:v28 - v29 freeWhenDone:0];
    v30 = -[SASampleStore _addMicrostackshotFromData:ofTypes:inTimeRangeStart:end:onlyPid:onlyTid:statistics:]( (uint64_t)self,  v21,  a4,  a7,  a8,  v75,  a5,  a6);
    if (v30 <= 0) {
      break;
    }
    v29 += v30;
    if (v28 < v29)
    {
      uint64_t v26 = *__error();
      _sa_logt();
      v41 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        *(void *)v78 = v29;
        *(_WORD *)&v78[8] = 2048;
        *(void *)&v78[10] = v28;
        _os_log_error_impl( &dword_186C92000,  v41,  OS_LOG_TYPE_ERROR,  "parsed beyond end of microstackshots buffer: %lu > %lu",  buf,  0x16u);
      }

      *__error() = v26;
      _SASetCrashLogMessage( 6786,  "parsed beyond end of microstackshots buffer: %lu > %lu",  v48,  v49,  v50,  v51,  v52,  v53,  v29);
      _os_crash();
      __break(1u);
LABEL_52:
      v54 = *__error();
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)v78 = v54;
      uint64_t v44 = "Error while reading microstackshots file: %{errno}d";
      v45 = v41;
      v46 = 8;
LABEL_53:
      _os_log_error_impl(&dword_186C92000, v45, OS_LOG_TYPE_ERROR, v44, buf, v46);
      goto LABEL_46;
    }

    ++v26;

    uint64_t v25 = v28 - v29;
    if (v28 <= v29) {
      goto LABEL_16;
    }
  }

  if ((v30 & 0x8000000000000000LL) == 0)
  {

LABEL_16:
    int v21 = v73;
    if (!v25) {
      goto LABEL_19;
    }
    if (v29)
    {
      memmove(v23, &v23[v29], v25);
LABEL_19:
      uint64_t v27 = __size;
      goto LABEL_22;
    }

    uint64_t v27 = 2 * __size;
    uint64_t v31 = (char *)reallocf(v23, 2 * __size);
    if (v31)
    {
      uint64_t v23 = v31;
      goto LABEL_22;
    }

    v55 = *__error();
    _sa_logt();
    v56 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(void *)v78 = 2 * __size;
      _os_log_error_impl(&dword_186C92000, v56, OS_LOG_TYPE_ERROR, "realloc of size %lu failed", buf, 0xCu);
    }

    *__error() = v55;
    _SASetCrashLogMessage(6799, "realloc of size %lu failed", v57, v58, v59, v60, v61, v62, 2 * __size);
    _os_crash();
    __break(1u);
LABEL_57:
    v63 = *__error();
    _sa_logt();
    v64 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)v78 = 0x20000;
      _os_log_error_impl(&dword_186C92000, v64, OS_LOG_TYPE_ERROR, "calloc of %d failed", buf, 8u);
    }

    *__error() = v63;
    _SASetCrashLogMessage(6752, "calloc of %d failed", v65, v66, v67, v68, v69, v70, 0);
    _os_crash();
    __break(1u);
  }

  if (!v26) {
    uint64_t v26 = -1;
  }

  uint64_t v25 = v28;
  int v21 = v73;
  uint64_t v24 = v72;
LABEL_38:
  tm v38 = v24;
  objc_msgSend(v75, "setBytes_not_microstackshots:", objc_msgSend(v75, "bytes_not_microstackshots") + v25);
  uint64_t v24 = v38;
LABEL_39:
  if (v24 == -1)
  {
    errnum = 0;
    v39 = gzerror(v21, &errnum);
    v40 = errnum;
    LODWORD(v29) = *__error();
    _sa_logt();
    v41 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v42 = os_log_type_enabled(v41, OS_LOG_TYPE_ERROR);
    if (v40 == -1)
    {
      if (v42) {
        goto LABEL_52;
      }
    }

    else if (v42)
    {
      v43 = "";
      if (v39) {
        v43 = v39;
      }
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)v78 = errnum;
      *(_WORD *)&v78[4] = 2080;
      *(void *)&v78[6] = v43;
      uint64_t v44 = "Error while reading microstackshots file: %d %s";
      v45 = v41;
      v46 = 18;
      goto LABEL_53;
    }

      uint64_t v31 = 0;
      v14[5] = v11;
      double v6 = (uint64_t)v14;
LABEL_34:
      KTraceStringFromArguments(a1[7], a2, 3u);
      uint64_t v33 = (id)objc_claimAutoreleasedReturnValue();
      if (!v33)
      {
        if (qword_18C4B13C0)
        {
          uint64_t v34 = *__error();
          uint64_t v35 = (FILE *)qword_18C4B13C0;
          uint64_t v36 = *(void *)a2;
          time_t v37 = *(void *)(a2 + 40);
          tm v38 = [(id)v6 debugDescription];
          fprintf( v35,  "%'llu WARNING: Start for dyld info is empty string on thread 0x%llx: %s\n",  v36,  v37,  (const char *)[v38 UTF8String]);

          *__error() = v34;
        }

        uint64_t v33 = objc_alloc_init(MEMORY[0x189607940]);
      }

      if ((v31 & 1) == 0)
      {
        if (objc_getProperty((id)v6, v32, 48LL, 1))
        {
          v40 = *__error();
          _sa_logt();
          v41 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
          {
            Property = objc_getProperty((id)v6, v42, 48LL, 1);
            *(_DWORD *)buf = 138412546;
            v47 = Property;
            v48 = 2112;
            v49 = v33;
            _os_log_debug_impl( &dword_186C92000,  v41,  OS_LOG_TYPE_DEBUG,  "Throwing out previous path %@ for new path %@",  buf,  0x16u);
          }

          *__error() = v40;
        }

        objc_setProperty_atomic((id)v6, v39, v33, 48LL);
        *(_BYTE *)(v6 + 10) = 0;
      }

LABEL_45:
      if ((*(_BYTE *)(a2 + 48) & 2) != 0)
      {
        if (v6)
        {
          *(_BYTE *)(v6 + 10) = 1;
          if (-[SASampleStore checkDyldInfoCompletion:](a1[5], (void *)v6))
          {
            v43 = (void *)a1[4];
            [MEMORY[0x189607968] numberWithUnsignedLongLong:*(void *)(a2 + 40)];
            uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue();
            [v43 setObject:0 forKeyedSubscript:v44];
          }
        }
      }

      goto LABEL_49;
    }

    if (qword_18C4B13C0)
    {
      uint64_t v28 = *__error();
      fprintf( (FILE *)qword_18C4B13C0,  "%'llu WARNING: Unable to determine pid for dyld string on thread 0x%llx: %d\n",  *(void *)a2,  *(void *)(a2 + 40),  *(_DWORD *)buf);
      *__error() = v28;
    }

    double v6 = 0LL;
  }

  if (a9)
  {
    uint64_t v33 = posix_spawn_file_actions_addinherit_np(&v94, 2);
    if (v33)
    {
      uint64_t v20 = v33;
      uint64_t v34 = *__error();
      _sa_logt();
      uint64_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v96) = v20;
        uint64_t v36 = "Unable to inherit stderr: %{errno}d";
LABEL_70:
        _os_log_error_impl(&dword_186C92000, v35, OS_LOG_TYPE_ERROR, v36, buf, 8u);
        goto LABEL_71;
      }

      goto LABEL_71;
    }

    goto LABEL_53;
  }

  if (!a10)
  {
    if ((v28 & 0x80000000) != 0)
    {
      LODWORD(v2_Block_object_dispose(&STACK[0x288], 8) = open("/dev/null", 1);
      if ((v28 & 0x80000000) != 0)
      {
        uint64_t v20 = *__error();
        uint64_t v24 = *__error();
        _sa_logt();
        uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
          goto LABEL_44;
        }
        *(_DWORD *)buf = 67109120;
        LODWORD(v96) = v20;
        uint64_t v26 = "Unable to open /dev/null: %{errno}d";
        goto LABEL_43;
      }
    }

    time_t v37 = posix_spawn_file_actions_adddup2(&v94, v28, 2);
    if (!v37) {
      goto LABEL_53;
    }
    uint64_t v20 = v37;
    v30 = *__error();
    _sa_logt();
    uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
LABEL_49:

      *__error() = v30;
      posix_spawn_file_actions_destroy(&v94);
LABEL_73:
      close(v28);
      goto LABEL_74;
    }

    *(_DWORD *)buf = 67109120;
    LODWORD(v96) = v20;
LABEL_105:
    _os_log_error_impl(&dword_186C92000, v31, OS_LOG_TYPE_ERROR, "Unable to set posix file dup2: %{errno}d", buf, 8u);
    goto LABEL_49;
  }

  if (pipe(v98))
  {
    uint64_t v20 = *__error();
    uint64_t v34 = *__error();
    _sa_logt();
    uint64_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v96) = v20;
      uint64_t v36 = "Unable to open pipe: %{errno}d";
      goto LABEL_70;
    }

  v59 = @"Bad thread name index";
LABEL_44:
  +[SAException exceptionWithName:reason:userInfo:]( &OBJC_CLASS___SAException,  "exceptionWithName:reason:userInfo:",  @"Decoding failure",  v59,  0LL);
  v60 = (id)objc_claimAutoreleasedReturnValue();
  objc_exception_throw(v60);
  -[SAThreadState applyPAStyleSampleTimestamp:]();
}
    }

    int v21 = [obj countByEnumeratingWithState:&v159 objects:v180 count:16];
  }

  while (v21);

  if (!v136)
  {
    v136 = 0LL;
    goto LABEL_70;
  }

  v123 = [(id)v127 mainBinary];
  if (!v123)
  {
LABEL_99:
    v105 = *__error();
    _sa_logt();
    v106 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v106, OS_LOG_TYPE_ERROR))
    {
      v107 = [(id)v127 debugDescription];
      v108 = [v107 UTF8String];
      [(id)v127 mainBinaryLoadInfo];
      v109 = (void *)objc_claimAutoreleasedReturnValue();
      v110 = [v109 debugDescription];
      v111 = [v110 UTF8String];
      LODWORD(dest.receiver) = 136315394;
      *(id *)((char *)&p_dest->receiver + 4) = (id)v108;
      WORD2(dest.super_class) = 2080;
      *(Class *)((char *)&p_dest->super_class + 6) = (Class)v111;
      _os_log_error_impl( &dword_186C92000,  v106,  OS_LOG_TYPE_ERROR,  "No main binary for %s with main binary load info %s",  (uint8_t *)&dest,  0x16u);
    }

    *__error() = v105;
    v112 = [(id)v127 debugDescription];
    v113 = [v112 UTF8String];
    [(id)v127 mainBinaryLoadInfo];
    v114 = (void *)objc_claimAutoreleasedReturnValue();
    v115 = [v114 debugDescription];
    [v115 UTF8String];
    _SASetCrashLogMessage( 8047,  "No main binary for %s with main binary load info %s",  v116,  v117,  v118,  v119,  v120,  v121,  v113);

    _os_crash();
    __break(1u);
  }

  objc_msgSend(v126, "objectForKeyedSubscript:");
  v124 = (void *)objc_claimAutoreleasedReturnValue();
  if ([v124 count])
  {
    v157 = 0u;
    v158 = 0u;
    v155 = 0u;
    v156 = 0u;
    [v126 objectForKeyedSubscript:v123];
    v128 = (id)objc_claimAutoreleasedReturnValue();
    v130 = [v128 countByEnumeratingWithState:&v155 objects:v179 count:16];
    if (v130)
    {
      v129 = *(void *)v156;
      do
      {
        for (k = 0LL; k != v130; ++k)
        {
          if (*(void *)v156 != v129) {
            objc_enumerationMutation(v128);
          }
          uint64_t v33 = *(void **)(*((void *)&v155 + 1) + 8 * k);
          v151 = 0u;
          v152 = 0u;
          v153 = 0u;
          v154 = 0u;
          [v136 binaryLoadInfos];
          uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue();
          uint64_t v35 = [v34 countByEnumeratingWithState:&v151 objects:v178 count:16];
          if (v35)
          {
            uint64_t v36 = *(void *)v152;
            while (2)
            {
              for (m = 0LL; m != v35; ++m)
              {
                if (*(void *)v152 != v36) {
                  objc_enumerationMutation(v34);
                }
                tm v38 = *(void **)(*((void *)&v151 + 1) + 8 * m);
                [v38 binary];
                v39 = (void *)objc_claimAutoreleasedReturnValue();
                [v33 binary];
                v40 = (void *)objc_claimAutoreleasedReturnValue();
                if (v39 == v40)
                {
                  [v38 segment];
                  v41 = (void *)objc_claimAutoreleasedReturnValue();
                  [v33 segment];
                  v42 = (void *)objc_claimAutoreleasedReturnValue();
                  v43 = v41 == v42;

                  if (v43)
                  {
                    uint64_t v44 = [v38 loadAddress];
                    if (v33) {
                      v33[3] = v44;
                    }
                    goto LABEL_56;
                  }
                }

                else
                {
                }
              }

              uint64_t v35 = [v34 countByEnumeratingWithState:&v151 objects:v178 count:16];
              if (v35) {
                continue;
              }
              break;
            }
          }

    v45 = 0LL;
  }

LABEL_19:
        goto LABEL_20;
      }
    }

    else
    {
      uint64_t v24 = 0LL;
      uint64_t v19 = v33;
    }

    a5 = v32;
    a4 = v31;
    a7 = v72;
    goto LABEL_20;
  }

  uint64_t v20 = *(void **)(a1 + 8);
  objc_msgSend(MEMORY[0x189607968], "numberWithUnsignedLongLong:");
  int v21 = (void *)objc_claimAutoreleasedReturnValue();
  [v20 objectForKeyedSubscript:v21];
  v22 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v22)
  {
    uint64_t v24 = 0LL;
    goto LABEL_20;
  }

  uint64_t v23 = [v22 lastObject];
  uint64_t v24 = (id)v23;
  if (!v23) {
    goto LABEL_20;
  }
  if (!-[SATask correspondsToUniquePid:name:loadInfos:numLoadInfos:textExecLoadInfos:numTextExecLoadInfos:architecture:sharedCache:]( v23,  *(void *)(a2 + 8),  a3,  a4,  a5,  0LL,  0,  a9,  v18))
  {
    [v24 exitTimestamp];
    time_t v37 = (void *)objc_claimAutoreleasedReturnValue();
    if (v37) {
      goto LABEL_19;
    }
    goto LABEL_17;
  }

  v71 = (uint64_t)a4;
  v74 = a5;
  v76 = v19;
  uint64_t v25 = *(void **)(a1 + 16);
  [MEMORY[0x189607968] numberWithInt:*(unsigned int *)(a2 + 4)];
  uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue();
  [v25 objectForKeyedSubscript:v26];
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue();
  [v27 lastObject];
  uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue();
  [v22 lastObject];
  int v29 = (void *)objc_claimAutoreleasedReturnValue();

  if (v28 != v29)
  {
    v77 = *__error();
    _sa_logt();
    log = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      uint64_t v44 = *(void **)(a1 + 16);
      [MEMORY[0x189607968] numberWithInt:*(unsigned int *)(a2 + 4)];
      v75 = (void *)objc_claimAutoreleasedReturnValue();
      [v44 objectForKeyedSubscript:v75];
      v73 = (void *)objc_claimAutoreleasedReturnValue();
      v69 = [v73 count];
      v45 = *(void **)(a1 + 16);
      [MEMORY[0x189607968] numberWithInt:*(unsigned int *)(a2 + 4)];
      v70 = (void *)objc_claimAutoreleasedReturnValue();
      [v45 objectForKeyedSubscript:v70];
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      [v46 lastObject];
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      v48 = [v47 debugDescription];
      v49 = [v48 UTF8String];
      v50 = [v22 count];
      [v22 lastObject];
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      v52 = [v51 debugDescription];
      *(_DWORD *)buf = 134218754;
      v81 = v69;
      v82 = 2080;
      v83 = v49;
      v84 = 2048;
      v85 = v50;
      v86 = 2080;
      v87 = [v52 UTF8String];
      _os_log_error_impl( &dword_186C92000,  log,  OS_LOG_TYPE_ERROR,  "_tasksByPid[@(task_snap->pid)] (count %lu) .lastObject %s != tasksWithUniquePid (count %lu) .lastObject %s",  buf,  0x2Au);
    }

    *__error() = v77;
    v53 = *(void **)(a1 + 16);
    [MEMORY[0x189607968] numberWithInt:*(unsigned int *)(a2 + 4)];
    loga = (os_log_t)objc_claimAutoreleasedReturnValue();
    [v53 objectForKeyedSubscript:loga];
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    v55 = [v54 count];
    v56 = *(void **)(a1 + 16);
    [MEMORY[0x189607968] numberWithInt:*(unsigned int *)(a2 + 4)];
    v57 = (void *)objc_claimAutoreleasedReturnValue();
    [v56 objectForKeyedSubscript:v57];
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    [v58 lastObject];
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    v60 = [v59 debugDescription];
    [v60 UTF8String];
    [v22 count];
    [v22 lastObject];
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    v62 = [v61 debugDescription];
    [v62 UTF8String];
    _SASetCrashLogMessage( 1663,  "_tasksByPid[@(task_snap->pid)] (count %lu) .lastObject %s != tasksWithUniquePid (count %lu) .lastObject %s",  v63,  v64,  v65,  v66,  v67,  v68,  v55);

    _os_crash();
    __break(1u);
  }

  -[SASampleStore addNewImageInfos:numLoadInfos:name:sharedCache:architecture:toTask:](a1, v71, v74, a3, v18, a9, v24);
  uint64_t v24 = v24;
  v30 = v24;
  uint64_t v19 = v76;
LABEL_34:

  return v30;
}

        if (v17) {
          Property = objc_getProperty(v17, v15, 40LL, 1);
        }
        else {
          Property = 0LL;
        }
        int v21 = Property;
        v76[0] = v13;
        v76[1] = 3221225472LL;
        v76[2] = __28__SASampleStore_symbolicate__block_invoke_341;
        v76[3] = &unk_189F61930;
        v22 = v70;
        v76[4] = v2;
        v77 = v22;
        v78 = v19;
        +[SAFrame enumerateFrameTree:block:]((uint64_t)&OBJC_CLASS___SAFrame, v21, v76);

        ++v16;
      }

      while (v16 != v71);
      uint64_t v33 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v83,  v97,  16LL);
      v71 = v33;
    }

    while (v33);
LABEL_42:
    uint64_t v34 = v13;
    unsigned int v8 = v62 + 1;

    v73[0] = v34;
    v73[1] = 3221225472LL;
    v73[2] = __28__SASampleStore_symbolicate__block_invoke_2;
    v73[3] = &unk_189F619A8;
    v73[4] = v2;
    v75 = (char)v9;
    uint64_t v35 = v70;
    v74 = v35;
    -[SASampleStore enumerateTasks:](v2, "enumerateTasks:", v73);
    v72[0] = v34;
    v72[1] = 3221225472LL;
    v72[2] = __28__SASampleStore_symbolicate__block_invoke_5;
    v72[3] = &unk_189F619F0;
    v72[4] = v2;
    uint64_t v36 = v61;
    [v61 enumerateKeysAndObjectsUsingBlock:v72];
    -[SASampleStore fixupAllFrames]((id *)&v2->super.isa);
    int v9 = (void *)objc_claimAutoreleasedReturnValue();
    if ([v9 count])
    {
      if (v63 && [v63 isEqualToSet:v9])
      {
        time_t v37 = *__error();
        _sa_logt();
        tm v38 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v38, OS_LOG_TYPE_FAULT))
        {
          v52 = COERCE_DOUBLE([v9 count]);
          [v9 anyObject];
          v53 = (void *)objc_claimAutoreleasedReturnValue();
          v54 = +[SABinary binaryWithUUID:absolutePath:](&OBJC_CLASS___SABinary, "binaryWithUUID:absolutePath:", v53, 0LL);
          [v54 debugDescription];
          v55 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = v60;
          v91 = v52;
          v92 = 1024;
          v93 = v62 + 1;
          v94 = 2112;
          v95 = v55;
          _os_log_fault_impl( &dword_186C92000,  v38,  OS_LOG_TYPE_FAULT,  "Symbolication loop has same set of UUIDs to symbolicate! %lu binaries need more symbolication after iteratio n %d (including %@)",  buf,  0x1Cu);

          id v2 = v64;
          uint64_t v36 = v61;
        }

        v39 = 0;
        uint64_t v10 = 0;
        *__error() = v37;
      }

      else
      {
        v40 = *__error();
        _sa_logt();
        v41 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v42 = v41;
        if (v62 < 0x63)
        {
          if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
          {
            v43 = COERCE_DOUBLE([v9 count]);
            [v9 anyObject];
            uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue();
            v45 = +[SABinary binaryWithUUID:absolutePath:](&OBJC_CLASS___SABinary, "binaryWithUUID:absolutePath:", v44, 0LL);
            [v45 debugDescription];
            v46 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = v60;
            v91 = v43;
            v92 = 1024;
            v93 = v62 + 1;
            v94 = 2112;
            v95 = v46;
            _os_log_impl( &dword_186C92000,  v42,  OS_LOG_TYPE_INFO,  "%lu binaries need more symbolication after iteration %d (including %@)",  buf,  0x1Cu);

            id v2 = v64;
          }

          *__error() = v40;
          v47 = v9;

          v39 = 1;
          v63 = v47;
          uint64_t v10 = 1;
        }

        else
        {
          if (os_log_type_enabled(v41, OS_LOG_TYPE_FAULT))
          {
            v48 = COERCE_DOUBLE([v9 count]);
            [v9 anyObject];
            v49 = (void *)objc_claimAutoreleasedReturnValue();
            v50 = +[SABinary binaryWithUUID:absolutePath:](&OBJC_CLASS___SABinary, "binaryWithUUID:absolutePath:", v49, 0LL);
            [v50 debugDescription];
            v51 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = v60;
            v91 = v48;
            v92 = 1024;
            v93 = v62 + 1;
            v94 = 2112;
            v95 = v51;
            _os_log_fault_impl( &dword_186C92000,  v42,  OS_LOG_TYPE_FAULT,  "Hit symbolication loop count limit! %lu binaries need more symbolication after iteration %d (including %@)",  buf,  0x1Cu);

            id v2 = v64;
          }

          v39 = 0;
          uint64_t v10 = 0;
          *__error() = v40;
        }

        uint64_t v36 = v61;
      }
    }

    else
    {
      uint64_t v10 = 0;
      v39 = 1;
    }

    double v7 = v63;
    LOBYTE(v9) = v65;
  }

  while ((v39 & 1) != 0);
  v56 = *__error();
  _sa_logt();
  v57 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
  {
    v58 = mach_absolute_time();
    v59 = SASecondsFromMachTimeUsingLiveTimebase(v58);
    *(_DWORD *)buf = 134218240;
    v91 = v59 - v4;
    v92 = 1024;
    v93 = v8;
    _os_log_impl( &dword_186C92000,  v57,  OS_LOG_TYPE_INFO,  "Symbolication done (took %.3f seconds, %d iterations)",  buf,  0x12u);
  }

  *__error() = v56;
}

  +[SASourceInfo sourceInfoWithOffsetIntoSegment:length:lineNum:columnNum:filePath:]( (uint64_t)&OBJC_CLASS___SASourceInfo,  a2,  a3,  a4,  a5,  v9);
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue();
  [v10[4] insertObject:v17 atIndex:v15];
LABEL_20:
  objc_sync_exit(v10);

LABEL_21:
  return v17;
}

  return v17;
}

LABEL_20:
      _Block_object_dispose(&v17, 8);
    }
  }
}
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
}

LABEL_30:
          uint64_t v17 = 0x189607000LL;
          uint64_t v25 = v296;
          a2 = v310;
          uint64_t v26 = v316;
        }

        else
        {
          [MEMORY[0x189603FE8] null];
          int v9 = (id)objc_claimAutoreleasedReturnValue();
          v45 = *__error();
          _sa_logt();
          v46 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134217984;
            *(void *)&uint8_t buf[4] = isa;
            _os_log_error_impl( &dword_186C92000,  v46,  OS_LOG_TYPE_ERROR,  "No exclave address space %llu in stackshot",  buf,  0xCu);
          }

          *__error() = v45;
        }

        [*(id *)(v17 + 2408) numberWithUnsignedLongLong:isa];
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        [v306 setObject:v9 forKeyedSubscript:v47];

        if (!v9) {
          goto LABEL_74;
        }
      }

      [MEMORY[0x189603FE8] null];
      v48 = (id)objc_claimAutoreleasedReturnValue();

      if (v9 == v48) {
        goto LABEL_74;
      }
      v311 = a2;
      v315 = v26;
      v321 = 0u;
      v322 = 0u;
      v319 = 0u;
      v320 = 0u;
      v50 = objc_getProperty(a2, v49, 16LL, 1);
      v51 = [v50 countByEnumeratingWithState:&v319 objects:v331 count:16];
      if (!v51)
      {
        uint64_t v18 = 0LL;
        goto LABEL_68;
      }

      v52 = v51;
      uint64_t v18 = 0LL;
      uint64_t v17 = *(void *)v320;
LABEL_38:
      v53 = 0LL;
      while (1)
      {
        v54 = v18;
        if (*(void *)v320 != v17) {
          objc_enumerationMutation(v50);
        }
        superclass = [*(id *)(*((void *)&v319 + 1) + 8 * v53) unsignedLongLongValue];
        if (!v18) {
          break;
        }
        v56 = (__objc2_class *)*((id *)v18 + 5);
        if (!v56) {
          goto LABEL_53;
        }
        v57 = v56;
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v318[0] = MEMORY[0x1895F87A8];
          v318[1] = v21;
          v318[2] = __77__SASampleStore_parseKCDataExclavesContainer_exclaveInfo_primaryDataIsKPerf___block_invoke;
          v318[3] = &__block_descriptor_40_e21_B24__0__SAFrame_8_B16l;
          v318[4] = superclass;
          v58 = v318;
          v59 = v57;
LABEL_46:
          -[__objc2_class objectsPassingTest:](v59, "objectsPassingTest:", v58);
          a2 = (__objc2_class *)objc_claimAutoreleasedReturnValue();
          -[__objc2_class anyObject](a2, "anyObject");
          uint64_t v18 = (char *__ptr32 *)objc_claimAutoreleasedReturnValue();
          goto LABEL_52;
        }

        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          v76 = *__error();
          int v11 = _sa_logt();
          if (os_log_type_enabled((os_log_t)v11, OS_LOG_TYPE_ERROR))
          {
            ClassName = object_getClassName(v57);
            *(_DWORD *)buf = 136315138;
            *(void *)&uint8_t buf[4] = ClassName;
            _os_log_error_impl(&dword_186C92000, (os_log_t)v11, OS_LOG_TYPE_ERROR, "child is %s", buf, 0xCu);
          }

          *__error() = v76;
          v78 = object_getClassName(v57);
          _SASetCrashLogMessage(5929, "child is %s", v79, v80, v81, v82, v83, v84, v78);
          uint64_t v12 = (id)_os_crash();
          __break(1u);
          goto LABEL_89;
        }

        a2 = v57;
        if (superclass == -[__objc2_class address](a2, "address")) {
          uint64_t v18 = a2;
        }
        else {
          uint64_t v18 = 0LL;
        }
        v57 = a2;
LABEL_52:

        if (!v18)
        {
LABEL_53:
          v60 = (char *__ptr32 *)-[SAExclaveFrame initWithExclave:](objc_alloc(&OBJC_CLASS___SAExclaveFrame), v9);
          uint64_t v18 = v60;
          if (v60) {
            *((void *)v60 + 2) = superclass;
          }
          [v9 loadInfos];
          v61 = (void *)objc_claimAutoreleasedReturnValue();

          if (v61)
          {
            a2 = &OBJC_CLASS___SABinaryLoadInfo;
            [v9 loadInfos];
            v63 = (void *)objc_claimAutoreleasedReturnValue();
            v64 = +[SABinaryLoadInfo binaryLoadInfoForAddress:inBinaryLoadInfos:]( &OBJC_CLASS___SABinaryLoadInfo,  "binaryLoadInfoForAddress:inBinaryLoadInfos:",  superclass,  v63);
            if (v18) {
              objc_storeWeak((id *)v18 + 3, v64);
            }
          }

          if (v18) {
            *((void *)v18 + 4) = v54;
          }
          if (v54)
          {
            -[SAFrame _addChildFrame:]((uint64_t)v54, v18);
          }

          else
          {
            v65 = objc_getProperty(v9, v62, 40LL, 1);
            [v65 addObject:v18];
          }
        }

        if (v52 == ++v53)
        {
          v52 = [v50 countByEnumeratingWithState:&v319 objects:v331 count:16];
          if (v52) {
            goto LABEL_38;
          }
LABEL_68:

          v66 = objc_alloc(&OBJC_CLASS___SAExclaveCallstack);
          if (v66)
          {
            v67 = v311->superclass;
            v68 = -[SAExclaveCallstack initWithExclave:leafFrame:]((id *)&v66->super.isa, v9, v18);
            v69 = v68;
            uint64_t v17 = 0x189607000uLL;
            uint64_t v25 = v296;
            if (v68)
            {
              v68[4] = v67->cache;
              v68[3] = v67->superclass;
            }

            v70 = v303;
            if (!v303) {
LABEL_72:
            }
              v70 = objc_alloc_init(MEMORY[0x189603FA8]);
          }

          else
          {
            v69 = 0LL;
            uint64_t v17 = 0x189607000LL;
            v70 = v303;
            uint64_t v25 = v296;
            if (!v303) {
              goto LABEL_72;
            }
          }

          v303 = v70;
          [v70 insertObject:v69 atIndex:0];

          uint64_t v26 = v315;
LABEL_74:

          if (++v26 != v305) {
            goto LABEL_13;
          }
          v71 = [v25 countByEnumeratingWithState:&v323 objects:v332 count:16];
          v305 = v71;
          if (v71) {
            goto LABEL_12;
          }

          int v9 = v277;
          if (v303)
          {
            v72 = (void *)[v303 copy];
            [*(id *)(v17 + 2408) numberWithUnsignedLongLong:*context[1]];
            v73 = (void *)objc_claimAutoreleasedReturnValue();
            [v277 setObject:v72 forKeyedSubscript:v73];

            uint64_t v25 = (void **)v303;
            goto LABEL_82;
          }

    unsigned int v8 = (uint64_t)(a1 + 4);
    double v7 = DescriptionForKCDataType(v6);
    goto LABEL_31;
  }

    if ((a2 & 2) != 0) {
      uint64_t v17 = @"runnable";
    }
    else {
      uint64_t v17 = @"not runnable";
    }
    goto LABEL_36;
  }

  uint64_t v17 = @"running";
LABEL_36:
  uint64_t v13 = [v7 appendString:v17] + v13;
  __int16 v15 = a2 & 0x7F8;
  uint64_t v16 = v15 != 0;
  if (!a3)
  {
    if ((a2 & 0x7F8) == 0) {
      goto LABEL_59;
    }
    goto LABEL_45;
  }

  uint64_t v10 = *a3;
LABEL_38:
  if (((v16 ^ ((v10 & 0x7F8) != 0)) & 1) != 0) {
    goto LABEL_46;
  }
  uint64_t v18 = !v16;
  if ((v10 & 0x7F8) == 0) {
    uint64_t v18 = 1;
  }
  if ((v18 & 1) == 0 && (v15 >> 3) != (v10 >> 3))
  {
LABEL_45:
    uint64_t v16 = 1;
LABEL_46:
    if (v16) {
      uint64_t v19 = objc_msgSend(v7, "printWithFormat:", @"on cpu %u", ((v15 >> 3) - 1));
    }
    else {
      uint64_t v19 = objc_msgSend(v7, "printWithFormat:", @"on cpu UNKNOWN", v22);
    }
    uint64_t v13 = (v19 + v13);
    if (a3)
    {
      uint64_t v10 = *a3;
      goto LABEL_53;
    }

  return a1;
}

LABEL_83:
          v22 = v287 + 1;
          uint64_t v20 = v282;
          if (v287 + 1 == v285)
          {
            v74 = [obj countByEnumeratingWithState:&v327 objects:v333 count:16];
            uint64_t v20 = v282;
            v285 = v74;
            if (!v74)
            {
LABEL_85:

              v75 = 0LL;
              goto LABEL_424;
            }

            goto LABEL_5;
          }

          goto LABEL_6;
        }
      }

      v59 = (__objc2_class *)objc_getProperty(v9, v55, 40LL, 1);
      v57 = v59;
      v317[0] = MEMORY[0x1895F87A8];
      v317[1] = v21;
      v317[2] = __77__SASampleStore_parseKCDataExclavesContainer_exclaveInfo_primaryDataIsKPerf___block_invoke_301;
      v317[3] = &__block_descriptor_40_e21_B24__0__SAFrame_8_B16l;
      v317[4] = superclass;
      v58 = v317;
      goto LABEL_46;
    }

    v86 = (void *)MEMORY[0x186E47ACC](v12);
    v87 = v86;
    v88 = a2->isa;
    v89 = (int)a2->isa->isa;
    if ((v89 & 0xFFFFFFF0) == 0x20) {
      v90 = 17;
    }
    else {
      v90 = (int)a2->isa->isa;
    }
    if (v90 != 19)
    {
      if (v90 != 20)
      {
LABEL_98:
        objc_autoreleasePoolPop(v86);
        goto LABEL_405;
      }

      v236 = v88->superclass;
      if ((__objc2_class *)superclass == v236)
      {
        objc_autoreleasePoolPop(v86);
        uint64_t v17 = 0x189607000LL;
        goto LABEL_3;
      }

      v233 = *__error();
      _sa_logt();
      v234 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v234, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        *(void *)&uint8_t buf[4] = superclass;
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v236;
        _os_log_error_impl( &dword_186C92000,  v234,  OS_LOG_TYPE_ERROR,  "Container end with wrong ID (%llu != %llu)",  buf,  0x16u);
      }

      v75 = 7LL;
LABEL_423:

      *__error() = v233;
      objc_autoreleasePoolPop(v87);
      break;
    }

    v91 = (unint64_t)a2->superclass;
    if ((unint64_t)&v88->cache > v91
      || (isa_high = HIDWORD(v88->isa), (unint64_t)&v88->cache + isa_high > v91)
      || ((v89 & 0xFFFFFFF0) != 0x20 ? (v93 = v89 == 19) : (v93 = 0),
          v93 ? (v94 = isa_high > 3) : (v94 = 0),
          !v94))
    {
      v233 = *__error();
      _sa_logt();
      v234 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v234, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = 2377;
        _os_log_error_impl( &dword_186C92000,  v234,  OS_LOG_TYPE_ERROR,  "Error parsing kcdata buffer: subcontainer of container type %u is invalid",  buf,  8u);
      }

      v75 = 1LL;
      goto LABEL_423;
    }

    v95 = (int)v88->cache;
    if (v95 == 2378)
    {
      v301 = v292;
      cache = (int)a2->isa->cache;
      if (cache == 2378)
      {
        v126 = a2->isa->superclass;
        v308 = objc_alloc_init(MEMORY[0x189603FA8]);
        v127 = a2->superclass;
        v128 = (char *)a2->isa + HIDWORD(a2->isa->isa);
        v129 = v128 + 16;
        a2->isa = (__objc2_class *)(v128 + 16);
        v130 = v128 + 32;
        v286 = v126;
        p_cache = 0LL;
        v278 = v9;
        while (2)
        {
          if (&v130[v129[1]] > (char *)v127 || *v129 == -242132755)
          {
LABEL_388:
            if (p_cache)
            {
              v222 = objc_alloc(&OBJC_CLASS___SAKCDataExclaveSCResult);
              if ([v308 count]) {
                v223 = v308;
              }
              else {
                v223 = 0LL;
              }
              v224 = -[SAKCDataExclaveSCResult initWithInfo:callstacks:](v222, (uint64_t)p_cache, v223);
              [MEMORY[0x189607968] numberWithUnsignedLongLong:*p_cache];
              v225 = (void *)objc_claimAutoreleasedReturnValue();
              [v301 setObject:v224 forKeyedSubscript:v225];

              uint64_t v17 = 0x189607000LL;
              v75 = 0LL;
              goto LABEL_396;
            }

LABEL_393:
            v226 = *__error();
            _sa_logt();
            v227 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v227, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_error_impl( &dword_186C92000,  v227,  OS_LOG_TYPE_ERROR,  "No exclave_scresult_info in scresult container",  buf,  2u);
            }

            *__error() = v226;
            v75 = 1LL;
            int v11 = 0x189603000LL;
            goto LABEL_396;
          }

          v131 = (void *)MEMORY[0x186E47ACC]();
          v132 = v131;
          v133 = a2->isa;
          v134 = (int)a2->isa->isa;
          if ((v134 & 0xFFFFFFF0) == 0x20) {
            v135 = 17;
          }
          else {
            v135 = (int)a2->isa->isa;
          }
          if (v135 != 19)
          {
            if (v135 == 2379)
            {
              p_cache = &v133->cache;
            }

            else if (v135 == 20)
            {
              v221 = v133->superclass;
              if (v286 == v221)
              {
                objc_autoreleasePoolPop(v131);
                uint64_t v17 = 0x189607000LL;
                goto LABEL_388;
              }

              v217 = *__error();
              _sa_logt();
              v218 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v218, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                *(void *)&uint8_t buf[4] = v286;
                *(_WORD *)&buf[12] = 2048;
                *(void *)&buf[14] = v221;
                _os_log_error_impl( &dword_186C92000,  v218,  OS_LOG_TYPE_ERROR,  "Container end with wrong ID (%llu != %llu)",  buf,  0x16u);
              }

              v75 = 7LL;
              uint64_t v17 = 0x189607000LL;
LABEL_377:

              *__error() = v217;
              objc_autoreleasePoolPop(v132);
              int v11 = 0x189603000LL;
LABEL_396:

              goto LABEL_404;
            }

            objc_autoreleasePoolPop(v131);
            goto LABEL_281;
          }

          v136 = (unint64_t)a2->superclass;
          if ((unint64_t)&v133->cache > v136
            || (v137 = HIDWORD(v133->isa), (unint64_t)&v133->cache + v137 > v136)
            || ((v134 & 0xFFFFFFF0) != 0x20 ? (v138 = v134 == 19) : (v138 = 0),
                v138 ? (v139 = v137 > 3) : (v139 = 0),
                !v139))
          {
            v217 = *__error();
            _sa_logt();
            v218 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v218, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)&uint8_t buf[4] = 2378;
              _os_log_error_impl( &dword_186C92000,  v218,  OS_LOG_TYPE_ERROR,  "Error parsing kcdata buffer: subcontainer of container type %u is invalid",  buf,  8u);
            }

            v75 = 1LL;
            goto LABEL_377;
          }

          if (LODWORD(v133->cache) != 2380)
          {
            v75 = SkipToContainerEnd((int **)a2, 1);
            goto LABEL_280;
          }

          obja = v308;
          v140 = a2->isa;
          cache = (int)a2->isa->cache;
          if (cache != 2380) {
            goto LABEL_442;
          }
          v141 = v140->superclass;
          v142 = a2->superclass;
          v143 = (char *)v140 + HIDWORD(v140->isa);
          v144 = v143 + 16;
          a2->isa = (__objc2_class *)(v143 + 16);
          v145 = v143 + 32;
          if (v145 > (char *)v142)
          {
            v146 = 0LL;
            goto LABEL_192;
          }

          v283 = v141;
          v288 = 0LL;
          v146 = 0LL;
          v313 = superclass;
LABEL_199:
          v149 = (void *)MEMORY[0x186E47ACC]();
          v150 = a2->isa;
          v151 = (int)a2->isa->isa;
          v152 = v151 & 0xFFFFFFF0;
          if ((v151 & 0xFFFFFFF0) == 0x20) {
            v153 = 17;
          }
          else {
            v153 = (int)a2->isa->isa;
          }
          else {
            p_superclass = (uint64_t)&v150[1].superclass;
          }
          if (v153 > 19)
          {
            if (v153 == 2381)
            {
              v288 = p_superclass;
            }

            else if (v153 == 20)
            {
              v176 = v150->superclass;
              if (v283 == v176)
              {
                objc_autoreleasePoolPop(v149);
                uint64_t v17 = 0x189607000LL;
LABEL_269:
                if (v288)
                {
                  v172 = -[SAKCDataExclaveCallstack initWithInfo:addresses:]( objc_alloc(&OBJC_CLASS___SAKCDataExclaveCallstack),  v288,  v146);
                  [obja addObject:v172];

                  v75 = 0LL;
                  goto LABEL_279;
                }

LABEL_192:
                v147 = *__error();
                _sa_logt();
                v148 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v148, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)v337 = 0;
                  _os_log_error_impl( &dword_186C92000,  v148,  OS_LOG_TYPE_ERROR,  "No exclave_ipcstackentry_info in ipcstackentry container",  v337,  2u);
                }

                *__error() = v147;
                v75 = 1LL;
                int v11 = 0x189603000LL;
              }

              else
              {
                v156 = v149;
                v173 = *__error();
                _sa_logt();
                v174 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v174, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)v337 = 134218240;
                  *(void *)&v337[4] = v283;
                  *(_WORD *)&v337[12] = 2048;
                  *(void *)&v337[14] = v176;
                  _os_log_error_impl( &dword_186C92000,  v174,  OS_LOG_TYPE_ERROR,  "Container end with wrong ID (%llu != %llu)",  v337,  0x16u);
                }

                v75 = 7LL;
LABEL_273:
                uint64_t v17 = 0x189607000LL;
LABEL_277:

                *__error() = v173;
                objc_autoreleasePoolPop(v156);
                int v11 = 0x189603000LL;
LABEL_278:
                superclass = v313;
              }

LABEL_279:
              int v9 = v278;
LABEL_280:
              objc_autoreleasePoolPop(v132);
              if ((_DWORD)v75) {
                goto LABEL_396;
              }
LABEL_281:
              v127 = a2->superclass;
              v175 = (char *)a2->isa + HIDWORD(a2->isa->isa);
              v129 = v175 + 16;
              a2->isa = (__objc2_class *)(v175 + 16);
              v130 = v175 + 32;
              continue;
            }

            goto LABEL_267;
          }

          break;
        }

        v155 = (unint64_t)a2->superclass;
        if (v153 != 17)
        {
          if (v153 == 19)
          {
            v156 = v149;
            v157 = &v150->cache;
            if ((unint64_t)&v150->cache > v155
              || (v158 = HIDWORD(v150->isa), (unint64_t)v157 + v158 > v155)
              || (v152 != 32 ? (v159 = v151 == 19) : (v159 = 0),
                  v159 ? (v160 = v158 > 3) : (v160 = 0),
                  !v160))
            {
              v173 = *__error();
              _sa_logt();
              v174 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v174, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)v337 = 67109120;
                *(_DWORD *)&v337[4] = 2380;
                _os_log_error_impl( &dword_186C92000,  v174,  OS_LOG_TYPE_ERROR,  "Error parsing kcdata buffer: subcontainer of container type %u is invalid",  v337,  8u);
              }

              v75 = 1LL;
              goto LABEL_277;
            }

            v75 = SkipToContainerEnd((int **)a2, 1);
            objc_autoreleasePoolPop(v156);
            if ((_DWORD)v75) {
              goto LABEL_278;
            }
            superclass = v313;
            goto LABEL_268;
          }

  v296 = v270 + v292;
  if (v272 <= 0.0)
  {
    [*v1217 extraDuration];
    v272 = v87 + v296 + v297;
  }

  [*v1217 durationNote];
  v298 = (void *)objc_claimAutoreleasedReturnValue();

  if (v298)
  {
    if (v1179)
    {
      v299 = objc_alloc(NSString);
      [*v1217 durationNote];
      v300 = (void *)objc_claimAutoreleasedReturnValue();
      v1182 = (id)[v299 initWithFormat:@"%@, %@", v300, v1179];
    }

    else
    {
      [*v1217 durationNote];
      v1182 = (id)objc_claimAutoreleasedReturnValue();
    }

    goto LABEL_287;
  }

  if (v1179)
  {
    v1182 = v1179;
    goto LABEL_287;
  }

  [*v1217 eventTimeRange];
  v318 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v318)
  {
    v1182 = 0LL;
    goto LABEL_287;
  }

  [*(id *)(v1256 + 160) eventTimeRange];
  v319 = (void *)objc_claimAutoreleasedReturnValue();
  [v319 startTime];
  v320 = (void *)objc_claimAutoreleasedReturnValue();
  v57 = (__CFString *)(v1256 + 32);
  [v320 deltaSecondsTo:*(void *)(v1256 + 32) timeDomainPriorityList:&unk_189F82630 timeDomainUsed:0];
  v322 = v321;

  [*(id *)(v1256 + 160) eventTimeRange];
  v323 = (void *)objc_claimAutoreleasedReturnValue();
  [v323 startTime];
  v324 = (void *)objc_claimAutoreleasedReturnValue();
  [v324 deltaSecondsTo:*(void *)(v1256 + 40) timeDomainPriorityList:&unk_189F82648 timeDomainUsed:0];
  v326 = v325;

  [*(id *)(v1256 + 160) eventTimeRange];
  v327 = (void *)objc_claimAutoreleasedReturnValue();
  [v327 endTime];
  v328 = (void *)objc_claimAutoreleasedReturnValue();
  [v328 deltaSecondsTo:*(void *)(v1256 + 32) timeDomainPriorityList:&unk_189F82660 timeDomainUsed:0];
  v330 = v329;

  [*(id *)(v1256 + 160) eventTimeRange];
  v331 = (void *)objc_claimAutoreleasedReturnValue();
  [v331 endTime];
  v332 = (void *)objc_claimAutoreleasedReturnValue();
  [v332 deltaSecondsTo:*(void *)(v1256 + 40) timeDomainPriorityList:&unk_189F82678 timeDomainUsed:0];
  v334 = v333;

  if (v330 > 0.0)
  {
    v335 = objc_alloc(NSString);
    seconds_string_for_nanoseconds((unint64_t)(v330 * 1000000000.0));
    v336 = (void *)objc_claimAutoreleasedReturnValue();
    v1182 = (id)[v335 initWithFormat:@"no overlap, event ends %@ before samples start", v336];

    goto LABEL_287;
  }

  if (v326 < 0.0)
  {
    v411 = objc_alloc(NSString);
    seconds_string_for_nanoseconds((unint64_t)(v326 * -1000000000.0));
    v412 = (void *)objc_claimAutoreleasedReturnValue();
    v1182 = (id)[v411 initWithFormat:@"no overlap, event starts %@ after samples end", v412];

    goto LABEL_287;
  }

  v768 = v270 + v334;
  if (v322 <= 0.0)
  {
    if (v322 >= 0.0)
    {
      v1117 = 0LL;
      goto LABEL_1256;
    }

    v979 = objc_alloc(NSString);
    seconds_string_for_nanoseconds((unint64_t)(v322 * -1000000000.0));
    v770 = (void *)objc_claimAutoreleasedReturnValue();
    v771 = [v979 initWithFormat:@"event starts %@ after samples start", v770];
  }

  else
  {
    v769 = objc_alloc(NSString);
    seconds_string_for_nanoseconds((unint64_t)(v322 * 1000000000.0));
    v770 = (void *)objc_claimAutoreleasedReturnValue();
    v771 = [v769 initWithFormat:@"event starts %@ before samples", v770];
  }

  v1117 = (void *)v771;

LABEL_1256:
  if (v768 > 0.0)
  {
    v1118 = objc_alloc(NSString);
    seconds_string_for_nanoseconds((unint64_t)(v768 * 1000000000.0));
    v57 = (__CFString *)objc_claimAutoreleasedReturnValue();
    v1119 = [v1118 initWithFormat:@"event ends %@ before samples end", v57];
LABEL_1260:
    v1121 = (id)v1119;

    if (v1117)
    {
      v1122 = v1256;
      if (v1121)
      {
        v1182 = (id)[objc_alloc(NSString) initWithFormat:@"%@, %@", v1117, v1121];
        v1122 = v1256;
        goto LABEL_1273;
      }

      goto LABEL_1266;
    }

    v1122 = v1256;
    if (v1121)
    {
      v1121 = v1121;
      v1182 = v1121;
      goto LABEL_1273;
    }

    goto LABEL_1272;
  }

  if (v768 < 0.0)
  {
    v1120 = objc_alloc(NSString);
    seconds_string_for_nanoseconds((unint64_t)(v768 * -1000000000.0));
    v57 = (__CFString *)objc_claimAutoreleasedReturnValue();
    v1119 = [v1120 initWithFormat:@"event ends %@ after samples", v57];
    goto LABEL_1260;
  }

  v1122 = v1256;
  if (v1117)
  {
LABEL_1266:
    v1182 = v1117;
    v1121 = 0LL;
    goto LABEL_1273;
  }

  v1121 = 0LL;
LABEL_1272:
  v1182 = 0LL;
LABEL_1273:
  if (v322 > 0.0 || v768 < 0.0)
  {
    [*(id *)(v1122 + 160) eventTimeRange];
    v1124 = (void *)objc_claimAutoreleasedReturnValue();
    [v1124 startTime];
    v1125 = (void *)objc_claimAutoreleasedReturnValue();
    if ([v1125 isComparable:*(void *)(v1256 + 32)])
    {
      [*(id *)(v1256 + 160) eventTimeRange];
      v1126 = (void *)objc_claimAutoreleasedReturnValue();
      [v1126 startTime];
      v1127 = (void *)objc_claimAutoreleasedReturnValue();
      if ([v1127 ge:*(void *)(v1256 + 32)])
      {
        [*v1217 eventTimeRange];
        v1128 = (void *)objc_claimAutoreleasedReturnValue();
        [v1128 startTime];
        v57 = (__CFString *)(id)objc_claimAutoreleasedReturnValue();
      }

      else
      {
        v57 = (__CFString *)*(id *)(v1256 + 32);
      }
    }

    else
    {
      v57 = 0LL;
    }

    [*(id *)(v1256 + 160) eventTimeRange];
    v1129 = (void *)objc_claimAutoreleasedReturnValue();
    [v1129 endTime];
    v1130 = (void *)objc_claimAutoreleasedReturnValue();
    if ([v1130 isComparable:*(void *)(v1256 + 40)])
    {
      [*(id *)(v1256 + 160) eventTimeRange];
      v1131 = (void *)objc_claimAutoreleasedReturnValue();
      [v1131 endTime];
      v1132 = (void *)objc_claimAutoreleasedReturnValue();
      if ([v1132 le:*(void *)(v1256 + 40)])
      {
        [*v1217 eventTimeRange];
        v1133 = (void *)objc_claimAutoreleasedReturnValue();
        [v1133 endTime];
        v1134 = (id)objc_claimAutoreleasedReturnValue();
      }

      else
      {
        v1134 = *(id *)(v1256 + 40);
      }
    }

    else
    {
      v1134 = 0LL;
    }

    if (v57 && v1134)
    {
      -[__CFString deltaSecondsTo:timeDomainPriorityList:timeDomainUsed:]( v57,  "deltaSecondsTo:timeDomainPriorityList:timeDomainUsed:",  v1134,  &unk_189F82690,  0LL);
      v1136 = v1135;
      if (v1135 <= 0.0)
      {
        v1141 = *__error();
        _sa_logt();
        v1142 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v1142, OS_LOG_TYPE_FAULT))
        {
          [*(id *)(v1256 + 160) eventTimeRange];
          v1160 = (void *)objc_claimAutoreleasedReturnValue();
          [v1160 debugDescription];
          v1161 = (void *)objc_claimAutoreleasedReturnValue();
          [*(id *)(v1256 + 32) debugDescription];
          v1162 = (void *)objc_claimAutoreleasedReturnValue();
          [*(id *)(v1256 + 40) debugDescription];
          v1163 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)v1379 = 134219266;
          *(double *)&v1379[4] = v1136;
          *(_WORD *)&v1379[12] = 2048;
          *(double *)&v1379[14] = v330;
          *(_WORD *)&v1379[22] = 2048;
          *(double *)&v1379[24] = v326;
          *(_WORD *)v1380 = 2112;
          *(void *)&v1380[2] = v1161;
          *(_WORD *)&v1380[10] = 2112;
          *(void *)&v1380[12] = v1162;
          *(_WORD *)&v1380[20] = 2112;
          *(void *)&v1380[22] = v1163;
          _os_log_fault_impl( &dword_186C92000,  v1142,  OS_LOG_TYPE_FAULT,  "Overlap:%f eventEndToDataStart:%f eventStartToDataEnd:%f %@ vs %@-%@",  v1379,  0x3Eu);
        }

        *__error() = v1141;
      }

      else
      {
        v1137 = v270 + v1135;
        if (-[SASamplePrinter shouldPrintTimeOutsideSamplingRange:]( v1256,  vabdd_f64(fmin(v296, v272), v270 + v1135)))
        {
          v1138 = objc_alloc(NSString);
          seconds_string_for_nanoseconds((unint64_t)(v1137 * 1000000000.0));
          v1139 = (void *)objc_claimAutoreleasedReturnValue();
          v1140 = [v1138 initWithFormat:@"%@ overlap, %@", v1139, v1182];

          v1182 = (id)v1140;
        }
      }
    }
  }

LABEL_287:
  v301 = *p_isa;
  if (!v1208)
  {
    objc_msgSend(v301, "printWithFormat:", @"%-*s", 18, "Duration: ");
    if (v272 >= 0.01) {
      v314 = 2LL;
    }
    else {
      v314 = 3LL;
    }
    saos_printf_seconds(*p_isa, (unint64_t)(v272 * 1000000000.0), v314);
    if (v272 != v296
      && -[SASamplePrinter shouldPrintTimeOutsideSamplingRange:](v1256, vabdd_f64(v272, v296)))
    {
      [*p_isa appendString:@"\n"];
      objc_msgSend(*p_isa, "printWithFormat:", @"%-*s%.02fs", 18, "Duration Sampled: ", *(void *)&v296);
    }

    if (v1182)
    {
      v315 = *p_isa;
      SACopySanitizedString(v1182, 1, 0LL);
      v316 = (void *)objc_claimAutoreleasedReturnValue();
      [v315 printWithFormat:@" (%@)", v316];
    }

    [*(id *)(v1256 + 8) appendString:@"\n"];
    objc_msgSend(*(id *)(v1256 + 8), "printWithFormat:", @"%-*s%lu", 18, "Steps: ", *(void *)(v1256 + 64));
    if (![*(id *)(v1256 + 16) displayBody])
    {
      objb = 0;
      goto LABEL_318;
    }

    [*v1217 timeWhenTransitionedToSamplingAllProcesses];
    v317 = (void *)objc_claimAutoreleasedReturnValue();
    if (v317
      && ([*(id *)(v1256 + 160) timeWhenTransitionedToSamplingAllProcesses],
          v57 = (__CFString *)objc_claimAutoreleasedReturnValue(),
          (-[__CFString lt:](v57, "lt:", *(void *)(v1256 + 40)) & 1) != 0))
    {
      objb = 1;
    }

    else
    {
      [*v1217 timeWhenTransitionedToSamplingAllThreads];
      v337 = (void *)objc_claimAutoreleasedReturnValue();
      if (v337)
      {
        [*(id *)(v1256 + 160) timeWhenTransitionedToSamplingAllThreads];
        v338 = (void *)objc_claimAutoreleasedReturnValue();
        objb = [v338 lt:*(void *)(v1256 + 40)];

        if (!v317) {
          goto LABEL_317;
        }
      }

      else
      {
        objb = 0;
        if (!v317)
        {
LABEL_317:

LABEL_318:
          if (v270 <= 0.0)
          {
            [*v1217 stepsNote];
            v339 = (void *)objc_claimAutoreleasedReturnValue();
            v340 = objb;
            if (v339) {
              v340 = 1;
            }
            if (v340 == 1)
            {
            }

            else
            {
              [*v1217 kperfTriggers];
              v341 = (void *)objc_claimAutoreleasedReturnValue();
              v342 = [v341 count] == 0;

              if (v342)
              {
LABEL_365:
                [*p_isa appendString:@"\n"];
                goto LABEL_366;
              }
            }
          }

          objc_msgSend(*p_isa, "appendString:", @" (");
          [*v1217 kperfTriggers];
          v343 = (void *)objc_claimAutoreleasedReturnValue();
          v344 = [v343 count] == 0;

          if (v344)
          {
            if (v270 > 0.0)
            {
              saos_printf_time_scaled(*p_isa, (unint64_t)(v270 * 1000000000.0));
              [*p_isa appendString:@" sampling interval"];
              v1241 = 1;
            }

            else
            {
              v1241 = 0;
            }
          }

          else
          {
            v1322 = 0u;
            v1321 = 0u;
            v1320 = 0u;
            v1319 = 0u;
            [*v1217 kperfTriggers];
            v345 = (void *)objc_claimAutoreleasedReturnValue();
            v346 = [v345 countByEnumeratingWithState:&v1319 objects:v1359 count:16];
            v1241 = v346 != 0;
            if (v346)
            {
              v347 = 0;
              v348 = *(void *)v1320;
              do
              {
                for (k = 0LL; k != v346; ++k)
                {
                  if (*(void *)v1320 != v348) {
                    objc_enumerationMutation(v345);
                  }
                  v350 = *(void **)(*((void *)&v1319 + 1) + 8 * k);
                  if ((v347 & 1) != 0) {
                    objc_msgSend(*p_isa, "appendString:", @", ");
                  }
                  v351 = [v350 type];
                  if (v351 == 2)
                  {
                    saos_printf_time_scaled(*p_isa, [v350 timerPeriodNs]);
                    [*p_isa appendString:@" sampling interval (on-cpu only)"];
                  }

                  else if (v351 == 1)
                  {
                    saos_printf_time_scaled(*p_isa, [v350 timerPeriodNs]);
                    [*p_isa appendString:@" sampling interval"];
                  }

                  else
                  {
                    objc_msgSend(*p_isa, "printWithFormat:", @"unknown trigger %llu", objc_msgSend(v350, "type"));
                  }

                  v347 = 1;
                }

                v346 = [v345 countByEnumeratingWithState:&v1319 objects:v1359 count:16];
              }

              while (v346);
            }
          }

          [*v1217 stepsNote];
          v352 = (void *)objc_claimAutoreleasedReturnValue();

          if (v352)
          {
            if (v1241) {
              objc_msgSend(*p_isa, "appendString:", @", ");
            }
            v353 = *p_isa;
            [*v1217 stepsNote];
            v354 = (void *)objc_claimAutoreleasedReturnValue();
            SACopySanitizedString(v354, 1, 0LL);
            v355 = (void *)objc_claimAutoreleasedReturnValue();
            [v353 appendString:v355];

            if ((objb & 1) == 0) {
              goto LABEL_364;
            }
          }

          else
          {
            if ((objb & 1) == 0)
            {
LABEL_364:
              [*p_isa appendString:@""]);
              goto LABEL_365;
            }

            if (!v1241)
            {
LABEL_351:
              [*v1217 timeWhenTransitionedToSamplingAllProcesses];
              v356 = (void *)objc_claimAutoreleasedReturnValue();
              if (v356
                && ([*(id *)(v1256 + 160) timeWhenTransitionedToSamplingAllProcesses],
                    v357 = (void *)objc_claimAutoreleasedReturnValue(),
                    v358 = [v357 lt:*(void *)(v1256 + 40)],
                    v357,
                    v356,
                    v358))
              {
                [*v1217 timeWhenTransitionedToSamplingAllThreads];
                v359 = (void *)objc_claimAutoreleasedReturnValue();
                if (v359
                  && ([*(id *)(v1256 + 160) timeWhenTransitionedToSamplingAllThreads],
                      v360 = (void *)objc_claimAutoreleasedReturnValue(),
                      v361 = [v360 lt:*(void *)(v1256 + 40)],
                      v360,
                      v359,
                      v361))
                {
                  [*v1217 timeWhenTransitionedToSamplingAllProcesses];
                  v362 = (void *)objc_claimAutoreleasedReturnValue();
                  [*v1217 timeWhenTransitionedToSamplingAllThreads];
                  v363 = (void *)objc_claimAutoreleasedReturnValue();
                  v364 = [v362 ne:v363];

                  if (v364)
                  {
                    v365 = *__error();
                    _sa_logt();
                    v366 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v366, OS_LOG_TYPE_DEBUG))
                    {
                      v1150 = [*(id *)(v1256 + 160) targetProcessId];
                      [*(id *)(v1256 + 160) timeWhenTransitionedToSamplingAllThreads];
                      v1151 = (void *)objc_claimAutoreleasedReturnValue();
                      [v1151 machAbsTimeSeconds];
                      v1153 = v1152;
                      [*(id *)(v1256 + 32) machAbsTimeSeconds];
                      v1155 = v1154;
                      [*(id *)(v1256 + 160) timeWhenTransitionedToSamplingAllProcesses];
                      v1156 = (void *)objc_claimAutoreleasedReturnValue();
                      [v1156 machAbsTimeSeconds];
                      v1158 = v1157;
                      [*(id *)(v1256 + 32) machAbsTimeSeconds];
                      *(_DWORD *)v1379 = 67109632;
                      *(_DWORD *)&v1379[4] = v1150;
                      *(_WORD *)&v1379[8] = 2048;
                      *(double *)&v1379[10] = v1153 - v1155;
                      *(_WORD *)&v1379[18] = 2048;
                      *(double *)&v1379[20] = v1158 - v1159;
                      _os_log_debug_impl( &dword_186C92000,  v366,  OS_LOG_TYPE_DEBUG,  "[%d] Don't know how to report transitioning to non-main thread at a separate time than transitio ning to all processes: threads %.3f processes %.3f",  v1379,  0x1Cu);
                    }

                    *__error() = v365;
                  }

                  v367 = *(void **)(v1256 + 8);
                  [*(id *)(v1256 + 160) timeWhenTransitionedToSamplingAllThreads];
                  v368 = (void *)objc_claimAutoreleasedReturnValue();
                  [v368 machAbsTimeSeconds];
                  v370 = v369;
                  [*(id *)(v1256 + 32) machAbsTimeSeconds];
                  [v367 printWithFormat:@"sampled only the main thread of the target process for %.2f seconds", v370 - v371];
                }

                else
                {
                  v376 = *(void **)(v1256 + 8);
                  [*(id *)(v1256 + 160) timeWhenTransitionedToSamplingAllProcesses];
                  v368 = (void *)objc_claimAutoreleasedReturnValue();
                  [v368 machAbsTimeSeconds];
                  v378 = v377;
                  [*(id *)(v1256 + 32) machAbsTimeSeconds];
                  [v376 printWithFormat:@"sampled only the target process for %.2f seconds", v378 - v379];
                }
              }

              else
              {
                v372 = *(void **)(v1256 + 8);
                [*(id *)(v1256 + 160) timeWhenTransitionedToSamplingAllThreads];
                v368 = (void *)objc_claimAutoreleasedReturnValue();
                [v368 machAbsTimeSeconds];
                v374 = v373;
                [*(id *)(v1256 + 32) machAbsTimeSeconds];
                [v372 printWithFormat:@"sampled only main threads for %.2f seconds", v374 - v375];
              }

              goto LABEL_364;
            }
          }

          objc_msgSend(*p_isa, "appendString:", @", ");
          goto LABEL_351;
        }
      }
    }

    goto LABEL_317;
  }

  [MEMORY[0x189607968] numberWithDouble:v272];
  v302 = (void *)objc_claimAutoreleasedReturnValue();
  SAJSONWriteDictionaryEntry(v301, @"duration", v302);

  if (v272 > v296)
  {
    v303 = *p_isa;
    [MEMORY[0x189607968] numberWithDouble:v296];
    v304 = (void *)objc_claimAutoreleasedReturnValue();
    SAJSONWriteDictionaryEntry(v303, @"sampledDuration", v304);
  }

  if (v1182) {
    SAJSONWriteDictionaryEntry(*p_isa, @"durationNote", v1182);
  }
  v305 = *(void **)(v1256 + 8);
  [MEMORY[0x189607968] numberWithUnsignedInteger:*(void *)(v1256 + 64)];
  v306 = (void *)objc_claimAutoreleasedReturnValue();
  SAJSONWriteDictionaryEntry(v305, @"numSamples", v306);

  [*(id *)(v1256 + 160) attemptedSamplingInterval];
  if (v307 > 0.0)
  {
    v308 = *p_isa;
    v309 = (void *)MEMORY[0x189607968];
    [*v1217 attemptedSamplingInterval];
    objc_msgSend(v309, "numberWithDouble:");
    v310 = (void *)objc_claimAutoreleasedReturnValue();
    SAJSONWriteDictionaryEntry(v308, @"attemptedSamplingInterval", v310);
  }

  [*v1217 kperfTriggers];
  v311 = (void *)objc_claimAutoreleasedReturnValue();

  if (v311)
  {
    v312 = *p_isa;
    [*v1217 kperfTriggers];
    v313 = (void *)objc_claimAutoreleasedReturnValue();
    SAJSONWriteDictionaryEntry(v312, @"kperfTriggers", v313);
  }

LABEL_267:
          objc_autoreleasePoolPop(v149);
LABEL_268:
          v142 = a2->superclass;
          v171 = (char *)a2->isa + HIDWORD(a2->isa->isa);
          v144 = v171 + 16;
          a2->isa = (__objc2_class *)(v171 + 16);
          v145 = v171 + 32;
          goto LABEL_199;
        }

        v161 = HIDWORD(v150->isa);
        v162 = v150->superclass;
        if ((_DWORD)v162)
        {
          if (v151 == 17)
          {
            v163 = (unint64_t)v162 >> 32;
            if (SHIDWORD(v162) <= 2310)
            {
              switch(HIDWORD(v162))
              {
                case 0x30:
                  v164 = 20;
                  break;
                case 0x31:
                  v164 = 24;
                  break;
                case 0x81A:
LABEL_245:
                  v164 = 8;
                  break;
                default:
                  goto LABEL_271;
              }
            }

            else
            {
              switch(HIDWORD(v162))
              {
                case 0x907:
                  v164 = 4;
                  break;
                case 0x908:
                case 0x909:
                  goto LABEL_271;
                case 0x90A:
                case 0x90C:
                  goto LABEL_245;
                case 0x90B:
                case 0x90D:
                  v164 = 16;
                  break;
                default:
                  if (HIDWORD(v162) != 2369) {
                    goto LABEL_271;
                  }
                  v164 = 48;
                  break;
              }
            }

            if (v161 / v164 < v162 || v161 % v162 >= 0x10)
            {
LABEL_271:
              v156 = v149;
              v173 = *__error();
              _sa_logt();
              v174 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v174, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)v337 = 0;
                v75 = 2LL;
                _os_log_error_impl( &dword_186C92000,  v174,  OS_LOG_TYPE_ERROR,  "Error parsing kcdata buffer: array is invalid",  v337,  2u);
              }

              else
              {
                v75 = 2LL;
              }

              goto LABEL_273;
            }

      v139 = v35[2] & 0xF;
      v77 = v132 >= v139;
      v135 = v132 - v139;
      if (!v77) {
        v135 = 0;
      }
      goto LABEL_269;
    }

    v131 = v35 + 12;
    v132 = v35[1];
    v133 = v35[2] & 0xF;
    v77 = v132 >= v133;
    v134 = v132 - v133;
    if (!v77) {
      v134 = 0;
    }
    v135 = v134 - 32;
    v136 = v289;
    v137 = v303;
    v138 = (os_log_s *)__ptrb;
LABEL_270:
    v301 = 0;
    if (v130 > 2311)
    {
      if (v130 <= 2331)
      {
        switch(v130)
        {
          case 2312:
            if (v135 < 0x28) {
              goto LABEL_550;
            }
            if (qword_18C4B1368 != -1) {
              dispatch_once(&qword_18C4B1368, &__block_literal_global_1450);
            }
            if ((byte_18C4B1302 & 1) != 0)
            {
LABEL_550:
              if (!uuid_is_null((const unsigned __int8 *)v131 + 8))
              {
                v182 = -[SASampleStore sharedCacheWithUUID:slide:slidBaseAddress:](a1, (uint64_t)(v131 + 1), *v131, -1LL);
                v183 = *(void **)(a1 + 1024);
                *(void *)(a1 + 1024) = v182;
              }
            }

            else if (![v28 count] && !uuid_is_null((const unsigned __int8 *)v131 + 8))
            {
              v216 = -[SASampleStore sharedCacheWithUUID:slide:slidBaseAddress:](a1, (uint64_t)(v131 + 1), *v131, v131[4]);
              v217 = *(void **)(a1 + 1024);
              *(void *)(a1 + 1024) = v216;
            }

            break;
          case 2318:
            if (!*(void *)(a1 + 496))
            {
              v184 = SANSStringForCString(v131);
              v185 = *(void **)(a1 + 496);
              *(void *)(a1 + 496) = v184;
            }

            break;
          case 2319:
            v142 = a1;
            if (!*(void *)(a1 + 448))
            {
              v143 = SANSStringForCString(v131);
              v144 = *(void **)(a1 + 448);
              *(void *)(a1 + 44_Block_object_dispose(&STACK[0x288], 8) = v143;

              v142 = a1;
            }

            if (!*(void *)(v142 + 192))
            {
              if ([*(id *)(v142 + 448) rangeOfString:@"X86_64" options:1] == 0x7FFFFFFFFFFFFFFFLL)
              {
                if ([*(id *)(a1 + 448) rangeOfString:@"ARM64" options:1] == 0x7FFFFFFFFFFFFFFFLL)
                {
                  if ([*(id *)(a1 + 448) rangeOfString:@"ARM" options:1] == 0x7FFFFFFFFFFFFFFFLL)
                  {
                    block[0] = MEMORY[0x1895F87A8];
                    block[1] = 3221225472LL;
                    block[2] = __116__SASampleStore__addKCDataStackshot_timestamp_sampleIndex_shouldSkipSampleOut_primaryDataIsKPerf_addStaticInfoOnly___block_invoke_226;
                    block[3] = &unk_189F616C8;
                    block[4] = a1;
                    if (qword_18C4B1308 == -1)
                    {
                      v301 = 0;
                      goto LABEL_503;
                    }

                    dispatch_once(&qword_18C4B1308, block);
                    break;
                  }

                  v301 = 0;
                  v220 = a1;
                  v221 = 12LL;
                }

                else
                {
                  v301 = 0;
                  v220 = a1;
                  v221 = 16777228LL;
                }
              }

              else
              {
                v301 = 0;
                v220 = a1;
                v221 = 0x301000007LL;
              }

              *(void *)(v220 + 192) = v221;
              goto LABEL_503;
            }

            break;
          default:
            goto LABEL_503;
        }

                    v247 = *__error();
                    _sa_logt();
                    v248 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v248, OS_LOG_TYPE_ERROR))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_error_impl(&dword_186C92000, v248, OS_LOG_TYPE_ERROR, "0 rec->kstack.nframes", buf, 2u);
                    }

                    *__error() = v247;
                    _SASetCrashLogMessage(1051, "0 rec->kstack.nframes", v249, v250, v251, v252, v253, v254, v272);
                    _os_crash();
                    __break(1u);
LABEL_270:
                    v255 = *__error();
                    _sa_logt();
                    v256 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v256, OS_LOG_TYPE_ERROR))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_error_impl(&dword_186C92000, v256, OS_LOG_TYPE_ERROR, "0 rec->ustack.nframes", buf, 2u);
                    }

                    *__error() = v255;
                    _SASetCrashLogMessage(1091, "0 rec->ustack.nframes", v257, v258, v259, v260, v261, v262, v272);
                    _os_crash();
                    __break(1u);
                    goto LABEL_273;
                  }

                  v144 = v132;
                  v143 = self;
                  if (!self)
                  {
LABEL_161:
                    v145 = v143;

                    if (v132 == v145)
                    {
                      if (qword_18C4B13C0)
                      {
                        v153 = *__error();
                        fprintf( (FILE *)qword_18C4B13C0,  "%'llu Adjusting backward record timestamp %lld to %lld, to match the PET sample that triggered it\n",  *(void *)(a2 + 8),  v72,  [v132 machAbsTime]);
                        *__error() = v153;
                      }
                    }

                    else if (qword_18C4B13C0)
                    {
                      v291 = v132;
                      v146 = *__error();
                      v147 = (FILE *)qword_18C4B13C0;
                      v148 = *(void *)(a2 + 8);
                      v150 = [v291 machAbsTime];
                      v151 = self;
                      if (self) {
                        v151 = objc_getProperty(self, v149, 40LL, 1);
                      }
                      v152 = v151;
                      fprintf( v147,  "%'llu Adjusting backward record timestamp %lld to %lld, to match the PET sample it straddles, ev en though the most recent on-cpu sample was at %lld\n",  v148,  v72,  v150,  [v152 machAbsTime]);

                      *__error() = v146;
                      v139 = 1;
                      v132 = v291;
                      goto LABEL_169;
                    }

                    v139 = 1;
LABEL_169:
                    v137 = v132;
                    goto LABEL_170;
                  }

                          LODWORD(v501) = v501 - 1;
                          v60 = v430 + 1;
                          v437 += 4;
                          v434 += 4;
                        }

                        if (v62 < 5) {
                          goto LABEL_147;
                        }
LABEL_142:
                        v63 = 0LL;
                        goto LABEL_143;
                      }
                    }
                  }
                }
              }

LABEL_253:
            if ((v163 - 2311) > 0x3A || ((1LL << (v163 - 7)) & 0x400000000000079LL) == 0)
            {
              uint64_t v17 = 0x189607000LL;
LABEL_264:
              int v11 = 0x189603000LL;
              goto LABEL_267;
            }

LABEL_263:
            uint64_t v17 = 0x189607000LL;
            goto LABEL_264;
          }

          v165 = v161 - ((uint64_t)a2->isa->isa & 0xF);
          v166 = v165 / v162;
          v163 = (unint64_t)v162 >> 32;
        }

        else
        {
          if ((_DWORD)v161) {
            goto LABEL_271;
          }
          v163 = (unint64_t)v162 >> 32;
          if (v151 == 17) {
            goto LABEL_253;
          }
LABEL_257:
          v166 = 0;
        }

        if ((_DWORD)v163 == 2382)
        {
          contexta = v149;
          v167 = objc_alloc_init(MEMORY[0x189603FA8]);

          if ((_DWORD)v162)
          {
            v168 = 0;
            v162 = (__objc2_class *)v162;
            v169 = MEMORY[0x1895F87A8];
            do
            {
              *(void *)buf = v169;
              *(void *)&buf[8] = v85;
              *(void *)&buf[16] = __65__SASampleStore_parseKCDataExclavesIPCStackContainer_callstacks___block_invoke;
              v335 = &unk_189F61820;
              v146 = v167;
              v336 = v146;
              __65__SASampleStore_parseKCDataExclavesIPCStackContainer_callstacks___block_invoke( (uint64_t)buf,  v170,  (void *)(p_superclass + v168));

              v168 += v166;
              v162 = (__objc2_class *)((char *)v162 - 1);
            }

            while (v162);
            uint64_t v17 = 0x189607000LL;
            uint64_t v18 = &off_186D74000;
            superclass = v313;
            int v11 = 0x189603000LL;
          }

          else
          {
            v146 = v167;
            uint64_t v17 = 0x189607000LL;
            int v11 = 0x189603000LL;
          }

          v149 = contexta;
          goto LABEL_267;
        }

        goto LABEL_263;
      }

LABEL_436:
      v253 = *__error();
      _sa_logt();
      v254 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v254, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = v304;
        *(_DWORD *)&uint8_t buf[4] = cache;
        _os_log_error_impl(&dword_186C92000, v254, OS_LOG_TYPE_ERROR, "bad container type %u", buf, 8u);
      }

      *__error() = v253;
      _SASetCrashLogMessage(5984, "bad container type %u", v255, v256, v257, v258, v259, v260, cache);
      _os_crash();
      __break(1u);
      goto LABEL_439;
    }

    if (v95 == 2386)
    {
      v177 = v293;
      v178 = a2->isa;
      cache = (int)a2->isa->cache;
      if (cache == 2386)
      {
        v179 = v178->superclass;
        v180 = a2->superclass;
        v181 = (char *)v178 + HIDWORD(v178->isa);
        v182 = v181 + 16;
        a2->isa = (__objc2_class *)(v181 + 16);
        v183 = v181 + 32;
        v309 = v177;
        if (v183 > (char *)v180)
        {
          v184 = 0LL;
          goto LABEL_292;
        }

        v298 = v179;
        v302 = 0LL;
        v314 = superclass;
        v187 = 0LL;
        while (1)
        {
          v188 = (void *)MEMORY[0x186E47ACC]();
          v189 = v188;
          v190 = a2->isa;
          v191 = (int)a2->isa->isa;
          v192 = v191 & 0xFFFFFFF0;
          if ((v191 & 0xFFFFFFF0) == 0x20) {
            v193 = 17;
          }
          else {
            v193 = (int)a2->isa->isa;
          }
          else {
            v194 = (uint64_t)&v190[1].superclass;
          }
          if (v193 > 19)
          {
            if (v193 == 2387)
            {
              v302 = (void *)v194;
            }

            else if (v193 == 20)
            {
              v232 = v190->superclass;
              if (v298 != v232)
              {
                v214 = v9;
                v215 = *__error();
                _sa_logt();
                v216 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                v184 = v187;
                if (os_log_type_enabled(v216, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)v337 = 134218240;
                  *(void *)&v337[4] = v298;
                  *(_WORD *)&v337[12] = 2048;
                  *(void *)&v337[14] = v232;
                  _os_log_error_impl( &dword_186C92000,  v216,  OS_LOG_TYPE_ERROR,  "Container end with wrong ID (%llu != %llu)",  v337,  0x16u);
                }

                v75 = 7LL;
LABEL_373:
                int v11 = 0x189603000LL;
LABEL_381:

                *__error() = v215;
                objc_autoreleasePoolPop(v189);
                int v9 = v214;
                uint64_t v18 = &off_186D74000;
                superclass = v314;
                goto LABEL_382;
              }

              objc_autoreleasePoolPop(v188);
              int v11 = 0x189603000LL;
LABEL_367:
              if (v302)
              {
                v184 = v187;
                v212 = -[SAKCDataExclaveTextLayout initWithInfo:textSegments:]( objc_alloc(&OBJC_CLASS___SAKCDataExclaveTextLayout),  (uint64_t)v302,  v187);
                [MEMORY[0x189607968] numberWithUnsignedLongLong:*v302];
                v213 = (void *)objc_claimAutoreleasedReturnValue();
                [v309 setObject:v212 forKeyedSubscript:v213];

                v75 = 0LL;
LABEL_369:
                uint64_t v18 = &off_186D74000;
                superclass = v314;
LABEL_382:

                uint64_t v17 = 0x189607000LL;
                goto LABEL_404;
              }

              v184 = v187;
              uint64_t v18 = &off_186D74000;
              superclass = v314;
LABEL_292:
              v185 = *__error();
              _sa_logt();
              v186 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v186, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)v337 = 0;
                _os_log_error_impl( &dword_186C92000,  v186,  OS_LOG_TYPE_ERROR,  "No exclave_textlayout_info in textlayout container",  v337,  2u);
              }

              *__error() = v185;
              v75 = 1LL;
              int v11 = 0x189603000LL;
              goto LABEL_382;
            }

            goto LABEL_365;
          }

          v195 = (unint64_t)a2->superclass;
          if (v193 == 17) {
            break;
          }
          if (v193 != 19) {
            goto LABEL_365;
          }
          v196 = &v190->cache;
          if ((unint64_t)&v190->cache > v195
            || (v197 = HIDWORD(v190->isa), (unint64_t)v196 + v197 > v195)
            || (v192 != 32 ? (v198 = v191 == 19) : (v198 = 0), v198 ? (v199 = v197 > 3) : (v199 = 0), !v199))
          {
            v214 = v9;
            v215 = *__error();
            _sa_logt();
            v216 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            v184 = v187;
            if (os_log_type_enabled(v216, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v337 = 67109120;
              *(_DWORD *)&v337[4] = 2386;
              _os_log_error_impl( &dword_186C92000,  v216,  OS_LOG_TYPE_ERROR,  "Error parsing kcdata buffer: subcontainer of container type %u is invalid",  v337,  8u);
            }

            v75 = 1LL;
            goto LABEL_381;
          }

          v75 = SkipToContainerEnd((int **)a2, 1);
          objc_autoreleasePoolPop(v189);
          if ((_DWORD)v75)
          {
            v184 = v187;
            goto LABEL_369;
          }

LABEL_366:
          v180 = a2->superclass;
          v211 = (char *)a2->isa + HIDWORD(a2->isa->isa);
          v182 = v211 + 16;
          a2->isa = (__objc2_class *)(v211 + 16);
          v183 = v211 + 32;
        }

        v200 = HIDWORD(v190->isa);
        v201 = v190->superclass;
        if ((_DWORD)v201)
        {
          if (v191 == 17)
          {
            v202 = (unint64_t)v201 >> 32;
            if (SHIDWORD(v201) <= 2310)
            {
              switch(HIDWORD(v201))
              {
                case 0x30:
                  v203 = 20;
                  break;
                case 0x31:
                  v203 = 24;
                  break;
                case 0x81A:
LABEL_343:
                  v203 = 8;
                  break;
                default:
                  goto LABEL_371;
              }
            }

            else
            {
              switch(HIDWORD(v201))
              {
                case 0x907:
                  v203 = 4;
                  break;
                case 0x908:
                case 0x909:
                  goto LABEL_371;
                case 0x90A:
                case 0x90C:
                  goto LABEL_343;
                case 0x90B:
                case 0x90D:
                  v203 = 16;
                  break;
                default:
                  if (HIDWORD(v201) != 2369) {
                    goto LABEL_371;
                  }
                  v203 = 48;
                  break;
              }
            }

            if (v200 / v203 < v201 || v200 % v201 >= 0x10)
            {
LABEL_371:
              v214 = v9;
              v215 = *__error();
              _sa_logt();
              v216 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              v184 = v187;
              if (os_log_type_enabled(v216, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)v337 = 0;
                v75 = 2LL;
                _os_log_error_impl( &dword_186C92000,  v216,  OS_LOG_TYPE_ERROR,  "Error parsing kcdata buffer: array is invalid",  v337,  2u);
              }

              else
              {
                v75 = 2LL;
              }

              goto LABEL_373;
            }

  [*v1217 reportTimeThreshold];
  if (v380 > 0.0)
  {
    v381 = *p_isa;
    if (v1208)
    {
      v382 = (void *)MEMORY[0x189607968];
      [*v1217 reportTimeThreshold];
      objc_msgSend(v382, "numberWithDouble:");
      v383 = (void *)objc_claimAutoreleasedReturnValue();
      SAJSONWriteDictionaryEntry(v381, @"reportTimeThreshold", v383);

      goto LABEL_373;
    }

    [*v1217 reportTimeThreshold];
    objc_msgSend(v381, "printWithFormat:", @"%-*s%.3gs\n", 18, "Report threshold: ", v384);
    goto LABEL_372;
  }

  if ((v1208 & 1) == 0) {
LABEL_372:
  }
    [*p_isa appendString:@"\n"];
LABEL_373:
  [*v1217 wrWorkflowName];
  v385 = (void *)objc_claimAutoreleasedReturnValue();

  if (v385)
  {
    v386 = *p_isa;
    [*v1217 wrWorkflowName];
    v387 = (void *)objc_claimAutoreleasedReturnValue();
    v388 = v387;
    if (v1208) {
      SAJSONWriteDictionaryEntry(v386, @"wrWorkflowName", v387);
    }
    else {
      [v386 printWithFormat:@"%-*s%@\n", 18, "Workflow Name: ", v387];
    }

    [*v1217 wrError];
    v389 = (void *)objc_claimAutoreleasedReturnValue();
    v390 = v389;
    if (v389)
    {
      [v389 userInfo];
      v391 = (void *)objc_claimAutoreleasedReturnValue();
      [v391 objectForKeyedSubscript:*MEMORY[0x189607490]];
      v392 = (void *)objc_claimAutoreleasedReturnValue();
      v393 = v392;
      if (v392)
      {
        v394 = v392;
      }

      else
      {
        [v390 description];
        v394 = (id)objc_claimAutoreleasedReturnValue();
      }

      v395 = *p_isa;
      if (v1208) {
        SAJSONWriteDictionaryEntry(v395, @"wrError", v394);
      }
      else {
        [v395 printWithFormat:@"%-*s%@\n", 18, "Workflow Error: ", v394];
      }
    }

    [*v1217 wrDiagnosticName];
    v396 = (void *)objc_claimAutoreleasedReturnValue();

    if (v396)
    {
      v397 = *p_isa;
      [*v1217 wrDiagnosticName];
      v398 = (void *)objc_claimAutoreleasedReturnValue();
      v399 = v398;
      if (v1208) {
        SAJSONWriteDictionaryEntry(v397, @"wrDiagnosticName", v398);
      }
      else {
        [v397 printWithFormat:@"%-*s%@\n", 18, "Triggering Diagnostic: ", v398];
      }
    }

    [*v1217 wrWorkflowDuration];
    if (v400 > 0.0)
    {
      [*v1217 wrWorkflowDurationThreshold];
      if (v401 > 0.0)
      {
        [*v1217 wrWorkflowDuration];
        v403 = v402;
        [*v1217 wrWorkflowDurationThreshold];
        if (v403 >= v404)
        {
          v405 = *p_isa;
          if (v1208)
          {
            v406 = (void *)MEMORY[0x189607968];
            [*v1217 wrWorkflowDuration];
            objc_msgSend(v406, "numberWithDouble:");
            v407 = (void *)objc_claimAutoreleasedReturnValue();
            SAJSONWriteDictionaryEntry(v405, @"wrWorkflowDuration", v407);

            v408 = *p_isa;
            v409 = (void *)MEMORY[0x189607968];
            [*v1217 wrWorkflowDurationThreshold];
            objc_msgSend(v409, "numberWithDouble:");
            v410 = (void *)objc_claimAutoreleasedReturnValue();
            SAJSONWriteDictionaryEntry(v408, @"wrWorkflowDurationThreshold", v410);
          }

          else
          {
            objc_msgSend(v405, "printWithFormat:", @"%-*sWorkflow event duration ", 18, "Trigger: ");
            v413 = *(void **)(v1256 + 8);
            [*(id *)(v1256 + 160) wrWorkflowDuration];
            v415 = v414;
            else {
              v416 = 3LL;
            }
            saos_printf_seconds(v413, (unint64_t)(v415 * 1000000000.0), v416);
            objc_msgSend(*(id *)(v1256 + 8), "appendString:", @", above threshold ");
            v417 = *(void **)(v1256 + 8);
            [*(id *)(v1256 + 160) wrWorkflowDurationThreshold];
            v419 = v418;
            else {
              v420 = 3LL;
            }
            saos_printf_seconds(v417, (unint64_t)(v419 * 1000000000.0), v420);
            [*(id *)(v1256 + 8) appendString:@"\n"];
          }
        }
      }
    }

    [*v1217 wrWorkflowDurationOmittingNetworkBoundIntervals];
    if (v421 <= 0.0
      || ([*v1217 wrWorkflowDurationOmittingNetworkBoundIntervalsThreshold], v422 <= 0.0)
      || ([*v1217 wrWorkflowDurationOmittingNetworkBoundIntervals],
          v424 = v423,
          [*v1217 wrWorkflowDurationOmittingNetworkBoundIntervalsThreshold],
          v424 < v425))
    {
      [*v1217 wrWorkflowTimeoutDuration];
      if (v426 <= 0.0) {
        goto LABEL_424;
      }
      if (v1208) {
        goto LABEL_409;
      }
      goto LABEL_420;
    }

    v430 = *p_isa;
    if ((v1208 & 1) != 0)
    {
      v431 = (void *)MEMORY[0x189607968];
      [*v1217 wrWorkflowDurationOmittingNetworkBoundIntervals];
      objc_msgSend(v431, "numberWithDouble:");
      v432 = (void *)objc_claimAutoreleasedReturnValue();
      SAJSONWriteDictionaryEntry(v430, @"wrWorkflowDurationOmittingNetworkBoundIntervals", v432);

      v433 = *p_isa;
      v434 = (void *)MEMORY[0x189607968];
      [*v1217 wrWorkflowDurationOmittingNetworkBoundIntervalsThreshold];
      objc_msgSend(v434, "numberWithDouble:");
      v435 = (void *)objc_claimAutoreleasedReturnValue();
      SAJSONWriteDictionaryEntry(v433, @"wrWorkflowDurationOmittingNetworkBoundIntervalsThreshold", v435);

      [*v1217 wrWorkflowTimeoutDuration];
      if (v436 > 0.0)
      {
LABEL_409:
        v427 = *p_isa;
        v428 = (void *)MEMORY[0x189607968];
        [*v1217 wrWorkflowTimeoutDuration];
        objc_msgSend(v428, "numberWithDouble:");
        v429 = (void *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v427, @"wrWorkflowTimeoutDuration", v429);
      }
    }

    else
    {
      objc_msgSend( v430,  "printWithFormat:",  @"%-*sWorkflow event duration (omitting network bound intervals) ",  18,  "Trigger: ");
      v437 = *(void **)(v1256 + 8);
      [*(id *)(v1256 + 160) wrWorkflowDurationOmittingNetworkBoundIntervals];
      v439 = v438;
      else {
        v440 = 3LL;
      }
      saos_printf_seconds(v437, (unint64_t)(v439 * 1000000000.0), v440);
      objc_msgSend(*(id *)(v1256 + 8), "appendString:", @", above threshold ");
      v441 = *(void **)(v1256 + 8);
      [*(id *)(v1256 + 160) wrWorkflowDurationOmittingNetworkBoundIntervalsThreshold];
      v443 = v442;
      else {
        v444 = 3LL;
      }
      saos_printf_seconds(v441, (unint64_t)(v443 * 1000000000.0), v444);
      [*(id *)(v1256 + 8) appendString:@"\n"];
      [*(id *)(v1256 + 160) wrWorkflowTimeoutDuration];
      if (v445 > 0.0)
      {
LABEL_420:
        objc_msgSend( *(id *)(v1256 + 8),  "printWithFormat:",  @"%-*sWorkflow event timed out after",  18,  "Trigger: ");
        v446 = *(void **)(v1256 + 8);
        [*(id *)(v1256 + 160) wrWorkflowTimeoutDuration];
        v448 = v447;
        else {
          v449 = 3LL;
        }
        saos_printf_seconds(v446, (unint64_t)(v448 * 1000000000.0), v449);
        [*(id *)(v1256 + 8) appendString:@"\n"];
      }
    }

LABEL_351:
            if ((v202 - 2311) > 0x3A || ((1LL << (v202 - 7)) & 0x400000000000079LL) == 0)
            {
              int v11 = 0x189603000LL;
LABEL_365:
              objc_autoreleasePoolPop(v189);
              goto LABEL_366;
            }

LABEL_364:
            int v11 = 0x189603000LL;
            goto LABEL_365;
          }

          v204 = v200 - ((uint64_t)a2->isa->isa & 0xF);
          v205 = v204 / v201;
          v202 = (unint64_t)v201 >> 32;
        }

        else
        {
          if ((_DWORD)v200) {
            goto LABEL_371;
          }
          v202 = (unint64_t)v201 >> 32;
          if (v191 == 17) {
            goto LABEL_351;
          }
LABEL_355:
          v205 = 0;
        }

        if ((_DWORD)v202 == 2388)
        {
          objb = v188;
          v279 = v9;
          if (!v187) {
            v187 = objc_alloc_init(MEMORY[0x189603FA8]);
          }
          if ((_DWORD)v201)
          {
            v206 = 0;
            v207 = v201;
            v208 = MEMORY[0x1895F87A8];
            do
            {
              *(void *)buf = v208;
              *(void *)&buf[8] = v85;
              *(void *)&buf[16] = __68__SASampleStore_parseKCDataExclavesTextLayoutContainer_textLayouts___block_invoke;
              v335 = &unk_189F61848;
              v209 = v187;
              v336 = v209;
              __68__SASampleStore_parseKCDataExclavesTextLayoutContainer_textLayouts___block_invoke( (uint64_t)buf,  v210,  v194 + v206);

              v206 += v205;
              --v207;
            }

            while (v207);
            v187 = v209;
          }

          int v9 = v279;
          int v11 = 0x189603000LL;
          v189 = objb;
          goto LABEL_365;
        }

        goto LABEL_364;
      }

LABEL_439:
      v261 = *__error();
      _sa_logt();
      v262 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v262, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = v304;
        *(_DWORD *)&uint8_t buf[4] = cache;
        _os_log_error_impl(&dword_186C92000, v262, OS_LOG_TYPE_ERROR, "bad container type %u", buf, 8u);
      }

      *__error() = v261;
      _SASetCrashLogMessage(6330, "bad container type %u", v263, v264, v265, v266, v267, v268, cache);
      _os_crash();
      __break(1u);
LABEL_442:
      v269 = *__error();
      _sa_logt();
      v270 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v270, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = v304;
        *(_DWORD *)&uint8_t buf[4] = cache;
        _os_log_error_impl(&dword_186C92000, v270, OS_LOG_TYPE_ERROR, "bad container type %u", buf, 8u);
      }

      *__error() = v269;
      _SASetCrashLogMessage(6090, "bad container type %u", v271, v272, v273, v274, v275, v276, cache);
      _os_crash();
      __break(1u);
    }

    if (v95 != 2383)
    {
      v75 = SkipToContainerEnd((int **)a2, 1);
      goto LABEL_404;
    }

    v312 = superclass;
    v96 = v9;
    v97 = v295;
    v98 = a2->isa;
    cache = (int)a2->isa->cache;
    if (cache != 2383) {
      goto LABEL_433;
    }
    v99 = v97;
    v100 = v98->superclass;
    v101 = a2->superclass;
    v102 = (char *)v98 + HIDWORD(v98->isa);
    v103 = v102 + 16;
    a2->isa = (__objc2_class *)(v102 + 16);
    v104 = v102 + 32;
    v300 = v100;
    v105 = 0LL;
    v307 = 0LL;
    while (1)
    {
      if (&v104[v103[1]] > (char *)v101 || *v103 == -242132755)
      {
LABEL_164:
        if (!v105) {
          goto LABEL_399;
        }
        goto LABEL_165;
      }

      v106 = (void *)MEMORY[0x186E47ACC]();
      v107 = v106;
      v108 = a2->isa;
      v109 = (int)a2->isa->isa;
      if ((v109 & 0xFFFFFFF0) == 0x20) {
        v110 = 17;
      }
      else {
        v110 = (int)a2->isa->isa;
      }
      if ((v110 - 1) > 5)
      {
        if (v110 <= 2309)
        {
          if (v110 != 17 && v110 != 19) {
            goto LABEL_139;
          }
          v112 = HIDWORD(v108->isa);
          v116 = v112;
LABEL_142:
          v111 = &v108->cache;
          goto LABEL_143;
        }

        if (v110 == 2310)
        {
          v112 = HIDWORD(v108->isa);
          if (v112 == 112 && ((uint64_t)v108->superclass & 0x8F) == 0)
          {
            v116 = 104;
            goto LABEL_142;
          }
        }

        else
        {
          if (v110 != 2312)
          {
LABEL_139:
            v112 = HIDWORD(v108->isa);
            goto LABEL_140;
          }

          v112 = HIDWORD(v108->isa);
          if (v112 == 32 && ((uint64_t)v108->superclass & 0x8F) == 0)
          {
            v116 = 24;
            goto LABEL_142;
          }
        }

LABEL_140:
        v118 = (uint64_t)v108->superclass & 0xF;
        v114 = v112 >= v118;
        v116 = v112 - v118;
        if (!v114) {
          v116 = 0;
        }
        goto LABEL_142;
      }

      v111 = &v108[1].superclass;
      v112 = HIDWORD(v108->isa);
      v113 = (uint64_t)v108->superclass & 0xF;
      v114 = v112 >= v113;
      v115 = v112 - v113;
      if (!v114) {
        v115 = 0;
      }
      v116 = v115 - 32;
LABEL_143:
      if (v110 > 2383)
      {
        if (v110 == 2385)
        {
          if (*((_BYTE *)v111 + (v116 - 1)))
          {
            v121 = *__error();
            _sa_logt();
            v122 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v122, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl( &dword_186C92000,  v122,  OS_LOG_TYPE_DEFAULT,  "WARNING: exclave address space name non NULL-terminated",  buf,  2u);
            }

            *__error() = v121;
          }

          else
          {
            v307 = (uint64_t)v111;
          }
        }

        else if (v110 == 2384)
        {
          v105 = v111;
        }

        goto LABEL_162;
      }

      if (v110 != 19) {
        break;
      }
      v119 = a2->superclass;
      v120 = (__objc2_class *)&v108->cache;
      if (v120 > v119
        || (__objc2_class *)((char *)v120 + v112) > v119
        || (v109 & 0xFFFFFFF0) == 0x20
        || v109 != 19
        || v112 <= 3)
      {
        v219 = *__error();
        _sa_logt();
        v220 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v220, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = 2383;
          _os_log_error_impl( &dword_186C92000,  v220,  OS_LOG_TYPE_ERROR,  "Error parsing kcdata buffer: subcontainer of container type %u is invalid",  buf,  8u);
        }

        v75 = 1LL;
        goto LABEL_415;
      }

      v75 = SkipToContainerEnd((int **)a2, 1);
      objc_autoreleasePoolPop(v107);
      if ((_DWORD)v75) {
        goto LABEL_402;
      }
LABEL_163:
      v101 = a2->superclass;
      v123 = (char *)a2->isa + HIDWORD(a2->isa->isa);
      v103 = v123 + 16;
      a2->isa = (__objc2_class *)(v123 + 16);
      v104 = v123 + 32;
    }

    if (v110 != 20)
    {
LABEL_162:
      objc_autoreleasePoolPop(v107);
      goto LABEL_163;
    }

    v228 = v108->superclass;
    if (v300 == v228)
    {
      objc_autoreleasePoolPop(v106);
      if (!v105)
      {
LABEL_399:
        v229 = *__error();
        _sa_logt();
        v230 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v230, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl( &dword_186C92000,  v230,  OS_LOG_TYPE_ERROR,  "No exclave_addressspace_info in addressspace container",  buf,  2u);
        }

        *__error() = v229;
        v75 = 1LL;
        goto LABEL_402;
      }

            *__error() = v65;
            goto LABEL_141;
          }

          v59 = *(void **)(a1 + 8);
          if (v59)
          {
            v60 = -[SASamplePrinter displayNameForTask:]((void *)a1, v5);
            [v59 printWithFormat:@"printTargetThreadOnly, but target task %@ has no main thread", v60];

            goto LABEL_161;
          }

          v46 = *__error();
          _sa_logt();
          v69 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
          {
            v88 = -[SASamplePrinter displayNameForTask:]((void *)a1, v5);
            *(_DWORD *)buf = 138412290;
            *(void *)&uint8_t buf[4] = v88;
            _os_log_error_impl( &dword_186C92000,  v69,  OS_LOG_TYPE_ERROR,  "printTargetThreadOnly, but target task %@ has no main thread",  buf,  0xCu);
          }

          v48 = __error();
          goto LABEL_80;
        }

        if (!-[SASamplePrinter hasTimeIndexes](a1))
        {
          v42 = *(void **)(a1 + 8);
          if (v42)
          {
            [v42 printWithFormat:@"cannot display timeline format without time indexes"];
            goto LABEL_160;
          }

          v54 = *__error();
          _sa_logt();
          v55 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl( &dword_186C92000,  v55,  OS_LOG_TYPE_ERROR,  "cannot display timeline format without time indexes",  buf,  2u);
          }

LABEL_165:
      v124 = -[SAKCDataExclaveAddressSpace initWithInfo:name:]( objc_alloc(&OBJC_CLASS___SAKCDataExclaveAddressSpace),  (uint64_t)v105,  v307);
      [MEMORY[0x189607968] numberWithUnsignedLongLong:*v105];
      v125 = (void *)objc_claimAutoreleasedReturnValue();
      [v99 setObject:v124 forKeyedSubscript:v125];

      uint64_t v17 = 0x189607000uLL;
      v75 = 0LL;
      goto LABEL_403;
    }

    v219 = *__error();
    _sa_logt();
    v220 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v220, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218240;
      *(void *)&uint8_t buf[4] = v300;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v228;
      _os_log_error_impl( &dword_186C92000,  v220,  OS_LOG_TYPE_ERROR,  "Container end with wrong ID (%llu != %llu)",  buf,  0x16u);
    }

    v75 = 7LL;
LABEL_415:

    *__error() = v219;
    objc_autoreleasePoolPop(v107);
LABEL_402:
    uint64_t v17 = 0x189607000LL;
LABEL_403:

    int v9 = v96;
    superclass = v312;
    int v11 = 0x189603000LL;
LABEL_404:
    objc_autoreleasePoolPop(v87);
    if (!(_DWORD)v75)
    {
LABEL_405:
      uint64_t v13 = a2->superclass;
      v231 = (char *)a2->isa + HIDWORD(a2->isa->isa);
      __int16 v15 = v231 + 16;
      a2->isa = (__objc2_class *)(v231 + 16);
      uint64_t v16 = v231 + 32;
      continue;
    }

    break;
  }

          [v30 setUserFrames:v90];
          [v30 setNumUserFrames:v69];
          goto LABEL_166;
        default:
          if ((_DWORD)v70 != 2355) {
            goto LABEL_167;
          }
          v80 = v69;
          v81 = calloc(v69, 8uLL);
          if ((_DWORD)v69)
          {
            v82 = 0;
            v83 = v81;
            do
            {
              *v83++ = *(void *)((char *)v50 + v82);
              v82 += v72;
              --v80;
            }

            while (v80);
          }

          [v30 setSwiftAsyncFrames:v81];
          [v30 setNumSwiftAsyncFrames:v69];
LABEL_166:
          uint64_t v31 = v222;
          break;
      }

      goto LABEL_167;
    }

    if (v49 != 19) {
      goto LABEL_167;
    }
    v66 = v46 + 4;
    uint64_t v36 = SkipToContainerEnd(a2, 1);
    objc_autoreleasePoolPop((void *)v34);
    if ((_DWORD)v36)
    {
      uint64_t v28 = v228;
      int v29 = self;
      a1 = v234;
      goto LABEL_243;
    }

LABEL_424:
  return v75;
}

    [*v1217 wrSignpostName];
    v450 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v450) {
      goto LABEL_435;
    }
    if (v1208)
    {
      v451 = *p_isa;
      [*v1217 wrSignpostName];
      v452 = (void *)objc_claimAutoreleasedReturnValue();
      SAJSONWriteDictionaryEntry(v451, @"wrSignpostName", v452);

      [*v1217 wrSignpostSubsystem];
      v453 = (void *)objc_claimAutoreleasedReturnValue();

      if (v453)
      {
        v454 = *p_isa;
        [*v1217 wrSignpostSubsystem];
        v455 = (void *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v454, @"wrSignpostSubsystem", v455);
      }

      [*v1217 wrSignpostCategory];
      v456 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v456)
      {
LABEL_435:
        [*v1217 wrTriggeringSignpostName];
        v465 = (void *)objc_claimAutoreleasedReturnValue();
        if (v465)
        {
          [*v1217 wrSignpostName];
          v466 = (void *)objc_claimAutoreleasedReturnValue();
          if (v466)
          {
            [*v1217 wrTriggeringSignpostName];
            v467 = (void *)objc_claimAutoreleasedReturnValue();
            [*v1217 wrSignpostName];
            v468 = (void *)objc_claimAutoreleasedReturnValue();
            v469 = [v467 isEqualToString:v468];

            if ((v469 & 1) != 0) {
              goto LABEL_450;
            }
          }

          else
          {
          }

          if (!v1208)
          {
            [*v1217 wrTriggeringSignpostName];
            v477 = (void *)objc_claimAutoreleasedReturnValue();
            [*v1217 wrTriggeringSignpostSubsystem];
            v478 = (void *)objc_claimAutoreleasedReturnValue();
            if (v478)
            {
              [*v1217 wrTriggeringSignpostCategory];
              v479 = (void *)objc_claimAutoreleasedReturnValue();
              v480 = v479 == 0LL;

              if (!v480)
              {
                [*v1217 wrTriggeringSignpostSubsystem];
                v481 = (void *)objc_claimAutoreleasedReturnValue();
                [*v1217 wrTriggeringSignpostCategory];
                v482 = (void *)objc_claimAutoreleasedReturnValue();
                v483 = [v477 stringByAppendingFormat:@" [%@:%@]", v481, v482];

                v477 = (void *)v483;
              }
            }

            [*p_isa printWithFormat:@"%-*s%@\n", 18, "Triggering Signpost: ", v477];
            goto LABEL_449;
          }

          v470 = *p_isa;
          [*v1217 wrTriggeringSignpostName];
          v471 = (void *)objc_claimAutoreleasedReturnValue();
          SAJSONWriteDictionaryEntry(v470, @"wrTriggeringSignpostName", v471);

          [*v1217 wrTriggeringSignpostSubsystem];
          v472 = (void *)objc_claimAutoreleasedReturnValue();

          if (v472)
          {
            v473 = *p_isa;
            [*v1217 wrTriggeringSignpostSubsystem];
            v474 = (void *)objc_claimAutoreleasedReturnValue();
            SAJSONWriteDictionaryEntry(v473, @"wrTriggeringSignpostSubsystem", v474);
          }

          [*v1217 wrTriggeringSignpostCategory];
          v475 = (void *)objc_claimAutoreleasedReturnValue();

          if (v475)
          {
            v476 = *p_isa;
            [*v1217 wrTriggeringSignpostCategory];
            v477 = (void *)objc_claimAutoreleasedReturnValue();
            SAJSONWriteDictionaryEntry(v476, @"wrTriggeringSignpostCategory", v477);
LABEL_449:
          }
        }

LABEL_71:
  v173 = v52;
  if (a15 && (v63 = (void *)a15[1]) != 0LL)
  {
    SANSStringForCString(v63);
    v177 = (void *)objc_claimAutoreleasedReturnValue();
  }

  else
  {
    v177 = 0LL;
  }

  if (v45)
  {
    v64 = [(id)v45 turnstileInfo];

    v174 = (a14 | v64) == 0;
    if (a14 && v64)
    {
      v65 = [(id)v45 turnstileInfo];
      v66 = (void *)v65;
      if (a15)
      {
        v67 = *(unsigned __int16 *)(*a15 + 2LL);
        v68 = *(unsigned __int8 *)(*a15 + 4LL);
      }

      else
      {
        v67 = 0LL;
        v68 = 0LL;
      }

      v174 = -[SATurnstileInfo matchesKCDataTurnstileInfo:portName:flags:domain:](v65, a14, v177, v67, v68);
    }

    if (!v26) {
      goto LABEL_100;
    }
    v70 = [(id)v45 userTimeInNs];
    v71 = v184[23];
    if (!(_DWORD)v71 || !HIDWORD(v71)) {
      goto LABEL_99;
    }
    v72 = v70;
    v73 = *(void *)(v26 + 48);
    if ((_DWORD)v71 != HIDWORD(v71)) {
      v73 = __udivti3();
    }
    if (v72 >= v73)
    {
LABEL_99:
      v74 = [(id)v45 systemTimeInNs];
      v75 = v184[23];
      if (!(_DWORD)v75 || !HIDWORD(v75)) {
        goto LABEL_269;
      }
      v76 = v74;
      v77 = *(void *)(v26 + 56);
      if ((_DWORD)v75 != HIDWORD(v75)) {
        v77 = __udivti3();
      }
      if (v76 >= v77)
      {
LABEL_269:
        if (!a16
          || (v78 = a16[1], v78 == [(id)v45 cycles])
          && (v79 = *a16, v79 == [(id)v45 instructions]))
        {
          if ((*(_BYTE *)(v26 + 65) & 8) == 0)
          {
LABEL_100:
            v69 = *(_DWORD *)(v45 + 40);
LABEL_101:
            v80 = (_DWORD *)(v26 + 88);
            if (!v26) {
              v80 = (_DWORD *)(v27 + 32);
            }
            if (v69 == *v80)
            {
              v81 = [(id)v45 basePriority];
              v82 = (__int16 *)(v26 + 96);
              if (!v26) {
                v82 = (__int16 *)(v27 + 40);
              }
              if (v81 == *v82)
              {
                v83 = [(id)v45 scheduledPriority];
                v84 = (__int16 *)(v26 + 98);
                if (!v26) {
                  v84 = (__int16 *)(v27 + 42);
                }
                if (v83 == *v84)
                {
                  v85 = [(id)v45 schedulerFlags];
                  v86 = (_DWORD *)(v26 + 92);
                  if (!v26) {
                    v86 = (_DWORD *)(v27 + 36);
                  }
                  if (v85 == *v86)
                  {
                    v87 = [(id)v45 voucherIdentifier];
                    v88 = (void *)(v26 + 32);
                    if (!v26) {
                      v88 = (void *)(v27 + 8);
                    }
                    if (v87 == *v88)
                    {
                      v89 = [(id)v45 threadQos];
                      v90 = (unsigned __int8 *)(v26 + 100);
                      if (!v26) {
                        v90 = (unsigned __int8 *)(v27 + 44);
                      }
                      if (v89 == *v90)
                      {
                        v91 = [(id)v45 threadRequestedQos];
                        v92 = (unsigned __int8 *)(v26 + 101);
                        if (!v26) {
                          v92 = (unsigned __int8 *)(v27 + 45);
                        }
                        if (v91 == *v92)
                        {
                          v93 = [(id)v45 threadRequestedQosOverride];
                          v94 = (unsigned __int8 *)(v26 + 102);
                          if (!v26) {
                            v94 = (unsigned __int8 *)(v27 + 46);
                          }
                          if (v93 == *v94)
                          {
                            v95 = [(id)v45 ioTier];
                            v96 = (unsigned __int8 *)(v26 + 103);
                            if (!v26) {
                              v96 = (unsigned __int8 *)(v27 + 47);
                            }
                            if (v95 == *v96)
                            {
                              v97 = [(id)v45 isDarwinBG];
                              v98 = (_BYTE *)(v26 ? v26 + 64 : v27 + 16);
                              if (v97 != ((*v98 & 0x10) == 0)
                                && [(id)v45 isIOPassive] != ((*v98 & 0x20) == 0)
                                && [(id)v45 isIdleWorkQueue] != ((v98[1] & 0x10) == 0)
                                && [(id)v45 isRunning] != ((v98[1] & 8) == 0)
                                && v172 == [(id)v45 isSuspended]
                                && v47
                                && ((v175 ^ 1) & 1) == 0
                                && ((v174 ^ 1) & 1) == 0)
                              {
                                if (v45) {
                                  objc_setProperty_atomic((id)v45, v99, v190, 56LL);
                                }
                                -[SAThreadState setEndSampleIndex:](v45, a7);
                                [(id)v45 dispatchQueue];
                                v100 = (void *)objc_claimAutoreleasedReturnValue();
                                v46 = [v100 identifier];

                                v50 = v187;
                                goto LABEL_248;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }

            [(id)v45 leafUserFrame];
            v181 = (void *)objc_claimAutoreleasedReturnValue();
            [(id)v45 leafOfCRootFramesReplacedBySwiftAsync];
            v176 = (id)objc_claimAutoreleasedReturnValue();
            [(id)v45 leafKernelFrame];
            v180 = (void *)objc_claimAutoreleasedReturnValue();
            if (v45) {
              Property = objc_getProperty((id)v45, v101, 176LL, 1);
            }
            else {
              Property = 0LL;
            }
            v103 = Property;

            v192 = v103;
            v104 = (uint64_t)a16;
            if (!v47) {
              goto LABEL_145;
            }
LABEL_157:
            v105 = [(id)v45 name];
            goto LABEL_158;
          }
        }
      }
    }
  }

  else
  {
    if (!v26)
    {
      v174 = 0;
      v69 = 0;
      goto LABEL_101;
    }

    v174 = 0;
  }

  [v189 setContinuation:*(void *)(v26 + 16)];
  v106 = (*(_WORD *)(v26 + 64) & 0x8080) != 0
      || [v191 pid] && !objc_msgSend(v189, "hasUserStack");
  [v189 setIsUserStackTruncated:v106];
  [v189 setIsSwiftAsyncStackTruncated:(*(void *)(v26 + 64) >> 16) & 1];
  [v189 setIsKernelStackTruncated:(*(void *)(v26 + 64) >> 14) & 1];
  if ([v191 pid])
  {
    v193 = 0LL;
    v181 = -[SATask leafFrameAfterAddingStack:leafOfCRootFramesReplacedBySwiftAsync:]((uint64_t)v191, v189, &v193);
    v176 = v193;
  }

  else
  {
    v176 = 0LL;
    v181 = 0LL;
  }

  v104 = (uint64_t)a16;
  v180 = -[SATask leafFrameAfterAddingStack:leafOfCRootFramesReplacedBySwiftAsync:]((uint64_t)v188, v189, 0LL);
  if (v47) {
    goto LABEL_157;
  }
LABEL_145:
  if (!a10)
  {
    v182 = 0LL;
    goto LABEL_159;
  }

  v105 = SANSStringForCString(a10);
LABEL_158:
  v182 = (void *)v105;
LABEL_159:
  v107 = v184;
  v108 = v176;
  if (v175)
  {
    v109 = [(id)v45 waitInfo];
  }

  else
  {
    if (!a12)
    {
      v112 = 0LL;
      goto LABEL_168;
    }

    if (a13)
    {
      v110 = *(unsigned __int16 *)(*a13 + 2LL);
      v111 = *(unsigned __int8 *)(*a13 + 4LL);
    }

    else
    {
      v110 = 0LL;
      v111 = 0LL;
    }

    v109 = +[SAWaitInfo waitInfoWithKCDataWaitInfo:portName:flags:domain:]( (uint64_t)&OBJC_CLASS___SAWaitInfo,  a12,  v52,  v110,  v111);
  }

  v112 = (void *)v109;
LABEL_168:
  if (v174)
  {
    v113 = [(id)v45 turnstileInfo];
  }

  else
  {
    if (!a14)
    {
      v116 = 0LL;
      goto LABEL_177;
    }

    if (a15)
    {
      v114 = *(unsigned __int16 *)(*a15 + 2LL);
      v115 = *(unsigned __int8 *)(*a15 + 4LL);
    }

    else
    {
      v114 = 0LL;
      v115 = 0LL;
    }

    v113 = +[SATurnstileInfo turnstileInfoWithKCDataTurnstileInfo:portName:flags:domain:]( (uint64_t)&OBJC_CLASS___SATurnstileInfo,  a14,  v177,  v114,  v115);
  }

  v116 = (void *)v113;
LABEL_177:
  v185 = v116;
  if (a2)
  {
    v117 = +[SAThreadState stateWithKCDataThreadV4:startTimestamp:endTimestamp:startSampleIndex:endSampleIndex:name:leafUserFrame:leafOfCRootFramesReplacedBySwiftAsync:leafKernelFrame:machTimebase:waitInfo:turnstileInfo:threadPolicyVersion:threadInstructionCycles:]( (uint64_t)&OBJC_CLASS___SAThreadState,  a2,  v190,  v190,  a7,  a7,  v182,  v181,  v176,  v180,  (uint64_t)v107[23],  v112,  v116,  *((_DWORD *)v107 + 50),  v104);
    goto LABEL_185;
  }

  if (v183)
  {
    v117 = +[SAThreadState stateWithKCDataThreadV2:startTimestamp:endTimestamp:startSampleIndex:endSampleIndex:name:leafUserFrame:leafOfCRootFramesReplacedBySwiftAsync:leafKernelFrame:machTimebase:waitInfo:turnstileInfo:]( (uint64_t)&OBJC_CLASS___SAThreadState,  v183,  v190,  v190,  a7,  a7,  v182,  v181,  v176,  v180,  (uint64_t)v107[23],  v112,  v116);
    goto LABEL_185;
  }

  if (a4)
  {
    v117 = +[SAThreadState stateWithKCDataDeltaThreadV3:startTimestamp:endTimestamp:startSampleIndex:endSampleIndex:name:leafUserFrame:leafOfCRootFramesReplacedBySwiftAsync:leafKernelFrame:oldThreadState:waitInfo:turnstileInfo:threadPolicyVersion:]( (uint64_t)&OBJC_CLASS___SAThreadState,  a4,  v190,  v190,  a7,  a7,  v182,  v181,  v176,  v180,  (void *)v45,  v112,  v116,  *((_DWORD *)v107 + 50));
    goto LABEL_185;
  }

  if (v179)
  {
    v117 = +[SAThreadState stateWithKCDataDeltaThreadV2:startTimestamp:endTimestamp:startSampleIndex:endSampleIndex:name:leafUserFrame:leafOfCRootFramesReplacedBySwiftAsync:leafKernelFrame:oldThreadState:waitInfo:turnstileInfo:]( (uint64_t)&OBJC_CLASS___SAThreadState,  v179,  v190,  v190,  a7,  a7,  v182,  v181,  v176,  v180,  (void *)v45,  v112,  v116);
LABEL_185:
    v119 = v117;
    if (v117)
    {
      objc_setProperty_atomic(v117, v118, v192, 176LL);
      if (v172) {
        *((_BYTE *)v119 + 11) |= 0x40u;
      }
    }

    if (v45)
    {
      v120 = [(id)v45 userTimeInNs];
      if (v120 > [v119 userTimeInNs])
      {
        v121 = [(id)v45 userTimeInNs];
        if (v119) {
          *((void *)v119 + 17) = v121;
        }
      }

      v122 = [(id)v45 systemTimeInNs];
      if (v122 > [v119 systemTimeInNs])
      {
        v123 = [(id)v45 systemTimeInNs];
        if (v119) {
          *((void *)v119 + 1_Block_object_dispose(&STACK[0x288], 8) = v123;
        }
      }

      v124 = [(id)v45 cycles];
      if (v124 > [v119 cycles])
      {
        v125 = [(id)v45 cycles];
        if (v119) {
          *((void *)v119 + 20) = v125;
        }
      }

      v126 = [(id)v45 instructions];
      if (v126 > [v119 instructions])
      {
        v127 = [(id)v45 instructions];
        if (v119) {
          *((void *)v119 + 19) = v127;
        }
      }
    }

    if (v31)
    {
      [v31[1] addObject:v119];
      v128 = [v31[1] count] - 1;
    }

    else
    {
      v128 = 0LL;
    }

    v178 = v112;
    if (!v26)
    {
      [(id)v45 dispatchQueue];
      v137 = (_BYTE *)objc_claimAutoreleasedReturnValue();
      v138 = v137;
      if (v137)
      {
        v46 = [v137 identifier];
        if (v119) {
          objc_storeWeak((id *)v119 + 14, v138);
        }
        v139 = +[SARecipeState stateWithThread:threadStateIndex:]((uint64_t)&OBJC_CLASS___SADispatchQueueState, v31, v128);
        if (v138[24]) {
          v140 = 0LL;
        }
        else {
          v140 = v138 + 24;
        }
        -[SARecipe addState:hasConcurrentExecution:]((uint64_t)v138, v139, v140);
      }

      else
      {
        v46 = 0LL;
      }

      [(id)v45 swiftTask];
      v141 = (void *)objc_claimAutoreleasedReturnValue();
      if (v141)
      {
        if (v119) {
          objc_storeWeak((id *)v119 + 15, v141);
        }
        v145 = +[SARecipeState stateWithThread:threadStateIndex:]((uint64_t)&OBJC_CLASS___SASwiftTaskState, v31, v128);
        -[SARecipe addState:hasConcurrentExecution:]((uint64_t)v141, v145, 0LL);
      }

      goto LABEL_246;
    }

    a1 = a11;
    v46 = *(void *)(v26 + 40);
    if (v46)
    {
      [MEMORY[0x189607968] numberWithUnsignedLongLong:v46];
      v129 = (void *)objc_claimAutoreleasedReturnValue();
      [v191 dispatchQueues];
      v130 = (void *)objc_claimAutoreleasedReturnValue();
      [v130 objectForKeyedSubscript:v129];
      v131 = (_BYTE *)objc_claimAutoreleasedReturnValue();

      if (!v131)
      {
        +[SADispatchQueue dispatchQueueWithId:]((uint64_t)&OBJC_CLASS___SADispatchQueue, v46);
        v131 = (_BYTE *)objc_claimAutoreleasedReturnValue();
        -[SATask addDispatchQueue:]((uint64_t)v191, v131);
      }

      if (a11)
      {
        [v131 dispatchQueueLabel];
        v132 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v132)
        {
          SANSStringForCString(a11);
          v134 = (void *)objc_claimAutoreleasedReturnValue();
          if (v134 && v131) {
            objc_setProperty_atomic_copy(v131, v133, v134, 32LL);
          }
        }
      }

      if (v119) {
        objc_storeWeak((id *)v119 + 14, v131);
      }
      v135 = +[SARecipeState stateWithThread:threadStateIndex:]((uint64_t)&OBJC_CLASS___SADispatchQueueState, v31, v128);
      v108 = v176;
      if (v131)
      {
        if (v131[24]) {
          v136 = 0LL;
        }
        else {
          v136 = v131 + 24;
        }
        -[SARecipe addState:hasConcurrentExecution:]((uint64_t)v131, v135, v136);
      }

      if (!v176)
      {
        if (!v119) {
          goto LABEL_247;
        }
        goto LABEL_240;
      }

                                                  if ((v1 & 0x8000000) != 0) {
                                                    goto LABEL_175;
                                                  }
                                                  goto LABEL_72;
                                                }

    *__error() = v34;
    goto LABEL_72;
  }

  tm v38 = posix_spawn_file_actions_adddup2(&v94, v98[1], 2);
  if (v38)
  {
    uint64_t v20 = v38;
    uint64_t v34 = *__error();
    _sa_logt();
    uint64_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v96) = v20;
      uint64_t v36 = "Unable to set posix file dup2: %{errno}d";
      goto LABEL_70;
    }

    goto LABEL_71;
  }

  if (!v11) {
    goto LABEL_81;
  }
LABEL_78:
  uint64_t v13 = [v7 printWithFormat:@"blocked by %@", v9] + v13;
LABEL_81:

  return v13;
}

      a1 = v37;
      uint64_t v28 = *__error();
      _sa_logt();
      v55 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      a8 = (char)v23;
      if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
      {
        v56 = [v22 debugDescription];
        v57 = [v56 UTF8String];
        v58 = [v23 count];
        *(_DWORD *)buf = 136315650;
        *(void *)(v26 + 4) = v57;
        *(_WORD *)&buf[12] = 2048;
        *(void *)(v26 + 14) = a1;
        *(_WORD *)&buf[22] = 2048;
        v186 = (uint64_t (*)(uint64_t, uint64_t))v58;
        _os_log_error_impl( &dword_186C92000,  v55,  OS_LOG_TYPE_ERROR,  "%s: startingIndex %lu < threadStateIndexes.count %lu",  buf,  0x20u);
      }

      int v29 = (char)v23;
      *__error() = v28;
      uint64_t v24 = [v22 debugDescription];
      LOBYTE(v27) = [v24 UTF8String];
      [v23 count];
      _SASetCrashLogMessage( 10457,  "%s: startingIndex %lu < threadStateIndexes.count %lu",  v59,  v60,  v61,  v62,  v63,  v64,  v27);

      v30 = _os_crash();
      __break(1u);
LABEL_74:
      v70 = 0LL;
    }

    time_t v37 = -[SARecipe indexOfFirstStateOnOrAfterTime:sampleIndex:]( (uint64_t)v100,  *(void **)(a1 + 32),  *(void *)(a1 + 48));
    if (v37 == 0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_53;
    }
LABEL_45:
    v92 = v25;
    v184[0] = 0LL;
    v184[1] = v184;
    v184[2] = 0x2020000000LL;
    v184[3] = 0LL;
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000LL;
    v186 = __Block_byref_object_copy__4;
    v187 = __Block_byref_object_dispose__4;
    v188 = 0LL;
    v182[0] = 0LL;
    v182[1] = v182;
    v182[2] = 0x3032000000LL;
    v182[3] = __Block_byref_object_copy__4;
    v182[4] = __Block_byref_object_dispose__4;
    v183 = 0LL;
    v180[0] = 0LL;
    v180[1] = v180;
    v180[2] = 0x3032000000LL;
    v180[3] = __Block_byref_object_copy__4;
    v180[4] = __Block_byref_object_dispose__4;
    v181 = 0LL;
    v178[0] = 0LL;
    v178[1] = v178;
    v178[2] = 0x3032000000LL;
    v178[3] = __Block_byref_object_copy__4;
    v178[4] = __Block_byref_object_dispose__4;
    v179 = 0LL;
    v176[0] = 0LL;
    v176[1] = v176;
    v176[2] = 0x3032000000LL;
    v176[3] = __Block_byref_object_copy__4;
    v176[4] = __Block_byref_object_dispose__4;
    v177 = 0LL;
    v174[0] = 0LL;
    v174[1] = v174;
    v174[2] = 0x3032000000LL;
    v174[3] = __Block_byref_object_copy__4;
    v174[4] = __Block_byref_object_dispose__4;
    v175 = 0LL;
    v173[0] = 0LL;
    v173[1] = v173;
    v173[2] = 0x2020000000LL;
    v173[3] = 0x7FFFFFFFFFFFFFFFLL;
    v171[0] = 0LL;
    v171[1] = v171;
    v171[2] = 0x3032000000LL;
    v171[3] = __Block_byref_object_copy__4;
    v171[4] = __Block_byref_object_dispose__4;
    v172 = 0LL;
    v165 = 0LL;
    v166 = &v165;
    v167 = 0x3032000000LL;
    v168 = __Block_byref_object_copy__4;
    v169 = __Block_byref_object_dispose__4;
    v170 = 0LL;
    v161 = 0LL;
    v162 = &v161;
    v163 = 0x2020000000LL;
    v164 = 0LL;
    v160[0] = 0LL;
    v160[1] = v160;
    v160[2] = 0x2020000000LL;
    v160[3] = 0x7FFFFFFFFFFFFFFFLL;
    v158[0] = 0LL;
    v158[1] = v158;
    v158[2] = 0x2020000000LL;
    v159 = 0;
    v66 = *(void **)(a1 + 40);
    v65 = -[SASamplePrinter hasTimeIndexes](a1) & (v25 ^ 1);
    v101[0] = MEMORY[0x1895F87A8];
    v101[1] = 3221225472LL;
    v101[2] = __245__SASamplePrinter_addStackForDispatchQueue_orSwiftTaskStates_orThread_andThreadStateIndexes_task_toRootObjects_nameChanges_dispatchQueueChanges_swiftTaskChanges_threadChanges_priorityChanges_microstackshotSummary_onlyHeaviestStack_includeState___block_invoke_1544;
    v101[3] = &unk_189F64198;
    v101[4] = a1;
    v129 = 0;
    v102 = v98;
    v123 = v37;
    v103 = v22;
    v104 = v23;
    tm v38 = v100;
    v105 = v38;
    v39 = v99;
    v106 = v39;
    v107 = v94;
    v110 = v160;
    v130 = v68;
    v111 = v173;
    v112 = &v161;
    v131 = v81;
    v132 = v84;
    v133 = v86;
    v127 = v72;
    v128 = v73;
    v134 = v76;
    v135 = v77;
    v136 = v78;
    v137 = v79;
    v138 = v75;
    v139 = v74;
    v140 = v71;
    v125 = v70;
    v141 = v80;
    v113 = v158;
    v114 = v184;
    v115 = buf;
    v116 = v182;
    v142 = v35;
    v143 = v92;
    v117 = &v165;
    v118 = v171;
    v119 = v174;
    v120 = v178;
    v124 = i;
    v121 = v176;
    v144 = a9;
    v145 = a10;
    v146 = a12;
    v147 = a8;
    v148 = a11;
    v149 = v85;
    v150 = v89;
    v151 = v88;
    v40 = v96;
    v108 = v40;
    v122 = v180;
    v152 = v90;
    v153 = v27;
    v154 = v83;
    v155 = v95;
    v156 = v82;
    v109 = v97;
    v126 = v91;
    v157 = v87;
    -[SASamplePrinter iterateDispatchQueue:orSwiftTaskStates:orThread:threadStateIndexes:startingAtIndex:endingAfterTimestamp:task:stopAtTimeJumps:callback:]( a1,  v38,  v39,  v103,  v104,  v37,  v66,  v67,  v65,  v101);
    if (v35)
    {
      if ((v92 & 1) == 0)
      {
        v41 = v162[3];
        if (v166[5] || v41)
        {
          v42 = -[SASamplePrinter stateChangeStringForThreadState:serialDispatchQueue:swiftTaskStates:thread:threadStateIndexes:taskState:task:iteratorIndex:missingStateIsInAnotherStack:numSamplesOmittedSincePreviousDisplayedSample:sampleTimestamp:previousSampleTimestamp:previousDisplayedTimestamp:previousTaskState:previousThread:previousThreadState:dispatchQueueChanges:swiftTaskChanges:priorityChanges:nameChanges:threadChanges:isTimeJump:ioEventsSincePreviousThreadState:]( a1,  0LL,  v38,  v39,  0LL,  0LL,  0LL,  0LL,  0LL,  0,  v41,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0,  0,  0,  0,  0,  0,  (void *)v166[5]);
          if (v42) {
            [v40 addObject:v42];
          }
        }
      }
    }

    _Block_object_dispose(v158, 8);
    _Block_object_dispose(v160, 8);
    _Block_object_dispose(&v161, 8);
    _Block_object_dispose(&v165, 8);

    _Block_object_dispose(v171, 8);
    _Block_object_dispose(v173, 8);
    _Block_object_dispose(v174, 8);

    _Block_object_dispose(v176, 8);
    _Block_object_dispose(v178, 8);

    _Block_object_dispose(v180, 8);
    _Block_object_dispose(v182, 8);

    _Block_object_dispose(buf, 8);
    _Block_object_dispose(v184, 8);
LABEL_53:

    objc_autoreleasePoolPop(context);
  }
}

  return v11;
}

LABEL_233:
      [MEMORY[0x189607968] numberWithUnsignedLongLong:-1];
      v141 = (void *)objc_claimAutoreleasedReturnValue();
      [v191 swiftTasks];
      v142 = (void *)objc_claimAutoreleasedReturnValue();
      [v142 objectForKeyedSubscript:v141];
      v143 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v143)
      {
        v143 = +[SADispatchQueue dispatchQueueWithId:]((uint64_t)&OBJC_CLASS___SASwiftTask, -1LL);
        -[SATask addSwiftTask:]((uint64_t)v191, v143);
      }

      if (v119) {
        objc_storeWeak((id *)v119 + 15, v143);
      }
      v144 = +[SARecipeState stateWithThread:threadStateIndex:]((uint64_t)&OBJC_CLASS___SASwiftTaskState, v31, v128);
      if (v143) {
        -[SARecipe addState:hasConcurrentExecution:]((uint64_t)v143, v144, 0LL);
      }

LABEL_246:
      goto LABEL_247;
    }

    if (!a11)
    {
      if (v119)
      {
        objc_storeWeak((id *)v119 + 14, 0LL);
        v108 = v176;
        if (!v176)
        {
LABEL_240:
          objc_storeWeak((id *)v119 + 15, 0LL);
LABEL_247:
          v50 = v187;

LABEL_248:
LABEL_249:
          v51 = v189;
          goto LABEL_250;
        }
      }

      else
      {
        v108 = v176;
        if (!v176)
        {
          v46 = 0LL;
          goto LABEL_247;
        }
      }

      goto LABEL_233;
    }

    goto LABEL_255;
  }

  v163 = *__error();
  _sa_logt();
  v164 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v164, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_186C92000, v164, OS_LOG_TYPE_ERROR, "no thread snap later", buf, 2u);
  }

  *__error() = v163;
  _SASetCrashLogMessage(3293, "no thread snap later", v165, v166, v167, v168, v169, v170, v171);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

LABEL_68:
    v43 = (int *)((char *)v20 + v43[1]);
    uint64_t v20 = v43 + 4;
  }

  if (v45 != 17 && (v45 & 0xFFFFFFF0) != 0x20) {
    goto LABEL_511;
  }
  v55 = *((void *)v43 + 1);
  if (!(_DWORD)v55)
  {
    if ((_DWORD)v44) {
      goto LABEL_511;
    }
    v56 = HIDWORD(v55);
    if (v45 == 17)
    {
LABEL_115:
      LOBYTE(v41) = 0;
      if ((int)v56 <= 2313)
      {
        if ((_DWORD)v56 == 2311)
        {
          v59 = 4;
          goto LABEL_93;
        }
      }

      else if ((v56 - 2314) < 4 || (_DWORD)v56 == 2369)
      {
        goto LABEL_68;
      }
    }

    v59 = 0;
    goto LABEL_93;
  }

  if (v45 != 17)
  {
    v60 = v44 - (*v43 & 0xF);
    v59 = v60 / v55;
    v56 = HIDWORD(v55);
LABEL_93:
    if ((((_DWORD)v56 == 2311) & v37) == 1)
    {
      v284 = v38;
      __ptra = v42;
      v39 = (unsigned int *)calloc(*((void *)v43 + 1), 4uLL);
      v41 = 0;
      if ((_DWORD)v55)
      {
        v61 = 0LL;
        tm v38 = v284;
        v42 = __ptra;
        do
        {
          v39[v61++] = *(_DWORD *)((char *)v47 + v41);
          v41 += v59;
          time_t v37 = 1;
        }

        while (v55 != v61);
        LOBYTE(v41) = 0;
        v40 = v55;
      }

      else
      {
        v40 = 0;
        time_t v37 = 1;
        tm v38 = v284;
        v42 = __ptra;
      }

      goto LABEL_68;
    }

                                            if ((v1 & 0x1000000) != 0) {
                                              goto LABEL_163;
                                            }
                                            goto LABEL_69;
                                          }

  *(void *)buf = 0LL;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x2020000000LL;
  v201 = a6;
  if (a7 && *a7)
  {
    SANSStringForCString(a7);
    v130 = (void *)objc_claimAutoreleasedReturnValue();
  }

  else
  {
    v130 = 0LL;
  }

  v79 = 0LL;
  v198[0] = 0LL;
  v198[1] = v198;
  v198[2] = 0x2020000000LL;
  v199 = a8;
  if (a9)
  {
    v133 = 0LL;
    if (a8)
    {
      [v141 dispatchQueues];
      v80 = (void *)objc_claimAutoreleasedReturnValue();
      [MEMORY[0x189607968] numberWithUnsignedLongLong:a9];
      v81 = (void *)objc_claimAutoreleasedReturnValue();
      [v80 objectForKeyedSubscript:v81];
      v79 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v79)
      {
        v79 = +[SADispatchQueue dispatchQueueWithId:]((uint64_t)&OBJC_CLASS___SADispatchQueue, a9);
        -[SATask addDispatchQueue:]((uint64_t)v141, v79);
      }

      if (a10)
      {
        [v79 dispatchQueueLabel];
        v82 = (void *)objc_claimAutoreleasedReturnValue();
        v83 = v82 == 0LL;

        if (v83)
        {
          SANSStringForCString(a10);
          v85 = (void *)objc_claimAutoreleasedReturnValue();
          if (v85 && v79) {
            objc_setProperty_atomic_copy(v79, v84, v85, 32LL);
          }
        }
      }

      v133 = objc_alloc_init(MEMORY[0x189603FA8]);
    }
  }

  else
  {
    v133 = 0LL;
  }

  v196[0] = 0LL;
  v196[1] = v196;
  v196[2] = 0x2020000000LL;
  v197 = a15 != 0;
  if (a15)
  {
    [v141 swiftTasks];
    v86 = (void *)objc_claimAutoreleasedReturnValue();
    [MEMORY[0x189607968] numberWithUnsignedLongLong:a15];
    v87 = (void *)objc_claimAutoreleasedReturnValue();
    [v86 objectForKeyedSubscript:v87];
    v88 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v88)
    {
      v88 = +[SADispatchQueue dispatchQueueWithId:]((uint64_t)&OBJC_CLASS___SASwiftTask, a15);
      -[SATask addSwiftTask:]((uint64_t)v141, v88);
    }

    v118 = objc_alloc_init(MEMORY[0x189603FA8]);
  }

  else
  {
    v88 = 0LL;
    v118 = 0LL;
  }

  v194[0] = 0LL;
  v194[1] = v194;
  v194[2] = 0x2020000000LL;
  v195 = a13;
  v192[0] = 0LL;
  v192[1] = v192;
  v192[2] = 0x2020000000LL;
  v193 = a18;
  v190[0] = 0LL;
  v190[1] = v190;
  v190[2] = 0x2020000000LL;
  v191 = a28;
  v188[0] = 0LL;
  v188[1] = v188;
  v188[2] = 0x2020000000LL;
  v189 = a31;
  v186[0] = 0LL;
  v186[1] = v186;
  v186[2] = 0x2020000000LL;
  v187 = v140 != 0LL;
  v184[0] = 0LL;
  v184[1] = v184;
  v184[2] = 0x2020000000LL;
  v185 = 0;
  v144[0] = MEMORY[0x1895F87A8];
  v144[1] = 3221225472LL;
  v144[2] = __616__SASampleStore_KPerfPrivate__backfillThread_inTask_lastSampleIndex_timestamp_haveName_name_haveDispatchQueueId_dispatchQueueId_dispatchQueueLabel_leafKernelFrame_hasExclaveInKernelStack_haveUserStack_leafUserFrame_swiftTaskId_leafOfCRootFramesReplacedBySwiftAsync_threadExclavesInfo_haveSched_systemCpuTimeNs_userCpuTimeNs_basePriority_scheduledPriority_state_threadQos_threadRequestedQos_threadRequestedQosOverride_threadQosPromote_haveCycIns_instructions_cycles_haveSnap_ioTier_isIOPassive_isDarwinBG_isSuspended_isGlobalForcedIdle_isIdleWorkQueue_lastMadeRunnableTime_isOnCore_isOnCoreForLastSampleIndex_cpuNum___block_invoke;
  v144[3] = &unk_189F625B0;
  v145 = v142;
  v146 = v143;
  v157 = buf;
  v114 = v130;
  v147 = v114;
  v158 = v184;
  v159 = v198;
  v89 = v79;
  v148 = v89;
  v90 = v133;
  v149 = v90;
  v160 = v194;
  v150 = v138;
  v151 = v134;
  v161 = v196;
  v166 = a15;
  v91 = v88;
  v152 = v91;
  v92 = v118;
  v153 = v92;
  v162 = v192;
  v167 = a19;
  v168 = a20;
  v171 = a23;
  v172 = a21;
  v173 = a22;
  v174 = a24;
  v175 = a25;
  v176 = a26;
  v177 = a27;
  v169 = a29;
  v170 = a30;
  v163 = v190;
  v164 = v188;
  v178 = a32;
  v179 = a33;
  v180 = a35;
  v181 = a34;
  v182 = a37;
  v183 = a36;
  v154 = v135;
  v165 = v186;
  v155 = v140;
  v156 = v131;
  [v146 enumerateThreadStatesBetweenStartTime:0 startSampleIndex:0x7FFFFFFFFFFFFFFFLL endTime:0 endSampleIndex:0x7FFFFFFFFFFFFFFFLL reverseOrder:1 block:v144];
  if (v89 && [v90 count])
  {
    if (v89[24]) {
      v93 = 0LL;
    }
    else {
      v93 = v89 + 24;
    }
    -[SARecipe addStates:hasConcurrentExecution:]((uint64_t)v89, v90, v93);
  }

  if (v91 && [v92 count]) {
    -[SARecipe addStates:hasConcurrentExecution:]((uint64_t)v91, v92, 0LL);
  }

  _Block_object_dispose(v184, 8);
  _Block_object_dispose(v186, 8);
  _Block_object_dispose(v188, 8);
  _Block_object_dispose(v190, 8);
  _Block_object_dispose(v192, 8);
  _Block_object_dispose(v194, 8);

  _Block_object_dispose(v196, 8);
  _Block_object_dispose(v198, 8);

  _Block_object_dispose(buf, 8);
LABEL_99:
}

  v376 = 0LL;
  v377 = &v376;
  v378 = 0x2020000000LL;
  v379 = 0x7FFFFFFFFFFFFFFFLL;
  v372 = 0LL;
  v373 = &v372;
  v374 = 0x2020000000LL;
  v375 = 0x7FFFFFFFFFFFFFFFLL;
  if (v12)
  {
    v62 = (void *)v403[5];
    if (v62)
    {
      v63 = [v62 startSampleIndex];
      v64 = *(void *)(a1 + 48);
      if (v63 > v64) {
        v64 = v63;
      }
      v377[3] = v64;
      v65 = [(id)v397[5] endSampleIndex];
      v66 = *(void *)(a1 + 56);
      if (v65 < v66) {
        v66 = v65;
      }
      v373[3] = v66;
    }

    else
    {
      [v326 threads];
      v67 = (void *)objc_claimAutoreleasedReturnValue();
      v371[0] = MEMORY[0x1895F87A8];
      v371[1] = 3221225472LL;
      v371[2] = __103__SASamplePrinter_printTaskHeaderForTask_specialDispatchQueueId_specialThreadId_omitSpecial_omitOther___block_invoke_1006;
      v371[3] = &unk_189F63CB8;
      v371[4] = &v376;
      v371[5] = &v372;
      [v67 enumerateKeysAndObjectsUsingBlock:v371];

      v68 = v377[3];
      if (v68 <= *(void *)(a1 + 48)) {
        v68 = *(void *)(a1 + 48);
      }
      v377[3] = v68;
      v69 = v373[3];
      if (v69 >= *(void *)(a1 + 56)) {
        v69 = *(void *)(a1 + 56);
      }
      v373[3] = v69;
    }
  }

  [*(id *)(a1 + 160) tasksByUniquePid];
  v70 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x189607968], "numberWithUnsignedLongLong:", objc_msgSend(v326, "uniquePid"));
  v71 = (void *)objc_claimAutoreleasedReturnValue();
  [v70 objectForKeyedSubscript:v71];
  v72 = (void *)objc_claimAutoreleasedReturnValue();
  v73 = v72;
  if (v72)
  {
    v74 = v72;
  }

  else
  {
    [*(id *)(a1 + 160) tasksByPid];
    v75 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x189607968], "numberWithInt:", objc_msgSend(v326, "pid"));
    v76 = (void *)objc_claimAutoreleasedReturnValue();
    [v75 objectForKeyedSubscript:v76];
    v74 = (id)objc_claimAutoreleasedReturnValue();
  }

  v370 = 0u;
  v369 = 0u;
  v368 = 0u;
  v367 = 0u;
  a5 = (char *)v74;
  v77 = [a5 countByEnumeratingWithState:&v367 objects:v449 count:16];
  if (!v77)
  {
LABEL_263:

    goto LABEL_264;
  }

  v78 = 0LL;
  v79 = 0;
  v80 = *(void *)v368;
LABEL_86:
  v81 = 0LL;
  while (1)
  {
    if (*(void *)v368 != v80) {
      objc_enumerationMutation(a5);
    }
    v82 = *(void **)(*((void *)&v367 + 1) + 8 * v81);
    if (v79) {
      break;
    }
    v79 = v82 == v326;
    if (v82 != v326)
    {
      v83 = v82;

      v78 = v83;
    }

    if (v77 == ++v81)
    {
      v77 = [a5 countByEnumeratingWithState:&v367 objects:v449 count:16];
      if (!v77)
      {

        if (v82 == v326)
        {
          v84 = 0LL;
          goto LABEL_97;
        }

          v47 = *__error();
          _sa_logt();
          v48 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
          {
            ClassName = object_getClassName(a2);
            v50 = object_getClassName(v32);
            *(_DWORD *)buf = 136315394;
            v75 = (uint64_t)ClassName;
            v76 = 2080;
            FamilyName = (uint64_t)v50;
            _os_log_error_impl(&dword_186C92000, v48, OS_LOG_TYPE_ERROR, "children is %s, child is %s", buf, 0x16u);
          }

          *__error() = v47;
          v51 = object_getClassName(a2);
          object_getClassName(v32);
          _SASetCrashLogMessage(146, "children is %s, child is %s", v52, v53, v54, v55, v56, v57, v51);
          _os_crash();
          __break(1u);
        }

        [a2 anyObject];
        uint64_t v25 = (id)objc_claimAutoreleasedReturnValue();
        if (v25) {
          goto LABEL_58;
        }
      }

      else
      {
        a2 = 0LL;
      }

LABEL_98:
    LOBYTE(v41) = 0;
    goto LABEL_68;
  }

  v277 = 0LL;
  v56 = HIDWORD(v55);
  if (SHIDWORD(v55) <= 2310)
  {
    switch(HIDWORD(v55))
    {
      case 0x30:
        v57 = 20;
        break;
      case 0x31:
        v57 = 24;
        break;
      case 0x81A:
LABEL_105:
        v57 = 8;
        break;
      default:
        goto LABEL_124;
    }
  }

  else
  {
    switch(HIDWORD(v55))
    {
      case 0x907:
        v57 = 4;
        break;
      case 0x908:
      case 0x909:
        goto LABEL_124;
      case 0x90A:
      case 0x90C:
        goto LABEL_105;
      case 0x90B:
      case 0x90D:
        v57 = 16;
        break;
      default:
        if (HIDWORD(v55) != 2369) {
          goto LABEL_124;
        }
        v57 = 48;
        break;
    }
  }

LABEL_511:
  v277 = 0LL;
LABEL_124:

  uint64_t v35 = v328;
  uint64_t v19 = (__objc2_class *)v329;
  uint64_t v20 = v328 + 4;
LABEL_125:
  v285 = objc_alloc_init(&OBJC_CLASS___SAFrameIterator);
  -[SAFrameIterator setBacktracer:](v285, "setBacktracer:", 2LL);
  if (v20 <= (int *)v19)
  {
    __ptrb = 0LL;
    v63 = 0;
    v64 = 0;
    v65 = 0LL;
    v66 = 0LL;
    v67 = 0LL;
    v68 = 0;
    v69 = 0LL;
    v70 = v20;
    v71 = v35;
    while (1)
    {
      v72 = v71[1];
      if ((char *)v70 + v72 > (char *)v19 || (v73 = *v71, *v71 == -242132755))
      {
LABEL_201:
        v62 = 0LL;
        buf.isa = (__objc2_class *)v35;
        buf.superclass = v19;
        v105 = v20;
        superclass = v19;
        isa = (__objc2_class *)v35;
        v262 = (os_log_s *)v63;
        while (1)
        {
          isa_high = HIDWORD(isa->isa);
          if ((char *)v105 + isa_high > (char *)superclass || LODWORD(isa->isa) == -242132755)
          {
LABEL_211:
            v265 = __ptrb;
            goto LABEL_212;
          }

          if (LODWORD(isa->isa) == 19 && LODWORD(isa->cache) == 2377)
          {
            if (!v62) {
              v62 = (void *)[objc_alloc(MEMORY[0x189603FC8]) initWithCapacity:1];
            }
            if (-[SASampleStore parseKCDataExclavesContainer:exclaveInfo:primaryDataIsKPerf:]( a1,  &buf,  v62,  v303))
            {
              v265 = __ptrb;
              v274 = 0LL;
              goto LABEL_213;
            }

            isa = buf.isa;
            superclass = buf.superclass;
            isa_high = HIDWORD(buf.isa->isa);
          }

          v109 = (char *)isa + isa_high;
          isa = (__objc2_class *)(v109 + 16);
          buf.isa = (__objc2_class *)(v109 + 16);
          buf.superclass = superclass;
          v105 = (int *)(v109 + 32);
        }
      }

      v74 = (v73 & 0xFFFFFFF0) == 0x20 ? 17 : *v71;
      v75 = (__objc2_class *)(v71 + 12);
      v76 = v71[2] & 0xF;
      v77 = v72 >= v76;
      v78 = v72 - v76;
      if (!v77) {
        v78 = 0;
      }
      v79 = v78 - 32;
      if (v68)
      {
LABEL_180:
        v68 = v74 != 20 || v69 != *((void *)v71 + 1);
        goto LABEL_183;
      }

LABEL_137:
      v68 = 0;
      if (v74 > 2356)
      {
        if (v74 == 2357)
        {
          if ((v64 & 1) != 0)
          {
            v68 = 0;
            v64 = 1;
            v66 = v75;
          }

          else
          {
            contextc = v67;
            v279 = v65;
            v298 = v63;
            v267 = v69;
            v91 = *__error();
            _sa_logt();
            v92 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
            {
              isa_low = SLOWORD(v75->isa);
              LODWORD(buf.isa) = 67109120;
              HIDWORD(buf.isa) = isa_low;
              _os_log_error_impl( &dword_186C92000,  v92,  OS_LOG_TYPE_ERROR,  "Port label info %d not in port label container",  (uint8_t *)&buf,  8u);
            }

            v93 = __error();
            v68 = 0;
            v64 = 0;
            *v93 = v91;
            v66 = v75;
            v69 = v267;
            v63 = v298;
            v65 = v279;
            v67 = contextc;
          }
        }

        else if (v74 == 2358)
        {
          if (*((_BYTE *)&v75->isa + (v79 - 1)))
          {
            v266 = v64;
            v272 = v66;
            contextb = v67;
            v278 = v65;
            v297 = v63;
            v85 = v69;
            v86 = *__error();
            _sa_logt();
            v87 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(buf.isa) = 0;
              _os_log_impl( &dword_186C92000,  v87,  OS_LOG_TYPE_DEFAULT,  "WARNING: port name non NULL-terminated",  (uint8_t *)&buf,  2u);
            }

            v88 = __error();
            v68 = 0;
            *v88 = v86;
            v69 = v85;
            v63 = v297;
            v65 = v278;
            v67 = contextb;
            v66 = v272;
            v64 = v266;
          }

          else if ((v64 & 1) != 0)
          {
            v68 = 0;
            v64 = 1;
            v67 = v75;
          }

          else
          {
            v269 = v69;
            v273 = v66;
            v280 = v65;
            v300 = v63;
            v98 = *__error();
            _sa_logt();
            v99 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v99, OS_LOG_TYPE_ERROR))
            {
              LODWORD(buf.isa) = 136315138;
              *(__objc2_class **)((char *)&buf.isa + 4) = v75;
              _os_log_error_impl( &dword_186C92000,  v99,  OS_LOG_TYPE_ERROR,  "Port name %s not in port label container",  (uint8_t *)&buf,  0xCu);
            }

            v100 = __error();
            v68 = 0;
            v64 = 0;
            *v100 = v98;
            v67 = v75;
            v69 = v269;
            v66 = v273;
            v63 = v300;
            v65 = v280;
          }
        }
      }

      else if (v74 == 19)
      {
        if ((v64 & 1) != 0) {
          v89 = *((void *)v71 + 1);
        }
        else {
          v89 = v69;
        }
        if ((v71[4] != 2356) | v64 & 1)
        {
          v69 = v89;
          v68 = v64;
        }

        else
        {
          v68 = 0;
        }

        if (!((v71[4] != 2356) | v64 & 1))
        {
          v67 = 0LL;
          v66 = 0LL;
          v65 = *((void *)v71 + 1);
          v64 = 1;
        }
      }

      else if (v74 == 20)
      {
        if ((v64 & (*((void *)v71 + 1) == v65)) == 1)
        {
          v271 = v66;
          if (v66 && v67)
          {
            contexta = v67;
            v80 = v63;
            v81 = v63 + 1;
            v82 = (char *)reallocf(__ptrb, 16LL * (v63 + 1));
            if (v82)
            {
              v68 = 0;
              v65 = 0LL;
              v64 = 0;
              __ptrb = v82;
              v83 = &v82[16 * v80];
              *(void *)v83 = v271;
              *((void *)v83 + 1) = contexta;
              v63 = v81;
              v67 = 0LL;
              v66 = 0LL;
            }

            else
            {
              v270 = v69;
              v101 = *__error();
              _sa_logt();
              v102 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v102, OS_LOG_TYPE_FAULT))
              {
                LODWORD(buf.isa) = 67109120;
                HIDWORD(buf.isa) = v81;
                _os_log_fault_impl( &dword_186C92000,  v102,  OS_LOG_TYPE_FAULT,  "unable to realloc %u port label infos",  (uint8_t *)&buf,  8u);
              }

              v103 = __error();
              v68 = 0;
              v67 = 0LL;
              v66 = 0LL;
              v65 = 0LL;
              v64 = 0;
              v63 = 0;
              __ptrb = 0LL;
              *v103 = v101;
              v69 = v270;
            }
          }

          else
          {
            v94 = v67;
            v299 = v63;
            v268 = v69;
            v95 = *__error();
            _sa_logt();
            v96 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
            {
              LODWORD(buf.isa) = 67109378;
              HIDWORD(buf.isa) = v271 != 0LL;
              LOWORD(buf.superclass) = 2080;
              *(__objc2_class **)((char *)&buf.superclass + 2) = v94;
              _os_log_error_impl( &dword_186C92000,  v96,  OS_LOG_TYPE_ERROR,  "Port label without both info (%d) and name (%s)",  (uint8_t *)&buf,  0x12u);
            }

            v97 = __error();
            v68 = 0;
            v67 = 0LL;
            v66 = 0LL;
            v65 = 0LL;
            v64 = 0;
            *v97 = v95;
            v69 = v268;
            v63 = v299;
          }
        }

        else
        {
          v68 = 0;
        }
      }

LABEL_183:
      v71 = (int *)((char *)v70 + v71[1]);
      v70 = v71 + 4;
    }

    if (v74 > 2309)
    {
      if (v74 == 2312)
      {
        if ((_DWORD)v72 == 32 && (v71[2] & 0x8F) == 0)
        {
          v79 = 24;
          goto LABEL_179;
        }
      }

      else if (v74 == 2310 && (_DWORD)v72 == 112 && (v71[2] & 0x8F) == 0)
      {
        v79 = 104;
        goto LABEL_179;
      }
    }

    else
    {
      v84 = v74 == 17 || v74 == 19;
      v79 = v71[1];
      if (v84) {
        goto LABEL_179;
      }
    }

    v90 = v71[2] & 0xF;
    v77 = v72 >= v90;
    v79 = v72 - v90;
    if (!v77) {
      v79 = 0;
    }
LABEL_179:
    v75 = (__objc2_class *)(v71 + 4);
    if (v68) {
      goto LABEL_180;
    }
    goto LABEL_137;
  }

  v262 = 0LL;
  __ptrb = 0LL;
  v265 = 0LL;
  v62 = 0LL;
  buf.isa = (__objc2_class *)v35;
  buf.superclass = v19;
LABEL_212:
  v274 = (void *)[v62 copy];
LABEL_213:

  if (qword_18C4B1360 != -1) {
    dispatch_once(&qword_18C4B1360, &__block_literal_global_1446);
  }
  if (byte_18C4B1301 == 1)
  {
    v110 = *__error();
    fwrite("\n\nNEXT STACKSHOT\n\n", 0x12uLL, 1uLL, (FILE *)*MEMORY[0x1895F89E0]);
    *__error() = v110;
  }

  v111 = v289;
  if (v20 > (int *)v19)
  {
    v281 = 0LL;
    v301 = 0;
    goto LABEL_219;
  }

  v301 = 0;
  v261 = 0LL;
  v281 = 0LL;
  v127 = *MEMORY[0x189604DA8];
  while (2)
  {
    contextd = (void *)MEMORY[0x186E47ACC]();
    if ((v301 & 1) != 0)
    {
      v301 = 1;
      goto LABEL_504;
    }

    KCLogIter((unsigned int *)v35, (unint64_t)v19, 0);
    v128 = *v35;
    v129 = *v35 & 0xFFFFFFF0;
    if (v129 == 32) {
      v130 = 17;
    }
    else {
      v130 = *v35;
    }
    if ((v130 - 1) > 5)
    {
      v136 = v289;
      v137 = v303;
      v138 = (os_log_s *)__ptrb;
      if (v130 <= 2309)
      {
        if (v130 == 17 || v130 == 19)
        {
          v132 = v35[1];
          v135 = v132;
LABEL_269:
          v131 = v35 + 4;
          goto LABEL_270;
        }

        goto LABEL_266;
      }

      if (v130 == 2310)
      {
        v132 = v35[1];
        if (v132 == 112 && (v35[2] & 0x8F) == 0)
        {
          v135 = 104;
          goto LABEL_269;
        }
      }

      else
      {
        if (v130 != 2312)
        {
LABEL_266:
          v132 = v35[1];
          goto LABEL_267;
        }

        v132 = v35[1];
        if (v132 == 32 && (v35[2] & 0x8F) == 0)
        {
          v135 = 24;
          goto LABEL_269;
        }
      }

LABEL_502:
        v301 = 0;
        goto LABEL_503;
      }

      if (v130 <= 2374)
      {
        if (v130 != 2332)
        {
          if (v130 == 2338)
          {
            v301 = 0;
            *(_DWORD *)(a1 + 200) = *(_DWORD *)v131;
          }

          goto LABEL_503;
        }

        if (!uuid_is_null((const unsigned __int8 *)v131 + 8))
        {
          v322 = 0u;
          v323 = 0u;
          v320 = 0u;
          v321 = 0u;
          v201 = *(id *)(a1 + 104);
          v202 = [v201 countByEnumeratingWithState:&v320 objects:v333 count:16];
          if (v202)
          {
            v203 = *(void *)v321;
LABEL_441:
            v204 = 0LL;
            while (1)
            {
              if (*(void *)v321 != v203) {
                objc_enumerationMutation(v201);
              }
              v205 = *(void **)(*((void *)&v320 + 1) + 8 * v204);
              if ([v205 matchesUUID:v131 + 1 loadAddress:*v131]) {
                break;
              }
              if (v202 == ++v204)
              {
                v202 = [v201 countByEnumeratingWithState:&v320 objects:v333 count:16];
                if (v202) {
                  goto LABEL_441;
                }
                goto LABEL_447;
              }
            }

            v218 = v205;

            if (v218) {
              goto LABEL_472;
            }
          }

          else
          {
LABEL_447:
          }

          uuidForBytes((uint64_t)(v131 + 1));
          v219 = (void *)objc_claimAutoreleasedReturnValue();
          +[SAKernelCache kernelCacheWithUUID:loadAddress:]( &OBJC_CLASS___SAKernelCache,  "kernelCacheWithUUID:loadAddress:",  v219,  *v131);
          v218 = (id)objc_claimAutoreleasedReturnValue();

          [*(id *)(a1 + 104) addObject:v218];
LABEL_472:

          goto LABEL_502;
        }

        v177 = *__error();
        _sa_logt();
        v178 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v178, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf.isa) = 0;
          _os_log_error_impl( &dword_186C92000,  v178,  OS_LOG_TYPE_ERROR,  "Kernel cache UUID is all zeros",  (uint8_t *)&buf,  2u);
        }

LABEL_435:
        v301 = 0;
        *__error() = v177;
        goto LABEL_503;
      }

      if (v130 == 2375)
      {
        if (!*(void *)(a1 + 480))
        {
          v199 = SANSStringForCString(v131);
          v200 = *(void **)(a1 + 480);
          *(void *)(a1 + 480) = v199;
        }

        goto LABEL_502;
      }

      if (v130 != 1503811591) {
        goto LABEL_503;
      }
      v260 = (void *)[objc_alloc(MEMORY[0x189603FC8]) initWithCapacity:1000];
      v145 = v35 + 4;
      if (v35 + 4 > (int *)v19)
      {
LABEL_431:
        v164 = 0LL;
        goto LABEL_432;
      }

      v302 = 0LL;
      v146 = 0LL;
      v259 = 0LL;
      v147 = 0;
      v148 = 0LL;
LABEL_310:
      v149 = v35[1];
      if ((char *)v145 + v149 > (char *)v19 || (v150 = *v35, *v35 == -242132755))
      {
LABEL_382:
        if (!v302) {
          goto LABEL_431;
        }
        v174 = (void *)objc_msgSend(objc_alloc(MEMORY[0x189603FC8]), "initWithCapacity:", objc_msgSend(v302, "count"));
        buf.isa = (__objc2_class *)MEMORY[0x1895F87A8];
        buf.superclass = (__objc2_class *)3221225472LL;
        buf.cache = __SAKCDataReadAheadJetsamCoalitionInfo_block_invoke_2;
        buf.vtable = &unk_189F61EB0;
        buf.info = (__objc2_class_ro *)v260;
        v175 = v174;
        v336 = v175;
        [v302 enumerateKeysAndObjectsUsingBlock:&buf];
        v176 = v336;
        v164 = v175;

LABEL_384:
LABEL_432:

        v301 = 0;
        v281 = v164;
LABEL_503:
        uint64_t v35 = v328;
        uint64_t v19 = (__objc2_class *)v329;
LABEL_504:
        objc_autoreleasePoolPop(contextd);
        v224 = (char *)v35 + v35[1];
        uint64_t v35 = (int *)(v224 + 16);
        v328 = (int *)(v224 + 16);
        v329 = (unint64_t)v19;
        uint64_t v20 = (int *)(v224 + 32);
        v111 = v289;
        if (v224 + 32 > (char *)v19)
        {
LABEL_219:
          v112 = 1;
          goto LABEL_220;
        }

        continue;
      }

      if ((v150 & 0xFFFFFFF0) == 0x20) {
        v151 = 17;
      }
      else {
        v151 = *v35;
      }
      else {
        v152 = v35 + 12;
      }
      if (v147)
      {
        v147 = v151 != 20 || v148 != *((void *)v35 + 1);
        goto LABEL_381;
      }

      v147 = 0;
      if (v151 > 19)
      {
        if (v151 == 20)
        {
          v147 = 0;
          v158 = *((void *)v35 + 1);
          v159 = v259;
          v84 = v158 == v259;
          v160 = v158 != v259;
          if (v84) {
            v159 = 0LL;
          }
          v259 = v159;
          v146 = v160 & v146;
        }

        else
        {
          if (v151 == 2309)
          {
            v153 = v148;
            v154 = v146;
            [MEMORY[0x189607968] numberWithInt:*((unsigned int *)v152 + 21)];
            v161 = (void *)objc_claimAutoreleasedReturnValue();
            [MEMORY[0x189607968] numberWithUnsignedLongLong:*v152];
            v162 = (void *)objc_claimAutoreleasedReturnValue();
            [v260 setObject:v161 forKeyedSubscript:v162];
          }

          else
          {
            if (v151 != 2352) {
              goto LABEL_381;
            }
            v153 = v148;
            v154 = v146;
            [MEMORY[0x189607968] numberWithInt:*((unsigned int *)v152 + 6)];
            v155 = (void *)objc_claimAutoreleasedReturnValue();
            [MEMORY[0x189607968] numberWithUnsignedLongLong:*v152];
            v156 = (void *)objc_claimAutoreleasedReturnValue();
            [v260 setObject:v155 forKeyedSubscript:v156];
          }

          v147 = 0;
          v146 = v154;
          v148 = v153;
        }

LABEL_381:
        uint64_t v35 = (int *)((char *)v145 + v35[1]);
        v145 = v35 + 4;
        goto LABEL_310;
      }

      if (v151 != 17)
      {
        if (v151 == 19)
        {
          v157 = v35[4];
          if ((v157 == 2353 || v157 == 2307) && (v146 & 1) == 0)
          {
            v147 = 0;
            v146 = 1LL;
            v259 = *((void *)v35 + 1);
          }

          else
          {
            if ((v146 & 1) != 0) {
              v148 = *((void *)v35 + 1);
            }
            v147 = v146;
          }
        }

        goto LABEL_381;
      }

      if (v150 != 17 && (v150 & 0xFFFFFFF0) != 0x20) {
        goto LABEL_490;
      }
      v163 = *((void *)v35 + 1);
      if ((_DWORD)v163)
      {
        if (v150 == 17)
        {
          v164 = 0LL;
          v165 = HIDWORD(v163);
          if (SHIDWORD(v163) <= 2310)
          {
            switch(HIDWORD(v163))
            {
              case 0x30:
                v166 = 20;
                break;
              case 0x31:
                v166 = 24;
                break;
              case 0x81A:
LABEL_368:
                v166 = 8;
                break;
              default:
                goto LABEL_384;
            }
          }

          else
          {
            switch(HIDWORD(v163))
            {
              case 0x907:
                v166 = 4;
                break;
              case 0x908:
              case 0x909:
                goto LABEL_384;
              case 0x90A:
              case 0x90C:
                goto LABEL_368;
              case 0x90B:
              case 0x90D:
                v166 = 16;
                break;
              default:
                if (HIDWORD(v163) != 2369) {
                  goto LABEL_384;
                }
                v166 = 48;
                break;
            }
          }

          if (v149 / v166 < v163 || v149 % v163 > 0xF)
          {
LABEL_490:
            v164 = 0LL;
            goto LABEL_384;
          }

LABEL_376:
          if ((v165 - 2311) <= 0x3A && ((1LL << (v165 - 7)) & 0x400000000000079LL) != 0
            || (v165 - 48) < 2
            || (v167 = 0, (_DWORD)v165 == 2074))
          {
LABEL_380:
            v147 = 0;
            goto LABEL_381;
          }
        }

        else
        {
          v168 = v149 - (*v35 & 0xF);
          v167 = v168 / v163;
          v165 = HIDWORD(v163);
        }
      }

      else
      {
        if ((_DWORD)v149) {
          goto LABEL_490;
        }
        v165 = HIDWORD(v163);
        if (v150 == 17) {
          goto LABEL_376;
        }
        v167 = 0;
      }

      if ((_DWORD)v165 == 2336)
      {
        if (!v302)
        {
          v169 = v148;
          v170 = v146;
          v302 = (void *)[objc_alloc(MEMORY[0x189603FC8]) initWithCapacity:*((void *)v35 + 1)];
          v146 = v170;
          v148 = v169;
        }

        if ((_DWORD)v163)
        {
          v257 = v148;
          v258 = v146;
          v171 = 0;
          v163 = v163;
          do
          {
            v330[0] = MEMORY[0x1895F87A8];
            v330[1] = 3221225472LL;
            v330[2] = __SAKCDataReadAheadJetsamCoalitionInfo_block_invoke;
            v330[3] = &unk_189F61E88;
            v172 = v302;
            v330[4] = v172;
            __SAKCDataReadAheadJetsamCoalitionInfo_block_invoke((uint64_t)v330, v173, (void *)((char *)v152 + v171));

            v171 += v167;
            --v163;
          }

          while (v163);
          v147 = 0;
          v302 = v172;
          v146 = v258;
          v148 = v257;
          goto LABEL_381;
        }
      }

      goto LABEL_380;
    }

    break;
  }

  if (v130 > 49)
  {
    switch(v130)
    {
      case '2':
        v186 = *((_DWORD *)v131 + 1);
        if (!v186 || !*(_DWORD *)v131)
        {
          v177 = *__error();
          _sa_logt();
          v178 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v178, OS_LOG_TYPE_DEBUG))
          {
            v222 = *(_DWORD *)v131;
            v223 = *((_DWORD *)v131 + 1);
            LODWORD(buf.isa) = 67109376;
            HIDWORD(buf.isa) = v222;
            LOWORD(buf.superclass) = 1024;
            *(_DWORD *)((char *)&buf.superclass + 2) = v223;
            _os_log_debug_impl(&dword_186C92000, v178, OS_LOG_TYPE_DEBUG, "Bad timebase: %d/%d", (uint8_t *)&buf, 0xEu);
          }

          goto LABEL_435;
        }

        v187 = *(_DWORD *)(a1 + 188);
        if (v187 && v186 != v187 || (v188 = *(_DWORD *)(a1 + 184)) != 0 && *(_DWORD *)v131 != v188)
        {
          v189 = *__error();
          _sa_logt();
          v190 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v190, OS_LOG_TYPE_DEFAULT))
          {
            v191 = *(_DWORD *)(a1 + 188);
            v192 = *(_DWORD *)v131;
            v193 = *((_DWORD *)v131 + 1);
            buf.isa = (__objc2_class *)__PAIR64__(*(_DWORD *)(a1 + 184), 67109888);
            LOWORD(buf.superclass) = 1024;
            *(_DWORD *)((char *)&buf.superclass + 2) = v191;
            HIWORD(buf.superclass) = 1024;
            LODWORD(buf.cache) = v192;
            WORD2(buf.cache) = 1024;
            *(_DWORD *)((char *)&buf.cache + 6) = v193;
            _os_log_impl( &dword_186C92000,  v190,  OS_LOG_TYPE_DEFAULT,  "WARNING: Changing mach timebase! %u/%u -> %u/%u",  (uint8_t *)&buf,  0x1Au);
          }

          *__error() = v189;
        }

        *(void *)(a1 + 184) = *v131;
        if (!v261)
        {
          v301 = 0;
          v261 = 0LL;
          goto LABEL_503;
        }

        v194 = v307;
        if (v307) {
          v307->superclass = (__objc2_class *)v261;
        }
        break;
      case '3':
        v194 = v307;
        v261 = *v131;
        if (!*(_DWORD *)(a1 + 188) || !*(_DWORD *)(a1 + 184)) {
          goto LABEL_502;
        }
        if (v307) {
          v307->superclass = (__objc2_class *)*v131;
        }
        break;
      case '5':
        if (v307)
        {
          v301 = 0;
          *(double *)&v307[1].isa = (double)(unint64_t)*v131 / 1000000.0 - v127;
          goto LABEL_503;
        }

        goto LABEL_502;
      default:
        goto LABEL_503;
    }

    v195 = -[__objc2_class machAbsTime](v194, "machAbsTime");
    v196 = 0LL;
    v197 = *(void *)(a1 + 184);
    if ((_DWORD)v197)
    {
      v198 = v307;
      if (HIDWORD(v197))
      {
        v196 = v195;
        if ((_DWORD)v197 != HIDWORD(v197)) {
          v196 = __udivti3();
        }
      }
    }

    else
    {
      v198 = v307;
    }

    if (v198)
    {
      v301 = 0;
      *(double *)&v198->cache = (double)(unint64_t)v196 / 1000000000.0;
      goto LABEL_503;
    }

    goto LABEL_502;
  }

  if (v130 == -568875622)
  {
    if ([*(id *)(a1 + 24) count])
    {
      v301 = 0;
      *(void *)(a1 + 360) = 4LL;
    }

    else
    {
      v206 = *__error();
      _sa_logt();
      v207 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v207, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(buf.isa) = 0;
        _os_log_debug_impl( &dword_186C92000,  v207,  OS_LOG_TYPE_DEBUG,  "Delta before full, ignoring",  (uint8_t *)&buf,  2u);
      }

      *__error() = v206;
      v301 = 1;
    }

    goto LABEL_503;
  }

  if (v130 == 17)
  {
    v179 = *((void *)v35 + 1);
    if ((_DWORD)v179)
    {
      if (v128 == 17)
      {
        v180 = HIDWORD(v179);
        if (SHIDWORD(v179) <= 2310)
        {
          switch(HIDWORD(v179))
          {
            case 0x30:
              v181 = 20;
              break;
            case 0x31:
              v181 = 24;
              break;
            case 0x81A:
LABEL_486:
              v181 = 8;
              break;
            default:
              goto LABEL_534;
          }
        }

        else
        {
          switch(HIDWORD(v179))
          {
            case 0x907:
              v181 = 4;
              break;
            case 0x908:
            case 0x909:
              goto LABEL_534;
            case 0x90A:
            case 0x90C:
              goto LABEL_486;
            case 0x90B:
            case 0x90D:
              v181 = 16;
              break;
            default:
              if (HIDWORD(v179) != 2369) {
                goto LABEL_534;
              }
              v181 = 48;
              break;
          }
        }

LABEL_534:
        v237 = *__error();
        _sa_logt();
        v238 = (void *)objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled((os_log_t)v238, OS_LOG_TYPE_ERROR))
        {
LABEL_537:

          *__error() = v237;
          goto LABEL_538;
        }

        LODWORD(buf.isa) = 134218240;
        *(__objc2_class **)((char *)&buf.isa + 4) = v295;
        WORD2(buf.superclass) = 2048;
        *(__objc2_class **)((char *)&buf.superclass + 6) = (__objc2_class *)((char *)v35 - (char *)v276);
        v239 = "Error parsing kcdata buffer at byte %ld of %lu: array is invalid";
LABEL_540:
        _os_log_error_impl(&dword_186C92000, (os_log_t)v238, OS_LOG_TYPE_ERROR, v239, (uint8_t *)&buf, 0x16u);
        goto LABEL_537;
      }

      v209 = *v35 & 0xF;
      v77 = v132 >= v209;
      v210 = v132 - v209;
      if (!v77) {
        goto LABEL_534;
      }
      v208 = v210 / v179;
      v180 = HIDWORD(v179);
    }

    else
    {
      if (v132) {
        goto LABEL_534;
      }
      v180 = HIDWORD(v179);
      if (v128 == 17)
      {
LABEL_498:
        v208 = 0;
        if ((_DWORD)v180 == 2074) {
          goto LABEL_502;
        }
        goto LABEL_459;
      }

      v208 = 0;
    }

LABEL_459:
    v301 = 0;
    if ((_DWORD)v180 != 2328 || (v136 & 1) != 0) {
      goto LABEL_503;
    }
    if (*(void *)(a1 + 360) == 1LL)
    {
      v240 = *__error();
      _sa_logt();
      v241 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v241, OS_LOG_TYPE_ERROR))
      {
        v242 = *(__objc2_class **)(v304 + 360);
        LODWORD(buf.isa) = 67109376;
        HIDWORD(buf.isa) = v179;
        LOWORD(buf.superclass) = 2048;
        *(__objc2_class **)((char *)&buf.superclass + 2) = v242;
        _os_log_error_impl( &dword_186C92000,  v241,  OS_LOG_TYPE_ERROR,  "%d nonrunnable tasks, but _dataStyle %llu",  (uint8_t *)&buf,  0x12u);
      }

      *__error() = v240;
      _SASetCrashLogMessage(3923, "%d nonrunnable tasks, but _dataStyle %llu", v243, v244, v245, v246, v247, v248, v179);
      _os_crash();
      __break(1u);
    }

    else if ((v137 & 1) == 0)
    {
      if ((_DWORD)v179)
      {
        v211 = 0;
        v212 = *((void *)v35 + 1);
        do
        {
          v319[0] = MEMORY[0x1895F87A8];
          v319[1] = 3221225472LL;
          v319[2] = __116__SASampleStore__addKCDataStackshot_timestamp_sampleIndex_shouldSkipSampleOut_primaryDataIsKPerf_addStaticInfoOnly___block_invoke;
          v319[3] = &unk_189F616A0;
          v319[4] = a1;
          v213 = v307;
          v319[5] = v213;
          v319[7] = v264;
          v214 = v282;
          v319[6] = v214;
          __116__SASampleStore__addKCDataStackshot_timestamp_sampleIndex_shouldSkipSampleOut_primaryDataIsKPerf_addStaticInfoOnly___block_invoke( (uint64_t)v319,  v215,  (void *)((char *)v131 + v211));

          v211 += v208;
          --v212;
        }

        while (v212);
      }

      goto LABEL_502;
    }

    v249 = *__error();
    _sa_logt();
    v250 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v250, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.isa) = 67109120;
      HIDWORD(buf.isa) = v179;
      _os_log_error_impl( &dword_186C92000,  v250,  OS_LOG_TYPE_ERROR,  "%d nonrunnable tasks when parsing stackshot in kperf",  (uint8_t *)&buf,  8u);
    }

    *__error() = v249;
    _SASetCrashLogMessage( 3924,  "%d nonrunnable tasks when parsing stackshot in kperf",  v251,  v252,  v253,  v254,  v255,  v256,  v179);
    uint64_t result = _os_crash();
    __break(1u);
    return result;
  }

  if (v130 != 19) {
    goto LABEL_503;
  }
  if (v35 + 4 > (int *)v19 || (char *)v35 + v132 + 16 > (char *)v19 || v129 == 32 || v128 != 19 || v132 <= 3)
  {
    v237 = *__error();
    _sa_logt();
    v238 = (void *)objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled((os_log_t)v238, OS_LOG_TYPE_ERROR)) {
      goto LABEL_537;
    }
    LODWORD(buf.isa) = 134218240;
    *(__objc2_class **)((char *)&buf.isa + 4) = v295;
    WORD2(buf.superclass) = 2048;
    *(__objc2_class **)((char *)&buf.superclass + 6) = (__objc2_class *)((char *)v35 - (char *)v276);
    v239 = "Error parsing kcdata buffer at byte %ld of %lu: container is invalid";
    goto LABEL_540;
  }

  v140 = v35[4];
  if (v140 <= 2355)
  {
    if (v140 != 2307 && v140 != 2353) {
      goto LABEL_479;
    }
    v141 = -[SASampleStore _parseKCDataTaskContainer:timestampOfSample:sampleIndex:sharedCaches:frameIterator:primaryDataIsKPerf:addStaticInfoOnly:taskUniquePidsInThisSample:taskPidsInThisSample:importanceDonations:rPidForJetsamCoalitionId:port_label_info_array:exclaveInfo:]( (void *)a1,  (unsigned int **)&v328,  v307,  v264,  v28,  v285,  v137,  v136,  v282,  v275,  v277,  v281,  v262,  v138,  v274);
  }

  else
  {
    switch(v140)
    {
      case 2356:
LABEL_289:
        v141 = SkipToContainerEnd(&v328, 0);
        break;
      case 2370:
        v141 = -[SASampleStore _parseKCDataSharedCacheContainer:sharedCaches:](a1, (unsigned int **)&v328, v28);
        break;
      case 2377:
        goto LABEL_289;
      default:
LABEL_479:
        v141 = SkipToContainerEnd(&v328, 1);
        break;
    }
  }

  if (!v141) {
    goto LABEL_502;
  }
LABEL_538:
  objc_autoreleasePoolPop(contextd);
  v301 = 0;
  v112 = 0;
  v111 = v289;
LABEL_220:
  if (v265) {
    free(__ptrb);
  }
  if (!v112) {
    goto LABEL_510;
  }
  if ((unint64_t)(v328 + 4) > v329
    || (unint64_t)v328 + v328[1] + 16 > v329
    || *v328 != -242132755)
  {
    v225 = *__error();
    _sa_logt();
    v226 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v226, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.isa) = 134217984;
      *(__objc2_class **)((char *)&buf.isa + 4) = v295;
      _os_log_error_impl( &dword_186C92000,  v226,  OS_LOG_TYPE_ERROR,  "Overran kcdata buffer (length %lu)",  (uint8_t *)&buf,  0xCu);
    }

    *__error() = v225;
LABEL_510:

LABEL_16:
    uint64_t v25 = 0LL;
    if (a5) {
      *a5 = 1;
    }
    goto LABEL_18;
  }

  if (!v303)
  {
    if ((~*(_DWORD *)(v304 + 408) & 0x582LL) == 0) {
      -[SASampleStore resampleTruncatedBacktraces](v304);
    }
    v227 = objc_alloc(MEMORY[0x189603FE0]);
    [*(id *)(v304 + 8) allKeys];
    v228 = (void *)objc_claimAutoreleasedReturnValue();
    v229 = (void *)[v227 initWithArray:v228];

    [v229 minusSet:v282];
    v310 = 0u;
    v311 = 0u;
    v308 = 0u;
    v309 = 0u;
    v116 = v229;
    v230 = [v116 countByEnumeratingWithState:&v308 objects:v331 count:16];
    if (!v230)
    {
LABEL_528:

      goto LABEL_529;
    }

    v231 = *(void *)v309;
LABEL_517:
    v232 = 0LL;
    while (1)
    {
      if (*(void *)v309 != v231) {
        objc_enumerationMutation(v116);
      }
      v233 = -[SASampleStore lastTaskWithUniquePid:]( (void *)v304,  [*(id *)(*((void *)&v308 + 1) + 8 * v232) unsignedLongLongValue]);
      [v233 exitTimestamp];
      v234 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v234)
      {
        v235 = *(void *)(v304 + 360);
        if (!v235) {
          goto LABEL_522;
        }
        if (v235 != 1)
        {
          -[SASampleStore task:exitedAtTimestamp:](v304, v233, v307);
          goto LABEL_522;
        }
      }

LABEL_522:
      if (v230 == ++v232)
      {
        v236 = [v116 countByEnumeratingWithState:&v308 objects:v331 count:16];
        v230 = v236;
        if (!v236) {
          goto LABEL_528;
        }
        goto LABEL_517;
      }
    }
  }

  if ((v111 & 1) == 0 && *(void *)(v304 + 360) == 3LL)
  {
    v317[0] = MEMORY[0x1895F87A8];
    v317[1] = 3221225472LL;
    v317[2] = __116__SASampleStore__addKCDataStackshot_timestamp_sampleIndex_shouldSkipSampleOut_primaryDataIsKPerf_addStaticInfoOnly___block_invoke_228;
    v317[3] = &__block_descriptor_40_e20_v24__0__SATask_8_B16l;
    v317[4] = v264;
    [(id)v304 enumerateTasks:v317];
    v113 = objc_alloc(MEMORY[0x189603FE0]);
    [*(id *)(v304 + 16) allKeys];
    v114 = (void *)objc_claimAutoreleasedReturnValue();
    v115 = (void *)[v113 initWithArray:v114];

    [v115 minusSet:v275];
    v315 = 0u;
    v316 = 0u;
    v313 = 0u;
    v314 = 0u;
    v116 = v115;
    v117 = [v116 countByEnumeratingWithState:&v313 objects:v332 count:16];
    if (v117)
    {
      v118 = *(void *)v314;
      do
      {
        for (j = 0LL; j != v117; ++j)
        {
          if (*(void *)v314 != v118) {
            objc_enumerationMutation(v116);
          }
          v120 = -[SASampleStore lastTaskWithPid:]( (void *)v304,  [*(id *)(*((void *)&v313 + 1) + 8 * j) intValue]);
          [v120 exitTimestamp];
          v121 = (void *)objc_claimAutoreleasedReturnValue();
          v122 = v121 == 0LL;

          if (v122)
          {
            buf.isa = 0LL;
            buf.superclass = &buf;
            buf.cache = (void *)0x3032000000LL;
            buf.vtable = __Block_byref_object_copy__0;
            buf.info = (__objc2_class_ro *)__Block_byref_object_dispose__0;
            [v120 taskStates];
            v123 = (void *)objc_claimAutoreleasedReturnValue();
            [v123 lastObject];
            v124 = (void *)objc_claimAutoreleasedReturnValue();
            [v124 endTimestamp];
            v336 = (id)objc_claimAutoreleasedReturnValue();

            [v120 threads];
            v125 = (void *)objc_claimAutoreleasedReturnValue();
            v312[0] = MEMORY[0x1895F87A8];
            v312[1] = 3221225472LL;
            v312[2] = __116__SASampleStore__addKCDataStackshot_timestamp_sampleIndex_shouldSkipSampleOut_primaryDataIsKPerf_addStaticInfoOnly___block_invoke_3;
            v312[3] = &unk_189F61FB0;
            v312[4] = &buf;
            [v125 enumerateKeysAndObjectsUsingBlock:v312];

            if (buf.superclass[1].isa) {
              v126 = buf.superclass[1].isa;
            }
            else {
              v126 = v307;
            }
            -[SASampleStore task:exitedAtTimestamp:](v304, v120, v126);
            _Block_object_dispose(&buf, 8);
          }
        }

        v117 = [v116 countByEnumeratingWithState:&v313 objects:v332 count:16];
      }

      while (v117);
    }

    goto LABEL_528;
  }

LABEL_529:
  if (a5) {
    *a5 = v301 & 1;
  }
  if ((v301 & 1) == 0) {
    objc_storeStrong((id *)(v304 + 376), obj);
  }
  uint64_t v25 = (char *)((char *)v328 - (char *)v276 + v328[1] + 16);
LABEL_18:
  uint64_t v13 = v307;
LABEL_19:

  return (uint64_t)v25;
}

void sub_186CAB2A0(_Unwind_Exception *a1)
{
}

void KCLogIter(unsigned int *a1, unint64_t a2, int a3)
{
  if (qword_18C4B1360 != -1) {
    dispatch_once(&qword_18C4B1360, &__block_literal_global_1446);
  }
  if (byte_18C4B1301 == 1)
  {
    if ((*a1 & 0xFFFFFFF0) == 0x20) {
      uint64_t v6 = 17LL;
    }
    else {
      uint64_t v6 = *a1;
    }
    if ((v6 - 1) <= 5)
    {
      double v7 = (const char *)(a1 + 4);
      uint64_t v8 = (uint64_t)(a1 + 12);
      unsigned int v9 = a1[1];
      unsigned int v10 = a1[2] & 0xF;
      BOOL v11 = v9 >= v10;
      unsigned int v12 = v9 - v10;
      if (!v11) {
        unsigned int v12 = 0;
      }
      unsigned int v13 = v12 - 32;
LABEL_31:
      if ((_DWORD)v6 != 17)
      {
        if ((_DWORD)v6 != 19)
        {
          if ((_DWORD)v6 == 20)
          {
            int v17 = dword_18C4B1304 - 2;
            if (dword_18C4B1304 < 2)
            {
              int v18 = *__error();
              _sa_logt();
              uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)buf = 0;
                _os_log_error_impl( &dword_186C92000,  v19,  OS_LOG_TYPE_ERROR,  "Invalid kcdata: end container at indent 0",  buf,  2u);
              }

              uint64_t v20 = __error();
              int v17 = 0;
              *uint64_t v20 = v18;
            }

            dword_18C4B1304 = v17;
            uint64_t v21 = *((void *)a1 + 1);
            int v22 = *__error();
            uint64_t v23 = " -- skipping";
            if (!a3) {
              uint64_t v23 = "";
            }
            fprintf((FILE *)*MEMORY[0x1895F89E0], "%*s%s: id %llu%s\n", dword_18C4B1304, "", v7, v21, v23);
            *__error() = v22;
          }

          else
          {
            KCLogItem(v6, v13, v8, v7, dword_18C4B1304, a3);
          }

          return;
        }

        if ((unint64_t)(a1 + 4) <= a2)
        {
          uint64_t v27 = a1[1];
          if ((unint64_t)a1 + v27 + 16 <= a2 && v27 >= 4 && *a1 == 19)
          {
            uint64_t v28 = *((void *)a1 + 1);
            uint64_t v29 = a1[4];
            int v30 = *__error();
            uint64_t v31 = (FILE *)*MEMORY[0x1895F89E0];
            int v32 = dword_18C4B1304;
            uint64_t v33 = DescriptionForKCDataType(v29);
            uint64_t v34 = " -- skipping";
            if (!a3) {
              uint64_t v34 = "";
            }
            fprintf(v31, "%*s%s: id %llu, type %s%s\n", v32, "", v7, v28, v33, v34);
            *__error() = v30;
            dword_18C4B1304 += 2;
            return;
          }
        }

        int v26 = *__error();
        fprintf((FILE *)*MEMORY[0x1895F89E0], "%*s%s: (invalid container)%s\n");
LABEL_49:
        *__error() = v26;
        return;
      }

      if ((unint64_t)(a1 + 4) > a2
        || (uint64_t v24 = a1[1], (unint64_t)a1 + v24 + 16 > a2)
        || (int v25 = *a1, *a1 != 17) && (v25 & 0xFFFFFFF0) != 0x20)
      {
LABEL_45:
        int v26 = *__error();
        fprintf((FILE *)*MEMORY[0x1895F89E0], "%*s%s: (invalid array)%s\n");
        goto LABEL_49;
      }

      unint64_t v35 = *((void *)a1 + 1);
      if ((_DWORD)v35)
      {
        if (v25 != 17)
        {
          unsigned int v39 = *a1 & 0xF;
          BOOL v11 = v24 >= v39;
          unsigned int v40 = v24 - v39;
          if (!v11) {
            goto LABEL_45;
          }
          unsigned int v38 = v40 / v35;
          uint64_t v36 = HIDWORD(v35);
          goto LABEL_95;
        }

        uint64_t v36 = HIDWORD(v35);
        if (SHIDWORD(v35) <= 2310)
        {
          switch(HIDWORD(v35))
          {
            case 0x30:
              unsigned int v37 = 20;
              break;
            case 0x31:
              unsigned int v37 = 24;
              break;
            case 0x81A:
LABEL_75:
              unsigned int v37 = 8;
              break;
            default:
              goto LABEL_45;
          }
        }

        else
        {
          switch(HIDWORD(v35))
          {
            case 0x907:
              unsigned int v37 = 4;
              break;
            case 0x908:
            case 0x909:
              goto LABEL_45;
            case 0x90A:
            case 0x90C:
              goto LABEL_75;
            case 0x90B:
            case 0x90D:
              unsigned int v37 = 16;
              break;
            default:
              if (HIDWORD(v35) != 2369) {
                goto LABEL_45;
              }
              unsigned int v37 = 48;
              break;
          }
        }
      }

      else
      {
        if ((_DWORD)v24) {
          goto LABEL_45;
        }
        uint64_t v36 = HIDWORD(v35);
        if (v25 != 17) {
          goto LABEL_66;
        }
      }

      if ((int)v36 > 2310)
      {
        switch((int)v36)
        {
          case 2311:
            unsigned int v38 = 4;
            break;
          case 2312:
          case 2313:
            goto LABEL_66;
          case 2314:
          case 2316:
            goto LABEL_89;
          case 2315:
          case 2317:
            unsigned int v38 = 16;
            break;
          default:
            if ((_DWORD)v36 != 2369) {
              goto LABEL_66;
            }
            unsigned int v38 = 48;
            break;
        }

        goto LABEL_95;
      }

      switch((_DWORD)v36)
      {
        case 0x30:
          unsigned int v38 = 20;
          goto LABEL_95;
        case 0x31:
          unsigned int v38 = 24;
          goto LABEL_95;
        case 0x81A:
LABEL_89:
          unsigned int v38 = 8;
          goto LABEL_95;
      }

LABEL_66:
      unsigned int v38 = 0;
LABEL_95:
      int v41 = *__error();
      v42 = (FILE *)*MEMORY[0x1895F89E0];
      int v43 = dword_18C4B1304;
      uint64_t v44 = DescriptionForKCDataType(v36);
      v45 = " -- skipping";
      if (!a3) {
        v45 = "";
      }
      fprintf(v42, "%*s%s: of type %s, count %u size %u%s\n", v43, "", v7, v44, v35, v38, v45);
      *__error() = v41;
      if ((_DWORD)v35)
      {
        unsigned int v46 = 0;
        uint64_t v47 = v35;
        do
        {
          KCLogItem(v36, v38, v8 + v46, 0LL, (dword_18C4B1304 + 2), a3);
          v46 += v38;
          --v47;
        }

        while (v47);
      }

      return;
    }

    if ((int)v6 > 2309)
    {
      if ((_DWORD)v6 == 2310)
      {
        unsigned int v15 = a1[1];
        if (v15 != 112) {
          goto LABEL_27;
        }
        if ((a1[2] & 0x8F) != 0)
        {
          unsigned int v15 = 112;
          goto LABEL_27;
        }

        unsigned int v13 = 104;
      }

      else
      {
        if ((_DWORD)v6 != 2312)
        {
LABEL_26:
          unsigned int v15 = a1[1];
LABEL_27:
          BOOL v11 = v15 >= (a1[2] & 0xF);
          unsigned int v16 = v15 - (a1[2] & 0xF);
          if (v11) {
            unsigned int v13 = v16;
          }
          else {
            unsigned int v13 = 0;
          }
          goto LABEL_30;
        }

        unsigned int v15 = a1[1];
        if (v15 != 32) {
          goto LABEL_27;
        }
        if ((a1[2] & 0x8F) != 0)
        {
          unsigned int v15 = 32;
          goto LABEL_27;
        }

        unsigned int v13 = 24;
      }
    }

    else
    {
      if ((_DWORD)v6 != 17 && (_DWORD)v6 != 19) {
        goto LABEL_26;
      }
      unsigned int v13 = a1[1];
    }

                                        if ((v1 & 0x200000) != 0) {
                                          goto LABEL_155;
                                        }
                                        goto LABEL_67;
                                      }

    *__error() = v49;
    munmap(v29, v63.st_size);
    return 0LL;
  }

  unsigned int v46 = (void *)v45;
  uint64_t v47 = [objc_alloc(MEMORY[0x189603F48]) initWithBase64EncodedData:v45 options:1];
  if (v47)
  {
    v48 = (void *)v47;
    goto LABEL_73;
  }

  v51 = st_size <= v34;
  v52 = st_size - v34;
  if (!v51)
  {
    v53 = calloc(v52 + 1, 1uLL);
    memmove(v53, &v29[v34], v52);
    v54 = *__error();
    _sa_logt();
    v55 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
    {
      v61 = 136315138;
      *(void *)v62 = v53;
      _os_log_debug_impl( &dword_186C92000,  v55,  OS_LOG_TYPE_DEBUG,  "Possible extra text at end of base-64 encoded data, ignoring last line %s",  (uint8_t *)&v61,  0xCu);
    }

    *__error() = v54;
    free(v53);
    v56 = [objc_alloc(MEMORY[0x189603F48]) initWithBytesNoCopy:&v29[v10] length:v34 - v10 freeWhenDone:0];

    if (v56)
    {
      v48 = (void *)[objc_alloc(MEMORY[0x189603F48]) initWithBase64EncodedData:v56 options:1];
      unsigned int v46 = (void *)v56;
      goto LABEL_73;
    }

    v49 = *__error();
    _sa_logt();
    v50 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v61) = 0;
      goto LABEL_84;
    }

    goto LABEL_66;
  }

  v48 = 0LL;
LABEL_73:

  if (munmap(v29, v63.st_size))
  {
    v57 = *__error();
    _sa_logt();
    v58 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
    {
      v60 = *__error();
      v61 = 67109120;
      *(_DWORD *)v62 = v60;
      _os_log_error_impl( &dword_186C92000,  v58,  OS_LOG_TYPE_ERROR,  "Unable to unmap file: %{errno}d",  (uint8_t *)&v61,  8u);
    }

    *__error() = v57;
  }

  if (!v48)
  {
    unsigned int v15 = *__error();
    _sa_logt();
    unsigned int v16 = (void *)objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled((os_log_t)v16, OS_LOG_TYPE_ERROR)) {
      goto LABEL_12;
    }
    LOWORD(v61) = 0;
    uint64_t v24 = "Unable to decode base64 binary format";
    int v25 = (stat *)&v61;
    int v26 = (os_log_s *)v16;
    uint64_t v27 = 2;
    goto LABEL_26;
  }

  [a1 sampleStoreForBinaryFormat:v48];
  v59 = (void *)objc_claimAutoreleasedReturnValue();

  return v59;
}

LABEL_185:
      v49 = 0;
      goto LABEL_97;
    }

    int v32 = *(uint64_t **)(v19 + 8);
    goto LABEL_96;
  }

  if (v52 != 17 && (v52 & 0xFFFFFFF0) != 0x20) {
    goto LABEL_210;
  }
  v63 = *(void *)(v19 + 8);
  if (!(_DWORD)v63)
  {
    if ((_DWORD)v51) {
      goto LABEL_210;
    }
    v64 = HIDWORD(v63);
    if (v52 == 17) {
      goto LABEL_135;
    }
LABEL_117:
    v66 = 0;
LABEL_138:
    v49 = 0;
    if ((int)v64 <= 2332)
    {
      if ((_DWORD)v64 == 48)
      {
        LODWORD(v450) = v66;
        v455 = v32;
        __s1 = v31;
        v463 = v50;
        goto LABEL_187;
      }

      if ((_DWORD)v64 == 49)
      {
        LODWORD(v450) = v66;
        v455 = v32;
        __s1 = v31;
        v463 = v50;
        goto LABEL_193;
      }

      if ((_DWORD)v64 != 57) {
        goto LABEL_97;
      }
      LODWORD(v450) = v66;
      v443 = v35;
      v455 = v32;
      __s1 = v31;
      v463 = v50;
      v471 = v47;
      v474 = v45;
      v495 = v46;
      if (v22) {
        goto LABEL_652;
      }
      v78 = *(void *)(v19 + 8);
      v79 = *(id **)(v19 + 8);
      v80 = (char *)calloc(v78, 0x38uLL);
      v81 = v79;
      int v22 = v80;
      if ((_DWORD)v81)
      {
        v82 = 0;
        v83 = 0LL;
        unsigned int v46 = v495;
        v45 = v474;
        uint64_t v47 = v471;
        do
        {
          v84 = (__int128 *)(v443 + v82);
          v85 = &v22[v83];
          v86 = *v84;
          v87 = v84[1];
          v88 = v84[2];
          *((void *)v85 + 6) = *((void *)v84 + 6);
          *((_OWORD *)v85 + 1) = v87;
          *((_OWORD *)v85 + 2) = v88;
          *(_OWORD *)v85 = v86;
          v83 += 56LL;
          v82 += v450;
        }

        while (56 * v78 != v83);
        v49 = 0;
        v468 = v81;
        goto LABEL_202;
      }

      v468 = 0LL;
      v49 = 0;
      unsigned int v46 = v495;
    }

    else
    {
      if ((int)v64 > 2349)
      {
        if ((_DWORD)v64 != 2350)
        {
          if ((_DWORD)v64 != 2369) {
            goto LABEL_97;
          }
          goto LABEL_180;
        }

        LODWORD(v450) = v66;
        v455 = v32;
        v459 = v23;
        __s1 = v31;
        v463 = v50;
        v471 = v47;
        v474 = v45;
        v445 = v22;
        v495 = v46;
        if (v490) {
          goto LABEL_655;
        }
        v98 = v35;
        v99 = *(void *)(v19 + 8);
        v100 = *(void *)(v19 + 8);
        v490 = (os_log_s *)calloc(v99, 0x18uLL);
        if (v100)
        {
          v101 = 0;
          v102 = v490;
          do
          {
            v103 = (__int128 *)(v98 + v101);
            v104 = *v103;
            *((void *)v102 + 2) = *((void *)v103 + 2);
            *(_OWORD *)v102 = v104;
            v102 = (os_log_s *)((char *)v102 + 24);
            v101 += v450;
            --v99;
          }

          while (v99);
        }

        v49 = 0;
        LODWORD(v530) = v100;
        goto LABEL_198;
      }

      v471 = v47;
      v474 = v45;
      v445 = v22;
      if ((_DWORD)v64 == 2333)
      {
        v452 = v66;
        v443 = v35;
        v455 = v32;
        __s1 = v31;
        v463 = v50;
        v495 = v46;
        v89 = *(void *)(v19 + 8);
        v90 = *(void *)(v19 + 8);
        v91 = (char *)calloc(v89, 0x1FuLL);
        v92 = v90;
        v492 = v91;
        if (v90)
        {
          v93 = 0;
          v94 = 0LL;
          unsigned int v46 = v495;
          int v22 = v445;
          v45 = v474;
          uint64_t v47 = v471;
          uint64_t v31 = __s1;
          v50 = v463;
          int v32 = v455;
          p_info = (__objc2_class_ro **)(&OBJC_METACLASS___SARecipeState + 32);
          uint64_t v34 = (__objc2_class_ro **)(&OBJC_METACLASS___SARecipeState + 32);
          do
          {
            v95 = (__int128 *)(v443 + v93);
            v96 = &v492[v94];
            v97 = *v95;
            if (v452 < 0x1F)
            {
              *(_OWORD *)(v96 + 9) = *(__int128 *)((char *)v95 + 9);
              *(_OWORD *)v96 = v97;
              *(_WORD *)(v96 + 25) = 0;
              *(_DWORD *)(v96 + 27) = 0;
            }

            else
            {
              *(_OWORD *)(v96 + 15) = *(__int128 *)((char *)v95 + 15);
              *(_OWORD *)v96 = v97;
            }

            v94 += 31LL;
            v93 += v452;
          }

          while (31 * v89 != v94);
          v49 = 0;
          HIDWORD(v470) = v92;
          goto LABEL_97;
        }

        HIDWORD(v470) = 0;
        v49 = 0;
        goto LABEL_199;
      }

      if ((_DWORD)v64 != 2345) {
        goto LABEL_97;
      }
      v451 = v66;
      v443 = v35;
      v455 = v32;
      __s1 = v31;
      v463 = v50;
      v70 = *(void *)(v19 + 8);
      v71 = *(void *)(v19 + 8);
      unsigned int v46 = (char *)calloc(v70, 0x1CuLL);
      v72 = v71;
      if (v71)
      {
        v73 = 0;
        v74 = 0LL;
        int v22 = v445;
        v45 = v474;
        uint64_t v47 = v471;
        uint64_t v31 = __s1;
        v50 = v463;
        int v32 = v455;
        p_info = (__objc2_class_ro **)(&OBJC_METACLASS___SARecipeState + 32);
        uint64_t v34 = (__objc2_class_ro **)(&OBJC_METACLASS___SARecipeState + 32);
        do
        {
          v75 = (__int128 *)(v443 + v73);
          v76 = &v46[v74];
          v77 = *v75;
          if (v451 < 0x1C)
          {
            *(_OWORD *)(v76 + 10) = *(__int128 *)((char *)v75 + 10);
            *(_OWORD *)v76 = v77;
            *((_WORD *)v76 + 13) = 0;
          }

          else
          {
            *(_OWORD *)(v76 + 12) = *(__int128 *)((char *)v75 + 12);
            *(_OWORD *)v76 = v77;
          }

          v74 += 28LL;
          v73 += v451;
        }

        while (28 * v70 != v74);
        v49 = 0;
        LODWORD(v470) = v72;
        goto LABEL_97;
      }

      LODWORD(v470) = 0;
      v49 = 0;
LABEL_200:
      int v22 = v445;
    }

    v45 = v474;
    uint64_t v47 = v471;
LABEL_202:
    uint64_t v31 = __s1;
    v50 = v463;
LABEL_203:
    int v32 = v455;
    p_info = (__objc2_class_ro **)(&OBJC_METACLASS___SARecipeState + 32);
    uint64_t v34 = (__objc2_class_ro **)(&OBJC_METACLASS___SARecipeState + 32);
    goto LABEL_97;
  }

  if (v52 != 17)
  {
    v67 = v51 - (*(_DWORD *)v19 & 0xF);
    v66 = v67 / v63;
    v64 = HIDWORD(v63);
    goto LABEL_138;
  }

  v64 = HIDWORD(v63);
  if (SHIDWORD(v63) <= 2310)
  {
    switch(HIDWORD(v63))
    {
      case 0x30:
        v65 = 20;
        break;
      case 0x31:
        v65 = 24;
        break;
      case 0x81A:
        v65 = 8;
        break;
      default:
        goto LABEL_210;
    }
  }

  else
  {
    v471 = v47;
    v474 = v45;
    v495 = v46;
    switch(HIDWORD(v63))
    {
      case 0x907:
        v65 = 4;
        break;
      case 0x908:
      case 0x909:
        goto LABEL_8;
      case 0x90A:
      case 0x90C:
        v65 = 8;
        break;
      case 0x90B:
      case 0x90D:
        v65 = 16;
        break;
      default:
        if (HIDWORD(v63) != 2369) {
          goto LABEL_210;
        }
        v65 = 48;
        break;
    }
  }

  if (v51 / v65 >= v63 && v51 % v63 <= 0xF)
  {
LABEL_135:
    v49 = 0;
    if ((int)v64 > 2310)
    {
      v66 = 8;
      switch((int)v64)
      {
        case 2311:
          goto LABEL_97;
        case 2312:
        case 2313:
          goto LABEL_117;
        case 2314:
        case 2316:
          goto LABEL_138;
        case 2315:
        case 2317:
          v66 = 16;
          goto LABEL_138;
        default:
          if ((_DWORD)v64 != 2369) {
            goto LABEL_117;
          }
          v66 = 48;
          break;
      }

LABEL_180:
      if ((_DWORD)v63)
      {
        v105 = 0;
        v106 = *(void *)(v19 + 8);
        do
        {
          v107 = v35 + v105;
          if ((*(_BYTE *)(v107 + 17) & 0x20) != 0) {
            v480 = *(os_log_s **)v107;
          }
          v105 += v66;
          --v106;
        }

        while (v106);
      }

      goto LABEL_185;
    }

    if ((_DWORD)v64 != 48)
    {
      if ((_DWORD)v64 != 49)
      {
        if ((_DWORD)v64 == 2074) {
          goto LABEL_97;
        }
        goto LABEL_117;
      }

      v455 = v32;
      __s1 = v31;
      v463 = v50;
      LODWORD(v450) = 24;
LABEL_193:
      v445 = v22;
      v471 = v47;
      v474 = v45;
      v495 = v46;
      v459 = v23;
      if (v491) {
        goto LABEL_631;
      }
      v114 = v35;
      v115 = *(void *)(v19 + 8);
      v116 = *(void *)(v19 + 8);
      v491 = (os_log_s *)calloc(v115, 0x18uLL);
      if (v116)
      {
        v117 = 0;
        v118 = v491;
        do
        {
          v119 = (__int128 *)(v114 + v117);
          v120 = *v119;
          *((void *)v118 + 2) = *((void *)v119 + 2);
          *(_OWORD *)v118 = v120;
          v118 = (os_log_s *)((char *)v118 + 24);
          v117 += v450;
          --v115;
        }

        while (v115);
      }

      v49 = 0;
      HIDWORD(v530) = v116;
LABEL_198:
      uint64_t v23 = v459;
LABEL_199:
      unsigned int v46 = v495;
      goto LABEL_200;
    }

    v455 = v32;
    __s1 = v31;
    v463 = v50;
    LODWORD(v450) = 20;
LABEL_187:
    v443 = v44;
    v446 = v22;
    v471 = v47;
    v474 = v45;
    v495 = v46;
    v459 = v23;
    if (!v491)
    {
      v108 = v35;
      v109 = *(void *)(v19 + 8);
      v110 = *(void **)(v19 + 8);
      v491 = (os_log_s *)calloc(v109, 0x18uLL);
      v442 = v110;
      if ((_DWORD)v110)
      {
        v111 = 0;
        v112 = (unsigned __int8 *)v491 + 8;
        do
        {
          v113 = (const unsigned __int8 *)(v108 + v111);
          *((void *)v112 - 1) = *(unsigned int *)v113;
          uuid_copy(v112, v113 + 4);
          v112 += 24;
          v111 += v450;
          --v109;
        }

        while (v109);
      }

      v49 = 0;
      uint64_t v44 = v443;
      HIDWORD(v530) = (_DWORD)v442;
      uint64_t v23 = v459;
      uint64_t v31 = __s1;
      unsigned int v46 = v495;
      int v22 = v446;
      v45 = v474;
      uint64_t v47 = v471;
      v50 = v463;
      goto LABEL_203;
    }

    v361 = *__error();
    _sa_logt();
    v362 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v362, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_186C92000, v362, OS_LOG_TYPE_ERROR, "multiple load_info arrays for task", buf, 2u);
    }

    *__error() = v361;
    _SASetCrashLogMessage(2448, "multiple load_info arrays for task", v363, v364, v365, v366, v367, v368, v439);
    _os_crash();
    __break(1u);
LABEL_631:
    LODWORD(v252) = *__error();
    _sa_logt();
    v369 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v369, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_186C92000, v369, OS_LOG_TYPE_ERROR, "multiple load_info arrays for task", buf, 2u);
    }

    *__error() = v252;
    _SASetCrashLogMessage(2466, "multiple load_info arrays for task", v370, v371, v372, v373, v374, v375, v439);
    _os_crash();
    __break(1u);
LABEL_634:
    v376 = *__error();
    _sa_logt();
    v377 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v377, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v534 = 67109120;
      *(_DWORD *)v535 = v252;
      _os_log_error_impl( &dword_186C92000,  v377,  OS_LOG_TYPE_ERROR,  "%d delta threads when parsing stackshot in kperf",  v534,  8u);
    }

    *__error() = v376;
    _SASetCrashLogMessage( 4773,  "%d delta threads when parsing stackshot in kperf",  v378,  v379,  v380,  v381,  v382,  v383,  v252);
    _os_crash();
    __break(1u);
LABEL_637:
    v384 = *__error();
    _sa_logt();
    v385 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v385, OS_LOG_TYPE_ERROR))
    {
      v386 = *(void *)(v481 + 360);
      *(_DWORD *)v534 = 67109376;
      *(_DWORD *)v535 = v252;
      *(_WORD *)&v535[4] = 2048;
      *(void *)&v535[6] = v386;
      _os_log_error_impl(&dword_186C92000, v385, OS_LOG_TYPE_ERROR, "%d delta threads when dataStyle %llu", v534, 0x12u);
    }

    *__error() = v384;
    _SASetCrashLogMessage(4774, "%d delta threads when dataStyle %llu", v387, v388, v389, v390, v391, v392, v252);
    _os_crash();
    __break(1u);
LABEL_640:
    v393 = *__error();
    _sa_logt();
    a6 = (void *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled((os_log_t)a6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v534 = 136315138;
      *(void *)v535 = __s1;
      _os_log_error_impl( &dword_186C92000,  (os_log_t)a6,  OS_LOG_TYPE_ERROR,  "no task nor transitioning task, but have p_comm %s",  v534,  0xCu);
    }

    *__error() = v393;
    _SASetCrashLogMessage( 4394,  "no task nor transitioning task, but have p_comm %s",  v394,  v395,  v396,  v397,  v398,  v399,  (char)__s1);
    _os_crash();
    __break(1u);
LABEL_643:
    v400 = (int)a6;
    LODWORD(v252) = *__error();
    _sa_logt();
    v401 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v401, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v400;
      _os_log_error_impl(&dword_186C92000, v401, OS_LOG_TYPE_ERROR, "bad container type %u", buf, 8u);
    }

    *__error() = v252;
    _SASetCrashLogMessage(4175, "bad container type %u", v402, v403, v404, v405, v406, v407, v400);
    _os_crash();
    __break(1u);
    while (2)
    {
      v408 = *__error();
      _sa_logt();
      v409 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v409, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v534 = 67109120;
        *(_DWORD *)v535 = v252;
        _os_log_error_impl( &dword_186C92000,  v409,  OS_LOG_TYPE_ERROR,  "%d nonrunnable tids when parsing stackshot in kperf",  v534,  8u);
      }

      *__error() = v408;
      _SASetCrashLogMessage( 4863,  "%d nonrunnable tids when parsing stackshot in kperf",  v410,  v411,  v412,  v413,  v414,  v415,  v252);
      _os_crash();
      __break(1u);
LABEL_649:
      v66 = *__error();
      _sa_logt();
      v416 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v416, OS_LOG_TYPE_ERROR))
      {
        v417 = *(void *)(v481 + 360);
        *(_DWORD *)v534 = 67109376;
        *(_DWORD *)v535 = v252;
        *(_WORD *)&v535[4] = 2048;
        *(void *)&v535[6] = v417;
        _os_log_error_impl( &dword_186C92000,  v416,  OS_LOG_TYPE_ERROR,  "%d nonrunnable tids when dataStyle %llu",  v534,  0x12u);
      }

      *__error() = v66;
      _SASetCrashLogMessage(4864, "%d nonrunnable tids when dataStyle %llu", v418, v419, v420, v421, v422, v423, v252);
      _os_crash();
      __break(1u);
LABEL_652:
      v424 = *__error();
      _sa_logt();
      v425 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v425, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_186C92000, v425, OS_LOG_TYPE_ERROR, "multiple aot_info arrays for task", buf, 2u);
      }

      *__error() = v424;
      _SASetCrashLogMessage(2504, "multiple aot_info arrays for task", v426, v427, v428, v429, v430, v431, v439);
      _os_crash();
      __break(1u);
LABEL_655:
      v432 = *__error();
      _sa_logt();
      v165 = (_BYTE *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled((os_log_t)v165, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl( &dword_186C92000,  (os_log_t)v165,  OS_LOG_TYPE_ERROR,  "multiple text_exec_load_info arrays for task",  buf,  2u);
      }

      *__error() = v432;
      _SASetCrashLogMessage( 2487,  "multiple text_exec_load_info arrays for task",  v433,  v434,  v435,  v436,  v437,  v438,  v439);
      _os_crash();
      __break(1u);
LABEL_658:
      *(_DWORD *)v534 = 67109120;
      *(_DWORD *)v535 = (_DWORD)self;
      _os_log_fault_impl(&dword_186C92000, (os_log_t)v23, OS_LOG_TYPE_FAULT, "No shared cache with id %u", v534, 8u);
LABEL_599:

      *__error() = v66;
      LODWORD(v23) = (_DWORD)v468;
      v177 = v19;
LABEL_600:
      if (uuid_is_null((const unsigned __int8 *)&v536 + 8))
      {
        uint64_t v19 = (unint64_t)context;
        if ((context & 0x40000000) != 0)
        {
          v449 = *(id *)(v481 + 1024);
          v181 = 0;
          v182 = v471;
        }

        else if ((context & 0x80000000) != 0)
        {
          v320 = *__error();
          _sa_logt();
          uint64_t v23 = (id *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled((os_log_t)v23, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v534 = 136315394;
            *(void *)v535 = __s1;
            *(_WORD *)&v535[8] = 1024;
            *(_DWORD *)&v535[10] = (_DWORD)v463;
            _os_log_error_impl( &dword_186C92000,  (os_log_t)v23,  OS_LOG_TYPE_ERROR,  "Task %s [%d] is using non-system shared cache, but stackshot has no shared cache info",  v534,  0x12u);
          }

          v181 = 0;
          v449 = 0LL;
          *__error() = v320;
          v182 = v471;
          LODWORD(v23) = (_DWORD)v468;
        }

        else
        {
          v182 = v471;
          if ((context & 0x20000000) != 0)
          {
            v449 = 0LL;
            v181 = (v450 & 8 | __src) == 0;
          }

          else
          {
            v449 = 0LL;
            v181 = 0;
            if (v165 && (v177 & 1) == 0)
            {
              v319 = *(id *)(v481 + 1024);
              v182 = v471;
              v449 = v319;
              v181 = 0;
            }
          }
        }

                            if (!flatbuffers::Table::VerifyOffset(v442, (const flatbuffers::Verifier *)&v499, 0xCu)) {
                              goto LABEL_18;
                            }
                            v79 = *(int *)v442;
                            v80 = *(unsigned __int16 *)((char *)v442 - v79);
                            if (v80 >= 0xD)
                            {
                              if (*(_WORD *)((char *)v442 - v79 + 12))
                              {
                                if (!flatbuffers::Verifier::VerifyVectorOrString( (flatbuffers::Verifier *)&v499,  (const unsigned __int8 *)v442 + *(unsigned __int16 *)((char *)v442 - v79 + 12)
                                      + *(unsigned int *)((char *)v442 + *(unsigned __int16 *)((char *)v442 - v79 + 12)),
                                        1uLL,
                                        0LL))
                                  goto LABEL_18;
                                v81 = *(int *)v442;
                                v82 = -v81;
                                v80 = *(unsigned __int16 *)((char *)v442 - v81);
                                LODWORD(v79) = *(_DWORD *)v442;
                              }

                              else
                              {
                                v82 = -v79;
                              }

                              if (v80 >= 0xF)
                              {
                                v83 = (unsigned __int16 *)((char *)v442 + v82);
                                if (v83[7])
                                {
                                }

                                if (v80 >= 0x11
                                  && (v83[8]
                                   && (v500 < 2 || v500 - 1 < (flatbuffers::Table *)((char *)v442 + v83[8]) - v499)
                                   || v80 >= 0x13
                                   && (v83[9]
                                    && (v500 < 2 || v500 - 1 < (flatbuffers::Table *)((char *)v442 + v83[9]) - v499)
                                    || v80 >= 0x15
                                    && v83[10]
                                    && (v500 < 2 || v500 - 1 < (flatbuffers::Table *)((char *)v442 + v83[10]) - v499))))
                                {
                                  goto LABEL_18;
                                }
                              }
                            }

                            if (!flatbuffers::Table::VerifyOffset(v442, (const flatbuffers::Verifier *)&v499, 0x16u)) {
                              goto LABEL_18;
                            }
                            v84 = (unsigned __int16 *)((char *)v442 - (int)v79);
                            if (*v84 >= 0x17u)
                            {
                              v85 = v84[11];
                              if (v85)
                              {
                                if (!flatbuffers::Verifier::VerifyVectorOrString( (flatbuffers::Verifier *)&v499,  (const unsigned __int8 *)v442 + v85 + *(unsigned int *)((char *)v442 + v85),  4uLL,  0LL)) {
                                  goto LABEL_18;
                                }
                                v86 = (unsigned __int16 *)((char *)v442 - *(int *)v442);
                                if (*v86 >= 0x17u)
                                {
                                  v87 = v86[11];
                                  if (v87)
                                  {
                                    v389 = (char *)v442 + v87;
                                    v419 = *(unsigned int *)((char *)v442 + v87);
                                    if (*(_DWORD *)((char *)v442 + v87 + v419))
                                    {
                                      v390 = 0LL;
                                      v88 = &v408[v87 + v397];
                                      v394 = (char *)oslog + v397 + v87;
                                      do
                                      {
                                        v396 = (flatbuffers::Table *)&v88[v419 + *(unsigned int *)&v88[v419]];
                                        v398 = *(unsigned int *)&v88[v419];
                                        if (!flatbuffers::Verifier::VerifyTableStart( (flatbuffers::Verifier *)&v499,  (const unsigned __int8 *)v396)
                                          || !flatbuffers::Table::VerifyOffset( v396,  (const flatbuffers::Verifier *)&v499,  4u))
                                        {
                                          goto LABEL_18;
                                        }

                                        v89 = v398 - *(int *)&v88[v419 + v398];
                                        if (*(unsigned __int16 *)&v88[v419 + v89] >= 5u
                                          && (v90 = *(unsigned __int16 *)&v88[v419 + 4 + v89]) != 0)
                                        {
                                          v91 = (const unsigned __int8 *)&v88[v419
                                                                            + v398
                                                                            + v90
                                                                            + *(unsigned int *)&v88[v419 + v398 + v90]];
                                        }

                                        else
                                        {
                                          v91 = 0LL;
                                        }

                                        if (!flatbuffers::Verifier::VerifyString((flatbuffers::Verifier *)&v499, v91)) {
                                          goto LABEL_18;
                                        }
                                        v391 = v398 - *(int *)&v88[v419 + v398];
                                        v392 = *(unsigned __int16 *)&v88[v419 + v391];
                                        if (v392 >= 7
                                          && (*(_WORD *)&v88[v419 + 6 + v391]
                                           && (v500 < 9
                                            || v500 - 8 < (unint64_t)&v394[v419
                                                                                + v398
                                                                                + *(unsigned __int16 *)&v88[v419 + 6 + v391]
                                                                                - (void)v499])
                                           || v392 >= 9
                                           && *(_WORD *)&v88[v419 + 8 + v391]
                                           && (v500 < 9
                                            || v500 - 8 < (unint64_t)&v394[v419
                                                                                + v398
                                                                                + *(unsigned __int16 *)&v88[v419 + 8 + v391]
                                                                                - (void)v499])))
                                        {
                                          goto LABEL_18;
                                        }

                                        if (!flatbuffers::Table::VerifyOffset( v396,  (const flatbuffers::Verifier *)&v499,  0xAu)) {
                                          goto LABEL_18;
                                        }
                                        if (v392 >= 0xB)
                                        {
                                          if (*(_WORD *)&v88[v419 + 10 + v391])
                                          {
                                            v92 = *(unsigned __int16 *)&v88[v419 + 10 + v391];
                                            if (!flatbuffers::Verifier::VerifyVectorOrString( (flatbuffers::Verifier *)&v499,  (const unsigned __int8 *)&v88[v419 + v398 + v92 + *(unsigned int *)&v88[v419 + v398 + v92]],  1uLL,  0LL)) {
                                              goto LABEL_18;
                                            }
                                          }
                                        }

                                        LODWORD(v501) = v501 - 1;
                                        v88 += 4;
                                        v394 += 4;
                                      }

                                      while (++v390 < (unint64_t)*(unsigned int *)&v389[v419]);
                                    }
                                  }
                                }
                              }
                            }

                            if (!flatbuffers::Table::VerifyOffset(v442, (const flatbuffers::Verifier *)&v499, 0x18u)) {
                              goto LABEL_18;
                            }
                            v93 = (unsigned __int16 *)((char *)v442 - *(int *)v442);
                            if (*v93 < 0x19u) {
                              goto LABEL_237;
                            }
                            v94 = v93[12];
                            if (!v94) {
                              goto LABEL_237;
                            }
                            if (!flatbuffers::Verifier::VerifyVectorOrString( (flatbuffers::Verifier *)&v499,  (const unsigned __int8 *)v442 + v94 + *(unsigned int *)((char *)v442 + v94),  4uLL,  0LL)) {
                              goto LABEL_18;
                            }
                            v95 = (unsigned __int16 *)((char *)v442 - *(int *)v442);
                            if (*v95 >= 0x19u && (v96 = v95[12]) != 0) {
                              v97 = (_DWORD *)((char *)v442 + v96 + *(unsigned int *)((char *)v442 + v96));
                            }
                            else {
LABEL_237:
                            }
                              v97 = 0LL;
                            if (!flatbuffers::Verifier::VerifyVectorOfTables<FlatbufferSymbols::SymbolNameEntry>( (flatbuffers::Verifier *)&v499,  v97)
                              || !flatbuffers::Table::VerifyOffset(v442, (const flatbuffers::Verifier *)&v499, 0x1Au))
                            {
                              goto LABEL_18;
                            }

                            v98 = (unsigned __int16 *)((char *)v442 - *(int *)v442);
                            if (*v98 < 0x1Bu) {
                              goto LABEL_246;
                            }
                            v99 = v98[13];
                            if (!v99) {
                              goto LABEL_246;
                            }
                            if (!flatbuffers::Verifier::VerifyVectorOrString( (flatbuffers::Verifier *)&v499,  (const unsigned __int8 *)v442 + v99 + *(unsigned int *)((char *)v442 + v99),  4uLL,  0LL)) {
                              goto LABEL_18;
                            }
                            v100 = (unsigned __int16 *)((char *)v442 - *(int *)v442);
                            if (*v100 >= 0x1Bu && (v101 = v100[13]) != 0) {
                              v102 = (_DWORD *)((char *)v442 + v101 + *(unsigned int *)((char *)v442 + v101));
                            }
                            else {
LABEL_246:
                            }
                              v102 = 0LL;
                            if ((flatbuffers::Verifier::VerifyVectorOfTables<FlatbufferSymbols::SymbolNameEntry>( (flatbuffers::Verifier *)&v499,  v102) & 1) == 0) {
                              goto LABEL_18;
                            }
                            LODWORD(v501) = v501 - 1;
                            oslog = (os_log_t)((char *)oslog + 4);
                            v408 += 4;
                            ++v412;
                          }

                          while (v412 < *v401);
                          v103 = *(int *)v482;
                          v68 = -v103;
                          v65 = *(unsigned __int16 *)((char *)v482 - v103);
LABEL_251:
                          if (v65 >= 0xB)
                          {
                            v104 = (unsigned __int16 *)((char *)v482 + v68);
                            if (v104[5])
                            {
                            }

                            if (v65 >= 0xD
                              && (v104[6]
                               && (v500 < 2 || v500 - 1 < (flatbuffers::Table *)((char *)v482 + v104[6]) - v499)
                               || v65 >= 0xF
                               && (v104[7]
                                && (v500 < 2 || v500 - 1 < (flatbuffers::Table *)((char *)v482 + v104[7]) - v499)
                                || v65 >= 0x11
                                && v104[8]
                                && (v500 < 5 || v500 - 4 < (flatbuffers::Table *)((char *)v482 + v104[8]) - v499))))
                            {
                              goto LABEL_18;
                            }
                          }

LABEL_334:
        if (v182)
        {
          v183 = *v182 | ((unint64_t)(v182[1] & 0xFFFFFF) << 32);
          if ((v19 & 0x10000000) != 0) {
            v183 = SAArchitectureForTranslatedTask(v183);
          }
        }

        else
        {
          v183 = 0LL;
        }

        if (v165)
        {
          v184 = (v19 >> 28) & 1;
          if ((_DWORD)v23) {
            LOBYTE(v184) = 0;
          }
          v185 = -[SASampleStore taskForKCDataTask:loadInfos:numLoadInfos:loadInfosIsPartial:textExecLoadInfos:numTextExecLoadInfos:textExecLoadInfosIsPartial:architecture:timestamp:sharedCache:needAOTInfo:]( (void *)v481,  (uint64_t)v165,  v491,  HIDWORD(v530),  v443,  v490,  v530,  (char)v21,  v183,  newValue,  v449,  v184);
          goto LABEL_347;
        }

        if ((v20 & 1) == 0)
        {
          v192 = (v19 >> 28) & 1;
          if ((_DWORD)v23) {
            LOBYTE(v192) = 0;
          }
          v193 = (char)v21;
          v187 = (uint64_t)v455;
          -[SASampleStore taskForKCDataDeltaTask:loadInfos:numLoadInfos:loadInfosIsPartial:textExecLoadInfos:numTextExecLoadInfos:textExecLoadInfosIsPartial:timestamp:sharedCache:needAOTInfo:]( (void *)v481,  *v455,  v491,  HIDWORD(v530),  v443,  v490,  v530,  v193,  newValue,  v449,  v192);
          uint64_t v23 = (id *)objc_claimAutoreleasedReturnValue();
          if (v181) {
            goto LABEL_348;
          }
          goto LABEL_359;
        }

        if (!__src) {
          goto LABEL_625;
        }
        v186 = (v19 >> 28) & 1;
        if ((_DWORD)v23) {
          LOBYTE(v186) = 0;
        }
        v185 = -[SASampleStore taskForKCDataTransitioningTask:loadInfos:numLoadInfos:loadInfosIsPartial:textExecLoadInfos:numTextExecLoadInfos:textExecLoadInfosIsPartial:architecture:timestamp:sharedCache:needAOTInfo:]( (void *)v481,  __src,  v491,  HIDWORD(v530),  v443,  v490,  v530,  (char)v21,  newValue,  v449,  v186);
LABEL_347:
        uint64_t v23 = (id *)v185;
        v187 = (uint64_t)v455;
        if (v181)
        {
LABEL_348:
          [v23 sharedCache];
          v188 = (void *)objc_claimAutoreleasedReturnValue();

          if (v188)
          {
            v189 = *__error();
            _sa_logt();
            v190 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v190, OS_LOG_TYPE_FAULT))
            {
              [v23 sharedCache];
              v471 = (unsigned int *)objc_claimAutoreleasedReturnValue();
              [v471 debugDescription];
              self = (void *)objc_claimAutoreleasedReturnValue();
              v302 = [v23 debugDescription];
              *(_DWORD *)v534 = 138412546;
              *(void *)v535 = self;
              *(_WORD *)&v535[8] = 2112;
              *(void *)&v535[10] = v302;
              v303 = (void *)v302;
              _os_log_fault_impl( &dword_186C92000,  v190,  OS_LOG_TYPE_FAULT,  "shared cache previously %@, though task %@ now has no shared cache",  v534,  0x16u);
            }

            *__error() = v189;
            v187 = (uint64_t)v455;
            if (v23)
            {
              objc_setProperty_atomic(v23, v191, 0LL, 256LL);
              goto LABEL_358;
            }
          }

          else if (v23)
          {
LABEL_358:
            *((_BYTE *)v23 + 72) = 1;
          }
        }

LABEL_359:
        v194 = v477;
        if (v486 && v477)
        {
          [MEMORY[0x189607968] numberWithUnsignedLongLong:v477];
          v195 = (void *)objc_claimAutoreleasedReturnValue();
          [v486 objectForKeyedSubscript:v195];
          v196 = (void *)objc_claimAutoreleasedReturnValue();

          if (v196)
          {
            v197 = [v196 intValue];
            if (v197 != -1 && v23) {
              *((_DWORD *)v23 + 21) = v197;
            }
          }

          else
          {
            LODWORD(v443) = v177;
            v198 = *__error();
            _sa_logt();
            v199 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v199, OS_LOG_TYPE_DEFAULT))
            {
              [v23 debugDescription];
              v200 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)v534 = 138412546;
              *(void *)v535 = v200;
              *(_WORD *)&v535[8] = 2048;
              *(void *)&v535[10] = v477;
              _os_log_impl( &dword_186C92000,  v199,  OS_LOG_TYPE_DEFAULT,  "WARNING: Task %@ has jetsam coalition id %llu, but stackshot has no info for that coalition",  v534,  0x16u);
            }

            *__error() = v198;
            v187 = (uint64_t)v455;
            v177 = v443;
          }
        }

        if (!objc_msgSend(*(id *)(v481 + 24), "count", v194)) {
          goto LABEL_374;
        }
        [v23 taskStates];
        v201 = (void *)objc_claimAutoreleasedReturnValue();
        if (![v201 count])
        {
          [v23 execTimestamp];
          v202 = (void *)objc_claimAutoreleasedReturnValue();
          if (v202) {
            goto LABEL_372;
          }
          if ((a7 & 1) != 0)
          {
            v472 = *(void **)(v481 + 16);
            objc_msgSend(MEMORY[0x189607968], "numberWithInt:", objc_msgSend(v23, "pid"));
            v478 = (void *)objc_claimAutoreleasedReturnValue();
            [v472 objectForKeyedSubscript:v478];
            v210 = (void *)objc_claimAutoreleasedReturnValue();
            v471 = (unsigned int *)[v210 count];

            if ((unint64_t)v471 >= 2 && v23) {
LABEL_400:
            }
              objc_setProperty_atomic(v23, v211, newValue, 224LL);
LABEL_374:
            LODWORD(v471) = (v19 & 0x10) != 0
                         || v165 && *((_DWORD *)v165 + 14)
                         || (v20 & 1) == 0 && *(_DWORD *)(v187 + 48);
            if ((a8 & 1) != 0)
            {
              v477 = 0LL;
              uint64_t v20 = (unint64_t)v489;
              v203 = v490;
              v204 = v481;
              v205 = v491;
              goto LABEL_439;
            }

            if ((_DWORD)a7)
            {
              if (v165)
              {
                if (a4)
                {
                  v206 = 0LL;
                  if (a4 == 0x7FFFFFFFFFFFFFFFLL) {
                    v207 = 0x7FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    v207 = a4 - 1;
                  }
                  v208 = *(void *)(v481 + 184);
                  if ((_DWORD)v208)
                  {
                    v209 = 0LL;
                    if (HIDWORD(v208))
                    {
                      v206 = *((void *)v165 + 2);
                      if ((_DWORD)v208 == HIDWORD(v208))
                      {
                        v209 = *((void *)v165 + 3);
                      }

                      else
                      {
                        v206 = __udivti3();
                        v187 = (uint64_t)v455;
                        v209 = __udivti3();
                      }
                    }
                  }

                  else
                  {
                    v209 = 0LL;
                  }

                  v212 = *((_DWORD *)v165 + 2);
                  -[SASampleStore backfillTask:lastSampleIndex:timestamp:haveSnap:terminatedThreadsUserTimeInNs:terminatedThreadsSystemTimeInNs:terminatedThreadsCycles:terminatedThreadsInstructions:suspendCount:pageins:isDarwinBG:isForeground:isBoosted:isDirty:haveWQFlags:wqExceededTotalThreadLimit:wqExceededConstrainedThreadLimit:haveMem:taskSizeInBytes:haveLatencyQos:latencyQos:]( (void *)v481,  v23,  v207,  newValue,  1,  v206,  v209,  0LL,  0LL,  *((_DWORD *)v165 + 14),  *((_DWORD *)v165 + 16),  (v212 & 0x40) != 0,  (v212 & 0x400) != 0,  (v212 & 0x800) != 0,  BYTE2(v212) & 1,  (v212 & 0x80000) != 0,  (v212 & 0x40000) != 0,  (v212 & 0x20000) != 0,  *((void *)v165 + 5) != 0LL,  *((void *)v165 + 5),  1,  *((_DWORD *)v165 + 20));
                }

                goto LABEL_410;
              }

LABEL_622:
              v345 = *__error();
              _sa_logt();
              v346 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v346, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)v534 = 0;
                _os_log_error_impl( &dword_186C92000,  v346,  OS_LOG_TYPE_ERROR,  "no task_struct when backfilling kperf",  v534,  2u);
              }

              *__error() = v345;
              _SASetCrashLogMessage( 4579,  "no task_struct when backfilling kperf",  v347,  v348,  v349,  v350,  v351,  v352,  v440);
              _os_crash();
              __break(1u);
LABEL_625:
              v353 = *__error();
              _sa_logt();
              v354 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v354, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)v534 = 0;
                _os_log_error_impl( &dword_186C92000,  v354,  OS_LOG_TYPE_ERROR,  "no task_struct, task_delta_struct, nor task_transitioning_struct",  v534,  2u);
              }

              *__error() = v353;
              _SASetCrashLogMessage( 4531,  "no task_struct, task_delta_struct, nor task_transitioning_struct",  v355,  v356,  v357,  v358,  v359,  v360,  v439);
              _os_crash();
              __break(1u);
            }

LABEL_410:
            [v23 taskStates];
            v213 = (void *)objc_claimAutoreleasedReturnValue();
            v214 = [v213 lastObject];

            self = (void *)v214;
            if (v214)
            {
              objc_msgSend(MEMORY[0x189607968], "numberWithInt:", objc_msgSend(v23, "pid"));
              v215 = (void *)objc_claimAutoreleasedReturnValue();
              [v485 objectForKeyedSubscript:v215];
              v216 = (void *)objc_claimAutoreleasedReturnValue();
              v217 = *(void *)(v481 + 184);
              uint64_t v19 = v177;
              if (v165)
              {
                v218 = v215;
                v219 = -[SATaskState correspondsToKCDataTask:terminatedThreadsInstructionCycles:machTimebase:donatingUniquePids:]( (uint64_t)self,  (uint64_t)v165,  v474,  v217,  v216);

                if ((v219 & 1) != 0) {
                  goto LABEL_422;
                }
LABEL_415:
                objc_msgSend(MEMORY[0x189607968], "numberWithInt:", objc_msgSend(v23, "pid"));
                v221 = (void *)objc_claimAutoreleasedReturnValue();
                [v485 objectForKeyedSubscript:v221];
                v222 = (void *)objc_claimAutoreleasedReturnValue();
                v204 = v481;
                v223 = +[SATaskState stateWithKCDataTask:terminatedThreadsInstructionCycles:machTimebase:donatingUniquePids:startTimestamp:endTimestamp:startSampleIndex:endSampleIndex:]( (uint64_t)&OBJC_CLASS___SATaskState,  (uint64_t)v165,  v474,  *(void *)(v481 + 184),  v222,  newValue,  newValue,  a4,  a4);
LABEL_424:
                v226 = (void *)v223;

                uint64_t v20 = (unint64_t)v489;
                if (v23)
                {
                  [v23[1] addObject:v226];
                  [v23[1] count];
                }

LABEL_427:
                if ((_DWORD)v19)
                {
                  v477 = v23;
                  [v477 binaryLoadInfos];
                  v227 = (void *)objc_claimAutoreleasedReturnValue();
                  [(id)v20 setKernelBinaryLoadInfos:v227];
                }

                else
                {
                  [v23 binaryLoadInfos];
                  v228 = (void *)objc_claimAutoreleasedReturnValue();
                  [(id)v20 setUserBinaryLoadInfos:v228];

                  if (v23) {
                    v229 = *((_BYTE *)v23 + 73) & 1;
                  }
                  else {
                    v229 = 0LL;
                  }
                  [(id)v20 setAssumeUserBinaryLoadInfosContainMainBinary:v229];
                  [v23 sharedCache];
                  v230 = (void *)objc_claimAutoreleasedReturnValue();
                  [(id)v20 setSharedCache:v230];

                  if ((context & 0x10000000) != 0)
                  {
                    v231 = -[SASampleStore addressTranslationsForPid:](v204, [v23 pid]);
                    [(id)v20 setAddressTranslations:v231];
                  }

                  -[SASampleStore lastTaskWithPid:]((void *)v204, 0LL);
                  v477 = (id *)objc_claimAutoreleasedReturnValue();
                  if (!v477)
                  {
                    +[SATask taskWithPid:uniquePid:name:sharedCache:]( (uint64_t)&OBJC_CLASS___SATask,  0LL,  a7 << 63 >> 63,  0LL,  0LL);
                    v477 = (id *)objc_claimAutoreleasedReturnValue();
                    -[SASampleStore addTask:](v204, v477);
                  }
                }

                v203 = v490;
                v205 = v491;
                if (*(_BYTE *)(v204 + 220) && !v480)
                {
                  [v23 mainThread];
                  v232 = (void *)objc_claimAutoreleasedReturnValue();
                  v480 = (os_log_s *)[v232 threadId];
                }

LABEL_439:
                if (v205) {
                  free(v205);
                }
                HIDWORD(v530) = 0;
                if (v203) {
                  free(v203);
                }
                LODWORD(v530) = 0;
                if (v22) {
                  free(v22);
                }
                v233 = a2[1];
                v234 = (char *)*a2 + (*a2)[1];
                v235 = v234 + 16;
                *a2 = (unsigned int *)(v234 + 16);
                v236 = v234 + 32;
                int v22 = newValue;
                if (v236 > (char *)v233)
                {
LABEL_446:
                  unsigned int v40 = 0LL;
LABEL_551:
                  if (!(_DWORD)v40 && (a8 & 1) == 0)
                  {
                    if ((a7 & 1) == 0)
                    {
                      v278 = objc_alloc(MEMORY[0x189603FE0]);
                      [v23 threads];
                      v279 = (void *)objc_claimAutoreleasedReturnValue();
                      [v279 allKeys];
                      v280 = (void *)objc_claimAutoreleasedReturnValue();
                      v281 = (void *)[v278 initWithArray:v280];

                      [v281 minusSet:v493];
                      v505 = 0u;
                      v506 = 0u;
                      v503 = 0u;
                      v504 = 0u;
                      v282 = v281;
                      v283 = [v282 countByEnumeratingWithState:&v503 objects:v532 count:16];
                      if (v283)
                      {
                        v284 = v283;
                        v285 = *(void *)v504;
                        do
                        {
                          for (i = 0LL; i != v284; ++i)
                          {
                            if (*(void *)v504 != v285) {
                              objc_enumerationMutation(v282);
                            }
                            v287 = *(void *)(*((void *)&v503 + 1) + 8 * i);
                            [v23 threads];
                            v288 = (void *)objc_claimAutoreleasedReturnValue();
                            [v288 objectForKeyedSubscript:v287];
                            v289 = (void *)objc_claimAutoreleasedReturnValue();

                            [v289 exitTimestamp];
                            v290 = (void *)objc_claimAutoreleasedReturnValue();

                            if (v290) {
                              v292 = 1;
                            }
                            else {
                              v292 = v289 == 0LL;
                            }
                            if (!v292) {
                              objc_setProperty_atomic(v289, v291, v22, 40LL);
                            }
                          }

                          v284 = [v282 countByEnumeratingWithState:&v503 objects:v532 count:16];
                        }

                        while (v284);
                      }
                    }

                    v501 = 0u;
                    v502 = 0u;
                    v499 = 0u;
                    v500 = 0u;
                    v293 = v494;
                    v294 = [v293 countByEnumeratingWithState:&v499 objects:v531 count:16];
                    if (v294)
                    {
                      v295 = v294;
                      v296 = *(void *)v500;
                      do
                      {
                        for (j = 0LL; j != v295; ++j)
                        {
                          if (*(void *)v500 != v296) {
                            objc_enumerationMutation(v293);
                          }
                          v298 = *(void *)(*((void *)&v499 + 1) + 8 * j);
                          if ((unint64_t)[v293 countForObject:v298] >= 2)
                          {
                            [v23 dispatchQueues];
                            v299 = (void *)objc_claimAutoreleasedReturnValue();
                            [v299 objectForKeyedSubscript:v298];
                            v300 = (_BYTE *)objc_claimAutoreleasedReturnValue();
                            if (v300) {
                              v300[24] = 1;
                            }
                          }
                        }

                        v295 = [v293 countByEnumeratingWithState:&v499 objects:v531 count:16];
                      }

                      while (v295);
                    }

                    unsigned int v40 = 0LL;
                    uint64_t v20 = (unint64_t)v489;
                  }

LABEL_579:
                  if (v492) {
                    free(v492);
                  }
                  if (v495) {
                    free(v495);
                  }
                  [(id)v20 clearTaskData];

                  uint64_t v23 = v459;
                  goto LABEL_21;
                }

                v491 = a14;
                v490 = a13;
LABEL_448:
                v237 = (_BYTE *)MEMORY[0x186E47ACC]();
                KCLogIter(*a2, (unint64_t)a2[1], 0);
                v238 = *a2;
                v239 = **a2;
                v240 = v239 & 0xFFFFFFF0;
                if ((v239 & 0xFFFFFFF0) == 0x20) {
                  v241 = 17;
                }
                else {
                  v241 = **a2;
                }
                v242 = v238 + 4;
                else {
                  v243 = (uint64_t)(*a2 + 12);
                }
                context = v237;
                if (v241 > 19)
                {
                  if (v241 == 2332)
                  {
                    v248 = v243 + 8;
                    if (uuid_is_null((const unsigned __int8 *)(v243 + 8)))
                    {
                      v249 = *__error();
                      _sa_logt();
                      v250 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v250, OS_LOG_TYPE_ERROR))
                      {
                        *(_WORD *)v534 = 0;
                        _os_log_error_impl( &dword_186C92000,  v250,  OS_LOG_TYPE_ERROR,  "Kernel cache UUID is all zeros",  v534,  2u);
                      }

                      *__error() = v249;
                    }

                    else
                    {
                      v255 = (void *)v243;
                      v526 = 0u;
                      v527 = 0u;
                      v524 = 0u;
                      v525 = 0u;
                      v256 = *(id *)(v204 + 104);
                      v257 = [v256 countByEnumeratingWithState:&v524 objects:v533 count:16];
                      if (v257)
                      {
                        v258 = v257;
                        v259 = *(void *)v525;
LABEL_485:
                        uint64_t v19 = 0LL;
                        while (1)
                        {
                          if (*(void *)v525 != v259) {
                            objc_enumerationMutation(v256);
                          }
                          v260 = *(void **)(*((void *)&v524 + 1) + 8 * v19);
                          if ([v260 matchesUUID:v248 loadAddress:*v255]) {
                            break;
                          }
                          if (v258 == ++v19)
                          {
                            v258 = [v256 countByEnumeratingWithState:&v524 objects:v533 count:16];
                            if (v258) {
                              goto LABEL_485;
                            }
                            goto LABEL_491;
                          }
                        }

                        v262 = v260;

                        v204 = v481;
                        if (v262) {
                          goto LABEL_506;
                        }
                      }

                      else
                      {
LABEL_491:

                        v204 = v481;
                      }

                      uuidForBytes(v248);
                      v263 = (void *)objc_claimAutoreleasedReturnValue();
                      +[SAKernelCache kernelCacheWithUUID:loadAddress:]( &OBJC_CLASS___SAKernelCache,  "kernelCacheWithUUID:loadAddress:",  v263,  *v255);
                      v262 = (id)objc_claimAutoreleasedReturnValue();

                      [*(id *)(v204 + 104) addObject:v262];
LABEL_506:

                      int v22 = newValue;
                    }
                  }

                  else if (v241 == 20)
                  {
                    v301 = *((void *)v238 + 1);
                    if (v467 == v301)
                    {
                      unsigned int v40 = 0LL;
                      v277 = context;
                    }

                    else
                    {
                      v275 = *__error();
                      _sa_logt();
                      v276 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v276, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)v534 = 134218240;
                        *(void *)v535 = v467;
                        *(_WORD *)&v535[8] = 2048;
                        *(void *)&v535[10] = v301;
                        _os_log_error_impl( &dword_186C92000,  v276,  OS_LOG_TYPE_ERROR,  "Container end with wrong ID (%llu != %llu)",  v534,  0x16u);
                      }

                      unsigned int v40 = 7LL;
LABEL_549:
                      v277 = context;

                      *__error() = v275;
                    }

                    objc_autoreleasePoolPop(v277);
                    goto LABEL_551;
                  }

                  goto LABEL_539;
                }

                v244 = (unint64_t)a2[1];
                if (v241 != 17)
                {
                  if (v241 == 19)
                  {
                    v245 = v238 + 4;
                    if ((unint64_t)(v238 + 4) > v244
                      || (v246 = v238[1], (unint64_t)v245 + v246 > v244)
                      || v240 == 32
                      || v239 != 19
                      || v246 <= 3)
                    {
                      v275 = *__error();
                      _sa_logt();
                      v276 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v276, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)v534 = 67109120;
                        *(_DWORD *)v535 = v466;
                        _os_log_error_impl( &dword_186C92000,  v276,  OS_LOG_TYPE_ERROR,  "Error parsing kcdata buffer: subcontainer of container type %u is invalid",  v534,  8u);
                      }

                      unsigned int v40 = 1LL;
                      goto LABEL_549;
                    }

                    if (*v242 == 2356)
                    {
                      unsigned int v40 = SkipToContainerEnd((int **)a2, 0);
                    }

                    else
                    {
                      if (*v242 == 2308) {
                        v247 = -[SASampleStore _parseKCDataThreadContainer:timestampOfSample:sampleIndex:task:kernelTask:frameIterator:mainThreadID:primaryDataIsKPerf:addStaticInfoOnly:threadIDsInThisTaskThisSample:dispatchQueueIDsInThisTaskThisSample:taskIsSuspended:waitInfos:numWaitInfos:turnstileInfos:numTurnstileInfos:port_label_info_array:exclaveInfo:]( (_BYTE *)v204,  (int **)a2,  v22,  a4,  v23,  v477,  (void *)v20,  v480,  a7,  a8,  v493,  v494,  (char)v471,  (uint64_t)v492,  HIDWORD(v470),  (uint64_t)v495,  v470,  v441,  a13,  a14,  v483);
                      }
                      else {
                        v247 = SkipToContainerEnd((int **)a2, 1);
                      }
                      unsigned int v40 = v247;
                    }

                    objc_autoreleasePoolPop(v237);
                    if ((_DWORD)v40) {
                      goto LABEL_579;
                    }
                    goto LABEL_540;
                  }

                  goto LABEL_539;
                }

                v251 = v238[1];
                v252 = *((void *)v238 + 1);
                if ((_DWORD)v252)
                {
                  if (v239 == 17)
                  {
                    v253 = HIDWORD(v252);
                    if (SHIDWORD(v252) <= 2310)
                    {
                      switch(HIDWORD(v252))
                      {
                        case 0x30:
                          v254 = 20;
                          break;
                        case 0x31:
                          v254 = 24;
                          break;
                        case 0x81A:
LABEL_510:
                          v254 = 8;
                          break;
                        default:
                          goto LABEL_544;
                      }
                    }

                    else
                    {
                      switch(HIDWORD(v252))
                      {
                        case 0x907:
                          v254 = 4;
                          break;
                        case 0x908:
                        case 0x909:
                          goto LABEL_544;
                        case 0x90A:
                        case 0x90C:
                          goto LABEL_510;
                        case 0x90B:
                        case 0x90D:
                          v254 = 16;
                          break;
                        default:
                          if (HIDWORD(v252) != 2369) {
                            goto LABEL_544;
                          }
                          v254 = 48;
                          break;
                      }
                    }

                    if (v251 / v254 < v252
                      || v251 % v252 >= 0x10)
                    {
LABEL_544:
                      v275 = *__error();
                      _sa_logt();
                      v276 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v276, OS_LOG_TYPE_ERROR))
                      {
                        *(_WORD *)v534 = 0;
                        unsigned int v40 = 2LL;
                        _os_log_error_impl( &dword_186C92000,  v276,  OS_LOG_TYPE_ERROR,  "Error parsing kcdata buffer: array is invalid",  v534,  2u);
                      }

                      else
                      {
                        unsigned int v40 = 2LL;
                      }

                      goto LABEL_549;
                    }

LABEL_518:
                    if ((int)v253 > 2310)
                    {
                      LODWORD(v21) = 8;
                      switch((int)v253)
                      {
                        case 2311:
                          goto LABEL_539;
                        case 2312:
                        case 2313:
                          goto LABEL_494;
                        case 2314:
                        case 2316:
                          goto LABEL_521;
                        case 2315:
                        case 2317:
                          LODWORD(v21) = 16;
                          goto LABEL_521;
                        default:
                          if ((_DWORD)v253 != 2369) {
                            goto LABEL_494;
                          }
                          LODWORD(v21) = 48;
                          break;
                      }

                      goto LABEL_523;
                    }

LABEL_494:
                    LODWORD(v21) = 0;
                  }

                  else
                  {
                    v261 = v251 - (**a2 & 0xF);
                    LODWORD(v21) = v261 / v252;
                    v253 = HIDWORD(v252);
                  }

LABEL_521:
                  if ((_DWORD)v253 == 2327)
                  {
                    if ((a8 & 1) == 0)
                    {
                      if ((_DWORD)a7) {
                        continue;
                      }
                      if (*(void *)(v204 + 360) == 1LL) {
                        goto LABEL_649;
                      }
                      v474 = (void *)v243;
                      if ((_DWORD)v252)
                      {
                        v267 = 0;
                        uint64_t v19 = v252;
                        do
                        {
                          v507[0] = MEMORY[0x1895F87A8];
                          v507[1] = v15;
                          v507[2] = __264__SASampleStore__parseKCDataTaskContainer_timestampOfSample_sampleIndex_sharedCaches_frameIterator_primaryDataIsKPerf_addStaticInfoOnly_taskUniquePidsInThisSample_taskPidsInThisSample_importanceDonations_rPidForJetsamCoalitionId_port_label_info_array_exclaveInfo___block_invoke_279;
                          v507[3] = &unk_189F617D8;
                          v507[4] = v204;
                          v507[9] = v480;
                          v268 = v493;
                          v507[5] = v268;
                          v269 = v23;
                          v507[6] = v269;
                          v270 = v22;
                          v271 = v22;
                          v507[7] = v271;
                          v507[10] = a4;
                          v272 = v494;
                          v507[8] = v272;
                          __264__SASampleStore__parseKCDataTaskContainer_timestampOfSample_sampleIndex_sharedCaches_frameIterator_primaryDataIsKPerf_addStaticInfoOnly_taskUniquePidsInThisSample_taskPidsInThisSample_importanceDonations_rPidForJetsamCoalitionId_port_label_info_array_exclaveInfo___block_invoke_279( (uint64_t)v507,  v273,  (void *)((char *)v474 + v267));

                          v204 = v481;
                          int v22 = v270;
                          uint64_t v20 = (unint64_t)v489;

                          v267 += v21;
                          --v19;
                        }

                        while (v19);
                      }
                    }

                    goto LABEL_539;
                  }

                  if ((_DWORD)v253 != 2369)
                  {
LABEL_539:
                    objc_autoreleasePoolPop(context);
LABEL_540:
                    v233 = a2[1];
                    v274 = (char *)*a2 + (*a2)[1];
                    v235 = v274 + 16;
                    *a2 = (unsigned int *)(v274 + 16);
                    v236 = v274 + 32;
                    goto LABEL_448;
                  }

  if ((v1208 & 1) == 0) {
    [*p_isa appendString:@"\n"];
  }
LABEL_523:
  [*v1217 lastWakeTime];
  v554 = v553;
  [*v1217 eventTimeRange];
  v555 = (void *)objc_claimAutoreleasedReturnValue();
  [v555 startTime];
  v556 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v556
    || ([v556 machAbsTimeSeconds], v557 == 0.0)
    && ([v556 machContTimeSeconds], v558 == 0.0)
    || (([v556 machAbsTimeSeconds], v559 == 0.0)
     || ([v556 machContTimeSeconds], v560 == 0.0))
    && ([*(id *)(v1256 + 32) machAbsTimeSeconds], v561 != 0.0)
    && ([*(id *)(v1256 + 32) machContTimeSeconds], v562 != 0.0))
  {
    v563 = *(id *)(v1256 + 32);

    v556 = v563;
  }

  v1196 = v556;
  [v1196 wallTime];
  v564 = v1196;
  v1177 = v1196;
  if (v565 == 0.0)
  {
    v1177 = *(id *)(v1256 + 32);

    v564 = v1196;
  }

  [v564 machAbsTimeSeconds];
  if (v566 != 0.0
    || ([v1196 machContTimeSeconds], v567 != 0.0)
    || v554 != 0.0 && (v554 < 0.0 || ([v1177 wallTime], v587 > v554)))
  {
    [v1196 machContTimeSeconds];
    if (v568 == 0.0)
    {
      [v1196 machAbsTimeSeconds];
      if (v573 == 0.0) {
        goto LABEL_544;
      }
      if (v1208) {
        goto LABEL_541;
      }
    }

    else
    {
      v569 = *p_isa;
      if ((v1208 & 1) != 0)
      {
        v570 = (void *)MEMORY[0x189607968];
        [v1196 machContTimeSeconds];
        objc_msgSend(v570, "numberWithDouble:");
        v571 = (void *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v569, @"timeSinceBoot", v571);

        [v1196 machAbsTimeSeconds];
        if (v572 == 0.0)
        {
LABEL_544:
          if (v554 >= 0.0)
          {
            if (v554 == 0.0 || ([v1177 wallTime], v582 - v554 <= 0.0))
            {
              if ((v1208 & 1) != 0) {
                goto LABEL_562;
              }
            }

            else
            {
              v583 = *p_isa;
              if (v1208)
              {
                v584 = (void *)MEMORY[0x189607968];
                [v1177 wallTime];
                [v584 numberWithDouble:v585 - v554];
                v586 = (void *)objc_claimAutoreleasedReturnValue();
                SAJSONWriteDictionaryEntry(v583, @"timeSinceWake", v586);

                goto LABEL_562;
              }

              [v1177 wallTime];
              objc_msgSend(v583, "printWithFormat:", @"%-*s%.0fs\n", 18, "Time Since Wake: ", v594 - v554);
            }
          }

          else
          {
            v581 = *p_isa;
            if (v1208)
            {
              SAJSONWriteDictionaryEntry(v581, @"timeSinceWake", @"n/a");
              goto LABEL_562;
            }

            objc_msgSend(v581, "printWithFormat:", @"%-*sn/a (machine hasn't slept)\n", 18, "Time Since Wake: ");
          }

          [*p_isa appendString:@"\n"];
          goto LABEL_562;
        }

LABEL_523:
                  if ((a8 & 1) == 0)
                  {
                    if ((_DWORD)a7) {
                      goto LABEL_634;
                    }
                    if (*(void *)(v204 + 360) == 1LL) {
                      goto LABEL_637;
                    }
                    if ((_DWORD)v252)
                    {
                      v264 = v243;
                      v265 = 0;
                      v252 = v252;
                      do
                      {
                        v508[0] = MEMORY[0x1895F87A8];
                        v508[1] = v15;
                        v508[2] = __264__SASampleStore__parseKCDataTaskContainer_timestampOfSample_sampleIndex_sharedCaches_frameIterator_primaryDataIsKPerf_addStaticInfoOnly_taskUniquePidsInThisSample_taskPidsInThisSample_importanceDonations_rPidForJetsamCoalitionId_port_label_info_array_exclaveInfo___block_invoke_275;
                        v508[3] = &unk_189F617B0;
                        v508[4] = v204;
                        v514 = v480;
                        v520 = (int)v21;
                        v521 = HIDWORD(v470);
                        v515 = v492;
                        v516 = a13;
                        v522 = v470;
                        v517 = a14;
                        v518 = v495;
                        v509 = v493;
                        v510 = v22;
                        v519 = a4;
                        v511 = v23;
                        v512 = v477;
                        v523 = (char)v471;
                        v513 = v494;
                        __264__SASampleStore__parseKCDataTaskContainer_timestampOfSample_sampleIndex_sharedCaches_frameIterator_primaryDataIsKPerf_addStaticInfoOnly_taskUniquePidsInThisSample_taskPidsInThisSample_importanceDonations_rPidForJetsamCoalitionId_port_label_info_array_exclaveInfo___block_invoke_275( (uint64_t)v508,  v266,  (uint64_t *)(v264 + v265));

                        v265 += v21;
                        --v252;
                      }

                      while (v252);
                    }
                  }

                  goto LABEL_539;
                }

                if ((_DWORD)v251) {
                  goto LABEL_544;
                }
                v253 = HIDWORD(v252);
                if (v239 == 17) {
                  goto LABEL_518;
                }
                goto LABEL_494;
              }

              if ((v20 & 1) != 0)
              {
                v224 = -[SATaskState correspondsToKCDataTransitioningTask:terminatedThreadsInstructionCycles:machTimebase:donatingUniquePids:]( (uint64_t)self,  __src,  v474,  v217,  v216);

                if (v224)
                {
LABEL_422:
                  objc_setProperty_atomic(self, v220, newValue, 40LL);
                  self[7] = a4;
                  uint64_t v20 = (unint64_t)v489;
                  v204 = v481;
                  goto LABEL_427;
                }

LABEL_420:
                objc_msgSend(MEMORY[0x189607968], "numberWithInt:", objc_msgSend(v23, "pid"));
                v221 = (void *)objc_claimAutoreleasedReturnValue();
                [v485 objectForKeyedSubscript:v221];
                v222 = (void *)objc_claimAutoreleasedReturnValue();
                v204 = v481;
                v223 = +[SATaskState stateWithKCDataTransitioningTask:terminatedThreadsInstructionCycles:machTimebase:donatingUniquePids:startTimestamp:endTimestamp:startSampleIndex:endSampleIndex:]( (uint64_t)&OBJC_CLASS___SATaskState,  __src,  (uint64_t)v474,  *(void *)(v481 + 184),  v222,  newValue,  newValue,  a4,  a4);
                goto LABEL_424;
              }

              v225 = -[SATaskState correspondsToKCDataDeltaTask:terminatedThreadsInstructionCycles:machTimebase:donatingUniquePids:]( (uint64_t)self,  v187,  v474,  v217,  v216);

              if ((v225 & 1) != 0) {
                goto LABEL_422;
              }
            }

            else
            {
              uint64_t v19 = v177;
              if (v165) {
                goto LABEL_415;
              }
              if ((v20 & 1) != 0) {
                goto LABEL_420;
              }
            }

            objc_msgSend(MEMORY[0x189607968], "numberWithInt:", objc_msgSend(v23, "pid"));
            v221 = (void *)objc_claimAutoreleasedReturnValue();
            [v485 objectForKeyedSubscript:v221];
            v222 = (void *)objc_claimAutoreleasedReturnValue();
            v204 = v481;
            v223 = +[SATaskState stateWithKCDataDeltaTask:terminatedThreadsInstructionCycles:machTimebase:donatingUniquePids:startTimestamp:endTimestamp:startSampleIndex:endSampleIndex:]( (uint64_t)&OBJC_CLASS___SATaskState,  v187,  v474,  *(void *)(v481 + 184),  v222,  newValue,  newValue,  a4,  a4);
            goto LABEL_424;
          }

          if (!*(_BYTE *)(v481 + 222) && !*(_BYTE *)(v481 + 223))
          {

            if (v23) {
              goto LABEL_400;
            }
            goto LABEL_374;
          }

LABEL_372:
        }

        goto LABEL_374;
      }

      break;
    }

    -[SASampleStore sharedCacheWithUUID:slide:slidBaseAddress:](v481, (uint64_t)&v536 + 8, v536, v538);
    v449 = (id)objc_claimAutoreleasedReturnValue();
    v181 = 0;
    v182 = v471;
LABEL_333:
    uint64_t v19 = (unint64_t)context;
    goto LABEL_334;
  }

LABEL_210:
  v471 = v47;
  v474 = v45;
  v495 = v46;
LABEL_8:
  LODWORD(v20) = v30 == 0LL;
  uint64_t v36 = v21 == 0LL;
  unsigned int v37 = (int)context;
  if (context)
  {
LABEL_9:
    uint64_t v20 = (unint64_t)v489;
    unsigned int v38 = v490;
    unsigned int v39 = v491;
    goto LABEL_10;
  }

LABEL_225:
  if ((_DWORD)v20)
  {
    if (v36)
    {
      if (!v37) {
        goto LABEL_9;
      }
      v131 = 0LL;
      v130 = 0LL;
      v129 = 0xFFFFFFFFLL;
      v133 = 1;
      v132 = -1LL;
    }

    else
    {
      if (*((_BYTE *)v21 + 28)) {
        v130 = (char *)v21 + 28;
      }
      else {
        v130 = 0LL;
      }
      if ((v37 & 1) == 0) {
        goto LABEL_9;
      }
      v133 = 0;
      v129 = *((unsigned int *)v21 + 6);
      v132 = *v21;
      v131 = v21[1];
    }
  }

  else
  {
    v132 = *v30;
    if (v36)
    {
      if ((v37 & 1) == 0) {
        goto LABEL_9;
      }
      v130 = 0LL;
      v131 = v30[1];
      v129 = 0xFFFFFFFFLL;
      v133 = 1;
    }

    else
    {
      if (*((_BYTE *)v21 + 28)) {
        v130 = (char *)v21 + 28;
      }
      else {
        v130 = 0LL;
      }
      if ((v37 & 1) == 0) {
        goto LABEL_9;
      }
      v133 = 0;
      v129 = *((unsigned int *)v21 + 6);
      v131 = v30[1];
    }
  }

  if ((_DWORD)a7)
  {
    v123 = *__error();
    _sa_logt();
    v134 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v124 = v134;
    if (v133)
    {
      uint64_t v20 = (unint64_t)v489;
      if (os_log_type_enabled(v134, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(void *)&uint8_t buf[4] = v467;
        _os_log_error_impl( &dword_186C92000,  v124,  OS_LOG_TYPE_ERROR,  "no task_struct for task container %llu when primary data is kperf",  buf,  0xCu);
      }
    }

    else
    {
      uint64_t v20 = (unint64_t)v489;
      if (os_log_type_enabled(v134, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134217984;
        *(void *)&uint8_t buf[4] = v467;
        _os_log_debug_impl( &dword_186C92000,  v124,  OS_LOG_TYPE_DEBUG,  "Only transitioning task task container %llu when primary data is kperf",  buf,  0xCu);
      }
    }

    goto LABEL_293;
  }

  context = 0LL;
  v128 = 1;
LABEL_247:
  LODWORD(v463) = v129;
  if ((int)v129 < -1 || v132 <= -2)
  {
    v145 = v130;
    v123 = *__error();
    _sa_logt();
    v124 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v124, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = v145;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = (_DWORD)v463;
      *(_WORD *)&buf[18] = 2048;
      *(void *)&buf[20] = v132;
      _os_log_debug_impl( &dword_186C92000,  v124,  OS_LOG_TYPE_DEBUG,  "Ignoring task with negative pid %s [%d] unique pid %llu",  buf,  0x1Cu);
    }

    goto LABEL_292;
  }

  __s1 = v130;
  v450 = v131;
  if (v21 && v132 == -1)
  {
    v459 = v23;
    if ((_DWORD)v129 == -1)
    {
      v132 = --_parseKCDataTaskContainer_timestampOfSample_sampleIndex_sharedCaches_frameIterator_primaryDataIsKPerf_addStaticInfoOnly_taskUniquePidsInThisSample_taskPidsInThisSample_importanceDonations_rPidForJetsamCoalitionId_port_label_info_array_exclaveInfo__next_fake_unique_pid;
      v146 = *__error();
      _sa_logt();
      v147 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v147, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = __s1;
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v132;
        _os_log_impl( &dword_186C92000,  v147,  OS_LOG_TYPE_DEFAULT,  "WARNING: transitioning task %s with no uniquepid and no pid, faking uniquepid:%llu",  buf,  0x16u);
      }

      *__error() = v146;
      v129 = v463;
    }

    else
    {
      __srca = v21;
      v458 = v30;
      objc_msgSend(a1, "tasksByPid", v31, v32, p_info, v34, v35);
      v135 = (void *)objc_claimAutoreleasedReturnValue();
      [MEMORY[0x189607968] numberWithInt:v129];
      v136 = v129;
      v137 = (void *)objc_claimAutoreleasedReturnValue();
      [v135 objectForKeyedSubscript:v137];
      v138 = (void *)objc_claimAutoreleasedReturnValue();

      v448 = v138;
      [v138 lastObject];
      v139 = (void *)objc_claimAutoreleasedReturnValue();
      v140 = v139;
      if (v139)
      {
        v132 = [v139 uniquePid];
        v141 = *__error();
        _sa_logt();
        v142 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v143 = v140;
        if (os_log_type_enabled(v142, OS_LOG_TYPE_INFO))
        {
          [v140 debugDescription];
          v144 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = __s1;
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v144;
          *(_WORD *)&buf[22] = 2048;
          *(void *)&buf[24] = v132;
          _os_log_impl( &dword_186C92000,  v142,  OS_LOG_TYPE_INFO,  "transitioning task %s with no uniquepid, assuming it's the predecessor with matching pid %@: using uniquepid %llu",  buf,  0x20u);
        }

        v129 = v463;
      }

      else
      {
        v143 = 0LL;
        v132 = v136 + 10000000000LL;
        v444 = *__error();
        _sa_logt();
        v142 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v129 = v136;
        if (os_log_type_enabled(v142, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = __s1;
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = v136 + 10000000000LL;
          _os_log_impl( &dword_186C92000,  v142,  OS_LOG_TYPE_DEFAULT,  "WARNING: transitioning task %s with no uniquepid and no predecessor task, faking uniquepid %llu",  buf,  0x16u);
        }

        v141 = v444;
      }

      *__error() = v141;
      uint64_t v21 = __srca;
      int v30 = v458;
    }

    uint64_t v23 = v459;
    if (__dst != v21) {
      memmove(__dst, v21, 0x3CuLL);
    }
    __dst[0] = v132;
    uint64_t v21 = __dst;
  }

  if ((a7 & 1) != 0 || v132 != -1)
  {
    __src = (uint64_t)v21;
    v455 = v30;
    if ((_DWORD)a7)
    {
      uint64_t v21 = v23;
      objc_msgSend(MEMORY[0x189607968], "numberWithInt:", v129, v32, p_info, v34, v35);
      v152 = (void *)objc_claimAutoreleasedReturnValue();
      v153 = [v487 containsObject:v152];

      if ((v153 & 1) == 0)
      {
        if ((_DWORD)v463) {
          v154 = v132 == 0;
        }
        else {
          v154 = 1;
        }
        v155 = v154;
        objc_msgSend(MEMORY[0x189607968], "numberWithInt:");
        v156 = (void *)objc_claimAutoreleasedReturnValue();
        [v487 addObject:v156];

        if (v128)
        {
          v321 = *__error();
          _sa_logt();
          v322 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v322, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl( &dword_186C92000,  v322,  OS_LOG_TYPE_ERROR,  "no task_struct when backfilling kperf",  buf,  2u);
          }

          *__error() = v321;
          _SASetCrashLogMessage(4337, "no task_struct when backfilling kperf", v323, v324, v325, v326, v327, v328, v439);
          _os_crash();
          __break(1u);
        }

        else
        {
          if (buf != context) {
            memmove(buf, context, 0x78uLL);
          }
          LODWORD(v443) = v155;
          uint64_t v19 = *(void *)&buf[8] & 0x1FFCFF0C40LL;
          *(void *)buf = -1LL;
          *(void *)&buf[8] &= 0x1FFCFF0C40uLL;
          v545 = 0;
          v546 = 0;
          if (!v474)
          {
            v157 = v477;
            uint64_t v23 = v468;
            if (!v485)
            {
              [(id)v481 osProductName];
              v158 = (void *)objc_claimAutoreleasedReturnValue();
              v159 = [v158 isEqualToString:@"Mac OS X"];

              if (v159)
              {
                [(id)v481 osBuildVersion];
                v160 = (void *)objc_claimAutoreleasedReturnValue();
                v161 = v160;
                v162 = @"18A230";
              }

              else
              {
                [(id)v481 osProductName];
                v169 = (void *)objc_claimAutoreleasedReturnValue();
                v170 = [v169 isEqualToString:@"iPhone OS"];

                if (v170)
                {
                  [(id)v481 osBuildVersion];
                  v160 = (void *)objc_claimAutoreleasedReturnValue();
                  v161 = v160;
                  v162 = @"16A230";
                }

                else
                {
                  [(id)v481 osProductName];
                  v171 = (void *)objc_claimAutoreleasedReturnValue();
                  v172 = [v171 isEqualToString:@"Watch OS"];

                  if (v172)
                  {
                    [(id)v481 osBuildVersion];
                    v160 = (void *)objc_claimAutoreleasedReturnValue();
                    v161 = v160;
                    v162 = @"16R230";
                  }

                  else
                  {
                    [(id)v481 osProductName];
                    v173 = (void *)objc_claimAutoreleasedReturnValue();
                    v174 = [v173 isEqualToString:@"Apple TVOS"];

                    if (!v174)
                    {
LABEL_316:
                      v165 = buf;
                      goto LABEL_317;
                    }

                    [(id)v481 osBuildVersion];
                    v160 = (void *)objc_claimAutoreleasedReturnValue();
                    v161 = v160;
                    v162 = @"16J230";
                  }
                }
              }

              v175 = [v160 compare:v162 options:65];

              if (v175 == -1)
              {
                v543 = 0LL;
                v544 = 0LL;
              }

              goto LABEL_316;
            }

LABEL_619:
            v337 = *__error();
            _sa_logt();
            v338 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v338, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)v534 = 0;
              _os_log_error_impl( &dword_186C92000,  v338,  OS_LOG_TYPE_ERROR,  "importanceDonations non-NULL when primary data is kperf",  v534,  2u);
            }

            *__error() = v337;
            _SASetCrashLogMessage( 4353,  "importanceDonations non-NULL when primary data is kperf",  v339,  v340,  v341,  v342,  v343,  v344,  v439);
            _os_crash();
            __break(1u);
            goto LABEL_622;
          }
        }

        v329 = *__error();
        _sa_logt();
        v330 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v330, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v534 = 0;
          _os_log_error_impl( &dword_186C92000,  v330,  OS_LOG_TYPE_ERROR,  "taskTerminatedThreadsInstructionCycles non-NULL when primary data is kperf",  v534,  2u);
        }

        *__error() = v329;
        _SASetCrashLogMessage( 4352,  "taskTerminatedThreadsInstructionCycles non-NULL when primary data is kperf",  v331,  v332,  v333,  v334,  v335,  v336,  v439);
        _os_crash();
        __break(1u);
        goto LABEL_619;
      }
    }

    else
    {
      objc_msgSend(MEMORY[0x189607968], "numberWithUnsignedLongLong:", v132, v32, p_info, v34, v35);
      v163 = (void *)objc_claimAutoreleasedReturnValue();
      uint64_t v21 = v23;
      v164 = [v23 containsObject:v163];

      v165 = context;
      if (!v164)
      {
        if ((_DWORD)v463) {
          v166 = v132 == 0;
        }
        else {
          v166 = 1;
        }
        v167 = v166;
        LODWORD(v443) = v167;
        [MEMORY[0x189607968] numberWithUnsignedLongLong:v132];
        v168 = (void *)objc_claimAutoreleasedReturnValue();
        [v21 addObject:v168];

        uint64_t v19 = v450;
        v157 = v477;
        uint64_t v23 = v468;
LABEL_317:
        v477 = v157;
        if (__s1)
        {
          if (!strcmp(__s1, "unknown"))
          {
            if (!v165)
            {
              if (!__src) {
                goto LABEL_640;
              }
              v176 = (id *)v21;
              v177 = v443;
              if (__dst != (void *)__src) {
                memmove(__dst, (const void *)__src, 0x3CuLL);
              }
              v165 = 0LL;
              __s1 = 0LL;
              v541 = 0u;
              v540 = 0u;
              __src = (uint64_t)__dst;
LABEL_326:
              v528[0] = MEMORY[0x1895F87A8];
              unsigned int v15 = 3221225472LL;
              v528[1] = 3221225472LL;
              v528[2] = __264__SASampleStore__parseKCDataTaskContainer_timestampOfSample_sampleIndex_sharedCaches_frameIterator_primaryDataIsKPerf_addStaticInfoOnly_taskUniquePidsInThisSample_taskPidsInThisSample_importanceDonations_rPidForJetsamCoalitionId_port_label_info_array_exclaveInfo___block_invoke;
              v528[3] = &__block_descriptor_33_e38_B24__0__dyld_uuid_info_64_Q_16C__8_I16l;
              v529 = v177;
              v178 = MEMORY[0x186E47C94](v528);
              LOBYTE(v443) = (*(uint64_t (**)(uint64_t, os_log_s *, char *))(v178 + 16))( v178,  v491,  (char *)&v530 + 4);
              v442 = (void *)v178;
              LOBYTE(v21) = (*(uint64_t (**)(uint64_t, os_log_s *, uint64_t *))(v178 + 16))(v178, v490, &v530);
              if ((_DWORD)v23)
              {
                if (!v22) {
                  goto LABEL_595;
                }
                mergesort_b(v22, v23, 0x38uLL, &__block_literal_global_267);
              }

              context = (_BYTE *)v19;
              if (*(void *)(v481 + 192))
              {
                v459 = v176;
                if (!(_DWORD)self) {
                  goto LABEL_600;
                }
                uint64_t v19 = v177;
                objc_msgSend(MEMORY[0x189607968], "numberWithUnsignedInt:");
                v179 = (void *)objc_claimAutoreleasedReturnValue();
                v180 = [v484 objectForKeyedSubscript:v179];

                v449 = (id)v180;
                if (v180)
                {
                  v181 = 0;
                  v182 = v471;
                  v177 = v19;
                  goto LABEL_333;
                }

LABEL_598:
                v66 = *__error();
                _sa_logt();
                uint64_t v23 = (id *)objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled((os_log_t)v23, OS_LOG_TYPE_FAULT)) {
                  goto LABEL_658;
                }
                goto LABEL_599;
              }

              v304 = *__error();
              _sa_logt();
              v305 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v305, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)v534 = 0;
                _os_log_error_impl( &dword_186C92000,  v305,  OS_LOG_TYPE_ERROR,  "Unknown system architecture when parsing task",  v534,  2u);
              }

              *__error() = v304;
              _SASetCrashLogMessage( 4473,  "Unknown system architecture when parsing task",  v306,  v307,  v308,  v309,  v310,  v311,  v439);
              _os_crash();
              __break(1u);
LABEL_595:
              v312 = *__error();
              _sa_logt();
              v165 = (_BYTE *)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled((os_log_t)v165, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)v534 = 67109120;
                *(_DWORD *)v535 = (_DWORD)v468;
                _os_log_error_impl( &dword_186C92000,  (os_log_t)v165,  OS_LOG_TYPE_ERROR,  "%d aot infos, but NULL array",  v534,  8u);
              }

              *__error() = v312;
              _SASetCrashLogMessage( 4457,  "%d aot infos, but NULL array",  v313,  v314,  v315,  v316,  v317,  v318,  (char)v468);
              _os_crash();
              __break(1u);
              goto LABEL_598;
            }

            if (buf != v165) {
              memmove(buf, v165, 0x78uLL);
            }
            v176 = (id *)v21;
            __s1 = 0LL;
            v548 = 0u;
            v547 = 0u;
            v165 = buf;
          }

          else
          {
            v176 = (id *)v21;
          }
        }

        else
        {
          v176 = (id *)v21;
          __s1 = 0LL;
        }

        v177 = v443;
        goto LABEL_326;
      }
    }

    v123 = *__error();
    _sa_logt();
    v124 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v124, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = __s1;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v132;
      _os_log_error_impl( &dword_186C92000,  v124,  OS_LOG_TYPE_ERROR,  "Already saw task %s unique pid %llu in this stackshot, ignoring second container",  buf,  0x16u);
    }

    uint64_t v20 = (unint64_t)v489;
    uint64_t v23 = (id *)v21;
LABEL_293:
    unsigned int v38 = v490;
    unsigned int v39 = v491;
    goto LABEL_294;
  }

  v123 = *__error();
  _sa_logt();
  v124 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v148 = os_log_type_enabled(v124, OS_LOG_TYPE_ERROR);
  if ((v128 & 1) == 0)
  {
    if (v148)
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = __s1;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = (_DWORD)v463;
      *(_WORD *)&buf[18] = 2048;
      *(void *)&buf[20] = v467;
      v125 = "No uniquepid for task %s [%d] in task container %llu";
      v126 = v124;
      v127 = 28;
LABEL_402:
      _os_log_error_impl(&dword_186C92000, v126, OS_LOG_TYPE_ERROR, v125, buf, v127);
    }

LABEL_292:
    uint64_t v20 = (unint64_t)v489;
    goto LABEL_293;
  }

  if ((v20 & 1) != 0)
  {
    unsigned int v38 = v490;
    unsigned int v39 = v491;
    if (v148)
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = __s1;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = (_DWORD)v463;
      *(_WORD *)&buf[18] = 2048;
      *(void *)&buf[20] = v467;
      v149 = "No uniquepid for transitioning task %s [%d] in task container %llu";
      v150 = v124;
      v151 = 28;
      goto LABEL_585;
    }
  }

  else
  {
    unsigned int v38 = v490;
    unsigned int v39 = v491;
    if (v148)
    {
      *(_DWORD *)buf = 134217984;
      *(void *)&uint8_t buf[4] = v467;
      v149 = "No uniquepid for delta task in task container %llu";
      v150 = v124;
      v151 = 12;
LABEL_585:
      _os_log_error_impl(&dword_186C92000, v150, OS_LOG_TYPE_ERROR, v149, buf, v151);
    }
  }

  uint64_t v20 = (unint64_t)v489;
LABEL_294:

  *__error() = v123;
LABEL_10:
  if (v492) {
    free(v492);
  }
  if (v495) {
    free(v495);
  }
  if (v39) {
    free(v39);
  }
  if (v38) {
    free(v38);
  }
  if (v22) {
    free(v22);
  }
  [(id)v20 clearTaskData];
  unsigned int v40 = SkipToContainerEnd((int **)a2, 1);
  int v22 = newValue;
LABEL_21:

  return v40;
}

LABEL_29:
          [MEMORY[0x189607968] numberWithUnsignedInt:v3[10]];
          uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue();
          unsigned int v9 = [v10 objectForKeyedSubscript:v27];

          a2 = (unsigned int **)(v3 + 2);
          if (v9)
          {
            if (([(id)v9 matchesUUID:v3 + 2 slide:*(void *)v3 slidBaseAddress:*((void *)v3 + 4)] & 1) == 0)
            {
              double v4 = *__error();
              uint64_t v28 = _sa_logt();
              if (os_log_type_enabled((os_log_t)v28, OS_LOG_TYPE_FAULT)) {
                goto LABEL_55;
              }
              goto LABEL_32;
            }
          }

          else
          {
            uint64_t v31 = -[SASampleStore sharedCacheWithUUID:slide:slidBaseAddress:]( a1,  (uint64_t)(v3 + 2),  *(void *)v3,  *((void *)v3 + 4));
            unsigned int v9 = v31;
            if (v31)
            {
              *(_DWORD *)(v31 + 2_Block_object_dispose((const void *)(v1 - 192), 8) = v3[11];
              *(_DWORD *)(v31 + 32) = v3[10];
            }

            [MEMORY[0x189607968] numberWithUnsignedInt:v3[10]];
            int v32 = (void *)objc_claimAutoreleasedReturnValue();
            [v10 setObject:v9 forKeyedSubscript:v32];
          }

          if ((v3[11] & 1) != 0) {
            objc_storeStrong((id *)(a1 + 1024), (id)v9);
          }
          goto LABEL_42;
        default:
          objc_autoreleasePoolPop(v16);
          break;
      }

      BOOL v11 = a2[1];
      int v26 = (char *)*a2 + (*a2)[1];
      uint64_t v14 = v26 + 16;
      *a2 = (unsigned int *)(v26 + 16);
      unsigned int v15 = v26 + 32;
    }
  }

  uint64_t v28 = *__error();
  _sa_logt();
  unsigned int v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled((os_log_t)v10, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)v49 = v9;
    _os_log_error_impl(&dword_186C92000, (os_log_t)v10, OS_LOG_TYPE_ERROR, "bad container type %u", buf, 8u);
  }

  *__error() = v28;
  _SASetCrashLogMessage(5645, "bad container type %u", v37, v38, v39, v40, v41, v42, v9);
  _os_crash();
  __break(1u);
LABEL_55:
  int v43 = *((void *)v3 + 4);
  uint64_t v44 = *(void *)v3;
  unsigned int v46 = v3[10];
  v45 = v3[11];
  [(id)v9 debugDescription];
  uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 67110658;
  *(_DWORD *)v49 = v46;
  *(_WORD *)&v49[4] = 1040;
  *(_DWORD *)&v49[6] = 16;
  *(_WORD *)v50 = 2096;
  *(void *)&v50[2] = a2;
  v51 = 2048;
  v52 = v43;
  v53 = 2048;
  v54 = v44;
  v55 = 1024;
  v56 = v45;
  v57 = 2114;
  v58 = v47;
  _os_log_fault_impl( &dword_186C92000,  (os_log_t)v28,  OS_LOG_TYPE_FAULT,  "Shared cache info id %d: %{uuid_t}.16P slid base address 0x%llx, slide 0x%llx, flags 0x%x doesn't match existing %{public}@",  buf,  0x3Cu);

LABEL_32:
  *__error() = v4;
LABEL_42:

  int v25 = 0LL;
LABEL_48:

  return v25;
}

  _Block_object_dispose(&buf, 8);
LABEL_30:
}
}

uint64_t SkipToContainerEnd(int **a1, int a2)
{
  uint64_t v41 = *MEMORY[0x1895F89C0];
  CFTypeID v3 = *a1;
  unint64_t v4 = (unint64_t)a1[1];
  unint64_t v5 = (unint64_t)(*a1 + 4);
  if (v5 > v4
    || (uint64_t v6 = v3[1], v5 + v6 > v4)
    || ((int v7 = *v3, v6 >= 4) ? (v8 = v7 == 19) : (v8 = 0), !v8 || (v7 & 0xFFFFFFF0) == 0x20))
  {
    uint64_t v25 = *__error();
    _sa_logt();
    unsigned int v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_186C92000, v13, OS_LOG_TYPE_ERROR, "invalid skipped container", buf, 2u);
    }

    *__error() = v25;
    _SASetCrashLogMessage(6545, "invalid skipped container", v28, v29, v30, v31, v32, v33, v36);
    _os_crash();
    __break(1u);
LABEL_28:
    -[os_log_s firstObject](v13, "firstObject");
    uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue();
    uint64_t v35 = [v34 unsignedLongLongValue];
    *(_DWORD *)buf = 134217984;
    uint64_t v38 = v35;
    _os_log_fault_impl( &dword_186C92000,  (os_log_t)v25,  OS_LOG_TYPE_FAULT,  "Didn't find endof skipped container %llu",  buf,  0xCu);

    goto LABEL_22;
  }

  id v11 = objc_alloc(MEMORY[0x189603FA8]);
  [MEMORY[0x189607968] numberWithUnsignedLongLong:*((void *)*a1 + 1)];
  unsigned int v12 = (void *)objc_claimAutoreleasedReturnValue();
  unsigned int v13 = (os_log_s *)objc_msgSend(v11, "initWithObjects:", v12, 0);

  unint64_t v14 = (unint64_t)a1[1];
  unsigned int v15 = (char *)*a1 + (*a1)[1];
  unsigned int v16 = (unsigned int *)(v15 + 16);
  *a1 = (int *)(v15 + 16);
  unint64_t v17 = (unint64_t)(v15 + 32);
  if (v17 <= v14)
  {
    while (v17 + v16[1] <= v14 && *v16 != -242132755)
    {
      KCLogIter(v16, v14, a2);
      int v18 = *a1;
      int v19 = **a1;
      if ((v19 & 0xFFFFFFF0) == 0x20) {
        int v19 = 17;
      }
      if (v19 == 20)
      {
        uint64_t v21 = *((void *)v18 + 1);
        -[os_log_s lastObject](v13, "lastObject");
        int v22 = (void *)objc_claimAutoreleasedReturnValue();
        uint64_t v23 = [v22 unsignedLongLongValue];

        if (v23 != v21)
        {
          int v2 = *__error();
          uint64_t v25 = _sa_logt();
          if (os_log_type_enabled((os_log_t)v25, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 134218240;
            uint64_t v38 = v21;
            __int16 v39 = 2048;
            uint64_t v40 = v23;
            _os_log_fault_impl( &dword_186C92000,  (os_log_t)v25,  OS_LOG_TYPE_FAULT,  "Unexpected end container %llu (expected %llu)",  buf,  0x16u);
          }

          uint64_t v26 = 1LL;
          goto LABEL_23;
        }

        if (-[os_log_s count](v13, "count") == 1)
        {
          uint64_t v26 = 0LL;
          goto LABEL_24;
        }

        -[os_log_s removeLastObject](v13, "removeLastObject");
      }

      else if (v19 == 19)
      {
        [MEMORY[0x189607968] numberWithUnsignedLongLong:*((void *)v18 + 1)];
        uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue();
        -[os_log_s addObject:](v13, "addObject:", v20);
      }

      unint64_t v14 = (unint64_t)a1[1];
      uint64_t v24 = (char *)*a1 + (*a1)[1];
      unsigned int v16 = (unsigned int *)(v24 + 16);
      *a1 = (int *)(v24 + 16);
      unint64_t v17 = (unint64_t)(v24 + 32);
      if (v17 > v14) {
        break;
      }
    }
  }

  int v2 = *__error();
  uint64_t v25 = _sa_logt();
  if (os_log_type_enabled((os_log_t)v25, OS_LOG_TYPE_FAULT)) {
    goto LABEL_28;
  }
LABEL_22:
  uint64_t v26 = 2LL;
LABEL_23:

  *__error() = v2;
LABEL_24:

  return v26;
}

LABEL_17:
          unsigned int v12 = 0LL;
LABEL_18:
          unsigned int v13 = *(void **)(a1 + 40);
          [MEMORY[0x189607968] numberWithUnsignedLongLong:v6];
          unint64_t v14 = (void *)objc_claimAutoreleasedReturnValue();
          [v13 addObject:v14];

          unsigned int v15 = -[SASampleStore addKCDataThreadV4:threadV2:deltaThreadV3:deltaThreadV2:timestamp:sampleIndex:stack:threadExclavesInfo:threadName:dispatchQueueLabel:waitInfo:waitInfoPortLabelInfo:turnstileInfo:turnstileInfoPortLabelInfo:instructionCycles:task:kernelTask:taskIsSuspended:]( *(id **)(a1 + 32),  0LL,  0LL,  v5,  (uint64_t)a3,  *(void **)(a1 + 48),  *(void *)(a1 + 120),  0LL,  0LL,  0LL,  0LL,  v8,  v9,  v11,  v12,  0LL,  *(void **)(a1 + 56),  *(void **)(a1 + 64),  *(_BYTE *)(a1 + 140));
          if (v15)
          {
            unsigned int v16 = *(void **)(a1 + 72);
            [MEMORY[0x189607968] numberWithUnsignedLongLong:v15];
            int v19 = (id)objc_claimAutoreleasedReturnValue();
            [v16 addObject:v19];
          }

          return;
        }
      }
    }

    else
    {
LABEL_10:
      BOOL v8 = 0LL;
    }
}

        unint64_t v14 = v63;
        CFTypeID v3 = v64;
        if (v16) {
          uint64_t v23 = v16 >= v64;
        }
        else {
          uint64_t v23 = 0;
        }
        if (v23)
        {
          CFTypeID v3 = v16;
          unint64_t v14 = v13;
        }

        ++v13;
      }

      while (v13 != v62);
      if (v3)
      {
LABEL_27:
        if (v14 != 0x7FFFFFFFFFFFFFFFLL)
        {
          objc_msgSend(v8, "removeObjectsInRange:", v14, v62 - v14);
          objc_msgSend(v5, "subarrayWithRange:", 1, v65 - 1);
          uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue();
          [v8 addObjectsFromArray:v25];

          uint64_t v26 = v8;
LABEL_41:
          uint64_t v28 = v26;

          goto LABEL_42;
        }

  return (SAThreadState *)v20;
}

    *(_BYTE *)(v4 + 15) |= 0x40u;
    uint64_t v6 = *(void *)(a2 + 115);
    if ((v6 & 0x10) == 0) {
      goto LABEL_38;
    }
    goto LABEL_18;
  }

  if (*(void *)a2 == 287528984LL)
  {
    v3->_voucherIdentifier = *(void *)(a2 + 56);
    v3->_userTimeInNs = *(void *)(a2 + 64);
    v3->_systemTimeInNs = *(void *)(a2 + 72);
    v3->_state = *(_DWORD *)(a2 + 80);
    -[SAThreadState setBasePriority:]((int *)v3, *(__int16 *)(a2 + 88));
    -[SAThreadState setScheduledPriority:]((int *)v4, *(__int16 *)(a2 + 90));
    *(_DWORD *)(v4 + 36) = *(_DWORD *)(a2 + 84);
    *(_BYTE *)(v4 + 24) = *(_BYTE *)(a2 + 98);
    -[SAThreadState setThreadQos:](v4, *(unsigned __int8 *)(a2 + 92));
    -[SAThreadState setThreadRequestedQos:](v4, *(unsigned __int8 *)(a2 + 93));
    -[SAThreadState setThreadRequestedQosOverride:](v4, *(unsigned __int8 *)(a2 + 94));
    -[SAThreadState setThreadQosPromote:](v4, *(unsigned __int8 *)(a2 + 95));
    uint64_t v6 = *(void *)(a2 + 99);
    if ((v6 & 1) != 0)
    {
      *(_BYTE *)(v4 + 11) |= 0x40u;
      uint64_t v6 = *(void *)(a2 + 99);
      if ((v6 & 2) == 0)
      {
LABEL_12:
        if ((v6 & 4) == 0) {
          goto LABEL_13;
        }
        goto LABEL_27;
      }
    }

    else if ((v6 & 2) == 0)
    {
      goto LABEL_12;
    }

    *(_BYTE *)(v4 + 11) |= 0x80u;
    uint64_t v6 = *(void *)(a2 + 99);
    if ((v6 & 4) == 0)
    {
LABEL_13:
      if ((v6 & 0x10) == 0) {
        goto LABEL_38;
      }
LABEL_28:
      *(_BYTE *)(v4 + 15) |= 0x80u;
      uint64_t v6 = *(void *)(a2 + 99);
      goto LABEL_38;
    }

  return 1LL;
}

      unsigned int v13 = 0LL;
      *__error() = v7;
      goto LABEL_18;
    }
  }

  else
  {
    block[0] = MEMORY[0x1895F87A8];
    block[1] = 3221225472LL;
    block[2] = __CopyDyldSnapshotForPid_block_invoke;
    block[3] = &unk_189F63610;
    unint64_t v17 = a1;
    block[4] = &v19;
    block[5] = &v23;
    unsigned int v9 = (void (**)(void))dispatch_block_create_with_qos_class( DISPATCH_BLOCK_ENFORCE_QOS_CLASS,  QOS_CLASS_USER_INTERACTIVE,  0,  block);
    v9[2]();
    unsigned int v10 = v20[3] == 0;

    if (v10)
    {
LABEL_14:
      unsigned int v13 = 0LL;
      goto LABEL_18;
    }
  }

  ++_MergedGlobals_8;
  *(double *)&qword_18C4B16C0 = v24[3] + *(double *)&qword_18C4B16C0;
  id v11 = *__error();
  _sa_logt();
  unsigned int v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v15 = *((void *)v24 + 3);
    *(_DWORD *)buf = 67110144;
    uint64_t v28 = a1;
    uint64_t v29 = 2048;
    uint64_t v30 = v15;
    uint64_t v31 = 1024;
    uint64_t v32 = _MergedGlobals_8;
    uint64_t v33 = 2048;
    uint64_t v34 = qword_18C4B16C0;
    uint64_t v35 = 2048;
    char v36 = *(double *)&qword_18C4B16C0 / (double)_MergedGlobals_8;
    _os_log_debug_impl( &dword_186C92000,  v12,  OS_LOG_TYPE_DEBUG,  "[%d]: Inspected live process via dyld introspection in %fs (%d totaling %fs, %fs avg)",  buf,  0x2Cu);
  }

  *__error() = v11;
  unsigned int v13 = v20[3];
LABEL_18:
  _Block_object_dispose(&v19, 8);
  _Block_object_dispose(&v23, 8);
  return v13;
}

  return v17;
}
  }
}

    *__error() = v11;
    fclose(v8);
    return 0LL;
  }

  uint64_t v29 = v20;
  fclose(v8);
  st_size = v63.st_size;
  if (v10 >= v63.st_size)
  {
    uint64_t v34 = v10;
    goto LABEL_62;
  }

  uint64_t v31 = 0;
  uint64_t v32 = 0LL;
  uint64_t v33 = 1;
  uint64_t v34 = v10;
  uint64_t v35 = v10;
  char v36 = v10;
  while (2)
  {
    unsigned int v37 = v36 - v35;
    if (v32 && v37 > v32)
    {
      uint64_t v40 = *__error();
      _sa_logt();
      uint64_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_57;
      }
      v61 = 134217984;
      *(void *)v62 = v36;
      v42 = "Found bad line length at %lld, ending scan";
      int v43 = v41;
      uint64_t v44 = 12;
      goto LABEL_56;
    }

    uint64_t v38 = (char)v29[v36];
    if ((v31 & 1) == 0)
    {
      if (((v38 & 0xDF) - 65) < 0x1Au
        || (v38 != 43 ? (__int16 v39 = (v38 - 47) >= 0xBu) : (__int16 v39 = 0), !v39))
      {
        uint64_t v31 = 0;
        goto LABEL_47;
      }
    }

    if (v38 == 61)
    {
      uint64_t v31 = 1;
      goto LABEL_47;
    }

    if (v29[v36] != 10)
    {
      uint64_t v40 = *__error();
      _sa_logt();
      uint64_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_57;
      }
      v61 = 67109376;
      *(_DWORD *)v62 = v38;
      *(_WORD *)&v62[4] = 2048;
      *(void *)&v62[6] = v36;
      v42 = "Found invalid base64 character '%c' at %lld, ending scan";
      int v43 = v41;
      uint64_t v44 = 18;
LABEL_56:
      _os_log_debug_impl(&dword_186C92000, v43, OS_LOG_TYPE_DEBUG, v42, (uint8_t *)&v61, v44);
LABEL_57:

      *__error() = v40;
      if (!v33)
      {
        st_size = v63.st_size;
        goto LABEL_62;
      }

      goto LABEL_61;
    }

    uint64_t v35 = v36 + 1;
    if (v32)
    {
      if (v37 != v32) {
        goto LABEL_60;
      }
    }

    else
    {
      uint64_t v32 = v37;
    }

    if ((v31 & 1) == 0)
    {
      uint64_t v31 = 0;
      uint64_t v34 = v36 + 1;
LABEL_47:
      uint64_t v33 = ++v36 < v63.st_size;
      if (v63.st_size == v36) {
        goto LABEL_60;
      }
      continue;
    }

    break;
  }

  uint64_t v35 = v36 + 1;
  uint64_t v34 = v36 + 1;
LABEL_60:
  if (!v33) {
    goto LABEL_62;
  }
LABEL_61:
  st_size = v35;
LABEL_62:
  v45 = [objc_alloc(MEMORY[0x189603F48]) initWithBytesNoCopy:&v29[v10] length:st_size - v10 freeWhenDone:0];
  if (!v45)
  {
    v49 = *__error();
    _sa_logt();
    v50 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v61) = 0;
LABEL_84:
      _os_log_error_impl( &dword_186C92000,  v50,  OS_LOG_TYPE_ERROR,  "Unable to create NSData for base64 binary format",  (uint8_t *)&v61,  2u);
    }

    uint64_t v44 = a2[6];
    v45 = (void *)objc_opt_class();
    unsigned int v46 = _SASerializableInstanceForIndexUsingDeserializationDictionaryAndDataBufferDictionaryAndClass(v44, v52, v7, v45, 0);
    uint64_t v47 = (void *)a1[5];
    a1[5] = v46;
  }
}

LABEL_293:
        v176 = 0LL;
        v177 = v30;
        if (a16)
        {
          v178 = a17;
          v179 = 0LL;
          if (a17)
          {
            v176 = a16;
            while (*(void *)v176 != v115)
            {
              v176 += 28LL;
              if (!--v178)
              {
                v176 = 0LL;
LABEL_307:
                v179 = 0LL;
                goto LABEL_309;
              }
            }

            v180 = *(__int16 *)(v176 + 26);
            if (!*(_WORD *)(v176 + 26)) {
              goto LABEL_307;
            }
            if (v169)
            {
              v181 = v169;
              v179 = v168;
              while (*(unsigned __int16 *)*v179 != (unsigned __int16)v180)
              {
                v179 += 2;
                if (!--v181) {
                  goto LABEL_304;
                }
              }
            }

            else
            {
LABEL_304:
              v182 = *__error();
              _sa_logt();
              v183 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v183, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)v237 = 67109120;
                v238 = v180;
                _os_log_error_impl(&dword_186C92000, v183, OS_LOG_TYPE_ERROR, "No port label info for id %d", v237, 8u);
              }

              v179 = 0LL;
              *__error() = v182;
            }
          }
        }

        else
        {
          v179 = 0LL;
        }

LABEL_309:
        [MEMORY[0x189607968] numberWithUnsignedLongLong:v115];
        v184 = (void *)objc_claimAutoreleasedReturnValue();
        [v223 addObject:v184];

        a1 = v234;
        v212 = v167;
        v141 = v226;
        v185 = v42;
        uint64_t v28 = v228;
        v186 = -[SASampleStore addKCDataThreadV4:threadV2:deltaThreadV3:deltaThreadV2:timestamp:sampleIndex:stack:threadExclavesInfo:threadName:dispatchQueueLabel:waitInfo:waitInfoPortLabelInfo:turnstileInfo:turnstileInfoPortLabelInfo:instructionCycles:task:kernelTask:taskIsSuspended:]( (id *)v219,  v40,  v185,  v233,  v217,  v228,  a4,  v177,  v226,  (char *)v220,  (id *)v221,  v212,  v171,  v176,  v179,  v224,  self,  v234,  a13);
        uint64_t v32 = v227;
        if (v186)
        {
          [MEMORY[0x189607968] numberWithUnsignedLongLong:v186];
          v187 = (void *)objc_claimAutoreleasedReturnValue();
          -[os_log_s addObject:](v227, "addObject:", v187);
        }

        uint64_t v30 = v177;
        [v177 clearThreadData];
        uint64_t v29 = self;
        uint64_t v31 = (unint64_t)v223;
        goto LABEL_312;
      }
    }

    else
    {
      v195 = *__error();
      _sa_logt();
      v196 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v196, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl( &dword_186C92000,  v196,  OS_LOG_TYPE_ERROR,  "no thread_snap when primary data is kperf",  buf,  2u);
      }

      *__error() = v195;
      _SASetCrashLogMessage(5373, "no thread_snap when primary data is kperf", v197, v198, v199, v200, v201, v202, v211);
      _os_crash();
      __break(1u);
    }

    v203 = *__error();
    _sa_logt();
    v204 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v204, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v237 = 0;
      _os_log_error_impl(&dword_186C92000, v204, OS_LOG_TYPE_ERROR, "no thread_snap when backfilling kperf", v237, 2u);
    }

    *__error() = v203;
    _SASetCrashLogMessage(5392, "no thread_snap when backfilling kperf", v205, v206, v207, v208, v209, v210, v211);
    _os_crash();
    __break(1u);
  }

  v230 = 0LL;
  uint64_t v40 = 0LL;
  uint64_t v41 = 0LL;
  v233 = 0LL;
  v218 = 0;
  v220 = 0LL;
  v221 = 0LL;
  v224 = 0LL;
  v225 = 0LL;
  v45 = a2;
  while (1)
  {
    uint64_t v34 = MEMORY[0x186E47ACC]();
    KCLogIter((unsigned int *)*a2, (unint64_t)a2[1], 0);
    unsigned int v46 = *a2;
    uint64_t v47 = **a2;
    v48 = v47 & 0xFFFFFFF0;
    if ((v47 & 0xFFFFFFF0) == 0x20) {
      v49 = 17;
    }
    else {
      v49 = **a2;
    }
    if ((v49 - 1) > 5)
    {
      if (v49 <= 2309)
      {
        if (v49 != 17 && v49 != 19) {
          goto LABEL_38;
        }
        v51 = v46[1];
        v55 = v51;
LABEL_41:
        v50 = (unsigned int *)(v46 + 4);
        goto LABEL_42;
      }

      if (v49 == 2310)
      {
        v51 = v46[1];
        if (v51 == 112 && (v46[2] & 0x8F) == 0)
        {
          v55 = 104;
          goto LABEL_41;
        }
      }

      else
      {
        if (v49 != 2312)
        {
LABEL_38:
          v51 = v46[1];
          goto LABEL_39;
        }

        v51 = v46[1];
        if (v51 == 32 && (v46[2] & 0x8F) == 0)
        {
          v55 = 24;
          goto LABEL_41;
        }
      }

LABEL_39:
      v57 = v46[2] & 0xF;
      v53 = v51 >= v57;
      v55 = v51 - v57;
      if (!v53) {
        v55 = 0;
      }
      goto LABEL_41;
    }

    v50 = (unsigned int *)(v46 + 12);
    v51 = v46[1];
    v52 = v46[2] & 0xF;
    v53 = v51 >= v52;
    v54 = v51 - v52;
    if (!v53) {
      v54 = 0;
    }
    v55 = v54 - 32;
LABEL_42:
    if (v49 > 2338)
    {
      if (v49 > 2353)
      {
        switch(v49)
        {
          case 2354:
            [v30 setSwiftAsyncStitchIndex:*v50];
            break;
          case 2369:
            v67 = v233;
            if (v55 > 0x3F) {
              v67 = (uint64_t)v50;
            }
            v233 = v67;
            if (v55 <= 0x3F) {
              uint64_t v41 = (uint64_t *)v50;
            }
            break;
          case 2376:
            [v30 setExclaveInsertionIndex:v50[2]];
            v225 = v50;
            break;
        }

        goto LABEL_167;
      }

      if (v49 == 2339)
      {
        v224 = (uint64_t *)v50;
      }

      else if (v49 == 2344)
      {
        if (v55)
        {
          if (!*((_BYTE *)v50 + v55 - 1))
          {
            if (*(_BYTE *)v50)
            {
              v221 = v50;
              goto LABEL_167;
            }

            v60 = *__error();
            _sa_logt();
            v61 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (!os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_96;
            }
            *(_WORD *)buf = 0;
            v62 = v61;
            v63 = "WARNING: Empty dispatch queue label";
            goto LABEL_61;
          }

          v60 = *__error();
          _sa_logt();
          v61 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            v62 = v61;
            v63 = "WARNING: dispatch queue label non NULL-terminated";
LABEL_61:
            v64 = 2;
LABEL_95:
            _os_log_impl(&dword_186C92000, v62, OS_LOG_TYPE_DEFAULT, v63, buf, v64);
          }
        }

        else
        {
          v60 = *__error();
          _sa_logt();
          v61 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
          {
            *(void *)buf = 67109120LL;
            v62 = v61;
            v63 = "WARNING: invalid dispatch queue label (size %d)";
            v64 = 8;
            goto LABEL_95;
          }
        }

    if (!v14) {
      goto LABEL_66;
    }
    unsigned int v15 = (void *)[v10 startSampleIndex];
    uint64_t v29 = [v10 endSampleIndex];
    CFTypeID v3 = (_BYTE *)[v10 copy];
    uint64_t v30 = v10;
    unsigned int v16 = (uint64_t)v30;
    if (v30) {
      objc_setProperty_atomic(v30, v31, *((id *)a1 + 5), 56LL);
    }
    if (v3) {
      objc_setProperty_atomic(v3, v31, *((id *)a1 + 5), 48LL);
    }
    uint64_t v32 = *((void *)a1 + 8);
    if (v29 != 0x7FFFFFFFFFFFFFFFLL)
    {
      if (v32 == 0x7FFFFFFFFFFFFFFFLL) {
        goto LABEL_82;
      }
      if (v15 != (void *)0x7FFFFFFFFFFFFFFFLL)
      {
        -[SAThreadState setEndSampleIndex:](v16, v32);
        uint64_t v33 = *((void *)a1 + 8);
        if (v33 < (unint64_t)v15)
        {
          uint64_t v34 = v16;
          goto LABEL_54;
        }

        if (v29 <= v33)
        {
          uint64_t v34 = (uint64_t)v3;
LABEL_54:
          uint64_t v35 = 0x7FFFFFFFFFFFFFFFLL;
        }

        else
        {
          uint64_t v35 = v33 + 1;
          uint64_t v34 = (uint64_t)v3;
        }

        -[SAThreadState setStartSampleIndex:](v34, v35);
      }

      v210 = v29;
      if (([(id)v16 startSampleIndex] != 0x7FFFFFFFFFFFFFFFLL
         || (void *)[v3 startSampleIndex] != v15)
        && ([(id)v16 startSampleIndex] == 0x7FFFFFFFFFFFFFFFLL
         || (void *)[(id)v16 startSampleIndex] != v15))
      {
        goto LABEL_97;
      }

      if ([(id)v16 startSampleIndex] != 0x7FFFFFFFFFFFFFFFLL)
      {
        char v36 = [(id)v16 endSampleIndex];
        if (v36 < [(id)v16 startSampleIndex]) {
          goto LABEL_103;
        }
      }

      if ([v3 startSampleIndex] != 0x7FFFFFFFFFFFFFFFLL)
      {
        unsigned int v37 = [v3 endSampleIndex];
        if (v37 < [v3 startSampleIndex]) {
          goto LABEL_106;
        }
      }

      uint64_t v38 = [v3 endSampleIndex];
      if (v38 < [(id)v16 endSampleIndex]) {
        goto LABEL_85;
      }
      goto LABEL_65;
    }

    if (v32 != 0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_79;
    }
LABEL_65:
    -[SAThread insertState:atIndex:]((id *)v212, v3, v5 + 1);

LABEL_66:
    if (*((void *)a1 + 7))
    {
      __int16 v39 = (void *)*((void *)a1 + 4);
      [v10 startTimestamp];
      uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue();
      LOBYTE(v39) = [v39 le:v40];
    }

    uint64_t v41 = (void *)*((void *)a1 + 5);
    [v10 endTimestamp];
    unsigned int v15 = (void *)objc_claimAutoreleasedReturnValue();
    LOBYTE(v41) = [v41 ge:v15];

    if ((v41 & 1) == 0)
    {
      unsigned int v16 = *__error();
      _sa_logt();
      uint64_t v44 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
      {
        v45 = [*((id *)a1 + 5) debugDescription];
        unsigned int v15 = (void *)[v45 UTF8String];
        [v10 endTimestamp];
        unsigned int v46 = (void *)objc_claimAutoreleasedReturnValue();
        CFTypeID v3 = [v46 debugDescription];
        *(_DWORD *)buf = 136315394;
        v222 = (unint64_t)v15;
        v223 = 2080;
        v224 = [v3 UTF8String];
        _os_log_error_impl( &dword_186C92000,  v44,  OS_LOG_TYPE_ERROR,  "taskSuspendEndTime %s < threadState.endTimestamp %s",  buf,  0x16u);
      }

      *__error() = v16;
      a1 = [*((id *)a1 + 5) debugDescription];
      uint64_t v47 = [a1 UTF8String];
      [v10 endTimestamp];
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      v49 = [v48 debugDescription];
      [v49 UTF8String];
      _SASetCrashLogMessage( 1794,  "taskSuspendEndTime %s < threadState.endTimestamp %s",  v50,  v51,  v52,  v53,  v54,  v55,  v47);

      _os_crash();
      __break(1u);
LABEL_79:
      uint64_t v29 = *__error();
      _sa_logt();
      v56 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
      {
        v57 = *((void *)a1 + 8);
        *(_DWORD *)buf = 134217984;
        v222 = v57;
        _os_log_error_impl( &dword_186C92000,  v56,  OS_LOG_TYPE_ERROR,  "threadEndSampleIndex is NSNotFound, but taskSuspendEndSampleIndex is %lu",  buf,  0xCu);
      }

      *__error() = v29;
      _SASetCrashLogMessage( 1749,  "threadEndSampleIndex is NSNotFound, but taskSuspendEndSampleIndex is %lu",  v58,  v59,  v60,  v61,  v62,  v63,  *((void *)a1 + 8));
      _os_crash();
      __break(1u);
LABEL_82:
      v64 = *__error();
      _sa_logt();
      a1 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled((os_log_t)a1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        v222 = v29;
        _os_log_error_impl( &dword_186C92000,  (os_log_t)a1,  OS_LOG_TYPE_ERROR,  "threadEndSampleIndex is %lu, but taskSuspendEndSampleIndex is NSNotFound",  buf,  0xCu);
      }

      *__error() = v64;
      _SASetCrashLogMessage( 1752,  "threadEndSampleIndex is %lu, but taskSuspendEndSampleIndex is NSNotFound",  v65,  v66,  v67,  v68,  v69,  v70,  v29);
      _os_crash();
      __break(1u);
LABEL_85:
      v213 = *__error();
      _sa_logt();
      v71 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
      {
        v73 = *((void *)a1 + 7);
        v72 = *((void *)a1 + 8);
        v74 = [(id)v16 startSampleIndex];
        v75 = [(id)v16 endSampleIndex];
        v76 = [v3 startSampleIndex];
        v77 = [v3 endSampleIndex];
        *(_DWORD *)buf = 134219776;
        v222 = (unint64_t)v15;
        v223 = 2048;
        v224 = v210;
        v225 = 2048;
        v226 = v73;
        v227 = 2048;
        v228 = v72;
        v229 = 2048;
        v230 = v74;
        v231 = 2048;
        v232 = v75;
        v233 = 2048;
        v234 = v76;
        v235 = 2048;
        v236 = v77;
        _os_log_error_impl( &dword_186C92000,  v71,  OS_LOG_TYPE_ERROR,  "thread state %lu-%lu, task state %lu-%lu -> first half %lu-%lu, second half %lu-%lu",  buf,  0x52u);
      }

      *__error() = v213;
      a1 = (id)[(id)v16 startSampleIndex];
      [(id)v16 endSampleIndex];
      [v3 startSampleIndex];
      [v3 endSampleIndex];
      _SASetCrashLogMessage( 1781,  "thread state %lu-%lu, task state %lu-%lu -> first half %lu-%lu, second half %lu-%lu",  v78,  v79,  v80,  v81,  v82,  v83,  (char)v15);
      _os_crash();
      __break(1u);
LABEL_88:
      v84 = *__error();
      _sa_logt();
      v85 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v85, OS_LOG_TYPE_ERROR))
      {
        v86 = *((void *)a1 + 8);
        *(_DWORD *)buf = 134217984;
        v222 = v86;
        _os_log_error_impl( &dword_186C92000,  v85,  OS_LOG_TYPE_ERROR,  "threadEndSampleIndex is NSNotFound, but taskSuspendEndSampleIndex is %lu",  buf,  0xCu);
      }

      *__error() = v84;
      _SASetCrashLogMessage( 1676,  "threadEndSampleIndex is NSNotFound, but taskSuspendEndSampleIndex is %lu",  v87,  v88,  v89,  v90,  v91,  v92,  *((void *)a1 + 8));
      _os_crash();
      __break(1u);
LABEL_91:
      v93 = *__error();
      _sa_logt();
      a1 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled((os_log_t)a1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        v222 = (unint64_t)v15;
        _os_log_error_impl( &dword_186C92000,  (os_log_t)a1,  OS_LOG_TYPE_ERROR,  "threadEndSampleIndex is %lu, but taskSuspendEndSampleIndex is NSNotFound",  buf,  0xCu);
      }

      *__error() = v93;
      _SASetCrashLogMessage( 1679,  "threadEndSampleIndex is %lu, but taskSuspendEndSampleIndex is NSNotFound",  v94,  v95,  v96,  v97,  v98,  v99,  (char)v15);
      _os_crash();
      __break(1u);
LABEL_94:
      v214 = *__error();
      _sa_logt();
      v100 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v100, OS_LOG_TYPE_ERROR))
      {
        v101 = *((void *)a1 + 7);
        v102 = *((void *)a1 + 8);
        v103 = [(id)v16 startSampleIndex];
        v104 = [(id)v16 endSampleIndex];
        v105 = [v3 startSampleIndex];
        v106 = [v3 endSampleIndex];
        *(_DWORD *)buf = 134219776;
        v222 = v210;
        v223 = 2048;
        v224 = v209;
        v225 = 2048;
        v226 = v101;
        v227 = 2048;
        v228 = v102;
        v229 = 2048;
        v230 = v103;
        v231 = 2048;
        v232 = v104;
        v233 = 2048;
        v234 = v105;
        v235 = 2048;
        v236 = v106;
        _os_log_error_impl( &dword_186C92000,  v100,  OS_LOG_TYPE_ERROR,  "thread state %lu-%lu, task state %lu-%lu -> first half %lu-%lu, second half %lu-%lu",  buf,  0x52u);
      }

      *__error() = v214;
      unsigned int v15 = (void *)*((void *)a1 + 8);
      a1 = (id)[(id)v16 startSampleIndex];
      [(id)v16 endSampleIndex];
      [v3 startSampleIndex];
      [v3 endSampleIndex];
      _SASetCrashLogMessage( 1722,  "thread state %lu-%lu, task state %lu-%lu -> first half %lu-%lu, second half %lu-%lu",  v107,  v108,  v109,  v110,  v111,  v112,  v210);
      _os_crash();
      __break(1u);
LABEL_97:
      v215 = *__error();
      _sa_logt();
      v113 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v113, OS_LOG_TYPE_ERROR))
      {
        v115 = *((void *)a1 + 7);
        v114 = *((void *)a1 + 8);
        v116 = [(id)v16 startSampleIndex];
        v117 = [(id)v16 endSampleIndex];
        v118 = [v3 startSampleIndex];
        v119 = [v3 endSampleIndex];
        *(_DWORD *)buf = 134219776;
        v222 = (unint64_t)v15;
        v223 = 2048;
        v224 = v210;
        v225 = 2048;
        v226 = v115;
        v227 = 2048;
        v228 = v114;
        v229 = 2048;
        v230 = v116;
        v231 = 2048;
        v232 = v117;
        v233 = 2048;
        v234 = v118;
        v235 = 2048;
        v236 = v119;
        _os_log_error_impl( &dword_186C92000,  v113,  OS_LOG_TYPE_ERROR,  "thread state %lu-%lu, task state %lu-%lu -> first half %lu-%lu, second half %lu-%lu",  buf,  0x52u);
      }

      *__error() = v215;
      a1 = (id)[(id)v16 startSampleIndex];
      [(id)v16 endSampleIndex];
      [v3 startSampleIndex];
      [v3 endSampleIndex];
      _SASetCrashLogMessage( 1778,  "thread state %lu-%lu, task state %lu-%lu -> first half %lu-%lu, second half %lu-%lu",  v120,  v121,  v122,  v123,  v124,  v125,  (char)v15);
      _os_crash();
      __break(1u);
LABEL_100:
      v216 = *__error();
      _sa_logt();
      v126 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v126, OS_LOG_TYPE_ERROR))
      {
        v127 = *((void *)a1 + 7);
        v128 = *((void *)a1 + 8);
        v129 = [(id)v16 startSampleIndex];
        v130 = [(id)v16 endSampleIndex];
        v131 = [v3 startSampleIndex];
        v132 = [v3 endSampleIndex];
        *(_DWORD *)buf = 134219776;
        v222 = v210;
        v223 = 2048;
        v224 = v209;
        v225 = 2048;
        v226 = v127;
        v227 = 2048;
        v228 = v128;
        v229 = 2048;
        v230 = v129;
        v231 = 2048;
        v232 = v130;
        v233 = 2048;
        v234 = v131;
        v235 = 2048;
        v236 = v132;
        _os_log_error_impl( &dword_186C92000,  v126,  OS_LOG_TYPE_ERROR,  "thread state %lu-%lu, task state %lu-%lu -> first half %lu-%lu, second half %lu-%lu",  buf,  0x52u);
      }

      *__error() = v216;
      unsigned int v15 = (void *)*((void *)a1 + 8);
      a1 = (id)[(id)v16 startSampleIndex];
      [(id)v16 endSampleIndex];
      [v3 startSampleIndex];
      [v3 endSampleIndex];
      _SASetCrashLogMessage( 1719,  "thread state %lu-%lu, task state %lu-%lu -> first half %lu-%lu, second half %lu-%lu",  v133,  v134,  v135,  v136,  v137,  v138,  v210);
      _os_crash();
      __break(1u);
LABEL_103:
      v217 = *__error();
      _sa_logt();
      v139 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v139, OS_LOG_TYPE_ERROR))
      {
        v141 = *((void *)a1 + 7);
        v140 = *((void *)a1 + 8);
        v142 = [(id)v16 startSampleIndex];
        v143 = [(id)v16 endSampleIndex];
        v144 = [v3 startSampleIndex];
        v145 = [v3 endSampleIndex];
        *(_DWORD *)buf = 134219776;
        v222 = (unint64_t)v15;
        v223 = 2048;
        v224 = v210;
        v225 = 2048;
        v226 = v141;
        v227 = 2048;
        v228 = v140;
        v229 = 2048;
        v230 = v142;
        v231 = 2048;
        v232 = v143;
        v233 = 2048;
        v234 = v144;
        v235 = 2048;
        v236 = v145;
        _os_log_error_impl( &dword_186C92000,  v139,  OS_LOG_TYPE_ERROR,  "thread state %lu-%lu, task state %lu-%lu -> first half %lu-%lu, second half %lu-%lu",  buf,  0x52u);
      }

      *__error() = v217;
      a1 = (id)[(id)v16 startSampleIndex];
      [(id)v16 endSampleIndex];
      [v3 startSampleIndex];
      [v3 endSampleIndex];
      _SASetCrashLogMessage( 1779,  "thread state %lu-%lu, task state %lu-%lu -> first half %lu-%lu, second half %lu-%lu",  v146,  v147,  v148,  v149,  v150,  v151,  (char)v15);
      _os_crash();
      __break(1u);
LABEL_106:
      v218 = *__error();
      _sa_logt();
      v152 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v152, OS_LOG_TYPE_ERROR))
      {
        v154 = *((void *)a1 + 7);
        v153 = *((void *)a1 + 8);
        v155 = [(id)v16 startSampleIndex];
        v156 = [(id)v16 endSampleIndex];
        v157 = [v3 startSampleIndex];
        v158 = [v3 endSampleIndex];
        *(_DWORD *)buf = 134219776;
        v222 = (unint64_t)v15;
        v223 = 2048;
        v224 = v210;
        v225 = 2048;
        v226 = v154;
        v227 = 2048;
        v228 = v153;
        v229 = 2048;
        v230 = v155;
        v231 = 2048;
        v232 = v156;
        v233 = 2048;
        v234 = v157;
        v235 = 2048;
        v236 = v158;
        _os_log_error_impl( &dword_186C92000,  v152,  OS_LOG_TYPE_ERROR,  "thread state %lu-%lu, task state %lu-%lu -> first half %lu-%lu, second half %lu-%lu",  buf,  0x52u);
      }

      *__error() = v218;
      a1 = (id)[(id)v16 startSampleIndex];
      [(id)v16 endSampleIndex];
      [v3 startSampleIndex];
      [v3 endSampleIndex];
      _SASetCrashLogMessage( 1780,  "thread state %lu-%lu, task state %lu-%lu -> first half %lu-%lu, second half %lu-%lu",  v159,  v160,  v161,  v162,  v163,  v164,  (char)v15);
      _os_crash();
      __break(1u);
LABEL_109:
      v219 = *__error();
      _sa_logt();
      v165 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v165, OS_LOG_TYPE_ERROR))
      {
        v166 = *((void *)a1 + 7);
        v167 = *((void *)a1 + 8);
        v168 = [(id)v16 startSampleIndex];
        v169 = [(id)v16 endSampleIndex];
        v170 = [v3 startSampleIndex];
        v171 = [v3 endSampleIndex];
        *(_DWORD *)buf = 134219776;
        v222 = v210;
        v223 = 2048;
        v224 = v209;
        v225 = 2048;
        v226 = v166;
        v227 = 2048;
        v228 = v167;
        v229 = 2048;
        v230 = v168;
        v231 = 2048;
        v232 = v169;
        v233 = 2048;
        v234 = v170;
        v235 = 2048;
        v236 = v171;
        _os_log_error_impl( &dword_186C92000,  v165,  OS_LOG_TYPE_ERROR,  "thread state %lu-%lu, task state %lu-%lu -> first half %lu-%lu, second half %lu-%lu",  buf,  0x52u);
      }

      *__error() = v219;
      a1 = (id)[(id)v16 startSampleIndex];
      [(id)v16 endSampleIndex];
      [v3 startSampleIndex];
      [v3 endSampleIndex];
      _SASetCrashLogMessage( 1720,  "thread state %lu-%lu, task state %lu-%lu -> first half %lu-%lu, second half %lu-%lu",  v172,  v173,  v174,  v175,  v176,  v177,  v210);
      _os_crash();
      __break(1u);
LABEL_112:
      v220 = *__error();
      _sa_logt();
      v178 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v178, OS_LOG_TYPE_ERROR))
      {
        v179 = *((void *)a1 + 7);
        v180 = *((void *)a1 + 8);
        v181 = [(id)v16 startSampleIndex];
        v182 = [(id)v16 endSampleIndex];
        v183 = [v3 startSampleIndex];
        v184 = [v3 endSampleIndex];
        *(_DWORD *)buf = 134219776;
        v222 = v210;
        v223 = 2048;
        v224 = v209;
        v225 = 2048;
        v226 = v179;
        v227 = 2048;
        v228 = v180;
        v229 = 2048;
        v230 = v181;
        v231 = 2048;
        v232 = v182;
        v233 = 2048;
        v234 = v183;
        v235 = 2048;
        v236 = v184;
        _os_log_error_impl( &dword_186C92000,  v178,  OS_LOG_TYPE_ERROR,  "thread state %lu-%lu, task state %lu-%lu -> first half %lu-%lu, second half %lu-%lu",  buf,  0x52u);
      }

      *__error() = v220;
      a1 = (id)[(id)v16 startSampleIndex];
      unsigned int v10 = (_BYTE *)[(id)v16 endSampleIndex];
      [v3 startSampleIndex];
      [v3 endSampleIndex];
      _SASetCrashLogMessage( 1721,  "thread state %lu-%lu, task state %lu-%lu -> first half %lu-%lu, second half %lu-%lu",  v185,  v186,  v187,  v188,  v189,  v190,  v210);
      _os_crash();
      __break(1u);
LABEL_115:
      v191 = *__error();
      _sa_logt();
      v192 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v192, OS_LOG_TYPE_ERROR))
      {
        v193 = *((void *)a1 + 7);
        v194 = [*((id *)a1 + 4) debugDescription];
        v195 = [v194 UTF8String];
        [v10 startTimestamp];
        v196 = (void *)objc_claimAutoreleasedReturnValue();
        v197 = [v196 debugDescription];
        v198 = [v197 UTF8String];
        *(_DWORD *)buf = 134218498;
        v222 = v193;
        v223 = 2080;
        v224 = v195;
        v225 = 2080;
        v226 = v198;
        _os_log_error_impl( &dword_186C92000,  v192,  OS_LOG_TYPE_ERROR,  "taskSuspendStartSampleIndex %lu and taskSuspendStartTime %s >= threadState.startTimestamp %s",  buf,  0x20u);
      }

      *__error() = v191;
      v199 = *((void *)a1 + 7);
      v200 = [*((id *)a1 + 4) debugDescription];
      [v200 UTF8String];
      [v10 startTimestamp];
      v201 = (void *)objc_claimAutoreleasedReturnValue();
      v202 = [v201 debugDescription];
      [v202 UTF8String];
      _SASetCrashLogMessage( 1793,  "taskSuspendStartSampleIndex %lu and taskSuspendStartTime %s >= threadState.startTimestamp %s",  v203,  v204,  v205,  v206,  v207,  v208,  v199);

      _os_crash();
      __break(1u);
    }

    if (v10) {
      v10[11] |= 0x40u;
    }
LABEL_71:

    ++v5;
    [v212 threadStates];
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    int v43 = [v42 count];

    BOOL v8 = v212;
    if (v5 >= v43) {
      goto LABEL_75;
    }
  }

LABEL_74:
  BOOL v8 = v212;
LABEL_75:
  *(void *)(*((void *)a1 + 6) + 8 * a3) = v5;
}

LABEL_96:
        *__error() = v60;
      }

LABEL_167:
      objc_autoreleasePoolPop((void *)v34);
      a2 = v45;
      goto LABEL_168;
    }

    if (v49 > 19)
    {
      if (v49 == 2310)
      {
        if (v55 > 0x7F) {
          uint64_t v40 = (uint64_t)v50;
        }
        v68 = (unsigned int *)v230;
        if (v55 <= 0x7F) {
          v68 = v50;
        }
        v230 = (uint64_t)v68;
        goto LABEL_167;
      }

      if (v49 == 2313)
      {
        if (*((_BYTE *)v50 + v55 - 1))
        {
          v58 = *__error();
          _sa_logt();
          v59 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl( &dword_186C92000,  v59,  OS_LOG_TYPE_DEFAULT,  "WARNING: thread name non NULL-terminated",  buf,  2u);
          }

          *__error() = v58;
          v218 = 1;
        }

        else
        {
          v218 = 1;
          v220 = v50;
        }

        goto LABEL_167;
      }

      if (v49 != 20) {
        goto LABEL_167;
      }
      v149 = (os_log_s *)*((void *)v46 + 1);
      if (v27 == v149)
      {
        objc_autoreleasePoolPop((void *)v34);
        goto LABEL_7;
      }

      LODWORD(a2) = *__error();
      _sa_logt();
      uint64_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      a1 = v234;
      if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
LABEL_315:
        char v36 = 7LL;
        uint64_t v28 = v228;
        uint64_t v29 = self;
        goto LABEL_242;
      }

LABEL_320:
      *(_DWORD *)buf = 134218240;
      *(void *)&uint8_t buf[4] = v27;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v149;
      _os_log_error_impl( &dword_186C92000,  v32,  OS_LOG_TYPE_ERROR,  "Container end with wrong ID (%llu != %llu)",  buf,  0x16u);
      goto LABEL_315;
    }

    v65 = (unint64_t)a2[1];
    if (v49 == 17)
    {
      v69 = *((void *)v46 + 1);
      if ((_DWORD)v69)
      {
        if (v47 == 17)
        {
          v70 = HIDWORD(v69);
          if (SHIDWORD(v69) <= 2310)
          {
            switch(HIDWORD(v69))
            {
              case 0x30:
                v71 = 20;
                break;
              case 0x31:
                v71 = 24;
                break;
              case 0x81A:
LABEL_112:
                v71 = 8;
                break;
              default:
                goto LABEL_227;
            }
          }

          else
          {
            switch(HIDWORD(v69))
            {
              case 0x907:
                v71 = 4;
                break;
              case 0x908:
              case 0x909:
                goto LABEL_227;
              case 0x90A:
              case 0x90C:
                goto LABEL_112;
              case 0x90B:
              case 0x90D:
                v71 = 16;
                break;
              default:
                if (HIDWORD(v69) != 2369) {
                  goto LABEL_227;
                }
                v71 = 48;
                break;
            }
          }

          if (v51 / v71 < v69 || v51 % v69 >= 0x10)
          {
LABEL_227:
            LODWORD(a2) = *__error();
            _sa_logt();
            uint64_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              char v36 = 2LL;
              _os_log_error_impl( &dword_186C92000,  v32,  OS_LOG_TYPE_ERROR,  "Error parsing kcdata buffer: array is invalid",  buf,  2u);
            }

            else
            {
              char v36 = 2LL;
            }

            goto LABEL_241;
          }

          goto LABEL_122;
        }

        v73 = **a2 & 0xF;
        v53 = v51 >= v73;
        v74 = v51 - v73;
        if (!v53) {
          goto LABEL_227;
        }
        v72 = v74 / v69;
        v70 = HIDWORD(v69);
      }

      else
      {
        if (v51) {
          goto LABEL_227;
        }
        v70 = HIDWORD(v69);
        if (v47 == 17)
        {
LABEL_122:
          if ((int)v70 > 2310)
          {
            v72 = 8;
            switch((int)v70)
            {
              case 2311:
                goto LABEL_167;
              case 2312:
              case 2313:
                goto LABEL_99;
              case 2314:
              case 2316:
                goto LABEL_125;
              case 2315:
              case 2317:
                v72 = 16;
                goto LABEL_125;
              default:
                if ((_DWORD)v70 != 2369) {
                  goto LABEL_99;
                }
                break;
            }

            goto LABEL_167;
          }
        }

LABEL_99:
        v72 = 0;
      }

            objc_msgSend(a1[1], "printWithFormat:", @" - %18s", "???");
LABEL_100:
            else {
              v52 = @"  ";
            }
            [a1[1] appendString:v52];
            if (!v41)
            {
LABEL_104:
              v45 = (void *)[@"???" mutableCopy];
LABEL_105:
              v110 = v38;
              v53 = [v37 bundleVersion];
              [v37 bundleShortVersion];
              v54 = (void *)objc_claimAutoreleasedReturnValue();
              v116 = [v37 binaryVersion];
              if (v54 || v53 || v116)
              {
                if (([a1[2] tabDelineateBinaryImageSections] & 1) == 0) {
                  [v45 appendString:@" "];
                }
                if (v54)
                {
                  SACopySanitizedString(v54, 1, 0LL);
                  v55 = (void *)objc_claimAutoreleasedReturnValue();
                  [v45 appendFormat:@"%@", v55];

                  if (v53 | v116)
                  {
                    [v45 appendString:@" "];
                    goto LABEL_116;
                  }
                }

                else if (v53 | v116)
                {
LABEL_116:
                  if (v53) {
                    v56 = (void *)v53;
                  }
                  else {
                    v56 = (void *)v116;
                  }
                  SACopySanitizedString(v56, 1, 0LL);
                  v57 = (void *)objc_claimAutoreleasedReturnValue();
                  [v45 appendFormat:@"(%@)", v57];
                }
              }

              v58 = a1[1];
              v59 = v45;
              objc_msgSend(v58, "printWithFormat:", @"%-*s", v108, objc_msgSend(v59, "UTF8String"));
              if (([a1[2] tabDelineateBinaryImageSections] & 1) == 0 && (int)v107 >= 1)
              {
                v60 = a1[1];
                if (v112)
                {
                  [v112 name];
                  v61 = (void *)objc_claimAutoreleasedReturnValue();
                  if (v61)
                  {
                    [v112 name];
                    v62 = (void *)objc_claimAutoreleasedReturnValue();
                  }

                  else
                  {
                    v62 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"%#18llx",  objc_msgSend(v112, "identifier"));
                  }

                  v63 = v62;
                  objc_msgSend( v60,  "printWithFormat:",  @" exclave %-*s",  (v107 - 9),  objc_msgSend(v63, "UTF8String"));
                }

                else
                {
                  objc_msgSend(v60, "printWithFormat:", @"%-*s", v107, "");
                }
              }

              [v37 uuid];
              v64 = (void *)objc_claimAutoreleasedReturnValue();

              uint64_t v41 = v114;
              if (v64)
              {
                if (([a1[2] tabDelineateBinaryImageSections] & 1) == 0) {
                  [a1[1] appendString:@" "];
                }
                v65 = a1[1];
                [v37 uuid];
                v66 = (void *)objc_claimAutoreleasedReturnValue();
                [v66 UUIDString];
                v67 = (void *)objc_claimAutoreleasedReturnValue();
                [v65 printWithFormat:@"<%@>", v67];

                uint64_t v41 = v114;
              }

              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0) {
                v68 = [v36 isZerothAndOnlySegment];
              }
              else {
                v68 = 0;
              }
              if ([a1[2] tabDelineateBinaryImageSections])
              {
                if (v110) {
                  v69 = v68;
                }
                else {
                  v69 = 1;
                }
                if ((v69 & 1) == 0)
                {
                  v70 = a1[1];
                  v71 = [v110 name];
                  objc_msgSend(v70, "printWithFormat:", @"%s", objc_msgSend(v71, "UTF8String"), v100);
                  goto LABEL_152;
                }
              }

              else if ((int)v106 >= 1)
              {
                if (v110) {
                  v72 = v68;
                }
                else {
                  v72 = 1;
                }
                v73 = a1[1];
                if ((v72 & 1) != 0)
                {
                  objc_msgSend(v73, "printWithFormat:", @"%-*s", v106, "");
                }

                else
                {
                  v71 = [v110 name];
                  objc_msgSend(v73, "printWithFormat:", @"%-*s", v106, objc_msgSend(v71, "UTF8String"));
LABEL_152:
                }
              }

              v74 = [v37 path];
              if (v74)
              {
                v75 = (void *)v74;
                if (([a1[2] tabDelineateBinaryImageSections] & 1) == 0) {
                  [a1[1] appendString:@"  "];
                }
                if ([a1[20] sanitizePaths])
                {
                  v76 = v75;
                }

                v77 = a1[1];
                SACopySanitizedString(v75, 1, 0LL);
                v78 = (void *)objc_claimAutoreleasedReturnValue();
                [v77 printWithFormat:@"%@", v78];

                uint64_t v41 = v114;
              }

              [a1[1] appendString:@"\n"];

              uint64_t v38 = v110;
LABEL_162:

              uint64_t v34 = 0;
              if (obja == (id)++v35)
              {
                v82 = [v102 countByEnumeratingWithState:&v117 objects:v132 count:16];
                uint64_t v34 = 0;
                obja = (id)v82;
                if (!v82)
                {
LABEL_168:

                  CFTypeID v3 = v101;
                  goto LABEL_169;
                }

                continue;
              }

              goto LABEL_61;
            }
          }

          else
          {
            objc_msgSend(a1[1], "printWithFormat:", @"%*s", 4, v131);
            if (!v41) {
              goto LABEL_104;
            }
          }

          break;
        }

        SACopySanitizedString(v41, 1, 0LL);
        uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue();
        v45 = (void *)[v44 mutableCopy];

        goto LABEL_105;
      }
    }
  }

  SAJSONWriteArray(a1[1], v3);
LABEL_169:
}

LABEL_125:
      v222 = v31;
      switch((int)v70)
      {
        case 2314:
          v75 = v69;
          v76 = calloc(v69, 8uLL);
          v77 = v76;
          if ((_DWORD)v69)
          {
            v78 = 0;
            v79 = v76;
            do
            {
              *v79++ = *(unsigned int *)((char *)v50 + v78);
              v78 += v72;
              --v75;
            }

            while (v75);
          }

          goto LABEL_157;
        case 2315:
          v84 = v69;
          v85 = calloc(v69, 8uLL);
          v77 = v85;
          if ((_DWORD)v69)
          {
            v86 = 0;
            v87 = v85;
            do
            {
              *v87++ = *(void *)((char *)v50 + v86);
              v86 += v72;
              --v84;
            }

            while (v84);
          }

          goto LABEL_157;
        case 2316:
          v88 = v69;
          v89 = calloc(v69, 8uLL);
          v90 = v89;
          if ((_DWORD)v69)
          {
            v91 = 0;
            v92 = v89;
            do
            {
              *v92++ = *(unsigned int *)((char *)v50 + v91);
              v91 += v72;
              --v88;
            }

            while (v88);
          }

          goto LABEL_165;
        case 2317:
          v93 = v69;
          v94 = calloc(v69, 8uLL);
          v90 = v94;
          if ((_DWORD)v69)
          {
            v95 = 0;
            v96 = v94;
            do
            {
              *v96++ = *(void *)((char *)v50 + v95);
              v95 += v72;
              --v93;
            }

            while (v93);
          }

          goto LABEL_165;
        case 2318:
        case 2319:
        case 2320:
        case 2321:
        case 2322:
          goto LABEL_167;
        case 2323:
          v97 = v69;
          v98 = calloc(v69, 8uLL);
          v77 = v98;
          if ((_DWORD)v69)
          {
            v99 = 0;
            v100 = v98;
            do
            {
              *v100++ = *(unsigned int *)((char *)v50 + v99);
              v99 += v72;
              --v97;
            }

            while (v97);
          }

          goto LABEL_157;
        case 2324:
          v101 = v69;
          v102 = calloc(v69, 8uLL);
          v77 = v102;
          if ((_DWORD)v69)
          {
            v103 = 0;
            v104 = v102;
            do
            {
              *v104++ = *(void *)((char *)v50 + v103);
              v103 += v72;
              --v101;
            }

            while (v101);
          }

LABEL_157:
          [v30 setKernelFrames:v77];
          [v30 setNumKernelFrames:v69];
          goto LABEL_166;
        case 2325:
          v105 = v69;
          v106 = calloc(v69, 8uLL);
          v90 = v106;
          if ((_DWORD)v69)
          {
            v107 = 0;
            v108 = v106;
            do
            {
              *v108++ = *(unsigned int *)((char *)v50 + v107);
              v107 += v72;
              --v105;
            }

            while (v105);
          }

          goto LABEL_165;
        case 2326:
          v109 = v69;
          v110 = calloc(v69, 8uLL);
          v90 = v110;
          if ((_DWORD)v69)
          {
            v111 = 0;
            v112 = v110;
            do
            {
              *v112++ = *(void *)((char *)v50 + v111);
              v111 += v72;
              --v109;
            }

            while (v109);
          }

LABEL_168:
    uint64_t v35 = a2[1];
    v113 = (char *)*a2 + (*a2)[1];
    uint64_t v38 = v113 + 16;
    *a2 = (int *)(v113 + 16);
    __int16 v39 = v113 + 32;
  }

  LODWORD(a2) = *__error();
  _sa_logt();
  uint64_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = 2308;
    _os_log_error_impl( &dword_186C92000,  v32,  OS_LOG_TYPE_ERROR,  "Error parsing kcdata buffer: subcontainer of container type %u is invalid",  buf,  8u);
  }

  char v36 = 1LL;
LABEL_241:
  uint64_t v28 = v228;
  uint64_t v29 = self;
  a1 = v234;
LABEL_242:

  *__error() = (int)a2;
  objc_autoreleasePoolPop((void *)v34);
LABEL_243:
  [v30 clearThreadData];
  uint64_t v32 = v227;
LABEL_313:

  return v36;
}

LABEL_6:
}

    -[SABlockingInfo portName](self, "portName");
    id v11 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v11)
    {
      [v5 portName];
      CFTypeID v3 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v3)
      {
        BOOL v8 = 1;
LABEL_16:

        goto LABEL_17;
      }
    }

    unsigned int v12 = -[SABlockingInfo portName](self, "portName");
    if (v12)
    {
      unsigned int v13 = (void *)v12;
      unint64_t v14 = [v5 portName];
      if (v14)
      {
        unsigned int v15 = (void *)v14;
        -[SABlockingInfo portName](self, "portName");
        unsigned int v16 = (void *)objc_claimAutoreleasedReturnValue();
        [v5 portName];
        unint64_t v17 = (void *)objc_claimAutoreleasedReturnValue();
        BOOL v8 = [v16 isEqualToString:v17];

        if (!v11) {
          goto LABEL_16;
        }
LABEL_17:

        goto LABEL_18;
      }
    }

    BOOL v8 = 0;
    if (!v11) {
      goto LABEL_16;
    }
    goto LABEL_17;
  }

  unsigned int v9 = -[SABlockingInfo blockingPid](self, "blockingPid");
  unsigned int v10 = [v5 blockingPid];
  BOOL v8 = 0;
  if ((v9 & v10) != 0xFFFFFFFF && v9 == v10) {
    goto LABEL_6;
  }
LABEL_18:

  return v8;
}
}

void sub_186CB1FCC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
}

LABEL_26:
    uint64_t v24 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
    if (!v24)
    {
      uint64_t v25 = [objc_alloc(MEMORY[0x189603FC8]) initWithCapacity:8];
      uint64_t v26 = *(void *)(*(void *)(a1 + 32) + 8LL);
      uint64_t v27 = *(void **)(v26 + 40);
      *(void *)(v26 + 40) = v25;

      uint64_t v24 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
    }

    [v24 setObject:v7 forKeyedSubscript:v28];
    goto LABEL_3;
  }

  unsigned int v9 = objc_getProperty(v5, v6, 48LL, 1);
  if (!v9)
  {
    Property = objc_getProperty(v7, v8, 56LL, 1);
    goto LABEL_5;
  }
}

    goto LABEL_27;
  }

  unint64_t v17 = v15;
  int v18 = (const char *)[v17 bytes];
  int v19 = [v17 length];
  uint64_t v20 = v19;
  v499 = (flatbuffers::Table *)v18;
  v500 = v19;
  v501 = xmmword_186D74AC0;
  v502 = 0LL;
  v503 = 1;
  if (v19 >= 0x7FFFFFFF) {
    __assert_rtn("Verifier", "flatbuffers.h", 2280, "size_ < FLATBUFFERS_MAX_BUFFER_SIZE");
  }
  if (v19 < 8) {
    goto LABEL_18;
  }
  if (strncmp(v18 + 4, "SYMB", 4uLL)) {
    goto LABEL_18;
  }
  uint64_t v25 = *(unsigned int *)v18;
  if (v20 - 1 < v25) {
    goto LABEL_18;
  }
  uint64_t v26 = (const unsigned __int8 *)&v18[v25];
  if (!flatbuffers::Verifier::VerifyTableStart((flatbuffers::Verifier *)&v499, (const unsigned __int8 *)&v18[v25])
    || !flatbuffers::Table::VerifyOffset((flatbuffers::Table *)&v18[v25], (const flatbuffers::Verifier *)&v499, 4u))
  {
    goto LABEL_18;
  }

  uint64_t v27 = &v26[-*(int *)v26];
  if (*(unsigned __int16 *)v27 >= 5u)
  {
    uint64_t v28 = *((unsigned __int16 *)v27 + 2);
    if (v28)
    {
      if (!flatbuffers::Verifier::VerifyVectorOrString( (flatbuffers::Verifier *)&v499,  &v26[v28 + *(unsigned int *)&v26[v28]],  4uLL,  0LL)) {
        goto LABEL_18;
      }
      uint64_t v29 = &v26[-*(int *)v26];
      if (*(unsigned __int16 *)v29 >= 5u)
      {
        uint64_t v30 = *((unsigned __int16 *)v29 + 2);
        if (v30)
        {
          uint64_t v31 = *(unsigned int *)&v26[v30];
          log = (os_log_t)&v26[v30 + v31];
          if (*(_DWORD *)log)
          {
            uint64_t v32 = 0LL;
            uint64_t v33 = &v18[v25 + v31 + v30];
            uint64_t v34 = &v18[v25 + v30 + v31];
            v469 = (char *)(v34 + 8);
            v473 = (char *)(v34 + 16);
            obj = (id)(v33 + 8);
            v476 = (char *)(v33 + 16);
            do
            {
              uint64_t v35 = (unsigned int *)((char *)log + 4 * v32 + 4);
              src = (const unsigned __int8 *)*v35;
              v453 = v32;
              v486 = (flatbuffers::Table *)&src[(void)v35];
              if (!flatbuffers::Verifier::VerifyTableStart((flatbuffers::Verifier *)&v499, &src[(void)v35])) {
                goto LABEL_18;
              }
              v479 = (flatbuffers::Table *)((char *)v486 - *(int *)v486);
              char v36 = *(unsigned __int16 *)v479;
              if (v36 >= 5
                && *((_WORD *)v479 + 2)
                && (v500 < 2 || v500 - 1 < (flatbuffers::Table *)((char *)v486 + *((unsigned __int16 *)v479 + 2)) - v499))
              {
                goto LABEL_18;
              }

              if (!flatbuffers::Table::VerifyOffset(v486, (const flatbuffers::Verifier *)&v499, 6u)) {
                goto LABEL_18;
              }
              if (v36 < 7)
              {
                if (v36 < 5) {
                  goto LABEL_124;
                }
              }

              else if (*((_WORD *)v479 + 3))
              {
                unsigned int v37 = (flatbuffers::Table *)((char *)v486
                goto LABEL_50;
              }

              unsigned int v37 = 0LL;
LABEL_50:
              if (*((_WORD *)v479 + 2))
              {
                uint64_t v38 = *((unsigned __int8 *)v486 + *((unsigned __int16 *)v479 + 2));
                if (v38 == 3)
                {
                  if (v37 && !FlatbufferSymbols::DyldSharedCacheMetadata::Verify(v37, (flatbuffers::Verifier *)&v499)) {
                    goto LABEL_18;
                  }
                }

                else if (v38 == 2)
                {
                  if (v37 && !FlatbufferSymbols::MachoMetadata::Verify(v37, (flatbuffers::Verifier *)&v499)) {
                    goto LABEL_18;
                  }
                }

                else if (v38 == 1 && v37 != 0LL)
                {
                  if (!flatbuffers::Verifier::VerifyTableStart( (flatbuffers::Verifier *)&v499,  (const unsigned __int8 *)v37)
                    || !flatbuffers::Table::VerifyOffset(v37, (const flatbuffers::Verifier *)&v499, 4u))
                  {
                    goto LABEL_18;
                  }

                  uint64_t v40 = (unsigned __int16 *)((char *)v37 - *(int *)v37);
                  if (*v40 >= 5u && (uint64_t v41 = v40[2]) != 0) {
                    v42 = (const unsigned __int8 *)v37 + v41 + *(unsigned int *)((char *)v37 + v41);
                  }
                  else {
                    v42 = 0LL;
                  }
                  if (!flatbuffers::Verifier::VerifyString((flatbuffers::Verifier *)&v499, v42)) {
                    goto LABEL_18;
                  }
                  v439 = (unsigned __int16 *)((char *)v37 - *(int *)v37);
                  v480 = *v439;
                  if (v480 >= 7
                    && (v439[3]
                     && (v500 < 9
                      || v500 - 8 < (FlatbufferSymbols::DyldSharedCacheMetadata *)((char *)v37 + v439[3]) - v499)
                     || v480 >= 9
                     && v439[4]
                     && (v500 < 9
                      || v500 - 8 < (FlatbufferSymbols::DyldSharedCacheMetadata *)((char *)v37 + v439[4]) - v499)))
                  {
                    goto LABEL_18;
                  }

                  if (!flatbuffers::Table::VerifyOffset(v37, (const flatbuffers::Verifier *)&v499, 0xAu)) {
                    goto LABEL_18;
                  }
                  int v43 = v480 >= 0xB && v439[5]
                  if (!flatbuffers::Verifier::VerifyString((flatbuffers::Verifier *)&v499, v43)
                    || !flatbuffers::Table::VerifyOffset(v37, (const flatbuffers::Verifier *)&v499, 0xCu))
                  {
                    goto LABEL_18;
                  }

                  uint64_t v44 = (unsigned __int16 *)((char *)v37 - *(int *)v37);
                  if (*v44 >= 0xDu)
                  {
                    v45 = v44[6];
                    if (v45)
                    {
                      if (!flatbuffers::Verifier::VerifyVectorOrString( (flatbuffers::Verifier *)&v499,  (const unsigned __int8 *)v37 + v45 + *(unsigned int *)((char *)v37 + v45),  4uLL,  0LL)) {
                        goto LABEL_18;
                      }
                      unsigned int v46 = (unsigned __int16 *)((char *)v37 - *(int *)v37);
                      if (*v46 >= 0xDu)
                      {
                        uint64_t v47 = v46[6];
                        if (v47)
                        {
                          v411 = (char *)v37 + v47;
                          v440 = *(unsigned int *)((char *)v37 + v47);
                          if (*(_DWORD *)((char *)v37 + v47 + v440))
                          {
                            v415 = 0LL;
                            v429 = v411 + 4;
                            v481 = (FlatbufferSymbols::DyldSharedCacheMetadata *)((char *)v37 + v47);
                            while (1)
                            {
                              v432 = (char *)v481 + v440;
                              v436 = *(unsigned int *)((char *)v481 + v440 + 4);
                              v422 = (flatbuffers::Table *)((char *)v481 + v440 + v436 + 4);
                              if (!flatbuffers::Verifier::VerifyTableStart( (flatbuffers::Verifier *)&v499,  (const unsigned __int8 *)v422)) {
                                break;
                              }
                              v426 = v436 - *(int *)&v432[v436 + 4];
                              v433 = *(unsigned __int16 *)&v432[v426 + 4];
                              if (v433 >= 5
                                && (*(_WORD *)((char *)v481 + v440 + v426 + 8)
                                 && (v500 < 9
                                  || v500 - 8 < (unint64_t)&v429[v440
                                                                      + v436
                                                                      + *(unsigned __int16 *)((char *)v481
                                                                                            + v440
                                                                                            + v426
                                                                                            + 8)
                                                                      - (void)v499])
                                 || v433 >= 7
                                 && (*(_WORD *)((char *)v481 + v440 + v426 + 10)
                                  && (v500 < 9
                                   || v500 - 8 < (unint64_t)&v429[v440
                                                                       + v436
                                                                       + *(unsigned __int16 *)((char *)v481
                                                                                             + v440
                                                                                             + v426
                                                                                             + 10)
                                                                       - (void)v499])
                                  || v433 >= 9
                                  && *(_WORD *)((char *)v481 + v440 + v426 + 12)
                                  && (v500 < 9
                                   || v500 - 8 < (unint64_t)&v429[v440
                                                                       + v436
                                                                       + *(unsigned __int16 *)((char *)v481
                                                                                             + v440
                                                                                             + v426
                                                                                             + 12)
                                                                       - (void)v499]))))
                              {
                                break;
                              }

                              if (!flatbuffers::Table::VerifyOffset(v422, (const flatbuffers::Verifier *)&v499, 0xAu)) {
                                break;
                              }
                              if (v433 >= 0xB)
                              {
                                if (*(_WORD *)((char *)v481 + v440 + v426 + 14))
                                {
                                  v48 = *(unsigned __int16 *)((char *)v481 + v440 + v426 + 14);
                                  if (!flatbuffers::Verifier::VerifyVectorOrString( (flatbuffers::Verifier *)&v499,  (const unsigned __int8 *)v481 + v440 + v436 + v48 + *(unsigned int *)((char *)v481 + v440 + v436 + v48 + 4)
                                        + 4,
                                          1uLL,
                                          0LL))
                                    break;
                                }
                              }

                              LODWORD(v501) = v501 - 1;
                              v429 += 4;
                              v481 = (flatbuffers::Table *)((char *)v481 + 4);
                            }

      unsigned int v13 = 0LL;
      *__error() = v11;
      goto LABEL_30;
    }
  }

  SANSStringForCString(v5);
  unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_30:
  free(v5);
  return v13;
}

  uint64_t v23 = 0LL;
LABEL_59:

  return v23;
}

LABEL_3:
LABEL_6:
}
}

LABEL_46:
    *__error() = v29;
  }

  free(v23);
  gzclose(v21);
  unint64_t v17 = v71;
LABEL_48:

  return v26;
}

    v63 = *__error();
    _sa_logt();
    v64 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218240;
      v107 = a4;
      v108 = 2048;
      *(void *)v109 = 77LL;
      _os_log_error_impl( &dword_186C92000,  v64,  OS_LOG_TYPE_ERROR,  "bufferLength %lu < serialized SABinary struct %lu",  buf,  0x16u);
    }

    *__error() = v63;
    _SASetCrashLogMessage(4856, "bufferLength %lu < serialized SABinary struct %lu", v65, v66, v67, v68, v69, v70, a4);
    _os_crash();
    __break(1u);
    goto LABEL_49;
  }

        if ((a2 & 0x400) != 0) {
          int v7 = v5;
        }
        goto LABEL_54;
      }
    }

    else
    {
      unsigned int v10 = -((uint64_t (*)(uint64_t, id))v9)(a3, v8);
      if ((v10 & 0x8000000000000000LL) == 0) {
        goto LABEL_5;
      }
    }

    int v7 = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_46;
  }

        v53 = *__error();
        _sa_logt();
        v54 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          v67 = v3;
          v68 = 2048;
          v69 = 0x7FFFFFFFFFFFFFFFLL;
          _os_log_error_impl( &dword_186C92000,  v54,  OS_LOG_TYPE_ERROR,  "best match length is %lu, but index is %lu",  buf,  0x16u);
        }

        *__error() = v53;
        _SASetCrashLogMessage(531, "best match length is %lu, but index is %lu", v55, v56, v57, v58, v59, v60, v3);
        _os_crash();
        __break(1u);
      }
    }

    if ((unint64_t)[v5 count] >= 3)
    {
      [v5 objectAtIndexedSubscript:2];
      uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue();
      if ([v27 isKernel])
      {
      }

      else
      {
        if ([v5 count] == 3)
        {
        }

        else
        {
          [v5 objectAtIndexedSubscript:3];
          uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue();
          uint64_t v30 = [v29 isKernel];

          if ((v30 & 1) == 0) {
            goto LABEL_38;
          }
        }

        [v5 objectAtIndexedSubscript:2];
        uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue();
        uint64_t v32 = [v31 address];
        [v8 lastObject];
        uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue();
        uint64_t v34 = [v33 address];

        if (v32 == v34)
        {
          unint64_t v14 = v62 - 1;
          CFTypeID v3 = 1LL;
          goto LABEL_27;
        }
      }
    }

  v105 = [*(id *)(a1 + 16) systemstatsFormat];
  if (v75 && (v105 & 1) == 0)
  {
    if ([*(id *)(a1 + 160) sanitizePaths])
    {
      v106 = v75;
    }

    SACopySanitizedString(v75, 1, 0LL);
    v107 = (void *)objc_claimAutoreleasedReturnValue();
    [v85 printWithFormat:@"%-*s%@\n", 18, "Path: ", v107];
  }

  if (v86)
  {
    SACopySanitizedString(v86, 1, 0LL);
    v108 = (void *)objc_claimAutoreleasedReturnValue();
    [v85 printWithFormat:@"%-*s%@\n", 18, "Identifier: ", v108];
  }

  v109 = a1;
  if (v359)
  {
    [v85 printWithFormat:@"%-*s%@\n", 18, "Version: ", v359];
  }

  else if (v344 != 0)
  {
    if ((void)v344)
    {
      SACopySanitizedString((void *)v344, 1, 0LL);
      v110 = (__CFString *)(id)objc_claimAutoreleasedReturnValue();
    }

    else
    {
      v110 = @"???";
    }

    if (*((void *)&v344 + 1))
    {
      SACopySanitizedString(*((void **)&v344 + 1), 1, 0LL);
      v150 = (__CFString *)(id)objc_claimAutoreleasedReturnValue();
    }

    else
    {
      v150 = @"???";
    }

    [v85 printWithFormat:@"%-*s%@ (%@)\n", 18, "Version: ", v110, v150];

    v109 = a1;
  }

  if (v345)
  {
    SACopySanitizedString(v345, 1, 0LL);
    v151 = (void *)objc_claimAutoreleasedReturnValue();
    [v85 printWithFormat:@"%-*s%@\n", 18, "Build Version: ", v151];
  }

  if (v363)
  {
    SACopySanitizedString(v363, 1, 0LL);
    v152 = (void *)objc_claimAutoreleasedReturnValue();
    [v85 printWithFormat:@"%-*s%@\n", 18, "Product Build Version: ", v152];
  }

  if (v355)
  {
    SACopySanitizedString(v355, 1, 0LL);
    v153 = (void *)objc_claimAutoreleasedReturnValue();
    [v85 printWithFormat:@"%-*s%@\n", 18, "Project Name: ", v153];
  }

  if (v364)
  {
    SACopySanitizedString(v364, 1, 0LL);
    v154 = (void *)objc_claimAutoreleasedReturnValue();
    [v85 printWithFormat:@"%-*s%@\n", 18, "Source Version: ", v154];
  }

  if (v367
    && (!v86
     || ![v367 isEqualToString:v86]
     || [*(id *)(v109 + 16) displayCodesigningIDsMatchingBundleIDs]))
  {
    [v85 printWithFormat:@"%-*s%@\n", 18, "Codesigning ID: ", v367];
  }

  if (v360) {
    [v85 printWithFormat:@"%-*s%@\n", 18, "Team ID: ", v360];
  }
  if (v91)
  {
    [*(id *)(v109 + 160) osProductName];
    v155 = (void *)objc_claimAutoreleasedReturnValue();

    v156 = "Adam ID: ";
    if (v155)
    {
      [*(id *)(v109 + 160) osProductName];
      v157 = (void *)objc_claimAutoreleasedReturnValue();
      v158 = SAIsEmbeddedPlatform(v157);

      v159 = v158 == 0;
      v109 = a1;
      if (v159) {
        v156 = "App Item ID: ";
      }
    }

    v332 = v156;
    v85 = v371;
    objc_msgSend(v371, "printWithFormat:", @"%-*s%llu\n", 18, v332, v91);
  }

  if (v358)
  {
    SACopySanitizedString(v358, 1, 0LL);
    v160 = (void *)objc_claimAutoreleasedReturnValue();
    [v85 printWithFormat:@"%-*s%@\n", 18, "App External ID: ", v160];
  }

  if (v89)
  {
    v161 = "No";
    if (v88) {
      v161 = "Yes";
    }
    objc_msgSend(v85, "printWithFormat:", @"%-*s%s\n", 18, "Is First Party: ", v161);
  }

  if (v90)
  {
    objc_msgSend(v85, "printWithFormat:", @"%-*sYes\n", 18, "Is Beta: ");
    if (v351) {
      [v85 printWithFormat:@"%-*s%@\n", 18, "Cohort: ", v351];
    }
  }

  v114 = v356;
  if (v361) {
    [v85 printWithFormat:@"%-*s%@\n", 18, "Beta Identifier: ", v361];
  }
  v115 = v355;
  if ([v356 count])
  {
    [*(id *)(v109 + 160) sharedCaches];
    v162 = (void *)objc_claimAutoreleasedReturnValue();
    if ((unint64_t)[v162 count] > 1)
    {

LABEL_215:
      v380 = 0u;
      v381 = 0u;
      v378 = 0u;
      v379 = 0u;
      v164 = v356;
      v165 = [v164 countByEnumeratingWithState:&v378 objects:v389 count:16];
      if (v165)
      {
        v166 = v165;
        v167 = *(void *)v379;
        do
        {
          for (i = 0LL; i != v166; ++i)
          {
            if (*(void *)v379 != v167) {
              objc_enumerationMutation(v164);
            }
            _shared_cache_display_string(*(void **)(*((void *)&v378 + 1) + 8 * i));
            v169 = (void *)objc_claimAutoreleasedReturnValue();
            [v371 printWithFormat:@"%-*s%@\n", 18, "Shared Cache: ", v169];
          }

          v166 = [v164 countByEnumeratingWithState:&v378 objects:v389 count:16];
        }

        while (v166);
      }

      v85 = v371;
      v115 = v355;
      v114 = v356;
      v86 = v366;
      v109 = a1;
      goto LABEL_223;
    }

    v163 = [v356 count];

    if (v163 > 1) {
      goto LABEL_215;
    }
    [*(id *)(v109 + 160) sharedCaches];
    v198 = (void *)objc_claimAutoreleasedReturnValue();
    if ([v198 count])
    {
      [v356 firstObject];
      v199 = (void *)objc_claimAutoreleasedReturnValue();
      [MEMORY[0x189603FE8] null];
      v200 = (void *)objc_claimAutoreleasedReturnValue();

      if (v199 == v200)
      {
        [v85 printWithFormat:@"%-*s%@\n", 18, "Shared Cache: ", @"None"];
        goto LABEL_223;
      }
    }

    else
    {
    }

    if ([*(id *)(v109 + 16) displayAllBinaries])
    {
      [v356 firstObject];
      v232 = (void *)objc_claimAutoreleasedReturnValue();
      _shared_cache_display_string(v232);
      v233 = (void *)objc_claimAutoreleasedReturnValue();
      [v85 printWithFormat:@"%-*s%@\n", 18, "Shared Cache: ", v233];
    }
  }
}

    CFTypeID v3 = (__CFString *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"UNKNOWN(0x%x)",  self->_debugid);
    return (NSString *)v3;
  }

  if (debugid > 736428063)
  {
    if (debugid <= 736493575)
    {
      if (debugid == 736428064)
      {
        CFTypeID v3 = @"decode_and_forward";
        return (NSString *)v3;
      }

      if (debugid == 736493572)
      {
        CFTypeID v3 = @"PushToCGEventQueue";
        return (NSString *)v3;
      }
    }

    else
    {
      switch(debugid)
      {
        case 736493576:
          CFTypeID v3 = @"CreateAndPostEventWithCGEvent";
          return (NSString *)v3;
        case 736493580:
          CFTypeID v3 = @"PullEventsFromWindowServerOnConnection";
          return (NSString *)v3;
        case 736493584:
          CFTypeID v3 = @"ReceiveNextEventCommon (for the next event)";
          return (NSString *)v3;
      }
    }

    goto LABEL_46;
  }

  if (debugid <= 736428051)
  {
    if (debugid == 736428044)
    {
      CFTypeID v3 = @"sHIDContinuation";
      return (NSString *)v3;
    }

    if (debugid == 736428048)
    {
      CFTypeID v3 = @"sPostContinuation";
      return (NSString *)v3;
    }

    goto LABEL_46;
  }

  if (debugid == 736428052)
  {
    CFTypeID v3 = @"sAnnotatedContinuation";
    return (NSString *)v3;
  }

  if (debugid == 736428056)
  {
    CFTypeID v3 = @"CGXFilterEventToConnection";
    return (NSString *)v3;
  }

  if (debugid != 736428060) {
    goto LABEL_46;
  }
  CFTypeID v3 = @"post_event_tap_data";
  return (NSString *)v3;
}

LABEL_22:
    int v22 = v30 + 1;
    uint64_t v32 = *__error();
    _sa_logt();
    uint64_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v34 = v33;
    if (v22 < v20)
    {
      if (!os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
      {
LABEL_26:

        *__error() = v32;
        objc_msgSend(v16, "setBytes_not_microstackshots:", objc_msgSend(v16, "bytes_not_microstackshots") + v22);
        goto LABEL_6;
      }

      *(_DWORD *)buf = 134217984;
      v180 = v22;
LABEL_25:
      _os_log_impl( &dword_186C92000,  v34,  OS_LOG_TYPE_INFO,  "Skipping %lu bytes until next microstackshot in the buffer",  buf,  0xCu);
      goto LABEL_26;
    }

    if (!os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
      goto LABEL_28;
    }
    *(_DWORD *)buf = 134217984;
    v180 = v20;
LABEL_72:
    _os_log_error_impl( &dword_186C92000,  v34,  OS_LOG_TYPE_ERROR,  "Remaining %lu bytes do not contain any microstackshots",  buf,  0xCu);
    goto LABEL_28;
  }

  uint64_t v24 = v18 + 320;
  if (v21 < v18 + 320) {
    goto LABEL_5;
  }
  if (*(_DWORD *)(v18 + 27) != -557122643)
  {
    uint64_t v35 = *__error();
    _sa_logt();
    char v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl( &dword_186C92000,  v36,  OS_LOG_TYPE_ERROR,  "Microstackshot buffer doesn't contain task_snapshot after micro_snapshot",  buf,  2u);
    }

    *__error() = v35;
    unsigned int v37 = v20 - 1;
    if (v20 - 1 >= 5)
    {
      uint64_t v38 = 0LL;
      while (*(_DWORD *)(v18 + 1 + v38) != 835010577)
      {
        if (v20 - 5 == ++v38) {
          goto LABEL_59;
        }
      }

      unsigned int v37 = v38;
    }

LABEL_23:
  return v14;
}

          a1 = 0LL;
          goto LABEL_25;
        }
      }

      if (v13) {
        unsigned int v12 = v13;
      }

      goto LABEL_22;
    }

    a1 = !-[SAWaitInfo _displaysContentForPid:tid:options:displayString:nameCallback:](a1, a3, a4, a5, 0LL, 0LL);
  }

    BOOL v8 = v3;
LABEL_23:

    *__error() = v6;
    return v8;
  }

  if (*v2 == 47)
  {
    if (qword_18C4B16C8 != -1) {
      dispatch_once(&qword_18C4B16C8, &__block_literal_global_10);
    }
    if (dword_18C4B16BC < 2) {
      return v3;
    }
    unint64_t v4 = (const char *)MEMORY[0x186E47568](a1);
    if (!v4) {
      return v3;
    }
    unint64_t v5 = v4;
    if (!strcmp(v3, v4)) {
      return v3;
    }
    uint64_t v6 = *__error();
    _sa_logt();
    int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      id v11 = 136315394;
      unsigned int v12 = v3;
      unsigned int v13 = 2080;
      unint64_t v14 = v5;
      _os_log_debug_impl( &dword_186C92000,  v7,  OS_LOG_TYPE_DEBUG,  "preferring dyld installname %s vs file_path %s",  (uint8_t *)&v11,  0x16u);
    }

    goto LABEL_22;
  }

  unsigned int v9 = (const char *)MEMORY[0x186E47568](a1);
  if (!v9) {
    goto LABEL_20;
  }
  BOOL v8 = v9;
  if (*v9 != 47) {
    goto LABEL_20;
  }
LABEL_14:
  if (qword_18C4B16C8 == -1)
  {
    if (!v3) {
      return v8;
    }
  }

  else
  {
    dispatch_once(&qword_18C4B16C8, &__block_literal_global_10);
    if (!v3) {
      return v8;
    }
  }

  if (dword_18C4B16BC >= 2 && strcmp(v3, v8))
  {
    uint64_t v6 = *__error();
    _sa_logt();
    int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      id v11 = 136315394;
      unsigned int v12 = v8;
      unsigned int v13 = 2080;
      unint64_t v14 = v3;
      _os_log_debug_impl( &dword_186C92000,  v7,  OS_LOG_TYPE_DEBUG,  "preferring dyld file_path %s vs installname %s",  (uint8_t *)&v11,  0x16u);
    }

    goto LABEL_23;
  }

  return v8;
}

  return a1;
}

  v248 = 0LL;
  v249 = &v248;
  v250 = 0x2020000000LL;
  v251 = 0x7FFFFFFFFFFFFFFFLL;
  v244 = 0LL;
  v245 = &v244;
  v246 = 0x2020000000LL;
  v247 = 0x7FFFFFFFFFFFFFFFLL;
  v240 = 0LL;
  v241 = &v240;
  v242 = 0x2020000000LL;
  v243 = 0;
  *(void *)buf = 0LL;
  *(void *)&buf[8] = buf;
  *(void *)&uint8_t buf[16] = 0x3032000000LL;
  v255 = __Block_byref_object_copy__4;
  v256 = __Block_byref_object_dispose__4;
  v257 = 0LL;
  v118 = (char *)v17;
  if (self)
  {
    v101 = objc_getProperty(self, v23, 40LL, 1);
    v100 = objc_getProperty(self, v27, 48LL, 1);
    Property = objc_getProperty(self, v28, 56LL, 1);
  }

  else
  {
    v100 = 0LL;
    v101 = 0LL;
    Property = 0LL;
  }

  uint64_t v30 = Property;
  v234 = 0LL;
  v235 = &v234;
  v236 = 0x3032000000LL;
  v237 = __Block_byref_object_copy__4;
  v238 = __Block_byref_object_dispose__4;
  v239 = 0LL;
  v230 = 0LL;
  v231 = &v230;
  v232 = 0x2020000000LL;
  v233 = 0;
  v226 = 0LL;
  v227 = &v226;
  v228 = 0x2020000000LL;
  v229 = 0LL;
  v222 = 0LL;
  v223 = &v222;
  v224 = 0x2020000000LL;
  v225 = 0;
  v218 = 0LL;
  v219 = &v218;
  v220 = 0x2020000000LL;
  v221 = -1;
  v214 = 0LL;
  v215 = &v214;
  v216 = 0x2020000000LL;
  v217 = -1;
  v210 = 0LL;
  v211 = &v210;
  v212 = 0x2020000000LL;
  v213 = -1;
  v206 = 0LL;
  v207 = &v206;
  v208 = 0x2020000000LL;
  v209 = -1;
  v202 = 0LL;
  v203 = &v202;
  v204 = 0x2020000000LL;
  v205 = 0LL;
  v198 = 0LL;
  v199 = &v198;
  v200 = 0x2020000000LL;
  v201 = 0LL;
  v194 = 0LL;
  v195 = &v194;
  v196 = 0x2020000000LL;
  v197 = 0LL;
  v190 = 0LL;
  v191 = &v190;
  v192 = 0x2020000000LL;
  v193 = 0LL;
  v186 = 0LL;
  v187 = &v186;
  v188 = 0x2020000000LL;
  v189 = 0LL;
  v185[0] = 0LL;
  v185[1] = v185;
  v185[2] = 0x2020000000LL;
  v185[3] = 0LL;
  v183[0] = 0LL;
  v183[1] = v183;
  v183[2] = 0x3032000000LL;
  v183[3] = __Block_byref_object_copy__4;
  v183[4] = __Block_byref_object_dispose__4;
  v184 = 0LL;
  v181[0] = 0LL;
  v181[1] = v181;
  v181[2] = 0x3032000000LL;
  v181[3] = __Block_byref_object_copy__4;
  v181[4] = __Block_byref_object_dispose__4;
  v182 = 0LL;
  v177 = 0LL;
  v178 = &v177;
  v179 = 0x2020000000LL;
  v180 = 0LL;
  v175[0] = 0LL;
  v175[1] = v175;
  v175[2] = 0x2020000000LL;
  v176 = 1;
  v133[0] = MEMORY[0x1895F87A8];
  v133[1] = 3221225472LL;
  v133[2] = __123__SASamplePrinter_addHeaderForDispatchQueue_orSwiftTaskStates_orThread_andThreadStateIndexes_toStack_task_taskSampleCount___block_invoke;
  v133[3] = &unk_189F64050;
  v99 = (uint64_t)v15;
  v114 = v15;
  v134 = v114;
  v135 = a1;
  v113 = v20;
  v136 = v113;
  v142 = &v222;
  v166 = v103;
  v167 = v104;
  v168 = v107;
  v169 = v111;
  v170 = (char)v22;
  v171 = v115;
  v172 = v106;
  v173 = v105;
  v174 = v102;
  v164 = v26;
  v165 = v25;
  v112 = v109;
  v137 = v112;
  v143 = v175;
  v144 = &v240;
  uint64_t v31 = v118;
  v138 = v31;
  v108 = v30;
  v139 = v108;
  v117 = v101;
  v140 = v117;
  v116 = v100;
  v141 = v116;
  v145 = &v248;
  v146 = buf;
  v147 = &v244;
  v148 = &v230;
  v149 = &v234;
  v150 = &v226;
  v151 = &v218;
  v152 = &v214;
  v153 = &v210;
  v154 = &v206;
  v155 = &v202;
  v156 = &v198;
  v157 = &v194;
  v158 = v185;
  v159 = v183;
  v160 = v181;
  v161 = &v190;
  v162 = &v186;
  v163 = &v177;
  uint64_t v32 = (void (**)(void, void, void, void))MEMORY[0x186E47C94](v133);
  uint64_t v33 = v32;
  if (v15)
  {
    uint64_t v34 = (void *)*((void *)a1 + 4);
    uint64_t v35 = (void *)*((void *)a1 + 5);
    char v36 = *((void *)a1 + 6);
    unsigned int v37 = *((void *)a1 + 7);
    v131[0] = MEMORY[0x1895F87A8];
    v131[1] = 3221225472LL;
    v131[2] = __123__SASamplePrinter_addHeaderForDispatchQueue_orSwiftTaskStates_orThread_andThreadStateIndexes_toStack_task_taskSampleCount___block_invoke_2;
    v131[3] = &unk_189F64488;
    v132 = v32;
    -[SARecipe enumerateStatesBetweenStartTime:startSampleIndex:endTime:endSampleIndex:reverseOrder:block:]( (uint64_t)v114,  v34,  v36,  v35,  v37,  0,  v131);
    uint64_t v38 = v132;
  }

  else if (v109)
  {
    v129 = 0u;
    v130 = 0u;
    v127 = 0u;
    v128 = 0u;
    uint64_t v38 = v112;
    unsigned int v46 = [v38 countByEnumeratingWithState:&v127 objects:v253 count:16];
    if (v46)
    {
      uint64_t v47 = *(void *)v128;
      do
      {
        for (i = 0LL; i != v46; ++i)
        {
          if (*(void *)v128 != v47) {
            objc_enumerationMutation(v38);
          }
          v49 = *(void **)(*((void *)&v127 + 1) + 8 * i);
          [v49 thread];
          v50 = (void *)objc_claimAutoreleasedReturnValue();
          [v49 threadState];
          v51 = (void *)objc_claimAutoreleasedReturnValue();
          ((void (**)(void, void *, void *, uint64_t))v33)[2]( v33,  v50,  v51,  [v49 threadStateIndex]);
        }

        unsigned int v46 = [v38 countByEnumeratingWithState:&v127 objects:v253 count:16];
      }

      while (v46);
    }
  }

  else if (v110)
  {
    v125 = 0u;
    v126 = 0u;
    v123 = 0u;
    v124 = 0u;
    uint64_t v38 = v110;
    v52 = [v38 countByEnumeratingWithState:&v123 objects:v252 count:16];
    if (v52)
    {
      v53 = *(void *)v124;
      do
      {
        for (j = 0LL; j != v52; ++j)
        {
          if (*(void *)v124 != v53) {
            objc_enumerationMutation(v38);
          }
          v55 = [*(id *)(*((void *)&v123 + 1) + 8 * j) unsignedLongValue];
          [v31 threadStates];
          v56 = (void *)objc_claimAutoreleasedReturnValue();
          [v56 objectAtIndexedSubscript:v55];
          v57 = (void *)objc_claimAutoreleasedReturnValue();
          ((void (**)(void, char *, void *, uint64_t))v33)[2](v33, v31, v57, v55);
        }

        v52 = [v38 countByEnumeratingWithState:&v123 objects:v252 count:16];
      }

      while (v52);
    }
  }

  else
  {
    v79 = *((void *)a1 + 4);
    v80 = *((void *)a1 + 5);
    v81 = *((void *)a1 + 6);
    v82 = *((void *)a1 + 7);
    v120[0] = MEMORY[0x1895F87A8];
    v120[1] = 3221225472LL;
    v120[2] = __123__SASamplePrinter_addHeaderForDispatchQueue_orSwiftTaskStates_orThread_andThreadStateIndexes_toStack_task_taskSampleCount___block_invoke_3;
    v120[3] = &unk_189F64078;
    v122 = v32;
    v121 = v31;
    [v121 enumerateThreadStatesBetweenStartTime:v79 startSampleIndex:v81 endTime:v80 endSampleIndex:v82 reverseOrder:0 block:v120];

    uint64_t v38 = v122;
  }

  __int16 v39 = v249[3];
  if (v39 != 0x7FFFFFFFFFFFFFFFLL)
  {
    if (v39 <= *((void *)a1 + 6)) {
      __int16 v39 = *((void *)a1 + 6);
    }
    v249[3] = v39;
  }

  uint64_t v40 = v245[3];
  uint64_t v41 = v99;
  if (v40 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v42 = *((void *)a1 + 7);
    if (v40 < v42) {
      v42 = v245[3];
    }
    v245[3] = v42;
  }

  if (self) {
    *((void *)self + 4) = v227[3];
  }
  if (v118 && [*((id *)a1 + 20) targetThreadId])
  {
    int v43 = [v31 threadId];
    uint64_t v44 = [*((id *)a1 + 20) targetThreadId];
    if (!v99 || v43 == v44)
    {
      if (v43 == v44) {
        goto LABEL_77;
      }
      goto LABEL_65;
    }
  }

  else if (!v99)
  {
    goto LABEL_65;
  }

  if ([*((id *)a1 + 20) targetDispatchQueueId])
  {
    [*((id *)a1 + 20) targetProcess];
    v45 = (id)objc_claimAutoreleasedReturnValue();
    if (v45 == v113)
    {
      v58 = [v114 identifier];
      uint64_t v41 = v58 == [*((id *)a1 + 20) targetDispatchQueueId];

      if ((v41 & 1) != 0) {
        goto LABEL_77;
      }
    }

    else
    {
    }
  }

      if ((unint64_t)[v14[6] count] >= 2)
      {
        uint64_t v26 = objc_alloc(&OBJC_CLASS___SAThreadCallTree);
        uint64_t v27 = 0LL;
        goto LABEL_28;
      }

      uint64_t v28 = objc_getProperty(v14, v24, 48LL, 1);
LABEL_25:
      [v28 firstObject];
      uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue();
      [MEMORY[0x189603FE8] null];
      uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue();

      if (v27 == v29)
      {

        uint64_t v27 = 0LL;
      }

      uint64_t v26 = objc_alloc(&OBJC_CLASS___SAThreadCallTree);
      if (!v14)
      {
        uint64_t v30 = 0LL;
        goto LABEL_29;
      }

LABEL_59:
    int v22 = v37 + 1;
    uint64_t v32 = *__error();
    _sa_logt();
    v48 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v34 = v48;
    if (v22 < v20)
    {
      if (!os_log_type_enabled(v48, OS_LOG_TYPE_INFO)) {
        goto LABEL_26;
      }
      *(_DWORD *)buf = 134217984;
      v180 = v22;
      goto LABEL_25;
    }

    if (!os_log_type_enabled(v48, OS_LOG_TYPE_ERROR)) {
      goto LABEL_28;
    }
    *(_DWORD *)buf = 134217984;
    v180 = v20;
    goto LABEL_72;
  }

  uint64_t v25 = *(_DWORD *)(v18 + 107);
  if (!*(_DWORD *)(v18 + 31))
  {
    if ((v25 & 2) == 0) {
      goto LABEL_13;
    }
LABEL_37:
    uint64_t v26 = 1;
    uint64_t v27 = 24;
    goto LABEL_38;
  }

  if ((v25 & 1) != 0) {
    goto LABEL_37;
  }
LABEL_13:
  uint64_t v26 = 0;
  uint64_t v27 = 20;
LABEL_38:
  __int16 v39 = *(_DWORD *)(v18 + 83);
  uint64_t v40 = v24 + v27 * (unint64_t)v39;
  if (v21 >= v40 && v21 >= v40 + 316)
  {
    if (*(_DWORD *)v40 == -17958194)
    {
      int v22 = 0LL;
      if ((*(_BYTE *)(v40 + 68) & 4) != 0) {
        uint64_t v41 = (char *)(v40 + 324);
      }
      else {
        uint64_t v41 = (char *)(v40 + 316);
      }
      if ((*(_BYTE *)(v40 + 68) & 4) != 0) {
        v42 = (uint64_t *)(v40 + 316);
      }
      else {
        v42 = 0LL;
      }
      int v43 = 2;
      if ((*(_BYTE *)(v40 + 68) & 2) != 0) {
        uint64_t v44 = 3;
      }
      else {
        uint64_t v44 = 2;
      }
      v45 = (unint64_t)*(unsigned int *)(v40 + 4) << v44;
      if ((*(_BYTE *)(v40 + 68) & 1) != 0) {
        int v43 = 3;
      }
      unsigned int v46 = (unint64_t)&v41[v45 + ((unint64_t)*(unsigned int *)(v40 + 8) << v43)];
      if (v21 < v46) {
        goto LABEL_6;
      }
      v152 = v27;
      v154 = v26;
      v164 = v24 + v27 * (unint64_t)v39;
      __count = *(unsigned int *)(v18 + 83);
      v158 = v42;
      __src = (unsigned __int8 *)(v18 + 320);
      v161 = *(_DWORD *)(v18 + 107);
      v156 = v41;
      v157 = &v41[v45];
      if (__strlcpy_chk() == 16) {
        __strlcpy_chk();
      }
      uint64_t v47 = (double)*(unint64_t *)(v18 + 8)
          - *MEMORY[0x189604DA8]
          + (double)*(unint64_t *)(v18 + 16) / 1000000.0;
      if (a8 != 0.0 && v47 > a8)
      {
        int v22 = -2LL;
        goto LABEL_6;
      }

      int v22 = v46 - v18;
      if (a7 != 0.0 && v47 < a7
        || (a3 & 0xFFFFFFFB) != 0 && (a3 & 0xFB & *(_BYTE *)(v18 + 24)) == 0
        || (a4 & 0x80000000) == 0 && *(_DWORD *)(v18 + 31) != a4
        || a5 && *(void *)(v164 + 28) != a5)
      {
        objc_msgSend( v16,  "setNum_microstackshots_filtered_out:",  objc_msgSend(v16, "num_microstackshots_filtered_out") + 1);
        objc_msgSend( v16,  "setBytes_microstackshots_filtered_out:",  objc_msgSend(v16, "bytes_microstackshots_filtered_out") + v22);
        goto LABEL_6;
      }

      v54 = (*(_BYTE *)(a1 + 408) & 1) != 0 && v47 > SATimeOfBootForLiveMachine();
      v55 = +[SATimestamp timestampWithMachAbsTime:machAbsTimeSec:machContTime:machContTimeSec:wallTime:]( &OBJC_CLASS___SATimestamp,  "timestampWithMachAbsTime:machAbsTimeSec:machContTime:machContTimeSec:wallTime:",  0LL,  0LL,  0.0,  0.0,  v47);
      v57 = (id *)(a1 + 48);
      v56 = *(void **)(a1 + 48);
      if (v56 && [v56 ge:v55])
      {
        v143 = v54;
        __base = -[SASampleStore taskWithPid:atTimestamp:](a1, *(unsigned int *)(v18 + 31), v55);
        [__base threads];
        v58 = (void *)objc_claimAutoreleasedReturnValue();
        [MEMORY[0x189607968] numberWithUnsignedLongLong:*(void *)(v164 + 28)];
        v59 = (void *)objc_claimAutoreleasedReturnValue();
        [v58 objectForKeyedSubscript:v59];
        v60 = (void *)objc_claimAutoreleasedReturnValue();

        [v60 firstThreadStateOnOrAfterTime:v55 sampleIndex:0x7FFFFFFFFFFFFFFFLL];
        v61 = (void *)objc_claimAutoreleasedReturnValue();
        [v61 endTimestamp];
        v62 = (void *)objc_claimAutoreleasedReturnValue();
        obj = v55;
        v63 = [v62 eq:v55];

        if ((v63 & 1) != 0)
        {
          v64 = 2LL;
        }

        else
        {
          v65 = *__error();
          _sa_logt();
          v66 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
          {
            v140 = *(_DWORD *)(v18 + 31);
            v142 = (id) _CopyStringForTime(3, v47);
            v139 = -[__CFString UTF8String](v142, "UTF8String");
            [*(id *)(a1 + 48) wallTime];
            *(_DWORD *)v171 = 136315906;
            v172 = buf;
            v173 = 1024;
            v174 = v140;
            v175 = 2080;
            v176 = v139;
            v177 = 2048;
            v178 = v138 - v47;
            _os_log_error_impl( &dword_186C92000,  v66,  OS_LOG_TYPE_ERROR,  "Not including microstackshot for %s [%d] at %s due being out of order (before previous by %fs)",  v171,  0x26u);
          }

          *__error() = v65;
          v64 = 4LL;
        }

        v55 = obj;
        v54 = v143;
        v57 = (id *)(a1 + 48);
      }

      else
      {
        v64 = 0LL;
      }

      if (_DWORD)__count || ([(id)a1 keepMicrostackshotsWithoutLoadInfo])
      {
        if (!v64)
        {
          location = v57;
          v144 = v54;
          obja = v55;
          -[SAMicrostackshotStatistics addMicro:task:thread:size:errors:](v16, v18, v18 + 27, v164, v22, 0LL);
          v141 = 0LL;
          if (!uuid_is_null((const unsigned __int8 *)(v18 + 59)))
          {
            v141 = -[SASampleStore sharedCacheWithUUID:slide:slidBaseAddress:](a1, v18 + 59, *(void *)(v18 + 75), -1LL);
          }

          if ((_DWORD)__count)
          {
            v67 = __count;
            v68 = (unsigned __int8 *)calloc(__count, 0x18uLL);
            __basea = v68;
            if ((v154 & 1) != 0)
            {
              memmove(v68, __src, v152 * (unint64_t)__count);
            }

            else
            {
              v70 = (const unsigned __int8 *)(v18 + 324);
              v71 = v68 + 8;
              do
              {
                *((void *)v71 - 1) = *((unsigned int *)v70 - 1);
                uuid_copy(v71, v70);
                v70 += 20;
                v71 += 24;
                --v67;
              }

              while (v67);
            }

            v72 = 0LL;
            v69 = 0;
            else {
              v73 = __count;
            }
            v74 = __basea + 8;
            do
            {
              if (!uuid_is_null(v74))
              {
                v75 = *((void *)v74 - 1);
                if (v75)
                {
                  if (v72 != v69)
                  {
                    v76 = &__basea[24 * v69];
                    *(void *)v76 = v75;
                    uuid_copy(v76 + 8, v74);
                  }

                  ++v69;
                }
              }

              ++v72;
              v74 += 24;
            }

            while (v73 != v72);
            v78 = (_DWORD)__count != v69 && v69 != 0;
            __counta = v78;
            if (v69 && *(_DWORD *)(v18 + 31))
            {
              mergesort_b(__basea, v69, 0x18uLL, &__block_literal_global_323);
              __src = __basea;
            }

            else
            {
              __src = __basea;
            }
          }

          else
          {
            __counta = 0;
            __basea = 0LL;
            v69 = 0;
          }

          if ((*(_BYTE *)(a1 + 408) & 1) != 0)
          {
            if (!*(void *)(a1 + 192)) {
              [(id)a1 gatherMachineArchitecture];
            }
            if (!*(_DWORD *)(a1 + 184) || !*(_DWORD *)(a1 + 188)) {
              mach_timebase_info((mach_timebase_info_t)(a1 + 184));
            }
            if (!*(_DWORD *)(a1 + 344) || !*(_DWORD *)(a1 + 348))
            {
              -[SASampleStore gatherHWPageSize]((int *)a1);
              -[SASampleStore gatherVMPageSize]((int *)a1);
            }
          }

          else if (!*(_BYTE *)(a1 + 288))
          {
            v79 = (FILE **)MEMORY[0x1895F89D0];
            if (!*(void *)(a1 + 192))
            {
              v80 = *__error();
              _sa_logt();
              v81 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)v171 = 0;
                _os_log_impl( &dword_186C92000,  v81,  OS_LOG_TYPE_DEFAULT,  "WARNING: Machine architecture unknown for microstackshots, task architectures will be unknown",  v171,  2u);
              }

              *__error() = v80;
              fwrite( "Machine architecture unknown for microstackshots, task architectures will be unknown\n",  0x55uLL,  1uLL,  *v79);
              *(_BYTE *)(a1 + 28_Block_object_dispose(va, 8) = 1;
            }

            if (!*(_DWORD *)(a1 + 184) || !*(_DWORD *)(a1 + 188))
            {
              v82 = *__error();
              _sa_logt();
              v83 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)v171 = 0;
                _os_log_impl( &dword_186C92000,  v83,  OS_LOG_TYPE_DEFAULT,  "WARNING: Mach timebase unknown for microstackshots, cpu times will be unknown",  v171,  2u);
              }

              *__error() = v82;
              fwrite("Mach timebase unknown for microstackshots, cpu times will be unknown\n", 0x45uLL, 1uLL, *v79);
              *(_BYTE *)(a1 + 28_Block_object_dispose(va, 8) = 1;
            }

            if (!*(_DWORD *)(a1 + 344) || !*(_DWORD *)(a1 + 348))
            {
              v84 = *__error();
              _sa_logt();
              v85 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)v171 = 0;
                _os_log_impl( &dword_186C92000,  v85,  OS_LOG_TYPE_DEFAULT,  "WARNING: Page sizes unknown for microstackshots, task footprints will be unknown",  v171,  2u);
              }

              *__error() = v84;
              fwrite("Page sizes unknown for microstackshots, task footprints will be unknown\n", 0x48uLL, 1uLL, *v79);
              *(_BYTE *)(a1 + 28_Block_object_dispose(va, 8) = 1;
            }
          }

          if ((v161 & 0x10000000) != 0 && (v86 = *(void *)(a1 + 192)) != 0) {
            v87 = SAArchitectureForTranslatedTask(v86);
          }
          else {
            v87 = 0LL;
          }
          if (!*(void *)(a1 + 40)) {
            objc_storeStrong((id *)(a1 + 40), obja);
          }
          objc_storeStrong(location, obja);
          ++*(void *)(a1 + 32);
          v88 = -[SASampleStore taskForMicrostackshotTask:taskName:loadInfos:numLoadInfos:sharedCache:loadInfosIsPartial:timestamp:architecture:needAOTInfo:isFromCurrentBoot:]( a1,  v18 + 27,  (char *)buf,  (os_log_s *)__src,  v69,  v141,  __counta,  obja,  v87,  (v161 & 0x10000000) != 0,  v144);
          v89 = v88;
          v90 = *(void *)(v18 + 111);
          v155 = *(_DWORD *)(v18 + 119);
          locationa = *(_DWORD *)(v18 + 123);
          if (v90 && v88) {
            *(void *)(v88 + 144) = v90;
          }
          v91 = +[SATaskState stateWithStackshotTaskV1:machTimebase:hwPageSize:startTimestamp:endTimestamp:startSampleIndex:endSampleIndex:]( (uint64_t)&OBJC_CLASS___SATaskState,  v18 + 27,  *(void *)(a1 + 184),  *(_DWORD *)(a1 + 344),  obja,  obja,  0x7FFFFFFFFFFFFFFFLL,  0x7FFFFFFFFFFFFFFFLL);
          if (v89)
          {
            [*(id *)(v89 + 8) addObject:v91];
            [*(id *)(v89 + 8) count];
          }

          v153 = (void *)v91;
          [(id)v89 threads];
          v92 = (void *)objc_claimAutoreleasedReturnValue();
          [MEMORY[0x189607968] numberWithUnsignedLongLong:*(void *)(v164 + 28)];
          v93 = (void *)objc_claimAutoreleasedReturnValue();
          [v92 objectForKeyedSubscript:v93];
          v94 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v94)
          {
            v94 = +[SAThread threadWithId:]((uint64_t)&OBJC_CLASS___SAThread, *(void *)(v164 + 28));
            -[SATask addThread:](v89, v94);
          }

          __srca = (id *)v94;
          v95 = objc_alloc_init(&OBJC_CLASS___SAFrameIterator);
          -[SAFrameIterator setBacktracer:](v95, "setBacktracer:", 2LL);
          v96 = *(_DWORD *)(v18 + 31);
          [(id)v89 binaryLoadInfos];
          v97 = (void *)objc_claimAutoreleasedReturnValue();
          __countb = v95;
          if (v96)
          {
            -[SAFrameIterator setUserBinaryLoadInfos:](v95, "setUserBinaryLoadInfos:", v97);

            if (v89) {
              v98 = *(_BYTE *)(v89 + 73) & 1;
            }
            else {
              v98 = 0LL;
            }
            -[SAFrameIterator setAssumeUserBinaryLoadInfosContainMainBinary:]( v95,  "setAssumeUserBinaryLoadInfosContainMainBinary:",  v98);
            [(id)v89 sharedCache];
            v99 = (void *)objc_claimAutoreleasedReturnValue();
            -[SAFrameIterator setSharedCache:](v95, "setSharedCache:", v99);

            if ((v161 & 0x10000000) == 0)
            {
LABEL_178:
              v100 = *(_DWORD *)(v164 + 8);
              if (v100)
              {
                v101 = *(unsigned __int16 *)(v164 + 74);
                v102 = ((v101 - 1) < 0xFFFE) & (v100 > v101);
                else {
                  v103 = v100;
                }
                else {
                  v104 = 0LL;
                }
                v162 = v104;
                v145 = v102 << 63 >> 63;
                v105 = calloc(v103, 8uLL);
                v106 = v105;
                if ((*(_BYTE *)(v164 + 68) & 1) != 0)
                {
                  memcpy(v105, v157, 8 * v103);
                }

                else if ((_DWORD)v103)
                {
                  v107 = (unsigned int *)v157;
                  v108 = v105;
                  v109 = v103;
                  do
                  {
                    v110 = *v107++;
                    *v108++ = v110;
                    --v109;
                  }

                  while (v109);
                }

                -[SAFrameIterator setUserFrames:](v95, "setUserFrames:", v106);
                -[SAFrameIterator setNumUserFrames:](v95, "setNumUserFrames:", v103);
                if ((_DWORD)v162)
                {
                  v111 = calloc(v162, 8uLL);
                  v112 = v111;
                  if ((*(_BYTE *)(v164 + 68) & 1) != 0)
                  {
                    memcpy(v111, &v157[8 * v101], 8 * v162);
                  }

                  else
                  {
                    v113 = &v157[4 * v101];
                    v114 = v111;
                    v115 = v162;
                    do
                    {
                      v116 = *(_DWORD *)v113;
                      v113 += 4;
                      *v114++ = v116;
                      --v115;
                    }

                    while (v115);
                  }

                  -[SAFrameIterator setSwiftAsyncFrames:](v95, "setSwiftAsyncFrames:", v112);
                  -[SAFrameIterator setNumSwiftAsyncFrames:](v95, "setNumSwiftAsyncFrames:", v162);
                  -[SAFrameIterator setSwiftAsyncStitchIndex:](v95, "setSwiftAsyncStitchIndex:", v103);
                }
              }

              else
              {
                v145 = 0LL;
              }

              v117 = v164;
              v118 = *(unsigned int *)(v164 + 4);
              if ((_DWORD)v118)
              {
                v119 = calloc(v118, 8uLL);
                v120 = v119;
                v121 = *(unsigned int *)(v164 + 4);
                if ((*(_BYTE *)(v164 + 68) & 2) != 0)
                {
                  memcpy(v119, v156, 8 * v121);
                }

                else
                {
                  v122 = (unsigned int *)v156;
                  if ((_DWORD)v121)
                  {
                    v123 = v119;
                    do
                    {
                      v124 = *v122++;
                      *v123++ = v124;
                      --v121;
                    }

                    while (v121);
                  }
                }

                -[SAFrameIterator setKernelFrames:](v95, "setKernelFrames:", v120);
                v117 = v164;
                -[SAFrameIterator setNumKernelFrames:](v95, "setNumKernelFrames:", *(unsigned int *)(v164 + 4));
              }

              v170 = 0LL;
              v125 = -[SATask leafFrameAfterAddingStack:leafOfCRootFramesReplacedBySwiftAsync:](v89, v95, &v170);
              v163 = v170;
              v165 = (void *)v125;
              v126 = +[SAThreadStateMicrostackshot stateWithMicrostackshot:thread:startTimestamp:endTimestamp:startSampleIndex:endSampleIndex:leafUserFrame:leafOfCRootFramesReplacedBySwiftAsync:leafKernelFrame:machTimebase:]( &OBJC_CLASS___SAThreadStateMicrostackshot,  "stateWithMicrostackshot:thread:startTimestamp:endTimestamp:startSampleIndex:endSampleIndex:leafUserFrame :leafOfCRootFramesReplacedBySwiftAsync:leafKernelFrame:machTimebase:",  v18,  v117,  obja,  obja,  0x7FFFFFFFFFFFFFFFLL,  0x7FFFFFFFFFFFFFFFLL,  v125,  v163,  0LL,  *(void *)(a1 + 184));
              v127 = (id *)v126;
              if (v155 != -1)
              {
                if (!v126)
                {
LABEL_214:
                  v128 = (uint64_t)__srca;
                  if (__srca)
                  {
                    [__srca[1] addObject:v126];
                    v128 = [__srca[1] count] - 1;
                  }

                  if (v158)
                  {
                    [(id)v89 dispatchQueues];
                    v129 = (void *)objc_claimAutoreleasedReturnValue();
                    [MEMORY[0x189607968] numberWithUnsignedLongLong:*v158];
                    v130 = (void *)objc_claimAutoreleasedReturnValue();
                    [v129 objectForKeyedSubscript:v130];
                    v131 = (_BYTE *)objc_claimAutoreleasedReturnValue();

                    if (!v131)
                    {
                      +[SADispatchQueue dispatchQueueWithId:]((uint64_t)&OBJC_CLASS___SADispatchQueue, *v158);
                      v131 = (_BYTE *)objc_claimAutoreleasedReturnValue();
                      -[SATask addDispatchQueue:](v89, v131);
                    }
                    v132 = +[SARecipeState stateWithThread:threadStateIndex:]( (uint64_t)&OBJC_CLASS___SADispatchQueueState,  __srca,  v128);
                    if (v131)
                    {
                      if (v131[24]) {
                        v133 = 0LL;
                      }
                      else {
                        v133 = v131 + 24;
                      }
                      -[SARecipe addState:hasConcurrentExecution:]((uint64_t)v131, v132, v133);
                    }
                  }

                  if (v145)
                  {
                    [MEMORY[0x189607968] numberWithUnsignedLongLong:-1];
                    v134 = (void *)objc_claimAutoreleasedReturnValue();
                    [(id)v89 swiftTasks];
                    v135 = (void *)objc_claimAutoreleasedReturnValue();
                    [v135 objectForKeyedSubscript:v134];
                    v136 = (void *)objc_claimAutoreleasedReturnValue();

                    if (!v136)
                    {
                      v136 = +[SADispatchQueue dispatchQueueWithId:]((uint64_t)&OBJC_CLASS___SASwiftTask, -1LL);
                      -[SATask addSwiftTask:](v89, v136);
                    }

                    if (v127) {
                      objc_storeWeak(v127 + 15, v136);
                    }
                    v137 = +[SARecipeState stateWithThread:threadStateIndex:]( (uint64_t)&OBJC_CLASS___SASwiftTaskState,  __srca,  v128);
                    if (v136) {
                      -[SARecipe addState:hasConcurrentExecution:]((uint64_t)v136, v137, 0LL);
                    }
                  }

                  else if (v127)
                  {
                    objc_storeWeak(v127 + 15, 0LL);
                  }

                  if (__basea) {
                    free(__basea);
                  }

                  v55 = obja;
                  goto LABEL_238;
                }

                *(_DWORD *)(v126 + 2_Block_object_dispose(va, 8) = v155;
              }

              if (locationa != -1 && v126) {
                *(_DWORD *)(v126 + 32) = locationa;
              }
              goto LABEL_214;
            }
            v97 = -[SASampleStore addressTranslationsForPid:](a1, [(id)v89 pid]);
            -[SAFrameIterator setAddressTranslations:](v95, "setAddressTranslations:", v97);
          }

          else
          {
            -[SAFrameIterator setKernelBinaryLoadInfos:](v95, "setKernelBinaryLoadInfos:", v97);
          }

          goto LABEL_178;
        }
      }

      else
      {
        ++*(void *)(a1 + 280);
        v64 |= 8uLL;
      }

      -[SAMicrostackshotStatistics addMicro:task:thread:size:errors:](v16, v18, v18 + 27, v164, v22, v64);
LABEL_238:

      goto LABEL_6;
    }

    v49 = *__error();
    _sa_logt();
    v50 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl( &dword_186C92000,  v50,  OS_LOG_TYPE_ERROR,  "Microstackshot buffer doesn't contain thread_snapshot after task_snapshot",  buf,  2u);
    }

    *__error() = v49;
    v51 = v20 - 1;
    if (v20 - 1 >= 5)
    {
      v52 = 0LL;
      while (*(_DWORD *)(v18 + 1 + v52) != 835010577)
      {
        if (v20 - 5 == ++v52) {
          goto LABEL_74;
        }
      }

      v51 = v52;
    }

                          if ((v1 & 0x4000) != 0) {
                            goto LABEL_127;
                          }
                          goto LABEL_60;
                        }

        if (qword_18C4B13C0)
        {
          int v43 = *__error();
          fprintf( (FILE *)qword_18C4B13C0,  "%'llu WARNING: Missing first dyld tracepoint on thread 0x%llx\n",  *(void *)a2,  *((void *)a2 + 5));
          *__error() = v43;
        }

        goto LABEL_69;
      case 12:
        LOBYTE(v13) = 1;
LABEL_23:
        uuid_t uu = vuzp1q_s32(*(int32x4_t *)(a2 + 2), *(int32x4_t *)(a2 + 6));
        if (uuid_is_null((const unsigned __int8 *)&uu))
        {
          if (qword_18C4B13C0)
          {
LABEL_25:
            uint64_t v25 = *__error();
            fprintf( (FILE *)qword_18C4B13C0,  "%'llu WARNING: null UUID in dyld tracepoint on thread 0x%llx\n",  *(void *)a2,  *((void *)a2 + 5));
            uint64_t v26 = __error();
LABEL_57:
            *uint64_t v26 = v25;
          }

          goto LABEL_96;
        }

        if (v9 && !objc_getProperty((id)v9, v24, 24LL, 1))
        {
          if (objc_getProperty((id)v9, v27, 48LL, 1)) {
            goto LABEL_87;
          }
          v50 = *__error();
          _sa_logt();
          v51 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
          {
            [(id)v9 debugDescription];
            a2 = (__int32 *) objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 136315138;
            v83 = [a2 UTF8String];
            _os_log_error_impl( &dword_186C92000,  v51,  OS_LOG_TYPE_ERROR,  "No uuid and no path for dyld info %s",  buf,  0xCu);
          }

          *__error() = v50;
          unint64_t v5 = [(id)v9 debugDescription];
          v52 = [v5 UTF8String];
          _SASetCrashLogMessage(1549, "No uuid and no path for dyld info %s", v53, v54, v55, v56, v57, v58, v52);

          _os_crash();
          __break(1u);
LABEL_80:
          if (objc_getProperty((id)v9, v34, 48LL, 1))
          {
LABEL_92:
            uuidForBytes((uint64_t)&uu);
            v70 = (void *)objc_claimAutoreleasedReturnValue();
            v76 = v70;
            if (v9)
            {
              objc_setProperty_atomic((id)v9, v75, v70, 24LL);

              *(void *)(v9 + 32) = *((void *)a2 + 3);
              *(_BYTE *)(v9 + _Block_object_dispose(va, 8) = v11;
              goto LABEL_94;
            }

            goto LABEL_102;
          }

          unsigned int v13 = *__error();
          _sa_logt();
          v59 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
          {
            [(id)v9 debugDescription];
            a2 = (__int32 *) objc_claimAutoreleasedReturnValue();
            v60 = [a2 UTF8String];
            *(_DWORD *)buf = 136315138;
            v83 = v60;
            _os_log_error_impl( &dword_186C92000,  v59,  OS_LOG_TYPE_ERROR,  "No uuid and no path for dyld info %s",  buf,  0xCu);
          }

          *__error() = v13;
          unint64_t v5 = [(id)v9 debugDescription];
          v61 = [v5 UTF8String];
          _SASetCrashLogMessage(1474, "No uuid and no path for dyld info %s", v62, v63, v64, v65, v66, v67, v61);

          _os_crash();
          __break(1u);
        }

        else
        {
          *(_DWORD *)buf = -1;
          if (v80) {
            uint64_t v28 = v80[3];
          }
          else {
            uint64_t v28 = 0LL;
          }
          uint64_t v29 = -[SASampleStore existingTaskForEvent:inSession:returningPid:](v6, (uint64_t)a2, v28, buf);
          uint64_t v30 = (void *)v29;
          if ((*(_DWORD *)buf & 0x80000000) != 0)
          {
            if (qword_18C4B13C0)
            {
              uint64_t v47 = *__error();
              fprintf( (FILE *)qword_18C4B13C0,  "%'llu WARNING: Unable to determine pid for dyld on thread 0x%llx: %d\n",  *(void *)a2,  *((void *)a2 + 5),  *(_DWORD *)buf);
              *__error() = v47;
            }

LABEL_96:
LABEL_97:

            v78 = *(void *)(a1 + 40);
            if (v78) {
              *(void *)(v78 + 32) = v5;
            }
            return;
          }

          if (v29) {
            goto LABEL_86;
          }
          uint64_t v31 = (_BYTE *)ktrace_get_execname_for_thread();
          if (v31 && *v31)
          {
            SANSStringForCString(v31);
            uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_85:
            -[SASampleStore taskForPid:andName:didExecAtTimestamp:](v6, *(unsigned int *)buf, v32, 0LL);
            uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue();

LABEL_86:
            v68 = -[SADyldInfo initWithTask:]((id *)objc_alloc(&OBJC_CLASS___SADyldInfo), v30);

            [MEMORY[0x189607968] numberWithUnsignedLongLong:*((void *)a2 + 5)];
            v69 = (void *)objc_claimAutoreleasedReturnValue();
            [v81 setObject:v68 forKeyedSubscript:v69];

            unsigned int v9 = (uint64_t)v68;
LABEL_87:
            uuidForBytes((uint64_t)&uu);
            v70 = (void *)objc_claimAutoreleasedReturnValue();
            v72 = v70;
            if (v9)
            {
              objc_setProperty_atomic((id)v9, v71, v70, 24LL);

              *(_BYTE *)(v9 + _Block_object_dispose(va, 8) = v13;
              goto LABEL_94;
            }

    if ((a2 & 0x800) == 0) {
      goto LABEL_70;
    }
    goto LABEL_60;
  }

LABEL_28:
    *__error() = v32;
    objc_msgSend(v16, "setBytes_not_microstackshots:", objc_msgSend(v16, "bytes_not_microstackshots") + v20);
    int v22 = -1LL;
    goto LABEL_6;
  }

  objc_sync_exit(v6);

  return v16;
}

  else {
    uint64_t v27 = 0LL;
  }
  uint64_t v28 = +[SABinary binaryWithUUID:absolutePath:](&OBJC_CLASS___SABinary, "binaryWithUUID:absolutePath:", v11, v27);
  unsigned int v9 = (void *)v28;
  if (v28 && (!*(void *)(v28 + 80) || !*(void *)(v28 + 40) || ![*(id *)(v28 + 56) count]))
  {
    uint64_t v29 = v9;
    objc_sync_enter(v29);
    if (!v9[10])
    {
      uint64_t v34 = (char *)DyldImagePath(a2);
      if (v34)
      {
        if (*v34)
        {
          uint64_t v35 = SANSStringForCString(v34);
          char v36 = (void *)v9[10];
          v9[10] = v35;
        }
      }
    }

    v53 = 0LL;
    v54 = &v53;
    v55 = 0x2020000000LL;
    v56 = -1LL;
    v49 = 0LL;
    v50 = &v49;
    v51 = 0x2020000000LL;
    v52 = 0LL;
    v45 = 0LL;
    unsigned int v46 = &v45;
    uint64_t v47 = 0x2020000000LL;
    v48 = 0LL;
    uint64_t v41 = 0LL;
    v42 = &v41;
    int v43 = 0x2020000000LL;
    uint64_t v44 = 0LL;
    uint64_t v30 = MEMORY[0x1895F87A8];
    *(void *)buf = MEMORY[0x1895F87A8];
    *(void *)&buf[8] = 3221225472LL;
    *(void *)&uint8_t buf[16] = __33__SABinary_addInfoFromDyldImage___block_invoke;
    v60 = &unk_189F629E8;
    v61 = v29;
    v62 = &v49;
    v63 = &v53;
    v64 = &v45;
    v65 = &v41;
    DyldImageEnumerateSegments(a2, buf);
    uint64_t v31 = v42[3];
    if (v31 == v54[3])
    {
      uint64_t v32 = v50[3] - v31;
      if (v32 == v46[3])
      {
        if (!v29[5]) {
          -[SABinary setLength:](v29, v32);
        }
        v40[0] = v30;
        v40[1] = 3221225472LL;
        v40[2] = __33__SABinary_addInfoFromDyldImage___block_invoke_2;
        v40[3] = &unk_189F62A10;
        v40[4] = v29;
        v40[5] = &v41;
        DyldImageEnumerateSegments(a2, v40);
      }
    }

    if (-[SASegment isEmpty]((void *)v29[6]))
    {
      uint64_t v33 = (void *)v29[6];
      v29[6] = 0LL;
    }

    _Block_object_dispose(&v41, 8);
    _Block_object_dispose(&v45, 8);
    _Block_object_dispose(&v49, 8);
    _Block_object_dispose(&v53, 8);
    objc_sync_exit(v29);
  }

LABEL_6:
  objc_autoreleasePoolPop(v6);
  return v9;
}

  return v25;
}

  BOOL v8 = v35;
  if ((([*(id *)(v34 + 32) containsObject:&unk_189F823B8] & 1) != 0 || (unsigned int v9 = v40[2]()) == 0)
    && (([*(id *)(v34 + 32) containsObject:&unk_189F82400] & 1) != 0 || (unsigned int v9 = v39[2]()) == 0)
    && (([*(id *)(v34 + 32) containsObject:&unk_189F82430] & 1) != 0 || (unsigned int v9 = v38[2]()) == 0)
    && (([*(id *)(v34 + 32) containsObject:&unk_189F82448] & 1) != 0 || (unsigned int v9 = v37[2]()) == 0)
    && (([*(id *)(v34 + 32) containsObject:&unk_189F82388] & 1) != 0 || (unsigned int v9 = v36[2]()) == 0))
  {
    unsigned int v9 = 0LL;
  }

      uint64_t v30 = objc_getProperty(v14, v25, 120LL, 1);
LABEL_29:
      uint64_t v31 = (void *)-[SAThreadCallTree initWithThread:dispatchQueue:swiftTask:rootObjects:]( (id *)&v26->super.super.isa,  v15,  v21,  v27,  v30);
      [v8 addObject:v31];

      if (v11 == ++v13)
      {
        uint64_t v32 = [v9 countByEnumeratingWithState:&v35 objects:v39 count:16];
        id v11 = v32;
        if (!v32) {
          goto LABEL_36;
        }
        goto LABEL_8;
      }
    }
  }

  unint64_t v5 = 0LL;
LABEL_37:

  return v5;
}

LABEL_5:
  int v22 = 0LL;
LABEL_6:
  objc_autoreleasePoolPop(context);
LABEL_7:

  return v22;
}

  BOOL v8 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_8:

  return v8;
}

LABEL_10:
  return v18;
}

        unsigned int v10 = *__error();
        _sa_logt();
        id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          v45 = -[SASegment nonInlineSymbolAtOffsetIntoSegment:]( *(void **)(a1 + 32),  *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL));
          [v45 debugDescription];
          unsigned int v46 = (void *)objc_claimAutoreleasedReturnValue();
          [*(id *)(a1 + 32) debugDescription];
          uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412546;
          v51 = v46;
          v52 = 2112;
          v53 = v47;
          _os_log_error_impl( &dword_186C92000,  v11,  OS_LOG_TYPE_ERROR,  "No symbol name for inline symbol (after non-inline symbol %@ in %@)",  buf,  0x16u);
        }

        BOOL v8 = 0LL;
        *__error() = v10;
        goto LABEL_20;
      }
    }

    else
    {
      BOOL v8 = 0LL;
    }

    -[SASegment addNonInlineSymbolWithOffsetIntoSegment:length:name:](*(void **)(a1 + 32), v6, v5, v8);
    unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = v6;
    if (!v9)
    {
LABEL_20:

      return;
    }

    goto LABEL_15;
  }
}
}
}
}

  BOOL v8 = 1LL;
LABEL_13:

  return v8;
}

void sub_186CB489C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

LABEL_25:
  int v18 = *(void **)(*(void *)(a1 + 32) + 256LL);
  if (!v18)
  {
LABEL_37:
    int v7 = 0;
    goto LABEL_6;
  }

  __int16 v39 = 0u;
  uint64_t v40 = 0u;
  unsigned int v37 = 0u;
  uint64_t v38 = 0u;
  int v19 = v18;
  uint64_t v20 = [v19 countByEnumeratingWithState:&v37 objects:v41 count:16];
  if (v20)
  {
    uint64_t v21 = v20;
    uint64_t v29 = v6;
    int v22 = *(void *)v38;
LABEL_28:
    uint64_t v23 = 0LL;
    while (1)
    {
      if (*(void *)v38 != v22) {
        objc_enumerationMutation(v19);
      }
      uint64_t v24 = *(void *)(*((void *)&v37 + 1) + 8 * v23);
      uint64_t v25 = [v5 name];
      if (v25)
      {
        uint64_t v26 = (void *)v25;
        [v5 name];
        uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue();
        int v7 = 1;
        uint64_t v28 = [v27 rangeOfString:v24 options:1];

        if (v28 != 0x7FFFFFFFFFFFFFFFLL) {
          break;
        }
      }

      if (v21 == ++v23)
      {
        uint64_t v21 = [v19 countByEnumeratingWithState:&v37 objects:v41 count:16];
        if (v21) {
          goto LABEL_28;
        }
        int v7 = 0;
        break;
      }
    }

    uint64_t v6 = v29;
  }

  else
  {
    int v7 = 0;
  }

LABEL_6:
  BOOL v8 = MEMORY[0x1895F87A8];
  v33[0] = MEMORY[0x1895F87A8];
  v33[1] = 3221225472LL;
  v33[2] = __28__SASampleStore_symbolicate__block_invoke_3;
  v33[3] = &unk_189F61958;
  uint64_t v34 = *(id *)(a1 + 40);
  uint64_t v35 = v6;
  char v36 = v7;
  -[SATask enumerateFrames:]((uint64_t)v5, v33);
  unsigned int v9 = [v5 pid];
  if (v7 && v9)
  {
    [v5 threads];
    unsigned int v10 = (void *)objc_claimAutoreleasedReturnValue();
    v30[0] = v8;
    v30[1] = 3221225472LL;
    v30[2] = __28__SASampleStore_symbolicate__block_invoke_4;
    v30[3] = &unk_189F61980;
    id v11 = *(id *)(a1 + 40);
    v30[4] = *(void *)(a1 + 32);
    uint64_t v31 = v11;
    uint64_t v32 = 1;
    [v10 enumerateKeysAndObjectsUsingBlock:v30];
  }
}

  return a1;
}

void sub_186CB728C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

id getPreferredLanguages()
{
  os_log_t v0 = (void *)CFPreferencesCopyValue( @"AppleLanguages",  (CFStringRef)*MEMORY[0x189605170],  @"mobile",  (CFStringRef)*MEMORY[0x189605178]);
  if (!v0 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {
LABEL_11:

    [MEMORY[0x189603F90] preferredLanguages];
    id v1 = (id)objc_claimAutoreleasedReturnValue();
    return v1;
  }

  id v1 = v0;
  if ([v1 count])
  {
    uint64_t v2 = 0LL;
    char v3 = 1;
    while (1)
    {
      [v1 objectAtIndexedSubscript:v2];
      unint64_t v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      char isKindOfClass = objc_opt_isKindOfClass();

      if ((isKindOfClass & 1) == 0) {
        break;
      }
      char v6 = (v2 + 1 >= (unint64_t)[v1 count]) | ~v3;
      uint64_t v2 = 1LL;
      char v3 = 0;
      if ((v6 & 1) != 0) {
        goto LABEL_7;
      }
    }

    int v7 = *__error();
    _sa_logt();
    BOOL v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)unsigned int v10 = 0;
      _os_log_fault_impl( &dword_186C92000,  v8,  OS_LOG_TYPE_FAULT,  "Found the preferred languages array but contents are not NSString",  v10,  2u);
    }

    *__error() = v7;
    goto LABEL_11;
  }

LABEL_8:
  if (*(_BYTE *)(*(void *)(a1[5] + 8LL) + 24LL) && *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL)) {
    return 273LL;
  }
  else {
    return 0LL;
  }
}

uint64_t __SAProcName_block_invoke()
{
  uint64_t result = sandbox_check();
  return result;
}

LABEL_24:
LABEL_25:
        goto LABEL_26;
      }

      *(_DWORD *)uint64_t v28 = 134218242;
      *(void *)&v28[4] = v5;
      *(_WORD *)&v28[12] = 2080;
      *(void *)&v28[14] = v15;
      int v18 = "RCID %llu has name:%s";
    }

    _os_log_debug_impl(&dword_186C92000, v17, OS_LOG_TYPE_DEBUG, v18, v28, 0x16u);
    goto LABEL_17;
  }

      if (![v8 count]) {
        goto LABEL_29;
      }
    }

    Property = v15;
    int v18 = Property;
    if (Property) {
      Property = objc_getProperty(Property, v17, v11[160], 1);
    }
    if ([Property count])
    {
      if (v18) {
        uint64_t v20 = objc_getProperty(v18, v19, v11[160], 1);
      }
      else {
        uint64_t v20 = 0LL;
      }
      uint64_t v21 = (void *)[v20 mutableCopy];
      [v8 addObject:v21];

      unsigned int v9 = (v9 + 1);
    }

  return v9;
}

void sub_186CBB95C(_Unwind_Exception *a1)
{
}

void sub_186CBFAE4(_Unwind_Exception *a1)
{
}

const char *__IgnoreSlidBaseAddress_block_invoke()
{
  uint64_t result = getenv("SA_WORKAROUND_73965546");
  if (result)
  {
    uint64_t result = (const char *)strcmp(result, "0");
    if ((_DWORD)result) {
      byte_18C4B1302 = 1;
    }
  }

  return result;
}

void __SAKCDataReadAheadJetsamCoalitionInfo_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  unint64_t v5 = *(void **)(a1 + 32);
  [MEMORY[0x189607968] numberWithUnsignedLongLong:*a3];
  char v6 = (void *)objc_claimAutoreleasedReturnValue();
  [v5 setObject:v7 forKeyedSubscript:v6];
}

void __SAKCDataReadAheadJetsamCoalitionInfo_block_invoke_2(uint64_t a1, void *a2, uint64_t a3)
{
  id v6 = a2;
  [*(id *)(a1 + 32) objectForKeyedSubscript:a3];
  unint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5) {
    [*(id *)(a1 + 40) setObject:v5 forKeyedSubscript:v6];
  }
}

Class __getTRIAllocationStatusClass_block_invoke(uint64_t a1)
{
  if (!qword_18C4B1370)
  {
    qword_18C4B1370 = _sl_dlopen();
    if (!qword_18C4B1370)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }

  while (1)
  {
    Class result = objc_getClass("TRIAllocationStatus");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL)) {
      break;
    }
LABEL_6:
    char v3 = (void *)abort_report_np();
    free(v3);
  }

  qword_18C4B1378 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  return result;
}

void __getDUSessionClass_block_invoke(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = objc_getClass("DUSession");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_18C4B1388 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    abort_report_np();
    DarwinupLibrary();
  }

void DarwinupLibrary()
{
  if (!qword_18C4B1380)
  {
    qword_18C4B1380 = _sl_dlopen();
    if (!qword_18C4B1380)
    {
      os_log_t v0 = (void *)abort_report_np();
      free(v0);
    }
  }

Class __getDURootClass_block_invoke(uint64_t a1)
{
  Class result = objc_getClass("DURoot");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_18C4B1390 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    uint64_t v3 = abort_report_np();
    return (Class)__getAutomatedDeviceGroup_block_invoke(v3);
  }

  return result;
}

void __getAutomatedDeviceGroup_block_invoke()
{
  dispatch_block_t v0 = dispatch_block_create(DISPATCH_BLOCK_ASSIGN_CURRENT, &__block_literal_global_1484);
  qos_class_t v1 = qos_class_self();
  dispatch_get_global_queue(v1, 0LL);
  uint64_t v2 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue();
  dispatch_async(v2, v0);

  dispatch_time_t v3 = dispatch_time(0LL, 2000000000LL);
  if (dispatch_block_wait(v0, v3))
  {
    int v4 = *__error();
    _sa_logt();
    unint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v6 = 0;
      _os_log_impl( &dword_186C92000,  v5,  OS_LOG_TYPE_DEFAULT,  "WARNING: Timed out waiting for automated device group",  v6,  2u);
    }

    *__error() = v4;
  }
}

void __getAutomatedDeviceGroup_block_invoke_2()
{
  dispatch_block_t v0 = (void *)objc_claimAutoreleasedReturnValue();
  qos_class_t v1 = v0;
  if (v0)
  {
    id obj = v0;
    uint64_t v2 = [v0 length];
    qos_class_t v1 = obj;
    if (v2)
    {
      objc_storeStrong((id *)&qword_18C4B1398, obj);
      qos_class_t v1 = obj;
    }
  }
}

void *__getSAModelGatherInfoSymbolLoc_block_invoke(uint64_t a1)
{
  if (qword_18C4B13A8)
  {
    uint64_t v2 = (void *)qword_18C4B13A8;
  }

  else
  {
    qword_18C4B13A8 = _sl_dlopen();
    uint64_t v2 = (void *)qword_18C4B13A8;
    if (!qword_18C4B13A8)
    {
      int v4 = (void *)abort_report_np();
      free(v4);
    }
  }

  Class result = dlsym(v2, "SAModelGatherInfo");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  off_18C4B13B0 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  return result;
}

const char *DescriptionForKCDataType(uint64_t a1)
{
  if ((int)a1 <= 2304)
  {
    if ((int)a1 <= 18)
    {
      switch((_DWORD)a1)
      {
        case 0xDE17A59A:
          return "Begin delta stackshot";
        case 0xF19158ED:
          return "buffer end";
        case 0x11:
          return "Array";
        default:
LABEL_18:
          id v2 = objc_msgSend( objc_alloc(NSString), "initWithFormat:", @"UNKNOWN TYPE (0x%x)", a1);
          uint64_t v3 = [v2 UTF8String];
          if (v3) {
            qos_class_t v1 = (const char *)v3;
          }
          else {
            qos_class_t v1 = "UNKNOWN TYPE";
          }

          break;
      }
    }

    else
    {
      switch((int)a1)
      {
        case '0':
          return "load info 32-bit";
        case '1':
          return "load info 64-bit";
        case '2':
          return "mach timebase";
        case '3':
          return "machabstime";
        case '4':
          return "time val";
        case '5':
          return "usecs since epoch";
        case '6':
        case '7':
        case '8':
          goto LABEL_18;
        case '9':
          return "aot info";
        default:
          if ((_DWORD)a1 == 19)
          {
            qos_class_t v1 = "Container begin";
          }

          else
          {
            if ((_DWORD)a1 != 20) {
              goto LABEL_18;
            }
            qos_class_t v1 = "Container end";
          }

          break;
      }
    }
  }

  else
  {
    switch((int)a1)
    {
      case 2305:
        qos_class_t v1 = "iostats";
        break;
      case 2306:
        qos_class_t v1 = "memstats";
        break;
      case 2307:
        qos_class_t v1 = "task container";
        break;
      case 2308:
        qos_class_t v1 = "thread container";
        break;
      case 2309:
        qos_class_t v1 = "task snapshot";
        break;
      case 2310:
        qos_class_t v1 = "thread snapshot";
        break;
      case 2311:
        qos_class_t v1 = "donating pids";
        break;
      case 2312:
        qos_class_t v1 = "shared cache load info";
        break;
      case 2313:
        qos_class_t v1 = "thread name";
        break;
      case 2314:
        qos_class_t v1 = "stack kernel 32-bit";
        break;
      case 2315:
        qos_class_t v1 = "stack kernel 64-bit";
        break;
      case 2316:
        qos_class_t v1 = "stack user 32-bit";
        break;
      case 2317:
        qos_class_t v1 = "stack user 64-bit";
        break;
      case 2318:
        qos_class_t v1 = "boot args";
        break;
      case 2319:
        qos_class_t v1 = "os version";
        break;
      case 2320:
        qos_class_t v1 = "kernel page size";
        break;
      case 2321:
        qos_class_t v1 = "jetsam level";
        break;
      case 2322:
        qos_class_t v1 = "delta timestamp used";
        break;
      case 2323:
        qos_class_t v1 = "stack kernel lr 32-bit";
        break;
      case 2324:
        qos_class_t v1 = "stack kernel lr 64-bit";
        break;
      case 2325:
        qos_class_t v1 = "stack user lr 32-bit";
        break;
      case 2326:
        qos_class_t v1 = "stack user lr 64-bit";
        break;
      case 2327:
        qos_class_t v1 = "nonrunnable thread";
        break;
      case 2328:
        qos_class_t v1 = "nonrunnable task";
        break;
      case 2329:
        qos_class_t v1 = "cpu times";
        break;
      case 2330:
        qos_class_t v1 = "stackshot duration";
        break;
      case 2331:
      case 2334:
      case 2335:
      case 2340:
      case 2341:
      case 2342:
      case 2343:
      case 2359:
      case 2360:
      case 2361:
      case 2362:
      case 2363:
      case 2364:
      case 2365:
      case 2366:
      case 2367:
        goto LABEL_18;
      case 2332:
        qos_class_t v1 = "kernelcache_loadinfo";
        break;
      case 2333:
        qos_class_t v1 = "thread waitinfo";
        break;
      case 2336:
        qos_class_t v1 = "jetsam coalition snapshot";
        break;
      case 2337:
        qos_class_t v1 = "jetsam coalition";
        break;
      case 2338:
        qos_class_t v1 = "thread policy version";
        break;
      case 2339:
        qos_class_t v1 = "instruction cycles";
        break;
      case 2344:
        qos_class_t v1 = "dispatch queue label";
        break;
      case 2345:
        qos_class_t v1 = "thread turnstileinfo";
        break;
      case 2346:
        qos_class_t v1 = "architecture";
        break;
      case 2347:
        qos_class_t v1 = "latency info";
        break;
      case 2348:
        qos_class_t v1 = "latency info task";
        break;
      case 2349:
        qos_class_t v1 = "latency info thread";
        break;
      case 2350:
        qos_class_t v1 = "text exec load info";
        break;
      case 2351:
        qos_class_t v1 = "aot shared cache load info";
        break;
      case 2352:
        qos_class_t v1 = "task transitioning snapshot";
        break;
      case 2353:
        qos_class_t v1 = "task transitioning container";
        break;
      case 2354:
        qos_class_t v1 = "swift async start index";
        break;
      case 2355:
        qos_class_t v1 = "swift async stack";
        break;
      case 2356:
        qos_class_t v1 = "port label container";
        break;
      case 2357:
        qos_class_t v1 = "port label";
        break;
      case 2358:
        qos_class_t v1 = "port label name";
        break;
      case 2368:
        qos_class_t v1 = "task delta snapshot";
        break;
      case 2369:
        qos_class_t v1 = "thread delta snapshot";
        break;
      case 2370:
        qos_class_t v1 = "shared cache container";
        break;
      case 2371:
        qos_class_t v1 = "shared cache info";
        break;
      case 2372:
        qos_class_t v1 = "aot shared cache info";
        break;
      case 2373:
        qos_class_t v1 = "shared cache id";
        break;
      case 2374:
        qos_class_t v1 = "codesigning info";
        break;
      case 2375:
        qos_class_t v1 = "os build version";
        break;
      case 2376:
        qos_class_t v1 = "exclaves thread info";
        break;
      case 2377:
        qos_class_t v1 = "exclave container";
        break;
      case 2378:
        qos_class_t v1 = "exclaves scresult container";
        break;
      case 2379:
        qos_class_t v1 = "exclaves scresult info";
        break;
      case 2380:
        qos_class_t v1 = "exclaves ipc stack entry container";
        break;
      case 2381:
        qos_class_t v1 = "exclaves ipc stack entry info";
        break;
      case 2382:
        qos_class_t v1 = "exclaves ipc stack entry info ecstack";
        break;
      case 2383:
        qos_class_t v1 = "exclave address space container";
        break;
      case 2384:
        qos_class_t v1 = "exclave address space info";
        break;
      case 2385:
        qos_class_t v1 = "exclave address space name";
        break;
      case 2386:
        qos_class_t v1 = "exclaves text layout container";
        break;
      case 2387:
        qos_class_t v1 = "exclaves text layout info";
        break;
      case 2388:
        qos_class_t v1 = "exclaves text layout segments";
        break;
      default:
        if ((_DWORD)a1 != 1503811591) {
          goto LABEL_18;
        }
        qos_class_t v1 = "Begin stackshot";
        break;
    }
  }

  return v1;
}

int *KCLogItem(uint64_t a1, unsigned int a2, uint64_t a3, const char *a4, uint64_t a5, int a6)
{
  BOOL v8 = a4;
  int v11 = a1;
  uint64_t v107 = *MEMORY[0x1895F89C0];
  if (!a4) {
    BOOL v8 = DescriptionForKCDataType(a1);
  }
  switch(v11)
  {
    case 2309:
      int v13 = *__error();
      fprintf((FILE *)*MEMORY[0x1895F89E0], "%*s%s: %s [%d]%s\n");
      goto LABEL_107;
    case 2310:
      int v30 = *__error();
      fprintf((FILE *)*MEMORY[0x1895F89E0], "%*s%s: thread_v%d 0x%llx dispatch queue %lld%s\n", a5);
      goto LABEL_119;
    case 2311:
LABEL_19:
      int v13 = *__error();
      fprintf((FILE *)*MEMORY[0x1895F89E0], "%*s%s: %d%s\n");
      goto LABEL_107;
    case 2312:
      if (a2 < 0x28) {
        goto LABEL_50;
      }
      if (qword_18C4B1368 != -1) {
        dispatch_once(&qword_18C4B1368, &__block_literal_global_1450);
      }
      if ((byte_18C4B1302 & 1) != 0)
      {
LABEL_50:
        int v15 = *__error();
        v42 = (FILE *)*MEMORY[0x1895F89E0];
        do
        {
          unsigned int v43 = __ldxr(&uuid_string_index);
          unsigned int v44 = v43 + 1;
        }

        while (__stxr(v44, &uuid_string_index));
        BOOL v20 = (-v44 & 0x80000000) != 0;
        int v45 = -v44 & 3;
        int v46 = v44 & 3;
        if (v20) {
          int v47 = v46;
        }
        else {
          int v47 = -v45;
        }
        uuid_unparse((const unsigned __int8 *)(a3 + 8), &uuid_string_string[37 * v47]);
        fprintf(v42, "%*s%s: %s slide 0x%llx%s\n");
      }

      else
      {
        int v15 = *__error();
        v67 = (FILE *)*MEMORY[0x1895F89E0];
        do
        {
          unsigned int v88 = __ldxr(&uuid_string_index);
          unsigned int v89 = v88 + 1;
        }

        while (__stxr(v89, &uuid_string_index));
        BOOL v20 = (-v89 & 0x80000000) != 0;
        int v90 = -v89 & 3;
        int v91 = v89 & 3;
        if (v20) {
          int v92 = v91;
        }
        else {
          int v92 = -v90;
        }
        v93 = &uuid_string_string[37 * v92];
        uuid_unparse((const unsigned __int8 *)(a3 + 8), v93);
        v94 = " -- skipping";
        if (!a6) {
          v94 = "";
        }
        v98 = *(const char **)a3;
        v99 = v94;
        v96 = v93;
        v97 = *(char **)(a3 + 32);
        v95 = v8;
        v76 = "%*s%s: %s slid base address 0x%llx, slide 0x%llx%s\n";
LABEL_91:
        fprintf(v67, v76, a5, "", v95, v96, v97, v98, v99, v100, v101);
      }

      goto LABEL_115;
    case 2313:
    case 2318:
    case 2319:
    case 2344:
    case 2358:
    case 2375:
    case 2385:
LABEL_4:
      int v12 = *(unsigned __int8 *)(a3 + a2 - 1);
      int v13 = *__error();
      unint64_t v14 = (FILE *)*MEMORY[0x1895F89E0];
      if (v12) {
        fprintf(v14, "%*s%s: (invalid string)%s\n");
      }
      else {
        fprintf(v14, "%*s%s: %s%s\n");
      }
      goto LABEL_107;
    case 2314:
    case 2316:
    case 2323:
    case 2325:
      int v13 = *__error();
      fprintf((FILE *)*MEMORY[0x1895F89E0], "%*s%s: 0x%x%s\n");
      goto LABEL_107;
    case 2315:
    case 2317:
    case 2324:
    case 2326:
    case 2327:
    case 2382:
      int v13 = *__error();
      fprintf((FILE *)*MEMORY[0x1895F89E0], "%*s%s: 0x%llx%s\n");
      goto LABEL_107;
    case 2320:
    case 2321:
    case 2338:
    case 2354:
    case 2373:
LABEL_14:
      int v13 = *__error();
      fprintf((FILE *)*MEMORY[0x1895F89E0], "%*s%s: %u%s\n");
      goto LABEL_107;
    case 2322:
    case 2337:
LABEL_15:
      int v13 = *__error();
      fprintf((FILE *)*MEMORY[0x1895F89E0], "%*s%s: %llu%s\n");
      goto LABEL_107;
    case 2328:
    case 2329:
    case 2330:
    case 2331:
    case 2334:
    case 2335:
    case 2340:
    case 2341:
    case 2342:
    case 2343:
    case 2347:
    case 2348:
    case 2349:
    case 2353:
    case 2355:
    case 2356:
    case 2359:
    case 2360:
    case 2361:
    case 2362:
    case 2363:
    case 2364:
    case 2365:
    case 2366:
    case 2367:
    case 2370:
    case 2377:
    case 2378:
    case 2380:
    case 2383:
    case 2386:
LABEL_20:
      int v24 = *__error();
      uint64_t v25 = " -- skipping";
      if (!a6) {
        uint64_t v25 = "";
      }
      fprintf((FILE *)*MEMORY[0x1895F89E0], "%*s%s: %s\n", a5, "", v8, v25);
      Class result = __error();
      *Class result = v24;
      return result;
    case 2332:
      int v15 = *__error();
      v48 = (FILE *)*MEMORY[0x1895F89E0];
      v49 = (const unsigned __int8 *)(a3 + 8);
      do
      {
        unsigned int v50 = __ldxr(&uuid_string_index);
        unsigned int v51 = v50 + 1;
      }

      while (__stxr(v51, &uuid_string_index));
      BOOL v20 = (-v51 & 0x80000000) != 0;
      int v52 = -v51 & 3;
      int v53 = v51 & 3;
      if (v20) {
        int v54 = v53;
      }
      else {
        int v54 = -v52;
      }
      uuid_unparse(v49, &uuid_string_string[37 * v54]);
      fprintf(v48, "%*s%s: 0x%llx %s%s\n");
      goto LABEL_115;
    case 2333:
      int v30 = *__error();
      v55 = (FILE *)*MEMORY[0x1895F89E0];
      if (a2 < 0x1F) {
        fprintf(v55, "%*s%s: type:0x%x owner:0x%llx waiter:0x%llx context:0x%llx%s\n", a5, "");
      }
      else {
        fprintf( v55,  "%*s%s: type:0x%x owner:0x%llx waiter:0x%llx context:0x%llx portlabel_id:%d flags:0x%x%s\n",  a5,  "",  v8);
      }
      goto LABEL_119;
    case 2336:
      int v13 = *__error();
      fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%*s%s: id %llu, flags 0x%llx, thread_group %llu, leader uniquepid %llu%s\n",  a5,  "");
      goto LABEL_107;
    case 2339:
      int v13 = *__error();
      fprintf((FILE *)*MEMORY[0x1895F89E0], "%*s%s: %llu instructions, %llu cycles%s\n");
      goto LABEL_107;
    case 2345:
      int v30 = *__error();
      v56 = (FILE *)*MEMORY[0x1895F89E0];
      if (a2 < 0x1C) {
        fprintf(v56, "%*s%s: flags:0x%llx waiter:0x%llx context:0x%llx priority:%d hops:%d%s\n", a5, "");
      }
      else {
        fprintf( v56,  "%*s%s: flags:0x%llx waiter:0x%llx context:0x%llx priority:%d hops:%d portlabel_id:%d%s\n",  a5,  "",  v8);
      }
      goto LABEL_119;
    case 2346:
      int v30 = *__error();
      v57 = (FILE *)*MEMORY[0x1895F89E0];
      CSArchitectureGetFamilyName();
      fprintf(v57, "%*s%s: %s (0x%x, 0x%x)%s\n", a5);
      goto LABEL_119;
    case 2350:
      int v15 = *__error();
      uint64_t v27 = (FILE *)*MEMORY[0x1895F89E0];
      a3 += 8LL;
      do
      {
        unsigned int v58 = __ldxr(&uuid_string_index);
        unsigned int v29 = v58 + 1;
      }

      while (__stxr(v29, &uuid_string_index));
      goto LABEL_111;
    case 2351:
      int v103 = *__error();
      v59 = (FILE *)*MEMORY[0x1895F89E0];
      do
      {
        unsigned int v60 = __ldxr(&uuid_string_index);
        unsigned int v61 = v60 + 1;
      }

      while (__stxr(v61, &uuid_string_index));
      BOOL v20 = (-v61 & 0x80000000) != 0;
      int v62 = -v61 & 3;
      int v63 = v61 & 3;
      if (!v20) {
        int v63 = -v62;
      }
      uuid_unparse((const unsigned __int8 *)(a3 + 32), &uuid_string_string[37 * v63]);
      v64 = (const unsigned __int8 *)(a3 + 8);
      do
      {
        unsigned int v65 = __ldxr(&uuid_string_index);
        unsigned int v66 = v65 + 1;
      }

      while (__stxr(v66, &uuid_string_index));
      goto LABEL_98;
    case 2352:
      int v13 = *__error();
      fprintf((FILE *)*MEMORY[0x1895F89E0], "%*s%s: %s [%d] (transitioning 0x%llx)%s\n", a5);
      goto LABEL_107;
    case 2357:
      int v13 = *__error();
      fprintf((FILE *)*MEMORY[0x1895F89E0], "%*s%s: id:%d flags:0x%x domain:%d%s\n", a5);
      goto LABEL_107;
    case 2368:
      int v13 = *__error();
      fprintf((FILE *)*MEMORY[0x1895F89E0], "%*s%s: [%llu]%s\n");
      goto LABEL_107;
    case 2369:
      int v30 = *__error();
      fprintf((FILE *)*MEMORY[0x1895F89E0], "%*s%s: thread_delta_v%d 0x%llx%s\n");
LABEL_119:
      Class result = __error();
      *Class result = v30;
      return result;
    case 2371:
      int v15 = *__error();
      v67 = (FILE *)*MEMORY[0x1895F89E0];
      v68 = (char *)*(unsigned int *)(a3 + 40);
      do
      {
        unsigned int v69 = __ldxr(&uuid_string_index);
        unsigned int v70 = v69 + 1;
      }

      while (__stxr(v70, &uuid_string_index));
      BOOL v20 = (-v70 & 0x80000000) != 0;
      int v71 = -v70 & 3;
      int v72 = v70 & 3;
      if (v20) {
        int v73 = v72;
      }
      else {
        int v73 = -v71;
      }
      v74 = &uuid_string_string[37 * v73];
      uuid_unparse((const unsigned __int8 *)(a3 + 8), v74);
      v75 = " -- skipping";
      if (!a6) {
        v75 = "";
      }
      uint64_t v100 = *(unsigned int *)(a3 + 44);
      v101 = v75;
      v98 = *(const char **)(a3 + 32);
      v99 = *(const char **)a3;
      v96 = v68;
      v97 = v74;
      v95 = v8;
      v76 = "%*s%s: id %d: %s slid base address 0x%llx, slide 0x%llx, flags 0x%x%s\n";
      goto LABEL_91;
    case 2372:
      int v103 = *__error();
      v59 = (FILE *)*MEMORY[0x1895F89E0];
      do
      {
        unsigned int v77 = __ldxr(&uuid_string_index);
        unsigned int v78 = v77 + 1;
      }

      while (__stxr(v78, &uuid_string_index));
      BOOL v20 = (-v78 & 0x80000000) != 0;
      int v79 = -v78 & 3;
      int v80 = v78 & 3;
      if (!v20) {
        int v80 = -v79;
      }
      uuid_unparse((const unsigned __int8 *)(a3 + 32), &uuid_string_string[37 * v80]);
      v64 = (const unsigned __int8 *)(a3 + 8);
      do
      {
        unsigned int v81 = __ldxr(&uuid_string_index);
        unsigned int v66 = v81 + 1;
      }

      while (__stxr(v66, &uuid_string_index));
LABEL_98:
      BOOL v20 = (-v66 & 0x80000000) != 0;
      int v82 = -v66 & 3;
      int v83 = v66 & 3;
      if (!v20) {
        int v83 = -v82;
      }
      uuid_unparse(v64, &uuid_string_string[37 * v83]);
      fprintf(v59, "%*s%s: 0x%llx %s -> 0x%llx %s%s\n", a5, "");
LABEL_101:
      Class result = __error();
      *Class result = v103;
      return result;
    case 2374:
      int v13 = *__error();
      fprintf((FILE *)*MEMORY[0x1895F89E0], "%*s%s: flags 0x%llx, trust level %u%s\n");
      goto LABEL_107;
    case 2376:
      int v13 = *__error();
      fprintf((FILE *)*MEMORY[0x1895F89E0], "%*s%s: scid %llu, thread offset %u, flags 0x%x%s\n", a5);
      goto LABEL_107;
    case 2379:
      int v13 = *__error();
      fprintf((FILE *)*MEMORY[0x1895F89E0], "%*s%s: id %llu, flags 0x%llx%s\n");
      goto LABEL_107;
    case 2381:
      int v13 = *__error();
      fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%*s%s: asid 0x%llx, tnid %llu, invocationid %llu, flags 0x%llx%s\n",  a5,  "");
      goto LABEL_107;
    case 2384:
      int v13 = *__error();
      fprintf((FILE *)*MEMORY[0x1895F89E0], "%*s%s: id 0x%llx, flags 0x%llx, layoutid %llu, slide 0x%llx, %s\n", a5, "");
      goto LABEL_107;
    case 2387:
      int v13 = *__error();
      fprintf((FILE *)*MEMORY[0x1895F89E0], "%*s%s: layoutid %llu, flags 0x%llx%s\n");
LABEL_107:
      Class result = __error();
      *Class result = v13;
      return result;
    case 2388:
      int v15 = *__error();
      uint64_t v27 = (FILE *)*MEMORY[0x1895F89E0];
      do
      {
        unsigned int v84 = __ldxr(&uuid_string_index);
        unsigned int v29 = v84 + 1;
      }

      while (__stxr(v29, &uuid_string_index));
LABEL_111:
      BOOL v20 = (-v29 & 0x80000000) != 0;
      int v85 = -v29 & 3;
      int v86 = v29 & 3;
      if (v20) {
        int v87 = v86;
      }
      else {
        int v87 = -v85;
      }
      uuid_unparse((const unsigned __int8 *)a3, &uuid_string_string[37 * v87]);
      fprintf(v27, "%*s%s: %#18llx %s%s\n");
LABEL_115:
      Class result = __error();
      *Class result = v15;
      return result;
    default:
      switch(v11)
      {
        case '0':
          int v15 = *__error();
          unsigned int v16 = (FILE *)*MEMORY[0x1895F89E0];
          unint64_t v17 = (const unsigned __int8 *)(a3 + 4);
          do
          {
            unsigned int v18 = __ldxr(&uuid_string_index);
            unsigned int v19 = v18 + 1;
          }

          while (__stxr(v19, &uuid_string_index));
          BOOL v20 = (-v19 & 0x80000000) != 0;
          int v21 = -v19 & 3;
          int v22 = v19 & 3;
          if (v20) {
            int v23 = v22;
          }
          else {
            int v23 = -v21;
          }
          uuid_unparse(v17, &uuid_string_string[37 * v23]);
          fprintf(v16, "%*s%s: %#18x %s%s\n");
          goto LABEL_115;
        case '1':
          int v15 = *__error();
          uint64_t v27 = (FILE *)*MEMORY[0x1895F89E0];
          a3 += 8LL;
          do
          {
            unsigned int v28 = __ldxr(&uuid_string_index);
            unsigned int v29 = v28 + 1;
          }

          while (__stxr(v29, &uuid_string_index));
          goto LABEL_111;
        case '2':
          int v13 = *__error();
          fprintf((FILE *)*MEMORY[0x1895F89E0], "%*s%s: %d/%d%s\n");
          goto LABEL_107;
        case '3':
          goto LABEL_15;
        case '4':
          time_t v104 = *(void *)a3;
          localtime_r(&v104, &v105);
          if (!strftime(v106, 0x20uLL, "%Y-%m-%d %T", &v105)) {
            v106[0] = 0;
          }
          int v30 = *__error();
          fprintf((FILE *)*MEMORY[0x1895F89E0], "%*s%s: %s.%03llu%s\n");
          goto LABEL_119;
        case '5':
          uint64_t v31 = *(const char **)a3;
          time_t v104 = (unint64_t)v31 / 0xF4240;
          localtime_r(&v104, &v105);
          if (!strftime(v106, 0x20uLL, "%Y-%m-%d %T", &v105)) {
            v106[0] = 0;
          }
          int v32 = *__error();
          uint64_t v33 = " -- skipping";
          if (!a6) {
            uint64_t v33 = "";
          }
          fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%*s%s: %s.%03llu%s\n",  a5,  "",  v8,  v106,  (unint64_t)v31 % 0xF4240 / 0x3E8,  v33);
          Class result = __error();
          *Class result = v32;
          return result;
        case '6':
        case '7':
        case '8':
          goto LABEL_20;
        case '9':
          int v103 = *__error();
          v102 = (FILE *)*MEMORY[0x1895F89E0];
          do
          {
            unsigned int v34 = __ldxr(&uuid_string_index);
            unsigned int v35 = v34 + 1;
          }

          while (__stxr(v35, &uuid_string_index));
          BOOL v20 = (-v35 & 0x80000000) != 0;
          int v36 = -v35 & 3;
          int v37 = v35 & 3;
          if (!v20) {
            int v37 = -v36;
          }
          uuid_unparse((const unsigned __int8 *)(a3 + 24), &uuid_string_string[37 * v37]);
          do
          {
            unsigned int v38 = __ldxr(&uuid_string_index);
            unsigned int v39 = v38 + 1;
          }

          while (__stxr(v39, &uuid_string_index));
          BOOL v20 = (-v39 & 0x80000000) != 0;
          int v40 = -v39 & 3;
          int v41 = v39 & 3;
          if (!v20) {
            int v41 = -v40;
          }
          uuid_unparse((const unsigned __int8 *)(a3 + 40), &uuid_string_string[37 * v41]);
          fprintf(v102, "%*s%s: %#18llx - %#18llx -> %#18llx %s-%s%s\n", a5, "", v8);
          goto LABEL_101;
        default:
          switch(v11)
          {
            case 1:
              goto LABEL_4;
            case 2:
              goto LABEL_14;
            case 3:
              goto LABEL_15;
            case 4:
              goto LABEL_19;
            case 5:
              int v13 = *__error();
              fprintf((FILE *)*MEMORY[0x1895F89E0], "%*s%s: %lld%s\n");
              goto LABEL_107;
            default:
              goto LABEL_20;
          }
      }
  }

void sub_186CC1C24( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void sub_186CC1CE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_186CC1D98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_186CC1E60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_186CC1F80( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_186CC2040( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_186CC2104( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_186CC22A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_186CC2380( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_186CC2418( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_186CC24A4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_186CC2568(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_21:
    -[SATask _gatherDataFromLiveProcessIsLate:mainBinaryPath:]((uint64_t)v14, 0LL, 0LL);
  }

    *(_BYTE *)(v20 + 15) |= 0x80u;
    if ((a3->ths_ss_flags & 0x800) == 0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }

  if ((([*(id *)(a1 + 40) containsObject:&unk_189F823E8] & 1) != 0 || (unsigned int v35 = v43[2]()) == 0)
    && (([*(id *)(a1 + 40) containsObject:&unk_189F823B8] & 1) != 0 || (unsigned int v35 = v42[2]()) == 0)
    && (([*(id *)(a1 + 40) containsObject:&unk_189F82400] & 1) != 0 || (unsigned int v35 = v41[2]()) == 0)
    && (([*(id *)(a1 + 40) containsObject:&unk_189F82418] & 1) != 0 || (unsigned int v35 = v40[2]()) == 0)
    && (([*(id *)(a1 + 40) containsObject:&unk_189F82430] & 1) != 0 || (unsigned int v35 = v39[2]()) == 0))
  {
    unsigned int v35 = 0LL;
  }

  if ((([*(id *)(a1 + 40) containsObject:&unk_189F823E8] & 1) != 0 || (int v37 = v45[2]()) == 0)
    && (([*(id *)(a1 + 40) containsObject:&unk_189F82430] & 1) != 0 || (int v37 = v44[2]()) == 0)
    && (([*(id *)(a1 + 40) containsObject:&unk_189F823B8] & 1) != 0 || (int v37 = v43[2]()) == 0)
    && (([*(id *)(a1 + 40) containsObject:&unk_189F82418] & 1) != 0 || (int v37 = v42[2]()) == 0))
  {
    int v37 = 0LL;
  }
    }

    -[SATask addImageInfos:](a1, v11);
    *(_BYTE *)(a1 + 73) = 1;
  }

void sub_186CC2748(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_186CC2B40( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, id a20)
{
  _Unwind_Resume(a1);
}

LABEL_170:
                    v294 = v137;
                    [v307 threadStates];
                    v154 = (void *)objc_claimAutoreleasedReturnValue();
                    [v154 lastObject];
                    v155 = (void *)objc_claimAutoreleasedReturnValue();
                    [v155 endTimestamp];
                    v156 = (void *)objc_claimAutoreleasedReturnValue();
                    v157 = v156;
                    if (v156)
                    {
                      v158 = v156;
                    }

                    else
                    {
                      [v307 creationTimestamp];
                      v158 = (id)objc_claimAutoreleasedReturnValue();
                    }

                    if (v158 && [v158 gt:v294])
                    {
                      if (v139)
                      {
                        [v307 threadStates];
                        v159 = (void *)objc_claimAutoreleasedReturnValue();
                        if ([v159 count])
                        {
                          [v307 threadStates];
                          v160 = (void *)objc_claimAutoreleasedReturnValue();
                          [v160 lastObject];
                          v161 = (void *)objc_claimAutoreleasedReturnValue();
                          v162 = [v161 endSampleIndex];

                          if (v162 != v287)
                          {
                            v292 = v132;
                            a2 = *__error();
                            _sa_logt();
                            v163 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                            if (os_log_type_enabled(v163, OS_LOG_TYPE_ERROR))
                            {
                              v164 = [v307 debugDescription];
                              v165 = [v164 UTF8String];
                              [v307 threadStates];
                              v166 = (void *)objc_claimAutoreleasedReturnValue();
                              [v166 lastObject];
                              v167 = (void *)objc_claimAutoreleasedReturnValue();
                              v168 = [v167 debugDescription];
                              v169 = [v168 UTF8String];
                              v170 = [v292 debugDescription];
                              *(_DWORD *)buf = 136315906;
                              *(void *)&uint8_t buf[4] = v165;
                              *(_WORD *)&buf[12] = 2080;
                              *(void *)&buf[14] = v169;
                              *(_WORD *)&buf[22] = 2048;
                              v322 = (void *)v287;
                              LOWORD(v323) = 2080;
                              *(void *)((char *)&v323 + 2) = [v170 UTF8String];
                              _os_log_error_impl( &dword_186C92000,  v163,  OS_LOG_TYPE_ERROR,  "Thread %s state %s vs last sample index %lu timestamp %s",  buf,  0x2Au);
                            }

                            *__error() = a2;
                            v171 = [v307 debugDescription];
                            v139 = [v171 UTF8String];
                            [v307 threadStates];
                            v172 = (void *)objc_claimAutoreleasedReturnValue();
                            pid_for_thread = [v172 lastObject];
                            v173 = [(id)pid_for_thread debugDescription];
                            [v173 UTF8String];
                            v174 = [v292 debugDescription];
                            [v174 UTF8String];
                            _SASetCrashLogMessage( 914,  "Thread %s state %s vs last sample index %lu timestamp %s",  v175,  v176,  v177,  v178,  v179,  v180,  v139);

                            v132 = v292;
                            _os_crash();
                            __break(1u);
                            goto LABEL_181;
                          }
                        }

                        else
                        {
                        }

                        v139 = 0;
                      }

                      v298 = v158;

                      if (qword_18C4B13C0)
                      {
                        v183 = *__error();
                        fprintf( (FILE *)qword_18C4B13C0,  "%'llu Adjusting forward record timestamp %lld to %lld, to match the last thread state\n",  *(void *)(a2 + 8),  v72,  [v298 machAbsTime]);
                        *__error() = v183;
                      }

                      goto LABEL_187;
                    }

LABEL_181:
                    v298 = v294;
LABEL_187:

                    v140 = v139 != 0;
LABEL_188:
                    v184 = *(void *)a2;
                    if ((*(void *)a2 & 0x200000) != 0)
                    {
                      ns_from_timestamp = ktrace_get_ns_from_timestamp();
                      v186 = ktrace_get_ns_from_timestamp();
                      v187 = *(_DWORD *)(a2 + 6640);
                      v188 = *(void *)(a2 + 6632);
                      v189 = (v188 >> 1) & 1;
                      v190 = *(_DWORD *)(a2 + 6644);
                      v191 = v188 & 1;
                      v192 = (v188 >> 2) & 1;
                      v193 = (v188 >> 3) & 1;
                      if ((v188 & 0x10) != 0)
                      {
                        v194 = (v188 >> 5) & 1;
                        v195 = (v188 >> 6) & 1;
                        v196 = 1;
                        goto LABEL_195;
                      }
                    }

                    else
                    {
                      if ((v184 & 0x1000) == 0 || (*(_BYTE *)(a2 + 6560) & 1) != 0) {
                        goto LABEL_204;
                      }
                      ns_from_timestamp = 0LL;
                      v186 = 0LL;
                      v187 = 0;
                      v190 = 0;
                      v191 = 0;
                      LOBYTE(v189) = 0;
                      LOBYTE(v192) = 0;
                      LOBYTE(v193) = 0;
                    }

                    v196 = 0;
                    LOBYTE(v194) = 0;
                    LOBYTE(v195) = 0;
LABEL_195:
                    v197 = *(void *)a2;
                    if ((*(void *)a2 & 0x1000) == 0 || (*(_BYTE *)(a2 + 6560) & 1) != 0)
                    {
                      v199 = 0;
                      v198 = 0LL;
                    }

                    else
                    {
                      v198 = *(void *)(a2 + 6568);
                      v199 = 1;
                    }

                    if ((v197 & 0x100000) != 0)
                    {
                      v200 = (*(unsigned __int16 *)(a2 + 6624) >> 9) & 7;
                      if (v200) {
                        v200 |= 0xFF0000u;
                      }
                    }

                    else
                    {
                      v200 = 0;
                    }

                    -[SASampleStore backfillTask:lastSampleIndex:timestamp:haveSnap:terminatedThreadsUserTimeInNs:terminatedThreadsSystemTimeInNs:terminatedThreadsCycles:terminatedThreadsInstructions:suspendCount:pageins:isDarwinBG:isForeground:isBoosted:isDirty:haveWQFlags:wqExceededTotalThreadLimit:wqExceededConstrainedThreadLimit:haveMem:taskSizeInBytes:haveLatencyQos:latencyQos:]( v305,  v309,  v287,  v298,  (v184 & 0x200000) != 0,  ns_from_timestamp,  v186,  0LL,  0LL,  v187,  v190,  v191,  v189,  v192,  v193,  v196,  v194,  v195,  v199,  v198,  (v197 & 0x100000) != 0,  v200);
LABEL_204:
                    name_for_thread = (_BYTE *)ktrace_get_name_for_thread();
                    v202 = name_for_thread;
                    if (name_for_thread) {
                      v203 = *name_for_thread != 0;
                    }
                    else {
                      v203 = 0;
                    }
                    v295 = *(void *)a2;
                    if ((*(void *)a2 & 0x800000) != 0)
                    {
                      v204 = *(void *)(a2 + 6688);
                      if ((*(void *)a2 & 0x10000000) != 0)
                      {
                        if (*(_BYTE *)(a2 + 7088)) {
                          v205 = (void *)(a2 + 7088);
                        }
                        else {
                          v205 = 0LL;
                        }
                        goto LABEL_214;
                      }
                    }

                    else
                    {
                      v204 = 0LL;
                    }

                    v205 = 0LL;
LABEL_214:
                    if ((v295 & 0x40) == 0)
                    {
                      v293 = 0LL;
                      v286 = 0;
                      if ((v295 & 0x80) == 0)
                      {
LABEL_216:
                        v289 = 0LL;
                        v290 = 0LL;
                        v206 = 0LL;
                        v207 = [v309 pid] == 0;
LABEL_247:
                        v218 = *(void *)a2;
                        if ((*(void *)a2 & 0x100000) != 0)
                        {
                          [v305 setHaveKPerfSched:1];
                          v219 = v218;
                          v218 = ktrace_get_ns_from_timestamp();
                          v220 = ktrace_get_ns_from_timestamp();
                          v221 = v218;
                          LODWORD(v21_Block_object_dispose((const void *)(v1 - 88), 8) = v219;
                          v222 = v203;
                          v223 = *(_DWORD *)(a2 + 6616) & 0xFFFFFFFB;
                          v224 = *(__int16 *)(a2 + 6620);
                          v225 = *(unsigned __int16 *)(a2 + 6624);
                          BYTE4(v27_Block_object_dispose((const void *)(v1 - 88), 8) = v225 & 7;
                          v279 = *(__int16 *)(a2 + 6622);
                          v277 = (v225 >> 6) & 7;
                          LODWORD(v27_Block_object_dispose((const void *)(v1 - 88), 8) = (v225 >> 3) & 7;
                          v226 = a2;
                          a2 = *(void *)a2;
                          v227 = v226;
                          if ((a2 & 0x8000000) != 0) {
                            v228 = *(_BYTE *)(v226 + 7080) & 7;
                          }
                          else {
                            v228 = 0;
                          }
                        }

                        else
                        {
                          v222 = v203;
                          v227 = a2;
                          v220 = 0LL;
                          v221 = 0LL;
                          v224 = 0;
                          v279 = 0;
                          v223 = 0;
                          v278 = 0LL;
                          LOBYTE(v277) = 0;
                          v228 = 0;
                          LODWORD(a2) = *(void *)a2;
                        }

                        v285 = v222;
                        v283 = v205;
                        v284 = v204;
                        v282 = v207;
                        v280 = v224;
                        v276 = v228;
                        if ((a2 & 0x4000000) != 0)
                        {
                          v229 = *(void *)(v227 + 7064);
                          v230 = *(void *)(v227 + 7072);
                        }

                        else
                        {
                          v229 = 0LL;
                          v230 = 0LL;
                        }

                        v231 = v206;
                        v281 = v202;
                        if ((a2 & 0x400000) != 0)
                        {
                          v273 = v220;
                          v274 = v221;
                          v275 = v140;
                          v232 = *(_BYTE *)(v227 + 6682);
                          v233 = *(void *)(v227 + 6664);
                          v234 = *(__int16 *)(v227 + 6680) > 0;
                          if ((v233 & 4) != 0 && v307) {
                            v307[16] = 1;
                          }
                          v235 = +[SATimestamp timestampWithMachAbsTime:fromKtraceSession:]( (uint64_t)&OBJC_CLASS___SATimestamp,  *(void *)(v227 + 6672));
                          v236 = (v233 >> 1) & 1;
                          v237 = v233 & 1;
                          v238 = (void *)v235;
                          v140 = v275;
                          v220 = v273;
                          v221 = v274;
                        }

                        else
                        {
                          v232 = 0;
                          LOBYTE(v236) = 0;
                          v237 = 0;
                          v234 = 0;
                          v238 = 0LL;
                        }

                        -[SASampleStore backfillThread:inTask:lastSampleIndex:timestamp:haveName:name:haveDispatchQueueId:dispatchQueueId:dispatchQueueLabel:leafKernelFrame:hasExclaveInKernelStack:haveUserStack:leafUserFrame:swiftTaskId:leafOfCRootFramesReplacedBySwiftAsync:threadExclavesInfo:haveSched:systemCpuTimeNs:userCpuTimeNs:basePriority:scheduledPriority:state:threadQos:threadRequestedQos:threadRequestedQosOverride:threadQosPromote:haveCycIns:instructions:cycles:haveSnap:ioTier:isIOPassive:isDarwinBG:isSuspended:isGlobalForcedIdle:isIdleWorkQueue:lastMadeRunnableTime:isOnCore:isOnCoreForLastSampleIndex:cpuNum:]( v305,  v307,  v309,  v287,  v298,  v285,  v281,  (v295 >> 23) & 1,  v284,  v283,  v293,  v286,  v282,  v289,  v231,  v290,  0LL,  (v218 & 0x100000) != 0,  v220,  v221,  v280,  v279,  v223,  SBYTE4(v278),  v278,  v277,  v276,  (a2 & 0x4000000) != 0,  v229,  v230,  (a2 & 0x400000) != 0,  v232,  v236,  v237,  v234,  0,  0,  v238,  v304,  v140,  v288);
                        [v300 clearThreadData];
                        [v300 clearTaskData];

                        goto LABEL_262;
                      }

                      goto LABEL_232;
                    }

                    v208 = *(unsigned int *)(a2 + 2164);
                    if ((_DWORD)v208)
                    {
                      objc_msgSend(v300, "setKernelFrames:", calloc(v208, 8uLL));
                      memcpy( (void *)[v300 kernelFrames],  (const void *)(a2 + 2168),  8 * *(unsigned int *)(a2 + 2164));
                      [v300 setNumKernelFrames:*(unsigned int *)(a2 + 2164)];
                      v209 = *(_DWORD *)(a2 + 7376);
                      v286 = v209 != 0;
                      if (v209)
                      {
                        if (v209 == *(_DWORD *)(a2 + 2164)) {
                          v210 = 0LL;
                        }
                        else {
                          v210 = v209;
                        }
                        [v300 setExclaveInsertionIndex:v210];
                      }

                      if ((*(_BYTE *)(a2 + 2160) & 0x10) != 0) {
                        [v300 setIsKernelStackTruncated:1];
                      }
                      v211 = -[SASampleStore lastTaskWithPid:](v305, 0LL);
                      if (!v211)
                      {
                        execname_for_pid = (_BYTE *)ktrace_get_execname_for_pid();
                        if (execname_for_pid && *execname_for_pid)
                        {
                          SANSStringForCString(execname_for_pid);
                          v213 = (void *)objc_claimAutoreleasedReturnValue();
                        }

                        else
                        {
                          v213 = 0LL;
                        }
                        v211 = -[SASampleStore taskForPid:andName:didExecAtTimestamp:](v305, 0LL, v213, 0LL);
                      }

                      [v211 binaryLoadInfos];
                      v214 = (void *)objc_claimAutoreleasedReturnValue();
                      [v300 setKernelBinaryLoadInfos:v214];
                      v293 = -[SATask leafFrameAfterAddingStack:leafOfCRootFramesReplacedBySwiftAsync:]( (uint64_t)v211,  v300,  0LL);
                      if ((*(void *)a2 & 0x80) == 0) {
                        goto LABEL_216;
                      }
LABEL_232:
                      v215 = *(unsigned int *)(a2 + 108);
                      if ((_DWORD)v215)
                      {
                        objc_msgSend(v300, "setUserFrames:", calloc(v215, 8uLL));
                        memcpy( (void *)[v300 userFrames],  (const void *)(a2 + 112),  8 * *(unsigned int *)(a2 + 108));
                        [v300 setNumUserFrames:*(unsigned int *)(a2 + 108)];
                        if ((*(_BYTE *)(a2 + 104) & 0x10) != 0)
                        {
                          if ((*(_BYTE *)(a2 + 4) & 1) == 0
                            || ([v300 setIsSwiftAsyncStackTruncated:1], !*(_DWORD *)(a2 + 7328)))
                          {
                            [v300 setIsUserStackTruncated:1];
                          }
                        }

                        v216 = *(_DWORD *)(a2 + 104);
                        if ((v216 & 0x80) != 0)
                        {
                          v217 = -[SASampleStore addressTranslationsForPid:]((uint64_t)v305, pid_for_thread);
                          [v300 setAddressTranslations:v217];

                          v216 = *(_DWORD *)(a2 + 104);
                        }

                        if ((v216 & 0x100) != 0) {
                          [v300 setCheckLR:1];
                        }
                        if ((*(_BYTE *)(a2 + 4) & 1) != 0)
                        {
                          objc_msgSend(v300, "setSwiftAsyncFrames:", calloc(*(unsigned int *)(a2 + 7328), 8uLL));
                          memcpy( (void *)[v300 swiftAsyncFrames],  (const void *)(a2 + 112 + 8 * *(unsigned int *)(a2 + 7324)),  8 * *(unsigned int *)(a2 + 7328));
                          [v300 setNumSwiftAsyncFrames:*(unsigned int *)(a2 + 7328)];
                          [v300 setSwiftAsyncStitchIndex:*(unsigned int *)(a2 + 7320)];
                          else {
                            v206 = 0LL;
                          }
                        }

                        else
                        {
                          v206 = 0LL;
                        }

                        v310 = 0LL;
                        v289 = -[SATask leafFrameAfterAddingStack:leafOfCRootFramesReplacedBySwiftAsync:]( (uint64_t)v309,  v300,  &v310);
                        v290 = v310;
                        v207 = 1;
                        goto LABEL_247;
                      }

                      goto LABEL_270;
                    }

LABEL_160:
                  v143 = objc_getProperty(v143, v142, 40LL, 1);
                  goto LABEL_161;
                }

                [v305 tasksByPid];
                v96 = (void *)objc_claimAutoreleasedReturnValue();
                [MEMORY[0x189607968] numberWithInt:pid_for_thread];
                v97 = (void *)objc_claimAutoreleasedReturnValue();
                [v96 objectForKeyedSubscript:v97];
                v98 = (void *)objc_claimAutoreleasedReturnValue();

                if ((unint64_t)[v98 count] >= 2)
                {
                  objc_msgSend(v98, "objectAtIndexedSubscript:", objc_msgSend(v98, "count") - 2);
                  v99 = (void *)objc_claimAutoreleasedReturnValue();
                  [v99 threads];
                  uint64_t v100 = (void *)objc_claimAutoreleasedReturnValue();
                  v101 = [v100 objectForKeyedSubscript:v296];

                  v307 = (_BYTE *)v101;
                  if (v101)
                  {
                    v102 = v99;

                    v309 = v102;
LABEL_138:

                    goto LABEL_139;
                  }
                }

                +[SAThread threadWithId:]((uint64_t)&OBJC_CLASS___SAThread, v7);
                v307 = (_BYTE *)objc_claimAutoreleasedReturnValue();
                [v309 execTimestamp];
                v120 = (void *)objc_claimAutoreleasedReturnValue();

                if (v120)
                {
                  [v309 execTimestamp];
                  v122 = (void *)objc_claimAutoreleasedReturnValue();
                  if (v307) {
                    objc_setProperty_atomic(v307, v121, v122, 32LL);
                  }
                }

                -[SATask addThread:]((uint64_t)v309, v307);
                goto LABEL_138;
              }
            }
          }
        }

        else
        {
          if (absolute_from_timestamp) {
            goto LABEL_88;
          }
          int v73 = 0LL;
        }

        if (qword_18C4B13C0)
        {
          int v79 = *__error();
          fprintf( (FILE *)qword_18C4B13C0,  "%'llu Adjusting forward record timestamp %lld to %lld\n",  *(void *)(a2 + 8),  v72,  v73);
          *__error() = v79;
          goto LABEL_94;
        }

        goto LABEL_98;
      }

      if (!qword_18C4B13C0) {
        goto LABEL_262;
      }
      unsigned int v51 = __error();
      int v52 = *(void *)a2;
      if ((*(void *)a2 & 4) != 0)
      {
        int v53 = *(void *)(a2 + 16);
        if ((v52 & 2) != 0)
        {
LABEL_59:
          int v54 = *(_DWORD *)(a2 + 24);
          if ((v52 & 0x10) != 0)
          {
LABEL_60:
            v55 = *(_DWORD *)(a2 + 48);
LABEL_78:
            int v63 = (FILE *)qword_18C4B13C0;
            v64 = *v51;
            unsigned int v65 = (uint64_t *)a2;
            unsigned int v66 = *(void *)(a2 + 8);
            StringForKPDecodeContentBits(v65);
            fprintf( v63,  "%'llu Thread 0x%llx core %d event 0x%x skipping kperf content 0x%llx: %s\n",  v66,  v53,  v54,  v55,  v52,  (const char *)&qword_18C4B13D0);
            *__error() = v64;
            goto LABEL_262;
          }

LABEL_77:
          v55 = 0;
          goto LABEL_78;
        }
      }

      else
      {
        int v53 = 0LL;
        if ((v52 & 2) != 0) {
          goto LABEL_59;
        }
      }

      int v54 = -1;
      if ((v52 & 0x10) != 0) {
        goto LABEL_60;
      }
      goto LABEL_77;
    }

    if ([a1 dataStyle] != 1)
    {
      if ([a1 dataStyle])
      {
        [a1 sampleTimestamps];
        int v12 = (void *)objc_claimAutoreleasedReturnValue();
        int v13 = [v12 count];

        if (!v13) {
          goto LABEL_262;
        }
      }
    }

    v297 = self;
    v303 = (void *)[objc_alloc(MEMORY[0x189603FA8]) initWithCapacity:*(void *)(a2 + 7360)];
    if (*(void *)(a2 + 7360))
    {
      unint64_t v14 = 0LL;
      v302 = a2;
      while (1)
      {
        -[SASampleStore exclaveWithIdentifier:]((uint64_t)v305, *(void *)(*(void *)(a2 + 7368) + 2064 * v14));
        unsigned int v16 = (void *)objc_claimAutoreleasedReturnValue();
        v308 = *(void *)(a2 + 7368);
        unint64_t v17 = v308 + 2064 * v14;
        unsigned int v18 = *(_DWORD *)(v17 + 12);
        v306 = (int *)(v17 + 12);
        if (v18) {
          break;
        }
        uint64_t v26 = 0LL;
LABEL_48:
        unsigned int v38 = -[SAExclaveCallstack initWithExclave:leafFrame:]( (id *)objc_alloc(&OBJC_CLASS___SAExclaveCallstack),  v16,  v26);
        [v303 addObject:v38];
        a2 = v302;
      }

      unsigned int v19 = 0LL;
      a2 = 0LL;
      BOOL v20 = -1;
      while (1)
      {
        int v21 = *(void *)(v308 + 2064 * v14 + 8LL * (v18 + v20) + 16);
        if (v19)
        {
          int v22 = v19[5];
          if (!v22) {
            goto LABEL_30;
          }
          int v23 = v22;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            int v24 = v23;
            v316[0] = MEMORY[0x1895F87A8];
            v316[1] = 3221225472LL;
            v316[2] = __55__SASampleStore_KPerf__backfillExclaveFromKPerf_state___block_invoke;
            v316[3] = &__block_descriptor_40_e21_B24__0__SAFrame_8_B16l;
            v316[4] = v21;
            [v24 objectsPassingTest:v316];
            uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue();
            [v25 anyObject];
            uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue();
          }

          else
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {
              tm v105 = *__error();
              _sa_logt();
              int v62 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
              {
                ClassName = object_getClassName(v23);
                *(_DWORD *)buf = 136315138;
                *(void *)&uint8_t buf[4] = ClassName;
                _os_log_error_impl(&dword_186C92000, v62, OS_LOG_TYPE_ERROR, "child is %s", buf, 0xCu);
              }

              *__error() = v105;
              uint64_t v107 = object_getClassName(v23);
              _SASetCrashLogMessage(647, "child is %s", v108, v109, v110, v111, v112, v113, v107);
              _os_crash();
              __break(1u);
LABEL_124:
              v114 = *(void *)a2;
              *(_DWORD *)buf = 134217984;
              *(void *)&uint8_t buf[4] = v114;
              _os_log_fault_impl( &dword_186C92000,  (os_log_t)v23,  OS_LOG_TYPE_FAULT,  "Exclave callstack provided with other stack info: 0x%llx",  buf,  0xCu);
LABEL_74:

              *__error() = (int)v62;
              goto LABEL_262;
            }

            unsigned int v29 = v23;
            if (v21 == [v29 address]) {
              uint64_t v26 = v29;
            }
            else {
              uint64_t v26 = 0LL;
            }
          }

          unsigned int v28 = v23;
        }

        else
        {
          if (v16) {
            uint64_t v27 = objc_getProperty(v16, v15, 40LL, 1);
          }
          else {
            uint64_t v27 = 0LL;
          }
          unsigned int v28 = v27;
          v315[0] = MEMORY[0x1895F87A8];
          v315[1] = 3221225472LL;
          v315[2] = __55__SASampleStore_KPerf__backfillExclaveFromKPerf_state___block_invoke_67;
          v315[3] = &__block_descriptor_40_e21_B24__0__SAFrame_8_B16l;
          v315[4] = v21;
          [v28 objectsPassingTest:v315];
          int v23 = (void *)objc_claimAutoreleasedReturnValue();
          [v23 anyObject];
          uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue();
        }

        if (!v26)
        {
LABEL_30:
          int v30 = (id *)-[SAExclaveFrame initWithExclave:](objc_alloc(&OBJC_CLASS___SAExclaveFrame), v16);
          uint64_t v31 = v30;
          uint64_t v26 = v30;
          if (v30) {
            v30[2] = (id)v21;
          }
          [v16 loadInfos];
          int v32 = (void *)objc_claimAutoreleasedReturnValue();

          if (v32)
          {
            [v16 loadInfos];
            unsigned int v34 = (void *)objc_claimAutoreleasedReturnValue();
            +[SABinaryLoadInfo binaryLoadInfoForAddress:inBinaryLoadInfos:]( &OBJC_CLASS___SABinaryLoadInfo,  "binaryLoadInfoForAddress:inBinaryLoadInfos:",  v21,  v34);
            unsigned int v35 = (void *)objc_claimAutoreleasedReturnValue();
            if (v26) {
              objc_storeWeak(v31 + 3, v35);
            }
          }

          if (v26) {
            v26[4] = v19;
          }
          if (v19)
          {
            -[SAFrame _addChildFrame:]((uint64_t)v19, v26);
          }

          else
          {
            if (v16) {
              int v36 = objc_getProperty(v16, v33, 40LL, 1);
            }
            else {
              int v36 = 0LL;
            }
            int v37 = v36;
            [v37 addObject:v26];
          }
        }

        a2 = (a2 + 1);
        unsigned int v18 = *v306;
        --v20;
        unsigned int v19 = (id *)v26;
      }
    }

  if ((v1 & 0x8000000000000000LL) == 0) {
    goto LABEL_203;
  }
LABEL_199:
  else {
    v3 += snprintf(v3, _MergedGlobals_4 - v3 + 536, ", ");
  }
LABEL_202:
  Class result = (uint64_t *)snprintf(v3, _MergedGlobals_4 - v3 + 536, "malformed");
  v3 += (int)result;
  qos_class_t v1 = *v2;
LABEL_203:
  int v4 = v1 & 0x7FFFFFFC00000000LL;
  unint64_t v17 = v1 & 0x7FFFFFFC00000000LL;
  if ((v1 & 0x7FFFFFFC00000000LL) != 0)
  {
    do
    {
      unint64_t v5 = __clz(__rbit64(v4));
      id v6 = buf[(v5 >> 3) - 8];
      id v7 = 1 << (v5 & 7);
      if ((v7 & v6) == 0)
      {
        unsigned int v9 = *__error();
        _sa_logt();
        unsigned int v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109376;
          unsigned int v19 = v5;
          BOOL v20 = 2048;
          int v21 = v4;
          _os_log_error_impl( &dword_186C92000,  v10,  OS_LOG_TYPE_ERROR,  "bitNum %d unset, but contents 0x%llx",  buf,  0x12u);
        }

        *__error() = v9;
        _SASetCrashLogMessage(567, "bitNum %d unset, but contents 0x%llx", v11, v12, v13, v14, v15, v16, v5);
        _os_crash();
        __break(1u);
      }

      buf[(v5 >> 3) - 8] = v6 & ~(_BYTE)v7;
      else {
        BOOL v8 = &v3[snprintf(v3, _MergedGlobals_4 - v3 + 536, ", ")];
      }
      Class result = (uint64_t *)snprintf(v8, _MergedGlobals_4 - v8 + 536, "UNKNOWN(%d)", v5);
      uint64_t v3 = &v8[(int)result];
      int v4 = v17;
    }

    while (v17);
  }

  return result;
}

LABEL_49:
    unsigned int v39 = -[SAThreadExclavesInfo initWithCallstacks:](objc_alloc(&OBJC_CLASS___SAThreadExclavesInfo), v303);
    int v40 = *(void *)(a2 + 7344);
    int v41 = ktrace_get_pid_for_thread();
    if ((v41 & 0x80000000) != 0)
    {
      v56 = *__error();
      _sa_logt();
      v57 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = v41;
        *(_WORD *)&buf[8] = 2048;
        *(void *)&buf[10] = v40;
        _os_log_error_impl( &dword_186C92000,  v57,  OS_LOG_TYPE_ERROR,  "Invalid pid [%d] for exclave info tid 0x%llu",  buf,  0x12u);
      }

      *__error() = v56;
    }

    else
    {
      v42 = -[SASampleStore lastTaskWithPid:](v305, v41);
      unsigned int v43 = v42;
      if (v42)
      {
        [v42 threads];
        unsigned int v44 = (void *)objc_claimAutoreleasedReturnValue();
        [MEMORY[0x189607968] numberWithUnsignedLongLong:v40];
        int v45 = (void *)objc_claimAutoreleasedReturnValue();
        [v44 objectForKeyedSubscript:v45];
        int v46 = (void *)objc_claimAutoreleasedReturnValue();

        v311 = 0LL;
        v312 = &v311;
        v313 = 0x2020000000LL;
        v314 = 0;
        *(void *)buf = MEMORY[0x1895F87A8];
        *(void *)&buf[8] = 3221225472LL;
        *(void *)&uint8_t buf[16] = __55__SASampleStore_KPerf__backfillExclaveFromKPerf_state___block_invoke_72;
        v322 = &unk_189F62098;
        v325 = a2;
        int v47 = v46;
        *(void *)&v323 = v47;
        v48 = v39;
        *((void *)&v323 + 1) = v48;
        v324 = &v311;
        [v47 enumerateThreadStatesBetweenStartTime:0 startSampleIndex:0x7FFFFFFFFFFFFFFFLL endTime:0 endSampleIndex:0x7FFFFFFFFFFFFFFFLL reverseOrder:1 block:buf];
        if (!*((_DWORD *)v312 + 6))
        {
          v49 = *__error();
          _sa_logt();
          unsigned int v50 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
          {
            [v47 debugDescription];
            v181 = (void *)objc_claimAutoreleasedReturnValue();
            [v48 debugDescription];
            v182 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)v317 = 138412546;
            v318 = v181;
            v319 = 2112;
            v320 = v182;
            _os_log_error_impl( &dword_186C92000,  v50,  OS_LOG_TYPE_ERROR,  "No thread states in %@ need exclave info %@",  v317,  0x16u);
          }

          *__error() = v49;
        }

        _Block_object_dispose(&v311, 8);
      }

      else
      {
        unsigned int v60 = *__error();
        _sa_logt();
        unsigned int v61 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)&uint8_t buf[4] = v41;
          *(_WORD *)&buf[8] = 2048;
          *(void *)&buf[10] = v40;
          _os_log_error_impl( &dword_186C92000,  v61,  OS_LOG_TYPE_ERROR,  "No task with pid [%d] for exclave info tid 0x%llx",  buf,  0x12u);
        }

        *__error() = v60;
      }
    }

    if ((*(void *)a2 & 0x1000000C0LL) != 0)
    {
      LODWORD(v62) = *__error();
      _sa_logt();
      int v23 = (void *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled((os_log_t)v23, OS_LOG_TYPE_FAULT)) {
        goto LABEL_124;
      }
      goto LABEL_74;
    }

      if ((v1 & 0x20) != 0) {
        goto LABEL_87;
      }
      goto LABEL_50;
    }

    goto LABEL_43;
  }

  uint64_t v3 = (char *)&qword_18C4B13D0;
  if ((v1 & 2) != 0) {
    goto LABEL_42;
  }
  if ((v1 & 4) != 0)
  {
LABEL_46:
    Class result = (uint64_t *)snprintf(v3, _MergedGlobals_4 - v3 + 536, "tid");
    v3 += (int)result;
    qos_class_t v1 = *v2;
    goto LABEL_47;
  }

  if ((v1 & 8) != 0) {
    goto LABEL_82;
  }
  if ((v1 & 0x10) != 0) {
    goto LABEL_86;
  }
  if ((v1 & 0x20) != 0) {
    goto LABEL_90;
  }
  if ((v1 & 0x40) != 0) {
    goto LABEL_94;
  }
  if ((v1 & 0x80) != 0) {
    goto LABEL_98;
  }
  if ((v1 & 0x200000000LL) != 0) {
    goto LABEL_102;
  }
  if ((v1 & 0x100) != 0) {
    goto LABEL_106;
  }
  if ((v1 & 0x200) != 0) {
    goto LABEL_110;
  }
  if ((v1 & 0x400) != 0) {
    goto LABEL_114;
  }
  if ((v1 & 0x800) != 0) {
    goto LABEL_118;
  }
  if ((v1 & 0x1000) != 0) {
    goto LABEL_122;
  }
  if ((v1 & 0x2000) != 0) {
    goto LABEL_126;
  }
  if ((v1 & 0x4000) != 0) {
    goto LABEL_130;
  }
  if ((v1 & 0x8000) != 0) {
    goto LABEL_134;
  }
  if ((v1 & 0x10000) != 0) {
    goto LABEL_138;
  }
  if ((v1 & 0x20000) != 0) {
    goto LABEL_142;
  }
  if ((v1 & 0x40000) != 0) {
    goto LABEL_146;
  }
  if ((v1 & 0x80000) != 0) {
    goto LABEL_150;
  }
  if ((v1 & 0x100000) != 0) {
    goto LABEL_154;
  }
  if ((v1 & 0x200000) != 0) {
    goto LABEL_158;
  }
  if ((v1 & 0x400000) != 0) {
    goto LABEL_162;
  }
  if ((v1 & 0x1000000) != 0) {
    goto LABEL_166;
  }
  if ((v1 & 0x2000000) != 0) {
    goto LABEL_170;
  }
  if ((v1 & 0x4000000) != 0) {
    goto LABEL_174;
  }
  if ((v1 & 0x8000000) != 0) {
    goto LABEL_178;
  }
  if ((v1 & 0x10000000) != 0) {
    goto LABEL_182;
  }
  if ((v1 & 0x20000000) != 0) {
    goto LABEL_186;
  }
  if ((v1 & 0x40000000) != 0) {
    goto LABEL_190;
  }
  if ((v1 & 0x80000000) == 0)
  {
    if ((v1 & 0x100000000LL) == 0)
    {
      if ((v1 & 0x8000000000000000LL) == 0) {
        goto LABEL_203;
      }
      goto LABEL_202;
    }

    goto LABEL_198;
  }
}

      int v71 = *__error();
      _sa_logt();
      self = (SABinary *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled((os_log_t)self, OS_LOG_TYPE_ERROR))
      {
        int v72 = *(unsigned __int16 *)((char *)a3 + 75);
        *(_DWORD *)buf = 134218496;
        uint64_t v107 = a4;
        v108 = 1024;
        *(_DWORD *)v109 = v72;
        *(_WORD *)&v109[4] = 2048;
        *(void *)&v109[6] = v7;
        _os_log_error_impl( &dword_186C92000,  (os_log_t)self,  OS_LOG_TYPE_ERROR,  "bufferLength %lu < serialized SABinary struct plus %u segments %llu",  buf,  0x1Cu);
      }

      *__error() = v71;
      _SASetCrashLogMessage( 4859,  "bufferLength %lu < serialized SABinary struct plus %u segments %llu",  v73,  v74,  v75,  v76,  v77,  v78,  a4);
      _os_crash();
      __break(1u);
      goto LABEL_52;
    }

            self->_machAbsTimeSeconds = (double)v25 / v24;
            ((void (*)(void (**)(void)))v7[2])(v7);
            ((void (*)(void (**)(void)))v9[2])(v9);
            ((void (*)(void (**)(void)))v11[2])(v11);
            goto LABEL_50;
          }
        }

        else
        {
          unsigned int v19 = self->_machAbsTimeSeconds;
        }

        int v24 = v119[3];
        uint64_t v25 = (unint64_t)(v19 * v24);
        self->_machAbsTime = v25;
        goto LABEL_49;
      }

      if (machAbsTimeSeconds != 0.0) {
        goto LABEL_32;
      }
      if (!v12) {
        int v12 = (SATimestamp *)-[SATimestamp copy](self, "copy");
      }
      if (*((_DWORD *)v123 + 8))
      {
        machAbsTime = self->_machAbsTime;
        if (*((_DWORD *)v123 + 9))
        {
          int v15 = v123[4];
          if ((_DWORD)v15) {
            unsigned int v16 = HIDWORD(v15) == 0;
          }
          else {
            unsigned int v16 = 1;
          }
          if (v16)
          {
            machAbsTime = 0LL;
          }

          else if ((_DWORD)v15 != HIDWORD(v15))
          {
            machAbsTime = __udivti3();
          }

          int v23 = (double)machAbsTime / 1000000000.0;
          goto LABEL_40;
        }
      }

      else
      {
        machAbsTime = self->_machAbsTime;
      }

      int v23 = (double)machAbsTime / v119[3];
LABEL_40:
      self->_machAbsTimeSeconds = v23;
      ((void (*)(void (**)(void)))v7[2])(v7);
      ((void (*)(void (**)(void)))v9[2])(v9);
      ((void (*)(void (**)(void)))v11[2])(v11);
LABEL_50:
      unint64_t v17 = 1;
LABEL_51:
      machContTimeSeconds = self->_machContTimeSeconds;
      if (!self->_machContTime)
      {
        if (machContTimeSeconds == 0.0) {
          goto LABEL_84;
        }
        if (!v12) {
          int v12 = (SATimestamp *)-[SATimestamp copy](self, "copy");
        }
        int v32 = v123;
        if (*((_DWORD *)v123 + 8))
        {
          uint64_t v33 = self->_machContTimeSeconds;
          if (*((_DWORD *)v123 + 9))
          {
            unsigned int v34 = 0LL;
            unsigned int v35 = v123[4];
            if ((_DWORD)v35)
            {
              if (HIDWORD(v35))
              {
                unsigned int v34 = (unint64_t)(v33 * 1000000000.0);
                if (HIDWORD(v35) != (_DWORD)v35) {
                  unsigned int v34 = __udivti3();
                }
              }
            }

            int v36 = 0LL;
            self->_machContTime = v34;
            int v37 = v32[4];
            if ((_DWORD)v37)
            {
              unsigned int v38 = 1000000000.0;
              if (HIDWORD(v37))
              {
                if ((_DWORD)v37 != HIDWORD(v37)) {
                  unsigned int v34 = __udivti3();
                }
                int v36 = v34;
                goto LABEL_76;
              }
            }

            else
            {
LABEL_76:
              unsigned int v38 = 1000000000.0;
            }

            id v7 = v30;
            unsigned int v10 = v94;
            int v12 = v95;
          }
        }

        unsigned int v35 = [v23 loadAddress];
        if (!v26) {
          break;
        }
        if (v35 + v26 > [v12 loadAddress]) {
          goto LABEL_55;
        }
LABEL_70:

        ++v9;
      }

      if (v35 < [v12 loadAddress]) {
        goto LABEL_70;
      }
LABEL_55:
      int v36 = [v23 loadAddress];
      int v37 = [v12 loadAddress];
      if (v96)
      {
        if (v36 >= v37 + v96) {
          goto LABEL_73;
        }
LABEL_59:
        if (v24 != v98) {
          goto LABEL_82;
        }
        if (v25 == v97)
        {
          uint64_t v25 = v97;
          [v23 loadAddress];
          [v12 loadAddress];
LABEL_81:
          int v24 = v98;
LABEL_82:

          goto LABEL_83;
        }

        if (v25 && v97) {
          goto LABEL_81;
        }
        if (!v25)
        {
          unsigned int v44 = [v23 loadAddress];
          if (v44 > [v12 loadAddress]) {
            goto LABEL_80;
          }
          int v45 = [v23 loadAddress];
          int v46 = v12;
          int v47 = [v23 length] + v45;
          v48 = [v46 loadAddress];
          if (v47 < [v46 length] + v48) {
            goto LABEL_80;
          }
          v49 = [v46 loadAddress];
          unsigned int v50 = v49 - [v23 loadAddress];
          if ([v97 hasOffsetIntoBinary])
          {
            if ([v97 offsetIntoBinary] == v50) {
              goto LABEL_80;
            }
LABEL_102:
            int v73 = *__error();
            _sa_logt();
            v74 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            v75 = v46;
            if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
            {
              v76 = [v23 debugDescription];
              unsigned int v77 = [v76 UTF8String];
              unsigned int v78 = [v75 debugDescription];
              int v79 = [v78 UTF8String];
              *(_DWORD *)buf = 136315394;
              v112 = v77;
              v113 = 2080;
              v114 = v79;
              _os_log_error_impl( &dword_186C92000,  v74,  OS_LOG_TYPE_ERROR,  "load info for entire binary %s doesn't match segment load info %s",  buf,  0x16u);
            }

            *__error() = v73;
            int v80 = [v23 debugDescription];
            unsigned int v81 = [v80 UTF8String];
            int v82 = [v75 debugDescription];
            [v82 UTF8String];
            _SASetCrashLogMessage( 1544,  "load info for entire binary %s doesn't match segment load info %s",  v83,  v84,  v85,  v86,  v87,  v88,  v81);

            _os_crash();
            __break(1u);
          }

          if (v97)
          {
            uint64_t v25 = 0LL;
            v97[5] = v50;
          }

          else
          {
LABEL_80:
            uint64_t v25 = 0LL;
          }

          goto LABEL_81;
        }

        unsigned int v38 = [v12 loadAddress];
        if (v38 > [v23 loadAddress]) {
          goto LABEL_81;
        }
        unsigned int v39 = [v12 loadAddress];
        int v40 = [v12 length] + v39;
        int v41 = [v23 loadAddress];
        if (v40 < [v23 length] + v41) {
          goto LABEL_81;
        }
        v42 = [v23 loadAddress];
        unsigned int v43 = v42 - [v12 loadAddress];
        if ([v25 hasOffsetIntoBinary])
        {
          if ([v25 offsetIntoBinary] != v43)
          {
            v59 = *__error();
            _sa_logt();
            unsigned int v60 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
            {
              unsigned int v61 = [v12 debugDescription];
              int v62 = [v61 UTF8String];
              int v63 = [v23 debugDescription];
              v64 = [v63 UTF8String];
              *(_DWORD *)buf = 136315394;
              v112 = v62;
              v113 = 2080;
              v114 = v64;
              _os_log_error_impl( &dword_186C92000,  v60,  OS_LOG_TYPE_ERROR,  "load info for entire binary %s doesn't match segment load info %s",  buf,  0x16u);

              int v12 = v95;
            }

            *__error() = v59;
            unsigned int v65 = [v12 debugDescription];
            unsigned int v66 = [v65 UTF8String];
            int v46 = [v23 debugDescription];
            [v46 UTF8String];
            _SASetCrashLogMessage( 1520,  "load info for entire binary %s doesn't match segment load info %s",  v67,  v68,  v69,  v70,  v71,  v72,  v66);

            _os_crash();
            __break(1u);
            goto LABEL_102;
          }

          if (v10) {
            goto LABEL_69;
          }
LABEL_72:
          unsigned int v10 = (void *)[objc_alloc(MEMORY[0x189603FA8]) initWithCapacity:1];
        }

        else
        {
          v25[5] = v43;
          if (!v10) {
            goto LABEL_72;
          }
        }

LABEL_262:
    objc_autoreleasePoolPop(context);
  }
}

void sub_186CC4978( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, void *a44, void *a45, void *a46, uint64_t a47, uint64_t a48, void *a49, void *a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,void *a55)
{
  _Unwind_Resume(a1);
}

uint64_t *StringForKPDecodeContentBits(uint64_t *result)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  uint64_t v1 = *result;
  if (!*result)
  {
    strcpy((char *)&qword_18C4B13D0, "empty");
    return result;
  }

  id v2 = result;
  if ((v1 & 1) != 0)
  {
    strcpy((char *)&qword_18C4B13D0, "timestamp");
    uint64_t v1 = *result;
    if ((*result & 2) == 0)
    {
      uint64_t v3 = (char *)&word_18C4B13D8 + 1;
      if ((v1 & 4) == 0) {
        goto LABEL_47;
      }
LABEL_43:
      else {
        v3 += snprintf(v3, _MergedGlobals_4 - v3 + 536, ", ");
      }
      goto LABEL_46;
    }

    uint64_t v3 = (char *)&word_18C4B13D8
LABEL_42:
    Class result = (uint64_t *)snprintf(v3, _MergedGlobals_4 - v3 + 536, "cpuno");
    v3 += (int)result;
    uint64_t v1 = *v2;
    if ((*v2 & 4) == 0)
    {
LABEL_47:
      if ((v1 & 8) == 0)
      {
        if ((v1 & 0x10) != 0) {
          goto LABEL_83;
        }
        goto LABEL_49;
      }

      else {
        v3 += snprintf(v3, _MergedGlobals_4 - v3 + 536, ", ");
      }
LABEL_82:
      Class result = (uint64_t *)snprintf(v3, _MergedGlobals_4 - v3 + 536, "threadname");
      v3 += (int)result;
      uint64_t v1 = *v2;
      if ((*v2 & 0x10) != 0)
      {
LABEL_83:
        else {
          v3 += snprintf(v3, _MergedGlobals_4 - v3 + 536, ", ");
        }
LABEL_86:
        Class result = (uint64_t *)snprintf(v3, _MergedGlobals_4 - v3 + 536, "kevent");
        v3 += (int)result;
        uint64_t v1 = *v2;
        if ((*v2 & 0x20) != 0)
        {
LABEL_87:
          else {
            v3 += snprintf(v3, _MergedGlobals_4 - v3 + 536, ", ");
          }
LABEL_90:
          Class result = (uint64_t *)snprintf(v3, _MergedGlobals_4 - v3 + 536, "threadinfo");
          v3 += (int)result;
          uint64_t v1 = *v2;
          if ((*v2 & 0x40) != 0)
          {
LABEL_91:
            else {
              v3 += snprintf(v3, _MergedGlobals_4 - v3 + 536, ", ");
            }
LABEL_94:
            Class result = (uint64_t *)snprintf(v3, _MergedGlobals_4 - v3 + 536, "kstack");
            v3 += (int)result;
            uint64_t v1 = *v2;
            if ((*v2 & 0x80) != 0)
            {
LABEL_95:
              else {
                v3 += snprintf(v3, _MergedGlobals_4 - v3 + 536, ", ");
              }
LABEL_98:
              Class result = (uint64_t *)snprintf(v3, _MergedGlobals_4 - v3 + 536, "ustack");
              v3 += (int)result;
              uint64_t v1 = *v2;
              if ((*v2 & 0x200000000LL) != 0)
              {
LABEL_99:
                else {
                  v3 += snprintf(v3, _MergedGlobals_4 - v3 + 536, ", ");
                }
LABEL_102:
                Class result = (uint64_t *)snprintf(v3, _MergedGlobals_4 - v3 + 536, "exstack");
                v3 += (int)result;
                uint64_t v1 = *v2;
                if ((*v2 & 0x100) != 0)
                {
LABEL_103:
                  else {
                    v3 += snprintf(v3, _MergedGlobals_4 - v3 + 536, ", ");
                  }
LABEL_106:
                  Class result = (uint64_t *)snprintf(v3, _MergedGlobals_4 - v3 + 536, "trigger");
                  v3 += (int)result;
                  uint64_t v1 = *v2;
                  if ((*v2 & 0x200) != 0)
                  {
LABEL_107:
                    else {
                      v3 += snprintf(v3, _MergedGlobals_4 - v3 + 536, ", ");
                    }
LABEL_110:
                    Class result = (uint64_t *)snprintf(v3, _MergedGlobals_4 - v3 + 536, "pmc_thread");
                    v3 += (int)result;
                    uint64_t v1 = *v2;
                    if ((*v2 & 0x400) != 0)
                    {
LABEL_111:
                      else {
                        v3 += snprintf(v3, _MergedGlobals_4 - v3 + 536, ", ");
                      }
LABEL_114:
                      Class result = (uint64_t *)snprintf(v3, _MergedGlobals_4 - v3 + 536, "pmc_cpu");
                      v3 += (int)result;
                      uint64_t v1 = *v2;
                      if ((*v2 & 0x800) != 0)
                      {
LABEL_115:
                        else {
                          v3 += snprintf(v3, _MergedGlobals_4 - v3 + 536, ", ");
                        }
LABEL_118:
                        Class result = (uint64_t *)snprintf(v3, _MergedGlobals_4 - v3 + 536, "pmc_config");
                        v3 += (int)result;
                        uint64_t v1 = *v2;
                        if ((*v2 & 0x1000) != 0)
                        {
LABEL_119:
                          else {
                            v3 += snprintf(v3, _MergedGlobals_4 - v3 + 536, ", ");
                          }
LABEL_122:
                          Class result = (uint64_t *)snprintf(v3, _MergedGlobals_4 - v3 + 536, "meminfo");
                          v3 += (int)result;
                          uint64_t v1 = *v2;
                          if ((*v2 & 0x2000) != 0)
                          {
LABEL_123:
                            else {
                              v3 += snprintf(v3, _MergedGlobals_4 - v3 + 536, ", ");
                            }
LABEL_126:
                            Class result = (uint64_t *)snprintf(v3, _MergedGlobals_4 - v3 + 536, "sample");
                            v3 += (int)result;
                            uint64_t v1 = *v2;
                            if ((*v2 & 0x4000) != 0)
                            {
LABEL_127:
                              else {
                                v3 += snprintf(v3, _MergedGlobals_4 - v3 + 536, ", ");
                              }
LABEL_130:
                              Class result = (uint64_t *)snprintf(v3, _MergedGlobals_4 - v3 + 536, "cswitch");
                              v3 += (int)result;
                              uint64_t v1 = *v2;
                              if ((*v2 & 0x8000) != 0)
                              {
LABEL_131:
                                else {
                                  v3 += snprintf(v3, _MergedGlobals_4 - v3 + 536, ", ");
                                }
LABEL_134:
                                Class result = (uint64_t *)snprintf(v3, _MergedGlobals_4 - v3 + 536, "config_ws");
                                v3 += (int)result;
                                uint64_t v1 = *v2;
                                if ((*v2 & 0x10000) != 0)
                                {
LABEL_135:
                                  else {
                                    v3 += snprintf(v3, _MergedGlobals_4 - v3 + 536, ", ");
                                  }
LABEL_138:
                                  Class result = (uint64_t *)snprintf(v3, _MergedGlobals_4 - v3 + 536, "lost_evts");
                                  v3 += (int)result;
                                  uint64_t v1 = *v2;
                                  if ((*v2 & 0x20000) != 0)
                                  {
LABEL_139:
                                    else {
                                      v3 += snprintf(v3, _MergedGlobals_4 - v3 + 536, ", ");
                                    }
LABEL_142:
                                    Class result = (uint64_t *)snprintf(v3, _MergedGlobals_4 - v3 + 536, "straggler");
                                    v3 += (int)result;
                                    uint64_t v1 = *v2;
                                    if ((*v2 & 0x40000) != 0)
                                    {
LABEL_143:
                                      else {
                                        v3 += snprintf(v3, _MergedGlobals_4 - v3 + 536, ", ");
                                      }
LABEL_146:
                                      Class result = (uint64_t *)snprintf(v3, _MergedGlobals_4 - v3 + 536, "signpost");
                                      v3 += (int)result;
                                      uint64_t v1 = *v2;
                                      if ((*v2 & 0x80000) != 0)
                                      {
LABEL_147:
                                        else {
                                          v3 += snprintf(v3, _MergedGlobals_4 - v3 + 536, ", ");
                                        }
LABEL_150:
                                        Class result = (uint64_t *)snprintf(v3, _MergedGlobals_4 - v3 + 536, "id_string");
                                        v3 += (int)result;
                                        uint64_t v1 = *v2;
                                        if ((*v2 & 0x100000) != 0)
                                        {
LABEL_151:
                                          else {
                                            v3 += snprintf(v3, _MergedGlobals_4 - v3 + 536, ", ");
                                          }
LABEL_154:
                                          Class result = (uint64_t *)snprintf(v3, _MergedGlobals_4 - v3 + 536, "tinfo_sched");
                                          v3 += (int)result;
                                          uint64_t v1 = *v2;
                                          if ((*v2 & 0x200000) != 0)
                                          {
LABEL_155:
                                            else {
                                              v3 += snprintf(v3, _MergedGlobals_4 - v3 + 536, ", ");
                                            }
LABEL_158:
                                            Class result = (uint64_t *)snprintf( v3,  _MergedGlobals_4 - v3 + 536,  "task_snapshot");
                                            v3 += (int)result;
                                            uint64_t v1 = *v2;
                                            if ((*v2 & 0x400000) != 0)
                                            {
LABEL_159:
                                              else {
                                                v3 += snprintf(v3, _MergedGlobals_4 - v3 + 536, ", ");
                                              }
LABEL_162:
                                              Class result = (uint64_t *)snprintf( v3,  _MergedGlobals_4 - v3 + 536,  "thread_snapshot");
                                              v3 += (int)result;
                                              uint64_t v1 = *v2;
                                              if ((*v2 & 0x1000000) != 0)
                                              {
LABEL_163:
                                                else {
                                                  v3 += snprintf(v3, _MergedGlobals_4 - v3 + 536, ", ");
                                                }
LABEL_166:
                                                Class result = (uint64_t *)snprintf( v3,  _MergedGlobals_4 - v3 + 536,  "timer_fire");
                                                v3 += (int)result;
                                                uint64_t v1 = *v2;
                                                if ((*v2 & 0x2000000) != 0)
                                                {
LABEL_167:
                                                  else {
                                                    v3 += snprintf(v3, _MergedGlobals_4 - v3 + 536, ", ");
                                                  }
LABEL_170:
                                                  Class result = (uint64_t *)snprintf( v3,  _MergedGlobals_4 - v3 + 536,  "system_memory");
                                                  v3 += (int)result;
                                                  uint64_t v1 = *v2;
                                                  if ((*v2 & 0x4000000) != 0)
                                                  {
LABEL_171:
                                                    else {
                                                      v3 += snprintf(v3, _MergedGlobals_4 - v3 + 536, ", ");
                                                    }
LABEL_174:
                                                    Class result = (uint64_t *)snprintf( v3,  _MergedGlobals_4 - v3 + 536,  "thread_inscyc");
                                                    v3 += (int)result;
                                                    uint64_t v1 = *v2;
                                                    if ((*v2 & 0x8000000) != 0)
                                                    {
LABEL_175:
                                                      else {
                                                        v3 += snprintf(v3, _MergedGlobals_4 - v3 + 536, ", ");
                                                      }
LABEL_178:
                                                      Class result = (uint64_t *)snprintf( v3,  _MergedGlobals_4 - v3 + 536,  "tinfo_sched_v2");
                                                      v3 += (int)result;
                                                      uint64_t v1 = *v2;
                                                      if ((*v2 & 0x10000000) != 0)
                                                      {
LABEL_179:
                                                        else {
                                                          v3 += snprintf(v3, _MergedGlobals_4 - v3 + 536, ", ");
                                                        }
LABEL_182:
                                                        Class result = (uint64_t *)snprintf( v3,  _MergedGlobals_4 - v3 + 536,  "thread_dispatch_label");
                                                        v3 += (int)result;
                                                        uint64_t v1 = *v2;
                                                        if ((*v2 & 0x20000000) != 0)
                                                        {
LABEL_183:
                                                          else {
                                                            v3 += snprintf(v3, _MergedGlobals_4 - v3 + 536, ", ");
                                                          }
LABEL_186:
                                                          Class result = (uint64_t *)snprintf( v3,  _MergedGlobals_4 - v3 + 536,  "specific_thread_name");
                                                          v3 += (int)result;
                                                          uint64_t v1 = *v2;
                                                          if ((*v2 & 0x40000000) != 0)
                                                          {
LABEL_187:
                                                            else {
                                                              v3 += snprintf(v3, _MergedGlobals_4 - v3 + 536, ", ");
                                                            }
LABEL_190:
                                                            Class result = (uint64_t *)snprintf( v3,  _MergedGlobals_4 - v3 + 536,  "pmi");
                                                            v3 += (int)result;
                                                            uint64_t v1 = *v2;
                                                            if ((*v2 & 0x80000000) != 0)
                                                            {
LABEL_191:
                                                              else {
                                                                v3 += snprintf(v3, _MergedGlobals_4 - v3 + 536, ", ");
                                                              }
                                                              goto LABEL_194;
                                                            }

LABEL_76:
                                                            if ((v1 & 0x100000000LL) != 0) {
                                                              goto LABEL_195;
                                                            }
                                                            goto LABEL_77;
                                                          }

            uint64_t v17 = 1LL;
LABEL_163:

            return v17;
          }
        }

        else
        {
          BOOL v8 = 0LL;
        }

        int v19 = [*(id *)(a1 + 160) targetThreadId];
        if (v19)
        {
          if (!v5)
          {
            int v36 = *(void **)(a1 + 8);
            if (v36)
            {
              objc_msgSend( v36,  "printWithFormat:",  @"targeting thread 0x%llx, but no target task",  objc_msgSend(*(id *)(a1 + 160), "targetThreadId"));
LABEL_161:
              uint64_t v17 = 1LL;
              goto LABEL_162;
            }

            int v46 = *__error();
            _sa_logt();
            int v47 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
            {
              v75 = [*(id *)(a1 + 160) targetThreadId];
              *(_DWORD *)buf = 134217984;
              *(void *)&uint8_t buf[4] = v75;
              _os_log_error_impl( &dword_186C92000,  v47,  OS_LOG_TYPE_ERROR,  "targeting thread 0x%llx, but no target task",  buf,  0xCu);
            }

            v48 = __error();
LABEL_80:
            FILE *v48 = v46;
            goto LABEL_161;
          }

          [v5 threads];
          __int16 v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend( MEMORY[0x189607968],  "numberWithUnsignedLongLong:",  objc_msgSend(*(id *)(a1 + 160), "targetThreadId"));
          unint64_t v21 = (void *)objc_claimAutoreleasedReturnValue();
          [v20 objectForKeyedSubscript:v21];
          uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v22)
          {
            int v37 = *(void **)(a1 + 8);
            if (v37)
            {
              unsigned int v38 = [*(id *)(a1 + 160) targetThreadId];
              -[SASamplePrinter displayNameForTask:]((void *)a1, v5);
              unsigned int v39 = (void *)objc_claimAutoreleasedReturnValue();
              [v37 printWithFormat:@"targeting thread 0x%llx in %@ but no such thread found", v38, v39];
            }

            else
            {
              unsigned int v51 = *__error();
              _sa_logt();
              int v52 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
              {
                v76 = [*(id *)(a1 + 160) targetThreadId];
                -[SASamplePrinter displayNameForTask:]((void *)a1, v5);
                unsigned int v77 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 134218242;
                *(void *)&uint8_t buf[4] = v76;
                *(_WORD *)&buf[12] = 2112;
                *(void *)&buf[14] = v77;
                _os_log_error_impl( &dword_186C92000,  v52,  OS_LOG_TYPE_ERROR,  "targeting thread 0x%llx in %@ but no such thread found",  buf,  0x16u);
              }

              *__error() = v51;
            }

            goto LABEL_161;
          }

          if (v8)
          {
            *(void *)buf = 0LL;
            *(void *)&buf[8] = buf;
            *(void *)&uint8_t buf[16] = 0x2020000000LL;
            LOBYTE(v105) = 0;
            int v23 = *(void *)(a1 + 32);
            int v24 = *(void *)(a1 + 40);
            uint64_t v25 = *(void *)(a1 + 48);
            uint64_t v26 = *(void *)(a1 + 56);
            v95[0] = MEMORY[0x1895F87A8];
            v95[1] = 3221225472LL;
            v95[2] = __37__SASamplePrinter_checkForBadOptions__block_invoke;
            v95[3] = &unk_189F61DB0;
            uint64_t v27 = v8;
            v96 = v27;
            v97 = buf;
            [v22 enumerateThreadStatesBetweenStartTime:v23 startSampleIndex:v25 endTime:v24 endSampleIndex:v26 reverseOrder:0 block:v95];
            if (!*(_BYTE *)(*(void *)&buf[8] + 24LL))
            {
              unsigned int v50 = *(void **)(a1 + 8);
              if (v50)
              {
                objc_msgSend( v50,  "printWithFormat:",  @"Target dispatch queue %llu never runs on target thread 0x%llx",  objc_msgSend(v27, "identifier"),  objc_msgSend(v22, "threadId"));
              }

              else
              {
                unsigned int v61 = *__error();
                _sa_logt();
                int v62 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
                {
                  int v86 = [v27 identifier];
                  int v87 = [v22 threadId];
                  *(_DWORD *)v102 = 134218240;
                  *(void *)&v102[4] = v86;
                  *(_WORD *)&v102[12] = 2048;
                  *(void *)&v102[14] = v87;
                  _os_log_error_impl( &dword_186C92000,  v62,  OS_LOG_TYPE_ERROR,  "Target dispatch queue %llu never runs on target thread 0x%llx",  v102,  0x16u);
                }

                *__error() = v61;
              }

              _Block_object_dispose(buf, 8);
              goto LABEL_161;
            }

            _Block_object_dispose(buf, 8);
            unsigned int v28 = 1;
          }

          else
          {
            unsigned int v28 = 0;
          }
        }

        else
        {
          uint64_t v22 = 0LL;
          unsigned int v28 = v8 != 0LL;
        }

        if ([*(id *)(a1 + 16) printHeavyStacks])
        {
LABEL_43:
          if (!v5)
          {
            int v53 = *(void **)(a1 + 8);
            if (v53)
            {
              objc_msgSend(v53, "printWithFormat:", @"printTargetThreadOnly, but no target task provided");
            }

            else
            {
              int v63 = *__error();
              _sa_logt();
              v64 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)buf = 0;
                _os_log_error_impl( &dword_186C92000,  v64,  OS_LOG_TYPE_ERROR,  "printTargetThreadOnly, but no target task provided",  buf,  2u);
              }

              *__error() = v63;
            }

            goto LABEL_161;
          }

          [v5 mainThread];
          int v30 = (void *)objc_claimAutoreleasedReturnValue();
          uint64_t v31 = v30 == 0LL;

          if (!v31)
          {
LABEL_172:
            if ([*(id *)(a1 + 16) systemstatsFormat])
            {
              if ([*(id *)(a1 + 16) displayIOInCallTrees])
              {
                int v32 = *(void **)(a1 + 8);
                if (v32)
                {
                  [v32 printWithFormat:@"displayIOInCallTrees not supported with systemstatsFormat"];
LABEL_141:

                  goto LABEL_161;
                }

                unsigned int v65 = *__error();
                _sa_logt();
                unsigned int v66 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)buf = 0;
                  _os_log_error_impl( &dword_186C92000,  v66,  OS_LOG_TYPE_ERROR,  "displayIOInCallTrees not supported with systemstatsFormat",  buf,  2u);
                }

                goto LABEL_140;
              }

              if ([*(id *)(a1 + 16) callTreeTimestampsTimeDomain]
                && [*(id *)(a1 + 16) callTreeTimestampsTimeDomain] != 1)
              {
                v68 = *(void **)(a1 + 8);
                if (v68)
                {
                  [v68 printWithFormat:@"callTreeTimestampsTimeDomain time domains other than kSATimeDomainWallTime not supported with systemstatsFormat"];
                  goto LABEL_141;
                }

                unsigned int v65 = *__error();
                _sa_logt();
                unsigned int v66 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)buf = 0;
                  _os_log_error_impl( &dword_186C92000,  v66,  OS_LOG_TYPE_ERROR,  "callTreeTimestampsTimeDomain time domains other than kSATimeDomainWallTime not supported with systemstatsFormat",  buf,  2u);
                }

                goto LABEL_140;
              }
            }

            if (![*(id *)(a1 + 16) swiftAsyncPrintLeafyCCallstackOnTopOfSwiftAsyncCallstacksAlways]
              || ![*(id *)(a1 + 16) swiftAsyncPrintLeafyCCallstackOnTopOfCRootCallstacksAlways])
            {

              uint64_t v17 = 0LL;
LABEL_162:

              goto LABEL_163;
            }

            v56 = *(void **)(a1 + 8);
            if (v56)
            {
              [v56 printWithFormat:@"swiftAsyncPrintLeafyCCallstackOnTopOfSwiftAsyncCallstacksAlways and swiftAsyncPrintLeafyCCallstackOnTopOfCRootCallstacksAlways both set"];
              goto LABEL_141;
            }

            unsigned int v65 = *__error();
            _sa_logt();
            unsigned int v66 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_error_impl( &dword_186C92000,  v66,  OS_LOG_TYPE_ERROR,  "swiftAsyncPrintLeafyCCallstackOnTopOfSwiftAsyncCallstacksAlways and swiftAsyncPrintLeafyCCallstackOnTopO fCRootCallstacksAlways both set",  buf,  2u);
            }

LABEL_75:
                                                          if ((v1 & 0x80000000) != 0) {
                                                            goto LABEL_191;
                                                          }
                                                          goto LABEL_76;
                                                        }

                *a4 = 1;
                goto LABEL_76;
              }

              if ((*((_BYTE *)v8 + 122) & 1) == 0)
              {
                *((_BYTE *)v8 + 122) = 1;
                *((_DWORD *)v8 + 6) = *(_DWORD *)(a1 + 136);
                goto LABEL_63;
              }

              if (*(int *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) >= 1 && qword_18C4B13C0 != 0)
              {
                unsigned int v39 = *__error();
                fprintf( (FILE *)qword_18C4B13C0,  "%'llu task [%d] latency qos %d backfilled to %d task states (indexes %lu-%lu)\n",  [*(id *)(a1 + 32) machAbsTime],  objc_msgSend(*(id *)(a1 + 40), "pid"),  *(_DWORD *)(a1 + 136),  *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8) + 24),  a3 + 1,  *(int *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) + a3);
                *__error() = v39;
                int v36 = *(void *)(*(void *)(a1 + 80) + 8LL);
              }

              *(_BYTE *)(v36 + 24) = 0;
            }

            if (!v17) {
              goto LABEL_75;
            }
            goto LABEL_73;
          }

          *((_BYTE *)v8 + 121) = 1;
          *((void *)v8 + _Block_object_dispose((const void *)(v1 - 88), 8) = *(void *)(a1 + 120);
        }

        uint64_t v17 = 1;
        if (!a3 && qword_18C4B13C0)
        {
          uint64_t v33 = *__error();
          fprintf( (FILE *)qword_18C4B13C0,  "%'llu task [%d] size %llu backfilled to all (%d) task states (indexes %lu-%lu)\n",  [*(id *)(a1 + 32) machAbsTime],  objc_msgSend(*(id *)(a1 + 40), "pid"),  *(void *)(a1 + 120),  *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) + 1,  0,  *(int *)(*(void *)(*(void *)(a1 + 64) + 8) + 24));
          *__error() = v33;
          uint64_t v17 = 1;
        }

        goto LABEL_59;
      }

      v7[120] = 1;
      *((void *)v7 + 9) = *(void *)(a1 + 88);
      *((void *)v7 + 10) = *(void *)(a1 + 96);
      *((void *)v7 + 12) = *(void *)(a1 + 104);
      *((void *)v7 + 11) = *(void *)(a1 + 112);
      *((_DWORD *)v7 + 2) = *(_DWORD *)(a1 + 128);
      *((_DWORD *)v7 + 4) = *(_DWORD *)(a1 + 132);
    }

    if (*(_BYTE *)(a1 + 140))
    {
      unsigned int v10 = [v7 ssFlags];
      if (v8) {
        *((void *)v8 + 14) = v10 | 0x40;
      }
    }

    if (*(_BYTE *)(a1 + 141))
    {
      uint64_t v11 = [v8 ssFlags];
      if (v8) {
        *((void *)v8 + 14) = v11 | 0x400;
      }
    }

    if (*(_BYTE *)(a1 + 142))
    {
      uint64_t v12 = [v8 ssFlags];
      if (v8) {
        *((void *)v8 + 14) = v12 | 0x800;
      }
    }

    if (*(_BYTE *)(a1 + 143))
    {
      uint64_t v13 = [v8 ssFlags];
      if (v8) {
        *((void *)v8 + 14) = v13 | 0x10000;
      }
    }

    if (*(_BYTE *)(a1 + 144))
    {
      uint64_t v14 = [v8 ssFlags];
      if (v8) {
        *((void *)v8 + 14) = v14 | 0x80000;
      }
      if (*(_BYTE *)(a1 + 145))
      {
        uint64_t v15 = [v8 ssFlags];
        if (v8) {
          *((void *)v8 + 14) = v15 | 0x40000;
        }
      }

      if (*(_BYTE *)(a1 + 146))
      {
        uint64_t v16 = [v8 ssFlags];
        if (v8) {
          *((void *)v8 + 14) = v16 | 0x20000;
        }
      }
    }

    uint64_t v17 = 1;
    if (!a3 && qword_18C4B13C0)
    {
      unsigned int v18 = *__error();
      int v19 = (FILE *)qword_18C4B13C0;
      __int16 v20 = [*(id *)(a1 + 32) machAbsTime];
      unint64_t v21 = [*(id *)(a1 + 40) pid];
      uint64_t v22 = *(unsigned __int8 *)(a1 + 144);
      if (*(_BYTE *)(a1 + 144))
      {
        int v23 = *(unsigned __int8 *)(a1 + 145);
        uint64_t v22 = *(unsigned __int8 *)(a1 + 146);
      }

      else
      {
        int v23 = 0;
      }

      fprintf( v19,  "%'llu task [%d] state (terminated cpu %llu, terminated instruction %llu, terminated cycles %llu, suspend count % d, pageins %u, darwinBG %d, foreground %d, boosted %d, dirty %d, wq total %d, wq constrained %d) backfilled to a ll (%d) task states (indexes %lu-%lu)\n",  v20,  v21,  *(void *)(a1 + 96) + *(void *)(a1 + 88),  *(void *)(a1 + 112),  *(void *)(a1 + 104),  *(_DWORD *)(a1 + 128),  *(_DWORD *)(a1 + 132),  *(unsigned __int8 *)(a1 + 140),  *(unsigned __int8 *)(a1 + 141),  *(unsigned __int8 *)(a1 + 142),  *(unsigned __int8 *)(a1 + 143),  v23,  v22,  *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) + 1,  0LL,  *(int *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL));
      *__error() = v18;
      uint64_t v17 = 1;
    }

    goto LABEL_46;
  }

  if (qword_18C4B13C0)
  {
    int v24 = *__error();
    fprintf( (FILE *)qword_18C4B13C0,  "%'llu task [%d] ran into non-kperf state at index %lu, stopping\n",  [*(id *)(a1 + 32) machAbsTime],  objc_msgSend(*(id *)(a1 + 40), "pid"),  a3);
    *__error() = v24;
  }

  *a4 = 1;
LABEL_77:
}

LABEL_73:
                                                      if ((v1 & 0x20000000) != 0) {
                                                        goto LABEL_183;
                                                      }
                                                      goto LABEL_74;
                                                    }

                if ([*(id *)(a1 + 48) dataStyle] == 3)
                {
                  ++*(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL);
LABEL_76:

                  goto LABEL_77;
                }

LABEL_72:
                                                    if ((v1 & 0x10000000) != 0) {
                                                      goto LABEL_179;
                                                    }
                                                    goto LABEL_73;
                                                  }

LABEL_69:
                                              if ((v1 & 0x2000000) != 0) {
                                                goto LABEL_167;
                                              }
                                              goto LABEL_70;
                                            }

        [MEMORY[0x189607968] numberWithUnsignedLongLong:*((void *)a2 + 5)];
        int v46 = (void *)objc_claimAutoreleasedReturnValue();
        [v81 setObject:0 forKeyedSubscript:v46];

        goto LABEL_96;
      case 14:
        uint64_t v15 = 1;
LABEL_14:
        if (!v9) {
          goto LABEL_63;
        }
        unint64_t v21 = objc_getProperty((id)v9, v10, 24LL, 1);
        if (!v21) {
          goto LABEL_63;
        }
        uint64_t v22 = *(_BYTE *)(v9 + 8);

        if (v15)
        {
          if ((v22 & 1) != 0)
          {
LABEL_18:
            int v19 = *((void *)a2 + 2);
            int v23 = *(void *)(v9 + 40);
            if (!v23 || v23 == v19) {
              goto LABEL_21;
            }
LABEL_20:
            objc_setProperty_atomic((id)v9, v18, 0LL, 48LL);
            *(_BYTE *)(v9 + 10) = 0;
LABEL_21:
            *(void *)(v9 + 40) = v19;
            *(_BYTE *)(v9 + 9) = 1;
LABEL_94:
            if (-[SASampleStore checkDyldInfoCompletion:]((uint64_t)v6, (void *)v9))
            {
              [MEMORY[0x189607968] numberWithUnsignedLongLong:*((void *)a2 + 5)];
              unsigned int v77 = (void *)objc_claimAutoreleasedReturnValue();
              [v81 setObject:0 forKeyedSubscript:v77];
            }

            goto LABEL_96;
          }
        }

        else if ((v22 & 1) == 0)
        {
          goto LABEL_18;
        }

    unint64_t v5 = v65;
  }

  return v6;
}

        [v10 addObject:v23];
        goto LABEL_70;
      }

      if (v36 <= v37) {
        goto LABEL_59;
      }
LABEL_73:

LABEL_74:
      [v90 addObject:v12];
LABEL_83:

      uint64_t v11 = v93 + 1;
    }

    while (v93 + 1 != v92);
    unsigned int v51 = [obj countByEnumeratingWithState:&v107 objects:v117 count:16];
    int v92 = v51;
  }

  while (v51);
LABEL_93:
  unint64_t v5 = obj;

  int v53 = [v90 count];
  int v52 = v53 != 0;
  if (v53)
  {
    int v54 = (void *)[*v7 mutableCopy];
    v55 = v54;
    if (v10) {
      [v54 removeObjectsInArray:v10];
    }
    [v55 addObjectsFromArray:v90];
    [v55 sortUsingComparator:&__block_literal_global_60];
    v56 = [v55 copy];
    v57 = *v7;
    *int v7 = (id)v56;
  }

LABEL_98:
  return v52;
}

LABEL_67:
                                          if ((v1 & 0x400000) != 0) {
                                            goto LABEL_159;
                                          }
                                          goto LABEL_68;
                                        }

        if (qword_18C4B13C0)
        {
          int v45 = *__error();
          fprintf( (FILE *)qword_18C4B13C0,  "%'llu WARNING: Missing first dyld tracepoint on thread 0x%llx\n",  *(void *)a2,  *((void *)a2 + 5));
          *__error() = v45;
        }

LABEL_64:
                                    if ((v1 & 0x80000) != 0) {
                                      goto LABEL_147;
                                    }
                                    goto LABEL_65;
                                  }

        *(_BYTE *)(v4 + 15) |= 0x40u;
        int v6 = *(void *)(a2 + 88);
        if ((v6 & 0x10) == 0) {
          goto LABEL_38;
        }
        goto LABEL_65;
      default:
        return (id)v4;
    }
  }

  v3->_voucherIdentifier = *(void *)(a2 + 56);
  v3->_userTimeInNs = *(void *)(a2 + 64);
  v3->_systemTimeInNs = *(void *)(a2 + 72);
  v3->_state = *(_DWORD *)(a2 + 80);
  -[SAThreadState setBasePriority:]((int *)v3, *(__int16 *)(a2 + 88));
  -[SAThreadState setScheduledPriority:]((int *)v4, *(__int16 *)(a2 + 90));
  *(_DWORD *)(v4 + 36) = *(_DWORD *)(a2 + 84);
  *(_BYTE *)(v4 + 24) = *(_BYTE *)(a2 + 95);
  -[SAThreadState setThreadQos:](v4, *(unsigned __int8 *)(a2 + 92));
  -[SAThreadState setThreadRequestedQos:](v4, *(unsigned __int8 *)(a2 + 93));
  -[SAThreadState setThreadRequestedQosOverride:](v4, *(unsigned __int8 *)(a2 + 94));
  *(_BYTE *)(v4 + 21) |= 0x38u;
  int v6 = *(void *)(a2 + 96);
  if ((v6 & 1) != 0)
  {
    *(_BYTE *)(v4 + 11) |= 0x40u;
    int v6 = *(void *)(a2 + 96);
    if ((v6 & 2) == 0)
    {
LABEL_22:
      if ((v6 & 4) == 0) {
        goto LABEL_23;
      }
LABEL_36:
      *(_BYTE *)(v4 + 15) |= 0x40u;
      int v6 = *(void *)(a2 + 96);
      if ((v6 & 0x10) == 0) {
        goto LABEL_38;
      }
      goto LABEL_37;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_22;
  }

  *(_BYTE *)(v4 + 11) |= 0x80u;
  int v6 = *(void *)(a2 + 96);
  if ((v6 & 4) != 0) {
    goto LABEL_36;
  }
LABEL_23:
  if ((v6 & 0x10) != 0)
  {
LABEL_37:
    *(_BYTE *)(v4 + 15) |= 0x80u;
    int v6 = *(void *)(a2 + 96);
  }

LABEL_63:
                                  if ((v1 & 0x40000) != 0) {
                                    goto LABEL_143;
                                  }
                                  goto LABEL_64;
                                }

        if (qword_18C4B13C0)
        {
          unsigned int v44 = *__error();
          fprintf( (FILE *)qword_18C4B13C0,  "%'llu WARNING: Missing first dyld tracepoint on thread 0x%llx\n",  *(void *)a2,  *((void *)a2 + 5));
          *__error() = v44;
        }

        goto LABEL_69;
      case 15:
      case 16:
        goto LABEL_94;
      default:
        uint64_t v25 = *__error();
        _sa_logt();
        v42 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v42, OS_LOG_TYPE_FAULT))
        {
          int v79 = a2[12];
          uu.i32[0] = 67109120;
          uu.i32[1] = v79;
          _os_log_fault_impl( &dword_186C92000,  v42,  OS_LOG_TYPE_FAULT,  "Unknown dyld tracepoint 0x%x",  (uint8_t *)&uu,  8u);
        }

        uint64_t v26 = __error();
        goto LABEL_57;
    }
  }

  int v40 = *(void **)(a1 + 40);
  int v41 = objc_msgSend(v40, "dataSource", v44);
  if (v40) {
    v40[44] = v41 | 8;
  }
  v42 = *(void *)(a1 + 40);
  if (v42) {
    *(void *)(v42 + 360) = 1LL;
  }
  if ([v45 count] == 1)
  {
    [v45 firstObject];
    unsigned int v43 = (void *)objc_claimAutoreleasedReturnValue();
    if ([v43 type] == 2) {
      objc_msgSend( *(id *)(a1 + 40),  "setAttemptedSamplingInterval:",  (double)(unint64_t)objc_msgSend(v43, "timerPeriodNs") / 1000000000.0);
    }
  }

  uint64_t v16 = 0LL;
LABEL_72:
  [*(id *)(a1 + 40) setKperfTriggers:v45];
  ktrace_config_destroy();
}
}

  unsigned int v10 = *a3 ^ a2;
LABEL_64:
  if ((v10 & 0x1000) == 0) {
    goto LABEL_77;
  }
  if ((a2 & 0x1000) != 0) {
    goto LABEL_73;
  }
  if ((a2 & 0x800) == 0)
  {
    __int16 v20 = @"not p-core";
LABEL_76:
    uint64_t v13 = [v7 printWithFormat:v20] + v13;
LABEL_77:
    if (!v11) {
      goto LABEL_81;
    }
    goto LABEL_78;
  }

LABEL_62:
                                if ((v1 & 0x20000) != 0) {
                                  goto LABEL_139;
                                }
                                goto LABEL_63;
                              }

      int v62 = objc_getProperty((id)v3, v46, 56LL, 1);
      if (v61)
      {
        int v91 = v61;
        unint64_t v4 = v62;
        if (v62)
        {
          if (v12) {
            Property = objc_getProperty(v12, v63, 56LL, 1);
          }
          else {
            Property = 0LL;
          }
          unsigned int v65 = Property;
          v67 = objc_getProperty((id)v3, v66, 56LL, 1);
          unsigned int v10 = [v65 compare:v67];

          goto LABEL_95;
        }

        goto LABEL_70;
      }

LABEL_61:
                              if ((v1 & 0x10000) != 0) {
                                goto LABEL_135;
                              }
                              goto LABEL_62;
                            }

LABEL_60:
                            if ((v1 & 0x8000) != 0) {
                              goto LABEL_131;
                            }
                            goto LABEL_61;
                          }

        if ([v53 hasDispatchQueue])
        {
          [v53 dispatchQueue];
          unsigned int v61 = (_BYTE *)objc_claimAutoreleasedReturnValue();
          int v62 = v43;
          objc_msgSend(*(id *)(v43 + 2408), "numberWithUnsignedLongLong:", objc_msgSend(v61, "identifier"));
          int v63 = (void *)objc_claimAutoreleasedReturnValue();
          v64 = [v42 containsObject:v63];

          if (v64)
          {
            if (v61) {
              v61[24] = 1;
            }
          }

          else
          {
            objc_msgSend(*(id *)(v62 + 2408), "numberWithUnsignedLongLong:", objc_msgSend(v61, "identifier"));
            unsigned int v65 = (void *)objc_claimAutoreleasedReturnValue();
            [v42 addObject:v65];
          }

          unsigned int v43 = 0x189607000LL;
        }

        ++v44;
      }

      while (v82 != v44);
      unsigned int v66 = [obj countByEnumeratingWithState:&v84 objects:v92 count:16];
      int v82 = v66;
    }

    while (v66);
  }

  v67 = [v41 copy];
  threadStates = v73->_threadStates;
  v73->_threadStates = (NSArray *)v67;
}

  v57 = *v67;
  FILE *v67 = v35;
  unsigned int v58 = v35;

  v59 = *v68;
  char *v68 = v36;
  unsigned int v60 = v36;

  unsigned int v61 = *v69;
  *unsigned int v69 = v45;
  int v62 = v45;

LABEL_61:
  return v29;
}

LABEL_58:
                        if ((v1 & 0x2000) != 0) {
                          goto LABEL_123;
                        }
                        goto LABEL_59;
                      }
}

        if ([v17 machContTime] && objc_msgSend(v5, "machContTime"))
        {
          v55 = [v17 machContTime];
          v56 = [v5 machContTime];
        }

        else
        {
          if (![v17 machAbsTime] || !objc_msgSend(v5, "machAbsTime")) {
            goto LABEL_14;
          }
          v55 = [v17 machAbsTime];
          v56 = [v5 machAbsTime];
        }

        if (v55 - v56 >= 0) {
          v57 = v55 - v56;
        }
        else {
          v57 = v56 - v55;
        }
        if (v55 != v56)
        {
          if ([v20 machContTime] && objc_msgSend(v5, "machContTime"))
          {
            unsigned int v58 = [v20 machContTime];
            v59 = [v5 machContTime];
            goto LABEL_74;
          }

          if ([v20 machAbsTime] && objc_msgSend(v5, "machAbsTime"))
          {
            unsigned int v58 = [v20 machAbsTime];
            v59 = [v5 machAbsTime];
LABEL_74:
            if (v58 - v59 >= 0) {
              unsigned int v60 = v58 - v59;
            }
            else {
              unsigned int v60 = v59 - v58;
            }
            if (v58 != v59 && v57 < v60) {
              goto LABEL_15;
            }
          }
        }

LABEL_56:
                    if ((v1 & 0x800) != 0) {
                      goto LABEL_115;
                    }
                    goto LABEL_57;
                  }
}
        }

        v130 = [v128 countByEnumeratingWithState:&v155 objects:v179 count:16];
      }

      while (v130);
    }
  }

  else
  {
    if (!v124)
    {
      v124 = (void *)[objc_alloc(MEMORY[0x189603FA8]) initWithCapacity:1];
      [v126 setObject:v124 forKeyedSubscript:v123];
    }

    int v46 = objc_alloc(&OBJC_CLASS___SABinaryLoadInfoToDisplay);
    [v136 mainBinaryLoadInfo];
    int v47 = (id)objc_claimAutoreleasedReturnValue();
    if (v46)
    {
      v48 = v47;
      [v47 binary];
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      [v48 segment];
      unsigned int v50 = (void *)objc_claimAutoreleasedReturnValue();
      unsigned int v51 = [v48 loadAddress];
      dest.receiver = v46;
      dest.super_class = (Class)&OBJC_CLASS___SABinaryLoadInfoToDisplay;
      int v52 = objc_msgSendSuper2(&dest, sel_initWithBinary_segment_loadAddress_, v49, v50, v51);

      if (v52)
      {
        v52[40] = [v48 isInKernelAddressSpace];
        int v53 = [v48 exclave];
        int v54 = (void *)*((void *)v52 + 4);
        *((void *)v52 + 4) = v53;
      }

      int v47 = v48;
    }

    else
    {
      int v52 = 0LL;
    }

    v128 = v47;

    [v124 addObject:v52];
  }

  int v45 = (void *)v123;
LABEL_69:

LABEL_70:
  dest.receiver = 0LL;
  dest.super_class = (Class)&dest;
  v176 = 0x2020000000LL;
  v177 = 0;
  v147 = 0LL;
  v148 = &v147;
  v149 = 0x2020000000LL;
  v150 = 0LL;
  if (self)
  {
    v143 = 0LL;
    v144 = &v143;
    v145 = 0x2020000000LL;
    v146 = 0LL;
    v55 = objc_getProperty(self, v31, 8LL, 1);
    v142[0] = MEMORY[0x1895F87A8];
    v142[1] = 3221225472LL;
    v142[2] = __110__SASamplePrinter_printSingleStackForTasks_limitToDispatchQueueIds_limitToThreadIds_intersection_sampleCount___block_invoke_1281;
    v142[3] = &unk_189F63F10;
    v142[4] = &v143;
    v142[5] = &dest;
    [v55 enumerateKeysAndObjectsUsingBlock:v142];

    v138 = 0LL;
    v139 = &v138;
    v140 = 0x2020000000LL;
    v141 = 0LL;
    v57 = objc_getProperty(self, v56, 16LL, 1);
    v137[0] = MEMORY[0x1895F87A8];
    v137[1] = 3221225472LL;
    v137[2] = __110__SASamplePrinter_printSingleStackForTasks_limitToDispatchQueueIds_limitToThreadIds_intersection_sampleCount___block_invoke_2_1283;
    v137[3] = &unk_189F63F10;
    v137[4] = &v138;
    v137[5] = &v147;
    [v57 enumerateKeysAndObjectsUsingBlock:v137];

    unsigned int v58 = [*(id *)(v135 + 16) printJson];
    v59 = *(void **)(v135 + 8);
    if (v58)
    {
      [v59 appendString:@",primaryMicrostackshotState:{"];
      unsigned int v60 = *(void **)(v135 + 8);
      [MEMORY[0x189607968] numberWithUnsignedInteger:v144[3]];
      unsigned int v61 = (void *)objc_claimAutoreleasedReturnValue();
      SAJSONWriteDictionaryFirstEntry(v60, (uint64_t)@"count", v61);

      +[SACallTreeState writeJSONDictionaryEntriesToStream:microstackshotState:primaryMicrostackshotState:includeIdleAndBattery:]( (uint64_t)SACallTreeState,  *(void **)(v135 + 8),  (__int16)dest.super_class[3].isa,  ~(unsigned __int16)LODWORD(dest.super_class[3].isa),  [*(id *)(v135 + 16) includeUserIdleAndBatteryStateInStacks]);
      [*(id *)(v135 + 8) appendString:@"}"];
      [*(id *)(v135 + 8) appendString:@",primaryCountedState:{"];
      int v62 = *(void **)(v135 + 8);
      [MEMORY[0x189607968] numberWithUnsignedInteger:v139[3]];
      int v63 = (void *)objc_claimAutoreleasedReturnValue();
      SAJSONWriteDictionaryFirstEntry(v62, (uint64_t)@"count", v63);

      +[SACallTreeState writeJSONDictionaryEntriesToStream:state:primaryState:]( (uint64_t)&OBJC_CLASS___SACallTreeState,  *(void **)(v135 + 8),  v148[3],  0LL);
      [*(id *)(v135 + 8) appendString:@"}"];
      if (([*(id *)(v135 + 16) includeUserIdleAndBatteryStateInStacks] & 1) == 0)
      {
        v64 = *(void **)(v135 + 8);
        [MEMORY[0x189607968] numberWithUnsignedInteger:self->_userActiveCount];
        unsigned int v65 = (void *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v64, @"userActiveSampleCount", v65);

        unsigned int v66 = *(void **)(v135 + 8);
        [MEMORY[0x189607968] numberWithUnsignedInteger:self->_userIdleCount];
        v67 = (void *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v66, @"userIdleSampleCount", v67);

        v68 = *(void **)(v135 + 8);
        [MEMORY[0x189607968] numberWithUnsignedInteger:self->_onBatteryCount];
        unsigned int v69 = (void *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v68, @"onBatterySampleCount", v69);

        unsigned int v70 = *(void **)(v135 + 8);
        [MEMORY[0x189607968] numberWithUnsignedInteger:self->_onACCount];
        int v71 = (void *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v70, @"onACSampleCount", v71);
      }
    }

    else
    {
      objc_msgSend(v59, "printWithFormat:", @"%-*s%lu samples ", 18, "Primary state: ", v144[3]);
      saos_printf_microstackshot_state( *(void **)(v135 + 8),  LODWORD(dest.super_class[3].isa),  ~LODWORD(dest.super_class[3].isa),  [*(id *)(v135 + 16) systemstatsFormat],  objc_msgSend(*(id *)(v135 + 16), "includeUserIdleAndBatteryStateInStacks"));
      v74 = v148[3];
      v75 = [*(id *)(v135 + 16) systemstatsFormat];
      if (v74) {
        v76 = v75;
      }
      else {
        v76 = 1;
      }
      if ((v76 & 1) == 0)
      {
        objc_msgSend(*(id *)(v135 + 8), "appendString:", @", ");
        _saos_printf_state_appended_noparens(*(void **)(v135 + 8), v148[3], 0LL, 0LL);
      }

      [*(id *)(v135 + 8) appendString:@"\n"];
      if (([*(id *)(v135 + 16) includeUserIdleAndBatteryStateInStacks] & 1) == 0)
      {
        objc_msgSend( *(id *)(v135 + 8),  "printWithFormat:",  @"%-*s%lu samples Idle, %lu samples Active",  18,  "User Activity: ",  self->_userIdleCount,  self->_userActiveCount);
        unsigned int v77 = *(void **)(v135 + 8);
        unsigned int v78 = a6 - (self->_userActiveCount + self->_userIdleCount);
        if (v78) {
          objc_msgSend(v77, "printWithFormat:", @", %lu samples Unknown\n", v78);
        }
        else {
          [v77 appendString:@"\n"];
        }
        objc_msgSend( *(id *)(v135 + 8),  "printWithFormat:",  @"%-*s%lu samples on Battery, %lu samples on AC",  18,  "Power Source: ",  self->_onBatteryCount,  self->_onACCount);
        int v79 = *(void **)(v135 + 8);
        int v80 = a6 - (self->_onACCount + self->_onBatteryCount);
        if (v80) {
          objc_msgSend(v79, "printWithFormat:", @", %lu samples Unknown\n", v80);
        }
        else {
          [v79 appendString:@"\n"];
        }
        LODWORD(dest.super_class[3].isa) &= 0xFFFFFFE3;
      }
    }

    _Block_object_dispose(&v138, 8);
    _Block_object_dispose(&v143, 8);
    int v73 = v148 + 3;
    isa = (int)dest.super_class[3].isa;
  }

  else
  {
    isa = 0;
    int v73 = &v150;
  }

  -[SASamplePrinter addStack:toStream:sampleCount:binariesToDisplay:primaryState:primaryMicrostackshotState:onlyHeaviestStack:]( v135,  v132,  *(void **)(v135 + 8),  a6,  v126,  (uint64_t)v73,  isa,  0);
  _Block_object_dispose(&v147, 8);
  _Block_object_dispose(&dest, 8);
}

  return v16;
}

                    unsigned int v35 = *__error();
                    _sa_logt();
                    int v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
                    {
                      int v40 = *(_DWORD *)(a1 + 76);
                      *(_DWORD *)buf = 67109378;
                      unsigned int v43 = v40;
                      unsigned int v44 = 2080;
                      *(void *)int v45 = v21;
                      _os_log_debug_impl( &dword_186C92000,  v36,  OS_LOG_TYPE_DEBUG,  "Renaming java process [%d] to %s",  buf,  0x12u);
                    }

                    *__error() = v35;
                    if (!*(_DWORD *)(a1 + 76) || strcmp(v21, "kernel_task"))
                    {
                      int v37 = SANSStringForCString(v21);
                      unsigned int v38 = *(void **)(a1 + 56);
                      *(void *)(a1 + 56) = v37;
                    }

                    goto LABEL_20;
                  }

                  if (v23)
                  {
                    int v24 = *v21;
                    if (!*v21) {
                      goto LABEL_56;
                    }
                    uint64_t v25 = 1LL;
                    while ((v24 & 0xDFu) - 65 < 0x1A || v24 == 46 || (v24 - 48) <= 9)
                    {
                      int v24 = v21[v25++];
                      if (!v24) {
                        goto LABEL_55;
                      }
                    }
                  }

                  v21 += v23 + 1;
                }

                while (v21 < v20);
              }

              uint64_t v12 = *__error();
              _sa_logt();
              uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
              {
                unsigned int v39 = *(_DWORD *)(a1 + 76);
                *(_DWORD *)buf = 67109120;
                unsigned int v43 = v39;
                _os_log_impl( &dword_186C92000,  v13,  OS_LOG_TYPE_DEFAULT,  "WARNING: Unable to find name for java processes [%d]",  buf,  8u);
              }
            }

            *__error() = v12;
LABEL_20:
            free(v11);
          }

          if (!*(void *)(a1 + 288) && proc_pidinfo(*(_DWORD *)(a1 + 76), 19, 1uLL, buf, 8)) {
            *(void *)(a1 + 28_Block_object_dispose((const void *)(v1 - 88), 8) = *(unsigned int *)buf | ((unint64_t)(v43 & 0xFFFFFF) << 32);
          }
          dirty = proc_get_dirty(*(_DWORD *)(a1 + 76), flags);
          if (dirty)
          {
            uint64_t v15 = dirty;
            uint64_t v16 = *__error();
            _sa_logt();
            uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v26 = *(_DWORD *)(a1 + 76);
              uint64_t v27 = strerror(v15);
              *(_DWORD *)buf = 67109634;
              unsigned int v43 = v26;
              unsigned int v44 = 2080;
              *(void *)int v45 = v27;
              *(_WORD *)&v45[8] = 1024;
              *(_DWORD *)&v45[10] = v15;
              _os_log_debug_impl( &dword_186C92000,  v17,  OS_LOG_TYPE_DEBUG,  "Unable to check dirty state for %d: %s %d",  buf,  0x18u);
            }

            *__error() = v16;
          }

          else
          {
            int v19 = flags[0];
            if ((flags[0] & 1) != 0)
            {
              *(_BYTE *)(a1 + 6_Block_object_dispose((const void *)(v1 - 88), 8) = 1;
              *(_BYTE *)(a1 + 69) = (v19 & 2) != 0;
            }
          }

          *(void *)(a1 + 240) = 0LL;
        }
      }
    }

    else
    {
      *(_BYTE *)(a1 + 71) = 1;
      *(_DWORD *)(a1 + 8_Block_object_dispose((const void *)(v1 - 88), 8) = 0;
      *(void *)(a1 + 80) = 0LL;
    }
  }

LABEL_55:
                  if ((v1 & 0x400) != 0) {
                    goto LABEL_111;
                  }
                  goto LABEL_56;
                }

LABEL_53:
              if ((v1 & 0x100) != 0) {
                goto LABEL_103;
              }
              goto LABEL_54;
            }

  ++*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
}

  if (a11)
  {
    unsigned int v39 = posix_spawn_file_actions_addinherit_np(&v94, 0);
    if (v39)
    {
      __int16 v20 = v39;
      unsigned int v34 = *__error();
      _sa_logt();
      unsigned int v35 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v96) = v20;
        int v36 = "Unable to inherit stdin: %{errno}d";
        goto LABEL_70;
      }

      goto LABEL_71;
    }
  }

  else if (a12)
  {
    if (pipe(v97))
    {
      __int16 v20 = *__error();
      unsigned int v34 = *__error();
      _sa_logt();
      unsigned int v35 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v96) = v20;
        int v36 = "Unable to open pipe: %{errno}d";
        goto LABEL_70;
      }

      goto LABEL_71;
    }

    int v41 = posix_spawn_file_actions_adddup2(&v94, v97[0], 0);
    if (v41)
    {
      __int16 v20 = v41;
      unsigned int v34 = *__error();
      _sa_logt();
      unsigned int v35 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v96) = v20;
        int v36 = "Unable to set posix file dup2: %{errno}d";
        goto LABEL_70;
      }

      goto LABEL_71;
    }
  }

  else
  {
    int v40 = posix_spawn_file_actions_addclose(&v94, 0);
    if (v40)
    {
      __int16 v20 = v40;
      unsigned int v34 = *__error();
      _sa_logt();
      unsigned int v35 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v96) = v20;
        int v36 = "Unable to set posix close: %{errno}d";
        goto LABEL_70;
      }

      goto LABEL_71;
    }
  }

  v42 = posix_spawnattr_init(&v93);
  if (v42)
  {
    __int16 v20 = v42;
    unsigned int v34 = *__error();
    _sa_logt();
    unsigned int v35 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v96) = v20;
      int v36 = "Unable to create posix attr: %{errno}d";
      goto LABEL_70;
    }

    goto LABEL_71;
  }

  if (a5)
  {
    int v45 = posix_spawnattr_setbinpref_np(&v93, 1uLL, a5, 0LL);
    if (v45)
    {
      __int16 v20 = v45;
      int v46 = *__error();
      _sa_logt();
      int v47 = (void *)objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled((os_log_t)v47, OS_LOG_TYPE_ERROR))
      {
LABEL_90:

        *__error() = v46;
LABEL_121:
        posix_spawnattr_destroy(&v93);
LABEL_72:
        posix_spawn_file_actions_destroy(&v94);
        if ((v28 & 0x80000000) != 0) {
          goto LABEL_74;
        }
        goto LABEL_73;
      }

      *(_DWORD *)buf = 67109120;
      LODWORD(v96) = v20;
      int v85 = "Unable to set posix arch preference: %{errno}d";
LABEL_143:
      _os_log_error_impl(&dword_186C92000, (os_log_t)v47, OS_LOG_TYPE_ERROR, v85, buf, 8u);
      goto LABEL_90;
    }
  }

  if ((_DWORD)a6) {
    v48 = 16449;
  }
  else {
    v48 = 16385;
  }
  a6 = (void *)objc_msgSend( objc_alloc(MEMORY[0x189603FC8]),  "initWithObjectsAndKeys:",  &unk_189F82340,  @"validation-category",  0);
  if (a2)
  {
    v49 = SANSStringForCString(a2);
    if (!v49)
    {
LABEL_118:
      int v82 = *__error();
      _sa_logt();
      int v83 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315138;
        v96 = a2;
        _os_log_error_impl( &dword_186C92000,  v83,  OS_LOG_TYPE_ERROR,  "Unable to create NSString for signing identifier %s",  buf,  0xCu);
      }

      *__error() = v82;
      __int16 v20 = 22;
      goto LABEL_121;
    }

    unsigned int v50 = (void *)v49;
    [a6 setObject:v49 forKey:@"signing-identifier"];
  }

  int v92 = 0LL;
  [MEMORY[0x1896137E0] withVersion:1 withConstraintCategory:0 withRequirements:a6 withError:&v92];
  unsigned int v51 = (void *)objc_claimAutoreleasedReturnValue();
  int v52 = v92;
  if (!v51)
  {
    v57 = *__error();
    _sa_logt();
    unsigned int v58 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
    {
      [v52 description];
      int v86 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v96 = v86;
      _os_log_error_impl(&dword_186C92000, v58, OS_LOG_TYPE_ERROR, "Unable to set code requirement: %@", buf, 0xCu);
    }

    *__error() = v57;
    __int16 v20 = 76;
    goto LABEL_121;
  }

  int v53 = [v51 externalRepresentation];
  [v53 bytes];
  [v53 length];
  int v54 = amfi_launch_constraint_set_spawnattr();
  if (v54)
  {
    __int16 v20 = v54;
    v55 = *__error();
    _sa_logt();
    v56 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v96) = v20;
      _os_log_error_impl( &dword_186C92000,  v56,  OS_LOG_TYPE_ERROR,  "Unable to set amfi posix launch constraint: %{errno}d",  buf,  8u);
    }

    *__error() = v55;
    goto LABEL_121;
  }

  unsigned int v84 = posix_spawnattr_setflags(&v93, v48);
  if (v84)
  {
    __int16 v20 = v84;
    int v46 = *__error();
    _sa_logt();
    int v47 = (void *)objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled((os_log_t)v47, OS_LOG_TYPE_ERROR)) {
      goto LABEL_90;
    }
    *(_DWORD *)buf = 67109120;
    LODWORD(v96) = v20;
    int v85 = "Unable to set posix flags: %{errno}d";
    goto LABEL_143;
  }

  int v91 = -1;
  __int16 v20 = posix_spawn(&v91, a1, &v94, &v93, a3, a4);
  posix_spawnattr_destroy(&v93);
  posix_spawn_file_actions_destroy(&v94);
  if ((v28 & 0x80000000) == 0) {
    close(v28);
  }
  if ((v99[1] & 0x80000000) == 0)
  {
    close(v99[1]);
    v99[1] = -1;
  }

  if ((v98[1] & 0x80000000) == 0)
  {
    close(v98[1]);
    v98[1] = -1;
  }

  if ((v97[0] & 0x80000000) == 0)
  {
    close(v97[0]);
    v97[0] = -1;
  }

  if (v20 || v91 < 1)
  {
    if ((v99[0] & 0x80000000) == 0) {
      close(v99[0]);
    }
    unsigned int v43 = v98[0];
    if (v98[0] < 0) {
      goto LABEL_84;
    }
LABEL_83:
    close(v43);
LABEL_84:
    if ((v97[1] & 0x80000000) == 0) {
      close(v97[1]);
    }
    *__error() = v20;
    return 0xFFFFFFFFLL;
  }

  if (a8) {
    *a8 = v99[0];
  }
  if (a10) {
    *a10 = v98[0];
  }
  if (a12) {
    *a12 = v97[1];
  }
  *__error() = 0;
  return v91;
}

  LOWORD(v10) = v10 ^ a2;
  if ((v10 & 0x800) == 0) {
    goto LABEL_64;
  }
  if ((a2 & 0x800) != 0)
  {
LABEL_60:
    uint64_t v13 = [v7 printWithFormat:@"e-core"] + v13;
    if (a3) {
      goto LABEL_63;
    }
LABEL_70:
    if ((a2 & 0x1000) == 0) {
      goto LABEL_71;
    }
LABEL_73:
    __int16 v20 = @"p-core";
    goto LABEL_76;
  }

  if ((a2 & 0x1000) == 0)
  {
    uint64_t v13 = [v7 printWithFormat:@"not e-core"] + v13;
  }

LABEL_52:
            if ((v1 & 0x200000000LL) != 0) {
              goto LABEL_99;
            }
            goto LABEL_53;
          }

        int v45 = *__error();
        _sa_logt();
        int v79 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
        {
          int v80 = -[SABinary debugDescription](self, "debugDescription");
          unsigned int v81 = [v80 UTF8String];
          int v82 = -[NSMutableArray debugDescription](self->_segments, "debugDescription");
          a3 = (const void *)[v82 UTF8String];
          int v83 = [(id)p_path debugDescription];
          unsigned int v84 = [v83 UTF8String];
          *(_DWORD *)buf = 136315650;
          uint64_t v107 = v81;
          v108 = 2080;
          *(void *)v109 = a3;
          *(_WORD *)&v109[8] = 2080;
          *(void *)&v109[10] = v84;
          _os_log_error_impl( &dword_186C92000,  v79,  OS_LOG_TYPE_ERROR,  "Binary %s segments not added after deserializing segments: %s vs\n%s",  buf,  0x20u);
        }

        *__error() = v45;
        int v85 = -[SABinary debugDescription](self, "debugDescription");
        int v86 = [v85 UTF8String];
        int v87 = -[NSMutableArray debugDescription](self->_segments, "debugDescription");
        [v87 UTF8String];
        unsigned int v88 = [(id)p_path debugDescription];
        [v88 UTF8String];
        _SASetCrashLogMessage( 4869,  "Binary %s segments not added after deserializing segments: %s vs\n%s",  v89,  v90,  v91,  v92,  v93,  v94,  v86);

        _os_crash();
        __break(1u);
LABEL_55:
        v95 = *__error();
        _sa_logt();
        v96 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
        {
          v97 = *(unsigned __int16 *)((char *)a3 + 75);
          *(_DWORD *)buf = 134218240;
          uint64_t v107 = v45;
          v108 = 1024;
          *(_DWORD *)v109 = v97;
          _os_log_error_impl( &dword_186C92000,  v96,  OS_LOG_TYPE_ERROR,  "bufferLength %lu < serialized SABinary struct v3 with %u segments",  buf,  0x12u);
        }

        *__error() = v95;
        _SASetCrashLogMessage( 4874,  "bufferLength %lu < serialized SABinary struct v3 with %u segments",  v98,  v99,  v100,  v101,  v102,  v103,  v45);
        _os_crash();
        __break(1u);
LABEL_58:
        +[SAException exceptionWithName:reason:userInfo:]( &OBJC_CLASS___SAException,  "exceptionWithName:reason:userInfo:",  @"Decoding failure",  @"Unknown SABinary version",  0LL);
        time_t v104 = (id)objc_claimAutoreleasedReturnValue();
        objc_exception_throw(v104);
      }

LABEL_51:
          if ((v1 & 0x80) != 0) {
            goto LABEL_95;
          }
          goto LABEL_52;
        }

                  *__error() = v43;
                  goto LABEL_52;
                }
              }

              else
              {
              }

              if (++v27 >= (unint64_t)[*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) count]) {
                goto LABEL_34;
              }
            }
          }

          if (v9 == v24 && v21 == *(void **)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL))
          {
            unsigned int v43 = *__error();
            _sa_logt();
            unsigned int v44 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR)) {
              goto LABEL_54;
            }
            goto LABEL_51;
          }

          int v32 = objc_msgSend( objc_alloc(MEMORY[0x189603FA8]),  "initWithObjects:",  *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40),  v9,  0);
          uint64_t v33 = *(void *)(*(void *)(a1 + 72) + 8LL);
          unsigned int v34 = *(void **)(v33 + 40);
          *(void *)(v33 + 40) = v32;

          unsigned int v35 = objc_alloc(MEMORY[0x189603FA8]);
          int v36 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
          int v37 = v36;
          if (!v36)
          {
            [MEMORY[0x189603FE8] null];
            int v37 = (void *)objc_claimAutoreleasedReturnValue();
          }

          unsigned int v38 = v21;
          if (!v21)
          {
            [MEMORY[0x189603FE8] null];
            unsigned int v38 = (void *)objc_claimAutoreleasedReturnValue();
          }

          unsigned int v39 = objc_msgSend(v35, "initWithObjects:", v37, v38, 0);
          int v40 = *(void *)(*(void *)(a1 + 80) + 8LL);
          int v41 = *(void **)(v40 + 40);
          *(void *)(v40 + 40) = v39;

          if (!v21) {
          if (!v36)
          }

LABEL_52:
          goto LABEL_53;
        }

LABEL_50:
        if ((v1 & 0x40) != 0) {
          goto LABEL_91;
        }
        goto LABEL_51;
      }

                unsigned int v44 = objc_getProperty((id)v3, v28, 64LL, 1);
                LOBYTE(v4) = 0;
                goto LABEL_51;
              }
            }

            goto LABEL_42;
          }
        }
      }

      else if ((*((_BYTE *)v12 + 25) & 1) == 0)
      {
        unsigned int v29 = *((_BYTE *)v12 + 26);
        if ((v29 & 1) == 0)
        {
          if (!*((void *)v12 + 9))
          {
            unsigned int v10 = 1LL;
            if (*((_DWORD *)v12 + 8)) {
              goto LABEL_33;
            }
            goto LABEL_49;
          }

LABEL_194:
  Class result = (uint64_t *)snprintf(v3, _MergedGlobals_4 - v3 + 536, "system_memory_status");
  v3 += (int)result;
  uint64_t v1 = *v2;
  if ((*v2 & 0x100000000LL) != 0)
  {
LABEL_195:
    else {
      v3 += snprintf(v3, _MergedGlobals_4 - v3 + 536, ", ");
    }
LABEL_198:
    Class result = (uint64_t *)snprintf(v3, _MergedGlobals_4 - v3 + 536, "async_stack");
    v3 += (int)result;
    uint64_t v1 = *v2;
    if ((*v2 & 0x8000000000000000LL) == 0) {
      goto LABEL_203;
    }
    goto LABEL_199;
  }

LABEL_31:
}

              ++v17;
            }

            while (v17 != v38);
            unsigned int v29 = [v15 countByEnumeratingWithState:&v75 objects:v80 count:16];
            unsigned int v38 = v29;
          }

          while (v29);
        }

void sub_186CC637C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, void *a25, void *a26)
{
  _Unwind_Resume(a1);
}

void sub_186CC7384( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, void *a37, void *a38, void *a39, void *a40, void *a41, void *a42, void *a43, void *a44, void *a45)
{
  _Unwind_Resume(a1);
}

id KTraceStringFromArguments(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int is_kernel_64_bit = ktrace_is_kernel_64_bit();
  uint64_t v6 = 5 - a3;
  if (is_kernel_64_bit)
  {
    uint64_t v7 = 8 * v6;
    BOOL v8 = (_DWORD *)(a2 + 24);
    if (a3 == 1) {
      BOOL v8 = (_DWORD *)(a2 + 8);
    }
    int v9 = 0LL;
    if (a3 == 2) {
      unsigned int v10 = (_DWORD *)(a2 + 16);
    }
    else {
      unsigned int v10 = v8;
    }
    goto LABEL_12;
  }

  uint64_t v7 = 4 * v6;
  uint64_t v11 = calloc(4 * v6, 1uLL);
  int v9 = v11;
  if (a3 <= 1)
  {
    _DWORD *v11 = *(void *)(a2 + 8);
    uint64_t v12 = (int32x2_t *)(v11 + 1);
LABEL_10:
    v12->i32[0] = *(void *)(a2 + 16);
    uint64_t v12 = (int32x2_t *)((char *)v12 + 4);
    goto LABEL_11;
  }

  uint64_t v12 = (int32x2_t *)v11;
  if (a3 == 2) {
    goto LABEL_10;
  }
LABEL_11:
  *uint64_t v12 = vmovn_s64(*(int64x2_t *)(a2 + 24));
  unsigned int v10 = v11;
LABEL_12:
  uint64_t v13 = 0LL;
  while (*((_BYTE *)v10 + v13))
  {
    if (v7 == ++v13)
    {
      uint64_t v13 = v7;
      break;
    }
  }

  if (!v13)
  {
    uint64_t v14 = 0LL;
    if (!v9) {
      return v14;
    }
    goto LABEL_18;
  }

  uint64_t v14 = (void *)[objc_alloc(MEMORY[0x189607940]) initWithBytes:v10 length:v13 encoding:4];
  if (v9) {
LABEL_18:
  }
    free(v9);
  return v14;
}

void sub_186CC7B54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_38:
  return v6;
}

    unsigned int v35 = *__error();
    _sa_logt();
    int v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
    {
      -[SAThread debugDescription](v61, "debugDescription");
      unsigned int v38 = (void *)objc_claimAutoreleasedReturnValue();
      [v8 debugDescription];
      unsigned int v39 = (void *)objc_claimAutoreleasedReturnValue();
      [v5 debugDescription];
      int v40 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412802;
      v67 = (uint64_t)v38;
      v68 = 2112;
      unsigned int v69 = (uint64_t)v39;
      unsigned int v70 = 2112;
      int v71 = v40;
      _os_log_debug_impl( &dword_186C92000,  v36,  OS_LOG_TYPE_DEBUG,  "%@ no matching frames in resampled stack:%@\nvs\n%@",  buf,  0x20u);
    }

    *__error() = v35;
    uint64_t v26 = v5;
    goto LABEL_41;
  }

  unsigned int v28 = v5;
LABEL_42:

  return v28;
}

  if ((v6 & 0x20) != 0)
  {
    unsigned int v10 = 19LL;
LABEL_40:
    *(_BYTE *)(v4 + v10) |= 0x40u;
  }

  return (id)v4;
}

      [v9 allKeys];
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      [v48 firstObject];
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      unsigned int v50 = [v49 unsignedLongLongValue];
      int v32 = v50 == [*(id *)(v7 + 160) targetDispatchQueueId];

      goto LABEL_39;
    }

    int v32 = 0;
LABEL_40:
    unsigned int v51 = objc_alloc(MEMORY[0x189603F18]);
    -[SASamplePrinter stackForThread:threadStateIndexes:task:taskSampleCount:isTarget:]( (const char *)v7,  (void *)v8,  0LL,  v29,  v53,  v32);
    int v36 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v7 = objc_msgSend(v51, "initWithObjects:", v36, 0);
    goto LABEL_41;
  }
      }
    }

    int v32 = [v168 isAbsolutePath];
    if ((a2 & 1) != 0
      && ((v32 ^ 1) & 1) == 0
      && !*(void *)(v184 + 104)
      && !*(void *)(v184 + 112)
      && !*(void *)(v184 + 120)
      && !*(void *)(v184 + 128)
      && !*(void *)(v184 + 136)
      && !*(void *)(v184 + 168)
      && !*(_BYTE *)(v184 + 65)
      && !*(void *)(v184 + 176)
      && !*(void *)(v184 + 184)
      && !*(void *)(v184 + 160)
      && !*(void *)(v184 + 200)
      && !*(_BYTE *)(v184 + 66)
      && !*(void *)(v184 + 192))
    {
      uint64_t v33 = (void *)[objc_alloc(MEMORY[0x189604030]) initFileURLWithPath:v168 isDirectory:0];
      if (v33)
      {
        unsigned int v34 = (__CFBundle *)_CFBundleCreateWithExecutableURLIfLooksLikeBundle();
        unsigned int v35 = v34;
        if (v34)
        {
          id obj = (id)SACFBundleCopyStringForKey(v34, (const __CFString *)*MEMORY[0x189604E10]);
          int v36 = CFBundleCopyBundleURL(v35);
          if (v166)
          {
            -[SABinary saveInfoFromBundle:](v166, v35);
            -[SABinary getCodeSignInfoWithBundleUrl:](v166, v36);
          }

          if (obj)
          {
            [(id)v184 name];
            int v37 = (void *)objc_claimAutoreleasedReturnValue();
            unsigned int v38 = [v37 compare:obj] == 0;

            if (!v38) {
              objc_storeStrong((id *)(v184 + 104), obj);
            }
          }

          if (v36)
          {
            unsigned int v39 = v36;
            -[__CFURL pathExtension](v39, "pathExtension");
            int v40 = (void *)objc_claimAutoreleasedReturnValue();
            int v41 = [v40 isEqualToString:@"appex"];

            if (v41)
            {
              v197 = 0LL;
              v42 = (void *)[objc_alloc(MEMORY[0x189605718]) initWithURL:v39 error:&v197];
              unsigned int v43 = v197;
              if (v42)
              {
                [v42 containingBundleRecord];
                unsigned int v44 = (void *)objc_claimAutoreleasedReturnValue();
                int v45 = v44;
                if (v44)
                {
                  [v44 URL];
                  int v46 = (void *)objc_claimAutoreleasedReturnValue();
                  int v47 = v46;
                  if (v46)
                  {
                    v48 = v46;
                  }

                  else
                  {
                    v188 = *__error();
                    _sa_logt();
                    int v53 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)dest = 138412290;
                      *(void *)&dest[4] = v39;
                      _os_log_error_impl(&dword_186C92000, v53, OS_LOG_TYPE_ERROR, "No parent url for %@", dest, 0xCu);
                    }

                    *__error() = v188;
                    v48 = v39;
                  }
                }

                else
                {
                  unsigned int v51 = *__error();
                  _sa_logt();
                  int v52 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)dest = 138412290;
                    *(void *)&dest[4] = v39;
                    _os_log_debug_impl(&dword_186C92000, v52, OS_LOG_TYPE_DEBUG, "No parent record for %@", dest, 0xCu);
                  }

                  *__error() = v51;
                  v48 = v39;
                }
              }

              else
              {
                v49 = *__error();
                _sa_logt();
                unsigned int v50 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)dest = 138412546;
                  *(void *)&dest[4] = v39;
                  v213 = 2112;
                  v214 = v43;
                  _os_log_error_impl( &dword_186C92000,  v50,  OS_LOG_TYPE_ERROR,  "No extension record for %@: %@",  dest,  0x16u);
                }

                *__error() = v49;
                v48 = v39;
              }
            }

            else
            {
              unsigned int v43 = 0LL;
              v48 = v39;
            }

            v196 = v43;
            int v54 = (void *)[objc_alloc(MEMORY[0x189605740]) initWithURL:v48 allowPlaceholder:1 error:&v196];
            v55 = v196;

            if (v54)
            {
              [v54 deviceIdentifierForVendor];
              v56 = (void *)objc_claimAutoreleasedReturnValue();
              v57 = [v56 UUIDString];
              unsigned int v58 = *(void **)(v184 + 176);
              *(void *)(v184 + 176) = v57;

              [v54 iTunesMetadata];
              v59 = (void *)objc_claimAutoreleasedReturnValue();
              *(void *)(v184 + 160) = [v59 storeItemIdentifier];

              [v54 iTunesMetadata];
              unsigned int v60 = (void *)objc_claimAutoreleasedReturnValue();
              [v60 distributorInfo];
              unsigned int v61 = (void *)objc_claimAutoreleasedReturnValue();
              int v62 = [v61 distributorID];
              int v63 = *(void **)(v184 + 184);
              *(void *)(v184 + 184) = v62;

              [v54 iTunesMetadata];
              v64 = (void *)objc_claimAutoreleasedReturnValue();
              unsigned int v65 = [v64 storeCohortWithError:0];
              unsigned int v66 = *(void **)(v184 + 192);
              *(void *)(v184 + 192) = v65;

              *(_BYTE *)(v184 + 65) = [v54 developerType];
              [v54 entitlements];
              v67 = (void *)objc_claimAutoreleasedReturnValue();
              [v67 objectForKey:@"beta-reports-active" ofClass:objc_opt_class()];
              v68 = (void *)objc_claimAutoreleasedReturnValue();

              if (v68) {
                *(_BYTE *)(v184 + 66) = 1;
              }
            }

            -[__CFURL URLByAppendingPathComponent:isDirectory:]( v39,  "URLByAppendingPathComponent:isDirectory:",  @"Contents/version.plist",  0LL);
            unsigned int v69 = (void *)objc_claimAutoreleasedReturnValue();
            if (v69)
            {
              unsigned int v70 = (void *)[objc_alloc(MEMORY[0x189603F68]) initWithContentsOfURL:v69];
              int v71 = v70;
              if (v70)
              {
                int v72 = SANSDictionaryCopyStringForKey(v70, (uint64_t)@"BuildVersion");
                int v73 = *(void **)(v184 + 112);
                *(void *)(v184 + 112) = v72;

                v74 = SANSDictionaryCopyStringForKey(v71, (uint64_t)@"ProjectName");
                v75 = *(void **)(v184 + 120);
                *(void *)(v184 + 120) = v74;

                v76 = SANSDictionaryCopyStringForKey(v71, (uint64_t)@"SourceVersion");
                unsigned int v77 = *(void **)(v184 + 128);
                *(void *)(v184 + 12_Block_object_dispose((const void *)(v1 - 88), 8) = v76;

                unsigned int v78 = SANSDictionaryCopyStringForKey(v71, (uint64_t)@"ProductBuildVersion");
                int v79 = *(void **)(v184 + 136);
                *(void *)(v184 + 136) = v78;
              }
            }
          }

          CFRelease(v35);
        }
      }
    }

    int v80 = v184;
    if (*(void *)(v184 + 40))
    {
      [(id)v184 mainBinary];
      unsigned int v81 = (void *)objc_claimAutoreleasedReturnValue();
      [v81 path];
      int v82 = (void *)objc_claimAutoreleasedReturnValue();

      if (v82 && [v82 isEqualToString:*(void *)(v184 + 40)])
      {
        int v83 = *(void **)(v184 + 40);
        *(void *)(v184 + 40) = 0LL;
      }

      int v80 = v184;
    }

    if (*(void *)(v80 + 56))
    {
      [(id)v80 mainBinaryPath];
      unsigned int v84 = (void *)objc_claimAutoreleasedReturnValue();
      int v85 = -[NSString copyLastPathComponent](v84);

      if (v85 && [v85 hasPrefix:*(void *)(v184 + 56)])
      {
        int v86 = *(void **)(v184 + 56);
        *(void *)(v184 + 56) = 0LL;
      }

      int v80 = v184;
    }

    [*(id *)(v80 + 16) enumerateKeysAndObjectsUsingBlock:&__block_literal_global_82];
    v209 = 0u;
    v210 = 0u;
    v207 = 0u;
    v208 = 0u;
    [(id)v184 taskStates];
    int v87 = (void *)objc_claimAutoreleasedReturnValue();
    unsigned int v88 = [v87 countByEnumeratingWithState:&v207 objects:v253 count:16];
    if (v88)
    {
      v189 = v87;
      v185 = 0LL;
      unsigned int v89 = 0LL;
      obja = *(id *)v208;
      do
      {
        int v90 = 0LL;
        int v91 = v89;
        v169 = v88;
        do
        {
          if (*(id *)v208 != obja) {
            objc_enumerationMutation(v189);
          }
          int v92 = *(void *)(*((void *)&v207 + 1) + 8 * v90);
          if (v91)
          {
            if ([*(id *)(*((void *)&v207 + 1) + 8 * v90) terminatedThreadsUserTimeInNs]
              && (v93 = [(id)v92 terminatedThreadsUserTimeInNs],
                  v93 < [v91 terminatedThreadsUserTimeInNs])
              || [(id)v92 terminatedThreadsSystemTimeInNs]
              && (v94 = [(id)v92 terminatedThreadsSystemTimeInNs],
                  v94 < [v91 terminatedThreadsSystemTimeInNs])
              || [(id)v92 terminatedThreadsInstructions]
              && (v95 = [(id)v92 terminatedThreadsInstructions],
                  v95 < [v91 terminatedThreadsInstructions])
              || [(id)v92 terminatedThreadsCycles]
              && (v96 = [(id)v92 terminatedThreadsCycles],
                  v96 < [v91 terminatedThreadsCycles])
              || [(id)v92 faults]
              && (v97 = [(id)v92 faults], v97 < objc_msgSend(v91, "faults"))
              || [(id)v92 pageins]
              && (v98 = [(id)v92 pageins], v98 < objc_msgSend(v91, "pageins"))
              || [(id)v92 cowFaults]
              && (v99 = [(id)v92 cowFaults], v99 < objc_msgSend(v91, "cowFaults")))
            {
              uint64_t v100 = *__error();
              _sa_logt();
              v101 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v101, OS_LOG_TYPE_DEBUG))
              {
                [(id)v184 debugDescription];
                v186 = (void *)objc_claimAutoreleasedReturnValue();
                [(id)v184 taskStates];
                v187 = (void *)objc_claimAutoreleasedReturnValue();
                v116 = [v187 count];
                [v91 debugDescription];
                v183 = (void *)objc_claimAutoreleasedReturnValue();
                [(id)v92 debugDescription];
                v182 = (void *)objc_claimAutoreleasedReturnValue();
                v181 = [v91 terminatedThreadsCpuTimeNs];
                v180 = [v91 terminatedThreadsUserTimeInNs];
                v179 = [v91 terminatedThreadsSystemTimeInNs];
                v178 = [(id)v92 terminatedThreadsCpuTimeNs];
                v177 = [(id)v92 terminatedThreadsUserTimeInNs];
                v176 = [(id)v92 terminatedThreadsSystemTimeInNs];
                v175 = [v91 terminatedThreadsInstructions];
                v174 = [(id)v92 terminatedThreadsInstructions];
                v173 = [v91 terminatedThreadsCycles];
                v172 = [(id)v92 terminatedThreadsCycles];
                v171 = [v91 faults];
                v170 = [(id)v92 faults];
                v117 = [v91 pageins];
                v118 = [(id)v92 pageins];
                v119 = [v91 cowFaults];
                v120 = [(id)v92 cowFaults];
                *(_DWORD *)dest = 138417410;
                *(void *)&dest[4] = v186;
                v213 = 2048;
                v214 = (id)(v185 + v90);
                v215 = 2048;
                v216 = v116;
                v217 = 2112;
                v218 = v183;
                v219 = 2112;
                v220 = v182;
                v221 = 2048;
                v222 = v181;
                v223 = 2048;
                v224 = v180;
                v225 = 2048;
                v226 = v179;
                v227 = 2048;
                v228 = v178;
                v229 = 2048;
                v230 = v177;
                v231 = 2048;
                v232 = v176;
                v233 = 2048;
                v234 = v175;
                v235 = 2048;
                v236 = v174;
                v237 = 2048;
                v238 = v173;
                v239 = 2048;
                v240 = v172;
                v241 = 1024;
                v242 = v171;
                v243 = 1024;
                v244 = v170;
                v245 = 1024;
                v246 = v117;
                v247 = 1024;
                v248 = v118;
                v249 = 1024;
                v250 = v119;
                v251 = 1024;
                v252 = v120;
                _os_log_debug_impl( &dword_186C92000,  v101,  OS_LOG_TYPE_DEBUG,  "Task %@ monotonically increasing data decreased at index %lu of %lu between %@ and %@:\n terminated threads cpu time %llu (%llu + %llu) -> %llu (%llu + %llu)\n terminated threads instructions %llu -> %llu\n terminated threads cycles %llu -> %llufaults %u -> %upageins %u -> %ucow faults %u -> %u",  dest,  0xBCu);

                unsigned int v88 = v169;
              }

              *__error() = v100;
            }

            v102 = [(id)v92 terminatedThreadsUserTimeInNs];
            if (v102 < [v91 terminatedThreadsUserTimeInNs])
            {
              int v103 = [v91 terminatedThreadsUserTimeInNs];
              if (v92) {
                *(void *)(v92 + 72) = v103;
              }
            }

            time_t v104 = [(id)v92 terminatedThreadsSystemTimeInNs];
            if (v104 < [v91 terminatedThreadsSystemTimeInNs])
            {
              tm v105 = [v91 terminatedThreadsSystemTimeInNs];
              if (v92) {
                *(void *)(v92 + 80) = v105;
              }
            }

            v106 = [(id)v92 terminatedThreadsInstructions];
            if (v106 < [v91 terminatedThreadsInstructions])
            {
              uint64_t v107 = [v91 terminatedThreadsInstructions];
              if (v92) {
                *(void *)(v92 + 8_Block_object_dispose((const void *)(v1 - 88), 8) = v107;
              }
            }

            v108 = [(id)v92 terminatedThreadsCycles];
            if (v108 < [v91 terminatedThreadsCycles])
            {
              v109 = [v91 terminatedThreadsCycles];
              if (v92) {
                *(void *)(v92 + 96) = v109;
              }
            }

            v110 = [(id)v92 faults];
            if (v110 < [v91 faults])
            {
              v111 = [v91 faults];
              if (v92) {
                *(_DWORD *)(v92 + 12) = v111;
              }
            }

            v112 = [(id)v92 pageins];
            if (v112 < [v91 pageins])
            {
              v113 = [v91 pageins];
              if (v92) {
                *(_DWORD *)(v92 + 16) = v113;
              }
            }

            v114 = [(id)v92 cowFaults];
            if (v114 < [v91 cowFaults])
            {
              v115 = [v91 cowFaults];
              if (v92) {
                *(_DWORD *)(v92 + 20) = v115;
              }
            }
          }

          unsigned int v89 = (id)v92;

          ++v90;
          int v91 = v89;
        }

        while (v88 != v90);
        unsigned int v88 = [v189 countByEnumeratingWithState:&v207 objects:v253 count:16];
        v185 += v90;
      }

      while (v88);

      int v87 = v189;
    }

    if (!*(void *)(v184 + 288)) {
      -[SATask guessArchitectureGivenMachineArchitecture:dataSource:](v184, a4, a5);
    }
    v121 = v184;
    if (*(void *)(v184 + 264))
    {
LABEL_174:
      v135 = (id *)(v121 + 256);
      v136 = *(_BYTE **)(v121 + 256);
      if (!v136)
      {
LABEL_181:
        if (v165 && !v136)
        {
          if (!*(_BYTE *)(v184 + 72)
            && *(void *)(v184 + 288)
            && a6
            && CSArchitectureMatchesArchitecture()
            && *(_DWORD *)(v184 + 76)
            && *(void *)(v184 + 96))
          {
            v156 = *__error();
            _sa_logt();
            v157 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v157, OS_LOG_TYPE_DEBUG))
            {
              [(id)v184 debugDescription];
              v159 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)dest = 138412290;
              *(void *)&dest[4] = v159;
              _os_log_debug_impl( &dword_186C92000,  v157,  OS_LOG_TYPE_DEBUG,  "No info about the shared cache for (native architecture) process %@, assuming native shared cache",  dest,  0xCu);
            }

            *__error() = v156;
            objc_storeStrong(v135, v161);
          }

          v136 = *v135;
        }

        if (!v136) {
          goto LABEL_204;
        }
        goto LABEL_186;
      }

      if ((v136[24] & 1) == 0)
      {
LABEL_186:
        v143 = [v136 startAddress];
        if ([*v135 startAddress] != -1)
        {
          v144 = [*v135 endAddress];
          v194 = 0u;
          v195 = 0u;
          v192 = 0u;
          v193 = 0u;
          v145 = *(id *)(v184 + 248);
          v146 = 0LL;
          v147 = [v145 countByEnumeratingWithState:&v192 objects:v211 count:16];
          if (v147)
          {
            v148 = *(void *)v193;
            do
            {
              for (i = 0LL; i != v147; ++i)
              {
                if (*(void *)v193 != v148) {
                  objc_enumerationMutation(v145);
                }
                v150 = *(void **)(*((void *)&v192 + 1) + 8 * i);
                v151 = [v150 loadAddress];
                if (v151 >= v143 && v151 < v144)
                {
                  if (!v146) {
                    v146 = (void *)[objc_alloc(MEMORY[0x189603FA8]) initWithCapacity:1];
                  }
                  [v146 addObject:v150];
                }
              }

              v147 = [v145 countByEnumeratingWithState:&v192 objects:v211 count:16];
            }

            while (v147);
          }

          if ([v146 count])
          {
            v153 = (void *)[*(id *)(v184 + 248) mutableCopy];
            [v153 removeObjectsInArray:v146];
            v154 = [v153 copy];
            v155 = *(void **)(v184 + 248);
            *(void *)(v184 + 24_Block_object_dispose((const void *)(v1 - 88), 8) = v154;
          }
        }

void sub_186CC7FAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_186CC8734( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *a22, void *a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, void *a46, void *a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  _Block_object_dispose((const void *)(v71 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_186CC8840()
{
}

void sub_186CC8848()
{
}

void sub_186CC8850()
{
}

void sub_186CC8858()
{
}

void sub_186CC8860()
{
}

void sub_186CC8868()
{
}

void sub_186CC88B4()
{
}

void sub_186CC8BDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_186CC8CE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_186CC91B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_186CC953C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_186CC9764(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_37:
  int v41 = a1[6];
  if (v41) {
    *(void *)(v41 + 32) = v5;
  }
}

      int v30 = __error();
LABEL_44:
      os_log_s *v30 = v28;
      goto LABEL_45;
    }

    action_samplers = ktrace_config_kperf_get_action_samplers();
    if ((action_samplers & 0xC) == 0)
    {
      unsigned int v28 = *__error();
      _sa_logt();
      uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      {
        LODWORD(v46.receiver) = 67109632;
        HIDWORD(v46.receiver) = v17;
        LOWORD(v46.super_class) = 1024;
        *(_DWORD *)((char *)&v46.super_class + 2) = timer_action_id;
        HIWORD(v46.super_class) = 2048;
        int v47 = action_samplers;
        _os_log_impl( &dword_186C92000,  v31,  OS_LOG_TYPE_INFO,  "KPerf timer %d (action %d) doesn't sample callstacks (0x%llx), ignoring",  (uint8_t *)&v46,  0x18u);
      }

      int v30 = __error();
      goto LABEL_44;
    }

    unint64_t v21 = *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
    if (v21 < 0 || v17 != v21)
    {
      int v32 = objc_alloc(&OBJC_CLASS___SAKPerfTrigger);
      if (v32)
      {
        v46.receiver = v32;
        v46.super_class = (Class)&OBJC_CLASS___SAKPerfTrigger;
        uint64_t v33 = objc_msgSendSuper2(&v46, sel_init);
        unsigned int v34 = v33;
        if (v33)
        {
          v33[1] = 2LL;
          v33[2] = timer_period_ns;
          v33[3] = action_samplers;
        }
      }

      else
      {
        unsigned int v34 = 0LL;
      }

      objc_msgSend(v45, "addObject:", v34, v44);
    }

    else
    {
      [*(id *)(a1 + 40) kPerfPETSampleIntervalLimit];
      int v23 = v22 * 1000000000.0;
      else {
        int v24 = timer_period_ns;
      }
      uint64_t v25 = objc_alloc(&OBJC_CLASS___SAKPerfTrigger);
      if (v25)
      {
        v46.receiver = v25;
        v46.super_class = (Class)&OBJC_CLASS___SAKPerfTrigger;
        uint64_t v26 = objc_msgSendSuper2(&v46, sel_init);
        uint64_t v27 = v26;
        if (v26)
        {
          v26[1] = 1LL;
          v26[2] = v24;
          v26[3] = action_samplers;
        }
      }

      else
      {
        uint64_t v27 = 0LL;
      }

      uint64_t v16 = v27;
      [v45 addObject:v27];
    }

void sub_186CC9C20( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, id a18)
{
  _Unwind_Resume(a1);
}

void sub_186CCA00C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, id a17)
{
  _Unwind_Resume(a1);
}

void sub_186CCA36C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_186CCA554(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_102:
            goto LABEL_94;
          }
        }

        int v32 = 0LL;
        goto LABEL_85;
      case 13:
        uint64_t v14 = 1;
LABEL_49:
        if (!v9) {
          goto LABEL_67;
        }
        int v40 = objc_getProperty((id)v9, v10, 24LL, 1);
        if (!v40) {
          goto LABEL_67;
        }
        int v41 = *(_BYTE *)(v9 + 8);

        if (v14)
        {
          if ((v41 & 1) != 0)
          {
LABEL_53:
            *(void *)(v9 + 32) = *((void *)a2 + 1);
            goto LABEL_94;
          }
        }

        else if ((v41 & 1) == 0)
        {
          goto LABEL_53;
        }

void sub_186CCAF34( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_186CCB164( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_186CCB3E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_85:
          if (!SAShouldIgnoreSegmentWithCName(v68))
          {
            if (strncmp(v68, "__TEXT", 6uLL)) {
              goto LABEL_88;
            }
            unsigned int v84 = &v198[v61 + v62 - *((int *)v63 + 2)];
            if (*((unsigned __int16 *)v84 + 4) < 7u
              || (int v85 = *((unsigned __int16 *)v84 + 7)) == 0
              || (v184 = *(void *)&v198[v61 + 8 + v62 + v85], v184 == -1))
            {
              if (_MergedGlobals_4[0] == 1)
              {
                int v86 = *__error();
                _sa_logt();
                int v87 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v87, OS_LOG_TYPE_DEBUG))
                {
                  v130 = [self debugDescription];
                  *(_DWORD *)uuid_t uu = 138412290;
                  *(void *)&uu[4] = v130;
                  v186 = (void *)v130;
                  _os_log_debug_impl( &dword_186C92000,  v87,  OS_LOG_TYPE_DEBUG,  "SAKTSYM TEXT segment has no address for %@",  uu,  0xCu);
                }

                *__error() = v86;
                v184 = v190;
                int v24 = self;
              }

              else
              {
LABEL_88:
                v184 = v190;
              }
            }

            SANSStringForCString(v68);
            int v72 = (void *)objc_claimAutoreleasedReturnValue();
            v191 = v72;
            if (v72)
            {
              -[SABinary segmentWithCleanName:](v24, v72);
              int v73 = (void *)objc_claimAutoreleasedReturnValue();
              if (!v73)
              {
                v74 = &v198[v61 + v62 - *((int *)v63 + 2)];
                else {
                  v76 = 0LL;
                }
                +[SASegment segmentWithBinary:name:length:]((uint64_t)&OBJC_CLASS___SASegment, self, v191, v76);
                int v90 = (void *)objc_claimAutoreleasedReturnValue();
                -[SABinary addSegment:](self, v90);
                if (_MergedGlobals_4[0] == 1)
                {
                  int v91 = *__error();
                  _sa_logt();
                  int v92 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v92, OS_LOG_TYPE_DEBUG))
                  {
                    v134 = [v90 debugDescription];
                    *(_DWORD *)uuid_t uu = 138412290;
                    *(void *)&uu[4] = v134;
                    log = (os_log_t)v134;
                    _os_log_debug_impl(&dword_186C92000, v92, OS_LOG_TYPE_DEBUG, "SAKTSYM new segment %@", uu, 0xCu);
                  }

                  *__error() = v91;
                }

                int v73 = v90;
              }

              v93 = &v198[v61 + v62 - *((int *)v63 + 2)];
              v180 = &v198[v61 + v62];
              if (*((unsigned __int16 *)v93 + 4) >= 9u)
              {
                v94 = *((unsigned __int16 *)v93 + 8);
                if (v94)
                {
                  if (*(void *)&v198[v61 + 8 + v62 + v94])
                  {
                    if ([v73 length])
                    {
                      v95 = [v73 length];
                      v96 = &v198[v61 + v62 - *((int *)v63 + 2)];
                      if (*((unsigned __int16 *)v96 + 4) < 9u)
                      {
                        v97 = 0LL;
                      }

                      else
                      {
                        v97 = *((unsigned __int16 *)v96 + 8);
                        if (v97) {
                          v97 = *(void *)&v198[v61 + 8 + v62 + v97];
                        }
                      }

                      if (v95 != v97 && _MergedGlobals_4[0] == 1)
                      {
                        tm v105 = *__error();
                        _sa_logt();
                        v106 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                        if (os_log_type_enabled(v106, OS_LOG_TYPE_DEBUG))
                        {
                          log = v106;
                          v140 = [v73 debugDescription];
                          v141 = (void *)v140;
                          v142 = &v198[v61 + v62 - *((int *)v180 + 2)];
                          if (*((unsigned __int16 *)v142 + 4) < 9u)
                          {
                            v143 = 0LL;
                            v144 = log;
                          }

                          else
                          {
                            v143 = *((unsigned __int16 *)v142 + 8);
                            v144 = log;
                            if (v143) {
                              v143 = *(void *)&v198[v61 + 8 + v62 + v143];
                            }
                          }

                          *(_DWORD *)uuid_t uu = 138412546;
                          *(void *)&uu[4] = v140;
                          *(_WORD *)&uu[12] = 2048;
                          *(void *)&uu[14] = v143;
                          _os_log_debug_impl( &dword_186C92000,  v144,  OS_LOG_TYPE_DEBUG,  "SAKTSYM segment %@ length mismatch 0x%llx",  uu,  0x16u);

                          v106 = log;
                        }

                        goto LABEL_147;
                      }
                    }

                    else
                    {
                      v102 = &v198[v61 + v62 - *((int *)v63 + 2)];
                      else {
                        time_t v104 = 0LL;
                      }
                      -[SASegment setLength:](v73, v104);
                      if (_MergedGlobals_4[0] == 1)
                      {
                        tm v105 = *__error();
                        _sa_logt();
                        v106 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                        if (os_log_type_enabled(v106, OS_LOG_TYPE_DEBUG))
                        {
                          log = v106;
                          [v73 debugDescription];
                          v138 = (void *)objc_claimAutoreleasedReturnValue();
                          v139 = [v73 length];
                          *(_DWORD *)uuid_t uu = 138412546;
                          *(void *)&uu[4] = v138;
                          *(_WORD *)&uu[12] = 2048;
                          *(void *)&uu[14] = v139;
                          _os_log_debug_impl( &dword_186C92000,  log,  OS_LOG_TYPE_DEBUG,  "SAKTSYM segment %@ added length 0x%llx",  uu,  0x16u);

                          v106 = log;
                        }

LABEL_147:
                        *__error() = v105;
                        int v63 = &v198[v61 + v62];
                      }
                    }
                  }
                }
              }

              uint64_t v107 = v62 - *((int *)v63 + 2);
              v108 = *(unsigned __int16 *)&v198[v61 + 8 + v107];
              if (v108 < 0xF
                || !*(_WORD *)&v198[v61 + 22 + v107]
                || (v109 = *(void *)&v198[v61 + 8 + v62 + *(unsigned __int16 *)&v198[v61 + 22 + v107]], v109 == -1))
              {
                v112 = (unsigned __int16 *)((char *)v10 - *v10);
                if (*v112 >= 0xDu)
                {
                  v113 = v112[6];
                  if (v113)
                  {
                    v114 = *((unsigned __int8 *)v10 + v113);
                    if (v108 >= 7 && v114 != 0)
                    {
                      v116 = *(unsigned __int16 *)&v198[v61 + 14 + v107];
                      if (v116)
                      {
                        v117 = *(void *)&v198[v61 + 8 + v62 + v116];
                        if (v117 != -1 && v184 != -1)
                        {
                          v109 = v117 - v184;
                          goto LABEL_151;
                        }
                      }
                    }
                  }
                }
              }

              else
              {
LABEL_151:
                if (v109 != 0x7FFFFFFFFFFFFFFFLL && ([v73 hasOffsetIntoBinary] & 1) == 0)
                {
                  if (v73) {
                    v73[5] = v109;
                  }
                  if (_MergedGlobals_4[0] == 1)
                  {
                    v110 = *__error();
                    _sa_logt();
                    v111 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v111, OS_LOG_TYPE_DEBUG))
                    {
                      [v73 debugDescription];
                      v145 = (void *)objc_claimAutoreleasedReturnValue();
                      v146 = [v73 offsetIntoBinary];
                      *(_DWORD *)uuid_t uu = 138412546;
                      *(void *)&uu[4] = v145;
                      *(_WORD *)&uu[12] = 2048;
                      *(void *)&uu[14] = v146;
                      _os_log_debug_impl( &dword_186C92000,  v111,  OS_LOG_TYPE_DEBUG,  "SAKTSYM segment %@ added offsetIntoBinary 0x%llx",  uu,  0x16u);
                    }

                    *__error() = v110;
                  }
                }
              }

              if (!v179)
              {
                v119 = v62 - *((int *)v180 + 2);
                if (*(unsigned __int16 *)&v198[v61 + 8 + v119] < 7u
                  || (v120 = *(unsigned __int16 *)&v198[v61 + 14 + v119]) == 0
                  || (v121 = *(void *)&v198[v61 + 8 + v62 + v120], v121 == -1))
                {
                  if (_MergedGlobals_4[0] == 1)
                  {
                    v122 = *__error();
                    _sa_logt();
                    v123 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v123, OS_LOG_TYPE_DEBUG))
                    {
                      [self debugDescription];
                      v131 = (void *)objc_claimAutoreleasedReturnValue();
                      [v73 debugDescription];
                      v132 = (void *)objc_claimAutoreleasedReturnValue();
                      *(_DWORD *)uuid_t uu = 138412546;
                      *(void *)&uu[4] = v131;
                      *(_WORD *)&uu[12] = 2112;
                      *(void *)&uu[14] = v132;
                      _os_log_debug_impl( &dword_186C92000,  v123,  OS_LOG_TYPE_DEBUG,  "SAKTSYM symbol owner %@ not contiguous, but segment %@ has no load address",  uu,  0x16u);
                    }

                    *__error() = v122;
                  }
                }

                else if (v121 - a4 >= a5)
                {
                  v124 = +[SABinaryLoadInfo binaryLoadInfoWithSegment:loadAddress:isInKernelAddressSpace:exclave:]( &OBJC_CLASS___SABinaryLoadInfo,  v73,  v121,  a3,  0LL);
                  [v196 addObject:v124];
                }

                else
                {
                  ++v194;
                }
              }
            }

            else
            {
              unsigned int v88 = *__error();
              _sa_logt();
              unsigned int v89 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v89, OS_LOG_TYPE_FAULT))
              {
                v128 = &v197[-*(int *)v197];
                if (*(unsigned __int16 *)v128 < 7u)
                {
                  v129 = 0LL;
                }

                else
                {
                  v129 = *((unsigned __int16 *)v128 + 3);
                  if (v129) {
                    v129 += (uint64_t)&v197[*(unsigned int *)&v197[v129]];
                  }
                }

                *(_DWORD *)uuid_t uu = 136315138;
                *(void *)&uu[4] = v129 + 4;
                _os_log_fault_impl( &dword_186C92000,  v89,  OS_LOG_TYPE_FAULT,  "SAKTSYM Unable to get string for symbol owner path %s",  uu,  0xCu);
              }

              *__error() = v88;
            }

            v190 = v184;
LABEL_183:
            int v24 = self;
            goto LABEL_184;
          }

          ++v188;
LABEL_184:
          v61 += 4LL;
          if (v195 == v61) {
            goto LABEL_220;
          }
        }

        unsigned int v70 = *__error();
        _sa_logt();
        uint64_t v71 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v71, OS_LOG_TYPE_FAULT))
        {
          v98 = [self debugDescription];
          v99 = &v198[v61 + v62 - *((int *)v63 + 2)];
          else {
            v101 = -1LL;
          }
          *(_DWORD *)uuid_t uu = 138413058;
          *(void *)&uu[4] = v98;
          *(_WORD *)&uu[12] = 2048;
          *(void *)&uu[14] = v193;
          *(_WORD *)&uu[22] = 2048;
          *(void *)v207 = v101;
          *(_WORD *)&v207[8] = 2082;
          v208 = v68;
          v185 = (void *)v98;
          _os_log_fault_impl( &dword_186C92000,  v71,  OS_LOG_TYPE_FAULT,  "SAKTSYM %@: ktrace claimed 1 segment, but after 0x%llx here's another: 0x%llx %{public}s",  uu,  0x2Au);
        }

        *__error() = v70;
        int v24 = self;
LABEL_84:
        if (v68) {
          goto LABEL_85;
        }
        goto LABEL_99;
      }

      v188 = 0;
      v190 = -1LL;
      v193 = -1LL;
LABEL_220:
      if (v179) {
        goto LABEL_223;
      }
      if (v178 != [v196 count]) {
        goto LABEL_223;
      }
      v150 = (unsigned int *)((char *)v10 + *(unsigned __int16 *)((char *)v10 - *v10 + 8));
      if (_MergedGlobals_4[0] == 1)
      {
        v164 = *__error();
        _sa_logt();
        v165 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v165, OS_LOG_TYPE_DEBUG))
        {
          [self debugDescription];
          v171 = (void *)objc_claimAutoreleasedReturnValue();
          v172 = (unsigned int *)((char *)v10 + *(unsigned __int16 *)((char *)v10 - *v10 + 8));
          LODWORD(v172) = *(unsigned int *)((char *)v172 + *v172);
          *(_DWORD *)uuid_t uu = 138412546;
          *(void *)&uu[4] = v171;
          *(_WORD *)&uu[12] = 1024;
          *(_DWORD *)&uu[14] = (_DWORD)v172;
          _os_log_debug_impl( &dword_186C92000,  v165,  OS_LOG_TYPE_DEBUG,  "SAKTSYM symbol owner %@ not contiguous, but no segments (of %d) have name/load addresses",  uu,  0x12u);
        }

        *__error() = v164;
      }

                          if (!flatbuffers::Table::VerifyOffset(v482, (const flatbuffers::Verifier *)&v499, 8u)) {
                            goto LABEL_18;
                          }
                          v64 = *(int *)v482;
                          unsigned int v65 = *(unsigned __int16 *)((char *)v482 - v64);
                          if (v65 < 9) {
                            goto LABEL_267;
                          }
                          if (!*(_WORD *)((char *)v482 - v64 + 8))
                          {
                            v68 = -v64;
                            goto LABEL_251;
                          }

                          if (!flatbuffers::Verifier::VerifyVectorOrString( (flatbuffers::Verifier *)&v499,  (const unsigned __int8 *)v482 + *(unsigned __int16 *)((char *)v482 - v64 + 8)
                                + *(unsigned int *)((char *)v482 + *(unsigned __int16 *)((char *)v482 - v64 + 8)),
                                  4uLL,
                                  0LL))
                            goto LABEL_18;
                          unsigned int v66 = *(int *)v482;
                          v67 = (char *)v482 - v66;
                          unsigned int v65 = *(unsigned __int16 *)((char *)v482 - v66);
                          if (v65 < 9) {
                            goto LABEL_267;
                          }
                          v68 = -v66;
                          unsigned int v69 = *((unsigned __int16 *)v67 + 4);
                          if (!v69) {
                            goto LABEL_251;
                          }
                          unsigned int v70 = *(unsigned int *)((char *)v482 + v69);
                          v401 = (_DWORD *)((char *)v482 + v69 + v70);
                          if (!*v401) {
                            goto LABEL_251;
                          }
                          v408 = (char *)&v437[v416 + v70 + v69];
                          v412 = 0LL;
                          oslog = (os_log_t)&v434[v416 + v69 + v70];
                          do
                          {
                            uint64_t v71 = (const unsigned __int8 *)&v401[v412 + 1];
                            v397 = *(unsigned int *)v71;
                            v442 = (flatbuffers::Table *)&v71[v397];
                            if (!flatbuffers::Verifier::VerifyTableStart((flatbuffers::Verifier *)&v499, &v71[v397])
                              || !flatbuffers::Table::VerifyOffset(v442, (const flatbuffers::Verifier *)&v499, 4u))
                            {
                              goto LABEL_18;
                            }

                            int v72 = (unsigned __int16 *)((char *)v442 - *(int *)v442);
                            if (*v72 >= 5u && (int v73 = v72[2]) != 0) {
                              v74 = (const unsigned __int8 *)v442 + v73 + *(unsigned int *)((char *)v442 + v73);
                            }
                            else {
                              v74 = 0LL;
                            }
                            if (!flatbuffers::Verifier::VerifyString((flatbuffers::Verifier *)&v499, v74)) {
                              goto LABEL_18;
                            }
                            v417 = (unsigned __int16 *)((char *)v442 - *(int *)v442);
                            v75 = *v417;
                            if (v75 >= 7
                              && (v417[3]
                               && (v500 < 9 || v500 - 8 < (flatbuffers::Table *)((char *)v442 + v417[3]) - v499)
                               || v75 >= 9
                               && v417[4]
                               && (v500 < 9 || v500 - 8 < (flatbuffers::Table *)((char *)v442 + v417[4]) - v499)))
                            {
                              goto LABEL_18;
                            }

                            if (!flatbuffers::Table::VerifyOffset(v442, (const flatbuffers::Verifier *)&v499, 0xAu)) {
                              goto LABEL_18;
                            }
                            if (v75 >= 0xB && v417[5])
                            {
                              if (!flatbuffers::Verifier::VerifyVectorOrString( (flatbuffers::Verifier *)&v499,  (const unsigned __int8 *)v442 + v417[5] + *(unsigned int *)((char *)v442 + v417[5]),  4uLL,  0LL)) {
                                goto LABEL_18;
                              }
                              v76 = (unsigned __int16 *)((char *)v442 - *(int *)v442);
                              if (*v76 >= 0xBu)
                              {
                                unsigned int v77 = v76[5];
                                if (v77)
                                {
                                  v393 = (char *)v442 + v77;
                                  v395 = (flatbuffers::Table *)*(unsigned int *)((char *)v442 + v77);
                                  if (*(_DWORD *)((char *)v395 + (void)v442 + v77))
                                  {
                                    v418 = 0LL;
                                    unsigned int v78 = &v408[v397 + (void)v395 + v77];
                                    while ((FlatbufferSymbols::Symbol::Verify( (FlatbufferSymbols::Symbol *)&v78[*(unsigned int *)v78],  (flatbuffers::Verifier *)&v499) & 1) != 0)
                                    {
                                      v78 += 4;
                                    }

                                    goto LABEL_18;
                                  }
                                }
                              }
                            }

LABEL_224:
      v203 = 0u;
      v204 = 0u;
      v201 = 0u;
      v202 = 0u;
      v151 = v196;
      v152 = [v151 countByEnumeratingWithState:&v201 objects:v205 count:16];
      if (v152)
      {
        v153 = *(void *)v202;
        while (2)
        {
          for (i = 0LL; i != v152; ++i)
          {
            if (*(void *)v202 != v153) {
              objc_enumerationMutation(v151);
            }
            v155 = *(void **)(*((void *)&v201 + 1) + 8 * i);
            objc_msgSend(v155, "binary", log);
            v156 = (id)objc_claimAutoreleasedReturnValue();
            v157 = v156 == self;

            if (v157)
            {
              v159 = *__error();
              _sa_logt();
              v160 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v160, OS_LOG_TYPE_ERROR))
              {
                [v155 debugDescription];
                v166 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)uuid_t uu = 138412290;
                *(void *)&uu[4] = v166;
                _os_log_error_impl( &dword_186C92000,  v160,  OS_LOG_TYPE_ERROR,  "SAKTSYM symbol owner contiguous, but already have binary in load infos: %@",  uu,  0xCu);
              }

              *__error() = v159;
              goto LABEL_241;
            }
          }

          v152 = [v151 countByEnumeratingWithState:&v201 objects:v205 count:16];
          if (v152) {
            continue;
          }
          break;
        }
      }

      if (v190 == -1) {
        v158 = v193;
      }
      else {
        v158 = v190;
      }
      if (v158 == -1)
      {
        int v24 = self;
        if (_MergedGlobals_4[0] != 1) {
          goto LABEL_242;
        }
        v161 = *__error();
        _sa_logt();
        v162 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v162, OS_LOG_TYPE_DEBUG))
        {
          [self debugDescription];
          v170 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)uuid_t uu = 138412290;
          *(void *)&uu[4] = v170;
          _os_log_debug_impl( &dword_186C92000,  v162,  OS_LOG_TYPE_DEBUG,  "SAKTSYM symbol owner %@ contiguous, but has no load address",  uu,  0xCu);
        }

        *__error() = v161;
        goto LABEL_241;
      }

      int v24 = self;
      if (v158 - a4 >= a5)
      {
        v163 = +[SABinaryLoadInfo binaryLoadInfoWithBinary:loadAddress:isInKernelAddressSpace:exclave:]( (uint64_t)&OBJC_CLASS___SABinaryLoadInfo,  self,  v158,  a3,  0LL);
        [v151 addObject:v163];

LABEL_241:
        int v24 = self;
        goto LABEL_242;
      }

      ++v189;
LABEL_242:

LABEL_20:
      objc_autoreleasePoolPop(v9);
      ++v7;
      ++v5;
      if (v7 == v200) {
        goto LABEL_255;
      }
    }

    if (_MergedGlobals_4[0] != 1) {
      goto LABEL_218;
    }
    v148 = *__error();
    _sa_logt();
    v149 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v149, OS_LOG_TYPE_DEBUG))
    {
      [self debugDescription];
      v167 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)uuid_t uu = 138412290;
      *(void *)&uu[4] = v167;
      _os_log_debug_impl( &dword_186C92000,  v149,  OS_LOG_TYPE_DEBUG,  "SAKTSYM symbol owner %@ not contiguous, but has no segments",  uu,  0xCu);
    }

                  v157 = [v350 isBoosted];
                  v158 = (void *)v368[5];
                  if (v157)
                  {
                    if (v158)
                    {
                      objc_msgSend(v158, "appendString:", @", ");
                      v159 = @"process unclamped";
LABEL_232:
                      [(id)v368[5] appendFormat:v159];
                      goto LABEL_233;
                    }

                    v160 = [objc_alloc(MEMORY[0x189607940]) initWithCapacity:128];
                    v161 = (void *)v368[5];
                    v368[5] = v160;
                    v159 = @"process unclamped";
                  }

                  else
                  {
                    if (v158)
                    {
                      objc_msgSend(v158, "appendString:", @", ");
                      v159 = @"process clamped";
                      goto LABEL_232;
                    }

                    v162 = [objc_alloc(MEMORY[0x189607940]) initWithCapacity:128];
                    v161 = (void *)v368[5];
                    v368[5] = v162;
                    v159 = @"process clamped";
                  }

                  goto LABEL_232;
                }

                if (v349)
                {
                  v149 = [v350 isDirty];
                }

                v150 = [v350 isDirty];
                v151 = (void *)v368[5];
                if (v150)
                {
                  if (v151)
                  {
                    objc_msgSend(v151, "appendString:", @", ");
                    v152 = @"process sudden termination dirty";
LABEL_219:
                    [(id)v368[5] appendFormat:v152];
                    goto LABEL_220;
                  }

                  v153 = [objc_alloc(MEMORY[0x189607940]) initWithCapacity:128];
                  v154 = (void *)v368[5];
                  v368[5] = v153;
                  v152 = @"process sudden termination dirty";
                }

                else
                {
                  if (v151)
                  {
                    objc_msgSend(v151, "appendString:", @", ");
                    v152 = @"process sudden termination clean";
                    goto LABEL_219;
                  }

                  v155 = [objc_alloc(MEMORY[0x189607940]) initWithCapacity:128];
                  v154 = (void *)v368[5];
                  v368[5] = v155;
                  v152 = @"process sudden termination clean";
                }

                goto LABEL_219;
              }

              goto LABEL_166;
            }

LABEL_216:
    *__error() = v148;
    if ((v181 & 1) != 0) {
      goto LABEL_241;
    }
    v193 = -1LL;
    v190 = -1LL;
    goto LABEL_224;
  }

  v189 = 0;
  v194 = 0;
LABEL_255:
  if ((v194 > 0 || v189 > 0) && _MergedGlobals_4[0] == 1)
  {
    v173 = *__error();
    _sa_logt();
    v174 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v174, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uuid_t uu = 67109888;
      *(_DWORD *)&uu[4] = v194;
      *(_WORD *)&uu[8] = 1024;
      *(_DWORD *)&uu[10] = v189;
      *(_WORD *)&uu[14] = 2048;
      *(void *)&uu[16] = a4;
      *(_WORD *)v207 = 2048;
      *(void *)&v207[2] = a4 + a5;
      _os_log_debug_impl( &dword_186C92000,  v174,  OS_LOG_TYPE_DEBUG,  "SAKTSYM %d segments and %d binaries excluded due to range 0x%llx-0x%llx",  uu,  0x22u);
    }

    *__error() = v173;
  }

  +[SABinaryLoadInfo sortBinaryLoadInfos:]((uint64_t)&OBJC_CLASS___SABinaryLoadInfo, v196);
  v175 = (void *)[v196 copy];

  return v175;
}

void sub_186CCCC88( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, void *a40, uint64_t a41, uint64_t a42, void *a43)
{
  _Unwind_Resume(a1);
}

LABEL_27:
        return;
      }
    }

    else
    {
    }
  }

  [v8 pid];
  uint64_t v15 = (void *)ktrace_dumpbuffer_address_space_pid();
  uint64_t v16 = v15;
  if (!v15)
  {
    if (_MergedGlobals_4[0] == 1)
    {
      unint64_t v21 = *__error();
      _sa_logt();
      int v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
      {
        [v8 name];
        v370 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412546;
        *(void *)&uint8_t buf[4] = v370;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = [v8 pid];
        _os_log_debug_impl( &dword_186C92000,  v24,  OS_LOG_TYPE_DEBUG,  "SAKTSYM %@ [%d] libktrace doesn't have load info",  buf,  0x12u);
      }

      int v23 = __error();
      goto LABEL_25;
    }

    uint64_t v12 = 0LL;
LABEL_128:
    _Block_object_dispose(&v251, 8);

    _Block_object_dispose(&v257, 8);
    _Block_object_dispose(&v261, 8);
    _Block_object_dispose(&v265, 8);
    _Block_object_dispose(&v269, 8);
    _Block_object_dispose(v273, 8);

    _Block_object_dispose(&v275, 8);
    objc_autoreleasePoolPop(context);
LABEL_129:

    return v12;
  }

  ktrace_set_execnames_enabled();
  ktrace_session_set_event_names_enabled();
  ktrace_session_set_event_names_enabled();
  qos_class_self();
  ktrace_set_collection_qos();
  int v9 = ktrace_set_file();
  if ((_DWORD)v9)
  {
    if (a5)
    {
      unsigned int v10 = objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"Unable to set file as ktrace: %d",  v9);
      uint64_t v11 = *a5;
      *a5 = (void *)v10;
    }

    ktrace_session_destroy();
    goto LABEL_27;
  }

  uint64_t v14 = dispatch_semaphore_create(0LL);
  uint64_t v15 = MEMORY[0x1895F87A8];
  v244 = MEMORY[0x1895F87A8];
  v245 = 3221225472LL;
  v246 = __77__SASampleStore_KPerf___parseKTraceFile_stackshotsOnly_warningsOut_errorOut___block_invoke_169;
  v247 = &unk_189F622B8;
  v250 = v8;
  v248 = a1;
  uint64_t v16 = v14;
  v249 = v16;
  ktrace_set_completion_handler();
  v238 = v15;
  v239 = 3221225472LL;
  v240 = __77__SASampleStore_KPerf___parseKTraceFile_stackshotsOnly_warningsOut_errorOut___block_invoke_2;
  v241 = &unk_189F622E0;
  v243 = &v269;
  v242 = v148;
  ktrace_chunks();
  v228 = v15;
  v229 = 3221225472LL;
  v230 = __77__SASampleStore_KPerf___parseKTraceFile_stackshotsOnly_warningsOut_errorOut___block_invoke_3;
  v231 = &unk_189F62308;
  v235 = &v265;
  v236 = &v251;
  v237 = &v261;
  v234 = &v269;
  v232 = a1;
  v233 = v242;
  ktrace_chunks();
  v222 = v15;
  v223 = 3221225472LL;
  v224 = __77__SASampleStore_KPerf___parseKTraceFile_stackshotsOnly_warningsOut_errorOut___block_invoke_178;
  v225 = &unk_189F62330;
  v226 = v233;
  v227 = a1;
  ktrace_chunks();
  v215 = v15;
  v216 = 3221225472LL;
  v217 = __77__SASampleStore_KPerf___parseKTraceFile_stackshotsOnly_warningsOut_errorOut___block_invoke_196;
  v218 = &unk_189F62358;
  v221 = &v269;
  uint64_t v17 = v226;
  v219 = v17;
  v142 = v147;
  v220 = v142;
  ktrace_chunks();
  v144 = a5;
  v145 = a1;
  v143 = a3;
  if ((a3 & 1) == 0)
  {
    v208 = MEMORY[0x1895F87A8];
    v209 = 3221225472LL;
    v210 = __77__SASampleStore_KPerf___parseKTraceFile_stackshotsOnly_warningsOut_errorOut___block_invoke_2_204;
    v211 = &unk_189F62358;
    v212 = v17;
    v213 = a1;
    v214 = &v257;
    ktrace_chunks();
  }

  v205[0] = MEMORY[0x1895F87A8];
  v205[1] = 3221225472LL;
  v205[2] = __77__SASampleStore_KPerf___parseKTraceFile_stackshotsOnly_warningsOut_errorOut___block_invoke_210;
  v205[3] = &unk_189F622E0;
  v207 = &v269;
  unsigned int v18 = v17;
  v206 = v18;
  int v19 = (void *)MEMORY[0x186E47C94](v205);
  ktrace_chunks();
  ktrace_chunks();
  v201[0] = MEMORY[0x1895F87A8];
  v201[1] = 3221225472LL;
  v201[2] = __77__SASampleStore_KPerf___parseKTraceFile_stackshotsOnly_warningsOut_errorOut___block_invoke_2_215;
  v201[3] = &unk_189F62380;
  v203 = &v269;
  __int16 v20 = v18;
  v202 = v20;
  v204 = &v275;
  unint64_t v21 = (void *)MEMORY[0x186E47C94](v201);
  ktrace_chunks();
  ktrace_chunks();
  ktrace_chunks();
  uint64_t v22 = MEMORY[0x1895F87A8];
  v195 = MEMORY[0x1895F87A8];
  v196 = 3221225472LL;
  v197 = __77__SASampleStore_KPerf___parseKTraceFile_stackshotsOnly_warningsOut_errorOut___block_invoke_220;
  v198 = &unk_189F62330;
  v199 = v20;
  v200 = a1;
  ktrace_chunks();
  v188 = v22;
  v189 = 3221225472LL;
  v190 = __77__SASampleStore_KPerf___parseKTraceFile_stackshotsOnly_warningsOut_errorOut___block_invoke_2_223;
  v191 = &unk_189F62380;
  v193 = &v269;
  v194 = v273;
  v141 = v199;
  v192 = v141;
  ktrace_chunks();
  int v23 = qos_class_self();
  dispatch_get_global_queue(v23, 0LL);
  int v24 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v25 = ktrace_start();

  if (v25)
  {
    if (v144)
    {
      v138 = v25;
      uint64_t v26 = [objc_alloc(NSString) initWithFormat:@"Unable to ktrace_start session: %d"];
      uint64_t v27 = *v144;
      *v144 = (void *)v26;
    }

    ktrace_session_destroy();
  }

  else
  {
    dispatch_semaphore_wait(v16, 0xFFFFFFFFFFFFFFFFLL);
    ktrace_session_destroy();
    if (*((_BYTE *)v270 + 24) && !*((_BYTE *)v266 + 24)) {
      *((_BYTE *)v262 + 24) = 1;
    }
    if ((v143 & 1) == 0 && ![a1 dataStyle])
    {
      if (*((_BYTE *)v270 + 24))
      {
        unsigned int v28 = [a1 dataSource] | 2;
        unsigned int v29 = 3LL;
      }

      else
      {
        unsigned int v28 = [a1 dataSource] | 8;
        unsigned int v29 = 1LL;
      }

      a1[44] = v28;
      a1[45] = v29;
    }
  }

  if (v25) {
    goto LABEL_27;
  }
  int v30 = a1;
  uint64_t v31 = [a1 dataSource];
  int v32 = (dispatch_semaphore_s **)v144;
  uint64_t v33 = v143;
  unsigned int v34 = MEMORY[0x1895F87A8];
  if ((v31 & 2) != 0 && !*((_BYTE *)v262 + 24)) {
    v139 = [a1 kPerfPETParsePastLastStackshot];
  }
  else {
    v139 = 1;
  }
  if (([a1 dataSource] & 2) != 0 && !objc_msgSend((id)v276[5], "count"))
  {
    if (v144)
    {
      uint64_t v12 = 0LL;
      uint64_t v13 = *v144;
      *v144 = @"No stackshot for PET data";
      goto LABEL_127;
    }

    goto LABEL_27;
  }

  unsigned int v35 = objc_alloc(MEMORY[0x189603FA8]);
  v140 = (void *)objc_msgSend(v35, "initWithCapacity:", objc_msgSend((id)v276[5], "count"));
  if (![(id)v276[5] count]) {
    goto LABEL_68;
  }
  int v36 = (id)v276[5];
  int v37 = v140;
  v152 = v37;
  if (!v37)
  {
    v109 = *__error();
    _sa_logt();
    v110 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v110, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v28_Block_object_dispose((const void *)(v1 - 88), 8) = 0;
      _os_log_error_impl( &dword_186C92000,  v110,  OS_LOG_TYPE_ERROR,  "nil stackshotMachAbsTimes_out",  (uint8_t *)&v288,  2u);
    }

    *__error() = v109;
    _SASetCrashLogMessage(2024, "nil stackshotMachAbsTimes_out", v111, v112, v113, v114, v115, v116, v138);
    _os_crash();
    __break(1u);
    goto LABEL_165;
  }

  if ([v37 count])
  {
LABEL_165:
    v117 = *__error();
    _sa_logt();
    v118 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v118, OS_LOG_TYPE_ERROR))
    {
      v119 = [v152 count];
      LODWORD(v28_Block_object_dispose((const void *)(v1 - 88), 8) = 134217984;
      *(void *)((char *)&v288 + 4) = v119;
      _os_log_error_impl( &dword_186C92000,  v118,  OS_LOG_TYPE_ERROR,  "%lu stackshotMachAbsTimes_out.count",  (uint8_t *)&v288,  0xCu);
    }

    *__error() = v117;
    v120 = [v152 count];
    _SASetCrashLogMessage(2025, "%lu stackshotMachAbsTimes_out.count", v121, v122, v123, v124, v125, v126, v120);
    _os_crash();
    __break(1u);
    goto LABEL_168;
  }

  v284 = 0u;
  v283 = 0u;
  v282 = 0u;
  v281 = 0u;
  id obj = v36;
  unsigned int v38 = [obj countByEnumeratingWithState:&v281 objects:&v288 count:16];
  if (v38)
  {
    DWORD1(v150) = 0;
    *((void *)&v150 + 1) = 0LL;
    v151 = *(void *)v282;
    do
    {
      for (i = 0LL; i != v38; ++i)
      {
        if (*(void *)v282 != v151) {
          objc_enumerationMutation(obj);
        }
        int v40 = *(id *)(*((void *)&v281 + 1) + 8 * i);
        int v41 = (int *)[v40 bytes];
        v42 = (unint64_t)v41 + [v40 length];
        while (1)
        {
          unsigned int v43 = v41 + 4;
          unsigned int v44 = *v41;
          if (*v41 == -242132755) {
            break;
          }
          if ((v44 & 0xFFFFFFF0) == 0x20) {
            unsigned int v44 = 17;
          }
          else {
            int v45 = v41 + 12;
          }
          if (v44 == 50)
          {
            if (v45[1] && *v45)
            {
              DWORD1(v150) = *v45;
              *((void *)&v150 + 1) = v45[1];
            }

            else
            {
              int v47 = *__error();
              _sa_logt();
              v48 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
              {
                v49 = *v45;
                unsigned int v50 = v45[1];
                *(_DWORD *)buf = 67109376;
                *(_DWORD *)&uint8_t buf[4] = v49;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v50;
                _os_log_error_impl(&dword_186C92000, v48, OS_LOG_TYPE_ERROR, "Bad mach timebase: %d/%d", buf, 0xEu);
              }

              *__error() = v47;
            }
          }

          else if (v44 == 51)
          {
            [MEMORY[0x189607968] numberWithUnsignedLongLong:*(void *)v45];
            int v46 = (void *)objc_claimAutoreleasedReturnValue();
            [v152 addObject:v46];
          }

          int v41 = (_DWORD *)((char *)v43 + v41[1]);
        }
      }

      unsigned int v38 = [obj countByEnumeratingWithState:&v281 objects:&v288 count:16];
    }

    while (v38);
  }

  else
  {
    *((void *)&v150 + 1) = 0LL;
    DWORD1(v150) = 0;
  }

  [v152 lastObject];
  unsigned int v51 = (void *)objc_claimAutoreleasedReturnValue();
  if (![v51 unsignedLongLongValue] || !DWORD2(v150))
  {

    goto LABEL_74;
  }

  if (!DWORD1(v150))
  {
LABEL_74:
    if (v144)
    {
      uint64_t v12 = 0LL;
      v56 = (dispatch_semaphore_s *)*v144;
      *v144 = @"No timestamp / timebase in stackshot";
      goto LABEL_125;
    }

    uint64_t v12 = 0LL;
    uint64_t v13 = v152;
LABEL_127:

    goto LABEL_128;
  }

  int v30 = v145;
  [v145 setMachTimebase:(unint64_t)(v150 >> 32)];
  int v32 = (dispatch_semaphore_s **)v144;
  uint64_t v33 = v143;
  unsigned int v34 = MEMORY[0x1895F87A8];
LABEL_68:
  int v52 = ktrace_session_create();
  if (!v52)
  {
    if (!v32)
    {
LABEL_81:
      uint64_t v12 = 0LL;
LABEL_126:
      uint64_t v13 = v140;
      goto LABEL_127;
    }

    uint64_t v12 = 0LL;
    v56 = *v32;
    *int v32 = (dispatch_semaphore_s *)@"Unable to allocate ktrace_session";
LABEL_125:

    goto LABEL_126;
  }

  ktrace_set_execnames_enabled();
  ktrace_session_set_event_names_enabled();
  ktrace_session_set_event_names_enabled();
  qos_class_self();
  ktrace_set_collection_qos();
  int v53 = ktrace_set_file();
  if ((_DWORD)v53)
  {
    if (v32)
    {
      int v54 = objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"Unable set file as ktrace: %d",  v53);
      v55 = *v32;
      *int v32 = (dispatch_semaphore_s *)v54;
    }

    ktrace_session_destroy();
    goto LABEL_81;
  }

  v57 = dispatch_semaphore_create(0LL);
  *(void *)&v288 = 0LL;
  *((void *)&v288 + 1) = &v288;
  v289 = 0x2020000000LL;
  v290 = 0LL;
  v182 = v34;
  v183 = 3221225472LL;
  v184 = __77__SASampleStore_KPerf___parseKTraceFile_stackshotsOnly_warningsOut_errorOut___block_invoke_3_232;
  v185 = &unk_189F623A8;
  v186 = &v288;
  v187 = v52;
  ktrace_events_all();
  *(void *)&v281 = 0LL;
  *((void *)&v281 + 1) = &v281;
  v282 = 0x2020000000uLL;
  v168 = v34;
  v169 = 3221225472LL;
  v170 = __77__SASampleStore_KPerf___parseKTraceFile_stackshotsOnly_warningsOut_errorOut___block_invoke_4;
  v171 = &unk_189F624D0;
  v172 = v30;
  v56 = v57;
  v173 = v56;
  v174 = v142;
  v175 = v273;
  v181 = v33;
  v176 = &v281;
  v177 = &v275;
  v178 = &v288;
  v179 = &v269;
  v180 = v52;
  ktrace_set_completion_handler();
  if ((v33 & 1) != 0)
  {
    ktrace_chunks();
    v155 = 0u;
    v156 = 0u;
    v153 = 0u;
    v154 = 0u;
    unsigned int v58 = (id)v276[5];
    v59 = [v58 countByEnumeratingWithState:&v153 objects:v285 count:16];
    if (v59)
    {
      unsigned int v60 = *(void *)v154;
      do
      {
        for (j = 0LL; j != v59; ++j)
        {
          if (*(void *)v154 != v60) {
            objc_enumerationMutation(v58);
          }
          [v30 addKCDataStackshot:*(void *)(*((void *)&v153 + 1) + 8 * j)];
        }

        v59 = [v58 countByEnumeratingWithState:&v153 objects:v285 count:16];
      }

      while (v59);
    }
  }

  else
  {
    if ([(id)v276[5] count])
    {
      if ((v139 & 1) != 0)
      {
        int v62 = -1LL;
      }

      else
      {
        [v140 lastObject];
        int v63 = (void *)objc_claimAutoreleasedReturnValue();
        int v62 = [v63 unsignedLongLongValue];
      }

      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&uint8_t buf[16] = 0x2020000000LL;
      [v140 objectAtIndexedSubscript:*(void *)(*((void *)&v281 + 1) + 24)];
      v64 = (void *)objc_claimAutoreleasedReturnValue();
      unsigned int v65 = [v64 unsignedLongLongValue];

      v287 = v65;
      v157 = MEMORY[0x1895F87A8];
      v158 = 3221225472LL;
      v159 = __77__SASampleStore_KPerf___parseKTraceFile_stackshotsOnly_warningsOut_errorOut___block_invoke_241;
      v160 = &unk_189F624F8;
      v163 = buf;
      v161 = v145;
      v164 = &v275;
      v165 = &v281;
      v166 = v52;
      v162 = v140;
      v167 = v139;
      ktrace_events_all();

      _Block_object_dispose(buf, 8);
      int v30 = v145;
    }

    else
    {
      int v62 = -1LL;
    }

    -[SASampleStore _addKPerfDataFromKTraceSession:beforeMachAbsTime:petTimerID:](v30, v52, v62, *((_DWORD *)v258 + 6));
  }

  unsigned int v66 = qos_class_self();
  dispatch_get_global_queue(v66, 0LL);
  v67 = (void *)objc_claimAutoreleasedReturnValue();
  v68 = ktrace_start();

  if ((_DWORD)v68)
  {
    if (v144)
    {
      unsigned int v69 = objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"Unable to ktrace_start session: %d",  v68);
      unsigned int v70 = *v144;
      *v144 = (void *)v69;
    }

    ktrace_session_destroy();
    goto LABEL_103;
  }

  dispatch_semaphore_wait(v56, 0xFFFFFFFFFFFFFFFFLL);
  uint64_t v71 = v144;
  int v72 = v145;
  if ((v143 & 1) != 0) {
    goto LABEL_105;
  }
  int v79 = [v145 dataSource];
  if (!v141) {
    goto LABEL_105;
  }
  if ((v79 & 2) == 0) {
    goto LABEL_105;
  }
  [v145 endTime];
  int v80 = (void *)objc_claimAutoreleasedReturnValue();
  unsigned int v81 = v80 == 0LL;

  uint64_t v71 = v144;
  int v72 = v145;
  if (v81) {
    goto LABEL_105;
  }
  [v145 endTime];
  int v82 = (void *)objc_claimAutoreleasedReturnValue();
  int v83 = [v82 machAbsTime];

  unsigned int v84 = *(void *)(*((void *)&v281 + 1) + 24LL);
  if (v84)
  {
    [v140 objectAtIndexedSubscript:v84 - 1];
    int v85 = (void *)objc_claimAutoreleasedReturnValue();
    int v86 = [v85 unsignedLongLongValue];

    uint64_t v71 = v144;
    int v72 = v145;
    if (v86 >= v83) {
      goto LABEL_105;
    }
    if (v86)
    {
      int v87 = *(void *)(*((void *)&v288 + 1) + 24LL);
      unsigned int v88 = [v145 machTimebase];
      unsigned int v89 = 0LL;
      if ((_DWORD)v88)
      {
        if (HIDWORD(v88))
        {
          unsigned int v89 = v87 - v86;
          if ((_DWORD)v88 != HIDWORD(v88)) {
            unsigned int v89 = __udivti3();
          }
        }
      }

      +[SATimestamp timestampWithMachAbsTime:machAbsTimeSec:machContTime:machContTimeSec:wallTime:]( &OBJC_CLASS___SATimestamp,  "timestampWithMachAbsTime:machAbsTimeSec:machContTime:machContTimeSec:wallTime:",  v86,  0LL,  0.0,  0.0,  0.0);
      int v90 = (void *)objc_claimAutoreleasedReturnValue();
      int v91 = [v145 indexOfLastSampleOnOrBeforeTimestamp:v90];

      int v92 = *(void *)(*((void *)&v281 + 1) + 24LL);
      int v72 = v145;
      v93 = (double)(unint64_t)v89 / 1000000000.0;
      if (v92 < [(id)v276[5] count])
      {
        [v140 objectAtIndexedSubscript:*(void *)(*((void *)&v281 + 1) + 24)];
        v94 = (void *)objc_claimAutoreleasedReturnValue();
        v95 = [v94 unsignedLongLongValue];
        v96 = *(void *)(*((void *)&v288 + 1) + 24LL);
        v97 = [v145 machTimebase];
        v98 = 0LL;
        if ((_DWORD)v97)
        {
          if (HIDWORD(v97))
          {
            v98 = v95 - v96;
            if ((_DWORD)v97 != HIDWORD(v97)) {
              v98 = __udivti3();
            }
          }
        }

        v99 = objc_alloc(NSString);
        [v145 sampleTimestamps];
        uint64_t v100 = (void *)objc_claimAutoreleasedReturnValue();
        v101 = (void *)objc_msgSend( v99,  "initWithFormat:",  @"KTrace data ended %.1fs before the next stackshot (%.1fs after the previous stackshot). Data for the last %lu samples will be missing for any threads/tasks after the point at which they stopped using any cpu time",  (double)(unint64_t)v98 / 1000000000.0,  *(void *)&v93,  objc_msgSend(v100, "count") - v91);
        [v141 addObject:v101];
        goto LABEL_160;
      }

      uint64_t v71 = v144;
      if ((v139 & 1) == 0)
      {
        v108 = objc_alloc(NSString);
        [v145 sampleTimestamps];
        uint64_t v100 = (void *)objc_claimAutoreleasedReturnValue();
        v101 = (void *)objc_msgSend( v108,  "initWithFormat:",  @"KTrace data ended %.1fs after the last stackshot. Data for the last %lu samples will be missing for any threads/tasks after the point at which they stopped using any cpu time",  (double)(unint64_t)v89 / 1000000000.0,  objc_msgSend(v100, "count") - v91);
        [v141 addObject:v101];
LABEL_160:

LABEL_161:
        uint64_t v71 = v144;
        int v72 = v145;
      }

        uint64_t v27 = v126[1];
        if (v27)
        {
          unsigned int v28 = MEMORY[0x1895F87A8];
          v161[0] = MEMORY[0x1895F87A8];
          v161[1] = 3221225472LL;
          v161[2] = __46__SASegment_grabInstructionsFromOtherSegment___block_invoke;
          v161[3] = &unk_189F62648;
          v161[5] = v6;
          v161[4] = v7;
          unsigned int v29 = SABinarySearchArray(v27, 1280, (uint64_t)v161);
          int v30 = v126[1];
          v160[0] = v28;
          v160[1] = 3221225472LL;
          v160[2] = __46__SASegment_grabInstructionsFromOtherSegment___block_invoke_2;
          v160[3] = &unk_189F62648;
          v160[5] = v6;
          v160[4] = v7;
          uint64_t v31 = SABinarySearchArray(v30, 1280, (uint64_t)v160);
          if (v29 < [v126[1] count])
          {
            if (v31)
            {
              int v32 = v31 - v29;
              objc_msgSend(v126[1], "subarrayWithRange:", v29, v32);
              v121 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v126[1], "removeObjectsInRange:", v29, v32);
              if (v7[1])
              {
                v158 = 0u;
                v159 = 0u;
                v156 = 0u;
                v157 = 0u;
                uint64_t v33 = v121;
                unsigned int v34 = [v33 countByEnumeratingWithState:&v156 objects:v178 count:16];
                if (!v34) {
                  goto LABEL_84;
                }
                v124 = v33;
                unsigned int v35 = 0LL;
                v127 = *(void *)v157;
                while (1)
                {
                  v138 = 0LL;
                  v129 = v34;
                  do
                  {
                    if (*(void *)v157 != v127) {
                      objc_enumerationMutation(v124);
                    }
                    int v36 = *(void **)(*((void *)&v156 + 1) + 8 * v138);
                    int v37 = [v36 offsetIntoSegment];
                    unsigned int v38 = [v36 length];
                    int v40 = v37 + v6;
                    int v41 = v7[5];
                    v42 = (uint64_t)v41 + (void)v7[3];
                    if (v38 + v37 + v6 <= v42)
                    {
                      unsigned int v43 = v40 - (void)v41;
                      if (v36) {
                        goto LABEL_40;
                      }
                    }

                    else
                    {
                      if (v36)
                      {
                        v36[2] = v42 - v40;
                        unsigned int v43 = v40 - (void)v7[5];
LABEL_40:
                        v36[1] = v43;
                        v154 = 0u;
                        v155 = 0u;
                        v152 = 0u;
                        v153 = 0u;
                        Property = objc_getProperty(v36, v39, 32LL, 1);
                        v134 = 0;
                        goto LABEL_41;
                      }

                      unsigned int v43 = v40 - (void)v41;
                    }

                    Property = 0LL;
                    v154 = 0u;
                    v155 = 0u;
                    v134 = 1;
                    v152 = 0u;
                    v153 = 0u;
LABEL_41:
                    int v45 = Property;
                    int v46 = [v45 countByEnumeratingWithState:&v152 objects:v177 count:16];
                    if (v46)
                    {
                      int v47 = *(void *)v153;
                      do
                      {
                        for (j = 0LL; j != v46; ++j)
                        {
                          if (*(void *)v153 != v47) {
                            objc_enumerationMutation(v45);
                          }
                          v49 = *(void **)(*((void *)&v152 + 1) + 8 * j);
                          unsigned int v50 = [v49 offsetIntoSegment];
                          if (v49) {
                            v49[2] = v50 + v6 - (void)v7[5];
                          }
                        }

                        int v46 = [v45 countByEnumeratingWithState:&v152 objects:v177 count:16];
                      }

                      while (v46);
                    }

                    while (v35 < [v7[1] count])
                    {
                      [v7[1] objectAtIndexedSubscript:v35];
                      unsigned int v51 = (void *)objc_claimAutoreleasedReturnValue();
                      int v52 = [v51 offsetIntoSegment] < v43;

                      if (!v52) {
                        break;
                      }
                      ++v35;
                    }

                    [v7[1] objectAtIndexedSubscript:v35];
                    int v53 = (void *)objc_claimAutoreleasedReturnValue();
                    int v54 = [v53 offsetIntoSegment];
                    if (v54 == v43)
                    {
                      if ([v36 length])
                      {
                        if (![v53 length]
                          || (v55 = [v36 length], v55 < objc_msgSend(v53, "length")))
                        {
                          v56 = [v36 length];
                          if (v53) {
                            v53[2] = v56;
                          }
                        }
                      }

                      [v53 name];
                      v57 = (void *)objc_claimAutoreleasedReturnValue();
                      if (v57)
                      {
                      }

                      else
                      {
                        [v36 name];
                        int v62 = (void *)objc_claimAutoreleasedReturnValue();
                        int v63 = v62 == 0LL;

                        if (!v63)
                        {
                          [v36 name];
                          unsigned int v65 = (void *)objc_claimAutoreleasedReturnValue();
                          if (v53) {
                            objc_setProperty_atomic_copy(v53, v64, v65, 24LL);
                          }
                        }
                      }
                    }

                    else
                    {
                      if (v35)
                      {
                        [v7[1] objectAtIndexedSubscript:v35 - 1];
                        unsigned int v58 = (void *)objc_claimAutoreleasedReturnValue();
                        v59 = [v58 offsetIntoSegment];
                        if (v43 < [v58 length] + v59)
                        {
                          unsigned int v60 = [v58 offsetIntoSegment];
                          if (v58) {
                            v58[2] = v43 - v60;
                          }
                        }
                      }

                      if ([v36 length] + v43 <= v54) {
                        unsigned int v61 = 1;
                      }
                      else {
                        unsigned int v61 = v134;
                      }
                      if ((v61 & 1) == 0) {
                        v36[2] = v54 - v43;
                      }
                      [v7[1] insertObject:v36 atIndex:v35++];
                    }

                    ++v138;
                  }

                  while (v138 != v129);
                  unsigned int v66 = [v124 countByEnumeratingWithState:&v156 objects:v178 count:16];
                  unsigned int v34 = v66;
                  if (!v66)
                  {
                    uint64_t v33 = v124;
                    goto LABEL_84;
                  }
                }
              }

              v67 = [v121 mutableCopy];
              uint64_t v33 = v7[1];
              v7[1] = (id)v67;
LABEL_84:

              v150 = 0u;
              v151 = 0u;
              v148 = 0u;
              v149 = 0u;
              [v126[2] allKeys];
              v68 = (void *)objc_claimAutoreleasedReturnValue();
              [v68 sortedArrayUsingSelector:sel_compare_];
              v122 = (id)objc_claimAutoreleasedReturnValue();

              unsigned int v69 = [v122 countByEnumeratingWithState:&v148 objects:v176 count:16];
              if (v69)
              {
                v125 = *(id *)v149;
                do
                {
                  v132 = 0LL;
                  v139 = v69;
                  do
                  {
                    if (*(id *)v149 != v125) {
                      objc_enumerationMutation(v122);
                    }
                    v130 = *(void **)(*((void *)&v148 + 1) + 8 * v132);
                    unsigned int v70 = [v130 unsignedLongLongValue] + v6;
                    uint64_t v71 = v7[5];
                    if (v70 >= (uint64_t)v71)
                    {
                      [v126[2] objectForKeyedSubscript:v130];
                      v128 = (void *)objc_claimAutoreleasedReturnValue();
                      int v72 = v7[5];
                      int v73 = v7[2];
                      if (!v73)
                      {
                        v74 = [objc_alloc(MEMORY[0x189603FC8]) initWithCapacity:1];
                        v75 = v7[2];
                        v7[2] = (id)v74;

                        int v73 = v7[2];
                      }

                      v76 = v70 - (void)v72;
                      [MEMORY[0x189607968] numberWithUnsignedLongLong:v70 - (void)v72];
                      unsigned int v77 = (void *)objc_claimAutoreleasedReturnValue();
                      [v73 objectForKeyedSubscript:v77];
                      unsigned int v78 = (void *)objc_claimAutoreleasedReturnValue();
                      int v79 = v78 == 0LL;

                      if (v79)
                      {
                        int v82 = v7[2];
                        [MEMORY[0x189607968] numberWithUnsignedLongLong:v76];
                        int v83 = (void *)objc_claimAutoreleasedReturnValue();
                        [v82 setObject:v128 forKeyedSubscript:v83];

                        v146 = 0u;
                        v147 = 0u;
                        v144 = 0u;
                        v145 = 0u;
                        v135 = v128;
                        unsigned int v84 = [v135 countByEnumeratingWithState:&v144 objects:v175 count:16];
                        if (v84)
                        {
                          int v85 = *(void *)v145;
                          do
                          {
                            int v86 = 0LL;
                            do
                            {
                              if (*(void *)v145 != v85) {
                                objc_enumerationMutation(v135);
                              }
                              int v87 = *(void **)(*((void *)&v144 + 1) + 8 * v86);
                              unsigned int v88 = [v87 offsetIntoSegment];
                              if (v87)
                              {
                                v87[1] = v88 + v6 - (void)v7[5];
                                v142 = 0u;
                                v143 = 0u;
                                v140 = 0u;
                                v141 = 0u;
                                int v90 = objc_getProperty(v87, v89, 32LL, 1);
                              }

                              else
                              {
                                int v90 = 0LL;
                                v142 = 0u;
                                v143 = 0u;
                                v140 = 0u;
                                v141 = 0u;
                              }

                              int v91 = v90;
                              int v92 = [v91 countByEnumeratingWithState:&v140 objects:v174 count:16];
                              if (v92)
                              {
                                v93 = *(void *)v141;
                                do
                                {
                                  for (k = 0LL; k != v92; ++k)
                                  {
                                    if (*(void *)v141 != v93) {
                                      objc_enumerationMutation(v91);
                                    }
                                    v95 = *(void **)(*((void *)&v140 + 1) + 8 * k);
                                    v96 = [v95 offsetIntoSegment];
                                    if (v95) {
                                      v95[2] = v96 + v6 - (void)v7[5];
                                    }
                                  }

                                  int v92 = [v91 countByEnumeratingWithState:&v140 objects:v174 count:16];
                                }

                                while (v92);
                              }

                              unsigned int v69 = v139;
                              ++v86;
                            }

                            while (v86 != v84);
                            v97 = [v135 countByEnumeratingWithState:&v144 objects:v175 count:16];
                            unsigned int v84 = v97;
                          }

                          while (v97);
                        }
                      }

                      else
                      {
                        int v80 = *__error();
                        _sa_logt();
                        unsigned int v81 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                        if (os_log_type_enabled(v81, OS_LOG_TYPE_DEBUG))
                        {
                          v98 = [v7 debugDescription];
                          v119 = [v98 UTF8String];
                          v118 = [v128 count];
                          -[SASegment nonInlineSymbolAtOffsetIntoSegment:](v7, v76);
                          v136 = (id)objc_claimAutoreleasedReturnValue();
                          v120 = [v136 debugDescription];
                          v117 = [v120 UTF8String];
                          v99 = v7[2];
                          [MEMORY[0x189607968] numberWithUnsignedLongLong:v76];
                          uint64_t v100 = (void *)objc_claimAutoreleasedReturnValue();
                          [v99 objectForKeyedSubscript:v100];
                          v101 = (void *)objc_claimAutoreleasedReturnValue();
                          v102 = [v101 count];
                          *(_DWORD *)buf = 136315906;
                          v167 = v119;
                          v168 = 2048;
                          v169 = v118;
                          v170 = 2080;
                          v171 = v117;
                          v172 = 2048;
                          v173 = v102;
                          _os_log_debug_impl( &dword_186C92000,  v81,  OS_LOG_TYPE_DEBUG,  "%s: throwing out %lu duplicate inline symbols for %s (already have %lu)",  buf,  0x2Au);
                        }

                        *__error() = v80;
                      }

                      [v126[2] setObject:0 forKeyedSubscript:v130];
                    }

                    ++v132;
                  }

                  while (v132 != v69);
                  unsigned int v69 = [v122 countByEnumeratingWithState:&v148 objects:v176 count:16];
                }

                while (v69);
              }

    *(_BYTE *)(v4 + 15) |= 0x40u;
    uint64_t v6 = *(void *)(a2 + 99);
    if ((v6 & 0x10) == 0) {
      goto LABEL_38;
    }
    goto LABEL_28;
  }

  if (v5 <= 0x11235816)
  {
    switch(v5)
    {
      case 0x11235813uLL:
        v3->_voucherIdentifier = 0LL;
        v3->_userTimeInNs = *(void *)(a2 + 40);
        v3->_systemTimeInNs = *(void *)(a2 + 48);
        v3->_state = *(_DWORD *)(a2 + 64);
        -[SAThreadState setBasePriority:]((int *)v3, *(_DWORD *)(a2 + 68));
        -[SAThreadState setScheduledPriority:]((int *)v4, *(_DWORD *)(a2 + 72));
        *(_DWORD *)(v4 + 36) = *(_DWORD *)(a2 + 76);
        *(_BYTE *)(v4 + 24) = *(_BYTE *)(a2 + 84);
        -[SAThreadState setThreadQos:](v4, *(unsigned __int8 *)(a2 + 80));
        uint64_t v7 = *(_BYTE *)(v4 + 11);
        BOOL v8 = v7 | 0x38;
        *(_BYTE *)(v4 + 11) = v7 | 0x38;
        *(_BYTE *)(v4 + 21) |= 0x3Fu;
        int v9 = *(_BYTE *)(a2 + 86);
        if ((v9 & 0x40) != 0)
        {
          BOOL v8 = v7 | 0x78;
          *(_BYTE *)(v4 + 11) = v7 | 0x78;
          int v9 = *(_BYTE *)(a2 + 86);
          if ((v9 & 0x20) == 0)
          {
LABEL_32:
            if ((v9 & 0x10) != 0) {
              goto LABEL_61;
            }
            return (id)v4;
          }
        }

        else if ((*(_BYTE *)(a2 + 86) & 0x20) == 0)
        {
          goto LABEL_32;
        }

        *(_BYTE *)(v4 + 11) = v8 | 0x80;
        if ((*(_BYTE *)(a2 + 86) & 0x10) != 0) {
          goto LABEL_61;
        }
        return (id)v4;
      case 0x11235814uLL:
        v3->_voucherIdentifier = 0LL;
        v3->_userTimeInNs = *(void *)(a2 + 40);
        v3->_systemTimeInNs = *(void *)(a2 + 48);
        v3->_state = *(_DWORD *)(a2 + 64);
        -[SAThreadState setBasePriority:]((int *)v3, *(_DWORD *)(a2 + 68));
        -[SAThreadState setScheduledPriority:]((int *)v4, *(_DWORD *)(a2 + 72));
        *(_DWORD *)(v4 + 36) = *(_DWORD *)(a2 + 76);
        *(_BYTE *)(v4 + 24) = *(_BYTE *)(a2 + 84);
        -[SAThreadState setThreadQos:](v4, *(unsigned __int8 *)(a2 + 80));
        -[SAThreadState setThreadRequestedQos:](v4, *(unsigned __int8 *)(a2 + 81));
        -[SAThreadState setThreadRequestedQosOverride:](v4, *(unsigned __int8 *)(a2 + 82));
        *(_BYTE *)(v4 + 21) |= 0x38u;
        uint64_t v12 = *(_BYTE *)(a2 + 86);
        if ((v12 & 0x40) != 0)
        {
          *(_BYTE *)(v4 + 11) |= 0x40u;
          uint64_t v12 = *(_BYTE *)(a2 + 86);
        }

        if ((v12 & 0x20) != 0)
        {
          *(_BYTE *)(v4 + 11) |= 0x80u;
          uint64_t v12 = *(_BYTE *)(a2 + 86);
        }

        if ((v12 & 0x10) != 0) {
          goto LABEL_61;
        }
        return (id)v4;
      case 0x11235815uLL:
        v3->_voucherIdentifier = *(void *)(a2 + 40);
        v3->_userTimeInNs = *(void *)(a2 + 48);
        v3->_systemTimeInNs = *(void *)(a2 + 56);
        v3->_state = *(_DWORD *)(a2 + 64);
        -[SAThreadState setBasePriority:]((int *)v3, *(__int16 *)(a2 + 72));
        -[SAThreadState setScheduledPriority:]((int *)v4, *(__int16 *)(a2 + 74));
        *(_DWORD *)(v4 + 36) = *(_DWORD *)(a2 + 68);
        *(_BYTE *)(v4 + 24) = *(_BYTE *)(a2 + 79);
        -[SAThreadState setThreadQos:](v4, *(unsigned __int8 *)(a2 + 76));
        -[SAThreadState setThreadRequestedQos:](v4, *(unsigned __int8 *)(a2 + 77));
        -[SAThreadState setThreadRequestedQosOverride:](v4, *(unsigned __int8 *)(a2 + 78));
        *(_BYTE *)(v4 + 21) |= 0x38u;
        uint64_t v13 = *(_BYTE *)(a2 + 80);
        if ((v13 & 1) != 0)
        {
          *(_BYTE *)(v4 + 11) |= 0x40u;
          uint64_t v13 = *(_BYTE *)(a2 + 80);
        }

        if ((v13 & 2) != 0)
        {
          *(_BYTE *)(v4 + 11) |= 0x80u;
          uint64_t v13 = *(_BYTE *)(a2 + 80);
        }

        if ((v13 & 4) != 0)
        {
LABEL_61:
          unsigned int v10 = 15LL;
          goto LABEL_40;
        }

        return (id)v4;
      case 0x11235816uLL:
        v3->_voucherIdentifier = *(void *)(a2 + 48);
        v3->_userTimeInNs = *(void *)(a2 + 56);
        v3->_systemTimeInNs = *(void *)(a2 + 64);
        v3->_state = *(_DWORD *)(a2 + 72);
        -[SAThreadState setBasePriority:]((int *)v3, *(__int16 *)(a2 + 80));
        -[SAThreadState setScheduledPriority:]((int *)v4, *(__int16 *)(a2 + 82));
        *(_DWORD *)(v4 + 36) = *(_DWORD *)(a2 + 76);
        *(_BYTE *)(v4 + 24) = *(_BYTE *)(a2 + 87);
        -[SAThreadState setThreadQos:](v4, *(unsigned __int8 *)(a2 + 84));
        -[SAThreadState setThreadRequestedQos:](v4, *(unsigned __int8 *)(a2 + 85));
        -[SAThreadState setThreadRequestedQosOverride:](v4, *(unsigned __int8 *)(a2 + 86));
        *(_BYTE *)(v4 + 21) |= 0x38u;
        uint64_t v6 = *(void *)(a2 + 88);
        if ((v6 & 1) != 0)
        {
          *(_BYTE *)(v4 + 11) |= 0x40u;
          uint64_t v6 = *(void *)(a2 + 88);
          if ((v6 & 2) == 0)
          {
LABEL_56:
            if ((v6 & 4) == 0) {
              goto LABEL_57;
            }
            goto LABEL_64;
          }
        }

        else if ((v6 & 2) == 0)
        {
          goto LABEL_56;
        }

        *(_BYTE *)(v4 + 11) |= 0x80u;
        uint64_t v6 = *(void *)(a2 + 88);
        if ((v6 & 4) == 0)
        {
LABEL_57:
          if ((v6 & 0x10) == 0) {
            goto LABEL_38;
          }
LABEL_65:
          *(_BYTE *)(v4 + 15) |= 0x80u;
          uint64_t v6 = *(void *)(a2 + 88);
          goto LABEL_38;
        }

    if ((a2 & 2) == 0)
    {
      LODWORD(v15) = a2 & 0x7F8;
      if ((a2 & 0x7F8) == 0) {
        goto LABEL_59;
      }
      goto LABEL_45;
    }

  return v21;
}

      *__error() = v15;
      return 1LL;
    }

    uint64_t v12 = *(void **)(a1 + 8);
    if (!v12)
    {
      uint64_t v15 = *__error();
      _sa_logt();
      uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        v57 = [*(id *)(a1 + 16) callTreeAggregation];
        *(_DWORD *)buf = 134217984;
        *(void *)&uint8_t buf[4] = v57;
        _os_log_error_impl( &dword_186C92000,  v16,  OS_LOG_TYPE_ERROR,  "unknown swiftAsyncCallTreeAggregation %llu",  buf,  0xCu);
      }

      goto LABEL_27;
    }

    v93 = [*(id *)(a1 + 16) callTreeAggregation];
    uint64_t v13 = @"unknown swiftAsyncCallTreeAggregation %llu";
  }

  uint64_t v14 = v12;
LABEL_21:
  objc_msgSend(v14, "printWithFormat:", v13, v93);
  return 1LL;
}

    a1 = 1LL;
  }

LABEL_110:
                  if (!flatbuffers::Table::VerifyOffset(v37, (const flatbuffers::Verifier *)&v499, 0xEu)) {
                    goto LABEL_18;
                  }
                  v49 = (unsigned __int16 *)((char *)v37 - *(int *)v37);
                  if (*v49 >= 0xFu)
                  {
                    unsigned int v50 = v49[7];
                    if (v50)
                    {
                      unsigned int v51 = (const unsigned __int8 *)v37 + v50 + *(unsigned int *)((char *)v37 + v50);
                      if (!flatbuffers::Verifier::VerifyTableStart((flatbuffers::Verifier *)&v499, v51)) {
                        goto LABEL_18;
                      }
                      int v52 = &v51[-*(int *)v51];
                      int v53 = *(unsigned __int16 *)v52;
                      if (v53 >= 5)
                      {
                        if (*((_WORD *)v52 + 2)
                          && (v500 < 9 || v500 - 8 < &v51[*((unsigned __int16 *)v52 + 2)]
                                                   - (const unsigned __int8 *)v499))
                        {
                          goto LABEL_18;
                        }

                        if (v53 >= 7)
                        {
                          int v54 = *((unsigned __int16 *)v52 + 3);
                          if (v54)
                          {
                          }
                        }
                      }

                      LODWORD(v501) = v501 - 1;
                    }
                  }

                  LODWORD(v501) = v501 - 1;
                }
              }

LABEL_124:
              if (!flatbuffers::Table::VerifyOffset(v486, (const flatbuffers::Verifier *)&v499, 8u)) {
                goto LABEL_18;
              }
              v55 = (unsigned __int16 *)((char *)v486 - *(int *)v486);
              if (*v55 >= 9u)
              {
                v56 = v55[4];
                if (v56)
                {
                  if (!flatbuffers::Verifier::VerifyVectorOrString( (flatbuffers::Verifier *)&v499,  (const unsigned __int8 *)v486 + v56 + *(unsigned int *)((char *)v486 + v56),  4uLL,  0LL)) {
                    goto LABEL_18;
                  }
                  v57 = (unsigned __int16 *)((char *)v486 - *(int *)v486);
                  if (*v57 >= 9u)
                  {
                    unsigned int v58 = v57[4];
                    if (v58)
                    {
                      v59 = *(unsigned int *)((char *)v486 + v58);
                      v427 = (_DWORD *)((char *)v486 + v58 + v59);
                      if (*v427)
                      {
                        unsigned int v60 = 0LL;
                        v437 = &src[(void)v476 + v59 + v58];
                        v434 = &src[(void)v473 + v58 + v59];
                        while (1)
                        {
                          v430 = v60;
                          unsigned int v61 = (const unsigned __int8 *)&v427[v60 + 1];
                          v416 = *(unsigned int *)v61;
                          v482 = (flatbuffers::Table *)&v61[v416];
                          if (!flatbuffers::Verifier::VerifyTableStart((flatbuffers::Verifier *)&v499, &v61[v416])) {
                            goto LABEL_18;
                          }
                          v441 = (unsigned __int16 *)((char *)v482 - *(int *)v482);
                          int v62 = *v441;
                          if (v62 >= 5
                            && v441[2]
                            && (v500 < 2 || v500 - 1 < (flatbuffers::Table *)((char *)v482 + v441[2]) - v499))
                          {
                            goto LABEL_18;
                          }

                          if (!flatbuffers::Table::VerifyOffset(v482, (const flatbuffers::Verifier *)&v499, 6u)) {
                            goto LABEL_18;
                          }
                          if (v62 < 7) {
                            break;
                          }
                          if (!v441[3]) {
                            goto LABEL_142;
                          }
                          int v63 = (flatbuffers::Table *)((char *)v482 + v441[3]
                                                                    + *(unsigned int *)((char *)v482 + v441[3]));
LABEL_143:
                          if (v441[2]
                            && v63
                            && *((_BYTE *)v482 + v441[2]) == 1
                            && !FlatbufferSymbols::MachoMetadata::Verify(v63, (flatbuffers::Verifier *)&v499))
                          {
                            goto LABEL_18;
                          }

LABEL_268:
              if (!flatbuffers::Table::VerifyOffset(v486, (const flatbuffers::Verifier *)&v499, 0xAu)) {
                goto LABEL_18;
              }
              tm v105 = (unsigned __int16 *)((char *)v486 - *(int *)v486);
              if (*v105 >= 0xBu)
              {
                v106 = v105[5];
                if (v106)
                {
                  if (!flatbuffers::Verifier::VerifyVectorOrString( (flatbuffers::Verifier *)&v499,  (const unsigned __int8 *)v486 + v106 + *(unsigned int *)((char *)v486 + v106),  4uLL,  0LL)) {
                    goto LABEL_18;
                  }
                  uint64_t v107 = (unsigned __int16 *)((char *)v486 - *(int *)v486);
                  if (*v107 >= 0xBu)
                  {
                    v108 = v107[5];
                    if (v108)
                    {
                      v109 = (flatbuffers::Table *)*(unsigned int *)((char *)v486 + v108);
                      v413 = (char *)v486 + v108;
                      if (*(_DWORD *)((char *)v109 + (void)v486 + v108))
                      {
                        v428 = 0LL;
                        v438 = &src[(void)v469 + v108];
                        v110 = &src[v108];
                        v111 = (flatbuffers::Table *)&v110[(void)obj];
                        v435 = (char *)&v110[(void)v476];
                        v483 = v109;
                        do
                        {
                          v487 = v111;
                          v112 = (char *)v109 + (void)v111;
                          srca = (_BYTE *)*(unsigned int *)((char *)v109 + (void)v111);
                          v431 = (unsigned __int8 *)v109 + (void)v111 + (unint64_t)srca;
                          if (!flatbuffers::Verifier::VerifyTableStart((flatbuffers::Verifier *)&v499, v431)) {
                            goto LABEL_18;
                          }
                          v423 = (flatbuffers::Table *)*(int *)((char *)v487 + (unint64_t)&srca[(void)v483]);
                          v443 = srca - (_BYTE *)v423;
                          v113 = *(unsigned __int16 *)&v112[srca - (_BYTE *)v423];
                          if (v113 >= 5
                            && *(_WORD *)((char *)v483 + (void)v487 + v443 + 4)
                            && (v500 < 2
                             || (const unsigned __int8 *)(v500 - 1) < &v438[(void)v483
                                                                          + &srca[*(unsigned __int16 *)((char *)v483 + (void)v487 + v443 + 4)]
                                                                          - (_BYTE *)v499]))
                          {
                            goto LABEL_18;
                          }

                          if (!flatbuffers::Table::VerifyOffset( (flatbuffers::Table *)v431,  (const flatbuffers::Verifier *)&v499,  6u)) {
                            goto LABEL_18;
                          }
                          if (v113 < 7)
                          {
                            if (v113 < 5) {
                              goto LABEL_297;
                            }
                            v117 = 0LL;
                            v114 = v483;
                            v115 = v487;
                          }

                          else
                          {
                            v114 = v483;
                            v115 = v487;
                            if (*(_WORD *)((char *)v483 + (void)v487 + v443 + 6))
                            {
                              v116 = &srca[*(unsigned __int16 *)((char *)v483 + (void)v487 + v443 + 6)];
                              v117 = (flatbuffers::Table *)((char *)v483
                                                          + (void)v487
                                                          + (unint64_t)&v116[*(unsigned int *)((char *)v487 + (unint64_t)&v116[(void)v483])]);
                            }

                            else
                            {
                              v117 = 0LL;
                            }
                          }

                          v118 = -(uint64_t)v423;
                          if (*(_WORD *)((char *)v114 + (void)v115 + v443 + 4)
                            && v117
                            && *((_BYTE *)v115
                               + (unint64_t)&srca[*(unsigned __int16 *)((char *)v114 + (void)v115 + v443 + 4)
                                                       + (void)v114]) == 1)
                          {
                            if (!FlatbufferSymbols::DyldSharedCacheMetadata::Verify( v117,  (flatbuffers::Verifier *)&v499)) {
                              goto LABEL_18;
                            }
                            v119 = *(int *)((char *)v487 + (unint64_t)&srca[(void)v483]);
                            v118 = -v119;
                            v113 = *(unsigned __int16 *)((char *)v487 + (unint64_t)&srca[(void)v483 - v119]);
                          }

                          if (v113 >= 9)
                          {
                            v120 = *(unsigned __int16 *)&v435[(unint64_t)&srca[v118 + (void)v483]];
                            if (v120)
                            {
                              if (v500 < 9
                                || (const unsigned __int8 *)(v500 - 8) < &v438[(void)v483
                                                                             + &srca[v120]
                                                                             - (_BYTE *)v499])
                              {
                                goto LABEL_18;
                              }
                            }
                          }

LABEL_297:
                          LODWORD(v501) = v501 - 1;
                          v109 = v483;
                          v438 += 4;
                          v111 = (flatbuffers::Table *)((char *)v487 + 4);
                          v435 += 4;
                          ++v428;
                        }

                        while (v428 < *(unsigned int *)((char *)v483 + (void)v413));
                      }
                    }
                  }
                }
              }

              LODWORD(v501) = v501 - 1;
              int v32 = v453 + 1;
              v473 += 4;
              v476 += 4;
              id obj = (char *)obj + 4;
              v469 += 4;
            }

            while (v453 + 1 < (unint64_t)*(unsigned int *)log);
          }
        }
      }
    }
  }

  if (!flatbuffers::Table::VerifyOffset((flatbuffers::Table *)&v18[v25], (const flatbuffers::Verifier *)&v499, 6u)) {
    goto LABEL_18;
  }
  v121 = &v26[-*(int *)v26];
  if (*(unsigned __int16 *)v121 >= 7u)
  {
    v122 = *((unsigned __int16 *)v121 + 3);
    if (v122)
    {
      if (!flatbuffers::Verifier::VerifyVectorOrString( (flatbuffers::Verifier *)&v499,  &v26[v122 + *(unsigned int *)&v26[v122]],  4uLL,  0LL)) {
        goto LABEL_18;
      }
      v123 = &v26[-*(int *)v26];
      if (*(unsigned __int16 *)v123 >= 7u)
      {
        v124 = *((unsigned __int16 *)v123 + 3);
        if (v124)
        {
          v125 = *(unsigned int *)&v26[v124];
          v470 = &v26[v124];
          if (*(_DWORD *)&v26[v124 + v125])
          {
            v477 = 0LL;
            v484 = (flatbuffers::Table *)&v18[v25 + 4 + v124];
            v126 = &v26[v124];
            v488 = (flatbuffers::Table *)*(unsigned int *)&v26[v124];
            do
            {
              v127 = &v126[v125];
              v128 = *(unsigned int *)&v126[v125 + 4];
              v129 = (unsigned __int8 *)&v126[v125 + 4 + v128];
              if (!flatbuffers::Verifier::VerifyTableStart((flatbuffers::Verifier *)&v499, v129)) {
                goto LABEL_18;
              }
              v474 = v128 - *(int *)&v127[v128 + 4];
              v130 = *(unsigned __int16 *)&v127[v474 + 4];
              if (v130 >= 5
                && *(_WORD *)((char *)v488 + (void)v126 + v474 + 8)
                && (v500 < 5
                 || (flatbuffers::Table *)(v500 - 4) < (flatbuffers::Table *)((char *)v484
                                                                            + (void)v488
                                                                            + v128
                                                                            + *(unsigned __int16 *)((char *)v488
                                                                                                  + (void)v126
                                                                                                  + v474
                                                                                                  + 8)
                                                                            - (unint64_t)v499)))
              {
                goto LABEL_18;
              }

              if (!flatbuffers::Table::VerifyOffset( (flatbuffers::Table *)v129,  (const flatbuffers::Verifier *)&v499,  6u)) {
                goto LABEL_18;
              }
              if (v130 >= 7 && *(_WORD *)((char *)v488 + (void)v126 + v474 + 10))
              {
                v131 = v128 + *(unsigned __int16 *)((char *)v488 + (void)v126 + v474 + 10);
                v132 = (const unsigned __int8 *)v488
                     + (void)v126
                     + v131
              }

              else
              {
                v132 = 0LL;
              }

              if (!flatbuffers::Verifier::VerifyString((flatbuffers::Verifier *)&v499, v132)) {
                goto LABEL_18;
              }
              LODWORD(v501) = v501 - 1;
              v125 = (unint64_t)v488;
              ++v477;
              v484 = (flatbuffers::Table *)((char *)v484 + 4);
              v126 += 4;
            }

            while (v477 < *(unsigned int *)((char *)v488 + (void)v470));
          }
        }
      }
    }
  }

  LODWORD(v501) = v501 - 1;
  v133 = (unsigned int *)[v17 bytes];
  v134 = *v133;
  v135 = *(unsigned __int16 *)((char *)v133 + v134 - *(int *)((char *)v133 + v134) + 4);
  v136 = (unsigned int *)((char *)v133 + v134 + v135);
  v137 = *v136;
  v138 = (unsigned int *)((char *)v136 + v137);
  v140 = v138 + 1;
  v139 = *v138;
  if (!(_DWORD)v139) {
    goto LABEL_26;
  }
  srcb = v8 + 288;
  v485 = (flatbuffers::Table *)((char *)v133 + v135 + v134 + v137);
  v475 = &v140[v139];
  v478 = v138 + 3;
  while (1)
  {
    v141 = *v140;
    v142 = *(int *)((char *)v140 + v141);
    v143 = -v142;
    v489 = (flatbuffers::Table *)((char *)v140 + v141);
    v144 = (unsigned __int16 *)((char *)v140 + v141 - v142);
    v145 = *v144;
    if (v145 >= 5)
    {
      if (v144[2])
      {
        if (v145 >= 7 && *((_BYTE *)v489 + v144[2]) == 1)
        {
          v147 = v144[3];
          if (v147) {
            break;
          }
        }
      }
    }

LABEL_498:
    v269 = (unsigned __int16 *)((char *)v489 + v143);
    v270 = *v269;
    if (v270 < 5 || !v269[2]) {
      goto LABEL_516;
    }
    if (v270 < 7 || *((_BYTE *)v489 + v269[2]) != 3) {
      goto LABEL_516;
    }
    v272 = v269[3];
    if (!v272) {
      goto LABEL_516;
    }
    v273 = (char *)v489 + v272 + *(unsigned int *)((char *)v489 + v272);
    v274 = &v273[-*(int *)v273];
    if (*(unsigned __int16 *)v274 >= 5u)
    {
      v275 = *((unsigned __int16 *)v274 + 2);
      if (v275)
      {
        uuid_parse(&v273[v275 + 4 + *(unsigned int *)&v273[v275]], uu);
        if (uuid_is_null(uu))
        {
          if (_MergedGlobals_4[0] == 1)
          {
            v276 = *__error();
            _sa_logt();
            v277 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v277, OS_LOG_TYPE_DEBUG))
            {
              v314 = v273;
              [v8 name];
              v315 = (void *)objc_claimAutoreleasedReturnValue();
              v316 = [v8 pid];
              v317 = &v314[-*(int *)v314];
              if (*(unsigned __int16 *)v317 < 5u)
              {
                v318 = 0LL;
              }

              else
              {
                v318 = *((unsigned __int16 *)v317 + 2);
                if (v318) {
                  v318 += (uint64_t)&v314[*(unsigned int *)&v314[v318]];
                }
              }

              *(_DWORD *)buf = 138412802;
              *(void *)&uint8_t buf[4] = v315;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v316;
              *(_WORD *)&buf[18] = 2082;
              *(void *)&buf[20] = v318 + 4;
              _os_log_debug_impl( &dword_186C92000,  v277,  OS_LOG_TYPE_DEBUG,  "SAKTSYM %@ [%d] Shared cache %{public}s with empty uuid",  buf,  0x1Cu);
            }

LABEL_515:
            *__error() = v276;
            goto LABEL_516;
          }

          goto LABEL_516;
        }

        v278 = (unsigned __int16 *)((char *)v489 - *(int *)v489);
        if (*v278 < 9u || (v279 = v278[4]) == 0)
        {
          if (_MergedGlobals_4[0] != 1) {
            goto LABEL_516;
          }
          v276 = *__error();
          _sa_logt();
          v277 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v277, OS_LOG_TYPE_DEBUG))
          {
            v321 = v273;
            [v8 name];
            v322 = (void *)objc_claimAutoreleasedReturnValue();
            v323 = [v8 pid];
            v324 = &v321[-*(int *)v321];
            if (*(unsigned __int16 *)v324 < 5u)
            {
              v325 = 0LL;
            }

            else
            {
              v325 = *((unsigned __int16 *)v324 + 2);
              if (v325) {
                v325 += (uint64_t)&v321[*(unsigned int *)&v321[v325]];
              }
            }

            *(_DWORD *)buf = 138412802;
            *(void *)&uint8_t buf[4] = v322;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v323;
            *(_WORD *)&buf[18] = 2082;
            *(void *)&buf[20] = v325 + 4;
            _os_log_debug_impl( &dword_186C92000,  v277,  OS_LOG_TYPE_DEBUG,  "SAKTSYM %@ [%d] Shared cache %{public}s with no symbol owners",  buf,  0x1Cu);
          }

          goto LABEL_515;
        }

        if (!*(_DWORD *)((char *)v489 + v279 + *(unsigned int *)((char *)v489 + v279)))
        {
          if (_MergedGlobals_4[0] != 1) {
            goto LABEL_516;
          }
          v292 = v273;
          v276 = *__error();
          _sa_logt();
          v277 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v277, OS_LOG_TYPE_DEBUG))
          {
            [v8 name];
            v340 = (void *)objc_claimAutoreleasedReturnValue();
            v341 = [v8 pid];
            v342 = &v292[-*(int *)v292];
            if (*(unsigned __int16 *)v342 < 5u)
            {
              v343 = 0LL;
            }

            else
            {
              v343 = *((unsigned __int16 *)v342 + 2);
              if (v343) {
                v343 += (uint64_t)&v292[*(unsigned int *)&v292[v343]];
              }
            }

            *(_DWORD *)buf = 138412802;
            *(void *)&uint8_t buf[4] = v340;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v341;
            *(_WORD *)&buf[18] = 2082;
            *(void *)&buf[20] = v343 + 4;
            _os_log_debug_impl( &dword_186C92000,  v277,  OS_LOG_TYPE_DEBUG,  "SAKTSYM %@ [%d] Shared cache %{public}s with zero symbol owners",  buf,  0x1Cu);
          }

          goto LABEL_515;
        }

        v456 = v273;
        v445 = v140;
        v493 = 0u;
        v494 = 0u;
        v491 = 0u;
        v492 = 0u;
        [*(id *)(a1 + 32) sharedCaches];
        objc = (id)objc_claimAutoreleasedReturnValue();
        v280 = [objc countByEnumeratingWithState:&v491 objects:v504 count:16];
        if (v280)
        {
          v472 = 0LL;
          v281 = *(void *)v492;
          do
          {
            for (i = 0LL; i != v280; ++i)
            {
              if (*(void *)v492 != v281) {
                objc_enumerationMutation(objc);
              }
              v283 = *(void **)(*((void *)&v491 + 1) + 8 * i);
              [v283 uuid];
              v284 = (void *)objc_claimAutoreleasedReturnValue();
              [v284 getUUIDBytes:buf];

              if (!uuid_compare(buf, uu))
              {
                v285 = v283;

                v472 = v285;
              }
            }

            v280 = [objc countByEnumeratingWithState:&v491 objects:v504 count:16];
          }

          while (v280);

          if (v472)
          {
            [v472 binaryLoadInfos];
            v286 = (void *)objc_claimAutoreleasedReturnValue();
            v287 = [v286 count] == 0;

            if (!v287)
            {
              if (_MergedGlobals_4[0] == 1)
              {
                v288 = *__error();
                _sa_logt();
                v289 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v289, OS_LOG_TYPE_DEBUG))
                {
                  [v8 name];
                  v355 = (void *)objc_claimAutoreleasedReturnValue();
                  v356 = [v8 pid];
                  [v472 debugDescription];
                  v357 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138412802;
                  *(void *)&uint8_t buf[4] = v355;
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v356;
                  *(_WORD *)&buf[18] = 2112;
                  *(void *)&buf[20] = v357;
                  _os_log_debug_impl( &dword_186C92000,  v289,  OS_LOG_TYPE_DEBUG,  "SAKTSYM %@ [%d] Already have load infos for %@",  buf,  0x1Cu);
                }

                *__error() = v288;
              }

LABEL_570:
              v140 = v445;
              goto LABEL_516;
            }

            v293 = 0;
LABEL_544:
            v294 = [v472 slide];
            if ((v293 & 1) != 0 || [v472 slidBaseAddress] == -1)
            {
              v302 = &v456[-*(int *)v456];
              if (*(unsigned __int16 *)v302 >= 0x15u && (v303 = *((unsigned __int16 *)v302 + 10)) != 0)
              {
                v304 = *(void *)&v456[v303];
                if (v304 == -1) {
                  v295 = -1LL;
                }
                else {
                  v295 = v304 + v294;
                }
              }

              else
              {
                v295 = -1LL;
              }
            }

            else
            {
              v295 = [v472 slidBaseAddress];
              v296 = &v456[-*(int *)v456];
              if (*(unsigned __int16 *)v296 >= 0x15u)
              {
                v297 = *((unsigned __int16 *)v296 + 10);
                if (v297)
                {
                  v298 = *(void *)&v456[v297];
                  if (v298 != -1)
                  {
                    v299 = [v472 slidBaseAddress];
                    if (v298 != [v472 slide] + v299)
                    {
                      v300 = *__error();
                      _sa_logt();
                      v301 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v301, OS_LOG_TYPE_FAULT))
                      {
                        v361 = [v472 debugDescription];
                        v362 = (void *)v361;
                        v363 = &v456[-*(int *)v456];
                        else {
                          v365 = -1LL;
                        }
                        *(_DWORD *)buf = 138412546;
                        *(void *)&uint8_t buf[4] = v361;
                        *(_WORD *)&buf[12] = 2048;
                        *(void *)&buf[14] = v365;
                        _os_log_fault_impl( &dword_186C92000,  v301,  OS_LOG_TYPE_FAULT,  "SAKTSYM kt says shared cache %@ has unslid base address 0x%llx",  buf,  0x16u);
                      }

                      *__error() = v300;
                    }
                  }
                }
              }
            }

            v305 = (unsigned __int16 *)((char *)v489 - *(int *)v489);
            if (*v305 >= 9u && (v306 = v305[4]) != 0) {
              v307 = (unsigned int *)((char *)v489 + v306 + *(unsigned int *)((char *)v489 + v306));
            }
            else {
              v307 = 0LL;
            }
            v308 = -[SASampleStore loadInfosForKTSymbolOwners:isKernelSpace:excludeRange:]( *(void *)(a1 + 32),  v307,  0,  0LL,  0LL);
            if ([v308 count])
            {
              uuidForBytes((uint64_t)uu);
              v309 = (void *)objc_claimAutoreleasedReturnValue();
              +[SASharedCache applyBinaryLoadInfos:sharedCacheUUID:slide:slidBaseAddress:]( (uint64_t)SASharedCache,  v308,  v309,  [v472 slide],  v295);

              if (_MergedGlobals_4[0] == 1)
              {
                v310 = *__error();
                _sa_logt();
                v311 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v311, OS_LOG_TYPE_DEBUG))
                {
                  [v8 name];
                  objd = (id)objc_claimAutoreleasedReturnValue();
                  v344 = [v8 pid];
                  v345 = &v456[-*(int *)v456];
                  else {
                    v347 = 0LL;
                  }
                  v359 = [v308 count];
                  v360 = (unsigned int *)((char *)v489 + *(unsigned __int16 *)((char *)v489 - *(int *)v489 + 8));
                  LODWORD(v360) = *(unsigned int *)((char *)v360 + *v360);
                  *(_DWORD *)buf = 138413314;
                  *(void *)&uint8_t buf[4] = objd;
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v344;
                  *(_WORD *)&buf[18] = 2080;
                  *(void *)&buf[20] = v347 + 4;
                  v507 = 2048;
                  v508 = v359;
                  v509 = 1024;
                  LODWORD(v510) = (_DWORD)v360;
                  _os_log_debug_impl( &dword_186C92000,  v311,  OS_LOG_TYPE_DEBUG,  "SAKTSYM %@ [%d] shared cache %s: added %lu load infos from %d symbol owners",  buf,  0x2Cu);
                }

                *__error() = v310;
              }
            }

            else if (_MergedGlobals_4[0] == 1)
            {
              v312 = *__error();
              _sa_logt();
              v313 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v313, OS_LOG_TYPE_DEBUG))
              {
                [v8 name];
                v351 = (void *)objc_claimAutoreleasedReturnValue();
                v352 = [v8 pid];
                v353 = &v456[-*(int *)v456];
                if (*(unsigned __int16 *)v353 < 5u)
                {
                  v354 = 0LL;
                }

                else
                {
                  v354 = *((unsigned __int16 *)v353 + 2);
                  if (v354) {
                    v354 += (uint64_t)&v456[*(unsigned int *)&v456[v354]];
                  }
                }

                v358 = (unsigned int *)((char *)v489 + *(unsigned __int16 *)((char *)v489 - *(int *)v489 + 8));
                LODWORD(v35_Block_object_dispose((const void *)(v1 - 88), 8) = *(unsigned int *)((char *)v358 + *v358);
                *(_DWORD *)buf = 138413058;
                *(void *)&uint8_t buf[4] = v351;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v352;
                *(_WORD *)&buf[18] = 2080;
                *(void *)&buf[20] = v354 + 4;
                v507 = 1024;
                LODWORD(v50_Block_object_dispose((const void *)(v1 - 88), 8) = (_DWORD)v358;
                _os_log_debug_impl( &dword_186C92000,  v313,  OS_LOG_TYPE_DEBUG,  "SAKTSYM %@ [%d] shared cache %s: no load infos from %d symbol owners",  buf,  0x22u);
              }

              *__error() = v312;
            }

            goto LABEL_570;
          }
        }

        else
        {
        }

        v472 = 0LL;
        v293 = 1;
        goto LABEL_544;
      }
    }

    if (_MergedGlobals_4[0] == 1)
    {
      v276 = *__error();
      _sa_logt();
      v277 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v277, OS_LOG_TYPE_DEBUG))
      {
        [v8 name];
        v290 = (void *)objc_claimAutoreleasedReturnValue();
        v291 = [v8 pid];
        *(_DWORD *)buf = 138412546;
        *(void *)&uint8_t buf[4] = v290;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v291;
        _os_log_debug_impl( &dword_186C92000,  v277,  OS_LOG_TYPE_DEBUG,  "SAKTSYM %@ [%d] Shared cache with no UUID",  buf,  0x12u);
      }

      goto LABEL_515;
    }

LABEL_516:
    ++v140;
    ++v478;
    v485 = (flatbuffers::Table *)((char *)v485 + 4);
    if (v140 == v475) {
      goto LABEL_26;
    }
  }

  v148 = (char *)v489 + v147 + *(unsigned int *)((char *)v489 + v147);
  v149 = &v148[-*(int *)v148];
  if (*(unsigned __int16 *)v149 < 7u
    || (v150 = *((unsigned __int16 *)v149 + 3)) == 0
    || (v151 = *(void *)&v148[v150], v151 == -1))
  {
    if (_MergedGlobals_4[0] == 1)
    {
      v161 = *__error();
      _sa_logt();
      v162 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v162, OS_LOG_TYPE_DEBUG))
      {
        [v8 name];
        v222 = (void *)objc_claimAutoreleasedReturnValue();
        v223 = [v8 pid];
        v224 = &v148[-*(int *)v148];
        if (*(unsigned __int16 *)v224 < 5u)
        {
          v225 = 0LL;
        }

        else
        {
          v225 = *((unsigned __int16 *)v224 + 2);
          if (v225) {
            v225 += (uint64_t)&v148[*(unsigned int *)&v148[v225]];
          }
        }

        *(_DWORD *)buf = 138412802;
        *(void *)&uint8_t buf[4] = v222;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v223;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = v225 + 4;
        _os_log_debug_impl( &dword_186C92000,  v162,  OS_LOG_TYPE_DEBUG,  "SAKTSYM %@ [%d] process %s missing pid",  buf,  0x1Cu);
      }

      *__error() = v161;
    }

    goto LABEL_516;
  }

  if ([v8 pid] == (_DWORD)v151)
  {
    v152 = &v148[-*(int *)v148];
    if (*(unsigned __int16 *)v152 >= 0xBu && (v153 = *((unsigned __int16 *)v152 + 5)) != 0)
    {
      uuid_parse(&v148[v153 + 4 + *(unsigned int *)&v148[v153]], uu);
      uuidForBytes((uint64_t)uu);
      v471 = (void *)objc_claimAutoreleasedReturnValue();
      [v8 mainBinary];
      v154 = (void *)objc_claimAutoreleasedReturnValue();
      v155 = v154 == 0LL;

      if (!v155)
      {
        [v8 mainBinary];
        v156 = (void *)objc_claimAutoreleasedReturnValue();
        [v156 uuid];
        v157 = (void *)objc_claimAutoreleasedReturnValue();
        v158 = [v157 isEqual:v471];

        if ((v158 & 1) == 0)
        {
          v159 = *__error();
          _sa_logt();
          v160 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v160, OS_LOG_TYPE_FAULT))
          {
            [v8 name];
            v490 = (flatbuffers::Table *)objc_claimAutoreleasedReturnValue();
            v328 = [v8 pid];
            [v8 mainBinary];
            obje = (id)objc_claimAutoreleasedReturnValue();
            [obje debugDescription];
            v329 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138413058;
            *(void *)&uint8_t buf[4] = v490;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v328;
            *(_WORD *)&buf[18] = 2112;
            *(void *)&buf[20] = v471;
            v507 = 2112;
            v508 = (uint64_t)v329;
            _os_log_fault_impl( &dword_186C92000,  v160,  OS_LOG_TYPE_FAULT,  "SAKTSYM %@ [%d] Mismatched main binary %@ with existing %@",  buf,  0x26u);
          }

          *__error() = v159;
          goto LABEL_516;
        }
      }
    }

    else
    {
      v471 = 0LL;
    }

    v444 = v140;
    v163 = (unsigned __int16 *)((char *)v489 - *(int *)v489);
    if (*v163 >= 0xBu && (v164 = v163[5]) != 0)
    {
      v165 = *(unsigned int *)((char *)v489 + v164);
      v166 = *(unsigned int *)((char *)v489 + v164 + v165);
      if ((_DWORD)v166)
      {
        v167 = 0LL;
        obja = (id)(4 * v166);
        v168 = (char *)v485 + v141 + v165 + v164;
        v414 = (char *)v478 + v141 + v164 + v165;
        loga = 1;
        while (1)
        {
          v169 = *(unsigned int *)((char *)v167 + (void)v168 + 8);
          v170 = (char *)v167 + (void)v168 + v169;
          v171 = v169 - *((int *)v170 + 2);
          v172 = (char *)v167 + v171 + (void)v168;
          v173 = *((unsigned __int16 *)v172 + 4);
          if (v173 >= 5)
          {
            v174 = *((unsigned __int16 *)v172 + 6);
            if (v174)
            {
              v175 = v168[v169 + 8 + v174 + (void)v167];
              v176 = v173 >= 7 && v175 == 1;
            }
          }

          if (_MergedGlobals_4[0] == 1)
          {
            v188 = *__error();
            _sa_logt();
            v189 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v189, OS_LOG_TYPE_DEBUG))
            {
              [v8 name];
              v191 = (void *)objc_claimAutoreleasedReturnValue();
              v192 = [v8 pid];
              *(_DWORD *)buf = 138412546;
              *(void *)&uint8_t buf[4] = v191;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v192;
              _os_log_debug_impl( &dword_186C92000,  v189,  OS_LOG_TYPE_DEBUG,  "SAKTSYM %@ [%d] No shared cache metadata",  buf,  0x12u);
            }

            goto LABEL_368;
          }

LABEL_370:
          v167 = (char *)v167 + 4;
          if (obja == v167) {
            goto LABEL_406;
          }
        }

        v454 = *(unsigned __int16 *)((char *)v167 + v171 + (void)v168 + 14);
        v177 = *(unsigned int *)&v168[v169 + 8 + v454 + (void)v167];
        v178 = v169 + v454 + v177;
        v179 = *(int *)((char *)v167 + (void)v168 + v178 + 8);
        v180 = (char *)v167 + (void)v168 + v178 - v179;
        v181 = *((unsigned __int16 *)v180 + 4);
        if (v181 >= 5 && *((_WORD *)v180 + 6))
        {
          v420 = *(unsigned int *)&v168[v169 + 8 + v454 + v177 + (void)v167 + *((unsigned __int16 *)v180 + 6)];
          v424 = (flatbuffers::Table *)*((unsigned __int16 *)v180 + 6);
          if (v173 <= 8
            || (v182 = *(unsigned __int16 *)((char *)v167 + v171 + (void)v168 + 16)) == 0
            || (v183 = *(void *)&v168[v169 + 8 + v182 + (void)v167], v183 == -1))
          {
            if (_MergedGlobals_4[0] == 1)
            {
              v193 = *(unsigned int *)&v168[v169 + 8 + v454 + (void)v167];
              v194 = *__error();
              _sa_logt();
              v410 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v410, OS_LOG_TYPE_DEBUG))
              {
                [v8 name];
                oslogc = (os_log_t)objc_claimAutoreleasedReturnValue();
                v202 = [v8 pid];
                *(_DWORD *)buf = 138412802;
                *(void *)&uint8_t buf[4] = oslogc;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v202;
                *(_WORD *)&buf[18] = 2080;
                *(void *)&buf[20] = (char *)v167 + (void)v414 + (unint64_t)v424 + v169 + v454 + v193 + v420;
                _os_log_debug_impl( &dword_186C92000,  v410,  OS_LOG_TYPE_DEBUG,  "SAKTSYM %@ [%d] Shared cache %s with no slide",  buf,  0x1Cu);
              }

              *__error() = v194;
            }

            goto LABEL_370;
          }

          v409 = *(unsigned int *)&v168[v169 + 8 + v454 + (void)v167];
          if (v181 < 0x15
            || (v184 = v169 + v454 + v177,
                (v185 = *(unsigned __int16 *)((char *)v167 + (void)v168 + v184 - v179 + 28)) == 0)
            || (v186 = *(void *)&v168[v184 + 8 + (void)v167 + v185], v186 == -1))
          {
            if (_MergedGlobals_4[0] == 1)
            {
              v195 = *__error();
              _sa_logt();
              osloga = (os_log_s *)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(osloga, OS_LOG_TYPE_DEBUG))
              {
                [v8 name];
                v403 = (void *)objc_claimAutoreleasedReturnValue();
                v206 = [v8 pid];
                v207 = &v168[v169 - *((int *)v170 + 2) + (void)v167];
                else {
                  v209 = -1LL;
                }
                *(_DWORD *)buf = 138413058;
                *(void *)&uint8_t buf[4] = v403;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v206;
                *(_WORD *)&buf[18] = 2080;
                *(void *)&buf[20] = (char *)v167 + (void)v414 + (unint64_t)v424 + v169 + v454 + v409 + v420;
                v507 = 2048;
                v508 = v209;
                _os_log_debug_impl( &dword_186C92000,  osloga,  OS_LOG_TYPE_DEBUG,  "SAKTSYM %@ [%d] Shared cache %s with slide 0x%llx has no unslid base address",  buf,  0x26u);
              }

              *__error() = v195;
            }

            v187 = -1LL;
          }

          else
          {
            v187 = v186 + v183;
          }

          oslogb = (os_log_t)v187;
          if ((loga & 1) != 0)
          {
            uuid_parse(&v168[(unint64_t)v424 + v169 + v454 + v409 + (void)v167 + 12 + v420], buf);
            v196 = &v168[v169 - *((int *)v170 + 2) + (void)v167];
            else {
              v198 = -1LL;
            }
            v199 =  -[SASampleStore applySharedCacheToTask:uuid:slide:slidBaseAddress:]( *(void *)(a1 + 32),  v8,  (uint64_t)buf,  v198,  (uint64_t)oslogb);
            loga = 0;
            goto LABEL_370;
          }

          v188 = *__error();
          _sa_logt();
          logb = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(logb, OS_LOG_TYPE_FAULT))
          {
            [v8 name];
            v402 = (void *)objc_claimAutoreleasedReturnValue();
            v399 = [v8 pid];
            v203 = &v168[v169 - *((int *)v170 + 2) + (void)v167];
            else {
              v205 = -1LL;
            }
            [v8 sharedCache];
            v400 = (void *)objc_claimAutoreleasedReturnValue();
            v210 = [v400 debugDescription];
            *(_DWORD *)buf = 138413570;
            *(void *)&uint8_t buf[4] = v402;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v399;
            *(_WORD *)&buf[18] = 2080;
            *(void *)&buf[20] = (char *)v167 + (void)v414 + (unint64_t)v424 + v169 + v454 + v409 + v420;
            v507 = 2048;
            v508 = v205;
            v509 = 2048;
            v510 = oslogb;
            v511 = 2112;
            v211 = (void *)v210;
            v512 = v210;
            _os_log_fault_impl( &dword_186C92000,  logb,  OS_LOG_TYPE_FAULT,  "SAKTSYM %@ [%d] Ignoring second shared cache %s slide 0x%llx slideBaseAddress 0x%llx (existing %@)",  buf,  0x3Au);
          }

          v190 = __error();
          loga = 0;
        }

        else
        {
          if (_MergedGlobals_4[0] != 1) {
            goto LABEL_370;
          }
          v188 = *__error();
          _sa_logt();
          v189 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v189, OS_LOG_TYPE_DEBUG))
          {
            [v8 name];
            v200 = (void *)objc_claimAutoreleasedReturnValue();
            v201 = [v8 pid];
            *(_DWORD *)buf = 138412546;
            *(void *)&uint8_t buf[4] = v200;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v201;
            _os_log_debug_impl( &dword_186C92000,  v189,  OS_LOG_TYPE_DEBUG,  "SAKTSYM %@ [%d] No shared cache UUID",  buf,  0x12u);
          }

LABEL_368:
          v190 = __error();
        }

        *v190 = v188;
        goto LABEL_370;
      }
    }

    else if (_MergedGlobals_4[0] == 1)
    {
      v212 = *__error();
      _sa_logt();
      v213 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v213, OS_LOG_TYPE_DEBUG))
      {
        [v8 name];
        v226 = (void *)objc_claimAutoreleasedReturnValue();
        v227 = [v8 pid];
        *(_DWORD *)buf = 138412546;
        *(void *)&uint8_t buf[4] = v226;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v227;
        _os_log_debug_impl(&dword_186C92000, v213, OS_LOG_TYPE_DEBUG, "SAKTSYM %@ [%d] No shared cache", buf, 0x12u);
      }

      *__error() = v212;
    }

LABEL_406:
    objc_copyStruct(buf, srcb, 8LL, 1, 0);
    if (!*(void *)buf)
    {
      v214 = (unsigned __int16 *)((char *)v489 - *(int *)v489);
      v215 = *v214;
      if (v215 >= 5)
      {
        if (v214[2])
        {
          if (v215 >= 7 && *((_BYTE *)v489 + v214[2]) == 2)
          {
            v217 = v214[3];
            if (v217)
            {
              v218 = (int *)((char *)v489 + v217 + *(unsigned int *)((char *)v489 + v217));
              v219 = (unsigned __int16 *)((char *)v218 - *v218);
              v220 = *v219;
              if (v220 < 0xD)
              {
                v221 = 0LL;
              }

              else
              {
                v221 = (int *)v219[6];
                if (v219[6]) {
                  v221 = (int *)((char *)v221 + (void)v218 + *(unsigned int *)((char *)v221 + (void)v218));
                }
              }

              v228 = (unsigned __int16 *)((char *)v221 - *v221);
              if (*v228 >= 7u && (v229 = v228[3]) != 0) {
                v230 = *(unsigned int *)((char *)v221 + v229);
              }
              else {
                v230 = 0LL;
              }
              if (v220 >= 0xD && (v231 = v219[6]) != 0) {
                v232 = (int *)((char *)v218 + v231 + *(unsigned int *)((char *)v218 + v231));
              }
              else {
                v232 = 0LL;
              }
              v233 = (unsigned __int16 *)((char *)v232 - *v232);
              if (*v233 >= 9u && (v234 = v233[4]) != 0) {
                v235 = *(int *)((char *)v232 + v234);
              }
              else {
                v235 = 0;
              }
              *(void *)buf = v230 | ((unint64_t)(v235 & 0xFFFFFF) << 32);
              objc_copyStruct(srcb, buf, 8LL, 1, 0);
              if (_MergedGlobals_4[0] == 1)
              {
                v236 = *__error();
                _sa_logt();
                v237 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v237, OS_LOG_TYPE_DEBUG))
                {
                  [v8 name];
                  v348 = (void *)objc_claimAutoreleasedReturnValue();
                  v349 = [v8 pid];
                  objc_copyStruct(uu, srcb, 8LL, 1, 0);
                  FamilyName = CSArchitectureGetFamilyName();
                  *(_DWORD *)buf = 138412802;
                  *(void *)&uint8_t buf[4] = v348;
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v349;
                  *(_WORD *)&buf[18] = 2082;
                  *(void *)&buf[20] = FamilyName;
                  _os_log_debug_impl( &dword_186C92000,  v237,  OS_LOG_TYPE_DEBUG,  "SAKTSYM %@ [%d] Applied architecture %{public}s",  buf,  0x1Cu);
                }

                *__error() = v236;
              }
            }
          }
        }
      }
    }

    v238 = (unsigned __int16 *)((char *)v489 - *(int *)v489);
    if (*v238 < 9u || !v238[4])
    {
      if (_MergedGlobals_4[0] == 1)
      {
        v244 = *__error();
        _sa_logt();
        v245 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v245, OS_LOG_TYPE_DEBUG))
        {
          [v8 name];
          v319 = (void *)objc_claimAutoreleasedReturnValue();
          v320 = [v8 pid];
          *(_DWORD *)buf = 138412546;
          *(void *)&uint8_t buf[4] = v319;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v320;
          _os_log_debug_impl(&dword_186C92000, v245, OS_LOG_TYPE_DEBUG, "SAKTSYM %@ [%d] No symbol owners", buf, 0x12u);
        }

        v246 = 0LL;
        *__error() = v244;
      }

      else
      {
        v246 = 0LL;
      }

      goto LABEL_479;
    }

    [v8 sharedCache];
    v239 = (void *)objc_claimAutoreleasedReturnValue();
    v240 = v239;
    v421 = v239;
    if (!v239 || [v239 startAddress] == -1)
    {
      v241 = 0LL;
      v243 = 0LL;
    }

    else
    {
      v241 = [v240 startAddress];
      v242 = [v240 endAddress];
      v243 = v242 - [v240 startAddress];
    }

    v246 = v471;
    v247 = (unsigned __int16 *)((char *)v489 - *(int *)v489);
    if (*v247 >= 9u && (v248 = v247[4]) != 0) {
      v249 = (unsigned int *)((char *)v489 + v248 + *(unsigned int *)((char *)v489 + v248));
    }
    else {
      v249 = 0LL;
    }
    -[SASampleStore loadInfosForKTSymbolOwners:isKernelSpace:excludeRange:]( *(void *)(a1 + 32),  v249,  [v8 pid] == 0,  v241,  v243);
    v250 = (flatbuffers::Table *)objc_claimAutoreleasedReturnValue();
    v425 = v250;
    if (-[SATask addImageInfos:]((uint64_t)v8, v250))
    {
      if (_MergedGlobals_4[0])
      {
        v251 = *__error();
        _sa_logt();
        v252 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v252, OS_LOG_TYPE_DEBUG))
        {
          [v8 name];
          v330 = (void *)objc_claimAutoreleasedReturnValue();
          v331 = [v8 pid];
          v332 = -[flatbuffers::Table count](v425, "count");
          v333 = (unsigned int *)((char *)v489 + *(unsigned __int16 *)((char *)v489 - *(int *)v489 + 8));
          LODWORD(v333) = *(unsigned int *)((char *)v333 + *v333);
          *(_DWORD *)buf = 138413058;
          *(void *)&uint8_t buf[4] = v330;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v331;
          *(_WORD *)&buf[18] = 2048;
          *(void *)&buf[20] = v332;
          v507 = 1024;
          LODWORD(v50_Block_object_dispose((const void *)(v1 - 88), 8) = (_DWORD)v333;
          _os_log_debug_impl( &dword_186C92000,  v252,  OS_LOG_TYPE_DEBUG,  "SAKTSYM %@ [%d] added %lu load infos from %d symbol owners",  buf,  0x22u);
        }

LABEL_463:
        *__error() = v251;
        v246 = v471;
        v250 = v425;
      }
    }

    else if (_MergedGlobals_4[0])
    {
      v251 = *__error();
      _sa_logt();
      v252 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v252, OS_LOG_TYPE_DEBUG))
      {
        [v8 name];
        v334 = (void *)objc_claimAutoreleasedReturnValue();
        v335 = [v8 pid];
        v336 = -[flatbuffers::Table count](v425, "count");
        v337 = (unsigned int *)((char *)v489 + *(unsigned __int16 *)((char *)v489 - *(int *)v489 + 8));
        LODWORD(v337) = *(unsigned int *)((char *)v337 + *v337);
        *(_DWORD *)buf = 138413058;
        *(void *)&uint8_t buf[4] = v334;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v335;
        *(_WORD *)&buf[18] = 2048;
        *(void *)&buf[20] = v336;
        v507 = 1024;
        LODWORD(v50_Block_object_dispose((const void *)(v1 - 88), 8) = (_DWORD)v337;
        _os_log_debug_impl( &dword_186C92000,  v252,  OS_LOG_TYPE_DEBUG,  "SAKTSYM %@ [%d] %lu load infos from %d symbol owners (nothing new)",  buf,  0x22u);
      }

      goto LABEL_463;
    }

    if (v246)
    {
      v497 = 0u;
      v498 = 0u;
      v495 = 0u;
      v496 = 0u;
      logc = v250;
      v253 = -[os_log_s countByEnumeratingWithState:objects:count:]( logc,  "countByEnumeratingWithState:objects:count:",  &v495,  v505,  16LL);
      if (v253)
      {
        objb = *(id *)v496;
LABEL_467:
        v455 = v253;
        v254 = 0LL;
        while (1)
        {
          if (*(id *)v496 != objb) {
            objc_enumerationMutation(logc);
          }
          v255 = *(void **)(*((void *)&v495 + 1) + 8 * v254);
          [v255 binary];
          v256 = (void *)objc_claimAutoreleasedReturnValue();
          [v256 uuid];
          v257 = (void *)objc_claimAutoreleasedReturnValue();
          v258 = [v257 isEqual:v471];

          if (v258) {
            break;
          }
          if (v455 == ++v254)
          {
            v253 = -[os_log_s countByEnumeratingWithState:objects:count:]( logc,  "countByEnumeratingWithState:objects:count:",  &v495,  v505,  16LL);
            if (v253) {
              goto LABEL_467;
            }
            goto LABEL_476;
          }
        }

        [v255 binary];
        v259 = (void *)objc_claimAutoreleasedReturnValue();
        [v259 path];
        v246 = (void *)objc_claimAutoreleasedReturnValue();

        if ([v246 isAbsolutePath]) {
          goto LABEL_477;
        }
      }

LABEL_476:
      v246 = 0LL;
LABEL_477:

      v250 = v425;
    }

LABEL_479:
    if (!v471)
    {
      if (_MergedGlobals_4[0] == 1)
      {
        v267 = *__error();
        _sa_logt();
        v268 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v268, OS_LOG_TYPE_DEBUG))
        {
          [v8 name];
          objg = (id)objc_claimAutoreleasedReturnValue();
          v326 = [v8 pid];
          [v8 mainBinaryLoadInfo];
          v457 = (void *)objc_claimAutoreleasedReturnValue();
          [v457 debugDescription];
          v327 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412802;
          *(void *)&uint8_t buf[4] = objg;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v326;
          *(_WORD *)&buf[18] = 2112;
          *(void *)&buf[20] = v327;
          _os_log_debug_impl( &dword_186C92000,  v268,  OS_LOG_TYPE_DEBUG,  "SAKTSYM %@ [%d] No main binary (assuming %@)",  buf,  0x1Cu);
        }

        *__error() = v267;
      }

      goto LABEL_497;
    }
    v260 = +[SABinary binaryWithUUID:absolutePath:](&OBJC_CLASS___SABinary, "binaryWithUUID:absolutePath:", v471, v246);
    if ([v8 pid])
    {
      [v8 mainBinary];
      v261 = (void *)objc_claimAutoreleasedReturnValue();
      v262 = v261 == 0LL;

      if (!v262)
      {
        [v8 mainBinary];
        v263 = (void *)objc_claimAutoreleasedReturnValue();
        v264 = v263 == v260;

        if (v264) {
          goto LABEL_496;
        }
        -[SASampleStore setEndTime:]((uint64_t)v8, v260);
        if (_MergedGlobals_4[0] != 1) {
          goto LABEL_496;
        }
        v265 = *__error();
        _sa_logt();
        v266 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v266, OS_LOG_TYPE_DEBUG))
        {
          [v8 name];
          objf = (id)objc_claimAutoreleasedReturnValue();
          v458 = [v8 pid];
          [v260 debugDescription];
          v338 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412802;
          *(void *)&uint8_t buf[4] = objf;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v458;
          *(_WORD *)&buf[18] = 2112;
          *(void *)&buf[20] = v338;
          _os_log_debug_impl( &dword_186C92000,  v266,  OS_LOG_TYPE_DEBUG,  "SAKTSYM %@ [%d] Main binary non-lowest %@",  buf,  0x1Cu);
        }

        goto LABEL_495;
      }

      -[SASampleStore setEndTime:]((uint64_t)v8, v260);
      if (_MergedGlobals_4[0] == 1)
      {
        v265 = *__error();
        _sa_logt();
        v266 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v266, OS_LOG_TYPE_DEBUG))
        {
          [v8 name];
          objh = (id)objc_claimAutoreleasedReturnValue();
          v459 = [v8 pid];
          [v260 debugDescription];
          v339 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412802;
          *(void *)&uint8_t buf[4] = objh;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v459;
          *(_WORD *)&buf[18] = 2112;
          *(void *)&buf[20] = v339;
          _os_log_debug_impl(&dword_186C92000, v266, OS_LOG_TYPE_DEBUG, "SAKTSYM %@ [%d] Main binary %@", buf, 0x1Cu);
        }

LABEL_495:
        *__error() = v265;
      }
    }

    else
    {
      -[SASampleStore setEndTime:]((uint64_t)v8, v260);
    }

LABEL_496:
LABEL_497:
    v143 = -(uint64_t)*(int *)v489;
    v140 = v444;
    goto LABEL_498;
  }

  v372 = *__error();
  _sa_logt();
  v373 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v373, OS_LOG_TYPE_ERROR))
  {
    v374 = &v148[-*(int *)v148];
    else {
      v376 = -1;
    }
    v377 = [v8 debugDescription];
    v378 = [v377 UTF8String];
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)&uint8_t buf[4] = v376;
    *(_WORD *)&buf[8] = 2080;
    *(void *)&buf[10] = v378;
    _os_log_error_impl( &dword_186C92000,  v373,  OS_LOG_TYPE_ERROR,  "ktrace flatbuffer returned data for pid %d when asking for %s",  buf,  0x12u);
  }

  *__error() = v372;
  v379 = &v148[-*(int *)v148];
  else {
    LOBYTE(v381) = -1;
  }
  v382 = [v8 debugDescription];
  [v382 UTF8String];
  _SASetCrashLogMessage( 2328,  "ktrace flatbuffer returned data for pid %d when asking for %s",  v383,  v384,  v385,  v386,  v387,  v388,  v381);

  _os_crash();
  __break(1u);
}

void sub_186CD0BBC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, void *a40)
{
  _Unwind_Resume(a1);
}

void sub_186CD128C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

LABEL_105:
      ktrace_session_destroy();
      if ([v72 dataStyle] == 1 || !objc_msgSend(v72, "dataStyle"))
      {
        if ([v72 isEmpty])
        {
          if (v71)
          {
            v75 = @"No samples";
LABEL_118:
            v76 = *v71;
            *uint64_t v71 = (void *)v75;
          }

LABEL_103:
          uint64_t v12 = 0LL;
LABEL_124:

          _Block_object_dispose(&v281, 8);
          _Block_object_dispose(&v288, 8);
          goto LABEL_125;
        }
      }

      else
      {
        [v72 sampleTimestamps];
        int v73 = (void *)objc_claimAutoreleasedReturnValue();
        v74 = [v73 count] == 0;

        uint64_t v71 = v144;
        int v72 = v145;
        if (v74)
        {
          if (v144)
          {
            v75 = @"No PET samples";
            if (v143) {
              v75 = @"No stackshots";
            }
            goto LABEL_118;
          }

          goto LABEL_103;
        }
      }

      if (([v72 dataSource] & 2) != 0 && v139 && objc_msgSend(v140, "count"))
      {
        [v140 lastObject];
        unsigned int v77 = (void *)objc_claimAutoreleasedReturnValue();
        -[SASampleStore forwardFillFromLastStackshot:](v72, [v77 unsignedLongLongValue]);

        int v72 = v145;
      }

      [v72 postprocess];
      uint64_t v12 = 1LL;
      goto LABEL_124;
    }

    v102 = *(void *)(*((void *)&v281 + 1) + 24LL);
  }

  else
  {
    uint64_t v71 = v144;
    int v72 = v145;
    if (!v83) {
      goto LABEL_105;
    }
    v102 = 0LL;
  }

  if (v102 < [(id)v276[5] count])
  {
    [v140 objectAtIndexedSubscript:*(void *)(*((void *)&v281 + 1) + 24)];
    int v103 = (void *)objc_claimAutoreleasedReturnValue();
    time_t v104 = [v103 unsignedLongLongValue];
    tm v105 = *(void *)(*((void *)&v288 + 1) + 24LL);
    v106 = [v145 machTimebase];
    uint64_t v107 = 0LL;
    if ((_DWORD)v106)
    {
      if (HIDWORD(v106))
      {
        uint64_t v107 = v104 - v105;
        if ((_DWORD)v106 != HIDWORD(v106)) {
          uint64_t v107 = __udivti3();
        }
      }
    }

    if ((double)(unint64_t)v107 / 1000000000.0 <= 0.001) {
      uint64_t v100 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"KTrace data ended %fs before the stackshot. Data will be missing/incomplete for any threads/tasks after the point at which they stopped using any cpu time",  (double)(unint64_t)v107 / 1000000000.0);
    }
    else {
      uint64_t v100 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"KTrace data ended %.3fs before the stackshot. Data will be missing/incomplete for any threads/tasks after the point at which they stopped using any cpu time",  (double)(unint64_t)v107 / 1000000000.0);
    }
    [v141 addObject:v100];
    goto LABEL_161;
  }

  v127 = *__error();
  _sa_logt();
  v128 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v128, OS_LOG_TYPE_ERROR))
  {
    v129 = *(void *)(*((void *)&v281 + 1) + 24LL);
    v130 = [v140 count];
    *(_DWORD *)buf = 134218240;
    *(void *)&uint8_t buf[4] = v129;
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = v130;
    _os_log_error_impl(&dword_186C92000, v128, OS_LOG_TYPE_ERROR, "nextStackshotIndex %lu, %lu stackshots", buf, 0x16u);
  }

  *__error() = v127;
  v131 = *(void *)(*((void *)&v281 + 1) + 24LL);
  [v140 count];
  _SASetCrashLogMessage(3620, "nextStackshotIndex %lu, %lu stackshots", v132, v133, v134, v135, v136, v137, v131);
  Class result = _os_crash();
  __break(1u);
  return result;
}

void sub_186CD2820( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *a24, void *a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,void *a56)
{
  _Block_object_dispose(&STACK[0x520], 8);
  _Block_object_dispose((const void *)(v58 - 256), 8);

  _Block_object_dispose(&STACK[0x410], 8);
  _Block_object_dispose(&STACK[0x440], 8);
  _Block_object_dispose(&STACK[0x460], 8);
  _Block_object_dispose(&STACK[0x480], 8);
  _Block_object_dispose(&STACK[0x4A0], 8);
  _Block_object_dispose(&STACK[0x4C0], 8);

  _Block_object_dispose(&STACK[0x4F0], 8);
  _Unwind_Resume(a1);
}

void sub_186CD2BF4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void sub_186CD2E6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
}

void sub_186CD2F68( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

id DictForChunkViaNSPropertyList()
{
  uint64_t v0 = ktrace_chunk_size();
  uint64_t v1 = ktrace_chunk_map_data();
  if (!v1) {
    goto LABEL_5;
  }
  id v2 = (void *)MEMORY[0x1896079E8];
  uint64_t v3 = (void *)[objc_alloc(MEMORY[0x189603F48]) initWithBytesNoCopy:v1 length:v0 freeWhenDone:0];
  [v2 propertyListWithData:v3 options:0 format:0 error:0];
  unint64_t v4 = (void *)objc_claimAutoreleasedReturnValue();

  ktrace_chunk_unmap_data();
  if (v4)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {

LABEL_5:
      unint64_t v4 = 0LL;
    }
  }

  return v4;
}

void sub_186CD3050(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_80:
LABEL_81:
    DictGetNumber(v3, @"GPURestartCount");
    int v91 = (void *)objc_claimAutoreleasedReturnValue();

    int v92 = v91;
    if (v91)
    {
      v93 = [v91 unsignedLongLongValue];
      v94 = a1[4];
      if (v94) {
        *(void *)(v94 + 592) = v93;
      }
    }

    DictGetNumber(v3, @"GPURestartLastMachAbs");
    v95 = (void *)objc_claimAutoreleasedReturnValue();

    v96 = v95;
    if (v95)
    {
      v97 = [v95 unsignedLongLongValue];
      v98 = a1[4];
      if (v98) {
        *(void *)(v98 + 600) = v97;
      }
    }

    DictGetNumber(v3, @"HasEnterprisePersona");
    v99 = (void *)objc_claimAutoreleasedReturnValue();

    if (v99)
    {
      uint64_t v100 = [v99 BOOLValue];
      v101 = a1[4];
      if (v101) {
        *(_BYTE *)(v101 + 325) = v100;
      }
    }

    goto LABEL_91;
  }

  int v53 = (void *)a1[5];
  if (v53) {
    [v53 addObject:@"Unable to get dict for tailspin metadata chunk"];
  }
LABEL_91:
}

void sub_186CD38C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

LABEL_113:
LABEL_114:
LABEL_115:

LABEL_116:
}

void sub_186CD4714( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20, uint64_t a21, void *a22)
{
  _Unwind_Resume(a1);
}

void sub_186CD49BC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

LABEL_45:
    ++v17;
  }

  while (timer_count != v17);
  if (v16)
  {
    if ((unint64_t)[v45 count] >= 2)
    {
      unsigned int v35 = *__error();
      _sa_logt();
      int v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v46.receiver) = 0;
        _os_log_error_impl( &dword_186C92000,  v36,  OS_LOG_TYPE_ERROR,  "Parsing both PET and non-PET data is not supported, parsing only PET data",  (uint8_t *)&v46,  2u);
      }

      *__error() = v35;
      [v45 removeAllObjects];
      [v45 addObject:v16];
    }

    int v37 = *(void **)(a1 + 40);
    unsigned int v38 = objc_msgSend(v37, "dataSource", v44);
    if (v37) {
      v37[44] = v38 | 2;
    }
    unsigned int v39 = *(void *)(a1 + 40);
    if (v39) {
      *(void *)(v39 + 360) = 3LL;
    }
    objc_msgSend( *(id *)(a1 + 40),  "setAttemptedSamplingInterval:",  (double)(unint64_t)objc_msgSend(v16, "timerPeriodNs") / 1000000000.0);
    goto LABEL_72;
  }
}
}

void sub_186CD502C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
}

void sub_186CD5174( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_186CD52C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_186CD533C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

id DictForChunkViaNSUnarchiver()
{
  uint64_t v0 = ktrace_chunk_size();
  uint64_t v1 = ktrace_chunk_map_data();
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v13 = (void *)MEMORY[0x189607908];
    id v3 = objc_alloc(MEMORY[0x189604010]);
    uint64_t v4 = objc_opt_class();
    uint64_t v5 = objc_opt_class();
    uint64_t v6 = objc_opt_class();
    uint64_t v7 = objc_opt_class();
    BOOL v8 = (void *)objc_msgSend(v3, "initWithObjects:", v4, v5, v6, v7, objc_opt_class(), 0);
    int v9 = (void *)[objc_alloc(MEMORY[0x189603F48]) initWithBytesNoCopy:v2 length:v0 freeWhenDone:0];
    id v14 = 0LL;
    [v13 unarchivedObjectOfClasses:v8 fromData:v9 error:&v14];
    unsigned int v10 = (void *)objc_claimAutoreleasedReturnValue();
    id v11 = v14;

    ktrace_chunk_unmap_data();
    if (v10)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {

        unsigned int v10 = 0LL;
      }
    }
  }

  else
  {
    unsigned int v10 = 0LL;
  }

  return v10;
}

void sub_186CD550C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_186CD5F6C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13)
{
}

void sub_186CD631C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  _Unwind_Resume(a1);
}

void sub_186CD663C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_186CD6764( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_186CD6868( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_186CD6934( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_186CD6F90( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_186CD7320( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_186CD76A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_186CD79D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  _Unwind_Resume(a1);
}

void sub_186CD82FC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, _Unwind_Exception *exception_object, void *a15, void *a16, void *a17, id a18)
{
  _Unwind_Resume(a1);
}

LABEL_149:
    if ([*(id *)(a1 + 120) dataStyle] != 3)
    {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 128) + 8LL) + 24LL) = 0;
      *(_BYTE *)(*(void *)(*(void *)(a1 + 168) + 8LL) + 24LL) = 0;
      *(_BYTE *)(*(void *)(*(void *)(a1 + 176) + 8LL) + 24LL) = 0;
      *(_BYTE *)(*(void *)(*(void *)(a1 + 184) + 8LL) + 24LL) = 0;
    }

    ++*(_DWORD *)(*(void *)(*(void *)(a1 + 136) + 8LL) + 24LL);
    goto LABEL_153;
  }

  if (qword_18C4B13C0)
  {
    unsigned int v18 = a3;
    int v19 = *__error();
    fprintf( (FILE *)qword_18C4B13C0,  "%'llu Thread 0x%llx ran into non-kperf state at index %lu, stopping\n",  [*(id *)(a1 + 32) machAbsTime],  objc_msgSend(*(id *)(a1 + 40), "threadId"),  v18);
    *__error() = v19;
  }

  *a4 = 1;
LABEL_154:
}

void sub_186CD9498(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_186CD9BAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_186CD9CC4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_186CD9E9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_186CD9F38( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t flatbuffers::Verifier::VerifyOffset(flatbuffers::Verifier *this, unint64_t a2)
{
  if ((a2 & 3) != 0 && *((_BYTE *)this + 40)) {
    return 0LL;
  }
  unint64_t v2 = *((void *)this + 1);
  if (v2 < 5 || v2 - 4 < a2) {
    return 0LL;
  }
  uint64_t v4 = *(unsigned int *)(*(void *)this + a2);
  if (v2 - 1 >= v4 + a2) {
    return v4;
  }
  return 0LL;
}

BOOL flatbuffers::Table::VerifyOffset( flatbuffers::Table *this, const flatbuffers::Verifier *a2, unsigned int a3)
{
  id v3 = (unsigned __int16 *)((char *)this - *(int *)this);
  return *v3 <= a3
      || (uint64_t v4 = *(unsigned __int16 *)((char *)v3 + a3)) == 0
      || flatbuffers::Verifier::VerifyOffset(a2, (unint64_t)this + v4 - *(void *)a2) != 0;
}

BOOL flatbuffers::Verifier::VerifyTableStart(flatbuffers::Verifier *this, const unsigned __int8 *a2)
{
  uint64_t v2 = *(void *)this;
  unint64_t v3 = (unint64_t)&a2[-*(void *)this];
  if ((v3 & 3) != 0 && *((_BYTE *)this + 40)) {
    return 0LL;
  }
  unint64_t v4 = *((void *)this + 1);
  BOOL v5 = v4 >= 5 && v4 - 4 >= v3;
  if (!v5) {
    return 0LL;
  }
  uint64_t v6 = *(int *)a2;
  unsigned int v7 = *((_DWORD *)this + 5);
  unsigned int v8 = *((_DWORD *)this + 4) + 1;
  *((_DWORD *)this + 4) = v8;
  unsigned int v9 = *((_DWORD *)this + 6) + 1;
  *((_DWORD *)this + 6) = v9;
  if (v8 > v7 || v9 > *((_DWORD *)this + 7)) {
    return 0LL;
  }
  unint64_t v10 = v3 - v6;
  if ((v10 & 1) != 0)
  {
    uint64_t v11 = 0LL;
    if (*((_BYTE *)this + 40) || v4 - 2 < v10) {
      return v11;
    }
  }

  else if (v4 - 2 < v10)
  {
    return 0LL;
  }

  unint64_t v12 = *(unsigned __int16 *)(v2 + v10);
  if ((v12 & 1) != 0 && *((_BYTE *)this + 40)) {
    return 0LL;
  }
  BOOL v5 = v4 >= v12;
  unint64_t v14 = v4 - v12;
  return v14 != 0 && v5 && v14 >= v10;
}

BOOL flatbuffers::Verifier::VerifyVectorOrString( flatbuffers::Verifier *this, const unsigned __int8 *a2, unint64_t a3, unint64_t *a4)
{
  unint64_t v4 = (unint64_t)&a2[-*(void *)this];
  if ((v4 & 3) != 0 && *((_BYTE *)this + 40)) {
    return 0LL;
  }
  unint64_t v5 = *((void *)this + 1);
  if (v5 < 5 || v5 - 4 < v4) {
    return 0LL;
  }
  unint64_t v7 = *(unsigned int *)a2;
  if (0x7FFFFFFF / a3 <= v7) {
    return 0LL;
  }
  unint64_t v8 = v7 * a3 + 4;
  if (a4)
  {
    *a4 = v8 + v4;
    unint64_t v5 = *((void *)this + 1);
  }

  BOOL v9 = v5 > v8;
  unint64_t v10 = v5 - v8;
  return v9 && v10 >= v4;
}

BOOL flatbuffers::Verifier::VerifyString(flatbuffers::Verifier *a1, const unsigned __int8 *a2)
{
  if (!a2) {
    return 1LL;
  }
  BOOL result = flatbuffers::Verifier::VerifyVectorOrString(a1, a2, 1uLL, &v6);
  if (result)
  {
    unint64_t v4 = *((void *)a1 + 1);
    return v4 >= 2 && v4 - 1 >= v6 && *(_BYTE *)(*(void *)a1 + v6) == 0;
  }

  return result;
}

BOOL FlatbufferSymbols::MachoMetadata::Verify( FlatbufferSymbols::MachoMetadata *this, flatbuffers::Verifier *a2)
{
  BOOL result = flatbuffers::Verifier::VerifyTableStart(a2, (const unsigned __int8 *)this);
  if (result)
  {
    BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 4u);
    if (result)
    {
      unint64_t v5 = (unsigned __int16 *)((char *)this - *(int *)this);
      if (*v5 >= 5u && (uint64_t v6 = v5[2]) != 0) {
        unint64_t v7 = (const unsigned __int8 *)this + v6 + *(unsigned int *)((char *)this + v6);
      }
      else {
        unint64_t v7 = 0LL;
      }
      BOOL result = flatbuffers::Verifier::VerifyString(a2, v7);
      if (result)
      {
        BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 6u);
        if (result)
        {
          unint64_t v8 = (unsigned __int16 *)((char *)this - *(int *)this);
          if (*v8 >= 7u && (uint64_t v9 = v8[3]) != 0) {
            unint64_t v10 = (const unsigned __int8 *)this + v9 + *(unsigned int *)((char *)this + v9);
          }
          else {
            unint64_t v10 = 0LL;
          }
          BOOL result = flatbuffers::Verifier::VerifyString(a2, v10);
          if (result)
          {
            uint64_t v11 = (unsigned __int16 *)((char *)this - *(int *)this);
            unsigned int v12 = *v11;
            if (v12 < 9
              || (!v11[4]
               || (result = 0LL, unint64_t v13 = *((void *)a2 + 1), v13 >= 9)
               && v13 - 8 >= (unint64_t)this + v11[4] - *(void *)a2)
              && (v12 < 0xB
               || !v11[5]
               || (result = 0LL, unint64_t v14 = *((void *)a2 + 1), v14 >= 9)
               && v14 - 8 >= (unint64_t)this + v11[5] - *(void *)a2))
            {
              BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 0xCu);
              if (result
                && (v12 < 0xD
                 || !v11[6]
                 || (BOOL result = FlatbufferSymbols::CPUArchitecture::Verify( (FlatbufferSymbols::MachoMetadata *)((char *)this + v11[6] + *(unsigned int *)((char *)this + v11[6])),  a2))))
              {
                BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 0xEu);
                if (result)
                {
                  uint64_t v15 = (unsigned __int16 *)((char *)this - *(int *)this);
                  if (*v15 >= 0xFu && (uint64_t v16 = v15[7]) != 0) {
                    uint64_t v17 = (const unsigned __int8 *)this + v16 + *(unsigned int *)((char *)this + v16);
                  }
                  else {
                    uint64_t v17 = 0LL;
                  }
                  BOOL result = flatbuffers::Verifier::VerifyString(a2, v17);
                  if (result)
                  {
                    BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 0x10u);
                    if (result)
                    {
                      unsigned int v18 = (unsigned __int16 *)((char *)this - *(int *)this);
                      if (*v18 >= 0x11u && (uint64_t v19 = v18[8]) != 0) {
                        __int16 v20 = (const unsigned __int8 *)this + v19 + *(unsigned int *)((char *)this + v19);
                      }
                      else {
                        __int16 v20 = 0LL;
                      }
                      BOOL result = flatbuffers::Verifier::VerifyString(a2, v20);
                      if (result)
                      {
                        BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 0x12u);
                        if (result)
                        {
                          unint64_t v21 = (unsigned __int16 *)((char *)this - *(int *)this);
                          if (*v21 >= 0x13u && (uint64_t v22 = v21[9]) != 0) {
                            int v23 = (const unsigned __int8 *)this + v22 + *(unsigned int *)((char *)this + v22);
                          }
                          else {
                            int v23 = 0LL;
                          }
                          BOOL result = flatbuffers::Verifier::VerifyString(a2, v23);
                          if (result)
                          {
                            BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 0x14u);
                            if (result)
                            {
                              int v24 = (unsigned __int16 *)((char *)this - *(int *)this);
                              if (*v24 >= 0x15u && (uint64_t v25 = v24[10]) != 0) {
                                uint64_t v26 = (const unsigned __int8 *)this + v25 + *(unsigned int *)((char *)this + v25);
                              }
                              else {
                                uint64_t v26 = 0LL;
                              }
                              BOOL result = flatbuffers::Verifier::VerifyString(a2, v26);
                              if (result)
                              {
                                BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 0x16u);
                                if (result)
                                {
                                  uint64_t v27 = (unsigned __int16 *)((char *)this - *(int *)this);
                                  if (*v27 >= 0x17u && (uint64_t v28 = v27[11]) != 0) {
                                    unsigned int v29 = (const unsigned __int8 *)this + v28 + *(unsigned int *)((char *)this + v28);
                                  }
                                  else {
                                    unsigned int v29 = 0LL;
                                  }
                                  BOOL result = flatbuffers::Verifier::VerifyString(a2, v29);
                                  if (result)
                                  {
                                    BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 0x18u);
                                    if (result)
                                    {
                                      int v30 = (unsigned __int16 *)((char *)this - *(int *)this);
                                      if (*v30 >= 0x19u && (uint64_t v31 = v30[12]) != 0) {
                                        int v32 = (const unsigned __int8 *)this
                                      }
                                            + v31
                                            + *(unsigned int *)((char *)this + v31);
                                      else {
                                        int v32 = 0LL;
                                      }
                                      BOOL result = flatbuffers::Verifier::VerifyString(a2, v32);
                                      if (result)
                                      {
                                        --*((_DWORD *)a2 + 4);
                                        return 1LL;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  return result;
}

BOOL FlatbufferSymbols::CPUArchitecture::Verify( FlatbufferSymbols::CPUArchitecture *this, flatbuffers::Verifier *a2)
{
  BOOL result = flatbuffers::Verifier::VerifyTableStart(a2, (const unsigned __int8 *)this);
  if (result)
  {
    unint64_t v5 = (unsigned __int16 *)((char *)this - *(int *)this);
    unsigned int v6 = *v5;
    if (v6 < 5
      || (!v5[2]
       || (result = 0LL, unint64_t v7 = *((void *)a2 + 1), v7 >= 5) && v7 - 4 >= (unint64_t)this + v5[2] - *(void *)a2)
      && (v6 < 7
       || (!v5[3]
        || (result = 0LL, unint64_t v8 = *((void *)a2 + 1), v8 >= 5) && v8 - 4 >= (unint64_t)this + v5[3] - *(void *)a2)
       && (v6 < 9
        || (uint64_t v9 = v5[4]) == 0
        || (result = 0LL, unint64_t v10 = *((void *)a2 + 1), v10 >= 5) && v10 - 4 >= (unint64_t)this + v9 - *(void *)a2)))
    {
      --*((_DWORD *)a2 + 4);
      return 1LL;
    }
  }

  return result;
}

BOOL FlatbufferSymbols::DyldSharedCacheMetadata::Verify( FlatbufferSymbols::DyldSharedCacheMetadata *this, flatbuffers::Verifier *a2)
{
  BOOL result = flatbuffers::Verifier::VerifyTableStart(a2, (const unsigned __int8 *)this);
  if (result)
  {
    BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 4u);
    if (result)
    {
      unint64_t v5 = (unsigned __int16 *)((char *)this - *(int *)this);
      if (*v5 >= 5u && (uint64_t v6 = v5[2]) != 0) {
        unint64_t v7 = (const unsigned __int8 *)this + v6 + *(unsigned int *)((char *)this + v6);
      }
      else {
        unint64_t v7 = 0LL;
      }
      BOOL result = flatbuffers::Verifier::VerifyString(a2, v7);
      if (result)
      {
        BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 6u);
        if (result)
        {
          unint64_t v8 = (unsigned __int16 *)((char *)this - *(int *)this);
          if (*v8 >= 7u && (uint64_t v9 = v8[3]) != 0) {
            unint64_t v10 = (const unsigned __int8 *)this + v9 + *(unsigned int *)((char *)this + v9);
          }
          else {
            unint64_t v10 = 0LL;
          }
          BOOL result = flatbuffers::Verifier::VerifyString(a2, v10);
          if (result)
          {
            uint64_t v11 = (unsigned __int16 *)((char *)this - *(int *)this);
            unsigned int v12 = *v11;
            if (v12 < 9
              || (!v11[4]
               || (result = 0LL, unint64_t v13 = *((void *)a2 + 1), v13 >= 9)
               && v13 - 8 >= (unint64_t)this + v11[4] - *(void *)a2)
              && (v12 < 0xB
               || !v11[5]
               || (result = 0LL, unint64_t v14 = *((void *)a2 + 1), v14 >= 9)
               && v14 - 8 >= (unint64_t)this + v11[5] - *(void *)a2))
            {
              BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 0xCu);
              if (result
                && (v12 < 0xD
                 || !v11[6]
                 || (BOOL result = FlatbufferSymbols::CPUArchitecture::Verify( (FlatbufferSymbols::DyldSharedCacheMetadata *)((char *)this + v11[6] + *(unsigned int *)((char *)this + v11[6])),  a2))))
              {
                BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 0xEu);
                if (result)
                {
                  uint64_t v15 = (unsigned __int16 *)((char *)this - *(int *)this);
                  if (*v15 >= 0xFu && (uint64_t v16 = v15[7]) != 0) {
                    uint64_t v17 = (const unsigned __int8 *)this + v16 + *(unsigned int *)((char *)this + v16);
                  }
                  else {
                    uint64_t v17 = 0LL;
                  }
                  BOOL result = flatbuffers::Verifier::VerifyString(a2, v17);
                  if (result)
                  {
                    BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 0x10u);
                    if (result)
                    {
                      unsigned int v18 = (unsigned __int16 *)((char *)this - *(int *)this);
                      if (*v18 >= 0x11u && (uint64_t v19 = v18[8]) != 0) {
                        __int16 v20 = (const unsigned __int8 *)this + v19 + *(unsigned int *)((char *)this + v19);
                      }
                      else {
                        __int16 v20 = 0LL;
                      }
                      BOOL result = flatbuffers::Verifier::VerifyString(a2, v20);
                      if (result)
                      {
                        BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 0x12u);
                        if (result)
                        {
                          unint64_t v21 = (unsigned __int16 *)((char *)this - *(int *)this);
                          if (*v21 >= 0x13u && (uint64_t v22 = v21[9]) != 0) {
                            int v23 = (const unsigned __int8 *)this + v22 + *(unsigned int *)((char *)this + v22);
                          }
                          else {
                            int v23 = 0LL;
                          }
                          BOOL result = flatbuffers::Verifier::VerifyString(a2, v23);
                          if (result)
                          {
                            int v24 = (unsigned __int16 *)((char *)this - *(int *)this);
                            if (*v24 < 0x15u
                              || (uint64_t v25 = v24[10]) == 0
                              || (result = 0LL, unint64_t v26 = *((void *)a2 + 1), v26 >= 9)
                              && v26 - 8 >= (unint64_t)this + v25 - *(void *)a2)
                            {
                              --*((_DWORD *)a2 + 4);
                              return 1LL;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  return result;
}

uint64_t flatbuffers::Verifier::VerifyVectorOfTables<FlatbufferSymbols::SymbolNameEntry>( flatbuffers::Verifier *this, _DWORD *a2)
{
  if (!a2) {
    return 1LL;
  }
  if (!*a2) {
    return 1LL;
  }
  uint64_t v4 = 0LL;
  unint64_t v5 = 0LL;
  uint64_t v6 = a2 + 1;
  while (1)
  {
    uint64_t v7 = a2[v4 + 1];
    unint64_t v8 = (const unsigned __int8 *)&a2[v4] + v7;
    uint64_t result = flatbuffers::Verifier::VerifyTableStart(this, v8 + 4);
    if (!(_DWORD)result) {
      break;
    }
    uint64_t v10 = v7 - *((int *)v8 + 1);
    uint64_t v11 = *(unsigned __int16 *)((char *)&a2[v4 + 2] + v10);
    if (!v11) {
      return 0LL;
    }
    uint64_t v12 = v7 + v11;
    uint64_t result = flatbuffers::Verifier::VerifyOffset(this, (unint64_t)&v6[v4] + v7 + v11 - *(void *)this);
    if (!(_DWORD)result) {
      return result;
    }
    uint64_t result = flatbuffers::Verifier::VerifyString( this,  (const unsigned __int8 *)&a2[v4 + 1] + v12 + *(unsigned int *)((char *)&a2[v4 + 1] + v12));
    if (!(_DWORD)result) {
      return result;
    }
    uint64_t result = flatbuffers::Table::VerifyOffset((flatbuffers::Table *)(v8 + 4), this, 6u);
    if (!(_DWORD)result) {
      return result;
    }
    unint64_t v13 = (char *)&a2[v4] + v7 - *((int *)v8 + 1);
    if (*((unsigned __int16 *)v13 + 2) >= 7u)
    {
      uint64_t v14 = *((unsigned __int16 *)v13 + 5);
      if (v14)
      {
        if ((FlatbufferSymbols::Symbol::Verify( (FlatbufferSymbols::Symbol *)((char *)&a2[v4 + 1] + v7 + v14 + *(unsigned int *)((char *)&a2[v4 + 1] + v7 + v14)),  this) & 1) == 0) {
          return 0LL;
        }
      }
    }

    --*((_DWORD *)this + 4);
    ++v5;
    ++v4;
  }

  return result;
}

uint64_t FlatbufferSymbols::Symbol::Verify(FlatbufferSymbols::Symbol *this, flatbuffers::Verifier *a2)
{
  uint64_t result = flatbuffers::Verifier::VerifyTableStart(a2, (const unsigned __int8 *)this);
  if ((_DWORD)result)
  {
    unint64_t v5 = (unsigned __int16 *)((char *)this - *(int *)this);
    unsigned int v6 = *v5;
    if (v6 < 5
      || (!v5[2]
       || (result = 0LL, unint64_t v7 = *((void *)a2 + 1), v7 >= 9) && v7 - 8 >= (unint64_t)this + v5[2] - *(void *)a2)
      && (v6 < 7
       || !v5[3]
       || (result = 0LL, unint64_t v8 = *((void *)a2 + 1), v8 >= 9) && v8 - 8 >= (unint64_t)this + v5[3] - *(void *)a2))
    {
      uint64_t result = flatbuffers::Table::VerifyOffset(this, a2, 8u);
      if ((_DWORD)result)
      {
        uint64_t v9 = v6 >= 9 && v5[4] ? (const unsigned __int8 *)this + v5[4] + *(unsigned int *)((char *)this + v5[4]) : 0LL;
        uint64_t result = flatbuffers::Verifier::VerifyString(a2, v9);
        if ((_DWORD)result)
        {
          uint64_t result = flatbuffers::Table::VerifyOffset(this, a2, 0xAu);
          if ((_DWORD)result)
          {
            uint64_t v10 = (unsigned __int16 *)((char *)this - *(int *)this);
            if (*v10 >= 0xBu && (uint64_t v11 = v10[5]) != 0) {
              uint64_t v12 = (const unsigned __int8 *)this + v11 + *(unsigned int *)((char *)this + v11);
            }
            else {
              uint64_t v12 = 0LL;
            }
            uint64_t result = flatbuffers::Verifier::VerifyString(a2, v12);
            if ((_DWORD)result)
            {
              uint64_t result = flatbuffers::Table::VerifyOffset(this, a2, 0xCu);
              if ((_DWORD)result)
              {
                unint64_t v13 = 0LL;
                uint64_t v14 = *(int *)this;
                if (*(unsigned __int16 *)((char *)this - v14) >= 0xDu)
                {
                  uint64_t result = flatbuffers::Verifier::VerifyVectorOrString( a2,  (const unsigned __int8 *)this + *(unsigned __int16 *)((char *)this - v14 + 12)
                           + *(unsigned int *)((char *)this + *(unsigned __int16 *)((char *)this - v14 + 12)),
                             4uLL,
                             0LL);
                  if (!(_DWORD)result) {
                    return result;
                  }
                  unint64_t v13 = 0LL;
                  uint64_t v14 = *(int *)this;
                  if (*(unsigned __int16 *)((char *)this - v14) >= 0xDu)
                  {
LABEL_27:
                    uint64_t v15 = *(unsigned __int16 *)((char *)this - v14 + 12);
                    if (v15) {
                      unint64_t v13 = (_DWORD *)((char *)this + v15 + *(unsigned int *)((char *)this + v15));
                    }
                    else {
                      unint64_t v13 = 0LL;
                    }
                  }
                }

                uint64_t result = flatbuffers::Verifier::VerifyVectorOfTables<FlatbufferSymbols::SourceInfo>(a2, v13);
                if ((_DWORD)result)
                {
                  uint64_t result = flatbuffers::Table::VerifyOffset(this, a2, 0xEu);
                  if ((_DWORD)result)
                  {
                    uint64_t v16 = (unsigned __int16 *)((char *)this - *(int *)this);
                    if (*v16 < 0xFu
                      || (uint64_t v17 = v16[7]) == 0
                      || (uint64_t result = flatbuffers::Verifier::VerifyVectorOrString( a2,  (const unsigned __int8 *)this + v17 + *(unsigned int *)((char *)this + v17),  1uLL,  0LL),  (_DWORD)result))
                    {
                      uint64_t result = flatbuffers::Table::VerifyOffset(this, a2, 0x10u);
                      if ((_DWORD)result)
                      {
                        unsigned int v18 = 0LL;
                        uint64_t v19 = *(int *)this;
                        if (*(unsigned __int16 *)((char *)this - v19) >= 0x11u)
                        {
                          uint64_t result = flatbuffers::Verifier::VerifyVectorOrString( a2,  (const unsigned __int8 *)this + *(unsigned __int16 *)((char *)this - v19 + 16)
                                   + *(unsigned int *)((char *)this + *(unsigned __int16 *)((char *)this - v19 + 16)),
                                     4uLL,
                                     0LL);
                          if (!(_DWORD)result) {
                            return result;
                          }
                          unsigned int v18 = 0LL;
                          uint64_t v19 = *(int *)this;
                          if (*(unsigned __int16 *)((char *)this - v19) >= 0x11u)
                          {
LABEL_40:
                            uint64_t v20 = *(unsigned __int16 *)((char *)this - v19 + 16);
                            if (v20) {
                              unsigned int v18 = (_DWORD *)((char *)this + v20 + *(unsigned int *)((char *)this + v20));
                            }
                            else {
                              unsigned int v18 = 0LL;
                            }
                          }
                        }

                        uint64_t result = flatbuffers::Verifier::VerifyVectorOfTables<FlatbufferSymbols::InlineSymbol>( (uint64_t)a2,  v18);
                        if ((_DWORD)result)
                        {
                          unint64_t v21 = (unsigned __int16 *)((char *)this - *(int *)this);
                          if (*v21 < 0x13u
                            || (uint64_t v22 = v21[9]) == 0
                            || (result = 0LL, unint64_t v23 = *((void *)a2 + 1), v23 >= 9)
                            && v23 - 8 >= (unint64_t)this + v22 - *(void *)a2)
                          {
                            --*((_DWORD *)a2 + 4);
                            return 1LL;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  return result;
}

BOOL flatbuffers::Verifier::VerifyVectorOfTables<FlatbufferSymbols::SourceInfo>( flatbuffers::Verifier *a1, _DWORD *a2)
{
  if (!a2) {
    return 1LL;
  }
  if (!*a2) {
    return 1LL;
  }
  unint64_t v4 = 0LL;
  unint64_t v5 = a2 + 1;
  do
  {
    BOOL result = FlatbufferSymbols::SourceInfo::Verify((FlatbufferSymbols::SourceInfo *)((char *)v5 + *v5), a1);
    if (!result) {
      break;
    }
    ++v4;
    ++v5;
  }

  while (v4 < *a2);
  return result;
}

uint64_t flatbuffers::Verifier::VerifyVectorOfTables<FlatbufferSymbols::InlineSymbol>(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return 1LL;
  }
  if (!*a2) {
    return 1LL;
  }
  uint64_t v4 = 0LL;
  unint64_t v5 = 0LL;
  unsigned int v6 = a2 + 1;
  while (1)
  {
    uint64_t v7 = a2[v4 + 1];
    unint64_t v8 = (const unsigned __int8 *)&a2[v4] + v7;
    uint64_t result = flatbuffers::Verifier::VerifyTableStart((flatbuffers::Verifier *)a1, v8 + 4);
    if (!(_DWORD)result) {
      return result;
    }
    uint64_t v10 = v7 - *((int *)v8 + 1);
    unsigned int v11 = *(unsigned __int16 *)((char *)&a2[v4 + 1] + v10);
    if (v11 >= 5)
    {
      if (*(_WORD *)((char *)&a2[v4 + 2] + v10))
      {
        uint64_t result = 0LL;
        unint64_t v12 = *(void *)(a1 + 8);
        if (v12 < 9
          || v12 - 8 < (unint64_t)&v6[v4] + v7 + *(unsigned __int16 *)((char *)&a2[v4 + 2] + v10) - *(void *)a1)
        {
          return result;
        }
      }

      if (v11 >= 7)
      {
        if (*(_WORD *)((char *)&a2[v4 + 2] + v10 + 2))
        {
          uint64_t result = 0LL;
          unint64_t v13 = *(void *)(a1 + 8);
          if (v13 < 9
            || v13 - 8 < (unint64_t)&v6[v4]
                       + v7
                       + *(unsigned __int16 *)((char *)&a2[v4 + 2] + v10 + 2)
                       - *(void *)a1)
          {
            return result;
          }
        }
      }
    }

    uint64_t result = flatbuffers::Table::VerifyOffset((flatbuffers::Table *)(v8 + 4), (const flatbuffers::Verifier *)a1, 8u);
    if (!(_DWORD)result) {
      return result;
    }
    if (v11 >= 9 && *(_WORD *)((char *)&a2[v4 + 3] + v10))
    {
      uint64_t v14 = v7 + *(unsigned __int16 *)((char *)&a2[v4 + 3] + v10);
      uint64_t v15 = (const unsigned __int8 *)&a2[v4 + 1] + v14 + *(unsigned int *)((char *)&a2[v4 + 1] + v14);
    }

    else
    {
      uint64_t v15 = 0LL;
    }

    uint64_t result = flatbuffers::Verifier::VerifyString((flatbuffers::Verifier *)a1, v15);
    if (!(_DWORD)result) {
      return result;
    }
    uint64_t result = flatbuffers::Table::VerifyOffset((flatbuffers::Table *)(v8 + 4), (const flatbuffers::Verifier *)a1, 0xAu);
    if (!(_DWORD)result) {
      return result;
    }
    uint64_t v16 = (char *)&a2[v4] + v7 - *((int *)v8 + 1);
    else {
      unsigned int v18 = 0LL;
    }
    uint64_t result = flatbuffers::Verifier::VerifyString((flatbuffers::Verifier *)a1, v18);
    if (!(_DWORD)result) {
      return result;
    }
    uint64_t result = flatbuffers::Table::VerifyOffset((flatbuffers::Table *)(v8 + 4), (const flatbuffers::Verifier *)a1, 0xCu);
    if (!(_DWORD)result) {
      return result;
    }
    uint64_t v19 = (char *)&a2[v4] + v7 - *((int *)v8 + 1);
    if (*((unsigned __int16 *)v19 + 2) >= 0xDu)
    {
      uint64_t v20 = *((unsigned __int16 *)v19 + 8);
      if (v20)
      {
        uint64_t result = FlatbufferSymbols::SourceInfo::Verify( (FlatbufferSymbols::SourceInfo *)((char *)&a2[v4 + 1] + v7 + v20 + *(unsigned int *)((char *)&a2[v4 + 1] + v7 + v20)),  (flatbuffers::Verifier *)a1);
        if (!(_DWORD)result) {
          return result;
        }
      }
    }

    uint64_t result = flatbuffers::Table::VerifyOffset((flatbuffers::Table *)(v8 + 4), (const flatbuffers::Verifier *)a1, 0xEu);
    if (!(_DWORD)result) {
      return result;
    }
    uint64_t v21 = 0LL;
    uint64_t v22 = *((int *)v8 + 1);
    unint64_t v23 = (char *)&a2[v4] + v7 - v22;
    if (*((unsigned __int16 *)v23 + 2) >= 0xFu)
    {
      uint64_t v24 = *((unsigned __int16 *)v23 + 9);
      if (!v24) {
        goto LABEL_34;
      }
      uint64_t result = flatbuffers::Verifier::VerifyVectorOrString( (flatbuffers::Verifier *)a1,  (const unsigned __int8 *)&a2[v4 + 1] + v7 + v24 + *(unsigned int *)((char *)&a2[v4 + 1] + v7 + v24),  4uLL,  0LL);
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v21 = 0LL;
      uint64_t v22 = *((int *)v8 + 1);
      if (*(unsigned __int16 *)((char *)&a2[v4 + 1] + v7 - v22) >= 0xFu)
      {
LABEL_34:
        uint64_t v25 = *(unsigned __int16 *)((char *)a2 + v7 + v4 * 4 - v22 + 18);
        if (v25) {
          uint64_t v21 = (uint64_t)&a2[v4 + 1] + v7 + v25 + *(unsigned int *)((char *)&a2[v4 + 1] + v7 + v25);
        }
        else {
          uint64_t v21 = 0LL;
        }
      }
    }

    uint64_t result = flatbuffers::Verifier::VerifyVectorOfTables<FlatbufferSymbols::InlineSymbol>(a1, v21);
    if (!(_DWORD)result) {
      return result;
    }
    unint64_t v26 = (char *)&a2[v4] + v7 - *((int *)v8 + 1);
    if (*((unsigned __int16 *)v26 + 2) >= 0x11u)
    {
      uint64_t v27 = *((unsigned __int16 *)v26 + 10);
      if (v27)
      {
        uint64_t result = 0LL;
        unint64_t v28 = *(void *)(a1 + 8);
      }
    }

    --*(_DWORD *)(a1 + 16);
    ++v5;
    ++v4;
  }

BOOL FlatbufferSymbols::SourceInfo::Verify(FlatbufferSymbols::SourceInfo *this, flatbuffers::Verifier *a2)
{
  BOOL result = flatbuffers::Verifier::VerifyTableStart(a2, (const unsigned __int8 *)this);
  if (result)
  {
    BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 4u);
    if (result)
    {
      unint64_t v5 = (unsigned __int16 *)((char *)this - *(int *)this);
      if (*v5 >= 5u && (uint64_t v6 = v5[2]) != 0) {
        uint64_t v7 = (const unsigned __int8 *)this + v6 + *(unsigned int *)((char *)this + v6);
      }
      else {
        uint64_t v7 = 0LL;
      }
      BOOL result = flatbuffers::Verifier::VerifyString(a2, v7);
      if (result)
      {
        unint64_t v8 = (unsigned __int16 *)((char *)this - *(int *)this);
        unsigned int v9 = *v8;
        if (v9 < 7) {
          goto LABEL_28;
        }
        if (!v8[3]
          || (result = 0LL, unint64_t v10 = *((void *)a2 + 1), v10 >= 5)
          && v10 - 4 >= (unint64_t)this + v8[3] - *(void *)a2)
        {
          if (v9 < 9) {
            goto LABEL_28;
          }
          if (!v8[4]
            || (result = 0LL, unint64_t v11 = *((void *)a2 + 1), v11 >= 5)
            && v11 - 4 >= (unint64_t)this + v8[4] - *(void *)a2)
          {
            if (v9 < 0xB
              || (!v8[5]
               || (result = 0LL, unint64_t v12 = *((void *)a2 + 1), v12 >= 5)
               && v12 - 4 >= (unint64_t)this + v8[5] - *(void *)a2)
              && (v9 < 0xD
               || (!v8[6]
                || (result = 0LL, unint64_t v13 = *((void *)a2 + 1), v13 >= 9)
                && v13 - 8 >= (unint64_t)this + v8[6] - *(void *)a2)
               && (v9 < 0xF
                || (uint64_t v14 = v8[7]) == 0
                || (result = 0LL, unint64_t v15 = *((void *)a2 + 1), v15 >= 5)
                && v15 - 4 >= (unint64_t)this + v14 - *(void *)a2)))
            {
LABEL_28:
              --*((_DWORD *)a2 + 4);
              return 1LL;
            }
          }
        }
      }
    }
  }

  return result;
}

id CopyCleanSegmentName(void *a1)
{
  id v1 = a1;
  if ([v1 hasSuffix:@" SEGMENT"])
  {
    os_unfair_lock_lock(&stru_18C4B15D4);
    uint64_t v2 = (void *)qword_18C4B15E0;
    if (!qword_18C4B15E0)
    {
      uint64_t v3 = [objc_alloc(MEMORY[0x189603FC8]) initWithCapacity:8];
      uint64_t v4 = (void *)qword_18C4B15E0;
      qword_18C4B15E0 = v3;

      uint64_t v2 = (void *)qword_18C4B15E0;
    }

    [v2 objectForKeyedSubscript:v1];
    unint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v5)
    {
      [v1 stringByReplacingOccurrencesOfString:@" SEGMENT" withString:&stru_189F64BD8];
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
      SACachedNSString(v6);
      unint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();

      [(id)qword_18C4B15E0 setObject:v5 forKeyedSubscript:v1];
    }

    os_unfair_lock_unlock(&stru_18C4B15D4);
  }

  else
  {
    SACachedNSString(v1);
    unint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v5;
}

void sub_186CDB680(_Unwind_Exception *a1)
{
}

void sub_186CDBF48(_Unwind_Exception *a1)
{
}

LABEL_121:
            }
          }
        }

        objc_sync_exit(v7);
        uint64_t v3 = v126;
      }
    }
  }
}

void sub_186CDCD78(_Unwind_Exception *a1)
{
}

void sub_186CDCFB0(_Unwind_Exception *a1)
{
}

void sub_186CDD3AC(_Unwind_Exception *a1)
{
}

void sub_186CDDAE4(_Unwind_Exception *a1)
{
}

void sub_186CDDD34(_Unwind_Exception *a1)
{
}

void sub_186CDE080(_Unwind_Exception *a1)
{
}

void sub_186CDE440(_Unwind_Exception *a1)
{
}

LABEL_35:
      }

      objc_sync_exit(obj);
    }

    int v30 = (void *)v60[5];
    if (!v30) {
      int v30 = (void *)v66[5];
    }
    uint64_t v31 = (void *)v48[5];
    if (!v31) {
      uint64_t v31 = (void *)v54[5];
    }
    -[SAInstruction setSymbol:sourceinfo:](v32, v30, v31);
    _Block_object_dispose(&v47, 8);

    _Block_object_dispose(&v53, 8);
    _Block_object_dispose(&v59, 8);

    _Block_object_dispose(&v65, 8);
  }

                    [v38 startTimestamp];
                    unsigned int v39 = (void *)objc_claimAutoreleasedReturnValue();
                    int v40 = [v39 gt:v9];

                    if (v40)
                    {

                      int v30 = 0LL;
                      goto LABEL_41;
                    }

                    int v30 = v38;
                  }

                  if (v30 && [v30 isIdleWorkQueue])
                  {
                    int v41 = [v30 cpuTimeNs];
                    *a5 += v41 - [v13 cpuTimeNs];
                    v42 = [v30 instructions];
                    a5[1] += v42 - [v13 instructions];
                    unsigned int v43 = [v30 cycles];
                    a5[2] += v43 - [v13 cycles];
                  }

                  goto LABEL_41;
                }
              }

      v59 = @"Bad leaf kernel frame index";
      goto LABEL_44;
    }

  [MEMORY[0x189607968] numberWithInt:(v11 >> 3) - 1];
  unint64_t v13 = (void *)objc_claimAutoreleasedReturnValue();
  SAJSONWriteDictionaryEntry(v18, @"cpuNum", v13);

  if (a4) {
    goto LABEL_46;
  }
LABEL_36:
  if ((a3 & 0x800) != 0) {
    SAJSONWriteDictionaryEntry(v18, @"eCore", MEMORY[0x189604A88]);
  }
  if ((a3 & 0x1000) != 0)
  {
LABEL_52:
    if ((a3 & 0x1000) != 0) {
      uint64_t v17 = (void *)MEMORY[0x189604A88];
    }
    else {
      uint64_t v17 = (void *)MEMORY[0x189604A80];
    }
    SAJSONWriteDictionaryEntry(v18, @"pCore", v17);
  }

      ++v17;
    }

    while (v17 != v16);
    uint64_t v16 = [v15 countByEnumeratingWithState:&v57 objects:v66 count:16];
  }

  while (v16);

  if (v13)
  {
    +[SABinaryLoadInfo sortBinaryLoadInfos:]((uint64_t)&OBJC_CLASS___SABinaryLoadInfo, v13);
    int v36 = [v13 copy];
    unint64_t v11 = v47;
    a1 = v48;
    int v37 = v48[31];
    v48[31] = (id)v36;
    a4 = v46;
    a6 = v45;
    a2 = v44;
    a3 = v43;
    goto LABEL_40;
  }

  unint64_t v11 = v47;
  a1 = v48;
  a4 = v46;
  a6 = v45;
  a2 = v44;
  a3 = v43;
LABEL_42:
  if (+[SAFrame fixupLoadInfosInFrameTree:binaryLoadInfos:libraryCache:uuidsWithNewInstructions:]( (uint64_t)&OBJC_CLASS___SAFrame,  a1[35],  a1[31],  a1[32],  v11)
    && a3
    && -[SATask gatherLoadInfoFromLiveProcessWithDataGatheringOptions:additionalCSSymbolicatorFlags:]( (uint64_t)a1,  a2,  a6))
  {
    if (a4) {
      *a4 = 1;
    }
    unsigned int v38 = +[SAFrame fixupLoadInfosInFrameTree:binaryLoadInfos:libraryCache:uuidsWithNewInstructions:]( (uint64_t)&OBJC_CLASS___SAFrame,  a1[35],  a1[31],  a1[32],  v11);
    if (v38)
    {
      unsigned int v39 = v38;
      int v40 = *__error();
      _sa_logt();
      int v41 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
      {
        [a1 debugDescription];
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412546;
        int v62 = v42;
        int v63 = 2048;
        v64 = v39;
        _os_log_debug_impl( &dword_186C92000,  v41,  OS_LOG_TYPE_DEBUG,  "%@: still have %lu frames with missing load info after getting load info from the live process",  buf,  0x16u);
      }

      *__error() = v40;
    }
  }

LABEL_52:
}

void sub_186CDE934( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, char a43)
{
}

void sub_186CDF0C8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26, uint64_t a27, uint64_t a28, uint64_t a29, char a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, char a36)
{
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
}

void sub_186CDFA90( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
}

void sub_186CDFDF4(_Unwind_Exception *a1)
{
}

void sub_186CE014C(_Unwind_Exception *a1)
{
}

void sub_186CE02F8(_Unwind_Exception *a1)
{
}

void sub_186CE0440( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_186CE06C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_186CE08A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_186CE0A98( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_186CE0CEC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_186CE10F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_186CE1528(_Unwind_Exception *a1)
{
}

void sub_186CE1ECC(_Unwind_Exception *a1)
{
}

void sub_186CE205C(_Unwind_Exception *a1)
{
}

void sub_186CE2138(_Unwind_Exception *a1)
{
}

void sub_186CE21AC(_Unwind_Exception *a1)
{
}

void sub_186CE22A4(_Unwind_Exception *a1)
{
}

LABEL_9:
      *__error() = v8;
    }
  }

  objc_sync_exit(v5);
}

  unint64_t v28 = a2;
  uint64_t v14 = a2 & 0x300;
  unint64_t v15 = 0LL;
  uint64_t v16 = 0LL;
  uint64_t v17 = 0;
  unsigned int v18 = 2 << flsl(v5);
  do
  {
    if (v18 >= 0) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = v18 + 1;
    }
    uint64_t v7 = v15 + (v19 >> 1);
    if (v7 < v5)
    {
      [a1 objectAtIndex:v15 + (v19 >> 1)];
      uint64_t v20 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v21 = *(uint64_t (**)(uint64_t))(a3 + 16);
      if (v20 == v30) {
        uint64_t v16 = v21(a3);
      }
      else {
        uint64_t v16 = -((uint64_t (*)(uint64_t, id))v21)(a3, v20);
      }
      if (!(v16 | v14))
      {

        return v7;
      }

      if (v16) {
        uint64_t v22 = 1;
      }
      else {
        uint64_t v22 = v29 == 0;
      }
      v17 |= v16 == 0;
      unint64_t v23 = !v22 || v16 <= -1;
      if (v23) {
        v15 += v19 >> 1;
      }
    }

    unint64_t v23 = v18 <= 1;
    unsigned int v18 = v19 >> 1;
  }

  while (!v23);
  LODWORD(v24) = v29 != 0;
  if (v16) {
    LODWORD(v24) = 0;
  }
  if (v16 < 0) {
    uint64_t v24 = 1LL;
  }
  else {
    uint64_t v24 = v24;
  }
  uint64_t v25 = v15 + v24;
  unint64_t v26 = v15 + ((unint64_t)v16 >> 63);
  if ((v17 & 1) == 0) {
    unint64_t v26 = 0x7FFFFFFFFFFFFFFFLL;
  }
  if ((v28 & 0x400) != 0) {
    return v25;
  }
  else {
    return v26;
  }
}

  return (SAThreadState *)v20;
}
}
}
}
}

    unint64_t v13 = 0LL;
    goto LABEL_81;
  }

  unint64_t v10 = *a3;
  unint64_t v11 = v8 != 0LL;
  if (!v8 && v10 == a2) {
    goto LABEL_9;
  }
  LOBYTE(v12) = v10 ^ a2;
  if (((v10 ^ a2) & 1) == 0)
  {
    unint64_t v13 = 0LL;
LABEL_17:
    if ((a2 & 4) != 0) {
      goto LABEL_26;
    }
LABEL_25:
    if (!(v10 & 4 | v12 & 2))
    {
LABEL_26:
      unint64_t v15 = a2 & 0x7F8;
      uint64_t v16 = v15 != 0;
      goto LABEL_38;
    }

    goto LABEL_30;
  }

  if ((a2 & 1) != 0) {
    uint64_t v14 = @"suspended";
  }
  else {
    uint64_t v14 = @"unsuspended";
  }
  unint64_t v13 = [v7 appendString:v14];
  unint64_t v10 = *a3;
  unint64_t v12 = *a3 ^ a2;
  if ((v12 & 4) == 0) {
    goto LABEL_17;
  }
LABEL_20:
  if ((a2 & 4) == 0)
  {
    unint64_t v13 = [v7 appendString:@"not running"] + v13;
    if (a3)
    {
      unint64_t v10 = *a3;
      unint64_t v12 = *a3 ^ a2;
      goto LABEL_25;
    }

  if (v11)
  {
    objc_msgSend(MEMORY[0x189607968], "numberWithInt:", objc_msgSend(v7, "pid"));
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue();
    unint64_t v23 = [v11 containsObject:v22];

    if ((v23 & 1) != 0) {
      goto LABEL_95;
    }
  }

  if (v13)
  {
    objc_msgSend(MEMORY[0x189607968], "numberWithUnsignedLongLong:", objc_msgSend(v7, "uniquePid"));
    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue();
    uint64_t v25 = [v13 containsObject:v24];

    if ((v25 & 1) != 0) {
      goto LABEL_95;
    }
  }

  if (v15)
  {
    [v7 name];
    unint64_t v26 = (void *)objc_claimAutoreleasedReturnValue();
  }

  if (!v73) {
    goto LABEL_21;
  }
  [v7 mainBinary];
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue();
  [v27 uuid];
  unint64_t v26 = (void *)objc_claimAutoreleasedReturnValue();

  if (v26 && [v73 containsObject:v26])
  {
LABEL_94:

    goto LABEL_95;
  }

LABEL_21:
  [(id)a1 options];
  unint64_t v28 = (void *)objc_claimAutoreleasedReturnValue();
  unsigned int v29 = [v28 printProblematicProcessesAndThreads];

  if (!v29) {
    goto LABEL_54;
  }
  [v7 lastTaskStateOnOrBeforeTime:*(void *)(a1 + 40) sampleIndex:*(void *)(a1 + 56)];
  int v30 = (void *)objc_claimAutoreleasedReturnValue();
  unint64_t v26 = v30;
  if (v30
    && (([v30 wqExceededTotalThreadLimit] & 1) != 0
     || ([v26 wqExceededConstrainedThreadLimit] & 1) != 0))
  {
    goto LABEL_94;
  }

  v67 = v26;
  if (v8)
  {
    uint64_t v31 = *(void **)(a1 + 144);
    objc_msgSend(MEMORY[0x189607968], "numberWithUnsignedLongLong:", objc_msgSend((id)v8, "threadId"));
    int v32 = (void *)objc_claimAutoreleasedReturnValue();
    [v31 objectForKeyedSubscript:v32];
    uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue();
    objb = [v33 isPartOfADeadlock];

    unint64_t v26 = v67;
    if ((objb & 1) == 0) {
      goto LABEL_53;
    }
    goto LABEL_94;
  }

  v68 = v15;
  unsigned int v65 = v9;
  unsigned int v84 = 0u;
  int v85 = 0u;
  int v82 = 0u;
  int v83 = 0u;
  [v7 threads];
  id obj = (id)objc_claimAutoreleasedReturnValue();
  unsigned int v39 = [obj countByEnumeratingWithState:&v82 objects:v88 count:16];
  if (!v39) {
    goto LABEL_52;
  }
  int v40 = v39;
  int v41 = *(void *)v83;
  do
  {
    for (i = 0LL; i != v40; ++i)
    {
      if (*(void *)v83 != v41) {
        objc_enumerationMutation(obj);
      }
      [*(id *)(a1 + 144) objectForKeyedSubscript:*(void *)(*((void *)&v82 + 1) + 8 * i)];
      unsigned int v43 = (void *)objc_claimAutoreleasedReturnValue();
      unsigned int v44 = [v43 isPartOfADeadlock];

      if (v44)
      {

        unint64_t v8 = 0LL;
        unsigned int v9 = v65;
        unint64_t v26 = v67;
        unint64_t v15 = v68;
        goto LABEL_94;
      }
    }

    int v40 = [obj countByEnumeratingWithState:&v82 objects:v88 count:16];
  }

  while (v40);
LABEL_52:

  unint64_t v8 = 0LL;
  unsigned int v9 = v65;
  unint64_t v26 = v67;
  unint64_t v15 = v68;
LABEL_53:

LABEL_54:
  unsigned int v69 = v15;
  if (v18)
  {
    if (v8)
    {
      objc_msgSend(MEMORY[0x189607968], "numberWithUnsignedLongLong:", objc_msgSend((id)v8, "threadId"));
      int v45 = (void *)objc_claimAutoreleasedReturnValue();
      int v46 = [v18 containsObject:v45];

      unint64_t v15 = v69;
      if ((v46 & 1) != 0) {
        goto LABEL_95;
      }
    }

    else
    {
      unsigned int v66 = v9;
      int v80 = 0u;
      unsigned int v81 = 0u;
      unsigned int v78 = 0u;
      int v79 = 0u;
      [v7 threads];
      int v47 = (void *)objc_claimAutoreleasedReturnValue();
      v48 = [v47 countByEnumeratingWithState:&v78 objects:v87 count:16];
      if (v48)
      {
        v49 = v48;
        unsigned int v50 = *(void *)v79;
        do
        {
          for (j = 0LL; j != v49; ++j)
          {
            if (*(void *)v79 != v50) {
              objc_enumerationMutation(v47);
            }
            if ([v18 containsObject:*(void *)(*((void *)&v78 + 1) + 8 * j)])
            {

              a1 = 1LL;
              unsigned int v9 = v66;
              goto LABEL_92;
            }
          }

          v49 = [v47 countByEnumeratingWithState:&v78 objects:v87 count:16];
        }

        while (v49);
      }

      unsigned int v9 = v66;
      unint64_t v15 = v69;
    }
  }

  [(id)a1 options];
  int v52 = (void *)objc_claimAutoreleasedReturnValue();
  if (![v52 printTargetThreadOnly])
  {

    a1 = 0LL;
    goto LABEL_96;
  }

  int v53 = [*(id *)(a1 + 120) count];

  if (!v53) {
    goto LABEL_88;
  }
  v76 = 0u;
  unsigned int v77 = 0u;
  v74 = 0u;
  v75 = 0u;
  obja = *(id *)(a1 + 120);
  int v54 = [obja countByEnumeratingWithState:&v74 objects:v86 count:16];
  if (!v54) {
    goto LABEL_87;
  }
  v56 = v54;
  v57 = *(void *)v75;
  while (2)
  {
    uint64_t v58 = 0LL;
    while (2)
    {
      if (*(void *)v75 != v57) {
        objc_enumerationMutation(obja);
      }
      v59 = *(void **)(*((void *)&v74 + 1) + 8 * v58);
      if (!v8)
      {
        if (v59) {
          goto LABEL_81;
        }
        goto LABEL_85;
      }

      if (!v59)
      {
LABEL_85:
        Property = 0LL;
        goto LABEL_82;
      }

      if (!v59[2]) {
        goto LABEL_81;
      }
      unsigned int v60 = [(id)v8 threadId];
      unsigned int v61 = v59[2];
      if (v60 == v61) {
        goto LABEL_91;
      }
      if (!v61)
      {
LABEL_81:
        Property = objc_getProperty(v59, v55, 8LL, 1);
LABEL_82:
        if (Property == v7)
        {
LABEL_91:

          a1 = 1LL;
          goto LABEL_92;
        }
      }

      if (v56 != ++v58) {
        continue;
      }
      break;
    }

    int v63 = [obja countByEnumeratingWithState:&v74 objects:v86 count:16];
    v56 = v63;
    if (v63) {
      continue;
    }
    break;
  }

    *__error() = v4;
    goto LABEL_10;
  }

  ktrace_events_single();
  uint64_t v6 = v3;
  ktrace_events_single();

LABEL_10:
  _Block_object_dispose(v8, 8);
}

void sub_186CE2478(_Unwind_Exception *a1)
{
}

void sub_186CE26B4(_Unwind_Exception *a1)
{
}

void sub_186CE2760(_Unwind_Exception *a1)
{
}

LABEL_32:
    v120 = 0;
    goto LABEL_33;
  }

  uint64_t v16 = a2 & 8;
  uint64_t v17 = (unint64_t)v8[2] & 8;
LABEL_24:
  unsigned int v18 = 64LL;
  uint64_t v19 = v18 | v15;
  if (v17) {
    uint64_t v20 = 1;
  }
  else {
    uint64_t v20 = v16 == 0;
  }
  if (!v20) {
    v19 |= 8uLL;
  }
  v8[2] = (id)v19;
  uint64_t v21 = objc_opt_self();
  *(void *)dest = 0LL;
  *(void *)&dest[8] = dest;
  *(void *)&dest[16] = 0x3032000000LL;
  v141 = __Block_byref_object_copy__2;
  v142 = __Block_byref_object_dispose__2;
  v143 = 0LL;
  *(void *)buf = MEMORY[0x1895F87A8];
  *(void *)&v137 = 3221225472LL;
  *((void *)&v137 + 1) = __22__SABinary__dsymPaths__block_invoke;
  v138 = &unk_189F62980;
  v139 = dest;
  +[SABinary _doDsymPathsWork:](v21, buf);
  uint64_t v22 = *(id *)(*(void *)&dest[8] + 40LL);
  _Block_object_dispose(dest, 8);

  v120 = CSIsNull() ^ 1;
LABEL_33:
  if (!CSIsNull() || !v8[1])
  {
    uint64_t v25 = a2 & a4;
    unint64_t v26 = v25 ^ 1;
    if (*v11) {
      unint64_t v26 = 1;
    }
    if ((v26 & 1) != 0)
    {
LABEL_52:
      uint64_t v37 = 0;
      unsigned int v29 = 0LL;
      SymbolOwnerForExclaveUUID = 0LL;
    }

    else
    {
      SymbolOwnerForExclaveUUID = CreateSymbolOwnerForExclaveUUID(v8[9]);
      unsigned int v29 = v28;
      int v30 = CSIsNull();
      if ((~(_BYTE)a2 & 5) != 0) {
        uint64_t v31 = 1;
      }
      else {
        uint64_t v31 = v30;
      }
      if ((v31 & 1) == 0)
      {
        Path = (_BYTE *)CSSymbolOwnerGetPath();
        SAFilepathForCString(Path);
        uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue();
        unsigned int v34 = v33;
        if (v33 && [v33 isAbsolutePath])
        {
          unsigned int v35 = +[SABinaryLocator sharedBinaryLocator](&OBJC_CLASS___SABinaryLocator, "sharedBinaryLocator");
          [MEMORY[0x189604030] fileURLWithPath:v34 isDirectory:0];
          int v36 = (void *)objc_claimAutoreleasedReturnValue();
          -[SABinaryLocator addURL:ForUUID:](v35, v36, v8[9]);

          [v35 done];
        }
      }

      uint64_t v37 = 1;
    }

    unsigned int v38 = v123 ^ 1;
    if (*v11) {
      unsigned int v38 = 1;
    }
    if ((v38 & 1) != 0 || kill(v122, 0) || (unsigned int v60 = CopyDyldSnapshotForPid(v122)) == 0)
    {
LABEL_58:
      unsigned int v39 = 0;
    }

    else
    {
      *(void *)dest = 0LL;
      *(void *)&dest[8] = dest;
      *(void *)&dest[16] = 0x2020000000LL;
      LOBYTE(v141) = 0;
      v129 = MEMORY[0x1895F87A8];
      v130 = 3221225472LL;
      v131 = __89__SABinary_symbolOwnerWrapperWithOptions_pid_checkExclave_additionalCSSymbolicatorFlags___block_invoke;
      v132 = &unk_189F62A60;
      v133 = v8;
      v134 = dest;
      v135 = v122;
      dyld_process_snapshot_for_each_image();
      if (*v11)
      {
        unsigned int v61 = *__error();
        _sa_logt();
        int v62 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG))
        {
          v93 = [v8 debugDescription];
          *(_DWORD *)buf = 67109378;
          *(_DWORD *)&uint8_t buf[4] = v122;
          LOWORD(v137) = 2112;
          *(void *)((char *)&v137 + 2) = v93;
          v118 = (void *)v93;
          _os_log_debug_impl( &dword_186C92000,  v62,  OS_LOG_TYPE_DEBUG,  "Found path via dyld inspection of [%d] for %@",  buf,  0x12u);
        }

        int v63 = v61;
        unsigned int v39 = 0;
        *__error() = v63;
      }

      else if (*(_BYTE *)(*(void *)&dest[8] + 24LL))
      {
        unsigned int v39 = 0;
      }

      else
      {
        int v87 = *__error();
        _sa_logt();
        unsigned int v88 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
        {
          v119 = v87;
          unsigned int v89 = [v8 debugDescription];
          *(_DWORD *)buf = 67109378;
          *(_DWORD *)&uint8_t buf[4] = v122;
          LOWORD(v137) = 2112;
          *(void *)((char *)&v137 + 2) = v89;
          int v90 = (void *)v89;
          _os_log_impl( &dword_186C92000,  v88,  OS_LOG_TYPE_DEFAULT,  "WARNING: Unable to find binary via dyld inspection of [%d] for %@",  buf,  0x12u);

          int v87 = v119;
        }

        *__error() = v87;
        unsigned int v39 = 1;
      }

      +[SABinary dataFillingQueue]();
      int v91 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue();
      v127[0] = MEMORY[0x1895F87A8];
      v127[1] = 3221225472LL;
      v127[2] = __89__SABinary_symbolOwnerWrapperWithOptions_pid_checkExclave_additionalCSSymbolicatorFlags___block_invoke_126;
      v127[3] = &__block_descriptor_52_e5_v8__0l;
      v128 = v122;
      v127[4] = v60;
      v127[5] = a2 & 0x26D;
      dispatch_async(v91, v127);

      _Block_object_dispose(dest, 8);
    }

    LODWORD(v11_Block_object_dispose(va, 8) = 1;
    if ((a2 & 0x20) == 0) {
      goto LABEL_65;
    }
    int v40 = *v11;
    if (!*v11) {
      goto LABEL_65;
    }
    int v41 = (unint64_t)v8[2];
    if ((v41 & 0x20) != 0)
    {
LABEL_64:
      LODWORD(v11_Block_object_dispose(va, 8) = 1;
    }

    else
    {
      v8[2] = (id)(v41 | 0x20);
      SymbolOwnerForExclaveUUID = CreateSymbolOwnerForUUIDAtPath(v8[9], v40, a5);
      unsigned int v29 = v42;
      LODWORD(v11_Block_object_dispose(va, 8) = 0;
      v120 |= CSIsNull() ^ 1;
    }

    uint64_t v37 = *__error();
    _sa_logt();
    unsigned int v38 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      unsigned int v39 = object_getClassName(v8);
      *(_DWORD *)buf = 136315138;
      ClassName = v39;
      _os_log_error_impl(&dword_186C92000, v38, OS_LOG_TYPE_ERROR, "symbol is array, but source info is %s", buf, 0xCu);
    }

    *__error() = v37;
    int v40 = object_getClassName(v8);
    _SASetCrashLogMessage(4287, "symbol is array, but source info is %s", v41, v42, v43, v44, v45, v46, v40);
    _os_crash();
    __break(1u);
LABEL_35:
    uint64_t v4 = *__error();
    _sa_logt();
    int v47 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
    {
      v48 = [v2 count];
      v49 = -[os_log_s count](v8, "count");
      *(_DWORD *)buf = 134218240;
      ClassName = (const char *)v48;
      v59 = 2048;
      unsigned int v60 = v49;
      _os_log_error_impl(&dword_186C92000, v47, OS_LOG_TYPE_ERROR, "%lu symbols, but %lu source infos", buf, 0x16u);
    }

    *__error() = v4;
    unsigned int v50 = [v2 count];
    -[os_log_s count](v8, "count");
    _SASetCrashLogMessage(4288, "%lu symbols, but %lu source infos", v51, v52, v53, v54, v55, v56, v50);
    _os_crash();
    __break(1u);
    goto LABEL_38;
  }

    LODWORD(v2_Block_object_dispose(va, 8) = -1;
    goto LABEL_33;
  }

  if (a8)
  {
    if (pipe(v99))
    {
      uint64_t v20 = *__error();
      uint64_t v24 = *__error();
      _sa_logt();
      uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v96) = v20;
        unint64_t v26 = "Unable to open pipe: %{errno}d";
        goto LABEL_43;
      }

        else {
          uint64_t v22 = v108;
        }
        v108 = v22;
        [v6 exclave];
        unint64_t v23 = (void *)objc_claimAutoreleasedReturnValue();
        uint64_t v24 = v23;
        if (v23)
        {
          [v23 name];
          uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue();

          if (v25)
          {
            [v24 name];
            unint64_t v26 = (void *)objc_claimAutoreleasedReturnValue();
            uint64_t v27 = [v26 length] + 9;
          }

          else
          {
            uint64_t v27 = 27;
          }

          else {
            unint64_t v28 = v107;
          }
          uint64_t v107 = v28;
        }

        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0 || ([v6 isZerothAndOnlySegment] & 1) == 0)
        {
          [v6 segment];
          unsigned int v29 = (void *)objc_claimAutoreleasedReturnValue();
          [v29 name];
          int v30 = (void *)objc_claimAutoreleasedReturnValue();
          uint64_t v31 = [v30 length];

          else {
            int v32 = v106;
          }
          v106 = v32;
        }

        unint64_t v10 = v113;
LABEL_50:

        uint64_t v4 = 0;
        ++v5;
      }

      while (v111 != v5);
      uint64_t v33 = [obj countByEnumeratingWithState:&v121 objects:v133 count:16];
      uint64_t v4 = 0;
      v111 = v33;
      if (!v33)
      {
LABEL_57:

        uint64_t v3 = v101;
LABEL_58:
        v119 = 0u;
        v120 = 0u;
        v117 = 0u;
        v118 = 0u;
        v102 = v3;
        obja = (id)[v102 countByEnumeratingWithState:&v117 objects:v132 count:16];
        if (!obja) {
          goto LABEL_168;
        }
        unsigned int v34 = 1;
        int v103 = *(void *)v118;
        while (2)
        {
          unsigned int v35 = 0LL;
LABEL_61:
          if (*(void *)v118 != v103) {
            objc_enumerationMutation(v102);
          }
          int v36 = *(void **)(*((void *)&v117 + 1) + 8 * v35);
          [v36 binary];
          uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue();
          [v36 segment];
          unsigned int v38 = (void *)objc_claimAutoreleasedReturnValue();
          [v36 exclave];
          v112 = (void *)objc_claimAutoreleasedReturnValue();
          [v37 bundleIdentifier];
          unsigned int v39 = (void *)objc_claimAutoreleasedReturnValue();
          int v40 = v39;
          if (v39)
          {
            int v41 = v39;
          }

          else
          {
            [v37 name];
            int v41 = (id)objc_claimAutoreleasedReturnValue();
          }

          if (([a1[2] displayBinaryImagesLackingNameOrPath] & 1) == 0
            && !v41
            && ((v34 | [a1[2] displayBinaryImageAddresses]) & 1) == 0)
          {
            goto LABEL_162;
          }

          memset(v131, 0, sizeof(v131));
          if ([v36 isInKernelAddressSpace])
          {
            LOWORD(v131[0]) = 42;
            v42 = 1LL;
          }

          else
          {
            v42 = 0LL;
          }

          v114 = v41;
          if ([a1[2] displayBinaryImageAddresses])
          {
            if ([v36 loadAddress])
            {
              unsigned int v43 = v42
                  + snprintf( (char *)((unint64_t)v131 | v42),  64 - v42,  "0x%llx",  [v36 loadAddress]);
              if (v43 >= 64)
              {
                int v83 = *__error();
                _sa_logt();
                unsigned int v84 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218242;
                  v126 = v43;
                  v127 = 2080;
                  v128 = v131;
                  _os_log_error_impl( &dword_186C92000,  v84,  OS_LOG_TYPE_ERROR,  "ran off end of adornment  (%ld): '%s'",  buf,  0x16u);
                }

                *__error() = v83;
                _SASetCrashLogMessage(7710, "ran off end of adornment  (%ld): '%s'", v86, v87, v88, v89, v90, v91, v43);
                _os_crash();
                __break(1u);
LABEL_173:
                int v92 = *__error();
                _sa_logt();
                v93 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v93, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218242;
                  v126 = v43;
                  v127 = 2080;
                  v128 = v131;
                  _os_log_error_impl( &dword_186C92000,  v93,  OS_LOG_TYPE_ERROR,  "ran off end of adornment  (%ld): '%s'",  buf,  0x16u);
                }

                *__error() = v92;
                _SASetCrashLogMessage(7713, "ran off end of adornment  (%ld): '%s'", v94, v95, v96, v97, v98, v99, v43);
                _os_crash();
                __break(1u);
              }
            }

            else
            {
              unsigned int v43 = v42 + snprintf((char *)((unint64_t)v131 | v42), 64 - v42, "%s", "???");
              if (v43 >= 64) {
                goto LABEL_173;
              }
            }

            objc_msgSend(a1[1], "printWithFormat:", @"%*s", 22, v131);
            if (v38)
            {
              int v46 = [v38 length];
              if (!v46)
              {
LABEL_83:
                int v46 = [v37 length];
                if (!v46) {
                  goto LABEL_99;
                }
              }

    unsigned int v44 = [v16 nextObject];

    unsigned int v29 = (void *)v44;
    if (!v44) {
      goto LABEL_33;
    }
  }

  [v71 threadStates];
  int v46 = (void *)objc_claimAutoreleasedReturnValue();
  int v47 = [v46 count] - 1;

  if (v47 <= v65)
  {
    [v71 exitTimestamp];
    unsigned int v50 = (void *)objc_claimAutoreleasedReturnValue();
    unsigned int v51 = v64;
    goto LABEL_41;
  }

  [v71 threadStates];
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  [v48 objectAtIndexedSubscript:v65 + 1];
  v49 = (void *)objc_claimAutoreleasedReturnValue();

  [v49 startTimestamp];
  unsigned int v50 = (void *)objc_claimAutoreleasedReturnValue();
  unsigned int v51 = v64;
  if (([v20 isIdleWorkQueue] & 1) != 0 || (objc_msgSend(v49, "isIdleWorkQueue") & 1) == 0)
  {
    int v45 = 0LL;
LABEL_46:

LABEL_59:
  }

  else
  {

LABEL_41:
    if (v50 && ![v50 gt:*(void *)(v51 + 40)])
    {
      unsigned int v66 = 1;
      goto LABEL_48;
    }

    int v52 = *(id *)(v51 + 40);

    if (v52)
    {
      unsigned int v66 = 0;
      unsigned int v50 = v52;
LABEL_48:
      int v45 = 0LL;
      int v53 = v50;
      while (1)
      {
        if (v66)
        {
          [v29 endTimestamp];
          v49 = (void *)objc_claimAutoreleasedReturnValue();
        }

        else
        {
          [v29 startTimestamp];
          int v54 = (void *)objc_claimAutoreleasedReturnValue();
          v55 = [v54 lt:v50];

          if (!v55)
          {
            unsigned int v50 = v53;
            goto LABEL_59;
          }
        }

        if (v45) {
          [v45 addObject:v29];
        }
        else {
          int v45 = (void *)objc_msgSend(objc_alloc(MEMORY[0x189603FA8]), "initWithObjects:", v29, 0);
        }
        unsigned int v50 = v53;
        v56 = [v16 nextObject];

        unsigned int v29 = (void *)v56;
        if (!v56) {
          goto LABEL_59;
        }
      }
    }

  if ((*(_BYTE *)(a1 + 56) & 8) != 0)
  {
    [*(id *)(a1 + 32) appendString:@" "];
    uint64_t v3 = v26;
LABEL_34:
    if (*(_BYTE *)(a1 + 64))
    {
      [*(id *)(a1 + 32) appendString:@"machcont:"];
      uint64_t v3 = v26;
    }

    if ([v3 machContTime]) {
      objc_msgSend(*(id *)(a1 + 32), "appendFormat:", @"%llu", objc_msgSend(v26, "machContTime"));
    }
    else {
      [*(id *)(a1 + 32) appendString:@"???"];
    }
  }

  if ((*(_BYTE *)(a1 + 56) & 0x10) == 0) {
    goto LABEL_46;
  }
  [*(id *)(a1 + 32) appendString:@" "];
LABEL_41:
  if (*(_BYTE *)(a1 + 64)) {
    [*(id *)(a1 + 32) appendString:@"machcontsec:"];
  }
  [v26 machContTimeSeconds];
  uint64_t v19 = *(void **)(a1 + 32);
  if (v20 == 0.0)
  {
    [v19 appendString:@"???"];
  }

  else
  {
    [v26 machContTimeSeconds];
    objc_msgSend(v19, "appendFormat:", @"%fs", v21);
  }

LABEL_126:
  int v85 = v8[1];
  objc_sync_exit(v8);

  return v85;
}

void sub_186CE3520(_Unwind_Exception *a1)
{
}

void sub_186CE3804(_Unwind_Exception *a1)
{
}

void sub_186CE3988(_Unwind_Exception *a1)
{
}

void sub_186CE3DB0(_Unwind_Exception *a1)
{
}

void sub_186CE43D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31)
{
}

void sub_186CE4630(_Unwind_Exception *a1)
{
}

void sub_186CE484C(_Unwind_Exception *a1)
{
}

void sub_186CE4A28(_Unwind_Exception *a1)
{
}

void sub_186CE4B5C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_186CE4F80(_Unwind_Exception *a1)
{
}

void sub_186CE5040( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_186CE517C(_Unwind_Exception *a1)
{
}

void sub_186CE5934( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id obj, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37)
{
}

void sub_186CE5BE0(_Unwind_Exception *a1)
{
}

void sub_186CE72A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31, uint64_t a32, uint64_t a33, uint64_t a34, char a35)
{
}

id _SABinaryCreateLoadInfoArrayFromDyldImageInfos( uint64_t a1, unsigned int a2, void *a3, os_log_s *a4, unsigned int a5, int a6)
{
  uint64_t v43 = *MEMORY[0x1895F89C0];
  id v40 = a3;
  if (a1 && a2)
  {
    if (a4 || !a5) {
      goto LABEL_12;
    }
    a6 = *__error();
    _sa_logt();
    a4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(a4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      unsigned int v42 = a5;
      _os_log_error_impl(&dword_186C92000, a4, OS_LOG_TYPE_ERROR, "%d text exec load infos, but NULL pointer", buf, 8u);
    }

    *__error() = a6;
    _SASetCrashLogMessage(3133, "%d text exec load infos, but NULL pointer", v11, v12, v13, v14, v15, v16, a5);
    _os_crash();
    __break(1u);
  }

  uint64_t v17 = 0LL;
  if (!a4 || !a5) {
    goto LABEL_28;
  }
  if (!a1 && a2)
  {
    int v32 = *__error();
    _sa_logt();
    uint64_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      unsigned int v42 = a2;
      _os_log_error_impl(&dword_186C92000, v33, OS_LOG_TYPE_ERROR, "%d load infos, but NULL pointer", buf, 8u);
    }

    *__error() = v32;
    _SASetCrashLogMessage(3132, "%d load infos, but NULL pointer", v34, v35, v36, v37, v38, v39, a2);
    _os_crash();
    __break(1u);
  }

void sub_186CE7FC0(_Unwind_Exception *a1)
{
}

void sub_186CE80E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_186CE88E4(_Unwind_Exception *a1)
{
}

void sub_186CE89B8(_Unwind_Exception *a1)
{
}

void sub_186CE8AF4(_Unwind_Exception *a1)
{
}

void sub_186CE8FBC(_Unwind_Exception *a1)
{
}

void sub_186CE96AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

void sub_186CE9844( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_186CEA534( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_186CEA86C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_186CEBFD0(_Unwind_Exception *a1)
{
}

void sub_186CED8D8(_Unwind_Exception *a1)
{
}

void sub_186CEDA68(_Unwind_Exception *a1)
{
}

LABEL_40:
}

    uint64_t v17 = 0LL;
    if (v8 == ++v20) {
      goto LABEL_17;
    }
  }

  if (!(v25 | v26)) {
    goto LABEL_40;
  }
  if (v25) {
    uint64_t v17 = -1LL;
  }
  else {
    uint64_t v17 = 1LL;
  }
LABEL_46:

LABEL_17:
  return v17;
}

LABEL_78:
  unsigned int v84 = @"Bad PASymbolOwner magic";
LABEL_80:
  +[SAException exceptionWithName:reason:userInfo:]( &OBJC_CLASS___SAException,  "exceptionWithName:reason:userInfo:",  @"Decoding failure",  v84,  0LL);
  int v85 = (id)objc_claimAutoreleasedReturnValue();
  objc_exception_throw(v85);
  +[SAPAStyleSymbol classDictionaryKey](v86, v87);
}

id SAFormattedSignedBytes(unint64_t a1, int a2, int a3)
{
  id v6 = objc_alloc(NSString);
  if ((a1 & 0x8000000000000000LL) != 0)
  {
    SAFormattedBytesEx(-(uint64_t)a1, a2, a3, 1, 0LL);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    uint64_t v8 = [v6 initWithFormat:@"-%@", v7];
  }

  else
  {
    SAFormattedBytesEx(a1, a2, a3, 1, 0LL);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    uint64_t v8 = [v6 initWithFormat:@"+%@", v7];
  }

  unsigned int v9 = (void *)v8;

  return v9;
}

id SAFormattedBytes(unint64_t a1, int a2, int a3)
{
  return SAFormattedBytesEx(a1, a2, a3, 1, 0LL);
}

id SAFormattedBytesEx(unint64_t a1, int a2, int a3, int a4, unint64_t a5)
{
  unint64_t v8 = 1000LL;
  if (a2)
  {
    unint64_t v8 = 1024LL;
    unint64_t v9 = 0x100000LL;
  }

  else
  {
    unint64_t v9 = 1000000LL;
  }

  if (a2) {
    unint64_t v10 = 0x40000000LL;
  }
  else {
    unint64_t v10 = 1000000000LL;
  }
  if (a3) {
    uint64_t v11 = "i";
  }
  else {
    uint64_t v11 = "";
  }
  if (10 * v8 <= a1 || v8 <= a5)
  {
    if (10 * v9 <= a1 || v9 <= a5)
    {
      double v20 = (double)a1;
      id v21 = objc_alloc(NSString);
      id v22 = " ";
      if (!a4) {
        id v22 = "";
      }
      if (10 * v10 <= a1 || v10 <= a5)
      {
        else {
          uint64_t v16 = (void *)[v21 initWithFormat:@"%.2f%sG%sB", v20 / (double)v10, v22, v11];
        }
      }

      else if (floor(v20 / (double)v9) == v20 / (double)v9)
      {
        uint64_t v16 = (void *)objc_msgSend(v21, "initWithFormat:", @"%.0f%sM%sB", v20 / (double)v9, v22, v11);
      }

      else
      {
        uint64_t v16 = (void *)[v21 initWithFormat:@"%.2f%sM%sB", v20 / (double)v9, v22, v11];
      }
    }

    else
    {
      unint64_t v17 = a1 / v8;
      id v18 = objc_alloc(NSString);
      uint64_t v19 = " ";
      if (!a4) {
        uint64_t v19 = "";
      }
      uint64_t v16 = (void *)objc_msgSend(v18, "initWithFormat:", @"%lld%sK%sB", v17, v19, v11);
    }
  }

  else
  {
    id v13 = objc_alloc(NSString);
    uint64_t v14 = "  ";
    if (!a4) {
      uint64_t v14 = "";
    }
    uint64_t v15 = " ";
    if ((a4 & a3) == 0) {
      uint64_t v15 = "";
    }
    uint64_t v16 = (void *)objc_msgSend(v13, "initWithFormat:", @"%lld%s%sB", a1, v14, v15);
  }

  return v16;
}

id SAFormattedBytesDouble(int a1, int a2, double a3)
{
  double v4 = 1000.0;
  if (a1)
  {
    double v4 = 1024.0;
    double v5 = 1048576.0;
  }

  else
  {
    double v5 = 1000000.0;
  }

  if (a1) {
    double v6 = 1073741820.0;
  }
  else {
    double v6 = 1000000000.0;
  }
  if (a2) {
    uint64_t v7 = "i";
  }
  else {
    uint64_t v7 = "";
  }
  if (v4 * 10.0 <= a3)
  {
    if (v5 * 10.0 <= a3)
    {
      id v15 = objc_alloc(NSString);
      if (v6 * 10.0 <= a3)
      {
        if (floor(a3 / v6) == a3 / v6) {
          uint64_t v12 = (void *)objc_msgSend(v15, "initWithFormat:", @"%.0f G%sB", a3 / v6, v7);
        }
        else {
          uint64_t v12 = (void *)[v15 initWithFormat:@"%.2f G%sB", a3 / v6, v7];
        }
      }

      else if (floor(a3 / v5) == a3 / v5)
      {
        uint64_t v12 = (void *)objc_msgSend(v15, "initWithFormat:", @"%.0f M%sB", a3 / v5, v7);
      }

      else
      {
        uint64_t v12 = (void *)[v15 initWithFormat:@"%.2f M%sB", a3 / v5, v7];
      }
    }

    else
    {
      double v13 = a3 / v4;
      id v14 = objc_alloc(NSString);
      if (floor(v13) == v13) {
        uint64_t v12 = (void *)objc_msgSend(v14, "initWithFormat:", @"%.0f K%sB", *(void *)&v13, v7);
      }
      else {
        uint64_t v12 = (void *)[v14 initWithFormat:@"%.2f K%sB", *(void *)&v13, v7];
      }
    }
  }

  else
  {
    double v9 = floor(a3);
    id v10 = objc_alloc(NSString);
    uint64_t v11 = " ";
    if (!a2) {
      uint64_t v11 = "";
    }
    if (v9 == a3) {
      uint64_t v12 = (void *)objc_msgSend(v10, "initWithFormat:", @"%.0f  %sB", *(void *)&a3, v11);
    }
    else {
      uint64_t v12 = (void *)[v10 initWithFormat:@"%.2f  %sB", *(void *)&a3, v11];
    }
  }

  return v12;
}

uint64_t SABinarySearchArray(void *a1, __int16 a2, uint64_t a3)
{
  uint64_t v5 = [a1 count];
  id v6 = (id)[MEMORY[0x189603FE8] null];
  if (!v5)
  {
    if ((a2 & 0x400) != 0) {
      return 0LL;
    }
    else {
      return 0x7FFFFFFFFFFFFFFFLL;
    }
  }

  uint64_t v29 = a2 & 0x200;
  id v30 = v6;
  if ((unint64_t)v5 >= 0x101)
  {
    uint64_t v7 = v5 - 1;
    [a1 objectAtIndex:v5 - 1];
    id v8 = (id)objc_claimAutoreleasedReturnValue();
    double v9 = *(uint64_t (**)(uint64_t))(a3 + 16);
    if (v8 == v30)
    {
      uint64_t v10 = v9(a3);
      if ((v10 & 0x8000000000000000LL) == 0)
      {
LABEL_5:
        if (v10 | a2 & 0x100)
        {
          [a1 objectAtIndex:0];
          uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue();

          uint64_t v12 = (*(uint64_t (**)(uint64_t, void *))(a3 + 16))(a3, v11);
          if (v12 < 0)
          {
            uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
          }

          else
          {
            uint64_t v13 = v12 | v29;
            if (v12 | v29)
            {

              goto LABEL_9;
            }
          }

          if ((a2 & 0x400) != 0) {
            uint64_t v7 = 0LL;
          }
          else {
            uint64_t v7 = v13;
          }
          id v8 = v11;
LABEL_54:

          return v7;
        }

uint64_t CopyLoadInfosForLiveProcess( BOOL a1, uint64_t a2, id *a3, void *a4, id *a5, void *a6, uint64_t *a7, int a8)
{
  uint64_t v12 = a3;
  uint64_t v14 = (void *)a1;
  uint64_t v115 = *MEMORY[0x1895F89C0];
  if (a3) {
    *a3 = 0LL;
  }
  if (a4) {
    *a4 = 0LL;
  }
  if (a5) {
    *a5 = 0LL;
  }
  if (a6) {
    *a6 = 0LL;
  }
  if (a7) {
    *a7 = 0LL;
  }
  if (!a1) {
    goto LABEL_27;
  }
  uint64_t v15 = CopyDyldSnapshotForPid(a1);
  if (!v15)
  {
    int v22 = kill((pid_t)v14, 0);
    int v17 = *__error();
    _sa_logt();
    BOOL v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v18 = v23;
    if (v22)
    {
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109120;
        int v104 = (int)v14;
        _os_log_debug_impl( &dword_186C92000,  v18,  OS_LOG_TYPE_DEBUG,  "[%d]: Process no longer alive, unable to inspect for load infos",  buf,  8u);
      }

      *__error() = v17;
      return 4294967294LL;
    }

    if (!os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
      goto LABEL_26;
    }
    *(_DWORD *)buf = 67109120;
    int v104 = (int)v14;
    uint64_t v19 = "[%d]: Process alive, but unable to inspect for load infos via dyld introspection, trying CoreSymbolication";
    id v20 = v18;
    uint32_t v21 = 8;
    goto LABEL_73;
  }

  int InfosForDyldSnapshot = _CopyLoadInfosForDyldSnapshot(v15, (int)v14, 0, a2, v12, a5, a6, a7);
  dyld_process_snapshot_dispose();
  if (InfosForDyldSnapshot)
  {
    int v17 = *__error();
    _sa_logt();
    uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
LABEL_26:

      *__error() = v17;
LABEL_27:
      uint64_t SymbolicatorForLiveProcess = CreateSymbolicatorForLiveProcess((BOOL)v14, a8);
      uint64_t v33 = v32;
      if (!CSIsNull())
      {
        int v38 = *__error();
        _sa_logt();
        uint64_t v39 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67109120;
          int v104 = (int)v14;
          _os_log_debug_impl(&dword_186C92000, v39, OS_LOG_TYPE_DEBUG, "[%d]: Inspected live process via CS", buf, 8u);
        }

        *__error() = v38;
        if (a5)
        {
          +[SASharedCache sharedCacheWithCSSymbolicator:]();
          *a5 = (id)objc_claimAutoreleasedReturnValue();
        }

        if (v12)
        {
          uint64_t v40 = objc_opt_self();
          +[SABinaryLoadInfo binaryLoadInfoForSymbolicator:isKernel:dataGatheringOptions:excludeRange:ignoreSharedCache:]( v40,  SymbolicatorForLiveProcess,  v33,  (_DWORD)v14 == 0,  a2);
          *uint64_t v12 = (id)objc_claimAutoreleasedReturnValue();
        }

        if (a7) {
          *a7 = CSSymbolicatorGetArchitecture();
        }
        if (a6)
        {
          uint64_t AOutSymbolOwner = CSSymbolicatorGetAOutSymbolOwner();
          uint64_t v43 = v42;
          if ((CSIsNull() & 1) == 0)
          {
            +[SABinary binaryWithSymbolOwner:fromDisk:]((uint64_t)&OBJC_CLASS___SABinary, AOutSymbolOwner, v43, 0);
            unsigned int v44 = (void *)objc_claimAutoreleasedReturnValue();
            int v45 = v44;
            if (v44) {
              *a6 = v44;
            }
          }
        }

        goto LABEL_44;
      }

      int v34 = kill((pid_t)v14, 0);
      int v35 = *__error();
      _sa_logt();
      uint64_t v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v37 = v36;
      if (v34)
      {
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67109120;
          int v104 = (int)v14;
          _os_log_debug_impl( &dword_186C92000,  v37,  OS_LOG_TYPE_DEBUG,  "[%d]: Process no longer alive, unable to inspect for load infos",  buf,  8u);
        }
      }

      else if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        int v104 = (int)v14;
        _os_log_error_impl( &dword_186C92000,  v37,  OS_LOG_TYPE_ERROR,  "[%d]: Process alive, but unable to inspect for load infos via CoreSymbolication",  buf,  8u);
      }

      *__error() = v35;
      return 0xFFFFFFFFLL;
    }

    *(_DWORD *)buf = 67109376;
    int v104 = (int)v14;
    __int16 v105 = 1024;
    LODWORD(v106) = InfosForDyldSnapshot;
    uint64_t v19 = "[%d]: Failed to get load infos via dyld introspection (%d), trying CoreSymbolication";
    id v20 = v18;
    uint32_t v21 = 14;
LABEL_73:
    _os_log_error_impl(&dword_186C92000, v20, OS_LOG_TYPE_ERROR, v19, buf, v21);
    goto LABEL_26;
  }

  uint64_t v91 = CreateSymbolicatorForLiveProcess((BOOL)v14, a8);
  uint64_t v92 = v25;
  char v26 = CSIsNull();
  int v27 = *__error();
  _sa_logt();
  __int16 v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  uint64_t v29 = v28;
  if ((v26 & 1) != 0)
  {
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      int v104 = (int)v14;
      _os_log_error_impl( &dword_186C92000,  v29,  OS_LOG_TYPE_ERROR,  "[%d]: Unable to inspect live process via CS to compare to dyld",  buf,  8u);
    }

    id v30 = __error();
    uint64_t result = 0LL;
    int *v30 = v27;
    return result;
  }

  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    int v104 = (int)v14;
    _os_log_debug_impl( &dword_186C92000,  v29,  OS_LOG_TYPE_DEBUG,  "[%d]: Inspected live process via CS to compare to dyld",  buf,  8u);
  }

  *__error() = v27;
  int v90 = (int)v14;
  if (a5)
  {
    +[SASharedCache sharedCacheWithCSSymbolicator:]();
    id v46 = (id)objc_claimAutoreleasedReturnValue();
    if (v46 != *a5)
    {
      int v79 = *__error();
      _sa_logt();
      int v80 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v80, OS_LOG_TYPE_FAULT))
      {
        [v46 debugDescription];
        int v83 = (char *)objc_claimAutoreleasedReturnValue();
        [*a5 debugDescription];
        unsigned int v84 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 67109634;
        int v104 = (int)v14;
        __int16 v105 = 2112;
        v106 = v83;
        __int16 v107 = 2112;
        v108 = v84;
        _os_log_fault_impl( &dword_186C92000,  v80,  OS_LOG_TYPE_FAULT,  "[%d]: CS shared cache %@ vs dyld shared cache %@",  buf,  0x1Cu);
      }

      *__error() = v79;
    }
  }

  if (!v12) {
    goto LABEL_44;
  }
  uint64_t v47 = objc_opt_self();
  v48 = +[SABinaryLoadInfo binaryLoadInfoForSymbolicator:isKernel:dataGatheringOptions:excludeRange:ignoreSharedCache:]( v47,  v91,  v92,  0LL,  a2);
  uint64_t v49 = [v48 count];
  if (v49 != [*v12 count])
  {
    int v81 = *__error();
    _sa_logt();
    int v82 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v82, OS_LOG_TYPE_FAULT))
    {
      [v48 debugDescription];
      int v85 = (char *)objc_claimAutoreleasedReturnValue();
      [*v12 debugDescription];
      int v86 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 67109634;
      int v104 = (int)v14;
      __int16 v105 = 2112;
      v106 = v85;
      __int16 v107 = 2112;
      v108 = v86;
      _os_log_fault_impl( &dword_186C92000,  v82,  OS_LOG_TYPE_FAULT,  "[%d]: CS load infos %@ vs dyld load infos %@",  buf,  0x1Cu);
    }

    *__error() = v81;
  }

  uint64_t v50 = [v48 count];
  if (v50 != [*v12 count] || !objc_msgSend(v48, "count")) {
    goto LABEL_78;
  }
  unsigned int v51 = 0LL;
  unsigned int v88 = v48;
  while (1)
  {
    [v48 objectAtIndexedSubscript:v51];
    int v52 = (void *)objc_claimAutoreleasedReturnValue();
    uint64_t v53 = [v52 loadAddress];
    [*v12 objectAtIndexedSubscript:v51];
    int v54 = (void *)objc_claimAutoreleasedReturnValue();
    if (v53 != [v54 loadAddress]) {
      break;
    }
    [v48 objectAtIndexedSubscript:v51];
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    [v55 binary];
    v101 = (void *)objc_claimAutoreleasedReturnValue();
    [v101 uuid];
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    [*v12 objectAtIndexedSubscript:v51];
    v57 = (void *)objc_claimAutoreleasedReturnValue();
    [v57 binary];
    uint64_t v100 = (void *)objc_claimAutoreleasedReturnValue();
    [v100 uuid];
    v99 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v56, "isEqual:"))
    {
      [v48 objectAtIndexedSubscript:v51];
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue();
      uint64_t v98 = [v14 segment];
      if (v98
        || ([*v12 objectAtIndexedSubscript:v51],
            int v87 = (void *)objc_claimAutoreleasedReturnValue(),
            [v87 segment],
            (unsigned int v89 = (void *)objc_claimAutoreleasedReturnValue()) != 0LL))
      {
        [v48 objectAtIndexedSubscript:v51];
        v93 = (void *)objc_claimAutoreleasedReturnValue();
        [v93 segment];
        v96 = v54;
        uint64_t v58 = (void *)objc_claimAutoreleasedReturnValue();
        [v58 name];
        v95 = v55;
        v59 = (void *)objc_claimAutoreleasedReturnValue();
        [*v12 objectAtIndexedSubscript:v51];
        v94 = v56;
        unsigned int v60 = (void *)objc_claimAutoreleasedReturnValue();
        [v60 segment];
        unsigned int v61 = v14;
        int v62 = v12;
        int v63 = v52;
        v64 = (void *)objc_claimAutoreleasedReturnValue();
        [v64 name];
        unsigned int v65 = v57;
        unsigned int v66 = (void *)objc_claimAutoreleasedReturnValue();
        char v97 = [v59 isEqual:v66];

        v57 = v65;
        int v52 = v63;
        uint64_t v12 = v62;
        uint64_t v14 = v61;

        v48 = v88;
        v56 = v94;

        v55 = v95;
        int v54 = v96;

        v67 = (void *)v98;
        if (!v98)
        {
LABEL_66:
          v68 = v48;
          unsigned int v69 = v67;

          v67 = v69;
          v48 = v68;
        }

        LODWORD(v14) = v90;
        char v70 = v97;
        goto LABEL_68;
      }

      unsigned int v89 = 0LL;
      char v97 = 1;
      v67 = 0LL;
      goto LABEL_66;
    }

    char v70 = 0;
LABEL_68:

    if ((v70 & 1) == 0) {
      goto LABEL_75;
    }
  }

LABEL_75:
  int v71 = *__error();
  _sa_logt();
  int v72 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v72, OS_LOG_TYPE_FAULT))
  {
    [v48 objectAtIndexedSubscript:v51];
    v102 = (void *)objc_claimAutoreleasedReturnValue();
    [v102 debugDescription];
    int v73 = (void *)objc_claimAutoreleasedReturnValue();
    [*v12 objectAtIndexedSubscript:v51];
    v74 = (void *)objc_claimAutoreleasedReturnValue();
    [v74 debugDescription];
    v75 = (void *)objc_claimAutoreleasedReturnValue();
    [v48 debugDescription];
    v76 = v48;
    unsigned int v77 = (void *)objc_claimAutoreleasedReturnValue();
    [*v12 debugDescription];
    unsigned int v78 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 67110402;
    int v104 = (int)v14;
    __int16 v105 = 2048;
    v106 = v51;
    __int16 v107 = 2112;
    v108 = v73;
    __int16 v109 = 2112;
    v110 = v75;
    __int16 v111 = 2112;
    v112 = v77;
    __int16 v113 = 2112;
    v114 = v78;
    _os_log_fault_impl( &dword_186C92000,  v72,  OS_LOG_TYPE_FAULT,  "[%d]: index %lu CS load info %@ vs dyld %@\n%@\nvs\n%@",  buf,  0x3Au);

    v48 = v76;
  }

  *__error() = v71;
LABEL_78:

LABEL_44:
  CSRelease();
  return 0LL;
}

uint64_t CreateSymbolicatorForLiveProcess(BOOL a1, int a2)
{
  uint64_t v40 = *MEMORY[0x1895F89C0];
  uint64_t v26 = 0LL;
  int v27 = (double *)&v26;
  uint64_t v28 = 0x2020000000LL;
  uint64_t v29 = 0LL;
  if (qword_18C4B1678 != -1) {
    dispatch_once(&qword_18C4B1678, &__block_literal_global_5);
  }
  id v4 = (id)qword_18C4B1670;
  objc_sync_enter(v4);
  uint64_t v5 = qword_18C4B1670;
  [MEMORY[0x189607968] numberWithInt:a1];
  id v6 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v5) = [(id)v5 containsObject:v6];

  objc_sync_exit(v4);
  if ((v5 & 1) != 0 || _AvoidSuspendingPid(a1))
  {
    uint64_t v7 = 0LL;
  }

  else
  {
    uint64_t v22 = 0LL;
    BOOL v23 = &v22;
    uint64_t v24 = 0x3010000000LL;
    uint64_t v25 = &unk_186DA1DC3;
    if (a1)
    {
      block[0] = MEMORY[0x1895F87A8];
      block[1] = 3221225472LL;
      block[2] = __CreateSymbolicatorForLiveProcess_block_invoke_2;
      block[3] = &unk_189F63120;
      BOOL v20 = a1;
      int v21 = a2 | 0x80000;
      block[4] = &v22;
      block[5] = &v26;
      id v8 = (void (**)(void))dispatch_block_create_with_qos_class( DISPATCH_BLOCK_ENFORCE_QOS_CLASS,  QOS_CLASS_USER_INTERACTIVE,  0,  block);
      v8[2]();
    }

    else
    {
      uint64_t v9 = CSSymbolicatorCreateWithMachKernelFlagsAndNotification();
      uint64_t v10 = v23;
      v23[4] = v9;
      v10[5] = v11;
    }

    if (CSIsNull())
    {
      id v12 = (id)qword_18C4B1670;
      objc_sync_enter(v12);
      uint64_t v13 = (void *)qword_18C4B1670;
      [MEMORY[0x189607968] numberWithInt:a1];
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue();
      [v13 addObject:v14];

      objc_sync_exit(v12);
    }

    else if (a1)
    {
      ++_MergedGlobals_6;
      *(double *)&qword_18C4B1680 = v27[3] + *(double *)&qword_18C4B1680;
      int v15 = *__error();
      _sa_logt();
      uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v18 = *((void *)v27 + 3);
        *(_DWORD *)buf = 67110144;
        BOOL v31 = a1;
        __int16 v32 = 2048;
        uint64_t v33 = v18;
        __int16 v34 = 1024;
        int v35 = _MergedGlobals_6;
        __int16 v36 = 2048;
        uint64_t v37 = qword_18C4B1680;
        __int16 v38 = 2048;
        double v39 = *(double *)&qword_18C4B1680 / (double)_MergedGlobals_6;
        _os_log_debug_impl( &dword_186C92000,  v16,  OS_LOG_TYPE_DEBUG,  "[%d]: Inspected live process via cs introspection in %fs (%d totaling %fs, %fs avg)",  buf,  0x2Cu);
      }

      *__error() = v15;
    }

    uint64_t v7 = v23[4];
    _Block_object_dispose(&v22, 8);
  }

  _Block_object_dispose(&v26, 8);
  return v7;
}

void sub_186CF8130( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void __CreateSymbolicatorForLiveProcess_block_invoke()
{
  id v0 = objc_alloc_init(MEMORY[0x189603FE0]);
  uint64_t v1 = (void *)qword_18C4B1670;
  qword_18C4B1670 = (uint64_t)v0;
}

void __CreateSymbolicatorForLiveProcess_block_invoke_2(uint64_t a1)
{
  uint64_t v2 = mach_absolute_time();
  double v3 = SASecondsFromMachTimeUsingLiveTimebase(v2);
  uint64_t v4 = CSSymbolicatorCreateWithPidFlagsAndNotification();
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8LL);
  *(void *)(v5 + 32) = v4;
  *(void *)(v5 + 40) = v6;
  if ((CSIsNull() & 1) == 0)
  {
    uint64_t v7 = mach_absolute_time();
    *(double *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = SASecondsFromMachTimeUsingLiveTimebase(v7) - v3;
  }

uint64_t CreateSymbolOwnerForUUIDAtPath(void *a1, void *a2, int a3)
{
  uint64_t v111 = *MEMORY[0x1895F89C0];
  id v5 = a2;
  [a1 getUUIDBytes:&v100];
  v97[0] = MEMORY[0x1895F87A8];
  v97[1] = 3221225472LL;
  v97[2] = __CreateSymbolOwnerForUUIDAtPath_block_invoke;
  v97[3] = &__block_descriptor_52_e32___CSTypeRef_QQ_16__0__NSString_8l;
  int v98 = a3 | 0x80000;
  __int128 v99 = v100;
  int v73 = (uint64_t (**)(void, void))MEMORY[0x186E47C94](v97);
  uint64_t v6 = ((uint64_t (**)(void, id))v73)[2](v73, v5);
  if ((CSIsNull() & 1) != 0)
  {
    if ([v5 isAbsolutePath])
    {
      [v5 substringFromIndex:1];
      id v7 = (id)objc_claimAutoreleasedReturnValue();
    }

    else
    {
      id v7 = v5;
    }

    v75 = v7;
    uint64_t v8 = SAGetHomeDirectoryURL();
    v64 = (void *)v8;
    if (v8)
    {
      [MEMORY[0x189604030] fileURLWithPath:@"Library" relativeToURL:v8];
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
      uint64_t v10 = [v9 absoluteURL];
    }

    else
    {
      uint64_t v10 = 0LL;
    }

    [MEMORY[0x1896078A8] defaultManager];
    v74 = (void *)objc_claimAutoreleasedReturnValue();
    [v74 URLsForDirectory:5 inDomains:3];
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue();
    uint64_t v12 = v11;
    if (v10)
    {
      __int128 v95 = 0u;
      __int128 v96 = 0u;
      __int128 v93 = 0u;
      __int128 v94 = 0u;
      id v13 = v11;
      uint64_t v14 = [v13 countByEnumeratingWithState:&v93 objects:v110 count:16];
      if (v14)
      {
        uint64_t v15 = v14;
        uint64_t v16 = *(void *)v94;
        while (2)
        {
          for (uint64_t i = 0LL; i != v15; ++i)
          {
            if (*(void *)v94 != v16) {
              objc_enumerationMutation(v13);
            }
            if ([*(id *)(*((void *)&v93 + 1) + 8 * i) isEqual:v10])
            {
              uint64_t v12 = v13;
              goto LABEL_19;
            }
          }

          uint64_t v15 = [v13 countByEnumeratingWithState:&v93 objects:v110 count:16];
          if (v15) {
            continue;
          }
          break;
        }
      }

      uint64_t v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x189603FA8]), "initWithCapacity:", objc_msgSend(v13, "count") + 1);
      [v12 addObject:v10];
      [v12 addObjectsFromArray:v13];
LABEL_19:
    }

    int v63 = (void *)v10;
    id v65 = v5;
    __int128 v91 = 0u;
    __int128 v92 = 0u;
    __int128 v89 = 0u;
    __int128 v90 = 0u;
    id v18 = v12;
    uint64_t v59 = [v18 countByEnumeratingWithState:&v89 objects:v109 count:16];
    if (v59)
    {
      uint64_t v19 = *(void *)v90;
      uint64_t v20 = *MEMORY[0x189603D00];
      uint64_t v76 = *MEMORY[0x189603C48];
      unint64_t v21 = 0x189603000uLL;
      unint64_t v22 = 0x189604000uLL;
      uint64_t v61 = *MEMORY[0x189603D00];
      int v62 = v18;
      uint64_t v58 = *(void *)v90;
      do
      {
        uint64_t v23 = 0LL;
        do
        {
          if (*(void *)v90 != v19) {
            objc_enumerationMutation(v18);
          }
          uint64_t v60 = v23;
          uint64_t v24 = [*(id *)(v22 + 48) fileURLWithPath:@"Developer/Xcode" isDirectory:1 relativeToURL:*(void *)(*((void *)&v89 + 1) + 8 * v23)];
          uint64_t v108 = v20;
          [*(id *)(v21 + 3864) arrayWithObjects:&v108 count:1];
          uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue();
          unsigned int v66 = (void *)v24;
          [v74 enumeratorAtURL:v24 includingPropertiesForKeys:v25 options:1 errorHandler:0];
          uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue();

          __int128 v87 = 0u;
          __int128 v88 = 0u;
          __int128 v85 = 0u;
          __int128 v86 = 0u;
          id v27 = v26;
          uint64_t v72 = [v27 countByEnumeratingWithState:&v85 objects:v107 count:16];
          if (v72)
          {
            uint64_t v71 = *(void *)v86;
            v67 = v27;
            do
            {
              for (uint64_t j = 0LL; j != v72; ++j)
              {
                if (*(void *)v86 != v71) {
                  objc_enumerationMutation(v27);
                }
                uint64_t v29 = *(void **)(*((void *)&v85 + 1) + 8 * j);
                id v83 = 0LL;
                id v84 = 0LL;
                char v30 = [v29 getResourceValue:&v84 forKey:v20 error:&v83];
                id v31 = v84;
                id v32 = v83;
                if ((v30 & 1) != 0)
                {
                  objc_opt_class();
                  if ((objc_opt_isKindOfClass() & 1) != 0
                    && [v31 containsString:@"DeviceSupport"])
                  {
                    unsigned int v69 = v31;
                    char v70 = v32;
                    uint64_t v68 = j;
                    uint64_t v102 = v76;
                    [*(id *)(v21 + 3864) arrayWithObjects:&v102 count:1];
                    uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue();
                    [v74 enumeratorAtURL:v29 includingPropertiesForKeys:v33 options:1 errorHandler:0];
                    __int16 v34 = (void *)objc_claimAutoreleasedReturnValue();

                    __int128 v81 = 0u;
                    __int128 v82 = 0u;
                    __int128 v79 = 0u;
                    __int128 v80 = 0u;
                    id v35 = v34;
                    uint64_t v36 = [v35 countByEnumeratingWithState:&v79 objects:v101 count:16];
                    if (v36)
                    {
                      uint64_t v37 = v36;
                      uint64_t v38 = *(void *)v80;
                      do
                      {
                        uint64_t v39 = 0LL;
                        do
                        {
                          if (*(void *)v80 != v38) {
                            objc_enumerationMutation(v35);
                          }
                          uint64_t v40 = *(void **)(*((void *)&v79 + 1) + 8 * v39);
                          id v77 = 0LL;
                          id v78 = 0LL;
                          char v41 = [v40 getResourceValue:&v78 forKey:v76 error:&v77];
                          id v42 = v78;
                          id v43 = v77;
                          if ((v41 & 1) != 0)
                          {
                            objc_opt_class();
                            if ((objc_opt_isKindOfClass() & 1) != 0 && [v42 BOOLValue])
                            {
                              [*(id *)(v22 + 48) fileURLWithPath:v75 relativeToURL:v40];
                              unsigned int v44 = (void *)objc_claimAutoreleasedReturnValue();
                              [v44 path];
                              int v45 = (void *)objc_claimAutoreleasedReturnValue();

                              if (v45 && [v74 fileExistsAtPath:v45])
                              {
                                uint64_t v6 = ((uint64_t (**)(void, void *))v73)[2](v73, v45);
                                if ((CSIsNull() & 1) == 0) {
                                  goto LABEL_68;
                                }
                              }

                              else
                              {
                                v48 = (void *)MEMORY[0x189604030];
                                [MEMORY[0x189604030] fileURLWithPath:@"Symbols" relativeToURL:v40];
                                uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue();
                                [v48 fileURLWithPath:v75 relativeToURL:v49];
                                uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue();
                                uint64_t v51 = [v50 path];

                                if (v51)
                                {
                                  if ([v74 fileExistsAtPath:v51])
                                  {
                                    uint64_t v6 = v73[2](v73, v51);
                                    if (!CSIsNull())
                                    {
                                      int v45 = (void *)v51;
LABEL_68:

                                      id v18 = v62;
                                      goto LABEL_69;
                                    }
                                  }

                                  int v45 = (void *)v51;
                                }

                                else
                                {
                                  int v45 = 0LL;
                                }
                              }

                              unint64_t v22 = 0x189604000LL;
                            }
                          }

                          else
                          {
                            int v46 = *__error();
                            _sa_logt();
                            uint64_t v47 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                            if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
                            {
                              *(_DWORD *)buf = 138412546;
                              int v104 = v40;
                              __int16 v105 = 2112;
                              id v106 = v43;
                              _os_log_error_impl( &dword_186C92000,  v47,  OS_LOG_TYPE_ERROR,  "Error getting isDir for %@: %@",  buf,  0x16u);
                            }

                            *__error() = v46;
                          }

                          ++v39;
                        }

                        while (v37 != v39);
                        uint64_t v52 = [v35 countByEnumeratingWithState:&v79 objects:v101 count:16];
                        uint64_t v37 = v52;
                      }

                      while (v52);
                    }

                    uint64_t v20 = v61;
                    unint64_t v21 = 0x189603000LL;
                    id v27 = v67;
                    uint64_t j = v68;
                    id v31 = v69;
                    id v32 = v70;
                  }
                }

                else
                {
                  uint64_t v53 = j;
                  int v54 = *__error();
                  _sa_logt();
                  v55 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 138412546;
                    int v104 = v29;
                    __int16 v105 = 2112;
                    id v106 = v32;
                    _os_log_error_impl( &dword_186C92000,  v55,  OS_LOG_TYPE_ERROR,  "Error getting name for %@: %@",  buf,  0x16u);
                  }

                  *__error() = v54;
                  uint64_t j = v53;
                }
              }

              uint64_t v72 = [v27 countByEnumeratingWithState:&v85 objects:v107 count:16];
            }

            while (v72);
          }

          uint64_t v23 = v60 + 1;
          id v18 = v62;
          uint64_t v19 = v58;
        }

        while (v60 + 1 != v59);
        uint64_t v56 = [v62 countByEnumeratingWithState:&v89 objects:v109 count:16];
        uint64_t v19 = v58;
        uint64_t v6 = 0LL;
        uint64_t v59 = v56;
      }

      while (v56);
    }

    else
    {
      uint64_t v6 = 0LL;
    }

uint64_t __CreateSymbolOwnerForUUIDAtPath_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v5 = 0LL;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x3010000000LL;
  uint64_t v9 = 0LL;
  uint64_t v10 = 0LL;
  uint64_t v8 = &unk_186DA1DC3;
  id v2 = a2;
  [v2 UTF8String];
  CSSymbolicatorForeachSymbolicatorWithPathFlagsAndNotification();
  uint64_t v3 = v6[4];
  _Block_object_dispose(&v5, 8);

  return v3;
}

void sub_186CF8B78( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t __CreateSymbolOwnerForUUIDAtPath_block_invoke_2(uint64_t a1)
{
  uint64_t result = CSIsNull();
  if ((_DWORD)result)
  {
    CSSymbolicatorGetSymbolOwnerWithCFUUIDBytesAtTime();
    uint64_t result = CSIsNull();
    if ((result & 1) == 0)
    {
      uint64_t result = CSRetain();
      uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8LL);
      *(void *)(v3 + 32) = result;
      *(void *)(v3 + 40) = v4;
    }
  }

  return result;
}

id SAGetHomeDirectoryURL()
{
  id v0 = (void *)objc_claimAutoreleasedReturnValue();
  if (v0)
  {
    [MEMORY[0x189604030] fileURLWithPath:v0 isDirectory:1];
    uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue();
  }

  else
  {
    uint64_t v1 = 0LL;
  }

  return v1;
}

uint64_t CreateSymbolOwnerForArchitectureAtPath(uint64_t a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    id v5 = v3;
    [v5 UTF8String];
    CSSymbolicatorCreateWithPathArchitectureFlagsAndNotification();
    uint64_t SymbolOwner = CSSymbolicatorGetSymbolOwner();
    if ((CSIsNull() & 1) != 0)
    {
      int v7 = *__error();
      _sa_logt();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 138412802;
        *(void *)&uint8_t buf[4] = v5;
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = CSSymbolicatorGetSymbolOwnerCountAtTime();
        *(_WORD *)&buf[22] = 2082;
        FamilyName = (void *)CSArchitectureGetFamilyName();
        _os_log_fault_impl( &dword_186C92000,  v8,  OS_LOG_TYPE_FAULT,  "No symbol owner at %@: %zu exist for arch %{public}s",  buf,  0x20u);
      }

      *__error() = v7;
    }

    else
    {
      uint64_t SymbolOwner = CSRetain();
    }

    CSRelease();
  }

  else
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x3010000000LL;
    uint64_t v25 = 0LL;
    uint64_t v26 = 0LL;
    FamilyName = &unk_186DA1DC3;
    uint64_t v15 = 0LL;
    uint64_t v16 = &v15;
    uint64_t v17 = 0x2020000000LL;
    int v18 = 0;
    id v9 = v3;
    [v9 UTF8String];
    id v10 = v9;
    CSSymbolicatorForeachSymbolicatorWithPathFlagsAndNotification();
    if (*((_DWORD *)v16 + 6) != 1)
    {
      int v11 = *__error();
      _sa_logt();
      uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        int v14 = *((_DWORD *)v16 + 6);
        *(_DWORD *)uint64_t v19 = 138412546;
        id v20 = v10;
        __int16 v21 = 1024;
        int v22 = v14;
        _os_log_error_impl( &dword_186C92000,  v12,  OS_LOG_TYPE_ERROR,  "Unable to uniquely identify symbol owner at %@: %d symbol owners exist",  v19,  0x12u);
      }

      *__error() = v11;
    }

    uint64_t SymbolOwner = *(void *)(*(void *)&buf[8] + 32LL);

    _Block_object_dispose(&v15, 8);
    _Block_object_dispose(buf, 8);
  }

  return SymbolOwner;
}

void sub_186CF8F4C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __CreateSymbolOwnerForArchitectureAtPath_block_invoke(void *a1)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  if (*(_DWORD *)(*(void *)(a1[5] + 8LL) + 24LL))
  {
    uint64_t result = CSIsNull();
    if ((result & 1) == 0)
    {
      uint64_t result = CSRelease();
      uint64_t v3 = *(void *)(a1[6] + 8LL);
      *(void *)(v3 + 32) = 0LL;
      *(void *)(v3 + 40) = 0LL;
    }
  }

  else
  {
    uint64_t SymbolOwner = CSSymbolicatorGetSymbolOwner();
    uint64_t v5 = *(void *)(a1[6] + 8LL);
    *(void *)(v5 + 32) = SymbolOwner;
    *(void *)(v5 + 40) = v6;
    if ((CSIsNull() & 1) != 0)
    {
      int v7 = *__error();
      _sa_logt();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      {
        uint64_t v11 = a1[4];
        int v12 = 138412546;
        uint64_t v13 = v11;
        __int16 v14 = 2048;
        uint64_t SymbolOwnerCountAtTime = CSSymbolicatorGetSymbolOwnerCountAtTime();
        _os_log_fault_impl( &dword_186C92000,  v8,  OS_LOG_TYPE_FAULT,  "No symbol owner at %@: %zu exist",  (uint8_t *)&v12,  0x16u);
      }

      uint64_t result = (uint64_t)__error();
      *(_DWORD *)uint64_t result = v7;
    }

    else
    {
      uint64_t result = CSRetain();
      uint64_t v9 = *(void *)(a1[6] + 8LL);
      *(void *)(v9 + 32) = result;
      *(void *)(v9 + 40) = v10;
    }
  }

  ++*(_DWORD *)(*(void *)(a1[5] + 8LL) + 24LL);
  return result;
}

uint64_t CreateSymbolOwnerForExclaveUUID(void *a1)
{
  if ((CSIsNull() & 1) != 0) {
    return 0LL;
  }
  uint64_t SymbolOwner = CSSymbolicatorGetSymbolOwner();
  if ((CSIsNull() & 1) == 0) {
    CSRetain();
  }
  CSRelease();
  return SymbolOwner;
}

uint64_t SASpawnPlatformBinary( const char *a1, char *const *a2, char *const *a3, cpu_type_t *a4, int a5, _DWORD *a6, char a7, _DWORD *a8, char a9, _DWORD *a10)
{
  return _SASpawnPlatformBinaryWithSigningIdentifier(a1, 0LL, a2, a3, a4, 0LL, a5, a6, a7, a8, a9, a10);
}

uint64_t _SASpawnPlatformBinaryWithSigningIdentifier( const char *a1, void *a2, char *const *a3, char *const *a4, cpu_type_t *a5, void *a6, int a7, _DWORD *a8, char a9, _DWORD *a10, char a11, _DWORD *a12)
{
  uint64_t v100 = *MEMORY[0x1895F89C0];
  *(void *)__int128 v99 = -1LL;
  *(void *)char v97 = -1LL;
  *(void *)int v98 = -1LL;
  if (a8 && a7)
  {
    int v59 = *__error();
    _sa_logt();
    uint64_t v60 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl( &dword_186C92000,  v60,  OS_LOG_TYPE_ERROR,  "Cannot specify inheritStdout and provide stdout_out",  buf,  2u);
    }

    *__error() = v59;
    _SASetCrashLogMessage(607, "Cannot specify inheritStdout and provide stdout_out", v61, v62, v63, v64, v65, v66, v87);
    _os_crash();
    __break(1u);
    goto LABEL_112;
  }

  if (a10) {
    BOOL v17 = a9 == 0;
  }
  else {
    BOOL v17 = 1;
  }
  if (!v17)
  {
LABEL_112:
    int v67 = *__error();
    _sa_logt();
    uint64_t v68 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl( &dword_186C92000,  v68,  OS_LOG_TYPE_ERROR,  "Cannot specify inheritStderr and provide stderr_out",  buf,  2u);
    }

    *__error() = v67;
    _SASetCrashLogMessage(608, "Cannot specify inheritStderr and provide stderr_out", v69, v70, v71, v72, v73, v74, v87);
    _os_crash();
    __break(1u);
    goto LABEL_115;
  }

  if (a12) {
    BOOL v18 = a11 == 0;
  }
  else {
    BOOL v18 = 1;
  }
  if (!v18)
  {
LABEL_115:
    int v75 = *__error();
    uint64_t v28 = _sa_logt();
    if (os_log_type_enabled((os_log_t)v28, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl( &dword_186C92000,  (os_log_t)v28,  OS_LOG_TYPE_ERROR,  "Cannot specify inheritStdin and provide stdin_out",  buf,  2u);
    }

    *__error() = v75;
    _SASetCrashLogMessage(609, "Cannot specify inheritStdin and provide stdin_out", v76, v77, v78, v79, v80, v81, v87);
    _os_crash();
    __break(1u);
    goto LABEL_118;
  }

  posix_spawn_file_actions_t v94 = 0LL;
  int v19 = posix_spawn_file_actions_init(&v94);
  if (v19)
  {
    int v20 = v19;
    int v21 = *__error();
    _sa_logt();
    int v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v96) = v20;
      _os_log_error_impl( &dword_186C92000,  v22,  OS_LOG_TYPE_ERROR,  "Unable to create posix file actions: %{errno}d",  buf,  8u);
    }

    *__error() = v21;
LABEL_74:
    if ((v99[0] & 0x80000000) == 0) {
      close(v99[0]);
    }
    if ((v99[1] & 0x80000000) == 0) {
      close(v99[1]);
    }
    if ((v98[0] & 0x80000000) == 0) {
      close(v98[0]);
    }
    if ((v98[1] & 0x80000000) == 0) {
      close(v98[1]);
    }
    int v43 = v97[0];
    if (v97[0] < 0) {
      goto LABEL_84;
    }
    goto LABEL_83;
  }

  if (a7)
  {
    int v23 = posix_spawn_file_actions_addinherit_np(&v94, 1);
    if (v23)
    {
      int v20 = v23;
      int v24 = *__error();
      _sa_logt();
      uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v96) = v20;
        uint64_t v26 = "Unable to inherit stdout: %{errno}d";
LABEL_43:
        _os_log_error_impl(&dword_186C92000, v25, OS_LOG_TYPE_ERROR, v26, buf, 8u);
        goto LABEL_44;
      }

      goto LABEL_44;
    }

LABEL_44:
      *__error() = v24;
      posix_spawn_file_actions_destroy(&v94);
      goto LABEL_74;
    }

    int v32 = posix_spawn_file_actions_adddup2(&v94, v99[1], 1);
    if (v32)
    {
      int v20 = v32;
      int v24 = *__error();
      _sa_logt();
      uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v96) = v20;
        uint64_t v26 = "Unable to set posix file dup2: %{errno}d";
        goto LABEL_43;
      }

      goto LABEL_44;
    }

    goto LABEL_32;
  }

  int v27 = open("/dev/null", 1);
  if (v27 < 0)
  {
    int v20 = *__error();
    int v24 = *__error();
    _sa_logt();
    uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v96) = v20;
      uint64_t v26 = "Unable to open /dev/null: %{errno}d";
      goto LABEL_43;
    }

    goto LABEL_44;
  }

  LODWORD(v2_Block_object_dispose(va, 8) = v27;
  int v29 = posix_spawn_file_actions_adddup2(&v94, v27, 1);
  if (v29)
  {
    int v20 = v29;
    int v30 = *__error();
    _sa_logt();
    id v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
      goto LABEL_49;
    }
    *(_DWORD *)buf = 67109120;
    LODWORD(v96) = v20;
    goto LABEL_105;
  }

      ++v23;
    }

    while (v21 != v23);
    uint64_t v26 = [v13 countByEnumeratingWithState:&v63 objects:v72 count:16];
    int v21 = v26;
  }

  while (v26);
LABEL_48:

  uint64_t v61 = 0u;
  uint64_t v62 = 0u;
  int v59 = 0u;
  uint64_t v60 = 0u;
  uint64_t v13 = *(id *)(a1 + 280);
  int v27 = [v13 countByEnumeratingWithState:&v59 objects:v71 count:16];
  if (v27)
  {
    uint64_t v28 = v27;
    int v29 = *(void *)v60;
    while (2)
    {
      for (uint64_t j = 0LL; j != v28; ++j)
      {
        if (*(void *)v60 != v29) {
          objc_enumerationMutation(v13);
        }
        id v31 = *(void **)(*((void *)&v59 + 1) + 8 * j);
        if (![v31 isFakeFrame])
        {
          id v35 = [v31 address];
          uint64_t v36 = v7 & 0xFEFFFFFF;
          if (HIDWORD(v35)) {
            uint64_t v36 = v7;
          }
          *(_DWORD *)(a1 + 28_Block_object_dispose(va, 8) = v36;
          goto LABEL_32;
        }
      }

      uint64_t v28 = [v13 countByEnumeratingWithState:&v59 objects:v71 count:16];
      if (v28) {
        continue;
      }
      break;
    }
  }

LABEL_4:
  *(_DWORD *)(a1 + 28_Block_object_dispose(va, 8) = v7;
LABEL_5:
  *(_DWORD *)(a1 + 292) = v8;
}

uint64_t SASpawnPlatformBinaryWithSigningIdentifier( const char *a1, void *a2, char *const *a3, char *const *a4, cpu_type_t *a5, int a6, _DWORD *a7, char a8, _DWORD *a9, char a10, _DWORD *a11)
{
  if (a2) {
    return _SASpawnPlatformBinaryWithSigningIdentifier(a1, a2, a3, a4, a5, 0LL, a6, a7, a8, a9, a10, a11);
  }
  int v12 = *__error();
  _sa_logt();
  uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl( &dword_186C92000,  v13,  OS_LOG_TYPE_ERROR,  "SASpawnPlatformBinaryWithSigningIdentifier requires a signing identifier",  buf,  2u);
  }

  *__error() = v12;
  _SASetCrashLogMessage( 901,  "SASpawnPlatformBinaryWithSigningIdentifier requires a signing identifier",  v14,  v15,  v16,  v17,  v18,  v19,  v20);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t SAExecPlatformBinaryWithSigningIdentifier( const char *a1, void *a2, char *const *a3, char *const *a4, cpu_type_t *a5)
{
  return *__error();
}

BOOL SAShouldIgnoreSegmentWithCName(const char *a1)
{
  return strstr(a1, "PAGEZERO") || strstr(a1, "LINKEDIT") || strstr(a1, "DWARF") || strstr(a1, "UNICODE") != 0LL;
}

void SASymbolOwnerForeachSegment(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v3 = v4;
  CSSymbolOwnerForeachSegment();
}

uint64_t __SASymbolOwnerForeachSegment_block_invoke(uint64_t a1)
{
  Name = (const char *)CSRegionGetName();
  uint64_t result = SACompareDyldToCSLevel();
  if ((int)result >= 2)
  {
    uint64_t Range = CSRegionGetRange();
    uint64_t v6 = v5;
    uint64_t v7 = Range + v5;
    uint64_t v8 = (const char *)CSSymbolOwnerGetName();
    uint64_t result = printf("CS   %#18llx - %#18llx (%#10llx) %16s %s\n", Range, v7, v6, Name, v8);
  }

  if (Name)
  {
    uint64_t result = SAShouldIgnoreSegmentWithCName(Name);
    if ((result & 1) == 0) {
      return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
    }
  }

  return result;
}

BOOL SASymbolOwnerIsContiguous(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v43 = *MEMORY[0x1895F89C0];
  uint64_t BaseAddress = CSSymbolOwnerGetBaseAddress();
  uint64_t v31 = 0LL;
  int v32 = &v31;
  uint64_t v33 = 0x2020000000LL;
  uint64_t v34 = 0LL;
  uint64_t v27 = 0LL;
  uint64_t v28 = &v27;
  uint64_t v29 = 0x2020000000LL;
  uint64_t v30 = -1LL;
  uint64_t v23 = 0LL;
  int v24 = &v23;
  uint64_t v25 = 0x2020000000LL;
  uint64_t v26 = 0LL;
  uint64_t v19 = 0LL;
  char v20 = &v19;
  uint64_t v21 = 0x2020000000LL;
  uint64_t v22 = 0LL;
  v18[0] = MEMORY[0x1895F87A8];
  v18[1] = 3221225472LL;
  v18[2] = __SASymbolOwnerIsContiguous_block_invoke;
  v18[3] = &unk_189F631E0;
  v18[4] = &v31;
  v18[5] = &v23;
  v18[6] = &v27;
  v18[7] = &v19;
  SASymbolOwnerForeachSegment(a1, a2, v18);
  if (BaseAddress && BaseAddress != v28[3])
  {
    int v9 = *__error();
    _sa_logt();
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      uint64_t Name = CSSymbolOwnerGetName();
      uint64_t v16 = v28[3];
      CSSymbolOwnerGetSegmentWithAddress();
      uint64_t v17 = CSRegionGetName();
      *(_DWORD *)buf = 136315906;
      uint64_t v36 = Name;
      __int16 v37 = 2048;
      uint64_t v38 = BaseAddress;
      __int16 v39 = 2048;
      uint64_t v40 = v16;
      __int16 v41 = 2080;
      uint64_t v42 = v17;
      _os_log_debug_impl( &dword_186C92000,  v10,  OS_LOG_TYPE_DEBUG,  "SymbolOwner %s base address 0x%llx != start address 0x%llx for segment %s",  buf,  0x2Au);
    }

    *__error() = v9;
  }

  if (a3)
  {
    uint64_t v11 = v28[3];
    uint64_t v12 = v24[3] - v11;
    *a3 = v11;
    a3[1] = v12;
  }

  if (a4) {
    *a4 = v32[3];
  }
  BOOL v13 = BaseAddress == v28[3] && v20[3] == v24[3] - BaseAddress;
  _Block_object_dispose(&v19, 8);
  _Block_object_dispose(&v23, 8);
  _Block_object_dispose(&v27, 8);
  _Block_object_dispose(&v31, 8);
  return v13;
}

void sub_186CFA450( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

unint64_t __SASymbolOwnerIsContiguous_block_invoke(void *a1)
{
  unint64_t result = CSRegionGetRange();
  uint64_t v4 = *(void *)(a1[5] + 8LL);
  if (*(void *)(v4 + 24) < result + v3) {
    *(void *)(v4 + 24) = result + v3;
  }
  uint64_t v5 = *(void *)(a1[6] + 8LL);
  if (*(void *)(v5 + 24) > result) {
    *(void *)(v5 + 24) = result;
  }
  *(void *)(*(void *)(a1[7] + 8LL) + 24LL) += v3;
  return result;
}

id SACopySanitizedString(void *a1, int a2, unint64_t a3)
{
  id v5 = a1;
  uint64_t v6 = v5;
  if (v5)
  {
    if (a2 && [v5 rangeOfString:@"[^\\S ]" options:1024] != 0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v7 = objc_msgSend( v6,  "stringByReplacingOccurrencesOfString:withString:options:range:",  @"[^\\S ]",  @" ",  1024,  0,  objc_msgSend(v6, "length"));

      uint64_t v6 = (void *)v7;
    }

    if (a3 && [v6 length] > a3)
    {
      uint64_t v8 = objc_msgSend(v6, "substringWithRange:", 0, a3);

      uint64_t v6 = (void *)v8;
    }
  }

  return v6;
}

id SACachedNSString(void *a1)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (qword_18C4B1690 != -1) {
    dispatch_once(&qword_18C4B1690, &__block_literal_global_84);
  }
  os_unfair_lock_lock(&stru_18C4B166C);
  [(id)qword_18C4B1688 member:v1];
  id v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v2)
  {
    uint64_t v3 = [v1 copy];
    if (!v3)
    {
      int v5 = *__error();
      _sa_logt();
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315138;
        uint64_t v15 = [v1 UTF8String];
        _os_log_error_impl(&dword_186C92000, v6, OS_LOG_TYPE_ERROR, "Unable to copy %s", buf, 0xCu);
      }

      *__error() = v5;
      char v7 = [v1 UTF8String];
      _SASetCrashLogMessage(1334, "Unable to copy %s", v8, v9, v10, v11, v12, v13, v7);
      _os_crash();
      __break(1u);
    }

    id v2 = (void *)v3;
    [(id)qword_18C4B1688 addObject:v3];
  }

  os_unfair_lock_unlock(&stru_18C4B166C);

  return v2;
}

void __SACachedNSString_block_invoke()
{
  uint64_t v0 = [MEMORY[0x1896078B8] weakObjectsHashTable];
  id v1 = (void *)qword_18C4B1688;
  qword_18C4B1688 = v0;
}

id SANSStringForCString(void *a1)
{
  id v1 = a1;
  uint64_t v9 = *MEMORY[0x1895F89C0];
  id v2 = (void *)[objc_alloc(NSString) initWithUTF8String:a1];
  uint64_t v3 = v2;
  if (v2)
  {
    SACachedNSString(v2);
    id v1 = (void *)objc_claimAutoreleasedReturnValue();
  }

  else if (v1)
  {
    int v4 = *__error();
    _sa_logt();
    int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315138;
      uint64_t v8 = v1;
      _os_log_error_impl( &dword_186C92000,  v5,  OS_LOG_TYPE_ERROR,  "Unable to get NSString for cstr '%s'",  (uint8_t *)&v7,  0xCu);
    }

    id v1 = 0LL;
    *__error() = v4;
  }

  return v1;
}

uint64_t SAArchitectureForTranslatedTask(uint64_t a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    if ((CSArchitectureIsArm64() & 1) != 0)
    {
      return 0x301000007LL;
    }

    else if ((CSArchitectureIsX86_64() & 1) == 0)
    {
      block[0] = MEMORY[0x1895F87A8];
      block[1] = 3221225472LL;
      block[2] = __SAArchitectureForTranslatedTask_block_invoke;
      block[3] = &__block_descriptor_40_e5_v8__0l;
      block[4] = v1;
      if (SAArchitectureForTranslatedTask_onceToken != -1) {
        dispatch_once(&SAArchitectureForTranslatedTask_onceToken, block);
      }
      return 0LL;
    }
  }

  return v1;
}

int *__SAArchitectureForTranslatedTask_block_invoke()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  int v0 = *__error();
  _sa_logt();
  uint64_t v1 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    int v3 = 136315138;
    Familyuint64_t Name = CSArchitectureGetFamilyName();
    _os_log_error_impl( &dword_186C92000,  v1,  OS_LOG_TYPE_ERROR,  "Unknown translation architecture %s",  (uint8_t *)&v3,  0xCu);
  }

  unint64_t result = __error();
  *unint64_t result = v0;
  return result;
}

id _DictGet(void *a1, uint64_t a2)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2 && (objc_opt_isKindOfClass() & 1) != 0) {
    id v3 = v2;
  }
  else {
    id v3 = 0LL;
  }

  return v3;
}

id DictGetDict(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  objc_opt_class();
  _DictGet(v4, (uint64_t)v3);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

id DictGetString(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  objc_opt_class();
  _DictGet(v4, (uint64_t)v3);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

id DictGetNumber(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  objc_opt_class();
  _DictGet(v4, (uint64_t)v3);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

id DictGetArray(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  objc_opt_class();
  _DictGet(v4, (uint64_t)v3);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

void __DictDoAllClassesMatch_block_invoke(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id v6 = a3;
  if ((objc_opt_isKindOfClass() & 1) == 0 || (objc_opt_isKindOfClass() & 1) == 0)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 0;
    *a4 = 1;
  }
}

id DictGetDictOfClasses(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a2;
  id v8 = a1;
  objc_opt_class();
  _DictGet(v8, (uint64_t)v7);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v9) {
    goto LABEL_4;
  }
  id v10 = v9;
  uint64_t v15 = 0LL;
  uint64_t v16 = &v15;
  uint64_t v17 = 0x2020000000LL;
  char v18 = 1;
  v14[0] = MEMORY[0x1895F87A8];
  v14[1] = 3221225472LL;
  v14[2] = __DictDoAllClassesMatch_block_invoke;
  v14[3] = &unk_189F63228;
  v14[5] = a3;
  v14[6] = a4;
  v14[4] = &v15;
  [v10 enumerateKeysAndObjectsUsingBlock:v14];
  int v11 = *((unsigned __int8 *)v16 + 24);
  _Block_object_dispose(&v15, 8);

  if (v11) {
    id v12 = v10;
  }
  else {
LABEL_4:
  }
    id v12 = 0LL;

  return v12;
}

void sub_186CFAE44( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

id DictGetArrayOfClass(void *a1, void *a2)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  id v3 = a2;
  id v4 = a1;
  objc_opt_class();
  _DictGet(v4, (uint64_t)v3);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    id v6 = v5;
    uint64_t v7 = [v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *(void *)v14;
      while (2)
      {
        uint64_t v10 = 0LL;
        do
        {
          if (*(void *)v14 != v9) {
            objc_enumerationMutation(v6);
          }
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {

            goto LABEL_12;
          }

          ++v10;
        }

        while (v8 != v10);
        uint64_t v8 = [v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
        if (v8) {
          continue;
        }
        break;
      }
    }

    id v11 = v6;
  }

  else
  {
LABEL_12:
    id v11 = 0LL;
  }

  return v11;
}

uint64_t SAResampleThreads(pid_t a1, void *a2, void *a3)
{
  uint64_t v65 = *MEMORY[0x1895F89C0];
  id v5 = a2;
  id v6 = a3;
  if (getpid() != a1)
  {
    if ((SAResampleThreads_timedOut & 1) != 0)
    {
      uint64_t v7 = 49LL;
      goto LABEL_22;
    }

    context = (void *)MEMORY[0x186E47ACC]();
    task_inspect_t target_task = 0;
    uint64_t v7 = task_read_for_pid();
    if ((_DWORD)v7)
    {
      if (!kill(a1, 0))
      {
        int v8 = *__error();
        _sa_logt();
        uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int v59 = 67109376;
          *(_DWORD *)&v59[4] = a1;
          LOWORD(v60) = 1024;
          *(_DWORD *)((char *)&v60 + 2) = v7;
          _os_log_error_impl(&dword_186C92000, v9, OS_LOG_TYPE_ERROR, "[%d] task_read_for_pid failed: %d", v59, 0xEu);
        }

        *__error() = v8;
      }

      goto LABEL_21;
    }

    id v35 = (void *)[objc_alloc(MEMORY[0x189612A48]) initWithTask:target_task options:96];
    if (v35)
    {
      mach_msg_type_number_t act_listCnt = 0;
      uint64_t v7 = task_threads(target_task, &act_list, &act_listCnt);
      if (!(_DWORD)v7)
      {
        if (act_listCnt)
        {
          unint64_t v15 = 0LL;
          uint64_t v7 = 0LL;
          char v34 = 1;
          do
          {
            mach_port_name_t v16 = act_list[v15];
            if (SAResampleThreads_timedOut == 1)
            {
              mach_port_deallocate(*MEMORY[0x1895FBBE0], act_list[v15]);
            }

            else
            {
              mach_msg_type_number_t thread_info_outCnt = 6;
              if (thread_info(v16, 4u, thread_info_out, &thread_info_outCnt)
                || (uint64_t v17 = *(void *)thread_info_out,
                    [MEMORY[0x189607968] numberWithUnsignedLongLong:*(void *)thread_info_out],
                    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(),
                    int v19 = [v5 containsObject:v18],
                    v18,
                    !v19))
              {
                mach_port_deallocate(*MEMORY[0x1895FBBE0], v16);
              }

              else
              {
                *(void *)int v59 = 0LL;
                uint64_t v60 = v59;
                uint64_t v61 = 0x3032000000LL;
                uint64_t v62 = __Block_byref_object_copy__3;
                uint64_t v63 = __Block_byref_object_dispose__3;
                id v64 = 0LL;
                uint64_t v43 = 0LL;
                unsigned int v44 = &v43;
                uint64_t v45 = 0x2020000000LL;
                char v46 = 0;
                block[0] = MEMORY[0x1895F87A8];
                block[1] = 3221225472LL;
                block[2] = __SAResampleThreads_block_invoke;
                block[3] = &unk_189F63250;
                __int16 v39 = v59;
                id v38 = v35;
                uint64_t v40 = &v43;
                mach_port_name_t v41 = v16;
                task_inspect_t v42 = target_task;
                dispatch_block_t v20 = dispatch_block_create_with_qos_class( DISPATCH_BLOCK_ENFORCE_QOS_CLASS,  QOS_CLASS_USER_INTERACTIVE,  0,  block);
                dispatch_get_global_queue(33LL, 0LL);
                uint64_t v21 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue();
                dispatch_async(v21, v20);

                dispatch_time_t v22 = dispatch_time(0LL, 1000000000LL);
                if (dispatch_block_wait(v20, v22))
                {
                  SAResampleThreads_timedOut = 1;
                  proc_name(a1, buffer, 0x21u);
                  int v23 = *__error();
                  _sa_logt();
                  int v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 136315650;
                    id v53 = buffer;
                    __int16 v54 = 1024;
                    pid_t v55 = a1;
                    __int16 v56 = 2048;
                    uint64_t v57 = v17;
                    _os_log_error_impl( &dword_186C92000,  v24,  OS_LOG_TYPE_ERROR,  "Timed out resampling %s [%d] thread 0x%llx",  buf,  0x1Cu);
                  }

                  *__error() = v23;
                  uint64_t v25 = (unsigned __int8 *)(v44 + 3);
                  do
                    unsigned __int8 v26 = __ldxr(v25);
                  while (__stxr(1u, v25));
                  if ((v26 & 1) != 0)
                  {
                    int v29 = *__error();
                    _sa_logt();
                    uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_error_impl( &dword_186C92000,  v30,  OS_LOG_TYPE_ERROR,  "Timed out sampler, but lost race",  buf,  2u);
                    }

                    *__error() = v29;
                    mach_port_deallocate(*MEMORY[0x1895FBBE0], v16);
                  }

                  else
                  {
                    char v34 = 0;
                  }

                  uint64_t v7 = 49LL;
                }

                else
                {
                  if ((v44[3] & 1) == 0)
                  {
                    int v31 = *__error();
                    _sa_logt();
                    oslog = (os_log_s *)objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(oslog, OS_LOG_TYPE_FAULT))
                    {
                      *(_WORD *)buffer = 0;
                      _os_log_fault_impl(&dword_186C92000, oslog, OS_LOG_TYPE_FAULT, "racebit not true", buffer, 2u);
                    }

                    *__error() = v31;
                  }

                  mach_port_deallocate(*MEMORY[0x1895FBBE0], v16);
                  uint64_t v27 = [*((id *)v60 + 5) backtrace];
                  uint64_t v28 = [*((id *)v60 + 5) backtraceLength];
                  if (v27 && (_DWORD)v28) {
                    v6[2](v6, v17, v27, v28);
                  }
                }

                _Block_object_dispose(&v43, 8);
                _Block_object_dispose(v59, 8);
              }
            }

            ++v15;
          }

          while (v15 < act_listCnt);
          mach_vm_size_t v32 = 4LL * act_listCnt;
        }

        else
        {
          uint64_t v7 = 0LL;
          mach_vm_size_t v32 = 0LL;
          char v34 = 1;
        }

        mach_vm_deallocate(*MEMORY[0x1895FBBE0], (mach_vm_address_t)act_list, v32);
        if ((v34 & 1) == 0) {
          goto LABEL_20;
        }
        goto LABEL_19;
      }

      int v10 = *__error();
      _sa_logt();
      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int v59 = 67109376;
        *(_DWORD *)&v59[4] = a1;
        LOWORD(v60) = 1024;
        *(_DWORD *)((char *)&v60 + 2) = v7;
        _os_log_error_impl(&dword_186C92000, v11, OS_LOG_TYPE_ERROR, "[%d] task_threads failed: %d", v59, 0xEu);
      }

      id v12 = __error();
    }

    else
    {
      int v10 = *__error();
      _sa_logt();
      __int128 v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int v59 = 67109120;
        *(_DWORD *)&v59[4] = a1;
        _os_log_error_impl(&dword_186C92000, v13, OS_LOG_TYPE_ERROR, "[%d] unable to create VMUSampler", v59, 8u);
      }

      id v12 = __error();
      uint64_t v7 = 0LL;
    }

    *id v12 = v10;
LABEL_19:
    mach_port_deallocate(*MEMORY[0x1895FBBE0], target_task);
LABEL_20:

LABEL_21:
    objc_autoreleasePoolPop(context);
    goto LABEL_22;
  }

  uint64_t v7 = 16LL;
LABEL_22:

  return v7;
}

void sub_186CFB69C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
}

void __SAResampleThreads_block_invoke(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) sampleThread:*(unsigned int *)(a1 + 56)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  id v5 = (unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
  do
    unsigned __int8 v6 = __ldxr(v5);
  while (__stxr(1u, v5));
  if ((v6 & 1) != 0)
  {
    int v7 = *__error();
    _sa_logt();
    int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int v10 = 0;
      _os_log_impl(&dword_186C92000, v8, OS_LOG_TYPE_INFO, "Sampler completed after timeout", v10, 2u);
    }

    *__error() = v7;
    uint64_t v9 = (ipc_space_t *)MEMORY[0x1895FBBE0];
    mach_port_deallocate(*MEMORY[0x1895FBBE0], *(_DWORD *)(a1 + 56));
    mach_port_deallocate(*v9, *(_DWORD *)(a1 + 60));
  }

id SAExecutablePath(int a1, const char *a2)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  if (a1 < 1) {
    return 0LL;
  }
  if (a2)
  {
    if (*a2) {
      uint64_t v3 = a2;
    }
    else {
      uint64_t v3 = 0LL;
    }
  }

  else
  {
    uint64_t v3 = 0LL;
  }

  id v5 = 0LL;
  LODWORD(v6) = 0;
  do
  {
    if ((_DWORD)v6) {
      size_t v6 = (2 * v6);
    }
    else {
      size_t v6 = 1024LL;
    }
    if (v5) {
      free(v5);
    }
    id v5 = calloc(v6, 1uLL);
    int v7 = proc_pidpath(a1, v5, v6);
  }

  while (v7 >= (int)v6);
  if (!v7)
  {
    if (kill(a1, 0))
    {
      __int128 v13 = 0LL;
    }

    else
    {
      int v14 = *__error();
      _sa_logt();
      unint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        int v16 = *__error();
        int v17 = 67109376;
        *(_DWORD *)uint64_t v18 = a1;
        *(_WORD *)&v18[4] = 1024;
        *(_DWORD *)&v18[6] = v16;
        _os_log_error_impl( &dword_186C92000,  v15,  OS_LOG_TYPE_ERROR,  "unable to get path for %d: %{errno}d",  (uint8_t *)&v17,  0xEu);
      }

      __int128 v13 = 0LL;
      *__error() = v14;
    }

    goto LABEL_30;
  }

  if (v3)
  {
    int v8 = rindex((const char *)v5, 47);
    if (!v8)
    {
      int v11 = *__error();
      _sa_logt();
      id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        int v17 = 136315650;
        *(void *)uint64_t v18 = v3;
        *(_WORD *)&void v18[8] = 1024;
        int v19 = a1;
        __int16 v20 = 2080;
        uint64_t v21 = v5;
        _os_log_error_impl( &dword_186C92000,  v12,  OS_LOG_TYPE_ERROR,  "%s [%d] path %s has no path components",  (uint8_t *)&v17,  0x1Cu);
      }

      goto LABEL_26;
    }

    uint64_t v9 = v8 + 1;
    size_t v10 = strlen(v3);
    if (strncmp(v3, v9, v10))
    {
      int v11 = *__error();
      _sa_logt();
      id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        int v17 = 136315650;
        *(void *)uint64_t v18 = v3;
        *(_WORD *)&void v18[8] = 1024;
        int v19 = a1;
        __int16 v20 = 2080;
        uint64_t v21 = v5;
        _os_log_debug_impl(&dword_186C92000, v12, OS_LOG_TYPE_DEBUG, "%s [%d] exec'ed into %s", (uint8_t *)&v17, 0x1Cu);
      }

_BYTE *SAFilepathForCString(_BYTE *a1)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  if (!a1) {
    return a1;
  }
  uint64_t v1 = a1;
  if (!*a1) {
    return 0LL;
  }
  if (*a1 == 47 && a1[1]) {
    goto LABEL_10;
  }
  uint64_t v2 = a1 - 1;
  do
  {
    int v4 = *(unsigned __int8 *)++v2;
    int v3 = v4;
  }

  while ((v4 - 48) > 0xFFFFFFFD);
  if (!v3)
  {
    int v6 = *__error();
    _sa_logt();
    int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      int v9 = 136315138;
      size_t v10 = v1;
      _os_log_debug_impl(&dword_186C92000, v7, OS_LOG_TYPE_DEBUG, "%s is not a filepath", (uint8_t *)&v9, 0xCu);
    }

    int v8 = __error();
    a1 = 0LL;
    *int v8 = v6;
    return a1;
  }

  if (!strcmp(v2, "<unknown>")) {
    return 0LL;
  }
  a1 = v2;
LABEL_10:
  SANSStringForCString(a1);
  a1 = (_BYTE *)objc_claimAutoreleasedReturnValue();
  return a1;
}

uint64_t SAFilepathMatches(void *a1, void *a2, _BYTE *a3)
{
  id v5 = a1;
  id v6 = a2;
  if (!v5)
  {
LABEL_5:
    uint64_t v8 = 1LL;
    if (a3) {
      *a3 = 1;
    }
    goto LABEL_10;
  }

  if (![v5 isAbsolutePath])
  {
    unint64_t v7 = [v6 length];
    if (v7 > [v5 length])
    {
      if (![v6 hasSuffix:v5])
      {
        uint64_t v8 = 0LL;
        goto LABEL_10;
      }

      goto LABEL_5;
    }
  }

  if (a3) {
    *a3 = 0;
  }
  uint64_t v8 = [v5 hasSuffix:v6];
LABEL_10:

  return v8;
}

uint64_t SAIsEmbeddedPlatform(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1
    || ([v1 containsString:@"macOS"] & 1) != 0
    || ([v2 containsString:@"Mac"] & 1) != 0)
  {
    uint64_t v3 = 0LL;
  }

  else
  {
    uint64_t v3 = [v2 containsString:@"OS X"] ^ 1;
  }

  return v3;
}

double SATimeOfBootForLiveMachine()
{
  if (qword_18C4B16A0 != -1) {
    dispatch_once(&qword_18C4B16A0, &__block_literal_global_105);
  }
  return *(double *)&qword_18C4B1698;
}

double __SATimeOfBootForLiveMachine_block_invoke()
{
  double v0 = (double)time(0LL);
  uint64_t v1 = mach_continuous_time();
  double result = v0 - ceil(SASecondsFromMachTimeUsingLiveTimebase(v1)) - *MEMORY[0x189604DA8];
  qword_18C4B1698 = *(void *)&result;
  return result;
}

uint64_t SAMicrostackshotStateForFlagsTaskAndThreadState(int a1, void *a2, void *a3)
{
  id v5 = a3;
  if ((a1 & 0x40) != 0) {
    int v6 = 16;
  }
  else {
    int v6 = 20;
  }
  if ((a1 & 0x80u) != 0) {
    v6 |= 8u;
  }
  if ((a1 & 0x20) == 0) {
    int v6 = 0;
  }
  int v7 = v6 | ~(8 * a1) & 0x80;
  id v8 = a2;
  else {
    unsigned int v9 = v7;
  }
  int v10 = [v8 isForeground];

  if (v10) {
    uint64_t v11 = v9 | 2;
  }
  else {
    uint64_t v11 = v9;
  }
  switch([v5 threadQos])
  {
    case 0u:
      uint64_t v11 = v11 | 0x500;
      break;
    case 1u:
      uint64_t v11 = v11 | 0x100;
      break;
    case 2u:
      uint64_t v11 = v11 | 0x200;
      break;
    case 3u:
      uint64_t v11 = v11 | 0x300;
      break;
    case 4u:
      uint64_t v11 = v11 | 0x400;
      break;
    case 5u:
      uint64_t v11 = v11 | 0x600;
      break;
    case 6u:
      uint64_t v11 = v11 | 0x700;
      break;
    default:
      break;
  }

  switch([v5 threadRequestedQos])
  {
    case 0u:
      uint64_t v11 = v11 | 0x2800;
      break;
    case 1u:
      uint64_t v11 = v11 | 0x800;
      break;
    case 2u:
      uint64_t v11 = v11 | 0x1000;
      break;
    case 3u:
      uint64_t v11 = v11 | 0x1800;
      break;
    case 4u:
      uint64_t v11 = v11 | 0x2000;
      break;
    case 5u:
      uint64_t v11 = v11 | 0x3000;
      break;
    case 6u:
      uint64_t v11 = v11 | 0x3800;
      break;
    default:
      break;
  }

  switch([v5 threadRequestedQosOverride])
  {
    case 0u:
      uint64_t v11 = v11 | 0x14000;
      break;
    case 1u:
      uint64_t v11 = v11 | 0x4000;
      break;
    case 2u:
      uint64_t v11 = v11 | 0x8000;
      break;
    case 3u:
      uint64_t v11 = v11 | 0xC000;
      break;
    case 4u:
      uint64_t v11 = v11 | 0x10000;
      break;
    case 5u:
      uint64_t v11 = v11 | 0x18000;
      break;
    case 6u:
      uint64_t v11 = v11 | 0x1C000;
      break;
    default:
      break;
  }

  return v11;
}

void SAComplainAboutUnknownThreadPolicyVersion(int a1)
{
  block[0] = MEMORY[0x1895F87A8];
  block[1] = 3221225472LL;
  block[2] = __SAComplainAboutUnknownThreadPolicyVersion_block_invoke;
  block[3] = &__block_descriptor_36_e5_v8__0l;
  int v2 = a1;
  if (SAComplainAboutUnknownThreadPolicyVersion_onceToken != -1) {
    dispatch_once(&SAComplainAboutUnknownThreadPolicyVersion_onceToken, block);
  }
}

LABEL_2:
  if ((a3 & 2) == 0)
  {
    if ((a3 & 8) != 0 && (a3 & 0x14) != 0)
    {
      uint64_t v61 = *__error();
      _sa_logt();
      uint64_t v62 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        uint64_t v78 = a3;
        _os_log_error_impl( &dword_186C92000,  v62,  OS_LOG_TYPE_ERROR,  "backtrace style specified both swift async only and prefer/only C root frames: 0x%llx",  buf,  0xCu);
      }

      *__error() = v61;
      _SASetCrashLogMessage( 1719,  "backtrace style specified both swift async only and prefer/only C root frames: 0x%llx",  v63,  v64,  v65,  v66,  v67,  v68,  a3);
      _os_crash();
      __break(1u);
    }

    id v8 = -[SAThreadState hasSwiftTask](self, "hasSwiftTask");
    unsigned int v9 = 1;
    if ((a3 & 0x10) == 0 && v8) {
      unsigned int v9 = (self->_leafOfCRootFramesReplacedBySwiftAsync != 0LL) & (a3 >> 2);
    }
    int v10 = (a3 & 0x18) != 0 && v8;
    uint64_t v11 = self;
    id v12 = self->_leafUserFrame;
    if (v12)
    {
      __int128 v13 = v12;
      p_isa = 0LL;
      while (!-[SAFrame isSwiftAsync](v13, "isSwiftAsync"))
      {
        if (!v10) {
          goto LABEL_18;
        }
        unint64_t v15 = v13;

        p_isa = (id *)&v15->super.isa;
LABEL_19:
        int v16 = v13->_parentFrame;
        int v17 = v16;

        __int128 v13 = v17;
        if (!v16) {
          goto LABEL_64;
        }
      }

      if ((v9 & 1) != 0)
      {

        goto LABEL_65;
      }

LABEL_220:
      [v17 appendString:@" on port"];
      [(id)a1 portName];
      __int128 v90 = (void *)objc_claimAutoreleasedReturnValue();

      if (v90)
      {
        [(id)a1 portName];
        pid_t v91 = (void *)objc_claimAutoreleasedReturnValue();
        [v17 appendFormat:@" name %@", v91];
      }

      if ([(id)a1 portFlags]) {
        objc_msgSend(v17, "appendFormat:", @" flags 0x%llx", objc_msgSend((id)a1, "portFlags"));
      }
      if ([(id)a1 portDomain]) {
        objc_msgSend(v17, "appendFormat:", @" in domain %llu", objc_msgSend((id)a1, "portDomain"));
      }
      if ((a4 & 2) != 0) {
        objc_msgSend(v17, "appendFormat:", @" address 0x%llx", *(void *)(a1 + 24));
      }
LABEL_228:
      [v17 appendString:@" in transit"];
      if (!*(void *)(a1 + 16))
      {
        uint64_t v70 = @" to unknown port";
        goto LABEL_196;
      }

      if ((a4 & 2) != 0) {
        objc_msgSend(v17, "appendFormat:", @" to port address 0x%llx", *(void *)(a1 + 16));
      }
      goto LABEL_197;
    case 6:
      pid_t v55 = *(void *)(a1 + 16);
      if (!v55)
      {
        if ((a4 & 3) == 0) {
          goto LABEL_111;
        }
        goto LABEL_232;
      }

      uint64_t v57 = (_DWORD)v55 != a2 && (int)v55 >= 0;
      if ((a4 & 3) != 0 || v57)
      {
LABEL_232:
        if (a5) {
          goto LABEL_233;
        }
LABEL_275:
        __int128 v13 = 1LL;
        goto LABEL_276;
      }

LABEL_196:
        objc_msgSend(v17, "appendFormat:", v70, v111);
LABEL_197:
        int v84 = v17;
        goto LABEL_274;
      }

LABEL_276:
      return v13;
    case 7:
      int v59 = *(void *)(a1 + 16) | v14;
      __int128 v13 = v59 != 0;
      if (!a5 || !v59) {
        goto LABEL_276;
      }
      uint64_t v60 = (void *)[@"krwlock" mutableCopy];
      int v23 = v60;
      if ((a4 & 2) != 0) {
        objc_msgSend(v60, "appendFormat:", @" address 0x%llx", *(void *)(a1 + 24));
      }
      uint64_t v61 = @" for reading";
      goto LABEL_206;
    case 8:
      uint64_t v62 = *(void *)(a1 + 16) | v14;
      __int128 v13 = v62 != 0;
      if (!a5 || !v62) {
        goto LABEL_276;
      }
      uint64_t v63 = (void *)[@"krwlock" mutableCopy];
      int v23 = v63;
      if ((a4 & 2) != 0) {
        objc_msgSend(v63, "appendFormat:", @" address 0x%llx", *(void *)(a1 + 24));
      }
      uint64_t v61 = @" for writing";
      goto LABEL_206;
    case 9:
      id v64 = *(void *)(a1 + 16) | v14;
      __int128 v13 = v64 != 0;
      if (!a5 || !v64) {
        goto LABEL_276;
      }
      uint64_t v65 = (void *)[@"krwlock" mutableCopy];
      int v23 = v65;
      if ((a4 & 2) != 0) {
        objc_msgSend(v65, "appendFormat:", @" address 0x%llx", *(void *)(a1 + 24));
      }
      uint64_t v61 = @" for upgrading";
      goto LABEL_206;
    case 0xA:
      uint64_t v66 = *(void *)(a1 + 16) | v14;
      __int128 v13 = v66 != 0;
      if (!a5 || !v66) {
        goto LABEL_276;
      }
      int v67 = @"user lock";
      goto LABEL_135;
    case 0xB:
      uint64_t v68 = *(void *)(a1 + 16) | v14;
      __int128 v13 = v68 != 0;
      if (!a5 || !v68) {
        goto LABEL_276;
      }
      int v67 = @"pthread mutex";
LABEL_135:
      int v23 = (void *)-[__CFString mutableCopy](v67, "mutableCopy");
      if ((a4 & 2) != 0) {
        objc_msgSend(v23, "appendFormat:", @" address 0x%llx", *(void *)(a1 + 24));
      }
      goto LABEL_207;
    case 0xC:
      __int128 v13 = v14 != 0;
      if ((a4 & 1) == 0 || !a5) {
        goto LABEL_276;
      }
      uint64_t v69 = (void *)[@"pthread rwlock" mutableCopy];
      int v17 = v69;
      if ((a4 & 2) != 0) {
        objc_msgSend(v69, "appendFormat:", @" address 0x%llx", *(void *)(a1 + 24));
      }
      uint64_t v70 = @" for reading";
      goto LABEL_196;
    case 0xD:
      __int128 v13 = v14 != 0;
      if ((a4 & 1) == 0 || !a5) {
        goto LABEL_276;
      }
      uint64_t v71 = (void *)[@"pthread rwlock" mutableCopy];
      int v17 = v71;
      if ((a4 & 2) != 0) {
        objc_msgSend(v71, "appendFormat:", @" address 0x%llx", *(void *)(a1 + 24));
      }
      uint64_t v70 = @" for writing";
      goto LABEL_196;
    case 0xE:
      __int128 v13 = v14 != 0;
      if ((a4 & 1) == 0 || !a5) {
        goto LABEL_276;
      }
      int v17 = (void *)[@"pthread condvar" mutableCopy];
      goto LABEL_68;
    case 0xF:
    case 0x15:
      goto LABEL_276;
    case 0x10:
      if (!a5) {
        goto LABEL_275;
      }
      uint64_t v72 = (void *)[@"queue" mutableCopy];
      int v23 = v72;
      if ((a4 & 2) != 0) {
        objc_msgSend(v72, "appendFormat:", @" workloop address 0x%llx", *(void *)(a1 + 24));
      }
      uint64_t v73 = *(void *)(a1 + 16);
      if (v73 == -8)
      {
        uint64_t v25 = @" that is suspended";
        goto LABEL_211;
      }

      if (v73 == -7)
      {
        uint64_t v25 = @" thread to be allocated";
        goto LABEL_211;
      }

      if (v73 == a3)
      {
        uint64_t v25 = @" processed by this thread";
        goto LABEL_211;
      }

      if (v73)
      {
        ((void (*)(void (**)(void, void, void), uint64_t))v12[2])(v12, 0xFFFFFFFFLL);
        __int128 v88 = (void *)objc_claimAutoreleasedReturnValue();
        [v23 appendFormat:@" processed by %@", v88];
        goto LABEL_213;
      }

      uint64_t v25 = @" in a transient state";
      goto LABEL_211;
    case 0x11:
      if (!a5) {
        goto LABEL_275;
      }
      uint64_t v74 = (void *)[@"wait4" mutableCopy];
      int v75 = *(void *)(a1 + 16);
      if (v75 == -1)
      {
        uint64_t v79 = @" on any child process";
      }

      else
      {
        if ((v75 & 0x8000000000000000LL) == 0)
        {
          ((void (*)(void (**)(void, void, void)))v12[2])(v12);
          uint64_t v76 = (void *)objc_claimAutoreleasedReturnValue();
          [v74 appendFormat:@" on %@", v76];
          goto LABEL_270;
        }

        uint64_t v111 = -v75;
        uint64_t v79 = @" on any process in pgrp %lld";
      }

      goto LABEL_272;
    case 0x12:
      uint64_t v77 = *(void *)(a1 + 16) | v14;
      __int128 v13 = v77 != 0;
      if (!a5 || !v77) {
        goto LABEL_276;
      }
      uint64_t v74 = (void *)[@"turnstile" mutableCopy];
      uint64_t v78 = *(void *)(a1 + 16);
      if (v78) {
        goto LABEL_164;
      }
      uint64_t v79 = @" with unknown owner";
      goto LABEL_272;
    case 0x13:
      uint64_t v80 = *(void *)(a1 + 16) | v14;
      __int128 v13 = v80 != 0;
      if (!a5 || !v80) {
        goto LABEL_276;
      }
      uint64_t v74 = (void *)[@"event link" mutableCopy];
      uint64_t v78 = *(void *)(a1 + 16);
      if (!v78)
      {
        uint64_t v79 = @" (held)";
        goto LABEL_272;
      }

LABEL_164:
      if (v78 == a3)
      {
        uint64_t v79 = @" owned by this thread";
        goto LABEL_272;
      }

      ((void (*)(void (**)(void, void, void), uint64_t))v12[2])(v12, 0xFFFFFFFFLL);
      uint64_t v76 = (void *)objc_claimAutoreleasedReturnValue();
      [v74 appendFormat:@" owned by %@", v76];
      goto LABEL_270;
    case 0x14:
      uint64_t v81 = *(void *)(a1 + 16) | v14;
      __int128 v13 = v81 != 0;
      if (!a5 || !v81) {
        goto LABEL_276;
      }
      uint64_t v74 = (void *)[@"compressor segment" mutableCopy];
      int v82 = *(void *)(a1 + 16);
      if (!v82)
      {
        uint64_t v79 = @" busy for unknown thread";
        goto LABEL_272;
      }

      if (v82 == a3)
      {
        uint64_t v79 = @" busy for this thread";
LABEL_272:
        objc_msgSend(v74, "appendFormat:", v79, v111);
        goto LABEL_273;
      }

      ((void (*)(void (**)(void, void, void), uint64_t))v12[2])(v12, 0xFFFFFFFFLL);
      uint64_t v76 = (void *)objc_claimAutoreleasedReturnValue();
      [v74 appendFormat:@" busy for thread %@", v76];
LABEL_270:

LABEL_273:
      int v84 = v74;
      goto LABEL_274;
    case 0x16:
      __int128 v13 = v14 != 0;
      if ((a4 & 1) == 0 || !a5) {
        goto LABEL_276;
      }
      uint64_t v18 = @"busy page";
      goto LABEL_174;
    case 0x17:
      __int128 v13 = v14 != 0;
      if ((a4 & 1) == 0 || !a5) {
        goto LABEL_276;
      }
      id v83 = @"pager initialization";
      goto LABEL_194;
    case 0x18:
      __int128 v13 = v14 != 0;
      if ((a4 & 1) == 0 || !a5) {
        goto LABEL_276;
      }
      id v83 = @"pager ready";
      goto LABEL_194;
    case 0x19:
      __int128 v13 = v14 != 0;
      if ((a4 & 1) == 0 || !a5) {
        goto LABEL_276;
      }
      id v83 = @"paging/activity in progress";
      goto LABEL_194;
    case 0x1A:
      __int128 v13 = v14 != 0;
      if ((a4 & 1) == 0 || !a5) {
        goto LABEL_276;
      }
      id v83 = @"mapping in progress";
      goto LABEL_194;
    case 0x1B:
      __int128 v13 = v14 != 0;
      if ((a4 & 1) == 0 || !a5) {
        goto LABEL_276;
      }
      uint64_t v18 = @"blocked vm object";
LABEL_174:
      int v17 = (void *)-[__CFString mutableCopy](v18, "mutableCopy");
      if ((a4 & 2) != 0) {
        objc_msgSend(v17, "appendFormat:", @" 0x%llx", *(void *)(a1 + 24));
      }
      goto LABEL_197;
    case 0x1C:
      __int128 v13 = v14 != 0;
      if ((a4 & 1) == 0 || !a5) {
        goto LABEL_276;
      }
      id v83 = @"paging in progress";
      goto LABEL_194;
    case 0x1D:
      __int128 v13 = v14 != 0;
      if ((a4 & 1) == 0 || !a5) {
        goto LABEL_276;
      }
      id v83 = @"pagein throttle";
LABEL_194:
      int v17 = (void *)-[__CFString mutableCopy](v83, "mutableCopy");
      if ((a4 & 2) == 0) {
        goto LABEL_197;
      }
      uint64_t v111 = *(void *)(a1 + 24);
      uint64_t v70 = @" for vm object 0x%llx";
      goto LABEL_196;
    case 0x1E:
      __int128 v85 = *(void *)(a1 + 16) | v14;
      __int128 v13 = v85 != 0;
      if (!a5 || !v85) {
        goto LABEL_276;
      }
      __int128 v86 = @"exclave core";
      goto LABEL_204;
    case 0x1F:
      char v87 = *(void *)(a1 + 16) | v14;
      __int128 v13 = v87 != 0;
      if (!a5 || !v87) {
        goto LABEL_276;
      }
      __int128 v86 = @"exclave kit";
LABEL_204:
      int v23 = (void *)-[__CFString mutableCopy](v86, "mutableCopy");
      if ((a4 & 2) != 0)
      {
        uint64_t v111 = *(void *)(a1 + 24);
        uint64_t v61 = @" id 0x%llx";
LABEL_206:
        objc_msgSend(v23, "appendFormat:", v61, v111);
      }

            v332 = 0;
            v130 = 1;
            goto LABEL_167;
          }
        }

        v130 = 1;
        v332 = 1;
        goto LABEL_167;
      }

      if (v349)
      {
        v112 = [v350 isForeground];
      }

      else if (([v350 isForeground] & 1) == 0)
      {
        goto LABEL_155;
      }

      __int16 v113 = [v350 isForeground];
      v114 = (void *)v368[5];
      if (v113)
      {
        if (v114)
        {
          objc_msgSend(v114, "appendString:", @", ");
          uint64_t v115 = @"process frontmost";
LABEL_154:
          [(id)v368[5] appendFormat:v115];
          goto LABEL_155;
        }

        v116 = [objc_alloc(MEMORY[0x189607940]) initWithCapacity:128];
        v117 = (void *)v368[5];
        v368[5] = v116;
        uint64_t v115 = @"process frontmost";
      }

      else
      {
        if (v114)
        {
          objc_msgSend(v114, "appendString:", @", ");
          uint64_t v115 = @"process non-frontmost";
          goto LABEL_154;
        }

        v118 = [objc_alloc(MEMORY[0x189607940]) initWithCapacity:128];
        v117 = (void *)v368[5];
        v368[5] = v118;
        uint64_t v115 = @"process non-frontmost";
      }

      goto LABEL_154;
    }

    if (v351) {
      a6 = (void *)([v351 endSampleIndex] + 1);
    }
    else {
      a6 = *(void **)(a1 + 48);
    }
    uint64_t v49 = [v352 startSampleIndex];
    if (v49 <= *(void *)(a1 + 48)) {
      uint64_t v50 = *(void *)(a1 + 48);
    }
    else {
      uint64_t v50 = v49;
    }
    uint64_t v51 = v50 - (void)a6;
    if (v50 >= (unint64_t)a6)
    {
      if ((unint64_t)a6 + a11 < v50)
      {
        if ((a10 & 1) != 0)
        {
          id v52 = @"in another call tree";
        }

        else
        {
          id v52 = @"not seen";
          if (!v338 && !v336 && v335)
          {
            [v347 threadStates];
            id v53 = (void *)objc_claimAutoreleasedReturnValue();
            [v53 firstObject];
            __int16 v54 = (id)objc_claimAutoreleasedReturnValue();
            if (v54 == v352)
            {
              id v52 = @"not seen";
            }

            else
            {
              [v347 threadStates];
              pid_t v55 = (void *)objc_claimAutoreleasedReturnValue();
              [v55 firstObject];
              __int16 v56 = (void *)objc_claimAutoreleasedReturnValue();
              id v52 = @"in another call tree";
              if ([v56 startSampleIndex] == 0x7FFFFFFFFFFFFFFFLL)
              {
                v345 = [v352 startSampleIndex];
                [v347 threadStates];
                uint64_t v57 = (void *)objc_claimAutoreleasedReturnValue();
                [v57 firstObject];
                uint64_t v58 = (void *)objc_claimAutoreleasedReturnValue();
                if (v345 == [v58 endSampleIndex] + 1) {
                  id v52 = @"not seen";
                }
              }
            }
          }
        }

        int v59 = (void *)v368[5];
        if (v59)
        {
          objc_msgSend(v59, "appendString:", @", ");
        }

        else
        {
          uint64_t v60 = [objc_alloc(MEMORY[0x189607940]) initWithCapacity:128];
          uint64_t v61 = (void *)v368[5];
          v368[5] = v60;
        }

        uint64_t v62 = @"s";
        if (v51 == 1) {
          uint64_t v62 = &stru_189F64BD8;
        }
        [(id)v368[5] appendFormat:@"%@ %@ for %lu sample%@", v43, v52, v51, v62];
      }

      goto LABEL_64;
    }

    goto LABEL_427;
  }

  if (!v336)
  {
    uint64_t v43 = @"Thread";
    goto LABEL_19;
  }

  uint64_t v45 = *(void *)(a1 + 16);
  if (v45)
  {
    switch(*(void *)(v45 + 160))
    {
      case 0LL:
        if (*(_BYTE *)(v45 + 14)) {
          goto LABEL_54;
        }
        goto LABEL_25;
      case 1LL:
        v277 = *__error();
        _sa_logt();
        v278 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v278, OS_LOG_TYPE_ERROR))
        {
          v279 = [*(id *)(a1 + 16) debugDescription];
          v280 = [v279 UTF8String];
          *(_DWORD *)buf = 136315138;
          *(void *)&uint8_t buf[4] = v280;
          _os_log_error_impl( &dword_186C92000,  v278,  OS_LOG_TYPE_ERROR,  "state for swiftTaskStates, but kSAAggregateSwiftAsyncTogetherWithOtherCallTrees: %s",  buf,  0xCu);
        }

        *__error() = v277;
        v281 = [*(id *)(a1 + 16) debugDescription];
        v282 = [v281 UTF8String];
        _SASetCrashLogMessage( 9801,  "state for swiftTaskStates, but kSAAggregateSwiftAsyncTogetherWithOtherCallTrees: %s",  v283,  v284,  v285,  v286,  v287,  v288,  v282);

        _os_crash();
        __break(1u);
        goto LABEL_424;
      case 2LL:
LABEL_54:
        uint64_t v43 = @"Swift Async Base Function";
        break;
      case 3LL:
      case 5LL:
LABEL_25:
        uint64_t v43 = @"Swift Task";
        break;
      case 4LL:
        uint64_t v43 = @"Swift Async";
        goto LABEL_19;
      default:
        uint64_t v43 = 0LL;
        goto LABEL_19;
    }

    goto LABEL_19;
  }

  v320 = *__error();
  _sa_logt();
  v321 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v321, OS_LOG_TYPE_ERROR))
  {
    v322 = [*(id *)(a1 + 16) debugDescription];
    v323 = [v322 UTF8String];
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = v323;
    _os_log_error_impl( &dword_186C92000,  v321,  OS_LOG_TYPE_ERROR,  "swiftAsyncCallTreeAggregationResolved returned default: %s",  buf,  0xCu);
  }

  *__error() = v320;
  v324 = [*(id *)(a1 + 16) debugDescription];
  v325 = [v324 UTF8String];
  _SASetCrashLogMessage( 9821,  "swiftAsyncCallTreeAggregationResolved returned default: %s",  v326,  v327,  v328,  v329,  v330,  v331,  v325);

  double result = (id)_os_crash();
  __break(1u);
  return result;
}

LABEL_207:
      int v24 = *(void *)(a1 + 16);
      if (v24)
      {
LABEL_208:
        if (v24 != a3)
        {
          ((void (*)(void (**)(void, void, void), uint64_t))v12[2])(v12, 0xFFFFFFFFLL);
          __int128 v88 = (void *)objc_claimAutoreleasedReturnValue();
          [v23 appendFormat:@" owned by %@", v88];
LABEL_213:

LABEL_214:
          int v84 = v23;
LABEL_274:
          __int128 v99 = v84;
          *a5 = v99;

          goto LABEL_275;
        }

        uint64_t v25 = @" owned by this thread";
      }

      else
      {
LABEL_210:
        uint64_t v25 = @" with unknown owner";
      }

LABEL_211:
      [v23 appendFormat:v25];
      goto LABEL_214;
    default:
      int v19 = *__error();
      _sa_logt();
      __int16 v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        v101 = *(unsigned __int16 *)(a1 + MEMORY[0x1F8]);
        *(_DWORD *)buf = 67109120;
        __int16 v113 = v101;
        _os_log_error_impl(&dword_186C92000, v20, OS_LOG_TYPE_ERROR, "waitinfo has unknown type %u", buf, 8u);
      }

      __int128 v13 = 0LL;
      *__error() = v19;
      goto LABEL_276;
  }

LABEL_36:
        unsigned __int8 v26 = *(void *)(a1 + 24);
        if ((v26 & 0x40) != 0)
        {
          uint64_t v27 = @" send port";
        }

        else
        {
          if ((v26 & 0x80) == 0) {
            goto LABEL_41;
          }
          uint64_t v27 = @" receive port";
        }

        [v16 appendString:v27];
LABEL_41:
        [(id)a1 portName];
        uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue();
        if (v28 || [(id)a1 portFlags])
        {

LABEL_44:
          if ((*(_BYTE *)(a1 + 24) & 0xC0) == 0) {
            [v16 appendString:@" port"];
          }
          [(id)a1 portName];
          int v29 = (void *)objc_claimAutoreleasedReturnValue();

          if (v29)
          {
            [(id)a1 portName];
            uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue();
            [v16 appendFormat:@" name %@", v30];
          }

          if ([(id)a1 portFlags]) {
            objc_msgSend(v16, "appendFormat:", @" flags 0x%llx", objc_msgSend((id)a1, "portFlags"));
          }
          if ([(id)a1 portDomain]) {
            objc_msgSend(v16, "appendFormat:", @" in domain %llu", objc_msgSend((id)a1, "portDomain"));
          }
          goto LABEL_52;
        }

        if ([(id)a1 portDomain]) {
          goto LABEL_44;
        }
LABEL_52:
        int v31 = *(void *)(a1 + 24);
        if ((v31 & 0x20) != 0)
        {
          [v16 appendFormat:@" iplock held"];
          int v31 = *(void *)(a1 + 24);
        }

        if (v31 >= 0x100)
        {
          char v34 = *__error();
          _sa_logt();
          id v35 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v35, OS_LOG_TYPE_FAULT))
          {
            uint64_t v36 = *(void *)(a1 + 24);
            *(_DWORD *)buf = 134217984;
            id v38 = v36;
            _os_log_fault_impl(&dword_186C92000, v35, OS_LOG_TYPE_FAULT, "Unknown turnstile flags 0x%llx", buf, 0xCu);
          }

          *__error() = v34;
          objc_msgSend(v16, "appendFormat:", @" with unknown flags 0x%llx", *(void *)(a1 + 24));
        }

        if (*(_BYTE *)(a1 + 9) != 1) {
          objc_msgSend(v16, "appendFormat:", @" after %d hops", *(unsigned __int8 *)(a1 + 9));
        }
        mach_vm_size_t v32 = v16;
        *a6 = v32;

        goto LABEL_58;
      }

      int v24 = *(unsigned int *)(a1 + 16);
      if ((v24 & 0x80000000) != 0)
      {
        uint64_t v21 = @" unknown process";
        goto LABEL_33;
      }

      if ((_DWORD)v24 == a2)
      {
        uint64_t v21 = @" this process";
        goto LABEL_33;
      }

      v13[2](v13, v24, 0LL);
    }

    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue();
    [v16 appendFormat:@" %@", v25];

    goto LABEL_36;
  }

  if ((a3 & 0x700) != (a4 & 0x700))
  {
    int v17 = ((unsigned __int16)(a3 & 0x700) >> 8) - 1LL;
    else {
      uint64_t v18 = off_189F63510[v17];
    }
    [NSString stringWithUTF8String:v18];
    int v19 = (void *)objc_claimAutoreleasedReturnValue();
    SAJSONWriteDictionaryEntry(v23, @"effectiveQos", v19);
  }

  if ((a3 & 0x3800) != (a4 & 0x3800))
  {
    __int16 v20 = ((unsigned __int16)(a3 & 0x3800) >> 11) - 1LL;
    else {
      uint64_t v21 = off_189F63510[v20];
    }
    [NSString stringWithUTF8String:v21];
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue();
    SAJSONWriteDictionaryEntry(v23, @"requestedQos", v22);
  }
}

  return v35;
}

    int v16 = 0LL;
    goto LABEL_37;
  }

  uint64_t v30 = 0uLL;
  int v31 = 0uLL;
  uint64_t v28 = 0uLL;
  int v29 = 0uLL;
  id v8 = *(id *)(a1 + 40);
  unsigned int v9 = [v8 countByEnumeratingWithState:&v28 objects:v41 count:16];
  if (v9)
  {
    int v10 = v9;
    id v5 = 0LL;
    uint64_t v11 = *(void *)v29;
    do
    {
      for (k = 0LL; k != v10; ++k)
      {
        if (*(void *)v29 != v11) {
          objc_enumerationMutation(v8);
        }
        v5 += [*(id *)(*((void *)&v28 + 1) + 8 * k) sampleCountInTimestampRangeStart:*(void *)(*(void *)(a1 + 32) + 32) end:*(void *)(*(void *)(a1 + 32) + 40)];
      }

      int v10 = [v8 countByEnumeratingWithState:&v28 objects:v41 count:16];
    }

    while (v10);
  }

  else
  {
    id v5 = 0LL;
  }

  unsigned __int8 v26 = 0u;
  uint64_t v27 = 0u;
  int v24 = 0u;
  uint64_t v25 = 0u;
  __int128 v13 = *(id *)(a1 + 48);
  int v19 = [v13 countByEnumeratingWithState:&v24 objects:v40 count:16];
  if (!v19) {
    goto LABEL_36;
  }
  __int16 v20 = v19;
  int v16 = 0LL;
  uint64_t v21 = *(void *)v25;
  do
  {
    for (m = 0LL; m != v20; ++m)
    {
      if (*(void *)v25 != v21) {
        objc_enumerationMutation(v13);
      }
      v16 += objc_msgSend( *(id *)(*((void *)&v24 + 1) + 8 * m),  "sampleCountInTimestampRangeStart:end:",  *(void *)(*(void *)(a1 + 32) + 32),  *(void *)(*(void *)(a1 + 32) + 40),  (void)v24);
    }

    __int16 v20 = [v13 countByEnumeratingWithState:&v24 objects:v40 count:16];
  }

  while (v20);
LABEL_37:

  if (v5 > v16) {
    return -1LL;
  }
  else {
    return v5 < v16;
  }
}

int *__SAComplainAboutUnknownThreadPolicyVersion_block_invoke(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  int v2 = *__error();
  _sa_logt();
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
  {
    int v5 = *(_DWORD *)(a1 + 32);
    v6[0] = 67109120;
    v6[1] = v5;
    _os_log_fault_impl( &dword_186C92000,  v3,  OS_LOG_TYPE_FAULT,  "Unknown thread policy version %d! Thread QoS ipc overrides and promotions will be missing",  (uint8_t *)v6,  8u);
  }

  double result = __error();
  *double result = v2;
  return result;
}

uint64_t SASerializableIndexForPointerFromSerializationDictionary(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (v4)
  {
    int v5 = v4;
    if (!v3)
    {
      uint64_t v13 = -1LL;
      goto LABEL_7;
    }

    [(id)objc_opt_class() classDictionaryKey];
    int v6 = (void *)objc_claimAutoreleasedReturnValue();
    [v5 objectForKey:v6];
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();

    id v8 = v7;
    if (v8)
    {
      unsigned int v9 = v8;
      int v10 = (void *)[objc_alloc(MEMORY[0x189607968]) initWithUnsignedLongLong:v3];
      [v9 objectForKey:v10];
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue();
      if (v11)
      {
        id v12 = v11;
        uint64_t v13 = [v11 longLongValue];

LABEL_7:
        return v13;
      }

      unint64_t v15 = @"Could not find index for pointer";
    }

    else
    {
      unint64_t v15 = @"Invalid pointer-to-index dictionary";
    }
  }

  else
  {
    unint64_t v15 = @"nil serialization dictionary";
  }

  +[SAException exceptionWithName:reason:userInfo:]( &OBJC_CLASS___SAException,  "exceptionWithName:reason:userInfo:",  @"Encoding failure",  v15,  0LL);
  id v16 = (id)objc_claimAutoreleasedReturnValue();
  objc_exception_throw(v16);
  return _pointerInBufferForIndexWithClass();
}

char *_pointerInBufferForIndexWithClass(void *a1, unint64_t a2)
{
  uint64_t v46 = *MEMORY[0x1895F89C0];
  id v6 = a1;
  if (a2 == -1LL)
  {
    int v12 = *__error();
    a2 = _sa_logt();
    if (os_log_type_enabled((os_log_t)a2, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_186C92000, (os_log_t)a2, OS_LOG_TYPE_ERROR, "null index", buf, 2u);
    }

    *__error() = v12;
    _SASetCrashLogMessage(107, "null index", v13, v14, v15, v16, v17, v18, v37);
    _os_crash();
    __break(1u);
    goto LABEL_11;
  }

  id v7 = v6;
  id v8 = (unint64_t *)[v7 bytes];
  unint64_t v4 = *v8;
  if (*v8 <= a2)
  {
LABEL_11:
    int v19 = *__error();
    _sa_logt();
    __int16 v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218240;
      unint64_t v39 = a2;
      __int16 v40 = 2048;
      unint64_t v41 = v4;
      _os_log_error_impl(&dword_186C92000, v20, OS_LOG_TYPE_ERROR, "index %llu < numInstances %llu", buf, 0x16u);
    }

    *__error() = v19;
    _SASetCrashLogMessage(112, "index %llu < numInstances %llu", v21, v22, v23, v24, v25, v26, a2);
    _os_crash();
    __break(1u);
    goto LABEL_14;
  }

  id v3 = v8 + 1;
  unint64_t v9 = v8[a2 + 1];
  int v10 = (char *)&v8[v4 + 1] + v9;
  if (v4 - 1 > a2)
  {
    unint64_t v2 = a2 + 1;
    if (v3[a2 + 1] > v9) {
      goto LABEL_7;
    }
LABEL_14:
    int v27 = *__error();
    _sa_logt();
    uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      unint64_t v29 = v3[v2];
      uint64_t v30 = v3[a2];
      *(_DWORD *)buf = 134218752;
      unint64_t v39 = v2;
      __int16 v40 = 2048;
      unint64_t v41 = v29;
      __int16 v42 = 2048;
      unint64_t v43 = a2;
      __int16 v44 = 2048;
      uint64_t v45 = v30;
      _os_log_error_impl(&dword_186C92000, v28, OS_LOG_TYPE_ERROR, "index %llu (%llu) <= index %llu (%llu)", buf, 0x2Au);
    }

    *__error() = v27;
    _SASetCrashLogMessage(121, "index %llu (%llu) <= index %llu (%llu)", v31, v32, v33, v34, v35, v36, v2);
    _os_crash();
    __break(1u);
  }

  [v7 length];
LABEL_7:

  return v10;
}

BOOL SASerializableAddInstanceToSerializationDictionaryWithClassKey(void *a1, void *a2, void *a3)
{
  id v11 = a1;
  id v12 = a2;
  id v13 = a3;
  if (!v11 || !v12 || (a3 = v13) == 0LL)
  {
    uint64_t v18 = @"Invalid arguments";
    goto LABEL_15;
  }

  [v11 objectForKey:v13];
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  if (!v3)
  {
    id v4 = a3;
    id v5 = v11;
    id v3 = objc_alloc_init(MEMORY[0x189603FC8]);
    id v6 = objc_alloc_init(MEMORY[0x189603FA8]);
    [v3 setObject:v6 forKey:@"AddedObjectList"];

    [v5 setObject:v3 forKey:v4];
    if (!v3)
    {
      uint64_t v18 = @"Failed to add new pointer-to-index dictionary";
      goto LABEL_15;
    }
  }

  id v4 = (id)[objc_alloc(MEMORY[0x189607968]) initWithUnsignedLongLong:v12];
  [v3 objectForKey:v4];
  id v5 = (id)objc_claimAutoreleasedReturnValue();

  if (!v5)
  {
    id v6 = (id)objc_msgSend(objc_alloc(MEMORY[0x189607968]), "initWithUnsignedLongLong:", objc_msgSend(v3, "count") - 1);
    [v3 setObject:v6 forKey:v4];
    uint64_t v14 = [v3 objectForKey:@"AddedObjectList"];
    if (v14)
    {
      id v7 = (void *)v14;
      uint64_t v15 = objc_alloc_init(&OBJC_CLASS___SAObjectListEntry);
      id v8 = v15;
      if (v15)
      {
        objc_setProperty_atomic(v15, v16, v12, 8LL);
        v8->_size = [v12 sizeInBytesForSerializedVersion];
LABEL_10:
        [v7 addObject:v8];

        goto LABEL_11;
      }

id SASerializableNewDataBufferDictionaryFromSerializationDictionary(void *a1)
{
  uint64_t v60 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v36 = objc_alloc_init(MEMORY[0x189603FC8]);
  char v37 = v1;
  __int128 v45 = 0u;
  __int128 v46 = 0u;
  __int128 v47 = 0u;
  __int128 v48 = 0u;
  [v1 allKeys];
  id obj = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v38 = [obj countByEnumeratingWithState:&v45 objects:v57 count:16];
  if (v38)
  {
    uint64_t v35 = *(void *)v46;
    do
    {
      uint64_t v2 = 0LL;
      do
      {
        if (*(void *)v46 != v35) {
          objc_enumerationMutation(obj);
        }
        uint64_t v3 = *(void *)(*((void *)&v45 + 1) + 8 * v2);
        [v37 objectForKey:v3];
        id v4 = (id)objc_claimAutoreleasedReturnValue();
        id v43 = v37;
        if (!v4) {
          goto LABEL_40;
        }
        [v4 objectForKey:@"AddedObjectList"];
        id v5 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v5)
        {
          uint64_t j = @"Could not get order added list";
          goto LABEL_39;
        }

        id v6 = v5;
        if (![v5 count])
        {
          uint64_t j = @"No elements in order added list";
          goto LABEL_39;
        }

        uint64_t v7 = [v6 count] + 1;
        if (v7 != [v4 count])
        {
          uint64_t j = @"Mismatched order added list length and pointer-to-index dictionary entry count";
          goto LABEL_39;
        }

        uint64_t v39 = v3;
        uint64_t v40 = v2;
        size_t v8 = 8 * [v6 count] + 8;
        __int128 v53 = 0u;
        __int128 v54 = 0u;
        __int128 v55 = 0u;
        __int128 v56 = 0u;
        id v9 = v6;
        uint64_t v10 = [v9 countByEnumeratingWithState:&v53 objects:v59 count:16];
        if (v10)
        {
          uint64_t v11 = v10;
          uint64_t v12 = *(void *)v54;
          do
          {
            for (uint64_t i = 0LL; i != v11; ++i)
            {
              if (*(void *)v54 != v12) {
                objc_enumerationMutation(v9);
              }
              uint64_t v14 = *(void *)(*((void *)&v53 + 1) + 8 * i);
              if (v14) {
                uint64_t v14 = *(void *)(v14 + 16);
              }
              v8 += v14;
            }

            uint64_t v11 = [v9 countByEnumeratingWithState:&v53 objects:v59 count:16];
          }

          while (v11);
        }

        unint64_t v41 = v4;

        __int16 v44 = calloc(1uLL, v8);
        *__int16 v44 = [v9 count];
        uint64_t v15 = [v9 count];
        __int128 v49 = 0u;
        __int128 v50 = 0u;
        __int128 v51 = 0u;
        __int128 v52 = 0u;
        id v42 = v9;
        uint64_t v16 = [v42 countByEnumeratingWithState:&v49 objects:v58 count:16];
        if (v16)
        {
          uint64_t v17 = v16;
          uint64_t v18 = 0LL;
          uint64_t v19 = 0LL;
          unint64_t v20 = (unint64_t)&v44[v15 + 1];
          uint64_t v21 = *(void *)v50;
          do
          {
            uint64_t v22 = 0LL;
            do
            {
              if (*(void *)v50 != v21) {
                objc_enumerationMutation(v42);
              }
              uint64_t v23 = *(void **)(*((void *)&v49 + 1) + 8 * v22);
              uint64_t v24 = MEMORY[0x186E47ACC]();
              if (v20 >= (unint64_t)v44 + v8)
              {
                free(v44);
                uint64_t j = @"Overran the end of the buffer";
                goto LABEL_39;
              }

              uint64_t v26 = (void *)v24;
              v44[v19 + 1] = v18;
              if (v23)
              {
                if (!objc_msgSend( objc_getProperty(v23, v25, 8, 1),  "addSelfToBuffer:bufferLength:withCompletedSerializationDictionary:",  v20,  v23[2],  v43)) {
                  goto LABEL_38;
                }
                uint64_t v27 = v23[2];
                v20 += v27;
              }

              else
              {
                char v28 = [0 addSelfToBuffer:v20 bufferLength:0 withCompletedSerializationDictionary:v43];
                uint64_t v27 = 0LL;
                if ((v28 & 1) == 0)
                {
LABEL_38:
                  free(v44);
                  uint64_t j = @"Error when trying to serialize";
                  goto LABEL_39;
                }
              }

              v18 += v27;
              ++v19;
              objc_autoreleasePoolPop(v26);
              ++v22;
            }

            while (v17 != v22);
            uint64_t v29 = [v42 countByEnumeratingWithState:&v49 objects:v58 count:16];
            uint64_t v17 = v29;
          }

          while (v29);
        }

        uint64_t v30 = (void *)[objc_alloc(MEMORY[0x189603F48]) initWithBytesNoCopy:v44 length:v8 freeWhenDone:1];
        if (!v30)
        {
          for (uint64_t j = @"Ran into error trying to serialize class"; ; uint64_t j = @"Invalid pointer-to-index dictionary")
          {
LABEL_39:
            +[SAException exceptionWithName:reason:userInfo:]( &OBJC_CLASS___SAException,  "exceptionWithName:reason:userInfo:",  @"Encoding failure",  j,  0LL);
            id v33 = (id)objc_claimAutoreleasedReturnValue();
            objc_exception_throw(v33);
LABEL_40:
            ;
          }
        }

        [v36 setObject:v30 forKey:v39];

        uint64_t v2 = v40 + 1;
      }

      while (v40 + 1 != v38);
      uint64_t v38 = [obj countByEnumeratingWithState:&v45 objects:v57 count:16];
    }

    while (v38);
  }

  return v36;
}

id _indexToInstanceDictionaryFromDeserializationDictionary(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (v3 && (id v5 = v4) != 0LL)
  {
    [v3 objectForKey:v4];
    id v6 = (id)objc_claimAutoreleasedReturnValue();
    if (!v6)
    {
      id v6 = objc_alloc_init(MEMORY[0x189603FC8]);
      [v3 setObject:v6 forKey:v5];
    }

    return v6;
  }

  else
  {
    +[SAException exceptionWithName:reason:userInfo:]( &OBJC_CLASS___SAException,  "exceptionWithName:reason:userInfo:",  @"Decoding failure",  @"Invalid arguments",  0LL);
    id v8 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v8);
    return (id)SASerializableBufferForIndexUsingDeserializationDictionaryAndDataBufferDictionaryAndClass();
  }

uint64_t SASerializableBufferForIndexUsingDeserializationDictionaryAndDataBufferDictionaryAndClass( unint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  [a4 classDictionaryKey];
  id v9 = (void *)objc_claimAutoreleasedReturnValue();
  _indexToInstanceDictionaryFromDeserializationDictionary(v7, v9);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    [a4 classDictionaryKey];
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue();
    [v8 objectForKey:v11];
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue();

    if (v12)
    {
      id v13 = _pointerInBufferForIndexWithClass(v12, a1);

      return (uint64_t)v13;
    }

    uint64_t v15 = @"Could not get buffer for class";
  }

  else
  {
    uint64_t v15 = @"Could not get index-to-instance dictionary";
  }

  +[SAException exceptionWithName:reason:userInfo:]( &OBJC_CLASS___SAException,  "exceptionWithName:reason:userInfo:",  @"Decoding failure",  v15,  0LL);
  id v16 = (id)objc_claimAutoreleasedReturnValue();
  objc_exception_throw(v16);
  return _SASerializableInstanceForIndexUsingDeserializationDictionaryAndDataBufferDictionaryAndClass();
}

id _SASerializableInstanceForIndexUsingDeserializationDictionaryAndDataBufferDictionaryAndClass( unint64_t a1, void *a2, void *a3, void *a4, char a5)
{
  id v9 = a2;
  id v10 = a3;
  uint64_t v11 = v10;
  if (a1 == -1LL)
  {
    id v23 = 0LL;
LABEL_31:

    return v23;
  }

  if (v9 && v10 && a4)
  {
    [a4 classDictionaryKey];
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    _indexToInstanceDictionaryFromDeserializationDictionary(v9, v12);
    id v13 = (void *)objc_claimAutoreleasedReturnValue();

    if (v13)
    {
      id v14 = v13;
      uint64_t v15 = (void *)[objc_alloc(MEMORY[0x189607968]) initWithUnsignedLongLong:a1];
      [v14 objectForKey:v15];
      id v16 = (SASerializeableInstance *)objc_claimAutoreleasedReturnValue();

      if (v16 && v16->_populated)
      {
        id v23 = objc_getProperty(v16, v17, 16LL, 1);
LABEL_30:

        goto LABEL_31;
      }

      [a4 classDictionaryKey];
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue();
      [v11 objectForKey:v18];
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue();

      if (v19)
      {
        uint64_t v21 = _pointerInBufferForIndexWithClass(v19, a1);
        __int128 v45 = v20;
        if (v16)
        {
LABEL_26:
          if (!v16->_populated && (a5 & 1) == 0)
          {
            uint64_t v35 = (void *)MEMORY[0x186E47ACC]();
            v16->_populated = 1;
            objc_msgSend( objc_getProperty(v16, v36, 16, 1),  "populateReferencesUsingBuffer:bufferLength:andDeserializationDictionary:andDataBufferDictionary:",  v21,  v45,  v9,  v11);
            objc_autoreleasePoolPop(v35);
          }

          id v23 = objc_getProperty(v16, v20, 16LL, 1);

          goto LABEL_30;
        }

        context = (void *)MEMORY[0x186E47ACC]();
        id v42 = v21;
        if ((objc_opt_respondsToSelector() & 1) != 0) {
          uint64_t v22 = [a4 newInstanceWithoutReferencesFromSerializedBuffer:v21 bufferLength:v45 andDeserializationDictionary:v9 andDataBufferDictionary:v11];
        }
        else {
          uint64_t v22 = [a4 newInstanceWithoutReferencesFromSerializedBuffer:v21 bufferLength:v45];
        }
        uint64_t v24 = (void *)v22;
        uint64_t v25 = objc_alloc(&OBJC_CLASS___SASerializeableInstance);
        id v44 = v24;
        char v43 = a5;
        if (v25)
        {
          v46.receiver = v25;
          v46.super_class = (Class)&OBJC_CLASS___SASerializeableInstance;
          uint64_t v26 = (SASerializeableInstance *)objc_msgSendSuper2(&v46, sel_init);
          uint64_t v25 = v26;
          if (v26) {
            objc_storeStrong((id *)&v26->_instance, v24);
          }
        }

        [a4 classDictionaryKey];
        uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue();
        id v28 = v9;
        id v16 = v25;
        id v29 = v27;
        if (v16 && (uint64_t v30 = v29) != 0LL)
        {
          [v28 objectForKey:v29];
          id v31 = (id)objc_claimAutoreleasedReturnValue();
          if (!v31)
          {
            id v31 = objc_alloc_init(MEMORY[0x189603FC8]);
            [v28 setObject:v31 forKey:v30];
          }

          uint64_t v32 = (void *)[objc_alloc(MEMORY[0x189607968]) initWithUnsignedLongLong:a1];
          [v31 objectForKey:v32];
          id v33 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v33)
          {
            [v31 setObject:v16 forKey:v32];

            objc_getProperty(v16, v34, 16LL, 1);
            if ((objc_opt_respondsToSelector() & 1) == 0) {
              v16->_populated = 1;
            }

            objc_autoreleasePoolPop(context);
            a5 = v43;
            uint64_t v21 = v42;
            goto LABEL_26;
          }

          uint64_t v38 = @"Decoding failure";
          uint64_t v39 = @"Failed to add new instance to the deserialization dictionary";
        }

        else
        {
          uint64_t v38 = @"Encoding failure";
          uint64_t v39 = @"Invalid arguments";
        }
      }

      else
      {
        uint64_t v38 = @"Decoding failure";
        uint64_t v39 = @"Could not get buffer for class";
      }
    }

    else
    {
      uint64_t v38 = @"Decoding failure";
      uint64_t v39 = @"Could not get index-to-instance dictionary";
    }
  }

  else
  {
    uint64_t v38 = @"Decoding failure";
    uint64_t v39 = @"Invalid args";
  }

  +[SAException exceptionWithName:reason:userInfo:]( &OBJC_CLASS___SAException,  "exceptionWithName:reason:userInfo:",  v38,  v39,  0LL);
  id v40 = (id)objc_claimAutoreleasedReturnValue();
  objc_exception_throw(v40);
  return (id)SASerializableNonnullInstanceForIndexUsingDeserializationDictionaryAndDataBufferDictionaryAndClass();
}

id SASerializableNonnullInstanceForIndexUsingDeserializationDictionaryAndDataBufferDictionaryAndClass( unint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = _SASerializableInstanceForIndexUsingDeserializationDictionaryAndDataBufferDictionaryAndClass(a1, v7, v8, a4, 0);
  if (v9)
  {
    id v10 = (void *)v9;

    return v10;
  }

  else
  {
    +[SAException exceptionWithName:reason:userInfo:]( &OBJC_CLASS___SAException,  "exceptionWithName:reason:userInfo:",  @"Decoding failure",  @"Trying to deserialize nonnull index that is null",  0LL);
    id v12 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v12);
    return (id)SASerializablePartiallyDecodedNonnullInstanceForIndexUsingDeserializationDictionaryAndDataBufferDictionaryAndClass();
  }

id SASerializablePartiallyDecodedNonnullInstanceForIndexUsingDeserializationDictionaryAndDataBufferDictionaryAndClass( unint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = _SASerializableInstanceForIndexUsingDeserializationDictionaryAndDataBufferDictionaryAndClass(a1, v7, v8, a4, 1);
  if (v9)
  {
    id v10 = (void *)v9;

    return v10;
  }

  else
  {
    +[SAException exceptionWithName:reason:userInfo:]( &OBJC_CLASS___SAException,  "exceptionWithName:reason:userInfo:",  @"Decoding failure",  @"Trying to partially deserialize nonnull index that is null",  0LL);
    id v12 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v12);
    return (id)__SASerializationVerifyEverythingIsPopulated_block_invoke();
  }

uint64_t __SASerializationVerifyEverythingIsPopulated_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  return [a3 enumerateKeysAndObjectsUsingBlock:&__block_literal_global_79];
}

void __SASerializationVerifyEverythingIsPopulated_block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v4 = a3;
  if (v4 && (v4[8] & 1) != 0)
  {
  }

  else
  {
    +[SAException exceptionWithName:reason:userInfo:]( &OBJC_CLASS___SAException,  "exceptionWithName:reason:userInfo:",  @"Decoding failure",  @"Never populated an object",  0LL);
    id v5 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v5);
    SASerializableFillSerializedIndicesWithCollectionOfSerializableInstances(v6, v7, v8, v9);
  }

uint64_t SASerializableFillSerializedIndicesWithCollectionOfSerializableInstances( void *a1, unint64_t a2, void *a3, void *a4)
{
  uint64_t v40 = *MEMORY[0x1895F89C0];
  id v7 = a3;
  id v8 = a4;
  uint64_t v9 = v8;
  if (a2)
  {
    uint64_t v30 = a1;
    if (a1 && v7 && v8)
    {
      id v10 = malloc(8 * a2);
      __int128 v31 = 0u;
      __int128 v32 = 0u;
      __int128 v33 = 0u;
      __int128 v34 = 0u;
      id v11 = v7;
      uint64_t v12 = [v11 countByEnumeratingWithState:&v31 objects:v39 count:16];
      if (!v12) {
        goto LABEL_16;
      }
      uint64_t v13 = v12;
      unint64_t v14 = 0LL;
      uint64_t v15 = *(void *)v32;
      while (1)
      {
        uint64_t v16 = 0LL;
        if (a2 >= v14) {
          unint64_t v17 = a2 - v14;
        }
        else {
          unint64_t v17 = 0LL;
        }
        do
        {
          if (*(void *)v32 != v15) {
            objc_enumerationMutation(v11);
          }
          if (v17 == v16)
          {
            int v20 = *__error();
            _sa_logt();
            uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              unint64_t v36 = v14;
              __int16 v37 = 2048;
              unint64_t v38 = a2;
              _os_log_error_impl(&dword_186C92000, v21, OS_LOG_TYPE_ERROR, "i %llu >= numIndices %llu", buf, 0x16u);
            }

            *__error() = v20;
            _SASetCrashLogMessage(452, "i %llu >= numIndices %llu", v22, v23, v24, v25, v26, v27, v14);
            _os_crash();
            __break(1u);
LABEL_21:
            free(v10);
            id v28 = @"Got bad index";
LABEL_22:
            +[SAException exceptionWithName:reason:userInfo:]( &OBJC_CLASS___SAException,  "exceptionWithName:reason:userInfo:",  @"Encoding failure",  v28,  0LL);
            id v29 = (id)objc_claimAutoreleasedReturnValue();
            objc_exception_throw(v29);
          }

          uint64_t v18 = SASerializableIndexForPointerFromSerializationDictionary( *(void **)(*((void *)&v31 + 1) + 8 * v16),  v9);
          *((void *)v10 + v14) = v18;
          if (v18 == -1) {
            goto LABEL_21;
          }
          ++v14;
          ++v16;
        }

        while (v13 != v16);
        uint64_t v13 = [v11 countByEnumeratingWithState:&v31 objects:v39 count:16];
        if (!v13)
        {
LABEL_16:

          memcpy(v30, v10, 8 * a2);
          free(v10);
          goto LABEL_17;
        }
      }
    }

    id v28 = @"Invalid arguments";
    goto LABEL_22;
  }

id _newMutableCollectionFromIndexList(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  id v11 = a3;
  id v12 = a4;
  if (!a1 || !v11 || (uint64_t v13 = v12) == 0LL || !a5)
  {
    +[SAException exceptionWithName:reason:userInfo:]( &OBJC_CLASS___SAException,  "exceptionWithName:reason:userInfo:",  @"Decoding failure",  @"Invalid args",  0LL);
    id v21 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v21);
  }

  unint64_t v14 = (void *)objc_msgSend((id)objc_msgSend(a6, "alloc"), "initWithCapacity:", a2);
  if (a2)
  {
    uint64_t v15 = 0LL;
    while (1)
    {
      uint64_t v16 = _SASerializableInstanceForIndexUsingDeserializationDictionaryAndDataBufferDictionaryAndClass( *(void *)(a1 + 8 * v15),  v11,  v13,  a5,  0);
      if (!v16) {
        break;
      }
      unint64_t v17 = (void *)v16;
      [v14 addObject:v16];

      if (a2 == ++v15) {
        goto LABEL_13;
      }
    }

    int v18 = *__error();
    _sa_logt();
    uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      int v22 = 134217984;
      uint64_t v23 = v15;
      _os_log_error_impl( &dword_186C92000,  v19,  OS_LOG_TYPE_ERROR,  "Could not deserialize item %llu",  (uint8_t *)&v22,  0xCu);
    }

    *__error() = v18;
  }

id SASerializableNewMutableArrayFromIndexList(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v9 = a4;
  id v10 = a3;
  id v11 = (void *)objc_opt_class();
  _newMutableCollectionFromIndexList(a1, a2, v10, v9, a5, v11);
  id v12 = (void *)objc_claimAutoreleasedReturnValue();

  return v12;
}

id SASerializableNewMutableSetFromIndexList(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v9 = a4;
  id v10 = a3;
  id v11 = (void *)objc_opt_class();
  _newMutableCollectionFromIndexList(a1, a2, v10, v9, a5, v11);
  id v12 = (void *)objc_claimAutoreleasedReturnValue();

  return v12;
}

id SASerializableNewMutableDictionaryFromIndexList( uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11 = a3;
  id v12 = a4;
  if (!a6) {
    goto LABEL_17;
  }
  if (!a5) {
    goto LABEL_17;
  }
  uint64_t v13 = v12;
  if (!v12 || !a2 || !a1 || !v11) {
    goto LABEL_17;
  }
  id v14 = objc_alloc_init(MEMORY[0x189603FC8]);
  uint64_t v15 = (unint64_t *)(a1 + 16);
  do
  {
    if (*(v15 - 2) != 2557891634)
    {
      uint64_t i = @"Bad SASerializedIndexKeyValuePair magic";
      goto LABEL_16;
    }

    uint64_t v16 = _SASerializableInstanceForIndexUsingDeserializationDictionaryAndDataBufferDictionaryAndClass( *(v15 - 1),  v11,  v13,  a5,  0);
    if (!v16)
    {
      uint64_t i = @"Could not deserialize key";
      goto LABEL_16;
    }

    unint64_t v17 = (void *)v16;
    uint64_t v18 = _SASerializableInstanceForIndexUsingDeserializationDictionaryAndDataBufferDictionaryAndClass(*v15, v11, v13, a6, 0);
    if (!v18)
    {
      for (uint64_t i = @"Could not deserialize value"; ; uint64_t i = @"Invalid args")
      {
LABEL_16:
        +[SAException exceptionWithName:reason:userInfo:]( &OBJC_CLASS___SAException,  "exceptionWithName:reason:userInfo:",  @"Decoding failure",  i,  0LL);
        id v22 = (id)objc_claimAutoreleasedReturnValue();
        objc_exception_throw(v22);
LABEL_17:
        ;
      }
    }

    uint64_t v19 = (void *)v18;
    [v14 setObject:v18 forKey:v17];

    v15 += 3;
    --a2;
  }

  while (a2);

  return v14;
}

id SASerializableNewMutableDictionaryOfArraysFromIndexList( void *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6)
{
  id v9 = a3;
  id v10 = a4;
  if (!a6 || !a5 || (id v11 = v10) == 0LL || !a2 || !a1 || !v9)
  {
    uint64_t i = @"Invalid args";
    goto LABEL_17;
  }

  id v22 = objc_alloc_init(MEMORY[0x189603FC8]);
  uint64_t v12 = 0LL;
  do
  {
    if (*a1 != 4277001967LL) {
      goto LABEL_18;
    }
    uint64_t v13 = _SASerializableInstanceForIndexUsingDeserializationDictionaryAndDataBufferDictionaryAndClass(a1[1], v9, v11, a5, 0);
    if (!v13)
    {
      uint64_t i = @"Could not deserialize key for header";
      goto LABEL_17;
    }

    id v14 = (void *)v13;
    id v15 = objc_alloc_init(MEMORY[0x189603FA8]);
    if (a1[2])
    {
      uint64_t v16 = 0LL;
      while (1)
      {
        uint64_t v17 = _SASerializableInstanceForIndexUsingDeserializationDictionaryAndDataBufferDictionaryAndClass( a1[v16 + 3],  v9,  v11,  a6,  0);
        if (!v17) {
          break;
        }
        uint64_t v18 = (void *)v17;
        [v15 addObject:v17];
      }

      for (uint64_t i = @"Could not deserialize value"; ; uint64_t i = @"Bad SASerializedIndexKeyArrayLengthPair magic")
      {
LABEL_17:
        +[SAException exceptionWithName:reason:userInfo:]( &OBJC_CLASS___SAException,  "exceptionWithName:reason:userInfo:",  @"Decoding failure",  i,  0LL);
        id v21 = (id)objc_claimAutoreleasedReturnValue();
        objc_exception_throw(v21);
LABEL_18:
        ;
      }
    }

id FilterArrayToCallTreeFrames(void *a1)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  id v1 = a1;
  uint64_t v2 = [v1 countByEnumeratingWithState:&v20 objects:v25 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v21;
    while (2)
    {
      uint64_t v5 = 0LL;
      do
      {
        if (*(void *)v21 != v4) {
          objc_enumerationMutation(v1);
        }
        id v6 = *(void **)(*((void *)&v20 + 1) + 8 * v5);
        objc_opt_class();
        if (objc_opt_isKindOfClass() & 1) == 0 || ([v6 isTruncatedLeafCallstack])
        {

          id v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x189603FA8]), "initWithCapacity:", objc_msgSend(v1, "count") - 1);
          __int128 v16 = 0u;
          __int128 v17 = 0u;
          __int128 v18 = 0u;
          __int128 v19 = 0u;
          id v9 = v1;
          uint64_t v10 = [v9 countByEnumeratingWithState:&v16 objects:v24 count:16];
          if (v10)
          {
            uint64_t v11 = v10;
            uint64_t v12 = *(void *)v17;
            do
            {
              uint64_t v13 = 0LL;
              do
              {
                if (*(void *)v17 != v12) {
                  objc_enumerationMutation(v9);
                }
                id v14 = *(void **)(*((void *)&v16 + 1) + 8 * v13);
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0
                  && (objc_msgSend(v14, "isTruncatedLeafCallstack", (void)v16) & 1) == 0)
                {
                  [v8 addObject:v14];
                }

                ++v13;
              }

              while (v11 != v13);
              uint64_t v11 = [v9 countByEnumeratingWithState:&v16 objects:v24 count:16];
            }

            while (v11);
          }

          id v7 = (void *)[v8 copy];
          goto LABEL_22;
        }

        ++v5;
      }

      while (v3 != v5);
      uint64_t v3 = [v1 countByEnumeratingWithState:&v20 objects:v25 count:16];
      if (v3) {
        continue;
      }
      break;
    }
  }

  id v7 = (void *)[v1 copy];
LABEL_22:

  return v7;
}

char *init_io_histograms()
{
  double v0 = (char *)malloc(0xF38uLL);
  id v1 = v0;
  if (v0)
  {
    bzero(v0, 0xF38uLL);
    for (uint64_t i = 0LL; i != 2912; i += 728LL)
    {
      *(_DWORD *)&v1[i + 984] = 29;
      bzero(&v1[i + 992], 0x2B8uLL);
      memmove(&v1[i + 992], &io_latency_histogram_template, 0x2B8uLL);
    }

    uint64_t v3 = 0LL;
    *(_DWORD *)id v1 = 9;
    *(_OWORD *)(v1 + _Block_object_dispose((const void *)(v16 - 192), 8) = 0u;
    *(_OWORD *)(v1 + 24) = 0u;
    *(_OWORD *)(v1 + 40) = 0u;
    *(_OWORD *)(v1 + 56) = 0u;
    *(_OWORD *)(v1 + 72) = 0u;
    *(_OWORD *)(v1 + 8_Block_object_dispose((const void *)(v16 - 192), 8) = 0u;
    *(_OWORD *)(v1 + 104) = 0u;
    *(_OWORD *)(v1 + 120) = 0u;
    *(_OWORD *)(v1 + 136) = 0u;
    *(_OWORD *)(v1 + 152) = 0u;
    *(_OWORD *)(v1 + 16_Block_object_dispose((const void *)(v16 - 192), 8) = 0u;
    *(_OWORD *)(v1 + 184) = 0u;
    *(_OWORD *)(v1 + 200) = 0u;
    *((void *)v1 + 27) = 0LL;
    uint64_t v4 = 4096LL;
    *((void *)v1 + 2) = 4096LL;
    do
    {
      uint64_t v5 = &v1[v3];
      *((void *)v5 + 4) = v4;
      v4 *= 2LL;
      *((void *)v5 + 5) = v4;
      v3 += 24LL;
    }

    while (v3 != 192);
  }

  return v1;
}

uint64_t print_io_histograms(unsigned int *a1, char *a2, const char *a3)
{
  int v35 = (int)a3;
  __int128 v34 = a2;
  uint64_t result = 0xFFFFFFFFLL;
  if (a1 && a3 >= 0x2000)
  {
    if ((safe_snprintf(&v34, a2, a3, &v35, "IO Size Histogram:\n") & 0x80000000) == 0
      && (safe_snprintf( &v34,  v5,  v6,  &v35,  "     %s      %s            %s                     %s\n",  "Begin",  "End",  "Frequency",  "CDF") & 0x80000000) == 0)
    {
      if (*a1)
      {
        unint64_t v9 = 0LL;
        uint64_t v10 = 0LL;
        uint64_t v11 = a1 + 4;
        do
        {
          v10 += v11[1];
          if ((safe_snprintf( &v34,  v7,  v8,  &v35,  "%*lluKB%*lluKB\t\t%*llu\t\t%*llu\n",  8LL,  *(v11 - 1) >> 10,  8LL,  *v11 >> 10,  8LL,  v11[1],  8LL,  v10) & 0x80000000) != 0) {
            return 0xFFFFFFFFLL;
          }
          v11 += 3;
          ++v9;
          unint64_t v12 = *a1;
        }

        while (v9 < v12);
        unsigned int v13 = v12 - 1;
      }

      else
      {
        uint64_t v10 = 0LL;
        unsigned int v13 = -1;
      }

      if ((safe_snprintf( &v34,  v7,  v8,  &v35,  "%*s%*lluKB\t\t%*llu\t\t%*llu\n",  10LL,  ">",  8LL,  *(void *)&a1[6 * v13 + 4] >> 10,  8LL,  *((void *)a1 + 90),  8LL,  *((void *)a1 + 90) + v10) & 0x80000000) == 0)
      {
        uint64_t v16 = 0LL;
        for (uint64_t i = a1 + 252; ; i += 182)
        {
          if (*(void *)&a1[16 * v16 + 182])
          {
            if ((safe_snprintf(&v34, v14, v15, &v35, "Tier %u Latency Histogram:\n", v16) & 0x80000000) != 0
              || (safe_snprintf( &v34,  v18,  v19,  &v35,  "      %s        %s                %s                    %s\n",  "Begin",  "End",  "Freq",  "CDF") & 0x80000000) != 0)
            {
              return 0xFFFFFFFFLL;
            }

            __int128 v22 = &a1[182 * v16 + 246];
            if (*v22)
            {
              unint64_t v23 = 0LL;
              uint64_t v24 = 0LL;
              uint64_t v25 = i;
              while (1)
              {
                v24 += *(void *)v25;
                if ((safe_snprintf( &v34,  v20,  v21,  &v35,  "%*lluus%*lluus\t\t%*llu\t\t%*llu\n",  9LL,  *((void *)v25 - 2),  9LL,  *((void *)v25 - 1),  9LL,  *(void *)v25,  9LL,  v24) & 0x80000000) != 0) {
                  return 0xFFFFFFFFLL;
                }
                v25 += 6;
                ++v23;
                unint64_t v26 = *v22;
                if (v23 >= v26)
                {
                  unsigned int v27 = v26 - 1;
                  goto LABEL_22;
                }
              }
            }

            uint64_t v24 = 0LL;
            unsigned int v27 = -1;
LABEL_22:
            if ((safe_snprintf( &v34,  v20,  v21,  &v35,  "%*s%*lluus\t\t%*llu\t\t%*llu\n",  10LL,  ">",  9LL,  *(void *)&a1[182 * v16 + 250 + 6 * v27],  9LL,  *(void *)&a1[182 * v16 + 426],  9LL,  *(void *)&a1[182 * v16 + 426] + v24) & 0x80000000) != 0) {
              return 0xFFFFFFFFLL;
            }
          }

          if (++v16 == 4)
          {
            uint64_t v28 = 0LL;
            for (uint64_t j = a1 + 182;
                  !*j
               || (safe_snprintf(&v34, v14, v15, &v35, "Tier %u Aggregate Stats:\n", v28) & 0x80000000) == 0
               && (safe_snprintf( &v34,  v30,  v31,  &v35,  "\tNum IOs %llu Latency Mean %lluus Max Latency %lluus Latency SD %lluus\n",  *j,  j[1] / *j,  j[3],  (unint64_t)sqrt((double)(unint64_t)(j[2] / *j - j[1] / *j * (j[1] / *j)))) & 0x80000000) == 0 && (safe_snprintf( &v34,  v32,  v33,  &v35,  "\tReads %llu (%llu KB) Writes %llu (%llu KB)\n",  j[4],  j[5] >> 10,  j[6],  j[7] >> 10) & 0x80000000) == 0;
                  j += 8)
            {
              uint64_t result = 0LL;
              if (++v28 == 4) {
                return result;
              }
            }

            return 0xFFFFFFFFLL;
          }
        }
      }
    }

    return 0xFFFFFFFFLL;
  }

  return result;
}

uint64_t safe_snprintf(char **a1, _DWORD *a2, const char *a3, ...)
{
  unsigned int v4 = vsnprintf(*a1, *a2, a3, va);
  if ((v4 & 0x80000000) != 0) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v5 = v4;
  unsigned int v7 = *a2 - v4;
  BOOL v6 = *a2 > v4;
  if (*a2 < v4) {
    unsigned int v7 = 0;
  }
  *a2 = v7;
  if (!v6) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0LL;
  *a1 += v5;
  return result;
}

unsigned int *update_histograms_stats( unsigned int *result, unsigned int a2, unint64_t a3, unint64_t a4, int a5)
{
  if (result)
  {
    unsigned int v5 = &result[16 * (unint64_t)a2];
    ++*((void *)v5 + 91);
    *((void *)v5 + 92) += a4;
    *((void *)v5 + 93) += a4 * a4;
    if (*((void *)v5 + 94) < a4) {
      *((void *)v5 + 94) = a4;
    }
    BOOL v6 = &result[16 * (unint64_t)a2];
    if (a5)
    {
      *((void *)v6 + 96) += a3;
      unsigned int v7 = v6 + 190;
    }

    else
    {
      *((void *)v6 + 98) += a3;
      unsigned int v7 = v6 + 194;
    }

    ++*v7;
    uint64_t v8 = result[182 * a2 + 246];
    if ((_DWORD)v8)
    {
      uint64_t v9 = 0LL;
      uint64_t v10 = &result[182 * a2 + 252];
      while (*((void *)v10 - 1) < a4)
      {
        ++v9;
        v10 += 6;
        if (v8 == v9) {
          goto LABEL_15;
        }
      }

      ++*(void *)v10;
    }

    else
    {
      LODWORD(v9) = 0;
    }

    if ((_DWORD)v9 == (_DWORD)v8) {
LABEL_15:
    }
      ++*(void *)&result[182 * a2 + 426];
    uint64_t v11 = *result;
    if ((_DWORD)v11)
    {
      unint64_t v12 = result + 6;
      while (*(v12 - 1) < a3)
      {
        v12 += 3;
        if (!--v11) {
          goto LABEL_20;
        }
      }
    }

    else
    {
LABEL_20:
      unint64_t v12 = result + 180;
    }

    ++*v12;
  }

  return result;
}

double SASecondsFromMachTimeUsingTimebase(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = 0LL;
  if ((_DWORD)a2 && HIDWORD(a2))
  {
    if ((_DWORD)a2 != HIDWORD(a2)) {
      a1 = __udivti3();
    }
    unint64_t v2 = a1;
  }

  return (double)v2 / 1000000000.0;
}

double SACFAbsoluteTimeFromTimespec(uint64_t a1)
{
  return (double)*(uint64_t *)a1 - *MEMORY[0x189604DA8] + (double)*(unint64_t *)(a1 + 8) / 1000000000.0;
}

LABEL_82:
            self->_machContTimeSeconds = (double)v36 / v38;
            ((void (*)(void (**)(void)))v7[2])(v7);
            ((void (*)(void (**)(void)))v9[2])(v9);
            ((void (*)(void (**)(void)))v11[2])(v11);
            goto LABEL_83;
          }
        }

        else
        {
          __int128 v33 = self->_machContTimeSeconds;
        }

        unint64_t v38 = v119[3];
        unint64_t v36 = (unint64_t)(v33 * v38);
        self->_machContTime = v36;
        goto LABEL_82;
      }

      if (machContTimeSeconds != 0.0) {
        goto LABEL_84;
      }
      if (!v12) {
        unint64_t v12 = (SATimestamp *)-[SATimestamp copy](self, "copy");
      }
      if (*((_DWORD *)v123 + 8))
      {
        machContTime = self->_machContTime;
        if (*((_DWORD *)v123 + 9))
        {
          id v29 = 0LL;
          uint64_t v30 = v123[4];
          if ((_DWORD)v30)
          {
            if (HIDWORD(v30))
            {
              id v29 = self->_machContTime;
              if ((_DWORD)v30 != HIDWORD(v30)) {
                id v29 = __udivti3();
              }
            }
          }

          __int128 v31 = (double)v29 / 1000000000.0;
          goto LABEL_79;
        }
      }

      else
      {
        machContTime = self->_machContTime;
      }

      __int128 v31 = (double)machContTime / v119[3];
LABEL_79:
      self->_machContTimeSeconds = v31;
      ((void (*)(void (**)(void)))v7[2])(v7);
      ((void (*)(void (**)(void)))v9[2])(v9);
      ((void (*)(void (**)(void)))v11[2])(v11);
LABEL_83:
      __int128 v17 = 1;
LABEL_84:
      if (!*((_BYTE *)v94 + 24)) {
        goto LABEL_89;
      }
      if (!self->_machAbsTime)
      {
        unint64_t v41 = *((void *)v10 + 1);
        if (v41)
        {
          id v42 = v98[3] + v41;
          if (v42 > self->_machContTime)
          {
            char v43 = *__error();
            _sa_logt();
            id v44 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v61 = v98[3];
              if (v12) {
                uint64_t v62 = v12;
              }
              else {
                uint64_t v62 = self;
              }
              -[SATimestamp debugDescription](v62, "debugDescription");
              char v87 = (void *)objc_claimAutoreleasedReturnValue();
              uint64_t v63 = [v10 debugDescription];
              *(_DWORD *)buf = 134218498;
              v128 = v61;
              v129 = 2114;
              v130 = *(double *)&v87;
              v131 = 2114;
              v132 = v63;
              __int128 v85 = (void *)v63;
              _os_log_debug_impl( &dword_186C92000,  v44,  OS_LOG_TYPE_DEBUG,  "guessing missing timestamps: underflowed mach abs time with delta %llu:\n %{public}@ based on\n %{public}@",  buf,  0x20u);
            }

            *__error() = v43;
            goto LABEL_86;
          }

          if (!v12)
          {
            unint64_t v12 = (SATimestamp *)-[SATimestamp copy](self, "copy");
            id v42 = v98[3] + *((void *)v10 + 1);
          }

          self->_machAbsTime = v42;
          __int128 v55 = v119[3];
          if (v55 != 0.0)
          {
            if (*((_DWORD *)v123 + 8) && *((_DWORD *)v123 + 9))
            {
              __int128 v56 = 0LL;
              uint64_t v57 = v123[4];
              if (!(_DWORD)v57) {
                goto LABEL_140;
              }
              __int128 v55 = 1000000000.0;
              if (HIDWORD(v57))
              {
                if ((_DWORD)v57 == HIDWORD(v57)) {
                  __int128 v56 = v42;
                }
                else {
                  __int128 v56 = __udivti3();
                }
LABEL_140:
                __int128 v55 = 1000000000.0;
              }
            }

            else
            {
              __int128 v56 = v42;
            }

            self->_machAbsTimeSeconds = (double)(unint64_t)v56 / v55;
          }

          ((void (*)(void (**)(void)))v7[2])(v7);
          ((void (*)(void (**)(void)))v9[2])(v9);
          ((void (*)(void (**)(void)))v11[2])(v11);
          __int128 v17 = 1;
        }
      }

LABEL_86:
      if (self->_machContTime || (__int128 v45 = *((void *)v10 + 3)) == 0)
      {
        if ((v17 & 1) == 0)
        {
          __int128 v17 = 0;
          if (!*((_BYTE *)v106 + 24)) {
            goto LABEL_124;
          }
LABEL_89:
          if (self->_machAbsTimeSeconds == 0.0)
          {
            uint64_t v39 = v10[2];
            if (v39 != 0.0)
            {
              uint64_t v40 = v39 + v110[3];
              if (v40 <= 0.0)
              {
                __int128 v50 = *__error();
                _sa_logt();
                __int128 v51 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v58 = *((void *)v110 + 3);
                  if (v12) {
                    int v59 = v12;
                  }
                  else {
                    int v59 = self;
                  }
                  -[SATimestamp debugDescription](v59, "debugDescription");
                  __int128 v86 = (void *)objc_claimAutoreleasedReturnValue();
                  uint64_t v60 = [v10 debugDescription];
                  *(_DWORD *)buf = 134218498;
                  v128 = v58;
                  v129 = 2114;
                  v130 = *(double *)&v86;
                  v131 = 2114;
                  v132 = v60;
                  int v84 = (void *)v60;
                  _os_log_debug_impl( &dword_186C92000,  v51,  OS_LOG_TYPE_DEBUG,  "guessing missing timestamps: underflowed mach abs time seconds with delta %f:\n %{public}@ based on\n %{public}@",  buf,  0x20u);
                }

                *__error() = v50;
              }

              else
              {
                if (!v12)
                {
                  unint64_t v12 = (SATimestamp *)-[SATimestamp copy](self, "copy");
                  uint64_t v40 = v10[2] + v110[3];
                }

                self->_machAbsTimeSeconds = v40;
                ((void (*)(void (**)(void)))v7[2])(v7);
                ((void (*)(void (**)(void)))v9[2])(v9);
                ((void (*)(void (**)(void)))v11[2])(v11);
                __int128 v17 = 1;
              }
            }
          }

          if (self->_machContTimeSeconds == 0.0)
          {
            __int128 v52 = v10[4];
            if (v52 != 0.0)
            {
              __int128 v53 = v52 + v110[3];
              if (v53 > 0.0)
              {
                if (!v12)
                {
                  unint64_t v12 = (SATimestamp *)-[SATimestamp copy](self, "copy");
                  __int128 v53 = v10[4] + v110[3];
                }

                self->_machContTimeSeconds = v53;
                ((void (*)(void (**)(void)))v7[2])(v7);
                ((void (*)(void (**)(void)))v9[2])(v9);
                ((void (*)(void (**)(void)))v11[2])(v11);
                __int128 v17 = 1;
              }
            }
          }

          if (self->_wallTime == 0.0 && (__int128 v54 = v10[5], v54 != 0.0))
          {
            if (!v12)
            {
              unint64_t v12 = (SATimestamp *)-[SATimestamp copy](self, "copy");
              __int128 v54 = v10[5];
            }

            self->_wallTime = v54 + v110[3];
            ((void (*)(void (**)(void)))v7[2])(v7);
            ((void (*)(void (**)(void)))v9[2])(v9);
            ((void (*)(void (**)(void)))v11[2])(v11);
          }

          else
          {
LABEL_124:
            if ((v17 & 1) == 0)
            {
              if (self->_machAbsTime || self->_machAbsTimeSeconds == 0.0)
              {
                if (self->_machContTime || self->_machContTimeSeconds == 0.0)
                {

                  _Block_object_dispose(&v93, 8);
                  _Block_object_dispose(&v97, 8);

                  _Block_object_dispose(&v105, 8);
                  _Block_object_dispose(&v109, 8);

                  _Block_object_dispose(&v118, 8);
                  _Block_object_dispose(&v122, 8);

                  unsigned int v4 = v88;
                  break;
                }
              }

              else
              {
                id v64 = *__error();
                _sa_logt();
                uint64_t v65 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
                {
                  uint64_t v66 = self->_machAbsTime;
                  int v67 = self->_machAbsTimeSeconds;
                  *(_DWORD *)buf = 134218240;
                  v128 = v66;
                  v129 = 2048;
                  v130 = v67;
                  _os_log_error_impl( &dword_186C92000,  v65,  OS_LOG_TYPE_ERROR,  "machAbs %llu and machAbsSec %f",  buf,  0x16u);
                }

                *__error() = v64;
                _SASetCrashLogMessage( 516,  "machAbs %llu and machAbsSec %f",  v68,  v69,  v70,  v71,  v72,  v73,  self->_machAbsTime);
                _os_crash();
                __break(1u);
              }

              uint64_t v74 = *__error();
              _sa_logt();
              int v75 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
              {
                uint64_t v76 = self->_machContTime;
                uint64_t v77 = self->_machContTimeSeconds;
                *(_DWORD *)buf = 134218240;
                v128 = v76;
                v129 = 2048;
                v130 = v77;
                _os_log_error_impl( &dword_186C92000,  v75,  OS_LOG_TYPE_ERROR,  "machCont %llu and machContSec %f",  buf,  0x16u);
              }

              *__error() = v74;
              _SASetCrashLogMessage( 517,  "machCont %llu and machContSec %f",  v78,  v79,  v80,  v81,  v82,  v83,  self->_machContTime);
              _os_crash();
              __break(1u);
            }
          }
        }
      }

      else
      {
        if (!v12)
        {
          unint64_t v12 = (SATimestamp *)-[SATimestamp copy](self, "copy");
          __int128 v45 = *((void *)v10 + 3);
        }

        objc_super v46 = v98[3] + v45;
        self->_machContTime = v46;
        __int128 v47 = v119[3];
        if (v47 != 0.0)
        {
          if (*((_DWORD *)v123 + 8) && *((_DWORD *)v123 + 9))
          {
            __int128 v48 = 0LL;
            __int128 v49 = v123[4];
            if (!(_DWORD)v49) {
              goto LABEL_110;
            }
            __int128 v47 = 1000000000.0;
            if (HIDWORD(v49))
            {
              __int128 v48 = v46;
              __int128 v47 = 1000000000.0;
              if ((_DWORD)v49 != HIDWORD(v49))
              {
                __int128 v48 = __udivti3();
LABEL_110:
                __int128 v47 = 1000000000.0;
              }
            }
          }

          else
          {
            __int128 v48 = v46;
          }

          self->_machContTimeSeconds = (double)(unint64_t)v48 / v47;
        }

        ((void (*)(void (**)(void)))v7[2])(v7);
        ((void (*)(void (**)(void)))v9[2])(v9);
        ((void (*)(void (**)(void)))v11[2])(v11);
      }
    }
  }
}

void sub_186D131A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, char a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, char a40, uint64_t a41, uint64_t a42, uint64_t a43, char a44)
{
}

uint64_t SAMachTimeFromSecondsUsingTimebase(uint64_t a1, double a2)
{
  uint64_t result = 0LL;
  if ((_DWORD)a1 && HIDWORD(a1))
  {
    uint64_t result = (unint64_t)(a2 * 1000000000.0);
    if (HIDWORD(a1) != (_DWORD)a1) {
      return __udivti3();
    }
  }

  return result;
}

double SASecondsFromMachTimeUsingLiveTimebase(uint64_t a1)
{
  if (_MergedGlobals_7 != -1) {
    dispatch_once(&_MergedGlobals_7, &__block_literal_global_9);
  }
  if ((_DWORD)qword_18C4B16B0) {
    BOOL v2 = HIDWORD(qword_18C4B16B0) == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    a1 = 0LL;
  }

  else if ((_DWORD)qword_18C4B16B0 != HIDWORD(qword_18C4B16B0))
  {
    a1 = __udivti3();
  }

  return (double)(unint64_t)a1 / 1000000000.0;
}

uint64_t SAMachTimeFromNanosecondsUsingTimebase(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0LL;
  if ((_DWORD)a2 && HIDWORD(a2))
  {
    if (HIDWORD(a2) == (_DWORD)a2) {
      return a1;
    }
    else {
      return __udivti3();
    }
  }

  return v2;
}

uint64_t SAMachTimeFromSecondsUsingLiveTimebase(double a1)
{
  if (_MergedGlobals_7 != -1) {
    dispatch_once(&_MergedGlobals_7, &__block_literal_global_9);
  }
  if ((_DWORD)qword_18C4B16B0) {
    BOOL v2 = HIDWORD(qword_18C4B16B0) == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    return 0LL;
  }
  uint64_t result = (unint64_t)(a1 * 1000000000.0);
  if (HIDWORD(qword_18C4B16B0) != (_DWORD)qword_18C4B16B0) {
    return __udivti3();
  }
  return result;
}

uint64_t SANanosecondsFromMachTimeUsingTimebase(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0LL;
  if ((_DWORD)a2 && HIDWORD(a2))
  {
    if ((_DWORD)a2 == HIDWORD(a2)) {
      return a1;
    }
    else {
      return __udivti3();
    }
  }

  return v2;
}

uint64_t SANanosecondsFromMachTimeUsingLiveTimebase(uint64_t a1)
{
  if (_MergedGlobals_7 != -1) {
    dispatch_once(&_MergedGlobals_7, &__block_literal_global_9);
  }
  if ((_DWORD)qword_18C4B16B0) {
    BOOL v2 = HIDWORD(qword_18C4B16B0) == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    return 0LL;
  }
  if ((_DWORD)qword_18C4B16B0 != HIDWORD(qword_18C4B16B0)) {
    return __udivti3();
  }
  return a1;
}

uint64_t SAMachTimeFromNanosecondsUsingLiveTimebase(uint64_t a1)
{
  if (_MergedGlobals_7 != -1) {
    dispatch_once(&_MergedGlobals_7, &__block_literal_global_9);
  }
  if ((_DWORD)qword_18C4B16B0) {
    BOOL v2 = HIDWORD(qword_18C4B16B0) == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    return 0LL;
  }
  if (HIDWORD(qword_18C4B16B0) != (_DWORD)qword_18C4B16B0) {
    return __udivti3();
  }
  return a1;
}

double SAMachAbsTimeSecondsGetCurrent()
{
  uint64_t v0 = mach_absolute_time();
  return SASecondsFromMachTimeUsingLiveTimebase(v0);
}

double SAMachContTimeSecondsGetCurrent()
{
  uint64_t v0 = mach_continuous_time();
  return SASecondsFromMachTimeUsingLiveTimebase(v0);
}

uint64_t __SAMachTimebaseForLiveMachine_block_invoke()
{
  return mach_timebase_info((mach_timebase_info_t)&qword_18C4B16B0);
}

uint64_t CopyDyldSnapshotForPid(BOOL a1)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  uint64_t v23 = 0LL;
  uint64_t v24 = (double *)&v23;
  uint64_t v25 = 0x2020000000LL;
  uint64_t v26 = 0LL;
  uint64_t v19 = 0LL;
  __int128 v20 = &v19;
  uint64_t v21 = 0x2020000000LL;
  uint64_t v22 = 0LL;
  if (getpid() == a1)
  {
    uint64_t v2 = mach_absolute_time();
    double v3 = SASecondsFromMachTimeUsingLiveTimebase(v2);
    if (!dyld_process_create_for_current_task())
    {
      int v7 = *__error();
      _sa_logt();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl( &dword_186C92000,  v8,  OS_LOG_TYPE_FAULT,  "Unable to get dyld process for current process",  buf,  2u);
      }

      goto LABEL_17;
    }

    BOOL v18 = 0;
    uint64_t v4 = dyld_process_snapshot_create_for_process();
    v20[3] = v4;
    if (v4)
    {
      uint64_t v5 = mach_absolute_time();
      double v6 = SASecondsFromMachTimeUsingLiveTimebase(v5);
      v24[3] = v6 - v3;
    }

    dyld_process_dispose();
    if (!v20[3])
    {
      int v7 = *__error();
      _sa_logt();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 67109120;
        BOOL v28 = v18;
        _os_log_fault_impl( &dword_186C92000,  v8,  OS_LOG_TYPE_FAULT,  "Unable to get dyld process snapshot for current process: %d",  buf,  8u);
      }

void sub_186D15778( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

int *__CopyDyldSnapshotForPid_block_invoke(uint64_t a1)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  uint64_t v2 = (ipc_space_t *)MEMORY[0x1895FBBE0];
  int v3 = task_read_for_pid();
  if (v3)
  {
    int v4 = v3;
    int v5 = kill(*(_DWORD *)(a1 + 48), 0);
    int v6 = *__error();
    _sa_logt();
    int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v8 = v7;
    if (v5)
    {
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        int v9 = *(_DWORD *)(a1 + 48);
        *(_DWORD *)buf = 67109120;
        int v22 = v9;
        _os_log_impl( &dword_186C92000,  v8,  OS_LOG_TYPE_INFO,  "Unable to inspect [%d] since it's no longer alive",  buf,  8u);
      }
    }

    else if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v18 = *(_DWORD *)(a1 + 48);
      *(_DWORD *)buf = 67109376;
      int v22 = v18;
      __int16 v23 = 1024;
      int v24 = v4;
      _os_log_error_impl(&dword_186C92000, v8, OS_LOG_TYPE_ERROR, "Unable to inspect [%d]: %d", buf, 0xEu);
    }

    uint64_t result = __error();
    *uint64_t result = v6;
  }

  else
  {
    uint64_t v10 = mach_absolute_time();
    double v11 = SASecondsFromMachTimeUsingLiveTimebase(v10);
    if (dyld_process_create_for_task())
    {
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = dyld_process_snapshot_create_for_process();
      if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
      {
        uint64_t v12 = mach_absolute_time();
        *(double *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = SASecondsFromMachTimeUsingLiveTimebase(v12) - v11;
      }

      dyld_process_dispose();
      uint64_t result = (int *)mach_port_deallocate(*v2, 0);
      if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
      {
        int v14 = *__error();
        _sa_logt();
        uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          int v20 = *(_DWORD *)(a1 + 48);
          *(_DWORD *)buf = 67109376;
          int v22 = v20;
          __int16 v23 = 1024;
          int v24 = 0;
          _os_log_error_impl( &dword_186C92000,  v15,  OS_LOG_TYPE_ERROR,  "Unable to get dyld process snapshot for [%d]: %d",  buf,  0xEu);
        }

        uint64_t result = __error();
        *uint64_t result = v14;
      }
    }

    else
    {
      int v16 = *__error();
      _sa_logt();
      BOOL v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        int v19 = *(_DWORD *)(a1 + 48);
        *(_DWORD *)buf = 67109376;
        int v22 = v19;
        __int16 v23 = 1024;
        int v24 = 0;
        _os_log_error_impl( &dword_186C92000,  v17,  OS_LOG_TYPE_ERROR,  "Unable to get dyld process for [%d]: %d",  buf,  0xEu);
      }

      *__error() = v16;
      return (int *)mach_port_deallocate(*v2, 0);
    }
  }

  return result;
}

uint64_t _CopyLoadInfosForDyldSnapshot( uint64_t a1, int a2, int a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  if (a5) {
    *a5 = 0LL;
  }
  if (a6) {
    *a6 = 0LL;
  }
  if (a7) {
    *a7 = 0LL;
  }
  if (a8) {
    *a8 = 0LL;
  }
  uint64_t shared_cache = dyld_process_snapshot_get_shared_cache();
  if (shared_cache)
  {
    uint64_t v15 = shared_cache;
    MEMORY[0x186E475F8]();
    MEMORY[0x186E47604](v15);
    if (a6 || a3)
    {
      +[SASharedCache sharedCacheWithDyldSharedCache:]((uint64_t)&OBJC_CLASS___SASharedCache, v15);
      int v16 = (void *)objc_claimAutoreleasedReturnValue();
      BOOL v17 = v16;
      if (a6) {
        *a6 = v16;
      }
    }

    if (a5) {
      goto LABEL_26;
    }
  }

  else
  {
    if (a2)
    {
      int v18 = *__error();
      _sa_logt();
      int v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = a2;
        _os_log_impl(&dword_186C92000, v19, OS_LOG_TYPE_INFO, "[%d] No shared cache", buf, 8u);
      }

      *__error() = v18;
    }

    if (a5) {
      goto LABEL_26;
    }
  }

  if (!a7 && (a3 & 1) == 0 && !a8) {
    return 0LL;
  }
LABEL_26:
  if (a5) {
    id v21 = objc_alloc_init(MEMORY[0x189603FA8]);
  }
  else {
    id v21 = 0LL;
  }
  *(void *)buf = 0LL;
  __int16 v31 = buf;
  uint64_t v32 = 0x2020000000LL;
  int v33 = 0;
  v26[0] = 0LL;
  v26[1] = v26;
  v26[2] = 0x2020000000LL;
  char v27 = 0;
  id v22 = v21;
  dyld_process_snapshot_for_each_image();
  uint64_t v20 = *((unsigned int *)v31 + 6);
  if (!(_DWORD)v20 && a5)
  {
    if ([v22 count])
    {
      +[SABinaryLoadInfo sortBinaryLoadInfos:]((uint64_t)&OBJC_CLASS___SABinaryLoadInfo, v22);
    }

    else
    {
      int v23 = *__error();
      _sa_logt();
      int v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)BOOL v28 = 67109120;
        int v29 = a2;
        _os_log_fault_impl(&dword_186C92000, v24, OS_LOG_TYPE_FAULT, "No non-shared cache load infos for [%d]", v28, 8u);
      }

      *__error() = v23;
    }

    *a5 = (id)[v22 copy];
  }

  _Block_object_dispose(v26, 8);
  _Block_object_dispose(buf, 8);

  return v20;
}

void sub_186D15DD4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
}

uint64_t DyldImageEnumerateSegments(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v14 = 0LL;
  uint64_t v15 = &v14;
  uint64_t v16 = 0x2020000000LL;
  int v17 = 0;
  v10[0] = MEMORY[0x1895F87A8];
  v10[1] = 3221225472LL;
  v10[2] = __DyldImageEnumerateSegments_block_invoke;
  v10[3] = &unk_189F63638;
  uint64_t v12 = &v14;
  uint64_t v13 = a1;
  id v4 = v3;
  id v11 = v4;
  int v5 = MEMORY[0x186E4755C](a1, v10);
  int v6 = *((_DWORD *)v15 + 6);
  if (v6 > 0) {
    unsigned int v7 = -v6;
  }
  else {
    unsigned int v7 = 0x80000000;
  }
  if (v5) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = v7;
  }

  _Block_object_dispose(&v14, 8);
  return v8;
}

void sub_186D15EC8(_Unwind_Exception *a1)
{
}

void __DyldImageEnumerateSegments_block_invoke(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  if (qword_18C4B16C8 != -1) {
    dispatch_once(&qword_18C4B16C8, &__block_literal_global_10);
  }
  if (dword_18C4B16BC >= 2)
  {
    uint64_t v8 = DyldImagePath(a1[6]);
    printf("dyld %#18llx - %#18llx (%#10llx) %16s %s\n", a3, a4 + a3, a4, a2, v8);
  }

  if (a2 && !SAShouldIgnoreSegmentWithCName(a2))
  {
    ++*(_DWORD *)(*(void *)(a1[5] + 8LL) + 24LL);
    uint64_t v9 = a1[4];
    if (v9) {
      (*(void (**)(uint64_t, const char *, uint64_t, uint64_t))(v9 + 16))(v9, a2, a3, a4);
    }
  }

uint64_t SACompareDyldToCSLevel()
{
  if (qword_18C4B16C8 != -1) {
    dispatch_once(&qword_18C4B16C8, &__block_literal_global_10);
  }
  return dword_18C4B16BC;
}

const char *DyldImagePath(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  uint64_t v2 = (const char *)MEMORY[0x186E47574]();
  id v3 = v2;
  if (!v2)
  {
    uint64_t v8 = (const char *)MEMORY[0x186E47568](a1);
    if (v8) {
      goto LABEL_14;
    }
LABEL_20:
    int v6 = *__error();
    _sa_logt();
    unsigned int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      int v11 = 136315138;
      uint64_t v12 = v3;
      _os_log_impl(&dword_186C92000, v7, OS_LOG_TYPE_INFO, "No absolute path from dyld: %s", (uint8_t *)&v11, 0xCu);
    }

const char *__SACompareDyldToCSLevel_block_invoke()
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  uint64_t result = getenv("SA_COMPARE_DYLD_TO_CS");
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = (const char *)strtol(result, 0LL, 0);
    dword_18C4B16BC = (int)result;
    if (result >= 3)
    {
      int v2 = *__error();
      _sa_logt();
      id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109378;
        int v11 = dword_18C4B16BC;
        __int16 v12 = 2080;
        __int16 v13 = v1;
        _os_log_error_impl( &dword_186C92000,  v3,  OS_LOG_TYPE_ERROR,  "SA_COMPARE_DYLD_TO_CS of %d invalid (from %s)",  buf,  0x12u);
      }

      *__error() = v2;
      _SASetCrashLogMessage( 328,  "SA_COMPARE_DYLD_TO_CS of %d invalid (from %s)",  v4,  v5,  v6,  v7,  v8,  v9,  dword_18C4B16BC);
      _os_crash();
      __break(1u);
    }
  }

  return result;
}

void sub_186D16664( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void _saos_printf_frame_timerange(void *a1, unint64_t a2, unint64_t a3)
{
  id v5 = a1;
  if (a2 <= a3)
  {
    id v6 = v5;
    objc_msgSend(v5, "printWithFormat:", @" %lu", a2);
    id v5 = v6;
    if (a2 != a3)
    {
      objc_msgSend(v6, "printWithFormat:", @"-%lu", a3);
      id v5 = v6;
    }
  }
}

uint64_t _saos_printf_state_appended_noparens(void *a1, uint64_t a2, uint64_t *a3, void *a4)
{
  id v7 = a1;
  id v8 = a4;
  uint64_t v9 = v8;
  if (!a3)
  {
    BOOL v11 = v8 != 0LL;
    if (a2 || v8)
    {
      if ((a2 & 1) != 0)
      {
        uint64_t v13 = [v7 appendString:@"suspended"];
        if ((a2 & 4) == 0) {
          goto LABEL_27;
        }
      }

      else
      {
        uint64_t v13 = 0LL;
        if ((a2 & 4) == 0) {
          goto LABEL_27;
        }
      }

      goto LABEL_20;
    }

void _saos_printf_state_appended(void *a1, uint64_t a2, void *a3)
{
  if (a2 || a3)
  {
    id v5 = a3;
    id v6 = a1;
    objc_msgSend(v6, "appendString:", @" (");
    _saos_printf_state_appended_noparens(v6, a2, 0LL, v5);

    [v6 appendString:@""]);
  }

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
}

void sub_186D18864( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

LABEL_117:
  }

  [*(id *)(v540 + 160) timestampOfLastStackshot];
  __int16 v107 = (void *)objc_claimAutoreleasedReturnValue();
  if (v107
    || -[SASamplePrinter hasTimeIndexes](v540)
    && ([*(id *)(v540 + 160) sampleTimestamps],
        v110 = (void *)objc_claimAutoreleasedReturnValue(),
        [v110 lastObject],
        __int16 v107 = (void *)objc_claimAutoreleasedReturnValue(),
        v110,
        v107))
  {
    uint64_t v108 = +[SADependencyGraphNode dependencyGraphForThreadsInSampleStore:atTimestamp:]( &OBJC_CLASS___SADependencyGraphNode,  "dependencyGraphForThreadsInSampleStore:atTimestamp:",  *(void *)(v540 + 160),  v107);
    __int16 v109 = *(void **)(v540 + 144);
    *(void *)(v540 + 144) = v108;
  }

  uint64_t v111 = (id *)v540;
  [*(id *)(v540 + 8) appendString:@"\nBinary Images:\n"];
  v112 = (void *)[objc_alloc(MEMORY[0x189603FC8]) initWithCapacity:512];
  *(void *)&v572 = MEMORY[0x1895F87A8];
  *((void *)&v572 + 1) = 3221225472LL;
  *(void *)&v573 = __52__SASamplePrinter_printSystemStatsStyleBinaryImages__block_invoke;
  *((void *)&v573 + 1) = &unk_189F63DE8;
  v517 = v112;
  *(void *)&v574 = v517;
  __int16 v113 = (void *)MEMORY[0x186E47C94](&v572);
  v114 = *(void **)(v540 + 160);
  *(void *)&v576 = MEMORY[0x1895F87A8];
  *((void *)&v576 + 1) = 3221225472LL;
  *(void *)&v577 = __52__SASamplePrinter_printSystemStatsStyleBinaryImages__block_invoke_2;
  *((void *)&v577 + 1) = &unk_189F63E38;
  v502 = v113;
  *((void *)&v578 + 1) = v502;
  *(void *)&v578 = v540;
  [v114 enumerateTasks:&v576];
  [v517 allKeys];
  uint64_t v115 = (void *)objc_claimAutoreleasedReturnValue();
  [v115 sortedArrayUsingComparator:&__block_literal_global_1260];
  v116 = (void *)objc_claimAutoreleasedReturnValue();

  v595 = 0u;
  v596 = 0u;
  v593 = 0u;
  v594 = 0u;
  v505 = v116;
  v511 = (char *)[v505 countByEnumeratingWithState:&v593 objects:v604 count:16];
  if (!v511) {
    goto LABEL_179;
  }
  v523 = 0LL;
  v508 = *(void *)v594;
  do
  {
    v117 = 0LL;
    do
    {
      if (*(void *)v594 != v508)
      {
        v118 = v117;
        objc_enumerationMutation(v505);
        v117 = v118;
      }

      v514 = v117;
      inited = *(char **)(*((void *)&v593 + 1) + 8LL * (void)v117);
      objc_msgSend(v517, "objectForKeyedSubscript:");
      v119 = (void *)objc_claimAutoreleasedReturnValue();
      [v119 sortUsingComparator:&__block_literal_global_1262];
      v588 = 0u;
      v589 = 0u;
      v586 = 0u;
      v587 = 0u;
      v532 = v119;
      v526 = (id)[v532 countByEnumeratingWithState:&v586 objects:&v600 count:16];
      if (v526)
      {
        v520 = *(id *)v587;
        do
        {
          for (n = 0LL; n != v526; n = (char *)n + 1)
          {
            if (*(id *)v587 != v520) {
              objc_enumerationMutation(v532);
            }
            v121 = *(void **)(*((void *)&v586 + 1) + 8LL * (void)n);
            [v121 binary];
            v122 = (char *)objc_claimAutoreleasedReturnValue();
            v123 = v122 == inited;

            if (!v123)
            {
              v167 = *__error();
              _sa_logt();
              v168 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v168, OS_LOG_TYPE_ERROR))
              {
                v169 = [v121 debugDescription];
                v170 = [v169 UTF8String];
                v171 = [inited debugDescription];
                v172 = [v171 UTF8String];
                *(_DWORD *)v597 = 136315394;
                *(void *)&v597[4] = v170;
                *(_WORD *)&v597[12] = 2080;
                *(void *)&v597[14] = v172;
                _os_log_error_impl( &dword_186C92000,  v168,  OS_LOG_TYPE_ERROR,  "load info %s not using binary %s",  v597,  0x16u);
              }

              *__error() = v167;
              v173 = [v121 debugDescription];
              uint64_t v111 = (id *)[v173 UTF8String];
              v174 = [inited debugDescription];
              [v174 UTF8String];
              _SASetCrashLogMessage( 7927,  "load info %s not using binary %s",  v175,  v176,  v177,  v178,  v179,  v180,  (char)v111);

              _os_crash();
              __break(1u);
LABEL_193:
              [v111[20] targetProcess];
              v165 = (id)objc_claimAutoreleasedReturnValue();
              uint64_t v111 = (id *)v540;
              goto LABEL_194;
            }

            [v121 segment];
            v124 = (void *)objc_claimAutoreleasedReturnValue();
            v125 = [v121 isInKernelAddressSpace];
            [v124 name];
            v126 = (void *)objc_claimAutoreleasedReturnValue();
            v127 = inited;
            v128 = v126;
            v129 = *(void **)(v540 + 80);
            if (!v129)
            {
              v130 = [objc_alloc(MEMORY[0x189603FC8]) initWithCapacity:512];
              v131 = *(void **)(v540 + 80);
              *(void *)(v540 + 80) = v130;

              v129 = *(void **)(v540 + 80);
            }

            [v129 objectForKeyedSubscript:v127];
            v132 = (void *)objc_claimAutoreleasedReturnValue();
            if (!v132)
            {
              v132 = (void *)[objc_alloc(MEMORY[0x189603FC8]) initWithCapacity:1];
              [*(id *)(v540 + 80) setObject:v132 forKeyedSubscript:v127];
            }

            [MEMORY[0x189607968] numberWithLong:(char *)n + v523];
            v133 = (void *)objc_claimAutoreleasedReturnValue();
            if (v128)
            {
              [v132 setObject:v133 forKeyedSubscript:v128];
            }

            else
            {
              [MEMORY[0x189603FE8] null];
              v134 = (void *)objc_claimAutoreleasedReturnValue();
              [v132 setObject:v133 forKeyedSubscript:v134];
            }

            objc_msgSend(*(id *)(v540 + 8), "printWithFormat:", @"%lu", (char *)n + v523);
            v135 = *(void **)(v540 + 8);
            if (v125) {
              v136 = "*";
            }
            else {
              v136 = "";
            }
            [v127 bundleIdentifier];
            v137 = (void *)objc_claimAutoreleasedReturnValue();
            if (v137)
            {
              [v127 bundleIdentifier];
              v138 = (void *)objc_claimAutoreleasedReturnValue();
              SACopySanitizedString(v138, 1, 0LL);
              v139 = (void *)objc_claimAutoreleasedReturnValue();
              [v135 printWithFormat:@"\t%s%@", v136, v139];
            }

            else
            {
              [v135 printWithFormat:@"\t%s%@", v136, &stru_189F64BD8];
            }

            [*(id *)(v540 + 8) appendString:@"\t"];
            [v127 bundleVersion];
            v140 = (void *)objc_claimAutoreleasedReturnValue();
            [v127 bundleShortVersion];
            v141 = (void *)objc_claimAutoreleasedReturnValue();
            v142 = [v127 binaryVersion];
            v143 = (void *)v142;
            v144 = v540;
            if (v141 || v140 || v142)
            {
              if (v141)
              {
                v145 = *(void **)(v540 + 8);
                SACopySanitizedString(v141, 1, 0LL);
                v146 = (void *)objc_claimAutoreleasedReturnValue();
                [v145 appendString:v146];

                v144 = v540;
              }

              if (v140)
              {
                v147 = *(void **)(v144 + 8);
                SACopySanitizedString(v140, 1, 0LL);
                v148 = (void *)objc_claimAutoreleasedReturnValue();
                [v147 printWithFormat:@" (%@)", v148];
              }

              else
              {
                if (!v143) {
                  goto LABEL_162;
                }
                v149 = *(void **)(v144 + 8);
                SACopySanitizedString(v143, 1, 0LL);
                v148 = (void *)objc_claimAutoreleasedReturnValue();
                [v149 printWithFormat:@" (%@)", v148];
              }

              v144 = v540;
            }

LABEL_162:
            v150 = *(void **)(v144 + 8);
            [v127 uuid];
            v151 = (void *)objc_claimAutoreleasedReturnValue();
            v152 = [v151 UUIDString];
            v153 = (void *)v152;
            v154 = &stru_189F64BD8;
            if (v152) {
              v154 = (const __CFString *)v152;
            }
            [v150 printWithFormat:@"\t<%@>", v154];

            if (v124
              && [v532 count] == 1
              && [v124 hasOffsetIntoBinary]
              && ![v124 offsetIntoBinary])
            {

              v124 = 0LL;
            }

            v155 = *(void **)(v540 + 8);
            v156 = [v124 name];
            v157 = (void *)v156;
            v158 = &stru_189F64BD8;
            if (v156) {
              v158 = (const __CFString *)v156;
            }
            [v155 printWithFormat:@"\t%@", v158];

            [*(id *)(v540 + 8) appendString:@"\t"];
            [v127 path];
            v159 = (void *)objc_claimAutoreleasedReturnValue();
            if (v159)
            {
              if ([*(id *)(v540 + 160) sanitizePaths])
              {
                v160 = v159;
              }

              v161 = *(void **)(v540 + 8);
              SACopySanitizedString(v159, 1, 0LL);
              v162 = (void *)objc_claimAutoreleasedReturnValue();
              [v161 appendString:v162];
            }

            [*(id *)(v540 + 8) appendString:@"\n"];
          }

          v526 = (id)[v532 countByEnumeratingWithState:&v586 objects:&v600 count:16];
          v523 += (uint64_t)n;
        }

        while (v526);
      }

      v117 = v514 + 1;
    }

    while (v514 + 1 != v511);
    v511 = (char *)[v505 countByEnumeratingWithState:&v593 objects:v604 count:16];
  }

  while (v511);
LABEL_179:

  uint64_t v111 = (id *)v540;
LABEL_180:
  v163 = v111[2];
  if (v163)
  {
    v164 = v163[21];
    if (v164 != 1 && (v164 || *((_BYTE *)v163 + 11)))
    {
      if (!*location) {
        goto LABEL_193;
      }
      v165 = *location;
LABEL_194:
      v181 = [v111[2] taskAggregation] == 3;
      v182 = objc_alloc(MEMORY[0x189603FC8]);
      [v111[20] tasksByUniquePid];
      v183 = (void *)objc_claimAutoreleasedReturnValue();
      v184 = (void *)objc_msgSend(v182, "initWithCapacity:", objc_msgSend(v183, "count"));

      v185 = v111[20];
      *(void *)&v568 = MEMORY[0x1895F87A8];
      *((void *)&v568 + 1) = 3221225472LL;
      *(void *)&v569 = __44__SASamplePrinter_printTasksWithAggregation__block_invoke;
      *((void *)&v569 + 1) = &unk_189F63BA0;
      v468 = v165;
      *(void *)&v570 = v468;
      *((void *)&v570 + 1) = v540;
      BYTE8(v571) = v181;
      v467 = v184;
      *(void *)&v571 = v467;
      [v185 enumerateTasks:&v568];
      [v111[2] processSortAttributes];
      v186 = (void *)objc_claimAutoreleasedReturnValue();
      [v467 allValues];
      v187 = (void *)objc_claimAutoreleasedReturnValue();
      v541 = MEMORY[0x1895F87A8];
      v542 = 3221225472LL;
      v543 = __44__SASamplePrinter_printTasksWithAggregation__block_invoke_963;
      v544 = &unk_189F63BC8;
      v545 = v540;
      v466 = v186;
      v546 = v466;
      [v187 sortedArrayUsingComparator:&v541];
      v188 = (id)objc_claimAutoreleasedReturnValue();

      if (v468)
      {
        v189 = [*(id *)(v540 + 16) printJson];
        if (v189) {
          [*(id *)(v540 + 8) appendString:@"\n\n\n{"];
        }
        v190 = [*(id *)(v540 + 160) targetDispatchQueueId];
        v191 = [*(id *)(v540 + 160) targetThreadId];
        v192 = [*(id *)(v540 + 16) printTargetThreadOnly];
        if (v190) {
          v193 = 0;
        }
        else {
          v193 = v192;
        }
        if (v193 != 1 || v191)
        {
          if (v190 | v191) {
            goto LABEL_219;
          }
          -[SASamplePrinter printTask:specialDispatchQueueId:specialThreadId:omitSpecial:omitOther:]( (id *)v540,  v468,  0LL,  0LL,  0LL,  0);
LABEL_225:
          v220 = v540;
        }

        else
        {
          [v468 mainThread];
          v194 = (void *)objc_claimAutoreleasedReturnValue();
          v191 = [v194 threadId];

          if (!v191)
          {
            v195 = *__error();
            _sa_logt();
            v196 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v196, OS_LOG_TYPE_ERROR))
            {
              v197 = [v468 debugDescription];
              v198 = [v197 UTF8String];
              *(_DWORD *)v604 = 136315138;
              v605 = v198;
              _os_log_error_impl( &dword_186C92000,  v196,  OS_LOG_TYPE_ERROR,  "no target dispatch queue nor thread id, target task %s, but no main thread",  v604,  0xCu);
            }

            *__error() = v195;
            v188 = [v468 debugDescription];
            v199 = [v188 UTF8String];
            _SASetCrashLogMessage( 5617,  "no target dispatch queue nor thread id, target task %s, but no main thread",  v200,  v201,  v202,  v203,  v204,  v205,  v199);

            _os_crash();
            __break(1u);
            goto LABEL_206;
          }

LABEL_219:
          -[SASamplePrinter printTask:specialDispatchQueueId:specialThreadId:omitSpecial:omitOther:]( (id *)v540,  v468,  v190,  v191,  0LL,  1);
          v219 = [*(id *)(v540 + 16) printTargetThreadOnly];
          v220 = v540;
          if (!v219
            || (v221 = *(void *)(v540 + 160)) != 0 && (*(_BYTE *)(v221 + 326) & 1) != 0 && *(void *)(v540 + 112))
          {
            -[SASamplePrinter printTask:specialDispatchQueueId:specialThreadId:omitSpecial:omitOther:]( (id *)v540,  v468,  v190,  v191,  (char *)1,  0);
            goto LABEL_225;
          }
        }

        v476 = v189 ^ 1;
      }

      else
      {
LABEL_206:
        v476 = 1;
      }

      v598 = 0u;
      v599 = 0u;
      memset(v597, 0, sizeof(v597));
      v470 = v188;
      v477 = [v470 countByEnumeratingWithState:v597 objects:&v593 count:16];
      if (!v477) {
        goto LABEL_334;
      }
      v475 = **(void **)&v597[16];
      while (2)
      {
        v222 = 0LL;
        v223 = v540;
LABEL_231:
        if (**(void **)&v597[16] != v475)
        {
          v224 = v222;
          objc_enumerationMutation(v470);
          v223 = v540;
          v222 = v224;
        }

        v493 = v222;
        v225 = *(void **)(*(void *)&v597[8] + 8 * v222);
        if ([*(id *)(v223 + 16) printJson])
        {
          v226 = v540;
          if ((v476 & 1) == 0)
          {
            [*(id *)(v540 + 8) appendString:@","];
            v226 = v540;
          }

          [*(id *)(v226 + 8) appendString:@"\n\n\n{"];
          v476 = 0;
        }

        v227 = v225;
        v494 = (void *)MEMORY[0x186E47ACC]();
        v228 = v227;
        LODWORD(inited) = -[SASamplePrinter hasTimeIndexes](v540);
        *(void *)v562 = 0LL;
        v563 = (uint64_t)v562;
        v564 = 0x3032000000LL;
        v565 = __Block_byref_object_copy__4;
        v566 = __Block_byref_object_dispose__4;
        v567 = 0LL;
        v556 = 0LL;
        v557 = (uint64_t)&v556;
        v558 = 0x3032000000LL;
        v559 = __Block_byref_object_copy__4;
        v560 = __Block_byref_object_dispose__4;
        v561 = 0LL;
        *(void *)buf = 0LL;
        *(void *)&uint8_t buf[8] = buf;
        *(void *)&uint8_t buf[16] = 0x2020000000LL;
        v585 = 0x7FFFFFFFFFFFFFFFLL;
        v552 = 0LL;
        v553 = &v552;
        v554 = 0x2020000000LL;
        v555 = 0x7FFFFFFFFFFFFFFFLL;
        v521 = (id)[objc_alloc(MEMORY[0x189603FA8]) initWithCapacity:1];
        v229 = (void **)v540;
        v533 = (id)objc_msgSend(objc_alloc(MEMORY[0x189603FC8]), "initWithCapacity:", objc_msgSend(v228, "count"));
        [v228 firstObject];
        v497 = (id *)objc_claimAutoreleasedReturnValue();
        v578 = 0u;
        v579 = 0u;
        v576 = 0u;
        v577 = 0u;
        v230 = &v568;
        v515 = v228;
        v231 = [v515 countByEnumeratingWithState:&v576 objects:v604 count:16];
        if (!v231)
        {
          v512 = 0LL;
          v509 = 0LL;
          v506 = 0LL;
          v503 = 0LL;
          v500 = 0LL;
          obja = 0LL;
          v518 = 0LL;
          goto LABEL_285;
        }

        v512 = 0LL;
        v509 = 0LL;
        v506 = 0LL;
        v503 = 0LL;
        v500 = 0LL;
        obja = 0LL;
        v527 = 0LL;
        v524 = 0LL;
        v518 = 0LL;
        v232 = *(void *)v577;
LABEL_239:
        v233 = 0LL;
LABEL_240:
        if (*(void *)v577 != v232) {
          objc_enumerationMutation(v515);
        }
        v234 = *(void **)(*((void *)&v576 + 1) + 8 * v233);
        if ([v234 pid])
        {
          [v234 sharedCache];
          v235 = (void *)objc_claimAutoreleasedReturnValue();
          v236 = v235;
          if (v235)
          {
            v237 = v235;
          }

          else
          {
            [MEMORY[0x189603FE8] null];
            v237 = (id)objc_claimAutoreleasedReturnValue();
          }

          v238 = v237;

          v574 = 0u;
          v575 = 0u;
          v572 = 0u;
          v573 = 0u;
          v230 = &v568;
          v239 = v521;
          v240 = [v239 countByEnumeratingWithState:&v572 objects:&v600 count:16];
          if (v240)
          {
            v241 = *(void *)v573;
            while (2)
            {
              for (iuint64_t i = 0LL; ii != v240; ++ii)
              {
                if (*(void *)v573 != v241) {
                  objc_enumerationMutation(v239);
                }
                if (*(void **)(*((void *)&v572 + 1) + 8 * ii) == v238)
                {

                  goto LABEL_256;
                }
              }

              v240 = [v239 countByEnumeratingWithState:&v572 objects:&v600 count:16];
              if (v240) {
                continue;
              }
              break;
            }
          }

          [v239 addObject:v238];
LABEL_256:

          v229 = (void **)v540;
        }

        if (([v229[20] dataSource] != 8 || objc_msgSend(v229[20], "haveKPerfSched"))
          && [v229[20] dataStyle] != 1
          && [v229[20] dataStyle])
        {
          *(void *)v580 = 0LL;
          v551 = 0LL;
          v550 = 0LL;
          v549 = 0LL;
          v548 = 0LL;
          v547 = 0LL;
          -[SATask cpuTimeNs:cpuInstructions:cpuCycles:nonThreadCpuTimeNs:nonThreadCpuInstructions:nonThreadCpuCycles:betweenStartTime:endTime:]( v234,  v580,  &v551,  &v550,  &v549,  &v548,  &v547,  v229[4],  v229[5]);
          obja += *(void *)v580;
          v500 += v551;
          v503 += v550;
          v506 += v549;
          v509 += v548;
          v512 += v547;
        }

        *(void *)v580 = 0LL;
        v581 = v580;
        v582 = 0x2020000000LL;
        v583 = 0LL;
        [v234 taskStates];
        v243 = (void *)objc_claimAutoreleasedReturnValue();
        v244 = [v243 count] == 0;

        if (!v244)
        {
          v229 = (void **)v540;
          v245 = [v234 indexOfFirstTaskStateOnOrAfterTime:*(void *)(v540 + 32) sampleIndex:*(void *)(v540 + 48)];
          if (v245 != 0x7FFFFFFFFFFFFFFFLL)
          {
            v246 = [v234 indexOfLastTaskStateOnOrBeforeTime:*(void *)(v540 + 40) sampleIndex:*(void *)(v540 + 56)];
            v247 = v246;
            if (v246 != 0x7FFFFFFFFFFFFFFFLL)
            {
              v248 = v246 - v245;
              if (v246 >= v245)
              {
                [v234 taskStates];
                v249 = (void *)objc_claimAutoreleasedReturnValue();
                [v249 objectAtIndexedSubscript:v245];
                v250 = (void *)objc_claimAutoreleasedReturnValue();

                if (!*(void *)(v563 + 40)
                  || ([v250 startTimestamp],
                      v251 = (void *)objc_claimAutoreleasedReturnValue(),
                      v252 = [v251 lt:*(void *)(v563 + 40)],
                      v251,
                      v252))
                {
                  v253 = [v250 startTimestamp];
                  v254 = *(void **)(v563 + 40);
                  *(void *)(v563 + 40) = v253;

                  if ((_DWORD)inited)
                  {
                    v255 = [v250 startSampleIndex];
                    *(void *)(*(void *)&buf[8] + 24LL) = v255;
                    if (v255 == 0x7FFFFFFFFFFFFFFFLL)
                    {
                      v256 = [v250 endSampleIndex] + 1;
                      *(void *)(*(void *)&buf[8] + 24LL) = v256;
                    }
                  }
                }

                [v234 taskStates];
                v257 = (void *)objc_claimAutoreleasedReturnValue();
                [v257 objectAtIndexedSubscript:v247];
                v258 = (void *)objc_claimAutoreleasedReturnValue();

                if (!*(void *)(v557 + 40)
                  || ([v258 endTimestamp],
                      v259 = (void *)objc_claimAutoreleasedReturnValue(),
                      v260 = [v259 gt:*(void *)(v557 + 40)],
                      v259,
                      v260))
                {
                  v261 = [v258 endTimestamp];
                  v262 = *(void **)(v557 + 40);
                  *(void *)(v557 + 40) = v261;

                  if ((_DWORD)inited)
                  {
                    v263 = [v258 endSampleIndex];
                    v553[3] = v263;
                  }
                }

                *((void *)v581 + 3) += v248 + 1;

LABEL_277:
                v265 = -[SASamplePrinter displayStringForResourceCoalition:](v234);
                [v533 objectForKeyedSubscript:v265];
                v266 = (void *)objc_claimAutoreleasedReturnValue();
                v267 = (void *)MEMORY[0x189607968];
                v268 = [v266 unsignedLongLongValue];
                [v267 numberWithUnsignedLongLong:*((void *)v581 + 3) + v268];
                v269 = (void *)objc_claimAutoreleasedReturnValue();
                [v533 setObject:v269 forKeyedSubscript:v265];

                v270 = -[SASamplePrinter numIOsForTask:ioSize:](v540, v234, &v551);
                v527 += v270;
                v524 += v270;
              }

              v229 = (void **)v540;
            }
          }

          _Block_object_dispose(v580, 8);
          if (++v233 == v231)
          {
            v231 = [v515 countByEnumeratingWithState:&v576 objects:v604 count:16];
            if (!v231)
            {
LABEL_285:

              if ((_DWORD)inited)
              {
                v271 = *(void *)(*(void *)&buf[8] + 24LL);
                v272 = v540;
                if (v271 != 0x7FFFFFFFFFFFFFFFLL)
                {
                  v273 = v553[3];
                  if (v273 != 0x7FFFFFFFFFFFFFFFLL)
                  {
                    if (v273 >= *(void *)(v540 + 56)) {
                      v273 = *(void *)(v540 + 56);
                    }
                    if (v271 <= *(void *)(v540 + 48)) {
                      v271 = *(void *)(v540 + 48);
                    }
                    v518 = v273 - v271 + 1;
                  }
                }
              }

              else
              {
                v272 = v540;
              }

              if ([*(id *)(v272 + 16) omitTasksBelowSampleCount] < 1) {
                v274 = 0LL;
              }
              else {
                v274 = [*(id *)(v272 + 16) omitTasksBelowSampleCount];
              }
              if ((int)[*(id *)(v272 + 16) omitTasksBelowPercentOfTotalSamples] >= 1)
              {
                v275 = v272;
                v276 = *(void *)(v272 + 64);
                v277 = [*(id *)(v275 + 16) omitTasksBelowPercentOfTotalSamples];
                if (v274 <= v276 * v277 / 0x64uLL) {
                  v274 = v276 * v277 / 0x64uLL;
                }
              }

              if (v274 && v518 <= v274)
              {
LABEL_304:
                v518 = -1LL;
                goto LABEL_321;
              }

              v278 = [v497 mainBinary];
              if (!v278) {
                goto LABEL_477;
              }
              v279 = *location;
              v280 = *location;
              if (!*location)
              {
                [*(id *)(v540 + 160) targetProcess];
                v280 = (void *)objc_claimAutoreleasedReturnValue();
              }

              [v280 mainBinary];
              v281 = (void *)objc_claimAutoreleasedReturnValue();

              if (!v279) {
              if (v281 == (void *)v278)
              }
              {
                v282 = objc_alloc(NSString);
                v283 = -[SASamplePrinter displayNameForTask:includePid:]((void *)v540, v497, 0);
                v492 = (void *)[v282 initWithFormat:@"%@ (other tasks)", v283];
              }

              else
              {
                v492 = -[SASamplePrinter displayNameForTask:includePid:]((void *)v540, v497, 0);
              }

              inited = (char *)v278;
              v491 = -[SASamplePrinter architectureStringForTask:](v540, v497);
              v487 = -[SASamplePrinter displayStringForOnBehalfOfForTasks:includePid:](v540, v515);
              v473 = *(void **)(v540 + 8);
              [v497 mainBinaryPath];
              v490 = (void *)objc_claimAutoreleasedReturnValue();
              [v497 bundleIdentifier];
              v484 = (void *)objc_claimAutoreleasedReturnValue();
              [v497 bundleVersion];
              v489 = (void *)objc_claimAutoreleasedReturnValue();
              [v497 bundleShortVersion];
              v486 = (void *)objc_claimAutoreleasedReturnValue();
              [v497 bundleBuildVersion];
              v483 = (void *)objc_claimAutoreleasedReturnValue();
              [v497 bundleProjectName];
              v488 = (void *)objc_claimAutoreleasedReturnValue();
              [v497 bundleSourceVersion];
              v485 = (void *)objc_claimAutoreleasedReturnValue();
              [v497 bundleProductBuildVersion];
              v482 = (void *)objc_claimAutoreleasedReturnValue();
              v472 = [v497 adamID];
              [v497 installerVersionID];
              v481 = (void *)objc_claimAutoreleasedReturnValue();
              v471 = [v497 developerType];
              [v497 appType];
              v480 = (void *)objc_claimAutoreleasedReturnValue();
              v284 = [v497 isBeta];
              [v497 cohortID];
              v478 = (void *)objc_claimAutoreleasedReturnValue();
              [v497 vendorID];
              v479 = (void *)objc_claimAutoreleasedReturnValue();
              [v497 distributorID];
              v285 = (void *)objc_claimAutoreleasedReturnValue();
              [v497 codesigningID];
              v286 = (void *)objc_claimAutoreleasedReturnValue();
              [v497 teamID];
              v287 = (void *)objc_claimAutoreleasedReturnValue();
              v288 = [v497 pid];
              if (v288)
              {
                v474 = 0LL;
              }

              else
              {
                [*(id *)(v540 + 160) kernelVersion];
                v469 = (void *)objc_claimAutoreleasedReturnValue();
                SACopySanitizedString(v469, 1, 0LL);
                v474 = (void *)objc_claimAutoreleasedReturnValue();
              }

              -[SASamplePrinter addTaskHeaderToStream:displayName:pid:mainBinary:mainBinaryPath:sharedCaches:uid:bundleIdentifier:bundleVersion:bundleShortVersion:bundleBuildVersion:bundleProjectName:bundleSourceVersion:bundleProductBuildVersion:adamID:installerVersionID:developerType:appType:isBeta:cohortID:vendorID:distributorID:codesigningID:teamID:resourceCoalitionSampleCounts:onBehalfOfProcesses:architectureString:kernelVersion:parentName:responsibleName:taskExecedFromName:taskExecedToName:pidStartTimestamp:startTimestamp:endTimestamp:startSampleIndex:endSampleIndex:numSamples:totalNumSamples:numSamplesSuspended:numSamplesTerminated:startingTaskSize:endingTaskSize:maxTaskSize:startSampleIndexOfMaxTaskSize:endSampleIndexOfMaxTaskSize:numPageins:cpuTimeNs:cpuInstructions:cpuCycles:nonThreadCpuTimeNs:nonThreadCpuInstructions:nonThreadCpuCycles:usesSuddenTermination:allowsIdleExit:isTranslocated:isUnresponsive:timeOfLastResponse:numThreads:numIdleWorkQueueThreads:numOtherHiddenThreads:hieSwallowedException:wqExceededConstrainedThreadLimit:wqExceededTotalThreadLimit:threadsDeadlocked:threadsBlockedByADeadlock:ioSize:numIOs:isReportHeader:]( v540,  v473,  v492,  0xFFFFFFFFLL,  inited,  v490,  v521,  4294966982LL,  0.0,  v484,  v489,  v486,  v483,  v488,  v485,  v482,  v472,  v481,  v471,  v480,  v284,  v478,  v479,  v285,  v286,  v287,  v533,  v487,  v491,  v474,  0LL,  0LL,  0LL,  0LL,  0LL,  *(void **)(v563 + 40),  *(void **)(v557 + 40),  *(void *)(*(void *)&buf[8] + 24LL),  v553[3],  v518,  *(void *)(v540 + 64),  0LL,  0LL,  0LL,  0LL,  0LL,  0x7FFFFFFFFFFFFFFFuLL,  0x7FFFFFFFFFFFFFFFuLL,  0,
                (unint64_t)obja,
                (unint64_t)v500,
                v503,
                (unint64_t)v506,
                v509,
                (unint64_t)v512,
                0,
                0,
                [v497 isTranslocated],
                0,
                0LL,
                0LL,
                0LL,
                0);
              if (!v288)
              {
              }

LABEL_321:
              _Block_object_dispose(&v552, 8);
              _Block_object_dispose(buf, 8);
              _Block_object_dispose(&v556, 8);

              _Block_object_dispose(v562, 8);
              if ((v518 & 0x8000000000000000LL) == 0)
              {
                v289 = *(void *)(v540 + 16);
                if (v289)
                {
                  v290 = *(void *)(v289 + 152);
                  if (v290 == 3 || !v290 && *(_BYTE *)(v289 + 11))
                  {
                    if (v518)
                    {
                      -[SASamplePrinter printSingleStackForTasks:limitToDispatchQueueIds:limitToThreadIds:intersection:sampleCount:]( v540,  v515,  0LL,  0LL,  0,  v518);
                      v289 = *(void *)(v540 + 16);
                    }

                    if (([(id)v289 systemstatsFormat] & 1) == 0)
                    {
                      [v515 firstObject];
                      v291 = (void *)objc_claimAutoreleasedReturnValue();
                      -[SASamplePrinter printBinaryImagesForTask:](v540, v291);
                    }
                  }
                }
              }

              objc_autoreleasePoolPop(v494);

              v222 = v493 + 1;
              v223 = v540;
              if (v493 + 1 == v477)
              {
                v477 = [v470 countByEnumeratingWithState:v597 objects:&v593 count:16];
                if (!v477)
                {
LABEL_334:

                  goto LABEL_335;
                }

                continue;
              }

              goto LABEL_231;
            }

            goto LABEL_239;
          }

          goto LABEL_240;
        }

        break;
      }

      [v234 threads];
      v264 = (void *)objc_claimAutoreleasedReturnValue();
      *(void *)&v586 = MEMORY[0x1895F87A8];
      *((void *)&v586 + 1) = 3221225472LL;
      *(void *)&v587 = __51__SASamplePrinter_printTaskHeaderForMultipleTasks___block_invoke;
      *((void *)&v587 + 1) = &unk_189F63BF0;
      *(void *)&v588 = v540;
      *((void *)&v588 + 1) = v562;
      v592 = (char)inited;
      *(void *)&v589 = buf;
      *((void *)&v589 + 1) = &v556;
      v590 = &v552;
      v591 = v580;
      [v264 enumerateKeysAndObjectsUsingBlock:&v586];

      goto LABEL_277;
    }
  }

  if (*location)
  {
    v166 = *location;
  }

  else
  {
    [v111[20] targetProcess];
    v166 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v111 = (id *)v540;
  }

  v206 = (void *)[MEMORY[0x189604A58] mutableCopy];
  v207 = v111[20];
  *(void *)&v593 = MEMORY[0x1895F87A8];
  *((void *)&v593 + 1) = 3221225472LL;
  *(void *)&v594 = __41__SASamplePrinter_printTasksIndividually__block_invoke;
  *((void *)&v594 + 1) = &unk_189F63890;
  v208 = v166;
  *(void *)&v595 = v208;
  *((void *)&v595 + 1) = v111;
  v209 = v206;
  *(void *)&v596 = v209;
  [v207 enumerateTasks:&v593];
  [*(id *)(v540 + 16) processSortAttributes];
  v210 = (void *)objc_claimAutoreleasedReturnValue();
  *(void *)&v576 = MEMORY[0x1895F87A8];
  *((void *)&v576 + 1) = 3221225472LL;
  *(void *)&v577 = __41__SASamplePrinter_printTasksIndividually__block_invoke_2;
  *((void *)&v577 + 1) = &unk_189F63B50;
  *(void *)&v578 = v540;
  v211 = v210;
  *((void *)&v578 + 1) = v211;
  [v209 sortUsingComparator:&v576];
  *(void *)&v572 = 0LL;
  *((void *)&v572 + 1) = &v572;
  *(void *)&v573 = 0x2020000000LL;
  BYTE8(v573) = 1;
  *(void *)&v586 = MEMORY[0x1895F87A8];
  *((void *)&v586 + 1) = 3221225472LL;
  *(void *)&v587 = __41__SASamplePrinter_printTasksIndividually__block_invoke_957;
  *((void *)&v587 + 1) = &unk_189F63B78;
  *(void *)&v588 = v540;
  *(void *)&v589 = &v572;
  v212 = v208;
  *((void *)&v588 + 1) = v212;
  v213 = MEMORY[0x186E47C94](&v586);
  v214 = (void (**)(void, void))v213;
  if (v212) {
    (*(void (**)(uint64_t, id))(v213 + 16))(v213, v212);
  }
  v602 = 0u;
  v603 = 0u;
  v600 = 0u;
  v601 = 0u;
  v215 = v209;
  v216 = [v215 countByEnumeratingWithState:&v600 objects:v604 count:16];
  if (v216)
  {
    v217 = *(void *)v601;
    do
    {
      for (juint64_t j = 0LL; jj != v216; ++jj)
      {
        if (*(void *)v601 != v217) {
          objc_enumerationMutation(v215);
        }
        v214[2](v214, *(void *)(*((void *)&v600 + 1) + 8 * jj));
      }

      v216 = [v215 countByEnumeratingWithState:&v600 objects:v604 count:16];
    }

    while (v216);
  }

  _Block_object_dispose(&v572, 8);
LABEL_335:
  uint64_t v111 = (id *)v540;
LABEL_337:
  if ([v111[2] printJson])
  {
    [v111[1] appendString:@",\n\nsharedcaches:["];
    v600 = 0u;
    v601 = 0u;
    v602 = 0u;
    v603 = 0u;
    [v111[20] sharedCaches];
    v292 = (void *)objc_claimAutoreleasedReturnValue();
    v293 = [v292 countByEnumeratingWithState:&v600 objects:v604 count:16];
    if (v293)
    {
      v294 = 1;
      v295 = *(void *)v601;
      do
      {
        for (kk = 0LL; kk != v293; ++kk)
        {
          if (*(void *)v601 != v295) {
            objc_enumerationMutation(v292);
          }
          v297 = *(void **)(*((void *)&v600 + 1) + 8 * kk);
          [MEMORY[0x189603FE8] null];
          v298 = (void *)objc_claimAutoreleasedReturnValue();
          if (v297 == v298)
          {
          }

          else
          {
            [v297 binaryLoadInfos];
            v299 = (void *)objc_claimAutoreleasedReturnValue();
            v300 = [v299 count] == 0;

            if (!v300)
            {
              if ((v294 & 1) == 0) {
                [*(id *)(v540 + 8) appendString:@",\n\n"];
              }
              [*(id *)(v540 + 8) appendString:@"{"];
              v301 = *(void **)(v540 + 8);
              [v297 uuid];
              v302 = (void *)objc_claimAutoreleasedReturnValue();
              [v302 UUIDString];
              v303 = (void *)objc_claimAutoreleasedReturnValue();
              SAJSONWriteDictionaryFirstEntry(v301, (uint64_t)@"uuid", v303);

              v304 = *(void **)(v540 + 8);
              objc_msgSend(MEMORY[0x189607968], "numberWithUnsignedLongLong:", objc_msgSend(v297, "slide"));
              v305 = (void *)objc_claimAutoreleasedReturnValue();
              SAJSONWriteDictionaryEntry(v304, @"slide", v305);

              v306 = *(void **)(v540 + 8);
              objc_msgSend(MEMORY[0x189607968], "numberWithUnsignedLongLong:", objc_msgSend(v297, "slidBaseAddress"));
              v307 = (void *)objc_claimAutoreleasedReturnValue();
              SAJSONWriteDictionaryEntry(v306, @"slidBaseAddress", v307);

              v308 = *(void **)(v540 + 8);
              [v297 binaryLoadInfos];
              v309 = (void *)objc_claimAutoreleasedReturnValue();
              SAJSONWriteDictionaryEntry(v308, @"binaryLoadInfos", v309);

              [*(id *)(v540 + 8) appendString:@"}"];
              v294 = 0;
            }
          }
        }

        v293 = [v292 countByEnumeratingWithState:&v600 objects:v604 count:16];
      }

      while (v293);
    }

    [*(id *)(v540 + 8) appendString:@"]\n\n"];
LABEL_457:
    uint64_t v111 = (id *)v540;
    goto LABEL_458;
  }

  [v111[20] kextStat];
  v310 = (void *)objc_claimAutoreleasedReturnValue();

  if (v310)
  {
    v311 = *(void **)(v540 + 8);
    [*(id *)(v540 + 160) kextStat];
    v312 = (void *)objc_claimAutoreleasedReturnValue();
    [v311 printWithFormat:@"\n\nKextstat:\n%@", v312];
  }

  v313 = v540;
  if ([*(id *)(v540 + 16) displayAllBinaries])
  {
    v574 = 0u;
    v575 = 0u;
    v572 = 0u;
    v573 = 0u;
    [*(id *)(v540 + 160) sharedCaches];
    v314 = (void *)objc_claimAutoreleasedReturnValue();
    v315 = [v314 countByEnumeratingWithState:&v572 objects:&v600 count:16];
    if (!v315) {
      goto LABEL_367;
    }
    v316 = *(void *)v573;
    while (1)
    {
      for (mm = 0LL; mm != v315; ++mm)
      {
        if (*(void *)v573 != v316) {
          objc_enumerationMutation(v314);
        }
        v318 = *(void **)(*((void *)&v572 + 1) + 8 * mm);
        [MEMORY[0x189603FE8] null];
        v319 = (void *)objc_claimAutoreleasedReturnValue();
        if (v318 != v319)
        {
          [v318 binaryLoadInfos];
          v320 = (void *)objc_claimAutoreleasedReturnValue();
          v321 = [v320 count] == 0;

          if (v321) {
            continue;
          }
          v322 = *(void **)(v540 + 8);
          _shared_cache_display_string(v318);
          v323 = (void *)objc_claimAutoreleasedReturnValue();
          [v322 printWithFormat:@"\n\nShared Cache %@:\n", v323];

          [v318 binaryLoadInfos];
          v318 = (void *)objc_claimAutoreleasedReturnValue();
          -[SASamplePrinter printLoadInfos:]((id *)v540, v318);
        }
      }

      v315 = [v314 countByEnumeratingWithState:&v572 objects:&v600 count:16];
      if (!v315)
      {
LABEL_367:

        v313 = v540;
        break;
      }
    }
  }

  if ([*(id *)(v313 + 16) displayTrialInformation])
  {
    [*(id *)(v540 + 160) activeTrials];
    v324 = (void *)objc_claimAutoreleasedReturnValue();
    v325 = v324 == 0LL;

    if (!v325)
    {
      v326 = [*(id *)(v540 + 16) printJson];
      v327 = *(void **)(v540 + 8);
      if (v326)
      {
        [*(id *)(v540 + 160) activeTrials];
        v528 = (id)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v327, @"activeTrials", v528);
      }

      else
      {
        [*(id *)(v540 + 8) appendString:@"\n\n"];
        v598 = 0u;
        v599 = 0u;
        memset(v597, 0, sizeof(v597));
        [*(id *)(v540 + 160) activeTrials];
        v328 = (void *)objc_claimAutoreleasedReturnValue();
        [v328 objectForKeyedSubscript:0x189F674F8];
        v529 = (id)objc_claimAutoreleasedReturnValue();

        v329 = [v529 countByEnumeratingWithState:v597 objects:&v593 count:16];
        if (v329)
        {
          v536 = **(id **)&v597[16];
          do
          {
            for (nn = 0LL; nn != v329; ++nn)
            {
              if (**(id **)&v597[16] != v536) {
                objc_enumerationMutation(v529);
              }
              v331 = *(void **)(*(void *)&v597[8] + 8 * nn);
              v332 = objc_opt_class();
              v333 = objc_opt_class();
              DictGetDictOfClasses(v331, @"namespace_ids", v332, v333);
              v334 = (void *)objc_claimAutoreleasedReturnValue();
              [v334 allKeys];
              v335 = (void *)objc_claimAutoreleasedReturnValue();
              [v335 sortedArrayUsingSelector:sel_compare_];
              v336 = (void *)objc_claimAutoreleasedReturnValue();
              [v336 componentsJoinedByString:@","];
              v337 = (__CFString *)objc_claimAutoreleasedReturnValue();

              DictGetString(v331, @"experiment_id");
              v338 = (void *)objc_claimAutoreleasedReturnValue();
              DictGetString(v331, @"treatment_id");
              v339 = (void *)objc_claimAutoreleasedReturnValue();
              v340 = @"unknown";
              if (v337) {
                v340 = v337;
              }
              [*(id *)(v540 + 8) printWithFormat:@"%-*s%@ (treatment:%@ namespaces:%@)\n", 18, "Trial Experiment: ", v338, v339, v340];
            }

            v329 = [v529 countByEnumeratingWithState:v597 objects:&v593 count:16];
          }

          while (v329);
        }

        v570 = 0u;
        v571 = 0u;
        v568 = 0u;
        v569 = 0u;
        [*(id *)(v540 + 160) activeTrials];
        v341 = (void *)objc_claimAutoreleasedReturnValue();
        [v341 objectForKeyedSubscript:0x189F67518];
        v530 = (id)objc_claimAutoreleasedReturnValue();

        v342 = [v530 countByEnumeratingWithState:&v568 objects:&v586 count:16];
        if (v342)
        {
          v537 = *(id *)v569;
          do
          {
            for (i1 = 0LL; i1 != v342; ++i1)
            {
              if (*(id *)v569 != v537) {
                objc_enumerationMutation(v530);
              }
              v344 = *(void **)(*((void *)&v568 + 1) + 8 * i1);
              v345 = objc_opt_class();
              v346 = objc_opt_class();
              DictGetDictOfClasses(v344, @"factor_pack_ids", v345, v346);
              v347 = (void *)objc_claimAutoreleasedReturnValue();
              [v347 allKeys];
              v348 = (void *)objc_claimAutoreleasedReturnValue();
              [v348 sortedArrayUsingSelector:sel_compare_];
              v349 = (void *)objc_claimAutoreleasedReturnValue();
              [v349 componentsJoinedByString:@","];
              v350 = (void *)objc_claimAutoreleasedReturnValue();

              DictGetString(v344, @"rollout_id");
              v351 = (void *)objc_claimAutoreleasedReturnValue();
              DictGetString(v344, @"ramp_id");
              v352 = (__CFString *)objc_claimAutoreleasedReturnValue();
              v353 = @"none";
              if (v352) {
                v353 = v352;
              }
              [*(id *)(v540 + 8) printWithFormat:@"%-*s%@ (ramp:%@ namespaces:%@)\n", 18, "Trial Rollout: ", v351, v353, v350];
            }

            v342 = [v530 countByEnumeratingWithState:&v568 objects:&v586 count:16];
          }

          while (v342);
        }
      }
    }
  }

  v354 = *(_BYTE **)(v540 + 160);
  if (v354)
  {
    if ((v354[326] & 1) != 0)
    {
      v355 = [*(id *)(v540 + 16) hidEventDisplayOptions];
      v354 = *(_BYTE **)(v540 + 160);
      if ((v355 & 0x18) != 0)
      {
        v578 = 0u;
        v579 = 0u;
        v576 = 0u;
        v577 = 0u;
        [v354 hidEvents];
        v356 = (void *)objc_claimAutoreleasedReturnValue();
        v357 = [v356 countByEnumeratingWithState:&v576 objects:v604 count:16];
        if (v357)
        {
          v358 = *(void *)v577;
          v538 = 1;
          do
          {
            for (i2 = 0LL; i2 != v357; ++i2)
            {
              if (*(void *)v577 != v358) {
                objc_enumerationMutation(v356);
              }
              v360 = *(void **)(*((void *)&v576 + 1) + 8 * i2);
              if (([*(id *)(v540 + 16) hidEventDisplayOptions] & 0x10) != 0) {
                goto LABEL_489;
              }
              if (([*(id *)(v540 + 16) hidEventDisplayOptions] & 4) != 0)
              {
                if ([*(id *)(v540 + 160) targetHIDEventMachAbs])
                {
                  [v360 hidEventTimestamp];
                  v361 = (void *)objc_claimAutoreleasedReturnValue();
                  v362 = [v361 machAbsTime];
                  v363 = v362 == [*(id *)(v540 + 160) targetHIDEventMachAbs];

                  if (v363) {
                    continue;
                  }
                }
              }

              [v360 steps];
              v365 = (void *)objc_claimAutoreleasedReturnValue();
              [v365 lastObject];
              v366 = (void *)objc_claimAutoreleasedReturnValue();
              [v366 timestamp];
              v367 = (void *)objc_claimAutoreleasedReturnValue();
              [v367 machAbsTimeSeconds];
              v369 = v368;
              [v360 hidEventTimestamp];
              v370 = (void *)objc_claimAutoreleasedReturnValue();
              [v370 machAbsTimeSeconds];
              v372 = v371;

              v364 = v369 - v372;
              if (v369 - v372 >= 0.2)
              {
LABEL_489:
                [v360 steps];
                v373 = (void *)objc_claimAutoreleasedReturnValue();
                [v373 lastObject];
                v374 = (void *)objc_claimAutoreleasedReturnValue();
                [v374 timestamp];
                v375 = (void *)objc_claimAutoreleasedReturnValue();
                v376 = [v375 lt:*(void *)(v540 + 32)];

                if ((v376 & 1) == 0)
                {
                  [v360 steps];
                  v377 = (void *)objc_claimAutoreleasedReturnValue();
                  [v377 firstObject];
                  v378 = (void *)objc_claimAutoreleasedReturnValue();
                  [v378 timestamp];
                  v379 = (void *)objc_claimAutoreleasedReturnValue();
                  v380 = [v379 gt:*(void *)(v540 + 40)];

                  if ((v380 & 1) == 0)
                  {
                    v381 = @"\n";
                    if ((v538 & 1) != 0)
                    {
                      v382 = objc_msgSend(*(id *)(v540 + 16), "hidEventDisplayOptions", @"\n");
                      v381 = @"\n\nAll HID events:\n";
                      if ((v382 & 0x10) == 0)
                      {
                        if ((objc_msgSend(*(id *)(v540 + 16), "hidEventDisplayOptions", @"\n\nAll HID events:\n") & 4) == 0
                          || (v383 = [*(id *)(v540 + 160) targetHIDEventMachAbs],
                              v381 = @"\n\nOther slow HID events:\n",
                              !v383))
                        {
                          v381 = @"\n\nSlow HID events:\n";
                        }
                      }
                    }

                    [*(id *)(v540 + 8) appendString:v381];
                    -[SASamplePrinter printHIDEvent:](v540, v360);
                    v538 = 0;
                  }
                }
              }
            }

            v357 = objc_msgSend(v356, "countByEnumeratingWithState:objects:count:", &v576, v604, 16, v364);
          }

          while (v357);
        }

        v354 = *(_BYTE **)(v540 + 160);
      }
    }
  }

  [v354 ioEvents];
  v384 = (void *)objc_claimAutoreleasedReturnValue();
  v385 = [v384 count] == 0;

  if (v385) {
    goto LABEL_450;
  }
  inited = init_io_histograms();
  v576 = 0u;
  v577 = 0u;
  v578 = 0u;
  v579 = 0u;
  [*(id *)(v540 + 160) ioEvents];
  v534 = (id)objc_claimAutoreleasedReturnValue();
  v386 = [v534 countByEnumeratingWithState:&v576 objects:v604 count:16];
  if (!v386)
  {

    goto LABEL_449;
  }

  v387 = 0;
  v388 = *(void *)v577;
  while (2)
  {
    for (i3 = 0LL; i3 != v386; ++i3)
    {
      if (*(void *)v577 != v388) {
        objc_enumerationMutation(v534);
      }
      v390 = *(void **)(*((void *)&v576 + 1) + 8 * i3);
      [v390 endTimestamp];
      v391 = (void *)objc_claimAutoreleasedReturnValue();
      if (([*(id *)(v540 + 32) gt:v391] & 1) == 0)
      {
        if ([*(id *)(v540 + 40) lt:v391])
        {

          goto LABEL_439;
        }

        [v390 startTimestamp];
        v392 = (void *)objc_claimAutoreleasedReturnValue();
        [v391 machContTimeSeconds];
        if (v393 == 0.0 || ([v392 machContTimeSeconds], v394 == 0.0))
        {
          [v391 machAbsTimeSeconds];
          if (v398 == 0.0 || ([v392 machAbsTimeSeconds], v399 == 0.0))
          {
            [v391 wallTime];
            if (v401 == 0.0 || ([v392 wallTime], v402 == 0.0))
            {
              v404 = 0LL;
              goto LABEL_434;
            }

            [v391 wallTime];
            v396 = v403;
            [v392 wallTime];
          }

          else
          {
            [v391 machAbsTimeSeconds];
            v396 = v400;
            [v392 machAbsTimeSeconds];
          }
        }

        else
        {
          [v391 machContTimeSeconds];
          v396 = v395;
          [v392 machContTimeSeconds];
        }

        v404 = (unint64_t)((v396 - v397) * 1000000.0);
LABEL_434:
        update_histograms_stats( (unsigned int *)inited,  [v390 tier],  objc_msgSend(v390, "size"),  v404,  objc_msgSend(v390, "isRead"));

        v387 = 1;
      }
    }

    v386 = [v534 countByEnumeratingWithState:&v576 objects:v604 count:16];
    if (v386) {
      continue;
    }
    break;
  }

LABEL_439:
  if ((v387 & 1) != 0)
  {
    v405 = calloc(1uLL, 0x2000uLL);
    if (print_io_histograms((unsigned int *)inited, (char *)v405, (const char *)0x2000))
    {
      LODWORD(v406) = 0x2000;
      while (1)
      {
        free(v405);
        v406 = (2 * v406);
        v405 = calloc(1uLL, v406);
      }

      LODWORD(v407) = *__error();
      v408 = _sa_logt();
      if (!os_log_type_enabled((os_log_t)v408, OS_LOG_TYPE_FAULT))
      {
LABEL_448:

        *__error() = (int)v407;
        goto LABEL_449;
      }

LABEL_480:
      *(_WORD *)v562 = 0;
      _os_log_fault_impl( &dword_186C92000,  (os_log_t)v408,  OS_LOG_TYPE_FAULT,  "io histograms don't fit in 128KB",  v562,  2u);
      goto LABEL_448;
    }

LABEL_444:
    if (v405)
    {
      objc_msgSend(*(id *)(v540 + 8), "printWithFormat:", @"\n\n%s\n", v405);
      free(v405);
    }
  }

    v321 = *__error();
    _sa_logt();
    v322 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v322, OS_LOG_TYPE_ERROR))
    {
      v323 = [v362 UTF8String];
      *(_DWORD *)buf = 136315650;
      v383 = v323;
      v384 = 2048;
      v385 = (uint64_t)v269;
      v386 = 2048;
      v387 = v342;
      _os_log_error_impl( &dword_186C92000,  v322,  OS_LOG_TYPE_ERROR,  "%s: totalNumSamples %lu < numSamples %lu",  buf,  0x20u);
    }

    *__error() = v321;
    v324 = [v362 UTF8String];
    _SASetCrashLogMessage(7244, "%s: totalNumSamples %lu < numSamples %lu", v325, v326, v327, v328, v329, v330, v324);
    _os_crash();
    __break(1u);
  }

  if (a38 != 0x7FFFFFFFFFFFFFFFLL)
  {
    if (-[SASamplePrinter hasTimeIndexes](v109))
    {
      v270 = [*(id *)(v109 + 16) forceOneBasedTimeIndexes];
      v271 = a38 + 1;
      if (v270) {
        v271 -= *(void *)(v109 + 48);
      }
    }

    else
    {
      v271 = 0x7FFFFFFFFFFFFFFFLL;
    }

    objc_msgSend(v85, "printWithFormat:", @" (%lu"), v271;
    if (a38 < a39)
    {
      if (-[SASamplePrinter hasTimeIndexes](v109))
      {
        v273 = [*(id *)(v109 + 16) forceOneBasedTimeIndexes];
        v274 = a39 + 1;
        if (v273) {
          v274 -= *(void *)(v109 + 48);
        }
      }

      else
      {
        v274 = 0x7FFFFFFFFFFFFFFFLL;
      }

      objc_msgSend(v85, "printWithFormat:", @"-%lu", v274);
    }

    [v85 appendString:@"\n"]);
    goto LABEL_374;
  }

  if (v353 && [v353 gt:*(void *)(v109 + 40)])
  {
    v268 = v353;
  }

  else
  {
    v268 = v365;
    if (!v268) {
      goto LABEL_374;
    }
  }
  v272 = -[SASamplePrinter timeIndexDescriptionForTimestamp:](v109, v268);
  [v85 printWithFormat:@" (task existed only %@)\n", v272];

  v139 = v357;
LABEL_374:
  if (([*(id *)(v109 + 16) systemstatsFormat] & 1) == 0)
  {
    if (a50)
    {
      objc_msgSend(v85, "printWithFormat:", @"%-*s", 18, "CPU Time: ");
      else {
        v275 = 3LL;
      }
      saos_printf_seconds(v85, a50, v275);
      if (a52) {
        saos_printf_cycles_instructions(v85, a52, a51, [*(id *)(a1 + 16) displayDetailedCpuTime]);
      }
      [v85 appendString:@"\n"];
      v276 = [*(id *)(a1 + 16) displayDetailedCpuTime];
      if (a53) {
        v277 = v276;
      }
      else {
        v277 = 0;
      }
      v139 = v357;
      if (a53 > 0x98967F || v277)
      {
        objc_msgSend(v85, "printWithFormat:", @"%-*s", 18, "CPU Time (exited threads): ");
        else {
          v278 = 3LL;
        }
        saos_printf_seconds(v85, a53, v278);
        if (a55) {
          saos_printf_cycles_instructions(v85, a55, a54, [*(id *)(a1 + 16) displayDetailedCpuTime]);
        }
        [v85 appendString:@"\n"];
        v139 = v357;
      }
    }

    if (a58) {
      objc_msgSend(v85, "printWithFormat:", @"%-*sTranslocated\n", 18, "Note: ");
    }
    if (a42)
    {
      v279 = "s";
      if (a42 == 1) {
        v279 = "";
      }
      objc_msgSend(v85, "printWithFormat:", @"%-*sSuspended for %lu sample%s\n", 18, "Note: ", a42, v279);
    }

    if (a43)
    {
      v280 = "s";
      if (a43 == 1) {
        v280 = "";
      }
      objc_msgSend( v85,  "printWithFormat:",  @"%-*sTerminated (zombie) for %lu sample%s\n",  18,  "Note: ",  a43,  v280);
    }

    if (a59)
    {
      objc_msgSend(v85, "printWithFormat:", @"%-*sUnresponsive", 18, "Note: ");
      if (a9 > 0.0)
      {
        [*(id *)(a1 + 32) wallTime];
        if (v281 + -2.0 >= a9) {
          objc_msgSend(v85, "printWithFormat:", @" for %.0f seconds before sampling", v281 - a9);
        }
      }

      [v85 appendString:@"\n"];
    }

    if (a60) {
      objc_msgSend(v85, "printWithFormat:", @"%-*s%lu\n", 18, "Num threads: ", a60);
    }
    v282 = [*(id *)(a1 + 16) displayIdleWorkQueueThreads];
    if (a61 && (v282 & 1) == 0)
    {
      v283 = "s";
      if (a61 == 1) {
        v283 = "";
      }
      objc_msgSend( v85,  "printWithFormat:",  @"%-*s%lu idle work queue thread%s omitted\n",  18,  "Note: ",  a61,  v283);
    }

    if (a62)
    {
      v284 = "s";
      if (a62 == 1) {
        v284 = "";
      }
      objc_msgSend(v85, "printWithFormat:", @"%-*s%lu other thread%s omitted\n", 18, "Note: ", a62, v284);
    }

    if (a63) {
      objc_msgSend(v85, "printWithFormat:", @"%-*sProcess has swallowed at least one exception\n", 18, "Note: ");
    }
    if (a64) {
      objc_msgSend( v85,  "printWithFormat:",  @"%-*s%4d  (too many dispatch threads blocked in synchronous operations)\n",  18,  "Dispatch Thread Soft Limit Reached: ",  objc_msgSend(*(id *)(a1 + 160), "workQueueSoftThreadLimit"));
    }
    if (a65) {
      objc_msgSend( v85,  "printWithFormat:",  @"%-*s%4d  (too many dispatch threads blocked in synchronous operations)\n",  18,  "Dispatch Thread Hard Limit Reached: ",  objc_msgSend(*(id *)(a1 + 160), "workQueueHardThreadLimit"));
    }
    if ([v139 count])
    {
      v285 = [v139 count];
      if ([v139 count] == 1) {
        v286 = "";
      }
      else {
        v286 = "s";
      }
      objc_msgSend(v139, "componentsJoinedByString:", @", ");
      v287 = (void *)objc_claimAutoreleasedReturnValue();
      v333 = v286;
      __int128 v85 = v371;
      [v371 printWithFormat:@"%-*s%lu thread%s - %@\n", 18, "Deadlocked: ", v285, v333, v287];

      v139 = v357;
    }

    if ([v354 count])
    {
      v288 = [v354 count];
      if ([v354 count] == 1) {
        v289 = "";
      }
      else {
        v289 = "s";
      }
      objc_msgSend(v354, "componentsJoinedByString:", @", ");
      v290 = (void *)objc_claimAutoreleasedReturnValue();
      v334 = v289;
      __int128 v85 = v371;
      [v371 printWithFormat:@"%-*s%lu thread%s - %@\n", 18, "Blocked by Deadlock: ", v288, v334, v290];

      v139 = v357;
    }
  }

LABEL_449:
  free(inited);
LABEL_450:
  uint64_t v111 = (id *)v540;
  if (-[SASamplePrinter hasTimeIndexes](v540))
  {
    v409 = *(uint64_t **)(v540 + 160);
    v410 = *(void *)(v540 + 48);
    v411 = *(void *)(v540 + 56);
    if (-[SASamplePrinter hasTimeIndexes](v540))
    {
      v412 = [*(id *)(v540 + 16) forceOneBasedTimeIndexes];
      v413 = v410 + 1;
      uint64_t v111 = (id *)v540;
      if (v412) {
        v413 -= *(void *)(v540 + 48);
      }
    }

    else
    {
      v413 = 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v111 = (id *)v540;
    }

    if (v409)
    {
      -[SAWSUpdateDataStore printFrameRateReportWithStartSampleIndex:endSampleIndex:startDisplayIndex:sampleDataStore:toStream:]( v409[16],  v410,  v411,  v413,  v409,  v111[1]);
      goto LABEL_457;
    }
  }

LABEL_458:
  [v111[20] customOutput];
  v414 = (void *)objc_claimAutoreleasedReturnValue();

  v415 = v540;
  if (v414)
  {
    v416 = [*(id *)(v540 + 16) printJson];
    v417 = *(void **)(v540 + 8);
    if (v416)
    {
      [*(id *)(v540 + 160) customOutput];
      v418 = (void *)objc_claimAutoreleasedReturnValue();
      SAJSONWriteDictionaryEntry(v417, @"customOutput", v418);
    }

    else
    {
      [*(id *)(v540 + 8) printWithFormat:@"\n\nCustom Output:\n"];
      v419 = *(void **)(v540 + 8);
      [*(id *)(v540 + 160) customOutput];
      v418 = (void *)objc_claimAutoreleasedReturnValue();
      [v419 appendString:v418];
    }

    v415 = v540;
  }

  if (*(_BYTE *)(v415 + 104) && !*(_BYTE *)(v415 + 105))
  {
    v420 = *__error();
    _sa_logt();
    v421 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v421, OS_LOG_TYPE_FAULT))
    {
      [*(id *)(v540 + 16) debugDescription];
      v539 = (id)objc_claimAutoreleasedReturnValue();
      v424 = [*(id *)(v540 + 160) targetProcessId];
      [*(id *)(v540 + 160) targetProcess];
      v425 = (void *)objc_claimAutoreleasedReturnValue();
      [v425 debugDescription];
      v426 = (void *)objc_claimAutoreleasedReturnValue();
      v427 = [*(id *)(v540 + 160) targetThreadId];
      [*(id *)(v540 + 160) targetProcess];
      v428 = (void *)objc_claimAutoreleasedReturnValue();
      [v428 threads];
      v429 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend( MEMORY[0x189607968],  "numberWithUnsignedLongLong:",  objc_msgSend(*(id *)(v540 + 160), "targetThreadId"));
      v430 = (void *)objc_claimAutoreleasedReturnValue();
      [v429 objectForKeyedSubscript:v430];
      v431 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)v604 = 138544386;
      v605 = (uint64_t)v539;
      v606 = 1024;
      v607 = v424;
      v608 = 2114;
      v609 = v426;
      v610 = 2048;
      v611 = v427;
      v612 = 2114;
      v613 = v431;
      _os_log_fault_impl( &dword_186C92000,  v421,  OS_LOG_TYPE_FAULT,  "Hit 65324447!\noptions: %{public}@\ntargetTask %d: %{public}@\ntargetThread 0x%llx: %{public}@",  v604,  0x30u);
    }

    *__error() = v420;
  }

  v422 = +[SABinaryLocator sharedBinaryLocator](&OBJC_CLASS___SABinaryLocator, "sharedBinaryLocator");
  v423 = v422;
  if (v422)
  {
    if (v422[25]) {
      -[SABinaryLocator _saveMappings](v422);
    }
  }

  [v423 done];

LABEL_12:
  objc_autoreleasePoolPop(context);
}

void sub_186D1D024(_Unwind_Exception *a1)
{
}

LABEL_159:
          *__error() = v54;
          goto LABEL_160;
        }

        if (([*(id *)(a1 + 16) displayBlockedThreads] & 1) == 0)
        {
          __int128 v49 = *(void **)(a1 + 8);
          if (v49)
          {
            [v49 printWithFormat:@"cannot display timeline format without displaying blocked threads"];
            goto LABEL_160;
          }

          __int128 v54 = *__error();
          _sa_logt();
          __int128 v55 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl( &dword_186C92000,  v55,  OS_LOG_TYPE_ERROR,  "cannot display timeline format without displaying blocked threads",  buf,  2u);
          }

          goto LABEL_159;
        }

        if (([*(id *)(a1 + 16) displayRunnableThreads] & 1) == 0)
        {
          uint64_t v58 = *(void **)(a1 + 8);
          if (v58)
          {
            [v58 printWithFormat:@"cannot display timeline format without displaying runnable threads"];
            goto LABEL_160;
          }

          __int128 v54 = *__error();
          _sa_logt();
          __int128 v55 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl( &dword_186C92000,  v55,  OS_LOG_TYPE_ERROR,  "cannot display timeline format without displaying runnable threads",  buf,  2u);
          }

          goto LABEL_159;
        }

        if (([*(id *)(a1 + 16) displayRunningThreads] & 1) == 0)
        {
          int v67 = *(void **)(a1 + 8);
          if (v67)
          {
            [v67 printWithFormat:@"cannot display timeline format without displaying running threads"];
            goto LABEL_160;
          }

          __int128 v54 = *__error();
          _sa_logt();
          __int128 v55 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl( &dword_186C92000,  v55,  OS_LOG_TYPE_ERROR,  "cannot display timeline format without displaying running threads",  buf,  2u);
          }

          goto LABEL_159;
        }

        int v33 = *(void *)(a1 + 16);
        if (v33)
        {
          uint64_t v34 = *(void *)(v33 + 152);
          if (v34 == 3 || !v34 && *(_BYTE *)(v33 + 11))
          {
            __int16 v35 = *(void **)(a1 + 8);
            if (v35)
            {
              [v35 printWithFormat:@"conflicting display options: kSAAggregateCallTreesByProcess and !printHeavyStacks"];
LABEL_160:

              goto LABEL_161;
            }

            __int128 v54 = *__error();
            _sa_logt();
            __int128 v55 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_error_impl( &dword_186C92000,  v55,  OS_LOG_TYPE_ERROR,  "conflicting display options: kSAAggregateCallTreesByProcess and !printHeavyStacks",  buf,  2u);
            }

            goto LABEL_159;
          }

          uint64_t v71 = *(void *)(v33 + 160);
          if (v71)
          {
            if (v71 != 2)
            {
              if (v71 == 4)
              {
                uint64_t v72 = *(void **)(a1 + 8);
                if (v72)
                {
                  [v72 printWithFormat:@"conflicting display options: kSAAggregateSwiftAsyncCallTreesByProcess and !printHeavyStacks"];
                  goto LABEL_160;
                }

                __int128 v54 = *__error();
                _sa_logt();
                __int128 v55 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)buf = 0;
                  _os_log_error_impl( &dword_186C92000,  v55,  OS_LOG_TYPE_ERROR,  "conflicting display options: kSAAggregateSwiftAsyncCallTreesByProcess and !printHeavyStacks",  buf,  2u);
                }

                goto LABEL_159;
              }

              goto LABEL_148;
            }
          }

          else if (!*(_BYTE *)(v33 + 14))
          {
            goto LABEL_148;
          }

          uint64_t v78 = *(void **)(a1 + 8);
          if (v78)
          {
            [v78 printWithFormat:@"conflicting display options: kSAAggregateSwiftAsyncCallTreesByBaseFunction and !printHeavyStacks"];
            goto LABEL_160;
          }

          __int128 v54 = *__error();
          _sa_logt();
          __int128 v55 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl( &dword_186C92000,  v55,  OS_LOG_TYPE_ERROR,  "conflicting display options: kSAAggregateSwiftAsyncCallTreesByBaseFunction and !printHeavyStacks",  buf,  2u);
          }

          goto LABEL_159;
        }

LABEL_148:
        if (v8 && !v19 && [v8 hasConcurrentExecution])
        {
          *(void *)buf = 0LL;
          *(void *)&uint8_t buf[8] = buf;
          *(void *)&uint8_t buf[16] = 0x3032000000LL;
          __int16 v105 = __Block_byref_object_copy__4;
          id v106 = __Block_byref_object_dispose__4;
          __int16 v107 = 0LL;
          *(void *)uint64_t v102 = 0LL;
          *(void *)&v102[8] = v102;
          *(void *)&v102[16] = 0x2020000000LL;
          int v103 = 0;
          uint64_t v79 = *(void **)(a1 + 32);
          uint64_t v80 = *(void **)(a1 + 40);
          uint64_t v81 = *(void *)(a1 + 48);
          int v82 = *(void *)(a1 + 56);
          v94[0] = MEMORY[0x1895F87A8];
          v94[1] = 3221225472LL;
          v94[2] = __37__SASamplePrinter_checkForBadOptions__block_invoke_275;
          v94[3] = &unk_189F637F0;
          v94[4] = buf;
          v94[5] = v102;
          -[SARecipe enumerateStatesBetweenStartTime:startSampleIndex:endTime:endSampleIndex:reverseOrder:block:]( (uint64_t)v8,  v79,  v81,  v80,  v82,  0,  v94);
          if (*(_BYTE *)(*(void *)&v102[8] + 24LL))
          {
            id v83 = *(void **)(a1 + 8);
            if (v83)
            {
              -[SASamplePrinter displayNameForDispatchQueue:](v8);
              int v84 = (void *)objc_claimAutoreleasedReturnValue();
              -[SASamplePrinter displayNameForTask:]((void *)a1, v5);
              __int128 v85 = (void *)objc_claimAutoreleasedReturnValue();
              [v83 printWithFormat:@"cannot display timeline format with concurrent target dispatch queue %@ in %@", v84, v85];
            }

            else
            {
              __int128 v89 = *__error();
              _sa_logt();
              __int128 v90 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
              {
                -[SASamplePrinter displayNameForDispatchQueue:](v8);
                pid_t v91 = (id)objc_claimAutoreleasedReturnValue();
                -[SASamplePrinter displayNameForTask:]((void *)a1, v5);
                id v92 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)int v98 = 138412546;
                __int128 v99 = v91;
                uint64_t v100 = 2112;
                v101 = v92;
                _os_log_error_impl( &dword_186C92000,  v90,  OS_LOG_TYPE_ERROR,  "cannot display timeline format with concurrent target dispatch queue %@ in %@",  v98,  0x16u);
              }

              *__error() = v89;
            }

            _Block_object_dispose(v102, 8);
            _Block_object_dispose(buf, 8);

            goto LABEL_161;
          }

          _Block_object_dispose(v102, 8);
          _Block_object_dispose(buf, 8);
        }

        goto LABEL_43;
      }

      uint64_t v14 = *(void **)(a1 + 8);
      if (v14)
      {
        uint64_t v13 = @"conflicting display options: aggregation of multiple task instances requires kSAAggregateCallTreesByProcess";
        goto LABEL_21;
      }

      uint64_t v15 = *__error();
      _sa_logt();
      uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl( &dword_186C92000,  v16,  OS_LOG_TYPE_ERROR,  "conflicting display options: aggregation of multiple task instances requires kSAAggregateCallTreesByProcess",  buf,  2u);
      }

void sub_186D1E234( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

LABEL_132:
  __int128 v95 = [self rpid];
  if ((int)v95 < 1 || (_DWORD)v95 == [self pid])
  {
    v1223 = 0LL;
    goto LABEL_139;
  }

  -[SASampleStore lastTaskWithPid:onOrBeforeTimestamp:](*v1217, v95, v1176);
  __int128 v96 = (void *)objc_claimAutoreleasedReturnValue();
  if (v96)
  {
    char v97 = v96;

LABEL_138:
    v1223 = -[SASamplePrinter displayNameForTask:]((void *)v1256, v97);
    goto LABEL_139;
  }

  -[SASampleStore firstTaskWithPid:](*v1217, v95);
  char v97 = (id)objc_claimAutoreleasedReturnValue();

  if (v97) {
    goto LABEL_138;
  }
  v1223 = -[SASamplePrinter displayNameForPid:threadId:timestamp:]((void *)v1256, v95, 0LL, v1176);
LABEL_139:
  if ([self resourceCoalitionID])
  {
    -[SASamplePrinter displayStringForResourceCoalition:](self);
    int v98 = (void *)objc_claimAutoreleasedReturnValue();
    v1362 = v98;
    v1363 = &unk_189F823D0;
    [MEMORY[0x189603F68] dictionaryWithObjects:&v1363 forKeys:&v1362 count:1];
    v1218 = (void *)objc_claimAutoreleasedReturnValue();
  }

  else
  {
    v1218 = 0LL;
  }

  v1361 = self;
  [MEMORY[0x189603F18] arrayWithObjects:&v1361 count:1];
  __int128 v99 = (void *)objc_claimAutoreleasedReturnValue();
  v1213 = -[SASamplePrinter displayStringForOnBehalfOfForTasks:includePid:](v1256, v99);
  v1326 = 0u;
  v1325 = 0u;
  v1324 = 0u;
  v1323 = 0u;
  [self threads];
  uint64_t v100 = (void *)objc_claimAutoreleasedReturnValue();
  v101 = [v100 countByEnumeratingWithState:&v1323 objects:v1360 count:16];
  if (v101)
  {
    v1240 = 0LL;
    obja = 0LL;
    uint64_t v102 = *(void *)v1324;
    while (1)
    {
      int v103 = 0LL;
      do
      {
        if (*(void *)v1324 != v102) {
          objc_enumerationMutation(v100);
        }
        [*(id *)(v1256 + 144) objectForKeyedSubscript:*(void *)(*((void *)&v1323 + 1) + 8 * v103)];
        int v104 = (void *)objc_claimAutoreleasedReturnValue();
        __int16 v105 = v104;
        if (v104)
        {
          [v104 threadState];
          id v106 = (void *)objc_claimAutoreleasedReturnValue();
          [v106 startTimestamp];
          __int16 v107 = (void *)objc_claimAutoreleasedReturnValue();
          if ([v107 gt:*(void *)(v1256 + 40)])
          {

            goto LABEL_150;
          }

          [v105 threadState];
          uint64_t v108 = (void *)objc_claimAutoreleasedReturnValue();
          [v108 endTimestamp];
          __int16 v109 = (void *)objc_claimAutoreleasedReturnValue();
          v110 = [v109 lt:*(void *)(v1256 + 32)];

          if ((v110 & 1) == 0)
          {
            if ([v105 isPartOfADeadlock])
            {
              [v105 thread];
              uint64_t v111 = (void *)objc_claimAutoreleasedReturnValue();
              [v105 threadState];
              v112 = (void *)objc_claimAutoreleasedReturnValue();
              -[SASamplePrinter displayNameForTask:thread:threadState:]((void *)v1256, 0LL, v111, v112);
              id v106 = (void *)objc_claimAutoreleasedReturnValue();

              __int16 v113 = obja;
              if (obja) {
                goto LABEL_156;
              }
              obja = (id)objc_msgSend(objc_alloc(MEMORY[0x189603FA8]), "initWithObjects:", v106, 0);
              goto LABEL_150;
            }

            if ([v105 isBlockedByADeadlock])
            {
              [v105 thread];
              v114 = (void *)objc_claimAutoreleasedReturnValue();
              [v105 threadState];
              uint64_t v115 = (void *)objc_claimAutoreleasedReturnValue();
              -[SASamplePrinter displayNameForTask:thread:threadState:]((void *)v1256, 0LL, v114, v115);
              id v106 = (void *)objc_claimAutoreleasedReturnValue();

              __int16 v113 = v1240;
              if (v1240) {
LABEL_156:
              }
                [v113 addObject:v106];
              else {
                v1240 = (id)objc_msgSend(objc_alloc(MEMORY[0x189603FA8]), "initWithObjects:", v106, 0);
              }
LABEL_150:
            }
          }
        }

        ++v103;
      }

      while (v101 != v103);
      v116 = [v100 countByEnumeratingWithState:&v1323 objects:v1360 count:16];
      v101 = v116;
      if (!v116) {
        goto LABEL_165;
      }
    }
  }

  v1240 = 0LL;
  obja = 0LL;
LABEL_165:

  [obja sortUsingSelector:sel_compare_];
  [v1240 sortUsingSelector:sel_compare_];
  v1180 = *p_isa;
  [self name];
  v117 = (void *)objc_claimAutoreleasedReturnValue();
  if (v117)
  {
    [self name];
    v1164 = (void *)objc_claimAutoreleasedReturnValue();
    SACopySanitizedString(v1164, 1, 0LL);
    v118 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }

  else
  {
    v118 = @"UNKNOWN PROCESS";
  }

  v1174 = [self pid];
  v119 = [self mainBinaryPath];
  v120 = (void *)v119;
  v121 = @"UNKNOWN PATH";
  if (v119) {
    v121 = (const __CFString *)v119;
  }
  v1169 = (__CFString *)v121;
  [self bundleIdentifier];
  v1204 = (void *)objc_claimAutoreleasedReturnValue();
  [self bundleVersion];
  v1200 = (void *)objc_claimAutoreleasedReturnValue();
  [self bundleShortVersion];
  v1197 = (id)objc_claimAutoreleasedReturnValue();
  [self bundleBuildVersion];
  v1195 = (void *)objc_claimAutoreleasedReturnValue();
  [self bundleProjectName];
  v1209 = (id)objc_claimAutoreleasedReturnValue();
  [self bundleSourceVersion];
  v1193 = (void *)objc_claimAutoreleasedReturnValue();
  [self bundleProductBuildVersion];
  v1190 = (void *)objc_claimAutoreleasedReturnValue();
  v1168 = [self adamID];
  [self installerVersionID];
  v1188 = (void *)objc_claimAutoreleasedReturnValue();
  v1166 = [self developerType];
  [self appType];
  v1186 = (void *)objc_claimAutoreleasedReturnValue();
  v1165 = [self isBeta];
  [self cohortID];
  v1181 = (void *)objc_claimAutoreleasedReturnValue();
  [self vendorID];
  v1184 = (void *)objc_claimAutoreleasedReturnValue();
  [self distributorID];
  v122 = (void *)objc_claimAutoreleasedReturnValue();
  [self codesigningID];
  v123 = (void *)objc_claimAutoreleasedReturnValue();
  [self teamID];
  uint64_t v57 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v124 = -[SASamplePrinter architectureStringForTask:](v1256, self);
  v126 = [self pid];
  if (v126)
  {
    v127 = 0LL;
  }

  else
  {
    [*v1217 kernelVersion];
    v127 = (void *)objc_claimAutoreleasedReturnValue();
  }

  Property = self;
  if (self) {
    Property = objc_getProperty(self, v125, 272LL, 1);
  }
  v129 = v126 == 0;
  v130 = Property;
  -[SASamplePrinter addTaskHeaderToStream:displayName:pid:mainBinary:mainBinaryPath:sharedCaches:uid:bundleIdentifier:bundleVersion:bundleShortVersion:bundleBuildVersion:bundleProjectName:bundleSourceVersion:bundleProductBuildVersion:adamID:installerVersionID:developerType:appType:isBeta:cohortID:vendorID:distributorID:codesigningID:teamID:resourceCoalitionSampleCounts:onBehalfOfProcesses:architectureString:kernelVersion:parentName:responsibleName:taskExecedFromName:taskExecedToName:pidStartTimestamp:startTimestamp:endTimestamp:startSampleIndex:endSampleIndex:numSamples:totalNumSamples:numSamplesSuspended:numSamplesTerminated:startingTaskSize:endingTaskSize:maxTaskSize:startSampleIndexOfMaxTaskSize:endSampleIndexOfMaxTaskSize:numPageins:cpuTimeNs:cpuInstructions:cpuCycles:nonThreadCpuTimeNs:nonThreadCpuInstructions:nonThreadCpuCycles:usesSuddenTermination:allowsIdleExit:isTranslocated:isUnresponsive:timeOfLastResponse:numThreads:numIdleWorkQueueThreads:numOtherHiddenThreads:hieSwallowedException:wqExceededConstrainedThreadLimit:wqExceededTotalThreadLimit:threadsDeadlocked:threadsBlockedByADeadlock:ioSize:numIOs:isReportHeader:]( v1256,  v1180,  v118,  v1174,  0LL,  v1169,  0LL,  4294966982LL,  0.0,  v1204,  v1200,  v1197,  v1195,  v1209,  v1193,  v1190,  v1168,  v1188,  v1166,  v1186,  v1165,  v1181,  v1184,  v122,  v123,  v57,  v1218,  v1213,  v124,  v127,  v1228,  v1223,  0LL,  0LL,  v130,  0LL,  0LL,  0x7FFFFFFFFFFFFFFFuLL,  0x7FFFFFFFFFFFFFFFuLL,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0x7FFFFFFFFFFFFFFFuLL,  0x7FFFFFFFFFFFFFFFuLL,  0,
    0LL,
    0LL,
    0LL,
    0LL,
    0LL,
    0LL,
    0,
    0,
    [self isTranslocated],
    0,
    0LL,
    0LL,
    0LL,
    0);

  if (v129) {
  if (v117)
  }
  {
  }

  [*p_isa appendString:@"\n"];
  if (v1173 && *v1217 && (*((_BYTE *)*v1217 + 326) & 1) != 0)
  {
    char v87 = 0.0;
    if ([v1173 lt:*(void *)(v1256 + 32)]
      && ([*(id *)(v1256 + 32) machAbsTimeSeconds],
          v142 = v141,
          [v1173 machAbsTimeSeconds],
          v144 = v142 - v143,
          -[SASamplePrinter shouldPrintTimeOutsideSamplingRange:](v1256, v144)))
    {
      v145 = objc_alloc(NSString);
      if (v144 >= 0.1) {
        v146 = objc_msgSend( v145,  "initWithFormat:",  @"HID event started %.1f seconds before sampling",  *(void *)&v144);
      }
      else {
        v146 = [v145 initWithFormat:@"HID event started <0.1 seconds before sampling"];
      }
      v200 = (void *)v146;
      char v87 = v144 + 0.0;
    }

    else
    {
      v200 = 0LL;
    }

    v1179 = v200;
    if (v1172)
    {
      if ([v1172 gt:*(void *)(v1256 + 40)])
      {
        [v1172 machAbsTimeSeconds];
        v774 = v773;
        [*(id *)(v1256 + 40) machAbsTimeSeconds];
        v776 = v774 - v775;
        if (-[SASamplePrinter shouldPrintTimeOutsideSamplingRange:](v1256, v776))
        {
          v777 = objc_alloc(NSString);
          if (v776 >= 0.1) {
            v778 = (void *)objc_msgSend( v777,  "initWithFormat:",  @"HID event ended %.1f seconds after sampling",  *(void *)&v776);
          }
          else {
            v778 = (void *)[v777 initWithFormat:@"HID event ended <0.1 seconds after sampling"];
          }
          v980 = v778;
          if (v1179)
          {
            v981 = [objc_alloc(NSString) initWithFormat:@"%@, %@", v1179, v778];

            v1179 = (id)v981;
          }

          else
          {
            v1179 = v778;
          }

          char v87 = v87 + v776;
        }
      }
    }
  }

  else
  {
    char v87 = 0.0;
    if ([self isUnresponsive]
      && ([self timeOfLastResponse], v132 = v131, v131 > 0.0)
      && ([*(id *)(v1256 + 32) wallTime], v132 < v133)
      && (v134 = v133 - v132, -[SASamplePrinter shouldPrintTimeOutsideSamplingRange:](v1256, v134)))
    {
      v1179 = (id)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"process was unresponsive for %.0f seconds before sampling",  *(void *)&v134);
      char v87 = v134 + 0.0;
    }

    else
    {
      v1179 = 0LL;
    }
  }

LABEL_189:
  [*v1217 targetProcess];
  v135 = (void *)objc_claimAutoreleasedReturnValue();
  if (v135)
  {
    v136 = *(void **)(v1256 + 128);
    if (v136)
    {
      [*v1217 targetProcess];
      v137 = (void *)objc_claimAutoreleasedReturnValue();
      v138 = v136 == v137;

      if (v138) {
        goto LABEL_201;
      }
      uint64_t v57 = *(__CFString **)(v1256 + 8);
      [*(id *)(v1256 + 160) targetProcess];
      v135 = (void *)objc_claimAutoreleasedReturnValue();
      v139 = -[SASamplePrinter displayNameForTask:]((void *)v1256, v135);
      v140 = v139;
      if (v1208) {
        SAJSONWriteDictionaryEntry(v57, @"affectedProcess", v139);
      }
      else {
        -[__CFString printWithFormat:](v57, "printWithFormat:", @"%-*s%@\n", 18LL, "Affected Process: ", v139);
      }
    }
  }

LABEL_201:
  [*v1217 event];
  v1187 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v147 = [*v1217 eventNote];
  v1185 = (void *)v147;
  if (__PAIR128__((unint64_t)v1187, v147) != 0)
  {
    if (v147)
    {
      v148 = objc_alloc(NSString);
      v149 = v1187;
      if (!v1187) {
        v149 = @"???";
      }
      v150 = (__CFString *)[v148 initWithFormat:@"%@ (%@)", v149, v1185];
    }

    else
    {
      v150 = v1187;
    }

    v151 = v150;
    v152 = *p_isa;
    if (v1208) {
      SAJSONWriteDictionaryEntry(v152, @"event", v151);
    }
    else {
      [v152 printWithFormat:@"%-*s%@\n", 18, "Event: ", v151];
    }
  }

  [*v1217 signature];
  v153 = (void *)objc_claimAutoreleasedReturnValue();

  if (v153)
  {
    v154 = *p_isa;
    [*v1217 signature];
    v155 = (void *)objc_claimAutoreleasedReturnValue();
    v156 = v155;
    if (v1208)
    {
      SAJSONWriteDictionaryEntry(v154, @"signature", v155);
    }

    else
    {
      SACopySanitizedString(v155, 1, 0xFFuLL);
      uint64_t v57 = (__CFString *)objc_claimAutoreleasedReturnValue();
      [v154 printWithFormat:@"%-*s%@\n", 18, "Signature: ", v57];
    }
  }

  if ([*v1217 targetDispatchQueueId])
  {
    [*v1217 targetProcess];
    v157 = (void *)objc_claimAutoreleasedReturnValue();
    [v157 dispatchQueues];
    uint64_t v57 = (__CFString *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x189607968], "numberWithUnsignedLongLong:", objc_msgSend(*v1217, "targetDispatchQueueId"));
    v158 = (void *)objc_claimAutoreleasedReturnValue();
    v159 = -[__CFString objectForKeyedSubscript:](v57, "objectForKeyedSubscript:", v158);
    if (v159)
    {
      v160 = *p_isa;
      if (!v1208)
      {
        -[SASamplePrinter displayNameForDispatchQueue:](v159);
        uint64_t v57 = (__CFString *)objc_claimAutoreleasedReturnValue();
        [v160 printWithFormat:@"%-*s%@\n", 18, "Dispatch Queue: ", v57];
        goto LABEL_222;
      }

      objc_msgSend(MEMORY[0x189607968], "numberWithUnsignedLongLong:", objc_msgSend(*v1217, "targetDispatchQueueId"));
      uint64_t v57 = (__CFString *)objc_claimAutoreleasedReturnValue();
      SAJSONWriteDictionaryEntry(v160, @"targetDispatchQueueId", v57);

      [v159 dispatchQueueLabel];
      v161 = (void *)objc_claimAutoreleasedReturnValue();

      if (v161)
      {
        v162 = *p_isa;
        [v159 dispatchQueueLabel];
        uint64_t v57 = (__CFString *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v162, @"targetDispatchQueueLabel", v57);
LABEL_222:
      }
    }
  }

  if ([*v1217 targetThreadId])
  {
    v163 = *p_isa;
    if (v1208)
    {
      objc_msgSend(MEMORY[0x189607968], "numberWithUnsignedLongLong:", objc_msgSend(*v1217, "targetThreadId"));
      v164 = (void *)objc_claimAutoreleasedReturnValue();
      SAJSONWriteDictionaryEntry(v163, @"targetThreadId", v164);
    }

    else
    {
      objc_msgSend( v163,  "printWithFormat:",  @"%-*s0x%llx\n",  18,  "Thread: ",  objc_msgSend(*v1217, "targetThreadId"));
    }
  }

  [*v1217 actionTaken];
  v165 = (void *)objc_claimAutoreleasedReturnValue();

  if (v165)
  {
    v166 = *p_isa;
    [*v1217 actionTaken];
    v167 = (void *)objc_claimAutoreleasedReturnValue();
    v168 = v167;
    if (v1208)
    {
      SAJSONWriteDictionaryEntry(v166, @"actionTaken", v167);
    }

    else
    {
      SACopySanitizedString(v167, 1, 0LL);
      uint64_t v57 = (__CFString *)objc_claimAutoreleasedReturnValue();
      [v166 printWithFormat:@"%-*s%@\n", 18, "Action taken: ", v57];
    }
  }

  [*v1217 cpuUsed];
  if (v169 > 0.0)
  {
    [*v1217 cpuDuration];
    if (v170 > 0.0)
    {
      if (v1208)
      {
        v171 = *p_isa;
        v172 = (void *)MEMORY[0x189607968];
        [*v1217 cpuUsed];
        objc_msgSend(v172, "numberWithDouble:");
        v173 = (void *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v171, @"cpuUsed", v173);

        v174 = *p_isa;
        v175 = (void *)MEMORY[0x189607968];
        [*v1217 cpuDuration];
        objc_msgSend(v175, "numberWithDouble:");
        v176 = (void *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v174, @"cpuDuration", v176);

        v177 = *p_isa;
        v178 = (void *)MEMORY[0x189607968];
        [*v1217 cpuLimit];
        objc_msgSend(v178, "numberWithDouble:");
        v179 = (void *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v177, @"cpuLimit", v179);

        v180 = *p_isa;
        v181 = (void *)MEMORY[0x189607968];
        [*v1217 cpuLimitDuration];
        objc_msgSend(v181, "numberWithDouble:");
        v182 = (void *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v180, @"cpuLimitDuration", v182);
      }

      else
      {
        v183 = *(void **)(v1256 + 160);
        *(_BYTE *)(v1256 + 104) = 1;
        [v183 cpuUsed];
        v185 = v184;
        [*(id *)(v1256 + 160) cpuDuration];
        v187 = v186;
        v188 = *(void **)(v1256 + 8);
        [*(id *)(v1256 + 160) cpuUsed];
        v190 = v189;
        [*(id *)(v1256 + 160) cpuDuration];
        objc_msgSend( v188,  "printWithFormat:",  @"%-*s%.0f seconds cpu time over %.0f seconds (%.0f%% cpu average)",  18,  "CPU: ",  v190,  v191,  v185 * 100.0 / v187);
        [*(id *)(v1256 + 160) cpuLimit];
        if (v192 <= 0.0 || ([*v1217 cpuLimitDuration], v193 <= 0.0))
        {
          [*p_isa appendString:@"\n"];
        }

        else
        {
          [*v1217 cpuLimit];
          v195 = v194;
          [*v1217 cpuLimitDuration];
          v197 = v196;
          v198 = *p_isa;
          [*v1217 cpuLimitDuration];
          objc_msgSend( v198,  "printWithFormat:",  @", exceeding limit of %.0f%% cpu over %.0f seconds\n",  v195 * 100.0 / v197,  v199);
        }

        v201 = *p_isa;
        [*v1217 cpuLimit];
        objc_msgSend(v201, "printWithFormat:", @"%-*s%.0fs\n", 18, "CPU limit: ", v202);
        v203 = *p_isa;
        [*v1217 cpuLimitDuration];
        objc_msgSend(v203, "printWithFormat:", @"%-*s%.0fs\n", 18, "Limit duration: ", v204);
        v205 = *p_isa;
        [*v1217 cpuUsed];
        objc_msgSend(v205, "printWithFormat:", @"%-*s%.0fs\n", 18, "CPU used: ", v206);
        v207 = *p_isa;
        [*v1217 cpuDuration];
        objc_msgSend(v207, "printWithFormat:", @"%-*s%.0fs\n", 18, "CPU duration: ", v208);
      }
    }
  }

  if ([*v1217 numWakeups])
  {
    [*v1217 wakeupsDuration];
    if (v209 > 0.0)
    {
      if (v1208)
      {
        v210 = *p_isa;
        objc_msgSend(MEMORY[0x189607968], "numberWithUnsignedLongLong:", objc_msgSend(*v1217, "numWakeups"));
        v211 = (void *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v210, @"numWakeups", v211);

        v212 = *p_isa;
        v213 = (void *)MEMORY[0x189607968];
        [*v1217 wakeupsDuration];
        objc_msgSend(v213, "numberWithDouble:");
        v214 = (void *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v212, @"wakeupsDuration", v214);

        v215 = *p_isa;
        objc_msgSend(MEMORY[0x189607968], "numberWithUnsignedLongLong:", objc_msgSend(*v1217, "numWakeupsLimit"));
        v216 = (void *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v215, @"numWakeupsLimit", v216);

        v217 = *p_isa;
        v218 = (void *)MEMORY[0x189607968];
        [*v1217 wakeupsLimitDuration];
        objc_msgSend(v218, "numberWithDouble:");
        v219 = (void *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v217, @"wakeupsLimitDuration", v219);
      }

      else
      {
        v220 = *(void **)(v1256 + 160);
        *(_BYTE *)(v1256 + 104) = 1;
        v221 = [v220 numWakeups];
        [*(id *)(v1256 + 160) wakeupsDuration];
        v223 = v222;
        v224 = *(void **)(v1256 + 8);
        uint64_t v57 = (__CFString *)[*(id *)(v1256 + 160) numWakeups];
        [*(id *)(v1256 + 160) wakeupsDuration];
        objc_msgSend( v224,  "printWithFormat:",  @"%-*s%llu wakeups over the last %.0f seconds (%.0f wakeups per second average)",  18,  "Wakeups: ",  v57,  v225,  (double)v221 / v223);
        if ([*(id *)(v1256 + 160) numWakeupsLimit]
          && ([*v1217 wakeupsLimitDuration], v226 > 0.0))
        {
          v227 = [*v1217 numWakeupsLimit];
          [*v1217 wakeupsLimitDuration];
          v229 = v228;
          v230 = *p_isa;
          [*v1217 wakeupsLimitDuration];
          objc_msgSend( v230,  "printWithFormat:",  @", exceeding limit of %.0f wakeups per second over %.0f seconds\n",  (double)v227 / v229,  v231);
        }

        else
        {
          [*p_isa appendString:@"\n"];
        }

        objc_msgSend( *p_isa,  "printWithFormat:",  @"%-*s%llu\n",  18,  "Wakeups limit: ",  objc_msgSend(*v1217, "numWakeupsLimit"));
        v232 = *p_isa;
        [*v1217 wakeupsLimitDuration];
        objc_msgSend(v232, "printWithFormat:", @"%-*s%.0fs\n", 18, "Limit duration: ", v233);
        objc_msgSend( *p_isa,  "printWithFormat:",  @"%-*s%llu\n",  18,  "Wakeups caused: ",  objc_msgSend(*v1217, "numWakeups"));
        v234 = *p_isa;
        [*v1217 wakeupsDuration];
        objc_msgSend(v234, "printWithFormat:", @"%-*s%.0fs\n", 18, "Wakeups duration: ", v235);
      }
    }
  }

  if ([*v1217 bytesWritten])
  {
    [*v1217 writeDuration];
    if (v236 > 0.0)
    {
      if (v1208)
      {
        v237 = *p_isa;
        objc_msgSend(MEMORY[0x189607968], "numberWithUnsignedLongLong:", objc_msgSend(*v1217, "bytesWritten"));
        v238 = (void *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v237, @"bytesWritten", v238);

        v239 = *p_isa;
        v240 = (void *)MEMORY[0x189607968];
        [*v1217 writeDuration];
        objc_msgSend(v240, "numberWithDouble:");
        v241 = (void *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v239, @"writeDuration", v241);

        v242 = *p_isa;
        objc_msgSend(MEMORY[0x189607968], "numberWithUnsignedLongLong:", objc_msgSend(*v1217, "bytesWrittenLimit"));
        v243 = (void *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v242, @"bytesWrittenLimit", v243);

        v244 = *p_isa;
        v245 = (void *)MEMORY[0x189607968];
        [*v1217 writeLimitDuration];
        objc_msgSend(v245, "numberWithDouble:");
        v246 = (void *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v244, @"writeLimitDuration", v246);
      }

      else
      {
        v247 = *(void **)(v1256 + 160);
        *(_BYTE *)(v1256 + 104) = 1;
        v248 = [v247 bytesWritten];
        [*(id *)(v1256 + 160) writeDuration];
        v250 = v249;
        v251 = *(void **)(v1256 + 8);
        SAFormattedBytesEx([*(id *)(v1256 + 160) bytesWritten], 0, 0, 1, 0);
        v252 = (void *)objc_claimAutoreleasedReturnValue();
        [*(id *)(v1256 + 160) writeDuration];
        v254 = v253;
        SAFormattedBytesDouble(0, 0, (double)v248 / v250);
        uint64_t v57 = (__CFString *)objc_claimAutoreleasedReturnValue();
        [v251 printWithFormat:@"%-*s%@ of file backed memory dirtied over %.0f seconds (%@ per second average)", 18, "Writes: ", v252, v254, v57];

        if ([*(id *)(v1256 + 160) bytesWrittenLimit]
          && ([*v1217 writeLimitDuration], v255 > 0.0))
        {
          v256 = [*v1217 bytesWrittenLimit];
          [*v1217 writeLimitDuration];
          v258 = *p_isa;
          SAFormattedBytesDouble(0, 0, (double)v256 / v257);
          v259 = (void *)objc_claimAutoreleasedReturnValue();
          [*v1217 writeLimitDuration];
          [v258 printWithFormat:@", exceeding limit of %@ per second over %.0f seconds\n", v259, v260];
        }

        else
        {
          [*p_isa appendString:@"\n"];
        }

        v261 = *p_isa;
        SAFormattedBytesEx([*v1217 bytesWrittenLimit], 0, 0, 1, 0);
        v262 = (void *)objc_claimAutoreleasedReturnValue();
        [v261 printWithFormat:@"%-*s%@\n", 18, "Writes limit: ", v262];

        v263 = *p_isa;
        [*v1217 writeLimitDuration];
        objc_msgSend(v263, "printWithFormat:", @"%-*s%.0fs\n", 18, "Limit duration: ", v264);
        v265 = *p_isa;
        SAFormattedBytesEx([*v1217 bytesWritten], 0, 0, 1, 0);
        v266 = (void *)objc_claimAutoreleasedReturnValue();
        [v265 printWithFormat:@"%-*s%@\n", 18, "Writes caused: ", v266];

        v267 = *p_isa;
        [*v1217 writeDuration];
        objc_msgSend(v267, "printWithFormat:", @"%-*s%.0fs\n", 18, "Writes duration: ", v268);
      }
    }
  }

  [*v1217 attemptedSamplingInterval];
  v270 = v269;
  [*v1217 eventTimeRange];
  v271 = (void *)objc_claimAutoreleasedReturnValue();

  v272 = 0.0;
  if (v271)
  {
    [*v1217 eventTimeRange];
    v273 = (void *)objc_claimAutoreleasedReturnValue();
    [v273 deltaMachAbsTimeSeconds];
    v275 = v274 != 0.0;

    [*v1217 eventTimeRange];
    v276 = (void *)objc_claimAutoreleasedReturnValue();
    v277 = v276;
    if (v275)
    {
      [v276 deltaMachAbsTimeSeconds];
LABEL_268:
      v272 = v278;

      goto LABEL_269;
    }

    [v276 deltaMachContTimeSeconds];
    v280 = v279 != 0.0;

    [*v1217 eventTimeRange];
    v281 = (void *)objc_claimAutoreleasedReturnValue();
    v277 = v281;
    if (v280)
    {
      [v281 deltaMachContTimeSeconds];
      goto LABEL_268;
    }

    [v281 deltaWallTime];
    v283 = v282 != 0.0;

    if (v283)
    {
      [*v1217 eventTimeRange];
      v277 = (void *)objc_claimAutoreleasedReturnValue();
      [v277 deltaWallTime];
      goto LABEL_268;
    }
  }

LABEL_269:
  [*(id *)(v1256 + 40) machAbsTimeSeconds];
  if (v284 != 0.0)
  {
    [*(id *)(v1256 + 32) machAbsTimeSeconds];
    if (v285 != 0.0)
    {
      [*(id *)(v1256 + 40) machAbsTimeSeconds];
      v287 = v286;
      [*(id *)(v1256 + 32) machAbsTimeSeconds];
LABEL_278:
      v292 = v287 - v288;
      goto LABEL_279;
    }
  }

  [*(id *)(v1256 + 40) machContTimeSeconds];
  if (v289 != 0.0)
  {
    [*(id *)(v1256 + 32) machContTimeSeconds];
    if (v290 != 0.0)
    {
      [*(id *)(v1256 + 40) machContTimeSeconds];
      v287 = v291;
      [*(id *)(v1256 + 32) machContTimeSeconds];
      goto LABEL_278;
    }
  }

  [*(id *)(v1256 + 40) wallTime];
  v292 = 0.0;
  if (v293 != 0.0)
  {
    [*(id *)(v1256 + 32) wallTime];
    if (v294 != 0.0)
    {
      [*(id *)(v1256 + 40) wallTime];
      v287 = v295;
      [*(id *)(v1256 + 32) wallTime];
      goto LABEL_278;
    }
  }

LABEL_450:
        if ([*v1217 wrSignpostCount])
        {
          if ([*v1217 wrSignpostCountThreshold])
          {
            v484 = [*v1217 wrSignpostCount];
            if (v484 >= [*v1217 wrSignpostCountThreshold])
            {
              v485 = *p_isa;
              if (v1208)
              {
                objc_msgSend( MEMORY[0x189607968],  "numberWithUnsignedLongLong:",  objc_msgSend(*v1217, "wrSignpostCount"));
                v486 = (void *)objc_claimAutoreleasedReturnValue();
                SAJSONWriteDictionaryEntry(v485, @"wrSignpostCount", v486);

                v487 = *p_isa;
                objc_msgSend( MEMORY[0x189607968],  "numberWithUnsignedLongLong:",  objc_msgSend(*v1217, "wrSignpostCountThreshold"));
                v488 = (void *)objc_claimAutoreleasedReturnValue();
                SAJSONWriteDictionaryEntry(v487, @"wrSignpostCountThreshold", v488);
              }

              else
              {
                objc_msgSend( v485,  "printWithFormat:",  @"%-*sSignpost count %llu, above threshold %llu\n",  18,  "Trigger: ",  objc_msgSend(*v1217, "wrSignpostCount"),  objc_msgSend(*v1217, "wrSignpostCountThreshold"));
              }
            }
          }
        }

        [*v1217 wrSignpostDurationUnion];
        if (v489 > 0.0)
        {
          [*v1217 wrSignpostDurationUnionThreshold];
          if (v490 > 0.0)
          {
            [*v1217 wrSignpostDurationUnion];
            v492 = v491;
            [*v1217 wrSignpostDurationUnionThreshold];
            if (v492 >= v493)
            {
              v494 = *p_isa;
              if (v1208)
              {
                v495 = (void *)MEMORY[0x189607968];
                [*v1217 wrSignpostDurationUnion];
                objc_msgSend(v495, "numberWithDouble:");
                v496 = (void *)objc_claimAutoreleasedReturnValue();
                SAJSONWriteDictionaryEntry(v494, @"wrSignpostDurationUnion", v496);

                v497 = *p_isa;
                v498 = (void *)MEMORY[0x189607968];
                [*v1217 wrSignpostDurationUnionThreshold];
                objc_msgSend(v498, "numberWithDouble:");
                v499 = (void *)objc_claimAutoreleasedReturnValue();
                SAJSONWriteDictionaryEntry(v497, @"wrSignpostDurationUnionThreshold", v499);
              }

              else
              {
                objc_msgSend( v494,  "printWithFormat:",  @"%-*sSignpost interval duration (union) ",  18,  "Trigger: ");
                v500 = *(void **)(v1256 + 8);
                [*(id *)(v1256 + 160) wrSignpostDurationUnion];
                v502 = v501;
                else {
                  v503 = 3LL;
                }
                saos_printf_seconds(v500, (unint64_t)(v502 * 1000000000.0), v503);
                objc_msgSend(*(id *)(v1256 + 8), "appendString:", @", above threshold ");
                v504 = *(void **)(v1256 + 8);
                [*(id *)(v1256 + 160) wrSignpostDurationUnionThreshold];
                v506 = v505;
                else {
                  v507 = 3LL;
                }
                saos_printf_seconds(v504, (unint64_t)(v506 * 1000000000.0), v507);
                [*(id *)(v1256 + 8) appendString:@"\n"];
              }
            }
          }
        }

        [*v1217 wrSignpostDurationSum];
        if (v508 > 0.0)
        {
          [*v1217 wrSignpostDurationSumThreshold];
          if (v509 > 0.0)
          {
            [*v1217 wrSignpostDurationSum];
            v511 = v510;
            [*v1217 wrSignpostDurationSumThreshold];
            if (v511 >= v512)
            {
              v513 = *p_isa;
              if (v1208)
              {
                v514 = (void *)MEMORY[0x189607968];
                [*v1217 wrSignpostDurationSum];
                objc_msgSend(v514, "numberWithDouble:");
                v515 = (void *)objc_claimAutoreleasedReturnValue();
                SAJSONWriteDictionaryEntry(v513, @"wrSignpostDurationSum", v515);

                v516 = *p_isa;
                v517 = (void *)MEMORY[0x189607968];
                [*v1217 wrSignpostDurationSumThreshold];
                objc_msgSend(v517, "numberWithDouble:");
                v518 = (void *)objc_claimAutoreleasedReturnValue();
                SAJSONWriteDictionaryEntry(v516, @"wrSignpostDurationSumThreshold", v518);
              }

              else
              {
                objc_msgSend( v513,  "printWithFormat:",  @"%-*sSignpost interval duration (sum) ",  18,  "Trigger: ");
                v519 = *(void **)(v1256 + 8);
                [*(id *)(v1256 + 160) wrSignpostDurationSum];
                v521 = v520;
                else {
                  v522 = 3LL;
                }
                saos_printf_seconds(v519, (unint64_t)(v521 * 1000000000.0), v522);
                objc_msgSend(*(id *)(v1256 + 8), "appendString:", @", above threshold ");
                v523 = *(void **)(v1256 + 8);
                [*(id *)(v1256 + 160) wrSignpostDurationSumThreshold];
                v525 = v524;
                else {
                  v526 = 3LL;
                }
                saos_printf_seconds(v523, (unint64_t)(v525 * 1000000000.0), v526);
                [*(id *)(v1256 + 8) appendString:@"\n"];
              }
            }
          }
        }

        [*v1217 wrSignpostDurationSingle];
        if (v527 > 0.0
          && ([*v1217 wrSignpostDurationSingleThreshold], v528 > 0.0)
          && ([*v1217 wrSignpostDurationSingle],
              v530 = v529,
              [*v1217 wrSignpostDurationSingleThreshold],
              v530 >= v531))
        {
          v588 = *p_isa;
          if (v1208)
          {
            v589 = (void *)MEMORY[0x189607968];
            [*v1217 wrSignpostDurationSingle];
            objc_msgSend(v589, "numberWithDouble:");
            v590 = (void *)objc_claimAutoreleasedReturnValue();
            SAJSONWriteDictionaryEntry(v588, @"wrSignpostDurationSingle", v590);

            v591 = *p_isa;
            v592 = (void *)MEMORY[0x189607968];
            [*v1217 wrSignpostDurationSingleThreshold];
            objc_msgSend(v592, "numberWithDouble:");
            v593 = (void *)objc_claimAutoreleasedReturnValue();
            SAJSONWriteDictionaryEntry(v591, @"wrSignpostDurationSingleThreshold", v593);

            goto LABEL_485;
          }

          objc_msgSend(v588, "printWithFormat:", @"%-*sSignpost interval duration (single) ", 18, "Trigger: ");
          v756 = *(void **)(v1256 + 8);
          [*(id *)(v1256 + 160) wrSignpostDurationSingle];
          v758 = v757;
          else {
            v759 = 3LL;
          }
          saos_printf_seconds(v756, (unint64_t)(v758 * 1000000000.0), v759);
          objc_msgSend(*(id *)(v1256 + 8), "appendString:", @", above threshold ");
          v760 = *(void **)(v1256 + 8);
          [*(id *)(v1256 + 160) wrSignpostDurationSingleThreshold];
          v762 = v761;
          else {
            v763 = 3LL;
          }
          saos_printf_seconds(v760, (unint64_t)(v762 * 1000000000.0), v763);
          [*(id *)(v1256 + 8) appendString:@"\n"];
        }

        else if ((v1208 & 1) != 0)
        {
LABEL_485:

          goto LABEL_486;
        }

        [*p_isa appendString:@"\n"];
        goto LABEL_485;
      }

      v457 = *p_isa;
      [*v1217 wrSignpostCategory];
      v458 = (void *)objc_claimAutoreleasedReturnValue();
      SAJSONWriteDictionaryEntry(v457, @"wrSignpostCategory", v458);
    }

    else
    {
      [*v1217 wrSignpostName];
      v458 = (void *)objc_claimAutoreleasedReturnValue();
      [*v1217 wrSignpostSubsystem];
      v459 = (void *)objc_claimAutoreleasedReturnValue();
      if (v459)
      {
        [*v1217 wrSignpostCategory];
        v460 = (void *)objc_claimAutoreleasedReturnValue();
        v461 = v460 == 0LL;

        if (!v461)
        {
          [*v1217 wrSignpostSubsystem];
          v462 = (void *)objc_claimAutoreleasedReturnValue();
          [*v1217 wrSignpostCategory];
          v463 = (void *)objc_claimAutoreleasedReturnValue();
          v464 = [v458 stringByAppendingFormat:@" [%@:%@]", v462, v463];

          v458 = (void *)v464;
        }
      }

      [*p_isa printWithFormat:@"%-*s%@\n", 18, "Signpost: ", v458];
    }

    goto LABEL_435;
  }

LABEL_486:
  [*v1217 hardwareModel];
  v532 = (void *)objc_claimAutoreleasedReturnValue();
  if (v532
    || [*v1217 numActiveCPUs]
    || [*v1217 hwPageSize]
    || [*v1217 vmPageSize])
  {
    goto LABEL_490;
  }

  [*v1217 bootArgs];
  v532 = (void *)objc_claimAutoreleasedReturnValue();
  if (v532)
  {
    [*v1217 bootArgs];
    v772 = (void *)objc_claimAutoreleasedReturnValue();
    if ([v772 length])
    {

LABEL_490:
      goto LABEL_491;
    }

    v1123 = [*(id *)(v1256 + 16) displayEmptyBootArgs];

    if ((v1123 & 1) == 0) {
      goto LABEL_523;
    }
  }

  else if (([*(id *)(v1256 + 16) displayEmptyBootArgs] & 1) == 0)
  {
    goto LABEL_523;
  }

LABEL_491:
  [*v1217 hardwareModel];
  v533 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v533)
  {
    if (v1208) {
      goto LABEL_497;
    }
LABEL_499:
    objc_msgSend( *p_isa,  "printWithFormat:",  @"%-*s%d\n",  18,  "Active cpus: ",  objc_msgSend(*v1217, "numActiveCPUs"));
    goto LABEL_500;
  }

  v534 = *p_isa;
  [*v1217 hardwareModel];
  v535 = (void *)objc_claimAutoreleasedReturnValue();
  v536 = v535;
  if ((v1208 & 1) == 0)
  {
    SACopySanitizedString(v535, 1, 0LL);
    v539 = (void *)objc_claimAutoreleasedReturnValue();
    [v534 printWithFormat:@"%-*s%@\n", 18, "Hardware model: ", v539];

    goto LABEL_499;
  }

  SAJSONWriteDictionaryEntry(v534, @"hardwareModel", v535);

  if ([*v1217 numActiveCPUs])
  {
LABEL_497:
    v537 = *p_isa;
    objc_msgSend(MEMORY[0x189607968], "numberWithUnsignedInt:", objc_msgSend(*v1217, "numActiveCPUs"));
    v538 = (void *)objc_claimAutoreleasedReturnValue();
    SAJSONWriteDictionaryEntry(v537, @"numActiveCPUs", v538);
  }

  v280 = v279 ^ 1;
  v281 = [v568 isPartOfADeadlock];
  if (v269)
  {
    v282 = v279 ^ 1;
    goto LABEL_497;
  }

  v285 = v279 ^ 1;
  if ((v281 & 1) == 0) {
    goto LABEL_516;
  }
LABEL_498:
  v286 = 0;
  if (!v280) {
    goto LABEL_524;
  }
LABEL_517:

  if (v580) {
    goto LABEL_518;
  }
LABEL_525:
  int v19 = v587;
  if (v285) {
    goto LABEL_526;
  }
LABEL_519:

  if (v577) {
    goto LABEL_520;
  }
LABEL_527:
  v267 = &OBJC_IVAR___SASharedCache__slidBaseAddress;
  if (!v593) {
    goto LABEL_528;
  }
LABEL_522:

  if ((v599 & 1) != 0) {
LABEL_529:
  }

LABEL_530:
  if ((v286 & 1) == 0) {
    goto LABEL_531;
  }
  v250 = (unsigned int *)(id)v269;

  a1 = v604;
  v214 = v568;
  v220 = v611;
  if (v269)
  {
    a3 = v601;
    goto LABEL_554;
  }

LABEL_500:
  if (![*v1217 hwPageSize])
  {
    if (v1208) {
      goto LABEL_506;
    }
LABEL_508:
    objc_msgSend( *p_isa,  "printWithFormat:",  @"%-*s%d\n",  18,  "VM page size: ",  objc_msgSend(*v1217, "vmPageSize"));
    goto LABEL_509;
  }

  v540 = *p_isa;
  if ((v1208 & 1) == 0)
  {
    objc_msgSend( v540,  "printWithFormat:",  @"%-*s%d\n",  18,  "HW page size: ",  objc_msgSend(*v1217, "hwPageSize"));
    goto LABEL_508;
  }

  objc_msgSend(MEMORY[0x189607968], "numberWithUnsignedInt:", objc_msgSend(*v1217, "hwPageSize"));
  v541 = (void *)objc_claimAutoreleasedReturnValue();
  SAJSONWriteDictionaryEntry(v540, @"hwPageSize", v541);

  if ([*v1217 vmPageSize])
  {
LABEL_506:
    v542 = *p_isa;
    objc_msgSend(MEMORY[0x189607968], "numberWithUnsignedInt:", objc_msgSend(*v1217, "vmPageSize"));
    v543 = (void *)objc_claimAutoreleasedReturnValue();
    SAJSONWriteDictionaryEntry(v542, @"vmPageSize", v543);
  }

LABEL_509:
  [*v1217 bootArgs];
  v544 = (void *)objc_claimAutoreleasedReturnValue();
  if (v544)
  {
    [*v1217 bootArgs];
    v545 = (void *)objc_claimAutoreleasedReturnValue();
    if ([v545 length])
    {

LABEL_515:
      v547 = [*v1217 bootArgs];
      v548 = (void *)v547;
      v549 = @"???";
      if (v547) {
        v549 = (__CFString *)v547;
      }
      v550 = v549;

      v551 = *p_isa;
      if (v1208)
      {
        SAJSONWriteDictionaryEntry(*p_isa, @"bootArgs", v550);
      }

      else
      {
        SACopySanitizedString(v550, 1, 0LL);
        v552 = (void *)objc_claimAutoreleasedReturnValue();
        [v551 printWithFormat:@"%-*s%@\n", 18, "Boot args: ", v552];
      }

      goto LABEL_521;
    }

    v546 = [*(id *)(v1256 + 16) displayEmptyBootArgs];

    if ((v546 & 1) != 0) {
      goto LABEL_515;
    }
  }

  else if ([*(id *)(v1256 + 16) displayEmptyBootArgs])
  {
    goto LABEL_515;
  }

  v566 = 0LL;
  if ((-[SATurnstileInfo _displaysContentForPid:tid:threadPriority:options:displayString:nameCallback:]( (uint64_t)v274,  v289,  v290,  0,  *(void *)(v604 + 232),  0LL,  0LL) & 1) != 0)
  {
    v286 = 0;
    v285 = 1;
    goto LABEL_517;
  }

LABEL_541:
        v574 = *p_isa;
        v575 = (void *)MEMORY[0x189607968];
        [v1196 machAbsTimeSeconds];
        objc_msgSend(v575, "numberWithDouble:");
        v576 = (void *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v574, @"timeAwakeSinceBoot", v576);

        goto LABEL_544;
      }

      [v1196 machContTimeSeconds];
      objc_msgSend(v569, "printWithFormat:", @"%-*s%.0fs\n", 18, "Time Since Boot: ", v577);
      [v1196 machAbsTimeSeconds];
      if (v578 == 0.0) {
        goto LABEL_544;
      }
    }

    v579 = *p_isa;
    [v1196 machAbsTimeSeconds];
    objc_msgSend(v579, "printWithFormat:", @"%-*s%.0fs\n", 18, "Time Awake Since Boot: ", v580);
    goto LABEL_544;
  }

LABEL_562:
  [*(id *)(v1256 + 160) fanSpeedClosestToTimestamp:*(void *)(v1256 + 32)];
  v1189 = (void *)objc_claimAutoreleasedReturnValue();
  [*(id *)(v1256 + 160) fanSpeedClosestToTimestamp:*(void *)(v1256 + 40)];
  v1191 = (void *)objc_claimAutoreleasedReturnValue();
  if (v1191 && ([v1191 fanSpeedIsValid] & 1) != 0
    || v1189 && [v1189 fanSpeedIsValid])
  {
    v595 = [v1189 fanSpeedIsValid];
    if (v1208)
    {
      if (v595)
      {
        v596 = *p_isa;
        objc_msgSend(MEMORY[0x189607968], "numberWithInt:", objc_msgSend(v1189, "fanSpeed"));
        v597 = (void *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v596, @"startFanSpeed", v597);
      }

      if ([v1191 fanSpeedIsValid])
      {
        v598 = *p_isa;
        objc_msgSend(MEMORY[0x189607968], "numberWithInt:", objc_msgSend(v1191, "fanSpeed"));
        v599 = (void *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v598, @"endFanSpeed", v599);
      }
    }

    else
    {
      if (v595) {
        v600 = v1189;
      }
      else {
        v600 = v1191;
      }
      v601 = [v600 fanSpeed];
      objc_msgSend(*p_isa, "printWithFormat:", @"%-*s%d rpm", 18, "Fan speed: ", v601);
      if ([v1191 fanSpeedIsValid])
      {
        v602 = [v1191 fanSpeed];
        v603 = (int)v602 - (int)v601 >= 0 ? v602 - v601 : (int)v601 - (int)v602;
        if (v603 >= 0x64) {
          objc_msgSend(*p_isa, "printWithFormat:", @" -> %d (%+d)", v602, (v602 - v601));
        }
      }

      [*p_isa appendString:@"\n"];
    }
  }
  v1175 = +[SATimeRange timeRangeStart:end:]( &OBJC_CLASS___SATimeRange,  "timeRangeStart:end:",  *(void *)(v1256 + 32),  *(void *)(v1256 + 40));
  v604 = [v1175 deltaMachAbsTime];
  v605 = MEMORY[0x1895F87A8];
  v606 = (unint64_t)&off_186D74000;
  if (!v604)
  {
    v1224 = 0;
    goto LABEL_597;
  }

  *(void *)v1379 = 0LL;
  *(void *)&v1379[8] = v1379;
  *(void *)&v1379[16] = 0x2020000000LL;
  *(void *)&v1379[24] = 0LL;
  *(void *)&v1375 = 0LL;
  *((void *)&v1375 + 1) = &v1375;
  v1376 = 0x2020000000uLL;
  *(void *)&buf = 0LL;
  *((void *)&buf + 1) = &buf;
  v1368 = 0x2020000000LL;
  v1369 = 0LL;
  v607 = *(id *)(v1256 + 32);
  v608 = *(id *)(v1256 + 40);
  v609 = *(void **)(v1256 + 160);
  v1313[0] = v605;
  v1313[1] = 3221225472LL;
  v1313[2] = __30__SASamplePrinter_printHeader__block_invoke;
  v1313[3] = &unk_189F638B8;
  v610 = v607;
  v1314 = v610;
  v611 = v608;
  v1315 = v611;
  v1316 = v1379;
  v1317 = &v1375;
  p_buf = &buf;
  [v609 enumerateTasks:v1313];
  if (*(void *)(*(void *)&v1379[8] + 24LL))
  {
    v612 = *p_isa;
    if (!v1208)
    {
      objc_msgSend(v612, "printWithFormat:", @"%-*s", 18, "Total CPU Time: ");
      v618 = *(void *)(*(void *)&v1379[8] + 24LL);
      v619 = *(void **)(v1256 + 8);
      else {
        v620 = 3LL;
      }
      saos_printf_seconds(v619, v618, v620);
      v621 = *(void *)(*((void *)&buf + 1) + 24LL);
      if (v621) {
        saos_printf_cycles_instructions( *(void **)(v1256 + 8),  v621,  *(void *)(*((void *)&v1375 + 1) + 24),  [*(id *)(v1256 + 16) displayDetailedCpuTime]);
      }
      [*p_isa appendString:@"\n"];
      v1224 = 1;
      goto LABEL_596;
    }

    objc_msgSend(MEMORY[0x189607968], "numberWithUnsignedLongLong:");
    v613 = (void *)objc_claimAutoreleasedReturnValue();
    SAJSONWriteDictionaryEntry(v612, @"totalCpuNanoseconds", v613);

    if (*(void *)(*((void *)&v1375 + 1) + 24LL))
    {
      v614 = *p_isa;
      objc_msgSend(MEMORY[0x189607968], "numberWithUnsignedLongLong:");
      v615 = (void *)objc_claimAutoreleasedReturnValue();
      SAJSONWriteDictionaryEntry(v614, @"totalCpuInstructions", v615);
    }

    if (*(void *)(*((void *)&buf + 1) + 24LL))
    {
      v616 = *p_isa;
      objc_msgSend(MEMORY[0x189607968], "numberWithUnsignedLongLong:");
      v617 = (void *)objc_claimAutoreleasedReturnValue();
      SAJSONWriteDictionaryEntry(v616, @"totalCpuCycles", v617);
    }
  }

  v1224 = 0;
LABEL_596:

  _Block_object_dispose(&buf, 8);
  _Block_object_dispose(&v1375, 8);
  _Block_object_dispose(v1379, 8);
LABEL_597:
  [*v1217 memoryPressureEvents];
  v622 = (void *)objc_claimAutoreleasedReturnValue();
  v623 = [v622 count] == 0;

  if (!v623)
  {
    v1312 = 0u;
    v1311 = 0u;
    v1310 = 0u;
    v1309 = 0u;
    [*v1217 memoryPressureEvents];
    v1242 = (id)objc_claimAutoreleasedReturnValue();
    v624 = [v1242 countByEnumeratingWithState:&v1309 objects:v1358 count:16];
    if (v624)
    {
      v625 = 0LL;
      v606 = 0LL;
      v626 = 0LL;
      v627 = *(void *)v1310;
      v628 = 100;
      objc = -1LL;
      do
      {
        for (m = 0LL; m != v624; ++m)
        {
          if (*(void *)v1310 != v627) {
            objc_enumerationMutation(v1242);
          }
          v630 = *(void **)(*((void *)&v1309 + 1) + 8 * m);
          v631 = *(void **)(v1256 + 32);
          [v630 timestamp];
          v632 = (void *)objc_claimAutoreleasedReturnValue();
          LOBYTE(v631) = [v631 gt:v632];

          if ((v631 & 1) == 0)
          {
            v633 = *(void **)(v1256 + 40);
            [v630 timestamp];
            v634 = (void *)objc_claimAutoreleasedReturnValue();
            LOBYTE(v633) = [v633 lt:v634];

            if ([v630 availableBytes] < objc) {
              objc = [v630 availableBytes];
            }
            v626 += [v630 memoryStatusLevel];
            v625 += [v630 availableBytes];
            ++v606;
          }
        }

        v624 = [v1242 countByEnumeratingWithState:&v1309 objects:v1358 count:16];
      }

      while (v624);
LABEL_612:

      if (!v606) {
        goto LABEL_617;
      }
      v635 = v626 / v606;
      v636 = *p_isa;
      if (v1208)
      {
        [MEMORY[0x189607968] numberWithUnsignedLongLong:100 - v635];
        v637 = (void *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v636, @"averageMemoryPressure", v637);

        v638 = *p_isa;
        [MEMORY[0x189607968] numberWithUnsignedLongLong:v625 / v606];
        v639 = (void *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v638, @"averageAvailableBytes", v639);

        v640 = *p_isa;
        [MEMORY[0x189607968] numberWithInt:100 - v628];
        v641 = (void *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v640, @"highestMemoryPressure", v641);

        v642 = *p_isa;
        [MEMORY[0x189607968] numberWithUnsignedLongLong:objc];
        v1243 = (id)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v642, @"minimumAvailableBytes", v1243);

        goto LABEL_617;
      }

      objc_msgSend( v636,  "printWithFormat:",  @"%-*saverage %u%%, highest %u%%\n",  18,  "Memory pressure: ",  100 - v635,  100 - v628);
      v643 = *p_isa;
      SAFormattedBytesEx(v625 / v606, 1, 0, 1, 0LL);
      v1242 = (id)objc_claimAutoreleasedReturnValue();
      SAFormattedBytesEx(objc, 1, 0, 1, 0LL);
      v644 = (void *)objc_claimAutoreleasedReturnValue();
      [v643 printWithFormat:@"%-*saverage %@, lowest %@\n", 18, "Available memory: ", v1242, v644];

      v1224 = 1;
    }
  }

LABEL_617:
  [*v1217 ioEvents];
  v645 = (void *)objc_claimAutoreleasedReturnValue();
  v646 = [v645 count] == 0;

  if (!v646)
  {
    objd = (id)[objc_alloc(MEMORY[0x189603FC8]) initWithCapacity:4];
    v1244 = (id)[objc_alloc(MEMORY[0x189603FC8]) initWithCapacity:4];
    v1308 = 0u;
    v1307 = 0u;
    v1306 = 0u;
    v1305 = 0u;
    [*v1217 ioEvents];
    v1229 = (id)objc_claimAutoreleasedReturnValue();
    v647 = [v1229 countByEnumeratingWithState:&v1305 objects:v1357 count:16];
    if (v647)
    {
      selfa = 0LL;
      v648 = 0LL;
      v649 = *(void *)v1306;
      do
      {
        v650 = 0LL;
        v651 = v1256;
        do
        {
          if (*(void *)v1306 != v649)
          {
            objc_enumerationMutation(v1229);
            v651 = v1256;
          }

          v652 = *(void **)(*((void *)&v1305 + 1) + 8 * v650);
          v653 = *(void **)(v651 + 32);
          [v652 endTimestamp];
          v654 = (void *)objc_claimAutoreleasedReturnValue();
          LOBYTE(v653) = [v653 gt:v654];

          if ((v653 & 1) == 0)
          {
            v655 = *(void **)(v1256 + 40);
            [v652 endTimestamp];
            v656 = (void *)objc_claimAutoreleasedReturnValue();
            LOBYTE(v655) = [v655 lt:v656];

            v606 = [v652 tier];
            v657 = (void *)MEMORY[0x189607968];
            [MEMORY[0x189607968] numberWithUnsignedLongLong:v606];
            v658 = (void *)objc_claimAutoreleasedReturnValue();
            [objd objectForKeyedSubscript:v658];
            v659 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v657, "numberWithUnsignedLongLong:", objc_msgSend(v659, "unsignedLongLongValue") + 1);
            v660 = (void *)objc_claimAutoreleasedReturnValue();
            [MEMORY[0x189607968] numberWithUnsignedLongLong:v606];
            v661 = (void *)objc_claimAutoreleasedReturnValue();
            [objd setObject:v660 forKeyedSubscript:v661];

            v662 = (void *)MEMORY[0x189607968];
            [MEMORY[0x189607968] numberWithUnsignedLongLong:v606];
            v663 = (void *)objc_claimAutoreleasedReturnValue();
            [v1244 objectForKeyedSubscript:v663];
            v664 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend( v662,  "numberWithUnsignedLongLong:",  objc_msgSend(v652, "size") + objc_msgSend(v664, "unsignedLongLongValue"));
            v665 = (void *)objc_claimAutoreleasedReturnValue();
            [MEMORY[0x189607968] numberWithUnsignedLongLong:v606];
            v666 = (void *)objc_claimAutoreleasedReturnValue();
            [v1244 setObject:v665 forKeyedSubscript:v666];

            ++selfa;
            v648 += [v652 size];
          }

          v651 = v1256;
          ++v650;
        }

        while (v647 != v650);
        v647 = [v1229 countByEnumeratingWithState:&v1305 objects:v1357 count:16];
      }

      while (v647);
    }

    else
    {
      selfa = 0LL;
      v648 = 0LL;
    }

LABEL_630:
    if ([objd count])
    {
      [*(id *)(v1256 + 40) machAbsTimeSeconds];
      v668 = v667;
      [*(id *)(v1256 + 32) machAbsTimeSeconds];
      v670 = *(void **)(v1256 + 8);
      if (v1208)
      {
        [MEMORY[0x189607968] numberWithUnsignedLongLong:selfa];
        v671 = (void *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v670, @"ioCountTotal", v671);

        v672 = *p_isa;
        [MEMORY[0x189607968] numberWithUnsignedLongLong:v648];
        v673 = (void *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v672, @"ioBytesTotal", v673);

        v1304 = 0u;
        v1303 = 0u;
        v1302 = 0u;
        v1301 = 0u;
        [objd allKeys];
        v674 = (void *)objc_claimAutoreleasedReturnValue();
        [v674 sortedArrayUsingSelector:sel_compare_];
        v1230 = (id)objc_claimAutoreleasedReturnValue();

        v675 = [v1230 countByEnumeratingWithState:&v1301 objects:v1356 count:16];
        if (v675)
        {
          v676 = *(void *)v1302;
          do
          {
            for (n = 0LL; n != v675; ++n)
            {
              if (*(void *)v1302 != v676) {
                objc_enumerationMutation(v1230);
              }
              v678 = *(void **)(*((void *)&v1301 + 1) + 8 * n);
              v679 = *p_isa;
              v680 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"ioCountTier%d",  objc_msgSend(v678, "intValue"));
              [objd objectForKeyedSubscript:v678];
              v681 = (void *)objc_claimAutoreleasedReturnValue();
              SAJSONWriteDictionaryEntry(v679, v680, v681);

              v682 = *p_isa;
              v683 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"ioBytesTier%d",  objc_msgSend(v678, "intValue"));
              [v1244 objectForKeyedSubscript:v678];
              v684 = (void *)objc_claimAutoreleasedReturnValue();
              SAJSONWriteDictionaryEntry(v682, v683, v684);
            }

            v675 = [v1230 countByEnumeratingWithState:&v1301 objects:v1356 count:16];
          }

          while (v675);
        }
      }

      else
      {
        v685 = v669;
        [v670 printWithFormat:@"I/O statistics:\n"];
        v686 = v668 - v685;
        v687 = *p_isa;
        SAFormattedBytesEx(v648, 1, 0, 1, 0LL);
        v688 = (void *)objc_claimAutoreleasedReturnValue();
        if (v686 <= 0.0)
        {
          v689 = 0.0;
          v690 = 0.0;
        }

        else
        {
          v689 = (double)(unint64_t)selfa / v686;
          v690 = (double)v648 / v686;
        }

        SAFormattedBytesDouble(1, 0, v690);
        v691 = (void *)objc_claimAutoreleasedReturnValue();
        [v687 printWithFormat:@"%-*s%llu IOs (%.0f IOs/s), %@ (%@/s)\n", 18, "  Overall: ", selfa, *(void *)&v689, v688, v691];

        v1300 = 0u;
        v1299 = 0u;
        v1298 = 0u;
        v1297 = 0u;
        [objd allKeys];
        v692 = (void *)objc_claimAutoreleasedReturnValue();
        [v692 sortedArrayUsingSelector:sel_compare_];
        v1230 = (id)objc_claimAutoreleasedReturnValue();

        v1225 = [v1230 countByEnumeratingWithState:&v1297 objects:v1355 count:16];
        if (v1225)
        {
          v1219 = *(void *)v1298;
          do
          {
            for (iuint64_t i = 0LL; ii != v1225; ++ii)
            {
              if (*(void *)v1298 != v1219) {
                objc_enumerationMutation(v1230);
              }
              v694 = *(void **)(*((void *)&v1297 + 1) + 8 * ii);
              v695 = *p_isa;
              v696 = objc_msgSend( objc_alloc(NSString), "initWithFormat:", @"%-*sTier%d: ", 2, "", objc_msgSend(v694, "intValue"));
              v697 = [v696 UTF8String];
              [objd objectForKeyedSubscript:v694];
              v698 = (void *)objc_claimAutoreleasedReturnValue();
              v699 = 0.0;
              if (v686 > 0.0)
              {
                [objd objectForKeyedSubscript:v694];
                selfa = (char *)objc_claimAutoreleasedReturnValue();
                [selfa doubleValue];
                v699 = v700 / v686;
              }

              [v1244 objectForKeyedSubscript:v694];
              v701 = (void *)objc_claimAutoreleasedReturnValue();
              [v701 doubleValue];
              SAFormattedBytesDouble(1, 0, v702);
              v703 = (void *)objc_claimAutoreleasedReturnValue();
              v704 = 0.0;
              if (v686 > 0.0)
              {
                v606 = objc_msgSend(v1244, "objectForKeyedSubscript:", v694, 0.0);
                [(id)v606 doubleValue];
                v704 = v705 / v686;
              }

              SAFormattedBytesDouble(1, 0, v704);
              v706 = (void *)objc_claimAutoreleasedReturnValue();
              [v695 printWithFormat:@"%-*s%@ IOs (%.0f IOs/s), %@ (%@/s)\n", 18, v697, v698, *(void *)&v699, v703, v706];

              if (v686 > 0.0)
              {

                v703 = v701;
                v701 = selfa;
              }
            }

            v1225 = [v1230 countByEnumeratingWithState:&v1297 objects:v1355 count:16];
          }

          while (v1225);
        }

        v1224 = 1;
      }
    }
  }

  [*v1217 systemAdvisoryLevels];
  v707 = (void *)objc_claimAutoreleasedReturnValue();

  if (v707)
  {
    if (v1208)
    {
      [*(id *)(v1256 + 160) systemAdvisoryLevels];
      v708 = (void *)objc_claimAutoreleasedReturnValue();
      v1296[0] = MEMORY[0x1895F87A8];
      v1296[1] = 3221225472LL;
      v1296[2] = __30__SASamplePrinter_printHeader__block_invoke_2;
      v1296[3] = &unk_189F638E0;
      v1296[4] = v1256;
      [v708 enumerateKeysAndObjectsUsingBlock:v1296];
    }

    else
    {
      v709 = objc_alloc_init(MEMORY[0x189607940]);
      [*v1217 systemAdvisoryLevels];
      v710 = (void *)objc_claimAutoreleasedReturnValue();
      v1294[0] = MEMORY[0x1895F87A8];
      v1294[1] = 3221225472LL;
      v1294[2] = __30__SASamplePrinter_printHeader__block_invoke_3;
      v1294[3] = &unk_189F638E0;
      v711 = v709;
      v1295 = v711;
      [v710 enumerateKeysAndObjectsUsingBlock:v1294];

      if (objc_msgSend(v711, "hasSuffix:", @", "))
      {
        v712 = objc_msgSend(@", ", "length");
        objc_msgSend( v711,  "replaceCharactersInRange:withString:",  objc_msgSend(v711, "length") - v712,  v712,  &stru_189F64BD8);
      }

      v713 = *p_isa;
      v714 = v711;
      objc_msgSend( v713,  "printWithFormat:",  @"%-*s%s\n",  18,  "Advisory levels: ",  objc_msgSend(v714, "UTF8String"));

      v1224 = 1;
    }
  }

  [*v1217 homeVolumeSpace];
  v715 = (void *)objc_claimAutoreleasedReturnValue();

  if (v715)
  {
    [*v1217 homeVolumeSpace];
    v716 = (void *)objc_claimAutoreleasedReturnValue();
    [v716 objectForKeyedSubscript:0x189F65038];
    v717 = (void *)objc_claimAutoreleasedReturnValue();

    [*v1217 homeVolumeSpace];
    v718 = (void *)objc_claimAutoreleasedReturnValue();
    [v718 objectForKeyedSubscript:0x189F65058];
    v719 = (void *)objc_claimAutoreleasedReturnValue();

    [*v1217 homeVolumeSpace];
    v720 = (void *)objc_claimAutoreleasedReturnValue();
    [v720 objectForKeyedSubscript:0x189F65078];
    v721 = (void *)objc_claimAutoreleasedReturnValue();

    if (v717)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & (v719 != 0LL)) == 1)
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          if (v721)
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {

              v721 = 0LL;
            }
          }

          v722 = *p_isa;
          if (v1208)
          {
            SAJSONWriteDictionaryEntry(*p_isa, @"homeVolumeTotalSpace", v717);
            SAJSONWriteDictionaryEntry(*p_isa, @"homeVolumeAvailableSpace", v719);
            if (v721) {
              SAJSONWriteDictionaryEntry(*p_isa, @"homeVolumeLowSpaceThreshold", v721);
            }
          }

          else
          {
            SAFormattedBytesEx([v719 unsignedLongLongValue], 1, 0, 1, 0);
            v723 = (void *)objc_claimAutoreleasedReturnValue();
            SAFormattedBytesEx([v717 unsignedLongLongValue], 1, 0, 1, 0);
            v724 = (void *)objc_claimAutoreleasedReturnValue();
            [v722 printWithFormat:@"%-*s%@/%@", 18, "Free disk space: ", v723, v724];

            if (v721)
            {
              v725 = *p_isa;
              SAFormattedBytesEx([v721 unsignedLongLongValue], 1, 0, 1, 0);
              v726 = (void *)objc_claimAutoreleasedReturnValue();
              [v725 printWithFormat:@", low space threshold %@", v726];
            }

            [*p_isa printWithFormat:@"\n"];
            v1224 = 1;
          }
        }
      }
    }
  }

  [*v1217 powerModeTransitions];
  v727 = (void *)objc_claimAutoreleasedReturnValue();
  v728 = [v727 count] == 0;

  if (v728) {
    goto LABEL_755;
  }
  if ((v1208 & 1) != 0)
  {
    v729 = *p_isa;
    [*v1217 powerModeTransitions];
    v730 = (void *)objc_claimAutoreleasedReturnValue();
    SAJSONWriteDictionaryEntry(v729, @"powerModeTransitions", v730);

    v731 = *v1217;
    if (*v1217 && v731[126]) {
      goto LABEL_758;
    }
LABEL_766:
    [v731 models];
    v791 = (void *)objc_claimAutoreleasedReturnValue();

    if (v791)
    {
      v792 = *p_isa;
      [*v1217 models];
      v793 = (void *)objc_claimAutoreleasedReturnValue();
      SAJSONWriteDictionaryEntry(v792, @"models", v793);
    }

    goto LABEL_883;
  }

  *(void *)v1379 = 0LL;
  v1290 = 0u;
  v1291 = 0u;
  v1292 = 0u;
  v1293 = 0u;
  [*v1217 powerModeTransitions];
  v732 = (void *)objc_claimAutoreleasedReturnValue();
  v733 = [v732 countByEnumeratingWithState:&v1290 objects:v1354 count:16];
  if (!v733)
  {

    v738 = 0LL;
    goto LABEL_754;
  }

  v734 = 0;
  v735 = 0LL;
  v736 = 0;
  v737 = 0;
  v738 = 0LL;
  v739 = *(void *)v1291;
  v740 = 0.0;
  while (2)
  {
    for (juint64_t j = 0LL; jj != v733; ++jj)
    {
      if (*(void *)v1291 != v739) {
        objc_enumerationMutation(v732);
      }
      v742 = *(void **)(*((void *)&v1290 + 1) + 8 * jj);
      if ([v742 lowPowerModeChanged])
      {
        [v742 timestamp];
        v743 = (void *)objc_claimAutoreleasedReturnValue();
        v744 = v743;
        if (v743)
        {
          if ([v743 isComparable:*(void *)(v1256 + 40)]
            && [v744 gt:*(void *)(v1256 + 40)])
          {
            if ((v737 & 1) != 0)
            {

LABEL_711:
              if (v735)
              {
                if ((v736 & 1) != 0)
                {
                  [*(id *)(v1256 + 40) wallTime];
                  v753 = v752;
                  [v738 wallTime];
                  v740 = v740 + v753 - v754;
                  if (v735 == 1)
                  {
                    asprintf((char **)v1379, "(for last %.1fs of samples)", v740);
                    goto LABEL_732;
                  }

LABEL_731:
                  [*(id *)(v1256 + 40) wallTime];
                  v766 = v765;
                  [*(id *)(v1256 + 32) wallTime];
                  asprintf((char **)v1379, "(for %.1fs out of %.1fs of samples)", v740, v766 - v767);
                }

                else
                {
                  if (v735 != 1) {
                    goto LABEL_731;
                  }
                  asprintf((char **)v1379, "(for first %.1fs of samples)", v740);
                }

LABEL_732:
                objc_msgSend(*p_isa, "printWithFormat:", @"%-*sEnabled", 18, "Low Power Mode: ");
                v764 = *p_isa;
                if (!*(void *)v1379)
                {
LABEL_752:
                  [v764 appendString:@"\n"];
                  goto LABEL_753;
                }

LABEL_728:
                objc_msgSend(v764, "printWithFormat:", @" %s\n", *(void *)v1379);
LABEL_753:
                v1224 = 1;
                goto LABEL_754;
              }

              *(void *)v1379 = 0LL;
              if ((v736 & 1) != 0) {
                goto LABEL_732;
              }
            }

            else
            {
              v755 = [v742 lowPowerMode];

              if ((v755 & 1) == 0) {
                goto LABEL_732;
              }
            }

LABEL_726:
            if ([*(id *)(v1256 + 16) displayDefaultPowerModes])
            {
              objc_msgSend(*p_isa, "printWithFormat:", @"%-*sDisabled", 18, "Low Power Mode: ");
              v764 = *p_isa;
              if (!*(void *)v1379) {
                goto LABEL_752;
              }
              goto LABEL_728;
            }

            goto LABEL_753;
          }

          if ([v744 isComparable:*(void *)(v1256 + 32)]
            && ([v744 lt:*(void *)(v1256 + 32)] & 1) == 0)
          {
            if (([v742 lowPowerMode] & 1) == 0)
            {
              [v742 timestamp];
              v745 = (void *)objc_claimAutoreleasedReturnValue();
              [v745 wallTime];
              v747 = v746;
              v748 = v738;
              if (!v738) {
                v748 = *(void **)(v1256 + 32);
              }
              [v748 wallTime];
              v750 = v749;

              v740 = v740 + v747 - v750;
            }

            v751 = v744;

            ++v735;
            v738 = v751;
          }
        }

        v736 = [v742 lowPowerMode];
LABEL_703:

        v734 = 1;
        v737 = 1;
        continue;
      }
    }

    v733 = [v732 countByEnumeratingWithState:&v1290 objects:v1354 count:16];
    if (v733) {
      continue;
    }
    break;
  }

  if ((v734 & 1) != 0)
  {
    if ((v737 & 1) != 0) {
      goto LABEL_711;
    }
    goto LABEL_726;
  }

LABEL_754:
LABEL_755:
  v731 = *v1217;
  if (!*v1217 || (v779 = v731[126]) == 0)
  {
    if (!v1208) {
      goto LABEL_774;
    }
    goto LABEL_766;
  }

  if (v1208)
  {
LABEL_758:
    v780 = *p_isa;
    [MEMORY[0x189607968] numberWithUnsignedLongLong:v731[123]];
    v781 = (void *)objc_claimAutoreleasedReturnValue();
    SAJSONWriteDictionaryEntry(v780, @"numVnodesAllocated", v781);

    v782 = *p_isa;
    if (*v1217) {
      v783 = *((void *)*v1217 + 124);
    }
    else {
      v783 = 0LL;
    }
    [MEMORY[0x189607968] numberWithUnsignedLongLong:v783];
    v784 = (void *)objc_claimAutoreleasedReturnValue();
    SAJSONWriteDictionaryEntry(v782, @"numVnodesFree", v784);

    v785 = *p_isa;
    if (*v1217) {
      v786 = *((void *)*v1217 + 125);
    }
    else {
      v786 = 0LL;
    }
    [MEMORY[0x189607968] numberWithUnsignedLongLong:v786];
    v787 = (void *)objc_claimAutoreleasedReturnValue();
    SAJSONWriteDictionaryEntry(v785, @"numVnodesSoftLimit", v787);

    v788 = *p_isa;
    if (*v1217) {
      v789 = *((void *)*v1217 + 126);
    }
    else {
      v789 = 0LL;
    }
    [MEMORY[0x189607968] numberWithUnsignedLongLong:v789];
    v790 = (void *)objc_claimAutoreleasedReturnValue();
    SAJSONWriteDictionaryEntry(v788, @"numVnodesHardLimit", v790);

    v731 = *v1217;
    goto LABEL_766;
  }

  v794 = v731[124] - v731[123] + v779;
  objc_msgSend( *p_isa,  "printWithFormat:",  @"%-*s%.2f%% (%llu/%llu"),  18,  "Vnodes Available: ",  (double)v794 * 100.0 / (double)v779,  v794,  v779;
  v795 = *v1217;
  if (*v1217)
  {
    v796 = v795[123];
    if (v796 == v795[126]
      || (objc_msgSend(*p_isa, "printWithFormat:", @", %llu allocated", v796), (v795 = *v1217) != 0))
    {
      v797 = v795[125];
      if (v797 != v795[126]) {
        objc_msgSend(*p_isa, "printWithFormat:", @", %llu soft limit", v797);
      }
    }
  }

  [*p_isa printWithFormat:@"\n"]);
  v731 = *v1217;
  v1224 = 1;
LABEL_774:
  [v731 eventTimeRange];
  v798 = (void *)objc_claimAutoreleasedReturnValue();
  [v798 startTime];
  v799 = (void *)objc_claimAutoreleasedReturnValue();
  v800 = v799;
  if (!v799) {
    v800 = *(void **)(v1256 + 32);
  }
  obje = v800;

  [*v1217 eventTimeRange];
  v801 = (void *)objc_claimAutoreleasedReturnValue();
  [v801 endTime];
  v802 = (void *)objc_claimAutoreleasedReturnValue();
  v803 = v802;
  if (!v802) {
    v803 = *(void **)(v1256 + 40);
  }
  v1245 = v803;

  if (obje && v1245)
  {
    [*v1217 models];
    v804 = (void *)objc_claimAutoreleasedReturnValue();
    v1170 = v804;
    if (!v804)
    {
      v860 = @"%-*sUNKNOWN\n";
      goto LABEL_879;
    }

    if (![v804 count]) {
      goto LABEL_878;
    }
    v1289 = 0u;
    v1288 = 0u;
    v1287 = 0u;
    v1286 = 0u;
    v1198 = v1170;
    v1205 = [v1198 countByEnumeratingWithState:&v1286 objects:v1353 count:16];
    if (!v1205)
    {

      goto LABEL_878;
    }

    v1210 = 0;
    v1201 = *(void *)v1287;
LABEL_784:
    v1214 = 0LL;
LABEL_785:
    if (*(void *)v1287 != v1201) {
      objc_enumerationMutation(v1198);
    }
    selfb = *(id *)(*((void *)&v1286 + 1) + 8 * v1214);
    v1226 = objc_alloc_init(MEMORY[0x189603FE0]);
    [selfb loadedChanges];
    v805 = (void *)objc_claimAutoreleasedReturnValue();
    v806 = [v805 count] == 0;

    if (v806)
    {
      v1220 = 0LL;
      v1231 = 0;
      goto LABEL_835;
    }

    v807 = 0LL;
    v808 = 0LL;
    v809 = 0;
    v1231 = 0;
    while (1)
    {
      [selfb loadedChanges];
      v810 = (void *)objc_claimAutoreleasedReturnValue();
      [v810 objectAtIndexedSubscript:v807];
      v811 = (void *)objc_claimAutoreleasedReturnValue();

      v812 = [v811 loaded];
      if (v812)
      {
        if ((v809 & 1) == 0)
        {
          [v811 timestamp];
          v1220 = (void *)objc_claimAutoreleasedReturnValue();

          if (v1220)
          {
            if ([v1220 isComparable:v1245]
              && ([v1220 gt:v1245] & 1) != 0)
            {

              goto LABEL_835;
            }

            v808 = v1220;
          }

          else
          {
            v808 = 0LL;
          }
        }

        [v811 loadedRequesters];
        v821 = (void *)objc_claimAutoreleasedReturnValue();
        if (v821)
        {
          [v811 loadedRequesters];
          v822 = (void *)objc_claimAutoreleasedReturnValue();
          [v1226 addObjectsFromArray:v822];
        }

        goto LABEL_820;
      }

      if ((v809 & 1) != 0) {
        break;
      }
LABEL_819:
      [v1226 removeAllObjects];
      v821 = v808;
      v808 = 0LL;
LABEL_820:

      [selfb loadedChanges];
      v827 = (void *)objc_claimAutoreleasedReturnValue();
      v828 = [v827 count];

      ++v807;
      v809 = v812;
      if (v807 >= v828)
      {
        if (v812)
        {
          if ((v1231 & 1) == 0)
          {
            v829 = *p_isa;
            [selfb identifier];
            v830 = (void *)objc_claimAutoreleasedReturnValue();
            [v829 printWithFormat:@"%-*s%@\n", 18, "Model: ", v830];
          }

          objc_msgSend(*p_isa, "printWithFormat:", @"%-*s", 18, "  Loaded: ");
          if (v808)
          {
            *(void *)v1379 = 0LL;
            [obje deltaSecondsTo:v808 timeDomainPriorityList:&unk_189F826D8 timeDomainUsed:v1379];
            if (!*(void *)v1379) {
              v831 = NAN;
            }
            saos_printf_seconds_sigfig(*p_isa, v831);
          }

          else
          {
            [*p_isa printWithFormat:@"???"];
          }

          [*p_isa printWithFormat:@" - N/A"];
          if ([v1226 count])
          {
            [v1226 allObjects];
            v832 = (void *)objc_claimAutoreleasedReturnValue();
            v833 = (void *)[v832 mutableCopy];

            [v833 sortUsingSelector:sel_compare_];
            v834 = *p_isa;
            objc_msgSend(v833, "componentsJoinedByString:", @", ");
            v835 = (void *)objc_claimAutoreleasedReturnValue();
            [v834 printWithFormat:@", requested by %@", v835];
          }

          else
          {
            objc_msgSend(*p_isa, "printWithFormat:", @", requested by UNKNOWN");
          }

          [*p_isa printWithFormat:@"\n"];
          v1231 = 1;
        }

        v1220 = v808;
LABEL_835:
        v1285 = 0u;
        v1284 = 0u;
        v1283 = 0u;
        v1282 = 0u;
        [selfb executions];
        v836 = (void *)objc_claimAutoreleasedReturnValue();
        v837 = [v836 countByEnumeratingWithState:&v1282 objects:v1352 count:16];
        if (!v837) {
          goto LABEL_870;
        }
        v838 = *(void *)v1283;
        while (2)
        {
          v839 = 0LL;
LABEL_838:
          if (*(void *)v1283 != v838) {
            objc_enumerationMutation(v836);
          }
          v840 = *(void **)(*((void *)&v1282 + 1) + 8 * v839);
          [v840 startTime];
          v841 = (void *)objc_claimAutoreleasedReturnValue();
          v842 = [v840 endTime];
          v843 = (void *)v842;
          if (v841)
          {
            if ([v841 isComparable:v1245] && (objc_msgSend(v841, "gt:", v1245) & 1) != 0)
            {

              goto LABEL_870;
            }

            *(void *)v1379 = 0LL;
            [obje deltaSecondsTo:v841 timeDomainPriorityList:&unk_189F826F0 timeDomainUsed:v1379];
            if (*(void *)v1379) {
              v845 = v844;
            }
            else {
              v845 = NAN;
            }
            if (v843)
            {
LABEL_847:
              *(void *)v1379 = 0LL;
              [obje deltaSecondsTo:v843 timeDomainPriorityList:&unk_189F82708 timeDomainUsed:v1379];
              if (*(void *)v1379) {
                v847 = v846;
              }
              else {
                v847 = NAN;
              }
              v848 = 1;
              if (v847 < -10.0) {
                goto LABEL_866;
              }
              goto LABEL_854;
            }
          }

          else
          {
            v845 = NAN;
            if (v842) {
              goto LABEL_847;
            }
          }

          v848 = 0;
          v847 = NAN;
LABEL_854:
          if (v845 >= -10.0)
          {
            if ((v1231 & 1) == 0)
            {
              v849 = *p_isa;
              [selfb identifier];
              v850 = (void *)objc_claimAutoreleasedReturnValue();
              [v849 printWithFormat:@"%-*s%@\n", 18, "Model: ", v850];
            }

            objc_msgSend(*p_isa, "printWithFormat:", @"%-*s", 18, "  Executing: ");
            saos_printf_seconds_sigfig(*p_isa, v845);
            [*p_isa printWithFormat:@" - "];
            v851 = *p_isa;
            if (v848) {
              saos_printf_seconds_sigfig(v851, v847);
            }
            else {
              [v851 printWithFormat:@"N/A"];
            }
            v852 = *p_isa;
            v853 = [v840 requester];
            v854 = (void *)v853;
            if (v853) {
              v855 = (const __CFString *)v853;
            }
            else {
              v855 = @"UNKNOWN";
            }
            v856 = [v840 useCaseID];
            v857 = (void *)v856;
            v858 = @"UNKNOWN";
            if (v856) {
              v858 = (const __CFString *)v856;
            }
            [v852 printWithFormat:@", requested by %@ use case %@", v855, v858];

            [*p_isa printWithFormat:@"\n"];
            v1231 = 1;
          }

LABEL_866:
          if (v837 == ++v839)
          {
            v837 = [v836 countByEnumeratingWithState:&v1282 objects:v1352 count:16];
            if (v837) {
              continue;
            }
LABEL_870:

            v1210 |= v1231;
            if (++v1214 == v1205)
            {
              v859 = [v1198 countByEnumeratingWithState:&v1286 objects:v1353 count:16];
              v1205 = v859;
              if (!v859)
              {

                if ((v1210 & 1) != 0)
                {
LABEL_880:

                  v1224 = 1;
                  goto LABEL_881;
                }

LABEL_878:
                v860 = @"%-*snone\n";
LABEL_879:
                objc_msgSend(*p_isa, "printWithFormat:", v860, 18, "Models: ");
                goto LABEL_880;
              }

              goto LABEL_784;
            }

            goto LABEL_785;
          }

          goto LABEL_838;
        }
      }
    }

    [v811 timestamp];
    v813 = (void *)objc_claimAutoreleasedReturnValue();
    if (v813)
    {
      *(void *)v1379 = 0LL;
      [obje deltaSecondsTo:v813 timeDomainPriorityList:&unk_189F826A8 timeDomainUsed:v1379];
      if (*(void *)v1379) {
        v815 = v814;
      }
      else {
        v815 = NAN;
      }
      if (v815 < -10.0) {
        goto LABEL_818;
      }
    }

    else
    {
      [selfb loadedChanges];
      v816 = (void *)objc_claimAutoreleasedReturnValue();
      v817 = v807 < [v816 count] - 1;

      if (v817)
      {
LABEL_818:

        goto LABEL_819;
      }

      v815 = NAN;
    }

    if ((v1231 & 1) == 0)
    {
      v818 = *p_isa;
      [selfb identifier];
      v819 = (void *)objc_claimAutoreleasedReturnValue();
      [v818 printWithFormat:@"%-*s%@\n", 18, "Model: ", v819];
    }

    objc_msgSend(*p_isa, "printWithFormat:", @"%-*s", 18, "  Loaded: ");
    if (v808)
    {
      *(void *)v1379 = 0LL;
      [obje deltaSecondsTo:v808 timeDomainPriorityList:&unk_189F826C0 timeDomainUsed:v1379];
      if (!*(void *)v1379) {
        v820 = NAN;
      }
      saos_printf_seconds_sigfig(*p_isa, v820);
    }

    else
    {
      [*p_isa printWithFormat:@"???"];
    }

    [*p_isa printWithFormat:@" - "];
    saos_printf_seconds_sigfig(*p_isa, v815);
    if ([v1226 count])
    {
      [v1226 allObjects];
      v823 = (void *)objc_claimAutoreleasedReturnValue();
      v824 = (void *)[v823 mutableCopy];

      [v824 sortUsingSelector:sel_compare_];
      v825 = *p_isa;
      objc_msgSend(v824, "componentsJoinedByString:", @", ");
      v826 = (void *)objc_claimAutoreleasedReturnValue();
      [v825 printWithFormat:@", requested by %@", v826];
    }

    else
    {
      objc_msgSend(*p_isa, "printWithFormat:", @", requested by UNKNOWN");
    }

    [*p_isa printWithFormat:@"\n"];
    v1231 = 1;
    goto LABEL_818;
  }

LABEL_881:
  if (((v1208 | v1224 ^ 1) & 1) == 0) {
    [*p_isa printWithFormat:@"\n"];
  }
LABEL_883:
  v1278 = 0LL;
  v1279 = &v1278;
  v1280 = 0x2020000000LL;
  v1281 = 0;
  v861 = *p_isa;
  [*v1217 targetProcess];
  v862 = v1256;
  v863 = (void *)objc_claimAutoreleasedReturnValue();
  if (v863)
  {
    v864 = objc_alloc_init(MEMORY[0x189603FA8]);
    if (-[SASamplePrinter taskHasSwallowedAnExceptionNotedByHIException:](v1256, v863))
    {
      v865 = -[SASamplePrinter displayNameForTask:]((void *)v1256, v863);
      [v864 addObject:v865];

      v862 = v1256;
    }

    v866 = [v863 pid];
    if (v866 >= 2)
    {
      v867 = *(void **)(v862 + 160);
      *(void *)v1379 = MEMORY[0x1895F87A8];
      *(void *)&v1379[8] = 3221225472LL;
      *(void *)&v1379[16] = __60__SASamplePrinter_printProcessesWithHIESwallowedExceptions___block_invoke;
      *(void *)&v1379[24] = &unk_189F63818;
      v868 = v863;
      *(_DWORD *)&v1380[24] = v866;
      *(void *)v1380 = v868;
      *(void *)&v1380[8] = v862;
      *(void *)&v1380[16] = v864;
      [v867 enumerateTasks:v1379];
    }

    if ([v864 count])
    {
      objc_msgSend(v864, "componentsJoinedByString:", @", ");
      v869 = (void *)objc_claimAutoreleasedReturnValue();
      [v861 printWithFormat:@"%-*s%@\n", 18, "Target/responsible processes that have swallowed at least one exception: ", v869];

      *((_BYTE *)v1279 + 24) = 1;
    }

    else
    {
    }
  }

  else
  {
  }

  v1206 = *(id *)(v1256 + 8);
  v1246 = -[SASamplePrinter hasTimeIndexes](v1256);
  v1202 = [*v1217 dataStyle] != 1 && objc_msgSend(*v1217, "dataStyle") != 0;
  objf = objc_alloc_init(MEMORY[0x189603FC8]);
  v1350 = 0u;
  v1349 = 0u;
  v1348 = 0u;
  v1347 = 0u;
  [*v1217 tasksByPid];
  v870 = (void *)objc_claimAutoreleasedReturnValue();
  [v870 objectForKeyedSubscript:&unk_189F82370];
  v1211 = (id)objc_claimAutoreleasedReturnValue();

  v1221 = [v1211 countByEnumeratingWithState:&v1347 objects:v1379 count:16];
  if (v1221)
  {
    v1215 = *(void *)v1348;
    do
    {
      for (kk = 0LL; kk != (id)v1221; kk = (char *)kk + 1)
      {
        if (*(void *)v1348 != v1215) {
          objc_enumerationMutation(v1211);
        }
        v871 = *(void **)(*((void *)&v1347 + 1) + 8LL * (void)kk);
        v1343 = 0u;
        v1344 = 0u;
        v1345 = 0u;
        v1346 = 0u;
        [v871 threads];
        v872 = (void *)objc_claimAutoreleasedReturnValue();
        [v872 allKeys];
        v873 = (void *)objc_claimAutoreleasedReturnValue();
        [v873 sortedArrayUsingSelector:sel_compare_];
        selfc = (id)objc_claimAutoreleasedReturnValue();

        v874 = [selfc countByEnumeratingWithState:&v1343 objects:&v1375 count:16];
        if (v874)
        {
          v875 = *(void *)v1344;
          do
          {
            for (mm = 0LL; mm != v874; ++mm)
            {
              if (*(void *)v1344 != v875) {
                objc_enumerationMutation(selfc);
              }
              v877 = *(void *)(*((void *)&v1343 + 1) + 8 * mm);
              [v871 threads];
              v878 = (void *)objc_claimAutoreleasedReturnValue();
              [v878 objectForKeyedSubscript:v877];
              v879 = (void *)objc_claimAutoreleasedReturnValue();

              v1341[0] = 0LL;
              v1341[1] = v1341;
              v1341[2] = 0x3032000000LL;
              v1341[3] = __Block_byref_object_copy__4;
              v1341[4] = __Block_byref_object_dispose__4;
              v1342 = 0LL;
              v1339[0] = 0LL;
              v1339[1] = v1339;
              v1339[2] = 0x3032000000LL;
              v1339[3] = __Block_byref_object_copy__4;
              v1339[4] = __Block_byref_object_dispose__4;
              v1340 = 0LL;
              v880 = *(void *)(v1256 + 32);
              v881 = *(void *)(v1256 + 40);
              v883 = *(void *)(v1256 + 48);
              v882 = *(void *)(v1256 + 56);
              *(void *)&buf = MEMORY[0x1895F87A8];
              *((void *)&buf + 1) = 3221225472LL;
              v1368 = (uint64_t)__58__SASamplePrinter_printLaunchdThrottledProcessesToStream___block_invoke;
              v1369 = &unk_189F63840;
              v1374 = v1246;
              v1370 = v1256;
              v1372 = v1341;
              v1373 = v1339;
              v1371 = objf;
              [v879 enumerateThreadStatesBetweenStartTime:v880 startSampleIndex:v883 endTime:v881 endSampleIndex:v882 reverseOrder:0 block:&buf];

              _Block_object_dispose(v1339, 8);
              _Block_object_dispose(v1341, 8);
            }

            v874 = [selfc countByEnumeratingWithState:&v1343 objects:&v1375 count:16];
          }

          while (v874);
        }
      }

      v1221 = [v1211 countByEnumeratingWithState:&v1347 objects:v1379 count:16];
    }

    while (v1221);
  }

  if ([objf count])
  {
    [v1206 printWithFormat:@"Launchd throttled processes:\n"];
    v1335[0] = MEMORY[0x1895F87A8];
    v1335[1] = 3221225472LL;
    v1335[2] = __58__SASamplePrinter_printLaunchdThrottledProcessesToStream___block_invoke_2;
    v1335[3] = &unk_189F63868;
    v1337 = v1202;
    v1338 = v1246;
    v1335[4] = v1256;
    v884 = v1206;
    v1336 = v884;
    [objf enumerateKeysAndObjectsUsingBlock:v1335];

    *((_BYTE *)v1279 + 24) = 1;
  }

  else
  {
  }

  v885 = *p_isa;
  v886 = objc_alloc_init(MEMORY[0x189603FA8]);
  v887 = objc_alloc_init(MEMORY[0x189603FA8]);
  v888 = *(void **)(v1256 + 160);
  *(void *)v1379 = MEMORY[0x1895F87A8];
  *(void *)&v1379[8] = 3221225472LL;
  *(void *)&v1379[16] = __63__SASamplePrinter_printProcessesHittingWQThreadLimitsToStream___block_invoke;
  *(void *)&v1379[24] = &unk_189F63890;
  *(void *)v1380 = v1256;
  v889 = v886;
  *(void *)&v1380[8] = v889;
  v890 = v887;
  *(void *)&v1380[16] = v890;
  [v888 enumerateTasks:v1379];
  if ([v889 count])
  {
    v891 = [*v1217 workQueueHardThreadLimit];
    objc_msgSend(v889, "componentsJoinedByString:", @", ");
    v892 = (void *)objc_claimAutoreleasedReturnValue();
    [v885 printWithFormat:@"Processes reached dispatch thread hard limit (%u): %@\n", v891, v892];
  }

  if ([v890 count])
  {
    v893 = [*v1217 workQueueSoftThreadLimit];
    objc_msgSend(v890, "componentsJoinedByString:", @", ");
    v894 = (void *)objc_claimAutoreleasedReturnValue();
    [v885 printWithFormat:@"Processes reached dispatch thread soft limit (%u): %@\n", v893, v894];
  }

  v895 = [v889 count];
  v896 = [v890 count];

  if (v895 + v896) {
    *((_BYTE *)v1279 + 24) = 1;
  }
  v897 = objc_alloc_init(MEMORY[0x189603FE0]);
  v898 = objc_alloc_init(MEMORY[0x189603FE0]);
  v899 = *(void **)(v1256 + 144);
  v1274[0] = MEMORY[0x1895F87A8];
  v1274[1] = 3221225472LL;
  v1274[2] = __30__SASamplePrinter_printHeader__block_invoke_4;
  v1274[3] = &unk_189F63908;
  v1274[4] = v1256;
  v1227 = v898;
  v1275 = v1227;
  v1216 = v897;
  v1276 = v1216;
  v1277 = &v1278;
  [v899 enumerateKeysAndObjectsUsingBlock:v1274];
  if ([v1227 count])
  {
    v900 = *p_isa;
    v901 = [v1227 count];
    if ([v1227 count] == 1) {
      v902 = "";
    }
    else {
      v902 = "s";
    }
    [v1227 allObjects];
    v903 = (void *)objc_claimAutoreleasedReturnValue();
    [v903 sortedArrayUsingSelector:sel_compare_];
    v904 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v904, "componentsJoinedByString:", @", ");
    v905 = (void *)objc_claimAutoreleasedReturnValue();
    [v900 printWithFormat:@"%-*s%lu task%s - %@\n", 18, "Blocked by Deadlock: ", v901, v902, v905];
  }

  if ((v1208 & 1) == 0 && *((_BYTE *)v1279 + 24)) {
    [*p_isa printWithFormat:@"\n"];
  }
  if ([*v1217 appleInternalIsKnown])
  {
    if (v1208)
    {
      v906 = *p_isa;
      else {
        v907 = (void *)MEMORY[0x189604A80];
      }
      SAJSONWriteDictionaryEntry(v906, @"isAppleInternal", v907);
    }

    else if ([*v1217 isAppleInternal])
    {
      v908 = *p_isa;
      else {
        v909 = "No";
      }
      objc_msgSend(v908, "printWithFormat:", @"%-*s%s\n", 18, "Apple Internal: ", v909);
    }

    if ([*v1217 isAppleInternal]
      && [*v1217 hasInternalCarryDeviceDistinction])
    {
      v910 = *p_isa;
      v911 = *v1217;
      if (v1208)
      {
        else {
          v912 = (void *)MEMORY[0x189604A80];
        }
        SAJSONWriteDictionaryEntry(v910, @"isInternalCarryDevice", v912);
      }

      else
      {
        else {
          v913 = "No";
        }
        objc_msgSend(v910, "printWithFormat:", @"%-*s%s\n", 18, "Internal Carry Device: ", v913);
      }
    }
  }

  [*v1217 automatedDeviceGroup];
  v914 = (void *)objc_claimAutoreleasedReturnValue();

  if (v914)
  {
    v915 = *p_isa;
    [*v1217 automatedDeviceGroup];
    v916 = (void *)objc_claimAutoreleasedReturnValue();
    if (v1208)
    {
      SAJSONWriteDictionaryEntry(v915, @"automatedDeviceGroup", v916);
    }

    else
    {
      SACopySanitizedString(v916, 1, 0xFFuLL);
      v917 = (void *)objc_claimAutoreleasedReturnValue();
      [v915 printWithFormat:@"%-*s%@\n", 18, "Automated Device Group: ", v917];
    }
  }

  [*v1217 nonDefaultFeatureFlags];
  v918 = (void *)objc_claimAutoreleasedReturnValue();

  if (v918)
  {
    if (v1208)
    {
      [*v1217 nonDefaultFeatureFlags];
      v919 = (void *)objc_claimAutoreleasedReturnValue();
      v1273[0] = MEMORY[0x1895F87A8];
      v1273[1] = 3221225472LL;
      v1273[2] = __30__SASamplePrinter_printHeader__block_invoke_5;
      v1273[3] = &unk_189F638E0;
      v1273[4] = v1256;
      [v919 enumerateKeysAndObjectsUsingBlock:v1273];
    }

    else
    {
      v920 = objc_alloc_init(MEMORY[0x189607940]);
      v921 = objc_alloc_init(MEMORY[0x189607940]);
      [*v1217 nonDefaultFeatureFlags];
      v922 = (void *)objc_claimAutoreleasedReturnValue();
      v1270[0] = MEMORY[0x1895F87A8];
      v1270[1] = 3221225472LL;
      v1270[2] = __30__SASamplePrinter_printHeader__block_invoke_6;
      v1270[3] = &unk_189F63930;
      v923 = v920;
      v1271 = v923;
      v924 = v921;
      v1272 = v924;
      [v922 enumerateKeysAndObjectsUsingBlock:v1270];

      if ([v923 length])
      {
        if (objc_msgSend(v923, "hasSuffix:", @", "))
        {
          v925 = objc_msgSend(@", ", "length");
          objc_msgSend( v923,  "replaceCharactersInRange:withString:",  objc_msgSend(v923, "length") - v925,  v925,  &stru_189F64BD8);
        }

        [*p_isa printWithFormat:@"%-*s%@\n", 18, "Enabled Features: ", v923];
      }

      if ([v924 length])
      {
        if (objc_msgSend(v924, "hasSuffix:", @", "))
        {
          v926 = objc_msgSend(@", ", "length");
          objc_msgSend( v924,  "replaceCharactersInRange:withString:",  objc_msgSend(v924, "length") - v926,  v926,  &stru_189F64BD8);
        }

        [*p_isa printWithFormat:@"%-*s%@\n", 18, "Disabled Features: ", v924];
      }
    }
  }

  [*v1217 preferredLanguages];
  v927 = (void *)objc_claimAutoreleasedReturnValue();

  if (v927)
  {
    if (v1208)
    {
      v928 = *p_isa;
      [*v1217 preferredLanguages];
      v929 = (void *)objc_claimAutoreleasedReturnValue();
      SAJSONWriteDictionaryEntry(v928, @"preferredLanguages", v929);
    }

    else
    {
      [*v1217 preferredLanguages];
      v930 = (void *)objc_claimAutoreleasedReturnValue();
      v929 = v930;
      if (v930)
      {
        objc_msgSend(v930, "componentsJoinedByString:", @", ");
        v931 = (void *)objc_claimAutoreleasedReturnValue();
        SACopySanitizedString(v931, 1, 0LL);
        v932 = (void *)objc_claimAutoreleasedReturnValue();

        [*p_isa printWithFormat:@"%-*s%@\n", 18, "Preferred User Language: ", v932];
      }

      else
      {
        v933 = *__error();
        _sa_logt();
        v934 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v934, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)v1379 = 0;
          _os_log_debug_impl(&dword_186C92000, v934, OS_LOG_TYPE_DEBUG, "preferredLang nil!", v1379, 2u);
        }

        v929 = 0LL;
        *__error() = v933;
      }
    }
  }

  [*v1217 countryCode];
  v935 = (void *)objc_claimAutoreleasedReturnValue();

  if (v935)
  {
    if (v1208)
    {
      v936 = *p_isa;
      [*v1217 countryCode];
      v937 = (void *)objc_claimAutoreleasedReturnValue();
      SAJSONWriteDictionaryEntry(v936, @"countryCode", v937);
    }

    else
    {
      [*v1217 countryCode];
      v938 = (void *)objc_claimAutoreleasedReturnValue();
      v939 = v938;
      if (v938)
      {
        [v938 stringByReplacingOccurrencesOfString:@" " withString:&stru_189F64BD8];
        v940 = (void *)objc_claimAutoreleasedReturnValue();

        [v940 stringByReplacingOccurrencesOfString:@"\t" withString:&stru_189F64BD8];
        v941 = (void *)objc_claimAutoreleasedReturnValue();

        SACopySanitizedString(v941, 1, 0LL);
        v937 = (void *)objc_claimAutoreleasedReturnValue();

        [*p_isa printWithFormat:@"%-*s%@\n", 18, "Country Code: ", v937];
      }

      else
      {
        v942 = *__error();
        _sa_logt();
        v943 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v943, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)v1379 = 0;
          _os_log_debug_impl(&dword_186C92000, v943, OS_LOG_TYPE_DEBUG, "countryCode nil!", v1379, 2u);
        }

        v937 = 0LL;
        *__error() = v942;
      }
    }
  }

  [*v1217 keyboardLanguages];
  v944 = (void *)objc_claimAutoreleasedReturnValue();
  v945 = [v944 count] == 0;

  if (!v945)
  {
    if (v1208)
    {
      v946 = *p_isa;
      [*v1217 keyboardLanguages];
      v947 = (void *)objc_claimAutoreleasedReturnValue();
      SAJSONWriteDictionaryEntry(v946, @"keyboardLanguages", v947);
    }

    else
    {
      [*v1217 keyboardLanguages];
      v948 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v948, "componentsJoinedByString:", @", ");
      v949 = (void *)objc_claimAutoreleasedReturnValue();

      if (v949)
      {
        SACopySanitizedString(v949, 1, 0LL);
        v947 = (void *)objc_claimAutoreleasedReturnValue();

        [*p_isa printWithFormat:@"%-*s%@\n", 18, "Keyboards: ", v947];
      }

      else
      {
        v950 = *__error();
        _sa_logt();
        v951 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v951, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)v1379 = 0;
          _os_log_debug_impl(&dword_186C92000, v951, OS_LOG_TYPE_DEBUG, "keyboardLang nil!", v1379, 2u);
        }

        v947 = 0LL;
        *__error() = v950;
      }
    }
  }

  v952 = v1256;
  if ([*v1217 hasHardwareKeyboardInfo])
  {
    if (v1208)
    {
      v953 = *p_isa;
      else {
        v954 = (void *)MEMORY[0x189604A80];
      }
      SAJSONWriteDictionaryEntry(v953, @"hardwareKeyboard", v954);
    }

    else if ([*v1217 hardwareKeyboard])
    {
      v955 = *p_isa;
      else {
        v956 = "No";
      }
      objc_msgSend(v955, "printWithFormat:", @"%-*s%s\n", 18, "HW Keyboard: ", v956);
    }
  }

  if ([*v1217 isRootInstalled])
  {
    if (v1208)
    {
      SAJSONWriteDictionaryEntry(*p_isa, @"isRootInstalled", MEMORY[0x189604A88]);
      [*v1217 installedRootNames];
      v957 = (void *)objc_claimAutoreleasedReturnValue();
      v958 = [v957 count] == 0;

      v952 = v1256;
      if (v958) {
        goto LABEL_1015;
      }
      v959 = *p_isa;
      [*v1217 installedRootNames];
      v960 = (void *)objc_claimAutoreleasedReturnValue();
      SAJSONWriteDictionaryEntry(v959, @"installedRootNames", v960);
    }

    else
    {
      [*v1217 installedRootNames];
      v961 = (void *)objc_claimAutoreleasedReturnValue();
      v962 = [v961 count] == 0;

      if (v962
        || ([*v1217 installedRootNames],
            v963 = (void *)objc_claimAutoreleasedReturnValue(),
            objc_msgSend(v963, "componentsJoinedByString:", @", "),
            v964 = (void *)objc_claimAutoreleasedReturnValue(),
            v963,
            !v964))
      {
        v960 = 0LL;
      }

      else
      {
        SACopySanitizedString(v964, 1, 0LL);
        v960 = (void *)objc_claimAutoreleasedReturnValue();
      }

      v965 = [v960 length];
      v966 = *p_isa;
      if (v965) {
        [v966 printWithFormat:@"%-*s%@\n", 18, "Installed Roots: ", v960];
      }
      else {
        objc_msgSend(v966, "printWithFormat:", @"%-*sYes\n", 18, "Installed Roots: ");
      }
    }

    v952 = v1256;
  }

LABEL_1015:
  if ([*v1217 numOSCryptexFileExtents])
  {
    v967 = *p_isa;
    if (v1208)
    {
      objc_msgSend(MEMORY[0x189607968], "numberWithInteger:", objc_msgSend(*v1217, "numOSCryptexFileExtents"));
      v968 = (void *)objc_claimAutoreleasedReturnValue();
      SAJSONWriteDictionaryEntry(v967, @"numOSCryptexFileExtents", v968);

      v952 = v1256;
    }

    else
    {
      objc_msgSend( v967,  "printWithFormat:",  @"%-*s%d\n",  18,  "OS Cryptex File Extents: ",  objc_msgSend(*v1217, "numOSCryptexFileExtents"));
    }
  }

  if ([*v1217 gpuRestartCount])
  {
    v969 = *p_isa;
    if (v1208)
    {
      objc_msgSend(MEMORY[0x189607968], "numberWithUnsignedLongLong:", objc_msgSend(*v1217, "gpuRestartCount"));
      v970 = (void *)objc_claimAutoreleasedReturnValue();
      SAJSONWriteDictionaryEntry(v969, @"gpuRestartCount", v970);

      v952 = v1256;
    }

    else
    {
      objc_msgSend( v969,  "printWithFormat:",  @"%-*s%llu\n",  18,  "GPU Restart Count: ",  objc_msgSend(*v1217, "gpuRestartCount"));
    }

    if ([*v1217 gpuRestartLastMachAbs])
    {
      if (v1208)
      {
        v971 = *p_isa;
        objc_msgSend(MEMORY[0x189607968], "numberWithUnsignedLongLong:", objc_msgSend(*v1217, "gpuRestartLastMachAbs"));
        v972 = (void *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v971, @"gpuRestartLastMachAbs", v972);

        v952 = v1256;
      }

      else if ([*v1217 machTimebase] {
             && (unint64_t)[*v1217 machTimebase] >> 32
      }
             && [*(id *)(v952 + 32) machAbsTime])
      {
        v973 = [*v1217 gpuRestartLastMachAbs];
        if (v973 >= [*(id *)(v952 + 32) machAbsTime])
        {
          v982 = [*v1217 gpuRestartLastMachAbs];
          v983 = [*(id *)(v952 + 32) machAbsTime];
          v984 = [*v1217 machTimebase];
          v985 = 0LL;
          if ((_DWORD)v984)
          {
            if (HIDWORD(v984))
            {
              v985 = v982 - v983;
              if ((_DWORD)v984 != HIDWORD(v984)) {
                v985 = __udivti3();
              }
            }
          }

          v978 = (double)(unint64_t)v985 / -1000000000.0 + 0.0;
        }

        else
        {
          v974 = [*(id *)(v952 + 32) machAbsTime];
          v975 = [*v1217 gpuRestartLastMachAbs];
          v976 = [*v1217 machTimebase];
          v977 = 0LL;
          if ((_DWORD)v976)
          {
            if (HIDWORD(v976))
            {
              v977 = v974 - v975;
              if ((_DWORD)v976 != HIDWORD(v976)) {
                v977 = __udivti3();
              }
            }
          }

          v978 = (double)(unint64_t)v977 / 1000000000.0;
        }

        objc_msgSend( *p_isa,  "printWithFormat:",  @"%-*s%.0fs\n",  18,  "Time Since GPU Restart: ",  *(void *)&v978);
      }
    }
  }

  if ([*v1217 hasEnterprisePersona])
  {
    v986 = *p_isa;
    if (v1208)
    {
      SAJSONWriteDictionaryEntry(v986, @"hasEnterprisePersona", MEMORY[0x189604A88]);
      goto LABEL_1063;
    }

    objc_msgSend(v986, "printWithFormat:", @"%-*sYes\n", 18, "Has Enterprise Persona: ");
  }

  else if ((v1208 & 1) != 0)
  {
    goto LABEL_1063;
  }

  else {
    v987 = 0;
  }
  *(void *)v1379 = 0LL;
  *(void *)&v1379[8] = v1379;
  *(void *)&v1379[16] = 0x2020000000LL;
  v1379[24] = 0;
  [*v1217 mountStatusTracker];
  v988 = (void *)objc_claimAutoreleasedReturnValue();
  v989 = *(void **)(v952 + 32);
  v990 = *(void **)(v952 + 40);
  v1268[0] = MEMORY[0x1895F87A8];
  v1268[1] = 3221225472LL;
  v1268[2] = __30__SASamplePrinter_printHeader__block_invoke_872;
  v1268[3] = &unk_189F63998;
  v1269 = v987;
  v1268[4] = v952;
  v1268[5] = v1379;
  -[SAMountStatusTracker enumerateUnresponsiveMountsBetweenStartTime:endTime:block:]((uint64_t)v988, v989, v990, v1268);

  v952 = v1256;
  if (*(_BYTE *)(*(void *)&v1379[8] + 24LL)) {
    [*p_isa appendString:@"\n"];
  }
  _Block_object_dispose(v1379, 8);
  v991 = v1208;
  if (!*(void *)(v1256 + 168)) {
    v991 = 1;
  }
  if ((v991 & 1) == 0) {
    [*p_isa printWithFormat:@"\n%@\n\n", *(void *)(v1256 + 168)];
  }
LABEL_1063:
  if ([*(id *)(v952 + 16) printSpinSignatureStack])
  {
    v992 = *(void **)(v952 + 128);
    if (v992) {
      goto LABEL_1065;
    }
    if (([*v1217 targetProcessId] & 0x80000000) == 0)
    {
      v992 = *(void **)(v952 + 128);
      if (!v992)
      {
        [*v1217 targetProcess];
        v993 = (id)objc_claimAutoreleasedReturnValue();

        v952 = v1256;
        if (!v993) {
          goto LABEL_1130;
        }
LABEL_1066:
        if (*(void *)(v952 + 128))
        {
          v994 = *(id *)(v952 + 136);
          v995 = v994;
          if (!v994)
          {
            v997 = 0LL;
LABEL_1129:

            v952 = v1256;
            goto LABEL_1130;
          }

          v996 = [v994 isMainThread];
          goto LABEL_1069;
        }

        if ([*v1217 targetThreadId])
        {
          [v993 threads];
          v999 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x189607968], "numberWithUnsignedLongLong:", objc_msgSend(*v1217, "targetThreadId"));
          v1000 = (void *)objc_claimAutoreleasedReturnValue();
          [v999 objectForKeyedSubscript:v1000];
          v995 = (void *)objc_claimAutoreleasedReturnValue();

          if (v995)
          {
            v952 = v1256;
            v996 = [v995 isMainThread];
            v998 = 1;
          }

          else
          {
            v1001 = *__error();
            _sa_logt();
            v1002 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v1002, OS_LOG_TYPE_DEFAULT))
            {
              v1003 = [*v1217 targetThreadId];
              *(_DWORD *)v1379 = 134217984;
              *(void *)&v1379[4] = v1003;
              _os_log_impl( &dword_186C92000,  v1002,  OS_LOG_TYPE_DEFAULT,  "WARNING: Target thread 0x%llx not found",  v1379,  0xCu);
            }

            v998 = 0;
            v996 = 0;
            v995 = 0LL;
            *__error() = v1001;
            v952 = v1256;
          }
        }

        else
        {
          v998 = 0;
          v996 = 0;
          v995 = 0LL;
        }

        if ([*v1217 targetDispatchQueueId])
        {
          [v993 dispatchQueues];
          v1004 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend( MEMORY[0x189607968],  "numberWithUnsignedLongLong:",  objc_msgSend(*v1217, "targetDispatchQueueId"));
          v1005 = (void *)objc_claimAutoreleasedReturnValue();
          [v1004 objectForKeyedSubscript:v1005];
          v997 = (void *)objc_claimAutoreleasedReturnValue();

          if (v997)
          {
            v998 = 1;
            v952 = v1256;
            goto LABEL_1090;
          }

          v1006 = *__error();
          _sa_logt();
          v1007 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v1007, OS_LOG_TYPE_DEFAULT))
          {
            v1008 = [*v1217 targetDispatchQueueId];
            *(_DWORD *)v1379 = 134217984;
            *(void *)&v1379[4] = v1008;
            _os_log_impl( &dword_186C92000,  v1007,  OS_LOG_TYPE_DEFAULT,  "WARNING: Target dispatch queue %llu not found",  v1379,  0xCu);
          }

          v952 = v1256;
          *__error() = v1006;
        }

        if (!v995)
        {
          v1020 = *(void *)(v952 + 16);
          if (v1020)
          {
            v1021 = *(void *)(v1020 + 152);
            if (v1021 == 3 || !v1021 && *(_BYTE *)(v1020 + 11))
            {
              v995 = 0LL;
LABEL_1069:
              v997 = 0LL;
              v998 = 1;
              goto LABEL_1090;
            }
          }

          if (![*v1217 targetThreadId])
          {
            [v993 mainThread];
            v995 = (void *)objc_claimAutoreleasedReturnValue();
            if (v995)
            {
              v997 = 0LL;
              v998 = 1;
              v996 = 1;
            }

            else
            {
              v1147 = *__error();
              _sa_logt();
              v1148 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v1148, OS_LOG_TYPE_DEFAULT))
              {
                -[SASamplePrinter displayNameForTask:]((void *)v1256, v993);
                v1149 = (id)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)v1379 = 138412290;
                *(void *)&v1379[4] = v1149;
                _os_log_impl( &dword_186C92000,  v1148,  OS_LOG_TYPE_DEFAULT,  "WARNING: Signature stack requested, but target process %@ doesn't have a main thread",  v1379,  0xCu);
              }

              v952 = v1256;
              v995 = 0LL;
              v997 = 0LL;
              *__error() = v1147;
            }

LABEL_1090:
            if (((v1208 | v998 ^ 1) & 1) == 0)
            {
              [*p_isa appendString:@"\n"];
              v1009 = objc_alloc_init(MEMORY[0x189603FA8]);
              v1010 = *p_isa;
              if (v997)
              {
                if (v995)
                {
                  v1011 = -[SASamplePrinter displayNameForDispatchQueue:](v997);
                  [v1010 printWithFormat:@"Heaviest stack for dispatch queue %@ thread 0x%llx:\n", v1011, objc_msgSend(v995, "threadId")];

                  v1012 = objc_alloc_init(MEMORY[0x189603FA8]);
                  *(void *)v1379 = 0LL;
                  *(void *)&v1379[8] = v1379;
                  *(void *)&v1379[16] = 0x2020000000LL;
                  v1379[24] = 1;
                  v1013 = *(void *)(v1256 + 32);
                  v1014 = *(void *)(v1256 + 40);
                  v1015 = *(void *)(v1256 + 48);
                  v1016 = *(void *)(v1256 + 56);
                  v1264[0] = MEMORY[0x1895F87A8];
                  v1264[1] = 3221225472LL;
                  v1264[2] = __30__SASamplePrinter_printHeader__block_invoke_894;
                  v1264[3] = &unk_189F639C0;
                  v1265 = v997;
                  v1017 = v1012;
                  v1266 = v1017;
                  v1267 = v1379;
                  [v995 enumerateThreadStatesBetweenStartTime:v1013 startSampleIndex:v1015 endTime:v1014 endSampleIndex:v1016 reverseOrder:0 block:v1264];
                  if ([v1017 count])
                  {
                    if (*(_BYTE *)(*(void *)&v1379[8] + 24LL)) {
                      v1018 = 0LL;
                    }
                    else {
                      v1018 = v1017;
                    }
                    -[SASamplePrinter addStackForDispatchQueue:orSwiftTaskStates:orThread:andThreadStateIndexes:task:toRootObjects:nameChanges:dispatchQueueChanges:swiftTaskChanges:threadChanges:priorityChanges:microstackshotSummary:onlyHeaviestStack:includeState:]( v1256,  0LL,  0LL,  v995,  v1018,  v993,  v1009,  0,  0,  0,  0,  0,  0LL,  1u,  0);
                  }

                  _Block_object_dispose(v1379, 8);
                }

                else
                {
                  v1019 = -[SASamplePrinter displayNameForDispatchQueue:](v997);
                  [v1010 printWithFormat:@"Heaviest stack for dispatch queue %@:\n", v1019];

                  -[SASamplePrinter addStackForDispatchQueue:orSwiftTaskStates:orThread:andThreadStateIndexes:task:toRootObjects:nameChanges:dispatchQueueChanges:swiftTaskChanges:threadChanges:priorityChanges:microstackshotSummary:onlyHeaviestStack:includeState:]( v1256,  v997,  0LL,  0LL,  0LL,  v993,  v1009,  0,  0,  0,  0,  0,  0LL,  1u,  0);
                }
              }

              else if (v995)
              {
                if (v996) {
                  [*p_isa appendString:@"Heaviest stack for the main thread of the target process:\n"];
                }
                else {
                  objc_msgSend( v1010,  "printWithFormat:",  @"Heaviest stack for thread 0x%llx:\n",  objc_msgSend(v995, "threadId"));
                }
                -[SASamplePrinter addStackForDispatchQueue:orSwiftTaskStates:orThread:andThreadStateIndexes:task:toRootObjects:nameChanges:dispatchQueueChanges:swiftTaskChanges:threadChanges:priorityChanges:microstackshotSummary:onlyHeaviestStack:includeState:]( v952,  0LL,  0LL,  v995,  0LL,  v993,  v1009,  0,  0,  0,  0,  0,  0LL,  1u,  0);
              }

              else
              {
                [*p_isa appendString:@"Heaviest stack for the target process:\n"];
                [v993 threads];
                v1022 = (void *)objc_claimAutoreleasedReturnValue();
                v1261[0] = MEMORY[0x1895F87A8];
                v1261[1] = 3221225472LL;
                v1261[2] = __30__SASamplePrinter_printHeader__block_invoke_2_903;
                v1261[3] = &unk_189F644D8;
                v1261[4] = v952;
                v1262 = v993;
                v1263 = v1009;
                [v1022 enumerateKeysAndObjectsUsingBlock:v1261];
              }

              if ([v1009 count])
              {
                v1259 = 0u;
                v1260 = 0u;
                v1257 = 0u;
                v1258 = 0u;
                v1023 = v1009;
                v1024 = (id)[v1023 countByEnumeratingWithState:&v1257 objects:v1351 count:16];
                if (v1024)
                {
                  v1025 = *(void *)v1258;
                  while (2)
                  {
                    for (nn = 0LL; nn != v1024; nn = (char *)nn + 1)
                    {
                      if (*(void *)v1258 != v1025) {
                        objc_enumerationMutation(v1023);
                      }
                      v1027 = *(void **)(*((void *)&v1257 + 1) + 8LL * (void)nn);
                      objc_opt_class();
                      if ((objc_opt_isKindOfClass() & 1) != 0)
                      {
                        v1024 = v1027;
                        goto LABEL_1122;
                      }
                    }

                    v1024 = (id)[v1023 countByEnumeratingWithState:&v1257 objects:v1351 count:16];
                    if (v1024) {
                      continue;
                    }
                    break;
                  }
                }

LABEL_1122:
                v1028 = *p_isa;
                v1029 = [v1024 sampleCount];
                v1030 = -[SASamplePrinter binaryImagesHitByTask:](v1256, v993);
                -[SASamplePrinter addStack:toStream:sampleCount:binariesToDisplay:primaryState:primaryMicrostackshotState:onlyHeaviestStack:]( v1256,  v1023,  v1028,  v1029,  v1030,  0LL,  0,  1);

                v1031 = v1256;
              }

              else
              {
                v1032 = *__error();
                _sa_logt();
                v1033 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v1033, OS_LOG_TYPE_ERROR))
                {
                  -[SASamplePrinter displayNameForTask:]((void *)v1256, v993);
                  v1144 = (id)objc_claimAutoreleasedReturnValue();
                  -[SASamplePrinter displayNameForDispatchQueue:](v997);
                  v1145 = (id)objc_claimAutoreleasedReturnValue();
                  v1146 = [v995 threadId];
                  *(_DWORD *)v1379 = 138412802;
                  *(void *)&v1379[4] = v1144;
                  *(_WORD *)&v1379[12] = 2112;
                  *(void *)&v1379[14] = v1145;
                  *(_WORD *)&v1379[22] = 2048;
                  *(void *)&v1379[24] = v1146;
                  _os_log_error_impl( &dword_186C92000,  v1033,  OS_LOG_TYPE_ERROR,  "No heaviest callstack for %@, dispatch queue %@, thread 0x%llx",  v1379,  0x20u);
                }

                v1031 = v1256;
                *__error() = v1032;
              }

              if (([*(id *)(v1031 + 16) displayBody] & 1) == 0)
              {
                -[SASamplePrinter printBinaryImagesForTask:](v1031, v993);
                *(_BYTE *)(v1031 + 105) = 1;
              }
            }

            goto LABEL_1129;
          }

          v995 = 0LL;
        }

        v997 = 0LL;
        goto LABEL_1090;
      }

LABEL_1065:
      v993 = v992;
      goto LABEL_1066;
    }
  }

LABEL_1130:
  v1034 = v1217;
  if (([*(id *)(v952 + 16) hidEventDisplayOptions] & 3) == 0) {
    goto LABEL_1134;
  }
  if (([*(id *)(v952 + 16) hidEventDisplayOptions] & 2) != 0)
  {
    v1222 = -1;
    goto LABEL_1136;
  }

  [*v1217 targetProcess];
  v1035 = (void *)objc_claimAutoreleasedReturnValue();
  v1036 = v1035;
  if (!v1035)
  {
LABEL_1134:
    v1037 = 0LL;
    goto LABEL_1240;
  }

  v1222 = [v1035 pid];

  v1034 = v1217;
LABEL_1136:
  [*v1034 hidEvents];
  v1038 = (void *)objc_claimAutoreleasedReturnValue();
  objg = (id)[v1038 mutableCopy];

  v1040 = *v1217;
  if (*v1217) {
    v1040 = objc_getProperty(v1040, v1039, 64LL, 1);
  }
  v1041 = v1040;
  [objg addObjectsFromArray:v1041];

  [objg sortUsingComparator:&__block_literal_global_1806];
  if (![objg count])
  {
    v1233 = 0LL;
    goto LABEL_1239;
  }

  v1042 = 0;
  v1233 = 0LL;
  for (i1 = 0; i1 < [objg count]; ++i1)
  {
    [objg objectAtIndexedSubscript:i1];
    v1044 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
    v1046 = v1044;
    v1048 = v1046;
    if ((isKindOfClass & 1) == 0)
    {
      if (v1046)
      {
        v1055 = objc_getProperty(v1046, v1047, 32LL, 1);
        v1056 = 0;
        v1054 = v1048;
      }

      else
      {
LABEL_1235:
        v1054 = 0LL;
        v1055 = 0LL;
        v1056 = 1;
      }

      v1057 = v1055;
      [v1057 startTime];
      v1051 = (void *)objc_claimAutoreleasedReturnValue();

      if ((v1056 & 1) != 0) {
        v1059 = 0LL;
      }
      else {
        v1059 = objc_getProperty(v1054, v1058, 32LL, 1);
      }
      v1060 = v1059;
      [v1060 endTime];
      v1052 = (void *)objc_claimAutoreleasedReturnValue();

      v1247 = 0LL;
      if ((v1056 & 1) != 0) {
        v1053 = 0;
      }
      else {
        v1053 = v1054[4];
      }
      goto LABEL_1150;
    }

    if (!v1046) {
      goto LABEL_1235;
    }
    [v1046 steps];
    v1049 = (void *)objc_claimAutoreleasedReturnValue();
    [v1049 lastObject];
    v1050 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v1050)
    {
      v1054 = v1048;
      v1247 = v1048;
      goto LABEL_1168;
    }

    [v1048 hidEventTimestamp];
    v1051 = (void *)objc_claimAutoreleasedReturnValue();
    [v1050 timestamp];
    v1052 = (void *)objc_claimAutoreleasedReturnValue();
    v1053 = [v1050 pid];

    v1054 = 0LL;
    v1247 = v1048;
LABEL_1150:
    [*v1217 eventTimeRange];
    v1061 = (void *)objc_claimAutoreleasedReturnValue();
    [v1061 startTime];
    v1062 = (void *)objc_claimAutoreleasedReturnValue();
    v1063 = v1062;
    if (!v1062) {
      v1063 = *(void **)(v1256 + 32);
    }
    v1064 = v1063;

    [v1064 machAbsTimeSeconds];
    if (v1065 != 0.0)
    {
      [v1052 machAbsTimeSeconds];
      if (v1066 != 0.0)
      {
        [v1064 machAbsTimeSeconds];
        v1068 = v1067;
        [v1052 machAbsTimeSeconds];
        if (v1068 > v1069 + 0.25) {
          goto LABEL_1158;
        }
        goto LABEL_1159;
      }
    }

    if (![v1064 isComparable:v1052] || (objc_msgSend(v1064, "gt:", v1052) & 1) != 0)
    {
LABEL_1158:

LABEL_1168:
      continue;
    }

LABEL_1159:
    [*v1217 eventTimeRange];
    v1070 = (void *)objc_claimAutoreleasedReturnValue();
    [v1070 endTime];
    v1071 = (void *)objc_claimAutoreleasedReturnValue();
    v1072 = v1071;
    if (!v1071) {
      v1072 = *(void **)(v1256 + 40);
    }
    selfd = v1072;

    if ([selfd isComparable:v1051] && (objc_msgSend(selfd, "lt:", v1051) & 1) != 0)
    {
      v1074 = 2;
      goto LABEL_1229;
    }

    if (v1222 != -1 && v1053 != v1222)
    {
      v1074 = 4;
      goto LABEL_1229;
    }

    if (!v1233) {
      v1233 = objc_alloc_init(MEMORY[0x189607940]);
    }
    if ((v1042 & 1) != 0) {
      objc_msgSend(v1233, "appendString:", @", ");
    }
    if (v1054)
    {
      if (*(void *)(v1256 + 112))
      {
        v1378 = 0u;
        v1377 = 0u;
        v1376 = 0u;
        v1375 = 0u;
        v1075 = objc_getProperty(v1054, v1073, 8LL, 1);
        v1076 = [v1075 countByEnumeratingWithState:&v1375 objects:v1379 count:16];
        if (v1076)
        {
          v1077 = *(void *)v1376;
          while (2)
          {
            for (i2 = 0LL; i2 != v1076; ++i2)
            {
              if (*(void *)v1376 != v1077) {
                objc_enumerationMutation(v1075);
              }
              if (*(void *)(v1256 + 112) == *(void *)(*((void *)&v1375 + 1) + 8 * i2))
              {
                v1079 = 1;
                goto LABEL_1206;
              }
            }

            v1076 = [v1075 countByEnumeratingWithState:&v1375 objects:v1379 count:16];
            if (v1076) {
              continue;
            }
            break;
          }
        }

        v1079 = 0;
LABEL_1206:
      }

      else
      {
        v1079 = 0;
      }

      v1095 = objc_getProperty(v1054, v1073, 24LL, 1);
      [v1233 appendString:v1095];

      v1097 = objc_getProperty(v1054, v1096, 8LL, 1);
      v1098 = [v1097 count] == 0;

      if (!v1098)
      {
        v1100 = objc_getProperty(v1054, v1099, 8LL, 1);
        objc_msgSend(v1233, "appendFormat:", @" (%lu HID events)", objc_msgSend(v1100, "count"));
      }

      if (v1222 == -1)
      {
        v1101 = v1054[4];
        if ((_DWORD)v1101 != -1)
        {
          v1102 = objc_getProperty(v1054, v1099, 32LL, 1);
          [v1102 startTime];
          v1103 = (void *)objc_claimAutoreleasedReturnValue();
          v1104 = -[SASamplePrinter displayNameForPid:threadId:timestamp:]((void *)v1256, v1101, 0LL, v1103);
          [v1233 appendFormat:@" to %@", v1104];
        }
      }

      if (v1079) {
        [v1233 appendString:@"*"];
      }
      goto LABEL_1228;
    }

    [v1247 steps];
    v1080 = (void *)objc_claimAutoreleasedReturnValue();
    [v1080 lastObject];
    v1203 = (void *)objc_claimAutoreleasedReturnValue();

    v1194 = v1247 == *(id *)(v1256 + 112);
    [v1247 thresholdToGroupSameEventType];
    v1082 = v1081;
    v1199 = 0LL;
    if (v1081 <= 0.0 || !v1203) {
      goto LABEL_1218;
    }
    if ([v1203 pid] == -1 || (objc_msgSend(v1052, "machAbsTimeSeconds"), v1083 == 0.0))
    {
      v1199 = 0LL;
      goto LABEL_1218;
    }

    v1171 = v1052;
    v1084 = (char *)(i1 + 1);
    if (i1 + 1 >= [objg count])
    {
      v1199 = 0LL;
      goto LABEL_1217;
    }

    v1199 = 0LL;
    v1212 = (char *)i1;
    while (1)
    {
      [objg objectAtIndexedSubscript:v1084];
      v1085 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0) {
        break;
      }
      v1212 = v1084;
LABEL_1203:

      v1084 = v1212 + 1;
    }

    [v1085 hidEventTimestamp];
    v1207 = (void *)objc_claimAutoreleasedReturnValue();
    [v1207 machAbsTimeSeconds];
    if (v1086 == 0.0)
    {
      v1212 = v1084;
LABEL_1202:

      goto LABEL_1203;
    }

    [v1171 machAbsTimeSeconds];
    v1088 = v1087;
    [v1207 machAbsTimeSeconds];
    if (v1082 + v1088 >= v1089)
    {
      [v1085 steps];
      v1090 = (void *)objc_claimAutoreleasedReturnValue();
      [v1090 lastObject];
      v1091 = (void *)objc_claimAutoreleasedReturnValue();

      if (v1091 && (v1092 = [v1091 pid], v1092 == objc_msgSend(v1203, "pid")))
      {
        v1093 = *(void **)(v1256 + 112);
        v1167 = [v1091 timestamp];
        v1094 = v1194;
        if (v1085 == v1093) {
          v1094 = 1;
        }
        v1194 = v1094;

        [objg removeObjectAtIndex:v1084];
        ++v1199;
        v1171 = (id)v1167;
      }

      else
      {
        v1212 = v1084;
      }

      goto LABEL_1202;
    }

    v1109 = *__error();
    _sa_logt();
    v1110 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v1110, OS_LOG_TYPE_DEBUG))
    {
      [v1207 machAbsTimeSeconds];
      v1112 = v1111;
      [v1171 machAbsTimeSeconds];
      LODWORD(buf) = 134217984;
      *(double *)((char *)&buf + 4) = v1112 - v1113;
      _os_log_debug_impl( &dword_186C92000,  v1110,  OS_LOG_TYPE_DEBUG,  "breaking grouping due to gap of %.3fs",  (uint8_t *)&buf,  0xCu);
    }

    *__error() = v1109;
LABEL_1217:

    v1194 &= 1u;
LABEL_1218:
    [v1247 hidEventTypeString];
    v1105 = (void *)objc_claimAutoreleasedReturnValue();
    [v1233 appendString:v1105];

    if (v1194) {
      [v1233 appendString:@"*"];
    }
    if (v1199) {
      objc_msgSend(v1233, "appendFormat:", @" x%llu", v1199 + 1);
    }
    if (v1222 == -1)
    {
      if (v1203) {
        v1106 = [v1203 pid];
      }
      else {
        v1106 = 0xFFFFFFFFLL;
      }
      [v1203 timestamp];
      v1107 = (void *)objc_claimAutoreleasedReturnValue();
      v1108 = -[SASamplePrinter displayNameForPid:threadId:timestamp:]((void *)v1256, v1106, 0LL, v1107);
      [v1233 appendFormat:@" to %@", v1108];
    }

LABEL_1228:
    v1074 = 0;
    v1042 = 1;
LABEL_1229:

    if ((v1074 | 4) != 4) {
      break;
    }
  }

LABEL_1239:
  v952 = v1256;
  v1034 = v1217;
  v1037 = v1233;
LABEL_1240:
  v1114 = v1037;
  if ([v1037 length])
  {
    [*p_isa printWithFormat:@"\n"];
    [*p_isa printWithFormat:@"%-*s%@\n", 18, "HID Events: ", v1114];
  }

  if (*(void *)(v952 + 112) && *v1034 && (*((_BYTE *)*v1034 + 326) & 1) != 0)
  {
    v1115 = [*(id *)(v952 + 16) hidEventDisplayOptions];
    v1116 = v1208;
    if ((v1115 & 4) == 0) {
      v1116 = 1;
    }
    if ((v1116 & 1) == 0)
    {
      [*p_isa appendString:@"\nSlow HID event:\n"];
      -[SASamplePrinter printHIDEvent:](v952, *(void **)(v952 + 112));
    }
  }

  _Block_object_dispose(&v1278, 8);
}

void sub_186D283C8(_Unwind_Exception *a1)
{
}

void sub_186D285C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

__CFString *_shared_cache_display_string(void *a1)
{
  uint64_t v1 = a1;
  if (!v1
    || ([MEMORY[0x189603FE8] null],
        int v2 = (_DWORD *)objc_claimAutoreleasedReturnValue(),
        v2,
        v2 == v1))
  {
    id v3 = @"None";
    goto LABEL_15;
  }

  id v3 = (__CFString *)objc_alloc_init(MEMORY[0x189607940]);
  uint64_t v4 = [v1 slidBaseAddress];
  uint64_t v5 = [v1 slide];
  uint64_t v6 = [v1 uuid];
  id v7 = (void *)v6;
  if (v4 == -1)
  {
    if (v5 == -1) {
      -[__CFString appendFormat:](v3, "appendFormat:", @"%@", v6, v11, v12);
    }
    else {
      -[__CFString appendFormat:](v3, "appendFormat:", @"%@ slide 0x%llx", v6, [v1 slide], v12);
    }
  }

  else
  {
    uint64_t v8 = [v1 slidBaseAddress];
    if (v5 == -1) {
      -[__CFString appendFormat:](v3, "appendFormat:", @"%@ slid base address 0x%llx", v7, v8, v12);
    }
    else {
      -[__CFString appendFormat:]( v3,  "appendFormat:",  @"%@ slid base address 0x%llx, slide 0x%llx",  v7,  v8,  [v1 slide]);
    }
  }

  int v9 = v1[7];
  if ((v9 & 1) == 0)
  {
    if ((v9 & 2) == 0) {
      goto LABEL_13;
    }
LABEL_17:
    -[__CFString appendFormat:](v3, "appendFormat:", @" (DriverKit)");
    if ((v1[7] & 4) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }

  -[__CFString appendFormat:](v3, "appendFormat:", @" (System Primary)");
  int v9 = v1[7];
  if ((v9 & 2) != 0) {
    goto LABEL_17;
  }
LABEL_13:
  if ((v9 & 4) != 0) {
LABEL_14:
  }
    -[__CFString appendFormat:](v3, "appendFormat:", @" (Rosetta)");
LABEL_15:

  return v3;
}

void sub_186D29754( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, char a35)
{
}

LABEL_4:
  v364 = v78;
  v365 = v84;
  v368 = v83;
  v363 = v79;
  v342 = a40;
  v345 = v76;
  v355 = v77;
  v358 = v80;
  v338 = v82;
  v339 = v81;
  if (!a19)
  {
    int v84 = v340;
    __int128 v85 = v371;
    __int128 v86 = v366;
    char v87 = v352;
    if (!v81)
    {
      __int128 v88 = 0;
      __int128 v89 = 0;
      goto LABEL_14;
    }

    if (([v81 isEqualToString:@"System"] & 1) == 0
      && ([v81 isEqualToString:@"Internal"] & 1) == 0)
    {
      __int128 v88 = [v81 isEqualToString:@"Hidden"];
      goto LABEL_13;
    }

  id v7 = 1LL;
LABEL_8:

  return v7;
}

  int v9 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_7:

  return v9;
}

LABEL_441:
    v307 = *__error();
    _sa_logt();
    v308 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v308, OS_LOG_TYPE_ERROR))
    {
      v309 = [v362 UTF8String];
      [v84 uuid];
      v310 = (void *)objc_claimAutoreleasedReturnValue();
      v311 = [v310 UUIDString];
      v312 = [v311 UTF8String];
      *(_DWORD *)buf = 136315394;
      v383 = v309;
      v384 = 2080;
      v385 = v312;
      _os_log_error_impl( &dword_186C92000,  v308,  OS_LOG_TYPE_ERROR,  "%s: no index for main binary %s, required by systemstats format",  buf,  0x16u);
    }

    *__error() = v307;
    v313 = [v362 UTF8String];
    [v84 uuid];
    v269 = (void *)objc_claimAutoreleasedReturnValue();
    v314 = [v269 UUIDString];
    [v314 UTF8String];
    _SASetCrashLogMessage( 6948,  "%s: no index for main binary %s, required by systemstats format",  v315,  v316,  v317,  v318,  v319,  v320,  v313);

    _os_crash();
    __break(1u);
    goto LABEL_444;
  }

LABEL_223:
  if ((unint64_t)[v368 count] > 1
    || [v368 count] == 1
    && ([v368 allKeys],
        v170 = (void *)objc_claimAutoreleasedReturnValue(),
        [v170 firstObject],
        v171 = (void *)objc_claimAutoreleasedReturnValue(),
        v172 = [v171 isEqualToString:@"none"],
        v171,
        v170,
        (v172 & 1) == 0))
  {
    [v368 allKeys];
    v173 = (void *)objc_claimAutoreleasedReturnValue();
    v376[0] = MEMORY[0x1895F87A8];
    v376[1] = 3221225472LL;
    v376[2] = __1143__SASamplePrinter_addTaskHeaderToStream_displayName_pid_mainBinary_mainBinaryPath_sharedCaches_uid_bundleIdentifier_bundleVersion_bundleShortVersion_bundleBuildVersion_bundleProjectName_bundleSourceVersion_bundleProductBuildVersion_adamID_installerVersionID_developerType_appType_isBeta_cohortID_vendorID_distributorID_codesigningID_teamID_resourceCoalitionSampleCounts_onBehalfOfProcesses_architectureString_kernelVersion_parentName_responsibleName_taskExecedFromName_taskExecedToName_pidStartTimestamp_startTimestamp_endTimestamp_startSampleIndex_endSampleIndex_numSamples_totalNumSamples_numSamplesSuspended_numSamplesTerminated_startingTaskSize_endingTaskSize_maxTaskSize_startSampleIndexOfMaxTaskSize_endSampleIndexOfMaxTaskSize_numPageins_cpuTimeNs_cpuInstructions_cpuCycles_nonThreadCpuTimeNs_nonThreadCpuInstructions_nonThreadCpuCycles_usesSuddenTermination_allowsIdleExit_isTranslocated_isUnresponsive_timeOfLastResponse_numThreads_numIdleWorkQueueThreads_numOtherHiddenThreads_hieSwallowedException_wqExceededConstrainedThreadLimit_wqExceededTotalThreadLimit_threadsDeadlocked_threadsBlockedByADeadlock_ioSize_numIOs_isReportHeader___block_invoke;
    v376[3] = &unk_189F63D58;
    v174 = v368;
    v377 = v174;
    [v173 sortedArrayUsingComparator:v376];
    v175 = (void *)objc_claimAutoreleasedReturnValue();

    if (a40)
    {
      v176 = (void *)objc_msgSend(objc_alloc(MEMORY[0x189603FA8]), "initWithCapacity:", objc_msgSend(v175, "count"));
      v372 = 0u;
      v373 = 0u;
      v374 = 0u;
      v375 = 0u;
      v335 = v175;
      id obj = v175;
      v177 = [obj countByEnumeratingWithState:&v372 objects:v388 count:16];
      if (v177)
      {
        v178 = v177;
        v179 = *(void *)v373;
        do
        {
          for (uint64_t j = 0LL; j != v178; ++j)
          {
            if (*(void *)v373 != v179) {
              objc_enumerationMutation(obj);
            }
            v181 = *(void *)(*((void *)&v372 + 1) + 8 * j);
            [v174 objectForKeyedSubscript:v181];
            v182 = (void *)objc_claimAutoreleasedReturnValue();
            v183 = [v182 unsignedLongLongValue];

            v184 = objc_alloc(NSString);
            v185 = "s";
            if (v183 == 1) {
              v185 = "";
            }
            v186 = (void *)[v184 initWithFormat:@"%llu sample%s %@", v183, v185, v181];
            [v176 addObject:v186];
          }

          v178 = [obj countByEnumeratingWithState:&v372 objects:v388 count:16];
        }

        while (v178);
      }

      v187 = v176;
      int v84 = v340;
      __int128 v85 = v371;
      uint64_t v115 = v355;
      v114 = v356;
      char v87 = v352;
      __int16 v109 = a1;
      v175 = v335;
    }

    else
    {
      v187 = v175;
    }

    objc_msgSend(v187, "componentsJoinedByString:", @", ");
    v188 = (void *)objc_claimAutoreleasedReturnValue();
    [v85 printWithFormat:@"%-*s%@\n", 18, "Resource Coalition: ", v188];

    __int128 v86 = v366;
  }

  if (v87) {
    [v85 printWithFormat:@"%-*s%@\n", 18, "On Behalf Of: ", v87];
  }
  v112 = v345;
  v139 = v357;
  if (([*(id *)(v109 + 16) systemstatsFormat] & 1) == 0)
  {
    if (v350) {
      [v85 printWithFormat:@"%-*s%@\n", 18, "Architecture: ", v350];
    }
    if (v347) {
      [v85 printWithFormat:@"%-*s%@\n", 18, "Execed from: ", v347];
    }
    if (v346) {
      [v85 printWithFormat:@"%-*s%@\n", 18, "Execed to: ", v346];
    }
    if (v349) {
      [v85 printWithFormat:@"%-*s%@\n", 18, "Parent: ", v349];
    }
    if (v348) {
      [v85 printWithFormat:@"%-*s%@\n", 18, "Responsible: ", v348];
    }
    if ((_DWORD)a4 != -1) {
      objc_msgSend(v85, "printWithFormat:", @"%-*s%i\n", 18, "PID: ", a4);
    }
    if ((_DWORD)a8 != -314) {
      objc_msgSend(v85, "printWithFormat:", @"%-*s%d\n", 18, "UID: ", a8);
    }
    if (a56)
    {
      objc_msgSend(v85, "printWithFormat:", @"%-*sTracked", 18, "Sudden Term: ");
      if (a57) {
        [v85 appendString:@" (allows idle exit)"];
      }
      [v85 appendString:@"\n"];
    }

    if (!a44)
    {
LABEL_283:
      if (a49) {
        objc_msgSend(v85, "printWithFormat:", @"%-*s%u pages\n", 18, "Pageins: ", a49);
      }
      if (a69)
      {
        if (a69 == 1) {
          v213 = "";
        }
        else {
          v213 = "s";
        }
        SAFormattedBytesEx(a68, 1, 0, 1, 0LL);
        v214 = (void *)objc_claimAutoreleasedReturnValue();
        [v85 printWithFormat:@"%-*s%lu I/O%s (%@)\n", 18, "I/O: ", a69, v213, v214];
      }

      [v341 wallTime];
      if (v215 != 0.0)
      {
        [*(id *)(v109 + 32) wallTime];
        if (v216 != 0.0)
        {
          [*(id *)(v109 + 32) wallTime];
          v218 = v217;
          [v341 wallTime];
          v220 = v218 - v219;
          if (v220 < 0.0) {
            v220 = 0.0;
          }
          objc_msgSend(v85, "printWithFormat:", @"%-*s%.0fs\n", 18, "Time Since Fork: ", *(void *)&v220);
        }
      }

      v112 = v345;
      v139 = v357;
      if (!v353
        || ([v353 gt:*(void *)(v109 + 32)] & 1) == 0
        && ![*(id *)(v109 + 16) microstackshotsFormat])
      {
        goto LABEL_324;
      }

      else {
        v221 = *(void **)(v109 + 32);
      }
      [v221 wallTime];
      v223 = v222;
      if (v222 == 0.0)
      {
        [*(id *)(v109 + 32) wallTime];
        if (v224 != 0.0)
        {
          [*(id *)(v109 + 32) machContTimeSeconds];
          if (v225 != 0.0)
          {
            [v353 machContTimeSeconds];
            if (v226 != 0.0)
            {
              [*(id *)(v109 + 32) wallTime];
              v228 = v227;
              [v353 machContTimeSeconds];
              v230 = v229;
              [*(id *)(v109 + 32) machContTimeSeconds];
LABEL_312:
              v223 = v228 + v230 - v231;
              goto LABEL_313;
            }
          }

          [*(id *)(v109 + 32) machAbsTimeSeconds];
          if (v234 != 0.0)
          {
            [v353 machAbsTimeSeconds];
            if (v235 != 0.0)
            {
              [*(id *)(v109 + 32) wallTime];
              v228 = v236;
              [v353 machAbsTimeSeconds];
              v230 = v237;
              [*(id *)(v109 + 32) machAbsTimeSeconds];
              goto LABEL_312;
            }
          }
        }
      }

LABEL_313:
      if (v223 != 0.0)
      {
        if ([*(id *)(v109 + 16) omitAbsoluteWallTimes])
        {
          [*(id *)(v109 + 32) wallTime];
          if (v238 != 0.0)
          {
            v239 = [*(id *)(v109 + 16) displayDetailedWallTime];
            [*(id *)(v109 + 32) wallTime];
            if (v239) {
              v241 = 9LL;
            }
            else {
              v241 = 3LL;
            }
            objc_msgSend(v85, "printWithFormat:", @"%-*s%.*fs\n", 18, "Start time: ", v241, v223 - v240);
          }
        }

        else
        {
          else {
            v242 = 3;
          }
          v243 = (__CFString *)_CopyStringForTime(v242, v223);
          [v85 printWithFormat:@"%-*s%@\n", 18, "Start time: ", v243];
        }
      }

LABEL_324:
      if (v365
        && (([v365 lt:*(void *)(v109 + 40)] & 1) != 0
         || [*(id *)(v109 + 16) microstackshotsFormat]))
      {
        else {
          v244 = *(void **)(v109 + 40);
        }
        [v244 wallTime];
        v246 = v245;
        if (v245 == 0.0)
        {
          [*(id *)(v109 + 40) wallTime];
          if (v247 != 0.0)
          {
            [*(id *)(v109 + 40) machContTimeSeconds];
            if (v248 == 0.0 || ([v365 machContTimeSeconds], v249 == 0.0))
            {
              [*(id *)(v109 + 40) machAbsTimeSeconds];
              if (v255 != 0.0)
              {
                [v365 machAbsTimeSeconds];
                if (v256 != 0.0)
                {
                  [*(id *)(v109 + 40) wallTime];
                  v258 = v257;
                  [*(id *)(v109 + 40) machAbsTimeSeconds];
                  v260 = v259;
                  [v365 machAbsTimeSeconds];
                  v246 = v258 + v260 - v261;
                }
              }
            }

            else
            {
              [*(id *)(v109 + 40) wallTime];
              v251 = v250;
              [*(id *)(v109 + 40) machContTimeSeconds];
              v253 = v252;
              [v365 machContTimeSeconds];
              v246 = v251 - (v253 - v254);
            }
          }
        }

        if (v246 != 0.0)
        {
          if ([*(id *)(v109 + 16) omitAbsoluteWallTimes])
          {
            [*(id *)(v109 + 32) wallTime];
            if (v262 != 0.0)
            {
              v263 = [*(id *)(v109 + 16) displayDetailedWallTime];
              [*(id *)(v109 + 32) wallTime];
              if (v263) {
                v265 = 9LL;
              }
              else {
                v265 = 3LL;
              }
              objc_msgSend(v85, "printWithFormat:", @"%-*s%.*fs\n", 18, "End time: ", v265, v246 - v264);
            }
          }

          else
          {
            else {
              v266 = 3;
            }
            v267 = (__CFString *)_CopyStringForTime(v266, v246);
            [v85 printWithFormat:@"%-*s%@\n", 18, "End time: ", v267];
          }
        }
      }

      goto LABEL_349;
    }

    SAFormattedBytesEx(a44, 1, 0, 1, 0LL);
    v189 = (void *)objc_claimAutoreleasedReturnValue();
    [v85 printWithFormat:@"%-*s%@", 18, "Footprint: ", v189];

    v190 = a45;
    if (!a45 || (v191 = 1, (double)a44 * 1.05 > (double)a45) && (double)a45 * 1.05 > (double)a44)
    {
      v192 = [*(id *)(v109 + 16) displayAllTaskSizeChanges];
      v190 = a45;
      v191 = v192;
    }

    v193 = v114;
    v194 = v115;
    v195 = v190 - a44;
    if (v190 >= a44 && v191)
    {
      v196 = v84;
      v197 = (double)v190;
    }

    else
    {
      v196 = v84;
      v197 = (double)a44;
    }

    if (v197 * 1.05 <= (double)a46)
    {
      SAFormattedBytesEx(v190, 1, 0, 1, 0LL);
      v206 = (void *)objc_claimAutoreleasedReturnValue();
      SAFormattedSignedBytes(v195, 1, 0);
      v207 = (void *)objc_claimAutoreleasedReturnValue();
      __int128 v85 = v371;
      [v371 printWithFormat:@" -> %@ (%@)", v206, v207];
    }

    else
    {
      v201 = v190;
      v202 = [*(id *)(v109 + 16) displayAllTaskSizeChanges];
      __int128 v85 = v371;
      if ((v191 | v202) != 1) {
        goto LABEL_282;
      }
      v203 = v202;
      SAFormattedBytesEx(v201, 1, 0, 1, 0LL);
      v204 = (void *)objc_claimAutoreleasedReturnValue();
      SAFormattedSignedBytes(v195, 1, 0);
      v205 = (void *)objc_claimAutoreleasedReturnValue();
      [v371 printWithFormat:@" -> %@ (%@)", v204, v205];

      if ((v203 & 1) == 0)
      {
LABEL_282:
        [v85 appendString:@"\n"];
        __int128 v86 = v366;
        int v84 = v196;
        uint64_t v115 = v194;
        v114 = v193;
        char v87 = v352;
        goto LABEL_283;
      }
    }

    -[SASamplePrinter timeIndexDescriptionForStartSampleIndex:endSampleIndex:formattedToLength:](v109, a47, a48, 0);
    v208 = (__CFString *)objc_claimAutoreleasedReturnValue();
    v209 = SAFormattedBytesEx(a46, 1, 0, 1, 0LL);
    v210 = (void *)v209;
    v211 = " ";
    if (!v208) {
      v211 = "";
    }
    v212 = &stru_189F64BD8;
    if (v208) {
      v212 = v208;
    }
    [v85 printWithFormat:@" (max %@%s%@)", v209, v211, v212];

    goto LABEL_282;
  }

LABEL_349:
  if ((a70 & 1) != 0) {
    goto LABEL_374;
  }
  objc_msgSend(v85, "printWithFormat:", @"%-*s%lu", 18, "Num samples: ", a40);
  if (!-[SASamplePrinter hasTimeIndexes](v109))
  {
    v269 = (void *)a41;
    if (!a41 || ([*(id *)(v109 + 16) systemstatsFormat] & 1) != 0)
    {
      [v85 appendString:@"\n"];
LABEL_365:
      v139 = v357;
      goto LABEL_374;
    }

    if (a41 >= a40)
    {
      objc_msgSend(v85, "printWithFormat:", @" (%.0f%%)\n", (double)a40 * 100.0 / (double)a41);
      goto LABEL_365;
    }

LABEL_434:
}

id seconds_string_for_nanoseconds(unint64_t a1)
{
  if (a1 <= 0x989680) {
    unint64_t v1 = 10000000LL;
  }
  else {
    unint64_t v1 = a1;
  }
  if (a1 >= 0x989680) {
    int v2 = "";
  }
  else {
    int v2 = "<";
  }
  return (id)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"%s%.*fs",  v2,  2,  (double)v1 / 1000000000.0);
}

uint64_t saos_printf_seconds(void *a1, unint64_t a2, uint64_t a3)
{
  id v5 = a1;
  unint64_t v6 = (unint64_t)__exp10((double)(9 - a3));
  if (v6 <= a2)
  {
    int v7 = 0;
  }

  else
  {
    int v7 = [v5 appendString:@"<"];
    a2 = v6;
  }

  uint64_t v8 = objc_msgSend(v5, "printWithFormat:", @"%.*fs", a3, (double)a2 / 1000000000.0) + v7;

  return v8;
}

uint64_t saos_printf_time_scaled(void *a1, unint64_t a2)
{
  unint64_t v4 = a2 / 0x3B9ACA00;
  if (a2 % 0x3B9ACA00)
  {
    unint64_t v4 = a2 / 0xF4240;
    unint64_t v5 = a2 % 0xF4240;
    unint64_t v6 = a2 / 0x3E8;
    if (a2 % 0x3E8) {
      int v7 = "n";
    }
    else {
      int v7 = "u";
    }
    if (a2 % 0x3E8) {
      unint64_t v6 = a2;
    }
    BOOL v8 = v5 == 0;
    if (v5) {
      int v9 = v7;
    }
    else {
      int v9 = "m";
    }
    if (!v8) {
      unint64_t v4 = v6;
    }
  }

  else
  {
    int v9 = "";
  }

  return objc_msgSend(a1, "printWithFormat:", @"%llu%ss", v4, v9, v2, v3);
}

uint64_t saos_printf_cycles_instructions(void *a1, unint64_t a2, unint64_t a3, int a4)
{
  if (a4)
  {
    if (a3) {
      double v4 = (double)a2 / (double)a3;
    }
    else {
      double v4 = 0.0;
    }
    return objc_msgSend( a1,  "printWithFormat:",  @" (%llu cycles, %llu instructions, %fc/i)",  a2,  a3,  *(void *)&v4,  v15,  v16);
  }

  double v5 = (double)a2;
  if (a2 > 0x71AFD498D0000LL)
  {
    double v6 = 1.0e15;
    int v7 = "P";
LABEL_14:
    double v9 = v5 / v6;
    goto LABEL_15;
  }

  if (a2 > 0x1D1A94A2000LL)
  {
    double v6 = 1.0e12;
    int v7 = "T";
    goto LABEL_14;
  }

  if (a2 > 0x77359400)
  {
    double v6 = 1000000000.0;
    int v7 = "G";
    goto LABEL_14;
  }

  if (a2 > 0x1E8480)
  {
    double v6 = 1000000.0;
    int v7 = "M";
    goto LABEL_14;
  }

  double v9 = v5 / 1000.0;
  if (a2 <= 0x7D0) {
    double v9 = (double)a2;
  }
  int v7 = "";
  if (a2 > 0x7D0) {
    int v7 = "K";
  }
LABEL_15:
  double v10 = (double)a3;
  if (a3 <= 0x71AFD498D0000LL)
  {
    if (a3 <= 0x1D1A94A2000LL)
    {
      if (a3 <= 0x77359400)
      {
        if (a3 <= 0x1E8480)
        {
          double v13 = v10 / 1000.0;
          if (a3 <= 0x7D0) {
            double v13 = (double)a3;
          }
          uint64_t v12 = "";
          if (a3 > 0x7D0) {
            uint64_t v12 = "K";
          }
          goto LABEL_24;
        }

        double v11 = 1000000.0;
        uint64_t v12 = "M";
      }

      else
      {
        double v11 = 1000000000.0;
        uint64_t v12 = "G";
      }
    }

    else
    {
      double v11 = 1.0e12;
      uint64_t v12 = "T";
    }
  }

  else
  {
    double v11 = 1.0e15;
    uint64_t v12 = "P";
  }

  double v13 = v10 / v11;
LABEL_24:
  double v14 = v5 / v10;
  if (!a3) {
    double v14 = 0.0;
  }
  return [a1 printWithFormat:@" (%.1f%s cycles, %.1f%s instructions, %.2fc/i)", *(void *)&v9, v7, *(void *)&v13, v12, *(void *)&v14];
}

void saos_printf_seconds_sigfig(void *a1, double a2)
{
  unsigned int v5 = 0;
  id v3 = a1;
  double v4 = ReduceToSignificantDigits(2, &v5, a2);
  objc_msgSend(v3, "printWithFormat:", @"%.*fs", (2 - v5) & ~((int)(2 - v5) >> 31), *(void *)&v4);
}

void sub_186D2E004(_Unwind_Exception *a1)
{
}

void sub_186D2E848(_Unwind_Exception *a1)
{
}

LABEL_93:
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) == 0 || [v36 highestOffset] < v46)
              {
                objc_msgSend(a1[1], "printWithFormat:", @" - %#18llx", v46 + objc_msgSend(v36, "loadAddress") - 1);
                goto LABEL_100;
              }

              __int128 v50 = *__error();
              _sa_logt();
              __int128 v51 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
              {
                uint64_t v79 = [v36 debugDescription];
                uint64_t v80 = [v79 UTF8String];
                uint64_t v81 = [v36 highestOffset];
                *(_DWORD *)buf = 136315650;
                v126 = v80;
                v127 = 2048;
                v128 = (_OWORD *)v46;
                v129 = 2048;
                v130 = v81;
                _os_log_error_impl( &dword_186C92000,  v51,  OS_LOG_TYPE_ERROR,  "load info %s length 0x%llx has a hit at 0x%llx",  buf,  0x20u);
              }

              *__error() = v50;
              unint64_t v41 = v114;
            }

            else
            {
              if ([v37 length]) {
                goto LABEL_83;
              }
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0) {
                __int128 v47 = [v36 highestOffset];
              }
              else {
                __int128 v47 = 0LL;
              }
              -[SABinary segmentAtOffsetIntoBinary:](v37, 0LL);
              __int128 v48 = (void *)objc_claimAutoreleasedReturnValue();
              __int128 v49 = v48;
              if (v48
                && [v48 hasOffsetIntoBinary]
                && ![v49 offsetIntoBinary]
                && [v49 length]
                && v47 < [v49 length])
              {
                objc_super v46 = [v49 length];
              }

              else
              {
                objc_super v46 = 0LL;
              }

              if (v46) {
                goto LABEL_93;
              }
            }

LABEL_87:
LABEL_88:
  a1 = 0LL;
LABEL_92:
  uint64_t v15 = v69;
LABEL_96:

LABEL_97:
  return a1;
}

void sub_186D31254( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_186D31348( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_186D3140C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_186D34D38( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, char a49)
{
}

void sub_186D351F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

LABEL_264:
        v229 = *__error();
        _sa_logt();
        v230 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v230, OS_LOG_TYPE_ERROR))
        {
          v231 = [v326 debugDescription];
          v232 = [v231 UTF8String];
          v233 = [a5 debugDescription];
          v234 = [v233 UTF8String];
          *(_DWORD *)v438 = 136315394;
          *(void *)(v6 + 4) = v232;
          WORD2(v439) = 2080;
          *(void *)(v6 + 14) = v234;
          _os_log_error_impl(&dword_186C92000, v230, OS_LOG_TYPE_ERROR, "%s not in tasksWithSamePid %s", v438, 0x16u);
        }

        *__error() = v229;
        v235 = [v326 debugDescription];
        v236 = [v235 UTF8String];
        v237 = [a5 debugDescription];
        [v237 UTF8String];
        _SASetCrashLogMessage(6295, "%s not in tasksWithSamePid %s", v238, v239, v240, v241, v242, v243, v236);

        _os_crash();
        __break(1u);
LABEL_267:
        v244 = *__error();
        _sa_logt();
        v245 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v245, OS_LOG_TYPE_ERROR))
        {
          v246 = [v326 debugDescription];
          v247 = [v246 UTF8String];
          v248 = v425[3];
          *(_DWORD *)v438 = 136315394;
          *(void *)(v6 + 4) = v247;
          WORD2(v439) = 2048;
          *(void *)(v6 + 14) = v248;
          _os_log_error_impl( &dword_186C92000,  v245,  OS_LOG_TYPE_ERROR,  "%s: %lu numSamples (!hasTimeIndexes, no task states)",  v438,  0x16u);
        }

        *__error() = v244;
        v249 = [v326 debugDescription];
        v250 = [v249 UTF8String];
        _SASetCrashLogMessage( 6156,  "%s: %lu numSamples (!hasTimeIndexes, no task states)",  v251,  v252,  v253,  v254,  v255,  v256,  v250);

        _os_crash();
        __break(1u);
LABEL_270:
        v257 = *__error();
        _sa_logt();
        v258 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v258, OS_LOG_TYPE_ERROR))
        {
          v259 = [v326 debugDescription];
          v260 = [v259 UTF8String];
          v261 = v425[3];
          v262 = (uint64_t (*)(uint64_t, uint64_t))v393[3];
          *(_DWORD *)v438 = 136315650;
          *(void *)(v6 + 4) = v260;
          WORD2(v439) = 2048;
          *(void *)(v6 + 14) = v261;
          HIWORD(v440) = 2048;
          v441 = v262;
          _os_log_error_impl( &dword_186C92000,  v258,  OS_LOG_TYPE_ERROR,  "%s: numSamples %lu >= specialNumSamples %lu",  v438,  0x20u);
        }

        *__error() = v257;
        v263 = [v326 debugDescription];
        v264 = [v263 UTF8String];
        _SASetCrashLogMessage( 6203,  "%s: numSamples %lu >= specialNumSamples %lu",  v265,  v266,  v267,  v268,  v269,  v270,  v264);

        _os_crash();
        __break(1u);
      }

      goto LABEL_86;
    }
  }

  int v84 = v82;

LABEL_97:
  if (v78)
  {
    [v78 sharedCache];
    __int128 v85 = (void *)objc_claimAutoreleasedReturnValue();
    [v326 sharedCache];
    __int128 v86 = (void *)objc_claimAutoreleasedReturnValue();
    if (v85 == v86)
    {
      [v78 endTimestamp];
      char v87 = (void *)objc_claimAutoreleasedReturnValue();
      __int128 v88 = [v87 ge:*(void *)(a1 + 32)];

      if (v88)
      {
        v319 = -[SASamplePrinter displayNameForTask:]((void *)a1, v78);
        if (!v84) {
          goto LABEL_108;
        }
        goto LABEL_104;
      }
    }

    else
    {
    }
  }

  v319 = 0LL;
  if (!v84)
  {
LABEL_108:
    v317 = 0LL;
    goto LABEL_109;
  }

LABEL_104:
  [v84 sharedCache];
  __int128 v89 = (void *)objc_claimAutoreleasedReturnValue();
  [v326 sharedCache];
  __int128 v90 = (void *)objc_claimAutoreleasedReturnValue();
  if (v89 != v90)
  {

    goto LABEL_108;
  }

  [v84 startTimestamp];
  pid_t v91 = (void *)objc_claimAutoreleasedReturnValue();
  id v92 = [v91 le:*(void *)(a1 + 40)];

  if (!v92) {
    goto LABEL_108;
  }
  v317 = -[SASamplePrinter displayNameForTask:]((void *)a1, v84);
LABEL_109:

  [v326 startTimestamp];
  posix_spawnattr_t v93 = (void *)objc_claimAutoreleasedReturnValue();
  posix_spawn_file_actions_t v94 = [v326 ppid];
  if ((_DWORD)v94 == -1 || (_DWORD)v94 == [v326 pid])
  {
    v316 = 0LL;
  }

  else
  {
    -[SASampleStore lastTaskWithPid:onOrBeforeTimestamp:](*(void **)(a1 + 160), v94, v93);
    __int128 v95 = (void *)objc_claimAutoreleasedReturnValue();
    if (v95)
    {
      __int128 v96 = v95;
    }

    else
    {
      -[SASampleStore firstTaskWithPid:](*(void **)(a1 + 160), v94);
      __int128 v96 = (id)objc_claimAutoreleasedReturnValue();

      if (!v96)
      {
        v316 = -[SASamplePrinter displayNameForPid:threadId:timestamp:]((void *)a1, v94, 0LL, v93);
        goto LABEL_116;
      }
    }
    v316 = -[SASamplePrinter displayNameForTask:]((void *)a1, v96);
  }

LABEL_116:
  char v97 = [v326 rpid];
  if ((int)v97 < 1 || (_DWORD)v97 == [v326 pid])
  {
    v315 = 0LL;
    goto LABEL_123;
  }

  -[SASampleStore lastTaskWithPid:onOrBeforeTimestamp:](*(void **)(a1 + 160), v97, v93);
  int v98 = (void *)objc_claimAutoreleasedReturnValue();
  if (v98)
  {
    __int128 v99 = v98;

LABEL_122:
    v315 = -[SASamplePrinter displayNameForTask:]((void *)a1, v99);
    goto LABEL_123;
  }

  -[SASampleStore firstTaskWithPid:](*(void **)(a1 + 160), v97);
  __int128 v99 = (id)objc_claimAutoreleasedReturnValue();

  if (v99) {
    goto LABEL_122;
  }
  v315 = -[SASamplePrinter displayNameForPid:threadId:timestamp:]((void *)a1, v97, 0LL, v93);
LABEL_123:

  if ([v326 pid])
  {
    v314 = 0LL;
  }

  else
  {
    [*(id *)(a1 + 160) kernelVersion];
    uint64_t v100 = (void *)objc_claimAutoreleasedReturnValue();
    if (v100)
    {
      [*(id *)(a1 + 160) kernelVersion];
      v101 = (void *)objc_claimAutoreleasedReturnValue();
      SACopySanitizedString(v101, 1, 0LL);
      v314 = (__CFString *)(id)objc_claimAutoreleasedReturnValue();
    }

    else
    {
      v314 = @"???";
    }
  }

  uint64_t v102 = v403;
  int v103 = (void *)v403[5];
  if (v103)
  {
    int v104 = [v103 taskSizeInBytes];
    __int16 v105 = v330;
    uint64_t v102 = v403;
    if (v104)
    {
      v292 = [(id)v403[5] taskSizeInBytes];
      *(void *)v438 = 0LL;
      v439 = v438;
      v440 = 0x2020000000LL;
      v441 = (uint64_t (*)(uint64_t, uint64_t))[(id)v397[5] taskSizeInBytes];
      id v106 = *((void *)v439 + 3);
      if (!v106)
      {
        __int16 v107 = *(void *)(a1 + 32);
        uint64_t v108 = *(void *)(a1 + 40);
        __int16 v109 = *(void *)(a1 + 48);
        v110 = *(void *)(a1 + 56);
        v366[0] = MEMORY[0x1895F87A8];
        v366[1] = 3221225472LL;
        v366[2] = __103__SASamplePrinter_printTaskHeaderForTask_specialDispatchQueueId_specialThreadId_omitSpecial_omitOther___block_invoke_1009;
        v366[3] = &unk_189F63A88;
        v366[4] = v438;
        [v326 enumerateTaskStatesBetweenStartTime:v107 startSampleIndex:v109 endTime:v108 endSampleIndex:v110 reverseOrder:1 block:v366];
        id v106 = *((void *)v439 + 3);
      }

      v291 = v106;
      _Block_object_dispose(v438, 8);
      uint64_t v102 = v403;
    }

    else
    {
      v292 = 0LL;
      v291 = 0LL;
    }
  }

  else
  {
    v292 = 0LL;
    v291 = 0LL;
    __int16 v105 = v330;
  }

  if (v102[5])
  {
    uint64_t v111 = [(id)v397[5] pageins];
    v290 = v111 - [(id)v403[5] pageins];
  }

  else
  {
    v290 = 0;
  }

  v365 = 0LL;
  v364 = 0LL;
  v363 = 0LL;
  v362 = 0LL;
  v361 = 0LL;
  v360 = 0LL;
  if ([*(id *)(a1 + 160) dataSource] != 8
    || ([*(id *)(a1 + 160) haveKPerfSched] | v105) == 1)
  {
    if ([*(id *)(a1 + 160) dataStyle] == 1)
    {
      if (!v105) {
        goto LABEL_154;
      }
    }

    else if (![*(id *)(a1 + 160) dataStyle] && (v105 & 1) == 0)
    {
      goto LABEL_154;
    }

    if ((((v324 | v334) != 0) & v105) == 0) {
      -[SATask cpuTimeNs:cpuInstructions:cpuCycles:nonThreadCpuTimeNs:nonThreadCpuInstructions:nonThreadCpuCycles:betweenStartTime:endTime:]( v326,  &v365,  &v364,  &v363,  &v362,  &v361,  &v360,  *(void **)(a1 + 32),  *(void **)(a1 + 40));
    }
    if (((v45 | v105) & obj) == 1)
    {
      if (v45)
      {
        v112 = *(void *)(*(void *)&buf[8] + 40LL);
        v365 -= *(void *)(*(void *)&buf[8] + 32LL);
        v364 -= v112;
        __int16 v113 = v363 - *(void *)(*(void *)&buf[8] + 48LL);
LABEL_153:
        v363 = v113;
        goto LABEL_154;
      }

      if (v105)
      {
        v114 = *(void *)(*(void *)&buf[8] + 40LL);
        v365 = *(void *)(*(void *)&buf[8] + 32LL);
        v364 = v114;
        __int16 v113 = *(void *)(*(void *)&buf[8] + 48LL);
        goto LABEL_153;
      }
    }
  }

LABEL_154:
  v356 = 0LL;
  v357 = &v356;
  v358 = 0x2020000000LL;
  v359 = 0LL;
  if (!(v324 | v334) || (v45 & 1) != 0 || (v105 & 1) != 0)
  {
    [v326 threads];
    v123 = (void *)objc_claimAutoreleasedReturnValue();
    v341[0] = MEMORY[0x1895F87A8];
    v341[1] = 3221225472LL;
    v341[2] = __103__SASamplePrinter_printTaskHeaderForTask_specialDispatchQueueId_specialThreadId_omitSpecial_omitOther___block_invoke_3;
    v341[3] = &unk_189F61C28;
    v341[4] = a1;
    v341[5] = &v356;
    [v123 enumerateKeysAndObjectsUsingBlock:v341];

    v325 = 0LL;
    goto LABEL_190;
  }

  if (!v334)
  {
    [v326 threads];
    v124 = (void *)objc_claimAutoreleasedReturnValue();
    v125 = [v124 count];

    v122 = v125 - 1;
LABEL_170:
    v325 = v122;
    goto LABEL_190;
  }

  [v326 threads];
  uint64_t v115 = (void *)objc_claimAutoreleasedReturnValue();
  v325 = [v115 count];

  if (v324)
  {
    v355 = 0u;
    v354 = 0u;
    v353 = 0u;
    v352 = 0u;
    [(id)v324 threadStates];
    v116 = (void *)objc_claimAutoreleasedReturnValue();
    v117 = [v116 countByEnumeratingWithState:&v352 objects:v448 count:16];
    if (v117)
    {
      v118 = *(void *)v353;
      while (2)
      {
        for (uint64_t i = 0LL; i != v117; ++i)
        {
          if (*(void *)v353 != v118) {
            objc_enumerationMutation(v116);
          }
          [*(id *)(*((void *)&v352 + 1) + 8 * i) dispatchQueue];
          v120 = (void *)objc_claimAutoreleasedReturnValue();
          v121 = v120 == (void *)v334;

          if (!v121)
          {

            goto LABEL_190;
          }
        }

        v117 = [v116 countByEnumeratingWithState:&v352 objects:v448 count:16];
        if (v117) {
          continue;
        }
        break;
      }
    }

    v122 = v325 - 1;
    goto LABEL_170;
  }

  v126 = objc_alloc_init(MEMORY[0x189603FE0]);
  v127 = *(void **)(a1 + 32);
  v128 = *(void **)(a1 + 40);
  v129 = *(void *)(a1 + 48);
  v130 = *(void *)(a1 + 56);
  v350[0] = MEMORY[0x1895F87A8];
  v350[1] = 3221225472LL;
  v350[2] = __103__SASamplePrinter_printTaskHeaderForTask_specialDispatchQueueId_specialThreadId_omitSpecial_omitOther___block_invoke_2_1010;
  v350[3] = &unk_189F63CE0;
  v131 = v126;
  v351 = v131;
  -[SARecipe enumerateStatesBetweenStartTime:startSampleIndex:endTime:endSampleIndex:reverseOrder:block:]( v334,  v127,  v129,  v128,  v130,  0,  v350);
  v349 = 0u;
  v348 = 0u;
  v347 = 0u;
  v346 = 0u;
  v132 = v131;
  v133 = [v132 countByEnumeratingWithState:&v346 objects:v447 count:16];
  if (v133)
  {
    v134 = *(void *)v347;
    do
    {
      for (uint64_t j = 0LL; j != v133; ++j)
      {
        if (*(void *)v347 != v134) {
          objc_enumerationMutation(v132);
        }
        v136 = *(void *)(*((void *)&v346 + 1) + 8 * j);
        [v326 threads];
        v137 = (void *)objc_claimAutoreleasedReturnValue();
        [v137 objectForKeyedSubscript:v136];
        v138 = (void *)objc_claimAutoreleasedReturnValue();

        v345 = 0u;
        v344 = 0u;
        v343 = 0u;
        v342 = 0u;
        [v138 threadStates];
        v139 = (void *)objc_claimAutoreleasedReturnValue();
        v140 = [v139 countByEnumeratingWithState:&v342 objects:v446 count:16];
        if (v140)
        {
          v141 = *(void *)v343;
          while (2)
          {
            for (k = 0LL; k != v140; ++k)
            {
              if (*(void *)v343 != v141) {
                objc_enumerationMutation(v139);
              }
              [*(id *)(*((void *)&v342 + 1) + 8 * k) dispatchQueue];
              v143 = (void *)objc_claimAutoreleasedReturnValue();
              v144 = v143 == (void *)v334;

              if (!v144)
              {

                goto LABEL_187;
              }
            }

            v140 = [v139 countByEnumeratingWithState:&v342 objects:v446 count:16];
            if (v140) {
              continue;
            }
            break;
          }
        }

        --v325;
LABEL_187:
      }

      v133 = [v132 countByEnumeratingWithState:&v346 objects:v447 count:16];
    }

    while (v133);
  }

LABEL_190:
  v313 = -[SASamplePrinter architectureStringForTask:](a1, v326);
  if (v321)
  {
    v145 = objc_alloc(NSString);
    v146 = -[SASamplePrinter displayNameForTask:]((void *)a1, v326);
    v312 = (void *)[v145 initWithFormat:@"%@ %@", v146, v321];
  }

  else
  {
    v312 = -[SASamplePrinter displayNameForTask:]((void *)a1, v326);
  }

  if ([v326 pid])
  {
    [v326 sharedCache];
    v147 = (void *)objc_claimAutoreleasedReturnValue();
    v148 = v147;
    if (v147)
    {
      v149 = v147;
    }

    else
    {
      [MEMORY[0x189603FE8] null];
      v149 = (id)objc_claimAutoreleasedReturnValue();
    }

    v311 = (void *)objc_msgSend(objc_alloc(MEMORY[0x189603F18]), "initWithObjects:", v149, 0);
  }

  else
  {
    v311 = 0LL;
  }

  if ([v326 resourceCoalitionID])
  {
    v150 = -[SASamplePrinter displayStringForResourceCoalition:](v326);
    v444 = v150;
    [MEMORY[0x189607968] numberWithUnsignedInteger:v425[3]];
    v151 = (void *)objc_claimAutoreleasedReturnValue();
    v445 = v151;
    [MEMORY[0x189603F68] dictionaryWithObjects:&v445 forKeys:&v444 count:1];
    v310 = (void *)objc_claimAutoreleasedReturnValue();
  }

  else
  {
    v310 = 0LL;
  }

  if ([*(id *)(a1 + 160) dataStyle] == 1 || !objc_msgSend(*(id *)(a1 + 160), "dataStyle"))
  {
    if ([*(id *)(a1 + 160) dataSource] == 8)
    {
      v288 = 0;
      goto LABEL_209;
    }

    v152 = [*(id *)(a1 + 160) dataSource] != 0;
  }

  else
  {
    v152 = 1;
  }

  v288 = v152;
LABEL_209:
  v340 = 0LL;
  -[SASamplePrinter numIOsForTask:ioSize:](a1, v326, &v340);
  if ((obj & v330) == 1)
  {
    *(void *)v438 = 0LL;
    v439 = v438;
    v440 = 0x3032000000LL;
    v441 = __Block_byref_object_copy__4;
    v442 = __Block_byref_object_dispose__4;
    v443 = 0LL;
    v153 = *(void **)(a1 + 32);
    v154 = *(void **)(a1 + 40);
    v155 = *(void *)(a1 + 48);
    v156 = *(void *)(a1 + 56);
    v339[0] = MEMORY[0x1895F87A8];
    v339[1] = 3221225472LL;
    v339[2] = __103__SASamplePrinter_printTaskHeaderForTask_specialDispatchQueueId_specialThreadId_omitSpecial_omitOther___block_invoke_5;
    v339[3] = &unk_189F63D30;
    v339[4] = a1;
    v339[5] = v438;
    -[SATask enumerateThreadStatesForThread:dispatchQueue:betweenStartTime:startSampleIndex:endTime:endSampleIndex:reverseOrder:block:]( (uint64_t)v326,  (void *)v324,  (void *)v334,  v153,  v155,  v154,  v156,  0LL,  v339);
    v157 = (_DWORD *)*((void *)v439 + 5);
    if (v157 && v157[2])
    {
      v309 = -[SAOnBehalfOfMultiple displayString](v157);
    }

    else
    {
      v309 = 0LL;
    }

    _Block_object_dispose(v438, 8);
  }

  else
  {
    v437 = v326;
    [MEMORY[0x189603F18] arrayWithObjects:&v437 count:1];
    v158 = (void *)objc_claimAutoreleasedReturnValue();
    v309 = -[SASamplePrinter displayStringForOnBehalfOfForTasks:includePid:](a1, v158);
  }

  v337 = 0u;
  v338 = 0u;
  v335 = 0u;
  v336 = 0u;
  [v326 threads];
  v159 = (void *)objc_claimAutoreleasedReturnValue();
  v160 = 0LL;
  v161 = 0LL;
  v162 = [v159 countByEnumeratingWithState:&v335 objects:v436 count:16];
  if (v162)
  {
    v331 = *(void *)v336;
    obja = v159;
    do
    {
      v163 = 0LL;
      do
      {
        if (*(void *)v336 != v331) {
          objc_enumerationMutation(obja);
        }
        [*(id *)(a1 + 144) objectForKeyedSubscript:*(void *)(*((void *)&v335 + 1) + 8 * v163)];
        v164 = (void *)objc_claimAutoreleasedReturnValue();
        v165 = v164;
        if (v164)
        {
          [v164 threadState];
          v166 = (void *)objc_claimAutoreleasedReturnValue();
          [v166 startTimestamp];
          v167 = (void *)objc_claimAutoreleasedReturnValue();
          if ([v167 gt:*(void *)(a1 + 40)])
          {

LABEL_224:
            goto LABEL_226;
          }

          [v165 threadState];
          v168 = (void *)objc_claimAutoreleasedReturnValue();
          [v168 endTimestamp];
          v169 = (void *)objc_claimAutoreleasedReturnValue();
          v170 = [v169 lt:*(void *)(a1 + 32)];

          if ((v170 & 1) == 0)
          {
            if ([v165 isPartOfADeadlock])
            {
              [v165 thread];
              v171 = (void *)objc_claimAutoreleasedReturnValue();
              [v165 threadState];
              v172 = (void *)objc_claimAutoreleasedReturnValue();
              v166 = -[SASamplePrinter displayNameForTask:thread:threadState:]((void *)a1, 0LL, v171, v172);
              if (v160) {
                [v160 addObject:v166];
              }
              else {
                v160 = (void *)objc_msgSend(objc_alloc(MEMORY[0x189603FA8]), "initWithObjects:", v166, 0);
              }
              goto LABEL_224;
            }

            if ([v165 isBlockedByADeadlock])
            {
              [v165 thread];
              v173 = (void *)objc_claimAutoreleasedReturnValue();
              [v165 threadState];
              v174 = (void *)objc_claimAutoreleasedReturnValue();
              v166 = -[SASamplePrinter displayNameForTask:thread:threadState:]((void *)a1, 0LL, v173, v174);
              if (v161) {
                [v161 addObject:v166];
              }
              else {
                v161 = (void *)objc_msgSend(objc_alloc(MEMORY[0x189603FA8]), "initWithObjects:", v166, 0);
              }
              goto LABEL_224;
            }
          }
        }

LABEL_226:
        ++v163;
      }

      while (v162 != v163);
      v159 = obja;
      v175 = [obja countByEnumeratingWithState:&v335 objects:v436 count:16];
      v162 = v175;
    }

    while (v175);
  }

  v320 = v161;
  v332 = v160;

  [v160 sortUsingSelector:sel_compare_];
  [v161 sortUsingSelector:sel_compare_];
  v287 = -[SASamplePrinter taskHasSwallowedAnExceptionNotedByHIException:](a1, v326);
  v286 = *(void **)(a1 + 8);
  [v326 mainBinary];
  objb = (id)objc_claimAutoreleasedReturnValue();
  [v326 mainBinaryPath];
  v308 = (void *)objc_claimAutoreleasedReturnValue();
  v285 = [v326 uid];
  [v326 bundleIdentifier];
  v307 = (void *)objc_claimAutoreleasedReturnValue();
  [v326 bundleVersion];
  v306 = (void *)objc_claimAutoreleasedReturnValue();
  [v326 bundleShortVersion];
  v305 = (void *)objc_claimAutoreleasedReturnValue();
  [v326 bundleBuildVersion];
  v304 = (void *)objc_claimAutoreleasedReturnValue();
  [v326 bundleProjectName];
  v303 = (void *)objc_claimAutoreleasedReturnValue();
  [v326 bundleSourceVersion];
  v302 = (void *)objc_claimAutoreleasedReturnValue();
  [v326 bundleProductBuildVersion];
  v301 = (void *)objc_claimAutoreleasedReturnValue();
  v284 = [v326 adamID];
  [v326 installerVersionID];
  v300 = (void *)objc_claimAutoreleasedReturnValue();
  v283 = [v326 developerType];
  [v326 appType];
  v299 = (void *)objc_claimAutoreleasedReturnValue();
  v282 = [v326 isBeta];
  [v326 cohortID];
  v298 = (void *)objc_claimAutoreleasedReturnValue();
  [v326 vendorID];
  v297 = (void *)objc_claimAutoreleasedReturnValue();
  [v326 distributorID];
  v295 = (void *)objc_claimAutoreleasedReturnValue();
  [v326 codesigningID];
  v294 = (void *)objc_claimAutoreleasedReturnValue();
  [v326 teamID];
  v296 = (void *)objc_claimAutoreleasedReturnValue();
  if (v326) {
    Property = objc_getProperty(v326, v176, 272LL, 1);
  }
  else {
    Property = 0LL;
  }
  v293 = Property;
  if (v288) {
    v289 = *(void *)(a1 + 64);
  }
  else {
    v289 = 0LL;
  }
  v280 = v373[3];
  v281 = v377[3];
  v278 = v433[3];
  v279 = v425[3];
  v276 = v417[3];
  v277 = v429[3];
  v274 = v409[3];
  v275 = v413[3];
  v178 = v365;
  v179 = v364;
  v180 = v363;
  v181 = v362;
  v182 = v361;
  v183 = v360;
  v273 = [v326 usesSuddenTermination];
  v184 = [v326 allowsIdleExit];
  v185 = [v326 isTranslocated];
  v186 = [v326 isUnresponsive];
  [v326 timeOfLastResponse];
  v188 = v187;
  [v326 threads];
  v189 = (void *)objc_claimAutoreleasedReturnValue();
  v190 = [v189 count];
  -[SASamplePrinter addTaskHeaderToStream:displayName:pid:mainBinary:mainBinaryPath:sharedCaches:uid:bundleIdentifier:bundleVersion:bundleShortVersion:bundleBuildVersion:bundleProjectName:bundleSourceVersion:bundleProductBuildVersion:adamID:installerVersionID:developerType:appType:isBeta:cohortID:vendorID:distributorID:codesigningID:teamID:resourceCoalitionSampleCounts:onBehalfOfProcesses:architectureString:kernelVersion:parentName:responsibleName:taskExecedFromName:taskExecedToName:pidStartTimestamp:startTimestamp:endTimestamp:startSampleIndex:endSampleIndex:numSamples:totalNumSamples:numSamplesSuspended:numSamplesTerminated:startingTaskSize:endingTaskSize:maxTaskSize:startSampleIndexOfMaxTaskSize:endSampleIndexOfMaxTaskSize:numPageins:cpuTimeNs:cpuInstructions:cpuCycles:nonThreadCpuTimeNs:nonThreadCpuInstructions:nonThreadCpuCycles:usesSuddenTermination:allowsIdleExit:isTranslocated:isUnresponsive:timeOfLastResponse:numThreads:numIdleWorkQueueThreads:numOtherHiddenThreads:hieSwallowedException:wqExceededConstrainedThreadLimit:wqExceededTotalThreadLimit:threadsDeadlocked:threadsBlockedByADeadlock:ioSize:numIOs:isReportHeader:]( a1,  v286,  v312,  0xFFFFFFFFLL,  objb,  v308,  v311,  v285,  v188,  v307,  v306,  v305,  v304,  v303,  v302,  v301,  v284,  v300,  v283,  v299,  v282,  v298,  v297,  v295,  v294,  v296,  v310,  v309,  v313,  v314,  v316,  v315,  v319,  v317,  v293,  v323,  v322,  v281,  v280,  v279,  v289,  v278,  v277,  v292,  v291,  v276,  v275,  v274,  v290,
    v178,
    v179,
    v180,
    v181,
    v182,
    v183,
    v273,
    v184,
    v185,
    v186,
    v190,
    v357[3],
    v325,
    v287);

  __int128 v54 = v425[3];
  _Block_object_dispose(&v356, 8);

  _Block_object_dispose(&v372, 8);
  _Block_object_dispose(&v376, 8);
LABEL_245:

  _Block_object_dispose(buf, 8);
  _Block_object_dispose(&v388, 8);
  _Block_object_dispose(&v392, 8);
  _Block_object_dispose(&v396, 8);

  _Block_object_dispose(&v402, 8);
  _Block_object_dispose(&v408, 8);
  _Block_object_dispose(&v412, 8);
  _Block_object_dispose(&v416, 8);
  _Block_object_dispose(v420, 8);
  _Block_object_dispose(v422, 8);
  _Block_object_dispose(&v424, 8);
  _Block_object_dispose(&v428, 8);
  _Block_object_dispose(&v432, 8);

  return v54;
}

void sub_186D37668(_Unwind_Exception *a1)
{
}

uint64_t saos_printf_microstackshot_state(void *a1, uint64_t a2, int a3, int a4, int a5)
{
  id v9 = a1;
  double v10 = v9;
  if (a4)
  {
    uint64_t v11 = objc_msgSend(v9, "printWithFormat:", @"state 0x%x", a2);
    goto LABEL_71;
  }

  if ((a2 & 2) != (a3 & 2))
  {
    if ((a2 & 2) != 0) {
      uint64_t v16 = @"Frontmost App";
    }
    else {
      uint64_t v16 = @"Non-Frontmost App";
    }
    uint64_t v11 = [v9 appendString:v16];
    int v12 = a2 & 0x20;
    if (v12 == (a3 & 0x20)) {
      goto LABEL_18;
    }
    int v17 = objc_msgSend(v10, "appendString:", @", ") + v11;
LABEL_14:
    if (v12) {
      uint64_t v18 = @"Suppressed";
    }
    else {
      uint64_t v18 = @"Non-Suppressed";
    }
    uint64_t v11 = [v10 appendString:v18] + v17;
LABEL_18:
    int v15 = a2 & 0x80;
    if (v15 == (a3 & 0x80)) {
      goto LABEL_24;
    }
    int v13 = objc_msgSend(v10, "appendString:", @", ") + v11;
LABEL_20:
    if (v15) {
      int v19 = @"Kernel mode";
    }
    else {
      int v19 = @"User mode";
    }
    uint64_t v11 = [v10 appendString:v19] + v13;
LABEL_24:
    int v14 = 1;
    if (!a5) {
      goto LABEL_48;
    }
LABEL_25:
    if ((a2 & 0x10) == 0)
    {
      if ((a3 & 0x10) == 0) {
        goto LABEL_48;
      }
      if (v14) {
        LODWORD(v11) = objc_msgSend(v10, "appendString:", @", ") + v11;
      }
      uint64_t v20 = @"Unknown User Activity, Unknown Power Source";
      goto LABEL_46;
    }

    if ((a3 & 0x10) == 0 || ((a3 ^ a2) & 4) != 0)
    {
      if (v14) {
        LODWORD(v11) = objc_msgSend(v10, "appendString:", @", ") + v11;
      }
      if ((a2 & 4) != 0) {
        id v21 = @"User Idle";
      }
      else {
        id v21 = @"User Active";
      }
      uint64_t v11 = [v10 appendString:v21] + v11;
    }

    else
    {
      if (!v14) {
        goto LABEL_43;
      }
    }

    LODWORD(v11) = objc_msgSend(v10, "appendString:", @", ") + v11;
LABEL_43:
    if ((a2 & 8) != 0) {
      uint64_t v20 = @"On Battery";
    }
    else {
      uint64_t v20 = @"On AC";
    }
LABEL_46:
    uint64_t v11 = [v10 appendString:v20] + v11;
LABEL_47:
    int v14 = 1;
    goto LABEL_48;
  }

  int v12 = a2 & 0x20;
  if (v12 != (a3 & 0x20))
  {
    int v17 = 0;
    goto LABEL_14;
  }

  int v13 = 0;
  uint64_t v11 = 0LL;
  int v14 = 0;
  int v15 = a2 & 0x80;
  if (v15 != (a3 & 0x80)) {
    goto LABEL_20;
  }
  if (a5) {
    goto LABEL_25;
  }
LABEL_48:
  if ((a2 & 0x700) == (a3 & 0x700))
  {
    unsigned int v22 = a2 & 0x3800;
    if (v22 == (a3 & 0x3800)) {
      goto LABEL_64;
    }
    if (!v14) {
      goto LABEL_59;
    }
  }

  else
  {
    if (v14) {
      LODWORD(v11) = objc_msgSend(v10, "appendString:", @", ") + v11;
    }
    uint64_t v23 = ((unsigned __int16)(a2 & 0x700) >> 8) - 1LL;
    else {
      int v24 = off_189F644F8[v23];
    }
    uint64_t v11 = objc_msgSend(v10, "printWithFormat:", @"Effective %s", v24) + v11;
    unsigned int v22 = a2 & 0x3800;
    if (v22 == (a3 & 0x3800)) {
      goto LABEL_63;
    }
  }

  LODWORD(v11) = objc_msgSend(v10, "appendString:", @", ") + v11;
LABEL_59:
  uint64_t v25 = (v22 >> 11) - 1LL;
  else {
    uint64_t v26 = off_189F644F8[v25];
  }
  uint64_t v11 = objc_msgSend(v10, "printWithFormat:", @"Requested %s", v26) + v11;
LABEL_63:
  int v14 = 1;
LABEL_64:
  unsigned int v27 = a2 & 0x1C000;
  if (v27 != (a3 & 0x1C000))
  {
    if (v14) {
      LODWORD(v11) = objc_msgSend(v10, "appendString:", @", ") + v11;
    }
    uint64_t v28 = (v27 >> 14) - 1LL;
    else {
      uint64_t v29 = off_189F644F8[v28];
    }
    uint64_t v11 = objc_msgSend(v10, "printWithFormat:", @"Override %s", v29) + v11;
  }

void sub_186D3D318( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
}

LABEL_109:
      uint64_t v69 = 0LL;
LABEL_110:

      goto LABEL_111;
    }
  }

  if (self) {
    *((_BYTE *)self + _Block_object_dispose(va, 8) = 1;
  }
LABEL_119:

  _Block_object_dispose(v175, 8);
  _Block_object_dispose(&v177, 8);
  _Block_object_dispose(v181, 8);

  _Block_object_dispose(v183, 8);
  _Block_object_dispose(v185, 8);
  _Block_object_dispose(&v186, 8);
  _Block_object_dispose(&v190, 8);
  _Block_object_dispose(&v194, 8);
  _Block_object_dispose(&v198, 8);
  _Block_object_dispose(&v202, 8);
  _Block_object_dispose(&v206, 8);
  _Block_object_dispose(&v210, 8);
  _Block_object_dispose(&v214, 8);
  _Block_object_dispose(&v218, 8);
  _Block_object_dispose(&v222, 8);
  _Block_object_dispose(&v226, 8);
  _Block_object_dispose(&v230, 8);
  _Block_object_dispose(&v234, 8);

  _Block_object_dispose(buf, 8);
  _Block_object_dispose(&v240, 8);
  _Block_object_dispose(&v244, 8);
  _Block_object_dispose(&v248, 8);
  objc_autoreleasePoolPop(context);
}

void sub_186D3F61C(_Unwind_Exception *a1)
{
}

LABEL_118:
}

LABEL_106:
      __int128 v85 = (void *)v368[5];
      if (v85)
      {
        objc_msgSend(v85, "appendString:", @", ");
      }

      else
      {
        __int128 v86 = [objc_alloc(MEMORY[0x189607940]) initWithCapacity:128];
        char v87 = (void *)v368[5];
        v368[5] = v86;
      }

      __int128 v88 = (void *)v368[5];
      [v352 dispatchQueue];
      __int128 v89 = (void *)objc_claimAutoreleasedReturnValue();
      -[SASamplePrinter displayNameForDispatchQueue:](v89);
      __int128 v90 = (void *)objc_claimAutoreleasedReturnValue();
      [v88 appendFormat:@"%@ %@", @"DispatchQueue", v90];

      if ((a21 & 1) != 0)
      {
        if (!v351) {
          goto LABEL_121;
        }
        goto LABEL_113;
      }

LABEL_135:
      if (v350) {
        v110 = v349 == v350;
      }
      else {
        v110 = 1;
      }
      uint64_t v111 = v110;
      v346 = v111;
      if (v110)
      {
LABEL_155:
        if ((v342 & 1) != 0) {
          goto LABEL_205;
        }
        v119 = [*(id *)(v348 + 16) displayQoSTransitionsBetweenUnspecifiedAndUnavailable];
        v120 = MEMORY[0x1895F87A8];
        v365[0] = MEMORY[0x1895F87A8];
        v365[1] = 3221225472LL;
        v365[2] = __461__SASamplePrinter_stateChangeStringForThreadState_serialDispatchQueue_swiftTaskStates_thread_threadStateIndexes_taskState_task_iteratorIndex_missingStateIsInAnotherStack_numSamplesOmittedSincePreviousDisplayedSample_sampleTimestamp_previousSampleTimestamp_previousDisplayedTimestamp_previousTaskState_previousThread_previousThreadState_dispatchQueueChanges_swiftTaskChanges_priorityChanges_nameChanges_threadChanges_isTimeJump_ioEventsSincePreviousThreadState___block_invoke;
        v365[3] = &__block_descriptor_33_e8_B12__0C8l;
        v366 = v119;
        v121 = (uint64_t (**)(void, void))MEMORY[0x186E47C94](v365);
        v363[0] = v120;
        v363[1] = 3221225472LL;
        v363[2] = __461__SASamplePrinter_stateChangeStringForThreadState_serialDispatchQueue_swiftTaskStates_thread_threadStateIndexes_taskState_task_iteratorIndex_missingStateIsInAnotherStack_numSamplesOmittedSincePreviousDisplayedSample_sampleTimestamp_previousSampleTimestamp_previousDisplayedTimestamp_previousTaskState_previousThread_previousThreadState_dispatchQueueChanges_swiftTaskChanges_priorityChanges_nameChanges_threadChanges_isTimeJump_ioEventsSincePreviousThreadState___block_invoke_2;
        v363[3] = &__block_descriptor_33_e11_B16__0C8C12l;
        v364 = v119;
        v122 = (uint64_t (**)(void, void, void))MEMORY[0x186E47C94](v363);
        if (v351)
        {
          v123 = v122[2](v122, [v351 threadRequestedQos], objc_msgSend(v352, "threadRequestedQos"));
          v124 = v122[2]( v122,  [v351 threadRequestedQosOverride],  objc_msgSend(v352, "threadRequestedQosOverride"));
          v125 = v122[2](v122, [v351 threadQosPromote], objc_msgSend(v352, "threadQosPromote"));
          v126 = v122[2]( v122,  [v351 threadQosKEventOverride],  objc_msgSend(v352, "threadQosKEventOverride"));
          v333 = v122[2]( v122,  [v351 threadQosWorkQueueOverride],  objc_msgSend(v352, "threadQosWorkQueueOverride"));
          v127 = v122[2]( v122,  [v351 threadQosWorkloopServicerOverride],  objc_msgSend(v352, "threadQosWorkloopServicerOverride"));
          v128 = [v352 isPromotedAboveTask];
          if (v128 == [v351 isPromotedAboveTask])
          {
            if (((v123 | v124 | v125 | v126 | v333 | v127) & 1) == 0)
            {
              v129 = [v352 threadQos];
LABEL_166:
              v130 = 0;
              v332 = 0;
              v333 = 0;
              v125 = 0;
              LOBYTE(v123) = 0;
              LOBYTE(v124) = 0;
              LOBYTE(v126) = 0;
              LOBYTE(v127) = 0;
LABEL_167:
              v131 = (void *)v368[5];
              if (v131)
              {
                objc_msgSend(v131, "appendString:", @", ");
              }

              else
              {
                v132 = [objc_alloc(MEMORY[0x189607940]) initWithCapacity:128];
                v133 = (void *)v368[5];
                v368[5] = v132;
              }

              v134 = (void *)v368[5];
              StringForThreadQoS([v352 threadQos]);
              v135 = (void *)objc_claimAutoreleasedReturnValue();
              [v134 appendFormat:@"thread QoS %@", v135];

              if (!v130) {
                goto LABEL_204;
              }
              objc_msgSend((id)v368[5], "appendString:", @" (");
              if ((v123 & 1) != 0)
              {
                v136 = (void *)v368[5];
                StringForThreadQoS([v352 threadRequestedQos]);
                v137 = (void *)objc_claimAutoreleasedReturnValue();
                [v136 appendFormat:@"requested %@", v137];

                if ((v124 & 1) == 0)
                {
                  if ((v125 & 1) == 0)
                  {
LABEL_186:
                    if ((v126 & 1) == 0)
                    {
                      if ((v333 & 1) == 0)
                      {
LABEL_193:
                        if ((v127 & 1) != 0)
                        {
                          objc_msgSend((id)v368[5], "appendString:", @", ");
LABEL_195:
                          v146 = (void *)v368[5];
                          StringForThreadQoS([v352 threadQosWorkloopServicerOverride]);
                          v147 = (void *)objc_claimAutoreleasedReturnValue();
                          [v146 appendFormat:@"workloop servicer override %@", v147];

                          if (!v332) {
                            goto LABEL_203;
                          }
                          goto LABEL_198;
                        }

                        if ((v332 & 1) != 0)
                        {
LABEL_198:
                          objc_msgSend((id)v368[5], "appendString:", @", ");
                          goto LABEL_199;
                        }

LABEL_203:
                        [(id)v368[5] appendString:@""]);
                        goto LABEL_204;
                      }

                      goto LABEL_191;
                    }

                    objc_msgSend((id)v368[5], "appendString:", @", ");
LABEL_188:
                    v142 = (void *)v368[5];
                    StringForThreadQoS([v352 threadQosKEventOverride]);
                    v143 = (void *)objc_claimAutoreleasedReturnValue();
                    [v142 appendFormat:@"kevent override %@", v143];

                    if (!v333) {
                      goto LABEL_193;
                    }
LABEL_191:
                    objc_msgSend((id)v368[5], "appendString:", @", ");
LABEL_192:
                    v144 = (void *)v368[5];
                    StringForThreadQoS([v352 threadQosWorkQueueOverride]);
                    v145 = (void *)objc_claimAutoreleasedReturnValue();
                    [v144 appendFormat:@"work queue override %@", v145];

                    goto LABEL_193;
                  }

                  goto LABEL_184;
                }

                objc_msgSend((id)v368[5], "appendString:", @", ");
              }

              else if ((v124 & 1) == 0)
              {
                if ((v125 & 1) == 0)
                {
                  if ((v126 & 1) == 0)
                  {
                    if ((v333 & 1) == 0)
                    {
                      if ((v127 & 1) != 0) {
                        goto LABEL_195;
                      }
                      if ((v332 & 1) != 0)
                      {
LABEL_199:
                        else {
                          v148 = @"thread limited by process clamp";
                        }
                        [(id)v368[5] appendFormat:v148];
                        goto LABEL_203;
                      }

                      goto LABEL_203;
                    }

                    goto LABEL_192;
                  }

                  goto LABEL_188;
                }

                goto LABEL_185;
              }

              v138 = (void *)v368[5];
              StringForThreadQoS([v352 threadRequestedQosOverride]);
              v139 = (void *)objc_claimAutoreleasedReturnValue();
              [v138 appendFormat:@"requested override %@", v139];

              if (!v125) {
                goto LABEL_186;
              }
LABEL_184:
              objc_msgSend((id)v368[5], "appendString:", @", ");
LABEL_185:
              v140 = (void *)v368[5];
              StringForThreadQoS([v352 threadQosPromote]);
              v141 = (void *)objc_claimAutoreleasedReturnValue();
              [v140 appendFormat:@"promote %@", v141];

              goto LABEL_186;
            }

            goto LABEL_164;
          }
        }

        else
        {
          v123 = v121[2](v121, [v352 threadRequestedQos]);
          v124 = v121[2](v121, [v352 threadRequestedQosOverride]);
          v125 = v121[2](v121, [v352 threadQosPromote]);
          v126 = v121[2](v121, [v352 threadQosKEventOverride]);
          v333 = v121[2](v121, [v352 threadQosWorkQueueOverride]);
          v127 = v121[2](v121, [v352 threadQosWorkloopServicerOverride]);
          if (([v352 isPromotedAboveTask] & 1) == 0)
          {
            if (((v123 | v124 | v125 | v126 | v333 | v127) & 1) == 0)
            {
              if (![v352 threadQos])
              {
LABEL_204:

LABEL_205:
                if ((v346 & 1) != 0)
                {
                  if (!v352) {
                    goto LABEL_267;
                  }
                  goto LABEL_234;
                }

                if (![v337 usesSuddenTermination])
                {
LABEL_220:
                  if (!v349)
                  {
                    if (([v350 isBoosted] & 1) == 0) {
                      goto LABEL_233;
                    }
                    goto LABEL_224;
                  }

LABEL_221:
                  v156 = [v350 isBoosted];
                  if (v156 == [v349 isBoosted])
                  {
LABEL_233:
                    if (!v352) {
                      goto LABEL_260;
                    }
LABEL_234:
                    if (v351 != v352)
                    {
                      if (v351)
                      {
                        v163 = [v351 isDarwinBG];
                        if (v163 != [v352 isDarwinBG])
                        {
LABEL_237:
                          v164 = (void *)v368[5];
                          if (v164)
                          {
                            objc_msgSend(v164, "appendString:", @", ");
                          }

                          else
                          {
                            v166 = [objc_alloc(MEMORY[0x189607940]) initWithCapacity:128];
                            v167 = (void *)v368[5];
                            v368[5] = v166;
                          }

                          v168 = (void *)v368[5];
                          v169 = [v352 isDarwinBG];
                          v170 = @"not ";
                          if (v169) {
                            v170 = &stru_189F64BD8;
                          }
                          [v168 appendFormat:@"thread %@darwinbg", v170];
                          v165 = 0;
LABEL_245:
                          if ((v346 & 1) != 0) {
                            goto LABEL_267;
                          }
                          if (v349)
                          {
                            v171 = [v349 isDarwinBG];
                            if (v171 == [v350 isDarwinBG])
                            {
LABEL_260:
                              [v349 donatingUniquePids];
                              v178 = (void *)objc_claimAutoreleasedReturnValue();
                              v179 = [v350 donatingUniquePids];
                              v180 = (void *)v179;
                              if ((v178 != 0LL) != (v179 != 0)
                                || v178 && v179 && ([v178 isEqualToSet:v179] & 1) == 0)
                              {
                                v359[0] = MEMORY[0x1895F87A8];
                                v359[1] = 3221225472LL;
                                v359[2] = __461__SASamplePrinter_stateChangeStringForThreadState_serialDispatchQueue_swiftTaskStates_thread_threadStateIndexes_taskState_task_iteratorIndex_missingStateIsInAnotherStack_numSamplesOmittedSincePreviousDisplayedSample_sampleTimestamp_previousSampleTimestamp_previousDisplayedTimestamp_previousTaskState_previousThread_previousThreadState_dispatchQueueChanges_swiftTaskChanges_priorityChanges_nameChanges_threadChanges_isTimeJump_ioEventsSincePreviousThreadState___block_invoke_3;
                                v359[3] = &unk_189F640E0;
                                v360 = v337;
                                v361 = v348;
                                v362 = &v367;
                                v181 = MEMORY[0x186E47C94](v359);
                                v182 = (void (**)(void, void, void, void, void))v181;
                                if (v340 != 0LL && v178 != 0LL) {
                                  (*(void (**)(uint64_t, void *, void *, const __CFString *, void *))(v181 + 16))( v181,  v178,  v180,  @"dropped",  v340);
                                }
                                [v350 startTimestamp];
                                v183 = (void *)objc_claimAutoreleasedReturnValue();
                                if (v183) {
                                  ((void (**)(void, void *, void *, const __CFString *, void *))v182)[2]( v182,  v180,  v178,  @"received",  v183);
                                }
                              }

LABEL_267:
                              if ((v342 & 1) == 0)
                              {
                                if (v351)
                                {
                                  v184 = [v352 isSuspended];
                                  if (v184 != [v351 isSuspended])
                                  {
LABEL_271:
                                    v185 = 1;
                                    goto LABEL_278;
                                  }
                                }

                                else if ([v352 isSuspended])
                                {
                                  goto LABEL_271;
                                }
                              }

                              v185 = 0;
LABEL_278:
                              if ((v346 & 1) != 0) {
                                goto LABEL_325;
                              }
                              if (v349)
                              {
                                v186 = [v350 suspendCount];
                                v187 = v186 != [v349 suspendCount];
                                v188 = [v350 isPidSuspended];
                              }

                              else
                              {
                                v187 = [v350 suspendCount] != 0;
                                if ([v350 isPidSuspended])
                                {
LABEL_281:
                                  if ([v350 isPidSuspended])
                                  {
                                    v189 = (void *)v368[5];
                                    if (v189)
                                    {
                                      objc_msgSend(v189, "appendString:", @", ");
                                      v190 = @"process pidsuspended";
LABEL_303:
                                      [(id)v368[5] appendFormat:v190];
                                      if (!v187) {
                                        goto LABEL_325;
                                      }
                                      v191 = 1;
LABEL_305:
                                      if ([v350 suspendCount])
                                      {
                                        v204 = (void *)v368[5];
                                        if (v204)
                                        {
                                          objc_msgSend(v204, "appendString:", @", ");
                                        }

                                        else
                                        {
                                          v208 = [objc_alloc(MEMORY[0x189607940]) initWithCapacity:128];
                                          v209 = (void *)v368[5];
                                          v368[5] = v208;
                                        }

                                        v200 = (void *)v368[5];
                                        v201 = [v350 suspendCount];
                                        v202 = @"process suspend count %d";
LABEL_318:
                                        objc_msgSend(v200, "appendFormat:", v202, v201);
                                        goto LABEL_325;
                                      }

                                      if ((v191 & 1) != 0 || ![v350 isPidSuspended])
                                      {
                                        if ((v185 & 1) == 0 && [v352 isSuspended])
                                        {
                                          v207 = (void *)v368[5];
                                          if (v207)
                                          {
                                            objc_msgSend(v207, "appendString:", @", ");
                                          }

                                          else
                                          {
                                            v275 = [objc_alloc(MEMORY[0x189607940]) initWithCapacity:128];
                                            v276 = (void *)v368[5];
                                            v368[5] = v275;
                                          }

                                          [(id)v368[5] appendFormat:@"process suspend count 0 (thread still suspended)"];
                                          goto LABEL_336;
                                        }

                                        v210 = (void *)v368[5];
                                        if (v210)
                                        {
                                          objc_msgSend(v210, "appendString:", @", ");
                                          v206 = @"process suspend count 0";
                                          goto LABEL_324;
                                        }

                                        v211 = [objc_alloc(MEMORY[0x189607940]) initWithCapacity:128];
                                        v212 = (void *)v368[5];
                                        v368[5] = v211;
                                        v206 = @"process suspend count 0";
                                      }

                                      else
                                      {
                                        v205 = (void *)v368[5];
                                        if (v205)
                                        {
                                          objc_msgSend(v205, "appendString:", @", ");
                                          v206 = @"process suspend count 0 (process still pidsuspended)";
LABEL_324:
                                          [(id)v368[5] appendFormat:v206];
LABEL_325:
                                          if (!v185) {
                                            goto LABEL_335;
                                          }
                                          v214 = [v352 isSuspended];
                                          v215 = (void *)v368[5];
                                          if (v214)
                                          {
                                            if (v215)
                                            {
                                              objc_msgSend(v215, "appendString:", @", ");
                                              v216 = @"thread suspended";
LABEL_334:
                                              [(id)v368[5] appendFormat:v216];
LABEL_335:
                                              if ((v346 & 1) != 0) {
                                                goto LABEL_371;
                                              }
LABEL_336:
                                              if (v349)
                                              {
                                                v220 = [v350 isSuppressed];
                                                if (v220 == [v349 isSuppressed])
                                                {
LABEL_349:
                                                  v227 = [v350 latencyQos];
                                                  goto LABEL_353;
                                                }
                                              }

                                              else if (([v350 isSuppressed] & 1) == 0)
                                              {
                                                goto LABEL_351;
                                              }

                                              v221 = [v350 isSuppressed];
                                              v222 = (void *)v368[5];
                                              if (v221)
                                              {
                                                if (v222)
                                                {
                                                  objc_msgSend(v222, "appendString:", @", ");
                                                  v223 = @"process suppressed";
                                                  goto LABEL_348;
                                                }

                                                v224 = [objc_alloc(MEMORY[0x189607940]) initWithCapacity:128];
                                                v225 = (void *)v368[5];
                                                v368[5] = v224;
                                                v223 = @"process suppressed";
                                              }

                                              else
                                              {
                                                if (v222)
                                                {
                                                  objc_msgSend(v222, "appendString:", @", ");
                                                  v223 = @"process unsuppressed";
                                                  goto LABEL_348;
                                                }

                                                v226 = [objc_alloc(MEMORY[0x189607940]) initWithCapacity:128];
                                                v225 = (void *)v368[5];
                                                v368[5] = v226;
                                                v223 = @"process unsuppressed";
                                              }

LABEL_348:
                                              [(id)v368[5] appendFormat:v223];
                                              if (v349) {
                                                goto LABEL_349;
                                              }
LABEL_351:
                                              v228 = [v350 latencyQos];
                                              if (!v228 || v228 == 16711681)
                                              {
LABEL_371:
                                                if ((v342 & 1) == 0)
                                                {
                                                  if (v351
                                                    && (v240 = [v352 ioTier],
                                                        v240 == [v351 ioTier])
                                                    && (v241 = [v352 isIOPassive],
                                                        v241 == [v351 isIOPassive]))
                                                  {
                                                    if ((a20 & 1) == 0) {
                                                      goto LABEL_399;
                                                    }
                                                  }

                                                  else
                                                  {
                                                    v242 = (void *)v368[5];
                                                    if (v242)
                                                    {
                                                      objc_msgSend(v242, "appendString:", @", ");
                                                    }

                                                    else
                                                    {
                                                      v243 = [objc_alloc(MEMORY[0x189607940]) initWithCapacity:128];
                                                      v244 = (void *)v368[5];
                                                      v368[5] = v243;
                                                    }

                                                    objc_msgSend( (id)v368[5],  "appendFormat:",  @"IO tier %d",  objc_msgSend(v352, "ioTier"));
                                                    if ((a20 & 1) == 0) {
                                                      goto LABEL_399;
                                                    }
                                                    if (!v351) {
                                                      goto LABEL_386;
                                                    }
                                                  }

                                                  v245 = [v351 scheduledPriority];
                                                  if (v245 != [v352 scheduledPriority]
                                                    || (v246 = [v351 basePriority],
                                                        v246 != [v352 basePriority]))
                                                  {
LABEL_386:
                                                    if (([v352 scheduledPriority] & 0x80000000) == 0)
                                                    {
                                                      v247 = [v352 basePriority];
                                                      v248 = (void *)v368[5];
                                                      if (v247 < 0)
                                                      {
                                                        if (v248)
                                                        {
                                                          objc_msgSend(v248, "appendString:", @", ");
                                                        }

                                                        else
                                                        {
                                                          v252 = [objc_alloc(MEMORY[0x189607940]) initWithCapacity:128];
                                                          v253 = (void *)v368[5];
                                                          v368[5] = v252;
                                                        }

                                                        objc_msgSend( (id)v368[5],  "appendFormat:",  @"priority %d",  objc_msgSend(v352, "scheduledPriority"));
                                                      }

                                                      else
                                                      {
                                                        if (v248)
                                                        {
                                                          objc_msgSend(v248, "appendString:", @", ");
                                                        }

                                                        else
                                                        {
                                                          v250 = [objc_alloc(MEMORY[0x189607940]) initWithCapacity:128];
                                                          v251 = (void *)v368[5];
                                                          v368[5] = v250;
                                                        }

                                                        objc_msgSend( (id)v368[5],  "appendFormat:",  @"priority %d (%d)",  objc_msgSend(v352, "scheduledPriority"),  objc_msgSend(v352, "basePriority"));
                                                      }
                                                    }
                                                  }
                                                }

LABEL_399:
                                                if ([v343 count])
                                                {
                                                  v254 = (void *)v368[5];
                                                  if (v254)
                                                  {
                                                    objc_msgSend(v254, "appendString:", @", ");
                                                  }

                                                  else
                                                  {
                                                    v255 = [objc_alloc(MEMORY[0x189607940]) initWithCapacity:128];
                                                    v256 = (void *)v368[5];
                                                    v368[5] = v255;
                                                  }

                                                  v257 = (void *)v368[5];
                                                  v258 = (void *)-[SASamplePrinter copyDescriptionForIOEvents:]( (id *)v348,  v343);
                                                  [v257 appendString:v258];
                                                }

                                                if ((v334 & 1) == 0)
                                                {
                                                  [*(id *)(v348 + 160) mountStatusTracker];
                                                  v259 = (void *)objc_claimAutoreleasedReturnValue();
                                                  v260 = -[SAMountStatusTracker hasUnresponsiveMountsForThreadID:]( (uint64_t)v259,  [v347 threadId]);

                                                  if (v260)
                                                  {
                                                    v261 = v340;
                                                    if (!v340) {
                                                      v261 = *(void **)(v348 + 32);
                                                    }
                                                    v262 = v261;
                                                    if (v338 | v336)
                                                    {
                                                      *(void *)buf = 0LL;
                                                      *(void *)&uint8_t buf[8] = buf;
                                                      *(void *)&uint8_t buf[16] = 0x3032000000LL;
                                                      v374 = __Block_byref_object_copy__4;
                                                      *(void *)v375 = __Block_byref_object_dispose__4;
                                                      v263 = v352;
                                                      *(void *)&v375[8] = v263;
                                                      v264 = *(void **)(v348 + 40);
                                                      v355[0] = MEMORY[0x1895F87A8];
                                                      v355[1] = 3221225472LL;
                                                      v355[2] = __461__SASamplePrinter_stateChangeStringForThreadState_serialDispatchQueue_swiftTaskStates_thread_threadStateIndexes_taskState_task_iteratorIndex_missingStateIsInAnotherStack_numSamplesOmittedSincePreviousDisplayedSample_sampleTimestamp_previousSampleTimestamp_previousDisplayedTimestamp_previousTaskState_previousThread_previousThreadState_dispatchQueueChanges_swiftTaskChanges_priorityChanges_nameChanges_threadChanges_isTimeJump_ioEventsSincePreviousThreadState___block_invoke_4;
                                                      v355[3] = &unk_189F64108;
                                                      v356 = v347;
                                                      v358 = buf;
                                                      v357 = v263;
                                                      -[SASamplePrinter iterateDispatchQueue:orSwiftTaskStates:orThread:threadStateIndexes:startingAtIndex:endingAfterTimestamp:task:stopAtTimeJumps:callback:]( v348,  (void *)v338,  (void *)v336,  0LL,  0LL,  a9 + 1,  v264,  0LL,  0,  v355);
                                                      [*(id *)(*(void *)&buf[8] + 40) endTimestamp];
                                                      v265 = (void *)objc_claimAutoreleasedReturnValue();

                                                      _Block_object_dispose(buf, 8);
                                                    }

                                                    else if (v335)
                                                    {
                                                      [v347 threadStates];
                                                      v266 = (void *)objc_claimAutoreleasedReturnValue();
                                                      [v335 lastObject];
                                                      v267 = (void *)objc_claimAutoreleasedReturnValue();
                                                      objc_msgSend( v266,  "objectAtIndexedSubscript:",  objc_msgSend(v267, "unsignedLongValue"));
                                                      v268 = (void *)objc_claimAutoreleasedReturnValue();
                                                      [v268 endTimestamp];
                                                      v265 = (void *)objc_claimAutoreleasedReturnValue();
                                                    }

                                                    else
                                                    {
                                                      [v347 lastThreadStateOnOrBeforeTime:*(void *)(v348 + 40) sampleIndex:*(void *)(v348 + 56)];
                                                      v269 = (void *)objc_claimAutoreleasedReturnValue();
                                                      [v269 endTimestamp];
                                                      v265 = (void *)objc_claimAutoreleasedReturnValue();
                                                    }

                                                    if ([*(id *)(v348 + 160) sanitizePaths]) {
                                                      v270 = os_variant_has_internal_diagnostics() ^ 1;
                                                    }
                                                    else {
                                                      v270 = 0;
                                                    }
                                                    [*(id *)(v348 + 160) mountStatusTracker];
                                                    v271 = (void *)objc_claimAutoreleasedReturnValue();
                                                    v272 = [v347 threadId];
                                                    v353[0] = MEMORY[0x1895F87A8];
                                                    v353[1] = 3221225472LL;
                                                    v353[2] = __461__SASamplePrinter_stateChangeStringForThreadState_serialDispatchQueue_swiftTaskStates_thread_threadStateIndexes_taskState_task_iteratorIndex_missingStateIsInAnotherStack_numSamplesOmittedSincePreviousDisplayedSample_sampleTimestamp_previousSampleTimestamp_previousDisplayedTimestamp_previousTaskState_previousThread_previousThreadState_dispatchQueueChanges_swiftTaskChanges_priorityChanges_nameChanges_threadChanges_isTimeJump_ioEventsSincePreviousThreadState___block_invoke_5;
                                                    v353[3] = &unk_189F64130;
                                                    v354 = v270;
                                                    v353[4] = &v367;
                                                    -[SAMountStatusTracker enumerateMountsBlockingThread:betweenStartTime:endTime:block:]( (uint64_t)v271,  v272,  v262,  v265,  v353);
                                                  }
                                                }

                                                v273 = (id)v368[5];
                                                _Block_object_dispose(&v367, 8);

                                                goto LABEL_418;
                                              }

LABEL_353:
                                              v229 = [v350 latencyQos];
                                              v230 = (void *)v368[5];
                                              if (v229)
                                              {
                                                if (v230)
                                                {
                                                  objc_msgSend(v230, "appendString:", @", ");
                                                }

                                                else
                                                {
                                                  v231 = [objc_alloc(MEMORY[0x189607940]) initWithCapacity:128];
                                                  v232 = (void *)v368[5];
                                                  v368[5] = v231;
                                                }

                                                v233 = (void *)v368[5];
                                                LODWORD(v234) = [v350 latencyQos] - 16711681;
                                                else {
                                                  v234 = v234;
                                                }
                                                objc_msgSend(v233, "appendFormat:", @"timers tier %d", v234);
                                              }

                                              else
                                              {
                                                if (v230)
                                                {
                                                  objc_msgSend(v230, "appendString:", @", ");
                                                }

                                                else
                                                {
                                                  v235 = [objc_alloc(MEMORY[0x189607940]) initWithCapacity:128];
                                                  v236 = (void *)v368[5];
                                                  v368[5] = v235;
                                                }

                                                [(id)v368[5] appendFormat:@"timers tier unspecified"];
                                              }

                                              v237 = [v350 latencyQos];
                                              v238 = @" (normal)";
                                              if (v237 && v237 != 16711681)
                                              {
                                                if (objc_msgSend(v350, "latencyQos", @" (normal)")
                                                   - 16711682 >= 3)
                                                {
                                                  v249 = [v350 latencyQos];
                                                  v239 = (void *)v368[5];
                                                  if ((v249 - 16711685) >= 2)
                                                  {
                                                    objc_msgSend( v239,  "appendFormat:",  @" (unknown: 0x%x)",  objc_msgSend(v350, "latencyQos"));
                                                    goto LABEL_371;
                                                  }

                                                  v238 = @" (throttled)";
LABEL_370:
                                                  [v239 appendString:v238];
                                                  goto LABEL_371;
                                                }

                                                v238 = @" (coalesced)";
                                              }

                                              v239 = (void *)v368[5];
                                              goto LABEL_370;
                                            }

                                            v217 = [objc_alloc(MEMORY[0x189607940]) initWithCapacity:128];
                                            v218 = (void *)v368[5];
                                            v368[5] = v217;
                                            v216 = @"thread suspended";
                                          }

                                          else
                                          {
                                            if (v215)
                                            {
                                              objc_msgSend(v215, "appendString:", @", ");
                                              v216 = @"thread unsuspended";
                                              goto LABEL_334;
                                            }

                                            v219 = [objc_alloc(MEMORY[0x189607940]) initWithCapacity:128];
                                            v218 = (void *)v368[5];
                                            v368[5] = v219;
                                            v216 = @"thread unsuspended";
                                          }

                                          goto LABEL_334;
                                        }

                                        v213 = [objc_alloc(MEMORY[0x189607940]) initWithCapacity:128];
                                        v212 = (void *)v368[5];
                                        v368[5] = v213;
                                        v206 = @"process suspend count 0 (process still pidsuspended)";
                                      }

                                      goto LABEL_324;
                                    }

                                    v195 = [objc_alloc(MEMORY[0x189607940]) initWithCapacity:128];
                                    v196 = (void *)v368[5];
                                    v368[5] = v195;
                                    v190 = @"process pidsuspended";
                                  }

                                  else
                                  {
                                    if (!v187 && [v350 suspendCount])
                                    {
                                      v192 = (void *)v368[5];
                                      if (v192)
                                      {
                                        objc_msgSend(v192, "appendString:", @", ");
                                      }

                                      else
                                      {
                                        v198 = [objc_alloc(MEMORY[0x189607940]) initWithCapacity:128];
                                        v199 = (void *)v368[5];
                                        v368[5] = v198;
                                      }

                                      v200 = (void *)v368[5];
                                      v201 = [v350 suspendCount];
                                      v202 = @"process unpidsuspended (process suspend count still %d)";
                                      goto LABEL_318;
                                    }

                                    if ((v185 & 1) != 0 || ![v352 isSuspended])
                                    {
                                      v194 = (void *)v368[5];
                                      if (v194)
                                      {
                                        objc_msgSend(v194, "appendString:", @", ");
                                        v190 = @"process unpidsuspended";
                                        goto LABEL_303;
                                      }

                                      v197 = [objc_alloc(MEMORY[0x189607940]) initWithCapacity:128];
                                      v196 = (void *)v368[5];
                                      v368[5] = v197;
                                      v190 = @"process unpidsuspended";
                                    }

                                    else
                                    {
                                      v193 = (void *)v368[5];
                                      if (v193)
                                      {
                                        objc_msgSend(v193, "appendString:", @", ");
                                        v190 = @"process unpidsuspended (thread still suspended)";
                                        goto LABEL_303;
                                      }

                                      v203 = [objc_alloc(MEMORY[0x189607940]) initWithCapacity:128];
                                      v196 = (void *)v368[5];
                                      v368[5] = v203;
                                      v190 = @"process unpidsuspended (thread still suspended)";
                                    }
                                  }

                                  goto LABEL_303;
                                }
                              }

                              if (!v187) {
                                goto LABEL_325;
                              }
                              v191 = 0;
                              goto LABEL_305;
                            }
                          }

                          else if (([v350 isDarwinBG] & 1) == 0)
                          {
                            goto LABEL_260;
                          }

                          v172 = (void *)v368[5];
                          if (v172)
                          {
                            objc_msgSend(v172, "appendString:", @", ");
                          }

                          else
                          {
                            v173 = [objc_alloc(MEMORY[0x189607940]) initWithCapacity:128];
                            v174 = (void *)v368[5];
                            v368[5] = v173;
                          }

                          v175 = (void *)v368[5];
                          else {
                            v176 = @"not ";
                          }
                          v177 = &stru_189F64BD8;
                          if (([v350 isDarwinBG] & 1) == 0
                            && (v165 & [v352 isDarwinBG]) != 0)
                          {
                            v177 = @" (thread still darwinbg)";
                          }

                          [v175 appendFormat:@"process %@darwinbg%@", v176, v177];
                          goto LABEL_260;
                        }
                      }

                      else if ([v352 isDarwinBG])
                      {
                        goto LABEL_237;
                      }
                    }

                    v165 = 1;
                    goto LABEL_245;
                  }

void sub_186D43C7C(_Unwind_Exception *a1)
{
}

__CFString *StringForThreadQoS(unsigned int a1)
{
  uint64_t v1 = a1;
  id v3 = @"user interactive";
  switch(a1)
  {
    case 0u:
      id v3 = @"unspecified";
      break;
    case 1u:
      id v3 = @"maintenance";
      break;
    case 2u:
      id v3 = @"background";
      break;
    case 3u:
      id v3 = @"utility";
      break;
    case 4u:
      id v3 = @"default";
      break;
    case 5u:
      id v3 = @"user initiated";
      break;
    case 6u:
      return v3;
    default:
      else {
        id v3 = (__CFString *)objc_msgSend(objc_alloc(NSString), "initWithFormat:", @"unknown (0x%x)", v1);
      }
      break;
  }

  return v3;
}

LABEL_688:
      v498 = *(void *)(*(void *)(a1 + 32) + 176LL);
      -[SAThreadState debugDescriptionWithThread:](v587, v611);
      v610 = (id)objc_claimAutoreleasedReturnValue();
      v499 = -[SATaskState debugDescriptionWithTask:]((uint64_t)v16, *(void **)(a1 + 40));
      v608 = *(unsigned __int8 *)(a1 + 248);
      v500 = *(void *)(a1 + 32);
      v603 = (void *)v499;
      v605 = *(void *)(v500 + 48);
      v589 = v20;
      v501 = *(void *)(v500 + 56);
      [*(id *)(v500 + 32) debugDescription];
      v502 = (void *)objc_claimAutoreleasedReturnValue();
      [*(id *)(*(void *)(a1 + 32) + 40) debugDescription];
      v503 = (void *)objc_claimAutoreleasedReturnValue();
      v504 = *(void *)(a1 + 208);
      v505 = *(void *)(a1 + 48) != 0LL;
      v506 = *(void *)(a1 + 56) != 0LL;
      v507 = *(void *)(a1 + 64) != 0LL;
      v508 = *(void *)(a1 + 72) != 0LL;
      *(_DWORD *)buf = 138416130;
      v632 = v498;
      int v19 = v587;
      v633 = 2048;
      v634 = a3;
      v635 = 2048;
      v636 = v606;
      v637 = 2112;
      *(void *)v638 = v610;
      *(_WORD *)&v638[8] = 2112;
      *(void *)&v638[10] = v603;
      *(_WORD *)&v638[18] = 1024;
      *(_DWORD *)&v638[20] = v608;
      *(_WORD *)&v638[24] = 2048;
      *(void *)&v638[26] = v605;
      v639 = 2048;
      v640 = v501;
      uint64_t v20 = v589;
      v641 = 2112;
      v642 = (uint64_t)v502;
      v643 = 2112;
      v644 = (uint64_t)v503;
      v645 = 2048;
      v646 = v504;
      v647 = 2048;
      *(void *)v648 = v594;
      *(_WORD *)&v648[8] = 1024;
      *(_DWORD *)&v648[10] = v505;
      v649 = 1024;
      *(_DWORD *)v650 = v506;
      *(_WORD *)&v650[4] = 1024;
      *(_DWORD *)&v650[6] = v507;
      LOWORD(v651) = 1024;
      *(_DWORD *)((char *)&v651 + 2) = v508;
      _os_log_fault_impl( &dword_186C92000,  (os_log_t)v375,  OS_LOG_TYPE_FAULT,  "incident %@. sampleIndex %lu, endIndex %lu, thread state %@, task state %@ (%d), report start index %lu, report end index %lu, report start time %@, report end time %@, starting iterator index %lu, iterator index %lu, by-thr ead:%d indexes:%d, by-dispatchQueue:%d, by-swiftTaskStates:%d",  buf,  0x8Eu);

      uint64_t v16 = v585;
      goto LABEL_613;
    }

    uint64_t v28 = v606 - a3 + 1;
    [*(id *)(*(void *)(a1 + 32) + 160) sampleTimestamps];
    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue();
    [v29 objectAtIndexedSubscript:v606];
    v609 = (id)objc_claimAutoreleasedReturnValue();

    goto LABEL_24;
  }

  uint64_t v20 = [v18 startTimestamp];
  if (v16 && *(_BYTE *)(a1 + 248))
  {
    [v16 startTimestamp];
    id v21 = (void *)objc_claimAutoreleasedReturnValue();
    id v9 = v20;
    unsigned int v22 = [v21 gt:v20];

    if (v22)
    {
      uint64_t v20 = [v16 startTimestamp];
    }

    else
    {
      uint64_t v20 = v9;
    }
  }

  [v19 endTimestamp];
  __int16 v31 = (void *)objc_claimAutoreleasedReturnValue();
  if (v16 && *(_BYTE *)(a1 + 248))
  {
    id v9 = v20;
    [v16 endTimestamp];
    uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue();
    int v33 = [v32 lt:v31];

    if (v33)
    {
      uint64_t v34 = [v16 endTimestamp];

      __int16 v31 = (void *)v34;
    }

    uint64_t v20 = v9;
  }

  if (!v20)
  {
    v376 = v17;
    v377 = *__error();
    _sa_logt();
    v378 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v378, OS_LOG_TYPE_ERROR))
    {
      v379 = -[SAThreadState debugDescriptionWithThread:](v19, v376);
      id v9 = [v379 UTF8String];
      -[SATaskState debugDescriptionWithTask:]((uint64_t)v16, *(void **)(a1 + 40));
      a3 = (unint64_t) objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136315394;
      v632 = v9;
      v633 = 2080;
      v634 = [(id)a3 UTF8String];
      _os_log_error_impl(&dword_186C92000, v378, OS_LOG_TYPE_ERROR, "nil startTimestamp for %s %s", buf, 0x16u);
    }

    *__error() = v377;
    v380 = -[SAThreadState debugDescriptionWithThread:](v19, v376);
    v381 = [v380 UTF8String];
    int v17 = -[SATaskState debugDescriptionWithTask:]((uint64_t)v16, *(void **)(a1 + 40));
    [v17 UTF8String];
    _SASetCrashLogMessage(10504, "nil startTimestamp for %s %s", v382, v383, v384, v385, v386, v387, v381);

    _os_crash();
    __break(1u);
    goto LABEL_617;
  }

  if (!v31)
  {
LABEL_617:
    v388 = v17;
    v389 = *__error();
    _sa_logt();
    v390 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v390, OS_LOG_TYPE_ERROR))
    {
      v391 = -[SAThreadState debugDescriptionWithThread:](v19, v388);
      id v9 = [v391 UTF8String];
      -[SATaskState debugDescriptionWithTask:]((uint64_t)v16, *(void **)(a1 + 40));
      a3 = (unint64_t) objc_claimAutoreleasedReturnValue();
      v392 = [(id)a3 UTF8String];
      *(_DWORD *)buf = 136315394;
      v632 = v9;
      v633 = 2080;
      v634 = v392;
      _os_log_error_impl(&dword_186C92000, v390, OS_LOG_TYPE_ERROR, "nil endTimestamp for %s %s", buf, 0x16u);
    }

    *__error() = v389;
    -[SAThreadState debugDescriptionWithThread:](v19, v388);
    v258 = (uint64_t *) objc_claimAutoreleasedReturnValue();
    uint64_t v20 = [v258 UTF8String];
    -[SATaskState debugDescriptionWithTask:]((uint64_t)v16, *(void **)(a1 + 40));
    v294 = (int *) objc_claimAutoreleasedReturnValue();
    [v294 UTF8String];
    _SASetCrashLogMessage(10505, "nil endTimestamp for %s %s", v393, v394, v395, v396, v397, v398, v20);

    _os_crash();
    __break(1u);
    goto LABEL_620;
  }

  v609 = v31;
  v606 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v28 = 1LL;
LABEL_24:
  __int16 v35 = *(void **)(a1 + 80);
  v604 = a1;
  if (v35
    && (id v9 = v20,
        objc_msgSend(MEMORY[0x189607968], "numberWithUnsignedLongLong:", objc_msgSend(v17, "threadId")),
        double v36 = (void *)objc_claimAutoreleasedReturnValue(),
        uint64_t v37 = [v35 containsObject:v36],
        v36,
        uint64_t v20 = v9,
        (v37 & 1) != 0)
    || !*(_BYTE *)(a1 + 249))
  {
    v581 = 0LL;
    unint64_t v41 = 0;
    goto LABEL_138;
  }

  v629 = 0u;
  v630 = 0u;
  v627 = 0u;
  v628 = 0u;
  unint64_t v38 = *(id *)(*(void *)(a1 + 32) + 120LL);
  uint64_t v39 = [v38 countByEnumeratingWithState:&v627 objects:v655 count:16];
  unint64_t v41 = v39 == 0;
  if (!v39)
  {
    v581 = 0LL;
LABEL_134:

    goto LABEL_138;
  }

  id v42 = v39;
  LODWORD(v592) = v39 == 0;
  v595 = v28;
  uint64_t v28 = v20;
  char v43 = *(void *)v628;
  uint64_t v44 = 1;
  v600 = 0x7FFFFFFFFFFFFFFFLL;
  v601 = a3;
  v607 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    __int128 v45 = 0LL;
    do
    {
      if (*(void *)v628 != v43) {
        objc_enumerationMutation(v38);
      }
      id v9 = *(void *)(*((void *)&v627 + 1) + 8 * v45);
      if (v9)
      {
        if (*(void *)(v9 + 16))
        {
          objc_super v46 = [v611 threadId];
          __int128 v47 = *(void *)(v9 + 16);
          if (v46 == v47)
          {
LABEL_42:
            if (*(void *)(v9 + 40) > v606) {
              goto LABEL_89;
            }
            __int128 v50 = *(void *)(v9 + 48);
            goto LABEL_44;
          }

          if (v47) {
            goto LABEL_89;
          }
        }

        Property = objc_getProperty((id)v9, v40, 8LL, 1);
      }

      else
      {
        Property = 0LL;
      }

      __int128 v49 = Property;
      double v10 = *(void *)(a1 + 40);

      if (v49 != (id)v10) {
        goto LABEL_89;
      }
      if (!-[SASamplePrinter hasTimeIndexes](*(void *)(a1 + 32)))
      {
        if (v9) {
LABEL_53:
        }
          __int128 v54 = objc_getProperty((id)v9, v40, 24LL, 1);
        else {
          __int128 v54 = 0LL;
        }
        __int128 v55 = v54;
        if (([v55 le:v609] & 1) == 0)
        {

          goto LABEL_89;
        }

        if (v9) {
          uint64_t v57 = objc_getProperty((id)v9, v56, 32LL, 1);
        }
        else {
          uint64_t v57 = 0LL;
        }
        double v10 = (uint64_t)v57;
        uint64_t v58 = [(id)v10 ge:v28];

        if (v58)
        {
          if (v9) {
            int v59 = objc_getProperty((id)v9, v40, 32LL, 1);
          }
          else {
            int v59 = 0LL;
          }
          uint64_t v60 = (void *)v28;
          uint64_t v61 = v59;
          uint64_t v62 = [v61 gt:v609];

          if (v62)
          {
            a1 = v604;
            if (v9) {
              id v64 = objc_getProperty((id)v9, v63, 32LL, 1);
            }
            else {
              id v64 = 0LL;
            }
            uint64_t v65 = v64;

            v609 = v65;
          }

          else
          {
            a1 = v604;
          }

          if (v9) {
            uint64_t v66 = objc_getProperty((id)v9, v63, 24LL, 1);
          }
          else {
            uint64_t v66 = 0LL;
          }
          int v67 = v66;
          double v10 = [v67 lt:v28];

          if ((_DWORD)v10)
          {
            if (v9) {
              uint64_t v68 = objc_getProperty((id)v9, v40, 24LL, 1);
            }
            else {
              uint64_t v68 = 0LL;
            }
            uint64_t v28 = (uint64_t)v68;
          }

          goto LABEL_79;
        }

        goto LABEL_88;
      }

      if (v9) {
        goto LABEL_42;
      }
      __int128 v50 = 0LL;
LABEL_44:
      if (v50 < v601) {
        goto LABEL_89;
      }
      __int128 v51 = v607;
      __int128 v52 = v600;
      if (v607 != 0x7FFFFFFFFFFFFFFFLL)
      {
        __int128 v53 = v9 ? *(void *)(v9 + 40) : 0LL;
        if (v607 <= v53)
        {
          if (v600 != 0x7FFFFFFFFFFFFFFFLL)
          {
            if (v9) {
              goto LABEL_74;
            }
            uint64_t v69 = 0LL;
LABEL_75:
            if (v52 >= v69)
            {
              v607 = v51;
LABEL_79:
              uint64_t v44 = 0;
              goto LABEL_89;
            }
          }

          if (v9)
          {
LABEL_77:
            v607 = v51;
            uint64_t v44 = 0;
            v600 = *(void *)(v9 + 48);
            goto LABEL_89;
          }

          v607 = v51;
          v600 = 0LL;
          goto LABEL_79;
        }
      }

      if (v9)
      {
        __int128 v51 = *(void *)(v9 + 40);
        if (v600 == 0x7FFFFFFFFFFFFFFFLL) {
          goto LABEL_77;
        }
LABEL_74:
        uint64_t v69 = *(void *)(v9 + 48);
        goto LABEL_75;
      }

      v607 = 0LL;
      if (v600 != 0x7FFFFFFFFFFFFFFFLL)
      {
        __int128 v51 = 0LL;
        uint64_t v69 = 0LL;
        a1 = v604;
        __int128 v52 = v600;
        goto LABEL_75;
      }

      uint64_t v44 = 0;
      v600 = 0LL;
LABEL_88:
      a1 = v604;
LABEL_89:
      ++v45;
    }

    while (v42 != v45);
    uint64_t v70 = [v38 countByEnumeratingWithState:&v627 objects:v655 count:16];
    id v42 = v70;
  }

  while (v70);

  if ((v44 & 1) != 0)
  {
    v581 = 0LL;
    unint64_t v41 = 1;
    uint64_t v16 = v585;
LABEL_136:
    int v19 = v587;
    a3 = v601;
    uint64_t v20 = v28;
    goto LABEL_137;
  }

  uint64_t v20 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v16 = v585;
  if (v607 == 0x7FFFFFFFFFFFFFFFLL || v607 <= v601) {
    goto LABEL_128;
  }
  if (v607 > v606)
  {
    v439 = *__error();
    _sa_logt();
    v440 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v440, OS_LOG_TYPE_ERROR))
    {
      v441 = [v587 debugDescription];
      v442 = [v441 UTF8String];
      v443 = [v585 debugDescription];
      uint64_t v28 = [v443 UTF8String];
      [*(id *)(*(void *)(a1 + 32) + 120) debugDescription];
      uint64_t v16 = (unsigned __int8 *) objc_claimAutoreleasedReturnValue();
      v444 = [v16 UTF8String];
      *(_DWORD *)buf = 134219266;
      v632 = v607;
      v633 = 2048;
      v634 = v601;
      v635 = 2048;
      v636 = v595;
      v637 = 2080;
      *(void *)v638 = v442;
      *(_WORD *)&v638[8] = 2080;
      *(void *)&v638[10] = v28;
      *(_WORD *)&v638[18] = 2080;
      *(void *)&v638[20] = v444;
      _os_log_error_impl( &dword_186C92000,  v440,  OS_LOG_TYPE_ERROR,  "startSampleIndexCap %lu < sampleIndex %lu + sampleCount %lu for %s, %s hidStepSamples:\n%s",  buf,  0x3Eu);
    }

    *__error() = v439;
    v445 = [v587 debugDescription];
    [v445 UTF8String];
    v446 = [v585 debugDescription];
    [v446 UTF8String];
    v447 = [*(id *)(*(void *)(a1 + 32) + 120) debugDescription];
    [v447 UTF8String];
    _SASetCrashLogMessage( 10564,  "startSampleIndexCap %lu < sampleIndex %lu + sampleCount %lu for %s, %s hidStepSamples:\n%s",  v448,  v449,  v450,  v451,  v452,  v453,  v607);

    _os_crash();
    __break(1u);
    goto LABEL_652;
  }

  uint64_t v71 = *(void *)(*(void *)(*(void *)(a1 + 104) + 8LL) + 24LL);
  uint64_t v72 = *(void *)(*(void *)(*(void *)(a1 + 112) + 8LL) + 24LL);
  if (v71 >= v72 && v71 != 0x7FFFFFFFFFFFFFFFLL || v72 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v72 = *(void *)(*(void *)(*(void *)(a1 + 104) + 8LL) + 24LL);
  }
  int v75 = *(void *)(a1 + 32);
  uint64_t v76 = *(void *)(v75 + 48);
  uint64_t v77 = v76 - 1;
  if (!v76) {
    uint64_t v77 = 0x7FFFFFFFFFFFFFFFLL;
  }
  if (v72 != 0x7FFFFFFFFFFFFFFFLL || v76 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v79 = v72;
  }
  else {
    uint64_t v79 = v77;
  }
  uint64_t v80 = v607 - 1;
  if (v79 == 0x7FFFFFFFFFFFFFFFLL || v79 < v80)
  {
    if (v79 == 0x7FFFFFFFFFFFFFFFLL) {
      int v82 = 0LL;
    }
    else {
      int v82 = ~v79;
    }
    *(void *)(*(void *)(*(void *)(a1 + 120) + 8LL) + 24LL) += v82 + v607;
    *(void *)(*(void *)(*(void *)(a1 + 104) + 8LL) + 24LL) = v80;
    int v75 = *(void *)(a1 + 32);
  }

  v595 = v606 - v607 + 1;
  [*(id *)(v75 + 160) sampleTimestamps];
  id v83 = (void *)objc_claimAutoreleasedReturnValue();
  id v9 = [v83 objectAtIndexedSubscript:v607];

  uint64_t v28 = v9;
  v601 = v607;
LABEL_128:
  unint64_t v41 = 0;
  if (v600 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v581 = 0LL;
    goto LABEL_136;
  }

  if (v606 > v600)
  {
    if (v600 >= v601)
    {
      [*(id *)(*(void *)(a1 + 32) + 160) sampleTimestamps];
      unint64_t v38 = (id)objc_claimAutoreleasedReturnValue();
      [v38 objectAtIndexedSubscript:v600];
      v84 = id v9 = v600;

      v581 = v606 - v600;
      v606 = v600;
      v609 = (id)v84;
      int v19 = v587;
      a3 = v601;
      uint64_t v20 = v28;
      uint64_t v28 = v600 - v601 + 1;
      unint64_t v41 = v592;
      goto LABEL_134;
    }

LABEL_652:
    v454 = *__error();
    _sa_logt();
    v455 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v455, OS_LOG_TYPE_ERROR))
    {
      v456 = [v587 debugDescription];
      v457 = [v456 UTF8String];
      v458 = [v585 debugDescription];
      uint64_t v28 = [v458 UTF8String];
      [*(id *)(*(void *)(a1 + 32) + 120) debugDescription];
      uint64_t v16 = (unsigned __int8 *) objc_claimAutoreleasedReturnValue();
      v459 = [v16 UTF8String];
      *(_DWORD *)buf = 134219010;
      v632 = v607;
      v633 = 2048;
      v634 = v601;
      v635 = 2080;
      v636 = v457;
      v637 = 2080;
      *(void *)v638 = v28;
      *(_WORD *)&v638[8] = 2080;
      *(void *)&v638[10] = v459;
      _os_log_error_impl( &dword_186C92000,  v455,  OS_LOG_TYPE_ERROR,  "endSampleIndexCap %lu >= sampleIndex %lu for %s, %s hidStepSamples:\n%s",  buf,  0x34u);
    }

    *__error() = v454;
    v460 = [v587 debugDescription];
    [v460 UTF8String];
    [v585 debugDescription];
    id v9 = (uint64_t) objc_claimAutoreleasedReturnValue();
    [(id)v9 UTF8String];
    v461 = [*(id *)(*(void *)(a1 + 32) + 120) debugDescription];
    [v461 UTF8String];
    _SASetCrashLogMessage( 10586,  "endSampleIndexCap %lu >= sampleIndex %lu for %s, %s hidStepSamples:\n%s",  v462,  v463,  v464,  v465,  v466,  v467,  v607);

    _os_crash();
    __break(1u);
LABEL_655:
    v468 = *__error();
    _sa_logt();
    v469 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v469, OS_LOG_TYPE_ERROR))
    {
      [*(id *)(*(void *)(*(void *)(v604 + 200) + 8) + 40) debugDescription];
      uint64_t v20 = (uint64_t) objc_claimAutoreleasedReturnValue();
      v470 = [(id)v20 UTF8String];
      *(_DWORD *)buf = 136315138;
      v632 = v470;
      _os_log_error_impl(&dword_186C92000, v469, OS_LOG_TYPE_ERROR, "leaf frame %s !isLeafFrame", buf, 0xCu);
    }

    *__error() = v468;
    v471 = [*(id *)(*(void *)(*(void *)(v604 + 200) + 8) + 40) debugDescription];
    v472 = [v471 UTF8String];
    _SASetCrashLogMessage(11030, "leaf frame %s !isLeafFrame", v473, v474, v475, v476, v477, v478, v472);

    _os_crash();
    __break(1u);
LABEL_658:
    v479 = *__error();
    _sa_logt();
    v480 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v480, OS_LOG_TYPE_ERROR))
    {
      v481 = (objc_class *)objc_opt_class();
      NSStringFromClass(v481);
      uint64_t v20 = (uint64_t) objc_claimAutoreleasedReturnValue();
      v482 = [(id)v20 UTF8String];
      *(_DWORD *)buf = 136315138;
      v632 = v482;
      _os_log_error_impl(&dword_186C92000, v480, OS_LOG_TYPE_ERROR, "treeCountedState is a %s", buf, 0xCu);
    }

    *__error() = v479;
    v483 = (objc_class *)objc_opt_class();
    NSStringFromClass(v483);
    v258 = (uint64_t *) objc_claimAutoreleasedReturnValue();
    v484 = [v258 UTF8String];
    _SASetCrashLogMessage(11039, "treeCountedState is a %s", v485, v486, v487, v488, v489, v490, v484);

    _os_crash();
    __break(1u);
    goto LABEL_661;
  }

  uint64_t v20 = v28;
  v581 = 0LL;
  int v19 = v587;
  a3 = v601;
LABEL_137:
  uint64_t v28 = v595;
LABEL_138:
  if ((!*(_BYTE *)(a1 + 250) || ([v19 isRunning] & 1) == 0)
    && (!*(_BYTE *)(a1 + 251) || ([v19 isRunnable] & 1) == 0)
    && (!*(_BYTE *)(a1 + 252)
     || ([v19 isRunning] & 1) != 0
     || [v19 isRunnable]))
  {
    unint64_t v41 = 1;
  }

  __int128 v85 = *(_DWORD *)(a1 + 240);
  if (v85 && v85 < (int)[v19 basePriority]
    || (__int128 v86 = *(_DWORD *)(a1 + 244)) != 0 && v86 > (int)[v19 basePriority]
    || *(_BYTE *)(a1 + 253)
    && [v19 isBatteryAndUserActivityValid]
    && ([v19 isUserActive] & 1) != 0
    || *(_BYTE *)(a1 + 254)
    && [v19 isBatteryAndUserActivityValid]
    && ![v19 isUserActive]
    || *(_BYTE *)(a1 + 255)
    && [v19 isBatteryAndUserActivityValid]
    && ([v19 isOnBattery] & 1) != 0
    || *(_BYTE *)(a1 + 256)
    && [v19 isBatteryAndUserActivityValid]
    && ([v19 isOnBattery] & 1) == 0)
  {
    unint64_t v41 = 1;
  }

  if (*(_BYTE *)(a1 + 257) || *(_BYTE *)(a1 + 258))
  {
    if ([v19 isRunning])
    {
      char v87 = (const char *)[v19 cpuNum];
      if ((_DWORD)v87 != -1)
      {
        __int128 v88 = v87;
        if (*(_BYTE *)(a1 + 257)) {
          v41 |= ((unint64_t)-[SASampleStore clusterFlagsForCPUNum:]( *(void **)(*(void *)(a1 + 32) + 160LL),  v87) >> 1) & 1;
        }
        if (*(_BYTE *)(a1 + 258)) {
          v41 |= -[SASampleStore clusterFlagsForCPUNum:](*(void **)(*(void *)(a1 + 32) + 160LL), v88);
        }
      }
    }
  }

  v588 = v20;
  if (*(_BYTE *)(a1 + 259)
    || *(void *)(a1 + 216) == 1LL
    || *(void *)(a1 + 224) == 3LL
    || *(void *)(a1 + 72)
    || ![v19 hasSwiftTask]
    || ([v611 isMainThread] & 1) != 0
    || [*(id *)(*(void *)(a1 + 32) + 160) targetThreadId]
    && (__int128 v89 = [v611 threadId],
        v89 == [*(id *)(*(void *)(a1 + 32) + 160) targetThreadId]))
  {
    __int128 v90 = 0;
    goto LABEL_180;
  }

  if (![*(id *)(*(void *)(a1 + 32) + 160) targetDispatchQueueId] || !*(void *)(a1 + 64)) {
    goto LABEL_181;
  }
  [*(id *)(*(void *)(a1 + 32) + 160) targetProcess];
  v353 = (void *)objc_claimAutoreleasedReturnValue();
  if (v353 == *(void **)(a1 + 40))
  {
    v362 = [*(id *)(a1 + 64) identifier];
    __int128 v90 = v362 != [*(id *)(*(void *)(a1 + 32) + 160) targetDispatchQueueId];
  }

  else
  {
    __int128 v90 = 1;
  }

LABEL_180:
  pid_t v91 = v90 | v41;
  uint64_t v20 = v588;
  if ((v91 & 1) != 0)
  {
LABEL_181:
    id v92 = *(void *)(*(void *)(*(void *)(a1 + 104) + 8LL) + 24LL);
    if (v92 == 0x7FFFFFFFFFFFFFFFLL || v606 > v92)
    {
      if (v92 < a3 || v92 == 0x7FFFFFFFFFFFFFFFLL) {
        id v92 = a3 - 1;
      }
      *(void *)(*(void *)(*(void *)(a1 + 120) + 8LL) + 24LL) += v606 - v92;
      *(void *)(*(void *)(*(void *)(a1 + 104) + 8LL) + 24LL) = v606;
    }

    posix_spawn_file_actions_t v94 = *(void *)(*(void *)(a1 + 128) + 8LL);
    __int128 v95 = v611;
    if (!*(_BYTE *)(v94 + 24) && (_DWORD)v598) {
      *(_BYTE *)(v94 + 24) = 1;
    }
    __int128 v96 = v609;
    goto LABEL_590;
  }

  v626 = 0LL;
  newValue = 0LL;
  v624 = 0LL;
  __int128 v95 = v611;
  if (*(_BYTE *)(a1 + 260))
  {
    char v97 = *(void *)(*(void *)(*(void *)(a1 + 136) + 8LL) + 24LL);
    if (v97 != [v611 threadId])
    {
      *(void *)(*(void *)(*(void *)(a1 + 136) + 8) + 24) = [v611 threadId];
      __int128 v99 = *(id *)(*(void *)(a1 + 32) + 160LL);
      if (v99) {
        __int128 v99 = objc_getProperty(v99, v98, 968LL, 1);
      }
      uint64_t v100 = v99;
      [MEMORY[0x189607968] numberWithUnsignedLongLong:*(void *)(*(void *)(*(void *)(a1 + 136) + 8) + 24)];
      v101 = (void *)objc_claimAutoreleasedReturnValue();
      id v9 = [v100 objectForKeyedSubscript:v101];
      uint64_t v102 = [(id)v9 objectEnumerator];
      int v103 = *(void *)(*(void *)(a1 + 144) + 8LL);
      int v104 = *(void **)(v103 + 40);
      *(void *)(v103 + 40) = v102;

      __int16 v105 = [*(id *)(*(void *)(*(void *)(a1 + 144) + 8) + 40) nextObject];
      id v106 = *(void *)(*(void *)(a1 + 152) + 8LL);
      __int16 v107 = *(void **)(v106 + 40);
      *(void *)(v106 + 40) = v105;

      uint64_t v20 = v588;
    }

    uint64_t v108 = *(void **)(*(void *)(*(void *)(a1 + 152) + 8LL) + 40LL);
    if (v108)
    {
      __int16 v109 = -[SASamplePrinter _findIOBefore:during:after:thread:stateIndex:inIO:nextIO:]( *(void *)(a1 + 32),  &v626,  &newValue,  &v624,  v611,  (unint64_t)a6,  *(void **)(*(void *)(*(void *)(a1 + 144) + 8LL) + 40LL),  v108);
      v110 = *(void *)(*(void *)(a1 + 152) + 8LL);
      uint64_t v111 = *(void **)(v110 + 40);
      *(void *)(v110 + 40) = v109;
    }
  }

  if ((v598 & 1) != 0)
  {
LABEL_203:
    v571 = 1;
  }

  else
  {
    v112 = *(void *)(*(void *)(a1 + 128) + 8LL);
    if (*(_BYTE *)(v112 + 24))
    {
      *(_BYTE *)(v112 + 24) = 0;
      goto LABEL_203;
    }

    v571 = 0;
  }

  v601 = a3;
  v595 = v28;
  if (*(_BYTE *)(a1 + 261) && !*(_BYTE *)(a1 + 262))
  {
    if (a3 == 0x7FFFFFFFFFFFFFFFLL)
    {
      v114 = 0LL;
      double v10 = 0LL;
    }

    else
    {
      [*(id *)(*(void *)(a1 + 32) + 160) sampleTimestamps];
      uint64_t v115 = (void *)objc_claimAutoreleasedReturnValue();
      [v115 objectAtIndexedSubscript:a3];
      double v10 = (uint64_t)(id)objc_claimAutoreleasedReturnValue();

      v116 = *(void *)(a1 + 32);
      if (a3 <= *(void *)(v116 + 48))
      {
        v114 = 0LL;
      }

      else
      {
        [*(id *)(v116 + 160) sampleTimestamps];
        v117 = (void *)objc_claimAutoreleasedReturnValue();
        [v117 objectAtIndexedSubscript:a3 - 1];
        v114 = (id)objc_claimAutoreleasedReturnValue();
      }
    }

    v118 = *(void **)(*(void *)(*(void *)(a1 + 160) + 8LL) + 40LL);
    if (v118)
    {
      v119 = v626;
      if (v626)
      {
        objc_msgSend(v626, "addObjectsFromArray:");
        v120 = (id)[v119 sortedArrayUsingComparator:&__block_literal_global_1555];
      }

      else
      {
        v626 = v118;
      }
    }

    v121 = *(void **)(a1 + 64);
    v122 = *(void **)(a1 + 72);
    v123 = *(void **)(a1 + 56);
    id v9 = *(void *)(a1 + 32);
    v124 = *(void **)(a1 + 40);
    if (*(void *)(*(void *)(*(void *)(a1 + 104) + 8LL) + 24LL) >= v601) {
      v125 = 0LL;
    }
    else {
      v125 = *(void *)(*(void *)(*(void *)(a1 + 120) + 8LL) + 24LL);
    }
    if (!v114
      || (v126 = [*(id *)(*(void *)(*(void *)(a1 + 168) + 8) + 40) lt:v114], v127 = v114, v126))
    {
      v127 = *(void **)(*(void *)(*(void *)(a1 + 168) + 8LL) + 40LL);
    }

    v562 = *(_DWORD *)(a1 + 264);
    v561 = v125;
    int v19 = v587;
    v128 = v122;
    __int128 v95 = v611;
    uint64_t v16 = v585;
    __int16 v113 = -[SASamplePrinter stateChangeStringForThreadState:serialDispatchQueue:swiftTaskStates:thread:threadStateIndexes:taskState:task:iteratorIndex:missingStateIsInAnotherStack:numSamplesOmittedSincePreviousDisplayedSample:sampleTimestamp:previousSampleTimestamp:previousDisplayedTimestamp:previousTaskState:previousThread:previousThreadState:dispatchQueueChanges:swiftTaskChanges:priorityChanges:nameChanges:threadChanges:isTimeJump:ioEventsSincePreviousThreadState:]( v9,  v587,  v121,  v128,  v611,  v123,  v585,  v124,  v594,  a9,  v561,  (void *)v10,  v114,  v127,  *(void **)(*(void *)(*(void *)(a1 + 176) + 8LL) + 40LL),  *(void **)(*(void *)(*(void *)(a1 + 184) + 8LL) + 40LL),  *(void **)(*(void *)(*(void *)(a1 + 192) + 8LL) + 40LL),  *(_BYTE *)(a1 + 263),  v562,  SBYTE1(v562),  SBYTE2(v562),  SHIBYTE(v562),  v571,  v626);

    a3 = v601;
    uint64_t v20 = v588;
    uint64_t v28 = v595;
  }

  else
  {
    __int16 v113 = 0LL;
  }

  v598 = v113;
  if (*(_BYTE *)(a1 + 268))
  {
    if ([v19 hasSwiftTask])
    {
      v129 = v95;
      v130 = *(void *)(a1 + 32);
      v131 = *(void *)(a1 + 72);
      if ([v129 isMainThread])
      {
        v132 = 1;
      }

      else
      {
        v134 = [v129 threadId];
        v132 = v134 == [*(id *)(*(void *)(a1 + 32) + 160) targetThreadId];
      }

      if (!v130)
      {
        v133 = 0LL;
        goto LABEL_241;
      }

      v135 = *(void *)(v130 + 16);
      if (v135
        && (*(void *)(v135 + 160) == 1LL
         || (v136 = *(void *)(v135 + 152), v136 == 3)
         || !v136 && *(_BYTE *)(v135 + 11)))
      {
        v137 = [(id)v135 swiftAsyncPrintLeafyCCallstackOnTopOfCRootCallstacksAlways];
        v133 = 4LL;
        if (!v137) {
          v133 = 0LL;
        }
LABEL_241:
        __int128 v95 = v611;
        uint64_t v20 = v588;
      }

      else
      {
        if (v131)
        {
          uint64_t v20 = v588;
          if ([(id)v135 swiftAsyncPrintLeafyCCallstackOnTopOfSwiftAsyncCallstacksAlways])
          {
            v133 = 0LL;
          }

          else
          {
            v138 = [*(id *)(v130 + 16) swiftAsyncPrintLeafyCCallstackOnTopOfCRootCallstacksAlways];
            v133 = 8LL;
            if (!(v132 | v138)) {
              v133 = 0LL;
            }
          }
        }

        else
        {
          uint64_t v20 = v588;
          if ([(id)v135 swiftAsyncPrintLeafyCCallstackOnTopOfCRootCallstacksAlways])
          {
            v133 = 4LL;
          }

          else
          {
            v139 = [*(id *)(v130 + 16) swiftAsyncPrintLeafyCCallstackOnTopOfSwiftAsyncCallstacksAlways];
            v133 = 16LL;
            v140 = 4LL;
            if (!v132) {
              v140 = 16LL;
            }
            if (!v139) {
              v133 = v140;
            }
          }
        }

        __int128 v95 = v611;
      }
    }

    else
    {
      v133 = 0LL;
    }
  }

  else
  {
    v133 = 2LL;
  }

  v141 = v133 | (*(_BYTE *)(a1 + 269) == 0);
  if (*(_BYTE *)(a1 + 270)) {
    v142 = v141;
  }
  else {
    v142 = v141 | 0x20;
  }
  v143 = *(id **)(*(void *)(*(void *)(a1 + 192) + 8LL) + 40LL);
  if (v143
    && v143 == v19
    && (!*(_BYTE *)(a1 + 248) || *(unsigned __int8 **)(*(void *)(*(void *)(a1 + 176) + 8LL) + 40LL) == v16))
  {
    if (!v598)
    {
      v598 = 0LL;
      goto LABEL_586;
    }

    if (a3 != 0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_274;
    }
    goto LABEL_635;
  }

  LODWORD(v594) = 0;
  if (!v143 || *(_BYTE *)(a1 + 262))
  {
LABEL_279:
    [*(id *)(*(void *)(a1 + 32) + 160) cpuSignalHandlerStackLeafKernelFrame];
    v154 = (void *)objc_claimAutoreleasedReturnValue();
    [v19 stackWithBacktraceStyle:v142 ignoringKernelStackWithLeafFrame:v154];
    v155 = (void *)objc_claimAutoreleasedReturnValue();

    v146 = v155;
    if (![v155 count])
    {
      v159 = *(void *)(*(void *)(a1 + 200) + 8LL);
      id v9 = *(void *)(v159 + 40);
      *(void *)(v159 + 40) = 0LL;
      goto LABEL_365;
    }

    if (!*(_BYTE *)(a1 + 271)) {
      goto LABEL_301;
    }
    [v155 objectAtIndexedSubscript:0];
    v156 = (void *)objc_claimAutoreleasedReturnValue();
    if ([v156 isTruncatedBacktraceFrame])
    {
      v157 = v146;
      v158 = [v146 count];

      if (v158 < 2)
      {
        v146 = v157;
        goto LABEL_301;
      }

      [v95 patchedStackForTruncatedStack:v157];
      v146 = (void *)objc_claimAutoreleasedReturnValue();
      v156 = v157;
    }

LABEL_301:
    id v9 = (uint64_t)*(id *)(a1 + 88);
    v165 = [v146 count];
    v620 = 0u;
    v621 = 0u;
    v622 = 0u;
    v623 = 0u;
    id obj = v146;
    v592 = [obj countByEnumeratingWithState:&v620 objects:v654 count:16];
    v579 = (unsigned __int8 *)v165;
    a1 = 0LL;
    if (!v592) {
      goto LABEL_363;
    }
    double v10 = v165 - 1;
    v590 = *(void *)v621;
    v578 = 138412290LL;
    v166 = 0x189F60000uLL;
    v167 = &OBJC_IVAR___SASharedCache__slidBaseAddress;
    while (1)
    {
      v168 = 0LL;
      v600 = v9;
      do
      {
        if (*(void *)v621 != v590) {
          objc_enumerationMutation(obj);
        }
        a6 = v168;
        id v9 = *(void *)(*((void *)&v620 + 1) + 8LL * (void)v168);
        if ((v594 & 1) != 0) {
          goto LABEL_332;
        }
        if (!*(_BYTE *)(v604 + 262))
        {
          [(id)v600 lastObject];
          v180 = (unsigned __int8 *)objc_claimAutoreleasedReturnValue();
          if (!v180) {
            goto LABEL_331;
          }
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            goto LABEL_331;
          }
          v181 = [v180 isTruncatedLeafCallstack];
          if ((((v10 == a1) ^ v180[v167[161]]) & 1) != 0) {
            goto LABEL_331;
          }
          v182 = *(void *)(v604 + 32);
          a3 = [v180 frame];
          LODWORD(v182) = -[SASamplePrinter frame:matchesFrame:](v182, (void *)a3, (void *)v9);

          if (!(_DWORD)v182) {
            goto LABEL_331;
          }
          uint64_t v16 = v180;

LABEL_344:
          v191 = v598;
          objc_msgSend(v16, "setSampleCount:", objc_msgSend(v16, "sampleCount") + v595);
          a3 = v601;
          goto LABEL_354;
        }

        v618 = 0u;
        v619 = 0u;
        v616 = 0u;
        v617 = 0u;
        v607 = (unint64_t)(id)v600;
        v169 = [(id)v607 countByEnumeratingWithState:&v616 objects:v653 count:16];
        if (!v169) {
          goto LABEL_324;
        }
        v170 = v169;
        v171 = *(void *)v617;
        do
        {
          v172 = 0LL;
          do
          {
            if (*(void *)v617 != v171) {
              objc_enumerationMutation((id)v607);
            }
            v173 = *(unsigned __int8 **)(*((void *)&v616 + 1) + 8 * v172);
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
            {
              a3 = [v173 isTruncatedLeafCallstack];
              if ((_DWORD)a3 == [(id)v9 isLeafyCallstackIsInAnotherCallTreeFrame])
              {
                if (v173)
                {
                  if ((((v10 == a1) ^ v173[v167[161]]) & 1) != 0) {
                    goto LABEL_318;
                  }
                }

                else if (v10 == a1)
                {
                  goto LABEL_318;
                }

                v174 = *(void *)(v604 + 32);
                [v173 frame];
                v175 = v166;
                v176 = a1;
                v177 = v10;
                v178 = (void *)objc_claimAutoreleasedReturnValue();
                a3 = -[SASamplePrinter frame:matchesFrame:](v174, v178, (void *)v9);

                double v10 = v177;
                a1 = v176;
                v166 = v175;
                v167 = &OBJC_IVAR___SASharedCache__slidBaseAddress;
                if ((a3 & 1) != 0)
                {
                  uint64_t v16 = v173;

                  int v19 = v587;
                  __int128 v95 = v611;
                  if (!v173) {
                    goto LABEL_332;
                  }
                  goto LABEL_344;
                }
              }
            }

LABEL_318:
            ++v172;
          }

          while (v170 != v172);
          v179 = [(id)v607 countByEnumeratingWithState:&v616 objects:v653 count:16];
          v170 = v179;
        }

        while (v179);
        int v19 = v587;
        __int128 v95 = v611;
LABEL_324:
        v180 = (unsigned __int8 *)v607;
LABEL_331:

LABEL_332:
        if (v598)
        {
          [(id)v600 addObject:v598];
        }

        if (![(id)v9 isLeafyCallstackIsInAnotherCallTreeFrame])
        {
          a3 = v601;
          [*(id *)(v166 + 1104) callTreeFrameWithFrame:v9 startSampleIndex:v601 sampleCount:v595 isLeafFrame:v10 == a1];
          uint64_t v16 = (unsigned __int8 *)objc_claimAutoreleasedReturnValue();
          goto LABEL_353;
        }

        v183 = v10 - a1;
        if (v10 != a1)
        {
          double v10 = *__error();
          _sa_logt();
          v363 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v363, OS_LOG_TYPE_ERROR))
          {
            v364 = [(id)v9 debugDescription];
            v365 = [v364 UTF8String];
            v366 = a1 + 1;
            a1 = (uint64_t)obj;
            [obj objectAtIndexedSubscript:v366];
            id v9 = v241 = v9;
            [(id)v9 debugDescription];
            a3 = (unint64_t) objc_claimAutoreleasedReturnValue();
            v367 = [(id)a3 UTF8String];
            *(_DWORD *)buf = 136315650;
            v632 = v365;
            v633 = 2048;
            v634 = v183;
            v635 = 2080;
            v636 = v367;
            _os_log_error_impl( &dword_186C92000,  v363,  OS_LOG_TYPE_ERROR,  "leafy truncated frame %s not leaf: %lu more to go (%s is next)",  buf,  0x20u);
          }

          else
          {
            v366 = a1 + 1;
            a1 = (uint64_t)obj;
            v241 = v9;
          }

          *__error() = v10;
          [(id)v241 debugDescription];
          v258 = (uint64_t *) objc_claimAutoreleasedReturnValue();
          v294 = (int *)[v258 UTF8String];
          uint64_t v20 = [(id)a1 objectAtIndexedSubscript:v366];
          [(id)v20 debugDescription];
          int v19 = (id *) objc_claimAutoreleasedReturnValue();
          [v19 UTF8String];
          _SASetCrashLogMessage( 10829,  "leafy truncated frame %s not leaf: %lu more to go (%s is next)",  v368,  v369,  v370,  v371,  v372,  v373,  (char)v294);

          _os_crash();
          __break(1u);
          goto LABEL_609;
        }

        v184 = (void *)v9;
        if ([(id)v9 isSwiftAsync])
        {
          [v19 swiftTask];
          v185 = (void *)objc_claimAutoreleasedReturnValue();
          v186 = [v185 identifier];
          if (v185)
          {
            if (v186 != -1)
            {
              v187 = [objc_alloc(NSString) initWithFormat:@"%@ %llu", @"Swift Task", v186];
              goto LABEL_351;
            }
          }

          else
          {
            v194 = *__error();
            _sa_logt();
            v195 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v195, OS_LOG_TYPE_FAULT))
            {
              -[SAThreadState debugDescriptionWithThread:](v19, v611);
              v197 = (id)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138412290;
              v632 = (unint64_t)v197;
              _os_log_fault_impl( &dword_186C92000,  v195,  OS_LOG_TYPE_FAULT,  "isLeafyCallstackIsInAnotherCallTreeFrame, but no swiftTask for %@",  buf,  0xCu);
            }

            *__error() = v194;
            __int128 v95 = v611;
          }

          v187 = [objc_alloc(NSString) initWithFormat:@"%@ %@", @"Swift Task", @"UNKNOWN"];
LABEL_351:
          v193 = (void *)v187;
        }

        else
        {
          v188 = [v95 threadId];
          v189 = objc_alloc(NSString);
          if (v188) {
            v190 = [v189 initWithFormat:@"%@ 0x%llx", @"Thread", objc_msgSend(v95, "threadId")];
          }
          else {
            v190 = [v189 initWithFormat:@"%@ %@", @"Thread", @"UNKNOWN"];
          }
          v193 = (void *)v190;
        }

        a3 = v601;
        +[SACallTreeTruncatedLeafCallstacks callTreeFrameWithFrame:startSampleIndex:sampleCount:otherCallTreeDescription:]( (uint64_t)&OBJC_CLASS___SACallTreeTruncatedLeafCallstacks,  v184,  v601,  v595,  v193);
        uint64_t v16 = (unsigned __int8 *)objc_claimAutoreleasedReturnValue();

LABEL_353:
        [(id)v600 addObject:v16];
        v191 = 0LL;
LABEL_354:
        v598 = v191;
        if (v10 == a1)
        {
          objc_storeStrong((id *)(*(void *)(*(void *)(v604 + 200) + 8LL) + 40LL), v16);

          a1 = v10;
          id v9 = v600;
          goto LABEL_363;
        }

        if (v16) {
          v196 = objc_getProperty(v16, v192, 40LL, 1);
        }
        else {
          v196 = 0LL;
        }
        id v9 = (uint64_t)v196;

        ++a1;
        v168 = a6 + 1;
        v600 = v9;
      }

      while (a6 + 1 != (char *)v592);
      v198 = [obj countByEnumeratingWithState:&v620 objects:v654 count:16];
      v592 = v198;
      if (!v198)
      {
LABEL_363:
        v146 = obj;

        if (*(void *)(*(void *)(*(void *)(v604 + 200) + 8LL) + 40LL))
        {
          uint64_t v16 = v585;
          a1 = v604;
LABEL_365:
          v151 = v606;

LABEL_366:
          goto LABEL_367;
        }

        uint64_t v20 = *__error();
        _sa_logt();
        v401 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v401, OS_LOG_TYPE_ERROR))
        {
          v402 = [obj debugDescription];
          v403 = [v402 UTF8String];
          *(_DWORD *)buf = 134218498;
          v632 = a1;
          v633 = 2048;
          v634 = (uint64_t)v579;
          v635 = 2080;
          v636 = v403;
          _os_log_error_impl( &dword_186C92000,  v401,  OS_LOG_TYPE_ERROR,  "No leaf frame picked: index %lu, count %lu, stack %s",  buf,  0x20u);
        }

        *__error() = v20;
        [obj debugDescription];
        v258 = (uint64_t *) objc_claimAutoreleasedReturnValue();
        [v258 UTF8String];
        _SASetCrashLogMessage( 10868,  "No leaf frame picked: index %lu, count %lu, stack %s",  v404,  v405,  v406,  v407,  v408,  v409,  a1);

        _os_crash();
        __break(1u);
LABEL_625:
        v579 = v16;
        if (a6
          && -[SAWaitInfo _displaysContentForPid:tid:options:displayString:nameCallback:]( (uint64_t)a6,  *((_DWORD *)v258 + 7),  v258[6],  *(void *)(a1 + 232),  0LL,  0LL))
        {
          v400 = 0;
          v399 = 0LL;
          int v19 = v587;
          a3 = v601;
          goto LABEL_628;
        }

        LODWORD(v590) = 1;
        int v19 = v587;
LABEL_638:
        LODWORD(v592) = v9 ^ 1;
        id v9 = (uint64_t)objc_getProperty(v258, v295, 64LL, 1);
        LODWORD(v2_Block_object_dispose((const void *)(v1 - 240), 8) = [(id)v9 isEqual:obj];
        if ((v28 & 1) != 0)
        {
          LODWORD(a1) = 0;
          v435 = 0;
          goto LABEL_662;
        }

        uint64_t v16 = (unsigned __int8 *)objc_getProperty(v258, v434, 64LL, 1);
        LODWORD(a1) = v16 != 0LL;
        if (v16)
        {
          v574 = objc_getProperty(v258, v436, 64LL, 1);
          if ((-[SATurnstileInfo displaysSameContentAs:forPid:tid:displayOptions:]( (uint64_t)v574,  obj,  *((unsigned int *)v258 + 7),  v258[6],  *(void *)(v604 + 232)) & 1) != 0)
          {
            v435 = 0;
            LODWORD(a1) = 1;
            goto LABEL_662;
          }
        }

        v437 = 1;
        v438 = objc_getProperty(v258, v436, 64LL, 1);
        if (v438)
        {
          v400 = 0;
          goto LABEL_648;
        }

        if (obj
          && (-[SATurnstileInfo _displaysContentForPid:tid:threadPriority:options:displayString:nameCallback:]( (uint64_t)obj,  *((_DWORD *)v258 + 7),  v258[6],  0,  *(void *)(v604 + 232),  0LL,  0LL) & 1) != 0)
        {
          v400 = 0;
          v438 = 0LL;
          int v19 = v587;
LABEL_648:
          a3 = v601;
LABEL_665:

          if ((a1 & 1) != 0)
          {
LABEL_666:

            if ((v437 & 1) == 0) {
              goto LABEL_667;
            }
LABEL_672:

            a1 = v604;
            if ((v590 & 1) != 0)
            {
              v399 = 0LL;
              uint64_t v16 = v579;
LABEL_674:
              v410 = v598;
              v411 = v592;
LABEL_675:

              if ((v410 & 1) != 0)
              {
LABEL_676:

                if ((v411 & 1) == 0) {
                  goto LABEL_677;
                }
LABEL_682:

                if ((v400 & 1) == 0) {
                  goto LABEL_683;
                }
LABEL_678:
                v250 = v258;

                v214 = v568;
LABEL_554:
                uint64_t v16 = v585;
                v249 = a6;
                if (*(_BYTE *)(a1 + 276))
                {
                  v297 = v214;
                  if ((v571 & 1) != 0
                    || (v354 = *((void *)v250 + 12), v354 == 0x7FFFFFFFFFFFFFFFLL)
                    || v354 + 1 != a3)
                  {
                    v298 = objc_getProperty(v250, v296, 88LL, 1);
                    v299 = -[SATimeRange initWithStart:end:]( objc_alloc(&OBJC_CLASS___SATimeRange),  "initWithStart:end:",  v588,  v609);
                    [v298 addObject:v299];
                  }

                  else
                  {
                    v298 = objc_getProperty(v250, v296, 88LL, 1);
                    [v298 lastObject];
                    v355 = (SATimeRange *)objc_claimAutoreleasedReturnValue();
                    v299 = v355;
                    if (v355) {
                      objc_setProperty_atomic(v355, v356, v609, 16LL);
                    }
                  }

                  v214 = v297;
                }

                *((void *)v250 + 12) = v606;
                objc_msgSend(v250, "setSampleCount:", objc_msgSend(v250, "sampleCount") + v595);
                goto LABEL_448;
              }

            v278 = *__error();
            _sa_logt();
            v279 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v279, OS_LOG_TYPE_ERROR))
            {
              v280 = *(void *)(*(void *)(*(void *)(v382 + 128) + 8LL) + 24LL);
              v281 = [self startSampleIndex];
              *(_DWORD *)buf = 134218240;
              v401 = v280;
              v402 = 2048;
              v403 = v281;
              _os_log_error_impl( &dword_186C92000,  v279,  OS_LOG_TYPE_ERROR,  "leafFrameSkippedCountedStateToIndex %lu + 1 != treeCountedState.startSampleIndex %lu",  buf,  0x16u);
            }

            *__error() = v278;
            v282 = *(void *)(*(void *)(*(void *)(v382 + 128) + 8LL) + 24LL);
            [self startSampleIndex];
            _SASetCrashLogMessage( 11708,  "leafFrameSkippedCountedStateToIndex %lu + 1 != treeCountedState.startSampleIndex %lu",  v283,  v284,  v285,  v286,  v287,  v288,  v282);
            _os_crash();
            __break(1u);
            goto LABEL_321;
          }
        }

        v229 = [(id)v217 stringByAppendingFormat:v228];

        v217 = v229;
        v220 = self;
        v227 = v382;
        goto LABEL_259;
      }

      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          double v4 = v380;
          if (*(_BYTE *)(a1 + 209))
          {
            uint64_t v80 = *(void *)(*(void *)(a1 + 120) + 8LL);
            if (*(_BYTE *)(v80 + 24)) {
              *(_BYTE *)(v80 + 24) = 0;
            }
            else {
              [*(id *)(a1 + 40) appendString:@","];
            }
            [v4 stringByReplacingOccurrencesOfString:@"" withString:&stru_189F64BD8];
            v181 = (void *)objc_claimAutoreleasedReturnValue();

            id v21 = v382;
            SAJSONWriteItem(*(void **)(v382 + 40), v181);
            double v4 = v181;
          }

          else
          {
            v152 = *(void *)(*(void *)(*(void *)(a1 + 128) + 8LL) + 24LL);
            if (v152 != 0x7FFFFFFFFFFFFFFFLL)
            {
              if (*(_BYTE *)(a1 + 210))
              {
                saos_printf_frame( *(void **)(a1 + 40),  *(unsigned int *)(*(void *)(*(void *)(a1 + 136) + 8LL) + 24LL),  *(unsigned int *)(a1 + 200),  v152 - *(void *)(*(void *)(*(void *)(a1 + 144) + 8LL) + 24LL) + 1,  *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 152) + 8LL) + 24LL),  *(void **)(*(void *)(*(void *)(a1 + 160) + 8LL) + 40LL));
              }

              else
              {
                v210 = -[SASamplePrinter displayTimeIndexForSampleIndex:](*(void *)(a1 + 32), v152);
                saos_printf_timeline_frame( *(void **)(a1 + 40),  *(unsigned int *)(*(void *)(*(void *)(a1 + 136) + 8LL) + 24LL),  *(unsigned int *)(a1 + 200),  *(void *)(*(void *)(*(void *)(a1 + 128) + 8LL) + 24LL)
                - *(void *)(*(void *)(*(void *)(a1 + 144) + 8LL) + 24LL)
                + 1LL,
                  *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 152) + 8LL) + 24LL),
                  *(void **)(*(void *)(*(void *)(a1 + 160) + 8LL) + 40LL),
                  v210);
              }

              ++*(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL);
              *(void *)(*(void *)(*(void *)(a1 + 144) + 8LL) + 24LL) = *(void *)(*(void *)(*(void *)(a1 + 128) + 8LL)
                                                                                       + 24LL)
                                                                           + 1LL;
              *(void *)(*(void *)(*(void *)(a1 + 128) + 8LL) + 24LL) = 0x7FFFFFFFFFFFFFFFLL;
            }

            [*(id *)(a1 + 40) printWithFormat:@"%-*s<%@>\n", 2, "", v4];
          }

          ++*(void *)(*(void *)(*(void *)(v21 + 80) + 8LL) + 24LL);
          goto LABEL_379;
        }

        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0) {
          goto LABEL_380;
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0) {
          goto LABEL_380;
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0) {
          goto LABEL_380;
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0) {
          goto LABEL_380;
        }
        __int128 v90 = *__error();
        _sa_logt();
        pid_t v91 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v91, OS_LOG_TYPE_ERROR))
        {
          id v92 = (objc_class *)objc_opt_class();
          posix_spawnattr_t v93 = NSStringFromClass(v92);
          posix_spawn_file_actions_t v94 = [v93 UTF8String];
          *(_DWORD *)buf = 136315138;
          v401 = v94;
          _os_log_error_impl(&dword_186C92000, v91, OS_LOG_TYPE_ERROR, "treeNode is a %s", buf, 0xCu);
        }

        *__error() = v90;
        __int128 v95 = (objc_class *)objc_opt_class();
        __int128 v96 = NSStringFromClass(v95);
        char v97 = [v96 UTF8String];
        _SASetCrashLogMessage(11904, "treeNode is a %s", v98, v99, v100, v101, v102, v103, v97);

        _os_crash();
        __break(1u);
        goto LABEL_107;
      }

      __int128 v51 = v380;
      double v4 = v51;
      self = v51;
      if (*(_BYTE *)(a1 + 209))
      {
        if (v51) {
          __int128 v53 = objc_getProperty(v51, v52, 40LL, 1);
        }
        else {
          __int128 v53 = 0LL;
        }
        __int128 v54 = v53;
        if ([v54 count])
        {

          double v4 = self;
          goto LABEL_50;
        }

        if (*(_BYTE *)(a1 + 213))
        {
          if (v4) {
            v135 = objc_getProperty(v4, v55, 32LL, 1);
          }
          else {
            v135 = 0LL;
          }
          v136 = v135;
          v137 = v136 == 0LL;

          double v4 = self;
          if (!v137)
          {
LABEL_50:
            v389 = 0u;
            v390 = 0u;
            v387 = 0u;
            v388 = 0u;
            if (v4) {
              uint64_t v57 = objc_getProperty(v4, v56, 40LL, 1);
            }
            else {
              uint64_t v57 = 0LL;
            }
            uint64_t v58 = v57;
            int v59 = [v58 countByEnumeratingWithState:&v387 objects:v399 count:16];
            if (v59)
            {
              uint64_t v60 = *(void *)v388;
              do
              {
                for (k = 0LL; k != v59; ++k)
                {
                  if (*(void *)v388 != v60) {
                    objc_enumerationMutation(v58);
                  }
                  uint64_t v62 = *(void **)(*((void *)&v387 + 1) + 8 * k);
                  uint64_t v63 = *(void *)(*(void *)(v382 + 120) + 8LL);
                  if (*(_BYTE *)(v63 + 24)) {
                    *(_BYTE *)(v63 + 24) = 0;
                  }
                  else {
                    [*(id *)(v382 + 40) appendString:@","];
                  }
                  [*(id *)(v382 + 40) appendString:@"{"];
                  [v62 writeJSONDictionaryEntriesToStream:*(void *)(v382 + 40)];
                  id v64 = *(void **)(v382 + 40);
                  [MEMORY[0x189607968] numberWithUnsignedInt:*((unsigned int *)v411 + 6)];
                  uint64_t v65 = (void *)objc_claimAutoreleasedReturnValue();
                  SAJSONWriteDictionaryEntry(v64, @"depth", v65);

                  [*(id *)(v382 + 40) appendString:@"}"];
                }

                int v59 = [v58 countByEnumeratingWithState:&v387 objects:v399 count:16];
              }

              while (v59);
            }

            int v67 = v382;
            if (*(_BYTE *)(v382 + 213))
            {
              v385 = 0u;
              v386 = 0u;
              v383 = 0u;
              v384 = 0u;
              uint64_t v68 = self;
              if (self) {
                uint64_t v68 = objc_getProperty(self, v66, 32LL, 1);
              }
              uint64_t v69 = v68;
              uint64_t v70 = [v69 countByEnumeratingWithState:&v383 objects:v398 count:16];
              if (v70)
              {
                uint64_t v71 = *(void *)v384;
                do
                {
                  for (m = 0LL; m != v70; ++m)
                  {
                    if (*(void *)v384 != v71) {
                      objc_enumerationMutation(v69);
                    }
                    uint64_t v73 = *(void **)(*((void *)&v383 + 1) + 8 * m);
                    uint64_t v74 = *(void *)(*(void *)(v382 + 120) + 8LL);
                    if (*(_BYTE *)(v74 + 24)) {
                      *(_BYTE *)(v74 + 24) = 0;
                    }
                    else {
                      [*(id *)(v382 + 40) appendString:@","];
                    }
                    [*(id *)(v382 + 40) appendString:@"{"];
                    [v73 writeJSONDictionaryEntriesToStream:*(void *)(v382 + 40)];
                    int v75 = *(void **)(v382 + 40);
                    [MEMORY[0x189607968] numberWithUnsignedInt:*((unsigned int *)v411 + 6)];
                    uint64_t v76 = (void *)objc_claimAutoreleasedReturnValue();
                    SAJSONWriteDictionaryEntry(v75, @"depth", v76);

                    [*(id *)(v382 + 40) appendString:@"}"];
                  }

                  uint64_t v70 = [v69 countByEnumeratingWithState:&v383 objects:v398 count:16];
                }

                while (v70);
              }

              int v67 = v382;
            }

            uint64_t v77 = *(void *)(v67 + 80);
LABEL_152:
            ++*(void *)(*(void *)(v77 + 8) + 24LL);
            goto LABEL_378;
          }
        }

        else
        {

          double v4 = self;
        }

LABEL_681:
              if (v411) {
                goto LABEL_682;
              }
LABEL_677:

              if (v400) {
                goto LABEL_678;
              }
LABEL_683:
              v220 = v611;
LABEL_684:
              v241 = (uint64_t)v258;
              v214 = v568;
LABEL_446:

              goto LABEL_447;
            }

            uint64_t v16 = v579;
LABEL_680:
            v411 = v592;
            if ((_DWORD)v598) {
              goto LABEL_676;
            }
            goto LABEL_681;
          }

LABEL_671:
          if (v437) {
            goto LABEL_672;
          }
LABEL_667:

          a1 = v604;
          uint64_t v16 = v579;
          if ((_DWORD)v590)
          {
            v399 = 0LL;
            goto LABEL_674;
          }

          goto LABEL_680;
        }

LABEL_661:
        v435 = 1;
LABEL_662:
        v437 = v28 ^ 1;
        if (([v568 isPartOfADeadlock] ^ *((unsigned __int8 *)v258 + 25)))
        {
          v400 = 0;
          a3 = v601;
          if (v435)
          {
LABEL_664:
            v438 = 0LL;
            int v19 = v587;
            goto LABEL_665;
          }
        }

        else
        {
          v491 = [v568 isBlockedByADeadlock];
          v400 = v491 ^ [v568 isBlockedByADeadlock] ^ 1;
          a3 = v601;
          if ((v435 & 1) != 0) {
            goto LABEL_664;
          }
        }

        int v19 = v587;
        if ((_DWORD)a1) {
          goto LABEL_666;
        }
        goto LABEL_671;
      }
    }
  }

  if (-[SASamplePrinter hasTimeIndexes](*(void *)(a1 + 32))
    && *(void *)(*(void *)(*(void *)(a1 + 112) + 8LL) + 24LL) + 1LL != a3
    || ![*(id *)(*(void *)(*(void *)(a1 + 192) + 8) + 40) hasSameStackAs:v19])
  {
    LODWORD(v594) = !*(_BYTE *)(a1 + 262)
                 && *(void *)(*(void *)(*(void *)(a1 + 192) + 8LL) + 40LL)
    goto LABEL_279;
  }

  v144 = [*(id *)(a1 + 88) lastObject];
  if (v144)
  {
    v145 = (void *)v144;
    do
    {
      objc_opt_class();
      v146 = v145;
      if ((objc_opt_isKindOfClass() & 1) == 0) {
        break;
      }
      objc_msgSend(v145, "setSampleCount:", objc_msgSend(v145, "sampleCount") + v28);
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 200) + 8LL) + 40LL), v145);
      v148 = objc_getProperty(v145, v147, 40LL, 1);
      v149 = [v148 lastObject];
      v150 = v146;
      v146 = (void *)v149;

      v145 = v146;
    }

    while (v146);
    int v19 = v587;
    v151 = v606;
    goto LABEL_366;
  }

  v151 = v606;
LABEL_367:
  if (!*(_BYTE *)(a1 + 261))
  {
    v206 = a4;
    v205 = v584;
    goto LABEL_542;
  }

  v199 = *(void *)(a1 + 32);
  v200 = *(void **)(v199 + 16);
  v201 = *(id *)(v199 + 160);
  double v10 = v19;
  uint64_t v20 = v200;
  if (![(id)v10 isRunning])
  {
    if ([(id)v10 isRunnable])
    {
      else {
        v202 = 0LL;
      }
    }

    else
    {
      v202 = 0LL;
    }

    v207 = [(id)v10 cpuNum];
    if (v207 == -1) {
      goto LABEL_390;
    }
    v208 = v207;
    if (v207 < 0xFF)
    {
      v202 |= 8 * v207 + 8;
      goto LABEL_390;
    }

    v374 = *__error();
    _sa_logt();
    v375 = (void *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled((os_log_t)v375, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v632) = v208;
      _os_log_error_impl(&dword_186C92000, (os_log_t)v375, OS_LOG_TYPE_ERROR, "bad cpu num %u", buf, 8u);
    }

    *__error() = v374;
    _SASetCrashLogMessage(168, "bad cpu num %u", v492, v493, v494, v495, v496, v497, v208);
    _os_crash();
    __break(1u);
    goto LABEL_688;
  }

  else {
    v202 = 0LL;
  }
  if (([(id)v20 displayCPUNumForRunningThreads] & 1) != 0
    || [(id)v20 displayCPUClusterInfoForRunningThreads])
  {
    v203 = [(id)v10 cpuNum];
    if ((_DWORD)v203 != -1)
    {
      v204 = (const char *)v203;
      if ([(id)v20 displayCPUNumForRunningThreads])
      {
        if (v204 >= 0xFF)
        {
          v300 = *__error();
          _sa_logt();
          v160 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v160, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109120;
            LODWORD(v632) = (_DWORD)v204;
            _os_log_error_impl(&dword_186C92000, v160, OS_LOG_TYPE_ERROR, "bad cpu num %u", buf, 8u);
          }

          *__error() = v300;
          _SASetCrashLogMessage(147, "bad cpu num %u", v509, v510, v511, v512, v513, v514, (char)v204);
          _os_crash();
          __break(1u);
          goto LABEL_692;
        }

        v202 |= (8 * (_DWORD)v204 + 8);
      }
    }
  }

LABEL_390:
  id v9 = [(id)v10 isSuspended];
  if (*(_BYTE *)(a1 + 272))
  {
    [(id)v10 waitInfo];
    v209 = (char *)(id)objc_claimAutoreleasedReturnValue();

    a6 = v209;
    if (*(_BYTE *)(a1 + 272))
    {
      [(id)v10 turnstileInfo];
      id obj = (id)objc_claimAutoreleasedReturnValue();

      goto LABEL_395;
    }
  }

  else
  {
    a6 = 0LL;
  }

  id obj = 0LL;
LABEL_395:
  v210 = *(void **)(*(void *)(a1 + 32) + 144LL);
  objc_msgSend(MEMORY[0x189607968], "numberWithUnsignedLongLong:", objc_msgSend(v611, "threadId"));
  v211 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v28 = [v210 objectForKeyedSubscript:v211];

  [(id)v28 threadState];
  v212 = (void *)objc_claimAutoreleasedReturnValue();

  v573 = (void *)v10;
  if (v212 == (void *)v10)
  {
    v214 = (void *)v28;
  }

  else
  {

    v214 = 0LL;
  }

  v578 = v202 | v9;
  if (*(_BYTE *)(a1 + 273))
  {
    LODWORD(v600) = [(id)v10 originPid];
    int v19 = v587;
    if (*(_BYTE *)(a1 + 273)) {
      LODWORD(v594) = [(id)v10 proximatePid];
    }
    else {
      LODWORD(v594) = -1;
    }
  }

  else
  {
    LODWORD(v600) = -1;
    LODWORD(v594) = -1;
    int v19 = v587;
  }

  if (!*(_BYTE *)(a1 + 274))
  {
    LODWORD(v607) = 0;
LABEL_416:
    v220 = v611;
    goto LABEL_440;
  }

  if (!v16)
  {
    v412 = *__error();
    _sa_logt();
    v413 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v413, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl( &dword_186C92000,  v413,  OS_LOG_TYPE_ERROR,  "No task state for thread state in microstackshot data",  buf,  2u);
    }

    *__error() = v412;
    _SASetCrashLogMessage( 10890,  "No task state for thread state in microstackshot data",  v414,  v415,  v416,  v417,  v418,  v419,  v559);
    _os_crash();
    __break(1u);
    goto LABEL_632;
  }

  v215 = SAMicrostackshotStateForFlagsTaskAndThreadState([(id)v10 microstackshotFlags], v16, (void *)v10);
  v216 = *(char **)(a1 + 96);
  if (!v216)
  {
    if (*(_BYTE *)(a1 + 275)) {
      v219 = v215;
    }
    else {
      v219 = v215 & 0xFFFFFFE3;
    }
    LODWORD(v607) = v219;
    goto LABEL_416;
  }

  if ((v215 & 0x10) == 0)
  {
    if (*(_BYTE *)(a1 + 275)) {
      v217 = v215;
    }
    else {
      v217 = v215 & 0xFFFFFFE3;
    }
    LODWORD(v607) = v217;
    v218 = v595;
    goto LABEL_426;
  }

  v221 = 40LL;
  if ((v215 & 8) == 0) {
    v221 = 48LL;
  }
  v218 = v595;
  *(void *)&v216[v221] += v595;
  v216 = *(char **)(a1 + 96);
  if (v216)
  {
    v222 = 32LL;
    if ((v215 & 4) == 0) {
      v222 = 24LL;
    }
    *(void *)&v216[v222] += v595;
    v216 = *(char **)(a1 + 96);
    if (*(_BYTE *)(a1 + 275)) {
      v223 = v215;
    }
    else {
      v223 = v215 & 0xFFFFFFE3;
    }
    LODWORD(v607) = v223;
    if (v216) {
LABEL_426:
    }
      v216 = (char *)objc_getProperty(v216, v213, 8LL, 1);
  }

  else
  {
    if (*(_BYTE *)(a1 + 275)) {
      v558 = v215;
    }
    else {
      v558 = v215 & 0xFFFFFFE3;
    }
    LODWORD(v607) = v558;
  }

  v224 = v216;
  [MEMORY[0x189607968] numberWithUnsignedInt:v607];
  v225 = (void *)objc_claimAutoreleasedReturnValue();
  [v224 objectForKeyedSubscript:v225];
  v226 = (void *)objc_claimAutoreleasedReturnValue();

  if (v226) {
    objc_msgSend(MEMORY[0x189607968], "numberWithUnsignedLong:", objc_msgSend(v226, "unsignedLongValue") + v218);
  }
  else {
    [MEMORY[0x189607968] numberWithUnsignedInteger:v218];
  }
  v228 = (void *)objc_claimAutoreleasedReturnValue();
  v229 = *(id *)(a1 + 96);
  if (v229) {
    v229 = objc_getProperty(v229, v227, 8LL, 1);
  }
  v230 = v229;
  [MEMORY[0x189607968] numberWithUnsignedInt:v607];
  v231 = (void *)objc_claimAutoreleasedReturnValue();
  [v230 setObject:v228 forKeyedSubscript:v231];

  v233 = *(id *)(a1 + 96);
  if (v233) {
    v233 = objc_getProperty(v233, v232, 16LL, 1);
  }
  v234 = v233;
  [MEMORY[0x189607968] numberWithUnsignedLongLong:v578];
  v235 = (void *)objc_claimAutoreleasedReturnValue();
  id v9 = [v234 objectForKeyedSubscript:v235];

  if (v9) {
    objc_msgSend(MEMORY[0x189607968], "numberWithUnsignedLong:", objc_msgSend((id)v9, "unsignedLongValue") + v595);
  }
  else {
  uint64_t v28 = [MEMORY[0x189607968] numberWithUnsignedInteger:v595];
  }
  v237 = *(id *)(a1 + 96);
  if (v237) {
    v237 = objc_getProperty(v237, v236, 16LL, 1);
  }
  v238 = v237;
  [MEMORY[0x189607968] numberWithUnsignedLongLong:v578];
  uint64_t v16 = (unsigned __int8 *)objc_claimAutoreleasedReturnValue();
  [v238 setObject:v28 forKeyedSubscript:v16];

  v220 = v611;
  a3 = v601;
LABEL_440:
  v239 = *(_BYTE **)(*(void *)(*(void *)(a1 + 200) + 8LL) + 40LL);
  if (v239)
  {
    if ((v239[24] & 1) != 0)
    {
      v240 = objc_getProperty(v239, v213, 40LL, 1);
      goto LABEL_444;
    }

LABEL_632:
    v420 = *__error();
    _sa_logt();
    v421 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v421, OS_LOG_TYPE_ERROR))
    {
      v422 = [*(id *)(*(void *)(*(void *)(a1 + 200) + 8) + 40) debugDescription];
      v423 = [v422 UTF8String];
      *(_DWORD *)buf = 136315138;
      v632 = v423;
      _os_log_error_impl(&dword_186C92000, v421, OS_LOG_TYPE_ERROR, "leaf frame %s !isLeafFrame", buf, 0xCu);
    }

    *__error() = v420;
    v424 = [*(id *)(*(void *)(*(void *)(a1 + 200) + 8) + 40) debugDescription];
    v425 = [v424 UTF8String];
    _SASetCrashLogMessage(10934, "leaf frame %s !isLeafFrame", v426, v427, v428, v429, v430, v431, v425);

    _os_crash();
    __break(1u);
LABEL_635:
    v432 = *__error();
    _sa_logt();
    v433 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v433, OS_LOG_TYPE_FAULT)) {
      goto LABEL_710;
    }
    while (2)
    {

      *__error() = v432;
      uint64_t v16 = v585;
      a3 = v601;
      a1 = v604;
      uint64_t v20 = v588;
LABEL_274:
      v152 = *(_BYTE **)(*(void *)(*(void *)(a1 + 200) + 8LL) + 40LL);
      if (v152)
      {
        if ((v152[24] & 1) == 0) {
          goto LABEL_655;
        }
        v153 = objc_getProperty(v152, v30, 40LL, 1);
      }

      else
      {
        v153 = *(id *)(a1 + 88);
      }

      double v10 = (uint64_t)v153;
      [v153 lastObject];
      v160 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (!v160)
      {
        [(id)v10 addObject:v598];
        goto LABEL_585;
      }

      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0) {
        goto LABEL_658;
      }
      if (-[os_log_s startSampleIndex](v160, "startSampleIndex") != 0x7FFFFFFFFFFFFFFFLL
        && -[os_log_s startSampleIndex](v160, "startSampleIndex") >= a3)
      {
        objc_msgSend((id)v10, "insertObject:atIndex:", v598, objc_msgSend((id)v10, "count") - 1);
        goto LABEL_584;
      }

      v161 = &OBJC_IVAR___SASharedCache__slidBaseAddress;
      v162 = *((void *)v160 + 12);
      [(id)v10 addObject:v598];
      uint64_t v20 = v588;
      if (v162 == 0x7FFFFFFFFFFFFFFFLL || v162 < a3) {
        goto LABEL_585;
      }
      v163 = -[os_log_s sampleCount](v160, "sampleCount");
      if (-[os_log_s startSampleIndex](v160, "startSampleIndex") == 0x7FFFFFFFFFFFFFFFLL) {
        v164 = -1LL;
      }
      else {
        v164 = -[os_log_s startSampleIndex](v160, "startSampleIndex") - a3;
      }
      v300 = v164 + v163;
      if (-[os_log_s sampleCount](v160, "sampleCount") > (unint64_t)(v164 + v163))
      {
        uint64_t v20 = v588;
        if (!v300) {
          goto LABEL_585;
        }
        v600 = v300;
        if (a3 == 0x7FFFFFFFFFFFFFFFLL)
        {
          v302 = objc_getProperty(v160, v301, 88LL, 1);
          [v302 lastObject];
          v303 = (id)objc_claimAutoreleasedReturnValue();
          [v303 startTime];
          v304 = (id)objc_claimAutoreleasedReturnValue();
        }

        else
        {
          [*(id *)(*(void *)(a1 + 32) + 160) sampleTimestamps];
          v302 = (id)objc_claimAutoreleasedReturnValue();
          [v302 objectAtIndexedSubscript:a3];
          v303 = (id)objc_claimAutoreleasedReturnValue();
          v304 = v303;
        }

        if (!v304) {
          goto LABEL_695;
        }
        v306 = objc_getProperty(v160, v305, 88LL, 1);
        [v306 lastObject];
        v307 = (void *)objc_claimAutoreleasedReturnValue();
        [v307 startTime];
        v308 = (void *)objc_claimAutoreleasedReturnValue();
        v309 = [v308 le:v304];

        if ((v309 & 1) != 0)
        {
          v311 = objc_getProperty(v160, v310, 88LL, 1);
          [v311 lastObject];
          v312 = (void *)objc_claimAutoreleasedReturnValue();
          [v312 endTime];
          v313 = (void *)objc_claimAutoreleasedReturnValue();
          v595 = v10;
          v607 = (unint64_t)v304;
          if ([v313 ge:v304])
          {
            v315 = objc_getProperty(v160, v314, 88LL, 1);
            [v315 lastObject];
            v316 = (void *)objc_claimAutoreleasedReturnValue();
            [v316 endTime];
            v317 = (id)objc_claimAutoreleasedReturnValue();
          }

          else
          {
            v317 = v304;
          }

          if (v317)
          {
            v597 = +[SATimeRange timeRangeStart:end:](&OBJC_CLASS___SATimeRange, "timeRangeStart:end:", v607, v317);
            -[os_log_s setSampleCount:](v160, "setSampleCount:", -[os_log_s sampleCount](v160, "sampleCount") - v600);
            *((void *)v160 + 12) -= v600;
            if (v571 && v601 && v601 != 0x7FFFFFFFFFFFFFFFLL)
            {
              [*(id *)(*(void *)(a1 + 32) + 160) sampleTimestamps];
              v319 = (id)objc_claimAutoreleasedReturnValue();
              [v319 objectAtIndexedSubscript:v601 - 1];
              v322 = (void *)objc_claimAutoreleasedReturnValue();
              v358 = objc_getProperty(v160, v357, 88LL, 1);
              [v358 lastObject];
              v359 = (void *)objc_claimAutoreleasedReturnValue();
              v361 = v359;
              v323 = v587;
              if (v359) {
                objc_setProperty_atomic(v359, v360, v322, 16LL);
              }
            }

            else
            {
              v319 = objc_getProperty(v160, v318, 88LL, 1);
              [v319 lastObject];
              v320 = (void *)objc_claimAutoreleasedReturnValue();
              v322 = v320;
              v323 = v587;
              if (v320) {
                objc_setProperty_atomic(v320, v321, (id)v607, 16LL);
              }
            }

            v325 = objc_getProperty(v160, v324, 56LL, 1);
            v327 = objc_getProperty(v160, v326, 64LL, 1);
            v328 = +[SACallTreeState treeCountedStateWithWaitInfo:turnstileInfo:isPartOfADeadlock:isBlockedByADeadlock:state:microstackshotState:pid:threadId:threadPriority:timeRange:originPid:proximatePid:startSampleIndex:sampleCount:]( (uint64_t)SACallTreeState,  v325,  v327,  *((_BYTE *)v160 + 25) & 1,  *((_BYTE *)v160 + 26) & 1,  *((void *)v160 + 9),  *((_DWORD *)v160 + 8),  *((_DWORD *)v160 + 7),  *((void *)v160 + 6),  [v323 basePriority],  v597,  *(void *)((char *)v160 + 36),  v601,  v600);
            double v10 = v595;
            [(id)v595 addObject:v328];
            uint64_t v16 = v585;
            if (v601 != 0x7FFFFFFFFFFFFFFFLL)
            {
              v330 = objc_getProperty(v160, v329, 80LL, 1);
              v331 = [v330 count];

              v333 = 0LL;
              if (v331)
              {
                do
                {
                  v334 = objc_getProperty(v160, v332, 80LL, 1);
                  [v334 objectAtIndexedSubscript:v333];
                  v335 = (void *)objc_claimAutoreleasedReturnValue();

                  [v335 startTimestamp];
                  v336 = (void *)objc_claimAutoreleasedReturnValue();
                  v337 = [v336 gt:v607];

                  if ((v337 & 1) != 0) {
                    break;
                  }
                  ++v333;
                  v338 = objc_getProperty(v160, v332, 80LL, 1);
                  v339 = [v338 count];
                }

                while (v333 < v339);
              }

              v340 = objc_getProperty(v160, v332, 80LL, 1);
              v341 = [v340 count];

              if (v333 < v341)
              {
                v343 = objc_getProperty(v160, v342, 80LL, 1);
                v344 = [v343 count] - v333;

                v346 = objc_getProperty(v160, v345, 80LL, 1);
                v602 = v344;
                objc_msgSend(v346, "subarrayWithRange:", v333, v344);
                v347 = (void *)objc_claimAutoreleasedReturnValue();
                v349 = (void *)[v347 mutableCopy];
                if (v328) {
                  objc_setProperty_atomic(v328, v348, v349, 80LL);
                }

                v351 = objc_getProperty(v160, v350, 80LL, 1);
                objc_msgSend(v351, "removeObjectsInRange:", v333, v602);
              }
            }

            a1 = v604;
LABEL_584:
            uint64_t v20 = v588;
LABEL_585:

            int v19 = v587;
            __int128 v95 = v611;
LABEL_586:
            v206 = a4;
            v205 = v584;
            v151 = v606;
            goto LABEL_587;
          }
        }

        else
        {
LABEL_695:
          v517 = v304;
          v518 = *__error();
          _sa_logt();
          v519 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v519, OS_LOG_TYPE_ERROR))
          {
            v520 = -[os_log_s debugDescription](v160, "debugDescription");
            v161 = (int *)[v520 UTF8String];
            v521 = [v517 debugDescription];
            v522 = [v521 UTF8String];
            *(_DWORD *)buf = 136315650;
            v632 = (unint64_t)v161;
            v633 = 2048;
            v634 = v601;
            v635 = 2080;
            v636 = v522;
            _os_log_error_impl(&dword_186C92000, v519, OS_LOG_TYPE_ERROR, "%s splitting at %lu %s", buf, 0x20u);
          }

          *__error() = v518;
          -[os_log_s debugDescription](v160, "debugDescription");
          v160 = (os_log_s *) objc_claimAutoreleasedReturnValue();
          v523 = -[os_log_s UTF8String](v160, "UTF8String");
          v524 = [v517 debugDescription];
          [v524 UTF8String];
          _SASetCrashLogMessage(11054, "%s splitting at %lu %s", v525, v526, v527, v528, v529, v530, v523);

          _os_crash();
          __break(1u);
        }

        v531 = *__error();
        _sa_logt();
        v532 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v532, OS_LOG_TYPE_ERROR))
        {
          v533 = -[os_log_s debugDescription](v160, "debugDescription");
          v161 = (int *)[v533 UTF8String];
          v534 = [(id)v607 debugDescription];
          v535 = [v534 UTF8String];
          *(_DWORD *)buf = 136315394;
          v632 = (unint64_t)v161;
          v633 = 2080;
          v634 = v535;
          _os_log_error_impl( &dword_186C92000,  v532,  OS_LOG_TYPE_ERROR,  "nil newCountedStateEndTimestamp from %s and %s",  buf,  0x16u);
        }

        *__error() = v531;
        -[os_log_s debugDescription](v160, "debugDescription");
        v160 = (os_log_s *) objc_claimAutoreleasedReturnValue();
        v515 = (os_log_s *)-[os_log_s UTF8String](v160, "UTF8String");
        v536 = [(id)v607 debugDescription];
        [v536 UTF8String];
        _SASetCrashLogMessage( 11058,  "nil newCountedStateEndTimestamp from %s and %s",  v537,  v538,  v539,  v540,  v541,  v542,  (char)v515);

        _os_crash();
        __break(1u);
LABEL_701:
        v590 = [*(id *)(v604 + 40) taskStates];
        v516 = [(id)v590 indexOfObject:v585];
        goto LABEL_702;
      }

LABEL_692:
      v600 = v300;
      v595 = v10;
      LODWORD(v609) = *__error();
      _sa_logt();
      v515 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v515, OS_LOG_TYPE_ERROR))
      {
        v606 = -[os_log_s startSampleIndex](v160, "startSampleIndex");
        v598 = -[os_log_s sampleCount](v160, "sampleCount");
        LODWORD(v161) = v10 == *(void *)(v604 + 88);
        v607 = [v611 threadStates];
        a6 = (char *)[(id)v607 indexOfObject:v587];
        v594 = [v587 startSampleIndex];
        v592 = [v587 endSampleIndex];
        if (v585) {
          goto LABEL_701;
        }
        v516 = -1LL;
LABEL_702:
        v543 = [v585 startSampleIndex];
        v544 = [v585 endSampleIndex];
        v545 = [*(id *)(*(void *)(*(void *)(v604 + 200) + 8) + 40) startSampleIndex];
        v546 = [*(id *)(*(void *)(*(void *)(v604 + 200) + 8) + 40) sampleCount];
        v547 = [(id)v595 lastObject];
        v548 = [v547 UTF8String];
        *(_DWORD *)buf = 134221570;
        v632 = v606;
        v633 = 2048;
        v634 = v598;
        v635 = 2048;
        v636 = v600;
        v637 = 1024;
        *(_DWORD *)v638 = (_DWORD)v161;
        *(_WORD *)&v638[4] = 2048;
        *(void *)&v638[6] = v601;
        *(_WORD *)&v638[14] = 2048;
        *(void *)&v638[16] = a6;
        *(_WORD *)&v638[24] = 2048;
        *(void *)&v638[26] = v594;
        v639 = 2048;
        v640 = v592;
        v641 = 2048;
        v642 = v516;
        v643 = 2048;
        v644 = v543;
        v645 = 2048;
        v646 = v544;
        v647 = 1024;
        *(_DWORD *)v648 = v571;
        *(_WORD *)&v648[4] = 2048;
        *(void *)&v648[6] = v545;
        v649 = 2048;
        *(void *)v650 = v546;
        *(_WORD *)&v650[8] = 2080;
        v651 = v548;
        _os_log_error_impl( &dword_186C92000,  v515,  OS_LOG_TYPE_ERROR,  "start %lu, count %lu, newcount %lu, is root %d, index %lu, thread state %lu %lu-%lu, task state %lu %lu-%lu, t imeJump %d, leaf start %lu, count %lu, state %s",  buf,  0x90u);

        if (v585) {
      }
        }

      *__error() = (int)v609;
      v609 = (id)-[os_log_s startSampleIndex](v160, "startSampleIndex");
      v549 = -[os_log_s sampleCount](v160, "sampleCount");
      v606 = v595 == *(void *)(v604 + 88);
      v607 = v549;
      [v611 threadStates];
      v433 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v611 = (void *)-[os_log_s indexOfObject:](v433, "indexOfObject:", v587);
      LODWORD(v2_Block_object_dispose((const void *)(v1 - 240), 8) = [v587 startSampleIndex];
      double v10 = [v587 endSampleIndex];
      if (v585)
      {
        v598 = [*(id *)(v604 + 40) taskStates];
        [(id)v598 indexOfObject:v585];
      }

      [v585 startSampleIndex];
      [v585 endSampleIndex];
      id v9 = [*(id *)(*(void *)(*(void *)(v604 + 200) + 8) + 40) startSampleIndex];
      v432 = [*(id *)(*(void *)(*(void *)(v604 + 200) + 8) + 40) sampleCount];
      v550 = [(id)v595 lastObject];
      [v550 UTF8String];
      _SASetCrashLogMessage( 11050,  "start %lu, count %lu, newcount %lu, is root %d, index %lu, thread state %lu %lu-%lu, task state %lu %lu-%lu, tim eJump %d, leaf start %lu, count %lu, state %s",  v551,  v552,  v553,  v554,  v555,  v556,  (char)v609);

      if (v585) {
      _os_crash();
      }
      __break(1u);
LABEL_710:
      v557 = [(id) v598 UTF8String];
      *(_DWORD *)buf = 136315138;
      v632 = v557;
      _os_log_fault_impl( &dword_186C92000,  v433,  OS_LOG_TYPE_FAULT,  "Countless state change %s, but no sampleIndex",  buf,  0xCu);
      continue;
    }
  }

  v240 = *(id *)(a1 + 88);
LABEL_444:
  double v10 = 0x18C4AE000uLL;
  v241 = v598;
  v572 = v240;
  if (v598)
  {
    [v240 addObject:v598];
    goto LABEL_446;
  }

  if (!*(_BYTE *)(a1 + 262))
  {
    v241 = [v240 lastObject];
    if (!v241) {
      goto LABEL_446;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0
      || *(void *)(v241 + 72) != v578
      || *(_DWORD *)(v241 + 32) != (_DWORD)v607
      || *(_DWORD *)(v241 + 36) != (_DWORD)v600
      || *(_DWORD *)(v241 + 40) != (_DWORD)v594)
    {
      goto LABEL_446;
    }

    v568 = v214;
    v294 = &OBJC_IVAR___SASharedCache__slidBaseAddress;
    uint64_t v20 = (uint64_t)objc_getProperty((id)v241, v293, 56LL, 1);
    LODWORD(v9) = [(id)v20 isEqual:a6];
    v258 = (uint64_t *)v241;
    if ((v9 & 1) != 0)
    {
      LODWORD(v59_Block_object_dispose((const void *)(v1 - 240), 8) = 0;
      LODWORD(v590) = 0;
      goto LABEL_638;
    }

LABEL_609:
    uint64_t v16 = (unsigned __int8 *)objc_getProperty((id)v241, v295, v294[166], 1);
    LODWORD(v59_Block_object_dispose((const void *)(v1 - 240), 8) = v16 != 0LL;
    if (v16)
    {
      v576 = objc_getProperty((id)v241, v295, v294[166], 1);
      if ((-[SAWaitInfo displaysSameContentAs:forPid:tid:displayOptions:]( (uint64_t)v576,  a6,  *(_DWORD *)(v241 + 28),  *(void *)(v241 + 48),  *(void *)(a1 + 232)) & 1) != 0)
      {
        v579 = v16;
        LODWORD(v590) = 0;
        LODWORD(v59_Block_object_dispose((const void *)(v1 - 240), 8) = 1;
        goto LABEL_638;
      }
    }

LABEL_620:
    v399 = objc_getProperty(v258, v295, v294[166], 1);
    if (!v399) {
      goto LABEL_625;
    }
    v400 = 0;
LABEL_628:
    v410 = v598;
    v411 = 1;
    goto LABEL_675;
  }

  v568 = v214;
  v614 = 0u;
  v615 = 0u;
  v612 = 0u;
  v613 = 0u;
  v258 = (uint64_t *)v240;
  v259 = [v258 countByEnumeratingWithState:&v612 objects:v652 count:16];
  if (!v259) {
    goto LABEL_684;
  }
  v260 = v259;
  v261 = v578;
  if (v578) {
    v262 = 0;
  }
  else {
    v262 = (_DWORD)v607 == 0;
  }
  v264 = v262 && (_DWORD)v600 == 0 && (_DWORD)v594 == 0;
  v265 = *(void *)v613;
  v266 = v264;
  v563 = v266;
  v267 = &OBJC_IVAR___SASharedCache__slidBaseAddress;
  while (2)
  {
    v268 = 0LL;
LABEL_471:
    if (*(void *)v613 != v265) {
      objc_enumerationMutation(v258);
    }
    v269 = *(void *)(*((void *)&v612 + 1) + 8 * v268);
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0) {
      goto LABEL_531;
    }
    if (v269)
    {
      if (*(void *)(v269 + v267[170]) == v261
        && *(_DWORD *)(v269 + 32) == (_DWORD)v607
        && *(_DWORD *)(v269 + 36) == (_DWORD)v600
        && *(_DWORD *)(v269 + 40) == (_DWORD)v594)
      {
        v271 = objc_getProperty((id)v269, v270, 56LL, 1);
        goto LABEL_480;
      }

LABEL_531:
      if (v260 == ++v268)
      {
        v292 = [v258 countByEnumeratingWithState:&v612 objects:v652 count:16];
        v260 = v292;
        if (!v292)
        {
          a1 = v604;
          v241 = (uint64_t)v258;
          v214 = v568;
          v220 = v611;
          goto LABEL_446;
        }

        continue;
      }

      goto LABEL_471;
    }

    break;
  }

  if ((v563 & 1) == 0)
  {
    int v19 = v587;
    v261 = v578;
    v267 = &OBJC_IVAR___SASharedCache__slidBaseAddress;
    goto LABEL_531;
  }

  v271 = 0LL;
  int v19 = v587;
  v261 = v578;
LABEL_480:
  v591 = v271;
  v273 = [v591 isEqual:a6];
  if ((v273 & 1) != 0)
  {
    v593 = 0;
    goto LABEL_482;
  }

  if (v269)
  {
    v276 = objc_getProperty((id)v269, v272, 56LL, 1);
    v593 = v276 != 0LL;
    v569 = v276;
    if (v276)
    {
      v599 = 1;
      v567 = objc_getProperty((id)v269, v272, 56LL, 1);
      if ((-[SAWaitInfo displaysSameContentAs:forPid:tid:displayOptions:]( (uint64_t)v567,  a6,  *(_DWORD *)(v269 + 28),  *(void *)(v269 + 48),  *(void *)(v604 + 232)) & 1) != 0)
      {
        v577 = 0;
        v593 = 1;
        v274 = obj;
        v275 = &OBJC_IVAR___SASharedCache__slidBaseAddress;
LABEL_488:
        v277 = objc_getProperty((id)v269, v272, v275[167], 1);
        goto LABEL_489;
      }
    }

    v599 = 1;
    v570 = objc_getProperty((id)v269, v272, 56LL, 1);
    if (v570)
    {
      v286 = 0;
      goto LABEL_520;
    }

    v272 = (const char *)*(unsigned int *)(v269 + 28);
    v288 = *(void *)(v269 + 48);
  }

  else
  {
    v272 = 0LL;
    v593 = 0;
    v569 = 0LL;
    v288 = 0LL;
  }

  v267 = &OBJC_IVAR___SASharedCache__slidBaseAddress;
  if (a6)
  {
    v570 = 0LL;
    if (-[SAWaitInfo _displaysContentForPid:tid:options:displayString:nameCallback:]( (uint64_t)a6,  (int)v272,  v288,  *(void *)(v604 + 232),  0LL,  0LL))
    {
      v286 = 0;
      v599 = 1;
      goto LABEL_521;
    }
  }

  else
  {
    v570 = 0LL;
  }

LABEL_482:
  v274 = obj;
  v275 = &OBJC_IVAR___SASharedCache__slidBaseAddress;
  v599 = v273 ^ 1;
  if (v269)
  {
    v577 = v273 ^ 1;
    goto LABEL_488;
  }

  v277 = 0LL;
  v577 = v273 ^ 1;
LABEL_489:
  v575 = v277;
  v279 = [v575 isEqual:v274];
  if ((v279 & 1) != 0)
  {
    v580 = 0;
    goto LABEL_491;
  }

  if (!v269)
  {
    v289 = 0;
    v580 = 0;
    v565 = 0LL;
    v290 = 0LL;
    if (v274) {
      goto LABEL_509;
    }
    goto LABEL_535;
  }

  v283 = objc_getProperty((id)v269, v278, v275[167], 1);
  v580 = v283 != 0LL;
  v565 = v283;
  if (v283)
  {
    v564 = objc_getProperty((id)v269, v284, v275[167], 1);
    if (-[SATurnstileInfo displaysSameContentAs:forPid:tid:displayOptions:]( (uint64_t)v564,  v274,  *(unsigned int *)(v269 + 28),  *(void *)(v269 + 48),  *(void *)(v604 + 232)))
    {
      v281 = [v568 isPartOfADeadlock];
      v282 = 0;
      v280 = 1;
      v580 = 1;
LABEL_497:
      v285 = v280;
      v280 = v282;
LABEL_516:
      v291 = [v568 isBlockedByADeadlock];
      v261 = v578;
      v286 = v291 ^ [v568 isBlockedByADeadlock] ^ 1;
      if ((v280 & 1) != 0) {
        goto LABEL_517;
      }
LABEL_524:
      if (!v580) {
        goto LABEL_525;
      }
LABEL_518:

      int v19 = v587;
      if ((v285 & 1) == 0) {
        goto LABEL_519;
      }
LABEL_526:

      if ((v577 & 1) == 0) {
        goto LABEL_527;
      }
LABEL_520:
      v267 = &OBJC_IVAR___SASharedCache__slidBaseAddress;
LABEL_521:

      if (v593) {
        goto LABEL_522;
      }
LABEL_528:
      if (v599) {
        goto LABEL_529;
      }
      goto LABEL_530;
    }
  }

  v287 = v275[167];
  v285 = 1;
  v566 = objc_getProperty((id)v269, v284, v287, 1);
  if (v566)
  {
    v286 = 0;
    goto LABEL_517;
  }

  v289 = *(_DWORD *)(v269 + 28);
  v290 = *(void *)(v269 + 48);
  if (!v274)
  {
LABEL_535:
    v566 = 0LL;
    goto LABEL_491;
  }

LABEL_447:
  v242 = v10 + 3496;
  v243 = [v214 isPartOfADeadlock];
  v244 = [v214 isBlockedByADeadlock];
  v245 = [*(id *)(a1 + 40) pid];
  v246 = [v220 threadId];
  v247 = [v573 basePriority];
  v248 = -[SATimeRange initWithStart:end:](objc_alloc(&OBJC_CLASS___SATimeRange), "initWithStart:end:", v588, v609);
  v560 = v247;
  v249 = a6;
  +[SACallTreeState treeCountedStateWithWaitInfo:turnstileInfo:isPartOfADeadlock:isBlockedByADeadlock:state:microstackshotState:pid:threadId:threadPriority:timeRange:originPid:proximatePid:startSampleIndex:sampleCount:]( v242,  a6,  obj,  v243,  v244,  v578,  v607,  v245,  v246,  v560,  v248,  __SPAIR64__(v594, v600),  v601,  v595);
  v250 = (unsigned int *)objc_claimAutoreleasedReturnValue();

  a1 = v604;
  [v572 addObject:v250];
  uint64_t v16 = v585;
LABEL_448:
  v206 = a4;
  v205 = v584;
  if ([newValue count])
  {
    v252 = v214;
    if (v250) {
      v253 = objc_getProperty(v250, v251, 80LL, 1);
    }
    else {
      v253 = 0LL;
    }
    v254 = v253;

    if (v254)
    {
      if (v250) {
        v256 = objc_getProperty(v250, v255, 80LL, 1);
      }
      else {
        v256 = 0LL;
      }
      v257 = v256;
      [v257 addObjectsFromArray:newValue];

      v214 = v252;
    }

    else
    {
      v214 = v252;
      if (v250) {
        objc_setProperty_atomic(v250, v255, newValue, 80LL);
      }
    }
  }

  v598 = 0LL;
  v151 = v606;
LABEL_542:
  *(void *)(*(void *)(*(void *)(a1 + 112) + 8LL) + 24LL) = v151;
  __int128 v95 = v611;
  uint64_t v20 = v588;
LABEL_587:
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 192) + 8LL) + 40LL), v582);
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 176) + 8LL) + 40LL), v206);
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 184) + 8LL) + 40LL), v205);
  __int128 v96 = v609;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 168) + 8LL) + 40LL), v609);
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 160) + 8LL) + 40LL), v624);
  v352 = v151 + v581;
  if (!v581) {
    v352 = 0x7FFFFFFFFFFFFFFFLL;
  }
  *(void *)(*(void *)(*(void *)(a1 + 104) + 8LL) + 24LL) = v352;
  *(void *)(*(void *)(*(void *)(a1 + 120) + 8LL) + 24LL) = v581;

LABEL_590:
}

LABEL_94:
      pid_t v91 = 0LL;
      double v4 = v62;
      double v10 = v62 != 0LL;
      goto LABEL_95;
    }

    uint64_t v61 = 0LL;
LABEL_93:
    uint64_t v62 = 0LL;
    goto LABEL_94;
  }

  BOOL v8 = [v6 sampleCount];
  id v9 = [v7 sampleCount];
  if (v8 < v9)
  {
LABEL_4:
    double v10 = 1LL;
    goto LABEL_8;
  }

  if (v8 > v9) {
    goto LABEL_7;
  }
  int v12 = (id)0x189F60000LL;
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  if ((isKindOfClass & 1) == 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      id v3 = *__error();
      _sa_logt();
      uint64_t v68 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
      {
        uint64_t v69 = (objc_class *)objc_opt_class();
        int v12 = NSStringFromClass(v69);
        *(_DWORD *)buf = 136315138;
        posix_spawnattr_t v93 = [v12 UTF8String];
        _os_log_error_impl(&dword_186C92000, v68, OS_LOG_TYPE_ERROR, "first is a %s", buf, 0xCu);
      }

      *__error() = v3;
      uint64_t v70 = (objc_class *)objc_opt_class();
      int v7 = NSStringFromClass(v70);
      uint64_t v71 = [v7 UTF8String];
      _SASetCrashLogMessage(11201, "first is a %s", v72, v73, v74, v75, v76, v77, v71);

      _os_crash();
      __break(1u);
LABEL_70:
      double v10 = -1LL;
LABEL_95:

      __int128 v47 = 0LL;
      char v43 = 0LL;
      goto LABEL_96;
    }

    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        uint64_t v78 = *__error();
        _sa_logt();
        uint64_t v79 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
        {
          uint64_t v80 = (objc_class *)objc_opt_class();
          uint64_t v81 = NSStringFromClass(v80);
          *(_DWORD *)buf = 136315138;
          posix_spawnattr_t v93 = [v81 UTF8String];
          _os_log_error_impl(&dword_186C92000, v79, OS_LOG_TYPE_ERROR, "second is a %s", buf, 0xCu);
        }

        *__error() = v78;
        int v82 = (objc_class *)objc_opt_class();
        id v83 = NSStringFromClass(v82);
        int v84 = [v83 UTF8String];
        _SASetCrashLogMessage(11205, "second is a %s", v85, v86, v87, v88, v89, v90, v84);

        _os_crash();
        __break(1u);
      }

      int v12 = v6;
      unsigned int v27 = v7;
      id v3 = (unint64_t)v27;
      if (!v12)
      {
        if (!v27) {
          goto LABEL_93;
        }
        if ((v27[25] & 1) != 0 || (v27[26] & 1) != 0) {
          goto LABEL_42;
        }
        uint64_t v39 = 0LL;
        goto LABEL_39;
      }

      uint64_t v29 = *((_BYTE *)v12 + 25);
      if (v27)
      {
        if ((v29 & 1) == (v27[25] & 1))
        {
          uint64_t v29 = *((_BYTE *)v12 + 26);
          if ((v29 & 1) == (v27[26] & 1))
          {
LABEL_38:
            uint64_t v39 = *((void *)v12 + 9);
LABEL_39:
            uint64_t v40 = *(void *)(v3 + 72);
            if (v39 < v40)
            {
LABEL_40:
              double v10 = -1LL;
LABEL_33:

              goto LABEL_8;
            }

            if (v39 <= v40)
            {
              if (v12) {
                unint64_t v41 = *((_DWORD *)v12 + 8);
              }
              else {
                unint64_t v41 = 0;
              }
              id v42 = *(_DWORD *)(v3 + 32);
              if (v41 < v42) {
                goto LABEL_40;
              }
              if (v41 <= v42)
              {
                if (!v12)
                {
                  char v43 = 0LL;
                  goto LABEL_50;
                }

                LOBYTE(v10) = 0;
LABEL_49:
                LOBYTE(v4) = 1;
                char v43 = objc_getProperty(v12, v28, 64LL, 1);
                if ((v10 & 1) != 0)
                {
                  uint64_t v44 = 0LL;
LABEL_51:
                  __int128 v45 = v44;
                  __int128 v47 = (unint64_t)v45;
                  if (v43)
                  {
                    if (v45) {
                      double v10 = [v43 compare:v45];
                    }
                    else {
                      double v10 = -1LL;
                    }
                    goto LABEL_96;
                  }

                  goto LABEL_57;
                }

LABEL_321:
              v289 = *__error();
              _sa_logt();
              v290 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v290, OS_LOG_TYPE_ERROR))
              {
                [v5 binary];
                v291 = (void *)objc_claimAutoreleasedReturnValue();
                v292 = [v291 debugDescription];
                v293 = [v292 UTF8String];
                *(_DWORD *)buf = 136315138;
                v401 = v293;
                _os_log_error_impl(&dword_186C92000, v290, OS_LOG_TYPE_ERROR, "binaryIndex nil for %s", buf, 0xCu);
              }

              *__error() = v289;
              [v5 binary];
              v294 = (void *)objc_claimAutoreleasedReturnValue();
              v295 = [v294 debugDescription];
              v296 = [v295 UTF8String];
              _SASetCrashLogMessage(12311, "binaryIndex nil for %s", v297, v298, v299, v300, v301, v302, v296);

              _os_crash();
              __break(1u);
LABEL_324:
              v303 = *__error();
              _sa_logt();
              v304 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v304, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)buf = 0;
                _os_log_error_impl( &dword_186C92000,  v304,  OS_LOG_TYPE_ERROR,  "Displaying IO in call trees unsupported in systemstats format",  buf,  2u);
              }

              *__error() = v303;
              _SASetCrashLogMessage( 11803,  "Displaying IO in call trees unsupported in systemstats format",  v305,  v306,  v307,  v308,  v309,  v310,  v370);
              _os_crash();
              __break(1u);
LABEL_327:
              v311 = *__error();
              _sa_logt();
              v312 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v312, OS_LOG_TYPE_ERROR))
              {
                v313 = *(void *)(*(void *)(*(void *)(v382 + 128) + 8LL) + 24LL);
                v314 = [self startSampleIndex];
                *(_DWORD *)buf = 134218240;
                v401 = v313;
                v402 = 2048;
                v403 = v314;
                _os_log_error_impl( &dword_186C92000,  v312,  OS_LOG_TYPE_ERROR,  "leafFrameSkippedCountedStateToIndex %lu + 1 != treeCountedState.startSampleIndex %lu",  buf,  0x16u);
              }

              *__error() = v311;
              v315 = *(void *)(*(void *)(*(void *)(v382 + 128) + 8LL) + 24LL);
              [self startSampleIndex];
              _SASetCrashLogMessage( 11618,  "leafFrameSkippedCountedStateToIndex %lu + 1 != treeCountedState.startSampleIndex %lu",  v316,  v317,  v318,  v319,  v320,  v321,  v315);
              _os_crash();
              __break(1u);
LABEL_330:
              v322 = *__error();
              _sa_logt();
              v323 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v323, OS_LOG_TYPE_ERROR))
              {
                v324 = [*(id *)(*(void *)(v382 + 32) + 16) callTreeTimestampsTimeDomain];
                *(_DWORD *)buf = 134217984;
                v401 = v324;
                _os_log_error_impl( &dword_186C92000,  v323,  OS_LOG_TYPE_ERROR,  "Time domain other than walltime not handled for systemstats format: 0x%llx",  buf,  0xCu);
              }

              *__error() = v322;
              v325 = [*(id *)(*(void *)(v382 + 32) + 16) callTreeTimestampsTimeDomain];
              _SASetCrashLogMessage( 11806,  "Time domain other than walltime not handled for systemstats format: 0x%llx",  v326,  v327,  v328,  v329,  v330,  v331,  v325);
              _os_crash();
              __break(1u);
LABEL_333:
              ;
            }

            [v4 frame];
            v166 = (void *)objc_claimAutoreleasedReturnValue();
            v167 = [v166 isKernel];

            if (v167)
            {
              v168 = v382;
              -[SASamplePrinter binaryImagesHitByTask:](*(void *)(v382 + 32), *(void **)(v382 + 48));
              v169 = self;
              v158 = (void *)objc_claimAutoreleasedReturnValue();
              v170 = *(__CFString **)(v382 + 56);
              v171 = v170;
            }

            else
            {
              v171 = 0LL;
              v169 = self;
              v168 = v382;
              v170 = *(__CFString **)(v382 + 56);
              v158 = v170;
            }

            v172 = v170;
            v173 = [v169 isTruncatedLeafCallstack];
            v174 = *(void *)(v168 + 32);
            if (v173)
            {
              [v169 frame];
              v176 = (void *)objc_claimAutoreleasedReturnValue();
              if (v169) {
                Property = objc_getProperty(v169, v175, 48LL, 1);
              }
              else {
                Property = 0LL;
              }
              v178 = Property;
              v179 = (void *)-[SASamplePrinter copyDescriptionForTruncatedLeafFrame:otherCallTreeDescription:binariesToDisplay:extraBinariesToDisplay:]( v174,  v176,  v178,  v158,  v171);
              v404 = v179;
              [MEMORY[0x189603F18] arrayWithObjects:&v404 count:1];
              v180 = (void *)objc_claimAutoreleasedReturnValue();
            }

            else
            {
              [v169 frame];
              v176 = (void *)objc_claimAutoreleasedReturnValue();
              v180 = -[SASamplePrinter copyDescriptionsForFrame:binariesToDisplay:extraBinariesToDisplay:]( v174,  v176,  v158,  v171);
            }

LABEL_351:
            if ((_DWORD)v377)
            {
              v332 = (void *)[v180 mutableCopy];
              [v332 insertObject:@"<patched truncated backtrace>" atIndex:0];
            }

            else
            {
              v332 = v180;
            }

            v333 = v382;
            if ((unint64_t)[v332 count] >= 2)
            {
              for (uint64_t j = 0; j < [v332 count] - 1; ++j)
              {
                [v332 objectAtIndexedSubscript:j];
                v335 = (void *)objc_claimAutoreleasedReturnValue();
                v336 = *(void *)(v333 + 32);
                if (*(_BYTE *)(v333 + 210))
                {
                  v337 = [*(id *)(v336 + 16) systemstatsFormat];
                  v338 = *(void **)(v333 + 40);
                  v339 = *((unsigned int *)v407 + 6);
                  if (v337)
                  {
                    v340 = [self sampleCount];
                    [self frame];
                    v341 = (void *)objc_claimAutoreleasedReturnValue();
                    saos_printf_frame_noindent(v338, v339, v340, [v341 isKernel], v335);
                  }

                  else
                  {
                    v347 = *(unsigned int *)(v333 + 200);
                    v348 = [self sampleCount];
                    [self frame];
                    v341 = (void *)objc_claimAutoreleasedReturnValue();
                    saos_printf_frame(v338, v339, v347, v348, [v341 isKernel], v335);
                  }
                }

                else
                {
                  v342 = -[SASamplePrinter displayTimeIndexForSampleIndex:]( v336,  [self startSampleIndex] + objc_msgSend(self, "sampleCount") - 1);
                  v343 = [*(id *)(*(void *)(v333 + 32) + 16) systemstatsFormat];
                  v344 = *(void **)(v333 + 40);
                  v345 = *((unsigned int *)v407 + 6);
                  if (v343)
                  {
                    v346 = [self sampleCount];
                    [self frame];
                    v341 = (void *)objc_claimAutoreleasedReturnValue();
                    saos_printf_timeline_frame_noindent(v344, v345, v346, [v341 isKernel], v335, v342);
                  }

                  else
                  {
                    v349 = *(unsigned int *)(v333 + 200);
                    v350 = [self sampleCount];
                    [self frame];
                    v341 = (void *)objc_claimAutoreleasedReturnValue();
                    saos_printf_timeline_frame(v344, v345, v349, v350, [v341 isKernel], v335, v342);
                  }
                }

                ++*(void *)(*(void *)(*(void *)(v382 + 80) + 8LL) + 24LL);
                v379[2](v379, 1LL);

                v333 = v382;
              }
            }

            [v332 lastObject];
            v351 = (void *)objc_claimAutoreleasedReturnValue();
            if (self && (self[6] & 1) != 0 && !*(_BYTE *)(v333 + 208) && !*(_BYTE *)(v333 + 211))
            {
              [self frame];
              v369 = (void *)objc_claimAutoreleasedReturnValue();
              *(_BYTE *)(*(void *)(*(void *)(v333 + 152) + 8) + 24) = [v369 isKernel];

              *(_DWORD *)(*(void *)(*(void *)(v382 + 136) + 8LL) + 24LL) = *((_DWORD *)v407 + 6);
              objc_storeStrong((id *)(*(void *)(*(void *)(v382 + 160) + 8LL) + 40LL), v351);
              *(void *)(*(void *)(*(void *)(v382 + 144) + 8) + 24) = [self startSampleIndex];
              v367 = *(void *)(*(void *)(v382 + 128) + 8LL);
              v368 = 0x7FFFFFFFFFFFFFFFLL;
            }

            else
            {
              v352 = *(void *)(v333 + 32);
              if (*(_BYTE *)(v333 + 210))
              {
                v353 = [*(id *)(v352 + 16) systemstatsFormat];
                v354 = *(void **)(v333 + 40);
                v355 = *((unsigned int *)v407 + 6);
                if (v353)
                {
                  v356 = [self sampleCount];
                  [self frame];
                  v357 = (void *)objc_claimAutoreleasedReturnValue();
                  saos_printf_frame_noindent(v354, v355, v356, [v357 isKernel], v351);
                }

                else
                {
                  v363 = *(unsigned int *)(v333 + 200);
                  v364 = [self sampleCount];
                  [self frame];
                  v357 = (void *)objc_claimAutoreleasedReturnValue();
                  saos_printf_frame(v354, v355, v363, v364, [v357 isKernel], v351);
                }
              }

              else
              {
                v358 = -[SASamplePrinter displayTimeIndexForSampleIndex:]( v352,  [self startSampleIndex] + objc_msgSend(self, "sampleCount") - 1);
                v359 = [*(id *)(*(void *)(v333 + 32) + 16) systemstatsFormat];
                v360 = *(void **)(v333 + 40);
                v361 = *((unsigned int *)v407 + 6);
                if (v359)
                {
                  v362 = [self sampleCount];
                  [self frame];
                  v357 = (void *)objc_claimAutoreleasedReturnValue();
                  saos_printf_timeline_frame_noindent(v360, v361, v362, [v357 isKernel], v351, v358);
                }

                else
                {
                  v365 = *(unsigned int *)(v333 + 200);
                  v366 = [self sampleCount];
                  [self frame];
                  v357 = (void *)objc_claimAutoreleasedReturnValue();
                  saos_printf_timeline_frame(v360, v361, v365, v366, [v357 isKernel], v351, v358);
                }
              }

              v367 = *(void *)(*(void *)(v382 + 80) + 8LL);
              v368 = *(void *)(v367 + 24) + 1LL;
            }

            *(void *)(v367 + 24) = v368;

            goto LABEL_378;
          }

          if (*(_BYTE *)(*(void *)(*(void *)(a1 + 112) + 8LL) + 24LL))
          {
            LODWORD(v377) = 0;
            goto LABEL_136;
          }

LABEL_107:
          int v104 = [v4 frame];
          __int16 v105 = (void *)v104;
          if (v104) {
            id v106 = *(void **)(v104 + 32);
          }
          else {
            id v106 = 0LL;
          }
          __int16 v107 = v106;
          if ([v107 isTruncatedBacktraceFrame])
          {
            uint64_t v108 = [self frame];
            __int16 v109 = (void *)v108;
            if (v108) {
              v110 = *(void **)(v108 + 32);
            }
            else {
              v110 = 0LL;
            }
            uint64_t v111 = v110;
            v112 = [v111 isExclave];

            LODWORD(v377) = v112 ^ 1;
          }

          else
          {
            LODWORD(v377) = 0;
          }

          id v21 = v382;
          goto LABEL_135;
        }

        if (v4) {
          uint64_t v78 = objc_getProperty(v4, v23, 40LL, 1);
        }
        else {
          uint64_t v78 = 0LL;
        }
        uint64_t v79 = v78;
        [v79 removeAllObjects];

LABEL_378:
        double v4 = self;
        goto LABEL_379;
      }

      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        uint64_t v25 = v380;
        double v4 = v25;
        if (!*((_DWORD *)v411 + 6)
          && *(void *)(a1 + 176)
          && (unint64_t)[v25 sampleCount] <= *(void *)(a1 + 176))
        {
          goto LABEL_379;
        }

        self = v4;
        if (*(void *)(a1 + 72))
        {
          if (v4) {
            unsigned int v27 = objc_getProperty(v4, v26, 80LL, 1);
          }
          else {
            unsigned int v27 = 0LL;
          }
          uint64_t v28 = v27;
          [v28 sortUsingComparator:*(void *)(v382 + 72)];

          id v21 = v382;
        }

        if (*(_BYTE *)(v21 + 212))
        {
          if (!v4)
          {
            uint64_t v29 = 0LL;
            int v33 = 0LL;
            uint64_t v32 = (id **)(v21 + 32);
            __int16 v31 = *(id **)(v21 + 32);
LABEL_38:
            uint64_t v34 = v33;
            [v34 firstObject];
            __int16 v35 = (void *)objc_claimAutoreleasedReturnValue();
            [v35 startTime];
            double v36 = (void *)objc_claimAutoreleasedReturnValue();
            -[SASamplePrinter displayNameForPid:aroundTimestamp:includePid:](v31, v29, v36);
            unsigned int v5 = (int *)objc_claimAutoreleasedReturnValue();

            unint64_t v38 = *v32;
            if (self)
            {
              uint64_t v39 = self[10];
              uint64_t v40 = objc_getProperty(self, v37, 88LL, 1);
            }

            else
            {
              uint64_t v39 = 0LL;
              uint64_t v40 = 0LL;
            }

            unint64_t v41 = v40;
            [v41 firstObject];
            id v42 = (void *)objc_claimAutoreleasedReturnValue();
            [v42 startTime];
            char v43 = (void *)objc_claimAutoreleasedReturnValue();
            -[SASamplePrinter displayNameForPid:aroundTimestamp:includePid:](v38, v39, v43);
            uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue();

            __int128 v45 = *v32;
            if (self)
            {
              objc_super v46 = self[10];
              __int128 v47 = self[9];
              if (v45)
              {
LABEL_42:
                __int128 v48 = (objc_class *)NSString;
                __int128 v49 = v5;
                __int128 v50 = v44;
                v377 = [[v48 alloc] initWithFormat:@"%@ [%d] (originated by %@ [%d])", v50, v46, v49, v47];

LABEL_43:
                double v4 = self;
                id v21 = v382;
                goto LABEL_85;
              }
            }

            else
            {
              objc_super v46 = 0LL;
              __int128 v47 = 0LL;
              if (v45) {
                goto LABEL_42;
              }
            }

            v377 = 0LL;
            goto LABEL_43;
          }

          uint64_t v29 = v4[9];
          if (*(void *)(v4 + 9) != -1LL)
          {
            uint64_t v30 = v4;
            uint64_t v32 = (id **)(v21 + 32);
            __int16 v31 = *(id **)(v21 + 32);
            int v33 = objc_getProperty(v30, v26, 88LL, 1);
            goto LABEL_38;
          }
        }

        v377 = 0LL;
LABEL_85:
        if (*(_BYTE *)(v21 + 209))
        {
          if (v4)
          {
            uint64_t v81 = v4;
            int v82 = v4[8] != *(_DWORD *)(v21 + 204);
            id v83 = *((void *)v81 + 9);
          }

          else
          {
            id v83 = 0LL;
            int v82 = *(_DWORD *)(v21 + 204) != 0;
          }

          int v84 = *(void **)(v21 + 184);
          if (v84) {
            __int128 v85 = *v84 == v83;
          }
          else {
            __int128 v85 = v83 == 0;
          }
          __int16 v113 = !v85;
          if (((v82 | v113) & 1) != 0 || v377)
          {
            v114 = *(void *)(*(void *)(v21 + 120) + 8LL);
            if (*(_BYTE *)(v114 + 24)) {
              *(_BYTE *)(v114 + 24) = 0;
            }
            else {
              [*(id *)(v21 + 40) appendString:@","];
            }
            [*(id *)(v382 + 40) appendString:@"{"];
            v138 = *(void **)(v382 + 40);
            objc_msgSend(MEMORY[0x189607968], "numberWithUnsignedInteger:", objc_msgSend(self, "sampleCount"));
            v139 = (void *)objc_claimAutoreleasedReturnValue();
            SAJSONWriteDictionaryFirstEntry(v138, (uint64_t)@"count", v139);

            v140 = *(void **)(v382 + 40);
            [MEMORY[0x189607968] numberWithUnsignedInt:*((unsigned int *)v411 + 6)];
            v141 = (void *)objc_claimAutoreleasedReturnValue();
            SAJSONWriteDictionaryEntry(v140, @"depth", v141);

            if (v82)
            {
              if (self) {
                v142 = self[8];
              }
              else {
                LOWORD(v142) = 0;
              }
              +[SACallTreeState writeJSONDictionaryEntriesToStream:microstackshotState:primaryMicrostackshotState:includeIdleAndBattery:]( (uint64_t)SACallTreeState,  *(void **)(v382 + 40),  v142,  *(_DWORD *)(v382 + 204),  [*(id *)(*(void *)(v382 + 32) + 16) includeUserIdleAndBatteryStateInStacks]);
            }

            if (v113)
            {
              if (self) {
                v143 = *((void *)self + 9);
              }
              else {
                v143 = 0LL;
              }
              +[SACallTreeState writeJSONDictionaryEntriesToStream:state:primaryState:]( (uint64_t)&OBJC_CLASS___SACallTreeState,  *(void **)(v382 + 40),  v143,  *(uint64_t **)(v382 + 184));
            }

            if (v377) {
              SAJSONWriteDictionaryEntry(*(void **)(v382 + 40), @"onBehalfOf", (void *)v377);
            }
            [*(id *)(v382 + 40) appendString:@"}"];
            ++*(void *)(*(void *)(*(void *)(v382 + 80) + 8LL) + 24LL);
          }

          else
          {
            v379[2](v379, 0xFFFFFFFFLL);
          }

          goto LABEL_305;
        }

        if (!*((_DWORD *)v411 + 6))
        {
          __int128 v89 = *(void *)(*(void *)(*(void *)(v21 + 128) + 8LL) + 24LL);
          if (v89 != 0x7FFFFFFFFFFFFFFFLL)
          {
            if (v89 + 1 != [v4 startSampleIndex]) {
              goto LABEL_327;
            }
            if (*(_BYTE *)(v21 + 210))
            {
              saos_printf_frame( *(void **)(v21 + 40),  *(unsigned int *)(*(void *)(*(void *)(v21 + 136) + 8LL) + 24LL),  *(unsigned int *)(v21 + 200),  *(void *)(*(void *)(*(void *)(v21 + 128) + 8LL) + 24LL)
              - *(void *)(*(void *)(*(void *)(v21 + 144) + 8LL) + 24LL)
              + 1LL,
                *(unsigned __int8 *)(*(void *)(*(void *)(v21 + 152) + 8LL) + 24LL),
                *(void **)(*(void *)(*(void *)(v21 + 160) + 8LL) + 40LL));
            }

            else
            {
              v194 = -[SASamplePrinter displayTimeIndexForSampleIndex:]( *(void *)(v21 + 32),  *(void *)(*(void *)(*(void *)(v21 + 128) + 8LL) + 24LL));
              saos_printf_timeline_frame( *(void **)(v21 + 40),  *(unsigned int *)(*(void *)(*(void *)(v21 + 136) + 8LL) + 24LL),  *(unsigned int *)(v21 + 200),  *(void *)(*(void *)(*(void *)(v21 + 128) + 8LL) + 24LL)
              - *(void *)(*(void *)(*(void *)(v21 + 144) + 8LL) + 24LL)
              + 1LL,
                *(unsigned __int8 *)(*(void *)(*(void *)(v21 + 152) + 8LL) + 24LL),
                *(void **)(*(void *)(*(void *)(v21 + 160) + 8LL) + 40LL),
                v194);
            }

            ++*(void *)(*(void *)(*(void *)(v21 + 80) + 8LL) + 24LL);
            *(_BYTE *)(*(void *)(*(void *)(v21 + 152) + 8LL) + 24LL) = 0;
            *(_DWORD *)(*(void *)(*(void *)(v21 + 136) + 8LL) + 24LL) = 0;
            v195 = *(void *)(*(void *)(v21 + 160) + 8LL);
            v196 = *(void **)(v195 + 40);
            *(void *)(v195 + 40) = 0LL;

            id v21 = v382;
            *(void *)(*(void *)(*(void *)(v382 + 144) + 8LL) + 24LL) = 0x7FFFFFFFFFFFFFFFLL;
            *(void *)(*(void *)(*(void *)(v382 + 128) + 8LL) + 24LL) = 0x7FFFFFFFFFFFFFFFLL;
          }

          v197 = -[SASamplePrinter copyDescriptionsForFrame:binariesToDisplay:extraBinariesToDisplay:]( *(void *)(v21 + 32),  0LL,  *(void **)(v21 + 56),  0LL);
          [v197 firstObject];
          unsigned int v5 = (int *)objc_claimAutoreleasedReturnValue();

          if (*(_BYTE *)(v382 + 211))
          {
            v198 = *(void *)(v382 + 32);
            if (*(_BYTE *)(v382 + 210))
            {
              v199 = [*(id *)(v198 + 16) systemstatsFormat];
              v200 = *(void **)(v382 + 40);
              v201 = *((unsigned int *)v407 + 6);
              if (v199) {
                saos_printf_frame_noindent(v200, v201, [self sampleCount], 0, v5);
              }
              else {
                saos_printf_frame(v200, v201, *(unsigned int *)(v382 + 200), [self sampleCount], 0, v5);
              }
            }

            else
            {
              v206 = -[SASamplePrinter displayTimeIndexForSampleIndex:]( v198,  [self startSampleIndex] + objc_msgSend(self, "sampleCount") - 1);
              v207 = [*(id *)(*(void *)(v382 + 32) + 16) systemstatsFormat];
              v208 = *(void **)(v382 + 40);
              v209 = *((unsigned int *)v407 + 6);
              if (v207) {
                saos_printf_timeline_frame_noindent(v208, v209, [self sampleCount], 0, v5, v206);
              }
              else {
                saos_printf_timeline_frame( v208,  v209,  *(unsigned int *)(v382 + 200),  [self sampleCount],  0,  v5,  v206);
              }
            }

            ++*(void *)(*(void *)(*(void *)(v382 + 80) + 8LL) + 24LL);
            v379[2](v379, 1LL);
          }

          else
          {
            *(_BYTE *)(*(void *)(*(void *)(v382 + 152) + 8LL) + 24LL) = 0;
            v202 = -[SASamplePrinter copyDescriptionsForFrame:binariesToDisplay:extraBinariesToDisplay:]( *(void *)(v382 + 32),  0LL,  *(void **)(v382 + 56),  0LL);
            v203 = [v202 firstObject];
            v204 = *(void *)(*(void *)(v382 + 160) + 8LL);
            v205 = *(void **)(v204 + 40);
            *(void *)(v204 + 40) = v203;

            *(_DWORD *)(*(void *)(*(void *)(v382 + 136) + 8LL) + 24LL) = *((_DWORD *)v407 + 6);
            *(void *)(*(void *)(*(void *)(v382 + 144) + 8) + 24) = [self startSampleIndex];
            *(void *)(*(void *)(*(void *)(v382 + 128) + 8LL) + 24LL) = 0x7FFFFFFFFFFFFFFFLL;
          }

          double v4 = self;
        }

        if (!v4)
        {
          v376 = 0LL;
          if (v377)
          {
            v374 = 0LL;
            v375 = 0LL;
            goto LABEL_264;
          }

          v230 = 0;
          v375 = 0LL;
          v227 = v382;
LABEL_262:
          if (_microstackshot_state_has_change_to_display( v230,  *(_DWORD *)(v227 + 204),  [*(id *)(*(void *)(v227 + 32) + 16) systemstatsFormat],  objc_msgSend(*(id *)(*(void *)(v382 + 32) + 16), "includeUserIdleAndBatteryStateInStacks")))
          {
            v374 = 0LL;
LABEL_264:
            v227 = v382;
LABEL_281:
            v220 = self;
            goto LABEL_282;
          }

          if (self) {
            v231 = *((void *)self + 9);
          }
          else {
            v231 = 0LL;
          }
          v232 = *(void **)(v382 + 184);
          v233 = [*(id *)(*(void *)(v382 + 32) + 16) systemstatsFormat];
          v227 = v382;
          if ((v233 & 1) == 0)
          {
            if (v232)
            {
              if (*v232 == v231) {
                goto LABEL_270;
              }
            }

            else if (!v231)
            {
              goto LABEL_270;
            }

            v374 = 0LL;
            goto LABEL_281;
          }

LABEL_270:
          if (!*(_BYTE *)(v382 + 211))
          {
            if (*(_BYTE *)(v382 + 210))
            {
              v234 = *(void **)(v382 + 40);
              v235 = *(unsigned int *)(*(void *)(*(void *)(v382 + 136) + 8LL) + 24LL);
              v236 = *(unsigned int *)(v382 + 200);
              v237 = [self sampleCount];
              if (self) {
                v238 = *((void *)self + 9);
              }
              else {
                v238 = 0LL;
              }
              saos_printf_frame_with_state( v234,  v235,  v236,  v237,  *(unsigned __int8 *)(*(void *)(*(void *)(v382 + 152) + 8LL) + 24LL),  *(void **)(*(void *)(*(void *)(v382 + 160) + 8LL) + 40LL),  v238,  0LL);
              ++*(void *)(*(void *)(*(void *)(v382 + 80) + 8LL) + 24LL);
            }

            else
            {
              v261 = [self startSampleIndex];
              *(void *)(*(void *)(*(void *)(v382 + 128) + 8LL) + 24LL) = v261
                                                                             + [self sampleCount]
                                                                             - 1;
            }
          }

          v379[2](v379, 0xFFFFFFFFLL);
          goto LABEL_304;
        }

        v375 = objc_getProperty(v4, v26, 64LL, 1);
        v212 = objc_getProperty(v4, v211, 56LL, 1);
        unsigned int v5 = &OBJC_IVAR___SASharedCache__slidBaseAddress;
        v376 = v212;
        if (v375)
        {
          v213 = self[7];
          v214 = *((void *)self + 6);
          v215 = *((unsigned __int8 *)self + 24);
          v216 = *(void *)(v382 + 192);
          v393[0] = MEMORY[0x1895F87A8];
          v393[1] = 3221225472LL;
          v393[2] = __125__SASamplePrinter_addStack_toStream_sampleCount_binariesToDisplay_primaryState_primaryMicrostackshotState_onlyHeaviestStack___block_invoke_1605;
          v393[3] = &unk_189F64248;
          v393[4] = *(void *)(v382 + 32);
          v394 = self;
          v217 = [v375 descriptionForPid:v213 tid:v214 threadPriority:v215 options:v216 nameCallback:v393];

          if (!v376)
          {
            v376 = 0LL;
            goto LABEL_253;
          }

          if (v217)
          {
            if (([*(id *)(*(void *)(v382 + 32) + 16) displayMultipleMatchingBlockedReasons] & 1) == 0
              && ([v376 hasMatchingBlocker:v375] & 1) != 0)
            {
              goto LABEL_253;
            }

            v218 = 0;
          }

          else
          {
            v218 = 1;
          }

          v220 = self;
        }

        else
        {
          v219 = v212;
          v220 = self;
          if (!v219)
          {
            if ((*((_BYTE *)self + 25) & 1) != 0)
            {
              v375 = 0LL;
              v376 = 0LL;
              v374 = @" - part of a deadlock";
              v227 = v382;
              goto LABEL_282;
            }

            v217 = 0LL;
            v227 = v382;
            v376 = 0LL;
            if ((*((_BYTE *)self + 26) & 1) != 0)
            {
              v374 = @" - ends in a deadlock";
              v375 = 0LL;
              goto LABEL_282;
            }

            goto LABEL_259;
          }

          v217 = 0LL;
          v218 = 1;
        }

        v221 = v220[7];
        v222 = *((void *)v220 + 6);
        v223 = *(void *)(v382 + 192);
        v391[0] = MEMORY[0x1895F87A8];
        v391[1] = 3221225472LL;
        v391[2] = __125__SASamplePrinter_addStack_toStream_sampleCount_binariesToDisplay_primaryState_primaryMicrostackshotState_onlyHeaviestStack___block_invoke_2;
        v391[3] = &unk_189F64248;
        v391[4] = *(void *)(v382 + 32);
        v392 = v220;
        [v376 descriptionForPid:v221 tid:v222 options:v223 nameCallback:v391];
        v224 = (void *)objc_claimAutoreleasedReturnValue();
        v225 = v224;
        if (v224)
        {
          if ((v218 & 1) != 0)
          {
            v217 = v224;
          }

          else
          {
            v226 = [(id)v217 stringByAppendingFormat:@", %@", v224];

            v217 = v226;
          }
        }

LABEL_253:
        v220 = self;
        v227 = v382;
        if ((*((_BYTE *)self + 25) & 1) != 0)
        {
          v228 = @" - part of a deadlock";
          if (!v217) {
            goto LABEL_256;
          }
        }

        else
        {
          if ((*((_BYTE *)self + 26) & 1) == 0)
          {
LABEL_259:
            if (v217 | v377)
            {
              v374 = (__CFString *)v217;
              goto LABEL_282;
            }

            v230 = v220[8];
            goto LABEL_262;
          }

          v228 = @" - ends in a deadlock";
          if (!v217)
          {
LABEL_256:
            v374 = (__CFString *)v228;
LABEL_282:
            v239 = *(void *)(*(void *)(*(void *)(v227 + 128) + 8LL) + 24LL);
            if (v239 == 0x7FFFFFFFFFFFFFFFLL) {
              goto LABEL_288;
            }
            if (v239 + 1 == [v220 startSampleIndex])
            {
              if (*(_BYTE *)(v382 + 210))
              {
                saos_printf_frame( *(void **)(v382 + 40),  *(unsigned int *)(*(void *)(*(void *)(v382 + 136) + 8LL) + 24LL),  *(unsigned int *)(v382 + 200),  *(void *)(*(void *)(*(void *)(v382 + 128) + 8LL) + 24LL)
                - *(void *)(*(void *)(*(void *)(v382 + 144) + 8LL) + 24LL)
                + 1LL,
                  *(unsigned __int8 *)(*(void *)(*(void *)(v382 + 152) + 8LL) + 24LL),
                  *(void **)(*(void *)(*(void *)(v382 + 160) + 8LL) + 40LL));
              }

              else
              {
                v240 = -[SASamplePrinter displayTimeIndexForSampleIndex:]( *(void *)(v382 + 32),  *(void *)(*(void *)(*(void *)(v382 + 128) + 8LL) + 24LL));
                saos_printf_timeline_frame( *(void **)(v382 + 40),  *(unsigned int *)(*(void *)(*(void *)(v382 + 136) + 8LL) + 24LL),  *(unsigned int *)(v382 + 200),  *(void *)(*(void *)(*(void *)(v382 + 128) + 8LL) + 24LL)
                - *(void *)(*(void *)(*(void *)(v382 + 144) + 8LL) + 24LL)
                + 1LL,
                  *(unsigned __int8 *)(*(void *)(*(void *)(v382 + 152) + 8LL) + 24LL),
                  *(void **)(*(void *)(*(void *)(v382 + 160) + 8LL) + 40LL),
                  v240);
              }

              v220 = self;
              v227 = v382;
              ++*(void *)(*(void *)(*(void *)(v382 + 80) + 8LL) + 24LL);
LABEL_288:
              if (*(_BYTE *)(v227 + 210))
              {
                v241 = *(void **)(v227 + 40);
                if (*(_BYTE *)(v227 + 211))
                {
                  v372 = *((_DWORD *)v407 + 6);
                  v242 = *(_DWORD *)(v227 + 200);
                  v243 = [v220 sampleCount];
                  if (self)
                  {
                    v244 = *((void *)self + 9);
                    v245 = self[8];
                  }

                  else
                  {
                    v244 = 0LL;
                    v245 = 0;
                  }

                  saos_printf_microstackshot_state_as_frame( v241,  v372,  v242,  v243,  *(unsigned __int8 *)(*(void *)(*(void *)(v382 + 152) + 8) + 24) != 0,  v244,  *(uint64_t **)(v382 + 184),  v245,  *(_DWORD *)(v382 + 204),  [*(id *)(*(void *)(v382 + 32) + 16) systemstatsFormat],  objc_msgSend(*(id *)(*(void *)(v382 + 32) + 16), "includeUserIdleAndBatteryStateInStacks"),  objc_msgSend(*(id *)(*(void *)(v382 + 32) + 16), "systemstatsFormat"),  (void *)v377);
                }

                else
                {
                  v251 = *(unsigned int *)(*(void *)(*(void *)(v227 + 136) + 8LL) + 24LL);
                  v252 = *(unsigned int *)(v227 + 200);
                  v253 = [v220 sampleCount];
                  if (self) {
                    v254 = *((void *)self + 9);
                  }
                  else {
                    v254 = 0LL;
                  }
                  saos_printf_frame_with_state( v241,  v251,  v252,  v253,  *(unsigned __int8 *)(*(void *)(*(void *)(v382 + 152) + 8LL) + 24LL),  *(void **)(*(void *)(*(void *)(v382 + 160) + 8LL) + 40LL),  v254,  v374);
                  v379[2](v379, 0xFFFFFFFFLL);
                }
              }

              else
              {
                v246 = -[SASamplePrinter displayTimeIndexForSampleIndex:]( *(void *)(v227 + 32),  [v220 startSampleIndex] + objc_msgSend(self, "sampleCount") - 1);
                v247 = *(void **)(v382 + 40);
                if (*(_BYTE *)(v382 + 211))
                {
                  v371 = *(_DWORD *)(v382 + 200);
                  v373 = *((_DWORD *)v407 + 6);
                  v248 = [self sampleCount];
                  if (self)
                  {
                    v249 = *((void *)self + 9);
                    v250 = self[8];
                  }

                  else
                  {
                    v249 = 0LL;
                    v250 = 0;
                  }

                  saos_printf_microstackshot_state_as_timeline_frame( v247,  v373,  v371,  v248,  *(unsigned __int8 *)(*(void *)(*(void *)(v382 + 152) + 8) + 24) != 0,  v249,  *(uint64_t **)(v382 + 184),  v250,  *(_DWORD *)(v382 + 204),  [*(id *)(*(void *)(v382 + 32) + 16) systemstatsFormat],  objc_msgSend(*(id *)(*(void *)(v382 + 32) + 16), "includeUserIdleAndBatteryStateInStacks"),  v246,  objc_msgSend(*(id *)(*(void *)(v382 + 32) + 16), "systemstatsFormat"),  (void *)v377);
                }

                else
                {
                  v255 = *(unsigned int *)(*(void *)(*(void *)(v382 + 136) + 8LL) + 24LL);
                  v256 = *(unsigned int *)(v382 + 200);
                  v257 = [self sampleCount];
                  if (self) {
                    v258 = *((void *)self + 9);
                  }
                  else {
                    v258 = 0LL;
                  }
                  saos_printf_timeline_frame_with_state( v247,  v255,  v256,  v257,  *(unsigned __int8 *)(*(void *)(*(void *)(v382 + 152) + 8LL) + 24LL),  *(void **)(*(void *)(*(void *)(v382 + 160) + 8LL) + 40LL),  v258,  v374,  v246);
                  v379[2](v379, 0xFFFFFFFFLL);
                }
              }

              ++*(void *)(*(void *)(*(void *)(v382 + 80) + 8LL) + 24LL);
              v259 = [self startSampleIndex];
              *(void *)(*(void *)(*(void *)(v382 + 144) + 8) + 24) = [self sampleCount] + v259;
              *(void *)(*(void *)(*(void *)(v382 + 128) + 8LL) + 24LL) = 0x7FFFFFFFFFFFFFFFLL;

LABEL_304:
LABEL_305:

              goto LABEL_378;
            }

LABEL_202:
        v379[2](v379, 0xFFFFFFFFLL);
LABEL_379:

LABEL_380:
        _Block_object_dispose(v406, 8);
        _Block_object_dispose(v410, 8);
        id v9 = context;
        goto LABEL_381;
      }

      if ([*(id *)(*(void *)(a1 + 32) + 16) systemstatsFormat])
      {
        if (*(_BYTE *)(a1 + 213))
        {
          v117 = v4 ? objc_getProperty(v4, v116, 32LL, 1) : 0LL;
          v118 = v117;
          v119 = [v118 count] == 0;

          double v4 = self;
          if (!v119)
          {
            if ([*(id *)(*(void *)(v382 + 32) + 16) callTreeTimestampsTimeDomain] != 1) {
              goto LABEL_330;
            }
            v121 = (void *)NSString;
            v122 = *(void *)(v382 + 32);
            if (self) {
              v123 = objc_getProperty(self, v120, 32LL, 1);
            }
            else {
              v123 = 0LL;
            }
            v124 = v123;
            v125 = -[SASamplePrinter copyDescriptionForTimeRanges:](v122, v124);
            [v121 stringWithFormat:@"walltime %@", v125];
            v126 = (void *)objc_claimAutoreleasedReturnValue();

            saos_printf_call_tree_node_noindent( *(void **)(v382 + 40),  *((unsigned int *)v407 + 6),  [self sampleCount],  v126);
            goto LABEL_378;
          }
        }

        goto LABEL_202;
      }

      if (v4) {
        v144 = objc_getProperty(v4, v115, 40LL, 1);
      }
      else {
        v144 = 0LL;
      }
      v145 = v144;
      v146 = [v145 count] == 0;

      if (v146)
      {
        v151 = 0LL;
      }

      else
      {
        v148 = self;
        v149 = *(id **)(v382 + 32);
        if (self) {
          v148 = objc_getProperty(self, v147, 40LL, 1);
        }
        v150 = v148;
        v151 = (void *)-[SASamplePrinter copyDescriptionForIOEvents:](v149, v150);
      }

      v183 = self;
      v184 = v382;
      if (*(_BYTE *)(v382 + 213))
      {
        v185 = *(void *)(v382 + 32);
        if (self) {
          v183 = objc_getProperty(self, v147, 32LL, 1);
        }
        v186 = v183;
        v187 = -[SASamplePrinter copyDescriptionForTimeRanges:](v185, v186);

        v184 = v382;
      }

      else
      {
        v187 = 0LL;
      }

      if ([v187 length])
      {
        v188 = [v151 length];
        v189 = v187;
        if (v188)
        {
          [v151 stringByAppendingFormat:@", %@", v187];
          v190 = (id)objc_claimAutoreleasedReturnValue();
          goto LABEL_214;
        }
      }

      else
      {
        v191 = [v151 length];
        v189 = v151;
        if (!v191) {
          goto LABEL_218;
        }
      }

      v190 = v189;
LABEL_214:
      v192 = v190;
      if (v190)
      {
        v193 = *(void *)(*(void *)(*(void *)(v184 + 128) + 8LL) + 24LL);
        if (v193 != 0x7FFFFFFFFFFFFFFFLL)
        {
          if (*(_BYTE *)(v184 + 210))
          {
            saos_printf_frame( *(void **)(v184 + 40),  *(unsigned int *)(*(void *)(*(void *)(v184 + 136) + 8LL) + 24LL),  *(unsigned int *)(v184 + 200),  v193 - *(void *)(*(void *)(*(void *)(v184 + 144) + 8LL) + 24LL) + 1,  *(unsigned __int8 *)(*(void *)(*(void *)(v184 + 152) + 8LL) + 24LL),  *(void **)(*(void *)(*(void *)(v184 + 160) + 8LL) + 40LL));
          }

          else
          {
            v260 = -[SASamplePrinter displayTimeIndexForSampleIndex:](*(void *)(v184 + 32), v193);
            saos_printf_timeline_frame( *(void **)(v184 + 40),  *(unsigned int *)(*(void *)(*(void *)(v184 + 136) + 8LL) + 24LL),  *(unsigned int *)(v184 + 200),  *(void *)(*(void *)(*(void *)(v184 + 128) + 8LL) + 24LL)
            - *(void *)(*(void *)(*(void *)(v184 + 144) + 8LL) + 24LL)
            + 1LL,
              *(unsigned __int8 *)(*(void *)(*(void *)(v184 + 152) + 8LL) + 24LL),
              *(void **)(*(void *)(*(void *)(v184 + 160) + 8LL) + 40LL),
              v260);
          }

          ++*(void *)(*(void *)(*(void *)(v184 + 80) + 8LL) + 24LL);
          *(void *)(*(void *)(*(void *)(v184 + 144) + 8LL) + 24LL) = *(void *)(*(void *)(*(void *)(v184 + 128)
                                                                                                 + 8LL)
                                                                                     + 24LL)
                                                                         + 1LL;
          *(void *)(*(void *)(*(void *)(v184 + 128) + 8LL) + 24LL) = 0x7FFFFFFFFFFFFFFFLL;
        }

        saos_printf_call_tree_node_without_count( *(void **)(v184 + 40),  *((unsigned int *)v407 + 6),  *(unsigned int *)(v184 + 200),  v192);
        ++*(void *)(*(void *)(*(void *)(v184 + 80) + 8LL) + 24LL);

        goto LABEL_309;
      }

LABEL_315:
    v269 = *__error();
    _sa_logt();
    v270 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v270, OS_LOG_TYPE_ERROR))
    {
      v271 = *(_DWORD *)(*(void *)(*(void *)(*(void *)(v382 + 104) + 8LL) + 24LL)
      *(_DWORD *)v406 = 67109632;
      *(_DWORD *)&v406[4] = v19;
      LOWORD(v407) = 1024;
      *(_DWORD *)((char *)&v407 + 2) = a3;
      HIWORD(v407) = 1024;
      LODWORD(v40_Block_object_dispose((const void *)(v1 - 240), 8) = v271;
      _os_log_error_impl(&dword_186C92000, v270, OS_LOG_TYPE_ERROR, "adjustDepth %d (%u + %d)", v406, 0x14u);
    }

    *__error() = v269;
    _SASetCrashLogMessage(11373, "adjustDepth %d (%u + %d)", v272, v273, v274, v275, v276, v277, v19);
    _os_crash();
    __break(1u);
    goto LABEL_318;
  }

  int v12 = *(void *)(*(void *)(a1 + 88) + 8LL);
  int v13 = *(_DWORD *)(v12 + 24);
  if ((v13 & 0x80000000) != 0 || v13 < a3)
  {
    *(_DWORD *)(v12 + 24) = a3;
    goto LABEL_9;
  }

void sub_186D4C2B0(_Unwind_Exception *a1)
{
}

void saos_printf_frame(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, void *a6)
{
  id v11 = a1;
  _saos_printf_frame_base(v11, a2, a3, a4, a5, a6);
  [v11 appendString:@"\n"];
}

void saos_printf_timeline_frame( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, void *a6, unint64_t a7)
{
  id v13 = a1;
  _saos_printf_frame_base(v13, a2, a3, a4, a5, a6);
  _saos_printf_frame_timerange(v13, a7 - a4 + 1, a7);
  [v13 appendString:@"\n"];
}

void saos_printf_frame_noindent(void *a1, uint64_t a2, uint64_t a3, int a4, void *a5)
{
  id v9 = a1;
  _saos_printf_frame_base_noindent(v9, a2, a3, a4, a5);
  [v9 appendString:@"\n"];
}

void saos_printf_timeline_frame_noindent( void *a1, uint64_t a2, uint64_t a3, int a4, void *a5, unint64_t a6)
{
  id v11 = a1;
  _saos_printf_frame_base_noindent(v11, a2, a3, a4, a5);
  _saos_printf_frame_timerange(v11, a6 - a3 + 1, a6);
  [v11 appendString:@"\n"];
}

BOOL _microstackshot_state_has_change_to_display(int a1, int a2, char a3, int a4)
{
  BOOL v5 = a1 == a2;
  BOOL result = a1 != a2;
  if (v5 || (a3 & 1) != 0) {
    return result;
  }
  int v7 = a2 ^ a1;
  if (!a4)
  {
    if ((v7 & 0x3FA2) == 0) {
      return (v7 & 0x1C000) != 0;
    }
    return 1LL;
  }

  if ((v7 & 0x10) != 0) {
    return 1LL;
  }
  BOOL v8 = (a1 & a2 & 0x10) == 0;
  if ((v7 & 0xC) == 0) {
    BOOL v8 = 1;
  }
  BOOL result = 1LL;
  if ((v7 & 0x3FA2) == 0 && v8) {
    return (v7 & 0x1C000) != 0;
  }
  return result;
}

void saos_printf_frame_with_state( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, void *a6, uint64_t a7, void *a8)
{
  id v15 = a8;
  id v16 = a1;
  _saos_printf_frame_base(v16, a2, a3, a4, a5, a6);
  _saos_printf_state_appended(v16, a7, v15);

  [v16 appendString:@"\n"];
}

void saos_printf_microstackshot_state_as_frame( void *a1, uint64_t a2, unsigned int a3, uint64_t a4, int a5, uint64_t a6, uint64_t *a7, unsigned int a8, int a9, char a10, unsigned __int8 a11, char a12, void *a13)
{
  id v20 = a1;
  _saos_printf_microstackshot_state_as_frame_base(v20, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
  [v20 appendString:@"\n"];
}

void saos_printf_timeline_frame_with_state( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, void *a6, uint64_t a7, void *a8, unint64_t a9)
{
  id v16 = a8;
  id v17 = a1;
  _saos_printf_frame_base(v17, a2, a3, a4, a5, a6);
  _saos_printf_state_appended(v17, a7, v16);

  _saos_printf_frame_timerange(v17, a9 - a4 + 1, a9);
  [v17 appendString:@"\n"];
}

void saos_printf_microstackshot_state_as_timeline_frame( void *a1, uint64_t a2, unsigned int a3, uint64_t a4, int a5, uint64_t a6, uint64_t *a7, unsigned int a8, int a9, char a10, unsigned __int8 a11, unint64_t a12, char a13, void *a14)
{
  id v21 = a1;
  _saos_printf_microstackshot_state_as_frame_base(v21, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a13, a14);
  _saos_printf_frame_timerange(v21, a12 - a4 + 1, a12);
  [v21 appendString:@"\n"];
}

void saos_printf_call_tree_node_noindent(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  id v8 = a1;
  _saos_printf_indent_and_count_noindent(v8, a2, a3, 0);
  [v8 printWithFormat:@"%@\n", v7];
}

void saos_printf_call_tree_node_without_count(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  id v8 = a1;
  _saos_printf_indent_and_kernel_dot(v8, a2, 0, 0);
  objc_msgSend(v8, "printWithFormat:", @"%*s  ", a3, "");
  [v8 printWithFormat:@"<%@>\n", v7];
}

void _saos_printf_frame_base(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, void *a6)
{
  id v11 = a6;
  id v12 = a1;
  _saos_printf_indent_and_count(v12, a2, a3, a4, a5);
  [v12 appendString:v11];
}

uint64_t _saos_printf_indent_and_count(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  id v9 = a1;
  int v10 = _saos_printf_indent_and_kernel_dot(v9, a2, a5, 0);
  LODWORD(a4) = objc_msgSend(v9, "printWithFormat:", @"%-*lu  ", a3, a4);

  return (a4 + v10);
}

uint64_t _saos_printf_indent_and_kernel_dot(void *a1, uint64_t a2, int a3, int a4)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  id v7 = a1;
  if (a2 >= 0x7FFFFFFF)
  {
    int v14 = *__error();
    _sa_logt();
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      int v23 = a2;
      _os_log_error_impl(&dword_186C92000, v15, OS_LOG_TYPE_ERROR, "indent %u", buf, 8u);
    }

    *__error() = v14;
    _SASetCrashLogMessage(282, "indent %u", v16, v17, v18, v19, v20, v21, a2);
    _os_crash();
    __break(1u);
  }

  id v8 = v7;
  if (a4)
  {
    id v9 = "";
    if (a3) {
      id v9 = "*";
    }
    uint64_t v10 = objc_msgSend(v7, "printWithFormat:", @"%d%s ", (a2 >> 1) - 1, v9);
  }

  else
  {
    id v11 = "";
    if (a3) {
      id v11 = "*";
    }
    uint64_t v10 = objc_msgSend(v7, "printWithFormat:", @"%*s", a2, v11);
  }

  uint64_t v12 = v10;

  return v12;
}

void _saos_printf_frame_base_noindent(void *a1, uint64_t a2, uint64_t a3, int a4, void *a5)
{
  id v9 = a5;
  id v10 = a1;
  _saos_printf_indent_and_count_noindent(v10, a2, a3, a4);
  [v10 appendString:v9];
}

uint64_t _saos_printf_indent_and_count_noindent(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  id v7 = a1;
  int v8 = _saos_printf_indent_and_kernel_dot(v7, a2, a4, 1);
  LODWORD(a3) = objc_msgSend(v7, "printWithFormat:", @"%lu ", a3);

  return (a3 + v8);
}

void _saos_printf_microstackshot_state_as_frame_base( void *a1, uint64_t a2, unsigned int a3, uint64_t a4, int a5, uint64_t a6, uint64_t *a7, uint64_t a8, int a9, char a10, unsigned __int8 a11, char a12, void *a13)
{
  id v33 = a1;
  id v18 = a13;
  uint64_t v29 = a8;
  BOOL v19 = _microstackshot_state_has_change_to_display(a8, a9, a10, a11);
  BOOL v20 = v19;
  uint64_t v28 = a7;
  uint64_t v31 = a6;
  if ((a10 & 1) != 0)
  {
    int v21 = 0;
  }

  else
  {
    if (a7) {
      BOOL v22 = *a7 == a6;
    }
    else {
      BOOL v22 = a6 == 0;
    }
    int v21 = !v22;
  }

  if (v18) {
    int v23 = 1;
  }
  else {
    int v23 = v19;
  }
  if ((v23 & 1) != 0 || v21)
  {
    if (a12) {
      int v24 = _saos_printf_indent_and_count_noindent(v33, a2, a4, a5);
    }
    else {
      int v24 = _saos_printf_indent_and_count(v33, a2, a3, a4, a5);
    }
    if ((a10 & 1) != 0)
    {
      if (v23)
      {
        objc_msgSend(v33, "printWithFormat:", @"state 0x%x", v29);
        if (v18) {
          [v33 printWithFormat:@", on behalf of %@", v18];
        }
      }
    }

    else
    {
      int v25 = [v33 appendString:@"<"] + v24;
      if (v18) {
        int v26 = [v33 printWithFormat:@"on behalf of %@", v18] + v25;
      }
      else {
        int v26 = v25;
      }
      if (v20)
      {
        if (v26 > v25) {
          v26 += objc_msgSend(v33, "appendString:", @", ");
        }
        v26 += saos_printf_microstackshot_state(v33, v29, a9, 0, a11);
      }

      if (v21)
      {
        unsigned int v27 = v33;
        if (v26 > v25)
        {
          objc_msgSend(v33, "appendString:", @", ");
          unsigned int v27 = v33;
        }

        _saos_printf_state_appended_noparens(v27, v31, v28, 0LL);
      }

      [v33 appendString:@">"];
    }
  }
}

void sub_186D529B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
}

void sub_186D52D9C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
}

void FreeMountStatusData(char *a1)
{
  if (a1)
  {
    uint64_t v2 = *(void ***)a1;
    if (v2)
    {
      id v3 = (void ***)(a1 + 8);
      do
      {
        if (v2[1])
        {
          free(v2[1]);
          uint64_t v2 = *(v3 - 1);
        }

        free(v2);
        double v4 = *v3++;
        uint64_t v2 = v4;
      }

      while (v4);
    }

    free(a1);
  }

char *CopyMountStatusData()
{
  if (qword_18C4B16F0 != -1) {
    dispatch_once(&qword_18C4B16F0, &__block_literal_global_40);
  }
  if (!_MergedGlobals_9) {
    return 0LL;
  }
  uint64_t v0 = 0LL;
  if (!dispatch_semaphore_wait((dispatch_semaphore_t)qword_18C4B16E0, 0LL))
  {
    unsigned int v1 = _MergedGlobals_9 + 1;
    size_t v2 = 8LL * (_MergedGlobals_9 + 1);
    uint64_t v0 = (char *)malloc(v2 | 4);
    bzero(v0, v2);
    id v3 = (unsigned int *)&v0[8 * v1];
    unsigned int *v3 = 2;
    dispatch_semaphore_t v4 = dispatch_semaphore_create(0LL);
    BOOL v5 = (dispatch_queue_s *)qword_18C4B16E8;
    block[0] = MEMORY[0x1895F87A8];
    block[1] = 3221225472LL;
    block[2] = __CopyMountStatusData_block_invoke_42;
    block[3] = &unk_189F645E8;
    uint64_t v12 = v0;
    id v13 = v3;
    double v6 = v4;
    id v11 = v6;
    dispatch_async(v5, block);
    dispatch_time_t v7 = dispatch_time(0LL, 1000000000LL);
    if (dispatch_semaphore_wait(v6, v7))
    {
      do
        unsigned int v8 = __ldxr(v3);
      while (__stxr(v8 - 1, v3));
      if (v8 == 1) {
        free(v0);
      }
      uint64_t v0 = 0LL;
    }
  }

  return v0;
}

void __CopyMountStatusData_block_invoke()
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  unsigned int v0 = getmntinfo(&v10, 2);
  _MergedGlobals_9 = v0;
  if (v0)
  {
    qword_18C4B16D8 = (uint64_t)calloc(v0, 0x878uLL);
    memcpy((void *)qword_18C4B16D8, v10, 2168LL * _MergedGlobals_9);
  }

  else
  {
    int v1 = *__error();
    _sa_logt();
    size_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      int v3 = *__error();
      dispatch_semaphore_t v4 = __error();
      BOOL v5 = strerror(*v4);
      *(_DWORD *)buf = 67109378;
      int v12 = v3;
      __int16 v13 = 2080;
      uint64_t v14 = v5;
      _os_log_impl(&dword_186C92000, v2, OS_LOG_TYPE_DEFAULT, "WARNING: getmntinfo failed: %d %s", buf, 0x12u);
    }

    *__error() = v1;
    qword_18C4B16D8 = 0LL;
    _MergedGlobals_9 = 0;
  }

  dispatch_semaphore_t v6 = dispatch_semaphore_create(1LL);
  dispatch_time_t v7 = (void *)qword_18C4B16E0;
  qword_18C4B16E0 = (uint64_t)v6;

  dispatch_queue_t v8 = dispatch_queue_create("Network mount sysctl", 0LL);
  id v9 = (void *)qword_18C4B16E8;
  qword_18C4B16E8 = (uint64_t)v8;
}

uint64_t __CopyMountStatusData_block_invoke_42(uint64_t a1)
{
  *(void *)&v24[5] = *MEMORY[0x1895F89C0];
  if (_MergedGlobals_9)
  {
    uint64_t v2 = 0LL;
    unint64_t v3 = 0LL;
    unsigned int v4 = 0;
    do
    {
      uint64_t v5 = qword_18C4B16D8;
      size_t __size = 0LL;
      if ((sysctl_fsid((void *)(qword_18C4B16D8 + v2 + 48), 0LL, &__size) & 0x80000000) == 0)
      {
        size_t v6 = __size;
        if (__size >= 0x611)
        {
          int v7 = *__error();
          _sa_logt();
          dispatch_queue_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134217984;
            *(void *)int v24 = (__size - 528) >> 3;
            _os_log_error_impl( &dword_186C92000,  v8,  OS_LOG_TYPE_ERROR,  "network mount status sizing check says %ld threads are blocked, ignoring",  buf,  0xCu);
          }

          *__error() = v7;
          goto LABEL_18;
        }

        id v9 = (unsigned int *)calloc(1uLL, __size);
        if ((sysctl_fsid((void *)(v5 + v2 + 48), v9, &__size) & 0x80000000) != 0)
        {
          int v12 = *__error();
          _sa_logt();
          __int16 v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            int v14 = *__error();
            uint64_t v15 = __error();
            uint64_t v16 = strerror(*v15);
            *(_DWORD *)buf = 67109378;
            v24[0] = v14;
            LOWORD(v24[1]) = 2080;
            *(void *)((char *)&v24[1] + 2) = v16;
            _os_log_error_impl( &dword_186C92000,  v13,  OS_LOG_TYPE_ERROR,  "Unable to get netfs_status: %d %s",  buf,  0x12u);
          }

          *__error() = v12;
        }

        else
        {
          if (&v9[2 * v9[130] + 132] <= (unsigned int *)((char *)v9 + v6))
          {
            *(void *)(*(void *)(a1 + 40) + 8LL * v4) = malloc(0x10uLL);
            *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL * v4) + 8LL) = v9;
            **(void **)(*(void *)(a1 + 40) + 8LL * v4++) = v5 + v2;
            goto LABEL_18;
          }

          int v10 = *__error();
          _sa_logt();
          id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          {
            unsigned int v17 = v9[130];
            *(_DWORD *)buf = 67109376;
            v24[0] = v17;
            LOWORD(v24[1]) = 2048;
            *(void *)((char *)&v24[1] + 2) = v6;
            _os_log_error_impl( &dword_186C92000,  v11,  OS_LOG_TYPE_ERROR,  "network mount status says %u threads are blocked, which is more than fits in the allocated status structur e (%zu bytes), ignoring",  buf,  0x12u);
          }

          *__error() = v10;
        }

        free(v9);
      }

uint64_t sysctl_fsid(void *a1, void *a2, size_t *a3)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  size_t v13 = 14LL;
  if (sysctlnametomib("vfs.generic.ctlbyfsid", v19, &v13) == -1)
  {
    int v8 = *__error();
    _sa_logt();
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v10 = *__error();
      id v11 = __error();
      int v12 = strerror(*v11);
      *(_DWORD *)buf = 136315650;
      *(void *)uint64_t v15 = "vfs.generic.ctlbyfsid";
      *(_WORD *)&v15[8] = 1024;
      *(_DWORD *)&v15[10] = v10;
      *(_WORD *)&v15[14] = 2080;
      *(void *)&v15[16] = v12;
      _os_log_error_impl(&dword_186C92000, v9, OS_LOG_TYPE_ERROR, "sysctlnametomib %s failed: %d %s", buf, 0x1Cu);
    }

    *__error() = v8;
    return 0xFFFFFFFFLL;
  }

  else
  {
    int v6 = v13;
    v19[v13] = 65546;
    memset(&v15[4], 0, 32);
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    uint64_t v18 = 0LL;
    *(_DWORD *)buf = 1;
    *(void *)uint64_t v15 = *a1;
    *(void *)&v15[12] = 0LL;
    *(void *)&v15[20] = 0LL;
    return sysctl(v19, v6 + 1, a2, a3, buf, 0x50uLL);
  }

void sub_186D5960C(_Unwind_Exception *a1)
{
}

LABEL_204:
        _Block_object_dispose(&v199, 8);
        goto LABEL_205;
      }

      v137 = v136;
      [*v135 uuid];
      v138 = (void *)objc_claimAutoreleasedReturnValue();
      v139 = +[SASharedCache sharedCacheWithUUID:slide:slidBaseAddress:]( SASharedCache,  "sharedCacheWithUUID:slide:slidBaseAddress:",  v138,  [*v135 slide],  objc_msgSend(*v135, "slidBaseAddress"));
      [v139 binaryLoadInfos];
      v140 = (void *)objc_claimAutoreleasedReturnValue();
      if ([v140 count])
      {
      }

      else
      {
        [v137 binaryLoadInfos];
        v141 = (void *)objc_claimAutoreleasedReturnValue();
        v142 = [v141 count] == 0;

        if (!v142) {
          goto LABEL_180;
        }
      }

      objc_storeStrong(v135, v139);
LABEL_180:

      v136 = *v135;
      goto LABEL_181;
    }

    [*(id *)(v184 + 24) objectForKeyedSubscript:&unk_189F82460];
    v122 = (void *)objc_claimAutoreleasedReturnValue();
    v123 = v122;
    if (v122)
    {
      v209 = 0u;
      v210 = 0u;
      v207 = 0u;
      v208 = 0u;
      [v122 states];
      v124 = (_BYTE *)objc_claimAutoreleasedReturnValue();
      v125 = [v124 countByEnumeratingWithState:&v207 objects:dest count:16];
      if (v125)
      {
        v126 = 0LL;
        v127 = *(void *)v208;
        do
        {
          for (uint64_t j = 0LL; j != v125; ++j)
          {
            if (*(void *)v208 != v127) {
              objc_enumerationMutation(v124);
            }
            [*(id *)(*((void *)&v207 + 1) + 8 * j) thread];
            v129 = (void *)objc_claimAutoreleasedReturnValue();
            if (v126)
            {
              v130 = v126 == v129;

              if (!v130)
              {

                goto LABEL_172;
              }
            }

            else
            {
              v126 = v129;
            }
          }

          v125 = [v124 countByEnumeratingWithState:&v207 objects:dest count:16];
        }

        while (v125);

        if (!v126) {
          goto LABEL_173;
        }
        v205 = 0u;
        v206 = 0u;
        v203 = 0u;
        v204 = 0u;
        [v126 threadStates];
        v131 = (void *)objc_claimAutoreleasedReturnValue();
        v132 = [v131 countByEnumeratingWithState:&v203 objects:v253 count:16];
        if (v132)
        {
          v133 = *(void *)v204;
          while (2)
          {
            for (k = 0LL; k != v132; ++k)
            {
              if (*(void *)v204 != v133) {
                objc_enumerationMutation(v131);
              }
              if ([*(id *)(*((void *)&v203 + 1) + 8 * k) isIdleWorkQueue])
              {

                v126 = 0LL;
                goto LABEL_215;
              }
            }

            v132 = [v131 countByEnumeratingWithState:&v203 objects:v253 count:16];
            if (v132) {
              continue;
            }
            break;
          }
        }

LABEL_215:
        v158 = *(void **)(v184 + 264);
        *(void *)(v184 + 264) = v126;
        v124 = v126;

        if (v124) {
          v124[17] = 1;
        }
      }

LABEL_172:
    }

LABEL_173:
    v121 = v184;
    goto LABEL_174;
  }

LABEL_205:
}

void sub_186D5AD74( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
}

void sub_186D5DC64( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t __Block_byref_object_copy__6(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__6(uint64_t a1)
{
}

void sub_186D5DE40( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_186D5E194( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_186D5EA6C(_Unwind_Exception *a1)
{
}

LABEL_48:
}

void sub_186D64A10( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_186D64E88(_Unwind_Exception *a1)
{
}

void sub_186D6534C(_Unwind_Exception *a1)
{
}

void sub_186D65BA4(_Unwind_Exception *a1)
{
}

void SAJSONWriteDictionaryEntry(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = a1;
  [v7 appendString:@","];
  SAJSONWriteDictionaryFirstEntry(v7, (uint64_t)v6, v5);
}

void SAJSONWriteDictionaryFirstEntry(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = a1;
  [v6 printWithFormat:@"%@:", a2];
  SAJSONWriteItem(v6, v5);
}

void SAJSONWriteItem(void *a1, void *a2)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  id v15 = a1;
  id v3 = a2;
  if ([v3 conformsToProtocol:&unk_18C6AC8D8])
  {
    [v15 appendString:@"{"];
    [v3 writeJSONDictionaryEntriesToStream:v15];
    unsigned int v4 = @"}";
LABEL_3:
    [v15 appendString:v4];
LABEL_11:

    return;
  }

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    SAJSONWriteArray(v15, v3);
    goto LABEL_11;
  }

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    [v3 stringByReplacingOccurrencesOfString:@"" withString:@"\\"];
    id v5 = (void *)objc_claimAutoreleasedReturnValue();
    [v15 printWithFormat:@"%@", v5];
LABEL_10:

    goto LABEL_11;
  }

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    [v3 description];
    id v5 = (void *)objc_claimAutoreleasedReturnValue();
    [v15 appendString:v5];
    goto LABEL_10;
  }

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    unsigned int v4 = @"null";
    goto LABEL_3;
  }

  int v6 = *__error();
  _sa_logt();
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315138;
    Classuint64_t Name = object_getClassName(v3);
    _os_log_error_impl(&dword_186C92000, v7, OS_LOG_TYPE_ERROR, "Not a json-compatible type: %s", buf, 0xCu);
  }

  *__error() = v6;
  char v8 = object_getClassName(v3);
  _SASetCrashLogMessage(50, "Not a json-compatible type: %s", v9, v10, v11, v12, v13, v14, v8);
  _os_crash();
  __break(1u);
}

void SAJSONWriteArray(void *a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  [v3 appendString:@"["];
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  id v5 = v4;
  uint64_t v6 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v13;
    char v9 = 1;
    do
    {
      uint64_t v10 = 0LL;
      do
      {
        if (*(void *)v13 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v11 = *(void *)(*((void *)&v12 + 1) + 8 * v10);
        if ((v9 & 1) == 0) {
          objc_msgSend(v3, "appendString:", @",", (void)v12);
        }
        SAJSONWriteItem(v3, v11);
        char v9 = 0;
        ++v10;
      }

      while (v7 != v10);
      uint64_t v7 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
      char v9 = 0;
    }

    while (v7);
  }

  [v3 appendString:@"]"];
}

void sub_186D66508(_Unwind_Exception *a1)
{
}

uint64_t __Block_byref_object_copy__7(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__7(uint64_t a1)
{
}

uint64_t HIDEventTimestampForKTraceEvent(uint64_t a1)
{
  uint64_t result = 0LL;
  int v3 = *(_DWORD *)(a1 + 48);
  if (v3 > 736428035)
  {
    unsigned int v5 = v3 - 736493572;
    BOOL v6 = v5 > 0xC;
    int v7 = (1 << v5) & 0x1111;
    if (!v6 && v7 != 0) {
      goto LABEL_24;
    }
    return result;
  }

  if (v3 <= 730268055)
  {
    if (v3 != 730267892 && v3 != 730267896)
    {
      if (v3 != 730267908) {
        return result;
      }
      uint64_t v10 = a1 + 32;
      return *(void *)v10;
    }

const char *EventTypeString(int a1)
{
  else {
    return off_189F64B50[a1 - 1];
  }
}

const char *TracePointString(int a1)
{
  if (a1 > 736428047)
  {
    if (a1 <= 736428063)
    {
      if (a1 > 736428055)
      {
        if (a1 == 736428056) {
          return "CGXFilterEventToConnection";
        }
        if (a1 == 736428060) {
          return "post_event_tap_data";
        }
      }

      else
      {
        if (a1 == 736428048) {
          return "sPostContinuation";
        }
        if (a1 == 736428052) {
          return "sAnnotatedContinuation";
        }
      }
    }

    else if (a1 <= 736493575)
    {
      if (a1 == 736428064) {
        return "decode_and_forward";
      }
      if (a1 == 736493572) {
        return "PushToCGEventQueue";
      }
    }

    else
    {
      switch(a1)
      {
        case 736493576:
          return "CreateAndPostEventWithCGEvent";
        case 736493580:
          return "PullEventsFromWindowServerOnConnection";
        case 736493584:
          return "ReceiveNextEventCommon (for the next event)";
      }
    }
  }

  else if (a1 <= 735576100)
  {
    if (a1 > 730268055)
    {
      if (a1 == 730268056) {
        return "Keyboard event start";
      }
      if (a1 == 730268060) {
        return "Keyboard event stop";
      }
    }

    else
    {
      if (a1 == 730267892) {
        return "Event dispatch begin";
      }
      if (a1 == 730267896) {
        return "Event dispatch end";
      }
    }
  }

  else if (a1 <= 736428035)
  {
    if (a1 == 735576101) {
      return "Entry to NSApplication sendEvent";
    }
    if (a1 == 735576102) {
      return "Return from NSApplication sendEvent";
    }
  }

  else
  {
    switch(a1)
    {
      case 736428036:
        return "hid_translation_state_append_wrapped_nxevent";
      case 736428040:
        return "CGXGetNextEvent";
      case 736428044:
        return "sHIDContinuation";
    }
  }

  return "???";
}

void _getIndexRangeForTimestamps( unint64_t *a1, void *a2, void *a3, unint64_t a4, double a5, double a6)
{
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue();
  __int128 v12 = v11;
  *a1 = -1LL;
  *a2 = 0LL;
  if (a5 < a6 && v11 != 0LL)
  {
    int v26 = v11;
    uint64_t v14 = [v11 count];
    __int128 v12 = v26;
    if (v14)
    {
      if (a4 == -1LL) {
        a4 = 0LL;
      }
      while (1)
      {
        unint64_t v15 = [v12 count];
        __int128 v12 = v26;
        if (a4 >= v15) {
          break;
        }
        [v26 objectAtIndexedSubscript:a4];
        __int128 v16 = (void *)objc_claimAutoreleasedReturnValue();
        [v16 machAbsTimeSeconds];
        if (v17 >= a5)
        {

          unint64_t v20 = [v26 count];
          __int128 v12 = v26;
          if (a4 < v20)
          {
            uint64_t v21 = 0LL;
            while (1)
            {
              [v12 objectAtIndexedSubscript:a4 + v21];
              BOOL v22 = (void *)objc_claimAutoreleasedReturnValue();
              [v22 machAbsTimeSeconds];
              double v24 = v23;

              if (v24 >= a6) {
                break;
              }
              ++v21;
              unint64_t v25 = [v26 count];
              __int128 v12 = v26;
              if (v21 + a4 >= v25) {
                goto LABEL_18;
              }
            }

            __int128 v12 = v26;
LABEL_18:
            if (v21)
            {
              *a1 = a4;
              *a2 = v21;
            }
          }

          break;
        }

        [v16 machAbsTimeSeconds];
        double v19 = v18;

        __int128 v12 = v26;
        if (v19 >= a6) {
          break;
        }
        ++a4;
      }
    }
  }
}

void _printSampleRangeForIndices(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v7 = a1;
  [v7 appendString:@"["];
  if ((a2 == -1 || a3) && (a2 != -1 || !a3))
  {
    if (a2 == -1 || (uint64_t v10 = a4 + a2, a4 + a2 + a3 <= 0))
    {
      objc_msgSend(v7, "printWithFormat:", @"%11s", "No samples", v12);
    }

    else
    {
      if (v10 <= 1) {
        uint64_t v11 = 1LL;
      }
      else {
        uint64_t v11 = a4 + a2;
      }
      if (a3 == 1) {
        objc_msgSend(v7, "printWithFormat:", @"%7lu%4s", v11, "");
      }
      else {
        objc_msgSend(v7, "printWithFormat:", @"%5lu-%-5lu", v11, a3 + v10 - 1);
      }
    }
  }

  else
  {
    int v8 = *__error();
    _sa_logt();
    char v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_186C92000, v9, OS_LOG_TYPE_DEFAULT, "WARNING: Non-sensical indices.", buf, 2u);
    }

    *__error() = v8;
    [v7 appendString:@"ERROR"];
  }

  [v7 appendString:@"]"];
}

uint64_t __Block_byref_object_copy__8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__8(uint64_t a1)
{
}

LABEL_79:
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1896027C8]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1896027D0](BOOLean);
}

CFURLRef CFBundleCopyBundleURL(CFBundleRef bundle)
{
  return (CFURLRef)MEMORY[0x1896027F0](bundle);
}

CFURLRef CFBundleCopyExecutableURL(CFBundleRef bundle)
{
  return (CFURLRef)MEMORY[0x189602800](bundle);
}

CFStringRef CFBundleGetIdentifier(CFBundleRef bundle)
{
  return (CFStringRef)MEMORY[0x1896028D0](bundle);
}

CFTypeRef CFBundleGetValueForInfoDictionaryKey(CFBundleRef bundle, CFStringRef key)
{
  return (CFTypeRef)MEMORY[0x189602908](bundle, key);
}

CFStringRef CFCopyTypeIDDescription(CFTypeID type_id)
{
  return (CFStringRef)MEMORY[0x189602A38](type_id);
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x189602C00](theDict, key);
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x189602C38](cf1, cf2);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x189602D30](cf);
}

Boolean CFNumberIsFloatType(CFNumberRef number)
{
  return MEMORY[0x189602F20](number);
}

CFPropertyListRef CFPreferencesCopyValue( CFStringRef key, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFPropertyListRef)MEMORY[0x189602F88](key, applicationID, userName, hostName);
}

void CFRelease(CFTypeRef cf)
{
}

CFComparisonResult CFStringCompare( CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1896033C0](theString1, theString2, compareOptions);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x189603590]();
}

uint64_t CSArchitectureGetArchitectureForName()
{
  return MEMORY[0x18960E070]();
}

uint64_t CSArchitectureGetCurrent()
{
  return MEMORY[0x18960E080]();
}

uint64_t CSArchitectureGetFamily()
{
  return MEMORY[0x18960E088]();
}

uint64_t CSArchitectureGetFamilyName()
{
  return MEMORY[0x18960E098]();
}

uint64_t CSArchitectureIs32Bit()
{
  return MEMORY[0x18960E0A0]();
}

uint64_t CSArchitectureIs64Bit()
{
  return MEMORY[0x18960E0A8]();
}

uint64_t CSArchitectureIsArm64()
{
  return MEMORY[0x18960E0C8]();
}

uint64_t CSArchitectureIsX86_64()
{
  return MEMORY[0x18960E0D0]();
}

uint64_t CSArchitectureMatchesArchitecture()
{
  return MEMORY[0x18960E0E0]();
}

uint64_t CSIsNull()
{
  return MEMORY[0x18960E0F8]();
}

uint64_t CSRangeContainsRange()
{
  return MEMORY[0x18960E108]();
}

uint64_t CSRangeIntersectsRange()
{
  return MEMORY[0x18960E110]();
}

uint64_t CSRegionForeachSymbol()
{
  return MEMORY[0x18960E118]();
}

uint64_t CSRegionGetName()
{
  return MEMORY[0x18960E120]();
}

uint64_t CSRegionGetRange()
{
  return MEMORY[0x18960E138]();
}

uint64_t CSRelease()
{
  return MEMORY[0x18960E150]();
}

uint64_t CSRetain()
{
  return MEMORY[0x18960E158]();
}

uint64_t CSSourceInfoGetColumn()
{
  return MEMORY[0x18960E170]();
}

uint64_t CSSourceInfoGetLineNumber()
{
  return MEMORY[0x18960E188]();
}

uint64_t CSSourceInfoGetPath()
{
  return MEMORY[0x18960E198]();
}

uint64_t CSSourceInfoGetRange()
{
  return MEMORY[0x18960E1A0]();
}

uint64_t CSSymbolForeachInlineRange()
{
  return MEMORY[0x18960E1A8]();
}

uint64_t CSSymbolForeachSourceInfo()
{
  return MEMORY[0x18960E1B8]();
}

uint64_t CSSymbolGetName()
{
  return MEMORY[0x18960E1D0]();
}

uint64_t CSSymbolGetRange()
{
  return MEMORY[0x18960E1E0]();
}

uint64_t CSSymbolIsUnnamed()
{
  return MEMORY[0x18960E1F8]();
}

uint64_t CSSymbolOwnerForEachStackFrameAtAddress()
{
  return MEMORY[0x18960E220]();
}

uint64_t CSSymbolOwnerForeachSegment()
{
  return MEMORY[0x18960E230]();
}

uint64_t CSSymbolOwnerGetBaseAddress()
{
  return MEMORY[0x18960E258]();
}

uint64_t CSSymbolOwnerGetCFUUIDBytes()
{
  return MEMORY[0x18960E270]();
}

uint64_t CSSymbolOwnerGetName()
{
  return MEMORY[0x18960E288]();
}

uint64_t CSSymbolOwnerGetPath()
{
  return MEMORY[0x18960E2A0]();
}

uint64_t CSSymbolOwnerGetSegmentWithAddress()
{
  return MEMORY[0x18960E2B0]();
}

uint64_t CSSymbolOwnerGetVersion()
{
  return MEMORY[0x18960E2F8]();
}

uint64_t CSSymbolOwnerIsDsym()
{
  return MEMORY[0x18960E310]();
}

uint64_t CSSymbolOwnerIsDyldSharedCache()
{
  return MEMORY[0x18960E320]();
}

uint64_t CSSymbolicatorCreateWithExclaveUUIDAndFlags()
{
  return MEMORY[0x18960E388]();
}

uint64_t CSSymbolicatorCreateWithMachKernelFlagsAndNotification()
{
  return MEMORY[0x18960E3A0]();
}

uint64_t CSSymbolicatorCreateWithPathArchitectureFlagsAndNotification()
{
  return MEMORY[0x18960E3B0]();
}

uint64_t CSSymbolicatorCreateWithPidFlagsAndNotification()
{
  return MEMORY[0x18960E3C8]();
}

uint64_t CSSymbolicatorForeachSymbolOwnerAtTime()
{
  return MEMORY[0x18960E430]();
}

uint64_t CSSymbolicatorForeachSymbolicatorWithPathFlagsAndNotification()
{
  return MEMORY[0x18960E458]();
}

uint64_t CSSymbolicatorGetAOutSymbolOwner()
{
  return MEMORY[0x18960E468]();
}

uint64_t CSSymbolicatorGetArchitecture()
{
  return MEMORY[0x18960E478]();
}

uint64_t CSSymbolicatorGetSharedCacheUUID()
{
  return MEMORY[0x18960E4B0]();
}

uint64_t CSSymbolicatorGetSymbolOwner()
{
  return MEMORY[0x18960E4D0]();
}

uint64_t CSSymbolicatorGetSymbolOwnerCountAtTime()
{
  return MEMORY[0x18960E4D8]();
}

uint64_t CSSymbolicatorGetSymbolOwnerWithCFUUIDBytesAtTime()
{
  return MEMORY[0x18960E4F0]();
}

CFDictionaryRef IOCopySystemLoadAdvisoryDetailed(void)
{
  return (CFDictionaryRef)MEMORY[0x189607D28]();
}

uint64_t IOPMGetLastWakeTime()
{
  return MEMORY[0x1896083E0]();
}

uint64_t IOReportChannelGetChannelName()
{
  return MEMORY[0x189613628]();
}

uint64_t IOReportChannelGetFormat()
{
  return MEMORY[0x189613630]();
}

uint64_t IOReportChannelGetGroup()
{
  return MEMORY[0x189613638]();
}

uint64_t IOReportCopyChannelsForDrivers()
{
  return MEMORY[0x189613650]();
}

uint64_t IOReportCreateSamples()
{
  return MEMORY[0x189613670]();
}

uint64_t IOReportCreateSubscription()
{
  return MEMORY[0x189613680]();
}

uint64_t IOReportGetChannelCount()
{
  return MEMORY[0x189613688]();
}

uint64_t IOReportIterate()
{
  return MEMORY[0x1896136A8]();
}

uint64_t IOReportSimpleGetIntegerValue()
{
  return MEMORY[0x1896136C8]();
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x189608580](name);
}

uint64_t MGCopyAnswerWithError()
{
  return MEMORY[0x189613700]();
}

NSString *__cdecl NSHomeDirectoryForUser(NSString *userName)
{
  return (NSString *)MEMORY[0x189607588](userName);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x189607700](aClass);
}

uint64_t OSLogLookupPathWithUUID()
{
  return MEMORY[0x189610850]();
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

uint64_t _CFBundleCreateWithExecutableURLIfLooksLikeBundle()
{
  return MEMORY[0x189604170]();
}

uint64_t _CFCopySupplementalVersionDictionary()
{
  return MEMORY[0x189604230]();
}

uint64_t _CFCopySystemVersionDictionary()
{
  return MEMORY[0x189604238]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

int *__error(void)
{
  return (int *)MEMORY[0x1895F8898]();
}

double __exp10(double a1)
{
  return result;
}

uint64_t __strlcpy_chk()
{
  return MEMORY[0x1895F8A08]();
}

uint64_t __udivti3()
{
  return MEMORY[0x1895F8A38]();
}

uint64_t _os_crash()
{
  return MEMORY[0x1895F8D78]();
}

void _os_log_debug_impl( void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl( void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl( void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x189612738]();
}

uint64_t abort_report_np()
{
  return MEMORY[0x1895F9308]();
}

uint64_t amfi_launch_constraint_set_spawnattr()
{
  return MEMORY[0x18960D4B8]();
}

int asprintf(char **a1, const char *a2, ...)
{
  return MEMORY[0x1895F9540](a1, a2);
}

void bzero(void *a1, size_t a2)
{
}

void *__cdecl calloc(size_t __count, size_t __size)
{
  return (void *)MEMORY[0x1895F9710](__count, __size);
}

int close(int a1)
{
  return MEMORY[0x1895FA590](*(void *)&a1);
}

int compress(Bytef *dest, uLongf *destLen, const Bytef *source, uLong sourceLen)
{
  return MEMORY[0x189617568](dest, destLen, source, sourceLen);
}

uLong compressBound(uLong sourceLen)
{
  return MEMORY[0x189617570](sourceLen);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1895FABB0](flags, block);
}

dispatch_block_t dispatch_block_create_with_qos_class( dispatch_block_flags_t flags, dispatch_qos_class_t qos_class, int relative_priority, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1895FABB8](flags, *(void *)&qos_class, *(void *)&relative_priority, block);
}

uint64_t dispatch_block_wait(dispatch_block_t block, dispatch_time_t timeout)
{
  return MEMORY[0x1895FABE0](block, timeout);
}

dispatch_queue_global_t dispatch_get_global_queue(uint64_t identifier, unint64_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1895FAC40](identifier, flags);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency( dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1895FAD68](attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class( dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1895FAD78](attr, *(void *)&qos_class, *(void *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1895FAD80](label, attr);
}

dispatch_semaphore_t dispatch_semaphore_create(uint64_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1895FADF0](value);
}

uint64_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1895FAE00](dsema);
}

uint64_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1895FAE08](dsema, timeout);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1895FAEE8](when, delta);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1895FAF58]();
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1895FAF78](__handle, __symbol);
}

uint64_t dscsym_iterate()
{
  return MEMORY[0x1896151B0]();
}

uint64_t dscsym_iterate_buffer()
{
  return MEMORY[0x1896151B8]();
}

uint64_t dyld_for_each_installed_shared_cache()
{
  return MEMORY[0x1895FAFC8]();
}

uint64_t dyld_image_content_for_segment()
{
  return MEMORY[0x1895FB000]();
}

uint64_t dyld_image_copy_uuid()
{
  return MEMORY[0x1895FB008]();
}

uint64_t dyld_image_for_each_segment_info()
{
  return MEMORY[0x1895FB010]();
}

uint64_t dyld_image_get_file_path()
{
  return MEMORY[0x1895FB018]();
}

uint64_t dyld_image_get_installname()
{
  return MEMORY[0x1895FB020]();
}

uint64_t dyld_process_create_for_current_task()
{
  return MEMORY[0x1895FB040]();
}

uint64_t dyld_process_create_for_task()
{
  return MEMORY[0x1895FB048]();
}

uint64_t dyld_process_dispose()
{
  return MEMORY[0x1895FB050]();
}

uint64_t dyld_process_snapshot_create_for_process()
{
  return MEMORY[0x1895FB060]();
}

uint64_t dyld_process_snapshot_dispose()
{
  return MEMORY[0x1895FB068]();
}

uint64_t dyld_process_snapshot_for_each_image()
{
  return MEMORY[0x1895FB070]();
}

uint64_t dyld_process_snapshot_get_shared_cache()
{
  return MEMORY[0x1895FB078]();
}

uint64_t dyld_shared_cache_copy_uuid()
{
  return MEMORY[0x1895FB090]();
}

uint64_t dyld_shared_cache_file_path()
{
  return MEMORY[0x1895FB098]();
}

uint64_t dyld_shared_cache_for_each_image()
{
  return MEMORY[0x1895FB0A8]();
}

uint64_t dyld_shared_cache_get_base_address()
{
  return MEMORY[0x1895FB0B8]();
}

uint64_t dyld_shared_cache_get_mapped_size()
{
  return MEMORY[0x1895FB0C0]();
}

int fclose(FILE *a1)
{
  return MEMORY[0x1895FB208](a1);
}

int fcntl(int a1, int a2, ...)
{
  return MEMORY[0x1895FB210](*(void *)&a1, *(void *)&a2);
}

FILE *__cdecl fdopen(int a1, const char *a2)
{
  return (FILE *)MEMORY[0x1895FB228](*(void *)&a1, a2);
}

int ferror(FILE *a1)
{
  return MEMORY[0x1895FB250](a1);
}

char *__cdecl fgets(char *a1, int a2, FILE *a3)
{
  return (char *)MEMORY[0x1895FB290](a1, *(void *)&a2, a3);
}

int flsl(uint64_t a1)
{
  return MEMORY[0x1895FB308](a1);
}

double fmod(double a1, double a2)
{
  return result;
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1895FB348](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1895FB360](a1, a2);
}

void free(void *a1)
{
}

int fsctl(const char *a1, unint64_t a2, void *a3, unsigned int a4)
{
  return MEMORY[0x1895FB418](a1, a2, a3, *(void *)&a4);
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1895FB448](*(void *)&a1, a2);
}

uint64_t ftell(FILE *a1)
{
  return MEMORY[0x1895FB470](a1);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1895FB4C8](__ptr, __size, __nitems, __stream);
}

int getattrlist(const char *a1, void *a2, void *a3, size_t a4, unsigned int a5)
{
  return MEMORY[0x1895FB4F8](a1, a2, a3, a4, *(void *)&a5);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1895FB538](a1);
}

uid_t geteuid(void)
{
  return MEMORY[0x1895FB540]();
}

int getmntinfo(statfs **a1, int a2)
{
  return MEMORY[0x1895FB5C8](a1, *(void *)&a2);
}

pid_t getpid(void)
{
  return MEMORY[0x1895FB628]();
}

int gzclose(gzFile file)
{
  return MEMORY[0x1896175B8](file);
}

gzFile gzdopen(int fd, const char *mode)
{
  return (gzFile)MEMORY[0x1896175D0](*(void *)&fd, mode);
}

const char *__cdecl gzerror(gzFile file, int *errnum)
{
  return (const char *)MEMORY[0x1896175D8](file, errnum);
}

int gzread(gzFile file, voidp buf, unsigned int len)
{
  return MEMORY[0x1896175F8](file, buf, *(void *)&len);
}

int kill(pid_t a1, int a2)
{
  return MEMORY[0x1895FB8E8](*(void *)&a1, *(void *)&a2);
}

uint64_t ktrace_chunk_copy_cfdata()
{
  return MEMORY[0x189612DF8]();
}

uint64_t ktrace_chunk_map_data()
{
  return MEMORY[0x189612E00]();
}

uint64_t ktrace_chunk_size()
{
  return MEMORY[0x189612E10]();
}

uint64_t ktrace_chunk_tag()
{
  return MEMORY[0x189612E18]();
}

uint64_t ktrace_chunk_unmap_data()
{
  return MEMORY[0x189612E28]();
}

uint64_t ktrace_chunks()
{
  return MEMORY[0x189612E30]();
}

uint64_t ktrace_config_create()
{
  return MEMORY[0x189612E38]();
}

uint64_t ktrace_config_destroy()
{
  return MEMORY[0x189612E40]();
}

uint64_t ktrace_config_get_reason()
{
  return MEMORY[0x189612E48]();
}

uint64_t ktrace_config_kperf_get_action_samplers()
{
  return MEMORY[0x189612E50]();
}

uint64_t ktrace_config_kperf_get_pet_mode()
{
  return MEMORY[0x189612E58]();
}

uint64_t ktrace_config_kperf_get_pet_timer_id()
{
  return MEMORY[0x189612E60]();
}

uint64_t ktrace_config_kperf_get_timer_action_id()
{
  return MEMORY[0x189612E68]();
}

uint64_t ktrace_config_kperf_get_timer_count()
{
  return MEMORY[0x189612E70]();
}

uint64_t ktrace_config_kperf_get_timer_period_ns()
{
  return MEMORY[0x189612E78]();
}

uint64_t ktrace_convert_absolute_to_walltime()
{
  return MEMORY[0x189612E80]();
}

uint64_t ktrace_convert_timestamp_to_walltime()
{
  return MEMORY[0x189612E88]();
}

uint64_t ktrace_dumpbuffer_address_space_pid()
{
  return MEMORY[0x189612E90]();
}

uint64_t ktrace_end()
{
  return MEMORY[0x189612E98]();
}

uint64_t ktrace_events_all()
{
  return MEMORY[0x189612EA0]();
}

uint64_t ktrace_events_range()
{
  return MEMORY[0x189612EB0]();
}

uint64_t ktrace_events_single()
{
  return MEMORY[0x189612EC0]();
}

uint64_t ktrace_get_absolute_from_timestamp()
{
  return MEMORY[0x189612ED8]();
}

uint64_t ktrace_get_continuous_from_absolute()
{
  return MEMORY[0x189612EE0]();
}

uint64_t ktrace_get_continuous_from_timestamp()
{
  return MEMORY[0x189612EE8]();
}

uint64_t ktrace_get_execname_for_pid()
{
  return MEMORY[0x189612EF0]();
}

uint64_t ktrace_get_execname_for_thread()
{
  return MEMORY[0x189612EF8]();
}

uint64_t ktrace_get_machine()
{
  return MEMORY[0x189612F00]();
}

uint64_t ktrace_get_name_for_thread()
{
  return MEMORY[0x189612F08]();
}

uint64_t ktrace_get_ns_from_timestamp()
{
  return MEMORY[0x189612F10]();
}

uint64_t ktrace_get_pid_for_thread()
{
  return MEMORY[0x189612F18]();
}

uint64_t ktrace_is_kernel_64_bit()
{
  return MEMORY[0x189612F20]();
}

uint64_t ktrace_kperf()
{
  return MEMORY[0x189612F28]();
}

uint64_t ktrace_machine_active_cpus()
{
  return MEMORY[0x189612F30]();
}

uint64_t ktrace_machine_cluster_flags()
{
  return MEMORY[0x189612F38]();
}

uint64_t ktrace_machine_cpu_cluster()
{
  return MEMORY[0x189612F40]();
}

uint64_t ktrace_machine_cpu_subtype()
{
  return MEMORY[0x189612F48]();
}

uint64_t ktrace_machine_cpu_type()
{
  return MEMORY[0x189612F50]();
}

uint64_t ktrace_machine_create_current()
{
  return MEMORY[0x189612F58]();
}

uint64_t ktrace_machine_destroy()
{
  return MEMORY[0x189612F60]();
}

uint64_t ktrace_machine_hw_page_size()
{
  return MEMORY[0x189612F68]();
}

uint64_t ktrace_machine_model()
{
  return MEMORY[0x189612F70]();
}

uint64_t ktrace_machine_os_build()
{
  return MEMORY[0x189612F78]();
}

uint64_t ktrace_machine_os_name()
{
  return MEMORY[0x189612F80]();
}

uint64_t ktrace_machine_os_version()
{
  return MEMORY[0x189612F88]();
}

uint64_t ktrace_machine_os_version_extra()
{
  return MEMORY[0x189612F90]();
}

uint64_t ktrace_machine_vm_page_size()
{
  return MEMORY[0x189612F98]();
}

uint64_t ktrace_session_create()
{
  return MEMORY[0x189612FA0]();
}

uint64_t ktrace_session_destroy()
{
  return MEMORY[0x189612FA8]();
}

uint64_t ktrace_session_set_event_names_enabled()
{
  return MEMORY[0x189612FB8]();
}

uint64_t ktrace_set_collection_qos()
{
  return MEMORY[0x189612FC0]();
}

uint64_t ktrace_set_completion_handler()
{
  return MEMORY[0x189612FC8]();
}

uint64_t ktrace_set_execnames_enabled()
{
  return MEMORY[0x189612FD0]();
}

uint64_t ktrace_set_file()
{
  return MEMORY[0x189612FE0]();
}

uint64_t ktrace_start()
{
  return MEMORY[0x189612FF0]();
}

tm *__cdecl localtime_r(const time_t *a1, tm *a2)
{
  return (tm *)MEMORY[0x1895FBA20](a1, a2);
}

double log10(double a1)
{
  return result;
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x1895FBA98]();
}

uint64_t mach_continuous_time(void)
{
  return MEMORY[0x1895FBAB0]();
}

uint64_t mach_get_times()
{
  return MEMORY[0x1895FBAC8]();
}

kern_return_t mach_port_deallocate(ipc_space_t task, mach_port_name_t name)
{
  return MEMORY[0x1895FBB28](*(void *)&task, *(void *)&name);
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1895FBBF8](info);
}

kern_return_t mach_vm_deallocate(vm_map_t target, mach_vm_address_t address, mach_vm_size_t size)
{
  return MEMORY[0x1895FBC10](*(void *)&target, address, size);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1895FBC88](__size);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1895FBE18](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1895FBE30](__dst, __src, __len);
}

int mergesort_b(void *__base, size_t __nel, size_t __width, void *__compar)
{
  return MEMORY[0x1895FBE78](__base, __nel, __width, __compar);
}

int mkdir(const char *a1, mode_t a2)
{
  return MEMORY[0x1895FBEF0](a1, a2);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x1895FBF70](a1, a2, *(void *)&a3, *(void *)&a4, *(void *)&a5, a6);
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x1895FBF98](a1, a2);
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x1895FC188](*(void *)&token);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return MEMORY[0x1895FC198](*(void *)&token, state64);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return MEMORY[0x1895FC1B8](name, out_token);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1896165B0](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1896165C0]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1896165D8](a1);
}

void objc_autoreleasePoolPop(void *context)
{
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x1896165E8]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1896165F0](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1896165F8](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x189616600]();
}

void objc_copyStruct(void *dest, const void *src, ptrdiff_t size, BOOL atomic, BOOL hasStrong)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

void objc_exception_rethrow(void)
{
}

void objc_exception_throw(id exception)
{
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1896166B8](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1896166C8](self, _cmd, offset, atomic);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x189616700](location);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x189616728](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x189616730]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x189616738]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x189616748]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x189616750]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x189616818](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x189616820](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x189616828](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x189616830](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x189616838](a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x189616968](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x189616978](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x189616980](obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x189616990](a1);
}

const char *__cdecl object_getClassName(id a1)
{
  return (const char *)MEMORY[0x1896169B0](a1);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1895FC248](a1, *(void *)&a2);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1895FC440](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1895FC470](oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t os_variant_has_internal_diagnostics()
{
  return MEMORY[0x1895FC6C8]();
}

int pipe(int a1[2])
{
  return MEMORY[0x1895FC7B0](a1);
}

int posix_spawn( pid_t *a1, const char *a2, const posix_spawn_file_actions_t *a3, const posix_spawnattr_t *a4, char *const __argv[], char *const __envp[])
{
  return MEMORY[0x1895FC7E0](a1, a2, a3, a4, __argv, __envp);
}

int posix_spawn_file_actions_addclose(posix_spawn_file_actions_t *a1, int a2)
{
  return MEMORY[0x1895FC7E8](a1, *(void *)&a2);
}

int posix_spawn_file_actions_adddup2(posix_spawn_file_actions_t *a1, int a2, int a3)
{
  return MEMORY[0x1895FC7F0](a1, *(void *)&a2, *(void *)&a3);
}

int posix_spawn_file_actions_addinherit_np(posix_spawn_file_actions_t *a1, int a2)
{
  return MEMORY[0x1895FC7F8](a1, *(void *)&a2);
}

int posix_spawn_file_actions_destroy(posix_spawn_file_actions_t *a1)
{
  return MEMORY[0x1895FC808](a1);
}

int posix_spawn_file_actions_init(posix_spawn_file_actions_t *a1)
{
  return MEMORY[0x1895FC810](a1);
}

int posix_spawnattr_destroy(posix_spawnattr_t *a1)
{
  return MEMORY[0x1895FC818](a1);
}

int posix_spawnattr_init(posix_spawnattr_t *a1)
{
  return MEMORY[0x1895FC828](a1);
}

int posix_spawnattr_setbinpref_np(posix_spawnattr_t *a1, size_t a2, cpu_type_t *a3, size_t *a4)
{
  return MEMORY[0x1895FC838](a1, a2, a3, a4);
}

int posix_spawnattr_setflags(posix_spawnattr_t *a1, __int16 a2)
{
  return MEMORY[0x1895FC840](a1, a2);
}

int printf(const char *a1, ...)
{
  return MEMORY[0x1895FC890](a1);
}

int proc_get_dirty(pid_t pid, uint32_t *flags)
{
  return MEMORY[0x1895FC8A0](*(void *)&pid, flags);
}

int proc_name(int pid, void *buffer, uint32_t buffersize)
{
  return MEMORY[0x1895FC8C8](*(void *)&pid, buffer, *(void *)&buffersize);
}

int proc_pidinfo(int pid, int flavor, uint64_t arg, void *buffer, int buffersize)
{
  return MEMORY[0x1895FC8E0](*(void *)&pid, *(void *)&flavor, arg, buffer, *(void *)&buffersize);
}

int proc_pidpath(int pid, void *buffer, uint32_t buffersize)
{
  return MEMORY[0x1895FC8E8](*(void *)&pid, buffer, *(void *)&buffersize);
}

qos_class_t qos_class_self(void)
{
  return MEMORY[0x1895FCBB8]();
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1895FCC38](*(void *)&a1, a2, a3);
}

void *__cdecl realloc(void *__ptr, size_t __size)
{
  return (void *)MEMORY[0x1895FCC68](__ptr, __size);
}

void *__cdecl reallocf(void *__ptr, size_t __size)
{
  return (void *)MEMORY[0x1895FCC70](__ptr, __size);
}

char *__cdecl rindex(const char *a1, int a2)
{
  return (char *)MEMORY[0x1895FCD78](a1, *(void *)&a2);
}

uint64_t sandbox_check()
{
  return MEMORY[0x1895FCD90]();
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1895FCF90](__str, __size, __format);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1895FD010](a1, a2);
}

int statfs(const char *a1, statfs *a2)
{
  return MEMORY[0x1895FD018](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1895FD050](__s1, __s2);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1895FD080](*(void *)&__errnum);
}

size_t strftime(char *a1, size_t a2, const char *a3, const tm *a4)
{
  return MEMORY[0x1895FD090](a1, a2, a3, a4);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1895FD0B0](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1895FD0B8](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1895FD0E8](__s1, __s2, __n);
}

char *__cdecl strstr(const char *__big, const char *__little)
{
  return (char *)MEMORY[0x1895FD148](__big, __little);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1895FD180](__str, __endptr, *(void *)&__base);
}

unint64_t strtoull(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1895FD1C8](__str, __endptr, *(void *)&__base);
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return MEMORY[0x1895FD2B0](a1, *(void *)&a2, a3, a4, a5, a6);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x1895FD2B8](a1, a2, a3, a4, a5);
}

int sysctlnametomib(const char *a1, int *a2, size_t *a3)
{
  return MEMORY[0x1895FD2C0](a1, a2, a3);
}

uint64_t task_read_for_pid()
{
  return MEMORY[0x1895FD340]();
}

kern_return_t task_threads( task_inspect_t target_task, thread_act_array_t *act_list, mach_msg_type_number_t *act_listCnt)
{
  return MEMORY[0x1895FD370](*(void *)&target_task, act_list, act_listCnt);
}

kern_return_t thread_info( thread_inspect_t target_act, thread_flavor_t flavor, thread_info_t thread_info_out, mach_msg_type_number_t *thread_info_outCnt)
{
  return MEMORY[0x1895FD3B0](*(void *)&target_act, *(void *)&flavor, thread_info_out, thread_info_outCnt);
}

time_t time(time_t *a1)
{
  return MEMORY[0x1895FD400](a1);
}

int uname(utsname *a1)
{
  return MEMORY[0x1895FD450](a1);
}

int uncompress(Bytef *dest, uLongf *destLen, const Bytef *source, uLong sourceLen)
{
  return MEMORY[0x189617638](dest, destLen, source, sourceLen);
}

int unlink(const char *a1)
{
  return MEMORY[0x1895FD468](a1);
}

void uuid_clear(uuid_t uu)
{
}

int uuid_compare(const uuid_t uu1, const uuid_t uu2)
{
  return MEMORY[0x1895FD4B8](uu1, uu2);
}

void uuid_copy(uuid_t dst, const uuid_t src)
{
}

int uuid_is_null(const uuid_t uu)
{
  return MEMORY[0x1895FD4E0](uu);
}

int uuid_parse(const uuid_string_t in, uuid_t uu)
{
  return MEMORY[0x1895FD4E8](in, uu);
}

void uuid_unparse(const uuid_t uu, uuid_string_t out)
{
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x1895FD610](__str, __size, __format, a4);
}

pid_t waitpid(pid_t a1, int *a2, int a3)
{
  return MEMORY[0x1895FD638](*(void *)&a1, a2, *(void *)&a3);
}

uint64_t xpc_coalition_copy_info()
{
  return MEMORY[0x1895FD900]();
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return (const char *)MEMORY[0x1895FDC48](xdict, key);
}

uint64_t objc_msgSend_addMicrostackshotsFromData_ofTypes_inTimeRangeStart_end_onlyPid_onlyTid_statistics_( void *a1, const char *a2, ...)
{
  return MEMORY[0x189616718]( a1,  sel_addMicrostackshotsFromData_ofTypes_inTimeRangeStart_end_onlyPid_onlyTid_statistics_);
}

uint64_t objc_msgSend_addMicrostackshotsFromFile_ofTypes_inTimeRangeStart_end_onlyPid_onlyTid_statistics_( void *a1, const char *a2, ...)
{
  return MEMORY[0x189616718]( a1,  sel_addMicrostackshotsFromFile_ofTypes_inTimeRangeStart_end_onlyPid_onlyTid_statistics_);
}

uint64_t objc_msgSend_addUserCallstack_numUserFrames_swiftAsyncCallstack_numSwiftAsyncFrames_swiftAsyncStartIndex_kernelCallstack_numKernelFrames_loadInfos_numLoadInfos_textExecLoadInfos_numTextExecLoadInfos_uniquePid_pid_processName_tid_timestamp_sharedCache_( void *a1, const char *a2, ...)
{
  return MEMORY[0x189616718]( a1,  sel_addUserCallstack_numUserFrames_swiftAsyncCallstack_numSwiftAsyncFrames_swiftAsyncStartIndex_kernelCallstack_numKernelFrames_loadInfos_numLoadInfos_textExecLoadInfos_numTextExecLoadInfos_uniquePid_pid_processName_tid_timestamp_sharedCache_);
}

uint64_t objc_msgSend_binaryLoadInfoForLiveProcessWithPid_dataGatheringOptions_additionalCSSymbolicatorFlags_( void *a1, const char *a2, ...)
{
  return MEMORY[0x189616718]( a1,  sel_binaryLoadInfoForLiveProcessWithPid_dataGatheringOptions_additionalCSSymbolicatorFlags_);
}

uint64_t objc_msgSend_enumerateTaskStatesBetweenStartTime_startSampleIndex_endTime_endSampleIndex_reverseOrder_block_( void *a1, const char *a2, ...)
{
  return MEMORY[0x189616718]( a1,  sel_enumerateTaskStatesBetweenStartTime_startSampleIndex_endTime_endSampleIndex_reverseOrder_block_);
}

uint64_t objc_msgSend_enumerateThreadStatesBetweenStartTime_startSampleIndex_endTime_endSampleIndex_reverseOrder_block_( void *a1, const char *a2, ...)
{
  return MEMORY[0x189616718]( a1,  sel_enumerateThreadStatesBetweenStartTime_startSampleIndex_endTime_endSampleIndex_reverseOrder_block_);
}

uint64_t objc_msgSend_initWithFrame_startSampleIndex_sampleCount_otherCallTreeDescription_( void *a1, const char *a2, ...)
{
  return MEMORY[0x189616718](a1, sel_initWithFrame_startSampleIndex_sampleCount_otherCallTreeDescription_);
}

uint64_t objc_msgSend_initWithKCDataDeltaThreadV2_startTimestamp_endTimestamp_startSampleIndex_endSampleIndex_name_leafUserFrame_leafOfCRootFramesReplacedBySwiftAsync_leafKernelFrame_oldThreadState_waitInfo_turnstileInfo_( void *a1, const char *a2, ...)
{
  return MEMORY[0x189616718]( a1,  sel_initWithKCDataDeltaThreadV2_startTimestamp_endTimestamp_startSampleIndex_endSampleIndex_name_leafUserFrame_leafOfCRootFramesReplacedBySwiftAsync_leafKernelFrame_oldThreadState_waitInfo_turnstileInfo_);
}

uint64_t objc_msgSend_initWithKCDataDeltaThreadV3_startTimestamp_endTimestamp_startSampleIndex_endSampleIndex_name_leafUserFrame_leafOfCRootFramesReplacedBySwiftAsync_leafKernelFrame_oldThreadState_waitInfo_turnstileInfo_threadPolicyVersion_( void *a1, const char *a2, ...)
{
  return MEMORY[0x189616718]( a1,  sel_initWithKCDataDeltaThreadV3_startTimestamp_endTimestamp_startSampleIndex_endSampleIndex_name_leafUserFrame_leafOfCRootFramesReplacedBySwiftAsync_leafKernelFrame_oldThreadState_waitInfo_turnstileInfo_threadPolicyVersion_);
}

uint64_t objc_msgSend_initWithKCDataThreadV2_startTimestamp_endTimestamp_startSampleIndex_endSampleIndex_name_leafUserFrame_leafOfCRootFramesReplacedBySwiftAsync_leafKernelFrame_machTimebase_waitInfo_turnstileInfo_( void *a1, const char *a2, ...)
{
  return MEMORY[0x189616718]( a1,  sel_initWithKCDataThreadV2_startTimestamp_endTimestamp_startSampleIndex_endSampleIndex_name_leafUserFrame_leafOfCRootFramesReplacedBySwiftAsync_leafKernelFrame_machTimebase_waitInfo_turnstileInfo_);
}

uint64_t objc_msgSend_initWithKCDataThreadV4_startTimestamp_endTimestamp_startSampleIndex_endSampleIndex_name_leafUserFrame_leafOfCRootFramesReplacedBySwiftAsync_leafKernelFrame_machTimebase_waitInfo_turnstileInfo_threadPolicyVersion_threadInstructionCycles_( void *a1, const char *a2, ...)
{
  return MEMORY[0x189616718]( a1,  sel_initWithKCDataThreadV4_startTimestamp_endTimestamp_startSampleIndex_endSampleIndex_name_leafUserFrame_leafOfCRootFramesReplacedBySwiftAsync_leafKernelFrame_machTimebase_waitInfo_turnstileInfo_threadPolicyVersion_threadInstructionCycles_);
}

uint64_t objc_msgSend_initWithKCDataTransitioningTask_andTerminatedThreadsInstructionCycles_machTimebase_andDonatingUniquePids_startTimestamp_endTimestamp_startSampleIndex_endSampleIndex_( void *a1, const char *a2, ...)
{
  return MEMORY[0x189616718]( a1,  sel_initWithKCDataTransitioningTask_andTerminatedThreadsInstructionCycles_machTimebase_andDonatingUniquePids_startTimestamp_endTimestamp_startSampleIndex_endSampleIndex_);
}

uint64_t objc_msgSend_initWithMachAbsTime_machAbsTimeSec_machContTime_machContTimeSec_wallTime_( void *a1, const char *a2, ...)
{
  return MEMORY[0x189616718](a1, sel_initWithMachAbsTime_machAbsTimeSec_machContTime_machContTimeSec_wallTime_);
}

uint64_t objc_msgSend_initWithPid_uniquePid_name_mainBinaryPath_pidStartTime_loadInfos_numLoadInfos_textExecLoadInfos_numTextExecLoadInfos_architecture_sharedCache_( void *a1, const char *a2, ...)
{
  return MEMORY[0x189616718]( a1,  sel_initWithPid_uniquePid_name_mainBinaryPath_pidStartTime_loadInfos_numLoadInfos_textExecLoadInfos_numTextExecLoadInfos_architecture_sharedCache_);
}

uint64_t objc_msgSend_initWithStartTimestamp_endTimestamp_startSampleIndex_endSampleIndex_( void *a1, const char *a2, ...)
{
  return MEMORY[0x189616718](a1, sel_initWithStartTimestamp_endTimestamp_startSampleIndex_endSampleIndex_);
}

uint64_t objc_msgSend_initWithWaitInfo_turnstileInfo_isPartOfADeadlock_isBlockedByADeadlock_state_microstackshotState_pid_threadId_threadPriority_timeRange_originPid_proximatePid_startSampleIndex_sampleCount_( void *a1, const char *a2, ...)
{
  return MEMORY[0x189616718]( a1,  sel_initWithWaitInfo_turnstileInfo_isPartOfADeadlock_isBlockedByADeadlock_state_microstackshotState_pid_threadId_threadPriority_timeRange_originPid_proximatePid_startSampleIndex_sampleCount_);
}

uint64_t objc_msgSend_newInstanceWithoutReferencesFromSerializedBuffer_bufferLength_andDeserializationDictionary_andDataBufferDictionary_( void *a1, const char *a2, ...)
{
  return MEMORY[0x189616718]( a1,  sel_newInstanceWithoutReferencesFromSerializedBuffer_bufferLength_andDeserializationDictionary_andDataBufferDictionary_);
}

uint64_t objc_msgSend_populateReferencesUsingBuffer_bufferLength_andDeserializationDictionary_andDataBufferDictionary_( void *a1, const char *a2, ...)
{
  return MEMORY[0x189616718]( a1,  sel_populateReferencesUsingBuffer_bufferLength_andDeserializationDictionary_andDataBufferDictionary_);
}

uint64_t objc_msgSend_stateWithMicrostackshot_thread_startTimestamp_endTimestamp_startSampleIndex_endSampleIndex_leafUserFrame_leafOfCRootFramesReplacedBySwiftAsync_leafKernelFrame_machTimebase_( void *a1, const char *a2, ...)
{
  return MEMORY[0x189616718]( a1,  sel_stateWithMicrostackshot_thread_startTimestamp_endTimestamp_startSampleIndex_endSampleIndex_leafUserFrame_leafOfCRootFramesReplacedBySwiftAsync_leafKernelFrame_machTimebase_);
}

uint64_t objc_msgSend_stateWithStartTimestamp_endTimestamp_startSampleIndex_endSampleIndex_( void *a1, const char *a2, ...)
{
  return MEMORY[0x189616718](a1, sel_stateWithStartTimestamp_endTimestamp_startSampleIndex_endSampleIndex_);
}

uint64_t objc_msgSend_timestampWithMachAbsTime_machAbsTimeSec_machContTime_machContTimeSec_wallTime_( void *a1, const char *a2, ...)
{
  return MEMORY[0x189616718](a1, sel_timestampWithMachAbsTime_machAbsTimeSec_machContTime_machContTimeSec_wallTime_);
}